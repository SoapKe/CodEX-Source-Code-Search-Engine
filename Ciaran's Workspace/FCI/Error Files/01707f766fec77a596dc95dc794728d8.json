{"author": "apache", "code": "\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom collections import defaultdict\n\nfrom superset import sm\n\n\ndef cleanup_permissions():\n    \n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    print('\n    pvms_dict = defaultdict(list)\n    for pvm in pvms:\n        pvms_dict[(pvm.permission, pvm.view_menu)].append(pvm)\n    duplicates = [v for v in pvms_dict.values() if len(v) > 1]\n    len(duplicates)\n\n    for pvm_list in duplicates:\n        first_prm = pvm_list[0]\n        roles = set(first_prm.role)\n        for pvm in pvm_list[1:]:\n            roles = roles.union(pvm.role)\n            sm.get_session.delete(pvm)\n        first_prm.roles = list(roles)\n    sm.get_session.commit()\n\n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    print('STage 1: \n\n    \n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    for pvm in pvms:\n        if not (pvm.view_menu and pvm.permission):\n            sm.get_session.delete(pvm)\n    sm.get_session.commit()\n\n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    print('Stage 2: \n\n    \n    roles = sm.get_session.query(sm.role_model).all()\n    for role in roles:\n        role.permissions = [p for p in role.permissions if p]\n    sm.get_session.commit()\n\n    \n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    for pvm in pvms:\n        pvm.role = [r for r in pvm.role if r]\n    sm.get_session.commit()\n\n\ncleanup_permissions()\n", "comments": "-*- coding: utf-8 -*- 1 clean duplicates permission view menues is: {}'.format(len(pvms))) permission view menues is: {}'.format(len(pvms))) 2 clean none permissions view menues permission view menues is: {}'.format(len(pvms))) 3 delete empty permission view menues roles 4 delete empty roles permission view menues", "content": "# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nfrom collections import defaultdict\n\nfrom superset import sm\n\n\ndef cleanup_permissions():\n    # 1. Clean up duplicates.\n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    print('# of permission view menues is: {}'.format(len(pvms)))\n    pvms_dict = defaultdict(list)\n    for pvm in pvms:\n        pvms_dict[(pvm.permission, pvm.view_menu)].append(pvm)\n    duplicates = [v for v in pvms_dict.values() if len(v) > 1]\n    len(duplicates)\n\n    for pvm_list in duplicates:\n        first_prm = pvm_list[0]\n        roles = set(first_prm.role)\n        for pvm in pvm_list[1:]:\n            roles = roles.union(pvm.role)\n            sm.get_session.delete(pvm)\n        first_prm.roles = list(roles)\n    sm.get_session.commit()\n\n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    print('STage 1: # of permission view menues is: {}'.format(len(pvms)))\n\n    # 2. Clean up None permissions or view menues\n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    for pvm in pvms:\n        if not (pvm.view_menu and pvm.permission):\n            sm.get_session.delete(pvm)\n    sm.get_session.commit()\n\n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    print('Stage 2: # of permission view menues is: {}'.format(len(pvms)))\n\n    # 3. Delete empty permission view menues from roles\n    roles = sm.get_session.query(sm.role_model).all()\n    for role in roles:\n        role.permissions = [p for p in role.permissions if p]\n    sm.get_session.commit()\n\n    # 4. Delete empty roles from permission view menues\n    pvms = sm.get_session.query(sm.permissionview_model).all()\n    for pvm in pvms:\n        pvm.role = [r for r in pvm.role if r]\n    sm.get_session.commit()\n\n\ncleanup_permissions()\n", "description": "Apache Superset (incubating) is a modern, enterprise-ready business intelligence web application", "file_name": "permissions_cleanup.py", "id": "01707f766fec77a596dc95dc794728d8", "language": "Python", "project_name": "incubator-superset", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/apache-incubator-superset/apache-incubator-superset-95a9b04/scripts/permissions_cleanup.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:41:03Z", "url": "https://github.com/apache/incubator-superset", "wiki": false}