{"author": "HelloZeroNet", "code": "import json\nimport logging\nimport re\nimport os\nimport time\nimport atexit\n\nimport gevent\n\nfrom Plugin import PluginManager\nfrom Content import ContentDb\nfrom Config import config\nfrom util import helper\n\n\n@PluginManager.acceptPlugins\nclass SiteManager(object):\n    def __init__(self):\n        self.log = logging.getLogger(\"SiteManager\")\n        self.log.debug(\"SiteManager created.\")\n        self.sites = {}\n        self.sites_changed = int(time.time())\n        self.loaded = False\n        gevent.spawn(self.saveTimer)\n        atexit.register(lambda: self.save(recalculate_size=True))\n\n    \n    def load(self, cleanup=True, startup=False):\n        self.log.debug(\"Loading sites...\")\n        self.loaded = False\n        from Site import Site\n        address_found = []\n        added = 0\n        \n        for address, settings in json.load(open(\"%s/sites.json\" % config.data_dir)).iteritems():\n            if address not in self.sites:\n                if os.path.isfile(\"%s/%s/content.json\" % (config.data_dir, address)):\n                    \n                    s = time.time()\n                    try:\n                        site = Site(address, settings=settings)\n                        site.content_manager.contents.get(\"content.json\")\n                    except Exception, err:\n                        self.log.debug(\"Error loading site %s: %s\" % (address, err))\n                        continue\n                    self.sites[address] = site\n                    self.log.debug(\"Loaded site %s in %.3fs\" % (address, time.time() - s))\n                    added += 1\n                elif startup and settings.get(\"peers\", 0) > 0:\n                    \n                    self.log.debug(\"Found new site in sites.json: %s\" % address)\n                    gevent.spawn(self.need, address, settings=settings)\n                    added += 1\n\n            address_found.append(address)\n\n        \n        if cleanup:\n            for address in self.sites.keys():\n                if address not in address_found:\n                    del(self.sites[address])\n                    self.log.debug(\"Removed site: %s\" % address)\n\n            \n            content_db = ContentDb.getContentDb()\n            for row in content_db.execute(\"SELECT * FROM site\").fetchall():\n                address = row[\"address\"]\n                if address not in self.sites:\n                    self.log.info(\"Deleting orphan site from content.db: %s\" % address)\n\n                    try:\n                        content_db.execute(\"DELETE FROM site WHERE ?\", {\"address\": address})\n                    except Exception as err:\n                        self.log.error(\"Can't delete site %s from content_db: %s\" % (address, err))\n\n                    if address in content_db.site_ids:\n                        del content_db.site_ids[address]\n                    if address in content_db.sites:\n                        del content_db.sites[address]\n\n        if added:\n            self.log.debug(\"SiteManager added %s sites\" % added)\n        self.loaded = True\n\n    def save(self, recalculate_size=False):\n        if not self.sites:\n            self.log.debug(\"Save skipped: No sites found\")\n            return\n        if not self.loaded:\n            self.log.debug(\"Save skipped: Not loaded\")\n            return\n        s = time.time()\n        data = {}\n        \n        s = time.time()\n        for address, site in self.list().iteritems():\n            if recalculate_size:\n                site.settings[\"size\"], site.settings[\"size_optional\"] = site.content_manager.getTotalSize()  \n            data[address] = site.settings\n            data[address][\"cache\"] = site.getSettingsCache()\n        time_generate = time.time() - s\n\n        s = time.time()\n        if data:\n            helper.atomicWrite(\"%s/sites.json\" % config.data_dir, json.dumps(data, indent=2, sort_keys=True))\n        else:\n            self.log.debug(\"Save error: No data\")\n        time_write = time.time() - s\n\n        \n        for address, site in self.list().iteritems():\n            site.settings[\"cache\"] = {}\n\n        self.log.debug(\"Saved sites in %.2fs (generate: %.2fs, write: %.2fs)\" % (time.time() - s, time_generate, time_write))\n\n    def saveTimer(self):\n        while 1:\n            time.sleep(60 * 10)\n            self.save(recalculate_size=True)\n\n    \n    def isAddress(self, address):\n        return re.match(\"^[A-Za-z0-9]{26,35}$\", address)\n\n    def isDomain(self, address):\n        return False\n\n    \n    def get(self, address):\n        if not self.loaded:  \n            self.log.debug(\"Getting new site: %s)...\" % address)\n            self.load()\n        return self.sites.get(address)\n\n    \n    def need(self, address, all_file=True, settings=None):\n        from Site import Site\n        site = self.get(address)\n        if not site:  \n            self.sites_changed = int(time.time())\n            \n            for recover_address, recover_site in self.sites.items():\n                if recover_address.lower() == address.lower():\n                    return recover_site\n\n            if not self.isAddress(address):\n                return False  \n            self.log.debug(\"Added new site: %s\" % address)\n            site = Site(address, settings=settings)\n            self.sites[address] = site\n            if not site.settings[\"serving\"]:  \n                site.settings[\"serving\"] = True\n            site.saveSettings()\n            if all_file:  \n                site.download(check_size=True, blind_includes=True)\n\n        return site\n\n    def delete(self, address):\n        self.sites_changed = int(time.time())\n        self.log.debug(\"SiteManager deleted site: %s\" % address)\n        del(self.sites[address])\n        \n        self.save()\n\n    \n    def list(self):\n        if not self.loaded:  \n            self.log.debug(\"Sites not loaded yet...\")\n            self.load(startup=True)\n        return self.sites\n\n\nsite_manager = SiteManager()  \n\nif config.action == \"main\":  \n    peer_blacklist = [(\"127.0.0.1\", config.fileserver_port)]\nelse:\n    peer_blacklist = []\n\n", "comments": "load sites data/sites.json load new adresses root content.json exists try load site no site directory start download remove deleted adresses remove orpan sites contentdb generate data file update site size remove cache site settings checks valid address return: site object none found not loaded yet return create site start download site files site exist yet try find site differect case not address: %s % address maybe deleted also download user files first sync delete sites.json lazy load sites not loaded yet singletone don't connect / add peerlist", "content": "import json\nimport logging\nimport re\nimport os\nimport time\nimport atexit\n\nimport gevent\n\nfrom Plugin import PluginManager\nfrom Content import ContentDb\nfrom Config import config\nfrom util import helper\n\n\n@PluginManager.acceptPlugins\nclass SiteManager(object):\n    def __init__(self):\n        self.log = logging.getLogger(\"SiteManager\")\n        self.log.debug(\"SiteManager created.\")\n        self.sites = {}\n        self.sites_changed = int(time.time())\n        self.loaded = False\n        gevent.spawn(self.saveTimer)\n        atexit.register(lambda: self.save(recalculate_size=True))\n\n    # Load all sites from data/sites.json\n    def load(self, cleanup=True, startup=False):\n        self.log.debug(\"Loading sites...\")\n        self.loaded = False\n        from Site import Site\n        address_found = []\n        added = 0\n        # Load new adresses\n        for address, settings in json.load(open(\"%s/sites.json\" % config.data_dir)).iteritems():\n            if address not in self.sites:\n                if os.path.isfile(\"%s/%s/content.json\" % (config.data_dir, address)):\n                    # Root content.json exists, try load site\n                    s = time.time()\n                    try:\n                        site = Site(address, settings=settings)\n                        site.content_manager.contents.get(\"content.json\")\n                    except Exception, err:\n                        self.log.debug(\"Error loading site %s: %s\" % (address, err))\n                        continue\n                    self.sites[address] = site\n                    self.log.debug(\"Loaded site %s in %.3fs\" % (address, time.time() - s))\n                    added += 1\n                elif startup and settings.get(\"peers\", 0) > 0:\n                    # No site directory, start download\n                    self.log.debug(\"Found new site in sites.json: %s\" % address)\n                    gevent.spawn(self.need, address, settings=settings)\n                    added += 1\n\n            address_found.append(address)\n\n        # Remove deleted adresses\n        if cleanup:\n            for address in self.sites.keys():\n                if address not in address_found:\n                    del(self.sites[address])\n                    self.log.debug(\"Removed site: %s\" % address)\n\n            # Remove orpan sites from contentdb\n            content_db = ContentDb.getContentDb()\n            for row in content_db.execute(\"SELECT * FROM site\").fetchall():\n                address = row[\"address\"]\n                if address not in self.sites:\n                    self.log.info(\"Deleting orphan site from content.db: %s\" % address)\n\n                    try:\n                        content_db.execute(\"DELETE FROM site WHERE ?\", {\"address\": address})\n                    except Exception as err:\n                        self.log.error(\"Can't delete site %s from content_db: %s\" % (address, err))\n\n                    if address in content_db.site_ids:\n                        del content_db.site_ids[address]\n                    if address in content_db.sites:\n                        del content_db.sites[address]\n\n        if added:\n            self.log.debug(\"SiteManager added %s sites\" % added)\n        self.loaded = True\n\n    def save(self, recalculate_size=False):\n        if not self.sites:\n            self.log.debug(\"Save skipped: No sites found\")\n            return\n        if not self.loaded:\n            self.log.debug(\"Save skipped: Not loaded\")\n            return\n        s = time.time()\n        data = {}\n        # Generate data file\n        s = time.time()\n        for address, site in self.list().iteritems():\n            if recalculate_size:\n                site.settings[\"size\"], site.settings[\"size_optional\"] = site.content_manager.getTotalSize()  # Update site size\n            data[address] = site.settings\n            data[address][\"cache\"] = site.getSettingsCache()\n        time_generate = time.time() - s\n\n        s = time.time()\n        if data:\n            helper.atomicWrite(\"%s/sites.json\" % config.data_dir, json.dumps(data, indent=2, sort_keys=True))\n        else:\n            self.log.debug(\"Save error: No data\")\n        time_write = time.time() - s\n\n        # Remove cache from site settings\n        for address, site in self.list().iteritems():\n            site.settings[\"cache\"] = {}\n\n        self.log.debug(\"Saved sites in %.2fs (generate: %.2fs, write: %.2fs)\" % (time.time() - s, time_generate, time_write))\n\n    def saveTimer(self):\n        while 1:\n            time.sleep(60 * 10)\n            self.save(recalculate_size=True)\n\n    # Checks if its a valid address\n    def isAddress(self, address):\n        return re.match(\"^[A-Za-z0-9]{26,35}$\", address)\n\n    def isDomain(self, address):\n        return False\n\n    # Return: Site object or None if not found\n    def get(self, address):\n        if not self.loaded:  # Not loaded yet\n            self.log.debug(\"Getting new site: %s)...\" % address)\n            self.load()\n        return self.sites.get(address)\n\n    # Return or create site and start download site files\n    def need(self, address, all_file=True, settings=None):\n        from Site import Site\n        site = self.get(address)\n        if not site:  # Site not exist yet\n            self.sites_changed = int(time.time())\n            # Try to find site with differect case\n            for recover_address, recover_site in self.sites.items():\n                if recover_address.lower() == address.lower():\n                    return recover_site\n\n            if not self.isAddress(address):\n                return False  # Not address: %s % address\n            self.log.debug(\"Added new site: %s\" % address)\n            site = Site(address, settings=settings)\n            self.sites[address] = site\n            if not site.settings[\"serving\"]:  # Maybe it was deleted before\n                site.settings[\"serving\"] = True\n            site.saveSettings()\n            if all_file:  # Also download user files on first sync\n                site.download(check_size=True, blind_includes=True)\n\n        return site\n\n    def delete(self, address):\n        self.sites_changed = int(time.time())\n        self.log.debug(\"SiteManager deleted site: %s\" % address)\n        del(self.sites[address])\n        # Delete from sites.json\n        self.save()\n\n    # Lazy load sites\n    def list(self):\n        if not self.loaded:  # Not loaded yet\n            self.log.debug(\"Sites not loaded yet...\")\n            self.load(startup=True)\n        return self.sites\n\n\nsite_manager = SiteManager()  # Singletone\n\nif config.action == \"main\":  # Don't connect / add myself to peerlist\n    peer_blacklist = [(\"127.0.0.1\", config.fileserver_port)]\nelse:\n    peer_blacklist = []\n\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "SiteManager.py", "id": "45c7485e9c3efad82e45e9b3cae85e7a", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-3bdb6a2/src/Site/SiteManager.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:21:08Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}