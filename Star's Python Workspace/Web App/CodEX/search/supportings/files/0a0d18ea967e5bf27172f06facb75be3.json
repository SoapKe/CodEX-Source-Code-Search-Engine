{
  "author": "rg3",
  "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass LnkGoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?lnkgo\\.(?:alfa\\.)?lt/visi-video/(?P<show>[^/]+)/ziurek-(?P<id>[A-Za-z0-9-]+)'\n    _TESTS = [{\n        'url': 'http://lnkgo.alfa.lt/visi-video/yra-kaip-yra/ziurek-yra-kaip-yra-162',\n        'info_dict': {\n            'id': '46712',\n            'ext': 'mp4',\n            'title': 'Yra kaip yra',\n            'upload_date': '20150107',\n            'description': 'md5:d82a5e36b775b7048617f263a0e3475e',\n            'age_limit': 7,\n            'duration': 3019,\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }, {\n        'url': 'http://lnkgo.alfa.lt/visi-video/aktualai-pratesimas/ziurek-nerdas-taiso-kompiuteri-2',\n        'info_dict': {\n            'id': '47289',\n            'ext': 'mp4',\n            'title': 'N\u0117rdas: Kompiuterio Valymas',\n            'upload_date': '20150113',\n            'description': 'md5:7352d113a242a808676ff17e69db6a69',\n            'age_limit': 18,\n            'duration': 346,\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }, {\n        'url': 'http://www.lnkgo.lt/visi-video/aktualai-pratesimas/ziurek-putka-trys-klausimai',\n        'only_matching': True,\n    }]\n    _AGE_LIMITS = {\n        'N-7': 7,\n        'N-14': 14,\n        'S': 18,\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            url, display_id, 'Downloading player webpage')\n\n        video_id = self._search_regex(\n            r'data-ep=\"([^\"]+)\"', webpage, 'video ID')\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'class=\"[^\"]*meta-item[^\"]*air-time[^\"]*\">.*?<strong>([^<]+)</strong>', webpage, 'upload date', fatal=False))\n\n        thumbnail_w = int_or_none(\n            self._og_search_property('image:width', webpage, 'thumbnail width', fatal=False))\n        thumbnail_h = int_or_none(\n            self._og_search_property('image:height', webpage, 'thumbnail height', fatal=False))\n        thumbnail = {\n            'url': self._og_search_thumbnail(webpage),\n        }\n        if thumbnail_w and thumbnail_h:\n            thumbnail.update({\n                'width': thumbnail_w,\n                'height': thumbnail_h,\n            })\n\n        config = self._parse_json(self._search_regex(\n            r'episodePlayer\\((\\{.*?\\}),\\s*\\{', webpage, 'sources'), video_id)\n\n        if config.get('pGeo'):\n            self.report_warning(\n                'This content might not be available in your country due to copyright reasons')\n\n        formats = [{\n            'format_id': 'hls',\n            'ext': 'mp4',\n            'url': config['EpisodeVideoLink_HLS'],\n        }]\n\n        m = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<play_path>.+)$', config['EpisodeVideoLink'])\n        if m:\n            formats.append({\n                'format_id': 'rtmp',\n                'ext': 'flv',\n                'url': m.group('url'),\n                'play_path': m.group('play_path'),\n                'page_url': url,\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'formats': formats,\n            'thumbnails': [thumbnail],\n            'duration': int_or_none(config.get('VideoTime')),\n            'description': description,\n            'age_limit': self._AGE_LIMITS.get(config.get('PGRating'), 0),\n            'upload_date': upload_date,\n        }\n",
  "comments": "# coding: utf-8\n# HLS download\n# HLS download\n",
  "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass LnkGoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?lnkgo\\.(?:alfa\\.)?lt/visi-video/(?P<show>[^/]+)/ziurek-(?P<id>[A-Za-z0-9-]+)'\n    _TESTS = [{\n        'url': 'http://lnkgo.alfa.lt/visi-video/yra-kaip-yra/ziurek-yra-kaip-yra-162',\n        'info_dict': {\n            'id': '46712',\n            'ext': 'mp4',\n            'title': 'Yra kaip yra',\n            'upload_date': '20150107',\n            'description': 'md5:d82a5e36b775b7048617f263a0e3475e',\n            'age_limit': 7,\n            'duration': 3019,\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        },\n        'params': {\n            'skip_download': True,  # HLS download\n        },\n    }, {\n        'url': 'http://lnkgo.alfa.lt/visi-video/aktualai-pratesimas/ziurek-nerdas-taiso-kompiuteri-2',\n        'info_dict': {\n            'id': '47289',\n            'ext': 'mp4',\n            'title': 'N\u0117rdas: Kompiuterio Valymas',\n            'upload_date': '20150113',\n            'description': 'md5:7352d113a242a808676ff17e69db6a69',\n            'age_limit': 18,\n            'duration': 346,\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        },\n        'params': {\n            'skip_download': True,  # HLS download\n        },\n    }, {\n        'url': 'http://www.lnkgo.lt/visi-video/aktualai-pratesimas/ziurek-putka-trys-klausimai',\n        'only_matching': True,\n    }]\n    _AGE_LIMITS = {\n        'N-7': 7,\n        'N-14': 14,\n        'S': 18,\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            url, display_id, 'Downloading player webpage')\n\n        video_id = self._search_regex(\n            r'data-ep=\"([^\"]+)\"', webpage, 'video ID')\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'class=\"[^\"]*meta-item[^\"]*air-time[^\"]*\">.*?<strong>([^<]+)</strong>', webpage, 'upload date', fatal=False))\n\n        thumbnail_w = int_or_none(\n            self._og_search_property('image:width', webpage, 'thumbnail width', fatal=False))\n        thumbnail_h = int_or_none(\n            self._og_search_property('image:height', webpage, 'thumbnail height', fatal=False))\n        thumbnail = {\n            'url': self._og_search_thumbnail(webpage),\n        }\n        if thumbnail_w and thumbnail_h:\n            thumbnail.update({\n                'width': thumbnail_w,\n                'height': thumbnail_h,\n            })\n\n        config = self._parse_json(self._search_regex(\n            r'episodePlayer\\((\\{.*?\\}),\\s*\\{', webpage, 'sources'), video_id)\n\n        if config.get('pGeo'):\n            self.report_warning(\n                'This content might not be available in your country due to copyright reasons')\n\n        formats = [{\n            'format_id': 'hls',\n            'ext': 'mp4',\n            'url': config['EpisodeVideoLink_HLS'],\n        }]\n\n        m = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<play_path>.+)$', config['EpisodeVideoLink'])\n        if m:\n            formats.append({\n                'format_id': 'rtmp',\n                'ext': 'flv',\n                'url': m.group('url'),\n                'play_path': m.group('play_path'),\n                'page_url': url,\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'formats': formats,\n            'thumbnails': [thumbnail],\n            'duration': int_or_none(config.get('VideoTime')),\n            'description': description,\n            'age_limit': self._AGE_LIMITS.get(config.get('PGRating'), 0),\n            'upload_date': upload_date,\n        }\n",
  "description": "Command-line program to download videos from YouTube.com and other video sites",
  "file_name": "lnkgo.py",
  "language": "Python",
  "project_name": "youtube-dl",
  "quality": "",
  "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/lnkgo.py",
  "save_time": "",
  "source": "",
  "update_at": "2018-03-07T09:18:39Z",
  "url": "https://github.com/rg3/youtube-dl",
  "wiki": false
}