{
  "author": "rg3",
  "id":"0aa3f33d5fbc84791500738d34feba64",
  "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    js_to_json,\n)\n\n\nclass SportBoxEmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://news\\.sportbox\\.ru/vdl/player(?:/[^/]+/|\\?.*?\\bn?id=)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://news.sportbox.ru/vdl/player/ci/211355',\n        'info_dict': {\n            'id': '211355',\n            'ext': 'mp4',\n            'title': '211355',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 292,\n            'view_count': int,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://news.sportbox.ru/vdl/player?nid=370908&only_player=1&autostart=false&playeri=2&height=340&width=580',\n        'only_matching': True,\n    }, {\n        'url': 'https://news.sportbox.ru/vdl/player/media/193095',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=\"(https?://news\\.sportbox\\.ru/vdl/player[^\"]+)\"',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        wjplayer_data = self._parse_json(\n            self._search_regex(\n                r'(?s)wjplayer\\(({.+?})\\);', webpage, 'wjplayer settings'),\n            video_id, transform_source=js_to_json)\n\n        formats = []\n        for source in wjplayer_data['sources']:\n            src = source.get('src')\n            if not src:\n                continue\n            if determine_ext(src) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    src, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': src,\n                })\n        self._sort_formats(formats)\n\n        view_count = int_or_none(self._search_regex(\n            r'\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432\\s*:\\s*(\\d+)', webpage, 'view count', default=None))\n\n        return {\n            'id': video_id,\n            'title': video_id,\n            'thumbnail': wjplayer_data.get('poster'),\n            'duration': int_or_none(wjplayer_data.get('duration')),\n            'view_count': view_count,\n            'formats': formats,\n        }\n",
  "comments": "# coding: utf-8\n# m3u8 download\n",
  "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    js_to_json,\n)\n\n\nclass SportBoxEmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://news\\.sportbox\\.ru/vdl/player(?:/[^/]+/|\\?.*?\\bn?id=)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://news.sportbox.ru/vdl/player/ci/211355',\n        'info_dict': {\n            'id': '211355',\n            'ext': 'mp4',\n            'title': '211355',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 292,\n            'view_count': int,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://news.sportbox.ru/vdl/player?nid=370908&only_player=1&autostart=false&playeri=2&height=340&width=580',\n        'only_matching': True,\n    }, {\n        'url': 'https://news.sportbox.ru/vdl/player/media/193095',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=\"(https?://news\\.sportbox\\.ru/vdl/player[^\"]+)\"',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        wjplayer_data = self._parse_json(\n            self._search_regex(\n                r'(?s)wjplayer\\(({.+?})\\);', webpage, 'wjplayer settings'),\n            video_id, transform_source=js_to_json)\n\n        formats = []\n        for source in wjplayer_data['sources']:\n            src = source.get('src')\n            if not src:\n                continue\n            if determine_ext(src) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    src, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': src,\n                })\n        self._sort_formats(formats)\n\n        view_count = int_or_none(self._search_regex(\n            r'\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432\\s*:\\s*(\\d+)', webpage, 'view count', default=None))\n\n        return {\n            'id': video_id,\n            'title': video_id,\n            'thumbnail': wjplayer_data.get('poster'),\n            'duration': int_or_none(wjplayer_data.get('duration')),\n            'view_count': view_count,\n            'formats': formats,\n        }\n",
  "description": "Command-line program to download videos from YouTube.com and other video sites",
  "file_name": "sportbox.py",
  "language": "Python",
  "project_name": "youtube-dl",
  "quality": "",
  "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/sportbox.py",
  "save_time": "",
  "source": "",
  "update_at": "2018-03-07T09:18:39Z",
  "url": "https://github.com/rg3/youtube-dl",
  "wiki": false
}