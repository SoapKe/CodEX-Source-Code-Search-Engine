{
  "author": "rg3",
  "id":"0ac901ec06ca224f55744f1573feed28",
  "code": "\nfrom __future__ import unicode_literals\n\n\n\n\nimport os\nimport sys\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import gettestcases\nfrom youtube_dl.utils import compat_urllib_parse_urlparse\nfrom youtube_dl.utils import compat_urllib_request\n\nif len(sys.argv) > 1:\n    METHOD = 'LIST'\n    LIST = open(sys.argv[1]).read().decode('utf8').strip()\nelse:\n    METHOD = 'EURISTIC'\n\nfor test in gettestcases():\n    if METHOD == 'EURISTIC':\n        try:\n            webpage = compat_urllib_request.urlopen(test['url'], timeout=10).read()\n        except Exception:\n            print('\\nFail: {0}'.format(test['name']))\n            continue\n\n        webpage = webpage.decode('utf8', 'replace')\n\n        RESULT = 'porn' in webpage.lower()\n\n    elif METHOD == 'LIST':\n        domain = compat_urllib_parse_urlparse(test['url']).netloc\n        if not domain:\n            print('\\nFail: {0}'.format(test['name']))\n            continue\n        domain = '.'.join(domain.split('.')[-2:])\n\n        RESULT = ('.' + domain + '\\n' in LIST or '\\n' + domain + '\\n' in LIST)\n\n    if RESULT and ('info_dict' not in test or 'age_limit' not in test['info_dict'] or\n                   test['info_dict']['age_limit'] != 18):\n        print('\\nPotential missing age_limit check: {0}'.format(test['name']))\n\n    elif not RESULT and ('info_dict' in test and 'age_limit' in test['info_dict'] and\n                         test['info_dict']['age_limit'] == 18):\n        print('\\nPotential false negative: {0}'.format(test['name']))\n\n    else:\n        sys.stdout.write('.')\n    sys.stdout.flush()\n\nprint()\n",
  "comments": "\nThis script employs a VERY basic heuristic ('porn' in webpage.lower()) to check\nif we are not 'age_limit' tagging some porn site\n\nA second approach implemented relies on a list of porn domains, to activate it\npass the list filename as the only argument\n\n\n\n#!/usr/bin/env python\n# Allow direct execution\n",
  "content": "#!/usr/bin/env python\nfrom __future__ import unicode_literals\n\n\"\"\"\nThis script employs a VERY basic heuristic ('porn' in webpage.lower()) to check\nif we are not 'age_limit' tagging some porn site\n\nA second approach implemented relies on a list of porn domains, to activate it\npass the list filename as the only argument\n\"\"\"\n\n# Allow direct execution\nimport os\nimport sys\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import gettestcases\nfrom youtube_dl.utils import compat_urllib_parse_urlparse\nfrom youtube_dl.utils import compat_urllib_request\n\nif len(sys.argv) > 1:\n    METHOD = 'LIST'\n    LIST = open(sys.argv[1]).read().decode('utf8').strip()\nelse:\n    METHOD = 'EURISTIC'\n\nfor test in gettestcases():\n    if METHOD == 'EURISTIC':\n        try:\n            webpage = compat_urllib_request.urlopen(test['url'], timeout=10).read()\n        except Exception:\n            print('\\nFail: {0}'.format(test['name']))\n            continue\n\n        webpage = webpage.decode('utf8', 'replace')\n\n        RESULT = 'porn' in webpage.lower()\n\n    elif METHOD == 'LIST':\n        domain = compat_urllib_parse_urlparse(test['url']).netloc\n        if not domain:\n            print('\\nFail: {0}'.format(test['name']))\n            continue\n        domain = '.'.join(domain.split('.')[-2:])\n\n        RESULT = ('.' + domain + '\\n' in LIST or '\\n' + domain + '\\n' in LIST)\n\n    if RESULT and ('info_dict' not in test or 'age_limit' not in test['info_dict'] or\n                   test['info_dict']['age_limit'] != 18):\n        print('\\nPotential missing age_limit check: {0}'.format(test['name']))\n\n    elif not RESULT and ('info_dict' in test and 'age_limit' in test['info_dict'] and\n                         test['info_dict']['age_limit'] == 18):\n        print('\\nPotential false negative: {0}'.format(test['name']))\n\n    else:\n        sys.stdout.write('.')\n    sys.stdout.flush()\n\nprint()\n",
  "description": "Command-line program to download videos from YouTube.com and other video sites",
  "file_name": "check-porn.py",
  "language": "Python",
  "project_name": "youtube-dl",
  "quality": "",
  "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/devscripts/check-porn.py",
  "save_time": "",
  "source": "",
  "update_at": "2018-03-07T09:18:39Z",
  "url": "https://github.com/rg3/youtube-dl",
  "wiki": false
}