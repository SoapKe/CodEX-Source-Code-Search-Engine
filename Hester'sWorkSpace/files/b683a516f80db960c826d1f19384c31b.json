{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.gradle_wrapper import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture(autouse=True)\ndef exists(mocker):\n    return mocker.patch('thefuck.rules.gradle_wrapper.os.path.isfile',\n                        return_value=True)\n\n\n@pytest.mark.parametrize('command', [\n    Command('gradle tasks', 'gradle: not found'),\n    Command('gradle build', 'gradle: not found')])\ndef test_match(mocker, command):\n    mocker.patch('thefuck.rules.gradle_wrapper.which', return_value=None)\n\n    assert match(command)\n\n\n@pytest.mark.parametrize('command, gradlew, which', [\n    (Command('gradle tasks', 'gradle: not found'), False, None),\n    (Command('gradle tasks', 'command not found'), True, '/usr/bin/gradle'),\n    (Command('npm tasks', 'npm: not found'), True, None)])\ndef test_not_match(mocker, exists, command, gradlew, which):\n    mocker.patch('thefuck.rules.gradle_wrapper.which', return_value=which)\n    exists.return_value = gradlew\n\n    assert not match(command)\n\n\n@pytest.mark.parametrize('script, result', [\n    ('gradle assemble', './gradlew assemble'),\n    ('gradle --help', './gradlew --help'),\n    ('gradle build -c', './gradlew build -c')])\ndef test_get_new_command(script, result):\n    command = Command(script, '')\n    assert get_new_command(command) == result\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.gradle_wrapper import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture(autouse=True)\ndef exists(mocker):\n    return mocker.patch('thefuck.rules.gradle_wrapper.os.path.isfile',\n                        return_value=True)\n\n\n@pytest.mark.parametrize('command', [\n    Command('gradle tasks', 'gradle: not found'),\n    Command('gradle build', 'gradle: not found')])\ndef test_match(mocker, command):\n    mocker.patch('thefuck.rules.gradle_wrapper.which', return_value=None)\n\n    assert match(command)\n\n\n@pytest.mark.parametrize('command, gradlew, which', [\n    (Command('gradle tasks', 'gradle: not found'), False, None),\n    (Command('gradle tasks', 'command not found'), True, '/usr/bin/gradle'),\n    (Command('npm tasks', 'npm: not found'), True, None)])\ndef test_not_match(mocker, exists, command, gradlew, which):\n    mocker.patch('thefuck.rules.gradle_wrapper.which', return_value=which)\n    exists.return_value = gradlew\n\n    assert not match(command)\n\n\n@pytest.mark.parametrize('script, result', [\n    ('gradle assemble', './gradlew assemble'),\n    ('gradle --help', './gradlew --help'),\n    ('gradle build -c', './gradlew build -c')])\ndef test_get_new_command(script, result):\n    command = Command(script, '')\n    assert get_new_command(command) == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_gradle_wrapper.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_gradle_wrapper.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}