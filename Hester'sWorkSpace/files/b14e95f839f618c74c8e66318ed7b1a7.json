{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport datetime\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    ExtractorError,\n    InAdvancePagedList,\n    orderedSet,\n    str_to_int,\n    unified_strdate,\n)\n\n\nclass MotherlessIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?motherless\\.com/(?:g/[a-z0-9_]+/)?(?P<id>[A-Z0-9]+)'\n    _TESTS = [{\n        'url': 'http://motherless.com/AC3FFE1',\n        'md5': '310f62e325a9fafe64f68c0bccb6e75f',\n        'info_dict': {\n            'id': 'AC3FFE1',\n            'ext': 'mp4',\n            'title': 'Fucked in the ass while playing PS3',\n            'categories': ['Gaming', 'anal', 'reluctant', 'rough', 'Wife'],\n            'upload_date': '20100913',\n            'uploader_id': 'famouslyfuckedup',\n            'thumbnail': r're:http://.*\\.jpg',\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://motherless.com/532291B',\n        'md5': 'bc59a6b47d1f958e61fbd38a4d31b131',\n        'info_dict': {\n            'id': '532291B',\n            'ext': 'mp4',\n            'title': 'Amazing girl playing the omegle game, PERFECT!',\n            'categories': ['Amateur', 'webcam', 'omegle', 'pink', 'young', 'masturbate', 'teen',\n                           'game', 'hairy'],\n            'upload_date': '20140622',\n            'uploader_id': 'Sulivana7x',\n            'thumbnail': r're:http://.*\\.jpg',\n            'age_limit': 18,\n        },\n        'skip': '404',\n    }, {\n        'url': 'http://motherless.com/g/cosplay/633979F',\n        'md5': '0b2a43f447a49c3e649c93ad1fafa4a0',\n        'info_dict': {\n            'id': '633979F',\n            'ext': 'mp4',\n            'title': 'Turtlette',\n            'categories': ['superheroine heroine  superher'],\n            'upload_date': '20140827',\n            'uploader_id': 'shade0230',\n            'thumbnail': r're:http://.*\\.jpg',\n            'age_limit': 18,\n        }\n    }, {\n        \n        'url': 'http://motherless.com/8B4BBC1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        if any(p in webpage for p in (\n                '<title>404 - MOTHERLESS.COM<',\n                \">The page you're looking for cannot be found.<\")):\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        if '>The content you are trying to view is for friends only.' in webpage:\n            raise ExtractorError('Video %s is for friends only' % video_id, expected=True)\n\n        title = self._html_search_regex(\n            r'id=\"view-upload-title\">\\s+([^<]+)<', webpage, 'title')\n        video_url = self._html_search_regex(\n            r'setup\\(\\{\\s+\"file\".+: \"([^\"]+)\",', webpage, 'video URL')\n        age_limit = self._rta_search(webpage)\n        view_count = str_to_int(self._html_search_regex(\n            r'<strong>Views</strong>\\s+([^<]+)<',\n            webpage, 'view count', fatal=False))\n        like_count = str_to_int(self._html_search_regex(\n            r'<strong>Favorited</strong>\\s+([^<]+)<',\n            webpage, 'like count', fatal=False))\n\n        upload_date = self._html_search_regex(\n            r'<strong>Uploaded</strong>\\s+([^<]+)<', webpage, 'upload date')\n        if 'Ago' in upload_date:\n            days = int(re.search(r'([0-9]+)', upload_date).group(1))\n            upload_date = (datetime.datetime.now() - datetime.timedelta(days=days)).strftime('%Y%m%d')\n        else:\n            upload_date = unified_strdate(upload_date)\n\n        comment_count = webpage.count('class=\"media-comment-contents\"')\n        uploader_id = self._html_search_regex(\n            r'\"thumb-member-username\">\\s+<a href=\"/m/([^\"]+)\"',\n            webpage, 'uploader_id')\n\n        categories = self._html_search_meta('keywords', webpage, default=None)\n        if categories:\n            categories = [cat.strip() for cat in categories.split(',')]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'upload_date': upload_date,\n            'uploader_id': uploader_id,\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'categories': categories,\n            'view_count': view_count,\n            'like_count': like_count,\n            'comment_count': comment_count,\n            'age_limit': age_limit,\n            'url': video_url,\n        }\n\n\nclass MotherlessGroupIE(InfoExtractor):\n    _VALID_URL = 'https?://(?:www\\.)?motherless\\.com/gv?/(?P<id>[a-z0-9_]+)'\n    _TESTS = [{\n        'url': 'http://motherless.com/g/movie_scenes',\n        'info_dict': {\n            'id': 'movie_scenes',\n            'title': 'Movie Scenes',\n            'description': 'Hot and sexy scenes from \"regular\" movies... '\n                           'Beautiful actresses fully nude... A looot of '\n                           'skin! :)Enjoy!',\n        },\n        'playlist_mincount': 662,\n    }, {\n        'url': 'http://motherless.com/gv/sex_must_be_funny',\n        'info_dict': {\n            'id': 'sex_must_be_funny',\n            'title': 'Sex must be funny',\n            'description': 'Sex can be funny. Wide smiles,laugh, games, fun of '\n                           'any kind!'\n        },\n        'playlist_mincount': 9,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if MotherlessIE.suitable(url)\n                else super(MotherlessGroupIE, cls).suitable(url))\n\n    def _extract_entries(self, webpage, base):\n        entries = []\n        for mobj in re.finditer(\n                r'href=\"(?P<href>/[^\"]+)\"[^>]*>(?:\\s*<img[^>]+alt=\"[^-]+-\\s(?P<title>[^\"]+)\")?',\n                webpage):\n            video_url = compat_urlparse.urljoin(base, mobj.group('href'))\n            if not MotherlessIE.suitable(video_url):\n                continue\n            video_id = MotherlessIE._match_id(video_url)\n            title = mobj.group('title')\n            entries.append(self.url_result(\n                video_url, ie=MotherlessIE.ie_key(), video_id=video_id,\n                video_title=title))\n        \n        if not entries:\n            entries = [\n                self.url_result(\n                    compat_urlparse.urljoin(base, '/' + video_id),\n                    ie=MotherlessIE.ie_key(), video_id=video_id)\n                for video_id in orderedSet(re.findall(\n                    r'data-codename=[\"\\']([A-Z0-9]+)', webpage))]\n        return entries\n\n    def _real_extract(self, url):\n        group_id = self._match_id(url)\n        page_url = compat_urlparse.urljoin(url, '/gv/%s' % group_id)\n        webpage = self._download_webpage(page_url, group_id)\n        title = self._search_regex(\n            r'<title>([\\w\\s]+\\w)\\s+-', webpage, 'title', fatal=False)\n        description = self._html_search_meta(\n            'description', webpage, fatal=False)\n        page_count = self._int(self._search_regex(\n            r'(\\d+)</(?:a|span)><(?:a|span)[^>]+>\\s*NEXT',\n            webpage, 'page_count'), 'page_count')\n        PAGE_SIZE = 80\n\n        def _get_page(idx):\n            webpage = self._download_webpage(\n                page_url, group_id, query={'page': idx + 1},\n                note='Downloading page %d/%d' % (idx + 1, page_count)\n            )\n            for entry in self._extract_entries(webpage, url):\n                yield entry\n\n        playlist = InAdvancePagedList(_get_page, page_count, PAGE_SIZE)\n\n        return {\n            '_type': 'playlist',\n            'id': group_id,\n            'title': title,\n            'description': description,\n            'entries': playlist\n        }\n", "comments": "# no keywords\n# Alternative fallback\n", "content": "from __future__ import unicode_literals\n\nimport datetime\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    ExtractorError,\n    InAdvancePagedList,\n    orderedSet,\n    str_to_int,\n    unified_strdate,\n)\n\n\nclass MotherlessIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?motherless\\.com/(?:g/[a-z0-9_]+/)?(?P<id>[A-Z0-9]+)'\n    _TESTS = [{\n        'url': 'http://motherless.com/AC3FFE1',\n        'md5': '310f62e325a9fafe64f68c0bccb6e75f',\n        'info_dict': {\n            'id': 'AC3FFE1',\n            'ext': 'mp4',\n            'title': 'Fucked in the ass while playing PS3',\n            'categories': ['Gaming', 'anal', 'reluctant', 'rough', 'Wife'],\n            'upload_date': '20100913',\n            'uploader_id': 'famouslyfuckedup',\n            'thumbnail': r're:http://.*\\.jpg',\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://motherless.com/532291B',\n        'md5': 'bc59a6b47d1f958e61fbd38a4d31b131',\n        'info_dict': {\n            'id': '532291B',\n            'ext': 'mp4',\n            'title': 'Amazing girl playing the omegle game, PERFECT!',\n            'categories': ['Amateur', 'webcam', 'omegle', 'pink', 'young', 'masturbate', 'teen',\n                           'game', 'hairy'],\n            'upload_date': '20140622',\n            'uploader_id': 'Sulivana7x',\n            'thumbnail': r're:http://.*\\.jpg',\n            'age_limit': 18,\n        },\n        'skip': '404',\n    }, {\n        'url': 'http://motherless.com/g/cosplay/633979F',\n        'md5': '0b2a43f447a49c3e649c93ad1fafa4a0',\n        'info_dict': {\n            'id': '633979F',\n            'ext': 'mp4',\n            'title': 'Turtlette',\n            'categories': ['superheroine heroine  superher'],\n            'upload_date': '20140827',\n            'uploader_id': 'shade0230',\n            'thumbnail': r're:http://.*\\.jpg',\n            'age_limit': 18,\n        }\n    }, {\n        # no keywords\n        'url': 'http://motherless.com/8B4BBC1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        if any(p in webpage for p in (\n                '<title>404 - MOTHERLESS.COM<',\n                \">The page you're looking for cannot be found.<\")):\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        if '>The content you are trying to view is for friends only.' in webpage:\n            raise ExtractorError('Video %s is for friends only' % video_id, expected=True)\n\n        title = self._html_search_regex(\n            r'id=\"view-upload-title\">\\s+([^<]+)<', webpage, 'title')\n        video_url = self._html_search_regex(\n            r'setup\\(\\{\\s+\"file\".+: \"([^\"]+)\",', webpage, 'video URL')\n        age_limit = self._rta_search(webpage)\n        view_count = str_to_int(self._html_search_regex(\n            r'<strong>Views</strong>\\s+([^<]+)<',\n            webpage, 'view count', fatal=False))\n        like_count = str_to_int(self._html_search_regex(\n            r'<strong>Favorited</strong>\\s+([^<]+)<',\n            webpage, 'like count', fatal=False))\n\n        upload_date = self._html_search_regex(\n            r'<strong>Uploaded</strong>\\s+([^<]+)<', webpage, 'upload date')\n        if 'Ago' in upload_date:\n            days = int(re.search(r'([0-9]+)', upload_date).group(1))\n            upload_date = (datetime.datetime.now() - datetime.timedelta(days=days)).strftime('%Y%m%d')\n        else:\n            upload_date = unified_strdate(upload_date)\n\n        comment_count = webpage.count('class=\"media-comment-contents\"')\n        uploader_id = self._html_search_regex(\n            r'\"thumb-member-username\">\\s+<a href=\"/m/([^\"]+)\"',\n            webpage, 'uploader_id')\n\n        categories = self._html_search_meta('keywords', webpage, default=None)\n        if categories:\n            categories = [cat.strip() for cat in categories.split(',')]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'upload_date': upload_date,\n            'uploader_id': uploader_id,\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'categories': categories,\n            'view_count': view_count,\n            'like_count': like_count,\n            'comment_count': comment_count,\n            'age_limit': age_limit,\n            'url': video_url,\n        }\n\n\nclass MotherlessGroupIE(InfoExtractor):\n    _VALID_URL = 'https?://(?:www\\.)?motherless\\.com/gv?/(?P<id>[a-z0-9_]+)'\n    _TESTS = [{\n        'url': 'http://motherless.com/g/movie_scenes',\n        'info_dict': {\n            'id': 'movie_scenes',\n            'title': 'Movie Scenes',\n            'description': 'Hot and sexy scenes from \"regular\" movies... '\n                           'Beautiful actresses fully nude... A looot of '\n                           'skin! :)Enjoy!',\n        },\n        'playlist_mincount': 662,\n    }, {\n        'url': 'http://motherless.com/gv/sex_must_be_funny',\n        'info_dict': {\n            'id': 'sex_must_be_funny',\n            'title': 'Sex must be funny',\n            'description': 'Sex can be funny. Wide smiles,laugh, games, fun of '\n                           'any kind!'\n        },\n        'playlist_mincount': 9,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return (False if MotherlessIE.suitable(url)\n                else super(MotherlessGroupIE, cls).suitable(url))\n\n    def _extract_entries(self, webpage, base):\n        entries = []\n        for mobj in re.finditer(\n                r'href=\"(?P<href>/[^\"]+)\"[^>]*>(?:\\s*<img[^>]+alt=\"[^-]+-\\s(?P<title>[^\"]+)\")?',\n                webpage):\n            video_url = compat_urlparse.urljoin(base, mobj.group('href'))\n            if not MotherlessIE.suitable(video_url):\n                continue\n            video_id = MotherlessIE._match_id(video_url)\n            title = mobj.group('title')\n            entries.append(self.url_result(\n                video_url, ie=MotherlessIE.ie_key(), video_id=video_id,\n                video_title=title))\n        # Alternative fallback\n        if not entries:\n            entries = [\n                self.url_result(\n                    compat_urlparse.urljoin(base, '/' + video_id),\n                    ie=MotherlessIE.ie_key(), video_id=video_id)\n                for video_id in orderedSet(re.findall(\n                    r'data-codename=[\"\\']([A-Z0-9]+)', webpage))]\n        return entries\n\n    def _real_extract(self, url):\n        group_id = self._match_id(url)\n        page_url = compat_urlparse.urljoin(url, '/gv/%s' % group_id)\n        webpage = self._download_webpage(page_url, group_id)\n        title = self._search_regex(\n            r'<title>([\\w\\s]+\\w)\\s+-', webpage, 'title', fatal=False)\n        description = self._html_search_meta(\n            'description', webpage, fatal=False)\n        page_count = self._int(self._search_regex(\n            r'(\\d+)</(?:a|span)><(?:a|span)[^>]+>\\s*NEXT',\n            webpage, 'page_count'), 'page_count')\n        PAGE_SIZE = 80\n\n        def _get_page(idx):\n            webpage = self._download_webpage(\n                page_url, group_id, query={'page': idx + 1},\n                note='Downloading page %d/%d' % (idx + 1, page_count)\n            )\n            for entry in self._extract_entries(webpage, url):\n                yield entry\n\n        playlist = InAdvancePagedList(_get_page, page_count, PAGE_SIZE)\n\n        return {\n            '_type': 'playlist',\n            'id': group_id,\n            'title': title,\n            'description': description,\n            'entries': playlist\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "motherless.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/motherless.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}