{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .theplatform import ThePlatformFeedIE\nfrom ..utils import (\n    int_or_none,\n    find_xpath_attr,\n    xpath_element,\n    xpath_text,\n    update_url_query,\n)\n\n\nclass CBSBaseIE(ThePlatformFeedIE):\n    def _parse_smil_subtitles(self, smil, namespace=None, subtitles_lang='en'):\n        closed_caption_e = find_xpath_attr(smil, self._xpath_ns('.//param', namespace), 'name', 'ClosedCaptionURL')\n        return {\n            'en': [{\n                'ext': 'ttml',\n                'url': closed_caption_e.attrib['value'],\n            }]\n        } if closed_caption_e is not None and closed_caption_e.attrib.get('value') else []\n\n\nclass CBSIE(CBSBaseIE):\n    _VALID_URL = r'(?:cbs:|https?://(?:www\\.)?(?:cbs\\.com/shows/[^/]+/video|colbertlateshow\\.com/(?:video|podcasts))/)(?P<id>[\\w-]+)'\n\n    _TESTS = [{\n        'url': 'http://www.cbs.com/shows/garth-brooks/video/_u7W953k6la293J7EPTd9oHkSPs6Xn6_/connect-chat-feat-garth-brooks/',\n        'info_dict': {\n            'id': '_u7W953k6la293J7EPTd9oHkSPs6Xn6_',\n            'ext': 'mp4',\n            'title': 'Connect Chat feat. Garth Brooks',\n            'description': 'Connect with country music singer Garth Brooks, as he chats with fans on Wednesday November 27, 2013. Be sure to tune in to Garth Brooks: Live from Las Vegas, Friday November 29, at 9/8c on CBS!',\n            'duration': 1495,\n            'timestamp': 1385585425,\n            'upload_date': '20131127',\n            'uploader': 'CBSI-NEW',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        '_skip': 'Blocked outside the US',\n    }, {\n        'url': 'http://colbertlateshow.com/video/8GmB0oY0McANFvp2aEffk9jZZZ2YyXxy/the-colbeard/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.colbertlateshow.com/podcasts/dYSwjqPs_X1tvbV_P2FcPWRa_qT6akTC/in-the-bad-room-with-stephen/',\n        'only_matching': True,\n    }]\n\n    def _extract_video_info(self, content_id, site='cbs', mpx_acc=2198311517):\n        items_data = self._download_xml(\n            'http://can.cbs.com/thunder/player/videoPlayerService.php',\n            content_id, query={'partner': site, 'contentId': content_id})\n        video_data = xpath_element(items_data, './/item')\n        title = xpath_text(video_data, 'videoTitle', 'title', True)\n        tp_path = 'dJ5BDC/media/guid/%d/%s' % (mpx_acc, content_id)\n        tp_release_url = 'http://link.theplatform.com/s/' + tp_path\n\n        asset_types = []\n        subtitles = {}\n        formats = []\n        for item in items_data.findall('.//item'):\n            asset_type = xpath_text(item, 'assetType')\n            if not asset_type or asset_type in asset_types:\n                continue\n            asset_types.append(asset_type)\n            query = {\n                'mbr': 'true',\n                'assetTypes': asset_type,\n            }\n            if asset_type.startswith('HLS') or asset_type in ('OnceURL', 'StreamPack'):\n                query['formats'] = 'MPEG4,M3U'\n            elif asset_type in ('RTMP', 'WIFI', '3G'):\n                query['formats'] = 'MPEG4,FLV'\n            tp_formats, tp_subtitles = self._extract_theplatform_smil(\n                update_url_query(tp_release_url, query), content_id,\n                'Downloading %s SMIL data' % asset_type)\n            formats.extend(tp_formats)\n            subtitles = self._merge_subtitles(subtitles, tp_subtitles)\n        self._sort_formats(formats)\n\n        info = self._extract_theplatform_metadata(tp_path, content_id)\n        info.update({\n            'id': content_id,\n            'title': title,\n            'series': xpath_text(video_data, 'seriesTitle'),\n            'season_number': int_or_none(xpath_text(video_data, 'seasonNumber')),\n            'episode_number': int_or_none(xpath_text(video_data, 'episodeNumber')),\n            'duration': int_or_none(xpath_text(video_data, 'videoLength'), 1000),\n            'thumbnail': xpath_text(video_data, 'previewImageURL'),\n            'formats': formats,\n            'subtitles': subtitles,\n        })\n        return info\n\n    def _real_extract(self, url):\n        content_id = self._match_id(url)\n        return self._extract_video_info(content_id)\n", "comments": "# m3u8 download\n", "content": "from __future__ import unicode_literals\n\nfrom .theplatform import ThePlatformFeedIE\nfrom ..utils import (\n    int_or_none,\n    find_xpath_attr,\n    xpath_element,\n    xpath_text,\n    update_url_query,\n)\n\n\nclass CBSBaseIE(ThePlatformFeedIE):\n    def _parse_smil_subtitles(self, smil, namespace=None, subtitles_lang='en'):\n        closed_caption_e = find_xpath_attr(smil, self._xpath_ns('.//param', namespace), 'name', 'ClosedCaptionURL')\n        return {\n            'en': [{\n                'ext': 'ttml',\n                'url': closed_caption_e.attrib['value'],\n            }]\n        } if closed_caption_e is not None and closed_caption_e.attrib.get('value') else []\n\n\nclass CBSIE(CBSBaseIE):\n    _VALID_URL = r'(?:cbs:|https?://(?:www\\.)?(?:cbs\\.com/shows/[^/]+/video|colbertlateshow\\.com/(?:video|podcasts))/)(?P<id>[\\w-]+)'\n\n    _TESTS = [{\n        'url': 'http://www.cbs.com/shows/garth-brooks/video/_u7W953k6la293J7EPTd9oHkSPs6Xn6_/connect-chat-feat-garth-brooks/',\n        'info_dict': {\n            'id': '_u7W953k6la293J7EPTd9oHkSPs6Xn6_',\n            'ext': 'mp4',\n            'title': 'Connect Chat feat. Garth Brooks',\n            'description': 'Connect with country music singer Garth Brooks, as he chats with fans on Wednesday November 27, 2013. Be sure to tune in to Garth Brooks: Live from Las Vegas, Friday November 29, at 9/8c on CBS!',\n            'duration': 1495,\n            'timestamp': 1385585425,\n            'upload_date': '20131127',\n            'uploader': 'CBSI-NEW',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        '_skip': 'Blocked outside the US',\n    }, {\n        'url': 'http://colbertlateshow.com/video/8GmB0oY0McANFvp2aEffk9jZZZ2YyXxy/the-colbeard/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.colbertlateshow.com/podcasts/dYSwjqPs_X1tvbV_P2FcPWRa_qT6akTC/in-the-bad-room-with-stephen/',\n        'only_matching': True,\n    }]\n\n    def _extract_video_info(self, content_id, site='cbs', mpx_acc=2198311517):\n        items_data = self._download_xml(\n            'http://can.cbs.com/thunder/player/videoPlayerService.php',\n            content_id, query={'partner': site, 'contentId': content_id})\n        video_data = xpath_element(items_data, './/item')\n        title = xpath_text(video_data, 'videoTitle', 'title', True)\n        tp_path = 'dJ5BDC/media/guid/%d/%s' % (mpx_acc, content_id)\n        tp_release_url = 'http://link.theplatform.com/s/' + tp_path\n\n        asset_types = []\n        subtitles = {}\n        formats = []\n        for item in items_data.findall('.//item'):\n            asset_type = xpath_text(item, 'assetType')\n            if not asset_type or asset_type in asset_types:\n                continue\n            asset_types.append(asset_type)\n            query = {\n                'mbr': 'true',\n                'assetTypes': asset_type,\n            }\n            if asset_type.startswith('HLS') or asset_type in ('OnceURL', 'StreamPack'):\n                query['formats'] = 'MPEG4,M3U'\n            elif asset_type in ('RTMP', 'WIFI', '3G'):\n                query['formats'] = 'MPEG4,FLV'\n            tp_formats, tp_subtitles = self._extract_theplatform_smil(\n                update_url_query(tp_release_url, query), content_id,\n                'Downloading %s SMIL data' % asset_type)\n            formats.extend(tp_formats)\n            subtitles = self._merge_subtitles(subtitles, tp_subtitles)\n        self._sort_formats(formats)\n\n        info = self._extract_theplatform_metadata(tp_path, content_id)\n        info.update({\n            'id': content_id,\n            'title': title,\n            'series': xpath_text(video_data, 'seriesTitle'),\n            'season_number': int_or_none(xpath_text(video_data, 'seasonNumber')),\n            'episode_number': int_or_none(xpath_text(video_data, 'episodeNumber')),\n            'duration': int_or_none(xpath_text(video_data, 'videoLength'), 1000),\n            'thumbnail': xpath_text(video_data, 'previewImageURL'),\n            'formats': formats,\n            'subtitles': subtitles,\n        })\n        return info\n\n    def _real_extract(self, url):\n        content_id = self._match_id(url)\n        return self._extract_video_info(content_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cbs.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cbs.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}