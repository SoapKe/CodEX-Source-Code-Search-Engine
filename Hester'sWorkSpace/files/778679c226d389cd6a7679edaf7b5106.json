{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright 2017 F5 Networks Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch, Mock\nfrom ansible.module_utils.f5_utils import AnsibleF5Client\nfrom units.modules.utils import set_module_args\n\ntry:\n    from library.bigip_configsync_actions import Parameters\n    from library.bigip_configsync_actions import ModuleManager\n    from library.bigip_configsync_actions import ArgumentSpec\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_configsync_actions import Parameters\n        from ansible.modules.network.f5.bigip_configsync_actions import ModuleManager\n        from ansible.modules.network.f5.bigip_configsync_actions import ArgumentSpec\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            sync_device_to_group=True,\n            sync_group_to_device=True,\n            overwrite_config=True,\n            device_group=\"foo\"\n        )\n        p = Parameters(args)\n        assert p.sync_device_to_group is True\n        assert p.sync_group_to_device is True\n        assert p.overwrite_config is True\n        assert p.device_group == 'foo'\n\n    def test_module_parameters_yes_no(self):\n        args = dict(\n            sync_device_to_group='yes',\n            sync_group_to_device='no',\n            overwrite_config='yes',\n            device_group=\"foo\"\n        )\n        p = Parameters(args)\n        assert p.sync_device_to_group is True\n        assert p.sync_group_to_device is False\n        assert p.overwrite_config is True\n        assert p.device_group == 'foo'\n\n\n@patch('ansible.module_utils.f5_utils.AnsibleF5Client._get_mgmt_root',\n       return_value=True)\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_update_agent_status_traps(self, *args):\n        set_module_args(dict(\n            sync_device_to_group='yes',\n            device_group=\"foo\",\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        client = AnsibleF5Client(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n            f5_product_name=self.spec.f5_product_name\n        )\n        mm = ModuleManager(client)\n\n         Override methods to force specific logic in the module to happen\n        mm._device_group_exists = Mock(return_value=True)\n        mm._sync_to_group_required = Mock(return_value=False)\n        mm.execute_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=None)\n\n        mm._get_status_from_resource = Mock()\n        mm._get_status_from_resource.side_effect = [\n            'Changes Pending', 'Awaiting Initial Sync', 'In Sync'\n        ]\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n", "comments": "      coding  utf 8           copyright 2017 f5 networks inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2017 F5 Networks Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import patch, Mock\nfrom ansible.module_utils.f5_utils import AnsibleF5Client\nfrom units.modules.utils import set_module_args\n\ntry:\n    from library.bigip_configsync_actions import Parameters\n    from library.bigip_configsync_actions import ModuleManager\n    from library.bigip_configsync_actions import ArgumentSpec\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_configsync_actions import Parameters\n        from ansible.modules.network.f5.bigip_configsync_actions import ModuleManager\n        from ansible.modules.network.f5.bigip_configsync_actions import ArgumentSpec\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            sync_device_to_group=True,\n            sync_group_to_device=True,\n            overwrite_config=True,\n            device_group=\"foo\"\n        )\n        p = Parameters(args)\n        assert p.sync_device_to_group is True\n        assert p.sync_group_to_device is True\n        assert p.overwrite_config is True\n        assert p.device_group == 'foo'\n\n    def test_module_parameters_yes_no(self):\n        args = dict(\n            sync_device_to_group='yes',\n            sync_group_to_device='no',\n            overwrite_config='yes',\n            device_group=\"foo\"\n        )\n        p = Parameters(args)\n        assert p.sync_device_to_group is True\n        assert p.sync_group_to_device is False\n        assert p.overwrite_config is True\n        assert p.device_group == 'foo'\n\n\n@patch('ansible.module_utils.f5_utils.AnsibleF5Client._get_mgmt_root',\n       return_value=True)\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_update_agent_status_traps(self, *args):\n        set_module_args(dict(\n            sync_device_to_group='yes',\n            device_group=\"foo\",\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        client = AnsibleF5Client(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode,\n            f5_product_name=self.spec.f5_product_name\n        )\n        mm = ModuleManager(client)\n\n        # Override methods to force specific logic in the module to happen\n        mm._device_group_exists = Mock(return_value=True)\n        mm._sync_to_group_required = Mock(return_value=False)\n        mm.execute_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=None)\n\n        mm._get_status_from_resource = Mock()\n        mm._get_status_from_resource.side_effect = [\n            'Changes Pending', 'Awaiting Initial Sync', 'In Sync'\n        ]\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_configsync_actions.py", "id": "778679c226d389cd6a7679edaf7b5106", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_configsync_actions.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}