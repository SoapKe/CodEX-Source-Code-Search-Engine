{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .brightcove import (\n    BrightcoveLegacyIE,\n    BrightcoveNewIE,\n)\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n)\n\n\nclass NownessBaseIE(InfoExtractor):\n    def _extract_url_result(self, post):\n        if post['type'] == 'video':\n            for media in post['media']:\n                if media['type'] == 'video':\n                    video_id = media['content']\n                    source = media['source']\n                    if source == 'brightcove':\n                        player_code = self._download_webpage(\n                            'http://www.nowness.com/iframe?id=%s' % video_id, video_id,\n                            note='Downloading player JavaScript',\n                            errnote='Unable to download player JavaScript')\n                        bc_url = BrightcoveLegacyIE._extract_brightcove_url(player_code)\n                        if bc_url:\n                            return self.url_result(bc_url, BrightcoveLegacyIE.ie_key())\n                        bc_url = BrightcoveNewIE._extract_url(self, player_code)\n                        if bc_url:\n                            return self.url_result(bc_url, BrightcoveNewIE.ie_key())\n                        raise ExtractorError('Could not find player definition')\n                    elif source == 'vimeo':\n                        return self.url_result('http://vimeo.com/%s' % video_id, 'Vimeo')\n                    elif source == 'youtube':\n                        return self.url_result(video_id, 'Youtube')\n                    elif source == 'cinematique':\n                        \n                        \n                        pass\n\n    def _api_request(self, url, request_path):\n        display_id = self._match_id(url)\n        request = sanitized_Request(\n            'http://api.nowness.com/api/' + request_path % display_id,\n            headers={\n                'X-Nowness-Language': 'zh-cn' if 'cn.nowness.com' in url else 'en-us',\n            })\n        return display_id, self._download_json(request, display_id)\n\n\nclass NownessIE(NownessBaseIE):\n    IE_NAME = 'nowness'\n    _VALID_URL = r'https?://(?:(?:www|cn)\\.)?nowness\\.com/(?:story|(?:series|category)/[^/]+)/(?P<id>[^/]+?)(?:$|[?\n    _TESTS = [{\n        'url': 'https://www.nowness.com/story/candor-the-art-of-gesticulation',\n        'md5': '068bc0202558c2e391924cb8cc470676',\n        'info_dict': {\n            'id': '2520295746001',\n            'ext': 'mp4',\n            'title': 'Candor: The Art of Gesticulation',\n            'description': 'Candor: The Art of Gesticulation',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1446745676,\n            'upload_date': '20151105',\n            'uploader_id': '2385340575001',\n        },\n        'add_ie': ['BrightcoveNew'],\n    }, {\n        'url': 'https://cn.nowness.com/story/kasper-bjorke-ft-jaakko-eino-kalevi-tnr',\n        'md5': 'e79cf125e387216f86b2e0a5b5c63aa3',\n        'info_dict': {\n            'id': '3716354522001',\n            'ext': 'mp4',\n            'title': 'Kasper Bj\u00f8rke ft. Jaakko Eino Kalevi: TNR',\n            'description': 'Kasper Bj\u00f8rke ft. Jaakko Eino Kalevi: TNR',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1407315371,\n            'upload_date': '20140806',\n            'uploader_id': '2385340575001',\n        },\n        'add_ie': ['BrightcoveNew'],\n    }, {\n        \n        'url': 'https://www.nowness.com/series/nowness-picks/jean-luc-godard-supercut',\n        'md5': '9a5a6a8edf806407e411296ab6bc2a49',\n        'info_dict': {\n            'id': '130020913',\n            'ext': 'mp4',\n            'title': 'Bleu, Blanc, Rouge - A Godard Supercut',\n            'description': 'md5:f0ea5f1857dffca02dbd37875d742cec',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'upload_date': '20150607',\n            'uploader': 'Cinema Sem Lei',\n            'uploader_id': 'cinemasemlei',\n        },\n        'add_ie': ['Vimeo'],\n    }]\n\n    def _real_extract(self, url):\n        _, post = self._api_request(url, 'post/getBySlug/%s')\n        return self._extract_url_result(post)\n\n\nclass NownessPlaylistIE(NownessBaseIE):\n    IE_NAME = 'nowness:playlist'\n    _VALID_URL = r'https?://(?:(?:www|cn)\\.)?nowness\\.com/playlist/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://www.nowness.com/playlist/3286/i-guess-thats-why-they-call-it-the-blues',\n        'info_dict': {\n            'id': '3286',\n        },\n        'playlist_mincount': 8,\n    }\n\n    def _real_extract(self, url):\n        playlist_id, playlist = self._api_request(url, 'post?PlaylistId=%s')\n        entries = [self._extract_url_result(item) for item in playlist['items']]\n        return self.playlist_result(entries, playlist_id)\n\n\nclass NownessSeriesIE(NownessBaseIE):\n    IE_NAME = 'nowness:series'\n    _VALID_URL = r'https?://(?:(?:www|cn)\\.)?nowness\\.com/series/(?P<id>[^/]+?)(?:$|[?\n    _TEST = {\n        'url': 'https://www.nowness.com/series/60-seconds',\n        'info_dict': {\n            'id': '60',\n            'title': '60 Seconds',\n            'description': 'One-minute wisdom in a new NOWNESS series',\n        },\n        'playlist_mincount': 4,\n    }\n\n    def _real_extract(self, url):\n        display_id, series = self._api_request(url, 'series/getBySlug/%s')\n        entries = [self._extract_url_result(post) for post in series['posts']]\n        series_title = None\n        series_description = None\n        translations = series.get('translations', [])\n        if translations:\n            series_title = translations[0].get('title') or translations[0]['seoTitle']\n            series_description = translations[0].get('seoDescription')\n        return self.playlist_result(\n            entries, compat_str(series['id']), series_title, series_description)\n", "comments": "# coding: utf-8\n# youtube-dl currently doesn't support cinematique\n# return self.url_result('http://cinematique.com/embed/%s' % video_id, 'Cinematique')\n#])'\n# vimeo\n#])'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .brightcove import (\n    BrightcoveLegacyIE,\n    BrightcoveNewIE,\n)\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n)\n\n\nclass NownessBaseIE(InfoExtractor):\n    def _extract_url_result(self, post):\n        if post['type'] == 'video':\n            for media in post['media']:\n                if media['type'] == 'video':\n                    video_id = media['content']\n                    source = media['source']\n                    if source == 'brightcove':\n                        player_code = self._download_webpage(\n                            'http://www.nowness.com/iframe?id=%s' % video_id, video_id,\n                            note='Downloading player JavaScript',\n                            errnote='Unable to download player JavaScript')\n                        bc_url = BrightcoveLegacyIE._extract_brightcove_url(player_code)\n                        if bc_url:\n                            return self.url_result(bc_url, BrightcoveLegacyIE.ie_key())\n                        bc_url = BrightcoveNewIE._extract_url(self, player_code)\n                        if bc_url:\n                            return self.url_result(bc_url, BrightcoveNewIE.ie_key())\n                        raise ExtractorError('Could not find player definition')\n                    elif source == 'vimeo':\n                        return self.url_result('http://vimeo.com/%s' % video_id, 'Vimeo')\n                    elif source == 'youtube':\n                        return self.url_result(video_id, 'Youtube')\n                    elif source == 'cinematique':\n                        # youtube-dl currently doesn't support cinematique\n                        # return self.url_result('http://cinematique.com/embed/%s' % video_id, 'Cinematique')\n                        pass\n\n    def _api_request(self, url, request_path):\n        display_id = self._match_id(url)\n        request = sanitized_Request(\n            'http://api.nowness.com/api/' + request_path % display_id,\n            headers={\n                'X-Nowness-Language': 'zh-cn' if 'cn.nowness.com' in url else 'en-us',\n            })\n        return display_id, self._download_json(request, display_id)\n\n\nclass NownessIE(NownessBaseIE):\n    IE_NAME = 'nowness'\n    _VALID_URL = r'https?://(?:(?:www|cn)\\.)?nowness\\.com/(?:story|(?:series|category)/[^/]+)/(?P<id>[^/]+?)(?:$|[?#])'\n    _TESTS = [{\n        'url': 'https://www.nowness.com/story/candor-the-art-of-gesticulation',\n        'md5': '068bc0202558c2e391924cb8cc470676',\n        'info_dict': {\n            'id': '2520295746001',\n            'ext': 'mp4',\n            'title': 'Candor: The Art of Gesticulation',\n            'description': 'Candor: The Art of Gesticulation',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1446745676,\n            'upload_date': '20151105',\n            'uploader_id': '2385340575001',\n        },\n        'add_ie': ['BrightcoveNew'],\n    }, {\n        'url': 'https://cn.nowness.com/story/kasper-bjorke-ft-jaakko-eino-kalevi-tnr',\n        'md5': 'e79cf125e387216f86b2e0a5b5c63aa3',\n        'info_dict': {\n            'id': '3716354522001',\n            'ext': 'mp4',\n            'title': 'Kasper Bj\u00f8rke ft. Jaakko Eino Kalevi: TNR',\n            'description': 'Kasper Bj\u00f8rke ft. Jaakko Eino Kalevi: TNR',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1407315371,\n            'upload_date': '20140806',\n            'uploader_id': '2385340575001',\n        },\n        'add_ie': ['BrightcoveNew'],\n    }, {\n        # vimeo\n        'url': 'https://www.nowness.com/series/nowness-picks/jean-luc-godard-supercut',\n        'md5': '9a5a6a8edf806407e411296ab6bc2a49',\n        'info_dict': {\n            'id': '130020913',\n            'ext': 'mp4',\n            'title': 'Bleu, Blanc, Rouge - A Godard Supercut',\n            'description': 'md5:f0ea5f1857dffca02dbd37875d742cec',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'upload_date': '20150607',\n            'uploader': 'Cinema Sem Lei',\n            'uploader_id': 'cinemasemlei',\n        },\n        'add_ie': ['Vimeo'],\n    }]\n\n    def _real_extract(self, url):\n        _, post = self._api_request(url, 'post/getBySlug/%s')\n        return self._extract_url_result(post)\n\n\nclass NownessPlaylistIE(NownessBaseIE):\n    IE_NAME = 'nowness:playlist'\n    _VALID_URL = r'https?://(?:(?:www|cn)\\.)?nowness\\.com/playlist/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://www.nowness.com/playlist/3286/i-guess-thats-why-they-call-it-the-blues',\n        'info_dict': {\n            'id': '3286',\n        },\n        'playlist_mincount': 8,\n    }\n\n    def _real_extract(self, url):\n        playlist_id, playlist = self._api_request(url, 'post?PlaylistId=%s')\n        entries = [self._extract_url_result(item) for item in playlist['items']]\n        return self.playlist_result(entries, playlist_id)\n\n\nclass NownessSeriesIE(NownessBaseIE):\n    IE_NAME = 'nowness:series'\n    _VALID_URL = r'https?://(?:(?:www|cn)\\.)?nowness\\.com/series/(?P<id>[^/]+?)(?:$|[?#])'\n    _TEST = {\n        'url': 'https://www.nowness.com/series/60-seconds',\n        'info_dict': {\n            'id': '60',\n            'title': '60 Seconds',\n            'description': 'One-minute wisdom in a new NOWNESS series',\n        },\n        'playlist_mincount': 4,\n    }\n\n    def _real_extract(self, url):\n        display_id, series = self._api_request(url, 'series/getBySlug/%s')\n        entries = [self._extract_url_result(post) for post in series['posts']]\n        series_title = None\n        series_description = None\n        translations = series.get('translations', [])\n        if translations:\n            series_title = translations[0].get('title') or translations[0]['seoTitle']\n            series_description = translations[0].get('seoDescription')\n        return self.playlist_result(\n            entries, compat_str(series['id']), series_title, series_description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nowness.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nowness.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}