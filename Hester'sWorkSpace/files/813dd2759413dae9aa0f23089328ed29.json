{"author": "django", "code": "import uuid\n\nfrom django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\nfrom django.db.models.query import ModelIterable, QuerySet\nfrom django.utils.functional import cached_property\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    first_book = models.ForeignKey('Book', models.CASCADE, related_name='first_time_authors')\n    favorite_authors = models.ManyToManyField(\n        'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['id']\n\n\nclass AuthorWithAge(Author):\n    author = models.OneToOneField(Author, models.CASCADE, parent_link=True)\n    age = models.IntegerField()\n\n\nclass FavoriteAuthors(models.Model):\n    author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='i_like')\n    likes_author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='likes_me')\n\n    class Meta:\n        ordering = ['id']\n\n\nclass AuthorAddress(models.Model):\n    author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='addresses')\n    address = models.TextField()\n\n    class Meta:\n        ordering = ['id']\n\n    def __str__(self):\n        return self.address\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    authors = models.ManyToManyField(Author, related_name='books')\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        ordering = ['id']\n\n\nclass BookWithYear(Book):\n    book = models.OneToOneField(Book, models.CASCADE, parent_link=True)\n    published_year = models.IntegerField()\n    aged_authors = models.ManyToManyField(\n        AuthorWithAge, related_name='books_with_year')\n\n\nclass Bio(models.Model):\n    author = models.OneToOneField(\n        Author,\n        models.CASCADE,\n        primary_key=True,\n        to_field='name',\n    )\n    books = models.ManyToManyField(Book, blank=True)\n\n\nclass Reader(models.Model):\n    name = models.CharField(max_length=50)\n    books_read = models.ManyToManyField(Book, related_name='read_by')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['id']\n\n\nclass BookReview(models.Model):\n    \n    book = models.ForeignKey(BookWithYear, models.CASCADE, null=True)\n    notes = models.TextField(null=True, blank=True)\n\n\n\n\nclass Qualification(models.Model):\n    name = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ['id']\n\n\nclass ModelIterableSubclass(ModelIterable):\n    pass\n\n\nclass TeacherQuerySet(QuerySet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._iterable_class = ModelIterableSubclass\n\n\nclass TeacherManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().prefetch_related('qualifications')\n\n\nclass Teacher(models.Model):\n    name = models.CharField(max_length=50)\n    qualifications = models.ManyToManyField(Qualification)\n\n    objects = TeacherManager()\n    objects_custom = TeacherQuerySet.as_manager()\n\n    def __str__(self):\n        return \"%s (%s)\" % (self.name, \", \".join(q.name for q in self.qualifications.all()))\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Department(models.Model):\n    name = models.CharField(max_length=50)\n    teachers = models.ManyToManyField(Teacher)\n\n    class Meta:\n        ordering = ['id']\n\n\n\n\nclass TaggedItem(models.Model):\n    tag = models.SlugField()\n    content_type = models.ForeignKey(\n        ContentType,\n        models.CASCADE,\n        related_name=\"taggeditem_set2\",\n    )\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n    created_by_ct = models.ForeignKey(\n        ContentType,\n        models.SET_NULL,\n        null=True,\n        related_name='taggeditem_set3',\n    )\n    created_by_fkey = models.PositiveIntegerField(null=True)\n    created_by = GenericForeignKey('created_by_ct', 'created_by_fkey',)\n    favorite_ct = models.ForeignKey(\n        ContentType,\n        models.SET_NULL,\n        null=True,\n        related_name='taggeditem_set4',\n    )\n    favorite_fkey = models.CharField(max_length=64, null=True)\n    favorite = GenericForeignKey('favorite_ct', 'favorite_fkey')\n\n    def __str__(self):\n        return self.tag\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Bookmark(models.Model):\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem, related_query_name='bookmarks')\n    favorite_tags = GenericRelation(TaggedItem,\n                                    content_type_field='favorite_ct',\n                                    object_id_field='favorite_fkey',\n                                    related_query_name='favorite_bookmarks')\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Comment(models.Model):\n    comment = models.TextField()\n\n    \n    content_type = models.ForeignKey(ContentType, models.CASCADE)\n    object_pk = models.TextField()\n    content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n\n    class Meta:\n        ordering = ['id']\n\n\n\n\nclass House(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=255)\n    owner = models.ForeignKey('Person', models.SET_NULL, null=True)\n    main_room = models.OneToOneField('Room', models.SET_NULL, related_name='main_room_of', null=True)\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Room(models.Model):\n    name = models.CharField(max_length=50)\n    house = models.ForeignKey(House, models.CASCADE, related_name='rooms')\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=50)\n    houses = models.ManyToManyField(House, related_name='occupants')\n\n    @property\n    def primary_house(self):\n        \n        return sorted(self.houses.all(), key=lambda house: -house.rooms.count())[0]\n\n    @property\n    def all_houses(self):\n        return list(self.houses.all())\n\n    @cached_property\n    def cached_all_houses(self):\n        return self.all_houses\n\n    class Meta:\n        ordering = ['id']\n\n\n\n\nclass Employee(models.Model):\n    name = models.CharField(max_length=50)\n    boss = models.ForeignKey('self', models.SET_NULL, null=True, related_name='serfs')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['id']\n\n\n\n\nclass LessonEntry(models.Model):\n    name1 = models.CharField(max_length=200)\n    name2 = models.CharField(max_length=200)\n\n    def __str__(self):\n        return \"%s %s\" % (self.name1, self.name2)\n\n\nclass WordEntry(models.Model):\n    lesson_entry = models.ForeignKey(LessonEntry, models.CASCADE)\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return \"%s (%s)\" % (self.name, self.id)\n\n\n# Ticket #21410: Regression when related_name=\"+\"\n\nclass Author2(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    first_book = models.ForeignKey('Book', models.CASCADE, related_name='first_time_authors+')\n    favorite_books = models.ManyToManyField('Book', related_name='+')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['id']\n\n\n\n\nclass Pet(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=20)\n    people = models.ManyToManyField(Person, related_name='pets')\n\n\nclass Flea(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    current_room = models.ForeignKey(Room, models.SET_NULL, related_name='fleas', null=True)\n    pets_visited = models.ManyToManyField(Pet, related_name='fleas_hosted')\n    people_visited = models.ManyToManyField(Person, related_name='fleas_hosted')\n", "comments": "  intentionally related name     models default manager tests    genericrelation genericforeignkey tests    content object field    models lookup ordering tests    assume business logic forces every person least one house     models nullable fk tests    ticket  19607    ticket  21410  regression related name        models many many uuid pk test  ", "content": "import uuid\n\nfrom django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\nfrom django.db.models.query import ModelIterable, QuerySet\nfrom django.utils.functional import cached_property\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    first_book = models.ForeignKey('Book', models.CASCADE, related_name='first_time_authors')\n    favorite_authors = models.ManyToManyField(\n        'self', through='FavoriteAuthors', symmetrical=False, related_name='favors_me')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['id']\n\n\nclass AuthorWithAge(Author):\n    author = models.OneToOneField(Author, models.CASCADE, parent_link=True)\n    age = models.IntegerField()\n\n\nclass FavoriteAuthors(models.Model):\n    author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='i_like')\n    likes_author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='likes_me')\n\n    class Meta:\n        ordering = ['id']\n\n\nclass AuthorAddress(models.Model):\n    author = models.ForeignKey(Author, models.CASCADE, to_field='name', related_name='addresses')\n    address = models.TextField()\n\n    class Meta:\n        ordering = ['id']\n\n    def __str__(self):\n        return self.address\n\n\nclass Book(models.Model):\n    title = models.CharField(max_length=255)\n    authors = models.ManyToManyField(Author, related_name='books')\n\n    def __str__(self):\n        return self.title\n\n    class Meta:\n        ordering = ['id']\n\n\nclass BookWithYear(Book):\n    book = models.OneToOneField(Book, models.CASCADE, parent_link=True)\n    published_year = models.IntegerField()\n    aged_authors = models.ManyToManyField(\n        AuthorWithAge, related_name='books_with_year')\n\n\nclass Bio(models.Model):\n    author = models.OneToOneField(\n        Author,\n        models.CASCADE,\n        primary_key=True,\n        to_field='name',\n    )\n    books = models.ManyToManyField(Book, blank=True)\n\n\nclass Reader(models.Model):\n    name = models.CharField(max_length=50)\n    books_read = models.ManyToManyField(Book, related_name='read_by')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['id']\n\n\nclass BookReview(models.Model):\n    # Intentionally does not have a related name.\n    book = models.ForeignKey(BookWithYear, models.CASCADE, null=True)\n    notes = models.TextField(null=True, blank=True)\n\n\n# Models for default manager tests\n\nclass Qualification(models.Model):\n    name = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ['id']\n\n\nclass ModelIterableSubclass(ModelIterable):\n    pass\n\n\nclass TeacherQuerySet(QuerySet):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._iterable_class = ModelIterableSubclass\n\n\nclass TeacherManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().prefetch_related('qualifications')\n\n\nclass Teacher(models.Model):\n    name = models.CharField(max_length=50)\n    qualifications = models.ManyToManyField(Qualification)\n\n    objects = TeacherManager()\n    objects_custom = TeacherQuerySet.as_manager()\n\n    def __str__(self):\n        return \"%s (%s)\" % (self.name, \", \".join(q.name for q in self.qualifications.all()))\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Department(models.Model):\n    name = models.CharField(max_length=50)\n    teachers = models.ManyToManyField(Teacher)\n\n    class Meta:\n        ordering = ['id']\n\n\n# GenericRelation/GenericForeignKey tests\n\nclass TaggedItem(models.Model):\n    tag = models.SlugField()\n    content_type = models.ForeignKey(\n        ContentType,\n        models.CASCADE,\n        related_name=\"taggeditem_set2\",\n    )\n    object_id = models.PositiveIntegerField()\n    content_object = GenericForeignKey('content_type', 'object_id')\n    created_by_ct = models.ForeignKey(\n        ContentType,\n        models.SET_NULL,\n        null=True,\n        related_name='taggeditem_set3',\n    )\n    created_by_fkey = models.PositiveIntegerField(null=True)\n    created_by = GenericForeignKey('created_by_ct', 'created_by_fkey',)\n    favorite_ct = models.ForeignKey(\n        ContentType,\n        models.SET_NULL,\n        null=True,\n        related_name='taggeditem_set4',\n    )\n    favorite_fkey = models.CharField(max_length=64, null=True)\n    favorite = GenericForeignKey('favorite_ct', 'favorite_fkey')\n\n    def __str__(self):\n        return self.tag\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Bookmark(models.Model):\n    url = models.URLField()\n    tags = GenericRelation(TaggedItem, related_query_name='bookmarks')\n    favorite_tags = GenericRelation(TaggedItem,\n                                    content_type_field='favorite_ct',\n                                    object_id_field='favorite_fkey',\n                                    related_query_name='favorite_bookmarks')\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Comment(models.Model):\n    comment = models.TextField()\n\n    # Content-object field\n    content_type = models.ForeignKey(ContentType, models.CASCADE)\n    object_pk = models.TextField()\n    content_object = GenericForeignKey(ct_field=\"content_type\", fk_field=\"object_pk\")\n\n    class Meta:\n        ordering = ['id']\n\n\n# Models for lookup ordering tests\n\nclass House(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=255)\n    owner = models.ForeignKey('Person', models.SET_NULL, null=True)\n    main_room = models.OneToOneField('Room', models.SET_NULL, related_name='main_room_of', null=True)\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Room(models.Model):\n    name = models.CharField(max_length=50)\n    house = models.ForeignKey(House, models.CASCADE, related_name='rooms')\n\n    class Meta:\n        ordering = ['id']\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=50)\n    houses = models.ManyToManyField(House, related_name='occupants')\n\n    @property\n    def primary_house(self):\n        # Assume business logic forces every person to have at least one house.\n        return sorted(self.houses.all(), key=lambda house: -house.rooms.count())[0]\n\n    @property\n    def all_houses(self):\n        return list(self.houses.all())\n\n    @cached_property\n    def cached_all_houses(self):\n        return self.all_houses\n\n    class Meta:\n        ordering = ['id']\n\n\n# Models for nullable FK tests\n\nclass Employee(models.Model):\n    name = models.CharField(max_length=50)\n    boss = models.ForeignKey('self', models.SET_NULL, null=True, related_name='serfs')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['id']\n\n\n# Ticket #19607\n\nclass LessonEntry(models.Model):\n    name1 = models.CharField(max_length=200)\n    name2 = models.CharField(max_length=200)\n\n    def __str__(self):\n        return \"%s %s\" % (self.name1, self.name2)\n\n\nclass WordEntry(models.Model):\n    lesson_entry = models.ForeignKey(LessonEntry, models.CASCADE)\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return \"%s (%s)\" % (self.name, self.id)\n\n\n# Ticket #21410: Regression when related_name=\"+\"\n\nclass Author2(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    first_book = models.ForeignKey('Book', models.CASCADE, related_name='first_time_authors+')\n    favorite_books = models.ManyToManyField('Book', related_name='+')\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        ordering = ['id']\n\n\n# Models for many-to-many with UUID pk test:\n\nclass Pet(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=20)\n    people = models.ManyToManyField(Person, related_name='pets')\n\n\nclass Flea(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    current_room = models.ForeignKey(Room, models.SET_NULL, related_name='fleas', null=True)\n    pets_visited = models.ManyToManyField(Pet, related_name='fleas_hosted')\n    people_visited = models.ManyToManyField(Person, related_name='fleas_hosted')\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "813dd2759413dae9aa0f23089328ed29", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/prefetch_related/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}