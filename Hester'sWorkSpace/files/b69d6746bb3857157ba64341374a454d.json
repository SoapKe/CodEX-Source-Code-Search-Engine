{"author": "keon", "code": "\n\n\n# returns list of lists (each sub list is a maximal clique)\n\n# Bron, Coen; Kerbosch, Joep (1973), \"Algorithm 457: finding all cliques of an undirected graph\",\n\n\ndef find_all_cliques(edges):\n    def expand_clique(candidates, nays):\n        nonlocal compsub\n        if not candidates and not nays:\n            nonlocal solutions\n            solutions.append(compsub.copy())\n        else:\n            for selected in candidates.copy():\n                candidates.remove(selected)\n                candidates_temp = get_connected(selected, candidates)\n                nays_temp = get_connected(selected, nays)\n                compsub.append(selected)\n                expand_clique(candidates_temp, nays_temp)\n                nays.add(compsub.pop())\n\n    def get_connected(vertex, old_set):\n        new_set = set()\n        for neighbor in edges[str(vertex)]:\n            if neighbor in old_set:\n                new_set.add(neighbor)\n        return new_set\n\n    compsub = []\n    solutions = []\n    possibles = set(edges.keys())\n    expand_clique(possibles, set())\n    return solutions\n", "comments": "  takes dict sets    key vertex    value set edges connected vertex    returns list lists (each sub list maximal clique)    implementation basic algorithm described     bron  coen  kerbosch  joep (1973)   algorithm 457  finding cliques undirected graph   ", "content": "# takes dict of sets\n# each key is a vertex\n# value is set of all edges connected to vertex\n# returns list of lists (each sub list is a maximal clique)\n# implementation of the basic algorithm described in:\n# Bron, Coen; Kerbosch, Joep (1973), \"Algorithm 457: finding all cliques of an undirected graph\",\n\n\ndef find_all_cliques(edges):\n    def expand_clique(candidates, nays):\n        nonlocal compsub\n        if not candidates and not nays:\n            nonlocal solutions\n            solutions.append(compsub.copy())\n        else:\n            for selected in candidates.copy():\n                candidates.remove(selected)\n                candidates_temp = get_connected(selected, candidates)\n                nays_temp = get_connected(selected, nays)\n                compsub.append(selected)\n                expand_clique(candidates_temp, nays_temp)\n                nays.add(compsub.pop())\n\n    def get_connected(vertex, old_set):\n        new_set = set()\n        for neighbor in edges[str(vertex)]:\n            if neighbor in old_set:\n                new_set.add(neighbor)\n        return new_set\n\n    compsub = []\n    solutions = []\n    possibles = set(edges.keys())\n    expand_clique(possibles, set())\n    return solutions\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "find_all_cliques.py", "id": "b69d6746bb3857157ba64341374a454d", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/graph/find_all_cliques.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}