{"author": "keon", "code": "\"\"\"\nWrite code to partition a linked list around a value x, such that all nodes less\nthan x come before all nodes greater than or equal to x.  If x is contained\nwithin the list, the values of x only need to be after the elements less than x.\nThe partition element x can appear anywhere in the \"right partition\";\nit does not need to appear between the left and right partitions.\n\n3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1 [partition=5]\n3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8\n\nWe assume the values of all linked list nodes are int and that x in an int.\n\"\"\"\n\n\nclass Node():\n    def __init__(self, val=None):\n        self.val = int(val)\n        self.next = None\n\n\ndef printLinkedList(head):\n    string = \"\"\n    while head.next:\n        string += str(head.val) + \" -> \"\n        head = head.next\n    string += str(head.val)\n    print(string)\n\n\ndef partition(head, x):\n    left = None\n    right = None\n    prev = None\n    current = head\n    while current:\n        if int(current.val) >= x:\n            if not right:\n                right = current\n        else:\n            if not left:\n                left = current\n            else:\n                prev.next = current.next\n                left.next = current\n                left = current\n                left.next = right\n        if prev and prev.next is None:\n            break\n        \n        prev = current\n        current = current.next\n\n\ndef test():\n    a = Node(\"3\")\n    b = Node(\"5\")\n    c = Node(\"8\")\n    d = Node(\"5\")\n    e = Node(\"10\")\n    f = Node(\"2\")\n    g = Node(\"1\")\n\n    a.next = b\n    b.next = c\n    c.next = d\n    d.next = e\n    e.next = f\n    f.next = g\n\n    printLinkedList(a)\n    partition(a, 5)\n    printLinkedList(a)\n\n\nif __name__ == '__main__':\n    test()\n", "comments": "    write code partition linked list around value x  nodes less x come nodes greater equal x   if x contained within list  values x need elements less x  the partition element x appear anywhere  right partition   need appear left right partitions   3    5    8    5    10    2    1  partition 5  3    1    2    10    5    5    8  we assume values linked list nodes int x int         cache previous value case needs pointed elsewhere ", "content": "\"\"\"\nWrite code to partition a linked list around a value x, such that all nodes less\nthan x come before all nodes greater than or equal to x.  If x is contained\nwithin the list, the values of x only need to be after the elements less than x.\nThe partition element x can appear anywhere in the \"right partition\";\nit does not need to appear between the left and right partitions.\n\n3 -> 5 -> 8 -> 5 -> 10 -> 2 -> 1 [partition=5]\n3 -> 1 -> 2 -> 10 -> 5 -> 5 -> 8\n\nWe assume the values of all linked list nodes are int and that x in an int.\n\"\"\"\n\n\nclass Node():\n    def __init__(self, val=None):\n        self.val = int(val)\n        self.next = None\n\n\ndef printLinkedList(head):\n    string = \"\"\n    while head.next:\n        string += str(head.val) + \" -> \"\n        head = head.next\n    string += str(head.val)\n    print(string)\n\n\ndef partition(head, x):\n    left = None\n    right = None\n    prev = None\n    current = head\n    while current:\n        if int(current.val) >= x:\n            if not right:\n                right = current\n        else:\n            if not left:\n                left = current\n            else:\n                prev.next = current.next\n                left.next = current\n                left = current\n                left.next = right\n        if prev and prev.next is None:\n            break\n        # cache previous value in case it needs to be pointed elsewhere\n        prev = current\n        current = current.next\n\n\ndef test():\n    a = Node(\"3\")\n    b = Node(\"5\")\n    c = Node(\"8\")\n    d = Node(\"5\")\n    e = Node(\"10\")\n    f = Node(\"2\")\n    g = Node(\"1\")\n\n    a.next = b\n    b.next = c\n    c.next = d\n    d.next = e\n    e.next = f\n    f.next = g\n\n    printLinkedList(a)\n    partition(a, 5)\n    printLinkedList(a)\n\n\nif __name__ == '__main__':\n    test()\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "partition.py", "id": "40a28ee89de2bfd649220189781a05d4", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/linkedlist/partition.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}