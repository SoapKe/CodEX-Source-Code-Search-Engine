{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\n\n\nclass PhotobucketIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[a-z0-9]+\\.)?photobucket\\.com/.*(([\\?\\&]current=)|_)(?P<id>.*)\\.(?P<ext>(flv)|(mp4))'\n    _TEST = {\n        'url': 'http://media.photobucket.com/user/rachaneronas/media/TiredofLinkBuildingTryBacklinkMyDomaincom_zpsc0c3b9fa.mp4.html?filters[term]=search&filters[primary]=videos&filters[secondary]=images&sort=1&o=0',\n        'md5': '7dabfb92b0a31f6c16cebc0f8e60ff99',\n        'info_dict': {\n            'id': 'zpsc0c3b9fa',\n            'ext': 'mp4',\n            'timestamp': 1367669341,\n            'upload_date': '20130504',\n            'uploader': 'rachaneronas',\n            'title': 'Tired of Link Building? Try BacklinkMyDomain.com!',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        video_extension = mobj.group('ext')\n\n        webpage = self._download_webpage(url, video_id)\n\n        \n        self.report_extraction(video_id)\n        info_json = self._search_regex(r'Pb\\.Data\\.Shared\\.put\\(Pb\\.Data\\.Shared\\.MEDIA, (.*?)\\);',\n                                       webpage, 'info json')\n        info = json.loads(info_json)\n        url = compat_urllib_parse_unquote(self._html_search_regex(r'file=(.+\\.mp4)', info['linkcodes']['html'], 'url'))\n        return {\n            'id': video_id,\n            'url': url,\n            'uploader': info['username'],\n            'timestamp': info['creationDate'],\n            'title': info['title'],\n            'ext': video_extension,\n            'thumbnail': info['thumbUrl'],\n        }\n", "comments": "# Extract URL, uploader, and title from webpage\n", "content": "from __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\n\n\nclass PhotobucketIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[a-z0-9]+\\.)?photobucket\\.com/.*(([\\?\\&]current=)|_)(?P<id>.*)\\.(?P<ext>(flv)|(mp4))'\n    _TEST = {\n        'url': 'http://media.photobucket.com/user/rachaneronas/media/TiredofLinkBuildingTryBacklinkMyDomaincom_zpsc0c3b9fa.mp4.html?filters[term]=search&filters[primary]=videos&filters[secondary]=images&sort=1&o=0',\n        'md5': '7dabfb92b0a31f6c16cebc0f8e60ff99',\n        'info_dict': {\n            'id': 'zpsc0c3b9fa',\n            'ext': 'mp4',\n            'timestamp': 1367669341,\n            'upload_date': '20130504',\n            'uploader': 'rachaneronas',\n            'title': 'Tired of Link Building? Try BacklinkMyDomain.com!',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        video_extension = mobj.group('ext')\n\n        webpage = self._download_webpage(url, video_id)\n\n        # Extract URL, uploader, and title from webpage\n        self.report_extraction(video_id)\n        info_json = self._search_regex(r'Pb\\.Data\\.Shared\\.put\\(Pb\\.Data\\.Shared\\.MEDIA, (.*?)\\);',\n                                       webpage, 'info json')\n        info = json.loads(info_json)\n        url = compat_urllib_parse_unquote(self._html_search_regex(r'file=(.+\\.mp4)', info['linkcodes']['html'], 'url'))\n        return {\n            'id': video_id,\n            'url': url,\n            'uploader': info['username'],\n            'timestamp': info['creationDate'],\n            'title': info['title'],\n            'ext': video_extension,\n            'thumbnail': info['thumbUrl'],\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "photobucket.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/photobucket.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}