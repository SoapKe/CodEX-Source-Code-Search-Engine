{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    float_or_none,\n    js_to_json,\n    parse_iso8601,\n    remove_end,\n)\n\n\nclass TV2IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tv2\\.no/v/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.tv2.no/v/916509/',\n        'info_dict': {\n            'id': '916509',\n            'ext': 'mp4',\n            'title': 'Se Frode Gryttens hyllest av Steven Gerrard',\n            'description': 'TV 2 Sportens huspoet tar avskjed med Liverpools kaptein Steven Gerrard.',\n            'timestamp': 1431715610,\n            'upload_date': '20150515',\n            'duration': 156.967,\n            'view_count': int,\n            'categories': list,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        formats = []\n        format_urls = []\n        for protocol in ('HDS', 'HLS'):\n            data = self._download_json(\n                'http://sumo.tv2.no/api/web/asset/%s/play.json?protocol=%s&videoFormat=SMIL+ISMUSP' % (video_id, protocol),\n                video_id, 'Downloading play JSON')['playback']\n            for item in data['items']['item']:\n                video_url = item.get('url')\n                if not video_url or video_url in format_urls:\n                    continue\n                format_id = '%s-%s' % (protocol.lower(), item.get('mediaFormat'))\n                if not self._is_valid_url(video_url, video_id, format_id):\n                    continue\n                format_urls.append(video_url)\n                ext = determine_ext(video_url)\n                if ext == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        video_url, video_id, f4m_id=format_id, fatal=False))\n                elif ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        video_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id=format_id, fatal=False))\n                elif ext == 'ism' or video_url.endswith('.ism/Manifest'):\n                    pass\n                else:\n                    formats.append({\n                        'url': video_url,\n                        'format_id': format_id,\n                        'tbr': int_or_none(item.get('bitrate')),\n                        'filesize': int_or_none(item.get('fileSize')),\n                    })\n        self._sort_formats(formats)\n\n        asset = self._download_json(\n            'http://sumo.tv2.no/api/web/asset/%s.json' % video_id,\n            video_id, 'Downloading metadata JSON')['asset']\n\n        title = asset['title']\n        description = asset.get('description')\n        timestamp = parse_iso8601(asset.get('createTime'))\n        duration = float_or_none(asset.get('accurateDuration') or asset.get('duration'))\n        view_count = int_or_none(asset.get('views'))\n        categories = asset.get('keywords', '').split(',')\n\n        thumbnails = [{\n            'id': thumbnail.get('@type'),\n            'url': thumbnail.get('url'),\n        } for _, thumbnail in asset.get('imageVersions', {}).items()]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'thumbnails': thumbnails,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': view_count,\n            'categories': categories,\n            'formats': formats,\n        }\n\n\nclass TV2ArticleIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tv2\\.no/(?:a|\\d{4}/\\d{2}/\\d{2}(/[^/]+)+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.tv2.no/2015/05/16/nyheter/alesund/krim/pingvin/6930542',\n        'info_dict': {\n            'id': '6930542',\n            'title': 'Russen hetses etter pingvintyveri - innr\u00f8mmer \u00e5 ha \u00e5pnet luken p\u00e5 buret',\n            'description': 'md5:339573779d3eea3542ffe12006190954',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.tv2.no/a/6930542',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        \n        assets = re.findall(r'data-assetid=[\"\\'](\\d+)', webpage)\n\n        if not assets:\n            \n            for v in re.findall(r'TV2ContentboxVideo\\(({.+?})\\)', webpage):\n                video = self._parse_json(\n                    v, playlist_id, transform_source=js_to_json, fatal=False)\n                if not video:\n                    continue\n                asset = video.get('assetId')\n                if asset:\n                    assets.append(asset)\n\n        entries = [\n            self.url_result('http://www.tv2.no/v/%s' % asset_id, 'TV2')\n            for asset_id in assets]\n\n        title = remove_end(self._og_search_title(webpage), ' - TV2.no')\n        description = remove_end(self._og_search_description(webpage), ' - TV2.no')\n\n        return self.playlist_result(entries, playlist_id, title, description)\n", "comments": "# coding: utf-8\n# m3u8 download\n# Old embed pattern (looks unused nowadays)\n# New embed pattern\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    float_or_none,\n    js_to_json,\n    parse_iso8601,\n    remove_end,\n)\n\n\nclass TV2IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tv2\\.no/v/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.tv2.no/v/916509/',\n        'info_dict': {\n            'id': '916509',\n            'ext': 'mp4',\n            'title': 'Se Frode Gryttens hyllest av Steven Gerrard',\n            'description': 'TV 2 Sportens huspoet tar avskjed med Liverpools kaptein Steven Gerrard.',\n            'timestamp': 1431715610,\n            'upload_date': '20150515',\n            'duration': 156.967,\n            'view_count': int,\n            'categories': list,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        formats = []\n        format_urls = []\n        for protocol in ('HDS', 'HLS'):\n            data = self._download_json(\n                'http://sumo.tv2.no/api/web/asset/%s/play.json?protocol=%s&videoFormat=SMIL+ISMUSP' % (video_id, protocol),\n                video_id, 'Downloading play JSON')['playback']\n            for item in data['items']['item']:\n                video_url = item.get('url')\n                if not video_url or video_url in format_urls:\n                    continue\n                format_id = '%s-%s' % (protocol.lower(), item.get('mediaFormat'))\n                if not self._is_valid_url(video_url, video_id, format_id):\n                    continue\n                format_urls.append(video_url)\n                ext = determine_ext(video_url)\n                if ext == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        video_url, video_id, f4m_id=format_id, fatal=False))\n                elif ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        video_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id=format_id, fatal=False))\n                elif ext == 'ism' or video_url.endswith('.ism/Manifest'):\n                    pass\n                else:\n                    formats.append({\n                        'url': video_url,\n                        'format_id': format_id,\n                        'tbr': int_or_none(item.get('bitrate')),\n                        'filesize': int_or_none(item.get('fileSize')),\n                    })\n        self._sort_formats(formats)\n\n        asset = self._download_json(\n            'http://sumo.tv2.no/api/web/asset/%s.json' % video_id,\n            video_id, 'Downloading metadata JSON')['asset']\n\n        title = asset['title']\n        description = asset.get('description')\n        timestamp = parse_iso8601(asset.get('createTime'))\n        duration = float_or_none(asset.get('accurateDuration') or asset.get('duration'))\n        view_count = int_or_none(asset.get('views'))\n        categories = asset.get('keywords', '').split(',')\n\n        thumbnails = [{\n            'id': thumbnail.get('@type'),\n            'url': thumbnail.get('url'),\n        } for _, thumbnail in asset.get('imageVersions', {}).items()]\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'thumbnails': thumbnails,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': view_count,\n            'categories': categories,\n            'formats': formats,\n        }\n\n\nclass TV2ArticleIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tv2\\.no/(?:a|\\d{4}/\\d{2}/\\d{2}(/[^/]+)+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.tv2.no/2015/05/16/nyheter/alesund/krim/pingvin/6930542',\n        'info_dict': {\n            'id': '6930542',\n            'title': 'Russen hetses etter pingvintyveri - innr\u00f8mmer \u00e5 ha \u00e5pnet luken p\u00e5 buret',\n            'description': 'md5:339573779d3eea3542ffe12006190954',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.tv2.no/a/6930542',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        # Old embed pattern (looks unused nowadays)\n        assets = re.findall(r'data-assetid=[\"\\'](\\d+)', webpage)\n\n        if not assets:\n            # New embed pattern\n            for v in re.findall(r'TV2ContentboxVideo\\(({.+?})\\)', webpage):\n                video = self._parse_json(\n                    v, playlist_id, transform_source=js_to_json, fatal=False)\n                if not video:\n                    continue\n                asset = video.get('assetId')\n                if asset:\n                    assets.append(asset)\n\n        entries = [\n            self.url_result('http://www.tv2.no/v/%s' % asset_id, 'TV2')\n            for asset_id in assets]\n\n        title = remove_end(self._og_search_title(webpage), ' - TV2.no')\n        description = remove_end(self._og_search_description(webpage), ' - TV2.no')\n\n        return self.playlist_result(entries, playlist_id, title, description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tv2.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tv2.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}