{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport werkzeug.urls\n\nfrom odoo import fields\n\nfrom odoo import http\nfrom odoo.http import request\nfrom odoo.addons.http_routing.models.ir_http import unslug\nfrom odoo.tools.translate import _\n\n\nclass WebsiteMembership(http.Controller):\n    _references_per_page = 20\n\n    @http.route([\n        '/members',\n        '/members/page/<int:page>',\n        '/members/association/<membership_id>',\n        '/members/association/<membership_id>/page/<int:page>',\n\n        '/members/country/<int:country_id>',\n        '/members/country/<country_name>-<int:country_id>',\n        '/members/country/<int:country_id>/page/<int:page>',\n        '/members/country/<country_name>-<int:country_id>/page/<int:page>',\n\n        '/members/association/<membership_id>/country/<country_name>-<int:country_id>',\n        '/members/association/<membership_id>/country/<int:country_id>',\n        '/members/association/<membership_id>/country/<country_name>-<int:country_id>/page/<int:page>',\n        '/members/association/<membership_id>/country/<int:country_id>/page/<int:page>',\n    ], type='http', auth=\"public\", website=True)\n    def members(self, membership_id=None, country_name=None, country_id=0, page=1, **post):\n        Product = request.env['product.product']\n        Country = request.env['res.country']\n        MembershipLine = request.env['membership.membership_line']\n        Partner = request.env['res.partner']\n\n        post_name = post.get('search') or post.get('name', '')\n        current_country = None\n        today = fields.Date.today()\n\n        \n        base_line_domain = [\n            (\"partner.website_published\", \"=\", True), ('state', '=', 'paid'),\n            ('date_to', '>=', today), ('date_from', '<=', today)\n        ]\n        if membership_id and membership_id != 'free':\n            membership_id = int(membership_id)\n            base_line_domain.append(('membership_id', '=', membership_id))\n\n        if post_name:\n            base_line_domain += ['|', ('partner.name', 'ilike', post_name), ('partner.website_description', 'ilike', post_name)]\n\n        # group by country, based on all customers (base domain)\n        if membership_id != 'free':\n            membership_lines = MembershipLine.sudo().search(base_line_domain)\n            country_domain = [('member_lines', 'in', membership_lines.ids)]\n            if not membership_id:\n                country_domain = ['|', country_domain[0], ('membership_state', '=', 'free')]\n        else:\n            country_domain = [('membership_state', '=', 'free')]\n        if post_name:\n            country_domain += ['|', ('name', 'ilike', post_name), ('website_description', 'ilike', post_name)]\n\n        countries = Partner.sudo().read_group(country_domain + [(\"website_published\", \"=\", True)], [\"id\", \"country_id\"], groupby=\"country_id\", orderby=\"country_id\")\n        countries_total = sum(country_dict['country_id_count'] for country_dict in countries)\n\n        line_domain = list(base_line_domain)\n        if country_id:\n            line_domain.append(('partner.country_id', '=', country_id))\n            current_country = Country.browse(country_id).read(['id', 'name'])[0]\n            if not any(x['country_id'][0] == country_id for x in countries if x['country_id']):\n                countries.append({\n                    'country_id_count': 0,\n                    'country_id': (country_id, current_country[\"name\"])\n                })\n                countries = [d for d in countries if d['country_id']]\n                countries.sort(key=lambda d: d['country_id'][1])\n\n        countries.insert(0, {\n            'country_id_count': countries_total,\n            'country_id': (0, _(\"All Countries\"))\n        })\n\n        \n        memberships = Product.search([('membership', '=', True)], order=\"website_sequence\")\n\n        \n        line_domain.append(('membership_id', 'in', memberships.ids))\n\n        limit = self._references_per_page\n        offset = limit * (page - 1)\n\n        count_members = 0\n        membership_lines = MembershipLine.sudo()\n        \n        if membership_id != 'free':\n            count_members = MembershipLine.sudo().search_count(line_domain)\n            if offset <= count_members:\n                membership_lines = MembershipLine.sudo().search(line_domain, offset, limit)\n        page_partner_ids = set(m.partner.id for m in membership_lines)\n\n        \n        google_map_partner_ids = []\n        if request.env.ref('website_membership.opt_index_google_map').customize_show:\n            google_map_partner_ids = MembershipLine.search(line_domain).get_published_companies(limit=2000)\n\n        search_domain = [('membership_state', '=', 'free'), ('website_published', '=', True)]\n        if post_name:\n            search_domain += ['|', ('name', 'ilike', post_name), ('website_description', 'ilike', post_name)]\n        if country_id:\n            search_domain += [('country_id', '=', country_id)]\n        free_partners = Partner.sudo().search(search_domain)\n        free_partner_ids = []\n\n        memberships_data = []\n        for membership_record in memberships:\n            memberships_data.append({'id': membership_record.id, 'name': membership_record.name})\n\n        memberships_partner_ids = {}\n        for line in membership_lines:\n            memberships_partner_ids.setdefault(line.membership_id.id, []).append(line.partner.id)\n\n        if free_partners:\n            memberships_data.append({'id': 'free', 'name': _('Free Members')})\n            if not membership_id or membership_id == 'free':\n                if count_members < offset + limit:\n                    free_start = max(offset - count_members, 0)\n                    free_end = max(offset + limit - count_members, 0)\n                    memberships_partner_ids['free'] = free_partners.ids[free_start:free_end]\n                    page_partner_ids |= set(memberships_partner_ids['free'])\n                google_map_partner_ids += free_partner_ids[:2000-len(google_map_partner_ids)]\n                count_members += len(free_partner_ids)\n\n        google_map_partner_ids = \",\".join(str(it) for it in google_map_partner_ids)\n        google_maps_api_key = request.env['ir.config_parameter'].sudo().get_param('google_maps_api_key')\n\n        partners = {p.id: p for p in Partner.sudo().browse(list(page_partner_ids))}\n\n        base_url = '/members%s%s' % ('/association/%s' % membership_id if membership_id else '',\n                                     '/country/%s' % country_id if country_id else '')\n\n        \n        pager = request.website.pager(url=base_url, total=count_members, page=page, step=limit, scope=7, url_args=post)\n\n        values = {\n            'partners': partners,\n            'memberships_data': memberships_data,\n            'memberships_partner_ids': memberships_partner_ids,\n            'membership_id': membership_id,\n            'countries': countries,\n            'current_country': current_country and [current_country['id'], current_country['name']] or None,\n            'current_country_id': current_country and current_country['id'] or 0,\n            'google_map_partner_ids': google_map_partner_ids,\n            'pager': pager,\n            'post': post,\n            'search': \"?%s\" % werkzeug.url_encode(post),\n            'search_count': count_members,\n            'google_maps_api_key': google_maps_api_key,\n        }\n        return request.render(\"website_membership.index\", values)\n\n    \n    @http.route(['/members/<partner_id>'], type='http', auth=\"public\", website=True)\n    def partners_detail(self, partner_id, **post):\n        _, partner_id = unslug(partner_id)\n        if partner_id:\n            partner = request.env['res.partner'].sudo().browse(partner_id)\n            if partner.exists() and partner.website_published:  \n                values = {}\n                values['main_object'] = values['partner'] = partner\n                return request.render(\"website_membership.partner\", values)\n        return self.members(**post)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     base domain groupby   searches    group country  based customers (base domain)    format domain group memberships    make sure access lines unpublished membershipts    displayed non free membership lines    get google maps localization partners    request pager lines    do use semantic controller due superuser id    todo done access rules ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport werkzeug.urls\n\nfrom odoo import fields\n\nfrom odoo import http\nfrom odoo.http import request\nfrom odoo.addons.http_routing.models.ir_http import unslug\nfrom odoo.tools.translate import _\n\n\nclass WebsiteMembership(http.Controller):\n    _references_per_page = 20\n\n    @http.route([\n        '/members',\n        '/members/page/<int:page>',\n        '/members/association/<membership_id>',\n        '/members/association/<membership_id>/page/<int:page>',\n\n        '/members/country/<int:country_id>',\n        '/members/country/<country_name>-<int:country_id>',\n        '/members/country/<int:country_id>/page/<int:page>',\n        '/members/country/<country_name>-<int:country_id>/page/<int:page>',\n\n        '/members/association/<membership_id>/country/<country_name>-<int:country_id>',\n        '/members/association/<membership_id>/country/<int:country_id>',\n        '/members/association/<membership_id>/country/<country_name>-<int:country_id>/page/<int:page>',\n        '/members/association/<membership_id>/country/<int:country_id>/page/<int:page>',\n    ], type='http', auth=\"public\", website=True)\n    def members(self, membership_id=None, country_name=None, country_id=0, page=1, **post):\n        Product = request.env['product.product']\n        Country = request.env['res.country']\n        MembershipLine = request.env['membership.membership_line']\n        Partner = request.env['res.partner']\n\n        post_name = post.get('search') or post.get('name', '')\n        current_country = None\n        today = fields.Date.today()\n\n        # base domain for groupby / searches\n        base_line_domain = [\n            (\"partner.website_published\", \"=\", True), ('state', '=', 'paid'),\n            ('date_to', '>=', today), ('date_from', '<=', today)\n        ]\n        if membership_id and membership_id != 'free':\n            membership_id = int(membership_id)\n            base_line_domain.append(('membership_id', '=', membership_id))\n\n        if post_name:\n            base_line_domain += ['|', ('partner.name', 'ilike', post_name), ('partner.website_description', 'ilike', post_name)]\n\n        # group by country, based on all customers (base domain)\n        if membership_id != 'free':\n            membership_lines = MembershipLine.sudo().search(base_line_domain)\n            country_domain = [('member_lines', 'in', membership_lines.ids)]\n            if not membership_id:\n                country_domain = ['|', country_domain[0], ('membership_state', '=', 'free')]\n        else:\n            country_domain = [('membership_state', '=', 'free')]\n        if post_name:\n            country_domain += ['|', ('name', 'ilike', post_name), ('website_description', 'ilike', post_name)]\n\n        countries = Partner.sudo().read_group(country_domain + [(\"website_published\", \"=\", True)], [\"id\", \"country_id\"], groupby=\"country_id\", orderby=\"country_id\")\n        countries_total = sum(country_dict['country_id_count'] for country_dict in countries)\n\n        line_domain = list(base_line_domain)\n        if country_id:\n            line_domain.append(('partner.country_id', '=', country_id))\n            current_country = Country.browse(country_id).read(['id', 'name'])[0]\n            if not any(x['country_id'][0] == country_id for x in countries if x['country_id']):\n                countries.append({\n                    'country_id_count': 0,\n                    'country_id': (country_id, current_country[\"name\"])\n                })\n                countries = [d for d in countries if d['country_id']]\n                countries.sort(key=lambda d: d['country_id'][1])\n\n        countries.insert(0, {\n            'country_id_count': countries_total,\n            'country_id': (0, _(\"All Countries\"))\n        })\n\n        # format domain for group_by and memberships\n        memberships = Product.search([('membership', '=', True)], order=\"website_sequence\")\n\n        # make sure we don't access to lines with unpublished membershipts\n        line_domain.append(('membership_id', 'in', memberships.ids))\n\n        limit = self._references_per_page\n        offset = limit * (page - 1)\n\n        count_members = 0\n        membership_lines = MembershipLine.sudo()\n        # displayed non-free membership lines\n        if membership_id != 'free':\n            count_members = MembershipLine.sudo().search_count(line_domain)\n            if offset <= count_members:\n                membership_lines = MembershipLine.sudo().search(line_domain, offset, limit)\n        page_partner_ids = set(m.partner.id for m in membership_lines)\n\n        # get google maps localization of partners\n        google_map_partner_ids = []\n        if request.env.ref('website_membership.opt_index_google_map').customize_show:\n            google_map_partner_ids = MembershipLine.search(line_domain).get_published_companies(limit=2000)\n\n        search_domain = [('membership_state', '=', 'free'), ('website_published', '=', True)]\n        if post_name:\n            search_domain += ['|', ('name', 'ilike', post_name), ('website_description', 'ilike', post_name)]\n        if country_id:\n            search_domain += [('country_id', '=', country_id)]\n        free_partners = Partner.sudo().search(search_domain)\n        free_partner_ids = []\n\n        memberships_data = []\n        for membership_record in memberships:\n            memberships_data.append({'id': membership_record.id, 'name': membership_record.name})\n\n        memberships_partner_ids = {}\n        for line in membership_lines:\n            memberships_partner_ids.setdefault(line.membership_id.id, []).append(line.partner.id)\n\n        if free_partners:\n            memberships_data.append({'id': 'free', 'name': _('Free Members')})\n            if not membership_id or membership_id == 'free':\n                if count_members < offset + limit:\n                    free_start = max(offset - count_members, 0)\n                    free_end = max(offset + limit - count_members, 0)\n                    memberships_partner_ids['free'] = free_partners.ids[free_start:free_end]\n                    page_partner_ids |= set(memberships_partner_ids['free'])\n                google_map_partner_ids += free_partner_ids[:2000-len(google_map_partner_ids)]\n                count_members += len(free_partner_ids)\n\n        google_map_partner_ids = \",\".join(str(it) for it in google_map_partner_ids)\n        google_maps_api_key = request.env['ir.config_parameter'].sudo().get_param('google_maps_api_key')\n\n        partners = {p.id: p for p in Partner.sudo().browse(list(page_partner_ids))}\n\n        base_url = '/members%s%s' % ('/association/%s' % membership_id if membership_id else '',\n                                     '/country/%s' % country_id if country_id else '')\n\n        # request pager for lines\n        pager = request.website.pager(url=base_url, total=count_members, page=page, step=limit, scope=7, url_args=post)\n\n        values = {\n            'partners': partners,\n            'memberships_data': memberships_data,\n            'memberships_partner_ids': memberships_partner_ids,\n            'membership_id': membership_id,\n            'countries': countries,\n            'current_country': current_country and [current_country['id'], current_country['name']] or None,\n            'current_country_id': current_country and current_country['id'] or 0,\n            'google_map_partner_ids': google_map_partner_ids,\n            'pager': pager,\n            'post': post,\n            'search': \"?%s\" % werkzeug.url_encode(post),\n            'search_count': count_members,\n            'google_maps_api_key': google_maps_api_key,\n        }\n        return request.render(\"website_membership.index\", values)\n\n    # Do not use semantic controller due to SUPERUSER_ID\n    @http.route(['/members/<partner_id>'], type='http', auth=\"public\", website=True)\n    def partners_detail(self, partner_id, **post):\n        _, partner_id = unslug(partner_id)\n        if partner_id:\n            partner = request.env['res.partner'].sudo().browse(partner_id)\n            if partner.exists() and partner.website_published:  # TODO should be done with access rules\n                values = {}\n                values['main_object'] = values['partner'] = partner\n                return request.render(\"website_membership.partner\", values)\n        return self.members(**post)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "b12cac4f7190fe78dae34ec914185ad2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_membership/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}