{"author": "donnemartin", "code": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestKnapsack(object):\n\n    def test_knapsack_bottom_up(self):\n        knapsack = Knapsack()\n        assert_raises(TypeError, knapsack.fill_knapsack, None, None)\n        assert_equal(knapsack.fill_knapsack(0, 0), 0)\n        items = []\n        items.append(Item(label='a', value=2, weight=2))\n        items.append(Item(label='b', value=4, weight=2))\n        items.append(Item(label='c', value=6, weight=4))\n        items.append(Item(label='d', value=9, weight=5))\n        total_weight = 8\n        expected_value = 13\n        results = knapsack.fill_knapsack(items, total_weight)\n        assert_equal(results[0].label, 'd')\n        assert_equal(results[1].label, 'b')\n        total_value = 0\n        for item in results:\n            total_value += item.value\n        assert_equal(total_value, expected_value)\n        print('Success: test_knapsack_bottom_up')\n\n    def test_knapsack_top_down(self):\n        knapsack = KnapsackTopDown()\n        assert_raises(TypeError, knapsack.fill_knapsack, None, None)\n        assert_equal(knapsack.fill_knapsack(0, 0), 0)\n        items = []\n        items.append(Item(label='a', value=2, weight=2))\n        items.append(Item(label='b', value=4, weight=2))\n        items.append(Item(label='c', value=6, weight=4))\n        items.append(Item(label='d', value=9, weight=5))\n        total_weight = 8\n        expected_value = 13\n        assert_equal(knapsack.fill_knapsack(items, total_weight), expected_value)\n        print('Success: test_knapsack_top_down')\n\ndef main():\n    test = TestKnapsack()\n    test.test_knapsack_bottom_up()\n    test.test_knapsack_top_down()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestKnapsack(object):\n\n    def test_knapsack_bottom_up(self):\n        knapsack = Knapsack()\n        assert_raises(TypeError, knapsack.fill_knapsack, None, None)\n        assert_equal(knapsack.fill_knapsack(0, 0), 0)\n        items = []\n        items.append(Item(label='a', value=2, weight=2))\n        items.append(Item(label='b', value=4, weight=2))\n        items.append(Item(label='c', value=6, weight=4))\n        items.append(Item(label='d', value=9, weight=5))\n        total_weight = 8\n        expected_value = 13\n        results = knapsack.fill_knapsack(items, total_weight)\n        assert_equal(results[0].label, 'd')\n        assert_equal(results[1].label, 'b')\n        total_value = 0\n        for item in results:\n            total_value += item.value\n        assert_equal(total_value, expected_value)\n        print('Success: test_knapsack_bottom_up')\n\n    def test_knapsack_top_down(self):\n        knapsack = KnapsackTopDown()\n        assert_raises(TypeError, knapsack.fill_knapsack, None, None)\n        assert_equal(knapsack.fill_knapsack(0, 0), 0)\n        items = []\n        items.append(Item(label='a', value=2, weight=2))\n        items.append(Item(label='b', value=4, weight=2))\n        items.append(Item(label='c', value=6, weight=4))\n        items.append(Item(label='d', value=9, weight=5))\n        total_weight = 8\n        expected_value = 13\n        assert_equal(knapsack.fill_knapsack(items, total_weight), expected_value)\n        print('Success: test_knapsack_top_down')\n\ndef main():\n    test = TestKnapsack()\n    test.test_knapsack_bottom_up()\n    test.test_knapsack_top_down()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_knapsack.py", "id": "ef4247071fae1f7ead510d5f9313a2fa", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/recursion_dynamic/knapsack_01/test_knapsack.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}