{"author": "keon", "code": "\"\"\"\nDesign a data structure that supports all following operations\nin average O(1) time.\n\ninsert(val): Inserts an item val to the set if not already present.\nremove(val): Removes an item val from the set if present.\ngetRandom: Returns a random element from current set of elements.\nEach element must have the same probability of being returned.\n\"\"\"\n\n\nimport random\n\n\nclass RandomizedSet:\n    def __init__(self):\n        self.nums = []\n        self.idxs = {}\n\n    def insert(self, val):\n        if val not in self.idxs:\n            self.nums.append(val)\n            self.idxs[val] = len(self.nums)-1\n            return True\n        return False\n\n    def remove(self, val):\n        if val in self.idxs:\n            idx, last = self.idxs[val], self.nums[-1]\n            self.nums[idx], self.idxs[last] = last, idx\n            self.nums.pop()\n            self.idxs.pop(val, 0)\n            return True\n        return False\n\n    def get_random(self):\n        idx = random.randint(0, len(self.nums)-1)\n        return self.nums[idx]\n\n\nif __name__ == \"__main__\":\n    rs = RandomizedSet()\n    print(\"insert 1: \", rs.insert(1))\n    print(\"insert 2: \", rs.insert(2))\n    print(\"insert 3: \", rs.insert(3))\n    print(\"insert 4: \", rs.insert(4))\n    print(\"remove 3: \", rs.remove(3))\n    print(\"remove 3: \", rs.remove(3))\n    print(\"remove 1: \", rs.remove(1))\n    print(\"random: \", rs.get_random())\n    print(\"random: \", rs.get_random())\n    print(\"random: \", rs.get_random())\n    print(\"random: \", rs.get_random())\n", "comments": "    design data structure supports following operations average o(1) time   insert(val)  inserts item val set already present  remove(val)  removes item val set present  getrandom  returns random element current set elements  each element must probability returned      ", "content": "\"\"\"\nDesign a data structure that supports all following operations\nin average O(1) time.\n\ninsert(val): Inserts an item val to the set if not already present.\nremove(val): Removes an item val from the set if present.\ngetRandom: Returns a random element from current set of elements.\nEach element must have the same probability of being returned.\n\"\"\"\n\n\nimport random\n\n\nclass RandomizedSet:\n    def __init__(self):\n        self.nums = []\n        self.idxs = {}\n\n    def insert(self, val):\n        if val not in self.idxs:\n            self.nums.append(val)\n            self.idxs[val] = len(self.nums)-1\n            return True\n        return False\n\n    def remove(self, val):\n        if val in self.idxs:\n            idx, last = self.idxs[val], self.nums[-1]\n            self.nums[idx], self.idxs[last] = last, idx\n            self.nums.pop()\n            self.idxs.pop(val, 0)\n            return True\n        return False\n\n    def get_random(self):\n        idx = random.randint(0, len(self.nums)-1)\n        return self.nums[idx]\n\n\nif __name__ == \"__main__\":\n    rs = RandomizedSet()\n    print(\"insert 1: \", rs.insert(1))\n    print(\"insert 2: \", rs.insert(2))\n    print(\"insert 3: \", rs.insert(3))\n    print(\"insert 4: \", rs.insert(4))\n    print(\"remove 3: \", rs.remove(3))\n    print(\"remove 3: \", rs.remove(3))\n    print(\"remove 1: \", rs.remove(1))\n    print(\"random: \", rs.get_random())\n    print(\"random: \", rs.get_random())\n    print(\"random: \", rs.get_random())\n    print(\"random: \", rs.get_random())\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "randomized_set.py", "id": "b9a63e18af008c920a454e2235247793", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/map/randomized_set.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}