{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport json\nimport itertools\n\nfrom .common import InfoExtractor\n\nfrom ..utils import (\n    determine_ext,\n    error_to_compat_str,\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n    str_to_int,\n    unescapeHTML,\n    mimetype2ext,\n)\n\n\nclass DailymotionBaseInfoExtractor(InfoExtractor):\n    @staticmethod\n    def _build_request(url):\n        \n        request = sanitized_Request(url)\n        request.add_header('Cookie', 'family_filter=off; ff=off')\n        return request\n\n    def _download_webpage_handle_no_ff(self, url, *args, **kwargs):\n        request = self._build_request(url)\n        return self._download_webpage_handle(request, *args, **kwargs)\n\n    def _download_webpage_no_ff(self, url, *args, **kwargs):\n        request = self._build_request(url)\n        return self._download_webpage(request, *args, **kwargs)\n\n\nclass DailymotionIE(DailymotionBaseInfoExtractor):\n    _VALID_URL = r'(?i)https?://(?:(www|touch)\\.)?dailymotion\\.[a-z]{2,3}/(?:(?:(?:embed|swf|\n    IE_NAME = 'dailymotion'\n\n    _FORMATS = [\n        ('stream_h264_ld_url', 'ld'),\n        ('stream_h264_url', 'standard'),\n        ('stream_h264_hq_url', 'hq'),\n        ('stream_h264_hd_url', 'hd'),\n        ('stream_h264_hd1080_url', 'hd180'),\n    ]\n\n    _TESTS = [{\n        'url': 'http://www.dailymotion.com/video/x5kesuj_office-christmas-party-review-jason-bateman-olivia-munn-t-j-miller_news',\n        'md5': '074b95bdee76b9e3654137aee9c79dfe',\n        'info_dict': {\n            'id': 'x5kesuj',\n            'ext': 'mp4',\n            'title': 'Office Christmas Party Review \u2013  Jason Bateman, Olivia Munn, T.J. Miller',\n            'description': 'Office Christmas Party Review -  Jason Bateman, Olivia Munn, T.J. Miller',\n            'thumbnail': r're:^https?:.*\\.(?:jpg|png)$',\n            'duration': 187,\n            'timestamp': 1493651285,\n            'upload_date': '20170501',\n            'uploader': 'Deadline',\n            'uploader_id': 'x1xm8ri',\n            'age_limit': 0,\n            'view_count': int,\n        },\n    }, {\n        'url': 'https://www.dailymotion.com/video/x2iuewm_steam-machine-models-pricing-listed-on-steam-store-ign-news_videogames',\n        'md5': '2137c41a8e78554bb09225b8eb322406',\n        'info_dict': {\n            'id': 'x2iuewm',\n            'ext': 'mp4',\n            'title': 'Steam Machine Models, Pricing Listed on Steam Store - IGN News',\n            'description': 'Several come bundled with the Steam Controller.',\n            'thumbnail': r're:^https?:.*\\.(?:jpg|png)$',\n            'duration': 74,\n            'timestamp': 1425657362,\n            'upload_date': '20150306',\n            'uploader': 'IGN',\n            'uploader_id': 'xijv66',\n            'age_limit': 0,\n            'view_count': int,\n        },\n        'skip': 'video gone',\n    }, {\n        \n        'url': 'http://www.dailymotion.com/video/x149uew_katy-perry-roar-official_musi',\n        'info_dict': {\n            'title': 'Roar (Official)',\n            'id': 'USUV71301934',\n            'ext': 'mp4',\n            'uploader': 'Katy Perry',\n            'upload_date': '20130905',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'VEVO is only available in some countries',\n    }, {\n        \n        'url': 'http://www.dailymotion.com/video/xyh2zz_leanna-decker-cyber-girl-of-the-year-desires-nude-playboy-plus_redband',\n        'md5': '0d667a7b9cebecc3c89ee93099c4159d',\n        'info_dict': {\n            'id': 'xyh2zz',\n            'ext': 'mp4',\n            'title': 'Leanna Decker - Cyber Girl Of The Year Desires Nude [Playboy Plus]',\n            'uploader': 'HotWaves1012',\n            'age_limit': 18,\n        },\n        'skip': 'video gone',\n    }, {\n        \n        'url': 'http://www.dailymotion.com/video/xhza0o',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.dailymotion.com/video/x20su5f_the-power-of-nightmares-1-the-rise-of-the-politics-of-fear-bbc-2004_news',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.dailymotion.com/swf/video/x3n92nf',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.dailymotion.com/swf/x3ss1m_funny-magic-trick-barry-and-stuart_fun',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        \n        matches = re.findall(\n            r'<(?:(?:embed|iframe)[^>]+?src=|input[^>]+id=[\\'\"]dmcloudUrlEmissionSelect[\\'\"][^>]+value=)([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?dailymotion\\.com/(?:embed|swf)/video/.+?)\\1', webpage)\n        return list(map(lambda m: unescapeHTML(m[1]), matches))\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage_no_ff(\n            'https://www.dailymotion.com/video/%s' % video_id, video_id)\n\n        age_limit = self._rta_search(webpage)\n\n        description = self._og_search_description(webpage) or self._html_search_meta(\n            'description', webpage, 'description')\n\n        view_count_str = self._search_regex(\n            (r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([\\s\\d,.]+)\"',\n             r'video_views_count[^>]+>\\s+([\\s\\d\\,.]+)'),\n            webpage, 'view count', default=None)\n        if view_count_str:\n            view_count_str = re.sub(r'\\s', '', view_count_str)\n        view_count = str_to_int(view_count_str)\n        comment_count = int_or_none(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserComments:(\\d+)\"',\n            webpage, 'comment count', default=None))\n\n        player_v5 = self._search_regex(\n            [r'buildPlayer\\(({.+?})\\);\\n',  \n             r'playerV5\\s*=\\s*dmp\\.create\\([^,]+?,\\s*({.+?})\\);',\n             r'buildPlayer\\(({.+?})\\);',\n             r'var\\s+config\\s*=\\s*({.+?});',\n             \n             r'__PLAYER_CONFIG__\\s*=\\s*({.+?});'],\n            webpage, 'player v5', default=None)\n        if player_v5:\n            player = self._parse_json(player_v5, video_id)\n            metadata = player['metadata']\n\n            self._check_error(metadata)\n\n            formats = []\n            for quality, media_list in metadata['qualities'].items():\n                for media in media_list:\n                    media_url = media.get('url')\n                    if not media_url:\n                        continue\n                    type_ = media.get('type')\n                    if type_ == 'application/vnd.lumberjack.manifest':\n                        continue\n                    ext = mimetype2ext(type_) or determine_ext(media_url)\n                    if ext == 'm3u8':\n                        formats.extend(self._extract_m3u8_formats(\n                            media_url, video_id, 'mp4', preference=-1,\n                            m3u8_id='hls', fatal=False))\n                    elif ext == 'f4m':\n                        formats.extend(self._extract_f4m_formats(\n                            media_url, video_id, preference=-1, f4m_id='hds', fatal=False))\n                    else:\n                        f = {\n                            'url': media_url,\n                            'format_id': 'http-%s' % quality,\n                            'ext': ext,\n                        }\n                        m = re.search(r'H264-(?P<width>\\d+)x(?P<height>\\d+)', media_url)\n                        if m:\n                            f.update({\n                                'width': int(m.group('width')),\n                                'height': int(m.group('height')),\n                            })\n                        formats.append(f)\n            self._sort_formats(formats)\n\n            title = metadata['title']\n            duration = int_or_none(metadata.get('duration'))\n            timestamp = int_or_none(metadata.get('created_time'))\n            thumbnail = metadata.get('poster_url')\n            uploader = metadata.get('owner', {}).get('screenname')\n            uploader_id = metadata.get('owner', {}).get('id')\n\n            subtitles = {}\n            subtitles_data = metadata.get('subtitles', {}).get('data', {})\n            if subtitles_data and isinstance(subtitles_data, dict):\n                for subtitle_lang, subtitle in subtitles_data.items():\n                    subtitles[subtitle_lang] = [{\n                        'ext': determine_ext(subtitle_url),\n                        'url': subtitle_url,\n                    } for subtitle_url in subtitle.get('urls', [])]\n\n            return {\n                'id': video_id,\n                'title': title,\n                'description': description,\n                'thumbnail': thumbnail,\n                'duration': duration,\n                'timestamp': timestamp,\n                'uploader': uploader,\n                'uploader_id': uploader_id,\n                'age_limit': age_limit,\n                'view_count': view_count,\n                'comment_count': comment_count,\n                'formats': formats,\n                'subtitles': subtitles,\n            }\n\n        \n        vevo_id = self._search_regex(\n            r'<link rel=\"video_src\" href=\"[^\"]*?vevo\\.com[^\"]*?video=(?P<id>[\\w]*)',\n            webpage, 'vevo embed', default=None)\n        if vevo_id:\n            return self.url_result('vevo:%s' % vevo_id, 'Vevo')\n\n        \n        embed_page = self._download_webpage_no_ff(\n            'https://www.dailymotion.com/embed/video/%s' % video_id,\n            video_id, 'Downloading embed page')\n\n        timestamp = parse_iso8601(self._html_search_meta(\n            'video:release_date', webpage, 'upload date'))\n\n        info = self._parse_json(\n            self._search_regex(\n                r'var info = ({.*?}),$', embed_page,\n                'video info', flags=re.MULTILINE),\n            video_id)\n\n        self._check_error(info)\n\n        formats = []\n        for (key, format_id) in self._FORMATS:\n            video_url = info.get(key)\n            if video_url is not None:\n                m_size = re.search(r'H264-(\\d+)x(\\d+)', video_url)\n                if m_size is not None:\n                    width, height = map(int_or_none, (m_size.group(1), m_size.group(2)))\n                else:\n                    width, height = None, None\n                formats.append({\n                    'url': video_url,\n                    'ext': 'mp4',\n                    'format_id': format_id,\n                    'width': width,\n                    'height': height,\n                })\n        self._sort_formats(formats)\n\n        \n        video_subtitles = self.extract_subtitles(video_id, webpage)\n\n        title = self._og_search_title(webpage, default=None)\n        if title is None:\n            title = self._html_search_regex(\n                r'(?s)<span\\s+id=\"video_title\"[^>]*>(.*?)</span>', webpage,\n                'title')\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'uploader': info['owner.screenname'],\n            'timestamp': timestamp,\n            'title': title,\n            'description': description,\n            'subtitles': video_subtitles,\n            'thumbnail': info['thumbnail_url'],\n            'age_limit': age_limit,\n            'view_count': view_count,\n            'duration': info['duration']\n        }\n\n    def _check_error(self, info):\n        error = info.get('error')\n        if info.get('error') is not None:\n            title = error['title']\n            \n            if error.get('code') == 'DM007':\n                self.raise_geo_restricted(msg=title)\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, title), expected=True)\n\n    def _get_subtitles(self, video_id, webpage):\n        try:\n            sub_list = self._download_webpage(\n                'https://api.dailymotion.com/video/%s/subtitles?fields=id,language,url' % video_id,\n                video_id, note=False)\n        except ExtractorError as err:\n            self._downloader.report_warning('unable to download video subtitles: %s' % error_to_compat_str(err))\n            return {}\n        info = json.loads(sub_list)\n        if (info['total'] > 0):\n            sub_lang_list = dict((l['language'], [{'url': l['url'], 'ext': 'srt'}]) for l in info['list'])\n            return sub_lang_list\n        self._downloader.report_warning('video doesn\\'t have subtitles')\n        return {}\n\n\nclass DailymotionPlaylistIE(DailymotionBaseInfoExtractor):\n    IE_NAME = 'dailymotion:playlist'\n    _VALID_URL = r'(?:https?://)?(?:www\\.)?dailymotion\\.[a-z]{2,3}/playlist/(?P<id>[^/?\n    _MORE_PAGES_INDICATOR = r'(?s)<div class=\"pages[^\"]*\">.*?<a\\s+class=\"[^\"]*?icon-arrow_right[^\"]*?\"'\n    _PAGE_TEMPLATE = 'https://www.dailymotion.com/playlist/%s/%s'\n    _TESTS = [{\n        'url': 'http://www.dailymotion.com/playlist/xv4bw_nqtv_sport/1\n        'info_dict': {\n            'title': 'SPORT',\n            'id': 'xv4bw_nqtv_sport',\n        },\n        'playlist_mincount': 20,\n    }]\n\n    def _extract_entries(self, id):\n        video_ids = set()\n        processed_urls = set()\n        for pagenum in itertools.count(1):\n            page_url = self._PAGE_TEMPLATE % (id, pagenum)\n            webpage, urlh = self._download_webpage_handle_no_ff(\n                page_url, id, 'Downloading page %s' % pagenum)\n            if urlh.geturl() in processed_urls:\n                self.report_warning('Stopped at duplicated page %s, which is the same as %s' % (\n                    page_url, urlh.geturl()), id)\n                break\n\n            processed_urls.add(urlh.geturl())\n\n            for video_id in re.findall(r'data-xid=\"(.+?)\"', webpage):\n                if video_id not in video_ids:\n                    yield self.url_result(\n                        'http://www.dailymotion.com/video/%s' % video_id,\n                        DailymotionIE.ie_key(), video_id)\n                    video_ids.add(video_id)\n\n            if re.search(self._MORE_PAGES_INDICATOR, webpage) is None:\n                break\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n        webpage = self._download_webpage(url, playlist_id)\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': self._og_search_title(webpage),\n            'entries': self._extract_entries(playlist_id),\n        }\n\n\nclass DailymotionUserIE(DailymotionPlaylistIE):\n    IE_NAME = 'dailymotion:user'\n    _VALID_URL = r'https?://(?:www\\.)?dailymotion\\.[a-z]{2,3}/(?!(?:embed|swf|\n    _PAGE_TEMPLATE = 'http://www.dailymotion.com/user/%s/%s'\n    _TESTS = [{\n        'url': 'https://www.dailymotion.com/user/nqtv',\n        'info_dict': {\n            'id': 'nqtv',\n            'title': 'R\u00e9mi Gaillard',\n        },\n        'playlist_mincount': 100,\n    }, {\n        'url': 'http://www.dailymotion.com/user/UnderProject',\n        'info_dict': {\n            'id': 'UnderProject',\n            'title': 'UnderProject',\n        },\n        'playlist_mincount': 1800,\n        'expected_warnings': [\n            'Stopped at duplicated page',\n        ],\n        'skip': 'Takes too long time',\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user = mobj.group('user')\n        webpage = self._download_webpage(\n            'https://www.dailymotion.com/user/%s' % user, user)\n        full_user = unescapeHTML(self._html_search_regex(\n            r'<a class=\"nav-image\" title=\"([^\"]+)\" href=\"/%s\">' % re.escape(user),\n            webpage, 'user'))\n\n        return {\n            '_type': 'playlist',\n            'id': user,\n            'title': full_user,\n            'entries': self._extract_entries(user),\n        }\n", "comments": "Build a request with the family filter disabled\nd\n# coding: utf-8\n#)/)?video|swf)/(?P<id>[^/?_]+)'\n# Vevo video\n# age-restricted video\n# geo-restricted, player v5\n# with subtitles\n# Look for embedded Dailymotion player\n# See https://github.com/rg3/youtube-dl/issues/7826\n# New layout regex (see https://github.com/rg3/youtube-dl/issues/13580)\n# vevo embed\n# fallback old player\n# subtitles\n# See https://developer.dailymotion.com/api#access-error\n#&]+)'\n#video=xl8v3q',\n#|video|playlist)/)(?:(?:old/)?user/)?(?P<user>[^/]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport json\nimport itertools\n\nfrom .common import InfoExtractor\n\nfrom ..utils import (\n    determine_ext,\n    error_to_compat_str,\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n    str_to_int,\n    unescapeHTML,\n    mimetype2ext,\n)\n\n\nclass DailymotionBaseInfoExtractor(InfoExtractor):\n    @staticmethod\n    def _build_request(url):\n        \"\"\"Build a request with the family filter disabled\"\"\"\n        request = sanitized_Request(url)\n        request.add_header('Cookie', 'family_filter=off; ff=off')\n        return request\n\n    def _download_webpage_handle_no_ff(self, url, *args, **kwargs):\n        request = self._build_request(url)\n        return self._download_webpage_handle(request, *args, **kwargs)\n\n    def _download_webpage_no_ff(self, url, *args, **kwargs):\n        request = self._build_request(url)\n        return self._download_webpage(request, *args, **kwargs)\n\n\nclass DailymotionIE(DailymotionBaseInfoExtractor):\n    _VALID_URL = r'(?i)https?://(?:(www|touch)\\.)?dailymotion\\.[a-z]{2,3}/(?:(?:(?:embed|swf|#)/)?video|swf)/(?P<id>[^/?_]+)'\n    IE_NAME = 'dailymotion'\n\n    _FORMATS = [\n        ('stream_h264_ld_url', 'ld'),\n        ('stream_h264_url', 'standard'),\n        ('stream_h264_hq_url', 'hq'),\n        ('stream_h264_hd_url', 'hd'),\n        ('stream_h264_hd1080_url', 'hd180'),\n    ]\n\n    _TESTS = [{\n        'url': 'http://www.dailymotion.com/video/x5kesuj_office-christmas-party-review-jason-bateman-olivia-munn-t-j-miller_news',\n        'md5': '074b95bdee76b9e3654137aee9c79dfe',\n        'info_dict': {\n            'id': 'x5kesuj',\n            'ext': 'mp4',\n            'title': 'Office Christmas Party Review \u2013  Jason Bateman, Olivia Munn, T.J. Miller',\n            'description': 'Office Christmas Party Review -  Jason Bateman, Olivia Munn, T.J. Miller',\n            'thumbnail': r're:^https?:.*\\.(?:jpg|png)$',\n            'duration': 187,\n            'timestamp': 1493651285,\n            'upload_date': '20170501',\n            'uploader': 'Deadline',\n            'uploader_id': 'x1xm8ri',\n            'age_limit': 0,\n            'view_count': int,\n        },\n    }, {\n        'url': 'https://www.dailymotion.com/video/x2iuewm_steam-machine-models-pricing-listed-on-steam-store-ign-news_videogames',\n        'md5': '2137c41a8e78554bb09225b8eb322406',\n        'info_dict': {\n            'id': 'x2iuewm',\n            'ext': 'mp4',\n            'title': 'Steam Machine Models, Pricing Listed on Steam Store - IGN News',\n            'description': 'Several come bundled with the Steam Controller.',\n            'thumbnail': r're:^https?:.*\\.(?:jpg|png)$',\n            'duration': 74,\n            'timestamp': 1425657362,\n            'upload_date': '20150306',\n            'uploader': 'IGN',\n            'uploader_id': 'xijv66',\n            'age_limit': 0,\n            'view_count': int,\n        },\n        'skip': 'video gone',\n    }, {\n        # Vevo video\n        'url': 'http://www.dailymotion.com/video/x149uew_katy-perry-roar-official_musi',\n        'info_dict': {\n            'title': 'Roar (Official)',\n            'id': 'USUV71301934',\n            'ext': 'mp4',\n            'uploader': 'Katy Perry',\n            'upload_date': '20130905',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'VEVO is only available in some countries',\n    }, {\n        # age-restricted video\n        'url': 'http://www.dailymotion.com/video/xyh2zz_leanna-decker-cyber-girl-of-the-year-desires-nude-playboy-plus_redband',\n        'md5': '0d667a7b9cebecc3c89ee93099c4159d',\n        'info_dict': {\n            'id': 'xyh2zz',\n            'ext': 'mp4',\n            'title': 'Leanna Decker - Cyber Girl Of The Year Desires Nude [Playboy Plus]',\n            'uploader': 'HotWaves1012',\n            'age_limit': 18,\n        },\n        'skip': 'video gone',\n    }, {\n        # geo-restricted, player v5\n        'url': 'http://www.dailymotion.com/video/xhza0o',\n        'only_matching': True,\n    }, {\n        # with subtitles\n        'url': 'http://www.dailymotion.com/video/x20su5f_the-power-of-nightmares-1-the-rise-of-the-politics-of-fear-bbc-2004_news',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.dailymotion.com/swf/video/x3n92nf',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.dailymotion.com/swf/x3ss1m_funny-magic-trick-barry-and-stuart_fun',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        # Look for embedded Dailymotion player\n        matches = re.findall(\n            r'<(?:(?:embed|iframe)[^>]+?src=|input[^>]+id=[\\'\"]dmcloudUrlEmissionSelect[\\'\"][^>]+value=)([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?dailymotion\\.com/(?:embed|swf)/video/.+?)\\1', webpage)\n        return list(map(lambda m: unescapeHTML(m[1]), matches))\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage_no_ff(\n            'https://www.dailymotion.com/video/%s' % video_id, video_id)\n\n        age_limit = self._rta_search(webpage)\n\n        description = self._og_search_description(webpage) or self._html_search_meta(\n            'description', webpage, 'description')\n\n        view_count_str = self._search_regex(\n            (r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserPlays:([\\s\\d,.]+)\"',\n             r'video_views_count[^>]+>\\s+([\\s\\d\\,.]+)'),\n            webpage, 'view count', default=None)\n        if view_count_str:\n            view_count_str = re.sub(r'\\s', '', view_count_str)\n        view_count = str_to_int(view_count_str)\n        comment_count = int_or_none(self._search_regex(\n            r'<meta[^>]+itemprop=\"interactionCount\"[^>]+content=\"UserComments:(\\d+)\"',\n            webpage, 'comment count', default=None))\n\n        player_v5 = self._search_regex(\n            [r'buildPlayer\\(({.+?})\\);\\n',  # See https://github.com/rg3/youtube-dl/issues/7826\n             r'playerV5\\s*=\\s*dmp\\.create\\([^,]+?,\\s*({.+?})\\);',\n             r'buildPlayer\\(({.+?})\\);',\n             r'var\\s+config\\s*=\\s*({.+?});',\n             # New layout regex (see https://github.com/rg3/youtube-dl/issues/13580)\n             r'__PLAYER_CONFIG__\\s*=\\s*({.+?});'],\n            webpage, 'player v5', default=None)\n        if player_v5:\n            player = self._parse_json(player_v5, video_id)\n            metadata = player['metadata']\n\n            self._check_error(metadata)\n\n            formats = []\n            for quality, media_list in metadata['qualities'].items():\n                for media in media_list:\n                    media_url = media.get('url')\n                    if not media_url:\n                        continue\n                    type_ = media.get('type')\n                    if type_ == 'application/vnd.lumberjack.manifest':\n                        continue\n                    ext = mimetype2ext(type_) or determine_ext(media_url)\n                    if ext == 'm3u8':\n                        formats.extend(self._extract_m3u8_formats(\n                            media_url, video_id, 'mp4', preference=-1,\n                            m3u8_id='hls', fatal=False))\n                    elif ext == 'f4m':\n                        formats.extend(self._extract_f4m_formats(\n                            media_url, video_id, preference=-1, f4m_id='hds', fatal=False))\n                    else:\n                        f = {\n                            'url': media_url,\n                            'format_id': 'http-%s' % quality,\n                            'ext': ext,\n                        }\n                        m = re.search(r'H264-(?P<width>\\d+)x(?P<height>\\d+)', media_url)\n                        if m:\n                            f.update({\n                                'width': int(m.group('width')),\n                                'height': int(m.group('height')),\n                            })\n                        formats.append(f)\n            self._sort_formats(formats)\n\n            title = metadata['title']\n            duration = int_or_none(metadata.get('duration'))\n            timestamp = int_or_none(metadata.get('created_time'))\n            thumbnail = metadata.get('poster_url')\n            uploader = metadata.get('owner', {}).get('screenname')\n            uploader_id = metadata.get('owner', {}).get('id')\n\n            subtitles = {}\n            subtitles_data = metadata.get('subtitles', {}).get('data', {})\n            if subtitles_data and isinstance(subtitles_data, dict):\n                for subtitle_lang, subtitle in subtitles_data.items():\n                    subtitles[subtitle_lang] = [{\n                        'ext': determine_ext(subtitle_url),\n                        'url': subtitle_url,\n                    } for subtitle_url in subtitle.get('urls', [])]\n\n            return {\n                'id': video_id,\n                'title': title,\n                'description': description,\n                'thumbnail': thumbnail,\n                'duration': duration,\n                'timestamp': timestamp,\n                'uploader': uploader,\n                'uploader_id': uploader_id,\n                'age_limit': age_limit,\n                'view_count': view_count,\n                'comment_count': comment_count,\n                'formats': formats,\n                'subtitles': subtitles,\n            }\n\n        # vevo embed\n        vevo_id = self._search_regex(\n            r'<link rel=\"video_src\" href=\"[^\"]*?vevo\\.com[^\"]*?video=(?P<id>[\\w]*)',\n            webpage, 'vevo embed', default=None)\n        if vevo_id:\n            return self.url_result('vevo:%s' % vevo_id, 'Vevo')\n\n        # fallback old player\n        embed_page = self._download_webpage_no_ff(\n            'https://www.dailymotion.com/embed/video/%s' % video_id,\n            video_id, 'Downloading embed page')\n\n        timestamp = parse_iso8601(self._html_search_meta(\n            'video:release_date', webpage, 'upload date'))\n\n        info = self._parse_json(\n            self._search_regex(\n                r'var info = ({.*?}),$', embed_page,\n                'video info', flags=re.MULTILINE),\n            video_id)\n\n        self._check_error(info)\n\n        formats = []\n        for (key, format_id) in self._FORMATS:\n            video_url = info.get(key)\n            if video_url is not None:\n                m_size = re.search(r'H264-(\\d+)x(\\d+)', video_url)\n                if m_size is not None:\n                    width, height = map(int_or_none, (m_size.group(1), m_size.group(2)))\n                else:\n                    width, height = None, None\n                formats.append({\n                    'url': video_url,\n                    'ext': 'mp4',\n                    'format_id': format_id,\n                    'width': width,\n                    'height': height,\n                })\n        self._sort_formats(formats)\n\n        # subtitles\n        video_subtitles = self.extract_subtitles(video_id, webpage)\n\n        title = self._og_search_title(webpage, default=None)\n        if title is None:\n            title = self._html_search_regex(\n                r'(?s)<span\\s+id=\"video_title\"[^>]*>(.*?)</span>', webpage,\n                'title')\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'uploader': info['owner.screenname'],\n            'timestamp': timestamp,\n            'title': title,\n            'description': description,\n            'subtitles': video_subtitles,\n            'thumbnail': info['thumbnail_url'],\n            'age_limit': age_limit,\n            'view_count': view_count,\n            'duration': info['duration']\n        }\n\n    def _check_error(self, info):\n        error = info.get('error')\n        if info.get('error') is not None:\n            title = error['title']\n            # See https://developer.dailymotion.com/api#access-error\n            if error.get('code') == 'DM007':\n                self.raise_geo_restricted(msg=title)\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, title), expected=True)\n\n    def _get_subtitles(self, video_id, webpage):\n        try:\n            sub_list = self._download_webpage(\n                'https://api.dailymotion.com/video/%s/subtitles?fields=id,language,url' % video_id,\n                video_id, note=False)\n        except ExtractorError as err:\n            self._downloader.report_warning('unable to download video subtitles: %s' % error_to_compat_str(err))\n            return {}\n        info = json.loads(sub_list)\n        if (info['total'] > 0):\n            sub_lang_list = dict((l['language'], [{'url': l['url'], 'ext': 'srt'}]) for l in info['list'])\n            return sub_lang_list\n        self._downloader.report_warning('video doesn\\'t have subtitles')\n        return {}\n\n\nclass DailymotionPlaylistIE(DailymotionBaseInfoExtractor):\n    IE_NAME = 'dailymotion:playlist'\n    _VALID_URL = r'(?:https?://)?(?:www\\.)?dailymotion\\.[a-z]{2,3}/playlist/(?P<id>[^/?#&]+)'\n    _MORE_PAGES_INDICATOR = r'(?s)<div class=\"pages[^\"]*\">.*?<a\\s+class=\"[^\"]*?icon-arrow_right[^\"]*?\"'\n    _PAGE_TEMPLATE = 'https://www.dailymotion.com/playlist/%s/%s'\n    _TESTS = [{\n        'url': 'http://www.dailymotion.com/playlist/xv4bw_nqtv_sport/1#video=xl8v3q',\n        'info_dict': {\n            'title': 'SPORT',\n            'id': 'xv4bw_nqtv_sport',\n        },\n        'playlist_mincount': 20,\n    }]\n\n    def _extract_entries(self, id):\n        video_ids = set()\n        processed_urls = set()\n        for pagenum in itertools.count(1):\n            page_url = self._PAGE_TEMPLATE % (id, pagenum)\n            webpage, urlh = self._download_webpage_handle_no_ff(\n                page_url, id, 'Downloading page %s' % pagenum)\n            if urlh.geturl() in processed_urls:\n                self.report_warning('Stopped at duplicated page %s, which is the same as %s' % (\n                    page_url, urlh.geturl()), id)\n                break\n\n            processed_urls.add(urlh.geturl())\n\n            for video_id in re.findall(r'data-xid=\"(.+?)\"', webpage):\n                if video_id not in video_ids:\n                    yield self.url_result(\n                        'http://www.dailymotion.com/video/%s' % video_id,\n                        DailymotionIE.ie_key(), video_id)\n                    video_ids.add(video_id)\n\n            if re.search(self._MORE_PAGES_INDICATOR, webpage) is None:\n                break\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n        webpage = self._download_webpage(url, playlist_id)\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': self._og_search_title(webpage),\n            'entries': self._extract_entries(playlist_id),\n        }\n\n\nclass DailymotionUserIE(DailymotionPlaylistIE):\n    IE_NAME = 'dailymotion:user'\n    _VALID_URL = r'https?://(?:www\\.)?dailymotion\\.[a-z]{2,3}/(?!(?:embed|swf|#|video|playlist)/)(?:(?:old/)?user/)?(?P<user>[^/]+)'\n    _PAGE_TEMPLATE = 'http://www.dailymotion.com/user/%s/%s'\n    _TESTS = [{\n        'url': 'https://www.dailymotion.com/user/nqtv',\n        'info_dict': {\n            'id': 'nqtv',\n            'title': 'R\u00e9mi Gaillard',\n        },\n        'playlist_mincount': 100,\n    }, {\n        'url': 'http://www.dailymotion.com/user/UnderProject',\n        'info_dict': {\n            'id': 'UnderProject',\n            'title': 'UnderProject',\n        },\n        'playlist_mincount': 1800,\n        'expected_warnings': [\n            'Stopped at duplicated page',\n        ],\n        'skip': 'Takes too long time',\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user = mobj.group('user')\n        webpage = self._download_webpage(\n            'https://www.dailymotion.com/user/%s' % user, user)\n        full_user = unescapeHTML(self._html_search_regex(\n            r'<a class=\"nav-image\" title=\"([^\"]+)\" href=\"/%s\">' % re.escape(user),\n            webpage, 'user'))\n\n        return {\n            '_type': 'playlist',\n            'id': user,\n            'title': full_user,\n            'entries': self._extract_entries(user),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "dailymotion.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/dailymotion.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}