{"author": "ansible", "code": " (c) 2016, Matt Davis <mdavis@ansible.com>\n (c) 2016, Toshio Kuratomi <tkuratomi@ansible.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport sys\nimport json\n\nfrom contextlib import contextmanager\nfrom io import BytesIO, StringIO\nfrom ansible.compat.tests import unittest\nfrom ansible.module_utils.six import PY3\nfrom ansible.module_utils._text import to_bytes\n\n\n@contextmanager\ndef swap_stdin_and_argv(stdin_data='', argv_data=tuple()):\n    \"\"\"\n    context manager that temporarily masks the test runner's values for stdin and argv\n    \"\"\"\n    real_stdin = sys.stdin\n    real_argv = sys.argv\n\n    if PY3:\n        fake_stream = StringIO(stdin_data)\n        fake_stream.buffer = BytesIO(to_bytes(stdin_data))\n    else:\n        fake_stream = BytesIO(to_bytes(stdin_data))\n\n    try:\n        sys.stdin = fake_stream\n        sys.argv = argv_data\n\n        yield\n    finally:\n        sys.stdin = real_stdin\n        sys.argv = real_argv\n\n\n@contextmanager\ndef swap_stdout():\n    \"\"\"\n    context manager that temporarily replaces stdout for tests that need to verify output\n    \"\"\"\n    old_stdout = sys.stdout\n\n    if PY3:\n        fake_stream = StringIO()\n    else:\n        fake_stream = BytesIO()\n\n    try:\n        sys.stdout = fake_stream\n\n        yield fake_stream\n    finally:\n        sys.stdout = old_stdout\n\n\nclass ModuleTestCase(unittest.TestCase):\n    def setUp(self, module_args=None):\n        if module_args is None:\n            module_args = {}\n\n        args = json.dumps(dict(ANSIBLE_MODULE_ARGS=module_args))\n\n         unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap = swap_stdin_and_argv(stdin_data=args)\n        self.stdin_swap.__enter__()\n\n    def tearDown(self):\n         unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap.__exit__(None, None, None)\n", "comments": "        context manager temporarily masks test runner values stdin argv             real stdin   sys stdin     real argv   sys argv      py3          fake stream   stringio(stdin data)         fake stream buffer   bytesio(to bytes(stdin data))     else          fake stream   bytesio(to bytes(stdin data))      try          sys stdin   fake stream         sys argv   argv data          yield     finally          sys stdin   real stdin         sys argv   real argv    contextmanager def swap stdout()              context manager temporarily replaces stdout tests need verify output            (c) 2016  matt davis  mdavis ansible com     (c) 2016  toshio kuratomi  tkuratomi ansible com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    unittest clean place use context manager  enter exit manually    unittest clean place use context manager  enter exit manually ", "content": "# (c) 2016, Matt Davis <mdavis@ansible.com>\n# (c) 2016, Toshio Kuratomi <tkuratomi@ansible.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport sys\nimport json\n\nfrom contextlib import contextmanager\nfrom io import BytesIO, StringIO\nfrom ansible.compat.tests import unittest\nfrom ansible.module_utils.six import PY3\nfrom ansible.module_utils._text import to_bytes\n\n\n@contextmanager\ndef swap_stdin_and_argv(stdin_data='', argv_data=tuple()):\n    \"\"\"\n    context manager that temporarily masks the test runner's values for stdin and argv\n    \"\"\"\n    real_stdin = sys.stdin\n    real_argv = sys.argv\n\n    if PY3:\n        fake_stream = StringIO(stdin_data)\n        fake_stream.buffer = BytesIO(to_bytes(stdin_data))\n    else:\n        fake_stream = BytesIO(to_bytes(stdin_data))\n\n    try:\n        sys.stdin = fake_stream\n        sys.argv = argv_data\n\n        yield\n    finally:\n        sys.stdin = real_stdin\n        sys.argv = real_argv\n\n\n@contextmanager\ndef swap_stdout():\n    \"\"\"\n    context manager that temporarily replaces stdout for tests that need to verify output\n    \"\"\"\n    old_stdout = sys.stdout\n\n    if PY3:\n        fake_stream = StringIO()\n    else:\n        fake_stream = BytesIO()\n\n    try:\n        sys.stdout = fake_stream\n\n        yield fake_stream\n    finally:\n        sys.stdout = old_stdout\n\n\nclass ModuleTestCase(unittest.TestCase):\n    def setUp(self, module_args=None):\n        if module_args is None:\n            module_args = {}\n\n        args = json.dumps(dict(ANSIBLE_MODULE_ARGS=module_args))\n\n        # unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap = swap_stdin_and_argv(stdin_data=args)\n        self.stdin_swap.__enter__()\n\n    def tearDown(self):\n        # unittest doesn't have a clean place to use a context manager, so we have to enter/exit manually\n        self.stdin_swap.__exit__(None, None, None)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "procenv.py", "id": "f1e54465a5b8753de02e527782d5527b", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/mock/procenv.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}