{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    parse_filesize,\n)\n\n\nclass MassengeschmackTVIE(InfoExtractor):\n    IE_NAME = 'massengeschmack.tv'\n    _VALID_URL = r'https?://(?:www\\.)?massengeschmack\\.tv/play/(?P<id>[^?&\n\n    _TEST = {\n        'url': 'https://massengeschmack.tv/play/fktv202',\n        'md5': 'a9e054db9c2b5a08f0a0527cc201e8d3',\n        'info_dict': {\n            'id': 'fktv202',\n            'ext': 'mp4',\n            'title': 'Fernsehkritik-TV - Folge 202',\n        },\n    }\n\n    def _real_extract(self, url):\n        episode = self._match_id(url)\n\n        webpage = self._download_webpage(url, episode)\n        title = clean_html(self._html_search_regex(\n            '<h3>([^<]+)</h3>', webpage, 'title'))\n        thumbnail = self._search_regex(r'POSTER\\s*=\\s*\"([^\"]+)', webpage, 'thumbnail', fatal=False)\n        sources = self._parse_json(self._search_regex(r'(?s)MEDIA\\s*=\\s*(\\[.+?\\]);', webpage, 'media'), episode, js_to_json)\n\n        formats = []\n        for source in sources:\n            furl = source.get('src')\n            if not furl:\n                continue\n            furl = self._proto_relative_url(furl)\n            ext = determine_ext(furl) or mimetype2ext(source.get('type'))\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    furl, episode, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': furl,\n                    'format_id': determine_ext(furl),\n                })\n\n        for (durl, format_id, width, height, filesize) in re.findall(r, webpage):\n            formats.append({\n                'url': durl,\n                'format_id': format_id,\n                'width': int_or_none(width),\n                'height': int_or_none(height),\n                'filesize': parse_filesize(filesize),\n                'vcodec': 'none' if format_id.startswith('Audio') else None,\n            })\n\n        self._sort_formats(formats, ('width', 'height', 'filesize', 'tbr'))\n\n        return {\n            'id': episode,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n        }\n", "comments": "(?x)\n                                   <a[^>]+?href=\"(?P<url>(?:https:)?//[^\"]+)\".*?\n                                   <strong>(?P<format_id>.+?)</strong>.*?\n                                   <small>(?:(?P<width>\\d+)x(?P<height>\\d+))?\\s+?\\((?P<filesize>[\\d,]+\\s*[GM]iB)\\)</small>\n                                \n \n#]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    parse_filesize,\n)\n\n\nclass MassengeschmackTVIE(InfoExtractor):\n    IE_NAME = 'massengeschmack.tv'\n    _VALID_URL = r'https?://(?:www\\.)?massengeschmack\\.tv/play/(?P<id>[^?&#]+)'\n\n    _TEST = {\n        'url': 'https://massengeschmack.tv/play/fktv202',\n        'md5': 'a9e054db9c2b5a08f0a0527cc201e8d3',\n        'info_dict': {\n            'id': 'fktv202',\n            'ext': 'mp4',\n            'title': 'Fernsehkritik-TV - Folge 202',\n        },\n    }\n\n    def _real_extract(self, url):\n        episode = self._match_id(url)\n\n        webpage = self._download_webpage(url, episode)\n        title = clean_html(self._html_search_regex(\n            '<h3>([^<]+)</h3>', webpage, 'title'))\n        thumbnail = self._search_regex(r'POSTER\\s*=\\s*\"([^\"]+)', webpage, 'thumbnail', fatal=False)\n        sources = self._parse_json(self._search_regex(r'(?s)MEDIA\\s*=\\s*(\\[.+?\\]);', webpage, 'media'), episode, js_to_json)\n\n        formats = []\n        for source in sources:\n            furl = source.get('src')\n            if not furl:\n                continue\n            furl = self._proto_relative_url(furl)\n            ext = determine_ext(furl) or mimetype2ext(source.get('type'))\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    furl, episode, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': furl,\n                    'format_id': determine_ext(furl),\n                })\n\n        for (durl, format_id, width, height, filesize) in re.findall(r'''(?x)\n                                   <a[^>]+?href=\"(?P<url>(?:https:)?//[^\"]+)\".*?\n                                   <strong>(?P<format_id>.+?)</strong>.*?\n                                   <small>(?:(?P<width>\\d+)x(?P<height>\\d+))?\\s+?\\((?P<filesize>[\\d,]+\\s*[GM]iB)\\)</small>\n                                ''', webpage):\n            formats.append({\n                'url': durl,\n                'format_id': format_id,\n                'width': int_or_none(width),\n                'height': int_or_none(height),\n                'filesize': parse_filesize(filesize),\n                'vcodec': 'none' if format_id.startswith('Audio') else None,\n            })\n\n        self._sort_formats(formats, ('width', 'height', 'filesize', 'tbr'))\n\n        return {\n            'id': episode,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "massengeschmacktv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/massengeschmacktv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}