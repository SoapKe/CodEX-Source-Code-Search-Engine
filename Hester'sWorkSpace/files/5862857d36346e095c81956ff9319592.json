{"author": "django", "code": "from django.db.models import CharField, Value\nfrom django.db.models.functions import Lower, Right\nfrom django.test import TestCase\n\nfrom .models import Author\n\n\nclass RightTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        Author.objects.create(name='John Smith', alias='smithj')\n        Author.objects.create(name='Rhonda')\n\n    def test_basic(self):\n        authors = Author.objects.annotate(name_part=Right('name', 5))\n        self.assertQuerysetEqual(authors.order_by('name'), ['Smith', 'honda'], lambda a: a.name_part)\n        \n        Author.objects.filter(alias__isnull=True).update(alias=Lower(Right('name', 2)))\n        self.assertQuerysetEqual(authors.order_by('name'), ['smithj', 'da'], lambda a: a.alias)\n\n    def test_invalid_length(self):\n        with self.assertRaisesMessage(ValueError, \"'length' must be greater than 0\"):\n            Author.objects.annotate(raises=Right('name', 0))\n\n    def test_expressions(self):\n        authors = Author.objects.annotate(name_part=Right('name', Value(3), output_field=CharField()))\n        self.assertQuerysetEqual(authors.order_by('name'), ['ith', 'nda'], lambda a: a.name_part)\n", "comments": "  if alias null  set first 2 lower characters name  ", "content": "from django.db.models import CharField, Value\nfrom django.db.models.functions import Lower, Right\nfrom django.test import TestCase\n\nfrom .models import Author\n\n\nclass RightTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        Author.objects.create(name='John Smith', alias='smithj')\n        Author.objects.create(name='Rhonda')\n\n    def test_basic(self):\n        authors = Author.objects.annotate(name_part=Right('name', 5))\n        self.assertQuerysetEqual(authors.order_by('name'), ['Smith', 'honda'], lambda a: a.name_part)\n        # If alias is null, set it to the first 2 lower characters of the name.\n        Author.objects.filter(alias__isnull=True).update(alias=Lower(Right('name', 2)))\n        self.assertQuerysetEqual(authors.order_by('name'), ['smithj', 'da'], lambda a: a.alias)\n\n    def test_invalid_length(self):\n        with self.assertRaisesMessage(ValueError, \"'length' must be greater than 0\"):\n            Author.objects.annotate(raises=Right('name', 0))\n\n    def test_expressions(self):\n        authors = Author.objects.annotate(name_part=Right('name', Value(3), output_field=CharField()))\n        self.assertQuerysetEqual(authors.order_by('name'), ['ith', 'nda'], lambda a: a.name_part)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_right.py", "id": "5862857d36346e095c81956ff9319592", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/db_functions/test_right.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}