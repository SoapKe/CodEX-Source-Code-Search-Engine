{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    parse_iso8601,\n)\n\n\nclass ClypIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?clyp\\.it/(?P<id>[a-z0-9]+)'\n    _TEST = {\n        'url': 'https://clyp.it/ojz2wfah',\n        'md5': '1d4961036c41247ecfdcc439c0cddcbb',\n        'info_dict': {\n            'id': 'ojz2wfah',\n            'ext': 'mp3',\n            'title': 'Krisson80 - bits wip wip',\n            'description': '\n            'duration': 263.21,\n            'timestamp': 1443515251,\n            'upload_date': '20150929',\n        },\n    }\n\n    def _real_extract(self, url):\n        audio_id = self._match_id(url)\n\n        metadata = self._download_json(\n            'https://api.clyp.it/%s' % audio_id, audio_id)\n\n        formats = []\n        for secure in ('', 'Secure'):\n            for ext in ('Ogg', 'Mp3'):\n                format_id = '%s%s' % (secure, ext)\n                format_url = metadata.get('%sUrl' % format_id)\n                if format_url:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': format_id,\n                        'vcodec': 'none',\n                    })\n        self._sort_formats(formats)\n\n        title = metadata['Title']\n        description = metadata.get('Description')\n        duration = float_or_none(metadata.get('Duration'))\n        timestamp = parse_iso8601(metadata.get('DateCreated'))\n\n        return {\n            'id': audio_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n", "comments": "#Krisson80BitsWipWip #chiptune\\n#wip',\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    parse_iso8601,\n)\n\n\nclass ClypIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?clyp\\.it/(?P<id>[a-z0-9]+)'\n    _TEST = {\n        'url': 'https://clyp.it/ojz2wfah',\n        'md5': '1d4961036c41247ecfdcc439c0cddcbb',\n        'info_dict': {\n            'id': 'ojz2wfah',\n            'ext': 'mp3',\n            'title': 'Krisson80 - bits wip wip',\n            'description': '#Krisson80BitsWipWip #chiptune\\n#wip',\n            'duration': 263.21,\n            'timestamp': 1443515251,\n            'upload_date': '20150929',\n        },\n    }\n\n    def _real_extract(self, url):\n        audio_id = self._match_id(url)\n\n        metadata = self._download_json(\n            'https://api.clyp.it/%s' % audio_id, audio_id)\n\n        formats = []\n        for secure in ('', 'Secure'):\n            for ext in ('Ogg', 'Mp3'):\n                format_id = '%s%s' % (secure, ext)\n                format_url = metadata.get('%sUrl' % format_id)\n                if format_url:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': format_id,\n                        'vcodec': 'none',\n                    })\n        self._sort_formats(formats)\n\n        title = metadata['Title']\n        description = metadata.get('Description')\n        duration = float_or_none(metadata.get('Duration'))\n        timestamp = parse_iso8601(metadata.get('DateCreated'))\n\n        return {\n            'id': audio_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "clyp.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/clyp.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}