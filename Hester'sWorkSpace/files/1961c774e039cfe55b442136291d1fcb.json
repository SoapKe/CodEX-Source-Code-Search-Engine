{"author": "donnemartin", "code": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestBits(object):\n\n    def test_get_next_largest(self):\n        bits = Bits()\n        assert_raises(Exception, bits.get_next_largest, None)\n        assert_raises(Exception, bits.get_next_largest, 0)\n        assert_raises(Exception, bits.get_next_largest, -1)\n        num = int('011010111', base=2)\n        expected = int('011011011', base=2)\n        assert_equal(bits.get_next_largest(num), expected)\n        print('Success: test_get_next_largest')\n\n    def test_get_next_smallest(self):\n        bits = Bits()\n        assert_raises(Exception, bits.get_next_smallest, None)\n        assert_raises(Exception, bits.get_next_smallest, 0)\n        assert_raises(Exception, bits.get_next_smallest, -1)\n        num = int('011010111', base=2)\n        expected = int('011001111', base=2)\n        assert_equal(bits.get_next_smallest(num), expected)\n        print('Success: test_get_next_smallest')\n\ndef main():\n    test = TestBits()\n    test.test_get_next_largest()\n    test.test_get_next_smallest()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestBits(object):\n\n    def test_get_next_largest(self):\n        bits = Bits()\n        assert_raises(Exception, bits.get_next_largest, None)\n        assert_raises(Exception, bits.get_next_largest, 0)\n        assert_raises(Exception, bits.get_next_largest, -1)\n        num = int('011010111', base=2)\n        expected = int('011011011', base=2)\n        assert_equal(bits.get_next_largest(num), expected)\n        print('Success: test_get_next_largest')\n\n    def test_get_next_smallest(self):\n        bits = Bits()\n        assert_raises(Exception, bits.get_next_smallest, None)\n        assert_raises(Exception, bits.get_next_smallest, 0)\n        assert_raises(Exception, bits.get_next_smallest, -1)\n        num = int('011010111', base=2)\n        expected = int('011001111', base=2)\n        assert_equal(bits.get_next_smallest(num), expected)\n        print('Success: test_get_next_smallest')\n\ndef main():\n    test = TestBits()\n    test.test_get_next_largest()\n    test.test_get_next_smallest()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_get_next_largest.py", "id": "1961c774e039cfe55b442136291d1fcb", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/bit_manipulation/get_next/test_get_next_largest.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}