{"author": "keon", "code": "\"\"\"\nGiven a list of system packages,\nsome packages cannot be installed until the other packages are installed.\nProvide a valid sequence to install all of the packages.\n\ne.g.\na relies on b\nb relies on c\n\nthen a valid sequence is [c, b, a]\n\"\"\"\n\ndepGraph = {\n\n    \"a\" : [ \"b\" ],\n    \"b\" : [ \"c\" ],\n    \"c\" :  [ 'e'],\n    'e' : [ ],\n    \"d\" : [ ],\n    \"f\" : [\"e\" , \"d\"]\n}\n\n\ngiven = [ \"b\", \"c\", \"a\", \"d\", \"e\", \"f\" ]\n\ndef retDeps(visited, start):\n    queue = []\n    out = []\n    queue.append(start)\n    while queue:\n        newNode = queue.pop(0)\n        if newNode not in visited:\n            visited.add(newNode)\n        for child in depGraph[newNode]:\n            queue.append(child)\n            out.append(child)\n    out.append(start)\n    return out\n\n\ndef retDepGraph():\n    visited = set()\n    out = []\n    # visited.add(given[0])\n    for pac in given:\n        if pac in visited:\n            continue\n        visited.add(pac)\n        #out.append(pac)\n        if pac in depGraph:\n            \n            for child in depGraph[pac]:\n                if child in visited:\n                    continue\n                out.extend(retDeps(visited, child))\n        out.append(pac)\n    print(out)\nretDepGraph()\n", "comments": "    given list system packages  packages cannot installed packages installed  provide valid sequence install packages   e g  relies b b relies c  valid sequence  c  b          visited add(given 0 )   append(pac)    find children ", "content": "\"\"\"\nGiven a list of system packages,\nsome packages cannot be installed until the other packages are installed.\nProvide a valid sequence to install all of the packages.\n\ne.g.\na relies on b\nb relies on c\n\nthen a valid sequence is [c, b, a]\n\"\"\"\n\ndepGraph = {\n\n    \"a\" : [ \"b\" ],\n    \"b\" : [ \"c\" ],\n    \"c\" :  [ 'e'],\n    'e' : [ ],\n    \"d\" : [ ],\n    \"f\" : [\"e\" , \"d\"]\n}\n\n\ngiven = [ \"b\", \"c\", \"a\", \"d\", \"e\", \"f\" ]\n\ndef retDeps(visited, start):\n    queue = []\n    out = []\n    queue.append(start)\n    while queue:\n        newNode = queue.pop(0)\n        if newNode not in visited:\n            visited.add(newNode)\n        for child in depGraph[newNode]:\n            queue.append(child)\n            out.append(child)\n    out.append(start)\n    return out\n\n\ndef retDepGraph():\n    visited = set()\n    out = []\n    # visited.add(given[0])\n    for pac in given:\n        if pac in visited:\n            continue\n        visited.add(pac)\n        #out.append(pac)\n        if pac in depGraph:\n            # find all children\n            for child in depGraph[pac]:\n                if child in visited:\n                    continue\n                out.extend(retDeps(visited, child))\n        out.append(pac)\n    print(out)\nretDepGraph()\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "topsort.py", "id": "edbdbf09d4f892db2e6ded9b63d599d1", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/sort/topsort.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}