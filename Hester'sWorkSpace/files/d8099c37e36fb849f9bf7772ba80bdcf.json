{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2016, Eric D Helms <ericdhelms@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: katello\nshort_description: Manage Katello Resources\ndescription:\n    - Allows the management of Katello resources inside your Foreman server.\nversion_added: \"2.3\"\nauthor:\n- Eric D Helms (@ehelms)\nrequirements:\n    - nailgun >= 0.28.0\n    - python >= 2.6\n    - datetime\noptions:\n    server_url:\n        description:\n            - URL of Foreman server.\n        required: true\n    username:\n        description:\n            - Username on Foreman server.\n        required: true\n    password:\n        description:\n            - Password for user accessing Foreman server.\n        required: true\n    entity:\n        description:\n            - The Foreman resource that the action will be performed on (e.g. organization, host).\n        required: true\n    params:\n        description:\n            - Parameters associated to the entity resource to set or edit in dictionary format (e.g. name, description).\n        required: true\n'''\n\nEXAMPLES = '''\n---\n\n\n- name: Create Product\n  katello:\n      username: admin\n      password: admin\n      server_url: https://fakeserver.com\n      entity: product\n      params:\n        name: Centos 7\n  delegate_to: localhost\n\n\n\n---\n- name: \"{{ name }}\"\n  katello:\n      username: admin\n      password: admin\n      server_url: https://fakeserver.com\n      entity: \"{{ entity }}\"\n      params: \"{{ params }}\"\n  delegate_to: localhost\n\n\n---\n- include: katello.yml\n  vars:\n    name: Create Dev Environment\n    entity: lifecycle_environment\n    params:\n      name: Dev\n      prior: Library\n      organization: Default Organization\n\n- include: katello.yml\n  vars:\n    name: Create Centos Product\n    entity: product\n    params:\n      name: Centos 7\n      organization: Default Organization\n\n- include: katello.yml\n  vars:\n    name: Create 7.2 Repository\n    entity: repository\n    params:\n      name: Centos 7.2\n      product: Centos 7\n      organization: Default Organization\n      content_type: yum\n      url: http://mirror.centos.org/centos/7/os/x86_64/\n\n- include: katello.yml\n  vars:\n      name: Create Centos 7 View\n      entity: content_view\n      params:\n        name: Centos 7 View\n        organization: Default Organization\n        repositories:\n          - name: Centos 7.2\n            product: Centos 7\n\n- include: katello.yml\n  vars:\n      name: Enable RHEL Product\n      entity: repository_set\n      params:\n        name: Red Hat Enterprise Linux 7 Server (RPMs)\n        product: Red Hat Enterprise Linux Server\n        organization: Default Organization\n        basearch: x86_64\n        releasever: 7\n'''\n\nRETURN = '''# '''\n\nimport datetime\nimport os\nimport traceback\n\ntry:\n    from nailgun import entities, entity_fields, entity_mixins\n    from nailgun.config import ServerConfig\n    HAS_NAILGUN_PACKAGE = True\nexcept:\n    HAS_NAILGUN_PACKAGE = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\nclass NailGun(object):\n    def __init__(self, server, entities, module):\n        self._server = server\n        self._entities = entities\n        self._module = module\n        entity_mixins.TASK_TIMEOUT = 1000\n\n    def find_organization(self, name, **params):\n        org = self._entities.Organization(self._server, name=name, **params)\n        response = org.search(set(), {'search': 'name={}'.format(name)})\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No organization found for %s\" % name)\n\n    def find_lifecycle_environment(self, name, organization):\n        org = self.find_organization(organization)\n\n        lifecycle_env = self._entities.LifecycleEnvironment(self._server, name=name, organization=org)\n        response = lifecycle_env.search()\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Lifecycle Found found for %s\" % name)\n\n    def find_product(self, name, organization):\n        org = self.find_organization(organization)\n\n        product = self._entities.Product(self._server, name=name, organization=org)\n        response = product.search()\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Product found for %s\" % name)\n\n    def find_repository(self, name, product, organization):\n        product = self.find_product(product, organization)\n\n        repository = self._entities.Repository(self._server, name=name, product=product)\n        repository._fields['organization'] = entity_fields.OneToOneField(entities.Organization)\n        repository.organization = product.organization\n        response = repository.search()\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Repository found for %s\" % name)\n\n    def find_content_view(self, name, organization):\n        org = self.find_organization(organization)\n\n        content_view = self._entities.ContentView(self._server, name=name, organization=org)\n        response = content_view.search()\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Content View found for %s\" % name)\n\n    def organization(self, params):\n        name = params['name']\n        del params['name']\n        org = self.find_organization(name, **params)\n\n        if org:\n            org = self._entities.Organization(self._server, name=name, id=org.id, **params)\n            org.update()\n        else:\n            org = self._entities.Organization(self._server, name=name, **params)\n            org.create()\n\n        return True\n\n    def manifest(self, params):\n        org = self.find_organization(params['organization'])\n        params['organization'] = org.id\n\n        try:\n            file = open(os.getcwd() + params['content'], 'r')\n            content = file.read()\n        finally:\n            file.close()\n\n        manifest = self._entities.Subscription(self._server)\n\n        try:\n            manifest.upload(\n                data={'organization_id': org.id},\n                files={'content': content}\n            )\n            return True\n        except Exception as e:\n\n            if \"Import is the same as existing data\" in e.message:\n                return False\n            else:\n                self._module.fail_json(msg=\"Manifest import failed with %s\" % to_native(e),\n                                       exception=traceback.format_exc())\n\n    def product(self, params):\n        org = self.find_organization(params['organization'])\n        params['organization'] = org.id\n\n        product = self._entities.Product(self._server, **params)\n        response = product.search()\n\n        if len(response) == 1:\n            product.id = response[0].id\n            product.update()\n        else:\n            product.create()\n\n        return True\n\n    def sync_product(self, params):\n        org = self.find_organization(params['organization'])\n        product = self.find_product(params['name'], org.name)\n\n        return product.sync()\n\n    def repository(self, params):\n        product = self.find_product(params['product'], params['organization'])\n        params['product'] = product.id\n        del params['organization']\n\n        repository = self._entities.Repository(self._server, **params)\n        repository._fields['organization'] = entity_fields.OneToOneField(entities.Organization)\n        repository.organization = product.organization\n        response = repository.search()\n\n        if len(response) == 1:\n            repository.id = response[0].id\n            repository.update()\n        else:\n            repository.create()\n\n        return True\n\n    def sync_repository(self, params):\n        org = self.find_organization(params['organization'])\n        repository = self.find_repository(params['name'], params['product'], org.name)\n\n        return repository.sync()\n\n    def repository_set(self, params):\n        product = self.find_product(params['product'], params['organization'])\n        del params['product']\n        del params['organization']\n\n        if not product:\n            return False\n        else:\n            reposet = self._entities.RepositorySet(self._server, product=product, name=params['name'])\n            reposet = reposet.search()[0]\n\n            formatted_name = [params['name'].replace('(', '').replace(')', '')]\n            formatted_name.append(params['basearch'])\n\n            if 'releasever' in params:\n                formatted_name.append(params['releasever'])\n\n            formatted_name = ' '.join(formatted_name)\n\n            repository = self._entities.Repository(self._server, product=product, name=formatted_name)\n            repository._fields['organization'] = entity_fields.OneToOneField(entities.Organization)\n            repository.organization = product.organization\n            repository = repository.search()\n\n            if len(repository) == 0:\n                if 'releasever' in params:\n                    reposet.enable(data={'basearch': params['basearch'], 'releasever': params['releasever']})\n                else:\n                    reposet.enable(data={'basearch': params['basearch']})\n\n        return True\n\n    def sync_plan(self, params):\n        org = self.find_organization(params['organization'])\n        params['organization'] = org.id\n        params['sync_date'] = datetime.datetime.strptime(params['sync_date'], \"%H:%M\")\n\n        products = params['products']\n        del params['products']\n\n        sync_plan = self._entities.SyncPlan(\n            self._server,\n            name=params['name'],\n            organization=org\n        )\n        response = sync_plan.search()\n\n        sync_plan.sync_date = params['sync_date']\n        sync_plan.interval = params['interval']\n\n        if len(response) == 1:\n            sync_plan.id = response[0].id\n            sync_plan.update()\n        else:\n            response = sync_plan.create()\n            sync_plan.id = response[0].id\n\n        if products:\n            ids = []\n\n            for name in products:\n                product = self.find_product(name, org.name)\n                ids.append(product.id)\n\n            sync_plan.add_products(data={'product_ids': ids})\n\n        return True\n\n    def content_view(self, params):\n        org = self.find_organization(params['organization'])\n\n        content_view = self._entities.ContentView(self._server, name=params['name'], organization=org)\n        response = content_view.search()\n\n        if len(response) == 1:\n            content_view.id = response[0].id\n            content_view.update()\n        else:\n            content_view = content_view.create()\n\n        if params['repositories']:\n            repos = []\n\n            for repository in params['repositories']:\n                repository = self.find_repository(repository['name'], repository['product'], org.name)\n                repos.append(repository)\n\n            content_view.repository = repos\n            content_view.update(['repository'])\n\n    def find_content_view_version(self, name, organization, environment):\n        env = self.find_lifecycle_environment(environment, organization)\n        content_view = self.find_content_view(name, organization)\n\n        content_view_version = self._entities.ContentViewVersion(self._server, content_view=content_view)\n        response = content_view_version.search(['content_view'], {'environment_id': env.id})\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Content View version found for %s\" % response)\n\n    def publish(self, params):\n        content_view = self.find_content_view(params['name'], params['organization'])\n\n        return content_view.publish()\n\n    def promote(self, params):\n        to_environment = self.find_lifecycle_environment(params['to_environment'], params['organization'])\n        version = self.find_content_view_version(params['name'], params['organization'], params['from_environment'])\n\n        data = {'environment_id': to_environment.id}\n        return version.promote(data=data)\n\n    def lifecycle_environment(self, params):\n        org = self.find_organization(params['organization'])\n        prior_env = self.find_lifecycle_environment(params['prior'], params['organization'])\n\n        lifecycle_env = self._entities.LifecycleEnvironment(self._server, name=params['name'], organization=org, prior=prior_env)\n        response = lifecycle_env.search()\n\n        if len(response) == 1:\n            lifecycle_env.id = response[0].id\n            lifecycle_env.update()\n        else:\n            lifecycle_env.create()\n\n        return True\n\n    def activation_key(self, params):\n        org = self.find_organization(params['organization'])\n\n        activation_key = self._entities.ActivationKey(self._server, name=params['name'], organization=org)\n        response = activation_key.search()\n\n        if len(response) == 1:\n            activation_key.id = response[0].id\n            activation_key.update()\n        else:\n            activation_key.create()\n\n        if params['content_view']:\n            content_view = self.find_content_view(params['content_view'], params['organization'])\n            lifecycle_environment = self.find_lifecycle_environment(params['lifecycle_environment'], params['organization'])\n\n            activation_key.content_view = content_view\n            activation_key.environment = lifecycle_environment\n            activation_key.update()\n\n        return True\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            server_url=dict(type='str', required=True),\n            username=dict(type='str', required=True, no_log=True),\n            password=dict(type='str', required=True, no_log=True),\n            entity=dict(type='str', required=True),\n            action=dict(type='str'),\n            verify_ssl=dict(type='bool', default=False),\n            params=dict(type='dict', required=True, no_log=True),\n        ),\n        supports_check_mode=True,\n    )\n\n    if not HAS_NAILGUN_PACKAGE:\n        module.fail_json(msg=\"Missing required nailgun module (check docs or install with: pip install nailgun\")\n\n    server_url = module.params['server_url']\n    username = module.params['username']\n    password = module.params['password']\n    entity = module.params['entity']\n    action = module.params['action']\n    params = module.params['params']\n    verify_ssl = module.params['verify_ssl']\n\n    server = ServerConfig(\n        url=server_url,\n        auth=(username, password),\n        verify=verify_ssl\n    )\n    ng = NailGun(server, entities, module)\n\n    \n    try:\n        org = entities.Organization(server)\n        org.search()\n    except Exception as e:\n        module.fail_json(msg=\"Failed to connect to Foreman server: %s \" % e)\n\n    result = False\n\n    if entity == 'product':\n        if action == 'sync':\n            result = ng.sync_product(params)\n        else:\n            result = ng.product(params)\n    elif entity == 'repository':\n        if action == 'sync':\n            result = ng.sync_repository(params)\n        else:\n            result = ng.repository(params)\n    elif entity == 'manifest':\n        result = ng.manifest(params)\n    elif entity == 'repository_set':\n        result = ng.repository_set(params)\n    elif entity == 'sync_plan':\n        result = ng.sync_plan(params)\n    elif entity == 'content_view':\n        if action == 'publish':\n            result = ng.publish(params)\n        elif action == 'promote':\n            result = ng.promote(params)\n        else:\n            result = ng.content_view(params)\n    elif entity == 'lifecycle_environment':\n        result = ng.lifecycle_environment(params)\n    elif entity == 'activation_key':\n        result = ng.activation_key(params)\n    else:\n        module.fail_json(changed=False, result=\"Unsupported entity supplied\")\n\n    module.exit_json(changed=result, result=\"%s updated\" % entity)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  katello short description  manage katello resources description        allows management katello resources inside foreman server  version added   2 3  author    eric d helms ( ehelms) requirements        nailgun    0 28 0       python    2 6       datetime options      server url          description                url foreman server          required  true     username          description                username foreman server          required  true     password          description                password user accessing foreman server          required  true     entity          description                the foreman resource action performed (e g  organization  host)          required  true     params          description                parameters associated entity resource set edit dictionary format (e g  name  description)          required  true      examples             simple example     name  create product   katello        username  admin       password  admin       server url  https   fakeserver com       entity  product       params          name  centos 7   delegate  localhost    abstraction example    katello yml       name      name       katello        username  admin       password  admin       server url  https   fakeserver com       entity      entity           params      params       delegate  localhost    tasks yml       include  katello yml   vars      name  create dev environment     entity  lifecycle environment     params        name  dev       prior  library       organization  default organization    include  katello yml   vars      name  create centos product     entity  product     params        name  centos 7       organization  default organization    include  katello yml   vars      name  create 7 2 repository     entity  repository     params        name  centos 7 2       product  centos 7       organization  default organization       content type  yum       url  http   mirror centos org centos 7 os x86 64     include  katello yml   vars        name  create centos 7 view       entity  content view       params          name  centos 7 view         organization  default organization         repositories              name  centos 7 2             product  centos 7    include  katello yml   vars        name  enable rhel product       entity  repository set       params          name  red hat enterprise linux 7 server (rpms)         product  red hat enterprise linux server         organization  default organization         basearch  x86 64         releasever  7      return                usr bin python        coding  utf 8        copyright  (c) 2016  eric d helms  ericdhelms gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    simple example     abstraction example     katello yml    tasks yml    lets make connection server username password ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2016, Eric D Helms <ericdhelms@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: katello\nshort_description: Manage Katello Resources\ndescription:\n    - Allows the management of Katello resources inside your Foreman server.\nversion_added: \"2.3\"\nauthor:\n- Eric D Helms (@ehelms)\nrequirements:\n    - nailgun >= 0.28.0\n    - python >= 2.6\n    - datetime\noptions:\n    server_url:\n        description:\n            - URL of Foreman server.\n        required: true\n    username:\n        description:\n            - Username on Foreman server.\n        required: true\n    password:\n        description:\n            - Password for user accessing Foreman server.\n        required: true\n    entity:\n        description:\n            - The Foreman resource that the action will be performed on (e.g. organization, host).\n        required: true\n    params:\n        description:\n            - Parameters associated to the entity resource to set or edit in dictionary format (e.g. name, description).\n        required: true\n'''\n\nEXAMPLES = '''\n---\n# Simple Example:\n\n- name: Create Product\n  katello:\n      username: admin\n      password: admin\n      server_url: https://fakeserver.com\n      entity: product\n      params:\n        name: Centos 7\n  delegate_to: localhost\n\n# Abstraction Example:\n# katello.yml\n---\n- name: \"{{ name }}\"\n  katello:\n      username: admin\n      password: admin\n      server_url: https://fakeserver.com\n      entity: \"{{ entity }}\"\n      params: \"{{ params }}\"\n  delegate_to: localhost\n\n# tasks.yml\n---\n- include: katello.yml\n  vars:\n    name: Create Dev Environment\n    entity: lifecycle_environment\n    params:\n      name: Dev\n      prior: Library\n      organization: Default Organization\n\n- include: katello.yml\n  vars:\n    name: Create Centos Product\n    entity: product\n    params:\n      name: Centos 7\n      organization: Default Organization\n\n- include: katello.yml\n  vars:\n    name: Create 7.2 Repository\n    entity: repository\n    params:\n      name: Centos 7.2\n      product: Centos 7\n      organization: Default Organization\n      content_type: yum\n      url: http://mirror.centos.org/centos/7/os/x86_64/\n\n- include: katello.yml\n  vars:\n      name: Create Centos 7 View\n      entity: content_view\n      params:\n        name: Centos 7 View\n        organization: Default Organization\n        repositories:\n          - name: Centos 7.2\n            product: Centos 7\n\n- include: katello.yml\n  vars:\n      name: Enable RHEL Product\n      entity: repository_set\n      params:\n        name: Red Hat Enterprise Linux 7 Server (RPMs)\n        product: Red Hat Enterprise Linux Server\n        organization: Default Organization\n        basearch: x86_64\n        releasever: 7\n'''\n\nRETURN = '''# '''\n\nimport datetime\nimport os\nimport traceback\n\ntry:\n    from nailgun import entities, entity_fields, entity_mixins\n    from nailgun.config import ServerConfig\n    HAS_NAILGUN_PACKAGE = True\nexcept:\n    HAS_NAILGUN_PACKAGE = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\nclass NailGun(object):\n    def __init__(self, server, entities, module):\n        self._server = server\n        self._entities = entities\n        self._module = module\n        entity_mixins.TASK_TIMEOUT = 1000\n\n    def find_organization(self, name, **params):\n        org = self._entities.Organization(self._server, name=name, **params)\n        response = org.search(set(), {'search': 'name={}'.format(name)})\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No organization found for %s\" % name)\n\n    def find_lifecycle_environment(self, name, organization):\n        org = self.find_organization(organization)\n\n        lifecycle_env = self._entities.LifecycleEnvironment(self._server, name=name, organization=org)\n        response = lifecycle_env.search()\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Lifecycle Found found for %s\" % name)\n\n    def find_product(self, name, organization):\n        org = self.find_organization(organization)\n\n        product = self._entities.Product(self._server, name=name, organization=org)\n        response = product.search()\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Product found for %s\" % name)\n\n    def find_repository(self, name, product, organization):\n        product = self.find_product(product, organization)\n\n        repository = self._entities.Repository(self._server, name=name, product=product)\n        repository._fields['organization'] = entity_fields.OneToOneField(entities.Organization)\n        repository.organization = product.organization\n        response = repository.search()\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Repository found for %s\" % name)\n\n    def find_content_view(self, name, organization):\n        org = self.find_organization(organization)\n\n        content_view = self._entities.ContentView(self._server, name=name, organization=org)\n        response = content_view.search()\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Content View found for %s\" % name)\n\n    def organization(self, params):\n        name = params['name']\n        del params['name']\n        org = self.find_organization(name, **params)\n\n        if org:\n            org = self._entities.Organization(self._server, name=name, id=org.id, **params)\n            org.update()\n        else:\n            org = self._entities.Organization(self._server, name=name, **params)\n            org.create()\n\n        return True\n\n    def manifest(self, params):\n        org = self.find_organization(params['organization'])\n        params['organization'] = org.id\n\n        try:\n            file = open(os.getcwd() + params['content'], 'r')\n            content = file.read()\n        finally:\n            file.close()\n\n        manifest = self._entities.Subscription(self._server)\n\n        try:\n            manifest.upload(\n                data={'organization_id': org.id},\n                files={'content': content}\n            )\n            return True\n        except Exception as e:\n\n            if \"Import is the same as existing data\" in e.message:\n                return False\n            else:\n                self._module.fail_json(msg=\"Manifest import failed with %s\" % to_native(e),\n                                       exception=traceback.format_exc())\n\n    def product(self, params):\n        org = self.find_organization(params['organization'])\n        params['organization'] = org.id\n\n        product = self._entities.Product(self._server, **params)\n        response = product.search()\n\n        if len(response) == 1:\n            product.id = response[0].id\n            product.update()\n        else:\n            product.create()\n\n        return True\n\n    def sync_product(self, params):\n        org = self.find_organization(params['organization'])\n        product = self.find_product(params['name'], org.name)\n\n        return product.sync()\n\n    def repository(self, params):\n        product = self.find_product(params['product'], params['organization'])\n        params['product'] = product.id\n        del params['organization']\n\n        repository = self._entities.Repository(self._server, **params)\n        repository._fields['organization'] = entity_fields.OneToOneField(entities.Organization)\n        repository.organization = product.organization\n        response = repository.search()\n\n        if len(response) == 1:\n            repository.id = response[0].id\n            repository.update()\n        else:\n            repository.create()\n\n        return True\n\n    def sync_repository(self, params):\n        org = self.find_organization(params['organization'])\n        repository = self.find_repository(params['name'], params['product'], org.name)\n\n        return repository.sync()\n\n    def repository_set(self, params):\n        product = self.find_product(params['product'], params['organization'])\n        del params['product']\n        del params['organization']\n\n        if not product:\n            return False\n        else:\n            reposet = self._entities.RepositorySet(self._server, product=product, name=params['name'])\n            reposet = reposet.search()[0]\n\n            formatted_name = [params['name'].replace('(', '').replace(')', '')]\n            formatted_name.append(params['basearch'])\n\n            if 'releasever' in params:\n                formatted_name.append(params['releasever'])\n\n            formatted_name = ' '.join(formatted_name)\n\n            repository = self._entities.Repository(self._server, product=product, name=formatted_name)\n            repository._fields['organization'] = entity_fields.OneToOneField(entities.Organization)\n            repository.organization = product.organization\n            repository = repository.search()\n\n            if len(repository) == 0:\n                if 'releasever' in params:\n                    reposet.enable(data={'basearch': params['basearch'], 'releasever': params['releasever']})\n                else:\n                    reposet.enable(data={'basearch': params['basearch']})\n\n        return True\n\n    def sync_plan(self, params):\n        org = self.find_organization(params['organization'])\n        params['organization'] = org.id\n        params['sync_date'] = datetime.datetime.strptime(params['sync_date'], \"%H:%M\")\n\n        products = params['products']\n        del params['products']\n\n        sync_plan = self._entities.SyncPlan(\n            self._server,\n            name=params['name'],\n            organization=org\n        )\n        response = sync_plan.search()\n\n        sync_plan.sync_date = params['sync_date']\n        sync_plan.interval = params['interval']\n\n        if len(response) == 1:\n            sync_plan.id = response[0].id\n            sync_plan.update()\n        else:\n            response = sync_plan.create()\n            sync_plan.id = response[0].id\n\n        if products:\n            ids = []\n\n            for name in products:\n                product = self.find_product(name, org.name)\n                ids.append(product.id)\n\n            sync_plan.add_products(data={'product_ids': ids})\n\n        return True\n\n    def content_view(self, params):\n        org = self.find_organization(params['organization'])\n\n        content_view = self._entities.ContentView(self._server, name=params['name'], organization=org)\n        response = content_view.search()\n\n        if len(response) == 1:\n            content_view.id = response[0].id\n            content_view.update()\n        else:\n            content_view = content_view.create()\n\n        if params['repositories']:\n            repos = []\n\n            for repository in params['repositories']:\n                repository = self.find_repository(repository['name'], repository['product'], org.name)\n                repos.append(repository)\n\n            content_view.repository = repos\n            content_view.update(['repository'])\n\n    def find_content_view_version(self, name, organization, environment):\n        env = self.find_lifecycle_environment(environment, organization)\n        content_view = self.find_content_view(name, organization)\n\n        content_view_version = self._entities.ContentViewVersion(self._server, content_view=content_view)\n        response = content_view_version.search(['content_view'], {'environment_id': env.id})\n\n        if len(response) == 1:\n            return response[0]\n        else:\n            self._module.fail_json(msg=\"No Content View version found for %s\" % response)\n\n    def publish(self, params):\n        content_view = self.find_content_view(params['name'], params['organization'])\n\n        return content_view.publish()\n\n    def promote(self, params):\n        to_environment = self.find_lifecycle_environment(params['to_environment'], params['organization'])\n        version = self.find_content_view_version(params['name'], params['organization'], params['from_environment'])\n\n        data = {'environment_id': to_environment.id}\n        return version.promote(data=data)\n\n    def lifecycle_environment(self, params):\n        org = self.find_organization(params['organization'])\n        prior_env = self.find_lifecycle_environment(params['prior'], params['organization'])\n\n        lifecycle_env = self._entities.LifecycleEnvironment(self._server, name=params['name'], organization=org, prior=prior_env)\n        response = lifecycle_env.search()\n\n        if len(response) == 1:\n            lifecycle_env.id = response[0].id\n            lifecycle_env.update()\n        else:\n            lifecycle_env.create()\n\n        return True\n\n    def activation_key(self, params):\n        org = self.find_organization(params['organization'])\n\n        activation_key = self._entities.ActivationKey(self._server, name=params['name'], organization=org)\n        response = activation_key.search()\n\n        if len(response) == 1:\n            activation_key.id = response[0].id\n            activation_key.update()\n        else:\n            activation_key.create()\n\n        if params['content_view']:\n            content_view = self.find_content_view(params['content_view'], params['organization'])\n            lifecycle_environment = self.find_lifecycle_environment(params['lifecycle_environment'], params['organization'])\n\n            activation_key.content_view = content_view\n            activation_key.environment = lifecycle_environment\n            activation_key.update()\n\n        return True\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            server_url=dict(type='str', required=True),\n            username=dict(type='str', required=True, no_log=True),\n            password=dict(type='str', required=True, no_log=True),\n            entity=dict(type='str', required=True),\n            action=dict(type='str'),\n            verify_ssl=dict(type='bool', default=False),\n            params=dict(type='dict', required=True, no_log=True),\n        ),\n        supports_check_mode=True,\n    )\n\n    if not HAS_NAILGUN_PACKAGE:\n        module.fail_json(msg=\"Missing required nailgun module (check docs or install with: pip install nailgun\")\n\n    server_url = module.params['server_url']\n    username = module.params['username']\n    password = module.params['password']\n    entity = module.params['entity']\n    action = module.params['action']\n    params = module.params['params']\n    verify_ssl = module.params['verify_ssl']\n\n    server = ServerConfig(\n        url=server_url,\n        auth=(username, password),\n        verify=verify_ssl\n    )\n    ng = NailGun(server, entities, module)\n\n    # Lets make an connection to the server with username and password\n    try:\n        org = entities.Organization(server)\n        org.search()\n    except Exception as e:\n        module.fail_json(msg=\"Failed to connect to Foreman server: %s \" % e)\n\n    result = False\n\n    if entity == 'product':\n        if action == 'sync':\n            result = ng.sync_product(params)\n        else:\n            result = ng.product(params)\n    elif entity == 'repository':\n        if action == 'sync':\n            result = ng.sync_repository(params)\n        else:\n            result = ng.repository(params)\n    elif entity == 'manifest':\n        result = ng.manifest(params)\n    elif entity == 'repository_set':\n        result = ng.repository_set(params)\n    elif entity == 'sync_plan':\n        result = ng.sync_plan(params)\n    elif entity == 'content_view':\n        if action == 'publish':\n            result = ng.publish(params)\n        elif action == 'promote':\n            result = ng.promote(params)\n        else:\n            result = ng.content_view(params)\n    elif entity == 'lifecycle_environment':\n        result = ng.lifecycle_environment(params)\n    elif entity == 'activation_key':\n        result = ng.activation_key(params)\n    else:\n        module.fail_json(changed=False, result=\"Unsupported entity supplied\")\n\n    module.exit_json(changed=result, result=\"%s updated\" % entity)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "katello.py", "id": "d8099c37e36fb849f9bf7772ba80bdcf", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/foreman/katello.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}