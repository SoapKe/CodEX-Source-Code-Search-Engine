{"author": "django", "code": "from django.db.models.aggregates import Sum\nfrom django.db.models.expressions import F\nfrom django.test import TestCase\n\nfrom .models import Company, Employee\n\n\nclass ValuesExpressionsTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        Company.objects.create(\n            name='Example Inc.', num_employees=2300, num_chairs=5,\n            ceo=Employee.objects.create(firstname='Joe', lastname='Smith', salary=10)\n        )\n        Company.objects.create(\n            name='Foobar Ltd.', num_employees=3, num_chairs=4,\n            ceo=Employee.objects.create(firstname='Frank', lastname='Meyer', salary=20)\n        )\n        Company.objects.create(\n            name='Test GmbH', num_employees=32, num_chairs=1,\n            ceo=Employee.objects.create(firstname='Max', lastname='Mustermann', salary=30)\n        )\n\n    def test_values_expression(self):\n        self.assertSequenceEqual(\n            Company.objects.values(salary=F('ceo__salary')),\n            [{'salary': 10}, {'salary': 20}, {'salary': 30}],\n        )\n\n    def test_values_expression_group_by(self):\n        # values() applies annotate() first, so values selected are grouped by\n        \n        Employee.objects.create(firstname='Joe', lastname='Jones', salary=2)\n        joes = Employee.objects.filter(firstname='Joe')\n        self.assertSequenceEqual(\n            joes.values('firstname', sum_salary=Sum('salary')).order_by('sum_salary'),\n            [{'firstname': 'Joe', 'sum_salary': 2}, {'firstname': 'Joe', 'sum_salary': 10}],\n        )\n        self.assertSequenceEqual(\n            joes.values('firstname').annotate(sum_salary=Sum('salary')),\n            [{'firstname': 'Joe', 'sum_salary': 12}]\n        )\n\n    def test_chained_values_with_expression(self):\n        Employee.objects.create(firstname='Joe', lastname='Jones', salary=2)\n        joes = Employee.objects.filter(firstname='Joe').values('firstname')\n        self.assertSequenceEqual(\n            joes.values('firstname', sum_salary=Sum('salary')),\n            [{'firstname': 'Joe', 'sum_salary': 12}]\n        )\n        self.assertSequenceEqual(\n            joes.values(sum_salary=Sum('salary')),\n            [{'sum_salary': 12}]\n        )\n\n    def test_values_list_expression(self):\n        companies = Company.objects.values_list('name', F('ceo__salary'))\n        self.assertSequenceEqual(companies, [('Example Inc.', 10), ('Foobar Ltd.', 20), ('Test GmbH', 30)])\n\n    def test_values_list_expression_flat(self):\n        companies = Company.objects.values_list(F('ceo__salary'), flat=True)\n        self.assertSequenceEqual(companies, (10, 20, 30))\n", "comments": "  values() applies annotate() first  values selected grouped    id  firstname  ", "content": "from django.db.models.aggregates import Sum\nfrom django.db.models.expressions import F\nfrom django.test import TestCase\n\nfrom .models import Company, Employee\n\n\nclass ValuesExpressionsTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        Company.objects.create(\n            name='Example Inc.', num_employees=2300, num_chairs=5,\n            ceo=Employee.objects.create(firstname='Joe', lastname='Smith', salary=10)\n        )\n        Company.objects.create(\n            name='Foobar Ltd.', num_employees=3, num_chairs=4,\n            ceo=Employee.objects.create(firstname='Frank', lastname='Meyer', salary=20)\n        )\n        Company.objects.create(\n            name='Test GmbH', num_employees=32, num_chairs=1,\n            ceo=Employee.objects.create(firstname='Max', lastname='Mustermann', salary=30)\n        )\n\n    def test_values_expression(self):\n        self.assertSequenceEqual(\n            Company.objects.values(salary=F('ceo__salary')),\n            [{'salary': 10}, {'salary': 20}, {'salary': 30}],\n        )\n\n    def test_values_expression_group_by(self):\n        # values() applies annotate() first, so values selected are grouped by\n        # id, not firstname.\n        Employee.objects.create(firstname='Joe', lastname='Jones', salary=2)\n        joes = Employee.objects.filter(firstname='Joe')\n        self.assertSequenceEqual(\n            joes.values('firstname', sum_salary=Sum('salary')).order_by('sum_salary'),\n            [{'firstname': 'Joe', 'sum_salary': 2}, {'firstname': 'Joe', 'sum_salary': 10}],\n        )\n        self.assertSequenceEqual(\n            joes.values('firstname').annotate(sum_salary=Sum('salary')),\n            [{'firstname': 'Joe', 'sum_salary': 12}]\n        )\n\n    def test_chained_values_with_expression(self):\n        Employee.objects.create(firstname='Joe', lastname='Jones', salary=2)\n        joes = Employee.objects.filter(firstname='Joe').values('firstname')\n        self.assertSequenceEqual(\n            joes.values('firstname', sum_salary=Sum('salary')),\n            [{'firstname': 'Joe', 'sum_salary': 12}]\n        )\n        self.assertSequenceEqual(\n            joes.values(sum_salary=Sum('salary')),\n            [{'sum_salary': 12}]\n        )\n\n    def test_values_list_expression(self):\n        companies = Company.objects.values_list('name', F('ceo__salary'))\n        self.assertSequenceEqual(companies, [('Example Inc.', 10), ('Foobar Ltd.', 20), ('Test GmbH', 30)])\n\n    def test_values_list_expression_flat(self):\n        companies = Company.objects.values_list(F('ceo__salary'), flat=True)\n        self.assertSequenceEqual(companies, (10, 20, 30))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_queryset_values.py", "id": "ce9d0a56c228460f0addf1ec336bae83", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/expressions/test_queryset_values.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}