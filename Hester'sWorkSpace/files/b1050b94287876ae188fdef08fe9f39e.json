{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n\nimport tensorflow as tf\n\nfrom official.wide_deep import wide_deep\n\ntf.logging.set_verbosity(tf.logging.ERROR)\n\nTEST_INPUT = ('18,Self-emp-not-inc,987,Bachelors,12,Married-civ-spouse,abc,'\n    'Husband,zyx,wvu,34,56,78,tsr,<=50K')\n\nTEST_INPUT_VALUES = {\n    'age': 18,\n    'education_num': 12,\n    'capital_gain': 34,\n    'capital_loss': 56,\n    'hours_per_week': 78,\n    'education': 'Bachelors',\n    'marital_status': 'Married-civ-spouse',\n    'relationship': 'Husband',\n    'workclass': 'Self-emp-not-inc',\n    'occupation': 'abc',\n}\n\nTEST_CSV = os.path.join(os.path.dirname(__file__), 'wide_deep_test.csv')\n\n\nclass BaseTest(tf.test.TestCase):\n\n  def setUp(self):\n     Create temporary CSV file\n    self.temp_dir = self.get_temp_dir()\n    self.input_csv = os.path.join(self.temp_dir, 'test.csv')\n    with tf.gfile.Open(self.input_csv, 'w') as temp_csv:\n      temp_csv.write(TEST_INPUT)\n\n  def test_input_fn(self):\n    dataset = wide_deep.input_fn(self.input_csv, 1, False, 1)\n    features, labels = dataset.make_one_shot_iterator().get_next()\n\n    with tf.Session() as sess:\n      features, labels = sess.run((features, labels))\n\n       Compare the two features dictionaries.\n      for key in TEST_INPUT_VALUES:\n        self.assertTrue(key in features)\n        self.assertEqual(len(features[key]), 1)\n        feature_value = features[key][0]\n\n         Convert from bytes to string for Python 3.\n        if isinstance(feature_value, bytes):\n          feature_value = feature_value.decode()\n\n        self.assertEqual(TEST_INPUT_VALUES[key], feature_value)\n\n      self.assertFalse(labels)\n\n  def build_and_test_estimator(self, model_type):\n    \n    model = wide_deep.build_estimator(self.temp_dir, model_type)\n\n     Train for 1 step to initialize model and evaluate initial loss\n    model.train(\n        input_fn=lambda: wide_deep.input_fn(\n            TEST_CSV, num_epochs=1, shuffle=True, batch_size=1),\n        steps=1)\n    initial_results = model.evaluate(\n        input_fn=lambda: wide_deep.input_fn(\n            TEST_CSV, num_epochs=1, shuffle=False, batch_size=1))\n\n     Train for 100 epochs at batch size 3 and evaluate final loss\n    model.train(\n        input_fn=lambda: wide_deep.input_fn(\n            TEST_CSV, num_epochs=100, shuffle=True, batch_size=3))\n    final_results = model.evaluate(\n        input_fn=lambda: wide_deep.input_fn(\n            TEST_CSV, num_epochs=1, shuffle=False, batch_size=1))\n\n    print('%s initial results:' % model_type, initial_results)\n    print('%s final results:' % model_type, final_results)\n\n     Ensure loss has decreased, while accuracy and both AUCs have increased.\n    self.assertLess(final_results['loss'], initial_results['loss'])\n    self.assertGreater(final_results['auc'], initial_results['auc'])\n    self.assertGreater(final_results['auc_precision_recall'],\n                       initial_results['auc_precision_recall'])\n    self.assertGreater(final_results['accuracy'], initial_results['accuracy'])\n\n  def test_wide_deep_estimator_training(self):\n    self.build_and_test_estimator('wide_deep')\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   ensure model trains minimizes loss        copyright 2017 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       create temporary csv file    compare two features dictionaries     convert bytes string python 3     train 1 step initialize model evaluate initial loss    train 100 epochs batch size 3 evaluate final loss    ensure loss decreased  accuracy aucs increased  ", "content": "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n\nimport tensorflow as tf\n\nfrom official.wide_deep import wide_deep\n\ntf.logging.set_verbosity(tf.logging.ERROR)\n\nTEST_INPUT = ('18,Self-emp-not-inc,987,Bachelors,12,Married-civ-spouse,abc,'\n    'Husband,zyx,wvu,34,56,78,tsr,<=50K')\n\nTEST_INPUT_VALUES = {\n    'age': 18,\n    'education_num': 12,\n    'capital_gain': 34,\n    'capital_loss': 56,\n    'hours_per_week': 78,\n    'education': 'Bachelors',\n    'marital_status': 'Married-civ-spouse',\n    'relationship': 'Husband',\n    'workclass': 'Self-emp-not-inc',\n    'occupation': 'abc',\n}\n\nTEST_CSV = os.path.join(os.path.dirname(__file__), 'wide_deep_test.csv')\n\n\nclass BaseTest(tf.test.TestCase):\n\n  def setUp(self):\n    # Create temporary CSV file\n    self.temp_dir = self.get_temp_dir()\n    self.input_csv = os.path.join(self.temp_dir, 'test.csv')\n    with tf.gfile.Open(self.input_csv, 'w') as temp_csv:\n      temp_csv.write(TEST_INPUT)\n\n  def test_input_fn(self):\n    dataset = wide_deep.input_fn(self.input_csv, 1, False, 1)\n    features, labels = dataset.make_one_shot_iterator().get_next()\n\n    with tf.Session() as sess:\n      features, labels = sess.run((features, labels))\n\n      # Compare the two features dictionaries.\n      for key in TEST_INPUT_VALUES:\n        self.assertTrue(key in features)\n        self.assertEqual(len(features[key]), 1)\n        feature_value = features[key][0]\n\n        # Convert from bytes to string for Python 3.\n        if isinstance(feature_value, bytes):\n          feature_value = feature_value.decode()\n\n        self.assertEqual(TEST_INPUT_VALUES[key], feature_value)\n\n      self.assertFalse(labels)\n\n  def build_and_test_estimator(self, model_type):\n    \"\"\"Ensure that model trains and minimizes loss.\"\"\"\n    model = wide_deep.build_estimator(self.temp_dir, model_type)\n\n    # Train for 1 step to initialize model and evaluate initial loss\n    model.train(\n        input_fn=lambda: wide_deep.input_fn(\n            TEST_CSV, num_epochs=1, shuffle=True, batch_size=1),\n        steps=1)\n    initial_results = model.evaluate(\n        input_fn=lambda: wide_deep.input_fn(\n            TEST_CSV, num_epochs=1, shuffle=False, batch_size=1))\n\n    # Train for 100 epochs at batch size 3 and evaluate final loss\n    model.train(\n        input_fn=lambda: wide_deep.input_fn(\n            TEST_CSV, num_epochs=100, shuffle=True, batch_size=3))\n    final_results = model.evaluate(\n        input_fn=lambda: wide_deep.input_fn(\n            TEST_CSV, num_epochs=1, shuffle=False, batch_size=1))\n\n    print('%s initial results:' % model_type, initial_results)\n    print('%s final results:' % model_type, final_results)\n\n    # Ensure loss has decreased, while accuracy and both AUCs have increased.\n    self.assertLess(final_results['loss'], initial_results['loss'])\n    self.assertGreater(final_results['auc'], initial_results['auc'])\n    self.assertGreater(final_results['auc_precision_recall'],\n                       initial_results['auc_precision_recall'])\n    self.assertGreater(final_results['accuracy'], initial_results['accuracy'])\n\n  def test_wide_deep_estimator_training(self):\n    self.build_and_test_estimator('wide_deep')\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "wide_deep_test.py", "id": "b1050b94287876ae188fdef08fe9f39e", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/official/wide_deep/wide_deep_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}