{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    int_or_none,\n)\n\n\nclass TVCIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tvc\\.ru/video/iframe/id/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.tvc.ru/video/iframe/id/74622/isPlay/false/id_stat/channel/?acc_video_id=/channel/brand/id/17/show/episodes/episode_id/39702',\n        'md5': 'bbc5ff531d1e90e856f60fc4b3afd708',\n        'info_dict': {\n            'id': '74622',\n            'ext': 'mp4',\n            'title': '\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \"\u0421\u043e\u0431\u044b\u0442\u0438\u044f\". \u042d\u0444\u0438\u0440 \u043e\u0442 22.05.2015 14:30',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1122,\n        },\n    }\n\n    @classmethod\n    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:http:)?//(?:www\\.)?tvc\\.ru/video/iframe/id/[^\"]+)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://www.tvc.ru/video/json/id/%s' % video_id, video_id)\n\n        formats = []\n        for info in video.get('path', {}).get('quality', []):\n            video_url = info.get('url')\n            if not video_url:\n                continue\n            format_id = self._search_regex(\n                r'cdnvideo/([^/]+?)(?:-[^/]+?)?/', video_url,\n                'format id', default=None)\n            formats.append({\n                'url': video_url,\n                'format_id': format_id,\n                'width': int_or_none(info.get('width')),\n                'height': int_or_none(info.get('height')),\n                'tbr': int_or_none(info.get('bitrate')),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video['title'],\n            'thumbnail': video.get('picture'),\n            'duration': int_or_none(video.get('duration')),\n            'formats': formats,\n        }\n\n\nclass TVCArticleIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tvc\\.ru/(?!video/iframe/id/)(?P<id>[^?\n    _TESTS = [{\n        'url': 'http://www.tvc.ru/channel/brand/id/29/show/episodes/episode_id/39702/',\n        'info_dict': {\n            'id': '74622',\n            'ext': 'mp4',\n            'title': '\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \"\u0421\u043e\u0431\u044b\u0442\u0438\u044f\". \u042d\u0444\u0438\u0440 \u043e\u0442 22.05.2015 14:30',\n            'description': 'md5:ad7aa7db22903f983e687b8a3e98c6dd',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1122,\n        },\n    }, {\n        'url': 'http://www.tvc.ru/news/show/id/69944',\n        'info_dict': {\n            'id': '75399',\n            'ext': 'mp4',\n            'title': '\u042d\u043a\u0441\u043f\u0435\u0440\u0442\u044b: \u0432 \u0441\u0442\u043e\u043b\u0438\u0446\u0435 \u0432\u0441\u0442\u0430\u043b \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u0445',\n            'description': 'md5:f2098f71e21f309e89f69b525fd9846e',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 278,\n        },\n    }, {\n        'url': 'http://www.tvc.ru/channel/brand/id/47/show/episodes\n        'info_dict': {\n            'id': '2185',\n            'ext': 'mp4',\n            'title': '\u0415\u0449\u0451 \u043d\u0435 \u043f\u043e\u0437\u0434\u043d\u043e. \u042d\u0444\u0438\u0440 \u043e\u0442 03.08.2013',\n            'description': 'md5:51fae9f3f8cfe67abce014e428e5b027',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 3316,\n        },\n    }]\n\n    def _real_extract(self, url):\n        webpage = self._download_webpage(url, self._match_id(url))\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'TVC',\n            'url': self._og_search_video_url(webpage),\n            'title': clean_html(self._og_search_title(webpage)),\n            'description': clean_html(self._og_search_description(webpage)),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "comments": "# coding: utf-8\n#]+)'\n#',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    int_or_none,\n)\n\n\nclass TVCIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tvc\\.ru/video/iframe/id/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.tvc.ru/video/iframe/id/74622/isPlay/false/id_stat/channel/?acc_video_id=/channel/brand/id/17/show/episodes/episode_id/39702',\n        'md5': 'bbc5ff531d1e90e856f60fc4b3afd708',\n        'info_dict': {\n            'id': '74622',\n            'ext': 'mp4',\n            'title': '\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \"\u0421\u043e\u0431\u044b\u0442\u0438\u044f\". \u042d\u0444\u0438\u0440 \u043e\u0442 22.05.2015 14:30',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1122,\n        },\n    }\n\n    @classmethod\n    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:http:)?//(?:www\\.)?tvc\\.ru/video/iframe/id/[^\"]+)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://www.tvc.ru/video/json/id/%s' % video_id, video_id)\n\n        formats = []\n        for info in video.get('path', {}).get('quality', []):\n            video_url = info.get('url')\n            if not video_url:\n                continue\n            format_id = self._search_regex(\n                r'cdnvideo/([^/]+?)(?:-[^/]+?)?/', video_url,\n                'format id', default=None)\n            formats.append({\n                'url': video_url,\n                'format_id': format_id,\n                'width': int_or_none(info.get('width')),\n                'height': int_or_none(info.get('height')),\n                'tbr': int_or_none(info.get('bitrate')),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video['title'],\n            'thumbnail': video.get('picture'),\n            'duration': int_or_none(video.get('duration')),\n            'formats': formats,\n        }\n\n\nclass TVCArticleIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tvc\\.ru/(?!video/iframe/id/)(?P<id>[^?#]+)'\n    _TESTS = [{\n        'url': 'http://www.tvc.ru/channel/brand/id/29/show/episodes/episode_id/39702/',\n        'info_dict': {\n            'id': '74622',\n            'ext': 'mp4',\n            'title': '\u0421\u043e\u0431\u044b\u0442\u0438\u044f. \"\u0421\u043e\u0431\u044b\u0442\u0438\u044f\". \u042d\u0444\u0438\u0440 \u043e\u0442 22.05.2015 14:30',\n            'description': 'md5:ad7aa7db22903f983e687b8a3e98c6dd',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1122,\n        },\n    }, {\n        'url': 'http://www.tvc.ru/news/show/id/69944',\n        'info_dict': {\n            'id': '75399',\n            'ext': 'mp4',\n            'title': '\u042d\u043a\u0441\u043f\u0435\u0440\u0442\u044b: \u0432 \u0441\u0442\u043e\u043b\u0438\u0446\u0435 \u0432\u0441\u0442\u0430\u043b \u0432\u043e\u043f\u0440\u043e\u0441 \u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u0445',\n            'description': 'md5:f2098f71e21f309e89f69b525fd9846e',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 278,\n        },\n    }, {\n        'url': 'http://www.tvc.ru/channel/brand/id/47/show/episodes#',\n        'info_dict': {\n            'id': '2185',\n            'ext': 'mp4',\n            'title': '\u0415\u0449\u0451 \u043d\u0435 \u043f\u043e\u0437\u0434\u043d\u043e. \u042d\u0444\u0438\u0440 \u043e\u0442 03.08.2013',\n            'description': 'md5:51fae9f3f8cfe67abce014e428e5b027',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 3316,\n        },\n    }]\n\n    def _real_extract(self, url):\n        webpage = self._download_webpage(url, self._match_id(url))\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'TVC',\n            'url': self._og_search_video_url(webpage),\n            'title': clean_html(self._og_search_title(webpage)),\n            'description': clean_html(self._og_search_description(webpage)),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tvc.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tvc.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}