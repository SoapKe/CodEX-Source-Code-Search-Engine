{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom dateutil import relativedelta\nfrom odoo import fields, models, api\n\n\nclass LeadTest(models.Model):\n    _name = \"base.automation.lead.test\"\n    _description = \"Action Rule Test\"\n\n    name = fields.Char(string='Subject', required=True, index=True)\n    user_id = fields.Many2one('res.users', string='Responsible')\n    state = fields.Selection([('draft', 'New'), ('cancel', 'Cancelled'), ('open', 'In Progress'),\n                              ('pending', 'Pending'), ('done', 'Closed')],\n                             string=\"Status\", readonly=True, default='draft')\n    active = fields.Boolean(default=True)\n    partner_id = fields.Many2one('res.partner', string='Partner')\n    date_action_last = fields.Datetime(string='Last Action', readonly=True)\n    customer = fields.Boolean(related='partner_id.customer', readonly=True, store=True)\n    line_ids = fields.One2many('base.automation.line.test', 'lead_id')\n\n    priority = fields.Boolean()\n    deadline = fields.Boolean(compute='_compute_deadline', store=True)\n    is_assigned_to_admin = fields.Boolean(string='Assigned to admin user')\n\n    @api.depends('priority')\n    def _compute_deadline(self):\n        for record in self:\n            if not record.priority:\n                record.deadline = False\n            else:\n                record.deadline = fields.Datetime.from_string(record.create_date) + relativedelta.relativedelta(days=3)\n\nclass LineTest(models.Model):\n    _name = \"base.automation.line.test\"\n    _description = \"Action Rule Line Test\"\n\n    name = fields.Char()\n    lead_id = fields.Many2one('base.automation.lead.test', ondelete='cascade')\n    user_id = fields.Many2one('res.users')\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom dateutil import relativedelta\nfrom odoo import fields, models, api\n\n\nclass LeadTest(models.Model):\n    _name = \"base.automation.lead.test\"\n    _description = \"Action Rule Test\"\n\n    name = fields.Char(string='Subject', required=True, index=True)\n    user_id = fields.Many2one('res.users', string='Responsible')\n    state = fields.Selection([('draft', 'New'), ('cancel', 'Cancelled'), ('open', 'In Progress'),\n                              ('pending', 'Pending'), ('done', 'Closed')],\n                             string=\"Status\", readonly=True, default='draft')\n    active = fields.Boolean(default=True)\n    partner_id = fields.Many2one('res.partner', string='Partner')\n    date_action_last = fields.Datetime(string='Last Action', readonly=True)\n    customer = fields.Boolean(related='partner_id.customer', readonly=True, store=True)\n    line_ids = fields.One2many('base.automation.line.test', 'lead_id')\n\n    priority = fields.Boolean()\n    deadline = fields.Boolean(compute='_compute_deadline', store=True)\n    is_assigned_to_admin = fields.Boolean(string='Assigned to admin user')\n\n    @api.depends('priority')\n    def _compute_deadline(self):\n        for record in self:\n            if not record.priority:\n                record.deadline = False\n            else:\n                record.deadline = fields.Datetime.from_string(record.create_date) + relativedelta.relativedelta(days=3)\n\nclass LineTest(models.Model):\n    _name = \"base.automation.line.test\"\n    _description = \"Action Rule Line Test\"\n\n    name = fields.Char()\n    lead_id = fields.Many2one('base.automation.lead.test', ondelete='cascade')\n    user_id = fields.Many2one('res.users')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_models.py", "id": "435be78b0879c1561ea8b46979f06c97", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/base_automation/tests/test_models.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}