{"author": "samuelclay", "code": "\"\"\"Operations for images through the PIL.\"\"\"\n\nfrom PIL import Image\nfrom PIL import ImageOps as PILOps\nfrom PIL.ExifTags import TAGS\nfrom StringIO import StringIO\nfrom vendor import reseekfile\n\nPROFILE_PICTURE_SIZES = {\n    'fullsize': (256, 256),\n    'thumbnail': (64, 64)\n}\n\nclass ImageOps:\n    \"\"\"Module that holds all image operations. Since there's no state, \n    everything is a classmethod.\"\"\"\n    \n    @classmethod\n    def resize_image(cls, image_body, size, fit_to_size=False):\n        \"\"\"Takes a raw image (in image_body) and resizes it to fit given\n        dimensions. Returns a  file-like object in the form of a StringIO. \n        This must happen in this function because PIL is transforming the \n        original as it works.\"\"\"\n        \n        image_file = StringIO(image_body)\n        try:\n            image = Image.open(image_file)\n        except IOError:\n            \n            return False\n                        \n        \n        format = image.format\n        \n        \n        image = cls.adjust_image_orientation(image)\n        \n        if not fit_to_size:\n            image.thumbnail(PROFILE_PICTURE_SIZES[size], Image.ANTIALIAS)\n        else:\n            image = PILOps.fit(image, PROFILE_PICTURE_SIZES[size], \n                               method=Image.ANTIALIAS, \n                               centering=(0.5, 0.5))\n        \n        output = StringIO()\n        if format.lower() == 'jpg':\n            format = 'jpeg'\n        image.save(output, format=format, quality=95)\n        \n        return output\n    \n    @classmethod\n    def adjust_image_orientation(cls, image):\n        \"\"\"Since the iPhone will store an image on its side but with EXIF\n        data stating that it should be rotated, we need to find that\n        EXIF data and correctly rotate the image before storage.\"\"\"\n        \n        if hasattr(image, '_getexif'):\n            exif = image._getexif()\n            if exif:\n                for tag, value in exif.items():\n                    decoded = TAGS.get(tag, tag)\n                    if decoded == 'Orientation':\n                        if value == 6:\n                            image = image.rotate(-90)\n                        if value == 8:\n                            image = image.rotate(90)\n                        if value == 3:\n                            image = image.rotate(180)\n                        break\n        return image\n    \n    @classmethod\n    def image_size(cls, datastream):\n        datastream = reseekfile.ReseekFile(datastream)\n        image = Image.open(datastream)\n        return image.size\n", "comments": "   operations images pil      pil import image pil import imageops pilops pil exiftags import tags stringio import stringio vendor import reseekfile  profile picture sizes          fullsize   (256  256)       thumbnail   (64  64)    class imageops         module holds image operations  since state       everything classmethod               classmethod     def resize image(cls  image body  size  fit size false)             takes raw image (in image body) resizes fit given         dimensions  returns  file like object form stringio           this must happen function pil transforming          original works                      image file   stringio(image body)         try              image   image open(image file)         except ioerror                invalid image file             return false                                    get image format early  lose perform  thumbnail   fit           format   image format                    check rotation         image   cls adjust image orientation(image)                  fit size              image thumbnail(profile picture sizes size   image antialias)         else              image   pilops fit(image  profile picture sizes size                                   method image antialias                                  centering (0 5  0 5))                  output   stringio()         format lower()     jpg               format    jpeg          image save(output  format format  quality 95)                  return output           classmethod     def adjust image orientation(cls  image)             since iphone store image side exif         data stating rotated  need find         exif data correctly rotate image storage        invalid image file    get image format early  lose perform  thumbnail   fit      check rotation ", "content": "\"\"\"Operations for images through the PIL.\"\"\"\n\nfrom PIL import Image\nfrom PIL import ImageOps as PILOps\nfrom PIL.ExifTags import TAGS\nfrom StringIO import StringIO\nfrom vendor import reseekfile\n\nPROFILE_PICTURE_SIZES = {\n    'fullsize': (256, 256),\n    'thumbnail': (64, 64)\n}\n\nclass ImageOps:\n    \"\"\"Module that holds all image operations. Since there's no state, \n    everything is a classmethod.\"\"\"\n    \n    @classmethod\n    def resize_image(cls, image_body, size, fit_to_size=False):\n        \"\"\"Takes a raw image (in image_body) and resizes it to fit given\n        dimensions. Returns a  file-like object in the form of a StringIO. \n        This must happen in this function because PIL is transforming the \n        original as it works.\"\"\"\n        \n        image_file = StringIO(image_body)\n        try:\n            image = Image.open(image_file)\n        except IOError:\n            # Invalid image file\n            return False\n                        \n        # Get the image format early, as we lose it after perform a `thumbnail` or `fit`.\n        format = image.format\n        \n        # Check for rotation\n        image = cls.adjust_image_orientation(image)\n        \n        if not fit_to_size:\n            image.thumbnail(PROFILE_PICTURE_SIZES[size], Image.ANTIALIAS)\n        else:\n            image = PILOps.fit(image, PROFILE_PICTURE_SIZES[size], \n                               method=Image.ANTIALIAS, \n                               centering=(0.5, 0.5))\n        \n        output = StringIO()\n        if format.lower() == 'jpg':\n            format = 'jpeg'\n        image.save(output, format=format, quality=95)\n        \n        return output\n    \n    @classmethod\n    def adjust_image_orientation(cls, image):\n        \"\"\"Since the iPhone will store an image on its side but with EXIF\n        data stating that it should be rotated, we need to find that\n        EXIF data and correctly rotate the image before storage.\"\"\"\n        \n        if hasattr(image, '_getexif'):\n            exif = image._getexif()\n            if exif:\n                for tag, value in exif.items():\n                    decoded = TAGS.get(tag, tag)\n                    if decoded == 'Orientation':\n                        if value == 6:\n                            image = image.rotate(-90)\n                        if value == 8:\n                            image = image.rotate(90)\n                        if value == 3:\n                            image = image.rotate(180)\n                        break\n        return image\n    \n    @classmethod\n    def image_size(cls, datastream):\n        datastream = reseekfile.ReseekFile(datastream)\n        image = Image.open(datastream)\n        return image.size\n", "description": "NewsBlur is a personal news reader that brings people together to talk about the world. A new sound of an old instrument.", "file_name": "image_functions.py", "id": "ee51167953aaea951dae1bb1fa27bd0f", "language": "Python", "project_name": "NewsBlur", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/samuelclay-NewsBlur/samuelclay-NewsBlur-60aa891/utils/image_functions.py", "save_time": "", "source": "", "update_at": "2018-03-17T20:48:37Z", "url": "https://github.com/samuelclay/NewsBlur", "wiki": false}