{"author": "mopidy", "code": "from __future__ import absolute_import, unicode_literals\n\nimport json\nimport unittest\n\nfrom mopidy.models import (\n    Album, Artist, Image, ModelJSONEncoder, Playlist,\n    Ref, SearchResult, TlTrack, Track, model_json_decoder)\n\n\nclass InheritanceTest(unittest.TestCase):\n\n    def test_weakref_and_slots_play_nice_in_subclass(self):\n        \n        \n        \n\n        class Foo(Track):\n            pass\n\n    def test_sub_class_can_have_its_own_slots(self):\n        \n\n        class Foo(Track):\n            __slots__ = ('_foo',)\n\n        f = Foo()\n        f._foo = 123\n\n    def test_sub_class_can_be_initialized(self):\n        \n        #   TypeError: __init__() got an unexpected keyword argument \"type\"\n        \n        \n\n        class Foo(Ref):\n            pass\n\n        Foo.directory()\n\n\nclass CachingTest(unittest.TestCase):\n\n    def test_same_instance(self):\n        self.assertIs(Track(), Track())\n\n    def test_same_instance_with_values(self):\n        self.assertIs(Track(uri='test'), Track(uri='test'))\n\n    def test_different_instance_with_different_values(self):\n        self.assertIsNot(Track(uri='test1'), Track(uri='test2'))\n\n    def test_different_instance_with_replace(self):\n        t = Track(uri='test1')\n        self.assertIsNot(t, t.replace(uri='test2'))\n\n\nclass GenericReplaceTest(unittest.TestCase):\n\n    def compare(self, orig, other):\n        self.assertEqual(orig, other)\n        self.assertEqual(id(orig), id(other))\n\n    def test_replace_track(self):\n        track = Track()\n        self.compare(track, track.replace())\n\n    def test_replace_artist(self):\n        artist = Artist()\n        self.compare(artist, artist.replace())\n\n    def test_replace_album(self):\n        album = Album()\n        self.compare(album, album.replace())\n\n    def test_replace_playlist(self):\n        playlist = Playlist()\n        self.compare(playlist, playlist.replace())\n\n    def test_replace_track_with_basic_values(self):\n        track = Track(name='foo', uri='bar')\n        other = track.replace(name='baz')\n        self.assertEqual('baz', other.name)\n        self.assertEqual('bar', other.uri)\n\n    def test_replace_track_with_missing_values(self):\n        track = Track(uri='bar')\n        other = track.replace(name='baz')\n        self.assertEqual('baz', other.name)\n        self.assertEqual('bar', other.uri)\n\n    def test_replace_track_with_private_internal_value(self):\n        artist1 = Artist(name='foo')\n        artist2 = Artist(name='bar')\n        track = Track(artists=[artist1])\n        other = track.replace(artists=[artist2])\n        self.assertIn(artist2, other.artists)\n\n    def test_replace_track_with_invalid_key(self):\n        with self.assertRaises(TypeError):\n            Track().replace(invalid_key=True)\n\n    def test_replace_track_to_remove(self):\n        track = Track(name='foo').replace(name=None)\n        self.assertFalse(hasattr(track, '_name'))\n\n\nclass RefTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        ref = Ref(uri=uri)\n        self.assertEqual(ref.uri, uri)\n        with self.assertRaises(AttributeError):\n            ref.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        ref = Ref(name=name)\n        self.assertEqual(ref.name, name)\n        with self.assertRaises(AttributeError):\n            ref.name = None\n\n    ?\n    def test_del_name(self):\n        ref = Ref(name='foo')\n        with self.assertRaises(AttributeError):\n            del ref.name\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Ref(foo='baz')\n\n    def test_repr_without_results(self):\n        self.assertEqual(\n            \"Ref(name=u'foo', type='artist', uri='uri')\",\n            repr(Ref(uri='uri', name='foo', type='artist')))\n\n    def test_serialize_without_results(self):\n        self.assertDictEqual(\n            {'__model__': 'Ref', 'uri': 'uri'},\n            Ref(uri='uri').serialize())\n\n    def test_to_json_and_back(self):\n        ref1 = Ref(uri='uri')\n        serialized = json.dumps(ref1, cls=ModelJSONEncoder)\n        ref2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(ref1, ref2)\n\n    def test_type_constants(self):\n        self.assertEqual(Ref.ALBUM, 'album')\n        self.assertEqual(Ref.ARTIST, 'artist')\n        self.assertEqual(Ref.DIRECTORY, 'directory')\n        self.assertEqual(Ref.PLAYLIST, 'playlist')\n        self.assertEqual(Ref.TRACK, 'track')\n\n    def test_album_constructor(self):\n        ref = Ref.album(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.ALBUM)\n\n    def test_artist_constructor(self):\n        ref = Ref.artist(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.ARTIST)\n\n    def test_directory_constructor(self):\n        ref = Ref.directory(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.DIRECTORY)\n\n    def test_playlist_constructor(self):\n        ref = Ref.playlist(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.PLAYLIST)\n\n    def test_track_constructor(self):\n        ref = Ref.track(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.TRACK)\n\n\nclass ImageTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        image = Image(uri=uri)\n        self.assertEqual(image.uri, uri)\n        with self.assertRaises(AttributeError):\n            image.uri = None\n\n    def test_width(self):\n        image = Image(width=100)\n        self.assertEqual(image.width, 100)\n        with self.assertRaises(AttributeError):\n            image.width = None\n\n    def test_height(self):\n        image = Image(height=100)\n        self.assertEqual(image.height, 100)\n        with self.assertRaises(AttributeError):\n            image.height = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Image(foo='baz')\n\n\nclass ArtistTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        artist = Artist(uri=uri)\n        self.assertEqual(artist.uri, uri)\n        with self.assertRaises(AttributeError):\n            artist.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        artist = Artist(name=name)\n        self.assertEqual(artist.name, name)\n        with self.assertRaises(AttributeError):\n            artist.name = None\n\n    def test_musicbrainz_id(self):\n        mb_id = 'mb-id'\n        artist = Artist(musicbrainz_id=mb_id)\n        self.assertEqual(artist.musicbrainz_id, mb_id)\n        with self.assertRaises(AttributeError):\n            artist.musicbrainz_id = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Artist(foo='baz')\n\n    def test_invalid_kwarg_with_name_matching_method(self):\n        with self.assertRaises(TypeError):\n            Artist(replace='baz')\n\n        with self.assertRaises(TypeError):\n            Artist(serialize='baz')\n\n    def test_repr(self):\n        self.assertEqual(\n            \"Artist(name=u'name', uri='uri')\",\n            repr(Artist(uri='uri', name='name')))\n\n    def test_serialize(self):\n        self.assertDictEqual(\n            {'__model__': 'Artist', 'uri': 'uri', 'name': 'name'},\n            Artist(uri='uri', name='name').serialize())\n\n    def test_serialize_falsy_values(self):\n        self.assertDictEqual(\n            {'__model__': 'Artist', 'uri': '', 'name': ''},\n            Artist(uri='', name='').serialize())\n\n    def test_to_json_and_back(self):\n        artist1 = Artist(uri='uri', name='name')\n        serialized = json.dumps(artist1, cls=ModelJSONEncoder)\n        artist2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(artist1, artist2)\n\n    def test_to_json_and_back_with_unknown_field(self):\n        artist = Artist(uri='uri', name='name').serialize()\n        artist['foo'] = 'foo'\n        serialized = json.dumps(artist)\n        with self.assertRaises(TypeError):\n            json.loads(serialized, object_hook=model_json_decoder)\n\n    def test_to_json_and_back_with_field_matching_method(self):\n        artist = Artist(uri='uri', name='name').serialize()\n        artist['copy'] = 'foo'\n        serialized = json.dumps(artist)\n        with self.assertRaises(TypeError):\n            json.loads(serialized, object_hook=model_json_decoder)\n\n    def test_to_json_and_back_with_field_matching_internal_field(self):\n        artist = Artist(uri='uri', name='name').serialize()\n        artist['__mro__'] = 'foo'\n        serialized = json.dumps(artist)\n        with self.assertRaises(TypeError):\n            json.loads(serialized, object_hook=model_json_decoder)\n\n    def test_eq_name(self):\n        artist1 = Artist(name='name')\n        artist2 = Artist(name='name')\n        self.assertEqual(artist1, artist2)\n        self.assertEqual(hash(artist1), hash(artist2))\n\n    def test_eq_uri(self):\n        artist1 = Artist(uri='uri')\n        artist2 = Artist(uri='uri')\n        self.assertEqual(artist1, artist2)\n        self.assertEqual(hash(artist1), hash(artist2))\n\n    def test_eq_musibrainz_id(self):\n        artist1 = Artist(musicbrainz_id='id')\n        artist2 = Artist(musicbrainz_id='id')\n        self.assertEqual(artist1, artist2)\n        self.assertEqual(hash(artist1), hash(artist2))\n\n    def test_eq(self):\n        artist1 = Artist(uri='uri', name='name', musicbrainz_id='id')\n        artist2 = Artist(uri='uri', name='name', musicbrainz_id='id')\n        self.assertEqual(artist1, artist2)\n        self.assertEqual(hash(artist1), hash(artist2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(Artist(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(Artist(), 'other')\n\n    def test_ne_name(self):\n        artist1 = Artist(name='name1')\n        artist2 = Artist(name='name2')\n        self.assertNotEqual(artist1, artist2)\n        self.assertNotEqual(hash(artist1), hash(artist2))\n\n    def test_ne_uri(self):\n        artist1 = Artist(uri='uri1')\n        artist2 = Artist(uri='uri2')\n        self.assertNotEqual(artist1, artist2)\n        self.assertNotEqual(hash(artist1), hash(artist2))\n\n    def test_ne_musicbrainz_id(self):\n        artist1 = Artist(musicbrainz_id='id1')\n        artist2 = Artist(musicbrainz_id='id2')\n        self.assertNotEqual(artist1, artist2)\n        self.assertNotEqual(hash(artist1), hash(artist2))\n\n    def test_ne(self):\n        artist1 = Artist(uri='uri1', name='name1', musicbrainz_id='id1')\n        artist2 = Artist(uri='uri2', name='name2', musicbrainz_id='id2')\n        self.assertNotEqual(artist1, artist2)\n        self.assertNotEqual(hash(artist1), hash(artist2))\n\n\nclass AlbumTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        album = Album(uri=uri)\n        self.assertEqual(album.uri, uri)\n        with self.assertRaises(AttributeError):\n            album.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        album = Album(name=name)\n        self.assertEqual(album.name, name)\n        with self.assertRaises(AttributeError):\n            album.name = None\n\n    def test_artists(self):\n        artist = Artist()\n        album = Album(artists=[artist])\n        self.assertIn(artist, album.artists)\n        with self.assertRaises(AttributeError):\n            album.artists = None\n\n    def test_artists_none(self):\n        self.assertEqual(set(), Album(artists=None).artists)\n\n    def test_num_tracks(self):\n        num_tracks = 11\n        album = Album(num_tracks=num_tracks)\n        self.assertEqual(album.num_tracks, num_tracks)\n        with self.assertRaises(AttributeError):\n            album.num_tracks = None\n\n    def test_num_discs(self):\n        num_discs = 2\n        album = Album(num_discs=num_discs)\n        self.assertEqual(album.num_discs, num_discs)\n        with self.assertRaises(AttributeError):\n            album.num_discs = None\n\n    def test_date(self):\n        date = '1977-01-01'\n        album = Album(date=date)\n        self.assertEqual(album.date, date)\n        with self.assertRaises(AttributeError):\n            album.date = None\n\n    def test_musicbrainz_id(self):\n        mb_id = 'mb-id'\n        album = Album(musicbrainz_id=mb_id)\n        self.assertEqual(album.musicbrainz_id, mb_id)\n        with self.assertRaises(AttributeError):\n            album.musicbrainz_id = None\n\n    def test_images(self):\n        image = 'data:foobar'\n        album = Album(images=[image])\n        self.assertIn(image, album.images)\n        with self.assertRaises(AttributeError):\n            album.images = None\n\n    def test_images_none(self):\n        self.assertEqual(set(), Album(images=None).images)\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Album(foo='baz')\n\n    def test_repr_without_artists(self):\n        self.assertEqual(\n            \"Album(name=u'name', uri='uri')\",\n            repr(Album(uri='uri', name='name')))\n\n    def test_repr_with_artists(self):\n        self.assertEqual(\n            \"Album(artists=[Artist(name=u'foo')], name=u'name', uri='uri')\",\n            repr(Album(uri='uri', name='name', artists=[Artist(name='foo')])))\n\n    def test_serialize_without_artists(self):\n        self.assertDictEqual(\n            {'__model__': 'Album', 'uri': 'uri', 'name': 'name'},\n            Album(uri='uri', name='name').serialize())\n\n    def test_serialize_with_artists(self):\n        artist = Artist(name='foo')\n        self.assertDictEqual(\n            {'__model__': 'Album', 'uri': 'uri', 'name': 'name',\n                'artists': [artist.serialize()]},\n            Album(uri='uri', name='name', artists=[artist]).serialize())\n\n    def test_serialize_with_images(self):\n        image = 'data:foobar'\n        self.assertDictEqual(\n            {'__model__': 'Album', 'uri': 'uri', 'name': 'name',\n                'images': [image]},\n            Album(uri='uri', name='name', images=[image]).serialize())\n\n    def test_to_json_and_back(self):\n        album1 = Album(uri='uri', name='name', artists=[Artist(name='foo')])\n        serialized = json.dumps(album1, cls=ModelJSONEncoder)\n        album2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(album1, album2)\n\n    def test_eq_name(self):\n        album1 = Album(name='name')\n        album2 = Album(name='name')\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_uri(self):\n        album1 = Album(uri='uri')\n        album2 = Album(uri='uri')\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_artists(self):\n        artists = [Artist()]\n        album1 = Album(artists=artists)\n        album2 = Album(artists=artists)\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_artists_order(self):\n        artist1 = Artist(name='name1')\n        artist2 = Artist(name='name2')\n        album1 = Album(artists=[artist1, artist2])\n        album2 = Album(artists=[artist2, artist1])\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_num_tracks(self):\n        album1 = Album(num_tracks=2)\n        album2 = Album(num_tracks=2)\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_date(self):\n        date = '1977-01-01'\n        album1 = Album(date=date)\n        album2 = Album(date=date)\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_musibrainz_id(self):\n        album1 = Album(musicbrainz_id='id')\n        album2 = Album(musicbrainz_id='id')\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq(self):\n        artists = [Artist()]\n        album1 = Album(\n            name='name', uri='uri', artists=artists, num_tracks=2,\n            musicbrainz_id='id')\n        album2 = Album(\n            name='name', uri='uri', artists=artists, num_tracks=2,\n            musicbrainz_id='id')\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(Album(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(Album(), 'other')\n\n    def test_ne_name(self):\n        album1 = Album(name='name1')\n        album2 = Album(name='name2')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_uri(self):\n        album1 = Album(uri='uri1')\n        album2 = Album(uri='uri2')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_artists(self):\n        album1 = Album(artists=[Artist(name='name1')])\n        album2 = Album(artists=[Artist(name='name2')])\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_num_tracks(self):\n        album1 = Album(num_tracks=1)\n        album2 = Album(num_tracks=2)\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_date(self):\n        album1 = Album(date='1977-01-01')\n        album2 = Album(date='1977-01-02')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_musicbrainz_id(self):\n        album1 = Album(musicbrainz_id='id1')\n        album2 = Album(musicbrainz_id='id2')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne(self):\n        album1 = Album(\n            name='name1', uri='uri1', artists=[Artist(name='name1')],\n            num_tracks=1, musicbrainz_id='id1')\n        album2 = Album(\n            name='name2', uri='uri2', artists=[Artist(name='name2')],\n            num_tracks=2, musicbrainz_id='id2')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n\nclass TrackTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        track = Track(uri=uri)\n        self.assertEqual(track.uri, uri)\n        with self.assertRaises(AttributeError):\n            track.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        track = Track(name=name)\n        self.assertEqual(track.name, name)\n        with self.assertRaises(AttributeError):\n            track.name = None\n\n    def test_artists(self):\n        artists = [Artist(name='name1'), Artist(name='name2')]\n        track = Track(artists=artists)\n        self.assertEqual(set(track.artists), set(artists))\n        with self.assertRaises(AttributeError):\n            track.artists = None\n\n    def test_artists_none(self):\n        self.assertEqual(set(), Track(artists=None).artists)\n\n    def test_composers(self):\n        artists = [Artist(name='name1'), Artist(name='name2')]\n        track = Track(composers=artists)\n        self.assertEqual(set(track.composers), set(artists))\n        with self.assertRaises(AttributeError):\n            track.composers = None\n\n    def test_composers_none(self):\n        self.assertEqual(set(), Track(composers=None).composers)\n\n    def test_performers(self):\n        artists = [Artist(name='name1'), Artist(name='name2')]\n        track = Track(performers=artists)\n        self.assertEqual(set(track.performers), set(artists))\n        with self.assertRaises(AttributeError):\n            track.performers = None\n\n    def test_performers_none(self):\n        self.assertEqual(set(), Track(performers=None).performers)\n\n    def test_album(self):\n        album = Album()\n        track = Track(album=album)\n        self.assertEqual(track.album, album)\n        with self.assertRaises(AttributeError):\n            track.album = None\n\n    def test_track_no(self):\n        track_no = 7\n        track = Track(track_no=track_no)\n        self.assertEqual(track.track_no, track_no)\n        with self.assertRaises(AttributeError):\n            track.track_no = None\n\n    def test_disc_no(self):\n        disc_no = 2\n        track = Track(disc_no=disc_no)\n        self.assertEqual(track.disc_no, disc_no)\n        with self.assertRaises(AttributeError):\n            track.disc_no = None\n\n    def test_date(self):\n        date = '1977-01-01'\n        track = Track(date=date)\n        self.assertEqual(track.date, date)\n        with self.assertRaises(AttributeError):\n            track.date = None\n\n    def test_length(self):\n        length = 137000\n        track = Track(length=length)\n        self.assertEqual(track.length, length)\n        with self.assertRaises(AttributeError):\n            track.length = None\n\n    def test_bitrate(self):\n        bitrate = 160\n        track = Track(bitrate=bitrate)\n        self.assertEqual(track.bitrate, bitrate)\n        with self.assertRaises(AttributeError):\n            track.bitrate = None\n\n    def test_musicbrainz_id(self):\n        mb_id = 'mb-id'\n        track = Track(musicbrainz_id=mb_id)\n        self.assertEqual(track.musicbrainz_id, mb_id)\n        with self.assertRaises(AttributeError):\n            track.musicbrainz_id = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Track(foo='baz')\n\n    def test_repr_without_artists(self):\n        self.assertEqual(\n            \"Track(name=u'name', uri='uri')\",\n            repr(Track(uri='uri', name='name')))\n\n    def test_repr_with_artists(self):\n        self.assertEqual(\n            \"Track(artists=[Artist(name=u'foo')], name=u'name', uri='uri')\",\n            repr(Track(uri='uri', name='name', artists=[Artist(name='foo')])))\n\n    def test_serialize_without_artists(self):\n        self.assertDictEqual(\n            {'__model__': 'Track', 'uri': 'uri', 'name': 'name'},\n            Track(uri='uri', name='name').serialize())\n\n    def test_serialize_with_artists(self):\n        artist = Artist(name='foo')\n        self.assertDictEqual(\n            {'__model__': 'Track', 'uri': 'uri', 'name': 'name',\n                'artists': [artist.serialize()]},\n            Track(uri='uri', name='name', artists=[artist]).serialize())\n\n    def test_serialize_with_album(self):\n        album = Album(name='foo')\n        self.assertDictEqual(\n            {'__model__': 'Track', 'uri': 'uri', 'name': 'name',\n                'album': album.serialize()},\n            Track(uri='uri', name='name', album=album).serialize())\n\n    def test_to_json_and_back(self):\n        track1 = Track(\n            uri='uri', name='name', album=Album(name='foo'),\n            artists=[Artist(name='foo')])\n        serialized = json.dumps(track1, cls=ModelJSONEncoder)\n        track2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(track1, track2)\n\n    def test_eq_uri(self):\n        track1 = Track(uri='uri1')\n        track2 = Track(uri='uri1')\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_name(self):\n        track1 = Track(name='name1')\n        track2 = Track(name='name1')\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_artists(self):\n        artists = [Artist()]\n        track1 = Track(artists=artists)\n        track2 = Track(artists=artists)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_artists_order(self):\n        artist1 = Artist(name='name1')\n        artist2 = Artist(name='name2')\n        track1 = Track(artists=[artist1, artist2])\n        track2 = Track(artists=[artist2, artist1])\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_album(self):\n        album = Album()\n        track1 = Track(album=album)\n        track2 = Track(album=album)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_track_no(self):\n        track1 = Track(track_no=1)\n        track2 = Track(track_no=1)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_date(self):\n        date = '1977-01-01'\n        track1 = Track(date=date)\n        track2 = Track(date=date)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_length(self):\n        track1 = Track(length=100)\n        track2 = Track(length=100)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_bitrate(self):\n        track1 = Track(bitrate=100)\n        track2 = Track(bitrate=100)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_musibrainz_id(self):\n        track1 = Track(musicbrainz_id='id')\n        track2 = Track(musicbrainz_id='id')\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq(self):\n        date = '1977-01-01'\n        artists = [Artist()]\n        album = Album()\n        track1 = Track(\n            uri='uri', name='name', artists=artists, album=album, track_no=1,\n            date=date, length=100, bitrate=100, musicbrainz_id='id')\n        track2 = Track(\n            uri='uri', name='name', artists=artists, album=album, track_no=1,\n            date=date, length=100, bitrate=100, musicbrainz_id='id')\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(Track(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(Track(), 'other')\n\n    def test_ne_uri(self):\n        track1 = Track(uri='uri1')\n        track2 = Track(uri='uri2')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_name(self):\n        track1 = Track(name='name1')\n        track2 = Track(name='name2')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_artists(self):\n        track1 = Track(artists=[Artist(name='name1')])\n        track2 = Track(artists=[Artist(name='name2')])\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_album(self):\n        track1 = Track(album=Album(name='name1'))\n        track2 = Track(album=Album(name='name2'))\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_track_no(self):\n        track1 = Track(track_no=1)\n        track2 = Track(track_no=2)\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_date(self):\n        track1 = Track(date='1977-01-01')\n        track2 = Track(date='1977-01-02')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_length(self):\n        track1 = Track(length=100)\n        track2 = Track(length=200)\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_bitrate(self):\n        track1 = Track(bitrate=100)\n        track2 = Track(bitrate=200)\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_musicbrainz_id(self):\n        track1 = Track(musicbrainz_id='id1')\n        track2 = Track(musicbrainz_id='id2')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne(self):\n        track1 = Track(\n            uri='uri1', name='name1', artists=[Artist(name='name1')],\n            album=Album(name='name1'), track_no=1, date='1977-01-01',\n            length=100, bitrate=100, musicbrainz_id='id1')\n        track2 = Track(\n            uri='uri2', name='name2', artists=[Artist(name='name2')],\n            album=Album(name='name2'), track_no=2, date='1977-01-02',\n            length=200, bitrate=200, musicbrainz_id='id2')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ignores_values_with_default_value_none(self):\n        track1 = Track(name='name1')\n        track2 = Track(name='name1', album=None)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_replace_can_reset_to_default_value(self):\n        track1 = Track(name='name1')\n        track2 = Track(name='name1', album=Album()).replace(album=None)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n\nclass TlTrackTest(unittest.TestCase):\n\n    def test_tlid(self):\n        tlid = 123\n        tl_track = TlTrack(tlid=tlid)\n        self.assertEqual(tl_track.tlid, tlid)\n        with self.assertRaises(AttributeError):\n            tl_track.tlid = None\n\n    def test_track(self):\n        track = Track()\n        tl_track = TlTrack(track=track)\n        self.assertEqual(tl_track.track, track)\n        with self.assertRaises(AttributeError):\n            tl_track.track = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            TlTrack(foo='baz')\n\n    def test_positional_args(self):\n        tlid = 123\n        track = Track()\n        tl_track = TlTrack(tlid, track)\n        self.assertEqual(tl_track.tlid, tlid)\n        self.assertEqual(tl_track.track, track)\n\n    def test_iteration(self):\n        tlid = 123\n        track = Track()\n        tl_track = TlTrack(tlid, track)\n        (tlid2, track2) = tl_track\n        self.assertEqual(tlid2, tlid)\n        self.assertEqual(track2, track)\n\n    def test_repr(self):\n        self.assertEqual(\n            \"TlTrack(tlid=123, track=Track(uri='uri'))\",\n            repr(TlTrack(tlid=123, track=Track(uri='uri'))))\n\n    def test_serialize(self):\n        track = Track(uri='uri', name='name')\n        self.assertDictEqual(\n            {'__model__': 'TlTrack', 'tlid': 123, 'track': track.serialize()},\n            TlTrack(tlid=123, track=track).serialize())\n\n    def test_to_json_and_back(self):\n        tl_track1 = TlTrack(tlid=123, track=Track(uri='uri', name='name'))\n        serialized = json.dumps(tl_track1, cls=ModelJSONEncoder)\n        tl_track2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(tl_track1, tl_track2)\n\n    def test_eq(self):\n        tlid = 123\n        track = Track()\n        tl_track1 = TlTrack(tlid=tlid, track=track)\n        tl_track2 = TlTrack(tlid=tlid, track=track)\n        self.assertEqual(tl_track1, tl_track2)\n        self.assertEqual(hash(tl_track1), hash(tl_track2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(TlTrack(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(TlTrack(), 'other')\n\n    def test_ne_tlid(self):\n        tl_track1 = TlTrack(tlid=123)\n        tl_track2 = TlTrack(tlid=321)\n        self.assertNotEqual(tl_track1, tl_track2)\n        self.assertNotEqual(hash(tl_track1), hash(tl_track2))\n\n    def test_ne_track(self):\n        tl_track1 = TlTrack(track=Track(uri='a'))\n        tl_track2 = TlTrack(track=Track(uri='b'))\n        self.assertNotEqual(tl_track1, tl_track2)\n        self.assertNotEqual(hash(tl_track1), hash(tl_track2))\n\n\nclass PlaylistTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        playlist = Playlist(uri=uri)\n        self.assertEqual(playlist.uri, uri)\n        with self.assertRaises(AttributeError):\n            playlist.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        playlist = Playlist(name=name)\n        self.assertEqual(playlist.name, name)\n        with self.assertRaises(AttributeError):\n            playlist.name = None\n\n    def test_tracks(self):\n        tracks = [Track(), Track(), Track()]\n        playlist = Playlist(tracks=tracks)\n        self.assertEqual(list(playlist.tracks), tracks)\n        with self.assertRaises(AttributeError):\n            playlist.tracks = None\n\n    def test_length(self):\n        tracks = [Track(), Track(), Track()]\n        playlist = Playlist(tracks=tracks)\n        self.assertEqual(playlist.length, 3)\n\n    def test_last_modified(self):\n        last_modified = 1390942873000\n        playlist = Playlist(last_modified=last_modified)\n        self.assertEqual(playlist.last_modified, last_modified)\n        with self.assertRaises(AttributeError):\n            playlist.last_modified = None\n\n    def test_with_new_uri(self):\n        tracks = [Track()]\n        last_modified = 1390942873000\n        playlist = Playlist(\n            uri='an uri', name='a name', tracks=tracks,\n            last_modified=last_modified)\n        new_playlist = playlist.replace(uri='another uri')\n        self.assertEqual(new_playlist.uri, 'another uri')\n        self.assertEqual(new_playlist.name, 'a name')\n        self.assertEqual(list(new_playlist.tracks), tracks)\n        self.assertEqual(new_playlist.last_modified, last_modified)\n\n    def test_with_new_name(self):\n        tracks = [Track()]\n        last_modified = 1390942873000\n        playlist = Playlist(\n            uri='an uri', name='a name', tracks=tracks,\n            last_modified=last_modified)\n        new_playlist = playlist.replace(name='another name')\n        self.assertEqual(new_playlist.uri, 'an uri')\n        self.assertEqual(new_playlist.name, 'another name')\n        self.assertEqual(list(new_playlist.tracks), tracks)\n        self.assertEqual(new_playlist.last_modified, last_modified)\n\n    def test_with_new_tracks(self):\n        tracks = [Track()]\n        last_modified = 1390942873000\n        playlist = Playlist(\n            uri='an uri', name='a name', tracks=tracks,\n            last_modified=last_modified)\n        new_tracks = [Track(), Track()]\n        new_playlist = playlist.replace(tracks=new_tracks)\n        self.assertEqual(new_playlist.uri, 'an uri')\n        self.assertEqual(new_playlist.name, 'a name')\n        self.assertEqual(list(new_playlist.tracks), new_tracks)\n        self.assertEqual(new_playlist.last_modified, last_modified)\n\n    def test_with_new_last_modified(self):\n        tracks = [Track()]\n        last_modified = 1390942873000\n        new_last_modified = last_modified + 1000\n        playlist = Playlist(\n            uri='an uri', name='a name', tracks=tracks,\n            last_modified=last_modified)\n        new_playlist = playlist.replace(last_modified=new_last_modified)\n        self.assertEqual(new_playlist.uri, 'an uri')\n        self.assertEqual(new_playlist.name, 'a name')\n        self.assertEqual(list(new_playlist.tracks), tracks)\n        self.assertEqual(new_playlist.last_modified, new_last_modified)\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Playlist(foo='baz')\n\n    def test_repr_without_tracks(self):\n        self.assertEqual(\n            \"Playlist(name=u'name', uri='uri')\",\n            repr(Playlist(uri='uri', name='name')))\n\n    def test_repr_with_tracks(self):\n        self.assertEqual(\n            \"Playlist(name=u'name', tracks=[Track(name=u'foo')], uri='uri')\",\n            repr(Playlist(uri='uri', name='name', tracks=[Track(name='foo')])))\n\n    def test_serialize_without_tracks(self):\n        self.assertDictEqual(\n            {'__model__': 'Playlist', 'uri': 'uri', 'name': 'name'},\n            Playlist(uri='uri', name='name').serialize())\n\n    def test_serialize_with_tracks(self):\n        track = Track(name='foo')\n        self.assertDictEqual(\n            {'__model__': 'Playlist', 'uri': 'uri', 'name': 'name',\n                'tracks': [track.serialize()]},\n            Playlist(uri='uri', name='name', tracks=[track]).serialize())\n\n    def test_to_json_and_back(self):\n        playlist1 = Playlist(uri='uri', name='name')\n        serialized = json.dumps(playlist1, cls=ModelJSONEncoder)\n        playlist2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(playlist1, playlist2)\n\n    def test_eq_name(self):\n        playlist1 = Playlist(name='name')\n        playlist2 = Playlist(name='name')\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq_uri(self):\n        playlist1 = Playlist(uri='uri')\n        playlist2 = Playlist(uri='uri')\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq_tracks(self):\n        tracks = [Track()]\n        playlist1 = Playlist(tracks=tracks)\n        playlist2 = Playlist(tracks=tracks)\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq_last_modified(self):\n        playlist1 = Playlist(last_modified=1)\n        playlist2 = Playlist(last_modified=1)\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq(self):\n        tracks = [Track()]\n        playlist1 = Playlist(\n            uri='uri', name='name', tracks=tracks, last_modified=1)\n        playlist2 = Playlist(\n            uri='uri', name='name', tracks=tracks, last_modified=1)\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(Playlist(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(Playlist(), 'other')\n\n    def test_ne_name(self):\n        playlist1 = Playlist(name='name1')\n        playlist2 = Playlist(name='name2')\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n    def test_ne_uri(self):\n        playlist1 = Playlist(uri='uri1')\n        playlist2 = Playlist(uri='uri2')\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n    def test_ne_tracks(self):\n        playlist1 = Playlist(tracks=[Track(uri='uri1')])\n        playlist2 = Playlist(tracks=[Track(uri='uri2')])\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n    def test_ne_last_modified(self):\n        playlist1 = Playlist(last_modified=1)\n        playlist2 = Playlist(last_modified=2)\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n    def test_ne(self):\n        playlist1 = Playlist(\n            uri='uri1', name='name1', tracks=[Track(uri='uri1')],\n            last_modified=1)\n        playlist2 = Playlist(\n            uri='uri2', name='name2', tracks=[Track(uri='uri2')],\n            last_modified=2)\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n\nclass SearchResultTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        result = SearchResult(uri=uri)\n        self.assertEqual(result.uri, uri)\n        with self.assertRaises(AttributeError):\n            result.uri = None\n\n    def test_tracks(self):\n        tracks = [Track(), Track(), Track()]\n        result = SearchResult(tracks=tracks)\n        self.assertEqual(list(result.tracks), tracks)\n        with self.assertRaises(AttributeError):\n            result.tracks = None\n\n    def test_artists(self):\n        artists = [Artist(), Artist(), Artist()]\n        result = SearchResult(artists=artists)\n        self.assertEqual(list(result.artists), artists)\n        with self.assertRaises(AttributeError):\n            result.artists = None\n\n    def test_albums(self):\n        albums = [Album(), Album(), Album()]\n        result = SearchResult(albums=albums)\n        self.assertEqual(list(result.albums), albums)\n        with self.assertRaises(AttributeError):\n            result.albums = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            SearchResult(foo='baz')\n\n    def test_repr_without_results(self):\n        self.assertEqual(\n            \"SearchResult(uri='uri')\",\n            repr(SearchResult(uri='uri')))\n\n    def test_serialize_without_results(self):\n        self.assertDictEqual(\n            {'__model__': 'SearchResult', 'uri': 'uri'},\n            SearchResult(uri='uri').serialize())\n", "comments": "  check following happen     typeerror  error calling metaclass bases        weakref   slot disallowed  either already got one       needed things like spotifytrack mopidy spotify 1 x    fails following error fields handled across classes       typeerror    init  () got unexpected keyword argument  type     essentially testing sub classes take parent  fields    account     todo  add models  ", "content": "from __future__ import absolute_import, unicode_literals\n\nimport json\nimport unittest\n\nfrom mopidy.models import (\n    Album, Artist, Image, ModelJSONEncoder, Playlist,\n    Ref, SearchResult, TlTrack, Track, model_json_decoder)\n\n\nclass InheritanceTest(unittest.TestCase):\n\n    def test_weakref_and_slots_play_nice_in_subclass(self):\n        # Check that the following does not happen:\n        # TypeError: Error when calling the metaclass bases\n        #   __weakref__ slot disallowed: either we already got one...\n\n        class Foo(Track):\n            pass\n\n    def test_sub_class_can_have_its_own_slots(self):\n        # Needed for things like SpotifyTrack in mopidy-spotify 1.x\n\n        class Foo(Track):\n            __slots__ = ('_foo',)\n\n        f = Foo()\n        f._foo = 123\n\n    def test_sub_class_can_be_initialized(self):\n        # Fails with following error if fields are not handled across classes.\n        #   TypeError: __init__() got an unexpected keyword argument \"type\"\n        # Essentially this is testing that sub-classes take parent _fields into\n        # account.\n\n        class Foo(Ref):\n            pass\n\n        Foo.directory()\n\n\nclass CachingTest(unittest.TestCase):\n\n    def test_same_instance(self):\n        self.assertIs(Track(), Track())\n\n    def test_same_instance_with_values(self):\n        self.assertIs(Track(uri='test'), Track(uri='test'))\n\n    def test_different_instance_with_different_values(self):\n        self.assertIsNot(Track(uri='test1'), Track(uri='test2'))\n\n    def test_different_instance_with_replace(self):\n        t = Track(uri='test1')\n        self.assertIsNot(t, t.replace(uri='test2'))\n\n\nclass GenericReplaceTest(unittest.TestCase):\n\n    def compare(self, orig, other):\n        self.assertEqual(orig, other)\n        self.assertEqual(id(orig), id(other))\n\n    def test_replace_track(self):\n        track = Track()\n        self.compare(track, track.replace())\n\n    def test_replace_artist(self):\n        artist = Artist()\n        self.compare(artist, artist.replace())\n\n    def test_replace_album(self):\n        album = Album()\n        self.compare(album, album.replace())\n\n    def test_replace_playlist(self):\n        playlist = Playlist()\n        self.compare(playlist, playlist.replace())\n\n    def test_replace_track_with_basic_values(self):\n        track = Track(name='foo', uri='bar')\n        other = track.replace(name='baz')\n        self.assertEqual('baz', other.name)\n        self.assertEqual('bar', other.uri)\n\n    def test_replace_track_with_missing_values(self):\n        track = Track(uri='bar')\n        other = track.replace(name='baz')\n        self.assertEqual('baz', other.name)\n        self.assertEqual('bar', other.uri)\n\n    def test_replace_track_with_private_internal_value(self):\n        artist1 = Artist(name='foo')\n        artist2 = Artist(name='bar')\n        track = Track(artists=[artist1])\n        other = track.replace(artists=[artist2])\n        self.assertIn(artist2, other.artists)\n\n    def test_replace_track_with_invalid_key(self):\n        with self.assertRaises(TypeError):\n            Track().replace(invalid_key=True)\n\n    def test_replace_track_to_remove(self):\n        track = Track(name='foo').replace(name=None)\n        self.assertFalse(hasattr(track, '_name'))\n\n\nclass RefTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        ref = Ref(uri=uri)\n        self.assertEqual(ref.uri, uri)\n        with self.assertRaises(AttributeError):\n            ref.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        ref = Ref(name=name)\n        self.assertEqual(ref.name, name)\n        with self.assertRaises(AttributeError):\n            ref.name = None\n\n    # TODO: add these for the more of the models?\n    def test_del_name(self):\n        ref = Ref(name='foo')\n        with self.assertRaises(AttributeError):\n            del ref.name\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Ref(foo='baz')\n\n    def test_repr_without_results(self):\n        self.assertEqual(\n            \"Ref(name=u'foo', type='artist', uri='uri')\",\n            repr(Ref(uri='uri', name='foo', type='artist')))\n\n    def test_serialize_without_results(self):\n        self.assertDictEqual(\n            {'__model__': 'Ref', 'uri': 'uri'},\n            Ref(uri='uri').serialize())\n\n    def test_to_json_and_back(self):\n        ref1 = Ref(uri='uri')\n        serialized = json.dumps(ref1, cls=ModelJSONEncoder)\n        ref2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(ref1, ref2)\n\n    def test_type_constants(self):\n        self.assertEqual(Ref.ALBUM, 'album')\n        self.assertEqual(Ref.ARTIST, 'artist')\n        self.assertEqual(Ref.DIRECTORY, 'directory')\n        self.assertEqual(Ref.PLAYLIST, 'playlist')\n        self.assertEqual(Ref.TRACK, 'track')\n\n    def test_album_constructor(self):\n        ref = Ref.album(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.ALBUM)\n\n    def test_artist_constructor(self):\n        ref = Ref.artist(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.ARTIST)\n\n    def test_directory_constructor(self):\n        ref = Ref.directory(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.DIRECTORY)\n\n    def test_playlist_constructor(self):\n        ref = Ref.playlist(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.PLAYLIST)\n\n    def test_track_constructor(self):\n        ref = Ref.track(uri='foo', name='bar')\n        self.assertEqual(ref.uri, 'foo')\n        self.assertEqual(ref.name, 'bar')\n        self.assertEqual(ref.type, Ref.TRACK)\n\n\nclass ImageTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        image = Image(uri=uri)\n        self.assertEqual(image.uri, uri)\n        with self.assertRaises(AttributeError):\n            image.uri = None\n\n    def test_width(self):\n        image = Image(width=100)\n        self.assertEqual(image.width, 100)\n        with self.assertRaises(AttributeError):\n            image.width = None\n\n    def test_height(self):\n        image = Image(height=100)\n        self.assertEqual(image.height, 100)\n        with self.assertRaises(AttributeError):\n            image.height = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Image(foo='baz')\n\n\nclass ArtistTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        artist = Artist(uri=uri)\n        self.assertEqual(artist.uri, uri)\n        with self.assertRaises(AttributeError):\n            artist.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        artist = Artist(name=name)\n        self.assertEqual(artist.name, name)\n        with self.assertRaises(AttributeError):\n            artist.name = None\n\n    def test_musicbrainz_id(self):\n        mb_id = 'mb-id'\n        artist = Artist(musicbrainz_id=mb_id)\n        self.assertEqual(artist.musicbrainz_id, mb_id)\n        with self.assertRaises(AttributeError):\n            artist.musicbrainz_id = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Artist(foo='baz')\n\n    def test_invalid_kwarg_with_name_matching_method(self):\n        with self.assertRaises(TypeError):\n            Artist(replace='baz')\n\n        with self.assertRaises(TypeError):\n            Artist(serialize='baz')\n\n    def test_repr(self):\n        self.assertEqual(\n            \"Artist(name=u'name', uri='uri')\",\n            repr(Artist(uri='uri', name='name')))\n\n    def test_serialize(self):\n        self.assertDictEqual(\n            {'__model__': 'Artist', 'uri': 'uri', 'name': 'name'},\n            Artist(uri='uri', name='name').serialize())\n\n    def test_serialize_falsy_values(self):\n        self.assertDictEqual(\n            {'__model__': 'Artist', 'uri': '', 'name': ''},\n            Artist(uri='', name='').serialize())\n\n    def test_to_json_and_back(self):\n        artist1 = Artist(uri='uri', name='name')\n        serialized = json.dumps(artist1, cls=ModelJSONEncoder)\n        artist2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(artist1, artist2)\n\n    def test_to_json_and_back_with_unknown_field(self):\n        artist = Artist(uri='uri', name='name').serialize()\n        artist['foo'] = 'foo'\n        serialized = json.dumps(artist)\n        with self.assertRaises(TypeError):\n            json.loads(serialized, object_hook=model_json_decoder)\n\n    def test_to_json_and_back_with_field_matching_method(self):\n        artist = Artist(uri='uri', name='name').serialize()\n        artist['copy'] = 'foo'\n        serialized = json.dumps(artist)\n        with self.assertRaises(TypeError):\n            json.loads(serialized, object_hook=model_json_decoder)\n\n    def test_to_json_and_back_with_field_matching_internal_field(self):\n        artist = Artist(uri='uri', name='name').serialize()\n        artist['__mro__'] = 'foo'\n        serialized = json.dumps(artist)\n        with self.assertRaises(TypeError):\n            json.loads(serialized, object_hook=model_json_decoder)\n\n    def test_eq_name(self):\n        artist1 = Artist(name='name')\n        artist2 = Artist(name='name')\n        self.assertEqual(artist1, artist2)\n        self.assertEqual(hash(artist1), hash(artist2))\n\n    def test_eq_uri(self):\n        artist1 = Artist(uri='uri')\n        artist2 = Artist(uri='uri')\n        self.assertEqual(artist1, artist2)\n        self.assertEqual(hash(artist1), hash(artist2))\n\n    def test_eq_musibrainz_id(self):\n        artist1 = Artist(musicbrainz_id='id')\n        artist2 = Artist(musicbrainz_id='id')\n        self.assertEqual(artist1, artist2)\n        self.assertEqual(hash(artist1), hash(artist2))\n\n    def test_eq(self):\n        artist1 = Artist(uri='uri', name='name', musicbrainz_id='id')\n        artist2 = Artist(uri='uri', name='name', musicbrainz_id='id')\n        self.assertEqual(artist1, artist2)\n        self.assertEqual(hash(artist1), hash(artist2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(Artist(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(Artist(), 'other')\n\n    def test_ne_name(self):\n        artist1 = Artist(name='name1')\n        artist2 = Artist(name='name2')\n        self.assertNotEqual(artist1, artist2)\n        self.assertNotEqual(hash(artist1), hash(artist2))\n\n    def test_ne_uri(self):\n        artist1 = Artist(uri='uri1')\n        artist2 = Artist(uri='uri2')\n        self.assertNotEqual(artist1, artist2)\n        self.assertNotEqual(hash(artist1), hash(artist2))\n\n    def test_ne_musicbrainz_id(self):\n        artist1 = Artist(musicbrainz_id='id1')\n        artist2 = Artist(musicbrainz_id='id2')\n        self.assertNotEqual(artist1, artist2)\n        self.assertNotEqual(hash(artist1), hash(artist2))\n\n    def test_ne(self):\n        artist1 = Artist(uri='uri1', name='name1', musicbrainz_id='id1')\n        artist2 = Artist(uri='uri2', name='name2', musicbrainz_id='id2')\n        self.assertNotEqual(artist1, artist2)\n        self.assertNotEqual(hash(artist1), hash(artist2))\n\n\nclass AlbumTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        album = Album(uri=uri)\n        self.assertEqual(album.uri, uri)\n        with self.assertRaises(AttributeError):\n            album.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        album = Album(name=name)\n        self.assertEqual(album.name, name)\n        with self.assertRaises(AttributeError):\n            album.name = None\n\n    def test_artists(self):\n        artist = Artist()\n        album = Album(artists=[artist])\n        self.assertIn(artist, album.artists)\n        with self.assertRaises(AttributeError):\n            album.artists = None\n\n    def test_artists_none(self):\n        self.assertEqual(set(), Album(artists=None).artists)\n\n    def test_num_tracks(self):\n        num_tracks = 11\n        album = Album(num_tracks=num_tracks)\n        self.assertEqual(album.num_tracks, num_tracks)\n        with self.assertRaises(AttributeError):\n            album.num_tracks = None\n\n    def test_num_discs(self):\n        num_discs = 2\n        album = Album(num_discs=num_discs)\n        self.assertEqual(album.num_discs, num_discs)\n        with self.assertRaises(AttributeError):\n            album.num_discs = None\n\n    def test_date(self):\n        date = '1977-01-01'\n        album = Album(date=date)\n        self.assertEqual(album.date, date)\n        with self.assertRaises(AttributeError):\n            album.date = None\n\n    def test_musicbrainz_id(self):\n        mb_id = 'mb-id'\n        album = Album(musicbrainz_id=mb_id)\n        self.assertEqual(album.musicbrainz_id, mb_id)\n        with self.assertRaises(AttributeError):\n            album.musicbrainz_id = None\n\n    def test_images(self):\n        image = 'data:foobar'\n        album = Album(images=[image])\n        self.assertIn(image, album.images)\n        with self.assertRaises(AttributeError):\n            album.images = None\n\n    def test_images_none(self):\n        self.assertEqual(set(), Album(images=None).images)\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Album(foo='baz')\n\n    def test_repr_without_artists(self):\n        self.assertEqual(\n            \"Album(name=u'name', uri='uri')\",\n            repr(Album(uri='uri', name='name')))\n\n    def test_repr_with_artists(self):\n        self.assertEqual(\n            \"Album(artists=[Artist(name=u'foo')], name=u'name', uri='uri')\",\n            repr(Album(uri='uri', name='name', artists=[Artist(name='foo')])))\n\n    def test_serialize_without_artists(self):\n        self.assertDictEqual(\n            {'__model__': 'Album', 'uri': 'uri', 'name': 'name'},\n            Album(uri='uri', name='name').serialize())\n\n    def test_serialize_with_artists(self):\n        artist = Artist(name='foo')\n        self.assertDictEqual(\n            {'__model__': 'Album', 'uri': 'uri', 'name': 'name',\n                'artists': [artist.serialize()]},\n            Album(uri='uri', name='name', artists=[artist]).serialize())\n\n    def test_serialize_with_images(self):\n        image = 'data:foobar'\n        self.assertDictEqual(\n            {'__model__': 'Album', 'uri': 'uri', 'name': 'name',\n                'images': [image]},\n            Album(uri='uri', name='name', images=[image]).serialize())\n\n    def test_to_json_and_back(self):\n        album1 = Album(uri='uri', name='name', artists=[Artist(name='foo')])\n        serialized = json.dumps(album1, cls=ModelJSONEncoder)\n        album2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(album1, album2)\n\n    def test_eq_name(self):\n        album1 = Album(name='name')\n        album2 = Album(name='name')\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_uri(self):\n        album1 = Album(uri='uri')\n        album2 = Album(uri='uri')\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_artists(self):\n        artists = [Artist()]\n        album1 = Album(artists=artists)\n        album2 = Album(artists=artists)\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_artists_order(self):\n        artist1 = Artist(name='name1')\n        artist2 = Artist(name='name2')\n        album1 = Album(artists=[artist1, artist2])\n        album2 = Album(artists=[artist2, artist1])\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_num_tracks(self):\n        album1 = Album(num_tracks=2)\n        album2 = Album(num_tracks=2)\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_date(self):\n        date = '1977-01-01'\n        album1 = Album(date=date)\n        album2 = Album(date=date)\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_musibrainz_id(self):\n        album1 = Album(musicbrainz_id='id')\n        album2 = Album(musicbrainz_id='id')\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq(self):\n        artists = [Artist()]\n        album1 = Album(\n            name='name', uri='uri', artists=artists, num_tracks=2,\n            musicbrainz_id='id')\n        album2 = Album(\n            name='name', uri='uri', artists=artists, num_tracks=2,\n            musicbrainz_id='id')\n        self.assertEqual(album1, album2)\n        self.assertEqual(hash(album1), hash(album2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(Album(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(Album(), 'other')\n\n    def test_ne_name(self):\n        album1 = Album(name='name1')\n        album2 = Album(name='name2')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_uri(self):\n        album1 = Album(uri='uri1')\n        album2 = Album(uri='uri2')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_artists(self):\n        album1 = Album(artists=[Artist(name='name1')])\n        album2 = Album(artists=[Artist(name='name2')])\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_num_tracks(self):\n        album1 = Album(num_tracks=1)\n        album2 = Album(num_tracks=2)\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_date(self):\n        album1 = Album(date='1977-01-01')\n        album2 = Album(date='1977-01-02')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne_musicbrainz_id(self):\n        album1 = Album(musicbrainz_id='id1')\n        album2 = Album(musicbrainz_id='id2')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n    def test_ne(self):\n        album1 = Album(\n            name='name1', uri='uri1', artists=[Artist(name='name1')],\n            num_tracks=1, musicbrainz_id='id1')\n        album2 = Album(\n            name='name2', uri='uri2', artists=[Artist(name='name2')],\n            num_tracks=2, musicbrainz_id='id2')\n        self.assertNotEqual(album1, album2)\n        self.assertNotEqual(hash(album1), hash(album2))\n\n\nclass TrackTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        track = Track(uri=uri)\n        self.assertEqual(track.uri, uri)\n        with self.assertRaises(AttributeError):\n            track.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        track = Track(name=name)\n        self.assertEqual(track.name, name)\n        with self.assertRaises(AttributeError):\n            track.name = None\n\n    def test_artists(self):\n        artists = [Artist(name='name1'), Artist(name='name2')]\n        track = Track(artists=artists)\n        self.assertEqual(set(track.artists), set(artists))\n        with self.assertRaises(AttributeError):\n            track.artists = None\n\n    def test_artists_none(self):\n        self.assertEqual(set(), Track(artists=None).artists)\n\n    def test_composers(self):\n        artists = [Artist(name='name1'), Artist(name='name2')]\n        track = Track(composers=artists)\n        self.assertEqual(set(track.composers), set(artists))\n        with self.assertRaises(AttributeError):\n            track.composers = None\n\n    def test_composers_none(self):\n        self.assertEqual(set(), Track(composers=None).composers)\n\n    def test_performers(self):\n        artists = [Artist(name='name1'), Artist(name='name2')]\n        track = Track(performers=artists)\n        self.assertEqual(set(track.performers), set(artists))\n        with self.assertRaises(AttributeError):\n            track.performers = None\n\n    def test_performers_none(self):\n        self.assertEqual(set(), Track(performers=None).performers)\n\n    def test_album(self):\n        album = Album()\n        track = Track(album=album)\n        self.assertEqual(track.album, album)\n        with self.assertRaises(AttributeError):\n            track.album = None\n\n    def test_track_no(self):\n        track_no = 7\n        track = Track(track_no=track_no)\n        self.assertEqual(track.track_no, track_no)\n        with self.assertRaises(AttributeError):\n            track.track_no = None\n\n    def test_disc_no(self):\n        disc_no = 2\n        track = Track(disc_no=disc_no)\n        self.assertEqual(track.disc_no, disc_no)\n        with self.assertRaises(AttributeError):\n            track.disc_no = None\n\n    def test_date(self):\n        date = '1977-01-01'\n        track = Track(date=date)\n        self.assertEqual(track.date, date)\n        with self.assertRaises(AttributeError):\n            track.date = None\n\n    def test_length(self):\n        length = 137000\n        track = Track(length=length)\n        self.assertEqual(track.length, length)\n        with self.assertRaises(AttributeError):\n            track.length = None\n\n    def test_bitrate(self):\n        bitrate = 160\n        track = Track(bitrate=bitrate)\n        self.assertEqual(track.bitrate, bitrate)\n        with self.assertRaises(AttributeError):\n            track.bitrate = None\n\n    def test_musicbrainz_id(self):\n        mb_id = 'mb-id'\n        track = Track(musicbrainz_id=mb_id)\n        self.assertEqual(track.musicbrainz_id, mb_id)\n        with self.assertRaises(AttributeError):\n            track.musicbrainz_id = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Track(foo='baz')\n\n    def test_repr_without_artists(self):\n        self.assertEqual(\n            \"Track(name=u'name', uri='uri')\",\n            repr(Track(uri='uri', name='name')))\n\n    def test_repr_with_artists(self):\n        self.assertEqual(\n            \"Track(artists=[Artist(name=u'foo')], name=u'name', uri='uri')\",\n            repr(Track(uri='uri', name='name', artists=[Artist(name='foo')])))\n\n    def test_serialize_without_artists(self):\n        self.assertDictEqual(\n            {'__model__': 'Track', 'uri': 'uri', 'name': 'name'},\n            Track(uri='uri', name='name').serialize())\n\n    def test_serialize_with_artists(self):\n        artist = Artist(name='foo')\n        self.assertDictEqual(\n            {'__model__': 'Track', 'uri': 'uri', 'name': 'name',\n                'artists': [artist.serialize()]},\n            Track(uri='uri', name='name', artists=[artist]).serialize())\n\n    def test_serialize_with_album(self):\n        album = Album(name='foo')\n        self.assertDictEqual(\n            {'__model__': 'Track', 'uri': 'uri', 'name': 'name',\n                'album': album.serialize()},\n            Track(uri='uri', name='name', album=album).serialize())\n\n    def test_to_json_and_back(self):\n        track1 = Track(\n            uri='uri', name='name', album=Album(name='foo'),\n            artists=[Artist(name='foo')])\n        serialized = json.dumps(track1, cls=ModelJSONEncoder)\n        track2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(track1, track2)\n\n    def test_eq_uri(self):\n        track1 = Track(uri='uri1')\n        track2 = Track(uri='uri1')\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_name(self):\n        track1 = Track(name='name1')\n        track2 = Track(name='name1')\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_artists(self):\n        artists = [Artist()]\n        track1 = Track(artists=artists)\n        track2 = Track(artists=artists)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_artists_order(self):\n        artist1 = Artist(name='name1')\n        artist2 = Artist(name='name2')\n        track1 = Track(artists=[artist1, artist2])\n        track2 = Track(artists=[artist2, artist1])\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_album(self):\n        album = Album()\n        track1 = Track(album=album)\n        track2 = Track(album=album)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_track_no(self):\n        track1 = Track(track_no=1)\n        track2 = Track(track_no=1)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_date(self):\n        date = '1977-01-01'\n        track1 = Track(date=date)\n        track2 = Track(date=date)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_length(self):\n        track1 = Track(length=100)\n        track2 = Track(length=100)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_bitrate(self):\n        track1 = Track(bitrate=100)\n        track2 = Track(bitrate=100)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_musibrainz_id(self):\n        track1 = Track(musicbrainz_id='id')\n        track2 = Track(musicbrainz_id='id')\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq(self):\n        date = '1977-01-01'\n        artists = [Artist()]\n        album = Album()\n        track1 = Track(\n            uri='uri', name='name', artists=artists, album=album, track_no=1,\n            date=date, length=100, bitrate=100, musicbrainz_id='id')\n        track2 = Track(\n            uri='uri', name='name', artists=artists, album=album, track_no=1,\n            date=date, length=100, bitrate=100, musicbrainz_id='id')\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(Track(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(Track(), 'other')\n\n    def test_ne_uri(self):\n        track1 = Track(uri='uri1')\n        track2 = Track(uri='uri2')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_name(self):\n        track1 = Track(name='name1')\n        track2 = Track(name='name2')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_artists(self):\n        track1 = Track(artists=[Artist(name='name1')])\n        track2 = Track(artists=[Artist(name='name2')])\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_album(self):\n        track1 = Track(album=Album(name='name1'))\n        track2 = Track(album=Album(name='name2'))\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_track_no(self):\n        track1 = Track(track_no=1)\n        track2 = Track(track_no=2)\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_date(self):\n        track1 = Track(date='1977-01-01')\n        track2 = Track(date='1977-01-02')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_length(self):\n        track1 = Track(length=100)\n        track2 = Track(length=200)\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_bitrate(self):\n        track1 = Track(bitrate=100)\n        track2 = Track(bitrate=200)\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne_musicbrainz_id(self):\n        track1 = Track(musicbrainz_id='id1')\n        track2 = Track(musicbrainz_id='id2')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ne(self):\n        track1 = Track(\n            uri='uri1', name='name1', artists=[Artist(name='name1')],\n            album=Album(name='name1'), track_no=1, date='1977-01-01',\n            length=100, bitrate=100, musicbrainz_id='id1')\n        track2 = Track(\n            uri='uri2', name='name2', artists=[Artist(name='name2')],\n            album=Album(name='name2'), track_no=2, date='1977-01-02',\n            length=200, bitrate=200, musicbrainz_id='id2')\n        self.assertNotEqual(track1, track2)\n        self.assertNotEqual(hash(track1), hash(track2))\n\n    def test_ignores_values_with_default_value_none(self):\n        track1 = Track(name='name1')\n        track2 = Track(name='name1', album=None)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n    def test_replace_can_reset_to_default_value(self):\n        track1 = Track(name='name1')\n        track2 = Track(name='name1', album=Album()).replace(album=None)\n        self.assertEqual(track1, track2)\n        self.assertEqual(hash(track1), hash(track2))\n\n\nclass TlTrackTest(unittest.TestCase):\n\n    def test_tlid(self):\n        tlid = 123\n        tl_track = TlTrack(tlid=tlid)\n        self.assertEqual(tl_track.tlid, tlid)\n        with self.assertRaises(AttributeError):\n            tl_track.tlid = None\n\n    def test_track(self):\n        track = Track()\n        tl_track = TlTrack(track=track)\n        self.assertEqual(tl_track.track, track)\n        with self.assertRaises(AttributeError):\n            tl_track.track = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            TlTrack(foo='baz')\n\n    def test_positional_args(self):\n        tlid = 123\n        track = Track()\n        tl_track = TlTrack(tlid, track)\n        self.assertEqual(tl_track.tlid, tlid)\n        self.assertEqual(tl_track.track, track)\n\n    def test_iteration(self):\n        tlid = 123\n        track = Track()\n        tl_track = TlTrack(tlid, track)\n        (tlid2, track2) = tl_track\n        self.assertEqual(tlid2, tlid)\n        self.assertEqual(track2, track)\n\n    def test_repr(self):\n        self.assertEqual(\n            \"TlTrack(tlid=123, track=Track(uri='uri'))\",\n            repr(TlTrack(tlid=123, track=Track(uri='uri'))))\n\n    def test_serialize(self):\n        track = Track(uri='uri', name='name')\n        self.assertDictEqual(\n            {'__model__': 'TlTrack', 'tlid': 123, 'track': track.serialize()},\n            TlTrack(tlid=123, track=track).serialize())\n\n    def test_to_json_and_back(self):\n        tl_track1 = TlTrack(tlid=123, track=Track(uri='uri', name='name'))\n        serialized = json.dumps(tl_track1, cls=ModelJSONEncoder)\n        tl_track2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(tl_track1, tl_track2)\n\n    def test_eq(self):\n        tlid = 123\n        track = Track()\n        tl_track1 = TlTrack(tlid=tlid, track=track)\n        tl_track2 = TlTrack(tlid=tlid, track=track)\n        self.assertEqual(tl_track1, tl_track2)\n        self.assertEqual(hash(tl_track1), hash(tl_track2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(TlTrack(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(TlTrack(), 'other')\n\n    def test_ne_tlid(self):\n        tl_track1 = TlTrack(tlid=123)\n        tl_track2 = TlTrack(tlid=321)\n        self.assertNotEqual(tl_track1, tl_track2)\n        self.assertNotEqual(hash(tl_track1), hash(tl_track2))\n\n    def test_ne_track(self):\n        tl_track1 = TlTrack(track=Track(uri='a'))\n        tl_track2 = TlTrack(track=Track(uri='b'))\n        self.assertNotEqual(tl_track1, tl_track2)\n        self.assertNotEqual(hash(tl_track1), hash(tl_track2))\n\n\nclass PlaylistTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        playlist = Playlist(uri=uri)\n        self.assertEqual(playlist.uri, uri)\n        with self.assertRaises(AttributeError):\n            playlist.uri = None\n\n    def test_name(self):\n        name = 'a name'\n        playlist = Playlist(name=name)\n        self.assertEqual(playlist.name, name)\n        with self.assertRaises(AttributeError):\n            playlist.name = None\n\n    def test_tracks(self):\n        tracks = [Track(), Track(), Track()]\n        playlist = Playlist(tracks=tracks)\n        self.assertEqual(list(playlist.tracks), tracks)\n        with self.assertRaises(AttributeError):\n            playlist.tracks = None\n\n    def test_length(self):\n        tracks = [Track(), Track(), Track()]\n        playlist = Playlist(tracks=tracks)\n        self.assertEqual(playlist.length, 3)\n\n    def test_last_modified(self):\n        last_modified = 1390942873000\n        playlist = Playlist(last_modified=last_modified)\n        self.assertEqual(playlist.last_modified, last_modified)\n        with self.assertRaises(AttributeError):\n            playlist.last_modified = None\n\n    def test_with_new_uri(self):\n        tracks = [Track()]\n        last_modified = 1390942873000\n        playlist = Playlist(\n            uri='an uri', name='a name', tracks=tracks,\n            last_modified=last_modified)\n        new_playlist = playlist.replace(uri='another uri')\n        self.assertEqual(new_playlist.uri, 'another uri')\n        self.assertEqual(new_playlist.name, 'a name')\n        self.assertEqual(list(new_playlist.tracks), tracks)\n        self.assertEqual(new_playlist.last_modified, last_modified)\n\n    def test_with_new_name(self):\n        tracks = [Track()]\n        last_modified = 1390942873000\n        playlist = Playlist(\n            uri='an uri', name='a name', tracks=tracks,\n            last_modified=last_modified)\n        new_playlist = playlist.replace(name='another name')\n        self.assertEqual(new_playlist.uri, 'an uri')\n        self.assertEqual(new_playlist.name, 'another name')\n        self.assertEqual(list(new_playlist.tracks), tracks)\n        self.assertEqual(new_playlist.last_modified, last_modified)\n\n    def test_with_new_tracks(self):\n        tracks = [Track()]\n        last_modified = 1390942873000\n        playlist = Playlist(\n            uri='an uri', name='a name', tracks=tracks,\n            last_modified=last_modified)\n        new_tracks = [Track(), Track()]\n        new_playlist = playlist.replace(tracks=new_tracks)\n        self.assertEqual(new_playlist.uri, 'an uri')\n        self.assertEqual(new_playlist.name, 'a name')\n        self.assertEqual(list(new_playlist.tracks), new_tracks)\n        self.assertEqual(new_playlist.last_modified, last_modified)\n\n    def test_with_new_last_modified(self):\n        tracks = [Track()]\n        last_modified = 1390942873000\n        new_last_modified = last_modified + 1000\n        playlist = Playlist(\n            uri='an uri', name='a name', tracks=tracks,\n            last_modified=last_modified)\n        new_playlist = playlist.replace(last_modified=new_last_modified)\n        self.assertEqual(new_playlist.uri, 'an uri')\n        self.assertEqual(new_playlist.name, 'a name')\n        self.assertEqual(list(new_playlist.tracks), tracks)\n        self.assertEqual(new_playlist.last_modified, new_last_modified)\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            Playlist(foo='baz')\n\n    def test_repr_without_tracks(self):\n        self.assertEqual(\n            \"Playlist(name=u'name', uri='uri')\",\n            repr(Playlist(uri='uri', name='name')))\n\n    def test_repr_with_tracks(self):\n        self.assertEqual(\n            \"Playlist(name=u'name', tracks=[Track(name=u'foo')], uri='uri')\",\n            repr(Playlist(uri='uri', name='name', tracks=[Track(name='foo')])))\n\n    def test_serialize_without_tracks(self):\n        self.assertDictEqual(\n            {'__model__': 'Playlist', 'uri': 'uri', 'name': 'name'},\n            Playlist(uri='uri', name='name').serialize())\n\n    def test_serialize_with_tracks(self):\n        track = Track(name='foo')\n        self.assertDictEqual(\n            {'__model__': 'Playlist', 'uri': 'uri', 'name': 'name',\n                'tracks': [track.serialize()]},\n            Playlist(uri='uri', name='name', tracks=[track]).serialize())\n\n    def test_to_json_and_back(self):\n        playlist1 = Playlist(uri='uri', name='name')\n        serialized = json.dumps(playlist1, cls=ModelJSONEncoder)\n        playlist2 = json.loads(serialized, object_hook=model_json_decoder)\n        self.assertEqual(playlist1, playlist2)\n\n    def test_eq_name(self):\n        playlist1 = Playlist(name='name')\n        playlist2 = Playlist(name='name')\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq_uri(self):\n        playlist1 = Playlist(uri='uri')\n        playlist2 = Playlist(uri='uri')\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq_tracks(self):\n        tracks = [Track()]\n        playlist1 = Playlist(tracks=tracks)\n        playlist2 = Playlist(tracks=tracks)\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq_last_modified(self):\n        playlist1 = Playlist(last_modified=1)\n        playlist2 = Playlist(last_modified=1)\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq(self):\n        tracks = [Track()]\n        playlist1 = Playlist(\n            uri='uri', name='name', tracks=tracks, last_modified=1)\n        playlist2 = Playlist(\n            uri='uri', name='name', tracks=tracks, last_modified=1)\n        self.assertEqual(playlist1, playlist2)\n        self.assertEqual(hash(playlist1), hash(playlist2))\n\n    def test_eq_none(self):\n        self.assertNotEqual(Playlist(), None)\n\n    def test_eq_other(self):\n        self.assertNotEqual(Playlist(), 'other')\n\n    def test_ne_name(self):\n        playlist1 = Playlist(name='name1')\n        playlist2 = Playlist(name='name2')\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n    def test_ne_uri(self):\n        playlist1 = Playlist(uri='uri1')\n        playlist2 = Playlist(uri='uri2')\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n    def test_ne_tracks(self):\n        playlist1 = Playlist(tracks=[Track(uri='uri1')])\n        playlist2 = Playlist(tracks=[Track(uri='uri2')])\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n    def test_ne_last_modified(self):\n        playlist1 = Playlist(last_modified=1)\n        playlist2 = Playlist(last_modified=2)\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n    def test_ne(self):\n        playlist1 = Playlist(\n            uri='uri1', name='name1', tracks=[Track(uri='uri1')],\n            last_modified=1)\n        playlist2 = Playlist(\n            uri='uri2', name='name2', tracks=[Track(uri='uri2')],\n            last_modified=2)\n        self.assertNotEqual(playlist1, playlist2)\n        self.assertNotEqual(hash(playlist1), hash(playlist2))\n\n\nclass SearchResultTest(unittest.TestCase):\n\n    def test_uri(self):\n        uri = 'an_uri'\n        result = SearchResult(uri=uri)\n        self.assertEqual(result.uri, uri)\n        with self.assertRaises(AttributeError):\n            result.uri = None\n\n    def test_tracks(self):\n        tracks = [Track(), Track(), Track()]\n        result = SearchResult(tracks=tracks)\n        self.assertEqual(list(result.tracks), tracks)\n        with self.assertRaises(AttributeError):\n            result.tracks = None\n\n    def test_artists(self):\n        artists = [Artist(), Artist(), Artist()]\n        result = SearchResult(artists=artists)\n        self.assertEqual(list(result.artists), artists)\n        with self.assertRaises(AttributeError):\n            result.artists = None\n\n    def test_albums(self):\n        albums = [Album(), Album(), Album()]\n        result = SearchResult(albums=albums)\n        self.assertEqual(list(result.albums), albums)\n        with self.assertRaises(AttributeError):\n            result.albums = None\n\n    def test_invalid_kwarg(self):\n        with self.assertRaises(TypeError):\n            SearchResult(foo='baz')\n\n    def test_repr_without_results(self):\n        self.assertEqual(\n            \"SearchResult(uri='uri')\",\n            repr(SearchResult(uri='uri')))\n\n    def test_serialize_without_results(self):\n        self.assertDictEqual(\n            {'__model__': 'SearchResult', 'uri': 'uri'},\n            SearchResult(uri='uri').serialize())\n", "description": "Mopidy is an extensible music server that plays music from local disk, Spotify, SoundCloud, Google Play Music, and more. You edit the playlist from any phone, tablet, or computer using a range of MPD and web clients.", "file_name": "test_models.py", "id": "52796948b62af7482c0fb022027174a8", "language": "Python", "project_name": "mopidy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mopidy-mopidy/mopidy-mopidy-79d42c3/tests/models/test_models.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:12:51Z", "url": "https://github.com/mopidy/mopidy", "wiki": false}