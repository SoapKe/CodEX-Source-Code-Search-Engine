{"author": "nvbn", "code": "import re\nfrom decorator import decorator\nfrom ..utils import is_app\nfrom ..shells import shell\n\n\n@decorator\ndef git_support(fn, command):\n    \n    \n    \n    \n    if not is_app(command, 'git', 'hub'):\n        return False\n\n    \n    if 'trace: alias expansion:' in command.output:\n        search = re.search(\"trace: alias expansion: ([^ ]*) => ([^\\n]*)\",\n                           command.output)\n        alias = search.group(1)\n\n        \n        \n        \n        \n        expansion = ' '.join(shell.quote(part)\n                             for part in shell.split_command(search.group(2)))\n        new_script = command.script.replace(alias, expansion)\n\n        command = command.update(script=new_script)\n\n    return fn(command)\n", "comments": "Resolves git aliases and supports testing for both git and hub.\n.\n# supports GitHub's `hub` command\n# which is recommended to be used with `alias git=hub`\n# but at this point, shell aliases have already been resolved\n# perform git aliases expansion\n# by default git quotes everything, for example:\n#     'commit' '--amend'\n# which is surprising and does not allow to easily test for\n# eg. 'git commit'\n", "content": "import re\nfrom decorator import decorator\nfrom ..utils import is_app\nfrom ..shells import shell\n\n\n@decorator\ndef git_support(fn, command):\n    \"\"\"Resolves git aliases and supports testing for both git and hub.\"\"\"\n    # supports GitHub's `hub` command\n    # which is recommended to be used with `alias git=hub`\n    # but at this point, shell aliases have already been resolved\n    if not is_app(command, 'git', 'hub'):\n        return False\n\n    # perform git aliases expansion\n    if 'trace: alias expansion:' in command.output:\n        search = re.search(\"trace: alias expansion: ([^ ]*) => ([^\\n]*)\",\n                           command.output)\n        alias = search.group(1)\n\n        # by default git quotes everything, for example:\n        #     'commit' '--amend'\n        # which is surprising and does not allow to easily test for\n        # eg. 'git commit'\n        expansion = ' '.join(shell.quote(part)\n                             for part in shell.split_command(search.group(2)))\n        new_script = command.script.replace(alias, expansion)\n\n        command = command.update(script=new_script)\n\n    return fn(command)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "git.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/specific/git.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}