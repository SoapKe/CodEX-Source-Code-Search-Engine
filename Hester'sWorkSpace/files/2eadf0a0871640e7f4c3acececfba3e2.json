{"author": "donnemartin", "code": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\nclass SalesRanker(MRJob):\n\n    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...\n\n    def mapper(self, _ line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n\n    def reducer(self, key, value):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        yield key, sum(values)\n\n    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n\n    def reducer_identity(self, key, value):\n        yield key, value\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]\n\n\nif __name__ == '__main__':\n    HitCounts.run()\n", "comments": "   return true timestamp within past week  false otherwise                      def mapper(self    line)             parse log line  extract transform relevant lines           emit key value pairs form           (foo  p1)  2         (bar  p1)  2         (bar  p1)  1         (foo  p2)  3         (bar  p3)  10         (foo  p4)  1                     timestamp  product id  category  quantity   line split(  )         self within past week(timestamp)              yield (category  product id)  quantity      def reducer(self  key  value)             sum values key           (foo  p1)  2         (bar  p1)  3         (foo  p2)  3         (bar  p3)  10         (foo  p4)  1                     yield key  sum(values)      def mapper sort(self  key  value)             construct key ensure proper sorting           transform key value form           (foo  2)  p1         (bar  3)  p1         (foo  3)  p2         (bar  10)  p3         (foo  1)  p4          the shuffle sort step mapreduce         distributed sort keys  resulting           (category1  1)  product4         (category1  2)  product1         (category1  3)  product2         (category2  3)  product1         (category2  7)  product3                     category  product id   key         quantity   value         yield (category  quantity)  product id      def reducer identity(self  key  value)          yield key  value      def steps(self)             run map reduce steps            coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom mrjob.job import MRJob\n\n\nclass SalesRanker(MRJob):\n\n    def within_past_week(self, timestamp):\n        \"\"\"Return True if timestamp is within past week, False otherwise.\"\"\"\n        ...\n\n    def mapper(self, _ line):\n        \"\"\"Parse each log line, extract and transform relevant lines.\n\n        Emit key value pairs of the form:\n\n        (foo, p1), 2\n        (bar, p1), 2\n        (bar, p1), 1\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        timestamp, product_id, category, quantity = line.split('\\t')\n        if self.within_past_week(timestamp):\n            yield (category, product_id), quantity\n\n    def reducer(self, key, value):\n        \"\"\"Sum values for each key.\n\n        (foo, p1), 2\n        (bar, p1), 3\n        (foo, p2), 3\n        (bar, p3), 10\n        (foo, p4), 1\n        \"\"\"\n        yield key, sum(values)\n\n    def mapper_sort(self, key, value):\n        \"\"\"Construct key to ensure proper sorting.\n\n        Transform key and value to the form:\n\n        (foo, 2), p1\n        (bar, 3), p1\n        (foo, 3), p2\n        (bar, 10), p3\n        (foo, 1), p4\n\n        The shuffle/sort step of MapReduce will then do a\n        distributed sort on the keys, resulting in:\n\n        (category1, 1), product4\n        (category1, 2), product1\n        (category1, 3), product2\n        (category2, 3), product1\n        (category2, 7), product3\n        \"\"\"\n        category, product_id = key\n        quantity = value\n        yield (category, quantity), product_id\n\n    def reducer_identity(self, key, value):\n        yield key, value\n\n    def steps(self):\n        \"\"\"Run the map and reduce steps.\"\"\"\n        return [\n            self.mr(mapper=self.mapper,\n                    reducer=self.reducer),\n            self.mr(mapper=self.mapper_sort,\n                    reducer=self.reducer_identity),\n        ]\n\n\nif __name__ == '__main__':\n    HitCounts.run()\n", "description": "Learn how to design large-scale systems. Prep for the system design interview.  Includes Anki flashcards.", "file_name": "sales_rank_mapreduce.py", "id": "2eadf0a0871640e7f4c3acececfba3e2", "language": "Python", "project_name": "system-design-primer", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-system-design-primer/donnemartin-system-design-primer-b156e48/solutions/system_design/sales_rank/sales_rank_mapreduce.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:18Z", "url": "https://github.com/donnemartin/system-design-primer", "wiki": true}