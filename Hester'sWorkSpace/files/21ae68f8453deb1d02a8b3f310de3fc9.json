{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry import roles\nfrom sentry.testutils import CliTestCase\nfrom sentry.runner.commands.createuser import createuser\nfrom sentry.models import User, OrganizationMember\n\n\nclass CreateUserTest(CliTestCase):\n    command = createuser\n    default_args = ['--no-input']\n\n    def test_superuser(self):\n        rv = self.invoke(\n            '--email=you@somewhereawesome.com',\n            '--password=awesome',\n            '--superuser',\n        )\n        assert rv.exit_code == 0, rv.output\n        assert 'you@somewhereawesome.com' in rv.output\n        assert User.objects.count() == 1\n        user = User.objects.all()[0]\n        assert user.email == 'you@somewhereawesome.com'\n        assert user.check_password('awesome')\n        assert user.is_superuser\n        assert user.is_staff\n        assert user.is_active\n\n    def test_no_superuser(self):\n        rv = self.invoke(\n            '--email=you@somewhereawesome.com',\n            '--password=awesome',\n        )\n        assert rv.exit_code == 0, rv.output\n        assert 'you@somewhereawesome.com' in rv.output\n        assert User.objects.count() == 1\n        user = User.objects.all()[0]\n        assert user.email == 'you@somewhereawesome.com'\n        assert user.check_password('awesome')\n        assert not user.is_superuser\n        assert not user.is_staff\n        assert user.is_active\n\n    def test_no_password(self):\n        rv = self.invoke(\n            '--email=you@somewhereawesome.com',\n            '--no-password',\n        )\n        assert rv.exit_code == 0, rv.output\n        assert 'you@somewhereawesome.com' in rv.output\n        assert User.objects.count() == 1\n        user = User.objects.all()[0]\n        assert user.email == 'you@somewhereawesome.com'\n        assert not user.password\n        assert not user.is_superuser\n        assert not user.is_staff\n        assert user.is_active\n\n    def test_single_org(self):\n        with self.settings(SENTRY_SINGLE_ORGANIZATION=True):\n            rv = self.invoke(\n                '--email=you@somewhereawesome.com',\n                '--no-password',\n            )\n            assert rv.exit_code == 0, rv.output\n            assert 'you@somewhereawesome.com' in rv.output\n            assert OrganizationMember.objects.count() == 1\n            member = OrganizationMember.objects.all()[0]\n            assert member.user.email == 'you@somewhereawesome.com'\n            assert member.organization.slug in rv.output\n            assert member.role == member.organization.default_role\n\n    def test_single_org_superuser(self):\n        with self.settings(SENTRY_SINGLE_ORGANIZATION=True):\n            rv = self.invoke('--email=you@somewhereawesome.com', '--no-password', '--superuser')\n            assert rv.exit_code == 0, rv.output\n            assert 'you@somewhereawesome.com' in rv.output\n            assert OrganizationMember.objects.count() == 1\n            member = OrganizationMember.objects.all()[0]\n            assert member.user.email == 'you@somewhereawesome.com'\n            assert member.organization.slug in rv.output\n            assert member.role == roles.get_top_dog().id\n\n    def test_not_single_org(self):\n        with self.settings(SENTRY_SINGLE_ORGANIZATION=False):\n            rv = self.invoke(\n                '--email=you@somewhereawesome.com',\n                '--no-password',\n            )\n            assert rv.exit_code == 0, rv.output\n            assert 'you@somewhereawesome.com' in rv.output\n            assert OrganizationMember.objects.count() == 0\n\n    def test_no_input(self):\n        rv = self.invoke()\n        assert rv.exit_code != 0, rv.output\n\n    def test_missing_password(self):\n        rv = self.invoke(\n            '--email=you@somewhereawesome.com',\n        )\n        assert rv.exit_code != 0, rv.output\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry import roles\nfrom sentry.testutils import CliTestCase\nfrom sentry.runner.commands.createuser import createuser\nfrom sentry.models import User, OrganizationMember\n\n\nclass CreateUserTest(CliTestCase):\n    command = createuser\n    default_args = ['--no-input']\n\n    def test_superuser(self):\n        rv = self.invoke(\n            '--email=you@somewhereawesome.com',\n            '--password=awesome',\n            '--superuser',\n        )\n        assert rv.exit_code == 0, rv.output\n        assert 'you@somewhereawesome.com' in rv.output\n        assert User.objects.count() == 1\n        user = User.objects.all()[0]\n        assert user.email == 'you@somewhereawesome.com'\n        assert user.check_password('awesome')\n        assert user.is_superuser\n        assert user.is_staff\n        assert user.is_active\n\n    def test_no_superuser(self):\n        rv = self.invoke(\n            '--email=you@somewhereawesome.com',\n            '--password=awesome',\n        )\n        assert rv.exit_code == 0, rv.output\n        assert 'you@somewhereawesome.com' in rv.output\n        assert User.objects.count() == 1\n        user = User.objects.all()[0]\n        assert user.email == 'you@somewhereawesome.com'\n        assert user.check_password('awesome')\n        assert not user.is_superuser\n        assert not user.is_staff\n        assert user.is_active\n\n    def test_no_password(self):\n        rv = self.invoke(\n            '--email=you@somewhereawesome.com',\n            '--no-password',\n        )\n        assert rv.exit_code == 0, rv.output\n        assert 'you@somewhereawesome.com' in rv.output\n        assert User.objects.count() == 1\n        user = User.objects.all()[0]\n        assert user.email == 'you@somewhereawesome.com'\n        assert not user.password\n        assert not user.is_superuser\n        assert not user.is_staff\n        assert user.is_active\n\n    def test_single_org(self):\n        with self.settings(SENTRY_SINGLE_ORGANIZATION=True):\n            rv = self.invoke(\n                '--email=you@somewhereawesome.com',\n                '--no-password',\n            )\n            assert rv.exit_code == 0, rv.output\n            assert 'you@somewhereawesome.com' in rv.output\n            assert OrganizationMember.objects.count() == 1\n            member = OrganizationMember.objects.all()[0]\n            assert member.user.email == 'you@somewhereawesome.com'\n            assert member.organization.slug in rv.output\n            assert member.role == member.organization.default_role\n\n    def test_single_org_superuser(self):\n        with self.settings(SENTRY_SINGLE_ORGANIZATION=True):\n            rv = self.invoke('--email=you@somewhereawesome.com', '--no-password', '--superuser')\n            assert rv.exit_code == 0, rv.output\n            assert 'you@somewhereawesome.com' in rv.output\n            assert OrganizationMember.objects.count() == 1\n            member = OrganizationMember.objects.all()[0]\n            assert member.user.email == 'you@somewhereawesome.com'\n            assert member.organization.slug in rv.output\n            assert member.role == roles.get_top_dog().id\n\n    def test_not_single_org(self):\n        with self.settings(SENTRY_SINGLE_ORGANIZATION=False):\n            rv = self.invoke(\n                '--email=you@somewhereawesome.com',\n                '--no-password',\n            )\n            assert rv.exit_code == 0, rv.output\n            assert 'you@somewhereawesome.com' in rv.output\n            assert OrganizationMember.objects.count() == 0\n\n    def test_no_input(self):\n        rv = self.invoke()\n        assert rv.exit_code != 0, rv.output\n\n    def test_missing_password(self):\n        rv = self.invoke(\n            '--email=you@somewhereawesome.com',\n        )\n        assert rv.exit_code != 0, rv.output\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_createuser.py", "id": "21ae68f8453deb1d02a8b3f310de3fc9", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/runner/commands/test_createuser.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}