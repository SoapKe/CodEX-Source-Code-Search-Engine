{"author": "HelloZeroNet", "code": "import time\nimport copy\n\nimport gevent\nimport pytest\nimport mock\n\nfrom AnnounceLocal import AnnounceLocalPlugin\nfrom File import FileServer\nfrom Test import Spy\n\n@pytest.fixture\ndef announcer(file_server, site):\n    file_server.sites[site.address] = site\n    announcer = AnnounceLocalPlugin.LocalAnnouncer(file_server, listen_port=1100)\n    file_server.local_announcer = announcer\n    announcer.listen_port = 1100\n    announcer.sender_info[\"broadcast_port\"] = 1100\n    announcer.getMyIps = mock.MagicMock(return_value=[\"127.0.0.1\"])\n    announcer.discover = mock.MagicMock(return_value=False)  \n    gevent.spawn(announcer.start)\n    time.sleep(0.5)\n\n    assert file_server.local_announcer.running\n    return file_server.local_announcer\n\n@pytest.fixture\ndef announcer_remote(site_temp):\n    file_server_remote = FileServer(\"127.0.0.1\", 1545)\n    file_server_remote.sites[site_temp.address] = site_temp\n    announcer = AnnounceLocalPlugin.LocalAnnouncer(file_server_remote, listen_port=1101)\n    file_server_remote.local_announcer = announcer\n    announcer.listen_port = 1101\n    announcer.sender_info[\"broadcast_port\"] = 1101\n    announcer.getMyIps = mock.MagicMock(return_value=[\"127.0.0.1\"])\n    announcer.discover = mock.MagicMock(return_value=False)  \n    gevent.spawn(announcer.start)\n    time.sleep(0.5)\n\n    assert file_server_remote.local_announcer.running\n    return file_server_remote.local_announcer\n\n@pytest.mark.usefixtures(\"resetSettings\")\n@pytest.mark.usefixtures(\"resetTempSettings\")\nclass TestAnnounce:\n    def testSenderInfo(self, announcer):\n        sender_info = announcer.sender_info\n        assert sender_info[\"port\"] > 0\n        assert len(sender_info[\"peer_id\"]) == 20\n        assert sender_info[\"rev\"] > 0\n\n    def testIgnoreSelfMessages(self, announcer):\n        \n        assert not announcer.handleMessage((\"0.0.0.0\", 123), {\"cmd\": \"discoverRequest\", \"sender\": announcer.sender_info, \"params\": {}})[1]\n\n        \n        sender_info = copy.copy(announcer.sender_info)\n        sender_info[\"peer_id\"] += \"-\"\n        addr, res = announcer.handleMessage((\"0.0.0.0\", 123), {\"cmd\": \"discoverRequest\", \"sender\": sender_info, \"params\": {}})\n        assert res[\"params\"][\"sites_changed\"] > 0\n\n    def testDiscoverRequest(self, announcer, announcer_remote):\n        assert len(announcer_remote.known_peers) == 0\n        with Spy.Spy(announcer_remote, \"handleMessage\") as responses:\n            announcer_remote.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=announcer.listen_port)\n            time.sleep(0.1)\n\n        response_cmds = [response[1][\"cmd\"] for response in responses]\n        assert response_cmds == [\"discoverResponse\", \"siteListResponse\"]\n        assert len(responses[-1][1][\"params\"][\"sites\"]) == 1\n\n        \n        with Spy.Spy(announcer_remote, \"handleMessage\") as responses:\n            announcer_remote.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=announcer.listen_port)\n            time.sleep(0.1)\n\n        response_cmds = [response[1][\"cmd\"] for response in responses]\n        assert response_cmds == [\"discoverResponse\"]\n\n    def testPeerDiscover(self, announcer, announcer_remote, site):\n        assert announcer.server.peer_id != announcer_remote.server.peer_id\n        assert len(announcer.server.sites.values()[0].peers) == 0\n        announcer.broadcast({\"cmd\": \"discoverRequest\"}, port=announcer_remote.listen_port)\n        time.sleep(0.1)\n        assert len(announcer.server.sites.values()[0].peers) == 1\n\n    def testRecentPeerList(self, announcer, announcer_remote, site):\n        assert len(site.peers_recent) == 0\n        assert len(site.peers) == 0\n        with Spy.Spy(announcer, \"handleMessage\") as responses:\n            announcer.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=announcer_remote.listen_port)\n            time.sleep(0.1)\n        assert [response[1][\"cmd\"] for response in responses] == [\"discoverResponse\", \"siteListResponse\"]\n        assert len(site.peers_recent) == 1\n        assert len(site.peers) == 1\n\n        \n        last_time_found = site.peers.values()[0].time_found\n        site.peers_recent.clear()\n        with Spy.Spy(announcer, \"handleMessage\") as responses:\n            announcer.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=announcer_remote.listen_port)\n            time.sleep(0.1)\n        assert [response[1][\"cmd\"] for response in responses] == [\"discoverResponse\"]\n        assert len(site.peers_recent) == 1\n        assert site.peers.values()[0].time_found > last_time_found\n\n\n", "comments": "  don send discover requests automatically    don send discover requests automatically    no response messages peer id server    response messages different peer id    it request sitelist sites changed value different last response    it update peer without sitelistresponse ", "content": "import time\nimport copy\n\nimport gevent\nimport pytest\nimport mock\n\nfrom AnnounceLocal import AnnounceLocalPlugin\nfrom File import FileServer\nfrom Test import Spy\n\n@pytest.fixture\ndef announcer(file_server, site):\n    file_server.sites[site.address] = site\n    announcer = AnnounceLocalPlugin.LocalAnnouncer(file_server, listen_port=1100)\n    file_server.local_announcer = announcer\n    announcer.listen_port = 1100\n    announcer.sender_info[\"broadcast_port\"] = 1100\n    announcer.getMyIps = mock.MagicMock(return_value=[\"127.0.0.1\"])\n    announcer.discover = mock.MagicMock(return_value=False)  # Don't send discover requests automatically\n    gevent.spawn(announcer.start)\n    time.sleep(0.5)\n\n    assert file_server.local_announcer.running\n    return file_server.local_announcer\n\n@pytest.fixture\ndef announcer_remote(site_temp):\n    file_server_remote = FileServer(\"127.0.0.1\", 1545)\n    file_server_remote.sites[site_temp.address] = site_temp\n    announcer = AnnounceLocalPlugin.LocalAnnouncer(file_server_remote, listen_port=1101)\n    file_server_remote.local_announcer = announcer\n    announcer.listen_port = 1101\n    announcer.sender_info[\"broadcast_port\"] = 1101\n    announcer.getMyIps = mock.MagicMock(return_value=[\"127.0.0.1\"])\n    announcer.discover = mock.MagicMock(return_value=False)  # Don't send discover requests automatically\n    gevent.spawn(announcer.start)\n    time.sleep(0.5)\n\n    assert file_server_remote.local_announcer.running\n    return file_server_remote.local_announcer\n\n@pytest.mark.usefixtures(\"resetSettings\")\n@pytest.mark.usefixtures(\"resetTempSettings\")\nclass TestAnnounce:\n    def testSenderInfo(self, announcer):\n        sender_info = announcer.sender_info\n        assert sender_info[\"port\"] > 0\n        assert len(sender_info[\"peer_id\"]) == 20\n        assert sender_info[\"rev\"] > 0\n\n    def testIgnoreSelfMessages(self, announcer):\n        # No response to messages that has same peer_id as server\n        assert not announcer.handleMessage((\"0.0.0.0\", 123), {\"cmd\": \"discoverRequest\", \"sender\": announcer.sender_info, \"params\": {}})[1]\n\n        # Response to messages with different peer id\n        sender_info = copy.copy(announcer.sender_info)\n        sender_info[\"peer_id\"] += \"-\"\n        addr, res = announcer.handleMessage((\"0.0.0.0\", 123), {\"cmd\": \"discoverRequest\", \"sender\": sender_info, \"params\": {}})\n        assert res[\"params\"][\"sites_changed\"] > 0\n\n    def testDiscoverRequest(self, announcer, announcer_remote):\n        assert len(announcer_remote.known_peers) == 0\n        with Spy.Spy(announcer_remote, \"handleMessage\") as responses:\n            announcer_remote.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=announcer.listen_port)\n            time.sleep(0.1)\n\n        response_cmds = [response[1][\"cmd\"] for response in responses]\n        assert response_cmds == [\"discoverResponse\", \"siteListResponse\"]\n        assert len(responses[-1][1][\"params\"][\"sites\"]) == 1\n\n        # It should only request siteList if sites_changed value is different from last response\n        with Spy.Spy(announcer_remote, \"handleMessage\") as responses:\n            announcer_remote.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=announcer.listen_port)\n            time.sleep(0.1)\n\n        response_cmds = [response[1][\"cmd\"] for response in responses]\n        assert response_cmds == [\"discoverResponse\"]\n\n    def testPeerDiscover(self, announcer, announcer_remote, site):\n        assert announcer.server.peer_id != announcer_remote.server.peer_id\n        assert len(announcer.server.sites.values()[0].peers) == 0\n        announcer.broadcast({\"cmd\": \"discoverRequest\"}, port=announcer_remote.listen_port)\n        time.sleep(0.1)\n        assert len(announcer.server.sites.values()[0].peers) == 1\n\n    def testRecentPeerList(self, announcer, announcer_remote, site):\n        assert len(site.peers_recent) == 0\n        assert len(site.peers) == 0\n        with Spy.Spy(announcer, \"handleMessage\") as responses:\n            announcer.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=announcer_remote.listen_port)\n            time.sleep(0.1)\n        assert [response[1][\"cmd\"] for response in responses] == [\"discoverResponse\", \"siteListResponse\"]\n        assert len(site.peers_recent) == 1\n        assert len(site.peers) == 1\n\n        # It should update peer without siteListResponse\n        last_time_found = site.peers.values()[0].time_found\n        site.peers_recent.clear()\n        with Spy.Spy(announcer, \"handleMessage\") as responses:\n            announcer.broadcast({\"cmd\": \"discoverRequest\", \"params\": {}}, port=announcer_remote.listen_port)\n            time.sleep(0.1)\n        assert [response[1][\"cmd\"] for response in responses] == [\"discoverResponse\"]\n        assert len(site.peers_recent) == 1\n        assert site.peers.values()[0].time_found > last_time_found\n\n\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "TestAnnounce.py", "id": "ffd7b5fbc4127d28f8cb4353b8b0cc6b", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/AnnounceLocal/Test/TestAnnounce.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}