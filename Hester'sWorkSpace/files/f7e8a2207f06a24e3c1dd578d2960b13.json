{"author": "donnemartin", "code": "# -*- coding: utf-8 -*-\n\nclass Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False\n\n\nclass Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n\n\nclass LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  \n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n\n\nclass PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  \n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n\n\nclass UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        \n        \n        pass\n", "comments": "      coding  utf 8        key  person id  value  person server    key  person id  value  person    use self visited ids track visited nodes    use self lookup translate person id person ", "content": "# -*- coding: utf-8 -*-\n\nclass Graph(object):\n\n    def bfs(self, source, dest):\n        if source is None:\n            return False\n        queue = deque()\n        queue.append(source)\n        source.visit_state = State.visited\n        while queue:\n            node = queue.popleft()\n            print(node)\n            if dest is node:\n                return True\n            for adjacent_node in node.adj_nodes.values():\n                if adjacent_node.visit_state == State.unvisited:\n                    queue.append(adjacent_node)\n                    adjacent_node.visit_state = State.visited\n        return False\n\n\nclass Person(object):\n\n    def __init__(self, id, name):\n        self.id = id\n        self.name = name\n        self.friend_ids = []\n\n\nclass LookupService(object):\n\n    def __init__(self):\n        self.lookup = {}  # key: person_id, value: person_server\n\n    def get_person(self, person_id):\n        person_server = self.lookup[person_id]\n        return person_server.people[person_id]\n\n\nclass PersonServer(object):\n\n    def __init__(self):\n        self.people = {}  # key: person_id, value: person\n\n    def get_people(self, ids):\n        results = []\n        for id in ids:\n            if id in self.people:\n                results.append(self.people[id])\n        return results\n\n\nclass UserGraphService(object):\n\n    def __init__(self, person_ids, lookup):\n        self.lookup = lookup\n        self.person_ids = person_ids\n        self.visited_ids = set()\n\n    def bfs(self, source, dest):\n        # Use self.visited_ids to track visited nodes\n        # Use self.lookup to translate a person_id to a Person\n        pass\n", "description": "Learn how to design large-scale systems. Prep for the system design interview.  Includes Anki flashcards.", "file_name": "social_graph_snippets.py", "id": "f7e8a2207f06a24e3c1dd578d2960b13", "language": "Python", "project_name": "system-design-primer", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-system-design-primer/donnemartin-system-design-primer-b156e48/solutions/system_design/social_graph/social_graph_snippets.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:18Z", "url": "https://github.com/donnemartin/system-design-primer", "wiki": true}