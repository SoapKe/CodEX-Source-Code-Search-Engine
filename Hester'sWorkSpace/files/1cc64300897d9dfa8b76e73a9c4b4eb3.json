{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom datetime import timedelta\nfrom django.utils import timezone\n\nfrom sentry.models import (Activity, Group, GroupResolution, GroupStatus, Release)\nfrom sentry.tasks.clear_expired_resolutions import clear_expired_resolutions\nfrom sentry.testutils import TestCase\n\n\nclass ClearExpiredResolutionsTest(TestCase):\n    def test_task_persistent_name(self):\n        assert clear_expired_resolutions.name == 'sentry.tasks.clear_expired_resolutions'\n\n    def test_simple(self):\n        project = self.create_project()\n\n        old_release = Release.objects.create(\n            organization_id=project.organization_id,\n            version='a',\n        )\n        old_release.add_project(project)\n\n        group1 = self.create_group(\n            project=project,\n            status=GroupStatus.RESOLVED,\n            active_at=timezone.now(),\n        )\n        resolution1 = GroupResolution.objects.create(\n            group=group1,\n            release=old_release,\n            type=GroupResolution.Type.in_next_release,\n        )\n        activity1 = Activity.objects.create(\n            group=group1,\n            project=project,\n            type=Activity.SET_RESOLVED_IN_RELEASE,\n            ident=resolution1.id,\n            data={'version': ''},\n        )\n\n        new_release = Release.objects.create(\n            organization_id=project.organization_id,\n            version='b',\n            date_added=timezone.now() + timedelta(minutes=1),\n        )\n        new_release.add_project(project)\n\n        group2 = self.create_group(\n            status=GroupStatus.UNRESOLVED,\n            active_at=timezone.now(),\n        )\n        resolution2 = GroupResolution.objects.create(\n            group=group2,\n            release=new_release,\n            type=GroupResolution.Type.in_next_release,\n        )\n        activity2 = Activity.objects.create(\n            group=group2,\n            project=project,\n            type=Activity.SET_RESOLVED_IN_RELEASE,\n            ident=resolution2.id,\n            data={'version': ''},\n        )\n\n        clear_expired_resolutions(new_release.id)\n\n        assert Group.objects.get(\n            id=group1.id,\n        ).status == GroupStatus.RESOLVED\n\n        assert Group.objects.get(\n            id=group2.id,\n        ).status == GroupStatus.UNRESOLVED\n\n        \n        \n        resolution1 = GroupResolution.objects.get(id=resolution1.id)\n        assert resolution1.status == GroupResolution.Status.resolved\n        assert resolution1.release == new_release\n        assert resolution1.type == GroupResolution.Type.in_release\n\n        resolution2 = GroupResolution.objects.get(id=resolution2.id)\n        assert resolution2.status == GroupResolution.Status.pending\n\n        activity1 = Activity.objects.get(id=activity1.id)\n        assert activity1.data['version'] == new_release.version\n\n        activity2 = Activity.objects.get(id=activity2.id)\n        assert activity2.data['version'] == ''\n", "comments": "  row updated release type  reflect    release reoslved ", "content": "from __future__ import absolute_import\n\nfrom datetime import timedelta\nfrom django.utils import timezone\n\nfrom sentry.models import (Activity, Group, GroupResolution, GroupStatus, Release)\nfrom sentry.tasks.clear_expired_resolutions import clear_expired_resolutions\nfrom sentry.testutils import TestCase\n\n\nclass ClearExpiredResolutionsTest(TestCase):\n    def test_task_persistent_name(self):\n        assert clear_expired_resolutions.name == 'sentry.tasks.clear_expired_resolutions'\n\n    def test_simple(self):\n        project = self.create_project()\n\n        old_release = Release.objects.create(\n            organization_id=project.organization_id,\n            version='a',\n        )\n        old_release.add_project(project)\n\n        group1 = self.create_group(\n            project=project,\n            status=GroupStatus.RESOLVED,\n            active_at=timezone.now(),\n        )\n        resolution1 = GroupResolution.objects.create(\n            group=group1,\n            release=old_release,\n            type=GroupResolution.Type.in_next_release,\n        )\n        activity1 = Activity.objects.create(\n            group=group1,\n            project=project,\n            type=Activity.SET_RESOLVED_IN_RELEASE,\n            ident=resolution1.id,\n            data={'version': ''},\n        )\n\n        new_release = Release.objects.create(\n            organization_id=project.organization_id,\n            version='b',\n            date_added=timezone.now() + timedelta(minutes=1),\n        )\n        new_release.add_project(project)\n\n        group2 = self.create_group(\n            status=GroupStatus.UNRESOLVED,\n            active_at=timezone.now(),\n        )\n        resolution2 = GroupResolution.objects.create(\n            group=group2,\n            release=new_release,\n            type=GroupResolution.Type.in_next_release,\n        )\n        activity2 = Activity.objects.create(\n            group=group2,\n            project=project,\n            type=Activity.SET_RESOLVED_IN_RELEASE,\n            ident=resolution2.id,\n            data={'version': ''},\n        )\n\n        clear_expired_resolutions(new_release.id)\n\n        assert Group.objects.get(\n            id=group1.id,\n        ).status == GroupStatus.RESOLVED\n\n        assert Group.objects.get(\n            id=group2.id,\n        ).status == GroupStatus.UNRESOLVED\n\n        # row should be updated to the in_release type, and reflect\n        # the release it was reoslved in\n        resolution1 = GroupResolution.objects.get(id=resolution1.id)\n        assert resolution1.status == GroupResolution.Status.resolved\n        assert resolution1.release == new_release\n        assert resolution1.type == GroupResolution.Type.in_release\n\n        resolution2 = GroupResolution.objects.get(id=resolution2.id)\n        assert resolution2.status == GroupResolution.Status.pending\n\n        activity1 = Activity.objects.get(id=activity1.id)\n        assert activity1.data['version'] == new_release.version\n\n        activity2 = Activity.objects.get(id=activity2.id)\n        assert activity2.data['version'] == ''\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_clear_expired_resolutions.py", "id": "1cc64300897d9dfa8b76e73a9c4b4eb3", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_clear_expired_resolutions.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}