{"author": "django", "code": "import datetime\nimport itertools\nimport tempfile\n\nfrom django.core.files.storage import FileSystemStorage\nfrom django.db import models\n\ncallable_default_counter = itertools.count()\n\n\ndef callable_default():\n    return next(callable_default_counter)\n\n\ntemp_storage = FileSystemStorage(location=tempfile.mkdtemp())\n\n\nclass BoundaryModel(models.Model):\n    positive_integer = models.PositiveIntegerField(null=True, blank=True)\n\n\nclass Defaults(models.Model):\n    name = models.CharField(max_length=255, default='class default value')\n    def_date = models.DateField(default=datetime.date(1980, 1, 1))\n    value = models.IntegerField(default=42)\n    callable_default = models.IntegerField(default=callable_default)\n\n\nclass ChoiceModel(models.Model):\n    \"\"\"For ModelChoiceField and ModelMultipleChoiceField tests.\"\"\"\n    CHOICES = [\n        ('', 'No Preference'),\n        ('f', 'Foo'),\n        ('b', 'Bar'),\n    ]\n\n    INTEGER_CHOICES = [\n        (None, 'No Preference'),\n        (1, 'Foo'),\n        (2, 'Bar'),\n    ]\n\n    STRING_CHOICES_WITH_NONE = [\n        (None, 'No Preference'),\n        ('f', 'Foo'),\n        ('b', 'Bar'),\n    ]\n\n    name = models.CharField(max_length=10)\n    choice = models.CharField(max_length=2, blank=True, choices=CHOICES)\n    choice_string_w_none = models.CharField(\n        max_length=2, blank=True, null=True, choices=STRING_CHOICES_WITH_NONE)\n    choice_integer = models.IntegerField(choices=INTEGER_CHOICES, blank=True,\n                                         null=True)\n\n\nclass ChoiceOptionModel(models.Model):\n    \"\"\"Destination for ChoiceFieldModel's ForeignKey.\n    Can't reuse ChoiceModel because error_message tests require that it have no instances.\"\"\"\n    name = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return 'ChoiceOption %d' % self.pk\n\n\ndef choice_default():\n    return ChoiceOptionModel.objects.get_or_create(name='default')[0].pk\n\n\ndef choice_default_list():\n    return [choice_default()]\n\n\ndef int_default():\n    return 1\n\n\ndef int_list_default():\n    return [1]\n\n\nclass ChoiceFieldModel(models.Model):\n    \"\"\"Model with ForeignKey to another model, for testing ModelForm\n    generation with ModelChoiceField.\"\"\"\n    choice = models.ForeignKey(\n        ChoiceOptionModel,\n        models.CASCADE,\n        blank=False,\n        default=choice_default,\n    )\n    choice_int = models.ForeignKey(\n        ChoiceOptionModel,\n        models.CASCADE,\n        blank=False,\n        related_name='choice_int',\n        default=int_default,\n    )\n    multi_choice = models.ManyToManyField(\n        ChoiceOptionModel,\n        blank=False,\n        related_name='multi_choice',\n        default=choice_default_list,\n    )\n    multi_choice_int = models.ManyToManyField(\n        ChoiceOptionModel,\n        blank=False,\n        related_name='multi_choice_int',\n        default=int_list_default,\n    )\n\n\nclass OptionalMultiChoiceModel(models.Model):\n    multi_choice = models.ManyToManyField(\n        ChoiceOptionModel,\n        blank=False,\n        related_name='not_relevant',\n        default=choice_default,\n    )\n    multi_choice_optional = models.ManyToManyField(\n        ChoiceOptionModel,\n        blank=True,\n        related_name='not_relevant2',\n    )\n\n\nclass FileModel(models.Model):\n    file = models.FileField(storage=temp_storage, upload_to='tests')\n\n\nclass Article(models.Model):\n    content = models.TextField()\n", "comments": "   for modelchoicefield modelmultiplechoicefield tests         choices             (     no preference )          ( f    foo )          ( b    bar )             integer choices             (none   no preference )          (1   foo )          (2   bar )             string choices with none             (none   no preference )          ( f    foo )          ( b    bar )             name   models charfield(max length 10)     choice   models charfield(max length 2  blank true  choices choices)     choice string w none   models charfield(         max length 2  blank true  null true  choices string choices with none)     choice integer   models integerfield(choices integer choices  blank true                                           null true)   class choiceoptionmodel(models model)         destination choicefieldmodel foreignkey      can reuse choicemodel error message tests require instances         name   models charfield(max length 10)      class meta          ordering   ( name  )      def   str  (self)          return  choiceoption     self pk   def choice default()      return choiceoptionmodel objects get create(name  default ) 0  pk   def choice default list()      return  choice default()    def int default()      return 1   def int list default()      return  1    class choicefieldmodel(models model)         model foreignkey another model  testing modelform     generation modelchoicefield     ", "content": "import datetime\nimport itertools\nimport tempfile\n\nfrom django.core.files.storage import FileSystemStorage\nfrom django.db import models\n\ncallable_default_counter = itertools.count()\n\n\ndef callable_default():\n    return next(callable_default_counter)\n\n\ntemp_storage = FileSystemStorage(location=tempfile.mkdtemp())\n\n\nclass BoundaryModel(models.Model):\n    positive_integer = models.PositiveIntegerField(null=True, blank=True)\n\n\nclass Defaults(models.Model):\n    name = models.CharField(max_length=255, default='class default value')\n    def_date = models.DateField(default=datetime.date(1980, 1, 1))\n    value = models.IntegerField(default=42)\n    callable_default = models.IntegerField(default=callable_default)\n\n\nclass ChoiceModel(models.Model):\n    \"\"\"For ModelChoiceField and ModelMultipleChoiceField tests.\"\"\"\n    CHOICES = [\n        ('', 'No Preference'),\n        ('f', 'Foo'),\n        ('b', 'Bar'),\n    ]\n\n    INTEGER_CHOICES = [\n        (None, 'No Preference'),\n        (1, 'Foo'),\n        (2, 'Bar'),\n    ]\n\n    STRING_CHOICES_WITH_NONE = [\n        (None, 'No Preference'),\n        ('f', 'Foo'),\n        ('b', 'Bar'),\n    ]\n\n    name = models.CharField(max_length=10)\n    choice = models.CharField(max_length=2, blank=True, choices=CHOICES)\n    choice_string_w_none = models.CharField(\n        max_length=2, blank=True, null=True, choices=STRING_CHOICES_WITH_NONE)\n    choice_integer = models.IntegerField(choices=INTEGER_CHOICES, blank=True,\n                                         null=True)\n\n\nclass ChoiceOptionModel(models.Model):\n    \"\"\"Destination for ChoiceFieldModel's ForeignKey.\n    Can't reuse ChoiceModel because error_message tests require that it have no instances.\"\"\"\n    name = models.CharField(max_length=10)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return 'ChoiceOption %d' % self.pk\n\n\ndef choice_default():\n    return ChoiceOptionModel.objects.get_or_create(name='default')[0].pk\n\n\ndef choice_default_list():\n    return [choice_default()]\n\n\ndef int_default():\n    return 1\n\n\ndef int_list_default():\n    return [1]\n\n\nclass ChoiceFieldModel(models.Model):\n    \"\"\"Model with ForeignKey to another model, for testing ModelForm\n    generation with ModelChoiceField.\"\"\"\n    choice = models.ForeignKey(\n        ChoiceOptionModel,\n        models.CASCADE,\n        blank=False,\n        default=choice_default,\n    )\n    choice_int = models.ForeignKey(\n        ChoiceOptionModel,\n        models.CASCADE,\n        blank=False,\n        related_name='choice_int',\n        default=int_default,\n    )\n    multi_choice = models.ManyToManyField(\n        ChoiceOptionModel,\n        blank=False,\n        related_name='multi_choice',\n        default=choice_default_list,\n    )\n    multi_choice_int = models.ManyToManyField(\n        ChoiceOptionModel,\n        blank=False,\n        related_name='multi_choice_int',\n        default=int_list_default,\n    )\n\n\nclass OptionalMultiChoiceModel(models.Model):\n    multi_choice = models.ManyToManyField(\n        ChoiceOptionModel,\n        blank=False,\n        related_name='not_relevant',\n        default=choice_default,\n    )\n    multi_choice_optional = models.ManyToManyField(\n        ChoiceOptionModel,\n        blank=True,\n        related_name='not_relevant2',\n    )\n\n\nclass FileModel(models.Model):\n    file = models.FileField(storage=temp_storage, upload_to='tests')\n\n\nclass Article(models.Model):\n    content = models.TextField()\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "1e2673b58fe804084c9dff7bdd67902e", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/forms_tests/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}