{"author": "django", "code": "import datetime\nimport pickle\n\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.utils.version import get_version\n\nfrom .models import Container, Event, Group, Happening, M2MModel\n\n\nclass PickleabilityTestCase(TestCase):\n    def setUp(self):\n        Happening.objects.create()  # make sure the defaults are working (#20158)\n\n    def assert_pickles(self, qs):\n        self.assertEqual(list(pickle.loads(pickle.dumps(qs))), list(qs))\n\n    def test_related_field(self):\n        g = Group.objects.create(name=\"Ponies Who Own Maybachs\")\n        self.assert_pickles(Event.objects.filter(group=g.id))\n\n    def test_datetime_callable_default_all(self):\n        self.assert_pickles(Happening.objects.all())\n\n    def test_datetime_callable_default_filter(self):\n        self.assert_pickles(Happening.objects.filter(when=datetime.datetime.now()))\n\n    def test_string_as_default(self):\n        self.assert_pickles(Happening.objects.filter(name=\"test\"))\n\n    def test_standalone_method_as_default(self):\n        self.assert_pickles(Happening.objects.filter(number1=1))\n\n    def test_staticmethod_as_default(self):\n        self.assert_pickles(Happening.objects.filter(number2=1))\n\n    def test_filter_reverse_fk(self):\n        self.assert_pickles(Group.objects.filter(event=1))\n\n    def test_doesnotexist_exception(self):\n        \n        original = Event.DoesNotExist(\"Doesn't exist\")\n        unpickled = pickle.loads(pickle.dumps(original))\n\n        \n        # can't just use assertEqual(original, unpickled)\n        self.assertEqual(original.__class__, unpickled.__class__)\n        self.assertEqual(original.args, unpickled.args)\n\n    def test_doesnotexist_class(self):\n        klass = Event.DoesNotExist\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n\n    def test_multipleobjectsreturned_class(self):\n        klass = Event.MultipleObjectsReturned\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n\n    def test_forward_relatedobjectdoesnotexist_class(self):\n        \n        klass = Event.group.RelatedObjectDoesNotExist\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n        \n        klass = Happening.event.RelatedObjectDoesNotExist\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n\n    def test_reverse_one_to_one_relatedobjectdoesnotexist_class(self):\n        klass = Event.happening.RelatedObjectDoesNotExist\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n\n    def test_manager_pickle(self):\n        pickle.loads(pickle.dumps(Happening.objects))\n\n    def test_model_pickle(self):\n        \"\"\"\n        A model not defined on module level is picklable.\n        \"\"\"\n        original = Container.SomeModel(pk=1)\n        dumped = pickle.dumps(original)\n        reloaded = pickle.loads(dumped)\n        self.assertEqual(original, reloaded)\n        \n        Container.SomeModel.objects.create(somefield=1)\n        original = Container.SomeModel.objects.defer('somefield')[0]\n        dumped = pickle.dumps(original)\n        reloaded = pickle.loads(dumped)\n        self.assertEqual(original, reloaded)\n        self.assertEqual(original.somefield, reloaded.somefield)\n\n    def test_model_pickle_m2m(self):\n        \"\"\"\n        Test intentionally the automatically created through model.\n        \"\"\"\n        m1 = M2MModel.objects.create()\n        g1 = Group.objects.create(name='foof')\n        m1.groups.add(g1)\n        m2m_through = M2MModel._meta.get_field('groups').remote_field.through\n        original = m2m_through.objects.get()\n        dumped = pickle.dumps(original)\n        reloaded = pickle.loads(dumped)\n        self.assertEqual(original, reloaded)\n\n    def test_model_pickle_dynamic(self):\n        class Meta:\n            proxy = True\n        dynclass = type(\"DynamicEventSubclass\", (Event,), {'Meta': Meta, '__module__': Event.__module__})\n        original = dynclass(pk=1)\n        dumped = pickle.dumps(original)\n        reloaded = pickle.loads(dumped)\n        self.assertEqual(original, reloaded)\n        self.assertIs(reloaded.__class__, dynclass)\n\n    def test_specialized_queryset(self):\n        self.assert_pickles(Happening.objects.values('name'))\n        self.assert_pickles(Happening.objects.values('name').dates('when', 'year'))\n        # With related field (#14515)\n        self.assert_pickles(\n            Event.objects.select_related('group').order_by('title').values_list('title', 'group__name')\n        )\n\n    def test_pickle_prefetch_related_idempotence(self):\n        g = Group.objects.create(name='foo')\n        groups = Group.objects.prefetch_related('event_set')\n\n        \n        groups = pickle.loads(pickle.dumps(groups))\n        self.assertSequenceEqual(groups, [g])\n\n        \n        groups = pickle.loads(pickle.dumps(groups))\n        self.assertSequenceEqual(groups, [g])\n\n    def test_pickle_prefetch_queryset_usable_outside_of_prefetch(self):\n        \n        \n        Group.objects.create(name='foo')\n        events = Event.objects.order_by('id')\n        Group.objects.prefetch_related(models.Prefetch('event_set', queryset=events))\n        with self.assertNumQueries(1):\n            events2 = pickle.loads(pickle.dumps(events))\n        with self.assertNumQueries(0):\n            list(events2)\n\n    def test_pickle_prefetch_queryset_still_usable(self):\n        g = Group.objects.create(name='foo')\n        groups = Group.objects.prefetch_related(\n            models.Prefetch('event_set', queryset=Event.objects.order_by('id'))\n        )\n        groups2 = pickle.loads(pickle.dumps(groups))\n        self.assertSequenceEqual(groups2.filter(id__gte=0), [g])\n\n    def test_pickle_prefetch_queryset_not_evaluated(self):\n        Group.objects.create(name='foo')\n        groups = Group.objects.prefetch_related(\n            models.Prefetch('event_set', queryset=Event.objects.order_by('id'))\n        )\n        list(groups)  \n        with self.assertNumQueries(0):\n            pickle.loads(pickle.dumps(groups))\n\n    def test_pickle_prefetch_related_with_m2m_and_objects_deletion(self):\n        \"\"\"\n        ()\n        caused subsequent QuerySet pickling to fail.\n        \"\"\"\n        g = Group.objects.create(name='foo')\n        m2m = M2MModel.objects.create()\n        m2m.groups.add(g)\n        Group.objects.all().delete()\n\n        m2ms = M2MModel.objects.prefetch_related('groups')\n        m2ms = pickle.loads(pickle.dumps(m2ms))\n        self.assertSequenceEqual(m2ms, [m2m])\n\n    def test_annotation_with_callable_default(self):\n        \n        qs = Happening.objects.annotate(latest_time=models.Max('when'))\n        self.assert_pickles(qs)\n\n    def test_missing_django_version_unpickling(self):\n        \"\"\"\n        \n        unpickled without a Django version\n        \"\"\"\n        qs = Group.missing_django_version_objects.all()\n        msg = \"Pickled queryset instance's Django version is not specified.\"\n        with self.assertRaisesMessage(RuntimeWarning, msg):\n            pickle.loads(pickle.dumps(qs))\n\n    def test_unsupported_unpickle(self):\n        \"\"\"\n        \n        unpickled with a different Django version than the current\n        \"\"\"\n        qs = Group.previous_django_version_objects.all()\n        msg = \"Pickled queryset instance's Django version 1.0 does not match the current version %s.\" % get_version()\n        with self.assertRaisesMessage(RuntimeWarning, msg):\n            pickle.loads(pickle.dumps(qs))\n\n\nclass InLookupTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        for i in range(1, 3):\n            group = Group.objects.create(name='Group {}'.format(i))\n        cls.e1 = Event.objects.create(title='Event 1', group=group)\n\n    def test_in_lookup_queryset_evaluation(self):\n        \"\"\"\n        Neither pickling nor unpickling a QuerySet.query with an __in=inner_qs\n        lookup should evaluate inner_qs.\n        \"\"\"\n        events = Event.objects.filter(group__in=Group.objects.all())\n\n        with self.assertNumQueries(0):\n            dumped = pickle.dumps(events.query)\n\n        with self.assertNumQueries(0):\n            reloaded = pickle.loads(dumped)\n            reloaded_events = Event.objects.none()\n            reloaded_events.query = reloaded\n\n        self.assertSequenceEqual(reloaded_events, [self.e1])\n\n    def test_in_lookup_query_evaluation(self):\n        events = Event.objects.filter(group__in=Group.objects.values('id').query)\n\n        with self.assertNumQueries(0):\n            dumped = pickle.dumps(events.query)\n\n        with self.assertNumQueries(0):\n            reloaded = pickle.loads(dumped)\n            reloaded_events = Event.objects.none()\n            reloaded_events.query = reloaded\n\n        self.assertSequenceEqual(reloaded_events, [self.e1])\n", "comments": "            a model defined module level picklable                      original   container somemodel(pk 1)         dumped   pickle dumps(original)         reloaded   pickle loads(dumped)         self assertequal(original  reloaded)           also  deferred dynamic model works         container somemodel objects create(somefield 1)         original   container somemodel objects defer( somefield ) 0          dumped   pickle dumps(original)         reloaded   pickle loads(dumped)         self assertequal(original  reloaded)         self assertequal(original somefield  reloaded somefield)      def test model pickle m2m(self)                      test intentionally automatically created model                      m1   m2mmodel objects create()         g1   group objects create(name  foof )         m1 groups add(g1)         m2m   m2mmodel  meta get field( groups ) remote field         original   m2m objects get()         dumped   pickle dumps(original)         reloaded   pickle loads(dumped)         self assertequal(original  reloaded)      def test model pickle dynamic(self)          class meta              proxy   true         dynclass   type( dynamiceventsubclass   (event )    meta   meta     module     event   module   )         original   dynclass(pk 1)         dumped   pickle dumps(original)         reloaded   pickle loads(dumped)         self assertequal(original  reloaded)         self assertis(reloaded   class    dynclass)      def test specialized queryset(self)          self assert pickles(happening objects values( name ))         self assert pickles(happening objects values( name ) dates(    year ))           with related field ( 14515)         self assert pickles(             event objects select related( group ) order by( title ) values list( title    group  name )         )      def test pickle prefetch related idempotence(self)          g   group objects create(name  foo )         groups   group objects prefetch related( event set )            first pickling         groups   pickle loads(pickle dumps(groups))         self assertsequenceequal(groups   g )            second pickling         groups   pickle loads(pickle dumps(groups))         self assertsequenceequal(groups   g )      def test pickle prefetch queryset usable outside prefetch(self)            prefetch affect fetch pickle behavior           queryset passed          group objects create(name  foo )         events   event objects order by( id )         group objects prefetch related(models prefetch( event set   queryset events))         self assertnumqueries(1)              events2   pickle loads(pickle dumps(events))         self assertnumqueries(0)              list(events2)      def test pickle prefetch queryset still usable(self)          g   group objects create(name  foo )         groups   group objects prefetch related(             models prefetch( event set   queryset event objects order by( id ))         )         groups2   pickle loads(pickle dumps(groups))         self assertsequenceequal(groups2 filter(id  gte 0)   g )      def test pickle prefetch queryset evaluated(self)          group objects create(name  foo )         groups   group objects prefetch related(             models prefetch( event set   queryset event objects order by( id ))         )         list(groups)    evaluate queryset         self assertnumqueries(0)              pickle loads(pickle dumps(groups))      def test pickle prefetch related m2m objects deletion(self)                       24831    cached properties manytoonerel created queryset delete()         caused subsequent queryset pickling fail                      g   group objects create(name  foo )         m2m   m2mmodel objects create()         m2m groups add(g)         group objects all() delete()          m2ms   m2mmodel objects prefetch related( groups )         m2ms   pickle loads(pickle dumps(m2ms))         self assertsequenceequal(m2ms   m2m )      def test annotation callable default(self)            happening callable default datetime datetime          qs   happening objects annotate(latest time models max( ))         self assert pickles(qs)      def test missing django version unpickling(self)                       21430    verifies warning raised querysets         unpickled without django version                     qs   group missing django version objects all()         msg    pickled queryset instance django version specified           self assertraisesmessage(runtimewarning  msg)              pickle loads(pickle dumps(qs))      def test unsupported unpickle(self)                       21430    verifies warning raised querysets         unpickled different django version current                     qs   group previous django version objects all()         msg    pickled queryset instance django version 1 0 match current version      get version()         self assertraisesmessage(runtimewarning  msg)              pickle loads(pickle dumps(qs))   class inlookuptests(testcase)        classmethod     def setuptestdata(cls)          range(1  3)              group   group objects create(name  group     format(i))         cls e1   event objects create(title  event 1   group group)      def test lookup queryset evaluation(self)                      neither pickling unpickling queryset query   inner qs         lookup evaluate inner qs                 make sure defaults working ( 20158)    ticket  17776    exceptions equal equivalent instances     use assertequal(original  unpickled)    forwardmanytoonedescriptor    forwardonetoonedescriptor    also  deferred dynamic model works    with related field ( 14515)    first pickling    second pickling    prefetch affect fetch pickle behavior    queryset passed     evaluate queryset   24831    cached properties manytoonerel created queryset delete()    happening callable default datetime datetime    21430    verifies warning raised querysets   21430    verifies warning raised querysets ", "content": "import datetime\nimport pickle\n\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.utils.version import get_version\n\nfrom .models import Container, Event, Group, Happening, M2MModel\n\n\nclass PickleabilityTestCase(TestCase):\n    def setUp(self):\n        Happening.objects.create()  # make sure the defaults are working (#20158)\n\n    def assert_pickles(self, qs):\n        self.assertEqual(list(pickle.loads(pickle.dumps(qs))), list(qs))\n\n    def test_related_field(self):\n        g = Group.objects.create(name=\"Ponies Who Own Maybachs\")\n        self.assert_pickles(Event.objects.filter(group=g.id))\n\n    def test_datetime_callable_default_all(self):\n        self.assert_pickles(Happening.objects.all())\n\n    def test_datetime_callable_default_filter(self):\n        self.assert_pickles(Happening.objects.filter(when=datetime.datetime.now()))\n\n    def test_string_as_default(self):\n        self.assert_pickles(Happening.objects.filter(name=\"test\"))\n\n    def test_standalone_method_as_default(self):\n        self.assert_pickles(Happening.objects.filter(number1=1))\n\n    def test_staticmethod_as_default(self):\n        self.assert_pickles(Happening.objects.filter(number2=1))\n\n    def test_filter_reverse_fk(self):\n        self.assert_pickles(Group.objects.filter(event=1))\n\n    def test_doesnotexist_exception(self):\n        # Ticket #17776\n        original = Event.DoesNotExist(\"Doesn't exist\")\n        unpickled = pickle.loads(pickle.dumps(original))\n\n        # Exceptions are not equal to equivalent instances of themselves, so\n        # can't just use assertEqual(original, unpickled)\n        self.assertEqual(original.__class__, unpickled.__class__)\n        self.assertEqual(original.args, unpickled.args)\n\n    def test_doesnotexist_class(self):\n        klass = Event.DoesNotExist\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n\n    def test_multipleobjectsreturned_class(self):\n        klass = Event.MultipleObjectsReturned\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n\n    def test_forward_relatedobjectdoesnotexist_class(self):\n        # ForwardManyToOneDescriptor\n        klass = Event.group.RelatedObjectDoesNotExist\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n        # ForwardOneToOneDescriptor\n        klass = Happening.event.RelatedObjectDoesNotExist\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n\n    def test_reverse_one_to_one_relatedobjectdoesnotexist_class(self):\n        klass = Event.happening.RelatedObjectDoesNotExist\n        self.assertIs(pickle.loads(pickle.dumps(klass)), klass)\n\n    def test_manager_pickle(self):\n        pickle.loads(pickle.dumps(Happening.objects))\n\n    def test_model_pickle(self):\n        \"\"\"\n        A model not defined on module level is picklable.\n        \"\"\"\n        original = Container.SomeModel(pk=1)\n        dumped = pickle.dumps(original)\n        reloaded = pickle.loads(dumped)\n        self.assertEqual(original, reloaded)\n        # Also, deferred dynamic model works\n        Container.SomeModel.objects.create(somefield=1)\n        original = Container.SomeModel.objects.defer('somefield')[0]\n        dumped = pickle.dumps(original)\n        reloaded = pickle.loads(dumped)\n        self.assertEqual(original, reloaded)\n        self.assertEqual(original.somefield, reloaded.somefield)\n\n    def test_model_pickle_m2m(self):\n        \"\"\"\n        Test intentionally the automatically created through model.\n        \"\"\"\n        m1 = M2MModel.objects.create()\n        g1 = Group.objects.create(name='foof')\n        m1.groups.add(g1)\n        m2m_through = M2MModel._meta.get_field('groups').remote_field.through\n        original = m2m_through.objects.get()\n        dumped = pickle.dumps(original)\n        reloaded = pickle.loads(dumped)\n        self.assertEqual(original, reloaded)\n\n    def test_model_pickle_dynamic(self):\n        class Meta:\n            proxy = True\n        dynclass = type(\"DynamicEventSubclass\", (Event,), {'Meta': Meta, '__module__': Event.__module__})\n        original = dynclass(pk=1)\n        dumped = pickle.dumps(original)\n        reloaded = pickle.loads(dumped)\n        self.assertEqual(original, reloaded)\n        self.assertIs(reloaded.__class__, dynclass)\n\n    def test_specialized_queryset(self):\n        self.assert_pickles(Happening.objects.values('name'))\n        self.assert_pickles(Happening.objects.values('name').dates('when', 'year'))\n        # With related field (#14515)\n        self.assert_pickles(\n            Event.objects.select_related('group').order_by('title').values_list('title', 'group__name')\n        )\n\n    def test_pickle_prefetch_related_idempotence(self):\n        g = Group.objects.create(name='foo')\n        groups = Group.objects.prefetch_related('event_set')\n\n        # First pickling\n        groups = pickle.loads(pickle.dumps(groups))\n        self.assertSequenceEqual(groups, [g])\n\n        # Second pickling\n        groups = pickle.loads(pickle.dumps(groups))\n        self.assertSequenceEqual(groups, [g])\n\n    def test_pickle_prefetch_queryset_usable_outside_of_prefetch(self):\n        # Prefetch shouldn't affect the fetch-on-pickle behavior of the\n        # queryset passed to it.\n        Group.objects.create(name='foo')\n        events = Event.objects.order_by('id')\n        Group.objects.prefetch_related(models.Prefetch('event_set', queryset=events))\n        with self.assertNumQueries(1):\n            events2 = pickle.loads(pickle.dumps(events))\n        with self.assertNumQueries(0):\n            list(events2)\n\n    def test_pickle_prefetch_queryset_still_usable(self):\n        g = Group.objects.create(name='foo')\n        groups = Group.objects.prefetch_related(\n            models.Prefetch('event_set', queryset=Event.objects.order_by('id'))\n        )\n        groups2 = pickle.loads(pickle.dumps(groups))\n        self.assertSequenceEqual(groups2.filter(id__gte=0), [g])\n\n    def test_pickle_prefetch_queryset_not_evaluated(self):\n        Group.objects.create(name='foo')\n        groups = Group.objects.prefetch_related(\n            models.Prefetch('event_set', queryset=Event.objects.order_by('id'))\n        )\n        list(groups)  # evaluate QuerySet\n        with self.assertNumQueries(0):\n            pickle.loads(pickle.dumps(groups))\n\n    def test_pickle_prefetch_related_with_m2m_and_objects_deletion(self):\n        \"\"\"\n        #24831 -- Cached properties on ManyToOneRel created in QuerySet.delete()\n        caused subsequent QuerySet pickling to fail.\n        \"\"\"\n        g = Group.objects.create(name='foo')\n        m2m = M2MModel.objects.create()\n        m2m.groups.add(g)\n        Group.objects.all().delete()\n\n        m2ms = M2MModel.objects.prefetch_related('groups')\n        m2ms = pickle.loads(pickle.dumps(m2ms))\n        self.assertSequenceEqual(m2ms, [m2m])\n\n    def test_annotation_with_callable_default(self):\n        # Happening.when has a callable default of datetime.datetime.now.\n        qs = Happening.objects.annotate(latest_time=models.Max('when'))\n        self.assert_pickles(qs)\n\n    def test_missing_django_version_unpickling(self):\n        \"\"\"\n        #21430 -- Verifies a warning is raised for querysets that are\n        unpickled without a Django version\n        \"\"\"\n        qs = Group.missing_django_version_objects.all()\n        msg = \"Pickled queryset instance's Django version is not specified.\"\n        with self.assertRaisesMessage(RuntimeWarning, msg):\n            pickle.loads(pickle.dumps(qs))\n\n    def test_unsupported_unpickle(self):\n        \"\"\"\n        #21430 -- Verifies a warning is raised for querysets that are\n        unpickled with a different Django version than the current\n        \"\"\"\n        qs = Group.previous_django_version_objects.all()\n        msg = \"Pickled queryset instance's Django version 1.0 does not match the current version %s.\" % get_version()\n        with self.assertRaisesMessage(RuntimeWarning, msg):\n            pickle.loads(pickle.dumps(qs))\n\n\nclass InLookupTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        for i in range(1, 3):\n            group = Group.objects.create(name='Group {}'.format(i))\n        cls.e1 = Event.objects.create(title='Event 1', group=group)\n\n    def test_in_lookup_queryset_evaluation(self):\n        \"\"\"\n        Neither pickling nor unpickling a QuerySet.query with an __in=inner_qs\n        lookup should evaluate inner_qs.\n        \"\"\"\n        events = Event.objects.filter(group__in=Group.objects.all())\n\n        with self.assertNumQueries(0):\n            dumped = pickle.dumps(events.query)\n\n        with self.assertNumQueries(0):\n            reloaded = pickle.loads(dumped)\n            reloaded_events = Event.objects.none()\n            reloaded_events.query = reloaded\n\n        self.assertSequenceEqual(reloaded_events, [self.e1])\n\n    def test_in_lookup_query_evaluation(self):\n        events = Event.objects.filter(group__in=Group.objects.values('id').query)\n\n        with self.assertNumQueries(0):\n            dumped = pickle.dumps(events.query)\n\n        with self.assertNumQueries(0):\n            reloaded = pickle.loads(dumped)\n            reloaded_events = Event.objects.none()\n            reloaded_events.query = reloaded\n\n        self.assertSequenceEqual(reloaded_events, [self.e1])\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "14c5b1475bfb020d1573c9ca1b3315e4", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/queryset_pickle/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}