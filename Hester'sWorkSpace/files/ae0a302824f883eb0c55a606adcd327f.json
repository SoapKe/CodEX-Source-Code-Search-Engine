{"author": "django", "code": "\"\"\"Tests for django.db.utils.\"\"\"\nimport unittest\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db import DEFAULT_DB_ALIAS, connection\nfrom django.db.utils import ConnectionHandler, ProgrammingError, load_backend\nfrom django.test import SimpleTestCase, TestCase\n\n\nclass ConnectionHandlerTests(SimpleTestCase):\n\n    def test_connection_handler_no_databases(self):\n        \"\"\"Empty DATABASES setting defaults to the dummy backend.\"\"\"\n        DATABASES = {}\n        conns = ConnectionHandler(DATABASES)\n        self.assertEqual(conns[DEFAULT_DB_ALIAS].settings_dict['ENGINE'], 'django.db.backends.dummy')\n        msg = (\n            'settings.DATABASES is improperly configured. Please supply the '\n            'ENGINE value. Check settings documentation for more details.'\n        )\n        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n            conns[DEFAULT_DB_ALIAS].ensure_connection()\n\n\nclass DatabaseErrorWrapperTests(TestCase):\n\n    @unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL test')\n    def test_reraising_backend_specific_database_exception(self):\n        with connection.cursor() as cursor:\n            msg = 'table \"X\" does not exist'\n            with self.assertRaisesMessage(ProgrammingError, msg) as cm:\n                cursor.execute('DROP TABLE \"X\"')\n        self.assertNotEqual(type(cm.exception), type(cm.exception.__cause__))\n        self.assertIsNotNone(cm.exception.__cause__)\n        self.assertIsNotNone(cm.exception.__cause__.pgcode)\n        self.assertIsNotNone(cm.exception.__cause__.pgerror)\n\n\nclass LoadBackendTests(SimpleTestCase):\n\n    def test_load_backend_invalid_name(self):\n        msg = (\n            \"'foo' isn't an available database backend.\\n\"\n            \"Try using 'django.db.backends.XXX', where XXX is one of:\\n\"\n            \"    'mysql', 'oracle', 'postgresql', 'sqlite3'\"\n        )\n        with self.assertRaisesMessage(ImproperlyConfigured, msg) as cm:\n            load_backend('foo')\n        self.assertEqual(str(cm.exception.__cause__), \"No module named 'foo'\")\n", "comments": "   tests django db utils     import unittest  django core exceptions import improperlyconfigured django db import default db alias  connection django db utils import connectionhandler  programmingerror  load backend django test import simpletestcase  testcase   class connectionhandlertests(simpletestcase)       def test connection handler databases(self)             empty databases setting defaults dummy backend     ", "content": "\"\"\"Tests for django.db.utils.\"\"\"\nimport unittest\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.db import DEFAULT_DB_ALIAS, connection\nfrom django.db.utils import ConnectionHandler, ProgrammingError, load_backend\nfrom django.test import SimpleTestCase, TestCase\n\n\nclass ConnectionHandlerTests(SimpleTestCase):\n\n    def test_connection_handler_no_databases(self):\n        \"\"\"Empty DATABASES setting defaults to the dummy backend.\"\"\"\n        DATABASES = {}\n        conns = ConnectionHandler(DATABASES)\n        self.assertEqual(conns[DEFAULT_DB_ALIAS].settings_dict['ENGINE'], 'django.db.backends.dummy')\n        msg = (\n            'settings.DATABASES is improperly configured. Please supply the '\n            'ENGINE value. Check settings documentation for more details.'\n        )\n        with self.assertRaisesMessage(ImproperlyConfigured, msg):\n            conns[DEFAULT_DB_ALIAS].ensure_connection()\n\n\nclass DatabaseErrorWrapperTests(TestCase):\n\n    @unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL test')\n    def test_reraising_backend_specific_database_exception(self):\n        with connection.cursor() as cursor:\n            msg = 'table \"X\" does not exist'\n            with self.assertRaisesMessage(ProgrammingError, msg) as cm:\n                cursor.execute('DROP TABLE \"X\"')\n        self.assertNotEqual(type(cm.exception), type(cm.exception.__cause__))\n        self.assertIsNotNone(cm.exception.__cause__)\n        self.assertIsNotNone(cm.exception.__cause__.pgcode)\n        self.assertIsNotNone(cm.exception.__cause__.pgerror)\n\n\nclass LoadBackendTests(SimpleTestCase):\n\n    def test_load_backend_invalid_name(self):\n        msg = (\n            \"'foo' isn't an available database backend.\\n\"\n            \"Try using 'django.db.backends.XXX', where XXX is one of:\\n\"\n            \"    'mysql', 'oracle', 'postgresql', 'sqlite3'\"\n        )\n        with self.assertRaisesMessage(ImproperlyConfigured, msg) as cm:\n            load_backend('foo')\n        self.assertEqual(str(cm.exception.__cause__), \"No module named 'foo'\")\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "ae0a302824f883eb0c55a606adcd327f", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/db_utils/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}