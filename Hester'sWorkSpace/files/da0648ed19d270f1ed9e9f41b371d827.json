{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nimport itertools\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass XimalayaBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['CN']\n\n\nclass XimalayaIE(XimalayaBaseIE):\n    IE_NAME = 'ximalaya'\n    IE_DESC = '\u559c\u9a6c\u62c9\u96c5FM'\n    _VALID_URL = r'https?://(?:www\\.|m\\.)?ximalaya\\.com/(?P<uid>[0-9]+)/sound/(?P<id>[0-9]+)'\n    _USER_URL_FORMAT = '%s://www.ximalaya.com/zhubo/%i/'\n    _TESTS = [\n        {\n            'url': 'http://www.ximalaya.com/61425525/sound/47740352/',\n            'info_dict': {\n                'id': '47740352',\n                'ext': 'm4a',\n                'uploader': '\u5c0f\u5f6c\u5f6c\u7231\u542c\u4e66',\n                'uploader_id': 61425525,\n                'uploader_url': 'http://www.ximalaya.com/zhubo/61425525/',\n                'title': '261.\u5510\u8bd7\u4e09\u767e\u9996.\u5377\u516b.\u9001\u5b5f\u6d69\u7136\u4e4b\u5e7f\u9675.\u674e\u767d',\n                'description': \"contains:\u300a\u9001\u5b5f\u6d69\u7136\u4e4b\u5e7f\u9675\u300b\\n\u4f5c\u8005\uff1a\u674e\u767d\\n\u6545\u4eba\u897f\u8f9e\u9ec4\u9e64\u697c\uff0c\u70df\u82b1\u4e09\u6708\u4e0b\u626c\u5dde\u3002\\n\u5b64\u5e06\u8fdc\u5f71\u78a7\u7a7a\u5c3d\uff0c\u60df\u89c1\u957f\u6c5f\u5929\u9645\u6d41\u3002\",\n                'thumbnails': [\n                    {\n                        'name': 'cover_url',\n                        'url': r're:^https?://.*\\.jpg$',\n                    },\n                    {\n                        'name': 'cover_url_142',\n                        'url': r're:^https?://.*\\.jpg$',\n                        'width': 180,\n                        'height': 180\n                    }\n                ],\n                'categories': ['renwen', '\u4eba\u6587'],\n                'duration': 93,\n                'view_count': int,\n                'like_count': int,\n            }\n        },\n        {\n            'url': 'http://m.ximalaya.com/61425525/sound/47740352/',\n            'info_dict': {\n                'id': '47740352',\n                'ext': 'm4a',\n                'uploader': '\u5c0f\u5f6c\u5f6c\u7231\u542c\u4e66',\n                'uploader_id': 61425525,\n                'uploader_url': 'http://www.ximalaya.com/zhubo/61425525/',\n                'title': '261.\u5510\u8bd7\u4e09\u767e\u9996.\u5377\u516b.\u9001\u5b5f\u6d69\u7136\u4e4b\u5e7f\u9675.\u674e\u767d',\n                'description': \"contains:\u300a\u9001\u5b5f\u6d69\u7136\u4e4b\u5e7f\u9675\u300b\\n\u4f5c\u8005\uff1a\u674e\u767d\\n\u6545\u4eba\u897f\u8f9e\u9ec4\u9e64\u697c\uff0c\u70df\u82b1\u4e09\u6708\u4e0b\u626c\u5dde\u3002\\n\u5b64\u5e06\u8fdc\u5f71\u78a7\u7a7a\u5c3d\uff0c\u60df\u89c1\u957f\u6c5f\u5929\u9645\u6d41\u3002\",\n                'thumbnails': [\n                    {\n                        'name': 'cover_url',\n                        'url': r're:^https?://.*\\.jpg$',\n                    },\n                    {\n                        'name': 'cover_url_142',\n                        'url': r're:^https?://.*\\.jpg$',\n                        'width': 180,\n                        'height': 180\n                    }\n                ],\n                'categories': ['renwen', '\u4eba\u6587'],\n                'duration': 93,\n                'view_count': int,\n                'like_count': int,\n            }\n        },\n        {\n            'url': 'https://www.ximalaya.com/11045267/sound/15705996/',\n            'info_dict': {\n                'id': '15705996',\n                'ext': 'm4a',\n                'uploader': '\u674e\u5ef6\u9686\u8001\u5e08',\n                'uploader_id': 11045267,\n                'uploader_url': 'https://www.ximalaya.com/zhubo/11045267/',\n                'title': 'Lesson 1 Excuse me!',\n                'description': \"contains:Listen to the tape then answer\\xa0this question. Whose handbag is it?\\n\"\n                               \"\u542c\u5f55\u97f3\uff0c\u7136\u540e\u56de\u7b54\u95ee\u9898\uff0c\u8fd9\u662f\u8c01\u7684\u624b\u888b\uff1f\",\n                'thumbnails': [\n                    {\n                        'name': 'cover_url',\n                        'url': r're:^https?://.*\\.jpg$',\n                    },\n                    {\n                        'name': 'cover_url_142',\n                        'url': r're:^https?://.*\\.jpg$',\n                        'width': 180,\n                        'height': 180\n                    }\n                ],\n                'categories': ['train', '\u5916\u8bed'],\n                'duration': 40,\n                'view_count': int,\n                'like_count': int,\n            }\n        },\n    ]\n\n    def _real_extract(self, url):\n\n        is_m = 'm.ximalaya' in url\n        scheme = 'https' if url.startswith('https') else 'http'\n\n        audio_id = self._match_id(url)\n        webpage = self._download_webpage(url, audio_id,\n                                         note='Download sound page for %s' % audio_id,\n                                         errnote='Unable to get sound page')\n\n        audio_info_file = '%s://m.ximalaya.com/tracks/%s.json' % (scheme, audio_id)\n        audio_info = self._download_json(audio_info_file, audio_id,\n                                         'Downloading info json %s' % audio_info_file,\n                                         'Unable to download info file')\n\n        formats = []\n        for bps, k in (('24k', 'play_path_32'), ('64k', 'play_path_64')):\n            if audio_info.get(k):\n                formats.append({\n                    'format_id': bps,\n                    'url': audio_info[k],\n                })\n\n        thumbnails = []\n        for k in audio_info.keys():\n            \n            if k.startswith('cover_url'):\n                thumbnail = {'name': k, 'url': audio_info[k]}\n                if k == 'cover_url_142':\n                    thumbnail['width'] = 180\n                    thumbnail['height'] = 180\n                thumbnails.append(thumbnail)\n\n        audio_uploader_id = audio_info.get('uid')\n\n        if is_m:\n            audio_description = self._html_search_regex(r'(?s)<section\\s+class=[\"\\']content[^>]+>(.+?)</section>',\n                                                        webpage, 'audio_description', fatal=False)\n        else:\n            audio_description = self._html_search_regex(r'(?s)<div\\s+class=[\"\\']rich_intro[^>]*>(.+?</article>)',\n                                                        webpage, 'audio_description', fatal=False)\n\n        if not audio_description:\n            audio_description_file = '%s://www.ximalaya.com/sounds/%s/rich_intro' % (scheme, audio_id)\n            audio_description = self._download_webpage(audio_description_file, audio_id,\n                                                       note='Downloading description file %s' % audio_description_file,\n                                                       errnote='Unable to download descrip file',\n                                                       fatal=False)\n            audio_description = audio_description.strip() if audio_description else None\n\n        return {\n            'id': audio_id,\n            'uploader': audio_info.get('nickname'),\n            'uploader_id': audio_uploader_id,\n            'uploader_url': self._USER_URL_FORMAT % (scheme, audio_uploader_id) if audio_uploader_id else None,\n            'title': audio_info['title'],\n            'thumbnails': thumbnails,\n            'description': audio_description,\n            'categories': list(filter(None, (audio_info.get('category_name'), audio_info.get('category_title')))),\n            'duration': audio_info.get('duration'),\n            'view_count': audio_info.get('play_count'),\n            'like_count': audio_info.get('favorites_count'),\n            'formats': formats,\n        }\n\n\nclass XimalayaAlbumIE(XimalayaBaseIE):\n    IE_NAME = 'ximalaya:album'\n    IE_DESC = '\u559c\u9a6c\u62c9\u96c5FM \u4e13\u8f91'\n    _VALID_URL = r'https?://(?:www\\.|m\\.)?ximalaya\\.com/(?P<uid>[0-9]+)/album/(?P<id>[0-9]+)'\n    _TEMPLATE_URL = '%s://www.ximalaya.com/%s/album/%s/'\n    _BASE_URL_TEMPL = '%s://www.ximalaya.com%s'\n    _LIST_VIDEO_RE = r'<a[^>]+?href=\"(?P<url>/%s/sound/(?P<id>\\d+)/?)\"[^>]+?title=\"(?P<title>[^>]+)\">'\n    _TESTS = [{\n        'url': 'http://www.ximalaya.com/61425525/album/5534601/',\n        'info_dict': {\n            'title': '\u5510\u8bd7\u4e09\u767e\u9996\uff08\u542b\u8d4f\u6790\uff09',\n            'id': '5534601',\n        },\n        'playlist_count': 312,\n    }, {\n        'url': 'http://m.ximalaya.com/61425525/album/5534601',\n        'info_dict': {\n            'title': '\u5510\u8bd7\u4e09\u767e\u9996\uff08\u542b\u8d4f\u6790\uff09',\n            'id': '5534601',\n        },\n        'playlist_count': 312,\n    },\n    ]\n\n    def _real_extract(self, url):\n        self.scheme = scheme = 'https' if url.startswith('https') else 'http'\n\n        mobj = re.match(self._VALID_URL, url)\n        uid, playlist_id = mobj.group('uid'), mobj.group('id')\n\n        webpage = self._download_webpage(self._TEMPLATE_URL % (scheme, uid, playlist_id), playlist_id,\n                                         note='Download album page for %s' % playlist_id,\n                                         errnote='Unable to get album info')\n\n        title = self._html_search_regex(r'detailContent_title[^>]*><h1(?:[^>]+)?>([^<]+)</h1>',\n                                        webpage, 'title', fatal=False)\n\n        return self.playlist_result(self._entries(webpage, playlist_id, uid), playlist_id, title)\n\n    def _entries(self, page, playlist_id, uid):\n        html = page\n        for page_num in itertools.count(1):\n            for entry in self._process_page(html, uid):\n                yield entry\n\n            next_url = self._search_regex(r'<a\\s+href=([\"\\'])(?P<more>[\\S]+)\\1[^>]+rel=([\"\\'])next\\3',\n                                          html, 'list_next_url', default=None, group='more')\n            if not next_url:\n                break\n\n            next_full_url = self._BASE_URL_TEMPL % (self.scheme, next_url)\n            html = self._download_webpage(next_full_url, playlist_id)\n\n    def _process_page(self, html, uid):\n        find_from = html.index('album_soundlist')\n        for mobj in re.finditer(self._LIST_VIDEO_RE % uid, html[find_from:]):\n            yield self.url_result(self._BASE_URL_TEMPL % (self.scheme, mobj.group('url')),\n                                  XimalayaIE.ie_key(),\n                                  mobj.group('id'),\n                                  mobj.group('title'))\n", "comments": "# coding: utf-8\n# cover pics kyes like: cover_url', 'cover_url_142'\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nimport itertools\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass XimalayaBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['CN']\n\n\nclass XimalayaIE(XimalayaBaseIE):\n    IE_NAME = 'ximalaya'\n    IE_DESC = '\u559c\u9a6c\u62c9\u96c5FM'\n    _VALID_URL = r'https?://(?:www\\.|m\\.)?ximalaya\\.com/(?P<uid>[0-9]+)/sound/(?P<id>[0-9]+)'\n    _USER_URL_FORMAT = '%s://www.ximalaya.com/zhubo/%i/'\n    _TESTS = [\n        {\n            'url': 'http://www.ximalaya.com/61425525/sound/47740352/',\n            'info_dict': {\n                'id': '47740352',\n                'ext': 'm4a',\n                'uploader': '\u5c0f\u5f6c\u5f6c\u7231\u542c\u4e66',\n                'uploader_id': 61425525,\n                'uploader_url': 'http://www.ximalaya.com/zhubo/61425525/',\n                'title': '261.\u5510\u8bd7\u4e09\u767e\u9996.\u5377\u516b.\u9001\u5b5f\u6d69\u7136\u4e4b\u5e7f\u9675.\u674e\u767d',\n                'description': \"contains:\u300a\u9001\u5b5f\u6d69\u7136\u4e4b\u5e7f\u9675\u300b\\n\u4f5c\u8005\uff1a\u674e\u767d\\n\u6545\u4eba\u897f\u8f9e\u9ec4\u9e64\u697c\uff0c\u70df\u82b1\u4e09\u6708\u4e0b\u626c\u5dde\u3002\\n\u5b64\u5e06\u8fdc\u5f71\u78a7\u7a7a\u5c3d\uff0c\u60df\u89c1\u957f\u6c5f\u5929\u9645\u6d41\u3002\",\n                'thumbnails': [\n                    {\n                        'name': 'cover_url',\n                        'url': r're:^https?://.*\\.jpg$',\n                    },\n                    {\n                        'name': 'cover_url_142',\n                        'url': r're:^https?://.*\\.jpg$',\n                        'width': 180,\n                        'height': 180\n                    }\n                ],\n                'categories': ['renwen', '\u4eba\u6587'],\n                'duration': 93,\n                'view_count': int,\n                'like_count': int,\n            }\n        },\n        {\n            'url': 'http://m.ximalaya.com/61425525/sound/47740352/',\n            'info_dict': {\n                'id': '47740352',\n                'ext': 'm4a',\n                'uploader': '\u5c0f\u5f6c\u5f6c\u7231\u542c\u4e66',\n                'uploader_id': 61425525,\n                'uploader_url': 'http://www.ximalaya.com/zhubo/61425525/',\n                'title': '261.\u5510\u8bd7\u4e09\u767e\u9996.\u5377\u516b.\u9001\u5b5f\u6d69\u7136\u4e4b\u5e7f\u9675.\u674e\u767d',\n                'description': \"contains:\u300a\u9001\u5b5f\u6d69\u7136\u4e4b\u5e7f\u9675\u300b\\n\u4f5c\u8005\uff1a\u674e\u767d\\n\u6545\u4eba\u897f\u8f9e\u9ec4\u9e64\u697c\uff0c\u70df\u82b1\u4e09\u6708\u4e0b\u626c\u5dde\u3002\\n\u5b64\u5e06\u8fdc\u5f71\u78a7\u7a7a\u5c3d\uff0c\u60df\u89c1\u957f\u6c5f\u5929\u9645\u6d41\u3002\",\n                'thumbnails': [\n                    {\n                        'name': 'cover_url',\n                        'url': r're:^https?://.*\\.jpg$',\n                    },\n                    {\n                        'name': 'cover_url_142',\n                        'url': r're:^https?://.*\\.jpg$',\n                        'width': 180,\n                        'height': 180\n                    }\n                ],\n                'categories': ['renwen', '\u4eba\u6587'],\n                'duration': 93,\n                'view_count': int,\n                'like_count': int,\n            }\n        },\n        {\n            'url': 'https://www.ximalaya.com/11045267/sound/15705996/',\n            'info_dict': {\n                'id': '15705996',\n                'ext': 'm4a',\n                'uploader': '\u674e\u5ef6\u9686\u8001\u5e08',\n                'uploader_id': 11045267,\n                'uploader_url': 'https://www.ximalaya.com/zhubo/11045267/',\n                'title': 'Lesson 1 Excuse me!',\n                'description': \"contains:Listen to the tape then answer\\xa0this question. Whose handbag is it?\\n\"\n                               \"\u542c\u5f55\u97f3\uff0c\u7136\u540e\u56de\u7b54\u95ee\u9898\uff0c\u8fd9\u662f\u8c01\u7684\u624b\u888b\uff1f\",\n                'thumbnails': [\n                    {\n                        'name': 'cover_url',\n                        'url': r're:^https?://.*\\.jpg$',\n                    },\n                    {\n                        'name': 'cover_url_142',\n                        'url': r're:^https?://.*\\.jpg$',\n                        'width': 180,\n                        'height': 180\n                    }\n                ],\n                'categories': ['train', '\u5916\u8bed'],\n                'duration': 40,\n                'view_count': int,\n                'like_count': int,\n            }\n        },\n    ]\n\n    def _real_extract(self, url):\n\n        is_m = 'm.ximalaya' in url\n        scheme = 'https' if url.startswith('https') else 'http'\n\n        audio_id = self._match_id(url)\n        webpage = self._download_webpage(url, audio_id,\n                                         note='Download sound page for %s' % audio_id,\n                                         errnote='Unable to get sound page')\n\n        audio_info_file = '%s://m.ximalaya.com/tracks/%s.json' % (scheme, audio_id)\n        audio_info = self._download_json(audio_info_file, audio_id,\n                                         'Downloading info json %s' % audio_info_file,\n                                         'Unable to download info file')\n\n        formats = []\n        for bps, k in (('24k', 'play_path_32'), ('64k', 'play_path_64')):\n            if audio_info.get(k):\n                formats.append({\n                    'format_id': bps,\n                    'url': audio_info[k],\n                })\n\n        thumbnails = []\n        for k in audio_info.keys():\n            # cover pics kyes like: cover_url', 'cover_url_142'\n            if k.startswith('cover_url'):\n                thumbnail = {'name': k, 'url': audio_info[k]}\n                if k == 'cover_url_142':\n                    thumbnail['width'] = 180\n                    thumbnail['height'] = 180\n                thumbnails.append(thumbnail)\n\n        audio_uploader_id = audio_info.get('uid')\n\n        if is_m:\n            audio_description = self._html_search_regex(r'(?s)<section\\s+class=[\"\\']content[^>]+>(.+?)</section>',\n                                                        webpage, 'audio_description', fatal=False)\n        else:\n            audio_description = self._html_search_regex(r'(?s)<div\\s+class=[\"\\']rich_intro[^>]*>(.+?</article>)',\n                                                        webpage, 'audio_description', fatal=False)\n\n        if not audio_description:\n            audio_description_file = '%s://www.ximalaya.com/sounds/%s/rich_intro' % (scheme, audio_id)\n            audio_description = self._download_webpage(audio_description_file, audio_id,\n                                                       note='Downloading description file %s' % audio_description_file,\n                                                       errnote='Unable to download descrip file',\n                                                       fatal=False)\n            audio_description = audio_description.strip() if audio_description else None\n\n        return {\n            'id': audio_id,\n            'uploader': audio_info.get('nickname'),\n            'uploader_id': audio_uploader_id,\n            'uploader_url': self._USER_URL_FORMAT % (scheme, audio_uploader_id) if audio_uploader_id else None,\n            'title': audio_info['title'],\n            'thumbnails': thumbnails,\n            'description': audio_description,\n            'categories': list(filter(None, (audio_info.get('category_name'), audio_info.get('category_title')))),\n            'duration': audio_info.get('duration'),\n            'view_count': audio_info.get('play_count'),\n            'like_count': audio_info.get('favorites_count'),\n            'formats': formats,\n        }\n\n\nclass XimalayaAlbumIE(XimalayaBaseIE):\n    IE_NAME = 'ximalaya:album'\n    IE_DESC = '\u559c\u9a6c\u62c9\u96c5FM \u4e13\u8f91'\n    _VALID_URL = r'https?://(?:www\\.|m\\.)?ximalaya\\.com/(?P<uid>[0-9]+)/album/(?P<id>[0-9]+)'\n    _TEMPLATE_URL = '%s://www.ximalaya.com/%s/album/%s/'\n    _BASE_URL_TEMPL = '%s://www.ximalaya.com%s'\n    _LIST_VIDEO_RE = r'<a[^>]+?href=\"(?P<url>/%s/sound/(?P<id>\\d+)/?)\"[^>]+?title=\"(?P<title>[^>]+)\">'\n    _TESTS = [{\n        'url': 'http://www.ximalaya.com/61425525/album/5534601/',\n        'info_dict': {\n            'title': '\u5510\u8bd7\u4e09\u767e\u9996\uff08\u542b\u8d4f\u6790\uff09',\n            'id': '5534601',\n        },\n        'playlist_count': 312,\n    }, {\n        'url': 'http://m.ximalaya.com/61425525/album/5534601',\n        'info_dict': {\n            'title': '\u5510\u8bd7\u4e09\u767e\u9996\uff08\u542b\u8d4f\u6790\uff09',\n            'id': '5534601',\n        },\n        'playlist_count': 312,\n    },\n    ]\n\n    def _real_extract(self, url):\n        self.scheme = scheme = 'https' if url.startswith('https') else 'http'\n\n        mobj = re.match(self._VALID_URL, url)\n        uid, playlist_id = mobj.group('uid'), mobj.group('id')\n\n        webpage = self._download_webpage(self._TEMPLATE_URL % (scheme, uid, playlist_id), playlist_id,\n                                         note='Download album page for %s' % playlist_id,\n                                         errnote='Unable to get album info')\n\n        title = self._html_search_regex(r'detailContent_title[^>]*><h1(?:[^>]+)?>([^<]+)</h1>',\n                                        webpage, 'title', fatal=False)\n\n        return self.playlist_result(self._entries(webpage, playlist_id, uid), playlist_id, title)\n\n    def _entries(self, page, playlist_id, uid):\n        html = page\n        for page_num in itertools.count(1):\n            for entry in self._process_page(html, uid):\n                yield entry\n\n            next_url = self._search_regex(r'<a\\s+href=([\"\\'])(?P<more>[\\S]+)\\1[^>]+rel=([\"\\'])next\\3',\n                                          html, 'list_next_url', default=None, group='more')\n            if not next_url:\n                break\n\n            next_full_url = self._BASE_URL_TEMPL % (self.scheme, next_url)\n            html = self._download_webpage(next_full_url, playlist_id)\n\n    def _process_page(self, html, uid):\n        find_from = html.index('album_soundlist')\n        for mobj in re.finditer(self._LIST_VIDEO_RE % uid, html[find_from:]):\n            yield self.url_result(self._BASE_URL_TEMPL % (self.scheme, mobj.group('url')),\n                                  XimalayaIE.ie_key(),\n                                  mobj.group('id'),\n                                  mobj.group('title'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ximalaya.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ximalaya.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}