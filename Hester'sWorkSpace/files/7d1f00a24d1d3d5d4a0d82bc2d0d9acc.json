{"author": "HelloZeroNet", "code": "import array\nimport time\n\n\nclass PeerHashfield(object):\n    __slots__ = (\"storage\", \"time_changed\", \"append\", \"remove\", \"tostring\", \"fromstring\", \"__len__\", \"__iter__\")\n    def __init__(self):\n        self.storage = self.createStorage()\n        self.time_changed = time.time()\n\n    def createStorage(self):\n        storage = array.array(\"H\")\n        self.append = storage.append\n        self.remove = storage.remove\n        self.tostring = storage.tostring\n        self.fromstring = storage.fromstring\n        self.__len__ = storage.__len__\n        self.__iter__ = storage.__iter__\n        return storage\n\n    def appendHash(self, hash):\n        hash_id = int(hash[0:4], 16)\n        if hash_id not in self.storage:\n            self.storage.append(hash_id)\n            self.time_changed = time.time()\n            return True\n        else:\n            return False\n\n    def appendHashId(self, hash_id):\n        if hash_id not in self.storage:\n            self.storage.append(hash_id)\n            self.time_changed = time.time()\n            return True\n        else:\n            return False\n\n    def removeHash(self, hash):\n        hash_id = int(hash[0:4], 16)\n        if hash_id in self.storage:\n            self.storage.remove(hash_id)\n            self.time_changed = time.time()\n            return True\n        else:\n            return False\n\n    def removeHashId(self, hash_id):\n        if hash_id in self.storage:\n            self.storage.remove(hash_id)\n            self.time_changed = time.time()\n            return True\n        else:\n            return False\n\n    def getHashId(self, hash):\n        return int(hash[0:4], 16)\n\n    def hasHash(self, hash):\n        return int(hash[0:4], 16) in self.storage\n\n    def replaceFromString(self, hashfield_raw):\n        self.storage = self.createStorage()\n        self.storage.fromstring(hashfield_raw)\n        self.time_changed = time.time()\n\nif __name__ == \"__main__\":\n    field = PeerHashfield()\n    s = time.time()\n    for i in range(10000):\n        field.appendHashId(i)\n    print time.time()-s\n    s = time.time()\n    for i in range(10000):\n        field.hasHash(\"AABB\")\n    print time.time()-s", "comments": "", "content": "import array\nimport time\n\n\nclass PeerHashfield(object):\n    __slots__ = (\"storage\", \"time_changed\", \"append\", \"remove\", \"tostring\", \"fromstring\", \"__len__\", \"__iter__\")\n    def __init__(self):\n        self.storage = self.createStorage()\n        self.time_changed = time.time()\n\n    def createStorage(self):\n        storage = array.array(\"H\")\n        self.append = storage.append\n        self.remove = storage.remove\n        self.tostring = storage.tostring\n        self.fromstring = storage.fromstring\n        self.__len__ = storage.__len__\n        self.__iter__ = storage.__iter__\n        return storage\n\n    def appendHash(self, hash):\n        hash_id = int(hash[0:4], 16)\n        if hash_id not in self.storage:\n            self.storage.append(hash_id)\n            self.time_changed = time.time()\n            return True\n        else:\n            return False\n\n    def appendHashId(self, hash_id):\n        if hash_id not in self.storage:\n            self.storage.append(hash_id)\n            self.time_changed = time.time()\n            return True\n        else:\n            return False\n\n    def removeHash(self, hash):\n        hash_id = int(hash[0:4], 16)\n        if hash_id in self.storage:\n            self.storage.remove(hash_id)\n            self.time_changed = time.time()\n            return True\n        else:\n            return False\n\n    def removeHashId(self, hash_id):\n        if hash_id in self.storage:\n            self.storage.remove(hash_id)\n            self.time_changed = time.time()\n            return True\n        else:\n            return False\n\n    def getHashId(self, hash):\n        return int(hash[0:4], 16)\n\n    def hasHash(self, hash):\n        return int(hash[0:4], 16) in self.storage\n\n    def replaceFromString(self, hashfield_raw):\n        self.storage = self.createStorage()\n        self.storage.fromstring(hashfield_raw)\n        self.time_changed = time.time()\n\nif __name__ == \"__main__\":\n    field = PeerHashfield()\n    s = time.time()\n    for i in range(10000):\n        field.appendHashId(i)\n    print time.time()-s\n    s = time.time()\n    for i in range(10000):\n        field.hasHash(\"AABB\")\n    print time.time()-s", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "PeerHashfield.py", "id": "7d1f00a24d1d3d5d4a0d82bc2d0d9acc", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Peer/PeerHashfield.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}