{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_encap_pool\nshort_description: Manage encap pools (fvns:VlanInstP, fvns:VxlanInstP, fvns:VsanInstP)\ndescription:\n- Manage vlan, vxlan, and vsan pools on Cisco ACI fabrics.\nnotes:\n- More information about the internal APIC classes B(fvns:VlanInstP), B(fvns:VxlanInstP) and B(fvns:VsanInstP) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\nversion_added: '2.5'\noptions:\n  description:\n    description:\n    - Description for the C(pool).\n    aliases: [ descr ]\n  pool:\n    description:\n    - The name of the pool.\n    aliases: [ name, pool_name ]\n  pool_allocation_mode:\n    description:\n    - The method used for allocating encaps to resources.\n    - Only vlan and vsan support allocation modes.\n    choices: [ dynamic, static ]\n    aliases: [ allocation_mode, mode ]\n  pool_type:\n    description:\n    - The encap type of C(pool).\n    required: yes\n    aliases: [ type ]\n    choices: [ vlan, vxlan, vsan]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new vlan pool\n  aci_encap_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    pool_type: vlan\n    description: Production VLANs\n    state: present\n\n- name: Remove a vlan pool\n  aci_encap_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    pool_type: vlan\n    state: absent\n\n- name: Query a vlan pool\n  aci_encap_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    pool_type: vlan\n    state: query\n\n- name: Query all vlan pools\n  aci_encap_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool_type: vlan\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nACI_MAPPING = dict(\n    vlan=dict(\n        aci_class='fvnsVlanInstP',\n        aci_mo='infra/vlanns-',\n    ),\n    vxlan=dict(\n        aci_class='fvnsVxlanInstP',\n        aci_mo='infra/vxlanns-',\n    ),\n    vsan=dict(\n        aci_class='fvnsVsanInstP',\n        aci_mo='infra/vsanns-',\n    ),\n)\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        description=dict(type='str', aliases=['descr']),\n        pool=dict(type='str', aliases=['name', 'pool_name']),  \n        pool_allocation_mode=dict(type='str', aliases=['allocation_mode', 'mode'], choices=['dynamic', 'static']),\n        pool_type=dict(type='str', aliases=['type'], choices=['vlan', 'vxlan', 'vsan'], required=True),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['pool']],\n            ['state', 'present', ['pool']],\n        ],\n    )\n\n    description = module.params['description']\n    pool = module.params['pool']\n    pool_type = module.params['pool_type']\n    pool_allocation_mode = module.params['pool_allocation_mode']\n    state = module.params['state']\n\n    aci_class = ACI_MAPPING[pool_type][\"aci_class\"]\n    aci_mo = ACI_MAPPING[pool_type][\"aci_mo\"]\n    pool_name = pool\n\n    # ACI Pool URL requires the pool_allocation mode for vlan and vsan pools (ex: uni/infra/vlanns-[poolname]-static)\n    if pool_type != 'vxlan' and pool is not None:\n        if pool_allocation_mode is not None:\n            pool_name = '[{0}]-{1}'.format(pool, pool_allocation_mode)\n        else:\n            module.fail_json(msg=\"ACI requires parameter 'pool_allocation_mode' for 'pool_type' of 'vlan' and 'vsan' when parameter 'pool' is provided\")\n\n    \n    if pool_type == 'vxlan' and pool_allocation_mode is not None:\n        module.fail_json(msg=\"vxlan pools do not support setting the 'pool_allocation_mode'; please remove this parameter from the task\")\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class=aci_class,\n            aci_rn='{0}{1}'.format(aci_mo, pool_name),\n            filter_target='eq({0}.name, \"{1}\")'.format(aci_class, pool),\n            module_object=pool,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        \n        aci.payload(\n            aci_class=aci_class,\n            class_config=dict(\n                allocMode=pool_allocation_mode,\n                descr=description,\n                name=pool,\n            )\n        )\n\n        \n        aci.get_diff(aci_class=aci_class)\n\n        \n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci encap pool short description  manage encap pools (fvns vlaninstp  fvns vxlaninstp  fvns vsaninstp) description    manage vlan  vxlan  vsan pools cisco aci fabrics  notes    more information internal apic classes b(fvns vlaninstp)  b(fvns vxlaninstp) b(fvns vsaninstp)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    jacob mcgill ( jmcgill298) version added   2 5  options    description      description        description c(pool)      aliases    descr     pool      description        the name pool      aliases    name  pool name     pool allocation mode      description        the method used allocating encaps resources        only vlan vsan support allocation modes      choices    dynamic  static       aliases    allocation mode  mode     pool type      description        the encap type c(pool)      required  yes     aliases    type       choices    vlan  vxlan  vsan    state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      name  add new vlan pool   aci encap pool      host  apic     username  admin     password  somesecretpassword     pool  production     pool type  vlan     description  production vlans     state  present    name  remove vlan pool   aci encap pool      host  apic     username  admin     password  somesecretpassword     pool  production     pool type  vlan     state  absent    name  query vlan pool   aci encap pool      host  apic     username  admin     password  somesecretpassword     pool  production     pool type  vlan     state  query    name  query vlan pools   aci encap pool      host  apic     username  admin     password  somesecretpassword     pool type  vlan     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    aci pool url requires pool allocation mode vlan vsan pools (ex  uni infra vlanns  poolname  static)    vxlan pools support pool allocation modes    filter module parameters null values    generate config diff used post request body    submit changes module check mode proposed different existing ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_encap_pool\nshort_description: Manage encap pools (fvns:VlanInstP, fvns:VxlanInstP, fvns:VsanInstP)\ndescription:\n- Manage vlan, vxlan, and vsan pools on Cisco ACI fabrics.\nnotes:\n- More information about the internal APIC classes B(fvns:VlanInstP), B(fvns:VxlanInstP) and B(fvns:VsanInstP) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\nversion_added: '2.5'\noptions:\n  description:\n    description:\n    - Description for the C(pool).\n    aliases: [ descr ]\n  pool:\n    description:\n    - The name of the pool.\n    aliases: [ name, pool_name ]\n  pool_allocation_mode:\n    description:\n    - The method used for allocating encaps to resources.\n    - Only vlan and vsan support allocation modes.\n    choices: [ dynamic, static ]\n    aliases: [ allocation_mode, mode ]\n  pool_type:\n    description:\n    - The encap type of C(pool).\n    required: yes\n    aliases: [ type ]\n    choices: [ vlan, vxlan, vsan]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new vlan pool\n  aci_encap_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    pool_type: vlan\n    description: Production VLANs\n    state: present\n\n- name: Remove a vlan pool\n  aci_encap_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    pool_type: vlan\n    state: absent\n\n- name: Query a vlan pool\n  aci_encap_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool: production\n    pool_type: vlan\n    state: query\n\n- name: Query all vlan pools\n  aci_encap_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    pool_type: vlan\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nACI_MAPPING = dict(\n    vlan=dict(\n        aci_class='fvnsVlanInstP',\n        aci_mo='infra/vlanns-',\n    ),\n    vxlan=dict(\n        aci_class='fvnsVxlanInstP',\n        aci_mo='infra/vxlanns-',\n    ),\n    vsan=dict(\n        aci_class='fvnsVsanInstP',\n        aci_mo='infra/vsanns-',\n    ),\n)\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        description=dict(type='str', aliases=['descr']),\n        pool=dict(type='str', aliases=['name', 'pool_name']),  # Not required for querying all objects\n        pool_allocation_mode=dict(type='str', aliases=['allocation_mode', 'mode'], choices=['dynamic', 'static']),\n        pool_type=dict(type='str', aliases=['type'], choices=['vlan', 'vxlan', 'vsan'], required=True),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['pool']],\n            ['state', 'present', ['pool']],\n        ],\n    )\n\n    description = module.params['description']\n    pool = module.params['pool']\n    pool_type = module.params['pool_type']\n    pool_allocation_mode = module.params['pool_allocation_mode']\n    state = module.params['state']\n\n    aci_class = ACI_MAPPING[pool_type][\"aci_class\"]\n    aci_mo = ACI_MAPPING[pool_type][\"aci_mo\"]\n    pool_name = pool\n\n    # ACI Pool URL requires the pool_allocation mode for vlan and vsan pools (ex: uni/infra/vlanns-[poolname]-static)\n    if pool_type != 'vxlan' and pool is not None:\n        if pool_allocation_mode is not None:\n            pool_name = '[{0}]-{1}'.format(pool, pool_allocation_mode)\n        else:\n            module.fail_json(msg=\"ACI requires parameter 'pool_allocation_mode' for 'pool_type' of 'vlan' and 'vsan' when parameter 'pool' is provided\")\n\n    # Vxlan pools do not support pool allocation modes\n    if pool_type == 'vxlan' and pool_allocation_mode is not None:\n        module.fail_json(msg=\"vxlan pools do not support setting the 'pool_allocation_mode'; please remove this parameter from the task\")\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class=aci_class,\n            aci_rn='{0}{1}'.format(aci_mo, pool_name),\n            filter_target='eq({0}.name, \"{1}\")'.format(aci_class, pool),\n            module_object=pool,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        # Filter out module parameters with null values\n        aci.payload(\n            aci_class=aci_class,\n            class_config=dict(\n                allocMode=pool_allocation_mode,\n                descr=description,\n                name=pool,\n            )\n        )\n\n        # Generate config diff which will be used as POST request body\n        aci.get_diff(aci_class=aci_class)\n\n        # Submit changes if module not in check_mode and the proposed is different than existing\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_encap_pool.py", "id": "1979335da185947a3424847306c0d620", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_encap_pool.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}