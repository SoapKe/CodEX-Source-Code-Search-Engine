{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    unified_strdate,\n)\n\n\nclass PornoVoisinesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pornovoisines\\.com/videos/show/(?P<id>\\d+)/(?P<display_id>[^/.]+)'\n\n    _TEST = {\n        'url': 'http://www.pornovoisines.com/videos/show/919/recherche-appartement.html',\n        'md5': '6f8aca6a058592ab49fe701c8ba8317b',\n        'info_dict': {\n            'id': '919',\n            'display_id': 'recherche-appartement',\n            'ext': 'mp4',\n            'title': 'Recherche appartement',\n            'description': 'md5:fe10cb92ae2dd3ed94bb4080d11ff493',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20140925',\n            'duration': 120,\n            'view_count': int,\n            'average_rating': float,\n            'categories': ['D\u00e9butante', 'D\u00e9butantes', 'Sc\u00e9nario', 'Sodomie'],\n            'age_limit': 18,\n            'subtitles': {\n                'fr': [{\n                    'ext': 'vtt',\n                }]\n            },\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        settings_url = self._download_json(\n            'http://www.pornovoisines.com/api/video/%s/getsettingsurl/' % video_id,\n            video_id, note='Getting settings URL')['video_settings_url']\n        settings = self._download_json(settings_url, video_id)['data']\n\n        formats = []\n        for kind, data in settings['variants'].items():\n            if kind == 'HLS':\n                formats.extend(self._extract_m3u8_formats(\n                    data, video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls'))\n            elif kind == 'MP4':\n                for item in data:\n                    formats.append({\n                        'url': item['url'],\n                        'height': item.get('height'),\n                        'bitrate': item.get('bitrate'),\n                    })\n        self._sort_formats(formats)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n\n        \n        thumbnail = self._html_search_regex(\n            r'<img[^>]+class=([\\'\"])thumb\\1[^>]*src=([\\'\"])(?P<url>[^\"]+)\\2',\n            webpage, 'thumbnail', fatal=False, group='url')\n\n        upload_date = unified_strdate(self._search_regex(\n            r'Le\\s*<b>([\\d/]+)', webpage, 'upload date', fatal=False))\n        duration = settings.get('main', {}).get('duration')\n        view_count = int_or_none(self._search_regex(\n            r'(\\d+) vues', webpage, 'view count', fatal=False))\n        average_rating = self._search_regex(\n            r'Note\\s*:\\s*(\\d+(?:,\\d+)?)', webpage, 'average rating', fatal=False)\n        if average_rating:\n            average_rating = float_or_none(average_rating.replace(',', '.'))\n\n        categories = self._html_search_regex(\n            r'(?s)Cat\u00e9gories\\s*:\\s*<b>(.+?)</b>', webpage, 'categories', fatal=False)\n        if categories:\n            categories = [category.strip() for category in categories.split(',')]\n\n        subtitles = {'fr': [{\n            'url': subtitle,\n        } for subtitle in settings.get('main', {}).get('vtt_tracks', {}).values()]}\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'formats': formats,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'duration': duration,\n            'view_count': view_count,\n            'average_rating': average_rating,\n            'categories': categories,\n            'age_limit': 18,\n            'subtitles': subtitles,\n        }\n", "comments": "# coding: utf-8\n# The webpage has a bug - there's no space between \"thumb\" and src=\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    unified_strdate,\n)\n\n\nclass PornoVoisinesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?pornovoisines\\.com/videos/show/(?P<id>\\d+)/(?P<display_id>[^/.]+)'\n\n    _TEST = {\n        'url': 'http://www.pornovoisines.com/videos/show/919/recherche-appartement.html',\n        'md5': '6f8aca6a058592ab49fe701c8ba8317b',\n        'info_dict': {\n            'id': '919',\n            'display_id': 'recherche-appartement',\n            'ext': 'mp4',\n            'title': 'Recherche appartement',\n            'description': 'md5:fe10cb92ae2dd3ed94bb4080d11ff493',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20140925',\n            'duration': 120,\n            'view_count': int,\n            'average_rating': float,\n            'categories': ['D\u00e9butante', 'D\u00e9butantes', 'Sc\u00e9nario', 'Sodomie'],\n            'age_limit': 18,\n            'subtitles': {\n                'fr': [{\n                    'ext': 'vtt',\n                }]\n            },\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        settings_url = self._download_json(\n            'http://www.pornovoisines.com/api/video/%s/getsettingsurl/' % video_id,\n            video_id, note='Getting settings URL')['video_settings_url']\n        settings = self._download_json(settings_url, video_id)['data']\n\n        formats = []\n        for kind, data in settings['variants'].items():\n            if kind == 'HLS':\n                formats.extend(self._extract_m3u8_formats(\n                    data, video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls'))\n            elif kind == 'MP4':\n                for item in data:\n                    formats.append({\n                        'url': item['url'],\n                        'height': item.get('height'),\n                        'bitrate': item.get('bitrate'),\n                    })\n        self._sort_formats(formats)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n\n        # The webpage has a bug - there's no space between \"thumb\" and src=\n        thumbnail = self._html_search_regex(\n            r'<img[^>]+class=([\\'\"])thumb\\1[^>]*src=([\\'\"])(?P<url>[^\"]+)\\2',\n            webpage, 'thumbnail', fatal=False, group='url')\n\n        upload_date = unified_strdate(self._search_regex(\n            r'Le\\s*<b>([\\d/]+)', webpage, 'upload date', fatal=False))\n        duration = settings.get('main', {}).get('duration')\n        view_count = int_or_none(self._search_regex(\n            r'(\\d+) vues', webpage, 'view count', fatal=False))\n        average_rating = self._search_regex(\n            r'Note\\s*:\\s*(\\d+(?:,\\d+)?)', webpage, 'average rating', fatal=False)\n        if average_rating:\n            average_rating = float_or_none(average_rating.replace(',', '.'))\n\n        categories = self._html_search_regex(\n            r'(?s)Cat\u00e9gories\\s*:\\s*<b>(.+?)</b>', webpage, 'categories', fatal=False)\n        if categories:\n            categories = [category.strip() for category in categories.split(',')]\n\n        subtitles = {'fr': [{\n            'url': subtitle,\n        } for subtitle in settings.get('main', {}).get('vtt_tracks', {}).values()]}\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'formats': formats,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'duration': duration,\n            'view_count': view_count,\n            'average_rating': average_rating,\n            'categories': categories,\n            'age_limit': 18,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pornovoisines.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pornovoisines.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}