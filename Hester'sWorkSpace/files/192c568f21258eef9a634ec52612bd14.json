{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    encode_base_n,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    str_to_int,\n)\n\n\nclass EpornerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?eporner\\.com/(?:hd-porn|embed)/(?P<id>\\w+)(?:/(?P<display_id>[\\w-]+))?'\n    _TESTS = [{\n        'url': 'http://www.eporner.com/hd-porn/95008/Infamous-Tiffany-Teen-Strip-Tease-Video/',\n        'md5': '39d486f046212d8e1b911c52ab4691f8',\n        'info_dict': {\n            'id': 'qlDUmNsj6VS',\n            'display_id': 'Infamous-Tiffany-Teen-Strip-Tease-Video',\n            'ext': 'mp4',\n            'title': 'Infamous Tiffany Teen Strip Tease Video',\n            'duration': 1838,\n            'view_count': int,\n            'age_limit': 18,\n        },\n    }, {\n        \n        'url': 'http://www.eporner.com/hd-porn/3YRUtzMcWn0/Star-Wars-XXX-Parody/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.eporner.com/hd-porn/3YRUtzMcWn0',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.eporner.com/hd-porn/3YRUtzMcWn0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage, urlh = self._download_webpage_handle(url, display_id)\n\n        video_id = self._match_id(compat_str(urlh.geturl()))\n\n        hash = self._search_regex(\n            r'hash\\s*:\\s*[\"\\']([\\da-f]{32})', webpage, 'hash')\n\n        title = self._og_search_title(webpage, default=None) or self._html_search_regex(\n            r'<title>(.+?) - EPORNER', webpage, 'title')\n\n        \n        def calc_hash(s):\n            return ''.join((encode_base_n(int(s[lb:lb + 8], 16), 36) for lb in range(0, 32, 8)))\n\n        video = self._download_json(\n            'http://www.eporner.com/xhr/video/%s' % video_id,\n            display_id, note='Downloading video JSON',\n            query={\n                'hash': calc_hash(hash),\n                'device': 'generic',\n                'domain': 'www.eporner.com',\n                'fallback': 'false',\n            })\n\n        if video.get('available') is False:\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, video['message']), expected=True)\n\n        sources = video['sources']\n\n        formats = []\n        for kind, formats_dict in sources.items():\n            if not isinstance(formats_dict, dict):\n                continue\n            for format_id, format_dict in formats_dict.items():\n                if not isinstance(format_dict, dict):\n                    continue\n                src = format_dict.get('src')\n                if not isinstance(src, compat_str) or not src.startswith('http'):\n                    continue\n                if kind == 'hls':\n                    formats.extend(self._extract_m3u8_formats(\n                        src, display_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id=kind, fatal=False))\n                else:\n                    height = int_or_none(self._search_regex(\n                        r'(\\d+)[pP]', format_id, 'height', default=None))\n                    fps = int_or_none(self._search_regex(\n                        r'(\\d+)fps', format_id, 'fps', default=None))\n\n                    formats.append({\n                        'url': src,\n                        'format_id': format_id,\n                        'height': height,\n                        'fps': fps,\n                    })\n        self._sort_formats(formats)\n\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n        view_count = str_to_int(self._search_regex(\n            r'id=\"cinemaviews\">\\s*([0-9,]+)\\s*<small>views',\n            webpage, 'view count', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n            'age_limit': 18,\n        }\n", "comments": "# coding: utf-8\n# New (May 2016) URL layout\n# Reverse engineered from vjs.js\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    encode_base_n,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    str_to_int,\n)\n\n\nclass EpornerIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?eporner\\.com/(?:hd-porn|embed)/(?P<id>\\w+)(?:/(?P<display_id>[\\w-]+))?'\n    _TESTS = [{\n        'url': 'http://www.eporner.com/hd-porn/95008/Infamous-Tiffany-Teen-Strip-Tease-Video/',\n        'md5': '39d486f046212d8e1b911c52ab4691f8',\n        'info_dict': {\n            'id': 'qlDUmNsj6VS',\n            'display_id': 'Infamous-Tiffany-Teen-Strip-Tease-Video',\n            'ext': 'mp4',\n            'title': 'Infamous Tiffany Teen Strip Tease Video',\n            'duration': 1838,\n            'view_count': int,\n            'age_limit': 18,\n        },\n    }, {\n        # New (May 2016) URL layout\n        'url': 'http://www.eporner.com/hd-porn/3YRUtzMcWn0/Star-Wars-XXX-Parody/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.eporner.com/hd-porn/3YRUtzMcWn0',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.eporner.com/hd-porn/3YRUtzMcWn0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage, urlh = self._download_webpage_handle(url, display_id)\n\n        video_id = self._match_id(compat_str(urlh.geturl()))\n\n        hash = self._search_regex(\n            r'hash\\s*:\\s*[\"\\']([\\da-f]{32})', webpage, 'hash')\n\n        title = self._og_search_title(webpage, default=None) or self._html_search_regex(\n            r'<title>(.+?) - EPORNER', webpage, 'title')\n\n        # Reverse engineered from vjs.js\n        def calc_hash(s):\n            return ''.join((encode_base_n(int(s[lb:lb + 8], 16), 36) for lb in range(0, 32, 8)))\n\n        video = self._download_json(\n            'http://www.eporner.com/xhr/video/%s' % video_id,\n            display_id, note='Downloading video JSON',\n            query={\n                'hash': calc_hash(hash),\n                'device': 'generic',\n                'domain': 'www.eporner.com',\n                'fallback': 'false',\n            })\n\n        if video.get('available') is False:\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, video['message']), expected=True)\n\n        sources = video['sources']\n\n        formats = []\n        for kind, formats_dict in sources.items():\n            if not isinstance(formats_dict, dict):\n                continue\n            for format_id, format_dict in formats_dict.items():\n                if not isinstance(format_dict, dict):\n                    continue\n                src = format_dict.get('src')\n                if not isinstance(src, compat_str) or not src.startswith('http'):\n                    continue\n                if kind == 'hls':\n                    formats.extend(self._extract_m3u8_formats(\n                        src, display_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id=kind, fatal=False))\n                else:\n                    height = int_or_none(self._search_regex(\n                        r'(\\d+)[pP]', format_id, 'height', default=None))\n                    fps = int_or_none(self._search_regex(\n                        r'(\\d+)fps', format_id, 'fps', default=None))\n\n                    formats.append({\n                        'url': src,\n                        'format_id': format_id,\n                        'height': height,\n                        'fps': fps,\n                    })\n        self._sort_formats(formats)\n\n        duration = parse_duration(self._html_search_meta('duration', webpage))\n        view_count = str_to_int(self._search_regex(\n            r'id=\"cinemaviews\">\\s*([0-9,]+)\\s*<small>views',\n            webpage, 'view count', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n            'age_limit': 18,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "eporner.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/eporner.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}