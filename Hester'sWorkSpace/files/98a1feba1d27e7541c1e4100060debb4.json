{"author": "django", "code": "from django.template import TemplateDoesNotExist\nfrom django.template.loader import (\n    get_template, render_to_string, select_template,\n)\nfrom django.test import SimpleTestCase, override_settings\nfrom django.test.client import RequestFactory\n\n\n@override_settings(TEMPLATES=[{\n    'BACKEND': 'django.template.backends.dummy.TemplateStrings',\n    'APP_DIRS': True,\n}, {\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    'OPTIONS': {\n        'context_processors': [\n            'django.template.context_processors.request',\n        ],\n        'loaders': [\n            'django.template.loaders.filesystem.Loader',\n            'django.template.loaders.app_directories.Loader',\n        ]\n    },\n}])\nclass TemplateLoaderTests(SimpleTestCase):\n\n    def test_get_template_first_engine(self):\n        template = get_template(\"template_loader/hello.html\")\n        self.assertEqual(template.render(), \"Hello! (template strings)\\n\")\n\n    def test_get_template_second_engine(self):\n        template = get_template(\"template_loader/goodbye.html\")\n        self.assertEqual(template.render(), \"Goodbye! (Django templates)\\n\")\n\n    def test_get_template_using_engine(self):\n        template = get_template(\"template_loader/hello.html\", using=\"django\")\n        self.assertEqual(template.render(), \"Hello! (Django templates)\\n\")\n\n    def test_get_template_not_found(self):\n        with self.assertRaises(TemplateDoesNotExist) as e:\n            get_template(\"template_loader/unknown.html\")\n        self.assertEqual(\n            e.exception.chain[-1].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[-1].backend.name, 'django')\n\n    def test_select_template_first_engine(self):\n        template = select_template([\"template_loader/unknown.html\",\n                                    \"template_loader/hello.html\"])\n        self.assertEqual(template.render(), \"Hello! (template strings)\\n\")\n\n    def test_select_template_second_engine(self):\n        template = select_template([\"template_loader/unknown.html\",\n                                    \"template_loader/goodbye.html\"])\n        self.assertEqual(template.render(), \"Goodbye! (Django templates)\\n\")\n\n    def test_select_template_using_engine(self):\n        template = select_template([\"template_loader/unknown.html\",\n                                    \"template_loader/hello.html\"], using=\"django\")\n        self.assertEqual(template.render(), \"Hello! (Django templates)\\n\")\n\n    def test_select_template_empty(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            select_template([])\n\n    def test_select_template_string(self):\n        with self.assertRaisesMessage(\n            TypeError,\n            \"select_template() takes an iterable of template names but got a \"\n            \"string: 'template_loader/hello.html'. Use get_template() if you \"\n            \"want to load a single template by name.\"\n        ):\n            select_template('template_loader/hello.html')\n\n    def test_select_template_not_found(self):\n        with self.assertRaises(TemplateDoesNotExist) as e:\n            select_template([\"template_loader/unknown.html\",\n                             \"template_loader/missing.html\"])\n        self.assertEqual(\n            e.exception.chain[0].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[0].backend.name, 'dummy')\n        self.assertEqual(\n            e.exception.chain[-1].tried[0][0].template_name,\n            'template_loader/missing.html',\n        )\n        self.assertEqual(e.exception.chain[-1].backend.name, 'django')\n\n    def test_select_template_tries_all_engines_before_names(self):\n        template = select_template([\"template_loader/goodbye.html\",\n                                    \"template_loader/hello.html\"])\n        self.assertEqual(template.render(), \"Goodbye! (Django templates)\\n\")\n\n    def test_render_to_string_first_engine(self):\n        content = render_to_string(\"template_loader/hello.html\")\n        self.assertEqual(content, \"Hello! (template strings)\\n\")\n\n    def test_render_to_string_second_engine(self):\n        content = render_to_string(\"template_loader/goodbye.html\")\n        self.assertEqual(content, \"Goodbye! (Django templates)\\n\")\n\n    def test_render_to_string_with_request(self):\n        request = RequestFactory().get('/foobar/')\n        content = render_to_string(\"template_loader/request.html\", request=request)\n        self.assertEqual(content, \"/foobar/\\n\")\n\n    def test_render_to_string_using_engine(self):\n        content = render_to_string(\"template_loader/hello.html\", using=\"django\")\n        self.assertEqual(content, \"Hello! (Django templates)\\n\")\n\n    def test_render_to_string_not_found(self):\n        with self.assertRaises(TemplateDoesNotExist) as e:\n            render_to_string(\"template_loader/unknown.html\")\n        self.assertEqual(\n            e.exception.chain[-1].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[-1].backend.name, 'django')\n\n    def test_render_to_string_with_list_first_engine(self):\n        content = render_to_string([\"template_loader/unknown.html\",\n                                    \"template_loader/hello.html\"])\n        self.assertEqual(content, \"Hello! (template strings)\\n\")\n\n    def test_render_to_string_with_list_second_engine(self):\n        content = render_to_string([\"template_loader/unknown.html\",\n                                    \"template_loader/goodbye.html\"])\n        self.assertEqual(content, \"Goodbye! (Django templates)\\n\")\n\n    def test_render_to_string_with_list_using_engine(self):\n        content = render_to_string([\"template_loader/unknown.html\",\n                                    \"template_loader/hello.html\"], using=\"django\")\n        self.assertEqual(content, \"Hello! (Django templates)\\n\")\n\n    def test_render_to_string_with_list_empty(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            render_to_string([])\n\n    def test_render_to_string_with_list_not_found(self):\n        with self.assertRaises(TemplateDoesNotExist) as e:\n            render_to_string([\"template_loader/unknown.html\",\n                              \"template_loader/missing.html\"])\n        self.assertEqual(\n            e.exception.chain[0].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[0].backend.name, 'dummy')\n        self.assertEqual(\n            e.exception.chain[1].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[1].backend.name, 'django')\n        self.assertEqual(\n            e.exception.chain[2].tried[0][0].template_name,\n            'template_loader/missing.html',\n        )\n        self.assertEqual(e.exception.chain[2].backend.name, 'dummy')\n        self.assertEqual(\n            e.exception.chain[3].tried[0][0].template_name,\n            'template_loader/missing.html',\n        )\n        self.assertEqual(e.exception.chain[3].backend.name, 'django')\n\n    def test_render_to_string_with_list_tries_all_engines_before_names(self):\n        content = render_to_string([\"template_loader/goodbye.html\",\n                                    \"template_loader/hello.html\"])\n        self.assertEqual(content, \"Goodbye! (Django templates)\\n\")\n", "comments": "", "content": "from django.template import TemplateDoesNotExist\nfrom django.template.loader import (\n    get_template, render_to_string, select_template,\n)\nfrom django.test import SimpleTestCase, override_settings\nfrom django.test.client import RequestFactory\n\n\n@override_settings(TEMPLATES=[{\n    'BACKEND': 'django.template.backends.dummy.TemplateStrings',\n    'APP_DIRS': True,\n}, {\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    'OPTIONS': {\n        'context_processors': [\n            'django.template.context_processors.request',\n        ],\n        'loaders': [\n            'django.template.loaders.filesystem.Loader',\n            'django.template.loaders.app_directories.Loader',\n        ]\n    },\n}])\nclass TemplateLoaderTests(SimpleTestCase):\n\n    def test_get_template_first_engine(self):\n        template = get_template(\"template_loader/hello.html\")\n        self.assertEqual(template.render(), \"Hello! (template strings)\\n\")\n\n    def test_get_template_second_engine(self):\n        template = get_template(\"template_loader/goodbye.html\")\n        self.assertEqual(template.render(), \"Goodbye! (Django templates)\\n\")\n\n    def test_get_template_using_engine(self):\n        template = get_template(\"template_loader/hello.html\", using=\"django\")\n        self.assertEqual(template.render(), \"Hello! (Django templates)\\n\")\n\n    def test_get_template_not_found(self):\n        with self.assertRaises(TemplateDoesNotExist) as e:\n            get_template(\"template_loader/unknown.html\")\n        self.assertEqual(\n            e.exception.chain[-1].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[-1].backend.name, 'django')\n\n    def test_select_template_first_engine(self):\n        template = select_template([\"template_loader/unknown.html\",\n                                    \"template_loader/hello.html\"])\n        self.assertEqual(template.render(), \"Hello! (template strings)\\n\")\n\n    def test_select_template_second_engine(self):\n        template = select_template([\"template_loader/unknown.html\",\n                                    \"template_loader/goodbye.html\"])\n        self.assertEqual(template.render(), \"Goodbye! (Django templates)\\n\")\n\n    def test_select_template_using_engine(self):\n        template = select_template([\"template_loader/unknown.html\",\n                                    \"template_loader/hello.html\"], using=\"django\")\n        self.assertEqual(template.render(), \"Hello! (Django templates)\\n\")\n\n    def test_select_template_empty(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            select_template([])\n\n    def test_select_template_string(self):\n        with self.assertRaisesMessage(\n            TypeError,\n            \"select_template() takes an iterable of template names but got a \"\n            \"string: 'template_loader/hello.html'. Use get_template() if you \"\n            \"want to load a single template by name.\"\n        ):\n            select_template('template_loader/hello.html')\n\n    def test_select_template_not_found(self):\n        with self.assertRaises(TemplateDoesNotExist) as e:\n            select_template([\"template_loader/unknown.html\",\n                             \"template_loader/missing.html\"])\n        self.assertEqual(\n            e.exception.chain[0].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[0].backend.name, 'dummy')\n        self.assertEqual(\n            e.exception.chain[-1].tried[0][0].template_name,\n            'template_loader/missing.html',\n        )\n        self.assertEqual(e.exception.chain[-1].backend.name, 'django')\n\n    def test_select_template_tries_all_engines_before_names(self):\n        template = select_template([\"template_loader/goodbye.html\",\n                                    \"template_loader/hello.html\"])\n        self.assertEqual(template.render(), \"Goodbye! (Django templates)\\n\")\n\n    def test_render_to_string_first_engine(self):\n        content = render_to_string(\"template_loader/hello.html\")\n        self.assertEqual(content, \"Hello! (template strings)\\n\")\n\n    def test_render_to_string_second_engine(self):\n        content = render_to_string(\"template_loader/goodbye.html\")\n        self.assertEqual(content, \"Goodbye! (Django templates)\\n\")\n\n    def test_render_to_string_with_request(self):\n        request = RequestFactory().get('/foobar/')\n        content = render_to_string(\"template_loader/request.html\", request=request)\n        self.assertEqual(content, \"/foobar/\\n\")\n\n    def test_render_to_string_using_engine(self):\n        content = render_to_string(\"template_loader/hello.html\", using=\"django\")\n        self.assertEqual(content, \"Hello! (Django templates)\\n\")\n\n    def test_render_to_string_not_found(self):\n        with self.assertRaises(TemplateDoesNotExist) as e:\n            render_to_string(\"template_loader/unknown.html\")\n        self.assertEqual(\n            e.exception.chain[-1].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[-1].backend.name, 'django')\n\n    def test_render_to_string_with_list_first_engine(self):\n        content = render_to_string([\"template_loader/unknown.html\",\n                                    \"template_loader/hello.html\"])\n        self.assertEqual(content, \"Hello! (template strings)\\n\")\n\n    def test_render_to_string_with_list_second_engine(self):\n        content = render_to_string([\"template_loader/unknown.html\",\n                                    \"template_loader/goodbye.html\"])\n        self.assertEqual(content, \"Goodbye! (Django templates)\\n\")\n\n    def test_render_to_string_with_list_using_engine(self):\n        content = render_to_string([\"template_loader/unknown.html\",\n                                    \"template_loader/hello.html\"], using=\"django\")\n        self.assertEqual(content, \"Hello! (Django templates)\\n\")\n\n    def test_render_to_string_with_list_empty(self):\n        with self.assertRaises(TemplateDoesNotExist):\n            render_to_string([])\n\n    def test_render_to_string_with_list_not_found(self):\n        with self.assertRaises(TemplateDoesNotExist) as e:\n            render_to_string([\"template_loader/unknown.html\",\n                              \"template_loader/missing.html\"])\n        self.assertEqual(\n            e.exception.chain[0].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[0].backend.name, 'dummy')\n        self.assertEqual(\n            e.exception.chain[1].tried[0][0].template_name,\n            'template_loader/unknown.html',\n        )\n        self.assertEqual(e.exception.chain[1].backend.name, 'django')\n        self.assertEqual(\n            e.exception.chain[2].tried[0][0].template_name,\n            'template_loader/missing.html',\n        )\n        self.assertEqual(e.exception.chain[2].backend.name, 'dummy')\n        self.assertEqual(\n            e.exception.chain[3].tried[0][0].template_name,\n            'template_loader/missing.html',\n        )\n        self.assertEqual(e.exception.chain[3].backend.name, 'django')\n\n    def test_render_to_string_with_list_tries_all_engines_before_names(self):\n        content = render_to_string([\"template_loader/goodbye.html\",\n                                    \"template_loader/hello.html\"])\n        self.assertEqual(content, \"Goodbye! (Django templates)\\n\")\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "98a1feba1d27e7541c1e4100060debb4", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/template_loader/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}