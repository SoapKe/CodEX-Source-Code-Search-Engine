{"author": "reddit-archive", "code": "\n\n License Version 1.0. (the \"License\"); you may not use this file except in\n\n\n\n\n\n\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n the specific language governing rights and limitations under the License.\n\n The Original Code is reddit.\n\n The Original Developer is the Initial Developer.  The Initial Developer of\n the Original Code is reddit Inc.\n\n All portions of the code written by reddit are Copyright (c) 2006-2016 reddit\n Inc. All Rights Reserved.\n\nimport unittest\nfrom mock import patch\n\nimport pylibmc\nfrom pylons import app_globals as g\n\nfrom r2.lib import ratelimit\nfrom r2.lib.cache import LocalCache\n\n\nclass RateLimitStandaloneFunctionsTest(unittest.TestCase):\n    def setUp(self):\n        self.patch('ratelimit.time.time', lambda: self.now)\n\n        self.cache = LocalCache()\n        self.patch('ratelimit.g.ratelimitcache', self.cache)\n\n    def patch(self, *a, **kw):\n        p = patch(*a,  **kw)\n        p.start()\n        self.addCleanup(p.stop)\n\n    def test_get_timeslice(self):\n        self.now = 125\n        ts = ratelimit.get_timeslice(60)\n        self.assertEquals(120, ts.beginning)\n        self.assertEquals(180, ts.end)\n        self.assertEquals(55, ts.remaining)\n\n    def test_make_ratelimit_cache_key_1s(self):\n        self.now = 14\n        ts = ratelimit.get_timeslice(1)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-000014', key)\n\n    def test_make_ratelimit_cache_key_1m(self):\n        self.now = 65\n        ts = ratelimit.get_timeslice(60)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-000100', key)\n\n    def test_make_ratelimit_cache_key_1h(self):\n        self.now = 3650\n        ts = ratelimit.get_timeslice(3600)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-010000', key)\n\n    def test_make_ratelimit_cache_key_1d(self):\n        self.now = 24 * 3600 + 5\n        ts = ratelimit.get_timeslice(24 * 3600)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-@86400', key)\n\n    def test_make_ratelimit_cache_key_1w(self):\n        self.now = 7 * 24 * 3600 + 5\n        ts = ratelimit.get_timeslice(24 * 3600)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-@604800', key)\n\n    def test_record_usage(self):\n        self.now = 24 * 3600 + 5\n        ts = ratelimit.get_timeslice(3600)\n        ratelimit.record_usage('a', ts)\n        self.assertEquals(1, self.cache['rl:a-000000'])\n        ratelimit.record_usage('a', ts)\n        self.assertEquals(2, self.cache['rl:a-000000'])\n\n        self.now = 24 * 3600 + 5 * 3600\n        ts = ratelimit.get_timeslice(3600)\n        ratelimit.record_usage('a', ts)\n        self.assertEquals(1, self.cache['rl:a-050000'])\n\n    def test_record_usage_across_slice_expiration(self):\n        self.now = 24 * 3600 + 5\n        ts = ratelimit.get_timeslice(3600)\n        real_incr = self.cache.incr\n        evicted = False\n\n        def fake_incr(key):\n            if evicted:\n                del self.cache[key]\n                raise pylibmc.NotFound()\n            return real_incr(key)\n\n        with patch.object(self.cache, 'incr', fake_incr):\n             Forcibly evict the key before incr() is called, but after the\n             initial add() call inside record_usage().\n            evicted = True\n            ratelimit.record_usage('a', ts)\n            self.assertEquals(1, self.cache['rl:a-000000'])\n\n    def test_get_usage(self):\n        self.now = 24 * 3600 + 5 * 3600\n        ts = ratelimit.get_timeslice(3600)\n        self.assertEquals(None, ratelimit.get_usage('a', ts))\n        ratelimit.record_usage('a', ts)\n        self.assertEquals(1, ratelimit.get_usage('a', ts))\n\n\nclass RateLimitTest(unittest.TestCase):\n    class TestRateLimit(ratelimit.RateLimit):\n        event_name = 'TestRateLimit'\n        event_type = 'tests'\n        key = 'tests'\n        limit = 1\n        seconds = 3600\n\n    def setUp(self):\n        self.patch('ratelimit.time.time', lambda: self.now)\n\n        self.cache = LocalCache()\n        self.patch('ratelimit.g.ratelimitcache', self.cache)\n\n    def patch(self, *a, **kw):\n        p = patch(*a,  **kw)\n        p.start()\n        self.addCleanup(p.stop)\n\n    def test_record_usage(self):\n        rl = self.TestRateLimit()\n\n        self.now = 24 * 3600 + 5\n        rl.record_usage()\n        self.assertEquals(1, self.cache['rl:tests-000000'])\n        rl.record_usage()\n        self.assertEquals(2, self.cache['rl:tests-000000'])\n\n        self.now = 24 * 3600 + 5 * 3600\n        rl.record_usage()\n        self.assertEquals(1, self.cache['rl:tests-050000'])\n\n    def test_get_usage(self):\n        rl = self.TestRateLimit()\n        self.now = 24 * 3600 + 5 * 3600\n        self.assertTrue(rl.check())\n        rl.record_usage()\n        self.assertFalse(rl.check())\n\n\nclass LiveConfigRateLimitTest(unittest.TestCase):\n    class TestRateLimit(ratelimit.LiveConfigRateLimit):\n        event_name = 'TestRateLimit'\n        event_type = 'tests'\n        key = 'rl-tests'\n        limit_live_key = 'RL_TESTS'\n        seconds_live_key = 'RL_TESTS_RESET_SECS'\n\n    def patch_liveconfig(self, k, v):\n        \"\"\"Helper method to patch g.live_config (with cleanup).\"\"\"\n        def cleanup(orig=g.live_config.get(k), has=k in g.live_config):\n            if has:\n                g.live_config[k] = orig\n            else:\n                del g.live_config[k]\n        g.live_config[k] = v\n        self.addCleanup(cleanup)\n\n    def configure_rate_limit(self, num, per_unit):\n        self.patch_liveconfig('RL_TESTS', num)\n        self.patch_liveconfig('RL_TESTS_RESET_SECS', per_unit)\n\n    def test_limit(self):\n        self.configure_rate_limit(1, 3600)\n        rl = self.TestRateLimit()\n        self.assertEquals(1, rl.limit)\n\n        self.configure_rate_limit(2, 3600)\n        self.assertEquals(2, rl.limit)\n\n    def test_seconds(self):\n        self.configure_rate_limit(1, 3600)\n        rl = self.TestRateLimit()\n        self.assertEquals(3600, rl.seconds)\n\n        self.configure_rate_limit(1, 300)\n        self.assertEquals(300, rl.seconds)\n", "comments": "   helper method patch g live config (with cleanup)         usr bin env python    the contents file subject common public attribution    license version 1 0  (the  license )  may use file except    compliance license  you may obtain copy license    http   code reddit com license  the license based mozilla public    license version 1 1  sections 14 15 added cover use    software computer network provide limited attribution    original developer  in addition  exhibit a modified consistent    exhibit b        software distributed license distributed  as is  basis     without warranty of any kind  either express implied  see license    specific language governing rights limitations license        the original code reddit        the original developer initial developer   the initial developer    original code reddit inc        all portions code written reddit copyright (c) 2006 2016 reddit    inc  all rights reserved                                                                                      forcibly evict key incr() called     initial add() call inside record usage()  ", "content": "#!/usr/bin/env python\n# The contents of this file are subject to the Common Public Attribution\n# License Version 1.0. (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public\n# License Version 1.1, but Sections 14 and 15 have been added to cover use of\n# software over a computer network and provide for limited attribution for the\n# Original Developer. In addition, Exhibit A has been modified to be consistent\n# with Exhibit B.\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n# the specific language governing rights and limitations under the License.\n#\n# The Original Code is reddit.\n#\n# The Original Developer is the Initial Developer.  The Initial Developer of\n# the Original Code is reddit Inc.\n#\n# All portions of the code written by reddit are Copyright (c) 2006-2016 reddit\n# Inc. All Rights Reserved.\n###############################################################################\nimport unittest\nfrom mock import patch\n\nimport pylibmc\nfrom pylons import app_globals as g\n\nfrom r2.lib import ratelimit\nfrom r2.lib.cache import LocalCache\n\n\nclass RateLimitStandaloneFunctionsTest(unittest.TestCase):\n    def setUp(self):\n        self.patch('ratelimit.time.time', lambda: self.now)\n\n        self.cache = LocalCache()\n        self.patch('ratelimit.g.ratelimitcache', self.cache)\n\n    def patch(self, *a, **kw):\n        p = patch(*a,  **kw)\n        p.start()\n        self.addCleanup(p.stop)\n\n    def test_get_timeslice(self):\n        self.now = 125\n        ts = ratelimit.get_timeslice(60)\n        self.assertEquals(120, ts.beginning)\n        self.assertEquals(180, ts.end)\n        self.assertEquals(55, ts.remaining)\n\n    def test_make_ratelimit_cache_key_1s(self):\n        self.now = 14\n        ts = ratelimit.get_timeslice(1)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-000014', key)\n\n    def test_make_ratelimit_cache_key_1m(self):\n        self.now = 65\n        ts = ratelimit.get_timeslice(60)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-000100', key)\n\n    def test_make_ratelimit_cache_key_1h(self):\n        self.now = 3650\n        ts = ratelimit.get_timeslice(3600)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-010000', key)\n\n    def test_make_ratelimit_cache_key_1d(self):\n        self.now = 24 * 3600 + 5\n        ts = ratelimit.get_timeslice(24 * 3600)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-@86400', key)\n\n    def test_make_ratelimit_cache_key_1w(self):\n        self.now = 7 * 24 * 3600 + 5\n        ts = ratelimit.get_timeslice(24 * 3600)\n        key = ratelimit._make_ratelimit_cache_key('a', ts)\n        self.assertEquals('rl:a-@604800', key)\n\n    def test_record_usage(self):\n        self.now = 24 * 3600 + 5\n        ts = ratelimit.get_timeslice(3600)\n        ratelimit.record_usage('a', ts)\n        self.assertEquals(1, self.cache['rl:a-000000'])\n        ratelimit.record_usage('a', ts)\n        self.assertEquals(2, self.cache['rl:a-000000'])\n\n        self.now = 24 * 3600 + 5 * 3600\n        ts = ratelimit.get_timeslice(3600)\n        ratelimit.record_usage('a', ts)\n        self.assertEquals(1, self.cache['rl:a-050000'])\n\n    def test_record_usage_across_slice_expiration(self):\n        self.now = 24 * 3600 + 5\n        ts = ratelimit.get_timeslice(3600)\n        real_incr = self.cache.incr\n        evicted = False\n\n        def fake_incr(key):\n            if evicted:\n                del self.cache[key]\n                raise pylibmc.NotFound()\n            return real_incr(key)\n\n        with patch.object(self.cache, 'incr', fake_incr):\n            # Forcibly evict the key before incr() is called, but after the\n            # initial add() call inside record_usage().\n            evicted = True\n            ratelimit.record_usage('a', ts)\n            self.assertEquals(1, self.cache['rl:a-000000'])\n\n    def test_get_usage(self):\n        self.now = 24 * 3600 + 5 * 3600\n        ts = ratelimit.get_timeslice(3600)\n        self.assertEquals(None, ratelimit.get_usage('a', ts))\n        ratelimit.record_usage('a', ts)\n        self.assertEquals(1, ratelimit.get_usage('a', ts))\n\n\nclass RateLimitTest(unittest.TestCase):\n    class TestRateLimit(ratelimit.RateLimit):\n        event_name = 'TestRateLimit'\n        event_type = 'tests'\n        key = 'tests'\n        limit = 1\n        seconds = 3600\n\n    def setUp(self):\n        self.patch('ratelimit.time.time', lambda: self.now)\n\n        self.cache = LocalCache()\n        self.patch('ratelimit.g.ratelimitcache', self.cache)\n\n    def patch(self, *a, **kw):\n        p = patch(*a,  **kw)\n        p.start()\n        self.addCleanup(p.stop)\n\n    def test_record_usage(self):\n        rl = self.TestRateLimit()\n\n        self.now = 24 * 3600 + 5\n        rl.record_usage()\n        self.assertEquals(1, self.cache['rl:tests-000000'])\n        rl.record_usage()\n        self.assertEquals(2, self.cache['rl:tests-000000'])\n\n        self.now = 24 * 3600 + 5 * 3600\n        rl.record_usage()\n        self.assertEquals(1, self.cache['rl:tests-050000'])\n\n    def test_get_usage(self):\n        rl = self.TestRateLimit()\n        self.now = 24 * 3600 + 5 * 3600\n        self.assertTrue(rl.check())\n        rl.record_usage()\n        self.assertFalse(rl.check())\n\n\nclass LiveConfigRateLimitTest(unittest.TestCase):\n    class TestRateLimit(ratelimit.LiveConfigRateLimit):\n        event_name = 'TestRateLimit'\n        event_type = 'tests'\n        key = 'rl-tests'\n        limit_live_key = 'RL_TESTS'\n        seconds_live_key = 'RL_TESTS_RESET_SECS'\n\n    def patch_liveconfig(self, k, v):\n        \"\"\"Helper method to patch g.live_config (with cleanup).\"\"\"\n        def cleanup(orig=g.live_config.get(k), has=k in g.live_config):\n            if has:\n                g.live_config[k] = orig\n            else:\n                del g.live_config[k]\n        g.live_config[k] = v\n        self.addCleanup(cleanup)\n\n    def configure_rate_limit(self, num, per_unit):\n        self.patch_liveconfig('RL_TESTS', num)\n        self.patch_liveconfig('RL_TESTS_RESET_SECS', per_unit)\n\n    def test_limit(self):\n        self.configure_rate_limit(1, 3600)\n        rl = self.TestRateLimit()\n        self.assertEquals(1, rl.limit)\n\n        self.configure_rate_limit(2, 3600)\n        self.assertEquals(2, rl.limit)\n\n    def test_seconds(self):\n        self.configure_rate_limit(1, 3600)\n        rl = self.TestRateLimit()\n        self.assertEquals(3600, rl.seconds)\n\n        self.configure_rate_limit(1, 300)\n        self.assertEquals(300, rl.seconds)\n", "description": "historical code from reddit.com", "file_name": "ratelimit_test.py", "id": "abf8ada98bdf8de43aa5a9c7f636fd48", "language": "Python", "project_name": "reddit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/reddit-archive-reddit/reddit-archive-reddit-753b174/r2/r2/tests/unit/ratelimit_test.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:55:36Z", "url": "https://github.com/reddit-archive/reddit", "wiki": true}