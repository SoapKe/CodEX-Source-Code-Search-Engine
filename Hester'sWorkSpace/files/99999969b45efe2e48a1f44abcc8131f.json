{"author": "reddit-archive", "code": "\n License Version 1.0. (the \"License\"); you may not use this file except in\n\n\n\n\n\n\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n the specific language governing rights and limitations under the License.\n\n The Original Code is reddit.\n\n The Original Developer is the Initial Developer.  The Initial Developer of\n the Original Code is reddit Inc.\n\n All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n Inc. All Rights Reserved.\n\nfrom pylons import request\nfrom pylons import tmpl_context as c\n\nfrom r2.config.extensions import set_extension\nfrom r2.controllers.reddit_base import RedditController, generate_modhash\nfrom r2.controllers.login import handle_login, handle_register\nfrom r2.lib.csrf import csrf_exempt\nfrom r2.lib.validator import (\n    json_validate,\n    ValidEmail,\n    VPasswordChange,\n    VRatelimit,\n    VSigned,\n    VThrottledLogin,\n    VUname,\n)\n\n\nclass APIv1LoginController(RedditController):\n\n    def pre(self):\n        super(APIv1LoginController, self).pre()\n        c.extension = \"json\"\n        set_extension(request.environ, \"json\")\n\n    @csrf_exempt\n    @json_validate(\n        VRatelimit(rate_ip=True, prefix=\"rate_register_\"),\n        signature=VSigned(),\n        name=VUname(['user']),\n        email=ValidEmail(\"email\"),\n        password=VPasswordChange(['passwd', 'passwd2']),\n    )\n    def POST_register(self, responder, name, email, password, **kwargs):\n        kwargs.update(dict(\n            controller=self,\n            form=responder(\"noop\"),\n            responder=responder,\n            name=name,\n            email=email,\n            password=password,\n        ))\n        return handle_register(**kwargs)\n\n    @csrf_exempt\n    @json_validate(\n        signature=VSigned(),\n        user=VThrottledLogin(['user', 'passwd']),\n    )\n    def POST_login(self, responder, user, **kwargs):\n        kwargs.update(dict(\n            controller=self,\n            form=responder(\"noop\"),\n            responder=responder,\n            user=user,\n        ))\n        return handle_login(**kwargs)\n\n    def _login(self, responder, user, rem=None):\n        \n        c.user = user\n        c.user_is_loggedin = True\n        self.login(user, rem=rem)\n\n        responder._send_data(modhash=generate_modhash())\n        responder._send_data(cookie=user.make_cookie())\n", "comments": "   login user           ajax login handler  used login register set         user cookie send back redirect                 the contents file subject common public attribution    license version 1 0  (the  license )  may use file except    compliance license  you may obtain copy license    http   code reddit com license  the license based mozilla public    license version 1 1  sections 14 15 added cover use    software computer network provide limited attribution    original developer  in addition  exhibit a modified consistent    exhibit b        software distributed license distributed  as is  basis     without warranty of any kind  either express implied  see license    specific language governing rights limitations license        the original code reddit        the original developer initial developer   the initial developer    original code reddit inc        all portions code written reddit copyright (c) 2006 2015 reddit    inc  all rights reserved                                                                                   ", "content": "# The contents of this file are subject to the Common Public Attribution\n# License Version 1.0. (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public\n# License Version 1.1, but Sections 14 and 15 have been added to cover use of\n# software over a computer network and provide for limited attribution for the\n# Original Developer. In addition, Exhibit A has been modified to be consistent\n# with Exhibit B.\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n# the specific language governing rights and limitations under the License.\n#\n# The Original Code is reddit.\n#\n# The Original Developer is the Initial Developer.  The Initial Developer of\n# the Original Code is reddit Inc.\n#\n# All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n# Inc. All Rights Reserved.\n###############################################################################\nfrom pylons import request\nfrom pylons import tmpl_context as c\n\nfrom r2.config.extensions import set_extension\nfrom r2.controllers.reddit_base import RedditController, generate_modhash\nfrom r2.controllers.login import handle_login, handle_register\nfrom r2.lib.csrf import csrf_exempt\nfrom r2.lib.validator import (\n    json_validate,\n    ValidEmail,\n    VPasswordChange,\n    VRatelimit,\n    VSigned,\n    VThrottledLogin,\n    VUname,\n)\n\n\nclass APIv1LoginController(RedditController):\n\n    def pre(self):\n        super(APIv1LoginController, self).pre()\n        c.extension = \"json\"\n        set_extension(request.environ, \"json\")\n\n    @csrf_exempt\n    @json_validate(\n        VRatelimit(rate_ip=True, prefix=\"rate_register_\"),\n        signature=VSigned(),\n        name=VUname(['user']),\n        email=ValidEmail(\"email\"),\n        password=VPasswordChange(['passwd', 'passwd2']),\n    )\n    def POST_register(self, responder, name, email, password, **kwargs):\n        kwargs.update(dict(\n            controller=self,\n            form=responder(\"noop\"),\n            responder=responder,\n            name=name,\n            email=email,\n            password=password,\n        ))\n        return handle_register(**kwargs)\n\n    @csrf_exempt\n    @json_validate(\n        signature=VSigned(),\n        user=VThrottledLogin(['user', 'passwd']),\n    )\n    def POST_login(self, responder, user, **kwargs):\n        kwargs.update(dict(\n            controller=self,\n            form=responder(\"noop\"),\n            responder=responder,\n            user=user,\n        ))\n        return handle_login(**kwargs)\n\n    def _login(self, responder, user, rem=None):\n        \"\"\"Login the user.\n\n        AJAX login handler, used by both login and register to set the\n        user cookie and send back a redirect.\n        \"\"\"\n        c.user = user\n        c.user_is_loggedin = True\n        self.login(user, rem=rem)\n\n        responder._send_data(modhash=generate_modhash())\n        responder._send_data(cookie=user.make_cookie())\n", "description": "historical code from reddit.com", "file_name": "login.py", "id": "99999969b45efe2e48a1f44abcc8131f", "language": "Python", "project_name": "reddit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/reddit-archive-reddit/reddit-archive-reddit-753b174/r2/r2/controllers/apiv1/login.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:55:36Z", "url": "https://github.com/reddit-archive/reddit", "wiki": true}