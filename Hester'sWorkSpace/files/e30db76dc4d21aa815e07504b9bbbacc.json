{"author": "django", "code": "from django.test import TestCase\n\nfrom .models import Person\n\n\nclass ChoicesTests(TestCase):\n    def test_display(self):\n        a = Person.objects.create(name='Adrian', gender='M')\n        s = Person.objects.create(name='Sara', gender='F')\n        self.assertEqual(a.gender, 'M')\n        self.assertEqual(s.gender, 'F')\n\n        self.assertEqual(a.get_gender_display(), 'Male')\n        self.assertEqual(s.get_gender_display(), 'Female')\n\n        \n        \n        a.gender = ''\n        self.assertEqual(a.get_gender_display(), '')\n\n        a.gender = 'U'\n        self.assertEqual(a.get_gender_display(), 'U')\n", "comments": "  if value field correspond valid choice     value provided display value  ", "content": "from django.test import TestCase\n\nfrom .models import Person\n\n\nclass ChoicesTests(TestCase):\n    def test_display(self):\n        a = Person.objects.create(name='Adrian', gender='M')\n        s = Person.objects.create(name='Sara', gender='F')\n        self.assertEqual(a.gender, 'M')\n        self.assertEqual(s.gender, 'F')\n\n        self.assertEqual(a.get_gender_display(), 'Male')\n        self.assertEqual(s.get_gender_display(), 'Female')\n\n        # If the value for the field doesn't correspond to a valid choice,\n        # the value itself is provided as a display value.\n        a.gender = ''\n        self.assertEqual(a.get_gender_display(), '')\n\n        a.gender = 'U'\n        self.assertEqual(a.get_gender_display(), 'U')\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "e30db76dc4d21aa815e07504b9bbbacc", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/choices/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}