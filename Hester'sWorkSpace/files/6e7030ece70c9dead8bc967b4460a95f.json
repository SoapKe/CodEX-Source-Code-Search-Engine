{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    xpath_with_ns,\n    xpath_text,\n    find_xpath_attr,\n)\n\n\nclass XstreamIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://frontend.xstream.dk/btno/feed/video/?platform=web&id=86588',\n        'md5': 'd7d17e3337dc80de6d3a540aefbe441b',\n        'info_dict': {\n            'id': '86588',\n            'ext': 'mov',\n            'title': 'Otto Wollertsen',\n            'description': 'Vestlendingen Otto Fredrik Wollertsen',\n            'timestamp': 1430473209,\n            'upload_date': '20150501',\n        },\n    }, {\n        'url': 'http://frontend.xstream.dk/ap/feed/video/?platform=web&id=21039',\n        'only_matching': True,\n    }]\n\n    def _extract_video_info(self, partner_id, video_id):\n        data = self._download_xml(\n            'http://frontend.xstream.dk/%s/feed/video/?platform=web&id=%s'\n            % (partner_id, video_id),\n            video_id)\n\n        NS_MAP = {\n            'atom': 'http://www.w3.org/2005/Atom',\n            'xt': 'http://xstream.dk/',\n            'media': 'http://search.yahoo.com/mrss/',\n        }\n\n        entry = data.find(xpath_with_ns('./atom:entry', NS_MAP))\n\n        title = xpath_text(\n            entry, xpath_with_ns('./atom:title', NS_MAP), 'title')\n        description = xpath_text(\n            entry, xpath_with_ns('./atom:summary', NS_MAP), 'description')\n        timestamp = parse_iso8601(xpath_text(\n            entry, xpath_with_ns('./atom:published', NS_MAP), 'upload date'))\n\n        formats = []\n        media_group = entry.find(xpath_with_ns('./media:group', NS_MAP))\n        for media_content in media_group.findall(xpath_with_ns('./media:content', NS_MAP)):\n            media_url = media_content.get('url')\n            if not media_url:\n                continue\n            tbr = int_or_none(media_content.get('bitrate'))\n            mobj = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', media_url)\n            if mobj:\n                formats.append({\n                    'url': mobj.group('url'),\n                    'play_path': 'mp4:%s' % mobj.group('playpath'),\n                    'app': mobj.group('app'),\n                    'ext': 'flv',\n                    'tbr': tbr,\n                    'format_id': 'rtmp-%d' % tbr,\n                })\n            else:\n                formats.append({\n                    'url': media_url,\n                    'tbr': tbr,\n                })\n        self._sort_formats(formats)\n\n        link = find_xpath_attr(\n            entry, xpath_with_ns('./atom:link', NS_MAP), 'rel', 'original')\n        if link is not None:\n            formats.append({\n                'url': link.get('href'),\n                'format_id': link.get('rel'),\n                'preference': 1,\n            })\n\n        thumbnails = [{\n            'url': splash.get('url'),\n            'width': int_or_none(splash.get('width')),\n            'height': int_or_none(splash.get('height')),\n        } for splash in media_group.findall(xpath_with_ns('./xt:splash', NS_MAP))]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        partner_id = mobj.group('partner_id')\n        video_id = mobj.group('id')\n\n        return self._extract_video_info(partner_id, video_id)\n", "comments": "(?x)\n                    (?:\n                        xstream:|\n                        https?://frontend\\.xstream\\.(?:dk|net)/\n                    )\n                    (?P<partner_id>[^/]+)\n                    (?:\n                        :|\n                        /feed/video/\\?.*?\\bid=\n                    )\n                    (?P<id>\\d+)\n                    \n \n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    xpath_with_ns,\n    xpath_text,\n    find_xpath_attr,\n)\n\n\nclass XstreamIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    (?:\n                        xstream:|\n                        https?://frontend\\.xstream\\.(?:dk|net)/\n                    )\n                    (?P<partner_id>[^/]+)\n                    (?:\n                        :|\n                        /feed/video/\\?.*?\\bid=\n                    )\n                    (?P<id>\\d+)\n                    '''\n    _TESTS = [{\n        'url': 'http://frontend.xstream.dk/btno/feed/video/?platform=web&id=86588',\n        'md5': 'd7d17e3337dc80de6d3a540aefbe441b',\n        'info_dict': {\n            'id': '86588',\n            'ext': 'mov',\n            'title': 'Otto Wollertsen',\n            'description': 'Vestlendingen Otto Fredrik Wollertsen',\n            'timestamp': 1430473209,\n            'upload_date': '20150501',\n        },\n    }, {\n        'url': 'http://frontend.xstream.dk/ap/feed/video/?platform=web&id=21039',\n        'only_matching': True,\n    }]\n\n    def _extract_video_info(self, partner_id, video_id):\n        data = self._download_xml(\n            'http://frontend.xstream.dk/%s/feed/video/?platform=web&id=%s'\n            % (partner_id, video_id),\n            video_id)\n\n        NS_MAP = {\n            'atom': 'http://www.w3.org/2005/Atom',\n            'xt': 'http://xstream.dk/',\n            'media': 'http://search.yahoo.com/mrss/',\n        }\n\n        entry = data.find(xpath_with_ns('./atom:entry', NS_MAP))\n\n        title = xpath_text(\n            entry, xpath_with_ns('./atom:title', NS_MAP), 'title')\n        description = xpath_text(\n            entry, xpath_with_ns('./atom:summary', NS_MAP), 'description')\n        timestamp = parse_iso8601(xpath_text(\n            entry, xpath_with_ns('./atom:published', NS_MAP), 'upload date'))\n\n        formats = []\n        media_group = entry.find(xpath_with_ns('./media:group', NS_MAP))\n        for media_content in media_group.findall(xpath_with_ns('./media:content', NS_MAP)):\n            media_url = media_content.get('url')\n            if not media_url:\n                continue\n            tbr = int_or_none(media_content.get('bitrate'))\n            mobj = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>[^/]+))/(?P<playpath>.+)$', media_url)\n            if mobj:\n                formats.append({\n                    'url': mobj.group('url'),\n                    'play_path': 'mp4:%s' % mobj.group('playpath'),\n                    'app': mobj.group('app'),\n                    'ext': 'flv',\n                    'tbr': tbr,\n                    'format_id': 'rtmp-%d' % tbr,\n                })\n            else:\n                formats.append({\n                    'url': media_url,\n                    'tbr': tbr,\n                })\n        self._sort_formats(formats)\n\n        link = find_xpath_attr(\n            entry, xpath_with_ns('./atom:link', NS_MAP), 'rel', 'original')\n        if link is not None:\n            formats.append({\n                'url': link.get('href'),\n                'format_id': link.get('rel'),\n                'preference': 1,\n            })\n\n        thumbnails = [{\n            'url': splash.get('url'),\n            'width': int_or_none(splash.get('width')),\n            'height': int_or_none(splash.get('height')),\n        } for splash in media_group.findall(xpath_with_ns('./xt:splash', NS_MAP))]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'formats': formats,\n            'thumbnails': thumbnails,\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        partner_id = mobj.group('partner_id')\n        video_id = mobj.group('id')\n\n        return self._extract_video_info(partner_id, video_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xstream.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xstream.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}