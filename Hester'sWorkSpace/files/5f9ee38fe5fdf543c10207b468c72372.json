{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    qualities,\n    remove_end,\n    try_get,\n    unified_timestamp,\n    url_basename,\n)\n\n\nclass AllocineIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?allocine\\.fr/(?:article|video|film)/(?:fichearticle_gen_carticle=|player_gen_cmedia=|fichefilm_gen_cfilm=|video-)(?P<id>[0-9]+)(?:\\.html)?'\n\n    _TESTS = [{\n        'url': 'http://www.allocine.fr/article/fichearticle_gen_carticle=18635087.html',\n        'md5': '0c9fcf59a841f65635fa300ac43d8269',\n        'info_dict': {\n            'id': '19546517',\n            'display_id': '18635087',\n            'ext': 'mp4',\n            'title': 'Ast\u00e9rix - Le Domaine des Dieux Teaser VF',\n            'description': 'md5:4a754271d9c6f16c72629a8a993ee884',\n            'thumbnail': r're:http://.*\\.jpg',\n            'duration': 39,\n            'timestamp': 1404273600,\n            'upload_date': '20140702',\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://www.allocine.fr/video/player_gen_cmedia=19540403&cfilm=222257.html',\n        'md5': 'd0cdce5d2b9522ce279fdfec07ff16e0',\n        'info_dict': {\n            'id': '19540403',\n            'display_id': '19540403',\n            'ext': 'mp4',\n            'title': 'Planes 2 Bande-annonce VF',\n            'description': 'Regardez la bande annonce du film Planes 2 (Planes 2 Bande-annonce VF). Planes 2, un film de Roberts Gannaway',\n            'thumbnail': r're:http://.*\\.jpg',\n            'duration': 69,\n            'timestamp': 1385659800,\n            'upload_date': '20131128',\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://www.allocine.fr/video/player_gen_cmedia=19544709&cfilm=181290.html',\n        'md5': '101250fb127ef9ca3d73186ff22a47ce',\n        'info_dict': {\n            'id': '19544709',\n            'display_id': '19544709',\n            'ext': 'mp4',\n            'title': 'Dragons 2 - Bande annonce finale VF',\n            'description': 'md5:6cdd2d7c2687d4c6aafe80a35e17267a',\n            'thumbnail': r're:http://.*\\.jpg',\n            'duration': 144,\n            'timestamp': 1397589900,\n            'upload_date': '20140415',\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://www.allocine.fr/video/video-19550147/',\n        'md5': '3566c0668c0235e2d224fd8edb389f67',\n        'info_dict': {\n            'id': '19550147',\n            'ext': 'mp4',\n            'title': 'Faux Raccord N\u00b0123 - Les gaffes de Cliffhanger',\n            'description': 'md5:bc734b83ffa2d8a12188d9eb48bb6354',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        formats = []\n        quality = qualities(['ld', 'md', 'hd'])\n\n        model = self._html_search_regex(\n            r'data-model=\"([^\"]+)\"', webpage, 'data model', default=None)\n        if model:\n            model_data = self._parse_json(model, display_id)\n            video = model_data['videos'][0]\n            title = video['title']\n            for video_url in video['sources'].values():\n                video_id, format_id = url_basename(video_url).split('_')[:2]\n                formats.append({\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'url': video_url,\n                })\n            duration = int_or_none(video.get('duration'))\n            view_count = int_or_none(video.get('view_count'))\n            timestamp = unified_timestamp(try_get(\n                video, lambda x: x['added_at']['date'], compat_str))\n        else:\n            video_id = display_id\n            media_data = self._download_json(\n                'http://www.allocine.fr/ws/AcVisiondataV5.ashx?media=%s' % video_id, display_id)\n            title = remove_end(\n                self._html_search_regex(\n                    r'(?s)<title>(.+?)</title>', webpage, 'title').strip(),\n                ' - AlloCin\u00e9')\n            for key, value in media_data['video'].items():\n                if not key.endswith('Path'):\n                    continue\n                format_id = key[:-len('Path')]\n                formats.append({\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'url': value,\n                })\n            duration, view_count, timestamp = [None] * 3\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    qualities,\n    remove_end,\n    try_get,\n    unified_timestamp,\n    url_basename,\n)\n\n\nclass AllocineIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?allocine\\.fr/(?:article|video|film)/(?:fichearticle_gen_carticle=|player_gen_cmedia=|fichefilm_gen_cfilm=|video-)(?P<id>[0-9]+)(?:\\.html)?'\n\n    _TESTS = [{\n        'url': 'http://www.allocine.fr/article/fichearticle_gen_carticle=18635087.html',\n        'md5': '0c9fcf59a841f65635fa300ac43d8269',\n        'info_dict': {\n            'id': '19546517',\n            'display_id': '18635087',\n            'ext': 'mp4',\n            'title': 'Ast\u00e9rix - Le Domaine des Dieux Teaser VF',\n            'description': 'md5:4a754271d9c6f16c72629a8a993ee884',\n            'thumbnail': r're:http://.*\\.jpg',\n            'duration': 39,\n            'timestamp': 1404273600,\n            'upload_date': '20140702',\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://www.allocine.fr/video/player_gen_cmedia=19540403&cfilm=222257.html',\n        'md5': 'd0cdce5d2b9522ce279fdfec07ff16e0',\n        'info_dict': {\n            'id': '19540403',\n            'display_id': '19540403',\n            'ext': 'mp4',\n            'title': 'Planes 2 Bande-annonce VF',\n            'description': 'Regardez la bande annonce du film Planes 2 (Planes 2 Bande-annonce VF). Planes 2, un film de Roberts Gannaway',\n            'thumbnail': r're:http://.*\\.jpg',\n            'duration': 69,\n            'timestamp': 1385659800,\n            'upload_date': '20131128',\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://www.allocine.fr/video/player_gen_cmedia=19544709&cfilm=181290.html',\n        'md5': '101250fb127ef9ca3d73186ff22a47ce',\n        'info_dict': {\n            'id': '19544709',\n            'display_id': '19544709',\n            'ext': 'mp4',\n            'title': 'Dragons 2 - Bande annonce finale VF',\n            'description': 'md5:6cdd2d7c2687d4c6aafe80a35e17267a',\n            'thumbnail': r're:http://.*\\.jpg',\n            'duration': 144,\n            'timestamp': 1397589900,\n            'upload_date': '20140415',\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://www.allocine.fr/video/video-19550147/',\n        'md5': '3566c0668c0235e2d224fd8edb389f67',\n        'info_dict': {\n            'id': '19550147',\n            'ext': 'mp4',\n            'title': 'Faux Raccord N\u00b0123 - Les gaffes de Cliffhanger',\n            'description': 'md5:bc734b83ffa2d8a12188d9eb48bb6354',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        formats = []\n        quality = qualities(['ld', 'md', 'hd'])\n\n        model = self._html_search_regex(\n            r'data-model=\"([^\"]+)\"', webpage, 'data model', default=None)\n        if model:\n            model_data = self._parse_json(model, display_id)\n            video = model_data['videos'][0]\n            title = video['title']\n            for video_url in video['sources'].values():\n                video_id, format_id = url_basename(video_url).split('_')[:2]\n                formats.append({\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'url': video_url,\n                })\n            duration = int_or_none(video.get('duration'))\n            view_count = int_or_none(video.get('view_count'))\n            timestamp = unified_timestamp(try_get(\n                video, lambda x: x['added_at']['date'], compat_str))\n        else:\n            video_id = display_id\n            media_data = self._download_json(\n                'http://www.allocine.fr/ws/AcVisiondataV5.ashx?media=%s' % video_id, display_id)\n            title = remove_end(\n                self._html_search_regex(\n                    r'(?s)<title>(.+?)</title>', webpage, 'title').strip(),\n                ' - AlloCin\u00e9')\n            for key, value in media_data['video'].items():\n                if not key.endswith('Path'):\n                    continue\n                format_id = key[:-len('Path')]\n                formats.append({\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                    'url': value,\n                })\n            duration, view_count, timestamp = [None] * 3\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "allocine.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/allocine.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}