{"author": "getredash", "code": "from __future__ import with_statement\nfrom alembic import context\nfrom sqlalchemy import engine_from_config, pool\nfrom logging.config import fileConfig\nimport logging\n\n\n\nconfig = context.config\n\n\n\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n\n\n\n\n\nfrom flask import current_app\nconfig.set_main_option('sqlalchemy.url',\n                       current_app.config.get('SQLALCHEMY_DATABASE_URI'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata\n\n\n\n# my_important_option = config.get_main_option(\"my_important_option\")\n\n\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(url=url)\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n\n    \n    \n    \n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):\n            script = directives[0]\n            if script.upgrade_ops.is_empty():\n                directives[:] = []\n                logger.info('No changes in schema detected.')\n\n    engine = engine_from_config(config.get_section(config.config_ini_section),\n                                prefix='sqlalchemy.',\n                                poolclass=pool.NullPool)\n\n    connection = engine.connect()\n    context.configure(connection=connection,\n                      target_metadata=target_metadata,\n                      process_revision_directives=process_revision_directives,\n                      **current_app.extensions['migrate'].configure_args)\n\n    try:\n        with context.begin_transaction():\n            context.run_migrations()\n    finally:\n        connection.close()\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n", "comments": "   run migrations  offline  mode       this configures context url     engine  though engine acceptable     well   by skipping engine creation     even need dbapi available       calls context execute() emit given string     script output               url   config get main option( sqlalchemy url )     context configure(url url)      context begin transaction()          context run migrations()   def run migrations online()         run migrations  online  mode       in scenario need create engine     associate connection context              alembic config object  provides    access values within  ini file use     interpret config file python logging     this line sets loggers basically     add model metadata object     autogenerate  support    myapp import mymodel    target metadata   mymodel base metadata    values config  defined needs env py     acquired     important option   config get main option( important option )        etc     callback used prevent auto migration generated    changes schema    reference  http   alembic readthedocs org en latest cookbook html ", "content": "from __future__ import with_statement\nfrom alembic import context\nfrom sqlalchemy import engine_from_config, pool\nfrom logging.config import fileConfig\nimport logging\n\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\n\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\nfrom flask import current_app\nconfig.set_main_option('sqlalchemy.url',\n                       current_app.config.get('SQLALCHEMY_DATABASE_URI'))\ntarget_metadata = current_app.extensions['migrate'].db.metadata\n\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\n\n\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n\n    Calls to context.execute() here emit the given string to the\n    script output.\n\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")\n    context.configure(url=url)\n\n    with context.begin_transaction():\n        context.run_migrations()\n\n\ndef run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n\n    \"\"\"\n\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.readthedocs.org/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):\n            script = directives[0]\n            if script.upgrade_ops.is_empty():\n                directives[:] = []\n                logger.info('No changes in schema detected.')\n\n    engine = engine_from_config(config.get_section(config.config_ini_section),\n                                prefix='sqlalchemy.',\n                                poolclass=pool.NullPool)\n\n    connection = engine.connect()\n    context.configure(connection=connection,\n                      target_metadata=target_metadata,\n                      process_revision_directives=process_revision_directives,\n                      **current_app.extensions['migrate'].configure_args)\n\n    try:\n        with context.begin_transaction():\n            context.run_migrations()\n    finally:\n        connection.close()\n\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "env.py", "id": "76299e368c994ec83c6944ad24b1c835", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/migrations/env.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}