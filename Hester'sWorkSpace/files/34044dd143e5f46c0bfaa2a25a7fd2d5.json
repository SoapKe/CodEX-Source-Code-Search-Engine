{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    determine_ext,\n    find_xpath_attr,\n    fix_xml_ampersands,\n    GeoRestrictedError,\n    int_or_none,\n    parse_duration,\n    strip_or_none,\n    try_get,\n    unescapeHTML,\n    unified_strdate,\n    unified_timestamp,\n    update_url_query,\n    urljoin,\n    xpath_text,\n)\n\n\nclass RaiBaseIE(InfoExtractor):\n    _UUID_RE = r'[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}'\n    _GEO_COUNTRIES = ['IT']\n    _GEO_BYPASS = False\n\n    def _extract_relinker_info(self, relinker_url, video_id):\n        formats = []\n        geoprotection = None\n        is_live = None\n        duration = None\n\n        for platform in ('mon', 'flash', 'native'):\n            relinker = self._download_xml(\n                relinker_url, video_id,\n                note='Downloading XML metadata for platform %s' % platform,\n                transform_source=fix_xml_ampersands,\n                query={'output': 45, 'pl': platform},\n                headers=self.geo_verification_headers())\n\n            if not geoprotection:\n                geoprotection = xpath_text(\n                    relinker, './geoprotection', default=None) == 'Y'\n\n            if not is_live:\n                is_live = xpath_text(\n                    relinker, './is_live', default=None) == 'Y'\n            if not duration:\n                duration = parse_duration(xpath_text(\n                    relinker, './duration', default=None))\n\n            url_elem = find_xpath_attr(relinker, './url', 'type', 'content')\n            if url_elem is None:\n                continue\n\n            media_url = url_elem.text\n\n            \n            \n            if media_url == 'http://download.rai.it/video_no_available.mp4':\n                continue\n\n            ext = determine_ext(media_url)\n            if (ext == 'm3u8' and platform != 'mon') or (ext == 'f4m' and platform != 'flash'):\n                continue\n\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    media_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif ext == 'f4m':\n                manifest_url = update_url_query(\n                    media_url.replace('manifest\n                    {'hdcore': '3.7.0', 'plugin': 'aasp-3.7.0.39.44'})\n                formats.extend(self._extract_f4m_formats(\n                    manifest_url, video_id, f4m_id='hds', fatal=False))\n            else:\n                bitrate = int_or_none(xpath_text(relinker, 'bitrate'))\n                formats.append({\n                    'url': media_url,\n                    'tbr': bitrate if bitrate > 0 else None,\n                    'format_id': 'http-%d' % bitrate if bitrate > 0 else 'http',\n                })\n\n        if not formats and geoprotection is True:\n            self.raise_geo_restricted(countries=self._GEO_COUNTRIES)\n\n        return dict((k, v) for k, v in {\n            'is_live': is_live,\n            'duration': duration,\n            'formats': formats,\n        }.items() if v is not None)\n\n    @staticmethod\n    def _extract_subtitles(url, subtitle_url):\n        subtitles = {}\n        if subtitle_url and isinstance(subtitle_url, compat_str):\n            subtitle_url = urljoin(url, subtitle_url)\n            STL_EXT = '.stl'\n            SRT_EXT = '.srt'\n            subtitles['it'] = [{\n                'ext': 'stl',\n                'url': subtitle_url,\n            }]\n            if subtitle_url.endswith(STL_EXT):\n                srt_url = subtitle_url[:-len(STL_EXT)] + SRT_EXT\n                subtitles['it'].append({\n                    'ext': 'srt',\n                    'url': srt_url,\n                })\n        return subtitles\n\n\nclass RaiPlayIE(RaiBaseIE):\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?raiplay\\.it/.+?-(?P<id>%s)\\.html)' % RaiBaseIE._UUID_RE\n    _TESTS = [{\n        'url': 'http://www.raiplay.it/video/2016/10/La-Casa-Bianca-e06118bb-59a9-4636-b914-498e4cfd2c66.html?source=twitter',\n        'md5': '340aa3b7afb54bfd14a8c11786450d76',\n        'info_dict': {\n            'id': 'e06118bb-59a9-4636-b914-498e4cfd2c66',\n            'ext': 'mp4',\n            'title': 'La Casa Bianca',\n            'alt_title': 'S2016 - Puntata del 23/10/2016',\n            'description': 'md5:a09d45890850458077d1f68bb036e0a5',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Rai 3',\n            'creator': 'Rai 3',\n            'duration': 3278,\n            'timestamp': 1477764300,\n            'upload_date': '20161029',\n            'series': 'La Casa Bianca',\n            'season': '2016',\n        },\n    }, {\n        'url': 'http://www.raiplay.it/video/2014/04/Report-del-07042014-cb27157f-9dd0-4aee-b788-b1f67643a391.html',\n        'md5': '8970abf8caf8aef4696e7b1f2adfc696',\n        'info_dict': {\n            'id': 'cb27157f-9dd0-4aee-b788-b1f67643a391',\n            'ext': 'mp4',\n            'title': 'Report del 07/04/2014',\n            'alt_title': 'S2013/14 - Puntata del 07/04/2014',\n            'description': 'md5:f27c544694cacb46a078db84ec35d2d9',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Rai 5',\n            'creator': 'Rai 5',\n            'duration': 6160,\n            'series': 'Report',\n            'season_number': 5,\n            'season': '2013/14',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.raiplay.it/video/2016/11/gazebotraindesi-efebe701-969c-4593-92f3-285f0d1ce750.html?',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        url, video_id = mobj.group('url', 'id')\n\n        media = self._download_json(\n            '%s?json' % url, video_id, 'Downloading video JSON')\n\n        title = media['name']\n\n        video = media['video']\n\n        relinker_info = self._extract_relinker_info(video['contentUrl'], video_id)\n        self._sort_formats(relinker_info['formats'])\n\n        thumbnails = []\n        if 'images' in media:\n            for _, value in media.get('images').items():\n                if value:\n                    thumbnails.append({\n                        'url': value.replace('[RESOLUTION]', '600x400')\n                    })\n\n        timestamp = unified_timestamp(try_get(\n            media, lambda x: x['availabilities'][0]['start'], compat_str))\n\n        subtitles = self._extract_subtitles(url, video.get('subtitles'))\n\n        info = {\n            'id': video_id,\n            'title': self._live_title(title) if relinker_info.get(\n                'is_live') else title,\n            'alt_title': media.get('subtitle'),\n            'description': media.get('description'),\n            'uploader': strip_or_none(media.get('channel')),\n            'creator': strip_or_none(media.get('editor')),\n            'duration': parse_duration(video.get('duration')),\n            'timestamp': timestamp,\n            'thumbnails': thumbnails,\n            'series': try_get(\n                media, lambda x: x['isPartOf']['name'], compat_str),\n            'season_number': int_or_none(try_get(\n                media, lambda x: x['isPartOf']['numeroStagioni'])),\n            'season': media.get('stagione') or None,\n            'subtitles': subtitles,\n        }\n\n        info.update(relinker_info)\n        return info\n\n\nclass RaiPlayLiveIE(RaiBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?raiplay\\.it/dirette/(?P<id>[^/?\n    _TEST = {\n        'url': 'http://www.raiplay.it/dirette/rainews24',\n        'info_dict': {\n            'id': 'd784ad40-e0ae-4a69-aa76-37519d238a9c',\n            'display_id': 'rainews24',\n            'ext': 'mp4',\n            'title': 're:^Diretta di Rai News 24 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'description': 'md5:6eca31500550f9376819f174e5644754',\n            'uploader': 'Rai News 24',\n            'creator': 'Rai News 24',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_id = self._search_regex(\n            r'data-uniquename=[\"\\']ContentItem-(%s)' % RaiBaseIE._UUID_RE,\n            webpage, 'content id')\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': RaiPlayIE.ie_key(),\n            'url': 'http://www.raiplay.it/dirette/ContentItem-%s.html' % video_id,\n            'id': video_id,\n            'display_id': display_id,\n        }\n\n\nclass RaiPlayPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?raiplay\\.it/programmi/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.raiplay.it/programmi/nondirloalmiocapo/',\n        'info_dict': {\n            'id': 'nondirloalmiocapo',\n            'title': 'Non dirlo al mio capo',\n            'description': 'md5:9f3d603b2947c1c7abb098f3b14fac86',\n        },\n        'playlist_mincount': 12,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        title = self._html_search_meta(\n            ('programma', 'nomeProgramma'), webpage, 'title')\n        description = unescapeHTML(self._html_search_meta(\n            ('description', 'og:description'), webpage, 'description'))\n        print(description)\n\n        entries = []\n        for mobj in re.finditer(\n                r'<a\\b[^>]+\\bhref=([\"\\'])(?P<path>/raiplay/video/.+?)\\1',\n                webpage):\n            video_url = urljoin(url, mobj.group('path'))\n            entries.append(self.url_result(\n                video_url, ie=RaiPlayIE.ie_key(),\n                video_id=RaiPlayIE._match_id(video_url)))\n\n        return self.playlist_result(entries, playlist_id, title, description)\n\n\nclass RaiIE(RaiBaseIE):\n    _VALID_URL = r'https?://[^/]+\\.(?:rai\\.(?:it|tv)|rainews\\.it)/dl/.+?-(?P<id>%s)(?:-.+?)?\\.html' % RaiBaseIE._UUID_RE\n    _TESTS = [{\n        \n        \n        'url': 'http://www.raisport.rai.it/dl/raiSport/media/rassegna-stampa-04a9f4bd-b563-40cf-82a6-aad3529cb4a9.html',\n        'info_dict': {\n            'id': '04a9f4bd-b563-40cf-82a6-aad3529cb4a9',\n            'ext': 'mp4',\n            'title': 'TG PRIMO TEMPO',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1758,\n            'upload_date': '20140612',\n        }\n    }, {\n        \n        'url': 'http://www.rainews.it/dl/rainews/media/Weekend-al-cinema-da-Hollywood-arriva-il-thriller-di-Tate-Taylor-La-ragazza-del-treno-1632c009-c843-4836-bb65-80c33084a64b.html',\n        'info_dict': {\n            'id': '1632c009-c843-4836-bb65-80c33084a64b',\n            'ext': 'mp4',\n            'title': 'Weekend al cinema, da Hollywood arriva il thriller di Tate Taylor \"La ragazza del treno\"',\n            'description': 'I film in uscita questa settimana.',\n            'thumbnail': r're:^https?://.*\\.png$',\n            'duration': 833,\n            'upload_date': '20161103',\n        }\n    }, {\n        \n        'url': 'http://www.rai.it/dl/RaiTV/programmi/media/ContentItem-efb17665-691c-45d5-a60c-5301333cbb0c.html',\n        'md5': '11959b4e44fa74de47011b5799490adf',\n        'info_dict': {\n            'id': 'efb17665-691c-45d5-a60c-5301333cbb0c',\n            'ext': 'mp4',\n            'title': 'TG1 ore 20:00 del 03/11/2016',\n            'description': 'TG1 edizione integrale ore 20:00 del giorno 03/11/2016',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 2214,\n            'upload_date': '20161103',\n        }\n    }, {\n        \n        'url': 'http://www.report.rai.it/dl/Report/puntata/ContentItem-0c7a664b-d0f4-4b2c-8835-3f82e46f433e.html',\n        'md5': '2dd727e61114e1ee9c47f0da6914e178',\n        'info_dict': {\n            'id': '59d69d28-6bb6-409d-a4b5-ed44096560af',\n            'ext': 'mp4',\n            'title': 'Il pacco',\n            'description': 'md5:4b1afae1364115ce5d78ed83cd2e5b3a',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20141221',\n        },\n    }, {\n        \n        'url': 'http://www.tg1.rai.it/dl/tg1/2010/edizioni/ContentSet-9b6e0cba-4bef-4aef-8cf0-9f7f665b7dfb-tg1.html?item=undefined',\n        'info_dict': {\n            'id': 'c2187016-8484-4e3a-8ac8-35e475b07303',\n            'ext': 'mp4',\n            'title': r're:TG1 ore \\d{2}:\\d{2} del \\d{2}/\\d{2}/\\d{4}',\n            'duration': 2274,\n            'upload_date': '20170401',\n        },\n        'skip': 'Changes daily',\n    }, {\n        \n        'url': 'http://www.rai.tv/dl/RaiTV/dirette/PublishingBlock-1912dbbf-3f96-44c3-b4cf-523681fbacbc.html?channel=EuroNews',\n        'info_dict': {\n            'id': '1912dbbf-3f96-44c3-b4cf-523681fbacbc',\n            'ext': 'flv',\n            'title': 'EuroNews',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'http://www.rainews.it/dl/rainews/live/ContentItem-3156f2f2-dc70-4953-8e2f-70d7489d4ce9.html',\n        'info_dict': {\n            'id': '3156f2f2-dc70-4953-8e2f-70d7489d4ce9',\n            'ext': 'mp4',\n            'title': 'La diretta di Rainews24',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _extract_from_content_id(self, content_id, url):\n        media = self._download_json(\n            'http://www.rai.tv/dl/RaiTV/programmi/media/ContentItem-%s.html?json' % content_id,\n            content_id, 'Downloading video JSON')\n\n        title = media['name'].strip()\n\n        media_type = media['type']\n        if 'Audio' in media_type:\n            relinker_info = {\n                'formats': [{\n                    'format_id': media.get('formatoAudio'),\n                    'url': media['audioUrl'],\n                    'ext': media.get('formatoAudio'),\n                }]\n            }\n        elif 'Video' in media_type:\n            relinker_info = self._extract_relinker_info(media['mediaUri'], content_id)\n        else:\n            raise ExtractorError('not a media file')\n\n        self._sort_formats(relinker_info['formats'])\n\n        thumbnails = []\n        for image_type in ('image', 'image_medium', 'image_300'):\n            thumbnail_url = media.get(image_type)\n            if thumbnail_url:\n                thumbnails.append({\n                    'url': compat_urlparse.urljoin(url, thumbnail_url),\n                })\n\n        subtitles = self._extract_subtitles(url, media.get('subtitlesUrl'))\n\n        info = {\n            'id': content_id,\n            'title': title,\n            'description': strip_or_none(media.get('desc')),\n            'thumbnails': thumbnails,\n            'uploader': media.get('author'),\n            'upload_date': unified_strdate(media.get('date')),\n            'duration': parse_duration(media.get('length')),\n            'subtitles': subtitles,\n        }\n\n        info.update(relinker_info)\n\n        return info\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        content_item_id = None\n\n        content_item_url = self._html_search_meta(\n            ('og:url', 'og:video', 'og:video:secure_url', 'twitter:url',\n             'twitter:player', 'jsonlink'), webpage, default=None)\n        if content_item_url:\n            content_item_id = self._search_regex(\n                r'ContentItem-(%s)' % self._UUID_RE, content_item_url,\n                'content item id', default=None)\n\n        if not content_item_id:\n            content_item_id = self._search_regex(\n                r,\n            webpage, 'relinker URL', group='url')\n\n        relinker_info = self._extract_relinker_info(\n            urljoin(url, relinker_url), video_id)\n        self._sort_formats(relinker_info['formats'])\n\n        title = self._search_regex(\n            r'var\\s+videoTitolo\\s*=\\s*([\\'\"])(?P<title>[^\\'\"]+)\\1',\n            webpage, 'title', group='title',\n            default=None) or self._og_search_title(webpage)\n\n        info = {\n            'id': video_id,\n            'title': title,\n        }\n\n        info.update(relinker_info)\n\n        return info\n", "comments": "(?x)\n                    (?:\n                        (?:initEdizione|drawMediaRaiTV)\\(|\n                        <(?:[^>]+\\bdata-id|var\\s+uniquename)=\n                    )\n                    ([\"\\'])\n                    (?:(?!\\1).)*\\bContentItem-(?P<id>%s)\n                ''' % self._UUID_RE,\n                webpage, 'content item id', default=None, group='id')\n\n        content_item_ids = set()\n        if content_item_id:\n            content_item_ids.add(content_item_id)\n        if video_id not in content_item_ids:\n            content_item_ids.add(video_id)\n\n        for content_item_id in content_item_ids:\n            try:\n                return self._extract_from_content_id(content_item_id, url)\n            except GeoRestrictedError:\n                raise\n            except ExtractorError:\n                pass\n\n        relinker_url = self._search_regex(\n            r'''(?x)\n                (?:\n                    var\\s+videoURL|\n                    mediaInfo\\.mediaUri\n                )\\s*=\\s*\n                ([\\'\"])\n                (?P<url>\n                    (?:https?:)?\n                    //mediapolis(?:vod)?\\.rai\\.it/relinker/relinkerServlet\\.htm\\?\n                    (?:(?!\\1).)*\\bcont=(?:(?!\\1).)+)\\1\n            \n \n# This does not imply geo restriction (e.g.\n# http://www.raisport.rai.it/dl/raiSport/media/rassegna-stampa-04a9f4bd-b563-40cf-82a6-aad3529cb4a9.html)\n#live_hds.f4m', 'manifest.f4m'),\n#&]+)'\n#&]+)'\n# var uniquename = \"ContentItem-...\"\n# data-id=\"ContentItem-...\"\n# with ContentItem in many metas\n# with ContentItem in og:url\n# drawMediaRaiTV(...)\n# initEdizione('ContentItem-...'\n# HDS live stream with only relinker URL\n# HLS live stream with ContentItem in og:url\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    determine_ext,\n    find_xpath_attr,\n    fix_xml_ampersands,\n    GeoRestrictedError,\n    int_or_none,\n    parse_duration,\n    strip_or_none,\n    try_get,\n    unescapeHTML,\n    unified_strdate,\n    unified_timestamp,\n    update_url_query,\n    urljoin,\n    xpath_text,\n)\n\n\nclass RaiBaseIE(InfoExtractor):\n    _UUID_RE = r'[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12}'\n    _GEO_COUNTRIES = ['IT']\n    _GEO_BYPASS = False\n\n    def _extract_relinker_info(self, relinker_url, video_id):\n        formats = []\n        geoprotection = None\n        is_live = None\n        duration = None\n\n        for platform in ('mon', 'flash', 'native'):\n            relinker = self._download_xml(\n                relinker_url, video_id,\n                note='Downloading XML metadata for platform %s' % platform,\n                transform_source=fix_xml_ampersands,\n                query={'output': 45, 'pl': platform},\n                headers=self.geo_verification_headers())\n\n            if not geoprotection:\n                geoprotection = xpath_text(\n                    relinker, './geoprotection', default=None) == 'Y'\n\n            if not is_live:\n                is_live = xpath_text(\n                    relinker, './is_live', default=None) == 'Y'\n            if not duration:\n                duration = parse_duration(xpath_text(\n                    relinker, './duration', default=None))\n\n            url_elem = find_xpath_attr(relinker, './url', 'type', 'content')\n            if url_elem is None:\n                continue\n\n            media_url = url_elem.text\n\n            # This does not imply geo restriction (e.g.\n            # http://www.raisport.rai.it/dl/raiSport/media/rassegna-stampa-04a9f4bd-b563-40cf-82a6-aad3529cb4a9.html)\n            if media_url == 'http://download.rai.it/video_no_available.mp4':\n                continue\n\n            ext = determine_ext(media_url)\n            if (ext == 'm3u8' and platform != 'mon') or (ext == 'f4m' and platform != 'flash'):\n                continue\n\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    media_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif ext == 'f4m':\n                manifest_url = update_url_query(\n                    media_url.replace('manifest#live_hds.f4m', 'manifest.f4m'),\n                    {'hdcore': '3.7.0', 'plugin': 'aasp-3.7.0.39.44'})\n                formats.extend(self._extract_f4m_formats(\n                    manifest_url, video_id, f4m_id='hds', fatal=False))\n            else:\n                bitrate = int_or_none(xpath_text(relinker, 'bitrate'))\n                formats.append({\n                    'url': media_url,\n                    'tbr': bitrate if bitrate > 0 else None,\n                    'format_id': 'http-%d' % bitrate if bitrate > 0 else 'http',\n                })\n\n        if not formats and geoprotection is True:\n            self.raise_geo_restricted(countries=self._GEO_COUNTRIES)\n\n        return dict((k, v) for k, v in {\n            'is_live': is_live,\n            'duration': duration,\n            'formats': formats,\n        }.items() if v is not None)\n\n    @staticmethod\n    def _extract_subtitles(url, subtitle_url):\n        subtitles = {}\n        if subtitle_url and isinstance(subtitle_url, compat_str):\n            subtitle_url = urljoin(url, subtitle_url)\n            STL_EXT = '.stl'\n            SRT_EXT = '.srt'\n            subtitles['it'] = [{\n                'ext': 'stl',\n                'url': subtitle_url,\n            }]\n            if subtitle_url.endswith(STL_EXT):\n                srt_url = subtitle_url[:-len(STL_EXT)] + SRT_EXT\n                subtitles['it'].append({\n                    'ext': 'srt',\n                    'url': srt_url,\n                })\n        return subtitles\n\n\nclass RaiPlayIE(RaiBaseIE):\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?raiplay\\.it/.+?-(?P<id>%s)\\.html)' % RaiBaseIE._UUID_RE\n    _TESTS = [{\n        'url': 'http://www.raiplay.it/video/2016/10/La-Casa-Bianca-e06118bb-59a9-4636-b914-498e4cfd2c66.html?source=twitter',\n        'md5': '340aa3b7afb54bfd14a8c11786450d76',\n        'info_dict': {\n            'id': 'e06118bb-59a9-4636-b914-498e4cfd2c66',\n            'ext': 'mp4',\n            'title': 'La Casa Bianca',\n            'alt_title': 'S2016 - Puntata del 23/10/2016',\n            'description': 'md5:a09d45890850458077d1f68bb036e0a5',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Rai 3',\n            'creator': 'Rai 3',\n            'duration': 3278,\n            'timestamp': 1477764300,\n            'upload_date': '20161029',\n            'series': 'La Casa Bianca',\n            'season': '2016',\n        },\n    }, {\n        'url': 'http://www.raiplay.it/video/2014/04/Report-del-07042014-cb27157f-9dd0-4aee-b788-b1f67643a391.html',\n        'md5': '8970abf8caf8aef4696e7b1f2adfc696',\n        'info_dict': {\n            'id': 'cb27157f-9dd0-4aee-b788-b1f67643a391',\n            'ext': 'mp4',\n            'title': 'Report del 07/04/2014',\n            'alt_title': 'S2013/14 - Puntata del 07/04/2014',\n            'description': 'md5:f27c544694cacb46a078db84ec35d2d9',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Rai 5',\n            'creator': 'Rai 5',\n            'duration': 6160,\n            'series': 'Report',\n            'season_number': 5,\n            'season': '2013/14',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.raiplay.it/video/2016/11/gazebotraindesi-efebe701-969c-4593-92f3-285f0d1ce750.html?',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        url, video_id = mobj.group('url', 'id')\n\n        media = self._download_json(\n            '%s?json' % url, video_id, 'Downloading video JSON')\n\n        title = media['name']\n\n        video = media['video']\n\n        relinker_info = self._extract_relinker_info(video['contentUrl'], video_id)\n        self._sort_formats(relinker_info['formats'])\n\n        thumbnails = []\n        if 'images' in media:\n            for _, value in media.get('images').items():\n                if value:\n                    thumbnails.append({\n                        'url': value.replace('[RESOLUTION]', '600x400')\n                    })\n\n        timestamp = unified_timestamp(try_get(\n            media, lambda x: x['availabilities'][0]['start'], compat_str))\n\n        subtitles = self._extract_subtitles(url, video.get('subtitles'))\n\n        info = {\n            'id': video_id,\n            'title': self._live_title(title) if relinker_info.get(\n                'is_live') else title,\n            'alt_title': media.get('subtitle'),\n            'description': media.get('description'),\n            'uploader': strip_or_none(media.get('channel')),\n            'creator': strip_or_none(media.get('editor')),\n            'duration': parse_duration(video.get('duration')),\n            'timestamp': timestamp,\n            'thumbnails': thumbnails,\n            'series': try_get(\n                media, lambda x: x['isPartOf']['name'], compat_str),\n            'season_number': int_or_none(try_get(\n                media, lambda x: x['isPartOf']['numeroStagioni'])),\n            'season': media.get('stagione') or None,\n            'subtitles': subtitles,\n        }\n\n        info.update(relinker_info)\n        return info\n\n\nclass RaiPlayLiveIE(RaiBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?raiplay\\.it/dirette/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'http://www.raiplay.it/dirette/rainews24',\n        'info_dict': {\n            'id': 'd784ad40-e0ae-4a69-aa76-37519d238a9c',\n            'display_id': 'rainews24',\n            'ext': 'mp4',\n            'title': 're:^Diretta di Rai News 24 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'description': 'md5:6eca31500550f9376819f174e5644754',\n            'uploader': 'Rai News 24',\n            'creator': 'Rai News 24',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_id = self._search_regex(\n            r'data-uniquename=[\"\\']ContentItem-(%s)' % RaiBaseIE._UUID_RE,\n            webpage, 'content id')\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': RaiPlayIE.ie_key(),\n            'url': 'http://www.raiplay.it/dirette/ContentItem-%s.html' % video_id,\n            'id': video_id,\n            'display_id': display_id,\n        }\n\n\nclass RaiPlayPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?raiplay\\.it/programmi/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.raiplay.it/programmi/nondirloalmiocapo/',\n        'info_dict': {\n            'id': 'nondirloalmiocapo',\n            'title': 'Non dirlo al mio capo',\n            'description': 'md5:9f3d603b2947c1c7abb098f3b14fac86',\n        },\n        'playlist_mincount': 12,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        title = self._html_search_meta(\n            ('programma', 'nomeProgramma'), webpage, 'title')\n        description = unescapeHTML(self._html_search_meta(\n            ('description', 'og:description'), webpage, 'description'))\n        print(description)\n\n        entries = []\n        for mobj in re.finditer(\n                r'<a\\b[^>]+\\bhref=([\"\\'])(?P<path>/raiplay/video/.+?)\\1',\n                webpage):\n            video_url = urljoin(url, mobj.group('path'))\n            entries.append(self.url_result(\n                video_url, ie=RaiPlayIE.ie_key(),\n                video_id=RaiPlayIE._match_id(video_url)))\n\n        return self.playlist_result(entries, playlist_id, title, description)\n\n\nclass RaiIE(RaiBaseIE):\n    _VALID_URL = r'https?://[^/]+\\.(?:rai\\.(?:it|tv)|rainews\\.it)/dl/.+?-(?P<id>%s)(?:-.+?)?\\.html' % RaiBaseIE._UUID_RE\n    _TESTS = [{\n        # var uniquename = \"ContentItem-...\"\n        # data-id=\"ContentItem-...\"\n        'url': 'http://www.raisport.rai.it/dl/raiSport/media/rassegna-stampa-04a9f4bd-b563-40cf-82a6-aad3529cb4a9.html',\n        'info_dict': {\n            'id': '04a9f4bd-b563-40cf-82a6-aad3529cb4a9',\n            'ext': 'mp4',\n            'title': 'TG PRIMO TEMPO',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1758,\n            'upload_date': '20140612',\n        }\n    }, {\n        # with ContentItem in many metas\n        'url': 'http://www.rainews.it/dl/rainews/media/Weekend-al-cinema-da-Hollywood-arriva-il-thriller-di-Tate-Taylor-La-ragazza-del-treno-1632c009-c843-4836-bb65-80c33084a64b.html',\n        'info_dict': {\n            'id': '1632c009-c843-4836-bb65-80c33084a64b',\n            'ext': 'mp4',\n            'title': 'Weekend al cinema, da Hollywood arriva il thriller di Tate Taylor \"La ragazza del treno\"',\n            'description': 'I film in uscita questa settimana.',\n            'thumbnail': r're:^https?://.*\\.png$',\n            'duration': 833,\n            'upload_date': '20161103',\n        }\n    }, {\n        # with ContentItem in og:url\n        'url': 'http://www.rai.it/dl/RaiTV/programmi/media/ContentItem-efb17665-691c-45d5-a60c-5301333cbb0c.html',\n        'md5': '11959b4e44fa74de47011b5799490adf',\n        'info_dict': {\n            'id': 'efb17665-691c-45d5-a60c-5301333cbb0c',\n            'ext': 'mp4',\n            'title': 'TG1 ore 20:00 del 03/11/2016',\n            'description': 'TG1 edizione integrale ore 20:00 del giorno 03/11/2016',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 2214,\n            'upload_date': '20161103',\n        }\n    }, {\n        # drawMediaRaiTV(...)\n        'url': 'http://www.report.rai.it/dl/Report/puntata/ContentItem-0c7a664b-d0f4-4b2c-8835-3f82e46f433e.html',\n        'md5': '2dd727e61114e1ee9c47f0da6914e178',\n        'info_dict': {\n            'id': '59d69d28-6bb6-409d-a4b5-ed44096560af',\n            'ext': 'mp4',\n            'title': 'Il pacco',\n            'description': 'md5:4b1afae1364115ce5d78ed83cd2e5b3a',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20141221',\n        },\n    }, {\n        # initEdizione('ContentItem-...'\n        'url': 'http://www.tg1.rai.it/dl/tg1/2010/edizioni/ContentSet-9b6e0cba-4bef-4aef-8cf0-9f7f665b7dfb-tg1.html?item=undefined',\n        'info_dict': {\n            'id': 'c2187016-8484-4e3a-8ac8-35e475b07303',\n            'ext': 'mp4',\n            'title': r're:TG1 ore \\d{2}:\\d{2} del \\d{2}/\\d{2}/\\d{4}',\n            'duration': 2274,\n            'upload_date': '20170401',\n        },\n        'skip': 'Changes daily',\n    }, {\n        # HDS live stream with only relinker URL\n        'url': 'http://www.rai.tv/dl/RaiTV/dirette/PublishingBlock-1912dbbf-3f96-44c3-b4cf-523681fbacbc.html?channel=EuroNews',\n        'info_dict': {\n            'id': '1912dbbf-3f96-44c3-b4cf-523681fbacbc',\n            'ext': 'flv',\n            'title': 'EuroNews',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # HLS live stream with ContentItem in og:url\n        'url': 'http://www.rainews.it/dl/rainews/live/ContentItem-3156f2f2-dc70-4953-8e2f-70d7489d4ce9.html',\n        'info_dict': {\n            'id': '3156f2f2-dc70-4953-8e2f-70d7489d4ce9',\n            'ext': 'mp4',\n            'title': 'La diretta di Rainews24',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _extract_from_content_id(self, content_id, url):\n        media = self._download_json(\n            'http://www.rai.tv/dl/RaiTV/programmi/media/ContentItem-%s.html?json' % content_id,\n            content_id, 'Downloading video JSON')\n\n        title = media['name'].strip()\n\n        media_type = media['type']\n        if 'Audio' in media_type:\n            relinker_info = {\n                'formats': [{\n                    'format_id': media.get('formatoAudio'),\n                    'url': media['audioUrl'],\n                    'ext': media.get('formatoAudio'),\n                }]\n            }\n        elif 'Video' in media_type:\n            relinker_info = self._extract_relinker_info(media['mediaUri'], content_id)\n        else:\n            raise ExtractorError('not a media file')\n\n        self._sort_formats(relinker_info['formats'])\n\n        thumbnails = []\n        for image_type in ('image', 'image_medium', 'image_300'):\n            thumbnail_url = media.get(image_type)\n            if thumbnail_url:\n                thumbnails.append({\n                    'url': compat_urlparse.urljoin(url, thumbnail_url),\n                })\n\n        subtitles = self._extract_subtitles(url, media.get('subtitlesUrl'))\n\n        info = {\n            'id': content_id,\n            'title': title,\n            'description': strip_or_none(media.get('desc')),\n            'thumbnails': thumbnails,\n            'uploader': media.get('author'),\n            'upload_date': unified_strdate(media.get('date')),\n            'duration': parse_duration(media.get('length')),\n            'subtitles': subtitles,\n        }\n\n        info.update(relinker_info)\n\n        return info\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        content_item_id = None\n\n        content_item_url = self._html_search_meta(\n            ('og:url', 'og:video', 'og:video:secure_url', 'twitter:url',\n             'twitter:player', 'jsonlink'), webpage, default=None)\n        if content_item_url:\n            content_item_id = self._search_regex(\n                r'ContentItem-(%s)' % self._UUID_RE, content_item_url,\n                'content item id', default=None)\n\n        if not content_item_id:\n            content_item_id = self._search_regex(\n                r'''(?x)\n                    (?:\n                        (?:initEdizione|drawMediaRaiTV)\\(|\n                        <(?:[^>]+\\bdata-id|var\\s+uniquename)=\n                    )\n                    ([\"\\'])\n                    (?:(?!\\1).)*\\bContentItem-(?P<id>%s)\n                ''' % self._UUID_RE,\n                webpage, 'content item id', default=None, group='id')\n\n        content_item_ids = set()\n        if content_item_id:\n            content_item_ids.add(content_item_id)\n        if video_id not in content_item_ids:\n            content_item_ids.add(video_id)\n\n        for content_item_id in content_item_ids:\n            try:\n                return self._extract_from_content_id(content_item_id, url)\n            except GeoRestrictedError:\n                raise\n            except ExtractorError:\n                pass\n\n        relinker_url = self._search_regex(\n            r'''(?x)\n                (?:\n                    var\\s+videoURL|\n                    mediaInfo\\.mediaUri\n                )\\s*=\\s*\n                ([\\'\"])\n                (?P<url>\n                    (?:https?:)?\n                    //mediapolis(?:vod)?\\.rai\\.it/relinker/relinkerServlet\\.htm\\?\n                    (?:(?!\\1).)*\\bcont=(?:(?!\\1).)+)\\1\n            ''',\n            webpage, 'relinker URL', group='url')\n\n        relinker_info = self._extract_relinker_info(\n            urljoin(url, relinker_url), video_id)\n        self._sort_formats(relinker_info['formats'])\n\n        title = self._search_regex(\n            r'var\\s+videoTitolo\\s*=\\s*([\\'\"])(?P<title>[^\\'\"]+)\\1',\n            webpage, 'title', group='title',\n            default=None) or self._og_search_title(webpage)\n\n        info = {\n            'id': video_id,\n            'title': title,\n        }\n\n        info.update(relinker_info)\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rai.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rai.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}