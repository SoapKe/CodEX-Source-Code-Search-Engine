{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    extract_attributes,\n    ExtractorError,\n    int_or_none,\n    parse_age_limit,\n    remove_end,\n    unescapeHTML,\n)\n\n\nclass DiscoveryGoBaseIE(InfoExtractor):\n    _VALID_URL_TEMPLATE = r\n\n    def _extract_video_info(self, video, stream, display_id):\n        title = video['name']\n\n        if not stream:\n            if video.get('authenticated') is True:\n                raise ExtractorError(\n                    'This video is only available via cable service provider subscription that'\n                    ' is not currently supported. You may want to use --cookies.', expected=True)\n            else:\n                raise ExtractorError('Unable to find stream')\n        STREAM_URL_SUFFIX = 'streamUrl'\n        formats = []\n        for stream_kind in ('', 'hds'):\n            suffix = STREAM_URL_SUFFIX.capitalize() if stream_kind else STREAM_URL_SUFFIX\n            stream_url = stream.get('%s%s' % (stream_kind, suffix))\n            if not stream_url:\n                continue\n            if stream_kind == '':\n                formats.extend(self._extract_m3u8_formats(\n                    stream_url, display_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif stream_kind == 'hds':\n                formats.extend(self._extract_f4m_formats(\n                    stream_url, display_id, f4m_id=stream_kind, fatal=False))\n        self._sort_formats(formats)\n\n        video_id = video.get('id') or display_id\n        description = video.get('description', {}).get('detailed')\n        duration = int_or_none(video.get('duration'))\n\n        series = video.get('show', {}).get('name')\n        season_number = int_or_none(video.get('season', {}).get('number'))\n        episode_number = int_or_none(video.get('episodeNumber'))\n\n        tags = video.get('tags')\n        age_limit = parse_age_limit(video.get('parental', {}).get('rating'))\n\n        subtitles = {}\n        captions = stream.get('captions')\n        if isinstance(captions, list):\n            for caption in captions:\n                subtitle_url = caption.get('fileUrl')\n                if (not subtitle_url or not isinstance(subtitle_url, compat_str) or\n                        not subtitle_url.startswith('http')):\n                    continue\n                lang = caption.get('fileLang', 'en')\n                ext = determine_ext(subtitle_url)\n                subtitles.setdefault(lang, []).append({\n                    'url': subtitle_url,\n                    'ext': 'ttml' if ext == 'xml' else ext,\n                })\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'series': series,\n            'season_number': season_number,\n            'episode_number': episode_number,\n            'tags': tags,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass DiscoveryGoIE(DiscoveryGoBaseIE):\n    _VALID_URL = DiscoveryGoBaseIE._VALID_URL_TEMPLATE % r'(?:[^/]+/)+'\n    _GEO_COUNTRIES = ['US']\n    _TEST = {\n        'url': 'https://www.discoverygo.com/bering-sea-gold/reaper-madness/',\n        'info_dict': {\n            'id': '58c167d86b66d12f2addeb01',\n            'ext': 'mp4',\n            'title': 'Reaper Madness',\n            'description': 'md5:09f2c625c99afb8946ed4fb7865f6e78',\n            'duration': 2519,\n            'series': 'Bering Sea Gold',\n            'season_number': 8,\n            'episode_number': 6,\n            'age_limit': 14,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        container = extract_attributes(\n            self._search_regex(\n                r'(<div[^>]+class=[\"\\']video-player-container[^>]+>)',\n                webpage, 'video container'))\n\n        video = self._parse_json(\n            container.get('data-video') or container.get('data-json'),\n            display_id)\n\n        stream = video.get('stream')\n\n        return self._extract_video_info(video, stream, display_id)\n\n\nclass DiscoveryGoPlaylistIE(DiscoveryGoBaseIE):\n    _VALID_URL = DiscoveryGoBaseIE._VALID_URL_TEMPLATE % ''\n    _TEST = {\n        'url': 'https://www.discoverygo.com/bering-sea-gold/',\n        'info_dict': {\n            'id': 'bering-sea-gold',\n            'title': 'Bering Sea Gold',\n            'description': 'md5:cc5c6489835949043c0cc3ad66c2fa0e',\n        },\n        'playlist_mincount': 6,\n    }\n\n    @classmethod\n    def suitable(cls, url):\n        return False if DiscoveryGoIE.suitable(url) else super(\n            DiscoveryGoPlaylistIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        entries = []\n        for mobj in re.finditer(r'data-json=([\"\\'])(?P<json>{.+?})\\1', webpage):\n            data = self._parse_json(\n                mobj.group('json'), display_id,\n                transform_source=unescapeHTML, fatal=False)\n            if not isinstance(data, dict) or data.get('type') != 'episode':\n                continue\n            episode_url = data.get('socialUrl')\n            if not episode_url:\n                continue\n            entries.append(self.url_result(\n                episode_url, ie=DiscoveryGoIE.ie_key(),\n                video_id=data.get('id')))\n\n        return self.playlist_result(\n            entries, display_id,\n            remove_end(self._og_search_title(\n                webpage, fatal=False), ' | Discovery GO'),\n            self._og_search_description(webpage))\n", "comments": "(?x)https?://(?:www\\.)?(?:\n            discovery|\n            investigationdiscovery|\n            discoverylife|\n            animalplanet|\n            ahctv|\n            destinationamerica|\n            sciencechannel|\n            tlc|\n            velocitychannel\n        )go\\.com/%s(?P<id>[^/?#&]+)\n)\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    extract_attributes,\n    ExtractorError,\n    int_or_none,\n    parse_age_limit,\n    remove_end,\n    unescapeHTML,\n)\n\n\nclass DiscoveryGoBaseIE(InfoExtractor):\n    _VALID_URL_TEMPLATE = r'''(?x)https?://(?:www\\.)?(?:\n            discovery|\n            investigationdiscovery|\n            discoverylife|\n            animalplanet|\n            ahctv|\n            destinationamerica|\n            sciencechannel|\n            tlc|\n            velocitychannel\n        )go\\.com/%s(?P<id>[^/?#&]+)'''\n\n    def _extract_video_info(self, video, stream, display_id):\n        title = video['name']\n\n        if not stream:\n            if video.get('authenticated') is True:\n                raise ExtractorError(\n                    'This video is only available via cable service provider subscription that'\n                    ' is not currently supported. You may want to use --cookies.', expected=True)\n            else:\n                raise ExtractorError('Unable to find stream')\n        STREAM_URL_SUFFIX = 'streamUrl'\n        formats = []\n        for stream_kind in ('', 'hds'):\n            suffix = STREAM_URL_SUFFIX.capitalize() if stream_kind else STREAM_URL_SUFFIX\n            stream_url = stream.get('%s%s' % (stream_kind, suffix))\n            if not stream_url:\n                continue\n            if stream_kind == '':\n                formats.extend(self._extract_m3u8_formats(\n                    stream_url, display_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif stream_kind == 'hds':\n                formats.extend(self._extract_f4m_formats(\n                    stream_url, display_id, f4m_id=stream_kind, fatal=False))\n        self._sort_formats(formats)\n\n        video_id = video.get('id') or display_id\n        description = video.get('description', {}).get('detailed')\n        duration = int_or_none(video.get('duration'))\n\n        series = video.get('show', {}).get('name')\n        season_number = int_or_none(video.get('season', {}).get('number'))\n        episode_number = int_or_none(video.get('episodeNumber'))\n\n        tags = video.get('tags')\n        age_limit = parse_age_limit(video.get('parental', {}).get('rating'))\n\n        subtitles = {}\n        captions = stream.get('captions')\n        if isinstance(captions, list):\n            for caption in captions:\n                subtitle_url = caption.get('fileUrl')\n                if (not subtitle_url or not isinstance(subtitle_url, compat_str) or\n                        not subtitle_url.startswith('http')):\n                    continue\n                lang = caption.get('fileLang', 'en')\n                ext = determine_ext(subtitle_url)\n                subtitles.setdefault(lang, []).append({\n                    'url': subtitle_url,\n                    'ext': 'ttml' if ext == 'xml' else ext,\n                })\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'series': series,\n            'season_number': season_number,\n            'episode_number': episode_number,\n            'tags': tags,\n            'age_limit': age_limit,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass DiscoveryGoIE(DiscoveryGoBaseIE):\n    _VALID_URL = DiscoveryGoBaseIE._VALID_URL_TEMPLATE % r'(?:[^/]+/)+'\n    _GEO_COUNTRIES = ['US']\n    _TEST = {\n        'url': 'https://www.discoverygo.com/bering-sea-gold/reaper-madness/',\n        'info_dict': {\n            'id': '58c167d86b66d12f2addeb01',\n            'ext': 'mp4',\n            'title': 'Reaper Madness',\n            'description': 'md5:09f2c625c99afb8946ed4fb7865f6e78',\n            'duration': 2519,\n            'series': 'Bering Sea Gold',\n            'season_number': 8,\n            'episode_number': 6,\n            'age_limit': 14,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        container = extract_attributes(\n            self._search_regex(\n                r'(<div[^>]+class=[\"\\']video-player-container[^>]+>)',\n                webpage, 'video container'))\n\n        video = self._parse_json(\n            container.get('data-video') or container.get('data-json'),\n            display_id)\n\n        stream = video.get('stream')\n\n        return self._extract_video_info(video, stream, display_id)\n\n\nclass DiscoveryGoPlaylistIE(DiscoveryGoBaseIE):\n    _VALID_URL = DiscoveryGoBaseIE._VALID_URL_TEMPLATE % ''\n    _TEST = {\n        'url': 'https://www.discoverygo.com/bering-sea-gold/',\n        'info_dict': {\n            'id': 'bering-sea-gold',\n            'title': 'Bering Sea Gold',\n            'description': 'md5:cc5c6489835949043c0cc3ad66c2fa0e',\n        },\n        'playlist_mincount': 6,\n    }\n\n    @classmethod\n    def suitable(cls, url):\n        return False if DiscoveryGoIE.suitable(url) else super(\n            DiscoveryGoPlaylistIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        entries = []\n        for mobj in re.finditer(r'data-json=([\"\\'])(?P<json>{.+?})\\1', webpage):\n            data = self._parse_json(\n                mobj.group('json'), display_id,\n                transform_source=unescapeHTML, fatal=False)\n            if not isinstance(data, dict) or data.get('type') != 'episode':\n                continue\n            episode_url = data.get('socialUrl')\n            if not episode_url:\n                continue\n            entries.append(self.url_result(\n                episode_url, ie=DiscoveryGoIE.ie_key(),\n                video_id=data.get('id')))\n\n        return self.playlist_result(\n            entries, display_id,\n            remove_end(self._og_search_title(\n                webpage, fatal=False), ' | Discovery GO'),\n            self._og_search_description(webpage))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "discoverygo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/discoverygo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}