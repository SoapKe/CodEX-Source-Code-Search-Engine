{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_b64decode\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    urlencode_postdata,\n)\n\n\nclass SharedBaseIE(InfoExtractor):\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        if self._FILE_NOT_FOUND in webpage:\n            raise ExtractorError(\n                'Video %s does not exist' % video_id, expected=True)\n\n        video_url = self._extract_video_url(webpage, video_id, url)\n\n        title = compat_b64decode(self._html_search_meta(\n            'full:title', webpage, 'title')).decode('utf-8')\n        filesize = int_or_none(self._html_search_meta(\n            'full:size', webpage, 'file size', fatal=False))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'ext': 'mp4',\n            'filesize': filesize,\n            'title': title,\n        }\n\n\nclass SharedIE(SharedBaseIE):\n    IE_DESC = 'shared.sx'\n    _VALID_URL = r'https?://shared\\.sx/(?P<id>[\\da-z]{10})'\n    _FILE_NOT_FOUND = '>File does not exist<'\n\n    _TEST = {\n        'url': 'http://shared.sx/0060718775',\n        'md5': '106fefed92a8a2adb8c98e6a0652f49b',\n        'info_dict': {\n            'id': '0060718775',\n            'ext': 'mp4',\n            'title': 'Bmp4',\n            'filesize': 1720110,\n        },\n    }\n\n    def _extract_video_url(self, webpage, video_id, url):\n        download_form = self._hidden_inputs(webpage)\n\n        video_page = self._download_webpage(\n            url, video_id, 'Downloading video page',\n            data=urlencode_postdata(download_form),\n            headers={\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Referer': url,\n            })\n\n        video_url = self._html_search_regex(\n            r'data-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            video_page, 'video URL', group='url')\n\n        return video_url\n\n\nclass VivoIE(SharedBaseIE):\n    IE_DESC = 'vivo.sx'\n    _VALID_URL = r'https?://vivo\\.sx/(?P<id>[\\da-z]{10})'\n    _FILE_NOT_FOUND = '>The file you have requested does not exists or has been removed'\n\n    _TEST = {\n        'url': 'http://vivo.sx/d7ddda0e78',\n        'md5': '15b3af41be0b4fe01f4df075c2678b2c',\n        'info_dict': {\n            'id': 'd7ddda0e78',\n            'ext': 'mp4',\n            'title': 'Chicken',\n            'filesize': 528031,\n        },\n    }\n\n    def _extract_video_url(self, webpage, video_id, *args):\n        return self._parse_json(\n            self._search_regex(\n                r'InitializeStream\\s*\\(\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n                webpage, 'stream', group='url'),\n            video_id,\n            transform_source=lambda x: compat_b64decode(x).decode('utf-8'))[0]\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_b64decode\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    urlencode_postdata,\n)\n\n\nclass SharedBaseIE(InfoExtractor):\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        if self._FILE_NOT_FOUND in webpage:\n            raise ExtractorError(\n                'Video %s does not exist' % video_id, expected=True)\n\n        video_url = self._extract_video_url(webpage, video_id, url)\n\n        title = compat_b64decode(self._html_search_meta(\n            'full:title', webpage, 'title')).decode('utf-8')\n        filesize = int_or_none(self._html_search_meta(\n            'full:size', webpage, 'file size', fatal=False))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'ext': 'mp4',\n            'filesize': filesize,\n            'title': title,\n        }\n\n\nclass SharedIE(SharedBaseIE):\n    IE_DESC = 'shared.sx'\n    _VALID_URL = r'https?://shared\\.sx/(?P<id>[\\da-z]{10})'\n    _FILE_NOT_FOUND = '>File does not exist<'\n\n    _TEST = {\n        'url': 'http://shared.sx/0060718775',\n        'md5': '106fefed92a8a2adb8c98e6a0652f49b',\n        'info_dict': {\n            'id': '0060718775',\n            'ext': 'mp4',\n            'title': 'Bmp4',\n            'filesize': 1720110,\n        },\n    }\n\n    def _extract_video_url(self, webpage, video_id, url):\n        download_form = self._hidden_inputs(webpage)\n\n        video_page = self._download_webpage(\n            url, video_id, 'Downloading video page',\n            data=urlencode_postdata(download_form),\n            headers={\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Referer': url,\n            })\n\n        video_url = self._html_search_regex(\n            r'data-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            video_page, 'video URL', group='url')\n\n        return video_url\n\n\nclass VivoIE(SharedBaseIE):\n    IE_DESC = 'vivo.sx'\n    _VALID_URL = r'https?://vivo\\.sx/(?P<id>[\\da-z]{10})'\n    _FILE_NOT_FOUND = '>The file you have requested does not exists or has been removed'\n\n    _TEST = {\n        'url': 'http://vivo.sx/d7ddda0e78',\n        'md5': '15b3af41be0b4fe01f4df075c2678b2c',\n        'info_dict': {\n            'id': 'd7ddda0e78',\n            'ext': 'mp4',\n            'title': 'Chicken',\n            'filesize': 528031,\n        },\n    }\n\n    def _extract_video_url(self, webpage, video_id, *args):\n        return self._parse_json(\n            self._search_regex(\n                r'InitializeStream\\s*\\(\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n                webpage, 'stream', group='url'),\n            video_id,\n            transform_source=lambda x: compat_b64decode(x).decode('utf-8'))[0]\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "shared.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/shared.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}