{"author": "odoo", "code": "# -*- coding: utf-8 -*-\nfrom odoo.tests.common import HttpCase\nfrom odoo.exceptions import ValidationError\n\nclass AccountingTestCase(HttpCase):\n    \"\"\" This class extends the base TransactionCase, in order to test the\n    accounting with localization setups. It is configured to run the tests after\n    the installation of all modules, and will SKIP TESTS ifit  cannot find an already\n    configured accounting (which means no localization module has been installed).\n    \"\"\"\n\n    post_install = True\n    at_install = False\n\n    def setUp(self):\n        super(AccountingTestCase, self).setUp()\n        domain = [('company_id', '=', self.env.ref('base.main_company').id)]\n        if not self.env['account.account'].search_count(domain):\n            self.skipTest(\"No Chart of account found\")\n\n    def check_complete_move(self, move, theorical_lines):\n        for aml in move.line_ids:\n            line = (aml.name, round(aml.debit, 2), round(aml.credit, 2))\n            if line in theorical_lines:\n                theorical_lines.remove(line)\n            else:\n                raise ValidationError('Unexpected journal item. (label: %s, debit: %s, credit: %s)' % (aml.name, round(aml.debit, 2), round(aml.credit, 2)))\n        if theorical_lines:\n            raise ValidationError('Remaining theorical line (not found). %s)' % ([(aml[0], aml[1], aml[2]) for aml in theorical_lines]))\n        return True\n\n    def ensure_account_property(self, property_name):\n        '''Ensure the ir.property targetting an account.account passed as parameter exists.\n        In case it's not: create it with a random account. This is useful when testing with\n        partially defined localization (missing stock properties for example)\n\n        :param property_name: The name of the property.\n        '''\n        company_id = self.env.user.company_id\n        field_id = self.env['ir.model.fields'].search(\n            [('model', '=', 'product.template'), ('name', '=', property_name)], limit=1)\n        property_id = self.env['ir.property'].search([\n            ('company_id', '=', company_id.id),\n            ('name', '=', property_name),\n            ('res_id', '=', None),\n            ('fields_id', '=', field_id.id)], limit=1)\n        account_id = self.env['account.account'].search([('company_id', '=', company_id.id)], limit=1)\n        value_reference = 'account.account,%d' % account_id.id\n        if property_id and not property_id.value_reference:\n            property_id.value_reference = value_reference\n        else:\n            self.env['ir.property'].create({\n                'name': property_name,\n                'company_id': company_id.id,\n                'fields_id': field_id.id,\n                'value_reference': value_reference,\n            })\n", "comments": "    this class extends base transactioncase  order test     accounting localization setups  it configured run tests     installation modules  skip tests ifit  cannot find already     configured accounting (which means localization module installed)              ensure ir property targetting account account passed parameter exists          in case  create random account  this useful testing         partially defined localization (missing stock properties example)           param property name  the name property                     coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\nfrom odoo.tests.common import HttpCase\nfrom odoo.exceptions import ValidationError\n\nclass AccountingTestCase(HttpCase):\n    \"\"\" This class extends the base TransactionCase, in order to test the\n    accounting with localization setups. It is configured to run the tests after\n    the installation of all modules, and will SKIP TESTS ifit  cannot find an already\n    configured accounting (which means no localization module has been installed).\n    \"\"\"\n\n    post_install = True\n    at_install = False\n\n    def setUp(self):\n        super(AccountingTestCase, self).setUp()\n        domain = [('company_id', '=', self.env.ref('base.main_company').id)]\n        if not self.env['account.account'].search_count(domain):\n            self.skipTest(\"No Chart of account found\")\n\n    def check_complete_move(self, move, theorical_lines):\n        for aml in move.line_ids:\n            line = (aml.name, round(aml.debit, 2), round(aml.credit, 2))\n            if line in theorical_lines:\n                theorical_lines.remove(line)\n            else:\n                raise ValidationError('Unexpected journal item. (label: %s, debit: %s, credit: %s)' % (aml.name, round(aml.debit, 2), round(aml.credit, 2)))\n        if theorical_lines:\n            raise ValidationError('Remaining theorical line (not found). %s)' % ([(aml[0], aml[1], aml[2]) for aml in theorical_lines]))\n        return True\n\n    def ensure_account_property(self, property_name):\n        '''Ensure the ir.property targetting an account.account passed as parameter exists.\n        In case it's not: create it with a random account. This is useful when testing with\n        partially defined localization (missing stock properties for example)\n\n        :param property_name: The name of the property.\n        '''\n        company_id = self.env.user.company_id\n        field_id = self.env['ir.model.fields'].search(\n            [('model', '=', 'product.template'), ('name', '=', property_name)], limit=1)\n        property_id = self.env['ir.property'].search([\n            ('company_id', '=', company_id.id),\n            ('name', '=', property_name),\n            ('res_id', '=', None),\n            ('fields_id', '=', field_id.id)], limit=1)\n        account_id = self.env['account.account'].search([('company_id', '=', company_id.id)], limit=1)\n        value_reference = 'account.account,%d' % account_id.id\n        if property_id and not property_id.value_reference:\n            property_id.value_reference = value_reference\n        else:\n            self.env['ir.property'].create({\n                'name': property_name,\n                'company_id': company_id.id,\n                'fields_id': field_id.id,\n                'value_reference': value_reference,\n            })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "account_test_classes.py", "id": "4e267ed84d3c1e1ecedc55062d4ab50c", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/account_test_classes.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}