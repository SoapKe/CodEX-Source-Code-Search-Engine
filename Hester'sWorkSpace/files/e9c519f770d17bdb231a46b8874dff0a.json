{"author": "odoo", "code": "# -*- coding:utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons import decimal_precision as dp\nfrom odoo.exceptions import UserError\n\n\nclass HrContract(models.Model):\n    \"\"\"\n    Employee contract allows to add different values in fields.\n    Fields are used in salary rule computation.\n    \"\"\"\n    _inherit = 'hr.contract'\n\n    tds = fields.Float(string='TDS', digits=dp.get_precision('Payroll'),\n        help='Amount for Tax Deduction at Source')\n    driver_salay = fields.Boolean(string='Driver Salary', help='Check this box if you provide allowance for driver')\n    medical_insurance = fields.Float(string='Medical Insurance', digits=dp.get_precision('Payroll'),\n        help='Deduction towards company provided medical insurance')\n    voluntary_provident_fund = fields.Float(string='Voluntary Provident Fund (%)', digits=dp.get_precision('Payroll'),\n        help='VPF is a safe option wherein you can contribute more than the PF ceiling of 12% that has been mandated by the government and VPF computed as percentage(%)')\n    house_rent_allowance_metro_nonmetro = fields.Float(string='House Rent Allowance (%)', digits=dp.get_precision('Payroll'),\n        help='HRA is an allowance given by the employer to the employee for taking care of his rental or accommodation expenses for metro city it is 50% and for non metro 40%. \\nHRA computed as percentage(%)')\n    supplementary_allowance = fields.Float(string='Supplementary Allowance', digits=dp.get_precision('Payroll'))\n\n\nclass HrPayrollAdvice(models.Model):\n    '''\n    Bank Advice\n    '''\n    _name = 'hr.payroll.advice'\n\n    def _get_default_date(self):\n        return fields.Date.from_string(fields.Date.today())\n\n    name = fields.Char(readonly=True, required=True, states={'draft': [('readonly', False)]})\n    note = fields.Text(string='Description', default='Please make the payroll transfer from above account number to the below mentioned account numbers towards employee salaries:')\n    date = fields.Date(readonly=True, required=True, states={'draft': [('readonly', False)]}, default=_get_default_date,\n        help='Advice Date is used to search Payslips')\n    state = fields.Selection([\n        ('draft', 'Draft'),\n        ('confirm', 'Confirmed'),\n        ('cancel', 'Cancelled'),\n    ], string='Status', default='draft', index=True, readonly=True)\n    number = fields.Char(string='Reference', readonly=True)\n    line_ids = fields.One2many('hr.payroll.advice.line', 'advice_id', string='Employee Salary',\n        states={'draft': [('readonly', False)]}, readonly=True, copy=True)\n    chaque_nos = fields.Char(string='Cheque Numbers')\n    neft = fields.Boolean(string='NEFT Transaction', help='Check this box if your company use online transfer for salary')\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True,\n        states={'draft': [('readonly', False)]}, default=lambda self: self.env.user.company_id)\n    bank_id = fields.Many2one('res.bank', string='Bank', readonly=True, states={'draft': [('readonly', False)]},\n        help='Select the Bank from which the salary is going to be paid')\n    batch_id = fields.Many2one('hr.payslip.run', string='Batch', readonly=True)\n\n    @api.multi\n    def compute_advice(self):\n        \"\"\"\n        Advice - Create Advice lines in Payment Advice and\n        compute Advice lines.\n        \"\"\"\n        for advice in self:\n            old_lines = self.env['hr.payroll.advice.line'].search([('advice_id', '=', advice.id)])\n            if old_lines:\n                old_lines.unlink()\n            payslips = self.env['hr.payslip'].search([('date_from', '<=', advice.date), ('date_to', '>=', advice.date), ('state', '=', 'done')])\n            for slip in payslips:\n                if not slip.employee_id.bank_account_id and not slip.employee_id.bank_account_id.acc_number:\n                    raise UserError(_('Please define bank account for the %s employee') % (slip.employee_id.name,))\n                payslip_line = self.env['hr.payslip.line'].search([('slip_id', '=', slip.id), ('code', '=', 'NET')], limit=1)\n                if payslip_line:\n                    self.env['hr.payroll.advice.line'].create({\n                        'advice_id': advice.id,\n                        'name': slip.employee_id.bank_account_id.acc_number,\n                        'ifsc_code': slip.employee_id.bank_account_id.bank_bic or '',\n                        'employee_id': slip.employee_id.id,\n                        'bysal': payslip_line.total\n                    })\n                slip.advice_id = advice.id\n\n    @api.multi\n    def confirm_sheet(self):\n        \"\"\"\n        confirm Advice - confirmed Advice after computing Advice Lines..\n        \"\"\"\n        for advice in self:\n            if not advice.line_ids:\n                raise UserError(_('You can not confirm Payment advice without advice lines.'))\n            date = fields.Date.from_string(fields.Date.today())\n            advice_year = date.strftime('%m') + '-' + date.strftime('%Y')\n            number = self.env['ir.sequence'].next_by_code('payment.advice')\n            advice.write({\n                'number': 'PAY' + '/' + advice_year + '/' + number,\n                'state': 'confirm',\n            })\n\n    @api.multi\n    def set_to_draft(self):\n        \"\"\"Resets Advice as draft.\n        \"\"\"\n        self.write({'state': 'draft'})\n\n    @api.multi\n    def cancel_sheet(self):\n        \"\"\"Marks Advice as cancelled.\n        \"\"\"\n        self.write({'state': 'cancel'})\n\n    @api.onchange('company_id')\n    def _onchange_company_id(self):\n        self.bank_id = self.company_id.partner_id.bank_ids and self.company_id.partner_id.bank_ids[0].bank_id.id or False\n\n\nclass HrPayslipRun(models.Model):\n    _inherit = 'hr.payslip.run'\n    _description = 'Payslip Batches'\n\n    available_advice = fields.Boolean(string='Made Payment Advice?',\n                                       help='If this box is checked which means that Payment Advice exists for current batch',\n                                       readonly=False, copy=False)\n\n    @api.multi\n    def draft_payslip_run(self):\n        super(HrPayslipRun, self).draft_payslip_run()\n        self.write({'available_advice': False})\n\n    @api.multi\n    def create_advice(self):\n        for run in self:\n            if run.available_advice:\n                raise UserError(_(\"Payment advice already exists for %s, 'Set to Draft' to create a new advice.\") % (run.name,))\n            company = self.env.user.company_id\n            advice = self.env['hr.payroll.advice'].create({\n                        'batch_id': run.id,\n                        'company_id': company.id,\n                        'name': run.name,\n                        'date': run.date_end,\n                        'bank_id': company.partner_id.bank_ids and company.partner_id.bank_ids[0].id or False\n                    })\n            for slip in run.slip_ids:\n                ?\n                slip.action_payslip_done()\n                if not slip.employee_id.bank_account_id or not slip.employee_id.bank_account_id.acc_number:\n                    raise UserError(_('Please define bank account for the %s employee') % (slip.employee_id.name))\n                payslip_line = self.env['hr.payslip.line'].search([('slip_id', '=', slip.id), ('code', '=', 'NET')], limit=1)\n                if payslip_line:\n                    self.env['hr.payroll.advice.line'].create({\n                        'advice_id': advice.id,\n                        'name': slip.employee_id.bank_account_id.acc_number,\n                        'ifsc_code': slip.employee_id.bank_account_id.bank_bic or '',\n                        'employee_id': slip.employee_id.id,\n                        'bysal': payslip_line.total\n                    })\n        self.write({'available_advice': True})\n\n\nclass HrPayrollAdviceLine(models.Model):\n    '''\n    Bank Advice Lines\n    '''\n    _name = 'hr.payroll.advice.line'\n    _description = 'Bank Advice Lines'\n\n    advice_id = fields.Many2one('hr.payroll.advice', string='Bank Advice')\n    name = fields.Char('Bank Account No.', required=True)\n    ifsc_code = fields.Char(string='IFSC Code')\n    employee_id = fields.Many2one('hr.employee', string='Employee', required=True)\n    bysal = fields.Float(string='By Salary', digits=dp.get_precision('Payroll'))\n    debit_credit = fields.Char(string='C/D', default='C')\n    company_id = fields.Many2one('res.company', related='advice_id.company_id', string='Company', store=True)\n    ifsc = fields.Boolean(related='advice_id.neft', string='IFSC')\n\n    @api.onchange('employee_id')\n    def onchange_employee_id(self):\n        self.name = self.employee_id.bank_account_id.acc_number\n        self.ifsc_code = self.employee_id.bank_account_id.bank_bic or ''\n\n\nclass HrPayslip(models.Model):\n    '''\n    Employee Pay Slip\n    '''\n    _inherit = 'hr.payslip'\n    _description = 'Pay Slips'\n\n    advice_id = fields.Many2one('hr.payroll.advice', string='Bank Advice', copy=False)\n\n\nclass ResCompany(models.Model):\n    _inherit = 'res.company'\n\n    dearness_allowance = fields.Boolean(string='Dearness Allowance', default=True,\n        help='Check this box if your company provide Dearness Allowance to employee')\n", "comments": "        employee contract allows add different values fields      fields used salary rule computation               inherit    hr contract       tds   fields float(string  tds   digits dp get precision( payroll )          help  amount tax deduction source )     driver salay   fields boolean(string  driver salary   help  check box provide allowance driver )     medical insurance   fields float(string  medical insurance   digits dp get precision( payroll )          help  deduction towards company provided medical insurance )     voluntary provident fund   fields float(string  voluntary provident fund ( )   digits dp get precision( payroll )          help  vpf safe option wherein contribute pf ceiling 12  mandated government vpf computed percentage( ) )     house rent allowance metro nonmetro   fields float(string  house rent allowance ( )   digits dp get precision( payroll )          help  hra allowance given employer employee taking care rental accommodation expenses metro city 50  non metro 40    nhra computed percentage( ) )     supplementary allowance   fields float(string  supplementary allowance   digits dp get precision( payroll ))   class hrpayrolladvice(models model)              bank advice              name    hr payroll advice       def  get default date(self)          return fields date string(fields date today())      name   fields char(readonly true  required true  states   draft    ( readonly   false)  )     note   fields text(string  description   default  please make payroll transfer account number mentioned account numbers towards employee salaries  )     date   fields date(readonly true  required true  states   draft    ( readonly   false)    default  get default date          help  advice date used search payslips )     state   fields selection(          ( draft    draft )          ( confirm    confirmed )          ( cancel    cancelled )         string  status   default  draft   index true  readonly true)     number   fields char(string  reference   readonly true)     line ids   fields one2many( hr payroll advice line    advice id   string  employee salary           states   draft    ( readonly   false)    readonly true  copy true)     chaque nos   fields char(string  cheque numbers )     neft   fields boolean(string  neft transaction   help  check box company use online transfer salary )     company id   fields many2one( res company   string  company   required true  readonly true          states   draft    ( readonly   false)    default lambda self  self env user company id)     bank id   fields many2one( res bank   string  bank   readonly true  states   draft    ( readonly   false)            help  select bank salary going paid )     batch id   fields many2one( hr payslip run   string  batch   readonly true)       api multi     def compute advice(self)                      advice   create advice lines payment advice         compute advice lines                      advice self              old lines   self env  hr payroll advice line   search( ( advice id        advice id) )             old lines                  old lines unlink()             payslips   self env  hr payslip   search( ( date         advice date)  ( date         advice date)  ( state         done ) )             slip payslips                  slip employee id bank account id slip employee id bank account id acc number                      raise usererror( ( please define bank account  employee )   (slip employee id name ))                 payslip line   self env  hr payslip line   search( ( slip id        slip id)  ( code         net )   limit 1)                 payslip line                      self env  hr payroll advice line   create(                           advice id   advice id                           name   slip employee id bank account id acc number                           ifsc code   slip employee id bank account id bank bic                              employee id   slip employee id id                           bysal   payslip line total                      )                 slip advice id   advice id       api multi     def confirm sheet(self)                      confirm advice   confirmed advice computing advice lines                       advice self              advice line ids                  raise usererror( ( you confirm payment advice without advice lines  ))             date   fields date string(fields date today())             advice year   date strftime(  )         date strftime(  y )             number   self env  ir sequence   next code( payment advice )             advice write(                   number    pay          advice year         number                   state    confirm                )       api multi     def set draft(self)             resets advice draft                      self write(  state    draft  )       api multi     def cancel sheet(self)             marks advice cancelled                       bank advice              name    hr payroll advice       def  get default date(self)          return fields date string(fields date today())      name   fields char(readonly true  required true  states   draft    ( readonly   false)  )     note   fields text(string  description   default  please make payroll transfer account number mentioned account numbers towards employee salaries  )     date   fields date(readonly true  required true  states   draft    ( readonly   false)    default  get default date          help  advice date used search payslips )     state   fields selection(          ( draft    draft )          ( confirm    confirmed )          ( cancel    cancelled )         string  status   default  draft   index true  readonly true)     number   fields char(string  reference   readonly true)     line ids   fields one2many( hr payroll advice line    advice id   string  employee salary           states   draft    ( readonly   false)    readonly true  copy true)     chaque nos   fields char(string  cheque numbers )     neft   fields boolean(string  neft transaction   help  check box company use online transfer salary )     company id   fields many2one( res company   string  company   required true  readonly true          states   draft    ( readonly   false)    default lambda self  self env user company id)     bank id   fields many2one( res bank   string  bank   readonly true  states   draft    ( readonly   false)            help  select bank salary going paid )     batch id   fields many2one( hr payslip run   string  batch   readonly true)       api multi     def compute advice(self)                      advice   create advice lines payment advice         compute advice lines                      advice self              old lines   self env  hr payroll advice line   search( ( advice id        advice id) )             old lines                  old lines unlink()             payslips   self env  hr payslip   search( ( date         advice date)  ( date         advice date)  ( state         done ) )             slip payslips                  slip employee id bank account id slip employee id bank account id acc number                      raise usererror( ( please define bank account  employee )   (slip employee id name ))                 payslip line   self env  hr payslip line   search( ( slip id        slip id)  ( code         net )   limit 1)                 payslip line                      self env  hr payroll advice line   create(                           advice id   advice id                           name   slip employee id bank account id acc number                           ifsc code   slip employee id bank account id bank bic                              employee id   slip employee id id                           bysal   payslip line total                      )                 slip advice id   advice id       api multi     def confirm sheet(self)                      confirm advice   confirmed advice computing advice lines                       advice self              advice line ids                  raise usererror( ( you confirm payment advice without advice lines  ))             date   fields date string(fields date today())             advice year   date strftime(  )         date strftime(  y )             number   self env  ir sequence   next code( payment advice )             advice write(                   number    pay          advice year         number                   state    confirm                )       api multi     def set draft(self)             resets advice draft                      self write(  state    draft  )       api multi     def cancel sheet(self)             marks advice cancelled                      self write(  state    cancel  )       api onchange( company id )     def  onchange company id(self)          self bank id   self company id partner id bank ids self company id partner id bank ids 0  bank id id false   class hrpaysliprun(models model)       inherit    hr payslip run       description    payslip batches       available advice   fields boolean(string  made payment advice                                           help  if box checked means payment advice exists current batch                                          readonly false  copy false)       api multi     def draft payslip run(self)          super(hrpaysliprun  self) draft payslip run()         self write(  available advice   false )       api multi     def create advice(self)          run self              run available advice                  raise usererror( ( payment advice already exists    set draft  create new advice  )   (run name ))             company   self env user company id             advice   self env  hr payroll advice   create(                           batch id   run id                           company id   company id                           name   run name                           date   run date end                           bank id   company partner id bank ids company partner id bank ids 0  id false                      )             slip run slip ids                    todo necessary interleave calls                   slip action payslip done()                 slip employee id bank account id slip employee id bank account id acc number                      raise usererror( ( please define bank account  employee )   (slip employee id name))                 payslip line   self env  hr payslip line   search( ( slip id        slip id)  ( code         net )   limit 1)                 payslip line                      self env  hr payroll advice line   create(                           advice id   advice id                           name   slip employee id bank account id acc number                           ifsc code   slip employee id bank account id bank bic                              employee id   slip employee id id                           bysal   payslip line total                      )         self write(  available advice   true )   class hrpayrolladviceline(models model)              bank advice lines              name    hr payroll advice line       description    bank advice lines       advice id   fields many2one( hr payroll advice   string  bank advice )     name   fields char( bank account no    required true)     ifsc code   fields char(string  ifsc code )     employee id   fields many2one( hr employee   string  employee   required true)     bysal   fields float(string  by salary   digits dp get precision( payroll ))     debit credit   fields char(string  c d   default  c )     company id   fields many2one( res company   related  advice id company id   string  company   store true)     ifsc   fields boolean(related  advice id neft   string  ifsc )       api onchange( employee id )     def onchange employee id(self)          self name   self employee id bank account id acc number         self ifsc code   self employee id bank account id bank bic      class hrpayslip(models model)              employee pay slip                coding utf 8        part odoo  see license file full copyright licensing details     todo necessary interleave calls   ", "content": "# -*- coding:utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons import decimal_precision as dp\nfrom odoo.exceptions import UserError\n\n\nclass HrContract(models.Model):\n    \"\"\"\n    Employee contract allows to add different values in fields.\n    Fields are used in salary rule computation.\n    \"\"\"\n    _inherit = 'hr.contract'\n\n    tds = fields.Float(string='TDS', digits=dp.get_precision('Payroll'),\n        help='Amount for Tax Deduction at Source')\n    driver_salay = fields.Boolean(string='Driver Salary', help='Check this box if you provide allowance for driver')\n    medical_insurance = fields.Float(string='Medical Insurance', digits=dp.get_precision('Payroll'),\n        help='Deduction towards company provided medical insurance')\n    voluntary_provident_fund = fields.Float(string='Voluntary Provident Fund (%)', digits=dp.get_precision('Payroll'),\n        help='VPF is a safe option wherein you can contribute more than the PF ceiling of 12% that has been mandated by the government and VPF computed as percentage(%)')\n    house_rent_allowance_metro_nonmetro = fields.Float(string='House Rent Allowance (%)', digits=dp.get_precision('Payroll'),\n        help='HRA is an allowance given by the employer to the employee for taking care of his rental or accommodation expenses for metro city it is 50% and for non metro 40%. \\nHRA computed as percentage(%)')\n    supplementary_allowance = fields.Float(string='Supplementary Allowance', digits=dp.get_precision('Payroll'))\n\n\nclass HrPayrollAdvice(models.Model):\n    '''\n    Bank Advice\n    '''\n    _name = 'hr.payroll.advice'\n\n    def _get_default_date(self):\n        return fields.Date.from_string(fields.Date.today())\n\n    name = fields.Char(readonly=True, required=True, states={'draft': [('readonly', False)]})\n    note = fields.Text(string='Description', default='Please make the payroll transfer from above account number to the below mentioned account numbers towards employee salaries:')\n    date = fields.Date(readonly=True, required=True, states={'draft': [('readonly', False)]}, default=_get_default_date,\n        help='Advice Date is used to search Payslips')\n    state = fields.Selection([\n        ('draft', 'Draft'),\n        ('confirm', 'Confirmed'),\n        ('cancel', 'Cancelled'),\n    ], string='Status', default='draft', index=True, readonly=True)\n    number = fields.Char(string='Reference', readonly=True)\n    line_ids = fields.One2many('hr.payroll.advice.line', 'advice_id', string='Employee Salary',\n        states={'draft': [('readonly', False)]}, readonly=True, copy=True)\n    chaque_nos = fields.Char(string='Cheque Numbers')\n    neft = fields.Boolean(string='NEFT Transaction', help='Check this box if your company use online transfer for salary')\n    company_id = fields.Many2one('res.company', string='Company', required=True, readonly=True,\n        states={'draft': [('readonly', False)]}, default=lambda self: self.env.user.company_id)\n    bank_id = fields.Many2one('res.bank', string='Bank', readonly=True, states={'draft': [('readonly', False)]},\n        help='Select the Bank from which the salary is going to be paid')\n    batch_id = fields.Many2one('hr.payslip.run', string='Batch', readonly=True)\n\n    @api.multi\n    def compute_advice(self):\n        \"\"\"\n        Advice - Create Advice lines in Payment Advice and\n        compute Advice lines.\n        \"\"\"\n        for advice in self:\n            old_lines = self.env['hr.payroll.advice.line'].search([('advice_id', '=', advice.id)])\n            if old_lines:\n                old_lines.unlink()\n            payslips = self.env['hr.payslip'].search([('date_from', '<=', advice.date), ('date_to', '>=', advice.date), ('state', '=', 'done')])\n            for slip in payslips:\n                if not slip.employee_id.bank_account_id and not slip.employee_id.bank_account_id.acc_number:\n                    raise UserError(_('Please define bank account for the %s employee') % (slip.employee_id.name,))\n                payslip_line = self.env['hr.payslip.line'].search([('slip_id', '=', slip.id), ('code', '=', 'NET')], limit=1)\n                if payslip_line:\n                    self.env['hr.payroll.advice.line'].create({\n                        'advice_id': advice.id,\n                        'name': slip.employee_id.bank_account_id.acc_number,\n                        'ifsc_code': slip.employee_id.bank_account_id.bank_bic or '',\n                        'employee_id': slip.employee_id.id,\n                        'bysal': payslip_line.total\n                    })\n                slip.advice_id = advice.id\n\n    @api.multi\n    def confirm_sheet(self):\n        \"\"\"\n        confirm Advice - confirmed Advice after computing Advice Lines..\n        \"\"\"\n        for advice in self:\n            if not advice.line_ids:\n                raise UserError(_('You can not confirm Payment advice without advice lines.'))\n            date = fields.Date.from_string(fields.Date.today())\n            advice_year = date.strftime('%m') + '-' + date.strftime('%Y')\n            number = self.env['ir.sequence'].next_by_code('payment.advice')\n            advice.write({\n                'number': 'PAY' + '/' + advice_year + '/' + number,\n                'state': 'confirm',\n            })\n\n    @api.multi\n    def set_to_draft(self):\n        \"\"\"Resets Advice as draft.\n        \"\"\"\n        self.write({'state': 'draft'})\n\n    @api.multi\n    def cancel_sheet(self):\n        \"\"\"Marks Advice as cancelled.\n        \"\"\"\n        self.write({'state': 'cancel'})\n\n    @api.onchange('company_id')\n    def _onchange_company_id(self):\n        self.bank_id = self.company_id.partner_id.bank_ids and self.company_id.partner_id.bank_ids[0].bank_id.id or False\n\n\nclass HrPayslipRun(models.Model):\n    _inherit = 'hr.payslip.run'\n    _description = 'Payslip Batches'\n\n    available_advice = fields.Boolean(string='Made Payment Advice?',\n                                       help='If this box is checked which means that Payment Advice exists for current batch',\n                                       readonly=False, copy=False)\n\n    @api.multi\n    def draft_payslip_run(self):\n        super(HrPayslipRun, self).draft_payslip_run()\n        self.write({'available_advice': False})\n\n    @api.multi\n    def create_advice(self):\n        for run in self:\n            if run.available_advice:\n                raise UserError(_(\"Payment advice already exists for %s, 'Set to Draft' to create a new advice.\") % (run.name,))\n            company = self.env.user.company_id\n            advice = self.env['hr.payroll.advice'].create({\n                        'batch_id': run.id,\n                        'company_id': company.id,\n                        'name': run.name,\n                        'date': run.date_end,\n                        'bank_id': company.partner_id.bank_ids and company.partner_id.bank_ids[0].id or False\n                    })\n            for slip in run.slip_ids:\n                # TODO is it necessary to interleave the calls ?\n                slip.action_payslip_done()\n                if not slip.employee_id.bank_account_id or not slip.employee_id.bank_account_id.acc_number:\n                    raise UserError(_('Please define bank account for the %s employee') % (slip.employee_id.name))\n                payslip_line = self.env['hr.payslip.line'].search([('slip_id', '=', slip.id), ('code', '=', 'NET')], limit=1)\n                if payslip_line:\n                    self.env['hr.payroll.advice.line'].create({\n                        'advice_id': advice.id,\n                        'name': slip.employee_id.bank_account_id.acc_number,\n                        'ifsc_code': slip.employee_id.bank_account_id.bank_bic or '',\n                        'employee_id': slip.employee_id.id,\n                        'bysal': payslip_line.total\n                    })\n        self.write({'available_advice': True})\n\n\nclass HrPayrollAdviceLine(models.Model):\n    '''\n    Bank Advice Lines\n    '''\n    _name = 'hr.payroll.advice.line'\n    _description = 'Bank Advice Lines'\n\n    advice_id = fields.Many2one('hr.payroll.advice', string='Bank Advice')\n    name = fields.Char('Bank Account No.', required=True)\n    ifsc_code = fields.Char(string='IFSC Code')\n    employee_id = fields.Many2one('hr.employee', string='Employee', required=True)\n    bysal = fields.Float(string='By Salary', digits=dp.get_precision('Payroll'))\n    debit_credit = fields.Char(string='C/D', default='C')\n    company_id = fields.Many2one('res.company', related='advice_id.company_id', string='Company', store=True)\n    ifsc = fields.Boolean(related='advice_id.neft', string='IFSC')\n\n    @api.onchange('employee_id')\n    def onchange_employee_id(self):\n        self.name = self.employee_id.bank_account_id.acc_number\n        self.ifsc_code = self.employee_id.bank_account_id.bank_bic or ''\n\n\nclass HrPayslip(models.Model):\n    '''\n    Employee Pay Slip\n    '''\n    _inherit = 'hr.payslip'\n    _description = 'Pay Slips'\n\n    advice_id = fields.Many2one('hr.payroll.advice', string='Bank Advice', copy=False)\n\n\nclass ResCompany(models.Model):\n    _inherit = 'res.company'\n\n    dearness_allowance = fields.Boolean(string='Dearness Allowance', default=True,\n        help='Check this box if your company provide Dearness Allowance to employee')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "l10n_in_hr_payroll.py", "id": "e9c519f770d17bdb231a46b8874dff0a", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/l10n_in_hr_payroll/models/l10n_in_hr_payroll.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}