{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_duration,\n)\n\n\nclass YouJizzIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:\\w+\\.)?youjizz\\.com/videos/(?:[^/\n    _TESTS = [{\n        'url': 'http://www.youjizz.com/videos/zeichentrick-1-2189178.html',\n        'md5': 'b1e1dfaa8bb9537d8b84eeda9cf4acf4',\n        'info_dict': {\n            'id': '2189178',\n            'ext': 'mp4',\n            'title': 'Zeichentrick 1',\n            'age_limit': 18,\n            'duration': 2874,\n        }\n    }, {\n        'url': 'http://www.youjizz.com/videos/-2189178.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.youjizz.com/videos/embed/31991001',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('embed_id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            r'<title>(.+?)</title>', webpage, 'title')\n\n        formats = []\n\n        encodings = self._parse_json(\n            self._search_regex(\n                r'encodings\\s*=\\s*(\\[.+?\\]);\\n', webpage, 'encodings',\n                default='[]'),\n            video_id, fatal=False)\n        for encoding in encodings:\n            if not isinstance(encoding, dict):\n                continue\n            format_url = encoding.get('filename')\n            if not isinstance(format_url, compat_str):\n                continue\n            if determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                format_id = encoding.get('name') or encoding.get('quality')\n                height = int_or_none(self._search_regex(\n                    r'^(\\d+)[pP]', format_id, 'height', default=None))\n                formats.append({\n                    'url': format_url,\n                    'format_id': format_id,\n                    'height': height,\n                })\n\n        if formats:\n            info_dict = {\n                'formats': formats,\n            }\n        else:\n            \n            webpage = webpage.replace('\"controls', '\" controls')\n            info_dict = self._parse_html5_media_entries(\n                url, webpage, video_id)[0]\n\n        duration = parse_duration(self._search_regex(\n            r'<strong>Runtime:</strong>([^<]+)', webpage, 'duration',\n            default=None))\n        uploader = self._search_regex(\n            r'<strong>Uploaded By:.*?<a[^>]*>([^<]+)', webpage, 'uploader',\n            default=None)\n\n        info_dict.update({\n            'id': video_id,\n            'title': title,\n            'age_limit': self._rta_search(webpage),\n            'duration': duration,\n            'uploader': uploader,\n        })\n\n        return info_dict\n", "comments": "#?]*-(?P<id>\\d+)\\.html|embed/(?P<embed_id>\\d+))'\n# YouJizz's HTML5 player has invalid HTML\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_duration,\n)\n\n\nclass YouJizzIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:\\w+\\.)?youjizz\\.com/videos/(?:[^/#?]*-(?P<id>\\d+)\\.html|embed/(?P<embed_id>\\d+))'\n    _TESTS = [{\n        'url': 'http://www.youjizz.com/videos/zeichentrick-1-2189178.html',\n        'md5': 'b1e1dfaa8bb9537d8b84eeda9cf4acf4',\n        'info_dict': {\n            'id': '2189178',\n            'ext': 'mp4',\n            'title': 'Zeichentrick 1',\n            'age_limit': 18,\n            'duration': 2874,\n        }\n    }, {\n        'url': 'http://www.youjizz.com/videos/-2189178.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.youjizz.com/videos/embed/31991001',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('embed_id')\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            r'<title>(.+?)</title>', webpage, 'title')\n\n        formats = []\n\n        encodings = self._parse_json(\n            self._search_regex(\n                r'encodings\\s*=\\s*(\\[.+?\\]);\\n', webpage, 'encodings',\n                default='[]'),\n            video_id, fatal=False)\n        for encoding in encodings:\n            if not isinstance(encoding, dict):\n                continue\n            format_url = encoding.get('filename')\n            if not isinstance(format_url, compat_str):\n                continue\n            if determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                format_id = encoding.get('name') or encoding.get('quality')\n                height = int_or_none(self._search_regex(\n                    r'^(\\d+)[pP]', format_id, 'height', default=None))\n                formats.append({\n                    'url': format_url,\n                    'format_id': format_id,\n                    'height': height,\n                })\n\n        if formats:\n            info_dict = {\n                'formats': formats,\n            }\n        else:\n            # YouJizz's HTML5 player has invalid HTML\n            webpage = webpage.replace('\"controls', '\" controls')\n            info_dict = self._parse_html5_media_entries(\n                url, webpage, video_id)[0]\n\n        duration = parse_duration(self._search_regex(\n            r'<strong>Runtime:</strong>([^<]+)', webpage, 'duration',\n            default=None))\n        uploader = self._search_regex(\n            r'<strong>Uploaded By:.*?<a[^>]*>([^<]+)', webpage, 'uploader',\n            default=None)\n\n        info_dict.update({\n            'id': video_id,\n            'title': title,\n            'age_limit': self._rta_search(webpage),\n            'duration': duration,\n            'uploader': uploader,\n        })\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "youjizz.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/youjizz.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}