{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n)\n\n\nclass NewstubeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?newstube\\.ru/media/(?P<id>.+)'\n    _TEST = {\n        'url': 'http://www.newstube.ru/media/telekanal-cnn-peremestil-gorod-slavyansk-v-krym',\n        'md5': '801eef0c2a9f4089fa04e4fe3533abdc',\n        'info_dict': {\n            'id': '728e0ef2-e187-4012-bac0-5a081fdcb1f6',\n            'ext': 'mp4',\n            'title': '\u0422\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b CNN \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u043b \u0433\u043e\u0440\u043e\u0434 \u0421\u043b\u0430\u0432\u044f\u043d\u0441\u043a \u0432 \u041a\u0440\u044b\u043c',\n            'description': 'md5:419a8c9f03442bc0b0a794d689360335',\n            'duration': 31.05,\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        page = self._download_webpage(url, video_id, 'Downloading page')\n\n        video_guid = self._html_search_regex(\n            r'<meta property=\"og:video:url\" content=\"https?://(?:www\\.)?newstube\\.ru/freshplayer\\.swf\\?guid=(?P<guid>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})',\n            page, 'video GUID')\n\n        player = self._download_xml(\n            'http://p.newstube.ru/v2/player.asmx/GetAutoPlayInfo6?state=&url=%s&sessionId=&id=%s&placement=profile&location=n2' % (url, video_guid),\n            video_guid, 'Downloading player XML')\n\n        def ns(s):\n            return s.replace('/', '/%(ns)s') % {'ns': '{http://app1.newstube.ru/N2SiteWS/player.asmx}'}\n\n        error_message = player.find(ns('./ErrorMessage'))\n        if error_message is not None:\n            raise ExtractorError('%s returned error: %s' % (self.IE_NAME, error_message.text), expected=True)\n\n        session_id = player.find(ns('./SessionId')).text\n        media_info = player.find(ns('./Medias/MediaInfo'))\n        title = media_info.find(ns('./Name')).text\n        description = self._og_search_description(page)\n        thumbnail = media_info.find(ns('./KeyFrame')).text\n        duration = int(media_info.find(ns('./Duration')).text) / 1000.0\n\n        formats = []\n\n        for stream_info in media_info.findall(ns('./Streams/StreamInfo')):\n            media_location = stream_info.find(ns('./MediaLocation'))\n            if media_location is None:\n                continue\n\n            server = media_location.find(ns('./Server')).text\n            app = media_location.find(ns('./App')).text\n            media_id = stream_info.find(ns('./Id')).text\n            name = stream_info.find(ns('./Name')).text\n            width = int(stream_info.find(ns('./Width')).text)\n            height = int(stream_info.find(ns('./Height')).text)\n\n            formats.append({\n                'url': 'rtmp://%s/%s' % (server, app),\n                'app': app,\n                'play_path': '01/%s' % video_guid.upper(),\n                'rtmp_conn': ['S:%s' % session_id, 'S:%s' % media_id, 'S:n2'],\n                'page_url': url,\n                'ext': 'flv',\n                'format_id': 'rtmp' + ('-%s' % name if name else ''),\n                'width': width,\n                'height': height,\n            })\n\n        sources_data = self._download_json(\n            'http://www.newstube.ru/player2/getsources?guid=%s' % video_guid,\n            video_guid, fatal=False)\n        if sources_data:\n            for source in sources_data.get('Sources', []):\n                source_url = source.get('Src')\n                if not source_url:\n                    continue\n                height = int_or_none(source.get('Height'))\n                f = {\n                    'format_id': 'http' + ('-%dp' % height if height else ''),\n                    'url': source_url,\n                    'width': int_or_none(source.get('Width')),\n                    'height': height,\n                }\n                source_type = source.get('Type')\n                if source_type:\n                    mobj = re.search(r'codecs=\"([^,]+),\\s*([^\"]+)\"', source_type)\n                    if mobj:\n                        vcodec, acodec = mobj.groups()\n                        f.update({\n                            'vcodec': vcodec,\n                            'acodec': acodec,\n                        })\n                formats.append(f)\n\n        self._check_formats(formats, video_guid)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_guid,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n)\n\n\nclass NewstubeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?newstube\\.ru/media/(?P<id>.+)'\n    _TEST = {\n        'url': 'http://www.newstube.ru/media/telekanal-cnn-peremestil-gorod-slavyansk-v-krym',\n        'md5': '801eef0c2a9f4089fa04e4fe3533abdc',\n        'info_dict': {\n            'id': '728e0ef2-e187-4012-bac0-5a081fdcb1f6',\n            'ext': 'mp4',\n            'title': '\u0422\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b CNN \u043f\u0435\u0440\u0435\u043c\u0435\u0441\u0442\u0438\u043b \u0433\u043e\u0440\u043e\u0434 \u0421\u043b\u0430\u0432\u044f\u043d\u0441\u043a \u0432 \u041a\u0440\u044b\u043c',\n            'description': 'md5:419a8c9f03442bc0b0a794d689360335',\n            'duration': 31.05,\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        page = self._download_webpage(url, video_id, 'Downloading page')\n\n        video_guid = self._html_search_regex(\n            r'<meta property=\"og:video:url\" content=\"https?://(?:www\\.)?newstube\\.ru/freshplayer\\.swf\\?guid=(?P<guid>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})',\n            page, 'video GUID')\n\n        player = self._download_xml(\n            'http://p.newstube.ru/v2/player.asmx/GetAutoPlayInfo6?state=&url=%s&sessionId=&id=%s&placement=profile&location=n2' % (url, video_guid),\n            video_guid, 'Downloading player XML')\n\n        def ns(s):\n            return s.replace('/', '/%(ns)s') % {'ns': '{http://app1.newstube.ru/N2SiteWS/player.asmx}'}\n\n        error_message = player.find(ns('./ErrorMessage'))\n        if error_message is not None:\n            raise ExtractorError('%s returned error: %s' % (self.IE_NAME, error_message.text), expected=True)\n\n        session_id = player.find(ns('./SessionId')).text\n        media_info = player.find(ns('./Medias/MediaInfo'))\n        title = media_info.find(ns('./Name')).text\n        description = self._og_search_description(page)\n        thumbnail = media_info.find(ns('./KeyFrame')).text\n        duration = int(media_info.find(ns('./Duration')).text) / 1000.0\n\n        formats = []\n\n        for stream_info in media_info.findall(ns('./Streams/StreamInfo')):\n            media_location = stream_info.find(ns('./MediaLocation'))\n            if media_location is None:\n                continue\n\n            server = media_location.find(ns('./Server')).text\n            app = media_location.find(ns('./App')).text\n            media_id = stream_info.find(ns('./Id')).text\n            name = stream_info.find(ns('./Name')).text\n            width = int(stream_info.find(ns('./Width')).text)\n            height = int(stream_info.find(ns('./Height')).text)\n\n            formats.append({\n                'url': 'rtmp://%s/%s' % (server, app),\n                'app': app,\n                'play_path': '01/%s' % video_guid.upper(),\n                'rtmp_conn': ['S:%s' % session_id, 'S:%s' % media_id, 'S:n2'],\n                'page_url': url,\n                'ext': 'flv',\n                'format_id': 'rtmp' + ('-%s' % name if name else ''),\n                'width': width,\n                'height': height,\n            })\n\n        sources_data = self._download_json(\n            'http://www.newstube.ru/player2/getsources?guid=%s' % video_guid,\n            video_guid, fatal=False)\n        if sources_data:\n            for source in sources_data.get('Sources', []):\n                source_url = source.get('Src')\n                if not source_url:\n                    continue\n                height = int_or_none(source.get('Height'))\n                f = {\n                    'format_id': 'http' + ('-%dp' % height if height else ''),\n                    'url': source_url,\n                    'width': int_or_none(source.get('Width')),\n                    'height': height,\n                }\n                source_type = source.get('Type')\n                if source_type:\n                    mobj = re.search(r'codecs=\"([^,]+),\\s*([^\"]+)\"', source_type)\n                    if mobj:\n                        vcodec, acodec = mobj.groups()\n                        f.update({\n                            'vcodec': vcodec,\n                            'acodec': acodec,\n                        })\n                formats.append(f)\n\n        self._check_formats(formats, video_guid)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_guid,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "newstube.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/newstube.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}