{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Dag Wieers <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: wakeonlan\nversion_added: '2.2'\nshort_description: Send a magic Wake-on-LAN (WoL) broadcast packet\ndescription:\n- The C(wakeonlan) module sends magic Wake-on-LAN (WoL) broadcast packets.\noptions:\n  mac:\n    description:\n    - MAC address to send Wake-on-LAN broadcast packet for.\n    required: true\n  broadcast:\n    description:\n    - Network broadcast address to use for broadcasting magic Wake-on-LAN packet.\n    default: 255.255.255.255\n  port:\n    description:\n    - UDP port to use for magic Wake-on-LAN packet.\n    default: 7\nauthor:\n- Dag Wieers (@dagwieers)\ntodo:\n  - Add arping support to check whether the system is up (before and after)\n  - Enable check-mode support (when we have arping support)\n  - Does not have SecureOn password support\nnotes:\n  - This module sends a magic packet, without knowing whether it worked\n  - Only works if the target system was properly configured for Wake-on-LAN (in the BIOS and/or the OS)\n  - Some BIOSes have a different (configurable) Wake-on-LAN boot order (i.e. PXE first).\n'''\n\nEXAMPLES = r'''\n- name: Send a magic Wake-on-LAN packet to 00:00:5E:00:53:66\n  wakeonlan:\n    mac: '00:00:5E:00:53:66'\n    broadcast: 192.0.2.23\n  delegate_to: localhost\n\n- wakeonlan:\n    mac: 00:00:5E:00:53:66\n    port: 9\n  delegate_to: localhost\n'''\n\nRETURN = r'''\n\n'''\nimport socket\nimport struct\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\ndef wakeonlan(module, mac, broadcast, port):\n    \n\n    mac_orig = mac\n\n    \n    if len(mac) == 12 + 5:\n        mac = mac.replace(mac[2], '')\n\n    \n    if len(mac) != 12:\n        module.fail_json(msg=\"Incorrect MAC address length: %s\" % mac_orig)\n\n    \n    try:\n        int(mac, 16)\n    except ValueError:\n        module.fail_json(msg=\"Incorrect MAC address format: %s\" % mac_orig)\n\n    \n    data = b''\n    padding = ''.join(['FFFFFFFFFFFF', mac * 20])\n    for i in range(0, len(padding), 2):\n        data = b''.join([data, struct.pack('B', int(padding[i: i + 2], 16))])\n\n    \n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n\n    if not module.check_mode:\n\n        try:\n            sock.sendto(data, (broadcast, port))\n        except socket.error as e:\n            sock.close()\n            module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n    sock.close()\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            mac=dict(type='str', required=True),\n            broadcast=dict(type='str', default='255.255.255.255'),\n            port=dict(type='int', default=7),\n        ),\n        supports_check_mode=True,\n    )\n\n    mac = module.params['mac']\n    broadcast = module.params['broadcast']\n    port = module.params['port']\n\n    wakeonlan(module, mac, broadcast, port)\n\n    module.exit_json(changed=True)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "    send magic wake lan packet               module  wakeonlan version added   2 2  short description  send magic wake lan (wol) broadcast packet description    the c(wakeonlan) module sends magic wake lan (wol) broadcast packets  options    mac      description        mac address send wake lan broadcast packet      required  true   broadcast      description        network broadcast address use broadcasting magic wake lan packet      default  255 255 255 255   port      description        udp port use magic wake lan packet      default  7 author    dag wieers ( dagwieers) todo      add arping support check whether system (before after)     enable check mode support (when arping support)     does secureon password support notes      this module sends magic packet  without knowing whether worked     only works target system properly configured wake lan (in bios os)     some bioses different (configurable) wake lan boot order (i e  pxe first)       examples   r      name  send magic wake lan packet 00 00 5e 00 53 66   wakeonlan      mac   00 00 5e 00 53 66      broadcast  192 0 2 23   delegate  localhost    wakeonlan      mac  00 00 5e 00 53 66     port  9   delegate  localhost      return   r      default return values         usr bin python        coding  utf 8        (c) 2016  dag wieers  dag wieers com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    default return values    remove possible separator mac address    if end 12 hexadecimal characters  fail    test converts integer  otherwise fail    create payload magic packet    broadcast payload network ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Dag Wieers <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: wakeonlan\nversion_added: '2.2'\nshort_description: Send a magic Wake-on-LAN (WoL) broadcast packet\ndescription:\n- The C(wakeonlan) module sends magic Wake-on-LAN (WoL) broadcast packets.\noptions:\n  mac:\n    description:\n    - MAC address to send Wake-on-LAN broadcast packet for.\n    required: true\n  broadcast:\n    description:\n    - Network broadcast address to use for broadcasting magic Wake-on-LAN packet.\n    default: 255.255.255.255\n  port:\n    description:\n    - UDP port to use for magic Wake-on-LAN packet.\n    default: 7\nauthor:\n- Dag Wieers (@dagwieers)\ntodo:\n  - Add arping support to check whether the system is up (before and after)\n  - Enable check-mode support (when we have arping support)\n  - Does not have SecureOn password support\nnotes:\n  - This module sends a magic packet, without knowing whether it worked\n  - Only works if the target system was properly configured for Wake-on-LAN (in the BIOS and/or the OS)\n  - Some BIOSes have a different (configurable) Wake-on-LAN boot order (i.e. PXE first).\n'''\n\nEXAMPLES = r'''\n- name: Send a magic Wake-on-LAN packet to 00:00:5E:00:53:66\n  wakeonlan:\n    mac: '00:00:5E:00:53:66'\n    broadcast: 192.0.2.23\n  delegate_to: localhost\n\n- wakeonlan:\n    mac: 00:00:5E:00:53:66\n    port: 9\n  delegate_to: localhost\n'''\n\nRETURN = r'''\n# Default return values\n'''\nimport socket\nimport struct\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\ndef wakeonlan(module, mac, broadcast, port):\n    \"\"\" Send a magic Wake-on-LAN packet. \"\"\"\n\n    mac_orig = mac\n\n    # Remove possible separator from MAC address\n    if len(mac) == 12 + 5:\n        mac = mac.replace(mac[2], '')\n\n    # If we don't end up with 12 hexadecimal characters, fail\n    if len(mac) != 12:\n        module.fail_json(msg=\"Incorrect MAC address length: %s\" % mac_orig)\n\n    # Test if it converts to an integer, otherwise fail\n    try:\n        int(mac, 16)\n    except ValueError:\n        module.fail_json(msg=\"Incorrect MAC address format: %s\" % mac_orig)\n\n    # Create payload for magic packet\n    data = b''\n    padding = ''.join(['FFFFFFFFFFFF', mac * 20])\n    for i in range(0, len(padding), 2):\n        data = b''.join([data, struct.pack('B', int(padding[i: i + 2], 16))])\n\n    # Broadcast payload to network\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n\n    if not module.check_mode:\n\n        try:\n            sock.sendto(data, (broadcast, port))\n        except socket.error as e:\n            sock.close()\n            module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n    sock.close()\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            mac=dict(type='str', required=True),\n            broadcast=dict(type='str', default='255.255.255.255'),\n            port=dict(type='int', default=7),\n        ),\n        supports_check_mode=True,\n    )\n\n    mac = module.params['mac']\n    broadcast = module.params['broadcast']\n    port = module.params['port']\n\n    wakeonlan(module, mac, broadcast, port)\n\n    module.exit_json(changed=True)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "wakeonlan.py", "id": "655b22860e0afd180c54f6ecfb45a2fe", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/wakeonlan.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}