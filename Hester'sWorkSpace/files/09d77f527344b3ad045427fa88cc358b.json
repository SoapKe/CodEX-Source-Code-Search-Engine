{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    unified_strdate,\n)\n\n\nclass WSJIE(InfoExtractor):\n    _VALID_URL = r\n    IE_DESC = 'Wall Street Journal'\n    _TESTS = [{\n        'url': 'http://video-api.wsj.com/api-video/player/iframe.html?guid=1BD01A4C-BFE8-40A5-A42F-8A8AF9898B1A',\n        'md5': 'e230a5bb249075e40793b655a54a02e4',\n        'info_dict': {\n            'id': '1BD01A4C-BFE8-40A5-A42F-8A8AF9898B1A',\n            'ext': 'mp4',\n            'upload_date': '20150202',\n            'uploader_id': 'jdesai',\n            'creator': 'jdesai',\n            'categories': list,  \n            'duration': 90,\n            'title': 'Bills Coach Rex Ryan Updates His Old Jets Tattoo',\n        },\n    }, {\n        'url': 'http://www.wsj.com/video/can-alphabet-build-a-smarter-city/359DDAA8-9AC1-489C-82E6-0429C1E430E0.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.barrons.com/video/capitalism-deserves-more-respect-from-millennials/F301217E-6F46-43AE-B8D2-B7180D642EE9.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.wsj.com/video/series/a-brief-history-of/the-modern-cell-carrier-how-we-got-here/980E2187-401D-48A1-B82B-1486CEE06CB9',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        info = self._download_json(\n            'http://video-api.wsj.com/api-video/find_all_videos.asp', video_id,\n            query={\n                'type': 'guid',\n                'count': 1,\n                'query': video_id,\n                'fields': ','.join((\n                    'type', 'hls', 'videoMP4List', 'thumbnailList', 'author',\n                    'description', 'name', 'duration', 'videoURL', 'titletag',\n                    'formattedCreationDate', 'keywords', 'editor')),\n            })['items'][0]\n        title = info.get('name', info.get('titletag'))\n\n        formats = []\n\n        f4m_url = info.get('videoURL')\n        if f4m_url:\n            formats.extend(self._extract_f4m_formats(\n                f4m_url, video_id, f4m_id='hds', fatal=False))\n\n        m3u8_url = info.get('hls')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                info['hls'], video_id, ext='mp4',\n                entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n\n        for v in info.get('videoMP4List', []):\n            mp4_url = v.get('url')\n            if not mp4_url:\n                continue\n            tbr = int_or_none(v.get('bitrate'))\n            formats.append({\n                'url': mp4_url,\n                'format_id': 'http' + ('-%d' % tbr if tbr else ''),\n                'tbr': tbr,\n                'width': int_or_none(v.get('width')),\n                'height': int_or_none(v.get('height')),\n                'fps': float_or_none(v.get('fps')),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            \n            'thumbnails': info.get('thumbnailList'),\n            'creator': info.get('author'),\n            'uploader_id': info.get('editor'),\n            'duration': int_or_none(info.get('duration')),\n            'upload_date': unified_strdate(info.get(\n                'formattedCreationDate'), day_first=False),\n            'title': title,\n            'categories': info.get('keywords'),\n        }\n\n\nclass WSJArticleIE(InfoExtractor):\n    _VALID_URL = r'(?i)https?://(?:www\\.)?wsj\\.com/articles/(?P<id>[^/?\n    _TEST = {\n        'url': 'https://www.wsj.com/articles/dont-like-china-no-pandas-for-you-1490366939?',\n        'info_dict': {\n            'id': '4B13FA62-1D8C-45DB-8EA1-4105CB20B362',\n            'ext': 'mp4',\n            'upload_date': '20170221',\n            'uploader_id': 'ralcaraz',\n            'title': 'Bao Bao the Panda Leaves for China',\n        }\n    }\n\n    def _real_extract(self, url):\n        article_id = self._match_id(url)\n        webpage = self._download_webpage(url, article_id)\n        video_id = self._search_regex(\n            r'data-src=[\"\\']([a-fA-F0-9-]{36})', webpage, 'video id')\n        return self.url_result('wsj:%s' % video_id, WSJIE.ie_key(), video_id)\n", "comments": "(?x)\n                        (?:\n                            https?://video-api\\.wsj\\.com/api-video/player/iframe\\.html\\?.*?\\bguid=|\n                            https?://(?:www\\.)?(?:wsj|barrons)\\.com/video/(?:[^/]+/)+|\n                            wsj:\n                        )\n                        (?P<id>[a-fA-F0-9-]{36})\n                    \n \n# coding: utf-8\n# a long list\n# Thumbnails are conveniently in the correct format already\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    unified_strdate,\n)\n\n\nclass WSJIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                        (?:\n                            https?://video-api\\.wsj\\.com/api-video/player/iframe\\.html\\?.*?\\bguid=|\n                            https?://(?:www\\.)?(?:wsj|barrons)\\.com/video/(?:[^/]+/)+|\n                            wsj:\n                        )\n                        (?P<id>[a-fA-F0-9-]{36})\n                    '''\n    IE_DESC = 'Wall Street Journal'\n    _TESTS = [{\n        'url': 'http://video-api.wsj.com/api-video/player/iframe.html?guid=1BD01A4C-BFE8-40A5-A42F-8A8AF9898B1A',\n        'md5': 'e230a5bb249075e40793b655a54a02e4',\n        'info_dict': {\n            'id': '1BD01A4C-BFE8-40A5-A42F-8A8AF9898B1A',\n            'ext': 'mp4',\n            'upload_date': '20150202',\n            'uploader_id': 'jdesai',\n            'creator': 'jdesai',\n            'categories': list,  # a long list\n            'duration': 90,\n            'title': 'Bills Coach Rex Ryan Updates His Old Jets Tattoo',\n        },\n    }, {\n        'url': 'http://www.wsj.com/video/can-alphabet-build-a-smarter-city/359DDAA8-9AC1-489C-82E6-0429C1E430E0.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.barrons.com/video/capitalism-deserves-more-respect-from-millennials/F301217E-6F46-43AE-B8D2-B7180D642EE9.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.wsj.com/video/series/a-brief-history-of/the-modern-cell-carrier-how-we-got-here/980E2187-401D-48A1-B82B-1486CEE06CB9',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        info = self._download_json(\n            'http://video-api.wsj.com/api-video/find_all_videos.asp', video_id,\n            query={\n                'type': 'guid',\n                'count': 1,\n                'query': video_id,\n                'fields': ','.join((\n                    'type', 'hls', 'videoMP4List', 'thumbnailList', 'author',\n                    'description', 'name', 'duration', 'videoURL', 'titletag',\n                    'formattedCreationDate', 'keywords', 'editor')),\n            })['items'][0]\n        title = info.get('name', info.get('titletag'))\n\n        formats = []\n\n        f4m_url = info.get('videoURL')\n        if f4m_url:\n            formats.extend(self._extract_f4m_formats(\n                f4m_url, video_id, f4m_id='hds', fatal=False))\n\n        m3u8_url = info.get('hls')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                info['hls'], video_id, ext='mp4',\n                entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n\n        for v in info.get('videoMP4List', []):\n            mp4_url = v.get('url')\n            if not mp4_url:\n                continue\n            tbr = int_or_none(v.get('bitrate'))\n            formats.append({\n                'url': mp4_url,\n                'format_id': 'http' + ('-%d' % tbr if tbr else ''),\n                'tbr': tbr,\n                'width': int_or_none(v.get('width')),\n                'height': int_or_none(v.get('height')),\n                'fps': float_or_none(v.get('fps')),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            # Thumbnails are conveniently in the correct format already\n            'thumbnails': info.get('thumbnailList'),\n            'creator': info.get('author'),\n            'uploader_id': info.get('editor'),\n            'duration': int_or_none(info.get('duration')),\n            'upload_date': unified_strdate(info.get(\n                'formattedCreationDate'), day_first=False),\n            'title': title,\n            'categories': info.get('keywords'),\n        }\n\n\nclass WSJArticleIE(InfoExtractor):\n    _VALID_URL = r'(?i)https?://(?:www\\.)?wsj\\.com/articles/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://www.wsj.com/articles/dont-like-china-no-pandas-for-you-1490366939?',\n        'info_dict': {\n            'id': '4B13FA62-1D8C-45DB-8EA1-4105CB20B362',\n            'ext': 'mp4',\n            'upload_date': '20170221',\n            'uploader_id': 'ralcaraz',\n            'title': 'Bao Bao the Panda Leaves for China',\n        }\n    }\n\n    def _real_extract(self, url):\n        article_id = self._match_id(url)\n        webpage = self._download_webpage(url, article_id)\n        video_id = self._search_regex(\n            r'data-src=[\"\\']([a-fA-F0-9-]{36})', webpage, 'video id')\n        return self.url_result('wsj:%s' % video_id, WSJIE.ie_key(), video_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "wsj.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/wsj.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}