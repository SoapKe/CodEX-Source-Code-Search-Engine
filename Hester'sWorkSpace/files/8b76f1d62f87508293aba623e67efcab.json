{"author": "powerline", "code": "\n\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport sys\nimport socket\nimport errno\nimport os\n\ntry:\n\tfrom posix import environ\nexcept ImportError:\n\tfrom os import environ\n\n\nsys.path.pop(0)\n\ntry:\n\tfrom powerline.lib.encoding import get_preferred_output_encoding\nexcept ImportError:\n\tsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(os.path.realpath(__file__)))))\n\tfrom powerline.lib.encoding import get_preferred_output_encoding\n\n\nif len(sys.argv) < 2:\n\tprint('Must provide at least one argument.', file=sys.stderr)\n\traise SystemExit(1)\n\nuse_filesystem = not sys.platform.lower().startswith('linux')\n\nif sys.argv[1] == '--socket':\n\taddress = sys.argv[2]\n\tif not use_filesystem:\n\t\taddress = '\\0' + address\n\tdel sys.argv[1:3]\nelse:\n\taddress = ('/tmp/powerline-ipc-%d' if use_filesystem else '\\0powerline-ipc-%d') % os.getuid()\n\nsock = socket.socket(family=socket.AF_UNIX)\n\n\ndef eintr_retry_call(func, *args, **kwargs):\n\twhile True:\n\t\ttry:\n\t\t\treturn func(*args, **kwargs)\n\t\texcept EnvironmentError as e:\n\t\t\tif getattr(e, 'errno', None) == errno.EINTR:\n\t\t\t\tcontinue\n\t\t\traise\n\n\ntry:\n\teintr_retry_call(sock.connect, address)\nexcept Exception:\n\t\n\targs = ['powerline-render'] + sys.argv[1:]\n\tos.execvp('powerline-render', args)\n\nfenc = get_preferred_output_encoding()\n\n\ndef tobytes(s):\n\tif isinstance(s, bytes):\n\t\treturn s\n\telse:\n\t\treturn s.encode(fenc)\n\n\nargs = [tobytes('%x' % (len(sys.argv) - 1))]\nargs.extend((tobytes(s) for s in sys.argv[1:]))\n\n\ntry:\n\tcwd = os.getcwd()\nexcept EnvironmentError:\n\tpass\nelse:\n\tif not isinstance(cwd, bytes):\n\t\tcwd = cwd.encode(fenc)\n\targs.append(cwd)\n\n\nargs.extend((tobytes(k) + b'=' + tobytes(v) for k, v in environ.items()))\n\nEOF = b'\\0\\0'\n\nfor a in args:\n\teintr_retry_call(sock.sendall, a + b'\\0')\n\neintr_retry_call(sock.sendall, EOF)\n\nreceived = []\nwhile True:\n\tr = sock.recv(4096)\n\tif not r:\n\t\tbreak\n\treceived.append(r)\n\nsock.close()\n\nif sys.version_info < (3,):\n\tsys.stdout.write(b''.join(received))\nelse:\n\tsys.stdout.buffer.write(b''.join(received))\n", "comments": "   usr bin env python    vim fileencoding utf 8 noet    xxx hack importing powerline modules work     run powerline renderer ", "content": "#!/usr/bin/env python\n# vim:fileencoding=utf-8:noet\nfrom __future__ import (unicode_literals, division, absolute_import, print_function)\n\nimport sys\nimport socket\nimport errno\nimport os\n\ntry:\n\tfrom posix import environ\nexcept ImportError:\n\tfrom os import environ\n\n# XXX Hack for importing powerline modules to work.\nsys.path.pop(0)\n\ntry:\n\tfrom powerline.lib.encoding import get_preferred_output_encoding\nexcept ImportError:\n\tsys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(os.path.realpath(__file__)))))\n\tfrom powerline.lib.encoding import get_preferred_output_encoding\n\n\nif len(sys.argv) < 2:\n\tprint('Must provide at least one argument.', file=sys.stderr)\n\traise SystemExit(1)\n\nuse_filesystem = not sys.platform.lower().startswith('linux')\n\nif sys.argv[1] == '--socket':\n\taddress = sys.argv[2]\n\tif not use_filesystem:\n\t\taddress = '\\0' + address\n\tdel sys.argv[1:3]\nelse:\n\taddress = ('/tmp/powerline-ipc-%d' if use_filesystem else '\\0powerline-ipc-%d') % os.getuid()\n\nsock = socket.socket(family=socket.AF_UNIX)\n\n\ndef eintr_retry_call(func, *args, **kwargs):\n\twhile True:\n\t\ttry:\n\t\t\treturn func(*args, **kwargs)\n\t\texcept EnvironmentError as e:\n\t\t\tif getattr(e, 'errno', None) == errno.EINTR:\n\t\t\t\tcontinue\n\t\t\traise\n\n\ntry:\n\teintr_retry_call(sock.connect, address)\nexcept Exception:\n\t# Run the powerline renderer\n\targs = ['powerline-render'] + sys.argv[1:]\n\tos.execvp('powerline-render', args)\n\nfenc = get_preferred_output_encoding()\n\n\ndef tobytes(s):\n\tif isinstance(s, bytes):\n\t\treturn s\n\telse:\n\t\treturn s.encode(fenc)\n\n\nargs = [tobytes('%x' % (len(sys.argv) - 1))]\nargs.extend((tobytes(s) for s in sys.argv[1:]))\n\n\ntry:\n\tcwd = os.getcwd()\nexcept EnvironmentError:\n\tpass\nelse:\n\tif not isinstance(cwd, bytes):\n\t\tcwd = cwd.encode(fenc)\n\targs.append(cwd)\n\n\nargs.extend((tobytes(k) + b'=' + tobytes(v) for k, v in environ.items()))\n\nEOF = b'\\0\\0'\n\nfor a in args:\n\teintr_retry_call(sock.sendall, a + b'\\0')\n\neintr_retry_call(sock.sendall, EOF)\n\nreceived = []\nwhile True:\n\tr = sock.recv(4096)\n\tif not r:\n\t\tbreak\n\treceived.append(r)\n\nsock.close()\n\nif sys.version_info < (3,):\n\tsys.stdout.write(b''.join(received))\nelse:\n\tsys.stdout.buffer.write(b''.join(received))\n", "description": "Powerline is a statusline plugin for vim, and provides statuslines and prompts for several other applications, including zsh, bash, tmux, IPython, Awesome and Qtile.", "file_name": "powerline.py", "id": "8b76f1d62f87508293aba623e67efcab", "language": "Python", "project_name": "powerline", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/powerline-powerline/powerline-powerline-d36850f/client/powerline.py", "save_time": "", "source": "", "update_at": "2018-03-18T09:00:33Z", "url": "https://github.com/powerline/powerline", "wiki": false}