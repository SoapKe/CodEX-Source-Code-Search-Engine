{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport base64\nimport datetime\nimport hashlib\nimport json\nimport netrc\nimport os\nimport random\nimport re\nimport socket\nimport sys\nimport time\nimport math\n\nfrom ..compat import (\n    compat_cookiejar,\n    compat_cookies,\n    compat_etree_fromstring,\n    compat_getpass,\n    compat_http_client,\n    compat_os_name,\n    compat_str,\n    compat_urllib_error,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlencode,\n    compat_urllib_request,\n    compat_urlparse,\n    compat_xml_parse_error,\n)\nfrom ..downloader.f4m import (\n    get_base_url,\n    remove_encrypted_media,\n)\nfrom ..utils import (\n    NO_DEFAULT,\n    age_restricted,\n    base_url,\n    bug_reports_message,\n    clean_html,\n    compiled_regex_type,\n    determine_ext,\n    determine_protocol,\n    error_to_compat_str,\n    ExtractorError,\n    extract_attributes,\n    fix_xml_ampersands,\n    float_or_none,\n    GeoRestrictedError,\n    GeoUtils,\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    orderedSet,\n    parse_codecs,\n    parse_duration,\n    parse_iso8601,\n    parse_m3u8_attributes,\n    RegexNotFoundError,\n    sanitized_Request,\n    sanitize_filename,\n    unescapeHTML,\n    unified_strdate,\n    unified_timestamp,\n    update_Request,\n    update_url_query,\n    urljoin,\n    url_basename,\n    xpath_element,\n    xpath_text,\n    xpath_with_ns,\n)\n\n\nclass InfoExtractor(object):\n    \n        raise NotImplementedError('This method must be implemented by subclasses')\n\n    @property\n    def SEARCH_KEY(self):\n        return self._SEARCH_KEY\n", "comments": "Information Extractor class.\n\n    Information extractors are the classes that, given a URL, extract\n    information about the video (or videos) the URL refers to. This\n    information includes the real video URL, the video title, author and\n    others. The information is stored in a dictionary which is then\n    passed to the YoutubeDL. The YoutubeDL processes this\n    information possibly downloading the video to the file system, among\n    other possible outcomes.\n\n    The type field determines the type of the result.\n    By far the most common value (and the default if _type is missing) is\n    \"video\", which indicates a single video.\n\n    For a video, the dictionaries must include the following fields:\n\n    id:             Video identifier.\n    title:          Video title, unescaped.\n\n    Additionally, it must contain either a formats entry or a url one:\n\n    formats:        A list of dictionaries for each format available, ordered\n                    from worst to best quality.\n\n                    Potential fields:\n                    * url        Mandatory. The URL of the video file\n                    * manifest_url\n                                 The URL of the manifest file in case of\n                                 fragmented media (DASH, hls, hds)\n                    * ext        Will be calculated from URL if missing\n                    * format     A human-readable description of the format\n                                 (\"mp4 container with h264/opus\").\n                                 Calculated from the format_id, width, height.\n                                 and format_note fields if missing.\n                    * format_id  A short description of the format\n                                 (\"mp4_h264_opus\" or \"19\").\n                                Technically optional, but strongly recommended.\n                    * format_note Additional info about the format\n                                 (\"3D\" or \"DASH video\")\n                    * width      Width of the video, if known\n                    * height     Height of the video, if known\n                    * resolution Textual description of width and height\n                    * tbr        Average bitrate of audio and video in KBit/s\n                    * abr        Average audio bitrate in KBit/s\n                    * acodec     Name of the audio codec in use\n                    * asr        Audio sampling rate in Hertz\n                    * vbr        Average video bitrate in KBit/s\n                    * fps        Frame rate\n                    * vcodec     Name of the video codec in use\n                    * container  Name of the container format\n                    * filesize   The number of bytes, if known in advance\n                    * filesize_approx  An estimate for the number of bytes\n                    * player_url SWF Player URL (used for rtmpdump).\n                    * protocol   The protocol that will be used for the actual\n                                 download, lower-case.\n                                 \"http\", \"https\", \"rtsp\", \"rtmp\", \"rtmpe\",\n                                 \"m3u8\", \"m3u8_native\" or \"http_dash_segments\".\n                    * fragment_base_url\n                                 Base URL for fragments. Each fragment's path\n                                 value (if present) will be relative to\n                                 this URL.\n                    * fragments  A list of fragments of a fragmented media.\n                                 Each fragment entry must contain either an url\n                                 or a path. If an url is present it should be\n                                 considered by a client. Otherwise both path and\n                                 fragment_base_url must be present. Here is\n                                 the list of all potential fields:\n                                 * \"url\" - fragment's URL\n                                 * \"path\" - fragment's path relative to\n                                            fragment_base_url\n                                 * \"duration\" (optional, int or float)\n                                 * \"filesize\" (optional, int)\n                    * preference Order number of this format. If this field is\n                                 present and not None, the formats get sorted\n                                 by this field, regardless of all other values.\n                                 -1 for default (order by other properties),\n                                 -2 or smaller for less than default.\n                                 < -1000 to hide the format (if there is\n                                    another one which is strictly better)\n                    * language   Language code, e.g. \"de\" or \"en-US\".\n                    * language_preference  Is this in the language mentioned in\n                                 the URL?\n                                 10 if it's what the URL is about,\n                                 -1 for default (don't know),\n                                 -10 otherwise, other values reserved for now.\n                    * quality    Order number of the video quality of this\n                                 format, irrespective of the file format.\n                                 -1 for default (order by other properties),\n                                 -2 or smaller for less than default.\n                    * source_preference  Order number for this video source\n                                  (quality takes higher priority)\n                                 -1 for default (order by other properties),\n                                 -2 or smaller for less than default.\n                    * http_headers  A dictionary of additional HTTP headers\n                                 to add to the request.\n                    * stretched_ratio  If given and not 1, indicates that the\n                                 video's pixels are not square.\n                                 width : height ratio as float.\n                    * no_resume  The server does not support resuming the\n                                 (HTTP or RTMP) download. Boolean.\n                    * downloader_options  A dictionary of downloader options as\n                                 described in FileDownloader\n\n    url:            Final video URL.\n    ext:            Video filename extension.\n    format:         The video format, defaults to ext (used for --get-format)\n    player_url:     SWF Player URL (used for rtmpdump).\n\n    The following fields are optional:\n\n    alt_title:      A secondary title of the video.\n    display_id      An alternative identifier for the video, not necessarily\n                    unique, but available before title. Typically, id is\n                    something like \"4234987\", title \"Dancing naked mole rats\",\n                    and display_id \"dancing-naked-mole-rats\"\n    thumbnails:     A list of dictionaries, with the following entries:\n                        * \"id\" (optional, string) - Thumbnail format ID\n                        * \"url\"\n                        * \"preference\" (optional, int) - quality of the image\n                        * \"width\" (optional, int)\n                        * \"height\" (optional, int)\n                        * \"resolution\" (optional, string \"{width}x{height\"},\n                                        deprecated)\n                        * \"filesize\" (optional, int)\n    thumbnail:      Full URL to a video thumbnail image.\n    description:    Full video description.\n    uploader:       Full name of the video uploader.\n    license:        License name the video is licensed under.\n    creator:        The creator of the video.\n    release_date:   The date (YYYYMMDD) when the video was released.\n    timestamp:      UNIX timestamp of the moment the video became available.\n    upload_date:    Video upload date (YYYYMMDD).\n                    If not explicitly set, calculated from timestamp.\n    uploader_id:    Nickname or id of the video uploader.\n    uploader_url:   Full URL to a personal webpage of the video uploader.\n    location:       Physical location where the video was filmed.\n    subtitles:      The available subtitles as a dictionary in the format\n                    {tag: subformats}. \"tag\" is usually a language code, and\n                    \"subformats\" is a list sorted from lower to higher\n                    preference, each element is a dictionary with the \"ext\"\n                    entry and one of:\n                        * \"data\": The subtitles file contents\n                        * \"url\": A URL pointing to the subtitles file\n                    \"ext\" will be calculated from URL if missing\n    automatic_captions: Like 'subtitles', used by the YoutubeIE for\n                    automatically generated captions\n    duration:       Length of the video in seconds, as an integer or float.\n    view_count:     How many users have watched the video on the platform.\n    like_count:     Number of positive ratings of the video\n    dislike_count:  Number of negative ratings of the video\n    repost_count:   Number of reposts of the video\n    average_rating: Average rating give by users, the scale used depends on the webpage\n    comment_count:  Number of comments on the video\n    comments:       A list of comments, each with one or more of the following\n                    properties (all but one of text or html optional):\n                        * \"author\" - human-readable name of the comment author\n                        * \"author_id\" - user ID of the comment author\n                        * \"id\" - Comment ID\n                        * \"html\" - Comment as HTML\n                        * \"text\" - Plain text of the comment\n                        * \"timestamp\" - UNIX timestamp of comment\n                        * \"parent\" - ID of the comment this one is replying to.\n                                     Set to \"root\" to indicate that this is a\n                                     comment to the original video.\n    age_limit:      Age restriction for the video, as an integer (years)\n    webpage_url:    The URL to the video webpage, if given to youtube-dl it\n                    should allow to get the same result again. (It will be set\n                    by YoutubeDL if it's missing)\n    categories:     A list of categories that the video falls in, for example\n                    [\"Sports\", \"Berlin\"]\n    tags:           A list of tags assigned to the video, e.g. [\"sweden\", \"pop music\"]\n    is_live:        True, False, or None (=unknown). Whether this video is a\n                    live stream that goes on instead of a fixed-length video.\n    start_time:     Time in seconds where the reproduction should start, as\n                    specified in the URL.\n    end_time:       Time in seconds where the reproduction should end, as\n                    specified in the URL.\n    chapters:       A list of dictionaries, with the following entries:\n                        * \"start_time\" - The start time of the chapter in seconds\n                        * \"end_time\" - The end time of the chapter in seconds\n                        * \"title\" (optional, string)\n\n    The following fields should only be used when the video belongs to some logical\n    chapter or section:\n\n    chapter:        Name or title of the chapter the video belongs to.\n    chapter_number: Number of the chapter the video belongs to, as an integer.\n    chapter_id:     Id of the chapter the video belongs to, as a unicode string.\n\n    The following fields should only be used when the video is an episode of some\n    series, programme or podcast:\n\n    series:         Title of the series or programme the video episode belongs to.\n    season:         Title of the season the video episode belongs to.\n    season_number:  Number of the season the video episode belongs to, as an integer.\n    season_id:      Id of the season the video episode belongs to, as a unicode string.\n    episode:        Title of the video episode. Unlike mandatory video title field,\n                    this field should denote the exact title of the video episode\n                    without any kind of decoration.\n    episode_number: Number of the video episode within a season, as an integer.\n    episode_id:     Id of the video episode, as a unicode string.\n\n    The following fields should only be used when the media is a track or a part of\n    a music album:\n\n    track:          Title of the track.\n    track_number:   Number of the track within an album or a disc, as an integer.\n    track_id:       Id of the track (useful in case of custom indexing, e.g. 6.iii),\n                    as a unicode string.\n    artist:         Artist(s) of the track.\n    genre:          Genre(s) of the track.\n    album:          Title of the album the track belongs to.\n    album_type:     Type of the album (e.g. \"Demo\", \"Full-length\", \"Split\", \"Compilation\", etc).\n    album_artist:   List of all artists appeared on the album (e.g.\n                    \"Ash Borer / Fell Voices\" or \"Various Artists\", useful for splits\n                    and compilations).\n    disc_number:    Number of the disc or other physical medium the track belongs to,\n                    as an integer.\n    release_year:   Year (YYYY) when the album was released.\n\n    Unless mentioned otherwise, the fields should be Unicode strings.\n\n    Unless mentioned otherwise, None is equivalent to absence of information.\n\n\n    _type \"playlist\" indicates multiple videos.\n    There must be a key \"entries\", which is a list, an iterable, or a PagedList\n    object, each element of which is a valid dictionary by this specification.\n\n    Additionally, playlists can have \"id\", \"title\", \"description\", \"uploader\",\n    \"uploader_id\", \"uploader_url\" attributes with the same semantics as videos\n    (see above).\n\n\n    _type \"multi_video\" indicates that there are multiple videos that\n    form a single show, for examples multiple acts of an opera or TV episode.\n    It must have an entries key like a playlist and contain all the keys\n    required for a video at the same time.\n\n\n    _type \"url\" indicates that the video must be extracted from another\n    location, possibly by a different extractor. Its only required key is:\n    \"url\" - the next URL to extract.\n    The key \"ie_key\" can be set to the class name (minus the trailing \"IE\",\n    e.g. \"Youtube\") if the extractor class is known in advance.\n    Additionally, the dictionary may have any properties of the resolved entity\n    known in advance, for example \"title\" if the title of the referred video is\n    known ahead of time.\n\n\n    _type \"url_transparent\" entities have the same specification as \"url\", but\n    indicate that the given additional information is more precise than the one\n    associated with the resolved URL.\n    This is useful when a site employs a video service that hosts the video and\n    its technical metadata, but that video service does not embed a useful\n    title, description etc.\n\n\n    Subclasses of this one should re-define the _real_initialize() and\n    _real_extract() methods and define a _VALID_URL regexp.\n    Probably, they should also be added to the list of extractors.\n\n    _GEO_BYPASS attribute may be set to False in order to disable\n    geo restriction bypass mechanisms for a particular extractor.\n    Though it won't disable explicit geo restriction bypass based on\n    country code provided with geo_bypass_country. (experimental)\n\n    _GEO_COUNTRIES attribute may contain a list of presumably geo unrestricted\n    countries for this extractor. One of these countries will be used by\n    geo restriction bypass mechanism right away in order to bypass\n    geo restriction, of course, if the mechanism is not disabled. (experimental)\n\n    NB: both these geo attributes are experimental and may change in future\n    or be completely removed.\n\n    Finally, the _WORKING attribute should be set to False for broken IEs\n    in order to warn the users and skip the tests.\n    \"\"\"\n\n    _ready = False\n    _downloader = None\n    _x_forwarded_for_ip = None\n    _GEO_BYPASS = True\n    _GEO_COUNTRIES = None\n    _WORKING = True\n\n    def __init__(self, downloader=None):\n        \"\"\"Constructor. Receives an optional downloader.\"\"\"\n        self._ready = False\n        self._x_forwarded_for_ip = None\n        self.set_downloader(downloader)\n\n    @classmethod\n    def suitable(cls, url):\n        \"\"\"Receives a URL and returns True if suitable for this IE.\"\"\"\n\n        # This does not use has/getattr intentionally - we want to know whether\n        # we have cached the regexp for *this* class, whereas getattr would also\n        # match the superclass\n        if '_VALID_URL_RE' not in cls.__dict__:\n            cls._VALID_URL_RE = re.compile(cls._VALID_URL)\n        return cls._VALID_URL_RE.match(url) is not None\n\n    @classmethod\n    def _match_id(cls, url):\n        if '_VALID_URL_RE' not in cls.__dict__:\n            cls._VALID_URL_RE = re.compile(cls._VALID_URL)\n        m = cls._VALID_URL_RE.match(url)\n        assert m\n        return compat_str(m.group('id'))\n\n    @classmethod\n    def working(cls):\n        \"\"\"Getter method for _WORKING.\"\"\"\n        return cls._WORKING\n\n    def initialize(self):\n        \"\"\"Initializes an instance (authentication, etc).\"\"\"\n        self._initialize_geo_bypass(self._GEO_COUNTRIES)\n        if not self._ready:\n            self._real_initialize()\n            self._ready = True\n\n    def _initialize_geo_bypass(self, countries):\n        \"\"\"\n        Initialize geo restriction bypass mechanism.\n\n        This method is used to initialize geo bypass mechanism based on faking\n        X-Forwarded-For HTTP header. A random country from provided country list\n        is selected and a random IP belonging to this country is generated. This\n        IP will be passed as X-Forwarded-For HTTP header in all subsequent\n        HTTP requests.\n\n        This method will be used for initial geo bypass mechanism initialization\n        during the instance initialization with _GEO_COUNTRIES.\n\n        You may also manually call it from extractor's code if geo countries\n        information is not available beforehand (e.g. obtained during\n        extraction) or due to some another reason.\n        \"\"\"\n        if not self._x_forwarded_for_ip:\n            country_code = self._downloader.params.get('geo_bypass_country', None)\n            # If there is no explicit country for geo bypass specified and\n            # the extractor is known to be geo restricted let's fake IP\n            # as X-Forwarded-For right away.\n            if (not country_code and\n                    self._GEO_BYPASS and\n                    self._downloader.params.get('geo_bypass', True) and\n                    countries):\n                country_code = random.choice(countries)\n            if country_code:\n                self._x_forwarded_for_ip = GeoUtils.random_ipv4(country_code)\n                if self._downloader.params.get('verbose', False):\n                    self._downloader.to_screen(\n                        '[debug] Using fake IP %s (%s) as X-Forwarded-For.'\n                        % (self._x_forwarded_for_ip, country_code.upper()))\n\n    def extract(self, url):\n        \"\"\"Extracts URL information and returns it in list of dicts.\"\"\"\n        try:\n            for _ in range(2):\n                try:\n                    self.initialize()\n                    ie_result = self._real_extract(url)\n                    if self._x_forwarded_for_ip:\n                        ie_result['__x_forwarded_for_ip'] = self._x_forwarded_for_ip\n                    return ie_result\n                except GeoRestrictedError as e:\n                    if self.__maybe_fake_ip_and_retry(e.countries):\n                        continue\n                    raise\n        except ExtractorError:\n            raise\n        except compat_http_client.IncompleteRead as e:\n            raise ExtractorError('A network error has occurred.', cause=e, expected=True)\n        except (KeyError, StopIteration) as e:\n            raise ExtractorError('An extractor error has occurred.', cause=e)\n\n    def __maybe_fake_ip_and_retry(self, countries):\n        if (not self._downloader.params.get('geo_bypass_country', None) and\n                self._GEO_BYPASS and\n                self._downloader.params.get('geo_bypass', True) and\n                not self._x_forwarded_for_ip and\n                countries):\n            country_code = random.choice(countries)\n            self._x_forwarded_for_ip = GeoUtils.random_ipv4(country_code)\n            if self._x_forwarded_for_ip:\n                self.report_warning(\n                    'Video is geo restricted. Retrying extraction with fake IP %s (%s) as X-Forwarded-For.'\n                    % (self._x_forwarded_for_ip, country_code.upper()))\n                return True\n        return False\n\n    def set_downloader(self, downloader):\n        \"\"\"Sets the downloader for this IE.\"\"\"\n        self._downloader = downloader\n\n    def _real_initialize(self):\n        \"\"\"Real initialization process. Redefine in subclasses.\"\"\"\n        pass\n\n    def _real_extract(self, url):\n        \"\"\"Real extraction process. Redefine in subclasses.\"\"\"\n        pass\n\n    @classmethod\n    def ie_key(cls):\n        \"\"\"A string for getting the InfoExtractor with get_info_extractor\"\"\"\n        return compat_str(cls.__name__[:-2])\n\n    @property\n    def IE_NAME(self):\n        return compat_str(type(self).__name__[:-2])\n\n    def _request_webpage(self, url_or_request, video_id, note=None, errnote=None, fatal=True, data=None, headers={}, query={}):\n        \"\"\" Returns the response handle \"\"\"\n        if note is None:\n            self.report_download_webpage(video_id)\n        elif note is not False:\n            if video_id is None:\n                self.to_screen('%s' % (note,))\n            else:\n                self.to_screen('%s: %s' % (video_id, note))\n\n        # Some sites check X-Forwarded-For HTTP header in order to figure out\n        # the origin of the client behind proxy. This allows bypassing geo\n        # restriction by faking this header's value to IP that belongs to some\n        # geo unrestricted country. We will do so once we encounter any\n        # geo restriction error.\n        if self._x_forwarded_for_ip:\n            if 'X-Forwarded-For' not in headers:\n                headers['X-Forwarded-For'] = self._x_forwarded_for_ip\n\n        if isinstance(url_or_request, compat_urllib_request.Request):\n            url_or_request = update_Request(\n                url_or_request, data=data, headers=headers, query=query)\n        else:\n            if query:\n                url_or_request = update_url_query(url_or_request, query)\n            if data is not None or headers:\n                url_or_request = sanitized_Request(url_or_request, data, headers)\n        try:\n            return self._downloader.urlopen(url_or_request)\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            if errnote is False:\n                return False\n            if errnote is None:\n                errnote = 'Unable to download webpage'\n\n            errmsg = '%s: %s' % (errnote, error_to_compat_str(err))\n            if fatal:\n                raise ExtractorError(errmsg, sys.exc_info()[2], cause=err)\n            else:\n                self._downloader.report_warning(errmsg)\n                return False\n\n    def _download_webpage_handle(self, url_or_request, video_id, note=None, errnote=None, fatal=True, encoding=None, data=None, headers={}, query={}):\n        \"\"\" Returns a tuple (page content as string, URL handle) \"\"\"\n        # Strip hashes from the URL (#1038)\n        if isinstance(url_or_request, (compat_str, str)):\n            url_or_request = url_or_request.partition('#')[0]\n\n        urlh = self._request_webpage(url_or_request, video_id, note, errnote, fatal, data=data, headers=headers, query=query)\n        if urlh is False:\n            assert not fatal\n            return False\n        content = self._webpage_read_content(urlh, url_or_request, video_id, note, errnote, fatal, encoding=encoding)\n        return (content, urlh)\n\n    @staticmethod\n    def _guess_encoding_from_content(content_type, webpage_bytes):\n        m = re.match(r'[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+\\s*;\\s*charset=(.+)', content_type)\n        if m:\n            encoding = m.group(1)\n        else:\n            m = re.search(br'<meta[^>]+charset=[\\'\"]?([^\\'\")]+)[ /\\'\">]',\n                          webpage_bytes[:1024])\n            if m:\n                encoding = m.group(1).decode('ascii')\n            elif webpage_bytes.startswith(b'\\xff\\xfe'):\n                encoding = 'utf-16'\n            else:\n                encoding = 'utf-8'\n\n        return encoding\n\n    def __check_blocked(self, content):\n        first_block = content[:512]\n        if ('<title>Access to this site is blocked</title>' in content and\n                'Websense' in first_block):\n            msg = 'Access to this webpage has been blocked by Websense filtering software in your network.'\n            blocked_iframe = self._html_search_regex(\n                r'<iframe src=\"([^\"]+)\"', content,\n                'Websense information URL', default=None)\n            if blocked_iframe:\n                msg += ' Visit %s for more details' % blocked_iframe\n            raise ExtractorError(msg, expected=True)\n        if '<title>The URL you requested has been blocked</title>' in first_block:\n            msg = (\n                'Access to this webpage has been blocked by Indian censorship. '\n                'Use a VPN or proxy server (with --proxy) to route around it.')\n            block_msg = self._html_search_regex(\n                r'</h1><p>(.*?)</p>',\n                content, 'block message', default=None)\n            if block_msg:\n                msg += ' (Message: \"%s\")' % block_msg.replace('\\n', ' ')\n            raise ExtractorError(msg, expected=True)\n        if ('<title>TTK :: \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0443 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d</title>' in content and\n                'blocklist.rkn.gov.ru' in content):\n            raise ExtractorError(\n                'Access to this webpage has been blocked by decision of the Russian government. '\n                'Visit http://blocklist.rkn.gov.ru/ for a block reason.',\n                expected=True)\n\n    def _webpage_read_content(self, urlh, url_or_request, video_id, note=None, errnote=None, fatal=True, prefix=None, encoding=None):\n        content_type = urlh.headers.get('Content-Type', '')\n        webpage_bytes = urlh.read()\n        if prefix is not None:\n            webpage_bytes = prefix + webpage_bytes\n        if not encoding:\n            encoding = self._guess_encoding_from_content(content_type, webpage_bytes)\n        if self._downloader.params.get('dump_intermediate_pages', False):\n            self.to_screen('Dumping request to ' + urlh.geturl())\n            dump = base64.b64encode(webpage_bytes).decode('ascii')\n            self._downloader.to_screen(dump)\n        if self._downloader.params.get('write_pages', False):\n            basen = '%s_%s' % (video_id, urlh.geturl())\n            if len(basen) > 240:\n                h = '___' + hashlib.md5(basen.encode('utf-8')).hexdigest()\n                basen = basen[:240 - len(h)] + h\n            raw_filename = basen + '.dump'\n            filename = sanitize_filename(raw_filename, restricted=True)\n            self.to_screen('Saving request to ' + filename)\n            # Working around MAX_PATH limitation on Windows (see\n            # http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx)\n            if compat_os_name == 'nt':\n                absfilepath = os.path.abspath(filename)\n                if len(absfilepath) > 259:\n                    filename = '\\\\\\\\?\\\\' + absfilepath\n            with open(filename, 'wb') as outf:\n                outf.write(webpage_bytes)\n\n        try:\n            content = webpage_bytes.decode(encoding, 'replace')\n        except LookupError:\n            content = webpage_bytes.decode('utf-8', 'replace')\n\n        self.__check_blocked(content)\n\n        return content\n\n    def _download_webpage(self, url_or_request, video_id, note=None, errnote=None, fatal=True, tries=1, timeout=5, encoding=None, data=None, headers={}, query={}):\n        \"\"\" Returns the data of the page as a string \"\"\"\n        success = False\n        try_count = 0\n        while success is False:\n            try:\n                res = self._download_webpage_handle(url_or_request, video_id, note, errnote, fatal, encoding=encoding, data=data, headers=headers, query=query)\n                success = True\n            except compat_http_client.IncompleteRead as e:\n                try_count += 1\n                if try_count >= tries:\n                    raise e\n                self._sleep(timeout, video_id)\n        if res is False:\n            return res\n        else:\n            content, _ = res\n            return content\n\n    def _download_xml(self, url_or_request, video_id,\n                      note='Downloading XML', errnote='Unable to download XML',\n                      transform_source=None, fatal=True, encoding=None,\n                      data=None, headers={}, query={}):\n        \"\"\"Return the xml as an xml.etree.ElementTree.Element\"\"\"\n        xml_string = self._download_webpage(\n            url_or_request, video_id, note, errnote, fatal=fatal,\n            encoding=encoding, data=data, headers=headers, query=query)\n        if xml_string is False:\n            return xml_string\n        return self._parse_xml(\n            xml_string, video_id, transform_source=transform_source,\n            fatal=fatal)\n\n    def _parse_xml(self, xml_string, video_id, transform_source=None, fatal=True):\n        if transform_source:\n            xml_string = transform_source(xml_string)\n        try:\n            return compat_etree_fromstring(xml_string.encode('utf-8'))\n        except compat_xml_parse_error as ve:\n            errmsg = '%s: Failed to parse XML ' % video_id\n            if fatal:\n                raise ExtractorError(errmsg, cause=ve)\n            else:\n                self.report_warning(errmsg + str(ve))\n\n    def _download_json(self, url_or_request, video_id,\n                       note='Downloading JSON metadata',\n                       errnote='Unable to download JSON metadata',\n                       transform_source=None,\n                       fatal=True, encoding=None, data=None, headers={}, query={}):\n        json_string = self._download_webpage(\n            url_or_request, video_id, note, errnote, fatal=fatal,\n            encoding=encoding, data=data, headers=headers, query=query)\n        if (not fatal) and json_string is False:\n            return None\n        return self._parse_json(\n            json_string, video_id, transform_source=transform_source, fatal=fatal)\n\n    def _parse_json(self, json_string, video_id, transform_source=None, fatal=True):\n        if transform_source:\n            json_string = transform_source(json_string)\n        try:\n            return json.loads(json_string)\n        except ValueError as ve:\n            errmsg = '%s: Failed to parse JSON ' % video_id\n            if fatal:\n                raise ExtractorError(errmsg, cause=ve)\n            else:\n                self.report_warning(errmsg + str(ve))\n\n    def report_warning(self, msg, video_id=None):\n        idstr = '' if video_id is None else '%s: ' % video_id\n        self._downloader.report_warning(\n            '[%s] %s%s' % (self.IE_NAME, idstr, msg))\n\n    def to_screen(self, msg):\n        \"\"\"Print msg to screen, prefixing it with '[ie_name]'\"\"\"\n        self._downloader.to_screen('[%s] %s' % (self.IE_NAME, msg))\n\n    def report_extraction(self, id_or_name):\n        \"\"\"Report information extraction.\"\"\"\n        self.to_screen('%s: Extracting information' % id_or_name)\n\n    def report_download_webpage(self, video_id):\n        \"\"\"Report webpage download.\"\"\"\n        self.to_screen('%s: Downloading webpage' % video_id)\n\n    def report_age_confirmation(self):\n        \"\"\"Report attempt to confirm age.\"\"\"\n        self.to_screen('Confirming age')\n\n    def report_login(self):\n        \"\"\"Report attempt to log in.\"\"\"\n        self.to_screen('Logging in')\n\n    @staticmethod\n    def raise_login_required(msg='This video is only available for registered users'):\n        raise ExtractorError(\n            '%s. Use --username and --password or --netrc to provide account credentials.' % msg,\n            expected=True)\n\n    @staticmethod\n    def raise_geo_restricted(msg='This video is not available from your location due to geo restriction', countries=None):\n        raise GeoRestrictedError(msg, countries=countries)\n\n    # Methods for following #608\n    @staticmethod\n    def url_result(url, ie=None, video_id=None, video_title=None):\n        \"\"\"Returns a URL that points to a page that should be processed\"\"\"\n        # TODO: ie should be the class used for getting the info\n        video_info = {'_type': 'url',\n                      'url': url,\n                      'ie_key': ie}\n        if video_id is not None:\n            video_info['id'] = video_id\n        if video_title is not None:\n            video_info['title'] = video_title\n        return video_info\n\n    def playlist_from_matches(self, matches, playlist_id=None, playlist_title=None, getter=None, ie=None):\n        urls = orderedSet(\n            self.url_result(self._proto_relative_url(getter(m) if getter else m), ie)\n            for m in matches)\n        return self.playlist_result(\n            urls, playlist_id=playlist_id, playlist_title=playlist_title)\n\n    @staticmethod\n    def playlist_result(entries, playlist_id=None, playlist_title=None, playlist_description=None):\n        \"\"\"Returns a playlist\"\"\"\n        video_info = {'_type': 'playlist',\n                      'entries': entries}\n        if playlist_id:\n            video_info['id'] = playlist_id\n        if playlist_title:\n            video_info['title'] = playlist_title\n        if playlist_description:\n            video_info['description'] = playlist_description\n        return video_info\n\n    def _search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None):\n        \"\"\"\n        Perform a regex search on the given string, using a single or a list of\n        patterns returning the first matching group.\n        In case of failure return a default value or raise a WARNING or a\n        RegexNotFoundError, depending on fatal, specifying the field name.\n        \"\"\"\n        if isinstance(pattern, (str, compat_str, compiled_regex_type)):\n            mobj = re.search(pattern, string, flags)\n        else:\n            for p in pattern:\n                mobj = re.search(p, string, flags)\n                if mobj:\n                    break\n\n        if not self._downloader.params.get('no_color') and compat_os_name != 'nt' and sys.stderr.isatty():\n            _name = '\\033[0;34m%s\\033[0m' % name\n        else:\n            _name = name\n\n        if mobj:\n            if group is None:\n                # return the first matching group\n                return next(g for g in mobj.groups() if g is not None)\n            else:\n                return mobj.group(group)\n        elif default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            raise RegexNotFoundError('Unable to extract %s' % _name)\n        else:\n            self._downloader.report_warning('unable to extract %s' % _name + bug_reports_message())\n            return None\n\n    def _html_search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None):\n        \"\"\"\n        Like _search_regex, but strips HTML tags and unescapes entities.\n        \"\"\"\n        res = self._search_regex(pattern, string, name, default, fatal, flags, group)\n        if res:\n            return clean_html(res).strip()\n        else:\n            return res\n\n    def _get_netrc_login_info(self, netrc_machine=None):\n        username = None\n        password = None\n        netrc_machine = netrc_machine or self._NETRC_MACHINE\n\n        if self._downloader.params.get('usenetrc', False):\n            try:\n                info = netrc.netrc().authenticators(netrc_machine)\n                if info is not None:\n                    username = info[0]\n                    password = info[2]\n                else:\n                    raise netrc.NetrcParseError(\n                        'No authenticators for %s' % netrc_machine)\n            except (IOError, netrc.NetrcParseError) as err:\n                self._downloader.report_warning(\n                    'parsing .netrc: %s' % error_to_compat_str(err))\n\n        return username, password\n\n    def _get_login_info(self, username_option='username', password_option='password', netrc_machine=None):\n        \"\"\"\n        Get the login info as (username, password)\n        First look for the manually specified credentials using username_option\n        and password_option as keys in params dictionary. If no such credentials\n        available look in the netrc file using the netrc_machine or _NETRC_MACHINE\n        value.\n        If there's no info available, return (None, None)\n        \"\"\"\n        if self._downloader is None:\n            return (None, None)\n\n        downloader_params = self._downloader.params\n\n        # Attempt to use provided username and password or .netrc data\n        if downloader_params.get(username_option) is not None:\n            username = downloader_params[username_option]\n            password = downloader_params[password_option]\n        else:\n            username, password = self._get_netrc_login_info(netrc_machine)\n\n        return username, password\n\n    def _get_tfa_info(self, note='two-factor verification code'):\n        \"\"\"\n        Get the two-factor authentication info\n        TODO - asking the user will be required for sms/phone verify\n        currently just uses the command line option\n        If there's no info available, return None\n        \"\"\"\n        if self._downloader is None:\n            return None\n        downloader_params = self._downloader.params\n\n        if downloader_params.get('twofactor') is not None:\n            return downloader_params['twofactor']\n\n        return compat_getpass('Type %s and press [Return]: ' % note)\n\n    # Helper functions for extracting OpenGraph info\n    @staticmethod\n    def _og_regexes(prop):\n        content_re = r'content=(?:\"([^\"]+?)\"|\\'([^\\']+?)\\'|\\s*([^\\s\"\\'=<>`]+?))'\n        property_re = (r'(?:name|property)=(?:\\'og:%(prop)s\\'|\"og:%(prop)s\"|\\s*og:%(prop)s\\b)'\n                       % {'prop': re.escape(prop)})\n        template = r'<meta[^>]+?%s[^>]+?%s'\n        return [\n            template % (property_re, content_re),\n            template % (content_re, property_re),\n        ]\n\n    @staticmethod\n    def _meta_regex(prop):\n        return r'''(?isx)<meta\n                    (?=[^>]+(?:itemprop|name|property|id|http-equiv)=([\"\\']?)%s\\1)\n                    [^>]+?content=([\"\\'])(?P<content>.*?)\\2''' % re.escape(prop)\n\n    def _og_search_property(self, prop, html, name=None, **kargs):\n        if not isinstance(prop, (list, tuple)):\n            prop = [prop]\n        if name is None:\n            name = 'OpenGraph %s' % prop[0]\n        og_regexes = []\n        for p in prop:\n            og_regexes.extend(self._og_regexes(p))\n        escaped = self._search_regex(og_regexes, html, name, flags=re.DOTALL, **kargs)\n        if escaped is None:\n            return None\n        return unescapeHTML(escaped)\n\n    def _og_search_thumbnail(self, html, **kargs):\n        return self._og_search_property('image', html, 'thumbnail URL', fatal=False, **kargs)\n\n    def _og_search_description(self, html, **kargs):\n        return self._og_search_property('description', html, fatal=False, **kargs)\n\n    def _og_search_title(self, html, **kargs):\n        return self._og_search_property('title', html, **kargs)\n\n    def _og_search_video_url(self, html, name='video url', secure=True, **kargs):\n        regexes = self._og_regexes('video') + self._og_regexes('video:url')\n        if secure:\n            regexes = self._og_regexes('video:secure_url') + regexes\n        return self._html_search_regex(regexes, html, name, **kargs)\n\n    def _og_search_url(self, html, **kargs):\n        return self._og_search_property('url', html, **kargs)\n\n    def _html_search_meta(self, name, html, display_name=None, fatal=False, **kwargs):\n        if not isinstance(name, (list, tuple)):\n            name = [name]\n        if display_name is None:\n            display_name = name[0]\n        return self._html_search_regex(\n            [self._meta_regex(n) for n in name],\n            html, display_name, fatal=fatal, group='content', **kwargs)\n\n    def _dc_search_uploader(self, html):\n        return self._html_search_meta('dc.creator', html, 'uploader')\n\n    def _rta_search(self, html):\n        # See http://www.rtalabel.org/index.php?content=howtofaq#single\n        if re.search(r'(?ix)<meta\\s+name=\"rating\"\\s+'\n                     r'     content=\"RTA-5042-1996-1400-1577-RTA\"',\n                     html):\n            return 18\n        return 0\n\n    def _media_rating_search(self, html):\n        # See http://www.tjg-designs.com/WP/metadata-code-examples-adding-metadata-to-your-web-pages/\n        rating = self._html_search_meta('rating', html)\n\n        if not rating:\n            return None\n\n        RATING_TABLE = {\n            'safe for kids': 0,\n            'general': 8,\n            '14 years': 14,\n            'mature': 17,\n            'restricted': 19,\n        }\n        return RATING_TABLE.get(rating.lower())\n\n    def _family_friendly_search(self, html):\n        # See http://schema.org/VideoObject\n        family_friendly = self._html_search_meta(\n            'isFamilyFriendly', html, default=None)\n\n        if not family_friendly:\n            return None\n\n        RATING_TABLE = {\n            '1': 0,\n            'true': 0,\n            '0': 18,\n            'false': 18,\n        }\n        return RATING_TABLE.get(family_friendly.lower())\n\n    def _twitter_search_player(self, html):\n        return self._html_search_meta('twitter:player', html,\n                                      'twitter card player')\n\n    def _search_json_ld(self, html, video_id, expected_type=None, **kwargs):\n        json_ld = self._search_regex(\n            r'(?s)<script[^>]+type=([\"\\'])application/ld\\+json\\1[^>]*>(?P<json_ld>.+?)</script>',\n            html, 'JSON-LD', group='json_ld', **kwargs)\n        default = kwargs.get('default', NO_DEFAULT)\n        if not json_ld:\n            return default if default is not NO_DEFAULT else {}\n        # JSON-LD may be malformed and thus `fatal` should be respected.\n        # At the same time `default` may be passed that assumes `fatal=False`\n        # for _search_regex. Let's simulate the same behavior here as well.\n        fatal = kwargs.get('fatal', True) if default == NO_DEFAULT else False\n        return self._json_ld(json_ld, video_id, fatal=fatal, expected_type=expected_type)\n\n    def _json_ld(self, json_ld, video_id, fatal=True, expected_type=None):\n        if isinstance(json_ld, compat_str):\n            json_ld = self._parse_json(json_ld, video_id, fatal=fatal)\n        if not json_ld:\n            return {}\n        info = {}\n        if not isinstance(json_ld, (list, tuple, dict)):\n            return info\n        if isinstance(json_ld, dict):\n            json_ld = [json_ld]\n\n        def extract_video_object(e):\n            assert e['@type'] == 'VideoObject'\n            info.update({\n                'url': e.get('contentUrl'),\n                'title': unescapeHTML(e.get('name')),\n                'description': unescapeHTML(e.get('description')),\n                'thumbnail': e.get('thumbnailUrl') or e.get('thumbnailURL'),\n                'duration': parse_duration(e.get('duration')),\n                'timestamp': unified_timestamp(e.get('uploadDate')),\n                'filesize': float_or_none(e.get('contentSize')),\n                'tbr': int_or_none(e.get('bitrate')),\n                'width': int_or_none(e.get('width')),\n                'height': int_or_none(e.get('height')),\n                'view_count': int_or_none(e.get('interactionCount')),\n            })\n\n        for e in json_ld:\n            if e.get('@context') == 'http://schema.org':\n                item_type = e.get('@type')\n                if expected_type is not None and expected_type != item_type:\n                    return info\n                if item_type in ('TVEpisode', 'Episode'):\n                    info.update({\n                        'episode': unescapeHTML(e.get('name')),\n                        'episode_number': int_or_none(e.get('episodeNumber')),\n                        'description': unescapeHTML(e.get('description')),\n                    })\n                    part_of_season = e.get('partOfSeason')\n                    if isinstance(part_of_season, dict) and part_of_season.get('@type') in ('TVSeason', 'Season', 'CreativeWorkSeason'):\n                        info['season_number'] = int_or_none(part_of_season.get('seasonNumber'))\n                    part_of_series = e.get('partOfSeries') or e.get('partOfTVSeries')\n                    if isinstance(part_of_series, dict) and part_of_series.get('@type') in ('TVSeries', 'Series', 'CreativeWorkSeries'):\n                        info['series'] = unescapeHTML(part_of_series.get('name'))\n                elif item_type in ('Article', 'NewsArticle'):\n                    info.update({\n                        'timestamp': parse_iso8601(e.get('datePublished')),\n                        'title': unescapeHTML(e.get('headline')),\n                        'description': unescapeHTML(e.get('articleBody')),\n                    })\n                elif item_type == 'VideoObject':\n                    extract_video_object(e)\n                    continue\n                video = e.get('video')\n                if isinstance(video, dict) and video.get('@type') == 'VideoObject':\n                    extract_video_object(video)\n                break\n        return dict((k, v) for k, v in info.items() if v is not None)\n\n    @staticmethod\n    def _hidden_inputs(html):\n        html = re.sub(r'<!--(?:(?!<!--).)*-->', '', html)\n        hidden_inputs = {}\n        for input in re.findall(r'(?i)(<input[^>]+>)', html):\n            attrs = extract_attributes(input)\n            if not input:\n                continue\n            if attrs.get('type') not in ('hidden', 'submit'):\n                continue\n            name = attrs.get('name') or attrs.get('id')\n            value = attrs.get('value')\n            if name and value is not None:\n                hidden_inputs[name] = value\n        return hidden_inputs\n\n    def _form_hidden_inputs(self, form_id, html):\n        form = self._search_regex(\n            r'(?is)<form[^>]+?id=([\"\\'])%s\\1[^>]*>(?P<form>.+?)</form>' % form_id,\n            html, '%s form' % form_id, group='form')\n        return self._hidden_inputs(form)\n\n    def _sort_formats(self, formats, field_preference=None):\n        if not formats:\n            raise ExtractorError('No video formats found')\n\n        for f in formats:\n            # Automatically determine tbr when missing based on abr and vbr (improves\n            # formats sorting in some cases)\n            if 'tbr' not in f and f.get('abr') is not None and f.get('vbr') is not None:\n                f['tbr'] = f['abr'] + f['vbr']\n\n        def _formats_key(f):\n            # TODO remove the following workaround\n            from ..utils import determine_ext\n            if not f.get('ext') and 'url' in f:\n                f['ext'] = determine_ext(f['url'])\n\n            if isinstance(field_preference, (list, tuple)):\n                return tuple(\n                    f.get(field)\n                    if f.get(field) is not None\n                    else ('' if field == 'format_id' else -1)\n                    for field in field_preference)\n\n            preference = f.get('preference')\n            if preference is None:\n                preference = 0\n                if f.get('ext') in ['f4f', 'f4m']:  # Not yet supported\n                    preference -= 0.5\n\n            protocol = f.get('protocol') or determine_protocol(f)\n            proto_preference = 0 if protocol in ['http', 'https'] else (-0.5 if protocol == 'rtsp' else -0.1)\n\n            if f.get('vcodec') == 'none':  # audio only\n                preference -= 50\n                if self._downloader.params.get('prefer_free_formats'):\n                    ORDER = ['aac', 'mp3', 'm4a', 'webm', 'ogg', 'opus']\n                else:\n                    ORDER = ['webm', 'opus', 'ogg', 'mp3', 'aac', 'm4a']\n                ext_preference = 0\n                try:\n                    audio_ext_preference = ORDER.index(f['ext'])\n                except ValueError:\n                    audio_ext_preference = -1\n            else:\n                if f.get('acodec') == 'none':  # video only\n                    preference -= 40\n                if self._downloader.params.get('prefer_free_formats'):\n                    ORDER = ['flv', 'mp4', 'webm']\n                else:\n                    ORDER = ['webm', 'flv', 'mp4']\n                try:\n                    ext_preference = ORDER.index(f['ext'])\n                except ValueError:\n                    ext_preference = -1\n                audio_ext_preference = 0\n\n            return (\n                preference,\n                f.get('language_preference') if f.get('language_preference') is not None else -1,\n                f.get('quality') if f.get('quality') is not None else -1,\n                f.get('tbr') if f.get('tbr') is not None else -1,\n                f.get('filesize') if f.get('filesize') is not None else -1,\n                f.get('vbr') if f.get('vbr') is not None else -1,\n                f.get('height') if f.get('height') is not None else -1,\n                f.get('width') if f.get('width') is not None else -1,\n                proto_preference,\n                ext_preference,\n                f.get('abr') if f.get('abr') is not None else -1,\n                audio_ext_preference,\n                f.get('fps') if f.get('fps') is not None else -1,\n                f.get('filesize_approx') if f.get('filesize_approx') is not None else -1,\n                f.get('source_preference') if f.get('source_preference') is not None else -1,\n                f.get('format_id') if f.get('format_id') is not None else '',\n            )\n        formats.sort(key=_formats_key)\n\n    def _check_formats(self, formats, video_id):\n        if formats:\n            formats[:] = filter(\n                lambda f: self._is_valid_url(\n                    f['url'], video_id,\n                    item='%s video format' % f.get('format_id') if f.get('format_id') else 'video'),\n                formats)\n\n    @staticmethod\n    def _remove_duplicate_formats(formats):\n        format_urls = set()\n        unique_formats = []\n        for f in formats:\n            if f['url'] not in format_urls:\n                format_urls.add(f['url'])\n                unique_formats.append(f)\n        formats[:] = unique_formats\n\n    def _is_valid_url(self, url, video_id, item='video', headers={}):\n        url = self._proto_relative_url(url, scheme='http:')\n        # For now assume non HTTP(S) URLs always valid\n        if not (url.startswith('http://') or url.startswith('https://')):\n            return True\n        try:\n            self._request_webpage(url, video_id, 'Checking %s URL' % item, headers=headers)\n            return True\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_urllib_error.URLError):\n                self.to_screen(\n                    '%s: %s URL is invalid, skipping' % (video_id, item))\n                return False\n            raise\n\n    def http_scheme(self):\n        \"\"\" Either \"http:\" or \"https:\", depending on the user's preferences \"\"\"\n        return (\n            'http:'\n            if self._downloader.params.get('prefer_insecure', False)\n            else 'https:')\n\n    def _proto_relative_url(self, url, scheme=None):\n        if url is None:\n            return url\n        if url.startswith('//'):\n            if scheme is None:\n                scheme = self.http_scheme()\n            return scheme + url\n        else:\n            return url\n\n    def _sleep(self, timeout, video_id, msg_template=None):\n        if msg_template is None:\n            msg_template = '%(video_id)s: Waiting for %(timeout)s seconds'\n        msg = msg_template % {'video_id': video_id, 'timeout': timeout}\n        self.to_screen(msg)\n        time.sleep(timeout)\n\n    def _extract_f4m_formats(self, manifest_url, video_id, preference=None, f4m_id=None,\n                             transform_source=lambda s: fix_xml_ampersands(s).strip(),\n                             fatal=True, m3u8_id=None):\n        manifest = self._download_xml(\n            manifest_url, video_id, 'Downloading f4m manifest',\n            'Unable to download f4m manifest',\n            # Some manifests may be malformed, e.g. prosiebensat1 generated manifests\n            # (see https://github.com/rg3/youtube-dl/issues/6215#issuecomment-121704244)\n            transform_source=transform_source,\n            fatal=fatal)\n\n        if manifest is False:\n            return []\n\n        return self._parse_f4m_formats(\n            manifest, manifest_url, video_id, preference=preference, f4m_id=f4m_id,\n            transform_source=transform_source, fatal=fatal, m3u8_id=m3u8_id)\n\n    def _parse_f4m_formats(self, manifest, manifest_url, video_id, preference=None, f4m_id=None,\n                           transform_source=lambda s: fix_xml_ampersands(s).strip(),\n                           fatal=True, m3u8_id=None):\n        # currently youtube-dl cannot decode the playerVerificationChallenge as Akamai uses Adobe Alchemy\n        akamai_pv = manifest.find('{http://ns.adobe.com/f4m/1.0}pv-2.0')\n        if akamai_pv is not None and ';' in akamai_pv.text:\n            playerVerificationChallenge = akamai_pv.text.split(';')[0]\n            if playerVerificationChallenge.strip() != '':\n                return []\n\n        formats = []\n        manifest_version = '1.0'\n        media_nodes = manifest.findall('{http://ns.adobe.com/f4m/1.0}media')\n        if not media_nodes:\n            manifest_version = '2.0'\n            media_nodes = manifest.findall('{http://ns.adobe.com/f4m/2.0}media')\n        # Remove unsupported DRM protected media from final formats\n        # rendition (see https://github.com/rg3/youtube-dl/issues/8573).\n        media_nodes = remove_encrypted_media(media_nodes)\n        if not media_nodes:\n            return formats\n\n        manifest_base_url = get_base_url(manifest)\n\n        bootstrap_info = xpath_element(\n            manifest, ['{http://ns.adobe.com/f4m/1.0}bootstrapInfo', '{http://ns.adobe.com/f4m/2.0}bootstrapInfo'],\n            'bootstrap info', default=None)\n\n        vcodec = None\n        mime_type = xpath_text(\n            manifest, ['{http://ns.adobe.com/f4m/1.0}mimeType', '{http://ns.adobe.com/f4m/2.0}mimeType'],\n            'base URL', default=None)\n        if mime_type and mime_type.startswith('audio/'):\n            vcodec = 'none'\n\n        for i, media_el in enumerate(media_nodes):\n            tbr = int_or_none(media_el.attrib.get('bitrate'))\n            width = int_or_none(media_el.attrib.get('width'))\n            height = int_or_none(media_el.attrib.get('height'))\n            format_id = '-'.join(filter(None, [f4m_id, compat_str(i if tbr is None else tbr)]))\n            # If <bootstrapInfo> is present, the specified f4m is a\n            # stream-level manifest, and only set-level manifests may refer to\n            # external resources.  See section 11.4 and section 4 of F4M spec\n            if bootstrap_info is None:\n                media_url = None\n                # @href is introduced in 2.0, see section 11.6 of F4M spec\n                if manifest_version == '2.0':\n                    media_url = media_el.attrib.get('href')\n                if media_url is None:\n                    media_url = media_el.attrib.get('url')\n                if not media_url:\n                    continue\n                manifest_url = (\n                    media_url if media_url.startswith('http://') or media_url.startswith('https://')\n                    else ((manifest_base_url or '/'.join(manifest_url.split('/')[:-1])) + '/' + media_url))\n                # If media_url is itself a f4m manifest do the recursive extraction\n                # since bitrates in parent manifest (this one) and media_url manifest\n                # may differ leading to inability to resolve the format by requested\n                # bitrate in f4m downloader\n                ext = determine_ext(manifest_url)\n                if ext == 'f4m':\n                    f4m_formats = self._extract_f4m_formats(\n                        manifest_url, video_id, preference=preference, f4m_id=f4m_id,\n                        transform_source=transform_source, fatal=fatal)\n                    # Sometimes stream-level manifest contains single media entry that\n                    # does not contain any quality metadata (e.g. http://matchtv.ru/#live-player).\n                    # At the same time parent's media entry in set-level manifest may\n                    # contain it. We will copy it from parent in such cases.\n                    if len(f4m_formats) == 1:\n                        f = f4m_formats[0]\n                        f.update({\n                            'tbr': f.get('tbr') or tbr,\n                            'width': f.get('width') or width,\n                            'height': f.get('height') or height,\n                            'format_id': f.get('format_id') if not tbr else format_id,\n                            'vcodec': vcodec,\n                        })\n                    formats.extend(f4m_formats)\n                    continue\n                elif ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        manifest_url, video_id, 'mp4', preference=preference,\n                        m3u8_id=m3u8_id, fatal=fatal))\n                    continue\n            formats.append({\n                'format_id': format_id,\n                'url': manifest_url,\n                'manifest_url': manifest_url,\n                'ext': 'flv' if bootstrap_info is not None else None,\n                'protocol': 'f4m',\n                'tbr': tbr,\n                'width': width,\n                'height': height,\n                'vcodec': vcodec,\n                'preference': preference,\n            })\n        return formats\n\n    def _m3u8_meta_format(self, m3u8_url, ext=None, preference=None, m3u8_id=None):\n        return {\n            'format_id': '-'.join(filter(None, [m3u8_id, 'meta'])),\n            'url': m3u8_url,\n            'ext': ext,\n            'protocol': 'm3u8',\n            'preference': preference - 100 if preference else -100,\n            'resolution': 'multiple',\n            'format_note': 'Quality selection URL',\n        }\n\n    def _extract_m3u8_formats(self, m3u8_url, video_id, ext=None,\n                              entry_protocol='m3u8', preference=None,\n                              m3u8_id=None, note=None, errnote=None,\n                              fatal=True, live=False):\n        res = self._download_webpage_handle(\n            m3u8_url, video_id,\n            note=note or 'Downloading m3u8 information',\n            errnote=errnote or 'Failed to download m3u8 information',\n            fatal=fatal)\n\n        if res is False:\n            return []\n\n        m3u8_doc, urlh = res\n        m3u8_url = urlh.geturl()\n\n        return self._parse_m3u8_formats(\n            m3u8_doc, m3u8_url, ext=ext, entry_protocol=entry_protocol,\n            preference=preference, m3u8_id=m3u8_id, live=live)\n\n    def _parse_m3u8_formats(self, m3u8_doc, m3u8_url, ext=None,\n                            entry_protocol='m3u8', preference=None,\n                            m3u8_id=None, live=False):\n        if '#EXT-X-FAXS-CM:' in m3u8_doc:  # Adobe Flash Access\n            return []\n\n        if re.search(r'#EXT-X-SESSION-KEY:.*?URI=\"skd://', m3u8_doc):  # Apple FairPlay\n            return []\n\n        formats = []\n\n        format_url = lambda u: (\n            u\n            if re.match(r'^https?://', u)\n            else compat_urlparse.urljoin(m3u8_url, u))\n\n        # References:\n        # 1. https://tools.ietf.org/html/draft-pantos-http-live-streaming-21\n        # 2. https://github.com/rg3/youtube-dl/issues/12211\n\n        # We should try extracting formats only from master playlists [1, 4.3.4],\n        # i.e. playlists that describe available qualities. On the other hand\n        # media playlists [1, 4.3.3] should be returned as is since they contain\n        # just the media without qualities renditions.\n        # Fortunately, master playlist can be easily distinguished from media\n        # playlist based on particular tags availability. As of [1, 4.3.3, 4.3.4]\n        # master playlist tags MUST NOT appear in a media playist and vice versa.\n        # As of [1, 4.3.3.1] #EXT-X-TARGETDURATION tag is REQUIRED for every\n        # media playlist and MUST NOT appear in master playlist thus we can\n        # clearly detect media playlist with this criterion.\n\n        if '#EXT-X-TARGETDURATION' in m3u8_doc:  # media playlist, return as is\n            return [{\n                'url': m3u8_url,\n                'format_id': m3u8_id,\n                'ext': ext,\n                'protocol': entry_protocol,\n                'preference': preference,\n            }]\n\n        groups = {}\n        last_stream_inf = {}\n\n        def extract_media(x_media_line):\n            media = parse_m3u8_attributes(x_media_line)\n            # As per [1, 4.3.4.1] TYPE, GROUP-ID and NAME are REQUIRED\n            media_type, group_id, name = media.get('TYPE'), media.get('GROUP-ID'), media.get('NAME')\n            if not (media_type and group_id and name):\n                return\n            groups.setdefault(group_id, []).append(media)\n            if media_type not in ('VIDEO', 'AUDIO'):\n                return\n            media_url = media.get('URI')\n            if media_url:\n                format_id = []\n                for v in (m3u8_id, group_id, name):\n                    if v:\n                        format_id.append(v)\n                f = {\n                    'format_id': '-'.join(format_id),\n                    'url': format_url(media_url),\n                    'manifest_url': m3u8_url,\n                    'language': media.get('LANGUAGE'),\n                    'ext': ext,\n                    'protocol': entry_protocol,\n                    'preference': preference,\n                }\n                if media_type == 'AUDIO':\n                    f['vcodec'] = 'none'\n                formats.append(f)\n\n        def build_stream_name():\n            # Despite specification does not mention NAME attribute for\n            # EXT-X-STREAM-INF tag it still sometimes may be present (see [1]\n            # or vidio test in TestInfoExtractor.test_parse_m3u8_formats)\n            # 1. http://www.vidio.com/watch/165683-dj_ambred-booyah-live-2015\n            stream_name = last_stream_inf.get('NAME')\n            if stream_name:\n                return stream_name\n            # If there is no NAME in EXT-X-STREAM-INF it will be obtained\n            # from corresponding rendition group\n            stream_group_id = last_stream_inf.get('VIDEO')\n            if not stream_group_id:\n                return\n            stream_group = groups.get(stream_group_id)\n            if not stream_group:\n                return stream_group_id\n            rendition = stream_group[0]\n            return rendition.get('NAME') or stream_group_id\n\n        for line in m3u8_doc.splitlines():\n            if line.startswith('#EXT-X-STREAM-INF:'):\n                last_stream_inf = parse_m3u8_attributes(line)\n            elif line.startswith('#EXT-X-MEDIA:'):\n                extract_media(line)\n            elif line.startswith('#') or not line.strip():\n                continue\n            else:\n                tbr = float_or_none(\n                    last_stream_inf.get('AVERAGE-BANDWIDTH') or\n                    last_stream_inf.get('BANDWIDTH'), scale=1000)\n                format_id = []\n                if m3u8_id:\n                    format_id.append(m3u8_id)\n                stream_name = build_stream_name()\n                # Bandwidth of live streams may differ over time thus making\n                # format_id unpredictable. So it's better to keep provided\n                # format_id intact.\n                if not live:\n                    format_id.append(stream_name if stream_name else '%d' % (tbr if tbr else len(formats)))\n                manifest_url = format_url(line.strip())\n                f = {\n                    'format_id': '-'.join(format_id),\n                    'url': manifest_url,\n                    'manifest_url': m3u8_url,\n                    'tbr': tbr,\n                    'ext': ext,\n                    'fps': float_or_none(last_stream_inf.get('FRAME-RATE')),\n                    'protocol': entry_protocol,\n                    'preference': preference,\n                }\n                resolution = last_stream_inf.get('RESOLUTION')\n                if resolution:\n                    mobj = re.search(r'(?P<width>\\d+)[xX](?P<height>\\d+)', resolution)\n                    if mobj:\n                        f['width'] = int(mobj.group('width'))\n                        f['height'] = int(mobj.group('height'))\n                # Unified Streaming Platform\n                mobj = re.search(\n                    r'audio.*?(?:%3D|=)(\\d+)(?:-video.*?(?:%3D|=)(\\d+))?', f['url'])\n                if mobj:\n                    abr, vbr = mobj.groups()\n                    abr, vbr = float_or_none(abr, 1000), float_or_none(vbr, 1000)\n                    f.update({\n                        'vbr': vbr,\n                        'abr': abr,\n                    })\n                codecs = parse_codecs(last_stream_inf.get('CODECS'))\n                f.update(codecs)\n                audio_group_id = last_stream_inf.get('AUDIO')\n                # As per [1, 4.3.4.1.1] any EXT-X-STREAM-INF tag which\n                # references a rendition group MUST have a CODECS attribute.\n                # However, this is not always respected, for example, [2]\n                # contains EXT-X-STREAM-INF tag which references AUDIO\n                # rendition group but does not have CODECS and despite\n                # referencing audio group an audio group, it represents\n                # a complete (with audio and video) format. So, for such cases\n                # we will ignore references to rendition groups and treat them\n                # as complete formats.\n                if audio_group_id and codecs and f.get('vcodec') != 'none':\n                    audio_group = groups.get(audio_group_id)\n                    if audio_group and audio_group[0].get('URI'):\n                        # TODO: update acodec for audio only formats with\n                        # the same GROUP-ID\n                        f['acodec'] = 'none'\n                formats.append(f)\n                last_stream_inf = {}\n        return formats\n\n    @staticmethod\n    def _xpath_ns(path, namespace=None):\n        if not namespace:\n            return path\n        out = []\n        for c in path.split('/'):\n            if not c or c == '.':\n                out.append(c)\n            else:\n                out.append('{%s}%s' % (namespace, c))\n        return '/'.join(out)\n\n    def _extract_smil_formats(self, smil_url, video_id, fatal=True, f4m_params=None, transform_source=None):\n        smil = self._download_smil(smil_url, video_id, fatal=fatal, transform_source=transform_source)\n\n        if smil is False:\n            assert not fatal\n            return []\n\n        namespace = self._parse_smil_namespace(smil)\n\n        return self._parse_smil_formats(\n            smil, smil_url, video_id, namespace=namespace, f4m_params=f4m_params)\n\n    def _extract_smil_info(self, smil_url, video_id, fatal=True, f4m_params=None):\n        smil = self._download_smil(smil_url, video_id, fatal=fatal)\n        if smil is False:\n            return {}\n        return self._parse_smil(smil, smil_url, video_id, f4m_params=f4m_params)\n\n    def _download_smil(self, smil_url, video_id, fatal=True, transform_source=None):\n        return self._download_xml(\n            smil_url, video_id, 'Downloading SMIL file',\n            'Unable to download SMIL file', fatal=fatal, transform_source=transform_source)\n\n    def _parse_smil(self, smil, smil_url, video_id, f4m_params=None):\n        namespace = self._parse_smil_namespace(smil)\n\n        formats = self._parse_smil_formats(\n            smil, smil_url, video_id, namespace=namespace, f4m_params=f4m_params)\n        subtitles = self._parse_smil_subtitles(smil, namespace=namespace)\n\n        video_id = os.path.splitext(url_basename(smil_url))[0]\n        title = None\n        description = None\n        upload_date = None\n        for meta in smil.findall(self._xpath_ns('./head/meta', namespace)):\n            name = meta.attrib.get('name')\n            content = meta.attrib.get('content')\n            if not name or not content:\n                continue\n            if not title and name == 'title':\n                title = content\n            elif not description and name in ('description', 'abstract'):\n                description = content\n            elif not upload_date and name == 'date':\n                upload_date = unified_strdate(content)\n\n        thumbnails = [{\n            'id': image.get('type'),\n            'url': image.get('src'),\n            'width': int_or_none(image.get('width')),\n            'height': int_or_none(image.get('height')),\n        } for image in smil.findall(self._xpath_ns('.//image', namespace)) if image.get('src')]\n\n        return {\n            'id': video_id,\n            'title': title or video_id,\n            'description': description,\n            'upload_date': upload_date,\n            'thumbnails': thumbnails,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n    def _parse_smil_namespace(self, smil):\n        return self._search_regex(\n            r'(?i)^{([^}]+)?}smil$', smil.tag, 'namespace', default=None)\n\n    def _parse_smil_formats(self, smil, smil_url, video_id, namespace=None, f4m_params=None, transform_rtmp_url=None):\n        base = smil_url\n        for meta in smil.findall(self._xpath_ns('./head/meta', namespace)):\n            b = meta.get('base') or meta.get('httpBase')\n            if b:\n                base = b\n                break\n\n        formats = []\n        rtmp_count = 0\n        http_count = 0\n        m3u8_count = 0\n\n        srcs = []\n        media = smil.findall(self._xpath_ns('.//video', namespace)) + smil.findall(self._xpath_ns('.//audio', namespace))\n        for medium in media:\n            src = medium.get('src')\n            if not src or src in srcs:\n                continue\n            srcs.append(src)\n\n            bitrate = float_or_none(medium.get('system-bitrate') or medium.get('systemBitrate'), 1000)\n            filesize = int_or_none(medium.get('size') or medium.get('fileSize'))\n            width = int_or_none(medium.get('width'))\n            height = int_or_none(medium.get('height'))\n            proto = medium.get('proto')\n            ext = medium.get('ext')\n            src_ext = determine_ext(src)\n            streamer = medium.get('streamer') or base\n\n            if proto == 'rtmp' or streamer.startswith('rtmp'):\n                rtmp_count += 1\n                formats.append({\n                    'url': streamer,\n                    'play_path': src,\n                    'ext': 'flv',\n                    'format_id': 'rtmp-%d' % (rtmp_count if bitrate is None else bitrate),\n                    'tbr': bitrate,\n                    'filesize': filesize,\n                    'width': width,\n                    'height': height,\n                })\n                if transform_rtmp_url:\n                    streamer, src = transform_rtmp_url(streamer, src)\n                    formats[-1].update({\n                        'url': streamer,\n                        'play_path': src,\n                    })\n                continue\n\n            src_url = src if src.startswith('http') else compat_urlparse.urljoin(base, src)\n            src_url = src_url.strip()\n\n            if proto == 'm3u8' or src_ext == 'm3u8':\n                m3u8_formats = self._extract_m3u8_formats(\n                    src_url, video_id, ext or 'mp4', m3u8_id='hls', fatal=False)\n                if len(m3u8_formats) == 1:\n                    m3u8_count += 1\n                    m3u8_formats[0].update({\n                        'format_id': 'hls-%d' % (m3u8_count if bitrate is None else bitrate),\n                        'tbr': bitrate,\n                        'width': width,\n                        'height': height,\n                    })\n                formats.extend(m3u8_formats)\n                continue\n\n            if src_ext == 'f4m':\n                f4m_url = src_url\n                if not f4m_params:\n                    f4m_params = {\n                        'hdcore': '3.2.0',\n                        'plugin': 'flowplayer-3.2.0.1',\n                    }\n                f4m_url += '&' if '?' in f4m_url else '?'\n                f4m_url += compat_urllib_parse_urlencode(f4m_params)\n                formats.extend(self._extract_f4m_formats(f4m_url, video_id, f4m_id='hds', fatal=False))\n                continue\n\n            if src_url.startswith('http') and self._is_valid_url(src, video_id):\n                http_count += 1\n                formats.append({\n                    'url': src_url,\n                    'ext': ext or src_ext or 'flv',\n                    'format_id': 'http-%d' % (bitrate or http_count),\n                    'tbr': bitrate,\n                    'filesize': filesize,\n                    'width': width,\n                    'height': height,\n                })\n                continue\n\n        return formats\n\n    def _parse_smil_subtitles(self, smil, namespace=None, subtitles_lang='en'):\n        urls = []\n        subtitles = {}\n        for num, textstream in enumerate(smil.findall(self._xpath_ns('.//textstream', namespace))):\n            src = textstream.get('src')\n            if not src or src in urls:\n                continue\n            urls.append(src)\n            ext = textstream.get('ext') or mimetype2ext(textstream.get('type')) or determine_ext(src)\n            lang = textstream.get('systemLanguage') or textstream.get('systemLanguageName') or textstream.get('lang') or subtitles_lang\n            subtitles.setdefault(lang, []).append({\n                'url': src,\n                'ext': ext,\n            })\n        return subtitles\n\n    def _extract_xspf_playlist(self, playlist_url, playlist_id, fatal=True):\n        xspf = self._download_xml(\n            playlist_url, playlist_id, 'Downloading xpsf playlist',\n            'Unable to download xspf manifest', fatal=fatal)\n        if xspf is False:\n            return []\n        return self._parse_xspf(xspf, playlist_id)\n\n    def _parse_xspf(self, playlist, playlist_id):\n        NS_MAP = {\n            'xspf': 'http://xspf.org/ns/0/',\n            's1': 'http://static.streamone.nl/player/ns/0',\n        }\n\n        entries = []\n        for track in playlist.findall(xpath_with_ns('./xspf:trackList/xspf:track', NS_MAP)):\n            title = xpath_text(\n                track, xpath_with_ns('./xspf:title', NS_MAP), 'title', default=playlist_id)\n            description = xpath_text(\n                track, xpath_with_ns('./xspf:annotation', NS_MAP), 'description')\n            thumbnail = xpath_text(\n                track, xpath_with_ns('./xspf:image', NS_MAP), 'thumbnail')\n            duration = float_or_none(\n                xpath_text(track, xpath_with_ns('./xspf:duration', NS_MAP), 'duration'), 1000)\n\n            formats = [{\n                'url': location.text,\n                'format_id': location.get(xpath_with_ns('s1:label', NS_MAP)),\n                'width': int_or_none(location.get(xpath_with_ns('s1:width', NS_MAP))),\n                'height': int_or_none(location.get(xpath_with_ns('s1:height', NS_MAP))),\n            } for location in track.findall(xpath_with_ns('./xspf:location', NS_MAP))]\n            self._sort_formats(formats)\n\n            entries.append({\n                'id': playlist_id,\n                'title': title,\n                'description': description,\n                'thumbnail': thumbnail,\n                'duration': duration,\n                'formats': formats,\n            })\n        return entries\n\n    def _extract_mpd_formats(self, mpd_url, video_id, mpd_id=None, note=None, errnote=None, fatal=True, formats_dict={}):\n        res = self._download_webpage_handle(\n            mpd_url, video_id,\n            note=note or 'Downloading MPD manifest',\n            errnote=errnote or 'Failed to download MPD manifest',\n            fatal=fatal)\n        if res is False:\n            return []\n        mpd, urlh = res\n        mpd_base_url = base_url(urlh.geturl())\n\n        return self._parse_mpd_formats(\n            compat_etree_fromstring(mpd.encode('utf-8')), mpd_id, mpd_base_url,\n            formats_dict=formats_dict, mpd_url=mpd_url)\n\n    def _parse_mpd_formats(self, mpd_doc, mpd_id=None, mpd_base_url='', formats_dict={}, mpd_url=None):\n        \"\"\"\n        Parse formats from MPD manifest.\n        References:\n         1. MPEG-DASH Standard, ISO/IEC 23009-1:2014(E),\n            http://standards.iso.org/ittf/PubliclyAvailableStandards/c065274_ISO_IEC_23009-1_2014.zip\n         2. https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\n        \"\"\"\n        if mpd_doc.get('type') == 'dynamic':\n            return []\n\n        namespace = self._search_regex(r'(?i)^{([^}]+)?}MPD$', mpd_doc.tag, 'namespace', default=None)\n\n        def _add_ns(path):\n            return self._xpath_ns(path, namespace)\n\n        def is_drm_protected(element):\n            return element.find(_add_ns('ContentProtection')) is not None\n\n        def extract_multisegment_info(element, ms_parent_info):\n            ms_info = ms_parent_info.copy()\n\n            # As per [1, 5.3.9.2.2] SegmentList and SegmentTemplate share some\n            # common attributes and elements.  We will only extract relevant\n            # for us.\n            def extract_common(source):\n                segment_timeline = source.find(_add_ns('SegmentTimeline'))\n                if segment_timeline is not None:\n                    s_e = segment_timeline.findall(_add_ns('S'))\n                    if s_e:\n                        ms_info['total_number'] = 0\n                        ms_info['s'] = []\n                        for s in s_e:\n                            r = int(s.get('r', 0))\n                            ms_info['total_number'] += 1 + r\n                            ms_info['s'].append({\n                                't': int(s.get('t', 0)),\n                                # @d is mandatory (see [1, 5.3.9.6.2, Table 17, page 60])\n                                'd': int(s.attrib['d']),\n                                'r': r,\n                            })\n                start_number = source.get('startNumber')\n                if start_number:\n                    ms_info['start_number'] = int(start_number)\n                timescale = source.get('timescale')\n                if timescale:\n                    ms_info['timescale'] = int(timescale)\n                segment_duration = source.get('duration')\n                if segment_duration:\n                    ms_info['segment_duration'] = float(segment_duration)\n\n            def extract_Initialization(source):\n                initialization = source.find(_add_ns('Initialization'))\n                if initialization is not None:\n                    ms_info['initialization_url'] = initialization.attrib['sourceURL']\n\n            segment_list = element.find(_add_ns('SegmentList'))\n            if segment_list is not None:\n                extract_common(segment_list)\n                extract_Initialization(segment_list)\n                segment_urls_e = segment_list.findall(_add_ns('SegmentURL'))\n                if segment_urls_e:\n                    ms_info['segment_urls'] = [segment.attrib['media'] for segment in segment_urls_e]\n            else:\n                segment_template = element.find(_add_ns('SegmentTemplate'))\n                if segment_template is not None:\n                    extract_common(segment_template)\n                    media = segment_template.get('media')\n                    if media:\n                        ms_info['media'] = media\n                    initialization = segment_template.get('initialization')\n                    if initialization:\n                        ms_info['initialization'] = initialization\n                    else:\n                        extract_Initialization(segment_template)\n            return ms_info\n\n        mpd_duration = parse_duration(mpd_doc.get('mediaPresentationDuration'))\n        formats = []\n        for period in mpd_doc.findall(_add_ns('Period')):\n            period_duration = parse_duration(period.get('duration')) or mpd_duration\n            period_ms_info = extract_multisegment_info(period, {\n                'start_number': 1,\n                'timescale': 1,\n            })\n            for adaptation_set in period.findall(_add_ns('AdaptationSet')):\n                if is_drm_protected(adaptation_set):\n                    continue\n                adaption_set_ms_info = extract_multisegment_info(adaptation_set, period_ms_info)\n                for representation in adaptation_set.findall(_add_ns('Representation')):\n                    if is_drm_protected(representation):\n                        continue\n                    representation_attrib = adaptation_set.attrib.copy()\n                    representation_attrib.update(representation.attrib)\n                    # According to [1, 5.3.7.2, Table 9, page 41], @mimeType is mandatory\n                    mime_type = representation_attrib['mimeType']\n                    content_type = mime_type.split('/')[0]\n                    if content_type == 'text':\n                        # TODO implement WebVTT downloading\n                        pass\n                    elif content_type in ('video', 'audio'):\n                        base_url = ''\n                        for element in (representation, adaptation_set, period, mpd_doc):\n                            base_url_e = element.find(_add_ns('BaseURL'))\n                            if base_url_e is not None:\n                                base_url = base_url_e.text + base_url\n                                if re.match(r'^https?://', base_url):\n                                    break\n                        if mpd_base_url and not re.match(r'^https?://', base_url):\n                            if not mpd_base_url.endswith('/') and not base_url.startswith('/'):\n                                mpd_base_url += '/'\n                            base_url = mpd_base_url + base_url\n                        representation_id = representation_attrib.get('id')\n                        lang = representation_attrib.get('lang')\n                        url_el = representation.find(_add_ns('BaseURL'))\n                        filesize = int_or_none(url_el.attrib.get('{http://youtube.com/yt/2012/10/10}contentLength') if url_el is not None else None)\n                        bandwidth = int_or_none(representation_attrib.get('bandwidth'))\n                        f = {\n                            'format_id': '%s-%s' % (mpd_id, representation_id) if mpd_id else representation_id,\n                            'url': base_url,\n                            'manifest_url': mpd_url,\n                            'ext': mimetype2ext(mime_type),\n                            'width': int_or_none(representation_attrib.get('width')),\n                            'height': int_or_none(representation_attrib.get('height')),\n                            'tbr': float_or_none(bandwidth, 1000),\n                            'asr': int_or_none(representation_attrib.get('audioSamplingRate')),\n                            'fps': int_or_none(representation_attrib.get('frameRate')),\n                            'language': lang if lang not in ('mul', 'und', 'zxx', 'mis') else None,\n                            'format_note': 'DASH %s' % content_type,\n                            'filesize': filesize,\n                            'container': mimetype2ext(mime_type) + '_dash',\n                        }\n                        f.update(parse_codecs(representation_attrib.get('codecs')))\n                        representation_ms_info = extract_multisegment_info(representation, adaption_set_ms_info)\n\n                        def prepare_template(template_name, identifiers):\n                            t = representation_ms_info[template_name]\n                            t = t.replace('$RepresentationID$', representation_id)\n                            t = re.sub(r'\\$(%s)\\$' % '|'.join(identifiers), r'%(\\1)d', t)\n                            t = re.sub(r'\\$(%s)%%([^$]+)\\$' % '|'.join(identifiers), r'%(\\1)\\2', t)\n                            t.replace('$$', '$')\n                            return t\n\n                        # @initialization is a regular template like @media one\n                        # so it should be handled just the same way (see\n                        # https://github.com/rg3/youtube-dl/issues/11605)\n                        if 'initialization' in representation_ms_info:\n                            initialization_template = prepare_template(\n                                'initialization',\n                                # As per [1, 5.3.9.4.2, Table 15, page 54] $Number$ and\n                                # $Time$ shall not be included for @initialization thus\n                                # only $Bandwidth$ remains\n                                ('Bandwidth', ))\n                            representation_ms_info['initialization_url'] = initialization_template % {\n                                'Bandwidth': bandwidth,\n                            }\n\n                        def location_key(location):\n                            return 'url' if re.match(r'^https?://', location) else 'path'\n\n                        if 'segment_urls' not in representation_ms_info and 'media' in representation_ms_info:\n\n                            media_template = prepare_template('media', ('Number', 'Bandwidth', 'Time'))\n                            media_location_key = location_key(media_template)\n\n                            # As per [1, 5.3.9.4.4, Table 16, page 55] $Number$ and $Time$\n                            # can't be used at the same time\n                            if '%(Number' in media_template and 's' not in representation_ms_info:\n                                segment_duration = None\n                                if 'total_number' not in representation_ms_info and 'segment_duration' in representation_ms_info:\n                                    segment_duration = float_or_none(representation_ms_info['segment_duration'], representation_ms_info['timescale'])\n                                    representation_ms_info['total_number'] = int(math.ceil(float(period_duration) / segment_duration))\n                                representation_ms_info['fragments'] = [{\n                                    media_location_key: media_template % {\n                                        'Number': segment_number,\n                                        'Bandwidth': bandwidth,\n                                    },\n                                    'duration': segment_duration,\n                                } for segment_number in range(\n                                    representation_ms_info['start_number'],\n                                    representation_ms_info['total_number'] + representation_ms_info['start_number'])]\n                            else:\n                                # $Number*$ or $Time$ in media template with S list available\n                                # Example $Number*$: http://www.svtplay.se/klipp/9023742/stopptid-om-bjorn-borg\n                                # Example $Time$: https://play.arkena.com/embed/avp/v2/player/media/b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe/1/129411\n                                representation_ms_info['fragments'] = []\n                                segment_time = 0\n                                segment_d = None\n                                segment_number = representation_ms_info['start_number']\n\n                                def add_segment_url():\n                                    segment_url = media_template % {\n                                        'Time': segment_time,\n                                        'Bandwidth': bandwidth,\n                                        'Number': segment_number,\n                                    }\n                                    representation_ms_info['fragments'].append({\n                                        media_location_key: segment_url,\n                                        'duration': float_or_none(segment_d, representation_ms_info['timescale']),\n                                    })\n\n                                for num, s in enumerate(representation_ms_info['s']):\n                                    segment_time = s.get('t') or segment_time\n                                    segment_d = s['d']\n                                    add_segment_url()\n                                    segment_number += 1\n                                    for r in range(s.get('r', 0)):\n                                        segment_time += segment_d\n                                        add_segment_url()\n                                        segment_number += 1\n                                    segment_time += segment_d\n                        elif 'segment_urls' in representation_ms_info and 's' in representation_ms_info:\n                            # No media template\n                            # Example: https://www.youtube.com/watch?v=iXZV5uAYMJI\n                            # or any YouTube dashsegments video\n                            fragments = []\n                            segment_index = 0\n                            timescale = representation_ms_info['timescale']\n                            for s in representation_ms_info['s']:\n                                duration = float_or_none(s['d'], timescale)\n                                for r in range(s.get('r', 0) + 1):\n                                    segment_uri = representation_ms_info['segment_urls'][segment_index]\n                                    fragments.append({\n                                        location_key(segment_uri): segment_uri,\n                                        'duration': duration,\n                                    })\n                                    segment_index += 1\n                            representation_ms_info['fragments'] = fragments\n                        elif 'segment_urls' in representation_ms_info:\n                            # Segment URLs with no SegmentTimeline\n                            # Example: https://www.seznam.cz/zpravy/clanek/cesko-zasahne-vitr-o-sile-vichrice-muze-byt-i-zivotu-nebezpecny-39091\n                            # https://github.com/rg3/youtube-dl/pull/14844\n                            fragments = []\n                            segment_duration = float_or_none(\n                                representation_ms_info['segment_duration'],\n                                representation_ms_info['timescale']) if 'segment_duration' in representation_ms_info else None\n                            for segment_url in representation_ms_info['segment_urls']:\n                                fragment = {\n                                    location_key(segment_url): segment_url,\n                                }\n                                if segment_duration:\n                                    fragment['duration'] = segment_duration\n                                fragments.append(fragment)\n                            representation_ms_info['fragments'] = fragments\n                        # NB: MPD manifest may contain direct URLs to unfragmented media.\n                        # No fragments key is present in this case.\n                        if 'fragments' in representation_ms_info:\n                            f.update({\n                                'fragment_base_url': base_url,\n                                'fragments': [],\n                                'protocol': 'http_dash_segments',\n                            })\n                            if 'initialization_url' in representation_ms_info:\n                                initialization_url = representation_ms_info['initialization_url']\n                                if not f.get('url'):\n                                    f['url'] = initialization_url\n                                f['fragments'].append({location_key(initialization_url): initialization_url})\n                            f['fragments'].extend(representation_ms_info['fragments'])\n                        # According to [1, 5.3.5.2, Table 7, page 35] @id of Representation\n                        # is not necessarily unique within a Period thus formats with\n                        # the same `format_id` are quite possible. There are numerous examples\n                        # of such manifests (see https://github.com/rg3/youtube-dl/issues/15111,\n                        # https://github.com/rg3/youtube-dl/issues/13919)\n                        full_info = formats_dict.get(representation_id, {}).copy()\n                        full_info.update(f)\n                        formats.append(full_info)\n                    else:\n                        self.report_warning('Unknown MIME type %s in DASH manifest' % mime_type)\n        return formats\n\n    def _extract_ism_formats(self, ism_url, video_id, ism_id=None, note=None, errnote=None, fatal=True):\n        res = self._download_webpage_handle(\n            ism_url, video_id,\n            note=note or 'Downloading ISM manifest',\n            errnote=errnote or 'Failed to download ISM manifest',\n            fatal=fatal)\n        if res is False:\n            return []\n        ism, urlh = res\n\n        return self._parse_ism_formats(\n            compat_etree_fromstring(ism.encode('utf-8')), urlh.geturl(), ism_id)\n\n    def _parse_ism_formats(self, ism_doc, ism_url, ism_id=None):\n        \"\"\"\n        Parse formats from ISM manifest.\n        References:\n         1. [MS-SSTR]: Smooth Streaming Protocol,\n            https://msdn.microsoft.com/en-us/library/ff469518.aspx\n        \"\"\"\n        if ism_doc.get('IsLive') == 'TRUE' or ism_doc.find('Protection') is not None:\n            return []\n\n        duration = int(ism_doc.attrib['Duration'])\n        timescale = int_or_none(ism_doc.get('TimeScale')) or 10000000\n\n        formats = []\n        for stream in ism_doc.findall('StreamIndex'):\n            stream_type = stream.get('Type')\n            if stream_type not in ('video', 'audio'):\n                continue\n            url_pattern = stream.attrib['Url']\n            stream_timescale = int_or_none(stream.get('TimeScale')) or timescale\n            stream_name = stream.get('Name')\n            for track in stream.findall('QualityLevel'):\n                fourcc = track.get('FourCC', 'AACL' if track.get('AudioTag') == '255' else None)\n                # TODO: add support for WVC1 and WMAP\n                if fourcc not in ('H264', 'AVC1', 'AACL'):\n                    self.report_warning('%s is not a supported codec' % fourcc)\n                    continue\n                tbr = int(track.attrib['Bitrate']) // 1000\n                # [1] does not mention Width and Height attributes. However,\n                # they're often present while MaxWidth and MaxHeight are\n                # missing, so should be used as fallbacks\n                width = int_or_none(track.get('MaxWidth') or track.get('Width'))\n                height = int_or_none(track.get('MaxHeight') or track.get('Height'))\n                sampling_rate = int_or_none(track.get('SamplingRate'))\n\n                track_url_pattern = re.sub(r'{[Bb]itrate}', track.attrib['Bitrate'], url_pattern)\n                track_url_pattern = compat_urlparse.urljoin(ism_url, track_url_pattern)\n\n                fragments = []\n                fragment_ctx = {\n                    'time': 0,\n                }\n                stream_fragments = stream.findall('c')\n                for stream_fragment_index, stream_fragment in enumerate(stream_fragments):\n                    fragment_ctx['time'] = int_or_none(stream_fragment.get('t')) or fragment_ctx['time']\n                    fragment_repeat = int_or_none(stream_fragment.get('r')) or 1\n                    fragment_ctx['duration'] = int_or_none(stream_fragment.get('d'))\n                    if not fragment_ctx['duration']:\n                        try:\n                            next_fragment_time = int(stream_fragment[stream_fragment_index + 1].attrib['t'])\n                        except IndexError:\n                            next_fragment_time = duration\n                        fragment_ctx['duration'] = (next_fragment_time - fragment_ctx['time']) / fragment_repeat\n                    for _ in range(fragment_repeat):\n                        fragments.append({\n                            'url': re.sub(r'{start[ _]time}', compat_str(fragment_ctx['time']), track_url_pattern),\n                            'duration': fragment_ctx['duration'] / stream_timescale,\n                        })\n                        fragment_ctx['time'] += fragment_ctx['duration']\n\n                format_id = []\n                if ism_id:\n                    format_id.append(ism_id)\n                if stream_name:\n                    format_id.append(stream_name)\n                format_id.append(compat_str(tbr))\n\n                formats.append({\n                    'format_id': '-'.join(format_id),\n                    'url': ism_url,\n                    'manifest_url': ism_url,\n                    'ext': 'ismv' if stream_type == 'video' else 'isma',\n                    'width': width,\n                    'height': height,\n                    'tbr': tbr,\n                    'asr': sampling_rate,\n                    'vcodec': 'none' if stream_type == 'audio' else fourcc,\n                    'acodec': 'none' if stream_type == 'video' else fourcc,\n                    'protocol': 'ism',\n                    'fragments': fragments,\n                    '_download_params': {\n                        'duration': duration,\n                        'timescale': stream_timescale,\n                        'width': width or 0,\n                        'height': height or 0,\n                        'fourcc': fourcc,\n                        'codec_private_data': track.get('CodecPrivateData'),\n                        'sampling_rate': sampling_rate,\n                        'channels': int_or_none(track.get('Channels', 2)),\n                        'bits_per_sample': int_or_none(track.get('BitsPerSample', 16)),\n                        'nal_unit_length_field': int_or_none(track.get('NALUnitLengthField', 4)),\n                    },\n                })\n        return formats\n\n    def _parse_html5_media_entries(self, base_url, webpage, video_id, m3u8_id=None, m3u8_entry_protocol='m3u8', mpd_id=None, preference=None):\n        def absolute_url(video_url):\n            return compat_urlparse.urljoin(base_url, video_url)\n\n        def parse_content_type(content_type):\n            if not content_type:\n                return {}\n            ctr = re.search(r'(?P<mimetype>[^/]+/[^;]+)(?:;\\s*codecs=\"?(?P<codecs>[^\"]+))?', content_type)\n            if ctr:\n                mimetype, codecs = ctr.groups()\n                f = parse_codecs(codecs)\n                f['ext'] = mimetype2ext(mimetype)\n                return f\n            return {}\n\n        def _media_formats(src, cur_media_type, type_info={}):\n            full_url = absolute_url(src)\n            ext = type_info.get('ext') or determine_ext(full_url)\n            if ext == 'm3u8':\n                is_plain_url = False\n                formats = self._extract_m3u8_formats(\n                    full_url, video_id, ext='mp4',\n                    entry_protocol=m3u8_entry_protocol, m3u8_id=m3u8_id,\n                    preference=preference, fatal=False)\n            elif ext == 'mpd':\n                is_plain_url = False\n                formats = self._extract_mpd_formats(\n                    full_url, video_id, mpd_id=mpd_id, fatal=False)\n            else:\n                is_plain_url = True\n                formats = [{\n                    'url': full_url,\n                    'vcodec': 'none' if cur_media_type == 'audio' else None,\n                }]\n            return is_plain_url, formats\n\n        entries = []\n        # amp-video and amp-audio are very similar to their HTML5 counterparts\n        # so we wll include them right here (see\n        # https://www.ampproject.org/docs/reference/components/amp-video)\n        media_tags = [(media_tag, media_type, '')\n                      for media_tag, media_type\n                      in re.findall(r'(?s)(<(?:amp-)?(video|audio)[^>]*/>)', webpage)]\n        media_tags.extend(re.findall(\n            # We only allow video|audio followed by a whitespace or '>'.\n            # Allowing more characters may end up in significant slow down (see\n            # https://github.com/rg3/youtube-dl/issues/11979, example URL:\n            # http://www.porntrex.com/maps/videositemap.xml).\n            r'(?s)(<(?P<tag>(?:amp-)?(?:video|audio))(?:\\s+[^>]*)?>)(.*?)</(?P=tag)>', webpage))\n        for media_tag, media_type, media_content in media_tags:\n            media_info = {\n                'formats': [],\n                'subtitles': {},\n            }\n            media_attributes = extract_attributes(media_tag)\n            src = media_attributes.get('src')\n            if src:\n                _, formats = _media_formats(src, media_type)\n                media_info['formats'].extend(formats)\n            media_info['thumbnail'] = media_attributes.get('poster')\n            if media_content:\n                for source_tag in re.findall(r'<source[^>]+>', media_content):\n                    source_attributes = extract_attributes(source_tag)\n                    src = source_attributes.get('src')\n                    if not src:\n                        continue\n                    f = parse_content_type(source_attributes.get('type'))\n                    is_plain_url, formats = _media_formats(src, media_type, f)\n                    if is_plain_url:\n                        # res attribute is not standard but seen several times\n                        # in the wild\n                        f.update({\n                            'height': int_or_none(source_attributes.get('res')),\n                            'format_id': source_attributes.get('label'),\n                        })\n                        f.update(formats[0])\n                        media_info['formats'].append(f)\n                    else:\n                        media_info['formats'].extend(formats)\n                for track_tag in re.findall(r'<track[^>]+>', media_content):\n                    track_attributes = extract_attributes(track_tag)\n                    kind = track_attributes.get('kind')\n                    if not kind or kind in ('subtitles', 'captions'):\n                        src = track_attributes.get('src')\n                        if not src:\n                            continue\n                        lang = track_attributes.get('srclang') or track_attributes.get('lang') or track_attributes.get('label')\n                        media_info['subtitles'].setdefault(lang, []).append({\n                            'url': absolute_url(src),\n                        })\n            if media_info['formats'] or media_info['subtitles']:\n                entries.append(media_info)\n        return entries\n\n    def _extract_akamai_formats(self, manifest_url, video_id, hosts={}):\n        formats = []\n        hdcore_sign = 'hdcore=3.7.0'\n        f4m_url = re.sub(r'(https?://[^/]+)/i/', r'\\1/z/', manifest_url).replace('/master.m3u8', '/manifest.f4m')\n        hds_host = hosts.get('hds')\n        if hds_host:\n            f4m_url = re.sub(r'(https?://)[^/]+', r'\\1' + hds_host, f4m_url)\n        if 'hdcore=' not in f4m_url:\n            f4m_url += ('&' if '?' in f4m_url else '?') + hdcore_sign\n        f4m_formats = self._extract_f4m_formats(\n            f4m_url, video_id, f4m_id='hds', fatal=False)\n        for entry in f4m_formats:\n            entry.update({'extra_param_to_segment_url': hdcore_sign})\n        formats.extend(f4m_formats)\n        m3u8_url = re.sub(r'(https?://[^/]+)/z/', r'\\1/i/', manifest_url).replace('/manifest.f4m', '/master.m3u8')\n        hls_host = hosts.get('hls')\n        if hls_host:\n            m3u8_url = re.sub(r'(https?://)[^/]+', r'\\1' + hls_host, m3u8_url)\n        formats.extend(self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native',\n            m3u8_id='hls', fatal=False))\n        return formats\n\n    def _extract_wowza_formats(self, url, video_id, m3u8_entry_protocol='m3u8_native', skip_protocols=[]):\n        query = compat_urlparse.urlparse(url).query\n        url = re.sub(r'/(?:manifest|playlist|jwplayer)\\.(?:m3u8|f4m|mpd|smil)', '', url)\n        mobj = re.search(\n            r'(?:(?:http|rtmp|rtsp)(?P<s>s)?:)?(?P<url>//[^?]+)', url)\n        url_base = mobj.group('url')\n        http_base_url = '%s%s:%s' % ('http', mobj.group('s') or '', url_base)\n        formats = []\n\n        def manifest_url(manifest):\n            m_url = '%s/%s' % (http_base_url, manifest)\n            if query:\n                m_url += '?%s' % query\n            return m_url\n\n        if 'm3u8' not in skip_protocols:\n            formats.extend(self._extract_m3u8_formats(\n                manifest_url('playlist.m3u8'), video_id, 'mp4',\n                m3u8_entry_protocol, m3u8_id='hls', fatal=False))\n        if 'f4m' not in skip_protocols:\n            formats.extend(self._extract_f4m_formats(\n                manifest_url('manifest.f4m'),\n                video_id, f4m_id='hds', fatal=False))\n        if 'dash' not in skip_protocols:\n            formats.extend(self._extract_mpd_formats(\n                manifest_url('manifest.mpd'),\n                video_id, mpd_id='dash', fatal=False))\n        if re.search(r'(?:/smil:|\\.smil)', url_base):\n            if 'smil' not in skip_protocols:\n                rtmp_formats = self._extract_smil_formats(\n                    manifest_url('jwplayer.smil'),\n                    video_id, fatal=False)\n                for rtmp_format in rtmp_formats:\n                    rtsp_format = rtmp_format.copy()\n                    rtsp_format['url'] = '%s/%s' % (rtmp_format['url'], rtmp_format['play_path'])\n                    del rtsp_format['play_path']\n                    del rtsp_format['ext']\n                    rtsp_format.update({\n                        'url': rtsp_format['url'].replace('rtmp://', 'rtsp://'),\n                        'format_id': rtmp_format['format_id'].replace('rtmp', 'rtsp'),\n                        'protocol': 'rtsp',\n                    })\n                    formats.extend([rtmp_format, rtsp_format])\n        else:\n            for protocol in ('rtmp', 'rtsp'):\n                if protocol not in skip_protocols:\n                    formats.append({\n                        'url': '%s:%s' % (protocol, url_base),\n                        'format_id': protocol,\n                        'protocol': protocol,\n                    })\n        return formats\n\n    def _find_jwplayer_data(self, webpage, video_id=None, transform_source=js_to_json):\n        mobj = re.search(\n            r'(?s)jwplayer\\((?P<quote>[\\'\"])[^\\'\" ]+(?P=quote)\\)(?!</script>).*?\\.setup\\s*\\((?P<options>[^)]+)\\)',\n            webpage)\n        if mobj:\n            try:\n                jwplayer_data = self._parse_json(mobj.group('options'),\n                                                 video_id=video_id,\n                                                 transform_source=transform_source)\n            except ExtractorError:\n                pass\n            else:\n                if isinstance(jwplayer_data, dict):\n                    return jwplayer_data\n\n    def _extract_jwplayer_data(self, webpage, video_id, *args, **kwargs):\n        jwplayer_data = self._find_jwplayer_data(\n            webpage, video_id, transform_source=js_to_json)\n        return self._parse_jwplayer_data(\n            jwplayer_data, video_id, *args, **kwargs)\n\n    def _parse_jwplayer_data(self, jwplayer_data, video_id=None, require_title=True,\n                             m3u8_id=None, mpd_id=None, rtmp_params=None, base_url=None):\n        # JWPlayer backward compatibility: flattened playlists\n        # https://github.com/jwplayer/jwplayer/blob/v7.4.3/src/js/api/config.js#L81-L96\n        if 'playlist' not in jwplayer_data:\n            jwplayer_data = {'playlist': [jwplayer_data]}\n\n        entries = []\n\n        # JWPlayer backward compatibility: single playlist item\n        # https://github.com/jwplayer/jwplayer/blob/v7.7.0/src/js/playlist/playlist.js#L10\n        if not isinstance(jwplayer_data['playlist'], list):\n            jwplayer_data['playlist'] = [jwplayer_data['playlist']]\n\n        for video_data in jwplayer_data['playlist']:\n            # JWPlayer backward compatibility: flattened sources\n            # https://github.com/jwplayer/jwplayer/blob/v7.4.3/src/js/playlist/item.js#L29-L35\n            if 'sources' not in video_data:\n                video_data['sources'] = [video_data]\n\n            this_video_id = video_id or video_data['mediaid']\n\n            formats = self._parse_jwplayer_formats(\n                video_data['sources'], video_id=this_video_id, m3u8_id=m3u8_id,\n                mpd_id=mpd_id, rtmp_params=rtmp_params, base_url=base_url)\n\n            subtitles = {}\n            tracks = video_data.get('tracks')\n            if tracks and isinstance(tracks, list):\n                for track in tracks:\n                    if not isinstance(track, dict):\n                        continue\n                    track_kind = track.get('kind')\n                    if not track_kind or not isinstance(track_kind, compat_str):\n                        continue\n                    if track_kind.lower() not in ('captions', 'subtitles'):\n                        continue\n                    track_url = urljoin(base_url, track.get('file'))\n                    if not track_url:\n                        continue\n                    subtitles.setdefault(track.get('label') or 'en', []).append({\n                        'url': self._proto_relative_url(track_url)\n                    })\n\n            entry = {\n                'id': this_video_id,\n                'title': unescapeHTML(video_data['title'] if require_title else video_data.get('title')),\n                'description': video_data.get('description'),\n                'thumbnail': self._proto_relative_url(video_data.get('image')),\n                'timestamp': int_or_none(video_data.get('pubdate')),\n                'duration': float_or_none(jwplayer_data.get('duration') or video_data.get('duration')),\n                'subtitles': subtitles,\n            }\n            # https://github.com/jwplayer/jwplayer/blob/master/src/js/utils/validator.js#L32\n            if len(formats) == 1 and re.search(r'^(?:http|//).*(?:youtube\\.com|youtu\\.be)/.+', formats[0]['url']):\n                entry.update({\n                    '_type': 'url_transparent',\n                    'url': formats[0]['url'],\n                })\n            else:\n                self._sort_formats(formats)\n                entry['formats'] = formats\n            entries.append(entry)\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            return self.playlist_result(entries)\n\n    def _parse_jwplayer_formats(self, jwplayer_sources_data, video_id=None,\n                                m3u8_id=None, mpd_id=None, rtmp_params=None, base_url=None):\n        urls = []\n        formats = []\n        for source in jwplayer_sources_data:\n            if not isinstance(source, dict):\n                continue\n            source_url = self._proto_relative_url(source.get('file'))\n            if not source_url:\n                continue\n            if base_url:\n                source_url = compat_urlparse.urljoin(base_url, source_url)\n            if source_url in urls:\n                continue\n            urls.append(source_url)\n            source_type = source.get('type') or ''\n            ext = mimetype2ext(source_type) or determine_ext(source_url)\n            if source_type == 'hls' or ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    source_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id=m3u8_id, fatal=False))\n            elif source_type == 'dash' or ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    source_url, video_id, mpd_id=mpd_id, fatal=False))\n            elif ext == 'smil':\n                formats.extend(self._extract_smil_formats(\n                    source_url, video_id, fatal=False))\n            # https://github.com/jwplayer/jwplayer/blob/master/src/js/providers/default.js#L67\n            elif source_type.startswith('audio') or ext in (\n                    'oga', 'aac', 'mp3', 'mpeg', 'vorbis'):\n                formats.append({\n                    'url': source_url,\n                    'vcodec': 'none',\n                    'ext': ext,\n                })\n            else:\n                height = int_or_none(source.get('height'))\n                if height is None:\n                    # Often no height is provided but there is a label in\n                    # format like \"1080p\", \"720p SD\", or 1080.\n                    height = int_or_none(self._search_regex(\n                        r'^(\\d{3,4})[pP]?(?:\\b|$)', compat_str(source.get('label') or ''),\n                        'height', default=None))\n                a_format = {\n                    'url': source_url,\n                    'width': int_or_none(source.get('width')),\n                    'height': height,\n                    'tbr': int_or_none(source.get('bitrate')),\n                    'ext': ext,\n                }\n                if source_url.startswith('rtmp'):\n                    a_format['ext'] = 'flv'\n                    # See com/longtailvideo/jwplayer/media/RTMPMediaProvider.as\n                    # of jwplayer.flash.swf\n                    rtmp_url_parts = re.split(\n                        r'((?:mp4|mp3|flv):)', source_url, 1)\n                    if len(rtmp_url_parts) == 3:\n                        rtmp_url, prefix, play_path = rtmp_url_parts\n                        a_format.update({\n                            'url': rtmp_url,\n                            'play_path': prefix + play_path,\n                        })\n                    if rtmp_params:\n                        a_format.update(rtmp_params)\n                formats.append(a_format)\n        return formats\n\n    def _live_title(self, name):\n        \"\"\" Generate the title for a live video \"\"\"\n        now = datetime.datetime.now()\n        now_str = now.strftime('%Y-%m-%d %H:%M')\n        return name + ' ' + now_str\n\n    def _int(self, v, name, fatal=False, **kwargs):\n        res = int_or_none(v, **kwargs)\n        if 'get_attr' in kwargs:\n            print(getattr(v, kwargs['get_attr']))\n        if res is None:\n            msg = 'Failed to extract %s: Could not parse value %r' % (name, v)\n            if fatal:\n                raise ExtractorError(msg)\n            else:\n                self._downloader.report_warning(msg)\n        return res\n\n    def _float(self, v, name, fatal=False, **kwargs):\n        res = float_or_none(v, **kwargs)\n        if res is None:\n            msg = 'Failed to extract %s: Could not parse value %r' % (name, v)\n            if fatal:\n                raise ExtractorError(msg)\n            else:\n                self._downloader.report_warning(msg)\n        return res\n\n    def _set_cookie(self, domain, name, value, expire_time=None, port=None,\n                    path='/', secure=False, discard=False, rest={}, **kwargs):\n        cookie = compat_cookiejar.Cookie(\n            0, name, value, port, port is not None, domain, True,\n            domain.startswith('.'), path, True, secure, expire_time,\n            discard, None, None, rest)\n        self._downloader.cookiejar.set_cookie(cookie)\n\n    def _get_cookies(self, url):\n        \"\"\" Return a compat_cookies.SimpleCookie with the cookies for the url \"\"\"\n        req = sanitized_Request(url)\n        self._downloader.cookiejar.add_cookie_header(req)\n        return compat_cookies.SimpleCookie(req.get_header('Cookie'))\n\n    def get_testcases(self, include_onlymatching=False):\n        t = getattr(self, '_TEST', None)\n        if t:\n            assert not hasattr(self, '_TESTS'), \\\n                '%s has _TEST and _TESTS' % type(self).__name__\n            tests = [t]\n        else:\n            tests = getattr(self, '_TESTS', [])\n        for t in tests:\n            if not include_onlymatching and t.get('only_matching', False):\n                continue\n            t['name'] = type(self).__name__[:-len('IE')]\n            yield t\n\n    def is_suitable(self, age_limit):\n        \"\"\" Test whether the extractor is generally suitable for the given\n        age limit (i.e. pornographic sites are not, all others usually are) \"\"\"\n\n        any_restricted = False\n        for tc in self.get_testcases(include_onlymatching=False):\n            if tc.get('playlist', []):\n                tc = tc['playlist'][0]\n            is_restricted = age_restricted(\n                tc.get('info_dict', {}).get('age_limit'), age_limit)\n            if not is_restricted:\n                return True\n            any_restricted = any_restricted or is_restricted\n        return not any_restricted\n\n    def extract_subtitles(self, *args, **kwargs):\n        if (self._downloader.params.get('writesubtitles', False) or\n                self._downloader.params.get('listsubtitles')):\n            return self._get_subtitles(*args, **kwargs)\n        return {}\n\n    def _get_subtitles(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')\n\n    @staticmethod\n    def _merge_subtitle_items(subtitle_list1, subtitle_list2):\n        \"\"\" Merge subtitle items for one language. Items with duplicated URLs\n        will be dropped. \"\"\"\n        list1_urls = set([item['url'] for item in subtitle_list1])\n        ret = list(subtitle_list1)\n        ret.extend([item for item in subtitle_list2 if item['url'] not in list1_urls])\n        return ret\n\n    @classmethod\n    def _merge_subtitles(cls, subtitle_dict1, subtitle_dict2):\n        \"\"\" Merge two subtitle dictionaries, language by language. \"\"\"\n        ret = dict(subtitle_dict1)\n        for lang in subtitle_dict2:\n            ret[lang] = cls._merge_subtitle_items(subtitle_dict1.get(lang, []), subtitle_dict2[lang])\n        return ret\n\n    def extract_automatic_captions(self, *args, **kwargs):\n        if (self._downloader.params.get('writeautomaticsub', False) or\n                self._downloader.params.get('listsubtitles')):\n            return self._get_automatic_captions(*args, **kwargs)\n        return {}\n\n    def _get_automatic_captions(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')\n\n    def mark_watched(self, *args, **kwargs):\n        if (self._downloader.params.get('mark_watched', False) and\n                (self._get_login_info()[0] is not None or\n                    self._downloader.params.get('cookiefile') is not None)):\n            self._mark_watched(*args, **kwargs)\n\n    def _mark_watched(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')\n\n    def geo_verification_headers(self):\n        headers = {}\n        geo_verification_proxy = self._downloader.params.get('geo_verification_proxy')\n        if geo_verification_proxy:\n            headers['Ytdl-request-proxy'] = geo_verification_proxy\n        return headers\n\n    def _generic_id(self, url):\n        return compat_urllib_parse_unquote(os.path.splitext(url.rstrip('/').split('/')[-1])[0])\n\n    def _generic_title(self, url):\n        return compat_urllib_parse_unquote(os.path.splitext(url_basename(url))[0])\n\n\nclass SearchInfoExtractor(InfoExtractor):\n    \"\"\"\n    Base class for paged search queries extractors.\n    They accept URLs in the format _SEARCH_KEY(|all|[0-9]):{query}\n    Instances should define _SEARCH_KEY and _MAX_RESULTS.\n    \"\"\"\n\n    @classmethod\n    def _make_valid_url(cls):\n        return r'%s(?P<prefix>|[1-9][0-9]*|all):(?P<query>[\\s\\S]+)' % cls._SEARCH_KEY\n\n    @classmethod\n    def suitable(cls, url):\n        return re.match(cls._make_valid_url(), url) is not None\n\n    def _real_extract(self, query):\n        mobj = re.match(self._make_valid_url(), query)\n        if mobj is None:\n            raise ExtractorError('Invalid search query \"%s\"' % query)\n\n        prefix = mobj.group('prefix')\n        query = mobj.group('query')\n        if prefix == '':\n            return self._get_n_results(query, 1)\n        elif prefix == 'all':\n            return self._get_n_results(query, self._MAX_RESULTS)\n        else:\n            n = int(prefix)\n            if n <= 0:\n                raise ExtractorError('invalid download number %s for query \"%s\"' % (n, query))\n            elif n > self._MAX_RESULTS:\n                self._downloader.report_warning('%s returns max %i results (you requested %i)' % (self._SEARCH_KEY, self._MAX_RESULTS, n))\n                n = self._MAX_RESULTS\n            return self._get_n_results(query, n)\n\n    def _get_n_results(self, query, n):\n        \"\"\"Get a specified number of results for a query\ny\n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport base64\nimport datetime\nimport hashlib\nimport json\nimport netrc\nimport os\nimport random\nimport re\nimport socket\nimport sys\nimport time\nimport math\n\nfrom ..compat import (\n    compat_cookiejar,\n    compat_cookies,\n    compat_etree_fromstring,\n    compat_getpass,\n    compat_http_client,\n    compat_os_name,\n    compat_str,\n    compat_urllib_error,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlencode,\n    compat_urllib_request,\n    compat_urlparse,\n    compat_xml_parse_error,\n)\nfrom ..downloader.f4m import (\n    get_base_url,\n    remove_encrypted_media,\n)\nfrom ..utils import (\n    NO_DEFAULT,\n    age_restricted,\n    base_url,\n    bug_reports_message,\n    clean_html,\n    compiled_regex_type,\n    determine_ext,\n    determine_protocol,\n    error_to_compat_str,\n    ExtractorError,\n    extract_attributes,\n    fix_xml_ampersands,\n    float_or_none,\n    GeoRestrictedError,\n    GeoUtils,\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    orderedSet,\n    parse_codecs,\n    parse_duration,\n    parse_iso8601,\n    parse_m3u8_attributes,\n    RegexNotFoundError,\n    sanitized_Request,\n    sanitize_filename,\n    unescapeHTML,\n    unified_strdate,\n    unified_timestamp,\n    update_Request,\n    update_url_query,\n    urljoin,\n    url_basename,\n    xpath_element,\n    xpath_text,\n    xpath_with_ns,\n)\n\n\nclass InfoExtractor(object):\n    \"\"\"Information Extractor class.\n\n    Information extractors are the classes that, given a URL, extract\n    information about the video (or videos) the URL refers to. This\n    information includes the real video URL, the video title, author and\n    others. The information is stored in a dictionary which is then\n    passed to the YoutubeDL. The YoutubeDL processes this\n    information possibly downloading the video to the file system, among\n    other possible outcomes.\n\n    The type field determines the type of the result.\n    By far the most common value (and the default if _type is missing) is\n    \"video\", which indicates a single video.\n\n    For a video, the dictionaries must include the following fields:\n\n    id:             Video identifier.\n    title:          Video title, unescaped.\n\n    Additionally, it must contain either a formats entry or a url one:\n\n    formats:        A list of dictionaries for each format available, ordered\n                    from worst to best quality.\n\n                    Potential fields:\n                    * url        Mandatory. The URL of the video file\n                    * manifest_url\n                                 The URL of the manifest file in case of\n                                 fragmented media (DASH, hls, hds)\n                    * ext        Will be calculated from URL if missing\n                    * format     A human-readable description of the format\n                                 (\"mp4 container with h264/opus\").\n                                 Calculated from the format_id, width, height.\n                                 and format_note fields if missing.\n                    * format_id  A short description of the format\n                                 (\"mp4_h264_opus\" or \"19\").\n                                Technically optional, but strongly recommended.\n                    * format_note Additional info about the format\n                                 (\"3D\" or \"DASH video\")\n                    * width      Width of the video, if known\n                    * height     Height of the video, if known\n                    * resolution Textual description of width and height\n                    * tbr        Average bitrate of audio and video in KBit/s\n                    * abr        Average audio bitrate in KBit/s\n                    * acodec     Name of the audio codec in use\n                    * asr        Audio sampling rate in Hertz\n                    * vbr        Average video bitrate in KBit/s\n                    * fps        Frame rate\n                    * vcodec     Name of the video codec in use\n                    * container  Name of the container format\n                    * filesize   The number of bytes, if known in advance\n                    * filesize_approx  An estimate for the number of bytes\n                    * player_url SWF Player URL (used for rtmpdump).\n                    * protocol   The protocol that will be used for the actual\n                                 download, lower-case.\n                                 \"http\", \"https\", \"rtsp\", \"rtmp\", \"rtmpe\",\n                                 \"m3u8\", \"m3u8_native\" or \"http_dash_segments\".\n                    * fragment_base_url\n                                 Base URL for fragments. Each fragment's path\n                                 value (if present) will be relative to\n                                 this URL.\n                    * fragments  A list of fragments of a fragmented media.\n                                 Each fragment entry must contain either an url\n                                 or a path. If an url is present it should be\n                                 considered by a client. Otherwise both path and\n                                 fragment_base_url must be present. Here is\n                                 the list of all potential fields:\n                                 * \"url\" - fragment's URL\n                                 * \"path\" - fragment's path relative to\n                                            fragment_base_url\n                                 * \"duration\" (optional, int or float)\n                                 * \"filesize\" (optional, int)\n                    * preference Order number of this format. If this field is\n                                 present and not None, the formats get sorted\n                                 by this field, regardless of all other values.\n                                 -1 for default (order by other properties),\n                                 -2 or smaller for less than default.\n                                 < -1000 to hide the format (if there is\n                                    another one which is strictly better)\n                    * language   Language code, e.g. \"de\" or \"en-US\".\n                    * language_preference  Is this in the language mentioned in\n                                 the URL?\n                                 10 if it's what the URL is about,\n                                 -1 for default (don't know),\n                                 -10 otherwise, other values reserved for now.\n                    * quality    Order number of the video quality of this\n                                 format, irrespective of the file format.\n                                 -1 for default (order by other properties),\n                                 -2 or smaller for less than default.\n                    * source_preference  Order number for this video source\n                                  (quality takes higher priority)\n                                 -1 for default (order by other properties),\n                                 -2 or smaller for less than default.\n                    * http_headers  A dictionary of additional HTTP headers\n                                 to add to the request.\n                    * stretched_ratio  If given and not 1, indicates that the\n                                 video's pixels are not square.\n                                 width : height ratio as float.\n                    * no_resume  The server does not support resuming the\n                                 (HTTP or RTMP) download. Boolean.\n                    * downloader_options  A dictionary of downloader options as\n                                 described in FileDownloader\n\n    url:            Final video URL.\n    ext:            Video filename extension.\n    format:         The video format, defaults to ext (used for --get-format)\n    player_url:     SWF Player URL (used for rtmpdump).\n\n    The following fields are optional:\n\n    alt_title:      A secondary title of the video.\n    display_id      An alternative identifier for the video, not necessarily\n                    unique, but available before title. Typically, id is\n                    something like \"4234987\", title \"Dancing naked mole rats\",\n                    and display_id \"dancing-naked-mole-rats\"\n    thumbnails:     A list of dictionaries, with the following entries:\n                        * \"id\" (optional, string) - Thumbnail format ID\n                        * \"url\"\n                        * \"preference\" (optional, int) - quality of the image\n                        * \"width\" (optional, int)\n                        * \"height\" (optional, int)\n                        * \"resolution\" (optional, string \"{width}x{height\"},\n                                        deprecated)\n                        * \"filesize\" (optional, int)\n    thumbnail:      Full URL to a video thumbnail image.\n    description:    Full video description.\n    uploader:       Full name of the video uploader.\n    license:        License name the video is licensed under.\n    creator:        The creator of the video.\n    release_date:   The date (YYYYMMDD) when the video was released.\n    timestamp:      UNIX timestamp of the moment the video became available.\n    upload_date:    Video upload date (YYYYMMDD).\n                    If not explicitly set, calculated from timestamp.\n    uploader_id:    Nickname or id of the video uploader.\n    uploader_url:   Full URL to a personal webpage of the video uploader.\n    location:       Physical location where the video was filmed.\n    subtitles:      The available subtitles as a dictionary in the format\n                    {tag: subformats}. \"tag\" is usually a language code, and\n                    \"subformats\" is a list sorted from lower to higher\n                    preference, each element is a dictionary with the \"ext\"\n                    entry and one of:\n                        * \"data\": The subtitles file contents\n                        * \"url\": A URL pointing to the subtitles file\n                    \"ext\" will be calculated from URL if missing\n    automatic_captions: Like 'subtitles', used by the YoutubeIE for\n                    automatically generated captions\n    duration:       Length of the video in seconds, as an integer or float.\n    view_count:     How many users have watched the video on the platform.\n    like_count:     Number of positive ratings of the video\n    dislike_count:  Number of negative ratings of the video\n    repost_count:   Number of reposts of the video\n    average_rating: Average rating give by users, the scale used depends on the webpage\n    comment_count:  Number of comments on the video\n    comments:       A list of comments, each with one or more of the following\n                    properties (all but one of text or html optional):\n                        * \"author\" - human-readable name of the comment author\n                        * \"author_id\" - user ID of the comment author\n                        * \"id\" - Comment ID\n                        * \"html\" - Comment as HTML\n                        * \"text\" - Plain text of the comment\n                        * \"timestamp\" - UNIX timestamp of comment\n                        * \"parent\" - ID of the comment this one is replying to.\n                                     Set to \"root\" to indicate that this is a\n                                     comment to the original video.\n    age_limit:      Age restriction for the video, as an integer (years)\n    webpage_url:    The URL to the video webpage, if given to youtube-dl it\n                    should allow to get the same result again. (It will be set\n                    by YoutubeDL if it's missing)\n    categories:     A list of categories that the video falls in, for example\n                    [\"Sports\", \"Berlin\"]\n    tags:           A list of tags assigned to the video, e.g. [\"sweden\", \"pop music\"]\n    is_live:        True, False, or None (=unknown). Whether this video is a\n                    live stream that goes on instead of a fixed-length video.\n    start_time:     Time in seconds where the reproduction should start, as\n                    specified in the URL.\n    end_time:       Time in seconds where the reproduction should end, as\n                    specified in the URL.\n    chapters:       A list of dictionaries, with the following entries:\n                        * \"start_time\" - The start time of the chapter in seconds\n                        * \"end_time\" - The end time of the chapter in seconds\n                        * \"title\" (optional, string)\n\n    The following fields should only be used when the video belongs to some logical\n    chapter or section:\n\n    chapter:        Name or title of the chapter the video belongs to.\n    chapter_number: Number of the chapter the video belongs to, as an integer.\n    chapter_id:     Id of the chapter the video belongs to, as a unicode string.\n\n    The following fields should only be used when the video is an episode of some\n    series, programme or podcast:\n\n    series:         Title of the series or programme the video episode belongs to.\n    season:         Title of the season the video episode belongs to.\n    season_number:  Number of the season the video episode belongs to, as an integer.\n    season_id:      Id of the season the video episode belongs to, as a unicode string.\n    episode:        Title of the video episode. Unlike mandatory video title field,\n                    this field should denote the exact title of the video episode\n                    without any kind of decoration.\n    episode_number: Number of the video episode within a season, as an integer.\n    episode_id:     Id of the video episode, as a unicode string.\n\n    The following fields should only be used when the media is a track or a part of\n    a music album:\n\n    track:          Title of the track.\n    track_number:   Number of the track within an album or a disc, as an integer.\n    track_id:       Id of the track (useful in case of custom indexing, e.g. 6.iii),\n                    as a unicode string.\n    artist:         Artist(s) of the track.\n    genre:          Genre(s) of the track.\n    album:          Title of the album the track belongs to.\n    album_type:     Type of the album (e.g. \"Demo\", \"Full-length\", \"Split\", \"Compilation\", etc).\n    album_artist:   List of all artists appeared on the album (e.g.\n                    \"Ash Borer / Fell Voices\" or \"Various Artists\", useful for splits\n                    and compilations).\n    disc_number:    Number of the disc or other physical medium the track belongs to,\n                    as an integer.\n    release_year:   Year (YYYY) when the album was released.\n\n    Unless mentioned otherwise, the fields should be Unicode strings.\n\n    Unless mentioned otherwise, None is equivalent to absence of information.\n\n\n    _type \"playlist\" indicates multiple videos.\n    There must be a key \"entries\", which is a list, an iterable, or a PagedList\n    object, each element of which is a valid dictionary by this specification.\n\n    Additionally, playlists can have \"id\", \"title\", \"description\", \"uploader\",\n    \"uploader_id\", \"uploader_url\" attributes with the same semantics as videos\n    (see above).\n\n\n    _type \"multi_video\" indicates that there are multiple videos that\n    form a single show, for examples multiple acts of an opera or TV episode.\n    It must have an entries key like a playlist and contain all the keys\n    required for a video at the same time.\n\n\n    _type \"url\" indicates that the video must be extracted from another\n    location, possibly by a different extractor. Its only required key is:\n    \"url\" - the next URL to extract.\n    The key \"ie_key\" can be set to the class name (minus the trailing \"IE\",\n    e.g. \"Youtube\") if the extractor class is known in advance.\n    Additionally, the dictionary may have any properties of the resolved entity\n    known in advance, for example \"title\" if the title of the referred video is\n    known ahead of time.\n\n\n    _type \"url_transparent\" entities have the same specification as \"url\", but\n    indicate that the given additional information is more precise than the one\n    associated with the resolved URL.\n    This is useful when a site employs a video service that hosts the video and\n    its technical metadata, but that video service does not embed a useful\n    title, description etc.\n\n\n    Subclasses of this one should re-define the _real_initialize() and\n    _real_extract() methods and define a _VALID_URL regexp.\n    Probably, they should also be added to the list of extractors.\n\n    _GEO_BYPASS attribute may be set to False in order to disable\n    geo restriction bypass mechanisms for a particular extractor.\n    Though it won't disable explicit geo restriction bypass based on\n    country code provided with geo_bypass_country. (experimental)\n\n    _GEO_COUNTRIES attribute may contain a list of presumably geo unrestricted\n    countries for this extractor. One of these countries will be used by\n    geo restriction bypass mechanism right away in order to bypass\n    geo restriction, of course, if the mechanism is not disabled. (experimental)\n\n    NB: both these geo attributes are experimental and may change in future\n    or be completely removed.\n\n    Finally, the _WORKING attribute should be set to False for broken IEs\n    in order to warn the users and skip the tests.\n    \"\"\"\n\n    _ready = False\n    _downloader = None\n    _x_forwarded_for_ip = None\n    _GEO_BYPASS = True\n    _GEO_COUNTRIES = None\n    _WORKING = True\n\n    def __init__(self, downloader=None):\n        \"\"\"Constructor. Receives an optional downloader.\"\"\"\n        self._ready = False\n        self._x_forwarded_for_ip = None\n        self.set_downloader(downloader)\n\n    @classmethod\n    def suitable(cls, url):\n        \"\"\"Receives a URL and returns True if suitable for this IE.\"\"\"\n\n        # This does not use has/getattr intentionally - we want to know whether\n        # we have cached the regexp for *this* class, whereas getattr would also\n        # match the superclass\n        if '_VALID_URL_RE' not in cls.__dict__:\n            cls._VALID_URL_RE = re.compile(cls._VALID_URL)\n        return cls._VALID_URL_RE.match(url) is not None\n\n    @classmethod\n    def _match_id(cls, url):\n        if '_VALID_URL_RE' not in cls.__dict__:\n            cls._VALID_URL_RE = re.compile(cls._VALID_URL)\n        m = cls._VALID_URL_RE.match(url)\n        assert m\n        return compat_str(m.group('id'))\n\n    @classmethod\n    def working(cls):\n        \"\"\"Getter method for _WORKING.\"\"\"\n        return cls._WORKING\n\n    def initialize(self):\n        \"\"\"Initializes an instance (authentication, etc).\"\"\"\n        self._initialize_geo_bypass(self._GEO_COUNTRIES)\n        if not self._ready:\n            self._real_initialize()\n            self._ready = True\n\n    def _initialize_geo_bypass(self, countries):\n        \"\"\"\n        Initialize geo restriction bypass mechanism.\n\n        This method is used to initialize geo bypass mechanism based on faking\n        X-Forwarded-For HTTP header. A random country from provided country list\n        is selected and a random IP belonging to this country is generated. This\n        IP will be passed as X-Forwarded-For HTTP header in all subsequent\n        HTTP requests.\n\n        This method will be used for initial geo bypass mechanism initialization\n        during the instance initialization with _GEO_COUNTRIES.\n\n        You may also manually call it from extractor's code if geo countries\n        information is not available beforehand (e.g. obtained during\n        extraction) or due to some another reason.\n        \"\"\"\n        if not self._x_forwarded_for_ip:\n            country_code = self._downloader.params.get('geo_bypass_country', None)\n            # If there is no explicit country for geo bypass specified and\n            # the extractor is known to be geo restricted let's fake IP\n            # as X-Forwarded-For right away.\n            if (not country_code and\n                    self._GEO_BYPASS and\n                    self._downloader.params.get('geo_bypass', True) and\n                    countries):\n                country_code = random.choice(countries)\n            if country_code:\n                self._x_forwarded_for_ip = GeoUtils.random_ipv4(country_code)\n                if self._downloader.params.get('verbose', False):\n                    self._downloader.to_screen(\n                        '[debug] Using fake IP %s (%s) as X-Forwarded-For.'\n                        % (self._x_forwarded_for_ip, country_code.upper()))\n\n    def extract(self, url):\n        \"\"\"Extracts URL information and returns it in list of dicts.\"\"\"\n        try:\n            for _ in range(2):\n                try:\n                    self.initialize()\n                    ie_result = self._real_extract(url)\n                    if self._x_forwarded_for_ip:\n                        ie_result['__x_forwarded_for_ip'] = self._x_forwarded_for_ip\n                    return ie_result\n                except GeoRestrictedError as e:\n                    if self.__maybe_fake_ip_and_retry(e.countries):\n                        continue\n                    raise\n        except ExtractorError:\n            raise\n        except compat_http_client.IncompleteRead as e:\n            raise ExtractorError('A network error has occurred.', cause=e, expected=True)\n        except (KeyError, StopIteration) as e:\n            raise ExtractorError('An extractor error has occurred.', cause=e)\n\n    def __maybe_fake_ip_and_retry(self, countries):\n        if (not self._downloader.params.get('geo_bypass_country', None) and\n                self._GEO_BYPASS and\n                self._downloader.params.get('geo_bypass', True) and\n                not self._x_forwarded_for_ip and\n                countries):\n            country_code = random.choice(countries)\n            self._x_forwarded_for_ip = GeoUtils.random_ipv4(country_code)\n            if self._x_forwarded_for_ip:\n                self.report_warning(\n                    'Video is geo restricted. Retrying extraction with fake IP %s (%s) as X-Forwarded-For.'\n                    % (self._x_forwarded_for_ip, country_code.upper()))\n                return True\n        return False\n\n    def set_downloader(self, downloader):\n        \"\"\"Sets the downloader for this IE.\"\"\"\n        self._downloader = downloader\n\n    def _real_initialize(self):\n        \"\"\"Real initialization process. Redefine in subclasses.\"\"\"\n        pass\n\n    def _real_extract(self, url):\n        \"\"\"Real extraction process. Redefine in subclasses.\"\"\"\n        pass\n\n    @classmethod\n    def ie_key(cls):\n        \"\"\"A string for getting the InfoExtractor with get_info_extractor\"\"\"\n        return compat_str(cls.__name__[:-2])\n\n    @property\n    def IE_NAME(self):\n        return compat_str(type(self).__name__[:-2])\n\n    def _request_webpage(self, url_or_request, video_id, note=None, errnote=None, fatal=True, data=None, headers={}, query={}):\n        \"\"\" Returns the response handle \"\"\"\n        if note is None:\n            self.report_download_webpage(video_id)\n        elif note is not False:\n            if video_id is None:\n                self.to_screen('%s' % (note,))\n            else:\n                self.to_screen('%s: %s' % (video_id, note))\n\n        # Some sites check X-Forwarded-For HTTP header in order to figure out\n        # the origin of the client behind proxy. This allows bypassing geo\n        # restriction by faking this header's value to IP that belongs to some\n        # geo unrestricted country. We will do so once we encounter any\n        # geo restriction error.\n        if self._x_forwarded_for_ip:\n            if 'X-Forwarded-For' not in headers:\n                headers['X-Forwarded-For'] = self._x_forwarded_for_ip\n\n        if isinstance(url_or_request, compat_urllib_request.Request):\n            url_or_request = update_Request(\n                url_or_request, data=data, headers=headers, query=query)\n        else:\n            if query:\n                url_or_request = update_url_query(url_or_request, query)\n            if data is not None or headers:\n                url_or_request = sanitized_Request(url_or_request, data, headers)\n        try:\n            return self._downloader.urlopen(url_or_request)\n        except (compat_urllib_error.URLError, compat_http_client.HTTPException, socket.error) as err:\n            if errnote is False:\n                return False\n            if errnote is None:\n                errnote = 'Unable to download webpage'\n\n            errmsg = '%s: %s' % (errnote, error_to_compat_str(err))\n            if fatal:\n                raise ExtractorError(errmsg, sys.exc_info()[2], cause=err)\n            else:\n                self._downloader.report_warning(errmsg)\n                return False\n\n    def _download_webpage_handle(self, url_or_request, video_id, note=None, errnote=None, fatal=True, encoding=None, data=None, headers={}, query={}):\n        \"\"\" Returns a tuple (page content as string, URL handle) \"\"\"\n        # Strip hashes from the URL (#1038)\n        if isinstance(url_or_request, (compat_str, str)):\n            url_or_request = url_or_request.partition('#')[0]\n\n        urlh = self._request_webpage(url_or_request, video_id, note, errnote, fatal, data=data, headers=headers, query=query)\n        if urlh is False:\n            assert not fatal\n            return False\n        content = self._webpage_read_content(urlh, url_or_request, video_id, note, errnote, fatal, encoding=encoding)\n        return (content, urlh)\n\n    @staticmethod\n    def _guess_encoding_from_content(content_type, webpage_bytes):\n        m = re.match(r'[a-zA-Z0-9_.-]+/[a-zA-Z0-9_.-]+\\s*;\\s*charset=(.+)', content_type)\n        if m:\n            encoding = m.group(1)\n        else:\n            m = re.search(br'<meta[^>]+charset=[\\'\"]?([^\\'\")]+)[ /\\'\">]',\n                          webpage_bytes[:1024])\n            if m:\n                encoding = m.group(1).decode('ascii')\n            elif webpage_bytes.startswith(b'\\xff\\xfe'):\n                encoding = 'utf-16'\n            else:\n                encoding = 'utf-8'\n\n        return encoding\n\n    def __check_blocked(self, content):\n        first_block = content[:512]\n        if ('<title>Access to this site is blocked</title>' in content and\n                'Websense' in first_block):\n            msg = 'Access to this webpage has been blocked by Websense filtering software in your network.'\n            blocked_iframe = self._html_search_regex(\n                r'<iframe src=\"([^\"]+)\"', content,\n                'Websense information URL', default=None)\n            if blocked_iframe:\n                msg += ' Visit %s for more details' % blocked_iframe\n            raise ExtractorError(msg, expected=True)\n        if '<title>The URL you requested has been blocked</title>' in first_block:\n            msg = (\n                'Access to this webpage has been blocked by Indian censorship. '\n                'Use a VPN or proxy server (with --proxy) to route around it.')\n            block_msg = self._html_search_regex(\n                r'</h1><p>(.*?)</p>',\n                content, 'block message', default=None)\n            if block_msg:\n                msg += ' (Message: \"%s\")' % block_msg.replace('\\n', ' ')\n            raise ExtractorError(msg, expected=True)\n        if ('<title>TTK :: \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u0440\u0435\u0441\u0443\u0440\u0441\u0443 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d</title>' in content and\n                'blocklist.rkn.gov.ru' in content):\n            raise ExtractorError(\n                'Access to this webpage has been blocked by decision of the Russian government. '\n                'Visit http://blocklist.rkn.gov.ru/ for a block reason.',\n                expected=True)\n\n    def _webpage_read_content(self, urlh, url_or_request, video_id, note=None, errnote=None, fatal=True, prefix=None, encoding=None):\n        content_type = urlh.headers.get('Content-Type', '')\n        webpage_bytes = urlh.read()\n        if prefix is not None:\n            webpage_bytes = prefix + webpage_bytes\n        if not encoding:\n            encoding = self._guess_encoding_from_content(content_type, webpage_bytes)\n        if self._downloader.params.get('dump_intermediate_pages', False):\n            self.to_screen('Dumping request to ' + urlh.geturl())\n            dump = base64.b64encode(webpage_bytes).decode('ascii')\n            self._downloader.to_screen(dump)\n        if self._downloader.params.get('write_pages', False):\n            basen = '%s_%s' % (video_id, urlh.geturl())\n            if len(basen) > 240:\n                h = '___' + hashlib.md5(basen.encode('utf-8')).hexdigest()\n                basen = basen[:240 - len(h)] + h\n            raw_filename = basen + '.dump'\n            filename = sanitize_filename(raw_filename, restricted=True)\n            self.to_screen('Saving request to ' + filename)\n            # Working around MAX_PATH limitation on Windows (see\n            # http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx)\n            if compat_os_name == 'nt':\n                absfilepath = os.path.abspath(filename)\n                if len(absfilepath) > 259:\n                    filename = '\\\\\\\\?\\\\' + absfilepath\n            with open(filename, 'wb') as outf:\n                outf.write(webpage_bytes)\n\n        try:\n            content = webpage_bytes.decode(encoding, 'replace')\n        except LookupError:\n            content = webpage_bytes.decode('utf-8', 'replace')\n\n        self.__check_blocked(content)\n\n        return content\n\n    def _download_webpage(self, url_or_request, video_id, note=None, errnote=None, fatal=True, tries=1, timeout=5, encoding=None, data=None, headers={}, query={}):\n        \"\"\" Returns the data of the page as a string \"\"\"\n        success = False\n        try_count = 0\n        while success is False:\n            try:\n                res = self._download_webpage_handle(url_or_request, video_id, note, errnote, fatal, encoding=encoding, data=data, headers=headers, query=query)\n                success = True\n            except compat_http_client.IncompleteRead as e:\n                try_count += 1\n                if try_count >= tries:\n                    raise e\n                self._sleep(timeout, video_id)\n        if res is False:\n            return res\n        else:\n            content, _ = res\n            return content\n\n    def _download_xml(self, url_or_request, video_id,\n                      note='Downloading XML', errnote='Unable to download XML',\n                      transform_source=None, fatal=True, encoding=None,\n                      data=None, headers={}, query={}):\n        \"\"\"Return the xml as an xml.etree.ElementTree.Element\"\"\"\n        xml_string = self._download_webpage(\n            url_or_request, video_id, note, errnote, fatal=fatal,\n            encoding=encoding, data=data, headers=headers, query=query)\n        if xml_string is False:\n            return xml_string\n        return self._parse_xml(\n            xml_string, video_id, transform_source=transform_source,\n            fatal=fatal)\n\n    def _parse_xml(self, xml_string, video_id, transform_source=None, fatal=True):\n        if transform_source:\n            xml_string = transform_source(xml_string)\n        try:\n            return compat_etree_fromstring(xml_string.encode('utf-8'))\n        except compat_xml_parse_error as ve:\n            errmsg = '%s: Failed to parse XML ' % video_id\n            if fatal:\n                raise ExtractorError(errmsg, cause=ve)\n            else:\n                self.report_warning(errmsg + str(ve))\n\n    def _download_json(self, url_or_request, video_id,\n                       note='Downloading JSON metadata',\n                       errnote='Unable to download JSON metadata',\n                       transform_source=None,\n                       fatal=True, encoding=None, data=None, headers={}, query={}):\n        json_string = self._download_webpage(\n            url_or_request, video_id, note, errnote, fatal=fatal,\n            encoding=encoding, data=data, headers=headers, query=query)\n        if (not fatal) and json_string is False:\n            return None\n        return self._parse_json(\n            json_string, video_id, transform_source=transform_source, fatal=fatal)\n\n    def _parse_json(self, json_string, video_id, transform_source=None, fatal=True):\n        if transform_source:\n            json_string = transform_source(json_string)\n        try:\n            return json.loads(json_string)\n        except ValueError as ve:\n            errmsg = '%s: Failed to parse JSON ' % video_id\n            if fatal:\n                raise ExtractorError(errmsg, cause=ve)\n            else:\n                self.report_warning(errmsg + str(ve))\n\n    def report_warning(self, msg, video_id=None):\n        idstr = '' if video_id is None else '%s: ' % video_id\n        self._downloader.report_warning(\n            '[%s] %s%s' % (self.IE_NAME, idstr, msg))\n\n    def to_screen(self, msg):\n        \"\"\"Print msg to screen, prefixing it with '[ie_name]'\"\"\"\n        self._downloader.to_screen('[%s] %s' % (self.IE_NAME, msg))\n\n    def report_extraction(self, id_or_name):\n        \"\"\"Report information extraction.\"\"\"\n        self.to_screen('%s: Extracting information' % id_or_name)\n\n    def report_download_webpage(self, video_id):\n        \"\"\"Report webpage download.\"\"\"\n        self.to_screen('%s: Downloading webpage' % video_id)\n\n    def report_age_confirmation(self):\n        \"\"\"Report attempt to confirm age.\"\"\"\n        self.to_screen('Confirming age')\n\n    def report_login(self):\n        \"\"\"Report attempt to log in.\"\"\"\n        self.to_screen('Logging in')\n\n    @staticmethod\n    def raise_login_required(msg='This video is only available for registered users'):\n        raise ExtractorError(\n            '%s. Use --username and --password or --netrc to provide account credentials.' % msg,\n            expected=True)\n\n    @staticmethod\n    def raise_geo_restricted(msg='This video is not available from your location due to geo restriction', countries=None):\n        raise GeoRestrictedError(msg, countries=countries)\n\n    # Methods for following #608\n    @staticmethod\n    def url_result(url, ie=None, video_id=None, video_title=None):\n        \"\"\"Returns a URL that points to a page that should be processed\"\"\"\n        # TODO: ie should be the class used for getting the info\n        video_info = {'_type': 'url',\n                      'url': url,\n                      'ie_key': ie}\n        if video_id is not None:\n            video_info['id'] = video_id\n        if video_title is not None:\n            video_info['title'] = video_title\n        return video_info\n\n    def playlist_from_matches(self, matches, playlist_id=None, playlist_title=None, getter=None, ie=None):\n        urls = orderedSet(\n            self.url_result(self._proto_relative_url(getter(m) if getter else m), ie)\n            for m in matches)\n        return self.playlist_result(\n            urls, playlist_id=playlist_id, playlist_title=playlist_title)\n\n    @staticmethod\n    def playlist_result(entries, playlist_id=None, playlist_title=None, playlist_description=None):\n        \"\"\"Returns a playlist\"\"\"\n        video_info = {'_type': 'playlist',\n                      'entries': entries}\n        if playlist_id:\n            video_info['id'] = playlist_id\n        if playlist_title:\n            video_info['title'] = playlist_title\n        if playlist_description:\n            video_info['description'] = playlist_description\n        return video_info\n\n    def _search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None):\n        \"\"\"\n        Perform a regex search on the given string, using a single or a list of\n        patterns returning the first matching group.\n        In case of failure return a default value or raise a WARNING or a\n        RegexNotFoundError, depending on fatal, specifying the field name.\n        \"\"\"\n        if isinstance(pattern, (str, compat_str, compiled_regex_type)):\n            mobj = re.search(pattern, string, flags)\n        else:\n            for p in pattern:\n                mobj = re.search(p, string, flags)\n                if mobj:\n                    break\n\n        if not self._downloader.params.get('no_color') and compat_os_name != 'nt' and sys.stderr.isatty():\n            _name = '\\033[0;34m%s\\033[0m' % name\n        else:\n            _name = name\n\n        if mobj:\n            if group is None:\n                # return the first matching group\n                return next(g for g in mobj.groups() if g is not None)\n            else:\n                return mobj.group(group)\n        elif default is not NO_DEFAULT:\n            return default\n        elif fatal:\n            raise RegexNotFoundError('Unable to extract %s' % _name)\n        else:\n            self._downloader.report_warning('unable to extract %s' % _name + bug_reports_message())\n            return None\n\n    def _html_search_regex(self, pattern, string, name, default=NO_DEFAULT, fatal=True, flags=0, group=None):\n        \"\"\"\n        Like _search_regex, but strips HTML tags and unescapes entities.\n        \"\"\"\n        res = self._search_regex(pattern, string, name, default, fatal, flags, group)\n        if res:\n            return clean_html(res).strip()\n        else:\n            return res\n\n    def _get_netrc_login_info(self, netrc_machine=None):\n        username = None\n        password = None\n        netrc_machine = netrc_machine or self._NETRC_MACHINE\n\n        if self._downloader.params.get('usenetrc', False):\n            try:\n                info = netrc.netrc().authenticators(netrc_machine)\n                if info is not None:\n                    username = info[0]\n                    password = info[2]\n                else:\n                    raise netrc.NetrcParseError(\n                        'No authenticators for %s' % netrc_machine)\n            except (IOError, netrc.NetrcParseError) as err:\n                self._downloader.report_warning(\n                    'parsing .netrc: %s' % error_to_compat_str(err))\n\n        return username, password\n\n    def _get_login_info(self, username_option='username', password_option='password', netrc_machine=None):\n        \"\"\"\n        Get the login info as (username, password)\n        First look for the manually specified credentials using username_option\n        and password_option as keys in params dictionary. If no such credentials\n        available look in the netrc file using the netrc_machine or _NETRC_MACHINE\n        value.\n        If there's no info available, return (None, None)\n        \"\"\"\n        if self._downloader is None:\n            return (None, None)\n\n        downloader_params = self._downloader.params\n\n        # Attempt to use provided username and password or .netrc data\n        if downloader_params.get(username_option) is not None:\n            username = downloader_params[username_option]\n            password = downloader_params[password_option]\n        else:\n            username, password = self._get_netrc_login_info(netrc_machine)\n\n        return username, password\n\n    def _get_tfa_info(self, note='two-factor verification code'):\n        \"\"\"\n        Get the two-factor authentication info\n        TODO - asking the user will be required for sms/phone verify\n        currently just uses the command line option\n        If there's no info available, return None\n        \"\"\"\n        if self._downloader is None:\n            return None\n        downloader_params = self._downloader.params\n\n        if downloader_params.get('twofactor') is not None:\n            return downloader_params['twofactor']\n\n        return compat_getpass('Type %s and press [Return]: ' % note)\n\n    # Helper functions for extracting OpenGraph info\n    @staticmethod\n    def _og_regexes(prop):\n        content_re = r'content=(?:\"([^\"]+?)\"|\\'([^\\']+?)\\'|\\s*([^\\s\"\\'=<>`]+?))'\n        property_re = (r'(?:name|property)=(?:\\'og:%(prop)s\\'|\"og:%(prop)s\"|\\s*og:%(prop)s\\b)'\n                       % {'prop': re.escape(prop)})\n        template = r'<meta[^>]+?%s[^>]+?%s'\n        return [\n            template % (property_re, content_re),\n            template % (content_re, property_re),\n        ]\n\n    @staticmethod\n    def _meta_regex(prop):\n        return r'''(?isx)<meta\n                    (?=[^>]+(?:itemprop|name|property|id|http-equiv)=([\"\\']?)%s\\1)\n                    [^>]+?content=([\"\\'])(?P<content>.*?)\\2''' % re.escape(prop)\n\n    def _og_search_property(self, prop, html, name=None, **kargs):\n        if not isinstance(prop, (list, tuple)):\n            prop = [prop]\n        if name is None:\n            name = 'OpenGraph %s' % prop[0]\n        og_regexes = []\n        for p in prop:\n            og_regexes.extend(self._og_regexes(p))\n        escaped = self._search_regex(og_regexes, html, name, flags=re.DOTALL, **kargs)\n        if escaped is None:\n            return None\n        return unescapeHTML(escaped)\n\n    def _og_search_thumbnail(self, html, **kargs):\n        return self._og_search_property('image', html, 'thumbnail URL', fatal=False, **kargs)\n\n    def _og_search_description(self, html, **kargs):\n        return self._og_search_property('description', html, fatal=False, **kargs)\n\n    def _og_search_title(self, html, **kargs):\n        return self._og_search_property('title', html, **kargs)\n\n    def _og_search_video_url(self, html, name='video url', secure=True, **kargs):\n        regexes = self._og_regexes('video') + self._og_regexes('video:url')\n        if secure:\n            regexes = self._og_regexes('video:secure_url') + regexes\n        return self._html_search_regex(regexes, html, name, **kargs)\n\n    def _og_search_url(self, html, **kargs):\n        return self._og_search_property('url', html, **kargs)\n\n    def _html_search_meta(self, name, html, display_name=None, fatal=False, **kwargs):\n        if not isinstance(name, (list, tuple)):\n            name = [name]\n        if display_name is None:\n            display_name = name[0]\n        return self._html_search_regex(\n            [self._meta_regex(n) for n in name],\n            html, display_name, fatal=fatal, group='content', **kwargs)\n\n    def _dc_search_uploader(self, html):\n        return self._html_search_meta('dc.creator', html, 'uploader')\n\n    def _rta_search(self, html):\n        # See http://www.rtalabel.org/index.php?content=howtofaq#single\n        if re.search(r'(?ix)<meta\\s+name=\"rating\"\\s+'\n                     r'     content=\"RTA-5042-1996-1400-1577-RTA\"',\n                     html):\n            return 18\n        return 0\n\n    def _media_rating_search(self, html):\n        # See http://www.tjg-designs.com/WP/metadata-code-examples-adding-metadata-to-your-web-pages/\n        rating = self._html_search_meta('rating', html)\n\n        if not rating:\n            return None\n\n        RATING_TABLE = {\n            'safe for kids': 0,\n            'general': 8,\n            '14 years': 14,\n            'mature': 17,\n            'restricted': 19,\n        }\n        return RATING_TABLE.get(rating.lower())\n\n    def _family_friendly_search(self, html):\n        # See http://schema.org/VideoObject\n        family_friendly = self._html_search_meta(\n            'isFamilyFriendly', html, default=None)\n\n        if not family_friendly:\n            return None\n\n        RATING_TABLE = {\n            '1': 0,\n            'true': 0,\n            '0': 18,\n            'false': 18,\n        }\n        return RATING_TABLE.get(family_friendly.lower())\n\n    def _twitter_search_player(self, html):\n        return self._html_search_meta('twitter:player', html,\n                                      'twitter card player')\n\n    def _search_json_ld(self, html, video_id, expected_type=None, **kwargs):\n        json_ld = self._search_regex(\n            r'(?s)<script[^>]+type=([\"\\'])application/ld\\+json\\1[^>]*>(?P<json_ld>.+?)</script>',\n            html, 'JSON-LD', group='json_ld', **kwargs)\n        default = kwargs.get('default', NO_DEFAULT)\n        if not json_ld:\n            return default if default is not NO_DEFAULT else {}\n        # JSON-LD may be malformed and thus `fatal` should be respected.\n        # At the same time `default` may be passed that assumes `fatal=False`\n        # for _search_regex. Let's simulate the same behavior here as well.\n        fatal = kwargs.get('fatal', True) if default == NO_DEFAULT else False\n        return self._json_ld(json_ld, video_id, fatal=fatal, expected_type=expected_type)\n\n    def _json_ld(self, json_ld, video_id, fatal=True, expected_type=None):\n        if isinstance(json_ld, compat_str):\n            json_ld = self._parse_json(json_ld, video_id, fatal=fatal)\n        if not json_ld:\n            return {}\n        info = {}\n        if not isinstance(json_ld, (list, tuple, dict)):\n            return info\n        if isinstance(json_ld, dict):\n            json_ld = [json_ld]\n\n        def extract_video_object(e):\n            assert e['@type'] == 'VideoObject'\n            info.update({\n                'url': e.get('contentUrl'),\n                'title': unescapeHTML(e.get('name')),\n                'description': unescapeHTML(e.get('description')),\n                'thumbnail': e.get('thumbnailUrl') or e.get('thumbnailURL'),\n                'duration': parse_duration(e.get('duration')),\n                'timestamp': unified_timestamp(e.get('uploadDate')),\n                'filesize': float_or_none(e.get('contentSize')),\n                'tbr': int_or_none(e.get('bitrate')),\n                'width': int_or_none(e.get('width')),\n                'height': int_or_none(e.get('height')),\n                'view_count': int_or_none(e.get('interactionCount')),\n            })\n\n        for e in json_ld:\n            if e.get('@context') == 'http://schema.org':\n                item_type = e.get('@type')\n                if expected_type is not None and expected_type != item_type:\n                    return info\n                if item_type in ('TVEpisode', 'Episode'):\n                    info.update({\n                        'episode': unescapeHTML(e.get('name')),\n                        'episode_number': int_or_none(e.get('episodeNumber')),\n                        'description': unescapeHTML(e.get('description')),\n                    })\n                    part_of_season = e.get('partOfSeason')\n                    if isinstance(part_of_season, dict) and part_of_season.get('@type') in ('TVSeason', 'Season', 'CreativeWorkSeason'):\n                        info['season_number'] = int_or_none(part_of_season.get('seasonNumber'))\n                    part_of_series = e.get('partOfSeries') or e.get('partOfTVSeries')\n                    if isinstance(part_of_series, dict) and part_of_series.get('@type') in ('TVSeries', 'Series', 'CreativeWorkSeries'):\n                        info['series'] = unescapeHTML(part_of_series.get('name'))\n                elif item_type in ('Article', 'NewsArticle'):\n                    info.update({\n                        'timestamp': parse_iso8601(e.get('datePublished')),\n                        'title': unescapeHTML(e.get('headline')),\n                        'description': unescapeHTML(e.get('articleBody')),\n                    })\n                elif item_type == 'VideoObject':\n                    extract_video_object(e)\n                    continue\n                video = e.get('video')\n                if isinstance(video, dict) and video.get('@type') == 'VideoObject':\n                    extract_video_object(video)\n                break\n        return dict((k, v) for k, v in info.items() if v is not None)\n\n    @staticmethod\n    def _hidden_inputs(html):\n        html = re.sub(r'<!--(?:(?!<!--).)*-->', '', html)\n        hidden_inputs = {}\n        for input in re.findall(r'(?i)(<input[^>]+>)', html):\n            attrs = extract_attributes(input)\n            if not input:\n                continue\n            if attrs.get('type') not in ('hidden', 'submit'):\n                continue\n            name = attrs.get('name') or attrs.get('id')\n            value = attrs.get('value')\n            if name and value is not None:\n                hidden_inputs[name] = value\n        return hidden_inputs\n\n    def _form_hidden_inputs(self, form_id, html):\n        form = self._search_regex(\n            r'(?is)<form[^>]+?id=([\"\\'])%s\\1[^>]*>(?P<form>.+?)</form>' % form_id,\n            html, '%s form' % form_id, group='form')\n        return self._hidden_inputs(form)\n\n    def _sort_formats(self, formats, field_preference=None):\n        if not formats:\n            raise ExtractorError('No video formats found')\n\n        for f in formats:\n            # Automatically determine tbr when missing based on abr and vbr (improves\n            # formats sorting in some cases)\n            if 'tbr' not in f and f.get('abr') is not None and f.get('vbr') is not None:\n                f['tbr'] = f['abr'] + f['vbr']\n\n        def _formats_key(f):\n            # TODO remove the following workaround\n            from ..utils import determine_ext\n            if not f.get('ext') and 'url' in f:\n                f['ext'] = determine_ext(f['url'])\n\n            if isinstance(field_preference, (list, tuple)):\n                return tuple(\n                    f.get(field)\n                    if f.get(field) is not None\n                    else ('' if field == 'format_id' else -1)\n                    for field in field_preference)\n\n            preference = f.get('preference')\n            if preference is None:\n                preference = 0\n                if f.get('ext') in ['f4f', 'f4m']:  # Not yet supported\n                    preference -= 0.5\n\n            protocol = f.get('protocol') or determine_protocol(f)\n            proto_preference = 0 if protocol in ['http', 'https'] else (-0.5 if protocol == 'rtsp' else -0.1)\n\n            if f.get('vcodec') == 'none':  # audio only\n                preference -= 50\n                if self._downloader.params.get('prefer_free_formats'):\n                    ORDER = ['aac', 'mp3', 'm4a', 'webm', 'ogg', 'opus']\n                else:\n                    ORDER = ['webm', 'opus', 'ogg', 'mp3', 'aac', 'm4a']\n                ext_preference = 0\n                try:\n                    audio_ext_preference = ORDER.index(f['ext'])\n                except ValueError:\n                    audio_ext_preference = -1\n            else:\n                if f.get('acodec') == 'none':  # video only\n                    preference -= 40\n                if self._downloader.params.get('prefer_free_formats'):\n                    ORDER = ['flv', 'mp4', 'webm']\n                else:\n                    ORDER = ['webm', 'flv', 'mp4']\n                try:\n                    ext_preference = ORDER.index(f['ext'])\n                except ValueError:\n                    ext_preference = -1\n                audio_ext_preference = 0\n\n            return (\n                preference,\n                f.get('language_preference') if f.get('language_preference') is not None else -1,\n                f.get('quality') if f.get('quality') is not None else -1,\n                f.get('tbr') if f.get('tbr') is not None else -1,\n                f.get('filesize') if f.get('filesize') is not None else -1,\n                f.get('vbr') if f.get('vbr') is not None else -1,\n                f.get('height') if f.get('height') is not None else -1,\n                f.get('width') if f.get('width') is not None else -1,\n                proto_preference,\n                ext_preference,\n                f.get('abr') if f.get('abr') is not None else -1,\n                audio_ext_preference,\n                f.get('fps') if f.get('fps') is not None else -1,\n                f.get('filesize_approx') if f.get('filesize_approx') is not None else -1,\n                f.get('source_preference') if f.get('source_preference') is not None else -1,\n                f.get('format_id') if f.get('format_id') is not None else '',\n            )\n        formats.sort(key=_formats_key)\n\n    def _check_formats(self, formats, video_id):\n        if formats:\n            formats[:] = filter(\n                lambda f: self._is_valid_url(\n                    f['url'], video_id,\n                    item='%s video format' % f.get('format_id') if f.get('format_id') else 'video'),\n                formats)\n\n    @staticmethod\n    def _remove_duplicate_formats(formats):\n        format_urls = set()\n        unique_formats = []\n        for f in formats:\n            if f['url'] not in format_urls:\n                format_urls.add(f['url'])\n                unique_formats.append(f)\n        formats[:] = unique_formats\n\n    def _is_valid_url(self, url, video_id, item='video', headers={}):\n        url = self._proto_relative_url(url, scheme='http:')\n        # For now assume non HTTP(S) URLs always valid\n        if not (url.startswith('http://') or url.startswith('https://')):\n            return True\n        try:\n            self._request_webpage(url, video_id, 'Checking %s URL' % item, headers=headers)\n            return True\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_urllib_error.URLError):\n                self.to_screen(\n                    '%s: %s URL is invalid, skipping' % (video_id, item))\n                return False\n            raise\n\n    def http_scheme(self):\n        \"\"\" Either \"http:\" or \"https:\", depending on the user's preferences \"\"\"\n        return (\n            'http:'\n            if self._downloader.params.get('prefer_insecure', False)\n            else 'https:')\n\n    def _proto_relative_url(self, url, scheme=None):\n        if url is None:\n            return url\n        if url.startswith('//'):\n            if scheme is None:\n                scheme = self.http_scheme()\n            return scheme + url\n        else:\n            return url\n\n    def _sleep(self, timeout, video_id, msg_template=None):\n        if msg_template is None:\n            msg_template = '%(video_id)s: Waiting for %(timeout)s seconds'\n        msg = msg_template % {'video_id': video_id, 'timeout': timeout}\n        self.to_screen(msg)\n        time.sleep(timeout)\n\n    def _extract_f4m_formats(self, manifest_url, video_id, preference=None, f4m_id=None,\n                             transform_source=lambda s: fix_xml_ampersands(s).strip(),\n                             fatal=True, m3u8_id=None):\n        manifest = self._download_xml(\n            manifest_url, video_id, 'Downloading f4m manifest',\n            'Unable to download f4m manifest',\n            # Some manifests may be malformed, e.g. prosiebensat1 generated manifests\n            # (see https://github.com/rg3/youtube-dl/issues/6215#issuecomment-121704244)\n            transform_source=transform_source,\n            fatal=fatal)\n\n        if manifest is False:\n            return []\n\n        return self._parse_f4m_formats(\n            manifest, manifest_url, video_id, preference=preference, f4m_id=f4m_id,\n            transform_source=transform_source, fatal=fatal, m3u8_id=m3u8_id)\n\n    def _parse_f4m_formats(self, manifest, manifest_url, video_id, preference=None, f4m_id=None,\n                           transform_source=lambda s: fix_xml_ampersands(s).strip(),\n                           fatal=True, m3u8_id=None):\n        # currently youtube-dl cannot decode the playerVerificationChallenge as Akamai uses Adobe Alchemy\n        akamai_pv = manifest.find('{http://ns.adobe.com/f4m/1.0}pv-2.0')\n        if akamai_pv is not None and ';' in akamai_pv.text:\n            playerVerificationChallenge = akamai_pv.text.split(';')[0]\n            if playerVerificationChallenge.strip() != '':\n                return []\n\n        formats = []\n        manifest_version = '1.0'\n        media_nodes = manifest.findall('{http://ns.adobe.com/f4m/1.0}media')\n        if not media_nodes:\n            manifest_version = '2.0'\n            media_nodes = manifest.findall('{http://ns.adobe.com/f4m/2.0}media')\n        # Remove unsupported DRM protected media from final formats\n        # rendition (see https://github.com/rg3/youtube-dl/issues/8573).\n        media_nodes = remove_encrypted_media(media_nodes)\n        if not media_nodes:\n            return formats\n\n        manifest_base_url = get_base_url(manifest)\n\n        bootstrap_info = xpath_element(\n            manifest, ['{http://ns.adobe.com/f4m/1.0}bootstrapInfo', '{http://ns.adobe.com/f4m/2.0}bootstrapInfo'],\n            'bootstrap info', default=None)\n\n        vcodec = None\n        mime_type = xpath_text(\n            manifest, ['{http://ns.adobe.com/f4m/1.0}mimeType', '{http://ns.adobe.com/f4m/2.0}mimeType'],\n            'base URL', default=None)\n        if mime_type and mime_type.startswith('audio/'):\n            vcodec = 'none'\n\n        for i, media_el in enumerate(media_nodes):\n            tbr = int_or_none(media_el.attrib.get('bitrate'))\n            width = int_or_none(media_el.attrib.get('width'))\n            height = int_or_none(media_el.attrib.get('height'))\n            format_id = '-'.join(filter(None, [f4m_id, compat_str(i if tbr is None else tbr)]))\n            # If <bootstrapInfo> is present, the specified f4m is a\n            # stream-level manifest, and only set-level manifests may refer to\n            # external resources.  See section 11.4 and section 4 of F4M spec\n            if bootstrap_info is None:\n                media_url = None\n                # @href is introduced in 2.0, see section 11.6 of F4M spec\n                if manifest_version == '2.0':\n                    media_url = media_el.attrib.get('href')\n                if media_url is None:\n                    media_url = media_el.attrib.get('url')\n                if not media_url:\n                    continue\n                manifest_url = (\n                    media_url if media_url.startswith('http://') or media_url.startswith('https://')\n                    else ((manifest_base_url or '/'.join(manifest_url.split('/')[:-1])) + '/' + media_url))\n                # If media_url is itself a f4m manifest do the recursive extraction\n                # since bitrates in parent manifest (this one) and media_url manifest\n                # may differ leading to inability to resolve the format by requested\n                # bitrate in f4m downloader\n                ext = determine_ext(manifest_url)\n                if ext == 'f4m':\n                    f4m_formats = self._extract_f4m_formats(\n                        manifest_url, video_id, preference=preference, f4m_id=f4m_id,\n                        transform_source=transform_source, fatal=fatal)\n                    # Sometimes stream-level manifest contains single media entry that\n                    # does not contain any quality metadata (e.g. http://matchtv.ru/#live-player).\n                    # At the same time parent's media entry in set-level manifest may\n                    # contain it. We will copy it from parent in such cases.\n                    if len(f4m_formats) == 1:\n                        f = f4m_formats[0]\n                        f.update({\n                            'tbr': f.get('tbr') or tbr,\n                            'width': f.get('width') or width,\n                            'height': f.get('height') or height,\n                            'format_id': f.get('format_id') if not tbr else format_id,\n                            'vcodec': vcodec,\n                        })\n                    formats.extend(f4m_formats)\n                    continue\n                elif ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        manifest_url, video_id, 'mp4', preference=preference,\n                        m3u8_id=m3u8_id, fatal=fatal))\n                    continue\n            formats.append({\n                'format_id': format_id,\n                'url': manifest_url,\n                'manifest_url': manifest_url,\n                'ext': 'flv' if bootstrap_info is not None else None,\n                'protocol': 'f4m',\n                'tbr': tbr,\n                'width': width,\n                'height': height,\n                'vcodec': vcodec,\n                'preference': preference,\n            })\n        return formats\n\n    def _m3u8_meta_format(self, m3u8_url, ext=None, preference=None, m3u8_id=None):\n        return {\n            'format_id': '-'.join(filter(None, [m3u8_id, 'meta'])),\n            'url': m3u8_url,\n            'ext': ext,\n            'protocol': 'm3u8',\n            'preference': preference - 100 if preference else -100,\n            'resolution': 'multiple',\n            'format_note': 'Quality selection URL',\n        }\n\n    def _extract_m3u8_formats(self, m3u8_url, video_id, ext=None,\n                              entry_protocol='m3u8', preference=None,\n                              m3u8_id=None, note=None, errnote=None,\n                              fatal=True, live=False):\n        res = self._download_webpage_handle(\n            m3u8_url, video_id,\n            note=note or 'Downloading m3u8 information',\n            errnote=errnote or 'Failed to download m3u8 information',\n            fatal=fatal)\n\n        if res is False:\n            return []\n\n        m3u8_doc, urlh = res\n        m3u8_url = urlh.geturl()\n\n        return self._parse_m3u8_formats(\n            m3u8_doc, m3u8_url, ext=ext, entry_protocol=entry_protocol,\n            preference=preference, m3u8_id=m3u8_id, live=live)\n\n    def _parse_m3u8_formats(self, m3u8_doc, m3u8_url, ext=None,\n                            entry_protocol='m3u8', preference=None,\n                            m3u8_id=None, live=False):\n        if '#EXT-X-FAXS-CM:' in m3u8_doc:  # Adobe Flash Access\n            return []\n\n        if re.search(r'#EXT-X-SESSION-KEY:.*?URI=\"skd://', m3u8_doc):  # Apple FairPlay\n            return []\n\n        formats = []\n\n        format_url = lambda u: (\n            u\n            if re.match(r'^https?://', u)\n            else compat_urlparse.urljoin(m3u8_url, u))\n\n        # References:\n        # 1. https://tools.ietf.org/html/draft-pantos-http-live-streaming-21\n        # 2. https://github.com/rg3/youtube-dl/issues/12211\n\n        # We should try extracting formats only from master playlists [1, 4.3.4],\n        # i.e. playlists that describe available qualities. On the other hand\n        # media playlists [1, 4.3.3] should be returned as is since they contain\n        # just the media without qualities renditions.\n        # Fortunately, master playlist can be easily distinguished from media\n        # playlist based on particular tags availability. As of [1, 4.3.3, 4.3.4]\n        # master playlist tags MUST NOT appear in a media playist and vice versa.\n        # As of [1, 4.3.3.1] #EXT-X-TARGETDURATION tag is REQUIRED for every\n        # media playlist and MUST NOT appear in master playlist thus we can\n        # clearly detect media playlist with this criterion.\n\n        if '#EXT-X-TARGETDURATION' in m3u8_doc:  # media playlist, return as is\n            return [{\n                'url': m3u8_url,\n                'format_id': m3u8_id,\n                'ext': ext,\n                'protocol': entry_protocol,\n                'preference': preference,\n            }]\n\n        groups = {}\n        last_stream_inf = {}\n\n        def extract_media(x_media_line):\n            media = parse_m3u8_attributes(x_media_line)\n            # As per [1, 4.3.4.1] TYPE, GROUP-ID and NAME are REQUIRED\n            media_type, group_id, name = media.get('TYPE'), media.get('GROUP-ID'), media.get('NAME')\n            if not (media_type and group_id and name):\n                return\n            groups.setdefault(group_id, []).append(media)\n            if media_type not in ('VIDEO', 'AUDIO'):\n                return\n            media_url = media.get('URI')\n            if media_url:\n                format_id = []\n                for v in (m3u8_id, group_id, name):\n                    if v:\n                        format_id.append(v)\n                f = {\n                    'format_id': '-'.join(format_id),\n                    'url': format_url(media_url),\n                    'manifest_url': m3u8_url,\n                    'language': media.get('LANGUAGE'),\n                    'ext': ext,\n                    'protocol': entry_protocol,\n                    'preference': preference,\n                }\n                if media_type == 'AUDIO':\n                    f['vcodec'] = 'none'\n                formats.append(f)\n\n        def build_stream_name():\n            # Despite specification does not mention NAME attribute for\n            # EXT-X-STREAM-INF tag it still sometimes may be present (see [1]\n            # or vidio test in TestInfoExtractor.test_parse_m3u8_formats)\n            # 1. http://www.vidio.com/watch/165683-dj_ambred-booyah-live-2015\n            stream_name = last_stream_inf.get('NAME')\n            if stream_name:\n                return stream_name\n            # If there is no NAME in EXT-X-STREAM-INF it will be obtained\n            # from corresponding rendition group\n            stream_group_id = last_stream_inf.get('VIDEO')\n            if not stream_group_id:\n                return\n            stream_group = groups.get(stream_group_id)\n            if not stream_group:\n                return stream_group_id\n            rendition = stream_group[0]\n            return rendition.get('NAME') or stream_group_id\n\n        for line in m3u8_doc.splitlines():\n            if line.startswith('#EXT-X-STREAM-INF:'):\n                last_stream_inf = parse_m3u8_attributes(line)\n            elif line.startswith('#EXT-X-MEDIA:'):\n                extract_media(line)\n            elif line.startswith('#') or not line.strip():\n                continue\n            else:\n                tbr = float_or_none(\n                    last_stream_inf.get('AVERAGE-BANDWIDTH') or\n                    last_stream_inf.get('BANDWIDTH'), scale=1000)\n                format_id = []\n                if m3u8_id:\n                    format_id.append(m3u8_id)\n                stream_name = build_stream_name()\n                # Bandwidth of live streams may differ over time thus making\n                # format_id unpredictable. So it's better to keep provided\n                # format_id intact.\n                if not live:\n                    format_id.append(stream_name if stream_name else '%d' % (tbr if tbr else len(formats)))\n                manifest_url = format_url(line.strip())\n                f = {\n                    'format_id': '-'.join(format_id),\n                    'url': manifest_url,\n                    'manifest_url': m3u8_url,\n                    'tbr': tbr,\n                    'ext': ext,\n                    'fps': float_or_none(last_stream_inf.get('FRAME-RATE')),\n                    'protocol': entry_protocol,\n                    'preference': preference,\n                }\n                resolution = last_stream_inf.get('RESOLUTION')\n                if resolution:\n                    mobj = re.search(r'(?P<width>\\d+)[xX](?P<height>\\d+)', resolution)\n                    if mobj:\n                        f['width'] = int(mobj.group('width'))\n                        f['height'] = int(mobj.group('height'))\n                # Unified Streaming Platform\n                mobj = re.search(\n                    r'audio.*?(?:%3D|=)(\\d+)(?:-video.*?(?:%3D|=)(\\d+))?', f['url'])\n                if mobj:\n                    abr, vbr = mobj.groups()\n                    abr, vbr = float_or_none(abr, 1000), float_or_none(vbr, 1000)\n                    f.update({\n                        'vbr': vbr,\n                        'abr': abr,\n                    })\n                codecs = parse_codecs(last_stream_inf.get('CODECS'))\n                f.update(codecs)\n                audio_group_id = last_stream_inf.get('AUDIO')\n                # As per [1, 4.3.4.1.1] any EXT-X-STREAM-INF tag which\n                # references a rendition group MUST have a CODECS attribute.\n                # However, this is not always respected, for example, [2]\n                # contains EXT-X-STREAM-INF tag which references AUDIO\n                # rendition group but does not have CODECS and despite\n                # referencing audio group an audio group, it represents\n                # a complete (with audio and video) format. So, for such cases\n                # we will ignore references to rendition groups and treat them\n                # as complete formats.\n                if audio_group_id and codecs and f.get('vcodec') != 'none':\n                    audio_group = groups.get(audio_group_id)\n                    if audio_group and audio_group[0].get('URI'):\n                        # TODO: update acodec for audio only formats with\n                        # the same GROUP-ID\n                        f['acodec'] = 'none'\n                formats.append(f)\n                last_stream_inf = {}\n        return formats\n\n    @staticmethod\n    def _xpath_ns(path, namespace=None):\n        if not namespace:\n            return path\n        out = []\n        for c in path.split('/'):\n            if not c or c == '.':\n                out.append(c)\n            else:\n                out.append('{%s}%s' % (namespace, c))\n        return '/'.join(out)\n\n    def _extract_smil_formats(self, smil_url, video_id, fatal=True, f4m_params=None, transform_source=None):\n        smil = self._download_smil(smil_url, video_id, fatal=fatal, transform_source=transform_source)\n\n        if smil is False:\n            assert not fatal\n            return []\n\n        namespace = self._parse_smil_namespace(smil)\n\n        return self._parse_smil_formats(\n            smil, smil_url, video_id, namespace=namespace, f4m_params=f4m_params)\n\n    def _extract_smil_info(self, smil_url, video_id, fatal=True, f4m_params=None):\n        smil = self._download_smil(smil_url, video_id, fatal=fatal)\n        if smil is False:\n            return {}\n        return self._parse_smil(smil, smil_url, video_id, f4m_params=f4m_params)\n\n    def _download_smil(self, smil_url, video_id, fatal=True, transform_source=None):\n        return self._download_xml(\n            smil_url, video_id, 'Downloading SMIL file',\n            'Unable to download SMIL file', fatal=fatal, transform_source=transform_source)\n\n    def _parse_smil(self, smil, smil_url, video_id, f4m_params=None):\n        namespace = self._parse_smil_namespace(smil)\n\n        formats = self._parse_smil_formats(\n            smil, smil_url, video_id, namespace=namespace, f4m_params=f4m_params)\n        subtitles = self._parse_smil_subtitles(smil, namespace=namespace)\n\n        video_id = os.path.splitext(url_basename(smil_url))[0]\n        title = None\n        description = None\n        upload_date = None\n        for meta in smil.findall(self._xpath_ns('./head/meta', namespace)):\n            name = meta.attrib.get('name')\n            content = meta.attrib.get('content')\n            if not name or not content:\n                continue\n            if not title and name == 'title':\n                title = content\n            elif not description and name in ('description', 'abstract'):\n                description = content\n            elif not upload_date and name == 'date':\n                upload_date = unified_strdate(content)\n\n        thumbnails = [{\n            'id': image.get('type'),\n            'url': image.get('src'),\n            'width': int_or_none(image.get('width')),\n            'height': int_or_none(image.get('height')),\n        } for image in smil.findall(self._xpath_ns('.//image', namespace)) if image.get('src')]\n\n        return {\n            'id': video_id,\n            'title': title or video_id,\n            'description': description,\n            'upload_date': upload_date,\n            'thumbnails': thumbnails,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n    def _parse_smil_namespace(self, smil):\n        return self._search_regex(\n            r'(?i)^{([^}]+)?}smil$', smil.tag, 'namespace', default=None)\n\n    def _parse_smil_formats(self, smil, smil_url, video_id, namespace=None, f4m_params=None, transform_rtmp_url=None):\n        base = smil_url\n        for meta in smil.findall(self._xpath_ns('./head/meta', namespace)):\n            b = meta.get('base') or meta.get('httpBase')\n            if b:\n                base = b\n                break\n\n        formats = []\n        rtmp_count = 0\n        http_count = 0\n        m3u8_count = 0\n\n        srcs = []\n        media = smil.findall(self._xpath_ns('.//video', namespace)) + smil.findall(self._xpath_ns('.//audio', namespace))\n        for medium in media:\n            src = medium.get('src')\n            if not src or src in srcs:\n                continue\n            srcs.append(src)\n\n            bitrate = float_or_none(medium.get('system-bitrate') or medium.get('systemBitrate'), 1000)\n            filesize = int_or_none(medium.get('size') or medium.get('fileSize'))\n            width = int_or_none(medium.get('width'))\n            height = int_or_none(medium.get('height'))\n            proto = medium.get('proto')\n            ext = medium.get('ext')\n            src_ext = determine_ext(src)\n            streamer = medium.get('streamer') or base\n\n            if proto == 'rtmp' or streamer.startswith('rtmp'):\n                rtmp_count += 1\n                formats.append({\n                    'url': streamer,\n                    'play_path': src,\n                    'ext': 'flv',\n                    'format_id': 'rtmp-%d' % (rtmp_count if bitrate is None else bitrate),\n                    'tbr': bitrate,\n                    'filesize': filesize,\n                    'width': width,\n                    'height': height,\n                })\n                if transform_rtmp_url:\n                    streamer, src = transform_rtmp_url(streamer, src)\n                    formats[-1].update({\n                        'url': streamer,\n                        'play_path': src,\n                    })\n                continue\n\n            src_url = src if src.startswith('http') else compat_urlparse.urljoin(base, src)\n            src_url = src_url.strip()\n\n            if proto == 'm3u8' or src_ext == 'm3u8':\n                m3u8_formats = self._extract_m3u8_formats(\n                    src_url, video_id, ext or 'mp4', m3u8_id='hls', fatal=False)\n                if len(m3u8_formats) == 1:\n                    m3u8_count += 1\n                    m3u8_formats[0].update({\n                        'format_id': 'hls-%d' % (m3u8_count if bitrate is None else bitrate),\n                        'tbr': bitrate,\n                        'width': width,\n                        'height': height,\n                    })\n                formats.extend(m3u8_formats)\n                continue\n\n            if src_ext == 'f4m':\n                f4m_url = src_url\n                if not f4m_params:\n                    f4m_params = {\n                        'hdcore': '3.2.0',\n                        'plugin': 'flowplayer-3.2.0.1',\n                    }\n                f4m_url += '&' if '?' in f4m_url else '?'\n                f4m_url += compat_urllib_parse_urlencode(f4m_params)\n                formats.extend(self._extract_f4m_formats(f4m_url, video_id, f4m_id='hds', fatal=False))\n                continue\n\n            if src_url.startswith('http') and self._is_valid_url(src, video_id):\n                http_count += 1\n                formats.append({\n                    'url': src_url,\n                    'ext': ext or src_ext or 'flv',\n                    'format_id': 'http-%d' % (bitrate or http_count),\n                    'tbr': bitrate,\n                    'filesize': filesize,\n                    'width': width,\n                    'height': height,\n                })\n                continue\n\n        return formats\n\n    def _parse_smil_subtitles(self, smil, namespace=None, subtitles_lang='en'):\n        urls = []\n        subtitles = {}\n        for num, textstream in enumerate(smil.findall(self._xpath_ns('.//textstream', namespace))):\n            src = textstream.get('src')\n            if not src or src in urls:\n                continue\n            urls.append(src)\n            ext = textstream.get('ext') or mimetype2ext(textstream.get('type')) or determine_ext(src)\n            lang = textstream.get('systemLanguage') or textstream.get('systemLanguageName') or textstream.get('lang') or subtitles_lang\n            subtitles.setdefault(lang, []).append({\n                'url': src,\n                'ext': ext,\n            })\n        return subtitles\n\n    def _extract_xspf_playlist(self, playlist_url, playlist_id, fatal=True):\n        xspf = self._download_xml(\n            playlist_url, playlist_id, 'Downloading xpsf playlist',\n            'Unable to download xspf manifest', fatal=fatal)\n        if xspf is False:\n            return []\n        return self._parse_xspf(xspf, playlist_id)\n\n    def _parse_xspf(self, playlist, playlist_id):\n        NS_MAP = {\n            'xspf': 'http://xspf.org/ns/0/',\n            's1': 'http://static.streamone.nl/player/ns/0',\n        }\n\n        entries = []\n        for track in playlist.findall(xpath_with_ns('./xspf:trackList/xspf:track', NS_MAP)):\n            title = xpath_text(\n                track, xpath_with_ns('./xspf:title', NS_MAP), 'title', default=playlist_id)\n            description = xpath_text(\n                track, xpath_with_ns('./xspf:annotation', NS_MAP), 'description')\n            thumbnail = xpath_text(\n                track, xpath_with_ns('./xspf:image', NS_MAP), 'thumbnail')\n            duration = float_or_none(\n                xpath_text(track, xpath_with_ns('./xspf:duration', NS_MAP), 'duration'), 1000)\n\n            formats = [{\n                'url': location.text,\n                'format_id': location.get(xpath_with_ns('s1:label', NS_MAP)),\n                'width': int_or_none(location.get(xpath_with_ns('s1:width', NS_MAP))),\n                'height': int_or_none(location.get(xpath_with_ns('s1:height', NS_MAP))),\n            } for location in track.findall(xpath_with_ns('./xspf:location', NS_MAP))]\n            self._sort_formats(formats)\n\n            entries.append({\n                'id': playlist_id,\n                'title': title,\n                'description': description,\n                'thumbnail': thumbnail,\n                'duration': duration,\n                'formats': formats,\n            })\n        return entries\n\n    def _extract_mpd_formats(self, mpd_url, video_id, mpd_id=None, note=None, errnote=None, fatal=True, formats_dict={}):\n        res = self._download_webpage_handle(\n            mpd_url, video_id,\n            note=note or 'Downloading MPD manifest',\n            errnote=errnote or 'Failed to download MPD manifest',\n            fatal=fatal)\n        if res is False:\n            return []\n        mpd, urlh = res\n        mpd_base_url = base_url(urlh.geturl())\n\n        return self._parse_mpd_formats(\n            compat_etree_fromstring(mpd.encode('utf-8')), mpd_id, mpd_base_url,\n            formats_dict=formats_dict, mpd_url=mpd_url)\n\n    def _parse_mpd_formats(self, mpd_doc, mpd_id=None, mpd_base_url='', formats_dict={}, mpd_url=None):\n        \"\"\"\n        Parse formats from MPD manifest.\n        References:\n         1. MPEG-DASH Standard, ISO/IEC 23009-1:2014(E),\n            http://standards.iso.org/ittf/PubliclyAvailableStandards/c065274_ISO_IEC_23009-1_2014.zip\n         2. https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\n        \"\"\"\n        if mpd_doc.get('type') == 'dynamic':\n            return []\n\n        namespace = self._search_regex(r'(?i)^{([^}]+)?}MPD$', mpd_doc.tag, 'namespace', default=None)\n\n        def _add_ns(path):\n            return self._xpath_ns(path, namespace)\n\n        def is_drm_protected(element):\n            return element.find(_add_ns('ContentProtection')) is not None\n\n        def extract_multisegment_info(element, ms_parent_info):\n            ms_info = ms_parent_info.copy()\n\n            # As per [1, 5.3.9.2.2] SegmentList and SegmentTemplate share some\n            # common attributes and elements.  We will only extract relevant\n            # for us.\n            def extract_common(source):\n                segment_timeline = source.find(_add_ns('SegmentTimeline'))\n                if segment_timeline is not None:\n                    s_e = segment_timeline.findall(_add_ns('S'))\n                    if s_e:\n                        ms_info['total_number'] = 0\n                        ms_info['s'] = []\n                        for s in s_e:\n                            r = int(s.get('r', 0))\n                            ms_info['total_number'] += 1 + r\n                            ms_info['s'].append({\n                                't': int(s.get('t', 0)),\n                                # @d is mandatory (see [1, 5.3.9.6.2, Table 17, page 60])\n                                'd': int(s.attrib['d']),\n                                'r': r,\n                            })\n                start_number = source.get('startNumber')\n                if start_number:\n                    ms_info['start_number'] = int(start_number)\n                timescale = source.get('timescale')\n                if timescale:\n                    ms_info['timescale'] = int(timescale)\n                segment_duration = source.get('duration')\n                if segment_duration:\n                    ms_info['segment_duration'] = float(segment_duration)\n\n            def extract_Initialization(source):\n                initialization = source.find(_add_ns('Initialization'))\n                if initialization is not None:\n                    ms_info['initialization_url'] = initialization.attrib['sourceURL']\n\n            segment_list = element.find(_add_ns('SegmentList'))\n            if segment_list is not None:\n                extract_common(segment_list)\n                extract_Initialization(segment_list)\n                segment_urls_e = segment_list.findall(_add_ns('SegmentURL'))\n                if segment_urls_e:\n                    ms_info['segment_urls'] = [segment.attrib['media'] for segment in segment_urls_e]\n            else:\n                segment_template = element.find(_add_ns('SegmentTemplate'))\n                if segment_template is not None:\n                    extract_common(segment_template)\n                    media = segment_template.get('media')\n                    if media:\n                        ms_info['media'] = media\n                    initialization = segment_template.get('initialization')\n                    if initialization:\n                        ms_info['initialization'] = initialization\n                    else:\n                        extract_Initialization(segment_template)\n            return ms_info\n\n        mpd_duration = parse_duration(mpd_doc.get('mediaPresentationDuration'))\n        formats = []\n        for period in mpd_doc.findall(_add_ns('Period')):\n            period_duration = parse_duration(period.get('duration')) or mpd_duration\n            period_ms_info = extract_multisegment_info(period, {\n                'start_number': 1,\n                'timescale': 1,\n            })\n            for adaptation_set in period.findall(_add_ns('AdaptationSet')):\n                if is_drm_protected(adaptation_set):\n                    continue\n                adaption_set_ms_info = extract_multisegment_info(adaptation_set, period_ms_info)\n                for representation in adaptation_set.findall(_add_ns('Representation')):\n                    if is_drm_protected(representation):\n                        continue\n                    representation_attrib = adaptation_set.attrib.copy()\n                    representation_attrib.update(representation.attrib)\n                    # According to [1, 5.3.7.2, Table 9, page 41], @mimeType is mandatory\n                    mime_type = representation_attrib['mimeType']\n                    content_type = mime_type.split('/')[0]\n                    if content_type == 'text':\n                        # TODO implement WebVTT downloading\n                        pass\n                    elif content_type in ('video', 'audio'):\n                        base_url = ''\n                        for element in (representation, adaptation_set, period, mpd_doc):\n                            base_url_e = element.find(_add_ns('BaseURL'))\n                            if base_url_e is not None:\n                                base_url = base_url_e.text + base_url\n                                if re.match(r'^https?://', base_url):\n                                    break\n                        if mpd_base_url and not re.match(r'^https?://', base_url):\n                            if not mpd_base_url.endswith('/') and not base_url.startswith('/'):\n                                mpd_base_url += '/'\n                            base_url = mpd_base_url + base_url\n                        representation_id = representation_attrib.get('id')\n                        lang = representation_attrib.get('lang')\n                        url_el = representation.find(_add_ns('BaseURL'))\n                        filesize = int_or_none(url_el.attrib.get('{http://youtube.com/yt/2012/10/10}contentLength') if url_el is not None else None)\n                        bandwidth = int_or_none(representation_attrib.get('bandwidth'))\n                        f = {\n                            'format_id': '%s-%s' % (mpd_id, representation_id) if mpd_id else representation_id,\n                            'url': base_url,\n                            'manifest_url': mpd_url,\n                            'ext': mimetype2ext(mime_type),\n                            'width': int_or_none(representation_attrib.get('width')),\n                            'height': int_or_none(representation_attrib.get('height')),\n                            'tbr': float_or_none(bandwidth, 1000),\n                            'asr': int_or_none(representation_attrib.get('audioSamplingRate')),\n                            'fps': int_or_none(representation_attrib.get('frameRate')),\n                            'language': lang if lang not in ('mul', 'und', 'zxx', 'mis') else None,\n                            'format_note': 'DASH %s' % content_type,\n                            'filesize': filesize,\n                            'container': mimetype2ext(mime_type) + '_dash',\n                        }\n                        f.update(parse_codecs(representation_attrib.get('codecs')))\n                        representation_ms_info = extract_multisegment_info(representation, adaption_set_ms_info)\n\n                        def prepare_template(template_name, identifiers):\n                            t = representation_ms_info[template_name]\n                            t = t.replace('$RepresentationID$', representation_id)\n                            t = re.sub(r'\\$(%s)\\$' % '|'.join(identifiers), r'%(\\1)d', t)\n                            t = re.sub(r'\\$(%s)%%([^$]+)\\$' % '|'.join(identifiers), r'%(\\1)\\2', t)\n                            t.replace('$$', '$')\n                            return t\n\n                        # @initialization is a regular template like @media one\n                        # so it should be handled just the same way (see\n                        # https://github.com/rg3/youtube-dl/issues/11605)\n                        if 'initialization' in representation_ms_info:\n                            initialization_template = prepare_template(\n                                'initialization',\n                                # As per [1, 5.3.9.4.2, Table 15, page 54] $Number$ and\n                                # $Time$ shall not be included for @initialization thus\n                                # only $Bandwidth$ remains\n                                ('Bandwidth', ))\n                            representation_ms_info['initialization_url'] = initialization_template % {\n                                'Bandwidth': bandwidth,\n                            }\n\n                        def location_key(location):\n                            return 'url' if re.match(r'^https?://', location) else 'path'\n\n                        if 'segment_urls' not in representation_ms_info and 'media' in representation_ms_info:\n\n                            media_template = prepare_template('media', ('Number', 'Bandwidth', 'Time'))\n                            media_location_key = location_key(media_template)\n\n                            # As per [1, 5.3.9.4.4, Table 16, page 55] $Number$ and $Time$\n                            # can't be used at the same time\n                            if '%(Number' in media_template and 's' not in representation_ms_info:\n                                segment_duration = None\n                                if 'total_number' not in representation_ms_info and 'segment_duration' in representation_ms_info:\n                                    segment_duration = float_or_none(representation_ms_info['segment_duration'], representation_ms_info['timescale'])\n                                    representation_ms_info['total_number'] = int(math.ceil(float(period_duration) / segment_duration))\n                                representation_ms_info['fragments'] = [{\n                                    media_location_key: media_template % {\n                                        'Number': segment_number,\n                                        'Bandwidth': bandwidth,\n                                    },\n                                    'duration': segment_duration,\n                                } for segment_number in range(\n                                    representation_ms_info['start_number'],\n                                    representation_ms_info['total_number'] + representation_ms_info['start_number'])]\n                            else:\n                                # $Number*$ or $Time$ in media template with S list available\n                                # Example $Number*$: http://www.svtplay.se/klipp/9023742/stopptid-om-bjorn-borg\n                                # Example $Time$: https://play.arkena.com/embed/avp/v2/player/media/b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe/1/129411\n                                representation_ms_info['fragments'] = []\n                                segment_time = 0\n                                segment_d = None\n                                segment_number = representation_ms_info['start_number']\n\n                                def add_segment_url():\n                                    segment_url = media_template % {\n                                        'Time': segment_time,\n                                        'Bandwidth': bandwidth,\n                                        'Number': segment_number,\n                                    }\n                                    representation_ms_info['fragments'].append({\n                                        media_location_key: segment_url,\n                                        'duration': float_or_none(segment_d, representation_ms_info['timescale']),\n                                    })\n\n                                for num, s in enumerate(representation_ms_info['s']):\n                                    segment_time = s.get('t') or segment_time\n                                    segment_d = s['d']\n                                    add_segment_url()\n                                    segment_number += 1\n                                    for r in range(s.get('r', 0)):\n                                        segment_time += segment_d\n                                        add_segment_url()\n                                        segment_number += 1\n                                    segment_time += segment_d\n                        elif 'segment_urls' in representation_ms_info and 's' in representation_ms_info:\n                            # No media template\n                            # Example: https://www.youtube.com/watch?v=iXZV5uAYMJI\n                            # or any YouTube dashsegments video\n                            fragments = []\n                            segment_index = 0\n                            timescale = representation_ms_info['timescale']\n                            for s in representation_ms_info['s']:\n                                duration = float_or_none(s['d'], timescale)\n                                for r in range(s.get('r', 0) + 1):\n                                    segment_uri = representation_ms_info['segment_urls'][segment_index]\n                                    fragments.append({\n                                        location_key(segment_uri): segment_uri,\n                                        'duration': duration,\n                                    })\n                                    segment_index += 1\n                            representation_ms_info['fragments'] = fragments\n                        elif 'segment_urls' in representation_ms_info:\n                            # Segment URLs with no SegmentTimeline\n                            # Example: https://www.seznam.cz/zpravy/clanek/cesko-zasahne-vitr-o-sile-vichrice-muze-byt-i-zivotu-nebezpecny-39091\n                            # https://github.com/rg3/youtube-dl/pull/14844\n                            fragments = []\n                            segment_duration = float_or_none(\n                                representation_ms_info['segment_duration'],\n                                representation_ms_info['timescale']) if 'segment_duration' in representation_ms_info else None\n                            for segment_url in representation_ms_info['segment_urls']:\n                                fragment = {\n                                    location_key(segment_url): segment_url,\n                                }\n                                if segment_duration:\n                                    fragment['duration'] = segment_duration\n                                fragments.append(fragment)\n                            representation_ms_info['fragments'] = fragments\n                        # NB: MPD manifest may contain direct URLs to unfragmented media.\n                        # No fragments key is present in this case.\n                        if 'fragments' in representation_ms_info:\n                            f.update({\n                                'fragment_base_url': base_url,\n                                'fragments': [],\n                                'protocol': 'http_dash_segments',\n                            })\n                            if 'initialization_url' in representation_ms_info:\n                                initialization_url = representation_ms_info['initialization_url']\n                                if not f.get('url'):\n                                    f['url'] = initialization_url\n                                f['fragments'].append({location_key(initialization_url): initialization_url})\n                            f['fragments'].extend(representation_ms_info['fragments'])\n                        # According to [1, 5.3.5.2, Table 7, page 35] @id of Representation\n                        # is not necessarily unique within a Period thus formats with\n                        # the same `format_id` are quite possible. There are numerous examples\n                        # of such manifests (see https://github.com/rg3/youtube-dl/issues/15111,\n                        # https://github.com/rg3/youtube-dl/issues/13919)\n                        full_info = formats_dict.get(representation_id, {}).copy()\n                        full_info.update(f)\n                        formats.append(full_info)\n                    else:\n                        self.report_warning('Unknown MIME type %s in DASH manifest' % mime_type)\n        return formats\n\n    def _extract_ism_formats(self, ism_url, video_id, ism_id=None, note=None, errnote=None, fatal=True):\n        res = self._download_webpage_handle(\n            ism_url, video_id,\n            note=note or 'Downloading ISM manifest',\n            errnote=errnote or 'Failed to download ISM manifest',\n            fatal=fatal)\n        if res is False:\n            return []\n        ism, urlh = res\n\n        return self._parse_ism_formats(\n            compat_etree_fromstring(ism.encode('utf-8')), urlh.geturl(), ism_id)\n\n    def _parse_ism_formats(self, ism_doc, ism_url, ism_id=None):\n        \"\"\"\n        Parse formats from ISM manifest.\n        References:\n         1. [MS-SSTR]: Smooth Streaming Protocol,\n            https://msdn.microsoft.com/en-us/library/ff469518.aspx\n        \"\"\"\n        if ism_doc.get('IsLive') == 'TRUE' or ism_doc.find('Protection') is not None:\n            return []\n\n        duration = int(ism_doc.attrib['Duration'])\n        timescale = int_or_none(ism_doc.get('TimeScale')) or 10000000\n\n        formats = []\n        for stream in ism_doc.findall('StreamIndex'):\n            stream_type = stream.get('Type')\n            if stream_type not in ('video', 'audio'):\n                continue\n            url_pattern = stream.attrib['Url']\n            stream_timescale = int_or_none(stream.get('TimeScale')) or timescale\n            stream_name = stream.get('Name')\n            for track in stream.findall('QualityLevel'):\n                fourcc = track.get('FourCC', 'AACL' if track.get('AudioTag') == '255' else None)\n                # TODO: add support for WVC1 and WMAP\n                if fourcc not in ('H264', 'AVC1', 'AACL'):\n                    self.report_warning('%s is not a supported codec' % fourcc)\n                    continue\n                tbr = int(track.attrib['Bitrate']) // 1000\n                # [1] does not mention Width and Height attributes. However,\n                # they're often present while MaxWidth and MaxHeight are\n                # missing, so should be used as fallbacks\n                width = int_or_none(track.get('MaxWidth') or track.get('Width'))\n                height = int_or_none(track.get('MaxHeight') or track.get('Height'))\n                sampling_rate = int_or_none(track.get('SamplingRate'))\n\n                track_url_pattern = re.sub(r'{[Bb]itrate}', track.attrib['Bitrate'], url_pattern)\n                track_url_pattern = compat_urlparse.urljoin(ism_url, track_url_pattern)\n\n                fragments = []\n                fragment_ctx = {\n                    'time': 0,\n                }\n                stream_fragments = stream.findall('c')\n                for stream_fragment_index, stream_fragment in enumerate(stream_fragments):\n                    fragment_ctx['time'] = int_or_none(stream_fragment.get('t')) or fragment_ctx['time']\n                    fragment_repeat = int_or_none(stream_fragment.get('r')) or 1\n                    fragment_ctx['duration'] = int_or_none(stream_fragment.get('d'))\n                    if not fragment_ctx['duration']:\n                        try:\n                            next_fragment_time = int(stream_fragment[stream_fragment_index + 1].attrib['t'])\n                        except IndexError:\n                            next_fragment_time = duration\n                        fragment_ctx['duration'] = (next_fragment_time - fragment_ctx['time']) / fragment_repeat\n                    for _ in range(fragment_repeat):\n                        fragments.append({\n                            'url': re.sub(r'{start[ _]time}', compat_str(fragment_ctx['time']), track_url_pattern),\n                            'duration': fragment_ctx['duration'] / stream_timescale,\n                        })\n                        fragment_ctx['time'] += fragment_ctx['duration']\n\n                format_id = []\n                if ism_id:\n                    format_id.append(ism_id)\n                if stream_name:\n                    format_id.append(stream_name)\n                format_id.append(compat_str(tbr))\n\n                formats.append({\n                    'format_id': '-'.join(format_id),\n                    'url': ism_url,\n                    'manifest_url': ism_url,\n                    'ext': 'ismv' if stream_type == 'video' else 'isma',\n                    'width': width,\n                    'height': height,\n                    'tbr': tbr,\n                    'asr': sampling_rate,\n                    'vcodec': 'none' if stream_type == 'audio' else fourcc,\n                    'acodec': 'none' if stream_type == 'video' else fourcc,\n                    'protocol': 'ism',\n                    'fragments': fragments,\n                    '_download_params': {\n                        'duration': duration,\n                        'timescale': stream_timescale,\n                        'width': width or 0,\n                        'height': height or 0,\n                        'fourcc': fourcc,\n                        'codec_private_data': track.get('CodecPrivateData'),\n                        'sampling_rate': sampling_rate,\n                        'channels': int_or_none(track.get('Channels', 2)),\n                        'bits_per_sample': int_or_none(track.get('BitsPerSample', 16)),\n                        'nal_unit_length_field': int_or_none(track.get('NALUnitLengthField', 4)),\n                    },\n                })\n        return formats\n\n    def _parse_html5_media_entries(self, base_url, webpage, video_id, m3u8_id=None, m3u8_entry_protocol='m3u8', mpd_id=None, preference=None):\n        def absolute_url(video_url):\n            return compat_urlparse.urljoin(base_url, video_url)\n\n        def parse_content_type(content_type):\n            if not content_type:\n                return {}\n            ctr = re.search(r'(?P<mimetype>[^/]+/[^;]+)(?:;\\s*codecs=\"?(?P<codecs>[^\"]+))?', content_type)\n            if ctr:\n                mimetype, codecs = ctr.groups()\n                f = parse_codecs(codecs)\n                f['ext'] = mimetype2ext(mimetype)\n                return f\n            return {}\n\n        def _media_formats(src, cur_media_type, type_info={}):\n            full_url = absolute_url(src)\n            ext = type_info.get('ext') or determine_ext(full_url)\n            if ext == 'm3u8':\n                is_plain_url = False\n                formats = self._extract_m3u8_formats(\n                    full_url, video_id, ext='mp4',\n                    entry_protocol=m3u8_entry_protocol, m3u8_id=m3u8_id,\n                    preference=preference, fatal=False)\n            elif ext == 'mpd':\n                is_plain_url = False\n                formats = self._extract_mpd_formats(\n                    full_url, video_id, mpd_id=mpd_id, fatal=False)\n            else:\n                is_plain_url = True\n                formats = [{\n                    'url': full_url,\n                    'vcodec': 'none' if cur_media_type == 'audio' else None,\n                }]\n            return is_plain_url, formats\n\n        entries = []\n        # amp-video and amp-audio are very similar to their HTML5 counterparts\n        # so we wll include them right here (see\n        # https://www.ampproject.org/docs/reference/components/amp-video)\n        media_tags = [(media_tag, media_type, '')\n                      for media_tag, media_type\n                      in re.findall(r'(?s)(<(?:amp-)?(video|audio)[^>]*/>)', webpage)]\n        media_tags.extend(re.findall(\n            # We only allow video|audio followed by a whitespace or '>'.\n            # Allowing more characters may end up in significant slow down (see\n            # https://github.com/rg3/youtube-dl/issues/11979, example URL:\n            # http://www.porntrex.com/maps/videositemap.xml).\n            r'(?s)(<(?P<tag>(?:amp-)?(?:video|audio))(?:\\s+[^>]*)?>)(.*?)</(?P=tag)>', webpage))\n        for media_tag, media_type, media_content in media_tags:\n            media_info = {\n                'formats': [],\n                'subtitles': {},\n            }\n            media_attributes = extract_attributes(media_tag)\n            src = media_attributes.get('src')\n            if src:\n                _, formats = _media_formats(src, media_type)\n                media_info['formats'].extend(formats)\n            media_info['thumbnail'] = media_attributes.get('poster')\n            if media_content:\n                for source_tag in re.findall(r'<source[^>]+>', media_content):\n                    source_attributes = extract_attributes(source_tag)\n                    src = source_attributes.get('src')\n                    if not src:\n                        continue\n                    f = parse_content_type(source_attributes.get('type'))\n                    is_plain_url, formats = _media_formats(src, media_type, f)\n                    if is_plain_url:\n                        # res attribute is not standard but seen several times\n                        # in the wild\n                        f.update({\n                            'height': int_or_none(source_attributes.get('res')),\n                            'format_id': source_attributes.get('label'),\n                        })\n                        f.update(formats[0])\n                        media_info['formats'].append(f)\n                    else:\n                        media_info['formats'].extend(formats)\n                for track_tag in re.findall(r'<track[^>]+>', media_content):\n                    track_attributes = extract_attributes(track_tag)\n                    kind = track_attributes.get('kind')\n                    if not kind or kind in ('subtitles', 'captions'):\n                        src = track_attributes.get('src')\n                        if not src:\n                            continue\n                        lang = track_attributes.get('srclang') or track_attributes.get('lang') or track_attributes.get('label')\n                        media_info['subtitles'].setdefault(lang, []).append({\n                            'url': absolute_url(src),\n                        })\n            if media_info['formats'] or media_info['subtitles']:\n                entries.append(media_info)\n        return entries\n\n    def _extract_akamai_formats(self, manifest_url, video_id, hosts={}):\n        formats = []\n        hdcore_sign = 'hdcore=3.7.0'\n        f4m_url = re.sub(r'(https?://[^/]+)/i/', r'\\1/z/', manifest_url).replace('/master.m3u8', '/manifest.f4m')\n        hds_host = hosts.get('hds')\n        if hds_host:\n            f4m_url = re.sub(r'(https?://)[^/]+', r'\\1' + hds_host, f4m_url)\n        if 'hdcore=' not in f4m_url:\n            f4m_url += ('&' if '?' in f4m_url else '?') + hdcore_sign\n        f4m_formats = self._extract_f4m_formats(\n            f4m_url, video_id, f4m_id='hds', fatal=False)\n        for entry in f4m_formats:\n            entry.update({'extra_param_to_segment_url': hdcore_sign})\n        formats.extend(f4m_formats)\n        m3u8_url = re.sub(r'(https?://[^/]+)/z/', r'\\1/i/', manifest_url).replace('/manifest.f4m', '/master.m3u8')\n        hls_host = hosts.get('hls')\n        if hls_host:\n            m3u8_url = re.sub(r'(https?://)[^/]+', r'\\1' + hls_host, m3u8_url)\n        formats.extend(self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native',\n            m3u8_id='hls', fatal=False))\n        return formats\n\n    def _extract_wowza_formats(self, url, video_id, m3u8_entry_protocol='m3u8_native', skip_protocols=[]):\n        query = compat_urlparse.urlparse(url).query\n        url = re.sub(r'/(?:manifest|playlist|jwplayer)\\.(?:m3u8|f4m|mpd|smil)', '', url)\n        mobj = re.search(\n            r'(?:(?:http|rtmp|rtsp)(?P<s>s)?:)?(?P<url>//[^?]+)', url)\n        url_base = mobj.group('url')\n        http_base_url = '%s%s:%s' % ('http', mobj.group('s') or '', url_base)\n        formats = []\n\n        def manifest_url(manifest):\n            m_url = '%s/%s' % (http_base_url, manifest)\n            if query:\n                m_url += '?%s' % query\n            return m_url\n\n        if 'm3u8' not in skip_protocols:\n            formats.extend(self._extract_m3u8_formats(\n                manifest_url('playlist.m3u8'), video_id, 'mp4',\n                m3u8_entry_protocol, m3u8_id='hls', fatal=False))\n        if 'f4m' not in skip_protocols:\n            formats.extend(self._extract_f4m_formats(\n                manifest_url('manifest.f4m'),\n                video_id, f4m_id='hds', fatal=False))\n        if 'dash' not in skip_protocols:\n            formats.extend(self._extract_mpd_formats(\n                manifest_url('manifest.mpd'),\n                video_id, mpd_id='dash', fatal=False))\n        if re.search(r'(?:/smil:|\\.smil)', url_base):\n            if 'smil' not in skip_protocols:\n                rtmp_formats = self._extract_smil_formats(\n                    manifest_url('jwplayer.smil'),\n                    video_id, fatal=False)\n                for rtmp_format in rtmp_formats:\n                    rtsp_format = rtmp_format.copy()\n                    rtsp_format['url'] = '%s/%s' % (rtmp_format['url'], rtmp_format['play_path'])\n                    del rtsp_format['play_path']\n                    del rtsp_format['ext']\n                    rtsp_format.update({\n                        'url': rtsp_format['url'].replace('rtmp://', 'rtsp://'),\n                        'format_id': rtmp_format['format_id'].replace('rtmp', 'rtsp'),\n                        'protocol': 'rtsp',\n                    })\n                    formats.extend([rtmp_format, rtsp_format])\n        else:\n            for protocol in ('rtmp', 'rtsp'):\n                if protocol not in skip_protocols:\n                    formats.append({\n                        'url': '%s:%s' % (protocol, url_base),\n                        'format_id': protocol,\n                        'protocol': protocol,\n                    })\n        return formats\n\n    def _find_jwplayer_data(self, webpage, video_id=None, transform_source=js_to_json):\n        mobj = re.search(\n            r'(?s)jwplayer\\((?P<quote>[\\'\"])[^\\'\" ]+(?P=quote)\\)(?!</script>).*?\\.setup\\s*\\((?P<options>[^)]+)\\)',\n            webpage)\n        if mobj:\n            try:\n                jwplayer_data = self._parse_json(mobj.group('options'),\n                                                 video_id=video_id,\n                                                 transform_source=transform_source)\n            except ExtractorError:\n                pass\n            else:\n                if isinstance(jwplayer_data, dict):\n                    return jwplayer_data\n\n    def _extract_jwplayer_data(self, webpage, video_id, *args, **kwargs):\n        jwplayer_data = self._find_jwplayer_data(\n            webpage, video_id, transform_source=js_to_json)\n        return self._parse_jwplayer_data(\n            jwplayer_data, video_id, *args, **kwargs)\n\n    def _parse_jwplayer_data(self, jwplayer_data, video_id=None, require_title=True,\n                             m3u8_id=None, mpd_id=None, rtmp_params=None, base_url=None):\n        # JWPlayer backward compatibility: flattened playlists\n        # https://github.com/jwplayer/jwplayer/blob/v7.4.3/src/js/api/config.js#L81-L96\n        if 'playlist' not in jwplayer_data:\n            jwplayer_data = {'playlist': [jwplayer_data]}\n\n        entries = []\n\n        # JWPlayer backward compatibility: single playlist item\n        # https://github.com/jwplayer/jwplayer/blob/v7.7.0/src/js/playlist/playlist.js#L10\n        if not isinstance(jwplayer_data['playlist'], list):\n            jwplayer_data['playlist'] = [jwplayer_data['playlist']]\n\n        for video_data in jwplayer_data['playlist']:\n            # JWPlayer backward compatibility: flattened sources\n            # https://github.com/jwplayer/jwplayer/blob/v7.4.3/src/js/playlist/item.js#L29-L35\n            if 'sources' not in video_data:\n                video_data['sources'] = [video_data]\n\n            this_video_id = video_id or video_data['mediaid']\n\n            formats = self._parse_jwplayer_formats(\n                video_data['sources'], video_id=this_video_id, m3u8_id=m3u8_id,\n                mpd_id=mpd_id, rtmp_params=rtmp_params, base_url=base_url)\n\n            subtitles = {}\n            tracks = video_data.get('tracks')\n            if tracks and isinstance(tracks, list):\n                for track in tracks:\n                    if not isinstance(track, dict):\n                        continue\n                    track_kind = track.get('kind')\n                    if not track_kind or not isinstance(track_kind, compat_str):\n                        continue\n                    if track_kind.lower() not in ('captions', 'subtitles'):\n                        continue\n                    track_url = urljoin(base_url, track.get('file'))\n                    if not track_url:\n                        continue\n                    subtitles.setdefault(track.get('label') or 'en', []).append({\n                        'url': self._proto_relative_url(track_url)\n                    })\n\n            entry = {\n                'id': this_video_id,\n                'title': unescapeHTML(video_data['title'] if require_title else video_data.get('title')),\n                'description': video_data.get('description'),\n                'thumbnail': self._proto_relative_url(video_data.get('image')),\n                'timestamp': int_or_none(video_data.get('pubdate')),\n                'duration': float_or_none(jwplayer_data.get('duration') or video_data.get('duration')),\n                'subtitles': subtitles,\n            }\n            # https://github.com/jwplayer/jwplayer/blob/master/src/js/utils/validator.js#L32\n            if len(formats) == 1 and re.search(r'^(?:http|//).*(?:youtube\\.com|youtu\\.be)/.+', formats[0]['url']):\n                entry.update({\n                    '_type': 'url_transparent',\n                    'url': formats[0]['url'],\n                })\n            else:\n                self._sort_formats(formats)\n                entry['formats'] = formats\n            entries.append(entry)\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            return self.playlist_result(entries)\n\n    def _parse_jwplayer_formats(self, jwplayer_sources_data, video_id=None,\n                                m3u8_id=None, mpd_id=None, rtmp_params=None, base_url=None):\n        urls = []\n        formats = []\n        for source in jwplayer_sources_data:\n            if not isinstance(source, dict):\n                continue\n            source_url = self._proto_relative_url(source.get('file'))\n            if not source_url:\n                continue\n            if base_url:\n                source_url = compat_urlparse.urljoin(base_url, source_url)\n            if source_url in urls:\n                continue\n            urls.append(source_url)\n            source_type = source.get('type') or ''\n            ext = mimetype2ext(source_type) or determine_ext(source_url)\n            if source_type == 'hls' or ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    source_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id=m3u8_id, fatal=False))\n            elif source_type == 'dash' or ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    source_url, video_id, mpd_id=mpd_id, fatal=False))\n            elif ext == 'smil':\n                formats.extend(self._extract_smil_formats(\n                    source_url, video_id, fatal=False))\n            # https://github.com/jwplayer/jwplayer/blob/master/src/js/providers/default.js#L67\n            elif source_type.startswith('audio') or ext in (\n                    'oga', 'aac', 'mp3', 'mpeg', 'vorbis'):\n                formats.append({\n                    'url': source_url,\n                    'vcodec': 'none',\n                    'ext': ext,\n                })\n            else:\n                height = int_or_none(source.get('height'))\n                if height is None:\n                    # Often no height is provided but there is a label in\n                    # format like \"1080p\", \"720p SD\", or 1080.\n                    height = int_or_none(self._search_regex(\n                        r'^(\\d{3,4})[pP]?(?:\\b|$)', compat_str(source.get('label') or ''),\n                        'height', default=None))\n                a_format = {\n                    'url': source_url,\n                    'width': int_or_none(source.get('width')),\n                    'height': height,\n                    'tbr': int_or_none(source.get('bitrate')),\n                    'ext': ext,\n                }\n                if source_url.startswith('rtmp'):\n                    a_format['ext'] = 'flv'\n                    # See com/longtailvideo/jwplayer/media/RTMPMediaProvider.as\n                    # of jwplayer.flash.swf\n                    rtmp_url_parts = re.split(\n                        r'((?:mp4|mp3|flv):)', source_url, 1)\n                    if len(rtmp_url_parts) == 3:\n                        rtmp_url, prefix, play_path = rtmp_url_parts\n                        a_format.update({\n                            'url': rtmp_url,\n                            'play_path': prefix + play_path,\n                        })\n                    if rtmp_params:\n                        a_format.update(rtmp_params)\n                formats.append(a_format)\n        return formats\n\n    def _live_title(self, name):\n        \"\"\" Generate the title for a live video \"\"\"\n        now = datetime.datetime.now()\n        now_str = now.strftime('%Y-%m-%d %H:%M')\n        return name + ' ' + now_str\n\n    def _int(self, v, name, fatal=False, **kwargs):\n        res = int_or_none(v, **kwargs)\n        if 'get_attr' in kwargs:\n            print(getattr(v, kwargs['get_attr']))\n        if res is None:\n            msg = 'Failed to extract %s: Could not parse value %r' % (name, v)\n            if fatal:\n                raise ExtractorError(msg)\n            else:\n                self._downloader.report_warning(msg)\n        return res\n\n    def _float(self, v, name, fatal=False, **kwargs):\n        res = float_or_none(v, **kwargs)\n        if res is None:\n            msg = 'Failed to extract %s: Could not parse value %r' % (name, v)\n            if fatal:\n                raise ExtractorError(msg)\n            else:\n                self._downloader.report_warning(msg)\n        return res\n\n    def _set_cookie(self, domain, name, value, expire_time=None, port=None,\n                    path='/', secure=False, discard=False, rest={}, **kwargs):\n        cookie = compat_cookiejar.Cookie(\n            0, name, value, port, port is not None, domain, True,\n            domain.startswith('.'), path, True, secure, expire_time,\n            discard, None, None, rest)\n        self._downloader.cookiejar.set_cookie(cookie)\n\n    def _get_cookies(self, url):\n        \"\"\" Return a compat_cookies.SimpleCookie with the cookies for the url \"\"\"\n        req = sanitized_Request(url)\n        self._downloader.cookiejar.add_cookie_header(req)\n        return compat_cookies.SimpleCookie(req.get_header('Cookie'))\n\n    def get_testcases(self, include_onlymatching=False):\n        t = getattr(self, '_TEST', None)\n        if t:\n            assert not hasattr(self, '_TESTS'), \\\n                '%s has _TEST and _TESTS' % type(self).__name__\n            tests = [t]\n        else:\n            tests = getattr(self, '_TESTS', [])\n        for t in tests:\n            if not include_onlymatching and t.get('only_matching', False):\n                continue\n            t['name'] = type(self).__name__[:-len('IE')]\n            yield t\n\n    def is_suitable(self, age_limit):\n        \"\"\" Test whether the extractor is generally suitable for the given\n        age limit (i.e. pornographic sites are not, all others usually are) \"\"\"\n\n        any_restricted = False\n        for tc in self.get_testcases(include_onlymatching=False):\n            if tc.get('playlist', []):\n                tc = tc['playlist'][0]\n            is_restricted = age_restricted(\n                tc.get('info_dict', {}).get('age_limit'), age_limit)\n            if not is_restricted:\n                return True\n            any_restricted = any_restricted or is_restricted\n        return not any_restricted\n\n    def extract_subtitles(self, *args, **kwargs):\n        if (self._downloader.params.get('writesubtitles', False) or\n                self._downloader.params.get('listsubtitles')):\n            return self._get_subtitles(*args, **kwargs)\n        return {}\n\n    def _get_subtitles(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')\n\n    @staticmethod\n    def _merge_subtitle_items(subtitle_list1, subtitle_list2):\n        \"\"\" Merge subtitle items for one language. Items with duplicated URLs\n        will be dropped. \"\"\"\n        list1_urls = set([item['url'] for item in subtitle_list1])\n        ret = list(subtitle_list1)\n        ret.extend([item for item in subtitle_list2 if item['url'] not in list1_urls])\n        return ret\n\n    @classmethod\n    def _merge_subtitles(cls, subtitle_dict1, subtitle_dict2):\n        \"\"\" Merge two subtitle dictionaries, language by language. \"\"\"\n        ret = dict(subtitle_dict1)\n        for lang in subtitle_dict2:\n            ret[lang] = cls._merge_subtitle_items(subtitle_dict1.get(lang, []), subtitle_dict2[lang])\n        return ret\n\n    def extract_automatic_captions(self, *args, **kwargs):\n        if (self._downloader.params.get('writeautomaticsub', False) or\n                self._downloader.params.get('listsubtitles')):\n            return self._get_automatic_captions(*args, **kwargs)\n        return {}\n\n    def _get_automatic_captions(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')\n\n    def mark_watched(self, *args, **kwargs):\n        if (self._downloader.params.get('mark_watched', False) and\n                (self._get_login_info()[0] is not None or\n                    self._downloader.params.get('cookiefile') is not None)):\n            self._mark_watched(*args, **kwargs)\n\n    def _mark_watched(self, *args, **kwargs):\n        raise NotImplementedError('This method must be implemented by subclasses')\n\n    def geo_verification_headers(self):\n        headers = {}\n        geo_verification_proxy = self._downloader.params.get('geo_verification_proxy')\n        if geo_verification_proxy:\n            headers['Ytdl-request-proxy'] = geo_verification_proxy\n        return headers\n\n    def _generic_id(self, url):\n        return compat_urllib_parse_unquote(os.path.splitext(url.rstrip('/').split('/')[-1])[0])\n\n    def _generic_title(self, url):\n        return compat_urllib_parse_unquote(os.path.splitext(url_basename(url))[0])\n\n\nclass SearchInfoExtractor(InfoExtractor):\n    \"\"\"\n    Base class for paged search queries extractors.\n    They accept URLs in the format _SEARCH_KEY(|all|[0-9]):{query}\n    Instances should define _SEARCH_KEY and _MAX_RESULTS.\n    \"\"\"\n\n    @classmethod\n    def _make_valid_url(cls):\n        return r'%s(?P<prefix>|[1-9][0-9]*|all):(?P<query>[\\s\\S]+)' % cls._SEARCH_KEY\n\n    @classmethod\n    def suitable(cls, url):\n        return re.match(cls._make_valid_url(), url) is not None\n\n    def _real_extract(self, query):\n        mobj = re.match(self._make_valid_url(), query)\n        if mobj is None:\n            raise ExtractorError('Invalid search query \"%s\"' % query)\n\n        prefix = mobj.group('prefix')\n        query = mobj.group('query')\n        if prefix == '':\n            return self._get_n_results(query, 1)\n        elif prefix == 'all':\n            return self._get_n_results(query, self._MAX_RESULTS)\n        else:\n            n = int(prefix)\n            if n <= 0:\n                raise ExtractorError('invalid download number %s for query \"%s\"' % (n, query))\n            elif n > self._MAX_RESULTS:\n                self._downloader.report_warning('%s returns max %i results (you requested %i)' % (self._SEARCH_KEY, self._MAX_RESULTS, n))\n                n = self._MAX_RESULTS\n            return self._get_n_results(query, n)\n\n    def _get_n_results(self, query, n):\n        \"\"\"Get a specified number of results for a query\"\"\"\n        raise NotImplementedError('This method must be implemented by subclasses')\n\n    @property\n    def SEARCH_KEY(self):\n        return self._SEARCH_KEY\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "common.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/common.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}