{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.git_rebase_merge_dir import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef output():\n    return ('\\n\\nIt seems that there is already a rebase-merge directory, and\\n'\n            'I wonder if you are in the middle of another rebase.  If that is the\\n'\n            'case, please try\\n'\n            '\\tgit rebase (--continue | --abort | --skip)\\n'\n            'If that is not the case, please\\n'\n            '\\trm -fr \"/foo/bar/baz/egg/.git/rebase-merge\"\\n'\n            'and run me again.  I am stopping in case you still have something\\n'\n            'valuable there.\\n')\n\n\n@pytest.mark.parametrize('script', [\n    'git rebase master',\n    'git rebase -skip',\n    'git rebase'])\ndef test_match(output, script):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script', ['git rebase master', 'git rebase -abort'])\ndef test_not_match(script):\n    assert not match(Command(script, ''))\n\n\n@pytest.mark.parametrize('script, result', [\n    ('git rebase master', [\n        'git rebase --abort', 'git rebase --skip', 'git rebase --continue',\n        'rm -fr \"/foo/bar/baz/egg/.git/rebase-merge\"']),\n    ('git rebase -skip', [\n        'git rebase --skip', 'git rebase --abort', 'git rebase --continue',\n        'rm -fr \"/foo/bar/baz/egg/.git/rebase-merge\"']),\n    ('git rebase', [\n        'git rebase --skip', 'git rebase --abort', 'git rebase --continue',\n        'rm -fr \"/foo/bar/baz/egg/.git/rebase-merge\"'])])\ndef test_get_new_command(output, script, result):\n    assert get_new_command(Command(script, output)) == result\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.git_rebase_merge_dir import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef output():\n    return ('\\n\\nIt seems that there is already a rebase-merge directory, and\\n'\n            'I wonder if you are in the middle of another rebase.  If that is the\\n'\n            'case, please try\\n'\n            '\\tgit rebase (--continue | --abort | --skip)\\n'\n            'If that is not the case, please\\n'\n            '\\trm -fr \"/foo/bar/baz/egg/.git/rebase-merge\"\\n'\n            'and run me again.  I am stopping in case you still have something\\n'\n            'valuable there.\\n')\n\n\n@pytest.mark.parametrize('script', [\n    'git rebase master',\n    'git rebase -skip',\n    'git rebase'])\ndef test_match(output, script):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script', ['git rebase master', 'git rebase -abort'])\ndef test_not_match(script):\n    assert not match(Command(script, ''))\n\n\n@pytest.mark.parametrize('script, result', [\n    ('git rebase master', [\n        'git rebase --abort', 'git rebase --skip', 'git rebase --continue',\n        'rm -fr \"/foo/bar/baz/egg/.git/rebase-merge\"']),\n    ('git rebase -skip', [\n        'git rebase --skip', 'git rebase --abort', 'git rebase --continue',\n        'rm -fr \"/foo/bar/baz/egg/.git/rebase-merge\"']),\n    ('git rebase', [\n        'git rebase --skip', 'git rebase --abort', 'git rebase --continue',\n        'rm -fr \"/foo/bar/baz/egg/.git/rebase-merge\"'])])\ndef test_get_new_command(output, script, result):\n    assert get_new_command(Command(script, output)) == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_rebase_merge_dir.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_rebase_merge_dir.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}