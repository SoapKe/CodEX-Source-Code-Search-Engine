{"author": "getredash", "code": "from tests import BaseTestCase\n\nfrom redash.models import User, db\n\nclass TestUserUpdateGroupAssignments(BaseTestCase):\n    def test_default_group_always_added(self):\n        user = self.factory.create_user()\n\n        user.update_group_assignments([\"g_unknown\"])\n        db.session.refresh(user)\n\n        self.assertItemsEqual([user.org.default_group.id], user.group_ids)\n\n    def test_update_group_assignments(self):\n        user = self.factory.user\n        new_group = self.factory.create_group(name=\"g1\")\n\n        user.update_group_assignments([\"g1\"])\n        db.session.refresh(user)\n\n        self.assertItemsEqual([user.org.default_group.id, new_group.id], user.group_ids)\n\n\nclass TestUserFindByEmail(BaseTestCase):\n    def test_finds_users(self):\n        user = self.factory.create_user(email='test@example.com')\n        user2 = self.factory.create_user(email='test@example.com', org=self.factory.create_org())\n\n        users = User.find_by_email(user.email)\n        self.assertIn(user, users)\n        self.assertIn(user2, users)\n\n    def test_finds_users_case_insensitive(self):\n        user = self.factory.create_user(email='test@example.com')\n\n        users = User.find_by_email('test@EXAMPLE.com')\n        self.assertIn(user, users)\n\n\nclass TestUserGetByEmailAndOrg(BaseTestCase):\n    def test_get_user_by_email_and_org(self):\n        user = self.factory.create_user(email='test@example.com')\n\n        found_user = User.get_by_email_and_org(user.email, user.org)\n        self.assertEqual(user, found_user)\n\n    def test_get_user_by_email_and_org_case_insensitive(self):\n        user = self.factory.create_user(email='test@example.com')\n\n        found_user = User.get_by_email_and_org(\"TEST@example.com\", user.org)\n        self.assertEqual(user, found_user)\n", "comments": "", "content": "from tests import BaseTestCase\n\nfrom redash.models import User, db\n\nclass TestUserUpdateGroupAssignments(BaseTestCase):\n    def test_default_group_always_added(self):\n        user = self.factory.create_user()\n\n        user.update_group_assignments([\"g_unknown\"])\n        db.session.refresh(user)\n\n        self.assertItemsEqual([user.org.default_group.id], user.group_ids)\n\n    def test_update_group_assignments(self):\n        user = self.factory.user\n        new_group = self.factory.create_group(name=\"g1\")\n\n        user.update_group_assignments([\"g1\"])\n        db.session.refresh(user)\n\n        self.assertItemsEqual([user.org.default_group.id, new_group.id], user.group_ids)\n\n\nclass TestUserFindByEmail(BaseTestCase):\n    def test_finds_users(self):\n        user = self.factory.create_user(email='test@example.com')\n        user2 = self.factory.create_user(email='test@example.com', org=self.factory.create_org())\n\n        users = User.find_by_email(user.email)\n        self.assertIn(user, users)\n        self.assertIn(user2, users)\n\n    def test_finds_users_case_insensitive(self):\n        user = self.factory.create_user(email='test@example.com')\n\n        users = User.find_by_email('test@EXAMPLE.com')\n        self.assertIn(user, users)\n\n\nclass TestUserGetByEmailAndOrg(BaseTestCase):\n    def test_get_user_by_email_and_org(self):\n        user = self.factory.create_user(email='test@example.com')\n\n        found_user = User.get_by_email_and_org(user.email, user.org)\n        self.assertEqual(user, found_user)\n\n    def test_get_user_by_email_and_org_case_insensitive(self):\n        user = self.factory.create_user(email='test@example.com')\n\n        found_user = User.get_by_email_and_org(\"TEST@example.com\", user.org)\n        self.assertEqual(user, found_user)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_users.py", "id": "16ea873ec0f32b9c619b9d7ba714eb4f", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/models/test_users.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}