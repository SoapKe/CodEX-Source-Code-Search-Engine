{"author": "django", "code": "import datetime\nfrom decimal import Decimal\n\nfrom django.contrib.humanize.templatetags import humanize\nfrom django.template import Context, Template, defaultfilters\nfrom django.test import SimpleTestCase, modify_settings, override_settings\nfrom django.utils import translation\nfrom django.utils.html import escape\nfrom django.utils.timezone import get_fixed_timezone, utc\nfrom django.utils.translation import gettext as _\n\n\n# run too slow. Use a fixed datetime for datetime.now(). DST change in\n# America/Chicago (the default time zone) happened on March 11th in 2012.\n\nnow = datetime.datetime(2012, 3, 9, 22, 30)\n\n\nclass MockDateTime(datetime.datetime):\n    @classmethod\n    def now(cls, tz=None):\n        if tz is None or tz.utcoffset(now) is None:\n            return now\n        else:\n            # equals now.replace(tzinfo=utc)\n            return now.replace(tzinfo=tz) + tz.utcoffset(now)\n\n\n@modify_settings(INSTALLED_APPS={'append': 'django.contrib.humanize'})\nclass HumanizeTests(SimpleTestCase):\n\n    def humanize_tester(self, test_list, result_list, method, normalize_result_func=escape):\n        for test_content, result in zip(test_list, result_list):\n            t = Template('{%% load humanize %%}{{ test_content|%s }}' % method)\n            rendered = t.render(Context(locals())).strip()\n            self.assertEqual(rendered, normalize_result_func(result),\n                             msg=\"%s test failed, produced '%s', should've produced '%s'\" % (method, rendered, result))\n\n    def test_ordinal(self):\n        test_list = ('1', '2', '3', '4', '11', '12',\n                     '13', '101', '102', '103', '111',\n                     'something else', None)\n        result_list = ('1st', '2nd', '3rd', '4th', '11th',\n                       '12th', '13th', '101st', '102nd', '103rd',\n                       '111th', 'something else', None)\n\n        with translation.override('en'):\n            self.humanize_tester(test_list, result_list, 'ordinal')\n\n    def test_i18n_html_ordinal(self):\n        \"\"\"Allow html in output on i18n strings\"\"\"\n        test_list = ('1', '2', '3', '4', '11', '12',\n                     '13', '101', '102', '103', '111',\n                     'something else', None)\n        result_list = ('1<sup>er</sup>', '2<sup>e</sup>', '3<sup>e</sup>', '4<sup>e</sup>',\n                       '11<sup>e</sup>', '12<sup>e</sup>', '13<sup>e</sup>', '101<sup>er</sup>',\n                       '102<sup>e</sup>', '103<sup>e</sup>', '111<sup>e</sup>', 'something else',\n                       'None')\n\n        with translation.override('fr-fr'):\n            self.humanize_tester(test_list, result_list, 'ordinal', lambda x: x)\n\n    def test_intcomma(self):\n        test_list = (\n            100, 1000, 10123, 10311, 1000000, 1234567.25, '100', '1000',\n            '10123', '10311', '1000000', '1234567.1234567',\n            Decimal('1234567.1234567'), None,\n        )\n        result_list = (\n            '100', '1,000', '10,123', '10,311', '1,000,000', '1,234,567.25',\n            '100', '1,000', '10,123', '10,311', '1,000,000', '1,234,567.1234567',\n            '1,234,567.1234567', None,\n        )\n        with translation.override('en'):\n            self.humanize_tester(test_list, result_list, 'intcomma')\n\n    def test_l10n_intcomma(self):\n        test_list = (\n            100, 1000, 10123, 10311, 1000000, 1234567.25, '100', '1000',\n            '10123', '10311', '1000000', '1234567.1234567',\n            Decimal('1234567.1234567'), None,\n        )\n        result_list = (\n            '100', '1,000', '10,123', '10,311', '1,000,000', '1,234,567.25',\n            '100', '1,000', '10,123', '10,311', '1,000,000', '1,234,567.1234567',\n            '1,234,567.1234567', None,\n        )\n        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=False):\n            with translation.override('en'):\n                self.humanize_tester(test_list, result_list, 'intcomma')\n\n    def test_intcomma_without_number_grouping(self):\n        \n        with translation.override('ja'), self.settings(USE_L10N=True):\n            self.humanize_tester([100], ['100'], 'intcomma')\n\n    def test_intword(self):\n        test_list = (\n            '100', '1000000', '1200000', '1290000', '1000000000', '2000000000',\n            '6000000000000', '1300000000000000', '3500000000000000000000',\n            '8100000000000000000000000000000000', None,\n        )\n        result_list = (\n            '100', '1.0 million', '1.2 million', '1.3 million', '1.0 billion',\n            '2.0 billion', '6.0 trillion', '1.3 quadrillion', '3.5 sextillion',\n            '8.1 decillion', None,\n        )\n        with translation.override('en'):\n            self.humanize_tester(test_list, result_list, 'intword')\n\n    def test_i18n_intcomma(self):\n        test_list = (100, 1000, 10123, 10311, 1000000, 1234567.25,\n                     '100', '1000', '10123', '10311', '1000000', None)\n        result_list = ('100', '1.000', '10.123', '10.311', '1.000.000', '1.234.567,25',\n                       '100', '1.000', '10.123', '10.311', '1.000.000', None)\n        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n            with translation.override('de'):\n                self.humanize_tester(test_list, result_list, 'intcomma')\n\n    def test_i18n_intword(self):\n        test_list = (\n            '100', '1000000', '1200000', '1290000', '1000000000', '2000000000',\n            '6000000000000',\n        )\n        result_list = (\n            '100', '1,0 Million', '1,2 Millionen', '1,3 Millionen',\n            '1,0 Milliarde', '2,0 Milliarden', '6,0 Billionen',\n        )\n        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n            with translation.override('de'):\n                self.humanize_tester(test_list, result_list, 'intword')\n\n    def test_apnumber(self):\n        test_list = [str(x) for x in range(1, 11)]\n        test_list.append(None)\n        result_list = ('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', '10', None)\n        with translation.override('en'):\n            self.humanize_tester(test_list, result_list, 'apnumber')\n\n    def test_naturalday(self):\n        today = datetime.date.today()\n        yesterday = today - datetime.timedelta(days=1)\n        tomorrow = today + datetime.timedelta(days=1)\n        someday = today - datetime.timedelta(days=10)\n        notdate = \"I'm not a date value\"\n\n        test_list = (today, yesterday, tomorrow, someday, notdate, None)\n        someday_result = defaultfilters.date(someday)\n        result_list = (_('today'), _('yesterday'), _('tomorrow'),\n                       someday_result, \"I'm not a date value\", None)\n        self.humanize_tester(test_list, result_list, 'naturalday')\n\n    def test_naturalday_tz(self):\n        today = datetime.date.today()\n        tz_one = get_fixed_timezone(-720)\n        tz_two = get_fixed_timezone(720)\n\n        \n        date_one = datetime.datetime(today.year, today.month, today.day, tzinfo=tz_one)\n        naturalday_one = humanize.naturalday(date_one)\n        \n        date_two = datetime.datetime(today.year, today.month, today.day, tzinfo=tz_two)\n        naturalday_two = humanize.naturalday(date_two)\n\n        \n        self.assertNotEqual(naturalday_one, naturalday_two)\n\n    def test_naturalday_uses_localtime(self):\n        \n        \n        dt = datetime.datetime(2012, 3, 9, 1, 30, tzinfo=utc)\n\n        orig_humanize_datetime, humanize.datetime = humanize.datetime, MockDateTime\n        try:\n            with override_settings(TIME_ZONE=\"America/Chicago\", USE_TZ=True):\n                with translation.override('en'):\n                    self.humanize_tester([dt], ['yesterday'], 'naturalday')\n        finally:\n            humanize.datetime = orig_humanize_datetime\n\n    def test_naturaltime(self):\n        class naive(datetime.tzinfo):\n            def utcoffset(self, dt):\n                return None\n        test_list = [\n            now,\n            now - datetime.timedelta(seconds=1),\n            now - datetime.timedelta(seconds=30),\n            now - datetime.timedelta(minutes=1, seconds=30),\n            now - datetime.timedelta(minutes=2),\n            now - datetime.timedelta(hours=1, minutes=30, seconds=30),\n            now - datetime.timedelta(hours=23, minutes=50, seconds=50),\n            now - datetime.timedelta(days=1),\n            now - datetime.timedelta(days=500),\n            now + datetime.timedelta(seconds=1),\n            now + datetime.timedelta(seconds=30),\n            now + datetime.timedelta(minutes=1, seconds=30),\n            now + datetime.timedelta(minutes=2),\n            now + datetime.timedelta(hours=1, minutes=30, seconds=30),\n            now + datetime.timedelta(hours=23, minutes=50, seconds=50),\n            now + datetime.timedelta(days=1),\n            now + datetime.timedelta(days=2, hours=6),\n            now + datetime.timedelta(days=500),\n            now.replace(tzinfo=naive()),\n            now.replace(tzinfo=utc),\n        ]\n        result_list = [\n            'now',\n            'a second ago',\n            '30\\xa0seconds ago',\n            'a minute ago',\n            '2\\xa0minutes ago',\n            'an hour ago',\n            '23\\xa0hours ago',\n            '1\\xa0day ago',\n            '1\\xa0year, 4\\xa0months ago',\n            'a second from now',\n            '30\\xa0seconds from now',\n            'a minute from now',\n            '2\\xa0minutes from now',\n            'an hour from now',\n            '23\\xa0hours from now',\n            '1\\xa0day from now',\n            '2\\xa0days, 6\\xa0hours from now',\n            '1\\xa0year, 4\\xa0months from now',\n            'now',\n            'now',\n        ]\n        \n        \n        \n        result_list_with_tz_support = result_list[:]\n        assert result_list_with_tz_support[-4] == '2\\xa0days, 6\\xa0hours from now'\n        result_list_with_tz_support[-4] == '2\\xa0days, 5\\xa0hours from now'\n\n        orig_humanize_datetime, humanize.datetime = humanize.datetime, MockDateTime\n        try:\n            with translation.override('en'):\n                self.humanize_tester(test_list, result_list, 'naturaltime')\n                with override_settings(USE_TZ=True):\n                    self.humanize_tester(\n                        test_list, result_list_with_tz_support, 'naturaltime')\n        finally:\n            humanize.datetime = orig_humanize_datetime\n\n    def test_naturaltime_as_documented(self):\n        \"\"\"\n        \n        \"\"\"\n        time_format = '%d %b %Y %H:%M:%S'\n        documented_now = datetime.datetime.strptime('17 Feb 2007 16:30:00', time_format)\n\n        test_data = (\n            ('17 Feb 2007 16:30:00', 'now'),\n            ('17 Feb 2007 16:29:31', '29 seconds ago'),\n            ('17 Feb 2007 16:29:00', 'a minute ago'),\n            ('17 Feb 2007 16:25:35', '4 minutes ago'),\n            ('17 Feb 2007 15:30:29', '59 minutes ago'),\n            ('17 Feb 2007 15:30:01', '59 minutes ago'),\n            ('17 Feb 2007 15:30:00', 'an hour ago'),\n            ('17 Feb 2007 13:31:29', '2 hours ago'),\n            ('16 Feb 2007 13:31:29', '1 day, 2 hours ago'),\n            ('16 Feb 2007 13:30:01', '1 day, 2 hours ago'),\n            ('16 Feb 2007 13:30:00', '1 day, 3 hours ago'),\n            ('17 Feb 2007 16:30:30', '30 seconds from now'),\n            ('17 Feb 2007 16:30:29', '29 seconds from now'),\n            ('17 Feb 2007 16:31:00', 'a minute from now'),\n            ('17 Feb 2007 16:34:35', '4 minutes from now'),\n            ('17 Feb 2007 17:30:29', 'an hour from now'),\n            ('17 Feb 2007 18:31:29', '2 hours from now'),\n            ('18 Feb 2007 16:31:29', '1 day from now'),\n            ('26 Feb 2007 18:31:29', '1 week, 2 days from now'),\n        )\n\n        class DocumentedMockDateTime(datetime.datetime):\n            @classmethod\n            def now(cls, tz=None):\n                if tz is None or tz.utcoffset(documented_now) is None:\n                    return documented_now\n                else:\n                    return documented_now.replace(tzinfo=tz) + tz.utcoffset(now)\n\n        orig_humanize_datetime = humanize.datetime\n        humanize.datetime = DocumentedMockDateTime\n        try:\n            for test_time_string, expected_natural_time in test_data:\n                test_time = datetime.datetime.strptime(test_time_string, time_format)\n                natural_time = humanize.naturaltime(test_time).replace('\\xa0', ' ')\n                self.assertEqual(expected_natural_time, natural_time)\n        finally:\n            humanize.datetime = orig_humanize_datetime\n", "comments": "   allow html output i18n strings            test list   ( 1    2    3    4    11    12                         13    101    102    103    111                         something else   none)         result list   ( 1 sup er  sup     2 sup e  sup     3 sup e  sup     4 sup e  sup                            11 sup e  sup     12 sup e  sup     13 sup e  sup     101 sup er  sup                            102 sup e  sup     103 sup e  sup     111 sup e  sup     something else                           none )          translation override( fr fr )              self humanize tester(test list  result list   ordinal   lambda x  x)      def test intcomma(self)          test list   (             100  1000  10123  10311  1000000  1234567 25   100    1000                10123    10311    1000000    1234567 1234567               decimal( 1234567 1234567 )  none          )         result list   (              100    1 000    10 123    10 311    1 000 000    1 234 567 25                100    1 000    10 123    10 311    1 000 000    1 234 567 1234567                1 234 567 1234567   none          )         translation override( en )              self humanize tester(test list  result list   intcomma )      def test l10n intcomma(self)          test list   (             100  1000  10123  10311  1000000  1234567 25   100    1000                10123    10311    1000000    1234567 1234567               decimal( 1234567 1234567 )  none          )         result list   (              100    1 000    10 123    10 311    1 000 000    1 234 567 25                100    1 000    10 123    10 311    1 000 000    1 234 567 1234567                1 234 567 1234567   none          )         self settings(use l10n true  use thousand separator false)              translation override( en )                  self humanize tester(test list  result list   intcomma )      def test intcomma without number grouping(self)            regression  17414         translation override( ja )  self settings(use l10n true)              self humanize tester( 100     100     intcomma )      def test intword(self)          test list   (              100    1000000    1200000    1290000    1000000000    2000000000                6000000000000    1300000000000000    3500000000000000000000                8100000000000000000000000000000000   none          )         result list   (              100    1 0 million    1 2 million    1 3 million    1 0 billion                2 0 billion    6 0 trillion    1 3 quadrillion    3 5 sextillion                8 1 decillion   none          )         translation override( en )              self humanize tester(test list  result list   intword )      def test i18n intcomma(self)          test list   (100  1000  10123  10311  1000000  1234567 25                        100    1000    10123    10311    1000000   none)         result list   ( 100    1 000    10 123    10 311    1 000 000    1 234 567 25                           100    1 000    10 123    10 311    1 000 000   none)         self settings(use l10n true  use thousand separator true)              translation override( de )                  self humanize tester(test list  result list   intcomma )      def test i18n intword(self)          test list   (              100    1000000    1200000    1290000    1000000000    2000000000                6000000000000           )         result list   (              100    1 0 million    1 2 millionen    1 3 millionen                1 0 milliarde    2 0 milliarden    6 0 billionen           )         self settings(use l10n true  use thousand separator true)              translation override( de )                  self humanize tester(test list  result list   intword )      def test apnumber(self)          test list    str(x) x range(1  11)          test list append(none)         result list   ( one    two    three    four    five    six    seven    eight    nine    10   none)         translation override( en )              self humanize tester(test list  result list   apnumber )      def test naturalday(self)          today   datetime date today()         yesterday   today   datetime timedelta(days 1)         tomorrow   today   datetime timedelta(days 1)         someday   today   datetime timedelta(days 10)         notdate    i date value           test list   (today  yesterday  tomorrow  someday  notdate  none)         someday result   defaultfilters date(someday)         result list   ( ( today )   ( yesterday )   ( tomorrow )                         someday result   i date value   none)         self humanize tester(test list  result list   naturalday )      def test naturalday tz(self)          today   datetime date today()         tz one   get fixed timezone( 720)         tz two   get fixed timezone(720)            can today yesterday         date one   datetime datetime(today year  today month  today day  tzinfo tz one)         naturalday one   humanize naturalday(date one)           can today tomorrow         date two   datetime datetime(today year  today month  today day  tzinfo tz two)         naturalday two   humanize naturalday(date two)            as 24h difference never         self assertnotequal(naturalday one  naturalday two)      def test naturalday uses localtime(self)            regression  18504           this 2012 03 08ht19 30 00 06 00 america chicago         dt   datetime datetime(2012  3  9  1  30  tzinfo utc)          orig humanize datetime  humanize datetime   humanize datetime  mockdatetime         try              override settings(time zone  america chicago   use tz true)                  translation override( en )                      self humanize tester( dt     yesterday     naturalday )         finally              humanize datetime   orig humanize datetime      def test naturaltime(self)          class naive(datetime tzinfo)              def utcoffset(self  dt)                  return none         test list                                datetime timedelta(seconds 1)                datetime timedelta(seconds 30)                datetime timedelta(minutes 1  seconds 30)                datetime timedelta(minutes 2)                datetime timedelta(hours 1  minutes 30  seconds 30)                datetime timedelta(hours 23  minutes 50  seconds 50)                datetime timedelta(days 1)                datetime timedelta(days 500)                datetime timedelta(seconds 1)                datetime timedelta(seconds 30)                datetime timedelta(minutes 1  seconds 30)                datetime timedelta(minutes 2)                datetime timedelta(hours 1  minutes 30  seconds 30)                datetime timedelta(hours 23  minutes 50  seconds 50)                datetime timedelta(days 1)                datetime timedelta(days 2  hours 6)                datetime timedelta(days 500)              replace(tzinfo naive())              replace(tzinfo utc)                    result list                                 second ago                30 xa0seconds ago                minute ago                2 xa0minutes ago                hour ago                23 xa0hours ago                1 xa0day ago                1 xa0year  4 xa0months ago                second                30 xa0seconds                minute                2 xa0minutes                hour                23 xa0hours                1 xa0day                2 xa0days  6 xa0hours                1 xa0year  4 xa0months                                                     because dst change  2 days 6 hours chosen           date naive arithmetic 2 days 5 hours           aware arithmetic          result list tz support   result list            assert result list tz support  4      2 xa0days  6 xa0hours          result list tz support  4      2 xa0days  5 xa0hours           orig humanize datetime  humanize datetime   humanize datetime  mockdatetime         try              translation override( en )                  self humanize tester(test list  result list   naturaltime )                 override settings(use tz true)                      self humanize tester(                         test list  result list tz support   naturaltime )         finally              humanize datetime   orig humanize datetime      def test naturaltime documented(self)                       23340    verify documented behavior humanize naturaltime                 mock datetime tests fail occasionally    run slow  use fixed datetime datetime now()  dst change    america chicago (the default time zone) happened march 11th 2012     equals replace(tzinfo utc)    regression  17414    can today yesterday    can today tomorrow    as 24h difference never    regression  18504    this 2012 03 08ht19 30 00 06 00 america chicago    because dst change  2 days 6 hours chosen    date naive arithmetic 2 days 5 hours    aware arithmetic    23340    verify documented behavior humanize naturaltime  ", "content": "import datetime\nfrom decimal import Decimal\n\nfrom django.contrib.humanize.templatetags import humanize\nfrom django.template import Context, Template, defaultfilters\nfrom django.test import SimpleTestCase, modify_settings, override_settings\nfrom django.utils import translation\nfrom django.utils.html import escape\nfrom django.utils.timezone import get_fixed_timezone, utc\nfrom django.utils.translation import gettext as _\n\n# Mock out datetime in some tests so they don't fail occasionally when they\n# run too slow. Use a fixed datetime for datetime.now(). DST change in\n# America/Chicago (the default time zone) happened on March 11th in 2012.\n\nnow = datetime.datetime(2012, 3, 9, 22, 30)\n\n\nclass MockDateTime(datetime.datetime):\n    @classmethod\n    def now(cls, tz=None):\n        if tz is None or tz.utcoffset(now) is None:\n            return now\n        else:\n            # equals now.replace(tzinfo=utc)\n            return now.replace(tzinfo=tz) + tz.utcoffset(now)\n\n\n@modify_settings(INSTALLED_APPS={'append': 'django.contrib.humanize'})\nclass HumanizeTests(SimpleTestCase):\n\n    def humanize_tester(self, test_list, result_list, method, normalize_result_func=escape):\n        for test_content, result in zip(test_list, result_list):\n            t = Template('{%% load humanize %%}{{ test_content|%s }}' % method)\n            rendered = t.render(Context(locals())).strip()\n            self.assertEqual(rendered, normalize_result_func(result),\n                             msg=\"%s test failed, produced '%s', should've produced '%s'\" % (method, rendered, result))\n\n    def test_ordinal(self):\n        test_list = ('1', '2', '3', '4', '11', '12',\n                     '13', '101', '102', '103', '111',\n                     'something else', None)\n        result_list = ('1st', '2nd', '3rd', '4th', '11th',\n                       '12th', '13th', '101st', '102nd', '103rd',\n                       '111th', 'something else', None)\n\n        with translation.override('en'):\n            self.humanize_tester(test_list, result_list, 'ordinal')\n\n    def test_i18n_html_ordinal(self):\n        \"\"\"Allow html in output on i18n strings\"\"\"\n        test_list = ('1', '2', '3', '4', '11', '12',\n                     '13', '101', '102', '103', '111',\n                     'something else', None)\n        result_list = ('1<sup>er</sup>', '2<sup>e</sup>', '3<sup>e</sup>', '4<sup>e</sup>',\n                       '11<sup>e</sup>', '12<sup>e</sup>', '13<sup>e</sup>', '101<sup>er</sup>',\n                       '102<sup>e</sup>', '103<sup>e</sup>', '111<sup>e</sup>', 'something else',\n                       'None')\n\n        with translation.override('fr-fr'):\n            self.humanize_tester(test_list, result_list, 'ordinal', lambda x: x)\n\n    def test_intcomma(self):\n        test_list = (\n            100, 1000, 10123, 10311, 1000000, 1234567.25, '100', '1000',\n            '10123', '10311', '1000000', '1234567.1234567',\n            Decimal('1234567.1234567'), None,\n        )\n        result_list = (\n            '100', '1,000', '10,123', '10,311', '1,000,000', '1,234,567.25',\n            '100', '1,000', '10,123', '10,311', '1,000,000', '1,234,567.1234567',\n            '1,234,567.1234567', None,\n        )\n        with translation.override('en'):\n            self.humanize_tester(test_list, result_list, 'intcomma')\n\n    def test_l10n_intcomma(self):\n        test_list = (\n            100, 1000, 10123, 10311, 1000000, 1234567.25, '100', '1000',\n            '10123', '10311', '1000000', '1234567.1234567',\n            Decimal('1234567.1234567'), None,\n        )\n        result_list = (\n            '100', '1,000', '10,123', '10,311', '1,000,000', '1,234,567.25',\n            '100', '1,000', '10,123', '10,311', '1,000,000', '1,234,567.1234567',\n            '1,234,567.1234567', None,\n        )\n        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=False):\n            with translation.override('en'):\n                self.humanize_tester(test_list, result_list, 'intcomma')\n\n    def test_intcomma_without_number_grouping(self):\n        # Regression for #17414\n        with translation.override('ja'), self.settings(USE_L10N=True):\n            self.humanize_tester([100], ['100'], 'intcomma')\n\n    def test_intword(self):\n        test_list = (\n            '100', '1000000', '1200000', '1290000', '1000000000', '2000000000',\n            '6000000000000', '1300000000000000', '3500000000000000000000',\n            '8100000000000000000000000000000000', None,\n        )\n        result_list = (\n            '100', '1.0 million', '1.2 million', '1.3 million', '1.0 billion',\n            '2.0 billion', '6.0 trillion', '1.3 quadrillion', '3.5 sextillion',\n            '8.1 decillion', None,\n        )\n        with translation.override('en'):\n            self.humanize_tester(test_list, result_list, 'intword')\n\n    def test_i18n_intcomma(self):\n        test_list = (100, 1000, 10123, 10311, 1000000, 1234567.25,\n                     '100', '1000', '10123', '10311', '1000000', None)\n        result_list = ('100', '1.000', '10.123', '10.311', '1.000.000', '1.234.567,25',\n                       '100', '1.000', '10.123', '10.311', '1.000.000', None)\n        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n            with translation.override('de'):\n                self.humanize_tester(test_list, result_list, 'intcomma')\n\n    def test_i18n_intword(self):\n        test_list = (\n            '100', '1000000', '1200000', '1290000', '1000000000', '2000000000',\n            '6000000000000',\n        )\n        result_list = (\n            '100', '1,0 Million', '1,2 Millionen', '1,3 Millionen',\n            '1,0 Milliarde', '2,0 Milliarden', '6,0 Billionen',\n        )\n        with self.settings(USE_L10N=True, USE_THOUSAND_SEPARATOR=True):\n            with translation.override('de'):\n                self.humanize_tester(test_list, result_list, 'intword')\n\n    def test_apnumber(self):\n        test_list = [str(x) for x in range(1, 11)]\n        test_list.append(None)\n        result_list = ('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', '10', None)\n        with translation.override('en'):\n            self.humanize_tester(test_list, result_list, 'apnumber')\n\n    def test_naturalday(self):\n        today = datetime.date.today()\n        yesterday = today - datetime.timedelta(days=1)\n        tomorrow = today + datetime.timedelta(days=1)\n        someday = today - datetime.timedelta(days=10)\n        notdate = \"I'm not a date value\"\n\n        test_list = (today, yesterday, tomorrow, someday, notdate, None)\n        someday_result = defaultfilters.date(someday)\n        result_list = (_('today'), _('yesterday'), _('tomorrow'),\n                       someday_result, \"I'm not a date value\", None)\n        self.humanize_tester(test_list, result_list, 'naturalday')\n\n    def test_naturalday_tz(self):\n        today = datetime.date.today()\n        tz_one = get_fixed_timezone(-720)\n        tz_two = get_fixed_timezone(720)\n\n        # Can be today or yesterday\n        date_one = datetime.datetime(today.year, today.month, today.day, tzinfo=tz_one)\n        naturalday_one = humanize.naturalday(date_one)\n        # Can be today or tomorrow\n        date_two = datetime.datetime(today.year, today.month, today.day, tzinfo=tz_two)\n        naturalday_two = humanize.naturalday(date_two)\n\n        # As 24h of difference they will never be the same\n        self.assertNotEqual(naturalday_one, naturalday_two)\n\n    def test_naturalday_uses_localtime(self):\n        # Regression for #18504\n        # This is 2012-03-08HT19:30:00-06:00 in America/Chicago\n        dt = datetime.datetime(2012, 3, 9, 1, 30, tzinfo=utc)\n\n        orig_humanize_datetime, humanize.datetime = humanize.datetime, MockDateTime\n        try:\n            with override_settings(TIME_ZONE=\"America/Chicago\", USE_TZ=True):\n                with translation.override('en'):\n                    self.humanize_tester([dt], ['yesterday'], 'naturalday')\n        finally:\n            humanize.datetime = orig_humanize_datetime\n\n    def test_naturaltime(self):\n        class naive(datetime.tzinfo):\n            def utcoffset(self, dt):\n                return None\n        test_list = [\n            now,\n            now - datetime.timedelta(seconds=1),\n            now - datetime.timedelta(seconds=30),\n            now - datetime.timedelta(minutes=1, seconds=30),\n            now - datetime.timedelta(minutes=2),\n            now - datetime.timedelta(hours=1, minutes=30, seconds=30),\n            now - datetime.timedelta(hours=23, minutes=50, seconds=50),\n            now - datetime.timedelta(days=1),\n            now - datetime.timedelta(days=500),\n            now + datetime.timedelta(seconds=1),\n            now + datetime.timedelta(seconds=30),\n            now + datetime.timedelta(minutes=1, seconds=30),\n            now + datetime.timedelta(minutes=2),\n            now + datetime.timedelta(hours=1, minutes=30, seconds=30),\n            now + datetime.timedelta(hours=23, minutes=50, seconds=50),\n            now + datetime.timedelta(days=1),\n            now + datetime.timedelta(days=2, hours=6),\n            now + datetime.timedelta(days=500),\n            now.replace(tzinfo=naive()),\n            now.replace(tzinfo=utc),\n        ]\n        result_list = [\n            'now',\n            'a second ago',\n            '30\\xa0seconds ago',\n            'a minute ago',\n            '2\\xa0minutes ago',\n            'an hour ago',\n            '23\\xa0hours ago',\n            '1\\xa0day ago',\n            '1\\xa0year, 4\\xa0months ago',\n            'a second from now',\n            '30\\xa0seconds from now',\n            'a minute from now',\n            '2\\xa0minutes from now',\n            'an hour from now',\n            '23\\xa0hours from now',\n            '1\\xa0day from now',\n            '2\\xa0days, 6\\xa0hours from now',\n            '1\\xa0year, 4\\xa0months from now',\n            'now',\n            'now',\n        ]\n        # Because of the DST change, 2 days and 6 hours after the chosen\n        # date in naive arithmetic is only 2 days and 5 hours after in\n        # aware arithmetic.\n        result_list_with_tz_support = result_list[:]\n        assert result_list_with_tz_support[-4] == '2\\xa0days, 6\\xa0hours from now'\n        result_list_with_tz_support[-4] == '2\\xa0days, 5\\xa0hours from now'\n\n        orig_humanize_datetime, humanize.datetime = humanize.datetime, MockDateTime\n        try:\n            with translation.override('en'):\n                self.humanize_tester(test_list, result_list, 'naturaltime')\n                with override_settings(USE_TZ=True):\n                    self.humanize_tester(\n                        test_list, result_list_with_tz_support, 'naturaltime')\n        finally:\n            humanize.datetime = orig_humanize_datetime\n\n    def test_naturaltime_as_documented(self):\n        \"\"\"\n        #23340 -- Verify the documented behavior of humanize.naturaltime.\n        \"\"\"\n        time_format = '%d %b %Y %H:%M:%S'\n        documented_now = datetime.datetime.strptime('17 Feb 2007 16:30:00', time_format)\n\n        test_data = (\n            ('17 Feb 2007 16:30:00', 'now'),\n            ('17 Feb 2007 16:29:31', '29 seconds ago'),\n            ('17 Feb 2007 16:29:00', 'a minute ago'),\n            ('17 Feb 2007 16:25:35', '4 minutes ago'),\n            ('17 Feb 2007 15:30:29', '59 minutes ago'),\n            ('17 Feb 2007 15:30:01', '59 minutes ago'),\n            ('17 Feb 2007 15:30:00', 'an hour ago'),\n            ('17 Feb 2007 13:31:29', '2 hours ago'),\n            ('16 Feb 2007 13:31:29', '1 day, 2 hours ago'),\n            ('16 Feb 2007 13:30:01', '1 day, 2 hours ago'),\n            ('16 Feb 2007 13:30:00', '1 day, 3 hours ago'),\n            ('17 Feb 2007 16:30:30', '30 seconds from now'),\n            ('17 Feb 2007 16:30:29', '29 seconds from now'),\n            ('17 Feb 2007 16:31:00', 'a minute from now'),\n            ('17 Feb 2007 16:34:35', '4 minutes from now'),\n            ('17 Feb 2007 17:30:29', 'an hour from now'),\n            ('17 Feb 2007 18:31:29', '2 hours from now'),\n            ('18 Feb 2007 16:31:29', '1 day from now'),\n            ('26 Feb 2007 18:31:29', '1 week, 2 days from now'),\n        )\n\n        class DocumentedMockDateTime(datetime.datetime):\n            @classmethod\n            def now(cls, tz=None):\n                if tz is None or tz.utcoffset(documented_now) is None:\n                    return documented_now\n                else:\n                    return documented_now.replace(tzinfo=tz) + tz.utcoffset(now)\n\n        orig_humanize_datetime = humanize.datetime\n        humanize.datetime = DocumentedMockDateTime\n        try:\n            for test_time_string, expected_natural_time in test_data:\n                test_time = datetime.datetime.strptime(test_time_string, time_format)\n                natural_time = humanize.naturaltime(test_time).replace('\\xa0', ' ')\n                self.assertEqual(expected_natural_time, natural_time)\n        finally:\n            humanize.datetime = orig_humanize_datetime\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "412ce6d3705f6c14a4d009dca8e0dca9", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/humanize_tests/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}