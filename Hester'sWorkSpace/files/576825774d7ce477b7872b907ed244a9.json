{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass MakersChannelIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?makerschannel\\.com/.*(?P<id_type>video|production)_id=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://makerschannel.com/en/zoomin/community-highlights?video_id=849',\n        'md5': '624a512c6969236b5967bf9286345ad1',\n        'info_dict': {\n            'id': '849',\n            'ext': 'mp4',\n            'title': 'Landing a bus on a plane is an epic win',\n            'uploader': 'ZoomIn',\n            'description': 'md5:cd9cca2ea7b69b78be81d07020c97139',\n        }\n    }\n\n    def _real_extract(self, url):\n        id_type, url_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, url_id)\n        video_data = self._html_search_regex(r'<div([^>]+data-%s-id=\"%s\"[^>]+)>' % (id_type, url_id), webpage, 'video data')\n\n        def extract_data_val(attr, fatal=False):\n            return self._html_search_regex(r'data-%s\\s*=\\s*\"([^\"]+)\"' % attr, video_data, attr, fatal=fatal)\n        minoto_id = self._search_regex(r'/id/([a-zA-Z0-9]+)', extract_data_val('video-src', True), 'minoto id')\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'minoto:%s' % minoto_id,\n            'id': extract_data_val('video-id', True),\n            'title': extract_data_val('title', True),\n            'description': extract_data_val('description'),\n            'thumbnail': extract_data_val('image'),\n            'uploader': extract_data_val('channel'),\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass MakersChannelIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?makerschannel\\.com/.*(?P<id_type>video|production)_id=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://makerschannel.com/en/zoomin/community-highlights?video_id=849',\n        'md5': '624a512c6969236b5967bf9286345ad1',\n        'info_dict': {\n            'id': '849',\n            'ext': 'mp4',\n            'title': 'Landing a bus on a plane is an epic win',\n            'uploader': 'ZoomIn',\n            'description': 'md5:cd9cca2ea7b69b78be81d07020c97139',\n        }\n    }\n\n    def _real_extract(self, url):\n        id_type, url_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, url_id)\n        video_data = self._html_search_regex(r'<div([^>]+data-%s-id=\"%s\"[^>]+)>' % (id_type, url_id), webpage, 'video data')\n\n        def extract_data_val(attr, fatal=False):\n            return self._html_search_regex(r'data-%s\\s*=\\s*\"([^\"]+)\"' % attr, video_data, attr, fatal=fatal)\n        minoto_id = self._search_regex(r'/id/([a-zA-Z0-9]+)', extract_data_val('video-src', True), 'minoto id')\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'minoto:%s' % minoto_id,\n            'id': extract_data_val('video-id', True),\n            'title': extract_data_val('title', True),\n            'description': extract_data_val('description'),\n            'thumbnail': extract_data_val('image'),\n            'uploader': extract_data_val('channel'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "makerschannel.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/makerschannel.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}