{"author": "HelloZeroNet", "code": "import os\nimport json\nimport logging\nimport inspect\nimport re\n\nfrom Config import config\n\ntranslates = []\n\nclass Translate(dict):\n    def __init__(self, lang_dir=None, lang=None):\n        if not lang_dir:\n            lang_dir = \"src/Translate/languages/\"\n        if not lang:\n            lang = config.language\n        self.lang = lang\n        self.lang_dir = lang_dir\n        self.setLanguage(lang)\n\n        if config.debug:\n            \n            from Debug import DebugReloader\n            DebugReloader(self.load)\n\n        translates.append(self)\n\n    def setLanguage(self, lang):\n        self.lang = lang\n        self.lang_file = self.lang_dir + \"%s.json\" % lang\n        self.load()\n\n    def __repr__(self):\n        return \"<translate %s>\" % self.lang\n\n    def load(self):\n        if os.path.isfile(self.lang_file):\n            data = json.load(open(self.lang_file))\n            logging.debug(\"Loaded translate file: %s (%s entries)\" % (self.lang_file, len(data)))\n            dict.__init__(self, data)\n        else:\n            data = {}\n            dict.__init__(self, data)\n            self.clear()\n            logging.debug(\"Translate file not exists: %s\" % self.lang_file)\n\n    def format(self, s, kwargs, nested=False):\n        kwargs[\"_\"] = self\n        if nested:\n            return s.format(**kwargs).format(**kwargs)\n        else:\n            return s.format(**kwargs)\n\n    def formatLocals(self, s, nested=False):\n        kwargs = inspect.currentframe().f_back.f_locals\n        return self.format(s, kwargs, nested=nested)\n\n    def __call__(self, s, kwargs=None, nested=False):\n        if kwargs:\n            return self.format(s, kwargs, nested=nested)\n        else:\n            kwargs = inspect.currentframe().f_back.f_locals\n            return self.format(s, kwargs, nested=nested)\n\n    def __missing__(self, key):\n        return key\n\n    def pluralize(self, value, single, multi):\n        if value > 1:\n            return self[single].format(value)\n        else:\n            return self[multi].format(value)\n\n    def translateData(self, data, translate_table=None, mode=\"js\"):\n        if not translate_table:\n            translate_table = self\n\n        data = data.decode(\"utf8\")\n\n        patterns = []\n        for key, val in translate_table.items():\n            if key.startswith(\"_(\"):  # Problematic string: only match if called between _(\" \") function\n                key = key.replace(\"_(\", \"\").replace(\")\", \"\").replace(\", \", '\", \"')\n                translate_table[key] = \"|\" + val\n            patterns.append(re.escape(key))\n\n        def replacer(match):\n            target = translate_table[match.group(1)]\n            if mode == \"js\":\n                if target and target[0] == \"|\":  \n                    if match.string[match.start() - 2] == \"_\":  # Only if the match if called between _(\" \") function\n                        return '\"' + target[1:] + '\"'\n                    else:\n                        return '\"' + match.group(1) + '\"'\n                return '\"' + target + '\"'\n            else:\n                return match.group(0)[0] + target + match.group(0)[-1]\n\n        if mode == \"html\":\n            pattern = '[\">](' + \"|\".join(patterns) + ')[\"<]'\n        else:\n            pattern = '\"(' + \"|\".join(patterns) + ')\"'\n        data = re.sub(pattern, replacer, data)\n        return data.encode(\"utf8\")\n\ntranslate = Translate()\n", "comments": "  auto reload filerequest change    problematic string  match called  (   ) function    strict string match    only match called  (   ) function ", "content": "import os\nimport json\nimport logging\nimport inspect\nimport re\n\nfrom Config import config\n\ntranslates = []\n\nclass Translate(dict):\n    def __init__(self, lang_dir=None, lang=None):\n        if not lang_dir:\n            lang_dir = \"src/Translate/languages/\"\n        if not lang:\n            lang = config.language\n        self.lang = lang\n        self.lang_dir = lang_dir\n        self.setLanguage(lang)\n\n        if config.debug:\n            # Auto reload FileRequest on change\n            from Debug import DebugReloader\n            DebugReloader(self.load)\n\n        translates.append(self)\n\n    def setLanguage(self, lang):\n        self.lang = lang\n        self.lang_file = self.lang_dir + \"%s.json\" % lang\n        self.load()\n\n    def __repr__(self):\n        return \"<translate %s>\" % self.lang\n\n    def load(self):\n        if os.path.isfile(self.lang_file):\n            data = json.load(open(self.lang_file))\n            logging.debug(\"Loaded translate file: %s (%s entries)\" % (self.lang_file, len(data)))\n            dict.__init__(self, data)\n        else:\n            data = {}\n            dict.__init__(self, data)\n            self.clear()\n            logging.debug(\"Translate file not exists: %s\" % self.lang_file)\n\n    def format(self, s, kwargs, nested=False):\n        kwargs[\"_\"] = self\n        if nested:\n            return s.format(**kwargs).format(**kwargs)\n        else:\n            return s.format(**kwargs)\n\n    def formatLocals(self, s, nested=False):\n        kwargs = inspect.currentframe().f_back.f_locals\n        return self.format(s, kwargs, nested=nested)\n\n    def __call__(self, s, kwargs=None, nested=False):\n        if kwargs:\n            return self.format(s, kwargs, nested=nested)\n        else:\n            kwargs = inspect.currentframe().f_back.f_locals\n            return self.format(s, kwargs, nested=nested)\n\n    def __missing__(self, key):\n        return key\n\n    def pluralize(self, value, single, multi):\n        if value > 1:\n            return self[single].format(value)\n        else:\n            return self[multi].format(value)\n\n    def translateData(self, data, translate_table=None, mode=\"js\"):\n        if not translate_table:\n            translate_table = self\n\n        data = data.decode(\"utf8\")\n\n        patterns = []\n        for key, val in translate_table.items():\n            if key.startswith(\"_(\"):  # Problematic string: only match if called between _(\" \") function\n                key = key.replace(\"_(\", \"\").replace(\")\", \"\").replace(\", \", '\", \"')\n                translate_table[key] = \"|\" + val\n            patterns.append(re.escape(key))\n\n        def replacer(match):\n            target = translate_table[match.group(1)]\n            if mode == \"js\":\n                if target and target[0] == \"|\":  # Strict string match\n                    if match.string[match.start() - 2] == \"_\":  # Only if the match if called between _(\" \") function\n                        return '\"' + target[1:] + '\"'\n                    else:\n                        return '\"' + match.group(1) + '\"'\n                return '\"' + target + '\"'\n            else:\n                return match.group(0)[0] + target + match.group(0)[-1]\n\n        if mode == \"html\":\n            pattern = '[\">](' + \"|\".join(patterns) + ')[\"<]'\n        else:\n            pattern = '\"(' + \"|\".join(patterns) + ')\"'\n        data = re.sub(pattern, replacer, data)\n        return data.encode(\"utf8\")\n\ntranslate = Translate()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "Translate.py", "id": "899fbdb9467e409ef43037ba969e930b", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Translate/Translate.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}