{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n    parse_duration,\n    update_url_query,\n)\n\n\nclass TVNowBaseIE(InfoExtractor):\n    _VIDEO_FIELDS = (\n        'id', 'title', 'free', 'geoblocked', 'articleLong', 'articleShort',\n        'broadcastStartDate', 'isDrm', 'duration', 'season', 'episode',\n        'manifest.dashclear', 'format.title', 'format.defaultImage169Format',\n        'format.defaultImage169Logo')\n\n    def _call_api(self, path, video_id, query):\n        return self._download_json(\n            'https://api.tvnow.de/v3/' + path,\n            video_id, query=query)\n\n    def _extract_video(self, info, display_id):\n        video_id = compat_str(info['id'])\n        title = info['title']\n\n        mpd_url = info['manifest']['dashclear']\n        if not mpd_url:\n            if info.get('isDrm'):\n                raise ExtractorError(\n                    'Video %s is DRM protected' % video_id, expected=True)\n            if info.get('geoblocked'):\n                raise ExtractorError(\n                    'Video %s is not available from your location due to geo restriction' % video_id,\n                    expected=True)\n            if not info.get('free', True):\n                raise ExtractorError(\n                    'Video %s is not available for free' % video_id, expected=True)\n\n        mpd_url = update_url_query(mpd_url, {'filter': ''})\n        formats = self._extract_mpd_formats(mpd_url, video_id, mpd_id='dash', fatal=False)\n        formats.extend(self._extract_ism_formats(\n            mpd_url.replace('dash.', 'hss.').replace('/.mpd', '/Manifest'),\n            video_id, ism_id='mss', fatal=False))\n        formats.extend(self._extract_m3u8_formats(\n            mpd_url.replace('dash.', 'hls.').replace('/.mpd', '/.m3u8'),\n            video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        description = info.get('articleLong') or info.get('articleShort')\n        timestamp = parse_iso8601(info.get('broadcastStartDate'), ' ')\n        duration = parse_duration(info.get('duration'))\n\n        f = info.get('format', {})\n        thumbnail = f.get('defaultImage169Format') or f.get('defaultImage169Logo')\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'series': f.get('title'),\n            'season_number': int_or_none(info.get('season')),\n            'episode_number': int_or_none(info.get('episode')),\n            'episode': title,\n            'formats': formats,\n        }\n\n\nclass TVNowIE(TVNowBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?tvnow\\.(?:de|at|ch)/(?:rtl(?:2|plus)?|nitro|superrtl|ntv|vox)/(?P<show_id>[^/]+)/(?:(?:list/[^/]+|jahr/\\d{4}/\\d{1,2})/)?(?P<id>[^/]+)/(?:player|preview)'\n\n    _TESTS = [{\n        'url': 'https://www.tvnow.de/rtl2/grip-das-motormagazin/der-neue-porsche-911-gt-3/player',\n        'info_dict': {\n            'id': '331082',\n            'display_id': 'grip-das-motormagazin/der-neue-porsche-911-gt-3',\n            'ext': 'mp4',\n            'title': 'Der neue Porsche 911 GT 3',\n            'description': 'md5:6143220c661f9b0aae73b245e5d898bb',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1495994400,\n            'upload_date': '20170528',\n            'duration': 5283,\n            'series': 'GRIP - Das Motormagazin',\n            'season_number': 14,\n            'episode_number': 405,\n            'episode': 'Der neue Porsche 911 GT 3',\n        },\n    }, {\n        \n        'url': 'https://www.tvnow.de/rtl2/armes-deutschland/episode-0008/player',\n        'only_matching': 'True',\n    }, {\n        \n        'url': 'https://www.tvnow.de/nitro/alarm-fuer-cobra-11-die-autobahnpolizei/auf-eigene-faust-pilot/player',\n        'only_matching': 'True',\n    }, {\n        \n        'url': 'https://www.tvnow.de/superrtl/die-lustigsten-schlamassel-der-welt/u-a-ketchup-effekt/player',\n        'only_matching': 'True',\n    }, {\n        \n        'url': 'https://www.tvnow.de/ntv/startup-news/goetter-in-weiss/player',\n        'only_matching': 'True',\n    }, {\n        \n        'url': 'https://www.tvnow.de/vox/auto-mobil/neues-vom-automobilmarkt-2017-11-19-17-00-00/player',\n        'only_matching': 'True',\n    }, {\n        \n        'url': 'https://www.tvnow.de/rtlplus/op-ruft-dr-bruckner/die-vernaehte-frau/player',\n        'only_matching': 'True',\n    }]\n\n    def _real_extract(self, url):\n        display_id = '%s/%s' % re.match(self._VALID_URL, url).groups()\n\n        info = self._call_api(\n            'movies/' + display_id, display_id, query={\n                'fields': ','.join(self._VIDEO_FIELDS),\n            })\n\n        return self._extract_video(info, display_id)\n\n\nclass TVNowListIE(TVNowBaseIE):\n    _VALID_URL = r'(?P<base_url>https?://(?:www\\.)?tvnow\\.(?:de|at|ch)/(?:rtl(?:2|plus)?|nitro|superrtl|ntv|vox)/(?P<show_id>[^/]+)/)list/(?P<id>[^?/\n\n    _SHOW_FIELDS = ('title', )\n    _SEASON_FIELDS = ('id', 'headline', 'seoheadline', )\n    _VIDEO_FIELDS = ('id', 'headline', 'seoUrl', )\n\n    _TESTS = [{\n        'url': 'https://www.tvnow.de/rtl/30-minuten-deutschland/list/aktuell',\n        'info_dict': {\n            'id': '28296',\n            'title': '30 Minuten Deutschland - Aktuell',\n        },\n        'playlist_mincount': 1,\n    }]\n\n    def _real_extract(self, url):\n        base_url, show_id, season_id = re.match(self._VALID_URL, url).groups()\n\n        fields = []\n        fields.extend(self._SHOW_FIELDS)\n        fields.extend('formatTabs.%s' % field for field in self._SEASON_FIELDS)\n        fields.extend(\n            'formatTabs.formatTabPages.container.movies.%s' % field\n            for field in self._VIDEO_FIELDS)\n\n        list_info = self._call_api(\n            'formats/seo', season_id, query={\n                'fields': ','.join(fields),\n                'name': show_id + '.php'\n            })\n\n        season = next(\n            season for season in list_info['formatTabs']['items']\n            if season.get('seoheadline') == season_id)\n\n        title = '%s - %s' % (list_info['title'], season['headline'])\n\n        entries = []\n        for container in season['formatTabPages']['items']:\n            for info in ((container.get('container') or {}).get('movies') or {}).get('items') or []:\n                seo_url = info.get('seoUrl')\n                if not seo_url:\n                    continue\n                entries.append(self.url_result(\n                    base_url + seo_url + '/player', 'TVNow', info.get('id')))\n\n        return self.playlist_result(\n            entries, compat_str(season.get('id') or season_id), title)\n", "comments": "# coding: utf-8\n# rtl2\n# rtlnitro\n# superrtl\n# ntv\n# vox\n# rtlplus\n#&]+)$'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n    parse_duration,\n    update_url_query,\n)\n\n\nclass TVNowBaseIE(InfoExtractor):\n    _VIDEO_FIELDS = (\n        'id', 'title', 'free', 'geoblocked', 'articleLong', 'articleShort',\n        'broadcastStartDate', 'isDrm', 'duration', 'season', 'episode',\n        'manifest.dashclear', 'format.title', 'format.defaultImage169Format',\n        'format.defaultImage169Logo')\n\n    def _call_api(self, path, video_id, query):\n        return self._download_json(\n            'https://api.tvnow.de/v3/' + path,\n            video_id, query=query)\n\n    def _extract_video(self, info, display_id):\n        video_id = compat_str(info['id'])\n        title = info['title']\n\n        mpd_url = info['manifest']['dashclear']\n        if not mpd_url:\n            if info.get('isDrm'):\n                raise ExtractorError(\n                    'Video %s is DRM protected' % video_id, expected=True)\n            if info.get('geoblocked'):\n                raise ExtractorError(\n                    'Video %s is not available from your location due to geo restriction' % video_id,\n                    expected=True)\n            if not info.get('free', True):\n                raise ExtractorError(\n                    'Video %s is not available for free' % video_id, expected=True)\n\n        mpd_url = update_url_query(mpd_url, {'filter': ''})\n        formats = self._extract_mpd_formats(mpd_url, video_id, mpd_id='dash', fatal=False)\n        formats.extend(self._extract_ism_formats(\n            mpd_url.replace('dash.', 'hss.').replace('/.mpd', '/Manifest'),\n            video_id, ism_id='mss', fatal=False))\n        formats.extend(self._extract_m3u8_formats(\n            mpd_url.replace('dash.', 'hls.').replace('/.mpd', '/.m3u8'),\n            video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        description = info.get('articleLong') or info.get('articleShort')\n        timestamp = parse_iso8601(info.get('broadcastStartDate'), ' ')\n        duration = parse_duration(info.get('duration'))\n\n        f = info.get('format', {})\n        thumbnail = f.get('defaultImage169Format') or f.get('defaultImage169Logo')\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'series': f.get('title'),\n            'season_number': int_or_none(info.get('season')),\n            'episode_number': int_or_none(info.get('episode')),\n            'episode': title,\n            'formats': formats,\n        }\n\n\nclass TVNowIE(TVNowBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?tvnow\\.(?:de|at|ch)/(?:rtl(?:2|plus)?|nitro|superrtl|ntv|vox)/(?P<show_id>[^/]+)/(?:(?:list/[^/]+|jahr/\\d{4}/\\d{1,2})/)?(?P<id>[^/]+)/(?:player|preview)'\n\n    _TESTS = [{\n        'url': 'https://www.tvnow.de/rtl2/grip-das-motormagazin/der-neue-porsche-911-gt-3/player',\n        'info_dict': {\n            'id': '331082',\n            'display_id': 'grip-das-motormagazin/der-neue-porsche-911-gt-3',\n            'ext': 'mp4',\n            'title': 'Der neue Porsche 911 GT 3',\n            'description': 'md5:6143220c661f9b0aae73b245e5d898bb',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1495994400,\n            'upload_date': '20170528',\n            'duration': 5283,\n            'series': 'GRIP - Das Motormagazin',\n            'season_number': 14,\n            'episode_number': 405,\n            'episode': 'Der neue Porsche 911 GT 3',\n        },\n    }, {\n        # rtl2\n        'url': 'https://www.tvnow.de/rtl2/armes-deutschland/episode-0008/player',\n        'only_matching': 'True',\n    }, {\n        # rtlnitro\n        'url': 'https://www.tvnow.de/nitro/alarm-fuer-cobra-11-die-autobahnpolizei/auf-eigene-faust-pilot/player',\n        'only_matching': 'True',\n    }, {\n        # superrtl\n        'url': 'https://www.tvnow.de/superrtl/die-lustigsten-schlamassel-der-welt/u-a-ketchup-effekt/player',\n        'only_matching': 'True',\n    }, {\n        # ntv\n        'url': 'https://www.tvnow.de/ntv/startup-news/goetter-in-weiss/player',\n        'only_matching': 'True',\n    }, {\n        # vox\n        'url': 'https://www.tvnow.de/vox/auto-mobil/neues-vom-automobilmarkt-2017-11-19-17-00-00/player',\n        'only_matching': 'True',\n    }, {\n        # rtlplus\n        'url': 'https://www.tvnow.de/rtlplus/op-ruft-dr-bruckner/die-vernaehte-frau/player',\n        'only_matching': 'True',\n    }]\n\n    def _real_extract(self, url):\n        display_id = '%s/%s' % re.match(self._VALID_URL, url).groups()\n\n        info = self._call_api(\n            'movies/' + display_id, display_id, query={\n                'fields': ','.join(self._VIDEO_FIELDS),\n            })\n\n        return self._extract_video(info, display_id)\n\n\nclass TVNowListIE(TVNowBaseIE):\n    _VALID_URL = r'(?P<base_url>https?://(?:www\\.)?tvnow\\.(?:de|at|ch)/(?:rtl(?:2|plus)?|nitro|superrtl|ntv|vox)/(?P<show_id>[^/]+)/)list/(?P<id>[^?/#&]+)$'\n\n    _SHOW_FIELDS = ('title', )\n    _SEASON_FIELDS = ('id', 'headline', 'seoheadline', )\n    _VIDEO_FIELDS = ('id', 'headline', 'seoUrl', )\n\n    _TESTS = [{\n        'url': 'https://www.tvnow.de/rtl/30-minuten-deutschland/list/aktuell',\n        'info_dict': {\n            'id': '28296',\n            'title': '30 Minuten Deutschland - Aktuell',\n        },\n        'playlist_mincount': 1,\n    }]\n\n    def _real_extract(self, url):\n        base_url, show_id, season_id = re.match(self._VALID_URL, url).groups()\n\n        fields = []\n        fields.extend(self._SHOW_FIELDS)\n        fields.extend('formatTabs.%s' % field for field in self._SEASON_FIELDS)\n        fields.extend(\n            'formatTabs.formatTabPages.container.movies.%s' % field\n            for field in self._VIDEO_FIELDS)\n\n        list_info = self._call_api(\n            'formats/seo', season_id, query={\n                'fields': ','.join(fields),\n                'name': show_id + '.php'\n            })\n\n        season = next(\n            season for season in list_info['formatTabs']['items']\n            if season.get('seoheadline') == season_id)\n\n        title = '%s - %s' % (list_info['title'], season['headline'])\n\n        entries = []\n        for container in season['formatTabPages']['items']:\n            for info in ((container.get('container') or {}).get('movies') or {}).get('items') or []:\n                seo_url = info.get('seoUrl')\n                if not seo_url:\n                    continue\n                entries.append(self.url_result(\n                    base_url + seo_url + '/player', 'TVNow', info.get('id')))\n\n        return self.playlist_result(\n            entries, compat_str(season.get('id') or season_id), title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tvnow.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tvnow.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}