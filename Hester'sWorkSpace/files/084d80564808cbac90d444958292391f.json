{"author": "ansible", "code": "\n\"\"\" PN-CLI vrouter-interface-add/remove/modify \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vrouterif\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove/modify vrouter-interface.\ndescription:\n  - Execute vrouter-interface-add, vrouter-interface-remove,\n    vrouter-interface-modify command.\n  - You configure interfaces to vRouter services on a fabric, cluster,\n    standalone switch or virtual network(VNET).\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to add vrouter interface,\n        'absent' to remove vrouter interface and 'update' to modify vrouter\n        interface.\n    required: True\n    choices: ['present', 'absent', 'update']\n  pn_vrouter_name:\n    description:\n      - Specify the name of the vRouter interface.\n    required: True\n  pn_vlan:\n    description:\n      - Specify the VLAN identifier. This is a value between 1 and 4092.\n  pn_interface_ip:\n    description:\n      - Specify the IP address of the interface in x.x.x.x/n format.\n  pn_assignment:\n    description:\n      - Specify the DHCP method for IP address assignment.\n    choices: ['none', 'dhcp', 'dhcpv6', 'autov6']\n  pn_vxlan:\n    description:\n      - Specify the VXLAN identifier. This is a value between 1 and 16777215.\n  pn_interface:\n    description:\n      - Specify if the interface is management, data or span interface.\n    choices: ['mgmt', 'data', 'span']\n  pn_alias:\n    description:\n      - Specify an alias for the interface.\n  pn_exclusive:\n    description:\n      - Specify if the interface is exclusive to the configuration. Exclusive\n        means that other configurations cannot use the interface. Exclusive is\n        specified when you configure the interface as span interface and allows\n        higher throughput through the interface.\n  pn_nic_enable:\n    description:\n      - Specify if the NIC is enabled or not\n  pn_vrrp_id:\n    description:\n      - Specify the ID for the VRRP interface. The IDs on both vRouters must be\n        the same IS number.\n  pn_vrrp_priority:\n    description:\n      - Specify the priority for the VRRP interface. This is a value between\n         1 (lowest) and 255 (highest).\n  pn_vrrp_adv_int:\n    description:\n      - Specify a VRRP advertisement interval in milliseconds. The range is\n        from 30 to 40950 with a default value of 1000.\n  pn_l3port:\n    description:\n      - Specify a Layer 3 port for the interface.\n  pn_secondary_macs:\n    description:\n      - Specify a secondary MAC address for the interface.\n  pn_nic_str:\n    description:\n      - Specify the type of NIC. Used for vrouter-interface remove/modify.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: Add vrouter-interface\n  pn_vrouterif:\n    pn_cliusername: admin\n    pn_clipassword: admin\n    state: 'present'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: 101.101.101.2/24\n    pn_vlan: 101\n\n- name: Add VRRP..\n  pn_vrouterif:\n    pn_cliusername: admin\n    pn_clipassword: admin\n    state: 'present'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: 101.101.101.2/24\n    pn_vrrp_ip: 101.101.101.1/24\n    pn_vrrp_priority: 100\n    pn_vlan: 101\n\n- name: Remove vrouter-interface\n  pn_vrouterif:\n    pn_cliusername: admin\n    pn_clipassword: admin\n    state: 'absent'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: 101.101.101.2/24\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vrouterif command.\n  returned: on success\n  type: list\nstderr:\n  description: The set of error responses from the vrouterif command.\n  returned: on error\n  type: str\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nINTERFACE_EXISTS = None\nNIC_EXISTS = None\nVRRP_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks if vRouter exists on the target node.\n    This method also checks for idempotency using the vrouter-interface-show\n    command.\n    If the given vRouter exists, return VROUTER_EXISTS as True else False.\n\n    If an interface with the given ip exists on the given vRouter,\n    return INTERFACE_EXISTS as True else False. This is required for\n    vrouter-interface-add.\n\n    If nic_str exists on the given vRouter, return NIC_EXISTS as True else\n    False. This is required for vrouter-interface-remove.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, INTERFACE_EXISTS, NIC_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    interface_ip = module.params['pn_interface_ip']\n    nic_str = module.params['pn_nic_str']\n\n     Global flags\n    global VROUTER_EXISTS, INTERFACE_EXISTS, NIC_EXISTS\n\n     Check for vRouter\n    check_vrouter = cli + ' vrouter-show format name no-show-headers '\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n    out = out.split()\n\n    if vrouter_name in out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n    if interface_ip:\n         Check for interface and VRRP and fetch nic for VRRP\n        show = cli + ' vrouter-interface-show vrouter-name %s ' % vrouter_name\n        show += 'ip %s format ip,nic no-show-headers' % interface_ip\n        show = shlex.split(show)\n        out = module.run_command(show)[1]\n        if out:\n            INTERFACE_EXISTS = True\n        else:\n            INTERFACE_EXISTS = False\n\n    if nic_str:\n         Check for nic\n        show = cli + ' vrouter-interface-show vrouter-name %s ' % vrouter_name\n        show += ' format nic no-show-headers'\n        show = shlex.split(show)\n        out = module.run_command(show)[1]\n        if nic_str in out:\n            NIC_EXISTS = True\n        else:\n            NIC_EXISTS = False\n\n\ndef get_nic(module, cli):\n    \"\"\"\n    This module checks if VRRP interface can be added. If No, return VRRP_EXISTS\n    as True.\n    If Yes, fetch the nic string from the primary interface and return nic and\n    VRRP_EXISTS as False.\n    :param module:\n    :param cli:\n    :return: nic, Global Boolean: VRRP_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    interface_ip = module.params['pn_interface_ip']\n\n    global VRRP_EXISTS\n\n     Check for interface and VRRP and fetch nic for VRRP\n    show = cli + ' vrouter-interface-show vrouter-name %s ' % vrouter_name\n    show += 'ip %s format ip,nic no-show-headers' % interface_ip\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if len(out) > 3:\n        VRRP_EXISTS = True\n        return None\n    else:\n        nic = out[2]\n        VRRP_EXISTS = False\n        return nic\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-interface-add'\n    if state == 'absent':\n        command = 'vrouter-interface-remove'\n    if state == 'update':\n        command = 'vrouter-interface-modify'\n    return command\n\n\ndef main():\n    \"\"\" This portion is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_vlan=dict(type='int'),\n            pn_interface_ip=dict(required=True, type='str'),\n            pn_assignment=dict(type='str',\n                               choices=['none', 'dhcp', 'dhcpv6', 'autov6']),\n            pn_vxlan=dict(type='int'),\n            pn_interface=dict(type='str', choices=['mgmt', 'data', 'span']),\n            pn_alias=dict(type='str'),\n            pn_exclusive=dict(type='bool'),\n            pn_nic_enable=dict(type='bool'),\n            pn_vrrp_id=dict(type='int'),\n            pn_vrrp_priority=dict(type='int'),\n            pn_vrrp_adv_int=dict(type='str'),\n            pn_l3port=dict(type='str'),\n            pn_secondary_macs=dict(type='str'),\n            pn_nic_str=dict(type='str')\n        ),\n        required_if=(\n            [\"state\", \"present\",\n             [\"pn_vrouter_name\", \"pn_interface_ip\"]],\n            [\"state\", \"absent\",\n             [\"pn_vrouter_name\", \"pn_nic_str\"]]\n        ),\n    )\n\n     Accessing the arguments\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    vlan = module.params['pn_vlan']\n    interface_ip = module.params['pn_interface_ip']\n    assignment = module.params['pn_assignment']\n    vxlan = module.params['pn_vxlan']\n    interface = module.params['pn_interface']\n    alias = module.params['pn_alias']\n    exclusive = module.params['pn_exclusive']\n    nic_enable = module.params['pn_nic_enable']\n    vrrp_id = module.params['pn_vrrp_id']\n    vrrp_priority = module.params['pn_vrrp_priority']\n    vrrp_adv_int = module.params['pn_vrrp_adv_int']\n    l3port = module.params['pn_l3port']\n    secondary_macs = module.params['pn_secondary_macs']\n    nic_str = module.params['pn_nic_str']\n\n    command = get_command_from_state(state)\n\n     Building the CLI command string\n    cli = pn_cli(module)\n\n    check_cli(module, cli)\n    if command == 'vrouter-interface-add':\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n\n        if vrrp_id:\n            vrrp_primary = get_nic(module, cli)\n            if VRRP_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg=('VRRP interface on %s already exists. Check '\n                         'the IP addresses' % vrouter_name)\n                )\n            cli += ' %s vrouter-name %s ' % (command, vrouter_name)\n            cli += (' ip %s vrrp-primary %s vrrp-id %s '\n                    % (interface_ip, vrrp_primary, str(vrrp_id)))\n            if vrrp_priority:\n                cli += ' vrrp-priority %s ' % str(vrrp_priority)\n            if vrrp_adv_int:\n                cli += ' vrrp-adv-int %s ' % vrrp_adv_int\n\n        else:\n            if INTERFACE_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg=('vRouter interface on %s already exists. Check the '\n                         'IP addresses' % vrouter_name)\n                )\n            cli += ' %s vrouter-name %s ' % (command, vrouter_name)\n            cli += ' ip %s ' % interface_ip\n\n        if vlan:\n            cli += ' vlan ' + str(vlan)\n\n        if l3port:\n            cli += ' l3-port ' + l3port\n\n        if assignment:\n            cli += ' assignment ' + assignment\n\n        if vxlan:\n            cli += ' vxlan ' + str(vxlan)\n\n        if interface:\n            cli += ' if ' + interface\n\n        if alias:\n            cli += ' alias-on ' + alias\n\n        if exclusive is True:\n            cli += ' exclusive '\n        if exclusive is False:\n            cli += ' no-exclusive '\n\n        if nic_enable is True:\n            cli += ' nic-enable '\n        if nic_enable is False:\n            cli += ' nic-disable '\n\n        if secondary_macs:\n            cli += ' secondary-macs ' + secondary_macs\n\n    if command == 'vrouter-interface-remove':\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if NIC_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter interface with nic %s does not exist' % nic_str\n            )\n        cli += ' %s vrouter-name %s nic %s ' % (command, vrouter_name, nic_str)\n\n    run_cli(module, cli)\n Ansible boiler-plate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli vrouter interface add remove modify          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn vrouterif author   pluribus networks ( amitsi)  version added   2 2  short description  cli command add remove modify vrouter interface  description      execute vrouter interface add  vrouter interface remove      vrouter interface modify command      you configure interfaces vrouter services fabric  cluster      standalone switch virtual network(vnet)  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch run cli      required  false   state      description          state action perform  use  present  add vrouter interface           absent  remove vrouter interface  update  modify vrouter         interface      required  true     choices    present    absent    update     pn vrouter name      description          specify name vrouter interface      required  true   pn vlan      description          specify vlan identifier  this value 1 4092    pn interface ip      description          specify ip address interface x x x x n format    pn assignment      description          specify dhcp method ip address assignment      choices    none    dhcp    dhcpv6    autov6     pn vxlan      description          specify vxlan identifier  this value 1 16777215    pn interface      description          specify interface management  data span interface      choices    mgmt    data    span     pn alias      description          specify alias interface    pn exclusive      description          specify interface exclusive configuration  exclusive         means configurations cannot use interface  exclusive         specified configure interface span interface allows         higher throughput interface    pn nic enable      description          specify nic enabled   pn vrrp id      description          specify id vrrp interface  the ids vrouters must         is number    pn vrrp priority      description          specify priority vrrp interface  this value          1 (lowest) 255 (highest)    pn vrrp adv int      description          specify vrrp advertisement interval milliseconds  the range         30 40950 default value 1000    pn l3port      description          specify layer 3 port interface    pn secondary macs      description          specify secondary mac address interface    pn nic str      description          specify type nic  used vrouter interface remove modify       examples         name  add vrouter interface   pn vrouterif      pn cliusername  admin     pn clipassword  admin     state   present      pn vrouter name   ansible vrouter      pn interface ip  101 101 101 2 24     pn vlan  101    name  add vrrp     pn vrouterif      pn cliusername  admin     pn clipassword  admin     state   present      pn vrouter name   ansible vrouter      pn interface ip  101 101 101 2 24     pn vrrp ip  101 101 101 1 24     pn vrrp priority  100     pn vlan  101    name  remove vrouter interface   pn vrouterif      pn cliusername  admin     pn clipassword  admin     state   absent      pn vrouter name   ansible vrouter      pn interface ip  101 101 101 2 24      return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses vrouterif command    returned  success   type  list stderr    description  the set error responses vrouterif command    returned  error   type  str changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex  vrouter exists   none interface exists   none nic exists   none vrrp exists   none   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch     local           cli      switch local       else          cli      switch     cliswitch     return cli   def check cli(module  cli)              this method checks vrouter exists target node      this method also checks idempotency using vrouter interface show     command      if given vrouter exists  return vrouter exists true else false       if interface given ip exists given vrouter      return interface exists true else false  this required     vrouter interface add       if nic str exists given vrouter  return nic exists true else     false  this required vrouter interface remove        param module  the ansible module fetch input parameters      param cli  the cli string      return global booleans  vrouter exists  interface exists  nic exists             vrouter name   module params  pn vrouter name       interface ip   module params  pn interface ip       nic str   module params  pn nic str          global flags     global vrouter exists  interface exists  nic exists        check vrouter     check vrouter   cli     vrouter show format name show headers       check vrouter   shlex split(check vrouter)       module run command(check vrouter) 1        split()      vrouter name          vrouter exists   true     else          vrouter exists   false      interface ip            check interface vrrp fetch nic vrrp         show   cli     vrouter interface show vrouter name      vrouter name         show     ip  format ip nic show headers    interface ip         show   shlex split(show)           module run command(show) 1                       interface exists   true         else              interface exists   false      nic str            check nic         show   cli     vrouter interface show vrouter name      vrouter name         show      format nic show headers          show   shlex split(show)           module run command(show) 1          nic str              nic exists   true         else              nic exists   false   def get nic(module  cli)              this module checks vrrp interface added  if no  return vrrp exists     true      if yes  fetch nic string primary interface return nic     vrrp exists false       param module       param cli       return  nic  global boolean  vrrp exists             vrouter name   module params  pn vrouter name       interface ip   module params  pn interface ip        global vrrp exists        check interface vrrp fetch nic vrrp     show   cli     vrouter interface show vrouter name      vrouter name     show     ip  format ip nic show headers    interface ip     show   shlex split(show)       module run command(show) 1        split()      len(out)   3          vrrp exists   true         return none     else          nic   2          vrrp exists   false         return nic   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       state   module params  state       command   get command state(state)      cmd   shlex split(cli)          contains output        err  contains error messages     result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format     result    0          module exit json(             command print cli              stderr err strip()              msg   operation failed    command              changed false         )               module exit json(             command print cli              stdout strip()              msg   operation completed    command              changed true         )      else          module exit json(             command print cli              msg   operation completed    command              changed true         )   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    vrouter interface add      state     absent           command    vrouter interface remove      state     update           command    vrouter interface modify      return command   def main()          this portion arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          global flags    check vrouter    check interface vrrp fetch nic vrrp    check nic    check interface vrrp fetch nic vrrp      contains output     err  contains error messages    response json format    accessing arguments    building cli command string    ansible boiler plate ", "content": "#!/usr/bin/python\n\"\"\" PN-CLI vrouter-interface-add/remove/modify \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vrouterif\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove/modify vrouter-interface.\ndescription:\n  - Execute vrouter-interface-add, vrouter-interface-remove,\n    vrouter-interface-modify command.\n  - You configure interfaces to vRouter services on a fabric, cluster,\n    standalone switch or virtual network(VNET).\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to add vrouter interface,\n        'absent' to remove vrouter interface and 'update' to modify vrouter\n        interface.\n    required: True\n    choices: ['present', 'absent', 'update']\n  pn_vrouter_name:\n    description:\n      - Specify the name of the vRouter interface.\n    required: True\n  pn_vlan:\n    description:\n      - Specify the VLAN identifier. This is a value between 1 and 4092.\n  pn_interface_ip:\n    description:\n      - Specify the IP address of the interface in x.x.x.x/n format.\n  pn_assignment:\n    description:\n      - Specify the DHCP method for IP address assignment.\n    choices: ['none', 'dhcp', 'dhcpv6', 'autov6']\n  pn_vxlan:\n    description:\n      - Specify the VXLAN identifier. This is a value between 1 and 16777215.\n  pn_interface:\n    description:\n      - Specify if the interface is management, data or span interface.\n    choices: ['mgmt', 'data', 'span']\n  pn_alias:\n    description:\n      - Specify an alias for the interface.\n  pn_exclusive:\n    description:\n      - Specify if the interface is exclusive to the configuration. Exclusive\n        means that other configurations cannot use the interface. Exclusive is\n        specified when you configure the interface as span interface and allows\n        higher throughput through the interface.\n  pn_nic_enable:\n    description:\n      - Specify if the NIC is enabled or not\n  pn_vrrp_id:\n    description:\n      - Specify the ID for the VRRP interface. The IDs on both vRouters must be\n        the same IS number.\n  pn_vrrp_priority:\n    description:\n      - Specify the priority for the VRRP interface. This is a value between\n         1 (lowest) and 255 (highest).\n  pn_vrrp_adv_int:\n    description:\n      - Specify a VRRP advertisement interval in milliseconds. The range is\n        from 30 to 40950 with a default value of 1000.\n  pn_l3port:\n    description:\n      - Specify a Layer 3 port for the interface.\n  pn_secondary_macs:\n    description:\n      - Specify a secondary MAC address for the interface.\n  pn_nic_str:\n    description:\n      - Specify the type of NIC. Used for vrouter-interface remove/modify.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: Add vrouter-interface\n  pn_vrouterif:\n    pn_cliusername: admin\n    pn_clipassword: admin\n    state: 'present'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: 101.101.101.2/24\n    pn_vlan: 101\n\n- name: Add VRRP..\n  pn_vrouterif:\n    pn_cliusername: admin\n    pn_clipassword: admin\n    state: 'present'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: 101.101.101.2/24\n    pn_vrrp_ip: 101.101.101.1/24\n    pn_vrrp_priority: 100\n    pn_vlan: 101\n\n- name: Remove vrouter-interface\n  pn_vrouterif:\n    pn_cliusername: admin\n    pn_clipassword: admin\n    state: 'absent'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: 101.101.101.2/24\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vrouterif command.\n  returned: on success\n  type: list\nstderr:\n  description: The set of error responses from the vrouterif command.\n  returned: on error\n  type: str\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nINTERFACE_EXISTS = None\nNIC_EXISTS = None\nVRRP_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks if vRouter exists on the target node.\n    This method also checks for idempotency using the vrouter-interface-show\n    command.\n    If the given vRouter exists, return VROUTER_EXISTS as True else False.\n\n    If an interface with the given ip exists on the given vRouter,\n    return INTERFACE_EXISTS as True else False. This is required for\n    vrouter-interface-add.\n\n    If nic_str exists on the given vRouter, return NIC_EXISTS as True else\n    False. This is required for vrouter-interface-remove.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, INTERFACE_EXISTS, NIC_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    interface_ip = module.params['pn_interface_ip']\n    nic_str = module.params['pn_nic_str']\n\n    # Global flags\n    global VROUTER_EXISTS, INTERFACE_EXISTS, NIC_EXISTS\n\n    # Check for vRouter\n    check_vrouter = cli + ' vrouter-show format name no-show-headers '\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n    out = out.split()\n\n    if vrouter_name in out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n    if interface_ip:\n        # Check for interface and VRRP and fetch nic for VRRP\n        show = cli + ' vrouter-interface-show vrouter-name %s ' % vrouter_name\n        show += 'ip %s format ip,nic no-show-headers' % interface_ip\n        show = shlex.split(show)\n        out = module.run_command(show)[1]\n        if out:\n            INTERFACE_EXISTS = True\n        else:\n            INTERFACE_EXISTS = False\n\n    if nic_str:\n        # Check for nic\n        show = cli + ' vrouter-interface-show vrouter-name %s ' % vrouter_name\n        show += ' format nic no-show-headers'\n        show = shlex.split(show)\n        out = module.run_command(show)[1]\n        if nic_str in out:\n            NIC_EXISTS = True\n        else:\n            NIC_EXISTS = False\n\n\ndef get_nic(module, cli):\n    \"\"\"\n    This module checks if VRRP interface can be added. If No, return VRRP_EXISTS\n    as True.\n    If Yes, fetch the nic string from the primary interface and return nic and\n    VRRP_EXISTS as False.\n    :param module:\n    :param cli:\n    :return: nic, Global Boolean: VRRP_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    interface_ip = module.params['pn_interface_ip']\n\n    global VRRP_EXISTS\n\n    # Check for interface and VRRP and fetch nic for VRRP\n    show = cli + ' vrouter-interface-show vrouter-name %s ' % vrouter_name\n    show += 'ip %s format ip,nic no-show-headers' % interface_ip\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if len(out) > 3:\n        VRRP_EXISTS = True\n        return None\n    else:\n        nic = out[2]\n        VRRP_EXISTS = False\n        return nic\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-interface-add'\n    if state == 'absent':\n        command = 'vrouter-interface-remove'\n    if state == 'update':\n        command = 'vrouter-interface-modify'\n    return command\n\n\ndef main():\n    \"\"\" This portion is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_vlan=dict(type='int'),\n            pn_interface_ip=dict(required=True, type='str'),\n            pn_assignment=dict(type='str',\n                               choices=['none', 'dhcp', 'dhcpv6', 'autov6']),\n            pn_vxlan=dict(type='int'),\n            pn_interface=dict(type='str', choices=['mgmt', 'data', 'span']),\n            pn_alias=dict(type='str'),\n            pn_exclusive=dict(type='bool'),\n            pn_nic_enable=dict(type='bool'),\n            pn_vrrp_id=dict(type='int'),\n            pn_vrrp_priority=dict(type='int'),\n            pn_vrrp_adv_int=dict(type='str'),\n            pn_l3port=dict(type='str'),\n            pn_secondary_macs=dict(type='str'),\n            pn_nic_str=dict(type='str')\n        ),\n        required_if=(\n            [\"state\", \"present\",\n             [\"pn_vrouter_name\", \"pn_interface_ip\"]],\n            [\"state\", \"absent\",\n             [\"pn_vrouter_name\", \"pn_nic_str\"]]\n        ),\n    )\n\n    # Accessing the arguments\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    vlan = module.params['pn_vlan']\n    interface_ip = module.params['pn_interface_ip']\n    assignment = module.params['pn_assignment']\n    vxlan = module.params['pn_vxlan']\n    interface = module.params['pn_interface']\n    alias = module.params['pn_alias']\n    exclusive = module.params['pn_exclusive']\n    nic_enable = module.params['pn_nic_enable']\n    vrrp_id = module.params['pn_vrrp_id']\n    vrrp_priority = module.params['pn_vrrp_priority']\n    vrrp_adv_int = module.params['pn_vrrp_adv_int']\n    l3port = module.params['pn_l3port']\n    secondary_macs = module.params['pn_secondary_macs']\n    nic_str = module.params['pn_nic_str']\n\n    command = get_command_from_state(state)\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n\n    check_cli(module, cli)\n    if command == 'vrouter-interface-add':\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n\n        if vrrp_id:\n            vrrp_primary = get_nic(module, cli)\n            if VRRP_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg=('VRRP interface on %s already exists. Check '\n                         'the IP addresses' % vrouter_name)\n                )\n            cli += ' %s vrouter-name %s ' % (command, vrouter_name)\n            cli += (' ip %s vrrp-primary %s vrrp-id %s '\n                    % (interface_ip, vrrp_primary, str(vrrp_id)))\n            if vrrp_priority:\n                cli += ' vrrp-priority %s ' % str(vrrp_priority)\n            if vrrp_adv_int:\n                cli += ' vrrp-adv-int %s ' % vrrp_adv_int\n\n        else:\n            if INTERFACE_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg=('vRouter interface on %s already exists. Check the '\n                         'IP addresses' % vrouter_name)\n                )\n            cli += ' %s vrouter-name %s ' % (command, vrouter_name)\n            cli += ' ip %s ' % interface_ip\n\n        if vlan:\n            cli += ' vlan ' + str(vlan)\n\n        if l3port:\n            cli += ' l3-port ' + l3port\n\n        if assignment:\n            cli += ' assignment ' + assignment\n\n        if vxlan:\n            cli += ' vxlan ' + str(vxlan)\n\n        if interface:\n            cli += ' if ' + interface\n\n        if alias:\n            cli += ' alias-on ' + alias\n\n        if exclusive is True:\n            cli += ' exclusive '\n        if exclusive is False:\n            cli += ' no-exclusive '\n\n        if nic_enable is True:\n            cli += ' nic-enable '\n        if nic_enable is False:\n            cli += ' nic-disable '\n\n        if secondary_macs:\n            cli += ' secondary-macs ' + secondary_macs\n\n    if command == 'vrouter-interface-remove':\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if NIC_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter interface with nic %s does not exist' % nic_str\n            )\n        cli += ' %s vrouter-name %s nic %s ' % (command, vrouter_name, nic_str)\n\n    run_cli(module, cli)\n# Ansible boiler-plate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_vrouterif.py", "id": "084d80564808cbac90d444958292391f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_vrouterif.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}