{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests.common import TransactionCase\nfrom odoo.exceptions import AccessError, UserError\n\n\nclass TestCommonTimesheet(TransactionCase):\n\n    def setUp(self):\n        super(TestCommonTimesheet, self).setUp()\n\n        self.project_customer = self.env['project.project'].create({\n            'name': 'Project X',\n            'allow_timesheets': True,\n        })\n        self.task1 = self.env['project.task'].create({\n            'name': 'Task One',\n            'priority': '0',\n            'kanban_state': 'normal',\n            'project_id': self.project_customer.id,\n        })\n        self.task2 = self.env['project.task'].create({\n            'name': 'Task Two',\n            'priority': '1',\n            'kanban_state': 'done',\n            'project_id': self.project_customer.id,\n        })\n        \n        self.user_employee = self.env['res.users'].create({\n            'name': 'User Employee',\n            'login': 'user_employee',\n            'email': 'useremployee@test.com',\n            'groups_id': [(4, self.ref('hr_timesheet.group_hr_timesheet_user'))],\n        })\n        self.user_employee2 = self.env['res.users'].create({\n            'name': 'User Employee 2',\n            'login': 'user_employee2',\n            'email': 'useremployee2@test.com',\n            'groups_id': [(4, self.ref('hr_timesheet.group_hr_timesheet_user'))],\n        })\n        self.user_manager = self.env['res.users'].create({\n            'name': 'User Officer',\n            'login': 'user_manager',\n            'email': 'usermanager@test.com',\n            'groups_id': [(4, self.ref('hr_timesheet.group_timesheet_manager'))],\n        })\n        \n        self.empl_employee = self.env['hr.employee'].create({\n            'name': 'User Empl Employee',\n            'user_id': self.user_employee.id,\n        })\n        self.empl_employee2 = self.env['hr.employee'].create({\n            'name': 'User Empl Employee 2',\n            'user_id': self.user_employee2.id,\n        })\n        self.empl_manager = self.env['hr.employee'].create({\n            'name': 'User Empl Officer',\n            'user_id': self.user_manager.id,\n        })\n\n\nclass TestTimesheet(TestCommonTimesheet):\n\n    def test_log_timesheet(self):\n        \"\"\" Test when log timesheet : check analytic account, user and employee are correctly set. \"\"\"\n        Timesheet = self.env['account.analytic.line']\n        \n        timesheet1 = Timesheet.sudo(self.user_employee.id).create({\n            'project_id': self.project_customer.id,\n            'task_id': self.task1.id,\n            'name': 'my first timesheet',\n            'unit_amount': 4,\n        })\n        self.assertEquals(timesheet1.account_id, self.project_customer.analytic_account_id, 'Analytic account should be the same as the project')\n        self.assertEquals(timesheet1.employee_id, self.empl_employee, 'Employee should be the one of the current user')\n\n        \n        with self.assertRaises(AccessError):\n            timesheet2 = Timesheet.sudo(self.user_employee.id).create({\n                'project_id': self.project_customer.id,\n                'task_id': self.task1.id,\n                'name': 'a second timesheet but for employee 2',\n                'unit_amount': 3,\n                'employee_id': self.empl_employee2.id,\n            })\n\n        \n        timesheet3 = Timesheet.sudo(self.user_manager.id).create({\n            'project_id': self.project_customer.id,\n            'task_id': self.task1.id,\n            'name': 'a second timesheet but for employee 2',\n            'unit_amount': 7,\n            'employee_id': self.empl_employee2.id,\n        })\n        timesheet3._onchange_employee_id()\n        self.assertEquals(timesheet3.user_id, self.user_employee2, 'Timesheet user should be the one linked to the given employee')\n\n    def test_log_access_rights(self):\n        \"\"\" Test access rights : user can update its own timesheets only, and manager can change all \"\"\"\n        \n        Timesheet = self.env['account.analytic.line']\n        timesheet1 = Timesheet.sudo(self.user_employee.id).create({\n            'project_id': self.project_customer.id,\n            'task_id': self.task1.id,\n            'name': 'my first timesheet',\n            'unit_amount': 4,\n        })\n        \n        with self.assertRaises(AccessError):\n            timesheet1.sudo(self.user_employee2.id).write({\n                'name': 'i try to update this timesheet',\n                'unit_amount': 2,\n            })\n        \n        timesheet1.sudo(self.user_manager.id).write({\n            'unit_amount': 8,\n            'employee_id': self.empl_employee2.id,\n        })\n        self.assertEquals(timesheet1.user_id, self.user_employee2, 'Changing timesheet employee should change the related user')\n\n    def test_transfert_project(self):\n        \"\"\" Test transfert task with timesheet to another project \"\"\"\n        Timesheet = self.env['account.analytic.line']\n        \n        self.project_customer2 = self.env['project.project'].create({\n            'name': 'Project NUMBER DEUX',\n            'allow_timesheets': True,\n        })\n        \n        Timesheet.create({\n            'project_id': self.project_customer.id,\n            'task_id': self.task1.id,\n            'name': 'my first timesheet',\n            'unit_amount': 4,\n        })\n\n        timesheet_count1 = Timesheet.search_count([('project_id', '=', self.project_customer.id)])\n        timesheet_count2 = Timesheet.search_count([('project_id', '=', self.project_customer2.id)])\n        self.assertEquals(timesheet_count1, 1, \"One timesheet in project 1\")\n        self.assertEquals(timesheet_count2, 0, \"No timesheet in project 2\")\n        self.assertEquals(len(self.task1.timesheet_ids), 1, \"The timesheet should be linked to task 1\")\n\n        \n        self.task1.write({\n            'project_id': self.project_customer2.id\n        })\n\n        timesheet_count1 = Timesheet.search_count([('project_id', '=', self.project_customer.id)])\n        timesheet_count2 = Timesheet.search_count([('project_id', '=', self.project_customer2.id)])\n        self.assertEquals(timesheet_count1, 0, \"No timesheet in project 1\")\n        self.assertEquals(timesheet_count2, 1, \"One timesheet in project 2\")\n        self.assertEquals(len(self.task1.timesheet_ids), 1, \"The timesheet should be linked to task 1\")\n\n        \n        with self.assertRaises(UserError):\n            self.task1.write({\n                'project_id': False\n            })\n", "comments": "    test log timesheet   check analytic account  user employee correctly set              timesheet   self env  account analytic line             employee 1 log timesheet task 1         timesheet1   timesheet sudo(self user employee id) create(               project id   self project customer id               task id   self task1 id               name    first timesheet                unit amount   4           )         self assertequals(timesheet1 account id  self project customer analytic account id   analytic account project )         self assertequals(timesheet1 employee id  self empl employee   employee one current user )            employee 1 cannot log timesheet employee 2         self assertraises(accesserror)              timesheet2   timesheet sudo(self user employee id) create(                   project id   self project customer id                   task id   self task1 id                   name    second timesheet employee 2                    unit amount   3                   employee id   self empl employee2 id               )            manager log timesheet employee 2         timesheet3   timesheet sudo(self user manager id) create(               project id   self project customer id               task id   self task1 id               name    second timesheet employee 2                unit amount   7               employee id   self empl employee2 id           )         timesheet3  onchange employee id()         self assertequals(timesheet3 user id  self user employee2   timesheet user one linked given employee )      def test log access rights(self)              test access rights   user update timesheets  manager change               employee 1 log timesheet task 1         timesheet   self env  account analytic line           timesheet1   timesheet sudo(self user employee id) create(               project id   self project customer id               task id   self task1 id               name    first timesheet                unit amount   4           )           employee 2 try modify         self assertraises(accesserror)              timesheet1 sudo(self user employee2 id) write(                   name    try update timesheet                    unit amount   2               )           manager modify timesheet         timesheet1 sudo(self user manager id) write(               unit amount   8               employee id   self empl employee2 id           )         self assertequals(timesheet1 user id  self user employee2   changing timesheet employee change related user )      def test transfert project(self)              test transfert task timesheet another project            coding  utf 8        part odoo  see license file full copyright licensing details     users    employees    employee 1 log timesheet task 1    employee 1 cannot log timesheet employee 2    manager log timesheet employee 2    employee 1 log timesheet task 1    employee 2 try modify    manager modify timesheet    create second project    employee 1 log timesheet task 1    change project task 1    forbidden set task timesheet without project ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests.common import TransactionCase\nfrom odoo.exceptions import AccessError, UserError\n\n\nclass TestCommonTimesheet(TransactionCase):\n\n    def setUp(self):\n        super(TestCommonTimesheet, self).setUp()\n\n        self.project_customer = self.env['project.project'].create({\n            'name': 'Project X',\n            'allow_timesheets': True,\n        })\n        self.task1 = self.env['project.task'].create({\n            'name': 'Task One',\n            'priority': '0',\n            'kanban_state': 'normal',\n            'project_id': self.project_customer.id,\n        })\n        self.task2 = self.env['project.task'].create({\n            'name': 'Task Two',\n            'priority': '1',\n            'kanban_state': 'done',\n            'project_id': self.project_customer.id,\n        })\n        # users\n        self.user_employee = self.env['res.users'].create({\n            'name': 'User Employee',\n            'login': 'user_employee',\n            'email': 'useremployee@test.com',\n            'groups_id': [(4, self.ref('hr_timesheet.group_hr_timesheet_user'))],\n        })\n        self.user_employee2 = self.env['res.users'].create({\n            'name': 'User Employee 2',\n            'login': 'user_employee2',\n            'email': 'useremployee2@test.com',\n            'groups_id': [(4, self.ref('hr_timesheet.group_hr_timesheet_user'))],\n        })\n        self.user_manager = self.env['res.users'].create({\n            'name': 'User Officer',\n            'login': 'user_manager',\n            'email': 'usermanager@test.com',\n            'groups_id': [(4, self.ref('hr_timesheet.group_timesheet_manager'))],\n        })\n        # employees\n        self.empl_employee = self.env['hr.employee'].create({\n            'name': 'User Empl Employee',\n            'user_id': self.user_employee.id,\n        })\n        self.empl_employee2 = self.env['hr.employee'].create({\n            'name': 'User Empl Employee 2',\n            'user_id': self.user_employee2.id,\n        })\n        self.empl_manager = self.env['hr.employee'].create({\n            'name': 'User Empl Officer',\n            'user_id': self.user_manager.id,\n        })\n\n\nclass TestTimesheet(TestCommonTimesheet):\n\n    def test_log_timesheet(self):\n        \"\"\" Test when log timesheet : check analytic account, user and employee are correctly set. \"\"\"\n        Timesheet = self.env['account.analytic.line']\n        # employee 1 log some timesheet on task 1\n        timesheet1 = Timesheet.sudo(self.user_employee.id).create({\n            'project_id': self.project_customer.id,\n            'task_id': self.task1.id,\n            'name': 'my first timesheet',\n            'unit_amount': 4,\n        })\n        self.assertEquals(timesheet1.account_id, self.project_customer.analytic_account_id, 'Analytic account should be the same as the project')\n        self.assertEquals(timesheet1.employee_id, self.empl_employee, 'Employee should be the one of the current user')\n\n        # employee 1 cannot log timesheet for employee 2\n        with self.assertRaises(AccessError):\n            timesheet2 = Timesheet.sudo(self.user_employee.id).create({\n                'project_id': self.project_customer.id,\n                'task_id': self.task1.id,\n                'name': 'a second timesheet but for employee 2',\n                'unit_amount': 3,\n                'employee_id': self.empl_employee2.id,\n            })\n\n        # manager log timesheet for employee 2\n        timesheet3 = Timesheet.sudo(self.user_manager.id).create({\n            'project_id': self.project_customer.id,\n            'task_id': self.task1.id,\n            'name': 'a second timesheet but for employee 2',\n            'unit_amount': 7,\n            'employee_id': self.empl_employee2.id,\n        })\n        timesheet3._onchange_employee_id()\n        self.assertEquals(timesheet3.user_id, self.user_employee2, 'Timesheet user should be the one linked to the given employee')\n\n    def test_log_access_rights(self):\n        \"\"\" Test access rights : user can update its own timesheets only, and manager can change all \"\"\"\n        # employee 1 log some timesheet on task 1\n        Timesheet = self.env['account.analytic.line']\n        timesheet1 = Timesheet.sudo(self.user_employee.id).create({\n            'project_id': self.project_customer.id,\n            'task_id': self.task1.id,\n            'name': 'my first timesheet',\n            'unit_amount': 4,\n        })\n        # then employee 2 try to modify it\n        with self.assertRaises(AccessError):\n            timesheet1.sudo(self.user_employee2.id).write({\n                'name': 'i try to update this timesheet',\n                'unit_amount': 2,\n            })\n        # manager can modify all timesheet\n        timesheet1.sudo(self.user_manager.id).write({\n            'unit_amount': 8,\n            'employee_id': self.empl_employee2.id,\n        })\n        self.assertEquals(timesheet1.user_id, self.user_employee2, 'Changing timesheet employee should change the related user')\n\n    def test_transfert_project(self):\n        \"\"\" Test transfert task with timesheet to another project \"\"\"\n        Timesheet = self.env['account.analytic.line']\n        # create a second project\n        self.project_customer2 = self.env['project.project'].create({\n            'name': 'Project NUMBER DEUX',\n            'allow_timesheets': True,\n        })\n        # employee 1 log some timesheet on task 1\n        Timesheet.create({\n            'project_id': self.project_customer.id,\n            'task_id': self.task1.id,\n            'name': 'my first timesheet',\n            'unit_amount': 4,\n        })\n\n        timesheet_count1 = Timesheet.search_count([('project_id', '=', self.project_customer.id)])\n        timesheet_count2 = Timesheet.search_count([('project_id', '=', self.project_customer2.id)])\n        self.assertEquals(timesheet_count1, 1, \"One timesheet in project 1\")\n        self.assertEquals(timesheet_count2, 0, \"No timesheet in project 2\")\n        self.assertEquals(len(self.task1.timesheet_ids), 1, \"The timesheet should be linked to task 1\")\n\n        # change project of task 1\n        self.task1.write({\n            'project_id': self.project_customer2.id\n        })\n\n        timesheet_count1 = Timesheet.search_count([('project_id', '=', self.project_customer.id)])\n        timesheet_count2 = Timesheet.search_count([('project_id', '=', self.project_customer2.id)])\n        self.assertEquals(timesheet_count1, 0, \"No timesheet in project 1\")\n        self.assertEquals(timesheet_count2, 1, \"One timesheet in project 2\")\n        self.assertEquals(len(self.task1.timesheet_ids), 1, \"The timesheet should be linked to task 1\")\n\n        # it is forbidden to set a task with timesheet without project\n        with self.assertRaises(UserError):\n            self.task1.write({\n                'project_id': False\n            })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_timesheet.py", "id": "d8cd207e7959fb77176710292738a7fb", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_timesheet/tests/test_timesheet.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}