{"author": "spotify", "code": " -*- coding: utf-8 -*-\n\n Copyright 2012-2015 Spotify AB\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\"\"\"\nYou can run this example like this:\n\n    .. code:: console\n\n            $ rm -rf '/tmp/bar'\n            $ luigi --module examples.foo examples.Foo --workers 2 --local-scheduler\n\n\"\"\"\n\nfrom __future__ import print_function\nimport time\n\nimport luigi\n\n\nclass Foo(luigi.WrapperTask):\n    task_namespace = 'examples'\n\n    def run(self):\n        print(\"Running Foo\")\n\n    def requires(self):\n        for i in range(10):\n            yield Bar(i)\n\n\nclass Bar(luigi.Task):\n    task_namespace = 'examples'\n    num = luigi.IntParameter()\n\n    def run(self):\n        time.sleep(1)\n        self.output().open('w').close()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`~luigi.target.Target`)\n        \"\"\"\n        time.sleep(1)\n        return luigi.LocalTarget('/tmp/bar/%d' % self.num)\n", "comments": "    you run example like          code   console                rm  rf   tmp bar                luigi   module examples foo examples foo   workers 2   local scheduler         future   import print function import time  import luigi   class foo(luigi wrappertask)      task namespace    examples       def run(self)          print( running foo )      def requires(self)          range(10)              yield bar(i)   class bar(luigi task)      task namespace    examples      num   luigi intparameter()      def run(self)          time sleep(1)         self output() open( w ) close()      def output(self)                      returns target output task            return  target output task           rtype  object ( py class   luigi target target )                    coding  utf 8           copyright 2012 2015 spotify ab       licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license       http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\"\"\"\nYou can run this example like this:\n\n    .. code:: console\n\n            $ rm -rf '/tmp/bar'\n            $ luigi --module examples.foo examples.Foo --workers 2 --local-scheduler\n\n\"\"\"\n\nfrom __future__ import print_function\nimport time\n\nimport luigi\n\n\nclass Foo(luigi.WrapperTask):\n    task_namespace = 'examples'\n\n    def run(self):\n        print(\"Running Foo\")\n\n    def requires(self):\n        for i in range(10):\n            yield Bar(i)\n\n\nclass Bar(luigi.Task):\n    task_namespace = 'examples'\n    num = luigi.IntParameter()\n\n    def run(self):\n        time.sleep(1)\n        self.output().open('w').close()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`~luigi.target.Target`)\n        \"\"\"\n        time.sleep(1)\n        return luigi.LocalTarget('/tmp/bar/%d' % self.num)\n", "description": "Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in. ", "file_name": "foo.py", "id": "99282fc7c51c23b1899fafcebc550519", "language": "Python", "project_name": "luigi", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/spotify-luigi/spotify-luigi-3cf763d/examples/foo.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:25Z", "url": "https://github.com/spotify/luigi", "wiki": false}