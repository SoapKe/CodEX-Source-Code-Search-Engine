{"author": "jakubroztocil", "code": "import os\nimport time\n\nimport pytest\nimport mock\nfrom requests.structures import CaseInsensitiveDict\n\nfrom httpie.compat import urlopen\nfrom httpie.downloads import (\n    parse_content_range, filename_from_content_disposition, filename_from_url,\n    get_unique_filename, ContentRangeError, Downloader,\n)\nfrom utils import http, MockEnvironment\n\n\nclass Response(object):\n    \n    def __init__(self, url, headers={}, status_code=200):\n        self.url = url\n        self.headers = CaseInsensitiveDict(headers)\n        self.status_code = status_code\n\n\nclass TestDownloadUtils:\n    def test_Content_Range_parsing(self):\n        parse = parse_content_range\n\n        assert parse('bytes 100-199/200', 100) == 200\n        assert parse('bytes 100-199/*', 100) == 200\n\n        \n        pytest.raises(ContentRangeError, parse, None, 100)\n\n        \n        pytest.raises(ContentRangeError, parse, 'beers 100-199/*', 100)\n\n        \n        pytest.raises(ContentRangeError, parse, 'bytes 100-199/*', 99)\n\n        \n        pytest.raises(ContentRangeError, parse, 'bytes 100-199/199', 100)\n\n        \n        pytest.raises(ContentRangeError, parse, 'bytes 100-99/199', 100)\n\n        \n        pytest.raises(ContentRangeError, parse, 'bytes 100-100/*', 100)\n\n    @pytest.mark.parametrize('header, expected_filename', [\n        ('attachment; filename=hello-WORLD_123.txt', 'hello-WORLD_123.txt'),\n        ('attachment; filename=\".hello-WORLD_123.txt\"', 'hello-WORLD_123.txt'),\n        ('attachment; filename=\"white space.txt\"', 'white space.txt'),\n        (r'attachment; filename=\"\\\"quotes\\\".txt\"', '\"quotes\".txt'),\n        ('attachment; filename=/etc/hosts', 'hosts'),\n        ('attachment; filename=', None)\n    ])\n    def test_Content_Disposition_parsing(self, header, expected_filename):\n        assert filename_from_content_disposition(header) == expected_filename\n\n    def test_filename_from_url(self):\n        assert 'foo.txt' == filename_from_url(\n            url='http://example.org/foo',\n            content_type='text/plain'\n        )\n        assert 'foo.html' == filename_from_url(\n            url='http://example.org/foo',\n            content_type='text/html; charset=utf8'\n        )\n        assert 'foo' == filename_from_url(\n            url='http://example.org/foo',\n            content_type=None\n        )\n        assert 'foo' == filename_from_url(\n            url='http://example.org/foo',\n            content_type='x-foo/bar'\n        )\n\n    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            \n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            \n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            \n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            \n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            \n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual\n\n\nclass TestDownloads:\n    \n\n    def test_actual_download(self, httpbin_both, httpbin):\n        robots_txt = '/robots.txt'\n        body = urlopen(httpbin + robots_txt).read().decode()\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--download', httpbin_both.url + robots_txt, env=env)\n        assert 'Downloading' in r.stderr\n        assert '[K' in r.stderr\n        assert 'Done' in r.stderr\n        assert body == r\n\n    def test_download_with_Content_Length(self, httpbin_both):\n        devnull = open(os.devnull, 'w')\n        downloader = Downloader(output_file=devnull, progress_file=devnull)\n        downloader.start(Response(\n            url=httpbin_both.url + '/',\n            headers={'Content-Length': 10}\n        ))\n        time.sleep(1.1)\n        downloader.chunk_downloaded(b'12345')\n        time.sleep(1.1)\n        downloader.chunk_downloaded(b'12345')\n        downloader.finish()\n        assert not downloader.interrupted\n\n    def test_download_no_Content_Length(self, httpbin_both):\n        devnull = open(os.devnull, 'w')\n        downloader = Downloader(output_file=devnull, progress_file=devnull)\n        downloader.start(Response(url=httpbin_both.url + '/'))\n        time.sleep(1.1)\n        downloader.chunk_downloaded(b'12345')\n        downloader.finish()\n        assert not downloader.interrupted\n\n    def test_download_interrupted(self, httpbin_both):\n        devnull = open(os.devnull, 'w')\n        downloader = Downloader(output_file=devnull, progress_file=devnull)\n        downloader.start(Response(\n            url=httpbin_both.url + '/',\n            headers={'Content-Length': 5}\n        ))\n        downloader.chunk_downloaded(b'1234')\n        downloader.finish()\n        assert downloader.interrupted\n", "comments": "# noinspection PyDefaultArgument\n# missing\n# syntax error\n# unexpected range\n# invalid instance-length\n# invalid byte-range-resp-spec\n# invalid byte-range-resp-spec\n# Simple\n# Trim\n# Trim before ext\n# Trim at the end\n# noinspection PyUnresolvedReferences,PyUnusedLocal\n# TODO: more tests\n", "content": "import os\nimport time\n\nimport pytest\nimport mock\nfrom requests.structures import CaseInsensitiveDict\n\nfrom httpie.compat import urlopen\nfrom httpie.downloads import (\n    parse_content_range, filename_from_content_disposition, filename_from_url,\n    get_unique_filename, ContentRangeError, Downloader,\n)\nfrom utils import http, MockEnvironment\n\n\nclass Response(object):\n    # noinspection PyDefaultArgument\n    def __init__(self, url, headers={}, status_code=200):\n        self.url = url\n        self.headers = CaseInsensitiveDict(headers)\n        self.status_code = status_code\n\n\nclass TestDownloadUtils:\n    def test_Content_Range_parsing(self):\n        parse = parse_content_range\n\n        assert parse('bytes 100-199/200', 100) == 200\n        assert parse('bytes 100-199/*', 100) == 200\n\n        # missing\n        pytest.raises(ContentRangeError, parse, None, 100)\n\n        # syntax error\n        pytest.raises(ContentRangeError, parse, 'beers 100-199/*', 100)\n\n        # unexpected range\n        pytest.raises(ContentRangeError, parse, 'bytes 100-199/*', 99)\n\n        # invalid instance-length\n        pytest.raises(ContentRangeError, parse, 'bytes 100-199/199', 100)\n\n        # invalid byte-range-resp-spec\n        pytest.raises(ContentRangeError, parse, 'bytes 100-99/199', 100)\n\n        # invalid byte-range-resp-spec\n        pytest.raises(ContentRangeError, parse, 'bytes 100-100/*', 100)\n\n    @pytest.mark.parametrize('header, expected_filename', [\n        ('attachment; filename=hello-WORLD_123.txt', 'hello-WORLD_123.txt'),\n        ('attachment; filename=\".hello-WORLD_123.txt\"', 'hello-WORLD_123.txt'),\n        ('attachment; filename=\"white space.txt\"', 'white space.txt'),\n        (r'attachment; filename=\"\\\"quotes\\\".txt\"', '\"quotes\".txt'),\n        ('attachment; filename=/etc/hosts', 'hosts'),\n        ('attachment; filename=', None)\n    ])\n    def test_Content_Disposition_parsing(self, header, expected_filename):\n        assert filename_from_content_disposition(header) == expected_filename\n\n    def test_filename_from_url(self):\n        assert 'foo.txt' == filename_from_url(\n            url='http://example.org/foo',\n            content_type='text/plain'\n        )\n        assert 'foo.html' == filename_from_url(\n            url='http://example.org/foo',\n            content_type='text/html; charset=utf8'\n        )\n        assert 'foo' == filename_from_url(\n            url='http://example.org/foo',\n            content_type=None\n        )\n        assert 'foo' == filename_from_url(\n            url='http://example.org/foo',\n            content_type='x-foo/bar'\n        )\n\n    @pytest.mark.parametrize(\n        'orig_name, unique_on_attempt, expected',\n        [\n            # Simple\n            ('foo.bar', 0, 'foo.bar'),\n            ('foo.bar', 1, 'foo.bar-1'),\n            ('foo.bar', 10, 'foo.bar-10'),\n            # Trim\n            ('A' * 20, 0, 'A' * 10),\n            ('A' * 20, 1, 'A' * 8 + '-1'),\n            ('A' * 20, 10, 'A' * 7 + '-10'),\n            # Trim before ext\n            ('A' * 20 + '.txt', 0, 'A' * 6 + '.txt'),\n            ('A' * 20 + '.txt', 1, 'A' * 4 + '.txt-1'),\n            # Trim at the end\n            ('foo.' + 'A' * 20, 0, 'foo.' + 'A' * 6),\n            ('foo.' + 'A' * 20, 1, 'foo.' + 'A' * 4 + '-1'),\n            ('foo.' + 'A' * 20, 10, 'foo.' + 'A' * 3 + '-10'),\n        ]\n    )\n    @mock.patch('httpie.downloads.get_filename_max_length')\n    def test_unique_filename(self, get_filename_max_length,\n                             orig_name, unique_on_attempt,\n                             expected):\n\n        def attempts(unique_on_attempt=0):\n            # noinspection PyUnresolvedReferences,PyUnusedLocal\n            def exists(filename):\n                if exists.attempt == unique_on_attempt:\n                    return False\n                exists.attempt += 1\n                return True\n\n            exists.attempt = 0\n            return exists\n\n        get_filename_max_length.return_value = 10\n\n        actual = get_unique_filename(orig_name, attempts(unique_on_attempt))\n        assert expected == actual\n\n\nclass TestDownloads:\n    # TODO: more tests\n\n    def test_actual_download(self, httpbin_both, httpbin):\n        robots_txt = '/robots.txt'\n        body = urlopen(httpbin + robots_txt).read().decode()\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--download', httpbin_both.url + robots_txt, env=env)\n        assert 'Downloading' in r.stderr\n        assert '[K' in r.stderr\n        assert 'Done' in r.stderr\n        assert body == r\n\n    def test_download_with_Content_Length(self, httpbin_both):\n        devnull = open(os.devnull, 'w')\n        downloader = Downloader(output_file=devnull, progress_file=devnull)\n        downloader.start(Response(\n            url=httpbin_both.url + '/',\n            headers={'Content-Length': 10}\n        ))\n        time.sleep(1.1)\n        downloader.chunk_downloaded(b'12345')\n        time.sleep(1.1)\n        downloader.chunk_downloaded(b'12345')\n        downloader.finish()\n        assert not downloader.interrupted\n\n    def test_download_no_Content_Length(self, httpbin_both):\n        devnull = open(os.devnull, 'w')\n        downloader = Downloader(output_file=devnull, progress_file=devnull)\n        downloader.start(Response(url=httpbin_both.url + '/'))\n        time.sleep(1.1)\n        downloader.chunk_downloaded(b'12345')\n        downloader.finish()\n        assert not downloader.interrupted\n\n    def test_download_interrupted(self, httpbin_both):\n        devnull = open(os.devnull, 'w')\n        downloader = Downloader(output_file=devnull, progress_file=devnull)\n        downloader.start(Response(\n            url=httpbin_both.url + '/',\n            headers={'Content-Length': 5}\n        ))\n        downloader.chunk_downloaded(b'1234')\n        downloader.finish()\n        assert downloader.interrupted\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_downloads.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/tests/test_downloads.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}