{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Simon Dodsley (simon@purestorage.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: purefa_hg\nversion_added: '2.4'\nshort_description: Manage hostgroups on Pure Storage FlashArrays\ndescription:\n- Create, delete or modifiy hostgroups on Pure Storage FlashArrays.\nauthor:\n- Simon Dodsley (@sdodsley)\noptions:\n  hostgroup:\n    description:\n    - The name of the hostgroup.\n    required: true\n  state:\n    description:\n    - Define whether the hostgroup should exist or not.\n    default: present\n    choices: [ absent, present ]\n  host:\n    description:\n    - List of existing hosts to add to hostgroup.\n  volume:\n    description:\n    - List of existing volumes to add to hostgroup.\nextends_documentation_fragment:\n- purestorage.fa\n'''\n\nEXAMPLES = r'''\n- name: Create new hostgroup\n  purefa_hg:\n    hostgroup: foo\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n\n- name: Delete hostgroup\n  purefa_hg:\n    hostgroup: foo\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n    state: absent\n\n- name: Create host group with hosts and volumes\n  purefa_hg:\n    hostgroup: bar\n    host:\n      - host1\n      - host2\n    volume:\n      - vol1\n      - vol2\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n'''\n\nRETURN = r'''\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.pure import get_system, purefa_argument_spec\n\n\ntry:\n    from purestorage import purestorage\n    HAS_PURESTORAGE = True\nexcept ImportError:\n    HAS_PURESTORAGE = False\n\n\ndef get_hostgroup(module, array):\n\n    hostgroup = None\n\n    for h in array.list_hgroups():\n        if h[\"name\"] == module.params['hostgroup']:\n            hostgroup = h\n            break\n\n    return hostgroup\n\n\ndef make_hostgroup(module, array):\n\n    changed = True\n\n    if not module.check_mode:\n        host = array.create_hgroup(module.params['hostgroup'])\n        if module.params['host']:\n            array.set_hgroup(module.params['hostgroup'], hostlist=module.params['host'])\n        if module.params['volume']:\n            for v in module.params['volume']:\n                array.connect_hgroup(module.params['hostgroup'], v)\n    module.exit_json(changed=changed)\n\n\ndef update_hostgroup(module, array):\n    changed = False\n    hostgroup = module.params['hostgroup']\n    module.exit_json(changed=changed)\n\n\ndef delete_hostgroup(module, array):\n    changed = True\n    if not module.check_mode:\n        for vol in array.list_hgroup_connections(module.params['hostgroup']):\n            array.disconnect_hgroup(module.params['hostgroup'], vol[\"vol\"])\n        host = array.get_hgroup(module.params['hostgroup'])\n        array.set_hgroup(module.params['hostgroup'], remhostlist=host['hosts'])\n        array.delete_hgroup(module.params['hostgroup'])\n    module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = purefa_argument_spec()\n    argument_spec.update(dict(\n        hostgroup=dict(type='str', required=True),\n        state=dict(type='str', default='present', choices=['absent', 'present']),\n        host=dict(type='list'),\n        volume=dict(type='list'),\n    ))\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_PURESTORAGE:\n        module.fail_json(msg='purestorage sdk is required for this module in host')\n\n    state = module.params['state']\n    array = get_system(module)\n    hostgroup = get_hostgroup(module, array)\n\n    if module.params['host']:\n        try:\n            for h in module.params['host']:\n                array.get_host(h)\n        except:\n            module.fail_json(msg='Host not found')\n\n    if module.params['volume']:\n        try:\n            for v in module.params['volume']:\n                array.get_volume(v)\n        except:\n            module.fail_json(msg='Volume not found')\n\n    if hostgroup and state == 'present':\n        update_hostgroup(module, array)\n    elif hostgroup and state == 'absent':\n        delete_hostgroup(module, array)\n    elif hostgroup is None and state == 'absent':\n        module.exit_json(changed=False)\n    else:\n        make_hostgroup(module, array)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  purefa hg version added   2 4  short description  manage hostgroups pure storage flasharrays description    create  delete modifiy hostgroups pure storage flasharrays  author    simon dodsley ( sdodsley) options    hostgroup      description        the name hostgroup      required  true   state      description        define whether hostgroup exist      default  present     choices    absent  present     host      description        list existing hosts add hostgroup    volume      description        list existing volumes add hostgroup  extends documentation fragment    purestorage fa      examples   r      name  create new hostgroup   purefa hg      hostgroup  foo     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592    this disconnect hosts volumes hostgroup   name  delete hostgroup   purefa hg      hostgroup  foo     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592     state  absent    name  create host group hosts volumes   purefa hg      hostgroup  bar     host          host1         host2     volume          vol1         vol2     fa url  10 10 10 2     api token  e31060a7 21fc e277 6240 25983c6c4592      return   r            usr bin python        coding  utf 8        (c) 2017  simon dodsley (simon purestorage com)    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    this disconnect hosts volumes hostgroup ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Simon Dodsley (simon@purestorage.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: purefa_hg\nversion_added: '2.4'\nshort_description: Manage hostgroups on Pure Storage FlashArrays\ndescription:\n- Create, delete or modifiy hostgroups on Pure Storage FlashArrays.\nauthor:\n- Simon Dodsley (@sdodsley)\noptions:\n  hostgroup:\n    description:\n    - The name of the hostgroup.\n    required: true\n  state:\n    description:\n    - Define whether the hostgroup should exist or not.\n    default: present\n    choices: [ absent, present ]\n  host:\n    description:\n    - List of existing hosts to add to hostgroup.\n  volume:\n    description:\n    - List of existing volumes to add to hostgroup.\nextends_documentation_fragment:\n- purestorage.fa\n'''\n\nEXAMPLES = r'''\n- name: Create new hostgroup\n  purefa_hg:\n    hostgroup: foo\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n\n# This will disconnect all hosts and volumes in the hostgroup\n- name: Delete hostgroup\n  purefa_hg:\n    hostgroup: foo\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n    state: absent\n\n- name: Create host group with hosts and volumes\n  purefa_hg:\n    hostgroup: bar\n    host:\n      - host1\n      - host2\n    volume:\n      - vol1\n      - vol2\n    fa_url: 10.10.10.2\n    api_token: e31060a7-21fc-e277-6240-25983c6c4592\n'''\n\nRETURN = r'''\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.pure import get_system, purefa_argument_spec\n\n\ntry:\n    from purestorage import purestorage\n    HAS_PURESTORAGE = True\nexcept ImportError:\n    HAS_PURESTORAGE = False\n\n\ndef get_hostgroup(module, array):\n\n    hostgroup = None\n\n    for h in array.list_hgroups():\n        if h[\"name\"] == module.params['hostgroup']:\n            hostgroup = h\n            break\n\n    return hostgroup\n\n\ndef make_hostgroup(module, array):\n\n    changed = True\n\n    if not module.check_mode:\n        host = array.create_hgroup(module.params['hostgroup'])\n        if module.params['host']:\n            array.set_hgroup(module.params['hostgroup'], hostlist=module.params['host'])\n        if module.params['volume']:\n            for v in module.params['volume']:\n                array.connect_hgroup(module.params['hostgroup'], v)\n    module.exit_json(changed=changed)\n\n\ndef update_hostgroup(module, array):\n    changed = False\n    hostgroup = module.params['hostgroup']\n    module.exit_json(changed=changed)\n\n\ndef delete_hostgroup(module, array):\n    changed = True\n    if not module.check_mode:\n        for vol in array.list_hgroup_connections(module.params['hostgroup']):\n            array.disconnect_hgroup(module.params['hostgroup'], vol[\"vol\"])\n        host = array.get_hgroup(module.params['hostgroup'])\n        array.set_hgroup(module.params['hostgroup'], remhostlist=host['hosts'])\n        array.delete_hgroup(module.params['hostgroup'])\n    module.exit_json(changed=changed)\n\n\ndef main():\n    argument_spec = purefa_argument_spec()\n    argument_spec.update(dict(\n        hostgroup=dict(type='str', required=True),\n        state=dict(type='str', default='present', choices=['absent', 'present']),\n        host=dict(type='list'),\n        volume=dict(type='list'),\n    ))\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_PURESTORAGE:\n        module.fail_json(msg='purestorage sdk is required for this module in host')\n\n    state = module.params['state']\n    array = get_system(module)\n    hostgroup = get_hostgroup(module, array)\n\n    if module.params['host']:\n        try:\n            for h in module.params['host']:\n                array.get_host(h)\n        except:\n            module.fail_json(msg='Host not found')\n\n    if module.params['volume']:\n        try:\n            for v in module.params['volume']:\n                array.get_volume(v)\n        except:\n            module.fail_json(msg='Volume not found')\n\n    if hostgroup and state == 'present':\n        update_hostgroup(module, array)\n    elif hostgroup and state == 'absent':\n        delete_hostgroup(module, array)\n    elif hostgroup is None and state == 'absent':\n        module.exit_json(changed=False)\n    else:\n        make_hostgroup(module, array)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "purefa_hg.py", "id": "b65f102e1ece660fc0367ca2e953ccae", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/purestorage/purefa_hg.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}