{"author": "idank", "code": "import logging\n\nfrom flask import render_template, request, abort, redirect, url_for, json\n\nfrom explainshell import manager, config, store\nfrom explainshell.web import app, helpers\n\nlogger = logging.getLogger(__name__)\n\n@app.route('/debug')\ndef debug():\n    s = store.store('explainshell', config.MONGO_URI)\n    d = {'manpages' : []}\n    for mp in s:\n        synopsis = ''\n        if mp.synopsis:\n            synopsis = mp.synopsis[:20]\n        dd = {'name' : mp.name, 'synopsis' : synopsis}\n        l = []\n        for o in mp.options:\n            l.append(str(o))\n        dd['options'] = ', '.join(l)\n        d['manpages'].append(dd)\n    d['manpages'].sort(key=lambda d: d['name'].lower())\n    return render_template('debug.html', d=d)\n\ndef _convertvalue(value):\n    if isinstance(value, list):\n        return [s.strip() for s in value]\n    elif value.lower() == 'true':\n        return True\n    elif value:\n        return value.strip()\n    return False\n\n@app.route('/debug/tag/<source>', methods=['GET', 'POST'])\ndef tag(source):\n    mngr = manager.manager(config.MONGO_URI, 'explainshell', [], False, False)\n    s = mngr.store\n    m = s.findmanpage(source)[0]\n    assert m\n\n    if 'paragraphs' in request.form:\n        paragraphs = json.loads(request.form['paragraphs'])\n        mparagraphs = []\n        for d in paragraphs:\n            idx = d['idx']\n            text = d['text']\n            section = d['section']\n            short = [s.strip() for s in d['short']]\n            long = [s.strip() for s in d['long']]\n            expectsarg = _convertvalue(d['expectsarg'])\n            nestedcommand = _convertvalue(d['nestedcommand'])\n            if isinstance(nestedcommand, str):\n                nestedcommand = [nestedcommand]\n            elif nestedcommand is True:\n                logger.error('nestedcommand %r must be a string or list', nestedcommand)\n                abort(503)\n            argument = d['argument']\n            if not argument:\n                argument = None\n            p = store.paragraph(idx, text, section, d['is_option'])\n            if d['is_option'] and (short or long or argument):\n                p = store.option(p, short, long, expectsarg, argument, nestedcommand)\n            mparagraphs.append(p)\n\n        if request.form.get('nestedcommand', '').lower() == 'true':\n            m.nestedcommand = True\n        else:\n            m.nestedcommand = False\n        m = mngr.edit(m, mparagraphs)\n        if m:\n            return redirect(url_for('explain', cmd=m.name))\n        else:\n            abort(503)\n    else:\n        helpers.convertparagraphs(m)\n        for p in m.paragraphs:\n            if isinstance(p, store.option):\n                if isinstance(p.expectsarg, list):\n                    p.expectsarg = ', '.join(p.expectsarg)\n                if isinstance(p.nestedcommand, list):\n                    p.nestedcommand = ', '.join(p.nestedcommand)\n\n        return render_template('tagger.html', m=m)\n", "comments": "", "content": "import logging\n\nfrom flask import render_template, request, abort, redirect, url_for, json\n\nfrom explainshell import manager, config, store\nfrom explainshell.web import app, helpers\n\nlogger = logging.getLogger(__name__)\n\n@app.route('/debug')\ndef debug():\n    s = store.store('explainshell', config.MONGO_URI)\n    d = {'manpages' : []}\n    for mp in s:\n        synopsis = ''\n        if mp.synopsis:\n            synopsis = mp.synopsis[:20]\n        dd = {'name' : mp.name, 'synopsis' : synopsis}\n        l = []\n        for o in mp.options:\n            l.append(str(o))\n        dd['options'] = ', '.join(l)\n        d['manpages'].append(dd)\n    d['manpages'].sort(key=lambda d: d['name'].lower())\n    return render_template('debug.html', d=d)\n\ndef _convertvalue(value):\n    if isinstance(value, list):\n        return [s.strip() for s in value]\n    elif value.lower() == 'true':\n        return True\n    elif value:\n        return value.strip()\n    return False\n\n@app.route('/debug/tag/<source>', methods=['GET', 'POST'])\ndef tag(source):\n    mngr = manager.manager(config.MONGO_URI, 'explainshell', [], False, False)\n    s = mngr.store\n    m = s.findmanpage(source)[0]\n    assert m\n\n    if 'paragraphs' in request.form:\n        paragraphs = json.loads(request.form['paragraphs'])\n        mparagraphs = []\n        for d in paragraphs:\n            idx = d['idx']\n            text = d['text']\n            section = d['section']\n            short = [s.strip() for s in d['short']]\n            long = [s.strip() for s in d['long']]\n            expectsarg = _convertvalue(d['expectsarg'])\n            nestedcommand = _convertvalue(d['nestedcommand'])\n            if isinstance(nestedcommand, str):\n                nestedcommand = [nestedcommand]\n            elif nestedcommand is True:\n                logger.error('nestedcommand %r must be a string or list', nestedcommand)\n                abort(503)\n            argument = d['argument']\n            if not argument:\n                argument = None\n            p = store.paragraph(idx, text, section, d['is_option'])\n            if d['is_option'] and (short or long or argument):\n                p = store.option(p, short, long, expectsarg, argument, nestedcommand)\n            mparagraphs.append(p)\n\n        if request.form.get('nestedcommand', '').lower() == 'true':\n            m.nestedcommand = True\n        else:\n            m.nestedcommand = False\n        m = mngr.edit(m, mparagraphs)\n        if m:\n            return redirect(url_for('explain', cmd=m.name))\n        else:\n            abort(503)\n    else:\n        helpers.convertparagraphs(m)\n        for p in m.paragraphs:\n            if isinstance(p, store.option):\n                if isinstance(p.expectsarg, list):\n                    p.expectsarg = ', '.join(p.expectsarg)\n                if isinstance(p.nestedcommand, list):\n                    p.nestedcommand = ', '.join(p.nestedcommand)\n\n        return render_template('tagger.html', m=m)\n", "description": "match command-line arguments to their help text", "file_name": "debugviews.py", "id": "afb02dd3d791b77f2bc266dd8ef1917e", "language": "Python", "project_name": "explainshell", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/idank-explainshell/idank-explainshell-697e1d1/explainshell/web/debugviews.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:42:42Z", "url": "https://github.com/idank/explainshell", "wiki": true}