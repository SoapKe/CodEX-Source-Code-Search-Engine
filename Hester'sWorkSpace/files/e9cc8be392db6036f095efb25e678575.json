{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport logging\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\nfrom odoo.addons.iap.models import iap\n\n_logger = logging.getLogger(__name__)\n\ntry:\n    import phonenumbers\n    _sms_phonenumbers_lib_imported = True\n\nexcept ImportError:\n    _sms_phonenumbers_lib_imported = False\n    _logger.info(\n        \"The `phonenumbers` Python module is not available. \"\n        \"Phone number validation will be skipped. \"\n        \"Try `pip3 install phonenumbers` to install it.\"\n    )\n\n\nclass SendSMS(models.TransientModel):\n    _name = 'sms.send_sms'\n\n    recipients = fields.Char('Recipients', required=True)\n    message = fields.Text('Message', required=True)\n\n    def _phone_get_country(self, partner):\n        if 'country_id' in partner:\n            return partner.country_id\n        return self.env.user.company_id.country_id\n\n    def _sms_sanitization(self, partner, field_name):\n        number = partner[field_name]\n        if number and _sms_phonenumbers_lib_imported:\n            country = self._phone_get_country(partner)\n            country_code = country.code if country else None\n            try:\n                phone_nbr = phonenumbers.parse(number, region=country_code, keep_raw_input=True)\n            except phonenumbers.phonenumberutil.NumberParseException:\n                return number\n            if not phonenumbers.is_possible_number(phone_nbr) or not phonenumbers.is_valid_number(phone_nbr):\n                return number\n            phone_fmt = phonenumbers.PhoneNumberFormat.INTERNATIONAL\n            return phonenumbers.format_number(phone_nbr, phone_fmt).replace(' ', '')\n        else:\n            return number\n\n    def _get_records(self, model):\n        if self.env.context.get('active_domain'):\n            records = model.search(self.env.context.get('active_domain'))\n        elif self.env.context.get('active_ids'):\n            records = model.browse(self.env.context.get('active_ids', []))\n        else:\n            records = model.browse(self.env.context.get('active_id', []))\n        return records\n\n    @api.model\n    def default_get(self, fields):\n        result = super(SendSMS, self).default_get(fields)\n\n        active_model = self.env.context.get('active_model')\n        model = self.env[active_model]\n\n        records = self._get_records(model)\n        if getattr(records, '_get_default_sms_recipients'):\n            partners = records._get_default_sms_recipients()\n            phone_numbers = []\n            no_phone_partners = []\n            for partner in partners:\n                number = self._sms_sanitization(partner, self.env.context.get('field_name') or 'mobile')\n                if number:\n                    phone_numbers.append(number)\n                else:\n                    no_phone_partners.append(partner.name)\n            if len(partners) > 1:\n                if no_phone_partners:\n                    raise UserError(_('Missing mobile number for %s.') % ', '.join(no_phone_partners))\n            result['recipients'] = ', '.join(phone_numbers)\n        return result\n\n    def action_send_sms(self):\n        numbers = self.recipients.split(',')\n\n        active_model = self.env.context.get('active_model')\n        model = self.env[active_model]\n        records = self._get_records(model)\n        if getattr(records, 'message_post_send_sms'):\n            records.message_post_send_sms(self.message, numbers=numbers)\n        else:\n            self.env['sms.api']._send_sms(numbers, self.message)\n        return True\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nimport logging\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\nfrom odoo.addons.iap.models import iap\n\n_logger = logging.getLogger(__name__)\n\ntry:\n    import phonenumbers\n    _sms_phonenumbers_lib_imported = True\n\nexcept ImportError:\n    _sms_phonenumbers_lib_imported = False\n    _logger.info(\n        \"The `phonenumbers` Python module is not available. \"\n        \"Phone number validation will be skipped. \"\n        \"Try `pip3 install phonenumbers` to install it.\"\n    )\n\n\nclass SendSMS(models.TransientModel):\n    _name = 'sms.send_sms'\n\n    recipients = fields.Char('Recipients', required=True)\n    message = fields.Text('Message', required=True)\n\n    def _phone_get_country(self, partner):\n        if 'country_id' in partner:\n            return partner.country_id\n        return self.env.user.company_id.country_id\n\n    def _sms_sanitization(self, partner, field_name):\n        number = partner[field_name]\n        if number and _sms_phonenumbers_lib_imported:\n            country = self._phone_get_country(partner)\n            country_code = country.code if country else None\n            try:\n                phone_nbr = phonenumbers.parse(number, region=country_code, keep_raw_input=True)\n            except phonenumbers.phonenumberutil.NumberParseException:\n                return number\n            if not phonenumbers.is_possible_number(phone_nbr) or not phonenumbers.is_valid_number(phone_nbr):\n                return number\n            phone_fmt = phonenumbers.PhoneNumberFormat.INTERNATIONAL\n            return phonenumbers.format_number(phone_nbr, phone_fmt).replace(' ', '')\n        else:\n            return number\n\n    def _get_records(self, model):\n        if self.env.context.get('active_domain'):\n            records = model.search(self.env.context.get('active_domain'))\n        elif self.env.context.get('active_ids'):\n            records = model.browse(self.env.context.get('active_ids', []))\n        else:\n            records = model.browse(self.env.context.get('active_id', []))\n        return records\n\n    @api.model\n    def default_get(self, fields):\n        result = super(SendSMS, self).default_get(fields)\n\n        active_model = self.env.context.get('active_model')\n        model = self.env[active_model]\n\n        records = self._get_records(model)\n        if getattr(records, '_get_default_sms_recipients'):\n            partners = records._get_default_sms_recipients()\n            phone_numbers = []\n            no_phone_partners = []\n            for partner in partners:\n                number = self._sms_sanitization(partner, self.env.context.get('field_name') or 'mobile')\n                if number:\n                    phone_numbers.append(number)\n                else:\n                    no_phone_partners.append(partner.name)\n            if len(partners) > 1:\n                if no_phone_partners:\n                    raise UserError(_('Missing mobile number for %s.') % ', '.join(no_phone_partners))\n            result['recipients'] = ', '.join(phone_numbers)\n        return result\n\n    def action_send_sms(self):\n        numbers = self.recipients.split(',')\n\n        active_model = self.env.context.get('active_model')\n        model = self.env[active_model]\n        records = self._get_records(model)\n        if getattr(records, 'message_post_send_sms'):\n            records.message_post_send_sms(self.message, numbers=numbers)\n        else:\n            self.env['sms.api']._send_sms(numbers, self.message)\n        return True\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "send_sms.py", "id": "e9cc8be392db6036f095efb25e678575", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sms/wizard/send_sms.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}