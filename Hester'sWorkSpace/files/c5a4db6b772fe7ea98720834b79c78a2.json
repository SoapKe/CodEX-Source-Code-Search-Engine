{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    HEADRequest,\n    KNOWN_EXTENSIONS,\n    sanitized_Request,\n    str_to_int,\n    urlencode_postdata,\n    urlhandle_detect_ext,\n)\n\n\nclass HearThisAtIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hearthis\\.at/(?P<artist>[^/]+)/(?P<title>[A-Za-z0-9\\-]+)/?$'\n    _PLAYLIST_URL = 'https://hearthis.at/playlist.php'\n    _TESTS = [{\n        'url': 'https://hearthis.at/moofi/dr-kreep',\n        'md5': 'ab6ec33c8fed6556029337c7885eb4e0',\n        'info_dict': {\n            'id': '150939',\n            'ext': 'wav',\n            'title': 'Moofi - Dr. Kreep',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1421564134,\n            'description': 'Listen to Dr. Kreep by Moofi on hearthis.at - Modular, Eurorack, Mutable Intruments Braids, Valhalla-DSP',\n            'upload_date': '20150118',\n            'comment_count': int,\n            'view_count': int,\n            'like_count': int,\n            'duration': 71,\n            'categories': ['Experimental'],\n        }\n    }, {\n        \n        'url': 'https://hearthis.at/twitchsf/dj-jim-hopkins-totally-bitchin-80s-dance-mix/',\n        'md5': '5980ceb7c461605d30f1f039df160c6e',\n        'info_dict': {\n            'id': '811296',\n            'ext': 'mp3',\n            'title': 'TwitchSF - DJ Jim Hopkins -  Totally Bitchin\\' 80\\'s Dance Mix!',\n            'description': 'Listen to DJ Jim Hopkins -  Totally Bitchin\\' 80\\'s Dance Mix! by TwitchSF on hearthis.at - Dance',\n            'upload_date': '20160328',\n            'timestamp': 1459186146,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'comment_count': int,\n            'view_count': int,\n            'like_count': int,\n            'duration': 4360,\n            'categories': ['Dance'],\n        },\n    }]\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        display_id = '{artist:s} - {title:s}'.format(**m.groupdict())\n\n        webpage = self._download_webpage(url, display_id)\n        track_id = self._search_regex(\n            r'intTrackId\\s*=\\s*(\\d+)', webpage, 'track ID')\n\n        payload = urlencode_postdata({'tracks[]': track_id})\n        req = sanitized_Request(self._PLAYLIST_URL, payload)\n        req.add_header('Content-type', 'application/x-www-form-urlencoded')\n\n        track = self._download_json(req, track_id, 'Downloading playlist')[0]\n        title = '{artist:s} - {title:s}'.format(**track)\n\n        categories = None\n        if track.get('category'):\n            categories = [track['category']]\n\n        description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        meta_span = r'<span[^>]+class=\"%s\".*?</i>([^<]+)</span>'\n        view_count = str_to_int(self._search_regex(\n            meta_span % 'plays_count', webpage, 'view count', fatal=False))\n        like_count = str_to_int(self._search_regex(\n            meta_span % 'likes_count', webpage, 'like count', fatal=False))\n        comment_count = str_to_int(self._search_regex(\n            meta_span % 'comment_count', webpage, 'comment count', fatal=False))\n        duration = str_to_int(self._search_regex(\n            r'data-length=\"(\\d+)', webpage, 'duration', fatal=False))\n        timestamp = str_to_int(self._search_regex(\n            r'<span[^>]+class=\"calctime\"[^>]+data-time=\"(\\d+)', webpage, 'timestamp', fatal=False))\n\n        formats = []\n        mp3_url = self._search_regex(\n            r'(?s)<a class=\"player-link\"\\s+(?:[a-zA-Z0-9_:-]+=\"[^\"]+\"\\s+)*?data-mp3=\"([^\"]+)\"',\n            webpage, 'mp3 URL', fatal=False)\n        if mp3_url:\n            formats.append({\n                'format_id': 'mp3',\n                'vcodec': 'none',\n                'acodec': 'mp3',\n                'url': mp3_url,\n            })\n        download_path = self._search_regex(\n            r'<a class=\"[^\"]*download_fct[^\"]*\"\\s+href=\"([^\"]+)\"',\n            webpage, 'download URL', default=None)\n        if download_path:\n            download_url = compat_urlparse.urljoin(url, download_path)\n            ext_req = HEADRequest(download_url)\n            ext_handle = self._request_webpage(\n                ext_req, display_id, note='Determining extension')\n            ext = urlhandle_detect_ext(ext_handle)\n            if ext in KNOWN_EXTENSIONS:\n                formats.append({\n                    'format_id': 'download',\n                    'vcodec': 'none',\n                    'ext': ext,\n                    'url': download_url,\n                    'preference': 2,  \n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': track_id,\n            'display_id': display_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'like_count': like_count,\n            'categories': categories,\n        }\n", "comments": "# coding: utf-8\n# 'download' link redirects to the original webpage\n# Usually better quality\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    HEADRequest,\n    KNOWN_EXTENSIONS,\n    sanitized_Request,\n    str_to_int,\n    urlencode_postdata,\n    urlhandle_detect_ext,\n)\n\n\nclass HearThisAtIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hearthis\\.at/(?P<artist>[^/]+)/(?P<title>[A-Za-z0-9\\-]+)/?$'\n    _PLAYLIST_URL = 'https://hearthis.at/playlist.php'\n    _TESTS = [{\n        'url': 'https://hearthis.at/moofi/dr-kreep',\n        'md5': 'ab6ec33c8fed6556029337c7885eb4e0',\n        'info_dict': {\n            'id': '150939',\n            'ext': 'wav',\n            'title': 'Moofi - Dr. Kreep',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1421564134,\n            'description': 'Listen to Dr. Kreep by Moofi on hearthis.at - Modular, Eurorack, Mutable Intruments Braids, Valhalla-DSP',\n            'upload_date': '20150118',\n            'comment_count': int,\n            'view_count': int,\n            'like_count': int,\n            'duration': 71,\n            'categories': ['Experimental'],\n        }\n    }, {\n        # 'download' link redirects to the original webpage\n        'url': 'https://hearthis.at/twitchsf/dj-jim-hopkins-totally-bitchin-80s-dance-mix/',\n        'md5': '5980ceb7c461605d30f1f039df160c6e',\n        'info_dict': {\n            'id': '811296',\n            'ext': 'mp3',\n            'title': 'TwitchSF - DJ Jim Hopkins -  Totally Bitchin\\' 80\\'s Dance Mix!',\n            'description': 'Listen to DJ Jim Hopkins -  Totally Bitchin\\' 80\\'s Dance Mix! by TwitchSF on hearthis.at - Dance',\n            'upload_date': '20160328',\n            'timestamp': 1459186146,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'comment_count': int,\n            'view_count': int,\n            'like_count': int,\n            'duration': 4360,\n            'categories': ['Dance'],\n        },\n    }]\n\n    def _real_extract(self, url):\n        m = re.match(self._VALID_URL, url)\n        display_id = '{artist:s} - {title:s}'.format(**m.groupdict())\n\n        webpage = self._download_webpage(url, display_id)\n        track_id = self._search_regex(\n            r'intTrackId\\s*=\\s*(\\d+)', webpage, 'track ID')\n\n        payload = urlencode_postdata({'tracks[]': track_id})\n        req = sanitized_Request(self._PLAYLIST_URL, payload)\n        req.add_header('Content-type', 'application/x-www-form-urlencoded')\n\n        track = self._download_json(req, track_id, 'Downloading playlist')[0]\n        title = '{artist:s} - {title:s}'.format(**track)\n\n        categories = None\n        if track.get('category'):\n            categories = [track['category']]\n\n        description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        meta_span = r'<span[^>]+class=\"%s\".*?</i>([^<]+)</span>'\n        view_count = str_to_int(self._search_regex(\n            meta_span % 'plays_count', webpage, 'view count', fatal=False))\n        like_count = str_to_int(self._search_regex(\n            meta_span % 'likes_count', webpage, 'like count', fatal=False))\n        comment_count = str_to_int(self._search_regex(\n            meta_span % 'comment_count', webpage, 'comment count', fatal=False))\n        duration = str_to_int(self._search_regex(\n            r'data-length=\"(\\d+)', webpage, 'duration', fatal=False))\n        timestamp = str_to_int(self._search_regex(\n            r'<span[^>]+class=\"calctime\"[^>]+data-time=\"(\\d+)', webpage, 'timestamp', fatal=False))\n\n        formats = []\n        mp3_url = self._search_regex(\n            r'(?s)<a class=\"player-link\"\\s+(?:[a-zA-Z0-9_:-]+=\"[^\"]+\"\\s+)*?data-mp3=\"([^\"]+)\"',\n            webpage, 'mp3 URL', fatal=False)\n        if mp3_url:\n            formats.append({\n                'format_id': 'mp3',\n                'vcodec': 'none',\n                'acodec': 'mp3',\n                'url': mp3_url,\n            })\n        download_path = self._search_regex(\n            r'<a class=\"[^\"]*download_fct[^\"]*\"\\s+href=\"([^\"]+)\"',\n            webpage, 'download URL', default=None)\n        if download_path:\n            download_url = compat_urlparse.urljoin(url, download_path)\n            ext_req = HEADRequest(download_url)\n            ext_handle = self._request_webpage(\n                ext_req, display_id, note='Determining extension')\n            ext = urlhandle_detect_ext(ext_handle)\n            if ext in KNOWN_EXTENSIONS:\n                formats.append({\n                    'format_id': 'download',\n                    'vcodec': 'none',\n                    'ext': ext,\n                    'url': download_url,\n                    'preference': 2,  # Usually better quality\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': track_id,\n            'display_id': display_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'like_count': like_count,\n            'categories': categories,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hearthisat.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hearthisat.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}