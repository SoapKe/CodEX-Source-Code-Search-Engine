{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_chr,\n    compat_ord,\n    compat_urllib_parse_unquote,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    urljoin,\n)\n\n\nclass BeegIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?beeg\\.com/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://beeg.com/5416503',\n        'md5': 'a1a1b1a8bc70a89e49ccfd113aed0820',\n        'info_dict': {\n            'id': '5416503',\n            'ext': 'mp4',\n            'title': 'Sultry Striptease',\n            'description': 'md5:d22219c09da287c14bed3d6c37ce4bc2',\n            'timestamp': 1391813355,\n            'upload_date': '20140207',\n            'duration': 383,\n            'tags': list,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        cpl_url = self._search_regex(\n            r'<script[^>]+src=([\"\\'])(?P<url>(?:/static|(?:https?:)?//static\\.beeg\\.com)/cpl/\\d+\\.js.*?)\\1',\n            webpage, 'cpl', default=None, group='url')\n\n        cpl_url = urljoin(url, cpl_url)\n\n        beeg_version, beeg_salt = [None] * 2\n\n        if cpl_url:\n            cpl = self._download_webpage(\n                self._proto_relative_url(cpl_url), video_id,\n                'Downloading cpl JS', fatal=False)\n            if cpl:\n                beeg_version = int_or_none(self._search_regex(\n                    r'beeg_version\\s*=\\s*([^\\b]+)', cpl,\n                    'beeg version', default=None)) or self._search_regex(\n                    r'/(\\d+)\\.js', cpl_url, 'beeg version', default=None)\n                beeg_salt = self._search_regex(\n                    r'beeg_salt\\s*=\\s*([\"\\'])(?P<beeg_salt>.+?)\\1', cpl, 'beeg salt',\n                    default=None, group='beeg_salt')\n\n        beeg_version = beeg_version or '2185'\n        beeg_salt = beeg_salt or 'pmweAkq8lAYKdfWcFCUj0yoVgoPlinamH5UE1CB3H'\n\n        for api_path in ('', 'api.'):\n            video = self._download_json(\n                'https://%sbeeg.com/api/v6/%s/video/%s'\n                % (api_path, beeg_version, video_id), video_id,\n                fatal=api_path == 'api.')\n            if video:\n                break\n\n        def split(o, e):\n            def cut(s, x):\n                n.append(s[:x])\n                return s[x:]\n            n = []\n            r = len(o) % e\n            if r > 0:\n                o = cut(o, r)\n            while len(o) > e:\n                o = cut(o, e)\n            n.append(o)\n            return n\n\n        def decrypt_key(key):\n            \n            a = beeg_salt\n            e = compat_urllib_parse_unquote(key)\n            o = ''.join([\n                compat_chr(compat_ord(e[n]) - compat_ord(a[n % len(a)]) % 21)\n                for n in range(len(e))])\n            return ''.join(split(o, 3)[::-1])\n\n        def decrypt_url(encrypted_url):\n            encrypted_url = self._proto_relative_url(\n                encrypted_url.replace('{DATA_MARKERS}', ''), 'https:')\n            key = self._search_regex(\n                r'/key=(.*?)%2Cend=', encrypted_url, 'key', default=None)\n            if not key:\n                return encrypted_url\n            return encrypted_url.replace(key, decrypt_key(key))\n\n        formats = []\n        for format_id, video_url in video.items():\n            if not video_url:\n                continue\n            height = self._search_regex(\n                r'^(\\d+)[pP]$', format_id, 'height', default=None)\n            if not height:\n                continue\n            formats.append({\n                'url': decrypt_url(video_url),\n                'format_id': format_id,\n                'height': int(height),\n            })\n        self._sort_formats(formats)\n\n        title = video['title']\n        video_id = video.get('id') or video_id\n        display_id = video.get('code')\n        description = video.get('desc')\n\n        timestamp = parse_iso8601(video.get('date'), ' ')\n        duration = int_or_none(video.get('duration'))\n\n        tags = [tag.strip() for tag in video['tags'].split(',')] if video.get('tags') else None\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'duration': duration,\n            'tags': tags,\n            'formats': formats,\n            'age_limit': self._rta_search(webpage),\n        }\n", "comments": "# Reverse engineered from http://static.beeg.com/cpl/1738.js\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_chr,\n    compat_ord,\n    compat_urllib_parse_unquote,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    urljoin,\n)\n\n\nclass BeegIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?beeg\\.com/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://beeg.com/5416503',\n        'md5': 'a1a1b1a8bc70a89e49ccfd113aed0820',\n        'info_dict': {\n            'id': '5416503',\n            'ext': 'mp4',\n            'title': 'Sultry Striptease',\n            'description': 'md5:d22219c09da287c14bed3d6c37ce4bc2',\n            'timestamp': 1391813355,\n            'upload_date': '20140207',\n            'duration': 383,\n            'tags': list,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        cpl_url = self._search_regex(\n            r'<script[^>]+src=([\"\\'])(?P<url>(?:/static|(?:https?:)?//static\\.beeg\\.com)/cpl/\\d+\\.js.*?)\\1',\n            webpage, 'cpl', default=None, group='url')\n\n        cpl_url = urljoin(url, cpl_url)\n\n        beeg_version, beeg_salt = [None] * 2\n\n        if cpl_url:\n            cpl = self._download_webpage(\n                self._proto_relative_url(cpl_url), video_id,\n                'Downloading cpl JS', fatal=False)\n            if cpl:\n                beeg_version = int_or_none(self._search_regex(\n                    r'beeg_version\\s*=\\s*([^\\b]+)', cpl,\n                    'beeg version', default=None)) or self._search_regex(\n                    r'/(\\d+)\\.js', cpl_url, 'beeg version', default=None)\n                beeg_salt = self._search_regex(\n                    r'beeg_salt\\s*=\\s*([\"\\'])(?P<beeg_salt>.+?)\\1', cpl, 'beeg salt',\n                    default=None, group='beeg_salt')\n\n        beeg_version = beeg_version or '2185'\n        beeg_salt = beeg_salt or 'pmweAkq8lAYKdfWcFCUj0yoVgoPlinamH5UE1CB3H'\n\n        for api_path in ('', 'api.'):\n            video = self._download_json(\n                'https://%sbeeg.com/api/v6/%s/video/%s'\n                % (api_path, beeg_version, video_id), video_id,\n                fatal=api_path == 'api.')\n            if video:\n                break\n\n        def split(o, e):\n            def cut(s, x):\n                n.append(s[:x])\n                return s[x:]\n            n = []\n            r = len(o) % e\n            if r > 0:\n                o = cut(o, r)\n            while len(o) > e:\n                o = cut(o, e)\n            n.append(o)\n            return n\n\n        def decrypt_key(key):\n            # Reverse engineered from http://static.beeg.com/cpl/1738.js\n            a = beeg_salt\n            e = compat_urllib_parse_unquote(key)\n            o = ''.join([\n                compat_chr(compat_ord(e[n]) - compat_ord(a[n % len(a)]) % 21)\n                for n in range(len(e))])\n            return ''.join(split(o, 3)[::-1])\n\n        def decrypt_url(encrypted_url):\n            encrypted_url = self._proto_relative_url(\n                encrypted_url.replace('{DATA_MARKERS}', ''), 'https:')\n            key = self._search_regex(\n                r'/key=(.*?)%2Cend=', encrypted_url, 'key', default=None)\n            if not key:\n                return encrypted_url\n            return encrypted_url.replace(key, decrypt_key(key))\n\n        formats = []\n        for format_id, video_url in video.items():\n            if not video_url:\n                continue\n            height = self._search_regex(\n                r'^(\\d+)[pP]$', format_id, 'height', default=None)\n            if not height:\n                continue\n            formats.append({\n                'url': decrypt_url(video_url),\n                'format_id': format_id,\n                'height': int(height),\n            })\n        self._sort_formats(formats)\n\n        title = video['title']\n        video_id = video.get('id') or video_id\n        display_id = video.get('code')\n        description = video.get('desc')\n\n        timestamp = parse_iso8601(video.get('date'), ' ')\n        duration = int_or_none(video.get('duration'))\n\n        tags = [tag.strip() for tag in video['tags'].split(',')] if video.get('tags') else None\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'duration': duration,\n            'tags': tags,\n            'formats': formats,\n            'age_limit': self._rta_search(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "beeg.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/beeg.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}