{"author": "ansible", "code": "\n# Copyright (c) 2017 Tim Rightnour <thegarbledone@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: snow_record\n\nshort_description: Create/Delete/Update records in ServiceNow\n\nversion_added: \"2.5\"\n\ndescription:\n    - Creates/Deletes/Updates a single record in ServiceNow\n\noptions:\n    instance:\n        description:\n            - The service now instance name\n        required: true\n    username:\n        description:\n            - User to connect to ServiceNow as\n        required: true\n    password:\n        description:\n            - Password for username\n        required: true\n    table:\n        description:\n            - Table to query for records\n        required: false\n        default: incident\n    state:\n        description:\n            - If C(present) is supplied with a C(number)\n              argument, the module will attempt to update the record with\n              the supplied data.  If no such record exists, a new one will\n              be created.  C(absent) will delete a record.\n        choices: [ present, absent ]\n        required: true\n    data:\n        description:\n            - key, value pairs of data to load into the record.\n              See Examples. Required for C(state:present)\n    number:\n        description:\n            - Record number to update. Required for C(state:absent)\n        required: false\n    lookup_field:\n        description:\n            - Changes the field that C(number) uses to find records\n        required: false\n        default: number\n    attachment:\n        description:\n            - Attach a file to the record\n        required: false\n\nrequirements:\n    - python pysnow (pysnow)\n\nauthor:\n    - Tim Rightnour (@garbled1)\n'''\n\nEXAMPLES = '''\n- name: Grab a user record\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: 62826bf03710200044e0bfc8bcbe5df1\n    table: sys_user\n    lookup_field: sys_id\n\n- name: Create an incident\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    data:\n      short_description: \"This is a test incident opened by Ansible\"\n      severity: 3\n      priority: 2\n  register: new_incident\n\n- name: Delete the record we just made\n  snow_record:\n    username: admin\n    password: xxxxxxx\n    instance: dev99999\n    state: absent\n    number: \"{{new_incident['record']['number']}}\"\n\n- name: Delete a non-existant record\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: absent\n    number: 9872354\n  failed_when: false\n\n- name: Update an incident\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: INC0000055\n    data:\n      work_notes : \"Been working all day on this thing.\"\n\n- name: Attach a file to an incident\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: INC0000055\n    attachment: README.md\n  tags: attach\n'''\n\nRETURN = '''\nrecord:\n   description: Record data from Service Now\n   type: dict\n   returned: when supported\nattached_file:\n   description: Details of the file that was attached via C(attachment)\n   type: dict\n   returned: when supported\n'''\n\nimport os\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_bytes, to_native\n\n\nHAS_PYSNOW = False\ntry:\n    import pysnow\n    HAS_PYSNOW = True\n\nexcept ImportError:\n    pass\n\n\ndef run_module():\n    \n    \n    module_args = dict(\n        instance=dict(default=None, type='str', required=True),\n        username=dict(default=None, type='str', required=True, no_log=True),\n        password=dict(default=None, type='str', required=True, no_log=True),\n        table=dict(type='str', required=False, default='incident'),\n        state=dict(choices=['present', 'absent'],\n                   type='str', required=True),\n        number=dict(default=None, required=False, type='str'),\n        data=dict(default=None, required=False, type='dict'),\n        lookup_field=dict(default='number', required=False, type='str'),\n        attachment=dict(default=None, required=False, type='str')\n    )\n    module_required_if = [\n        ['state', 'absent', ['number']],\n    ]\n\n    module = AnsibleModule(\n        argument_spec=module_args,\n        supports_check_mode=True,\n        required_if=module_required_if\n    )\n\n    \n    if not HAS_PYSNOW:\n        module.fail_json(msg='pysnow module required')\n\n    params = module.params\n    instance = params['instance']\n    username = params['username']\n    password = params['password']\n    table = params['table']\n    state = params['state']\n    number = params['number']\n    data = params['data']\n    lookup_field = params['lookup_field']\n\n    result = dict(\n        changed=False,\n        instance=instance,\n        table=table,\n        number=number,\n        lookup_field=lookup_field\n    )\n\n    \n    if params['attachment'] is not None:\n        attach = params['attachment']\n        b_attach = to_bytes(attach, errors='surrogate_or_strict')\n        if not os.path.exists(b_attach):\n            module.fail_json(msg=\"Attachment {0} not found\".format(attach))\n        result['attachment'] = attach\n    else:\n        attach = None\n\n    \n    try:\n        conn = pysnow.Client(instance=instance, user=username,\n                             password=password)\n    except Exception as detail:\n        module.fail_json(msg='Could not connect to ServiceNow: {0}'.format(str(detail)), **result)\n\n    \n    if module.check_mode:\n\n        \n        \n        if number is None:\n            result['record'] = dict(data)\n            result['changed'] = True\n\n        ?\n        elif state == 'absent':\n            try:\n                record = conn.query(table=table, query={lookup_field: number})\n                res = record.get_one()\n                result['record'] = dict(Success=True)\n                result['changed'] = True\n            except pysnow.exceptions.NoResults:\n                result['record'] = None\n            except Exception as detail:\n                module.fail_json(msg=\"Unknown failure in query record: {0}\".format(str(detail)), **result)\n\n        \n        else:\n            try:\n                record = conn.query(table=table, query={lookup_field: number})\n                res = record.get_one()\n                for key, value in data.items():\n                    res[key] = value\n                    result['changed'] = True\n                result['record'] = res\n            except pysnow.exceptions.NoResults:\n                snow_error = \"Record does not exist\"\n                module.fail_json(msg=snow_error, **result)\n            except Exception as detail:\n                module.fail_json(msg=\"Unknown failure in query record: {0}\".format(str(detail)), **result)\n        module.exit_json(**result)\n\n    # now for the real thing: (non-check mode)\n\n    ?\n    if state == 'present' and number is None:\n        try:\n            record = conn.insert(table=table, payload=dict(data))\n        except pysnow.UnexpectedResponse as e:\n            snow_error = \"Failed to create record: {0}, details: {1}\".format(e.error_summary, e.error_details)\n            module.fail_json(msg=snow_error, **result)\n        result['record'] = record\n        result['changed'] = True\n\n    \n    elif state == 'absent':\n        try:\n            record = conn.query(table=table, query={lookup_field: number})\n            res = record.delete()\n        except pysnow.exceptions.NoResults:\n            res = dict(Success=True)\n        except pysnow.exceptions.MultipleResults:\n            snow_error = \"Multiple record match\"\n            module.fail_json(msg=snow_error, **result)\n        except pysnow.UnexpectedResponse as e:\n            snow_error = \"Failed to delete record: {0}, details: {1}\".format(e.error_summary, e.error_details)\n            module.fail_json(msg=snow_error, **result)\n        except Exception as detail:\n            snow_error = \"Failed to delete record: {0}\".format(str(detail))\n            module.fail_json(msg=snow_error, **result)\n        result['record'] = res\n        result['changed'] = True\n\n    \n    else:\n        try:\n            record = conn.query(table=table, query={lookup_field: number})\n            if data is not None:\n                res = record.update(dict(data))\n                result['record'] = res\n                result['changed'] = True\n            else:\n                res = record.get_one()\n                result['record'] = res\n            if attach is not None:\n                res = record.attach(b_attach)\n                result['changed'] = True\n                result['attached_file'] = res\n\n        except pysnow.exceptions.MultipleResults:\n            snow_error = \"Multiple record match\"\n            module.fail_json(msg=snow_error, **result)\n        except pysnow.exceptions.NoResults:\n            snow_error = \"Record does not exist\"\n            module.fail_json(msg=snow_error, **result)\n        except pysnow.UnexpectedResponse as e:\n            snow_error = \"Failed to update record: {0}, details: {1}\".format(e.error_summary, e.error_details)\n            module.fail_json(msg=snow_error, **result)\n        except Exception as detail:\n            snow_error = \"Failed to update record: {0}\".format(str(detail))\n            module.fail_json(msg=snow_error, **result)\n\n    module.exit_json(**result)\n\n\ndef main():\n    run_module()\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  snow record  short description  create delete update records servicenow  version added   2 5   description        creates deletes updates single record servicenow  options      instance          description                the service instance name         required  true     username          description                user connect servicenow         required  true     password          description                password username         required  true     table          description                table query records         required  false         default  incident     state          description                if c(present) supplied c(number)               argument  module attempt update record               supplied data   if record exists  new one               created   c(absent) delete record          choices    present  absent           required  true     data          description                key  value pairs data load record                see examples  required c(state present)     number          description                record number update  required c(state absent)         required  false     lookup field          description                changes field c(number) uses find records         required  false         default  number     attachment          description                attach file record         required  false  requirements        python pysnow (pysnow)  author        tim rightnour ( garbled1)      examples         name  grab user record   snow record      username  ansible test     password  password     instance  dev99999     state  present     number  62826bf03710200044e0bfc8bcbe5df1     table  sys user     lookup field  sys id    name  create incident   snow record      username  ansible test     password  password     instance  dev99999     state  present     data        short description   this test incident opened ansible        severity  3       priority  2   register  new incident    name  delete record made   snow record      username  admin     password  xxxxxxx     instance  dev99999     state  absent     number     new incident  record    number         name  delete non existant record   snow record      username  ansible test     password  password     instance  dev99999     state  absent     number  9872354   failed  false    name  update incident   snow record      username  ansible test     password  password     instance  dev99999     state  present     number  inc0000055     data        work notes    been working day thing      name  attach file incident   snow record      username  ansible test     password  password     instance  dev99999     state  present     number  inc0000055     attachment  readme md   tags  attach      return       record     description  record data service now    type  dict    returned  supported attached file     description  details file attached via c(attachment)    type  dict    returned  supported         usr bin python    copyright (c) 2017 tim rightnour  thegarbledone gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    pull pysnow    define available arguments parameters user pass    module    check pysnow    check attachments    connect servicenow    deal check mode    check mode number  would created    record   we partially simulate    want check record non existent     let simulate modification    real thing  (non check mode)    creating new record     deleting record    we want update record ", "content": "#!/usr/bin/python\n# Copyright (c) 2017 Tim Rightnour <thegarbledone@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {\n    'metadata_version': '1.1',\n    'status': ['preview'],\n    'supported_by': 'community'\n}\n\nDOCUMENTATION = '''\n---\nmodule: snow_record\n\nshort_description: Create/Delete/Update records in ServiceNow\n\nversion_added: \"2.5\"\n\ndescription:\n    - Creates/Deletes/Updates a single record in ServiceNow\n\noptions:\n    instance:\n        description:\n            - The service now instance name\n        required: true\n    username:\n        description:\n            - User to connect to ServiceNow as\n        required: true\n    password:\n        description:\n            - Password for username\n        required: true\n    table:\n        description:\n            - Table to query for records\n        required: false\n        default: incident\n    state:\n        description:\n            - If C(present) is supplied with a C(number)\n              argument, the module will attempt to update the record with\n              the supplied data.  If no such record exists, a new one will\n              be created.  C(absent) will delete a record.\n        choices: [ present, absent ]\n        required: true\n    data:\n        description:\n            - key, value pairs of data to load into the record.\n              See Examples. Required for C(state:present)\n    number:\n        description:\n            - Record number to update. Required for C(state:absent)\n        required: false\n    lookup_field:\n        description:\n            - Changes the field that C(number) uses to find records\n        required: false\n        default: number\n    attachment:\n        description:\n            - Attach a file to the record\n        required: false\n\nrequirements:\n    - python pysnow (pysnow)\n\nauthor:\n    - Tim Rightnour (@garbled1)\n'''\n\nEXAMPLES = '''\n- name: Grab a user record\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: 62826bf03710200044e0bfc8bcbe5df1\n    table: sys_user\n    lookup_field: sys_id\n\n- name: Create an incident\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    data:\n      short_description: \"This is a test incident opened by Ansible\"\n      severity: 3\n      priority: 2\n  register: new_incident\n\n- name: Delete the record we just made\n  snow_record:\n    username: admin\n    password: xxxxxxx\n    instance: dev99999\n    state: absent\n    number: \"{{new_incident['record']['number']}}\"\n\n- name: Delete a non-existant record\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: absent\n    number: 9872354\n  failed_when: false\n\n- name: Update an incident\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: INC0000055\n    data:\n      work_notes : \"Been working all day on this thing.\"\n\n- name: Attach a file to an incident\n  snow_record:\n    username: ansible_test\n    password: my_password\n    instance: dev99999\n    state: present\n    number: INC0000055\n    attachment: README.md\n  tags: attach\n'''\n\nRETURN = '''\nrecord:\n   description: Record data from Service Now\n   type: dict\n   returned: when supported\nattached_file:\n   description: Details of the file that was attached via C(attachment)\n   type: dict\n   returned: when supported\n'''\n\nimport os\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_bytes, to_native\n\n# Pull in pysnow\nHAS_PYSNOW = False\ntry:\n    import pysnow\n    HAS_PYSNOW = True\n\nexcept ImportError:\n    pass\n\n\ndef run_module():\n    # define the available arguments/parameters that a user can pass to\n    # the module\n    module_args = dict(\n        instance=dict(default=None, type='str', required=True),\n        username=dict(default=None, type='str', required=True, no_log=True),\n        password=dict(default=None, type='str', required=True, no_log=True),\n        table=dict(type='str', required=False, default='incident'),\n        state=dict(choices=['present', 'absent'],\n                   type='str', required=True),\n        number=dict(default=None, required=False, type='str'),\n        data=dict(default=None, required=False, type='dict'),\n        lookup_field=dict(default='number', required=False, type='str'),\n        attachment=dict(default=None, required=False, type='str')\n    )\n    module_required_if = [\n        ['state', 'absent', ['number']],\n    ]\n\n    module = AnsibleModule(\n        argument_spec=module_args,\n        supports_check_mode=True,\n        required_if=module_required_if\n    )\n\n    # check for pysnow\n    if not HAS_PYSNOW:\n        module.fail_json(msg='pysnow module required')\n\n    params = module.params\n    instance = params['instance']\n    username = params['username']\n    password = params['password']\n    table = params['table']\n    state = params['state']\n    number = params['number']\n    data = params['data']\n    lookup_field = params['lookup_field']\n\n    result = dict(\n        changed=False,\n        instance=instance,\n        table=table,\n        number=number,\n        lookup_field=lookup_field\n    )\n\n    # check for attachments\n    if params['attachment'] is not None:\n        attach = params['attachment']\n        b_attach = to_bytes(attach, errors='surrogate_or_strict')\n        if not os.path.exists(b_attach):\n            module.fail_json(msg=\"Attachment {0} not found\".format(attach))\n        result['attachment'] = attach\n    else:\n        attach = None\n\n    # Connect to ServiceNow\n    try:\n        conn = pysnow.Client(instance=instance, user=username,\n                             password=password)\n    except Exception as detail:\n        module.fail_json(msg='Could not connect to ServiceNow: {0}'.format(str(detail)), **result)\n\n    # Deal with check mode\n    if module.check_mode:\n\n        # if we are in check mode and have no number, we would have created\n        # a record.  We can only partially simulate this\n        if number is None:\n            result['record'] = dict(data)\n            result['changed'] = True\n\n        # do we want to check if the record is non-existent?\n        elif state == 'absent':\n            try:\n                record = conn.query(table=table, query={lookup_field: number})\n                res = record.get_one()\n                result['record'] = dict(Success=True)\n                result['changed'] = True\n            except pysnow.exceptions.NoResults:\n                result['record'] = None\n            except Exception as detail:\n                module.fail_json(msg=\"Unknown failure in query record: {0}\".format(str(detail)), **result)\n\n        # Let's simulate modification\n        else:\n            try:\n                record = conn.query(table=table, query={lookup_field: number})\n                res = record.get_one()\n                for key, value in data.items():\n                    res[key] = value\n                    result['changed'] = True\n                result['record'] = res\n            except pysnow.exceptions.NoResults:\n                snow_error = \"Record does not exist\"\n                module.fail_json(msg=snow_error, **result)\n            except Exception as detail:\n                module.fail_json(msg=\"Unknown failure in query record: {0}\".format(str(detail)), **result)\n        module.exit_json(**result)\n\n    # now for the real thing: (non-check mode)\n\n    # are we creating a new record?\n    if state == 'present' and number is None:\n        try:\n            record = conn.insert(table=table, payload=dict(data))\n        except pysnow.UnexpectedResponse as e:\n            snow_error = \"Failed to create record: {0}, details: {1}\".format(e.error_summary, e.error_details)\n            module.fail_json(msg=snow_error, **result)\n        result['record'] = record\n        result['changed'] = True\n\n    # we are deleting a record\n    elif state == 'absent':\n        try:\n            record = conn.query(table=table, query={lookup_field: number})\n            res = record.delete()\n        except pysnow.exceptions.NoResults:\n            res = dict(Success=True)\n        except pysnow.exceptions.MultipleResults:\n            snow_error = \"Multiple record match\"\n            module.fail_json(msg=snow_error, **result)\n        except pysnow.UnexpectedResponse as e:\n            snow_error = \"Failed to delete record: {0}, details: {1}\".format(e.error_summary, e.error_details)\n            module.fail_json(msg=snow_error, **result)\n        except Exception as detail:\n            snow_error = \"Failed to delete record: {0}\".format(str(detail))\n            module.fail_json(msg=snow_error, **result)\n        result['record'] = res\n        result['changed'] = True\n\n    # We want to update a record\n    else:\n        try:\n            record = conn.query(table=table, query={lookup_field: number})\n            if data is not None:\n                res = record.update(dict(data))\n                result['record'] = res\n                result['changed'] = True\n            else:\n                res = record.get_one()\n                result['record'] = res\n            if attach is not None:\n                res = record.attach(b_attach)\n                result['changed'] = True\n                result['attached_file'] = res\n\n        except pysnow.exceptions.MultipleResults:\n            snow_error = \"Multiple record match\"\n            module.fail_json(msg=snow_error, **result)\n        except pysnow.exceptions.NoResults:\n            snow_error = \"Record does not exist\"\n            module.fail_json(msg=snow_error, **result)\n        except pysnow.UnexpectedResponse as e:\n            snow_error = \"Failed to update record: {0}, details: {1}\".format(e.error_summary, e.error_details)\n            module.fail_json(msg=snow_error, **result)\n        except Exception as detail:\n            snow_error = \"Failed to update record: {0}\".format(str(detail))\n            module.fail_json(msg=snow_error, **result)\n\n    module.exit_json(**result)\n\n\ndef main():\n    run_module()\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "snow_record.py", "id": "2d0958941d092c6facc69b5544a67573", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/notification/snow_record.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}