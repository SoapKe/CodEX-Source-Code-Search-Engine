{"author": "tflearn", "code": "from __future__ import absolute_import, division, print_function\n\nimport os\nimport pickle\nfrom six.moves import urllib\n\nimport tflearn\nfrom tflearn.data_utils import *\n\npath = \"shakespeare_input.txt\"\nchar_idx_file = 'char_idx.pickle'\n\nif not os.path.isfile(path):\n    urllib.request.urlretrieve(\"https://raw.githubusercontent.com/tflearn/tflearn.github.io/master/resources/shakespeare_input.txt\", path)\n\nmaxlen = 25\n\nchar_idx = None\nif os.path.isfile(char_idx_file):\n  print('Loading previous char_idx')\n  char_idx = pickle.load(open(char_idx_file, 'rb'))\n\nX, Y, char_idx = \\\n    textfile_to_semi_redundant_sequences(path, seq_maxlen=maxlen, redun_step=3,\n                                         pre_defined_char_idx=char_idx)\n\npickle.dump(char_idx, open(char_idx_file,'wb'))\n\ng = tflearn.input_data([None, maxlen, len(char_idx)])\ng = tflearn.lstm(g, 512, return_seq=True)\ng = tflearn.dropout(g, 0.5)\ng = tflearn.lstm(g, 512, return_seq=True)\ng = tflearn.dropout(g, 0.5)\ng = tflearn.lstm(g, 512)\ng = tflearn.dropout(g, 0.5)\ng = tflearn.fully_connected(g, len(char_idx), activation='softmax')\ng = tflearn.regression(g, optimizer='adam', loss='categorical_crossentropy',\n                       learning_rate=0.001)\n\nm = tflearn.SequenceGenerator(g, dictionary=char_idx,\n                              seq_maxlen=maxlen,\n                              clip_gradients=5.0,\n                              checkpoint_path='model_shakespeare')\n\nfor i in range(50):\n    seed = random_sequence_from_textfile(path, maxlen)\n    m.fit(X, Y, validation_set=0.1, batch_size=128,\n          n_epoch=1, run_id='shakespeare')\n    print(\"-- TESTING...\")\n    print(\"-- Test with temperature of 1.0 --\")\n    print(m.generate(600, temperature=1.0, seq_seed=seed))\n    print(\"-- Test with temperature of 0.5 --\")\n    print(m.generate(600, temperature=0.5, seq_seed=seed))\n", "comments": "", "content": "from __future__ import absolute_import, division, print_function\n\nimport os\nimport pickle\nfrom six.moves import urllib\n\nimport tflearn\nfrom tflearn.data_utils import *\n\npath = \"shakespeare_input.txt\"\nchar_idx_file = 'char_idx.pickle'\n\nif not os.path.isfile(path):\n    urllib.request.urlretrieve(\"https://raw.githubusercontent.com/tflearn/tflearn.github.io/master/resources/shakespeare_input.txt\", path)\n\nmaxlen = 25\n\nchar_idx = None\nif os.path.isfile(char_idx_file):\n  print('Loading previous char_idx')\n  char_idx = pickle.load(open(char_idx_file, 'rb'))\n\nX, Y, char_idx = \\\n    textfile_to_semi_redundant_sequences(path, seq_maxlen=maxlen, redun_step=3,\n                                         pre_defined_char_idx=char_idx)\n\npickle.dump(char_idx, open(char_idx_file,'wb'))\n\ng = tflearn.input_data([None, maxlen, len(char_idx)])\ng = tflearn.lstm(g, 512, return_seq=True)\ng = tflearn.dropout(g, 0.5)\ng = tflearn.lstm(g, 512, return_seq=True)\ng = tflearn.dropout(g, 0.5)\ng = tflearn.lstm(g, 512)\ng = tflearn.dropout(g, 0.5)\ng = tflearn.fully_connected(g, len(char_idx), activation='softmax')\ng = tflearn.regression(g, optimizer='adam', loss='categorical_crossentropy',\n                       learning_rate=0.001)\n\nm = tflearn.SequenceGenerator(g, dictionary=char_idx,\n                              seq_maxlen=maxlen,\n                              clip_gradients=5.0,\n                              checkpoint_path='model_shakespeare')\n\nfor i in range(50):\n    seed = random_sequence_from_textfile(path, maxlen)\n    m.fit(X, Y, validation_set=0.1, batch_size=128,\n          n_epoch=1, run_id='shakespeare')\n    print(\"-- TESTING...\")\n    print(\"-- Test with temperature of 1.0 --\")\n    print(m.generate(600, temperature=1.0, seq_seed=seed))\n    print(\"-- Test with temperature of 0.5 --\")\n    print(m.generate(600, temperature=0.5, seq_seed=seed))\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "lstm_generator_shakespeare.py", "id": "fd07ba6bf5294821077f6c45d3dadf26", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/examples/nlp/lstm_generator_shakespeare.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}