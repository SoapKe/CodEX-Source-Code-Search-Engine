{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import models, fields, api, _\nfrom odoo.exceptions import UserError\nfrom odoo.addons import decimal_precision as dp\n\n\nclass SaleOrder(models.Model):\n    _inherit = 'sale.order'\n\n    carrier_id = fields.Many2one('delivery.carrier', string=\"Delivery Method\", help=\"Fill this field if you plan to invoice the shipping based on picking.\")\n    delivery_price = fields.Float(string='Estimated Delivery Price', readonly=True, copy=False)\n    delivery_message = fields.Char(readonly=True, copy=False)\n    delivery_rating_success = fields.Boolean(copy=False)\n    invoice_shipping_on_delivery = fields.Boolean(string=\"Invoice Shipping on Delivery\", copy=False)\n\n    def _compute_amount_total_without_delivery(self):\n        self.ensure_one()\n        delivery_cost = sum([l.price_total for l in self.order_line if l.is_delivery])\n        return self.amount_total - delivery_cost\n\n    def get_delivery_price(self):\n        for order in self.filtered(lambda o: o.state in ('draft', 'sent') and len(o.order_line) > 0):\n            \n            \n            order.delivery_rating_success = False\n            res = order.carrier_id.rate_shipment(order)\n            if res['success']:\n                order.delivery_rating_success = True\n                order.delivery_price = res['price']\n                order.delivery_message = res['warning_message']\n            else:\n                order.delivery_rating_success = False\n                order.delivery_price = 0.0\n                order.delivery_message = res['error_message']\n\n    @api.onchange('carrier_id')\n    def onchange_carrier_id(self):\n        if self.state in ('draft', 'sent'):\n            self.delivery_price = 0.0\n            self.delivery_rating_success = False\n            self.delivery_message = False\n\n    @api.onchange('partner_id')\n    def onchange_partner_id_carrier_id(self):\n        if self.partner_id:\n            self.carrier_id = self.partner_id.property_delivery_carrier_id\n\n    \n\n    @api.multi\n    def action_confirm(self):\n        res = super(SaleOrder, self).action_confirm()\n        for so in self:\n            so.invoice_shipping_on_delivery = all([not line.is_delivery for line in so.order_line])\n        return res\n\n    @api.multi\n    def _remove_delivery_line(self):\n        self.env['sale.order.line'].search([('order_id', 'in', self.ids), ('is_delivery', '=', True)]).unlink()\n\n    @api.multi\n    def set_delivery_line(self):\n\n        \n        self._remove_delivery_line()\n\n        for order in self:\n            if order.state not in ('draft', 'sent'):\n                raise UserError(_('You can add delivery price only on unconfirmed quotations.'))\n            elif not order.carrier_id:\n                raise UserError(_('No carrier set for this order.'))\n            elif not order.delivery_rating_success:\n                raise UserError(_('Please use \"Check price\" in order to compute a shipping price for this quotation.'))\n            else:\n                price_unit = order.carrier_id.rate_shipment(order)['price']\n                \n                order._create_delivery_line(order.carrier_id, price_unit)\n        return True\n\n    def _create_delivery_line(self, carrier, price_unit):\n        SaleOrderLine = self.env['sale.order.line']\n\n        \n        taxes = carrier.product_id.taxes_id.filtered(lambda t: t.company_id.id == self.company_id.id)\n        taxes_ids = taxes.ids\n        if self.partner_id and self.fiscal_position_id:\n            taxes_ids = self.fiscal_position_id.map_tax(taxes, carrier.product_id, self.partner_id).ids\n\n        \n        values = {\n            'order_id': self.id,\n            'name': carrier.name,\n            'product_uom_qty': 1,\n            'product_uom': carrier.product_id.uom_id.id,\n            'product_id': carrier.product_id.id,\n            'price_unit': price_unit,\n            'tax_id': [(6, 0, taxes_ids)],\n            'is_delivery': True,\n        }\n        if self.order_line:\n            values['sequence'] = self.order_line[-1].sequence + 1\n        sol = SaleOrderLine.sudo().create(values)\n        return sol\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = 'sale.order.line'\n\n    is_delivery = fields.Boolean(string=\"Is a Delivery\", default=False)\n    product_qty = fields.Float(compute='_compute_product_qty', string='Quantity', digits=dp.get_precision('Product Unit of Measure'))\n\n    @api.depends('product_id', 'product_uom', 'product_uom_qty')\n    def _compute_product_qty(self):\n        for line in self:\n            if not line.product_id or not line.product_uom or not line.product_uom_qty:\n                return 0.0\n            line.product_qty = line.product_uom._compute_quantity(line.product_uom_qty, line.product_id.uom_id)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     we want recompute shipping price already validated done so    so lines yet    todo onchange sol  clean delivery price    remove delivery products sales order    todo check whether safe use delivery price    apply fiscal position    create sales order line ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import models, fields, api, _\nfrom odoo.exceptions import UserError\nfrom odoo.addons import decimal_precision as dp\n\n\nclass SaleOrder(models.Model):\n    _inherit = 'sale.order'\n\n    carrier_id = fields.Many2one('delivery.carrier', string=\"Delivery Method\", help=\"Fill this field if you plan to invoice the shipping based on picking.\")\n    delivery_price = fields.Float(string='Estimated Delivery Price', readonly=True, copy=False)\n    delivery_message = fields.Char(readonly=True, copy=False)\n    delivery_rating_success = fields.Boolean(copy=False)\n    invoice_shipping_on_delivery = fields.Boolean(string=\"Invoice Shipping on Delivery\", copy=False)\n\n    def _compute_amount_total_without_delivery(self):\n        self.ensure_one()\n        delivery_cost = sum([l.price_total for l in self.order_line if l.is_delivery])\n        return self.amount_total - delivery_cost\n\n    def get_delivery_price(self):\n        for order in self.filtered(lambda o: o.state in ('draft', 'sent') and len(o.order_line) > 0):\n            # We do not want to recompute the shipping price of an already validated/done SO\n            # or on an SO that has no lines yet\n            order.delivery_rating_success = False\n            res = order.carrier_id.rate_shipment(order)\n            if res['success']:\n                order.delivery_rating_success = True\n                order.delivery_price = res['price']\n                order.delivery_message = res['warning_message']\n            else:\n                order.delivery_rating_success = False\n                order.delivery_price = 0.0\n                order.delivery_message = res['error_message']\n\n    @api.onchange('carrier_id')\n    def onchange_carrier_id(self):\n        if self.state in ('draft', 'sent'):\n            self.delivery_price = 0.0\n            self.delivery_rating_success = False\n            self.delivery_message = False\n\n    @api.onchange('partner_id')\n    def onchange_partner_id_carrier_id(self):\n        if self.partner_id:\n            self.carrier_id = self.partner_id.property_delivery_carrier_id\n\n    # TODO onchange sol, clean delivery price\n\n    @api.multi\n    def action_confirm(self):\n        res = super(SaleOrder, self).action_confirm()\n        for so in self:\n            so.invoice_shipping_on_delivery = all([not line.is_delivery for line in so.order_line])\n        return res\n\n    @api.multi\n    def _remove_delivery_line(self):\n        self.env['sale.order.line'].search([('order_id', 'in', self.ids), ('is_delivery', '=', True)]).unlink()\n\n    @api.multi\n    def set_delivery_line(self):\n\n        # Remove delivery products from the sales order\n        self._remove_delivery_line()\n\n        for order in self:\n            if order.state not in ('draft', 'sent'):\n                raise UserError(_('You can add delivery price only on unconfirmed quotations.'))\n            elif not order.carrier_id:\n                raise UserError(_('No carrier set for this order.'))\n            elif not order.delivery_rating_success:\n                raise UserError(_('Please use \"Check price\" in order to compute a shipping price for this quotation.'))\n            else:\n                price_unit = order.carrier_id.rate_shipment(order)['price']\n                # TODO check whether it is safe to use delivery_price here\n                order._create_delivery_line(order.carrier_id, price_unit)\n        return True\n\n    def _create_delivery_line(self, carrier, price_unit):\n        SaleOrderLine = self.env['sale.order.line']\n\n        # Apply fiscal position\n        taxes = carrier.product_id.taxes_id.filtered(lambda t: t.company_id.id == self.company_id.id)\n        taxes_ids = taxes.ids\n        if self.partner_id and self.fiscal_position_id:\n            taxes_ids = self.fiscal_position_id.map_tax(taxes, carrier.product_id, self.partner_id).ids\n\n        # Create the sales order line\n        values = {\n            'order_id': self.id,\n            'name': carrier.name,\n            'product_uom_qty': 1,\n            'product_uom': carrier.product_id.uom_id.id,\n            'product_id': carrier.product_id.id,\n            'price_unit': price_unit,\n            'tax_id': [(6, 0, taxes_ids)],\n            'is_delivery': True,\n        }\n        if self.order_line:\n            values['sequence'] = self.order_line[-1].sequence + 1\n        sol = SaleOrderLine.sudo().create(values)\n        return sol\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = 'sale.order.line'\n\n    is_delivery = fields.Boolean(string=\"Is a Delivery\", default=False)\n    product_qty = fields.Float(compute='_compute_product_qty', string='Quantity', digits=dp.get_precision('Product Unit of Measure'))\n\n    @api.depends('product_id', 'product_uom', 'product_uom_qty')\n    def _compute_product_qty(self):\n        for line in self:\n            if not line.product_id or not line.product_uom or not line.product_uom_qty:\n                return 0.0\n            line.product_qty = line.product_uom._compute_quantity(line.product_uom_qty, line.product_id.uom_id)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_order.py", "id": "f3161b8027c27dab2bc2de09e8e75c9f", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/delivery/models/sale_order.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}