{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"Quality metrics for the model.\"\"\"\n\nimport tensorflow as tf\n\n\ndef char_accuracy(predictions, targets, rej_char, streaming=False):\n  \"\"\"Computes character level accuracy.\n\n  Both predictions and targets should have the same shape\n  [batch_size x seq_length].\n\n  Args:\n    predictions: predicted characters ids.\n    targets: ground truth character ids.\n    rej_char: the character id used to mark an empty element (end of sequence).\n    streaming: if True, uses the streaming mean from the slim.metric module.\n\n  Returns:\n    a update_ops for execution and value tensor whose value on evaluation\n    returns the total character accuracy.\n  \"\"\"\n  with tf.variable_scope('CharAccuracy'):\n    predictions.get_shape().assert_is_compatible_with(targets.get_shape())\n\n    targets = tf.to_int32(targets)\n    const_rej_char = tf.constant(rej_char, shape=targets.get_shape())\n    weights = tf.to_float(tf.not_equal(targets, const_rej_char))\n    correct_chars = tf.to_float(tf.equal(predictions, targets))\n    accuracy_per_example = tf.div(\n        tf.reduce_sum(tf.multiply(correct_chars, weights), 1),\n        tf.reduce_sum(weights, 1))\n    if streaming:\n      return tf.contrib.metrics.streaming_mean(accuracy_per_example)\n    else:\n      return tf.reduce_mean(accuracy_per_example)\n\n\ndef sequence_accuracy(predictions, targets, rej_char, streaming=False):\n  \"\"\"Computes sequence level accuracy.\n\n  Both input tensors should have the same shape: [batch_size x seq_length].\n\n  Args:\n    predictions: predicted character classes.\n    targets: ground truth character classes.\n    rej_char: the character id used to mark empty element (end of sequence).\n    streaming: if True, uses the streaming mean from the slim.metric module.\n\n  Returns:\n    a update_ops for execution and value tensor whose value on evaluation\n    returns the total sequence accuracy.\n  \"\"\"\n\n  with tf.variable_scope('SequenceAccuracy'):\n    predictions.get_shape().assert_is_compatible_with(targets.get_shape())\n\n    targets = tf.to_int32(targets)\n    const_rej_char = tf.constant(\n        rej_char, shape=targets.get_shape(), dtype=tf.int32)\n    include_mask = tf.not_equal(targets, const_rej_char)\n    include_predictions = tf.to_int32(\n        tf.where(include_mask, predictions,\n                 tf.zeros_like(predictions) + rej_char))\n    correct_chars = tf.to_float(tf.equal(include_predictions, targets))\n    correct_chars_counts = tf.cast(\n        tf.reduce_sum(correct_chars, reduction_indices=[1]), dtype=tf.int32)\n    target_length = targets.get_shape().dims[1].value\n    target_chars_counts = tf.constant(\n        target_length, shape=correct_chars_counts.get_shape())\n    accuracy_per_example = tf.to_float(\n        tf.equal(correct_chars_counts, target_chars_counts))\n    if streaming:\n      return tf.contrib.metrics.streaming_mean(accuracy_per_example)\n    else:\n      return tf.reduce_mean(accuracy_per_example)\n", "comments": "   quality metrics model      import tensorflow tf   def char accuracy(predictions  targets  rej char  streaming false)       computes character level accuracy     both predictions targets shape    batch size x seq length      args      predictions  predicted characters ids      targets  ground truth character ids      rej char  character id used mark empty element (end sequence)      streaming  true  uses streaming mean slim metric module     returns      update ops execution value tensor whose value evaluation     returns total character accuracy          tf variable scope( characcuracy )      predictions get shape() assert compatible with(targets get shape())      targets   tf int32(targets)     const rej char   tf constant(rej char  shape targets get shape())     weights   tf float(tf equal(targets  const rej char))     correct chars   tf float(tf equal(predictions  targets))     accuracy per example   tf div(         tf reduce sum(tf multiply(correct chars  weights)  1)          tf reduce sum(weights  1))     streaming        return tf contrib metrics streaming mean(accuracy per example)     else        return tf reduce mean(accuracy per example)   def sequence accuracy(predictions  targets  rej char  streaming false)       computes sequence level accuracy     both input tensors shape   batch size x seq length      args      predictions  predicted character classes      targets  ground truth character classes      rej char  character id used mark empty element (end sequence)      streaming  true  uses streaming mean slim metric module     returns      update ops execution value tensor whose value evaluation     returns total sequence accuracy           copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                    ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Quality metrics for the model.\"\"\"\n\nimport tensorflow as tf\n\n\ndef char_accuracy(predictions, targets, rej_char, streaming=False):\n  \"\"\"Computes character level accuracy.\n\n  Both predictions and targets should have the same shape\n  [batch_size x seq_length].\n\n  Args:\n    predictions: predicted characters ids.\n    targets: ground truth character ids.\n    rej_char: the character id used to mark an empty element (end of sequence).\n    streaming: if True, uses the streaming mean from the slim.metric module.\n\n  Returns:\n    a update_ops for execution and value tensor whose value on evaluation\n    returns the total character accuracy.\n  \"\"\"\n  with tf.variable_scope('CharAccuracy'):\n    predictions.get_shape().assert_is_compatible_with(targets.get_shape())\n\n    targets = tf.to_int32(targets)\n    const_rej_char = tf.constant(rej_char, shape=targets.get_shape())\n    weights = tf.to_float(tf.not_equal(targets, const_rej_char))\n    correct_chars = tf.to_float(tf.equal(predictions, targets))\n    accuracy_per_example = tf.div(\n        tf.reduce_sum(tf.multiply(correct_chars, weights), 1),\n        tf.reduce_sum(weights, 1))\n    if streaming:\n      return tf.contrib.metrics.streaming_mean(accuracy_per_example)\n    else:\n      return tf.reduce_mean(accuracy_per_example)\n\n\ndef sequence_accuracy(predictions, targets, rej_char, streaming=False):\n  \"\"\"Computes sequence level accuracy.\n\n  Both input tensors should have the same shape: [batch_size x seq_length].\n\n  Args:\n    predictions: predicted character classes.\n    targets: ground truth character classes.\n    rej_char: the character id used to mark empty element (end of sequence).\n    streaming: if True, uses the streaming mean from the slim.metric module.\n\n  Returns:\n    a update_ops for execution and value tensor whose value on evaluation\n    returns the total sequence accuracy.\n  \"\"\"\n\n  with tf.variable_scope('SequenceAccuracy'):\n    predictions.get_shape().assert_is_compatible_with(targets.get_shape())\n\n    targets = tf.to_int32(targets)\n    const_rej_char = tf.constant(\n        rej_char, shape=targets.get_shape(), dtype=tf.int32)\n    include_mask = tf.not_equal(targets, const_rej_char)\n    include_predictions = tf.to_int32(\n        tf.where(include_mask, predictions,\n                 tf.zeros_like(predictions) + rej_char))\n    correct_chars = tf.to_float(tf.equal(include_predictions, targets))\n    correct_chars_counts = tf.cast(\n        tf.reduce_sum(correct_chars, reduction_indices=[1]), dtype=tf.int32)\n    target_length = targets.get_shape().dims[1].value\n    target_chars_counts = tf.constant(\n        target_length, shape=correct_chars_counts.get_shape())\n    accuracy_per_example = tf.to_float(\n        tf.equal(correct_chars_counts, target_chars_counts))\n    if streaming:\n      return tf.contrib.metrics.streaming_mean(accuracy_per_example)\n    else:\n      return tf.reduce_mean(accuracy_per_example)\n", "description": "Models and examples built with TensorFlow", "file_name": "metrics.py", "id": "5100bef154ec42844b7e4a57077cecae", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/attention_ocr/python/metrics.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}