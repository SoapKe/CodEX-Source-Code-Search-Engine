{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n)\n\n\nclass RedditIE(InfoExtractor):\n    _VALID_URL = r'https?://v\\.redd\\.it/(?P<id>[^/?\n    _TEST = {\n        \n        'url': 'https://v.redd.it/zv89llsvexdz',\n        'md5': '0a070c53eba7ec4534d95a5a1259e253',\n        'info_dict': {\n            'id': 'zv89llsvexdz',\n            'ext': 'mp4',\n            'title': 'zv89llsvexdz',\n        },\n        'params': {\n            'format': 'bestvideo',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        formats = self._extract_m3u8_formats(\n            'https://v.redd.it/%s/HLSPlaylist.m3u8' % video_id, video_id,\n            'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False)\n\n        formats.extend(self._extract_mpd_formats(\n            'https://v.redd.it/%s/DASHPlaylist.mpd' % video_id, video_id,\n            mpd_id='dash', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_id,\n            'formats': formats,\n        }\n\n\nclass RedditRIE(InfoExtractor):\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?reddit\\.com/r/[^/]+/comments/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://www.reddit.com/r/videos/comments/6rrwyj/that_small_heart_attack/',\n        'info_dict': {\n            'id': 'zv89llsvexdz',\n            'ext': 'mp4',\n            'title': 'That small heart attack.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1501941939,\n            'upload_date': '20170805',\n            'uploader': 'Antw87',\n            'like_count': int,\n            'dislike_count': int,\n            'comment_count': int,\n            'age_limit': 0,\n        },\n        'params': {\n            'format': 'bestvideo',\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.reddit.com/r/videos/comments/6rrwyj',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.reddit.com/r/MadeMeSmile/comments/6t7wi5/wait_for_it/',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.reddit.com/r/videos/comments/6t7sg9/comedians_hilarious_joke_about_the_guam_flag/',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.reddit.com/r/videos/comments/6t75wq/southern_man_tries_to_speak_without_an_accent/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        url, video_id = mobj.group('url', 'id')\n\n        video_id = self._match_id(url)\n\n        data = self._download_json(\n            url + '/.json', video_id)[0]['data']['children'][0]['data']\n\n        video_url = data['url']\n\n        \n        if 'reddit.com/' in video_url and '/%s/' % video_id in video_url:\n            raise ExtractorError('No media found', expected=True)\n\n        over_18 = data.get('over_18')\n        if over_18 is True:\n            age_limit = 18\n        elif over_18 is False:\n            age_limit = 0\n        else:\n            age_limit = None\n\n        return {\n            '_type': 'url_transparent',\n            'url': video_url,\n            'title': data.get('title'),\n            'thumbnail': data.get('thumbnail'),\n            'timestamp': float_or_none(data.get('created_utc')),\n            'uploader': data.get('author'),\n            'like_count': int_or_none(data.get('ups')),\n            'dislike_count': int_or_none(data.get('downs')),\n            'comment_count': int_or_none(data.get('num_comments')),\n            'age_limit': age_limit,\n        }\n", "comments": "#&]+)'\n# from https://www.reddit.com/r/videos/comments/6rrwyj/that_small_heart_attack/\n#&]+))'\n# imgur\n# streamable\n# youtube\n# Avoid recursing into the same reddit URL\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n)\n\n\nclass RedditIE(InfoExtractor):\n    _VALID_URL = r'https?://v\\.redd\\.it/(?P<id>[^/?#&]+)'\n    _TEST = {\n        # from https://www.reddit.com/r/videos/comments/6rrwyj/that_small_heart_attack/\n        'url': 'https://v.redd.it/zv89llsvexdz',\n        'md5': '0a070c53eba7ec4534d95a5a1259e253',\n        'info_dict': {\n            'id': 'zv89llsvexdz',\n            'ext': 'mp4',\n            'title': 'zv89llsvexdz',\n        },\n        'params': {\n            'format': 'bestvideo',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        formats = self._extract_m3u8_formats(\n            'https://v.redd.it/%s/HLSPlaylist.m3u8' % video_id, video_id,\n            'mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False)\n\n        formats.extend(self._extract_mpd_formats(\n            'https://v.redd.it/%s/DASHPlaylist.mpd' % video_id, video_id,\n            mpd_id='dash', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_id,\n            'formats': formats,\n        }\n\n\nclass RedditRIE(InfoExtractor):\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?reddit\\.com/r/[^/]+/comments/(?P<id>[^/?#&]+))'\n    _TESTS = [{\n        'url': 'https://www.reddit.com/r/videos/comments/6rrwyj/that_small_heart_attack/',\n        'info_dict': {\n            'id': 'zv89llsvexdz',\n            'ext': 'mp4',\n            'title': 'That small heart attack.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1501941939,\n            'upload_date': '20170805',\n            'uploader': 'Antw87',\n            'like_count': int,\n            'dislike_count': int,\n            'comment_count': int,\n            'age_limit': 0,\n        },\n        'params': {\n            'format': 'bestvideo',\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://www.reddit.com/r/videos/comments/6rrwyj',\n        'only_matching': True,\n    }, {\n        # imgur\n        'url': 'https://www.reddit.com/r/MadeMeSmile/comments/6t7wi5/wait_for_it/',\n        'only_matching': True,\n    }, {\n        # streamable\n        'url': 'https://www.reddit.com/r/videos/comments/6t7sg9/comedians_hilarious_joke_about_the_guam_flag/',\n        'only_matching': True,\n    }, {\n        # youtube\n        'url': 'https://www.reddit.com/r/videos/comments/6t75wq/southern_man_tries_to_speak_without_an_accent/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        url, video_id = mobj.group('url', 'id')\n\n        video_id = self._match_id(url)\n\n        data = self._download_json(\n            url + '/.json', video_id)[0]['data']['children'][0]['data']\n\n        video_url = data['url']\n\n        # Avoid recursing into the same reddit URL\n        if 'reddit.com/' in video_url and '/%s/' % video_id in video_url:\n            raise ExtractorError('No media found', expected=True)\n\n        over_18 = data.get('over_18')\n        if over_18 is True:\n            age_limit = 18\n        elif over_18 is False:\n            age_limit = 0\n        else:\n            age_limit = None\n\n        return {\n            '_type': 'url_transparent',\n            'url': video_url,\n            'title': data.get('title'),\n            'thumbnail': data.get('thumbnail'),\n            'timestamp': float_or_none(data.get('created_utc')),\n            'uploader': data.get('author'),\n            'like_count': int_or_none(data.get('ups')),\n            'dislike_count': int_or_none(data.get('downs')),\n            'comment_count': int_or_none(data.get('num_comments')),\n            'age_limit': age_limit,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "reddit.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/reddit.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}