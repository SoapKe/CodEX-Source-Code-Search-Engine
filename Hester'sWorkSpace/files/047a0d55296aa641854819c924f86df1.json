{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    get_element_by_id,\n)\n\n\nclass TechTVMITIE(InfoExtractor):\n    IE_NAME = 'techtv.mit.edu'\n    _VALID_URL = r'https?://techtv\\.mit\\.edu/(?:videos|embeds)/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://techtv.mit.edu/videos/25418-mit-dna-learning-center-set',\n        'md5': '00a3a27ee20d44bcaa0933ccec4a2cf7',\n        'info_dict': {\n            'id': '25418',\n            'ext': 'mp4',\n            'title': 'MIT DNA and Protein Sets',\n            'description': 'md5:46f5c69ce434f0a97e7c628cc142802d',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        raw_page = self._download_webpage(\n            'http://techtv.mit.edu/videos/%s' % video_id, video_id)\n        clean_page = re.compile(r'<!--.*?-->', re.S).sub('', raw_page)\n\n        base_url = self._proto_relative_url(self._search_regex(\n            r'ipadUrl: \\'(.+?cloudfront.net/)', raw_page, 'base url'), 'http:')\n        formats_json = self._search_regex(\n            r'bitrates: (\\[.+?\\])', raw_page, 'video formats')\n        formats_mit = json.loads(formats_json)\n        formats = [\n            {\n                'format_id': f['label'],\n                'url': base_url + f['url'].partition(':')[2],\n                'ext': f['url'].partition(':')[0],\n                'format': f['label'],\n                'width': f['width'],\n                'vbr': f['bitrate'],\n            }\n            for f in formats_mit\n        ]\n\n        title = get_element_by_id('edit-title', clean_page)\n        description = clean_html(get_element_by_id('edit-description', clean_page))\n        thumbnail = self._search_regex(\n            r'playlist:.*?url: \\'(.+?)\\'',\n            raw_page, 'thumbnail', flags=re.DOTALL)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n\n\nclass MITIE(TechTVMITIE):\n    IE_NAME = 'video.mit.edu'\n    _VALID_URL = r'https?://video\\.mit\\.edu/watch/(?P<title>[^/]+)'\n\n    _TEST = {\n        'url': 'http://video.mit.edu/watch/the-government-is-profiling-you-13222/',\n        'md5': '7db01d5ccc1895fc5010e9c9e13648da',\n        'info_dict': {\n            'id': '21783',\n            'ext': 'mp4',\n            'title': 'The Government is Profiling You',\n            'description': 'md5:ad5795fe1e1623b73620dbfd47df9afd',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        page_title = mobj.group('title')\n        webpage = self._download_webpage(url, page_title)\n        embed_url = self._search_regex(\n            r'<iframe .*?src=\"(.+?)\"', webpage, 'embed url')\n        return self.url_result(embed_url)\n\n\nclass OCWMITIE(InfoExtractor):\n    IE_NAME = 'ocw.mit.edu'\n    _VALID_URL = r'^https?://ocw\\.mit\\.edu/courses/(?P<topic>[a-z0-9\\-]+)'\n    _BASE_URL = 'http://ocw.mit.edu/'\n\n    _TESTS = [\n        {\n            'url': 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-041-probabilistic-systems-analysis-and-applied-probability-fall-2010/video-lectures/lecture-7-multiple-variables-expectations-independence/',\n            'info_dict': {\n                'id': 'EObHWIEKGjA',\n                'ext': 'webm',\n                'title': 'Lecture 7: Multiple Discrete Random Variables: Expectations, Conditioning, Independence',\n                'description': 'In this lecture, the professor discussed multiple random variables, expectations, and binomial distribution.',\n                'upload_date': '20121109',\n                'uploader_id': 'MIT',\n                'uploader': 'MIT OpenCourseWare',\n            }\n        },\n        {\n            'url': 'http://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/1.-differentiation/part-a-definition-and-basic-rules/session-1-introduction-to-derivatives/',\n            'info_dict': {\n                'id': '7K1sB05pE0A',\n                'ext': 'mp4',\n                'title': 'Session 1: Introduction to Derivatives',\n                'upload_date': '20090818',\n                'uploader_id': 'MIT',\n                'uploader': 'MIT OpenCourseWare',\n                'description': 'This section contains lecture video excerpts, lecture notes, an interactive mathlet with supporting documents, and problem solving videos.',\n            }\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        topic = mobj.group('topic')\n\n        webpage = self._download_webpage(url, topic)\n        title = self._html_search_meta('WT.cg_s', webpage)\n        description = self._html_search_meta('Description', webpage)\n\n        \n        embed_chapter_media = re.search(r'ocw_embed_chapter_media\\((.+?)\\)', webpage)\n        if embed_chapter_media:\n            metadata = re.sub(r'[\\'\"]', '', embed_chapter_media.group(1))\n            metadata = re.split(r', ?', metadata)\n            yt = metadata[1]\n        else:\n            \n            embed_media = re.search(r'ocw_embed_media\\((.+?)\\)', webpage)\n            if embed_media:\n                metadata = re.sub(r'[\\'\"]', '', embed_media.group(1))\n                metadata = re.split(r', ?', metadata)\n                yt = metadata[1]\n            else:\n                raise ExtractorError('Unable to find embedded YouTube video.')\n        video_id = YoutubeIE.extract_id(yt)\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'url': yt,\n            'ie_key': 'Youtube',\n        }\n", "comments": "# search for call to ocw_embed_chapter_media(container_id, media_url, provider, page_url, image_url, start, stop, captions_file)\n# search for call to ocw_embed_chapter_media(container_id, media_url, provider, page_url, image_url, captions_file)\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    get_element_by_id,\n)\n\n\nclass TechTVMITIE(InfoExtractor):\n    IE_NAME = 'techtv.mit.edu'\n    _VALID_URL = r'https?://techtv\\.mit\\.edu/(?:videos|embeds)/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://techtv.mit.edu/videos/25418-mit-dna-learning-center-set',\n        'md5': '00a3a27ee20d44bcaa0933ccec4a2cf7',\n        'info_dict': {\n            'id': '25418',\n            'ext': 'mp4',\n            'title': 'MIT DNA and Protein Sets',\n            'description': 'md5:46f5c69ce434f0a97e7c628cc142802d',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        raw_page = self._download_webpage(\n            'http://techtv.mit.edu/videos/%s' % video_id, video_id)\n        clean_page = re.compile(r'<!--.*?-->', re.S).sub('', raw_page)\n\n        base_url = self._proto_relative_url(self._search_regex(\n            r'ipadUrl: \\'(.+?cloudfront.net/)', raw_page, 'base url'), 'http:')\n        formats_json = self._search_regex(\n            r'bitrates: (\\[.+?\\])', raw_page, 'video formats')\n        formats_mit = json.loads(formats_json)\n        formats = [\n            {\n                'format_id': f['label'],\n                'url': base_url + f['url'].partition(':')[2],\n                'ext': f['url'].partition(':')[0],\n                'format': f['label'],\n                'width': f['width'],\n                'vbr': f['bitrate'],\n            }\n            for f in formats_mit\n        ]\n\n        title = get_element_by_id('edit-title', clean_page)\n        description = clean_html(get_element_by_id('edit-description', clean_page))\n        thumbnail = self._search_regex(\n            r'playlist:.*?url: \\'(.+?)\\'',\n            raw_page, 'thumbnail', flags=re.DOTALL)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n\n\nclass MITIE(TechTVMITIE):\n    IE_NAME = 'video.mit.edu'\n    _VALID_URL = r'https?://video\\.mit\\.edu/watch/(?P<title>[^/]+)'\n\n    _TEST = {\n        'url': 'http://video.mit.edu/watch/the-government-is-profiling-you-13222/',\n        'md5': '7db01d5ccc1895fc5010e9c9e13648da',\n        'info_dict': {\n            'id': '21783',\n            'ext': 'mp4',\n            'title': 'The Government is Profiling You',\n            'description': 'md5:ad5795fe1e1623b73620dbfd47df9afd',\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        page_title = mobj.group('title')\n        webpage = self._download_webpage(url, page_title)\n        embed_url = self._search_regex(\n            r'<iframe .*?src=\"(.+?)\"', webpage, 'embed url')\n        return self.url_result(embed_url)\n\n\nclass OCWMITIE(InfoExtractor):\n    IE_NAME = 'ocw.mit.edu'\n    _VALID_URL = r'^https?://ocw\\.mit\\.edu/courses/(?P<topic>[a-z0-9\\-]+)'\n    _BASE_URL = 'http://ocw.mit.edu/'\n\n    _TESTS = [\n        {\n            'url': 'http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-041-probabilistic-systems-analysis-and-applied-probability-fall-2010/video-lectures/lecture-7-multiple-variables-expectations-independence/',\n            'info_dict': {\n                'id': 'EObHWIEKGjA',\n                'ext': 'webm',\n                'title': 'Lecture 7: Multiple Discrete Random Variables: Expectations, Conditioning, Independence',\n                'description': 'In this lecture, the professor discussed multiple random variables, expectations, and binomial distribution.',\n                'upload_date': '20121109',\n                'uploader_id': 'MIT',\n                'uploader': 'MIT OpenCourseWare',\n            }\n        },\n        {\n            'url': 'http://ocw.mit.edu/courses/mathematics/18-01sc-single-variable-calculus-fall-2010/1.-differentiation/part-a-definition-and-basic-rules/session-1-introduction-to-derivatives/',\n            'info_dict': {\n                'id': '7K1sB05pE0A',\n                'ext': 'mp4',\n                'title': 'Session 1: Introduction to Derivatives',\n                'upload_date': '20090818',\n                'uploader_id': 'MIT',\n                'uploader': 'MIT OpenCourseWare',\n                'description': 'This section contains lecture video excerpts, lecture notes, an interactive mathlet with supporting documents, and problem solving videos.',\n            }\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        topic = mobj.group('topic')\n\n        webpage = self._download_webpage(url, topic)\n        title = self._html_search_meta('WT.cg_s', webpage)\n        description = self._html_search_meta('Description', webpage)\n\n        # search for call to ocw_embed_chapter_media(container_id, media_url, provider, page_url, image_url, start, stop, captions_file)\n        embed_chapter_media = re.search(r'ocw_embed_chapter_media\\((.+?)\\)', webpage)\n        if embed_chapter_media:\n            metadata = re.sub(r'[\\'\"]', '', embed_chapter_media.group(1))\n            metadata = re.split(r', ?', metadata)\n            yt = metadata[1]\n        else:\n            # search for call to ocw_embed_chapter_media(container_id, media_url, provider, page_url, image_url, captions_file)\n            embed_media = re.search(r'ocw_embed_media\\((.+?)\\)', webpage)\n            if embed_media:\n                metadata = re.sub(r'[\\'\"]', '', embed_media.group(1))\n                metadata = re.split(r', ?', metadata)\n                yt = metadata[1]\n            else:\n                raise ExtractorError('Unable to find embedded YouTube video.')\n        video_id = YoutubeIE.extract_id(yt)\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'url': yt,\n            'ie_key': 'Youtube',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mit.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mit.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}