{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass YinYueTaiIE(InfoExtractor):\n    IE_NAME = 'yinyuetai:video'\n    IE_DESC = '\u97f3\u60a6Tai'\n    _VALID_URL = r'https?://v\\.yinyuetai\\.com/video(?:/h5)?/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://v.yinyuetai.com/video/2322376',\n        'md5': '6e3abe28d38e3a54b591f9f040595ce0',\n        'info_dict': {\n            'id': '2322376',\n            'ext': 'mp4',\n            'title': '\u5c11\u5973\u65f6\u4ee3_PARTY_Music Video Teaser',\n            'creator': '\u5c11\u5973\u65f6\u4ee3',\n            'duration': 25,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://v.yinyuetai.com/video/h5/2322376',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        info = self._download_json(\n            'http://ext.yinyuetai.com/main/get-h-mv-info?json=true&videoId=%s' % video_id, video_id,\n            'Downloading mv info')['videoInfo']['coreVideoInfo']\n\n        if info['error']:\n            raise ExtractorError(info['errorMsg'], expected=True)\n\n        formats = [{\n            'url': format_info['videoUrl'],\n            'format_id': format_info['qualityLevel'],\n            'format': format_info.get('qualityLevelName'),\n            'filesize': format_info.get('fileSize'),\n            \n            'ext': 'mp4',\n            'tbr': format_info.get('bitrate'),\n        } for format_info in info['videoUrlModels']]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info['videoName'],\n            'thumbnail': info.get('bigHeadImage'),\n            'creator': info.get('artistNames'),\n            'duration': info.get('duration'),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# though URLs ends with .flv, the downloaded files are in fact mp4\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass YinYueTaiIE(InfoExtractor):\n    IE_NAME = 'yinyuetai:video'\n    IE_DESC = '\u97f3\u60a6Tai'\n    _VALID_URL = r'https?://v\\.yinyuetai\\.com/video(?:/h5)?/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://v.yinyuetai.com/video/2322376',\n        'md5': '6e3abe28d38e3a54b591f9f040595ce0',\n        'info_dict': {\n            'id': '2322376',\n            'ext': 'mp4',\n            'title': '\u5c11\u5973\u65f6\u4ee3_PARTY_Music Video Teaser',\n            'creator': '\u5c11\u5973\u65f6\u4ee3',\n            'duration': 25,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://v.yinyuetai.com/video/h5/2322376',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        info = self._download_json(\n            'http://ext.yinyuetai.com/main/get-h-mv-info?json=true&videoId=%s' % video_id, video_id,\n            'Downloading mv info')['videoInfo']['coreVideoInfo']\n\n        if info['error']:\n            raise ExtractorError(info['errorMsg'], expected=True)\n\n        formats = [{\n            'url': format_info['videoUrl'],\n            'format_id': format_info['qualityLevel'],\n            'format': format_info.get('qualityLevelName'),\n            'filesize': format_info.get('fileSize'),\n            # though URLs ends with .flv, the downloaded files are in fact mp4\n            'ext': 'mp4',\n            'tbr': format_info.get('bitrate'),\n        } for format_info in info['videoUrlModels']]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info['videoName'],\n            'thumbnail': info.get('bigHeadImage'),\n            'creator': info.get('artistNames'),\n            'duration': info.get('duration'),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "yinyuetai.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/yinyuetai.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}