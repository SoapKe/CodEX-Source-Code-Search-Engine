{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_filesize,\n    unified_strdate,\n)\n\n\nclass XboxClipsIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?xboxclips\\.com/(?:video\\.php\\?.*vid=|[^/]+/)(?P<id>[\\w-]{36})'\n    _TEST = {\n        'url': 'http://xboxclips.com/video.php?uid=2533274823424419&gamertag=Iabdulelah&vid=074a69a9-5faf-46aa-b93b-9909c1720325',\n        'md5': 'fbe1ec805e920aeb8eced3c3e657df5d',\n        'info_dict': {\n            'id': '074a69a9-5faf-46aa-b93b-9909c1720325',\n            'ext': 'mp4',\n            'title': 'Iabdulelah playing Titanfall',\n            'filesize_approx': 26800000,\n            'upload_date': '20140807',\n            'duration': 56,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._html_search_regex(\n            r'>(?:Link|Download): <a[^>]+href=\"([^\"]+)\"', webpage, 'video URL')\n        title = self._html_search_regex(\n            r'<title>XboxClips \\| ([^<]+)</title>', webpage, 'title')\n        upload_date = unified_strdate(self._html_search_regex(\n            r'>Recorded: ([^<]+)<', webpage, 'upload date', fatal=False))\n        filesize = parse_filesize(self._html_search_regex(\n            r'>Size: ([^<]+)<', webpage, 'file size', fatal=False))\n        duration = int_or_none(self._html_search_regex(\n            r'>Duration: (\\d+) Seconds<', webpage, 'duration', fatal=False))\n        view_count = int_or_none(self._html_search_regex(\n            r'>Views: (\\d+)<', webpage, 'view count', fatal=False))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'upload_date': upload_date,\n            'filesize_approx': filesize,\n            'duration': duration,\n            'view_count': view_count,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_filesize,\n    unified_strdate,\n)\n\n\nclass XboxClipsIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?xboxclips\\.com/(?:video\\.php\\?.*vid=|[^/]+/)(?P<id>[\\w-]{36})'\n    _TEST = {\n        'url': 'http://xboxclips.com/video.php?uid=2533274823424419&gamertag=Iabdulelah&vid=074a69a9-5faf-46aa-b93b-9909c1720325',\n        'md5': 'fbe1ec805e920aeb8eced3c3e657df5d',\n        'info_dict': {\n            'id': '074a69a9-5faf-46aa-b93b-9909c1720325',\n            'ext': 'mp4',\n            'title': 'Iabdulelah playing Titanfall',\n            'filesize_approx': 26800000,\n            'upload_date': '20140807',\n            'duration': 56,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._html_search_regex(\n            r'>(?:Link|Download): <a[^>]+href=\"([^\"]+)\"', webpage, 'video URL')\n        title = self._html_search_regex(\n            r'<title>XboxClips \\| ([^<]+)</title>', webpage, 'title')\n        upload_date = unified_strdate(self._html_search_regex(\n            r'>Recorded: ([^<]+)<', webpage, 'upload date', fatal=False))\n        filesize = parse_filesize(self._html_search_regex(\n            r'>Size: ([^<]+)<', webpage, 'file size', fatal=False))\n        duration = int_or_none(self._html_search_regex(\n            r'>Duration: (\\d+) Seconds<', webpage, 'duration', fatal=False))\n        view_count = int_or_none(self._html_search_regex(\n            r'>Views: (\\d+)<', webpage, 'view count', fatal=False))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'upload_date': upload_date,\n            'filesize_approx': filesize,\n            'duration': duration,\n            'view_count': view_count,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xboxclips.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xboxclips.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}