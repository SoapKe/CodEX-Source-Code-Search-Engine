{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: digital_ocean_block_storage\nshort_description: Create/destroy or attach/detach Block Storage volumes in DigitalOcean\ndescription:\n     - Create/destroy Block Storage volume in DigitalOcean, or attach/detach Block Storage volume to a droplet.\nversion_added: \"2.2\"\noptions:\n  command:\n    description:\n     - Which operation do you want to perform.\n    choices: ['create', 'attach']\n    required: true\n  state:\n    description:\n     - Indicate desired state of the target.\n    choices: ['present', 'absent']\n    required: true\n  block_size:\n    description:\n    - The size of the Block Storage volume in gigabytes. Required when command=create and state=present. If snapshot_id is included, this will be ignored.\n  volume_name:\n    description:\n    - The name of the Block Storage volume.\n    required: true\n  description:\n    description:\n    - Description of the Block Storage volume.\n  region:\n    description:\n    - The slug of the region where your Block Storage volume should be located in. If snapshot_id is included, this will be ignored.\n    required: true\n  snapshot_id:\n    version_added: \"2.5\"\n    description:\n    - The snapshot id you would like the Block Storage volume created with. If included, region and block_size will be ignored and changed to null.\n  droplet_id:\n    description:\n    - The droplet id you want to operate on. Required when command=attach.\nextends_documentation_fragment: digital_ocean.documentation\nnotes:\n  - Two environment variables can be used, DO_API_KEY and DO_API_TOKEN.\n    They both refer to the v2 token.\n  - If snapshot_id is used, region and block_size will be ignored and changed to null.\n\nauthor:\n    - \"Harnek Sidhu (github: @harneksidhu)\"\n'''\n\nEXAMPLES = '''\n Create new Block Storage\n- digital_ocean_block_storage:\n    state: present\n    command: create\n    api_token: <TOKEN>\n    region: nyc1\n    block_size: 10\n    volume_name: nyc1-block-storage\n Delete Block Storage\n- digital_ocean_block_storage:\n    state: absent\n    command: create\n    api_token: <TOKEN>\n    region: nyc1\n    volume_name: nyc1-block-storage\n Attach Block Storage to a Droplet\n- digital_ocean_block_storage:\n    state: present\n    command: attach\n    api_token: <TOKEN>\n    volume_name: nyc1-block-storage\n    region: nyc1\n    droplet_id: <ID>\n Detach Block Storage from a Droplet\n- digital_ocean_block_storage:\n    state: absent\n    command: attach\n    api_token: <TOKEN>\n    volume_name: nyc1-block-storage\n    region: nyc1\n    droplet_id: <ID>\n'''\n\nRETURN = '''\nid:\n    description: Unique identifier of a Block Storage volume returned during creation.\n    returned: changed\n    type: string\n    sample: \"69b25d9a-494c-12e6-a5af-001f53126b44\"\n'''\n\nimport time\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.digital_ocean import DigitalOceanHelper\n\n\nclass DOBlockStorageException(Exception):\n    pass\n\n\nclass DOBlockStorage(object):\n    def __init__(self, module):\n        self.module = module\n        self.rest = DigitalOceanHelper(module)\n\n    def get_key_or_fail(self, k):\n        v = self.module.params[k]\n        if v is None:\n            self.module.fail_json(msg='Unable to load %s' % k)\n        return v\n\n    def poll_action_for_complete_status(self, action_id):\n        url = 'actions/{}'.format(action_id)\n        end_time = time.time() + self.module.params['timeout']\n        while time.time() < end_time:\n            time.sleep(2)\n            response = self.rest.get(url)\n            status = response.status_code\n            json = response.json\n            if status == 200:\n                if json['action']['status'] == 'completed':\n                    return True\n                elif json['action']['status'] == 'errored':\n                    raise DOBlockStorageException(json['message'])\n        raise DOBlockStorageException('Unable to reach api.digitalocean.com')\n\n    def get_attached_droplet_ID(self, volume_name, region):\n        url = 'volumes?name={}&region={}'.format(volume_name, region)\n        response = self.rest.get(url)\n        status = response.status_code\n        json = response.json\n        if status == 200:\n            volumes = json['volumes']\n            if len(volumes) > 0:\n                droplet_ids = volumes[0]['droplet_ids']\n                if len(droplet_ids) > 0:\n                    return droplet_ids[0]\n            return None\n        else:\n            raise DOBlockStorageException(json['message'])\n\n    def attach_detach_block_storage(self, method, volume_name, region, droplet_id):\n        data = {\n            'type': method,\n            'volume_name': volume_name,\n            'region': region,\n            'droplet_id': droplet_id\n        }\n        response = self.rest.post('volumes/actions', data=data)\n        status = response.status_code\n        json = response.json\n        if status == 202:\n            return self.poll_action_for_complete_status(json['action']['id'])\n        elif status == 200:\n            return True\n        elif status == 422:\n            return False\n        else:\n            raise DOBlockStorageException(json['message'])\n\n    def create_block_storage(self):\n        volume_name = self.get_key_or_fail('volume_name')\n        snapshot_id = self.module.params['snapshot_id']\n        if snapshot_id:\n            self.module.params['block_size'] = None\n            self.module.params['region'] = None\n            block_size = None\n            region = None\n        else:\n            block_size = self.get_key_or_fail('block_size')\n            region = self.get_key_or_fail('region')\n        description = self.module.params['description']\n        data = {\n            'size_gigabytes': block_size,\n            'name': volume_name,\n            'description': description,\n            'region': region,\n            'snapshot_id': snapshot_id,\n        }\n        response = self.rest.post(\"volumes\", data=data)\n        status = response.status_code\n        json = response.json\n        if status == 201:\n            self.module.exit_json(changed=True, id=json['volume']['id'])\n        elif status == 409 and json['id'] == 'already_exists':\n            self.module.exit_json(changed=False)\n        else:\n            raise DOBlockStorageException(json['message'])\n\n    def delete_block_storage(self):\n        volume_name = self.get_key_or_fail('volume_name')\n        region = self.get_key_or_fail('region')\n        url = 'volumes?name={}&region={}'.format(volume_name, region)\n        attached_droplet_id = self.get_attached_droplet_ID(volume_name, region)\n        if attached_droplet_id is not None:\n            self.attach_detach_block_storage('detach', volume_name, region, attached_droplet_id)\n        response = self.rest.delete(url)\n        status = response.status_code\n        json = response.json\n        if status == 204:\n            self.module.exit_json(changed=True)\n        elif status == 404:\n            self.module.exit_json(changed=False)\n        else:\n            raise DOBlockStorageException(json['message'])\n\n    def attach_block_storage(self):\n        volume_name = self.get_key_or_fail('volume_name')\n        region = self.get_key_or_fail('region')\n        droplet_id = self.get_key_or_fail('droplet_id')\n        attached_droplet_id = self.get_attached_droplet_ID(volume_name, region)\n        if attached_droplet_id is not None:\n            if attached_droplet_id == droplet_id:\n                self.module.exit_json(changed=False)\n            else:\n                self.attach_detach_block_storage('detach', volume_name, region, attached_droplet_id)\n        changed_status = self.attach_detach_block_storage('attach', volume_name, region, droplet_id)\n        self.module.exit_json(changed=changed_status)\n\n    def detach_block_storage(self):\n        volume_name = self.get_key_or_fail('volume_name')\n        region = self.get_key_or_fail('region')\n        droplet_id = self.get_key_or_fail('droplet_id')\n        changed_status = self.attach_detach_block_storage('detach', volume_name, region, droplet_id)\n        self.module.exit_json(changed=changed_status)\n\n\ndef handle_request(module):\n    block_storage = DOBlockStorage(module)\n    command = module.params['command']\n    state = module.params['state']\n    if command == 'create':\n        if state == 'present':\n            block_storage.create_block_storage()\n        elif state == 'absent':\n            block_storage.delete_block_storage()\n    elif command == 'attach':\n        if state == 'present':\n            block_storage.attach_block_storage()\n        elif state == 'absent':\n            block_storage.detach_block_storage()\n\n\ndef main():\n    argument_spec = DigitalOceanHelper.digital_ocean_argument_spec()\n    argument_spec.update(\n        state=dict(choices=['present', 'absent'], required=True),\n        command=dict(choices=['create', 'attach'], required=True),\n        block_size=dict(type='int', required=False),\n        volume_name=dict(type='str', required=True),\n        description=dict(type='str'),\n        region=dict(type='str', required=False),\n        snapshot_id=dict(type='str', required=False),\n        droplet_id=dict(type='int')\n    )\n\n    module = AnsibleModule(argument_spec=argument_spec)\n\n    try:\n        handle_request(module)\n    except DOBlockStorageException as e:\n        module.fail_json(msg=e.message, exception=traceback.format_exc())\n    except KeyError as e:\n        module.fail_json(msg='Unable to load %s' % e.message, exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  digital ocean block storage short description  create destroy attach detach block storage volumes digitalocean description         create destroy block storage volume digitalocean  attach detach block storage volume droplet  version added   2 2  options    command      description         which operation want perform      choices    create    attach       required  true   state      description         indicate desired state target      choices    present    absent       required  true   block size      description        the size block storage volume gigabytes  required command create state present  if snapshot id included  ignored    volume name      description        the name block storage volume      required  true   description      description        description block storage volume    region      description        the slug region block storage volume located  if snapshot id included  ignored      required  true   snapshot id      version added   2 5      description        the snapshot id would like block storage volume created  if included  region block size ignored changed null    droplet id      description        the droplet id want operate  required command attach  extends documentation fragment  digital ocean documentation notes      two environment variables used  do api key do api token      they refer v2 token      if snapshot id used  region block size ignored changed null   author         harnek sidhu (github   harneksidhu)       examples         create new block storage   digital ocean block storage      state  present     command  create     api token   token      region  nyc1     block size  10     volume name  nyc1 block storage   delete block storage   digital ocean block storage      state  absent     command  create     api token   token      region  nyc1     volume name  nyc1 block storage   attach block storage droplet   digital ocean block storage      state  present     command  attach     api token   token      volume name  nyc1 block storage     region  nyc1     droplet id   id    detach block storage droplet   digital ocean block storage      state  absent     command  attach     api token   token      volume name  nyc1 block storage     region  nyc1     droplet id   id       return       id      description  unique identifier block storage volume returned creation      returned  changed     type  string     sample   69b25d9a 494c 12e6 a5af 001f53126b44          usr bin python        coding  utf 8           copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create new block storage    delete block storage    attach block storage droplet    detach block storage droplet ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: digital_ocean_block_storage\nshort_description: Create/destroy or attach/detach Block Storage volumes in DigitalOcean\ndescription:\n     - Create/destroy Block Storage volume in DigitalOcean, or attach/detach Block Storage volume to a droplet.\nversion_added: \"2.2\"\noptions:\n  command:\n    description:\n     - Which operation do you want to perform.\n    choices: ['create', 'attach']\n    required: true\n  state:\n    description:\n     - Indicate desired state of the target.\n    choices: ['present', 'absent']\n    required: true\n  block_size:\n    description:\n    - The size of the Block Storage volume in gigabytes. Required when command=create and state=present. If snapshot_id is included, this will be ignored.\n  volume_name:\n    description:\n    - The name of the Block Storage volume.\n    required: true\n  description:\n    description:\n    - Description of the Block Storage volume.\n  region:\n    description:\n    - The slug of the region where your Block Storage volume should be located in. If snapshot_id is included, this will be ignored.\n    required: true\n  snapshot_id:\n    version_added: \"2.5\"\n    description:\n    - The snapshot id you would like the Block Storage volume created with. If included, region and block_size will be ignored and changed to null.\n  droplet_id:\n    description:\n    - The droplet id you want to operate on. Required when command=attach.\nextends_documentation_fragment: digital_ocean.documentation\nnotes:\n  - Two environment variables can be used, DO_API_KEY and DO_API_TOKEN.\n    They both refer to the v2 token.\n  - If snapshot_id is used, region and block_size will be ignored and changed to null.\n\nauthor:\n    - \"Harnek Sidhu (github: @harneksidhu)\"\n'''\n\nEXAMPLES = '''\n# Create new Block Storage\n- digital_ocean_block_storage:\n    state: present\n    command: create\n    api_token: <TOKEN>\n    region: nyc1\n    block_size: 10\n    volume_name: nyc1-block-storage\n# Delete Block Storage\n- digital_ocean_block_storage:\n    state: absent\n    command: create\n    api_token: <TOKEN>\n    region: nyc1\n    volume_name: nyc1-block-storage\n# Attach Block Storage to a Droplet\n- digital_ocean_block_storage:\n    state: present\n    command: attach\n    api_token: <TOKEN>\n    volume_name: nyc1-block-storage\n    region: nyc1\n    droplet_id: <ID>\n# Detach Block Storage from a Droplet\n- digital_ocean_block_storage:\n    state: absent\n    command: attach\n    api_token: <TOKEN>\n    volume_name: nyc1-block-storage\n    region: nyc1\n    droplet_id: <ID>\n'''\n\nRETURN = '''\nid:\n    description: Unique identifier of a Block Storage volume returned during creation.\n    returned: changed\n    type: string\n    sample: \"69b25d9a-494c-12e6-a5af-001f53126b44\"\n'''\n\nimport time\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.digital_ocean import DigitalOceanHelper\n\n\nclass DOBlockStorageException(Exception):\n    pass\n\n\nclass DOBlockStorage(object):\n    def __init__(self, module):\n        self.module = module\n        self.rest = DigitalOceanHelper(module)\n\n    def get_key_or_fail(self, k):\n        v = self.module.params[k]\n        if v is None:\n            self.module.fail_json(msg='Unable to load %s' % k)\n        return v\n\n    def poll_action_for_complete_status(self, action_id):\n        url = 'actions/{}'.format(action_id)\n        end_time = time.time() + self.module.params['timeout']\n        while time.time() < end_time:\n            time.sleep(2)\n            response = self.rest.get(url)\n            status = response.status_code\n            json = response.json\n            if status == 200:\n                if json['action']['status'] == 'completed':\n                    return True\n                elif json['action']['status'] == 'errored':\n                    raise DOBlockStorageException(json['message'])\n        raise DOBlockStorageException('Unable to reach api.digitalocean.com')\n\n    def get_attached_droplet_ID(self, volume_name, region):\n        url = 'volumes?name={}&region={}'.format(volume_name, region)\n        response = self.rest.get(url)\n        status = response.status_code\n        json = response.json\n        if status == 200:\n            volumes = json['volumes']\n            if len(volumes) > 0:\n                droplet_ids = volumes[0]['droplet_ids']\n                if len(droplet_ids) > 0:\n                    return droplet_ids[0]\n            return None\n        else:\n            raise DOBlockStorageException(json['message'])\n\n    def attach_detach_block_storage(self, method, volume_name, region, droplet_id):\n        data = {\n            'type': method,\n            'volume_name': volume_name,\n            'region': region,\n            'droplet_id': droplet_id\n        }\n        response = self.rest.post('volumes/actions', data=data)\n        status = response.status_code\n        json = response.json\n        if status == 202:\n            return self.poll_action_for_complete_status(json['action']['id'])\n        elif status == 200:\n            return True\n        elif status == 422:\n            return False\n        else:\n            raise DOBlockStorageException(json['message'])\n\n    def create_block_storage(self):\n        volume_name = self.get_key_or_fail('volume_name')\n        snapshot_id = self.module.params['snapshot_id']\n        if snapshot_id:\n            self.module.params['block_size'] = None\n            self.module.params['region'] = None\n            block_size = None\n            region = None\n        else:\n            block_size = self.get_key_or_fail('block_size')\n            region = self.get_key_or_fail('region')\n        description = self.module.params['description']\n        data = {\n            'size_gigabytes': block_size,\n            'name': volume_name,\n            'description': description,\n            'region': region,\n            'snapshot_id': snapshot_id,\n        }\n        response = self.rest.post(\"volumes\", data=data)\n        status = response.status_code\n        json = response.json\n        if status == 201:\n            self.module.exit_json(changed=True, id=json['volume']['id'])\n        elif status == 409 and json['id'] == 'already_exists':\n            self.module.exit_json(changed=False)\n        else:\n            raise DOBlockStorageException(json['message'])\n\n    def delete_block_storage(self):\n        volume_name = self.get_key_or_fail('volume_name')\n        region = self.get_key_or_fail('region')\n        url = 'volumes?name={}&region={}'.format(volume_name, region)\n        attached_droplet_id = self.get_attached_droplet_ID(volume_name, region)\n        if attached_droplet_id is not None:\n            self.attach_detach_block_storage('detach', volume_name, region, attached_droplet_id)\n        response = self.rest.delete(url)\n        status = response.status_code\n        json = response.json\n        if status == 204:\n            self.module.exit_json(changed=True)\n        elif status == 404:\n            self.module.exit_json(changed=False)\n        else:\n            raise DOBlockStorageException(json['message'])\n\n    def attach_block_storage(self):\n        volume_name = self.get_key_or_fail('volume_name')\n        region = self.get_key_or_fail('region')\n        droplet_id = self.get_key_or_fail('droplet_id')\n        attached_droplet_id = self.get_attached_droplet_ID(volume_name, region)\n        if attached_droplet_id is not None:\n            if attached_droplet_id == droplet_id:\n                self.module.exit_json(changed=False)\n            else:\n                self.attach_detach_block_storage('detach', volume_name, region, attached_droplet_id)\n        changed_status = self.attach_detach_block_storage('attach', volume_name, region, droplet_id)\n        self.module.exit_json(changed=changed_status)\n\n    def detach_block_storage(self):\n        volume_name = self.get_key_or_fail('volume_name')\n        region = self.get_key_or_fail('region')\n        droplet_id = self.get_key_or_fail('droplet_id')\n        changed_status = self.attach_detach_block_storage('detach', volume_name, region, droplet_id)\n        self.module.exit_json(changed=changed_status)\n\n\ndef handle_request(module):\n    block_storage = DOBlockStorage(module)\n    command = module.params['command']\n    state = module.params['state']\n    if command == 'create':\n        if state == 'present':\n            block_storage.create_block_storage()\n        elif state == 'absent':\n            block_storage.delete_block_storage()\n    elif command == 'attach':\n        if state == 'present':\n            block_storage.attach_block_storage()\n        elif state == 'absent':\n            block_storage.detach_block_storage()\n\n\ndef main():\n    argument_spec = DigitalOceanHelper.digital_ocean_argument_spec()\n    argument_spec.update(\n        state=dict(choices=['present', 'absent'], required=True),\n        command=dict(choices=['create', 'attach'], required=True),\n        block_size=dict(type='int', required=False),\n        volume_name=dict(type='str', required=True),\n        description=dict(type='str'),\n        region=dict(type='str', required=False),\n        snapshot_id=dict(type='str', required=False),\n        droplet_id=dict(type='int')\n    )\n\n    module = AnsibleModule(argument_spec=argument_spec)\n\n    try:\n        handle_request(module)\n    except DOBlockStorageException as e:\n        module.fail_json(msg=e.message, exception=traceback.format_exc())\n    except KeyError as e:\n        module.fail_json(msg='Unable to load %s' % e.message, exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "digital_ocean_block_storage.py", "id": "45bb76678dbc3ca09a59d2da70d2ad70", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/digital_ocean/digital_ocean_block_storage.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}