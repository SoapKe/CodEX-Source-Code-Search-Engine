{"author": "audreyr", "code": "# -*- coding: utf-8 -*-\n\n\"\"\"Module for setting up logging.\"\"\"\n\nimport logging\nimport sys\n\nLOG_LEVELS = {\n    'DEBUG': logging.DEBUG,\n    'INFO': logging.INFO,\n    'WARNING': logging.WARNING,\n    'ERROR': logging.ERROR,\n    'CRITICAL': logging.CRITICAL,\n}\n\nLOG_FORMATS = {\n    'DEBUG': u'%(levelname)s %(name)s: %(message)s',\n    'INFO': u'%(levelname)s: %(message)s',\n}\n\n\ndef configure_logger(stream_level='DEBUG', debug_file=None):\n    \"\"\"Configure logging for cookiecutter.\n\n    Set up logging to stdout with given level. If ``debug_file`` is given set\n    up logging to file with DEBUG level.\n    \"\"\"\n    \n    logger = logging.getLogger('cookiecutter')\n    logger.setLevel(logging.DEBUG)\n\n    \n    \n    del logger.handlers[:]\n\n    \n    if debug_file is not None:\n        debug_formatter = logging.Formatter(LOG_FORMATS['DEBUG'])\n        file_handler = logging.FileHandler(debug_file)\n        file_handler.setLevel(LOG_LEVELS['DEBUG'])\n        file_handler.setFormatter(debug_formatter)\n        logger.addHandler(file_handler)\n\n    \n    log_formatter = logging.Formatter(LOG_FORMATS[stream_level])\n    log_level = LOG_LEVELS[stream_level]\n\n    \n    stream_handler = logging.StreamHandler(stream=sys.stdout)\n    stream_handler.setLevel(log_level)\n    stream_handler.setFormatter(log_formatter)\n    logger.addHandler(stream_handler)\n\n    return logger\n", "comments": "   module setting logging      import logging import sys  log levels          debug   logging debug       info   logging info       warning   logging warning       error   logging error       critical   logging critical     log formats          debug   u  (levelname)s  (name)s   (message)s        info   u  (levelname)s   (message)s       def configure logger(stream level  debug   debug file none)         configure logging cookiecutter       set logging stdout given level  if   debug file   given set     logging file debug level                 coding  utf 8        set  cookiecutter  logger    remove attached handlers  case    logger using name  cookiecutter     create file handler log file provided    get settings based given stream level    create stream handler ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\"Module for setting up logging.\"\"\"\n\nimport logging\nimport sys\n\nLOG_LEVELS = {\n    'DEBUG': logging.DEBUG,\n    'INFO': logging.INFO,\n    'WARNING': logging.WARNING,\n    'ERROR': logging.ERROR,\n    'CRITICAL': logging.CRITICAL,\n}\n\nLOG_FORMATS = {\n    'DEBUG': u'%(levelname)s %(name)s: %(message)s',\n    'INFO': u'%(levelname)s: %(message)s',\n}\n\n\ndef configure_logger(stream_level='DEBUG', debug_file=None):\n    \"\"\"Configure logging for cookiecutter.\n\n    Set up logging to stdout with given level. If ``debug_file`` is given set\n    up logging to file with DEBUG level.\n    \"\"\"\n    # Set up 'cookiecutter' logger\n    logger = logging.getLogger('cookiecutter')\n    logger.setLevel(logging.DEBUG)\n\n    # Remove all attached handlers, in case there was\n    # a logger with using the name 'cookiecutter'\n    del logger.handlers[:]\n\n    # Create a file handler if a log file is provided\n    if debug_file is not None:\n        debug_formatter = logging.Formatter(LOG_FORMATS['DEBUG'])\n        file_handler = logging.FileHandler(debug_file)\n        file_handler.setLevel(LOG_LEVELS['DEBUG'])\n        file_handler.setFormatter(debug_formatter)\n        logger.addHandler(file_handler)\n\n    # Get settings based on the given stream_level\n    log_formatter = logging.Formatter(LOG_FORMATS[stream_level])\n    log_level = LOG_LEVELS[stream_level]\n\n    # Create a stream handler\n    stream_handler = logging.StreamHandler(stream=sys.stdout)\n    stream_handler.setLevel(log_level)\n    stream_handler.setFormatter(log_formatter)\n    logger.addHandler(stream_handler)\n\n    return logger\n", "description": "A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.", "file_name": "log.py", "id": "fcf216f2c14fb6dfedae15baf0074520", "language": "Python", "project_name": "cookiecutter", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/audreyr-cookiecutter/audreyr-cookiecutter-7154cf2/cookiecutter/log.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:52:22Z", "url": "https://github.com/audreyr/cookiecutter", "wiki": true}