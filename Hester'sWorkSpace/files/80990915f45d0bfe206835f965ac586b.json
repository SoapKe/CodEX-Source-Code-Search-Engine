{"author": "donnemartin", "code": "from nose.tools import assert_equal\nfrom nose.tools import raises\n\n\nclass TestCheckBalance(object):\n\n    @raises(TypeError)\n    def test_check_balance_empty(self):\n        bst = BstBalance(None)\n        bst.check_balance()\n\n    def test_check_balance(self):\n        bst = BstBalance(Node(5))\n        assert_equal(bst.check_balance(), True)\n\n        bst.insert(3)\n        bst.insert(8)\n        bst.insert(1)\n        bst.insert(4)\n        assert_equal(bst.check_balance(), True)\n\n        bst = BstBalance(Node(5))\n        bst.insert(3)\n        bst.insert(8)\n        bst.insert(9)\n        bst.insert(10)\n        assert_equal(bst.check_balance(), False)\n\n        bst = BstBalance(Node(3))\n        bst.insert(2)\n        bst.insert(1)\n        bst.insert(5)\n        bst.insert(4)\n        bst.insert(6)\n        bst.insert(7)\n        assert_equal(bst.check_balance(), True)\n\n        print('Success: test_check_balance')\n\n\ndef main():\n    test = TestCheckBalance()\n    test.test_check_balance_empty()\n    test.test_check_balance()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\nfrom nose.tools import raises\n\n\nclass TestCheckBalance(object):\n\n    @raises(TypeError)\n    def test_check_balance_empty(self):\n        bst = BstBalance(None)\n        bst.check_balance()\n\n    def test_check_balance(self):\n        bst = BstBalance(Node(5))\n        assert_equal(bst.check_balance(), True)\n\n        bst.insert(3)\n        bst.insert(8)\n        bst.insert(1)\n        bst.insert(4)\n        assert_equal(bst.check_balance(), True)\n\n        bst = BstBalance(Node(5))\n        bst.insert(3)\n        bst.insert(8)\n        bst.insert(9)\n        bst.insert(10)\n        assert_equal(bst.check_balance(), False)\n\n        bst = BstBalance(Node(3))\n        bst.insert(2)\n        bst.insert(1)\n        bst.insert(5)\n        bst.insert(4)\n        bst.insert(6)\n        bst.insert(7)\n        assert_equal(bst.check_balance(), True)\n\n        print('Success: test_check_balance')\n\n\ndef main():\n    test = TestCheckBalance()\n    test.test_check_balance_empty()\n    test.test_check_balance()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_check_balance.py", "id": "80990915f45d0bfe206835f965ac586b", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/check_balance/test_check_balance.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}