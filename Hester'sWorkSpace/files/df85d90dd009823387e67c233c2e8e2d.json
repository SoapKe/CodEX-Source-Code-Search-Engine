{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_etree_fromstring\nfrom ..utils import (\n    xpath_element,\n    xpath_text,\n    int_or_none,\n)\n\n\nclass FazIE(InfoExtractor):\n    IE_NAME = 'faz.net'\n    _VALID_URL = r'https?://(?:www\\.)?faz\\.net/(?:[^/]+/)*.*?-(?P<id>\\d+)\\.html'\n\n    _TESTS = [{\n        'url': 'http://www.faz.net/multimedia/videos/stockholm-chemie-nobelpreis-fuer-drei-amerikanische-forscher-12610585.html',\n        'info_dict': {\n            'id': '12610585',\n            'ext': 'mp4',\n            'title': 'Stockholm: Chemie-Nobelpreis f\u00fcr drei amerikanische Forscher',\n            'description': 'md5:1453fbf9a0d041d985a47306192ea253',\n        },\n    }, {\n        'url': 'http://www.faz.net/aktuell/politik/berlin-gabriel-besteht-zerreissprobe-ueber-datenspeicherung-13659345.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.faz.net/berlin-gabriel-besteht-zerreissprobe-ueber-datenspeicherung-13659345.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.faz.net/-13659345.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.faz.net/aktuell/politik/-13659345.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.faz.net/foobarblafasel-13659345.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        description = self._og_search_description(webpage)\n        media = self._html_search_regex(\n            r\"data-videojs-media='([^']+)\",\n            webpage, 'media')\n        if media == 'extern':\n            perform_url = self._search_regex(\n                r\"<iframe[^>]+?src='((?:http:)?//player\\.performgroup\\.com/eplayer/eplayer\\.html\n                webpage, 'perform url')\n            return self.url_result(perform_url)\n        config = compat_etree_fromstring(media)\n\n        encodings = xpath_element(config, 'ENCODINGS', 'encodings', True)\n        formats = []\n        for pref, code in enumerate(['LOW', 'HIGH', 'HQ']):\n            encoding = xpath_element(encodings, code)\n            if encoding is not None:\n                encoding_url = xpath_text(encoding, 'FILENAME')\n                if encoding_url:\n                    tbr = xpath_text(encoding, 'AVERAGEBITRATE', 1000)\n                    if tbr:\n                        tbr = int_or_none(tbr.replace(',', '.'))\n                    f = {\n                        'url': encoding_url,\n                        'format_id': code.lower(),\n                        'quality': pref,\n                        'tbr': tbr,\n                        'vcodec': xpath_text(encoding, 'CODEC'),\n                    }\n                    mobj = re.search(r'(\\d+)x(\\d+)_(\\d+)\\.mp4', encoding_url)\n                    if mobj:\n                        f.update({\n                            'width': int(mobj.group(1)),\n                            'height': int(mobj.group(2)),\n                            'tbr': tbr or int(mobj.group(3)),\n                        })\n                    formats.append(f)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n            'description': description.strip() if description else None,\n            'thumbnail': xpath_text(config, 'STILL/STILL_BIG'),\n            'duration': int_or_none(xpath_text(config, 'DURATION')),\n        }\n", "comments": "# coding: utf-8\n#/?[0-9a-f]{26}\\.[0-9a-z]{26})\",\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_etree_fromstring\nfrom ..utils import (\n    xpath_element,\n    xpath_text,\n    int_or_none,\n)\n\n\nclass FazIE(InfoExtractor):\n    IE_NAME = 'faz.net'\n    _VALID_URL = r'https?://(?:www\\.)?faz\\.net/(?:[^/]+/)*.*?-(?P<id>\\d+)\\.html'\n\n    _TESTS = [{\n        'url': 'http://www.faz.net/multimedia/videos/stockholm-chemie-nobelpreis-fuer-drei-amerikanische-forscher-12610585.html',\n        'info_dict': {\n            'id': '12610585',\n            'ext': 'mp4',\n            'title': 'Stockholm: Chemie-Nobelpreis f\u00fcr drei amerikanische Forscher',\n            'description': 'md5:1453fbf9a0d041d985a47306192ea253',\n        },\n    }, {\n        'url': 'http://www.faz.net/aktuell/politik/berlin-gabriel-besteht-zerreissprobe-ueber-datenspeicherung-13659345.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.faz.net/berlin-gabriel-besteht-zerreissprobe-ueber-datenspeicherung-13659345.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.faz.net/-13659345.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.faz.net/aktuell/politik/-13659345.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.faz.net/foobarblafasel-13659345.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        description = self._og_search_description(webpage)\n        media = self._html_search_regex(\n            r\"data-videojs-media='([^']+)\",\n            webpage, 'media')\n        if media == 'extern':\n            perform_url = self._search_regex(\n                r\"<iframe[^>]+?src='((?:http:)?//player\\.performgroup\\.com/eplayer/eplayer\\.html#/?[0-9a-f]{26}\\.[0-9a-z]{26})\",\n                webpage, 'perform url')\n            return self.url_result(perform_url)\n        config = compat_etree_fromstring(media)\n\n        encodings = xpath_element(config, 'ENCODINGS', 'encodings', True)\n        formats = []\n        for pref, code in enumerate(['LOW', 'HIGH', 'HQ']):\n            encoding = xpath_element(encodings, code)\n            if encoding is not None:\n                encoding_url = xpath_text(encoding, 'FILENAME')\n                if encoding_url:\n                    tbr = xpath_text(encoding, 'AVERAGEBITRATE', 1000)\n                    if tbr:\n                        tbr = int_or_none(tbr.replace(',', '.'))\n                    f = {\n                        'url': encoding_url,\n                        'format_id': code.lower(),\n                        'quality': pref,\n                        'tbr': tbr,\n                        'vcodec': xpath_text(encoding, 'CODEC'),\n                    }\n                    mobj = re.search(r'(\\d+)x(\\d+)_(\\d+)\\.mp4', encoding_url)\n                    if mobj:\n                        f.update({\n                            'width': int(mobj.group(1)),\n                            'height': int(mobj.group(2)),\n                            'tbr': tbr or int(mobj.group(3)),\n                        })\n                    formats.append(f)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n            'description': description.strip() if description else None,\n            'thumbnail': xpath_text(config, 'STILL/STILL_BIG'),\n            'duration': int_or_none(xpath_text(config, 'DURATION')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "faz.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/faz.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}