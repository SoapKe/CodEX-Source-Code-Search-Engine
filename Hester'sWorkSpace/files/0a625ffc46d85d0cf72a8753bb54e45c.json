{"author": "audreyr", "code": "# -*- coding: utf-8 -*-\nfrom cookiecutter import cli\n\nimport click\n\nfrom docutils import nodes\nfrom docutils.parsers import rst\nfrom docutils.statemachine import ViewList\n\n\nclass CcCommandLineOptions(rst.Directive):\n    def _format_option(self, option):\n        return [\n            \".. _`%s`:\" % option.name,\n            \"\",\n            \".. option:: \" + \", \".join(option.opts),\n            \"\",\n            option.help,\n            \"\"\n        ]\n\n    def process_actions(self):\n        for option in cli.main.params:\n            if isinstance(option, click.core.Option):\n                for line in self._format_option(option):\n                    self.view_list.append(line, \"\")\n\n    def run(self):\n        node = nodes.paragraph()\n        node.document = self.state.document\n        self.view_list = ViewList()\n        self.process_actions()\n        self.state.nested_parse(self.view_list, 0, node)\n        return [node]\n\n\ndef setup(app):\n    app.add_directive('cc-command-line-options', CcCommandLineOptions)\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\nfrom cookiecutter import cli\n\nimport click\n\nfrom docutils import nodes\nfrom docutils.parsers import rst\nfrom docutils.statemachine import ViewList\n\n\nclass CcCommandLineOptions(rst.Directive):\n    def _format_option(self, option):\n        return [\n            \".. _`%s`:\" % option.name,\n            \"\",\n            \".. option:: \" + \", \".join(option.opts),\n            \"\",\n            option.help,\n            \"\"\n        ]\n\n    def process_actions(self):\n        for option in cli.main.params:\n            if isinstance(option, click.core.Option):\n                for line in self._format_option(option):\n                    self.view_list.append(line, \"\")\n\n    def run(self):\n        node = nodes.paragraph()\n        node.document = self.state.document\n        self.view_list = ViewList()\n        self.process_actions()\n        self.state.nested_parse(self.view_list, 0, node)\n        return [node]\n\n\ndef setup(app):\n    app.add_directive('cc-command-line-options', CcCommandLineOptions)\n", "description": "A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.", "file_name": "ccext.py", "id": "0a625ffc46d85d0cf72a8753bb54e45c", "language": "Python", "project_name": "cookiecutter", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/audreyr-cookiecutter/audreyr-cookiecutter-7154cf2/docs/ccext.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:52:22Z", "url": "https://github.com/audreyr/cookiecutter", "wiki": true}