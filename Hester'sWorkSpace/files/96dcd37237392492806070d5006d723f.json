{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2014, Vedit Firat Arig <firatarig@gmail.com>\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: mssql_db\nshort_description: Add or remove MSSQL databases from a remote host.\ndescription:\n   - Add or remove MSSQL databases from a remote host.\nversion_added: \"2.2\"\noptions:\n  name:\n    description:\n      - name of the database to add or remove\n    required: true\n    aliases: [ db ]\n  login_user:\n    description:\n      - The username used to authenticate with\n  login_password:\n    description:\n      - The password used to authenticate with\n  login_host:\n    description:\n      - Host running the database\n  login_port:\n    description:\n      - Port of the MSSQL server. Requires login_host be defined as other then localhost if login_port is used\n    default: 1433\n  state:\n    description:\n      - The database state\n    default: present\n    choices: [ \"present\", \"absent\", \"import\" ]\n  target:\n    description:\n      - Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL\n        files (C(.sql)) files are supported.\n  autocommit:\n    description:\n      - Automatically commit the change only if the import succeed. Sometimes it is necessary to use autocommit=true, since some content can't be changed\n        within a transaction.\n    type: bool\n    default: 'no'\nnotes:\n   - Requires the pymssql Python package on the remote host. For Ubuntu, this\n     is as easy as pip install pymssql (See M(pip).)\nrequirements:\n   - python >= 2.7\n   - pymssql\nauthor: Vedit Firat Arig\n'''\n\nEXAMPLES = '''\n\n- mssql_db:\n    name: jackdata\n    state: present\n\n\n- copy:\n    src: dump.sql\n    dest: /tmp\n\n- mssql_db:\n    name: my_db\n    state: import\n    target: /tmp/dump.sql\n'''\n\nRETURN = '''\n\n'''\n\nimport os\n\ntry:\n    import pymssql\nexcept ImportError:\n    mssql_found = False\nelse:\n    mssql_found = True\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef db_exists(conn, cursor, db):\n    cursor.execute(\"SELECT name FROM master.sys.databases WHERE name = %s\", db)\n    conn.commit()\n    return bool(cursor.rowcount)\n\n\ndef db_create(conn, cursor, db):\n    cursor.execute(\"CREATE DATABASE [%s]\" % db)\n    return db_exists(conn, cursor, db)\n\n\ndef db_delete(conn, cursor, db):\n    try:\n        cursor.execute(\"ALTER DATABASE [%s] SET single_user WITH ROLLBACK IMMEDIATE\" % db)\n    except:\n        pass\n    cursor.execute(\"DROP DATABASE [%s]\" % db)\n    return not db_exists(conn, cursor, db)\n\n\ndef db_import(conn, cursor, module, db, target):\n    if os.path.isfile(target):\n        backup = open(target, 'r')\n        try:\n            sqlQuery = \"USE [%s]\\n\" % db\n            for line in backup:\n                if line is None:\n                    break\n                elif line.startswith('GO'):\n                    cursor.execute(sqlQuery)\n                    sqlQuery = \"USE [%s]\\n\" % db\n                else:\n                    sqlQuery += line\n            cursor.execute(sqlQuery)\n            conn.commit()\n        finally:\n            backup.close()\n        return 0, \"import successful\", \"\"\n    else:\n        return 1, \"cannot find target file\", \"cannot find target file\"\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True, aliases=['db']),\n            login_user=dict(default=''),\n            login_password=dict(default='', no_log=True),\n            login_host=dict(required=True),\n            login_port=dict(default='1433'),\n            target=dict(default=None),\n            autocommit=dict(type='bool', default=False),\n            state=dict(\n                default='present', choices=['present', 'absent', 'import'])\n        )\n    )\n\n    if not mssql_found:\n        module.fail_json(msg=\"pymssql python module is required\")\n\n    db = module.params['name']\n    state = module.params['state']\n    autocommit = module.params['autocommit']\n    target = module.params[\"target\"]\n\n    login_user = module.params['login_user']\n    login_password = module.params['login_password']\n    login_host = module.params['login_host']\n    login_port = module.params['login_port']\n\n    login_querystring = login_host\n    if login_port != \"1433\":\n        login_querystring = \"%s:%s\" % (login_host, login_port)\n\n    if login_user != \"\" and login_password == \"\":\n        module.fail_json(msg=\"when supplying login_user arguments login_password must be provided\")\n\n    try:\n        conn = pymssql.connect(user=login_user, password=login_password, host=login_querystring, database='master')\n        cursor = conn.cursor()\n    except Exception as e:\n        if \"Unknown database\" in str(e):\n            errno, errstr = e.args\n            module.fail_json(msg=\"ERROR: %s %s\" % (errno, errstr))\n        else:\n            module.fail_json(msg=\"unable to connect, check login_user and login_password are correct, or alternatively check your \"\n                                 \"@sysconfdir@/freetds.conf / ${HOME}/.freetds.conf\")\n\n    conn.autocommit(True)\n    changed = False\n\n    if db_exists(conn, cursor, db):\n        if state == \"absent\":\n            try:\n                changed = db_delete(conn, cursor, db)\n            except Exception as e:\n                module.fail_json(msg=\"error deleting database: \" + str(e))\n        elif state == \"import\":\n            conn.autocommit(autocommit)\n            rc, stdout, stderr = db_import(conn, cursor, module, db, target)\n\n            if rc != 0:\n                module.fail_json(msg=\"%s\" % stderr)\n            else:\n                module.exit_json(changed=True, db=db, msg=stdout)\n    else:\n        if state == \"present\":\n            try:\n                changed = db_create(conn, cursor, db)\n            except Exception as e:\n                module.fail_json(msg=\"error creating database: \" + str(e))\n        elif state == \"import\":\n            try:\n                changed = db_create(conn, cursor, db)\n            except Exception as e:\n                module.fail_json(msg=\"error creating database: \" + str(e))\n\n            conn.autocommit(autocommit)\n            rc, stdout, stderr = db_import(conn, cursor, module, db, target)\n\n            if rc != 0:\n                module.fail_json(msg=\"%s\" % stderr)\n            else:\n                module.exit_json(changed=True, db=db, msg=stdout)\n\n    module.exit_json(changed=changed, db=db)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  mssql db short description  add remove mssql databases remote host  description       add remove mssql databases remote host  version added   2 2  options    name      description          name database add remove     required  true     aliases    db     login user      description          the username used authenticate   login password      description          the password used authenticate   login host      description          host running database   login port      description          port mssql server  requires login host defined localhost login port used     default  1433   state      description          the database state     default  present     choices     present    absent    import      target      description          location  remote host  dump file read write  uncompressed sql         files (c( sql)) files supported    autocommit      description          automatically commit change import succeed  sometimes necessary use autocommit true  since content changed         within transaction      type  bool     default    notes       requires pymssql python package remote host  for ubuntu       easy pip install pymssql (see m(pip) ) requirements       python    2 7      pymssql author  vedit firat arig      examples         create new database name  jackdata    mssql db      name  jackdata     state  present    copy database dump file remote host restore database  db    copy      src  dump sql     dest   tmp    mssql db      name  db     state  import     target   tmp dump sql      return                 usr bin python        coding  utf 8        (c) 2014  vedit firat arig  firatarig gmail com     outline parts reused mark theunissen mysql db module    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create new database name  jackdata     copy database dump file remote host restore database  db     ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2014, Vedit Firat Arig <firatarig@gmail.com>\n# Outline and parts are reused from Mark Theunissen's mysql_db module\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: mssql_db\nshort_description: Add or remove MSSQL databases from a remote host.\ndescription:\n   - Add or remove MSSQL databases from a remote host.\nversion_added: \"2.2\"\noptions:\n  name:\n    description:\n      - name of the database to add or remove\n    required: true\n    aliases: [ db ]\n  login_user:\n    description:\n      - The username used to authenticate with\n  login_password:\n    description:\n      - The password used to authenticate with\n  login_host:\n    description:\n      - Host running the database\n  login_port:\n    description:\n      - Port of the MSSQL server. Requires login_host be defined as other then localhost if login_port is used\n    default: 1433\n  state:\n    description:\n      - The database state\n    default: present\n    choices: [ \"present\", \"absent\", \"import\" ]\n  target:\n    description:\n      - Location, on the remote host, of the dump file to read from or write to. Uncompressed SQL\n        files (C(.sql)) files are supported.\n  autocommit:\n    description:\n      - Automatically commit the change only if the import succeed. Sometimes it is necessary to use autocommit=true, since some content can't be changed\n        within a transaction.\n    type: bool\n    default: 'no'\nnotes:\n   - Requires the pymssql Python package on the remote host. For Ubuntu, this\n     is as easy as pip install pymssql (See M(pip).)\nrequirements:\n   - python >= 2.7\n   - pymssql\nauthor: Vedit Firat Arig\n'''\n\nEXAMPLES = '''\n# Create a new database with name 'jackdata'\n- mssql_db:\n    name: jackdata\n    state: present\n\n# Copy database dump file to remote host and restore it to database 'my_db'\n- copy:\n    src: dump.sql\n    dest: /tmp\n\n- mssql_db:\n    name: my_db\n    state: import\n    target: /tmp/dump.sql\n'''\n\nRETURN = '''\n#\n'''\n\nimport os\n\ntry:\n    import pymssql\nexcept ImportError:\n    mssql_found = False\nelse:\n    mssql_found = True\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef db_exists(conn, cursor, db):\n    cursor.execute(\"SELECT name FROM master.sys.databases WHERE name = %s\", db)\n    conn.commit()\n    return bool(cursor.rowcount)\n\n\ndef db_create(conn, cursor, db):\n    cursor.execute(\"CREATE DATABASE [%s]\" % db)\n    return db_exists(conn, cursor, db)\n\n\ndef db_delete(conn, cursor, db):\n    try:\n        cursor.execute(\"ALTER DATABASE [%s] SET single_user WITH ROLLBACK IMMEDIATE\" % db)\n    except:\n        pass\n    cursor.execute(\"DROP DATABASE [%s]\" % db)\n    return not db_exists(conn, cursor, db)\n\n\ndef db_import(conn, cursor, module, db, target):\n    if os.path.isfile(target):\n        backup = open(target, 'r')\n        try:\n            sqlQuery = \"USE [%s]\\n\" % db\n            for line in backup:\n                if line is None:\n                    break\n                elif line.startswith('GO'):\n                    cursor.execute(sqlQuery)\n                    sqlQuery = \"USE [%s]\\n\" % db\n                else:\n                    sqlQuery += line\n            cursor.execute(sqlQuery)\n            conn.commit()\n        finally:\n            backup.close()\n        return 0, \"import successful\", \"\"\n    else:\n        return 1, \"cannot find target file\", \"cannot find target file\"\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True, aliases=['db']),\n            login_user=dict(default=''),\n            login_password=dict(default='', no_log=True),\n            login_host=dict(required=True),\n            login_port=dict(default='1433'),\n            target=dict(default=None),\n            autocommit=dict(type='bool', default=False),\n            state=dict(\n                default='present', choices=['present', 'absent', 'import'])\n        )\n    )\n\n    if not mssql_found:\n        module.fail_json(msg=\"pymssql python module is required\")\n\n    db = module.params['name']\n    state = module.params['state']\n    autocommit = module.params['autocommit']\n    target = module.params[\"target\"]\n\n    login_user = module.params['login_user']\n    login_password = module.params['login_password']\n    login_host = module.params['login_host']\n    login_port = module.params['login_port']\n\n    login_querystring = login_host\n    if login_port != \"1433\":\n        login_querystring = \"%s:%s\" % (login_host, login_port)\n\n    if login_user != \"\" and login_password == \"\":\n        module.fail_json(msg=\"when supplying login_user arguments login_password must be provided\")\n\n    try:\n        conn = pymssql.connect(user=login_user, password=login_password, host=login_querystring, database='master')\n        cursor = conn.cursor()\n    except Exception as e:\n        if \"Unknown database\" in str(e):\n            errno, errstr = e.args\n            module.fail_json(msg=\"ERROR: %s %s\" % (errno, errstr))\n        else:\n            module.fail_json(msg=\"unable to connect, check login_user and login_password are correct, or alternatively check your \"\n                                 \"@sysconfdir@/freetds.conf / ${HOME}/.freetds.conf\")\n\n    conn.autocommit(True)\n    changed = False\n\n    if db_exists(conn, cursor, db):\n        if state == \"absent\":\n            try:\n                changed = db_delete(conn, cursor, db)\n            except Exception as e:\n                module.fail_json(msg=\"error deleting database: \" + str(e))\n        elif state == \"import\":\n            conn.autocommit(autocommit)\n            rc, stdout, stderr = db_import(conn, cursor, module, db, target)\n\n            if rc != 0:\n                module.fail_json(msg=\"%s\" % stderr)\n            else:\n                module.exit_json(changed=True, db=db, msg=stdout)\n    else:\n        if state == \"present\":\n            try:\n                changed = db_create(conn, cursor, db)\n            except Exception as e:\n                module.fail_json(msg=\"error creating database: \" + str(e))\n        elif state == \"import\":\n            try:\n                changed = db_create(conn, cursor, db)\n            except Exception as e:\n                module.fail_json(msg=\"error creating database: \" + str(e))\n\n            conn.autocommit(autocommit)\n            rc, stdout, stderr = db_import(conn, cursor, module, db, target)\n\n            if rc != 0:\n                module.fail_json(msg=\"%s\" % stderr)\n            else:\n                module.exit_json(changed=True, db=db, msg=stdout)\n\n    module.exit_json(changed=changed, db=db)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "mssql_db.py", "id": "96dcd37237392492806070d5006d723f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/database/mssql/mssql_db.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}