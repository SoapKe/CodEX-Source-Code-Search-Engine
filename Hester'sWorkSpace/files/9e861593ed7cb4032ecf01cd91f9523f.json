{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    unescapeHTML,\n)\n\n\nclass WistiaIE(InfoExtractor):\n    _VALID_URL = r'(?:wistia:|https?://(?:fast\\.)?wistia\\.net/embed/iframe/)(?P<id>[a-z0-9]+)'\n    _API_URL = 'http://fast.wistia.com/embed/medias/%s.json'\n    _IFRAME_URL = 'http://fast.wistia.net/embed/iframe/%s'\n\n    _TESTS = [{\n        'url': 'http://fast.wistia.net/embed/iframe/sh7fpupwlt',\n        'md5': 'cafeb56ec0c53c18c97405eecb3133df',\n        'info_dict': {\n            'id': 'sh7fpupwlt',\n            'ext': 'mov',\n            'title': 'Being Resourceful',\n            'description': 'a Clients From Hell Video Series video from worldwidewebhosting',\n            'upload_date': '20131204',\n            'timestamp': 1386185018,\n            'duration': 117,\n        },\n    }, {\n        'url': 'wistia:sh7fpupwlt',\n        'only_matching': True,\n    }, {\n        \n        'url': 'wistia:807fafadvk',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        match = re.search(\n            r'<(?:meta[^>]+?content|iframe[^>]+?src)=([\"\\'])(?P<url>(?:https?:)?//(?:fast\\.)?wistia\\.net/embed/iframe/.+?)\\1', webpage)\n        if match:\n            return unescapeHTML(match.group('url'))\n\n        match = re.search(r'(?:id=[\"\\']wistia_|data-wistia-?id=[\"\\']|Wistia\\.embed\\([\"\\'])(?P<id>[^\"\\']+)', webpage)\n        if match:\n            return 'wistia:%s' % match.group('id')\n\n        match = re.search(\n            r, webpage)\n        if match:\n            return 'wistia:%s' % match.group('id')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data_json = self._download_json(\n            self._API_URL % video_id, video_id,\n            \n            headers={\n                'Referer': url if url.startswith('http') else self._IFRAME_URL % video_id,\n            })\n\n        if data_json.get('error'):\n            raise ExtractorError(\n                'Error while getting the playlist', expected=True)\n\n        data = data_json['media']\n        title = data['name']\n\n        formats = []\n        thumbnails = []\n        for a in data['assets']:\n            aurl = a.get('url')\n            if not aurl:\n                continue\n            astatus = a.get('status')\n            atype = a.get('type')\n            if (astatus is not None and astatus != 2) or atype in ('preview', 'storyboard'):\n                continue\n            elif atype in ('still', 'still_image'):\n                thumbnails.append({\n                    'url': aurl,\n                    'width': int_or_none(a.get('width')),\n                    'height': int_or_none(a.get('height')),\n                })\n            else:\n                aext = a.get('ext')\n                is_m3u8 = a.get('container') == 'm3u8' or aext == 'm3u8'\n                formats.append({\n                    'format_id': atype,\n                    'url': aurl,\n                    'tbr': int_or_none(a.get('bitrate')),\n                    'vbr': int_or_none(a.get('opt_vbitrate')),\n                    'width': int_or_none(a.get('width')),\n                    'height': int_or_none(a.get('height')),\n                    'filesize': int_or_none(a.get('size')),\n                    'vcodec': a.get('codec'),\n                    'container': a.get('container'),\n                    'ext': 'mp4' if is_m3u8 else aext,\n                    'protocol': 'm3u8' if is_m3u8 else None,\n                    'preference': 1 if atype == 'original' else None,\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': data.get('seoDescription'),\n            'formats': formats,\n            'thumbnails': thumbnails,\n            'duration': float_or_none(data.get('duration')),\n            'timestamp': int_or_none(data.get('createdAt')),\n        }\n", "comments": "(?sx)\n                <script[^>]+src=([\"'])(?:https?:)?//fast\\.wistia\\.com/assets/external/E-v1\\.js\\1[^>]*>.*?\n                <div[^>]+class=([\"']).*?\\bwistia_async_(?P<id>[a-z0-9]+)\\b.*?\\2\n            \n \n# with hls video\n# Some videos require this.\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    unescapeHTML,\n)\n\n\nclass WistiaIE(InfoExtractor):\n    _VALID_URL = r'(?:wistia:|https?://(?:fast\\.)?wistia\\.net/embed/iframe/)(?P<id>[a-z0-9]+)'\n    _API_URL = 'http://fast.wistia.com/embed/medias/%s.json'\n    _IFRAME_URL = 'http://fast.wistia.net/embed/iframe/%s'\n\n    _TESTS = [{\n        'url': 'http://fast.wistia.net/embed/iframe/sh7fpupwlt',\n        'md5': 'cafeb56ec0c53c18c97405eecb3133df',\n        'info_dict': {\n            'id': 'sh7fpupwlt',\n            'ext': 'mov',\n            'title': 'Being Resourceful',\n            'description': 'a Clients From Hell Video Series video from worldwidewebhosting',\n            'upload_date': '20131204',\n            'timestamp': 1386185018,\n            'duration': 117,\n        },\n    }, {\n        'url': 'wistia:sh7fpupwlt',\n        'only_matching': True,\n    }, {\n        # with hls video\n        'url': 'wistia:807fafadvk',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        match = re.search(\n            r'<(?:meta[^>]+?content|iframe[^>]+?src)=([\"\\'])(?P<url>(?:https?:)?//(?:fast\\.)?wistia\\.net/embed/iframe/.+?)\\1', webpage)\n        if match:\n            return unescapeHTML(match.group('url'))\n\n        match = re.search(r'(?:id=[\"\\']wistia_|data-wistia-?id=[\"\\']|Wistia\\.embed\\([\"\\'])(?P<id>[^\"\\']+)', webpage)\n        if match:\n            return 'wistia:%s' % match.group('id')\n\n        match = re.search(\n            r'''(?sx)\n                <script[^>]+src=([\"'])(?:https?:)?//fast\\.wistia\\.com/assets/external/E-v1\\.js\\1[^>]*>.*?\n                <div[^>]+class=([\"']).*?\\bwistia_async_(?P<id>[a-z0-9]+)\\b.*?\\2\n            ''', webpage)\n        if match:\n            return 'wistia:%s' % match.group('id')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data_json = self._download_json(\n            self._API_URL % video_id, video_id,\n            # Some videos require this.\n            headers={\n                'Referer': url if url.startswith('http') else self._IFRAME_URL % video_id,\n            })\n\n        if data_json.get('error'):\n            raise ExtractorError(\n                'Error while getting the playlist', expected=True)\n\n        data = data_json['media']\n        title = data['name']\n\n        formats = []\n        thumbnails = []\n        for a in data['assets']:\n            aurl = a.get('url')\n            if not aurl:\n                continue\n            astatus = a.get('status')\n            atype = a.get('type')\n            if (astatus is not None and astatus != 2) or atype in ('preview', 'storyboard'):\n                continue\n            elif atype in ('still', 'still_image'):\n                thumbnails.append({\n                    'url': aurl,\n                    'width': int_or_none(a.get('width')),\n                    'height': int_or_none(a.get('height')),\n                })\n            else:\n                aext = a.get('ext')\n                is_m3u8 = a.get('container') == 'm3u8' or aext == 'm3u8'\n                formats.append({\n                    'format_id': atype,\n                    'url': aurl,\n                    'tbr': int_or_none(a.get('bitrate')),\n                    'vbr': int_or_none(a.get('opt_vbitrate')),\n                    'width': int_or_none(a.get('width')),\n                    'height': int_or_none(a.get('height')),\n                    'filesize': int_or_none(a.get('size')),\n                    'vcodec': a.get('codec'),\n                    'container': a.get('container'),\n                    'ext': 'mp4' if is_m3u8 else aext,\n                    'protocol': 'm3u8' if is_m3u8 else None,\n                    'preference': 1 if atype == 'original' else None,\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': data.get('seoDescription'),\n            'formats': formats,\n            'thumbnails': thumbnails,\n            'duration': float_or_none(data.get('duration')),\n            'timestamp': int_or_none(data.get('createdAt')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "wistia.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/wistia.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}