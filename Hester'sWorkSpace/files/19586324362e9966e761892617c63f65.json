{"author": "HelloZeroNet", "code": "import re\n\n\n\nclass DbQuery:\n    def __init__(self, query):\n        self.setQuery(query.strip())\n\n    \n    def parseParts(self, query):\n        parts = re.split(\"(SELECT|FROM|WHERE|ORDER BY|LIMIT)\", query)\n        parts = filter(None, parts)  \n        parts = map(lambda s: s.strip(), parts)  \n        return dict(zip(parts[0::2], parts[1::2]))\n\n    \n    def parseFields(self, query_select):\n        fields = re.findall(\"([^,]+) AS ([^,]+)\", query_select)\n        return {key: val.strip() for val, key in fields}\n\n    \n    def parseWheres(self, query_where):\n        if \" AND \" in query_where:\n            return query_where.split(\" AND \")\n        elif query_where:\n            return [query_where]\n        else:\n            return []\n\n    \n    def setQuery(self, query):\n        self.parts = self.parseParts(query)\n        self.fields = self.parseFields(self.parts[\"SELECT\"])\n        self.wheres = self.parseWheres(self.parts.get(\"WHERE\", \"\"))\n\n    \n    def __str__(self):\n        query_parts = []\n        for part_name in [\"SELECT\", \"FROM\", \"WHERE\", \"ORDER BY\", \"LIMIT\"]:\n            if part_name == \"WHERE\" and self.wheres:\n                query_parts.append(\"WHERE\")\n                query_parts.append(\" AND \".join(self.wheres))\n            elif part_name in self.parts:\n                query_parts.append(part_name)\n                query_parts.append(self.parts[part_name])\n        return \"\\n\".join(query_parts)\n", "comments": "parse modify sql queries split main parts query remove empty parts remove whitespace parse selected fields select .. from parse query conditions where .. set query convert query back string", "content": "import re\n\n\n# Parse and modify sql queries\nclass DbQuery:\n    def __init__(self, query):\n        self.setQuery(query.strip())\n\n    # Split main parts of query\n    def parseParts(self, query):\n        parts = re.split(\"(SELECT|FROM|WHERE|ORDER BY|LIMIT)\", query)\n        parts = filter(None, parts)  # Remove empty parts\n        parts = map(lambda s: s.strip(), parts)  # Remove whitespace\n        return dict(zip(parts[0::2], parts[1::2]))\n\n    # Parse selected fields SELECT ... FROM\n    def parseFields(self, query_select):\n        fields = re.findall(\"([^,]+) AS ([^,]+)\", query_select)\n        return {key: val.strip() for val, key in fields}\n\n    # Parse query conditions WHERE ...\n    def parseWheres(self, query_where):\n        if \" AND \" in query_where:\n            return query_where.split(\" AND \")\n        elif query_where:\n            return [query_where]\n        else:\n            return []\n\n    # Set the query\n    def setQuery(self, query):\n        self.parts = self.parseParts(query)\n        self.fields = self.parseFields(self.parts[\"SELECT\"])\n        self.wheres = self.parseWheres(self.parts.get(\"WHERE\", \"\"))\n\n    # Convert query back to string\n    def __str__(self):\n        query_parts = []\n        for part_name in [\"SELECT\", \"FROM\", \"WHERE\", \"ORDER BY\", \"LIMIT\"]:\n            if part_name == \"WHERE\" and self.wheres:\n                query_parts.append(\"WHERE\")\n                query_parts.append(\" AND \".join(self.wheres))\n            elif part_name in self.parts:\n                query_parts.append(part_name)\n                query_parts.append(self.parts[part_name])\n        return \"\\n\".join(query_parts)\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "DbQuery.py", "id": "19586324362e9966e761892617c63f65", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-3bdb6a2/src/Db/DbQuery.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:21:08Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}