{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    urlencode_postdata,\n    extract_attributes,\n    smuggle_url,\n)\n\n\nclass TouTvIE(InfoExtractor):\n    _NETRC_MACHINE = 'toutv'\n    IE_NAME = 'tou.tv'\n    _VALID_URL = r'https?://ici\\.tou\\.tv/(?P<id>[a-zA-Z0-9_-]+(?:/S[0-9]+[EC][0-9]+)?)'\n    _access_token = None\n    _claims = None\n\n    _TESTS = [{\n        'url': 'http://ici.tou.tv/garfield-tout-court/S2015E17',\n        'info_dict': {\n            'id': '122017',\n            'ext': 'mp4',\n            'title': 'Saison 2015 \u00c9pisode 17',\n            'description': 'La photo de famille 2',\n            'upload_date': '20100717',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'skip': '404 Not Found',\n    }, {\n        'url': 'http://ici.tou.tv/hackers',\n        'only_matching': True,\n    }, {\n        'url': 'https://ici.tou.tv/l-age-adulte/S01C501',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        email, password = self._get_login_info()\n        if email is None:\n            return\n        state = 'http://ici.tou.tv/'\n        webpage = self._download_webpage(state, None, 'Downloading homepage')\n        toutvlogin = self._parse_json(self._search_regex(\n            r'(?s)toutvlogin\\s*=\\s*({.+?});', webpage, 'toutvlogin'), None, js_to_json)\n        authorize_url = toutvlogin['host'] + '/auth/oauth/v2/authorize'\n        login_webpage = self._download_webpage(\n            authorize_url, None, 'Downloading login page', query={\n                'client_id': toutvlogin['clientId'],\n                'redirect_uri': 'https://ici.tou.tv/login/loginCallback',\n                'response_type': 'token',\n                'scope': 'media-drmt openid profile email id.write media-validation.read.privileged',\n                'state': state,\n            })\n\n        def extract_form_url_and_data(wp, default_form_url, form_spec_re=''):\n            form, form_elem = re.search(\n                r'(?s)((<form[^>]+?%s[^>]*?>).+?</form>)' % form_spec_re, wp).groups()\n            form_data = self._hidden_inputs(form)\n            form_url = extract_attributes(form_elem).get('action') or default_form_url\n            return form_url, form_data\n\n        post_url, form_data = extract_form_url_and_data(\n            login_webpage,\n            'https://services.radio-canada.ca/auth/oauth/v2/authorize/login',\n            r'(?:id|name)=\"Form-login\"')\n        form_data.update({\n            'login-email': email,\n            'login-password': password,\n        })\n        consent_webpage = self._download_webpage(\n            post_url, None, 'Logging in', data=urlencode_postdata(form_data))\n        post_url, form_data = extract_form_url_and_data(\n            consent_webpage,\n            'https://services.radio-canada.ca/auth/oauth/v2/authorize/consent')\n        _, urlh = self._download_webpage_handle(\n            post_url, None, 'Following Redirection',\n            data=urlencode_postdata(form_data))\n        self._access_token = self._search_regex(\n            r'access_token=([\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})',\n            urlh.geturl(), 'access token')\n        self._claims = self._download_json(\n            'https://services.radio-canada.ca/media/validation/v2/getClaims',\n            None, 'Extracting Claims', query={\n                'token': self._access_token,\n                'access_token': self._access_token,\n            })['claims']\n\n    def _real_extract(self, url):\n        path = self._match_id(url)\n        metadata = self._download_json('http://ici.tou.tv/presentation/%s' % path, path)\n        \n        \n        if metadata.get('IsDrm'):\n            self.report_warning('This video is probably DRM protected.', path)\n        video_id = metadata['IdMedia']\n        details = metadata['Details']\n        title = details['OriginalTitle']\n        video_url = 'radiocanada:%s:%s' % (metadata.get('AppCode', 'toutv'), video_id)\n        if self._access_token and self._claims:\n            video_url = smuggle_url(video_url, {\n                'access_token': self._access_token,\n                'claims': self._claims,\n            })\n\n        return {\n            '_type': 'url_transparent',\n            'url': video_url,\n            'id': video_id,\n            'title': title,\n            'thumbnail': details.get('ImageUrl'),\n            'duration': int_or_none(details.get('LengthInSeconds')),\n        }\n", "comments": "# coding: utf-8\n# m3u8 download\n# IsDrm does not necessarily mean the video is DRM protected (see\n# https://github.com/rg3/youtube-dl/issues/13994).\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    urlencode_postdata,\n    extract_attributes,\n    smuggle_url,\n)\n\n\nclass TouTvIE(InfoExtractor):\n    _NETRC_MACHINE = 'toutv'\n    IE_NAME = 'tou.tv'\n    _VALID_URL = r'https?://ici\\.tou\\.tv/(?P<id>[a-zA-Z0-9_-]+(?:/S[0-9]+[EC][0-9]+)?)'\n    _access_token = None\n    _claims = None\n\n    _TESTS = [{\n        'url': 'http://ici.tou.tv/garfield-tout-court/S2015E17',\n        'info_dict': {\n            'id': '122017',\n            'ext': 'mp4',\n            'title': 'Saison 2015 \u00c9pisode 17',\n            'description': 'La photo de famille 2',\n            'upload_date': '20100717',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'skip': '404 Not Found',\n    }, {\n        'url': 'http://ici.tou.tv/hackers',\n        'only_matching': True,\n    }, {\n        'url': 'https://ici.tou.tv/l-age-adulte/S01C501',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        email, password = self._get_login_info()\n        if email is None:\n            return\n        state = 'http://ici.tou.tv/'\n        webpage = self._download_webpage(state, None, 'Downloading homepage')\n        toutvlogin = self._parse_json(self._search_regex(\n            r'(?s)toutvlogin\\s*=\\s*({.+?});', webpage, 'toutvlogin'), None, js_to_json)\n        authorize_url = toutvlogin['host'] + '/auth/oauth/v2/authorize'\n        login_webpage = self._download_webpage(\n            authorize_url, None, 'Downloading login page', query={\n                'client_id': toutvlogin['clientId'],\n                'redirect_uri': 'https://ici.tou.tv/login/loginCallback',\n                'response_type': 'token',\n                'scope': 'media-drmt openid profile email id.write media-validation.read.privileged',\n                'state': state,\n            })\n\n        def extract_form_url_and_data(wp, default_form_url, form_spec_re=''):\n            form, form_elem = re.search(\n                r'(?s)((<form[^>]+?%s[^>]*?>).+?</form>)' % form_spec_re, wp).groups()\n            form_data = self._hidden_inputs(form)\n            form_url = extract_attributes(form_elem).get('action') or default_form_url\n            return form_url, form_data\n\n        post_url, form_data = extract_form_url_and_data(\n            login_webpage,\n            'https://services.radio-canada.ca/auth/oauth/v2/authorize/login',\n            r'(?:id|name)=\"Form-login\"')\n        form_data.update({\n            'login-email': email,\n            'login-password': password,\n        })\n        consent_webpage = self._download_webpage(\n            post_url, None, 'Logging in', data=urlencode_postdata(form_data))\n        post_url, form_data = extract_form_url_and_data(\n            consent_webpage,\n            'https://services.radio-canada.ca/auth/oauth/v2/authorize/consent')\n        _, urlh = self._download_webpage_handle(\n            post_url, None, 'Following Redirection',\n            data=urlencode_postdata(form_data))\n        self._access_token = self._search_regex(\n            r'access_token=([\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})',\n            urlh.geturl(), 'access token')\n        self._claims = self._download_json(\n            'https://services.radio-canada.ca/media/validation/v2/getClaims',\n            None, 'Extracting Claims', query={\n                'token': self._access_token,\n                'access_token': self._access_token,\n            })['claims']\n\n    def _real_extract(self, url):\n        path = self._match_id(url)\n        metadata = self._download_json('http://ici.tou.tv/presentation/%s' % path, path)\n        # IsDrm does not necessarily mean the video is DRM protected (see\n        # https://github.com/rg3/youtube-dl/issues/13994).\n        if metadata.get('IsDrm'):\n            self.report_warning('This video is probably DRM protected.', path)\n        video_id = metadata['IdMedia']\n        details = metadata['Details']\n        title = details['OriginalTitle']\n        video_url = 'radiocanada:%s:%s' % (metadata.get('AppCode', 'toutv'), video_id)\n        if self._access_token and self._claims:\n            video_url = smuggle_url(video_url, {\n                'access_token': self._access_token,\n                'claims': self._claims,\n            })\n\n        return {\n            '_type': 'url_transparent',\n            'url': video_url,\n            'id': video_id,\n            'title': title,\n            'thumbnail': details.get('ImageUrl'),\n            'duration': int_or_none(details.get('LengthInSeconds')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "toutv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/toutv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}