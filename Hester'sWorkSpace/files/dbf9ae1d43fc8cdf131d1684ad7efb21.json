{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\n\nfrom sentry.testutils import TestCase, PermissionTestCase\n\n\nclass TransferProjectPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(TransferProjectPermissionTest, self).setUp()\n        self.project = self.create_project(teams=[self.team])\n        self.path = reverse(\n            'sentry-transfer-project', args=[self.organization.slug, self.project.slug]\n        )\n\n    def test_teamless_admin_cannot_load(self):\n        self.assert_teamless_admin_cannot_access(self.path)\n\n    def test_team_admin_can_load(self):\n        self.assert_team_admin_can_access(self.path)\n\n    def test_owner_can_load(self):\n        self.assert_owner_can_access(self.path)\n\n\nclass TransferProjectTest(TestCase):\n    def setUp(self):\n        super(TransferProjectTest, self).setUp()\n        self.owner = self.create_user(email='example@example.com', is_superuser=False)\n        organization = self.create_organization(owner=self.owner)\n        self.team = self.create_team(name='bar', organization=organization)\n        self.project = self.create_project(name='bar', teams=[self.team])\n        self.path = reverse('sentry-transfer-project', args=[organization.slug, self.project.slug])\n\n    def test_requires_authentication(self):\n        self.assertRequiresAuthentication(self.path, 'POST')\n\n    def test_renders_template_with_get(self):\n        self.login_as(self.owner)\n\n        resp = self.client.get(self.path)\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/projects/transfer.html')\n        assert resp.context['project'] == self.project\n\n    def test_deletion_flow(self):\n        self.login_as(self.owner)\n        email = self.owner.email\n\n        resp = self.client.post(\n            self.path, format='json', data={\n                'email': email,\n            }\n        )\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver' + \\\n            reverse('sentry-organization-home', args=[self.team.organization.slug])\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\n\nfrom sentry.testutils import TestCase, PermissionTestCase\n\n\nclass TransferProjectPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(TransferProjectPermissionTest, self).setUp()\n        self.project = self.create_project(teams=[self.team])\n        self.path = reverse(\n            'sentry-transfer-project', args=[self.organization.slug, self.project.slug]\n        )\n\n    def test_teamless_admin_cannot_load(self):\n        self.assert_teamless_admin_cannot_access(self.path)\n\n    def test_team_admin_can_load(self):\n        self.assert_team_admin_can_access(self.path)\n\n    def test_owner_can_load(self):\n        self.assert_owner_can_access(self.path)\n\n\nclass TransferProjectTest(TestCase):\n    def setUp(self):\n        super(TransferProjectTest, self).setUp()\n        self.owner = self.create_user(email='example@example.com', is_superuser=False)\n        organization = self.create_organization(owner=self.owner)\n        self.team = self.create_team(name='bar', organization=organization)\n        self.project = self.create_project(name='bar', teams=[self.team])\n        self.path = reverse('sentry-transfer-project', args=[organization.slug, self.project.slug])\n\n    def test_requires_authentication(self):\n        self.assertRequiresAuthentication(self.path, 'POST')\n\n    def test_renders_template_with_get(self):\n        self.login_as(self.owner)\n\n        resp = self.client.get(self.path)\n        assert resp.status_code == 200\n        self.assertTemplateUsed(resp, 'sentry/projects/transfer.html')\n        assert resp.context['project'] == self.project\n\n    def test_deletion_flow(self):\n        self.login_as(self.owner)\n        email = self.owner.email\n\n        resp = self.client.post(\n            self.path, format='json', data={\n                'email': email,\n            }\n        )\n        assert resp.status_code == 302\n        assert resp['Location'] == 'http://testserver' + \\\n            reverse('sentry-organization-home', args=[self.team.organization.slug])\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_transfer_project.py", "id": "dbf9ae1d43fc8cdf131d1684ad7efb21", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_transfer_project.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}