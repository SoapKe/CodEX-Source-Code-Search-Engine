{"author": "tornadoweb", "code": "\n\n A simple benchmark of tornado's HTTP stack.\n Requires 'ab' to be installed.\n\n Running without profiling:\n demos/benchmark/benchmark.py\n demos/benchmark/benchmark.py --quiet --num_runs=5|\n\n Running with profiling:\n\n python -m cProfile -o /tmp/prof demos/benchmark/benchmark.py\n python -m pstats /tmp/prof\n % sort time\n % stats 20\n\nfrom tornado.ioloop import IOLoop\nfrom tornado.options import define, options, parse_command_line\nfrom tornado.web import RequestHandler, Application\n\nimport random\nimport signal\nimport subprocess\n\ntry:\n    xrange\nexcept NameError:\n    xrange = range\n\n choose a random port to avoid colliding with TIME_WAIT sockets left over\n from previous runs.\ndefine(\"min_port\", type=int, default=8000)\ndefine(\"max_port\", type=int, default=9000)\n\n Increasing --n without --keepalive will eventually run into problems\n due to TIME_WAIT sockets\ndefine(\"n\", type=int, default=15000)\ndefine(\"c\", type=int, default=25)\ndefine(\"keepalive\", type=bool, default=False)\ndefine(\"quiet\", type=bool, default=False)\n\n Repeat the entire benchmark this many times (on different ports)\n This gives JITs time to warm up, etc.  Pypy needs 3-5 runs at\n --n=15000 for its JIT to reach full effectiveness\ndefine(\"num_runs\", type=int, default=1)\n\ndefine(\"ioloop\", type=str, default=None)\n\n\nclass RootHandler(RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\n    def _log(self):\n        pass\n\n\ndef handle_sigchld(sig, frame):\n    IOLoop.current().add_callback_from_signal(IOLoop.current().stop)\n\n\ndef main():\n    parse_command_line()\n    if options.ioloop:\n        IOLoop.configure(options.ioloop)\n    for i in xrange(options.num_runs):\n        run()\n\n\ndef run():\n    io_loop = IOLoop(make_current=True)\n    app = Application([(\"/\", RootHandler)])\n    port = random.randrange(options.min_port, options.max_port)\n    app.listen(port, address='127.0.0.1')\n    signal.signal(signal.SIGCHLD, handle_sigchld)\n    args = [\"ab\"]\n    args.extend([\"-n\", str(options.n)])\n    args.extend([\"-c\", str(options.c)])\n    if options.keepalive:\n        args.append(\"-k\")\n    if options.quiet:\n         just stops the progress messages printed to stderr\n        args.append(\"-q\")\n    args.append(\"http://127.0.0.1:%d/\" % port)\n    subprocess.Popen(args)\n    io_loop.start()\n    io_loop.close()\n    io_loop.clear_current()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   usr bin env python       a simple benchmark tornado http stack     requires  ab  installed        running without profiling     demos benchmark benchmark py    demos benchmark benchmark py   quiet   num runs 5 grep  requests per second        running profiling        python  cprofile   tmp prof demos benchmark benchmark py    python  pstats  tmp prof      sort time      stats 20    choose random port avoid colliding time wait sockets left    previous runs     increasing   n without   keepalive eventually run problems    due time wait sockets    repeat entire benchmark many times (on different ports)    this gives jits time warm  etc   pypy needs 3 5 runs      n 15000 jit reach full effectiveness    stops progress messages printed stderr ", "content": "#!/usr/bin/env python\n#\n# A simple benchmark of tornado's HTTP stack.\n# Requires 'ab' to be installed.\n#\n# Running without profiling:\n# demos/benchmark/benchmark.py\n# demos/benchmark/benchmark.py --quiet --num_runs=5|grep \"Requests per second\"\n#\n# Running with profiling:\n#\n# python -m cProfile -o /tmp/prof demos/benchmark/benchmark.py\n# python -m pstats /tmp/prof\n# % sort time\n# % stats 20\n\nfrom tornado.ioloop import IOLoop\nfrom tornado.options import define, options, parse_command_line\nfrom tornado.web import RequestHandler, Application\n\nimport random\nimport signal\nimport subprocess\n\ntry:\n    xrange\nexcept NameError:\n    xrange = range\n\n# choose a random port to avoid colliding with TIME_WAIT sockets left over\n# from previous runs.\ndefine(\"min_port\", type=int, default=8000)\ndefine(\"max_port\", type=int, default=9000)\n\n# Increasing --n without --keepalive will eventually run into problems\n# due to TIME_WAIT sockets\ndefine(\"n\", type=int, default=15000)\ndefine(\"c\", type=int, default=25)\ndefine(\"keepalive\", type=bool, default=False)\ndefine(\"quiet\", type=bool, default=False)\n\n# Repeat the entire benchmark this many times (on different ports)\n# This gives JITs time to warm up, etc.  Pypy needs 3-5 runs at\n# --n=15000 for its JIT to reach full effectiveness\ndefine(\"num_runs\", type=int, default=1)\n\ndefine(\"ioloop\", type=str, default=None)\n\n\nclass RootHandler(RequestHandler):\n    def get(self):\n        self.write(\"Hello, world\")\n\n    def _log(self):\n        pass\n\n\ndef handle_sigchld(sig, frame):\n    IOLoop.current().add_callback_from_signal(IOLoop.current().stop)\n\n\ndef main():\n    parse_command_line()\n    if options.ioloop:\n        IOLoop.configure(options.ioloop)\n    for i in xrange(options.num_runs):\n        run()\n\n\ndef run():\n    io_loop = IOLoop(make_current=True)\n    app = Application([(\"/\", RootHandler)])\n    port = random.randrange(options.min_port, options.max_port)\n    app.listen(port, address='127.0.0.1')\n    signal.signal(signal.SIGCHLD, handle_sigchld)\n    args = [\"ab\"]\n    args.extend([\"-n\", str(options.n)])\n    args.extend([\"-c\", str(options.c)])\n    if options.keepalive:\n        args.append(\"-k\")\n    if options.quiet:\n        # just stops the progress messages printed to stderr\n        args.append(\"-q\")\n    args.append(\"http://127.0.0.1:%d/\" % port)\n    subprocess.Popen(args)\n    io_loop.start()\n    io_loop.close()\n    io_loop.clear_current()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "benchmark.py", "id": "02abf4e2a550938692c413a66a1707cd", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/test/tornadoweb-tornado/tornadoweb-tornado-62e43f6/demos/benchmark/benchmark.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:11:42Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}