{"author": "django", "code": "import unittest\n\nfrom .models import PersonWithCustomMaxLengths, PersonWithDefaultMaxLengths\n\n\nclass MaxLengthArgumentsTests(unittest.TestCase):\n\n    def verify_max_length(self, model, field, length):\n        self.assertEqual(model._meta.get_field(field).max_length, length)\n\n    def test_default_max_lengths(self):\n        self.verify_max_length(PersonWithDefaultMaxLengths, 'email', 254)\n        self.verify_max_length(PersonWithDefaultMaxLengths, 'vcard', 100)\n        self.verify_max_length(PersonWithDefaultMaxLengths, 'homepage', 200)\n        self.verify_max_length(PersonWithDefaultMaxLengths, 'avatar', 100)\n\n    def test_custom_max_lengths(self):\n        self.verify_max_length(PersonWithCustomMaxLengths, 'email', 250)\n        self.verify_max_length(PersonWithCustomMaxLengths, 'vcard', 250)\n        self.verify_max_length(PersonWithCustomMaxLengths, 'homepage', 250)\n        self.verify_max_length(PersonWithCustomMaxLengths, 'avatar', 250)\n\n\nclass MaxLengthORMTests(unittest.TestCase):\n\n    def test_custom_max_lengths(self):\n        args = {\n            \"email\": \"someone@example.com\",\n            \"vcard\": \"vcard\",\n            \"homepage\": \"http://example.com/\",\n            \"avatar\": \"me.jpg\"\n        }\n\n        for field in (\"email\", \"vcard\", \"homepage\", \"avatar\"):\n            new_args = args.copy()\n            new_args[field] = \"X\" * 250  \n            p = PersonWithCustomMaxLengths.objects.create(**new_args)\n            self.assertEqual(getattr(p, field), (\"X\" * 250))\n", "comments": "  value longer default fields could hold  ", "content": "import unittest\n\nfrom .models import PersonWithCustomMaxLengths, PersonWithDefaultMaxLengths\n\n\nclass MaxLengthArgumentsTests(unittest.TestCase):\n\n    def verify_max_length(self, model, field, length):\n        self.assertEqual(model._meta.get_field(field).max_length, length)\n\n    def test_default_max_lengths(self):\n        self.verify_max_length(PersonWithDefaultMaxLengths, 'email', 254)\n        self.verify_max_length(PersonWithDefaultMaxLengths, 'vcard', 100)\n        self.verify_max_length(PersonWithDefaultMaxLengths, 'homepage', 200)\n        self.verify_max_length(PersonWithDefaultMaxLengths, 'avatar', 100)\n\n    def test_custom_max_lengths(self):\n        self.verify_max_length(PersonWithCustomMaxLengths, 'email', 250)\n        self.verify_max_length(PersonWithCustomMaxLengths, 'vcard', 250)\n        self.verify_max_length(PersonWithCustomMaxLengths, 'homepage', 250)\n        self.verify_max_length(PersonWithCustomMaxLengths, 'avatar', 250)\n\n\nclass MaxLengthORMTests(unittest.TestCase):\n\n    def test_custom_max_lengths(self):\n        args = {\n            \"email\": \"someone@example.com\",\n            \"vcard\": \"vcard\",\n            \"homepage\": \"http://example.com/\",\n            \"avatar\": \"me.jpg\"\n        }\n\n        for field in (\"email\", \"vcard\", \"homepage\", \"avatar\"):\n            new_args = args.copy()\n            new_args[field] = \"X\" * 250  # a value longer than any of the default fields could hold.\n            p = PersonWithCustomMaxLengths.objects.create(**new_args)\n            self.assertEqual(getattr(p, field), (\"X\" * 250))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "8ee59c02de2255368e31f7594e71636c", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/max_lengths/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}