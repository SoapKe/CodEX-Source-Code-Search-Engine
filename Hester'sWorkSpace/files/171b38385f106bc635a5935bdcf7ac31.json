{"author": "kennethreitz", "code": "from click.testing import CliRunner\nimport pytest\n\nfrom legit.cli import cli\nfrom legit.core import __version__\n\n\nclass TestLegit(object):\n\n    @pytest.mark.cli\n    def test_cli(self):\n        runner = CliRunner()\n        result = runner.invoke(cli, ['--version'])\n        assert result.exit_code == 0\n        assert __version__ in result.output\n\n    @pytest.mark.cli\n    def test_help(self):\n        \"\"\"Test help output expected from no-command invocation\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, [])\n        assert result.exit_code == 0\n        assert 'Options' in result.output\n        assert 'Usage Examples' in result.output\n        assert 'Commands' in result.output\n\n    @pytest.mark.cli\n    def test_switch(self):\n        \"\"\"Test switch command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['switch', 'kenneth', '--fake'])\n        assert result.exit_code == 0\n        assert 'Switching to kenneth' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_sw(self):\n        \"\"\"Test switch alias sw\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['sw', 'kenneth', '--fake'])\n        assert result.exit_code == 0\n        assert 'Switching to kenneth' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_switch_no_branch(self):\n        \"\"\"Test switch command with no branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['switch', '--fake'])\n        assert result.exit_code == 2\n        assert 'Please specify a branch to switch' in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_sync_known_branch(self):\n        \"\"\"Test sync command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['sync', 'develop', '--fake'])\n        assert result.exit_code == 0\n        assert 'Pulling commits from the server.' in result.output\n        assert 'Pushing commits to the server.' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_sy_known_branch(self):\n        \"\"\"Test sync alias sy\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['sy', 'develop', '--fake'])\n        assert result.exit_code == 0\n        assert 'Pulling commits from the server.' in result.output\n        assert 'Pushing commits to the server.' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_sync_unknown_branch(self):\n        \"\"\"Test sync command with bad branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['sync', 'kenneth', '--fake'])\n        assert result.exit_code == 2\n        assert \"Branch kenneth is not published.\" in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_publish(self):\n        \"\"\"Test publish command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['publish', 'kenneth', '--fake'])\n        assert result.exit_code == 0\n        assert 'Publishing kenneth' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_pub(self):\n        \"\"\"Test publish alias pub\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['pub', 'kenneth', '--fake'])\n        assert result.exit_code == 0\n        assert 'Publishing kenneth' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_publish_published_branch(self):\n        \"\"\"Test publish command with published branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['publish', 'develop', '--fake'])\n        assert result.exit_code == 2\n        assert \"Branch develop is already published.\" in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_unpublish(self):\n        \"\"\"Test unpublish command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['unpublish', 'develop', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_unp(self):\n        \"\"\"Test unpublish alias unp\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['unp', 'develop', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_unpublish_unknown_branch(self):\n        \"\"\"Test unpublish with unknown branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['unp', 'kenneth', '--fake'])\n        assert result.exit_code == 2\n        assert \"Branch kenneth is not published.\" in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_unpublish_no_branch(self):\n        \"\"\"Test unpublish command with no branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['unpublish', '--fake'])\n        assert result.exit_code == 2\n        assert 'Please specify a branch to unpublish' in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_undo(self):\n        \"\"\"Test undo command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['undo', '--fake'])\n        assert result.exit_code == 0\n        assert 'Last commit removed from history.' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_un(self):\n        \"\"\"Test undo alias un\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['un', '--fake'])\n        assert result.exit_code == 0\n        assert 'Last commit removed from history.' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_install(self):\n        \"\"\"Test --install option\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['--install', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_uninstall(self):\n        \"\"\"Test --uninstall option\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['--uninstall', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_config(self):\n        \"\"\"Test --config option\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['--config', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_branches(self):\n        \"\"\"Test undo alias un\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['branches'])\n        assert result.exit_code == 0\n", "comments": "   test help output expected command invocation            runner   clirunner()         result   runner invoke(cli    )         assert result exit code    0         assert  options  result output         assert  usage examples  result output         assert  commands  result output       pytest mark cli     def test switch(self)             test switch command            runner   clirunner()         result   runner invoke(cli    switch    kenneth      fake  )         assert result exit code    0         assert  switching kenneth  result output         assert  faked   result output       pytest mark cli     def test sw(self)             test switch alias sw            runner   clirunner()         result   runner invoke(cli    sw    kenneth      fake  )         assert result exit code    0         assert  switching kenneth  result output         assert  faked   result output       pytest mark cli     def test switch branch(self)             test switch command branch            runner   clirunner()         result   runner invoke(cli    switch      fake  )         assert result exit code    2         assert  please specify branch switch  result output         assert  faked   result output       pytest mark cli     def test sync known branch(self)             test sync command            runner   clirunner()         result   runner invoke(cli    sync    develop      fake  )         assert result exit code    0         assert  pulling commits server   result output         assert  pushing commits server   result output         assert  faked   result output       pytest mark cli     def test sy known branch(self)             test sync alias sy            runner   clirunner()         result   runner invoke(cli    sy    develop      fake  )         assert result exit code    0         assert  pulling commits server   result output         assert  pushing commits server   result output         assert  faked   result output       pytest mark cli     def test sync unknown branch(self)             test sync command bad branch            runner   clirunner()         result   runner invoke(cli    sync    kenneth      fake  )         assert result exit code    2         assert  branch kenneth published   result output         assert  faked   result output       pytest mark cli     def test publish(self)             test publish command            runner   clirunner()         result   runner invoke(cli    publish    kenneth      fake  )         assert result exit code    0         assert  publishing kenneth  result output         assert  faked   result output       pytest mark cli     def test pub(self)             test publish alias pub            runner   clirunner()         result   runner invoke(cli    pub    kenneth      fake  )         assert result exit code    0         assert  publishing kenneth  result output         assert  faked   result output       pytest mark cli     def test publish published branch(self)             test publish command published branch            runner   clirunner()         result   runner invoke(cli    publish    develop      fake  )         assert result exit code    2         assert  branch develop already published   result output         assert  faked   result output       pytest mark cli     def test unpublish(self)             test unpublish command            runner   clirunner()         result   runner invoke(cli    unpublish    develop      fake  )         assert result exit code    0         assert  faked   result output       pytest mark cli     def test unp(self)             test unpublish alias unp            runner   clirunner()         result   runner invoke(cli    unp    develop      fake  )         assert result exit code    0         assert  faked   result output       pytest mark cli     def test unpublish unknown branch(self)             test unpublish unknown branch            runner   clirunner()         result   runner invoke(cli    unp    kenneth      fake  )         assert result exit code    2         assert  branch kenneth published   result output         assert  faked   result output       pytest mark cli     def test unpublish branch(self)             test unpublish command branch            runner   clirunner()         result   runner invoke(cli    unpublish      fake  )         assert result exit code    2         assert  please specify branch unpublish  result output         assert  faked   result output       pytest mark cli     def test undo(self)             test undo command            runner   clirunner()         result   runner invoke(cli    undo      fake  )         assert result exit code    0         assert  last commit removed history   result output         assert  faked   result output       pytest mark cli     def test un(self)             test undo alias un            runner   clirunner()         result   runner invoke(cli    un      fake  )         assert result exit code    0         assert  last commit removed history   result output         assert  faked   result output       pytest mark cli     def test install(self)             test   install option            runner   clirunner()         result   runner invoke(cli      install      fake  )         assert result exit code    0         assert  faked   result output       pytest mark cli     def test uninstall(self)             test   uninstall option            runner   clirunner()         result   runner invoke(cli      uninstall      fake  )         assert result exit code    0         assert  faked   result output       pytest mark cli     def test config(self)             test   config option            runner   clirunner()         result   runner invoke(cli      config      fake  )         assert result exit code    0         assert  faked   result output       pytest mark cli     def test branches(self)             test undo alias un    ", "content": "from click.testing import CliRunner\nimport pytest\n\nfrom legit.cli import cli\nfrom legit.core import __version__\n\n\nclass TestLegit(object):\n\n    @pytest.mark.cli\n    def test_cli(self):\n        runner = CliRunner()\n        result = runner.invoke(cli, ['--version'])\n        assert result.exit_code == 0\n        assert __version__ in result.output\n\n    @pytest.mark.cli\n    def test_help(self):\n        \"\"\"Test help output expected from no-command invocation\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, [])\n        assert result.exit_code == 0\n        assert 'Options' in result.output\n        assert 'Usage Examples' in result.output\n        assert 'Commands' in result.output\n\n    @pytest.mark.cli\n    def test_switch(self):\n        \"\"\"Test switch command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['switch', 'kenneth', '--fake'])\n        assert result.exit_code == 0\n        assert 'Switching to kenneth' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_sw(self):\n        \"\"\"Test switch alias sw\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['sw', 'kenneth', '--fake'])\n        assert result.exit_code == 0\n        assert 'Switching to kenneth' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_switch_no_branch(self):\n        \"\"\"Test switch command with no branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['switch', '--fake'])\n        assert result.exit_code == 2\n        assert 'Please specify a branch to switch' in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_sync_known_branch(self):\n        \"\"\"Test sync command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['sync', 'develop', '--fake'])\n        assert result.exit_code == 0\n        assert 'Pulling commits from the server.' in result.output\n        assert 'Pushing commits to the server.' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_sy_known_branch(self):\n        \"\"\"Test sync alias sy\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['sy', 'develop', '--fake'])\n        assert result.exit_code == 0\n        assert 'Pulling commits from the server.' in result.output\n        assert 'Pushing commits to the server.' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_sync_unknown_branch(self):\n        \"\"\"Test sync command with bad branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['sync', 'kenneth', '--fake'])\n        assert result.exit_code == 2\n        assert \"Branch kenneth is not published.\" in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_publish(self):\n        \"\"\"Test publish command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['publish', 'kenneth', '--fake'])\n        assert result.exit_code == 0\n        assert 'Publishing kenneth' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_pub(self):\n        \"\"\"Test publish alias pub\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['pub', 'kenneth', '--fake'])\n        assert result.exit_code == 0\n        assert 'Publishing kenneth' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_publish_published_branch(self):\n        \"\"\"Test publish command with published branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['publish', 'develop', '--fake'])\n        assert result.exit_code == 2\n        assert \"Branch develop is already published.\" in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_unpublish(self):\n        \"\"\"Test unpublish command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['unpublish', 'develop', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_unp(self):\n        \"\"\"Test unpublish alias unp\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['unp', 'develop', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_unpublish_unknown_branch(self):\n        \"\"\"Test unpublish with unknown branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['unp', 'kenneth', '--fake'])\n        assert result.exit_code == 2\n        assert \"Branch kenneth is not published.\" in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_unpublish_no_branch(self):\n        \"\"\"Test unpublish command with no branch\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['unpublish', '--fake'])\n        assert result.exit_code == 2\n        assert 'Please specify a branch to unpublish' in result.output\n        assert 'Faked!' not in result.output\n\n    @pytest.mark.cli\n    def test_undo(self):\n        \"\"\"Test undo command\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['undo', '--fake'])\n        assert result.exit_code == 0\n        assert 'Last commit removed from history.' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_un(self):\n        \"\"\"Test undo alias un\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['un', '--fake'])\n        assert result.exit_code == 0\n        assert 'Last commit removed from history.' in result.output\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_install(self):\n        \"\"\"Test --install option\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['--install', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_uninstall(self):\n        \"\"\"Test --uninstall option\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['--uninstall', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_config(self):\n        \"\"\"Test --config option\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['--config', '--fake'])\n        assert result.exit_code == 0\n        assert 'Faked!' in result.output\n\n    @pytest.mark.cli\n    def test_branches(self):\n        \"\"\"Test undo alias un\"\"\"\n        runner = CliRunner()\n        result = runner.invoke(cli, ['branches'])\n        assert result.exit_code == 0\n", "description": "Git for Humans, Inspired by GitHub for Mac\u2122.", "file_name": "test_commands.py", "id": "171b38385f106bc635a5935bdcf7ac31", "language": "Python", "project_name": "legit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/kennethreitz-legit/kennethreitz-legit-7345d70/legit/tests/test_commands.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:23:57Z", "url": "https://github.com/kennethreitz/legit", "wiki": true}