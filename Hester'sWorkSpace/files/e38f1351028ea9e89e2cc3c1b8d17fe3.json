{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_epg_to_domain\nshort_description: Bind EPGs to Domains (fv:RsDomAtt)\ndescription:\n- Bind EPGs to Physical and Virtual Domains on Cisco ACI fabrics.\nnotes:\n- The C(tenant), C(ap), C(epg), and C(domain) used must exist before using this module in your playbook.\n  The M(aci_tenant) M(aci_ap), M(aci_epg) M(aci_domain) modules can be used for this.\n- OpenStack VMM domains must not be created using this module. The OpenStack VMM domain is created directly\n  by the Cisco APIC Neutron plugin as part of the installation and configuration.\n  This module can be used to query status of an OpenStack VMM domain.\n- More information about the internal APIC class B(fv:RsDomAtt) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\nversion_added: '2.4'\noptions:\n  allow_useg:\n    description:\n    - Allows micro-segmentation.\n    - The APIC defaults new EPG to Domain bindings to use C(encap).\n    choices: [ encap, useg ]\n    default: encap\n  ap:\n    description:\n    - Name of an existing application network profile, that will contain the EPGs.\n    aliases: [ app_profile, app_profile_name ]\n  deploy_immediacy:\n    description:\n    - Determines when the policy is pushed to hardware Policy CAM.\n    - The APIC defaults new EPG to Domain bindings to C(lazy).\n    choices: [ immediate, lazy ]\n    default: lazy\n  domain:\n    description:\n    - Name of the physical or virtual domain being associated with the EPG.\n    aliases: [ domain_name, domain_profile ]\n  domain_type:\n    description:\n    - Determines if the Domain is physical (phys) or virtual (vmm).\n    choices: [ phys, vmm ]\n    aliases: [ type ]\n  encap:\n    description:\n    - The VLAN encapsulation for the EPG when binding a VMM Domain with static encap_mode.\n    - This acts as the secondary encap when using useg.\n    choices: [ range from 1 to 4096 ]\n  encap_mode:\n    description:\n    - The ecapsulataion method to be used.\n    - The APIC defaults new EPG to Domain bindings to C(auto).\n    choices: [ auto, vlan, vxlan ]\n    default: auto\n  epg:\n    description:\n    - Name of the end point group.\n    aliases: [ epg_name, name ]\n  netflow:\n    description:\n    - Determines if netflow should be enabled.\n    - The APIC defaults new EPG to Domain binings to C(no).\n    type: bool\n    default: 'no'\n  primary_encap:\n    description:\n    - Determines the primary VLAN ID when using useg.\n    choices: [ range from 1 to 4096 ]\n  resolution_immediacy:\n    description:\n    - Determines when the policies should be resolved and available.\n    - The APIC defaults new EPG to Domain bindings to C(lazy).\n    choices: [ immediate, lazy, pre-provision ]\n    default: lazy\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\n  tenant:\n    description:\n    - Name of an existing tenant.\n    aliases: [ tenant_name ]\n  vm_provider:\n    description:\n    - The VM platform for VMM Domains.\n    - Support for Kubernetes was added in ACI v3.0.\n    - Support for CloudFoundry, OpenShift and Red Hat was added in ACI v3.1.\n    choices: [ cloudfoundry, kubernetes, microsoft, openshift, openstack, redhat, vmware ]\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new physical domain to EPG binding\n  aci_epg_to_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    domain: anstest\n    domain_type: phys\n    state: present\n\n- name: Remove an existing physical domain to EPG binding\n  aci_epg_to_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    domain: anstest\n    domain_type: phys\n    state: absent\n\n- name: Query a specific physical domain to EPG binding\n  aci_epg_to_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    domain: anstest\n    domain_type: phys\n    state: query\n\n- name: Query all domain to EPG bindings\n  aci_epg_to_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nVM_PROVIDER_MAPPING = dict(\n    cloudfoundry='CloudFoundry',\n    kubernetes='Kubernetes',\n    microsoft='Microsoft',\n    openshift='OpenShift',\n    openstack='OpenStack',\n    redhat='Redhat',\n    vmware='VMware',\n)\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        allow_useg=dict(type='str', choices=['encap', 'useg']),\n        ap=dict(type='str', aliases=['app_profile', 'app_profile_name']),  \n        deploy_immediacy=dict(type='str', choices=['immediate', 'on-demand']),\n        domain=dict(type='str', aliases=['domain_name', 'domain_profile']),  \n        domain_type=dict(type='str', choices=['phys', 'vmm'], aliases=['type']),  \n        encap=dict(type='int'),\n        encap_mode=dict(type='str', choices=['auto', 'vlan', 'vxlan']),\n        epg=dict(type='str', aliases=['name', 'epg_name']),  \n        netflow=dict(type='raw'),  \n        primary_encap=dict(type='int'),\n        resolution_immediacy=dict(type='str', choices=['immediate', 'lazy', 'pre-provision']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        tenant=dict(type='str', aliases=['tenant_name']),  \n        vm_provider=dict(type='str', choices=['cloudfoundry', 'kubernetes', 'microsoft', 'openshift', 'openstack', 'redhat', 'vmware']),\n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  \n        protocol=dict(type='str', removed_in_version='2.6'),  \n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['domain_type', 'vmm', ['vm_provider']],\n            ['state', 'absent', ['ap', 'domain', 'domain_type', 'epg', 'tenant']],\n            ['state', 'present', ['ap', 'domain', 'domain_type', 'epg', 'tenant']],\n        ],\n    )\n\n    aci = ACIModule(module)\n\n    allow_useg = module.params['allow_useg']\n    ap = module.params['ap']\n    deploy_immediacy = module.params['deploy_immediacy']\n    domain = module.params['domain']\n    domain_type = module.params['domain_type']\n    vm_provider = module.params['vm_provider']\n    encap = module.params['encap']\n    if encap is not None:\n        if encap in range(1, 4097):\n            encap = 'vlan-{0}'.format(encap)\n        else:\n            module.fail_json(msg='Valid VLAN assigments are from 1 to 4096')\n    encap_mode = module.params['encap_mode']\n    epg = module.params['epg']\n    netflow = aci.boolean(module.params['netflow'], 'enabled', 'disabled')\n    primary_encap = module.params['primary_encap']\n    if primary_encap is not None:\n        if primary_encap in range(1, 4097):\n            primary_encap = 'vlan-{0}'.format(primary_encap)\n        else:\n            module.fail_json(msg='Valid VLAN assigments are from 1 to 4096')\n    resolution_immediacy = module.params['resolution_immediacy']\n    state = module.params['state']\n    tenant = module.params['tenant']\n\n    if domain_type == 'phys' and vm_provider is not None:\n        module.fail_json(msg=\"Domain type 'phys' cannot have a 'vm_provider'\")\n\n    \n    if domain_type == 'vmm':\n        epg_domain = 'uni/vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)\n    elif domain_type is not None:\n        epg_domain = 'uni/phys-{0}'.format(domain)\n    else:\n        epg_domain = None\n\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='fvAp',\n            aci_rn='ap-{0}'.format(ap),\n            filter_target='eq(fvAp.name, \"{0}\")'.format(ap),\n            module_object=ap,\n        ),\n        subclass_2=dict(\n            aci_class='fvAEPg',\n            aci_rn='epg-{0}'.format(epg),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(epg),\n            module_object=epg,\n        ),\n        subclass_3=dict(\n            aci_class='fvRsDomAtt',\n            aci_rn='rsdomAtt-[{0}]'.format(epg_domain),\n            filter_target='eq(fvRsDomAtt.tDn, \"{0}\")'.format(epg_domain),\n            module_object=epg_domain,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='fvRsDomAtt',\n            class_config=dict(\n                classPref=allow_useg,\n                encap=encap,\n                encapMode=encap_mode,\n                instrImedcy=deploy_immediacy,\n                netflowPref=netflow,\n                primaryEncap=primary_encap,\n                resImedcy=resolution_immediacy,\n            ),\n        )\n\n        aci.get_diff(aci_class='fvRsDomAtt')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci epg domain short description  bind epgs domains (fv rsdomatt) description    bind epgs physical virtual domains cisco aci fabrics  notes    the c(tenant)  c(ap)  c(epg)  c(domain) used must exist using module playbook    the m(aci tenant) m(aci ap)  m(aci epg) m(aci domain) modules used    openstack vmm domains must created using module  the openstack vmm domain created directly   cisco apic neutron plugin part installation configuration    this module used query status openstack vmm domain    more information internal apic class b(fv rsdomatt)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    jacob mcgill ( jmcgill298) version added   2 4  options    allow useg      description        allows micro segmentation        the apic defaults new epg domain bindings use c(encap)      choices    encap  useg       default  encap   ap      description        name existing application network profile  contain epgs      aliases    app profile  app profile name     deploy immediacy      description        determines policy pushed hardware policy cam        the apic defaults new epg domain bindings c(lazy)      choices    immediate  lazy       default  lazy   domain      description        name physical virtual domain associated epg      aliases    domain name  domain profile     domain type      description        determines domain physical (phys) virtual (vmm)      choices    phys  vmm       aliases    type     encap      description        the vlan encapsulation epg binding vmm domain static encap mode        this acts secondary encap using useg      choices    range 1 4096     encap mode      description        the ecapsulataion method used        the apic defaults new epg domain bindings c(auto)      choices    auto  vlan  vxlan       default  auto   epg      description        name end point group      aliases    epg name  name     netflow      description        determines netflow enabled        the apic defaults new epg domain binings c(no)      type  bool     default      primary encap      description        determines primary vlan id using useg      choices    range 1 4096     resolution immediacy      description        determines policies resolved available        the apic defaults new epg domain bindings c(lazy)      choices    immediate  lazy  pre provision       default  lazy   state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present   tenant      description        name existing tenant      aliases    tenant name     vm provider      description        the vm platform vmm domains        support kubernetes added aci v3 0        support cloudfoundry  openshift red hat added aci v3 1      choices    cloudfoundry  kubernetes  microsoft  openshift  openstack  redhat  vmware   extends documentation fragment  aci      examples   r      name  add new physical domain epg binding   aci epg domain      host  apic     username  admin     password  somesecretpassword     tenant  anstest     ap  anstest     epg  anstest     domain  anstest     domain type  phys     state  present    name  remove existing physical domain epg binding   aci epg domain      host  apic     username  admin     password  somesecretpassword     tenant  anstest     ap  anstest     epg  anstest     domain  anstest     domain type  phys     state  absent    name  query specific physical domain epg binding   aci epg domain      host  apic     username  admin     password  somesecretpassword     tenant  anstest     ap  anstest     epg  anstest     domain  anstest     domain type  phys     state  query    name  query domain epg bindings   aci epg domain      host  apic     username  admin     password  somesecretpassword     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    not required querying objects    not required querying objects    not required querying objects    turn boolean v2 9    not required querying objects    deprecated starting v2 6    deprecated v2 6    compile full domain url building ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_epg_to_domain\nshort_description: Bind EPGs to Domains (fv:RsDomAtt)\ndescription:\n- Bind EPGs to Physical and Virtual Domains on Cisco ACI fabrics.\nnotes:\n- The C(tenant), C(ap), C(epg), and C(domain) used must exist before using this module in your playbook.\n  The M(aci_tenant) M(aci_ap), M(aci_epg) M(aci_domain) modules can be used for this.\n- OpenStack VMM domains must not be created using this module. The OpenStack VMM domain is created directly\n  by the Cisco APIC Neutron plugin as part of the installation and configuration.\n  This module can be used to query status of an OpenStack VMM domain.\n- More information about the internal APIC class B(fv:RsDomAtt) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Jacob McGill (@jmcgill298)\nversion_added: '2.4'\noptions:\n  allow_useg:\n    description:\n    - Allows micro-segmentation.\n    - The APIC defaults new EPG to Domain bindings to use C(encap).\n    choices: [ encap, useg ]\n    default: encap\n  ap:\n    description:\n    - Name of an existing application network profile, that will contain the EPGs.\n    aliases: [ app_profile, app_profile_name ]\n  deploy_immediacy:\n    description:\n    - Determines when the policy is pushed to hardware Policy CAM.\n    - The APIC defaults new EPG to Domain bindings to C(lazy).\n    choices: [ immediate, lazy ]\n    default: lazy\n  domain:\n    description:\n    - Name of the physical or virtual domain being associated with the EPG.\n    aliases: [ domain_name, domain_profile ]\n  domain_type:\n    description:\n    - Determines if the Domain is physical (phys) or virtual (vmm).\n    choices: [ phys, vmm ]\n    aliases: [ type ]\n  encap:\n    description:\n    - The VLAN encapsulation for the EPG when binding a VMM Domain with static encap_mode.\n    - This acts as the secondary encap when using useg.\n    choices: [ range from 1 to 4096 ]\n  encap_mode:\n    description:\n    - The ecapsulataion method to be used.\n    - The APIC defaults new EPG to Domain bindings to C(auto).\n    choices: [ auto, vlan, vxlan ]\n    default: auto\n  epg:\n    description:\n    - Name of the end point group.\n    aliases: [ epg_name, name ]\n  netflow:\n    description:\n    - Determines if netflow should be enabled.\n    - The APIC defaults new EPG to Domain binings to C(no).\n    type: bool\n    default: 'no'\n  primary_encap:\n    description:\n    - Determines the primary VLAN ID when using useg.\n    choices: [ range from 1 to 4096 ]\n  resolution_immediacy:\n    description:\n    - Determines when the policies should be resolved and available.\n    - The APIC defaults new EPG to Domain bindings to C(lazy).\n    choices: [ immediate, lazy, pre-provision ]\n    default: lazy\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\n  tenant:\n    description:\n    - Name of an existing tenant.\n    aliases: [ tenant_name ]\n  vm_provider:\n    description:\n    - The VM platform for VMM Domains.\n    - Support for Kubernetes was added in ACI v3.0.\n    - Support for CloudFoundry, OpenShift and Red Hat was added in ACI v3.1.\n    choices: [ cloudfoundry, kubernetes, microsoft, openshift, openstack, redhat, vmware ]\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new physical domain to EPG binding\n  aci_epg_to_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    domain: anstest\n    domain_type: phys\n    state: present\n\n- name: Remove an existing physical domain to EPG binding\n  aci_epg_to_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    domain: anstest\n    domain_type: phys\n    state: absent\n\n- name: Query a specific physical domain to EPG binding\n  aci_epg_to_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: anstest\n    ap: anstest\n    epg: anstest\n    domain: anstest\n    domain_type: phys\n    state: query\n\n- name: Query all domain to EPG bindings\n  aci_epg_to_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nVM_PROVIDER_MAPPING = dict(\n    cloudfoundry='CloudFoundry',\n    kubernetes='Kubernetes',\n    microsoft='Microsoft',\n    openshift='OpenShift',\n    openstack='OpenStack',\n    redhat='Redhat',\n    vmware='VMware',\n)\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        allow_useg=dict(type='str', choices=['encap', 'useg']),\n        ap=dict(type='str', aliases=['app_profile', 'app_profile_name']),  # Not required for querying all objects\n        deploy_immediacy=dict(type='str', choices=['immediate', 'on-demand']),\n        domain=dict(type='str', aliases=['domain_name', 'domain_profile']),  # Not required for querying all objects\n        domain_type=dict(type='str', choices=['phys', 'vmm'], aliases=['type']),  # Not required for querying all objects\n        encap=dict(type='int'),\n        encap_mode=dict(type='str', choices=['auto', 'vlan', 'vxlan']),\n        epg=dict(type='str', aliases=['name', 'epg_name']),  # Not required for querying all objects\n        netflow=dict(type='raw'),  # Turn into a boolean in v2.9\n        primary_encap=dict(type='int'),\n        resolution_immediacy=dict(type='str', choices=['immediate', 'lazy', 'pre-provision']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        tenant=dict(type='str', aliases=['tenant_name']),  # Not required for querying all objects\n        vm_provider=dict(type='str', choices=['cloudfoundry', 'kubernetes', 'microsoft', 'openshift', 'openstack', 'redhat', 'vmware']),\n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  # Deprecated starting from v2.6\n        protocol=dict(type='str', removed_in_version='2.6'),  # Deprecated in v2.6\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['domain_type', 'vmm', ['vm_provider']],\n            ['state', 'absent', ['ap', 'domain', 'domain_type', 'epg', 'tenant']],\n            ['state', 'present', ['ap', 'domain', 'domain_type', 'epg', 'tenant']],\n        ],\n    )\n\n    aci = ACIModule(module)\n\n    allow_useg = module.params['allow_useg']\n    ap = module.params['ap']\n    deploy_immediacy = module.params['deploy_immediacy']\n    domain = module.params['domain']\n    domain_type = module.params['domain_type']\n    vm_provider = module.params['vm_provider']\n    encap = module.params['encap']\n    if encap is not None:\n        if encap in range(1, 4097):\n            encap = 'vlan-{0}'.format(encap)\n        else:\n            module.fail_json(msg='Valid VLAN assigments are from 1 to 4096')\n    encap_mode = module.params['encap_mode']\n    epg = module.params['epg']\n    netflow = aci.boolean(module.params['netflow'], 'enabled', 'disabled')\n    primary_encap = module.params['primary_encap']\n    if primary_encap is not None:\n        if primary_encap in range(1, 4097):\n            primary_encap = 'vlan-{0}'.format(primary_encap)\n        else:\n            module.fail_json(msg='Valid VLAN assigments are from 1 to 4096')\n    resolution_immediacy = module.params['resolution_immediacy']\n    state = module.params['state']\n    tenant = module.params['tenant']\n\n    if domain_type == 'phys' and vm_provider is not None:\n        module.fail_json(msg=\"Domain type 'phys' cannot have a 'vm_provider'\")\n\n    # Compile the full domain for URL building\n    if domain_type == 'vmm':\n        epg_domain = 'uni/vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)\n    elif domain_type is not None:\n        epg_domain = 'uni/phys-{0}'.format(domain)\n    else:\n        epg_domain = None\n\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='fvAp',\n            aci_rn='ap-{0}'.format(ap),\n            filter_target='eq(fvAp.name, \"{0}\")'.format(ap),\n            module_object=ap,\n        ),\n        subclass_2=dict(\n            aci_class='fvAEPg',\n            aci_rn='epg-{0}'.format(epg),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(epg),\n            module_object=epg,\n        ),\n        subclass_3=dict(\n            aci_class='fvRsDomAtt',\n            aci_rn='rsdomAtt-[{0}]'.format(epg_domain),\n            filter_target='eq(fvRsDomAtt.tDn, \"{0}\")'.format(epg_domain),\n            module_object=epg_domain,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='fvRsDomAtt',\n            class_config=dict(\n                classPref=allow_useg,\n                encap=encap,\n                encapMode=encap_mode,\n                instrImedcy=deploy_immediacy,\n                netflowPref=netflow,\n                primaryEncap=primary_encap,\n                resImedcy=resolution_immediacy,\n            ),\n        )\n\n        aci.get_diff(aci_class='fvRsDomAtt')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_epg_to_domain.py", "id": "e38f1351028ea9e89e2cc3c1b8d17fe3", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_epg_to_domain.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}