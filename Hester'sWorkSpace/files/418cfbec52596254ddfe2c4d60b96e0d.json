{"author": "ansible", "code": "\n# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: oneview_ethernet_network\nshort_description: Manage OneView Ethernet Network resources\ndescription:\n    - Provides an interface to manage Ethernet Network resources. Can create, update, or delete.\nversion_added: \"2.4\"\nrequirements:\n    - hpOneView >= 3.1.0\nauthor:\n    - Felipe Bulsoni (@fgbulsoni)\n    - Thiago Miotto (@tmiotto)\n    - Adriane Cardozo (@adriane-cardozo)\noptions:\n    state:\n        description:\n            - Indicates the desired state for the Ethernet Network resource.\n                - C(present) will ensure data properties are compliant with OneView.\n                - C(absent) will remove the resource from OneView, if it exists.\n                - C(default_bandwidth_reset) will reset the network connection template to the default.\n        default: present\n        choices: [present, absent, default_bandwidth_reset]\n    data:\n        description:\n            - List with Ethernet Network properties.\n        required: true\nextends_documentation_fragment:\n    - oneview\n    - oneview.validateetag\n'''\n\nEXAMPLES = '''\n- name: Ensure that the Ethernet Network is present using the default configuration\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      vlanId: '201'\n  delegate_to: localhost\n\n- name: Update the Ethernet Network changing bandwidth and purpose\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      purpose: Management\n      bandwidth:\n          maximumBandwidth: 3000\n          typicalBandwidth: 2000\n  delegate_to: localhost\n\n- name: Ensure that the Ethernet Network is present with name 'Renamed Ethernet Network'\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      newName: 'Renamed Ethernet Network'\n  delegate_to: localhost\n\n- name: Ensure that the Ethernet Network is absent\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: absent\n    data:\n      name: 'New Ethernet Network'\n  delegate_to: localhost\n\n- name: Create Ethernet networks in bulk\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      vlanIdRange: '1-10,15,17'\n      purpose: General\n      namePrefix: TestNetwork\n      smartLink: false\n      privateNetwork: false\n      bandwidth:\n        maximumBandwidth: 10000\n        typicalBandwidth: 2000\n  delegate_to: localhost\n\n- name: Reset to the default network connection template\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: default_bandwidth_reset\n    data:\n      name: 'Test Ethernet Network'\n  delegate_to: localhost\n'''\n\nRETURN = '''\nethernet_network:\n    description: Has the facts about the Ethernet Networks.\n    returned: On state 'present'. Can be null.\n    type: dict\n\nethernet_network_bulk:\n    description: Has the facts about the Ethernet Networks affected by the bulk insert.\n    returned: When 'vlanIdRange' attribute is in data argument. Can be null.\n    type: dict\n\nethernet_network_connection_template:\n    description: Has the facts about the Ethernet Network Connection Template.\n    returned: On state 'default_bandwidth_reset'. Can be null.\n    type: dict\n'''\n\nfrom ansible.module_utils.oneview import OneViewModuleBase, OneViewModuleResourceNotFound\n\n\nclass EthernetNetworkModule(OneViewModuleBase):\n    MSG_CREATED = 'Ethernet Network created successfully.'\n    MSG_UPDATED = 'Ethernet Network updated successfully.'\n    MSG_DELETED = 'Ethernet Network deleted successfully.'\n    MSG_ALREADY_PRESENT = 'Ethernet Network is already present.'\n    MSG_ALREADY_ABSENT = 'Ethernet Network is already absent.'\n\n    MSG_BULK_CREATED = 'Ethernet Networks created successfully.'\n    MSG_MISSING_BULK_CREATED = 'Some missing Ethernet Networks were created successfully.'\n    MSG_BULK_ALREADY_EXIST = 'The specified Ethernet Networks already exist.'\n    MSG_CONNECTION_TEMPLATE_RESET = 'Ethernet Network connection template was reset to the default.'\n    MSG_ETHERNET_NETWORK_NOT_FOUND = 'Ethernet Network was not found.'\n\n    RESOURCE_FACT_NAME = 'ethernet_network'\n\n    def __init__(self):\n\n        argument_spec = dict(\n            state=dict(type='str', default='present', choices=['absent', 'default_bandwidth_reset', 'present']),\n            data=dict(type='dict', required=True),\n        )\n\n        super(EthernetNetworkModule, self).__init__(additional_arg_spec=argument_spec, validate_etag_support=True)\n\n        self.resource_client = self.oneview_client.ethernet_networks\n\n    def execute_module(self):\n\n        changed, msg, ansible_facts, resource = False, '', {}, None\n\n        if self.data.get('name'):\n            resource = self.get_by_name(self.data['name'])\n\n        if self.state == 'present':\n            if self.data.get('vlanIdRange'):\n                return self._bulk_present()\n            else:\n                return self._present(resource)\n        elif self.state == 'absent':\n            return self.resource_absent(resource)\n        elif self.state == 'default_bandwidth_reset':\n            changed, msg, ansible_facts = self._default_bandwidth_reset(resource)\n            return dict(changed=changed, msg=msg, ansible_facts=ansible_facts)\n\n    def _present(self, resource):\n\n        bandwidth = self.data.pop('bandwidth', None)\n        scope_uris = self.data.pop('scopeUris', None)\n        result = self.resource_present(resource, self.RESOURCE_FACT_NAME)\n\n        if bandwidth:\n            if self._update_connection_template(result['ansible_facts']['ethernet_network'], bandwidth)[0]:\n                result['changed'] = True\n                result['msg'] = self.MSG_UPDATED\n\n        if scope_uris is not None:\n            result = self.resource_scopes_set(result, 'ethernet_network', scope_uris)\n\n        return result\n\n    def _bulk_present(self):\n        vlan_id_range = self.data['vlanIdRange']\n        result = dict(ansible_facts={})\n        ethernet_networks = self.resource_client.get_range(self.data['namePrefix'], vlan_id_range)\n\n        if not ethernet_networks:\n            self.resource_client.create_bulk(self.data)\n            result['changed'] = True\n            result['msg'] = self.MSG_BULK_CREATED\n\n        else:\n            vlan_ids = self.resource_client.dissociate_values_or_ranges(vlan_id_range)\n            for net in ethernet_networks[:]:\n                vlan_ids.remove(net['vlanId'])\n\n            if len(vlan_ids) == 0:\n                result['msg'] = self.MSG_BULK_ALREADY_EXIST\n                result['changed'] = False\n            else:\n                if len(vlan_ids) == 1:\n                    self.data['vlanIdRange'] = '{0}-{1}'.format(vlan_ids[0], vlan_ids[0])\n                else:\n                    self.data['vlanIdRange'] = ','.join(map(str, vlan_ids))\n\n                self.resource_client.create_bulk(self.data)\n                result['changed'] = True\n                result['msg'] = self.MSG_MISSING_BULK_CREATED\n        result['ansible_facts']['ethernet_network_bulk'] = self.resource_client.get_range(self.data['namePrefix'], vlan_id_range)\n\n        return result\n\n    def _update_connection_template(self, ethernet_network, bandwidth):\n\n        if 'connectionTemplateUri' not in ethernet_network:\n            return False, None\n\n        connection_template = self.oneview_client.connection_templates.get(ethernet_network['connectionTemplateUri'])\n\n        merged_data = connection_template.copy()\n        merged_data.update({'bandwidth': bandwidth})\n\n        if not self.compare(connection_template, merged_data):\n            connection_template = self.oneview_client.connection_templates.update(merged_data)\n            return True, connection_template\n        else:\n            return False, None\n\n    def _default_bandwidth_reset(self, resource):\n\n        if not resource:\n            raise OneViewModuleResourceNotFound(self.MSG_ETHERNET_NETWORK_NOT_FOUND)\n\n        default_connection_template = self.oneview_client.connection_templates.get_default()\n\n        changed, connection_template = self._update_connection_template(resource, default_connection_template['bandwidth'])\n\n        return changed, self.MSG_CONNECTION_TEMPLATE_RESET, dict(\n            ethernet_network_connection_template=connection_template)\n\n\ndef main():\n    EthernetNetworkModule().run()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  oneview ethernet network short description  manage oneview ethernet network resources description        provides interface manage ethernet network resources  can create  update  delete  version added   2 4  requirements        hponeview    3 1 0 author        felipe bulsoni ( fgbulsoni)       thiago miotto ( tmiotto)       adriane cardozo ( adriane cardozo) options      state          description                indicates desired state ethernet network resource                    c(present) ensure data properties compliant oneview                    c(absent) remove resource oneview  exists                    c(default bandwidth reset) reset network connection template default          default  present         choices   present  absent  default bandwidth reset      data          description                list ethernet network properties          required  true extends documentation fragment        oneview       oneview validateetag      examples         name  ensure ethernet network present using default configuration   oneview ethernet network      config    etc oneview oneview config json      state  present     data        name   test ethernet network        vlanid   201    delegate  localhost    name  update ethernet network changing bandwidth purpose   oneview ethernet network      config    etc oneview oneview config json      state  present     data        name   test ethernet network        purpose  management       bandwidth            maximumbandwidth  3000           typicalbandwidth  2000   delegate  localhost    name  ensure ethernet network present name  renamed ethernet network    oneview ethernet network      config    etc oneview oneview config json      state  present     data        name   test ethernet network        newname   renamed ethernet network    delegate  localhost    name  ensure ethernet network absent   oneview ethernet network      config    etc oneview oneview config json      state  absent     data        name   new ethernet network    delegate  localhost    name  create ethernet networks bulk   oneview ethernet network      config    etc oneview oneview config json      state  present     data        vlanidrange   1 10 15 17        purpose  general       nameprefix  testnetwork       smartlink  false       privatenetwork  false       bandwidth          maximumbandwidth  10000         typicalbandwidth  2000   delegate  localhost    name  reset default network connection template   oneview ethernet network      config    etc oneview oneview config json      state  default bandwidth reset     data        name   test ethernet network    delegate  localhost      return       ethernet network      description  has facts ethernet networks      returned  on state  present   can null      type  dict  ethernet network bulk      description  has facts ethernet networks affected bulk insert      returned  when  vlanidrange  attribute data argument  can null      type  dict  ethernet network connection template      description  has facts ethernet network connection template      returned  on state  default bandwidth reset   can null      type  dict         usr bin python    copyright (c) 2016 2017 hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: oneview_ethernet_network\nshort_description: Manage OneView Ethernet Network resources\ndescription:\n    - Provides an interface to manage Ethernet Network resources. Can create, update, or delete.\nversion_added: \"2.4\"\nrequirements:\n    - hpOneView >= 3.1.0\nauthor:\n    - Felipe Bulsoni (@fgbulsoni)\n    - Thiago Miotto (@tmiotto)\n    - Adriane Cardozo (@adriane-cardozo)\noptions:\n    state:\n        description:\n            - Indicates the desired state for the Ethernet Network resource.\n                - C(present) will ensure data properties are compliant with OneView.\n                - C(absent) will remove the resource from OneView, if it exists.\n                - C(default_bandwidth_reset) will reset the network connection template to the default.\n        default: present\n        choices: [present, absent, default_bandwidth_reset]\n    data:\n        description:\n            - List with Ethernet Network properties.\n        required: true\nextends_documentation_fragment:\n    - oneview\n    - oneview.validateetag\n'''\n\nEXAMPLES = '''\n- name: Ensure that the Ethernet Network is present using the default configuration\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      vlanId: '201'\n  delegate_to: localhost\n\n- name: Update the Ethernet Network changing bandwidth and purpose\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      purpose: Management\n      bandwidth:\n          maximumBandwidth: 3000\n          typicalBandwidth: 2000\n  delegate_to: localhost\n\n- name: Ensure that the Ethernet Network is present with name 'Renamed Ethernet Network'\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      newName: 'Renamed Ethernet Network'\n  delegate_to: localhost\n\n- name: Ensure that the Ethernet Network is absent\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: absent\n    data:\n      name: 'New Ethernet Network'\n  delegate_to: localhost\n\n- name: Create Ethernet networks in bulk\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: present\n    data:\n      vlanIdRange: '1-10,15,17'\n      purpose: General\n      namePrefix: TestNetwork\n      smartLink: false\n      privateNetwork: false\n      bandwidth:\n        maximumBandwidth: 10000\n        typicalBandwidth: 2000\n  delegate_to: localhost\n\n- name: Reset to the default network connection template\n  oneview_ethernet_network:\n    config: '/etc/oneview/oneview_config.json'\n    state: default_bandwidth_reset\n    data:\n      name: 'Test Ethernet Network'\n  delegate_to: localhost\n'''\n\nRETURN = '''\nethernet_network:\n    description: Has the facts about the Ethernet Networks.\n    returned: On state 'present'. Can be null.\n    type: dict\n\nethernet_network_bulk:\n    description: Has the facts about the Ethernet Networks affected by the bulk insert.\n    returned: When 'vlanIdRange' attribute is in data argument. Can be null.\n    type: dict\n\nethernet_network_connection_template:\n    description: Has the facts about the Ethernet Network Connection Template.\n    returned: On state 'default_bandwidth_reset'. Can be null.\n    type: dict\n'''\n\nfrom ansible.module_utils.oneview import OneViewModuleBase, OneViewModuleResourceNotFound\n\n\nclass EthernetNetworkModule(OneViewModuleBase):\n    MSG_CREATED = 'Ethernet Network created successfully.'\n    MSG_UPDATED = 'Ethernet Network updated successfully.'\n    MSG_DELETED = 'Ethernet Network deleted successfully.'\n    MSG_ALREADY_PRESENT = 'Ethernet Network is already present.'\n    MSG_ALREADY_ABSENT = 'Ethernet Network is already absent.'\n\n    MSG_BULK_CREATED = 'Ethernet Networks created successfully.'\n    MSG_MISSING_BULK_CREATED = 'Some missing Ethernet Networks were created successfully.'\n    MSG_BULK_ALREADY_EXIST = 'The specified Ethernet Networks already exist.'\n    MSG_CONNECTION_TEMPLATE_RESET = 'Ethernet Network connection template was reset to the default.'\n    MSG_ETHERNET_NETWORK_NOT_FOUND = 'Ethernet Network was not found.'\n\n    RESOURCE_FACT_NAME = 'ethernet_network'\n\n    def __init__(self):\n\n        argument_spec = dict(\n            state=dict(type='str', default='present', choices=['absent', 'default_bandwidth_reset', 'present']),\n            data=dict(type='dict', required=True),\n        )\n\n        super(EthernetNetworkModule, self).__init__(additional_arg_spec=argument_spec, validate_etag_support=True)\n\n        self.resource_client = self.oneview_client.ethernet_networks\n\n    def execute_module(self):\n\n        changed, msg, ansible_facts, resource = False, '', {}, None\n\n        if self.data.get('name'):\n            resource = self.get_by_name(self.data['name'])\n\n        if self.state == 'present':\n            if self.data.get('vlanIdRange'):\n                return self._bulk_present()\n            else:\n                return self._present(resource)\n        elif self.state == 'absent':\n            return self.resource_absent(resource)\n        elif self.state == 'default_bandwidth_reset':\n            changed, msg, ansible_facts = self._default_bandwidth_reset(resource)\n            return dict(changed=changed, msg=msg, ansible_facts=ansible_facts)\n\n    def _present(self, resource):\n\n        bandwidth = self.data.pop('bandwidth', None)\n        scope_uris = self.data.pop('scopeUris', None)\n        result = self.resource_present(resource, self.RESOURCE_FACT_NAME)\n\n        if bandwidth:\n            if self._update_connection_template(result['ansible_facts']['ethernet_network'], bandwidth)[0]:\n                result['changed'] = True\n                result['msg'] = self.MSG_UPDATED\n\n        if scope_uris is not None:\n            result = self.resource_scopes_set(result, 'ethernet_network', scope_uris)\n\n        return result\n\n    def _bulk_present(self):\n        vlan_id_range = self.data['vlanIdRange']\n        result = dict(ansible_facts={})\n        ethernet_networks = self.resource_client.get_range(self.data['namePrefix'], vlan_id_range)\n\n        if not ethernet_networks:\n            self.resource_client.create_bulk(self.data)\n            result['changed'] = True\n            result['msg'] = self.MSG_BULK_CREATED\n\n        else:\n            vlan_ids = self.resource_client.dissociate_values_or_ranges(vlan_id_range)\n            for net in ethernet_networks[:]:\n                vlan_ids.remove(net['vlanId'])\n\n            if len(vlan_ids) == 0:\n                result['msg'] = self.MSG_BULK_ALREADY_EXIST\n                result['changed'] = False\n            else:\n                if len(vlan_ids) == 1:\n                    self.data['vlanIdRange'] = '{0}-{1}'.format(vlan_ids[0], vlan_ids[0])\n                else:\n                    self.data['vlanIdRange'] = ','.join(map(str, vlan_ids))\n\n                self.resource_client.create_bulk(self.data)\n                result['changed'] = True\n                result['msg'] = self.MSG_MISSING_BULK_CREATED\n        result['ansible_facts']['ethernet_network_bulk'] = self.resource_client.get_range(self.data['namePrefix'], vlan_id_range)\n\n        return result\n\n    def _update_connection_template(self, ethernet_network, bandwidth):\n\n        if 'connectionTemplateUri' not in ethernet_network:\n            return False, None\n\n        connection_template = self.oneview_client.connection_templates.get(ethernet_network['connectionTemplateUri'])\n\n        merged_data = connection_template.copy()\n        merged_data.update({'bandwidth': bandwidth})\n\n        if not self.compare(connection_template, merged_data):\n            connection_template = self.oneview_client.connection_templates.update(merged_data)\n            return True, connection_template\n        else:\n            return False, None\n\n    def _default_bandwidth_reset(self, resource):\n\n        if not resource:\n            raise OneViewModuleResourceNotFound(self.MSG_ETHERNET_NETWORK_NOT_FOUND)\n\n        default_connection_template = self.oneview_client.connection_templates.get_default()\n\n        changed, connection_template = self._update_connection_template(resource, default_connection_template['bandwidth'])\n\n        return changed, self.MSG_CONNECTION_TEMPLATE_RESET, dict(\n            ethernet_network_connection_template=connection_template)\n\n\ndef main():\n    EthernetNetworkModule().run()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "oneview_ethernet_network.py", "id": "418cfbec52596254ddfe2c4d60b96e0d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/oneview/oneview_ethernet_network.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}