{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport os.path\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass SaveFromIE(InfoExtractor):\n    IE_NAME = 'savefrom.net'\n    _VALID_URL = r'https?://[^.]+\\.savefrom\\.net/\\\n\n    _TEST = {\n        'url': 'http://en.savefrom.net/\n        'info_dict': {\n            'id': 'UlVRAPW2WJY',\n            'ext': 'mp4',\n            'title': 'About Team Radical MMA | MMA Fighting',\n            'upload_date': '20120816',\n            'uploader': 'Howcast',\n            'uploader_id': 'Howcast',\n            'description': r're:(?s).* Hi, my name is Rene Dreifuss\\. And I\\'m here to show you some MMA.*',\n        },\n        'params': {\n            'skip_download': True\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = os.path.splitext(url.split('/')[-1])[0]\n        return {\n            '_type': 'url',\n            'id': video_id,\n            'url': mobj.group('url'),\n        }\n", "comments": "# coding: utf-8\n#url=(?P<url>.*)$'\n#url=http://youtube.com/watch?v=UlVRAPW2WJY&utm_source=youtube.com&utm_medium=short_domains&utm_campaign=ssyoutube.com',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport os.path\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass SaveFromIE(InfoExtractor):\n    IE_NAME = 'savefrom.net'\n    _VALID_URL = r'https?://[^.]+\\.savefrom\\.net/\\#url=(?P<url>.*)$'\n\n    _TEST = {\n        'url': 'http://en.savefrom.net/#url=http://youtube.com/watch?v=UlVRAPW2WJY&utm_source=youtube.com&utm_medium=short_domains&utm_campaign=ssyoutube.com',\n        'info_dict': {\n            'id': 'UlVRAPW2WJY',\n            'ext': 'mp4',\n            'title': 'About Team Radical MMA | MMA Fighting',\n            'upload_date': '20120816',\n            'uploader': 'Howcast',\n            'uploader_id': 'Howcast',\n            'description': r're:(?s).* Hi, my name is Rene Dreifuss\\. And I\\'m here to show you some MMA.*',\n        },\n        'params': {\n            'skip_download': True\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = os.path.splitext(url.split('/')[-1])[0]\n        return {\n            '_type': 'url',\n            'id': video_id,\n            'url': mobj.group('url'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "savefrom.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/savefrom.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}