{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"Shuffle samples for human evaluation.\n\nLocal launch command:\n  python sample_shuffler.py\n  --input_ml_path=/tmp/ptb/seq2seq_vd_shareemb_forreal_55_3\n  --input_gan_path=/tmp/ptb/MaskGAN_PTB_ari_avg_56.29_v2.0.0\n  --output_file_name=/tmp/ptb/shuffled_output.txt\n\n  python sample_shuffler.py\n  --input_ml_path=/tmp/generate_samples/MaskGAN_IMDB_Benchmark_87.1_v0.3.0\n  --input_gan_path=/tmp/generate_samples/MaskGAN_IMDB_v1.0.1\n  --output_file_name=/tmp/imdb/shuffled_output.txt\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n Dependency imports\nimport numpy as np\n\nimport tensorflow as tf\n\ntf.app.flags.DEFINE_string('input_ml_path', '/tmp', 'Model output directory.')\ntf.app.flags.DEFINE_string('input_gan_path', '/tmp', 'Model output directory.')\ntf.app.flags.DEFINE_string('output_file_name', '/tmp/ptb/shuffled_output.txt',\n                           'Model output file.')\ntf.app.flags.DEFINE_boolean(\n    'output_masked_logs', False,\n    'Whether to display for human evaluation (show masking).')\ntf.app.flags.DEFINE_integer('number_epochs', 1,\n                            'The number of epochs to produce.')\n\nFLAGS = tf.app.flags.FLAGS\n\n\ndef shuffle_samples(input_file_1, input_file_2):\n  \"\"\"Shuffle the examples.\"\"\"\n  shuffled = []\n\n   Set a random seed to keep fixed mask.\n  np.random.seed(0)\n\n  for line_1, line_2 in zip(input_file_1, input_file_2):\n    rand = np.random.randint(1, 3)\n    if rand == 1:\n      shuffled.append((rand, line_1, line_2))\n    else:\n      shuffled.append((rand, line_2, line_1))\n  input_file_1.close()\n  input_file_2.close()\n  return shuffled\n\n\ndef generate_output(shuffled_tuples, output_file_name):\n  output_file = tf.gfile.GFile(output_file_name, mode='w')\n\n  for tup in shuffled_tuples:\n    formatted_tuple = ('\\n{:<1}, {:<1}, {:<1}').format(tup[0], tup[1].rstrip(),\n                                                       tup[2].rstrip())\n    output_file.write(formatted_tuple)\n  output_file.close()\n\n\ndef main(_):\n  ml_samples_file = tf.gfile.GFile(\n      os.path.join(FLAGS.input_ml_path, 'reviews.txt'), mode='r')\n  gan_samples_file = tf.gfile.GFile(\n      os.path.join(FLAGS.input_gan_path, 'reviews.txt'), mode='r')\n\n   Generate shuffled tuples.\n  shuffled_tuples = shuffle_samples(ml_samples_file, gan_samples_file)\n\n   Output to file.\n  generate_output(shuffled_tuples, FLAGS.output_file_name)\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "comments": "   shuffle samples human evaluation   local launch command    python sample shuffler py     input ml path  tmp ptb seq2seq vd shareemb forreal 55 3     input gan path  tmp ptb maskgan ptb ari avg 56 29 v2 0 0     output file name  tmp ptb shuffled output txt    python sample shuffler py     input ml path  tmp generate samples maskgan imdb benchmark 87 1 v0 3 0     input gan path  tmp generate samples maskgan imdb v1 0 1     output file name  tmp imdb shuffled output txt        future   import absolute import   future   import division   future   import print function  import os   dependency imports import numpy np  import tensorflow tf  tf app flags define string( input ml path     tmp    model output directory  ) tf app flags define string( input gan path     tmp    model output directory  ) tf app flags define string( output file name     tmp ptb shuffled output txt                               model output file  ) tf app flags define boolean(      output masked logs   false       whether display human evaluation (show masking)  ) tf app flags define integer( number epochs   1                               the number epochs produce  )  flags   tf app flags flags   def shuffle samples(input file 1  input file 2)       shuffle examples        copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       dependency imports    set random seed keep fixed mask     generate shuffled tuples     output file  ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Shuffle samples for human evaluation.\n\nLocal launch command:\n  python sample_shuffler.py\n  --input_ml_path=/tmp/ptb/seq2seq_vd_shareemb_forreal_55_3\n  --input_gan_path=/tmp/ptb/MaskGAN_PTB_ari_avg_56.29_v2.0.0\n  --output_file_name=/tmp/ptb/shuffled_output.txt\n\n  python sample_shuffler.py\n  --input_ml_path=/tmp/generate_samples/MaskGAN_IMDB_Benchmark_87.1_v0.3.0\n  --input_gan_path=/tmp/generate_samples/MaskGAN_IMDB_v1.0.1\n  --output_file_name=/tmp/imdb/shuffled_output.txt\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n# Dependency imports\nimport numpy as np\n\nimport tensorflow as tf\n\ntf.app.flags.DEFINE_string('input_ml_path', '/tmp', 'Model output directory.')\ntf.app.flags.DEFINE_string('input_gan_path', '/tmp', 'Model output directory.')\ntf.app.flags.DEFINE_string('output_file_name', '/tmp/ptb/shuffled_output.txt',\n                           'Model output file.')\ntf.app.flags.DEFINE_boolean(\n    'output_masked_logs', False,\n    'Whether to display for human evaluation (show masking).')\ntf.app.flags.DEFINE_integer('number_epochs', 1,\n                            'The number of epochs to produce.')\n\nFLAGS = tf.app.flags.FLAGS\n\n\ndef shuffle_samples(input_file_1, input_file_2):\n  \"\"\"Shuffle the examples.\"\"\"\n  shuffled = []\n\n  # Set a random seed to keep fixed mask.\n  np.random.seed(0)\n\n  for line_1, line_2 in zip(input_file_1, input_file_2):\n    rand = np.random.randint(1, 3)\n    if rand == 1:\n      shuffled.append((rand, line_1, line_2))\n    else:\n      shuffled.append((rand, line_2, line_1))\n  input_file_1.close()\n  input_file_2.close()\n  return shuffled\n\n\ndef generate_output(shuffled_tuples, output_file_name):\n  output_file = tf.gfile.GFile(output_file_name, mode='w')\n\n  for tup in shuffled_tuples:\n    formatted_tuple = ('\\n{:<1}, {:<1}, {:<1}').format(tup[0], tup[1].rstrip(),\n                                                       tup[2].rstrip())\n    output_file.write(formatted_tuple)\n  output_file.close()\n\n\ndef main(_):\n  ml_samples_file = tf.gfile.GFile(\n      os.path.join(FLAGS.input_ml_path, 'reviews.txt'), mode='r')\n  gan_samples_file = tf.gfile.GFile(\n      os.path.join(FLAGS.input_gan_path, 'reviews.txt'), mode='r')\n\n  # Generate shuffled tuples.\n  shuffled_tuples = shuffle_samples(ml_samples_file, gan_samples_file)\n\n  # Output to file.\n  generate_output(shuffled_tuples, FLAGS.output_file_name)\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "description": "Models and examples built with TensorFlow", "file_name": "sample_shuffler.py", "id": "5ec768f1d91ec44f0f1455a186fe7abe", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/maskgan/sample_shuffler.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}