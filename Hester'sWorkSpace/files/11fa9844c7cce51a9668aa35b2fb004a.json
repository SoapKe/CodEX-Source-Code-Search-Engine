{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlencode\nfrom ..utils import (\n    int_or_none,\n    qualities,\n)\n\n\nclass NprIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?npr\\.org/player/v2/mediaPlayer\\.html\\?.*\\bid=(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.npr.org/player/v2/mediaPlayer.html?id=449974205',\n        'info_dict': {\n            'id': '449974205',\n            'title': 'New Music From Beach House, Chairlift, CMJ Discoveries And More'\n        },\n        'playlist_count': 7,\n    }, {\n        'url': 'http://www.npr.org/player/v2/mediaPlayer.html?action=1&t=1&islist=false&id=446928052&m=446929930&live=1',\n        'info_dict': {\n            'id': '446928052',\n            'title': \"Songs We Love: Tigran Hamasyan, 'Your Mercy is Boundless'\"\n        },\n        'playlist': [{\n            'md5': '12fa60cb2d3ed932f53609d4aeceabf1',\n            'info_dict': {\n                'id': '446929930',\n                'ext': 'mp3',\n                'title': 'Your Mercy is Boundless (Bazum en Qo gtutyunqd)',\n                'duration': 402,\n            },\n        }],\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        config = self._download_json(\n            'http://api.npr.org/query?%s' % compat_urllib_parse_urlencode({\n                'id': playlist_id,\n                'fields': 'titles,audio,show',\n                'format': 'json',\n                'apiKey': 'MDAzMzQ2MjAyMDEyMzk4MTU1MDg3ZmM3MQ010',\n            }), playlist_id)\n\n        story = config['list']['story'][0]\n\n        KNOWN_FORMATS = ('threegp', 'mp4', 'mp3')\n        quality = qualities(KNOWN_FORMATS)\n\n        entries = []\n        for audio in story.get('audio', []):\n            title = audio.get('title', {}).get('$text')\n            duration = int_or_none(audio.get('duration', {}).get('$text'))\n            formats = []\n            for format_id, formats_entry in audio.get('format', {}).items():\n                if not formats_entry:\n                    continue\n                if isinstance(formats_entry, list):\n                    formats_entry = formats_entry[0]\n                format_url = formats_entry.get('$text')\n                if not format_url:\n                    continue\n                if format_id in KNOWN_FORMATS:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': format_id,\n                        'ext': formats_entry.get('type'),\n                        'quality': quality(format_id),\n                    })\n            self._sort_formats(formats)\n            entries.append({\n                'id': audio['id'],\n                'title': title,\n                'duration': duration,\n                'formats': formats,\n            })\n\n        playlist_title = story.get('title', {}).get('$text')\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlencode\nfrom ..utils import (\n    int_or_none,\n    qualities,\n)\n\n\nclass NprIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?npr\\.org/player/v2/mediaPlayer\\.html\\?.*\\bid=(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.npr.org/player/v2/mediaPlayer.html?id=449974205',\n        'info_dict': {\n            'id': '449974205',\n            'title': 'New Music From Beach House, Chairlift, CMJ Discoveries And More'\n        },\n        'playlist_count': 7,\n    }, {\n        'url': 'http://www.npr.org/player/v2/mediaPlayer.html?action=1&t=1&islist=false&id=446928052&m=446929930&live=1',\n        'info_dict': {\n            'id': '446928052',\n            'title': \"Songs We Love: Tigran Hamasyan, 'Your Mercy is Boundless'\"\n        },\n        'playlist': [{\n            'md5': '12fa60cb2d3ed932f53609d4aeceabf1',\n            'info_dict': {\n                'id': '446929930',\n                'ext': 'mp3',\n                'title': 'Your Mercy is Boundless (Bazum en Qo gtutyunqd)',\n                'duration': 402,\n            },\n        }],\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        config = self._download_json(\n            'http://api.npr.org/query?%s' % compat_urllib_parse_urlencode({\n                'id': playlist_id,\n                'fields': 'titles,audio,show',\n                'format': 'json',\n                'apiKey': 'MDAzMzQ2MjAyMDEyMzk4MTU1MDg3ZmM3MQ010',\n            }), playlist_id)\n\n        story = config['list']['story'][0]\n\n        KNOWN_FORMATS = ('threegp', 'mp4', 'mp3')\n        quality = qualities(KNOWN_FORMATS)\n\n        entries = []\n        for audio in story.get('audio', []):\n            title = audio.get('title', {}).get('$text')\n            duration = int_or_none(audio.get('duration', {}).get('$text'))\n            formats = []\n            for format_id, formats_entry in audio.get('format', {}).items():\n                if not formats_entry:\n                    continue\n                if isinstance(formats_entry, list):\n                    formats_entry = formats_entry[0]\n                format_url = formats_entry.get('$text')\n                if not format_url:\n                    continue\n                if format_id in KNOWN_FORMATS:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': format_id,\n                        'ext': formats_entry.get('type'),\n                        'quality': quality(format_id),\n                    })\n            self._sort_formats(formats)\n            entries.append({\n                'id': audio['id'],\n                'title': title,\n                'duration': duration,\n                'formats': formats,\n            })\n\n        playlist_title = story.get('title', {}).get('$text')\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "npr.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/npr.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}