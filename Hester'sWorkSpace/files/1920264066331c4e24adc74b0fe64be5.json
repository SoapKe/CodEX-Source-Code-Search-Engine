{"author": "nvbn", "code": "import sys\nfrom argparse import ArgumentParser, SUPPRESS\nfrom .const import ARGUMENT_PLACEHOLDER\nfrom .utils import get_alias\n\n\nclass Parser(object):\n    \n        if ARGUMENT_PLACEHOLDER in argv:\n            index = argv.index(ARGUMENT_PLACEHOLDER)\n            return argv[index + 1:] + ['--'] + argv[:index]\n        elif argv and not argv[0].startswith('-') and argv[0] != '--':\n            return ['--'] + argv\n        else:\n            return argv\n\n    def parse(self, argv):\n        arguments = self._prepare_arguments(argv[1:])\n        return self._parser.parse_args(arguments)\n\n    def print_usage(self):\n        self._parser.print_usage(sys.stderr)\n\n    def print_help(self):\n        self._parser.print_help(sys.stderr)\n", "comments": "Argument parser that can handle arguments with our special\n    placeholder.\n\n    \"\"\"\n\n    def __init__(self):\n        self._parser = ArgumentParser(prog='thefuck', add_help=False)\n        self._add_arguments()\n\n    def _add_arguments(self):\n        \"\"\"Adds arguments to parser.\"\"\"\n        self._parser.add_argument(\n            '-v', '--version',\n            action='store_true',\n            help=\"show program's version number and exit\")\n        self._parser.add_argument(\n            '-a', '--alias',\n            nargs='?',\n            const=get_alias(),\n            help='[custom-alias-name] prints alias for current shell')\n        self._parser.add_argument(\n            '-l', '--shell-logger',\n            action='store',\n            help='log shell output to the file')\n        self._parser.add_argument(\n            '--enable-experimental-instant-mode',\n            action='store_true',\n            help='enable experimental instant mode, use on your own risk')\n        self._parser.add_argument(\n            '-h', '--help',\n            action='store_true',\n            help='show this help message and exit')\n        self._add_conflicting_arguments()\n        self._parser.add_argument(\n            '-d', '--debug',\n            action='store_true',\n            help='enable debug output')\n        self._parser.add_argument(\n            '--force-command',\n            action='store',\n            help=SUPPRESS)\n        self._parser.add_argument(\n            'command',\n            nargs='*',\n            help='command that should be fixed')\n\n    def _add_conflicting_arguments(self):\n        \"\"\"It's too dangerous to use `-y` and `-r` together.\"\"\"\n        group = self._parser.add_mutually_exclusive_group()\n        group.add_argument(\n            '-y', '--yes',\n            action='store_true',\n            help='execute fixed command without confirmation')\n        group.add_argument(\n            '-r', '--repeat',\n            action='store_true',\n            help='repeat on failure')\n\n    def _prepare_arguments(self, argv):\n        \"\"\"Prepares arguments by:\n\n        - removing placeholder and moving arguments after it to beginning,\n          we need this to distinguish arguments from `command` with ours;\n\n        - adding `--` before `command`, so our parse would ignore arguments\n          of `command`.\n\n        \n \n", "content": "import sys\nfrom argparse import ArgumentParser, SUPPRESS\nfrom .const import ARGUMENT_PLACEHOLDER\nfrom .utils import get_alias\n\n\nclass Parser(object):\n    \"\"\"Argument parser that can handle arguments with our special\n    placeholder.\n\n    \"\"\"\n\n    def __init__(self):\n        self._parser = ArgumentParser(prog='thefuck', add_help=False)\n        self._add_arguments()\n\n    def _add_arguments(self):\n        \"\"\"Adds arguments to parser.\"\"\"\n        self._parser.add_argument(\n            '-v', '--version',\n            action='store_true',\n            help=\"show program's version number and exit\")\n        self._parser.add_argument(\n            '-a', '--alias',\n            nargs='?',\n            const=get_alias(),\n            help='[custom-alias-name] prints alias for current shell')\n        self._parser.add_argument(\n            '-l', '--shell-logger',\n            action='store',\n            help='log shell output to the file')\n        self._parser.add_argument(\n            '--enable-experimental-instant-mode',\n            action='store_true',\n            help='enable experimental instant mode, use on your own risk')\n        self._parser.add_argument(\n            '-h', '--help',\n            action='store_true',\n            help='show this help message and exit')\n        self._add_conflicting_arguments()\n        self._parser.add_argument(\n            '-d', '--debug',\n            action='store_true',\n            help='enable debug output')\n        self._parser.add_argument(\n            '--force-command',\n            action='store',\n            help=SUPPRESS)\n        self._parser.add_argument(\n            'command',\n            nargs='*',\n            help='command that should be fixed')\n\n    def _add_conflicting_arguments(self):\n        \"\"\"It's too dangerous to use `-y` and `-r` together.\"\"\"\n        group = self._parser.add_mutually_exclusive_group()\n        group.add_argument(\n            '-y', '--yes',\n            action='store_true',\n            help='execute fixed command without confirmation')\n        group.add_argument(\n            '-r', '--repeat',\n            action='store_true',\n            help='repeat on failure')\n\n    def _prepare_arguments(self, argv):\n        \"\"\"Prepares arguments by:\n\n        - removing placeholder and moving arguments after it to beginning,\n          we need this to distinguish arguments from `command` with ours;\n\n        - adding `--` before `command`, so our parse would ignore arguments\n          of `command`.\n\n        \"\"\"\n        if ARGUMENT_PLACEHOLDER in argv:\n            index = argv.index(ARGUMENT_PLACEHOLDER)\n            return argv[index + 1:] + ['--'] + argv[:index]\n        elif argv and not argv[0].startswith('-') and argv[0] != '--':\n            return ['--'] + argv\n        else:\n            return argv\n\n    def parse(self, argv):\n        arguments = self._prepare_arguments(argv[1:])\n        return self._parser.parse_args(arguments)\n\n    def print_usage(self):\n        self._parser.print_usage(sys.stderr)\n\n    def print_help(self):\n        self._parser.print_help(sys.stderr)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "argument_parser.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/argument_parser.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}