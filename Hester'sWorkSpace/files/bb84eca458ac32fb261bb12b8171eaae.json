{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import http\nfrom odoo.http import request\nfrom odoo.addons.website_sale.controllers.main import WebsiteSale\n\n\nclass WebsiteSaleOptions(WebsiteSale):\n\n    @http.route(['/shop/product/<model(\"product.template\"):product>'], type='http', auth=\"public\", website=True)\n    def product(self, product, category='', search='', **kwargs):\n        r = super(WebsiteSaleOptions, self).product(product, category, search, **kwargs)\n        r.qcontext['optional_product_ids'] = [p.with_context({'active_id': p.id}) for p in product.optional_product_ids]\n        return r\n\n    @http.route(['/shop/cart/update_option'], type='http', auth=\"public\", methods=['POST'], website=True, multilang=False)\n    def cart_options_update_json(self, product_id, add_qty=1, set_qty=0, goto_shop=None, lang=None, **kw):\n        if lang:\n            request.website = request.website.with_context(lang=lang)\n\n        order = request.website.sale_get_order(force_create=1)\n        product = request.env['product.product'].browse(int(product_id))\n\n        option_ids = product.optional_product_ids.mapped('product_variant_ids').ids\n        optional_product_ids = []\n        for k, v in kw.items():\n            if \"optional-product-\" in k and int(kw.get(k.replace(\"product\", \"add\"))) and int(v) in option_ids:\n                optional_product_ids.append(int(v))\n\n        attributes = self._filter_attributes(**kw)\n\n        value = {}\n        if add_qty or set_qty:\n            value = order._cart_update(\n                product_id=int(product_id),\n                add_qty=add_qty,\n                set_qty=set_qty,\n                attributes=attributes,\n                optional_product_ids=optional_product_ids\n            )\n\n        \n        for option_id in optional_product_ids:\n            order._cart_update(\n                product_id=option_id,\n                set_qty=value.get('quantity'),\n                attributes=attributes,\n                linked_line_id=value.get('line_id')\n            )\n\n        return str(order.cart_quantity)\n\n    @http.route(['/shop/modal'], type='json', auth=\"public\", methods=['POST'], website=True)\n    def modal(self, product_id, **kw):\n        pricelist = request.website.get_current_pricelist()\n        product_context = dict(request.context)\n        quantity = kw['kwargs']['context']['quantity']\n        if not product_context.get('pricelist'):\n            product_context['pricelist'] = pricelist.id\n        \n        product_context.update(kw.get('kwargs', {}).get('context', {}))\n\n        from_currency = request.env.user.company_id.currency_id\n        to_currency = pricelist.currency_id\n        compute_currency = lambda price: request.env['res.currency']._compute(from_currency, to_currency, price)\n        product = request.env['product.product'].with_context(product_context).browse(int(product_id))\n\n        main_product_attr_ids = self.get_attribute_value_ids(product)\n        for variant in main_product_attr_ids:\n            if variant[0] == product.id:\n                # We indeed need a list of lists (even with only 1 element)\n                main_product_attr_ids = [variant]\n                break\n\n        return request.env['ir.ui.view'].render_template(\"website_sale_options.modal\", {\n            'product': product,\n            'quantity': quantity,\n            'compute_currency': compute_currency,\n            'get_attribute_value_ids': self.get_attribute_value_ids,\n            'main_product_attr_ids': main_product_attr_ids,\n        })\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     options time quantity    fetch quantity custom context    we indeed need list lists (even 1 element) ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import http\nfrom odoo.http import request\nfrom odoo.addons.website_sale.controllers.main import WebsiteSale\n\n\nclass WebsiteSaleOptions(WebsiteSale):\n\n    @http.route(['/shop/product/<model(\"product.template\"):product>'], type='http', auth=\"public\", website=True)\n    def product(self, product, category='', search='', **kwargs):\n        r = super(WebsiteSaleOptions, self).product(product, category, search, **kwargs)\n        r.qcontext['optional_product_ids'] = [p.with_context({'active_id': p.id}) for p in product.optional_product_ids]\n        return r\n\n    @http.route(['/shop/cart/update_option'], type='http', auth=\"public\", methods=['POST'], website=True, multilang=False)\n    def cart_options_update_json(self, product_id, add_qty=1, set_qty=0, goto_shop=None, lang=None, **kw):\n        if lang:\n            request.website = request.website.with_context(lang=lang)\n\n        order = request.website.sale_get_order(force_create=1)\n        product = request.env['product.product'].browse(int(product_id))\n\n        option_ids = product.optional_product_ids.mapped('product_variant_ids').ids\n        optional_product_ids = []\n        for k, v in kw.items():\n            if \"optional-product-\" in k and int(kw.get(k.replace(\"product\", \"add\"))) and int(v) in option_ids:\n                optional_product_ids.append(int(v))\n\n        attributes = self._filter_attributes(**kw)\n\n        value = {}\n        if add_qty or set_qty:\n            value = order._cart_update(\n                product_id=int(product_id),\n                add_qty=add_qty,\n                set_qty=set_qty,\n                attributes=attributes,\n                optional_product_ids=optional_product_ids\n            )\n\n        # options have all time the same quantity\n        for option_id in optional_product_ids:\n            order._cart_update(\n                product_id=option_id,\n                set_qty=value.get('quantity'),\n                attributes=attributes,\n                linked_line_id=value.get('line_id')\n            )\n\n        return str(order.cart_quantity)\n\n    @http.route(['/shop/modal'], type='json', auth=\"public\", methods=['POST'], website=True)\n    def modal(self, product_id, **kw):\n        pricelist = request.website.get_current_pricelist()\n        product_context = dict(request.context)\n        quantity = kw['kwargs']['context']['quantity']\n        if not product_context.get('pricelist'):\n            product_context['pricelist'] = pricelist.id\n        # fetch quantity from custom context\n        product_context.update(kw.get('kwargs', {}).get('context', {}))\n\n        from_currency = request.env.user.company_id.currency_id\n        to_currency = pricelist.currency_id\n        compute_currency = lambda price: request.env['res.currency']._compute(from_currency, to_currency, price)\n        product = request.env['product.product'].with_context(product_context).browse(int(product_id))\n\n        main_product_attr_ids = self.get_attribute_value_ids(product)\n        for variant in main_product_attr_ids:\n            if variant[0] == product.id:\n                # We indeed need a list of lists (even with only 1 element)\n                main_product_attr_ids = [variant]\n                break\n\n        return request.env['ir.ui.view'].render_template(\"website_sale_options.modal\", {\n            'product': product,\n            'quantity': quantity,\n            'compute_currency': compute_currency,\n            'get_attribute_value_ids': self.get_attribute_value_ids,\n            'main_product_attr_ids': main_product_attr_ids,\n        })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "bb84eca458ac32fb261bb12b8171eaae", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_sale_options/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}