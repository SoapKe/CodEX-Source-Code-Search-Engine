{"author": "django", "code": "from django.apps import apps\nfrom django.conf import settings\nfrom django.db import connection\nfrom django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n\nfrom .models.tablespaces import (\n    Article, ArticleRef, Authors, Reviewers, Scientist, ScientistRef,\n)\n\n\ndef sql_for_table(model):\n    with connection.schema_editor(collect_sql=True) as editor:\n        editor.create_model(model)\n    return editor.collected_sql[0]\n\n\ndef sql_for_index(model):\n    return '\\n'.join(str(sql) for sql in connection.schema_editor()._model_indexes_sql(model))\n\n\n\n\n\nclass TablespacesTests(TestCase):\n\n    def setUp(self):\n        \n        \n        self._old_models = apps.app_configs['model_options'].models.copy()\n\n        for model in Article, Authors, Reviewers, Scientist:\n            model._meta.managed = True\n\n    def tearDown(self):\n        for model in Article, Authors, Reviewers, Scientist:\n            model._meta.managed = False\n\n        apps.app_configs['model_options'].models = self._old_models\n        apps.all_models['model_options'] = self._old_models\n        apps.clear_cache()\n\n    def assertNumContains(self, haystack, needle, count):\n        real_count = haystack.count(needle)\n        self.assertEqual(real_count, count, \"Found %d instances of '%s', expected %d\" % (real_count, needle, count))\n\n    @skipUnlessDBFeature('supports_tablespaces')\n    def test_tablespace_for_model(self):\n        sql = sql_for_table(Scientist).lower()\n        if settings.DEFAULT_INDEX_TABLESPACE:\n            \n            self.assertNumContains(sql, 'tbl_tbsp', 1)\n            \n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n        else:\n             + 1 for the index on the primary key\n            self.assertNumContains(sql, 'tbl_tbsp', 2)\n\n    @skipIfDBFeature('supports_tablespaces')\n    def test_tablespace_ignored_for_model(self):\n        \n        self.assertEqual(sql_for_table(Scientist),\n                         sql_for_table(ScientistRef))\n\n    @skipUnlessDBFeature('supports_tablespaces')\n    def test_tablespace_for_indexed_field(self):\n        sql = sql_for_table(Article).lower()\n        if settings.DEFAULT_INDEX_TABLESPACE:\n            \n            self.assertNumContains(sql, 'tbl_tbsp', 1)\n             + 1 for the index on code\n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)\n        else:\n             + 1 for the primary key + 1 for the index on code\n            self.assertNumContains(sql, 'tbl_tbsp', 3)\n\n        \n        self.assertNumContains(sql, 'idx_tbsp', 1)\n\n    @skipIfDBFeature('supports_tablespaces')\n    def test_tablespace_ignored_for_indexed_field(self):\n        \n        self.assertEqual(sql_for_table(Article),\n                         sql_for_table(ArticleRef))\n\n    @skipUnlessDBFeature('supports_tablespaces')\n    def test_tablespace_for_many_to_many_field(self):\n        sql = sql_for_table(Authors).lower()\n        \n        \n        if settings.DEFAULT_INDEX_TABLESPACE:\n            \n            self.assertNumContains(sql, 'tbl_tbsp', 1)\n            \n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n        else:\n             + 1 for the index on the primary key\n            self.assertNumContains(sql, 'tbl_tbsp', 2)\n        self.assertNumContains(sql, 'idx_tbsp', 0)\n\n        sql = sql_for_index(Authors).lower()\n        \n        \n        if settings.DEFAULT_INDEX_TABLESPACE:\n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)\n        else:\n            self.assertNumContains(sql, 'tbl_tbsp', 2)\n        self.assertNumContains(sql, 'idx_tbsp', 0)\n\n        sql = sql_for_table(Reviewers).lower()\n        \n        \n        if settings.DEFAULT_INDEX_TABLESPACE:\n            \n            self.assertNumContains(sql, 'tbl_tbsp', 1)\n            \n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n        else:\n             + 1 for the index on the primary key\n            self.assertNumContains(sql, 'tbl_tbsp', 2)\n        self.assertNumContains(sql, 'idx_tbsp', 0)\n\n        sql = sql_for_index(Reviewers).lower()\n        \n        self.assertNumContains(sql, 'tbl_tbsp', 0)\n        self.assertNumContains(sql, 'idx_tbsp', 2)\n", "comments": "  we test default tablespace default index tablespace settings    evaluated model class defined  as consequence      override settings work  tests depend    the unmanaged models need removed test order    prevent bad interactions flush operation tests     1 table    1 index primary key    1 table   1 index primary key    no tablespace related sql    1 table    1 primary key   1 index code    1 table   1 primary key   1 index code    1 index reference    no tablespace related sql    the join table manytomanyfield goes model tablespace     indexes  unless default index tablespace set     1 table    1 primary key    1 table   1 index primary key    the manytomanyfield declares db tablespace  indexes go    model tablespace  unless default index tablespace set     the join table manytomanyfield goes model tablespace     indexes  unless default index tablespace set     1 table    1 primary key    1 table   1 index primary key    the manytomanyfield declares db tablespace  indexes go  ", "content": "from django.apps import apps\nfrom django.conf import settings\nfrom django.db import connection\nfrom django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n\nfrom .models.tablespaces import (\n    Article, ArticleRef, Authors, Reviewers, Scientist, ScientistRef,\n)\n\n\ndef sql_for_table(model):\n    with connection.schema_editor(collect_sql=True) as editor:\n        editor.create_model(model)\n    return editor.collected_sql[0]\n\n\ndef sql_for_index(model):\n    return '\\n'.join(str(sql) for sql in connection.schema_editor()._model_indexes_sql(model))\n\n\n# We can't test the DEFAULT_TABLESPACE and DEFAULT_INDEX_TABLESPACE settings\n# because they're evaluated when the model class is defined. As a consequence,\n# @override_settings doesn't work, and the tests depend\nclass TablespacesTests(TestCase):\n\n    def setUp(self):\n        # The unmanaged models need to be removed after the test in order to\n        # prevent bad interactions with the flush operation in other tests.\n        self._old_models = apps.app_configs['model_options'].models.copy()\n\n        for model in Article, Authors, Reviewers, Scientist:\n            model._meta.managed = True\n\n    def tearDown(self):\n        for model in Article, Authors, Reviewers, Scientist:\n            model._meta.managed = False\n\n        apps.app_configs['model_options'].models = self._old_models\n        apps.all_models['model_options'] = self._old_models\n        apps.clear_cache()\n\n    def assertNumContains(self, haystack, needle, count):\n        real_count = haystack.count(needle)\n        self.assertEqual(real_count, count, \"Found %d instances of '%s', expected %d\" % (real_count, needle, count))\n\n    @skipUnlessDBFeature('supports_tablespaces')\n    def test_tablespace_for_model(self):\n        sql = sql_for_table(Scientist).lower()\n        if settings.DEFAULT_INDEX_TABLESPACE:\n            # 1 for the table\n            self.assertNumContains(sql, 'tbl_tbsp', 1)\n            # 1 for the index on the primary key\n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n        else:\n            # 1 for the table + 1 for the index on the primary key\n            self.assertNumContains(sql, 'tbl_tbsp', 2)\n\n    @skipIfDBFeature('supports_tablespaces')\n    def test_tablespace_ignored_for_model(self):\n        # No tablespace-related SQL\n        self.assertEqual(sql_for_table(Scientist),\n                         sql_for_table(ScientistRef))\n\n    @skipUnlessDBFeature('supports_tablespaces')\n    def test_tablespace_for_indexed_field(self):\n        sql = sql_for_table(Article).lower()\n        if settings.DEFAULT_INDEX_TABLESPACE:\n            # 1 for the table\n            self.assertNumContains(sql, 'tbl_tbsp', 1)\n            # 1 for the primary key + 1 for the index on code\n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)\n        else:\n            # 1 for the table + 1 for the primary key + 1 for the index on code\n            self.assertNumContains(sql, 'tbl_tbsp', 3)\n\n        # 1 for the index on reference\n        self.assertNumContains(sql, 'idx_tbsp', 1)\n\n    @skipIfDBFeature('supports_tablespaces')\n    def test_tablespace_ignored_for_indexed_field(self):\n        # No tablespace-related SQL\n        self.assertEqual(sql_for_table(Article),\n                         sql_for_table(ArticleRef))\n\n    @skipUnlessDBFeature('supports_tablespaces')\n    def test_tablespace_for_many_to_many_field(self):\n        sql = sql_for_table(Authors).lower()\n        # The join table of the ManyToManyField goes to the model's tablespace,\n        # and its indexes too, unless DEFAULT_INDEX_TABLESPACE is set.\n        if settings.DEFAULT_INDEX_TABLESPACE:\n            # 1 for the table\n            self.assertNumContains(sql, 'tbl_tbsp', 1)\n            # 1 for the primary key\n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n        else:\n            # 1 for the table + 1 for the index on the primary key\n            self.assertNumContains(sql, 'tbl_tbsp', 2)\n        self.assertNumContains(sql, 'idx_tbsp', 0)\n\n        sql = sql_for_index(Authors).lower()\n        # The ManyToManyField declares no db_tablespace, its indexes go to\n        # the model's tablespace, unless DEFAULT_INDEX_TABLESPACE is set.\n        if settings.DEFAULT_INDEX_TABLESPACE:\n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 2)\n        else:\n            self.assertNumContains(sql, 'tbl_tbsp', 2)\n        self.assertNumContains(sql, 'idx_tbsp', 0)\n\n        sql = sql_for_table(Reviewers).lower()\n        # The join table of the ManyToManyField goes to the model's tablespace,\n        # and its indexes too, unless DEFAULT_INDEX_TABLESPACE is set.\n        if settings.DEFAULT_INDEX_TABLESPACE:\n            # 1 for the table\n            self.assertNumContains(sql, 'tbl_tbsp', 1)\n            # 1 for the primary key\n            self.assertNumContains(sql, settings.DEFAULT_INDEX_TABLESPACE, 1)\n        else:\n            # 1 for the table + 1 for the index on the primary key\n            self.assertNumContains(sql, 'tbl_tbsp', 2)\n        self.assertNumContains(sql, 'idx_tbsp', 0)\n\n        sql = sql_for_index(Reviewers).lower()\n        # The ManyToManyField declares db_tablespace, its indexes go there.\n        self.assertNumContains(sql, 'tbl_tbsp', 0)\n        self.assertNumContains(sql, 'idx_tbsp', 2)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_tablespaces.py", "id": "2168b4fda4243eac38153a5d03bd1cd2", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/model_options/test_tablespaces.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}