{"author": "ansible", "code": " (c) 2016 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.nxos import nxos_bgp\nfrom .nxos_module import TestNxosModule, load_fixture, set_module_args\n\n\nclass TestNxosBgpModule(TestNxosModule):\n\n    module = nxos_bgp\n\n    def setUp(self):\n        super(TestNxosBgpModule, self).setUp()\n\n        self.mock_load_config = patch('ansible.modules.network.nxos.nxos_bgp.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_get_config = patch('ansible.modules.network.nxos.nxos_bgp.get_config')\n        self.get_config = self.mock_get_config.start()\n\n    def tearDown(self):\n        super(TestNxosBgpModule, self).tearDown()\n        self.mock_load_config.stop()\n        self.mock_get_config.stop()\n\n    def load_fixtures(self, commands=None, device=''):\n        self.get_config.return_value = load_fixture('nxos_bgp', 'config.cfg')\n        self.load_config.return_value = []\n\n    def test_nxos_bgp(self):\n        set_module_args(dict(asn=65535, router_id='1.1.1.1'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['router bgp 65535', 'router-id 1.1.1.1'])\n\n    def test_nxos_bgp_change_nothing(self):\n        set_module_args(dict(asn=65535, router_id='192.168.1.1'))\n        self.execute_module(changed=False)\n\n    def test_nxos_bgp_wrong_asn(self):\n        set_module_args(dict(asn=10, router_id='192.168.1.1'))\n        result = self.execute_module(failed=True)\n        self.assertEqual(result['msg'], 'Another BGP ASN already exists.')\n\n    def test_nxos_bgp_remove(self):\n        set_module_args(dict(asn=65535, state='absent'))\n        self.execute_module(changed=True, commands=['no router bgp 65535'])\n\n    def test_nxos_bgp_remove_vrf(self):\n        set_module_args(dict(asn=65535, vrf='test2', state='absent'))\n        self.execute_module(changed=True, commands=['router bgp 65535', 'no vrf test2'])\n\n    def test_nxos_bgp_remove_nonexistant_vrf(self):\n        set_module_args(dict(asn=65535, vrf='foo', state='absent'))\n        self.execute_module(changed=False)\n\n    def test_nxos_bgp_remove_wrong_asn(self):\n        set_module_args(dict(asn=10, state='absent'))\n        self.execute_module(changed=False)\n\n    def test_nxos_bgp_vrf(self):\n        set_module_args(dict(asn=65535, vrf='test', router_id='1.1.1.1'))\n        result = self.execute_module(changed=True, commands=['router bgp 65535', 'vrf test', 'router-id 1.1.1.1'])\n        self.assertEqual(result['warnings'], [\"VRF test doesn't exist.\"])\n\n    def test_nxos_bgp_global_param(self):\n        set_module_args(dict(asn=65535, shutdown=True))\n        self.execute_module(changed=True, commands=['router bgp 65535', 'shutdown'])\n\n    def test_nxos_bgp_global_param_outside_default(self):\n        set_module_args(dict(asn=65535, vrf='test', shutdown=True))\n        result = self.execute_module(failed=True)\n        self.assertEqual(result['msg'], 'Global params can be modified only under \"default\" VRF.')\n\n    def test_nxos_bgp_default_value(self):\n        set_module_args(dict(asn=65535, graceful_restart_timers_restart='default'))\n        self.execute_module(\n            changed=True,\n            commands=['router bgp 65535', 'graceful-restart restart-time 120']\n        )\n\n\nclass TestNxosBgp32BitsAS(TestNxosModule):\n\n    module = nxos_bgp\n\n    def setUp(self):\n        super(TestNxosBgp32BitsAS, self).setUp()\n\n        self.mock_load_config = patch('ansible.modules.network.nxos.nxos_bgp.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_get_config = patch('ansible.modules.network.nxos.nxos_bgp.get_config')\n        self.get_config = self.mock_get_config.start()\n\n    def tearDown(self):\n        super(TestNxosBgp32BitsAS, self).tearDown()\n        self.mock_load_config.stop()\n        self.mock_get_config.stop()\n\n    def load_fixtures(self, commands=None, device=''):\n        self.get_config.return_value = load_fixture('nxos_bgp', 'config_32_bits_as.cfg')\n        self.load_config.return_value = []\n\n    def test_nxos_bgp_change_nothing(self):\n        set_module_args(dict(asn='65535.65535', router_id='192.168.1.1'))\n        self.execute_module(changed=False)\n\n    def test_nxos_bgp_wrong_asn(self):\n        set_module_args(dict(asn='65535.10', router_id='192.168.1.1'))\n        result = self.execute_module(failed=True)\n        self.assertEqual(result['msg'], 'Another BGP ASN already exists.')\n\n    def test_nxos_bgp_remove(self):\n        set_module_args(dict(asn='65535.65535', state='absent'))\n        self.execute_module(changed=True, commands=['no router bgp 65535.65535'])\n", "comments": "  (c) 2016 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish ", "content": "# (c) 2016 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.nxos import nxos_bgp\nfrom .nxos_module import TestNxosModule, load_fixture, set_module_args\n\n\nclass TestNxosBgpModule(TestNxosModule):\n\n    module = nxos_bgp\n\n    def setUp(self):\n        super(TestNxosBgpModule, self).setUp()\n\n        self.mock_load_config = patch('ansible.modules.network.nxos.nxos_bgp.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_get_config = patch('ansible.modules.network.nxos.nxos_bgp.get_config')\n        self.get_config = self.mock_get_config.start()\n\n    def tearDown(self):\n        super(TestNxosBgpModule, self).tearDown()\n        self.mock_load_config.stop()\n        self.mock_get_config.stop()\n\n    def load_fixtures(self, commands=None, device=''):\n        self.get_config.return_value = load_fixture('nxos_bgp', 'config.cfg')\n        self.load_config.return_value = []\n\n    def test_nxos_bgp(self):\n        set_module_args(dict(asn=65535, router_id='1.1.1.1'))\n        result = self.execute_module(changed=True)\n        self.assertEqual(result['commands'], ['router bgp 65535', 'router-id 1.1.1.1'])\n\n    def test_nxos_bgp_change_nothing(self):\n        set_module_args(dict(asn=65535, router_id='192.168.1.1'))\n        self.execute_module(changed=False)\n\n    def test_nxos_bgp_wrong_asn(self):\n        set_module_args(dict(asn=10, router_id='192.168.1.1'))\n        result = self.execute_module(failed=True)\n        self.assertEqual(result['msg'], 'Another BGP ASN already exists.')\n\n    def test_nxos_bgp_remove(self):\n        set_module_args(dict(asn=65535, state='absent'))\n        self.execute_module(changed=True, commands=['no router bgp 65535'])\n\n    def test_nxos_bgp_remove_vrf(self):\n        set_module_args(dict(asn=65535, vrf='test2', state='absent'))\n        self.execute_module(changed=True, commands=['router bgp 65535', 'no vrf test2'])\n\n    def test_nxos_bgp_remove_nonexistant_vrf(self):\n        set_module_args(dict(asn=65535, vrf='foo', state='absent'))\n        self.execute_module(changed=False)\n\n    def test_nxos_bgp_remove_wrong_asn(self):\n        set_module_args(dict(asn=10, state='absent'))\n        self.execute_module(changed=False)\n\n    def test_nxos_bgp_vrf(self):\n        set_module_args(dict(asn=65535, vrf='test', router_id='1.1.1.1'))\n        result = self.execute_module(changed=True, commands=['router bgp 65535', 'vrf test', 'router-id 1.1.1.1'])\n        self.assertEqual(result['warnings'], [\"VRF test doesn't exist.\"])\n\n    def test_nxos_bgp_global_param(self):\n        set_module_args(dict(asn=65535, shutdown=True))\n        self.execute_module(changed=True, commands=['router bgp 65535', 'shutdown'])\n\n    def test_nxos_bgp_global_param_outside_default(self):\n        set_module_args(dict(asn=65535, vrf='test', shutdown=True))\n        result = self.execute_module(failed=True)\n        self.assertEqual(result['msg'], 'Global params can be modified only under \"default\" VRF.')\n\n    def test_nxos_bgp_default_value(self):\n        set_module_args(dict(asn=65535, graceful_restart_timers_restart='default'))\n        self.execute_module(\n            changed=True,\n            commands=['router bgp 65535', 'graceful-restart restart-time 120']\n        )\n\n\nclass TestNxosBgp32BitsAS(TestNxosModule):\n\n    module = nxos_bgp\n\n    def setUp(self):\n        super(TestNxosBgp32BitsAS, self).setUp()\n\n        self.mock_load_config = patch('ansible.modules.network.nxos.nxos_bgp.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_get_config = patch('ansible.modules.network.nxos.nxos_bgp.get_config')\n        self.get_config = self.mock_get_config.start()\n\n    def tearDown(self):\n        super(TestNxosBgp32BitsAS, self).tearDown()\n        self.mock_load_config.stop()\n        self.mock_get_config.stop()\n\n    def load_fixtures(self, commands=None, device=''):\n        self.get_config.return_value = load_fixture('nxos_bgp', 'config_32_bits_as.cfg')\n        self.load_config.return_value = []\n\n    def test_nxos_bgp_change_nothing(self):\n        set_module_args(dict(asn='65535.65535', router_id='192.168.1.1'))\n        self.execute_module(changed=False)\n\n    def test_nxos_bgp_wrong_asn(self):\n        set_module_args(dict(asn='65535.10', router_id='192.168.1.1'))\n        result = self.execute_module(failed=True)\n        self.assertEqual(result['msg'], 'Another BGP ASN already exists.')\n\n    def test_nxos_bgp_remove(self):\n        set_module_args(dict(asn='65535.65535', state='absent'))\n        self.execute_module(changed=True, commands=['no router bgp 65535.65535'])\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_nxos_bgp.py", "id": "c324a31e75cce7ab27b85b49c98ebd35", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/nxos/test_nxos_bgp.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}