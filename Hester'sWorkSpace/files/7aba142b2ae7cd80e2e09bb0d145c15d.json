{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Chatham Financial <oss@chathamfinancial.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_vhost\nshort_description: Manage the state of a virtual host in RabbitMQ\ndescription:\n  - Manage the state of a virtual host in RabbitMQ\nversion_added: \"1.1\"\nauthor: '\"Chris Hoffman (@choffman)\"'\noptions:\n  name:\n    description:\n      - The name of the vhost to manage\n    required: true\n    aliases: [vhost]\n  node:\n    description:\n      - erlang node name of the rabbit we wish to configure\n    default: rabbit\n    version_added: \"1.2\"\n  tracing:\n    description:\n      - Enable/disable tracing for a vhost\n    type: bool\n    default: 'no'\n    aliases: [trace]\n  state:\n    description:\n      - The state of vhost\n    default: present\n    choices: [present, absent]\n'''\n\nEXAMPLES = '''\n\n- rabbitmq_vhost:\n    name: /test\n    state: present\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass RabbitMqVhost(object):\n    def __init__(self, module, name, tracing, node):\n        self.module = module\n        self.name = name\n        self.tracing = tracing\n        self.node = node\n\n        self._tracing = False\n        self._rabbitmqctl = module.get_bin_path('rabbitmqctl', True)\n\n    def _exec(self, args, run_in_check_mode=False):\n        if not self.module.check_mode or (self.module.check_mode and run_in_check_mode):\n            cmd = [self._rabbitmqctl, '-q', '-n', self.node]\n            rc, out, err = self.module.run_command(cmd + args, check_rc=True)\n            return out.splitlines()\n        return list()\n\n    def get(self):\n        vhosts = self._exec(['list_vhosts', 'name', 'tracing'], True)\n\n        for vhost in vhosts:\n            name, tracing = vhost.split('\\t')\n            if name == self.name:\n                self._tracing = self.module.boolean(tracing)\n                return True\n        return False\n\n    def add(self):\n        return self._exec(['add_vhost', self.name])\n\n    def delete(self):\n        return self._exec(['delete_vhost', self.name])\n\n    def set_tracing(self):\n        if self.tracing != self._tracing:\n            if self.tracing:\n                self._enable_tracing()\n            else:\n                self._disable_tracing()\n            return True\n        return False\n\n    def _enable_tracing(self):\n        return self._exec(['trace_on', '-p', self.name])\n\n    def _disable_tracing(self):\n        return self._exec(['trace_off', '-p', self.name])\n\n\ndef main():\n    arg_spec = dict(\n        name=dict(required=True, aliases=['vhost']),\n        tracing=dict(default='off', aliases=['trace'], type='bool'),\n        state=dict(default='present', choices=['present', 'absent']),\n        node=dict(default='rabbit'),\n    )\n\n    module = AnsibleModule(\n        argument_spec=arg_spec,\n        supports_check_mode=True\n    )\n\n    name = module.params['name']\n    tracing = module.params['tracing']\n    state = module.params['state']\n    node = module.params['node']\n    result = dict(changed=False, name=name, state=state)\n    rabbitmq_vhost = RabbitMqVhost(module, name, tracing, node)\n\n    if rabbitmq_vhost.get():\n        if state == 'absent':\n            rabbitmq_vhost.delete()\n            result['changed'] = True\n        else:\n            if rabbitmq_vhost.set_tracing():\n                result['changed'] = True\n    elif state == 'present':\n        rabbitmq_vhost.add()\n        rabbitmq_vhost.set_tracing()\n        result['changed'] = True\n\n    module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rabbitmq vhost short description  manage state virtual host rabbitmq description      manage state virtual host rabbitmq version added   1 1  author    chris hoffman ( choffman)   options    name      description          the name vhost manage     required  true     aliases   vhost    node      description          erlang node name rabbit wish configure     default  rabbit     version added   1 2    tracing      description          enable disable tracing vhost     type  bool     default        aliases   trace    state      description          the state vhost     default  present     choices   present  absent       examples         ensure vhost  test exists    rabbitmq vhost      name   test     state  present         usr bin python        coding  utf 8        (c) 2013  chatham financial  oss chathamfinancial com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure vhost  test exists  ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2013, Chatham Financial <oss@chathamfinancial.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_vhost\nshort_description: Manage the state of a virtual host in RabbitMQ\ndescription:\n  - Manage the state of a virtual host in RabbitMQ\nversion_added: \"1.1\"\nauthor: '\"Chris Hoffman (@choffman)\"'\noptions:\n  name:\n    description:\n      - The name of the vhost to manage\n    required: true\n    aliases: [vhost]\n  node:\n    description:\n      - erlang node name of the rabbit we wish to configure\n    default: rabbit\n    version_added: \"1.2\"\n  tracing:\n    description:\n      - Enable/disable tracing for a vhost\n    type: bool\n    default: 'no'\n    aliases: [trace]\n  state:\n    description:\n      - The state of vhost\n    default: present\n    choices: [present, absent]\n'''\n\nEXAMPLES = '''\n# Ensure that the vhost /test exists.\n- rabbitmq_vhost:\n    name: /test\n    state: present\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclass RabbitMqVhost(object):\n    def __init__(self, module, name, tracing, node):\n        self.module = module\n        self.name = name\n        self.tracing = tracing\n        self.node = node\n\n        self._tracing = False\n        self._rabbitmqctl = module.get_bin_path('rabbitmqctl', True)\n\n    def _exec(self, args, run_in_check_mode=False):\n        if not self.module.check_mode or (self.module.check_mode and run_in_check_mode):\n            cmd = [self._rabbitmqctl, '-q', '-n', self.node]\n            rc, out, err = self.module.run_command(cmd + args, check_rc=True)\n            return out.splitlines()\n        return list()\n\n    def get(self):\n        vhosts = self._exec(['list_vhosts', 'name', 'tracing'], True)\n\n        for vhost in vhosts:\n            name, tracing = vhost.split('\\t')\n            if name == self.name:\n                self._tracing = self.module.boolean(tracing)\n                return True\n        return False\n\n    def add(self):\n        return self._exec(['add_vhost', self.name])\n\n    def delete(self):\n        return self._exec(['delete_vhost', self.name])\n\n    def set_tracing(self):\n        if self.tracing != self._tracing:\n            if self.tracing:\n                self._enable_tracing()\n            else:\n                self._disable_tracing()\n            return True\n        return False\n\n    def _enable_tracing(self):\n        return self._exec(['trace_on', '-p', self.name])\n\n    def _disable_tracing(self):\n        return self._exec(['trace_off', '-p', self.name])\n\n\ndef main():\n    arg_spec = dict(\n        name=dict(required=True, aliases=['vhost']),\n        tracing=dict(default='off', aliases=['trace'], type='bool'),\n        state=dict(default='present', choices=['present', 'absent']),\n        node=dict(default='rabbit'),\n    )\n\n    module = AnsibleModule(\n        argument_spec=arg_spec,\n        supports_check_mode=True\n    )\n\n    name = module.params['name']\n    tracing = module.params['tracing']\n    state = module.params['state']\n    node = module.params['node']\n    result = dict(changed=False, name=name, state=state)\n    rabbitmq_vhost = RabbitMqVhost(module, name, tracing, node)\n\n    if rabbitmq_vhost.get():\n        if state == 'absent':\n            rabbitmq_vhost.delete()\n            result['changed'] = True\n        else:\n            if rabbitmq_vhost.set_tracing():\n                result['changed'] = True\n    elif state == 'present':\n        rabbitmq_vhost.add()\n        rabbitmq_vhost.set_tracing()\n        result['changed'] = True\n\n    module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rabbitmq_vhost.py", "id": "7aba142b2ae7cd80e2e09bb0d145c15d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/messaging/rabbitmq_vhost.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}