{"author": "p-e-w", "code": "import os\nimport sys\nimport shlex\nfrom os import getcwd, chdir\nfrom contextlib import contextmanager\n\nfrom six import PY2, StringIO\n\nfrom maybe.maybe import main as maybe_main\n\n\ndef maybe(arguments):\n    old_stdout, old_stderr = sys.stdout, sys.stderr\n    sys.stdout = sys.stderr = string_io = StringIO()\n    maybe_main(shlex.split(arguments))\n    assert sys.stdout == sys.stderr == string_io\n    sys.stdout, sys.stderr = old_stdout, old_stderr\n    return string_io.getvalue().rstrip(\"\\n\")\n\n\ndef to_unicode(string):\n    if PY2:\n        return unicode(string, sys.getfilesystemencoding())  \n    else:\n        return string\n\n\n\n@contextmanager\ndef working_directory(directory):\n    original_directory = getcwd()\n    try:\n        chdir(str(directory))\n        yield\n    finally:\n        chdir(original_directory)\n\n\n@contextmanager\ndef umask(mask):\n    original_mask = os.umask(mask)\n    try:\n        yield\n    finally:\n        os.umask(original_mask)\n\n\n@contextmanager\ndef remove(f):\n    try:\n        yield f\n    finally:\n        if f.check():\n            f.remove()\n            assert not f.check()\n\n\ndef tf(directory, command, output, operation, test):\n    def t_file(f, f_arg):\n        # File does not yet exist (will be created when written to)\n        assert not f.check()\n        f.write(\"abc\")\n        assert f.check()\n        assert test(f)\n        cmd = command.format(f=f_arg)\n        \n        assert maybe(\"-l -- \" + cmd) == to_unicode(output.format(f=f))\n        assert test(f)\n        \n        assert maybe((\"-l -a %s -- \" % operation) + cmd).startswith(\"maybe has not detected\")\n        assert not test(f)\n\n    def t_name(name):\n        if PY2:\n            name = name.encode(sys.getfilesystemencoding())\n        \n        with remove(directory.join(name)) as f:\n            t_file(f, str(f))\n        \n        with remove(directory.join(name)) as f:\n            t_file(f, name)\n        with remove(directory.mkdir(\"dirname\")) as subdirectory:\n             in subdirectory\n            with remove(subdirectory.join(name)) as f:\n                t_file(f, \"dirname/\" + name)\n            with working_directory(subdirectory):\n                 in parent directory\n                with remove(directory.join(name)) as f:\n                    t_file(f, \"../\" + name)\n\n    with working_directory(directory):\n        t_name(\"filename\")\n        \n        t_name(\"file name\")\n        \n        t_name(u\"file name \\u2713\")\n", "comments": "  noqa    source  http   stackoverflow com 431747    file yet exist (will created written to)    test expected output provided test condition    test negation operation explicitly allowed    absolute path    relative path    relative path subdirectory    relative path parent directory    whitespace filename    unicode filename ", "content": "import os\nimport sys\nimport shlex\nfrom os import getcwd, chdir\nfrom contextlib import contextmanager\n\nfrom six import PY2, StringIO\n\nfrom maybe.maybe import main as maybe_main\n\n\ndef maybe(arguments):\n    old_stdout, old_stderr = sys.stdout, sys.stderr\n    sys.stdout = sys.stderr = string_io = StringIO()\n    maybe_main(shlex.split(arguments))\n    assert sys.stdout == sys.stderr == string_io\n    sys.stdout, sys.stderr = old_stdout, old_stderr\n    return string_io.getvalue().rstrip(\"\\n\")\n\n\ndef to_unicode(string):\n    if PY2:\n        return unicode(string, sys.getfilesystemencoding())  # noqa\n    else:\n        return string\n\n\n# Source: http://stackoverflow.com/a/431747\n@contextmanager\ndef working_directory(directory):\n    original_directory = getcwd()\n    try:\n        chdir(str(directory))\n        yield\n    finally:\n        chdir(original_directory)\n\n\n@contextmanager\ndef umask(mask):\n    original_mask = os.umask(mask)\n    try:\n        yield\n    finally:\n        os.umask(original_mask)\n\n\n@contextmanager\ndef remove(f):\n    try:\n        yield f\n    finally:\n        if f.check():\n            f.remove()\n            assert not f.check()\n\n\ndef tf(directory, command, output, operation, test):\n    def t_file(f, f_arg):\n        # File does not yet exist (will be created when written to)\n        assert not f.check()\n        f.write(\"abc\")\n        assert f.check()\n        assert test(f)\n        cmd = command.format(f=f_arg)\n        # Test for expected output and provided test condition\n        assert maybe(\"-l -- \" + cmd) == to_unicode(output.format(f=f))\n        assert test(f)\n        # Test for negation of the above if operation is explicitly allowed\n        assert maybe((\"-l -a %s -- \" % operation) + cmd).startswith(\"maybe has not detected\")\n        assert not test(f)\n\n    def t_name(name):\n        if PY2:\n            name = name.encode(sys.getfilesystemencoding())\n        # Absolute path\n        with remove(directory.join(name)) as f:\n            t_file(f, str(f))\n        # Relative path\n        with remove(directory.join(name)) as f:\n            t_file(f, name)\n        with remove(directory.mkdir(\"dirname\")) as subdirectory:\n            # Relative path in subdirectory\n            with remove(subdirectory.join(name)) as f:\n                t_file(f, \"dirname/\" + name)\n            with working_directory(subdirectory):\n                # Relative path in parent directory\n                with remove(directory.join(name)) as f:\n                    t_file(f, \"../\" + name)\n\n    with working_directory(directory):\n        t_name(\"filename\")\n        # Whitespace in filename\n        t_name(\"file name\")\n        # Unicode in filename\n        t_name(u\"file name \\u2713\")\n", "description": " :open_file_folder: :rabbit2: :tophat: See what a program does before deciding whether you really want it to happen.", "file_name": "common.py", "id": "fb4c8bd40543cbffde8492379faa6bb0", "language": "Python", "project_name": "maybe", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/p-e-w-maybe/p-e-w-maybe-ec58230/tests/common.py", "save_time": "", "source": "", "update_at": "2018-03-16T19:18:43Z", "url": "https://github.com/p-e-w/maybe", "wiki": true}