{"author": "ansible", "code": "\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\nfrom ansible.modules.network.onyx import onyx_facts\n\n\nclass TestOnyxFacts(TestOnyxModule):\n\n    module = onyx_facts\n\n    def setUp(self):\n        super(TestOnyxFacts, self).setUp()\n\n        self.mock_run_command = patch.object(\n            onyx_facts.FactsBase, \"_show_cmd\")\n        self.run_command = self.mock_run_command.start()\n\n    def tearDown(self):\n        super(TestOnyxFacts, self).tearDown()\n\n        self.mock_run_command.stop()\n\n    def load_fixtures(self, commands=None, transport=None):\n\n        def load_from_file(*args, **kwargs):\n            command = args[0]\n            filename = \"onyx_facts_%s.cfg\" % command\n            filename = filename.replace(' ', '_')\n            filename = filename.replace('/', '7')\n            output = load_fixture(filename)\n            return output\n\n        self.run_command.side_effect = load_from_file\n\n    def test_onyx_facts_version(self):\n        set_module_args(dict(gather_subset='version'))\n        result = self.execute_module()\n        facts = result.get('ansible_facts')\n        self.assertEqual(len(facts), 2)\n        version = facts['ansible_net_version']\n        self.assertEqual(version['Product name'], 'MLNX-OS')\n\n    def test_onyx_facts_modules(self):\n        set_module_args(dict(gather_subset='modules'))\n        result = self.execute_module()\n        facts = result.get('ansible_facts')\n        self.assertEqual(len(facts), 2)\n        modules = facts['ansible_net_modules']\n        self.assertIn(\"MGMT\", modules)\n\n    def test_onyx_facts_interfaces(self):\n        set_module_args(dict(gather_subset='interfaces'))\n        result = self.execute_module()\n        facts = result.get('ansible_facts')\n        self.assertEqual(len(facts), 2)\n        interfaces = facts['ansible_net_interfaces']\n        self.assertEqual(len(interfaces), 2)\n\n    def test_onyx_facts_all(self):\n        set_module_args(dict(gather_subset='all'))\n        result = self.execute_module()\n        facts = result.get('ansible_facts')\n        self.assertEqual(len(facts), 4)\n", "comments": "     copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish ", "content": "#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\nfrom ansible.modules.network.onyx import onyx_facts\n\n\nclass TestOnyxFacts(TestOnyxModule):\n\n    module = onyx_facts\n\n    def setUp(self):\n        super(TestOnyxFacts, self).setUp()\n\n        self.mock_run_command = patch.object(\n            onyx_facts.FactsBase, \"_show_cmd\")\n        self.run_command = self.mock_run_command.start()\n\n    def tearDown(self):\n        super(TestOnyxFacts, self).tearDown()\n\n        self.mock_run_command.stop()\n\n    def load_fixtures(self, commands=None, transport=None):\n\n        def load_from_file(*args, **kwargs):\n            command = args[0]\n            filename = \"onyx_facts_%s.cfg\" % command\n            filename = filename.replace(' ', '_')\n            filename = filename.replace('/', '7')\n            output = load_fixture(filename)\n            return output\n\n        self.run_command.side_effect = load_from_file\n\n    def test_onyx_facts_version(self):\n        set_module_args(dict(gather_subset='version'))\n        result = self.execute_module()\n        facts = result.get('ansible_facts')\n        self.assertEqual(len(facts), 2)\n        version = facts['ansible_net_version']\n        self.assertEqual(version['Product name'], 'MLNX-OS')\n\n    def test_onyx_facts_modules(self):\n        set_module_args(dict(gather_subset='modules'))\n        result = self.execute_module()\n        facts = result.get('ansible_facts')\n        self.assertEqual(len(facts), 2)\n        modules = facts['ansible_net_modules']\n        self.assertIn(\"MGMT\", modules)\n\n    def test_onyx_facts_interfaces(self):\n        set_module_args(dict(gather_subset='interfaces'))\n        result = self.execute_module()\n        facts = result.get('ansible_facts')\n        self.assertEqual(len(facts), 2)\n        interfaces = facts['ansible_net_interfaces']\n        self.assertEqual(len(interfaces), 2)\n\n    def test_onyx_facts_all(self):\n        set_module_args(dict(gather_subset='all'))\n        result = self.execute_module()\n        facts = result.get('ansible_facts')\n        self.assertEqual(len(facts), 4)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_onyx_facts.py", "id": "b5d5268b73a2c05be72763de21d56c92", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/onyx/test_onyx_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}