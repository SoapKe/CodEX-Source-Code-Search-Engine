{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\nfrom odoo.tests.common import TransactionCase\n\n\nclass TestWebsitePriceList(TransactionCase):\n\n    \n    def _get_pricelist_available(self, show_visible=False):\n        return self.get_pl(self.args.get('show'), self.args.get('current_pl'), self.args.get('country'))\n\n    def setUp(self):\n        super(TestWebsitePriceList, self).setUp()\n        self.env.user.partner_id.country_id = False  \n        self.website = self.env['website'].browse(1)\n        self.website.user_id = self.env.user\n\n        self.env['product.pricelist'].search([]).write({'website_id': False})\n        website_pls = ('list_benelux', 'list_christmas', 'list_europe')\n        for pl in website_pls:\n            self.env.ref('website_sale.' + pl).website_id = self.website.id\n        self.env.ref('product.list0').website_id = self.website.id\n        self.env.ref('website_sale.list_benelux').selectable = True\n        self.website.pricelist_id = self.ref('product.list0')\n\n        ca_group = self.env['res.country.group'].create({\n            'name': 'Canada',\n            'country_ids': [(6, 0, [self.ref('base.ca')])]\n        })\n        self.env['product.pricelist'].create({\n            'name': 'Canada',\n            'selectable': True,\n            'website_id': self.website.id,\n            'country_group_ids': [(6, 0, [ca_group.id])],\n            'sequence': 10\n        })\n        patcher = patch('odoo.addons.website_sale.models.website.Website.get_pricelist_available', wraps=self._get_pricelist_available)\n        patcher.start()\n        self.addCleanup(patcher.stop)\n\n    def get_pl(self, show, current_pl, country):\n        pls = self.website._get_pl(\n            country,\n            show,\n            self.website.pricelist_id.id,\n            current_pl,\n            self.website.pricelist_ids\n        )\n        return pls\n\n    def _test_get_pricelist_available_show(self):\n        show = True\n        current_pl = False\n\n        country_list = {\n            False: ['Public Pricelist', 'EUR', 'Benelux', 'Canada'],\n            'BE': ['EUR', 'Benelux'],\n            'IT': ['EUR'],\n            'CA': ['Canada'],\n            'US': ['Public Pricelist', 'EUR', 'Benelux', 'Canada']\n        }\n        for country, result in country_list.items():\n            pls = self.get_pl(show, current_pl, country)\n            self.assertEquals(len(set(pls.mapped('name')) & set(result)), len(pls), 'Test failed for %s (%s %s vs %s %s)'\n                              % (country, len(pls), pls.mapped('name'), len(result), result))\n\n    def _test_get_pricelist_available_not_show(self):\n        show = False\n        current_pl = False\n\n        country_list = {\n            False: ['Public Pricelist', 'EUR', 'Benelux', 'Christmas', 'Canada'],\n            'BE': ['EUR', 'Benelux', 'Christmas'],\n            'IT': ['EUR', 'Christmas'],\n            'US': ['Public Pricelist', 'EUR', 'Benelux', 'Christmas', 'Canada'],\n            'CA': ['Canada']\n        }\n\n        for country, result in country_list.items():\n            pls = self.get_pl(show, current_pl, country)\n            self.assertEquals(len(set(pls.mapped('name')) & set(result)), len(pls), 'Test failed for %s (%s %s vs %s %s)'\n                              % (country, len(pls), pls.mapped('name'), len(result), result))\n\n    def _test_get_pricelist_available_promocode(self):\n        christmas_pl = self.ref('website_sale.list_christmas')\n        public_pl = self.ref('product.list0')\n        self.args = {\n            'show': False,\n            'current_pl': public_pl,\n        }\n\n        country_list = {\n            False: True,\n            'BE': True,\n            'IT': True,\n            'US': True,\n            'CA': False\n        }\n\n        for country, result in country_list.items():\n            self.args['country'] = country\n            \n            available = self.website.is_pricelist_available(christmas_pl)\n            if result:\n                self.assertTrue(available, 'AssertTrue failed for %s' % country)\n            else:\n                self.assertFalse(available, 'AssertFalse failed for %s' % country)\n\n    def test_get_pricelist_available_show_with_auto_property(self):\n        show = True\n        self.env.user.partner_id.country_id = self.env.ref('base.be')  \n        current_pl = False\n\n        country_list = {\n            False: ['Public Pricelist', 'EUR', 'Benelux', 'Canada'],\n            'BE': ['EUR', 'Benelux'],\n            'IT': ['EUR'],\n            'CA': ['EUR', 'Canada'],\n            'US': ['Public Pricelist', 'EUR', 'Benelux', 'Canada']\n        }\n        for country, result in country_list.items():\n            pls = self.get_pl(show, current_pl, country)\n            self.assertEquals(len(set(pls.mapped('name')) & set(result)), len(pls), 'Test failed for %s (%s %s vs %s %s)'\n                              % (country, len(pls), pls.mapped('name'), len(result), result))\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     mock nedded request session exist test    remove country avoid property pricelist computed     mock patch method could pass env context    add eur pricelist auto ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\nfrom odoo.tests.common import TransactionCase\n\n\nclass TestWebsitePriceList(TransactionCase):\n\n    # Mock nedded because request.session doesn't exist during test\n    def _get_pricelist_available(self, show_visible=False):\n        return self.get_pl(self.args.get('show'), self.args.get('current_pl'), self.args.get('country'))\n\n    def setUp(self):\n        super(TestWebsitePriceList, self).setUp()\n        self.env.user.partner_id.country_id = False  # Remove country to avoid property pricelist computed.\n        self.website = self.env['website'].browse(1)\n        self.website.user_id = self.env.user\n\n        self.env['product.pricelist'].search([]).write({'website_id': False})\n        website_pls = ('list_benelux', 'list_christmas', 'list_europe')\n        for pl in website_pls:\n            self.env.ref('website_sale.' + pl).website_id = self.website.id\n        self.env.ref('product.list0').website_id = self.website.id\n        self.env.ref('website_sale.list_benelux').selectable = True\n        self.website.pricelist_id = self.ref('product.list0')\n\n        ca_group = self.env['res.country.group'].create({\n            'name': 'Canada',\n            'country_ids': [(6, 0, [self.ref('base.ca')])]\n        })\n        self.env['product.pricelist'].create({\n            'name': 'Canada',\n            'selectable': True,\n            'website_id': self.website.id,\n            'country_group_ids': [(6, 0, [ca_group.id])],\n            'sequence': 10\n        })\n        patcher = patch('odoo.addons.website_sale.models.website.Website.get_pricelist_available', wraps=self._get_pricelist_available)\n        patcher.start()\n        self.addCleanup(patcher.stop)\n\n    def get_pl(self, show, current_pl, country):\n        pls = self.website._get_pl(\n            country,\n            show,\n            self.website.pricelist_id.id,\n            current_pl,\n            self.website.pricelist_ids\n        )\n        return pls\n\n    def _test_get_pricelist_available_show(self):\n        show = True\n        current_pl = False\n\n        country_list = {\n            False: ['Public Pricelist', 'EUR', 'Benelux', 'Canada'],\n            'BE': ['EUR', 'Benelux'],\n            'IT': ['EUR'],\n            'CA': ['Canada'],\n            'US': ['Public Pricelist', 'EUR', 'Benelux', 'Canada']\n        }\n        for country, result in country_list.items():\n            pls = self.get_pl(show, current_pl, country)\n            self.assertEquals(len(set(pls.mapped('name')) & set(result)), len(pls), 'Test failed for %s (%s %s vs %s %s)'\n                              % (country, len(pls), pls.mapped('name'), len(result), result))\n\n    def _test_get_pricelist_available_not_show(self):\n        show = False\n        current_pl = False\n\n        country_list = {\n            False: ['Public Pricelist', 'EUR', 'Benelux', 'Christmas', 'Canada'],\n            'BE': ['EUR', 'Benelux', 'Christmas'],\n            'IT': ['EUR', 'Christmas'],\n            'US': ['Public Pricelist', 'EUR', 'Benelux', 'Christmas', 'Canada'],\n            'CA': ['Canada']\n        }\n\n        for country, result in country_list.items():\n            pls = self.get_pl(show, current_pl, country)\n            self.assertEquals(len(set(pls.mapped('name')) & set(result)), len(pls), 'Test failed for %s (%s %s vs %s %s)'\n                              % (country, len(pls), pls.mapped('name'), len(result), result))\n\n    def _test_get_pricelist_available_promocode(self):\n        christmas_pl = self.ref('website_sale.list_christmas')\n        public_pl = self.ref('product.list0')\n        self.args = {\n            'show': False,\n            'current_pl': public_pl,\n        }\n\n        country_list = {\n            False: True,\n            'BE': True,\n            'IT': True,\n            'US': True,\n            'CA': False\n        }\n\n        for country, result in country_list.items():\n            self.args['country'] = country\n            # mock patch method could not pass env context\n            available = self.website.is_pricelist_available(christmas_pl)\n            if result:\n                self.assertTrue(available, 'AssertTrue failed for %s' % country)\n            else:\n                self.assertFalse(available, 'AssertFalse failed for %s' % country)\n\n    def test_get_pricelist_available_show_with_auto_property(self):\n        show = True\n        self.env.user.partner_id.country_id = self.env.ref('base.be')  # Add EUR pricelist auto\n        current_pl = False\n\n        country_list = {\n            False: ['Public Pricelist', 'EUR', 'Benelux', 'Canada'],\n            'BE': ['EUR', 'Benelux'],\n            'IT': ['EUR'],\n            'CA': ['EUR', 'Canada'],\n            'US': ['Public Pricelist', 'EUR', 'Benelux', 'Canada']\n        }\n        for country, result in country_list.items():\n            pls = self.get_pl(show, current_pl, country)\n            self.assertEquals(len(set(pls.mapped('name')) & set(result)), len(pls), 'Test failed for %s (%s %s vs %s %s)'\n                              % (country, len(pls), pls.mapped('name'), len(result), result))\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_website_sale_pricelist.py", "id": "4ac443ef43f214100a6b40ea8c0852e6", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_sale/tests/test_website_sale_pricelist.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}