{"author": "audreyr", "code": "# -*- coding: utf-8 -*-\n\nimport click\nimport pytest\n\nfrom cookiecutter.prompt import read_user_choice\n\nOPTIONS = ['hello', 'world', 'foo', 'bar']\n\n\nEXPECTED_PROMPT = \n\n\n@pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\ndef test_click_invocation(mocker, user_choice, expected_value):\n    choice = mocker.patch('click.Choice')\n    choice.return_value = click.Choice(OPTIONS)\n\n    prompt = mocker.patch('click.prompt')\n    prompt.return_value = '{}'.format(user_choice)\n\n    assert read_user_choice('varname', OPTIONS) == expected_value\n\n    prompt.assert_called_once_with(\n        EXPECTED_PROMPT,\n        type=click.Choice(OPTIONS),\n        default='1'\n    )\n\n\ndef test_raise_if_options_is_not_a_non_empty_list():\n    with pytest.raises(TypeError):\n        read_user_choice('foo', 'NOT A LIST')\n\n    with pytest.raises(ValueError):\n        read_user_choice('foo', [])\n", "comments": "   select varname  1   hello 2   world 3   foo 4   bar choose 1  2  3  4           coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nimport click\nimport pytest\n\nfrom cookiecutter.prompt import read_user_choice\n\nOPTIONS = ['hello', 'world', 'foo', 'bar']\n\n\nEXPECTED_PROMPT = \"\"\"Select varname:\n1 - hello\n2 - world\n3 - foo\n4 - bar\nChoose from 1, 2, 3, 4\"\"\"\n\n\n@pytest.mark.parametrize('user_choice, expected_value', enumerate(OPTIONS, 1))\ndef test_click_invocation(mocker, user_choice, expected_value):\n    choice = mocker.patch('click.Choice')\n    choice.return_value = click.Choice(OPTIONS)\n\n    prompt = mocker.patch('click.prompt')\n    prompt.return_value = '{}'.format(user_choice)\n\n    assert read_user_choice('varname', OPTIONS) == expected_value\n\n    prompt.assert_called_once_with(\n        EXPECTED_PROMPT,\n        type=click.Choice(OPTIONS),\n        default='1'\n    )\n\n\ndef test_raise_if_options_is_not_a_non_empty_list():\n    with pytest.raises(TypeError):\n        read_user_choice('foo', 'NOT A LIST')\n\n    with pytest.raises(ValueError):\n        read_user_choice('foo', [])\n", "description": "A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.", "file_name": "test_read_user_choice.py", "id": "f9de9dac4757fbf2d43861f20c109371", "language": "Python", "project_name": "cookiecutter", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/audreyr-cookiecutter/audreyr-cookiecutter-7154cf2/tests/test_read_user_choice.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:52:22Z", "url": "https://github.com/audreyr/cookiecutter", "wiki": true}