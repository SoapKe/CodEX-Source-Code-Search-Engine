{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport logging\n\nfrom odoo import api, fields, models\n\n_logger = logging.getLogger(__name__)\n\n\nclass SaleOrder(models.Model):\n    _inherit = 'sale.order'\n\n    amount_delivery = fields.Monetary(\n        compute='_compute_amount_delivery', digits=0,\n        string='Delivery Amount',\n        help=\"The amount without tax.\", store=True, track_visibility='always')\n    has_delivery = fields.Boolean(\n        compute='_compute_has_delivery', string='Has delivery',\n        help=\"Has an order line set for delivery\", store=True)\n    website_order_line = fields.One2many(\n        'sale.order.line', 'order_id',\n        string='Order Lines displayed on Website', readonly=True,\n        domain=[('is_delivery', '=', False)],\n        help='Order Lines to be displayed on the website. They should not be used for computation purpose.')\n\n    @api.depends('order_line.price_unit', 'order_line.tax_id', 'order_line.discount', 'order_line.product_uom_qty')\n    def _compute_amount_delivery(self):\n        for order in self:\n            order.amount_delivery = sum(order.order_line.filtered('is_delivery').mapped('price_subtotal'))\n\n    @api.depends('order_line.is_delivery')\n    def _compute_has_delivery(self):\n        for order in self:\n            order.has_delivery = any(order.order_line.filtered('is_delivery'))\n\n    def _check_carrier_quotation(self, force_carrier_id=None):\n        self.ensure_one()\n        DeliveryCarrier = self.env['delivery.carrier']\n\n        if self.only_services:\n            self.write({'carrier_id': None})\n            self._remove_delivery_line()\n            return True\n        else:\n            \n            if not force_carrier_id and self.partner_shipping_id.property_delivery_carrier_id:\n                force_carrier_id = self.partner_shipping_id.property_delivery_carrier_id.id\n\n            carrier = force_carrier_id and DeliveryCarrier.browse(force_carrier_id) or self.carrier_id\n            available_carriers = self._get_delivery_methods()\n            if carrier:\n                if carrier not in available_carriers:\n                    carrier = DeliveryCarrier\n                else:\n                    \n                    available_carriers -= carrier\n                    available_carriers = carrier + available_carriers\n            if force_carrier_id or not carrier or carrier not in available_carriers:\n                for delivery in available_carriers:\n                    verified_carrier = delivery._match_address(self.partner_shipping_id)\n                    if verified_carrier:\n                        carrier = delivery\n                        break\n                self.write({'carrier_id': carrier.id})\n            if carrier:\n                self.get_delivery_price()\n                if self.delivery_rating_success:\n                    self.set_delivery_line()\n            else:\n                self._remove_delivery_line()\n\n        return bool(carrier)\n\n    def _get_delivery_methods(self):\n        address = self.partner_shipping_id\n        return self.env['delivery.carrier'].sudo().search([('website_published', '=', True)]).available_carriers(address)\n\n    @api.multi\n    def _cart_update(self, product_id=None, line_id=None, add_qty=0, set_qty=0, **kwargs):\n        \n\n        self._remove_delivery_line()\n\n        \n        \n        \n        #    then update your cart (the cart becomes uneditable)\n        self.write({'carrier_id': False})\n\n        values = super(SaleOrder, self)._cart_update(product_id, line_id, add_qty, set_qty, **kwargs)\n\n        return values\n", "comments": "    override update carrier quotation quantity changed            coding  utf 8        part odoo  see license file full copyright licensing details     attempt use partner preferred carrier    set forced carrier beginning list verfied first    when update cart  enouf remove  delivery cost  line    the carrier might also invalid  eg  bought things heavy       may cause bug go checkout screen  choose carrier        update cart (the cart becomes uneditable) ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nimport logging\n\nfrom odoo import api, fields, models\n\n_logger = logging.getLogger(__name__)\n\n\nclass SaleOrder(models.Model):\n    _inherit = 'sale.order'\n\n    amount_delivery = fields.Monetary(\n        compute='_compute_amount_delivery', digits=0,\n        string='Delivery Amount',\n        help=\"The amount without tax.\", store=True, track_visibility='always')\n    has_delivery = fields.Boolean(\n        compute='_compute_has_delivery', string='Has delivery',\n        help=\"Has an order line set for delivery\", store=True)\n    website_order_line = fields.One2many(\n        'sale.order.line', 'order_id',\n        string='Order Lines displayed on Website', readonly=True,\n        domain=[('is_delivery', '=', False)],\n        help='Order Lines to be displayed on the website. They should not be used for computation purpose.')\n\n    @api.depends('order_line.price_unit', 'order_line.tax_id', 'order_line.discount', 'order_line.product_uom_qty')\n    def _compute_amount_delivery(self):\n        for order in self:\n            order.amount_delivery = sum(order.order_line.filtered('is_delivery').mapped('price_subtotal'))\n\n    @api.depends('order_line.is_delivery')\n    def _compute_has_delivery(self):\n        for order in self:\n            order.has_delivery = any(order.order_line.filtered('is_delivery'))\n\n    def _check_carrier_quotation(self, force_carrier_id=None):\n        self.ensure_one()\n        DeliveryCarrier = self.env['delivery.carrier']\n\n        if self.only_services:\n            self.write({'carrier_id': None})\n            self._remove_delivery_line()\n            return True\n        else:\n            # attempt to use partner's preferred carrier\n            if not force_carrier_id and self.partner_shipping_id.property_delivery_carrier_id:\n                force_carrier_id = self.partner_shipping_id.property_delivery_carrier_id.id\n\n            carrier = force_carrier_id and DeliveryCarrier.browse(force_carrier_id) or self.carrier_id\n            available_carriers = self._get_delivery_methods()\n            if carrier:\n                if carrier not in available_carriers:\n                    carrier = DeliveryCarrier\n                else:\n                    # set the forced carrier at the beginning of the list to be verfied first below\n                    available_carriers -= carrier\n                    available_carriers = carrier + available_carriers\n            if force_carrier_id or not carrier or carrier not in available_carriers:\n                for delivery in available_carriers:\n                    verified_carrier = delivery._match_address(self.partner_shipping_id)\n                    if verified_carrier:\n                        carrier = delivery\n                        break\n                self.write({'carrier_id': carrier.id})\n            if carrier:\n                self.get_delivery_price()\n                if self.delivery_rating_success:\n                    self.set_delivery_line()\n            else:\n                self._remove_delivery_line()\n\n        return bool(carrier)\n\n    def _get_delivery_methods(self):\n        address = self.partner_shipping_id\n        return self.env['delivery.carrier'].sudo().search([('website_published', '=', True)]).available_carriers(address)\n\n    @api.multi\n    def _cart_update(self, product_id=None, line_id=None, add_qty=0, set_qty=0, **kwargs):\n        \"\"\" Override to update carrier quotation if quantity changed \"\"\"\n\n        self._remove_delivery_line()\n\n        # When you update a cart, it is not enouf to remove the \"delivery cost\" line\n        # The carrier might also be invalid, eg: if you bought things that are too heavy\n        # -> this may cause a bug if you go to the checkout screen, choose a carrier,\n        #    then update your cart (the cart becomes uneditable)\n        self.write({'carrier_id': False})\n\n        values = super(SaleOrder, self)._cart_update(product_id, line_id, add_qty, set_qty, **kwargs)\n\n        return values\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_order.py", "id": "a06d8d9eccaae8df3a34cb78d79020df", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_sale_delivery/models/sale_order.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}