{"author": "ansible", "code": "\n\n\n\nresults = {}\n\n\nimport ansible.module_utils.foo0\nresults['foo0'] = ansible.module_utils.foo0.data\n\n\nimport ansible.module_utils.bar0.foo\nresults['bar0'] = ansible.module_utils.bar0.foo.data\n\n\nfrom ansible.module_utils import foo1\nresults['foo1'] = foo1.data\n\n\nfrom ansible.module_utils.foo2 import data\nresults['foo2'] = data\n\n\nfrom ansible.module_utils import bar1\nresults['bar1'] = bar1.data\n\n\nfrom ansible.module_utils.bar2 import data\nresults['bar2'] = data\n\n\nfrom ansible.module_utils.baz1 import one\nresults['baz1'] = one.data\n\n\nfrom ansible.module_utils.baz2.one import data\nresults['baz2'] = data\n\n\nfrom ansible.module_utils.spam1.ham import eggs\nresults['spam1'] = eggs.data\n\n\nfrom ansible.module_utils.spam2.ham.eggs import data\nresults['spam2'] = data\n\n\nfrom ansible.module_utils.spam3.ham import bacon\nresults['spam3'] = bacon.data\n\n\nfrom ansible.module_utils.spam4.ham.bacon import data\nresults['spam4'] = data\n\n# Test import of module_utils.spam5.ham bacon and eggs (modules)\nfrom ansible.module_utils.spam5.ham import bacon, eggs\nresults['spam5'] = (bacon.data, eggs.data)\n\n# Test import of module_utils.spam6.ham bacon and eggs (identifiers)\nfrom ansible.module_utils.spam6.ham import bacon, eggs\nresults['spam6'] = (bacon, eggs)\n\n# Test import of module_utils.spam7.ham bacon and eggs (module and identifier)\nfrom ansible.module_utils.spam7.ham import bacon, eggs\nresults['spam7'] = (bacon.data, eggs)\n\n\nfrom ansible.module_utils.spam8.ham import bacon\nfrom ansible.module_utils.spam8.ham import eggs\nresults['spam8'] = (bacon.data, eggs)\n\n\nfrom ansible.module_utils.qux1 import quux as one\nresults['qux1'] = one.data\n\n\nfrom ansible.module_utils.qux2 import quux as one, quuz as two\nresults['qux2'] = (one.data, two.data)\n\n\nfrom ansible.module_utils.a.b.c.d.e.f.g.h import data\n\nresults['abcdefgh'] = data\nfrom ansible.module_utils.basic import AnsibleModule\nAnsibleModule(argument_spec=dict()).exit_json(**results)\n", "comments": "   usr bin python    most names available via pluginloader pylint    know exist    pylint  disable name module    test import    test depthful import    test import module utils foo1 py    test import identifier inside module utils foo2 py    test import module utils bar1   init   py    test import identifier inside module utils bar2   init   py    test import module utils baz1 one py    test import identifier inside module utils baz2 one py    test import module utils spam1 ham eggs   init   py    test import identifier inside module utils spam2 ham eggs   init   py    test import module utils spam3 ham bacon py    test import identifier inside module utils spam4 ham bacon py    test import module utils spam5 ham bacon eggs (modules)    test import module utils spam6 ham bacon eggs (identifiers)    test import module utils spam7 ham bacon eggs (module identifier)    test import module utils spam8 ham bacon py module utils spam8 ham eggs py separately    test import module utils qux1 quux py using works    test importing qux2 quux py qux2 quuz py using works    test depth ", "content": "#!/usr/bin/python\n# Most of these names are only available via PluginLoader so pylint doesn't\n# know they exist\n# pylint: disable=no-name-in-module\nresults = {}\n\n# Test import with no from\nimport ansible.module_utils.foo0\nresults['foo0'] = ansible.module_utils.foo0.data\n\n# Test depthful import with no from\nimport ansible.module_utils.bar0.foo\nresults['bar0'] = ansible.module_utils.bar0.foo.data\n\n# Test import of module_utils/foo1.py\nfrom ansible.module_utils import foo1\nresults['foo1'] = foo1.data\n\n# Test import of an identifier inside of module_utils/foo2.py\nfrom ansible.module_utils.foo2 import data\nresults['foo2'] = data\n\n# Test import of module_utils/bar1/__init__.py\nfrom ansible.module_utils import bar1\nresults['bar1'] = bar1.data\n\n# Test import of an identifier inside of module_utils/bar2/__init__.py\nfrom ansible.module_utils.bar2 import data\nresults['bar2'] = data\n\n# Test import of module_utils/baz1/one.py\nfrom ansible.module_utils.baz1 import one\nresults['baz1'] = one.data\n\n# Test import of an identifier inside of module_utils/baz2/one.py\nfrom ansible.module_utils.baz2.one import data\nresults['baz2'] = data\n\n# Test import of module_utils/spam1/ham/eggs/__init__.py\nfrom ansible.module_utils.spam1.ham import eggs\nresults['spam1'] = eggs.data\n\n# Test import of an identifier inside module_utils/spam2/ham/eggs/__init__.py\nfrom ansible.module_utils.spam2.ham.eggs import data\nresults['spam2'] = data\n\n# Test import of module_utils/spam3/ham/bacon.py\nfrom ansible.module_utils.spam3.ham import bacon\nresults['spam3'] = bacon.data\n\n# Test import of an identifier inside of module_utils/spam4/ham/bacon.py\nfrom ansible.module_utils.spam4.ham.bacon import data\nresults['spam4'] = data\n\n# Test import of module_utils.spam5.ham bacon and eggs (modules)\nfrom ansible.module_utils.spam5.ham import bacon, eggs\nresults['spam5'] = (bacon.data, eggs.data)\n\n# Test import of module_utils.spam6.ham bacon and eggs (identifiers)\nfrom ansible.module_utils.spam6.ham import bacon, eggs\nresults['spam6'] = (bacon, eggs)\n\n# Test import of module_utils.spam7.ham bacon and eggs (module and identifier)\nfrom ansible.module_utils.spam7.ham import bacon, eggs\nresults['spam7'] = (bacon.data, eggs)\n\n# Test import of module_utils/spam8/ham/bacon.py and module_utils/spam8/ham/eggs.py separately\nfrom ansible.module_utils.spam8.ham import bacon\nfrom ansible.module_utils.spam8.ham import eggs\nresults['spam8'] = (bacon.data, eggs)\n\n# Test that import of module_utils/qux1/quux.py using as works\nfrom ansible.module_utils.qux1 import quux as one\nresults['qux1'] = one.data\n\n# Test that importing qux2/quux.py and qux2/quuz.py using as works\nfrom ansible.module_utils.qux2 import quux as one, quuz as two\nresults['qux2'] = (one.data, two.data)\n\n# Test depth\nfrom ansible.module_utils.a.b.c.d.e.f.g.h import data\n\nresults['abcdefgh'] = data\nfrom ansible.module_utils.basic import AnsibleModule\nAnsibleModule(argument_spec=dict()).exit_json(**results)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test.py", "id": "3936237da014f17f3a24b995bd4e03d5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/integration/targets/module_utils/library/test.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}