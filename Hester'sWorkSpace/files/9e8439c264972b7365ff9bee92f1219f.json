{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport uuid\n\nfrom .common import InfoExtractor\nfrom .ooyala import OoyalaIE\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    extract_attributes,\n    determine_ext,\n    smuggle_url,\n    parse_duration,\n)\n\n\nclass MiTeleBaseIE(InfoExtractor):\n    def _get_player_info(self, url, webpage):\n        player_data = extract_attributes(self._search_regex(\n            r'(?s)(<ms-video-player.+?</ms-video-player>)',\n            webpage, 'ms video player'))\n        video_id = player_data['data-media-id']\n        if player_data.get('data-cms-id') == 'ooyala':\n            return self.url_result(\n                'ooyala:%s' % video_id, ie=OoyalaIE.ie_key(), video_id=video_id)\n        config_url = compat_urlparse.urljoin(url, player_data['data-config'])\n        config = self._download_json(\n            config_url, video_id, 'Downloading config JSON')\n        mmc_url = config['services']['mmc']\n\n        duration = None\n        formats = []\n        for m_url in (mmc_url, mmc_url.replace('/flash.json', '/html5.json')):\n            mmc = self._download_json(\n                m_url, video_id, 'Downloading mmc JSON')\n            if not duration:\n                duration = int_or_none(mmc.get('duration'))\n            for location in mmc['locations']:\n                gat = self._proto_relative_url(location.get('gat'), 'http:')\n                gcp = location.get('gcp')\n                ogn = location.get('ogn')\n                if None in (gat, gcp, ogn):\n                    continue\n                token_data = {\n                    'gcp': gcp,\n                    'ogn': ogn,\n                    'sta': 0,\n                }\n                media = self._download_json(\n                    gat, video_id, data=json.dumps(token_data).encode('utf-8'),\n                    headers={\n                        'Content-Type': 'application/json;charset=utf-8',\n                        'Referer': url,\n                    })\n                stream = media.get('stream') or media.get('file')\n                if not stream:\n                    continue\n                ext = determine_ext(stream)\n                if ext == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        stream + '&hdcore=3.2.0&plugin=aasp-3.2.0.77.18',\n                        video_id, f4m_id='hds', fatal=False))\n                elif ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        stream, video_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'thumbnail': player_data.get('data-poster') or config.get('poster', {}).get('imageUrl'),\n            'duration': duration,\n        }\n\n\nclass MiTeleIE(InfoExtractor):\n    IE_DESC = 'mitele.es'\n    _VALID_URL = r'https?://(?:www\\.)?mitele\\.es/(?:[^/]+/)+(?P<id>[^/]+)/player'\n\n    _TESTS = [{\n        'url': 'http://www.mitele.es/programas-tv/diario-de/57b0dfb9c715da65618b4afa/player',\n        'info_dict': {\n            'id': '57b0dfb9c715da65618b4afa',\n            'ext': 'mp4',\n            'title': 'Tor, la web invisible',\n            'description': 'md5:3b6fce7eaa41b2d97358726378d9369f',\n            'series': 'Diario de',\n            'season': 'La redacci\u00f3n',\n            'season_number': 14,\n            'season_id': 'diario_de_t14_11981',\n            'episode': 'Programa 144',\n            'episode_number': 3,\n            'thumbnail': r're:(?i)^https?://.*\\.jpg$',\n            'duration': 2913,\n        },\n        'add_ie': ['Ooyala'],\n    }, {\n        \n        'url': 'http://www.mitele.es/programas-tv/cuarto-milenio/57b0de3dc915da14058b4876/player',\n        'info_dict': {\n            'id': '57b0de3dc915da14058b4876',\n            'ext': 'mp4',\n            'title': 'Cuarto Milenio Temporada 6 Programa 226',\n            'description': 'md5:5ff132013f0cd968ffbf1f5f3538a65f',\n            'series': 'Cuarto Milenio',\n            'season': 'Temporada 6',\n            'season_number': 6,\n            'season_id': 'cuarto_milenio_t06_12715',\n            'episode': 'Programa 226',\n            'episode_number': 24,\n            'thumbnail': r're:(?i)^https?://.*\\.jpg$',\n            'duration': 7313,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': ['Ooyala'],\n    }, {\n        'url': 'http://www.mitele.es/series-online/la-que-se-avecina/57aac5c1c915da951a8b45ed/player',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        gigya_url = self._search_regex(\n            r'<gigya-api>[^>]*</gigya-api>[^>]*<script\\s+src=\"([^\"]*)\">[^>]*</script>',\n            webpage, 'gigya', default=None)\n        gigya_sc = self._download_webpage(\n            compat_urlparse.urljoin('http://www.mitele.es/', gigya_url),\n            video_id, 'Downloading gigya script')\n\n        \n        appKey = self._search_regex(\n            r'constant\\s*\\(\\s*[\"\\']_appGridApplicationKey[\"\\']\\s*,\\s*[\"\\']([0-9a-f]+)',\n            gigya_sc, 'appKey')\n\n        session_json = self._download_json(\n            'https://appgrid-api.cloud.accedo.tv/session',\n            video_id, 'Downloading session keys', query={\n                'appKey': appKey,\n                'uuid': compat_str(uuid.uuid4()),\n            })\n\n        paths = self._download_json(\n            'https://appgrid-api.cloud.accedo.tv/metadata/general_configuration,%20web_configuration',\n            video_id, 'Downloading paths JSON',\n            query={'sessionKey': compat_str(session_json['sessionKey'])})\n\n        ooyala_s = paths['general_configuration']['api_configuration']['ooyala_search']\n        source = self._download_json(\n            'http://%s%s%s/docs/%s' % (\n                ooyala_s['base_url'], ooyala_s['full_path'],\n                ooyala_s['provider_id'], video_id),\n            video_id, 'Downloading data JSON', query={\n                'include_titles': 'Series,Season',\n                'product_name': 'test',\n                'format': 'full',\n            })['hits']['hits'][0]['_source']\n\n        embedCode = source['offers'][0]['embed_codes'][0]\n        titles = source['localizable_titles'][0]\n\n        title = titles.get('title_medium') or titles['title_long']\n\n        description = titles.get('summary_long') or titles.get('summary_medium')\n\n        def get(key1, key2):\n            value1 = source.get(key1)\n            if not value1 or not isinstance(value1, list):\n                return\n            if not isinstance(value1[0], dict):\n                return\n            return value1[0].get(key2)\n\n        series = get('localizable_titles_series', 'title_medium')\n\n        season = get('localizable_titles_season', 'title_medium')\n        season_number = int_or_none(source.get('season_number'))\n        season_id = source.get('season_id')\n\n        episode = titles.get('title_sort_name')\n        episode_number = int_or_none(source.get('episode_number'))\n\n        duration = parse_duration(get('videos', 'duration'))\n\n        return {\n            '_type': 'url_transparent',\n            \n            'url': smuggle_url('ooyala:' + embedCode, {'supportedformats': 'm3u8,dash'}),\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'series': series,\n            'season': season,\n            'season_number': season_number,\n            'season_id': season_id,\n            'episode': episode,\n            'episode_number': episode_number,\n            'duration': duration,\n            'thumbnail': get('images', 'url'),\n        }\n", "comments": "# coding: utf-8\n# no explicit title\n# Get a appKey/uuid for getting the session key\n# for some reason only HLS is supported\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport uuid\n\nfrom .common import InfoExtractor\nfrom .ooyala import OoyalaIE\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    extract_attributes,\n    determine_ext,\n    smuggle_url,\n    parse_duration,\n)\n\n\nclass MiTeleBaseIE(InfoExtractor):\n    def _get_player_info(self, url, webpage):\n        player_data = extract_attributes(self._search_regex(\n            r'(?s)(<ms-video-player.+?</ms-video-player>)',\n            webpage, 'ms video player'))\n        video_id = player_data['data-media-id']\n        if player_data.get('data-cms-id') == 'ooyala':\n            return self.url_result(\n                'ooyala:%s' % video_id, ie=OoyalaIE.ie_key(), video_id=video_id)\n        config_url = compat_urlparse.urljoin(url, player_data['data-config'])\n        config = self._download_json(\n            config_url, video_id, 'Downloading config JSON')\n        mmc_url = config['services']['mmc']\n\n        duration = None\n        formats = []\n        for m_url in (mmc_url, mmc_url.replace('/flash.json', '/html5.json')):\n            mmc = self._download_json(\n                m_url, video_id, 'Downloading mmc JSON')\n            if not duration:\n                duration = int_or_none(mmc.get('duration'))\n            for location in mmc['locations']:\n                gat = self._proto_relative_url(location.get('gat'), 'http:')\n                gcp = location.get('gcp')\n                ogn = location.get('ogn')\n                if None in (gat, gcp, ogn):\n                    continue\n                token_data = {\n                    'gcp': gcp,\n                    'ogn': ogn,\n                    'sta': 0,\n                }\n                media = self._download_json(\n                    gat, video_id, data=json.dumps(token_data).encode('utf-8'),\n                    headers={\n                        'Content-Type': 'application/json;charset=utf-8',\n                        'Referer': url,\n                    })\n                stream = media.get('stream') or media.get('file')\n                if not stream:\n                    continue\n                ext = determine_ext(stream)\n                if ext == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        stream + '&hdcore=3.2.0&plugin=aasp-3.2.0.77.18',\n                        video_id, f4m_id='hds', fatal=False))\n                elif ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        stream, video_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'thumbnail': player_data.get('data-poster') or config.get('poster', {}).get('imageUrl'),\n            'duration': duration,\n        }\n\n\nclass MiTeleIE(InfoExtractor):\n    IE_DESC = 'mitele.es'\n    _VALID_URL = r'https?://(?:www\\.)?mitele\\.es/(?:[^/]+/)+(?P<id>[^/]+)/player'\n\n    _TESTS = [{\n        'url': 'http://www.mitele.es/programas-tv/diario-de/57b0dfb9c715da65618b4afa/player',\n        'info_dict': {\n            'id': '57b0dfb9c715da65618b4afa',\n            'ext': 'mp4',\n            'title': 'Tor, la web invisible',\n            'description': 'md5:3b6fce7eaa41b2d97358726378d9369f',\n            'series': 'Diario de',\n            'season': 'La redacci\u00f3n',\n            'season_number': 14,\n            'season_id': 'diario_de_t14_11981',\n            'episode': 'Programa 144',\n            'episode_number': 3,\n            'thumbnail': r're:(?i)^https?://.*\\.jpg$',\n            'duration': 2913,\n        },\n        'add_ie': ['Ooyala'],\n    }, {\n        # no explicit title\n        'url': 'http://www.mitele.es/programas-tv/cuarto-milenio/57b0de3dc915da14058b4876/player',\n        'info_dict': {\n            'id': '57b0de3dc915da14058b4876',\n            'ext': 'mp4',\n            'title': 'Cuarto Milenio Temporada 6 Programa 226',\n            'description': 'md5:5ff132013f0cd968ffbf1f5f3538a65f',\n            'series': 'Cuarto Milenio',\n            'season': 'Temporada 6',\n            'season_number': 6,\n            'season_id': 'cuarto_milenio_t06_12715',\n            'episode': 'Programa 226',\n            'episode_number': 24,\n            'thumbnail': r're:(?i)^https?://.*\\.jpg$',\n            'duration': 7313,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': ['Ooyala'],\n    }, {\n        'url': 'http://www.mitele.es/series-online/la-que-se-avecina/57aac5c1c915da951a8b45ed/player',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        gigya_url = self._search_regex(\n            r'<gigya-api>[^>]*</gigya-api>[^>]*<script\\s+src=\"([^\"]*)\">[^>]*</script>',\n            webpage, 'gigya', default=None)\n        gigya_sc = self._download_webpage(\n            compat_urlparse.urljoin('http://www.mitele.es/', gigya_url),\n            video_id, 'Downloading gigya script')\n\n        # Get a appKey/uuid for getting the session key\n        appKey = self._search_regex(\n            r'constant\\s*\\(\\s*[\"\\']_appGridApplicationKey[\"\\']\\s*,\\s*[\"\\']([0-9a-f]+)',\n            gigya_sc, 'appKey')\n\n        session_json = self._download_json(\n            'https://appgrid-api.cloud.accedo.tv/session',\n            video_id, 'Downloading session keys', query={\n                'appKey': appKey,\n                'uuid': compat_str(uuid.uuid4()),\n            })\n\n        paths = self._download_json(\n            'https://appgrid-api.cloud.accedo.tv/metadata/general_configuration,%20web_configuration',\n            video_id, 'Downloading paths JSON',\n            query={'sessionKey': compat_str(session_json['sessionKey'])})\n\n        ooyala_s = paths['general_configuration']['api_configuration']['ooyala_search']\n        source = self._download_json(\n            'http://%s%s%s/docs/%s' % (\n                ooyala_s['base_url'], ooyala_s['full_path'],\n                ooyala_s['provider_id'], video_id),\n            video_id, 'Downloading data JSON', query={\n                'include_titles': 'Series,Season',\n                'product_name': 'test',\n                'format': 'full',\n            })['hits']['hits'][0]['_source']\n\n        embedCode = source['offers'][0]['embed_codes'][0]\n        titles = source['localizable_titles'][0]\n\n        title = titles.get('title_medium') or titles['title_long']\n\n        description = titles.get('summary_long') or titles.get('summary_medium')\n\n        def get(key1, key2):\n            value1 = source.get(key1)\n            if not value1 or not isinstance(value1, list):\n                return\n            if not isinstance(value1[0], dict):\n                return\n            return value1[0].get(key2)\n\n        series = get('localizable_titles_series', 'title_medium')\n\n        season = get('localizable_titles_season', 'title_medium')\n        season_number = int_or_none(source.get('season_number'))\n        season_id = source.get('season_id')\n\n        episode = titles.get('title_sort_name')\n        episode_number = int_or_none(source.get('episode_number'))\n\n        duration = parse_duration(get('videos', 'duration'))\n\n        return {\n            '_type': 'url_transparent',\n            # for some reason only HLS is supported\n            'url': smuggle_url('ooyala:' + embedCode, {'supportedformats': 'm3u8,dash'}),\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'series': series,\n            'season': season,\n            'season_number': season_number,\n            'season_id': season_id,\n            'episode': episode,\n            'episode_number': episode_number,\n            'duration': duration,\n            'thumbnail': get('images', 'url'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mitele.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mitele.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}