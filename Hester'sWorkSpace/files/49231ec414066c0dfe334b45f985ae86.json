{"author": "Zulko", "code": "# -*- coding: utf-8 -*-\n\"\"\"Video file clip tests meant to be run with pytest.\"\"\"\nimport os\nimport sys\n\nimport pytest\nfrom moviepy.video.compositing.CompositeVideoClip import clips_array\nfrom moviepy.video.VideoClip import ColorClip\nfrom moviepy.video.io.VideoFileClip import VideoFileClip\n\nsys.path.append(\"tests\")\nfrom test_helper import TMP_DIR\n\ndef test_setup():\n    \"\"\"Test VideoFileClip setup.\"\"\"\n    red = ColorClip((1024,800), color=(255,0,0))\n    green = ColorClip((1024,800), color=(0,255,0))\n    blue = ColorClip((1024,800), color=(0,0,255))\n\n    red.fps = green.fps = blue.fps = 30\n    with clips_array([[red, green, blue]]).set_duration(5) as video:\n        video.write_videofile(os.path.join(TMP_DIR, \"test.mp4\"))\n\n    assert os.path.exists(os.path.join(TMP_DIR, \"test.mp4\"))\n\n    with VideoFileClip(os.path.join(TMP_DIR, \"test.mp4\")) as clip:\n        assert clip.duration == 5\n        assert clip.fps == 30\n        assert clip.size == [1024*3, 800]\n\n    red.close()\n    green.close()\n    blue.close()\n\ndef test_ffmpeg_resizing():\n    \"\"\"Test FFmpeg resizing, to include downscaling.\"\"\"\n    video_file = 'media/big_buck_bunny_432_433.webm'\n    target_resolution = (128, 128)\n    with VideoFileClip(video_file, target_resolution=target_resolution) as video:\n        frame = video.get_frame(0)\n        assert frame.shape[0:2] == target_resolution\n\n    target_resolution = (128, None)\n    with VideoFileClip(video_file, target_resolution=target_resolution) as video:\n        frame = video.get_frame(0)\n        assert frame.shape[0] == target_resolution[0]\n\n    target_resolution = (None, 128)\n    with VideoFileClip(video_file, target_resolution=target_resolution) as video:\n        frame = video.get_frame(0)\n        assert frame.shape[1] == target_resolution[1]\n\n    \n    target_resolution = (None, 2048)\n    with VideoFileClip(video_file, target_resolution=target_resolution) as video:\n        frame = video.get_frame(0)\n        assert frame.shape[1] == target_resolution[1]\n\n\nif __name__ == '__main__':\n   pytest.main()\n", "comments": "   video file clip tests meant run pytest     import os import sys  import pytest moviepy video compositing compositevideoclip import clips array moviepy video videoclip import colorclip moviepy video io videofileclip import videofileclip  sys path append( tests ) test helper import tmp dir  def test setup()         test videofileclip setup         red   colorclip((1024 800)  color (255 0 0))     green   colorclip((1024 800)  color (0 255 0))     blue   colorclip((1024 800)  color (0 0 255))      red fps   green fps   blue fps   30     clips array(  red  green  blue  ) set duration(5) video          video write videofile(os path join(tmp dir   test mp4 ))      assert os path exists(os path join(tmp dir   test mp4 ))      videofileclip(os path join(tmp dir   test mp4 )) clip          assert clip duration    5         assert clip fps    30         assert clip size     1024 3  800       red close()     green close()     blue close()  def test ffmpeg resizing()         test ffmpeg resizing  include downscaling            coding  utf 8        test upscaling ", "content": "# -*- coding: utf-8 -*-\n\"\"\"Video file clip tests meant to be run with pytest.\"\"\"\nimport os\nimport sys\n\nimport pytest\nfrom moviepy.video.compositing.CompositeVideoClip import clips_array\nfrom moviepy.video.VideoClip import ColorClip\nfrom moviepy.video.io.VideoFileClip import VideoFileClip\n\nsys.path.append(\"tests\")\nfrom test_helper import TMP_DIR\n\ndef test_setup():\n    \"\"\"Test VideoFileClip setup.\"\"\"\n    red = ColorClip((1024,800), color=(255,0,0))\n    green = ColorClip((1024,800), color=(0,255,0))\n    blue = ColorClip((1024,800), color=(0,0,255))\n\n    red.fps = green.fps = blue.fps = 30\n    with clips_array([[red, green, blue]]).set_duration(5) as video:\n        video.write_videofile(os.path.join(TMP_DIR, \"test.mp4\"))\n\n    assert os.path.exists(os.path.join(TMP_DIR, \"test.mp4\"))\n\n    with VideoFileClip(os.path.join(TMP_DIR, \"test.mp4\")) as clip:\n        assert clip.duration == 5\n        assert clip.fps == 30\n        assert clip.size == [1024*3, 800]\n\n    red.close()\n    green.close()\n    blue.close()\n\ndef test_ffmpeg_resizing():\n    \"\"\"Test FFmpeg resizing, to include downscaling.\"\"\"\n    video_file = 'media/big_buck_bunny_432_433.webm'\n    target_resolution = (128, 128)\n    with VideoFileClip(video_file, target_resolution=target_resolution) as video:\n        frame = video.get_frame(0)\n        assert frame.shape[0:2] == target_resolution\n\n    target_resolution = (128, None)\n    with VideoFileClip(video_file, target_resolution=target_resolution) as video:\n        frame = video.get_frame(0)\n        assert frame.shape[0] == target_resolution[0]\n\n    target_resolution = (None, 128)\n    with VideoFileClip(video_file, target_resolution=target_resolution) as video:\n        frame = video.get_frame(0)\n        assert frame.shape[1] == target_resolution[1]\n\n    # Test upscaling\n    target_resolution = (None, 2048)\n    with VideoFileClip(video_file, target_resolution=target_resolution) as video:\n        frame = video.get_frame(0)\n        assert frame.shape[1] == target_resolution[1]\n\n\nif __name__ == '__main__':\n   pytest.main()\n", "description": "Video editing with Python", "file_name": "test_VideoFileClip.py", "id": "49231ec414066c0dfe334b45f985ae86", "language": "Python", "project_name": "moviepy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Zulko-moviepy/Zulko-moviepy-6cbd4f3/tests/test_VideoFileClip.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:21:24Z", "url": "https://github.com/Zulko/moviepy", "wiki": true}