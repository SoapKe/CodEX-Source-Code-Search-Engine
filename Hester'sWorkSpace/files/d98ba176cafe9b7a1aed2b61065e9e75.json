{"author": "odoo", "code": "\"\"\"Module to talk to EtherpadLite API.\"\"\"\nimport requests\nimport logging\n\nfrom odoo.tools import html2plaintext\n\n_logger = logging.getLogger(__name__)\n\n\nclass EtherpadLiteClient:\n    \"\"\"Client to talk to EtherpadLite API.\"\"\"\n    API_VERSION = 1  \n\n    CODE_OK = 0\n    CODE_INVALID_PARAMETERS = 1\n    CODE_INTERNAL_ERROR = 2\n    CODE_INVALID_FUNCTION = 3\n    CODE_INVALID_API_KEY = 4\n    TIMEOUT = 20\n\n    apiKey = \"\"\n    baseUrl = \"http://localhost:9001/api\"\n\n    def __init__(self, apiKey=None, baseUrl=None):\n        if apiKey:\n            self.apiKey = apiKey\n\n        if baseUrl:\n            self.baseUrl = baseUrl\n\n    def call(self, function, arguments=None):\n        \"\"\"Create a dictionary of all parameters\"\"\"\n        url = '%s/%d/%s' % (self.baseUrl, self.API_VERSION, function)\n\n        params = arguments or {}\n        params['apikey'] = self.apiKey\n\n        r = requests.post(url, data=params, timeout=self.TIMEOUT)\n        r.raise_for_status()\n        return self.handleResult(r.json())\n\n    def handleResult(self, result):\n        \"\"\"Handle API call result\"\"\"\n        if 'code' not in result:\n            raise Exception(\"API response has no code\")\n        if 'message' not in result:\n            raise Exception(\"API response has no message\")\n\n        if 'data' not in result:\n            result['data'] = None\n\n        if result['code'] == self.CODE_OK:\n            return result['data']\n        elif result['code'] == self.CODE_INVALID_PARAMETERS or result['code'] == self.CODE_INVALID_API_KEY:\n            raise ValueError(result['message'])\n        elif result['code'] == self.CODE_INTERNAL_ERROR:\n            raise Exception(result['message'])\n        elif result['code'] == self.CODE_INVALID_FUNCTION:\n            raise Exception(result['message'])\n        else:\n            raise Exception(\"An unexpected error occurred whilst handling the response\")\n\n    \n    # Pads can belong to a group. There will always be public pads that do not belong to a group (or we give this group the id 0)\n\n    def createGroup(self):\n        \"\"\"creates a new group\"\"\"\n        return self.call(\"createGroup\")\n\n    def createGroupIfNotExistsFor(self, groupMapper):\n        \"\"\"this functions helps you to map your application group ids to etherpad lite group ids\"\"\"\n        return self.call(\"createGroupIfNotExistsFor\", {\n            \"groupMapper\": groupMapper\n        })\n\n    def deleteGroup(self, groupID):\n        \"\"\"deletes a group\"\"\"\n        return self.call(\"deleteGroup\", {\n            \"groupID\": groupID\n        })\n\n    def listPads(self, groupID):\n        \"\"\"returns all pads of this group\"\"\"\n        return self.call(\"listPads\", {\n            \"groupID\": groupID\n        })\n\n    def createGroupPad(self, groupID, padName, text=''):\n        \"\"\"creates a new pad in this group\"\"\"\n        params = {\n            \"groupID\": groupID,\n            \"padName\": padName,\n        }\n        if text:\n            params['text'] = text\n        return self.call(\"createGroupPad\", params)\n\n    \n    # Theses authors are bind to the attributes the users choose (color and name).\n\n    def createAuthor(self, name=''):\n        \"\"\"creates a new author\"\"\"\n        params = {}\n        if name:\n            params['name'] = name\n        return self.call(\"createAuthor\", params)\n\n    def createAuthorIfNotExistsFor(self, authorMapper, name=''):\n        \"\"\"this functions helps you to map your application author ids to etherpad lite author ids\"\"\"\n        params = {\n            'authorMapper': authorMapper\n        }\n        if name:\n            params['name'] = name\n        return self.call(\"createAuthorIfNotExistsFor\", params)\n\n    \n    \n    \n    \n\n    def createSession(self, groupID, authorID, validUntil):\n        \"\"\"creates a new session\"\"\"\n        return self.call(\"createSession\", {\n            \"groupID\": groupID,\n            \"authorID\": authorID,\n            \"validUntil\": validUntil\n        })\n\n    def deleteSession(self, sessionID):\n        \"\"\"deletes a session\"\"\"\n        return self.call(\"deleteSession\", {\n            \"sessionID\": sessionID\n        })\n\n    def getSessionInfo(self, sessionID):\n        \"\"\"returns informations about a session\"\"\"\n        return self.call(\"getSessionInfo\", {\n            \"sessionID\": sessionID\n        })\n\n    def listSessionsOfGroup(self, groupID):\n        \"\"\"returns all sessions of a group\"\"\"\n        return self.call(\"listSessionsOfGroup\", {\n            \"groupID\": groupID\n        })\n\n    def listSessionsOfAuthor(self, authorID):\n        \"\"\"returns all sessions of an author\"\"\"\n        return self.call(\"listSessionsOfAuthor\", {\n            \"authorID\": authorID\n        })\n\n    \n    \n\n    def getText(self, padID, rev=None):\n        \"\"\"returns the text of a pad\"\"\"\n        params = {\"padID\": padID}\n        if rev is not None:\n            params['rev'] = rev\n        return self.call(\"getText\", params)\n\n    \n    def getHtml(self, padID, rev=None):\n        \"\"\"returns the html of a pad\"\"\"\n        params = {\"padID\": padID}\n        if rev is not None:\n            params['rev'] = rev\n        return self.call(\"getHTML\", params)\n\n    def setText(self, padID, text):\n        \"\"\"sets the text of a pad\"\"\"\n        return self.call(\"setText\", {\n            \"padID\": padID,\n            \"text\": text\n        })\n\n    def setHtmlFallbackText(self, padID, html):\n        try:\n            \n            html_wellformed = '<html><body>' + html + '</body></html>'\n            return self.setHtml(padID, html_wellformed)\n        except Exception:\n            _logger.exception('Falling back to setText. SetHtml failed with message:')\n            return self.setText(padID, html2plaintext(html).encode('UTF-8'))\n\n    def setHtml(self, padID, html):\n        \"\"\"sets the text of a pad from html\"\"\"\n        return self.call(\"setHTML\", {\n            \"padID\": padID,\n            \"html\": html\n        })\n\n    \n    \n    # GROUPID$PADNAME. A security manager controls access of them and its\n    \n\n    def createPad(self, padID, text=''):\n        \"\"\"creates a new pad\"\"\"\n        params = {\n            \"padID\": padID,\n        }\n        if text:\n            params['text'] = text\n        return self.call(\"createPad\", params)\n\n    def getRevisionsCount(self, padID):\n        \"\"\"returns the number of revisions of this pad\"\"\"\n        return self.call(\"getRevisionsCount\", {\n            \"padID\": padID\n        })\n\n    def deletePad(self, padID):\n        \"\"\"deletes a pad\"\"\"\n        return self.call(\"deletePad\", {\n            \"padID\": padID\n        })\n\n    def getReadOnlyID(self, padID):\n        \"\"\"returns the read only link of a pad\"\"\"\n        return self.call(\"getReadOnlyID\", {\n            \"padID\": padID\n        })\n\n    def setPublicStatus(self, padID, publicStatus):\n        \"\"\"sets a boolean for the public status of a pad\"\"\"\n        return self.call(\"setPublicStatus\", {\n            \"padID\": padID,\n            \"publicStatus\": publicStatus\n        })\n\n    def getPublicStatus(self, padID):\n        \"\"\"return true of false\"\"\"\n        return self.call(\"getPublicStatus\", {\n            \"padID\": padID\n        })\n\n    def setPassword(self, padID, password):\n        \"\"\"returns ok or a error message\"\"\"\n        return self.call(\"setPassword\", {\n            \"padID\": padID,\n            \"password\": password\n        })\n\n    def isPasswordProtected(self, padID):\n        \"\"\"returns true or false\"\"\"\n        return self.call(\"isPasswordProtected\", {\n            \"padID\": padID\n        })\n", "comments": "   module talk etherpadlite api     import requests import logging  odoo tools import html2plaintext   logger   logging getlogger(  name  )   class etherpadliteclient         client talk etherpadlite api         api version   1    todo probably 1 1 sometime soon      code ok   0     code invalid parameters   1     code internal error   2     code invalid function   3     code invalid api key   4     timeout   20      apikey          baseurl    http   localhost 9001 api       def   init  (self  apikey none  baseurl none)          apikey              self apikey   apikey          baseurl              self baseurl   baseurl      def call(self  function  arguments none)             create dictionary parameters            url          (self baseurl  self api version  function)          params   arguments            params  apikey     self apikey          r   requests post(url  data params  timeout self timeout)         r raise status()         return self handleresult(r json())      def handleresult(self  result)             handle api call result             code  result              raise exception( api response code )          message  result              raise exception( api response message )           data  result              result  data     none          result  code      self code ok              return result  data           elif result  code      self code invalid parameters result  code      self code invalid api key              raise valueerror(result  message  )         elif result  code      self code internal error              raise exception(result  message  )         elif result  code      self code invalid function              raise exception(result  message  )         else              raise exception( an unexpected error occurred whilst handling response )        groups       pads belong group  there always public pads belong group (or give group id 0)      def creategroup(self)             creates new group            return self call( creategroup )      def creategroupifnotexistsfor(self  groupmapper)             functions helps map application group ids etherpad lite group ids            return self call( creategroupifnotexistsfor                  groupmapper   groupmapper          )      def deletegroup(self  groupid)             deletes group            return self call( deletegroup                  groupid   groupid          )      def listpads(self  groupid)             returns pads group            return self call( listpads                  groupid   groupid          )      def creategrouppad(self  groupid  padname  text   )             creates new pad group            params                  groupid   groupid               padname   padname                    text              params  text     text         return self call( creategrouppad   params)        authors       theses authors bind attributes users choose (color name)       def createauthor(self  name   )             creates new author            params              name              params  name     name         return self call( createauthor   params)      def createauthorifnotexistsfor(self  authormapper  name   )             functions helps map application author ids etherpad lite author ids            params                  authormapper   authormapper                   name              params  name     name         return self call( createauthorifnotexistsfor   params)        sessions       sessions created group author  this allows       author access one group  the sessionid set       cookie client valid certain date       def createsession(self  groupid  authorid  validuntil)             creates new session            return self call( createsession                  groupid   groupid               authorid   authorid               validuntil   validuntil          )      def deletesession(self  sessionid)             deletes session            return self call( deletesession                  sessionid   sessionid          )      def getsessioninfo(self  sessionid)             returns informations session            return self call( getsessioninfo                  sessionid   sessionid          )      def listsessionsofgroup(self  groupid)             returns sessions group            return self call( listsessionsofgroup                  groupid   groupid          )      def listsessionsofauthor(self  authorid)             returns sessions author            return self call( listsessionsofauthor                  authorid   authorid          )        pad content       pad content updated retrieved api      def gettext(self  padid  rev none)             returns text pad            params     padid   padid          rev none              params  rev     rev         return self call( gettext   params)        introduced pull request merge     def gethtml(self  padid  rev none)             returns html pad            params     padid   padid          rev none              params  rev     rev         return self call( gethtml   params)      def settext(self  padid  text)             sets text pad            return self call( settext                  padid   padid               text   text          )      def sethtmlfallbacktext(self  padid  html)          try                prevents malformed html errors             html wellformed     html  body     html      body   html               return self sethtml(padid  html wellformed)         except exception               logger exception( falling back settext  sethtml failed message  )             return self settext(padid  html2plaintext(html) encode( utf 8 ))      def sethtml(self  padid  html)             sets text pad html            return self call( sethtml                  padid   padid               html   html          )        pad       group pads normal pads  name schema       groupid padname  a security manager controls access       forbidden normal pads include  name       def createpad(self  padid  text   )             creates new pad            params                  padid   padid                    text              params  text     text         return self call( createpad   params)      def getrevisionscount(self  padid)             returns number revisions pad            return self call( getrevisionscount                  padid   padid          )      def deletepad(self  padid)             deletes pad            return self call( deletepad                  padid   padid          )      def getreadonlyid(self  padid)             returns read link pad            return self call( getreadonlyid                  padid   padid          )      def setpublicstatus(self  padid  publicstatus)             sets boolean public status pad            return self call( setpublicstatus                  padid   padid               publicstatus   publicstatus          )      def getpublicstatus(self  padid)             return true false            return self call( getpublicstatus                  padid   padid          )      def setpassword(self  padid  password)             returns ok error message            return self call( setpassword                  padid   padid               password   password          )      def ispasswordprotected(self  padid)             returns true false       todo probably 1 1 sometime soon    groups    pads belong group  there always public pads belong group (or give group id 0)    authors    theses authors bind attributes users choose (color name)     sessions    sessions created group author  this allows    author access one group  the sessionid set    cookie client valid certain date     pad content    pad content updated retrieved api    introduced pull request merge    prevents malformed html errors    pad    group pads normal pads  name schema    groupid padname  a security manager controls access    forbidden normal pads include  name  ", "content": "\"\"\"Module to talk to EtherpadLite API.\"\"\"\nimport requests\nimport logging\n\nfrom odoo.tools import html2plaintext\n\n_logger = logging.getLogger(__name__)\n\n\nclass EtherpadLiteClient:\n    \"\"\"Client to talk to EtherpadLite API.\"\"\"\n    API_VERSION = 1  # TODO probably 1.1 sometime soon\n\n    CODE_OK = 0\n    CODE_INVALID_PARAMETERS = 1\n    CODE_INTERNAL_ERROR = 2\n    CODE_INVALID_FUNCTION = 3\n    CODE_INVALID_API_KEY = 4\n    TIMEOUT = 20\n\n    apiKey = \"\"\n    baseUrl = \"http://localhost:9001/api\"\n\n    def __init__(self, apiKey=None, baseUrl=None):\n        if apiKey:\n            self.apiKey = apiKey\n\n        if baseUrl:\n            self.baseUrl = baseUrl\n\n    def call(self, function, arguments=None):\n        \"\"\"Create a dictionary of all parameters\"\"\"\n        url = '%s/%d/%s' % (self.baseUrl, self.API_VERSION, function)\n\n        params = arguments or {}\n        params['apikey'] = self.apiKey\n\n        r = requests.post(url, data=params, timeout=self.TIMEOUT)\n        r.raise_for_status()\n        return self.handleResult(r.json())\n\n    def handleResult(self, result):\n        \"\"\"Handle API call result\"\"\"\n        if 'code' not in result:\n            raise Exception(\"API response has no code\")\n        if 'message' not in result:\n            raise Exception(\"API response has no message\")\n\n        if 'data' not in result:\n            result['data'] = None\n\n        if result['code'] == self.CODE_OK:\n            return result['data']\n        elif result['code'] == self.CODE_INVALID_PARAMETERS or result['code'] == self.CODE_INVALID_API_KEY:\n            raise ValueError(result['message'])\n        elif result['code'] == self.CODE_INTERNAL_ERROR:\n            raise Exception(result['message'])\n        elif result['code'] == self.CODE_INVALID_FUNCTION:\n            raise Exception(result['message'])\n        else:\n            raise Exception(\"An unexpected error occurred whilst handling the response\")\n\n    # GROUPS\n    # Pads can belong to a group. There will always be public pads that do not belong to a group (or we give this group the id 0)\n\n    def createGroup(self):\n        \"\"\"creates a new group\"\"\"\n        return self.call(\"createGroup\")\n\n    def createGroupIfNotExistsFor(self, groupMapper):\n        \"\"\"this functions helps you to map your application group ids to etherpad lite group ids\"\"\"\n        return self.call(\"createGroupIfNotExistsFor\", {\n            \"groupMapper\": groupMapper\n        })\n\n    def deleteGroup(self, groupID):\n        \"\"\"deletes a group\"\"\"\n        return self.call(\"deleteGroup\", {\n            \"groupID\": groupID\n        })\n\n    def listPads(self, groupID):\n        \"\"\"returns all pads of this group\"\"\"\n        return self.call(\"listPads\", {\n            \"groupID\": groupID\n        })\n\n    def createGroupPad(self, groupID, padName, text=''):\n        \"\"\"creates a new pad in this group\"\"\"\n        params = {\n            \"groupID\": groupID,\n            \"padName\": padName,\n        }\n        if text:\n            params['text'] = text\n        return self.call(\"createGroupPad\", params)\n\n    # AUTHORS\n    # Theses authors are bind to the attributes the users choose (color and name).\n\n    def createAuthor(self, name=''):\n        \"\"\"creates a new author\"\"\"\n        params = {}\n        if name:\n            params['name'] = name\n        return self.call(\"createAuthor\", params)\n\n    def createAuthorIfNotExistsFor(self, authorMapper, name=''):\n        \"\"\"this functions helps you to map your application author ids to etherpad lite author ids\"\"\"\n        params = {\n            'authorMapper': authorMapper\n        }\n        if name:\n            params['name'] = name\n        return self.call(\"createAuthorIfNotExistsFor\", params)\n\n    # SESSIONS\n    # Sessions can be created between a group and a author. This allows\n    # an author to access more than one group. The sessionID will be set as\n    # a cookie to the client and is valid until a certain date.\n\n    def createSession(self, groupID, authorID, validUntil):\n        \"\"\"creates a new session\"\"\"\n        return self.call(\"createSession\", {\n            \"groupID\": groupID,\n            \"authorID\": authorID,\n            \"validUntil\": validUntil\n        })\n\n    def deleteSession(self, sessionID):\n        \"\"\"deletes a session\"\"\"\n        return self.call(\"deleteSession\", {\n            \"sessionID\": sessionID\n        })\n\n    def getSessionInfo(self, sessionID):\n        \"\"\"returns informations about a session\"\"\"\n        return self.call(\"getSessionInfo\", {\n            \"sessionID\": sessionID\n        })\n\n    def listSessionsOfGroup(self, groupID):\n        \"\"\"returns all sessions of a group\"\"\"\n        return self.call(\"listSessionsOfGroup\", {\n            \"groupID\": groupID\n        })\n\n    def listSessionsOfAuthor(self, authorID):\n        \"\"\"returns all sessions of an author\"\"\"\n        return self.call(\"listSessionsOfAuthor\", {\n            \"authorID\": authorID\n        })\n\n    # PAD CONTENT\n    # Pad content can be updated and retrieved through the API\n\n    def getText(self, padID, rev=None):\n        \"\"\"returns the text of a pad\"\"\"\n        params = {\"padID\": padID}\n        if rev is not None:\n            params['rev'] = rev\n        return self.call(\"getText\", params)\n\n    # introduced with pull request merge\n    def getHtml(self, padID, rev=None):\n        \"\"\"returns the html of a pad\"\"\"\n        params = {\"padID\": padID}\n        if rev is not None:\n            params['rev'] = rev\n        return self.call(\"getHTML\", params)\n\n    def setText(self, padID, text):\n        \"\"\"sets the text of a pad\"\"\"\n        return self.call(\"setText\", {\n            \"padID\": padID,\n            \"text\": text\n        })\n\n    def setHtmlFallbackText(self, padID, html):\n        try:\n            # Prevents malformed HTML errors\n            html_wellformed = '<html><body>' + html + '</body></html>'\n            return self.setHtml(padID, html_wellformed)\n        except Exception:\n            _logger.exception('Falling back to setText. SetHtml failed with message:')\n            return self.setText(padID, html2plaintext(html).encode('UTF-8'))\n\n    def setHtml(self, padID, html):\n        \"\"\"sets the text of a pad from html\"\"\"\n        return self.call(\"setHTML\", {\n            \"padID\": padID,\n            \"html\": html\n        })\n\n    # PAD\n    # Group pads are normal pads, but with the name schema\n    # GROUPID$PADNAME. A security manager controls access of them and its\n    # forbidden for normal pads to include a  in the name.\n\n    def createPad(self, padID, text=''):\n        \"\"\"creates a new pad\"\"\"\n        params = {\n            \"padID\": padID,\n        }\n        if text:\n            params['text'] = text\n        return self.call(\"createPad\", params)\n\n    def getRevisionsCount(self, padID):\n        \"\"\"returns the number of revisions of this pad\"\"\"\n        return self.call(\"getRevisionsCount\", {\n            \"padID\": padID\n        })\n\n    def deletePad(self, padID):\n        \"\"\"deletes a pad\"\"\"\n        return self.call(\"deletePad\", {\n            \"padID\": padID\n        })\n\n    def getReadOnlyID(self, padID):\n        \"\"\"returns the read only link of a pad\"\"\"\n        return self.call(\"getReadOnlyID\", {\n            \"padID\": padID\n        })\n\n    def setPublicStatus(self, padID, publicStatus):\n        \"\"\"sets a boolean for the public status of a pad\"\"\"\n        return self.call(\"setPublicStatus\", {\n            \"padID\": padID,\n            \"publicStatus\": publicStatus\n        })\n\n    def getPublicStatus(self, padID):\n        \"\"\"return true of false\"\"\"\n        return self.call(\"getPublicStatus\", {\n            \"padID\": padID\n        })\n\n    def setPassword(self, padID, password):\n        \"\"\"returns ok or a error message\"\"\"\n        return self.call(\"setPassword\", {\n            \"padID\": padID,\n            \"password\": password\n        })\n\n    def isPasswordProtected(self, padID):\n        \"\"\"returns true or false\"\"\"\n        return self.call(\"isPasswordProtected\", {\n            \"padID\": padID\n        })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "__init__.py", "id": "d98ba176cafe9b7a1aed2b61065e9e75", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/pad/py_etherpad/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}