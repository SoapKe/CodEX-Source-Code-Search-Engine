{"author": "webpy", "code": "import unittest\nimport web\nimport tempfile\nimport os\n\nclass SessionTest(unittest.TestCase):\n    def setUp(self):\n        app = web.auto_application()\n        session = self.make_session(app)\n        class count(app.page):\n            def GET(self):\n                session.count += 1\n                return str(session.count)\n\n        class reset(app.page):\n            def GET(self):\n                session.kill()\n                return \"\"\n\n        class redirect(app.page):\n            def GET(self):\n                session.request_token = '123'\n                raise web.redirect('/count')\n\n        class get_session(app.page):\n            path = \"/session/(.*)\"\n            def GET(self, name):\n                return session[name]\n\n        self.app = app\n        self.session = session\n\n    def make_session(self, app):\n        dir = tempfile.mkdtemp()\n        store = web.session.DiskStore(tempfile.mkdtemp())\n        return web.session.Session(app, store, {'count': 0})\n\n    def testSession(self):\n        b = self.app.browser()\n        self.assertEquals(b.open('/count').read(), b'1')\n        self.assertEquals(b.open('/count').read(), b'2')\n        self.assertEquals(b.open('/count').read(), b'3')\n        b.open('/reset')\n        self.assertEquals(b.open('/count').read(), b'1')\n\n    def testParallelSessions(self):\n        b1 = self.app.browser()\n        b2 = self.app.browser()\n\n        b1.open('/count')\n\n        for i in range(1, 10):\n            self.assertEquals(b1.open('/count').read(), str(i+1).encode('utf8'))\n            self.assertEquals(b2.open('/count').read(), str(i).encode('utf8'))\n\n    def testBadSessionId(self):\n        b = self.app.browser()\n        self.assertEquals(b.open('/count').read(), b'1')\n        self.assertEquals(b.open('/count').read(), b'2')\n\n        cookie = b.cookiejar._cookies['0.0.0.0']['/']['webpy_session_id']\n        cookie.value = '/etc/password'\n        self.assertEquals(b.open('/count').read(), b'1')\n\n    def testRedirect(self):\n        b = self.app.browser()\n        b.open(\"/redirect\")\n        b.open(\"/session/request_token\")\n        self.assertEquals(b.data, b'123')\n\nclass DBSessionTest(SessionTest):\n    \n    def make_session(self, app):\n        if os.path.exists(\"webpy.db\"):\n            os.remove(\"webpy.db\")\n\n        db = web.database(dbn='sqlite', db='webpy.db')\n        \n        db.query(\"\"\n            + \"CREATE TABLE session (\"\n            + \"    session_id char(128) unique not null,\"\n            + \"    atime timestamp default (datetime('now','utc')),\"\n            + \"    data text)\"\n        )\n        store = web.session.DBStore(db, 'session')\n        return web.session.Session(app, store, {'count': 0})\n", "comments": "   session test db store       db printing   true ", "content": "import unittest\nimport web\nimport tempfile\nimport os\n\nclass SessionTest(unittest.TestCase):\n    def setUp(self):\n        app = web.auto_application()\n        session = self.make_session(app)\n        class count(app.page):\n            def GET(self):\n                session.count += 1\n                return str(session.count)\n\n        class reset(app.page):\n            def GET(self):\n                session.kill()\n                return \"\"\n\n        class redirect(app.page):\n            def GET(self):\n                session.request_token = '123'\n                raise web.redirect('/count')\n\n        class get_session(app.page):\n            path = \"/session/(.*)\"\n            def GET(self, name):\n                return session[name]\n\n        self.app = app\n        self.session = session\n\n    def make_session(self, app):\n        dir = tempfile.mkdtemp()\n        store = web.session.DiskStore(tempfile.mkdtemp())\n        return web.session.Session(app, store, {'count': 0})\n\n    def testSession(self):\n        b = self.app.browser()\n        self.assertEquals(b.open('/count').read(), b'1')\n        self.assertEquals(b.open('/count').read(), b'2')\n        self.assertEquals(b.open('/count').read(), b'3')\n        b.open('/reset')\n        self.assertEquals(b.open('/count').read(), b'1')\n\n    def testParallelSessions(self):\n        b1 = self.app.browser()\n        b2 = self.app.browser()\n\n        b1.open('/count')\n\n        for i in range(1, 10):\n            self.assertEquals(b1.open('/count').read(), str(i+1).encode('utf8'))\n            self.assertEquals(b2.open('/count').read(), str(i).encode('utf8'))\n\n    def testBadSessionId(self):\n        b = self.app.browser()\n        self.assertEquals(b.open('/count').read(), b'1')\n        self.assertEquals(b.open('/count').read(), b'2')\n\n        cookie = b.cookiejar._cookies['0.0.0.0']['/']['webpy_session_id']\n        cookie.value = '/etc/password'\n        self.assertEquals(b.open('/count').read(), b'1')\n\n    def testRedirect(self):\n        b = self.app.browser()\n        b.open(\"/redirect\")\n        b.open(\"/session/request_token\")\n        self.assertEquals(b.data, b'123')\n\nclass DBSessionTest(SessionTest):\n    \"\"\"Session test with db store.\"\"\"\n    def make_session(self, app):\n        if os.path.exists(\"webpy.db\"):\n            os.remove(\"webpy.db\")\n\n        db = web.database(dbn='sqlite', db='webpy.db')\n        #db.printing = True\n        db.query(\"\"\n            + \"CREATE TABLE session (\"\n            + \"    session_id char(128) unique not null,\"\n            + \"    atime timestamp default (datetime('now','utc')),\"\n            + \"    data text)\"\n        )\n        store = web.session.DBStore(db, 'session')\n        return web.session.Session(app, store, {'count': 0})\n", "description": "web.py is a web framework for python that is as simple as it is powerful. ", "file_name": "test_session.py", "id": "3e0ebbca096d966e25363f612c74b11d", "language": "Python", "project_name": "webpy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/webpy-webpy/webpy-webpy-817c979/tests/test_session.py", "save_time": "", "source": "", "update_at": "2018-03-16T08:06:22Z", "url": "https://github.com/webpy/webpy", "wiki": false}