{"author": "ansible", "code": "\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_protocol\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxProtocolModule(TestOnyxModule):\n\n    module = onyx_protocol\n\n    def setUp(self):\n        super(TestOnyxProtocolModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_protocol.OnyxProtocolModule,\n            \"_get_protocols\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_get_ip_config = patch.object(\n            onyx_protocol.OnyxProtocolModule,\n            \"_get_ip_routing\")\n        self.get_ip_config = self.mock_get_ip_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxProtocolModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        config_file = 'onyx_protocols_show.cfg'\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n        self.get_ip_config.return_value = \"IP routing: enabled\"\n\n    def test_mlag_enable(self):\n        set_module_args(dict(mlag='enabled'))\n        commands = ['protocol mlag']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_disable(self):\n        set_module_args(dict(mlag='disabled'))\n        self.execute_module(changed=False)\n\n    def test_magp_enable(self):\n        set_module_args(dict(magp='enabled'))\n        commands = ['protocol magp']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_disable(self):\n        set_module_args(dict(magp='disabled'))\n        self.execute_module(changed=False)\n\n    def test_spanning_tree_enable(self):\n        set_module_args(dict(spanning_tree='enabled'))\n        self.execute_module(changed=False)\n\n    def test_spanning_tree_disable(self):\n        set_module_args(dict(spanning_tree='disabled'))\n        commands = ['no spanning-tree']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_dcb_pfc_enable(self):\n        set_module_args(dict(dcb_pfc='enabled'))\n        commands = ['dcb priority-flow-control enable force']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_dcb_pfc_disable(self):\n        set_module_args(dict(dcb_pfc='disabled'))\n        self.execute_module(changed=False)\n\n    def test_igmp_snooping_enable(self):\n        set_module_args(dict(igmp_snooping='enabled'))\n        commands = ['ip igmp snooping']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_igmp_snooping_disable(self):\n        set_module_args(dict(igmp_snooping='disabled'))\n        self.execute_module(changed=False)\n\n    def test_lacp_enable(self):\n        set_module_args(dict(lacp='enabled'))\n        commands = ['lacp']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_lacp_disable(self):\n        set_module_args(dict(lacp='disabled'))\n        self.execute_module(changed=False)\n\n    def test_ip_routing_enable(self):\n        set_module_args(dict(ip_routing='enabled'))\n        self.execute_module(changed=False)\n\n    def test_ip_routing_disable(self):\n        set_module_args(dict(ip_routing='disabled'))\n        commands = ['no ip routing']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_lldp_enable(self):\n        set_module_args(dict(lldp='enabled'))\n        commands = ['lldp']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_lldp_disable(self):\n        set_module_args(dict(lldp='disabled'))\n        self.execute_module(changed=False)\n\n    def test_bgp_enable(self):\n        set_module_args(dict(bgp='enabled'))\n        commands = ['protocol bgp']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_bgp_disable(self):\n        set_module_args(dict(bgp='disabled'))\n        self.execute_module(changed=False)\n\n    def test_ospf_enable(self):\n        set_module_args(dict(ospf='enabled'))\n        commands = ['protocol ospf']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_ospf_disable(self):\n        set_module_args(dict(ospf='disabled'))\n        self.execute_module(changed=False)\n", "comments": "     copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish ", "content": "#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_protocol\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxProtocolModule(TestOnyxModule):\n\n    module = onyx_protocol\n\n    def setUp(self):\n        super(TestOnyxProtocolModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_protocol.OnyxProtocolModule,\n            \"_get_protocols\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_get_ip_config = patch.object(\n            onyx_protocol.OnyxProtocolModule,\n            \"_get_ip_routing\")\n        self.get_ip_config = self.mock_get_ip_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxProtocolModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        config_file = 'onyx_protocols_show.cfg'\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n        self.get_ip_config.return_value = \"IP routing: enabled\"\n\n    def test_mlag_enable(self):\n        set_module_args(dict(mlag='enabled'))\n        commands = ['protocol mlag']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_disable(self):\n        set_module_args(dict(mlag='disabled'))\n        self.execute_module(changed=False)\n\n    def test_magp_enable(self):\n        set_module_args(dict(magp='enabled'))\n        commands = ['protocol magp']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_magp_disable(self):\n        set_module_args(dict(magp='disabled'))\n        self.execute_module(changed=False)\n\n    def test_spanning_tree_enable(self):\n        set_module_args(dict(spanning_tree='enabled'))\n        self.execute_module(changed=False)\n\n    def test_spanning_tree_disable(self):\n        set_module_args(dict(spanning_tree='disabled'))\n        commands = ['no spanning-tree']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_dcb_pfc_enable(self):\n        set_module_args(dict(dcb_pfc='enabled'))\n        commands = ['dcb priority-flow-control enable force']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_dcb_pfc_disable(self):\n        set_module_args(dict(dcb_pfc='disabled'))\n        self.execute_module(changed=False)\n\n    def test_igmp_snooping_enable(self):\n        set_module_args(dict(igmp_snooping='enabled'))\n        commands = ['ip igmp snooping']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_igmp_snooping_disable(self):\n        set_module_args(dict(igmp_snooping='disabled'))\n        self.execute_module(changed=False)\n\n    def test_lacp_enable(self):\n        set_module_args(dict(lacp='enabled'))\n        commands = ['lacp']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_lacp_disable(self):\n        set_module_args(dict(lacp='disabled'))\n        self.execute_module(changed=False)\n\n    def test_ip_routing_enable(self):\n        set_module_args(dict(ip_routing='enabled'))\n        self.execute_module(changed=False)\n\n    def test_ip_routing_disable(self):\n        set_module_args(dict(ip_routing='disabled'))\n        commands = ['no ip routing']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_lldp_enable(self):\n        set_module_args(dict(lldp='enabled'))\n        commands = ['lldp']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_lldp_disable(self):\n        set_module_args(dict(lldp='disabled'))\n        self.execute_module(changed=False)\n\n    def test_bgp_enable(self):\n        set_module_args(dict(bgp='enabled'))\n        commands = ['protocol bgp']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_bgp_disable(self):\n        set_module_args(dict(bgp='disabled'))\n        self.execute_module(changed=False)\n\n    def test_ospf_enable(self):\n        set_module_args(dict(ospf='enabled'))\n        commands = ['protocol ospf']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_ospf_disable(self):\n        set_module_args(dict(ospf='disabled'))\n        self.execute_module(changed=False)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_onyx_protocols.py", "id": "1cb5e9f10decd8fc5823146c435d6d72", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/onyx/test_onyx_protocols.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}