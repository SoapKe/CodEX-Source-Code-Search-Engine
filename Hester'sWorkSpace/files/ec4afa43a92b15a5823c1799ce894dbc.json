{"author": "littlecodersh", "code": "import requests\n\nfrom . import storage\nfrom .components import load_components\n\nclass Core(object):\n    def __init__(self):\n        ''' init is the only method defined in core.py\n            alive is value showing whether core is running\n                - you should call logout method to change it\n                - after logout, a core object can login again\n            storageClass only uses basic python types\n                - so for advanced uses, inherit it yourself\n            receivingRetryCount is for receiving loop retry\n                - it's 5 now, but actually even 1 is enough\n                - failing is failing\n        '''\n        self.alive, self.isLogging = False, False\n        self.storageClass = storage.Storage(self)\n        self.memberList = self.storageClass.memberList\n        self.mpList = self.storageClass.mpList\n        self.chatroomList = self.storageClass.chatroomList\n        self.msgList = self.storageClass.msgList\n        self.loginInfo = {}\n        self.s = requests.Session()\n        self.uuid = None\n        self.functionDict = {'FriendChat': {}, 'GroupChat': {}, 'MpChat': {}}\n        self.useHotReload, self.hotReloadDir = False, 'itchat.pkl'\n        self.receivingRetryCount = 5\n    def login(self, enableCmdQR=False, picDir=None, qrCallback=None,\n            loginCallback=None, exitCallback=None):\n        ''' log in like web wechat does\n            for log in\n                - a QR code will be downloaded and opened\n                - then scanning status is logged, it paused for you confirm\n                - finally it logged in and show your nickName\n            for options\n                - enableCmdQR: show qrcode in command line\n                    - integers can be used to fit strange char length\n                - picDir: place for storing qrcode\n                - qrCallback: method that should accept uuid, status, qrcode\n                - loginCallback: callback after successfully logged in\n                    - if not set, screen is cleared and qrcode is deleted\n                - exitCallback: callback after logged out\n                    - it contains calling of logout\n            for usage\n                ..code::python\n\n                    import itchat\n                    itchat.login()\n\n            it is defined in components/login.py\n            and of course every single move in login can be called outside\n                - you may scan source code to see how\n                - and modified according to your own demand\n        '''\n        raise NotImplementedError()\n    def get_QRuuid(self):\n        ''' get uuid for qrcode\n            uuid is the symbol of qrcode\n                - for logging in, you need to get a uuid first\n                - for downloading qrcode, you need to pass uuid to it\n                - for checking login status, uuid is also required\n            if uuid has timed out, just get another\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def get_QR(self, uuid=None, enableCmdQR=False, picDir=None, qrCallback=None):\n        ''' download and show qrcode\n            for options\n                - uuid: if uuid is not set, latest uuid you fetched will be used\n                - enableCmdQR: show qrcode in cmd\n                - picDir: where to store qrcode\n                - qrCallback: method that should accept uuid, status, qrcode\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def check_login(self, uuid=None):\n        ''' check login status\n            for options:\n                - uuid: if uuid is not set, latest uuid you fetched will be used\n            for return values:\n                - a string will be returned\n                - for meaning of return values\n                    - 200: log in successfully\n                    - 201: waiting for press confirm\n                    - 408: uuid timed out\n                    - 0  : unknown error\n            for processing:\n                - syncUrl and fileUrl is set\n                - BaseRequest is set\n            blocks until reaches any of above status\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def web_init(self):\n        ''' get info necessary for initializing\n            for processing:\n                - own account info is set\n                - inviteStartCount is set\n                - syncKey is set\n                - part of contact is fetched\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def show_mobile_login(self):\n        ''' show web wechat login sign\n            the sign is on the top of mobile phone wechat\n            sign will be added after sometime even without calling this function\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def start_receiving(self, exitCallback=None, getReceivingFnOnly=False):\n        ''' open a thread for heart loop and receiving messages\n            for options:\n                - exitCallback: callback after logged out\n                    - it contains calling of logout\n                - getReceivingFnOnly: if True thread will not be created and started. Instead, receive fn will be returned.\n            for processing:\n                - messages: msgs are formatted and passed on to registered fns\n                - contact : chatrooms are updated when related info is received\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def get_msg(self):\n        ''' fetch messages\n            for fetching\n                - method blocks for sometime until\n                    - new messages are to be received\n                    - or anytime they like\n                - synckey is updated with returned synccheckkey\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def logout(self):\n        ''' logout\n            if core is now alive\n                logout will tell wechat backstage to logout\n            and core gets ready for another login\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def update_chatroom(self, userName, detailedMember=False):\n        ''' update chatroom\n            for chatroom contact\n                - a chatroom contact need updating to be detailed\n                - detailed means members, encryid, etc\n                - auto updating of heart loop is a more detailed updating\n                    - member uin will also be filled\n                - once called, updated info will be stored\n            for options\n                - userName: 'UserName' key of chatroom or a list of it\n                - detailedMember: whether to get members of contact\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def update_friend(self, userName):\n        ''' update chatroom\n            for friend contact\n                - once called, updated info will be stored\n            for options\n                - userName: 'UserName' key of a friend or a list of it\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_contact(self, update=False):\n        ''' fetch part of contact\n            for part\n                - all the massive platforms and friends are fetched\n                - if update, only starred chatrooms are fetched\n            for options\n                - update: if not set, local value will be returned\n            for results\n                - chatroomList will be returned\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_friends(self, update=False):\n        ''' fetch friends list\n            for options\n                - update: if not set, local value will be returned\n            for results\n                - a list of friends' info dicts will be returned\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_chatrooms(self, update=False, contactOnly=False):\n        ''' fetch chatrooms list\n            for options\n                - update: if not set, local value will be returned\n                - contactOnly: if set, only starred chatrooms will be returned\n            for results\n                - a list of chatrooms' info dicts will be returned\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_mps(self, update=False):\n        ''' fetch massive platforms list\n            for options\n                - update: if not set, local value will be returned\n            for results\n                - a list of platforms' info dicts will be returned\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def set_alias(self, userName, alias):\n        ''' set alias for a friend\n            for options\n                - userName: 'UserName' key of info dict\n                - alias: new alias\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def set_pinned(self, userName, isPinned=True):\n        ''' set pinned for a friend or a chatroom\n            for options\n                - userName: 'UserName' key of info dict\n                - isPinned: whether to pin\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def add_friend(self, userName, status=2, verifyContent='', autoUpdate=True):\n        ''' add a friend or accept a friend\n            for options\n                - userName: 'UserName' for friend's info dict\n                - status:\n                    - for adding status should be 2\n                    - for accepting status should be 3\n                - ticket: greeting message\n                - userInfo: friend's other info for adding into local storage\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_head_img(self, userName=None, chatroomUserName=None, picDir=None):\n        ''' place for docs\n            for options\n                - if you want to get chatroom header: only set chatroomUserName\n                - if you want to get friend header: only set userName\n                - if you want to get chatroom member header: set both\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def create_chatroom(self, memberList, topic=''):\n        ''' create a chatroom\n            for creating\n                - its calling frequency is strictly limited\n            for options\n                - memberList: list of member info dict\n                - topic: topic of new chatroom\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def set_chatroom_name(self, chatroomUserName, name):\n        ''' set chatroom name\n            for setting\n                - it makes an updating of chatroom\n                - which means detailed info will be returned in heart loop\n            for options\n                - chatroomUserName: 'UserName' key of chatroom info dict\n                - name: new chatroom name\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def delete_member_from_chatroom(self, chatroomUserName, memberList):\n        ''' deletes members from chatroom\n            for deleting\n                - you can't delete yourself\n                - if so, no one will be deleted\n                - strict-limited frequency\n            for options\n                - chatroomUserName: 'UserName' key of chatroom info dict\n                - memberList: list of members' info dict\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def add_member_into_chatroom(self, chatroomUserName, memberList,\n            useInvitation=False):\n        ''' add members into chatroom\n            for adding\n                - you can't add yourself or member already in chatroom\n                - if so, no one will be added\n                - if member will over 40 after adding, invitation must be used\n                - strict-limited frequency\n            for options\n                - chatroomUserName: 'UserName' key of chatroom info dict\n                - memberList: list of members' info dict\n                - useInvitation: if invitation is not required, set this to use\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def send_raw_msg(self, msgType, content, toUserName):\n        ''' many messages are sent in a common way\n            for demo\n                .. code:: python\n\n                    @itchat.msg_register(itchat.content.CARD)\n                    def reply(msg):\n                        itchat.send_raw_msg(msg['MsgType'], msg['Content'], msg['FromUserName'])\n\n            there are some little tricks here, you may discover them yourself\n            but remember they are tricks\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send_msg(self, msg='Test Message', toUserName=None):\n        ''' send plain text message\n            for options\n                - msg: should be unicode if there's non-ascii words in msg\n                - toUserName: 'UserName' key of friend dict\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def upload_file(self, fileDir, isPicture=False, isVideo=False,\n            toUserName='filehelper', file_=None, preparedFile=None):\n        ''' upload file to server and get mediaId\n            for options\n                - fileDir: dir for file ready for upload\n                - isPicture: whether file is a picture\n                - isVideo: whether file is a video\n            for return values\n                will return a ReturnValue\n                if succeeded, mediaId is in r['MediaId']\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send_file(self, fileDir, toUserName=None, mediaId=None, file_=None):\n        ''' send attachment\n            for options\n                - fileDir: dir for file ready for upload\n                - mediaId: mediaId for file. \n                    - if set, file will not be uploaded twice\n                - toUserName: 'UserName' key of friend dict\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send_image(self, fileDir=None, toUserName=None, mediaId=None, file_=None):\n        ''' send image\n            for options\n                - fileDir: dir for file ready for upload\n                    - if it's a gif, name it like 'xx.gif'\n                - mediaId: mediaId for file. \n                    - if set, file will not be uploaded twice\n                - toUserName: 'UserName' key of friend dict\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send_video(self, fileDir=None, toUserName=None, mediaId=None, file_=None):\n        ''' send video\n            for options\n                - fileDir: dir for file ready for upload\n                    - if mediaId is set, it's unnecessary to set fileDir\n                - mediaId: mediaId for file. \n                    - if set, file will not be uploaded twice\n                - toUserName: 'UserName' key of friend dict\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send(self, msg, toUserName=None, mediaId=None):\n        ''' wrapped function for all the sending functions\n            for options\n                - msg: message starts with different string indicates different type\n                    - list of type string: ['@fil@', '@img@', '@msg@', '@vid@']\n                    - they are for file, image, plain text, video\n                    - if none of them matches, it will be sent like plain text\n                - toUserName: 'UserName' key of friend dict\n                - mediaId: if set, uploading will not be repeated\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def revoke(self, msgId, toUserName, localId=None):\n        ''' revoke message with its and msgId\n            for options\n                - msgId: message Id on server\n                - toUserName: 'UserName' key of friend dict\n                - localId: message Id at local (optional)\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def dump_login_status(self, fileDir=None):\n        ''' dump login status to a specific file\n            for option\n                - fileDir: dir for dumping login status\n            it is defined in components/hotreload.py\n        '''\n        raise NotImplementedError()\n    def load_login_status(self, fileDir,\n            loginCallback=None, exitCallback=None):\n        ''' load login status from a specific file\n            for option\n                - fileDir: file for loading login status\n                - loginCallback: callback after successfully logged in\n                    - if not set, screen is cleared and qrcode is deleted\n                - exitCallback: callback after logged out\n                    - it contains calling of logout\n            it is defined in components/hotreload.py\n        '''\n        raise NotImplementedError()\n    def auto_login(self, hotReload=False, statusStorageDir='itchat.pkl',\n            enableCmdQR=False, picDir=None, qrCallback=None,\n            loginCallback=None, exitCallback=None):\n        ''' log in like web wechat does\n            for log in\n                - a QR code will be downloaded and opened\n                - then scanning status is logged, it paused for you confirm\n                - finally it logged in and show your nickName\n            for options\n                - hotReload: enable hot reload\n                - statusStorageDir: dir for storing log in status\n                - enableCmdQR: show qrcode in command line\n                    - integers can be used to fit strange char length\n                - picDir: place for storing qrcode\n                - loginCallback: callback after successfully logged in\n                    - if not set, screen is cleared and qrcode is deleted\n                - exitCallback: callback after logged out\n                    - it contains calling of logout\n                - qrCallback: method that should accept uuid, status, qrcode\n            for usage\n                ..code::python\n\n                    import itchat\n                    itchat.auto_login()\n\n            it is defined in components/register.py\n            and of course every single move in login can be called outside\n                - you may scan source code to see how\n                - and modified according to your own demond\n        '''\n        raise NotImplementedError()\n    def configured_reply(self):\n        ''' determine the type of message and reply if its method is defined\n            however, I use a strange way to determine whether a msg is from massive platform\n            I haven't found a better solution here\n            The main problem I'm worrying about is the mismatching of new friends added on phone\n            If you have any good idea, pleeeease report an issue. I will be more than grateful.\n        '''\n        raise NotImplementedError()\n    def msg_register(self, msgType,\n            isFriendChat=False, isGroupChat=False, isMpChat=False):\n        ''' a decorator constructor\n            return a specific decorator based on information given\n        '''\n        raise NotImplementedError()\n    def run(self, debug=True, blockThread=True):\n        ''' start auto respond\n            for option\n                - debug: if set, debug info will be shown on screen\n            it is defined in components/register.py\n        '''\n        raise NotImplementedError()\n    def search_friends(self, name=None, userName=None, remarkName=None, nickName=None,\n            wechatAccount=None):\n        return self.storageClass.search_friends(name, userName, remarkName,\n            nickName, wechatAccount)\n    def search_chatrooms(self, name=None, userName=None):\n        return self.storageClass.search_chatrooms(name, userName)\n    def search_mps(self, name=None, userName=None):\n        return self.storageClass.search_mps(name, userName)\n\nload_components(Core)\n", "comments": "    init method defined core py             alive value showing whether core running                   call logout method change                   logout  core object login             storageclass uses basic python types                   advanced uses  inherit             receivingretrycount receiving loop retry                   5  actually even 1 enough                   failing failing                     self alive  self islogging   false  false         self storageclass   storage storage(self)         self memberlist   self storageclass memberlist         self mplist   self storageclass mplist         self chatroomlist   self storageclass chatroomlist         self msglist   self storageclass msglist         self logininfo              self   requests session()         self uuid   none         self functiondict     friendchat        groupchat        mpchat               self usehotreload  self hotreloaddir   false   itchat pkl          self receivingretrycount   5     def login(self  enablecmdqr false  picdir none  qrcallback none              logincallback none  exitcallback none)              log like web wechat             log                   qr code downloaded opened                   scanning status logged  paused confirm                   finally logged show nickname             options                   enablecmdqr  show qrcode command line                       integers used fit strange char length                   picdir  place storing qrcode                   qrcallback  method accept uuid  status  qrcode                   logincallback  callback successfully logged                       set  screen cleared qrcode deleted                   exitcallback  callback logged                       contains calling logout             usage                   code  python                      import itchat                     itchat login()              defined components login py             course every single move login called outside                   may scan source code see                   modified according demand                     raise notimplementederror()     def get qruuid(self)              get uuid qrcode             uuid symbol qrcode                   logging  need get uuid first                   downloading qrcode  need pass uuid                   checking login status  uuid also required             uuid timed  get another             defined components login py                     raise notimplementederror()     def get qr(self  uuid none  enablecmdqr false  picdir none  qrcallback none)              download show qrcode             options                   uuid  uuid set  latest uuid fetched used                   enablecmdqr  show qrcode cmd                   picdir  store qrcode                   qrcallback  method accept uuid  status  qrcode             defined components login py                     raise notimplementederror()     def check login(self  uuid none)              check login status             options                    uuid  uuid set  latest uuid fetched used             return values                    string returned                   meaning return values                       200  log successfully                       201  waiting press confirm                       408  uuid timed                       0    unknown error             processing                    syncurl fileurl set                   baserequest set             blocks reaches status             defined components login py                     raise notimplementederror()     def web init(self)              get info necessary initializing             processing                    account info set                   invitestartcount set                   synckey set                   part contact fetched             defined components login py                     raise notimplementederror()     def show mobile login(self)              show web wechat login sign             sign top mobile phone wechat             sign added sometime even without calling function             defined components login py                     raise notimplementederror()     def start receiving(self  exitcallback none  getreceivingfnonly false)              open thread heart loop receiving messages             options                    exitcallback  callback logged                       contains calling logout                   getreceivingfnonly  true thread created started  instead  receive fn returned              processing                    messages  msgs formatted passed registered fns                   contact   chatrooms updated related info received             defined components login py                     raise notimplementederror()     def get msg(self)              fetch messages             fetching                   method blocks sometime                       new messages received                       anytime like                   synckey updated returned synccheckkey             defined components login py                     raise notimplementederror()     def logout(self)              logout             core alive                 logout tell wechat backstage logout             core gets ready another login             defined components login py                     raise notimplementederror()     def update chatroom(self  username  detailedmember false)              update chatroom             chatroom contact                   chatroom contact need updating detailed                   detailed means members  encryid  etc                   auto updating heart loop detailed updating                       member uin also filled                   called  updated info stored             options                   username   username  key chatroom list                   detailedmember  whether get members contact             defined components contact py                     raise notimplementederror()     def update friend(self  username)              update chatroom             friend contact                   called  updated info stored             options                   username   username  key friend list             defined components contact py                     raise notimplementederror()     def get contact(self  update false)              fetch part contact             part                   massive platforms friends fetched                   update  starred chatrooms fetched             options                   update  set  local value returned             results                   chatroomlist returned             defined components contact py                     raise notimplementederror()     def get friends(self  update false)              fetch friends list             options                   update  set  local value returned             results                   list friends  info dicts returned             defined components contact py                     raise notimplementederror()     def get chatrooms(self  update false  contactonly false)              fetch chatrooms list             options                   update  set  local value returned                   contactonly  set  starred chatrooms returned             results                   list chatrooms  info dicts returned             defined components contact py                     raise notimplementederror()     def get mps(self  update false)              fetch massive platforms list             options                   update  set  local value returned             results                   list platforms  info dicts returned             defined components contact py                     raise notimplementederror()     def set alias(self  username  alias)              set alias friend             options                   username   username  key info dict                   alias  new alias             defined components contact py                     raise notimplementederror()     def set pinned(self  username  ispinned true)              set pinned friend chatroom             options                   username   username  key info dict                   ispinned  whether pin             defined components contact py                     raise notimplementederror()     def add friend(self  username  status 2  verifycontent     autoupdate true)              add friend accept friend             options                   username   username  friend info dict                   status                        adding status 2                       accepting status 3                   ticket  greeting message                   userinfo  friend info adding local storage             defined components contact py                     raise notimplementederror()     def get head img(self  username none  chatroomusername none  picdir none)              place docs             options                   want get chatroom header  set chatroomusername                   want get friend header  set username                   want get chatroom member header  set             defined components contact py                     raise notimplementederror()     def create chatroom(self  memberlist  topic   )              create chatroom             creating                   calling frequency strictly limited             options                   memberlist  list member info dict                   topic  topic new chatroom             defined components contact py                     raise notimplementederror()     def set chatroom name(self  chatroomusername  name)              set chatroom name             setting                   makes updating chatroom                   means detailed info returned heart loop             options                   chatroomusername   username  key chatroom info dict                   name  new chatroom name             defined components contact py                     raise notimplementederror()     def delete member chatroom(self  chatroomusername  memberlist)              deletes members chatroom             deleting                   delete                    one deleted                   strict limited frequency             options                   chatroomusername   username  key chatroom info dict                   memberlist  list members  info dict             defined components contact py                     raise notimplementederror()     def add member chatroom(self  chatroomusername  memberlist              useinvitation false)              add members chatroom             adding                   add member already chatroom                    one added                   member 40 adding  invitation must used                   strict limited frequency             options                   chatroomusername   username  key chatroom info dict                   memberlist  list members  info dict                   useinvitation  invitation required  set use             defined components contact py                     raise notimplementederror()     def send raw msg(self  msgtype  content  tousername)              many messages sent common way             demo                    code   python                       itchat msg register(itchat content card)                     def reply(msg)                          itchat send raw msg(msg  msgtype    msg  content    msg  fromusername  )              little tricks  may discover             remember tricks             defined components messages py                     raise notimplementederror()     def send msg(self  msg  test message   tousername none)              send plain text message             options                   msg  unicode non ascii words msg                   tousername   username  key friend dict             defined components messages py                     raise notimplementederror()     def upload file(self  filedir  ispicture false  isvideo false              tousername  filehelper   file  none  preparedfile none)              upload file server get mediaid             options                   filedir  dir file ready upload                   ispicture  whether file picture                   isvideo  whether file video             return values                 return returnvalue                 succeeded  mediaid r  mediaid               defined components messages py                     raise notimplementederror()     def send file(self  filedir  tousername none  mediaid none  file  none)              send attachment             options                   filedir  dir file ready upload                   mediaid  mediaid file                         set  file uploaded twice                   tousername   username  key friend dict             defined components messages py                     raise notimplementederror()     def send image(self  filedir none  tousername none  mediaid none  file  none)              send image             options                   filedir  dir file ready upload                       gif  name like  xx gif                    mediaid  mediaid file                         set  file uploaded twice                   tousername   username  key friend dict             defined components messages py                     raise notimplementederror()     def send video(self  filedir none  tousername none  mediaid none  file  none)              send video             options                   filedir  dir file ready upload                       mediaid set  unnecessary set filedir                   mediaid  mediaid file                         set  file uploaded twice                   tousername   username  key friend dict             defined components messages py                     raise notimplementederror()     def send(self  msg  tousername none  mediaid none)              wrapped function sending functions             options                   msg  message starts different string indicates different type                       list type string     fil      img      msg      vid                          file  image  plain text  video                       none matches  sent like plain text                   tousername   username  key friend dict                   mediaid  set  uploading repeated             defined components messages py                     raise notimplementederror()     def revoke(self  msgid  tousername  localid none)              revoke message msgid             options                   msgid  message id server                   tousername   username  key friend dict                   localid  message id local (optional)             defined components messages py                     raise notimplementederror()     def dump login status(self  filedir none)              dump login status specific file             option                   filedir  dir dumping login status             defined components hotreload py                     raise notimplementederror()     def load login status(self  filedir              logincallback none  exitcallback none)              load login status specific file             option                   filedir  file loading login status                   logincallback  callback successfully logged                       set  screen cleared qrcode deleted                   exitcallback  callback logged                       contains calling logout             defined components hotreload py                     raise notimplementederror()     def auto login(self  hotreload false  statusstoragedir  itchat pkl               enablecmdqr false  picdir none  qrcallback none              logincallback none  exitcallback none)              log like web wechat             log                   qr code downloaded opened                   scanning status logged  paused confirm                   finally logged show nickname             options                   hotreload  enable hot reload                   statusstoragedir  dir storing log status                   enablecmdqr  show qrcode command line                       integers used fit strange char length                   picdir  place storing qrcode                   logincallback  callback successfully logged                       set  screen cleared qrcode deleted                   exitcallback  callback logged                       contains calling logout                   qrcallback  method accept uuid  status  qrcode             usage                   code  python                      import itchat                     itchat auto login()              defined components register py             course every single move login called outside                   may scan source code see                   modified according demond                     raise notimplementederror()     def configured reply(self)              determine type message reply method defined             however  i use strange way determine whether msg massive platform             i found better solution             the main problem i worrying mismatching new friends added phone             if good idea  pleeeease report issue  i grateful                      raise notimplementederror()     def msg register(self  msgtype              isfriendchat false  isgroupchat false  ismpchat false)              decorator constructor             return specific decorator based information given                     raise notimplementederror()     def run(self  debug true  blockthread true)              start auto respond             option                   debug  set  debug info shown screen             defined components register py             ", "content": "import requests\n\nfrom . import storage\nfrom .components import load_components\n\nclass Core(object):\n    def __init__(self):\n        ''' init is the only method defined in core.py\n            alive is value showing whether core is running\n                - you should call logout method to change it\n                - after logout, a core object can login again\n            storageClass only uses basic python types\n                - so for advanced uses, inherit it yourself\n            receivingRetryCount is for receiving loop retry\n                - it's 5 now, but actually even 1 is enough\n                - failing is failing\n        '''\n        self.alive, self.isLogging = False, False\n        self.storageClass = storage.Storage(self)\n        self.memberList = self.storageClass.memberList\n        self.mpList = self.storageClass.mpList\n        self.chatroomList = self.storageClass.chatroomList\n        self.msgList = self.storageClass.msgList\n        self.loginInfo = {}\n        self.s = requests.Session()\n        self.uuid = None\n        self.functionDict = {'FriendChat': {}, 'GroupChat': {}, 'MpChat': {}}\n        self.useHotReload, self.hotReloadDir = False, 'itchat.pkl'\n        self.receivingRetryCount = 5\n    def login(self, enableCmdQR=False, picDir=None, qrCallback=None,\n            loginCallback=None, exitCallback=None):\n        ''' log in like web wechat does\n            for log in\n                - a QR code will be downloaded and opened\n                - then scanning status is logged, it paused for you confirm\n                - finally it logged in and show your nickName\n            for options\n                - enableCmdQR: show qrcode in command line\n                    - integers can be used to fit strange char length\n                - picDir: place for storing qrcode\n                - qrCallback: method that should accept uuid, status, qrcode\n                - loginCallback: callback after successfully logged in\n                    - if not set, screen is cleared and qrcode is deleted\n                - exitCallback: callback after logged out\n                    - it contains calling of logout\n            for usage\n                ..code::python\n\n                    import itchat\n                    itchat.login()\n\n            it is defined in components/login.py\n            and of course every single move in login can be called outside\n                - you may scan source code to see how\n                - and modified according to your own demand\n        '''\n        raise NotImplementedError()\n    def get_QRuuid(self):\n        ''' get uuid for qrcode\n            uuid is the symbol of qrcode\n                - for logging in, you need to get a uuid first\n                - for downloading qrcode, you need to pass uuid to it\n                - for checking login status, uuid is also required\n            if uuid has timed out, just get another\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def get_QR(self, uuid=None, enableCmdQR=False, picDir=None, qrCallback=None):\n        ''' download and show qrcode\n            for options\n                - uuid: if uuid is not set, latest uuid you fetched will be used\n                - enableCmdQR: show qrcode in cmd\n                - picDir: where to store qrcode\n                - qrCallback: method that should accept uuid, status, qrcode\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def check_login(self, uuid=None):\n        ''' check login status\n            for options:\n                - uuid: if uuid is not set, latest uuid you fetched will be used\n            for return values:\n                - a string will be returned\n                - for meaning of return values\n                    - 200: log in successfully\n                    - 201: waiting for press confirm\n                    - 408: uuid timed out\n                    - 0  : unknown error\n            for processing:\n                - syncUrl and fileUrl is set\n                - BaseRequest is set\n            blocks until reaches any of above status\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def web_init(self):\n        ''' get info necessary for initializing\n            for processing:\n                - own account info is set\n                - inviteStartCount is set\n                - syncKey is set\n                - part of contact is fetched\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def show_mobile_login(self):\n        ''' show web wechat login sign\n            the sign is on the top of mobile phone wechat\n            sign will be added after sometime even without calling this function\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def start_receiving(self, exitCallback=None, getReceivingFnOnly=False):\n        ''' open a thread for heart loop and receiving messages\n            for options:\n                - exitCallback: callback after logged out\n                    - it contains calling of logout\n                - getReceivingFnOnly: if True thread will not be created and started. Instead, receive fn will be returned.\n            for processing:\n                - messages: msgs are formatted and passed on to registered fns\n                - contact : chatrooms are updated when related info is received\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def get_msg(self):\n        ''' fetch messages\n            for fetching\n                - method blocks for sometime until\n                    - new messages are to be received\n                    - or anytime they like\n                - synckey is updated with returned synccheckkey\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def logout(self):\n        ''' logout\n            if core is now alive\n                logout will tell wechat backstage to logout\n            and core gets ready for another login\n            it is defined in components/login.py\n        '''\n        raise NotImplementedError()\n    def update_chatroom(self, userName, detailedMember=False):\n        ''' update chatroom\n            for chatroom contact\n                - a chatroom contact need updating to be detailed\n                - detailed means members, encryid, etc\n                - auto updating of heart loop is a more detailed updating\n                    - member uin will also be filled\n                - once called, updated info will be stored\n            for options\n                - userName: 'UserName' key of chatroom or a list of it\n                - detailedMember: whether to get members of contact\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def update_friend(self, userName):\n        ''' update chatroom\n            for friend contact\n                - once called, updated info will be stored\n            for options\n                - userName: 'UserName' key of a friend or a list of it\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_contact(self, update=False):\n        ''' fetch part of contact\n            for part\n                - all the massive platforms and friends are fetched\n                - if update, only starred chatrooms are fetched\n            for options\n                - update: if not set, local value will be returned\n            for results\n                - chatroomList will be returned\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_friends(self, update=False):\n        ''' fetch friends list\n            for options\n                - update: if not set, local value will be returned\n            for results\n                - a list of friends' info dicts will be returned\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_chatrooms(self, update=False, contactOnly=False):\n        ''' fetch chatrooms list\n            for options\n                - update: if not set, local value will be returned\n                - contactOnly: if set, only starred chatrooms will be returned\n            for results\n                - a list of chatrooms' info dicts will be returned\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_mps(self, update=False):\n        ''' fetch massive platforms list\n            for options\n                - update: if not set, local value will be returned\n            for results\n                - a list of platforms' info dicts will be returned\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def set_alias(self, userName, alias):\n        ''' set alias for a friend\n            for options\n                - userName: 'UserName' key of info dict\n                - alias: new alias\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def set_pinned(self, userName, isPinned=True):\n        ''' set pinned for a friend or a chatroom\n            for options\n                - userName: 'UserName' key of info dict\n                - isPinned: whether to pin\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def add_friend(self, userName, status=2, verifyContent='', autoUpdate=True):\n        ''' add a friend or accept a friend\n            for options\n                - userName: 'UserName' for friend's info dict\n                - status:\n                    - for adding status should be 2\n                    - for accepting status should be 3\n                - ticket: greeting message\n                - userInfo: friend's other info for adding into local storage\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def get_head_img(self, userName=None, chatroomUserName=None, picDir=None):\n        ''' place for docs\n            for options\n                - if you want to get chatroom header: only set chatroomUserName\n                - if you want to get friend header: only set userName\n                - if you want to get chatroom member header: set both\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def create_chatroom(self, memberList, topic=''):\n        ''' create a chatroom\n            for creating\n                - its calling frequency is strictly limited\n            for options\n                - memberList: list of member info dict\n                - topic: topic of new chatroom\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def set_chatroom_name(self, chatroomUserName, name):\n        ''' set chatroom name\n            for setting\n                - it makes an updating of chatroom\n                - which means detailed info will be returned in heart loop\n            for options\n                - chatroomUserName: 'UserName' key of chatroom info dict\n                - name: new chatroom name\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def delete_member_from_chatroom(self, chatroomUserName, memberList):\n        ''' deletes members from chatroom\n            for deleting\n                - you can't delete yourself\n                - if so, no one will be deleted\n                - strict-limited frequency\n            for options\n                - chatroomUserName: 'UserName' key of chatroom info dict\n                - memberList: list of members' info dict\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def add_member_into_chatroom(self, chatroomUserName, memberList,\n            useInvitation=False):\n        ''' add members into chatroom\n            for adding\n                - you can't add yourself or member already in chatroom\n                - if so, no one will be added\n                - if member will over 40 after adding, invitation must be used\n                - strict-limited frequency\n            for options\n                - chatroomUserName: 'UserName' key of chatroom info dict\n                - memberList: list of members' info dict\n                - useInvitation: if invitation is not required, set this to use\n            it is defined in components/contact.py\n        '''\n        raise NotImplementedError()\n    def send_raw_msg(self, msgType, content, toUserName):\n        ''' many messages are sent in a common way\n            for demo\n                .. code:: python\n\n                    @itchat.msg_register(itchat.content.CARD)\n                    def reply(msg):\n                        itchat.send_raw_msg(msg['MsgType'], msg['Content'], msg['FromUserName'])\n\n            there are some little tricks here, you may discover them yourself\n            but remember they are tricks\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send_msg(self, msg='Test Message', toUserName=None):\n        ''' send plain text message\n            for options\n                - msg: should be unicode if there's non-ascii words in msg\n                - toUserName: 'UserName' key of friend dict\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def upload_file(self, fileDir, isPicture=False, isVideo=False,\n            toUserName='filehelper', file_=None, preparedFile=None):\n        ''' upload file to server and get mediaId\n            for options\n                - fileDir: dir for file ready for upload\n                - isPicture: whether file is a picture\n                - isVideo: whether file is a video\n            for return values\n                will return a ReturnValue\n                if succeeded, mediaId is in r['MediaId']\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send_file(self, fileDir, toUserName=None, mediaId=None, file_=None):\n        ''' send attachment\n            for options\n                - fileDir: dir for file ready for upload\n                - mediaId: mediaId for file. \n                    - if set, file will not be uploaded twice\n                - toUserName: 'UserName' key of friend dict\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send_image(self, fileDir=None, toUserName=None, mediaId=None, file_=None):\n        ''' send image\n            for options\n                - fileDir: dir for file ready for upload\n                    - if it's a gif, name it like 'xx.gif'\n                - mediaId: mediaId for file. \n                    - if set, file will not be uploaded twice\n                - toUserName: 'UserName' key of friend dict\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send_video(self, fileDir=None, toUserName=None, mediaId=None, file_=None):\n        ''' send video\n            for options\n                - fileDir: dir for file ready for upload\n                    - if mediaId is set, it's unnecessary to set fileDir\n                - mediaId: mediaId for file. \n                    - if set, file will not be uploaded twice\n                - toUserName: 'UserName' key of friend dict\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def send(self, msg, toUserName=None, mediaId=None):\n        ''' wrapped function for all the sending functions\n            for options\n                - msg: message starts with different string indicates different type\n                    - list of type string: ['@fil@', '@img@', '@msg@', '@vid@']\n                    - they are for file, image, plain text, video\n                    - if none of them matches, it will be sent like plain text\n                - toUserName: 'UserName' key of friend dict\n                - mediaId: if set, uploading will not be repeated\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def revoke(self, msgId, toUserName, localId=None):\n        ''' revoke message with its and msgId\n            for options\n                - msgId: message Id on server\n                - toUserName: 'UserName' key of friend dict\n                - localId: message Id at local (optional)\n            it is defined in components/messages.py\n        '''\n        raise NotImplementedError()\n    def dump_login_status(self, fileDir=None):\n        ''' dump login status to a specific file\n            for option\n                - fileDir: dir for dumping login status\n            it is defined in components/hotreload.py\n        '''\n        raise NotImplementedError()\n    def load_login_status(self, fileDir,\n            loginCallback=None, exitCallback=None):\n        ''' load login status from a specific file\n            for option\n                - fileDir: file for loading login status\n                - loginCallback: callback after successfully logged in\n                    - if not set, screen is cleared and qrcode is deleted\n                - exitCallback: callback after logged out\n                    - it contains calling of logout\n            it is defined in components/hotreload.py\n        '''\n        raise NotImplementedError()\n    def auto_login(self, hotReload=False, statusStorageDir='itchat.pkl',\n            enableCmdQR=False, picDir=None, qrCallback=None,\n            loginCallback=None, exitCallback=None):\n        ''' log in like web wechat does\n            for log in\n                - a QR code will be downloaded and opened\n                - then scanning status is logged, it paused for you confirm\n                - finally it logged in and show your nickName\n            for options\n                - hotReload: enable hot reload\n                - statusStorageDir: dir for storing log in status\n                - enableCmdQR: show qrcode in command line\n                    - integers can be used to fit strange char length\n                - picDir: place for storing qrcode\n                - loginCallback: callback after successfully logged in\n                    - if not set, screen is cleared and qrcode is deleted\n                - exitCallback: callback after logged out\n                    - it contains calling of logout\n                - qrCallback: method that should accept uuid, status, qrcode\n            for usage\n                ..code::python\n\n                    import itchat\n                    itchat.auto_login()\n\n            it is defined in components/register.py\n            and of course every single move in login can be called outside\n                - you may scan source code to see how\n                - and modified according to your own demond\n        '''\n        raise NotImplementedError()\n    def configured_reply(self):\n        ''' determine the type of message and reply if its method is defined\n            however, I use a strange way to determine whether a msg is from massive platform\n            I haven't found a better solution here\n            The main problem I'm worrying about is the mismatching of new friends added on phone\n            If you have any good idea, pleeeease report an issue. I will be more than grateful.\n        '''\n        raise NotImplementedError()\n    def msg_register(self, msgType,\n            isFriendChat=False, isGroupChat=False, isMpChat=False):\n        ''' a decorator constructor\n            return a specific decorator based on information given\n        '''\n        raise NotImplementedError()\n    def run(self, debug=True, blockThread=True):\n        ''' start auto respond\n            for option\n                - debug: if set, debug info will be shown on screen\n            it is defined in components/register.py\n        '''\n        raise NotImplementedError()\n    def search_friends(self, name=None, userName=None, remarkName=None, nickName=None,\n            wechatAccount=None):\n        return self.storageClass.search_friends(name, userName, remarkName,\n            nickName, wechatAccount)\n    def search_chatrooms(self, name=None, userName=None):\n        return self.storageClass.search_chatrooms(name, userName)\n    def search_mps(self, name=None, userName=None):\n        return self.storageClass.search_mps(name, userName)\n\nload_components(Core)\n", "description": "A complete and graceful API for Wechat. \u5fae\u4fe1\u4e2a\u4eba\u53f7\u63a5\u53e3\u3001\u5fae\u4fe1\u673a\u5668\u4eba\u53ca\u547d\u4ee4\u884c\u5fae\u4fe1\uff0c\u4e09\u5341\u884c\u5373\u53ef\u81ea\u5b9a\u4e49\u4e2a\u4eba\u53f7\u673a\u5668\u4eba\u3002", "file_name": "core.py", "id": "ec4afa43a92b15a5823c1799ce894dbc", "language": "Python", "project_name": "ItChat", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/littlecodersh-ItChat/littlecodersh-ItChat-8622c3c/itchat/core.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:54:42Z", "url": "https://github.com/littlecodersh/ItChat", "wiki": true}