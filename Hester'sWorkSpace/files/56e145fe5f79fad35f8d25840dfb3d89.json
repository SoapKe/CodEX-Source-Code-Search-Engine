{"author": "mitmproxy", "code": "import typing\n\nimport mitmproxy.addonmanager\nimport mitmproxy.connections\nimport mitmproxy.http\nimport mitmproxy.log\nimport mitmproxy.tcp\nimport mitmproxy.websocket\nimport mitmproxy.proxy.protocol\n\n\nclass Events:\n    \n    def http_connect(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            An HTTP CONNECT request was received. Setting a non 2xx response on\n            the flow will return the response to the client abort the\n            connection. CONNECT requests and responses do not generate the usual\n            HTTP handler events. CONNECT requests are only valid in regular and\n            upstream proxy modes.\n        \"\"\"\n\n    def requestheaders(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            HTTP request headers were successfully read. At this point, the body\n            is empty.\n        \"\"\"\n\n    def request(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            The full HTTP request has been read.\n        \"\"\"\n\n    def responseheaders(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            HTTP response headers were successfully read. At this point, the body\n            is empty.\n        \"\"\"\n\n    def response(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            The full HTTP response has been read.\n        \"\"\"\n\n    def error(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            An HTTP error has occurred, e.g. invalid server responses, or\n            interrupted connections. This is distinct from a valid server HTTP\n            error response, which is simply a response with an HTTP error code.\n        \"\"\"\n\n    \n    def tcp_start(self, flow: mitmproxy.tcp.TCPFlow):\n        \"\"\"\n            A TCP connection has started.\n        \"\"\"\n\n    def tcp_message(self, flow: mitmproxy.tcp.TCPFlow):\n        \"\"\"\n            A TCP connection has received a message. The most recent message\n            will be flow.messages[-1]. The message is user-modifiable.\n        \"\"\"\n\n    def tcp_error(self, flow: mitmproxy.tcp.TCPFlow):\n        \"\"\"\n            A TCP error has occurred.\n        \"\"\"\n\n    def tcp_end(self, flow: mitmproxy.tcp.TCPFlow):\n        \"\"\"\n            A TCP connection has ended.\n        \"\"\"\n\n    \n    def websocket_handshake(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            Called when a client wants to establish a WebSocket connection. The\n            WebSocket-specific headers can be manipulated to alter the\n            handshake. The flow object is guaranteed to have a non-None request\n            attribute.\n        \"\"\"\n\n    def websocket_start(self, flow: mitmproxy.websocket.WebSocketFlow):\n        \"\"\"\n            A websocket connection has commenced.\n        \"\"\"\n\n    def websocket_message(self, flow: mitmproxy.websocket.WebSocketFlow):\n        \"\"\"\n            Called when a WebSocket message is received from the client or\n            server. The most recent message will be flow.messages[-1]. The\n            message is user-modifiable. Currently there are two types of\n            messages, corresponding to the BINARY and TEXT frame types.\n        \"\"\"\n\n    def websocket_error(self, flow: mitmproxy.websocket.WebSocketFlow):\n        \"\"\"\n            A websocket connection has had an error.\n        \"\"\"\n\n    def websocket_end(self, flow: mitmproxy.websocket.WebSocketFlow):\n        \"\"\"\n            A websocket connection has ended.\n        \"\"\"\n\n    \n    def clientconnect(self, layer: mitmproxy.proxy.protocol.Layer):\n        \"\"\"\n            A client has connected to mitmproxy. Note that a connection can\n            correspond to multiple HTTP requests.\n        \"\"\"\n\n    def clientdisconnect(self, layer: mitmproxy.proxy.protocol.Layer):\n        \"\"\"\n            A client has disconnected from mitmproxy.\n        \"\"\"\n\n    def serverconnect(self, conn: mitmproxy.connections.ServerConnection):\n        \"\"\"\n            Mitmproxy has connected to a server. Note that a connection can\n            correspond to multiple requests.\n        \"\"\"\n\n    def serverdisconnect(self, conn: mitmproxy.connections.ServerConnection):\n        \"\"\"\n            Mitmproxy has disconnected from a server.\n        \"\"\"\n\n    def next_layer(self, layer: mitmproxy.proxy.protocol.Layer):\n        \"\"\"\n            Network layers are being switched. You may change which layer will\n            be used by returning a new layer object from this event.\n        \"\"\"\n\n    \n    def configure(self, updated: typing.Set[str]):\n        \"\"\"\n            Called when configuration changes. The updated argument is a\n            set-like object containing the keys of all changed options. This\n            event is called during startup with all options in the updated set.\n        \"\"\"\n\n    def done(self):\n        \"\"\"\n            Called when the addon shuts down, either by being removed from the\n            mitmproxy instance, or when mitmproxy itself shuts down.\n        \"\"\"\n\n    def load(self, entry: mitmproxy.addonmanager.Loader):\n        \"\"\"\n            Called when an addon is first loaded. This event receives a Loader\n            object, which contains methods for adding options and commands. This\n            method is where the addon configures itself.\n        \"\"\"\n\n    def log(self, entry: mitmproxy.log.LogEntry):\n        \"\"\"\n            Called whenever a new log entry is created through the mitmproxy\n            context. Be careful not to log from this event, which will cause an\n            infinite loop!\n        \"\"\"\n\n    def running(self):\n        \"\"\"\n            Called when the proxy is completely up and running. At this point,\n            you can expect the proxy to be bound to a port, and all addons to be\n            loaded.\n        \"\"\"\n\n    def tick(self):\n        \"\"\"\n            A regular ticker - called approximately once every 100ms.\n        \"\"\"\n\n    def update(self, flows: typing.Sequence[mitmproxy.flow.Flow]):\n        \"\"\"\n            Update is called when one or more flow objects have been modified,\n            usually from a different addon.\n        \"\"\"\n", "comments": "                an http connect request received  setting non 2xx response             flow return response client abort             connection  connect requests responses generate usual             http handler events  connect requests valid regular             upstream proxy modes                   def requestheaders(self  flow  mitmproxy http httpflow)                          http request headers successfully read  at point  body             empty                   def request(self  flow  mitmproxy http httpflow)                          the full http request read                   def responseheaders(self  flow  mitmproxy http httpflow)                          http response headers successfully read  at point  body             empty                   def response(self  flow  mitmproxy http httpflow)                          the full http response read                   def error(self  flow  mitmproxy http httpflow)                          an http error occurred  e g  invalid server responses              interrupted connections  this distinct valid server http             error response  simply response http error code                     tcp lifecycle     def tcp start(self  flow  mitmproxy tcp tcpflow)                          a tcp connection started                   def tcp message(self  flow  mitmproxy tcp tcpflow)                          a tcp connection received message  the recent message             flow messages  1   the message user modifiable                   def tcp error(self  flow  mitmproxy tcp tcpflow)                          a tcp error occurred                   def tcp end(self  flow  mitmproxy tcp tcpflow)                          a tcp connection ended                     websocket lifecycle     def websocket handshake(self  flow  mitmproxy http httpflow)                          called client wants establish websocket connection  the             websocket specific headers manipulated alter             handshake  the flow object guaranteed non none request             attribute                   def websocket start(self  flow  mitmproxy websocket websocketflow)                          a websocket connection commenced                   def websocket message(self  flow  mitmproxy websocket websocketflow)                          called websocket message received client             server  the recent message flow messages  1   the             message user modifiable  currently two types             messages  corresponding binary text frame types                   def websocket error(self  flow  mitmproxy websocket websocketflow)                          a websocket connection error                   def websocket end(self  flow  mitmproxy websocket websocketflow)                          a websocket connection ended                     network lifecycle     def clientconnect(self  layer  mitmproxy proxy protocol layer)                          a client connected mitmproxy  note connection             correspond multiple http requests                   def clientdisconnect(self  layer  mitmproxy proxy protocol layer)                          a client disconnected mitmproxy                   def serverconnect(self  conn  mitmproxy connections serverconnection)                          mitmproxy connected server  note connection             correspond multiple requests                   def serverdisconnect(self  conn  mitmproxy connections serverconnection)                          mitmproxy disconnected server                   def next layer(self  layer  mitmproxy proxy protocol layer)                          network layers switched  you may change layer             used returning new layer object event                     general lifecycle     def configure(self  updated  typing set str )                          called configuration changes  the updated argument             set like object containing keys changed options  this             event called startup options updated set                   def done(self)                          called addon shuts  either removed             mitmproxy instance  mitmproxy shuts                   def load(self  entry  mitmproxy addonmanager loader)                          called addon first loaded  this event receives loader             object  contains methods adding options commands  this             method addon configures                   def log(self  entry  mitmproxy log logentry)                          called whenever new log entry created mitmproxy             context  be careful log event  cause             infinite loop                   def running(self)                          called proxy completely running  at point              expect proxy bound port  addons             loaded                   def tick(self)                          a regular ticker   called approximately every 100ms                   def update(self  flows  typing sequence mitmproxy flow flow )                          update called one flow objects modified              usually different addon                 http lifecycle    tcp lifecycle    websocket lifecycle    network lifecycle    general lifecycle ", "content": "import typing\n\nimport mitmproxy.addonmanager\nimport mitmproxy.connections\nimport mitmproxy.http\nimport mitmproxy.log\nimport mitmproxy.tcp\nimport mitmproxy.websocket\nimport mitmproxy.proxy.protocol\n\n\nclass Events:\n    # HTTP lifecycle\n    def http_connect(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            An HTTP CONNECT request was received. Setting a non 2xx response on\n            the flow will return the response to the client abort the\n            connection. CONNECT requests and responses do not generate the usual\n            HTTP handler events. CONNECT requests are only valid in regular and\n            upstream proxy modes.\n        \"\"\"\n\n    def requestheaders(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            HTTP request headers were successfully read. At this point, the body\n            is empty.\n        \"\"\"\n\n    def request(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            The full HTTP request has been read.\n        \"\"\"\n\n    def responseheaders(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            HTTP response headers were successfully read. At this point, the body\n            is empty.\n        \"\"\"\n\n    def response(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            The full HTTP response has been read.\n        \"\"\"\n\n    def error(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            An HTTP error has occurred, e.g. invalid server responses, or\n            interrupted connections. This is distinct from a valid server HTTP\n            error response, which is simply a response with an HTTP error code.\n        \"\"\"\n\n    # TCP lifecycle\n    def tcp_start(self, flow: mitmproxy.tcp.TCPFlow):\n        \"\"\"\n            A TCP connection has started.\n        \"\"\"\n\n    def tcp_message(self, flow: mitmproxy.tcp.TCPFlow):\n        \"\"\"\n            A TCP connection has received a message. The most recent message\n            will be flow.messages[-1]. The message is user-modifiable.\n        \"\"\"\n\n    def tcp_error(self, flow: mitmproxy.tcp.TCPFlow):\n        \"\"\"\n            A TCP error has occurred.\n        \"\"\"\n\n    def tcp_end(self, flow: mitmproxy.tcp.TCPFlow):\n        \"\"\"\n            A TCP connection has ended.\n        \"\"\"\n\n    # Websocket lifecycle\n    def websocket_handshake(self, flow: mitmproxy.http.HTTPFlow):\n        \"\"\"\n            Called when a client wants to establish a WebSocket connection. The\n            WebSocket-specific headers can be manipulated to alter the\n            handshake. The flow object is guaranteed to have a non-None request\n            attribute.\n        \"\"\"\n\n    def websocket_start(self, flow: mitmproxy.websocket.WebSocketFlow):\n        \"\"\"\n            A websocket connection has commenced.\n        \"\"\"\n\n    def websocket_message(self, flow: mitmproxy.websocket.WebSocketFlow):\n        \"\"\"\n            Called when a WebSocket message is received from the client or\n            server. The most recent message will be flow.messages[-1]. The\n            message is user-modifiable. Currently there are two types of\n            messages, corresponding to the BINARY and TEXT frame types.\n        \"\"\"\n\n    def websocket_error(self, flow: mitmproxy.websocket.WebSocketFlow):\n        \"\"\"\n            A websocket connection has had an error.\n        \"\"\"\n\n    def websocket_end(self, flow: mitmproxy.websocket.WebSocketFlow):\n        \"\"\"\n            A websocket connection has ended.\n        \"\"\"\n\n    # Network lifecycle\n    def clientconnect(self, layer: mitmproxy.proxy.protocol.Layer):\n        \"\"\"\n            A client has connected to mitmproxy. Note that a connection can\n            correspond to multiple HTTP requests.\n        \"\"\"\n\n    def clientdisconnect(self, layer: mitmproxy.proxy.protocol.Layer):\n        \"\"\"\n            A client has disconnected from mitmproxy.\n        \"\"\"\n\n    def serverconnect(self, conn: mitmproxy.connections.ServerConnection):\n        \"\"\"\n            Mitmproxy has connected to a server. Note that a connection can\n            correspond to multiple requests.\n        \"\"\"\n\n    def serverdisconnect(self, conn: mitmproxy.connections.ServerConnection):\n        \"\"\"\n            Mitmproxy has disconnected from a server.\n        \"\"\"\n\n    def next_layer(self, layer: mitmproxy.proxy.protocol.Layer):\n        \"\"\"\n            Network layers are being switched. You may change which layer will\n            be used by returning a new layer object from this event.\n        \"\"\"\n\n    # General lifecycle\n    def configure(self, updated: typing.Set[str]):\n        \"\"\"\n            Called when configuration changes. The updated argument is a\n            set-like object containing the keys of all changed options. This\n            event is called during startup with all options in the updated set.\n        \"\"\"\n\n    def done(self):\n        \"\"\"\n            Called when the addon shuts down, either by being removed from the\n            mitmproxy instance, or when mitmproxy itself shuts down.\n        \"\"\"\n\n    def load(self, entry: mitmproxy.addonmanager.Loader):\n        \"\"\"\n            Called when an addon is first loaded. This event receives a Loader\n            object, which contains methods for adding options and commands. This\n            method is where the addon configures itself.\n        \"\"\"\n\n    def log(self, entry: mitmproxy.log.LogEntry):\n        \"\"\"\n            Called whenever a new log entry is created through the mitmproxy\n            context. Be careful not to log from this event, which will cause an\n            infinite loop!\n        \"\"\"\n\n    def running(self):\n        \"\"\"\n            Called when the proxy is completely up and running. At this point,\n            you can expect the proxy to be bound to a port, and all addons to be\n            loaded.\n        \"\"\"\n\n    def tick(self):\n        \"\"\"\n            A regular ticker - called approximately once every 100ms.\n        \"\"\"\n\n    def update(self, flows: typing.Sequence[mitmproxy.flow.Flow]):\n        \"\"\"\n            Update is called when one or more flow objects have been modified,\n            usually from a different addon.\n        \"\"\"\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "events.py", "id": "56e145fe5f79fad35f8d25840dfb3d89", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/mitmproxy-mitmproxy/mitmproxy-mitmproxy-0bc3f1f/examples/addons/events.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:46Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}