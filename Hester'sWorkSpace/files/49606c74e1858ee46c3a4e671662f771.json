{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n)\n\n\nclass VzaarIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|view)\\.)?vzaar\\.com/(?:videos/)?(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://vzaar.com/videos/1152805',\n        'md5': 'bde5ddfeb104a6c56a93a06b04901dbf',\n        'info_dict': {\n            'id': '1152805',\n            'ext': 'mp4',\n            'title': 'sample video (public)',\n        },\n    }, {\n        'url': 'https://view.vzaar.com/27272/player',\n        'md5': '3b50012ac9bbce7f445550d54e0508f2',\n        'info_dict': {\n            'id': '27272',\n            'ext': 'mp3',\n            'title': 'MP3',\n        },\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=[\"\\']((?:https?:)?//(?:view\\.vzaar\\.com)/[0-9]+)',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'http://view.vzaar.com/v2/%s/video' % video_id, video_id)\n        source_url = video_data['sourceUrl']\n\n        info = {\n            'id': video_id,\n            'title': video_data['videoTitle'],\n            'url': source_url,\n            'thumbnail': self._proto_relative_url(video_data.get('poster')),\n            'duration': float_or_none(video_data.get('videoDuration')),\n        }\n        if 'audio' in source_url:\n            info.update({\n                'vcodec': 'none',\n                'ext': 'mp3',\n            })\n        else:\n            info.update({\n                'width': int_or_none(video_data.get('width')),\n                'height': int_or_none(video_data.get('height')),\n                'ext': 'mp4',\n            })\n        return info\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n)\n\n\nclass VzaarIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|view)\\.)?vzaar\\.com/(?:videos/)?(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://vzaar.com/videos/1152805',\n        'md5': 'bde5ddfeb104a6c56a93a06b04901dbf',\n        'info_dict': {\n            'id': '1152805',\n            'ext': 'mp4',\n            'title': 'sample video (public)',\n        },\n    }, {\n        'url': 'https://view.vzaar.com/27272/player',\n        'md5': '3b50012ac9bbce7f445550d54e0508f2',\n        'info_dict': {\n            'id': '27272',\n            'ext': 'mp3',\n            'title': 'MP3',\n        },\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+src=[\"\\']((?:https?:)?//(?:view\\.vzaar\\.com)/[0-9]+)',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'http://view.vzaar.com/v2/%s/video' % video_id, video_id)\n        source_url = video_data['sourceUrl']\n\n        info = {\n            'id': video_id,\n            'title': video_data['videoTitle'],\n            'url': source_url,\n            'thumbnail': self._proto_relative_url(video_data.get('poster')),\n            'duration': float_or_none(video_data.get('videoDuration')),\n        }\n        if 'audio' in source_url:\n            info.update({\n                'vcodec': 'none',\n                'ext': 'mp3',\n            })\n        else:\n            info.update({\n                'width': int_or_none(video_data.get('width')),\n                'height': int_or_none(video_data.get('height')),\n                'ext': 'mp4',\n            })\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vzaar.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vzaar.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}