{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass AccountInvoiceLine(models.Model):\n    _inherit = \"account.invoice.line\"\n\n    intrastat_transaction_id = fields.Many2one('l10n_be_intrastat.transaction', string='Intrastat Transaction Type',\n                                               help=\"Intrastat nature of transaction\")\n\n\nclass AccountInvoice(models.Model):\n    _inherit = \"account.invoice\"\n\n    incoterm_id = fields.Many2one('stock.incoterms', string='Incoterm',\n        help=\"International Commercial Terms are a series of predefined commercial terms \"\n             \"used in international transactions.\")\n    transport_mode_id = fields.Many2one('l10n_be_intrastat.transport_mode', string='Intrastat Transport Mode')\n    intrastat_country_id = fields.Many2one('res.country', string='Intrastat Country',\n        help='Intrastat country, delivery for sales, origin for purchases',\n        domain=[('intrastat', '=', True)])\n\n\nclass IntrastatRegion(models.Model):\n    _name = 'l10n_be_intrastat.region'\n\n    code = fields.Char(required=True)\n    country_id = fields.Many2one('res.country', string='Country')\n    name = fields.Char(translate=True)\n    description = fields.Char()\n\n    _sql_constraints = [\n        ('l10n_be_intrastat_regioncodeunique', 'UNIQUE (code)', 'Code must be unique.'),\n    ]\n\n\nclass IntrastatTransaction(models.Model):\n    _name = 'l10n_be_intrastat.transaction'\n    _rec_name = 'code'\n\n    code = fields.Char(required=True, readonly=True)\n    description = fields.Text(readonly=True)\n\n    _sql_constraints = [\n        ('l10n_be_intrastat_trcodeunique', 'UNIQUE (code)', 'Code must be unique.'),\n    ]\n\n\nclass IntrastatTransportMode(models.Model):\n    _name = 'l10n_be_intrastat.transport_mode'\n\n    code = fields.Char(required=True, readonly=True)\n    name = fields.Char(string='Description', readonly=True)\n\n    _sql_constraints = [\n        ('l10n_be_intrastat_trmodecodeunique', 'UNIQUE (code)', 'Code must be unique.'),\n    ]\n\n\nclass ProductCategory(models.Model):\n    _inherit = \"product.category\"\n\n    intrastat_id = fields.Many2one('report.intrastat.code', string='Intrastat Code')\n\n    @api.multi\n    def get_intrastat_recursively(self):\n        \"\"\" Recursively search in categories to find an intrastat code id\n        \"\"\"\n        res = None\n        if self.intrastat_id:\n            res = self.intrastat_id.id\n        elif self.parent_id:\n            res = self.parent_id.get_intrastat_recursively()\n        return res\n\n\nclass ProductProduct(models.Model):\n    _inherit = \"product.product\"\n\n    @api.multi\n    def get_intrastat_recursively(self):\n        \"\"\" Recursively search in categories to find an intrastat code id\n        \"\"\"\n        res = None\n        if self.intrastat_id:\n            res = self.intrastat_id.id\n        elif self.categ_id:\n            res = self.categ_id.get_intrastat_recursively()\n        return res\n\n\nclass PurchaseOrder(models.Model):\n    _inherit = \"purchase.order\"\n\n    def _prepare_invoice(self):\n        \"\"\"\n        copy incoterm from purchase order to invoice\n        \"\"\"\n        invoice = super(PurchaseOrder, self)._prepare_invoice()\n        if self.incoterm_id:\n            invoice['incoterm_id'] = self.incoterm_id.id\n        \n        if self.partner_id.country_id:\n            \n            invoice['intrastat_country_id'] = self.partner_id.country_id.id\n        return invoice\n\n\nclass ReportIntrastatCode(models.Model):\n    _inherit = \"report.intrastat.code\"\n\n    description = fields.Text(string='Description', translate=True)\n\n\nclass ResCompany(models.Model):\n    _inherit = \"res.company\"\n\n    region_id = fields.Many2one('l10n_be_intrastat.region', string='Intrastat region')\n    transport_mode_id = fields.Many2one('l10n_be_intrastat.transport_mode',\n                                             string='Default transport mode')\n    incoterm_id = fields.Many2one('stock.incoterms', string='Default incoterm for Intrastat',\n                                       help=\"International Commercial Terms are a series of \"\n                                            \"predefined commercial terms used in international \"\n                                            \"transactions.\")\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    def _prepare_invoice(self):\n        \"\"\"\n        copy incoterm from sales order to invoice\n        \"\"\"\n        invoice = super(SaleOrder, self)._prepare_invoice()\n        if self.incoterm:\n            invoice['incoterm_id'] = self.incoterm.id\n        \n        if self.partner_shipping_id.country_id:\n            invoice['intrastat_country_id'] = self.partner_shipping_id.country_id.id\n        elif self.partner_id.country_id:\n            invoice['intrastat_country_id'] = self.partner_id.country_id.id\n        elif self.partner_invoice_id.country_id:\n            invoice['intrastat_country_id'] = self.partner_invoice_id.country_id.id\n        return invoice\n\n\nclass StockWarehouse(models.Model):\n    _inherit = \"stock.warehouse\"\n\n    region_id = fields.Many2one('l10n_be_intrastat.region', string='Intrastat region')\n\n    def get_regionid_from_locationid(self, location):\n        location_ids = location.search([('parent_left', '<=', location.parent_left), ('parent_right', '>=', location.parent_right)])\n        warehouses = self.search([('lot_stock_id', 'in', location_ids.ids), ('region_id', '!=', False)], limit=1)\n        if warehouses:\n            return warehouses.region_id.id\n        return None\n", "comments": "    recursively search categories find intrastat code id                     res   none         self intrastat id              res   self intrastat id id         elif self parent id              res   self parent id get intrastat recursively()         return res   class productproduct(models model)       inherit    product product        api multi     def get intrastat recursively(self)              recursively search categories find intrastat code id                     res   none         self intrastat id              res   self intrastat id id         elif self categ id              res   self categ id get intrastat recursively()         return res   class purchaseorder(models model)       inherit    purchase order       def  prepare invoice(self)                      copy incoterm purchase order invoice                     invoice   super(purchaseorder  self)  prepare invoice()         self incoterm id              invoice  incoterm id     self incoterm id id          try determine products origin         self partner id country id               it comes vendor             invoice  intrastat country id     self partner id country id id         return invoice   class reportintrastatcode(models model)       inherit    report intrastat code       description   fields text(string  description   translate true)   class rescompany(models model)       inherit    res company       region id   fields many2one( l10n intrastat region   string  intrastat region )     transport mode id   fields many2one( l10n intrastat transport mode                                                string  default transport mode )     incoterm id   fields many2one( stock incoterms   string  default incoterm intrastat                                          help  international commercial terms series                                                predefined commercial terms used international                                                transactions  )   class saleorder(models model)       inherit    sale order       def  prepare invoice(self)                      copy incoterm sales order invoice                    coding  utf 8        part odoo  see license file full copyright licensing details    try determine products origin   it comes vendor    guess products destination ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass AccountInvoiceLine(models.Model):\n    _inherit = \"account.invoice.line\"\n\n    intrastat_transaction_id = fields.Many2one('l10n_be_intrastat.transaction', string='Intrastat Transaction Type',\n                                               help=\"Intrastat nature of transaction\")\n\n\nclass AccountInvoice(models.Model):\n    _inherit = \"account.invoice\"\n\n    incoterm_id = fields.Many2one('stock.incoterms', string='Incoterm',\n        help=\"International Commercial Terms are a series of predefined commercial terms \"\n             \"used in international transactions.\")\n    transport_mode_id = fields.Many2one('l10n_be_intrastat.transport_mode', string='Intrastat Transport Mode')\n    intrastat_country_id = fields.Many2one('res.country', string='Intrastat Country',\n        help='Intrastat country, delivery for sales, origin for purchases',\n        domain=[('intrastat', '=', True)])\n\n\nclass IntrastatRegion(models.Model):\n    _name = 'l10n_be_intrastat.region'\n\n    code = fields.Char(required=True)\n    country_id = fields.Many2one('res.country', string='Country')\n    name = fields.Char(translate=True)\n    description = fields.Char()\n\n    _sql_constraints = [\n        ('l10n_be_intrastat_regioncodeunique', 'UNIQUE (code)', 'Code must be unique.'),\n    ]\n\n\nclass IntrastatTransaction(models.Model):\n    _name = 'l10n_be_intrastat.transaction'\n    _rec_name = 'code'\n\n    code = fields.Char(required=True, readonly=True)\n    description = fields.Text(readonly=True)\n\n    _sql_constraints = [\n        ('l10n_be_intrastat_trcodeunique', 'UNIQUE (code)', 'Code must be unique.'),\n    ]\n\n\nclass IntrastatTransportMode(models.Model):\n    _name = 'l10n_be_intrastat.transport_mode'\n\n    code = fields.Char(required=True, readonly=True)\n    name = fields.Char(string='Description', readonly=True)\n\n    _sql_constraints = [\n        ('l10n_be_intrastat_trmodecodeunique', 'UNIQUE (code)', 'Code must be unique.'),\n    ]\n\n\nclass ProductCategory(models.Model):\n    _inherit = \"product.category\"\n\n    intrastat_id = fields.Many2one('report.intrastat.code', string='Intrastat Code')\n\n    @api.multi\n    def get_intrastat_recursively(self):\n        \"\"\" Recursively search in categories to find an intrastat code id\n        \"\"\"\n        res = None\n        if self.intrastat_id:\n            res = self.intrastat_id.id\n        elif self.parent_id:\n            res = self.parent_id.get_intrastat_recursively()\n        return res\n\n\nclass ProductProduct(models.Model):\n    _inherit = \"product.product\"\n\n    @api.multi\n    def get_intrastat_recursively(self):\n        \"\"\" Recursively search in categories to find an intrastat code id\n        \"\"\"\n        res = None\n        if self.intrastat_id:\n            res = self.intrastat_id.id\n        elif self.categ_id:\n            res = self.categ_id.get_intrastat_recursively()\n        return res\n\n\nclass PurchaseOrder(models.Model):\n    _inherit = \"purchase.order\"\n\n    def _prepare_invoice(self):\n        \"\"\"\n        copy incoterm from purchase order to invoice\n        \"\"\"\n        invoice = super(PurchaseOrder, self)._prepare_invoice()\n        if self.incoterm_id:\n            invoice['incoterm_id'] = self.incoterm_id.id\n        #Try to determine products origin\n        if self.partner_id.country_id:\n            #It comes from vendor\n            invoice['intrastat_country_id'] = self.partner_id.country_id.id\n        return invoice\n\n\nclass ReportIntrastatCode(models.Model):\n    _inherit = \"report.intrastat.code\"\n\n    description = fields.Text(string='Description', translate=True)\n\n\nclass ResCompany(models.Model):\n    _inherit = \"res.company\"\n\n    region_id = fields.Many2one('l10n_be_intrastat.region', string='Intrastat region')\n    transport_mode_id = fields.Many2one('l10n_be_intrastat.transport_mode',\n                                             string='Default transport mode')\n    incoterm_id = fields.Many2one('stock.incoterms', string='Default incoterm for Intrastat',\n                                       help=\"International Commercial Terms are a series of \"\n                                            \"predefined commercial terms used in international \"\n                                            \"transactions.\")\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    def _prepare_invoice(self):\n        \"\"\"\n        copy incoterm from sales order to invoice\n        \"\"\"\n        invoice = super(SaleOrder, self)._prepare_invoice()\n        if self.incoterm:\n            invoice['incoterm_id'] = self.incoterm.id\n        # Guess products destination\n        if self.partner_shipping_id.country_id:\n            invoice['intrastat_country_id'] = self.partner_shipping_id.country_id.id\n        elif self.partner_id.country_id:\n            invoice['intrastat_country_id'] = self.partner_id.country_id.id\n        elif self.partner_invoice_id.country_id:\n            invoice['intrastat_country_id'] = self.partner_invoice_id.country_id.id\n        return invoice\n\n\nclass StockWarehouse(models.Model):\n    _inherit = \"stock.warehouse\"\n\n    region_id = fields.Many2one('l10n_be_intrastat.region', string='Intrastat region')\n\n    def get_regionid_from_locationid(self, location):\n        location_ids = location.search([('parent_left', '<=', location.parent_left), ('parent_right', '>=', location.parent_right)])\n        warehouses = self.search([('lot_stock_id', 'in', location_ids.ids), ('region_id', '!=', False)], limit=1)\n        if warehouses:\n            return warehouses.region_id.id\n        return None\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "l10n_be_intrastat.py", "id": "81a96e9389fd6ca2b74719510d5419f3", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/l10n_be_intrastat/models/l10n_be_intrastat.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}