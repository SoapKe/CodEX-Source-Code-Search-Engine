{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    HEADRequest,\n    ExtractorError,\n    int_or_none,\n    clean_html,\n)\n\n\nclass TFOIE(InfoExtractor):\n    _GEO_COUNTRIES = ['CA']\n    _VALID_URL = r'https?://(?:www\\.)?tfo\\.org/(?:en|fr)/(?:[^/]+/){2}(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.tfo.org/en/universe/tfo-247/100463871/video-game-hackathon',\n        'md5': '47c987d0515561114cf03d1226a9d4c7',\n        'info_dict': {\n            'id': '100463871',\n            'ext': 'mp4',\n            'title': 'Video Game Hackathon',\n            'description': 'md5:558afeba217c6c8d96c60e5421795c07',\n            'upload_date': '20160212',\n            'timestamp': 1455310233,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        self._request_webpage(HEADRequest('http://www.tfo.org/'), video_id)\n        infos = self._download_json(\n            'http://www.tfo.org/api/web/video/get_infos', video_id, data=json.dumps({\n                'product_id': video_id,\n            }).encode(), headers={\n                'X-tfo-session': self._get_cookies('http://www.tfo.org/')['tfo-session'].value,\n            })\n        if infos.get('success') == 0:\n            if infos.get('code') == 'ErrGeoBlocked':\n                self.raise_geo_restricted(countries=self._GEO_COUNTRIES)\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, clean_html(infos['msg'])), expected=True)\n        video_data = infos['data']\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'url': 'limelight:media:' + video_data['llid'],\n            'title': video_data['title'],\n            'description': video_data.get('description'),\n            'series': video_data.get('collection'),\n            'season_number': int_or_none(video_data.get('season')),\n            'episode_number': int_or_none(video_data.get('episode')),\n            'duration': int_or_none(video_data.get('duration')),\n            'ie_key': 'LimelightMedia',\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    HEADRequest,\n    ExtractorError,\n    int_or_none,\n    clean_html,\n)\n\n\nclass TFOIE(InfoExtractor):\n    _GEO_COUNTRIES = ['CA']\n    _VALID_URL = r'https?://(?:www\\.)?tfo\\.org/(?:en|fr)/(?:[^/]+/){2}(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.tfo.org/en/universe/tfo-247/100463871/video-game-hackathon',\n        'md5': '47c987d0515561114cf03d1226a9d4c7',\n        'info_dict': {\n            'id': '100463871',\n            'ext': 'mp4',\n            'title': 'Video Game Hackathon',\n            'description': 'md5:558afeba217c6c8d96c60e5421795c07',\n            'upload_date': '20160212',\n            'timestamp': 1455310233,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        self._request_webpage(HEADRequest('http://www.tfo.org/'), video_id)\n        infos = self._download_json(\n            'http://www.tfo.org/api/web/video/get_infos', video_id, data=json.dumps({\n                'product_id': video_id,\n            }).encode(), headers={\n                'X-tfo-session': self._get_cookies('http://www.tfo.org/')['tfo-session'].value,\n            })\n        if infos.get('success') == 0:\n            if infos.get('code') == 'ErrGeoBlocked':\n                self.raise_geo_restricted(countries=self._GEO_COUNTRIES)\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, clean_html(infos['msg'])), expected=True)\n        video_data = infos['data']\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'url': 'limelight:media:' + video_data['llid'],\n            'title': video_data['title'],\n            'description': video_data.get('description'),\n            'series': video_data.get('collection'),\n            'season_number': int_or_none(video_data.get('season')),\n            'episode_number': int_or_none(video_data.get('episode')),\n            'duration': int_or_none(video_data.get('duration')),\n            'ie_key': 'LimelightMedia',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tfo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tfo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}