{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"A simple python function to walk in the enviornments that we have created.\nPYTHONPATH='.' PYOPENGL_PLATFORM=egl python scripts/script_env_vis.py \\\n  --dataset_name sbpd --building_name area3\n\"\"\"\nimport sys\nimport numpy as np\nimport matplotlib\nmatplotlib.use('TkAgg')\nfrom PIL import ImageTk, Image\nimport Tkinter as tk\nimport logging\nfrom tensorflow.python.platform import app\nfrom tensorflow.python.platform import flags\n\nimport datasets.nav_env_config as nec\nimport datasets.nav_env as nav_env\nimport cv2\nfrom datasets import factory\nimport render.swiftshader_renderer as renderer\n\nSwiftshaderRenderer = renderer.SwiftshaderRenderer\nVisualNavigationEnv = nav_env.VisualNavigationEnv\n\nFLAGS = flags.FLAGS\nflags.DEFINE_string('dataset_name', 'sbpd', 'Name of the dataset.')\nflags.DEFINE_float('fov', 60., 'Field of view')\nflags.DEFINE_integer('image_size', 512, 'Size of the image.')\nflags.DEFINE_string('building_name', '', 'Name of the building.')\n\ndef get_args():\n  navtask = nec.nav_env_base_config()\n  navtask.task_params.type = 'rng_rejection_sampling_many'\n  navtask.task_params.rejection_sampling_M = 2000\n  navtask.task_params.min_dist = 10\n  sz = FLAGS.image_size\n  navtask.camera_param.fov = FLAGS.fov\n  navtask.camera_param.height = sz\n  navtask.camera_param.width = sz\n  navtask.task_params.img_height = sz\n  navtask.task_params.img_width = sz\n\n   navtask.task_params.semantic_task.class_map_names = ['chair', 'door', 'table']\n   navtask.task_params.type = 'to_nearest_obj_acc'\n\n  logging.info('navtask: %s', navtask)\n  return navtask\n\ndef load_building(dataset_name, building_name):\n  dataset = factory.get_dataset(dataset_name)\n\n  navtask = get_args()\n  cp = navtask.camera_param\n  rgb_shader, d_shader = renderer.get_shaders(cp.modalities)\n  r_obj = SwiftshaderRenderer()\n  r_obj.init_display(width=cp.width, height=cp.height,\n                     fov=cp.fov, z_near=cp.z_near, z_far=cp.z_far,\n                     rgb_shader=rgb_shader, d_shader=d_shader)\n  r_obj.clear_scene()\n  b = VisualNavigationEnv(robot=navtask.robot, env=navtask.env,\n                          task_params=navtask.task_params,\n                          building_name=building_name, flip=False,\n                          logdir=None, building_loader=dataset,\n                          r_obj=r_obj)\n  b.load_building_into_scene()\n  b.set_building_visibility(False)\n  return b\n\ndef walk_through(b):\n   init agent at a random location in the environment.\n  init_env_state = b.reset([np.random.RandomState(0), np.random.RandomState(0)])\n\n  global current_node\n  rng = np.random.RandomState(0)\n  current_node = rng.choice(b.task.nodes.shape[0])\n\n  root = tk.Tk()\n  image = b.render_nodes(b.task.nodes[[current_node],:])[0]\n  print(image.shape)\n  image = image.astype(np.uint8)\n  im = Image.fromarray(image)\n  im = ImageTk.PhotoImage(im)\n  panel = tk.Label(root, image=im)\n\n  map_size = b.traversible.shape\n  sc = np.max(map_size)/256.\n  loc = np.array([[map_size[1]/2., map_size[0]/2.]])\n  x_axis = np.zeros_like(loc); x_axis[:,1] = sc\n  y_axis = np.zeros_like(loc); y_axis[:,0] = -sc\n  cum_fs, cum_valid = nav_env.get_map_to_predict(loc, x_axis, y_axis,\n                                                   map=b.traversible*1.,\n                                                   map_size=256)\n  cum_fs = cum_fs[0]\n  cum_fs = cv2.applyColorMap((cum_fs*255).astype(np.uint8), cv2.COLORMAP_JET)\n  im = Image.fromarray(cum_fs)\n  im = ImageTk.PhotoImage(im)\n  panel_overhead = tk.Label(root, image=im)\n\n  def refresh():\n    global current_node\n    image = b.render_nodes(b.task.nodes[[current_node],:])[0]\n    image = image.astype(np.uint8)\n    im = Image.fromarray(image)\n    im = ImageTk.PhotoImage(im)\n    panel.configure(image=im)\n    panel.image = im\n\n  def left_key(event):\n    global current_node\n    current_node = b.take_action([current_node], [2], 1)[0][0]\n    refresh()\n\n  def up_key(event):\n    global current_node\n    current_node = b.take_action([current_node], [3], 1)[0][0]\n    refresh()\n\n  def right_key(event):\n    global current_node\n    current_node = b.take_action([current_node], [1], 1)[0][0]\n    refresh()\n\n  def quit(event):\n    root.destroy()\n\n  panel_overhead.grid(row=4, column=5, rowspan=1, columnspan=1,\n                      sticky=tk.W+tk.E+tk.N+tk.S)\n  panel.bind('<Left>', left_key)\n  panel.bind('<Up>', up_key)\n  panel.bind('<Right>', right_key)\n  panel.bind('q', quit)\n  panel.focus_set()\n  panel.grid(row=0, column=0, rowspan=5, columnspan=5,\n             sticky=tk.W+tk.E+tk.N+tk.S)\n  root.mainloop()\n\ndef simple_window():\n  root = tk.Tk()\n\n  image = np.zeros((128, 128, 3), dtype=np.uint8)\n  image[32:96, 32:96, 0] = 255\n  im = Image.fromarray(image)\n  im = ImageTk.PhotoImage(im)\n\n  image = np.zeros((128, 128, 3), dtype=np.uint8)\n  image[32:96, 32:96, 1] = 255\n  im2 = Image.fromarray(image)\n  im2 = ImageTk.PhotoImage(im2)\n\n  panel = tk.Label(root, image=im)\n\n  def left_key(event):\n    panel.configure(image=im2)\n    panel.image = im2\n\n  def quit(event):\n    sys.exit()\n\n  panel.bind('<Left>', left_key)\n  panel.bind('<Up>', left_key)\n  panel.bind('<Down>', left_key)\n  panel.bind('q', quit)\n  panel.focus_set()\n  panel.pack(side = \"bottom\", fill = \"both\", expand = \"yes\")\n  root.mainloop()\n\ndef main(_):\n  b = load_building(FLAGS.dataset_name, FLAGS.building_name)\n  walk_through(b)\n\nif __name__ == '__main__':\n  app.run()\n", "comments": "   a simple python function walk enviornments created  pythonpath     pyopengl platform egl python scripts script env vis py       dataset name sbpd   building name area3        copyright 2016 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       navtask task params semantic task class map names     chair    door    table      navtask task params type    nearest obj acc     init agent random location environment  ", "content": "# Copyright 2016 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"A simple python function to walk in the enviornments that we have created.\nPYTHONPATH='.' PYOPENGL_PLATFORM=egl python scripts/script_env_vis.py \\\n  --dataset_name sbpd --building_name area3\n\"\"\"\nimport sys\nimport numpy as np\nimport matplotlib\nmatplotlib.use('TkAgg')\nfrom PIL import ImageTk, Image\nimport Tkinter as tk\nimport logging\nfrom tensorflow.python.platform import app\nfrom tensorflow.python.platform import flags\n\nimport datasets.nav_env_config as nec\nimport datasets.nav_env as nav_env\nimport cv2\nfrom datasets import factory\nimport render.swiftshader_renderer as renderer\n\nSwiftshaderRenderer = renderer.SwiftshaderRenderer\nVisualNavigationEnv = nav_env.VisualNavigationEnv\n\nFLAGS = flags.FLAGS\nflags.DEFINE_string('dataset_name', 'sbpd', 'Name of the dataset.')\nflags.DEFINE_float('fov', 60., 'Field of view')\nflags.DEFINE_integer('image_size', 512, 'Size of the image.')\nflags.DEFINE_string('building_name', '', 'Name of the building.')\n\ndef get_args():\n  navtask = nec.nav_env_base_config()\n  navtask.task_params.type = 'rng_rejection_sampling_many'\n  navtask.task_params.rejection_sampling_M = 2000\n  navtask.task_params.min_dist = 10\n  sz = FLAGS.image_size\n  navtask.camera_param.fov = FLAGS.fov\n  navtask.camera_param.height = sz\n  navtask.camera_param.width = sz\n  navtask.task_params.img_height = sz\n  navtask.task_params.img_width = sz\n\n  # navtask.task_params.semantic_task.class_map_names = ['chair', 'door', 'table']\n  # navtask.task_params.type = 'to_nearest_obj_acc'\n\n  logging.info('navtask: %s', navtask)\n  return navtask\n\ndef load_building(dataset_name, building_name):\n  dataset = factory.get_dataset(dataset_name)\n\n  navtask = get_args()\n  cp = navtask.camera_param\n  rgb_shader, d_shader = renderer.get_shaders(cp.modalities)\n  r_obj = SwiftshaderRenderer()\n  r_obj.init_display(width=cp.width, height=cp.height,\n                     fov=cp.fov, z_near=cp.z_near, z_far=cp.z_far,\n                     rgb_shader=rgb_shader, d_shader=d_shader)\n  r_obj.clear_scene()\n  b = VisualNavigationEnv(robot=navtask.robot, env=navtask.env,\n                          task_params=navtask.task_params,\n                          building_name=building_name, flip=False,\n                          logdir=None, building_loader=dataset,\n                          r_obj=r_obj)\n  b.load_building_into_scene()\n  b.set_building_visibility(False)\n  return b\n\ndef walk_through(b):\n  # init agent at a random location in the environment.\n  init_env_state = b.reset([np.random.RandomState(0), np.random.RandomState(0)])\n\n  global current_node\n  rng = np.random.RandomState(0)\n  current_node = rng.choice(b.task.nodes.shape[0])\n\n  root = tk.Tk()\n  image = b.render_nodes(b.task.nodes[[current_node],:])[0]\n  print(image.shape)\n  image = image.astype(np.uint8)\n  im = Image.fromarray(image)\n  im = ImageTk.PhotoImage(im)\n  panel = tk.Label(root, image=im)\n\n  map_size = b.traversible.shape\n  sc = np.max(map_size)/256.\n  loc = np.array([[map_size[1]/2., map_size[0]/2.]])\n  x_axis = np.zeros_like(loc); x_axis[:,1] = sc\n  y_axis = np.zeros_like(loc); y_axis[:,0] = -sc\n  cum_fs, cum_valid = nav_env.get_map_to_predict(loc, x_axis, y_axis,\n                                                   map=b.traversible*1.,\n                                                   map_size=256)\n  cum_fs = cum_fs[0]\n  cum_fs = cv2.applyColorMap((cum_fs*255).astype(np.uint8), cv2.COLORMAP_JET)\n  im = Image.fromarray(cum_fs)\n  im = ImageTk.PhotoImage(im)\n  panel_overhead = tk.Label(root, image=im)\n\n  def refresh():\n    global current_node\n    image = b.render_nodes(b.task.nodes[[current_node],:])[0]\n    image = image.astype(np.uint8)\n    im = Image.fromarray(image)\n    im = ImageTk.PhotoImage(im)\n    panel.configure(image=im)\n    panel.image = im\n\n  def left_key(event):\n    global current_node\n    current_node = b.take_action([current_node], [2], 1)[0][0]\n    refresh()\n\n  def up_key(event):\n    global current_node\n    current_node = b.take_action([current_node], [3], 1)[0][0]\n    refresh()\n\n  def right_key(event):\n    global current_node\n    current_node = b.take_action([current_node], [1], 1)[0][0]\n    refresh()\n\n  def quit(event):\n    root.destroy()\n\n  panel_overhead.grid(row=4, column=5, rowspan=1, columnspan=1,\n                      sticky=tk.W+tk.E+tk.N+tk.S)\n  panel.bind('<Left>', left_key)\n  panel.bind('<Up>', up_key)\n  panel.bind('<Right>', right_key)\n  panel.bind('q', quit)\n  panel.focus_set()\n  panel.grid(row=0, column=0, rowspan=5, columnspan=5,\n             sticky=tk.W+tk.E+tk.N+tk.S)\n  root.mainloop()\n\ndef simple_window():\n  root = tk.Tk()\n\n  image = np.zeros((128, 128, 3), dtype=np.uint8)\n  image[32:96, 32:96, 0] = 255\n  im = Image.fromarray(image)\n  im = ImageTk.PhotoImage(im)\n\n  image = np.zeros((128, 128, 3), dtype=np.uint8)\n  image[32:96, 32:96, 1] = 255\n  im2 = Image.fromarray(image)\n  im2 = ImageTk.PhotoImage(im2)\n\n  panel = tk.Label(root, image=im)\n\n  def left_key(event):\n    panel.configure(image=im2)\n    panel.image = im2\n\n  def quit(event):\n    sys.exit()\n\n  panel.bind('<Left>', left_key)\n  panel.bind('<Up>', left_key)\n  panel.bind('<Down>', left_key)\n  panel.bind('q', quit)\n  panel.focus_set()\n  panel.pack(side = \"bottom\", fill = \"both\", expand = \"yes\")\n  root.mainloop()\n\ndef main(_):\n  b = load_building(FLAGS.dataset_name, FLAGS.building_name)\n  walk_through(b)\n\nif __name__ == '__main__':\n  app.run()\n", "description": "Models and examples built with TensorFlow", "file_name": "script_env_vis.py", "id": "cd49723fdc5498a6ca28b3494ee6e0a0", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/cognitive_mapping_and_planning/scripts/script_env_vis.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}