{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass RadioDeIE(InfoExtractor):\n    IE_NAME = 'radio.de'\n    _VALID_URL = r'https?://(?P<id>.+?)\\.(?:radio\\.(?:de|at|fr|pt|es|pl|it)|rad\\.io)'\n    _TEST = {\n        'url': 'http://ndr2.radio.de/',\n        'info_dict': {\n            'id': 'ndr2',\n            'ext': 'mp3',\n            'title': 're:^NDR 2 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'description': 'md5:591c49c702db1a33751625ebfb67f273',\n            'thumbnail': r're:^https?://.*\\.png',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        radio_id = self._match_id(url)\n        webpage = self._download_webpage(url, radio_id)\n        jscode = self._search_regex(\n            r\"'components/station/stationService':\\s*\\{\\s*'?station'?:\\s*(\\{.*?\\s*\\}),\\n\",\n            webpage, 'broadcast')\n\n        broadcast = self._parse_json(jscode, radio_id)\n        title = self._live_title(broadcast['name'])\n        description = broadcast.get('description') or broadcast.get('shortDescription')\n        thumbnail = broadcast.get('picture4Url') or broadcast.get('picture4TransUrl') or broadcast.get('logo100x100')\n\n        formats = [{\n            'url': stream['streamUrl'],\n            'ext': stream['streamContentFormat'].lower(),\n            'acodec': stream['streamContentFormat'],\n            'abr': stream['bitRate'],\n            'asr': stream['sampleRate']\n        } for stream in broadcast['streamUrls']]\n        self._sort_formats(formats)\n\n        return {\n            'id': radio_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'is_live': True,\n            'formats': formats,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass RadioDeIE(InfoExtractor):\n    IE_NAME = 'radio.de'\n    _VALID_URL = r'https?://(?P<id>.+?)\\.(?:radio\\.(?:de|at|fr|pt|es|pl|it)|rad\\.io)'\n    _TEST = {\n        'url': 'http://ndr2.radio.de/',\n        'info_dict': {\n            'id': 'ndr2',\n            'ext': 'mp3',\n            'title': 're:^NDR 2 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'description': 'md5:591c49c702db1a33751625ebfb67f273',\n            'thumbnail': r're:^https?://.*\\.png',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        radio_id = self._match_id(url)\n        webpage = self._download_webpage(url, radio_id)\n        jscode = self._search_regex(\n            r\"'components/station/stationService':\\s*\\{\\s*'?station'?:\\s*(\\{.*?\\s*\\}),\\n\",\n            webpage, 'broadcast')\n\n        broadcast = self._parse_json(jscode, radio_id)\n        title = self._live_title(broadcast['name'])\n        description = broadcast.get('description') or broadcast.get('shortDescription')\n        thumbnail = broadcast.get('picture4Url') or broadcast.get('picture4TransUrl') or broadcast.get('logo100x100')\n\n        formats = [{\n            'url': stream['streamUrl'],\n            'ext': stream['streamContentFormat'].lower(),\n            'acodec': stream['streamContentFormat'],\n            'abr': stream['bitRate'],\n            'asr': stream['sampleRate']\n        } for stream in broadcast['streamUrls']]\n        self._sort_formats(formats)\n\n        return {\n            'id': radio_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'is_live': True,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "radiode.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/radiode.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}