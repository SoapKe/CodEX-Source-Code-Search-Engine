{"author": "django", "code": "from django.core import management\nfrom django.core.management import CommandError\nfrom django.test import TestCase\n\nfrom .models import Article\n\n\nclass SampleTestCase(TestCase):\n    fixtures = ['fixture1.json', 'fixture2.json']\n\n    def testClassFixtures(self):\n        \"Test cases can load fixture objects into models defined in packages\"\n        self.assertEqual(Article.objects.count(), 3)\n        self.assertQuerysetEqual(\n            Article.objects.all(), [\n                \"Django conquers world!\",\n                \"Copyright is fine the way it is\",\n                \"Poker has no place on ESPN\",\n            ],\n            lambda a: a.headline\n        )\n\n\nclass FixtureTestCase(TestCase):\n\n    def test_loaddata(self):\n        \"Fixtures can load data into models defined in packages\"\n        \n        management.call_command(\"loaddata\", \"fixture1.json\", verbosity=0)\n        self.assertQuerysetEqual(\n            Article.objects.all(), [\n                \"Time to reform copyright\",\n                \"Poker has no place on ESPN\",\n            ],\n            lambda a: a.headline,\n        )\n\n        \n        \n        management.call_command(\"loaddata\", \"fixture2.json\", verbosity=0)\n        self.assertQuerysetEqual(\n            Article.objects.all(), [\n                \"Django conquers world!\",\n                \"Copyright is fine the way it is\",\n                \"Poker has no place on ESPN\",\n            ],\n            lambda a: a.headline,\n        )\n\n        \n        with self.assertRaisesMessage(CommandError, \"No fixture named 'unknown' found.\"):\n            management.call_command(\"loaddata\", \"unknown.json\", verbosity=0)\n\n        self.assertQuerysetEqual(\n            Article.objects.all(), [\n                \"Django conquers world!\",\n                \"Copyright is fine the way it is\",\n                \"Poker has no place on ESPN\",\n            ],\n            lambda a: a.headline,\n        )\n", "comments": "  load fixture 1  single json file  two objects    load fixture 2  json file imported default  overwrites    existing objects    load fixture exist ", "content": "from django.core import management\nfrom django.core.management import CommandError\nfrom django.test import TestCase\n\nfrom .models import Article\n\n\nclass SampleTestCase(TestCase):\n    fixtures = ['fixture1.json', 'fixture2.json']\n\n    def testClassFixtures(self):\n        \"Test cases can load fixture objects into models defined in packages\"\n        self.assertEqual(Article.objects.count(), 3)\n        self.assertQuerysetEqual(\n            Article.objects.all(), [\n                \"Django conquers world!\",\n                \"Copyright is fine the way it is\",\n                \"Poker has no place on ESPN\",\n            ],\n            lambda a: a.headline\n        )\n\n\nclass FixtureTestCase(TestCase):\n\n    def test_loaddata(self):\n        \"Fixtures can load data into models defined in packages\"\n        # Load fixture 1. Single JSON file, with two objects\n        management.call_command(\"loaddata\", \"fixture1.json\", verbosity=0)\n        self.assertQuerysetEqual(\n            Article.objects.all(), [\n                \"Time to reform copyright\",\n                \"Poker has no place on ESPN\",\n            ],\n            lambda a: a.headline,\n        )\n\n        # Load fixture 2. JSON file imported by default. Overwrites some\n        # existing objects\n        management.call_command(\"loaddata\", \"fixture2.json\", verbosity=0)\n        self.assertQuerysetEqual(\n            Article.objects.all(), [\n                \"Django conquers world!\",\n                \"Copyright is fine the way it is\",\n                \"Poker has no place on ESPN\",\n            ],\n            lambda a: a.headline,\n        )\n\n        # Load a fixture that doesn't exist\n        with self.assertRaisesMessage(CommandError, \"No fixture named 'unknown' found.\"):\n            management.call_command(\"loaddata\", \"unknown.json\", verbosity=0)\n\n        self.assertQuerysetEqual(\n            Article.objects.all(), [\n                \"Django conquers world!\",\n                \"Copyright is fine the way it is\",\n                \"Poker has no place on ESPN\",\n            ],\n            lambda a: a.headline,\n        )\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "f43ba65aa82fb72125470f5fff026f24", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/fixtures_model_package/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}