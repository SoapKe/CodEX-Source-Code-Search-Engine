{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass Porn91IE(InfoExtractor):\n    IE_NAME = '91porn'\n    _VALID_URL = r'(?:https?://)(?:www\\.|)91porn\\.com/.+?\\?viewkey=(?P<id>[\\w\\d]+)'\n\n    _TEST = {\n        'url': 'http://91porn.com/view_video.php?viewkey=7e42283b4f5ab36da134',\n        'md5': '7fcdb5349354f40d41689bd0fa8db05a',\n        'info_dict': {\n            'id': '7e42283b4f5ab36da134',\n            'title': '18\u5c81\u5927\u4e00\u6f02\u4eae\u5b66\u59b9\uff0c\u6c34\u5ae9\u6027\u611f\uff0c\u518d\u723d\u4e00\u6b21\uff01',\n            'ext': 'mp4',\n            'duration': 431,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        self._set_cookie('91porn.com', 'language', 'cn_CN')\n\n        webpage = self._download_webpage(\n            'http://91porn.com/view_video.php?viewkey=%s' % video_id, video_id)\n\n        if '\u4f5c\u4e3a\u6e38\u5ba2\uff0c\u4f60\u6bcf\u5929\u53ea\u53ef\u89c2\u770b10\u4e2a\u89c6\u9891' in webpage:\n            raise ExtractorError('91 Porn says: Daily limit 10 videos exceeded', expected=True)\n\n        title = self._search_regex(\n            r'<div id=\"viewvideo-title\">([^<]+)</div>', webpage, 'title')\n        title = title.replace('\\n', '')\n\n        info_dict = self._parse_html5_media_entries(url, webpage, video_id)[0]\n\n        duration = parse_duration(self._search_regex(\n            r'\u65f6\u957f:\\s*</span>\\s*(\\d+:\\d+)', webpage, 'duration', fatal=False))\n\n        comment_count = int_or_none(self._search_regex(\n            r'\u7559\u8a00:\\s*</span>\\s*(\\d+)', webpage, 'comment count', fatal=False))\n\n        info_dict.update({\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n            'comment_count': comment_count,\n            'age_limit': self._rta_search(webpage),\n        })\n\n        return info_dict\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass Porn91IE(InfoExtractor):\n    IE_NAME = '91porn'\n    _VALID_URL = r'(?:https?://)(?:www\\.|)91porn\\.com/.+?\\?viewkey=(?P<id>[\\w\\d]+)'\n\n    _TEST = {\n        'url': 'http://91porn.com/view_video.php?viewkey=7e42283b4f5ab36da134',\n        'md5': '7fcdb5349354f40d41689bd0fa8db05a',\n        'info_dict': {\n            'id': '7e42283b4f5ab36da134',\n            'title': '18\u5c81\u5927\u4e00\u6f02\u4eae\u5b66\u59b9\uff0c\u6c34\u5ae9\u6027\u611f\uff0c\u518d\u723d\u4e00\u6b21\uff01',\n            'ext': 'mp4',\n            'duration': 431,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        self._set_cookie('91porn.com', 'language', 'cn_CN')\n\n        webpage = self._download_webpage(\n            'http://91porn.com/view_video.php?viewkey=%s' % video_id, video_id)\n\n        if '\u4f5c\u4e3a\u6e38\u5ba2\uff0c\u4f60\u6bcf\u5929\u53ea\u53ef\u89c2\u770b10\u4e2a\u89c6\u9891' in webpage:\n            raise ExtractorError('91 Porn says: Daily limit 10 videos exceeded', expected=True)\n\n        title = self._search_regex(\n            r'<div id=\"viewvideo-title\">([^<]+)</div>', webpage, 'title')\n        title = title.replace('\\n', '')\n\n        info_dict = self._parse_html5_media_entries(url, webpage, video_id)[0]\n\n        duration = parse_duration(self._search_regex(\n            r'\u65f6\u957f:\\s*</span>\\s*(\\d+:\\d+)', webpage, 'duration', fatal=False))\n\n        comment_count = int_or_none(self._search_regex(\n            r'\u7559\u8a00:\\s*</span>\\s*(\\d+)', webpage, 'comment count', fatal=False))\n\n        info_dict.update({\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n            'comment_count': comment_count,\n            'age_limit': self._rta_search(webpage),\n        })\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "porn91.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/porn91.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}