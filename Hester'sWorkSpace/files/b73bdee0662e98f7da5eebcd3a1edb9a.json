{"author": "openai", "code": "\nimport argparse\nimport logging\nimport os\nimport re\nimport sys\n\nfrom universe import utils\nfrom universe.vncdriver import vnc_proxy_server\nfrom twisted.internet import protocol, reactor\n\nlogger = logging.getLogger()\n\ndef main():\n    parser = argparse.ArgumentParser(description=None)\n    parser.add_argument('-v', '--verbose', action='count', dest='verbosity', default=0, help='Set verbosity.')\n    parser.add_argument('-l', '--listen-address', default='0.0.0.0:5899', help='Address to listen on')\n    parser.add_argument('-s', '--vnc-address', default='127.0.0.1:5900', help='Address of the VNC server to run on.')\n    parser.add_argument('-d', '--logfile-dir', default=None, help='Base directory to write logs for each connection')\n    args = parser.parse_args()\n\n    if args.verbosity == 0:\n        logger.setLevel(logging.INFO)\n    elif args.verbosity >= 1:\n        logger.setLevel(logging.DEBUG)\n\n    factory = protocol.ServerFactory()\n    factory.protocol = vnc_proxy_server.VNCProxyServer\n    factory.vnc_address = 'tcp:{}'.format(args.vnc_address)\n    factory.logfile_dir = args.logfile_dir\n    factory.recorder_id = utils.random_alphanumeric().lower()\n\n    host, port = args.listen_address.split(':')\n    port = int(port)\n\n    logger.info('Listening on %s:%s', host, port)\n    reactor.listenTCP(port, factory, interface=host)\n    reactor.run()\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "comments": "   usr bin env python ", "content": "#!/usr/bin/env python\nimport argparse\nimport logging\nimport os\nimport re\nimport sys\n\nfrom universe import utils\nfrom universe.vncdriver import vnc_proxy_server\nfrom twisted.internet import protocol, reactor\n\nlogger = logging.getLogger()\n\ndef main():\n    parser = argparse.ArgumentParser(description=None)\n    parser.add_argument('-v', '--verbose', action='count', dest='verbosity', default=0, help='Set verbosity.')\n    parser.add_argument('-l', '--listen-address', default='0.0.0.0:5899', help='Address to listen on')\n    parser.add_argument('-s', '--vnc-address', default='127.0.0.1:5900', help='Address of the VNC server to run on.')\n    parser.add_argument('-d', '--logfile-dir', default=None, help='Base directory to write logs for each connection')\n    args = parser.parse_args()\n\n    if args.verbosity == 0:\n        logger.setLevel(logging.INFO)\n    elif args.verbosity >= 1:\n        logger.setLevel(logging.DEBUG)\n\n    factory = protocol.ServerFactory()\n    factory.protocol = vnc_proxy_server.VNCProxyServer\n    factory.vnc_address = 'tcp:{}'.format(args.vnc_address)\n    factory.logfile_dir = args.logfile_dir\n    factory.recorder_id = utils.random_alphanumeric().lower()\n\n    host, port = args.listen_address.split(':')\n    port = int(port)\n\n    logger.info('Listening on %s:%s', host, port)\n    reactor.listenTCP(port, factory, interface=host)\n    reactor.run()\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n", "description": "Universe: a software platform for measuring and training an AI's general intelligence across the world's supply of games, websites and other applications.", "file_name": "vnc_recorder.py", "id": "b73bdee0662e98f7da5eebcd3a1edb9a", "language": "Python", "project_name": "universe", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-universe/openai-universe-f95a5fe/example/recorders/vnc_recorder.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:39:09Z", "url": "https://github.com/openai/universe", "wiki": true}