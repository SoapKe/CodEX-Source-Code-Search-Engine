{"author": "rushter", "code": "import logging\n\ntry:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_regression\nfrom sklearn.metrics import roc_auc_score\n\nfrom mla.metrics.metrics import mean_squared_error\nfrom mla.neuralnet import NeuralNet\nfrom mla.neuralnet.constraints import MaxNorm\nfrom mla.neuralnet.layers import Activation, Dense, Dropout\nfrom mla.neuralnet.optimizers import Adadelta, Adam\nfrom mla.neuralnet.parameters import Parameters\nfrom mla.neuralnet.regularizers import L2\nfrom mla.utils import one_hot\n\nlogging.basicConfig(level=logging.DEBUG)\n\n\ndef classification():\n    \n    X, y = make_classification(n_samples=1000, n_features=100,\n                               n_informative=75, random_state=1111,\n                               n_classes=2, class_sep=2.5, )\n    y = one_hot(y)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15,\n                                                        random_state=1111)\n\n    model = NeuralNet(\n        layers=[\n            Dense(256, Parameters(init='uniform', regularizers={'W': L2(0.05)})),\n            Activation('relu'),\n            Dropout(0.5),\n            Dense(128, Parameters(init='normal', constraints={'W': MaxNorm()})),\n            Activation('relu'),\n            Dense(2),\n            Activation('softmax'),\n        ],\n        loss='categorical_crossentropy',\n        optimizer=Adadelta(),\n        metric='accuracy',\n        batch_size=64,\n        max_epochs=25,\n\n    )\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print('classification accuracy', roc_auc_score(y_test[:, 0], predictions[:, 0]))\n\n\ndef regression():\n    \n    X, y = make_regression(n_samples=5000, n_features=25, n_informative=25,\n                           n_targets=1, random_state=100, noise=0.05)\n    y *= 0.01\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1,\n                                                        random_state=1111)\n\n    model = NeuralNet(\n        layers=[\n            Dense(64, Parameters(init='normal')),\n            Activation('linear'),\n            Dense(32, Parameters(init='normal')),\n            Activation('linear'),\n            Dense(1),\n        ],\n        loss='mse',\n        optimizer=Adam(),\n        metric='mse',\n        batch_size=256,\n        max_epochs=15,\n    )\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print(\"regression mse\", mean_squared_error(y_test, predictions.flatten()))\n\n\nif __name__ == '__main__':\n    classification()\n    regression()\n", "comments": "  generate random binary classification problem     generate random regression problem ", "content": "import logging\n\ntry:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\nfrom sklearn.datasets import make_regression\nfrom sklearn.metrics import roc_auc_score\n\nfrom mla.metrics.metrics import mean_squared_error\nfrom mla.neuralnet import NeuralNet\nfrom mla.neuralnet.constraints import MaxNorm\nfrom mla.neuralnet.layers import Activation, Dense, Dropout\nfrom mla.neuralnet.optimizers import Adadelta, Adam\nfrom mla.neuralnet.parameters import Parameters\nfrom mla.neuralnet.regularizers import L2\nfrom mla.utils import one_hot\n\nlogging.basicConfig(level=logging.DEBUG)\n\n\ndef classification():\n    # Generate a random binary classification problem.\n    X, y = make_classification(n_samples=1000, n_features=100,\n                               n_informative=75, random_state=1111,\n                               n_classes=2, class_sep=2.5, )\n    y = one_hot(y)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15,\n                                                        random_state=1111)\n\n    model = NeuralNet(\n        layers=[\n            Dense(256, Parameters(init='uniform', regularizers={'W': L2(0.05)})),\n            Activation('relu'),\n            Dropout(0.5),\n            Dense(128, Parameters(init='normal', constraints={'W': MaxNorm()})),\n            Activation('relu'),\n            Dense(2),\n            Activation('softmax'),\n        ],\n        loss='categorical_crossentropy',\n        optimizer=Adadelta(),\n        metric='accuracy',\n        batch_size=64,\n        max_epochs=25,\n\n    )\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print('classification accuracy', roc_auc_score(y_test[:, 0], predictions[:, 0]))\n\n\ndef regression():\n    # Generate a random regression problem\n    X, y = make_regression(n_samples=5000, n_features=25, n_informative=25,\n                           n_targets=1, random_state=100, noise=0.05)\n    y *= 0.01\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1,\n                                                        random_state=1111)\n\n    model = NeuralNet(\n        layers=[\n            Dense(64, Parameters(init='normal')),\n            Activation('linear'),\n            Dense(32, Parameters(init='normal')),\n            Activation('linear'),\n            Dense(1),\n        ],\n        loss='mse',\n        optimizer=Adam(),\n        metric='mse',\n        batch_size=256,\n        max_epochs=15,\n    )\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    print(\"regression mse\", mean_squared_error(y_test, predictions.flatten()))\n\n\nif __name__ == '__main__':\n    classification()\n    regression()\n", "description": "Minimal and clean examples of machine learning algorithms", "file_name": "nnet_mlp.py", "id": "0b574e5ee0b2bc6489bbdc8ce5548a9b", "language": "Python", "project_name": "MLAlgorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rushter-MLAlgorithms/rushter-MLAlgorithms-d398777/examples/nnet_mlp.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:25:48Z", "url": "https://github.com/rushter/MLAlgorithms", "wiki": false}