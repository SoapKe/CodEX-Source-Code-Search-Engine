{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .streamable import StreamableIE\n\n\nclass FootyRoomIE(InfoExtractor):\n    _VALID_URL = r'https?://footyroom\\.com/matches/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://footyroom.com/matches/79922154/hull-city-vs-chelsea/review',\n        'info_dict': {\n            'id': '79922154',\n            'title': 'VIDEO Hull City 0 - 2 Chelsea',\n        },\n        'playlist_count': 2,\n        'add_ie': [StreamableIE.ie_key()],\n    }, {\n        'url': 'http://footyroom.com/matches/75817984/georgia-vs-germany/review',\n        'info_dict': {\n            'id': '75817984',\n            'title': 'VIDEO Georgia 0 - 2 Germany',\n        },\n        'playlist_count': 1,\n        'add_ie': ['Playwire']\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        playlist = self._parse_json(self._search_regex(\n            r'DataStore\\.media\\s*=\\s*([^;]+)', webpage, 'media data'),\n            playlist_id)\n\n        playlist_title = self._og_search_title(webpage)\n\n        entries = []\n        for video in playlist:\n            payload = video.get('payload')\n            if not payload:\n                continue\n            playwire_url = self._html_search_regex(\n                r'data-config=\"([^\"]+)\"', payload,\n                'playwire url', default=None)\n            if playwire_url:\n                entries.append(self.url_result(self._proto_relative_url(\n                    playwire_url, 'http:'), 'Playwire'))\n\n            streamable_url = StreamableIE._extract_url(payload)\n            if streamable_url:\n                entries.append(self.url_result(\n                    streamable_url, StreamableIE.ie_key()))\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .streamable import StreamableIE\n\n\nclass FootyRoomIE(InfoExtractor):\n    _VALID_URL = r'https?://footyroom\\.com/matches/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://footyroom.com/matches/79922154/hull-city-vs-chelsea/review',\n        'info_dict': {\n            'id': '79922154',\n            'title': 'VIDEO Hull City 0 - 2 Chelsea',\n        },\n        'playlist_count': 2,\n        'add_ie': [StreamableIE.ie_key()],\n    }, {\n        'url': 'http://footyroom.com/matches/75817984/georgia-vs-germany/review',\n        'info_dict': {\n            'id': '75817984',\n            'title': 'VIDEO Georgia 0 - 2 Germany',\n        },\n        'playlist_count': 1,\n        'add_ie': ['Playwire']\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        playlist = self._parse_json(self._search_regex(\n            r'DataStore\\.media\\s*=\\s*([^;]+)', webpage, 'media data'),\n            playlist_id)\n\n        playlist_title = self._og_search_title(webpage)\n\n        entries = []\n        for video in playlist:\n            payload = video.get('payload')\n            if not payload:\n                continue\n            playwire_url = self._html_search_regex(\n                r'data-config=\"([^\"]+)\"', payload,\n                'playwire url', default=None)\n            if playwire_url:\n                entries.append(self.url_result(self._proto_relative_url(\n                    playwire_url, 'http:'), 'Playwire'))\n\n            streamable_url = StreamableIE._extract_url(payload)\n            if streamable_url:\n                entries.append(self.url_result(\n                    streamable_url, StreamableIE.ie_key()))\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "footyroom.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/footyroom.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}