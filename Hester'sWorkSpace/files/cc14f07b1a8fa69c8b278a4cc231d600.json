{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n)\n\n\nclass ToonGogglesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?toongoggles\\.com/shows/(?P<show_id>\\d+)(?:/[^/]+/episodes/(?P<episode_id>\\d+))?'\n    _TESTS = [{\n        'url': 'http://www.toongoggles.com/shows/217143/bernard-season-2/episodes/217147/football',\n        'md5': '18289fc2b951eff6b953a9d8f01e6831',\n        'info_dict': {\n            'id': '217147',\n            'ext': 'mp4',\n            'title': 'Football',\n            'uploader_id': '1',\n            'description': 'Bernard decides to play football in order to be better than Lloyd and tries to beat him no matter how, he even cheats.',\n            'upload_date': '20160718',\n            'timestamp': 1468879330,\n        }\n    }, {\n        'url': 'http://www.toongoggles.com/shows/227759/om-nom-stories-around-the-world',\n        'info_dict': {\n            'id': '227759',\n            'title': 'Om Nom Stories Around The World',\n        },\n        'playlist_mincount': 11,\n    }]\n\n    def _call_api(self, action, page_id, query):\n        query.update({\n            'for_ng': 1,\n            'for_web': 1,\n            'show_meta': 1,\n            'version': 7.0,\n        })\n        return self._download_json('http://api.toongoggles.com/' + action, page_id, query=query)\n\n    def _parse_episode_data(self, episode_data):\n        title = episode_data['episode_name']\n\n        return {\n            '_type': 'url_transparent',\n            'id': episode_data['episode_id'],\n            'title': title,\n            'url': 'kaltura:513551:' + episode_data['entry_id'],\n            'thumbnail': episode_data.get('thumbnail_url'),\n            'description': episode_data.get('description'),\n            'duration': parse_duration(episode_data.get('hms')),\n            'series': episode_data.get('show_name'),\n            'season_number': int_or_none(episode_data.get('season_num')),\n            'episode_id': episode_data.get('episode_id'),\n            'episode': title,\n            'episode_number': int_or_none(episode_data.get('episode_num')),\n            'categories': episode_data.get('categories'),\n            'ie_key': 'Kaltura',\n        }\n\n    def _real_extract(self, url):\n        show_id, episode_id = re.match(self._VALID_URL, url).groups()\n        if episode_id:\n            episode_data = self._call_api('search', episode_id, {\n                'filter': 'episode',\n                'id': episode_id,\n            })['objects'][0]\n            return self._parse_episode_data(episode_data)\n        else:\n            show_data = self._call_api('getepisodesbyshow', show_id, {\n                'max': 1000000000,\n                'showid': show_id,\n            })\n            entries = []\n            for episode_data in show_data.get('objects', []):\n                entries.append(self._parse_episode_data(episode_data))\n            return self.playlist_result(entries, show_id, show_data.get('show_name'))\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n)\n\n\nclass ToonGogglesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?toongoggles\\.com/shows/(?P<show_id>\\d+)(?:/[^/]+/episodes/(?P<episode_id>\\d+))?'\n    _TESTS = [{\n        'url': 'http://www.toongoggles.com/shows/217143/bernard-season-2/episodes/217147/football',\n        'md5': '18289fc2b951eff6b953a9d8f01e6831',\n        'info_dict': {\n            'id': '217147',\n            'ext': 'mp4',\n            'title': 'Football',\n            'uploader_id': '1',\n            'description': 'Bernard decides to play football in order to be better than Lloyd and tries to beat him no matter how, he even cheats.',\n            'upload_date': '20160718',\n            'timestamp': 1468879330,\n        }\n    }, {\n        'url': 'http://www.toongoggles.com/shows/227759/om-nom-stories-around-the-world',\n        'info_dict': {\n            'id': '227759',\n            'title': 'Om Nom Stories Around The World',\n        },\n        'playlist_mincount': 11,\n    }]\n\n    def _call_api(self, action, page_id, query):\n        query.update({\n            'for_ng': 1,\n            'for_web': 1,\n            'show_meta': 1,\n            'version': 7.0,\n        })\n        return self._download_json('http://api.toongoggles.com/' + action, page_id, query=query)\n\n    def _parse_episode_data(self, episode_data):\n        title = episode_data['episode_name']\n\n        return {\n            '_type': 'url_transparent',\n            'id': episode_data['episode_id'],\n            'title': title,\n            'url': 'kaltura:513551:' + episode_data['entry_id'],\n            'thumbnail': episode_data.get('thumbnail_url'),\n            'description': episode_data.get('description'),\n            'duration': parse_duration(episode_data.get('hms')),\n            'series': episode_data.get('show_name'),\n            'season_number': int_or_none(episode_data.get('season_num')),\n            'episode_id': episode_data.get('episode_id'),\n            'episode': title,\n            'episode_number': int_or_none(episode_data.get('episode_num')),\n            'categories': episode_data.get('categories'),\n            'ie_key': 'Kaltura',\n        }\n\n    def _real_extract(self, url):\n        show_id, episode_id = re.match(self._VALID_URL, url).groups()\n        if episode_id:\n            episode_data = self._call_api('search', episode_id, {\n                'filter': 'episode',\n                'id': episode_id,\n            })['objects'][0]\n            return self._parse_episode_data(episode_data)\n        else:\n            show_data = self._call_api('getepisodesbyshow', show_id, {\n                'max': 1000000000,\n                'showid': show_id,\n            })\n            entries = []\n            for episode_data in show_data.get('objects', []):\n                entries.append(self._parse_episode_data(episode_data))\n            return self.playlist_result(entries, show_id, show_data.get('show_name'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "toongoggles.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/toongoggles.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}