{"author": "HelloZeroNet", "code": "import socket\nimport logging\nimport time\n\nimport msgpack\n\nfrom Debug import Debug\nfrom util import UpnpPunch\n\n\nclass BroadcastServer(object):\n    def __init__(self, service_name, listen_port=1544, listen_ip=''):\n        self.log = logging.getLogger(\"BroadcastServer\")\n        self.listen_port = listen_port\n        self.listen_ip = listen_ip\n\n        self.running = False\n        self.sock = None\n        self.sender_info = {\"service\": service_name}\n\n    def createBroadcastSocket(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if hasattr(socket, 'SO_REUSEPORT'):\n            try:\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n            except Exception as err:\n                self.log.warning(\"Error setting SO_REUSEPORT: %s\" % err)\n\n        binded = False\n        for retry in range(3):\n            try:\n                sock.bind((self.listen_ip, self.listen_port))\n                binded = True\n                break\n            except Exception as err:\n                self.log.error(\n                    \"Socket bind to %s:%s error: %s, retry \n                    (self.listen_ip, self.listen_port, Debug.formatException(err), retry)\n                )\n                time.sleep(retry)\n\n        if binded:\n            return sock\n        else:\n            return False\n\n    def start(self):  \n        self.sock = self.createBroadcastSocket()\n        if not self.sock:\n            self.log.error(\"Unable to listen on port %s\" % self.listen_port)\n            return\n\n        self.log.debug(\"Started on port %s\" % self.listen_port)\n\n        self.running = True\n\n        while self.running:\n            try:\n                data, addr = self.sock.recvfrom(8192)\n            except Exception as err:\n                if self.running:\n                    self.log.error(\"Listener receive error: %s\" % err)\n                continue\n\n            if not self.running:\n                break\n\n            try:\n                message = msgpack.unpackb(data)\n                response_addr, message = self.handleMessage(addr, message)\n                if message:\n                    self.send(response_addr, message)\n            except Exception as err:\n                self.log.error(\"Handlemessage error: %s\" % Debug.formatException(err))\n        self.log.debug(\"Stopped listening on port %s\" % self.listen_port)\n\n    def stop(self):\n        self.log.debug(\"Stopping, socket: %s\" % self.sock)\n        self.running = False\n        if self.sock:\n            self.sock.close()\n\n    def send(self, addr, message):\n        if type(message) is not list:\n            message = [message]\n\n        for message_part in message:\n            message_part[\"sender\"] = self.sender_info\n\n            self.log.debug(\"Send to %s: %s\" % (addr, message_part[\"cmd\"]))\n            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            sock.sendto(msgpack.packb(message_part), addr)\n\n    def getMyIps(self):\n        return UpnpPunch._get_local_ips()\n\n    def broadcast(self, message, port=None):\n        if not port:\n            port = self.listen_port\n\n        my_ips = self.getMyIps()\n        addr = (\"255.255.255.255\", port)\n\n        message[\"sender\"] = self.sender_info\n        self.log.debug(\"Broadcast using ips %s on port %s: %s\" % (my_ips, port, message[\"cmd\"]))\n\n        for my_ip in my_ips:\n            try:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n                sock.bind((my_ip, 0))\n                sock.sendto(msgpack.packb(message), addr)\n            except Exception as err:\n                self.log.warning(\"Error sending broadcast using ip %s: %s\" % (my_ip, err))\n\n    def handleMessage(self, addr, message):\n        self.log.debug(\"Got from %s: %s\" % (addr, message[\"cmd\"]))\n        cmd = message[\"cmd\"]\n        params = message.get(\"params\", {})\n        sender = message[\"sender\"]\n        sender[\"ip\"] = addr[0]\n\n        func_name = \"action\" + cmd[0].upper() + cmd[1:]\n        func = getattr(self, func_name, None)\n\n        if sender[\"service\"] != \"zeronet\" or sender[\"peer_id\"] == self.sender_info[\"peer_id\"]:\n            \n            message = None\n        elif func:\n            message = func(sender, params)\n        else:\n            self.log.debug(\"Unknown cmd: %s\" % cmd)\n            message = None\n\n        return (sender[\"ip\"], sender[\"broadcast_port\"]), message\n", "comments": "        listens discover requests    skip messages us sent us ", "content": "import socket\nimport logging\nimport time\n\nimport msgpack\n\nfrom Debug import Debug\nfrom util import UpnpPunch\n\n\nclass BroadcastServer(object):\n    def __init__(self, service_name, listen_port=1544, listen_ip=''):\n        self.log = logging.getLogger(\"BroadcastServer\")\n        self.listen_port = listen_port\n        self.listen_ip = listen_ip\n\n        self.running = False\n        self.sock = None\n        self.sender_info = {\"service\": service_name}\n\n    def createBroadcastSocket(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        if hasattr(socket, 'SO_REUSEPORT'):\n            try:\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)\n            except Exception as err:\n                self.log.warning(\"Error setting SO_REUSEPORT: %s\" % err)\n\n        binded = False\n        for retry in range(3):\n            try:\n                sock.bind((self.listen_ip, self.listen_port))\n                binded = True\n                break\n            except Exception as err:\n                self.log.error(\n                    \"Socket bind to %s:%s error: %s, retry #%s\" %\n                    (self.listen_ip, self.listen_port, Debug.formatException(err), retry)\n                )\n                time.sleep(retry)\n\n        if binded:\n            return sock\n        else:\n            return False\n\n    def start(self):  # Listens for discover requests\n        self.sock = self.createBroadcastSocket()\n        if not self.sock:\n            self.log.error(\"Unable to listen on port %s\" % self.listen_port)\n            return\n\n        self.log.debug(\"Started on port %s\" % self.listen_port)\n\n        self.running = True\n\n        while self.running:\n            try:\n                data, addr = self.sock.recvfrom(8192)\n            except Exception as err:\n                if self.running:\n                    self.log.error(\"Listener receive error: %s\" % err)\n                continue\n\n            if not self.running:\n                break\n\n            try:\n                message = msgpack.unpackb(data)\n                response_addr, message = self.handleMessage(addr, message)\n                if message:\n                    self.send(response_addr, message)\n            except Exception as err:\n                self.log.error(\"Handlemessage error: %s\" % Debug.formatException(err))\n        self.log.debug(\"Stopped listening on port %s\" % self.listen_port)\n\n    def stop(self):\n        self.log.debug(\"Stopping, socket: %s\" % self.sock)\n        self.running = False\n        if self.sock:\n            self.sock.close()\n\n    def send(self, addr, message):\n        if type(message) is not list:\n            message = [message]\n\n        for message_part in message:\n            message_part[\"sender\"] = self.sender_info\n\n            self.log.debug(\"Send to %s: %s\" % (addr, message_part[\"cmd\"]))\n            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n            sock.sendto(msgpack.packb(message_part), addr)\n\n    def getMyIps(self):\n        return UpnpPunch._get_local_ips()\n\n    def broadcast(self, message, port=None):\n        if not port:\n            port = self.listen_port\n\n        my_ips = self.getMyIps()\n        addr = (\"255.255.255.255\", port)\n\n        message[\"sender\"] = self.sender_info\n        self.log.debug(\"Broadcast using ips %s on port %s: %s\" % (my_ips, port, message[\"cmd\"]))\n\n        for my_ip in my_ips:\n            try:\n                sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n                sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)\n                sock.bind((my_ip, 0))\n                sock.sendto(msgpack.packb(message), addr)\n            except Exception as err:\n                self.log.warning(\"Error sending broadcast using ip %s: %s\" % (my_ip, err))\n\n    def handleMessage(self, addr, message):\n        self.log.debug(\"Got from %s: %s\" % (addr, message[\"cmd\"]))\n        cmd = message[\"cmd\"]\n        params = message.get(\"params\", {})\n        sender = message[\"sender\"]\n        sender[\"ip\"] = addr[0]\n\n        func_name = \"action\" + cmd[0].upper() + cmd[1:]\n        func = getattr(self, func_name, None)\n\n        if sender[\"service\"] != \"zeronet\" or sender[\"peer_id\"] == self.sender_info[\"peer_id\"]:\n            # Skip messages not for us or sent by us\n            message = None\n        elif func:\n            message = func(sender, params)\n        else:\n            self.log.debug(\"Unknown cmd: %s\" % cmd)\n            message = None\n\n        return (sender[\"ip\"], sender[\"broadcast_port\"]), message\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "BroadcastServer.py", "id": "3d874a8cdd3f591d8423215fe353cc54", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/AnnounceLocal/BroadcastServer.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}