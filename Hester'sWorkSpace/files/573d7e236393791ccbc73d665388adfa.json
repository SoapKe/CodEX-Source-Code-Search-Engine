{"author": "jakubroztocil", "code": "import mock\n\nfrom httpie import ExitStatus\nfrom utils import MockEnvironment, http, HTTP_OK\n\n\ndef test_keyboard_interrupt_during_arg_parsing_exit_status(httpbin):\n    with mock.patch('httpie.cli.parser.parse_args',\n                    side_effect=KeyboardInterrupt()):\n        r = http('GET', httpbin.url + '/get', error_exit_ok=True)\n        assert r.exit_status == ExitStatus.ERROR_CTRL_C\n\n\ndef test_keyboard_interrupt_in_program_exit_status(httpbin):\n    with mock.patch('httpie.core.program',\n                    side_effect=KeyboardInterrupt()):\n        r = http('GET', httpbin.url + '/get', error_exit_ok=True)\n        assert r.exit_status == ExitStatus.ERROR_CTRL_C\n\n\ndef test_ok_response_exits_0(httpbin):\n    r = http('GET', httpbin.url + '/get')\n    assert HTTP_OK in r\n    assert r.exit_status == ExitStatus.OK\n\n\ndef test_error_response_exits_0_without_check_status(httpbin):\n    r = http('GET', httpbin.url + '/status/500')\n    assert '500 INTERNAL SERVER ERRO' in r\n    assert r.exit_status == ExitStatus.OK\n    assert not r.stderr\n\n\ndef test_timeout_exit_status(httpbin):\n\n    r = http('--timeout=0.01', 'GET', httpbin.url + '/delay/0.02',\n             error_exit_ok=True)\n    assert r.exit_status == ExitStatus.ERROR_TIMEOUT\n\n\ndef test_3xx_check_status_exits_3_and_stderr_when_stdout_redirected(\n        httpbin):\n    env = MockEnvironment(stdout_isatty=False)\n    r = http('--check-status', '--headers',\n             'GET', httpbin.url + '/status/301',\n             env=env, error_exit_ok=True)\n    assert '301 MOVED PERMANENTLY' in r\n    assert r.exit_status == ExitStatus.ERROR_HTTP_3XX\n    assert '301 moved permanently' in r.stderr.lower()\n\n\ndef test_3xx_check_status_redirects_allowed_exits_0(httpbin):\n    r = http('--check-status', '--follow',\n             'GET', httpbin.url + '/status/301',\n             error_exit_ok=True)\n    \n    assert HTTP_OK in r\n    assert r.exit_status == ExitStatus.OK\n\n\ndef test_4xx_check_status_exits_4(httpbin):\n    r = http('--check-status', 'GET', httpbin.url + '/status/401',\n             error_exit_ok=True)\n    assert '401 UNAUTHORIZED' in r\n    assert r.exit_status == ExitStatus.ERROR_HTTP_4XX\n    \n    assert not r.stderr\n\n\ndef test_5xx_check_status_exits_5(httpbin):\n    r = http('--check-status', 'GET', httpbin.url + '/status/500',\n             error_exit_ok=True)\n    assert '500 INTERNAL SERVER ERROR' in r\n    assert r.exit_status == ExitStatus.ERROR_HTTP_5XX\n", "comments": "# The redirect will be followed so 200 is expected.\n# Also stderr should be empty since stdout isn't redirected.\n", "content": "import mock\n\nfrom httpie import ExitStatus\nfrom utils import MockEnvironment, http, HTTP_OK\n\n\ndef test_keyboard_interrupt_during_arg_parsing_exit_status(httpbin):\n    with mock.patch('httpie.cli.parser.parse_args',\n                    side_effect=KeyboardInterrupt()):\n        r = http('GET', httpbin.url + '/get', error_exit_ok=True)\n        assert r.exit_status == ExitStatus.ERROR_CTRL_C\n\n\ndef test_keyboard_interrupt_in_program_exit_status(httpbin):\n    with mock.patch('httpie.core.program',\n                    side_effect=KeyboardInterrupt()):\n        r = http('GET', httpbin.url + '/get', error_exit_ok=True)\n        assert r.exit_status == ExitStatus.ERROR_CTRL_C\n\n\ndef test_ok_response_exits_0(httpbin):\n    r = http('GET', httpbin.url + '/get')\n    assert HTTP_OK in r\n    assert r.exit_status == ExitStatus.OK\n\n\ndef test_error_response_exits_0_without_check_status(httpbin):\n    r = http('GET', httpbin.url + '/status/500')\n    assert '500 INTERNAL SERVER ERRO' in r\n    assert r.exit_status == ExitStatus.OK\n    assert not r.stderr\n\n\ndef test_timeout_exit_status(httpbin):\n\n    r = http('--timeout=0.01', 'GET', httpbin.url + '/delay/0.02',\n             error_exit_ok=True)\n    assert r.exit_status == ExitStatus.ERROR_TIMEOUT\n\n\ndef test_3xx_check_status_exits_3_and_stderr_when_stdout_redirected(\n        httpbin):\n    env = MockEnvironment(stdout_isatty=False)\n    r = http('--check-status', '--headers',\n             'GET', httpbin.url + '/status/301',\n             env=env, error_exit_ok=True)\n    assert '301 MOVED PERMANENTLY' in r\n    assert r.exit_status == ExitStatus.ERROR_HTTP_3XX\n    assert '301 moved permanently' in r.stderr.lower()\n\n\ndef test_3xx_check_status_redirects_allowed_exits_0(httpbin):\n    r = http('--check-status', '--follow',\n             'GET', httpbin.url + '/status/301',\n             error_exit_ok=True)\n    # The redirect will be followed so 200 is expected.\n    assert HTTP_OK in r\n    assert r.exit_status == ExitStatus.OK\n\n\ndef test_4xx_check_status_exits_4(httpbin):\n    r = http('--check-status', 'GET', httpbin.url + '/status/401',\n             error_exit_ok=True)\n    assert '401 UNAUTHORIZED' in r\n    assert r.exit_status == ExitStatus.ERROR_HTTP_4XX\n    # Also stderr should be empty since stdout isn't redirected.\n    assert not r.stderr\n\n\ndef test_5xx_check_status_exits_5(httpbin):\n    r = http('--check-status', 'GET', httpbin.url + '/status/500',\n             error_exit_ok=True)\n    assert '500 INTERNAL SERVER ERROR' in r\n    assert r.exit_status == ExitStatus.ERROR_HTTP_5XX\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_exit_status.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/tests/test_exit_status.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}