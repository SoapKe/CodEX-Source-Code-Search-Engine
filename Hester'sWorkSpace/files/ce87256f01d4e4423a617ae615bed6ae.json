{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport hashlib\nimport hmac\nimport time\nimport unittest\nfrom lxml import objectify\nfrom werkzeug import urls\n\nimport odoo\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.addons.payment_authorize.controllers.main import AuthorizeController\nfrom odoo.tools import mute_logger\n\n\n@odoo.tests.common.at_install(True)\n@odoo.tests.common.post_install(True)\nclass AuthorizeCommon(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(AuthorizeCommon, self).setUp()\n        \n        self.currency_usd = self.env['res.currency'].search([('name', '=', 'USD')], limit=1)[0]\n        \n        self.authorize = self.env.ref('payment.payment_acquirer_authorize')\n        \n        \n\n\n@odoo.tests.common.at_install(True)\n@odoo.tests.common.post_install(True)\nclass AuthorizeForm(AuthorizeCommon):\n\n    def _authorize_generate_hashing(self, values):\n        data = '^'.join([\n            values['x_login'],\n            values['x_fp_sequence'],\n            values['x_fp_timestamp'],\n            values['x_amount'],\n        ]) + '^'\n        return hmac.new(values['x_trans_key'].encode('utf-8'), data.encode('utf-8'), hashlib.md5).hexdigest()\n\n    def test_10_Authorize_form_render(self):\n        self.assertEqual(self.authorize.environment, 'test', 'test without test environment')\n\n        \n        \n        \n        base_url = self.env['ir.config_parameter'].get_param('web.base.url')\n        form_values = {\n            'x_login': self.authorize.authorize_login,\n            'x_trans_key': self.authorize.authorize_transaction_key,\n            'x_amount': '320.0',\n            'x_show_form': 'PAYMENT_FORM',\n            'x_type': 'AUTH_CAPTURE',\n            'x_method': 'CC',\n            'x_fp_sequence': '%s%s' % (self.authorize.id, int(time.time())),\n            'x_version': '3.1',\n            'x_relay_response': 'TRUE',\n            'x_fp_timestamp': str(int(time.time())),\n            'x_relay_url': urls.url_join(base_url, AuthorizeController._return_url),\n            'x_cancel_url': urls.url_join(base_url, AuthorizeController._cancel_url),\n            'return_url': None,\n            'x_currency_code': 'USD',\n            'x_invoice_num': 'SO004',\n            'x_first_name': 'Norbert',\n            'x_last_name': 'Buyer',\n            'x_company': 'Big Company',\n            'x_address': 'Huge Street 2/543',\n            'x_city': 'Sin City',\n            'x_zip': '1000',\n            'x_country': 'Belgium',\n            'x_phone': '0032 12 34 56 78',\n            'x_email': 'norbert.buyer@example.com',\n            'x_state': None,\n            'x_ship_to_first_name': 'Norbert',\n            'x_ship_to_last_name': 'Buyer',\n            'x_ship_to_address': 'Huge Street 2/543',\n            'x_ship_to_city': 'Sin City',\n            'x_ship_to_zip': '1000',\n            'x_ship_to_country': 'Belgium',\n            'x_ship_to_phone': '0032 12 34 56 78',\n            'x_ship_to_email': 'norbert.buyer@example.com',\n            'x_ship_to_state': None,\n        }\n\n        form_values['x_fp_hash'] = self._authorize_generate_hashing(form_values)\n        \n        res = self.authorize.render('SO004', 320.0, self.currency_usd.id, values=self.buyer_values)\n        \n        tree = objectify.fromstring(res)\n\n        data_set = tree.xpath(\"//input[@name='data_set']\")\n        self.assertEqual(len(data_set), 1, 'Authorize: Found %d \"data_set\" input instead of 1' % len(data_set))\n        self.assertEqual(data_set[0].get('data-action-url'), 'https://test.authorize.net/gateway/transact.dll', 'Authorize: wrong data-action-url POST url')\n        for el in tree.iterfind('input'):\n            values = list(el.attrib.values())\n            if values[1] in ['submit', 'x_fp_hash', 'return_url', 'x_state', 'x_ship_to_state', 'data_set']:\n                continue\n            self.assertEqual(\n                values[2],\n                form_values[values[1]],\n                'Authorize: wrong value for input %s: received %s instead of %s' % (values[1], values[2], form_values[values[1]])\n            )\n\n    @mute_logger('odoo.addons.payment_authorize.models.payment', 'ValidationError')\n    def test_20_authorize_form_management(self):\n        \n        self.assertEqual(self.authorize.environment, 'test', 'test without test environment')\n\n        \n        authorize_post_data = {\n            'return_url': u'/shop/payment/validate',\n            'x_MD5_Hash': u'7934485E1C105940BE854208D10FAB4F',\n            'x_account_number': u'XXXX0027',\n            'x_address': u'Huge Street 2/543',\n            'x_amount': u'320.00',\n            'x_auth_code': u'E4W7IU',\n            'x_avs_code': u'Y',\n            'x_card_type': u'Visa',\n            'x_cavv_response': u'2',\n            'x_city': u'Sun City',\n            'x_company': u'',\n            'x_country': u'Belgium',\n            'x_cust_id': u'',\n            'x_cvv2_resp_code': u'',\n            'x_description': u'',\n            'x_duty': u'0.00',\n            'x_email': u'norbert.buyer@example.com',\n            'x_fax': u'',\n            'x_first_name': u'Norbert',\n            'x_freight': u'0.00',\n            'x_invoice_num': u'SO004',\n            'x_last_name': u'Buyer',\n            'x_method': u'CC',\n            'x_phone': u'0032 12 34 56 78',\n            'x_po_num': u'',\n            'x_response_code': u'1',\n            'x_response_reason_code': u'1',\n            'x_response_reason_text': u'This transaction has been approved.',\n            'x_ship_to_address': u'Huge Street 2/543',\n            'x_ship_to_city': u'Sun City',\n            'x_ship_to_company': u'',\n            'x_ship_to_country': u'Belgium',\n            'x_ship_to_first_name': u'Norbert',\n            'x_ship_to_last_name': u'Buyer',\n            'x_ship_to_state': u'',\n            'x_ship_to_zip': u'1000',\n            'x_state': u'',\n            'x_tax': u'0.00',\n            'x_tax_exempt': u'FALSE',\n            'x_test_request': u'false',\n            'x_trans_id': u'2217460311',\n            'x_type': u'auth_capture',\n            'x_zip': u'1000'\n        }\n\n        \n        with self.assertRaises(ValidationError):\n            self.env['payment.transaction'].form_feedback(authorize_post_data, 'authorize')\n\n        tx = self.env['payment.transaction'].create({\n            'amount': 320.0,\n            'acquirer_id': self.authorize.id,\n            'currency_id': self.currency_usd.id,\n            'reference': 'SO004',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n        \n        self.env['payment.transaction'].form_feedback(authorize_post_data, 'authorize')\n        \n        self.assertEqual(tx.state, 'done', 'Authorize: validation did not put tx into done state')\n        self.assertEqual(tx.acquirer_reference, authorize_post_data.get('x_trans_id'), 'Authorize: validation did not update tx payid')\n\n        \n        tx.write({'state': 'draft', 'date_validate': False, 'acquirer_reference': False})\n\n        \n        authorize_post_data['x_response_code'] = u'3'\n        self.env['payment.transaction'].form_feedback(authorize_post_data, 'authorize')\n        \n        self.assertEqual(tx.state, 'error', 'Authorize: erroneous validation did not put tx into error state')\n\n    @unittest.skip(\"Authorize s2s test disabled: We do not want to overload Authorize.net with runbot's requests\")\n    def test_30_authorize_s2s(self):\n        \n        authorize = self.authorize\n        self.assertEqual(authorize.environment, 'test', 'test without test environment')\n\n        \n        # FIXME: put this test in master-nightly on odoo/odoo + create sandbox account\n        authorize.write({\n            'authorize_transaction_key': '',\n            'authorize_login': '',\n        })\n        self.assertTrue(authorize.authorize_test_credentials, 'Authorize.net: s2s authentication failed')\n\n        \n        payment_token = self.env['payment.token'].create({\n            'acquirer_id': authorize.id,\n            'partner_id': self.buyer_id,\n            'cc_number': '4111 1111 1111 1111',\n            'cc_expiry': '02 / 26',\n            'cc_brand': 'visa',\n            'cc_cvc': '111',\n            'cc_holder_name': 'test',\n        })\n\n        \n        transaction = self.env['payment.transaction'].create({\n            'amount': 500,\n            'acquirer_id': authorize.id,\n            'type': 'server2server',\n            'currency_id': self.currency_usd.id,\n            'reference': 'test_ref_%s' % int(time.time()),\n            'payment_token_id': payment_token.id,\n            'partner_id': self.buyer_id,\n\n        })\n        transaction.authorize_s2s_do_transaction()\n        self.assertEqual(transaction.state, 'done',)\n\n        \n        \n        self.authorize.capture_manually = True\n        transaction = self.env['payment.transaction'].create({\n            'amount': 500,\n            'acquirer_id': authorize.id,\n            'type': 'server2server',\n            'currency_id': self.currency_usd.id,\n            'reference': 'test_%s' % int(time.time()),\n            'payment_token_id': payment_token.id,\n            'partner_id': self.buyer_id,\n\n        })\n        transaction.authorize_s2s_do_transaction()\n        self.assertEqual(transaction.state, 'authorized')\n        transaction.action_capture()\n        self.assertEqual(transaction.state, 'done')\n\n        \n        self.authorize.capture_manually = True\n        transaction = self.env['payment.transaction'].create({\n            'amount': 500,\n            'acquirer_id': authorize.id,\n            'type': 'server2server',\n            'currency_id': self.currency_usd.id,\n            'reference': 'test_%s' % int(time.time()),\n            'payment_token_id': payment_token.id,\n            'partner_id': self.buyer_id,\n\n        })\n        transaction.authorize_s2s_do_transaction()\n        self.assertEqual(transaction.state, 'authorized')\n        transaction.action_void()\n        self.assertEqual(transaction.state, 'cancel')\n\n        \n        ghost_payment_token = payment_token.copy()\n        ghost_payment_token.authorize_profile = '99999999999'\n        \n        transaction = self.env['payment.transaction'].create({\n            'amount': 500,\n            'acquirer_id': authorize.id,\n            'type': 'server2server',\n            'currency_id': self.currency_usd.id,\n            'reference': 'test_ref_%s' % int(time.time()),\n            'payment_token_id': ghost_payment_token.id,\n            'partner_id': self.buyer_id,\n\n        })\n        transaction.authorize_s2s_do_transaction()\n        self.assertEqual(transaction.state, 'error')\n", "comments": "      coding  utf 8        authorize support usd test environment    get authorize account    be sure  capture  mode    self authorize auto confirm    confirm                                                 test  button direct rendering                                                render button    check form result    sure stupid thing    typical data posted authorize client successfully paid    raise error unknown tx    validate    check state    reset tx    simulate error    check state    sure stupid thing    add credential    fixme  put test master nightly odoo odoo   create sandbox account    create payment meethod    create normal s2s transaction    switch  authorize     create authorize s2s transaction   capture    create authorize s2s transaction   void    try charging unexisting profile    create normal s2s transaction ", "content": "# -*- coding: utf-8 -*-\n\nimport hashlib\nimport hmac\nimport time\nimport unittest\nfrom lxml import objectify\nfrom werkzeug import urls\n\nimport odoo\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.addons.payment_authorize.controllers.main import AuthorizeController\nfrom odoo.tools import mute_logger\n\n\n@odoo.tests.common.at_install(True)\n@odoo.tests.common.post_install(True)\nclass AuthorizeCommon(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(AuthorizeCommon, self).setUp()\n        # authorize only support USD in test environment\n        self.currency_usd = self.env['res.currency'].search([('name', '=', 'USD')], limit=1)[0]\n        # get the authorize account\n        self.authorize = self.env.ref('payment.payment_acquirer_authorize')\n        # Be sure to be in 'capture' mode\n        # self.authorize.auto_confirm = 'confirm_so'\n\n\n@odoo.tests.common.at_install(True)\n@odoo.tests.common.post_install(True)\nclass AuthorizeForm(AuthorizeCommon):\n\n    def _authorize_generate_hashing(self, values):\n        data = '^'.join([\n            values['x_login'],\n            values['x_fp_sequence'],\n            values['x_fp_timestamp'],\n            values['x_amount'],\n        ]) + '^'\n        return hmac.new(values['x_trans_key'].encode('utf-8'), data.encode('utf-8'), hashlib.md5).hexdigest()\n\n    def test_10_Authorize_form_render(self):\n        self.assertEqual(self.authorize.environment, 'test', 'test without test environment')\n\n        # ----------------------------------------\n        # Test: button direct rendering\n        # ----------------------------------------\n        base_url = self.env['ir.config_parameter'].get_param('web.base.url')\n        form_values = {\n            'x_login': self.authorize.authorize_login,\n            'x_trans_key': self.authorize.authorize_transaction_key,\n            'x_amount': '320.0',\n            'x_show_form': 'PAYMENT_FORM',\n            'x_type': 'AUTH_CAPTURE',\n            'x_method': 'CC',\n            'x_fp_sequence': '%s%s' % (self.authorize.id, int(time.time())),\n            'x_version': '3.1',\n            'x_relay_response': 'TRUE',\n            'x_fp_timestamp': str(int(time.time())),\n            'x_relay_url': urls.url_join(base_url, AuthorizeController._return_url),\n            'x_cancel_url': urls.url_join(base_url, AuthorizeController._cancel_url),\n            'return_url': None,\n            'x_currency_code': 'USD',\n            'x_invoice_num': 'SO004',\n            'x_first_name': 'Norbert',\n            'x_last_name': 'Buyer',\n            'x_company': 'Big Company',\n            'x_address': 'Huge Street 2/543',\n            'x_city': 'Sin City',\n            'x_zip': '1000',\n            'x_country': 'Belgium',\n            'x_phone': '0032 12 34 56 78',\n            'x_email': 'norbert.buyer@example.com',\n            'x_state': None,\n            'x_ship_to_first_name': 'Norbert',\n            'x_ship_to_last_name': 'Buyer',\n            'x_ship_to_address': 'Huge Street 2/543',\n            'x_ship_to_city': 'Sin City',\n            'x_ship_to_zip': '1000',\n            'x_ship_to_country': 'Belgium',\n            'x_ship_to_phone': '0032 12 34 56 78',\n            'x_ship_to_email': 'norbert.buyer@example.com',\n            'x_ship_to_state': None,\n        }\n\n        form_values['x_fp_hash'] = self._authorize_generate_hashing(form_values)\n        # render the button\n        res = self.authorize.render('SO004', 320.0, self.currency_usd.id, values=self.buyer_values)\n        # check form result\n        tree = objectify.fromstring(res)\n\n        data_set = tree.xpath(\"//input[@name='data_set']\")\n        self.assertEqual(len(data_set), 1, 'Authorize: Found %d \"data_set\" input instead of 1' % len(data_set))\n        self.assertEqual(data_set[0].get('data-action-url'), 'https://test.authorize.net/gateway/transact.dll', 'Authorize: wrong data-action-url POST url')\n        for el in tree.iterfind('input'):\n            values = list(el.attrib.values())\n            if values[1] in ['submit', 'x_fp_hash', 'return_url', 'x_state', 'x_ship_to_state', 'data_set']:\n                continue\n            self.assertEqual(\n                values[2],\n                form_values[values[1]],\n                'Authorize: wrong value for input %s: received %s instead of %s' % (values[1], values[2], form_values[values[1]])\n            )\n\n    @mute_logger('odoo.addons.payment_authorize.models.payment', 'ValidationError')\n    def test_20_authorize_form_management(self):\n        # be sure not to do stupid thing\n        self.assertEqual(self.authorize.environment, 'test', 'test without test environment')\n\n        # typical data posted by authorize after client has successfully paid\n        authorize_post_data = {\n            'return_url': u'/shop/payment/validate',\n            'x_MD5_Hash': u'7934485E1C105940BE854208D10FAB4F',\n            'x_account_number': u'XXXX0027',\n            'x_address': u'Huge Street 2/543',\n            'x_amount': u'320.00',\n            'x_auth_code': u'E4W7IU',\n            'x_avs_code': u'Y',\n            'x_card_type': u'Visa',\n            'x_cavv_response': u'2',\n            'x_city': u'Sun City',\n            'x_company': u'',\n            'x_country': u'Belgium',\n            'x_cust_id': u'',\n            'x_cvv2_resp_code': u'',\n            'x_description': u'',\n            'x_duty': u'0.00',\n            'x_email': u'norbert.buyer@example.com',\n            'x_fax': u'',\n            'x_first_name': u'Norbert',\n            'x_freight': u'0.00',\n            'x_invoice_num': u'SO004',\n            'x_last_name': u'Buyer',\n            'x_method': u'CC',\n            'x_phone': u'0032 12 34 56 78',\n            'x_po_num': u'',\n            'x_response_code': u'1',\n            'x_response_reason_code': u'1',\n            'x_response_reason_text': u'This transaction has been approved.',\n            'x_ship_to_address': u'Huge Street 2/543',\n            'x_ship_to_city': u'Sun City',\n            'x_ship_to_company': u'',\n            'x_ship_to_country': u'Belgium',\n            'x_ship_to_first_name': u'Norbert',\n            'x_ship_to_last_name': u'Buyer',\n            'x_ship_to_state': u'',\n            'x_ship_to_zip': u'1000',\n            'x_state': u'',\n            'x_tax': u'0.00',\n            'x_tax_exempt': u'FALSE',\n            'x_test_request': u'false',\n            'x_trans_id': u'2217460311',\n            'x_type': u'auth_capture',\n            'x_zip': u'1000'\n        }\n\n        # should raise error about unknown tx\n        with self.assertRaises(ValidationError):\n            self.env['payment.transaction'].form_feedback(authorize_post_data, 'authorize')\n\n        tx = self.env['payment.transaction'].create({\n            'amount': 320.0,\n            'acquirer_id': self.authorize.id,\n            'currency_id': self.currency_usd.id,\n            'reference': 'SO004',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n        # validate it\n        self.env['payment.transaction'].form_feedback(authorize_post_data, 'authorize')\n        # check state\n        self.assertEqual(tx.state, 'done', 'Authorize: validation did not put tx into done state')\n        self.assertEqual(tx.acquirer_reference, authorize_post_data.get('x_trans_id'), 'Authorize: validation did not update tx payid')\n\n        # reset tx\n        tx.write({'state': 'draft', 'date_validate': False, 'acquirer_reference': False})\n\n        # simulate an error\n        authorize_post_data['x_response_code'] = u'3'\n        self.env['payment.transaction'].form_feedback(authorize_post_data, 'authorize')\n        # check state\n        self.assertEqual(tx.state, 'error', 'Authorize: erroneous validation did not put tx into error state')\n\n    @unittest.skip(\"Authorize s2s test disabled: We do not want to overload Authorize.net with runbot's requests\")\n    def test_30_authorize_s2s(self):\n        # be sure not to do stupid thing\n        authorize = self.authorize\n        self.assertEqual(authorize.environment, 'test', 'test without test environment')\n\n        # add credential\n        # FIXME: put this test in master-nightly on odoo/odoo + create sandbox account\n        authorize.write({\n            'authorize_transaction_key': '',\n            'authorize_login': '',\n        })\n        self.assertTrue(authorize.authorize_test_credentials, 'Authorize.net: s2s authentication failed')\n\n        # create payment meethod\n        payment_token = self.env['payment.token'].create({\n            'acquirer_id': authorize.id,\n            'partner_id': self.buyer_id,\n            'cc_number': '4111 1111 1111 1111',\n            'cc_expiry': '02 / 26',\n            'cc_brand': 'visa',\n            'cc_cvc': '111',\n            'cc_holder_name': 'test',\n        })\n\n        # create normal s2s transaction\n        transaction = self.env['payment.transaction'].create({\n            'amount': 500,\n            'acquirer_id': authorize.id,\n            'type': 'server2server',\n            'currency_id': self.currency_usd.id,\n            'reference': 'test_ref_%s' % int(time.time()),\n            'payment_token_id': payment_token.id,\n            'partner_id': self.buyer_id,\n\n        })\n        transaction.authorize_s2s_do_transaction()\n        self.assertEqual(transaction.state, 'done',)\n\n        # switch to 'authorize only'\n        # create authorize only s2s transaction & capture it\n        self.authorize.capture_manually = True\n        transaction = self.env['payment.transaction'].create({\n            'amount': 500,\n            'acquirer_id': authorize.id,\n            'type': 'server2server',\n            'currency_id': self.currency_usd.id,\n            'reference': 'test_%s' % int(time.time()),\n            'payment_token_id': payment_token.id,\n            'partner_id': self.buyer_id,\n\n        })\n        transaction.authorize_s2s_do_transaction()\n        self.assertEqual(transaction.state, 'authorized')\n        transaction.action_capture()\n        self.assertEqual(transaction.state, 'done')\n\n        # create authorize only s2s transaction & void it\n        self.authorize.capture_manually = True\n        transaction = self.env['payment.transaction'].create({\n            'amount': 500,\n            'acquirer_id': authorize.id,\n            'type': 'server2server',\n            'currency_id': self.currency_usd.id,\n            'reference': 'test_%s' % int(time.time()),\n            'payment_token_id': payment_token.id,\n            'partner_id': self.buyer_id,\n\n        })\n        transaction.authorize_s2s_do_transaction()\n        self.assertEqual(transaction.state, 'authorized')\n        transaction.action_void()\n        self.assertEqual(transaction.state, 'cancel')\n\n        # try charging an unexisting profile\n        ghost_payment_token = payment_token.copy()\n        ghost_payment_token.authorize_profile = '99999999999'\n        # create normal s2s transaction\n        transaction = self.env['payment.transaction'].create({\n            'amount': 500,\n            'acquirer_id': authorize.id,\n            'type': 'server2server',\n            'currency_id': self.currency_usd.id,\n            'reference': 'test_ref_%s' % int(time.time()),\n            'payment_token_id': ghost_payment_token.id,\n            'partner_id': self.buyer_id,\n\n        })\n        transaction.authorize_s2s_do_transaction()\n        self.assertEqual(transaction.state, 'error')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_authorize.py", "id": "ce87256f01d4e4423a617ae615bed6ae", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_authorize/tests/test_authorize.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}