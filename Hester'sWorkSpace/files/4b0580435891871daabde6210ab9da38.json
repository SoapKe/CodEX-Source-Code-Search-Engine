{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    get_element_by_class,\n    js_to_json,\n)\n\n\nclass TVNoeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tvnoe\\.cz/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.tvnoe.cz/video/10362',\n        'md5': 'aee983f279aab96ec45ab6e2abb3c2ca',\n        'info_dict': {\n            'id': '10362',\n            'ext': 'mp4',\n            'series': 'No\u010dn\u00ed univerzita',\n            'title': 'prof. Tom\u00e1\u0161 Hal\u00edk, Th.D. - N\u00e1vrat n\u00e1bo\u017eenstv\u00ed a st\u0159et civilizac\u00ed',\n            'description': 'md5:f337bae384e1a531a52c55ebc50fff41',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        iframe_url = self._search_regex(\n            r'<iframe[^>]+src=\"([^\"]+)\"', webpage, 'iframe URL')\n\n        ifs_page = self._download_webpage(iframe_url, video_id)\n        jwplayer_data = self._find_jwplayer_data(\n            ifs_page, video_id, transform_source=js_to_json)\n        info_dict = self._parse_jwplayer_data(\n            jwplayer_data, video_id, require_title=False, base_url=iframe_url)\n\n        info_dict.update({\n            'id': video_id,\n            'title': clean_html(get_element_by_class(\n                'field-name-field-podnazev', webpage)),\n            'description': clean_html(get_element_by_class(\n                'field-name-body', webpage)),\n            'series': clean_html(get_element_by_class('title', webpage))\n        })\n\n        return info_dict\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    get_element_by_class,\n    js_to_json,\n)\n\n\nclass TVNoeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tvnoe\\.cz/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.tvnoe.cz/video/10362',\n        'md5': 'aee983f279aab96ec45ab6e2abb3c2ca',\n        'info_dict': {\n            'id': '10362',\n            'ext': 'mp4',\n            'series': 'No\u010dn\u00ed univerzita',\n            'title': 'prof. Tom\u00e1\u0161 Hal\u00edk, Th.D. - N\u00e1vrat n\u00e1bo\u017eenstv\u00ed a st\u0159et civilizac\u00ed',\n            'description': 'md5:f337bae384e1a531a52c55ebc50fff41',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        iframe_url = self._search_regex(\n            r'<iframe[^>]+src=\"([^\"]+)\"', webpage, 'iframe URL')\n\n        ifs_page = self._download_webpage(iframe_url, video_id)\n        jwplayer_data = self._find_jwplayer_data(\n            ifs_page, video_id, transform_source=js_to_json)\n        info_dict = self._parse_jwplayer_data(\n            jwplayer_data, video_id, require_title=False, base_url=iframe_url)\n\n        info_dict.update({\n            'id': video_id,\n            'title': clean_html(get_element_by_class(\n                'field-name-field-podnazev', webpage)),\n            'description': clean_html(get_element_by_class(\n                'field-name-body', webpage)),\n            'series': clean_html(get_element_by_class('title', webpage))\n        })\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tvnoe.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tvnoe.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}