{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_gtm_wide_ip import ApiParameters\n    from library.bigip_gtm_wide_ip import ModuleParameters\n    from library.bigip_gtm_wide_ip import ModuleManager\n    from library.bigip_gtm_wide_ip import ArgumentSpec\n    from library.bigip_gtm_wide_ip import UntypedManager\n    from library.bigip_gtm_wide_ip import TypedManager\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import ApiParameters\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import ModuleParameters\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import ModuleManager\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import ArgumentSpec\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import UntypedManager\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import TypedManager\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='foo.baz.bar',\n            lb_method='round-robin',\n        )\n        p = ModuleParameters(params=args)\n        assert p.name == 'foo.baz.bar'\n        assert p.pool_lb_method == 'round-robin'\n\n    def test_module_pools(self):\n        args = dict(\n            pools=[\n                dict(\n                    name='foo',\n                    ratio='100'\n                )\n            ]\n        )\n        p = ModuleParameters(params=args)\n        assert len(p.pools) == 1\n\n    def test_api_parameters(self):\n        args = dict(\n            name='foo.baz.bar',\n            poolLbMode='round-robin'\n        )\n        p = ApiParameters(params=args)\n        assert p.name == 'foo.baz.bar'\n        assert p.pool_lb_method == 'round-robin'\n\n    def test_api_pools(self):\n        args = load_fixture('load_gtm_wide_ip_with_pools.json')\n        p = ApiParameters(params=args)\n        assert len(p.pools) == 1\n        assert 'name' in p.pools[0]\n        assert 'ratio' in p.pools[0]\n        assert p.pools[0]['name'] == '/Common/baz'\n        assert p.pools[0]['ratio'] == 10\n\n    def test_module_not_fqdn_name(self):\n        args = dict(\n            name='foo.baz',\n            lb_method='round-robin'\n        )\n        with pytest.raises(F5ModuleError) as excinfo:\n            p = ModuleParameters(params=args)\n            assert p.name == 'foo.baz'\n        assert 'The provided name must be a valid FQDN' in str(excinfo)\n\n\nclass TestUntypedManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_wideip(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='round-robin',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        tm = UntypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'round-robin'\n\n\nclass TestTypedManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_wideip(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='round-robin',\n            type='a',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'round-robin'\n\n    def test_create_wideip_deprecated_lb_method1(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='round_robin',\n            type='a',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'round-robin'\n\n    def test_create_wideip_deprecated_lb_method2(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='global_availability',\n            type='a',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'global-availability'\n\n    def test_create_wideip_with_pool(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='round-robin',\n            type='a',\n            pools=[\n                dict(\n                    name='foo',\n                    ratio=10\n                )\n            ],\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'round-robin'\n\n    def test_create_wideip_with_pool_idempotent(self, *args):\n        set_module_args(dict(\n            name='foo.bar.com',\n            lb_method='round-robin',\n            type='a',\n            pools=[\n                dict(\n                    name='baz',\n                    ratio=10\n                )\n            ],\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        current = ApiParameters(params=load_fixture('load_gtm_wide_ip_with_pools.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=True)\n        tm.read_current_from_device = Mock(return_value=current)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_update_wideip_with_pool(self, *args):\n        set_module_args(dict(\n            name='foo.bar.com',\n            lb_method='round-robin',\n            type='a',\n            pools=[\n                dict(\n                    name='baz',\n                    ratio=10\n                ),\n                dict(\n                    name='alec',\n                    ratio=100\n                )\n            ],\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        current = ApiParameters(params=load_fixture('load_gtm_wide_ip_with_pools.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=True)\n        tm.read_current_from_device = Mock(return_value=current)\n        tm.update_on_device = Mock(return_value=True)\n\n         Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert 'pools' in results\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods specific type manager    override methods force specific logic module happen    override methods specific type manager    override methods force specific logic module happen    override methods specific type manager    override methods force specific logic module happen    override methods specific type manager    override methods force specific logic module happen    override methods specific type manager    override methods force specific logic module happen    override methods specific type manager    override methods force specific logic module happen    override methods specific type manager    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_gtm_wide_ip import ApiParameters\n    from library.bigip_gtm_wide_ip import ModuleParameters\n    from library.bigip_gtm_wide_ip import ModuleManager\n    from library.bigip_gtm_wide_ip import ArgumentSpec\n    from library.bigip_gtm_wide_ip import UntypedManager\n    from library.bigip_gtm_wide_ip import TypedManager\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import ApiParameters\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import ModuleParameters\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import ModuleManager\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import ArgumentSpec\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import UntypedManager\n        from ansible.modules.network.f5.bigip_gtm_wide_ip import TypedManager\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='foo.baz.bar',\n            lb_method='round-robin',\n        )\n        p = ModuleParameters(params=args)\n        assert p.name == 'foo.baz.bar'\n        assert p.pool_lb_method == 'round-robin'\n\n    def test_module_pools(self):\n        args = dict(\n            pools=[\n                dict(\n                    name='foo',\n                    ratio='100'\n                )\n            ]\n        )\n        p = ModuleParameters(params=args)\n        assert len(p.pools) == 1\n\n    def test_api_parameters(self):\n        args = dict(\n            name='foo.baz.bar',\n            poolLbMode='round-robin'\n        )\n        p = ApiParameters(params=args)\n        assert p.name == 'foo.baz.bar'\n        assert p.pool_lb_method == 'round-robin'\n\n    def test_api_pools(self):\n        args = load_fixture('load_gtm_wide_ip_with_pools.json')\n        p = ApiParameters(params=args)\n        assert len(p.pools) == 1\n        assert 'name' in p.pools[0]\n        assert 'ratio' in p.pools[0]\n        assert p.pools[0]['name'] == '/Common/baz'\n        assert p.pools[0]['ratio'] == 10\n\n    def test_module_not_fqdn_name(self):\n        args = dict(\n            name='foo.baz',\n            lb_method='round-robin'\n        )\n        with pytest.raises(F5ModuleError) as excinfo:\n            p = ModuleParameters(params=args)\n            assert p.name == 'foo.baz'\n        assert 'The provided name must be a valid FQDN' in str(excinfo)\n\n\nclass TestUntypedManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_wideip(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='round-robin',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        tm = UntypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'round-robin'\n\n\nclass TestTypedManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_wideip(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='round-robin',\n            type='a',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'round-robin'\n\n    def test_create_wideip_deprecated_lb_method1(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='round_robin',\n            type='a',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'round-robin'\n\n    def test_create_wideip_deprecated_lb_method2(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='global_availability',\n            type='a',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'global-availability'\n\n    def test_create_wideip_with_pool(self, *args):\n        set_module_args(dict(\n            name='foo.baz.bar',\n            lb_method='round-robin',\n            type='a',\n            pools=[\n                dict(\n                    name='foo',\n                    ratio=10\n                )\n            ],\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=False)\n        tm.create_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'foo.baz.bar'\n        assert results['state'] == 'present'\n        assert results['lb_method'] == 'round-robin'\n\n    def test_create_wideip_with_pool_idempotent(self, *args):\n        set_module_args(dict(\n            name='foo.bar.com',\n            lb_method='round-robin',\n            type='a',\n            pools=[\n                dict(\n                    name='baz',\n                    ratio=10\n                )\n            ],\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        current = ApiParameters(params=load_fixture('load_gtm_wide_ip_with_pools.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=True)\n        tm.read_current_from_device = Mock(return_value=current)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_update_wideip_with_pool(self, *args):\n        set_module_args(dict(\n            name='foo.bar.com',\n            lb_method='round-robin',\n            type='a',\n            pools=[\n                dict(\n                    name='baz',\n                    ratio=10\n                ),\n                dict(\n                    name='alec',\n                    ratio=100\n                )\n            ],\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        current = ApiParameters(params=load_fixture('load_gtm_wide_ip_with_pools.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        tm = TypedManager(module=module, params=module.params)\n        tm.exists = Mock(return_value=True)\n        tm.read_current_from_device = Mock(return_value=current)\n        tm.update_on_device = Mock(return_value=True)\n\n        # Override methods to force specific logic in the module to happen\n        mm = ModuleManager(module=module)\n        mm.version_is_less_than_12 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=tm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert 'pools' in results\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_gtm_wide_ip.py", "id": "15a0383fa9aab4cd2f5e6f97d1662f02", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_gtm_wide_ip.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}