{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n Copyright (c) 2016 Red Hat, Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ovirt_datacenter\nshort_description: Module to manage data centers in oVirt/RHV\nversion_added: \"2.3\"\nauthor: \"Ondra Machacek (@machacekondra)\"\ndescription:\n    - \"Module to manage data centers in oVirt/RHV\"\noptions:\n    name:\n        description:\n            - \"Name of the data center to manage.\"\n        required: true\n    state:\n        description:\n            - \"Should the data center be present or absent\"\n        choices: ['present', 'absent']\n        default: present\n    description:\n        description:\n            - \"Description of the data center.\"\n    comment:\n        description:\n            - \"Comment of the data center.\"\n    local:\n        description:\n            - \"I(True) if the data center should be local, I(False) if should be shared.\"\n            - \"Default value is set by engine.\"\n    compatibility_version:\n        description:\n            - \"Compatibility version of the data center.\"\n    quota_mode:\n        description:\n            - \"Quota mode of the data center. One of I(disabled), I(audit) or I(enabled)\"\n        choices: ['disabled', 'audit', 'enabled']\n    mac_pool:\n        description:\n            - \"MAC pool to be used by this datacenter.\"\n            - \"IMPORTANT: This option is deprecated in oVirt/RHV 4.1. You should\n               use C(mac_pool) in C(ovirt_clusters) module, as MAC pools are\n               set per cluster since 4.1.\"\n    force:\n        description:\n            - \"This parameter can be used only when removing a data center.\n              If I(True) data center will be forcibly removed, even though it\n              contains some clusters. Default value is I(False), which means\n              that only empty data center can be removed.\"\n        version_added: \"2.5\"\n        default: False\n\nextends_documentation_fragment: ovirt\n'''\n\nEXAMPLES = '''\n Examples don't contain auth parameter for simplicity,\n look at ovirt_auth module to see how to reuse authentication:\n\n Create datacenter\n- ovirt_datacenter:\n    name: mydatacenter\n    local: True\n    compatibility_version: 4.0\n    quota_mode: enabled\n\n Remove datacenter\n- ovirt_datacenter:\n    state: absent\n    name: mydatacenter\n'''\n\nRETURN = '''\nid:\n    description: \"ID of the managed datacenter\"\n    returned: \"On success if datacenter is found.\"\n    type: str\n    sample: 7de90f31-222c-436c-a1ca-7e655bd5b60c\ndata_center:\n    description: \"Dictionary of all the datacenter attributes. Datacenter attributes can be found on your oVirt/RHV instance\n                  at following url: http://ovirt.github.io/ovirt-engine-api-model/master/types/datacenter.\"\n    returned: \"On success if datacenter is found.\"\n    type: dict\n'''\n\nimport traceback\n\ntry:\n    import ovirtsdk4.types as otypes\nexcept ImportError:\n    pass\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ovirt import (\n    BaseModule,\n    check_sdk,\n    check_params,\n    create_connection,\n    equal,\n    ovirt_full_argument_spec,\n    search_by_name,\n)\n\n\nclass DatacentersModule(BaseModule):\n\n    def __get_major(self, full_version):\n        if full_version is None:\n            return None\n        if isinstance(full_version, otypes.Version):\n            return full_version.major\n        return int(full_version.split('.')[0])\n\n    def __get_minor(self, full_version):\n        if full_version is None:\n            return None\n        if isinstance(full_version, otypes.Version):\n            return full_version.minor\n        return int(full_version.split('.')[1])\n\n    def _get_mac_pool(self):\n        mac_pool = None\n        if self._module.params.get('mac_pool'):\n            mac_pool = search_by_name(\n                self._connection.system_service().mac_pools_service(),\n                self._module.params.get('mac_pool'),\n            )\n\n        return mac_pool\n\n    def build_entity(self):\n        return otypes.DataCenter(\n            name=self._module.params['name'],\n            comment=self._module.params['comment'],\n            description=self._module.params['description'],\n            mac_pool=otypes.MacPool(\n                id=getattr(self._get_mac_pool(), 'id', None),\n            ) if self._module.params.get('mac_pool') else None,\n            quota_mode=otypes.QuotaModeType(\n                self._module.params['quota_mode']\n            ) if self._module.params['quota_mode'] else None,\n            local=self._module.params['local'],\n            version=otypes.Version(\n                major=self.__get_major(self._module.params['compatibility_version']),\n                minor=self.__get_minor(self._module.params['compatibility_version']),\n            ) if self._module.params['compatibility_version'] else None,\n        )\n\n    def update_check(self, entity):\n        minor = self.__get_minor(self._module.params.get('compatibility_version'))\n        major = self.__get_major(self._module.params.get('compatibility_version'))\n        return (\n            equal(getattr(self._get_mac_pool(), 'id', None), getattr(entity.mac_pool, 'id', None)) and\n            equal(self._module.params.get('comment'), entity.comment) and\n            equal(self._module.params.get('description'), entity.description) and\n            equal(self._module.params.get('quota_mode'), str(entity.quota_mode)) and\n            equal(self._module.params.get('local'), entity.local) and\n            equal(minor, self.__get_minor(entity.version)) and\n            equal(major, self.__get_major(entity.version))\n        )\n\n\ndef main():\n    argument_spec = ovirt_full_argument_spec(\n        state=dict(\n            choices=['present', 'absent'],\n            default='present',\n        ),\n        name=dict(default=None, required=True),\n        description=dict(default=None),\n        local=dict(type='bool'),\n        compatibility_version=dict(default=None),\n        quota_mode=dict(choices=['disabled', 'audit', 'enabled']),\n        comment=dict(default=None),\n        mac_pool=dict(default=None),\n        force=dict(default=None, type='bool'),\n    )\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n    )\n\n    if module._name == 'ovirt_datacenters':\n        module.deprecate(\"The 'ovirt_datacenters' module is being renamed 'ovirt_datacenter'\", version=2.8)\n\n    check_sdk(module)\n    check_params(module)\n\n    try:\n        auth = module.params.pop('auth')\n        connection = create_connection(auth)\n        data_centers_service = connection.system_service().data_centers_service()\n        clusters_module = DatacentersModule(\n            connection=connection,\n            module=module,\n            service=data_centers_service,\n        )\n\n        state = module.params['state']\n        if state == 'present':\n            ret = clusters_module.create()\n        elif state == 'absent':\n            ret = clusters_module.remove(force=module.params['force'])\n\n        module.exit_json(**ret)\n    except Exception as e:\n        module.fail_json(msg=str(e), exception=traceback.format_exc())\n    finally:\n        connection.close(logout=auth.get('token') is None)\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  ovirt datacenter short description  module manage data centers ovirt rhv version added   2 3  author   ondra machacek ( machacekondra)  description         module manage data centers ovirt rhv  options      name          description                 name data center manage           required  true     state          description                 should data center present absent          choices    present    absent           default  present     description          description                 description data center       comment          description                 comment data center       local          description                 i(true) data center local  i(false) shared                  default value set engine       compatibility version          description                 compatibility version data center       quota mode          description                 quota mode data center  one i(disabled)  i(audit) i(enabled)          choices    disabled    audit    enabled       mac pool          description                 mac pool used datacenter                  important  this option deprecated ovirt rhv 4 1  you                use c(mac pool) c(ovirt clusters) module  mac pools                set per cluster since 4 1       force          description                 this parameter used removing data center                if i(true) data center forcibly removed  even though               contains clusters  default value i(false)  means               empty data center removed           version added   2 5          default  false  extends documentation fragment  ovirt      examples         examples contain auth parameter simplicity    look ovirt auth module see reuse authentication     create datacenter   ovirt datacenter      name  mydatacenter     local  true     compatibility version  4 0     quota mode  enabled    remove datacenter   ovirt datacenter      state  absent     name  mydatacenter      return       id      description   id managed datacenter      returned   on success datacenter found       type  str     sample  7de90f31 222c 436c a1ca 7e655bd5b60c data center      description   dictionary datacenter attributes  datacenter attributes found ovirt rhv instance                   following url  http   ovirt github io ovirt engine api model master  types datacenter       returned   on success datacenter found       type  dict         usr bin python        coding  utf 8           copyright (c) 2016 red hat  inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          examples contain auth parameter simplicity     look ovirt auth module see reuse authentication     create datacenter    remove datacenter   types datacenter   ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2016 Red Hat, Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ovirt_datacenter\nshort_description: Module to manage data centers in oVirt/RHV\nversion_added: \"2.3\"\nauthor: \"Ondra Machacek (@machacekondra)\"\ndescription:\n    - \"Module to manage data centers in oVirt/RHV\"\noptions:\n    name:\n        description:\n            - \"Name of the data center to manage.\"\n        required: true\n    state:\n        description:\n            - \"Should the data center be present or absent\"\n        choices: ['present', 'absent']\n        default: present\n    description:\n        description:\n            - \"Description of the data center.\"\n    comment:\n        description:\n            - \"Comment of the data center.\"\n    local:\n        description:\n            - \"I(True) if the data center should be local, I(False) if should be shared.\"\n            - \"Default value is set by engine.\"\n    compatibility_version:\n        description:\n            - \"Compatibility version of the data center.\"\n    quota_mode:\n        description:\n            - \"Quota mode of the data center. One of I(disabled), I(audit) or I(enabled)\"\n        choices: ['disabled', 'audit', 'enabled']\n    mac_pool:\n        description:\n            - \"MAC pool to be used by this datacenter.\"\n            - \"IMPORTANT: This option is deprecated in oVirt/RHV 4.1. You should\n               use C(mac_pool) in C(ovirt_clusters) module, as MAC pools are\n               set per cluster since 4.1.\"\n    force:\n        description:\n            - \"This parameter can be used only when removing a data center.\n              If I(True) data center will be forcibly removed, even though it\n              contains some clusters. Default value is I(False), which means\n              that only empty data center can be removed.\"\n        version_added: \"2.5\"\n        default: False\n\nextends_documentation_fragment: ovirt\n'''\n\nEXAMPLES = '''\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Create datacenter\n- ovirt_datacenter:\n    name: mydatacenter\n    local: True\n    compatibility_version: 4.0\n    quota_mode: enabled\n\n# Remove datacenter\n- ovirt_datacenter:\n    state: absent\n    name: mydatacenter\n'''\n\nRETURN = '''\nid:\n    description: \"ID of the managed datacenter\"\n    returned: \"On success if datacenter is found.\"\n    type: str\n    sample: 7de90f31-222c-436c-a1ca-7e655bd5b60c\ndata_center:\n    description: \"Dictionary of all the datacenter attributes. Datacenter attributes can be found on your oVirt/RHV instance\n                  at following url: http://ovirt.github.io/ovirt-engine-api-model/master/#types/datacenter.\"\n    returned: \"On success if datacenter is found.\"\n    type: dict\n'''\n\nimport traceback\n\ntry:\n    import ovirtsdk4.types as otypes\nexcept ImportError:\n    pass\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ovirt import (\n    BaseModule,\n    check_sdk,\n    check_params,\n    create_connection,\n    equal,\n    ovirt_full_argument_spec,\n    search_by_name,\n)\n\n\nclass DatacentersModule(BaseModule):\n\n    def __get_major(self, full_version):\n        if full_version is None:\n            return None\n        if isinstance(full_version, otypes.Version):\n            return full_version.major\n        return int(full_version.split('.')[0])\n\n    def __get_minor(self, full_version):\n        if full_version is None:\n            return None\n        if isinstance(full_version, otypes.Version):\n            return full_version.minor\n        return int(full_version.split('.')[1])\n\n    def _get_mac_pool(self):\n        mac_pool = None\n        if self._module.params.get('mac_pool'):\n            mac_pool = search_by_name(\n                self._connection.system_service().mac_pools_service(),\n                self._module.params.get('mac_pool'),\n            )\n\n        return mac_pool\n\n    def build_entity(self):\n        return otypes.DataCenter(\n            name=self._module.params['name'],\n            comment=self._module.params['comment'],\n            description=self._module.params['description'],\n            mac_pool=otypes.MacPool(\n                id=getattr(self._get_mac_pool(), 'id', None),\n            ) if self._module.params.get('mac_pool') else None,\n            quota_mode=otypes.QuotaModeType(\n                self._module.params['quota_mode']\n            ) if self._module.params['quota_mode'] else None,\n            local=self._module.params['local'],\n            version=otypes.Version(\n                major=self.__get_major(self._module.params['compatibility_version']),\n                minor=self.__get_minor(self._module.params['compatibility_version']),\n            ) if self._module.params['compatibility_version'] else None,\n        )\n\n    def update_check(self, entity):\n        minor = self.__get_minor(self._module.params.get('compatibility_version'))\n        major = self.__get_major(self._module.params.get('compatibility_version'))\n        return (\n            equal(getattr(self._get_mac_pool(), 'id', None), getattr(entity.mac_pool, 'id', None)) and\n            equal(self._module.params.get('comment'), entity.comment) and\n            equal(self._module.params.get('description'), entity.description) and\n            equal(self._module.params.get('quota_mode'), str(entity.quota_mode)) and\n            equal(self._module.params.get('local'), entity.local) and\n            equal(minor, self.__get_minor(entity.version)) and\n            equal(major, self.__get_major(entity.version))\n        )\n\n\ndef main():\n    argument_spec = ovirt_full_argument_spec(\n        state=dict(\n            choices=['present', 'absent'],\n            default='present',\n        ),\n        name=dict(default=None, required=True),\n        description=dict(default=None),\n        local=dict(type='bool'),\n        compatibility_version=dict(default=None),\n        quota_mode=dict(choices=['disabled', 'audit', 'enabled']),\n        comment=dict(default=None),\n        mac_pool=dict(default=None),\n        force=dict(default=None, type='bool'),\n    )\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n    )\n\n    if module._name == 'ovirt_datacenters':\n        module.deprecate(\"The 'ovirt_datacenters' module is being renamed 'ovirt_datacenter'\", version=2.8)\n\n    check_sdk(module)\n    check_params(module)\n\n    try:\n        auth = module.params.pop('auth')\n        connection = create_connection(auth)\n        data_centers_service = connection.system_service().data_centers_service()\n        clusters_module = DatacentersModule(\n            connection=connection,\n            module=module,\n            service=data_centers_service,\n        )\n\n        state = module.params['state']\n        if state == 'present':\n            ret = clusters_module.create()\n        elif state == 'absent':\n            ret = clusters_module.remove(force=module.params['force'])\n\n        module.exit_json(**ret)\n    except Exception as e:\n        module.fail_json(msg=str(e), exception=traceback.format_exc())\n    finally:\n        connection.close(logout=auth.get('token') is None)\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "_ovirt_datacenters.py", "id": "ab10f2df1dd3509241d5ba8772314cb4", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/ovirt/_ovirt_datacenters.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}