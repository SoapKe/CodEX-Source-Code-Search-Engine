{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    decode_packed_codes,\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    NO_DEFAULT,\n    urlencode_postdata,\n)\n\n\nclass XFileShareIE(InfoExtractor):\n    _SITES = (\n        (r'daclips\\.(?:in|com)', 'DaClips'),\n        (r'filehoot\\.com', 'FileHoot'),\n        (r'gorillavid\\.(?:in|com)', 'GorillaVid'),\n        (r'movpod\\.in', 'MovPod'),\n        (r'powerwatch\\.pw', 'PowerWatch'),\n        (r'rapidvideo\\.ws', 'Rapidvideo.ws'),\n        (r'thevideobee\\.to', 'TheVideoBee'),\n        (r'vidto\\.me', 'Vidto'),\n        (r'streamin\\.to', 'Streamin.To'),\n        (r'xvidstage\\.com', 'XVIDSTAGE'),\n        (r'vidabc\\.com', 'Vid ABC'),\n        (r'vidbom\\.com', 'VidBom'),\n        (r'vidlo\\.us', 'vidlo'),\n        (r'rapidvideo\\.(?:cool|org)', 'RapidVideo.TV'),\n        (r'fastvideo\\.me', 'FastVideo.me'),\n    )\n\n    IE_DESC = 'XFileShare based sites: %s' % ', '.join(list(zip(*_SITES))[1])\n    _VALID_URL = (r'https?://(?P<host>(?:www\\.)?(?:%s))/(?:embed-)?(?P<id>[0-9a-zA-Z]+)'\n                  % '|'.join(site for site in list(zip(*_SITES))[0]))\n\n    _FILE_NOT_FOUND_REGEXES = (\n        r'>(?:404 - )?File Not Found<',\n        r'>The file was removed by administrator<',\n    )\n\n    _TESTS = [{\n        'url': 'http://gorillavid.in/06y9juieqpmi',\n        'md5': '5ae4a3580620380619678ee4875893ba',\n        'info_dict': {\n            'id': '06y9juieqpmi',\n            'ext': 'mp4',\n            'title': 'Rebecca Black My Moment Official Music Video Reaction-6GK87Rc8bzQ',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n    }, {\n        'url': 'http://gorillavid.in/embed-z08zf8le23c6-960x480.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://daclips.in/3rso4kdn6f9m',\n        'md5': '1ad8fd39bb976eeb66004d3a4895f106',\n        'info_dict': {\n            'id': '3rso4kdn6f9m',\n            'ext': 'mp4',\n            'title': 'Micro Pig piglets ready on 16th July 2009-bG0PdrCdxUc',\n            'thumbnail': r're:http://.*\\.jpg',\n        }\n    }, {\n        'url': 'http://movpod.in/0wguyyxi1yca',\n        'only_matching': True,\n    }, {\n        'url': 'http://filehoot.com/3ivfabn7573c.html',\n        'info_dict': {\n            'id': '3ivfabn7573c',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video \\'\u00e4BaW_jenozKc.mp4.mp4',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n        'skip': 'Video removed',\n    }, {\n        'url': 'http://vidto.me/ku5glz52nqe1.html',\n        'info_dict': {\n            'id': 'ku5glz52nqe1',\n            'ext': 'mp4',\n            'title': 'test'\n        }\n    }, {\n        'url': 'http://powerwatch.pw/duecjibvicbu',\n        'info_dict': {\n            'id': 'duecjibvicbu',\n            'ext': 'mp4',\n            'title': 'Big Buck Bunny trailer',\n        },\n    }, {\n        'url': 'http://xvidstage.com/e0qcnl03co6z',\n        'info_dict': {\n            'id': 'e0qcnl03co6z',\n            'ext': 'mp4',\n            'title': 'Chucky Prank 2015.mp4',\n        },\n    }, {\n        \n        'url': 'http://xvidstage.com/amfy7atlkx25',\n        'only_matching': True,\n    }, {\n        'url': 'http://vidabc.com/i8ybqscrphfv',\n        'info_dict': {\n            'id': 'i8ybqscrphfv',\n            'ext': 'mp4',\n            'title': 're:Beauty and the Beast 2017',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.rapidvideo.cool/b667kprndr8w',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.fastvideo.me/k8604r8nk8sn/FAST_FURIOUS_8_-_Trailer_italiano_ufficiale.mp4.html',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        url = 'http://%s/%s' % (mobj.group('host'), video_id)\n        webpage = self._download_webpage(url, video_id)\n\n        if any(re.search(p, webpage) for p in self._FILE_NOT_FOUND_REGEXES):\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        fields = self._hidden_inputs(webpage)\n\n        if fields['op'] == 'download1':\n            countdown = int_or_none(self._search_regex(\n                r'<span id=\"countdown_str\">(?:[Ww]ait)?\\s*<span id=\"cxc\">(\\d+)</span>\\s*(?:seconds?)?</span>',\n                webpage, 'countdown', default=None))\n            if countdown:\n                self._sleep(countdown, video_id)\n\n            webpage = self._download_webpage(\n                url, video_id, 'Downloading video page',\n                data=urlencode_postdata(fields), headers={\n                    'Referer': url,\n                    'Content-type': 'application/x-www-form-urlencoded',\n                })\n\n        title = (self._search_regex(\n            (r'style=\"z-index: [0-9]+;\">([^<]+)</span>',\n             r'<td nowrap>([^<]+)</td>',\n             r'h4-fine[^>]*>([^<]+)<',\n             r'>Watch (.+) ',\n             r'<h2 class=\"video-page-head\">([^<]+)</h2>',\n             r'<h2 style=\"[^\"]*color:\n            webpage, 'title', default=None) or self._og_search_title(\n            webpage, default=None) or video_id).strip()\n\n        def extract_formats(default=NO_DEFAULT):\n            urls = []\n            for regex in (\n                    r'(?:file|src)\\s*:\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1',\n                    r'file_link\\s*=\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+)\\1',\n                    r'addVariable\\((\\\\?[\"\\'])file\\1\\s*,\\s*(\\\\?[\"\\'])(?P<url>http(?:(?!\\2).)+)\\2\\)',\n                    r'<embed[^>]+src=([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1'):\n                for mobj in re.finditer(regex, webpage):\n                    video_url = mobj.group('url')\n                    if video_url not in urls:\n                        urls.append(video_url)\n            formats = []\n            for video_url in urls:\n                if determine_ext(video_url) == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        video_url, video_id, 'mp4',\n                        entry_protocol='m3u8_native', m3u8_id='hls',\n                        fatal=False))\n                else:\n                    formats.append({\n                        'url': video_url,\n                        'format_id': 'sd',\n                    })\n            if not formats and default is not NO_DEFAULT:\n                return default\n            self._sort_formats(formats)\n            return formats\n\n        formats = extract_formats(default=None)\n\n        if not formats:\n            webpage = decode_packed_codes(self._search_regex(\n                r\"(}\\('(.+)',(\\d+),(\\d+),'[^']*\\b(?:file|embed)\\b[^']*'\\.split\\('\\|'\\))\",\n                webpage, 'packed code'))\n            formats = extract_formats()\n\n        thumbnail = self._search_regex(\n            r'image\\s*:\\s*[\"\\'](http[^\"\\']+)[\"\\'],', webpage, 'thumbnail', default=None)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# removed by administrator\n#403f3d[^\"]*\"[^>]*>([^<]+)<'),  # streamin.to\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    decode_packed_codes,\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    NO_DEFAULT,\n    urlencode_postdata,\n)\n\n\nclass XFileShareIE(InfoExtractor):\n    _SITES = (\n        (r'daclips\\.(?:in|com)', 'DaClips'),\n        (r'filehoot\\.com', 'FileHoot'),\n        (r'gorillavid\\.(?:in|com)', 'GorillaVid'),\n        (r'movpod\\.in', 'MovPod'),\n        (r'powerwatch\\.pw', 'PowerWatch'),\n        (r'rapidvideo\\.ws', 'Rapidvideo.ws'),\n        (r'thevideobee\\.to', 'TheVideoBee'),\n        (r'vidto\\.me', 'Vidto'),\n        (r'streamin\\.to', 'Streamin.To'),\n        (r'xvidstage\\.com', 'XVIDSTAGE'),\n        (r'vidabc\\.com', 'Vid ABC'),\n        (r'vidbom\\.com', 'VidBom'),\n        (r'vidlo\\.us', 'vidlo'),\n        (r'rapidvideo\\.(?:cool|org)', 'RapidVideo.TV'),\n        (r'fastvideo\\.me', 'FastVideo.me'),\n    )\n\n    IE_DESC = 'XFileShare based sites: %s' % ', '.join(list(zip(*_SITES))[1])\n    _VALID_URL = (r'https?://(?P<host>(?:www\\.)?(?:%s))/(?:embed-)?(?P<id>[0-9a-zA-Z]+)'\n                  % '|'.join(site for site in list(zip(*_SITES))[0]))\n\n    _FILE_NOT_FOUND_REGEXES = (\n        r'>(?:404 - )?File Not Found<',\n        r'>The file was removed by administrator<',\n    )\n\n    _TESTS = [{\n        'url': 'http://gorillavid.in/06y9juieqpmi',\n        'md5': '5ae4a3580620380619678ee4875893ba',\n        'info_dict': {\n            'id': '06y9juieqpmi',\n            'ext': 'mp4',\n            'title': 'Rebecca Black My Moment Official Music Video Reaction-6GK87Rc8bzQ',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n    }, {\n        'url': 'http://gorillavid.in/embed-z08zf8le23c6-960x480.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://daclips.in/3rso4kdn6f9m',\n        'md5': '1ad8fd39bb976eeb66004d3a4895f106',\n        'info_dict': {\n            'id': '3rso4kdn6f9m',\n            'ext': 'mp4',\n            'title': 'Micro Pig piglets ready on 16th July 2009-bG0PdrCdxUc',\n            'thumbnail': r're:http://.*\\.jpg',\n        }\n    }, {\n        'url': 'http://movpod.in/0wguyyxi1yca',\n        'only_matching': True,\n    }, {\n        'url': 'http://filehoot.com/3ivfabn7573c.html',\n        'info_dict': {\n            'id': '3ivfabn7573c',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video \\'\u00e4BaW_jenozKc.mp4.mp4',\n            'thumbnail': r're:http://.*\\.jpg',\n        },\n        'skip': 'Video removed',\n    }, {\n        'url': 'http://vidto.me/ku5glz52nqe1.html',\n        'info_dict': {\n            'id': 'ku5glz52nqe1',\n            'ext': 'mp4',\n            'title': 'test'\n        }\n    }, {\n        'url': 'http://powerwatch.pw/duecjibvicbu',\n        'info_dict': {\n            'id': 'duecjibvicbu',\n            'ext': 'mp4',\n            'title': 'Big Buck Bunny trailer',\n        },\n    }, {\n        'url': 'http://xvidstage.com/e0qcnl03co6z',\n        'info_dict': {\n            'id': 'e0qcnl03co6z',\n            'ext': 'mp4',\n            'title': 'Chucky Prank 2015.mp4',\n        },\n    }, {\n        # removed by administrator\n        'url': 'http://xvidstage.com/amfy7atlkx25',\n        'only_matching': True,\n    }, {\n        'url': 'http://vidabc.com/i8ybqscrphfv',\n        'info_dict': {\n            'id': 'i8ybqscrphfv',\n            'ext': 'mp4',\n            'title': 're:Beauty and the Beast 2017',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.rapidvideo.cool/b667kprndr8w',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.fastvideo.me/k8604r8nk8sn/FAST_FURIOUS_8_-_Trailer_italiano_ufficiale.mp4.html',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        url = 'http://%s/%s' % (mobj.group('host'), video_id)\n        webpage = self._download_webpage(url, video_id)\n\n        if any(re.search(p, webpage) for p in self._FILE_NOT_FOUND_REGEXES):\n            raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n        fields = self._hidden_inputs(webpage)\n\n        if fields['op'] == 'download1':\n            countdown = int_or_none(self._search_regex(\n                r'<span id=\"countdown_str\">(?:[Ww]ait)?\\s*<span id=\"cxc\">(\\d+)</span>\\s*(?:seconds?)?</span>',\n                webpage, 'countdown', default=None))\n            if countdown:\n                self._sleep(countdown, video_id)\n\n            webpage = self._download_webpage(\n                url, video_id, 'Downloading video page',\n                data=urlencode_postdata(fields), headers={\n                    'Referer': url,\n                    'Content-type': 'application/x-www-form-urlencoded',\n                })\n\n        title = (self._search_regex(\n            (r'style=\"z-index: [0-9]+;\">([^<]+)</span>',\n             r'<td nowrap>([^<]+)</td>',\n             r'h4-fine[^>]*>([^<]+)<',\n             r'>Watch (.+) ',\n             r'<h2 class=\"video-page-head\">([^<]+)</h2>',\n             r'<h2 style=\"[^\"]*color:#403f3d[^\"]*\"[^>]*>([^<]+)<'),  # streamin.to\n            webpage, 'title', default=None) or self._og_search_title(\n            webpage, default=None) or video_id).strip()\n\n        def extract_formats(default=NO_DEFAULT):\n            urls = []\n            for regex in (\n                    r'(?:file|src)\\s*:\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1',\n                    r'file_link\\s*=\\s*([\"\\'])(?P<url>http(?:(?!\\1).)+)\\1',\n                    r'addVariable\\((\\\\?[\"\\'])file\\1\\s*,\\s*(\\\\?[\"\\'])(?P<url>http(?:(?!\\2).)+)\\2\\)',\n                    r'<embed[^>]+src=([\"\\'])(?P<url>http(?:(?!\\1).)+\\.(?:m3u8|mp4|flv)(?:(?!\\1).)*)\\1'):\n                for mobj in re.finditer(regex, webpage):\n                    video_url = mobj.group('url')\n                    if video_url not in urls:\n                        urls.append(video_url)\n            formats = []\n            for video_url in urls:\n                if determine_ext(video_url) == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        video_url, video_id, 'mp4',\n                        entry_protocol='m3u8_native', m3u8_id='hls',\n                        fatal=False))\n                else:\n                    formats.append({\n                        'url': video_url,\n                        'format_id': 'sd',\n                    })\n            if not formats and default is not NO_DEFAULT:\n                return default\n            self._sort_formats(formats)\n            return formats\n\n        formats = extract_formats(default=None)\n\n        if not formats:\n            webpage = decode_packed_codes(self._search_regex(\n                r\"(}\\('(.+)',(\\d+),(\\d+),'[^']*\\b(?:file|embed)\\b[^']*'\\.split\\('\\|'\\))\",\n                webpage, 'packed code'))\n            formats = extract_formats()\n\n        thumbnail = self._search_regex(\n            r'image\\s*:\\s*[\"\\'](http[^\"\\']+)[\"\\'],', webpage, 'thumbnail', default=None)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xfileshare.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xfileshare.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}