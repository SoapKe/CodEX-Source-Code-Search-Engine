{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\"\"\"Visualizes the segmentation results via specified color map.\n\nVisualizes the semantic segmentation results by the color map\ndefined by the different datasets. Supported colormaps are:\n\n1. PASCAL VOC semantic segmentation benchmark.\nWebsite: http://host.robots.ox.ac.uk/pascal/VOC/\n\"\"\"\n\nimport numpy as np\n\n Dataset names.\n_CITYSCAPES = 'cityscapes'\n_PASCAL = 'pascal'\n\n Max number of entries in the colormap for each dataset.\n_DATASET_MAX_ENTRIES = {\n    _CITYSCAPES: 19,\n    _PASCAL: 256,\n}\n\n\ndef create_cityscapes_label_colormap():\n  \"\"\"Creates a label colormap used in CITYSCAPES segmentation benchmark.\n\n  Returns:\n    A Colormap for visualizing segmentation results.\n  \"\"\"\n  colormap = np.asarray([\n      [128, 64, 128],\n      [244, 35, 232],\n      [70, 70, 70],\n      [102, 102, 156],\n      [190, 153, 153],\n      [153, 153, 153],\n      [250, 170, 30],\n      [220, 220, 0],\n      [107, 142, 35],\n      [152, 251, 152],\n      [70, 130, 180],\n      [220, 20, 60],\n      [255, 0, 0],\n      [0, 0, 142],\n      [0, 0, 70],\n      [0, 60, 100],\n      [0, 80, 100],\n      [0, 0, 230],\n      [119, 11, 32],\n  ])\n  return colormap\n\n\ndef get_pascal_name():\n  return _PASCAL\n\n\ndef get_cityscapes_name():\n  return _CITYSCAPES\n\n\ndef bit_get(val, idx):\n  \"\"\"Gets the bit value.\n\n  Args:\n    val: Input value, int or numpy int array.\n    idx: Which bit of the input val.\n\n  Returns:\n    The \"idx\"-th bit of input val.\n  \"\"\"\n  return (val >> idx) & 1\n\n\ndef create_pascal_label_colormap():\n  \"\"\"Creates a label colormap used in PASCAL VOC segmentation benchmark.\n\n  Returns:\n    A Colormap for visualizing segmentation results.\n  \"\"\"\n  colormap = np.zeros((_DATASET_MAX_ENTRIES[_PASCAL], 3), dtype=int)\n  ind = np.arange(_DATASET_MAX_ENTRIES[_PASCAL], dtype=int)\n\n  for shift in reversed(range(8)):\n    for channel in range(3):\n      colormap[:, channel] |= bit_get(ind, channel) << shift\n    ind >>= 3\n\n  return colormap\n\n\ndef create_label_colormap(dataset=_PASCAL):\n  \"\"\"Creates a label colormap for the specified dataset.\n\n  Args:\n    dataset: The colormap used in the dataset.\n\n  Returns:\n    A numpy array of the dataset colormap.\n\n  Raises:\n    ValueError: If the dataset is not supported.\n  \"\"\"\n  if dataset == _PASCAL:\n    return create_pascal_label_colormap()\n  elif dataset == _CITYSCAPES:\n    return create_cityscapes_label_colormap()\n  else:\n    raise ValueError('Unsupported dataset.')\n\n\ndef label_to_color_image(label, dataset=_PASCAL):\n  \"\"\"Adds color defined by the dataset colormap to the label.\n\n  Args:\n    label: A 2D array with integer type, storing the segmentation label.\n    dataset: The colormap used in the dataset.\n\n  Returns:\n    result: A 2D array with floating type. The element of the array\n      is the color indexed by the corresponding element in the input label\n      to the PASCAL color map.\n\n  Raises:\n    ValueError: If label is not of rank 2 or its value is larger than color\n      map maximum entry.\n  \"\"\"\n  if label.ndim != 2:\n    raise ValueError('Expect 2-D input label')\n\n  if np.max(label) >= _DATASET_MAX_ENTRIES[dataset]:\n    raise ValueError('label value too large.')\n\n  colormap = create_label_colormap(dataset)\n  return colormap[label]\n", "comments": "   visualizes segmentation results via specified color map   visualizes semantic segmentation results color map defined different datasets  supported colormaps   1  pascal voc semantic segmentation benchmark  website  http   host robots ox ac uk pascal voc       import numpy np    dataset names   cityscapes    cityscapes   pascal    pascal     max number entries colormap dataset   dataset max entries          cityscapes  19       pascal  256      def create cityscapes label colormap()       creates label colormap used cityscapes segmentation benchmark     returns      a colormap visualizing segmentation results          colormap   np asarray(         128  64  128          244  35  232          70  70  70          102  102  156          190  153  153          153  153  153          250  170  30          220  220  0          107  142  35          152  251  152          70  130  180          220  20  60          255  0  0          0  0  142          0  0  70          0  60  100          0  80  100          0  0  230          119  11  32      )   return colormap   def get pascal name()    return  pascal   def get cityscapes name()    return  cityscapes   def bit get(val  idx)       gets bit value     args      val  input value  int numpy int array      idx  which bit input val     returns      the  idx  th bit input val          return (val    idx)   1   def create pascal label colormap()       creates label colormap used pascal voc segmentation benchmark     returns      a colormap visualizing segmentation results          colormap   np zeros(( dataset max entries  pascal   3)  dtype int)   ind   np arange( dataset max entries  pascal   dtype int)    shift reversed(range(8))      channel range(3)        colormap    channel     bit get(ind  channel)    shift     ind     3    return colormap   def create label colormap(dataset  pascal)       creates label colormap specified dataset     args      dataset  the colormap used dataset     returns      a numpy array dataset colormap     raises      valueerror  if dataset supported          dataset     pascal      return create pascal label colormap()   elif dataset     cityscapes      return create cityscapes label colormap()   else      raise valueerror( unsupported dataset  )   def label color image(label  dataset  pascal)       adds color defined dataset colormap label     args      label  a 2d array integer type  storing segmentation label      dataset  the colormap used dataset     returns      result  a 2d array floating type  the element array       color indexed corresponding element input label       pascal color map     raises      valueerror  if label rank 2 value larger color       map maximum entry           copyright 2018 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       dataset names     max number entries colormap dataset  ", "content": "# Copyright 2018 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Visualizes the segmentation results via specified color map.\n\nVisualizes the semantic segmentation results by the color map\ndefined by the different datasets. Supported colormaps are:\n\n1. PASCAL VOC semantic segmentation benchmark.\nWebsite: http://host.robots.ox.ac.uk/pascal/VOC/\n\"\"\"\n\nimport numpy as np\n\n# Dataset names.\n_CITYSCAPES = 'cityscapes'\n_PASCAL = 'pascal'\n\n# Max number of entries in the colormap for each dataset.\n_DATASET_MAX_ENTRIES = {\n    _CITYSCAPES: 19,\n    _PASCAL: 256,\n}\n\n\ndef create_cityscapes_label_colormap():\n  \"\"\"Creates a label colormap used in CITYSCAPES segmentation benchmark.\n\n  Returns:\n    A Colormap for visualizing segmentation results.\n  \"\"\"\n  colormap = np.asarray([\n      [128, 64, 128],\n      [244, 35, 232],\n      [70, 70, 70],\n      [102, 102, 156],\n      [190, 153, 153],\n      [153, 153, 153],\n      [250, 170, 30],\n      [220, 220, 0],\n      [107, 142, 35],\n      [152, 251, 152],\n      [70, 130, 180],\n      [220, 20, 60],\n      [255, 0, 0],\n      [0, 0, 142],\n      [0, 0, 70],\n      [0, 60, 100],\n      [0, 80, 100],\n      [0, 0, 230],\n      [119, 11, 32],\n  ])\n  return colormap\n\n\ndef get_pascal_name():\n  return _PASCAL\n\n\ndef get_cityscapes_name():\n  return _CITYSCAPES\n\n\ndef bit_get(val, idx):\n  \"\"\"Gets the bit value.\n\n  Args:\n    val: Input value, int or numpy int array.\n    idx: Which bit of the input val.\n\n  Returns:\n    The \"idx\"-th bit of input val.\n  \"\"\"\n  return (val >> idx) & 1\n\n\ndef create_pascal_label_colormap():\n  \"\"\"Creates a label colormap used in PASCAL VOC segmentation benchmark.\n\n  Returns:\n    A Colormap for visualizing segmentation results.\n  \"\"\"\n  colormap = np.zeros((_DATASET_MAX_ENTRIES[_PASCAL], 3), dtype=int)\n  ind = np.arange(_DATASET_MAX_ENTRIES[_PASCAL], dtype=int)\n\n  for shift in reversed(range(8)):\n    for channel in range(3):\n      colormap[:, channel] |= bit_get(ind, channel) << shift\n    ind >>= 3\n\n  return colormap\n\n\ndef create_label_colormap(dataset=_PASCAL):\n  \"\"\"Creates a label colormap for the specified dataset.\n\n  Args:\n    dataset: The colormap used in the dataset.\n\n  Returns:\n    A numpy array of the dataset colormap.\n\n  Raises:\n    ValueError: If the dataset is not supported.\n  \"\"\"\n  if dataset == _PASCAL:\n    return create_pascal_label_colormap()\n  elif dataset == _CITYSCAPES:\n    return create_cityscapes_label_colormap()\n  else:\n    raise ValueError('Unsupported dataset.')\n\n\ndef label_to_color_image(label, dataset=_PASCAL):\n  \"\"\"Adds color defined by the dataset colormap to the label.\n\n  Args:\n    label: A 2D array with integer type, storing the segmentation label.\n    dataset: The colormap used in the dataset.\n\n  Returns:\n    result: A 2D array with floating type. The element of the array\n      is the color indexed by the corresponding element in the input label\n      to the PASCAL color map.\n\n  Raises:\n    ValueError: If label is not of rank 2 or its value is larger than color\n      map maximum entry.\n  \"\"\"\n  if label.ndim != 2:\n    raise ValueError('Expect 2-D input label')\n\n  if np.max(label) >= _DATASET_MAX_ENTRIES[dataset]:\n    raise ValueError('label value too large.')\n\n  colormap = create_label_colormap(dataset)\n  return colormap[label]\n", "description": "Models and examples built with TensorFlow", "file_name": "get_dataset_colormap.py", "id": "034e372fd7546bd0dedcbd350c57093c", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/deeplab/utils/get_dataset_colormap.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}