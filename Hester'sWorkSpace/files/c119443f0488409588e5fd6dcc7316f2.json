{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    js_to_json,\n    smuggle_url,\n    try_get,\n    xpath_text,\n    xpath_element,\n    xpath_with_ns,\n    find_xpath_attr,\n    parse_duration,\n    parse_iso8601,\n    parse_age_limit,\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass CBCIE(InfoExtractor):\n    IE_NAME = 'cbc.ca'\n    _VALID_URL = r'https?://(?:www\\.)?cbc\\.ca/(?!player/)(?:[^/]+/)+(?P<id>[^/?\n    _TESTS = [{\n        \n        'url': 'http://www.cbc.ca/22minutes/videos/clips-season-23/don-cherry-play-offs',\n        'md5': '97e24d09672fc4cf56256d6faa6c25bc',\n        'info_dict': {\n            'id': '2682904050',\n            'ext': 'mp4',\n            'title': 'Don Cherry \u2013 All-Stars',\n            'description': 'Don Cherry has a bee in his bonnet about AHL player John Scott because that guy\u2019s got heart.',\n            'timestamp': 1454463000,\n            'upload_date': '20160203',\n            'uploader': 'CBCC-NEW',\n        },\n        'skip': 'Geo-restricted to Canada',\n    }, {\n        \n        'url': 'http://www.cbc.ca/22minutes/videos/22-minutes-update/22-minutes-update-episode-4',\n        'md5': '162adfa070274b144f4fdc3c3b8207db',\n        'info_dict': {\n            'id': '2414435309',\n            'ext': 'mp4',\n            'title': '22 Minutes Update: What Not To Wear Quebec',\n            'description': \"This week's latest Canadian top political story is What Not To Wear Quebec.\",\n            'upload_date': '20131025',\n            'uploader': 'CBCC-NEW',\n            'timestamp': 1382717907,\n        },\n    }, {\n        \n        'url': 'http://www.cbc.ca/archives/entry/1978-robin-williams-freestyles-on-90-minutes-live',\n        'md5': '0274a90b51a9b4971fe005c63f592f12',\n        'info_dict': {\n            'id': '2487345465',\n            'ext': 'mp4',\n            'title': 'Robin Williams freestyles on 90 Minutes Live',\n            'description': 'Wacky American comedian Robin Williams shows off his infamous \"freestyle\" comedic talents while being interviewed on CBC\\'s 90 Minutes Live.',\n            'upload_date': '19780210',\n            'uploader': 'CBCC-NEW',\n            'timestamp': 255977160,\n        },\n    }, {\n        \n        'url': 'http://www.cbc.ca/natureofthings/blog/birds-eye-view-from-vancouvers-burrard-street-bridge-how-we-got-the-shot',\n        'playlist': [{\n            'md5': '377572d0b49c4ce0c9ad77470e0b96b4',\n            'info_dict': {\n                'id': '2680832926',\n                'ext': 'mp4',\n                'title': 'An Eagle\\'s-Eye View Off Burrard Bridge',\n                'description': 'Hercules the eagle flies from Vancouver\\'s Burrard Bridge down to a nearby park with a mini-camera strapped to his back.',\n                'upload_date': '20160201',\n                'timestamp': 1454342820,\n                'uploader': 'CBCC-NEW',\n            },\n        }, {\n            'md5': '415a0e3f586113894174dfb31aa5bb1a',\n            'info_dict': {\n                'id': '2658915080',\n                'ext': 'mp4',\n                'title': 'Fly like an eagle!',\n                'description': 'Eagle equipped with a mini camera flies from the world\\'s tallest tower',\n                'upload_date': '20150315',\n                'timestamp': 1426443984,\n                'uploader': 'CBCC-NEW',\n            },\n        }],\n        'skip': 'Geo-restricted to Canada',\n    }, {\n        \n        'url': 'http://www.cbc.ca/news/canada/calgary/dog-indoor-exercise-winter-1.3928238',\n        'info_dict': {\n            'title': 'Keep Rover active during the deep freeze with doggie pushups and other fun indoor tasks',\n            'id': 'dog-indoor-exercise-winter-1.3928238',\n            'description': 'md5:c18552e41726ee95bd75210d1ca9194c',\n        },\n        'playlist_mincount': 6,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if CBCPlayerIE.suitable(url) else super(CBCIE, cls).suitable(url)\n\n    def _extract_player_init(self, player_init, display_id):\n        player_info = self._parse_json(player_init, display_id, js_to_json)\n        media_id = player_info.get('mediaId')\n        if not media_id:\n            clip_id = player_info['clipId']\n            feed = self._download_json(\n                'http://tpfeed.cbc.ca/f/ExhSPC/vms_5akSXx4Ng_Zn?byCustomValue={:mpsReleases}{%s}' % clip_id,\n                clip_id, fatal=False)\n            if feed:\n                media_id = try_get(feed, lambda x: x['entries'][0]['guid'], compat_str)\n            if not media_id:\n                media_id = self._download_json(\n                    'http://feed.theplatform.com/f/h9dtGB/punlNGjMlc1F?fields=id&byContent=byReleases%3DbyId%253D' + clip_id,\n                    clip_id)['entries'][0]['id'].split('/')[-1]\n        return self.url_result('cbcplayer:%s' % media_id, 'CBCPlayer', media_id)\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        entries = [\n            self._extract_player_init(player_init, display_id)\n            for player_init in re.findall(r'CBC\\.APP\\.Caffeine\\.initInstance\\(({.+?})\\);', webpage)]\n        entries.extend([\n            self.url_result('cbcplayer:%s' % media_id, 'CBCPlayer', media_id)\n            for media_id in re.findall(r'<iframe[^>]+src=\"[^\"]+?mediaId=(\\d+)\"', webpage)])\n        return self.playlist_result(\n            entries, display_id,\n            self._og_search_title(webpage, fatal=False),\n            self._og_search_description(webpage))\n\n\nclass CBCPlayerIE(InfoExtractor):\n    IE_NAME = 'cbc.ca:player'\n    _VALID_URL = r'(?:cbcplayer:|https?://(?:www\\.)?cbc\\.ca/(?:player/play/|i/caffeine/syndicate/\\?mediaId=))(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.cbc.ca/player/play/2683190193',\n        'md5': '64d25f841ddf4ddb28a235338af32e2c',\n        'info_dict': {\n            'id': '2683190193',\n            'ext': 'mp4',\n            'title': 'Gerry Runs a Sweat Shop',\n            'description': 'md5:b457e1c01e8ff408d9d801c1c2cd29b0',\n            'timestamp': 1455071400,\n            'upload_date': '20160210',\n            'uploader': 'CBCC-NEW',\n        },\n        'skip': 'Geo-restricted to Canada',\n    }, {\n        \n        'url': 'http://www.cbc.ca/player/play/2657631896',\n        'md5': 'e5e708c34ae6fca156aafe17c43e8b75',\n        'info_dict': {\n            'id': '2657631896',\n            'ext': 'mp3',\n            'title': 'CBC Montreal is organizing its first ever community hackathon!',\n            'description': 'The modern technology we tend to depend on so heavily, is never without it\\'s share of hiccups and headaches. Next weekend - CBC Montreal will be getting members of the public for its first Hackathon.',\n            'timestamp': 1425704400,\n            'upload_date': '20150307',\n            'uploader': 'CBCC-NEW',\n        },\n    }, {\n        'url': 'http://www.cbc.ca/player/play/2164402062',\n        'md5': '33fcd8f6719b9dd60a5e73adcb83b9f6',\n        'info_dict': {\n            'id': '2164402062',\n            'ext': 'mp4',\n            'title': 'Cancer survivor four times over',\n            'description': 'Tim Mayer has beaten three different forms of cancer four times in five years.',\n            'timestamp': 1320410746,\n            'upload_date': '20111104',\n            'uploader': 'CBCC-NEW',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'ThePlatform',\n            'url': smuggle_url(\n                'http://link.theplatform.com/s/ExhSPC/media/guid/2655402169/%s?mbr=true&formats=MPEG4,FLV,MP3' % video_id, {\n                    'force_smil_url': True\n                }),\n            'id': video_id,\n        }\n\n\nclass CBCWatchBaseIE(InfoExtractor):\n    _device_id = None\n    _device_token = None\n    _API_BASE_URL = 'https://api-cbc.cloud.clearleap.com/cloffice/client/'\n    _NS_MAP = {\n        'media': 'http://search.yahoo.com/mrss/',\n        'clearleap': 'http://www.clearleap.com/namespace/clearleap/1.0/',\n    }\n    _GEO_COUNTRIES = ['CA']\n\n    def _call_api(self, path, video_id):\n        url = path if path.startswith('http') else self._API_BASE_URL + path\n        result = self._download_xml(url, video_id, headers={\n            'X-Clearleap-DeviceId': self._device_id,\n            'X-Clearleap-DeviceToken': self._device_token,\n        })\n        error_message = xpath_text(result, 'userMessage') or xpath_text(result, 'systemMessage')\n        if error_message:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_message))\n        return result\n\n    def _real_initialize(self):\n        if not self._device_id or not self._device_token:\n            device = self._downloader.cache.load('cbcwatch', 'device') or {}\n            self._device_id, self._device_token = device.get('id'), device.get('token')\n            if not self._device_id or not self._device_token:\n                result = self._download_xml(\n                    self._API_BASE_URL + 'device/register',\n                    None, data=b'<device><type>web</type></device>')\n                self._device_id = xpath_text(result, 'deviceId', fatal=True)\n                self._device_token = xpath_text(result, 'deviceToken', fatal=True)\n                self._downloader.cache.store(\n                    'cbcwatch', 'device', {\n                        'id': self._device_id,\n                        'token': self._device_token,\n                    })\n\n    def _parse_rss_feed(self, rss):\n        channel = xpath_element(rss, 'channel', fatal=True)\n\n        def _add_ns(path):\n            return xpath_with_ns(path, self._NS_MAP)\n\n        entries = []\n        for item in channel.findall('item'):\n            guid = xpath_text(item, 'guid', fatal=True)\n            title = xpath_text(item, 'title', fatal=True)\n\n            media_group = xpath_element(item, _add_ns('media:group'), fatal=True)\n            content = xpath_element(media_group, _add_ns('media:content'), fatal=True)\n            content_url = content.attrib['url']\n\n            thumbnails = []\n            for thumbnail in media_group.findall(_add_ns('media:thumbnail')):\n                thumbnail_url = thumbnail.get('url')\n                if not thumbnail_url:\n                    continue\n                thumbnails.append({\n                    'id': thumbnail.get('profile'),\n                    'url': thumbnail_url,\n                    'width': int_or_none(thumbnail.get('width')),\n                    'height': int_or_none(thumbnail.get('height')),\n                })\n\n            timestamp = None\n            release_date = find_xpath_attr(\n                item, _add_ns('media:credit'), 'role', 'releaseDate')\n            if release_date is not None:\n                timestamp = parse_iso8601(release_date.text)\n\n            entries.append({\n                '_type': 'url_transparent',\n                'url': content_url,\n                'id': guid,\n                'title': title,\n                'description': xpath_text(item, 'description'),\n                'timestamp': timestamp,\n                'duration': int_or_none(content.get('duration')),\n                'age_limit': parse_age_limit(xpath_text(item, _add_ns('media:rating'))),\n                'episode': xpath_text(item, _add_ns('clearleap:episode')),\n                'episode_number': int_or_none(xpath_text(item, _add_ns('clearleap:episodeInSeason'))),\n                'series': xpath_text(item, _add_ns('clearleap:series')),\n                'season_number': int_or_none(xpath_text(item, _add_ns('clearleap:season'))),\n                'thumbnails': thumbnails,\n                'ie_key': 'CBCWatchVideo',\n            })\n\n        return self.playlist_result(\n            entries, xpath_text(channel, 'guid'),\n            xpath_text(channel, 'title'),\n            xpath_text(channel, 'description'))\n\n\nclass CBCWatchVideoIE(CBCWatchBaseIE):\n    IE_NAME = 'cbc.ca:watch:video'\n    _VALID_URL = r'https?://api-cbc\\.cloud\\.clearleap\\.com/cloffice/client/web/play/?\\?.*?\\bcontentId=(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n    _TEST = {\n        \n        'url': 'https://api-cbc.cloud.clearleap.com/cloffice/client/web/play/?contentId=3c84472a-1eea-4dee-9267-2655d5055dcf&categoryId=ebc258f5-ee40-4cca-b66b-ba6bd55b7235',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        result = self._call_api(url, video_id)\n\n        m3u8_url = xpath_text(result, 'url', fatal=True)\n        formats = self._extract_m3u8_formats(re.sub(r'/([^/]+)/[^/?]+\\.m3u8', r'/\\1/\\1.m3u8', m3u8_url), video_id, 'mp4', fatal=False)\n        if len(formats) < 2:\n            formats = self._extract_m3u8_formats(m3u8_url, video_id, 'mp4')\n        for f in formats:\n            format_id = f.get('format_id')\n            if format_id.startswith('AAC'):\n                f['acodec'] = 'aac'\n            elif format_id.startswith('AC3'):\n                f['acodec'] = 'ac-3'\n        self._sort_formats(formats)\n\n        info = {\n            'id': video_id,\n            'title': video_id,\n            'formats': formats,\n        }\n\n        rss = xpath_element(result, 'rss')\n        if rss:\n            info.update(self._parse_rss_feed(rss)['entries'][0])\n            del info['url']\n            del info['_type']\n            del info['ie_key']\n        return info\n\n\nclass CBCWatchIE(CBCWatchBaseIE):\n    IE_NAME = 'cbc.ca:watch'\n    _VALID_URL = r'https?://watch\\.cbc\\.ca/(?:[^/]+/)+(?P<id>[0-9a-f-]+)'\n    _TESTS = [{\n        \n        'url': 'http://watch.cbc.ca/doc-zone/season-6/customer-disservice/38e815a-009e3ab12e4',\n        'info_dict': {\n            'id': '9673749a-5e77-484c-8b62-a1092a6b5168',\n            'ext': 'mp4',\n            'title': 'Customer (Dis)Service',\n            'description': 'md5:8bdd6913a0fe03d4b2a17ebe169c7c87',\n            'upload_date': '20160219',\n            'timestamp': 1455840000,\n        },\n        'params': {\n            \n            'skip_download': True,\n            'format': 'bestvideo',\n        },\n    }, {\n        \n        'url': 'http://watch.cbc.ca/arthur/all/1ed4b385-cd84-49cf-95f0-80f004680057',\n        'info_dict': {\n            'id': '1ed4b385-cd84-49cf-95f0-80f004680057',\n            'title': 'Arthur',\n            'description': 'Arthur, the sweetest 8-year-old aardvark, and his pals solve all kinds of problems with humour, kindness and teamwork.',\n        },\n        'playlist_mincount': 30,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        rss = self._call_api('web/browse/' + video_id, video_id)\n        return self._parse_rss_feed(rss)\n\n\nclass CBCOlympicsIE(InfoExtractor):\n    IE_NAME = 'cbc.ca:olympics'\n    _VALID_URL = r'https?://olympics\\.cbc\\.ca/video/[^/]+/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://olympics.cbc.ca/video/whats-on-tv/olympic-morning-featuring-the-opening-ceremony/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._hidden_inputs(webpage)['videoId']\n        video_doc = self._download_xml(\n            'https://olympics.cbc.ca/videodata/%s.xml' % video_id, video_id)\n        title = xpath_text(video_doc, 'title', fatal=True)\n        is_live = xpath_text(video_doc, 'kind') == 'Live'\n        if is_live:\n            title = self._live_title(title)\n\n        formats = []\n        for video_source in video_doc.findall('videoSources/videoSource'):\n            uri = xpath_text(video_source, 'uri')\n            if not uri:\n                continue\n            tokenize = self._download_json(\n                'https://olympics.cbc.ca/api/api-akamai/tokenize',\n                video_id, data=json.dumps({\n                    'VideoSource': uri,\n                }).encode(), headers={\n                    'Content-Type': 'application/json',\n                    'Referer': url,\n                    \n                    'Cookie': '_dvp=TK:C0ObxjerU',  \n                }, fatal=False)\n            if not tokenize:\n                continue\n            content_url = tokenize['ContentUrl']\n            video_source_format = video_source.get('format')\n            if video_source_format == 'IIS':\n                formats.extend(self._extract_ism_formats(\n                    content_url, video_id, ism_id=video_source_format, fatal=False))\n            else:\n                formats.extend(self._extract_m3u8_formats(\n                    content_url, video_id, 'mp4',\n                    'm3u8' if is_live else 'm3u8_native',\n                    m3u8_id=video_source_format, fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': xpath_text(video_doc, 'description'),\n            'thumbnail': xpath_text(video_doc, 'thumbnailUrl'),\n            'duration': parse_duration(xpath_text(video_doc, 'duration')),\n            'formats': formats,\n            'is_live': is_live,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n# with mediaId\n# with clipId, feed available via tpfeed.cbc.ca and feed.theplatform.com\n# with clipId, feed only available via tpfeed.cbc.ca\n# multiple iframes\n# multiple CBC.APP.Caffeine.initInstance(...)\n# Redirected from http://www.cbc.ca/player/AudioMobile/All%20in%20a%20Weekend%20Montreal/ID/2657632011/\n# geo-restricted to Canada, bypassable\n# geo-restricted to Canada, bypassable\n# m3u8 download\n# geo-restricted to Canada, bypassable\n#]+)'\n# d3.VideoPlayer._init in https://olympics.cbc.ca/components/script/base.js\n# AKAMAI CDN cookie\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    js_to_json,\n    smuggle_url,\n    try_get,\n    xpath_text,\n    xpath_element,\n    xpath_with_ns,\n    find_xpath_attr,\n    parse_duration,\n    parse_iso8601,\n    parse_age_limit,\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass CBCIE(InfoExtractor):\n    IE_NAME = 'cbc.ca'\n    _VALID_URL = r'https?://(?:www\\.)?cbc\\.ca/(?!player/)(?:[^/]+/)+(?P<id>[^/?#]+)'\n    _TESTS = [{\n        # with mediaId\n        'url': 'http://www.cbc.ca/22minutes/videos/clips-season-23/don-cherry-play-offs',\n        'md5': '97e24d09672fc4cf56256d6faa6c25bc',\n        'info_dict': {\n            'id': '2682904050',\n            'ext': 'mp4',\n            'title': 'Don Cherry \u2013 All-Stars',\n            'description': 'Don Cherry has a bee in his bonnet about AHL player John Scott because that guy\u2019s got heart.',\n            'timestamp': 1454463000,\n            'upload_date': '20160203',\n            'uploader': 'CBCC-NEW',\n        },\n        'skip': 'Geo-restricted to Canada',\n    }, {\n        # with clipId, feed available via tpfeed.cbc.ca and feed.theplatform.com\n        'url': 'http://www.cbc.ca/22minutes/videos/22-minutes-update/22-minutes-update-episode-4',\n        'md5': '162adfa070274b144f4fdc3c3b8207db',\n        'info_dict': {\n            'id': '2414435309',\n            'ext': 'mp4',\n            'title': '22 Minutes Update: What Not To Wear Quebec',\n            'description': \"This week's latest Canadian top political story is What Not To Wear Quebec.\",\n            'upload_date': '20131025',\n            'uploader': 'CBCC-NEW',\n            'timestamp': 1382717907,\n        },\n    }, {\n        # with clipId, feed only available via tpfeed.cbc.ca\n        'url': 'http://www.cbc.ca/archives/entry/1978-robin-williams-freestyles-on-90-minutes-live',\n        'md5': '0274a90b51a9b4971fe005c63f592f12',\n        'info_dict': {\n            'id': '2487345465',\n            'ext': 'mp4',\n            'title': 'Robin Williams freestyles on 90 Minutes Live',\n            'description': 'Wacky American comedian Robin Williams shows off his infamous \"freestyle\" comedic talents while being interviewed on CBC\\'s 90 Minutes Live.',\n            'upload_date': '19780210',\n            'uploader': 'CBCC-NEW',\n            'timestamp': 255977160,\n        },\n    }, {\n        # multiple iframes\n        'url': 'http://www.cbc.ca/natureofthings/blog/birds-eye-view-from-vancouvers-burrard-street-bridge-how-we-got-the-shot',\n        'playlist': [{\n            'md5': '377572d0b49c4ce0c9ad77470e0b96b4',\n            'info_dict': {\n                'id': '2680832926',\n                'ext': 'mp4',\n                'title': 'An Eagle\\'s-Eye View Off Burrard Bridge',\n                'description': 'Hercules the eagle flies from Vancouver\\'s Burrard Bridge down to a nearby park with a mini-camera strapped to his back.',\n                'upload_date': '20160201',\n                'timestamp': 1454342820,\n                'uploader': 'CBCC-NEW',\n            },\n        }, {\n            'md5': '415a0e3f586113894174dfb31aa5bb1a',\n            'info_dict': {\n                'id': '2658915080',\n                'ext': 'mp4',\n                'title': 'Fly like an eagle!',\n                'description': 'Eagle equipped with a mini camera flies from the world\\'s tallest tower',\n                'upload_date': '20150315',\n                'timestamp': 1426443984,\n                'uploader': 'CBCC-NEW',\n            },\n        }],\n        'skip': 'Geo-restricted to Canada',\n    }, {\n        # multiple CBC.APP.Caffeine.initInstance(...)\n        'url': 'http://www.cbc.ca/news/canada/calgary/dog-indoor-exercise-winter-1.3928238',\n        'info_dict': {\n            'title': 'Keep Rover active during the deep freeze with doggie pushups and other fun indoor tasks',\n            'id': 'dog-indoor-exercise-winter-1.3928238',\n            'description': 'md5:c18552e41726ee95bd75210d1ca9194c',\n        },\n        'playlist_mincount': 6,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if CBCPlayerIE.suitable(url) else super(CBCIE, cls).suitable(url)\n\n    def _extract_player_init(self, player_init, display_id):\n        player_info = self._parse_json(player_init, display_id, js_to_json)\n        media_id = player_info.get('mediaId')\n        if not media_id:\n            clip_id = player_info['clipId']\n            feed = self._download_json(\n                'http://tpfeed.cbc.ca/f/ExhSPC/vms_5akSXx4Ng_Zn?byCustomValue={:mpsReleases}{%s}' % clip_id,\n                clip_id, fatal=False)\n            if feed:\n                media_id = try_get(feed, lambda x: x['entries'][0]['guid'], compat_str)\n            if not media_id:\n                media_id = self._download_json(\n                    'http://feed.theplatform.com/f/h9dtGB/punlNGjMlc1F?fields=id&byContent=byReleases%3DbyId%253D' + clip_id,\n                    clip_id)['entries'][0]['id'].split('/')[-1]\n        return self.url_result('cbcplayer:%s' % media_id, 'CBCPlayer', media_id)\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        entries = [\n            self._extract_player_init(player_init, display_id)\n            for player_init in re.findall(r'CBC\\.APP\\.Caffeine\\.initInstance\\(({.+?})\\);', webpage)]\n        entries.extend([\n            self.url_result('cbcplayer:%s' % media_id, 'CBCPlayer', media_id)\n            for media_id in re.findall(r'<iframe[^>]+src=\"[^\"]+?mediaId=(\\d+)\"', webpage)])\n        return self.playlist_result(\n            entries, display_id,\n            self._og_search_title(webpage, fatal=False),\n            self._og_search_description(webpage))\n\n\nclass CBCPlayerIE(InfoExtractor):\n    IE_NAME = 'cbc.ca:player'\n    _VALID_URL = r'(?:cbcplayer:|https?://(?:www\\.)?cbc\\.ca/(?:player/play/|i/caffeine/syndicate/\\?mediaId=))(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.cbc.ca/player/play/2683190193',\n        'md5': '64d25f841ddf4ddb28a235338af32e2c',\n        'info_dict': {\n            'id': '2683190193',\n            'ext': 'mp4',\n            'title': 'Gerry Runs a Sweat Shop',\n            'description': 'md5:b457e1c01e8ff408d9d801c1c2cd29b0',\n            'timestamp': 1455071400,\n            'upload_date': '20160210',\n            'uploader': 'CBCC-NEW',\n        },\n        'skip': 'Geo-restricted to Canada',\n    }, {\n        # Redirected from http://www.cbc.ca/player/AudioMobile/All%20in%20a%20Weekend%20Montreal/ID/2657632011/\n        'url': 'http://www.cbc.ca/player/play/2657631896',\n        'md5': 'e5e708c34ae6fca156aafe17c43e8b75',\n        'info_dict': {\n            'id': '2657631896',\n            'ext': 'mp3',\n            'title': 'CBC Montreal is organizing its first ever community hackathon!',\n            'description': 'The modern technology we tend to depend on so heavily, is never without it\\'s share of hiccups and headaches. Next weekend - CBC Montreal will be getting members of the public for its first Hackathon.',\n            'timestamp': 1425704400,\n            'upload_date': '20150307',\n            'uploader': 'CBCC-NEW',\n        },\n    }, {\n        'url': 'http://www.cbc.ca/player/play/2164402062',\n        'md5': '33fcd8f6719b9dd60a5e73adcb83b9f6',\n        'info_dict': {\n            'id': '2164402062',\n            'ext': 'mp4',\n            'title': 'Cancer survivor four times over',\n            'description': 'Tim Mayer has beaten three different forms of cancer four times in five years.',\n            'timestamp': 1320410746,\n            'upload_date': '20111104',\n            'uploader': 'CBCC-NEW',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'ThePlatform',\n            'url': smuggle_url(\n                'http://link.theplatform.com/s/ExhSPC/media/guid/2655402169/%s?mbr=true&formats=MPEG4,FLV,MP3' % video_id, {\n                    'force_smil_url': True\n                }),\n            'id': video_id,\n        }\n\n\nclass CBCWatchBaseIE(InfoExtractor):\n    _device_id = None\n    _device_token = None\n    _API_BASE_URL = 'https://api-cbc.cloud.clearleap.com/cloffice/client/'\n    _NS_MAP = {\n        'media': 'http://search.yahoo.com/mrss/',\n        'clearleap': 'http://www.clearleap.com/namespace/clearleap/1.0/',\n    }\n    _GEO_COUNTRIES = ['CA']\n\n    def _call_api(self, path, video_id):\n        url = path if path.startswith('http') else self._API_BASE_URL + path\n        result = self._download_xml(url, video_id, headers={\n            'X-Clearleap-DeviceId': self._device_id,\n            'X-Clearleap-DeviceToken': self._device_token,\n        })\n        error_message = xpath_text(result, 'userMessage') or xpath_text(result, 'systemMessage')\n        if error_message:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_message))\n        return result\n\n    def _real_initialize(self):\n        if not self._device_id or not self._device_token:\n            device = self._downloader.cache.load('cbcwatch', 'device') or {}\n            self._device_id, self._device_token = device.get('id'), device.get('token')\n            if not self._device_id or not self._device_token:\n                result = self._download_xml(\n                    self._API_BASE_URL + 'device/register',\n                    None, data=b'<device><type>web</type></device>')\n                self._device_id = xpath_text(result, 'deviceId', fatal=True)\n                self._device_token = xpath_text(result, 'deviceToken', fatal=True)\n                self._downloader.cache.store(\n                    'cbcwatch', 'device', {\n                        'id': self._device_id,\n                        'token': self._device_token,\n                    })\n\n    def _parse_rss_feed(self, rss):\n        channel = xpath_element(rss, 'channel', fatal=True)\n\n        def _add_ns(path):\n            return xpath_with_ns(path, self._NS_MAP)\n\n        entries = []\n        for item in channel.findall('item'):\n            guid = xpath_text(item, 'guid', fatal=True)\n            title = xpath_text(item, 'title', fatal=True)\n\n            media_group = xpath_element(item, _add_ns('media:group'), fatal=True)\n            content = xpath_element(media_group, _add_ns('media:content'), fatal=True)\n            content_url = content.attrib['url']\n\n            thumbnails = []\n            for thumbnail in media_group.findall(_add_ns('media:thumbnail')):\n                thumbnail_url = thumbnail.get('url')\n                if not thumbnail_url:\n                    continue\n                thumbnails.append({\n                    'id': thumbnail.get('profile'),\n                    'url': thumbnail_url,\n                    'width': int_or_none(thumbnail.get('width')),\n                    'height': int_or_none(thumbnail.get('height')),\n                })\n\n            timestamp = None\n            release_date = find_xpath_attr(\n                item, _add_ns('media:credit'), 'role', 'releaseDate')\n            if release_date is not None:\n                timestamp = parse_iso8601(release_date.text)\n\n            entries.append({\n                '_type': 'url_transparent',\n                'url': content_url,\n                'id': guid,\n                'title': title,\n                'description': xpath_text(item, 'description'),\n                'timestamp': timestamp,\n                'duration': int_or_none(content.get('duration')),\n                'age_limit': parse_age_limit(xpath_text(item, _add_ns('media:rating'))),\n                'episode': xpath_text(item, _add_ns('clearleap:episode')),\n                'episode_number': int_or_none(xpath_text(item, _add_ns('clearleap:episodeInSeason'))),\n                'series': xpath_text(item, _add_ns('clearleap:series')),\n                'season_number': int_or_none(xpath_text(item, _add_ns('clearleap:season'))),\n                'thumbnails': thumbnails,\n                'ie_key': 'CBCWatchVideo',\n            })\n\n        return self.playlist_result(\n            entries, xpath_text(channel, 'guid'),\n            xpath_text(channel, 'title'),\n            xpath_text(channel, 'description'))\n\n\nclass CBCWatchVideoIE(CBCWatchBaseIE):\n    IE_NAME = 'cbc.ca:watch:video'\n    _VALID_URL = r'https?://api-cbc\\.cloud\\.clearleap\\.com/cloffice/client/web/play/?\\?.*?\\bcontentId=(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n    _TEST = {\n        # geo-restricted to Canada, bypassable\n        'url': 'https://api-cbc.cloud.clearleap.com/cloffice/client/web/play/?contentId=3c84472a-1eea-4dee-9267-2655d5055dcf&categoryId=ebc258f5-ee40-4cca-b66b-ba6bd55b7235',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        result = self._call_api(url, video_id)\n\n        m3u8_url = xpath_text(result, 'url', fatal=True)\n        formats = self._extract_m3u8_formats(re.sub(r'/([^/]+)/[^/?]+\\.m3u8', r'/\\1/\\1.m3u8', m3u8_url), video_id, 'mp4', fatal=False)\n        if len(formats) < 2:\n            formats = self._extract_m3u8_formats(m3u8_url, video_id, 'mp4')\n        for f in formats:\n            format_id = f.get('format_id')\n            if format_id.startswith('AAC'):\n                f['acodec'] = 'aac'\n            elif format_id.startswith('AC3'):\n                f['acodec'] = 'ac-3'\n        self._sort_formats(formats)\n\n        info = {\n            'id': video_id,\n            'title': video_id,\n            'formats': formats,\n        }\n\n        rss = xpath_element(result, 'rss')\n        if rss:\n            info.update(self._parse_rss_feed(rss)['entries'][0])\n            del info['url']\n            del info['_type']\n            del info['ie_key']\n        return info\n\n\nclass CBCWatchIE(CBCWatchBaseIE):\n    IE_NAME = 'cbc.ca:watch'\n    _VALID_URL = r'https?://watch\\.cbc\\.ca/(?:[^/]+/)+(?P<id>[0-9a-f-]+)'\n    _TESTS = [{\n        # geo-restricted to Canada, bypassable\n        'url': 'http://watch.cbc.ca/doc-zone/season-6/customer-disservice/38e815a-009e3ab12e4',\n        'info_dict': {\n            'id': '9673749a-5e77-484c-8b62-a1092a6b5168',\n            'ext': 'mp4',\n            'title': 'Customer (Dis)Service',\n            'description': 'md5:8bdd6913a0fe03d4b2a17ebe169c7c87',\n            'upload_date': '20160219',\n            'timestamp': 1455840000,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n            'format': 'bestvideo',\n        },\n    }, {\n        # geo-restricted to Canada, bypassable\n        'url': 'http://watch.cbc.ca/arthur/all/1ed4b385-cd84-49cf-95f0-80f004680057',\n        'info_dict': {\n            'id': '1ed4b385-cd84-49cf-95f0-80f004680057',\n            'title': 'Arthur',\n            'description': 'Arthur, the sweetest 8-year-old aardvark, and his pals solve all kinds of problems with humour, kindness and teamwork.',\n        },\n        'playlist_mincount': 30,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        rss = self._call_api('web/browse/' + video_id, video_id)\n        return self._parse_rss_feed(rss)\n\n\nclass CBCOlympicsIE(InfoExtractor):\n    IE_NAME = 'cbc.ca:olympics'\n    _VALID_URL = r'https?://olympics\\.cbc\\.ca/video/[^/]+/(?P<id>[^/?#]+)'\n    _TESTS = [{\n        'url': 'https://olympics.cbc.ca/video/whats-on-tv/olympic-morning-featuring-the-opening-ceremony/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._hidden_inputs(webpage)['videoId']\n        video_doc = self._download_xml(\n            'https://olympics.cbc.ca/videodata/%s.xml' % video_id, video_id)\n        title = xpath_text(video_doc, 'title', fatal=True)\n        is_live = xpath_text(video_doc, 'kind') == 'Live'\n        if is_live:\n            title = self._live_title(title)\n\n        formats = []\n        for video_source in video_doc.findall('videoSources/videoSource'):\n            uri = xpath_text(video_source, 'uri')\n            if not uri:\n                continue\n            tokenize = self._download_json(\n                'https://olympics.cbc.ca/api/api-akamai/tokenize',\n                video_id, data=json.dumps({\n                    'VideoSource': uri,\n                }).encode(), headers={\n                    'Content-Type': 'application/json',\n                    'Referer': url,\n                    # d3.VideoPlayer._init in https://olympics.cbc.ca/components/script/base.js\n                    'Cookie': '_dvp=TK:C0ObxjerU',  # AKAMAI CDN cookie\n                }, fatal=False)\n            if not tokenize:\n                continue\n            content_url = tokenize['ContentUrl']\n            video_source_format = video_source.get('format')\n            if video_source_format == 'IIS':\n                formats.extend(self._extract_ism_formats(\n                    content_url, video_id, ism_id=video_source_format, fatal=False))\n            else:\n                formats.extend(self._extract_m3u8_formats(\n                    content_url, video_id, 'mp4',\n                    'm3u8' if is_live else 'm3u8_native',\n                    m3u8_id=video_source_format, fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': xpath_text(video_doc, 'description'),\n            'thumbnail': xpath_text(video_doc, 'thumbnailUrl'),\n            'duration': parse_duration(xpath_text(video_doc, 'duration')),\n            'formats': formats,\n            'is_live': is_live,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cbc.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cbc.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}