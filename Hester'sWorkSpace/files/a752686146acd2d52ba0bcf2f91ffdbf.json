{"author": "certbot", "code": "\"\"\"Tests for letshelp.letshelp_certbot_apache.py\"\"\"\nimport argparse\nimport functools\nimport os\nimport pkg_resources\nimport subprocess\nimport tarfile\nimport tempfile\nimport unittest\n\nimport mock\n()\nimport six  \n\nimport letshelp_certbot.apache as letshelp_le_apache\n\n\n_PARTIAL_CONF_PATH = os.path.join(\"mods-available\", \"ssl.load\")\n_PARTIAL_LINK_PATH = os.path.join(\"mods-enabled\", \"ssl.load\")\n_CONFIG_FILE = pkg_resources.resource_filename(\n    __name__, os.path.join(\"testdata\", _PARTIAL_CONF_PATH))\n_PASSWD_FILE = pkg_resources.resource_filename(\n    __name__, os.path.join(\"testdata\", \"uncommonly_named_p4sswd\"))\n_KEY_FILE = pkg_resources.resource_filename(\n    __name__, os.path.join(\"testdata\", \"uncommonly_named_k3y\"))\n_SECRET_FILE = pkg_resources.resource_filename(\n    __name__, os.path.join(\"testdata\", \"super_secret_file.txt\"))\n\n\n_MODULE_NAME = \"letshelp_certbot.apache\"\n\n\n_COMPILE_SETTINGS = \"\"\"Server version: Apache/2.4.10 (Debian)\nServer built:   Mar 15 2015 09:51:43\nServer's Module Magic Number: 20120211:37\nServer loaded:  APR 1.5.1, APR-UTIL 1.5.4\nCompiled using: APR 1.5.1, APR-UTIL 1.5.4\nArchitecture:   64-bit\nServer MPM:     event\n  threaded:     yes (fixed thread count)\n    forked:     yes (variable process count)\nServer compiled with....\n -D APR_HAS_SENDFILE\n -D APR_HAS_MMAP\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n -D APR_USE_SYSVSEM_SERIALIZE\n -D APR_USE_PTHREAD_SERIALIZE\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n -D APR_HAS_OTHER_CHILD\n -D AP_HAVE_RELIABLE_PIPED_LOGS\n -D DYNAMIC_MODULE_LIMIT=256\n -D HTTPD_ROOT=\"/etc/apache2\"\n -D SUEXEC_BIN=\"/usr/lib/apache2/suexec\"\n -D DEFAULT_PIDLOG=\"/var/run/apache2.pid\"\n -D DEFAULT_SCOREBOARD=\"logs/apache_runtime_status\"\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\n -D AP_TYPES_CONFIG_FILE=\"mime.types\"\n -D SERVER_CONFIG_FILE=\"apache2.conf\"\n\n\"\"\"\n\n\nclass LetsHelpApacheTest(unittest.TestCase):\n    @mock.patch(_MODULE_NAME + \".copy_config\")\n    def test_make_and_verify_selection(self, mock_copy_config):\n        mock_copy_config.return_value = ([\"apache2.conf\"], [\"apache2\"])\n\n        with mock.patch(\"six.moves.input\") as mock_input:\n            with mock.patch(_MODULE_NAME + \".sys.stdout\"):\n                mock_input.side_effect = [\"Yes\", \"No\"]\n                letshelp_le_apache.make_and_verify_selection(\"root\", \"temp\")\n                self.assertRaises(\n                    SystemExit, letshelp_le_apache.make_and_verify_selection,\n                    \"server_root\", \"temp_dir\")\n\n    def test_copy_config(self):\n        tempdir = tempfile.mkdtemp()\n        server_root = pkg_resources.resource_filename(__name__, \"testdata\")\n        letshelp_le_apache.copy_config(server_root, tempdir)\n\n        temp_testdata = os.path.join(tempdir, \"testdata\")\n        self.assertFalse(os.path.exists(os.path.join(\n            temp_testdata, os.path.basename(_PASSWD_FILE))))\n        self.assertFalse(os.path.exists(os.path.join(\n            temp_testdata, os.path.basename(_KEY_FILE))))\n        self.assertFalse(os.path.exists(os.path.join(\n            temp_testdata, os.path.basename(_SECRET_FILE))))\n        self.assertTrue(os.path.exists(os.path.join(\n            temp_testdata, _PARTIAL_CONF_PATH)))\n        self.assertTrue(os.path.exists(os.path.join(\n            temp_testdata, _PARTIAL_LINK_PATH)))\n\n    def test_copy_file_without_comments(self):\n        dest = tempfile.mkstemp()[1]\n        letshelp_le_apache.copy_file_without_comments(_PASSWD_FILE, dest)\n\n        with open(_PASSWD_FILE) as original:\n            with open(dest) as copy:\n                for original_line, copied_line in zip(original, copy):\n                    self.assertEqual(original_line, copied_line)\n\n    @mock.patch(_MODULE_NAME + \".subprocess.Popen\")\n    def test_safe_config_file(self, mock_popen):\n        mock_popen().communicate.return_value = (\"PEM RSA private key\", None)\n        self.assertFalse(letshelp_le_apache.safe_config_file(\"filename\"))\n\n        mock_popen().communicate.return_value = (\"ASCII text\", None)\n        self.assertFalse(letshelp_le_apache.safe_config_file(_PASSWD_FILE))\n        self.assertFalse(letshelp_le_apache.safe_config_file(_KEY_FILE))\n        self.assertFalse(letshelp_le_apache.safe_config_file(_SECRET_FILE))\n        self.assertTrue(letshelp_le_apache.safe_config_file(_CONFIG_FILE))\n\n    @mock.patch(_MODULE_NAME + \".subprocess.Popen\")\n    def test_tempdir(self, mock_popen):\n        mock_popen().communicate.side_effect = [\n            (\"version\", None), (\"modules\", None), (\"vhosts\", None)]\n        args = _get_args()\n\n        tempdir = letshelp_le_apache.setup_tempdir(args)\n\n        with open(os.path.join(tempdir, \"config_file\")) as config_fd:\n            self.assertEqual(config_fd.read(), args.config_file + \"\\n\")\n\n        with open(os.path.join(tempdir, \"version\")) as version_fd:\n            self.assertEqual(version_fd.read(), \"version\")\n\n        with open(os.path.join(tempdir, \"modules\")) as modules_fd:\n            self.assertEqual(modules_fd.read(), \"modules\")\n\n        with open(os.path.join(tempdir, \"vhosts\")) as vhosts_fd:\n            self.assertEqual(vhosts_fd.read(), \"vhosts\")\n\n    @mock.patch(_MODULE_NAME + \".subprocess.check_call\")\n    def test_verify_config(self, mock_check_call):\n        args = _get_args()\n        mock_check_call.side_effect = [\n            None, OSError, subprocess.CalledProcessError(1, \"apachectl\")]\n\n        letshelp_le_apache.verify_config(args)\n        self.assertRaises(SystemExit, letshelp_le_apache.verify_config, args)\n        self.assertRaises(SystemExit, letshelp_le_apache.verify_config, args)\n\n    @mock.patch(_MODULE_NAME + \".subprocess.Popen\")\n    def test_locate_config(self, mock_popen):\n        mock_popen().communicate.side_effect = [\n            OSError, (\"bad_output\", None), (_COMPILE_SETTINGS, None)]\n\n        self.assertRaises(\n            SystemExit, letshelp_le_apache.locate_config, \"ctl\")\n        self.assertRaises(\n            SystemExit, letshelp_le_apache.locate_config, \"ctl\")\n        server_root, config_file = letshelp_le_apache.locate_config(\"ctl\")\n        self.assertEqual(server_root, \"/etc/apache2\")\n        self.assertEqual(config_file, \"apache2.conf\")\n\n    @mock.patch(_MODULE_NAME + \".argparse\")\n    def test_get_args(self, mock_argparse):\n        argv = [\"-d\", \"/etc/apache2\"]\n        mock_argparse.ArgumentParser.return_value = _create_mock_parser(argv)\n        self.assertRaises(SystemExit, letshelp_le_apache.get_args)\n\n        server_root = \"/etc/apache2\"\n        config_file = server_root + \"/apache2.conf\"\n        argv = [\"-d\", server_root, \"-f\", config_file]\n        mock_argparse.ArgumentParser.return_value = _create_mock_parser(argv)\n        args = letshelp_le_apache.get_args()\n        self.assertEqual(args.apache_ctl, \"apachectl\")\n        self.assertEqual(args.server_root, server_root)\n        self.assertEqual(args.config_file, os.path.basename(config_file))\n\n        server_root = \"/etc/apache2\"\n        config_file = \"/etc/httpd/httpd.conf\"\n        argv = [\"-d\", server_root, \"-f\", config_file]\n        mock_argparse.ArgumentParser.return_value = _create_mock_parser(argv)\n        self.assertRaises(SystemExit, letshelp_le_apache.get_args)\n\n    def test_main_with_args(self):\n        with mock.patch(_MODULE_NAME + \".get_args\"):\n            self._test_main_common()\n\n    def test_main_without_args(self):\n        with mock.patch(_MODULE_NAME + \".get_args\") as get_args:\n            args = _get_args()\n            server_root, config_file = args.server_root, args.config_file\n            args.server_root = args.config_file = None\n            get_args.return_value = args\n            with mock.patch(_MODULE_NAME + \".locate_config\") as locate:\n                locate.return_value = (server_root, config_file)\n                self._test_main_common()\n\n    def _test_main_common(self):\n        with mock.patch(_MODULE_NAME + \".verify_config\"):\n            with mock.patch(_MODULE_NAME + \".setup_tempdir\") as mock_setup:\n                tempdir_path = tempfile.mkdtemp()\n                mock_setup.return_value = tempdir_path\n                with mock.patch(_MODULE_NAME + \".make_and_verify_selection\"):\n                    testdir_basename = \"test\"\n                    os.mkdir(os.path.join(tempdir_path, testdir_basename))\n\n                    letshelp_le_apache.main()\n\n                    tar = tarfile.open(os.path.join(\n                        tempdir_path, \"config.tar.gz\"))\n\n                    tempdir = tar.next()\n                    self.assertTrue(tempdir.isdir())\n                    self.assertEqual(tempdir.name, \".\")\n\n                    testdir = tar.next()\n                    self.assertTrue(testdir.isdir())\n                    self.assertEqual(os.path.basename(testdir.name),\n                                     testdir_basename)\n\n                    self.assertEqual(tar.next(), None)\n\n\ndef _create_mock_parser(argv):\n    parser = argparse.ArgumentParser()\n    mock_parser = mock.MagicMock()\n    mock_parser.add_argument = parser.add_argument\n    mock_parser.parse_args = functools.partial(parser.parse_args, argv)\n\n    return mock_parser\n\n\ndef _get_args():\n    args = argparse.Namespace()\n    args.apache_ctl = \"apache_ctl\"\n    args.config_file = \"config_file\"\n    args.server_root = \"server_root\"\n\n    return args\n\n\nif __name__ == \"__main__\":\n    unittest.main()  \n", "comments": "   tests letshelp letshelp certbot apache py    import argparse import functools import os import pkg resources import subprocess import tarfile import tempfile import unittest  import mock   six used mock patch() import six    pylint  disable unused import  import letshelp certbot apache letshelp le apache    partial conf path   os path join( mods available    ssl load )  partial link path   os path join( mods enabled    ssl load )  config file   pkg resources resource filename(       name    os path join( testdata    partial conf path))  passwd file   pkg resources resource filename(       name    os path join( testdata    uncommonly named p4sswd ))  key file   pkg resources resource filename(       name    os path join( testdata    uncommonly named k3y ))  secret file   pkg resources resource filename(       name    os path join( testdata    super secret file txt ))    module name    letshelp certbot apache     compile settings      server version  apache 2 4 10 (debian) server built    mar 15 2015 09 51 43 server module magic number  20120211 37 server loaded   apr 1 5 1  apr util 1 5 4 compiled using  apr 1 5 1  apr util 1 5 4 architecture    64 bit server mpm      event   threaded      yes (fixed thread count)     forked      yes (variable process count) server compiled       d apr has sendfile   d apr has mmap   d apr have ipv6 (ipv4 mapped addresses enabled)   d apr use sysvsem serialize   d apr use pthread serialize   d single listen unserialized accept   d apr has other child   d ap have reliable piped logs   d dynamic module limit 256   d httpd root   etc apache2    d suexec bin   usr lib apache2 suexec    d default pidlog   var run apache2 pid    d default scoreboard  logs apache runtime status    d default errorlog  logs error log    d ap types config file  mime types    d server config file  apache2 conf          six used mock patch()    pylint  disable unused import    pragma  cover ", "content": "\"\"\"Tests for letshelp.letshelp_certbot_apache.py\"\"\"\nimport argparse\nimport functools\nimport os\nimport pkg_resources\nimport subprocess\nimport tarfile\nimport tempfile\nimport unittest\n\nimport mock\n# six is used in mock.patch()\nimport six  # pylint: disable=unused-import\n\nimport letshelp_certbot.apache as letshelp_le_apache\n\n\n_PARTIAL_CONF_PATH = os.path.join(\"mods-available\", \"ssl.load\")\n_PARTIAL_LINK_PATH = os.path.join(\"mods-enabled\", \"ssl.load\")\n_CONFIG_FILE = pkg_resources.resource_filename(\n    __name__, os.path.join(\"testdata\", _PARTIAL_CONF_PATH))\n_PASSWD_FILE = pkg_resources.resource_filename(\n    __name__, os.path.join(\"testdata\", \"uncommonly_named_p4sswd\"))\n_KEY_FILE = pkg_resources.resource_filename(\n    __name__, os.path.join(\"testdata\", \"uncommonly_named_k3y\"))\n_SECRET_FILE = pkg_resources.resource_filename(\n    __name__, os.path.join(\"testdata\", \"super_secret_file.txt\"))\n\n\n_MODULE_NAME = \"letshelp_certbot.apache\"\n\n\n_COMPILE_SETTINGS = \"\"\"Server version: Apache/2.4.10 (Debian)\nServer built:   Mar 15 2015 09:51:43\nServer's Module Magic Number: 20120211:37\nServer loaded:  APR 1.5.1, APR-UTIL 1.5.4\nCompiled using: APR 1.5.1, APR-UTIL 1.5.4\nArchitecture:   64-bit\nServer MPM:     event\n  threaded:     yes (fixed thread count)\n    forked:     yes (variable process count)\nServer compiled with....\n -D APR_HAS_SENDFILE\n -D APR_HAS_MMAP\n -D APR_HAVE_IPV6 (IPv4-mapped addresses enabled)\n -D APR_USE_SYSVSEM_SERIALIZE\n -D APR_USE_PTHREAD_SERIALIZE\n -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n -D APR_HAS_OTHER_CHILD\n -D AP_HAVE_RELIABLE_PIPED_LOGS\n -D DYNAMIC_MODULE_LIMIT=256\n -D HTTPD_ROOT=\"/etc/apache2\"\n -D SUEXEC_BIN=\"/usr/lib/apache2/suexec\"\n -D DEFAULT_PIDLOG=\"/var/run/apache2.pid\"\n -D DEFAULT_SCOREBOARD=\"logs/apache_runtime_status\"\n -D DEFAULT_ERRORLOG=\"logs/error_log\"\n -D AP_TYPES_CONFIG_FILE=\"mime.types\"\n -D SERVER_CONFIG_FILE=\"apache2.conf\"\n\n\"\"\"\n\n\nclass LetsHelpApacheTest(unittest.TestCase):\n    @mock.patch(_MODULE_NAME + \".copy_config\")\n    def test_make_and_verify_selection(self, mock_copy_config):\n        mock_copy_config.return_value = ([\"apache2.conf\"], [\"apache2\"])\n\n        with mock.patch(\"six.moves.input\") as mock_input:\n            with mock.patch(_MODULE_NAME + \".sys.stdout\"):\n                mock_input.side_effect = [\"Yes\", \"No\"]\n                letshelp_le_apache.make_and_verify_selection(\"root\", \"temp\")\n                self.assertRaises(\n                    SystemExit, letshelp_le_apache.make_and_verify_selection,\n                    \"server_root\", \"temp_dir\")\n\n    def test_copy_config(self):\n        tempdir = tempfile.mkdtemp()\n        server_root = pkg_resources.resource_filename(__name__, \"testdata\")\n        letshelp_le_apache.copy_config(server_root, tempdir)\n\n        temp_testdata = os.path.join(tempdir, \"testdata\")\n        self.assertFalse(os.path.exists(os.path.join(\n            temp_testdata, os.path.basename(_PASSWD_FILE))))\n        self.assertFalse(os.path.exists(os.path.join(\n            temp_testdata, os.path.basename(_KEY_FILE))))\n        self.assertFalse(os.path.exists(os.path.join(\n            temp_testdata, os.path.basename(_SECRET_FILE))))\n        self.assertTrue(os.path.exists(os.path.join(\n            temp_testdata, _PARTIAL_CONF_PATH)))\n        self.assertTrue(os.path.exists(os.path.join(\n            temp_testdata, _PARTIAL_LINK_PATH)))\n\n    def test_copy_file_without_comments(self):\n        dest = tempfile.mkstemp()[1]\n        letshelp_le_apache.copy_file_without_comments(_PASSWD_FILE, dest)\n\n        with open(_PASSWD_FILE) as original:\n            with open(dest) as copy:\n                for original_line, copied_line in zip(original, copy):\n                    self.assertEqual(original_line, copied_line)\n\n    @mock.patch(_MODULE_NAME + \".subprocess.Popen\")\n    def test_safe_config_file(self, mock_popen):\n        mock_popen().communicate.return_value = (\"PEM RSA private key\", None)\n        self.assertFalse(letshelp_le_apache.safe_config_file(\"filename\"))\n\n        mock_popen().communicate.return_value = (\"ASCII text\", None)\n        self.assertFalse(letshelp_le_apache.safe_config_file(_PASSWD_FILE))\n        self.assertFalse(letshelp_le_apache.safe_config_file(_KEY_FILE))\n        self.assertFalse(letshelp_le_apache.safe_config_file(_SECRET_FILE))\n        self.assertTrue(letshelp_le_apache.safe_config_file(_CONFIG_FILE))\n\n    @mock.patch(_MODULE_NAME + \".subprocess.Popen\")\n    def test_tempdir(self, mock_popen):\n        mock_popen().communicate.side_effect = [\n            (\"version\", None), (\"modules\", None), (\"vhosts\", None)]\n        args = _get_args()\n\n        tempdir = letshelp_le_apache.setup_tempdir(args)\n\n        with open(os.path.join(tempdir, \"config_file\")) as config_fd:\n            self.assertEqual(config_fd.read(), args.config_file + \"\\n\")\n\n        with open(os.path.join(tempdir, \"version\")) as version_fd:\n            self.assertEqual(version_fd.read(), \"version\")\n\n        with open(os.path.join(tempdir, \"modules\")) as modules_fd:\n            self.assertEqual(modules_fd.read(), \"modules\")\n\n        with open(os.path.join(tempdir, \"vhosts\")) as vhosts_fd:\n            self.assertEqual(vhosts_fd.read(), \"vhosts\")\n\n    @mock.patch(_MODULE_NAME + \".subprocess.check_call\")\n    def test_verify_config(self, mock_check_call):\n        args = _get_args()\n        mock_check_call.side_effect = [\n            None, OSError, subprocess.CalledProcessError(1, \"apachectl\")]\n\n        letshelp_le_apache.verify_config(args)\n        self.assertRaises(SystemExit, letshelp_le_apache.verify_config, args)\n        self.assertRaises(SystemExit, letshelp_le_apache.verify_config, args)\n\n    @mock.patch(_MODULE_NAME + \".subprocess.Popen\")\n    def test_locate_config(self, mock_popen):\n        mock_popen().communicate.side_effect = [\n            OSError, (\"bad_output\", None), (_COMPILE_SETTINGS, None)]\n\n        self.assertRaises(\n            SystemExit, letshelp_le_apache.locate_config, \"ctl\")\n        self.assertRaises(\n            SystemExit, letshelp_le_apache.locate_config, \"ctl\")\n        server_root, config_file = letshelp_le_apache.locate_config(\"ctl\")\n        self.assertEqual(server_root, \"/etc/apache2\")\n        self.assertEqual(config_file, \"apache2.conf\")\n\n    @mock.patch(_MODULE_NAME + \".argparse\")\n    def test_get_args(self, mock_argparse):\n        argv = [\"-d\", \"/etc/apache2\"]\n        mock_argparse.ArgumentParser.return_value = _create_mock_parser(argv)\n        self.assertRaises(SystemExit, letshelp_le_apache.get_args)\n\n        server_root = \"/etc/apache2\"\n        config_file = server_root + \"/apache2.conf\"\n        argv = [\"-d\", server_root, \"-f\", config_file]\n        mock_argparse.ArgumentParser.return_value = _create_mock_parser(argv)\n        args = letshelp_le_apache.get_args()\n        self.assertEqual(args.apache_ctl, \"apachectl\")\n        self.assertEqual(args.server_root, server_root)\n        self.assertEqual(args.config_file, os.path.basename(config_file))\n\n        server_root = \"/etc/apache2\"\n        config_file = \"/etc/httpd/httpd.conf\"\n        argv = [\"-d\", server_root, \"-f\", config_file]\n        mock_argparse.ArgumentParser.return_value = _create_mock_parser(argv)\n        self.assertRaises(SystemExit, letshelp_le_apache.get_args)\n\n    def test_main_with_args(self):\n        with mock.patch(_MODULE_NAME + \".get_args\"):\n            self._test_main_common()\n\n    def test_main_without_args(self):\n        with mock.patch(_MODULE_NAME + \".get_args\") as get_args:\n            args = _get_args()\n            server_root, config_file = args.server_root, args.config_file\n            args.server_root = args.config_file = None\n            get_args.return_value = args\n            with mock.patch(_MODULE_NAME + \".locate_config\") as locate:\n                locate.return_value = (server_root, config_file)\n                self._test_main_common()\n\n    def _test_main_common(self):\n        with mock.patch(_MODULE_NAME + \".verify_config\"):\n            with mock.patch(_MODULE_NAME + \".setup_tempdir\") as mock_setup:\n                tempdir_path = tempfile.mkdtemp()\n                mock_setup.return_value = tempdir_path\n                with mock.patch(_MODULE_NAME + \".make_and_verify_selection\"):\n                    testdir_basename = \"test\"\n                    os.mkdir(os.path.join(tempdir_path, testdir_basename))\n\n                    letshelp_le_apache.main()\n\n                    tar = tarfile.open(os.path.join(\n                        tempdir_path, \"config.tar.gz\"))\n\n                    tempdir = tar.next()\n                    self.assertTrue(tempdir.isdir())\n                    self.assertEqual(tempdir.name, \".\")\n\n                    testdir = tar.next()\n                    self.assertTrue(testdir.isdir())\n                    self.assertEqual(os.path.basename(testdir.name),\n                                     testdir_basename)\n\n                    self.assertEqual(tar.next(), None)\n\n\ndef _create_mock_parser(argv):\n    parser = argparse.ArgumentParser()\n    mock_parser = mock.MagicMock()\n    mock_parser.add_argument = parser.add_argument\n    mock_parser.parse_args = functools.partial(parser.parse_args, argv)\n\n    return mock_parser\n\n\ndef _get_args():\n    args = argparse.Namespace()\n    args.apache_ctl = \"apache_ctl\"\n    args.config_file = \"config_file\"\n    args.server_root = \"server_root\"\n\n    return args\n\n\nif __name__ == \"__main__\":\n    unittest.main()  # pragma: no cover\n", "description": "Certbot is EFF's tool to obtain certs from Let's Encrypt and (optionally) auto-enable HTTPS on your server.  It can also act as a client for any other CA that uses the ACME protocol.", "file_name": "apache_test.py", "id": "a752686146acd2d52ba0bcf2f91ffdbf", "language": "Python", "project_name": "certbot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/certbot-certbot/certbot-certbot-3077b51/letshelp-certbot/letshelp_certbot/apache_test.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:22Z", "url": "https://github.com/certbot/certbot", "wiki": false}