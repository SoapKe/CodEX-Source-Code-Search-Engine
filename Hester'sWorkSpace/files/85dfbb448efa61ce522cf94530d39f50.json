{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n    compat_HTTPError,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass VevoBaseIE(InfoExtractor):\n    def _extract_json(self, webpage, video_id):\n        return self._parse_json(\n            self._search_regex(\n                r'window\\.__INITIAL_STORE__\\s*=\\s*({.+?});\\s*</script>',\n                webpage, 'initial store'),\n            video_id)\n\n\nclass VevoIE(VevoBaseIE):\n    , version_url)\n                if not m:\n                    continue\n\n                formats.append({\n                    'url': version_url,\n                    'format_id': 'http-%s-%s' % (version, video_version['quality']),\n                    'vcodec': m.group('vcodec'),\n                    'acodec': m.group('acodec'),\n                    'vbr': int(m.group('vbr')),\n                    'abr': int(m.group('abr')),\n                    'ext': m.group('ext'),\n                    'width': int(m.group('width')),\n                    'height': int(m.group('height')),\n                })\n        self._sort_formats(formats)\n\n        track = video_info['title']\n        if featured_artist:\n            artist = '%s ft. %s' % (artist, featured_artist)\n        title = '%s - %s' % (artist, track) if artist else track\n\n        genres = video_info.get('genres')\n        genre = (\n            genres[0] if genres and isinstance(genres, list) and\n            isinstance(genres[0], compat_str) else None)\n\n        is_explicit = video_info.get('isExplicit')\n        if is_explicit is True:\n            age_limit = 18\n        elif is_explicit is False:\n            age_limit = 0\n        else:\n            age_limit = None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': video_info.get('imageUrl') or video_info.get('thumbnailUrl'),\n            'timestamp': parse_iso8601(video_info.get('releaseDate')),\n            'uploader': uploader,\n            'duration': int_or_none(video_info.get('duration')),\n            'view_count': int_or_none(video_info.get('views', {}).get('total')),\n            'age_limit': age_limit,\n            'track': track,\n            'artist': uploader,\n            'genre': genre,\n        }\n\n\nclass VevoPlaylistIE(VevoBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?vevo\\.com/watch/(?P<kind>playlist|genre)/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://www.vevo.com/watch/playlist/dadbf4e7-b99f-4184-9670-6f0e547b6a29',\n        'info_dict': {\n            'id': 'dadbf4e7-b99f-4184-9670-6f0e547b6a29',\n            'title': 'Best-Of: Birdman',\n        },\n        'playlist_count': 10,\n    }, {\n        'url': 'http://www.vevo.com/watch/genre/rock',\n        'info_dict': {\n            'id': 'rock',\n            'title': 'Rock',\n        },\n        'playlist_count': 20,\n    }, {\n        'url': 'http://www.vevo.com/watch/playlist/dadbf4e7-b99f-4184-9670-6f0e547b6a29?index=0',\n        'md5': '32dcdfddddf9ec6917fc88ca26d36282',\n        'info_dict': {\n            'id': 'USCMV1100073',\n            'ext': 'mp4',\n            'title': 'Birdman - Y.U. MAD',\n            'timestamp': 1323417600,\n            'upload_date': '20111209',\n            'uploader': 'Birdman',\n            'track': 'Y.U. MAD',\n            'artist': 'Birdman',\n            'genre': 'Rap/Hip-Hop',\n        },\n        'expected_warnings': ['Unable to download SMIL file'],\n    }, {\n        'url': 'http://www.vevo.com/watch/genre/rock?index=0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n        playlist_kind = mobj.group('kind')\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        index = qs.get('index', [None])[0]\n\n        if index:\n            video_id = self._search_regex(\n                r'<meta[^>]+content=([\"\\'])vevo://video/(?P<id>.+?)\\1[^>]*>',\n                webpage, 'video id', default=None, group='id')\n            if video_id:\n                return self.url_result('vevo:%s' % video_id, VevoIE.ie_key())\n\n        playlists = self._extract_json(webpage, playlist_id)['default']['%ss' % playlist_kind]\n\n        playlist = (list(playlists.values())[0]\n                    if playlist_kind == 'playlist' else playlists[playlist_id])\n\n        entries = [\n            self.url_result('vevo:%s' % src, VevoIE.ie_key())\n            for src in playlist['isrcs']]\n\n        return self.playlist_result(\n            entries, playlist.get('playlistId') or playlist_id,\n            playlist.get('name'), playlist.get('description'))\n", "comments": "\n    Accepts urls from vevo.com or in the format 'vevo:{id}'\n    (currently used by MTVIE and MySpaceIE)\n    '''\n    _VALID_URL = r'''(?x)\n        (?:https?://(?:www\\.)?vevo\\.com/watch/(?!playlist|genre)(?:[^/]+/(?:[^/]+/)?)?|\n           https?://cache\\.vevo\\.com/m/html/embed\\.html\\?video=|\n           https?://videoplayer\\.vevo\\.com/embed/embedded\\?videoId=|\n           vevo:)\n        (?P<id>[^&?#]+)'''\n\n    _TESTS = [{\n        'url': 'http://www.vevo.com/watch/hurts/somebody-to-die-for/GB1101300280',\n        'md5': '95ee28ee45e70130e3ab02b0f579ae23',\n        'info_dict': {\n            'id': 'GB1101300280',\n            'ext': 'mp4',\n            'title': 'Hurts - Somebody to Die For',\n            'timestamp': 1372057200,\n            'upload_date': '20130624',\n            'uploader': 'Hurts',\n            'track': 'Somebody to Die For',\n            'artist': 'Hurts',\n            'genre': 'Pop',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'v3 SMIL format',\n        'url': 'http://www.vevo.com/watch/cassadee-pope/i-wish-i-could-break-your-heart/USUV71302923',\n        'md5': 'f6ab09b034f8c22969020b042e5ac7fc',\n        'info_dict': {\n            'id': 'USUV71302923',\n            'ext': 'mp4',\n            'title': 'Cassadee Pope - I Wish I Could Break Your Heart',\n            'timestamp': 1392796919,\n            'upload_date': '20140219',\n            'uploader': 'Cassadee Pope',\n            'track': 'I Wish I Could Break Your Heart',\n            'artist': 'Cassadee Pope',\n            'genre': 'Country',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'Age-limited video',\n        'url': 'https://www.vevo.com/watch/justin-timberlake/tunnel-vision-explicit/USRV81300282',\n        'info_dict': {\n            'id': 'USRV81300282',\n            'ext': 'mp4',\n            'title': 'Justin Timberlake - Tunnel Vision (Explicit)',\n            'age_limit': 18,\n            'timestamp': 1372888800,\n            'upload_date': '20130703',\n            'uploader': 'Justin Timberlake',\n            'track': 'Tunnel Vision (Explicit)',\n            'artist': 'Justin Timberlake',\n            'genre': 'Pop',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'No video_info',\n        'url': 'http://www.vevo.com/watch/k-camp-1/Till-I-Die/USUV71503000',\n        'md5': '8b83cc492d72fc9cf74a02acee7dc1b0',\n        'info_dict': {\n            'id': 'USUV71503000',\n            'ext': 'mp4',\n            'title': 'K Camp ft. T.I. - Till I Die',\n            'age_limit': 18,\n            'timestamp': 1449468000,\n            'upload_date': '20151207',\n            'uploader': 'K Camp',\n            'track': 'Till I Die',\n            'artist': 'K Camp',\n            'genre': 'Hip-Hop',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'Featured test',\n        'url': 'https://www.vevo.com/watch/lemaitre/Wait/USUV71402190',\n        'md5': 'd28675e5e8805035d949dc5cf161071d',\n        'info_dict': {\n            'id': 'USUV71402190',\n            'ext': 'mp4',\n            'title': 'Lemaitre ft. LoLo - Wait',\n            'age_limit': 0,\n            'timestamp': 1413432000,\n            'upload_date': '20141016',\n            'uploader': 'Lemaitre',\n            'track': 'Wait',\n            'artist': 'Lemaitre',\n            'genre': 'Electronic',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'Only available via webpage',\n        'url': 'http://www.vevo.com/watch/GBUV71600656',\n        'md5': '67e79210613865b66a47c33baa5e37fe',\n        'info_dict': {\n            'id': 'GBUV71600656',\n            'ext': 'mp4',\n            'title': 'ABC - Viva Love',\n            'age_limit': 0,\n            'timestamp': 1461830400,\n            'upload_date': '20160428',\n            'uploader': 'ABC',\n            'track': 'Viva Love',\n            'artist': 'ABC',\n            'genre': 'Pop',\n        },\n        'expected_warnings': ['Failed to download video versions info'],\n    }, {\n        # no genres available\n        'url': 'http://www.vevo.com/watch/INS171400764',\n        'only_matching': True,\n    }, {\n        # Another case available only via the webpage; using streams/streamsV3 formats\n        # Geo-restricted to Netherlands/Germany\n        'url': 'http://www.vevo.com/watch/boostee/pop-corn-clip-officiel/FR1A91600909',\n        'only_matching': True,\n    }]\n    _VERSIONS = {\n        0: 'youtube',  # only in AuthenticateVideo videoVersions\n        1: 'level3',\n        2: 'akamai',\n        3: 'level3',\n        4: 'amazon',\n    }\n\n    def _initialize_api(self, video_id):\n        webpage = self._download_webpage(\n            'https://accounts.vevo.com/token', None,\n            note='Retrieving oauth token',\n            errnote='Unable to retrieve oauth token',\n            data=json.dumps({\n                'client_id': 'SPupX1tvqFEopQ1YS6SS',\n                'grant_type': 'urn:vevo:params:oauth:grant-type:anonymous',\n            }).encode('utf-8'),\n            headers={\n                'Content-Type': 'application/json',\n            })\n\n        if re.search(r'(?i)THIS PAGE IS CURRENTLY UNAVAILABLE IN YOUR REGION', webpage):\n            self.raise_geo_restricted(\n                '%s said: This page is currently unavailable in your region' % self.IE_NAME)\n\n        auth_info = self._parse_json(webpage, video_id)\n        self._api_url_template = self.http_scheme() + '//apiv2.vevo.com/%s?token=' + auth_info['legacy_token']\n\n    def _call_api(self, path, *args, **kwargs):\n        try:\n            data = self._download_json(self._api_url_template % path, *args, **kwargs)\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError):\n                errors = self._parse_json(e.cause.read().decode(), None)['errors']\n                error_message = ', '.join([error['message'] for error in errors])\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, error_message), expected=True)\n            raise\n        return data\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        self._initialize_api(video_id)\n\n        video_info = self._call_api(\n            'video/%s' % video_id, video_id, 'Downloading api video info',\n            'Failed to download video info')\n\n        video_versions = self._call_api(\n            'video/%s/streams' % video_id, video_id,\n            'Downloading video versions info',\n            'Failed to download video versions info',\n            fatal=False)\n\n        # Some videos are only available via webpage (e.g.\n        # https://github.com/rg3/youtube-dl/issues/9366)\n        if not video_versions:\n            webpage = self._download_webpage(url, video_id)\n            json_data = self._extract_json(webpage, video_id)\n            if 'streams' in json_data.get('default', {}):\n                video_versions = json_data['default']['streams'][video_id][0]\n            else:\n                video_versions = [\n                    value\n                    for key, value in json_data['apollo']['data'].items()\n                    if key.startswith('%s.streams' % video_id)]\n\n        uploader = None\n        artist = None\n        featured_artist = None\n        artists = video_info.get('artists')\n        for curr_artist in artists:\n            if curr_artist.get('role') == 'Featured':\n                featured_artist = curr_artist['name']\n            else:\n                artist = uploader = curr_artist['name']\n\n        formats = []\n        for video_version in video_versions:\n            version = self._VERSIONS.get(video_version.get('version'), 'generic')\n            version_url = video_version.get('url')\n            if not version_url:\n                continue\n\n            if '.ism' in version_url:\n                continue\n            elif '.mpd' in version_url:\n                formats.extend(self._extract_mpd_formats(\n                    version_url, video_id, mpd_id='dash-%s' % version,\n                    note='Downloading %s MPD information' % version,\n                    errnote='Failed to download %s MPD information' % version,\n                    fatal=False))\n            elif '.m3u8' in version_url:\n                formats.extend(self._extract_m3u8_formats(\n                    version_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls-%s' % version,\n                    note='Downloading %s m3u8 information' % version,\n                    errnote='Failed to download %s m3u8 information' % version,\n                    fatal=False))\n            else:\n                m = re.search(r'''(?xi)\n                    _(?P<width>[0-9]+)x(?P<height>[0-9]+)\n                    _(?P<vcodec>[a-z0-9]+)\n                    _(?P<vbr>[0-9]+)\n                    _(?P<acodec>[a-z0-9]+)\n                    _(?P<abr>[0-9]+)\n                    \\.(?P<ext>[a-z0-9]+)\n)\n#&]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n    compat_HTTPError,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass VevoBaseIE(InfoExtractor):\n    def _extract_json(self, webpage, video_id):\n        return self._parse_json(\n            self._search_regex(\n                r'window\\.__INITIAL_STORE__\\s*=\\s*({.+?});\\s*</script>',\n                webpage, 'initial store'),\n            video_id)\n\n\nclass VevoIE(VevoBaseIE):\n    '''\n    Accepts urls from vevo.com or in the format 'vevo:{id}'\n    (currently used by MTVIE and MySpaceIE)\n    '''\n    _VALID_URL = r'''(?x)\n        (?:https?://(?:www\\.)?vevo\\.com/watch/(?!playlist|genre)(?:[^/]+/(?:[^/]+/)?)?|\n           https?://cache\\.vevo\\.com/m/html/embed\\.html\\?video=|\n           https?://videoplayer\\.vevo\\.com/embed/embedded\\?videoId=|\n           vevo:)\n        (?P<id>[^&?#]+)'''\n\n    _TESTS = [{\n        'url': 'http://www.vevo.com/watch/hurts/somebody-to-die-for/GB1101300280',\n        'md5': '95ee28ee45e70130e3ab02b0f579ae23',\n        'info_dict': {\n            'id': 'GB1101300280',\n            'ext': 'mp4',\n            'title': 'Hurts - Somebody to Die For',\n            'timestamp': 1372057200,\n            'upload_date': '20130624',\n            'uploader': 'Hurts',\n            'track': 'Somebody to Die For',\n            'artist': 'Hurts',\n            'genre': 'Pop',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'v3 SMIL format',\n        'url': 'http://www.vevo.com/watch/cassadee-pope/i-wish-i-could-break-your-heart/USUV71302923',\n        'md5': 'f6ab09b034f8c22969020b042e5ac7fc',\n        'info_dict': {\n            'id': 'USUV71302923',\n            'ext': 'mp4',\n            'title': 'Cassadee Pope - I Wish I Could Break Your Heart',\n            'timestamp': 1392796919,\n            'upload_date': '20140219',\n            'uploader': 'Cassadee Pope',\n            'track': 'I Wish I Could Break Your Heart',\n            'artist': 'Cassadee Pope',\n            'genre': 'Country',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'Age-limited video',\n        'url': 'https://www.vevo.com/watch/justin-timberlake/tunnel-vision-explicit/USRV81300282',\n        'info_dict': {\n            'id': 'USRV81300282',\n            'ext': 'mp4',\n            'title': 'Justin Timberlake - Tunnel Vision (Explicit)',\n            'age_limit': 18,\n            'timestamp': 1372888800,\n            'upload_date': '20130703',\n            'uploader': 'Justin Timberlake',\n            'track': 'Tunnel Vision (Explicit)',\n            'artist': 'Justin Timberlake',\n            'genre': 'Pop',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'No video_info',\n        'url': 'http://www.vevo.com/watch/k-camp-1/Till-I-Die/USUV71503000',\n        'md5': '8b83cc492d72fc9cf74a02acee7dc1b0',\n        'info_dict': {\n            'id': 'USUV71503000',\n            'ext': 'mp4',\n            'title': 'K Camp ft. T.I. - Till I Die',\n            'age_limit': 18,\n            'timestamp': 1449468000,\n            'upload_date': '20151207',\n            'uploader': 'K Camp',\n            'track': 'Till I Die',\n            'artist': 'K Camp',\n            'genre': 'Hip-Hop',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'Featured test',\n        'url': 'https://www.vevo.com/watch/lemaitre/Wait/USUV71402190',\n        'md5': 'd28675e5e8805035d949dc5cf161071d',\n        'info_dict': {\n            'id': 'USUV71402190',\n            'ext': 'mp4',\n            'title': 'Lemaitre ft. LoLo - Wait',\n            'age_limit': 0,\n            'timestamp': 1413432000,\n            'upload_date': '20141016',\n            'uploader': 'Lemaitre',\n            'track': 'Wait',\n            'artist': 'Lemaitre',\n            'genre': 'Electronic',\n        },\n        'expected_warnings': ['Unable to download SMIL file', 'Unable to download info'],\n    }, {\n        'note': 'Only available via webpage',\n        'url': 'http://www.vevo.com/watch/GBUV71600656',\n        'md5': '67e79210613865b66a47c33baa5e37fe',\n        'info_dict': {\n            'id': 'GBUV71600656',\n            'ext': 'mp4',\n            'title': 'ABC - Viva Love',\n            'age_limit': 0,\n            'timestamp': 1461830400,\n            'upload_date': '20160428',\n            'uploader': 'ABC',\n            'track': 'Viva Love',\n            'artist': 'ABC',\n            'genre': 'Pop',\n        },\n        'expected_warnings': ['Failed to download video versions info'],\n    }, {\n        # no genres available\n        'url': 'http://www.vevo.com/watch/INS171400764',\n        'only_matching': True,\n    }, {\n        # Another case available only via the webpage; using streams/streamsV3 formats\n        # Geo-restricted to Netherlands/Germany\n        'url': 'http://www.vevo.com/watch/boostee/pop-corn-clip-officiel/FR1A91600909',\n        'only_matching': True,\n    }]\n    _VERSIONS = {\n        0: 'youtube',  # only in AuthenticateVideo videoVersions\n        1: 'level3',\n        2: 'akamai',\n        3: 'level3',\n        4: 'amazon',\n    }\n\n    def _initialize_api(self, video_id):\n        webpage = self._download_webpage(\n            'https://accounts.vevo.com/token', None,\n            note='Retrieving oauth token',\n            errnote='Unable to retrieve oauth token',\n            data=json.dumps({\n                'client_id': 'SPupX1tvqFEopQ1YS6SS',\n                'grant_type': 'urn:vevo:params:oauth:grant-type:anonymous',\n            }).encode('utf-8'),\n            headers={\n                'Content-Type': 'application/json',\n            })\n\n        if re.search(r'(?i)THIS PAGE IS CURRENTLY UNAVAILABLE IN YOUR REGION', webpage):\n            self.raise_geo_restricted(\n                '%s said: This page is currently unavailable in your region' % self.IE_NAME)\n\n        auth_info = self._parse_json(webpage, video_id)\n        self._api_url_template = self.http_scheme() + '//apiv2.vevo.com/%s?token=' + auth_info['legacy_token']\n\n    def _call_api(self, path, *args, **kwargs):\n        try:\n            data = self._download_json(self._api_url_template % path, *args, **kwargs)\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError):\n                errors = self._parse_json(e.cause.read().decode(), None)['errors']\n                error_message = ', '.join([error['message'] for error in errors])\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, error_message), expected=True)\n            raise\n        return data\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        self._initialize_api(video_id)\n\n        video_info = self._call_api(\n            'video/%s' % video_id, video_id, 'Downloading api video info',\n            'Failed to download video info')\n\n        video_versions = self._call_api(\n            'video/%s/streams' % video_id, video_id,\n            'Downloading video versions info',\n            'Failed to download video versions info',\n            fatal=False)\n\n        # Some videos are only available via webpage (e.g.\n        # https://github.com/rg3/youtube-dl/issues/9366)\n        if not video_versions:\n            webpage = self._download_webpage(url, video_id)\n            json_data = self._extract_json(webpage, video_id)\n            if 'streams' in json_data.get('default', {}):\n                video_versions = json_data['default']['streams'][video_id][0]\n            else:\n                video_versions = [\n                    value\n                    for key, value in json_data['apollo']['data'].items()\n                    if key.startswith('%s.streams' % video_id)]\n\n        uploader = None\n        artist = None\n        featured_artist = None\n        artists = video_info.get('artists')\n        for curr_artist in artists:\n            if curr_artist.get('role') == 'Featured':\n                featured_artist = curr_artist['name']\n            else:\n                artist = uploader = curr_artist['name']\n\n        formats = []\n        for video_version in video_versions:\n            version = self._VERSIONS.get(video_version.get('version'), 'generic')\n            version_url = video_version.get('url')\n            if not version_url:\n                continue\n\n            if '.ism' in version_url:\n                continue\n            elif '.mpd' in version_url:\n                formats.extend(self._extract_mpd_formats(\n                    version_url, video_id, mpd_id='dash-%s' % version,\n                    note='Downloading %s MPD information' % version,\n                    errnote='Failed to download %s MPD information' % version,\n                    fatal=False))\n            elif '.m3u8' in version_url:\n                formats.extend(self._extract_m3u8_formats(\n                    version_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls-%s' % version,\n                    note='Downloading %s m3u8 information' % version,\n                    errnote='Failed to download %s m3u8 information' % version,\n                    fatal=False))\n            else:\n                m = re.search(r'''(?xi)\n                    _(?P<width>[0-9]+)x(?P<height>[0-9]+)\n                    _(?P<vcodec>[a-z0-9]+)\n                    _(?P<vbr>[0-9]+)\n                    _(?P<acodec>[a-z0-9]+)\n                    _(?P<abr>[0-9]+)\n                    \\.(?P<ext>[a-z0-9]+)''', version_url)\n                if not m:\n                    continue\n\n                formats.append({\n                    'url': version_url,\n                    'format_id': 'http-%s-%s' % (version, video_version['quality']),\n                    'vcodec': m.group('vcodec'),\n                    'acodec': m.group('acodec'),\n                    'vbr': int(m.group('vbr')),\n                    'abr': int(m.group('abr')),\n                    'ext': m.group('ext'),\n                    'width': int(m.group('width')),\n                    'height': int(m.group('height')),\n                })\n        self._sort_formats(formats)\n\n        track = video_info['title']\n        if featured_artist:\n            artist = '%s ft. %s' % (artist, featured_artist)\n        title = '%s - %s' % (artist, track) if artist else track\n\n        genres = video_info.get('genres')\n        genre = (\n            genres[0] if genres and isinstance(genres, list) and\n            isinstance(genres[0], compat_str) else None)\n\n        is_explicit = video_info.get('isExplicit')\n        if is_explicit is True:\n            age_limit = 18\n        elif is_explicit is False:\n            age_limit = 0\n        else:\n            age_limit = None\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': video_info.get('imageUrl') or video_info.get('thumbnailUrl'),\n            'timestamp': parse_iso8601(video_info.get('releaseDate')),\n            'uploader': uploader,\n            'duration': int_or_none(video_info.get('duration')),\n            'view_count': int_or_none(video_info.get('views', {}).get('total')),\n            'age_limit': age_limit,\n            'track': track,\n            'artist': uploader,\n            'genre': genre,\n        }\n\n\nclass VevoPlaylistIE(VevoBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?vevo\\.com/watch/(?P<kind>playlist|genre)/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://www.vevo.com/watch/playlist/dadbf4e7-b99f-4184-9670-6f0e547b6a29',\n        'info_dict': {\n            'id': 'dadbf4e7-b99f-4184-9670-6f0e547b6a29',\n            'title': 'Best-Of: Birdman',\n        },\n        'playlist_count': 10,\n    }, {\n        'url': 'http://www.vevo.com/watch/genre/rock',\n        'info_dict': {\n            'id': 'rock',\n            'title': 'Rock',\n        },\n        'playlist_count': 20,\n    }, {\n        'url': 'http://www.vevo.com/watch/playlist/dadbf4e7-b99f-4184-9670-6f0e547b6a29?index=0',\n        'md5': '32dcdfddddf9ec6917fc88ca26d36282',\n        'info_dict': {\n            'id': 'USCMV1100073',\n            'ext': 'mp4',\n            'title': 'Birdman - Y.U. MAD',\n            'timestamp': 1323417600,\n            'upload_date': '20111209',\n            'uploader': 'Birdman',\n            'track': 'Y.U. MAD',\n            'artist': 'Birdman',\n            'genre': 'Rap/Hip-Hop',\n        },\n        'expected_warnings': ['Unable to download SMIL file'],\n    }, {\n        'url': 'http://www.vevo.com/watch/genre/rock?index=0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n        playlist_kind = mobj.group('kind')\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        index = qs.get('index', [None])[0]\n\n        if index:\n            video_id = self._search_regex(\n                r'<meta[^>]+content=([\"\\'])vevo://video/(?P<id>.+?)\\1[^>]*>',\n                webpage, 'video id', default=None, group='id')\n            if video_id:\n                return self.url_result('vevo:%s' % video_id, VevoIE.ie_key())\n\n        playlists = self._extract_json(webpage, playlist_id)['default']['%ss' % playlist_kind]\n\n        playlist = (list(playlists.values())[0]\n                    if playlist_kind == 'playlist' else playlists[playlist_id])\n\n        entries = [\n            self.url_result('vevo:%s' % src, VevoIE.ie_key())\n            for src in playlist['isrcs']]\n\n        return self.playlist_result(\n            entries, playlist.get('playlistId') or playlist_id,\n            playlist.get('name'), playlist.get('description'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vevo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vevo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}