{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom collections import OrderedDict\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.addons.portal.controllers.portal import get_records_pager, CustomerPortal, pager as portal_pager\n\nfrom odoo.osv.expression import OR\n\n\nclass CustomerPortal(CustomerPortal):\n\n    def _prepare_portal_layout_values(self):\n        values = super(CustomerPortal, self)._prepare_portal_layout_values()\n        Project = request.env['project.project']\n        Task = request.env['project.task']\n        \n        projects = Project.sudo().search([('privacy_visibility', '=', 'portal')])\n        values['project_count'] = Project.search_count([('id', 'in', projects.ids)])\n        values['task_count'] = Task.search_count([('project_id', 'in', projects.ids)])\n        return values\n\n    @http.route(['/my/projects', '/my/projects/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_projects(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        Project = request.env['project.project']\n        domain = [('privacy_visibility', '=', 'portal')]\n\n        searchbar_sortings = {\n            'date': {'label': _('Newest'), 'order': 'create_date desc'},\n            'name': {'label': _('Name'), 'order': 'name'},\n        }\n        if not sortby:\n            sortby = 'date'\n        order = searchbar_sortings[sortby]['order']\n\n        \n        archive_groups = self._get_archive_groups('project.project', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n        \n        project_count = Project.search_count(domain)\n        \n        pager = portal_pager(\n            url=\"/my/projects\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            total=project_count,\n            page=page,\n            step=self._items_per_page\n        )\n\n        \n        projects = Project.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n        request.session['my_projects_history'] = projects.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'date_end': date_end,\n            'projects': projects,\n            'page_name': 'project',\n            'archive_groups': archive_groups,\n            'default_url': '/my/projects',\n            'pager': pager,\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby\n        })\n        return request.render(\"project.portal_my_projects\", values)\n\n    @http.route(['/my/project/<int:project_id>'], type='http', auth=\"user\", website=True)\n    def portal_my_project(self, project_id=None, **kw):\n        project = request.env['project.project'].browse(project_id)\n        vals = {'project': project}\n        history = request.session.get('my_projects_history', [])\n        vals.update(get_records_pager(history, project))\n        return request.render(\"project.portal_my_project\", vals)\n\n    @http.route(['/my/tasks', '/my/tasks/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_tasks(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, search=None, search_in='content', **kw):\n        values = self._prepare_portal_layout_values()\n        searchbar_sortings = {\n            'date': {'label': _('Newest'), 'order': 'create_date desc'},\n            'name': {'label': _('Title'), 'order': 'name'},\n            'stage': {'label': _('Stage'), 'order': 'stage_id'},\n            'update': {'label': _('Last Stage Update'), 'order': 'date_last_stage_update desc'},\n        }\n        searchbar_filters = {\n            'all': {'label': _('All'), 'domain': []},\n        }\n        searchbar_inputs = {\n            'content': {'input': 'content', 'label': _('Search <span class=\"nolabel\"> (in Content)</span>')},\n            'message': {'input': 'message', 'label': _('Search in Messages')},\n            'customer': {'input': 'customer', 'label': _('Search in Customer')},\n            'stage': {'input': 'stage', 'label': _('Search in Stages')},\n            'all': {'input': 'all', 'label': _('Search in All')},\n        }\n        # extends filterby criteria with project (criteria name is the project id)\n        \n        projects = request.env['project.project'].sudo().search([('privacy_visibility', '=', 'portal')])\n        domain = [('project_id', 'in', projects.ids)]\n        for proj in projects:\n            searchbar_filters.update({\n                str(proj.id): {'label': proj.name, 'domain': [('project_id', '=', proj.id)]}\n            })\n\n        \n        if not sortby:\n            sortby = 'date'\n        order = searchbar_sortings[sortby]['order']\n        \n        if not filterby:\n            filterby = 'all'\n        domain += searchbar_filters[filterby]['domain']\n\n        \n        archive_groups = self._get_archive_groups('project.task', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n        \n        if search and search_in:\n            search_domain = []\n            if search_in in ('content', 'all'):\n                search_domain = OR([search_domain, ['|', ('name', 'ilike', search), ('description', 'ilike', search)]])\n            if search_in in ('customer', 'all'):\n                search_domain = OR([search_domain, [('partner_id', 'ilike', search)]])\n            if search_in in ('message', 'all'):\n                search_domain = OR([search_domain, [('message_ids.body', 'ilike', search)]])\n            if search_in in ('stage', 'all'):\n                search_domain = OR([search_domain, [('stage_id', 'ilike', search)]])\n            domain += search_domain\n\n        \n        task_count = request.env['project.task'].search_count(domain)\n        \n        pager = portal_pager(\n            url=\"/my/tasks\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n            total=task_count,\n            page=page,\n            step=self._items_per_page\n        )\n        \n        tasks = request.env['project.task'].search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n        request.session['my_tasks_history'] = tasks.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'date_end': date_end,\n            'projects': projects,\n            'tasks': tasks,\n            'page_name': 'task',\n            'archive_groups': archive_groups,\n            'default_url': '/my/tasks',\n            'pager': pager,\n            'searchbar_sortings': searchbar_sortings,\n            'searchbar_inputs': searchbar_inputs,\n            'search_in': search_in,\n            'sortby': sortby,\n            'searchbar_filters': OrderedDict(sorted(searchbar_filters.items())),\n            'filterby': filterby,\n        })\n        return request.render(\"project.portal_my_tasks\", values)\n\n    @http.route(['/my/task/<int:task_id>'], type='http', auth=\"user\", website=True)\n    def portal_my_task(self, task_id=None, **kw):\n        task = request.env['project.task'].browse(task_id)\n        vals = {\n            'task': task,\n            'user': request.env.user\n        }\n        history = request.session.get('my_tasks_history', [])\n        vals.update(get_records_pager(history, task))\n        return request.render(\"project.portal_my_task\", vals)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     portal users view projects follow    archive groups   default group by  create date     projects count    pager    content according pager archive selected    extends filterby criteria project (criteria name project id)    note  portal users view projects follow    default sort value    default filter value    archive groups   default group by  create date     search    task count    pager    content according pager archive selected ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom collections import OrderedDict\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.addons.portal.controllers.portal import get_records_pager, CustomerPortal, pager as portal_pager\n\nfrom odoo.osv.expression import OR\n\n\nclass CustomerPortal(CustomerPortal):\n\n    def _prepare_portal_layout_values(self):\n        values = super(CustomerPortal, self)._prepare_portal_layout_values()\n        Project = request.env['project.project']\n        Task = request.env['project.task']\n        # portal users can't view projects they don't follow\n        projects = Project.sudo().search([('privacy_visibility', '=', 'portal')])\n        values['project_count'] = Project.search_count([('id', 'in', projects.ids)])\n        values['task_count'] = Task.search_count([('project_id', 'in', projects.ids)])\n        return values\n\n    @http.route(['/my/projects', '/my/projects/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_projects(self, page=1, date_begin=None, date_end=None, sortby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        Project = request.env['project.project']\n        domain = [('privacy_visibility', '=', 'portal')]\n\n        searchbar_sortings = {\n            'date': {'label': _('Newest'), 'order': 'create_date desc'},\n            'name': {'label': _('Name'), 'order': 'name'},\n        }\n        if not sortby:\n            sortby = 'date'\n        order = searchbar_sortings[sortby]['order']\n\n        # archive groups - Default Group By 'create_date'\n        archive_groups = self._get_archive_groups('project.project', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n        # projects count\n        project_count = Project.search_count(domain)\n        # pager\n        pager = portal_pager(\n            url=\"/my/projects\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            total=project_count,\n            page=page,\n            step=self._items_per_page\n        )\n\n        # content according to pager and archive selected\n        projects = Project.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n        request.session['my_projects_history'] = projects.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'date_end': date_end,\n            'projects': projects,\n            'page_name': 'project',\n            'archive_groups': archive_groups,\n            'default_url': '/my/projects',\n            'pager': pager,\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby\n        })\n        return request.render(\"project.portal_my_projects\", values)\n\n    @http.route(['/my/project/<int:project_id>'], type='http', auth=\"user\", website=True)\n    def portal_my_project(self, project_id=None, **kw):\n        project = request.env['project.project'].browse(project_id)\n        vals = {'project': project}\n        history = request.session.get('my_projects_history', [])\n        vals.update(get_records_pager(history, project))\n        return request.render(\"project.portal_my_project\", vals)\n\n    @http.route(['/my/tasks', '/my/tasks/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_tasks(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, search=None, search_in='content', **kw):\n        values = self._prepare_portal_layout_values()\n        searchbar_sortings = {\n            'date': {'label': _('Newest'), 'order': 'create_date desc'},\n            'name': {'label': _('Title'), 'order': 'name'},\n            'stage': {'label': _('Stage'), 'order': 'stage_id'},\n            'update': {'label': _('Last Stage Update'), 'order': 'date_last_stage_update desc'},\n        }\n        searchbar_filters = {\n            'all': {'label': _('All'), 'domain': []},\n        }\n        searchbar_inputs = {\n            'content': {'input': 'content', 'label': _('Search <span class=\"nolabel\"> (in Content)</span>')},\n            'message': {'input': 'message', 'label': _('Search in Messages')},\n            'customer': {'input': 'customer', 'label': _('Search in Customer')},\n            'stage': {'input': 'stage', 'label': _('Search in Stages')},\n            'all': {'input': 'all', 'label': _('Search in All')},\n        }\n        # extends filterby criteria with project (criteria name is the project id)\n        # Note: portal users can't view projects they don't follow\n        projects = request.env['project.project'].sudo().search([('privacy_visibility', '=', 'portal')])\n        domain = [('project_id', 'in', projects.ids)]\n        for proj in projects:\n            searchbar_filters.update({\n                str(proj.id): {'label': proj.name, 'domain': [('project_id', '=', proj.id)]}\n            })\n\n        # default sort by value\n        if not sortby:\n            sortby = 'date'\n        order = searchbar_sortings[sortby]['order']\n        # default filter by value\n        if not filterby:\n            filterby = 'all'\n        domain += searchbar_filters[filterby]['domain']\n\n        # archive groups - Default Group By 'create_date'\n        archive_groups = self._get_archive_groups('project.task', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n        # search\n        if search and search_in:\n            search_domain = []\n            if search_in in ('content', 'all'):\n                search_domain = OR([search_domain, ['|', ('name', 'ilike', search), ('description', 'ilike', search)]])\n            if search_in in ('customer', 'all'):\n                search_domain = OR([search_domain, [('partner_id', 'ilike', search)]])\n            if search_in in ('message', 'all'):\n                search_domain = OR([search_domain, [('message_ids.body', 'ilike', search)]])\n            if search_in in ('stage', 'all'):\n                search_domain = OR([search_domain, [('stage_id', 'ilike', search)]])\n            domain += search_domain\n\n        # task count\n        task_count = request.env['project.task'].search_count(domain)\n        # pager\n        pager = portal_pager(\n            url=\"/my/tasks\",\n            url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n            total=task_count,\n            page=page,\n            step=self._items_per_page\n        )\n        # content according to pager and archive selected\n        tasks = request.env['project.task'].search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n        request.session['my_tasks_history'] = tasks.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'date_end': date_end,\n            'projects': projects,\n            'tasks': tasks,\n            'page_name': 'task',\n            'archive_groups': archive_groups,\n            'default_url': '/my/tasks',\n            'pager': pager,\n            'searchbar_sortings': searchbar_sortings,\n            'searchbar_inputs': searchbar_inputs,\n            'search_in': search_in,\n            'sortby': sortby,\n            'searchbar_filters': OrderedDict(sorted(searchbar_filters.items())),\n            'filterby': filterby,\n        })\n        return request.render(\"project.portal_my_tasks\", values)\n\n    @http.route(['/my/task/<int:task_id>'], type='http', auth=\"user\", website=True)\n    def portal_my_task(self, task_id=None, **kw):\n        task = request.env['project.task'].browse(task_id)\n        vals = {\n            'task': task,\n            'user': request.env.user\n        }\n        history = request.session.get('my_tasks_history', [])\n        vals.update(get_records_pager(history, task))\n        return request.render(\"project.portal_my_task\", vals)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "portal.py", "id": "3702c9b98a983979cd893b43d1131369", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/project/controllers/portal.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}