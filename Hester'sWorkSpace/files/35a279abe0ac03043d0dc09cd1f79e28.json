{"author": "django", "code": "from datetime import datetime\n\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\n\n\ndef validate_answer_to_universe(value):\n    if value != 42:\n        raise ValidationError('This is not the answer to life, universe and everything!', code='not42')\n\n\nclass ModelToValidate(models.Model):\n    name = models.CharField(max_length=100)\n    created = models.DateTimeField(default=datetime.now)\n    number = models.IntegerField(db_column='number_val')\n    parent = models.ForeignKey(\n        'self',\n        models.SET_NULL,\n        blank=True, null=True,\n        limit_choices_to={'number': 10},\n    )\n    email = models.EmailField(blank=True)\n    ufm = models.ForeignKey(\n        'UniqueFieldsModel',\n        models.SET_NULL,\n        to_field='unique_charfield',\n        blank=True, null=True,\n    )\n    url = models.URLField(blank=True)\n    f_with_custom_validator = models.IntegerField(blank=True, null=True, validators=[validate_answer_to_universe])\n    f_with_iterable_of_validators = models.IntegerField(blank=True, null=True,\n                                                        validators=(validate_answer_to_universe,))\n    slug = models.SlugField(blank=True)\n\n    def clean(self):\n        super().clean()\n        if self.number == 11:\n            raise ValidationError('Invalid number supplied!')\n\n\nclass UniqueFieldsModel(models.Model):\n    unique_charfield = models.CharField(max_length=100, unique=True)\n    unique_integerfield = models.IntegerField(unique=True)\n    non_unique_field = models.IntegerField()\n\n\nclass CustomPKModel(models.Model):\n    my_pk_field = models.CharField(max_length=100, primary_key=True)\n\n\nclass UniqueTogetherModel(models.Model):\n    cfield = models.CharField(max_length=100)\n    ifield = models.IntegerField()\n    efield = models.EmailField()\n\n    class Meta:\n        unique_together = (('ifield', 'cfield',), ['ifield', 'efield'])\n\n\nclass UniqueForDateModel(models.Model):\n    start_date = models.DateField()\n    end_date = models.DateTimeField()\n    count = models.IntegerField(unique_for_date=\"start_date\", unique_for_year=\"end_date\")\n    order = models.IntegerField(unique_for_month=\"end_date\")\n    name = models.CharField(max_length=100)\n\n\nclass CustomMessagesModel(models.Model):\n    other = models.IntegerField(blank=True, null=True)\n    number = models.IntegerField(\n        db_column='number_val',\n        error_messages={'null': 'NULL', 'not42': 'AAARGH', 'not_equal': '%s != me'},\n        validators=[validate_answer_to_universe]\n    )\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.ForeignKey(Author, models.CASCADE)\n    pub_date = models.DateTimeField(blank=True)\n\n    def clean(self):\n        if self.pub_date is None:\n            self.pub_date = datetime.now()\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=50, unique_for_date='posted', blank=True)\n    slug = models.CharField(max_length=50, unique_for_year='posted', blank=True)\n    subtitle = models.CharField(max_length=50, unique_for_month='posted', blank=True)\n    posted = models.DateField()\n\n    def __str__(self):\n        return self.name\n\n\nclass FlexibleDatePost(models.Model):\n    title = models.CharField(max_length=50, unique_for_date='posted', blank=True)\n    slug = models.CharField(max_length=50, unique_for_year='posted', blank=True)\n    subtitle = models.CharField(max_length=50, unique_for_month='posted', blank=True)\n    posted = models.DateField(blank=True, null=True)\n\n\nclass UniqueErrorsModel(models.Model):\n    name = models.CharField(max_length=100, unique=True, error_messages={'unique': 'Custom unique name message.'})\n    no = models.IntegerField(unique=True, error_messages={'unique': 'Custom unique number message.'})\n\n\nclass GenericIPAddressTestModel(models.Model):\n    generic_ip = models.GenericIPAddressField(blank=True, null=True, unique=True)\n    v4_ip = models.GenericIPAddressField(blank=True, null=True, protocol=\"ipv4\")\n    v6_ip = models.GenericIPAddressField(blank=True, null=True, protocol=\"ipv6\")\n    ip_verbose_name = models.GenericIPAddressField(\"IP Address Verbose\", blank=True, null=True)\n\n\nclass GenericIPAddrUnpackUniqueTest(models.Model):\n    generic_v4unpack_ip = models.GenericIPAddressField(null=True, blank=True, unique=True, unpack_ipv4=True)\n\n\n\n\nassertion_error = None\ntry:\n    class MultipleAutoFields(models.Model):\n        auto1 = models.AutoField(primary_key=True)\n        auto2 = models.AutoField(primary_key=True)\nexcept AssertionError as exc:\n    assertion_error = exc\nassert str(assertion_error) == \"Model validation.MultipleAutoFields can't have more than one AutoField.\"\n", "comments": "a model can't multiple autofields refs 12467", "content": "from datetime import datetime\n\nfrom django.core.exceptions import ValidationError\nfrom django.db import models\n\n\ndef validate_answer_to_universe(value):\n    if value != 42:\n        raise ValidationError('This is not the answer to life, universe and everything!', code='not42')\n\n\nclass ModelToValidate(models.Model):\n    name = models.CharField(max_length=100)\n    created = models.DateTimeField(default=datetime.now)\n    number = models.IntegerField(db_column='number_val')\n    parent = models.ForeignKey(\n        'self',\n        models.SET_NULL,\n        blank=True, null=True,\n        limit_choices_to={'number': 10},\n    )\n    email = models.EmailField(blank=True)\n    ufm = models.ForeignKey(\n        'UniqueFieldsModel',\n        models.SET_NULL,\n        to_field='unique_charfield',\n        blank=True, null=True,\n    )\n    url = models.URLField(blank=True)\n    f_with_custom_validator = models.IntegerField(blank=True, null=True, validators=[validate_answer_to_universe])\n    f_with_iterable_of_validators = models.IntegerField(blank=True, null=True,\n                                                        validators=(validate_answer_to_universe,))\n    slug = models.SlugField(blank=True)\n\n    def clean(self):\n        super().clean()\n        if self.number == 11:\n            raise ValidationError('Invalid number supplied!')\n\n\nclass UniqueFieldsModel(models.Model):\n    unique_charfield = models.CharField(max_length=100, unique=True)\n    unique_integerfield = models.IntegerField(unique=True)\n    non_unique_field = models.IntegerField()\n\n\nclass CustomPKModel(models.Model):\n    my_pk_field = models.CharField(max_length=100, primary_key=True)\n\n\nclass UniqueTogetherModel(models.Model):\n    cfield = models.CharField(max_length=100)\n    ifield = models.IntegerField()\n    efield = models.EmailField()\n\n    class Meta:\n        unique_together = (('ifield', 'cfield',), ['ifield', 'efield'])\n\n\nclass UniqueForDateModel(models.Model):\n    start_date = models.DateField()\n    end_date = models.DateTimeField()\n    count = models.IntegerField(unique_for_date=\"start_date\", unique_for_year=\"end_date\")\n    order = models.IntegerField(unique_for_month=\"end_date\")\n    name = models.CharField(max_length=100)\n\n\nclass CustomMessagesModel(models.Model):\n    other = models.IntegerField(blank=True, null=True)\n    number = models.IntegerField(\n        db_column='number_val',\n        error_messages={'null': 'NULL', 'not42': 'AAARGH', 'not_equal': '%s != me'},\n        validators=[validate_answer_to_universe]\n    )\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.ForeignKey(Author, models.CASCADE)\n    pub_date = models.DateTimeField(blank=True)\n\n    def clean(self):\n        if self.pub_date is None:\n            self.pub_date = datetime.now()\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=50, unique_for_date='posted', blank=True)\n    slug = models.CharField(max_length=50, unique_for_year='posted', blank=True)\n    subtitle = models.CharField(max_length=50, unique_for_month='posted', blank=True)\n    posted = models.DateField()\n\n    def __str__(self):\n        return self.name\n\n\nclass FlexibleDatePost(models.Model):\n    title = models.CharField(max_length=50, unique_for_date='posted', blank=True)\n    slug = models.CharField(max_length=50, unique_for_year='posted', blank=True)\n    subtitle = models.CharField(max_length=50, unique_for_month='posted', blank=True)\n    posted = models.DateField(blank=True, null=True)\n\n\nclass UniqueErrorsModel(models.Model):\n    name = models.CharField(max_length=100, unique=True, error_messages={'unique': 'Custom unique name message.'})\n    no = models.IntegerField(unique=True, error_messages={'unique': 'Custom unique number message.'})\n\n\nclass GenericIPAddressTestModel(models.Model):\n    generic_ip = models.GenericIPAddressField(blank=True, null=True, unique=True)\n    v4_ip = models.GenericIPAddressField(blank=True, null=True, protocol=\"ipv4\")\n    v6_ip = models.GenericIPAddressField(blank=True, null=True, protocol=\"ipv6\")\n    ip_verbose_name = models.GenericIPAddressField(\"IP Address Verbose\", blank=True, null=True)\n\n\nclass GenericIPAddrUnpackUniqueTest(models.Model):\n    generic_v4unpack_ip = models.GenericIPAddressField(null=True, blank=True, unique=True, unpack_ipv4=True)\n\n\n# A model can't have multiple AutoFields\n# Refs #12467.\nassertion_error = None\ntry:\n    class MultipleAutoFields(models.Model):\n        auto1 = models.AutoField(primary_key=True)\n        auto2 = models.AutoField(primary_key=True)\nexcept AssertionError as exc:\n    assertion_error = exc\nassert str(assertion_error) == \"Model validation.MultipleAutoFields can't have more than one AutoField.\"\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "35a279abe0ac03043d0dc09cd1f79e28", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/validation/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}