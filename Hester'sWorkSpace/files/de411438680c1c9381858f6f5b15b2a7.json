{"author": "django", "code": "from django.db import models\nfrom django.db.models import QuerySet\nfrom django.db.models.manager import BaseManager\nfrom django.urls import reverse\n\n\nclass Artist(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        ordering = ['name']\n        verbose_name = 'professional artist'\n        verbose_name_plural = 'professional artists'\n\n    def __str__(self):\n        return self.name\n\n    def get_absolute_url(self):\n        return reverse('artist_detail', kwargs={'pk': self.id})\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.SlugField()\n\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n\nclass DoesNotExistQuerySet(QuerySet):\n    def get(self, *args, **kwargs):\n        raise Author.DoesNotExist\n\n\nDoesNotExistBookManager = BaseManager.from_queryset(DoesNotExistQuerySet)\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=255)\n    slug = models.SlugField()\n    pages = models.IntegerField()\n    authors = models.ManyToManyField(Author)\n    pubdate = models.DateField()\n\n    objects = models.Manager()\n    does_not_exist = DoesNotExistBookManager()\n\n    class Meta:\n        ordering = ['-pubdate']\n\n    def __str__(self):\n        return self.name\n\n\nclass Page(models.Model):\n    content = models.TextField()\n    template = models.CharField(max_length=255)\n\n\nclass BookSigning(models.Model):\n    event_date = models.DateTimeField()\n", "comments": "", "content": "from django.db import models\nfrom django.db.models import QuerySet\nfrom django.db.models.manager import BaseManager\nfrom django.urls import reverse\n\n\nclass Artist(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        ordering = ['name']\n        verbose_name = 'professional artist'\n        verbose_name_plural = 'professional artists'\n\n    def __str__(self):\n        return self.name\n\n    def get_absolute_url(self):\n        return reverse('artist_detail', kwargs={'pk': self.id})\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    slug = models.SlugField()\n\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n\nclass DoesNotExistQuerySet(QuerySet):\n    def get(self, *args, **kwargs):\n        raise Author.DoesNotExist\n\n\nDoesNotExistBookManager = BaseManager.from_queryset(DoesNotExistQuerySet)\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=255)\n    slug = models.SlugField()\n    pages = models.IntegerField()\n    authors = models.ManyToManyField(Author)\n    pubdate = models.DateField()\n\n    objects = models.Manager()\n    does_not_exist = DoesNotExistBookManager()\n\n    class Meta:\n        ordering = ['-pubdate']\n\n    def __str__(self):\n        return self.name\n\n\nclass Page(models.Model):\n    content = models.TextField()\n    template = models.CharField(max_length=255)\n\n\nclass BookSigning(models.Model):\n    event_date = models.DateTimeField()\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "de411438680c1c9381858f6f5b15b2a7", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/generic_views/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}