{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    parse_iso8601,\n    js_to_json,\n)\nfrom ..compat import compat_str\n\n\nclass RDSIE(InfoExtractor):\n    IE_DESC = 'RDS.ca'\n    _VALID_URL = r'https?://(?:www\\.)?rds\\.ca/vid(?:[e\u00e9]|%C3%A9)os/(?:[^/]+/)*(?P<id>[^/]+)-\\d+\\.\\d+'\n\n    _TESTS = [{\n        'url': 'http://www.rds.ca/videos/football/nfl/fowler-jr-prend-la-direction-de-jacksonville-3.1132799',\n        'info_dict': {\n            'id': '604333',\n            'display_id': 'fowler-jr-prend-la-direction-de-jacksonville',\n            'ext': 'mp4',\n            'title': 'Fowler Jr. prend la direction de Jacksonville',\n            'description': 'Dante Fowler Jr. est le troisi\u00e8me choix du rep\u00eachage 2015 de la NFL. ',\n            'timestamp': 1430397346,\n            'upload_date': '20150430',\n            'duration': 154.354,\n            'age_limit': 0,\n        }\n    }, {\n        'url': 'http://www.rds.ca/vid%C3%A9os/un-voyage-positif-3.877934',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        item = self._parse_json(self._search_regex(r'(?s)itemToPush\\s*=\\s*({.+?});', webpage, 'item'), display_id, js_to_json)\n        video_id = compat_str(item['id'])\n        title = item.get('title') or self._og_search_title(webpage) or self._html_search_meta(\n            'title', webpage, 'title', fatal=True)\n        description = self._og_search_description(webpage) or self._html_search_meta(\n            'description', webpage, 'description')\n        thumbnail = item.get('urlImageBig') or self._og_search_thumbnail(webpage) or self._search_regex(\n            [r'<link[^>]+itemprop=\"thumbnailUrl\"[^>]+href=\"([^\"]+)\"',\n             r'<span[^>]+itemprop=\"thumbnailUrl\"[^>]+content=\"([^\"]+)\"'],\n            webpage, 'thumbnail', fatal=False)\n        timestamp = parse_iso8601(self._search_regex(\n            r'<span[^>]+itemprop=\"uploadDate\"[^>]+content=\"([^\"]+)\"',\n            webpage, 'upload date', fatal=False))\n        duration = parse_duration(self._search_regex(\n            r'<span[^>]+itemprop=\"duration\"[^>]+content=\"([^\"]+)\"',\n            webpage, 'duration', fatal=False))\n        age_limit = self._family_friendly_search(webpage)\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'display_id': display_id,\n            'url': '9c9media:rds_web:%s' % video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'age_limit': age_limit,\n            'ie_key': 'NineCNineMedia',\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    parse_iso8601,\n    js_to_json,\n)\nfrom ..compat import compat_str\n\n\nclass RDSIE(InfoExtractor):\n    IE_DESC = 'RDS.ca'\n    _VALID_URL = r'https?://(?:www\\.)?rds\\.ca/vid(?:[e\u00e9]|%C3%A9)os/(?:[^/]+/)*(?P<id>[^/]+)-\\d+\\.\\d+'\n\n    _TESTS = [{\n        'url': 'http://www.rds.ca/videos/football/nfl/fowler-jr-prend-la-direction-de-jacksonville-3.1132799',\n        'info_dict': {\n            'id': '604333',\n            'display_id': 'fowler-jr-prend-la-direction-de-jacksonville',\n            'ext': 'mp4',\n            'title': 'Fowler Jr. prend la direction de Jacksonville',\n            'description': 'Dante Fowler Jr. est le troisi\u00e8me choix du rep\u00eachage 2015 de la NFL. ',\n            'timestamp': 1430397346,\n            'upload_date': '20150430',\n            'duration': 154.354,\n            'age_limit': 0,\n        }\n    }, {\n        'url': 'http://www.rds.ca/vid%C3%A9os/un-voyage-positif-3.877934',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        item = self._parse_json(self._search_regex(r'(?s)itemToPush\\s*=\\s*({.+?});', webpage, 'item'), display_id, js_to_json)\n        video_id = compat_str(item['id'])\n        title = item.get('title') or self._og_search_title(webpage) or self._html_search_meta(\n            'title', webpage, 'title', fatal=True)\n        description = self._og_search_description(webpage) or self._html_search_meta(\n            'description', webpage, 'description')\n        thumbnail = item.get('urlImageBig') or self._og_search_thumbnail(webpage) or self._search_regex(\n            [r'<link[^>]+itemprop=\"thumbnailUrl\"[^>]+href=\"([^\"]+)\"',\n             r'<span[^>]+itemprop=\"thumbnailUrl\"[^>]+content=\"([^\"]+)\"'],\n            webpage, 'thumbnail', fatal=False)\n        timestamp = parse_iso8601(self._search_regex(\n            r'<span[^>]+itemprop=\"uploadDate\"[^>]+content=\"([^\"]+)\"',\n            webpage, 'upload date', fatal=False))\n        duration = parse_duration(self._search_regex(\n            r'<span[^>]+itemprop=\"duration\"[^>]+content=\"([^\"]+)\"',\n            webpage, 'duration', fatal=False))\n        age_limit = self._family_friendly_search(webpage)\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'display_id': display_id,\n            'url': '9c9media:rds_web:%s' % video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'age_limit': age_limit,\n            'ie_key': 'NineCNineMedia',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rds.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rds.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}