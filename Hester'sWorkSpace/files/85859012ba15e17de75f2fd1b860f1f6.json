{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport functools\nimport itertools\nimport operator\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    \n    \n    \n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    js_to_json,\n    orderedSet,\n    \n    remove_quotes,\n    str_to_int,\n)\n\n\n\n\n\nclass PornHubIE(InfoExtractor):\n    IE_DESC = 'PornHub and Thumbzilla'\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://www.pornhub.com/view_video.php?viewkey=648719015',\n        'md5': '1e19b41231a02eba417839222ac9d58e',\n        'info_dict': {\n            'id': '648719015',\n            'ext': 'mp4',\n            'title': 'Seductive Indian beauty strips down and fingers her pink pussy',\n            'uploader': 'Babes',\n            'duration': 361,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'comment_count': int,\n            'age_limit': 18,\n            'tags': list,\n            'categories': list,\n        },\n    }, {\n        \n        'url': 'http://www.pornhub.com/view_video.php?viewkey=1331683002',\n        'info_dict': {\n            'id': '1331683002',\n            'ext': 'mp4',\n            'title': '\u91cd\u5e86\u5a77\u5a77\u5973\u738b\u8db3\u4ea4',\n            'uploader': 'cj397186295',\n            'duration': 1753,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'comment_count': int,\n            'age_limit': 18,\n            'tags': list,\n            'categories': list,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.pornhub.com/view_video.php?viewkey=ph557bbb6676d2d',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://fr.pornhub.com/view_video.php?viewkey=ph55ca2f9760862',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.pornhub.com/view_video.php?viewkey=788152859',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.pornhub.com/view_video.php?viewkey=ph572716d15a111',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.pornhub.com/view_video.php?viewkey=ph56fd731fce6b7',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.thumbzilla.com/video/ph56c6114abd99a/horny-girlfriend-sex',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.pornhub.com/video/show?viewkey=648719015',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+?src=[\"\\'](?P<url>(?:https?:)?//(?:www\\.)?pornhub\\.com/embed/[\\da-z]+)',\n            webpage)\n\n    def _extract_count(self, pattern, webpage, name):\n        return str_to_int(self._search_regex(\n            pattern, webpage, '%s count' % name, fatal=False))\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        def dl_webpage(platform):\n            return self._download_webpage(\n                'http://www.pornhub.com/view_video.php?viewkey=%s' % video_id,\n                video_id, headers={\n                    'Cookie': 'age_verified=1; platform=%s' % platform,\n                })\n\n        webpage = dl_webpage('pc')\n\n        error_msg = self._html_search_regex(\n            r'(?s)<div[^>]+class=([\"\\'])(?:(?!\\1).)*\\b(?:removed|userMessageSection)\\b(?:(?!\\1).)*\\1[^>]*>(?P<error>.+?)</div>',\n            webpage, 'error message', default=None, group='error')\n        if error_msg:\n            error_msg = re.sub(r'\\s+', ' ', error_msg)\n            raise ExtractorError(\n                'PornHub said: %s' % error_msg,\n                expected=True, video_id=video_id)\n\n        tv_webpage = dl_webpage('tv')\n\n        assignments = self._search_regex(\n            r'(var.+?mediastring.+?)</script>', tv_webpage,\n            'encoded url').split(';')\n\n        js_vars = {}\n\n        def parse_js_value(inp):\n            inp = re.sub(r'/\\*(?:(?!\\*/).)*?\\*/', '', inp)\n            if '+' in inp:\n                inps = inp.split('+')\n                return functools.reduce(\n                    operator.concat, map(parse_js_value, inps))\n            inp = inp.strip()\n            if inp in js_vars:\n                return js_vars[inp]\n            return remove_quotes(inp)\n\n        for assn in assignments:\n            assn = assn.strip()\n            if not assn:\n                continue\n            assn = re.sub(r'var\\s+', '', assn)\n            vname, value = assn.split('=', 1)\n            js_vars[vname] = parse_js_value(value)\n\n        video_url = js_vars['mediastring']\n\n        title = self._search_regex(\n            r'<h1>([^>]+)</h1>', tv_webpage, 'title', default=None)\n\n        \n        \n        \n        title = title or self._html_search_meta(\n            'twitter:title', webpage, default=None) or self._search_regex(\n            (r'<h1[^>]+class=[\"\\']title[\"\\'][^>]*>(?P<title>[^<]+)',\n             r'<div[^>]+data-video-title=([\"\\'])(?P<title>.+?)\\1',\n             r'shareTitle\\s*=\\s*([\"\\'])(?P<title>.+?)\\1'),\n            webpage, 'title', group='title')\n\n        flashvars = self._parse_json(\n            self._search_regex(\n                r'var\\s+flashvars_\\d+\\s*=\\s*({.+?});', webpage, 'flashvars', default='{}'),\n            video_id)\n        if flashvars:\n            thumbnail = flashvars.get('image_url')\n            duration = int_or_none(flashvars.get('video_duration'))\n        else:\n            title, thumbnail, duration = [None] * 3\n\n        video_uploader = self._html_search_regex(\n            r'(?s)From:&nbsp;.+?<(?:a\\b[^>]+\\bhref=[\"\\']/(?:user|channel)s/|span\\b[^>]+\\bclass=[\"\\']username)[^>]+>(.+?)<',\n            webpage, 'uploader', fatal=False)\n\n        view_count = self._extract_count(\n            r'<span class=\"count\">([\\d,\\.]+)</span> views', webpage, 'view')\n        like_count = self._extract_count(\n            r'<span class=\"votesUp\">([\\d,\\.]+)</span>', webpage, 'like')\n        dislike_count = self._extract_count(\n            r'<span class=\"votesDown\">([\\d,\\.]+)</span>', webpage, 'dislike')\n        comment_count = self._extract_count(\n            r'All Comments\\s*<span>\\(([\\d,.]+)\\)', webpage, 'comment')\n\n        page_params = self._parse_json(self._search_regex(\n            r'page_params\\.zoneDetails\\[([\\'\"])[^\\'\"]+\\1\\]\\s*=\\s*(?P<data>{[^}]+})',\n            webpage, 'page parameters', group='data', default='{}'),\n            video_id, transform_source=js_to_json, fatal=False)\n        tags = categories = None\n        if page_params:\n            tags = page_params.get('tags', '').split(',')\n            categories = page_params.get('categories', '').split(',')\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'uploader': video_uploader,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'comment_count': comment_count,\n            \n            'age_limit': 18,\n            'tags': tags,\n            'categories': categories,\n        }\n\n\nclass PornHubPlaylistBaseIE(InfoExtractor):\n    def _extract_entries(self, webpage):\n        \n        \n        \n        container = self._search_regex(\n            r'(?s)(<div[^>]+class=[\"\\']container.+)', webpage,\n            'container', default=webpage)\n\n        return [\n            self.url_result(\n                'http://www.pornhub.com/%s' % video_url,\n                PornHubIE.ie_key(), video_title=title)\n            for video_url, title in orderedSet(re.findall(\n                r'href=\"/?(view_video\\.php\\?.*\\bviewkey=[\\da-z]+[^\"]*)\"[^>]*\\s+title=\"([^\"]+)\"',\n                container))\n        ]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = self._extract_entries(webpage)\n\n        playlist = self._parse_json(\n            self._search_regex(\n                r'(?:playlistObject|PLAYLIST_VIEW)\\s*=\\s*({.+?});', webpage,\n                'playlist', default='{}'),\n            playlist_id, fatal=False)\n        title = playlist.get('title') or self._search_regex(\n            r'>Videos\\s+in\\s+(.+?)\\s+[Pp]laylist<', webpage, 'title', fatal=False)\n\n        return self.playlist_result(\n            entries, playlist_id, title, playlist.get('description'))\n\n\nclass PornHubPlaylistIE(PornHubPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?pornhub\\.com/playlist/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.pornhub.com/playlist/4667351',\n        'info_dict': {\n            'id': '4667351',\n            'title': 'Nataly Hot',\n        },\n        'playlist_mincount': 2,\n    }]\n\n\nclass PornHubUserVideosIE(PornHubPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?pornhub\\.com/(?:user|channel)s/(?P<id>[^/]+)/videos'\n    _TESTS = [{\n        'url': 'http://www.pornhub.com/users/zoe_ph/videos/public',\n        'info_dict': {\n            'id': 'zoe_ph',\n        },\n        'playlist_mincount': 171,\n    }, {\n        'url': 'http://www.pornhub.com/users/rushandlia/videos',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.pornhub.com/channels/povd/videos',\n        'info_dict': {\n            'id': 'povd',\n        },\n        'playlist_mincount': 293,\n    }, {\n        \n        'url': 'https://www.pornhub.com/channels/povd/videos?o=ra',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.pornhub.com/channels/povd/videos?o=da',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.pornhub.com/channels/povd/videos?o=vi',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        user_id = self._match_id(url)\n\n        entries = []\n        for page_num in itertools.count(1):\n            try:\n                webpage = self._download_webpage(\n                    url, user_id, 'Downloading page %d' % page_num,\n                    query={'page': page_num})\n            except ExtractorError as e:\n                if isinstance(e.cause, compat_HTTPError) and e.cause.code == 404:\n                    break\n                raise\n            page_entries = self._extract_entries(webpage)\n            if not page_entries:\n                break\n            entries.extend(page_entries)\n\n        return self.playlist_result(entries, user_id)\n", "comments": "(?x)\n                    https?://\n                        (?:\n                            (?:[a-z]+\\.)?pornhub\\.com/(?:(?:view_video\\.php|video/show)\\?viewkey=|embed/)|\n                            (?:www\\.)?thumbzilla\\.com/video/\n                        )\n                        (?P<id>[\\da-z]+)\n                    \n \n# coding: utf-8\n# import os\n# compat_urllib_parse_unquote,\n# compat_urllib_parse_unquote_plus,\n# compat_urllib_parse_urlparse,\n# sanitized_Request,\n# from ..aes import (\n#     aes_decrypt_text\n# )\n# non-ASCII title\n# removed at the request of cam4.com\n# removed at the request of the copyright owner\n# removed by uploader\n# private video\n# video_title from flashvars contains whitespace instead of non-ASCII (see\n# http://www.pornhub.com/view_video.php?viewkey=1331683002), not relying\n# on that anymore.\n# 'formats': formats,\n# Only process container div with main playlist content skipping\n# drop-down menu that uses similar pattern for videos (see\n# https://github.com/rg3/youtube-dl/issues/11594).\n# default sorting as Top Rated Videos\n# Top Rated Videos\n# Most Recent Videos\n# Most Viewed Videos\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport functools\nimport itertools\nimport operator\n# import os\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    # compat_urllib_parse_unquote,\n    # compat_urllib_parse_unquote_plus,\n    # compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    js_to_json,\n    orderedSet,\n    # sanitized_Request,\n    remove_quotes,\n    str_to_int,\n)\n# from ..aes import (\n#     aes_decrypt_text\n# )\n\n\nclass PornHubIE(InfoExtractor):\n    IE_DESC = 'PornHub and Thumbzilla'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:\n                            (?:[a-z]+\\.)?pornhub\\.com/(?:(?:view_video\\.php|video/show)\\?viewkey=|embed/)|\n                            (?:www\\.)?thumbzilla\\.com/video/\n                        )\n                        (?P<id>[\\da-z]+)\n                    '''\n    _TESTS = [{\n        'url': 'http://www.pornhub.com/view_video.php?viewkey=648719015',\n        'md5': '1e19b41231a02eba417839222ac9d58e',\n        'info_dict': {\n            'id': '648719015',\n            'ext': 'mp4',\n            'title': 'Seductive Indian beauty strips down and fingers her pink pussy',\n            'uploader': 'Babes',\n            'duration': 361,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'comment_count': int,\n            'age_limit': 18,\n            'tags': list,\n            'categories': list,\n        },\n    }, {\n        # non-ASCII title\n        'url': 'http://www.pornhub.com/view_video.php?viewkey=1331683002',\n        'info_dict': {\n            'id': '1331683002',\n            'ext': 'mp4',\n            'title': '\u91cd\u5e86\u5a77\u5a77\u5973\u738b\u8db3\u4ea4',\n            'uploader': 'cj397186295',\n            'duration': 1753,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'comment_count': int,\n            'age_limit': 18,\n            'tags': list,\n            'categories': list,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.pornhub.com/view_video.php?viewkey=ph557bbb6676d2d',\n        'only_matching': True,\n    }, {\n        # removed at the request of cam4.com\n        'url': 'http://fr.pornhub.com/view_video.php?viewkey=ph55ca2f9760862',\n        'only_matching': True,\n    }, {\n        # removed at the request of the copyright owner\n        'url': 'http://www.pornhub.com/view_video.php?viewkey=788152859',\n        'only_matching': True,\n    }, {\n        # removed by uploader\n        'url': 'http://www.pornhub.com/view_video.php?viewkey=ph572716d15a111',\n        'only_matching': True,\n    }, {\n        # private video\n        'url': 'http://www.pornhub.com/view_video.php?viewkey=ph56fd731fce6b7',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.thumbzilla.com/video/ph56c6114abd99a/horny-girlfriend-sex',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.pornhub.com/video/show?viewkey=648719015',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+?src=[\"\\'](?P<url>(?:https?:)?//(?:www\\.)?pornhub\\.com/embed/[\\da-z]+)',\n            webpage)\n\n    def _extract_count(self, pattern, webpage, name):\n        return str_to_int(self._search_regex(\n            pattern, webpage, '%s count' % name, fatal=False))\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        def dl_webpage(platform):\n            return self._download_webpage(\n                'http://www.pornhub.com/view_video.php?viewkey=%s' % video_id,\n                video_id, headers={\n                    'Cookie': 'age_verified=1; platform=%s' % platform,\n                })\n\n        webpage = dl_webpage('pc')\n\n        error_msg = self._html_search_regex(\n            r'(?s)<div[^>]+class=([\"\\'])(?:(?!\\1).)*\\b(?:removed|userMessageSection)\\b(?:(?!\\1).)*\\1[^>]*>(?P<error>.+?)</div>',\n            webpage, 'error message', default=None, group='error')\n        if error_msg:\n            error_msg = re.sub(r'\\s+', ' ', error_msg)\n            raise ExtractorError(\n                'PornHub said: %s' % error_msg,\n                expected=True, video_id=video_id)\n\n        tv_webpage = dl_webpage('tv')\n\n        assignments = self._search_regex(\n            r'(var.+?mediastring.+?)</script>', tv_webpage,\n            'encoded url').split(';')\n\n        js_vars = {}\n\n        def parse_js_value(inp):\n            inp = re.sub(r'/\\*(?:(?!\\*/).)*?\\*/', '', inp)\n            if '+' in inp:\n                inps = inp.split('+')\n                return functools.reduce(\n                    operator.concat, map(parse_js_value, inps))\n            inp = inp.strip()\n            if inp in js_vars:\n                return js_vars[inp]\n            return remove_quotes(inp)\n\n        for assn in assignments:\n            assn = assn.strip()\n            if not assn:\n                continue\n            assn = re.sub(r'var\\s+', '', assn)\n            vname, value = assn.split('=', 1)\n            js_vars[vname] = parse_js_value(value)\n\n        video_url = js_vars['mediastring']\n\n        title = self._search_regex(\n            r'<h1>([^>]+)</h1>', tv_webpage, 'title', default=None)\n\n        # video_title from flashvars contains whitespace instead of non-ASCII (see\n        # http://www.pornhub.com/view_video.php?viewkey=1331683002), not relying\n        # on that anymore.\n        title = title or self._html_search_meta(\n            'twitter:title', webpage, default=None) or self._search_regex(\n            (r'<h1[^>]+class=[\"\\']title[\"\\'][^>]*>(?P<title>[^<]+)',\n             r'<div[^>]+data-video-title=([\"\\'])(?P<title>.+?)\\1',\n             r'shareTitle\\s*=\\s*([\"\\'])(?P<title>.+?)\\1'),\n            webpage, 'title', group='title')\n\n        flashvars = self._parse_json(\n            self._search_regex(\n                r'var\\s+flashvars_\\d+\\s*=\\s*({.+?});', webpage, 'flashvars', default='{}'),\n            video_id)\n        if flashvars:\n            thumbnail = flashvars.get('image_url')\n            duration = int_or_none(flashvars.get('video_duration'))\n        else:\n            title, thumbnail, duration = [None] * 3\n\n        video_uploader = self._html_search_regex(\n            r'(?s)From:&nbsp;.+?<(?:a\\b[^>]+\\bhref=[\"\\']/(?:user|channel)s/|span\\b[^>]+\\bclass=[\"\\']username)[^>]+>(.+?)<',\n            webpage, 'uploader', fatal=False)\n\n        view_count = self._extract_count(\n            r'<span class=\"count\">([\\d,\\.]+)</span> views', webpage, 'view')\n        like_count = self._extract_count(\n            r'<span class=\"votesUp\">([\\d,\\.]+)</span>', webpage, 'like')\n        dislike_count = self._extract_count(\n            r'<span class=\"votesDown\">([\\d,\\.]+)</span>', webpage, 'dislike')\n        comment_count = self._extract_count(\n            r'All Comments\\s*<span>\\(([\\d,.]+)\\)', webpage, 'comment')\n\n        page_params = self._parse_json(self._search_regex(\n            r'page_params\\.zoneDetails\\[([\\'\"])[^\\'\"]+\\1\\]\\s*=\\s*(?P<data>{[^}]+})',\n            webpage, 'page parameters', group='data', default='{}'),\n            video_id, transform_source=js_to_json, fatal=False)\n        tags = categories = None\n        if page_params:\n            tags = page_params.get('tags', '').split(',')\n            categories = page_params.get('categories', '').split(',')\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'uploader': video_uploader,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'comment_count': comment_count,\n            # 'formats': formats,\n            'age_limit': 18,\n            'tags': tags,\n            'categories': categories,\n        }\n\n\nclass PornHubPlaylistBaseIE(InfoExtractor):\n    def _extract_entries(self, webpage):\n        # Only process container div with main playlist content skipping\n        # drop-down menu that uses similar pattern for videos (see\n        # https://github.com/rg3/youtube-dl/issues/11594).\n        container = self._search_regex(\n            r'(?s)(<div[^>]+class=[\"\\']container.+)', webpage,\n            'container', default=webpage)\n\n        return [\n            self.url_result(\n                'http://www.pornhub.com/%s' % video_url,\n                PornHubIE.ie_key(), video_title=title)\n            for video_url, title in orderedSet(re.findall(\n                r'href=\"/?(view_video\\.php\\?.*\\bviewkey=[\\da-z]+[^\"]*)\"[^>]*\\s+title=\"([^\"]+)\"',\n                container))\n        ]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = self._extract_entries(webpage)\n\n        playlist = self._parse_json(\n            self._search_regex(\n                r'(?:playlistObject|PLAYLIST_VIEW)\\s*=\\s*({.+?});', webpage,\n                'playlist', default='{}'),\n            playlist_id, fatal=False)\n        title = playlist.get('title') or self._search_regex(\n            r'>Videos\\s+in\\s+(.+?)\\s+[Pp]laylist<', webpage, 'title', fatal=False)\n\n        return self.playlist_result(\n            entries, playlist_id, title, playlist.get('description'))\n\n\nclass PornHubPlaylistIE(PornHubPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?pornhub\\.com/playlist/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.pornhub.com/playlist/4667351',\n        'info_dict': {\n            'id': '4667351',\n            'title': 'Nataly Hot',\n        },\n        'playlist_mincount': 2,\n    }]\n\n\nclass PornHubUserVideosIE(PornHubPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?pornhub\\.com/(?:user|channel)s/(?P<id>[^/]+)/videos'\n    _TESTS = [{\n        'url': 'http://www.pornhub.com/users/zoe_ph/videos/public',\n        'info_dict': {\n            'id': 'zoe_ph',\n        },\n        'playlist_mincount': 171,\n    }, {\n        'url': 'http://www.pornhub.com/users/rushandlia/videos',\n        'only_matching': True,\n    }, {\n        # default sorting as Top Rated Videos\n        'url': 'https://www.pornhub.com/channels/povd/videos',\n        'info_dict': {\n            'id': 'povd',\n        },\n        'playlist_mincount': 293,\n    }, {\n        # Top Rated Videos\n        'url': 'https://www.pornhub.com/channels/povd/videos?o=ra',\n        'only_matching': True,\n    }, {\n        # Most Recent Videos\n        'url': 'https://www.pornhub.com/channels/povd/videos?o=da',\n        'only_matching': True,\n    }, {\n        # Most Viewed Videos\n        'url': 'https://www.pornhub.com/channels/povd/videos?o=vi',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        user_id = self._match_id(url)\n\n        entries = []\n        for page_num in itertools.count(1):\n            try:\n                webpage = self._download_webpage(\n                    url, user_id, 'Downloading page %d' % page_num,\n                    query={'page': page_num})\n            except ExtractorError as e:\n                if isinstance(e.cause, compat_HTTPError) and e.cause.code == 404:\n                    break\n                raise\n            page_entries = self._extract_entries(webpage)\n            if not page_entries:\n                break\n            entries.extend(page_entries)\n\n        return self.playlist_result(entries, user_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pornhub.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pornhub.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}