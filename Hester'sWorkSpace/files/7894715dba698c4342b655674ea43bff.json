{"author": "django", "code": "from django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    favorite_books = models.ManyToManyField(\n        'Book',\n        related_name='preferred_by_authors',\n        related_query_name='preferred_by_authors',\n    )\n    content_type = models.ForeignKey(ContentType, models.CASCADE, null=True)\n    object_id = models.PositiveIntegerField(null=True)\n    content_object = GenericForeignKey()\n\n    def __str__(self):\n        return self.name\n\n\nclass Editor(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass Book(models.Model):\n    AVAILABLE = 'available'\n    RESERVED = 'reserved'\n    RENTED = 'rented'\n    STATES = (\n        (AVAILABLE, 'Available'),\n        (RESERVED, 'reserved'),\n        (RENTED, 'Rented'),\n    )\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(\n        Author,\n        models.CASCADE,\n        related_name='books',\n        related_query_name='book',\n    )\n    editor = models.ForeignKey(Editor, models.CASCADE)\n    generic_author = GenericRelation(Author)\n    state = models.CharField(max_length=9, choices=STATES, default=AVAILABLE)\n\n    def __str__(self):\n        return self.title\n\n\nclass Borrower(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Reservation(models.Model):\n    NEW = 'new'\n    STOPPED = 'stopped'\n    STATES = (\n        (NEW, 'New'),\n        (STOPPED, 'Stopped'),\n    )\n    borrower = models.ForeignKey(\n        Borrower,\n        models.CASCADE,\n        related_name='reservations',\n        related_query_name='reservation',\n    )\n    book = models.ForeignKey(\n        Book,\n        models.CASCADE,\n        related_name='reservations',\n        related_query_name='reservation',\n    )\n    state = models.CharField(max_length=7, choices=STATES, default=NEW)\n\n    def __str__(self):\n        return '-'.join((self.book.name, self.borrower.name, self.state))\n\n\nclass RentalSession(models.Model):\n    NEW = 'new'\n    STOPPED = 'stopped'\n    STATES = (\n        (NEW, 'New'),\n        (STOPPED, 'Stopped'),\n    )\n    borrower = models.ForeignKey(\n        Borrower,\n        models.CASCADE,\n        related_name='rental_sessions',\n        related_query_name='rental_session',\n    )\n    book = models.ForeignKey(\n        Book,\n        models.CASCADE,\n        related_name='rental_sessions',\n        related_query_name='rental_session',\n    )\n    state = models.CharField(max_length=7, choices=STATES, default=NEW)\n\n    def __str__(self):\n        return '-'.join((self.book.name, self.borrower.name, self.state))\n", "comments": "", "content": "from django.contrib.contenttypes.fields import (\n    GenericForeignKey, GenericRelation,\n)\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    favorite_books = models.ManyToManyField(\n        'Book',\n        related_name='preferred_by_authors',\n        related_query_name='preferred_by_authors',\n    )\n    content_type = models.ForeignKey(ContentType, models.CASCADE, null=True)\n    object_id = models.PositiveIntegerField(null=True)\n    content_object = GenericForeignKey()\n\n    def __str__(self):\n        return self.name\n\n\nclass Editor(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass Book(models.Model):\n    AVAILABLE = 'available'\n    RESERVED = 'reserved'\n    RENTED = 'rented'\n    STATES = (\n        (AVAILABLE, 'Available'),\n        (RESERVED, 'reserved'),\n        (RENTED, 'Rented'),\n    )\n    title = models.CharField(max_length=255)\n    author = models.ForeignKey(\n        Author,\n        models.CASCADE,\n        related_name='books',\n        related_query_name='book',\n    )\n    editor = models.ForeignKey(Editor, models.CASCADE)\n    generic_author = GenericRelation(Author)\n    state = models.CharField(max_length=9, choices=STATES, default=AVAILABLE)\n\n    def __str__(self):\n        return self.title\n\n\nclass Borrower(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Reservation(models.Model):\n    NEW = 'new'\n    STOPPED = 'stopped'\n    STATES = (\n        (NEW, 'New'),\n        (STOPPED, 'Stopped'),\n    )\n    borrower = models.ForeignKey(\n        Borrower,\n        models.CASCADE,\n        related_name='reservations',\n        related_query_name='reservation',\n    )\n    book = models.ForeignKey(\n        Book,\n        models.CASCADE,\n        related_name='reservations',\n        related_query_name='reservation',\n    )\n    state = models.CharField(max_length=7, choices=STATES, default=NEW)\n\n    def __str__(self):\n        return '-'.join((self.book.name, self.borrower.name, self.state))\n\n\nclass RentalSession(models.Model):\n    NEW = 'new'\n    STOPPED = 'stopped'\n    STATES = (\n        (NEW, 'New'),\n        (STOPPED, 'Stopped'),\n    )\n    borrower = models.ForeignKey(\n        Borrower,\n        models.CASCADE,\n        related_name='rental_sessions',\n        related_query_name='rental_session',\n    )\n    book = models.ForeignKey(\n        Book,\n        models.CASCADE,\n        related_name='rental_sessions',\n        related_query_name='rental_session',\n    )\n    state = models.CharField(max_length=7, choices=STATES, default=NEW)\n\n    def __str__(self):\n        return '-'.join((self.book.name, self.borrower.name, self.state))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "7894715dba698c4342b655674ea43bff", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/filtered_relation/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}