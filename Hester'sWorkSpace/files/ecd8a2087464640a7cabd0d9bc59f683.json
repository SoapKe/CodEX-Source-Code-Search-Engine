{"author": "pallets", "code": "from jinja2 import nodes\nfrom jinja2.ext import Extension\n\n\nclass FragmentCacheExtension(Extension):\n    \n    tags = set(['cache'])\n\n    def __init__(self, environment):\n        super(FragmentCacheExtension, self).__init__(environment)\n\n        \n        environment.extend(\n            fragment_cache_prefix='',\n            fragment_cache=None\n        )\n\n    def parse(self, parser):\n        \n        \n        \n        \n        lineno = next(parser.stream).lineno\n\n        \n        args = [parser.parse_expression()]\n\n        \n        \n        if parser.stream.skip_if('comma'):\n            args.append(parser.parse_expression())\n        else:\n            args.append(nodes.Const(None))\n\n        \n        # drop the needle (which would always be `endcache` in that case)\n        body = parser.parse_statements(['name:endcache'], drop_needle=True)\n\n        \n        \n        return nodes.CallBlock(self.call_method('_cache_support', args),\n                               [], [], body).set_lineno(lineno)\n\n    def _cache_support(self, name, timeout, caller):\n        \n        key = self.environment.fragment_cache_prefix + name\n\n        \n        \n        \n        rv = self.environment.fragment_cache.get(key)\n        if rv is not None:\n            return rv\n        rv = caller()\n        self.environment.fragment_cache.add(key, rv, timeout)\n        return rv\n", "comments": "   helper callback        set names trigger extension     add defaults environment    first token token started tag   in case    listen    cache    name token     cache  value   we get line number give    line number nodes create hand     parse single expression used cache key     comma  user provided timeout   if use    none second parameter     parse body cache block  endcache     drop needle (which would always  endcache  case)    return  callblock  node calls  cache support    helper method extension     try load block cache    fragment cache  render store    cache  ", "content": "from jinja2 import nodes\nfrom jinja2.ext import Extension\n\n\nclass FragmentCacheExtension(Extension):\n    # a set of names that trigger the extension.\n    tags = set(['cache'])\n\n    def __init__(self, environment):\n        super(FragmentCacheExtension, self).__init__(environment)\n\n        # add the defaults to the environment\n        environment.extend(\n            fragment_cache_prefix='',\n            fragment_cache=None\n        )\n\n    def parse(self, parser):\n        # the first token is the token that started the tag.  In our case\n        # we only listen to ``'cache'`` so this will be a name token with\n        # `cache` as value.  We get the line number so that we can give\n        # that line number to the nodes we create by hand.\n        lineno = next(parser.stream).lineno\n\n        # now we parse a single expression that is used as cache key.\n        args = [parser.parse_expression()]\n\n        # if there is a comma, the user provided a timeout.  If not use\n        # None as second parameter.\n        if parser.stream.skip_if('comma'):\n            args.append(parser.parse_expression())\n        else:\n            args.append(nodes.Const(None))\n\n        # now we parse the body of the cache block up to `endcache` and\n        # drop the needle (which would always be `endcache` in that case)\n        body = parser.parse_statements(['name:endcache'], drop_needle=True)\n\n        # now return a `CallBlock` node that calls our _cache_support\n        # helper method on this extension.\n        return nodes.CallBlock(self.call_method('_cache_support', args),\n                               [], [], body).set_lineno(lineno)\n\n    def _cache_support(self, name, timeout, caller):\n        \"\"\"Helper callback.\"\"\"\n        key = self.environment.fragment_cache_prefix + name\n\n        # try to load the block from the cache\n        # if there is no fragment in the cache, render it and store\n        # it in the cache.\n        rv = self.environment.fragment_cache.get(key)\n        if rv is not None:\n            return rv\n        rv = caller()\n        self.environment.fragment_cache.add(key, rv, timeout)\n        return rv\n", "description": "The Jinja2 template engine", "file_name": "cache_extension.py", "id": "ecd8a2087464640a7cabd0d9bc59f683", "language": "Python", "project_name": "jinja", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/pallets-jinja/pallets-jinja-3d7cfc8/docs/cache_extension.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:18:18Z", "url": "https://github.com/pallets/jinja", "wiki": false}