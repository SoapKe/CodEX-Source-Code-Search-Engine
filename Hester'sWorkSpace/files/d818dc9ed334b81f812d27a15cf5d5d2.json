{"author": "django", "code": "from django.core.serializers.json import DjangoJSONEncoder\nfrom django.db import models\n\nfrom .fields import (\n    ArrayField, BigIntegerRangeField, CICharField, CIEmailField, CITextField,\n    DateRangeField, DateTimeRangeField, FloatRangeField, HStoreField,\n    IntegerRangeField, JSONField, SearchVectorField,\n)\n\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n\n    def __eq__(self, other):\n        return isinstance(other, Tag) and self.tag_id == other.tag_id\n\n\nclass TagField(models.SmallIntegerField):\n\n    def from_db_value(self, value, expression, connection):\n        if value is None:\n            return value\n        return Tag(int(value))\n\n    def to_python(self, value):\n        if isinstance(value, Tag):\n            return value\n        if value is None:\n            return value\n        return Tag(int(value))\n\n    def get_prep_value(self, value):\n        return value.tag_id\n\n\nclass PostgreSQLModel(models.Model):\n    class Meta:\n        abstract = True\n        required_db_vendor = 'postgresql'\n\n\nclass IntegerArrayModel(PostgreSQLModel):\n    field = ArrayField(models.IntegerField(), default=list, blank=True)\n\n\nclass NullableIntegerArrayModel(PostgreSQLModel):\n    field = ArrayField(models.IntegerField(), blank=True, null=True)\n\n\nclass CharArrayModel(PostgreSQLModel):\n    field = ArrayField(models.CharField(max_length=10))\n\n\nclass DateTimeArrayModel(PostgreSQLModel):\n    datetimes = ArrayField(models.DateTimeField())\n    dates = ArrayField(models.DateField())\n    times = ArrayField(models.TimeField())\n\n\nclass NestedIntegerArrayModel(PostgreSQLModel):\n    field = ArrayField(ArrayField(models.IntegerField()))\n\n\nclass OtherTypesArrayModel(PostgreSQLModel):\n    ips = ArrayField(models.GenericIPAddressField())\n    uuids = ArrayField(models.UUIDField())\n    decimals = ArrayField(models.DecimalField(max_digits=5, decimal_places=2))\n    tags = ArrayField(TagField(), blank=True, null=True)\n\n\nclass HStoreModel(PostgreSQLModel):\n    field = HStoreField(blank=True, null=True)\n    array_field = ArrayField(HStoreField(), null=True)\n\n\nclass CharFieldModel(models.Model):\n    field = models.CharField(max_length=16)\n\n\nclass TextFieldModel(models.Model):\n    field = models.TextField()\n\n    def __str__(self):\n        return self.field\n\n\n\n\nclass Scene(models.Model):\n    scene = models.CharField(max_length=255)\n    setting = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.scene\n\n\nclass Character(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass CITestModel(PostgreSQLModel):\n    name = CICharField(primary_key=True, max_length=255)\n    email = CIEmailField()\n    description = CITextField()\n    array_field = ArrayField(CITextField(), null=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Line(PostgreSQLModel):\n    scene = models.ForeignKey('Scene', models.CASCADE)\n    character = models.ForeignKey('Character', models.CASCADE)\n    dialogue = models.TextField(blank=True, null=True)\n    dialogue_search_vector = SearchVectorField(blank=True, null=True)\n    dialogue_config = models.CharField(max_length=100, blank=True, null=True)\n\n    def __str__(self):\n        return self.dialogue or ''\n\n\nclass RangesModel(PostgreSQLModel):\n    ints = IntegerRangeField(blank=True, null=True)\n    bigints = BigIntegerRangeField(blank=True, null=True)\n    floats = FloatRangeField(blank=True, null=True)\n    timestamps = DateTimeRangeField(blank=True, null=True)\n    dates = DateRangeField(blank=True, null=True)\n\n\nclass RangeLookupsModel(PostgreSQLModel):\n    parent = models.ForeignKey(RangesModel, models.SET_NULL, blank=True, null=True)\n    integer = models.IntegerField(blank=True, null=True)\n    big_integer = models.BigIntegerField(blank=True, null=True)\n    float = models.FloatField(blank=True, null=True)\n    timestamp = models.DateTimeField(blank=True, null=True)\n    date = models.DateField(blank=True, null=True)\n\n\nclass JSONModel(PostgreSQLModel):\n    field = JSONField(blank=True, null=True)\n    field_custom = JSONField(blank=True, null=True, encoder=DjangoJSONEncoder)\n\n\nclass ArrayFieldSubclass(ArrayField):\n    def __init__(self, *args, **kwargs):\n        super().__init__(models.IntegerField())\n\n\nclass AggregateTestModel(models.Model):\n    \"\"\"\n    To test postgres-specific general aggregation functions\n    \"\"\"\n    char_field = models.CharField(max_length=30, blank=True)\n    integer_field = models.IntegerField(null=True)\n    boolean_field = models.NullBooleanField()\n\n\nclass StatTestModel(models.Model):\n    \"\"\"\n    To test postgres-specific aggregation functions for statistics\n    \"\"\"\n    int1 = models.IntegerField()\n    int2 = models.IntegerField()\n    related_field = models.ForeignKey(AggregateTestModel, models.SET_NULL, null=True)\n\n\nclass NowTestModel(models.Model):\n    when = models.DateTimeField(null=True, default=None)\n\n\nclass UUIDTestModel(models.Model):\n    uuid = models.UUIDField(default=None, null=True)\n", "comments": "        to test postgres specific general aggregation functions             char field   models charfield(max length 30  blank true)     integer field   models integerfield(null true)     boolean field   models nullbooleanfield()   class stattestmodel(models model)              to test postgres specific aggregation functions statistics            scene character line models used test full text search  they    populated content monty python holy grail  ", "content": "from django.core.serializers.json import DjangoJSONEncoder\nfrom django.db import models\n\nfrom .fields import (\n    ArrayField, BigIntegerRangeField, CICharField, CIEmailField, CITextField,\n    DateRangeField, DateTimeRangeField, FloatRangeField, HStoreField,\n    IntegerRangeField, JSONField, SearchVectorField,\n)\n\n\nclass Tag:\n    def __init__(self, tag_id):\n        self.tag_id = tag_id\n\n    def __eq__(self, other):\n        return isinstance(other, Tag) and self.tag_id == other.tag_id\n\n\nclass TagField(models.SmallIntegerField):\n\n    def from_db_value(self, value, expression, connection):\n        if value is None:\n            return value\n        return Tag(int(value))\n\n    def to_python(self, value):\n        if isinstance(value, Tag):\n            return value\n        if value is None:\n            return value\n        return Tag(int(value))\n\n    def get_prep_value(self, value):\n        return value.tag_id\n\n\nclass PostgreSQLModel(models.Model):\n    class Meta:\n        abstract = True\n        required_db_vendor = 'postgresql'\n\n\nclass IntegerArrayModel(PostgreSQLModel):\n    field = ArrayField(models.IntegerField(), default=list, blank=True)\n\n\nclass NullableIntegerArrayModel(PostgreSQLModel):\n    field = ArrayField(models.IntegerField(), blank=True, null=True)\n\n\nclass CharArrayModel(PostgreSQLModel):\n    field = ArrayField(models.CharField(max_length=10))\n\n\nclass DateTimeArrayModel(PostgreSQLModel):\n    datetimes = ArrayField(models.DateTimeField())\n    dates = ArrayField(models.DateField())\n    times = ArrayField(models.TimeField())\n\n\nclass NestedIntegerArrayModel(PostgreSQLModel):\n    field = ArrayField(ArrayField(models.IntegerField()))\n\n\nclass OtherTypesArrayModel(PostgreSQLModel):\n    ips = ArrayField(models.GenericIPAddressField())\n    uuids = ArrayField(models.UUIDField())\n    decimals = ArrayField(models.DecimalField(max_digits=5, decimal_places=2))\n    tags = ArrayField(TagField(), blank=True, null=True)\n\n\nclass HStoreModel(PostgreSQLModel):\n    field = HStoreField(blank=True, null=True)\n    array_field = ArrayField(HStoreField(), null=True)\n\n\nclass CharFieldModel(models.Model):\n    field = models.CharField(max_length=16)\n\n\nclass TextFieldModel(models.Model):\n    field = models.TextField()\n\n    def __str__(self):\n        return self.field\n\n\n# Scene/Character/Line models are used to test full text search. They're\n# populated with content from Monty Python and the Holy Grail.\nclass Scene(models.Model):\n    scene = models.CharField(max_length=255)\n    setting = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.scene\n\n\nclass Character(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass CITestModel(PostgreSQLModel):\n    name = CICharField(primary_key=True, max_length=255)\n    email = CIEmailField()\n    description = CITextField()\n    array_field = ArrayField(CITextField(), null=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Line(PostgreSQLModel):\n    scene = models.ForeignKey('Scene', models.CASCADE)\n    character = models.ForeignKey('Character', models.CASCADE)\n    dialogue = models.TextField(blank=True, null=True)\n    dialogue_search_vector = SearchVectorField(blank=True, null=True)\n    dialogue_config = models.CharField(max_length=100, blank=True, null=True)\n\n    def __str__(self):\n        return self.dialogue or ''\n\n\nclass RangesModel(PostgreSQLModel):\n    ints = IntegerRangeField(blank=True, null=True)\n    bigints = BigIntegerRangeField(blank=True, null=True)\n    floats = FloatRangeField(blank=True, null=True)\n    timestamps = DateTimeRangeField(blank=True, null=True)\n    dates = DateRangeField(blank=True, null=True)\n\n\nclass RangeLookupsModel(PostgreSQLModel):\n    parent = models.ForeignKey(RangesModel, models.SET_NULL, blank=True, null=True)\n    integer = models.IntegerField(blank=True, null=True)\n    big_integer = models.BigIntegerField(blank=True, null=True)\n    float = models.FloatField(blank=True, null=True)\n    timestamp = models.DateTimeField(blank=True, null=True)\n    date = models.DateField(blank=True, null=True)\n\n\nclass JSONModel(PostgreSQLModel):\n    field = JSONField(blank=True, null=True)\n    field_custom = JSONField(blank=True, null=True, encoder=DjangoJSONEncoder)\n\n\nclass ArrayFieldSubclass(ArrayField):\n    def __init__(self, *args, **kwargs):\n        super().__init__(models.IntegerField())\n\n\nclass AggregateTestModel(models.Model):\n    \"\"\"\n    To test postgres-specific general aggregation functions\n    \"\"\"\n    char_field = models.CharField(max_length=30, blank=True)\n    integer_field = models.IntegerField(null=True)\n    boolean_field = models.NullBooleanField()\n\n\nclass StatTestModel(models.Model):\n    \"\"\"\n    To test postgres-specific aggregation functions for statistics\n    \"\"\"\n    int1 = models.IntegerField()\n    int2 = models.IntegerField()\n    related_field = models.ForeignKey(AggregateTestModel, models.SET_NULL, null=True)\n\n\nclass NowTestModel(models.Model):\n    when = models.DateTimeField(null=True, default=None)\n\n\nclass UUIDTestModel(models.Model):\n    uuid = models.UUIDField(default=None, null=True)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "d818dc9ed334b81f812d27a15cf5d5d2", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/postgres_tests/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}