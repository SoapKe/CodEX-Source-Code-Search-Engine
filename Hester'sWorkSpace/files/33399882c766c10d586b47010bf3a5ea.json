{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\"\"\"Polyphonic RNN model.\"\"\"\n\n internal imports\nimport tensorflow as tf\n\nimport magenta\nfrom magenta.models.polyphony_rnn import polyphony_encoder_decoder\nfrom magenta.models.shared import events_rnn_model\n\n\nclass PolyphonyRnnModel(events_rnn_model.EventSequenceRnnModel):\n  \"\"\"Class for RNN polyphonic sequence generation models.\"\"\"\n\n  def generate_polyphonic_sequence(\n      self, num_steps, primer_sequence, temperature=1.0, beam_size=1,\n      branch_factor=1, steps_per_iteration=1, modify_events_callback=None):\n    \"\"\"Generate a polyphonic track from a primer polyphonic track.\n\n    Args:\n      num_steps: The integer length in steps of the final track, after\n          generation. Includes the primer.\n      primer_sequence: The primer sequence, a PolyphonicSequence object.\n      temperature: A float specifying how much to divide the logits by\n         before computing the softmax. Greater than 1.0 makes tracks more\n         random, less than 1.0 makes tracks less random.\n      beam_size: An integer, beam size to use when generating tracks via\n          beam search.\n      branch_factor: An integer, beam search branch factor to use.\n      steps_per_iteration: An integer, number of steps to take per beam search\n          iteration.\n      modify_events_callback: An optional callback for modifying the event list.\n          Can be used to inject events rather than having them generated. If not\n          None, will be called with 3 arguments after every event: the current\n          EventSequenceEncoderDecoder, a list of current EventSequences, and a\n          list of current encoded event inputs.\n    Returns:\n      The generated PolyphonicSequence object (which begins with the provided\n      primer track).\n    \"\"\"\n    return self._generate_events(num_steps, primer_sequence, temperature,\n                                 beam_size, branch_factor, steps_per_iteration,\n                                 modify_events_callback=modify_events_callback)\n\n  def polyphonic_sequence_log_likelihood(self, sequence):\n    \"\"\"Evaluate the log likelihood of a polyphonic sequence.\n\n    Args:\n      sequence: The PolyphonicSequence object for which to evaluate the log\n          likelihood.\n\n    Returns:\n      The log likelihood of `sequence` under this model.\n    \"\"\"\n    return self._evaluate_log_likelihood([sequence])[0]\n\n\ndefault_configs = {\n    'polyphony': events_rnn_model.EventSequenceRnnConfig(\n        magenta.protobuf.generator_pb2.GeneratorDetails(\n            id='polyphony',\n            description='Polyphonic RNN'),\n        magenta.music.OneHotEventSequenceEncoderDecoder(\n            polyphony_encoder_decoder.PolyphonyOneHotEncoding()),\n        tf.contrib.training.HParams(\n            batch_size=64,\n            rnn_layer_sizes=[256, 256, 256],\n            dropout_keep_prob=0.5,\n            clip_norm=5,\n            learning_rate=0.001)),\n}\n", "comments": "   polyphonic rnn model        internal imports import tensorflow tf  import magenta magenta models polyphony rnn import polyphony encoder decoder magenta models shared import events rnn model   class polyphonyrnnmodel(events rnn model eventsequencernnmodel)       class rnn polyphonic sequence generation models        def generate polyphonic sequence(       self  num steps  primer sequence  temperature 1 0  beam size 1        branch factor 1  steps per iteration 1  modify events callback none)         generate polyphonic track primer polyphonic track       args        num steps  the integer length steps final track            generation  includes primer        primer sequence  the primer sequence  polyphonicsequence object        temperature  a float specifying much divide logits          computing softmax  greater 1 0 makes tracks          random  less 1 0 makes tracks less random        beam size  an integer  beam size use generating tracks via           beam search        branch factor  an integer  beam search branch factor use        steps per iteration  an integer  number steps take per beam search           iteration        modify events callback  an optional callback modifying event list            can used inject events rather generated  if           none  called 3 arguments every event  current           eventsequenceencoderdecoder  list current eventsequences            list current encoded event inputs      returns        the generated polyphonicsequence object (which begins provided       primer track)              return self  generate events(num steps  primer sequence  temperature                                   beam size  branch factor  steps per iteration                                   modify events callback modify events callback)    def polyphonic sequence log likelihood(self  sequence)         evaluate log likelihood polyphonic sequence       args        sequence  the polyphonicsequence object evaluate log           likelihood       returns        the log likelihood  sequence  model             copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     internal imports ", "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Polyphonic RNN model.\"\"\"\n\n# internal imports\nimport tensorflow as tf\n\nimport magenta\nfrom magenta.models.polyphony_rnn import polyphony_encoder_decoder\nfrom magenta.models.shared import events_rnn_model\n\n\nclass PolyphonyRnnModel(events_rnn_model.EventSequenceRnnModel):\n  \"\"\"Class for RNN polyphonic sequence generation models.\"\"\"\n\n  def generate_polyphonic_sequence(\n      self, num_steps, primer_sequence, temperature=1.0, beam_size=1,\n      branch_factor=1, steps_per_iteration=1, modify_events_callback=None):\n    \"\"\"Generate a polyphonic track from a primer polyphonic track.\n\n    Args:\n      num_steps: The integer length in steps of the final track, after\n          generation. Includes the primer.\n      primer_sequence: The primer sequence, a PolyphonicSequence object.\n      temperature: A float specifying how much to divide the logits by\n         before computing the softmax. Greater than 1.0 makes tracks more\n         random, less than 1.0 makes tracks less random.\n      beam_size: An integer, beam size to use when generating tracks via\n          beam search.\n      branch_factor: An integer, beam search branch factor to use.\n      steps_per_iteration: An integer, number of steps to take per beam search\n          iteration.\n      modify_events_callback: An optional callback for modifying the event list.\n          Can be used to inject events rather than having them generated. If not\n          None, will be called with 3 arguments after every event: the current\n          EventSequenceEncoderDecoder, a list of current EventSequences, and a\n          list of current encoded event inputs.\n    Returns:\n      The generated PolyphonicSequence object (which begins with the provided\n      primer track).\n    \"\"\"\n    return self._generate_events(num_steps, primer_sequence, temperature,\n                                 beam_size, branch_factor, steps_per_iteration,\n                                 modify_events_callback=modify_events_callback)\n\n  def polyphonic_sequence_log_likelihood(self, sequence):\n    \"\"\"Evaluate the log likelihood of a polyphonic sequence.\n\n    Args:\n      sequence: The PolyphonicSequence object for which to evaluate the log\n          likelihood.\n\n    Returns:\n      The log likelihood of `sequence` under this model.\n    \"\"\"\n    return self._evaluate_log_likelihood([sequence])[0]\n\n\ndefault_configs = {\n    'polyphony': events_rnn_model.EventSequenceRnnConfig(\n        magenta.protobuf.generator_pb2.GeneratorDetails(\n            id='polyphony',\n            description='Polyphonic RNN'),\n        magenta.music.OneHotEventSequenceEncoderDecoder(\n            polyphony_encoder_decoder.PolyphonyOneHotEncoding()),\n        tf.contrib.training.HParams(\n            batch_size=64,\n            rnn_layer_sizes=[256, 256, 256],\n            dropout_keep_prob=0.5,\n            clip_norm=5,\n            learning_rate=0.001)),\n}\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "polyphony_model.py", "id": "33399882c766c10d586b47010bf3a5ea", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-magenta/tensorflow-magenta-c3eda3d/magenta/models/polyphony_rnn/polyphony_model.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:52:33Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}