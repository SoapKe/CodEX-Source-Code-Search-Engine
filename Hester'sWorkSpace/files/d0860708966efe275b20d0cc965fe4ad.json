{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\nfrom sentry.interfaces.message import Message\n\n\nclass MessageTest(TestCase):\n    @fixture\n    def interface(self):\n        return Message.to_python(\n            dict(\n                message='Hello there %s!',\n                params=('world', ),\n                formatted='Hello there world!',\n            )\n        )\n\n    def test_serialize_behavior(self):\n        assert self.interface.to_json() == {\n            'message': self.interface.message,\n            'params': self.interface.params,\n            'formatted': 'Hello there world!'\n        }\n\n    def test_get_hash_uses_message(self):\n        assert self.interface.get_hash() == [self.interface.message]\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_serialize_non_string_for_message(self):\n        result = type(self.interface).to_python({\n            'message': {\n                'foo': 'bar'\n            },\n        })\n        assert result.message == '{\"foo\":\"bar\"}'\n\n    \n    def test_retains_formatted(self):\n        result = type(self.interface).to_python({'message': 'foo bar', 'formatted': 'foo bar baz'})\n        assert result.message == 'foo bar'\n        assert result.formatted == 'foo bar baz'\n\n    def test_discards_dupe_formatted(self):\n        result = type(self.interface).to_python({'message': 'foo bar', 'formatted': 'foo bar'})\n        assert result.message == 'foo bar'\n        assert result.formatted is None\n", "comments": "      coding  utf 8        regression throwing data away ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\nfrom sentry.interfaces.message import Message\n\n\nclass MessageTest(TestCase):\n    @fixture\n    def interface(self):\n        return Message.to_python(\n            dict(\n                message='Hello there %s!',\n                params=('world', ),\n                formatted='Hello there world!',\n            )\n        )\n\n    def test_serialize_behavior(self):\n        assert self.interface.to_json() == {\n            'message': self.interface.message,\n            'params': self.interface.params,\n            'formatted': 'Hello there world!'\n        }\n\n    def test_get_hash_uses_message(self):\n        assert self.interface.get_hash() == [self.interface.message]\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_serialize_non_string_for_message(self):\n        result = type(self.interface).to_python({\n            'message': {\n                'foo': 'bar'\n            },\n        })\n        assert result.message == '{\"foo\":\"bar\"}'\n\n    # we had a regression which was throwing this data away\n    def test_retains_formatted(self):\n        result = type(self.interface).to_python({'message': 'foo bar', 'formatted': 'foo bar baz'})\n        assert result.message == 'foo bar'\n        assert result.formatted == 'foo bar baz'\n\n    def test_discards_dupe_formatted(self):\n        result = type(self.interface).to_python({'message': 'foo bar', 'formatted': 'foo bar'})\n        assert result.message == 'foo bar'\n        assert result.formatted is None\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_message.py", "id": "d0860708966efe275b20d0cc965fe4ad", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_message.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}