{"author": "docker", "code": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nimport os\n\nfrom compose.config.config import ConfigDetails\nfrom compose.config.config import ConfigFile\nfrom compose.config.config import load\n\n\ndef build_config(contents, **kwargs):\n    return load(build_config_details(contents, **kwargs))\n\n\ndef build_config_details(contents, working_dir='working_dir', filename='filename.yml'):\n    return ConfigDetails(\n        working_dir,\n        [ConfigFile(filename, contents)],\n    )\n\n\ndef create_custom_host_file(client, filename, content):\n    dirname = os.path.dirname(filename)\n    container = client.create_container(\n        'busybox:latest',\n        ['sh', '-c', 'echo -n \"{}\" > {}'.format(content, filename)],\n        volumes={dirname: {}},\n        host_config=client.create_host_config(\n            binds={dirname: {'bind': dirname, 'ro': False}},\n            network_mode='none',\n        ),\n    )\n    try:\n        client.start(container)\n        exitcode = client.wait(container)['StatusCode']\n\n        if exitcode != 0:\n            output = client.logs(container)\n            raise Exception(\n                \"Container exited with code {}:\\n{}\".format(exitcode, output))\n\n        container_info = client.inspect_container(container)\n        if 'Node' in container_info:\n            return container_info['Node']['Name']\n    finally:\n        client.remove_container(container, force=True)\n\n\ndef create_host_file(client, filename):\n    with open(filename, 'r') as fh:\n        content = fh.read()\n\n    return create_custom_host_file(client, filename, content)\n", "comments": "", "content": "from __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nimport os\n\nfrom compose.config.config import ConfigDetails\nfrom compose.config.config import ConfigFile\nfrom compose.config.config import load\n\n\ndef build_config(contents, **kwargs):\n    return load(build_config_details(contents, **kwargs))\n\n\ndef build_config_details(contents, working_dir='working_dir', filename='filename.yml'):\n    return ConfigDetails(\n        working_dir,\n        [ConfigFile(filename, contents)],\n    )\n\n\ndef create_custom_host_file(client, filename, content):\n    dirname = os.path.dirname(filename)\n    container = client.create_container(\n        'busybox:latest',\n        ['sh', '-c', 'echo -n \"{}\" > {}'.format(content, filename)],\n        volumes={dirname: {}},\n        host_config=client.create_host_config(\n            binds={dirname: {'bind': dirname, 'ro': False}},\n            network_mode='none',\n        ),\n    )\n    try:\n        client.start(container)\n        exitcode = client.wait(container)['StatusCode']\n\n        if exitcode != 0:\n            output = client.logs(container)\n            raise Exception(\n                \"Container exited with code {}:\\n{}\".format(exitcode, output))\n\n        container_info = client.inspect_container(container)\n        if 'Node' in container_info:\n            return container_info['Node']['Name']\n    finally:\n        client.remove_container(container, force=True)\n\n\ndef create_host_file(client, filename):\n    with open(filename, 'r') as fh:\n        content = fh.read()\n\n    return create_custom_host_file(client, filename, content)\n", "description": "Define and run multi-container applications with Docker", "file_name": "helpers.py", "id": "bf0835ce66662e3e72ce8cb538e91dd0", "language": "Python", "project_name": "compose", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/docker-compose/docker-compose-867ad15/tests/helpers.py", "save_time": "", "source": "", "update_at": "2018-03-13T22:03:14Z", "url": "https://github.com/docker/compose", "wiki": false}