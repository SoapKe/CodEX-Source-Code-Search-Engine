{"author": "odoo", "code": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nclass TestAccountValidateAccount(AccountingTestCase):\n\n    def test_account_validate_account(self):\n        account_move_line = self.env['account.move.line']\n        account_cash = self.env['account.account'].search([('user_type_id.type', '=', 'liquidity')], limit=1)\n        journal = self.env['account.journal'].search([('type', '=', 'bank')], limit=1)\n\n        company_id = self.env['res.users'].browse(self.env.uid).company_id.id\n\n        \n        move = self.env['account.move'].create({'name': '/',\n            'ref':'2011010',\n            'journal_id': journal.id,\n            'state':'draft',\n            'company_id': company_id,\n        })\n         line\n        account_move_line.create({'account_id': account_cash.id,\n            'name': 'Basic Computer',\n            'move_id': move.id,\n        })\n\n        \n        account_move_line.create({'account_id': account_cash.id,\n            'name': 'Basic Computer',\n            'move_id': move.id,\n        })\n\n        \n        self.assertTrue((move.state == 'draft'), \"Initially account move state is Draft\")\n\n        \n        validate_account_move = self.env['validate.account.move'].with_context(active_ids=move.id).create({})\n\n        \n        validate_account_move.with_context({'active_ids': [move.id]}).validate_move()\n\n        \n        self.assertTrue((move.state == 'posted'), \"Initially account move state is Posted\")\n", "comments": "  create move    create move line    create another move line    check initially account move state  draft     validate account move using  post journal entries  wizard   click validate button   check move state  posted  ", "content": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nclass TestAccountValidateAccount(AccountingTestCase):\n\n    def test_account_validate_account(self):\n        account_move_line = self.env['account.move.line']\n        account_cash = self.env['account.account'].search([('user_type_id.type', '=', 'liquidity')], limit=1)\n        journal = self.env['account.journal'].search([('type', '=', 'bank')], limit=1)\n\n        company_id = self.env['res.users'].browse(self.env.uid).company_id.id\n\n        # create move\n        move = self.env['account.move'].create({'name': '/',\n            'ref':'2011010',\n            'journal_id': journal.id,\n            'state':'draft',\n            'company_id': company_id,\n        })\n        # create move line\n        account_move_line.create({'account_id': account_cash.id,\n            'name': 'Basic Computer',\n            'move_id': move.id,\n        })\n\n        # create another move line\n        account_move_line.create({'account_id': account_cash.id,\n            'name': 'Basic Computer',\n            'move_id': move.id,\n        })\n\n        # check that Initially account move state is \"Draft\"\n        self.assertTrue((move.state == 'draft'), \"Initially account move state is Draft\")\n\n        # validate this account move by using the 'Post Journal Entries' wizard\n        validate_account_move = self.env['validate.account.move'].with_context(active_ids=move.id).create({})\n\n        #click on validate Button\n        validate_account_move.with_context({'active_ids': [move.id]}).validate_move()\n\n        #check that the move state is now \"Posted\"\n        self.assertTrue((move.state == 'posted'), \"Initially account move state is Posted\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_account_validate_account_move.py", "id": "14f02275660d7d7c904b87374c0e2113", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_account_validate_account_move.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}