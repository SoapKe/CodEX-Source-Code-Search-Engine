{"author": "HelloZeroNet", "code": "import sys\nimport logging\n\nimport gevent\nimport gevent.hub\n\nfrom Config import config\n\nlast_error = None\n\ndef shutdown():\n    print \"Shutting down...\"\n    try:\n        if \"file_server\" in dir(sys.modules[\"main\"]):\n            gevent.spawn(sys.modules[\"main\"].file_server.stop)\n        if \"ui_server\" in dir(sys.modules[\"main\"]):\n            gevent.spawn(sys.modules[\"main\"].ui_server.stop)\n    except Exception, err:\n        print \"Proper shutdown error: %s\" % err\n        sys.exit(0)\n\n\ndef handleError(*args):\n    global last_error\n    if not args:  \n        args = sys.exc_info()\n        silent = True\n    else:\n        silent = False\n    if args[0].__name__ != \"Notify\":\n        last_error = args\n    if args[0].__name__ == \"KeyboardInterrupt\":\n        shutdown()\n        return\n    if not silent and args[0].__name__ != \"Notify\":\n        logging.exception(\"Unhandled exception\")\n        if \"greenlet.py\" not in args[2].tb_frame.f_code.co_filename:  \n            sys.__excepthook__(*args)\n\n\n\ndef handleErrorNotify(*args):\n    if args[0].__name__ == \"KeyboardInterrupt\":\n        shutdown()\n    if args[0].__name__ != \"Notify\":\n        logging.exception(\"Unhandled exception\")\n        sys.__excepthook__(*args)\n\n\nif config.debug:  \n    sys.excepthook = handleError\nelse:\n    sys.excepthook = handleErrorNotify\n\n\n\nif \"handle_error\" in dir(gevent.hub.Hub):\n    gevent.hub.Hub._original_handle_error = gevent.hub.Hub.handle_error\nelse:\n    logging.debug(\"gevent.hub.Hub.handle_error not found using old gevent hooks\")\n    OriginalGreenlet = gevent.Greenlet\n    class ErrorhookedGreenlet(OriginalGreenlet):\n        def _report_error(self, exc_info):\n            sys.excepthook(exc_info[0], exc_info[1], exc_info[2])\n\n    gevent.Greenlet = gevent.greenlet.Greenlet = ErrorhookedGreenlet\n    reload(gevent)\n\ndef handleGreenletError(self, context, type, value, tb):\n    if isinstance(value, str):\n        \n        \n        value = type(value)\n    if not issubclass(type, self.NOT_ERROR):\n        sys.excepthook(type, value, tb)\n\ngevent.hub.Hub.handle_error = handleGreenletError\n\nif __name__ == \"__main__\":\n    import time\n    from gevent import monkey\n    monkey.patch_all(thread=False, ssl=False)\n    import Debug\n\n    def sleeper(num):\n        print \"started\", num\n        time.sleep(3)\n        raise Exception(\"Error\")\n        print \"stopped\", num\n    thread1 = gevent.spawn(sleeper, 1)\n    thread2 = gevent.spawn(sleeper, 2)\n    time.sleep(1)\n    print \"killing...\"\n    thread1.kill(exception=Debug.Notify(\"Worker stopped\"))\n    \n    print \"killed\"\n    gevent.joinall([thread1,thread2])", "comments": "store last error ignore notify allow manual error logging manual called don't display error twice ignore notify errors keep last error /debug override default error handler allow silent killing / custom logging cython raise errors value plain string e.g. attributeerror \"_semaphore.semaphore attr\" <traceback> thread2.throw(debug.notify(\"throw\"))", "content": "import sys\nimport logging\n\nimport gevent\nimport gevent.hub\n\nfrom Config import config\n\nlast_error = None\n\ndef shutdown():\n    print \"Shutting down...\"\n    try:\n        if \"file_server\" in dir(sys.modules[\"main\"]):\n            gevent.spawn(sys.modules[\"main\"].file_server.stop)\n        if \"ui_server\" in dir(sys.modules[\"main\"]):\n            gevent.spawn(sys.modules[\"main\"].ui_server.stop)\n    except Exception, err:\n        print \"Proper shutdown error: %s\" % err\n        sys.exit(0)\n\n# Store last error, ignore notify, allow manual error logging\ndef handleError(*args):\n    global last_error\n    if not args:  # Manual called\n        args = sys.exc_info()\n        silent = True\n    else:\n        silent = False\n    if args[0].__name__ != \"Notify\":\n        last_error = args\n    if args[0].__name__ == \"KeyboardInterrupt\":\n        shutdown()\n        return\n    if not silent and args[0].__name__ != \"Notify\":\n        logging.exception(\"Unhandled exception\")\n        if \"greenlet.py\" not in args[2].tb_frame.f_code.co_filename:  # Don't display error twice\n            sys.__excepthook__(*args)\n\n\n# Ignore notify errors\ndef handleErrorNotify(*args):\n    if args[0].__name__ == \"KeyboardInterrupt\":\n        shutdown()\n    if args[0].__name__ != \"Notify\":\n        logging.exception(\"Unhandled exception\")\n        sys.__excepthook__(*args)\n\n\nif config.debug:  # Keep last error for /Debug\n    sys.excepthook = handleError\nelse:\n    sys.excepthook = handleErrorNotify\n\n\n# Override default error handler to allow silent killing / custom logging\nif \"handle_error\" in dir(gevent.hub.Hub):\n    gevent.hub.Hub._original_handle_error = gevent.hub.Hub.handle_error\nelse:\n    logging.debug(\"gevent.hub.Hub.handle_error not found using old gevent hooks\")\n    OriginalGreenlet = gevent.Greenlet\n    class ErrorhookedGreenlet(OriginalGreenlet):\n        def _report_error(self, exc_info):\n            sys.excepthook(exc_info[0], exc_info[1], exc_info[2])\n\n    gevent.Greenlet = gevent.greenlet.Greenlet = ErrorhookedGreenlet\n    reload(gevent)\n\ndef handleGreenletError(self, context, type, value, tb):\n    if isinstance(value, str):\n        # Cython can raise errors where the value is a plain string\n        # e.g., AttributeError, \"_semaphore.Semaphore has no attr\", <traceback>\n        value = type(value)\n    if not issubclass(type, self.NOT_ERROR):\n        sys.excepthook(type, value, tb)\n\ngevent.hub.Hub.handle_error = handleGreenletError\n\nif __name__ == \"__main__\":\n    import time\n    from gevent import monkey\n    monkey.patch_all(thread=False, ssl=False)\n    import Debug\n\n    def sleeper(num):\n        print \"started\", num\n        time.sleep(3)\n        raise Exception(\"Error\")\n        print \"stopped\", num\n    thread1 = gevent.spawn(sleeper, 1)\n    thread2 = gevent.spawn(sleeper, 2)\n    time.sleep(1)\n    print \"killing...\"\n    thread1.kill(exception=Debug.Notify(\"Worker stopped\"))\n    #thread2.throw(Debug.Notify(\"Throw\"))\n    print \"killed\"\n    gevent.joinall([thread1,thread2])", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "DebugHook.py", "id": "020d28223d17e2c0bdf952faf8f3516f", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-3bdb6a2/src/Debug/DebugHook.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:21:08Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}