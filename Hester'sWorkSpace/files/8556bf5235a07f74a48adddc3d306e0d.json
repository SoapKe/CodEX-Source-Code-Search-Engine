{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .theplatform import ThePlatformIE\nfrom ..utils import (\n    smuggle_url,\n    update_url_query,\n    unescapeHTML,\n    extract_attributes,\n    get_element_by_attribute,\n)\nfrom ..compat import (\n    compat_urlparse,\n)\n\n\nclass AENetworksBaseIE(ThePlatformIE):\n    _THEPLATFORM_KEY = 'crazyjava'\n    _THEPLATFORM_SECRET = 's3cr3t'\n\n\nclass AENetworksIE(AENetworksBaseIE):\n    IE_NAME = 'aenetworks'\n    IE_DESC = 'A+E Networks: A&E, Lifetime, History.com, FYI Network'\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://www.history.com/shows/mountain-men/season-1/episode-1',\n        'md5': 'a97a65f7e823ae10e9244bc5433d5fe6',\n        'info_dict': {\n            'id': '22253814',\n            'ext': 'mp4',\n            'title': 'Winter Is Coming',\n            'description': 'md5:641f424b7a19d8e24f26dea22cf59d74',\n            'timestamp': 1338306241,\n            'upload_date': '20120529',\n            'uploader': 'AENE-NEW',\n        },\n        'add_ie': ['ThePlatform'],\n    }, {\n        'url': 'http://www.history.com/shows/ancient-aliens/season-1',\n        'info_dict': {\n            'id': '71889446852',\n        },\n        'playlist_mincount': 5,\n    }, {\n        'url': 'http://www.mylifetime.com/shows/atlanta-plastic',\n        'info_dict': {\n            'id': 'SERIES4317',\n            'title': 'Atlanta Plastic',\n        },\n        'playlist_mincount': 2,\n    }, {\n        'url': 'http://www.aetv.com/shows/duck-dynasty/season-9/episode-1',\n        'only_matching': True\n    }, {\n        'url': 'http://www.fyi.tv/shows/tiny-house-nation/season-1/episode-8',\n        'only_matching': True\n    }, {\n        'url': 'http://www.mylifetime.com/shows/project-runway-junior/season-1/episode-6',\n        'only_matching': True\n    }, {\n        'url': 'http://www.mylifetime.com/movies/center-stage-on-pointe/full-movie',\n        'only_matching': True\n    }, {\n        'url': 'https://www.lifetimemovieclub.com/movies/a-killer-among-us',\n        'only_matching': True\n    }, {\n        'url': 'http://www.history.com/specials/sniper-into-the-kill-zone/full-special',\n        'only_matching': True\n    }]\n    _DOMAIN_TO_REQUESTOR_ID = {\n        'history.com': 'HISTORY',\n        'aetv.com': 'AETV',\n        'mylifetime.com': 'LIFETIME',\n        'lifetimemovieclub.com': 'LIFETIMEMOVIECLUB',\n        'fyi.tv': 'FYI',\n    }\n\n    def _real_extract(self, url):\n        domain, show_path, movie_display_id, special_display_id = re.match(self._VALID_URL, url).groups()\n        display_id = show_path or movie_display_id or special_display_id\n        webpage = self._download_webpage(url, display_id)\n        if show_path:\n            url_parts = show_path.split('/')\n            url_parts_len = len(url_parts)\n            if url_parts_len == 1:\n                entries = []\n                for season_url_path in re.findall(r'(?s)<li[^>]+data-href=\"(/shows/%s/season-\\d+)\"' % url_parts[0], webpage):\n                    entries.append(self.url_result(\n                        compat_urlparse.urljoin(url, season_url_path), 'AENetworks'))\n                if entries:\n                    return self.playlist_result(\n                        entries, self._html_search_meta('aetn:SeriesId', webpage),\n                        self._html_search_meta('aetn:SeriesTitle', webpage))\n                else:\n                    \n                    url_parts_len = 2\n            if url_parts_len == 2:\n                entries = []\n                for episode_item in re.findall(r'(?s)<[^>]+class=\"[^\"]*(?:episode|program)-item[^\"]*\"[^>]*>', webpage):\n                    episode_attributes = extract_attributes(episode_item)\n                    episode_url = compat_urlparse.urljoin(\n                        url, episode_attributes['data-canonical'])\n                    entries.append(self.url_result(\n                        episode_url, 'AENetworks',\n                        episode_attributes.get('data-videoid') or episode_attributes.get('data-video-id')))\n                return self.playlist_result(\n                    entries, self._html_search_meta('aetn:SeasonId', webpage))\n\n        query = {\n            'mbr': 'true',\n            'assetTypes': 'high_video_ak',\n            'switch': 'hls_high_ak',\n        }\n        video_id = self._html_search_meta('aetn:VideoID', webpage)\n        media_url = self._search_regex(\n            [r\"media_url\\s*=\\s*'(?P<url>[^']+)'\",\n             r'data-media-url=(?P<url>(?:https?:)?//[^\\s>]+)',\n             r'data-media-url=([\"\\'])(?P<url>(?:(?!\\1).)+?)\\1'],\n            webpage, 'video url', group='url')\n        theplatform_metadata = self._download_theplatform_metadata(self._search_regex(\n            r'https?://link\\.theplatform\\.com/s/([^?]+)', media_url, 'theplatform_path'), video_id)\n        info = self._parse_theplatform_metadata(theplatform_metadata)\n        if theplatform_metadata.get('AETN$isBehindWall'):\n            requestor_id = self._DOMAIN_TO_REQUESTOR_ID[domain]\n            resource = self._get_mvpd_resource(\n                requestor_id, theplatform_metadata['title'],\n                theplatform_metadata.get('AETN$PPL_pplProgramId') or theplatform_metadata.get('AETN$PPL_pplProgramId_OLD'),\n                theplatform_metadata['ratings'][0]['rating'])\n            query['auth'] = self._extract_mvpd_auth(\n                url, video_id, requestor_id, resource)\n        info.update(self._search_json_ld(webpage, video_id, fatal=False))\n        media_url = update_url_query(media_url, query)\n        media_url = self._sign_url(media_url, self._THEPLATFORM_KEY, self._THEPLATFORM_SECRET)\n        formats, subtitles = self._extract_theplatform_smil(media_url, video_id)\n        self._sort_formats(formats)\n        info.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': subtitles,\n        })\n        return info\n\n\nclass HistoryTopicIE(AENetworksBaseIE):\n    IE_NAME = 'history:topic'\n    IE_DESC = 'History.com Topic'\n    _VALID_URL = r'https?://(?:www\\.)?history\\.com/topics/(?:[^/]+/)?(?P<topic_id>[^/]+)(?:/[^/]+(?:/(?P<video_display_id>[^/?\n    _TESTS = [{\n        'url': 'http://www.history.com/topics/valentines-day/history-of-valentines-day/videos/bet-you-didnt-know-valentines-day?m=528e394da93ae&s=undefined&f=1&free=false',\n        'info_dict': {\n            'id': '40700995724',\n            'ext': 'mp4',\n            'title': \"Bet You Didn't Know: Valentine's Day\",\n            'description': 'md5:7b57ea4829b391995b405fa60bd7b5f7',\n            'timestamp': 1375819729,\n            'upload_date': '20130806',\n            'uploader': 'AENE-NEW',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'add_ie': ['ThePlatform'],\n    }, {\n        'url': 'http://www.history.com/topics/world-war-i/world-war-i-history/videos',\n        'info_dict':\n        {\n            'id': 'world-war-i-history',\n            'title': 'World War I History',\n        },\n        'playlist_mincount': 23,\n    }, {\n        'url': 'http://www.history.com/topics/world-war-i-history/videos',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.history.com/topics/world-war-i/world-war-i-history',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.history.com/topics/world-war-i/world-war-i-history/speeches',\n        'only_matching': True,\n    }]\n\n    def theplatform_url_result(self, theplatform_url, video_id, query):\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'url': smuggle_url(\n                update_url_query(theplatform_url, query),\n                {\n                    'sig': {\n                        'key': self._THEPLATFORM_KEY,\n                        'secret': self._THEPLATFORM_SECRET,\n                    },\n                    'force_smil_url': True\n                }),\n            'ie_key': 'ThePlatform',\n        }\n\n    def _real_extract(self, url):\n        topic_id, video_display_id = re.match(self._VALID_URL, url).groups()\n        if video_display_id:\n            webpage = self._download_webpage(url, video_display_id)\n            release_url, video_id = re.search(r\"_videoPlayer.play\\('([^']+)'\\s*,\\s*'[^']+'\\s*,\\s*'(\\d+)'\\)\", webpage).groups()\n            release_url = unescapeHTML(release_url)\n\n            return self.theplatform_url_result(\n                release_url, video_id, {\n                    'mbr': 'true',\n                    'switch': 'hls',\n                    'assetTypes': 'high_video_ak',\n                })\n        else:\n            webpage = self._download_webpage(url, topic_id)\n            entries = []\n            for episode_item in re.findall(r'<a.+?data-release-url=\"[^\"]+\"[^>]*>', webpage):\n                video_attributes = extract_attributes(episode_item)\n                entries.append(self.theplatform_url_result(\n                    video_attributes['data-release-url'], video_attributes['data-id'], {\n                        'mbr': 'true',\n                        'switch': 'hls',\n                        'assetTypes': 'high_video_ak',\n                    }))\n            return self.playlist_result(entries, topic_id, get_element_by_attribute('class', 'show-title', webpage))\n", "comments": "(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?P<domain>\n                            (?:history|aetv|mylifetime|lifetimemovieclub)\\.com|\n                            fyi\\.tv\n                        )/\n                        (?:\n                            shows/(?P<show_path>[^/]+(?:/[^/]+){0,2})|\n                            movies/(?P<movie_display_id>[^/]+)(?:/full-movie)?|\n                            specials/(?P<special_display_id>[^/]+)/full-special\n                        )\n                    \n \n# single season\n#]+))?)?'\n# m3u8 download\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .theplatform import ThePlatformIE\nfrom ..utils import (\n    smuggle_url,\n    update_url_query,\n    unescapeHTML,\n    extract_attributes,\n    get_element_by_attribute,\n)\nfrom ..compat import (\n    compat_urlparse,\n)\n\n\nclass AENetworksBaseIE(ThePlatformIE):\n    _THEPLATFORM_KEY = 'crazyjava'\n    _THEPLATFORM_SECRET = 's3cr3t'\n\n\nclass AENetworksIE(AENetworksBaseIE):\n    IE_NAME = 'aenetworks'\n    IE_DESC = 'A+E Networks: A&E, Lifetime, History.com, FYI Network'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?P<domain>\n                            (?:history|aetv|mylifetime|lifetimemovieclub)\\.com|\n                            fyi\\.tv\n                        )/\n                        (?:\n                            shows/(?P<show_path>[^/]+(?:/[^/]+){0,2})|\n                            movies/(?P<movie_display_id>[^/]+)(?:/full-movie)?|\n                            specials/(?P<special_display_id>[^/]+)/full-special\n                        )\n                    '''\n    _TESTS = [{\n        'url': 'http://www.history.com/shows/mountain-men/season-1/episode-1',\n        'md5': 'a97a65f7e823ae10e9244bc5433d5fe6',\n        'info_dict': {\n            'id': '22253814',\n            'ext': 'mp4',\n            'title': 'Winter Is Coming',\n            'description': 'md5:641f424b7a19d8e24f26dea22cf59d74',\n            'timestamp': 1338306241,\n            'upload_date': '20120529',\n            'uploader': 'AENE-NEW',\n        },\n        'add_ie': ['ThePlatform'],\n    }, {\n        'url': 'http://www.history.com/shows/ancient-aliens/season-1',\n        'info_dict': {\n            'id': '71889446852',\n        },\n        'playlist_mincount': 5,\n    }, {\n        'url': 'http://www.mylifetime.com/shows/atlanta-plastic',\n        'info_dict': {\n            'id': 'SERIES4317',\n            'title': 'Atlanta Plastic',\n        },\n        'playlist_mincount': 2,\n    }, {\n        'url': 'http://www.aetv.com/shows/duck-dynasty/season-9/episode-1',\n        'only_matching': True\n    }, {\n        'url': 'http://www.fyi.tv/shows/tiny-house-nation/season-1/episode-8',\n        'only_matching': True\n    }, {\n        'url': 'http://www.mylifetime.com/shows/project-runway-junior/season-1/episode-6',\n        'only_matching': True\n    }, {\n        'url': 'http://www.mylifetime.com/movies/center-stage-on-pointe/full-movie',\n        'only_matching': True\n    }, {\n        'url': 'https://www.lifetimemovieclub.com/movies/a-killer-among-us',\n        'only_matching': True\n    }, {\n        'url': 'http://www.history.com/specials/sniper-into-the-kill-zone/full-special',\n        'only_matching': True\n    }]\n    _DOMAIN_TO_REQUESTOR_ID = {\n        'history.com': 'HISTORY',\n        'aetv.com': 'AETV',\n        'mylifetime.com': 'LIFETIME',\n        'lifetimemovieclub.com': 'LIFETIMEMOVIECLUB',\n        'fyi.tv': 'FYI',\n    }\n\n    def _real_extract(self, url):\n        domain, show_path, movie_display_id, special_display_id = re.match(self._VALID_URL, url).groups()\n        display_id = show_path or movie_display_id or special_display_id\n        webpage = self._download_webpage(url, display_id)\n        if show_path:\n            url_parts = show_path.split('/')\n            url_parts_len = len(url_parts)\n            if url_parts_len == 1:\n                entries = []\n                for season_url_path in re.findall(r'(?s)<li[^>]+data-href=\"(/shows/%s/season-\\d+)\"' % url_parts[0], webpage):\n                    entries.append(self.url_result(\n                        compat_urlparse.urljoin(url, season_url_path), 'AENetworks'))\n                if entries:\n                    return self.playlist_result(\n                        entries, self._html_search_meta('aetn:SeriesId', webpage),\n                        self._html_search_meta('aetn:SeriesTitle', webpage))\n                else:\n                    # single season\n                    url_parts_len = 2\n            if url_parts_len == 2:\n                entries = []\n                for episode_item in re.findall(r'(?s)<[^>]+class=\"[^\"]*(?:episode|program)-item[^\"]*\"[^>]*>', webpage):\n                    episode_attributes = extract_attributes(episode_item)\n                    episode_url = compat_urlparse.urljoin(\n                        url, episode_attributes['data-canonical'])\n                    entries.append(self.url_result(\n                        episode_url, 'AENetworks',\n                        episode_attributes.get('data-videoid') or episode_attributes.get('data-video-id')))\n                return self.playlist_result(\n                    entries, self._html_search_meta('aetn:SeasonId', webpage))\n\n        query = {\n            'mbr': 'true',\n            'assetTypes': 'high_video_ak',\n            'switch': 'hls_high_ak',\n        }\n        video_id = self._html_search_meta('aetn:VideoID', webpage)\n        media_url = self._search_regex(\n            [r\"media_url\\s*=\\s*'(?P<url>[^']+)'\",\n             r'data-media-url=(?P<url>(?:https?:)?//[^\\s>]+)',\n             r'data-media-url=([\"\\'])(?P<url>(?:(?!\\1).)+?)\\1'],\n            webpage, 'video url', group='url')\n        theplatform_metadata = self._download_theplatform_metadata(self._search_regex(\n            r'https?://link\\.theplatform\\.com/s/([^?]+)', media_url, 'theplatform_path'), video_id)\n        info = self._parse_theplatform_metadata(theplatform_metadata)\n        if theplatform_metadata.get('AETN$isBehindWall'):\n            requestor_id = self._DOMAIN_TO_REQUESTOR_ID[domain]\n            resource = self._get_mvpd_resource(\n                requestor_id, theplatform_metadata['title'],\n                theplatform_metadata.get('AETN$PPL_pplProgramId') or theplatform_metadata.get('AETN$PPL_pplProgramId_OLD'),\n                theplatform_metadata['ratings'][0]['rating'])\n            query['auth'] = self._extract_mvpd_auth(\n                url, video_id, requestor_id, resource)\n        info.update(self._search_json_ld(webpage, video_id, fatal=False))\n        media_url = update_url_query(media_url, query)\n        media_url = self._sign_url(media_url, self._THEPLATFORM_KEY, self._THEPLATFORM_SECRET)\n        formats, subtitles = self._extract_theplatform_smil(media_url, video_id)\n        self._sort_formats(formats)\n        info.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': subtitles,\n        })\n        return info\n\n\nclass HistoryTopicIE(AENetworksBaseIE):\n    IE_NAME = 'history:topic'\n    IE_DESC = 'History.com Topic'\n    _VALID_URL = r'https?://(?:www\\.)?history\\.com/topics/(?:[^/]+/)?(?P<topic_id>[^/]+)(?:/[^/]+(?:/(?P<video_display_id>[^/?#]+))?)?'\n    _TESTS = [{\n        'url': 'http://www.history.com/topics/valentines-day/history-of-valentines-day/videos/bet-you-didnt-know-valentines-day?m=528e394da93ae&s=undefined&f=1&free=false',\n        'info_dict': {\n            'id': '40700995724',\n            'ext': 'mp4',\n            'title': \"Bet You Didn't Know: Valentine's Day\",\n            'description': 'md5:7b57ea4829b391995b405fa60bd7b5f7',\n            'timestamp': 1375819729,\n            'upload_date': '20130806',\n            'uploader': 'AENE-NEW',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'add_ie': ['ThePlatform'],\n    }, {\n        'url': 'http://www.history.com/topics/world-war-i/world-war-i-history/videos',\n        'info_dict':\n        {\n            'id': 'world-war-i-history',\n            'title': 'World War I History',\n        },\n        'playlist_mincount': 23,\n    }, {\n        'url': 'http://www.history.com/topics/world-war-i-history/videos',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.history.com/topics/world-war-i/world-war-i-history',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.history.com/topics/world-war-i/world-war-i-history/speeches',\n        'only_matching': True,\n    }]\n\n    def theplatform_url_result(self, theplatform_url, video_id, query):\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'url': smuggle_url(\n                update_url_query(theplatform_url, query),\n                {\n                    'sig': {\n                        'key': self._THEPLATFORM_KEY,\n                        'secret': self._THEPLATFORM_SECRET,\n                    },\n                    'force_smil_url': True\n                }),\n            'ie_key': 'ThePlatform',\n        }\n\n    def _real_extract(self, url):\n        topic_id, video_display_id = re.match(self._VALID_URL, url).groups()\n        if video_display_id:\n            webpage = self._download_webpage(url, video_display_id)\n            release_url, video_id = re.search(r\"_videoPlayer.play\\('([^']+)'\\s*,\\s*'[^']+'\\s*,\\s*'(\\d+)'\\)\", webpage).groups()\n            release_url = unescapeHTML(release_url)\n\n            return self.theplatform_url_result(\n                release_url, video_id, {\n                    'mbr': 'true',\n                    'switch': 'hls',\n                    'assetTypes': 'high_video_ak',\n                })\n        else:\n            webpage = self._download_webpage(url, topic_id)\n            entries = []\n            for episode_item in re.findall(r'<a.+?data-release-url=\"[^\"]+\"[^>]*>', webpage):\n                video_attributes = extract_attributes(episode_item)\n                entries.append(self.theplatform_url_result(\n                    video_attributes['data-release-url'], video_attributes['data-id'], {\n                        'mbr': 'true',\n                        'switch': 'hls',\n                        'assetTypes': 'high_video_ak',\n                    }))\n            return self.playlist_result(entries, topic_id, get_element_by_attribute('class', 'show-title', webpage))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "aenetworks.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/aenetworks.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}