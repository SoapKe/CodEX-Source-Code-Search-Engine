{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nclass TestSetupBar(AccountingTestCase):\n\n    def test_initial_balance_step(self):\n        company = self.env.ref('base.main_company')\n        company.create_op_move_if_non_existant()\n        initial_setup_wizard = self.env['account.opening'].create({'company_id': company.id}).with_context({'check_move_validity': False})\n\n        unaffected_earnings_type = self.env.ref(\"account.data_unaffected_earnings\")\n        account = self.env['account.account'].search([('user_type_id', '!=', unaffected_earnings_type.id)], limit=1)\n\n        \n        test_line_1 = self.env['account.move.line'].with_context({'check_move_validity': False}).create({\n                        'name': 'Test line 1',\n                        'move_id': company.account_opening_move_id.id,\n                        'account_id': account.id,\n                        'debit': 42.0,\n                        'credit': 0.0,\n                        'company_id': company.id,\n                    })\n        initial_setup_wizard.opening_move_line_ids_changed()\n\n        self.assertEqual(len(initial_setup_wizard.opening_move_line_ids), 2, \"The wizard should contain 2 lines: 1 manually created, and 1 automatic adjustment.\")\n        automatic_line = initial_setup_wizard.opening_move_line_ids.filtered(lambda x: x != test_line_1)\n        self.assertEqual(automatic_line.account_id.user_type_id, unaffected_earnings_type, \"Automatic adjustement line should be of type 'current year earnings'.\")\n        self.assertEqual(automatic_line.credit, 42.0, \"Automatic line should balance opening move.\")\n        self.assertEqual(automatic_line.debit, 0.0, \"Automatic line should balance opening move.\")\n\n        \n        test_line_2 = self.env['account.move.line'].with_context({'check_move_validity': False}).create({\n                        'name': 'Test line 2',\n                        'move_id': company.account_opening_move_id.id,\n                        'account_id': account.id,\n                        'debit': 0.0,\n                        'credit': 12.0,\n                        'company_id': company.id,\n                    })\n        initial_setup_wizard.opening_move_line_ids_changed()\n\n        self.assertEqual(len(initial_setup_wizard.opening_move_line_ids), 3, \"The wizard should contain 3 lines: 2 manually created, and 1 automatic adjustment.\")\n        self.assertTrue(automatic_line in initial_setup_wizard.opening_move_line_ids, \"Automatic line should stay the same when adding a new line.\")\n        self.assertEqual(automatic_line.credit, 30.0, \"Automatic line should balance opening move.\")\n        self.assertEqual(automatic_line.debit, 0.0, \"Automatic line should balance opening move.\")\n\n        \n        test_line_3 = self.env['account.move.line'].with_context({'check_move_validity': False}).create({\n                        'name': 'Test line 3',\n                        'move_id': company.account_opening_move_id.id,\n                        'account_id': account.id,\n                        'debit': 0.0,\n                        'credit': 30.0,\n                        'company_id': company.id,\n                    })\n        initial_setup_wizard.opening_move_line_ids_changed()\n\n        self.assertEqual(len(initial_setup_wizard.opening_move_line_ids), 3, \"The wizard should contain 3 lines: 3 manually created, and 0 automatic adjustment.\")\n        self.assertFalse(automatic_line in initial_setup_wizard.opening_move_line_ids, \"Automatic adjustment line should be removed when useless.\")\n\n        \n        test_line_4 = self.env['account.move.line'].with_context({'check_move_validity': False}).create({\n                        'name': 'Test line 4',\n                        'move_id': company.account_opening_move_id.id,\n                        'account_id': account.id,\n                        'debit': 11.0,\n                        'credit': 0.0,\n                        'company_id': company.id,\n                    })\n        initial_setup_wizard.opening_move_line_ids_changed()\n        initial_setup_wizard.validate()\n        company.account_opening_move_id.assert_balanced()\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     adding first line creates new automatic adjustment line balancing move    adding new line modifies amount already existing adjustment line    when new line balances move  adjusment line gets automatically removed    the opening move stays balanced time ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nclass TestSetupBar(AccountingTestCase):\n\n    def test_initial_balance_step(self):\n        company = self.env.ref('base.main_company')\n        company.create_op_move_if_non_existant()\n        initial_setup_wizard = self.env['account.opening'].create({'company_id': company.id}).with_context({'check_move_validity': False})\n\n        unaffected_earnings_type = self.env.ref(\"account.data_unaffected_earnings\")\n        account = self.env['account.account'].search([('user_type_id', '!=', unaffected_earnings_type.id)], limit=1)\n\n        # Adding the first line creates a new automatic adjustment line balancing the move\n        test_line_1 = self.env['account.move.line'].with_context({'check_move_validity': False}).create({\n                        'name': 'Test line 1',\n                        'move_id': company.account_opening_move_id.id,\n                        'account_id': account.id,\n                        'debit': 42.0,\n                        'credit': 0.0,\n                        'company_id': company.id,\n                    })\n        initial_setup_wizard.opening_move_line_ids_changed()\n\n        self.assertEqual(len(initial_setup_wizard.opening_move_line_ids), 2, \"The wizard should contain 2 lines: 1 manually created, and 1 automatic adjustment.\")\n        automatic_line = initial_setup_wizard.opening_move_line_ids.filtered(lambda x: x != test_line_1)\n        self.assertEqual(automatic_line.account_id.user_type_id, unaffected_earnings_type, \"Automatic adjustement line should be of type 'current year earnings'.\")\n        self.assertEqual(automatic_line.credit, 42.0, \"Automatic line should balance opening move.\")\n        self.assertEqual(automatic_line.debit, 0.0, \"Automatic line should balance opening move.\")\n\n        # Adding a new line modifies the amount of the already existing adjustment line\n        test_line_2 = self.env['account.move.line'].with_context({'check_move_validity': False}).create({\n                        'name': 'Test line 2',\n                        'move_id': company.account_opening_move_id.id,\n                        'account_id': account.id,\n                        'debit': 0.0,\n                        'credit': 12.0,\n                        'company_id': company.id,\n                    })\n        initial_setup_wizard.opening_move_line_ids_changed()\n\n        self.assertEqual(len(initial_setup_wizard.opening_move_line_ids), 3, \"The wizard should contain 3 lines: 2 manually created, and 1 automatic adjustment.\")\n        self.assertTrue(automatic_line in initial_setup_wizard.opening_move_line_ids, \"Automatic line should stay the same when adding a new line.\")\n        self.assertEqual(automatic_line.credit, 30.0, \"Automatic line should balance opening move.\")\n        self.assertEqual(automatic_line.debit, 0.0, \"Automatic line should balance opening move.\")\n\n        # When a new line balances the move, the adjusment line gets automatically removed\n        test_line_3 = self.env['account.move.line'].with_context({'check_move_validity': False}).create({\n                        'name': 'Test line 3',\n                        'move_id': company.account_opening_move_id.id,\n                        'account_id': account.id,\n                        'debit': 0.0,\n                        'credit': 30.0,\n                        'company_id': company.id,\n                    })\n        initial_setup_wizard.opening_move_line_ids_changed()\n\n        self.assertEqual(len(initial_setup_wizard.opening_move_line_ids), 3, \"The wizard should contain 3 lines: 3 manually created, and 0 automatic adjustment.\")\n        self.assertFalse(automatic_line in initial_setup_wizard.opening_move_line_ids, \"Automatic adjustment line should be removed when useless.\")\n\n        # The opening move stays balanced at any time\n        test_line_4 = self.env['account.move.line'].with_context({'check_move_validity': False}).create({\n                        'name': 'Test line 4',\n                        'move_id': company.account_opening_move_id.id,\n                        'account_id': account.id,\n                        'debit': 11.0,\n                        'credit': 0.0,\n                        'company_id': company.id,\n                    })\n        initial_setup_wizard.opening_move_line_ids_changed()\n        initial_setup_wizard.validate()\n        company.account_opening_move_id.assert_balanced()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_setup_bar.py", "id": "53346fe4f70669b07ea86e703000a608", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_setup_bar.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}