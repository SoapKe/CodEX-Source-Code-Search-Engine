{"author": "donnemartin", "code": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestBstSecondLargest(object):\n\n    def test_bst_second_largest(self):\n        bst = Solution(None)\n        assert_raises(TypeError, bst.find_second_largest)\n        root = Node(10)\n        bst = Solution(root)\n        node5 = bst.insert(5)\n        node15 = bst.insert(15)\n        node3 = bst.insert(3)\n        node8 = bst.insert(8)\n        node12 = bst.insert(12)\n        node20 = bst.insert(20)\n        node2 = bst.insert(2)\n        node4 = bst.insert(4)\n        node30 = bst.insert(30)\n        assert_equal(bst.find_second_largest(), node20)\n        root = Node(10)\n        bst = Solution(root)\n        node5 = bst.insert(5)\n        node3 = bst.insert(3)\n        node7 = bst.insert(7)\n        assert_equal(bst.find_second_largest(), node7)\n        print('Success: test_bst_second_largest')\n\n\ndef main():\n    test = TestBstSecondLargest()\n    test.test_bst_second_largest()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestBstSecondLargest(object):\n\n    def test_bst_second_largest(self):\n        bst = Solution(None)\n        assert_raises(TypeError, bst.find_second_largest)\n        root = Node(10)\n        bst = Solution(root)\n        node5 = bst.insert(5)\n        node15 = bst.insert(15)\n        node3 = bst.insert(3)\n        node8 = bst.insert(8)\n        node12 = bst.insert(12)\n        node20 = bst.insert(20)\n        node2 = bst.insert(2)\n        node4 = bst.insert(4)\n        node30 = bst.insert(30)\n        assert_equal(bst.find_second_largest(), node20)\n        root = Node(10)\n        bst = Solution(root)\n        node5 = bst.insert(5)\n        node3 = bst.insert(3)\n        node7 = bst.insert(7)\n        assert_equal(bst.find_second_largest(), node7)\n        print('Success: test_bst_second_largest')\n\n\ndef main():\n    test = TestBstSecondLargest()\n    test.test_bst_second_largest()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_bst_second_largest.py", "id": "660d90b910cd1013fae89943c56a2cb5", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/bst_second_largest/test_bst_second_largest.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}