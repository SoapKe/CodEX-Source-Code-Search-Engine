{"author": "jakubroztocil", "code": "\n\nfrom utils import http, HTTP_OK\nfrom fixtures import UNICODE\n\n\ndef test_unicode_headers(httpbin):\n    \n    r = http(httpbin.url + '/headers', u'Test:%s' % UNICODE)\n    assert HTTP_OK in r\n\n\ndef test_unicode_headers_verbose(httpbin):\n    \n    r = http('--verbose', httpbin.url + '/headers', u'Test:%s' % UNICODE)\n    assert HTTP_OK in r\n    assert UNICODE in r\n\n\ndef test_unicode_form_item(httpbin):\n    r = http('--form', 'POST', httpbin.url + '/post', u'test=%s' % UNICODE)\n    assert HTTP_OK in r\n    assert r.json['form'] == {'test': UNICODE}\n\n\ndef test_unicode_form_item_verbose(httpbin):\n    r = http('--verbose', '--form',\n             'POST', httpbin.url + '/post', u'test=%s' % UNICODE)\n    assert HTTP_OK in r\n    assert UNICODE in r\n\n\ndef test_unicode_json_item(httpbin):\n    r = http('--json', 'POST', httpbin.url + '/post', u'test=%s' % UNICODE)\n    assert HTTP_OK in r\n    assert r.json['json'] == {'test': UNICODE}\n\n\ndef test_unicode_json_item_verbose(httpbin):\n    r = http('--verbose', '--json',\n             'POST', httpbin.url + '/post', u'test=%s' % UNICODE)\n    assert HTTP_OK in r\n    assert UNICODE in r\n\n\ndef test_unicode_raw_json_item(httpbin):\n    r = http('--json', 'POST', httpbin.url + '/post',\n             u'test:={ \"%s\" : [ \"%s\" ] }' % (UNICODE, UNICODE))\n    assert HTTP_OK in r\n    assert r.json['json'] == {'test': {UNICODE: [UNICODE]}}\n\n\ndef test_unicode_raw_json_item_verbose(httpbin):\n    r = http('--json', 'POST', httpbin.url + '/post',\n             u'test:={ \"%s\" : [ \"%s\" ] }' % (UNICODE, UNICODE))\n    assert HTTP_OK in r\n    assert r.json['json'] == {'test': {UNICODE: [UNICODE]}}\n\n\ndef test_unicode_url_query_arg_item(httpbin):\n    r = http(httpbin.url + '/get', u'test==%s' % UNICODE)\n    assert HTTP_OK in r\n    assert r.json['args'] == {'test': UNICODE}, r\n\n\ndef test_unicode_url_query_arg_item_verbose(httpbin):\n    r = http('--verbose', httpbin.url + '/get', u'test==%s' % UNICODE)\n    assert HTTP_OK in r\n    assert UNICODE in r\n\n\ndef test_unicode_url(httpbin):\n    r = http(httpbin.url + u'/get?test=' + UNICODE)\n    assert HTTP_OK in r\n    assert r.json['args'] == {'test': UNICODE}\n\n# def test_unicode_url_verbose(self):\n#     r = http(httpbin.url + '--verbose', u'/get?test=' + UNICODE)\n\n\n\ndef test_unicode_basic_auth(httpbin):\n    \n    \n    http('--verbose', '--auth', u'test:%s' % UNICODE,\n         httpbin.url + u'/basic-auth/test/' + UNICODE)\n\n\ndef test_unicode_digest_auth(httpbin):\n    \n    \n    http('--auth-type=digest',\n         '--auth', u'test:%s' % UNICODE,\n         httpbin.url + u'/digest-auth/auth/test/' + UNICODE)\n", "comments": "    various unicode handling related tests          coding utf 8    httpbin interpret utf8 headers    httpbin interpret utf8 headers    def test unicode url verbose(self)         r   http(httpbin url      verbose   u  get test     unicode)        assert http ok r    really authenticate us httpbin    interpret utf8 encoded auth    really authenticate us httpbin    interpret utf8 encoded auth ", "content": "# coding=utf-8\n\"\"\"\nVarious unicode handling related tests.\n\n\"\"\"\nfrom utils import http, HTTP_OK\nfrom fixtures import UNICODE\n\n\ndef test_unicode_headers(httpbin):\n    # httpbin doesn't interpret utf8 headers\n    r = http(httpbin.url + '/headers', u'Test:%s' % UNICODE)\n    assert HTTP_OK in r\n\n\ndef test_unicode_headers_verbose(httpbin):\n    # httpbin doesn't interpret utf8 headers\n    r = http('--verbose', httpbin.url + '/headers', u'Test:%s' % UNICODE)\n    assert HTTP_OK in r\n    assert UNICODE in r\n\n\ndef test_unicode_form_item(httpbin):\n    r = http('--form', 'POST', httpbin.url + '/post', u'test=%s' % UNICODE)\n    assert HTTP_OK in r\n    assert r.json['form'] == {'test': UNICODE}\n\n\ndef test_unicode_form_item_verbose(httpbin):\n    r = http('--verbose', '--form',\n             'POST', httpbin.url + '/post', u'test=%s' % UNICODE)\n    assert HTTP_OK in r\n    assert UNICODE in r\n\n\ndef test_unicode_json_item(httpbin):\n    r = http('--json', 'POST', httpbin.url + '/post', u'test=%s' % UNICODE)\n    assert HTTP_OK in r\n    assert r.json['json'] == {'test': UNICODE}\n\n\ndef test_unicode_json_item_verbose(httpbin):\n    r = http('--verbose', '--json',\n             'POST', httpbin.url + '/post', u'test=%s' % UNICODE)\n    assert HTTP_OK in r\n    assert UNICODE in r\n\n\ndef test_unicode_raw_json_item(httpbin):\n    r = http('--json', 'POST', httpbin.url + '/post',\n             u'test:={ \"%s\" : [ \"%s\" ] }' % (UNICODE, UNICODE))\n    assert HTTP_OK in r\n    assert r.json['json'] == {'test': {UNICODE: [UNICODE]}}\n\n\ndef test_unicode_raw_json_item_verbose(httpbin):\n    r = http('--json', 'POST', httpbin.url + '/post',\n             u'test:={ \"%s\" : [ \"%s\" ] }' % (UNICODE, UNICODE))\n    assert HTTP_OK in r\n    assert r.json['json'] == {'test': {UNICODE: [UNICODE]}}\n\n\ndef test_unicode_url_query_arg_item(httpbin):\n    r = http(httpbin.url + '/get', u'test==%s' % UNICODE)\n    assert HTTP_OK in r\n    assert r.json['args'] == {'test': UNICODE}, r\n\n\ndef test_unicode_url_query_arg_item_verbose(httpbin):\n    r = http('--verbose', httpbin.url + '/get', u'test==%s' % UNICODE)\n    assert HTTP_OK in r\n    assert UNICODE in r\n\n\ndef test_unicode_url(httpbin):\n    r = http(httpbin.url + u'/get?test=' + UNICODE)\n    assert HTTP_OK in r\n    assert r.json['args'] == {'test': UNICODE}\n\n# def test_unicode_url_verbose(self):\n#     r = http(httpbin.url + '--verbose', u'/get?test=' + UNICODE)\n#     assert HTTP_OK in r\n\n\ndef test_unicode_basic_auth(httpbin):\n    # it doesn't really authenticate us because httpbin\n    # doesn't interpret the utf8-encoded auth\n    http('--verbose', '--auth', u'test:%s' % UNICODE,\n         httpbin.url + u'/basic-auth/test/' + UNICODE)\n\n\ndef test_unicode_digest_auth(httpbin):\n    # it doesn't really authenticate us because httpbin\n    # doesn't interpret the utf8-encoded auth\n    http('--auth-type=digest',\n         '--auth', u'test:%s' % UNICODE,\n         httpbin.url + u'/digest-auth/auth/test/' + UNICODE)\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_unicode.py", "id": "0d96afa9565298aaaa6728365b4ce95e", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil-httpie/jakubroztocil-httpie-0f4dce9/tests/test_unicode.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:48:16Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}