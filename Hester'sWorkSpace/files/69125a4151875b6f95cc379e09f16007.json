{"author": "HelloZeroNet", "code": "import logging\nimport time\nimport cgi\nimport socket\nimport sys\nimport gevent\n\nfrom gevent.pywsgi import WSGIServer\nfrom gevent.pywsgi import WSGIHandler\nfrom lib.geventwebsocket.handler import WebSocketHandler\n\nfrom UiRequest import UiRequest\nfrom Site import SiteManager\nfrom Config import config\nfrom Debug import Debug\n\n\n\nclass UiWSGIHandler(WSGIHandler):\n\n    def __init__(self, *args, **kwargs):\n        self.server = args[2]\n        super(UiWSGIHandler, self).__init__(*args, **kwargs)\n        self.args = args\n        self.kwargs = kwargs\n\n    def run_application(self):\n        if \"HTTP_UPGRADE\" in self.environ:  \n            try:\n                ws_handler = WebSocketHandler(*self.args, **self.kwargs)\n                ws_handler.__dict__ = self.__dict__  \n                ws_handler.run_application()\n            except Exception, err:\n                logging.error(\"UiWSGIHandler websocket error: %s\" % Debug.formatException(err))\n                if config.debug:  \n                    import sys\n                    sys.modules[\"main\"].DebugHook.handleError()\n        else:  \n            try:\n                super(UiWSGIHandler, self).run_application()\n            except Exception, err:\n                logging.error(\"UiWSGIHandler error: %s\" % Debug.formatException(err))\n                if config.debug:  \n                    import sys\n                    sys.modules[\"main\"].DebugHook.handleError()\n\n    def handle(self):\n        \n        self.server.sockets[self.client_address] = self.socket\n        super(UiWSGIHandler, self).handle()\n        del self.server.sockets[self.client_address]\n\n\nclass UiServer:\n\n    def __init__(self):\n        self.ip = config.ui_ip\n        self.port = config.ui_port\n        if self.ip == \"*\":\n            self.ip = \"0.0.0.0\"  \n        if config.ui_host:\n            self.allowed_hosts = set(config.ui_host)\n            self.learn_allowed_host = False\n        elif config.ui_ip == \"127.0.0.1\":\n            self.allowed_hosts = set([\"zero\", \"localhost:%s\" % config.ui_port, \"127.0.0.1:%s\" % config.ui_port])\n            self.learn_allowed_host = False\n        else:\n            self.allowed_hosts = set([])\n            self.learn_allowed_host = True  \n\n        self.wrapper_nonces = []\n        self.add_nonces = []\n        self.websockets = []\n        self.site_manager = SiteManager.site_manager\n        self.sites = SiteManager.site_manager.list()\n        self.log = logging.getLogger(__name__)\n\n    \n    def afterStarted(self):\n        from util import Platform\n        Platform.setMaxfilesopened(config.max_files_opened)\n\n    \n    def handleRequest(self, env, start_response):\n        path = env[\"PATH_INFO\"]\n        if env.get(\"QUERY_STRING\"):\n            get = dict(cgi.parse_qsl(env['QUERY_STRING']))\n        else:\n            get = {}\n        ui_request = UiRequest(self, get, env, start_response)\n        if config.debug:  \n            return ui_request.route(path)\n        else:  \n            try:\n                return ui_request.route(path)\n            except Exception, err:\n                logging.debug(\"UiRequest error: %s\" % Debug.formatException(err))\n                return ui_request.error500(\"Err: %s\" % Debug.formatException(err))\n\n    \n    def reload(self):\n        global UiRequest\n        import imp\n        import sys\n        reload(sys.modules[\"User.UserManager\"])\n        reload(sys.modules[\"Ui.UiWebsocket\"])\n        UiRequest = imp.load_source(\"UiRequest\", \"src/Ui/UiRequest.py\").UiRequest\n        ()\n\n    \n    def start(self):\n        handler = self.handleRequest\n\n        if config.debug:\n            \n            from Debug import DebugReloader\n            DebugReloader(self.reload)\n\n            \n            try:\n                from werkzeug.debug import DebuggedApplication\n                handler = DebuggedApplication(self.handleRequest, evalex=True)\n            except Exception, err:\n                self.log.info(\"%s: For debugging please download Werkzeug (http://werkzeug.pocoo.org/)\" % err)\n                from Debug import DebugReloader\n        self.log.write = lambda msg: self.log.debug(msg.strip())  \n        self.log.info(\"--------------------------------------\")\n        self.log.info(\"Web interface: http://%s:%s/\" % (config.ui_ip, config.ui_port))\n        self.log.info(\"--------------------------------------\")\n\n        if config.open_browser:\n            logging.info(\"Opening browser: %s...\", config.open_browser)\n            import webbrowser\n            if config.open_browser == \"default_browser\":\n                browser = webbrowser.get()\n            else:\n                browser = webbrowser.get(config.open_browser)\n            url = \"http://%s:%s/%s\" % (config.ui_ip if config.ui_ip != \"*\" else \"127.0.0.1\", config.ui_port, config.homepage)\n            gevent.spawn_later(0.3, browser.open, url, new=2)\n\n        self.server = WSGIServer((self.ip, self.port), handler, handler_class=UiWSGIHandler, log=self.log)\n        self.server.sockets = {}\n        self.afterStarted()\n        try:\n            self.server.serve_forever()\n        except Exception, err:\n            self.log.error(\"Web interface bind error, must be running already, exiting.... %s\" % err)\n            sys.modules[\"main\"].file_server.stop()\n        self.log.debug(\"Stopped.\")\n\n    def stop(self):\n        self.log.debug(\"Stopping...\")\n        \n        if \"clients\" in dir(self.server):\n            for client in self.server.clients.values():\n                client.ws.close()\n        \n        sock_closed = 0\n        for sock in self.server.sockets.values():\n            try:\n                sock.send(\"bye\")\n                sock.shutdown(socket.SHUT_RDWR)\n                ()\n                ()\n                sock_closed += 1\n            except Exception, err:\n                self.log.debug(\"Http connection close error: %s\" % err)\n        self.log.debug(\"Socket closed: %s\" % sock_closed)\n        time.sleep(0.1)\n\n        self.server.socket.close()\n        self.server.stop()\n        time.sleep(1)\n\n    def updateWebsocket(self, **kwargs):\n        for ws in self.websockets:\n            ws.event(\"serverChanged\", kwargs)\n", "comments": "  skip websocket handler necessary    websocket request    match class variables    allow websocket errors appear  debug    standard http request    allow websocket errors appear  debug    save socket able close properly exit    bind    it pin first http request host    after webui started    handle wsgi request    let exception catched werkezung    catch display error    reload uirequest class prevent restarts debug mode    uirequest reload()    bind run server    auto reload uirequest change    werkzeug debugger    for wsgi access log    close ws sockets    close http sockets    sock  sock close()    sock close() ", "content": "import logging\nimport time\nimport cgi\nimport socket\nimport sys\nimport gevent\n\nfrom gevent.pywsgi import WSGIServer\nfrom gevent.pywsgi import WSGIHandler\nfrom lib.geventwebsocket.handler import WebSocketHandler\n\nfrom UiRequest import UiRequest\nfrom Site import SiteManager\nfrom Config import config\nfrom Debug import Debug\n\n\n# Skip websocket handler if not necessary\nclass UiWSGIHandler(WSGIHandler):\n\n    def __init__(self, *args, **kwargs):\n        self.server = args[2]\n        super(UiWSGIHandler, self).__init__(*args, **kwargs)\n        self.args = args\n        self.kwargs = kwargs\n\n    def run_application(self):\n        if \"HTTP_UPGRADE\" in self.environ:  # Websocket request\n            try:\n                ws_handler = WebSocketHandler(*self.args, **self.kwargs)\n                ws_handler.__dict__ = self.__dict__  # Match class variables\n                ws_handler.run_application()\n            except Exception, err:\n                logging.error(\"UiWSGIHandler websocket error: %s\" % Debug.formatException(err))\n                if config.debug:  # Allow websocket errors to appear on /Debug\n                    import sys\n                    sys.modules[\"main\"].DebugHook.handleError()\n        else:  # Standard HTTP request\n            try:\n                super(UiWSGIHandler, self).run_application()\n            except Exception, err:\n                logging.error(\"UiWSGIHandler error: %s\" % Debug.formatException(err))\n                if config.debug:  # Allow websocket errors to appear on /Debug\n                    import sys\n                    sys.modules[\"main\"].DebugHook.handleError()\n\n    def handle(self):\n        # Save socket to be able to close them properly on exit\n        self.server.sockets[self.client_address] = self.socket\n        super(UiWSGIHandler, self).handle()\n        del self.server.sockets[self.client_address]\n\n\nclass UiServer:\n\n    def __init__(self):\n        self.ip = config.ui_ip\n        self.port = config.ui_port\n        if self.ip == \"*\":\n            self.ip = \"0.0.0.0\"  # Bind all\n        if config.ui_host:\n            self.allowed_hosts = set(config.ui_host)\n            self.learn_allowed_host = False\n        elif config.ui_ip == \"127.0.0.1\":\n            self.allowed_hosts = set([\"zero\", \"localhost:%s\" % config.ui_port, \"127.0.0.1:%s\" % config.ui_port])\n            self.learn_allowed_host = False\n        else:\n            self.allowed_hosts = set([])\n            self.learn_allowed_host = True  # It will pin to the first http request's host\n\n        self.wrapper_nonces = []\n        self.add_nonces = []\n        self.websockets = []\n        self.site_manager = SiteManager.site_manager\n        self.sites = SiteManager.site_manager.list()\n        self.log = logging.getLogger(__name__)\n\n    # After WebUI started\n    def afterStarted(self):\n        from util import Platform\n        Platform.setMaxfilesopened(config.max_files_opened)\n\n    # Handle WSGI request\n    def handleRequest(self, env, start_response):\n        path = env[\"PATH_INFO\"]\n        if env.get(\"QUERY_STRING\"):\n            get = dict(cgi.parse_qsl(env['QUERY_STRING']))\n        else:\n            get = {}\n        ui_request = UiRequest(self, get, env, start_response)\n        if config.debug:  # Let the exception catched by werkezung\n            return ui_request.route(path)\n        else:  # Catch and display the error\n            try:\n                return ui_request.route(path)\n            except Exception, err:\n                logging.debug(\"UiRequest error: %s\" % Debug.formatException(err))\n                return ui_request.error500(\"Err: %s\" % Debug.formatException(err))\n\n    # Reload the UiRequest class to prevent restarts in debug mode\n    def reload(self):\n        global UiRequest\n        import imp\n        import sys\n        reload(sys.modules[\"User.UserManager\"])\n        reload(sys.modules[\"Ui.UiWebsocket\"])\n        UiRequest = imp.load_source(\"UiRequest\", \"src/Ui/UiRequest.py\").UiRequest\n        # UiRequest.reload()\n\n    # Bind and run the server\n    def start(self):\n        handler = self.handleRequest\n\n        if config.debug:\n            # Auto reload UiRequest on change\n            from Debug import DebugReloader\n            DebugReloader(self.reload)\n\n            # Werkzeug Debugger\n            try:\n                from werkzeug.debug import DebuggedApplication\n                handler = DebuggedApplication(self.handleRequest, evalex=True)\n            except Exception, err:\n                self.log.info(\"%s: For debugging please download Werkzeug (http://werkzeug.pocoo.org/)\" % err)\n                from Debug import DebugReloader\n        self.log.write = lambda msg: self.log.debug(msg.strip())  # For Wsgi access.log\n        self.log.info(\"--------------------------------------\")\n        self.log.info(\"Web interface: http://%s:%s/\" % (config.ui_ip, config.ui_port))\n        self.log.info(\"--------------------------------------\")\n\n        if config.open_browser:\n            logging.info(\"Opening browser: %s...\", config.open_browser)\n            import webbrowser\n            if config.open_browser == \"default_browser\":\n                browser = webbrowser.get()\n            else:\n                browser = webbrowser.get(config.open_browser)\n            url = \"http://%s:%s/%s\" % (config.ui_ip if config.ui_ip != \"*\" else \"127.0.0.1\", config.ui_port, config.homepage)\n            gevent.spawn_later(0.3, browser.open, url, new=2)\n\n        self.server = WSGIServer((self.ip, self.port), handler, handler_class=UiWSGIHandler, log=self.log)\n        self.server.sockets = {}\n        self.afterStarted()\n        try:\n            self.server.serve_forever()\n        except Exception, err:\n            self.log.error(\"Web interface bind error, must be running already, exiting.... %s\" % err)\n            sys.modules[\"main\"].file_server.stop()\n        self.log.debug(\"Stopped.\")\n\n    def stop(self):\n        self.log.debug(\"Stopping...\")\n        # Close WS sockets\n        if \"clients\" in dir(self.server):\n            for client in self.server.clients.values():\n                client.ws.close()\n        # Close http sockets\n        sock_closed = 0\n        for sock in self.server.sockets.values():\n            try:\n                sock.send(\"bye\")\n                sock.shutdown(socket.SHUT_RDWR)\n                # sock._sock.close()\n                # sock.close()\n                sock_closed += 1\n            except Exception, err:\n                self.log.debug(\"Http connection close error: %s\" % err)\n        self.log.debug(\"Socket closed: %s\" % sock_closed)\n        time.sleep(0.1)\n\n        self.server.socket.close()\n        self.server.stop()\n        time.sleep(1)\n\n    def updateWebsocket(self, **kwargs):\n        for ws in self.websockets:\n            ws.event(\"serverChanged\", kwargs)\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "UiServer.py", "id": "69125a4151875b6f95cc379e09f16007", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Ui/UiServer.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}