{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    fix_xml_ampersands,\n    float_or_none,\n    int_or_none,\n    parse_duration,\n    str_to_int,\n    unescapeHTML,\n    xpath_text,\n)\n\n\nclass TNAFlixNetworkBaseIE(InfoExtractor):\n    \n    _CONFIG_REGEX = [\n        r'flashvars\\.config\\s*=\\s*escape\\(\"([^\"]+)\"',\n        r'<input[^>]+name=\"config\\d?\" value=\"([^\"]+)\"',\n    ]\n    _HOST = 'tna'\n    _VKEY_SUFFIX = ''\n    _TITLE_REGEX = r'<input[^>]+name=\"title\" value=\"([^\"]+)\"'\n    _DESCRIPTION_REGEX = r'<input[^>]+name=\"description\" value=\"([^\"]+)\"'\n    _UPLOADER_REGEX = r'<input[^>]+name=\"username\" value=\"([^\"]+)\"'\n    _VIEW_COUNT_REGEX = None\n    _COMMENT_COUNT_REGEX = None\n    _AVERAGE_RATING_REGEX = None\n    _CATEGORIES_REGEX = r'<li[^>]*>\\s*<span[^>]+class=\"infoTitle\"[^>]*>Categories:</span>\\s*<span[^>]+class=\"listView\"[^>]*>(.+?)</span>\\s*</li>'\n\n    def _extract_thumbnails(self, flix_xml):\n\n        def get_child(elem, names):\n            for name in names:\n                child = elem.find(name)\n                if child is not None:\n                    return child\n\n        timeline = get_child(flix_xml, ['timeline', 'rolloverBarImage'])\n        if timeline is None:\n            return\n\n        pattern_el = get_child(timeline, ['imagePattern', 'pattern'])\n        if pattern_el is None or not pattern_el.text:\n            return\n\n        first_el = get_child(timeline, ['imageFirst', 'first'])\n        last_el = get_child(timeline, ['imageLast', 'last'])\n        if first_el is None or last_el is None:\n            return\n\n        first_text = first_el.text\n        last_text = last_el.text\n        if not first_text.isdigit() or not last_text.isdigit():\n            return\n\n        first = int(first_text)\n        last = int(last_text)\n        if first > last:\n            return\n\n        width = int_or_none(xpath_text(timeline, './imageWidth', 'thumbnail width'))\n        height = int_or_none(xpath_text(timeline, './imageHeight', 'thumbnail height'))\n\n        return [{\n            'url': self._proto_relative_url(pattern_el.text.replace('\n            'width': width,\n            'height': height,\n        } for i in range(first, last + 1)]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        for display_id_key in ('display_id', 'display_id_2'):\n            if display_id_key in mobj.groupdict():\n                display_id = mobj.group(display_id_key)\n                if display_id:\n                    break\n        else:\n            display_id = video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        cfg_url = self._proto_relative_url(self._html_search_regex(\n            self._CONFIG_REGEX, webpage, 'flashvars.config', default=None), 'http:')\n\n        if not cfg_url:\n            inputs = self._hidden_inputs(webpage)\n            cfg_url = ('https://cdn-fck.%sflix.com/%sflix/%s%s.fid?key=%s&VID=%s&premium=1&vip=1&alpha'\n                       % (self._HOST, self._HOST, inputs['vkey'], self._VKEY_SUFFIX, inputs['nkey'], video_id))\n\n        cfg_xml = self._download_xml(\n            cfg_url, display_id, 'Downloading metadata',\n            transform_source=fix_xml_ampersands)\n\n        formats = []\n\n        def extract_video_url(vl):\n            \n            return unescapeHTML(vl.text)\n\n        video_link = cfg_xml.find('./videoLink')\n        if video_link is not None:\n            formats.append({\n                'url': extract_video_url(video_link),\n                'ext': xpath_text(cfg_xml, './videoConfig/type', 'type', default='flv'),\n            })\n\n        for item in cfg_xml.findall('./quality/item'):\n            video_link = item.find('./videoLink')\n            if video_link is None:\n                continue\n            res = item.find('res')\n            format_id = None if res is None else res.text\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]', format_id, 'height', default=None))\n            formats.append({\n                'url': self._proto_relative_url(extract_video_url(video_link), 'http:'),\n                'format_id': format_id,\n                'height': height,\n            })\n\n        self._sort_formats(formats)\n\n        thumbnail = self._proto_relative_url(\n            xpath_text(cfg_xml, './startThumb', 'thumbnail'), 'http:')\n        thumbnails = self._extract_thumbnails(cfg_xml)\n\n        title = None\n        if self._TITLE_REGEX:\n            title = self._html_search_regex(\n                self._TITLE_REGEX, webpage, 'title', default=None)\n        if not title:\n            title = self._og_search_title(webpage)\n\n        age_limit = self._rta_search(webpage) or 18\n\n        duration = parse_duration(self._html_search_meta(\n            'duration', webpage, 'duration', default=None))\n\n        def extract_field(pattern, name):\n            return self._html_search_regex(pattern, webpage, name, default=None) if pattern else None\n\n        description = extract_field(self._DESCRIPTION_REGEX, 'description')\n        uploader = extract_field(self._UPLOADER_REGEX, 'uploader')\n        view_count = str_to_int(extract_field(self._VIEW_COUNT_REGEX, 'view count'))\n        comment_count = str_to_int(extract_field(self._COMMENT_COUNT_REGEX, 'comment count'))\n        average_rating = float_or_none(extract_field(self._AVERAGE_RATING_REGEX, 'average rating'))\n\n        categories_str = extract_field(self._CATEGORIES_REGEX, 'categories')\n        categories = [c.strip() for c in categories_str.split(',')] if categories_str is not None else []\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'thumbnails': thumbnails,\n            'duration': duration,\n            'age_limit': age_limit,\n            'uploader': uploader,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'average_rating': average_rating,\n            'categories': categories,\n            'formats': formats,\n        }\n\n\nclass TNAFlixNetworkEmbedIE(TNAFlixNetworkBaseIE):\n    _VALID_URL = r'https?://player\\.(?:tna|emp)flix\\.com/video/(?P<id>\\d+)'\n\n    _TITLE_REGEX = r'<title>([^<]+)</title>'\n\n    _TESTS = [{\n        'url': 'https://player.tnaflix.com/video/6538',\n        'info_dict': {\n            'id': '6538',\n            'display_id': '6538',\n            'ext': 'mp4',\n            'title': 'Educational xxx video',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://player.empflix.com/video/33051',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//player\\.(?:tna|emp)flix\\.com/video/\\d+)\\1',\n            webpage)]\n\n\nclass TNAEMPFlixBaseIE(TNAFlixNetworkBaseIE):\n    _DESCRIPTION_REGEX = r'(?s)>Description:</[^>]+>(.+?)<'\n    _UPLOADER_REGEX = r'<span>by\\s*<a[^>]+\\bhref=[\"\\']/profile/[^>]+>([^<]+)<'\n    _CATEGORIES_REGEX = r'(?s)<span[^>]*>Categories:</span>(.+?)</div>'\n\n\nclass TNAFlixIE(TNAEMPFlixBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?tnaflix\\.com/[^/]+/(?P<display_id>[^/]+)/video(?P<id>\\d+)'\n\n    _TITLE_REGEX = r'<title>(.+?) - (?:TNAFlix Porn Videos|TNAFlix\\.com)</title>'\n\n    _TESTS = [{\n        \n        'url': 'http://www.tnaflix.com/porn-stars/Carmella-Decesare-striptease/video553878',\n        'md5': '7e569419fe6d69543d01e6be22f5f7c4',\n        'info_dict': {\n            'id': '553878',\n            'display_id': 'Carmella-Decesare-striptease',\n            'ext': 'mp4',\n            'title': 'Carmella Decesare - striptease',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 91,\n            'age_limit': 18,\n            'categories': ['Porn Stars'],\n        }\n    }, {\n        \n        'url': 'https://www.tnaflix.com/teen-porn/Educational-xxx-video/video6538',\n        'md5': '0f5d4d490dbfd117b8607054248a07c0',\n        'info_dict': {\n            'id': '6538',\n            'display_id': 'Educational-xxx-video',\n            'ext': 'mp4',\n            'title': 'Educational xxx video',\n            'description': 'md5:b4fab8f88a8621c8fabd361a173fe5b8',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 164,\n            'age_limit': 18,\n            'uploader': 'bobwhite39',\n            'categories': list,\n        }\n    }, {\n        'url': 'https://www.tnaflix.com/amateur-porn/bunzHD-Ms.Donk/video358632',\n        'only_matching': True,\n    }]\n\n\nclass EMPFlixIE(TNAEMPFlixBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?empflix\\.com/(?:videos/(?P<display_id>.+?)-|[^/]+/(?P<display_id_2>[^/]+)/video)(?P<id>[0-9]+)'\n\n    _HOST = 'emp'\n    _VKEY_SUFFIX = '-1'\n\n    _TESTS = [{\n        'url': 'http://www.empflix.com/videos/Amateur-Finger-Fuck-33051.html',\n        'md5': 'bc30d48b91a7179448a0bda465114676',\n        'info_dict': {\n            'id': '33051',\n            'display_id': 'Amateur-Finger-Fuck',\n            'ext': 'mp4',\n            'title': 'Amateur Finger Fuck',\n            'description': 'Amateur solo finger fucking.',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 83,\n            'age_limit': 18,\n            'uploader': 'cwbike',\n            'categories': ['Amateur', 'Anal', 'Fisting', 'Home made', 'Solo'],\n        }\n    }, {\n        'url': 'http://www.empflix.com/videos/[AROMA][ARMD-718]-Aoi-Yoshino-Sawa-25826.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.empflix.com/amateur-porn/Amateur-Finger-Fuck/video33051',\n        'only_matching': True,\n    }]\n\n\nclass MovieFapIE(TNAFlixNetworkBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?moviefap\\.com/videos/(?P<id>[0-9a-f]+)/(?P<display_id>[^/]+)\\.html'\n\n    _VIEW_COUNT_REGEX = r'<br>Views\\s*<strong>([\\d,.]+)</strong>'\n    _COMMENT_COUNT_REGEX = r'<span[^>]+id=\"comCount\"[^>]*>([\\d,.]+)</span>'\n    _AVERAGE_RATING_REGEX = r'Current Rating\\s*<br>\\s*<strong>([\\d.]+)</strong>'\n    _CATEGORIES_REGEX = r'(?s)<div[^>]+id=\"vid_info\"[^>]*>\\s*<div[^>]*>.+?</div>(.*?)<br>'\n\n    _TESTS = [{\n        \n        'url': 'http://www.moviefap.com/videos/be9867c9416c19f54a4a/experienced-milf-amazing-handjob.html',\n        'md5': '26624b4e2523051b550067d547615906',\n        'info_dict': {\n            'id': 'be9867c9416c19f54a4a',\n            'display_id': 'experienced-milf-amazing-handjob',\n            'ext': 'mp4',\n            'title': 'Experienced MILF Amazing Handjob',\n            'description': 'Experienced MILF giving an Amazing Handjob',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n            'uploader': 'darvinfred06',\n            'view_count': int,\n            'comment_count': int,\n            'average_rating': float,\n            'categories': ['Amateur', 'Masturbation', 'Mature', 'Flashing'],\n        }\n    }, {\n        \n        'url': 'http://www.moviefap.com/videos/e5da0d3edce5404418f5/jeune-couple-russe.html',\n        'md5': 'fa56683e291fc80635907168a743c9ad',\n        'info_dict': {\n            'id': 'e5da0d3edce5404418f5',\n            'display_id': 'jeune-couple-russe',\n            'ext': 'flv',\n            'title': 'Jeune Couple Russe',\n            'description': 'Amateur',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n            'uploader': 'whiskeyjar',\n            'view_count': int,\n            'comment_count': int,\n            'average_rating': float,\n            'categories': ['Amateur', 'Teen'],\n        }\n    }]\n", "comments": "# May be overridden in descendants if necessary\n#', compat_str(i)), 'http:'),\n# Any URL modification now results in HTTP Error 403: Forbidden\n# anonymous uploader, no categories\n# non-anonymous uploader, categories\n# normal, multi-format video\n# quirky single-format case where the extension is given as fid, but the video is really an flv\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    fix_xml_ampersands,\n    float_or_none,\n    int_or_none,\n    parse_duration,\n    str_to_int,\n    unescapeHTML,\n    xpath_text,\n)\n\n\nclass TNAFlixNetworkBaseIE(InfoExtractor):\n    # May be overridden in descendants if necessary\n    _CONFIG_REGEX = [\n        r'flashvars\\.config\\s*=\\s*escape\\(\"([^\"]+)\"',\n        r'<input[^>]+name=\"config\\d?\" value=\"([^\"]+)\"',\n    ]\n    _HOST = 'tna'\n    _VKEY_SUFFIX = ''\n    _TITLE_REGEX = r'<input[^>]+name=\"title\" value=\"([^\"]+)\"'\n    _DESCRIPTION_REGEX = r'<input[^>]+name=\"description\" value=\"([^\"]+)\"'\n    _UPLOADER_REGEX = r'<input[^>]+name=\"username\" value=\"([^\"]+)\"'\n    _VIEW_COUNT_REGEX = None\n    _COMMENT_COUNT_REGEX = None\n    _AVERAGE_RATING_REGEX = None\n    _CATEGORIES_REGEX = r'<li[^>]*>\\s*<span[^>]+class=\"infoTitle\"[^>]*>Categories:</span>\\s*<span[^>]+class=\"listView\"[^>]*>(.+?)</span>\\s*</li>'\n\n    def _extract_thumbnails(self, flix_xml):\n\n        def get_child(elem, names):\n            for name in names:\n                child = elem.find(name)\n                if child is not None:\n                    return child\n\n        timeline = get_child(flix_xml, ['timeline', 'rolloverBarImage'])\n        if timeline is None:\n            return\n\n        pattern_el = get_child(timeline, ['imagePattern', 'pattern'])\n        if pattern_el is None or not pattern_el.text:\n            return\n\n        first_el = get_child(timeline, ['imageFirst', 'first'])\n        last_el = get_child(timeline, ['imageLast', 'last'])\n        if first_el is None or last_el is None:\n            return\n\n        first_text = first_el.text\n        last_text = last_el.text\n        if not first_text.isdigit() or not last_text.isdigit():\n            return\n\n        first = int(first_text)\n        last = int(last_text)\n        if first > last:\n            return\n\n        width = int_or_none(xpath_text(timeline, './imageWidth', 'thumbnail width'))\n        height = int_or_none(xpath_text(timeline, './imageHeight', 'thumbnail height'))\n\n        return [{\n            'url': self._proto_relative_url(pattern_el.text.replace('#', compat_str(i)), 'http:'),\n            'width': width,\n            'height': height,\n        } for i in range(first, last + 1)]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        for display_id_key in ('display_id', 'display_id_2'):\n            if display_id_key in mobj.groupdict():\n                display_id = mobj.group(display_id_key)\n                if display_id:\n                    break\n        else:\n            display_id = video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        cfg_url = self._proto_relative_url(self._html_search_regex(\n            self._CONFIG_REGEX, webpage, 'flashvars.config', default=None), 'http:')\n\n        if not cfg_url:\n            inputs = self._hidden_inputs(webpage)\n            cfg_url = ('https://cdn-fck.%sflix.com/%sflix/%s%s.fid?key=%s&VID=%s&premium=1&vip=1&alpha'\n                       % (self._HOST, self._HOST, inputs['vkey'], self._VKEY_SUFFIX, inputs['nkey'], video_id))\n\n        cfg_xml = self._download_xml(\n            cfg_url, display_id, 'Downloading metadata',\n            transform_source=fix_xml_ampersands)\n\n        formats = []\n\n        def extract_video_url(vl):\n            # Any URL modification now results in HTTP Error 403: Forbidden\n            return unescapeHTML(vl.text)\n\n        video_link = cfg_xml.find('./videoLink')\n        if video_link is not None:\n            formats.append({\n                'url': extract_video_url(video_link),\n                'ext': xpath_text(cfg_xml, './videoConfig/type', 'type', default='flv'),\n            })\n\n        for item in cfg_xml.findall('./quality/item'):\n            video_link = item.find('./videoLink')\n            if video_link is None:\n                continue\n            res = item.find('res')\n            format_id = None if res is None else res.text\n            height = int_or_none(self._search_regex(\n                r'^(\\d+)[pP]', format_id, 'height', default=None))\n            formats.append({\n                'url': self._proto_relative_url(extract_video_url(video_link), 'http:'),\n                'format_id': format_id,\n                'height': height,\n            })\n\n        self._sort_formats(formats)\n\n        thumbnail = self._proto_relative_url(\n            xpath_text(cfg_xml, './startThumb', 'thumbnail'), 'http:')\n        thumbnails = self._extract_thumbnails(cfg_xml)\n\n        title = None\n        if self._TITLE_REGEX:\n            title = self._html_search_regex(\n                self._TITLE_REGEX, webpage, 'title', default=None)\n        if not title:\n            title = self._og_search_title(webpage)\n\n        age_limit = self._rta_search(webpage) or 18\n\n        duration = parse_duration(self._html_search_meta(\n            'duration', webpage, 'duration', default=None))\n\n        def extract_field(pattern, name):\n            return self._html_search_regex(pattern, webpage, name, default=None) if pattern else None\n\n        description = extract_field(self._DESCRIPTION_REGEX, 'description')\n        uploader = extract_field(self._UPLOADER_REGEX, 'uploader')\n        view_count = str_to_int(extract_field(self._VIEW_COUNT_REGEX, 'view count'))\n        comment_count = str_to_int(extract_field(self._COMMENT_COUNT_REGEX, 'comment count'))\n        average_rating = float_or_none(extract_field(self._AVERAGE_RATING_REGEX, 'average rating'))\n\n        categories_str = extract_field(self._CATEGORIES_REGEX, 'categories')\n        categories = [c.strip() for c in categories_str.split(',')] if categories_str is not None else []\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'thumbnails': thumbnails,\n            'duration': duration,\n            'age_limit': age_limit,\n            'uploader': uploader,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'average_rating': average_rating,\n            'categories': categories,\n            'formats': formats,\n        }\n\n\nclass TNAFlixNetworkEmbedIE(TNAFlixNetworkBaseIE):\n    _VALID_URL = r'https?://player\\.(?:tna|emp)flix\\.com/video/(?P<id>\\d+)'\n\n    _TITLE_REGEX = r'<title>([^<]+)</title>'\n\n    _TESTS = [{\n        'url': 'https://player.tnaflix.com/video/6538',\n        'info_dict': {\n            'id': '6538',\n            'display_id': '6538',\n            'ext': 'mp4',\n            'title': 'Educational xxx video',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://player.empflix.com/video/33051',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [url for _, url in re.findall(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//player\\.(?:tna|emp)flix\\.com/video/\\d+)\\1',\n            webpage)]\n\n\nclass TNAEMPFlixBaseIE(TNAFlixNetworkBaseIE):\n    _DESCRIPTION_REGEX = r'(?s)>Description:</[^>]+>(.+?)<'\n    _UPLOADER_REGEX = r'<span>by\\s*<a[^>]+\\bhref=[\"\\']/profile/[^>]+>([^<]+)<'\n    _CATEGORIES_REGEX = r'(?s)<span[^>]*>Categories:</span>(.+?)</div>'\n\n\nclass TNAFlixIE(TNAEMPFlixBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?tnaflix\\.com/[^/]+/(?P<display_id>[^/]+)/video(?P<id>\\d+)'\n\n    _TITLE_REGEX = r'<title>(.+?) - (?:TNAFlix Porn Videos|TNAFlix\\.com)</title>'\n\n    _TESTS = [{\n        # anonymous uploader, no categories\n        'url': 'http://www.tnaflix.com/porn-stars/Carmella-Decesare-striptease/video553878',\n        'md5': '7e569419fe6d69543d01e6be22f5f7c4',\n        'info_dict': {\n            'id': '553878',\n            'display_id': 'Carmella-Decesare-striptease',\n            'ext': 'mp4',\n            'title': 'Carmella Decesare - striptease',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 91,\n            'age_limit': 18,\n            'categories': ['Porn Stars'],\n        }\n    }, {\n        # non-anonymous uploader, categories\n        'url': 'https://www.tnaflix.com/teen-porn/Educational-xxx-video/video6538',\n        'md5': '0f5d4d490dbfd117b8607054248a07c0',\n        'info_dict': {\n            'id': '6538',\n            'display_id': 'Educational-xxx-video',\n            'ext': 'mp4',\n            'title': 'Educational xxx video',\n            'description': 'md5:b4fab8f88a8621c8fabd361a173fe5b8',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 164,\n            'age_limit': 18,\n            'uploader': 'bobwhite39',\n            'categories': list,\n        }\n    }, {\n        'url': 'https://www.tnaflix.com/amateur-porn/bunzHD-Ms.Donk/video358632',\n        'only_matching': True,\n    }]\n\n\nclass EMPFlixIE(TNAEMPFlixBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?empflix\\.com/(?:videos/(?P<display_id>.+?)-|[^/]+/(?P<display_id_2>[^/]+)/video)(?P<id>[0-9]+)'\n\n    _HOST = 'emp'\n    _VKEY_SUFFIX = '-1'\n\n    _TESTS = [{\n        'url': 'http://www.empflix.com/videos/Amateur-Finger-Fuck-33051.html',\n        'md5': 'bc30d48b91a7179448a0bda465114676',\n        'info_dict': {\n            'id': '33051',\n            'display_id': 'Amateur-Finger-Fuck',\n            'ext': 'mp4',\n            'title': 'Amateur Finger Fuck',\n            'description': 'Amateur solo finger fucking.',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'duration': 83,\n            'age_limit': 18,\n            'uploader': 'cwbike',\n            'categories': ['Amateur', 'Anal', 'Fisting', 'Home made', 'Solo'],\n        }\n    }, {\n        'url': 'http://www.empflix.com/videos/[AROMA][ARMD-718]-Aoi-Yoshino-Sawa-25826.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.empflix.com/amateur-porn/Amateur-Finger-Fuck/video33051',\n        'only_matching': True,\n    }]\n\n\nclass MovieFapIE(TNAFlixNetworkBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?moviefap\\.com/videos/(?P<id>[0-9a-f]+)/(?P<display_id>[^/]+)\\.html'\n\n    _VIEW_COUNT_REGEX = r'<br>Views\\s*<strong>([\\d,.]+)</strong>'\n    _COMMENT_COUNT_REGEX = r'<span[^>]+id=\"comCount\"[^>]*>([\\d,.]+)</span>'\n    _AVERAGE_RATING_REGEX = r'Current Rating\\s*<br>\\s*<strong>([\\d.]+)</strong>'\n    _CATEGORIES_REGEX = r'(?s)<div[^>]+id=\"vid_info\"[^>]*>\\s*<div[^>]*>.+?</div>(.*?)<br>'\n\n    _TESTS = [{\n        # normal, multi-format video\n        'url': 'http://www.moviefap.com/videos/be9867c9416c19f54a4a/experienced-milf-amazing-handjob.html',\n        'md5': '26624b4e2523051b550067d547615906',\n        'info_dict': {\n            'id': 'be9867c9416c19f54a4a',\n            'display_id': 'experienced-milf-amazing-handjob',\n            'ext': 'mp4',\n            'title': 'Experienced MILF Amazing Handjob',\n            'description': 'Experienced MILF giving an Amazing Handjob',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n            'uploader': 'darvinfred06',\n            'view_count': int,\n            'comment_count': int,\n            'average_rating': float,\n            'categories': ['Amateur', 'Masturbation', 'Mature', 'Flashing'],\n        }\n    }, {\n        # quirky single-format case where the extension is given as fid, but the video is really an flv\n        'url': 'http://www.moviefap.com/videos/e5da0d3edce5404418f5/jeune-couple-russe.html',\n        'md5': 'fa56683e291fc80635907168a743c9ad',\n        'info_dict': {\n            'id': 'e5da0d3edce5404418f5',\n            'display_id': 'jeune-couple-russe',\n            'ext': 'flv',\n            'title': 'Jeune Couple Russe',\n            'description': 'Amateur',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'age_limit': 18,\n            'uploader': 'whiskeyjar',\n            'view_count': int,\n            'comment_count': int,\n            'average_rating': float,\n            'categories': ['Amateur', 'Teen'],\n        }\n    }]\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tnaflix.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tnaflix.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}