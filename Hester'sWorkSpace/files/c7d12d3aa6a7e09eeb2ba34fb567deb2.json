{"author": "django", "code": "from django.core.exceptions import FieldError\nfrom django.test import TestCase\n\nfrom .models import Article, Author\n\n\nclass CustomColumnsTests(TestCase):\n\n    def setUp(self):\n        self.a1 = Author.objects.create(first_name=\"John\", last_name=\"Smith\")\n        self.a2 = Author.objects.create(first_name=\"Peter\", last_name=\"Jones\")\n        self.authors = [self.a1, self.a2]\n\n        self.article = Article.objects.create(headline=\"Django lets you build Web apps easily\", primary_author=self.a1)\n        self.article.authors.set(self.authors)\n\n    def test_query_all_available_authors(self):\n        self.assertQuerysetEqual(\n            Author.objects.all(), [\n                \"Peter Jones\", \"John Smith\",\n            ],\n            str\n        )\n\n    def test_get_first_name(self):\n        self.assertEqual(\n            Author.objects.get(first_name__exact=\"John\"),\n            self.a1,\n        )\n\n    def test_filter_first_name(self):\n        self.assertQuerysetEqual(\n            Author.objects.filter(first_name__exact=\"John\"), [\n                \"John Smith\",\n            ],\n            str\n        )\n\n    def test_field_error(self):\n        msg = (\n            \"Cannot resolve keyword 'firstname' into field. Choices are: \"\n            \"Author_ID, article, first_name, last_name, primary_set\"\n        )\n        with self.assertRaisesMessage(FieldError, msg):\n            Author.objects.filter(firstname__exact=\"John\")\n\n    def test_attribute_error(self):\n        with self.assertRaises(AttributeError):\n            self.a1.firstname\n\n        with self.assertRaises(AttributeError):\n            self.a1.last\n\n    def test_get_all_authors_for_an_article(self):\n        self.assertQuerysetEqual(\n            self.article.authors.all(), [\n                \"Peter Jones\",\n                \"John Smith\",\n            ],\n            str\n        )\n\n    def test_get_all_articles_for_an_author(self):\n        self.assertQuerysetEqual(\n            self.a1.article_set.all(), [\n                \"Django lets you build Web apps easily\",\n            ],\n            lambda a: a.headline\n        )\n\n    def test_get_author_m2m_relation(self):\n        self.assertQuerysetEqual(\n            self.article.authors.filter(last_name='Jones'), [\n                \"Peter Jones\"\n            ],\n            str\n        )\n\n    def test_author_querying(self):\n        self.assertQuerysetEqual(\n            Author.objects.all().order_by('last_name'),\n            ['<Author: Peter Jones>', '<Author: John Smith>']\n        )\n\n    def test_author_filtering(self):\n        self.assertQuerysetEqual(\n            Author.objects.filter(first_name__exact='John'),\n            ['<Author: John Smith>']\n        )\n\n    def test_author_get(self):\n        self.assertEqual(self.a1, Author.objects.get(first_name__exact='John'))\n\n    def test_filter_on_nonexistent_field(self):\n        msg = (\n            \"Cannot resolve keyword 'firstname' into field. Choices are: \"\n            \"Author_ID, article, first_name, last_name, primary_set\"\n        )\n        with self.assertRaisesMessage(FieldError, msg):\n            Author.objects.filter(firstname__exact='John')\n\n    def test_author_get_attributes(self):\n        a = Author.objects.get(last_name__exact='Smith')\n        self.assertEqual('John', a.first_name)\n        self.assertEqual('Smith', a.last_name)\n        with self.assertRaisesMessage(AttributeError, \"'Author' object has no attribute 'firstname'\"):\n            getattr(a, 'firstname')\n\n        with self.assertRaisesMessage(AttributeError, \"'Author' object has no attribute 'last'\"):\n            getattr(a, 'last')\n\n    def test_m2m_table(self):\n        self.assertQuerysetEqual(\n            self.article.authors.all().order_by('last_name'),\n            ['<Author: Peter Jones>', '<Author: John Smith>']\n        )\n        self.assertQuerysetEqual(\n            self.a1.article_set.all(),\n            ['<Article: Django lets you build Web apps easily>']\n        )\n        self.assertQuerysetEqual(\n            self.article.authors.filter(last_name='Jones'),\n            ['<Author: Peter Jones>']\n        )\n", "comments": "", "content": "from django.core.exceptions import FieldError\nfrom django.test import TestCase\n\nfrom .models import Article, Author\n\n\nclass CustomColumnsTests(TestCase):\n\n    def setUp(self):\n        self.a1 = Author.objects.create(first_name=\"John\", last_name=\"Smith\")\n        self.a2 = Author.objects.create(first_name=\"Peter\", last_name=\"Jones\")\n        self.authors = [self.a1, self.a2]\n\n        self.article = Article.objects.create(headline=\"Django lets you build Web apps easily\", primary_author=self.a1)\n        self.article.authors.set(self.authors)\n\n    def test_query_all_available_authors(self):\n        self.assertQuerysetEqual(\n            Author.objects.all(), [\n                \"Peter Jones\", \"John Smith\",\n            ],\n            str\n        )\n\n    def test_get_first_name(self):\n        self.assertEqual(\n            Author.objects.get(first_name__exact=\"John\"),\n            self.a1,\n        )\n\n    def test_filter_first_name(self):\n        self.assertQuerysetEqual(\n            Author.objects.filter(first_name__exact=\"John\"), [\n                \"John Smith\",\n            ],\n            str\n        )\n\n    def test_field_error(self):\n        msg = (\n            \"Cannot resolve keyword 'firstname' into field. Choices are: \"\n            \"Author_ID, article, first_name, last_name, primary_set\"\n        )\n        with self.assertRaisesMessage(FieldError, msg):\n            Author.objects.filter(firstname__exact=\"John\")\n\n    def test_attribute_error(self):\n        with self.assertRaises(AttributeError):\n            self.a1.firstname\n\n        with self.assertRaises(AttributeError):\n            self.a1.last\n\n    def test_get_all_authors_for_an_article(self):\n        self.assertQuerysetEqual(\n            self.article.authors.all(), [\n                \"Peter Jones\",\n                \"John Smith\",\n            ],\n            str\n        )\n\n    def test_get_all_articles_for_an_author(self):\n        self.assertQuerysetEqual(\n            self.a1.article_set.all(), [\n                \"Django lets you build Web apps easily\",\n            ],\n            lambda a: a.headline\n        )\n\n    def test_get_author_m2m_relation(self):\n        self.assertQuerysetEqual(\n            self.article.authors.filter(last_name='Jones'), [\n                \"Peter Jones\"\n            ],\n            str\n        )\n\n    def test_author_querying(self):\n        self.assertQuerysetEqual(\n            Author.objects.all().order_by('last_name'),\n            ['<Author: Peter Jones>', '<Author: John Smith>']\n        )\n\n    def test_author_filtering(self):\n        self.assertQuerysetEqual(\n            Author.objects.filter(first_name__exact='John'),\n            ['<Author: John Smith>']\n        )\n\n    def test_author_get(self):\n        self.assertEqual(self.a1, Author.objects.get(first_name__exact='John'))\n\n    def test_filter_on_nonexistent_field(self):\n        msg = (\n            \"Cannot resolve keyword 'firstname' into field. Choices are: \"\n            \"Author_ID, article, first_name, last_name, primary_set\"\n        )\n        with self.assertRaisesMessage(FieldError, msg):\n            Author.objects.filter(firstname__exact='John')\n\n    def test_author_get_attributes(self):\n        a = Author.objects.get(last_name__exact='Smith')\n        self.assertEqual('John', a.first_name)\n        self.assertEqual('Smith', a.last_name)\n        with self.assertRaisesMessage(AttributeError, \"'Author' object has no attribute 'firstname'\"):\n            getattr(a, 'firstname')\n\n        with self.assertRaisesMessage(AttributeError, \"'Author' object has no attribute 'last'\"):\n            getattr(a, 'last')\n\n    def test_m2m_table(self):\n        self.assertQuerysetEqual(\n            self.article.authors.all().order_by('last_name'),\n            ['<Author: Peter Jones>', '<Author: John Smith>']\n        )\n        self.assertQuerysetEqual(\n            self.a1.article_set.all(),\n            ['<Article: Django lets you build Web apps easily>']\n        )\n        self.assertQuerysetEqual(\n            self.article.authors.filter(last_name='Jones'),\n            ['<Author: Peter Jones>']\n        )\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "c7d12d3aa6a7e09eeb2ba34fb567deb2", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/custom_columns/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}