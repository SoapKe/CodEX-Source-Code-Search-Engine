{"author": "HelloZeroNet", "code": "import string\nimport random\nimport time\nimport json\nimport re\n\nfrom Config import config\nfrom Plugin import PluginManager\n\nif \"sessions\" not in locals().keys():  \n    sessions = {}\n\n\ndef showPasswordAdvice(password):\n    error_msgs = []\n    if not password or not isinstance(password, (str, unicode)):\n        error_msgs.append(\"You have enabled <b>UiPassword</b> plugin, but you forgot to set a password!\")\n    elif len(password) < 8:\n        error_msgs.append(\"You are using a very short UI password!\")\n    return error_msgs\n\n@PluginManager.registerTo(\"UiRequest\")\nclass UiRequestPlugin(object):\n    sessions = sessions\n    last_cleanup = time.time()\n\n    def route(self, path):\n        \n        if config.ui_restrict and self.env['REMOTE_ADDR'] not in config.ui_restrict:\n            return self.error403(details=False)\n        if path.endswith(\"favicon.ico\"):\n            return self.actionFile(\"src/Ui/media/img/favicon.ico\")\n        else:\n            if config.ui_password:\n                if time.time() - self.last_cleanup > 60 * 60:  \n                    self.cleanup()\n                \n                session_id = self.getCookies().get(\"session_id\")\n                if session_id not in self.sessions:  \n                    return self.actionLogin()\n            return super(UiRequestPlugin, self).route(path)\n\n    \n    def actionLogin(self):\n        template = open(\"plugins/UiPassword/login.html\").read()\n        self.sendHeader()\n        posted = self.getPosted()\n        if posted:  \n            if self.checkPassword(posted.get(\"password\")):\n                \n                session_id = self.randomString(26)\n                self.sessions[session_id] = {\n                    \"added\": time.time(),\n                    \"keep\": posted.get(\"keep\")\n                }\n\n                \n                url = self.env.get(\"HTTP_REFERER\", \"\")\n                if not url or re.sub(\"\\?.*\", \"\", url).endswith(\"/Login\"):\n                    url = \"/\" + config.homepage\n                cookie_header = ('Set-Cookie', \"session_id=%s;path=/;max-age=2592000;\" % session_id)  \n                self.start_response('301 Redirect', [('Location', url), cookie_header])\n                yield \"Redirecting...\"\n\n            else:\n                \n                template = template.replace(\"{result}\", \"bad_password\")\n        yield template\n\n    def checkPassword(self, password):\n        return password == config.ui_password\n\n    def randomString(self, nchars):\n        return ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(nchars))\n\n    @classmethod\n    def cleanup(cls):\n        cls.last_cleanup = time.time()\n        for session_id, session in cls.sessions.items():\n            if session[\"keep\"] and time.time() - session[\"added\"] > 60 * 60 * 24 * 60:  \n                del(cls.sessions[session_id])\n            elif not session[\"keep\"] and time.time() - session[\"added\"] > 60 * 60 * 24:  \n                del(cls.sessions[session_id])\n\n    \n    def actionSessions(self):\n        self.sendHeader()\n        yield \"<pre>\"\n        yield json.dumps(self.sessions, indent=4)\n\n    \n    def actionLogout(self):\n        \n        session_id = self.getCookies().get(\"session_id\")\n        if not self.env.get(\"HTTP_REFERER\") or session_id == self.get.get(\"session_id\"):\n            if session_id in self.sessions:\n                del self.sessions[session_id]\n            self.start_response('301 Redirect', [\n                ('Location', \"/\"),\n                ('Set-Cookie', \"session_id=deleted; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\")\n            ])\n            yield \"Redirecting...\"\n        else:\n            self.sendHeader()\n            yield \"Error: Invalid session id\"\n\n\n\n@PluginManager.registerTo(\"ConfigPlugin\")\nclass ConfigPlugin(object):\n    def createArguments(self):\n        group = self.parser.add_argument_group(\"UiPassword plugin\")\n        group.add_argument('--ui_password', help='Password to access UiServer', default=None, metavar=\"password\")\n\n        return super(ConfigPlugin, self).createArguments()\n\n\nfrom Translate import translate as lang\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    def actionUiLogout(self, to):\n        permissions = self.getPermissions(to)\n        if \"ADMIN\" not in permissions:\n            return self.response(to, \"You don't have permission to run this command\")\n\n        session_id = self.request.getCookies().get(\"session_id\", \"\")\n        message = \"<script>document.location.href = '/Logout?session_id=%s'</script>\" % session_id\n        self.cmd(\"notification\", [\"done\", message])\n\n    def addHomepageNotifications(self):\n        error_msgs = showPasswordAdvice(config.ui_password)\n        for msg in error_msgs:\n            self.site.notifications.append([\"error\", lang[msg]])\n\n        return super(UiWebsocketPlugin, self).addHomepageNotifications()\n", "comments": "  to keep sessions module reloads    restict ui access ip    cleanup expired sessions every hour    validate session    invalid session id  display login    action  login    validate http posted data    valid password  create session    redirect homepage referer    max age   30 days    invalid password  show login form    max 60days keep sessions    max 24h non keep sessions    action  display sessions    action  logout    session id passed get parameter called without referer avoid remote logout ", "content": "import string\nimport random\nimport time\nimport json\nimport re\n\nfrom Config import config\nfrom Plugin import PluginManager\n\nif \"sessions\" not in locals().keys():  # To keep sessions between module reloads\n    sessions = {}\n\n\ndef showPasswordAdvice(password):\n    error_msgs = []\n    if not password or not isinstance(password, (str, unicode)):\n        error_msgs.append(\"You have enabled <b>UiPassword</b> plugin, but you forgot to set a password!\")\n    elif len(password) < 8:\n        error_msgs.append(\"You are using a very short UI password!\")\n    return error_msgs\n\n@PluginManager.registerTo(\"UiRequest\")\nclass UiRequestPlugin(object):\n    sessions = sessions\n    last_cleanup = time.time()\n\n    def route(self, path):\n        # Restict Ui access by ip\n        if config.ui_restrict and self.env['REMOTE_ADDR'] not in config.ui_restrict:\n            return self.error403(details=False)\n        if path.endswith(\"favicon.ico\"):\n            return self.actionFile(\"src/Ui/media/img/favicon.ico\")\n        else:\n            if config.ui_password:\n                if time.time() - self.last_cleanup > 60 * 60:  # Cleanup expired sessions every hour\n                    self.cleanup()\n                # Validate session\n                session_id = self.getCookies().get(\"session_id\")\n                if session_id not in self.sessions:  # Invalid session id, display login\n                    return self.actionLogin()\n            return super(UiRequestPlugin, self).route(path)\n\n    # Action: Login\n    def actionLogin(self):\n        template = open(\"plugins/UiPassword/login.html\").read()\n        self.sendHeader()\n        posted = self.getPosted()\n        if posted:  # Validate http posted data\n            if self.checkPassword(posted.get(\"password\")):\n                # Valid password, create session\n                session_id = self.randomString(26)\n                self.sessions[session_id] = {\n                    \"added\": time.time(),\n                    \"keep\": posted.get(\"keep\")\n                }\n\n                # Redirect to homepage or referer\n                url = self.env.get(\"HTTP_REFERER\", \"\")\n                if not url or re.sub(\"\\?.*\", \"\", url).endswith(\"/Login\"):\n                    url = \"/\" + config.homepage\n                cookie_header = ('Set-Cookie', \"session_id=%s;path=/;max-age=2592000;\" % session_id)  # Max age = 30 days\n                self.start_response('301 Redirect', [('Location', url), cookie_header])\n                yield \"Redirecting...\"\n\n            else:\n                # Invalid password, show login form again\n                template = template.replace(\"{result}\", \"bad_password\")\n        yield template\n\n    def checkPassword(self, password):\n        return password == config.ui_password\n\n    def randomString(self, nchars):\n        return ''.join(random.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(nchars))\n\n    @classmethod\n    def cleanup(cls):\n        cls.last_cleanup = time.time()\n        for session_id, session in cls.sessions.items():\n            if session[\"keep\"] and time.time() - session[\"added\"] > 60 * 60 * 24 * 60:  # Max 60days for keep sessions\n                del(cls.sessions[session_id])\n            elif not session[\"keep\"] and time.time() - session[\"added\"] > 60 * 60 * 24:  # Max 24h for non-keep sessions\n                del(cls.sessions[session_id])\n\n    # Action: Display sessions\n    def actionSessions(self):\n        self.sendHeader()\n        yield \"<pre>\"\n        yield json.dumps(self.sessions, indent=4)\n\n    # Action: Logout\n    def actionLogout(self):\n        # Session id has to passed as get parameter or called without referer to avoid remote logout\n        session_id = self.getCookies().get(\"session_id\")\n        if not self.env.get(\"HTTP_REFERER\") or session_id == self.get.get(\"session_id\"):\n            if session_id in self.sessions:\n                del self.sessions[session_id]\n            self.start_response('301 Redirect', [\n                ('Location', \"/\"),\n                ('Set-Cookie', \"session_id=deleted; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT\")\n            ])\n            yield \"Redirecting...\"\n        else:\n            self.sendHeader()\n            yield \"Error: Invalid session id\"\n\n\n\n@PluginManager.registerTo(\"ConfigPlugin\")\nclass ConfigPlugin(object):\n    def createArguments(self):\n        group = self.parser.add_argument_group(\"UiPassword plugin\")\n        group.add_argument('--ui_password', help='Password to access UiServer', default=None, metavar=\"password\")\n\n        return super(ConfigPlugin, self).createArguments()\n\n\nfrom Translate import translate as lang\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    def actionUiLogout(self, to):\n        permissions = self.getPermissions(to)\n        if \"ADMIN\" not in permissions:\n            return self.response(to, \"You don't have permission to run this command\")\n\n        session_id = self.request.getCookies().get(\"session_id\", \"\")\n        message = \"<script>document.location.href = '/Logout?session_id=%s'</script>\" % session_id\n        self.cmd(\"notification\", [\"done\", message])\n\n    def addHomepageNotifications(self):\n        error_msgs = showPasswordAdvice(config.ui_password)\n        for msg in error_msgs:\n            self.site.notifications.append([\"error\", lang[msg]])\n\n        return super(UiWebsocketPlugin, self).addHomepageNotifications()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "UiPasswordPlugin.py", "id": "4fb2d8427b7977ddc2dabf04abe1bec3", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/disabled-UiPassword/UiPasswordPlugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}