{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom lxml import etree\n\nfrom odoo import api, fields, models, _\nfrom odoo.osv.orm import setup_modifiers\n\n\nclass AssetModify(models.TransientModel):\n    _name = 'asset.modify'\n    _description = 'Modify Asset'\n\n    name = fields.Text(string='Reason', required=True)\n    method_number = fields.Integer(string='Number of Depreciations', required=True)\n    method_period = fields.Integer(string='Period Length')\n    method_end = fields.Date(string='Ending date')\n    asset_method_time = fields.Char(compute='_get_asset_method_time', string='Asset Method Time', readonly=True)\n\n    @api.one\n    def _get_asset_method_time(self):\n        if self.env.context.get('active_id'):\n            asset = self.env['account.asset.asset'].browse(self.env.context.get('active_id'))\n            self.asset_method_time = asset.method_time\n\n    @api.model\n    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):\n        result = super(AssetModify, self).fields_view_get(view_id, view_type, toolbar=toolbar, submenu=submenu)\n        asset_id = self.env.context.get('active_id')\n        active_model = self.env.context.get('active_model')\n        if active_model == 'account.asset.asset' and asset_id:\n            asset = self.env['account.asset.asset'].browse(asset_id)\n            doc = etree.XML(result['arch'])\n            if asset.method_time == 'number' and doc.xpath(\"//field[@name='method_end']\"):\n                node = doc.xpath(\"//field[@name='method_end']\")[0]\n                node.set('invisible', '1')\n                setup_modifiers(node, result['fields']['method_end'])\n            elif asset.method_time == 'end' and doc.xpath(\"//field[@name='method_number']\"):\n                node = doc.xpath(\"//field[@name='method_number']\")[0]\n                node.set('invisible', '1')\n                setup_modifiers(node, result['fields']['method_number'])\n            result['arch'] = etree.tostring(doc, encoding='unicode')\n        return result\n\n    @api.model\n    def default_get(self, fields):\n        res = super(AssetModify, self).default_get(fields)\n        asset_id = self.env.context.get('active_id')\n        asset = self.env['account.asset.asset'].browse(asset_id)\n        if 'name' in fields:\n            res.update({'name': asset.name})\n        if 'method_number' in fields and asset.method_time == 'number':\n            res.update({'method_number': asset.method_number})\n        if 'method_period' in fields:\n            res.update({'method_period': asset.method_period})\n        if 'method_end' in fields and asset.method_time == 'end':\n            res.update({'method_end': asset.method_end})\n        if self.env.context.get('active_id'):\n            active_asset = self.env['account.asset.asset'].browse(self.env.context.get('active_id'))\n            res['asset_method_time'] = active_asset.method_time\n        return res\n\n    @api.multi\n    def modify(self):\n        \n        asset_id = self.env.context.get('active_id', False)\n        asset = self.env['account.asset.asset'].browse(asset_id)\n        old_values = {\n            'method_number': asset.method_number,\n            'method_period': asset.method_period,\n            'method_end': asset.method_end,\n        }\n        asset_vals = {\n            'method_number': self.method_number,\n            'method_period': self.method_period,\n            'method_end': self.method_end,\n        }\n        asset.write(asset_vals)\n        asset.compute_depreciation_board()\n        tracked_fields = self.env['account.asset.asset'].fields_get(['method_number', 'method_period', 'method_end'])\n        changes, tracking_value_ids = asset._message_track(tracked_fields, old_values)\n        if changes:\n            asset.message_post(subject=_('Depreciation board modified'), body=self.name, tracking_value_ids=tracking_value_ids)\n        return {'type': 'ir.actions.act_window_close'}\n", "comments": "    modifies duration asset calculating depreciation         maintains history old values  chatter                     coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom lxml import etree\n\nfrom odoo import api, fields, models, _\nfrom odoo.osv.orm import setup_modifiers\n\n\nclass AssetModify(models.TransientModel):\n    _name = 'asset.modify'\n    _description = 'Modify Asset'\n\n    name = fields.Text(string='Reason', required=True)\n    method_number = fields.Integer(string='Number of Depreciations', required=True)\n    method_period = fields.Integer(string='Period Length')\n    method_end = fields.Date(string='Ending date')\n    asset_method_time = fields.Char(compute='_get_asset_method_time', string='Asset Method Time', readonly=True)\n\n    @api.one\n    def _get_asset_method_time(self):\n        if self.env.context.get('active_id'):\n            asset = self.env['account.asset.asset'].browse(self.env.context.get('active_id'))\n            self.asset_method_time = asset.method_time\n\n    @api.model\n    def fields_view_get(self, view_id=None, view_type='form', toolbar=False, submenu=False):\n        result = super(AssetModify, self).fields_view_get(view_id, view_type, toolbar=toolbar, submenu=submenu)\n        asset_id = self.env.context.get('active_id')\n        active_model = self.env.context.get('active_model')\n        if active_model == 'account.asset.asset' and asset_id:\n            asset = self.env['account.asset.asset'].browse(asset_id)\n            doc = etree.XML(result['arch'])\n            if asset.method_time == 'number' and doc.xpath(\"//field[@name='method_end']\"):\n                node = doc.xpath(\"//field[@name='method_end']\")[0]\n                node.set('invisible', '1')\n                setup_modifiers(node, result['fields']['method_end'])\n            elif asset.method_time == 'end' and doc.xpath(\"//field[@name='method_number']\"):\n                node = doc.xpath(\"//field[@name='method_number']\")[0]\n                node.set('invisible', '1')\n                setup_modifiers(node, result['fields']['method_number'])\n            result['arch'] = etree.tostring(doc, encoding='unicode')\n        return result\n\n    @api.model\n    def default_get(self, fields):\n        res = super(AssetModify, self).default_get(fields)\n        asset_id = self.env.context.get('active_id')\n        asset = self.env['account.asset.asset'].browse(asset_id)\n        if 'name' in fields:\n            res.update({'name': asset.name})\n        if 'method_number' in fields and asset.method_time == 'number':\n            res.update({'method_number': asset.method_number})\n        if 'method_period' in fields:\n            res.update({'method_period': asset.method_period})\n        if 'method_end' in fields and asset.method_time == 'end':\n            res.update({'method_end': asset.method_end})\n        if self.env.context.get('active_id'):\n            active_asset = self.env['account.asset.asset'].browse(self.env.context.get('active_id'))\n            res['asset_method_time'] = active_asset.method_time\n        return res\n\n    @api.multi\n    def modify(self):\n        \"\"\" Modifies the duration of asset for calculating depreciation\n        and maintains the history of old values, in the chatter.\n        \"\"\"\n        asset_id = self.env.context.get('active_id', False)\n        asset = self.env['account.asset.asset'].browse(asset_id)\n        old_values = {\n            'method_number': asset.method_number,\n            'method_period': asset.method_period,\n            'method_end': asset.method_end,\n        }\n        asset_vals = {\n            'method_number': self.method_number,\n            'method_period': self.method_period,\n            'method_end': self.method_end,\n        }\n        asset.write(asset_vals)\n        asset.compute_depreciation_board()\n        tracked_fields = self.env['account.asset.asset'].fields_get(['method_number', 'method_period', 'method_end'])\n        changes, tracking_value_ids = asset._message_track(tracked_fields, old_values)\n        if changes:\n            asset.message_post(subject=_('Depreciation board modified'), body=self.name, tracking_value_ids=tracking_value_ids)\n        return {'type': 'ir.actions.act_window_close'}\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "asset_modify.py", "id": "646f33b7bd55744ccd2be7de452ed7f0", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account_asset/wizard/asset_modify.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}