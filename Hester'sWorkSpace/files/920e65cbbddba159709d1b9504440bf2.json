{"author": "django", "code": "import warnings\nfrom datetime import datetime\n\nfrom django.test import TestCase\n\nfrom .models import Article, IndexErrorArticle, Person\n\n\nclass EarliestOrLatestTests(TestCase):\n    \"\"\"Tests for the earliest() and latest() objects methods\"\"\"\n\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        cls._article_get_latest_by = Article._meta.get_latest_by\n\n    def tearDown(self):\n        Article._meta.get_latest_by = self._article_get_latest_by\n\n    def test_earliest(self):\n        # Because no Articles exist yet, earliest() raises ArticleDoesNotExist.\n        with self.assertRaises(Article.DoesNotExist):\n            Article.objects.earliest()\n\n        a1 = Article.objects.create(\n            headline=\"Article 1\", pub_date=datetime(2005, 7, 26),\n            expire_date=datetime(2005, 9, 1)\n        )\n        a2 = Article.objects.create(\n            headline=\"Article 2\", pub_date=datetime(2005, 7, 27),\n            expire_date=datetime(2005, 7, 28)\n        )\n        a3 = Article.objects.create(\n            headline=\"Article 3\", pub_date=datetime(2005, 7, 28),\n            expire_date=datetime(2005, 8, 27)\n        )\n        a4 = Article.objects.create(\n            headline=\"Article 4\", pub_date=datetime(2005, 7, 28),\n            expire_date=datetime(2005, 7, 30)\n        )\n\n        \n        self.assertEqual(Article.objects.earliest(), a1)\n        that matches certain filters.\n        self.assertEqual(\n            Article.objects.filter(pub_date__gt=datetime(2005, 7, 26)).earliest(),\n            a2\n        )\n\n        # Pass a custom field name to earliest() to change the field that's used\n        \n        self.assertEqual(Article.objects.earliest('expire_date'), a2)\n        self.assertEqual(Article.objects.filter(\n            pub_date__gt=datetime(2005, 7, 26)).earliest('expire_date'), a2)\n\n        # earliest() overrides any other ordering specified on the query.\n        \n        self.assertEqual(Article.objects.order_by('id').earliest(), a1)\n\n        \n        \n        Article.objects.model._meta.get_latest_by = None\n        with self.assertRaisesMessage(\n            ValueError,\n            \"earliest() and latest() require either fields as positional \"\n            \"arguments or 'get_latest_by' in the model's Meta.\"\n        ):\n            Article.objects.earliest()\n\n        \n        self.assertEqual(\n            Article.objects.filter(pub_date=datetime(2005, 7, 28)).earliest('pub_date', 'expire_date'),\n            a4,\n        )\n        \n        self.assertEqual(\n            Article.objects.filter(pub_date=datetime(2005, 7, 28)).earliest('pub_date', '-expire_date'),\n            a3,\n        )\n\n        \n        Article.objects.model._meta.get_latest_by = ('pub_date', 'expire_date')\n        self.assertEqual(Article.objects.filter(pub_date=datetime(2005, 7, 28)).earliest(), a4)\n\n    def test_earliest_fields_and_field_name(self):\n        msg = 'Cannot use both positional arguments and the field_name keyword argument.'\n        with self.assertRaisesMessage(ValueError, msg):\n            Article.objects.earliest('pub_date', field_name='expire_date')\n\n    def test_latest(self):\n        # Because no Articles exist yet, latest() raises ArticleDoesNotExist.\n        with self.assertRaises(Article.DoesNotExist):\n            Article.objects.latest()\n\n        a1 = Article.objects.create(\n            headline=\"Article 1\", pub_date=datetime(2005, 7, 26),\n            expire_date=datetime(2005, 9, 1)\n        )\n        a2 = Article.objects.create(\n            headline=\"Article 2\", pub_date=datetime(2005, 7, 27),\n            expire_date=datetime(2005, 7, 28)\n        )\n        a3 = Article.objects.create(\n            headline=\"Article 3\", pub_date=datetime(2005, 7, 27),\n            expire_date=datetime(2005, 8, 27)\n        )\n        a4 = Article.objects.create(\n            headline=\"Article 4\", pub_date=datetime(2005, 7, 28),\n            expire_date=datetime(2005, 7, 30)\n        )\n\n        \n        self.assertEqual(Article.objects.latest(), a4)\n        that matches certain filters.\n        self.assertEqual(\n            Article.objects.filter(pub_date__lt=datetime(2005, 7, 27)).latest(),\n            a1\n        )\n\n        # Pass a custom field name to latest() to change the field that's used\n        \n        self.assertEqual(Article.objects.latest('expire_date'), a1)\n        self.assertEqual(\n            Article.objects.filter(pub_date__gt=datetime(2005, 7, 26)).latest('expire_date'),\n            a3,\n        )\n\n        # latest() overrides any other ordering specified on the query (#11283).\n        self.assertEqual(Article.objects.order_by('id').latest(), a4)\n\n        \n        Article.objects.model._meta.get_latest_by = None\n        with self.assertRaisesMessage(\n            ValueError,\n            \"earliest() and latest() require either fields as positional \"\n            \"arguments or 'get_latest_by' in the model's Meta.\"\n        ):\n            Article.objects.latest()\n\n        \n        self.assertEqual(Article.objects.filter(pub_date=datetime(2005, 7, 27)).latest('pub_date', 'expire_date'), a3)\n        \n        self.assertEqual(\n            Article.objects.filter(pub_date=datetime(2005, 7, 27)).latest('pub_date', '-expire_date'),\n            a2,\n        )\n\n        \n        Article.objects.model._meta.get_latest_by = ('pub_date', 'expire_date')\n        self.assertEqual(Article.objects.filter(pub_date=datetime(2005, 7, 27)).latest(), a3)\n\n    def test_latest_fields_and_field_name(self):\n        msg = 'Cannot use both positional arguments and the field_name keyword argument.'\n        with self.assertRaisesMessage(ValueError, msg):\n            Article.objects.latest('pub_date', field_name='expire_date')\n\n    def test_latest_manual(self):\n        # You can still use latest() with a model that doesn't have\n        \n        Person.objects.create(name=\"Ralph\", birthday=datetime(1950, 1, 1))\n        p2 = Person.objects.create(name=\"Stephanie\", birthday=datetime(1960, 2, 3))\n        msg = (\n            \"earliest() and latest() require either fields as positional arguments \"\n            \"or 'get_latest_by' in the model's Meta.\"\n        )\n        with self.assertRaisesMessage(ValueError, msg):\n            Person.objects.latest()\n        self.assertEqual(Person.objects.latest(\"birthday\"), p2)\n\n    def test_field_name_kwarg_deprecation(self):\n        Person.objects.create(name='Deprecator', birthday=datetime(1950, 1, 1))\n        with warnings.catch_warnings(record=True) as warns:\n            warnings.simplefilter('always')\n            Person.objects.latest(field_name='birthday')\n\n        self.assertEqual(len(warns), 1)\n        self.assertEqual(\n            str(warns[0].message),\n            'The field_name keyword argument to earliest() and latest() '\n            'is deprecated in favor of passing positional arguments.',\n        )\n\n\nclass TestFirstLast(TestCase):\n\n    def test_first(self):\n        p1 = Person.objects.create(name=\"Bob\", birthday=datetime(1950, 1, 1))\n        p2 = Person.objects.create(name=\"Alice\", birthday=datetime(1961, 2, 3))\n        self.assertEqual(Person.objects.first(), p1)\n        self.assertEqual(Person.objects.order_by('name').first(), p2)\n        self.assertEqual(Person.objects.filter(birthday__lte=datetime(1955, 1, 1)).first(), p1)\n        self.assertIsNone(Person.objects.filter(birthday__lte=datetime(1940, 1, 1)).first())\n\n    def test_last(self):\n        p1 = Person.objects.create(name=\"Alice\", birthday=datetime(1950, 1, 1))\n        p2 = Person.objects.create(name=\"Bob\", birthday=datetime(1960, 2, 3))\n        \n        self.assertEqual(Person.objects.last(), p2)\n        self.assertEqual(Person.objects.order_by('-name').last(), p1)\n        self.assertEqual(Person.objects.filter(birthday__lte=datetime(1955, 1, 1)).last(), p1)\n        self.assertIsNone(Person.objects.filter(birthday__lte=datetime(1940, 1, 1)).last())\n\n    def test_index_error_not_suppressed(self):\n        \"\"\"\n        \n        shouldn't be suppressed.\n        \"\"\"\n        def check():\n            \n            \n            with self.assertRaises(IndexError):\n                IndexErrorArticle.objects.all()[:10:2]\n            with self.assertRaises(IndexError):\n                IndexErrorArticle.objects.all().first()\n            with self.assertRaises(IndexError):\n                IndexErrorArticle.objects.all().last()\n\n        check()\n\n        \n        IndexErrorArticle.objects.create(\n            headline=\"Article 1\", pub_date=datetime(2005, 7, 26),\n            expire_date=datetime(2005, 9, 1)\n        )\n        check()\n", "comments": "   tests earliest() latest() objects methods          classmethod     def setupclass(cls)          super() setupclass()         cls  article get latest   article  meta get latest      def teardown(self)          article  meta get latest   self  article get latest      def test earliest(self)            because articles exist yet  earliest() raises articledoesnotexist          self assertraises(article doesnotexist)              article objects earliest()          a1   article objects create(             headline  article 1   pub date datetime(2005  7  26)              expire date datetime(2005  9  1)         )         a2   article objects create(             headline  article 2   pub date datetime(2005  7  27)              expire date datetime(2005  7  28)         )         a3   article objects create(             headline  article 3   pub date datetime(2005  7  28)              expire date datetime(2005  8  27)         )         a4   article objects create(             headline  article 4   pub date datetime(2005  7  28)              expire date datetime(2005  7  30)         )            get earliest article          self assertequal(article objects earliest()  a1)           get earliest article matches certain filters          self assertequal(             article objects filter(pub date  gt datetime(2005  7  26)) earliest()              a2         )            pass custom field name earliest() change field used           determine earliest object          self assertequal(article objects earliest( expire date )  a2)         self assertequal(article objects filter(             pub date  gt datetime(2005  7  26)) earliest( expire date )  a2)            earliest() overrides ordering specified query            refs  11283          self assertequal(article objects order by( id ) earliest()  a1)            error raised user forgot add get latest           model meta         article objects model  meta get latest   none         self assertraisesmessage(             valueerror               earliest() latest() require either fields positional                arguments  get latest  model meta           )              article objects earliest()            earliest publication date  earliest expire date          self assertequal(             article objects filter(pub date datetime(2005  7  28)) earliest( pub date    expire date )              a4          )           earliest publication date  latest expire date          self assertequal(             article objects filter(pub date datetime(2005  7  28)) earliest( pub date     expire date )              a3          )            meta get latest may tuple          article objects model  meta get latest   ( pub date    expire date )         self assertequal(article objects filter(pub date datetime(2005  7  28)) earliest()  a4)      def test earliest fields field name(self)          msg    cannot use positional arguments field name keyword argument           self assertraisesmessage(valueerror  msg)              article objects earliest( pub date   field name  expire date )      def test latest(self)            because articles exist yet  latest() raises articledoesnotexist          self assertraises(article doesnotexist)              article objects latest()          a1   article objects create(             headline  article 1   pub date datetime(2005  7  26)              expire date datetime(2005  9  1)         )         a2   article objects create(             headline  article 2   pub date datetime(2005  7  27)              expire date datetime(2005  7  28)         )         a3   article objects create(             headline  article 3   pub date datetime(2005  7  27)              expire date datetime(2005  8  27)         )         a4   article objects create(             headline  article 4   pub date datetime(2005  7  28)              expire date datetime(2005  7  30)         )            get latest article          self assertequal(article objects latest()  a4)           get latest article matches certain filters          self assertequal(             article objects filter(pub date  lt datetime(2005  7  27)) latest()              a1         )            pass custom field name latest() change field used           determine latest object          self assertequal(article objects latest( expire date )  a1)         self assertequal(             article objects filter(pub date  gt datetime(2005  7  26)) latest( expire date )              a3          )            latest() overrides ordering specified query ( 11283)          self assertequal(article objects order by( id ) latest()  a4)            error raised get latest model meta          article objects model  meta get latest   none         self assertraisesmessage(             valueerror               earliest() latest() require either fields positional                arguments  get latest  model meta           )              article objects latest()            latest publication date  latest expire date          self assertequal(article objects filter(pub date datetime(2005  7  27)) latest( pub date    expire date )  a3)           latest publication date  earliest expire date          self assertequal(             article objects filter(pub date datetime(2005  7  27)) latest( pub date     expire date )              a2          )            meta get latest may tuple          article objects model  meta get latest   ( pub date    expire date )         self assertequal(article objects filter(pub date datetime(2005  7  27)) latest()  a3)      def test latest fields field name(self)          msg    cannot use positional arguments field name keyword argument           self assertraisesmessage(valueerror  msg)              article objects latest( pub date   field name  expire date )      def test latest manual(self)            you still use latest() model            get latest  set    pass field name manually          person objects create(name  ralph   birthday datetime(1950  1  1))         p2   person objects create(name  stephanie   birthday datetime(1960  2  3))         msg   (              earliest() latest() require either fields positional arguments                 get latest  model meta           )         self assertraisesmessage(valueerror  msg)              person objects latest()         self assertequal(person objects latest( birthday )  p2)      def test field name kwarg deprecation(self)          person objects create(name  deprecator   birthday datetime(1950  1  1))         warnings catch warnings(record true) warns              warnings simplefilter( always )             person objects latest(field name  birthday )          self assertequal(len(warns)  1)         self assertequal(             str(warns 0  message)               the field name keyword argument earliest() latest()                deprecated favor passing positional arguments            )   class testfirstlast(testcase)       def test first(self)          p1   person objects create(name  bob   birthday datetime(1950  1  1))         p2   person objects create(name  alice   birthday datetime(1961  2  3))         self assertequal(person objects first()  p1)         self assertequal(person objects order by( name ) first()  p2)         self assertequal(person objects filter(birthday  lte datetime(1955  1  1)) first()  p1)         self assertisnone(person objects filter(birthday  lte datetime(1940  1  1)) first())      def test last(self)          p1   person objects create(name  alice   birthday datetime(1950  1  1))         p2   person objects create(name  bob   birthday datetime(1960  2  3))           note  default pk ordering          self assertequal(person objects last()  p2)         self assertequal(person objects order by(  name ) last()  p1)         self assertequal(person objects filter(birthday  lte datetime(1955  1  1)) last()  p1)         self assertisnone(person objects filter(birthday  lte datetime(1940  1  1)) last())      def test index error suppressed(self)                       23555    unexpected indexerror exceptions queryset iteration         suppressed                 because articles exist yet  earliest() raises articledoesnotexist     get earliest article     get earliest article matches certain filters     pass custom field name earliest() change field used    determine earliest object     earliest() overrides ordering specified query     refs  11283     error raised user forgot add get latest    model meta    earliest publication date  earliest expire date     earliest publication date  latest expire date     meta get latest may tuple     because articles exist yet  latest() raises articledoesnotexist     get latest article     get latest article matches certain filters     pass custom field name latest() change field used    determine latest object     latest() overrides ordering specified query ( 11283)     error raised get latest model meta     latest publication date  latest expire date     latest publication date  earliest expire date     meta get latest may tuple     you still use latest() model     get latest  set    pass field name manually     note  default pk ordering    23555    unexpected indexerror exceptions queryset iteration    we know broken   iter   method  queryset    always raise exception     and matter records db  ", "content": "import warnings\nfrom datetime import datetime\n\nfrom django.test import TestCase\n\nfrom .models import Article, IndexErrorArticle, Person\n\n\nclass EarliestOrLatestTests(TestCase):\n    \"\"\"Tests for the earliest() and latest() objects methods\"\"\"\n\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        cls._article_get_latest_by = Article._meta.get_latest_by\n\n    def tearDown(self):\n        Article._meta.get_latest_by = self._article_get_latest_by\n\n    def test_earliest(self):\n        # Because no Articles exist yet, earliest() raises ArticleDoesNotExist.\n        with self.assertRaises(Article.DoesNotExist):\n            Article.objects.earliest()\n\n        a1 = Article.objects.create(\n            headline=\"Article 1\", pub_date=datetime(2005, 7, 26),\n            expire_date=datetime(2005, 9, 1)\n        )\n        a2 = Article.objects.create(\n            headline=\"Article 2\", pub_date=datetime(2005, 7, 27),\n            expire_date=datetime(2005, 7, 28)\n        )\n        a3 = Article.objects.create(\n            headline=\"Article 3\", pub_date=datetime(2005, 7, 28),\n            expire_date=datetime(2005, 8, 27)\n        )\n        a4 = Article.objects.create(\n            headline=\"Article 4\", pub_date=datetime(2005, 7, 28),\n            expire_date=datetime(2005, 7, 30)\n        )\n\n        # Get the earliest Article.\n        self.assertEqual(Article.objects.earliest(), a1)\n        # Get the earliest Article that matches certain filters.\n        self.assertEqual(\n            Article.objects.filter(pub_date__gt=datetime(2005, 7, 26)).earliest(),\n            a2\n        )\n\n        # Pass a custom field name to earliest() to change the field that's used\n        # to determine the earliest object.\n        self.assertEqual(Article.objects.earliest('expire_date'), a2)\n        self.assertEqual(Article.objects.filter(\n            pub_date__gt=datetime(2005, 7, 26)).earliest('expire_date'), a2)\n\n        # earliest() overrides any other ordering specified on the query.\n        # Refs #11283.\n        self.assertEqual(Article.objects.order_by('id').earliest(), a1)\n\n        # Error is raised if the user forgot to add a get_latest_by\n        # in the Model.Meta\n        Article.objects.model._meta.get_latest_by = None\n        with self.assertRaisesMessage(\n            ValueError,\n            \"earliest() and latest() require either fields as positional \"\n            \"arguments or 'get_latest_by' in the model's Meta.\"\n        ):\n            Article.objects.earliest()\n\n        # Earliest publication date, earliest expire date.\n        self.assertEqual(\n            Article.objects.filter(pub_date=datetime(2005, 7, 28)).earliest('pub_date', 'expire_date'),\n            a4,\n        )\n        # Earliest publication date, latest expire date.\n        self.assertEqual(\n            Article.objects.filter(pub_date=datetime(2005, 7, 28)).earliest('pub_date', '-expire_date'),\n            a3,\n        )\n\n        # Meta.get_latest_by may be a tuple.\n        Article.objects.model._meta.get_latest_by = ('pub_date', 'expire_date')\n        self.assertEqual(Article.objects.filter(pub_date=datetime(2005, 7, 28)).earliest(), a4)\n\n    def test_earliest_fields_and_field_name(self):\n        msg = 'Cannot use both positional arguments and the field_name keyword argument.'\n        with self.assertRaisesMessage(ValueError, msg):\n            Article.objects.earliest('pub_date', field_name='expire_date')\n\n    def test_latest(self):\n        # Because no Articles exist yet, latest() raises ArticleDoesNotExist.\n        with self.assertRaises(Article.DoesNotExist):\n            Article.objects.latest()\n\n        a1 = Article.objects.create(\n            headline=\"Article 1\", pub_date=datetime(2005, 7, 26),\n            expire_date=datetime(2005, 9, 1)\n        )\n        a2 = Article.objects.create(\n            headline=\"Article 2\", pub_date=datetime(2005, 7, 27),\n            expire_date=datetime(2005, 7, 28)\n        )\n        a3 = Article.objects.create(\n            headline=\"Article 3\", pub_date=datetime(2005, 7, 27),\n            expire_date=datetime(2005, 8, 27)\n        )\n        a4 = Article.objects.create(\n            headline=\"Article 4\", pub_date=datetime(2005, 7, 28),\n            expire_date=datetime(2005, 7, 30)\n        )\n\n        # Get the latest Article.\n        self.assertEqual(Article.objects.latest(), a4)\n        # Get the latest Article that matches certain filters.\n        self.assertEqual(\n            Article.objects.filter(pub_date__lt=datetime(2005, 7, 27)).latest(),\n            a1\n        )\n\n        # Pass a custom field name to latest() to change the field that's used\n        # to determine the latest object.\n        self.assertEqual(Article.objects.latest('expire_date'), a1)\n        self.assertEqual(\n            Article.objects.filter(pub_date__gt=datetime(2005, 7, 26)).latest('expire_date'),\n            a3,\n        )\n\n        # latest() overrides any other ordering specified on the query (#11283).\n        self.assertEqual(Article.objects.order_by('id').latest(), a4)\n\n        # Error is raised if get_latest_by isn't in Model.Meta.\n        Article.objects.model._meta.get_latest_by = None\n        with self.assertRaisesMessage(\n            ValueError,\n            \"earliest() and latest() require either fields as positional \"\n            \"arguments or 'get_latest_by' in the model's Meta.\"\n        ):\n            Article.objects.latest()\n\n        # Latest publication date, latest expire date.\n        self.assertEqual(Article.objects.filter(pub_date=datetime(2005, 7, 27)).latest('pub_date', 'expire_date'), a3)\n        # Latest publication date, earliest expire date.\n        self.assertEqual(\n            Article.objects.filter(pub_date=datetime(2005, 7, 27)).latest('pub_date', '-expire_date'),\n            a2,\n        )\n\n        # Meta.get_latest_by may be a tuple.\n        Article.objects.model._meta.get_latest_by = ('pub_date', 'expire_date')\n        self.assertEqual(Article.objects.filter(pub_date=datetime(2005, 7, 27)).latest(), a3)\n\n    def test_latest_fields_and_field_name(self):\n        msg = 'Cannot use both positional arguments and the field_name keyword argument.'\n        with self.assertRaisesMessage(ValueError, msg):\n            Article.objects.latest('pub_date', field_name='expire_date')\n\n    def test_latest_manual(self):\n        # You can still use latest() with a model that doesn't have\n        # \"get_latest_by\" set -- just pass in the field name manually.\n        Person.objects.create(name=\"Ralph\", birthday=datetime(1950, 1, 1))\n        p2 = Person.objects.create(name=\"Stephanie\", birthday=datetime(1960, 2, 3))\n        msg = (\n            \"earliest() and latest() require either fields as positional arguments \"\n            \"or 'get_latest_by' in the model's Meta.\"\n        )\n        with self.assertRaisesMessage(ValueError, msg):\n            Person.objects.latest()\n        self.assertEqual(Person.objects.latest(\"birthday\"), p2)\n\n    def test_field_name_kwarg_deprecation(self):\n        Person.objects.create(name='Deprecator', birthday=datetime(1950, 1, 1))\n        with warnings.catch_warnings(record=True) as warns:\n            warnings.simplefilter('always')\n            Person.objects.latest(field_name='birthday')\n\n        self.assertEqual(len(warns), 1)\n        self.assertEqual(\n            str(warns[0].message),\n            'The field_name keyword argument to earliest() and latest() '\n            'is deprecated in favor of passing positional arguments.',\n        )\n\n\nclass TestFirstLast(TestCase):\n\n    def test_first(self):\n        p1 = Person.objects.create(name=\"Bob\", birthday=datetime(1950, 1, 1))\n        p2 = Person.objects.create(name=\"Alice\", birthday=datetime(1961, 2, 3))\n        self.assertEqual(Person.objects.first(), p1)\n        self.assertEqual(Person.objects.order_by('name').first(), p2)\n        self.assertEqual(Person.objects.filter(birthday__lte=datetime(1955, 1, 1)).first(), p1)\n        self.assertIsNone(Person.objects.filter(birthday__lte=datetime(1940, 1, 1)).first())\n\n    def test_last(self):\n        p1 = Person.objects.create(name=\"Alice\", birthday=datetime(1950, 1, 1))\n        p2 = Person.objects.create(name=\"Bob\", birthday=datetime(1960, 2, 3))\n        # Note: by default PK ordering.\n        self.assertEqual(Person.objects.last(), p2)\n        self.assertEqual(Person.objects.order_by('-name').last(), p1)\n        self.assertEqual(Person.objects.filter(birthday__lte=datetime(1955, 1, 1)).last(), p1)\n        self.assertIsNone(Person.objects.filter(birthday__lte=datetime(1940, 1, 1)).last())\n\n    def test_index_error_not_suppressed(self):\n        \"\"\"\n        #23555 -- Unexpected IndexError exceptions in QuerySet iteration\n        shouldn't be suppressed.\n        \"\"\"\n        def check():\n            # We know that we've broken the __iter__ method, so the queryset\n            # should always raise an exception.\n            with self.assertRaises(IndexError):\n                IndexErrorArticle.objects.all()[:10:2]\n            with self.assertRaises(IndexError):\n                IndexErrorArticle.objects.all().first()\n            with self.assertRaises(IndexError):\n                IndexErrorArticle.objects.all().last()\n\n        check()\n\n        # And it does not matter if there are any records in the DB.\n        IndexErrorArticle.objects.create(\n            headline=\"Article 1\", pub_date=datetime(2005, 7, 26),\n            expire_date=datetime(2005, 9, 1)\n        )\n        check()\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "920e65cbbddba159709d1b9504440bf2", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/get_earliest_or_latest/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}