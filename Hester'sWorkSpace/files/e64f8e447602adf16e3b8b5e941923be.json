{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    extract_attributes,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass EllenTubeBaseIE(InfoExtractor):\n    def _extract_data_config(self, webpage, video_id):\n        details = self._search_regex(\n            r'(<[^>]+\\bdata-component=([\"\\'])[Dd]etails.+?></div>)', webpage,\n            'details')\n        return self._parse_json(\n            extract_attributes(details)['data-config'], video_id)\n\n    def _extract_video(self, data, video_id):\n        title = data['title']\n\n        formats = []\n        duration = None\n        for entry in data.get('media'):\n            if entry.get('id') == 'm3u8':\n                formats = self._extract_m3u8_formats(\n                    entry['url'], video_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls')\n                duration = int_or_none(entry.get('duration'))\n                break\n        self._sort_formats(formats)\n\n        def get_insight(kind):\n            return int_or_none(try_get(\n                data, lambda x: x['insight']['%ss' % kind]))\n\n        return {\n            'extractor_key': EllenTubeIE.ie_key(),\n            'id': video_id,\n            'title': title,\n            'description': data.get('description'),\n            'duration': duration,\n            'thumbnail': data.get('thumbnail'),\n            'timestamp': float_or_none(data.get('publishTime'), scale=1000),\n            'view_count': get_insight('view'),\n            'like_count': get_insight('like'),\n            'formats': formats,\n        }\n\n\nclass EllenTubeIE(EllenTubeBaseIE):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'https://api-prod.ellentube.com/ellenapi/api/item/0822171c-3829-43bf-b99f-d77358ae75e3',\n        'md5': '2fabc277131bddafdd120e0fc0f974c9',\n        'info_dict': {\n            'id': '0822171c-3829-43bf-b99f-d77358ae75e3',\n            'ext': 'mp4',\n            'title': 'Ellen Meets Las Vegas Survivors Jesus Campos and Stephen Schuck',\n            'description': 'md5:76e3355e2242a78ad9e3858e5616923f',\n            'thumbnail': r're:^https?://.+?',\n            'duration': 514,\n            'timestamp': 1508505120,\n            'upload_date': '20171020',\n            'view_count': int,\n            'like_count': int,\n        }\n    }, {\n        'url': 'ellentube:734a3353-f697-4e79-9ca9-bfc3002dc1e0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        data = self._download_json(\n            'https://api-prod.ellentube.com/ellenapi/api/item/%s' % video_id,\n            video_id)\n        return self._extract_video(data, video_id)\n\n\nclass EllenTubeVideoIE(EllenTubeBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?ellentube\\.com/video/(?P<id>.+?)\\.html'\n    _TEST = {\n        'url': 'https://www.ellentube.com/video/ellen-meets-las-vegas-survivors-jesus-campos-and-stephen-schuck.html',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._extract_data_config(webpage, display_id)['id']\n        return self.url_result(\n            'ellentube:%s' % video_id, ie=EllenTubeIE.ie_key(),\n            video_id=video_id)\n\n\nclass EllenTubePlaylistIE(EllenTubeBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?ellentube\\.com/(?:episode|studios)/(?P<id>.+?)\\.html'\n    _TESTS = [{\n        'url': 'https://www.ellentube.com/episode/dax-shepard-jordan-fisher-haim.html',\n        'info_dict': {\n            'id': 'dax-shepard-jordan-fisher-haim',\n            'title': \"Dax Shepard, 'DWTS' Team Jordan Fisher & Lindsay Arnold, HAIM\",\n            'description': 'md5:bfc982194dabb3f4e325e43aa6b2e21c',\n        },\n        'playlist_count': 6,\n    }, {\n        'url': 'https://www.ellentube.com/studios/macey-goes-rving0.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        data = self._extract_data_config(webpage, display_id)['data']\n        feed = self._download_json(\n            'https://api-prod.ellentube.com/ellenapi/api/feed/?%s'\n            % data['filter'], display_id)\n        entries = [\n            self._extract_video(elem, elem['id'])\n            for elem in feed if elem.get('type') == 'VIDEO' and elem.get('id')]\n        return self.playlist_result(\n            entries, display_id, data.get('title'),\n            clean_html(data.get('description')))\n", "comments": "(?x)\n                        (?:\n                            ellentube:|\n                            https://api-prod\\.ellentube\\.com/ellenapi/api/item/\n                        )\n                        (?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})\n                    \n \n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    extract_attributes,\n    float_or_none,\n    int_or_none,\n    try_get,\n)\n\n\nclass EllenTubeBaseIE(InfoExtractor):\n    def _extract_data_config(self, webpage, video_id):\n        details = self._search_regex(\n            r'(<[^>]+\\bdata-component=([\"\\'])[Dd]etails.+?></div>)', webpage,\n            'details')\n        return self._parse_json(\n            extract_attributes(details)['data-config'], video_id)\n\n    def _extract_video(self, data, video_id):\n        title = data['title']\n\n        formats = []\n        duration = None\n        for entry in data.get('media'):\n            if entry.get('id') == 'm3u8':\n                formats = self._extract_m3u8_formats(\n                    entry['url'], video_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls')\n                duration = int_or_none(entry.get('duration'))\n                break\n        self._sort_formats(formats)\n\n        def get_insight(kind):\n            return int_or_none(try_get(\n                data, lambda x: x['insight']['%ss' % kind]))\n\n        return {\n            'extractor_key': EllenTubeIE.ie_key(),\n            'id': video_id,\n            'title': title,\n            'description': data.get('description'),\n            'duration': duration,\n            'thumbnail': data.get('thumbnail'),\n            'timestamp': float_or_none(data.get('publishTime'), scale=1000),\n            'view_count': get_insight('view'),\n            'like_count': get_insight('like'),\n            'formats': formats,\n        }\n\n\nclass EllenTubeIE(EllenTubeBaseIE):\n    _VALID_URL = r'''(?x)\n                        (?:\n                            ellentube:|\n                            https://api-prod\\.ellentube\\.com/ellenapi/api/item/\n                        )\n                        (?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})\n                    '''\n    _TESTS = [{\n        'url': 'https://api-prod.ellentube.com/ellenapi/api/item/0822171c-3829-43bf-b99f-d77358ae75e3',\n        'md5': '2fabc277131bddafdd120e0fc0f974c9',\n        'info_dict': {\n            'id': '0822171c-3829-43bf-b99f-d77358ae75e3',\n            'ext': 'mp4',\n            'title': 'Ellen Meets Las Vegas Survivors Jesus Campos and Stephen Schuck',\n            'description': 'md5:76e3355e2242a78ad9e3858e5616923f',\n            'thumbnail': r're:^https?://.+?',\n            'duration': 514,\n            'timestamp': 1508505120,\n            'upload_date': '20171020',\n            'view_count': int,\n            'like_count': int,\n        }\n    }, {\n        'url': 'ellentube:734a3353-f697-4e79-9ca9-bfc3002dc1e0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        data = self._download_json(\n            'https://api-prod.ellentube.com/ellenapi/api/item/%s' % video_id,\n            video_id)\n        return self._extract_video(data, video_id)\n\n\nclass EllenTubeVideoIE(EllenTubeBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?ellentube\\.com/video/(?P<id>.+?)\\.html'\n    _TEST = {\n        'url': 'https://www.ellentube.com/video/ellen-meets-las-vegas-survivors-jesus-campos-and-stephen-schuck.html',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._extract_data_config(webpage, display_id)['id']\n        return self.url_result(\n            'ellentube:%s' % video_id, ie=EllenTubeIE.ie_key(),\n            video_id=video_id)\n\n\nclass EllenTubePlaylistIE(EllenTubeBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?ellentube\\.com/(?:episode|studios)/(?P<id>.+?)\\.html'\n    _TESTS = [{\n        'url': 'https://www.ellentube.com/episode/dax-shepard-jordan-fisher-haim.html',\n        'info_dict': {\n            'id': 'dax-shepard-jordan-fisher-haim',\n            'title': \"Dax Shepard, 'DWTS' Team Jordan Fisher & Lindsay Arnold, HAIM\",\n            'description': 'md5:bfc982194dabb3f4e325e43aa6b2e21c',\n        },\n        'playlist_count': 6,\n    }, {\n        'url': 'https://www.ellentube.com/studios/macey-goes-rving0.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        data = self._extract_data_config(webpage, display_id)['data']\n        feed = self._download_json(\n            'https://api-prod.ellentube.com/ellenapi/api/feed/?%s'\n            % data['filter'], display_id)\n        entries = [\n            self._extract_video(elem, elem['id'])\n            for elem in feed if elem.get('type') == 'VIDEO' and elem.get('id')]\n        return self.playlist_result(\n            entries, display_id, data.get('title'),\n            clean_html(data.get('description')))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ellentube.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ellentube.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}