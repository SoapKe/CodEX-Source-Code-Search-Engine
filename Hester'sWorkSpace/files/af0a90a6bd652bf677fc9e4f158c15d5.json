{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.open import is_arg_url, match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef output(script):\n    return 'The file {} does not exist.\\n'.format(script.split(' ', 1)[1])\n\n\n@pytest.mark.parametrize('script', [\n    'open foo.com',\n    'open foo.edu',\n    'open foo.info',\n    'open foo.io',\n    'open foo.ly',\n    'open foo.me',\n    'open foo.net',\n    'open foo.org',\n    'open foo.se',\n    'open www.foo.ru'])\ndef test_is_arg_url(script):\n    assert is_arg_url(Command(script, ''))\n\n\n@pytest.mark.parametrize('script', ['open foo', 'open bar.txt', 'open egg.doc'])\ndef test_not_is_arg_url(script):\n    assert not is_arg_url(Command(script, ''))\n\n\n@pytest.mark.parametrize('script', [\n    'open foo.com',\n    'xdg-open foo.com',\n    'gnome-open foo.com',\n    'kde-open foo.com',\n    'open nonest'])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, new_command', [\n    ('open foo.io', ['open http://foo.io']),\n    ('xdg-open foo.io', ['xdg-open http://foo.io']),\n    ('gnome-open foo.io', ['gnome-open http://foo.io']),\n    ('kde-open foo.io', ['kde-open http://foo.io']),\n    ('open nonest', ['touch nonest && open nonest',\n                     'mkdir nonest && open nonest'])])\ndef test_get_new_command(script, new_command, output):\n    assert get_new_command(Command(script, output)) == new_command\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.open import is_arg_url, match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef output(script):\n    return 'The file {} does not exist.\\n'.format(script.split(' ', 1)[1])\n\n\n@pytest.mark.parametrize('script', [\n    'open foo.com',\n    'open foo.edu',\n    'open foo.info',\n    'open foo.io',\n    'open foo.ly',\n    'open foo.me',\n    'open foo.net',\n    'open foo.org',\n    'open foo.se',\n    'open www.foo.ru'])\ndef test_is_arg_url(script):\n    assert is_arg_url(Command(script, ''))\n\n\n@pytest.mark.parametrize('script', ['open foo', 'open bar.txt', 'open egg.doc'])\ndef test_not_is_arg_url(script):\n    assert not is_arg_url(Command(script, ''))\n\n\n@pytest.mark.parametrize('script', [\n    'open foo.com',\n    'xdg-open foo.com',\n    'gnome-open foo.com',\n    'kde-open foo.com',\n    'open nonest'])\ndef test_match(script, output):\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, new_command', [\n    ('open foo.io', ['open http://foo.io']),\n    ('xdg-open foo.io', ['xdg-open http://foo.io']),\n    ('gnome-open foo.io', ['gnome-open http://foo.io']),\n    ('kde-open foo.io', ['kde-open http://foo.io']),\n    ('open nonest', ['touch nonest && open nonest',\n                     'mkdir nonest && open nonest'])])\ndef test_get_new_command(script, new_command, output):\n    assert get_new_command(Command(script, output)) == new_command\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_open.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_open.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}