{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport logging\nimport psycopg2\n\nfrom odoo import api, fields, models, registry, SUPERUSER_ID, _\n\n_logger = logging.getLogger(__name__)\n\n\nclass DeliveryCarrier(models.Model):\n    _name = 'delivery.carrier'\n    _description = \"Carrier\"\n    _order = 'sequence, id'\n\n    ''' A Shipping Provider\n\n    In order to add your own external provider, follow these steps:\n\n    1. Create your model MyProvider that _inherit 'delivery.carrier'\n    2. Extend the selection of the field \"delivery_type\" with a pair\n       ('<my_provider>', 'My Provider')\n    3. Add your methods:\n       <my_provider>_rate_shipment\n       <my_provider>_send_shipping\n       <my_provider>_get_tracking_link\n       <my_provider>_cancel_shipment\n       (they are documented hereunder)\n    '''\n\n    \n    \n    \n\n    name = fields.Char(required=True)\n    active = fields.Boolean(default=True)\n    sequence = fields.Integer(help=\"Determine the display order\", default=10)\n    # This field will be overwritten by internal shipping providers by adding their own type (ex: 'fedex')\n    delivery_type = fields.Selection([('fixed', 'Fixed Price')], string='Provider', default='fixed', required=True)\n    integration_level = fields.Selection([('rate', 'Get Rate'), ('rate_and_ship', 'Get Rate and Create Shipment')], string=\"Integration Level\", default='rate_and_ship', help=\"Action while validating Delivery Orders\")\n    prod_environment = fields.Boolean(\"Environment\", help=\"Set to True if your credentials are certified for production.\")\n    debug_logging = fields.Boolean('Debug logging', help=\"Log requests in order to ease debugging\")\n    company_id = fields.Many2one('res.company', string='Company', related='product_id.company_id', store=True)\n    product_id = fields.Many2one('product.product', string='Delivery Product', required=True, ondelete='restrict')\n\n    country_ids = fields.Many2many('res.country', 'delivery_carrier_country_rel', 'carrier_id', 'country_id', 'Countries')\n    state_ids = fields.Many2many('res.country.state', 'delivery_carrier_state_rel', 'carrier_id', 'state_id', 'States')\n    zip_from = fields.Char('Zip From')\n    zip_to = fields.Char('Zip To')\n\n    margin = fields.Integer(help='This percentage will be added to the shipping price.')\n    free_over = fields.Boolean('Free if order amount is above', help=\"If the order total amount (shipping excluded) is above or equal to this value, the customer benefits from a free shipping\", default=False, oldname='free_if_more_than')\n    amount = fields.Float(string='Amount', help=\"Amount of the order to benefit from a free shipping, expressed in the company currency\")\n\n    _sql_constraints = [\n        ('margin_not_under_100_percent', 'CHECK (margin >= -100)', 'Margin cannot be lower than -100%'),\n    ]\n\n    def toggle_prod_environment(self):\n        for c in self:\n            c.prod_environment = not c.prod_environment\n\n    def toggle_debug(self):\n        for c in self:\n            c.debug_logging = not c.debug_logging\n\n    @api.multi\n    def install_more_provider(self):\n        return {\n            'name': 'New Providers',\n            'view_mode': 'kanban',\n            'res_model': 'ir.module.module',\n            'domain': [['name', 'ilike', 'delivery_']],\n            'type': 'ir.actions.act_window',\n            'help': _('''<p class=\"oe_view_nocontent\">\n                    Buy Odoo Enterprise now to get more providers.\n                </p>'''),\n        }\n\n    def available_carriers(self, partner):\n        return self.filtered(lambda c: c._match_address(partner))\n\n    def _match_address(self, partner):\n        self.ensure_one()\n        if self.country_ids and partner.country_id not in self.country_ids:\n            return False\n        if self.state_ids and partner.state_id not in self.state_ids:\n            return False\n        if self.zip_from and (partner.zip or '').upper() < self.zip_from.upper():\n            return False\n        if self.zip_to and (partner.zip or '').upper() > self.zip_to.upper():\n            return False\n        return True\n\n    @api.onchange('state_ids')\n    def onchange_states(self):\n        self.country_ids = [(6, 0, self.country_ids.ids + self.state_ids.mapped('country_id.id'))]\n\n    @api.onchange('country_ids')\n    def onchange_countries(self):\n        self.state_ids = [(6, 0, self.state_ids.filtered(lambda state: state.id in self.country_ids.mapped('state_ids').ids).ids)]\n\n    \n    \n    \n\n    def rate_shipment(self, order):\n        ''' Compute the price of the order shipment\n\n        :param order: record of sale.order\n        :return dict: {'success': boolean,\n                       'price': a float,\n                       'error_message': a string containing an error message,\n                       'warning_message': a string containing a warning message}\n                       ?\n        '''\n        self.ensure_one()\n        if hasattr(self, '%s_rate_shipment' % self.delivery_type):\n            res = getattr(self, '%s_rate_shipment' % self.delivery_type)(order)\n            \n            res['price'] = res['price'] * (1.0 + (float(self.margin) / 100.0))\n            \n            if res['success'] and self.free_over and order._compute_amount_total_without_delivery() >= self.amount:\n                res['warning_message'] = _('Info:\\nThe shipping is free because the order amount exceeds %.2f.\\n(The actual shipping cost is: %.2f)') % (self.amount, res['price'])\n                res['price'] = 0.0\n            return res\n\n    def send_shipping(self, pickings):\n        ''' Send the package to the service provider\n\n        :param pickings: A recordset of pickings\n        :return list: A list of dictionaries (one per picking) containing of the form::\n                         { 'exact_price': price,\n                           'tracking_number': number }\n                           \n                           \n                           \n        '''\n        self.ensure_one()\n        if hasattr(self, '%s_send_shipping' % self.delivery_type):\n            return getattr(self, '%s_send_shipping' % self.delivery_type)(pickings)\n\n    def get_tracking_link(self, picking):\n        ''' Ask the tracking link to the service provider\n\n        :param picking: record of stock.picking\n        :return str: an URL containing the tracking link or False\n        '''\n        self.ensure_one()\n        if hasattr(self, '%s_get_tracking_link' % self.delivery_type):\n            return getattr(self, '%s_get_tracking_link' % self.delivery_type)(picking)\n\n    def cancel_shipment(self, pickings):\n        ''' Cancel a shipment\n\n        :param pickings: A recordset of pickings\n        '''\n        self.ensure_one()\n        if hasattr(self, '%s_cancel_shipment' % self.delivery_type):\n            return getattr(self, '%s_cancel_shipment' % self.delivery_type)(pickings)\n\n    def log_xml(self, xml_string, func):\n        self.ensure_one()\n\n        if self.debug_logging:\n            db_name = self._cr.dbname\n\n            \n            try:\n                db_registry = registry(db_name)\n                with db_registry.cursor() as cr:\n                    env = api.Environment(cr, SUPERUSER_ID, {})\n                    IrLogging = env['ir.logging']\n                    IrLogging.sudo().create({'name': 'delivery.carrier',\n                              'type': 'server',\n                              'dbname': db_name,\n                              'level': 'DEBUG',\n                              'message': xml_string,\n                              'path': self.delivery_type,\n                              'func': func,\n                              'line': 1})\n            except psycopg2.Error:\n                pass\n\n    \n    \n    \n\n    fixed_price = fields.Float(compute='_compute_fixed_price', inverse='_set_product_fixed_price', store=True, string='Fixed Price')\n\n    @api.depends('product_id.list_price', 'product_id.product_tmpl_id.list_price')\n    def _compute_fixed_price(self):\n        for carrier in self:\n            carrier.fixed_price = carrier.product_id.list_price\n\n    def _set_product_fixed_price(self):\n        for carrier in self:\n            carrier.product_id.list_price = carrier.fixed_price\n\n    def fixed_rate_shipment(self, order):\n        price = self.fixed_price\n        if self.company_id.currency_id.id != order.currency_id.id:\n            price = self.env['res.currency']._compute(self.company_id.currency_id, order.currency_id, price)\n        return {'success': True,\n                'price': price,\n                'error_message': False,\n                'warning_message': False}\n\n    def fixed_send_shipping(self, pickings):\n        res = []\n        for p in pickings:\n            res = res + [{'exact_price': p.carrier_id.fixed_price,\n                          'tracking_number': False}]\n        return res\n\n    def fixed_get_tracking_link(self, picking):\n        return False\n\n    def fixed_cancel_shipment(self, pickings):\n        raise NotImplementedError()\n", "comments": "    a shipping provider      in order add external provider  follow steps       1  create model myprovider  inherit  delivery carrier      2  extend selection field  delivery type  pair        (  provider     my provider )     3  add methods          provider  rate shipment         provider  send shipping         provider  get tracking link         provider  cancel shipment        (they documented hereunder)                                                         internals shipping providers                                                 name   fields char(required true)     active   fields boolean(default true)     sequence   fields integer(help  determine display order   default 10)       this field overwritten internal shipping providers adding type (ex   fedex )     delivery type   fields selection( ( fixed    fixed price )   string  provider   default  fixed   required true)     integration level   fields selection( ( rate    get rate )  ( rate ship    get rate create shipment )   string  integration level   default  rate ship   help  action validating delivery orders )     prod environment   fields boolean( environment   help  set true credentials certified production  )     debug logging   fields boolean( debug logging   help  log requests order ease debugging )     company id   fields many2one( res company   string  company   related  product id company id   store true)     product id   fields many2one( product product   string  delivery product   required true  ondelete  restrict )      country ids   fields many2many( res country    delivery carrier country rel    carrier id    country id    countries )     state ids   fields many2many( res country state    delivery carrier state rel    carrier id    state id    states )     zip   fields char( zip from )     zip   fields char( zip to )      margin   fields integer(help  this percentage added shipping price  )     free   fields boolean( free order amount   help  if order total amount (shipping excluded) equal value  customer benefits free shipping   default false  oldname  free )     amount   fields float(string  amount   help  amount order benefit free shipping  expressed company currency )       sql constraints             ( margin 100 percent    check (margin     100)    margin cannot lower  100  )             def toggle prod environment(self)          c self              c prod environment   c prod environment      def toggle debug(self)          c self              c debug logging   c debug logging       api multi     def install provider(self)          return                name    new providers                view mode    kanban                res model    ir module module                domain      name    ilike    delivery                   type    ir actions act window                help    (    p class  oe view nocontent                       buy odoo enterprise get providers                    p    )                 def available carriers(self  partner)          return self filtered(lambda c  c  match address(partner))      def  match address(self  partner)          self ensure one()         self country ids partner country id self country ids              return false         self state ids partner state id self state ids              return false         self zip (partner zip   ) upper()   self zip upper()              return false         self zip (partner zip   ) upper()   self zip upper()              return false         return true       api onchange( state ids )     def onchange states(self)          self country ids    (6  0  self country ids ids   self state ids mapped( country id id ))        api onchange( country ids )     def onchange countries(self)          self state ids    (6  0  self state ids filtered(lambda state  state id self country ids mapped( state ids ) ids) ids)                                            api external providers                                           def rate shipment(self  order)              compute price order shipment           param order  record sale order          return dict    success   boolean                          price   float                          error message   string containing error message                          warning message   string containing warning message                           todo maybe currency code                      self ensure one()         hasattr(self    rate shipment    self delivery type)              res   getattr(self    rate shipment    self delivery type)(order)               apply margin computed price             res  price     res  price     (1 0   (float(self margin)   100 0))               free order large enough             res  success   self free order  compute amount total without delivery()    self amount                  res  warning message      ( info  nthe shipping free order amount exceeds   2f  n(the actual shipping cost    2f) )   (self amount  res  price  )                 res  price     0 0             return res      def send shipping(self  pickings)              send package service provider           param pickings  a recordset pickings          return list  a list dictionaries (one per picking) containing form                               exact price   price                              tracking number   number                                todo missing labels per package                              todo missing currency                              todo missing success  error  warnings                     self ensure one()         hasattr(self    send shipping    self delivery type)              return getattr(self    send shipping    self delivery type)(pickings)      def get tracking link(self  picking)              ask tracking link service provider           param picking  record stock picking          return str  url containing tracking link false                     self ensure one()         hasattr(self    get tracking link    self delivery type)              return getattr(self    get tracking link    self delivery type)(picking)      def cancel shipment(self  pickings)              cancel shipment           param pickings  a recordset pickings                    coding  utf 8        part odoo  see license file full copyright licensing details                                           internals shipping providers                                            this field overwritten internal shipping providers adding type (ex   fedex )                                    api external providers                                      todo maybe currency code     apply margin computed price    free order large enough    todo missing labels per package    todo missing currency    todo missing success  error  warnings    use new cursor avoid rollback could caused upper method                                                          fixed price shipping  aka simple provider                                                         ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport logging\nimport psycopg2\n\nfrom odoo import api, fields, models, registry, SUPERUSER_ID, _\n\n_logger = logging.getLogger(__name__)\n\n\nclass DeliveryCarrier(models.Model):\n    _name = 'delivery.carrier'\n    _description = \"Carrier\"\n    _order = 'sequence, id'\n\n    ''' A Shipping Provider\n\n    In order to add your own external provider, follow these steps:\n\n    1. Create your model MyProvider that _inherit 'delivery.carrier'\n    2. Extend the selection of the field \"delivery_type\" with a pair\n       ('<my_provider>', 'My Provider')\n    3. Add your methods:\n       <my_provider>_rate_shipment\n       <my_provider>_send_shipping\n       <my_provider>_get_tracking_link\n       <my_provider>_cancel_shipment\n       (they are documented hereunder)\n    '''\n\n    # -------------------------------- #\n    # Internals for shipping providers #\n    # -------------------------------- #\n\n    name = fields.Char(required=True)\n    active = fields.Boolean(default=True)\n    sequence = fields.Integer(help=\"Determine the display order\", default=10)\n    # This field will be overwritten by internal shipping providers by adding their own type (ex: 'fedex')\n    delivery_type = fields.Selection([('fixed', 'Fixed Price')], string='Provider', default='fixed', required=True)\n    integration_level = fields.Selection([('rate', 'Get Rate'), ('rate_and_ship', 'Get Rate and Create Shipment')], string=\"Integration Level\", default='rate_and_ship', help=\"Action while validating Delivery Orders\")\n    prod_environment = fields.Boolean(\"Environment\", help=\"Set to True if your credentials are certified for production.\")\n    debug_logging = fields.Boolean('Debug logging', help=\"Log requests in order to ease debugging\")\n    company_id = fields.Many2one('res.company', string='Company', related='product_id.company_id', store=True)\n    product_id = fields.Many2one('product.product', string='Delivery Product', required=True, ondelete='restrict')\n\n    country_ids = fields.Many2many('res.country', 'delivery_carrier_country_rel', 'carrier_id', 'country_id', 'Countries')\n    state_ids = fields.Many2many('res.country.state', 'delivery_carrier_state_rel', 'carrier_id', 'state_id', 'States')\n    zip_from = fields.Char('Zip From')\n    zip_to = fields.Char('Zip To')\n\n    margin = fields.Integer(help='This percentage will be added to the shipping price.')\n    free_over = fields.Boolean('Free if order amount is above', help=\"If the order total amount (shipping excluded) is above or equal to this value, the customer benefits from a free shipping\", default=False, oldname='free_if_more_than')\n    amount = fields.Float(string='Amount', help=\"Amount of the order to benefit from a free shipping, expressed in the company currency\")\n\n    _sql_constraints = [\n        ('margin_not_under_100_percent', 'CHECK (margin >= -100)', 'Margin cannot be lower than -100%'),\n    ]\n\n    def toggle_prod_environment(self):\n        for c in self:\n            c.prod_environment = not c.prod_environment\n\n    def toggle_debug(self):\n        for c in self:\n            c.debug_logging = not c.debug_logging\n\n    @api.multi\n    def install_more_provider(self):\n        return {\n            'name': 'New Providers',\n            'view_mode': 'kanban',\n            'res_model': 'ir.module.module',\n            'domain': [['name', 'ilike', 'delivery_']],\n            'type': 'ir.actions.act_window',\n            'help': _('''<p class=\"oe_view_nocontent\">\n                    Buy Odoo Enterprise now to get more providers.\n                </p>'''),\n        }\n\n    def available_carriers(self, partner):\n        return self.filtered(lambda c: c._match_address(partner))\n\n    def _match_address(self, partner):\n        self.ensure_one()\n        if self.country_ids and partner.country_id not in self.country_ids:\n            return False\n        if self.state_ids and partner.state_id not in self.state_ids:\n            return False\n        if self.zip_from and (partner.zip or '').upper() < self.zip_from.upper():\n            return False\n        if self.zip_to and (partner.zip or '').upper() > self.zip_to.upper():\n            return False\n        return True\n\n    @api.onchange('state_ids')\n    def onchange_states(self):\n        self.country_ids = [(6, 0, self.country_ids.ids + self.state_ids.mapped('country_id.id'))]\n\n    @api.onchange('country_ids')\n    def onchange_countries(self):\n        self.state_ids = [(6, 0, self.state_ids.filtered(lambda state: state.id in self.country_ids.mapped('state_ids').ids).ids)]\n\n    # -------------------------- #\n    # API for external providers #\n    # -------------------------- #\n\n    def rate_shipment(self, order):\n        ''' Compute the price of the order shipment\n\n        :param order: record of sale.order\n        :return dict: {'success': boolean,\n                       'price': a float,\n                       'error_message': a string containing an error message,\n                       'warning_message': a string containing a warning message}\n                       # TODO maybe the currency code?\n        '''\n        self.ensure_one()\n        if hasattr(self, '%s_rate_shipment' % self.delivery_type):\n            res = getattr(self, '%s_rate_shipment' % self.delivery_type)(order)\n            # apply margin on computed price\n            res['price'] = res['price'] * (1.0 + (float(self.margin) / 100.0))\n            # free when order is large enough\n            if res['success'] and self.free_over and order._compute_amount_total_without_delivery() >= self.amount:\n                res['warning_message'] = _('Info:\\nThe shipping is free because the order amount exceeds %.2f.\\n(The actual shipping cost is: %.2f)') % (self.amount, res['price'])\n                res['price'] = 0.0\n            return res\n\n    def send_shipping(self, pickings):\n        ''' Send the package to the service provider\n\n        :param pickings: A recordset of pickings\n        :return list: A list of dictionaries (one per picking) containing of the form::\n                         { 'exact_price': price,\n                           'tracking_number': number }\n                           # TODO missing labels per package\n                           # TODO missing currency\n                           # TODO missing success, error, warnings\n        '''\n        self.ensure_one()\n        if hasattr(self, '%s_send_shipping' % self.delivery_type):\n            return getattr(self, '%s_send_shipping' % self.delivery_type)(pickings)\n\n    def get_tracking_link(self, picking):\n        ''' Ask the tracking link to the service provider\n\n        :param picking: record of stock.picking\n        :return str: an URL containing the tracking link or False\n        '''\n        self.ensure_one()\n        if hasattr(self, '%s_get_tracking_link' % self.delivery_type):\n            return getattr(self, '%s_get_tracking_link' % self.delivery_type)(picking)\n\n    def cancel_shipment(self, pickings):\n        ''' Cancel a shipment\n\n        :param pickings: A recordset of pickings\n        '''\n        self.ensure_one()\n        if hasattr(self, '%s_cancel_shipment' % self.delivery_type):\n            return getattr(self, '%s_cancel_shipment' % self.delivery_type)(pickings)\n\n    def log_xml(self, xml_string, func):\n        self.ensure_one()\n\n        if self.debug_logging:\n            db_name = self._cr.dbname\n\n            # Use a new cursor to avoid rollback that could be caused by an upper method\n            try:\n                db_registry = registry(db_name)\n                with db_registry.cursor() as cr:\n                    env = api.Environment(cr, SUPERUSER_ID, {})\n                    IrLogging = env['ir.logging']\n                    IrLogging.sudo().create({'name': 'delivery.carrier',\n                              'type': 'server',\n                              'dbname': db_name,\n                              'level': 'DEBUG',\n                              'message': xml_string,\n                              'path': self.delivery_type,\n                              'func': func,\n                              'line': 1})\n            except psycopg2.Error:\n                pass\n\n    # ------------------------------------------------ #\n    # Fixed price shipping, aka a very simple provider #\n    # ------------------------------------------------ #\n\n    fixed_price = fields.Float(compute='_compute_fixed_price', inverse='_set_product_fixed_price', store=True, string='Fixed Price')\n\n    @api.depends('product_id.list_price', 'product_id.product_tmpl_id.list_price')\n    def _compute_fixed_price(self):\n        for carrier in self:\n            carrier.fixed_price = carrier.product_id.list_price\n\n    def _set_product_fixed_price(self):\n        for carrier in self:\n            carrier.product_id.list_price = carrier.fixed_price\n\n    def fixed_rate_shipment(self, order):\n        price = self.fixed_price\n        if self.company_id.currency_id.id != order.currency_id.id:\n            price = self.env['res.currency']._compute(self.company_id.currency_id, order.currency_id, price)\n        return {'success': True,\n                'price': price,\n                'error_message': False,\n                'warning_message': False}\n\n    def fixed_send_shipping(self, pickings):\n        res = []\n        for p in pickings:\n            res = res + [{'exact_price': p.carrier_id.fixed_price,\n                          'tracking_number': False}]\n        return res\n\n    def fixed_get_tracking_link(self, picking):\n        return False\n\n    def fixed_cancel_shipment(self, pickings):\n        raise NotImplementedError()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "delivery_carrier.py", "id": "0274ef7e4be8606eb605d39264e81ccc", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/delivery/models/delivery_carrier.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}