{"author": "pyeve", "code": "# -*- coding: utf-8 -*-\n\n\"\"\"\n    Auth-HMAC\n    ~~~~~~~~~\n\n    Securing an Eve-powered API with HMAC based Authentication.\n\n    The ``eve.auth.HMACAuth`` class allows for custom Amazon S3-like\n    authentication, which is basically a very secure custom authentication\n    scheme built around the `Authorization` header.\n\n    The server provides the client with a user id and a secret key through some\n    out-of-band technique (e.g., the service sends the client an e-mail\n    containing the user id and secret key). The client will use the supplied\n    secret key to sign all requests.\n\n    When the client wants to send a request he builds the complete request and\n    then using the secret key computes a hash over the complete message body\n    (and optionally some of the message headers if required)\n\n    Next the client add the computed hash and his userid to the message in the\n    Authorization header:\n\n        Authorization: johndoe:uCMfSzkjue+HSDygYB5aEg==\n\n    and sends it to the service. The service retrieves the userid from the\n    message header and searches the private key for that user in its own\n    database. Next he computes the hash over the message body (and selected\n    headers) using the key to generate its hash. If the hash the client sends\n    matches the hash the server computes the server knows the message was send\n    by the real client and was not altered in any way.\n\n    Really the only tricky part is sharing a secret key with the user and\n    keeping that secure. That is why some services allow for generation of\n    shared keys with a limited life time so you can give the key to a third\n    party to temporarily work on your behalf. This is also the reason why the\n    secret key is generally provided through out-of-band channels (often\n    a webpage or, as said above, an email or plain old paper).\n\n    The HMACAuth class also supports access roles.\n\n    Checkout Eve at https://github.com/pyeve/eve\n\n    This snippet by Nicola Iarocci can be used freely for anything you like.\n    Consider it public domain.\n\"\"\"\nimport hmac\n\nfrom eve import Eve\nfrom eve.auth import HMACAuth\nfrom hashlib import sha1\n\nfrom settings_security import SETTINGS\n\n\nclass HMACAuth(HMACAuth):\n    def check_auth(self, userid, hmac_hash, headers, data, allowed_roles,\n                   resource, method):\n        \n        accounts = app.data.driver.db['accounts']\n        user = accounts.find_one({'userid': userid})\n        if user:\n            secret_key = user['secret_key']\n        \n        \n        return user and \\\n            hmac.new(str(secret_key), str(data), sha1).hexdigest() == hmac_hash\n\n\nif __name__ == '__main__':\n    app = Eve(auth=HMACAuth, settings=SETTINGS)\n    app.run()\n", "comments": "        auth hmac                    securing eve powered api hmac based authentication       the   eve auth hmacauth   class allows custom amazon s3 like     authentication  basically secure custom authentication     scheme built around  authorization  header       the server provides client user id secret key     band technique (e g   service sends client e mail     containing user id secret key)  the client use supplied     secret key sign requests       when client wants send request builds complete request     using secret key computes hash complete message body     (and optionally message headers required)      next client add computed hash userid message     authorization header           authorization  johndoe ucmfszkjue hsdygyb5aeg        sends service  the service retrieves userid     message header searches private key user     database  next computes hash message body (and selected     headers) using key generate hash  if hash client sends     matches hash server computes server knows message send     real client altered way       really tricky part sharing secret key user     keeping secure  that services allow generation     shared keys limited life time give key third     party temporarily work behalf  this also reason     secret key generally provided band channels (often     webpage  said  email plain old paper)       the hmacauth class also supports access roles       checkout eve https   github com pyeve eve      this snippet nicola iarocci used freely anything like      consider public domain             coding  utf 8        use eve db driver  additional connections resources used    implementation hash request data  ignoring    headers  ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\"\n    Auth-HMAC\n    ~~~~~~~~~\n\n    Securing an Eve-powered API with HMAC based Authentication.\n\n    The ``eve.auth.HMACAuth`` class allows for custom Amazon S3-like\n    authentication, which is basically a very secure custom authentication\n    scheme built around the `Authorization` header.\n\n    The server provides the client with a user id and a secret key through some\n    out-of-band technique (e.g., the service sends the client an e-mail\n    containing the user id and secret key). The client will use the supplied\n    secret key to sign all requests.\n\n    When the client wants to send a request he builds the complete request and\n    then using the secret key computes a hash over the complete message body\n    (and optionally some of the message headers if required)\n\n    Next the client add the computed hash and his userid to the message in the\n    Authorization header:\n\n        Authorization: johndoe:uCMfSzkjue+HSDygYB5aEg==\n\n    and sends it to the service. The service retrieves the userid from the\n    message header and searches the private key for that user in its own\n    database. Next he computes the hash over the message body (and selected\n    headers) using the key to generate its hash. If the hash the client sends\n    matches the hash the server computes the server knows the message was send\n    by the real client and was not altered in any way.\n\n    Really the only tricky part is sharing a secret key with the user and\n    keeping that secure. That is why some services allow for generation of\n    shared keys with a limited life time so you can give the key to a third\n    party to temporarily work on your behalf. This is also the reason why the\n    secret key is generally provided through out-of-band channels (often\n    a webpage or, as said above, an email or plain old paper).\n\n    The HMACAuth class also supports access roles.\n\n    Checkout Eve at https://github.com/pyeve/eve\n\n    This snippet by Nicola Iarocci can be used freely for anything you like.\n    Consider it public domain.\n\"\"\"\nimport hmac\n\nfrom eve import Eve\nfrom eve.auth import HMACAuth\nfrom hashlib import sha1\n\nfrom settings_security import SETTINGS\n\n\nclass HMACAuth(HMACAuth):\n    def check_auth(self, userid, hmac_hash, headers, data, allowed_roles,\n                   resource, method):\n        # use Eve's own db driver; no additional connections/resources are used\n        accounts = app.data.driver.db['accounts']\n        user = accounts.find_one({'userid': userid})\n        if user:\n            secret_key = user['secret_key']\n        # in this implementation we only hash request data, ignoring the\n        # headers.\n        return user and \\\n            hmac.new(str(secret_key), str(data), sha1).hexdigest() == hmac_hash\n\n\nif __name__ == '__main__':\n    app = Eve(auth=HMACAuth, settings=SETTINGS)\n    app.run()\n", "description": "REST API framework designed for human beings", "file_name": "hmac.py", "id": "15b170009ba8836bc294d9de12447654", "language": "Python", "project_name": "eve", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/pyeve-eve/pyeve-eve-53e4bb9/examples/security/hmac.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:55:13Z", "url": "https://github.com/pyeve/eve", "wiki": false}