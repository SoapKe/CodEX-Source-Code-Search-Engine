{"author": "ansible", "code": "\n\"\"\" PN CLI trunk-create/trunk-delete/trunk-modify \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_trunk\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to create/delete/modify a trunk.\ndescription:\n  - Execute trunk-create or trunk-delete command.\n  - Trunks can be used to aggregate network links at Layer 2 on the local\n    switch. Use this command to create a new trunk.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to create trunk,\n        'absent' to delete trunk and 'update' to modify trunk.\n    required: True\n    choices: ['present', 'absent', 'update']\n  pn_name:\n    description:\n      - Specify the name for the trunk configuration.\n    required: true\n  pn_ports:\n    description:\n      - Specify the port number(s) for the link(s) to aggregate into the trunk.\n      - Required for trunk-create.\n  pn_speed:\n    description:\n      - Specify the port speed or disable the port.\n    choices: ['disable', '10m', '100m', '1g', '2.5g', '10g', '40g']\n  pn_egress_rate_limit:\n    description:\n      - Specify an egress port data rate limit for the configuration.\n  pn_jumbo:\n    description:\n      - Specify if the port can receive jumbo frames.\n  pn_lacp_mode:\n    description:\n      - Specify the LACP mode for the configuration.\n    choices: ['off', 'passive', 'active']\n  pn_lacp_priority:\n    description:\n      - Specify the LACP priority. This is a number between 1 and 65535 with a\n        default value of 32768.\n  pn_lacp_timeout:\n    description:\n      - Specify the LACP time out as slow (30 seconds) or fast (4seconds).\n        The default value is slow.\n    choices: ['slow', 'fast']\n  pn_lacp_fallback:\n    description:\n      - Specify the LACP fallback mode as bundles or individual.\n    choices: ['bundle', 'individual']\n  pn_lacp_fallback_timeout:\n    description:\n      - Specify the LACP fallback timeout in seconds. The range is between 30\n        and 60 seconds with a default value of 50 seconds.\n  pn_edge_switch:\n    description:\n      - Specify if the switch is an edge switch.\n  pn_pause:\n    description:\n      - Specify if pause frames are sent.\n  pn_description:\n    description:\n      - Specify a description for the trunk configuration.\n  pn_loopback:\n    description:\n      - Specify loopback if you want to use loopback.\n  pn_mirror_receive:\n    description:\n      - Specify if the configuration receives mirrored traffic.\n  pn_unknown_ucast_level:\n    description:\n      - Specify an unknown unicast level in percent. The default value is 100%.\n  pn_unknown_mcast_level:\n    description:\n      - Specify an unknown multicast level in percent. The default value is 100%.\n  pn_broadcast_level:\n    description:\n      - Specify a broadcast level in percent. The default value is 100%.\n  pn_port_macaddr:\n    description:\n      - Specify the MAC address of the port.\n  pn_loopvlans:\n    description:\n      - Specify a list of looping vlans.\n  pn_routing:\n    description:\n      - Specify if the port participates in routing on the network.\n  pn_host:\n    description:\n      - Host facing port control setting.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create trunk\n  pn_trunk:\n    state: 'present'\n    pn_name: 'spine-to-leaf'\n    pn_ports: '11,12,13,14'\n\n- name: delete trunk\n  pn_trunk:\n    state: 'absent'\n    pn_name: 'spine-to-leaf'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the trunk command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the trunk command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nTRUNK_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks for idempotency using the trunk-show command.\n    If a trunk with given name exists, return TRUNK_EXISTS as True else False.\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: TRUNK_EXISTS\n    \"\"\"\n    name = module.params['pn_name']\n\n    show = cli + ' trunk-show format switch,name no-show-headers'\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n\n    out = out.split()\n     Global flags\n    global TRUNK_EXISTS\n    if name in out:\n        TRUNK_EXISTS = True\n    else:\n        TRUNK_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'trunk-create'\n    if state == 'absent':\n        command = 'trunk-delete'\n    if state == 'update':\n        command = 'trunk-modify'\n    return command\n\n\ndef main():\n    \"\"\" This portion is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent', 'update']),\n            pn_name=dict(required=True, type='str'),\n            pn_ports=dict(type='str'),\n            pn_speed=dict(type='str',\n                          choices=['disable', '10m', '100m', '1g', '2.5g',\n                                   '10g', '40g']),\n            pn_egress_rate_limit=dict(type='str'),\n            pn_jumbo=dict(type='bool'),\n            pn_lacp_mode=dict(type='str', choices=[\n                              'off', 'passive', 'active']),\n            pn_lacp_priority=dict(type='int'),\n            pn_lacp_timeout=dict(type='str'),\n            pn_lacp_fallback=dict(type='str', choices=[\n                                  'bundle', 'individual']),\n            pn_lacp_fallback_timeout=dict(type='str'),\n            pn_edge_switch=dict(type='bool'),\n            pn_pause=dict(type='bool'),\n            pn_description=dict(type='str'),\n            pn_loopback=dict(type='bool'),\n            pn_mirror_receive=dict(type='bool'),\n            pn_unknown_ucast_level=dict(type='str'),\n            pn_unknown_mcast_level=dict(type='str'),\n            pn_broadcast_level=dict(type='str'),\n            pn_port_macaddr=dict(type='str'),\n            pn_loopvlans=dict(type='str'),\n            pn_routing=dict(type='bool'),\n            pn_host=dict(type='bool')\n        ),\n        required_if=(\n            [\"state\", \"present\", [\"pn_name\", \"pn_ports\"]],\n            [\"state\", \"absent\", [\"pn_name\"]],\n            [\"state\", \"update\", [\"pn_name\"]]\n        )\n    )\n\n     Accessing the arguments\n    state = module.params['state']\n    name = module.params['pn_name']\n    ports = module.params['pn_ports']\n    speed = module.params['pn_speed']\n    egress_rate_limit = module.params['pn_egress_rate_limit']\n    jumbo = module.params['pn_jumbo']\n    lacp_mode = module.params['pn_lacp_mode']\n    lacp_priority = module.params['pn_lacp_priority']\n    lacp_timeout = module.params['pn_lacp_timeout']\n    lacp_fallback = module.params['pn_lacp_fallback']\n    lacp_fallback_timeout = module.params['pn_lacp_fallback_timeout']\n    edge_switch = module.params['pn_edge_switch']\n    pause = module.params['pn_pause']\n    description = module.params['pn_description']\n    loopback = module.params['pn_loopback']\n    mirror_receive = module.params['pn_mirror_receive']\n    unknown_ucast_level = module.params['pn_unknown_ucast_level']\n    unknown_mcast_level = module.params['pn_unknown_mcast_level']\n    broadcast_level = module.params['pn_broadcast_level']\n    port_macaddr = module.params['pn_port_macaddr']\n    loopvlans = module.params['pn_loopvlans']\n    routing = module.params['pn_routing']\n    host = module.params['pn_host']\n\n    command = get_command_from_state(state)\n\n     Building the CLI command string\n    cli = pn_cli(module)\n\n    if command == 'trunk-delete':\n\n        check_cli(module, cli)\n        if TRUNK_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='Trunk with name %s does not exist' % name\n            )\n        cli += ' %s name %s ' % (command, name)\n\n    else:\n        if command == 'trunk-create':\n            check_cli(module, cli)\n            if TRUNK_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg='Trunk with name %s already exists' % name\n                )\n        cli += ' %s name %s ' % (command, name)\n\n         Appending options\n        if ports:\n            cli += ' ports ' + ports\n\n        if speed:\n            cli += ' speed ' + speed\n\n        if egress_rate_limit:\n            cli += ' egress-rate-limit ' + egress_rate_limit\n\n        if jumbo is True:\n            cli += ' jumbo '\n        if jumbo is False:\n            cli += ' no-jumbo '\n\n        if lacp_mode:\n            cli += ' lacp-mode ' + lacp_mode\n\n        if lacp_priority:\n            cli += ' lacp-priority ' + lacp_priority\n\n        if lacp_timeout:\n            cli += ' lacp-timeout ' + lacp_timeout\n\n        if lacp_fallback:\n            cli += ' lacp-fallback ' + lacp_fallback\n\n        if lacp_fallback_timeout:\n            cli += ' lacp-fallback-timeout ' + lacp_fallback_timeout\n\n        if edge_switch is True:\n            cli += ' edge-switch '\n        if edge_switch is False:\n            cli += ' no-edge-switch '\n\n        if pause is True:\n            cli += ' pause '\n        if pause is False:\n            cli += ' no-pause '\n\n        if description:\n            cli += ' description ' + description\n\n        if loopback is True:\n            cli += ' loopback '\n        if loopback is False:\n            cli += ' no-loopback '\n\n        if mirror_receive is True:\n            cli += ' mirror-receive-only '\n        if mirror_receive is False:\n            cli += ' no-mirror-receive-only '\n\n        if unknown_ucast_level:\n            cli += ' unknown-ucast-level ' + unknown_ucast_level\n\n        if unknown_mcast_level:\n            cli += ' unknown-mcast-level ' + unknown_mcast_level\n\n        if broadcast_level:\n            cli += ' broadcast-level ' + broadcast_level\n\n        if port_macaddr:\n            cli += ' port-mac-address ' + port_macaddr\n\n        if loopvlans:\n            cli += ' loopvlans ' + loopvlans\n\n        if routing is True:\n            cli += ' routing '\n        if routing is False:\n            cli += ' no-routing '\n\n        if host is True:\n            cli += ' host-enable '\n        if host is False:\n            cli += ' host-disable '\n\n    run_cli(module, cli)\n\n Ansible boiler-plate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli trunk create trunk delete trunk modify          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn trunk author   pluribus networks ( amitsi)  version added   2 2  short description  cli command create delete modify trunk  description      execute trunk create trunk delete command      trunks used aggregate network links layer 2 local     switch  use command create new trunk  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch(es) run cli      required  false   state      description          state action perform  use  present  create trunk           absent  delete trunk  update  modify trunk      required  true     choices    present    absent    update     pn name      description          specify name trunk configuration      required  true   pn ports      description          specify port number(s) link(s) aggregate trunk          required trunk create    pn speed      description          specify port speed disable port      choices    disable    10m    100m    1g    2 5g    10g    40g     pn egress rate limit      description          specify egress port data rate limit configuration    pn jumbo      description          specify port receive jumbo frames    pn lacp mode      description          specify lacp mode configuration      choices       passive    active     pn lacp priority      description          specify lacp priority  this number 1 65535         default value 32768    pn lacp timeout      description          specify lacp time slow (30 seconds) fast (4seconds)          the default value slow      choices    slow    fast     pn lacp fallback      description          specify lacp fallback mode bundles individual      choices    bundle    individual     pn lacp fallback timeout      description          specify lacp fallback timeout seconds  the range 30         60 seconds default value 50 seconds    pn edge switch      description          specify switch edge switch    pn pause      description          specify pause frames sent    pn description      description          specify description trunk configuration    pn loopback      description          specify loopback want use loopback    pn mirror receive      description          specify configuration receives mirrored traffic    pn unknown ucast level      description          specify unknown unicast level percent  the default value 100     pn unknown mcast level      description          specify unknown multicast level percent  the default value 100     pn broadcast level      description          specify broadcast level percent  the default value 100     pn port macaddr      description          specify mac address port    pn loopvlans      description          specify list looping vlans    pn routing      description          specify port participates routing network    pn host      description          host facing port control setting       examples         name  create trunk   pn trunk      state   present      pn name   spine leaf      pn ports   11 12 13 14     name  delete trunk   pn trunk      state   absent      pn name   spine leaf       return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses trunk command    returned  always   type  list stderr    description  the set error responses trunk command    returned  error   type  list changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex  trunk exists   none   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch     local           cli      switch local       else          cli      switch     cliswitch     return cli   def check cli(module  cli)              this method checks idempotency using trunk show command      if trunk given name exists  return trunk exists true else false       param module  the ansible module fetch input parameters      param cli  the cli string      return global booleans  trunk exists             name   module params  pn name        show   cli     trunk show format switch name show headers      show   shlex split(show)       module run command(show) 1         split()       global flags     global trunk exists     name          trunk exists   true     else          trunk exists   false   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       state   module params  state       command   get command state(state)      cmd   shlex split(cli)          contains output        err  contains error messages     result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format     result    0          module exit json(             command print cli              stderr err strip()              msg   operation failed    command              changed false         )               module exit json(             command print cli              stdout strip()              msg   operation completed    command              changed true         )      else          module exit json(             command print cli              msg   operation completed    command              changed true         )   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    trunk create      state     absent           command    trunk delete      state     update           command    trunk modify      return command   def main()          this portion arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          global flags      contains output     err  contains error messages    response json format    accessing arguments    building cli command string    appending options    ansible boiler plate ", "content": "#!/usr/bin/python\n\"\"\" PN CLI trunk-create/trunk-delete/trunk-modify \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_trunk\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to create/delete/modify a trunk.\ndescription:\n  - Execute trunk-create or trunk-delete command.\n  - Trunks can be used to aggregate network links at Layer 2 on the local\n    switch. Use this command to create a new trunk.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to create trunk,\n        'absent' to delete trunk and 'update' to modify trunk.\n    required: True\n    choices: ['present', 'absent', 'update']\n  pn_name:\n    description:\n      - Specify the name for the trunk configuration.\n    required: true\n  pn_ports:\n    description:\n      - Specify the port number(s) for the link(s) to aggregate into the trunk.\n      - Required for trunk-create.\n  pn_speed:\n    description:\n      - Specify the port speed or disable the port.\n    choices: ['disable', '10m', '100m', '1g', '2.5g', '10g', '40g']\n  pn_egress_rate_limit:\n    description:\n      - Specify an egress port data rate limit for the configuration.\n  pn_jumbo:\n    description:\n      - Specify if the port can receive jumbo frames.\n  pn_lacp_mode:\n    description:\n      - Specify the LACP mode for the configuration.\n    choices: ['off', 'passive', 'active']\n  pn_lacp_priority:\n    description:\n      - Specify the LACP priority. This is a number between 1 and 65535 with a\n        default value of 32768.\n  pn_lacp_timeout:\n    description:\n      - Specify the LACP time out as slow (30 seconds) or fast (4seconds).\n        The default value is slow.\n    choices: ['slow', 'fast']\n  pn_lacp_fallback:\n    description:\n      - Specify the LACP fallback mode as bundles or individual.\n    choices: ['bundle', 'individual']\n  pn_lacp_fallback_timeout:\n    description:\n      - Specify the LACP fallback timeout in seconds. The range is between 30\n        and 60 seconds with a default value of 50 seconds.\n  pn_edge_switch:\n    description:\n      - Specify if the switch is an edge switch.\n  pn_pause:\n    description:\n      - Specify if pause frames are sent.\n  pn_description:\n    description:\n      - Specify a description for the trunk configuration.\n  pn_loopback:\n    description:\n      - Specify loopback if you want to use loopback.\n  pn_mirror_receive:\n    description:\n      - Specify if the configuration receives mirrored traffic.\n  pn_unknown_ucast_level:\n    description:\n      - Specify an unknown unicast level in percent. The default value is 100%.\n  pn_unknown_mcast_level:\n    description:\n      - Specify an unknown multicast level in percent. The default value is 100%.\n  pn_broadcast_level:\n    description:\n      - Specify a broadcast level in percent. The default value is 100%.\n  pn_port_macaddr:\n    description:\n      - Specify the MAC address of the port.\n  pn_loopvlans:\n    description:\n      - Specify a list of looping vlans.\n  pn_routing:\n    description:\n      - Specify if the port participates in routing on the network.\n  pn_host:\n    description:\n      - Host facing port control setting.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create trunk\n  pn_trunk:\n    state: 'present'\n    pn_name: 'spine-to-leaf'\n    pn_ports: '11,12,13,14'\n\n- name: delete trunk\n  pn_trunk:\n    state: 'absent'\n    pn_name: 'spine-to-leaf'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the trunk command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the trunk command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nTRUNK_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks for idempotency using the trunk-show command.\n    If a trunk with given name exists, return TRUNK_EXISTS as True else False.\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: TRUNK_EXISTS\n    \"\"\"\n    name = module.params['pn_name']\n\n    show = cli + ' trunk-show format switch,name no-show-headers'\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n\n    out = out.split()\n    # Global flags\n    global TRUNK_EXISTS\n    if name in out:\n        TRUNK_EXISTS = True\n    else:\n        TRUNK_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'trunk-create'\n    if state == 'absent':\n        command = 'trunk-delete'\n    if state == 'update':\n        command = 'trunk-modify'\n    return command\n\n\ndef main():\n    \"\"\" This portion is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent', 'update']),\n            pn_name=dict(required=True, type='str'),\n            pn_ports=dict(type='str'),\n            pn_speed=dict(type='str',\n                          choices=['disable', '10m', '100m', '1g', '2.5g',\n                                   '10g', '40g']),\n            pn_egress_rate_limit=dict(type='str'),\n            pn_jumbo=dict(type='bool'),\n            pn_lacp_mode=dict(type='str', choices=[\n                              'off', 'passive', 'active']),\n            pn_lacp_priority=dict(type='int'),\n            pn_lacp_timeout=dict(type='str'),\n            pn_lacp_fallback=dict(type='str', choices=[\n                                  'bundle', 'individual']),\n            pn_lacp_fallback_timeout=dict(type='str'),\n            pn_edge_switch=dict(type='bool'),\n            pn_pause=dict(type='bool'),\n            pn_description=dict(type='str'),\n            pn_loopback=dict(type='bool'),\n            pn_mirror_receive=dict(type='bool'),\n            pn_unknown_ucast_level=dict(type='str'),\n            pn_unknown_mcast_level=dict(type='str'),\n            pn_broadcast_level=dict(type='str'),\n            pn_port_macaddr=dict(type='str'),\n            pn_loopvlans=dict(type='str'),\n            pn_routing=dict(type='bool'),\n            pn_host=dict(type='bool')\n        ),\n        required_if=(\n            [\"state\", \"present\", [\"pn_name\", \"pn_ports\"]],\n            [\"state\", \"absent\", [\"pn_name\"]],\n            [\"state\", \"update\", [\"pn_name\"]]\n        )\n    )\n\n    # Accessing the arguments\n    state = module.params['state']\n    name = module.params['pn_name']\n    ports = module.params['pn_ports']\n    speed = module.params['pn_speed']\n    egress_rate_limit = module.params['pn_egress_rate_limit']\n    jumbo = module.params['pn_jumbo']\n    lacp_mode = module.params['pn_lacp_mode']\n    lacp_priority = module.params['pn_lacp_priority']\n    lacp_timeout = module.params['pn_lacp_timeout']\n    lacp_fallback = module.params['pn_lacp_fallback']\n    lacp_fallback_timeout = module.params['pn_lacp_fallback_timeout']\n    edge_switch = module.params['pn_edge_switch']\n    pause = module.params['pn_pause']\n    description = module.params['pn_description']\n    loopback = module.params['pn_loopback']\n    mirror_receive = module.params['pn_mirror_receive']\n    unknown_ucast_level = module.params['pn_unknown_ucast_level']\n    unknown_mcast_level = module.params['pn_unknown_mcast_level']\n    broadcast_level = module.params['pn_broadcast_level']\n    port_macaddr = module.params['pn_port_macaddr']\n    loopvlans = module.params['pn_loopvlans']\n    routing = module.params['pn_routing']\n    host = module.params['pn_host']\n\n    command = get_command_from_state(state)\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n\n    if command == 'trunk-delete':\n\n        check_cli(module, cli)\n        if TRUNK_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='Trunk with name %s does not exist' % name\n            )\n        cli += ' %s name %s ' % (command, name)\n\n    else:\n        if command == 'trunk-create':\n            check_cli(module, cli)\n            if TRUNK_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg='Trunk with name %s already exists' % name\n                )\n        cli += ' %s name %s ' % (command, name)\n\n        # Appending options\n        if ports:\n            cli += ' ports ' + ports\n\n        if speed:\n            cli += ' speed ' + speed\n\n        if egress_rate_limit:\n            cli += ' egress-rate-limit ' + egress_rate_limit\n\n        if jumbo is True:\n            cli += ' jumbo '\n        if jumbo is False:\n            cli += ' no-jumbo '\n\n        if lacp_mode:\n            cli += ' lacp-mode ' + lacp_mode\n\n        if lacp_priority:\n            cli += ' lacp-priority ' + lacp_priority\n\n        if lacp_timeout:\n            cli += ' lacp-timeout ' + lacp_timeout\n\n        if lacp_fallback:\n            cli += ' lacp-fallback ' + lacp_fallback\n\n        if lacp_fallback_timeout:\n            cli += ' lacp-fallback-timeout ' + lacp_fallback_timeout\n\n        if edge_switch is True:\n            cli += ' edge-switch '\n        if edge_switch is False:\n            cli += ' no-edge-switch '\n\n        if pause is True:\n            cli += ' pause '\n        if pause is False:\n            cli += ' no-pause '\n\n        if description:\n            cli += ' description ' + description\n\n        if loopback is True:\n            cli += ' loopback '\n        if loopback is False:\n            cli += ' no-loopback '\n\n        if mirror_receive is True:\n            cli += ' mirror-receive-only '\n        if mirror_receive is False:\n            cli += ' no-mirror-receive-only '\n\n        if unknown_ucast_level:\n            cli += ' unknown-ucast-level ' + unknown_ucast_level\n\n        if unknown_mcast_level:\n            cli += ' unknown-mcast-level ' + unknown_mcast_level\n\n        if broadcast_level:\n            cli += ' broadcast-level ' + broadcast_level\n\n        if port_macaddr:\n            cli += ' port-mac-address ' + port_macaddr\n\n        if loopvlans:\n            cli += ' loopvlans ' + loopvlans\n\n        if routing is True:\n            cli += ' routing '\n        if routing is False:\n            cli += ' no-routing '\n\n        if host is True:\n            cli += ' host-enable '\n        if host is False:\n            cli += ' host-disable '\n\n    run_cli(module, cli)\n\n# Ansible boiler-plate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_trunk.py", "id": "314e364e1bbc9ffb5e039edcd46748b9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_trunk.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}