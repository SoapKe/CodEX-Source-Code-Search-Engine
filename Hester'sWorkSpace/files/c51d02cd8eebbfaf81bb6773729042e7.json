{"author": "django", "code": "from django.core.exceptions import FieldError\nfrom django.test import TestCase\n\nfrom .models.default_related_name import Author, Book, Editor\n\n\nclass DefaultRelatedNameTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.author = Author.objects.create(first_name='Dave', last_name='Loper')\n        cls.editor = Editor.objects.create(name='Test Editions', bestselling_author=cls.author)\n        cls.book = Book.objects.create(title='Test Book', editor=cls.editor)\n        cls.book.authors.add(cls.author)\n\n    def test_no_default_related_name(self):\n        self.assertEqual(list(self.author.editor_set.all()), [self.editor])\n\n    def test_default_related_name(self):\n        self.assertEqual(list(self.author.books.all()), [self.book])\n\n    def test_default_related_name_in_queryset_lookup(self):\n        self.assertEqual(Author.objects.get(books=self.book), self.author)\n\n    def test_model_name_not_available_in_queryset_lookup(self):\n        msg = \"Cannot resolve keyword 'book' into field.\"\n        with self.assertRaisesMessage(FieldError, msg):\n            Author.objects.get(book=self.book)\n\n    def test_related_name_overrides_default_related_name(self):\n        self.assertEqual(list(self.editor.edited_books.all()), [self.book])\n\n    def test_inheritance(self):\n        \n        self.assertEqual(list(self.book.model_options_bookstores.all()), [])\n\n    def test_inheritance_with_overridden_default_related_name(self):\n        self.assertEqual(list(self.book.editor_stores.all()), [])\n", "comments": "  model options name application test  ", "content": "from django.core.exceptions import FieldError\nfrom django.test import TestCase\n\nfrom .models.default_related_name import Author, Book, Editor\n\n\nclass DefaultRelatedNameTests(TestCase):\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.author = Author.objects.create(first_name='Dave', last_name='Loper')\n        cls.editor = Editor.objects.create(name='Test Editions', bestselling_author=cls.author)\n        cls.book = Book.objects.create(title='Test Book', editor=cls.editor)\n        cls.book.authors.add(cls.author)\n\n    def test_no_default_related_name(self):\n        self.assertEqual(list(self.author.editor_set.all()), [self.editor])\n\n    def test_default_related_name(self):\n        self.assertEqual(list(self.author.books.all()), [self.book])\n\n    def test_default_related_name_in_queryset_lookup(self):\n        self.assertEqual(Author.objects.get(books=self.book), self.author)\n\n    def test_model_name_not_available_in_queryset_lookup(self):\n        msg = \"Cannot resolve keyword 'book' into field.\"\n        with self.assertRaisesMessage(FieldError, msg):\n            Author.objects.get(book=self.book)\n\n    def test_related_name_overrides_default_related_name(self):\n        self.assertEqual(list(self.editor.edited_books.all()), [self.book])\n\n    def test_inheritance(self):\n        # model_options is the name of the application for this test.\n        self.assertEqual(list(self.book.model_options_bookstores.all()), [])\n\n    def test_inheritance_with_overridden_default_related_name(self):\n        self.assertEqual(list(self.book.editor_stores.all()), [])\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_default_related_name.py", "id": "c51d02cd8eebbfaf81bb6773729042e7", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/model_options/test_default_related_name.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}