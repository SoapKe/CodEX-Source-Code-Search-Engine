{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import ValidationError\n\n\nclass HolidaysType(models.Model):\n    _inherit = \"hr.holidays.status\"\n\n    def _default_project_id(self):\n        company = self.company_id if self.company_id else self.env.user.company_id\n        return company.leave_timesheet_project_id.id\n\n    def _default_task_id(self):\n        company = self.company_id if self.company_id else self.env.user.company_id\n        return company.leave_timesheet_task_id.id\n\n    timesheet_generate = fields.Boolean('Generate Timesheet', default=True, help=\"If checked, when validating a leave, timesheet will be generated in the Vacation Project of the company.\")\n    timesheet_project_id = fields.Many2one('project.project', string=\"Internal Project\", default=_default_project_id, help=\"The project will contain the timesheet generated when a leave is validated.\")\n    timesheet_task_id = fields.Many2one('project.task', string=\"Internal Task for timesheet\", default=_default_task_id, domain=\"[('project_id', '=', timesheet_project_id)]\")\n\n    @api.onchange('timesheet_generate')\n    def _onchange_timesheet_generate(self):\n        if self.timesheet_generate:\n            company = self.company_id if self.company_id else self.env.user.company_id\n            self.timesheet_project_id = company.leave_timesheet_project_id\n            self.timesheet_task_id = company.leave_timesheet_task_id\n        else:\n            self.timesheet_project_id = False\n            self.timesheet_task_id = False\n\n    @api.constrains('timesheet_generate')\n    def _check_timesheet_generate(self):\n        for holiday_status in self:\n            if holiday_status.timesheet_generate:\n                if not holiday_status.timesheet_project_id or not holiday_status.timesheet_task_id:\n                    raise ValidationError(_('For the leaves to generate timesheet, the internal project and task are requried.'))\n\n\nclass Holidays(models.Model):\n    _inherit = \"hr.holidays\"\n\n    timesheet_ids = fields.One2many('account.analytic.line', 'holiday_id', string=\"Analytic Lines\")\n\n    def _validate_leave_request(self):\n        \"\"\" Timesheet will be generated on leave validation only if a timesheet_project_id and a\n            timesheet_task_id are set on the corresponding leave type. The generated timesheet will\n            be attached to this project/task.\n        \"\"\"\n        \n        for holiday in self.filtered(\n                lambda request: request.type == 'remove' and\n                                request.holiday_type == 'employee' and\n                                request.holiday_status_id.timesheet_project_id and\n                                request.holiday_status_id.timesheet_task_id):\n            holiday_project = holiday.holiday_status_id.timesheet_project_id\n            holiday_task = holiday.holiday_status_id.timesheet_task_id\n\n            work_hours_data = [item for item in holiday.employee_id.iter_work_hours_count(fields.Datetime.from_string(holiday.date_from), fields.Datetime.from_string(holiday.date_to))]\n            for index, (day_date, work_hours_count) in enumerate(work_hours_data):\n                self.env['account.analytic.line'].create({\n                    'name': \"%s (%s/%s)\" % (holiday.name or '', index + 1, len(work_hours_data)),\n                    'project_id': holiday_project.id,\n                    'task_id': holiday_task.id,\n                    'account_id': holiday_project.analytic_account_id.id,\n                    'unit_amount': work_hours_count,\n                    'user_id': holiday.employee_id.user_id.id,\n                    'date': fields.Date.to_string(day_date),\n                    'holiday_id': holiday.id,\n                    'employee_id': holiday.employee_id.id,\n                })\n\n        return super(Holidays, self)._validate_leave_request()\n\n    @api.multi\n    def action_refuse(self):\n        \"\"\" Remove the timesheets linked to the refused holidays \"\"\"\n        result = super(Holidays, self).action_refuse()\n        timesheets = self.sudo().mapped('timesheet_ids')\n        timesheets.write({'holiday_id': False})\n        timesheets.unlink()\n        return result\n", "comments": "    timesheet generated leave validation timesheet project id             timesheet task id set corresponding leave type  the generated timesheet             attached project task                        create timesheet vacation project         holiday self filtered(                 lambda request  request type     remove                                  request holiday type     employee                                  request holiday status id timesheet project id                                 request holiday status id timesheet task id)              holiday project   holiday holiday status id timesheet project id             holiday task   holiday holiday status id timesheet task id              work hours data    item item holiday employee id iter work hours count(fields datetime string(holiday date from)  fields datetime string(holiday date to))              index  (day date  work hours count) enumerate(work hours data)                  self env  account analytic line   create(                       name     (  s)    (holiday name     index   1  len(work hours data))                       project id   holiday project id                       task id   holiday task id                       account id   holiday project analytic account id id                       unit amount   work hours count                       user id   holiday employee id user id id                       date   fields date string(day date)                       holiday id   holiday id                       employee id   holiday employee id id                   )          return super(holidays  self)  validate leave request()       api multi     def action refuse(self)              remove timesheets linked refused holidays            coding  utf 8        part odoo  see license file full copyright licensing details     create timesheet vacation project ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import ValidationError\n\n\nclass HolidaysType(models.Model):\n    _inherit = \"hr.holidays.status\"\n\n    def _default_project_id(self):\n        company = self.company_id if self.company_id else self.env.user.company_id\n        return company.leave_timesheet_project_id.id\n\n    def _default_task_id(self):\n        company = self.company_id if self.company_id else self.env.user.company_id\n        return company.leave_timesheet_task_id.id\n\n    timesheet_generate = fields.Boolean('Generate Timesheet', default=True, help=\"If checked, when validating a leave, timesheet will be generated in the Vacation Project of the company.\")\n    timesheet_project_id = fields.Many2one('project.project', string=\"Internal Project\", default=_default_project_id, help=\"The project will contain the timesheet generated when a leave is validated.\")\n    timesheet_task_id = fields.Many2one('project.task', string=\"Internal Task for timesheet\", default=_default_task_id, domain=\"[('project_id', '=', timesheet_project_id)]\")\n\n    @api.onchange('timesheet_generate')\n    def _onchange_timesheet_generate(self):\n        if self.timesheet_generate:\n            company = self.company_id if self.company_id else self.env.user.company_id\n            self.timesheet_project_id = company.leave_timesheet_project_id\n            self.timesheet_task_id = company.leave_timesheet_task_id\n        else:\n            self.timesheet_project_id = False\n            self.timesheet_task_id = False\n\n    @api.constrains('timesheet_generate')\n    def _check_timesheet_generate(self):\n        for holiday_status in self:\n            if holiday_status.timesheet_generate:\n                if not holiday_status.timesheet_project_id or not holiday_status.timesheet_task_id:\n                    raise ValidationError(_('For the leaves to generate timesheet, the internal project and task are requried.'))\n\n\nclass Holidays(models.Model):\n    _inherit = \"hr.holidays\"\n\n    timesheet_ids = fields.One2many('account.analytic.line', 'holiday_id', string=\"Analytic Lines\")\n\n    def _validate_leave_request(self):\n        \"\"\" Timesheet will be generated on leave validation only if a timesheet_project_id and a\n            timesheet_task_id are set on the corresponding leave type. The generated timesheet will\n            be attached to this project/task.\n        \"\"\"\n        # create the timesheet on the vacation project\n        for holiday in self.filtered(\n                lambda request: request.type == 'remove' and\n                                request.holiday_type == 'employee' and\n                                request.holiday_status_id.timesheet_project_id and\n                                request.holiday_status_id.timesheet_task_id):\n            holiday_project = holiday.holiday_status_id.timesheet_project_id\n            holiday_task = holiday.holiday_status_id.timesheet_task_id\n\n            work_hours_data = [item for item in holiday.employee_id.iter_work_hours_count(fields.Datetime.from_string(holiday.date_from), fields.Datetime.from_string(holiday.date_to))]\n            for index, (day_date, work_hours_count) in enumerate(work_hours_data):\n                self.env['account.analytic.line'].create({\n                    'name': \"%s (%s/%s)\" % (holiday.name or '', index + 1, len(work_hours_data)),\n                    'project_id': holiday_project.id,\n                    'task_id': holiday_task.id,\n                    'account_id': holiday_project.analytic_account_id.id,\n                    'unit_amount': work_hours_count,\n                    'user_id': holiday.employee_id.user_id.id,\n                    'date': fields.Date.to_string(day_date),\n                    'holiday_id': holiday.id,\n                    'employee_id': holiday.employee_id.id,\n                })\n\n        return super(Holidays, self)._validate_leave_request()\n\n    @api.multi\n    def action_refuse(self):\n        \"\"\" Remove the timesheets linked to the refused holidays \"\"\"\n        result = super(Holidays, self).action_refuse()\n        timesheets = self.sudo().mapped('timesheet_ids')\n        timesheets.write({'holiday_id': False})\n        timesheets.unlink()\n        return result\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "hr_holidays.py", "id": "3964fdf7e175091bcbf1ab336b555b60", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/project_timesheet_holidays/models/hr_holidays.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}