{"author": "coursera-dl", "code": "\n Fabric configuration - http://www.fabfile.org/\n\n\nfrom __future__ import print_function\n\nimport errno\nimport os\n\nfrom fabric.api import (env, local, task)\n\nMD2RST='pandoc --from=markdown --to=rst --output=README.rst README.md'\n\nif not os.path.exists('README.rst'):\n    local(MD2RST)\n\nenv.projname = local(\"python setup.py --name\", capture=True)\nenv.version = local(\"python setup.py --version\", capture=True)\n\n\ndef mkdirs(path):\n    try:\n        os.makedirs(path)\n    except OSError as exc:\n        if exc.errno == errno.EEXIST and os.path.isdir(path):\n            pass\n        else:\n            raise\n\n\n@task\ndef create_rst_doc():\n    local(MD2RST)\n\n\n@task\ndef clean():\n    create_rst_doc()\n    local(\"python setup.py clean\")\n    local(\"rm -rf .tox coursera.egg-info htmlcov build dist README.rst\")\n    local(\"rm -rf coursera/__pycache__/ coursera/test/__pycache__/\")\n    local(\"find . -name '*.pyc' -delete\")\n\n\n@task\ndef build():\n    create_rst_doc()\n    local(\"python setup.py sdist\")\n    local(\"gpg --detach-sign -a dist/coursera-%s.tar.gz\" % env.version)\n\n\n@task\ndef rebuild():\n    clean()\n    build()\n\n\n@task\ndef coverage():\n    local(\"py.test coursera/test -v --cov coursera --cov-report html \\\n          --cov-report term-missing\")\n\n\n@task\ndef pylint():\n    local(\"pylint %s tests\" % env.projname)\n\n\n@task\ndef tox():\n    local('tox')\n\n\n@task\ndef release_check():\n    \"\"\"Check if there is a Git tag already in place\"\"\"\n    tags = local(\"git tag\", capture=True)\n    tags = set(tags.splitlines())\n    if env.version in tags:\n        raise Exception(\"Already released v. %r\" % env.version)\n\n\n@task\ndef release():\n    \"\"\"Release a new version\"\"\"\n    release_check()\n    build()\n    print(\"Releasing %s version %s.\" % (env.projname, env.version))\n    local(\"git tag %s\" % env.version)\n    local('gpg --detach-sign --armor dist/coursera-*.tar.gz*')\n    local('twine upload dist/coursera-*.tar.gz*')\n    local(\"git push\")\n    local(\"git push --tags\")\n", "comments": "   check git tag already place        tags   local( git tag   capture true)     tags   set(tags splitlines())     env version tags          raise exception( already released v   r    env version)    task def release()         release new version          fabric configuration   http   www fabfile org     ", "content": "#\n# Fabric configuration - http://www.fabfile.org/\n#\n\nfrom __future__ import print_function\n\nimport errno\nimport os\n\nfrom fabric.api import (env, local, task)\n\nMD2RST='pandoc --from=markdown --to=rst --output=README.rst README.md'\n\nif not os.path.exists('README.rst'):\n    local(MD2RST)\n\nenv.projname = local(\"python setup.py --name\", capture=True)\nenv.version = local(\"python setup.py --version\", capture=True)\n\n\ndef mkdirs(path):\n    try:\n        os.makedirs(path)\n    except OSError as exc:\n        if exc.errno == errno.EEXIST and os.path.isdir(path):\n            pass\n        else:\n            raise\n\n\n@task\ndef create_rst_doc():\n    local(MD2RST)\n\n\n@task\ndef clean():\n    create_rst_doc()\n    local(\"python setup.py clean\")\n    local(\"rm -rf .tox coursera.egg-info htmlcov build dist README.rst\")\n    local(\"rm -rf coursera/__pycache__/ coursera/test/__pycache__/\")\n    local(\"find . -name '*.pyc' -delete\")\n\n\n@task\ndef build():\n    create_rst_doc()\n    local(\"python setup.py sdist\")\n    local(\"gpg --detach-sign -a dist/coursera-%s.tar.gz\" % env.version)\n\n\n@task\ndef rebuild():\n    clean()\n    build()\n\n\n@task\ndef coverage():\n    local(\"py.test coursera/test -v --cov coursera --cov-report html \\\n          --cov-report term-missing\")\n\n\n@task\ndef pylint():\n    local(\"pylint %s tests\" % env.projname)\n\n\n@task\ndef tox():\n    local('tox')\n\n\n@task\ndef release_check():\n    \"\"\"Check if there is a Git tag already in place\"\"\"\n    tags = local(\"git tag\", capture=True)\n    tags = set(tags.splitlines())\n    if env.version in tags:\n        raise Exception(\"Already released v. %r\" % env.version)\n\n\n@task\ndef release():\n    \"\"\"Release a new version\"\"\"\n    release_check()\n    build()\n    print(\"Releasing %s version %s.\" % (env.projname, env.version))\n    local(\"git tag %s\" % env.version)\n    local('gpg --detach-sign --armor dist/coursera-*.tar.gz*')\n    local('twine upload dist/coursera-*.tar.gz*')\n    local(\"git push\")\n    local(\"git push --tags\")\n", "description": "Script for downloading Coursera.org videos and naming them.", "file_name": "fabfile.py", "id": "5d5ee27cf767af69efe0d78983e08d96", "language": "Python", "project_name": "coursera-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/coursera-dl-coursera-dl/coursera-dl-coursera-dl-2e265ef/fabfile.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:46:57Z", "url": "https://github.com/coursera-dl/coursera-dl", "wiki": true}