{"author": "keon", "code": "\n\n\n\n\n\n\n\n\n# [1,2,3,0,4],\n\n\n\n\n# [0,3,2,1,4].\n# We can swap 1 with 0 in the initial array to get [0,2,3,1,4] and so on.\n\n\n\"\"\"\nNow also prints the sequence of changes in states.\nOutput of this example :-\n\ninitial: [1, 2, 3, 0, 4]\nfinal:   [0, 3, 2, 1, 4]\nSteps =  4\nSequence : \n0 2 3 1 4\n2 0 3 1 4\n2 3 0 1 4\n0 3 2 1 4\n\n\"\"\"\n\n\ndef garage(initial, final):\n    initial = initial[::]     \n    steps = 0\n    seq = []                  \n    while initial != final:\n        zero = initial.index(0)\n        if zero != final.index(0):\n            car_to_move = final[zero]\n            pos = initial.index(car_to_move)\n            initial[zero], initial[pos] = initial[pos], initial[zero]\n        else:\n            for i in range(len(initial)):\n                if initial[i] != final[i]:\n                    initial[zero], initial[i] = initial[i], initial[zero]\n                    break\n        seq.append(initial[::])\n        steps += 1\n    seq = \"\\n\".join(\" \".join(map(str, s)) for s in seq)   \n    return steps, seq\n\nif __name__ == \"__main__\":\n    initial = [1, 2, 3, 0, 4]\n    final = [0, 3, 2, 1, 4]\n    print(\"initial:\", initial)\n    print(\"final:  \", final)\n    steps, seq = garage(initial, final)\n    print(\"No. of Steps = \", steps)\n    print(\"Steps Sequence : \")\n    print(seq)\n", "comments": "    now also prints sequence changes states  output example     initial   1  2  3  0  4  final     0  3  2  1  4  steps    4 sequence    0 2 3 1 4 2 0 3 1 4 2 3 0 1 4 0 3 2 1 4         there parking lot one empty spot  given initial state    parking lot final state  each step allowed    move car    place move empty spot     the goal find least movement needed rearrange    parking lot initial state final state     say initial state array      1 2 3 0 4      1 2 3 4 different cars  0 empty spot     and final state     0 3 2 1 4      we swap 1 0 initial array get  0 2 3 1 4      each step swap 0     edited cyberking saga    create copy prevent changes original  initial      list step sequence    convert string ", "content": "# There is a parking lot with only one empty spot. Given the initial state\n# of the parking lot and the final state. Each step we are only allowed to\n# move a car\n# out of its place and move it into the empty spot.\n# The goal is to find out the least movement needed to rearrange\n# the parking lot from the initial state to the final state.\n\n# Say the initial state is an array:\n\n# [1,2,3,0,4],\n# where 1,2,3,4 are different cars, and 0 is the empty spot.\n\n# And the final state is\n\n# [0,3,2,1,4].\n# We can swap 1 with 0 in the initial array to get [0,2,3,1,4] and so on.\n# Each step swap with 0 only.\n# Edited by cyberking-saga\n\"\"\"\nNow also prints the sequence of changes in states.\nOutput of this example :-\n\ninitial: [1, 2, 3, 0, 4]\nfinal:   [0, 3, 2, 1, 4]\nSteps =  4\nSequence : \n0 2 3 1 4\n2 0 3 1 4\n2 3 0 1 4\n0 3 2 1 4\n\n\"\"\"\n\n\ndef garage(initial, final):\n    initial = initial[::]     # create a copy to prevent changes in original 'initial'.\n    steps = 0\n    seq = []                  # list of each step in sequence\n    while initial != final:\n        zero = initial.index(0)\n        if zero != final.index(0):\n            car_to_move = final[zero]\n            pos = initial.index(car_to_move)\n            initial[zero], initial[pos] = initial[pos], initial[zero]\n        else:\n            for i in range(len(initial)):\n                if initial[i] != final[i]:\n                    initial[zero], initial[i] = initial[i], initial[zero]\n                    break\n        seq.append(initial[::])\n        steps += 1\n    seq = \"\\n\".join(\" \".join(map(str, s)) for s in seq)   # convert to string\n    return steps, seq\n\nif __name__ == \"__main__\":\n    initial = [1, 2, 3, 0, 4]\n    final = [0, 3, 2, 1, 4]\n    print(\"initial:\", initial)\n    print(\"final:  \", final)\n    steps, seq = garage(initial, final)\n    print(\"No. of Steps = \", steps)\n    print(\"Steps Sequence : \")\n    print(seq)\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "garage.py", "id": "48d26f3778520d0109a8c7d0ecca43ff", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/array/garage.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}