{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass FlipagramIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?flipagram\\.com/f/(?P<id>[^/?\n    _TEST = {\n        'url': 'https://flipagram.com/f/nyvTSJMKId',\n        'md5': '888dcf08b7ea671381f00fab74692755',\n        'info_dict': {\n            'id': 'nyvTSJMKId',\n            'ext': 'mp4',\n            'title': 'Flipagram by sjuria101 featuring Midnight Memories by One Direction',\n            'description': 'md5:d55e32edc55261cae96a41fa85ff630e',\n            'duration': 35.571,\n            'timestamp': 1461244995,\n            'upload_date': '20160421',\n            'uploader': 'kitty juria',\n            'uploader_id': 'sjuria101',\n            'creator': 'kitty juria',\n            'view_count': int,\n            'like_count': int,\n            'repost_count': int,\n            'comment_count': int,\n            'comments': list,\n            'formats': 'mincount:2',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_data = self._parse_json(\n            self._search_regex(\n                r'window\\.reactH2O\\s*=\\s*({.+});', webpage, 'video data'),\n            video_id)\n\n        flipagram = video_data['flipagram']\n        video = flipagram['video']\n\n        json_ld = self._search_json_ld(webpage, video_id, default={})\n        title = json_ld.get('title') or flipagram['captionText']\n        description = json_ld.get('description') or flipagram.get('captionText')\n\n        formats = [{\n            'url': video['url'],\n            'width': int_or_none(video.get('width')),\n            'height': int_or_none(video.get('height')),\n            'filesize': int_or_none(video_data.get('size')),\n        }]\n\n        preview_url = try_get(\n            flipagram, lambda x: x['music']['track']['previewUrl'], compat_str)\n        if preview_url:\n            formats.append({\n                'url': preview_url,\n                'ext': 'm4a',\n                'vcodec': 'none',\n            })\n\n        self._sort_formats(formats)\n\n        counts = flipagram.get('counts', {})\n        user = flipagram.get('user', {})\n        video_data = flipagram.get('video', {})\n\n        thumbnails = [{\n            'url': self._proto_relative_url(cover['url']),\n            'width': int_or_none(cover.get('width')),\n            'height': int_or_none(cover.get('height')),\n            'filesize': int_or_none(cover.get('size')),\n        } for cover in flipagram.get('covers', []) if cover.get('url')]\n\n        \n        \n        comments = []\n        for comment in video_data.get('comments', {}).get(video_id, {}).get('items', []):\n            text = comment.get('comment')\n            if not text or not isinstance(text, list):\n                continue\n            comments.append({\n                'author': comment.get('user', {}).get('name'),\n                'author_id': comment.get('user', {}).get('username'),\n                'id': comment.get('id'),\n                'text': text[0],\n                'timestamp': unified_timestamp(comment.get('created')),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': float_or_none(flipagram.get('duration'), 1000),\n            'thumbnails': thumbnails,\n            'timestamp': unified_timestamp(flipagram.get('iso8601Created')),\n            'uploader': user.get('name'),\n            'uploader_id': user.get('username'),\n            'creator': user.get('name'),\n            'view_count': int_or_none(counts.get('plays')),\n            'like_count': int_or_none(counts.get('likes')),\n            'repost_count': int_or_none(counts.get('reflips')),\n            'comment_count': int_or_none(counts.get('comments')),\n            'comments': comments,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n# Note that this only retrieves comments that are initially loaded.\n# For videos with large amounts of comments, most won't be retrieved.\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    float_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass FlipagramIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?flipagram\\.com/f/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://flipagram.com/f/nyvTSJMKId',\n        'md5': '888dcf08b7ea671381f00fab74692755',\n        'info_dict': {\n            'id': 'nyvTSJMKId',\n            'ext': 'mp4',\n            'title': 'Flipagram by sjuria101 featuring Midnight Memories by One Direction',\n            'description': 'md5:d55e32edc55261cae96a41fa85ff630e',\n            'duration': 35.571,\n            'timestamp': 1461244995,\n            'upload_date': '20160421',\n            'uploader': 'kitty juria',\n            'uploader_id': 'sjuria101',\n            'creator': 'kitty juria',\n            'view_count': int,\n            'like_count': int,\n            'repost_count': int,\n            'comment_count': int,\n            'comments': list,\n            'formats': 'mincount:2',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_data = self._parse_json(\n            self._search_regex(\n                r'window\\.reactH2O\\s*=\\s*({.+});', webpage, 'video data'),\n            video_id)\n\n        flipagram = video_data['flipagram']\n        video = flipagram['video']\n\n        json_ld = self._search_json_ld(webpage, video_id, default={})\n        title = json_ld.get('title') or flipagram['captionText']\n        description = json_ld.get('description') or flipagram.get('captionText')\n\n        formats = [{\n            'url': video['url'],\n            'width': int_or_none(video.get('width')),\n            'height': int_or_none(video.get('height')),\n            'filesize': int_or_none(video_data.get('size')),\n        }]\n\n        preview_url = try_get(\n            flipagram, lambda x: x['music']['track']['previewUrl'], compat_str)\n        if preview_url:\n            formats.append({\n                'url': preview_url,\n                'ext': 'm4a',\n                'vcodec': 'none',\n            })\n\n        self._sort_formats(formats)\n\n        counts = flipagram.get('counts', {})\n        user = flipagram.get('user', {})\n        video_data = flipagram.get('video', {})\n\n        thumbnails = [{\n            'url': self._proto_relative_url(cover['url']),\n            'width': int_or_none(cover.get('width')),\n            'height': int_or_none(cover.get('height')),\n            'filesize': int_or_none(cover.get('size')),\n        } for cover in flipagram.get('covers', []) if cover.get('url')]\n\n        # Note that this only retrieves comments that are initially loaded.\n        # For videos with large amounts of comments, most won't be retrieved.\n        comments = []\n        for comment in video_data.get('comments', {}).get(video_id, {}).get('items', []):\n            text = comment.get('comment')\n            if not text or not isinstance(text, list):\n                continue\n            comments.append({\n                'author': comment.get('user', {}).get('name'),\n                'author_id': comment.get('user', {}).get('username'),\n                'id': comment.get('id'),\n                'text': text[0],\n                'timestamp': unified_timestamp(comment.get('created')),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': float_or_none(flipagram.get('duration'), 1000),\n            'thumbnails': thumbnails,\n            'timestamp': unified_timestamp(flipagram.get('iso8601Created')),\n            'uploader': user.get('name'),\n            'uploader_id': user.get('username'),\n            'creator': user.get('name'),\n            'view_count': int_or_none(counts.get('plays')),\n            'like_count': int_or_none(counts.get('likes')),\n            'repost_count': int_or_none(counts.get('reflips')),\n            'comment_count': int_or_none(counts.get('comments')),\n            'comments': comments,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "flipagram.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/flipagram.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}