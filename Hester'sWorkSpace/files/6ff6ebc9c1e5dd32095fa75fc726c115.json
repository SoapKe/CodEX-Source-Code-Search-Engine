{"author": "ansible", "code": " (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\n\nfrom errno import EEXIST\nfrom ansible.errors import AnsibleError\nfrom ansible.module_utils._text import to_bytes, to_native, to_text\n\n\n__all__ = ['unfrackpath', 'makedirs_safe']\n\n\ndef unfrackpath(path, follow=True, basedir=None):\n    '''\n    Returns a path that is free of symlinks (if follow=True), environment variables, relative path traversals and symbols (~)\n\n    :arg path: A byte or text string representing a path to be canonicalized\n    :arg follow: A boolean to indicate of symlinks should be resolved or not\n    :raises UnicodeDecodeError: If the canonicalized version of the path\n        contains non-utf8 byte sequences.\n    :rtype: A text string (unicode on pyyhon2, str on python3).\n    :returns: An absolute path with symlinks, environment variables, and tilde\n        expanded.  Note that this does not check whether a path exists.\n\n    example::\n        '$HOME/../../var/mail' becomes '/var/spool/mail'\n    '''\n\n    if basedir is None:\n        basedir = os.getcwd()\n    elif os.path.isfile(basedir):\n        basedir = os.path.dirname(basedir)\n\n    final_path = os.path.expanduser(os.path.expandvars(to_bytes(path, errors='surrogate_or_strict')))\n\n    if not os.path.isabs(final_path):\n        final_path = os.path.join(to_bytes(basedir, errors='surrogate_or_strict'), final_path)\n\n    if follow:\n        final_path = os.path.realpath(final_path)\n\n    return to_text(os.path.normpath(final_path), errors='surrogate_or_strict')\n\n\ndef makedirs_safe(path, mode=None):\n    '''Safe way to create dirs in muliprocess/thread environments.\n\n    :arg path: A byte or text string representing a directory to be created\n    :kwarg mode: If given, the mode to set the directory to\n    :raises AnsibleError: If the directory cannot be created and does not already exists.\n    :raises UnicodeDecodeError: if the path is not decodable in the utf-8 encoding.\n    '''\n\n    rpath = unfrackpath(path)\n    b_rpath = to_bytes(rpath)\n    if not os.path.exists(b_rpath):\n        try:\n            if mode:\n                os.makedirs(b_rpath, mode)\n            else:\n                os.makedirs(b_rpath)\n        except OSError as e:\n            if e.errno != EEXIST:\n                raise AnsibleError(\"Unable to create local directories(%s): %s\" % (to_native(rpath), to_native(e)))\n\n\ndef basedir(source):\n    \n    source = to_bytes(source, errors='surrogate_or_strict')\n    dname = None\n    if os.path.isdir(source):\n        dname = source\n    elif source in [None, '', '.']:\n        dname = os.getcwd()\n    elif os.path.isfile(source):\n        dname = os.path.dirname(source)\n\n    if dname:\n         don't follow symlinks for basedir, enables source re-use\n        dname = os.path.abspath(dname)\n\n    return to_text(dname, errors='surrogate_or_strict')\n", "comments": "    returns directory inventory playbook              returns path free symlinks (if follow true)  environment variables  relative path traversals symbols ( )       arg path  a byte text string representing path canonicalized      arg follow  a boolean indicate symlinks resolved      raises unicodedecodeerror  if canonicalized version path         contains non utf8 byte sequences       rtype  a text string (unicode pyyhon2  str python3)       returns  an absolute path symlinks  environment variables  tilde         expanded   note check whether path exists       example             home       var mail  becomes   var spool mail               basedir none          basedir   os getcwd()     elif os path isfile(basedir)          basedir   os path dirname(basedir)      final path   os path expanduser(os path expandvars(to bytes(path  errors  surrogate strict )))      os path isabs(final path)          final path   os path join(to bytes(basedir  errors  surrogate strict )  final path)      follow          final path   os path realpath(final path)      return text(os path normpath(final path)  errors  surrogate strict )   def makedirs safe(path  mode none)         safe way create dirs muliprocess thread environments        arg path  a byte text string representing directory created      kwarg mode  if given  mode set directory      raises ansibleerror  if directory cannot created already exists       raises unicodedecodeerror  path decodable utf 8 encoding             (c) 2012 2014  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       follow symlinks basedir  enables source use ", "content": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\n\nfrom errno import EEXIST\nfrom ansible.errors import AnsibleError\nfrom ansible.module_utils._text import to_bytes, to_native, to_text\n\n\n__all__ = ['unfrackpath', 'makedirs_safe']\n\n\ndef unfrackpath(path, follow=True, basedir=None):\n    '''\n    Returns a path that is free of symlinks (if follow=True), environment variables, relative path traversals and symbols (~)\n\n    :arg path: A byte or text string representing a path to be canonicalized\n    :arg follow: A boolean to indicate of symlinks should be resolved or not\n    :raises UnicodeDecodeError: If the canonicalized version of the path\n        contains non-utf8 byte sequences.\n    :rtype: A text string (unicode on pyyhon2, str on python3).\n    :returns: An absolute path with symlinks, environment variables, and tilde\n        expanded.  Note that this does not check whether a path exists.\n\n    example::\n        '$HOME/../../var/mail' becomes '/var/spool/mail'\n    '''\n\n    if basedir is None:\n        basedir = os.getcwd()\n    elif os.path.isfile(basedir):\n        basedir = os.path.dirname(basedir)\n\n    final_path = os.path.expanduser(os.path.expandvars(to_bytes(path, errors='surrogate_or_strict')))\n\n    if not os.path.isabs(final_path):\n        final_path = os.path.join(to_bytes(basedir, errors='surrogate_or_strict'), final_path)\n\n    if follow:\n        final_path = os.path.realpath(final_path)\n\n    return to_text(os.path.normpath(final_path), errors='surrogate_or_strict')\n\n\ndef makedirs_safe(path, mode=None):\n    '''Safe way to create dirs in muliprocess/thread environments.\n\n    :arg path: A byte or text string representing a directory to be created\n    :kwarg mode: If given, the mode to set the directory to\n    :raises AnsibleError: If the directory cannot be created and does not already exists.\n    :raises UnicodeDecodeError: if the path is not decodable in the utf-8 encoding.\n    '''\n\n    rpath = unfrackpath(path)\n    b_rpath = to_bytes(rpath)\n    if not os.path.exists(b_rpath):\n        try:\n            if mode:\n                os.makedirs(b_rpath, mode)\n            else:\n                os.makedirs(b_rpath)\n        except OSError as e:\n            if e.errno != EEXIST:\n                raise AnsibleError(\"Unable to create local directories(%s): %s\" % (to_native(rpath), to_native(e)))\n\n\ndef basedir(source):\n    \"\"\" returns directory for inventory or playbook \"\"\"\n    source = to_bytes(source, errors='surrogate_or_strict')\n    dname = None\n    if os.path.isdir(source):\n        dname = source\n    elif source in [None, '', '.']:\n        dname = os.getcwd()\n    elif os.path.isfile(source):\n        dname = os.path.dirname(source)\n\n    if dname:\n        # don't follow symlinks for basedir, enables source re-use\n        dname = os.path.abspath(dname)\n\n    return to_text(dname, errors='surrogate_or_strict')\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "path.py", "id": "6ff6ebc9c1e5dd32095fa75fc726c115", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/utils/path.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}