{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_unquote_plus,\n)\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n)\n\n\nclass PlayvidIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?playvid\\.com/watch(\\?v=|/)(?P<id>.+?)(?:\n    _TESTS = [{\n        'url': 'http://www.playvid.com/watch/RnmBNgtrrJu',\n        'md5': 'ffa2f6b2119af359f544388d8c01eb6c',\n        'info_dict': {\n            'id': 'RnmBNgtrrJu',\n            'ext': 'mp4',\n            'title': 'md5:9256d01c6317e3f703848b5906880dc8',\n            'duration': 82,\n            'age_limit': 18,\n        },\n        'skip': 'Video removed due to ToS',\n    }, {\n        'url': 'http://www.playvid.com/watch/hwb0GpNkzgH',\n        'md5': '39d49df503ad7b8f23a4432cbf046477',\n        'info_dict': {\n            'id': 'hwb0GpNkzgH',\n            'ext': 'mp4',\n            'title': 'Ellen Euro Cutie Blond Takes a Sexy Survey Get Facial in The Park',\n            'age_limit': 18,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        m_error = re.search(\n            r'<div class=\"block-error\">\\s*<div class=\"heading\">\\s*<div>(?P<msg>.+?)</div>\\s*</div>', webpage)\n        if m_error:\n            raise ExtractorError(clean_html(m_error.group('msg')), expected=True)\n\n        video_title = None\n        duration = None\n        video_thumbnail = None\n        formats = []\n\n        \n        flashvars = self._html_search_regex(\n            r'flashvars=\"(.+?)\"', webpage, 'flashvars')\n\n        infos = compat_urllib_parse_unquote(flashvars).split(r'&')\n        for info in infos:\n            videovars_match = re.match(r'^video_vars\\[(.+?)\\]=(.+?)$', info)\n            if videovars_match:\n                key = videovars_match.group(1)\n                val = videovars_match.group(2)\n\n                if key == 'title':\n                    video_title = compat_urllib_parse_unquote_plus(val)\n                if key == 'duration':\n                    try:\n                        duration = int(val)\n                    except ValueError:\n                        pass\n                if key == 'big_thumb':\n                    video_thumbnail = val\n\n                videourl_match = re.match(\n                    r'^video_urls\\]\\[(?P<resolution>[0-9]+)p', key)\n                if videourl_match:\n                    height = int(videourl_match.group('resolution'))\n                    formats.append({\n                        'height': height,\n                        'url': val,\n                    })\n        self._sort_formats(formats)\n\n        \n        if video_title is None:\n            video_title = self._html_search_regex(\n                r'<title>(.*?)</title', webpage, 'title')\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': video_title,\n            'thumbnail': video_thumbnail,\n            'duration': duration,\n            'description': None,\n            'age_limit': 18\n        }\n", "comments": "#|$)'\n# most of the information is stored in the flashvars\n# Extract title - should be in the flashvars; if not, look elsewhere\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_unquote_plus,\n)\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n)\n\n\nclass PlayvidIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?playvid\\.com/watch(\\?v=|/)(?P<id>.+?)(?:#|$)'\n    _TESTS = [{\n        'url': 'http://www.playvid.com/watch/RnmBNgtrrJu',\n        'md5': 'ffa2f6b2119af359f544388d8c01eb6c',\n        'info_dict': {\n            'id': 'RnmBNgtrrJu',\n            'ext': 'mp4',\n            'title': 'md5:9256d01c6317e3f703848b5906880dc8',\n            'duration': 82,\n            'age_limit': 18,\n        },\n        'skip': 'Video removed due to ToS',\n    }, {\n        'url': 'http://www.playvid.com/watch/hwb0GpNkzgH',\n        'md5': '39d49df503ad7b8f23a4432cbf046477',\n        'info_dict': {\n            'id': 'hwb0GpNkzgH',\n            'ext': 'mp4',\n            'title': 'Ellen Euro Cutie Blond Takes a Sexy Survey Get Facial in The Park',\n            'age_limit': 18,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        m_error = re.search(\n            r'<div class=\"block-error\">\\s*<div class=\"heading\">\\s*<div>(?P<msg>.+?)</div>\\s*</div>', webpage)\n        if m_error:\n            raise ExtractorError(clean_html(m_error.group('msg')), expected=True)\n\n        video_title = None\n        duration = None\n        video_thumbnail = None\n        formats = []\n\n        # most of the information is stored in the flashvars\n        flashvars = self._html_search_regex(\n            r'flashvars=\"(.+?)\"', webpage, 'flashvars')\n\n        infos = compat_urllib_parse_unquote(flashvars).split(r'&')\n        for info in infos:\n            videovars_match = re.match(r'^video_vars\\[(.+?)\\]=(.+?)$', info)\n            if videovars_match:\n                key = videovars_match.group(1)\n                val = videovars_match.group(2)\n\n                if key == 'title':\n                    video_title = compat_urllib_parse_unquote_plus(val)\n                if key == 'duration':\n                    try:\n                        duration = int(val)\n                    except ValueError:\n                        pass\n                if key == 'big_thumb':\n                    video_thumbnail = val\n\n                videourl_match = re.match(\n                    r'^video_urls\\]\\[(?P<resolution>[0-9]+)p', key)\n                if videourl_match:\n                    height = int(videourl_match.group('resolution'))\n                    formats.append({\n                        'height': height,\n                        'url': val,\n                    })\n        self._sort_formats(formats)\n\n        # Extract title - should be in the flashvars; if not, look elsewhere\n        if video_title is None:\n            video_title = self._html_search_regex(\n                r'<title>(.*?)</title', webpage, 'title')\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': video_title,\n            'thumbnail': video_thumbnail,\n            'duration': duration,\n            'description': None,\n            'age_limit': 18\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "playvid.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/playvid.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}