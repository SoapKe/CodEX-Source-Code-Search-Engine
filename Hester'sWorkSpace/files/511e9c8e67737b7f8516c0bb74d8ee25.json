{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport time\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\nfrom odoo.exceptions import ValidationError\n\n\nclass ISRTest(AccountingTestCase):\n\n    def create_invoice(self, currency_to_use='base.CHF'):\n        \"\"\" Generates a test invoice \"\"\"\n        account_receivable = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1)\n        currency = self.env.ref(currency_to_use)\n        partner_agrolait = self.env.ref(\"base.res_partner_2\")\n        product = self.env.ref(\"product.product_product_4\")\n        account_revenue = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1)\n\n        invoice = self.env['account.invoice'].create({\n            'partner_id': partner_agrolait.id,\n            'reference_type': 'none',\n            'currency_id': currency.id,\n            'name': 'invoice to client',\n            'account_id': account_receivable.id,\n            'type': 'out_invoice',\n            'date_invoice': time.strftime('%Y') + '-12-22',\n        })\n\n        self.env['account.invoice.line'].create({\n            'product_id': product.id,\n            'quantity': 1,\n            'price_unit': 42,\n            'invoice_id': invoice.id,\n            'name': 'something',\n            'account_id': account_revenue.id,\n        })\n\n        invoice.action_invoice_open()\n\n        return invoice\n\n    def create_account(self, number):\n        \"\"\" Generates a test res.partner.bank. \"\"\"\n        return self.env['res.partner.bank'].create({\n            'acc_number': number\n        })\n\n    def print_isr(self, invoice):\n        try:\n            invoice.isr_print()\n            return True\n        except ValidationError:\n            return False\n\n    def isr_not_generated(self, invoice):\n        \"\"\" Prints the given invoice and tests that no ISR generation is triggered. \"\"\"\n        self.assertFalse(self.print_isr(invoice), 'No ISR should be generated for this invoice')\n\n    def isr_generated(self, invoice):\n        \"\"\" Prints the given invoice and tests that an ISR generation is triggered. \"\"\"\n        self.assertTrue(self.print_isr(invoice), 'An ISR should have been generated')\n\n    def test_l10n_ch_postals(self):\n        \n        \n        account_test_postal_ok = self.create_account('010391391')\n        self.assertEqual(account_test_postal_ok.acc_type, 'postal', \"A valid postal number in acc_number should set its type to 'postal'\")\n        self.assertEqual(account_test_postal_ok.l10n_ch_postal, '010391391', \"A postal account should have a postal reference identical to its account number\")\n\n        \n        \n        account_test_postal_wrong = self.create_account('010391394')\n        self.assertNotEqual(account_test_postal_wrong.acc_type, 'postal', \"A non-postal account cannot be of type 'postal'\")\n\n        \n        account_test_iban_ok = self.create_account('CH6309000000250097798')\n        self.assertEqual(account_test_iban_ok.acc_type, 'iban', \"The IBAN must be valid\")\n        self.assertEqual(account_test_iban_ok.l10n_ch_postal, '000250097798', \"A valid swiss IBAN should set the postal reference\")\n\n        \n        account_test_iban_wrong = self.create_account('GR1601101250000000012300695')\n        self.assertEqual(account_test_iban_wrong.acc_type, 'iban', \"The IBAN must be valid\")\n        self.assertFalse(account_test_iban_wrong.l10n_ch_postal, \"A valid swiss IBAN should set the postal reference\")\n\n    def test_isr(self):\n        \n        \n        invoice_1 = self.create_invoice('base.CHF')\n        self.isr_not_generated(invoice_1)\n\n        \n        test_account = self.create_account('250097798')\n        invoice_1.partner_bank_id = test_account\n        self.isr_not_generated(invoice_1)\n\n        \n        test_bank = self.env['res.bank'].create({\n                'name':'Money Drop',\n                'l10n_ch_postal_chf':'010391391'\n        })\n\n        test_account.bank_id = test_bank\n        self.isr_generated(invoice_1)\n\n        #Now, let us show that, with the same data, an invoice in euros does not generate any ISR (because the bank does not have any EUR postal reference)\n        invoice_2 = self.create_invoice('base.EUR')\n        invoice_2.partner_bank_id = test_account\n        self.isr_not_generated(invoice_2)\n", "comments": "    generates test invoice             account receivable   self env  account account   search( ( user type id        self env ref( account data account type receivable ) id)   limit 1)         currency   self env ref(currency use)         partner agrolait   self env ref( base res partner 2 )         product   self env ref( product product product 4 )         account revenue   self env  account account   search( ( user type id        self env ref( account data account type revenue ) id)   limit 1)          invoice   self env  account invoice   create(               partner id   partner agrolait id               reference type    none                currency id   currency id               name    invoice client                account id   account receivable id               type    invoice                date invoice   time strftime(  y )     12 22            )          self env  account invoice line   create(               product id   product id               quantity   1               price unit   42               invoice id   invoice id               name    something                account id   account revenue id           )          invoice action invoice open()          return invoice      def create account(self  number)              generates test res partner bank              return self env  res partner bank   create(               acc number   number          )      def print isr(self  invoice)          try              invoice isr print()             return true         except validationerror              return false      def isr generated(self  invoice)              prints given invoice tests isr generation triggered              self assertfalse(self print isr(invoice)   no isr generated invoice )      def isr generated(self  invoice)              prints given invoice tests isr generation triggered             coding  utf 8        part odoo  see license file full copyright licensing details    an account whose number set valid postal number becomes  postal    account sets postal reference field    an account whose number set non postal value get    postal  type   a swiss iban account contains postal reference   a non swiss iban must allow computation postal reference   let us test generation isr invoice  first showing   isr report generated odoo data needs    now add account payment invoice  still cannot generate isr   finally  add bank coordinates account  the isr available generate   now  let us show  data  invoice euros generate isr (because bank eur postal reference) ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport time\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\nfrom odoo.exceptions import ValidationError\n\n\nclass ISRTest(AccountingTestCase):\n\n    def create_invoice(self, currency_to_use='base.CHF'):\n        \"\"\" Generates a test invoice \"\"\"\n        account_receivable = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1)\n        currency = self.env.ref(currency_to_use)\n        partner_agrolait = self.env.ref(\"base.res_partner_2\")\n        product = self.env.ref(\"product.product_product_4\")\n        account_revenue = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1)\n\n        invoice = self.env['account.invoice'].create({\n            'partner_id': partner_agrolait.id,\n            'reference_type': 'none',\n            'currency_id': currency.id,\n            'name': 'invoice to client',\n            'account_id': account_receivable.id,\n            'type': 'out_invoice',\n            'date_invoice': time.strftime('%Y') + '-12-22',\n        })\n\n        self.env['account.invoice.line'].create({\n            'product_id': product.id,\n            'quantity': 1,\n            'price_unit': 42,\n            'invoice_id': invoice.id,\n            'name': 'something',\n            'account_id': account_revenue.id,\n        })\n\n        invoice.action_invoice_open()\n\n        return invoice\n\n    def create_account(self, number):\n        \"\"\" Generates a test res.partner.bank. \"\"\"\n        return self.env['res.partner.bank'].create({\n            'acc_number': number\n        })\n\n    def print_isr(self, invoice):\n        try:\n            invoice.isr_print()\n            return True\n        except ValidationError:\n            return False\n\n    def isr_not_generated(self, invoice):\n        \"\"\" Prints the given invoice and tests that no ISR generation is triggered. \"\"\"\n        self.assertFalse(self.print_isr(invoice), 'No ISR should be generated for this invoice')\n\n    def isr_generated(self, invoice):\n        \"\"\" Prints the given invoice and tests that an ISR generation is triggered. \"\"\"\n        self.assertTrue(self.print_isr(invoice), 'An ISR should have been generated')\n\n    def test_l10n_ch_postals(self):\n        #An account whose number is set to a valid postal number becomes a 'postal'\n        #account and sets its postal reference field.\n        account_test_postal_ok = self.create_account('010391391')\n        self.assertEqual(account_test_postal_ok.acc_type, 'postal', \"A valid postal number in acc_number should set its type to 'postal'\")\n        self.assertEqual(account_test_postal_ok.l10n_ch_postal, '010391391', \"A postal account should have a postal reference identical to its account number\")\n\n        #An account whose number is set to a non-postal value should not get the\n        #'postal' type\n        account_test_postal_wrong = self.create_account('010391394')\n        self.assertNotEqual(account_test_postal_wrong.acc_type, 'postal', \"A non-postal account cannot be of type 'postal'\")\n\n        #A swiss IBAN account contains a postal reference\n        account_test_iban_ok = self.create_account('CH6309000000250097798')\n        self.assertEqual(account_test_iban_ok.acc_type, 'iban', \"The IBAN must be valid\")\n        self.assertEqual(account_test_iban_ok.l10n_ch_postal, '000250097798', \"A valid swiss IBAN should set the postal reference\")\n\n        #A non-swiss IBAN must not allow the computation of a postal reference\n        account_test_iban_wrong = self.create_account('GR1601101250000000012300695')\n        self.assertEqual(account_test_iban_wrong.acc_type, 'iban', \"The IBAN must be valid\")\n        self.assertFalse(account_test_iban_wrong.l10n_ch_postal, \"A valid swiss IBAN should set the postal reference\")\n\n    def test_isr(self):\n        #Let us test the generation of an ISR for an invoice, first by showing an\n        #ISR report is only generated when Odoo has all the data it needs.\n        invoice_1 = self.create_invoice('base.CHF')\n        self.isr_not_generated(invoice_1)\n\n        #Now we add an account for payment to our invoice, but still cannot generate the ISR\n        test_account = self.create_account('250097798')\n        invoice_1.partner_bank_id = test_account\n        self.isr_not_generated(invoice_1)\n\n        #Finally, we add bank coordinates to our account. The ISR should now be available to generate\n        test_bank = self.env['res.bank'].create({\n                'name':'Money Drop',\n                'l10n_ch_postal_chf':'010391391'\n        })\n\n        test_account.bank_id = test_bank\n        self.isr_generated(invoice_1)\n\n        #Now, let us show that, with the same data, an invoice in euros does not generate any ISR (because the bank does not have any EUR postal reference)\n        invoice_2 = self.create_invoice('base.EUR')\n        invoice_2.partner_bank_id = test_account\n        self.isr_not_generated(invoice_2)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_l10n_ch_isr.py", "id": "511e9c8e67737b7f8516c0bb74d8ee25", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/l10n_ch/tests/test_l10n_ch_isr.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}