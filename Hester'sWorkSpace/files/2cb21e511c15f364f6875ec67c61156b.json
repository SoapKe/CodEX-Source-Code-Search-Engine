{"author": "odoo", "code": "from odoo.tests.common import TransactionCase\n\n\nclass TestBatchPicking(TransactionCase):\n\n    def setUp(self):\n        \"\"\" Create a picking batch with two pickings from stock to customer \"\"\"\n        super(TestBatchPicking, self).setUp()\n        self.stock_location = self.env.ref('stock.stock_location_stock')\n        self.customer_location = self.env.ref('stock.stock_location_customers')\n        self.partner_delta_id = self.env['ir.model.data'].xmlid_to_res_id('base.res_partner_4')\n        self.picking_type_out = self.env['ir.model.data'].xmlid_to_res_id('stock.picking_type_out')\n        self.productA = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'categ_id': self.env.ref('product.product_category_all').id,\n        })\n        self.productB = self.env['product.product'].create({\n            'name': 'Product B',\n            'type': 'product',\n            'categ_id': self.env.ref('product.product_category_all').id,\n        })\n\n        self.picking_client_1 = self.env['stock.picking'].create({\n            'location_id': self.stock_location.id,\n            'location_dest_id': self.customer_location.id,\n            'partner_id': self.partner_delta_id,\n            'picking_type_id': self.picking_type_out,\n        })\n\n        self.env['stock.move'].create({\n            'name': self.productA.name,\n            'product_id': self.productA.id,\n            'product_uom_qty': 10,\n            'product_uom': self.productA.uom_id.id,\n            'picking_id': self.picking_client_1.id,\n            'location_id': self.stock_location.id,\n            'location_dest_id': self.customer_location.id,\n        })\n\n        self.picking_client_2 = self.env['stock.picking'].create({\n            'location_id': self.stock_location.id,\n            'location_dest_id': self.customer_location.id,\n            'partner_id': self.partner_delta_id,\n            'picking_type_id': self.picking_type_out,\n        })\n\n        self.env['stock.move'].create({\n            'name': self.productB.name,\n            'product_id': self.productB.id,\n            'product_uom_qty': 10,\n            'product_uom': self.productA.uom_id.id,\n            'picking_id': self.picking_client_2.id,\n            'location_id': self.stock_location.id,\n            'location_dest_id': self.customer_location.id,\n        })\n\n        self.batch = self.env['stock.picking.batch'].create({\n            'name': 'Batch 1',\n            'picking_ids': [(4, self.picking_client_1.id), (4, self.picking_client_2.id)]\n        })\n\n    def test_simple_batch_with_manual_qty_done(self):\n        \"\"\" Test a simple batch picking with all quantity for picking available.\n        The user set all the quantity_done on picking manually and no wizard are used.\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 10.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        \n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be reserved')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be reserved')\n\n        self.picking_client_1.move_lines.quantity_done = 10\n        self.picking_client_2.move_lines.quantity_done = 10\n        self.batch.done()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_2.state, 'done', 'Picking 2 should be done')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        \n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)\n\n    def test_simple_batch_with_wizard(self):\n        \"\"\" Test a simple batch picking with all quantity for picking available.\n        The user use the wizard in order to complete automatically the quantity_done to\n        the initial demand (or reserved quantity in this test).\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 10.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        \n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be reserved')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be reserved')\n\n        \n        immediate_transfer_wizard_dict = self.batch.done()\n        self.assertTrue(immediate_transfer_wizard_dict)\n        immediate_transfer_wizard = self.env[(immediate_transfer_wizard_dict.get('res_model'))].browse(immediate_transfer_wizard_dict.get('res_id'))\n        self.assertEqual(len(immediate_transfer_wizard.pick_ids), 2)\n        immediate_transfer_wizard.process()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_2.state, 'done', 'Picking 2 should be done')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        \n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)\n\n    def test_batch_with_backorder_wizard(self):\n        \"\"\" Test a simple batch picking with only one quantity fully available.\n        The user will set by himself the quantity reserved for each picking and\n        run the picking batch. There should be a wizard asking for a backorder.\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        \n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be ready')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be ready')\n\n        self.picking_client_1.move_lines.quantity_done = 5\n        self.picking_client_2.move_lines.quantity_done = 10\n\n        \n        back_order_wizard_dict = self.batch.done()\n        self.assertTrue(back_order_wizard_dict)\n        back_order_wizard = self.env[(back_order_wizard_dict.get('res_model'))].browse(back_order_wizard_dict.get('res_id'))\n        self.assertEqual(len(back_order_wizard.pick_ids), 1)\n        self.assertEqual(self.picking_client_2.state, 'done', 'Picking 2 should be done')\n        back_order_wizard.process()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_1.move_lines.product_uom_qty, 5, 'initial demand should be 5 after picking split')\n        self.assertTrue(self.env['stock.picking'].search([('backorder_id', '=', self.picking_client_1.id)]), 'no back order created')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        \n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)\n\n    def test_batch_with_immediate_transfer_and_backorder_wizard(self):\n        \"\"\" Test a simple batch picking with only one product fully available.\n        Everything should be automatically. First one backorder in order to set quantity_done\n        to reserved quantity. After a second wizard asking for a backorder for the quantity that\n        has not been fully transfered.\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        \n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be ready')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be ready')\n\n        \n        immediate_transfer_wizard_dict = self.batch.done()\n        self.assertTrue(immediate_transfer_wizard_dict)\n        immediate_transfer_wizard = self.env[(immediate_transfer_wizard_dict.get('res_model'))].browse(immediate_transfer_wizard_dict.get('res_id'))\n        self.assertEqual(len(immediate_transfer_wizard.pick_ids), 2)\n        back_order_wizard_dict = immediate_transfer_wizard.process()\n        self.assertTrue(back_order_wizard_dict)\n        back_order_wizard = self.env[(back_order_wizard_dict.get('res_model'))].browse(back_order_wizard_dict.get('res_id'))\n        self.assertEqual(len(back_order_wizard.pick_ids), 1)\n        back_order_wizard.process()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_1.move_lines.product_uom_qty, 5, 'initial demand should be 5 after picking split')\n        self.assertTrue(self.env['stock.picking'].search([('backorder_id', '=', self.picking_client_1.id)]), 'no back order created')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        \n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)\n\n    def test_batch_with_immediate_transfer_and_backorder_wizard_with_manual_operations(self):\n        \"\"\" Test a simple batch picking with only one quantity fully available.\n        The user set the quantity done only for the partially available picking.\n        The test should run the immediate transfer for the first picking and then\n        the backorder wizard for the second picking.\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        \n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be ready')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be ready')\n\n        self.picking_client_1.move_lines.quantity_done = 5\n        \n        immediate_transfer_wizard_dict = self.batch.done()\n        self.assertTrue(immediate_transfer_wizard_dict)\n        immediate_transfer_wizard = self.env[(immediate_transfer_wizard_dict.get('res_model'))].browse(immediate_transfer_wizard_dict.get('res_id'))\n        self.assertEqual(len(immediate_transfer_wizard.pick_ids), 1)\n        back_order_wizard_dict = immediate_transfer_wizard.process()\n        self.assertTrue(back_order_wizard_dict)\n        back_order_wizard = self.env[(back_order_wizard_dict.get('res_model'))].browse(back_order_wizard_dict.get('res_id'))\n        self.assertEqual(len(back_order_wizard.pick_ids), 1)\n        back_order_wizard.process()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_1.move_lines.product_uom_qty, 5, 'initial demand should be 5 after picking split')\n        self.assertTrue(self.env['stock.picking'].search([('backorder_id', '=', self.picking_client_1.id)]), 'no back order created')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        \n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)", "comments": "    create picking batch two pickings stock customer             super(testbatchpicking  self) setup()         self stock location   self env ref( stock stock location stock )         self customer location   self env ref( stock stock location customers )         self partner delta id   self env  ir model data   xmlid res id( base res partner 4 )         self picking type   self env  ir model data   xmlid res id( stock picking type )         self producta   self env  product product   create(               name    product a                type    product                categ id   self env ref( product product category ) id           )         self productb   self env  product product   create(               name    product b                type    product                categ id   self env ref( product product category ) id           )          self picking client 1   self env  stock picking   create(               location id   self stock location id               location dest id   self customer location id               partner id   self partner delta id               picking type id   self picking type           )          self env  stock move   create(               name   self producta name               product id   self producta id               product uom qty   10               product uom   self producta uom id id               picking id   self picking client 1 id               location id   self stock location id               location dest id   self customer location id           )          self picking client 2   self env  stock picking   create(               location id   self stock location id               location dest id   self customer location id               partner id   self partner delta id               picking type id   self picking type           )          self env  stock move   create(               name   self productb name               product id   self productb id               product uom qty   10               product uom   self producta uom id id               picking id   self picking client 2 id               location id   self stock location id               location dest id   self customer location id           )          self batch   self env  stock picking batch   create(               name    batch 1                picking ids    (4  self picking client 1 id)  (4  self picking client 2 id)           )      def test simple batch manual qty done(self)              test simple batch picking quantity picking available          the user set quantity done picking manually wizard used                      self env  stock quant    update available quantity(self producta  self stock location  10 0)         self env  stock quant    update available quantity(self productb  self stock location  10 0)            confirm batch  picking assigned         self batch confirm picking()         self assertequal(self picking client 1 state   assigned    picking 1 reserved )         self assertequal(self picking client 2 state   assigned    picking 2 reserved )          self picking client 1 move lines quantity done   10         self picking client 2 move lines quantity done   10         self batch done()          self assertequal(self picking client 1 state   done    picking 1 done )         self assertequal(self picking client 2 state   done    picking 2 done )          quant a   self env  stock quant    gather(self producta  self stock location)         quant b   self env  stock quant    gather(self productb  self stock location)            ensure quantity picking moved         self assertfalse(quant a)         self assertfalse(quant b)      def test simple batch wizard(self)              test simple batch picking quantity picking available          the user use wizard order complete automatically quantity done         initial demand (or reserved quantity test)                      self env  stock quant    update available quantity(self producta  self stock location  10 0)         self env  stock quant    update available quantity(self productb  self stock location  10 0)            confirm batch  picking assigned         self batch confirm picking()         self assertequal(self picking client 1 state   assigned    picking 1 reserved )         self assertequal(self picking client 2 state   assigned    picking 2 reserved )            there wizard asking process picking without quantity done         immediate transfer wizard dict   self batch done()         self asserttrue(immediate transfer wizard dict)         immediate transfer wizard   self env (immediate transfer wizard dict get( res model ))  browse(immediate transfer wizard dict get( res id ))         self assertequal(len(immediate transfer wizard pick ids)  2)         immediate transfer wizard process()          self assertequal(self picking client 1 state   done    picking 1 done )         self assertequal(self picking client 2 state   done    picking 2 done )          quant a   self env  stock quant    gather(self producta  self stock location)         quant b   self env  stock quant    gather(self productb  self stock location)            ensure quantity picking moved         self assertfalse(quant a)         self assertfalse(quant b)      def test batch backorder wizard(self)              test simple batch picking one quantity fully available          the user set quantity reserved picking         run picking batch  there wizard asking backorder                      self env  stock quant    update available quantity(self producta  self stock location  5 0)         self env  stock quant    update available quantity(self productb  self stock location  10 0)            confirm batch  picking assigned         self batch confirm picking()         self assertequal(self picking client 1 state   assigned    picking 1 ready )         self assertequal(self picking client 2 state   assigned    picking 2 ready )          self picking client 1 move lines quantity done   5         self picking client 2 move lines quantity done   10            there wizard asking process picking without quantity done         back order wizard dict   self batch done()         self asserttrue(back order wizard dict)         back order wizard   self env (back order wizard dict get( res model ))  browse(back order wizard dict get( res id ))         self assertequal(len(back order wizard pick ids)  1)         self assertequal(self picking client 2 state   done    picking 2 done )         back order wizard process()          self assertequal(self picking client 1 state   done    picking 1 done )         self assertequal(self picking client 1 move lines product uom qty  5   initial demand 5 picking split )         self asserttrue(self env  stock picking   search( ( backorder id        self picking client 1 id) )   back order created )          quant a   self env  stock quant    gather(self producta  self stock location)         quant b   self env  stock quant    gather(self productb  self stock location)            ensure quantity picking moved         self assertfalse(quant a)         self assertfalse(quant b)      def test batch immediate transfer backorder wizard(self)              test simple batch picking one product fully available          everything automatically  first one backorder order set quantity done         reserved quantity  after second wizard asking backorder quantity         fully transfered                      self env  stock quant    update available quantity(self producta  self stock location  5 0)         self env  stock quant    update available quantity(self productb  self stock location  10 0)            confirm batch  picking assigned         self batch confirm picking()         self assertequal(self picking client 1 state   assigned    picking 1 ready )         self assertequal(self picking client 2 state   assigned    picking 2 ready )            there wizard asking process picking without quantity done         immediate transfer wizard dict   self batch done()         self asserttrue(immediate transfer wizard dict)         immediate transfer wizard   self env (immediate transfer wizard dict get( res model ))  browse(immediate transfer wizard dict get( res id ))         self assertequal(len(immediate transfer wizard pick ids)  2)         back order wizard dict   immediate transfer wizard process()         self asserttrue(back order wizard dict)         back order wizard   self env (back order wizard dict get( res model ))  browse(back order wizard dict get( res id ))         self assertequal(len(back order wizard pick ids)  1)         back order wizard process()          self assertequal(self picking client 1 state   done    picking 1 done )         self assertequal(self picking client 1 move lines product uom qty  5   initial demand 5 picking split )         self asserttrue(self env  stock picking   search( ( backorder id        self picking client 1 id) )   back order created )          quant a   self env  stock quant    gather(self producta  self stock location)         quant b   self env  stock quant    gather(self productb  self stock location)            ensure quantity picking moved         self assertfalse(quant a)         self assertfalse(quant b)      def test batch immediate transfer backorder wizard manual operations(self)              test simple batch picking one quantity fully available          the user set quantity done partially available picking          the test run immediate transfer first picking         backorder wizard second picking                 confirm batch  picking assigned    ensure quantity picking moved    confirm batch  picking assigned    there wizard asking process picking without quantity done    ensure quantity picking moved    confirm batch  picking assigned    there wizard asking process picking without quantity done    ensure quantity picking moved    confirm batch  picking assigned    there wizard asking process picking without quantity done    ensure quantity picking moved    confirm batch  picking assigned    there wizard asking process picking without quantity done    ensure quantity picking moved ", "content": "from odoo.tests.common import TransactionCase\n\n\nclass TestBatchPicking(TransactionCase):\n\n    def setUp(self):\n        \"\"\" Create a picking batch with two pickings from stock to customer \"\"\"\n        super(TestBatchPicking, self).setUp()\n        self.stock_location = self.env.ref('stock.stock_location_stock')\n        self.customer_location = self.env.ref('stock.stock_location_customers')\n        self.partner_delta_id = self.env['ir.model.data'].xmlid_to_res_id('base.res_partner_4')\n        self.picking_type_out = self.env['ir.model.data'].xmlid_to_res_id('stock.picking_type_out')\n        self.productA = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'categ_id': self.env.ref('product.product_category_all').id,\n        })\n        self.productB = self.env['product.product'].create({\n            'name': 'Product B',\n            'type': 'product',\n            'categ_id': self.env.ref('product.product_category_all').id,\n        })\n\n        self.picking_client_1 = self.env['stock.picking'].create({\n            'location_id': self.stock_location.id,\n            'location_dest_id': self.customer_location.id,\n            'partner_id': self.partner_delta_id,\n            'picking_type_id': self.picking_type_out,\n        })\n\n        self.env['stock.move'].create({\n            'name': self.productA.name,\n            'product_id': self.productA.id,\n            'product_uom_qty': 10,\n            'product_uom': self.productA.uom_id.id,\n            'picking_id': self.picking_client_1.id,\n            'location_id': self.stock_location.id,\n            'location_dest_id': self.customer_location.id,\n        })\n\n        self.picking_client_2 = self.env['stock.picking'].create({\n            'location_id': self.stock_location.id,\n            'location_dest_id': self.customer_location.id,\n            'partner_id': self.partner_delta_id,\n            'picking_type_id': self.picking_type_out,\n        })\n\n        self.env['stock.move'].create({\n            'name': self.productB.name,\n            'product_id': self.productB.id,\n            'product_uom_qty': 10,\n            'product_uom': self.productA.uom_id.id,\n            'picking_id': self.picking_client_2.id,\n            'location_id': self.stock_location.id,\n            'location_dest_id': self.customer_location.id,\n        })\n\n        self.batch = self.env['stock.picking.batch'].create({\n            'name': 'Batch 1',\n            'picking_ids': [(4, self.picking_client_1.id), (4, self.picking_client_2.id)]\n        })\n\n    def test_simple_batch_with_manual_qty_done(self):\n        \"\"\" Test a simple batch picking with all quantity for picking available.\n        The user set all the quantity_done on picking manually and no wizard are used.\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 10.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        # confirm batch, picking should be assigned\n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be reserved')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be reserved')\n\n        self.picking_client_1.move_lines.quantity_done = 10\n        self.picking_client_2.move_lines.quantity_done = 10\n        self.batch.done()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_2.state, 'done', 'Picking 2 should be done')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        # ensure that quantity for picking has been moved\n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)\n\n    def test_simple_batch_with_wizard(self):\n        \"\"\" Test a simple batch picking with all quantity for picking available.\n        The user use the wizard in order to complete automatically the quantity_done to\n        the initial demand (or reserved quantity in this test).\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 10.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        # confirm batch, picking should be assigned\n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be reserved')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be reserved')\n\n        # There should be a wizard asking to process picking without quantity done\n        immediate_transfer_wizard_dict = self.batch.done()\n        self.assertTrue(immediate_transfer_wizard_dict)\n        immediate_transfer_wizard = self.env[(immediate_transfer_wizard_dict.get('res_model'))].browse(immediate_transfer_wizard_dict.get('res_id'))\n        self.assertEqual(len(immediate_transfer_wizard.pick_ids), 2)\n        immediate_transfer_wizard.process()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_2.state, 'done', 'Picking 2 should be done')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        # ensure that quantity for picking has been moved\n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)\n\n    def test_batch_with_backorder_wizard(self):\n        \"\"\" Test a simple batch picking with only one quantity fully available.\n        The user will set by himself the quantity reserved for each picking and\n        run the picking batch. There should be a wizard asking for a backorder.\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        # confirm batch, picking should be assigned\n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be ready')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be ready')\n\n        self.picking_client_1.move_lines.quantity_done = 5\n        self.picking_client_2.move_lines.quantity_done = 10\n\n        # There should be a wizard asking to process picking without quantity done\n        back_order_wizard_dict = self.batch.done()\n        self.assertTrue(back_order_wizard_dict)\n        back_order_wizard = self.env[(back_order_wizard_dict.get('res_model'))].browse(back_order_wizard_dict.get('res_id'))\n        self.assertEqual(len(back_order_wizard.pick_ids), 1)\n        self.assertEqual(self.picking_client_2.state, 'done', 'Picking 2 should be done')\n        back_order_wizard.process()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_1.move_lines.product_uom_qty, 5, 'initial demand should be 5 after picking split')\n        self.assertTrue(self.env['stock.picking'].search([('backorder_id', '=', self.picking_client_1.id)]), 'no back order created')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        # ensure that quantity for picking has been moved\n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)\n\n    def test_batch_with_immediate_transfer_and_backorder_wizard(self):\n        \"\"\" Test a simple batch picking with only one product fully available.\n        Everything should be automatically. First one backorder in order to set quantity_done\n        to reserved quantity. After a second wizard asking for a backorder for the quantity that\n        has not been fully transfered.\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        # confirm batch, picking should be assigned\n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be ready')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be ready')\n\n        # There should be a wizard asking to process picking without quantity done\n        immediate_transfer_wizard_dict = self.batch.done()\n        self.assertTrue(immediate_transfer_wizard_dict)\n        immediate_transfer_wizard = self.env[(immediate_transfer_wizard_dict.get('res_model'))].browse(immediate_transfer_wizard_dict.get('res_id'))\n        self.assertEqual(len(immediate_transfer_wizard.pick_ids), 2)\n        back_order_wizard_dict = immediate_transfer_wizard.process()\n        self.assertTrue(back_order_wizard_dict)\n        back_order_wizard = self.env[(back_order_wizard_dict.get('res_model'))].browse(back_order_wizard_dict.get('res_id'))\n        self.assertEqual(len(back_order_wizard.pick_ids), 1)\n        back_order_wizard.process()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_1.move_lines.product_uom_qty, 5, 'initial demand should be 5 after picking split')\n        self.assertTrue(self.env['stock.picking'].search([('backorder_id', '=', self.picking_client_1.id)]), 'no back order created')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        # ensure that quantity for picking has been moved\n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)\n\n    def test_batch_with_immediate_transfer_and_backorder_wizard_with_manual_operations(self):\n        \"\"\" Test a simple batch picking with only one quantity fully available.\n        The user set the quantity done only for the partially available picking.\n        The test should run the immediate transfer for the first picking and then\n        the backorder wizard for the second picking.\n        \"\"\"\n        self.env['stock.quant']._update_available_quantity(self.productA, self.stock_location, 5.0)\n        self.env['stock.quant']._update_available_quantity(self.productB, self.stock_location, 10.0)\n\n        # confirm batch, picking should be assigned\n        self.batch.confirm_picking()\n        self.assertEqual(self.picking_client_1.state, 'assigned', 'Picking 1 should be ready')\n        self.assertEqual(self.picking_client_2.state, 'assigned', 'Picking 2 should be ready')\n\n        self.picking_client_1.move_lines.quantity_done = 5\n        # There should be a wizard asking to process picking without quantity done\n        immediate_transfer_wizard_dict = self.batch.done()\n        self.assertTrue(immediate_transfer_wizard_dict)\n        immediate_transfer_wizard = self.env[(immediate_transfer_wizard_dict.get('res_model'))].browse(immediate_transfer_wizard_dict.get('res_id'))\n        self.assertEqual(len(immediate_transfer_wizard.pick_ids), 1)\n        back_order_wizard_dict = immediate_transfer_wizard.process()\n        self.assertTrue(back_order_wizard_dict)\n        back_order_wizard = self.env[(back_order_wizard_dict.get('res_model'))].browse(back_order_wizard_dict.get('res_id'))\n        self.assertEqual(len(back_order_wizard.pick_ids), 1)\n        back_order_wizard.process()\n\n        self.assertEqual(self.picking_client_1.state, 'done', 'Picking 1 should be done')\n        self.assertEqual(self.picking_client_1.move_lines.product_uom_qty, 5, 'initial demand should be 5 after picking split')\n        self.assertTrue(self.env['stock.picking'].search([('backorder_id', '=', self.picking_client_1.id)]), 'no back order created')\n\n        quant_A = self.env['stock.quant']._gather(self.productA, self.stock_location)\n        quant_B = self.env['stock.quant']._gather(self.productB, self.stock_location)\n\n        # ensure that quantity for picking has been moved\n        self.assertFalse(quant_A)\n        self.assertFalse(quant_B)", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_batch_picking.py", "id": "2cb21e511c15f364f6875ec67c61156b", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/stock_picking_batch/tests/test_batch_picking.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}