{"author": "openai", "code": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nimport mujoco_py\n\nclass PusherEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        utils.EzPickle.__init__(self)\n        mujoco_env.MujocoEnv.__init__(self, 'pusher.xml', 5)\n\n    def step(self, a):\n        vec_1 = self.get_body_com(\"object\") - self.get_body_com(\"tips_arm\")\n        vec_2 = self.get_body_com(\"object\") - self.get_body_com(\"goal\")\n\n        reward_near = - np.linalg.norm(vec_1)\n        reward_dist = - np.linalg.norm(vec_2)\n        reward_ctrl = - np.square(a).sum()\n        reward = reward_dist + 0.1 * reward_ctrl + 0.5 * reward_near\n\n        self.do_simulation(a, self.frame_skip)\n        ob = self._get_obs()\n        done = False\n        return ob, reward, done, dict(reward_dist=reward_dist,\n                reward_ctrl=reward_ctrl)\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = -1\n        self.viewer.cam.distance = 4.0\n\n    def reset_model(self):\n        qpos = self.init_qpos\n\n        self.goal_pos = np.asarray([0, 0])\n        while True:\n            self.cylinder_pos = np.concatenate([\n                    self.np_random.uniform(low=-0.3, high=0, size=1),\n                    self.np_random.uniform(low=-0.2, high=0.2, size=1)])\n            if np.linalg.norm(self.cylinder_pos - self.goal_pos) > 0.17:\n                break\n\n        qpos[-4:-2] = self.cylinder_pos\n        qpos[-2:] = self.goal_pos\n        qvel = self.init_qvel + self.np_random.uniform(low=-0.005,\n                high=0.005, size=self.model.nv)\n        qvel[-4:] = 0\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[:7],\n            self.sim.data.qvel.flat[:7],\n            self.get_body_com(\"tips_arm\"),\n            self.get_body_com(\"object\"),\n            self.get_body_com(\"goal\"),\n        ])\n", "comments": "", "content": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nimport mujoco_py\n\nclass PusherEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        utils.EzPickle.__init__(self)\n        mujoco_env.MujocoEnv.__init__(self, 'pusher.xml', 5)\n\n    def step(self, a):\n        vec_1 = self.get_body_com(\"object\") - self.get_body_com(\"tips_arm\")\n        vec_2 = self.get_body_com(\"object\") - self.get_body_com(\"goal\")\n\n        reward_near = - np.linalg.norm(vec_1)\n        reward_dist = - np.linalg.norm(vec_2)\n        reward_ctrl = - np.square(a).sum()\n        reward = reward_dist + 0.1 * reward_ctrl + 0.5 * reward_near\n\n        self.do_simulation(a, self.frame_skip)\n        ob = self._get_obs()\n        done = False\n        return ob, reward, done, dict(reward_dist=reward_dist,\n                reward_ctrl=reward_ctrl)\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = -1\n        self.viewer.cam.distance = 4.0\n\n    def reset_model(self):\n        qpos = self.init_qpos\n\n        self.goal_pos = np.asarray([0, 0])\n        while True:\n            self.cylinder_pos = np.concatenate([\n                    self.np_random.uniform(low=-0.3, high=0, size=1),\n                    self.np_random.uniform(low=-0.2, high=0.2, size=1)])\n            if np.linalg.norm(self.cylinder_pos - self.goal_pos) > 0.17:\n                break\n\n        qpos[-4:-2] = self.cylinder_pos\n        qpos[-2:] = self.goal_pos\n        qvel = self.init_qvel + self.np_random.uniform(low=-0.005,\n                high=0.005, size=self.model.nv)\n        qvel[-4:] = 0\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[:7],\n            self.sim.data.qvel.flat[:7],\n            self.get_body_com(\"tips_arm\"),\n            self.get_body_com(\"object\"),\n            self.get_body_com(\"goal\"),\n        ])\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "pusher.py", "id": "7d59a5b87482108c6cd2a1e3148eca8a", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/pusher.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}