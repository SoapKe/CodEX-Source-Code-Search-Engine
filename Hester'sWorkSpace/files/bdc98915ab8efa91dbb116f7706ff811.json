{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, models, _\n\nimport logging\n_logger = logging.getLogger(__name__)\n\n\nclass AccountChartTemplate(models.Model):\n    _inherit = \"account.chart.template\"\n\n    @api.model\n    def generate_journals(self, acc_template_ref, company, journals_dict=None):\n        journal_to_add = [{'name': _('Stock Journal'), 'type': 'general', 'code': 'STJ', 'favorite': False, 'sequence': 8}]\n        return super(AccountChartTemplate, self).generate_journals(acc_template_ref=acc_template_ref, company=company, journals_dict=journal_to_add)\n\n    @api.multi\n    def generate_properties(self, acc_template_ref, company, property_list=None):\n        res = super(AccountChartTemplate, self).generate_properties(acc_template_ref=acc_template_ref, company=company)\n        PropertyObj = self.env['ir.property']  \n        value = self.env['account.journal'].search([('company_id', '=', company.id), ('code', '=', 'STJ'), ('type', '=', 'general')], limit=1)\n        if value:\n            field = self.env['ir.model.fields'].search([('name', '=', 'property_stock_journal'), ('model', '=', 'product.category'), ('relation', '=', 'account.journal')], limit=1)\n            vals = {\n                'name': 'property_stock_journal',\n                'company_id': company.id,\n                'fields_id': field.id,\n                'value': 'account.journal,%s' % value.id,\n            }\n            properties = PropertyObj.search([('name', '=', 'property_stock_journal'), ('company_id', '=', company.id)])\n            if properties:\n                \n                properties.write(vals)\n            else:\n                \n                PropertyObj.create(vals)\n\n        todo_list = [  \n            'property_stock_account_input_categ_id',\n            'property_stock_account_output_categ_id',\n            'property_stock_valuation_account_id',\n        ]\n        for record in todo_list:\n            account = getattr(self, record)\n            value = account and 'account.account,' + str(acc_template_ref[account.id]) or False\n            if value:\n                field = self.env['ir.model.fields'].search([('name', '=', record), ('model', '=', 'product.category'), ('relation', '=', 'account.account')], limit=1)\n                vals = {\n                    'name': record,\n                    'company_id': company.id,\n                    'fields_id': field.id,\n                    'value': value,\n                }\n                properties = PropertyObj.search([('name', '=', record), ('company_id', '=', company.id)])\n                if properties:\n                    \n                    properties.write(vals)\n                else:\n                    \n                    PropertyObj.create(vals)\n\n        return res\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     property stock journal    property exist  modify    create property    property stock accounts    property exist  modify    create property ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, models, _\n\nimport logging\n_logger = logging.getLogger(__name__)\n\n\nclass AccountChartTemplate(models.Model):\n    _inherit = \"account.chart.template\"\n\n    @api.model\n    def generate_journals(self, acc_template_ref, company, journals_dict=None):\n        journal_to_add = [{'name': _('Stock Journal'), 'type': 'general', 'code': 'STJ', 'favorite': False, 'sequence': 8}]\n        return super(AccountChartTemplate, self).generate_journals(acc_template_ref=acc_template_ref, company=company, journals_dict=journal_to_add)\n\n    @api.multi\n    def generate_properties(self, acc_template_ref, company, property_list=None):\n        res = super(AccountChartTemplate, self).generate_properties(acc_template_ref=acc_template_ref, company=company)\n        PropertyObj = self.env['ir.property']  # Property Stock Journal\n        value = self.env['account.journal'].search([('company_id', '=', company.id), ('code', '=', 'STJ'), ('type', '=', 'general')], limit=1)\n        if value:\n            field = self.env['ir.model.fields'].search([('name', '=', 'property_stock_journal'), ('model', '=', 'product.category'), ('relation', '=', 'account.journal')], limit=1)\n            vals = {\n                'name': 'property_stock_journal',\n                'company_id': company.id,\n                'fields_id': field.id,\n                'value': 'account.journal,%s' % value.id,\n            }\n            properties = PropertyObj.search([('name', '=', 'property_stock_journal'), ('company_id', '=', company.id)])\n            if properties:\n                # the property exist: modify it\n                properties.write(vals)\n            else:\n                # create the property\n                PropertyObj.create(vals)\n\n        todo_list = [  # Property Stock Accounts\n            'property_stock_account_input_categ_id',\n            'property_stock_account_output_categ_id',\n            'property_stock_valuation_account_id',\n        ]\n        for record in todo_list:\n            account = getattr(self, record)\n            value = account and 'account.account,' + str(acc_template_ref[account.id]) or False\n            if value:\n                field = self.env['ir.model.fields'].search([('name', '=', record), ('model', '=', 'product.category'), ('relation', '=', 'account.account')], limit=1)\n                vals = {\n                    'name': record,\n                    'company_id': company.id,\n                    'fields_id': field.id,\n                    'value': value,\n                }\n                properties = PropertyObj.search([('name', '=', record), ('company_id', '=', company.id)])\n                if properties:\n                    # the property exist: modify it\n                    properties.write(vals)\n                else:\n                    # create the property\n                    PropertyObj.create(vals)\n\n        return res\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "account_chart_template.py", "id": "bdc98915ab8efa91dbb116f7706ff811", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/stock_account/models/account_chart_template.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}