{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, models\n\nfrom odoo.tools import float_round\n\n\nclass MrpProduction(models.Model):\n    _description = 'Production'\n    _inherit = 'mrp.production'\n\n    def _create_byproduct_move(self, sub_product):\n        Move = self.env['stock.move']\n        for production in self:\n            source = production.product_id.property_stock_production.id\n            product_uom_factor = production.product_uom_id._compute_quantity(production.product_qty - production.qty_produced, production.bom_id.product_uom_id)\n            qty1 = sub_product.product_qty\n            qty1 *= product_uom_factor / production.bom_id.product_qty\n            data = {\n                'name': 'PROD:%s' % production.name,\n                'date': production.date_planned_start,\n                'product_id': sub_product.product_id.id,\n                'product_uom_qty': qty1,\n                'product_uom': sub_product.product_uom_id.id,\n                'location_id': source,\n                'location_dest_id': production.location_dest_id.id,\n                'operation_id': sub_product.operation_id.id,\n                'production_id': production.id,\n                'origin': production.name,\n                'unit_factor': qty1 / (production.product_qty - production.qty_produced),\n                'subproduct_id': sub_product.id\n            }\n            move = Move.create(data)\n            move._action_confirm()\n\n    @api.multi\n    def _generate_moves(self):\n        \"\"\" Generates moves and work orders\n        @return: Newly generated picking Id.\n        \"\"\"\n        res = super(MrpProduction, self)._generate_moves()\n        for production in self.filtered(lambda production: production.bom_id):\n            for sub_product in production.bom_id.sub_products:\n                production._create_byproduct_move(sub_product)\n        return res\n\n\nclass MrpProductProduce(models.TransientModel):\n    _name = \"mrp.product.produce\"\n    _description = \"Record Production\"\n    _inherit = \"mrp.product.produce\"\n\n    @api.multi\n    def check_finished_move_lots(self):\n        \"\"\" Handle by product tracked \"\"\"\n        by_product_moves = self.production_id.move_finished_ids.filtered(lambda m: m.product_id != self.product_id and m.product_id.tracking != 'none' and m.state not in ('done', 'cancel'))\n        for by_product_move in by_product_moves:\n            rounding = by_product_move.product_uom.rounding\n            quantity = float_round(self.product_qty * by_product_move.unit_factor, precision_rounding=rounding)\n            values = {\n                'move_id': by_product_move.id,\n                'product_id': by_product_move.product_id.id,\n                'production_id': self.production_id.id,\n                'product_uom_id': by_product_move.product_uom.id,\n                'location_id': by_product_move.location_id.id,\n                'location_dest_id': by_product_move.location_dest_id.id,\n            }\n            if by_product_move.product_id.tracking == 'lot':\n                values.update({\n                    'product_uom_qty': quantity,\n                    'qty_done': quantity,\n                })\n                self.env['stock.move.line'].create(values)\n            else:\n                values.update({\n                    'product_uom_qty': 1.0,\n                    'qty_done': 1.0,\n                })\n                for i in range(0, int(quantity)):\n                    self.env['stock.move.line'].create(values)\n        return super(MrpProductProduce, self).check_finished_move_lots()\n", "comments": "    generates moves work orders          return  newly generated picking id                      res   super(mrpproduction  self)  generate moves()         production self filtered(lambda production  production bom id)              sub product production bom id sub products                  production  create byproduct move(sub product)         return res   class mrpproductproduce(models transientmodel)       name    mrp product produce       description    record production       inherit    mrp product produce        api multi     def check finished move lots(self)              handle product tracked            coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, models\n\nfrom odoo.tools import float_round\n\n\nclass MrpProduction(models.Model):\n    _description = 'Production'\n    _inherit = 'mrp.production'\n\n    def _create_byproduct_move(self, sub_product):\n        Move = self.env['stock.move']\n        for production in self:\n            source = production.product_id.property_stock_production.id\n            product_uom_factor = production.product_uom_id._compute_quantity(production.product_qty - production.qty_produced, production.bom_id.product_uom_id)\n            qty1 = sub_product.product_qty\n            qty1 *= product_uom_factor / production.bom_id.product_qty\n            data = {\n                'name': 'PROD:%s' % production.name,\n                'date': production.date_planned_start,\n                'product_id': sub_product.product_id.id,\n                'product_uom_qty': qty1,\n                'product_uom': sub_product.product_uom_id.id,\n                'location_id': source,\n                'location_dest_id': production.location_dest_id.id,\n                'operation_id': sub_product.operation_id.id,\n                'production_id': production.id,\n                'origin': production.name,\n                'unit_factor': qty1 / (production.product_qty - production.qty_produced),\n                'subproduct_id': sub_product.id\n            }\n            move = Move.create(data)\n            move._action_confirm()\n\n    @api.multi\n    def _generate_moves(self):\n        \"\"\" Generates moves and work orders\n        @return: Newly generated picking Id.\n        \"\"\"\n        res = super(MrpProduction, self)._generate_moves()\n        for production in self.filtered(lambda production: production.bom_id):\n            for sub_product in production.bom_id.sub_products:\n                production._create_byproduct_move(sub_product)\n        return res\n\n\nclass MrpProductProduce(models.TransientModel):\n    _name = \"mrp.product.produce\"\n    _description = \"Record Production\"\n    _inherit = \"mrp.product.produce\"\n\n    @api.multi\n    def check_finished_move_lots(self):\n        \"\"\" Handle by product tracked \"\"\"\n        by_product_moves = self.production_id.move_finished_ids.filtered(lambda m: m.product_id != self.product_id and m.product_id.tracking != 'none' and m.state not in ('done', 'cancel'))\n        for by_product_move in by_product_moves:\n            rounding = by_product_move.product_uom.rounding\n            quantity = float_round(self.product_qty * by_product_move.unit_factor, precision_rounding=rounding)\n            values = {\n                'move_id': by_product_move.id,\n                'product_id': by_product_move.product_id.id,\n                'production_id': self.production_id.id,\n                'product_uom_id': by_product_move.product_uom.id,\n                'location_id': by_product_move.location_id.id,\n                'location_dest_id': by_product_move.location_dest_id.id,\n            }\n            if by_product_move.product_id.tracking == 'lot':\n                values.update({\n                    'product_uom_qty': quantity,\n                    'qty_done': quantity,\n                })\n                self.env['stock.move.line'].create(values)\n            else:\n                values.update({\n                    'product_uom_qty': 1.0,\n                    'qty_done': 1.0,\n                })\n                for i in range(0, int(quantity)):\n                    self.env['stock.move.line'].create(values)\n        return super(MrpProductProduce, self).check_finished_move_lots()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "mrp_production.py", "id": "54c24eeaeba208e3dfe7bed93a7cd0f6", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp_byproduct/models/mrp_production.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}