{"author": "getredash", "code": "import datetime\nimport json\nfrom unittest import TestCase\nfrom redash.query_runner.prometheus import get_instant_rows, get_range_rows\n\n\nclass TestPrometheus(TestCase):\n    def setUp(self):\n        self.instant_query_result = [\n            {\n                \"metric\": {\n                    \"name\": \"example_metric_name\",\n                    \"foo_bar\": \"foo\",\n                },\n                \"value\": [1516937400.781, \"7400_foo\"]\n            },\n            {\n                \"metric\": {\n                    \"name\": \"example_metric_name\",\n                    \"foo_bar\": \"bar\",\n                },\n                \"value\": [1516937400.781, \"7400_bar\"]\n            }\n        ]\n\n        self.range_query_result = [\n            {\n                \"metric\": {\n                    \"name\": \"example_metric_name\",\n                    \"foo_bar\": \"foo\",\n                },\n                \"values\": [\n                    [1516937400.781, \"7400_foo\"],\n                    [1516938000.781, \"8000_foo\"],\n                ]\n            },\n            {\n                \"metric\": {\n                    \"name\": \"example_metric_name\",\n                    \"foo_bar\": \"bar\",\n                },\n                \"values\": [\n                    [1516937400.781, \"7400_bar\"],\n                    [1516938000.781, \"8000_bar\"],\n                ]\n            }\n        ]\n\n    def test_get_instant_rows(self):\n        instant_rows = [\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"foo\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516937400.781),\n                \"value\": \"7400_foo\"\n            },\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"bar\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516937400.781),\n                \"value\": \"7400_bar\"\n            },\n        ]\n\n        rows = get_instant_rows(self.instant_query_result)\n        self.assertEqual(instant_rows, rows)\n\n    def test_get_range_rows(self):\n\n        range_rows = [\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"foo\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516937400.781),\n                \"value\": \"7400_foo\"\n            },\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"foo\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516938000.781),\n                \"value\": \"8000_foo\"\n            },\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"bar\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516937400.781),\n                \"value\": \"7400_bar\"\n            },\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"bar\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516938000.781),\n                \"value\": \"8000_bar\"\n            },\n        ]\n\n        rows = get_range_rows(self.range_query_result)\n        self.assertEqual(range_rows, rows)\n", "comments": "", "content": "import datetime\nimport json\nfrom unittest import TestCase\nfrom redash.query_runner.prometheus import get_instant_rows, get_range_rows\n\n\nclass TestPrometheus(TestCase):\n    def setUp(self):\n        self.instant_query_result = [\n            {\n                \"metric\": {\n                    \"name\": \"example_metric_name\",\n                    \"foo_bar\": \"foo\",\n                },\n                \"value\": [1516937400.781, \"7400_foo\"]\n            },\n            {\n                \"metric\": {\n                    \"name\": \"example_metric_name\",\n                    \"foo_bar\": \"bar\",\n                },\n                \"value\": [1516937400.781, \"7400_bar\"]\n            }\n        ]\n\n        self.range_query_result = [\n            {\n                \"metric\": {\n                    \"name\": \"example_metric_name\",\n                    \"foo_bar\": \"foo\",\n                },\n                \"values\": [\n                    [1516937400.781, \"7400_foo\"],\n                    [1516938000.781, \"8000_foo\"],\n                ]\n            },\n            {\n                \"metric\": {\n                    \"name\": \"example_metric_name\",\n                    \"foo_bar\": \"bar\",\n                },\n                \"values\": [\n                    [1516937400.781, \"7400_bar\"],\n                    [1516938000.781, \"8000_bar\"],\n                ]\n            }\n        ]\n\n    def test_get_instant_rows(self):\n        instant_rows = [\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"foo\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516937400.781),\n                \"value\": \"7400_foo\"\n            },\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"bar\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516937400.781),\n                \"value\": \"7400_bar\"\n            },\n        ]\n\n        rows = get_instant_rows(self.instant_query_result)\n        self.assertEqual(instant_rows, rows)\n\n    def test_get_range_rows(self):\n\n        range_rows = [\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"foo\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516937400.781),\n                \"value\": \"7400_foo\"\n            },\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"foo\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516938000.781),\n                \"value\": \"8000_foo\"\n            },\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"bar\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516937400.781),\n                \"value\": \"7400_bar\"\n            },\n            {\n                \"name\": \"example_metric_name\",\n                \"foo_bar\": \"bar\",\n                \"timestamp\": datetime.datetime.fromtimestamp(1516938000.781),\n                \"value\": \"8000_bar\"\n            },\n        ]\n\n        rows = get_range_rows(self.range_query_result)\n        self.assertEqual(range_rows, rows)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_prometheus.py", "id": "2f97c9a60bcf400a03990bac9107196a", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/query_runner/test_prometheus.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}