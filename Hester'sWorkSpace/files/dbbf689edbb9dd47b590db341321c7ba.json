{"author": "reddit-archive", "code": "\n License Version 1.0. (the \"License\"); you may not use this file except in\n\n\n\n\n\n\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n the specific language governing rights and limitations under the License.\n\n The Original Code is reddit.\n\n The Original Developer is the Initial Developer.  The Initial Developer of\n the Original Code is reddit Inc.\n\n All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n Inc. All Rights Reserved.\n\n\nimport os, sys\n\nimport paste.fixture\nfrom paste.script import command\nfrom paste.deploy import loadapp\n\nfrom r2.lib.log import RavenErrorReporter\n\n\nclass RunCommand(command.Command):\n    max_args = 2\n    min_args = 1\n\n    usage = \"CONFIGFILE CMDFILE.py\"\n    summary = \"Executed CMDFILE with pylons support\"\n    group_name = \"Reddit\"\n\n\n    parser = command.Command.standard_parser(verbose=True)\n    parser.add_option('-c', '--command',\n                      dest='command',\n                      help=\"execute command in module\")\n    parser.add_option(\"\", \"--proctitle\",\n                      dest=\"proctitle\",\n                      help=\"set the title seen by ps and top\")\n\n    def command(self):\n        try:\n            if self.options.proctitle:\n                import setproctitle\n                setproctitle.setproctitle(\"paster \" + self.options.proctitle)\n        except ImportError:\n            pass\n\n        config_file = self.args[0]\n        config_name = 'config:%s' % config_file\n\n        report_to_sentry = \"REDDIT_ERRORS_TO_SENTRY\" in os.environ\n\n        here_dir = os.getcwd()\n\n         Load locals and populate with objects for use in shell\n        sys.path.insert(0, here_dir)\n\n         Load the wsgi app first so that everything is initialized right\n        global_conf = {\n            'running_as_script': \"true\",\n        }\n        wsgiapp = loadapp(\n            config_name, relative_to=here_dir, global_conf=global_conf)\n        test_app = paste.fixture.TestApp(wsgiapp)\n\n         Query the test app to setup the environment\n        tresponse = test_app.get('/_test_vars')\n        request_id = int(tresponse.body)\n\n         Disable restoration during test_app requests\n        test_app.pre_request_hook = lambda self: \\\n            paste.registry.restorer.restoration_end()\n        test_app.post_request_hook = lambda self: \\\n            paste.registry.restorer.restoration_begin(request_id)\n\n         Restore the state of the Pylons special objects\n         (StackedObjectProxies)\n        paste.registry.restorer.restoration_begin(request_id)\n\n        loaded_namespace = {}\n\n        try:\n            if self.args[1:]:\n                execfile(self.args[1], loaded_namespace)\n\n            if self.options.command:\n                exec self.options.command in loaded_namespace\n        except Exception:\n            if report_to_sentry:\n                exc_info = sys.exc_info()\n                RavenErrorReporter.capture_exception(exc_info=exc_info)\n            raise\n", "comments": "  the contents file subject common public attribution    license version 1 0  (the  license )  may use file except    compliance license  you may obtain copy license    http   code reddit com license  the license based mozilla public    license version 1 1  sections 14 15 added cover use    software computer network provide limited attribution    original developer  in addition  exhibit a modified consistent    exhibit b        software distributed license distributed  as is  basis     without warranty of any kind  either express implied  see license    specific language governing rights limitations license        the original code reddit        the original developer initial developer   the initial developer    original code reddit inc        all portions code written reddit copyright (c) 2006 2015 reddit    inc  all rights reserved                                                                                      load locals populate objects use shell    load wsgi app first everything initialized right    query test app setup environment    disable restoration test app requests    restore state pylons special objects    (stackedobjectproxies) ", "content": "# The contents of this file are subject to the Common Public Attribution\n# License Version 1.0. (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public\n# License Version 1.1, but Sections 14 and 15 have been added to cover use of\n# software over a computer network and provide for limited attribution for the\n# Original Developer. In addition, Exhibit A has been modified to be consistent\n# with Exhibit B.\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n# the specific language governing rights and limitations under the License.\n#\n# The Original Code is reddit.\n#\n# The Original Developer is the Initial Developer.  The Initial Developer of\n# the Original Code is reddit Inc.\n#\n# All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n# Inc. All Rights Reserved.\n###############################################################################\n\nimport os, sys\n\nimport paste.fixture\nfrom paste.script import command\nfrom paste.deploy import loadapp\n\nfrom r2.lib.log import RavenErrorReporter\n\n\nclass RunCommand(command.Command):\n    max_args = 2\n    min_args = 1\n\n    usage = \"CONFIGFILE CMDFILE.py\"\n    summary = \"Executed CMDFILE with pylons support\"\n    group_name = \"Reddit\"\n\n\n    parser = command.Command.standard_parser(verbose=True)\n    parser.add_option('-c', '--command',\n                      dest='command',\n                      help=\"execute command in module\")\n    parser.add_option(\"\", \"--proctitle\",\n                      dest=\"proctitle\",\n                      help=\"set the title seen by ps and top\")\n\n    def command(self):\n        try:\n            if self.options.proctitle:\n                import setproctitle\n                setproctitle.setproctitle(\"paster \" + self.options.proctitle)\n        except ImportError:\n            pass\n\n        config_file = self.args[0]\n        config_name = 'config:%s' % config_file\n\n        report_to_sentry = \"REDDIT_ERRORS_TO_SENTRY\" in os.environ\n\n        here_dir = os.getcwd()\n\n        # Load locals and populate with objects for use in shell\n        sys.path.insert(0, here_dir)\n\n        # Load the wsgi app first so that everything is initialized right\n        global_conf = {\n            'running_as_script': \"true\",\n        }\n        wsgiapp = loadapp(\n            config_name, relative_to=here_dir, global_conf=global_conf)\n        test_app = paste.fixture.TestApp(wsgiapp)\n\n        # Query the test app to setup the environment\n        tresponse = test_app.get('/_test_vars')\n        request_id = int(tresponse.body)\n\n        # Disable restoration during test_app requests\n        test_app.pre_request_hook = lambda self: \\\n            paste.registry.restorer.restoration_end()\n        test_app.post_request_hook = lambda self: \\\n            paste.registry.restorer.restoration_begin(request_id)\n\n        # Restore the state of the Pylons special objects\n        # (StackedObjectProxies)\n        paste.registry.restorer.restoration_begin(request_id)\n\n        loaded_namespace = {}\n\n        try:\n            if self.args[1:]:\n                execfile(self.args[1], loaded_namespace)\n\n            if self.options.command:\n                exec self.options.command in loaded_namespace\n        except Exception:\n            if report_to_sentry:\n                exc_info = sys.exc_info()\n                RavenErrorReporter.capture_exception(exc_info=exc_info)\n            raise\n", "description": "historical code from reddit.com", "file_name": "commands.py", "id": "dbbf689edbb9dd47b590db341321c7ba", "language": "Python", "project_name": "reddit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/reddit-archive-reddit/reddit-archive-reddit-753b174/r2/r2/commands.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:55:36Z", "url": "https://github.com/reddit-archive/reddit", "wiki": true}