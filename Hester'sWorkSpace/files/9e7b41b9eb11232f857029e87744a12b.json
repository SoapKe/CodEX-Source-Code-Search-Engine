{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    try_get,\n)\nfrom .dailymotion import DailymotionIE\n\n\nclass FranceTVBaseInfoExtractor(InfoExtractor):\n    def _make_url_result(self, video_or_full_id, catalog=None):\n        full_id = 'francetv:%s' % video_or_full_id\n        if '@' not in video_or_full_id and catalog:\n            full_id += '@%s' % catalog\n        return self.url_result(\n            full_id, ie=FranceTVIE.ie_key(),\n            video_id=video_or_full_id.split('@')[0])\n\n\nclass FranceTVIE(InfoExtractor):\n    _VALID_URL = r\n\n    _TESTS = [{\n        \n        'url': 'https://sivideo.webservices.francetelevisions.fr/tools/getInfosOeuvre/v2/?idDiffusion=162311093&callback=_jsonp_loader_callback_request_0',\n        'md5': 'c2248a8de38c4e65ea8fae7b5df2d84f',\n        'info_dict': {\n            'id': '162311093',\n            'ext': 'mp4',\n            'title': '13h15, le dimanche... - Les myst\u00e8res de J\u00e9sus',\n            'description': 'md5:75efe8d4c0a8205e5904498ffe1e1a42',\n            'timestamp': 1502623500,\n            'upload_date': '20170813',\n        },\n    }, {\n        \n        'url': 'https://sivideo.webservices.francetelevisions.fr/tools/getInfosOeuvre/v2/?idDiffusion=NI_1004933&catalogue=Zouzous&callback=_jsonp_loader_callback_request_4',\n        'only_matching': True,\n    }, {\n        'url': 'http://videos.francetv.fr/video/NI_657393@Regions',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:162311093',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:NI_1004933@Zouzous',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:NI_983319@Info-web',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:NI_983319',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:NI_657393@Regions',\n        'only_matching': True,\n    }, {\n        \n        'url': 'francetv:SIM_France3',\n        'only_matching': True,\n    }]\n\n    def _extract_video(self, video_id, catalogue=None):\n        \n        \n        \n        info = self._download_json(\n            'https://sivideo.webservices.francetelevisions.fr/tools/getInfosOeuvre/v2/',\n            video_id, 'Downloading video JSON', query={\n                'idDiffusion': video_id,\n                'catalogue': catalogue or '',\n            })\n\n        if info.get('status') == 'NOK':\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, info['message']),\n                expected=True)\n        allowed_countries = info['videos'][0].get('geoblocage')\n        if allowed_countries:\n            georestricted = True\n            geo_info = self._download_json(\n                'http://geo.francetv.fr/ws/edgescape.json', video_id,\n                'Downloading geo restriction info')\n            country = geo_info['reponse']['geo_info']['country_code']\n            if country not in allowed_countries:\n                raise ExtractorError(\n                    'The video is not available from your location',\n                    expected=True)\n        else:\n            georestricted = False\n\n        def sign(manifest_url, manifest_id):\n            for host in ('hdfauthftv-a.akamaihd.net', 'hdfauth.francetv.fr'):\n                signed_url = self._download_webpage(\n                    'https://%s/esi/TA' % host, video_id,\n                    'Downloading signed %s manifest URL' % manifest_id,\n                    fatal=False, query={\n                        'url': manifest_url,\n                    })\n                if (signed_url and isinstance(signed_url, compat_str) and\n                        re.search(r'^(?:https?:)?//', signed_url)):\n                    return signed_url\n            return manifest_url\n\n        is_live = None\n\n        formats = []\n        for video in info['videos']:\n            if video['statut'] != 'ONLINE':\n                continue\n            video_url = video['url']\n            if not video_url:\n                continue\n            if is_live is None:\n                is_live = (try_get(\n                    video, lambda x: x['plages_ouverture'][0]['direct'],\n                    bool) is True) or '/live.francetv.fr/' in video_url\n            format_id = video['format']\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                if georestricted:\n                    \n                    \n                    continue\n                formats.extend(self._extract_f4m_formats(\n                    sign(video_url, format_id) + '&hdcore=3.7.0&plugin=aasp-3.7.0.39.44',\n                    video_id, f4m_id=format_id, fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    sign(video_url, format_id), video_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id=format_id,\n                    fatal=False))\n            elif video_url.startswith('rtmp'):\n                formats.append({\n                    'url': video_url,\n                    'format_id': 'rtmp-%s' % format_id,\n                    'ext': 'flv',\n                })\n            else:\n                if self._is_valid_url(video_url, video_id, format_id):\n                    formats.append({\n                        'url': video_url,\n                        'format_id': format_id,\n                    })\n        self._sort_formats(formats)\n\n        title = info['titre']\n        subtitle = info.get('sous_titre')\n        if subtitle:\n            title += ' - %s' % subtitle\n        title = title.strip()\n\n        subtitles = {}\n        subtitles_list = [{\n            'url': subformat['url'],\n            'ext': subformat.get('format'),\n        } for subformat in info.get('subtitles', []) if subformat.get('url')]\n        if subtitles_list:\n            subtitles['fr'] = subtitles_list\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': clean_html(info['synopsis']),\n            'thumbnail': compat_urlparse.urljoin('http://pluzz.francetv.fr', info['image']),\n            'duration': int_or_none(info.get('real_duration')) or parse_duration(info['duree']),\n            'timestamp': int_or_none(info['diffusion']['timestamp']),\n            'is_live': is_live,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        catalog = mobj.group('catalog')\n\n        if not video_id:\n            qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n            video_id = qs.get('idDiffusion', [None])[0]\n            catalog = qs.get('catalogue', [None])[0]\n            if not video_id:\n                raise ExtractorError('Invalid URL', expected=True)\n\n        return self._extract_video(video_id, catalog)\n\n\nclass FranceTVSiteIE(FranceTVBaseInfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?france\\.tv|mobile\\.france\\.tv)/(?:[^/]+/)*(?P<id>[^/]+)\\.html'\n\n    _TESTS = [{\n        'url': 'https://www.france.tv/france-2/13h15-le-dimanche/140921-les-mysteres-de-jesus.html',\n        'info_dict': {\n            'id': '162311093',\n            'ext': 'mp4',\n            'title': '13h15, le dimanche... - Les myst\u00e8res de J\u00e9sus',\n            'description': 'md5:75efe8d4c0a8205e5904498ffe1e1a42',\n            'timestamp': 1502623500,\n            'upload_date': '20170813',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [FranceTVIE.ie_key()],\n    }, {\n        \n        'url': 'https://www.france.tv/france-3/des-chiffres-et-des-lettres/139063-emission-du-mardi-9-mai-2017.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.france.tv/france-4/hero-corp/saison-1/134151-apres-le-calme.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.france.tv/france-5/c-a-dire/saison-10/137013-c-a-dire.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.france.tv/france-o/archipels/132249-mon-ancetre-l-esclave.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.france.tv/france-2/direct.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.france.tv/documentaires/histoire/136517-argentine-les-500-bebes-voles-de-la-dictature.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.france.tv/jeux-et-divertissements/divertissements/133965-le-web-contre-attaque.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://mobile.france.tv/france-5/c-dans-l-air/137347-emission-du-vendredi-12-mai-2017.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.france.tv/142749-rouge-sang.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://www.france.tv/france-3/direct.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        catalogue = None\n        video_id = self._search_regex(\n            r'data-main-video=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'video id', default=None, group='id')\n\n        if not video_id:\n            video_id, catalogue = self._html_search_regex(\n                r'(?:href=|player\\.setVideo\\(\\s*)\"http://videos?\\.francetv\\.fr/video/([^@]+@[^\"]+)\"',\n                webpage, 'video ID').split('@')\n\n        return self._make_url_result(video_id, catalogue)\n\n\nclass FranceTVEmbedIE(FranceTVBaseInfoExtractor):\n    _VALID_URL = r'https?://embed\\.francetv\\.fr/*\\?.*?\\bue=(?P<id>[^&]+)'\n\n    _TESTS = [{\n        'url': 'http://embed.francetv.fr/?ue=7fd581a2ccf59d2fc5719c5c13cf6961',\n        'info_dict': {\n            'id': 'NI_983319',\n            'ext': 'mp4',\n            'title': 'Le Pen Reims',\n            'upload_date': '20170505',\n            'timestamp': 1493981780,\n            'duration': 16,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [FranceTVIE.ie_key()],\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://api-embed.webservices.francetelevisions.fr/key/%s' % video_id,\n            video_id)\n\n        return self._make_url_result(video['video_id'], video.get('catalog'))\n\n\nclass FranceTVInfoIE(FranceTVBaseInfoExtractor):\n    IE_NAME = 'francetvinfo.fr'\n    _VALID_URL = r'https?://(?:www|mobile|france3-regions)\\.francetvinfo\\.fr/(?:[^/]+/)*(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://www.francetvinfo.fr/replay-jt/france-3/soir-3/jt-grand-soir-3-lundi-26-aout-2013_393427.html',\n        'info_dict': {\n            'id': '84981923',\n            'ext': 'mp4',\n            'title': 'Soir 3',\n            'upload_date': '20130826',\n            'timestamp': 1377548400,\n            'subtitles': {\n                'fr': 'mincount:2',\n            },\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [FranceTVIE.ie_key()],\n    }, {\n        'url': 'http://www.francetvinfo.fr/elections/europeennes/direct-europeennes-regardez-le-debat-entre-les-candidats-a-la-presidence-de-la-commission_600639.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.francetvinfo.fr/economie/entreprises/les-entreprises-familiales-le-secret-de-la-reussite_933271.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://france3-regions.francetvinfo.fr/bretagne/cotes-d-armor/thalassa-echappee-breizh-ce-venredi-dans-les-cotes-d-armor-954961.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.francetvinfo.fr/politique/notre-dame-des-landes/video-sur-france-inter-cecile-duflot-denonce-le-regard-meprisant-de-patrick-cohen_1520091.html',\n        'md5': 'ee7f1828f25a648addc90cb2687b1f12',\n        'info_dict': {\n            'id': 'x4iiko0',\n            'ext': 'mp4',\n            'title': 'NDDL, r\u00e9f\u00e9rendum, Brexit : C\u00e9cile Duflot r\u00e9pond \u00e0 Patrick Cohen',\n            'description': 'Au lendemain de la victoire du \"oui\" au r\u00e9f\u00e9rendum sur l\\'a\u00e9roport de Notre-Dame-des-Landes, l\\'ancienne ministre \u00e9cologiste est l\\'invit\u00e9e de Patrick Cohen. Plus d\\'info : https://www.franceinter.fr/emissions/le-7-9/le-7-9-27-juin-2016',\n            'timestamp': 1467011958,\n            'upload_date': '20160627',\n            'uploader': 'France Inter',\n            'uploader_id': 'x2q2ez',\n        },\n        'add_ie': ['Dailymotion'],\n    }, {\n        'url': 'http://france3-regions.francetvinfo.fr/limousin/emissions/jt-1213-limousin',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        dailymotion_urls = DailymotionIE._extract_urls(webpage)\n        if dailymotion_urls:\n            return self.playlist_result([\n                self.url_result(dailymotion_url, DailymotionIE.ie_key())\n                for dailymotion_url in dailymotion_urls])\n\n        video_id, catalogue = self._search_regex(\n            (r'id-video=([^@]+@[^\"]+)',\n             r'<a[^>]+href=\"(?:https?:)?//videos\\.francetv\\.fr/video/([^@]+@[^\"]+)\"'),\n            webpage, 'video id').split('@')\n\n        return self._make_url_result(video_id, catalogue)\n\n\nclass GenerationWhatIE(InfoExtractor):\n    IE_NAME = 'france2.fr:generation-what'\n    _VALID_URL = r'https?://generation-what\\.francetv\\.fr/[^/]+/video/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://generation-what.francetv.fr/portrait/video/present-arms',\n        'info_dict': {\n            'id': 'wtvKYUG45iw',\n            'ext': 'mp4',\n            'title': 'Generation What - Garde \u00e0 vous - FRA',\n            'uploader': 'Generation What',\n            'uploader_id': 'UCHH9p1eetWCgt4kXBYCb3_w',\n            'upload_date': '20160411',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'http://generation-what.francetv.fr/europe/video/present-arms',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        youtube_id = self._search_regex(\n            r\"window\\.videoURL\\s*=\\s*'([0-9A-Za-z_-]{11})';\",\n            webpage, 'youtube id')\n\n        return self.url_result(youtube_id, ie='Youtube', video_id=youtube_id)\n\n\nclass CultureboxIE(FranceTVBaseInfoExtractor):\n    _VALID_URL = r'https?://(?:m\\.)?culturebox\\.francetvinfo\\.fr/(?:[^/]+/)*(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'https://culturebox.francetvinfo.fr/opera-classique/musique-classique/c-est-baroque/concerts/cantates-bwv-4-106-et-131-de-bach-par-raphael-pichon-57-268689',\n        'info_dict': {\n            'id': 'EV_134885',\n            'ext': 'mp4',\n            'title': 'Cantates BWV 4, 106 et 131 de Bach par Rapha\u00ebl Pichon 5/7',\n            'description': 'md5:19c44af004b88219f4daa50fa9a351d4',\n            'upload_date': '20180206',\n            'timestamp': 1517945220,\n            'duration': 5981,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [FranceTVIE.ie_key()],\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        if \">Ce live n'est plus disponible en replay<\" in webpage:\n            raise ExtractorError(\n                'Video %s is not available' % display_id, expected=True)\n\n        video_id, catalogue = self._search_regex(\n            r'[\"\\'>]https?://videos\\.francetv\\.fr/video/([^@]+@.+?)[\"\\'<]',\n            webpage, 'video id').split('@')\n\n        return self._make_url_result(video_id, catalogue)\n\n\nclass FranceTVJeunesseIE(FranceTVBaseInfoExtractor):\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?(?:zouzous|ludo)\\.fr/heros/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'https://www.zouzous.fr/heros/simon',\n        'info_dict': {\n            'id': 'simon',\n        },\n        'playlist_count': 9,\n    }, {\n        'url': 'https://www.ludo.fr/heros/ninjago',\n        'info_dict': {\n            'id': 'ninjago',\n        },\n        'playlist_count': 10,\n    }, {\n        'url': 'https://www.zouzous.fr/heros/simon?abc',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n\n        playlist = self._download_json(\n            '%s/%s' % (mobj.group('url'), 'playlist'), playlist_id)\n\n        if not playlist.get('count'):\n            raise ExtractorError(\n                '%s is not available' % playlist_id, expected=True)\n\n        entries = []\n        for item in playlist['items']:\n            identity = item.get('identity')\n            if identity and isinstance(identity, compat_str):\n                entries.append(self._make_url_result(identity))\n\n        return self.playlist_result(entries, playlist_id)\n", "comments": "(?x)\n                    (?:\n                        https?://\n                            sivideo\\.webservices\\.francetelevisions\\.fr/tools/getInfosOeuvre/v2/\\?\n                            .*?\\bidDiffusion=[^&]+|\n                        (?:\n                            https?://videos\\.francetv\\.fr/video/|\n                            francetv:\n                        )\n                        (?P<id>[^@]+)(?:@(?P<catalog>.+))?\n                    )\n                    \n \n# coding: utf-8\n# without catalog\n# with catalog\n# france-3 live\n# Videos are identified by idDiffusion so catalogue part is optional.\n# However when provided, some extra formats may be returned so we pass\n# it if available.\n# See https://github.com/rg3/youtube-dl/issues/3963\n# m3u8 urls work fine\n# france3\n# france4\n# france5\n# franceo\n# france2 live\n# france-3 live\n#&.]+)'\n# Dailymotion embed\n#&]+)'\n#&]+)'\n#&]+))'\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    clean_html,\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_duration,\n    try_get,\n)\nfrom .dailymotion import DailymotionIE\n\n\nclass FranceTVBaseInfoExtractor(InfoExtractor):\n    def _make_url_result(self, video_or_full_id, catalog=None):\n        full_id = 'francetv:%s' % video_or_full_id\n        if '@' not in video_or_full_id and catalog:\n            full_id += '@%s' % catalog\n        return self.url_result(\n            full_id, ie=FranceTVIE.ie_key(),\n            video_id=video_or_full_id.split('@')[0])\n\n\nclass FranceTVIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    (?:\n                        https?://\n                            sivideo\\.webservices\\.francetelevisions\\.fr/tools/getInfosOeuvre/v2/\\?\n                            .*?\\bidDiffusion=[^&]+|\n                        (?:\n                            https?://videos\\.francetv\\.fr/video/|\n                            francetv:\n                        )\n                        (?P<id>[^@]+)(?:@(?P<catalog>.+))?\n                    )\n                    '''\n\n    _TESTS = [{\n        # without catalog\n        'url': 'https://sivideo.webservices.francetelevisions.fr/tools/getInfosOeuvre/v2/?idDiffusion=162311093&callback=_jsonp_loader_callback_request_0',\n        'md5': 'c2248a8de38c4e65ea8fae7b5df2d84f',\n        'info_dict': {\n            'id': '162311093',\n            'ext': 'mp4',\n            'title': '13h15, le dimanche... - Les myst\u00e8res de J\u00e9sus',\n            'description': 'md5:75efe8d4c0a8205e5904498ffe1e1a42',\n            'timestamp': 1502623500,\n            'upload_date': '20170813',\n        },\n    }, {\n        # with catalog\n        'url': 'https://sivideo.webservices.francetelevisions.fr/tools/getInfosOeuvre/v2/?idDiffusion=NI_1004933&catalogue=Zouzous&callback=_jsonp_loader_callback_request_4',\n        'only_matching': True,\n    }, {\n        'url': 'http://videos.francetv.fr/video/NI_657393@Regions',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:162311093',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:NI_1004933@Zouzous',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:NI_983319@Info-web',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:NI_983319',\n        'only_matching': True,\n    }, {\n        'url': 'francetv:NI_657393@Regions',\n        'only_matching': True,\n    }, {\n        # france-3 live\n        'url': 'francetv:SIM_France3',\n        'only_matching': True,\n    }]\n\n    def _extract_video(self, video_id, catalogue=None):\n        # Videos are identified by idDiffusion so catalogue part is optional.\n        # However when provided, some extra formats may be returned so we pass\n        # it if available.\n        info = self._download_json(\n            'https://sivideo.webservices.francetelevisions.fr/tools/getInfosOeuvre/v2/',\n            video_id, 'Downloading video JSON', query={\n                'idDiffusion': video_id,\n                'catalogue': catalogue or '',\n            })\n\n        if info.get('status') == 'NOK':\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, info['message']),\n                expected=True)\n        allowed_countries = info['videos'][0].get('geoblocage')\n        if allowed_countries:\n            georestricted = True\n            geo_info = self._download_json(\n                'http://geo.francetv.fr/ws/edgescape.json', video_id,\n                'Downloading geo restriction info')\n            country = geo_info['reponse']['geo_info']['country_code']\n            if country not in allowed_countries:\n                raise ExtractorError(\n                    'The video is not available from your location',\n                    expected=True)\n        else:\n            georestricted = False\n\n        def sign(manifest_url, manifest_id):\n            for host in ('hdfauthftv-a.akamaihd.net', 'hdfauth.francetv.fr'):\n                signed_url = self._download_webpage(\n                    'https://%s/esi/TA' % host, video_id,\n                    'Downloading signed %s manifest URL' % manifest_id,\n                    fatal=False, query={\n                        'url': manifest_url,\n                    })\n                if (signed_url and isinstance(signed_url, compat_str) and\n                        re.search(r'^(?:https?:)?//', signed_url)):\n                    return signed_url\n            return manifest_url\n\n        is_live = None\n\n        formats = []\n        for video in info['videos']:\n            if video['statut'] != 'ONLINE':\n                continue\n            video_url = video['url']\n            if not video_url:\n                continue\n            if is_live is None:\n                is_live = (try_get(\n                    video, lambda x: x['plages_ouverture'][0]['direct'],\n                    bool) is True) or '/live.francetv.fr/' in video_url\n            format_id = video['format']\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                if georestricted:\n                    # See https://github.com/rg3/youtube-dl/issues/3963\n                    # m3u8 urls work fine\n                    continue\n                formats.extend(self._extract_f4m_formats(\n                    sign(video_url, format_id) + '&hdcore=3.7.0&plugin=aasp-3.7.0.39.44',\n                    video_id, f4m_id=format_id, fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    sign(video_url, format_id), video_id, 'mp4',\n                    entry_protocol='m3u8_native', m3u8_id=format_id,\n                    fatal=False))\n            elif video_url.startswith('rtmp'):\n                formats.append({\n                    'url': video_url,\n                    'format_id': 'rtmp-%s' % format_id,\n                    'ext': 'flv',\n                })\n            else:\n                if self._is_valid_url(video_url, video_id, format_id):\n                    formats.append({\n                        'url': video_url,\n                        'format_id': format_id,\n                    })\n        self._sort_formats(formats)\n\n        title = info['titre']\n        subtitle = info.get('sous_titre')\n        if subtitle:\n            title += ' - %s' % subtitle\n        title = title.strip()\n\n        subtitles = {}\n        subtitles_list = [{\n            'url': subformat['url'],\n            'ext': subformat.get('format'),\n        } for subformat in info.get('subtitles', []) if subformat.get('url')]\n        if subtitles_list:\n            subtitles['fr'] = subtitles_list\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': clean_html(info['synopsis']),\n            'thumbnail': compat_urlparse.urljoin('http://pluzz.francetv.fr', info['image']),\n            'duration': int_or_none(info.get('real_duration')) or parse_duration(info['duree']),\n            'timestamp': int_or_none(info['diffusion']['timestamp']),\n            'is_live': is_live,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        catalog = mobj.group('catalog')\n\n        if not video_id:\n            qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n            video_id = qs.get('idDiffusion', [None])[0]\n            catalog = qs.get('catalogue', [None])[0]\n            if not video_id:\n                raise ExtractorError('Invalid URL', expected=True)\n\n        return self._extract_video(video_id, catalog)\n\n\nclass FranceTVSiteIE(FranceTVBaseInfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?france\\.tv|mobile\\.france\\.tv)/(?:[^/]+/)*(?P<id>[^/]+)\\.html'\n\n    _TESTS = [{\n        'url': 'https://www.france.tv/france-2/13h15-le-dimanche/140921-les-mysteres-de-jesus.html',\n        'info_dict': {\n            'id': '162311093',\n            'ext': 'mp4',\n            'title': '13h15, le dimanche... - Les myst\u00e8res de J\u00e9sus',\n            'description': 'md5:75efe8d4c0a8205e5904498ffe1e1a42',\n            'timestamp': 1502623500,\n            'upload_date': '20170813',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [FranceTVIE.ie_key()],\n    }, {\n        # france3\n        'url': 'https://www.france.tv/france-3/des-chiffres-et-des-lettres/139063-emission-du-mardi-9-mai-2017.html',\n        'only_matching': True,\n    }, {\n        # france4\n        'url': 'https://www.france.tv/france-4/hero-corp/saison-1/134151-apres-le-calme.html',\n        'only_matching': True,\n    }, {\n        # france5\n        'url': 'https://www.france.tv/france-5/c-a-dire/saison-10/137013-c-a-dire.html',\n        'only_matching': True,\n    }, {\n        # franceo\n        'url': 'https://www.france.tv/france-o/archipels/132249-mon-ancetre-l-esclave.html',\n        'only_matching': True,\n    }, {\n        # france2 live\n        'url': 'https://www.france.tv/france-2/direct.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.france.tv/documentaires/histoire/136517-argentine-les-500-bebes-voles-de-la-dictature.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.france.tv/jeux-et-divertissements/divertissements/133965-le-web-contre-attaque.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://mobile.france.tv/france-5/c-dans-l-air/137347-emission-du-vendredi-12-mai-2017.html',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.france.tv/142749-rouge-sang.html',\n        'only_matching': True,\n    }, {\n        # france-3 live\n        'url': 'https://www.france.tv/france-3/direct.html',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        catalogue = None\n        video_id = self._search_regex(\n            r'data-main-video=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1',\n            webpage, 'video id', default=None, group='id')\n\n        if not video_id:\n            video_id, catalogue = self._html_search_regex(\n                r'(?:href=|player\\.setVideo\\(\\s*)\"http://videos?\\.francetv\\.fr/video/([^@]+@[^\"]+)\"',\n                webpage, 'video ID').split('@')\n\n        return self._make_url_result(video_id, catalogue)\n\n\nclass FranceTVEmbedIE(FranceTVBaseInfoExtractor):\n    _VALID_URL = r'https?://embed\\.francetv\\.fr/*\\?.*?\\bue=(?P<id>[^&]+)'\n\n    _TESTS = [{\n        'url': 'http://embed.francetv.fr/?ue=7fd581a2ccf59d2fc5719c5c13cf6961',\n        'info_dict': {\n            'id': 'NI_983319',\n            'ext': 'mp4',\n            'title': 'Le Pen Reims',\n            'upload_date': '20170505',\n            'timestamp': 1493981780,\n            'duration': 16,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [FranceTVIE.ie_key()],\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://api-embed.webservices.francetelevisions.fr/key/%s' % video_id,\n            video_id)\n\n        return self._make_url_result(video['video_id'], video.get('catalog'))\n\n\nclass FranceTVInfoIE(FranceTVBaseInfoExtractor):\n    IE_NAME = 'francetvinfo.fr'\n    _VALID_URL = r'https?://(?:www|mobile|france3-regions)\\.francetvinfo\\.fr/(?:[^/]+/)*(?P<id>[^/?#&.]+)'\n\n    _TESTS = [{\n        'url': 'http://www.francetvinfo.fr/replay-jt/france-3/soir-3/jt-grand-soir-3-lundi-26-aout-2013_393427.html',\n        'info_dict': {\n            'id': '84981923',\n            'ext': 'mp4',\n            'title': 'Soir 3',\n            'upload_date': '20130826',\n            'timestamp': 1377548400,\n            'subtitles': {\n                'fr': 'mincount:2',\n            },\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [FranceTVIE.ie_key()],\n    }, {\n        'url': 'http://www.francetvinfo.fr/elections/europeennes/direct-europeennes-regardez-le-debat-entre-les-candidats-a-la-presidence-de-la-commission_600639.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.francetvinfo.fr/economie/entreprises/les-entreprises-familiales-le-secret-de-la-reussite_933271.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://france3-regions.francetvinfo.fr/bretagne/cotes-d-armor/thalassa-echappee-breizh-ce-venredi-dans-les-cotes-d-armor-954961.html',\n        'only_matching': True,\n    }, {\n        # Dailymotion embed\n        'url': 'http://www.francetvinfo.fr/politique/notre-dame-des-landes/video-sur-france-inter-cecile-duflot-denonce-le-regard-meprisant-de-patrick-cohen_1520091.html',\n        'md5': 'ee7f1828f25a648addc90cb2687b1f12',\n        'info_dict': {\n            'id': 'x4iiko0',\n            'ext': 'mp4',\n            'title': 'NDDL, r\u00e9f\u00e9rendum, Brexit : C\u00e9cile Duflot r\u00e9pond \u00e0 Patrick Cohen',\n            'description': 'Au lendemain de la victoire du \"oui\" au r\u00e9f\u00e9rendum sur l\\'a\u00e9roport de Notre-Dame-des-Landes, l\\'ancienne ministre \u00e9cologiste est l\\'invit\u00e9e de Patrick Cohen. Plus d\\'info : https://www.franceinter.fr/emissions/le-7-9/le-7-9-27-juin-2016',\n            'timestamp': 1467011958,\n            'upload_date': '20160627',\n            'uploader': 'France Inter',\n            'uploader_id': 'x2q2ez',\n        },\n        'add_ie': ['Dailymotion'],\n    }, {\n        'url': 'http://france3-regions.francetvinfo.fr/limousin/emissions/jt-1213-limousin',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        dailymotion_urls = DailymotionIE._extract_urls(webpage)\n        if dailymotion_urls:\n            return self.playlist_result([\n                self.url_result(dailymotion_url, DailymotionIE.ie_key())\n                for dailymotion_url in dailymotion_urls])\n\n        video_id, catalogue = self._search_regex(\n            (r'id-video=([^@]+@[^\"]+)',\n             r'<a[^>]+href=\"(?:https?:)?//videos\\.francetv\\.fr/video/([^@]+@[^\"]+)\"'),\n            webpage, 'video id').split('@')\n\n        return self._make_url_result(video_id, catalogue)\n\n\nclass GenerationWhatIE(InfoExtractor):\n    IE_NAME = 'france2.fr:generation-what'\n    _VALID_URL = r'https?://generation-what\\.francetv\\.fr/[^/]+/video/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'http://generation-what.francetv.fr/portrait/video/present-arms',\n        'info_dict': {\n            'id': 'wtvKYUG45iw',\n            'ext': 'mp4',\n            'title': 'Generation What - Garde \u00e0 vous - FRA',\n            'uploader': 'Generation What',\n            'uploader_id': 'UCHH9p1eetWCgt4kXBYCb3_w',\n            'upload_date': '20160411',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'http://generation-what.francetv.fr/europe/video/present-arms',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        youtube_id = self._search_regex(\n            r\"window\\.videoURL\\s*=\\s*'([0-9A-Za-z_-]{11})';\",\n            webpage, 'youtube id')\n\n        return self.url_result(youtube_id, ie='Youtube', video_id=youtube_id)\n\n\nclass CultureboxIE(FranceTVBaseInfoExtractor):\n    _VALID_URL = r'https?://(?:m\\.)?culturebox\\.francetvinfo\\.fr/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://culturebox.francetvinfo.fr/opera-classique/musique-classique/c-est-baroque/concerts/cantates-bwv-4-106-et-131-de-bach-par-raphael-pichon-57-268689',\n        'info_dict': {\n            'id': 'EV_134885',\n            'ext': 'mp4',\n            'title': 'Cantates BWV 4, 106 et 131 de Bach par Rapha\u00ebl Pichon 5/7',\n            'description': 'md5:19c44af004b88219f4daa50fa9a351d4',\n            'upload_date': '20180206',\n            'timestamp': 1517945220,\n            'duration': 5981,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [FranceTVIE.ie_key()],\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        if \">Ce live n'est plus disponible en replay<\" in webpage:\n            raise ExtractorError(\n                'Video %s is not available' % display_id, expected=True)\n\n        video_id, catalogue = self._search_regex(\n            r'[\"\\'>]https?://videos\\.francetv\\.fr/video/([^@]+@.+?)[\"\\'<]',\n            webpage, 'video id').split('@')\n\n        return self._make_url_result(video_id, catalogue)\n\n\nclass FranceTVJeunesseIE(FranceTVBaseInfoExtractor):\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?(?:zouzous|ludo)\\.fr/heros/(?P<id>[^/?#&]+))'\n\n    _TESTS = [{\n        'url': 'https://www.zouzous.fr/heros/simon',\n        'info_dict': {\n            'id': 'simon',\n        },\n        'playlist_count': 9,\n    }, {\n        'url': 'https://www.ludo.fr/heros/ninjago',\n        'info_dict': {\n            'id': 'ninjago',\n        },\n        'playlist_count': 10,\n    }, {\n        'url': 'https://www.zouzous.fr/heros/simon?abc',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n\n        playlist = self._download_json(\n            '%s/%s' % (mobj.group('url'), 'playlist'), playlist_id)\n\n        if not playlist.get('count'):\n            raise ExtractorError(\n                '%s is not available' % playlist_id, expected=True)\n\n        entries = []\n        for item in playlist['items']:\n            identity = item.get('identity')\n            if identity and isinstance(identity, compat_str):\n                entries.append(self._make_url_result(identity))\n\n        return self.playlist_result(entries, playlist_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "francetv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/francetv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}