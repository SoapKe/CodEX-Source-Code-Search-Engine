{"author": "donnemartin", "code": "class Node(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        self.parent = None\n\n    def __repr__(self):\n        return str(self.data)\n\n\nclass Bst(object):\n\n    def __init__(self, root=None):\n        self.root = root\n\n    def insert(self, data):\n        if data is None:\n            raise TypeError('data cannot be None')\n        if self.root is None:\n            self.root = Node(data)\n            return self.root\n        else:\n            return self._insert(self.root, data)\n\n    def _insert(self, node, data):\n        if node is None:\n            return Node(data)\n        if data <= node.data:\n            if node.left is None:\n                node.left = self._insert(node.left, data)\n                node.left.parent = node\n                return node.left\n            else:\n                return self._insert(node.left, data)\n        else:\n            if node.right is None:\n                node.right = self._insert(node.right, data)\n                node.right.parent = node\n                return node.right\n            else:\n                return self._insert(node.right, data)", "comments": "", "content": "class Node(object):\n\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        self.parent = None\n\n    def __repr__(self):\n        return str(self.data)\n\n\nclass Bst(object):\n\n    def __init__(self, root=None):\n        self.root = root\n\n    def insert(self, data):\n        if data is None:\n            raise TypeError('data cannot be None')\n        if self.root is None:\n            self.root = Node(data)\n            return self.root\n        else:\n            return self._insert(self.root, data)\n\n    def _insert(self, node, data):\n        if node is None:\n            return Node(data)\n        if data <= node.data:\n            if node.left is None:\n                node.left = self._insert(node.left, data)\n                node.left.parent = node\n                return node.left\n            else:\n                return self._insert(node.left, data)\n        else:\n            if node.right is None:\n                node.right = self._insert(node.right, data)\n                node.right.parent = node\n                return node.right\n            else:\n                return self._insert(node.right, data)", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "bst.py", "id": "99448b145cae3f45007b5bd9ad0091e3", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/bst/bst.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}