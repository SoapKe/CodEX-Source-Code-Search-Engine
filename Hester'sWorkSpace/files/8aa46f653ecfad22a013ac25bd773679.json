{"author": "mailpile", "code": "\n\nfrom subprocess import check_output, call\nfrom multiprocessing import Pool\nimport os\n\ndef getLogMessage(commitSHA):\n    \"\"\"Get the log message for a given commit hash\"\"\"\n    output = check_output([\"git\",\"log\",\"--format=%B\",\"-n\",\"1\",commitSHA])\n    return output.strip()\n\ndef versionFromCommitNo(commitNo):\n    \"\"\"Generate a version string from a numerical commit no\"\"\"\n    return \"0.0.0-dev%d\" % commitNo\n\n#Execute git rev-list $(git rev-parse HEAD) to get list of revisions\nhead = check_output([\"git\",\"rev-parse\",\"HEAD\"]).strip()\nrevisions = check_output([\"git\",\"rev-list\",head]).strip().split(\"\\n\")\n\nprint \"Found %d revisions\" % len(revisions)\nrevisions.reverse() \n\nprint \"Mapping revisions to log messages\"\nthreadpool = p = Pool(10)\nrevLogMsgs = threadpool.map(getLogMessage, revisions)\n#(Re)create the changelog for the first revision (= the oldest one)\ntry:\n    os.unlink(\"debian/changelog\")\nexcept OSError:\n    pass \nfirstCommitMsg = revLogMsgs[0]\ncall([\"dch\",\"--create\",\"-v\",versionFromCommitNo(0),\"--package\",\"mailpile\",firstCommitMsg])\n\nfor i in range(1, len(revisions)):\n    print \"Generating changelog for revision %d\" % i\n    commitMsg = revLogMsgs[i]\n    call([\"dch\",\"-v\",versionFromCommitNo(i),\"--package\",\"mailpile\",commitMsg])\n", "comments": "   get log message given commit hash        output   check output(  git   log     format  b    n   1  commitsha )     return output strip()  def versionfromcommitno(commitno)         generate version string numerical commit        usr bin env python2 7   this script builds dch changelog git commit log   execute git rev list  (git rev parse head) get list revisions   revisions contains rev identifiers  newest revisions first    in place reverse  make oldest revision first   map revisions log msgs   (re)create changelog first revision (  oldest one)   don care file exist   create changelog entry commits ", "content": "#!/usr/bin/env python2.7\n#This script builds a DCH changelog from the git commit log\nfrom subprocess import check_output, call\nfrom multiprocessing import Pool\nimport os\n\ndef getLogMessage(commitSHA):\n    \"\"\"Get the log message for a given commit hash\"\"\"\n    output = check_output([\"git\",\"log\",\"--format=%B\",\"-n\",\"1\",commitSHA])\n    return output.strip()\n\ndef versionFromCommitNo(commitNo):\n    \"\"\"Generate a version string from a numerical commit no\"\"\"\n    return \"0.0.0-dev%d\" % commitNo\n\n#Execute git rev-list $(git rev-parse HEAD) to get list of revisions\nhead = check_output([\"git\",\"rev-parse\",\"HEAD\"]).strip()\nrevisions = check_output([\"git\",\"rev-list\",head]).strip().split(\"\\n\")\n#Revisions now contains rev identifiers, newest revisions first.\nprint \"Found %d revisions\" % len(revisions)\nrevisions.reverse() #In-place reverse, to make oldest revision first\n#Map the revisions to their log msgs\nprint \"Mapping revisions to log messages\"\nthreadpool = p = Pool(10)\nrevLogMsgs = threadpool.map(getLogMessage, revisions)\n#(Re)create the changelog for the first revision (= the oldest one)\ntry:\n    os.unlink(\"debian/changelog\")\nexcept OSError:\n    pass #Don't care if the file does not exist\nfirstCommitMsg = revLogMsgs[0]\ncall([\"dch\",\"--create\",\"-v\",versionFromCommitNo(0),\"--package\",\"mailpile\",firstCommitMsg])\n#Create the changelog entry for all other commits\nfor i in range(1, len(revisions)):\n    print \"Generating changelog for revision %d\" % i\n    commitMsg = revLogMsgs[i]\n    call([\"dch\",\"-v\",versionFromCommitNo(i),\"--package\",\"mailpile\",commitMsg])\n", "description": "A free & open modern, fast email client with user-friendly encryption and privacy features", "file_name": "create-debian-changelog.py", "id": "8aa46f653ecfad22a013ac25bd773679", "language": "Python", "project_name": "Mailpile", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mailpile-Mailpile/mailpile-Mailpile-8ebc5fe/scripts/create-debian-changelog.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:54:52Z", "url": "https://github.com/mailpile/Mailpile", "wiki": true}