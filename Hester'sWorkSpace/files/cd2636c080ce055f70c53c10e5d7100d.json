{"author": "ansible", "code": "\n\"\"\" PN-CLI vrouter-ospf-add/remove \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_ospfarea\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove ospf area to/from a vrouter.\ndescription:\n  - Execute vrouter-ospf-add, vrouter-ospf-remove command.\n  - This command adds/removes Open Shortest Path First(OSPF) area to/from\n    a virtual router(vRouter) service.\noptions:\n  pn_cliusername:\n    description:\n      - Login username.\n    required: true\n  pn_clipassword:\n    description:\n      - Login password.\n    required: true\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the CLI on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to add ospf-area, 'absent'\n        to remove ospf-area and 'update' to modify ospf-area.\n    required: true\n    choices: ['present', 'absent', 'update']\n  pn_vrouter_name:\n    description:\n      - Specify the name of the vRouter.\n    required: true\n  pn_ospf_area:\n    description:\n      - Specify the OSPF area number.\n    required: true\n  pn_stub_type:\n    description:\n      - Specify the OSPF stub type.\n    choices: ['none', 'stub', 'stub-no-summary', 'nssa', 'nssa-no-summary']\n  pn_prefix_listin:\n    description:\n      - OSPF prefix list for filtering incoming packets.\n  pn_prefix_listout:\n    description:\n      - OSPF prefix list for filtering outgoing packets.\n  pn_quiet:\n    description:\n      - Enable/disable system information.\n    required: false\n    default: true\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: \"Add OSPF area to vrouter\"\n  pn_ospfarea:\n    state: present\n    pn_cliusername: admin\n    pn_clipassword: admin\n    pn_ospf_area: 1.0.0.0\n    pn_stub_type: stub\n\n- name: \"Remove OSPF from vrouter\"\n  pn_ospf:\n    state: absent\n    pn_cliusername: admin\n    pn_clipassword: admin\n    pn_vrouter_name: name-string\n    pn_ospf_area: 1.0.0.0\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the ospf command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the ospf command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-ospf-area-add'\n    if state == 'absent':\n        command = 'vrouter-ospf-area-remove'\n    if state == 'update':\n        command = 'vrouter-ospf-area-modify'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=True, type='str'),\n            pn_clipassword=dict(required=True, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent', 'update']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_ospf_area=dict(required=True, type='str'),\n            pn_stub_type=dict(type='str', choices=['none', 'stub', 'nssa',\n                                                   'stub-no-summary',\n                                                   'nssa-no-summary']),\n            pn_prefix_listin=dict(type='str'),\n            pn_prefix_listout=dict(type='str'),\n            pn_quiet=dict(type='bool', default='True')\n        )\n    )\n\n     Accessing the arguments\n    cliusername = module.params['pn_cliusername']\n    clipassword = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    ospf_area = module.params['pn_ospf_area']\n    stub_type = module.params['pn_stub_type']\n    prefix_listin = module.params['pn_prefix_listin']\n    prefix_listout = module.params['pn_prefix_listout']\n    quiet = module.params['pn_quiet']\n\n    command = get_command_from_state(state)\n\n     Building the CLI command string\n    cli = '/usr/bin/cli'\n\n    if quiet is True:\n        cli += ' --quiet '\n\n    cli += ' --user %s:%s ' % (cliusername, clipassword)\n\n    if cliswitch:\n        if cliswitch == 'local':\n            cli += ' switch-local '\n        else:\n            cli += ' switch ' + cliswitch\n\n    cli += ' %s vrouter-name %s area %s ' % (command, vrouter_name, ospf_area)\n\n    if stub_type:\n        cli += ' stub-type ' + stub_type\n\n    if prefix_listin:\n        cli += ' prefix-list-in ' + prefix_listin\n\n    if prefix_listout:\n        cli += ' prefix-list-out ' + prefix_listout\n\n     Run the CLI command\n    ospfcommand = shlex.split(cli)\n\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(ospfcommand)\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=cli,\n            stderr=err.rstrip(\"\\r\\n\"),\n            changed=False\n        )\n\n    else:\n        module.exit_json(\n            command=cli,\n            stdout=out.rstrip(\"\\r\\n\"),\n            changed=True\n        )\n\n AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli vrouter ospf add remove          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn ospfarea author   pluribus networks ( amitsi)  version added   2 2  short description  cli command add remove ospf area vrouter  description      execute vrouter ospf add  vrouter ospf remove command      this command adds removes open shortest path first(ospf) area     virtual router(vrouter) service  options    pn cliusername      description          login username      required  true   pn clipassword      description          login password      required  true   pn cliswitch      description          target switch(es) run cli      required  false   state      description          state action perform  use  present  add ospf area   absent          remove ospf area  update  modify ospf area      required  true     choices    present    absent    update     pn vrouter name      description          specify name vrouter      required  true   pn ospf area      description          specify ospf area number      required  true   pn stub type      description          specify ospf stub type      choices    none    stub    stub summary    nssa    nssa summary     pn prefix listin      description          ospf prefix list filtering incoming packets    pn prefix listout      description          ospf prefix list filtering outgoing packets    pn quiet      description          enable disable system information      required  false     default  true      examples         name   add ospf area vrouter    pn ospfarea      state  present     pn cliusername  admin     pn clipassword  admin     pn ospf area  1 0 0 0     pn stub type  stub    name   remove ospf vrouter    pn ospf      state  absent     pn cliusername  admin     pn clipassword  admin     pn vrouter name  name string     pn ospf area  1 0 0 0      return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses ospf command    returned  always   type  list stderr    description  the set error responses ospf command    returned  error   type  list changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    vrouter ospf area add      state     absent           command    vrouter ospf area remove      state     update           command    vrouter ospf area modify      return command   def main()          this section arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          accessing arguments    building cli command string    run cli command      contains output     err  contains error messages    response json format    ansiblemodule boilerplate ", "content": "#!/usr/bin/python\n\"\"\" PN-CLI vrouter-ospf-add/remove \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_ospfarea\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove ospf area to/from a vrouter.\ndescription:\n  - Execute vrouter-ospf-add, vrouter-ospf-remove command.\n  - This command adds/removes Open Shortest Path First(OSPF) area to/from\n    a virtual router(vRouter) service.\noptions:\n  pn_cliusername:\n    description:\n      - Login username.\n    required: true\n  pn_clipassword:\n    description:\n      - Login password.\n    required: true\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the CLI on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to add ospf-area, 'absent'\n        to remove ospf-area and 'update' to modify ospf-area.\n    required: true\n    choices: ['present', 'absent', 'update']\n  pn_vrouter_name:\n    description:\n      - Specify the name of the vRouter.\n    required: true\n  pn_ospf_area:\n    description:\n      - Specify the OSPF area number.\n    required: true\n  pn_stub_type:\n    description:\n      - Specify the OSPF stub type.\n    choices: ['none', 'stub', 'stub-no-summary', 'nssa', 'nssa-no-summary']\n  pn_prefix_listin:\n    description:\n      - OSPF prefix list for filtering incoming packets.\n  pn_prefix_listout:\n    description:\n      - OSPF prefix list for filtering outgoing packets.\n  pn_quiet:\n    description:\n      - Enable/disable system information.\n    required: false\n    default: true\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: \"Add OSPF area to vrouter\"\n  pn_ospfarea:\n    state: present\n    pn_cliusername: admin\n    pn_clipassword: admin\n    pn_ospf_area: 1.0.0.0\n    pn_stub_type: stub\n\n- name: \"Remove OSPF from vrouter\"\n  pn_ospf:\n    state: absent\n    pn_cliusername: admin\n    pn_clipassword: admin\n    pn_vrouter_name: name-string\n    pn_ospf_area: 1.0.0.0\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the ospf command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the ospf command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-ospf-area-add'\n    if state == 'absent':\n        command = 'vrouter-ospf-area-remove'\n    if state == 'update':\n        command = 'vrouter-ospf-area-modify'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=True, type='str'),\n            pn_clipassword=dict(required=True, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent', 'update']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_ospf_area=dict(required=True, type='str'),\n            pn_stub_type=dict(type='str', choices=['none', 'stub', 'nssa',\n                                                   'stub-no-summary',\n                                                   'nssa-no-summary']),\n            pn_prefix_listin=dict(type='str'),\n            pn_prefix_listout=dict(type='str'),\n            pn_quiet=dict(type='bool', default='True')\n        )\n    )\n\n    # Accessing the arguments\n    cliusername = module.params['pn_cliusername']\n    clipassword = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    ospf_area = module.params['pn_ospf_area']\n    stub_type = module.params['pn_stub_type']\n    prefix_listin = module.params['pn_prefix_listin']\n    prefix_listout = module.params['pn_prefix_listout']\n    quiet = module.params['pn_quiet']\n\n    command = get_command_from_state(state)\n\n    # Building the CLI command string\n    cli = '/usr/bin/cli'\n\n    if quiet is True:\n        cli += ' --quiet '\n\n    cli += ' --user %s:%s ' % (cliusername, clipassword)\n\n    if cliswitch:\n        if cliswitch == 'local':\n            cli += ' switch-local '\n        else:\n            cli += ' switch ' + cliswitch\n\n    cli += ' %s vrouter-name %s area %s ' % (command, vrouter_name, ospf_area)\n\n    if stub_type:\n        cli += ' stub-type ' + stub_type\n\n    if prefix_listin:\n        cli += ' prefix-list-in ' + prefix_listin\n\n    if prefix_listout:\n        cli += ' prefix-list-out ' + prefix_listout\n\n    # Run the CLI command\n    ospfcommand = shlex.split(cli)\n\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(ospfcommand)\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=cli,\n            stderr=err.rstrip(\"\\r\\n\"),\n            changed=False\n        )\n\n    else:\n        module.exit_json(\n            command=cli,\n            stdout=out.rstrip(\"\\r\\n\"),\n            changed=True\n        )\n\n# AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_ospfarea.py", "id": "cd2636c080ce055f70c53c10e5d7100d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_ospfarea.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}