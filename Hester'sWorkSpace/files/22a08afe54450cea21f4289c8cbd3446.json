{"author": "nvbn", "code": "\nimport os\nfrom psutil import Process\nfrom .bash import Bash\nfrom .fish import Fish\nfrom .generic import Generic\nfrom .tcsh import Tcsh\nfrom .zsh import Zsh\nfrom .powershell import Powershell\n\nshells = {'bash': Bash,\n          'fish': Fish,\n          'zsh': Zsh,\n          'csh': Tcsh,\n          'tcsh': Tcsh,\n          'powershell': Powershell}\n\n\ndef _get_shell_from_env():\n    name = os.environ.get('TF_SHELL')\n\n    if name in shells:\n        return shells[name]()\n\n\ndef _get_shell_from_proc():\n    proc = Process(os.getpid())\n\n    while proc is not None and proc.pid > 0:\n        try:\n            name = proc.name()\n        except TypeError:\n            name = proc.name\n\n        name = os.path.splitext(name)[0]\n\n        if name in shells:\n            return shells[name]()\n\n        try:\n            proc = proc.parent()\n        except TypeError:\n            proc = proc.parent\n\n    return Generic()\n\n\nshell = _get_shell_from_env() or _get_shell_from_proc()\n", "comments": "Package with shell specific actions, each shell class should\nimplement `from_shell`, `to_shell`, `app_alias`, `put_to_history` and\n`get_aliases` methods.\n\n\n\n", "content": "\"\"\"Package with shell specific actions, each shell class should\nimplement `from_shell`, `to_shell`, `app_alias`, `put_to_history` and\n`get_aliases` methods.\n\"\"\"\nimport os\nfrom psutil import Process\nfrom .bash import Bash\nfrom .fish import Fish\nfrom .generic import Generic\nfrom .tcsh import Tcsh\nfrom .zsh import Zsh\nfrom .powershell import Powershell\n\nshells = {'bash': Bash,\n          'fish': Fish,\n          'zsh': Zsh,\n          'csh': Tcsh,\n          'tcsh': Tcsh,\n          'powershell': Powershell}\n\n\ndef _get_shell_from_env():\n    name = os.environ.get('TF_SHELL')\n\n    if name in shells:\n        return shells[name]()\n\n\ndef _get_shell_from_proc():\n    proc = Process(os.getpid())\n\n    while proc is not None and proc.pid > 0:\n        try:\n            name = proc.name()\n        except TypeError:\n            name = proc.name\n\n        name = os.path.splitext(name)[0]\n\n        if name in shells:\n            return shells[name]()\n\n        try:\n            proc = proc.parent()\n        except TypeError:\n            proc = proc.parent\n\n    return Generic()\n\n\nshell = _get_shell_from_env() or _get_shell_from_proc()\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "__init__.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/shells/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}