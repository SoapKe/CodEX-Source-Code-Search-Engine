{"author": "pallets", "code": "# -*- coding: utf-8 -*-\n\"\"\"\n    jinja2.optimizer\n    ~~~~~~~~~~~~~~~~\n\n    The jinja optimizer is currently trying to constant fold a few expressions\n    and modify the AST in place so that it should be easier to evaluate it.\n\n    Because the AST does not contain all the scoping information and the\n    compiler has to find that out, we cannot do all the optimizations we\n    want.  For example loop unrolling doesn't work because unrolled loops would\n    have a different scoping.\n\n    The solution would be a second syntax tree that has the scoping rules stored.\n\n    :copyright: (c) 2017 by the Jinja Team.\n    :license: BSD.\n\"\"\"\nfrom jinja2 import nodes\nfrom jinja2.visitor import NodeTransformer\n\n\ndef optimize(node, environment):\n    \"\"\"The context hint can be used to perform an static optimization\n    based on the context given.\"\"\"\n    optimizer = Optimizer(environment)\n    return optimizer.visit(node)\n\n\nclass Optimizer(NodeTransformer):\n\n    def __init__(self, environment):\n        self.environment = environment\n\n    def fold(self, node, eval_ctx=None):\n        \"\"\"Do constant folding.\"\"\"\n        node = self.generic_visit(node)\n        try:\n            return nodes.Const.from_untrusted(node.as_const(eval_ctx),\n                                              lineno=node.lineno,\n                                              environment=self.environment)\n        except nodes.Impossible:\n            return node\n\n    visit_Add = visit_Sub = visit_Mul = visit_Div = visit_FloorDiv = \\\n    visit_Pow = visit_Mod = visit_And = visit_Or = visit_Pos = visit_Neg = \\\n    visit_Not = visit_Compare = visit_Getitem = visit_Getattr = visit_Call = \\\n    visit_Filter = visit_Test = visit_CondExpr = fold\n    del fold\n", "comments": "        jinja2 optimizer                           the jinja optimizer currently trying constant fold expressions     modify ast place easier evaluate       because ast contain scoping information     compiler find  cannot optimizations     want   for example loop unrolling work unrolled loops would     different scoping       the solution would second syntax tree scoping rules stored        copyright  (c) 2017 jinja team       license  bsd      jinja2 import nodes jinja2 visitor import nodetransformer   def optimize(node  environment)         the context hint used perform static optimization     based context given         optimizer   optimizer(environment)     return optimizer visit(node)   class optimizer(nodetransformer)       def   init  (self  environment)          self environment   environment      def fold(self  node  eval ctx none)             do constant folding            coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\"\"\"\n    jinja2.optimizer\n    ~~~~~~~~~~~~~~~~\n\n    The jinja optimizer is currently trying to constant fold a few expressions\n    and modify the AST in place so that it should be easier to evaluate it.\n\n    Because the AST does not contain all the scoping information and the\n    compiler has to find that out, we cannot do all the optimizations we\n    want.  For example loop unrolling doesn't work because unrolled loops would\n    have a different scoping.\n\n    The solution would be a second syntax tree that has the scoping rules stored.\n\n    :copyright: (c) 2017 by the Jinja Team.\n    :license: BSD.\n\"\"\"\nfrom jinja2 import nodes\nfrom jinja2.visitor import NodeTransformer\n\n\ndef optimize(node, environment):\n    \"\"\"The context hint can be used to perform an static optimization\n    based on the context given.\"\"\"\n    optimizer = Optimizer(environment)\n    return optimizer.visit(node)\n\n\nclass Optimizer(NodeTransformer):\n\n    def __init__(self, environment):\n        self.environment = environment\n\n    def fold(self, node, eval_ctx=None):\n        \"\"\"Do constant folding.\"\"\"\n        node = self.generic_visit(node)\n        try:\n            return nodes.Const.from_untrusted(node.as_const(eval_ctx),\n                                              lineno=node.lineno,\n                                              environment=self.environment)\n        except nodes.Impossible:\n            return node\n\n    visit_Add = visit_Sub = visit_Mul = visit_Div = visit_FloorDiv = \\\n    visit_Pow = visit_Mod = visit_And = visit_Or = visit_Pos = visit_Neg = \\\n    visit_Not = visit_Compare = visit_Getitem = visit_Getattr = visit_Call = \\\n    visit_Filter = visit_Test = visit_CondExpr = fold\n    del fold\n", "description": "The Jinja2 template engine", "file_name": "optimizer.py", "id": "561e8cd64e4f7a697347ff96daded741", "language": "Python", "project_name": "jinja", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/pallets-jinja/pallets-jinja-3d7cfc8/jinja2/optimizer.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:18:18Z", "url": "https://github.com/pallets/jinja", "wiki": false}