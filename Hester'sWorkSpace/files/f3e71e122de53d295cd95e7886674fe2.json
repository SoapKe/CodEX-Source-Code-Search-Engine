{"author": "tensorflow", "code": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\n\nimport tensorflow as tf\n\nfrom common import config_lib  \n\n\nclass ConfigLibTest(tf.test.TestCase):\n\n  def testConfig(self):\n    config = config_lib.Config(hello='world', foo='bar', num=123, f=56.7)\n    self.assertEqual('world', config.hello)\n    self.assertEqual('bar', config['foo'])\n    config.hello = 'everyone'\n    config['bar'] = 9000\n    self.assertEqual('everyone', config['hello'])\n    self.assertEqual(9000, config.bar)\n    self.assertEqual(5, len(config))\n\n  def testConfigUpdate(self):\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.update({'b': 10, 'd': 4})\n    self.assertEqual({'a': 1, 'b': 10, 'c': 3, 'd': 4}, config)\n\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.update(b=10, d=4)\n    self.assertEqual({'a': 1, 'b': 10, 'c': 3, 'd': 4}, config)\n\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.update({'e': 5}, b=10, d=4)\n    self.assertEqual({'a': 1, 'b': 10, 'c': 3, 'd': 4, 'e': 5}, config)\n\n    config = config_lib.Config(\n        a=1,\n        b=2,\n        x=config_lib.Config(\n            l='a',\n            y=config_lib.Config(m=1, n=2),\n            z=config_lib.Config(\n                q=config_lib.Config(a=10, b=20),\n                r=config_lib.Config(s=1, t=2))))\n    config.update(x={'y': {'m': 10}, 'z': {'r': {'s': 5}}})\n    self.assertEqual(\n        config_lib.Config(\n            a=1, b=2,\n            x=config_lib.Config(\n                l='a',\n                y=config_lib.Config(m=10, n=2),\n                z=config_lib.Config(\n                    q=config_lib.Config(a=10, b=20),\n                    r=config_lib.Config(s=5, t=2)))),\n        config)\n\n    config = config_lib.Config(\n        foo='bar',\n        num=100,\n        x=config_lib.Config(a=1, b=2, c=config_lib.Config(h=10, i=20, j=30)),\n        y=config_lib.Config(qrs=5, tuv=10),\n        d={'a': 1, 'b': 2},\n        l=[1, 2, 3])\n    config.update(\n        config_lib.Config(\n            foo='hat',\n            num=50.5,\n            x={'a': 5, 'z': -10},\n            y=config_lib.Config(wxyz=-1)),\n        d={'a': 10, 'c': 20},\n        l=[3, 4, 5, 6])\n    self.assertEqual(\n        config_lib.Config(\n            foo='hat',\n            num=50.5,\n            x=config_lib.Config(a=5, b=2, z=-10,\n                                c=config_lib.Config(h=10, i=20, j=30)),\n            y=config_lib.Config(qrs=5, tuv=10, wxyz=-1),\n            d={'a': 10, 'c': 20},\n            l=[3, 4, 5, 6]),\n        config)\n    self.assertTrue(isinstance(config.x, config_lib.Config))\n    self.assertTrue(isinstance(config.x.c, config_lib.Config))\n    self.assertTrue(isinstance(config.y, config_lib.Config))\n\n    config = config_lib.Config(\n        foo='bar',\n        num=100,\n        x=config_lib.Config(a=1, b=2, c=config_lib.Config(h=10, i=20, j=30)),\n        y=config_lib.Config(qrs=5, tuv=10),\n        d={'a': 1, 'b': 2},\n        l=[1, 2, 3])\n    config.update(\n        config_lib.Config(\n            foo=1234,\n            num='hello',\n            x={'a': 5, 'z': -10, 'c': {'h': -5, 'k': 40}},\n            y=[1, 2, 3, 4],\n            d='stuff',\n            l={'a': 1, 'b': 2}))\n    self.assertEqual(\n        config_lib.Config(\n            foo=1234,\n            num='hello',\n            x=config_lib.Config(a=5, b=2, z=-10,\n                                c=config_lib.Config(h=-5, i=20, j=30, k=40)),\n            y=[1, 2, 3, 4],\n            d='stuff',\n            l={'a': 1, 'b': 2}),\n        config)\n    self.assertTrue(isinstance(config.x, config_lib.Config))\n    self.assertTrue(isinstance(config.x.c, config_lib.Config))\n    self.assertTrue(isinstance(config.y, list))\n\n  def testConfigStrictUpdate(self):\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.strict_update({'b': 10, 'c': 20})\n    self.assertEqual({'a': 1, 'b': 10, 'c': 20}, config)\n\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.strict_update(b=10, c=20)\n    self.assertEqual({'a': 1, 'b': 10, 'c': 20}, config)\n\n    config = config_lib.Config(a=1, b=2, c=3, d=4)\n    config.strict_update({'d': 100}, b=10, a=20)\n    self.assertEqual({'a': 20, 'b': 10, 'c': 3, 'd': 100}, config)\n\n    config = config_lib.Config(\n        a=1,\n        b=2,\n        x=config_lib.Config(\n            l='a',\n            y=config_lib.Config(m=1, n=2),\n            z=config_lib.Config(\n                q=config_lib.Config(a=10, b=20),\n                r=config_lib.Config(s=1, t=2))))\n    config.strict_update(x={'y': {'m': 10}, 'z': {'r': {'s': 5}}})\n    self.assertEqual(\n        config_lib.Config(\n            a=1, b=2,\n            x=config_lib.Config(\n                l='a',\n                y=config_lib.Config(m=10, n=2),\n                z=config_lib.Config(\n                    q=config_lib.Config(a=10, b=20),\n                    r=config_lib.Config(s=5, t=2)))),\n        config)\n\n    config = config_lib.Config(\n        foo='bar',\n        num=100,\n        x=config_lib.Config(a=1, b=2, c=config_lib.Config(h=10, i=20, j=30)),\n        y=config_lib.Config(qrs=5, tuv=10),\n        d={'a': 1, 'b': 2},\n        l=[1, 2, 3])\n    config.strict_update(\n        config_lib.Config(\n            foo='hat',\n            num=50,\n            x={'a': 5, 'c': {'h': 100}},\n            y=config_lib.Config(tuv=-1)),\n        d={'a': 10, 'c': 20},\n        l=[3, 4, 5, 6])\n    self.assertEqual(\n        config_lib.Config(\n            foo='hat',\n            num=50,\n            x=config_lib.Config(a=5, b=2,\n                                c=config_lib.Config(h=100, i=20, j=30)),\n            y=config_lib.Config(qrs=5, tuv=-1),\n            d={'a': 10, 'c': 20},\n            l=[3, 4, 5, 6]),\n        config)\n\n  def testConfigStrictUpdateFail(self):\n    config = config_lib.Config(a=1, b=2, c=3, x=config_lib.Config(a=1, b=2))\n    with self.assertRaises(KeyError):\n      config.strict_update({'b': 10, 'c': 20, 'd': 50})\n    with self.assertRaises(KeyError):\n      config.strict_update(b=10, d=50)\n    with self.assertRaises(KeyError):\n      config.strict_update(x={'c': 3})\n    with self.assertRaises(TypeError):\n      config.strict_update(a='string')\n    with self.assertRaises(TypeError):\n      config.strict_update(x={'a': 'string'})\n    with self.assertRaises(TypeError):\n      config.strict_update(x=[1, 2, 3])\n\n  def testConfigFromStr(self):\n    config = config_lib.Config.from_str(\"{'c': {'d': 5}, 'b': 2, 'a': 1}\")\n    self.assertEqual(\n        {'c': {'d': 5}, 'b': 2, 'a': 1}, config)\n    self.assertTrue(isinstance(config, config_lib.Config))\n    self.assertTrue(isinstance(config.c, config_lib.Config))\n\n  def testConfigParse(self):\n    config = config_lib.Config.parse(\n        'hello=\"world\",num=1234.5,lst=[10,20.5,True,\"hi\",(\"a\",\"b\",\"c\")],'\n        'dct={9:10,\"stuff\":\"qwerty\",\"subdict\":{1:True,2:False}},'\n        'subconfig=c(a=1,b=[1,2,[3,4]],c=c(f=\"f\",g=\"g\"))')\n    self.assertEqual(\n        {'hello': 'world', 'num': 1234.5,\n         'lst': [10, 20.5, True, 'hi', ('a', 'b', 'c')],\n         'dct': {9: 10, 'stuff': 'qwerty', 'subdict': {1: True, 2: False}},\n         'subconfig': {'a': 1, 'b': [1, 2, [3, 4]], 'c': {'f': 'f', 'g': 'g'}}},\n        config)\n    self.assertTrue(isinstance(config, config_lib.Config))\n    self.assertTrue(isinstance(config.subconfig, config_lib.Config))\n    self.assertTrue(isinstance(config.subconfig.c, config_lib.Config))\n    self.assertFalse(isinstance(config.dct, config_lib.Config))\n    self.assertFalse(isinstance(config.dct['subdict'], config_lib.Config))\n    self.assertTrue(isinstance(config.lst[4], tuple))\n\n  def testConfigParseErrors(self):\n    with self.assertRaises(SyntaxError):\n      config_lib.Config.parse('a=[1,2,b=\"hello\"')\n    with self.assertRaises(SyntaxError):\n      config_lib.Config.parse('a=1,b=c(x=\"a\",y=\"b\"')\n    with self.assertRaises(SyntaxError):\n      config_lib.Config.parse('a=1,b=c(x=\"a\")y=\"b\"')\n    with self.assertRaises(SyntaxError):\n      config_lib.Config.parse('a=1,b=c(x=\"a\"),y=\"b\",')\n\n  def testOneOf(self):\n    def make_config():\n      return config_lib.Config(\n          data=config_lib.OneOf(\n              [config_lib.Config(task=1, a='hello'),\n               config_lib.Config(task=2, a='world', b='stuff'),\n               config_lib.Config(task=3, c=1234)],\n              task=2),\n          model=config_lib.Config(stuff=1))\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=1,a=\"hi\")'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=1, a='hi'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=2,a=\"hi\")'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=2, a='hi', b='stuff'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=3)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=3, c=1234),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=2, a='world', b='stuff'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=4,d=9999)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=4, d=9999),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=5'))\n    self.assertEqual(\n        config_lib.Config(\n            data=5,\n            model=config_lib.Config(stuff=2)),\n        config)\n\n  def testOneOfStrict(self):\n    def make_config():\n      return config_lib.Config(\n          data=config_lib.OneOf(\n              [config_lib.Config(task=1, a='hello'),\n               config_lib.Config(task=2, a='world', b='stuff'),\n               config_lib.Config(task=3, c=1234)],\n              task=2),\n          model=config_lib.Config(stuff=1))\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=1,a=\"hi\")'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=1, a='hi'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=2,a=\"hi\")'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=2, a='hi', b='stuff'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=3)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=3, c=1234),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=2, a='world', b='stuff'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n  def testNestedOneOf(self):\n    def make_config():\n      return config_lib.Config(\n          data=config_lib.OneOf(\n              [config_lib.Config(task=1, a='hello'),\n               config_lib.Config(\n                   task=2,\n                   a=config_lib.OneOf(\n                       [config_lib.Config(x=1, y=2),\n                        config_lib.Config(x=-1, y=1000, z=4)],\n                       x=1)),\n               config_lib.Config(task=3, c=1234)],\n              task=2),\n          model=config_lib.Config(stuff=1))\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=2,a=c(x=-1,z=8))'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(\n                task=2,\n                a=config_lib.Config(x=-1, y=1000, z=8)),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=2,a=c(x=-1,z=8))'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(\n                task=2,\n                a=config_lib.Config(x=-1, y=1000, z=8)),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse('model=c(stuff=2)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(\n                task=2,\n                a=config_lib.Config(x=1, y=2)),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse('model=c(stuff=2)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(\n                task=2,\n                a=config_lib.Config(x=1, y=2)),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n  def testOneOfStrictErrors(self):\n    def make_config():\n      return config_lib.Config(\n          data=config_lib.OneOf(\n              [config_lib.Config(task=1, a='hello'),\n               config_lib.Config(task=2, a='world', b='stuff'),\n               config_lib.Config(task=3, c=1234)],\n              task=2),\n          model=config_lib.Config(stuff=1))\n\n    config = make_config()\n    with self.assertRaises(TypeError):\n      config.strict_update(config_lib.Config.parse(\n          'model=c(stuff=2),data=[1,2,3]'))\n\n    config = make_config()\n    with self.assertRaises(KeyError):\n      config.strict_update(config_lib.Config.parse(\n          'model=c(stuff=2),data=c(task=3,c=5678,d=9999)'))\n\n    config = make_config()\n    with self.assertRaises(ValueError):\n      config.strict_update(config_lib.Config.parse(\n          'model=c(stuff=2),data=c(task=4,d=9999)'))\n\n    config = make_config()\n    with self.assertRaises(TypeError):\n      config.strict_update(config_lib.Config.parse(\n          'model=c(stuff=2),data=5'))\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   tests common config lib        brain coder ", "content": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\"\"\"Tests for common.config_lib.\"\"\"\n\nimport tensorflow as tf\n\nfrom common import config_lib  # brain coder\n\n\nclass ConfigLibTest(tf.test.TestCase):\n\n  def testConfig(self):\n    config = config_lib.Config(hello='world', foo='bar', num=123, f=56.7)\n    self.assertEqual('world', config.hello)\n    self.assertEqual('bar', config['foo'])\n    config.hello = 'everyone'\n    config['bar'] = 9000\n    self.assertEqual('everyone', config['hello'])\n    self.assertEqual(9000, config.bar)\n    self.assertEqual(5, len(config))\n\n  def testConfigUpdate(self):\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.update({'b': 10, 'd': 4})\n    self.assertEqual({'a': 1, 'b': 10, 'c': 3, 'd': 4}, config)\n\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.update(b=10, d=4)\n    self.assertEqual({'a': 1, 'b': 10, 'c': 3, 'd': 4}, config)\n\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.update({'e': 5}, b=10, d=4)\n    self.assertEqual({'a': 1, 'b': 10, 'c': 3, 'd': 4, 'e': 5}, config)\n\n    config = config_lib.Config(\n        a=1,\n        b=2,\n        x=config_lib.Config(\n            l='a',\n            y=config_lib.Config(m=1, n=2),\n            z=config_lib.Config(\n                q=config_lib.Config(a=10, b=20),\n                r=config_lib.Config(s=1, t=2))))\n    config.update(x={'y': {'m': 10}, 'z': {'r': {'s': 5}}})\n    self.assertEqual(\n        config_lib.Config(\n            a=1, b=2,\n            x=config_lib.Config(\n                l='a',\n                y=config_lib.Config(m=10, n=2),\n                z=config_lib.Config(\n                    q=config_lib.Config(a=10, b=20),\n                    r=config_lib.Config(s=5, t=2)))),\n        config)\n\n    config = config_lib.Config(\n        foo='bar',\n        num=100,\n        x=config_lib.Config(a=1, b=2, c=config_lib.Config(h=10, i=20, j=30)),\n        y=config_lib.Config(qrs=5, tuv=10),\n        d={'a': 1, 'b': 2},\n        l=[1, 2, 3])\n    config.update(\n        config_lib.Config(\n            foo='hat',\n            num=50.5,\n            x={'a': 5, 'z': -10},\n            y=config_lib.Config(wxyz=-1)),\n        d={'a': 10, 'c': 20},\n        l=[3, 4, 5, 6])\n    self.assertEqual(\n        config_lib.Config(\n            foo='hat',\n            num=50.5,\n            x=config_lib.Config(a=5, b=2, z=-10,\n                                c=config_lib.Config(h=10, i=20, j=30)),\n            y=config_lib.Config(qrs=5, tuv=10, wxyz=-1),\n            d={'a': 10, 'c': 20},\n            l=[3, 4, 5, 6]),\n        config)\n    self.assertTrue(isinstance(config.x, config_lib.Config))\n    self.assertTrue(isinstance(config.x.c, config_lib.Config))\n    self.assertTrue(isinstance(config.y, config_lib.Config))\n\n    config = config_lib.Config(\n        foo='bar',\n        num=100,\n        x=config_lib.Config(a=1, b=2, c=config_lib.Config(h=10, i=20, j=30)),\n        y=config_lib.Config(qrs=5, tuv=10),\n        d={'a': 1, 'b': 2},\n        l=[1, 2, 3])\n    config.update(\n        config_lib.Config(\n            foo=1234,\n            num='hello',\n            x={'a': 5, 'z': -10, 'c': {'h': -5, 'k': 40}},\n            y=[1, 2, 3, 4],\n            d='stuff',\n            l={'a': 1, 'b': 2}))\n    self.assertEqual(\n        config_lib.Config(\n            foo=1234,\n            num='hello',\n            x=config_lib.Config(a=5, b=2, z=-10,\n                                c=config_lib.Config(h=-5, i=20, j=30, k=40)),\n            y=[1, 2, 3, 4],\n            d='stuff',\n            l={'a': 1, 'b': 2}),\n        config)\n    self.assertTrue(isinstance(config.x, config_lib.Config))\n    self.assertTrue(isinstance(config.x.c, config_lib.Config))\n    self.assertTrue(isinstance(config.y, list))\n\n  def testConfigStrictUpdate(self):\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.strict_update({'b': 10, 'c': 20})\n    self.assertEqual({'a': 1, 'b': 10, 'c': 20}, config)\n\n    config = config_lib.Config(a=1, b=2, c=3)\n    config.strict_update(b=10, c=20)\n    self.assertEqual({'a': 1, 'b': 10, 'c': 20}, config)\n\n    config = config_lib.Config(a=1, b=2, c=3, d=4)\n    config.strict_update({'d': 100}, b=10, a=20)\n    self.assertEqual({'a': 20, 'b': 10, 'c': 3, 'd': 100}, config)\n\n    config = config_lib.Config(\n        a=1,\n        b=2,\n        x=config_lib.Config(\n            l='a',\n            y=config_lib.Config(m=1, n=2),\n            z=config_lib.Config(\n                q=config_lib.Config(a=10, b=20),\n                r=config_lib.Config(s=1, t=2))))\n    config.strict_update(x={'y': {'m': 10}, 'z': {'r': {'s': 5}}})\n    self.assertEqual(\n        config_lib.Config(\n            a=1, b=2,\n            x=config_lib.Config(\n                l='a',\n                y=config_lib.Config(m=10, n=2),\n                z=config_lib.Config(\n                    q=config_lib.Config(a=10, b=20),\n                    r=config_lib.Config(s=5, t=2)))),\n        config)\n\n    config = config_lib.Config(\n        foo='bar',\n        num=100,\n        x=config_lib.Config(a=1, b=2, c=config_lib.Config(h=10, i=20, j=30)),\n        y=config_lib.Config(qrs=5, tuv=10),\n        d={'a': 1, 'b': 2},\n        l=[1, 2, 3])\n    config.strict_update(\n        config_lib.Config(\n            foo='hat',\n            num=50,\n            x={'a': 5, 'c': {'h': 100}},\n            y=config_lib.Config(tuv=-1)),\n        d={'a': 10, 'c': 20},\n        l=[3, 4, 5, 6])\n    self.assertEqual(\n        config_lib.Config(\n            foo='hat',\n            num=50,\n            x=config_lib.Config(a=5, b=2,\n                                c=config_lib.Config(h=100, i=20, j=30)),\n            y=config_lib.Config(qrs=5, tuv=-1),\n            d={'a': 10, 'c': 20},\n            l=[3, 4, 5, 6]),\n        config)\n\n  def testConfigStrictUpdateFail(self):\n    config = config_lib.Config(a=1, b=2, c=3, x=config_lib.Config(a=1, b=2))\n    with self.assertRaises(KeyError):\n      config.strict_update({'b': 10, 'c': 20, 'd': 50})\n    with self.assertRaises(KeyError):\n      config.strict_update(b=10, d=50)\n    with self.assertRaises(KeyError):\n      config.strict_update(x={'c': 3})\n    with self.assertRaises(TypeError):\n      config.strict_update(a='string')\n    with self.assertRaises(TypeError):\n      config.strict_update(x={'a': 'string'})\n    with self.assertRaises(TypeError):\n      config.strict_update(x=[1, 2, 3])\n\n  def testConfigFromStr(self):\n    config = config_lib.Config.from_str(\"{'c': {'d': 5}, 'b': 2, 'a': 1}\")\n    self.assertEqual(\n        {'c': {'d': 5}, 'b': 2, 'a': 1}, config)\n    self.assertTrue(isinstance(config, config_lib.Config))\n    self.assertTrue(isinstance(config.c, config_lib.Config))\n\n  def testConfigParse(self):\n    config = config_lib.Config.parse(\n        'hello=\"world\",num=1234.5,lst=[10,20.5,True,\"hi\",(\"a\",\"b\",\"c\")],'\n        'dct={9:10,\"stuff\":\"qwerty\",\"subdict\":{1:True,2:False}},'\n        'subconfig=c(a=1,b=[1,2,[3,4]],c=c(f=\"f\",g=\"g\"))')\n    self.assertEqual(\n        {'hello': 'world', 'num': 1234.5,\n         'lst': [10, 20.5, True, 'hi', ('a', 'b', 'c')],\n         'dct': {9: 10, 'stuff': 'qwerty', 'subdict': {1: True, 2: False}},\n         'subconfig': {'a': 1, 'b': [1, 2, [3, 4]], 'c': {'f': 'f', 'g': 'g'}}},\n        config)\n    self.assertTrue(isinstance(config, config_lib.Config))\n    self.assertTrue(isinstance(config.subconfig, config_lib.Config))\n    self.assertTrue(isinstance(config.subconfig.c, config_lib.Config))\n    self.assertFalse(isinstance(config.dct, config_lib.Config))\n    self.assertFalse(isinstance(config.dct['subdict'], config_lib.Config))\n    self.assertTrue(isinstance(config.lst[4], tuple))\n\n  def testConfigParseErrors(self):\n    with self.assertRaises(SyntaxError):\n      config_lib.Config.parse('a=[1,2,b=\"hello\"')\n    with self.assertRaises(SyntaxError):\n      config_lib.Config.parse('a=1,b=c(x=\"a\",y=\"b\"')\n    with self.assertRaises(SyntaxError):\n      config_lib.Config.parse('a=1,b=c(x=\"a\")y=\"b\"')\n    with self.assertRaises(SyntaxError):\n      config_lib.Config.parse('a=1,b=c(x=\"a\"),y=\"b\",')\n\n  def testOneOf(self):\n    def make_config():\n      return config_lib.Config(\n          data=config_lib.OneOf(\n              [config_lib.Config(task=1, a='hello'),\n               config_lib.Config(task=2, a='world', b='stuff'),\n               config_lib.Config(task=3, c=1234)],\n              task=2),\n          model=config_lib.Config(stuff=1))\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=1,a=\"hi\")'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=1, a='hi'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=2,a=\"hi\")'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=2, a='hi', b='stuff'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=3)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=3, c=1234),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=2, a='world', b='stuff'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=4,d=9999)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=4, d=9999),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=5'))\n    self.assertEqual(\n        config_lib.Config(\n            data=5,\n            model=config_lib.Config(stuff=2)),\n        config)\n\n  def testOneOfStrict(self):\n    def make_config():\n      return config_lib.Config(\n          data=config_lib.OneOf(\n              [config_lib.Config(task=1, a='hello'),\n               config_lib.Config(task=2, a='world', b='stuff'),\n               config_lib.Config(task=3, c=1234)],\n              task=2),\n          model=config_lib.Config(stuff=1))\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=1,a=\"hi\")'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=1, a='hi'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=2,a=\"hi\")'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=2, a='hi', b='stuff'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=3)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=3, c=1234),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(task=2, a='world', b='stuff'),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n  def testNestedOneOf(self):\n    def make_config():\n      return config_lib.Config(\n          data=config_lib.OneOf(\n              [config_lib.Config(task=1, a='hello'),\n               config_lib.Config(\n                   task=2,\n                   a=config_lib.OneOf(\n                       [config_lib.Config(x=1, y=2),\n                        config_lib.Config(x=-1, y=1000, z=4)],\n                       x=1)),\n               config_lib.Config(task=3, c=1234)],\n              task=2),\n          model=config_lib.Config(stuff=1))\n\n    config = make_config()\n    config.update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=2,a=c(x=-1,z=8))'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(\n                task=2,\n                a=config_lib.Config(x=-1, y=1000, z=8)),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse(\n        'model=c(stuff=2),data=c(task=2,a=c(x=-1,z=8))'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(\n                task=2,\n                a=config_lib.Config(x=-1, y=1000, z=8)),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.update(config_lib.Config.parse('model=c(stuff=2)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(\n                task=2,\n                a=config_lib.Config(x=1, y=2)),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n    config = make_config()\n    config.strict_update(config_lib.Config.parse('model=c(stuff=2)'))\n    self.assertEqual(\n        config_lib.Config(\n            data=config_lib.Config(\n                task=2,\n                a=config_lib.Config(x=1, y=2)),\n            model=config_lib.Config(stuff=2)),\n        config)\n\n  def testOneOfStrictErrors(self):\n    def make_config():\n      return config_lib.Config(\n          data=config_lib.OneOf(\n              [config_lib.Config(task=1, a='hello'),\n               config_lib.Config(task=2, a='world', b='stuff'),\n               config_lib.Config(task=3, c=1234)],\n              task=2),\n          model=config_lib.Config(stuff=1))\n\n    config = make_config()\n    with self.assertRaises(TypeError):\n      config.strict_update(config_lib.Config.parse(\n          'model=c(stuff=2),data=[1,2,3]'))\n\n    config = make_config()\n    with self.assertRaises(KeyError):\n      config.strict_update(config_lib.Config.parse(\n          'model=c(stuff=2),data=c(task=3,c=5678,d=9999)'))\n\n    config = make_config()\n    with self.assertRaises(ValueError):\n      config.strict_update(config_lib.Config.parse(\n          'model=c(stuff=2),data=c(task=4,d=9999)'))\n\n    config = make_config()\n    with self.assertRaises(TypeError):\n      config.strict_update(config_lib.Config.parse(\n          'model=c(stuff=2),data=5'))\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "config_lib_test.py", "id": "f3e71e122de53d295cd95e7886674fe2", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/brain_coder/common/config_lib_test.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}