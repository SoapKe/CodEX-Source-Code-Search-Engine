{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestGroupOrdered(object):\n    def test_group_ordered(self, func):\n\n        assert_equal(func(None), None)\n        print('Success: ' + func.__name__ + \" None case.\")\n        assert_equal(func([]), [])\n        print('Success: ' + func.__name__ + \" Empty case.\")\n        assert_equal(func([1]), [1])\n        print('Success: ' + func.__name__ + \" Single element case.\")\n        assert_equal(func([1, 2, 1, 3, 2]), [1, 1, 2, 2, 3])\n        assert_equal(func(['a', 'b', 'a']), ['a', 'a', 'b'])\n        assert_equal(func([1, 1, 2, 3, 4, 5, 2, 1]), [1, 1, 1, 2, 2, 3, 4, 5])\n        assert_equal(func([1, 2, 3, 4, 3, 4]), [1, 2, 3, 3, 4, 4])\n        print('Success: ' + func.__name__)\n\n\ndef main():\n    test = TestGroupOrdered()\n    test.test_group_ordered(group_ordered)\n    try:\n        test.test_group_ordered(group_ordered_alt)\n    except NameError:\n        \n        \n        pass\n\nif __name__ == '__main__':\n    main()", "comments": "  alternate solutions defined    solutions file ", "content": "from nose.tools import assert_equal\n\n\nclass TestGroupOrdered(object):\n    def test_group_ordered(self, func):\n\n        assert_equal(func(None), None)\n        print('Success: ' + func.__name__ + \" None case.\")\n        assert_equal(func([]), [])\n        print('Success: ' + func.__name__ + \" Empty case.\")\n        assert_equal(func([1]), [1])\n        print('Success: ' + func.__name__ + \" Single element case.\")\n        assert_equal(func([1, 2, 1, 3, 2]), [1, 1, 2, 2, 3])\n        assert_equal(func(['a', 'b', 'a']), ['a', 'a', 'b'])\n        assert_equal(func([1, 1, 2, 3, 4, 5, 2, 1]), [1, 1, 1, 2, 2, 3, 4, 5])\n        assert_equal(func([1, 2, 3, 4, 3, 4]), [1, 2, 3, 3, 4, 4])\n        print('Success: ' + func.__name__)\n\n\ndef main():\n    test = TestGroupOrdered()\n    test.test_group_ordered(group_ordered)\n    try:\n        test.test_group_ordered(group_ordered_alt)\n    except NameError:\n        # Alternate solutions are only defined\n        # in the solutions file\n        pass\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_group_ordered.py", "id": "73896e1bd9d6502192cf793e5eed0281", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/staging/sorting_searching/group_ordered/test_group_ordered.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}