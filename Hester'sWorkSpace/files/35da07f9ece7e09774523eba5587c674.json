{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import ValidationError\n\n\nclass GamificationBadgeUser(models.Model):\n    \n    _inherit = 'gamification.badge.user'\n\n    employee_id = fields.Many2one('hr.employee', string='Employee')\n\n    @api.constrains('employee_id')\n    def _check_employee_related_user(self):\n        for badge_user in self:\n            if badge_user.employee_id not in badge_user.user_id.employee_ids:\n                raise ValidationError(_('The selected employee does not correspond to the selected user.'))\n\n\nclass GamificationBadge(models.Model):\n    _inherit = 'gamification.badge'\n\n    granted_employees_count = fields.Integer(compute=\"_compute_granted_employees_count\")\n\n    @api.depends('owner_ids.employee_id')\n    def _compute_granted_employees_count(self):\n        for badge in self:\n            badge.granted_employees_count = self.env['gamification.badge.user'].search_count([\n                ('badge_id', '=', badge.id),\n                ('employee_id', '!=', False)\n            ])\n\n    @api.multi\n    def get_granted_employees(self):\n        employee_ids = self.mapped('owner_ids.employee_id').ids\n        return {\n            'type': 'ir.actions.act_window',\n            'name': 'Granted Employees',\n            'view_mode': 'kanban,tree,form',\n            'view_type': 'form',\n            'res_model': 'hr.employee',\n            'domain': [('id', 'in', employee_ids)]\n        }\n", "comments": "   user received badge           coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import ValidationError\n\n\nclass GamificationBadgeUser(models.Model):\n    \"\"\"User having received a badge\"\"\"\n    _inherit = 'gamification.badge.user'\n\n    employee_id = fields.Many2one('hr.employee', string='Employee')\n\n    @api.constrains('employee_id')\n    def _check_employee_related_user(self):\n        for badge_user in self:\n            if badge_user.employee_id not in badge_user.user_id.employee_ids:\n                raise ValidationError(_('The selected employee does not correspond to the selected user.'))\n\n\nclass GamificationBadge(models.Model):\n    _inherit = 'gamification.badge'\n\n    granted_employees_count = fields.Integer(compute=\"_compute_granted_employees_count\")\n\n    @api.depends('owner_ids.employee_id')\n    def _compute_granted_employees_count(self):\n        for badge in self:\n            badge.granted_employees_count = self.env['gamification.badge.user'].search_count([\n                ('badge_id', '=', badge.id),\n                ('employee_id', '!=', False)\n            ])\n\n    @api.multi\n    def get_granted_employees(self):\n        employee_ids = self.mapped('owner_ids.employee_id').ids\n        return {\n            'type': 'ir.actions.act_window',\n            'name': 'Granted Employees',\n            'view_mode': 'kanban,tree,form',\n            'view_type': 'form',\n            'res_model': 'hr.employee',\n            'domain': [('id', 'in', employee_ids)]\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "gamification.py", "id": "35da07f9ece7e09774523eba5587c674", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_gamification/models/gamification.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}