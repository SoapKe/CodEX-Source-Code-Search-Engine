{"author": "django", "code": "from django.core.exceptions import FieldError\nfrom django.db.models import FilteredRelation\nfrom django.test import SimpleTestCase, TestCase\n\nfrom .models import (\n    AdvancedUserStat, Child1, Child2, Child3, Child4, Image, LinkedList,\n    Parent1, Parent2, Product, StatDetails, User, UserProfile, UserStat,\n    UserStatResult,\n)\n\n\nclass ReverseSelectRelatedTestCase(TestCase):\n    def setUp(self):\n        user = User.objects.create(username=\"test\")\n        UserProfile.objects.create(user=user, state=\"KS\", city=\"Lawrence\")\n        results = UserStatResult.objects.create(results='first results')\n        userstat = UserStat.objects.create(user=user, posts=150, results=results)\n        StatDetails.objects.create(base_stats=userstat, comments=259)\n\n        user2 = User.objects.create(username=\"bob\")\n        results2 = UserStatResult.objects.create(results='moar results')\n        advstat = AdvancedUserStat.objects.create(user=user2, posts=200, karma=5, results=results2)\n        StatDetails.objects.create(base_stats=advstat, comments=250)\n        p1 = Parent1(name1=\"Only Parent1\")\n        p1.save()\n        c1 = Child1(name1=\"Child1 Parent1\", name2=\"Child1 Parent2\", value=1)\n        c1.save()\n        p2 = Parent2(name2=\"Child2 Parent2\")\n        p2.save()\n        c2 = Child2(name1=\"Child2 Parent1\", parent2=p2, value=2)\n        c2.save()\n\n    def test_basic(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userprofile\").get(username=\"test\")\n            self.assertEqual(u.userprofile.state, \"KS\")\n\n    def test_follow_next_level(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userstat__results\").get(username=\"test\")\n            self.assertEqual(u.userstat.posts, 150)\n            self.assertEqual(u.userstat.results.results, 'first results')\n\n    def test_follow_two(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userprofile\", \"userstat\").get(username=\"test\")\n            self.assertEqual(u.userprofile.state, \"KS\")\n            self.assertEqual(u.userstat.posts, 150)\n\n    def test_follow_two_next_level(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userstat__results\", \"userstat__statdetails\").get(username=\"test\")\n            self.assertEqual(u.userstat.results.results, 'first results')\n            self.assertEqual(u.userstat.statdetails.comments, 259)\n\n    def test_forward_and_back(self):\n        with self.assertNumQueries(1):\n            stat = UserStat.objects.select_related(\"user__userprofile\").get(user__username=\"test\")\n            self.assertEqual(stat.user.userprofile.state, 'KS')\n            self.assertEqual(stat.user.userstat.posts, 150)\n\n    def test_back_and_forward(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userstat\").get(username=\"test\")\n            self.assertEqual(u.userstat.user.username, 'test')\n\n    def test_not_followed_by_default(self):\n        with self.assertNumQueries(2):\n            u = User.objects.select_related().get(username=\"test\")\n            self.assertEqual(u.userstat.posts, 150)\n\n    def test_follow_from_child_class(self):\n        with self.assertNumQueries(1):\n            stat = AdvancedUserStat.objects.select_related('user', 'statdetails').get(posts=200)\n            self.assertEqual(stat.statdetails.comments, 250)\n            self.assertEqual(stat.user.username, 'bob')\n\n    def test_follow_inheritance(self):\n        with self.assertNumQueries(1):\n            stat = UserStat.objects.select_related('user', 'advanceduserstat').get(posts=200)\n            self.assertEqual(stat.advanceduserstat.posts, 200)\n            self.assertEqual(stat.user.username, 'bob')\n        with self.assertNumQueries(0):\n            self.assertEqual(stat.advanceduserstat.user.username, 'bob')\n\n    def test_nullable_relation(self):\n        im = Image.objects.create(name=\"imag1\")\n        p1 = Product.objects.create(name=\"Django Plushie\", image=im)\n        p2 = Product.objects.create(name=\"Talking Django Plushie\")\n\n        with self.assertNumQueries(1):\n            result = sorted(Product.objects.select_related(\"image\"), key=lambda x: x.name)\n            self.assertEqual([p.name for p in result], [\"Django Plushie\", \"Talking Django Plushie\"])\n\n            self.assertEqual(p1.image, im)\n            \n            self.assertIsNone(p2.image)\n\n    def test_missing_reverse(self):\n        \"\"\"\n        Ticket #13839: select_related() should NOT cache None\n        for missing objects on a reverse 1-1 relation.\n        \"\"\"\n        with self.assertNumQueries(1):\n            user = User.objects.select_related('userprofile').get(username='bob')\n            with self.assertRaises(UserProfile.DoesNotExist):\n                user.userprofile\n\n    def test_nullable_missing_reverse(self):\n        \"\"\"\n        Ticket #13839: select_related() should NOT cache None\n        for missing objects on a reverse 0-1 relation.\n        \"\"\"\n        Image.objects.create(name=\"imag1\")\n\n        with self.assertNumQueries(1):\n            image = Image.objects.select_related('product').get()\n            with self.assertRaises(Product.DoesNotExist):\n                image.product\n\n    def test_parent_only(self):\n        with self.assertNumQueries(1):\n            p = Parent1.objects.select_related('child1').get(name1=\"Only Parent1\")\n        with self.assertNumQueries(0):\n            with self.assertRaises(Child1.DoesNotExist):\n                p.child1\n\n    def test_multiple_subclass(self):\n        with self.assertNumQueries(1):\n            p = Parent1.objects.select_related('child1').get(name1=\"Child1 Parent1\")\n            self.assertEqual(p.child1.name2, 'Child1 Parent2')\n\n    def test_onetoone_with_subclass(self):\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child2').get(name2=\"Child2 Parent2\")\n            self.assertEqual(p.child2.name1, 'Child2 Parent1')\n\n    def test_onetoone_with_two_subclasses(self):\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child2', \"child2__child3\").get(name2=\"Child2 Parent2\")\n            self.assertEqual(p.child2.name1, 'Child2 Parent1')\n            with self.assertRaises(Child3.DoesNotExist):\n                p.child2.child3\n        p3 = Parent2(name2=\"Child3 Parent2\")\n        p3.save()\n        c2 = Child3(name1=\"Child3 Parent1\", parent2=p3, value=2, value3=3)\n        c2.save()\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child2', \"child2__child3\").get(name2=\"Child3 Parent2\")\n            self.assertEqual(p.child2.name1, 'Child3 Parent1')\n            self.assertEqual(p.child2.child3.value3, 3)\n            self.assertEqual(p.child2.child3.value, p.child2.value)\n            self.assertEqual(p.child2.name1, p.child2.child3.name1)\n\n    def test_multiinheritance_two_subclasses(self):\n        with self.assertNumQueries(1):\n            p = Parent1.objects.select_related('child1', 'child1__child4').get(name1=\"Child1 Parent1\")\n            self.assertEqual(p.child1.name2, 'Child1 Parent2')\n            self.assertEqual(p.child1.name1, p.name1)\n            with self.assertRaises(Child4.DoesNotExist):\n                p.child1.child4\n        Child4(name1='n1', name2='n2', value=1, value4=4).save()\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child1', 'child1__child4').get(name2=\"n2\")\n            self.assertEqual(p.name2, 'n2')\n            self.assertEqual(p.child1.name1, 'n1')\n            self.assertEqual(p.child1.name2, p.name2)\n            self.assertEqual(p.child1.value, 1)\n            self.assertEqual(p.child1.child4.name1, p.child1.name1)\n            self.assertEqual(p.child1.child4.name2, p.child1.name2)\n            self.assertEqual(p.child1.child4.value, p.child1.value)\n            self.assertEqual(p.child1.child4.value4, 4)\n\n    def test_inheritance_deferred(self):\n        c = Child4.objects.create(name1='n1', name2='n2', value=1, value4=4)\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child1').only(\n                'id2', 'child1__value').get(name2=\"n2\")\n            self.assertEqual(p.id2, c.id2)\n            self.assertEqual(p.child1.value, 1)\n        p = Parent2.objects.select_related('child1').only(\n            'id2', 'child1__value').get(name2=\"n2\")\n        with self.assertNumQueries(1):\n            self.assertEqual(p.name2, 'n2')\n        p = Parent2.objects.select_related('child1').only(\n            'id2', 'child1__value').get(name2=\"n2\")\n        with self.assertNumQueries(1):\n            self.assertEqual(p.child1.name2, 'n2')\n\n    def test_inheritance_deferred2(self):\n        c = Child4.objects.create(name1='n1', name2='n2', value=1, value4=4)\n        qs = Parent2.objects.select_related('child1', 'child1__child4').only(\n            'id2', 'child1__value', 'child1__child4__value4')\n        with self.assertNumQueries(1):\n            p = qs.get(name2=\"n2\")\n            self.assertEqual(p.id2, c.id2)\n            self.assertEqual(p.child1.value, 1)\n            self.assertEqual(p.child1.child4.value4, 4)\n            self.assertEqual(p.child1.child4.id2, c.id2)\n        p = qs.get(name2=\"n2\")\n        with self.assertNumQueries(1):\n            self.assertEqual(p.child1.name2, 'n2')\n        p = qs.get(name2=\"n2\")\n        with self.assertNumQueries(0):\n            self.assertEqual(p.child1.name1, 'n1')\n            self.assertEqual(p.child1.child4.name1, 'n1')\n\n    def test_self_relation(self):\n        item1 = LinkedList.objects.create(name='item1')\n        LinkedList.objects.create(name='item2', previous_item=item1)\n        with self.assertNumQueries(1):\n            item1_db = LinkedList.objects.select_related('next_item').get(name='item1')\n            self.assertEqual(item1_db.next_item.name, 'item2')\n\n\nclass ReverseSelectRelatedValidationTests(SimpleTestCase):\n    \"\"\"\n    Rverse related fields should be listed in the validation message when an\n    invalid field is given in select_related().\n    \"\"\"\n    non_relational_error = \"Non-relational field given in select_related: '%s'. Choices are: %s\"\n    invalid_error = \"Invalid field name(s) given in select_related: '%s'. Choices are: %s\"\n\n    def test_reverse_related_validation(self):\n        fields = 'userprofile, userstat'\n\n        with self.assertRaisesMessage(FieldError, self.invalid_error % ('foobar', fields)):\n            list(User.objects.select_related('foobar'))\n\n        with self.assertRaisesMessage(FieldError, self.non_relational_error % ('username', fields)):\n            list(User.objects.select_related('username'))\n\n    def test_reverse_related_validation_with_filtered_relation(self):\n        fields = 'userprofile, userstat, relation'\n        with self.assertRaisesMessage(FieldError, self.invalid_error % ('foobar', fields)):\n            list(User.objects.annotate(relation=FilteredRelation('userprofile')).select_related('foobar'))\n", "comments": "            ticket  13839  select related() not cache none         missing objects reverse 1 1 relation                      self assertnumqueries(1)              user   user objects select related( userprofile ) get(username  bob )             self assertraises(userprofile doesnotexist)                  user userprofile      def test nullable missing reverse(self)                      ticket  13839  select related() not cache none         missing objects reverse 0 1 relation                      image objects create(name  imag1 )          self assertnumqueries(1)              image   image objects select related( product ) get()             self assertraises(product doesnotexist)                  image product      def test parent only(self)          self assertnumqueries(1)              p   parent1 objects select related( child1 ) get(name1  only parent1 )         self assertnumqueries(0)              self assertraises(child1 doesnotexist)                  p child1      def test multiple subclass(self)          self assertnumqueries(1)              p   parent1 objects select related( child1 ) get(name1  child1 parent1 )             self assertequal(p child1 name2   child1 parent2 )      def test onetoone subclass(self)          self assertnumqueries(1)              p   parent2 objects select related( child2 ) get(name2  child2 parent2 )             self assertequal(p child2 name1   child2 parent1 )      def test onetoone two subclasses(self)          self assertnumqueries(1)              p   parent2 objects select related( child2    child2  child3 ) get(name2  child2 parent2 )             self assertequal(p child2 name1   child2 parent1 )             self assertraises(child3 doesnotexist)                  p child2 child3         p3   parent2(name2  child3 parent2 )         p3 save()         c2   child3(name1  child3 parent1   parent2 p3  value 2  value3 3)         c2 save()         self assertnumqueries(1)              p   parent2 objects select related( child2    child2  child3 ) get(name2  child3 parent2 )             self assertequal(p child2 name1   child3 parent1 )             self assertequal(p child2 child3 value3  3)             self assertequal(p child2 child3 value  p child2 value)             self assertequal(p child2 name1  p child2 child3 name1)      def test multiinheritance two subclasses(self)          self assertnumqueries(1)              p   parent1 objects select related( child1    child1  child4 ) get(name1  child1 parent1 )             self assertequal(p child1 name2   child1 parent2 )             self assertequal(p child1 name1  p name1)             self assertraises(child4 doesnotexist)                  p child1 child4         child4(name1  n1   name2  n2   value 1  value4 4) save()         self assertnumqueries(1)              p   parent2 objects select related( child1    child1  child4 ) get(name2  n2 )             self assertequal(p name2   n2 )             self assertequal(p child1 name1   n1 )             self assertequal(p child1 name2  p name2)             self assertequal(p child1 value  1)             self assertequal(p child1 child4 name1  p child1 name1)             self assertequal(p child1 child4 name2  p child1 name2)             self assertequal(p child1 child4 value  p child1 value)             self assertequal(p child1 child4 value4  4)      def test inheritance deferred(self)          c   child4 objects create(name1  n1   name2  n2   value 1  value4 4)         self assertnumqueries(1)              p   parent2 objects select related( child1 ) only(                  id2    child1  value ) get(name2  n2 )             self assertequal(p id2  c id2)             self assertequal(p child1 value  1)         p   parent2 objects select related( child1 ) only(              id2    child1  value ) get(name2  n2 )         self assertnumqueries(1)              self assertequal(p name2   n2 )         p   parent2 objects select related( child1 ) only(              id2    child1  value ) get(name2  n2 )         self assertnumqueries(1)              self assertequal(p child1 name2   n2 )      def test inheritance deferred2(self)          c   child4 objects create(name1  n1   name2  n2   value 1  value4 4)         qs   parent2 objects select related( child1    child1  child4 ) only(              id2    child1  value    child1  child4  value4 )         self assertnumqueries(1)              p   qs get(name2  n2 )             self assertequal(p id2  c id2)             self assertequal(p child1 value  1)             self assertequal(p child1 child4 value4  4)             self assertequal(p child1 child4 id2  c id2)         p   qs get(name2  n2 )         self assertnumqueries(1)              self assertequal(p child1 name2   n2 )         p   qs get(name2  n2 )         self assertnumqueries(0)              self assertequal(p child1 name1   n1 )             self assertequal(p child1 child4 name1   n1 )      def test self relation(self)          item1   linkedlist objects create(name  item1 )         linkedlist objects create(name  item2   previous item item1)         self assertnumqueries(1)              item1 db   linkedlist objects select related( next item ) get(name  item1 )             self assertequal(item1 db next item name   item2 )   class reverseselectrelatedvalidationtests(simpletestcase)              rverse related fields listed validation message     invalid field given select related()             check ticket  13839   13839  select related() not cache none   13839  select related() not cache none ", "content": "from django.core.exceptions import FieldError\nfrom django.db.models import FilteredRelation\nfrom django.test import SimpleTestCase, TestCase\n\nfrom .models import (\n    AdvancedUserStat, Child1, Child2, Child3, Child4, Image, LinkedList,\n    Parent1, Parent2, Product, StatDetails, User, UserProfile, UserStat,\n    UserStatResult,\n)\n\n\nclass ReverseSelectRelatedTestCase(TestCase):\n    def setUp(self):\n        user = User.objects.create(username=\"test\")\n        UserProfile.objects.create(user=user, state=\"KS\", city=\"Lawrence\")\n        results = UserStatResult.objects.create(results='first results')\n        userstat = UserStat.objects.create(user=user, posts=150, results=results)\n        StatDetails.objects.create(base_stats=userstat, comments=259)\n\n        user2 = User.objects.create(username=\"bob\")\n        results2 = UserStatResult.objects.create(results='moar results')\n        advstat = AdvancedUserStat.objects.create(user=user2, posts=200, karma=5, results=results2)\n        StatDetails.objects.create(base_stats=advstat, comments=250)\n        p1 = Parent1(name1=\"Only Parent1\")\n        p1.save()\n        c1 = Child1(name1=\"Child1 Parent1\", name2=\"Child1 Parent2\", value=1)\n        c1.save()\n        p2 = Parent2(name2=\"Child2 Parent2\")\n        p2.save()\n        c2 = Child2(name1=\"Child2 Parent1\", parent2=p2, value=2)\n        c2.save()\n\n    def test_basic(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userprofile\").get(username=\"test\")\n            self.assertEqual(u.userprofile.state, \"KS\")\n\n    def test_follow_next_level(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userstat__results\").get(username=\"test\")\n            self.assertEqual(u.userstat.posts, 150)\n            self.assertEqual(u.userstat.results.results, 'first results')\n\n    def test_follow_two(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userprofile\", \"userstat\").get(username=\"test\")\n            self.assertEqual(u.userprofile.state, \"KS\")\n            self.assertEqual(u.userstat.posts, 150)\n\n    def test_follow_two_next_level(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userstat__results\", \"userstat__statdetails\").get(username=\"test\")\n            self.assertEqual(u.userstat.results.results, 'first results')\n            self.assertEqual(u.userstat.statdetails.comments, 259)\n\n    def test_forward_and_back(self):\n        with self.assertNumQueries(1):\n            stat = UserStat.objects.select_related(\"user__userprofile\").get(user__username=\"test\")\n            self.assertEqual(stat.user.userprofile.state, 'KS')\n            self.assertEqual(stat.user.userstat.posts, 150)\n\n    def test_back_and_forward(self):\n        with self.assertNumQueries(1):\n            u = User.objects.select_related(\"userstat\").get(username=\"test\")\n            self.assertEqual(u.userstat.user.username, 'test')\n\n    def test_not_followed_by_default(self):\n        with self.assertNumQueries(2):\n            u = User.objects.select_related().get(username=\"test\")\n            self.assertEqual(u.userstat.posts, 150)\n\n    def test_follow_from_child_class(self):\n        with self.assertNumQueries(1):\n            stat = AdvancedUserStat.objects.select_related('user', 'statdetails').get(posts=200)\n            self.assertEqual(stat.statdetails.comments, 250)\n            self.assertEqual(stat.user.username, 'bob')\n\n    def test_follow_inheritance(self):\n        with self.assertNumQueries(1):\n            stat = UserStat.objects.select_related('user', 'advanceduserstat').get(posts=200)\n            self.assertEqual(stat.advanceduserstat.posts, 200)\n            self.assertEqual(stat.user.username, 'bob')\n        with self.assertNumQueries(0):\n            self.assertEqual(stat.advanceduserstat.user.username, 'bob')\n\n    def test_nullable_relation(self):\n        im = Image.objects.create(name=\"imag1\")\n        p1 = Product.objects.create(name=\"Django Plushie\", image=im)\n        p2 = Product.objects.create(name=\"Talking Django Plushie\")\n\n        with self.assertNumQueries(1):\n            result = sorted(Product.objects.select_related(\"image\"), key=lambda x: x.name)\n            self.assertEqual([p.name for p in result], [\"Django Plushie\", \"Talking Django Plushie\"])\n\n            self.assertEqual(p1.image, im)\n            # Check for ticket #13839\n            self.assertIsNone(p2.image)\n\n    def test_missing_reverse(self):\n        \"\"\"\n        Ticket #13839: select_related() should NOT cache None\n        for missing objects on a reverse 1-1 relation.\n        \"\"\"\n        with self.assertNumQueries(1):\n            user = User.objects.select_related('userprofile').get(username='bob')\n            with self.assertRaises(UserProfile.DoesNotExist):\n                user.userprofile\n\n    def test_nullable_missing_reverse(self):\n        \"\"\"\n        Ticket #13839: select_related() should NOT cache None\n        for missing objects on a reverse 0-1 relation.\n        \"\"\"\n        Image.objects.create(name=\"imag1\")\n\n        with self.assertNumQueries(1):\n            image = Image.objects.select_related('product').get()\n            with self.assertRaises(Product.DoesNotExist):\n                image.product\n\n    def test_parent_only(self):\n        with self.assertNumQueries(1):\n            p = Parent1.objects.select_related('child1').get(name1=\"Only Parent1\")\n        with self.assertNumQueries(0):\n            with self.assertRaises(Child1.DoesNotExist):\n                p.child1\n\n    def test_multiple_subclass(self):\n        with self.assertNumQueries(1):\n            p = Parent1.objects.select_related('child1').get(name1=\"Child1 Parent1\")\n            self.assertEqual(p.child1.name2, 'Child1 Parent2')\n\n    def test_onetoone_with_subclass(self):\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child2').get(name2=\"Child2 Parent2\")\n            self.assertEqual(p.child2.name1, 'Child2 Parent1')\n\n    def test_onetoone_with_two_subclasses(self):\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child2', \"child2__child3\").get(name2=\"Child2 Parent2\")\n            self.assertEqual(p.child2.name1, 'Child2 Parent1')\n            with self.assertRaises(Child3.DoesNotExist):\n                p.child2.child3\n        p3 = Parent2(name2=\"Child3 Parent2\")\n        p3.save()\n        c2 = Child3(name1=\"Child3 Parent1\", parent2=p3, value=2, value3=3)\n        c2.save()\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child2', \"child2__child3\").get(name2=\"Child3 Parent2\")\n            self.assertEqual(p.child2.name1, 'Child3 Parent1')\n            self.assertEqual(p.child2.child3.value3, 3)\n            self.assertEqual(p.child2.child3.value, p.child2.value)\n            self.assertEqual(p.child2.name1, p.child2.child3.name1)\n\n    def test_multiinheritance_two_subclasses(self):\n        with self.assertNumQueries(1):\n            p = Parent1.objects.select_related('child1', 'child1__child4').get(name1=\"Child1 Parent1\")\n            self.assertEqual(p.child1.name2, 'Child1 Parent2')\n            self.assertEqual(p.child1.name1, p.name1)\n            with self.assertRaises(Child4.DoesNotExist):\n                p.child1.child4\n        Child4(name1='n1', name2='n2', value=1, value4=4).save()\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child1', 'child1__child4').get(name2=\"n2\")\n            self.assertEqual(p.name2, 'n2')\n            self.assertEqual(p.child1.name1, 'n1')\n            self.assertEqual(p.child1.name2, p.name2)\n            self.assertEqual(p.child1.value, 1)\n            self.assertEqual(p.child1.child4.name1, p.child1.name1)\n            self.assertEqual(p.child1.child4.name2, p.child1.name2)\n            self.assertEqual(p.child1.child4.value, p.child1.value)\n            self.assertEqual(p.child1.child4.value4, 4)\n\n    def test_inheritance_deferred(self):\n        c = Child4.objects.create(name1='n1', name2='n2', value=1, value4=4)\n        with self.assertNumQueries(1):\n            p = Parent2.objects.select_related('child1').only(\n                'id2', 'child1__value').get(name2=\"n2\")\n            self.assertEqual(p.id2, c.id2)\n            self.assertEqual(p.child1.value, 1)\n        p = Parent2.objects.select_related('child1').only(\n            'id2', 'child1__value').get(name2=\"n2\")\n        with self.assertNumQueries(1):\n            self.assertEqual(p.name2, 'n2')\n        p = Parent2.objects.select_related('child1').only(\n            'id2', 'child1__value').get(name2=\"n2\")\n        with self.assertNumQueries(1):\n            self.assertEqual(p.child1.name2, 'n2')\n\n    def test_inheritance_deferred2(self):\n        c = Child4.objects.create(name1='n1', name2='n2', value=1, value4=4)\n        qs = Parent2.objects.select_related('child1', 'child1__child4').only(\n            'id2', 'child1__value', 'child1__child4__value4')\n        with self.assertNumQueries(1):\n            p = qs.get(name2=\"n2\")\n            self.assertEqual(p.id2, c.id2)\n            self.assertEqual(p.child1.value, 1)\n            self.assertEqual(p.child1.child4.value4, 4)\n            self.assertEqual(p.child1.child4.id2, c.id2)\n        p = qs.get(name2=\"n2\")\n        with self.assertNumQueries(1):\n            self.assertEqual(p.child1.name2, 'n2')\n        p = qs.get(name2=\"n2\")\n        with self.assertNumQueries(0):\n            self.assertEqual(p.child1.name1, 'n1')\n            self.assertEqual(p.child1.child4.name1, 'n1')\n\n    def test_self_relation(self):\n        item1 = LinkedList.objects.create(name='item1')\n        LinkedList.objects.create(name='item2', previous_item=item1)\n        with self.assertNumQueries(1):\n            item1_db = LinkedList.objects.select_related('next_item').get(name='item1')\n            self.assertEqual(item1_db.next_item.name, 'item2')\n\n\nclass ReverseSelectRelatedValidationTests(SimpleTestCase):\n    \"\"\"\n    Rverse related fields should be listed in the validation message when an\n    invalid field is given in select_related().\n    \"\"\"\n    non_relational_error = \"Non-relational field given in select_related: '%s'. Choices are: %s\"\n    invalid_error = \"Invalid field name(s) given in select_related: '%s'. Choices are: %s\"\n\n    def test_reverse_related_validation(self):\n        fields = 'userprofile, userstat'\n\n        with self.assertRaisesMessage(FieldError, self.invalid_error % ('foobar', fields)):\n            list(User.objects.select_related('foobar'))\n\n        with self.assertRaisesMessage(FieldError, self.non_relational_error % ('username', fields)):\n            list(User.objects.select_related('username'))\n\n    def test_reverse_related_validation_with_filtered_relation(self):\n        fields = 'userprofile, userstat, relation'\n        with self.assertRaisesMessage(FieldError, self.invalid_error % ('foobar', fields)):\n            list(User.objects.annotate(relation=FilteredRelation('userprofile')).select_related('foobar'))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "55d8b0097c5e3d8dfa1f27cf8b6801b4", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/select_related_onetoone/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}