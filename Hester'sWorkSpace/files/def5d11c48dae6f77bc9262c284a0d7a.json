{"author": "binux", "code": "\n# -*- encoding: utf-8 -*-\n\n\n\n\n\nimport click\nimport logging\nfrom pyspider.database.base.projectdb import ProjectDB\nfrom pyspider.database.base.taskdb import TaskDB\nfrom pyspider.database.base.resultdb import ResultDB\nfrom pyspider.database import connect_database\nfrom pyspider.libs.utils import unicode_obj\nfrom multiprocessing.pool import ThreadPool as Pool\n\nlogging.getLogger().setLevel(logging.INFO)\n\n\ndef taskdb_migrating(project, from_connection, to_connection):\n    logging.info(\"taskdb: %s\", project)\n    f = connect_database(from_connection)\n    t = connect_database(to_connection)\n    t.drop(project)\n    for status in range(1, 5):\n        for task in f.load_tasks(status, project=project):\n            t.insert(project, task['taskid'], task)\n\n\ndef resultdb_migrating(project, from_connection, to_connection):\n    logging.info(\"resultdb: %s\", project)\n    f = connect_database(from_connection)\n    t = connect_database(to_connection)\n    t.drop(project)\n    for result in f.select(project):\n        t.save(project, result['taskid'], result['url'], result['result'])\n\n\n@click.command()\n@click.option('--pool', default=10, help='cocurrent worker size.')\n@click.argument('from_connection', required=1)\n@click.argument('to_connection', required=1)\ndef migrate(pool, from_connection, to_connection):\n    \n    f = connect_database(from_connection)\n    t = connect_database(to_connection)\n\n    if isinstance(f, ProjectDB):\n        for each in f.get_all():\n            each = unicode_obj(each)\n            logging.info(\"projectdb: %s\", each['name'])\n            t.drop(each['name'])\n            t.insert(each['name'], each)\n    elif isinstance(f, TaskDB):\n        pool = Pool(pool)\n        pool.map(\n            lambda x, f=from_connection, t=to_connection: taskdb_migrating(x, f, t),\n            f.projects)\n    elif isinstance(f, ResultDB):\n        pool = Pool(pool)\n        pool.map(\n            lambda x, f=from_connection, t=to_connection: resultdb_migrating(x, f, t),\n            f.projects)\n\n\nif __name__ == '__main__':\n    migrate()\n", "comments": "        migrate tool pyspider             usr bin env python        encoding  utf 8        vim  set et sw 4 ts 4 sts 4 ff unix fenc utf8     author  binux roy binux             http   binux    created 2015 09 30 23 22 46 ", "content": "#!/usr/bin/env python\n# -*- encoding: utf-8 -*-\n# vim: set et sw=4 ts=4 sts=4 ff=unix fenc=utf8:\n# Author: Binux<roy@binux.me>\n#         http://binux.me\n# Created on 2015-09-30 23:22:46\n\nimport click\nimport logging\nfrom pyspider.database.base.projectdb import ProjectDB\nfrom pyspider.database.base.taskdb import TaskDB\nfrom pyspider.database.base.resultdb import ResultDB\nfrom pyspider.database import connect_database\nfrom pyspider.libs.utils import unicode_obj\nfrom multiprocessing.pool import ThreadPool as Pool\n\nlogging.getLogger().setLevel(logging.INFO)\n\n\ndef taskdb_migrating(project, from_connection, to_connection):\n    logging.info(\"taskdb: %s\", project)\n    f = connect_database(from_connection)\n    t = connect_database(to_connection)\n    t.drop(project)\n    for status in range(1, 5):\n        for task in f.load_tasks(status, project=project):\n            t.insert(project, task['taskid'], task)\n\n\ndef resultdb_migrating(project, from_connection, to_connection):\n    logging.info(\"resultdb: %s\", project)\n    f = connect_database(from_connection)\n    t = connect_database(to_connection)\n    t.drop(project)\n    for result in f.select(project):\n        t.save(project, result['taskid'], result['url'], result['result'])\n\n\n@click.command()\n@click.option('--pool', default=10, help='cocurrent worker size.')\n@click.argument('from_connection', required=1)\n@click.argument('to_connection', required=1)\ndef migrate(pool, from_connection, to_connection):\n    \"\"\"\n    Migrate tool for pyspider\n    \"\"\"\n    f = connect_database(from_connection)\n    t = connect_database(to_connection)\n\n    if isinstance(f, ProjectDB):\n        for each in f.get_all():\n            each = unicode_obj(each)\n            logging.info(\"projectdb: %s\", each['name'])\n            t.drop(each['name'])\n            t.insert(each['name'], each)\n    elif isinstance(f, TaskDB):\n        pool = Pool(pool)\n        pool.map(\n            lambda x, f=from_connection, t=to_connection: taskdb_migrating(x, f, t),\n            f.projects)\n    elif isinstance(f, ResultDB):\n        pool = Pool(pool)\n        pool.map(\n            lambda x, f=from_connection, t=to_connection: resultdb_migrating(x, f, t),\n            f.projects)\n\n\nif __name__ == '__main__':\n    migrate()\n", "description": "A Powerful Spider(Web Crawler) System in Python.", "file_name": "migrate.py", "id": "def5d11c48dae6f77bc9262c284a0d7a", "language": "Python", "project_name": "pyspider", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/binux-pyspider/binux-pyspider-87337e7/tools/migrate.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:12Z", "url": "https://github.com/binux/pyspider", "wiki": false}