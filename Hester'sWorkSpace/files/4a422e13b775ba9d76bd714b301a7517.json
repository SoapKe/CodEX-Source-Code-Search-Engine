{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .turner import TurnerBaseIE\nfrom ..utils import (\n    int_or_none,\n    strip_or_none,\n)\n\n\nclass AdultSwimIE(TurnerBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?adultswim\\.com/videos/(?P<show_path>[^/?\n\n    _TESTS = [{\n        'url': 'http://adultswim.com/videos/rick-and-morty/pilot',\n        'info_dict': {\n            'id': 'rQxZvXQ4ROaSOqq-or2Mow',\n            'ext': 'mp4',\n            'title': 'Rick and Morty - Pilot',\n            'description': 'Rick moves in with his daughter\\'s family and establishes himself as a bad influence on his grandson, Morty.',\n            'timestamp': 1493267400,\n            'upload_date': '20170427',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://www.adultswim.com/videos/tim-and-eric-awesome-show-great-job/dr-steve-brule-for-your-wine/',\n        'info_dict': {\n            'id': 'sY3cMUR_TbuE4YmdjzbIcQ',\n            'ext': 'mp4',\n            'title': 'Tim and Eric Awesome Show Great Job! - Dr. Steve Brule, For Your Wine',\n            'description': 'Dr. Brule reports live from Wine Country with a special report on wines.  \\nWatch Tim and Eric Awesome Show Great Job! episode \n            'upload_date': '20080124',\n            'timestamp': 1201150800,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.adultswim.com/videos/decker/inside-decker-a-new-hero/',\n        'info_dict': {\n            'id': 'I0LQFQkaSUaFp8PnAWHhoQ',\n            'ext': 'mp4',\n            'title': 'Decker - Inside Decker: A New Hero',\n            'description': 'The guys recap the conclusion of the season. They announce a new hero, take a peek into the Victorville Film Archive and welcome back the talented James Dean.',\n            'timestamp': 1469480460,\n            'upload_date': '20160725',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://www.adultswim.com/videos/attack-on-titan',\n        'info_dict': {\n            'id': 'b7A69dzfRzuaXIECdxW8XQ',\n            'title': 'Attack on Titan',\n            'description': 'md5:6c8e003ea0777b47013e894767f5e114',\n        },\n        'playlist_mincount': 12,\n    }, {\n        'url': 'http://www.adultswim.com/videos/streams/williams-stream',\n        'info_dict': {\n            'id': 'd8DEBj7QRfetLsRgFnGEyg',\n            'ext': 'mp4',\n            'title': r're:^Williams Stream \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$',\n            'description': 'original programming',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        show_path, episode_path = re.match(self._VALID_URL, url).groups()\n        display_id = episode_path or show_path\n        webpage = self._download_webpage(url, display_id)\n        initial_data = self._parse_json(self._search_regex(\n            r'AS_INITIAL_DATA(?:__)?\\s*=\\s*({.+?});',\n            webpage, 'initial data'), display_id)\n\n        is_stream = show_path == 'streams'\n        if is_stream:\n            if not episode_path:\n                episode_path = 'live-stream'\n\n            video_data = next(stream for stream_path, stream in initial_data['streams'].items() if stream_path == episode_path)\n            video_id = video_data.get('stream')\n\n            if not video_id:\n                entries = []\n                for episode in video_data.get('archiveEpisodes', []):\n                    episode_url = episode.get('url')\n                    if not episode_url:\n                        continue\n                    entries.append(self.url_result(\n                        episode_url, 'AdultSwim', episode.get('id')))\n                return self.playlist_result(\n                    entries, video_data.get('id'), video_data.get('title'),\n                    strip_or_none(video_data.get('description')))\n        else:\n            show_data = initial_data['show']\n\n            if not episode_path:\n                entries = []\n                for video in show_data.get('videos', []):\n                    slug = video.get('slug')\n                    if not slug:\n                        continue\n                    entries.append(self.url_result(\n                        'http://adultswim.com/videos/%s/%s' % (show_path, slug),\n                        'AdultSwim', video.get('id')))\n                return self.playlist_result(\n                    entries, show_data.get('id'), show_data.get('title'),\n                    strip_or_none(show_data.get('metadata', {}).get('description')))\n\n            video_data = show_data['sluggedVideo']\n            video_id = video_data['id']\n\n        info = self._extract_cvp_info(\n            'http://www.adultswim.com/videos/api/v0/assets?platform=desktop&id=' + video_id,\n            video_id, {\n                'secure': {\n                    'media_src': 'http://androidhls-secure.cdn.turner.com/adultswim/big',\n                    'tokenizer_src': 'http://www.adultswim.com/astv/mvpd/processors/services/token_ipadAdobe.do',\n                },\n            }, {\n                'url': url,\n                'site_name': 'AdultSwim',\n                'auth_required': video_data.get('auth'),\n            })\n\n        info.update({\n            'id': video_id,\n            'display_id': display_id,\n            'description': info.get('description') or strip_or_none(video_data.get('description')),\n        })\n        if not is_stream:\n            info.update({\n                'duration': info.get('duration') or int_or_none(video_data.get('duration')),\n                'timestamp': info.get('timestamp') or int_or_none(video_data.get('launch_date')),\n                'season_number': info.get('season_number') or int_or_none(video_data.get('season_number')),\n                'episode': info['title'],\n                'episode_number': info.get('episode_number') or int_or_none(video_data.get('episode_number')),\n            })\n\n            info['series'] = video_data.get('collection_title') or info.get('series')\n            if info['series'] and info['series'] != info['title']:\n                info['title'] = '%s - %s' % (info['series'], info['title'])\n\n        return info\n", "comments": "# coding: utf-8\n#]+)(?:/(?P<episode_path>[^/?#]+))?'\n# m3u8 download\n#20, \"Embarrassed\" on Adult Swim.',\n# m3u8 download\n# m3u8 download\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .turner import TurnerBaseIE\nfrom ..utils import (\n    int_or_none,\n    strip_or_none,\n)\n\n\nclass AdultSwimIE(TurnerBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?adultswim\\.com/videos/(?P<show_path>[^/?#]+)(?:/(?P<episode_path>[^/?#]+))?'\n\n    _TESTS = [{\n        'url': 'http://adultswim.com/videos/rick-and-morty/pilot',\n        'info_dict': {\n            'id': 'rQxZvXQ4ROaSOqq-or2Mow',\n            'ext': 'mp4',\n            'title': 'Rick and Morty - Pilot',\n            'description': 'Rick moves in with his daughter\\'s family and establishes himself as a bad influence on his grandson, Morty.',\n            'timestamp': 1493267400,\n            'upload_date': '20170427',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://www.adultswim.com/videos/tim-and-eric-awesome-show-great-job/dr-steve-brule-for-your-wine/',\n        'info_dict': {\n            'id': 'sY3cMUR_TbuE4YmdjzbIcQ',\n            'ext': 'mp4',\n            'title': 'Tim and Eric Awesome Show Great Job! - Dr. Steve Brule, For Your Wine',\n            'description': 'Dr. Brule reports live from Wine Country with a special report on wines.  \\nWatch Tim and Eric Awesome Show Great Job! episode #20, \"Embarrassed\" on Adult Swim.',\n            'upload_date': '20080124',\n            'timestamp': 1201150800,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.adultswim.com/videos/decker/inside-decker-a-new-hero/',\n        'info_dict': {\n            'id': 'I0LQFQkaSUaFp8PnAWHhoQ',\n            'ext': 'mp4',\n            'title': 'Decker - Inside Decker: A New Hero',\n            'description': 'The guys recap the conclusion of the season. They announce a new hero, take a peek into the Victorville Film Archive and welcome back the talented James Dean.',\n            'timestamp': 1469480460,\n            'upload_date': '20160725',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://www.adultswim.com/videos/attack-on-titan',\n        'info_dict': {\n            'id': 'b7A69dzfRzuaXIECdxW8XQ',\n            'title': 'Attack on Titan',\n            'description': 'md5:6c8e003ea0777b47013e894767f5e114',\n        },\n        'playlist_mincount': 12,\n    }, {\n        'url': 'http://www.adultswim.com/videos/streams/williams-stream',\n        'info_dict': {\n            'id': 'd8DEBj7QRfetLsRgFnGEyg',\n            'ext': 'mp4',\n            'title': r're:^Williams Stream \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$',\n            'description': 'original programming',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        show_path, episode_path = re.match(self._VALID_URL, url).groups()\n        display_id = episode_path or show_path\n        webpage = self._download_webpage(url, display_id)\n        initial_data = self._parse_json(self._search_regex(\n            r'AS_INITIAL_DATA(?:__)?\\s*=\\s*({.+?});',\n            webpage, 'initial data'), display_id)\n\n        is_stream = show_path == 'streams'\n        if is_stream:\n            if not episode_path:\n                episode_path = 'live-stream'\n\n            video_data = next(stream for stream_path, stream in initial_data['streams'].items() if stream_path == episode_path)\n            video_id = video_data.get('stream')\n\n            if not video_id:\n                entries = []\n                for episode in video_data.get('archiveEpisodes', []):\n                    episode_url = episode.get('url')\n                    if not episode_url:\n                        continue\n                    entries.append(self.url_result(\n                        episode_url, 'AdultSwim', episode.get('id')))\n                return self.playlist_result(\n                    entries, video_data.get('id'), video_data.get('title'),\n                    strip_or_none(video_data.get('description')))\n        else:\n            show_data = initial_data['show']\n\n            if not episode_path:\n                entries = []\n                for video in show_data.get('videos', []):\n                    slug = video.get('slug')\n                    if not slug:\n                        continue\n                    entries.append(self.url_result(\n                        'http://adultswim.com/videos/%s/%s' % (show_path, slug),\n                        'AdultSwim', video.get('id')))\n                return self.playlist_result(\n                    entries, show_data.get('id'), show_data.get('title'),\n                    strip_or_none(show_data.get('metadata', {}).get('description')))\n\n            video_data = show_data['sluggedVideo']\n            video_id = video_data['id']\n\n        info = self._extract_cvp_info(\n            'http://www.adultswim.com/videos/api/v0/assets?platform=desktop&id=' + video_id,\n            video_id, {\n                'secure': {\n                    'media_src': 'http://androidhls-secure.cdn.turner.com/adultswim/big',\n                    'tokenizer_src': 'http://www.adultswim.com/astv/mvpd/processors/services/token_ipadAdobe.do',\n                },\n            }, {\n                'url': url,\n                'site_name': 'AdultSwim',\n                'auth_required': video_data.get('auth'),\n            })\n\n        info.update({\n            'id': video_id,\n            'display_id': display_id,\n            'description': info.get('description') or strip_or_none(video_data.get('description')),\n        })\n        if not is_stream:\n            info.update({\n                'duration': info.get('duration') or int_or_none(video_data.get('duration')),\n                'timestamp': info.get('timestamp') or int_or_none(video_data.get('launch_date')),\n                'season_number': info.get('season_number') or int_or_none(video_data.get('season_number')),\n                'episode': info['title'],\n                'episode_number': info.get('episode_number') or int_or_none(video_data.get('episode_number')),\n            })\n\n            info['series'] = video_data.get('collection_title') or info.get('series')\n            if info['series'] and info['series'] != info['title']:\n                info['title'] = '%s - %s' % (info['series'], info['title'])\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "adultswim.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/adultswim.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}