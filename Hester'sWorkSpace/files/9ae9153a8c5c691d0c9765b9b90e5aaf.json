{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_b64decode\nfrom ..utils import parse_duration\n\n\nclass ChirbitIE(InfoExtractor):\n    IE_NAME = 'chirbit'\n    _VALID_URL = r'https?://(?:www\\.)?chirb\\.it/(?:(?:wp|pl)/|fb_chirbit_player\\.swf\\?key=)?(?P<id>[\\da-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://chirb.it/be2abG',\n        'info_dict': {\n            'id': 'be2abG',\n            'ext': 'mp3',\n            'title': 'md5:f542ea253f5255240be4da375c6a5d7e',\n            'description': 'md5:f24a4e22a71763e32da5fed59e47c770',\n            'duration': 306,\n            'uploader': 'Gerryaudio',\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'https://chirb.it/fb_chirbit_player.swf?key=PrIPv5',\n        'only_matching': True,\n    }, {\n        'url': 'https://chirb.it/wp/MN58c2',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        audio_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://chirb.it/%s' % audio_id, audio_id)\n\n        data_fd = self._search_regex(\n            r'data-fd=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            webpage, 'data fd', group='url')\n\n        \n        \n        audio_url = compat_b64decode(data_fd[::-1]).decode('utf-8')\n\n        title = self._search_regex(\n            r'class=[\"\\']chirbit-title[\"\\'][^>]*>([^<]+)', webpage, 'title')\n        description = self._search_regex(\n            r'<h3>Description</h3>\\s*<pre[^>]*>([^<]+)</pre>',\n            webpage, 'description', default=None)\n        duration = parse_duration(self._search_regex(\n            r'class=[\"\\']c-length[\"\\'][^>]*>([^<]+)',\n            webpage, 'duration', fatal=False))\n        uploader = self._search_regex(\n            r'id=[\"\\']chirbit-username[\"\\'][^>]*>([^<]+)',\n            webpage, 'uploader', fatal=False)\n\n        return {\n            'id': audio_id,\n            'url': audio_url,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'uploader': uploader,\n        }\n\n\nclass ChirbitProfileIE(InfoExtractor):\n    IE_NAME = 'chirbit:profile'\n    _VALID_URL = r'https?://(?:www\\.)?chirbit\\.com/(?:rss/)?(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://chirbit.com/ScarletBeauty',\n        'info_dict': {\n            'id': 'ScarletBeauty',\n        },\n        'playlist_mincount': 3,\n    }\n\n    def _real_extract(self, url):\n        profile_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, profile_id)\n\n        entries = [\n            self.url_result(self._proto_relative_url('//chirb.it/' + video_id))\n            for _, video_id in re.findall(r'<input[^>]+id=([\\'\"])copy-btn-(?P<id>[0-9a-zA-Z]+)\\1', webpage)]\n\n        return self.playlist_result(entries, profile_id)\n", "comments": "# coding: utf-8\n# Reverse engineered from https://chirb.it/js/chirbit.player.js (look\n# for soundURL)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_b64decode\nfrom ..utils import parse_duration\n\n\nclass ChirbitIE(InfoExtractor):\n    IE_NAME = 'chirbit'\n    _VALID_URL = r'https?://(?:www\\.)?chirb\\.it/(?:(?:wp|pl)/|fb_chirbit_player\\.swf\\?key=)?(?P<id>[\\da-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://chirb.it/be2abG',\n        'info_dict': {\n            'id': 'be2abG',\n            'ext': 'mp3',\n            'title': 'md5:f542ea253f5255240be4da375c6a5d7e',\n            'description': 'md5:f24a4e22a71763e32da5fed59e47c770',\n            'duration': 306,\n            'uploader': 'Gerryaudio',\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'https://chirb.it/fb_chirbit_player.swf?key=PrIPv5',\n        'only_matching': True,\n    }, {\n        'url': 'https://chirb.it/wp/MN58c2',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        audio_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'http://chirb.it/%s' % audio_id, audio_id)\n\n        data_fd = self._search_regex(\n            r'data-fd=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            webpage, 'data fd', group='url')\n\n        # Reverse engineered from https://chirb.it/js/chirbit.player.js (look\n        # for soundURL)\n        audio_url = compat_b64decode(data_fd[::-1]).decode('utf-8')\n\n        title = self._search_regex(\n            r'class=[\"\\']chirbit-title[\"\\'][^>]*>([^<]+)', webpage, 'title')\n        description = self._search_regex(\n            r'<h3>Description</h3>\\s*<pre[^>]*>([^<]+)</pre>',\n            webpage, 'description', default=None)\n        duration = parse_duration(self._search_regex(\n            r'class=[\"\\']c-length[\"\\'][^>]*>([^<]+)',\n            webpage, 'duration', fatal=False))\n        uploader = self._search_regex(\n            r'id=[\"\\']chirbit-username[\"\\'][^>]*>([^<]+)',\n            webpage, 'uploader', fatal=False)\n\n        return {\n            'id': audio_id,\n            'url': audio_url,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'uploader': uploader,\n        }\n\n\nclass ChirbitProfileIE(InfoExtractor):\n    IE_NAME = 'chirbit:profile'\n    _VALID_URL = r'https?://(?:www\\.)?chirbit\\.com/(?:rss/)?(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://chirbit.com/ScarletBeauty',\n        'info_dict': {\n            'id': 'ScarletBeauty',\n        },\n        'playlist_mincount': 3,\n    }\n\n    def _real_extract(self, url):\n        profile_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, profile_id)\n\n        entries = [\n            self.url_result(self._proto_relative_url('//chirb.it/' + video_id))\n            for _, video_id in re.findall(r'<input[^>]+id=([\\'\"])copy-btn-(?P<id>[0-9a-zA-Z]+)\\1', webpage)]\n\n        return self.playlist_result(entries, profile_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "chirbit.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/chirbit.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}