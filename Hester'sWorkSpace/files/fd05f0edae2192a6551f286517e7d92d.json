{"author": "aws", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nimport os\nimport tempfile\nimport random\n\nimport mock\n\nfrom awscli.testutils import unittest, aws\nfrom awscli.customizations.configure.configure import ConfigureCommand\n\n\nclass TestConfigureCommand(unittest.TestCase):\n\n    def setUp(self):\n        self.tempdir = tempfile.mkdtemp()\n        self.config_filename = os.path.join(\n            self.tempdir, 'config-%s' % random.randint(1, 100000))\n        self.env_vars = os.environ.copy()\n        self.env_vars['AWS_CONFIG_FILE'] = self.config_filename\n        self.env_vars['AWS_SHARED_CREDENTIALS_FILE'] = 'asdf-does-not-exist'\n\n    def tearDown(self):\n        if os.path.isfile(self.config_filename):\n            os.remove(self.config_filename)\n        os.rmdir(self.tempdir)\n\n    def assert_no_errors(self, p):\n        self.assertEqual(\n            p.rc, 0,\n            \"Non zero rc (%s) received: %s\" % (p.rc, p.stdout + p.stderr))\n        self.assertEqual(p.stderr, '')\n\n    def set_config_file_contents(self, contents):\n        with open(self.config_filename, 'w') as f:\n            f.write(contents)\n\n    def get_config_file_contents(self):\n        with open(self.config_filename, 'r') as f:\n            return f.read()\n\n    def test_list_command(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=12345\\n'\n            'aws_secret_access_key=12345\\n'\n            'region=us-west-2\\n'\n        )\n        self.env_vars.pop('AWS_DEFAULT_REGION', None)\n        self.env_vars.pop('AWS_ACCESS_KEY_ID', None)\n        self.env_vars.pop('AWS_SECRET_ACCESS_KEY', None)\n        p = aws('configure list', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertRegexpMatches(p.stdout, r'access_key.+config-file')\n        self.assertRegexpMatches(p.stdout, r'secret_key.+config-file')\n        self.assertRegexpMatches(p.stdout, r'region\\s+us-west-2\\s+config-file')\n\n    def test_get_command(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=access_key\\n'\n            'aws_secret_access_key=secret_key\\n'\n            'region=us-west-2\\n'\n        )\n        p = aws('configure get aws_access_key_id', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'access_key')\n\n    def test_get_command_with_profile_set(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile testing]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n        )\n        p = aws('configure get aws_access_key_id --profile testing',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'testing_access_key')\n\n    def test_get_with_fq_name(self):\n         test get configs with fully qualified name.\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile testing]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n        )\n        p = aws('configure get default.aws_access_key_id --profile testing',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'default_access_key')\n\n    def test_get_with_fq_profile_name(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile testing]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n        )\n        p = aws('configure get profile.testing.aws_access_key_id --profile default',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'testing_access_key')\n\n    def test_get_fq_with_quoted_profile_name(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile \"testing\"]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n        )\n        p = aws('configure get profile.testing.aws_access_key_id --profile default',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'testing_access_key')\n\n    def test_get_fq_for_non_profile_configs(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile testing]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n            '[preview]\\n'\n            'emr=true'\n        )\n        p = aws('configure get preview.emr --profile default',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'true')\n\n    def test_set_with_config_file_no_exist(self):\n        p = aws('configure set region us-west-1', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_a_url(self):\n        p = aws('configure set endpoint http://www.example.com',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'endpoint = http://www.example.com\\n',\n            self.get_config_file_contents())\n\n    def test_set_with_empty_config_file(self):\n        with open(self.config_filename, 'w'):\n            pass\n\n        p = aws('configure set region us-west-1', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_updating_value(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            'region = us-west-2\\n')\n\n        p = aws('configure set region us-west-1', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_profile_spaces(self):\n        p = aws(\"configure set region us-west-1 --profile 'test with spaces'\",\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile \\'test with spaces\\']\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_profile_unknown_nested_key(self):\n        p = aws(\"configure set un.known us-west-1 --profile 'space test'\",\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile \\'space test\\']\\n'\n            'un =\\n    known = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_profile_spaces_scoped(self):\n        p = aws(\"configure set profile.'test with spaces'.region us-west-1\",\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile \\'test with spaces\\']\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_profile(self):\n        p = aws('configure set region us-west-1 --profile testing',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile testing]\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_fq_single_dot(self):\n        p = aws('configure set preview.cloudsearch true', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[preview]\\n'\n            'cloudsearch = true\\n', self.get_config_file_contents())\n\n    def test_set_with_fq_double_dot(self):\n        p = aws('configure set profile.testing.region us-west-2',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile testing]\\n'\n            'region = us-west-2\\n', self.get_config_file_contents())\n\n    def test_set_with_commented_out_field(self):\n        self.set_config_file_contents(\n            '[preview]\\n'\n            ';cloudsearch = true\\n')\n        p = aws('configure set preview.cloudsearch true', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[preview]\\n'\n            ';cloudsearch = true\\n'\n            '[preview]\\n'\n            'cloudsearch = true\\n', self.get_config_file_contents())\n\n    def test_set_with_triple_nesting(self):\n        p = aws('configure set default.s3.signature_version s3v4',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n', self.get_config_file_contents())\n\n    def test_set_with_existing_config(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            'region = us-west-2\\n'\n            'ec2 =\\n'\n            '    signature_version = v4\\n'\n        )\n        p = aws('configure set default.s3.signature_version s3v4',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-2\\n'\n            'ec2 =\\n'\n            '    signature_version = v4\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n', self.get_config_file_contents())\n\n    def test_set_with_new_profile(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n'\n        )\n        p = aws('configure set profile.dev.s3.signature_version s3v4',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n'\n            '[profile dev]\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n',\n            self.get_config_file_contents()\n        )\n\n    def test_override_existing_value(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = v4\\n'\n        )\n        p = aws('configure set default.s3.signature_version NEWVALUE',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = NEWVALUE\\n',\n            self.get_config_file_contents())\n\n    def test_get_nested_attribute(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = v4\\n'\n        )\n        p = aws('configure get default.s3.signature_version',\n                 env_vars=self.env_vars)\n        self.assertEqual(p.stdout.strip(), 'v4')\n        p = aws('configure get default.bad.doesnotexist',\n                env_vars=self.env_vars)\n        self.assertEqual(p.rc, 1)\n        self.assertEqual(p.stdout, '')\n\n    def test_can_handle_empty_section(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n        )\n        p = aws('configure set preview.cloudfront true',\n                env_vars=self.env_vars)\n        p = aws('configure set region us-west-2',\n                env_vars=self.env_vars)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-2\\n'\n            '[preview]\\n'\n            'cloudfront = true\\n',\n            self.get_config_file_contents(),\n        )\n\n\nclass TestConfigureHasArgTable(unittest.TestCase):\n    def test_configure_command_has_arg_table(self):\n        m = mock.Mock()\n        command = ConfigureCommand(m)\n        self.assertEqual(command.arg_table, {})\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "  copyright 2014 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     test get configs fully qualified name  ", "content": "# Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nimport os\nimport tempfile\nimport random\n\nimport mock\n\nfrom awscli.testutils import unittest, aws\nfrom awscli.customizations.configure.configure import ConfigureCommand\n\n\nclass TestConfigureCommand(unittest.TestCase):\n\n    def setUp(self):\n        self.tempdir = tempfile.mkdtemp()\n        self.config_filename = os.path.join(\n            self.tempdir, 'config-%s' % random.randint(1, 100000))\n        self.env_vars = os.environ.copy()\n        self.env_vars['AWS_CONFIG_FILE'] = self.config_filename\n        self.env_vars['AWS_SHARED_CREDENTIALS_FILE'] = 'asdf-does-not-exist'\n\n    def tearDown(self):\n        if os.path.isfile(self.config_filename):\n            os.remove(self.config_filename)\n        os.rmdir(self.tempdir)\n\n    def assert_no_errors(self, p):\n        self.assertEqual(\n            p.rc, 0,\n            \"Non zero rc (%s) received: %s\" % (p.rc, p.stdout + p.stderr))\n        self.assertEqual(p.stderr, '')\n\n    def set_config_file_contents(self, contents):\n        with open(self.config_filename, 'w') as f:\n            f.write(contents)\n\n    def get_config_file_contents(self):\n        with open(self.config_filename, 'r') as f:\n            return f.read()\n\n    def test_list_command(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=12345\\n'\n            'aws_secret_access_key=12345\\n'\n            'region=us-west-2\\n'\n        )\n        self.env_vars.pop('AWS_DEFAULT_REGION', None)\n        self.env_vars.pop('AWS_ACCESS_KEY_ID', None)\n        self.env_vars.pop('AWS_SECRET_ACCESS_KEY', None)\n        p = aws('configure list', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertRegexpMatches(p.stdout, r'access_key.+config-file')\n        self.assertRegexpMatches(p.stdout, r'secret_key.+config-file')\n        self.assertRegexpMatches(p.stdout, r'region\\s+us-west-2\\s+config-file')\n\n    def test_get_command(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=access_key\\n'\n            'aws_secret_access_key=secret_key\\n'\n            'region=us-west-2\\n'\n        )\n        p = aws('configure get aws_access_key_id', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'access_key')\n\n    def test_get_command_with_profile_set(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile testing]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n        )\n        p = aws('configure get aws_access_key_id --profile testing',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'testing_access_key')\n\n    def test_get_with_fq_name(self):\n        # test get configs with fully qualified name.\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile testing]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n        )\n        p = aws('configure get default.aws_access_key_id --profile testing',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'default_access_key')\n\n    def test_get_with_fq_profile_name(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile testing]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n        )\n        p = aws('configure get profile.testing.aws_access_key_id --profile default',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'testing_access_key')\n\n    def test_get_fq_with_quoted_profile_name(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile \"testing\"]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n        )\n        p = aws('configure get profile.testing.aws_access_key_id --profile default',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'testing_access_key')\n\n    def test_get_fq_for_non_profile_configs(self):\n        self.set_config_file_contents(\n            '\\n'\n            '[default]\\n'\n            'aws_access_key_id=default_access_key\\n'\n            '\\n'\n            '[profile testing]\\n'\n            'aws_access_key_id=testing_access_key\\n'\n            '[preview]\\n'\n            'emr=true'\n        )\n        p = aws('configure get preview.emr --profile default',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(p.stdout.strip(), 'true')\n\n    def test_set_with_config_file_no_exist(self):\n        p = aws('configure set region us-west-1', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_a_url(self):\n        p = aws('configure set endpoint http://www.example.com',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'endpoint = http://www.example.com\\n',\n            self.get_config_file_contents())\n\n    def test_set_with_empty_config_file(self):\n        with open(self.config_filename, 'w'):\n            pass\n\n        p = aws('configure set region us-west-1', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_updating_value(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            'region = us-west-2\\n')\n\n        p = aws('configure set region us-west-1', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_profile_spaces(self):\n        p = aws(\"configure set region us-west-1 --profile 'test with spaces'\",\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile \\'test with spaces\\']\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_profile_unknown_nested_key(self):\n        p = aws(\"configure set un.known us-west-1 --profile 'space test'\",\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile \\'space test\\']\\n'\n            'un =\\n    known = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_profile_spaces_scoped(self):\n        p = aws(\"configure set profile.'test with spaces'.region us-west-1\",\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile \\'test with spaces\\']\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_profile(self):\n        p = aws('configure set region us-west-1 --profile testing',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile testing]\\n'\n            'region = us-west-1\\n', self.get_config_file_contents())\n\n    def test_set_with_fq_single_dot(self):\n        p = aws('configure set preview.cloudsearch true', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[preview]\\n'\n            'cloudsearch = true\\n', self.get_config_file_contents())\n\n    def test_set_with_fq_double_dot(self):\n        p = aws('configure set profile.testing.region us-west-2',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[profile testing]\\n'\n            'region = us-west-2\\n', self.get_config_file_contents())\n\n    def test_set_with_commented_out_field(self):\n        self.set_config_file_contents(\n            '#[preview]\\n'\n            ';cloudsearch = true\\n')\n        p = aws('configure set preview.cloudsearch true', env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '#[preview]\\n'\n            ';cloudsearch = true\\n'\n            '[preview]\\n'\n            'cloudsearch = true\\n', self.get_config_file_contents())\n\n    def test_set_with_triple_nesting(self):\n        p = aws('configure set default.s3.signature_version s3v4',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n', self.get_config_file_contents())\n\n    def test_set_with_existing_config(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            'region = us-west-2\\n'\n            'ec2 =\\n'\n            '    signature_version = v4\\n'\n        )\n        p = aws('configure set default.s3.signature_version s3v4',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-2\\n'\n            'ec2 =\\n'\n            '    signature_version = v4\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n', self.get_config_file_contents())\n\n    def test_set_with_new_profile(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n'\n        )\n        p = aws('configure set profile.dev.s3.signature_version s3v4',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n'\n            '[profile dev]\\n'\n            's3 =\\n'\n            '    signature_version = s3v4\\n',\n            self.get_config_file_contents()\n        )\n\n    def test_override_existing_value(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = v4\\n'\n        )\n        p = aws('configure set default.s3.signature_version NEWVALUE',\n                env_vars=self.env_vars)\n        self.assert_no_errors(p)\n        self.assertEqual(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = NEWVALUE\\n',\n            self.get_config_file_contents())\n\n    def test_get_nested_attribute(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n            's3 =\\n'\n            '    signature_version = v4\\n'\n        )\n        p = aws('configure get default.s3.signature_version',\n                 env_vars=self.env_vars)\n        self.assertEqual(p.stdout.strip(), 'v4')\n        p = aws('configure get default.bad.doesnotexist',\n                env_vars=self.env_vars)\n        self.assertEqual(p.rc, 1)\n        self.assertEqual(p.stdout, '')\n\n    def test_can_handle_empty_section(self):\n        self.set_config_file_contents(\n            '[default]\\n'\n        )\n        p = aws('configure set preview.cloudfront true',\n                env_vars=self.env_vars)\n        p = aws('configure set region us-west-2',\n                env_vars=self.env_vars)\n        self.assertEqual(\n            '[default]\\n'\n            'region = us-west-2\\n'\n            '[preview]\\n'\n            'cloudfront = true\\n',\n            self.get_config_file_contents(),\n        )\n\n\nclass TestConfigureHasArgTable(unittest.TestCase):\n    def test_configure_command_has_arg_table(self):\n        m = mock.Mock()\n        command = ConfigureCommand(m)\n        self.assertEqual(command.arg_table, {})\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_configure.py", "id": "fd05f0edae2192a6551f286517e7d92d", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/integration/customizations/test_configure.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}