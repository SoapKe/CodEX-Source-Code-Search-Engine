{"author": "django", "code": "from django.conf import settings\nfrom django.contrib.sites.managers import CurrentSiteManager\nfrom django.contrib.sites.models import Site\nfrom django.core import checks\nfrom django.db import models\nfrom django.test import SimpleTestCase, TestCase\nfrom django.test.utils import isolate_apps\n\nfrom .models import CustomArticle, ExclusiveArticle, SyndicatedArticle\n\n\nclass SitesFrameworkTestCase(TestCase):\n    def setUp(self):\n        Site.objects.get_or_create(id=settings.SITE_ID, domain=\"example.com\", name=\"example.com\")\n        Site.objects.create(id=settings.SITE_ID + 1, domain=\"example2.com\", name=\"example2.com\")\n\n    def test_site_fk(self):\n        article = ExclusiveArticle.objects.create(title=\"Breaking News!\", site_id=settings.SITE_ID)\n        self.assertEqual(ExclusiveArticle.on_site.all().get(), article)\n\n    def test_sites_m2m(self):\n        article = SyndicatedArticle.objects.create(title=\"Fresh News!\")\n        article.sites.add(Site.objects.get(id=settings.SITE_ID))\n        article.sites.add(Site.objects.get(id=settings.SITE_ID + 1))\n        article2 = SyndicatedArticle.objects.create(title=\"More News!\")\n        article2.sites.add(Site.objects.get(id=settings.SITE_ID + 1))\n        self.assertEqual(SyndicatedArticle.on_site.all().get(), article)\n\n    def test_custom_named_field(self):\n        article = CustomArticle.objects.create(\n            title=\"Tantalizing News!\",\n            places_this_article_should_appear_id=settings.SITE_ID,\n        )\n        self.assertEqual(CustomArticle.on_site.all().get(), article)\n\n\n@isolate_apps('sites_framework')\nclass CurrentSiteManagerChecksTests(SimpleTestCase):\n\n    def test_invalid_name(self):\n        class InvalidArticle(models.Model):\n            on_site = CurrentSiteManager(\"places_this_article_should_appear\")\n\n        errors = InvalidArticle.check()\n        expected = [\n            checks.Error(\n                \"CurrentSiteManager could not find a field named \"\n                \"'places_this_article_should_appear'.\",\n                obj=InvalidArticle.on_site,\n                id='sites.E001',\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_invalid_field_type(self):\n\n        class ConfusedArticle(models.Model):\n            site = models.IntegerField()\n            on_site = CurrentSiteManager()\n\n        errors = ConfusedArticle.check()\n        expected = [\n            checks.Error(\n                \"CurrentSiteManager cannot use 'ConfusedArticle.site' as it is \"\n                \"not a foreign key or a many-to-many field.\",\n                obj=ConfusedArticle.on_site,\n                id='sites.E002',\n            )\n        ]\n        self.assertEqual(errors, expected)\n", "comments": "", "content": "from django.conf import settings\nfrom django.contrib.sites.managers import CurrentSiteManager\nfrom django.contrib.sites.models import Site\nfrom django.core import checks\nfrom django.db import models\nfrom django.test import SimpleTestCase, TestCase\nfrom django.test.utils import isolate_apps\n\nfrom .models import CustomArticle, ExclusiveArticle, SyndicatedArticle\n\n\nclass SitesFrameworkTestCase(TestCase):\n    def setUp(self):\n        Site.objects.get_or_create(id=settings.SITE_ID, domain=\"example.com\", name=\"example.com\")\n        Site.objects.create(id=settings.SITE_ID + 1, domain=\"example2.com\", name=\"example2.com\")\n\n    def test_site_fk(self):\n        article = ExclusiveArticle.objects.create(title=\"Breaking News!\", site_id=settings.SITE_ID)\n        self.assertEqual(ExclusiveArticle.on_site.all().get(), article)\n\n    def test_sites_m2m(self):\n        article = SyndicatedArticle.objects.create(title=\"Fresh News!\")\n        article.sites.add(Site.objects.get(id=settings.SITE_ID))\n        article.sites.add(Site.objects.get(id=settings.SITE_ID + 1))\n        article2 = SyndicatedArticle.objects.create(title=\"More News!\")\n        article2.sites.add(Site.objects.get(id=settings.SITE_ID + 1))\n        self.assertEqual(SyndicatedArticle.on_site.all().get(), article)\n\n    def test_custom_named_field(self):\n        article = CustomArticle.objects.create(\n            title=\"Tantalizing News!\",\n            places_this_article_should_appear_id=settings.SITE_ID,\n        )\n        self.assertEqual(CustomArticle.on_site.all().get(), article)\n\n\n@isolate_apps('sites_framework')\nclass CurrentSiteManagerChecksTests(SimpleTestCase):\n\n    def test_invalid_name(self):\n        class InvalidArticle(models.Model):\n            on_site = CurrentSiteManager(\"places_this_article_should_appear\")\n\n        errors = InvalidArticle.check()\n        expected = [\n            checks.Error(\n                \"CurrentSiteManager could not find a field named \"\n                \"'places_this_article_should_appear'.\",\n                obj=InvalidArticle.on_site,\n                id='sites.E001',\n            )\n        ]\n        self.assertEqual(errors, expected)\n\n    def test_invalid_field_type(self):\n\n        class ConfusedArticle(models.Model):\n            site = models.IntegerField()\n            on_site = CurrentSiteManager()\n\n        errors = ConfusedArticle.check()\n        expected = [\n            checks.Error(\n                \"CurrentSiteManager cannot use 'ConfusedArticle.site' as it is \"\n                \"not a foreign key or a many-to-many field.\",\n                obj=ConfusedArticle.on_site,\n                id='sites.E002',\n            )\n        ]\n        self.assertEqual(errors, expected)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "3eb864b9c9636bcde4173acb4e8fd656", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/sites_framework/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}