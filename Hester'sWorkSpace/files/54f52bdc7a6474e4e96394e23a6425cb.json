{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.interfaces.base import InterfaceValidationError\nfrom sentry.interfaces.http import Http\nfrom sentry.testutils import TestCase\n\n\nclass HttpTest(TestCase):\n    @fixture\n    def interface(self):\n        return Http.to_python(dict(\n            url='http://example.com',\n        ))\n\n    def test_path(self):\n        assert self.interface.get_path() == 'sentry.interfaces.Http'\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_basic(self):\n        result = self.interface\n        assert result.url == 'http://example.com'\n        assert result.method is None\n        assert result.fragment == ''\n        assert result.query_string == ''\n        assert result.data is None\n        assert result.cookies == []\n        assert result.headers == []\n        assert result.env == {}\n        assert result.full_url == result.url\n\n    def test_full(self):\n        result = Http.to_python(\n            dict(\n                method='GET',\n                url='http://example.com',\n                query_string='foo=bar',\n                fragment='foobar',\n                headers={'x-foo-bar': 'baz'},\n                cookies={'foo': 'bar'},\n                env={'bing': 'bong'},\n                data='hello world',\n            )\n        )\n        assert result.method == 'GET'\n        assert result.query_string == 'foo=bar'\n        assert result.fragment == 'foobar'\n        assert result.cookies == [('foo', 'bar')]\n        assert result.headers == [('X-Foo-Bar', 'baz')]\n        assert result.env == {'bing': 'bong'}\n        assert result.data == 'hello world'\n\n    def test_query_string_as_dict(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            query_string={'foo': 'bar'},\n        ))\n        assert result.query_string == 'foo=bar'\n\n    def test_query_string_as_dict_unicode(self):\n        result = Http.to_python(\n            dict(\n                url='http://example.com',\n                query_string={'foo': u'\\N{SNOWMAN}'},\n            )\n        )\n        assert result.query_string == 'foo=%E2%98%83'\n\n    def test_data_as_dict(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            data={'foo': 'bar'},\n        ))\n        assert result.data == {'foo': 'bar'}\n\n    def test_form_encoded_data(self):\n        result = Http.to_python(\n            dict(\n                url='http://example.com',\n                headers={'Content-Type': 'application/x-www-form-urlencoded'},\n                data='foo=bar',\n            )\n        )\n        assert result.data == {'foo': ['bar']}\n\n    def test_cookies_as_string(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            cookies='a=b;c=d',\n        ))\n        assert result.cookies == [('a', 'b'), ('c', 'd')]\n        result = Http.to_python(dict(\n            url='http://example.com',\n            cookies='a=b&c=d',\n        ))\n        assert result.cookies == [('a', 'b'), ('c', 'd')]\n\n    def test_cookies_in_header(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            headers={'Cookie': 'a=b;c=d'},\n        ))\n        assert result.cookies == [('a', 'b'), ('c', 'd')]\n        result = Http.to_python(\n            dict(\n                url='http://example.com',\n                headers={'Cookie': 'a=b;c=d'},\n                cookies={'foo': 'bar'},\n            )\n        )\n        assert result.cookies == [('foo', 'bar')]\n\n    def test_query_string_and_fragment_as_params(self):\n        result = Http.to_python(\n            dict(\n                url='http://example.com',\n                query_string='foo=bar',\n                fragment='fragment',\n            )\n        )\n        assert result.url == 'http://example.com'\n        assert result.full_url == 'http://example.com?foo=bar\n\n    def test_query_string_and_fragment_in_url(self):\n        result = Http.to_python(dict(\n            url='http://example.com?foo=bar,\n        ))\n        assert result.url == 'http://example.com'\n        assert result.full_url == 'http://example.com?foo=bar\n\n    def test_header_value_list(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            headers={'Foo': ['1', '2']},\n        ))\n        assert result.headers == [('Foo', '1, 2')]\n\n    def test_header_value_str(self):\n        result = Http.to_python(dict(url='http://example.com', headers={'Foo': 1}))\n        assert result.headers == [('Foo', '1')]\n\n    def test_method(self):\n        with self.assertRaises(InterfaceValidationError):\n            Http.to_python(dict(\n                url='http://example.com',\n                method='1234',\n            ))\n\n        with self.assertRaises(InterfaceValidationError):\n            Http.to_python(dict(\n                url='http://example.com',\n                method='A' * 33,\n            ))\n\n        with self.assertRaises(InterfaceValidationError):\n            Http.to_python(dict(\n                url='http://example.com',\n                method='A',\n            ))\n\n        result = Http.to_python(dict(\n            url='http://example.com',\n            method='TEST',\n        ))\n        assert result.method == 'TEST'\n\n        result = Http.to_python(dict(\n            url='http://example.com',\n            method='FOO-BAR',\n        ))\n        assert result.method == 'FOO-BAR'\n\n        result = Http.to_python(dict(\n            url='http://example.com',\n            method='FOO_BAR',\n        ))\n        assert result.method == 'FOO_BAR'\n", "comments": "      coding  utf 8       fragment    fragment     fragment  ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.interfaces.base import InterfaceValidationError\nfrom sentry.interfaces.http import Http\nfrom sentry.testutils import TestCase\n\n\nclass HttpTest(TestCase):\n    @fixture\n    def interface(self):\n        return Http.to_python(dict(\n            url='http://example.com',\n        ))\n\n    def test_path(self):\n        assert self.interface.get_path() == 'sentry.interfaces.Http'\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_basic(self):\n        result = self.interface\n        assert result.url == 'http://example.com'\n        assert result.method is None\n        assert result.fragment == ''\n        assert result.query_string == ''\n        assert result.data is None\n        assert result.cookies == []\n        assert result.headers == []\n        assert result.env == {}\n        assert result.full_url == result.url\n\n    def test_full(self):\n        result = Http.to_python(\n            dict(\n                method='GET',\n                url='http://example.com',\n                query_string='foo=bar',\n                fragment='foobar',\n                headers={'x-foo-bar': 'baz'},\n                cookies={'foo': 'bar'},\n                env={'bing': 'bong'},\n                data='hello world',\n            )\n        )\n        assert result.method == 'GET'\n        assert result.query_string == 'foo=bar'\n        assert result.fragment == 'foobar'\n        assert result.cookies == [('foo', 'bar')]\n        assert result.headers == [('X-Foo-Bar', 'baz')]\n        assert result.env == {'bing': 'bong'}\n        assert result.data == 'hello world'\n\n    def test_query_string_as_dict(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            query_string={'foo': 'bar'},\n        ))\n        assert result.query_string == 'foo=bar'\n\n    def test_query_string_as_dict_unicode(self):\n        result = Http.to_python(\n            dict(\n                url='http://example.com',\n                query_string={'foo': u'\\N{SNOWMAN}'},\n            )\n        )\n        assert result.query_string == 'foo=%E2%98%83'\n\n    def test_data_as_dict(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            data={'foo': 'bar'},\n        ))\n        assert result.data == {'foo': 'bar'}\n\n    def test_form_encoded_data(self):\n        result = Http.to_python(\n            dict(\n                url='http://example.com',\n                headers={'Content-Type': 'application/x-www-form-urlencoded'},\n                data='foo=bar',\n            )\n        )\n        assert result.data == {'foo': ['bar']}\n\n    def test_cookies_as_string(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            cookies='a=b;c=d',\n        ))\n        assert result.cookies == [('a', 'b'), ('c', 'd')]\n        result = Http.to_python(dict(\n            url='http://example.com',\n            cookies='a=b&c=d',\n        ))\n        assert result.cookies == [('a', 'b'), ('c', 'd')]\n\n    def test_cookies_in_header(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            headers={'Cookie': 'a=b;c=d'},\n        ))\n        assert result.cookies == [('a', 'b'), ('c', 'd')]\n        result = Http.to_python(\n            dict(\n                url='http://example.com',\n                headers={'Cookie': 'a=b;c=d'},\n                cookies={'foo': 'bar'},\n            )\n        )\n        assert result.cookies == [('foo', 'bar')]\n\n    def test_query_string_and_fragment_as_params(self):\n        result = Http.to_python(\n            dict(\n                url='http://example.com',\n                query_string='foo=bar',\n                fragment='fragment',\n            )\n        )\n        assert result.url == 'http://example.com'\n        assert result.full_url == 'http://example.com?foo=bar#fragment'\n\n    def test_query_string_and_fragment_in_url(self):\n        result = Http.to_python(dict(\n            url='http://example.com?foo=bar#fragment',\n        ))\n        assert result.url == 'http://example.com'\n        assert result.full_url == 'http://example.com?foo=bar#fragment'\n\n    def test_header_value_list(self):\n        result = Http.to_python(dict(\n            url='http://example.com',\n            headers={'Foo': ['1', '2']},\n        ))\n        assert result.headers == [('Foo', '1, 2')]\n\n    def test_header_value_str(self):\n        result = Http.to_python(dict(url='http://example.com', headers={'Foo': 1}))\n        assert result.headers == [('Foo', '1')]\n\n    def test_method(self):\n        with self.assertRaises(InterfaceValidationError):\n            Http.to_python(dict(\n                url='http://example.com',\n                method='1234',\n            ))\n\n        with self.assertRaises(InterfaceValidationError):\n            Http.to_python(dict(\n                url='http://example.com',\n                method='A' * 33,\n            ))\n\n        with self.assertRaises(InterfaceValidationError):\n            Http.to_python(dict(\n                url='http://example.com',\n                method='A',\n            ))\n\n        result = Http.to_python(dict(\n            url='http://example.com',\n            method='TEST',\n        ))\n        assert result.method == 'TEST'\n\n        result = Http.to_python(dict(\n            url='http://example.com',\n            method='FOO-BAR',\n        ))\n        assert result.method == 'FOO-BAR'\n\n        result = Http.to_python(dict(\n            url='http://example.com',\n            method='FOO_BAR',\n        ))\n        assert result.method == 'FOO_BAR'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_http.py", "id": "54f52bdc7a6474e4e96394e23a6425cb", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_http.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}