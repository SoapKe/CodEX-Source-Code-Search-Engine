{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    mimetype2ext,\n    parse_iso8601,\n    strip_jsonp,\n)\n\n\nclass ArkenaIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'https://play.arkena.com/embed/avp/v2/player/media/b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe/1/129411',\n        'md5': 'b96f2f71b359a8ecd05ce4e1daa72365',\n        'info_dict': {\n            'id': 'b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe',\n            'ext': 'mp4',\n            'title': 'Big Buck Bunny',\n            'description': 'Royalty free test video',\n            'timestamp': 1432816365,\n            'upload_date': '20150528',\n            'is_live': False,\n        },\n    }, {\n        'url': 'https://play.arkena.com/config/avp/v2/player/media/b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe/1/129411/?callbackMethod=jQuery1111023664739129262213_1469227693893',\n        'only_matching': True,\n    }, {\n        'url': 'http://play.arkena.com/config/avp/v1/player/media/327336/darkmatter/131064/?callbackMethod=jQuery1111002221189684892677_1469227595972',\n        'only_matching': True,\n    }, {\n        'url': 'http://play.arkena.com/embed/avp/v1/player/media/327336/darkmatter/131064/',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.arkena.com/play2/embed/player?accountId=472718&mediaId=35763b3b-00090078-bf604299&pageStyling=styled',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        \n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//play\\.arkena\\.com/embed/avp/.+?)\\1',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        account_id = mobj.group('account_id')\n\n        \n        if not video_id:\n            qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n            video_id = qs.get('mediaId', [None])[0]\n            account_id = qs.get('accountId', [None])[0]\n            if not video_id or not account_id:\n                raise ExtractorError('Invalid URL', expected=True)\n\n        playlist = self._download_json(\n            'https://play.arkena.com/config/avp/v2/player/media/%s/0/%s/?callbackMethod=_'\n            % (video_id, account_id),\n            video_id, transform_source=strip_jsonp)['Playlist'][0]\n\n        media_info = playlist['MediaInfo']\n        title = media_info['Title']\n        media_files = playlist['MediaFiles']\n\n        is_live = False\n        formats = []\n        for kind_case, kind_formats in media_files.items():\n            kind = kind_case.lower()\n            for f in kind_formats:\n                f_url = f.get('Url')\n                if not f_url:\n                    continue\n                is_live = f.get('Live') == 'true'\n                exts = (mimetype2ext(f.get('Type')), determine_ext(f_url, None))\n                if kind == 'm3u8' or 'm3u8' in exts:\n                    formats.extend(self._extract_m3u8_formats(\n                        f_url, video_id, 'mp4', 'm3u8_native',\n                        m3u8_id=kind, fatal=False, live=is_live))\n                elif kind == 'flash' or 'f4m' in exts:\n                    formats.extend(self._extract_f4m_formats(\n                        f_url, video_id, f4m_id=kind, fatal=False))\n                elif kind == 'dash' or 'mpd' in exts:\n                    formats.extend(self._extract_mpd_formats(\n                        f_url, video_id, mpd_id=kind, fatal=False))\n                elif kind == 'silverlight':\n                    \n                    \n                    continue\n                else:\n                    tbr = float_or_none(f.get('Bitrate'), 1000)\n                    formats.append({\n                        'url': f_url,\n                        'format_id': '%s-%d' % (kind, tbr) if tbr else kind,\n                        'tbr': tbr,\n                    })\n        self._sort_formats(formats)\n\n        description = media_info.get('Description')\n        video_id = media_info.get('VideoId') or video_id\n        timestamp = parse_iso8601(media_info.get('PublishDate'))\n        thumbnails = [{\n            'url': thumbnail['Url'],\n            'width': int_or_none(thumbnail.get('Size')),\n        } for thumbnail in (media_info.get('Poster') or []) if thumbnail.get('Url')]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'is_live': is_live,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "(?x)\n                        https?://\n                            (?:\n                                video\\.arkena\\.com/play2/embed/player\\?|\n                                play\\.arkena\\.com/(?:config|embed)/avp/v\\d/player/media/(?P<id>[^/]+)/[^/]+/(?P<account_id>\\d+)\n                            )\n                        \n \n# coding: utf-8\n# See https://support.arkena.com/display/PLAY/Ways+to+embed+your+video\n# Handle http://video.arkena.com/play2/embed/player URL\n# TODO: process when ism is supported (see\n# https://github.com/rg3/youtube-dl/issues/8118)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    mimetype2ext,\n    parse_iso8601,\n    strip_jsonp,\n)\n\n\nclass ArkenaIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                        https?://\n                            (?:\n                                video\\.arkena\\.com/play2/embed/player\\?|\n                                play\\.arkena\\.com/(?:config|embed)/avp/v\\d/player/media/(?P<id>[^/]+)/[^/]+/(?P<account_id>\\d+)\n                            )\n                        '''\n    _TESTS = [{\n        'url': 'https://play.arkena.com/embed/avp/v2/player/media/b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe/1/129411',\n        'md5': 'b96f2f71b359a8ecd05ce4e1daa72365',\n        'info_dict': {\n            'id': 'b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe',\n            'ext': 'mp4',\n            'title': 'Big Buck Bunny',\n            'description': 'Royalty free test video',\n            'timestamp': 1432816365,\n            'upload_date': '20150528',\n            'is_live': False,\n        },\n    }, {\n        'url': 'https://play.arkena.com/config/avp/v2/player/media/b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe/1/129411/?callbackMethod=jQuery1111023664739129262213_1469227693893',\n        'only_matching': True,\n    }, {\n        'url': 'http://play.arkena.com/config/avp/v1/player/media/327336/darkmatter/131064/?callbackMethod=jQuery1111002221189684892677_1469227595972',\n        'only_matching': True,\n    }, {\n        'url': 'http://play.arkena.com/embed/avp/v1/player/media/327336/darkmatter/131064/',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.arkena.com/play2/embed/player?accountId=472718&mediaId=35763b3b-00090078-bf604299&pageStyling=styled',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        # See https://support.arkena.com/display/PLAY/Ways+to+embed+your+video\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//play\\.arkena\\.com/embed/avp/.+?)\\1',\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        account_id = mobj.group('account_id')\n\n        # Handle http://video.arkena.com/play2/embed/player URL\n        if not video_id:\n            qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n            video_id = qs.get('mediaId', [None])[0]\n            account_id = qs.get('accountId', [None])[0]\n            if not video_id or not account_id:\n                raise ExtractorError('Invalid URL', expected=True)\n\n        playlist = self._download_json(\n            'https://play.arkena.com/config/avp/v2/player/media/%s/0/%s/?callbackMethod=_'\n            % (video_id, account_id),\n            video_id, transform_source=strip_jsonp)['Playlist'][0]\n\n        media_info = playlist['MediaInfo']\n        title = media_info['Title']\n        media_files = playlist['MediaFiles']\n\n        is_live = False\n        formats = []\n        for kind_case, kind_formats in media_files.items():\n            kind = kind_case.lower()\n            for f in kind_formats:\n                f_url = f.get('Url')\n                if not f_url:\n                    continue\n                is_live = f.get('Live') == 'true'\n                exts = (mimetype2ext(f.get('Type')), determine_ext(f_url, None))\n                if kind == 'm3u8' or 'm3u8' in exts:\n                    formats.extend(self._extract_m3u8_formats(\n                        f_url, video_id, 'mp4', 'm3u8_native',\n                        m3u8_id=kind, fatal=False, live=is_live))\n                elif kind == 'flash' or 'f4m' in exts:\n                    formats.extend(self._extract_f4m_formats(\n                        f_url, video_id, f4m_id=kind, fatal=False))\n                elif kind == 'dash' or 'mpd' in exts:\n                    formats.extend(self._extract_mpd_formats(\n                        f_url, video_id, mpd_id=kind, fatal=False))\n                elif kind == 'silverlight':\n                    # TODO: process when ism is supported (see\n                    # https://github.com/rg3/youtube-dl/issues/8118)\n                    continue\n                else:\n                    tbr = float_or_none(f.get('Bitrate'), 1000)\n                    formats.append({\n                        'url': f_url,\n                        'format_id': '%s-%d' % (kind, tbr) if tbr else kind,\n                        'tbr': tbr,\n                    })\n        self._sort_formats(formats)\n\n        description = media_info.get('Description')\n        video_id = media_info.get('VideoId') or video_id\n        timestamp = parse_iso8601(media_info.get('PublishDate'))\n        thumbnails = [{\n            'url': thumbnail['Url'],\n            'width': int_or_none(thumbnail.get('Size')),\n        } for thumbnail in (media_info.get('Poster') or []) if thumbnail.get('Url')]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'is_live': is_live,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "arkena.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/arkena.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}