{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n Copyright (c) 2016 Red Hat, Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ovirt_affinity_label_facts\nshort_description: Retrieve facts about one or more oVirt/RHV affinity labels\nauthor: \"Ondra Machacek (@machacekondra)\"\nversion_added: \"2.3\"\ndescription:\n    - \"Retrieve facts about one or more oVirt/RHV affinity labels.\"\nnotes:\n    - \"This module creates a new top-level C(ovirt_affinity_labels) fact, which\n       contains a list of affinity labels.\"\noptions:\n    name:\n      description:\n        - \"Name of the affinity labels which should be listed.\"\n    vm:\n      description:\n        - \"Name of the VM, which affinity labels should be listed.\"\n    host:\n      description:\n        - \"Name of the host, which affinity labels should be listed.\"\nextends_documentation_fragment: ovirt_facts\n'''\n\nEXAMPLES = '''\n Examples don't contain auth parameter for simplicity,\n look at ovirt_auth module to see how to reuse authentication:\n\n Gather facts about all affinity labels, which names start with C(label):\n- ovirt_affinity_label_facts:\n    name: label*\n- debug:\n    var: affinity_labels\n\n Gather facts about all affinity labels, which are assigned to VMs\n which names start with C(postgres):\n- ovirt_affinity_label_facts:\n    vm: postgres*\n- debug:\n    var: affinity_labels\n\n Gather facts about all affinity labels, which are assigned to hosts\n which names start with C(west):\n- ovirt_affinity_label_facts:\n    host: west*\n- debug:\n    var: affinity_labels\n\n Gather facts about all affinity labels, which are assigned to hosts\n which names start with C(west) or VMs which names start with C(postgres):\n- ovirt_affinity_label_facts:\n    host: west*\n    vm: postgres*\n- debug:\n    var: affinity_labels\n'''\n\nRETURN = '''\novirt_affinity_labels:\n    description: \"List of dictionaries describing the affinity labels. Affinity labels attribues are mapped to dictionary keys,\n                  all affinity labels attributes can be found at following url: http://ovirt.github.io/ovirt-engine-api-model/master/types/affinity_label.\"\n    returned: On success.\n    type: list\n'''\n\nimport fnmatch\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ovirt import (\n    check_sdk,\n    create_connection,\n    get_dict_of_struct,\n    ovirt_facts_full_argument_spec,\n)\n\n\ndef main():\n    argument_spec = ovirt_facts_full_argument_spec(\n        name=dict(default=None),\n        host=dict(default=None),\n        vm=dict(default=None),\n    )\n    module = AnsibleModule(argument_spec)\n\n    if module._name == 'ovirt_affinity_labels_facts':\n        module.deprecate(\"The 'ovirt_affinity_labels_facts' module is being renamed 'ovirt_affinity_label_facts'\", version=2.8)\n\n    check_sdk(module)\n\n    try:\n        auth = module.params.pop('auth')\n        connection = create_connection(auth)\n        affinity_labels_service = connection.system_service().affinity_labels_service()\n        labels = []\n        all_labels = affinity_labels_service.list()\n        if module.params['name']:\n            labels.extend([\n                l for l in all_labels\n                if fnmatch.fnmatch(l.name, module.params['name'])\n            ])\n        if module.params['host']:\n            hosts_service = connection.system_service().hosts_service()\n            labels.extend([\n                label\n                for label in all_labels\n                for host in connection.follow_link(label.hosts)\n                if fnmatch.fnmatch(hosts_service.service(host.id).get().name, module.params['host'])\n            ])\n        if module.params['vm']:\n            vms_service = connection.system_service().vms_service()\n            labels.extend([\n                label\n                for label in all_labels\n                for vm in connection.follow_link(label.vms)\n                if fnmatch.fnmatch(vms_service.service(vm.id).get().name, module.params['vm'])\n            ])\n\n        if not (module.params['vm'] or module.params['host'] or module.params['name']):\n            labels = all_labels\n\n        module.exit_json(\n            changed=False,\n            ansible_facts=dict(\n                ovirt_affinity_labels=[\n                    get_dict_of_struct(\n                        struct=l,\n                        connection=connection,\n                        fetch_nested=module.params.get('fetch_nested'),\n                        attributes=module.params.get('nested_attributes'),\n                    ) for l in labels\n                ],\n            ),\n        )\n    except Exception as e:\n        module.fail_json(msg=str(e), exception=traceback.format_exc())\n    finally:\n        connection.close(logout=auth.get('token') is None)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ovirt affinity label facts short description  retrieve facts one ovirt rhv affinity labels author   ondra machacek ( machacekondra)  version added   2 3  description         retrieve facts one ovirt rhv affinity labels   notes         this module creates new top level c(ovirt affinity labels) fact         contains list affinity labels   options      name        description             name affinity labels listed       vm        description             name vm  affinity labels listed       host        description             name host  affinity labels listed   extends documentation fragment  ovirt facts      examples         examples contain auth parameter simplicity    look ovirt auth module see reuse authentication     gather facts affinity labels  names start c(label)    ovirt affinity label facts      name  label    debug      var  affinity labels    gather facts affinity labels  assigned vms   names start c(postgres)    ovirt affinity label facts      vm  postgres    debug      var  affinity labels    gather facts affinity labels  assigned hosts   names start c(west)    ovirt affinity label facts      host  west    debug      var  affinity labels    gather facts affinity labels  assigned hosts   names start c(west) vms names start c(postgres)    ovirt affinity label facts      host  west      vm  postgres    debug      var  affinity labels      return       ovirt affinity labels      description   list dictionaries describing affinity labels  affinity labels attribues mapped dictionary keys                    affinity labels attributes found following url  http   ovirt github io ovirt engine api model master  types affinity label       returned  on success      type  list         usr bin python        coding  utf 8           copyright (c) 2016 red hat  inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          examples contain auth parameter simplicity     look ovirt auth module see reuse authentication     gather facts affinity labels  names start c(label)     gather facts affinity labels  assigned vms    names start c(postgres)     gather facts affinity labels  assigned hosts    names start c(west)     gather facts affinity labels  assigned hosts    names start c(west) vms names start c(postgres)    types affinity label   ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2016 Red Hat, Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ovirt_affinity_label_facts\nshort_description: Retrieve facts about one or more oVirt/RHV affinity labels\nauthor: \"Ondra Machacek (@machacekondra)\"\nversion_added: \"2.3\"\ndescription:\n    - \"Retrieve facts about one or more oVirt/RHV affinity labels.\"\nnotes:\n    - \"This module creates a new top-level C(ovirt_affinity_labels) fact, which\n       contains a list of affinity labels.\"\noptions:\n    name:\n      description:\n        - \"Name of the affinity labels which should be listed.\"\n    vm:\n      description:\n        - \"Name of the VM, which affinity labels should be listed.\"\n    host:\n      description:\n        - \"Name of the host, which affinity labels should be listed.\"\nextends_documentation_fragment: ovirt_facts\n'''\n\nEXAMPLES = '''\n# Examples don't contain auth parameter for simplicity,\n# look at ovirt_auth module to see how to reuse authentication:\n\n# Gather facts about all affinity labels, which names start with C(label):\n- ovirt_affinity_label_facts:\n    name: label*\n- debug:\n    var: affinity_labels\n\n# Gather facts about all affinity labels, which are assigned to VMs\n# which names start with C(postgres):\n- ovirt_affinity_label_facts:\n    vm: postgres*\n- debug:\n    var: affinity_labels\n\n# Gather facts about all affinity labels, which are assigned to hosts\n# which names start with C(west):\n- ovirt_affinity_label_facts:\n    host: west*\n- debug:\n    var: affinity_labels\n\n# Gather facts about all affinity labels, which are assigned to hosts\n# which names start with C(west) or VMs which names start with C(postgres):\n- ovirt_affinity_label_facts:\n    host: west*\n    vm: postgres*\n- debug:\n    var: affinity_labels\n'''\n\nRETURN = '''\novirt_affinity_labels:\n    description: \"List of dictionaries describing the affinity labels. Affinity labels attribues are mapped to dictionary keys,\n                  all affinity labels attributes can be found at following url: http://ovirt.github.io/ovirt-engine-api-model/master/#types/affinity_label.\"\n    returned: On success.\n    type: list\n'''\n\nimport fnmatch\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ovirt import (\n    check_sdk,\n    create_connection,\n    get_dict_of_struct,\n    ovirt_facts_full_argument_spec,\n)\n\n\ndef main():\n    argument_spec = ovirt_facts_full_argument_spec(\n        name=dict(default=None),\n        host=dict(default=None),\n        vm=dict(default=None),\n    )\n    module = AnsibleModule(argument_spec)\n\n    if module._name == 'ovirt_affinity_labels_facts':\n        module.deprecate(\"The 'ovirt_affinity_labels_facts' module is being renamed 'ovirt_affinity_label_facts'\", version=2.8)\n\n    check_sdk(module)\n\n    try:\n        auth = module.params.pop('auth')\n        connection = create_connection(auth)\n        affinity_labels_service = connection.system_service().affinity_labels_service()\n        labels = []\n        all_labels = affinity_labels_service.list()\n        if module.params['name']:\n            labels.extend([\n                l for l in all_labels\n                if fnmatch.fnmatch(l.name, module.params['name'])\n            ])\n        if module.params['host']:\n            hosts_service = connection.system_service().hosts_service()\n            labels.extend([\n                label\n                for label in all_labels\n                for host in connection.follow_link(label.hosts)\n                if fnmatch.fnmatch(hosts_service.service(host.id).get().name, module.params['host'])\n            ])\n        if module.params['vm']:\n            vms_service = connection.system_service().vms_service()\n            labels.extend([\n                label\n                for label in all_labels\n                for vm in connection.follow_link(label.vms)\n                if fnmatch.fnmatch(vms_service.service(vm.id).get().name, module.params['vm'])\n            ])\n\n        if not (module.params['vm'] or module.params['host'] or module.params['name']):\n            labels = all_labels\n\n        module.exit_json(\n            changed=False,\n            ansible_facts=dict(\n                ovirt_affinity_labels=[\n                    get_dict_of_struct(\n                        struct=l,\n                        connection=connection,\n                        fetch_nested=module.params.get('fetch_nested'),\n                        attributes=module.params.get('nested_attributes'),\n                    ) for l in labels\n                ],\n            ),\n        )\n    except Exception as e:\n        module.fail_json(msg=str(e), exception=traceback.format_exc())\n    finally:\n        connection.close(logout=auth.get('token') is None)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ovirt_affinity_label_facts.py", "id": "3ed521a71f1a26d37f1963524a0004d0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/ovirt/ovirt_affinity_label_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}