{"author": "yandex", "code": "from nose.tools import with_setup, assert_equals, assert_not_equals, assert_true\nfrom gixy.core.context import get_context, pop_context, push_context, purge_context, CONTEXTS, Context\nfrom gixy.directives.block import Root\nfrom gixy.core.variable import Variable\nfrom gixy.core.regexp import Regexp\n\n\ndef setup():\n    assert_equals(len(CONTEXTS), 0)\n\n\ndef tear_down():\n    purge_context()\n\n\n@with_setup(setup, tear_down)\ndef test_push_pop_context():\n    root_a = Root()\n    push_context(root_a)\n    assert_equals(len(CONTEXTS), 1)\n    root_b = Root()\n    push_context(root_b)\n    assert_equals(len(CONTEXTS), 2)\n\n    poped = pop_context()\n    assert_equals(len(CONTEXTS), 1)\n    assert_equals(poped.block, root_b)\n    poped = pop_context()\n    assert_equals(len(CONTEXTS), 0)\n    assert_equals(poped.block, root_a)\n\n\n@with_setup(setup, tear_down)\ndef test_push_get_purge_context():\n    root = Root()\n    push_context(root)\n    assert_equals(len(CONTEXTS), 1)\n    assert_equals(get_context().block, root)\n    root = Root()\n    push_context(root)\n    assert_equals(len(CONTEXTS), 2)\n    assert_equals(get_context().block, root)\n\n    purge_context()\n    assert_equals(len(CONTEXTS), 0)\n\n\n@with_setup(setup, tear_down)\ndef test_add_variables():\n    context = push_context(Root())\n    assert_equals(len(context.variables['index']), 0)\n    assert_equals(len(context.variables['name']), 0)\n\n    one_str_var = Variable('1')\n    context.add_var('1', one_str_var)\n    one_int_var = Variable(1)\n    context.add_var(1, one_int_var)\n    some_var = Variable('some')\n    context.add_var('some', some_var)\n\n    assert_equals(len(context.variables['index']), 1)\n    assert_equals(context.variables['index'][1], one_int_var)\n    assert_equals(len(context.variables['name']), 1)\n    assert_equals(context.variables['name']['some'], some_var)\n    context.clear_index_vars()\n    assert_equals(len(context.variables['index']), 0)\n    assert_equals(len(context.variables['name']), 1)\n    assert_equals(context.variables['name']['some'], some_var)\n\n\n@with_setup(setup, tear_down)\ndef test_get_variables():\n    context = push_context(Root())\n    assert_equals(len(context.variables['index']), 0)\n    assert_equals(len(context.variables['name']), 0)\n\n    one_var = Variable(1)\n    context.add_var(1, one_var)\n    some_var = Variable('some')\n    context.add_var('some', some_var)\n\n    assert_equals(context.get_var(1), one_var)\n    assert_equals(context.get_var('some'), some_var)\n    \n    assert_equals(context.get_var(0), None)\n    assert_equals(context.get_var('not_existed'), None)\n    \n    assert_true(context.get_var('uri'))\n    assert_true(context.get_var('document_uri'))\n    assert_true(context.get_var('arg_asdsadasd'))\n    assert_true(context.get_var('args'))\n\n\n@with_setup(setup, tear_down)\ndef test_context_depend_variables():\n    push_context(Root())\n    assert_equals(len(get_context().variables['index']), 0)\n    assert_equals(len(get_context().variables['name']), 0)\n\n    get_context().add_var(1, Variable(1, value='one'))\n    get_context().add_var('some', Variable('some', value='some'))\n\n    assert_equals(get_context().get_var(1).value, 'one')\n    assert_equals(get_context().get_var('some').value, 'some')\n\n    \n    push_context(Root())\n    assert_equals(get_context().get_var(1).value, 'one')\n    assert_equals(get_context().get_var('some').value, 'some')\n\n    \n    get_context().add_var('some', Variable('some', value='some_new'))\n    get_context().add_var('foo', Variable('foo', value='foo'))\n    assert_not_equals(get_context().get_var('some').value, 'some')\n    assert_equals(get_context().get_var('some').value, 'some_new')\n    assert_equals(get_context().get_var('foo').value, 'foo')\n    assert_equals(get_context().get_var(1).value, 'one')\n\n    \n    pop_context()\n    assert_not_equals(get_context().get_var('some').value, 'some_new')\n    assert_equals(get_context().get_var('some').value, 'some')\n    assert_equals(get_context().get_var('foo'), None)\n    assert_equals(get_context().get_var(1).value, 'one')\n\n\n@with_setup(setup, tear_down)\ndef test_push_failed_with_regexp_py35_gixy_10():\n    push_context(Root())\n    assert_equals(len(get_context().variables['index']), 0)\n    assert_equals(len(get_context().variables['name']), 0)\n\n    regexp = Regexp('^/some/(.*?)')\n    for name, group in regexp.groups.items():\n        get_context().add_var(name, Variable(name=name, value=group))\n\n    push_context(Root())\n", "comments": "  checks existed variables  context may return none    checks builtins variables    checks top context variables still exists    checks variable overriding    checks variables restore previous context ", "content": "from nose.tools import with_setup, assert_equals, assert_not_equals, assert_true\nfrom gixy.core.context import get_context, pop_context, push_context, purge_context, CONTEXTS, Context\nfrom gixy.directives.block import Root\nfrom gixy.core.variable import Variable\nfrom gixy.core.regexp import Regexp\n\n\ndef setup():\n    assert_equals(len(CONTEXTS), 0)\n\n\ndef tear_down():\n    purge_context()\n\n\n@with_setup(setup, tear_down)\ndef test_push_pop_context():\n    root_a = Root()\n    push_context(root_a)\n    assert_equals(len(CONTEXTS), 1)\n    root_b = Root()\n    push_context(root_b)\n    assert_equals(len(CONTEXTS), 2)\n\n    poped = pop_context()\n    assert_equals(len(CONTEXTS), 1)\n    assert_equals(poped.block, root_b)\n    poped = pop_context()\n    assert_equals(len(CONTEXTS), 0)\n    assert_equals(poped.block, root_a)\n\n\n@with_setup(setup, tear_down)\ndef test_push_get_purge_context():\n    root = Root()\n    push_context(root)\n    assert_equals(len(CONTEXTS), 1)\n    assert_equals(get_context().block, root)\n    root = Root()\n    push_context(root)\n    assert_equals(len(CONTEXTS), 2)\n    assert_equals(get_context().block, root)\n\n    purge_context()\n    assert_equals(len(CONTEXTS), 0)\n\n\n@with_setup(setup, tear_down)\ndef test_add_variables():\n    context = push_context(Root())\n    assert_equals(len(context.variables['index']), 0)\n    assert_equals(len(context.variables['name']), 0)\n\n    one_str_var = Variable('1')\n    context.add_var('1', one_str_var)\n    one_int_var = Variable(1)\n    context.add_var(1, one_int_var)\n    some_var = Variable('some')\n    context.add_var('some', some_var)\n\n    assert_equals(len(context.variables['index']), 1)\n    assert_equals(context.variables['index'][1], one_int_var)\n    assert_equals(len(context.variables['name']), 1)\n    assert_equals(context.variables['name']['some'], some_var)\n    context.clear_index_vars()\n    assert_equals(len(context.variables['index']), 0)\n    assert_equals(len(context.variables['name']), 1)\n    assert_equals(context.variables['name']['some'], some_var)\n\n\n@with_setup(setup, tear_down)\ndef test_get_variables():\n    context = push_context(Root())\n    assert_equals(len(context.variables['index']), 0)\n    assert_equals(len(context.variables['name']), 0)\n\n    one_var = Variable(1)\n    context.add_var(1, one_var)\n    some_var = Variable('some')\n    context.add_var('some', some_var)\n\n    assert_equals(context.get_var(1), one_var)\n    assert_equals(context.get_var('some'), some_var)\n    # Checks not existed variables, for now context may return None\n    assert_equals(context.get_var(0), None)\n    assert_equals(context.get_var('not_existed'), None)\n    # Checks builtins variables\n    assert_true(context.get_var('uri'))\n    assert_true(context.get_var('document_uri'))\n    assert_true(context.get_var('arg_asdsadasd'))\n    assert_true(context.get_var('args'))\n\n\n@with_setup(setup, tear_down)\ndef test_context_depend_variables():\n    push_context(Root())\n    assert_equals(len(get_context().variables['index']), 0)\n    assert_equals(len(get_context().variables['name']), 0)\n\n    get_context().add_var(1, Variable(1, value='one'))\n    get_context().add_var('some', Variable('some', value='some'))\n\n    assert_equals(get_context().get_var(1).value, 'one')\n    assert_equals(get_context().get_var('some').value, 'some')\n\n    # Checks top context variables are still exists\n    push_context(Root())\n    assert_equals(get_context().get_var(1).value, 'one')\n    assert_equals(get_context().get_var('some').value, 'some')\n\n    # Checks variable overriding\n    get_context().add_var('some', Variable('some', value='some_new'))\n    get_context().add_var('foo', Variable('foo', value='foo'))\n    assert_not_equals(get_context().get_var('some').value, 'some')\n    assert_equals(get_context().get_var('some').value, 'some_new')\n    assert_equals(get_context().get_var('foo').value, 'foo')\n    assert_equals(get_context().get_var(1).value, 'one')\n\n    # Checks variables after restore previous context\n    pop_context()\n    assert_not_equals(get_context().get_var('some').value, 'some_new')\n    assert_equals(get_context().get_var('some').value, 'some')\n    assert_equals(get_context().get_var('foo'), None)\n    assert_equals(get_context().get_var(1).value, 'one')\n\n\n@with_setup(setup, tear_down)\ndef test_push_failed_with_regexp_py35_gixy_10():\n    push_context(Root())\n    assert_equals(len(get_context().variables['index']), 0)\n    assert_equals(len(get_context().variables['name']), 0)\n\n    regexp = Regexp('^/some/(.*?)')\n    for name, group in regexp.groups.items():\n        get_context().add_var(name, Variable(name=name, value=group))\n\n    push_context(Root())\n", "description": "Nginx configuration static analyzer", "file_name": "test_context.py", "id": "06d5d5a457e9fd3db2337cf247cafc4f", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/tests/core/test_context.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}