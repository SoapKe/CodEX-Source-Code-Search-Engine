{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport base64\nimport io\nfrom werkzeug.utils import redirect\n\nfrom odoo import http\nfrom odoo.http import request\nfrom odoo.addons.sale.controllers.portal import CustomerPortal\nfrom odoo.addons.website_sale.controllers.main import WebsiteSale\n\n\nclass WebsiteSaleDigitalConfirmation(WebsiteSale):\n    @http.route([\n        '/shop/confirmation',\n    ], type='http', auth=\"public\", website=True)\n    def payment_confirmation(self, **post):\n        response = super(WebsiteSaleDigitalConfirmation, self).payment_confirmation(**post)\n        order_lines = response.qcontext['order'].order_line\n        digital_content = any(x.product_id.type == 'digital' for x in order_lines)\n        response.qcontext.update(digital=digital_content)\n        return response\n\n\nclass WebsiteSaleDigital(CustomerPortal):\n    orders_page = '/my/orders'\n\n    @http.route([\n        '/my/orders/<int:order>',\n    ], type='http', auth='user', website=True)\n    def portal_order_page(self, order=None, **post):\n        response = super(WebsiteSaleDigital, self).portal_order_page(order=order, **post)\n        if not 'order' in response.qcontext:\n            return response\n        order = response.qcontext['order']\n        invoiced_lines = request.env['account.invoice.line'].sudo().search([('invoice_id', 'in', order.invoice_ids.ids), ('invoice_id.state', '=', 'paid')])\n        products = invoiced_lines.mapped('product_id') | order.order_line.filtered(lambda r: not r.price_subtotal).mapped('product_id')\n\n        purchased_products_attachments = {}\n        for product in products:\n            \n            Attachment = request.env['ir.attachment']\n            product_id = product.id\n            template = product.product_tmpl_id\n            att = Attachment.search_read(\n                domain=['|', '&', ('res_model', '=', product._name), ('res_id', '=', product_id), '&', ('res_model', '=', template._name), '&', ('res_id', '=', template.id), ('product_downloadable', '=', True)],\n                fields=['name', 'write_date'],\n                order='write_date desc',\n            )\n\n            \n            if not att:\n                continue\n\n            purchased_products_attachments[product_id] = att\n\n        response.qcontext.update({\n            'digital_attachments': purchased_products_attachments,\n        })\n        return response\n\n    @http.route([\n        '/my/download',\n    ], type='http', auth='public')\n    def download_attachment(self, attachment_id):\n        \n        attachment = request.env['ir.attachment'].sudo().search_read(\n            [('id', '=', int(attachment_id))],\n            [\"name\", \"datas\", \"file_type\", \"res_model\", \"res_id\", \"type\", \"url\"]\n        )\n\n        if attachment:\n            attachment = attachment[0]\n        else:\n            return redirect(self.orders_page)\n\n        \n        res_model = attachment['res_model']\n        res_id = attachment['res_id']\n        purchased_products = request.env['account.invoice.line'].get_digital_purchases()\n\n        if res_model == 'product.product':\n            if res_id not in purchased_products:\n                return redirect(self.orders_page)\n\n        \n        elif res_model == 'product.template':\n            template_ids = request.env['product.product'].sudo().browse(purchased_products).mapped('product_tmpl_id').ids\n            if res_id not in template_ids:\n                return redirect(self.orders_page)\n\n        else:\n            return redirect(self.orders_page)\n\n        \n        if attachment[\"type\"] == \"url\":\n            if attachment[\"url\"]:\n                return redirect(attachment[\"url\"])\n            else:\n                return request.not_found()\n        elif attachment[\"datas\"]:\n            data = io.BytesIO(base64.standard_b64decode(attachment[\"datas\"]))\n            return http.send_file(data, filename=attachment['name'], as_attachment=True)\n        else:\n            return request.not_found()\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     search product attachments    ignore products attachments    check valid attachment id    check user bought associated product    also check attachments product templates    the client bought product  otherwise would blocked ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport base64\nimport io\nfrom werkzeug.utils import redirect\n\nfrom odoo import http\nfrom odoo.http import request\nfrom odoo.addons.sale.controllers.portal import CustomerPortal\nfrom odoo.addons.website_sale.controllers.main import WebsiteSale\n\n\nclass WebsiteSaleDigitalConfirmation(WebsiteSale):\n    @http.route([\n        '/shop/confirmation',\n    ], type='http', auth=\"public\", website=True)\n    def payment_confirmation(self, **post):\n        response = super(WebsiteSaleDigitalConfirmation, self).payment_confirmation(**post)\n        order_lines = response.qcontext['order'].order_line\n        digital_content = any(x.product_id.type == 'digital' for x in order_lines)\n        response.qcontext.update(digital=digital_content)\n        return response\n\n\nclass WebsiteSaleDigital(CustomerPortal):\n    orders_page = '/my/orders'\n\n    @http.route([\n        '/my/orders/<int:order>',\n    ], type='http', auth='user', website=True)\n    def portal_order_page(self, order=None, **post):\n        response = super(WebsiteSaleDigital, self).portal_order_page(order=order, **post)\n        if not 'order' in response.qcontext:\n            return response\n        order = response.qcontext['order']\n        invoiced_lines = request.env['account.invoice.line'].sudo().search([('invoice_id', 'in', order.invoice_ids.ids), ('invoice_id.state', '=', 'paid')])\n        products = invoiced_lines.mapped('product_id') | order.order_line.filtered(lambda r: not r.price_subtotal).mapped('product_id')\n\n        purchased_products_attachments = {}\n        for product in products:\n            # Search for product attachments\n            Attachment = request.env['ir.attachment']\n            product_id = product.id\n            template = product.product_tmpl_id\n            att = Attachment.search_read(\n                domain=['|', '&', ('res_model', '=', product._name), ('res_id', '=', product_id), '&', ('res_model', '=', template._name), '&', ('res_id', '=', template.id), ('product_downloadable', '=', True)],\n                fields=['name', 'write_date'],\n                order='write_date desc',\n            )\n\n            # Ignore products with no attachments\n            if not att:\n                continue\n\n            purchased_products_attachments[product_id] = att\n\n        response.qcontext.update({\n            'digital_attachments': purchased_products_attachments,\n        })\n        return response\n\n    @http.route([\n        '/my/download',\n    ], type='http', auth='public')\n    def download_attachment(self, attachment_id):\n        # Check if this is a valid attachment id\n        attachment = request.env['ir.attachment'].sudo().search_read(\n            [('id', '=', int(attachment_id))],\n            [\"name\", \"datas\", \"file_type\", \"res_model\", \"res_id\", \"type\", \"url\"]\n        )\n\n        if attachment:\n            attachment = attachment[0]\n        else:\n            return redirect(self.orders_page)\n\n        # Check if the user has bought the associated product\n        res_model = attachment['res_model']\n        res_id = attachment['res_id']\n        purchased_products = request.env['account.invoice.line'].get_digital_purchases()\n\n        if res_model == 'product.product':\n            if res_id not in purchased_products:\n                return redirect(self.orders_page)\n\n        # Also check for attachments in the product templates\n        elif res_model == 'product.template':\n            template_ids = request.env['product.product'].sudo().browse(purchased_products).mapped('product_tmpl_id').ids\n            if res_id not in template_ids:\n                return redirect(self.orders_page)\n\n        else:\n            return redirect(self.orders_page)\n\n        # The client has bought the product, otherwise it would have been blocked by now\n        if attachment[\"type\"] == \"url\":\n            if attachment[\"url\"]:\n                return redirect(attachment[\"url\"])\n            else:\n                return request.not_found()\n        elif attachment[\"datas\"]:\n            data = io.BytesIO(base64.standard_b64decode(attachment[\"datas\"]))\n            return http.send_file(data, filename=attachment['name'], as_attachment=True)\n        else:\n            return request.not_found()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "48d20422aa56f551ec01d42ddc925197", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_sale_digital/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}