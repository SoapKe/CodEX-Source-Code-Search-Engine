{"author": "sloria", "code": "# -*- coding: utf-8 -*-\nimport sys\n\nPY2 = int(sys.version[0]) == 2\n\nif PY2:\n    from itertools import imap, izip\n    import urllib2 as request\n    from urllib import quote as urlquote\n    from urllib import urlencode\n    text_type = unicode\n    binary_type = str\n    string_types = (str, unicode)\n    unicode = unicode\n    basestring = basestring\n    imap = imap\n    izip = izip\n    import unicodecsv as csv\n\n    def implements_to_string(cls):\n        \"\"\"Class decorator that renames __str__ to __unicode__ and\n        modifies __str__ that returns utf-8.\n        \"\"\"\n        cls.__unicode__ = cls.__str__\n        cls.__str__ = lambda x: x.__unicode__().encode('utf-8')\n        return cls\nelse:  \n    from urllib import request\n    from urllib.parse import quote as urlquote\n    from urllib.parse import urlencode\n    text_type = str\n    binary_type = bytes\n    string_types = (str,)\n    unicode = str\n    basestring = (str, bytes)\n    imap = map\n    izip = zip\n    import csv\n\n    implements_to_string = lambda x: x\n\n\n\ndef with_metaclass(meta, *bases):\n    \"\"\"Create a base class with a metaclass.\"\"\"\n    \n    \n    \n    class metaclass(meta):  \n\n        def __new__(cls, name, this_bases, d):\n            return meta(name, bases, d)\n    return type.__new__(metaclass, 'temporary_class', (), {})\n", "comments": "   class decorator renames   str     unicode           modifies   str   returns utf 8                      cls   unicode     cls   str           cls   str     lambda x  x   unicode  () encode( utf 8 )         return cls else     py3     urllib import request     urllib parse import quote urlquote     urllib parse import urlencode     text type   str     binary type   bytes     string types   (str )     unicode   str     basestring   (str  bytes)     imap   map     izip   zip     import csv      implements string   lambda x  x     from six def metaclass(meta   bases)         create base class metaclass            coding  utf 8        py3    from six    this requires bit explanation  basic idea make dummy    metaclass one level class instantiation replaces    actual metaclass     noqa ", "content": "# -*- coding: utf-8 -*-\nimport sys\n\nPY2 = int(sys.version[0]) == 2\n\nif PY2:\n    from itertools import imap, izip\n    import urllib2 as request\n    from urllib import quote as urlquote\n    from urllib import urlencode\n    text_type = unicode\n    binary_type = str\n    string_types = (str, unicode)\n    unicode = unicode\n    basestring = basestring\n    imap = imap\n    izip = izip\n    import unicodecsv as csv\n\n    def implements_to_string(cls):\n        \"\"\"Class decorator that renames __str__ to __unicode__ and\n        modifies __str__ that returns utf-8.\n        \"\"\"\n        cls.__unicode__ = cls.__str__\n        cls.__str__ = lambda x: x.__unicode__().encode('utf-8')\n        return cls\nelse:  # PY3\n    from urllib import request\n    from urllib.parse import quote as urlquote\n    from urllib.parse import urlencode\n    text_type = str\n    binary_type = bytes\n    string_types = (str,)\n    unicode = str\n    basestring = (str, bytes)\n    imap = map\n    izip = zip\n    import csv\n\n    implements_to_string = lambda x: x\n\n\n# From six\ndef with_metaclass(meta, *bases):\n    \"\"\"Create a base class with a metaclass.\"\"\"\n    # This requires a bit of explanation: the basic idea is to make a dummy\n    # metaclass for one level of class instantiation that replaces itself with\n    # the actual metaclass.\n    class metaclass(meta):  # noqa\n\n        def __new__(cls, name, this_bases, d):\n            return meta(name, bases, d)\n    return type.__new__(metaclass, 'temporary_class', (), {})\n", "description": "Simple, Pythonic, text processing--Sentiment analysis, part-of-speech tagging, noun phrase extraction, translation, and more.", "file_name": "compat.py", "id": "54f4cb232dc6e4a20fb91417f72896c5", "language": "Python", "project_name": "TextBlob", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sloria-TextBlob/sloria-TextBlob-124d0f9/textblob/compat.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:52:04Z", "url": "https://github.com/sloria/TextBlob", "wiki": true}