{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.ln_s_order import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef file_exists(mocker):\n    return mocker.patch('os.path.exists', return_value=True)\n\n\nget_output = \"ln: failed to create symbolic link '{}': File exists\".format\n\n\n@pytest.mark.parametrize('script, output, exists', [\n    ('ln dest source', get_output('source'), True),\n    ('ls -s dest source', get_output('source'), True),\n    ('ln -s dest source', '', True),\n    ('ln -s dest source', get_output('source'), False)])\ndef test_not_match(file_exists, script, output, exists):\n    file_exists.return_value = exists\n    assert not match(Command(script, output))\n\n\n@pytest.mark.usefixtures('file_exists')\n@pytest.mark.parametrize('script, result', [\n    ('ln -s dest source', 'ln -s source dest'),\n    ('ln dest -s source', 'ln -s source dest'),\n    ('ln dest source -s', 'ln source -s dest')])\ndef test_match(script, result):\n    output = get_output('source')\n    assert match(Command(script, output))\n    assert get_new_command(Command(script, output)) == result\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.ln_s_order import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef file_exists(mocker):\n    return mocker.patch('os.path.exists', return_value=True)\n\n\nget_output = \"ln: failed to create symbolic link '{}': File exists\".format\n\n\n@pytest.mark.parametrize('script, output, exists', [\n    ('ln dest source', get_output('source'), True),\n    ('ls -s dest source', get_output('source'), True),\n    ('ln -s dest source', '', True),\n    ('ln -s dest source', get_output('source'), False)])\ndef test_not_match(file_exists, script, output, exists):\n    file_exists.return_value = exists\n    assert not match(Command(script, output))\n\n\n@pytest.mark.usefixtures('file_exists')\n@pytest.mark.parametrize('script, result', [\n    ('ln -s dest source', 'ln -s source dest'),\n    ('ln dest -s source', 'ln -s source dest'),\n    ('ln dest source -s', 'ln source -s dest')])\ndef test_match(script, result):\n    output = get_output('source')\n    assert match(Command(script, output))\n    assert get_new_command(Command(script, output)) == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_ln_s_order.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_ln_s_order.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}