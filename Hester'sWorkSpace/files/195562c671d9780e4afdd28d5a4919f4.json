{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport time\nimport hmac\nimport binascii\nimport hashlib\n\n\nfrom .once import OnceIE\nfrom .adobepass import AdobePassIE\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    sanitized_Request,\n    unsmuggle_url,\n    update_url_query,\n    xpath_with_ns,\n    mimetype2ext,\n    find_xpath_attr,\n)\n\ndefault_ns = 'http://www.w3.org/2005/SMIL21/Language'\n_x = lambda p: xpath_with_ns(p, {'smil': default_ns})\n\n\nclass ThePlatformBaseIE(OnceIE):\n    def _extract_theplatform_smil(self, smil_url, video_id, note='Downloading SMIL data'):\n        meta = self._download_xml(\n            smil_url, video_id, note=note, query={'format': 'SMIL'},\n            headers=self.geo_verification_headers())\n        error_element = find_xpath_attr(meta, _x('.//smil:ref'), 'src')\n        if error_element is not None and error_element.attrib['src'].startswith(\n                'http://link.theplatform.com/s/errorFiles/Unavailable.'):\n            raise ExtractorError(error_element.attrib['abstract'], expected=True)\n\n        smil_formats = self._parse_smil_formats(\n            meta, smil_url, video_id, namespace=default_ns,\n            \n            \n            f4m_params={'g': 'UXWGVKRWHFSP', 'hdcore': '3.0.3'},\n            transform_rtmp_url=lambda streamer, src: (streamer, 'mp4:' + src))\n\n        formats = []\n        for _format in smil_formats:\n            if OnceIE.suitable(_format['url']):\n                formats.extend(self._extract_once_formats(_format['url']))\n            else:\n                media_url = _format['url']\n                if determine_ext(media_url) == 'm3u8':\n                    hdnea2 = self._get_cookies(media_url).get('hdnea2')\n                    if hdnea2:\n                        _format['url'] = update_url_query(media_url, {'hdnea3': hdnea2.value})\n\n                formats.append(_format)\n\n        subtitles = self._parse_smil_subtitles(meta, default_ns)\n\n        return formats, subtitles\n\n    def _download_theplatform_metadata(self, path, video_id):\n        info_url = 'http://link.theplatform.com/s/%s?format=preview' % path\n        return self._download_json(info_url, video_id)\n\n    def _parse_theplatform_metadata(self, info):\n        subtitles = {}\n        captions = info.get('captions')\n        if isinstance(captions, list):\n            for caption in captions:\n                lang, src, mime = caption.get('lang', 'en'), caption.get('src'), caption.get('type')\n                subtitles.setdefault(lang, []).append({\n                    'ext': mimetype2ext(mime),\n                    'url': src,\n                })\n\n        duration = info.get('duration')\n        tp_chapters = info.get('chapters', [])\n        chapters = []\n        if tp_chapters:\n            def _add_chapter(start_time, end_time):\n                start_time = float_or_none(start_time, 1000)\n                end_time = float_or_none(end_time, 1000)\n                if start_time is None or end_time is None:\n                    return\n                chapters.append({\n                    'start_time': start_time,\n                    'end_time': end_time,\n                })\n\n            for chapter in tp_chapters[:-1]:\n                _add_chapter(chapter.get('startTime'), chapter.get('endTime'))\n            _add_chapter(tp_chapters[-1].get('startTime'), tp_chapters[-1].get('endTime') or duration)\n\n        return {\n            'title': info['title'],\n            'subtitles': subtitles,\n            'description': info['description'],\n            'thumbnail': info['defaultThumbnailUrl'],\n            'duration': float_or_none(duration, 1000),\n            'timestamp': int_or_none(info.get('pubDate'), 1000) or None,\n            'uploader': info.get('billingCode'),\n            'chapters': chapters,\n        }\n\n    def _extract_theplatform_metadata(self, path, video_id):\n        info = self._download_theplatform_metadata(path, video_id)\n        return self._parse_theplatform_metadata(info)\n\n\nclass ThePlatformIE(ThePlatformBaseIE, AdobePassIE):\n    _VALID_URL = r, webpage)\n        if m:\n            return [m.group('url')]\n\n        \n        \n        matches = re.findall(\n            r'(?s)<(?:iframe|script)[^>]+src=([\"\\'])((?:https?:)?//player\\.theplatform\\.com/p/.+?)\\1', webpage)\n        if matches:\n            return [re.sub(r'\\s', '', list(zip(*matches))[1][0])]\n\n    @staticmethod\n    def _sign_url(url, sig_key, sig_secret, life=600, include_qs=False):\n        flags = '10' if include_qs else '00'\n        expiration_date = '%x' % (int(time.time()) + life)\n\n        def str_to_hex(str):\n            return binascii.b2a_hex(str.encode('ascii')).decode('ascii')\n\n        def hex_to_bytes(hex):\n            return binascii.a2b_hex(hex.encode('ascii'))\n\n        relative_path = re.match(r'https?://link\\.theplatform\\.com/s/([^?]+)', url).group(1)\n        clear_text = hex_to_bytes(flags + expiration_date + str_to_hex(relative_path))\n        checksum = hmac.new(sig_key.encode('ascii'), clear_text, hashlib.sha1).hexdigest()\n        sig = flags + expiration_date + checksum + str_to_hex(sig_secret)\n        return '%s&sig=%s' % (url, sig)\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        provider_id = mobj.group('provider_id')\n        video_id = mobj.group('id')\n\n        if not provider_id:\n            provider_id = 'dJ5BDC'\n\n        path = provider_id + '/'\n        if mobj.group('media'):\n            path += mobj.group('media')\n        path += video_id\n\n        qs_dict = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        if 'guid' in qs_dict:\n            webpage = self._download_webpage(url, video_id)\n            scripts = re.findall(r'<script[^>]+src=\"([^\"]+)\"', webpage)\n            feed_id = None\n            \n            \n            \n            for script in reversed(scripts):\n                feed_script = self._download_webpage(\n                    self._proto_relative_url(script, 'http:'),\n                    video_id, 'Downloading feed script')\n                feed_id = self._search_regex(\n                    r'defaultFeedId\\s*:\\s*\"([^\"]+)\"', feed_script,\n                    'default feed id', default=None)\n                if feed_id is not None:\n                    break\n            if feed_id is None:\n                raise ExtractorError('Unable to find feed id')\n            return self.url_result('http://feed.theplatform.com/f/%s/%s?byGuid=%s' % (\n                provider_id, feed_id, qs_dict['guid'][0]))\n\n        if smuggled_data.get('force_smil_url', False):\n            smil_url = url\n        \n        elif '/guid/' in url:\n            headers = {}\n            source_url = smuggled_data.get('source_url')\n            if source_url:\n                headers['Referer'] = source_url\n            request = sanitized_Request(url, headers=headers)\n            webpage = self._download_webpage(request, video_id)\n            smil_url = self._search_regex(\n                r'<link[^>]+href=([\"\\'])(?P<url>.+?)\\1[^>]+type=[\"\\']application/smil\\+xml',\n                webpage, 'smil url', group='url')\n            path = self._search_regex(\n                r'link\\.theplatform\\.com/s/((?:[^/?\n            smil_url += '?' if '?' not in smil_url else '&' + 'formats=m3u,mpeg4'\n        elif mobj.group('config'):\n            config_url = url + '&form=json'\n            config_url = config_url.replace('swf/', 'config/')\n            config_url = config_url.replace('onsite/', 'onsite/config/')\n            config = self._download_json(config_url, video_id, 'Downloading config')\n            if 'releaseUrl' in config:\n                release_url = config['releaseUrl']\n            else:\n                release_url = 'http://link.theplatform.com/s/%s?mbr=true' % path\n            smil_url = release_url + '&formats=MPEG4&manifest=f4m'\n        else:\n            smil_url = 'http://link.theplatform.com/s/%s?mbr=true' % path\n\n        sig = smuggled_data.get('sig')\n        if sig:\n            smil_url = self._sign_url(smil_url, sig['key'], sig['secret'])\n\n        formats, subtitles = self._extract_theplatform_smil(smil_url, video_id)\n        self._sort_formats(formats)\n\n        ret = self._extract_theplatform_metadata(path, video_id)\n        combined_subtitles = self._merge_subtitles(ret.get('subtitles', {}), subtitles)\n        ret.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': combined_subtitles,\n        })\n\n        return ret\n\n\nclass ThePlatformFeedIE(ThePlatformBaseIE):\n    _URL_TEMPLATE = '%s//feed.theplatform.com/f/%s/%s?form=json&%s'\n    _VALID_URL = r'https?://feed\\.theplatform\\.com/f/(?P<provider_id>[^/]+)/(?P<feed_id>[^?/]+)\\?(?:[^&]+&)*(?P<filter>by(?:Gui|I)d=(?P<id>[\\w-]+))'\n    _TESTS = [{\n        \n        'url': 'http://feed.theplatform.com/f/7wvmTC/msnbc_video-p-test?form=json&pretty=true&range=-40&byGuid=n_hardball_5biden_140207',\n        'md5': '6e32495b5073ab414471b615c5ded394',\n        'info_dict': {\n            'id': 'n_hardball_5biden_140207',\n            'ext': 'mp4',\n            'title': 'The Biden factor: will Joe run in 2016?',\n            'description': 'Could Vice President Joe Biden be preparing a 2016 campaign? Mark Halperin and Sam Stein weigh in.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20140208',\n            'timestamp': 1391824260,\n            'duration': 467.0,\n            'categories': ['MSNBC/Issues/Democrats', 'MSNBC/Issues/Elections/Election 2016'],\n            'uploader': 'NBCU-NEWS',\n        },\n    }]\n\n    def _extract_feed_info(self, provider_id, feed_id, filter_query, video_id, custom_fields=None, asset_types_query={}, account_id=None):\n        real_url = self._URL_TEMPLATE % (self.http_scheme(), provider_id, feed_id, filter_query)\n        entry = self._download_json(real_url, video_id)['entries'][0]\n        main_smil_url = 'http://link.theplatform.com/s/%s/media/guid/%d/%s' % (provider_id, account_id, entry['guid']) if account_id else None\n\n        formats = []\n        subtitles = {}\n        first_video_id = None\n        duration = None\n        asset_types = []\n        for item in entry['media$content']:\n            smil_url = item['plfile$url']\n            cur_video_id = ThePlatformIE._match_id(smil_url)\n            if first_video_id is None:\n                first_video_id = cur_video_id\n                duration = float_or_none(item.get('plfile$duration'))\n            for asset_type in item['plfile$assetTypes']:\n                if asset_type in asset_types:\n                    continue\n                asset_types.append(asset_type)\n                query = {\n                    'mbr': 'true',\n                    'formats': item['plfile$format'],\n                    'assetTypes': asset_type,\n                }\n                if asset_type in asset_types_query:\n                    query.update(asset_types_query[asset_type])\n                cur_formats, cur_subtitles = self._extract_theplatform_smil(update_url_query(\n                    main_smil_url or smil_url, query), video_id, 'Downloading SMIL data for %s' % asset_type)\n                formats.extend(cur_formats)\n                subtitles = self._merge_subtitles(subtitles, cur_subtitles)\n\n        self._sort_formats(formats)\n\n        thumbnails = [{\n            'url': thumbnail['plfile$url'],\n            'width': int_or_none(thumbnail.get('plfile$width')),\n            'height': int_or_none(thumbnail.get('plfile$height')),\n        } for thumbnail in entry.get('media$thumbnails', [])]\n\n        timestamp = int_or_none(entry.get('media$availableDate'), scale=1000)\n        categories = [item['media$name'] for item in entry.get('media$categories', [])]\n\n        ret = self._extract_theplatform_metadata('%s/%s' % (provider_id, first_video_id), video_id)\n        subtitles = self._merge_subtitles(subtitles, ret['subtitles'])\n        ret.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': subtitles,\n            'thumbnails': thumbnails,\n            'duration': duration,\n            'timestamp': timestamp,\n            'categories': categories,\n        })\n        if custom_fields:\n            ret.update(custom_fields(entry))\n\n        return ret\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('id')\n        provider_id = mobj.group('provider_id')\n        feed_id = mobj.group('feed_id')\n        filter_query = mobj.group('filter')\n\n        return self._extract_feed_info(provider_id, feed_id, filter_query, video_id)\n", "comments": "(?x)\n        (?:https?://(?:link|player)\\.theplatform\\.com/[sp]/(?P<provider_id>[^/]+)/\n           (?:(?:(?:[^/]+/)+select/)?(?P<media>media/(?:guid/\\d+/)?)?|(?P<config>(?:[^/\\?]+/(?:swf|config)|onsite)/select/))?\n         |theplatform:)(?P<id>[^/\\?&]+)'''\n\n    _TESTS = [{\n        # from http://www.metacafe.com/watch/cb-e9I_cZgTgIPd/blackberrys_big_bold_z30/\n        'url': 'http://link.theplatform.com/s/dJ5BDC/e9I_cZgTgIPd/meta.smil?format=smil&Tracking=true&mbr=true',\n        'info_dict': {\n            'id': 'e9I_cZgTgIPd',\n            'ext': 'flv',\n            'title': 'Blackberry\\'s big, bold Z30',\n            'description': 'The Z30 is Blackberry\\'s biggest, baddest mobile messaging device yet.',\n            'duration': 247,\n            'timestamp': 1383239700,\n            'upload_date': '20131031',\n            'uploader': 'CBSI-NEW',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n        'skip': '404 Not Found',\n    }, {\n        # from http://www.cnet.com/videos/tesla-model-s-a-second-step-towards-a-cleaner-motoring-future/\n        'url': 'http://link.theplatform.com/s/kYEXFC/22d_qsQ6MIRT',\n        'info_dict': {\n            'id': '22d_qsQ6MIRT',\n            'ext': 'flv',\n            'description': 'md5:ac330c9258c04f9d7512cf26b9595409',\n            'title': 'Tesla Model S: A second step towards a cleaner motoring future',\n            'timestamp': 1426176191,\n            'upload_date': '20150312',\n            'uploader': 'CBSI-NEW',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        }\n    }, {\n        'url': 'https://player.theplatform.com/p/D6x-PC/pulse_preview/embed/select/media/yMBg9E8KFxZD',\n        'info_dict': {\n            'id': 'yMBg9E8KFxZD',\n            'ext': 'mp4',\n            'description': 'md5:644ad9188d655b742f942bf2e06b002d',\n            'title': 'HIGHLIGHTS: USA bag first ever series Cup win',\n            'uploader': 'EGSM',\n        }\n    }, {\n        'url': 'http://player.theplatform.com/p/NnzsPC/widget/select/media/4Y0TlYUr_ZT7',\n        'only_matching': True,\n    }, {\n        'url': 'http://player.theplatform.com/p/2E2eJC/nbcNewsOffsite?guid=tdy_or_siri_150701',\n        'md5': 'fb96bb3d85118930a5b055783a3bd992',\n        'info_dict': {\n            'id': 'tdy_or_siri_150701',\n            'ext': 'mp4',\n            'title': 'iPhone Siri\u2019s sassy response to a math question has people talking',\n            'description': 'md5:a565d1deadd5086f3331d57298ec6333',\n            'duration': 83.0,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1435752600,\n            'upload_date': '20150701',\n            'uploader': 'NBCU-NEWS',\n        },\n    }, {\n        # From http://www.nbc.com/the-blacklist/video/sir-crispin-crandall/2928790?onid=137781#vc137781=1\n        # geo-restricted (US), HLS encrypted with AES-128\n        'url': 'http://player.theplatform.com/p/NnzsPC/onsite_universal/select/media/guid/2410887629/2928790?fwsitesection=nbc_the_blacklist_video_library&autoPlay=true&carouselID=137781',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def _extract_urls(cls, webpage):\n        m = re.search(\n            r'''(?x)\n                    <meta\\s+\n                        property=([\"'])(?:og:video(?::(?:secure_)?url)?|twitter:player)\\1\\s+\n                        content=([\"'])(?P<url>https?://player\\.theplatform\\.com/p/.+?)\\2\n            \n \n# coding: utf-8\n# the parameters are from syfy.com, other sites may use others,\n# they also work for nbc.com\n# Are whitesapces ignored in URLs?\n# https://github.com/rg3/youtube-dl/issues/12044\n# feed id usually locates in the last script.\n# Seems there's no pattern for the interested script filename, so\n# I try one by one\n# Explicitly specified SMIL (see https://github.com/rg3/youtube-dl/issues/7385)\n#&]+/)+[^/?#&]+)', smil_url, 'path')\n# From http://player.theplatform.com/p/7wvmTC/MSNBCEmbeddedOffSite?guid=n_hardball_5biden_140207\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport time\nimport hmac\nimport binascii\nimport hashlib\n\n\nfrom .once import OnceIE\nfrom .adobepass import AdobePassIE\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    sanitized_Request,\n    unsmuggle_url,\n    update_url_query,\n    xpath_with_ns,\n    mimetype2ext,\n    find_xpath_attr,\n)\n\ndefault_ns = 'http://www.w3.org/2005/SMIL21/Language'\n_x = lambda p: xpath_with_ns(p, {'smil': default_ns})\n\n\nclass ThePlatformBaseIE(OnceIE):\n    def _extract_theplatform_smil(self, smil_url, video_id, note='Downloading SMIL data'):\n        meta = self._download_xml(\n            smil_url, video_id, note=note, query={'format': 'SMIL'},\n            headers=self.geo_verification_headers())\n        error_element = find_xpath_attr(meta, _x('.//smil:ref'), 'src')\n        if error_element is not None and error_element.attrib['src'].startswith(\n                'http://link.theplatform.com/s/errorFiles/Unavailable.'):\n            raise ExtractorError(error_element.attrib['abstract'], expected=True)\n\n        smil_formats = self._parse_smil_formats(\n            meta, smil_url, video_id, namespace=default_ns,\n            # the parameters are from syfy.com, other sites may use others,\n            # they also work for nbc.com\n            f4m_params={'g': 'UXWGVKRWHFSP', 'hdcore': '3.0.3'},\n            transform_rtmp_url=lambda streamer, src: (streamer, 'mp4:' + src))\n\n        formats = []\n        for _format in smil_formats:\n            if OnceIE.suitable(_format['url']):\n                formats.extend(self._extract_once_formats(_format['url']))\n            else:\n                media_url = _format['url']\n                if determine_ext(media_url) == 'm3u8':\n                    hdnea2 = self._get_cookies(media_url).get('hdnea2')\n                    if hdnea2:\n                        _format['url'] = update_url_query(media_url, {'hdnea3': hdnea2.value})\n\n                formats.append(_format)\n\n        subtitles = self._parse_smil_subtitles(meta, default_ns)\n\n        return formats, subtitles\n\n    def _download_theplatform_metadata(self, path, video_id):\n        info_url = 'http://link.theplatform.com/s/%s?format=preview' % path\n        return self._download_json(info_url, video_id)\n\n    def _parse_theplatform_metadata(self, info):\n        subtitles = {}\n        captions = info.get('captions')\n        if isinstance(captions, list):\n            for caption in captions:\n                lang, src, mime = caption.get('lang', 'en'), caption.get('src'), caption.get('type')\n                subtitles.setdefault(lang, []).append({\n                    'ext': mimetype2ext(mime),\n                    'url': src,\n                })\n\n        duration = info.get('duration')\n        tp_chapters = info.get('chapters', [])\n        chapters = []\n        if tp_chapters:\n            def _add_chapter(start_time, end_time):\n                start_time = float_or_none(start_time, 1000)\n                end_time = float_or_none(end_time, 1000)\n                if start_time is None or end_time is None:\n                    return\n                chapters.append({\n                    'start_time': start_time,\n                    'end_time': end_time,\n                })\n\n            for chapter in tp_chapters[:-1]:\n                _add_chapter(chapter.get('startTime'), chapter.get('endTime'))\n            _add_chapter(tp_chapters[-1].get('startTime'), tp_chapters[-1].get('endTime') or duration)\n\n        return {\n            'title': info['title'],\n            'subtitles': subtitles,\n            'description': info['description'],\n            'thumbnail': info['defaultThumbnailUrl'],\n            'duration': float_or_none(duration, 1000),\n            'timestamp': int_or_none(info.get('pubDate'), 1000) or None,\n            'uploader': info.get('billingCode'),\n            'chapters': chapters,\n        }\n\n    def _extract_theplatform_metadata(self, path, video_id):\n        info = self._download_theplatform_metadata(path, video_id)\n        return self._parse_theplatform_metadata(info)\n\n\nclass ThePlatformIE(ThePlatformBaseIE, AdobePassIE):\n    _VALID_URL = r'''(?x)\n        (?:https?://(?:link|player)\\.theplatform\\.com/[sp]/(?P<provider_id>[^/]+)/\n           (?:(?:(?:[^/]+/)+select/)?(?P<media>media/(?:guid/\\d+/)?)?|(?P<config>(?:[^/\\?]+/(?:swf|config)|onsite)/select/))?\n         |theplatform:)(?P<id>[^/\\?&]+)'''\n\n    _TESTS = [{\n        # from http://www.metacafe.com/watch/cb-e9I_cZgTgIPd/blackberrys_big_bold_z30/\n        'url': 'http://link.theplatform.com/s/dJ5BDC/e9I_cZgTgIPd/meta.smil?format=smil&Tracking=true&mbr=true',\n        'info_dict': {\n            'id': 'e9I_cZgTgIPd',\n            'ext': 'flv',\n            'title': 'Blackberry\\'s big, bold Z30',\n            'description': 'The Z30 is Blackberry\\'s biggest, baddest mobile messaging device yet.',\n            'duration': 247,\n            'timestamp': 1383239700,\n            'upload_date': '20131031',\n            'uploader': 'CBSI-NEW',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n        'skip': '404 Not Found',\n    }, {\n        # from http://www.cnet.com/videos/tesla-model-s-a-second-step-towards-a-cleaner-motoring-future/\n        'url': 'http://link.theplatform.com/s/kYEXFC/22d_qsQ6MIRT',\n        'info_dict': {\n            'id': '22d_qsQ6MIRT',\n            'ext': 'flv',\n            'description': 'md5:ac330c9258c04f9d7512cf26b9595409',\n            'title': 'Tesla Model S: A second step towards a cleaner motoring future',\n            'timestamp': 1426176191,\n            'upload_date': '20150312',\n            'uploader': 'CBSI-NEW',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        }\n    }, {\n        'url': 'https://player.theplatform.com/p/D6x-PC/pulse_preview/embed/select/media/yMBg9E8KFxZD',\n        'info_dict': {\n            'id': 'yMBg9E8KFxZD',\n            'ext': 'mp4',\n            'description': 'md5:644ad9188d655b742f942bf2e06b002d',\n            'title': 'HIGHLIGHTS: USA bag first ever series Cup win',\n            'uploader': 'EGSM',\n        }\n    }, {\n        'url': 'http://player.theplatform.com/p/NnzsPC/widget/select/media/4Y0TlYUr_ZT7',\n        'only_matching': True,\n    }, {\n        'url': 'http://player.theplatform.com/p/2E2eJC/nbcNewsOffsite?guid=tdy_or_siri_150701',\n        'md5': 'fb96bb3d85118930a5b055783a3bd992',\n        'info_dict': {\n            'id': 'tdy_or_siri_150701',\n            'ext': 'mp4',\n            'title': 'iPhone Siri\u2019s sassy response to a math question has people talking',\n            'description': 'md5:a565d1deadd5086f3331d57298ec6333',\n            'duration': 83.0,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'timestamp': 1435752600,\n            'upload_date': '20150701',\n            'uploader': 'NBCU-NEWS',\n        },\n    }, {\n        # From http://www.nbc.com/the-blacklist/video/sir-crispin-crandall/2928790?onid=137781#vc137781=1\n        # geo-restricted (US), HLS encrypted with AES-128\n        'url': 'http://player.theplatform.com/p/NnzsPC/onsite_universal/select/media/guid/2410887629/2928790?fwsitesection=nbc_the_blacklist_video_library&autoPlay=true&carouselID=137781',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def _extract_urls(cls, webpage):\n        m = re.search(\n            r'''(?x)\n                    <meta\\s+\n                        property=([\"'])(?:og:video(?::(?:secure_)?url)?|twitter:player)\\1\\s+\n                        content=([\"'])(?P<url>https?://player\\.theplatform\\.com/p/.+?)\\2\n            ''', webpage)\n        if m:\n            return [m.group('url')]\n\n        # Are whitesapces ignored in URLs?\n        # https://github.com/rg3/youtube-dl/issues/12044\n        matches = re.findall(\n            r'(?s)<(?:iframe|script)[^>]+src=([\"\\'])((?:https?:)?//player\\.theplatform\\.com/p/.+?)\\1', webpage)\n        if matches:\n            return [re.sub(r'\\s', '', list(zip(*matches))[1][0])]\n\n    @staticmethod\n    def _sign_url(url, sig_key, sig_secret, life=600, include_qs=False):\n        flags = '10' if include_qs else '00'\n        expiration_date = '%x' % (int(time.time()) + life)\n\n        def str_to_hex(str):\n            return binascii.b2a_hex(str.encode('ascii')).decode('ascii')\n\n        def hex_to_bytes(hex):\n            return binascii.a2b_hex(hex.encode('ascii'))\n\n        relative_path = re.match(r'https?://link\\.theplatform\\.com/s/([^?]+)', url).group(1)\n        clear_text = hex_to_bytes(flags + expiration_date + str_to_hex(relative_path))\n        checksum = hmac.new(sig_key.encode('ascii'), clear_text, hashlib.sha1).hexdigest()\n        sig = flags + expiration_date + checksum + str_to_hex(sig_secret)\n        return '%s&sig=%s' % (url, sig)\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        provider_id = mobj.group('provider_id')\n        video_id = mobj.group('id')\n\n        if not provider_id:\n            provider_id = 'dJ5BDC'\n\n        path = provider_id + '/'\n        if mobj.group('media'):\n            path += mobj.group('media')\n        path += video_id\n\n        qs_dict = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        if 'guid' in qs_dict:\n            webpage = self._download_webpage(url, video_id)\n            scripts = re.findall(r'<script[^>]+src=\"([^\"]+)\"', webpage)\n            feed_id = None\n            # feed id usually locates in the last script.\n            # Seems there's no pattern for the interested script filename, so\n            # I try one by one\n            for script in reversed(scripts):\n                feed_script = self._download_webpage(\n                    self._proto_relative_url(script, 'http:'),\n                    video_id, 'Downloading feed script')\n                feed_id = self._search_regex(\n                    r'defaultFeedId\\s*:\\s*\"([^\"]+)\"', feed_script,\n                    'default feed id', default=None)\n                if feed_id is not None:\n                    break\n            if feed_id is None:\n                raise ExtractorError('Unable to find feed id')\n            return self.url_result('http://feed.theplatform.com/f/%s/%s?byGuid=%s' % (\n                provider_id, feed_id, qs_dict['guid'][0]))\n\n        if smuggled_data.get('force_smil_url', False):\n            smil_url = url\n        # Explicitly specified SMIL (see https://github.com/rg3/youtube-dl/issues/7385)\n        elif '/guid/' in url:\n            headers = {}\n            source_url = smuggled_data.get('source_url')\n            if source_url:\n                headers['Referer'] = source_url\n            request = sanitized_Request(url, headers=headers)\n            webpage = self._download_webpage(request, video_id)\n            smil_url = self._search_regex(\n                r'<link[^>]+href=([\"\\'])(?P<url>.+?)\\1[^>]+type=[\"\\']application/smil\\+xml',\n                webpage, 'smil url', group='url')\n            path = self._search_regex(\n                r'link\\.theplatform\\.com/s/((?:[^/?#&]+/)+[^/?#&]+)', smil_url, 'path')\n            smil_url += '?' if '?' not in smil_url else '&' + 'formats=m3u,mpeg4'\n        elif mobj.group('config'):\n            config_url = url + '&form=json'\n            config_url = config_url.replace('swf/', 'config/')\n            config_url = config_url.replace('onsite/', 'onsite/config/')\n            config = self._download_json(config_url, video_id, 'Downloading config')\n            if 'releaseUrl' in config:\n                release_url = config['releaseUrl']\n            else:\n                release_url = 'http://link.theplatform.com/s/%s?mbr=true' % path\n            smil_url = release_url + '&formats=MPEG4&manifest=f4m'\n        else:\n            smil_url = 'http://link.theplatform.com/s/%s?mbr=true' % path\n\n        sig = smuggled_data.get('sig')\n        if sig:\n            smil_url = self._sign_url(smil_url, sig['key'], sig['secret'])\n\n        formats, subtitles = self._extract_theplatform_smil(smil_url, video_id)\n        self._sort_formats(formats)\n\n        ret = self._extract_theplatform_metadata(path, video_id)\n        combined_subtitles = self._merge_subtitles(ret.get('subtitles', {}), subtitles)\n        ret.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': combined_subtitles,\n        })\n\n        return ret\n\n\nclass ThePlatformFeedIE(ThePlatformBaseIE):\n    _URL_TEMPLATE = '%s//feed.theplatform.com/f/%s/%s?form=json&%s'\n    _VALID_URL = r'https?://feed\\.theplatform\\.com/f/(?P<provider_id>[^/]+)/(?P<feed_id>[^?/]+)\\?(?:[^&]+&)*(?P<filter>by(?:Gui|I)d=(?P<id>[\\w-]+))'\n    _TESTS = [{\n        # From http://player.theplatform.com/p/7wvmTC/MSNBCEmbeddedOffSite?guid=n_hardball_5biden_140207\n        'url': 'http://feed.theplatform.com/f/7wvmTC/msnbc_video-p-test?form=json&pretty=true&range=-40&byGuid=n_hardball_5biden_140207',\n        'md5': '6e32495b5073ab414471b615c5ded394',\n        'info_dict': {\n            'id': 'n_hardball_5biden_140207',\n            'ext': 'mp4',\n            'title': 'The Biden factor: will Joe run in 2016?',\n            'description': 'Could Vice President Joe Biden be preparing a 2016 campaign? Mark Halperin and Sam Stein weigh in.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20140208',\n            'timestamp': 1391824260,\n            'duration': 467.0,\n            'categories': ['MSNBC/Issues/Democrats', 'MSNBC/Issues/Elections/Election 2016'],\n            'uploader': 'NBCU-NEWS',\n        },\n    }]\n\n    def _extract_feed_info(self, provider_id, feed_id, filter_query, video_id, custom_fields=None, asset_types_query={}, account_id=None):\n        real_url = self._URL_TEMPLATE % (self.http_scheme(), provider_id, feed_id, filter_query)\n        entry = self._download_json(real_url, video_id)['entries'][0]\n        main_smil_url = 'http://link.theplatform.com/s/%s/media/guid/%d/%s' % (provider_id, account_id, entry['guid']) if account_id else None\n\n        formats = []\n        subtitles = {}\n        first_video_id = None\n        duration = None\n        asset_types = []\n        for item in entry['media$content']:\n            smil_url = item['plfile$url']\n            cur_video_id = ThePlatformIE._match_id(smil_url)\n            if first_video_id is None:\n                first_video_id = cur_video_id\n                duration = float_or_none(item.get('plfile$duration'))\n            for asset_type in item['plfile$assetTypes']:\n                if asset_type in asset_types:\n                    continue\n                asset_types.append(asset_type)\n                query = {\n                    'mbr': 'true',\n                    'formats': item['plfile$format'],\n                    'assetTypes': asset_type,\n                }\n                if asset_type in asset_types_query:\n                    query.update(asset_types_query[asset_type])\n                cur_formats, cur_subtitles = self._extract_theplatform_smil(update_url_query(\n                    main_smil_url or smil_url, query), video_id, 'Downloading SMIL data for %s' % asset_type)\n                formats.extend(cur_formats)\n                subtitles = self._merge_subtitles(subtitles, cur_subtitles)\n\n        self._sort_formats(formats)\n\n        thumbnails = [{\n            'url': thumbnail['plfile$url'],\n            'width': int_or_none(thumbnail.get('plfile$width')),\n            'height': int_or_none(thumbnail.get('plfile$height')),\n        } for thumbnail in entry.get('media$thumbnails', [])]\n\n        timestamp = int_or_none(entry.get('media$availableDate'), scale=1000)\n        categories = [item['media$name'] for item in entry.get('media$categories', [])]\n\n        ret = self._extract_theplatform_metadata('%s/%s' % (provider_id, first_video_id), video_id)\n        subtitles = self._merge_subtitles(subtitles, ret['subtitles'])\n        ret.update({\n            'id': video_id,\n            'formats': formats,\n            'subtitles': subtitles,\n            'thumbnails': thumbnails,\n            'duration': duration,\n            'timestamp': timestamp,\n            'categories': categories,\n        })\n        if custom_fields:\n            ret.update(custom_fields(entry))\n\n        return ret\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('id')\n        provider_id = mobj.group('provider_id')\n        feed_id = mobj.group('feed_id')\n        filter_query = mobj.group('filter')\n\n        return self._extract_feed_info(provider_id, feed_id, filter_query, video_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "theplatform.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/theplatform.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}