{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport random\nimport unittest\n\nfrom odoo.tools import topological_sort\n\n\ndef sample(population):\n    return random.sample(\n        population,\n            random.randint(0, min(len(population), 5)))\n\n\nclass TestModulesLoading(unittest.TestCase):\n    def setUp(self):\n        self.mods = [str(i) for i in range(1000)]\n\n    def test_topological_sort(self):\n        random.shuffle(self.mods)\n        modules = [\n            (k, sample(self.mods[:i]))\n            for i, k in enumerate(self.mods)]\n        random.shuffle(modules)\n        ms = dict(modules)\n\n        seen = set()\n        sorted_modules = topological_sort(ms)\n        for module in sorted_modules:\n            deps = ms[module]\n            self.assertGreaterEqual(\n                seen, set(deps),\n                        'Module %s (index %d), ' \\\n                        'missing dependencies %s from loaded modules %s' % (\n                    module, sorted_modules.index(module), deps, seen\n                ))\n            seen.add(module)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport random\nimport unittest\n\nfrom odoo.tools import topological_sort\n\n\ndef sample(population):\n    return random.sample(\n        population,\n            random.randint(0, min(len(population), 5)))\n\n\nclass TestModulesLoading(unittest.TestCase):\n    def setUp(self):\n        self.mods = [str(i) for i in range(1000)]\n\n    def test_topological_sort(self):\n        random.shuffle(self.mods)\n        modules = [\n            (k, sample(self.mods[:i]))\n            for i, k in enumerate(self.mods)]\n        random.shuffle(modules)\n        ms = dict(modules)\n\n        seen = set()\n        sorted_modules = topological_sort(ms)\n        for module in sorted_modules:\n            deps = ms[module]\n            self.assertGreaterEqual(\n                seen, set(deps),\n                        'Module %s (index %d), ' \\\n                        'missing dependencies %s from loaded modules %s' % (\n                    module, sorted_modules.index(module), deps, seen\n                ))\n            seen.add(module)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_serving_base.py", "id": "ca38933792a482b12b6129192986fedf", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/web/tests/test_serving_base.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}