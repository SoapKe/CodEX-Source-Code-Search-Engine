{"author": "odoo", "code": "# -*- coding:utf-8 -*-\n\n\nfrom datetime import date\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\n\nclass ReportHrSalaryEmployeeBymonth(models.AbstractModel):\n    _name = 'report.l10n_in_hr_payroll.report_hrsalarybymonth'\n\n    def get_periods(self, form):\n        \n        self.mnths = []\n        first_year = int(form['start_date'][0:4])\n        last_year = int(form['end_date'][0:4])\n\n        first_month = int(form['start_date'][5:7])\n        last_month = int(form['end_date'][5:7])\n        no_months = (last_year - first_year) * 12 + last_month - first_month + 1\n        current_month = first_month\n        current_year = first_year\n\n\n        mnth_name = []\n        total_mnths = []\n        for count in range(0, no_months):\n            total_mnths.append(0)\n            m = date(current_year, current_month, 1).strftime('%b')\n            mnth_name.append(m)\n            self.mnths.append(str(current_month) + '-' + str(current_year))\n            if current_month == 12:\n                current_month = 0\n                current_year = last_year\n            current_month = current_month + 1\n        return mnth_name, self.mnths, total_mnths\n\n    def get_salary(self, form, emp_id, emp_salary, total_mnths, mnths):\n        category_id = form.get('category_id', [])\n        category_id = category_id and category_id[0] or False\n        self.mnths = mnths\n        self.env.cr.execute(\"\"\"\n                            select to_char(date_to,'mm-yyyy') as to_date ,sum(pl.total)\n                            from hr_payslip_line as pl\n                            left join hr_payslip as p on pl.slip_id = p.id\n                            left join hr_employee as emp on emp.id = p.employee_id\n                            left join resource_resource as r on r.id = emp.resource_id\n                            where p.state = 'done' and p.employee_id = %s and pl.category_id = %s\n                            group by r.name, p.date_to,emp.id\"\"\",\n                            (emp_id, category_id,))\n        sal = self.env.cr.fetchall()\n        salary = dict(sal)\n        total = 0.0\n        cnt = 0\n        for month in self.mnths:\n            if len(month) != 7:\n                month = '0' + str(month)\n            if month in salary and salary[month]:\n                emp_salary.append(salary[month])\n                total += salary[month]\n                total_mnths[cnt] = total_mnths[cnt] + salary[month]\n            else:\n                emp_salary.append(0.00)\n            cnt = cnt + 1\n        return emp_salary, total, total_mnths\n\n    def get_employee(self, form, mnths, total_mnths):\n        emp_salary = []\n        salary_list = []\n        self.mnths_total = []\n        emp_ids = form.get('employee_ids', [])\n        employees = self.env['hr.employee'].browse(emp_ids)\n\n        for emp_id in employees:\n            emp_salary.append(emp_id.name)\n            total = 0.0\n            emp_salary, total, total_mnths = self.get_salary(form, emp_id.id, emp_salary, total_mnths, mnths)\n            emp_salary.append(total)\n            salary_list.append(emp_salary)\n            emp_salary = []\n        self.mnths_total.append(total_mnths)\n        return salary_list\n\n    def get_months_tol(self):\n        return self.mnths_total\n\n    def get_total(self, mnths_total):\n        self.total = 0.0\n        for item in mnths_total:\n            for count in range(1, len(item)):\n                self.total += item[count]\n        return self.total\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        if not data.get('form') or not self.env.context.get('active_model') or not self.env.context.get('active_id'):\n            raise UserError(_(\"Form content is missing, this report cannot be printed.\"))\n\n        model = self.env.context.get('active_model')\n        docs = self.env[model].browse(self.env.context.get('active_id'))\n        get_periods, months, total_mnths = self.get_periods(data['form'])\n        get_employee = self.get_employee(data['form'], months, total_mnths)\n        get_months_tol = self.get_months_tol()\n        get_total = self.get_total(get_months_tol)\n        return {\n            'doc_ids': docids,\n            'doc_model': model,\n            'data': data,\n            'docs': docs,\n            'get_periods': get_periods,\n            'get_employee': get_employee,\n            'get_months_tol': get_months_tol,\n            'get_total': get_total,\n            'month_len': len(total_mnths) + 1\n        }\n", "comments": "                                select char(date  mm yyyy ) date  sum(pl total)                             hr payslip line pl                             left join hr payslip p pl slip id   p id                             left join hr employee emp emp id   p employee id                             left join resource resource r r id   emp resource id                             p state    done  p employee id    pl category id                                group r name  p date emp id           coding utf 8        part odoo  see license file full copyright licensing details           get start year month date end year month date          get name months integer ", "content": "# -*- coding:utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import date\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\n\nclass ReportHrSalaryEmployeeBymonth(models.AbstractModel):\n    _name = 'report.l10n_in_hr_payroll.report_hrsalarybymonth'\n\n    def get_periods(self, form):\n        #       Get start year-month-date and end year-month-date\n        self.mnths = []\n        first_year = int(form['start_date'][0:4])\n        last_year = int(form['end_date'][0:4])\n\n        first_month = int(form['start_date'][5:7])\n        last_month = int(form['end_date'][5:7])\n        no_months = (last_year - first_year) * 12 + last_month - first_month + 1\n        current_month = first_month\n        current_year = first_year\n\n#       Get name of the months from integer\n        mnth_name = []\n        total_mnths = []\n        for count in range(0, no_months):\n            total_mnths.append(0)\n            m = date(current_year, current_month, 1).strftime('%b')\n            mnth_name.append(m)\n            self.mnths.append(str(current_month) + '-' + str(current_year))\n            if current_month == 12:\n                current_month = 0\n                current_year = last_year\n            current_month = current_month + 1\n        return mnth_name, self.mnths, total_mnths\n\n    def get_salary(self, form, emp_id, emp_salary, total_mnths, mnths):\n        category_id = form.get('category_id', [])\n        category_id = category_id and category_id[0] or False\n        self.mnths = mnths\n        self.env.cr.execute(\"\"\"\n                            select to_char(date_to,'mm-yyyy') as to_date ,sum(pl.total)\n                            from hr_payslip_line as pl\n                            left join hr_payslip as p on pl.slip_id = p.id\n                            left join hr_employee as emp on emp.id = p.employee_id\n                            left join resource_resource as r on r.id = emp.resource_id\n                            where p.state = 'done' and p.employee_id = %s and pl.category_id = %s\n                            group by r.name, p.date_to,emp.id\"\"\",\n                            (emp_id, category_id,))\n        sal = self.env.cr.fetchall()\n        salary = dict(sal)\n        total = 0.0\n        cnt = 0\n        for month in self.mnths:\n            if len(month) != 7:\n                month = '0' + str(month)\n            if month in salary and salary[month]:\n                emp_salary.append(salary[month])\n                total += salary[month]\n                total_mnths[cnt] = total_mnths[cnt] + salary[month]\n            else:\n                emp_salary.append(0.00)\n            cnt = cnt + 1\n        return emp_salary, total, total_mnths\n\n    def get_employee(self, form, mnths, total_mnths):\n        emp_salary = []\n        salary_list = []\n        self.mnths_total = []\n        emp_ids = form.get('employee_ids', [])\n        employees = self.env['hr.employee'].browse(emp_ids)\n\n        for emp_id in employees:\n            emp_salary.append(emp_id.name)\n            total = 0.0\n            emp_salary, total, total_mnths = self.get_salary(form, emp_id.id, emp_salary, total_mnths, mnths)\n            emp_salary.append(total)\n            salary_list.append(emp_salary)\n            emp_salary = []\n        self.mnths_total.append(total_mnths)\n        return salary_list\n\n    def get_months_tol(self):\n        return self.mnths_total\n\n    def get_total(self, mnths_total):\n        self.total = 0.0\n        for item in mnths_total:\n            for count in range(1, len(item)):\n                self.total += item[count]\n        return self.total\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        if not data.get('form') or not self.env.context.get('active_model') or not self.env.context.get('active_id'):\n            raise UserError(_(\"Form content is missing, this report cannot be printed.\"))\n\n        model = self.env.context.get('active_model')\n        docs = self.env[model].browse(self.env.context.get('active_id'))\n        get_periods, months, total_mnths = self.get_periods(data['form'])\n        get_employee = self.get_employee(data['form'], months, total_mnths)\n        get_months_tol = self.get_months_tol()\n        get_total = self.get_total(get_months_tol)\n        return {\n            'doc_ids': docids,\n            'doc_model': model,\n            'data': data,\n            'docs': docs,\n            'get_periods': get_periods,\n            'get_employee': get_employee,\n            'get_months_tol': get_months_tol,\n            'get_total': get_total,\n            'month_len': len(total_mnths) + 1\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "report_hr_salary_employee_bymonth.py", "id": "5a1cb5a666d35fe690f26fbcb90012b5", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/l10n_in_hr_payroll/report/report_hr_salary_employee_bymonth.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}