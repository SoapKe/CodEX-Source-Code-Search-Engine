{"author": "donnemartin", "code": " -*- coding: utf-8 -*-\n\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\n\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nimport mock\nfrom tests.compat import unittest\n\nfrom prompt_toolkit.document import Document\n\nfrom gitsome.completer import CompleterGitsome\n\n\nclass CompleterTest(unittest.TestCase):\n\n    def setUp(self):\n        self.completer = CompleterGitsome()\n        self.completer_event = self.create_completer_event()\n\n    def create_completer_event(self):\n        return mock.Mock()\n\n    def _get_completions(self, command):\n        position = len(command)\n        result = set(self.completer.get_completions(\n            Document(text=command, cursor_position=position),\n            self.completer_event))\n        return result\n\n    def verify_completions(self, commands, expected):\n        result = set()\n        for command in commands:\n             Call the AWS CLI autocompleter\n            result.update(self._get_completions(command))\n        result_texts = []\n        for item in result:\n             Each result item is a Completion object,\n             we are only interested in the text portion\n            result_texts.append(item.text)\n        assert result_texts\n        if len(expected) == 1:\n            assert expected[0] in result_texts\n        else:\n            for item in expected:\n                assert item in result_texts\n\n    def test_blank(self):\n        text = ''\n        expected = set([])\n        result = self._get_completions(text)\n        assert result == expected\n\n    def test_no_completions(self):\n        text = 'foo'\n        expected = set([])\n        result = self._get_completions(text)\n        assert result == expected\n\n    def test_command(self):\n        text = ['g']\n        expected = ['gh']\n        self.verify_completions(text, expected)\n\n    def test_subcommand(self):\n        self.verify_completions(['gh c'], ['configure', 'create-comment',\n                                           'create-issue', 'create-repo'])\n        self.verify_completions(['gh e'], ['emails', 'emojis'])\n        self.verify_completions(['gh f'], ['feed', 'followers', 'following'])\n        self.verify_completions(['gh g'], ['gitignore-template',\n                                           'gitignore-templates'])\n        self.verify_completions(['gh i'], ['issue', 'issues'])\n        self.verify_completions(['gh l'], ['license', 'licenses'])\n        self.verify_completions(['gh m'], ['me'])\n        self.verify_completions(['gh n'], ['notifications'])\n        self.verify_completions(['gh o'], ['octo'])\n        self.verify_completions(['gh p'], ['pull-request', 'pull-requests'])\n        self.verify_completions(['gh r'], ['rate-limit', 'repo', 'repos'])\n        self.verify_completions(['gh s'], ['search-issues', 'search-repos',\n                                           'starred'])\n        self.verify_completions(['gh t'], ['trending'])\n        self.verify_completions(['gh u'], ['user'])\n        self.verify_completions(['gh v'], ['view'])\n\n    def test_args(self):\n        self.verify_completions(['gh octo '], ['\"Keep it logically awesome\"'])\n\n    def test_no_args_with_options(self):\n        self.verify_completions(['gh octo '], ['\"Keep it logically awesome\"'])\n\n    def test_options(self):\n        self.verify_completions(['gh emojis '],\n                                ['-p', '--pager'])\n\n    def test_multiple_options(self):\n        self.verify_completions(['gh feed -pr --pa'], ['--pager'])\n        self.verify_completions(['gh feed foo -pr --pa'], ['--pager'])\n\n    def test_fuzzy(self):\n        self.completer.fuzzy_match = True\n        self.verify_completions(['gh ot'], ['octo'])\n\n    def test_build_completions_with_meta(self):\n        result = self.completer.build_completions_with_meta('git ad',\n                                                            'ad',\n                                                            ['add'])\n        assert result[0].display_meta == 'Add file contents to the index.'\n        result = self.completer.build_completions_with_meta('git-alia',\n                                                            'git-alia',\n                                                            ['git-alias'])\n        assert result[0].display_meta == 'Define, search and show aliases.'\n", "comments": "      coding  utf 8        copyright 2015 donne martin  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   www apache org licenses license 2 0        license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     call aws cli autocompleter    each result item completion object     interested text portion ", "content": "# -*- coding: utf-8 -*-\n\n# Copyright 2015 Donne Martin. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nimport mock\nfrom tests.compat import unittest\n\nfrom prompt_toolkit.document import Document\n\nfrom gitsome.completer import CompleterGitsome\n\n\nclass CompleterTest(unittest.TestCase):\n\n    def setUp(self):\n        self.completer = CompleterGitsome()\n        self.completer_event = self.create_completer_event()\n\n    def create_completer_event(self):\n        return mock.Mock()\n\n    def _get_completions(self, command):\n        position = len(command)\n        result = set(self.completer.get_completions(\n            Document(text=command, cursor_position=position),\n            self.completer_event))\n        return result\n\n    def verify_completions(self, commands, expected):\n        result = set()\n        for command in commands:\n            # Call the AWS CLI autocompleter\n            result.update(self._get_completions(command))\n        result_texts = []\n        for item in result:\n            # Each result item is a Completion object,\n            # we are only interested in the text portion\n            result_texts.append(item.text)\n        assert result_texts\n        if len(expected) == 1:\n            assert expected[0] in result_texts\n        else:\n            for item in expected:\n                assert item in result_texts\n\n    def test_blank(self):\n        text = ''\n        expected = set([])\n        result = self._get_completions(text)\n        assert result == expected\n\n    def test_no_completions(self):\n        text = 'foo'\n        expected = set([])\n        result = self._get_completions(text)\n        assert result == expected\n\n    def test_command(self):\n        text = ['g']\n        expected = ['gh']\n        self.verify_completions(text, expected)\n\n    def test_subcommand(self):\n        self.verify_completions(['gh c'], ['configure', 'create-comment',\n                                           'create-issue', 'create-repo'])\n        self.verify_completions(['gh e'], ['emails', 'emojis'])\n        self.verify_completions(['gh f'], ['feed', 'followers', 'following'])\n        self.verify_completions(['gh g'], ['gitignore-template',\n                                           'gitignore-templates'])\n        self.verify_completions(['gh i'], ['issue', 'issues'])\n        self.verify_completions(['gh l'], ['license', 'licenses'])\n        self.verify_completions(['gh m'], ['me'])\n        self.verify_completions(['gh n'], ['notifications'])\n        self.verify_completions(['gh o'], ['octo'])\n        self.verify_completions(['gh p'], ['pull-request', 'pull-requests'])\n        self.verify_completions(['gh r'], ['rate-limit', 'repo', 'repos'])\n        self.verify_completions(['gh s'], ['search-issues', 'search-repos',\n                                           'starred'])\n        self.verify_completions(['gh t'], ['trending'])\n        self.verify_completions(['gh u'], ['user'])\n        self.verify_completions(['gh v'], ['view'])\n\n    def test_args(self):\n        self.verify_completions(['gh octo '], ['\"Keep it logically awesome\"'])\n\n    def test_no_args_with_options(self):\n        self.verify_completions(['gh octo '], ['\"Keep it logically awesome\"'])\n\n    def test_options(self):\n        self.verify_completions(['gh emojis '],\n                                ['-p', '--pager'])\n\n    def test_multiple_options(self):\n        self.verify_completions(['gh feed -pr --pa'], ['--pager'])\n        self.verify_completions(['gh feed foo -pr --pa'], ['--pager'])\n\n    def test_fuzzy(self):\n        self.completer.fuzzy_match = True\n        self.verify_completions(['gh ot'], ['octo'])\n\n    def test_build_completions_with_meta(self):\n        result = self.completer.build_completions_with_meta('git ad',\n                                                            'ad',\n                                                            ['add'])\n        assert result[0].display_meta == 'Add file contents to the index.'\n        result = self.completer.build_completions_with_meta('git-alia',\n                                                            'git-alia',\n                                                            ['git-alias'])\n        assert result[0].display_meta == 'Define, search and show aliases.'\n", "description": "A supercharged Git/GitHub command line interface (CLI).  An official integration for GitHub and GitHub Enterprise: https://github.com/works-with/category/desktop-tools", "file_name": "test_completer.py", "id": "1e2978b4b9ad121a22c829fac9fc1266", "language": "Python", "project_name": "gitsome", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-gitsome/donnemartin-gitsome-5751a31/tests/test_completer.py", "save_time": "", "source": "", "update_at": "2018-03-18T02:47:11Z", "url": "https://github.com/donnemartin/gitsome", "wiki": true}