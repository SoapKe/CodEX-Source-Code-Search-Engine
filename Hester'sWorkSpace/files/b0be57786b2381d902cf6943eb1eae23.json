{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    get_element_by_attribute,\n    qualities,\n    unescapeHTML,\n)\n\n\nclass OraTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:ora\\.tv|unsafespeech\\.com)/([^/]+/)*(?P<id>[^/\\?\n    _TESTS = [{\n        'url': 'https://www.ora.tv/larrykingnow/2015/12/16/vine-youtube-stars-zach-king-king-bach-on-their-viral-videos-0_36jupg6090pq',\n        'md5': 'fa33717591c631ec93b04b0e330df786',\n        'info_dict': {\n            'id': '50178',\n            'ext': 'mp4',\n            'title': 'Vine & YouTube Stars Zach King & King Bach On Their Viral Videos!',\n            'description': 'md5:ebbc5b1424dd5dba7be7538148287ac1',\n        }\n    }, {\n        'url': 'http://www.unsafespeech.com/video/2016/5/10/student-self-censorship-and-the-thought-police-on-university-campuses-0_6622bnkppw4d',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        video_data = self._search_regex(\n            r'\"(?:video|current)\"\\s*:\\s*({[^}]+?})', webpage, 'current video')\n        m3u8_url = self._search_regex(\n            r'hls_stream\"?\\s*:\\s*\"([^\"]+)', video_data, 'm3u8 url', None)\n        if m3u8_url:\n            formats = self._extract_m3u8_formats(\n                m3u8_url, display_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False)\n            \n            m3u8_path = compat_urlparse.urlparse(m3u8_url).path\n            QUALITIES_RE = r'((,[a-z]+\\d+)+,?)'\n            available_qualities = self._search_regex(\n                QUALITIES_RE, m3u8_path, 'qualities').strip(',').split(',')\n            http_path = m3u8_path[1:].split('/', 1)[1]\n            http_template = re.sub(QUALITIES_RE, r'%s', http_path)\n            http_template = http_template.replace('.csmil/master.m3u8', '')\n            http_template = compat_urlparse.urljoin(\n                'http://videocdn-pmd.ora.tv/', http_template)\n            preference = qualities(\n                ['mobile400', 'basic400', 'basic600', 'sd900', 'sd1200', 'sd1500', 'hd720', 'hd1080'])\n            for q in available_qualities:\n                formats.append({\n                    'url': http_template % q,\n                    'format_id': q,\n                    'preference': preference(q),\n                })\n            self._sort_formats(formats)\n        else:\n            return self.url_result(self._search_regex(\n                r'\"youtube_id\"\\s*:\\s*\"([^\"]+)', webpage, 'youtube id'), 'Youtube')\n\n        return {\n            'id': self._search_regex(\n                r'\"id\"\\s*:\\s*(\\d+)', video_data, 'video id', default=display_id),\n            'display_id': display_id,\n            'title': unescapeHTML(self._og_search_title(webpage)),\n            'description': get_element_by_attribute(\n                'class', 'video_txt_decription', webpage),\n            'thumbnail': self._proto_relative_url(self._search_regex(\n                r'\"thumb\"\\s*:\\s*\"([^\"]+)', video_data, 'thumbnail', None)),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#]+)'\n# similar to GameSpotIE\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    get_element_by_attribute,\n    qualities,\n    unescapeHTML,\n)\n\n\nclass OraTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:ora\\.tv|unsafespeech\\.com)/([^/]+/)*(?P<id>[^/\\?#]+)'\n    _TESTS = [{\n        'url': 'https://www.ora.tv/larrykingnow/2015/12/16/vine-youtube-stars-zach-king-king-bach-on-their-viral-videos-0_36jupg6090pq',\n        'md5': 'fa33717591c631ec93b04b0e330df786',\n        'info_dict': {\n            'id': '50178',\n            'ext': 'mp4',\n            'title': 'Vine & YouTube Stars Zach King & King Bach On Their Viral Videos!',\n            'description': 'md5:ebbc5b1424dd5dba7be7538148287ac1',\n        }\n    }, {\n        'url': 'http://www.unsafespeech.com/video/2016/5/10/student-self-censorship-and-the-thought-police-on-university-campuses-0_6622bnkppw4d',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n\n        video_data = self._search_regex(\n            r'\"(?:video|current)\"\\s*:\\s*({[^}]+?})', webpage, 'current video')\n        m3u8_url = self._search_regex(\n            r'hls_stream\"?\\s*:\\s*\"([^\"]+)', video_data, 'm3u8 url', None)\n        if m3u8_url:\n            formats = self._extract_m3u8_formats(\n                m3u8_url, display_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False)\n            # similar to GameSpotIE\n            m3u8_path = compat_urlparse.urlparse(m3u8_url).path\n            QUALITIES_RE = r'((,[a-z]+\\d+)+,?)'\n            available_qualities = self._search_regex(\n                QUALITIES_RE, m3u8_path, 'qualities').strip(',').split(',')\n            http_path = m3u8_path[1:].split('/', 1)[1]\n            http_template = re.sub(QUALITIES_RE, r'%s', http_path)\n            http_template = http_template.replace('.csmil/master.m3u8', '')\n            http_template = compat_urlparse.urljoin(\n                'http://videocdn-pmd.ora.tv/', http_template)\n            preference = qualities(\n                ['mobile400', 'basic400', 'basic600', 'sd900', 'sd1200', 'sd1500', 'hd720', 'hd1080'])\n            for q in available_qualities:\n                formats.append({\n                    'url': http_template % q,\n                    'format_id': q,\n                    'preference': preference(q),\n                })\n            self._sort_formats(formats)\n        else:\n            return self.url_result(self._search_regex(\n                r'\"youtube_id\"\\s*:\\s*\"([^\"]+)', webpage, 'youtube id'), 'Youtube')\n\n        return {\n            'id': self._search_regex(\n                r'\"id\"\\s*:\\s*(\\d+)', video_data, 'video id', default=display_id),\n            'display_id': display_id,\n            'title': unescapeHTML(self._og_search_title(webpage)),\n            'description': get_element_by_attribute(\n                'class', 'video_txt_decription', webpage),\n            'thumbnail': self._proto_relative_url(self._search_regex(\n                r'\"thumb\"\\s*:\\s*\"([^\"]+)', video_data, 'thumbnail', None)),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ora.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ora.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}