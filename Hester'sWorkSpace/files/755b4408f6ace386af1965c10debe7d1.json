{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2015, Patrick F. Marques <patrickfmarques@gmail.com>\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: digital_ocean_floating_ip\nshort_description: Manage DigitalOcean Floating IPs\ndescription:\n     - Create/delete/assign a floating IP.\nversion_added: \"2.4\"\nauthor: \"Patrick Marques (@pmarques)\"\noptions:\n  state:\n    description:\n     - Indicate desired state of the target.\n    default: present\n    choices: ['present', 'absent']\n  ip:\n    description:\n     - Public IP address of the Floating IP. Used to remove an IP\n  region:\n    description:\n     - The region that the Floating IP is reserved to.\n  droplet_id:\n    description:\n     - The Droplet that the Floating IP has been assigned to.\n  oauth_token:\n    description:\n     - DigitalOcean OAuth token.\n    required: true\n\nnotes:\n  - Version 2 of DigitalOcean API is used.\nrequirements:\n  - \"python >= 2.6\"\n'''\n\n\nEXAMPLES = '''\n- name: \"Create a Floating IP in region lon1\"\n  digital_ocean_floating_ip:\n    state: present\n    region: lon1\n\n- name: \"Create a Floating IP assigned to Droplet ID 123456\"\n  digital_ocean_floating_ip:\n    state: present\n    droplet_id: 123456\n\n- name: \"Delete a Floating IP with ip 1.2.3.4\"\n  digital_ocean_floating_ip:\n    state: absent\n    ip: \"1.2.3.4\"\n\n'''\n\n\nRETURN = '''\n Digital Ocean API info https://developers.digitalocean.com/documentation/v2/floating-ips\ndata:\n    description: a DigitalOcean Floating IP resource\n    returned: success and no resource constraint\n    type: dict\n    sample: {\n      \"action\": {\n        \"id\": 68212728,\n        \"status\": \"in-progress\",\n        \"type\": \"assign_ip\",\n        \"started_at\": \"2015-10-15T17:45:44Z\",\n        \"completed_at\": null,\n        \"resource_id\": 758603823,\n        \"resource_type\": \"floating_ip\",\n        \"region\": {\n          \"name\": \"New York 3\",\n          \"slug\": \"nyc3\",\n          \"sizes\": [\n            \"512mb\",\n            \"1gb\",\n            \"2gb\",\n            \"4gb\",\n            \"8gb\",\n            \"16gb\",\n            \"32gb\",\n            \"48gb\",\n            \"64gb\"\n          ],\n          \"features\": [\n            \"private_networking\",\n            \"backups\",\n            \"ipv6\",\n            \"metadata\"\n          ],\n          \"available\": true\n        },\n        \"region_slug\": \"nyc3\"\n      }\n    }\n'''\n\nimport json\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.basic import env_fallback\nfrom ansible.module_utils.urls import fetch_url\n\n\nclass Response(object):\n\n    def __init__(self, resp, info):\n        self.body = None\n        if resp:\n            self.body = resp.read()\n        self.info = info\n\n    @property\n    def json(self):\n        if not self.body:\n            if \"body\" in self.info:\n                return json.loads(self.info[\"body\"])\n            return None\n        try:\n            return json.loads(self.body)\n        except ValueError:\n            return None\n\n    @property\n    def status_code(self):\n        return self.info[\"status\"]\n\n\nclass Rest(object):\n\n    def __init__(self, module, headers):\n        self.module = module\n        self.headers = headers\n        self.baseurl = 'https://api.digitalocean.com/v2'\n\n    def _url_builder(self, path):\n        if path[0] == '/':\n            path = path[1:]\n        return '%s/%s' % (self.baseurl, path)\n\n    def send(self, method, path, data=None, headers=None):\n        url = self._url_builder(path)\n        data = self.module.jsonify(data)\n        timeout = self.module.params['timeout']\n\n        resp, info = fetch_url(self.module, url, data=data, headers=self.headers, method=method, timeout=timeout)\n\n         Exceptions in fetch_url may result in a status -1, the ensures a\n        if info['status'] == -1:\n            self.module.fail_json(msg=info['msg'])\n\n        return Response(resp, info)\n\n    def get(self, path, data=None, headers=None):\n        return self.send('GET', path, data, headers)\n\n    def put(self, path, data=None, headers=None):\n        return self.send('PUT', path, data, headers)\n\n    def post(self, path, data=None, headers=None):\n        return self.send('POST', path, data, headers)\n\n    def delete(self, path, data=None, headers=None):\n        return self.send('DELETE', path, data, headers)\n\n\ndef wait_action(module, rest, ip, action_id, timeout=10):\n    end_time = time.time() + 10\n    while time.time() < end_time:\n        response = rest.get('floating_ips/{0}/actions/{1}'.format(ip, action_id))\n        status_code = response.status_code\n        status = response.json['action']['status']\n         TODO: check status_code == 200?\n        if status == 'completed':\n            return True\n        elif status == 'errored':\n            module.fail_json(msg='Floating ip action error [ip: {0}: action: {1}]'.format(\n                ip, action_id), data=json)\n\n    module.fail_json(msg='Floating ip action timeout [ip: {0}: action: {1}]'.format(\n        ip, action_id), data=json)\n\n\ndef core(module):\n    api_token = module.params['oauth_token']\n    state = module.params['state']\n    ip = module.params['ip']\n    droplet_id = module.params['droplet_id']\n\n    rest = Rest(module, {'Authorization': 'Bearer {0}'.format(api_token),\n                         'Content-type': 'application/json'})\n\n    if state in ('present'):\n        if droplet_id is not None and module.params['ip'] is not None:\n             Lets try to associate the ip to the specified droplet\n            associate_floating_ips(module, rest)\n        else:\n            create_floating_ips(module, rest)\n\n    elif state in ('absent'):\n        response = rest.delete(\"floating_ips/{0}\".format(ip))\n        status_code = response.status_code\n        json_data = response.json\n        if status_code == 204:\n            module.exit_json(changed=True)\n        elif status_code == 404:\n            module.exit_json(changed=False)\n        else:\n            module.exit_json(changed=False, data=json_data)\n\n\ndef get_floating_ip_details(module, rest):\n    ip = module.params['ip']\n\n    response = rest.get(\"floating_ips/{0}\".format(ip))\n    status_code = response.status_code\n    json_data = response.json\n    if status_code == 200:\n        return json_data['floating_ip']\n    else:\n        module.fail_json(msg=\"Error assigning floating ip [{0}: {1}]\".format(\n            status_code, json_data[\"message\"]), region=module.params['region'])\n\n\ndef assign_floating_id_to_droplet(module, rest):\n    ip = module.params['ip']\n\n    payload = {\n        \"type\": \"assign\",\n        \"droplet_id\": module.params['droplet_id'],\n    }\n\n    response = rest.post(\"floating_ips/{0}/actions\".format(ip), data=payload)\n    status_code = response.status_code\n    json_data = response.json\n    if status_code == 201:\n        wait_action(module, rest, ip, json_data['action']['id'])\n\n        module.exit_json(changed=True, data=json_data)\n    else:\n        module.fail_json(msg=\"Error creating floating ip [{0}: {1}]\".format(\n            status_code, json_data[\"message\"]), region=module.params['region'])\n\n\ndef associate_floating_ips(module, rest):\n    floating_ip = get_floating_ip_details(module, rest)\n    droplet = floating_ip['droplet']\n\n     TODO: If already assigned to a droplet verify if is one of the specified as valid\n    if droplet is not None and str(droplet['id']) in [module.params['droplet_id']]:\n        module.exit_json(changed=False)\n    else:\n        assign_floating_id_to_droplet(module, rest)\n\n\ndef create_floating_ips(module, rest):\n    payload = {\n    }\n\n    if module.params['region'] is not None:\n        payload[\"region\"] = module.params['region']\n    if module.params['droplet_id'] is not None:\n        payload[\"droplet_id\"] = module.params['droplet_id']\n\n    response = rest.post(\"floating_ips\", data=payload)\n    status_code = response.status_code\n    json_data = response.json\n    if status_code == 202:\n        module.exit_json(changed=True, data=json_data)\n    else:\n        module.fail_json(msg=\"Error creating floating ip [{0}: {1}]\".format(\n            status_code, json_data[\"message\"]), region=module.params['region'])\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(choices=['present', 'absent'], default='present'),\n            ip=dict(aliases=['id'], required=False),\n            region=dict(required=False),\n            droplet_id=dict(required=False),\n            oauth_token=dict(\n                no_log=True,\n                 Support environment variable for DigitalOcean OAuth Token\n                fallback=(env_fallback, ['DO_API_TOKEN', 'DO_API_KEY', 'DO_OAUTH_TOKEN']),\n                required=True,\n            ),\n            validate_certs=dict(type='bool', default=True),\n            timeout=dict(type='int', default=30),\n        ),\n        required_if=([\n            ('state', 'delete', ['ip'])\n        ]),\n        mutually_exclusive=(\n            ['region', 'droplet_id']\n        ),\n    )\n\n    core(module)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  digital ocean floating ip short description  manage digitalocean floating ips description         create delete assign floating ip  version added   2 4  author   patrick marques ( pmarques)  options    state      description         indicate desired state target      default  present     choices    present    absent     ip      description         public ip address floating ip  used remove ip   region      description         the region floating ip reserved    droplet id      description         the droplet floating ip assigned    oauth token      description         digitalocean oauth token      required  true  notes      version 2 digitalocean api used  requirements       python    2 6        examples         name   create floating ip region lon1    digital ocean floating ip      state  present     region  lon1    name   create floating ip assigned droplet id 123456    digital ocean floating ip      state  present     droplet id  123456    name   delete floating ip ip 1 2 3 4    digital ocean floating ip      state  absent     ip   1 2 3 4         return         digital ocean api info https   developers digitalocean com documentation v2  floating ips data      description  digitalocean floating ip resource     returned  success resource constraint     type  dict     sample           action              id   68212728           status    progress            type    assign ip            started    2015 10 15t17 45 44z            completed   null           resource id   758603823           resource type    floating ip            region                name    new york 3              slug    nyc3              sizes                  512mb                1gb                2gb                4gb                8gb                16gb                32gb                48gb                64gb                          features                  private networking                backups                ipv6                metadata                          available   true                     region slug    nyc3                        usr bin python        coding  utf 8           (c) 2015  patrick f  marques  patrickfmarques gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    digital ocean api info https   developers digitalocean com documentation v2  floating ips    exceptions fetch url may result status  1  ensures    todo  check status code    200     lets try associate ip specified droplet    todo  if already assigned droplet verify one specified valid    support environment variable digitalocean oauth token ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# (c) 2015, Patrick F. Marques <patrickfmarques@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: digital_ocean_floating_ip\nshort_description: Manage DigitalOcean Floating IPs\ndescription:\n     - Create/delete/assign a floating IP.\nversion_added: \"2.4\"\nauthor: \"Patrick Marques (@pmarques)\"\noptions:\n  state:\n    description:\n     - Indicate desired state of the target.\n    default: present\n    choices: ['present', 'absent']\n  ip:\n    description:\n     - Public IP address of the Floating IP. Used to remove an IP\n  region:\n    description:\n     - The region that the Floating IP is reserved to.\n  droplet_id:\n    description:\n     - The Droplet that the Floating IP has been assigned to.\n  oauth_token:\n    description:\n     - DigitalOcean OAuth token.\n    required: true\n\nnotes:\n  - Version 2 of DigitalOcean API is used.\nrequirements:\n  - \"python >= 2.6\"\n'''\n\n\nEXAMPLES = '''\n- name: \"Create a Floating IP in region lon1\"\n  digital_ocean_floating_ip:\n    state: present\n    region: lon1\n\n- name: \"Create a Floating IP assigned to Droplet ID 123456\"\n  digital_ocean_floating_ip:\n    state: present\n    droplet_id: 123456\n\n- name: \"Delete a Floating IP with ip 1.2.3.4\"\n  digital_ocean_floating_ip:\n    state: absent\n    ip: \"1.2.3.4\"\n\n'''\n\n\nRETURN = '''\n# Digital Ocean API info https://developers.digitalocean.com/documentation/v2/#floating-ips\ndata:\n    description: a DigitalOcean Floating IP resource\n    returned: success and no resource constraint\n    type: dict\n    sample: {\n      \"action\": {\n        \"id\": 68212728,\n        \"status\": \"in-progress\",\n        \"type\": \"assign_ip\",\n        \"started_at\": \"2015-10-15T17:45:44Z\",\n        \"completed_at\": null,\n        \"resource_id\": 758603823,\n        \"resource_type\": \"floating_ip\",\n        \"region\": {\n          \"name\": \"New York 3\",\n          \"slug\": \"nyc3\",\n          \"sizes\": [\n            \"512mb\",\n            \"1gb\",\n            \"2gb\",\n            \"4gb\",\n            \"8gb\",\n            \"16gb\",\n            \"32gb\",\n            \"48gb\",\n            \"64gb\"\n          ],\n          \"features\": [\n            \"private_networking\",\n            \"backups\",\n            \"ipv6\",\n            \"metadata\"\n          ],\n          \"available\": true\n        },\n        \"region_slug\": \"nyc3\"\n      }\n    }\n'''\n\nimport json\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.basic import env_fallback\nfrom ansible.module_utils.urls import fetch_url\n\n\nclass Response(object):\n\n    def __init__(self, resp, info):\n        self.body = None\n        if resp:\n            self.body = resp.read()\n        self.info = info\n\n    @property\n    def json(self):\n        if not self.body:\n            if \"body\" in self.info:\n                return json.loads(self.info[\"body\"])\n            return None\n        try:\n            return json.loads(self.body)\n        except ValueError:\n            return None\n\n    @property\n    def status_code(self):\n        return self.info[\"status\"]\n\n\nclass Rest(object):\n\n    def __init__(self, module, headers):\n        self.module = module\n        self.headers = headers\n        self.baseurl = 'https://api.digitalocean.com/v2'\n\n    def _url_builder(self, path):\n        if path[0] == '/':\n            path = path[1:]\n        return '%s/%s' % (self.baseurl, path)\n\n    def send(self, method, path, data=None, headers=None):\n        url = self._url_builder(path)\n        data = self.module.jsonify(data)\n        timeout = self.module.params['timeout']\n\n        resp, info = fetch_url(self.module, url, data=data, headers=self.headers, method=method, timeout=timeout)\n\n        # Exceptions in fetch_url may result in a status -1, the ensures a\n        if info['status'] == -1:\n            self.module.fail_json(msg=info['msg'])\n\n        return Response(resp, info)\n\n    def get(self, path, data=None, headers=None):\n        return self.send('GET', path, data, headers)\n\n    def put(self, path, data=None, headers=None):\n        return self.send('PUT', path, data, headers)\n\n    def post(self, path, data=None, headers=None):\n        return self.send('POST', path, data, headers)\n\n    def delete(self, path, data=None, headers=None):\n        return self.send('DELETE', path, data, headers)\n\n\ndef wait_action(module, rest, ip, action_id, timeout=10):\n    end_time = time.time() + 10\n    while time.time() < end_time:\n        response = rest.get('floating_ips/{0}/actions/{1}'.format(ip, action_id))\n        status_code = response.status_code\n        status = response.json['action']['status']\n        # TODO: check status_code == 200?\n        if status == 'completed':\n            return True\n        elif status == 'errored':\n            module.fail_json(msg='Floating ip action error [ip: {0}: action: {1}]'.format(\n                ip, action_id), data=json)\n\n    module.fail_json(msg='Floating ip action timeout [ip: {0}: action: {1}]'.format(\n        ip, action_id), data=json)\n\n\ndef core(module):\n    api_token = module.params['oauth_token']\n    state = module.params['state']\n    ip = module.params['ip']\n    droplet_id = module.params['droplet_id']\n\n    rest = Rest(module, {'Authorization': 'Bearer {0}'.format(api_token),\n                         'Content-type': 'application/json'})\n\n    if state in ('present'):\n        if droplet_id is not None and module.params['ip'] is not None:\n            # Lets try to associate the ip to the specified droplet\n            associate_floating_ips(module, rest)\n        else:\n            create_floating_ips(module, rest)\n\n    elif state in ('absent'):\n        response = rest.delete(\"floating_ips/{0}\".format(ip))\n        status_code = response.status_code\n        json_data = response.json\n        if status_code == 204:\n            module.exit_json(changed=True)\n        elif status_code == 404:\n            module.exit_json(changed=False)\n        else:\n            module.exit_json(changed=False, data=json_data)\n\n\ndef get_floating_ip_details(module, rest):\n    ip = module.params['ip']\n\n    response = rest.get(\"floating_ips/{0}\".format(ip))\n    status_code = response.status_code\n    json_data = response.json\n    if status_code == 200:\n        return json_data['floating_ip']\n    else:\n        module.fail_json(msg=\"Error assigning floating ip [{0}: {1}]\".format(\n            status_code, json_data[\"message\"]), region=module.params['region'])\n\n\ndef assign_floating_id_to_droplet(module, rest):\n    ip = module.params['ip']\n\n    payload = {\n        \"type\": \"assign\",\n        \"droplet_id\": module.params['droplet_id'],\n    }\n\n    response = rest.post(\"floating_ips/{0}/actions\".format(ip), data=payload)\n    status_code = response.status_code\n    json_data = response.json\n    if status_code == 201:\n        wait_action(module, rest, ip, json_data['action']['id'])\n\n        module.exit_json(changed=True, data=json_data)\n    else:\n        module.fail_json(msg=\"Error creating floating ip [{0}: {1}]\".format(\n            status_code, json_data[\"message\"]), region=module.params['region'])\n\n\ndef associate_floating_ips(module, rest):\n    floating_ip = get_floating_ip_details(module, rest)\n    droplet = floating_ip['droplet']\n\n    # TODO: If already assigned to a droplet verify if is one of the specified as valid\n    if droplet is not None and str(droplet['id']) in [module.params['droplet_id']]:\n        module.exit_json(changed=False)\n    else:\n        assign_floating_id_to_droplet(module, rest)\n\n\ndef create_floating_ips(module, rest):\n    payload = {\n    }\n\n    if module.params['region'] is not None:\n        payload[\"region\"] = module.params['region']\n    if module.params['droplet_id'] is not None:\n        payload[\"droplet_id\"] = module.params['droplet_id']\n\n    response = rest.post(\"floating_ips\", data=payload)\n    status_code = response.status_code\n    json_data = response.json\n    if status_code == 202:\n        module.exit_json(changed=True, data=json_data)\n    else:\n        module.fail_json(msg=\"Error creating floating ip [{0}: {1}]\".format(\n            status_code, json_data[\"message\"]), region=module.params['region'])\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(choices=['present', 'absent'], default='present'),\n            ip=dict(aliases=['id'], required=False),\n            region=dict(required=False),\n            droplet_id=dict(required=False),\n            oauth_token=dict(\n                no_log=True,\n                # Support environment variable for DigitalOcean OAuth Token\n                fallback=(env_fallback, ['DO_API_TOKEN', 'DO_API_KEY', 'DO_OAUTH_TOKEN']),\n                required=True,\n            ),\n            validate_certs=dict(type='bool', default=True),\n            timeout=dict(type='int', default=30),\n        ),\n        required_if=([\n            ('state', 'delete', ['ip'])\n        ]),\n        mutually_exclusive=(\n            ['region', 'droplet_id']\n        ),\n    )\n\n    core(module)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "digital_ocean_floating_ip.py", "id": "755b4408f6ace386af1965c10debe7d1", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/digital_ocean/digital_ocean_floating_ip.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}