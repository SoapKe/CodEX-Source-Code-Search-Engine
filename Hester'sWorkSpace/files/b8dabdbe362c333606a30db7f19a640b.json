{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    unified_timestamp,\n    update_url_query,\n)\n\n\nclass KakaoIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.kakao\\.com/channel/(?P<channel>\\d+)/cliplink/(?P<id>\\d+)'\n    _API_BASE = 'http://tv.kakao.com/api/v1/ft/cliplinks'\n\n    _TESTS = [{\n        'url': 'http://tv.kakao.com/channel/2671005/cliplink/301965083',\n        'md5': '702b2fbdeb51ad82f5c904e8c0766340',\n        'info_dict': {\n            'id': '301965083',\n            'ext': 'mp4',\n            'title': '\u4e43\u6728\u574246 \u30d0\u30ca\u30ca\u30de\u30f3 \u300c3\u671f\u751f\u7d39\u4ecb\u30b3\u30fc\u30ca\u30fc\u304c\u59cb\u52d5\uff01\u9854\u9ad8\u4f4e\u5deeGP\u3082\uff01\u300d \u300e\u4e43\u6728\u5742\u5de5\u4e8b\u4e2d\u300f',\n            'uploader_id': 2671005,\n            'uploader': '\uadf8\ub791\uadf8\ub791\uc774',\n            'timestamp': 1488160199,\n            'upload_date': '20170227',\n        }\n    }, {\n        'url': 'http://tv.kakao.com/channel/2653210/cliplink/300103180',\n        'md5': 'a8917742069a4dd442516b86e7d66529',\n        'info_dict': {\n            'id': '300103180',\n            'ext': 'mp4',\n            'description': '\ub7ec\ube14\ub9ac\uc988 - Destiny (\ub098\uc758 \uc9c0\uad6c) (Lovelyz - Destiny)\\r\\n\\r\\n[\uc1fc! \uc74c\uc545\uc911\uc2ec] 20160611, 507\ud68c',\n            'title': '\ub7ec\ube14\ub9ac\uc988 - Destiny (\ub098\uc758 \uc9c0\uad6c) (Lovelyz - Destiny)',\n            'uploader_id': 2653210,\n            'uploader': '\uc1fc \uc74c\uc545\uc911\uc2ec',\n            'timestamp': 1485684628,\n            'upload_date': '20170129',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        player_header = {\n            'Referer': update_url_query(\n                'http://tv.kakao.com/embed/player/cliplink/%s' % video_id, {\n                    'service': 'kakao_tv',\n                    'autoplay': '1',\n                    'profile': 'HIGH',\n                    'wmode': 'transparent',\n                })\n        }\n\n        QUERY_COMMON = {\n            'player': 'monet_html5',\n            'referer': url,\n            'uuid': '',\n            'service': 'kakao_tv',\n            'section': '',\n            'dteType': 'PC',\n        }\n\n        query = QUERY_COMMON.copy()\n        query['fields'] = 'clipLink,clip,channel,hasPlusFriend,-service,-tagList'\n        impress = self._download_json(\n            '%s/%s/impress' % (self._API_BASE, video_id),\n            video_id, 'Downloading video info',\n            query=query, headers=player_header)\n\n        clip_link = impress['clipLink']\n        clip = clip_link['clip']\n\n        title = clip.get('title') or clip_link.get('displayTitle')\n\n        tid = impress.get('tid', '')\n\n        query = QUERY_COMMON.copy()\n        query.update({\n            'tid': tid,\n            'profile': 'HIGH',\n        })\n        raw = self._download_json(\n            '%s/%s/raw' % (self._API_BASE, video_id),\n            video_id, 'Downloading video formats info',\n            query=query, headers=player_header)\n\n        formats = []\n        for fmt in raw.get('outputList', []):\n            try:\n                profile_name = fmt['profile']\n                fmt_url_json = self._download_json(\n                    '%s/%s/raw/videolocation' % (self._API_BASE, video_id),\n                    video_id,\n                    'Downloading video URL for profile %s' % profile_name,\n                    query={\n                        'service': 'kakao_tv',\n                        'section': '',\n                        'tid': tid,\n                        'profile': profile_name\n                    }, headers=player_header, fatal=False)\n\n                if fmt_url_json is None:\n                    continue\n\n                fmt_url = fmt_url_json['url']\n                formats.append({\n                    'url': fmt_url,\n                    'format_id': profile_name,\n                    'width': int_or_none(fmt.get('width')),\n                    'height': int_or_none(fmt.get('height')),\n                    'format_note': fmt.get('label'),\n                    'filesize': int_or_none(fmt.get('filesize'))\n                })\n            except KeyError:\n                pass\n        self._sort_formats(formats)\n\n        thumbs = []\n        for thumb in clip.get('clipChapterThumbnailList', []):\n            thumbs.append({\n                'url': thumb.get('thumbnailUrl'),\n                'id': compat_str(thumb.get('timeInSec')),\n                'preference': -1 if thumb.get('isDefault') else 0\n            })\n        top_thumbnail = clip.get('thumbnailUrl')\n        if top_thumbnail:\n            thumbs.append({\n                'url': top_thumbnail,\n                'preference': 10,\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': clip.get('description'),\n            'uploader': clip_link.get('channel', {}).get('name'),\n            'uploader_id': clip_link.get('channelId'),\n            'thumbnails': thumbs,\n            'timestamp': unified_timestamp(clip_link.get('createTime')),\n            'duration': int_or_none(clip.get('duration')),\n            'view_count': int_or_none(clip.get('playCount')),\n            'like_count': int_or_none(clip.get('likeCount')),\n            'comment_count': int_or_none(clip.get('commentCount')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    unified_timestamp,\n    update_url_query,\n)\n\n\nclass KakaoIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.kakao\\.com/channel/(?P<channel>\\d+)/cliplink/(?P<id>\\d+)'\n    _API_BASE = 'http://tv.kakao.com/api/v1/ft/cliplinks'\n\n    _TESTS = [{\n        'url': 'http://tv.kakao.com/channel/2671005/cliplink/301965083',\n        'md5': '702b2fbdeb51ad82f5c904e8c0766340',\n        'info_dict': {\n            'id': '301965083',\n            'ext': 'mp4',\n            'title': '\u4e43\u6728\u574246 \u30d0\u30ca\u30ca\u30de\u30f3 \u300c3\u671f\u751f\u7d39\u4ecb\u30b3\u30fc\u30ca\u30fc\u304c\u59cb\u52d5\uff01\u9854\u9ad8\u4f4e\u5deeGP\u3082\uff01\u300d \u300e\u4e43\u6728\u5742\u5de5\u4e8b\u4e2d\u300f',\n            'uploader_id': 2671005,\n            'uploader': '\uadf8\ub791\uadf8\ub791\uc774',\n            'timestamp': 1488160199,\n            'upload_date': '20170227',\n        }\n    }, {\n        'url': 'http://tv.kakao.com/channel/2653210/cliplink/300103180',\n        'md5': 'a8917742069a4dd442516b86e7d66529',\n        'info_dict': {\n            'id': '300103180',\n            'ext': 'mp4',\n            'description': '\ub7ec\ube14\ub9ac\uc988 - Destiny (\ub098\uc758 \uc9c0\uad6c) (Lovelyz - Destiny)\\r\\n\\r\\n[\uc1fc! \uc74c\uc545\uc911\uc2ec] 20160611, 507\ud68c',\n            'title': '\ub7ec\ube14\ub9ac\uc988 - Destiny (\ub098\uc758 \uc9c0\uad6c) (Lovelyz - Destiny)',\n            'uploader_id': 2653210,\n            'uploader': '\uc1fc \uc74c\uc545\uc911\uc2ec',\n            'timestamp': 1485684628,\n            'upload_date': '20170129',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        player_header = {\n            'Referer': update_url_query(\n                'http://tv.kakao.com/embed/player/cliplink/%s' % video_id, {\n                    'service': 'kakao_tv',\n                    'autoplay': '1',\n                    'profile': 'HIGH',\n                    'wmode': 'transparent',\n                })\n        }\n\n        QUERY_COMMON = {\n            'player': 'monet_html5',\n            'referer': url,\n            'uuid': '',\n            'service': 'kakao_tv',\n            'section': '',\n            'dteType': 'PC',\n        }\n\n        query = QUERY_COMMON.copy()\n        query['fields'] = 'clipLink,clip,channel,hasPlusFriend,-service,-tagList'\n        impress = self._download_json(\n            '%s/%s/impress' % (self._API_BASE, video_id),\n            video_id, 'Downloading video info',\n            query=query, headers=player_header)\n\n        clip_link = impress['clipLink']\n        clip = clip_link['clip']\n\n        title = clip.get('title') or clip_link.get('displayTitle')\n\n        tid = impress.get('tid', '')\n\n        query = QUERY_COMMON.copy()\n        query.update({\n            'tid': tid,\n            'profile': 'HIGH',\n        })\n        raw = self._download_json(\n            '%s/%s/raw' % (self._API_BASE, video_id),\n            video_id, 'Downloading video formats info',\n            query=query, headers=player_header)\n\n        formats = []\n        for fmt in raw.get('outputList', []):\n            try:\n                profile_name = fmt['profile']\n                fmt_url_json = self._download_json(\n                    '%s/%s/raw/videolocation' % (self._API_BASE, video_id),\n                    video_id,\n                    'Downloading video URL for profile %s' % profile_name,\n                    query={\n                        'service': 'kakao_tv',\n                        'section': '',\n                        'tid': tid,\n                        'profile': profile_name\n                    }, headers=player_header, fatal=False)\n\n                if fmt_url_json is None:\n                    continue\n\n                fmt_url = fmt_url_json['url']\n                formats.append({\n                    'url': fmt_url,\n                    'format_id': profile_name,\n                    'width': int_or_none(fmt.get('width')),\n                    'height': int_or_none(fmt.get('height')),\n                    'format_note': fmt.get('label'),\n                    'filesize': int_or_none(fmt.get('filesize'))\n                })\n            except KeyError:\n                pass\n        self._sort_formats(formats)\n\n        thumbs = []\n        for thumb in clip.get('clipChapterThumbnailList', []):\n            thumbs.append({\n                'url': thumb.get('thumbnailUrl'),\n                'id': compat_str(thumb.get('timeInSec')),\n                'preference': -1 if thumb.get('isDefault') else 0\n            })\n        top_thumbnail = clip.get('thumbnailUrl')\n        if top_thumbnail:\n            thumbs.append({\n                'url': top_thumbnail,\n                'preference': 10,\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': clip.get('description'),\n            'uploader': clip_link.get('channel', {}).get('name'),\n            'uploader_id': clip_link.get('channelId'),\n            'thumbnails': thumbs,\n            'timestamp': unified_timestamp(clip_link.get('createTime')),\n            'duration': int_or_none(clip.get('duration')),\n            'view_count': int_or_none(clip.get('playCount')),\n            'like_count': int_or_none(clip.get('likeCount')),\n            'comment_count': int_or_none(clip.get('commentCount')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "kakao.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/kakao.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}