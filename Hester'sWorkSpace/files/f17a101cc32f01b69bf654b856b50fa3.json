{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2018, Dag Wieers (dagwieers) <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_aaa_user\nshort_description: Manage AAA users (aaa:User)\ndescription:\n- Manage AAA users on Cisco ACI fabrics.\nnotes:\n- This module is not idempotent when C(aaa_password) is being used\n  (even if that password was already set identically). This\n  appears to be an inconsistency wrt. the idempotent nature\n  of the APIC REST API. The vendor has been informed.\n  More information in :ref:`the ACI documentation <aci_guide_known_issues>`.\n- More information about the internal APIC class B(aaa:User) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Dag Wieers (@dagwieers)\nrequirements:\n  - python-dateutil\nversion_added: '2.5'\noptions:\n  aaa_password:\n    description:\n    - The password of the locally-authenticated user.\n  aaa_password_lifetime:\n    description:\n    - The lifetime of the locally-authenticated user password.\n  aaa_password_update_required:\n    description:\n    - Whether this account needs password update.\n    type: bool\n  aaa_user:\n    description:\n    - The name of the locally-authenticated user user to add.\n    aliases: [ name, user ]\n  clear_password_history:\n    description:\n    - Whether to clear the password history of a locally-authenticated user.\n    type: bool\n  description:\n    description:\n    - Description for the AAA user.\n    aliases: [ descr ]\n  email:\n    description:\n    - The email address of the locally-authenticated user.\n  enabled:\n    description:\n    - The status of the locally-authenticated user account.\n    type: bool\n  expiration:\n    description:\n    - The expiration date of the locally-authenticated user account.\n  expires:\n    description:\n    - Whether to enable an expiration date for the locally-authenticated user account.\n    type: bool\n  first_name:\n    description:\n    - The first name of the locally-authenticated user.\n  last_name:\n    description:\n    - The last name of the locally-authenticated user.\n  phone:\n    description:\n    - The phone number of the locally-authenticated user.\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a user\n  aci_aaa_user:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    aaa_user: dag\n    aaa_password: AnotherSecretPassword\n    expiration: never\n    expires: no\n    email: dag@wieers.com\n    phone: 1-234-555-678\n    first_name: Dag\n    last_name: Wieers\n    state: present\n\n- name: Remove a user\n  aci_aaa_user:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    aaa_user: dag\n    state: absent\n\n- name: Query a user\n  aci_aaa_user:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    aaa_user: dag\n    state: query\n\n- name: Query all users\n  aci_aaa_user:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: '?rsp-prop-include=config-only'\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from dateutil.tz import tzutc\n    import dateutil.parser\n    HAS_DATEUTIL = True\nexcept ImportError:\n    HAS_DATEUTIL = False\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        aaa_password=dict(type='str', no_log=True),\n        aaa_password_lifetime=dict(type='int'),\n        aaa_password_update_required=dict(type='bool'),\n        aaa_user=dict(type='str', required=True, aliases=['name']),  \n        clear_password_history=dict(type='bool'),\n        description=dict(type='str', aliases=['descr']),\n        email=dict(type='str'),\n        enabled=dict(type='bool'),\n        expiration=dict(type='str'),\n        expires=dict(type='bool'),\n        first_name=dict(type='str'),\n        last_name=dict(type='str'),\n        phone=dict(type='str'),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['aaa_user']],\n            ['state', 'present', ['aaa_user']],\n            ['expires', True, ['expiration']],\n        ],\n    )\n\n    aci = ACIModule(module)\n\n    if not HAS_DATEUTIL:\n        module.fail_json(msg='dateutil required for this module')\n\n    aaa_password = module.params['aaa_password']\n    aaa_password_lifetime = module.params['aaa_password_lifetime']\n    aaa_password_update_required = aci.boolean(module.params['aaa_password_update_required'])\n    aaa_user = module.params['aaa_user']\n    clear_password_history = module.params['clear_password_history']\n    description = module.params['description']\n    email = module.params['email']\n    enabled = aci.boolean(module.params['enabled'], 'active', 'inactive')\n    expires = aci.boolean(module.params['expires'])\n    first_name = module.params['first_name']\n    last_name = module.params['last_name']\n    phone = module.params['phone']\n    state = module.params['state']\n\n    expiration = module.params['expiration']\n    if expiration is not None and expiration != 'never':\n        try:\n            expiration = aci.iso8601_format(dateutil.parser.parse(expiration).replace(tzinfo=tzutc()))\n        except Exception as e:\n            module.fail_json(msg=\"Failed to parse date format '%s', %s\" % (module.params['expiration'], e))\n\n    aci.construct_url(\n        root_class=dict(\n            aci_class='aaaUser',\n            aci_rn='userext/user-{0}'.format(aaa_user),\n            filter_target='eq(aaaUser.name, \"{0}\")'.format(aaa_user),\n            module_object=aaa_user,\n        ),\n    )\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='aaaUser',\n            class_config=dict(\n                accountStatus=enabled,\n                clearPwdHistory=clear_password_history,\n                email=email,\n                expiration=expiration,\n                expires=expires,\n                firstName=first_name,\n                lastName=last_name,\n                name=aaa_user,\n                phone=phone,\n                pwd=aaa_password,\n                pwdLifeTime=aaa_password_lifetime,\n                pwdUpdateRequired=aaa_password_update_required,\n            ),\n        )\n\n        aci.get_diff(aci_class='aaaUser')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci aaa user short description  manage aaa users (aaa user) description    manage aaa users cisco aci fabrics  notes    this module idempotent c(aaa password) used   (even password already set identically)  this   appears inconsistency wrt  idempotent nature   apic rest api  the vendor informed    more information  ref  aci documentation  aci guide known issues      more information internal apic class b(aaa user)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    dag wieers ( dagwieers) requirements      python dateutil version added   2 5  options    aaa password      description        the password locally authenticated user    aaa password lifetime      description        the lifetime locally authenticated user password    aaa password update required      description        whether account needs password update      type  bool   aaa user      description        the name locally authenticated user user add      aliases    name  user     clear password history      description        whether clear password history locally authenticated user      type  bool   description      description        description aaa user      aliases    descr     email      description        the email address locally authenticated user    enabled      description        the status locally authenticated user account      type  bool   expiration      description        the expiration date locally authenticated user account    expires      description        whether enable expiration date locally authenticated user account      type  bool   first name      description        the first name locally authenticated user    last name      description        the last name locally authenticated user    phone      description        the phone number locally authenticated user    state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      name  add user   aci aaa user      host  apic     username  admin     password  somesecretpassword     aaa user  dag     aaa password  anothersecretpassword     expiration  never     expires      email  dag wieers com     phone  1 234 555 678     first name  dag     last name  wieers     state  present    name  remove user   aci aaa user      host  apic     username  admin     password  somesecretpassword     aaa user  dag     state  absent    name  query user   aci aaa user      host  apic     username  admin     password  somesecretpassword     aaa user  dag     state  query    name  query users   aci aaa user      host  apic     username  admin     password  somesecretpassword     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample    rsp prop include config  method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        copyright  (c) 2018  dag wieers (dagwieers)  dag wieers com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2018, Dag Wieers (dagwieers) <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_aaa_user\nshort_description: Manage AAA users (aaa:User)\ndescription:\n- Manage AAA users on Cisco ACI fabrics.\nnotes:\n- This module is not idempotent when C(aaa_password) is being used\n  (even if that password was already set identically). This\n  appears to be an inconsistency wrt. the idempotent nature\n  of the APIC REST API. The vendor has been informed.\n  More information in :ref:`the ACI documentation <aci_guide_known_issues>`.\n- More information about the internal APIC class B(aaa:User) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Dag Wieers (@dagwieers)\nrequirements:\n  - python-dateutil\nversion_added: '2.5'\noptions:\n  aaa_password:\n    description:\n    - The password of the locally-authenticated user.\n  aaa_password_lifetime:\n    description:\n    - The lifetime of the locally-authenticated user password.\n  aaa_password_update_required:\n    description:\n    - Whether this account needs password update.\n    type: bool\n  aaa_user:\n    description:\n    - The name of the locally-authenticated user user to add.\n    aliases: [ name, user ]\n  clear_password_history:\n    description:\n    - Whether to clear the password history of a locally-authenticated user.\n    type: bool\n  description:\n    description:\n    - Description for the AAA user.\n    aliases: [ descr ]\n  email:\n    description:\n    - The email address of the locally-authenticated user.\n  enabled:\n    description:\n    - The status of the locally-authenticated user account.\n    type: bool\n  expiration:\n    description:\n    - The expiration date of the locally-authenticated user account.\n  expires:\n    description:\n    - Whether to enable an expiration date for the locally-authenticated user account.\n    type: bool\n  first_name:\n    description:\n    - The first name of the locally-authenticated user.\n  last_name:\n    description:\n    - The last name of the locally-authenticated user.\n  phone:\n    description:\n    - The phone number of the locally-authenticated user.\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a user\n  aci_aaa_user:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    aaa_user: dag\n    aaa_password: AnotherSecretPassword\n    expiration: never\n    expires: no\n    email: dag@wieers.com\n    phone: 1-234-555-678\n    first_name: Dag\n    last_name: Wieers\n    state: present\n\n- name: Remove a user\n  aci_aaa_user:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    aaa_user: dag\n    state: absent\n\n- name: Query a user\n  aci_aaa_user:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    aaa_user: dag\n    state: query\n\n- name: Query all users\n  aci_aaa_user:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: '?rsp-prop-include=config-only'\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from dateutil.tz import tzutc\n    import dateutil.parser\n    HAS_DATEUTIL = True\nexcept ImportError:\n    HAS_DATEUTIL = False\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        aaa_password=dict(type='str', no_log=True),\n        aaa_password_lifetime=dict(type='int'),\n        aaa_password_update_required=dict(type='bool'),\n        aaa_user=dict(type='str', required=True, aliases=['name']),  # Not required for querying all objects\n        clear_password_history=dict(type='bool'),\n        description=dict(type='str', aliases=['descr']),\n        email=dict(type='str'),\n        enabled=dict(type='bool'),\n        expiration=dict(type='str'),\n        expires=dict(type='bool'),\n        first_name=dict(type='str'),\n        last_name=dict(type='str'),\n        phone=dict(type='str'),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['aaa_user']],\n            ['state', 'present', ['aaa_user']],\n            ['expires', True, ['expiration']],\n        ],\n    )\n\n    aci = ACIModule(module)\n\n    if not HAS_DATEUTIL:\n        module.fail_json(msg='dateutil required for this module')\n\n    aaa_password = module.params['aaa_password']\n    aaa_password_lifetime = module.params['aaa_password_lifetime']\n    aaa_password_update_required = aci.boolean(module.params['aaa_password_update_required'])\n    aaa_user = module.params['aaa_user']\n    clear_password_history = module.params['clear_password_history']\n    description = module.params['description']\n    email = module.params['email']\n    enabled = aci.boolean(module.params['enabled'], 'active', 'inactive')\n    expires = aci.boolean(module.params['expires'])\n    first_name = module.params['first_name']\n    last_name = module.params['last_name']\n    phone = module.params['phone']\n    state = module.params['state']\n\n    expiration = module.params['expiration']\n    if expiration is not None and expiration != 'never':\n        try:\n            expiration = aci.iso8601_format(dateutil.parser.parse(expiration).replace(tzinfo=tzutc()))\n        except Exception as e:\n            module.fail_json(msg=\"Failed to parse date format '%s', %s\" % (module.params['expiration'], e))\n\n    aci.construct_url(\n        root_class=dict(\n            aci_class='aaaUser',\n            aci_rn='userext/user-{0}'.format(aaa_user),\n            filter_target='eq(aaaUser.name, \"{0}\")'.format(aaa_user),\n            module_object=aaa_user,\n        ),\n    )\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='aaaUser',\n            class_config=dict(\n                accountStatus=enabled,\n                clearPwdHistory=clear_password_history,\n                email=email,\n                expiration=expiration,\n                expires=expires,\n                firstName=first_name,\n                lastName=last_name,\n                name=aaa_user,\n                phone=phone,\n                pwd=aaa_password,\n                pwdLifeTime=aaa_password_lifetime,\n                pwdUpdateRequired=aaa_password_update_required,\n            ),\n        )\n\n        aci.get_diff(aci_class='aaaUser')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_aaa_user.py", "id": "f17a101cc32f01b69bf654b856b50fa3", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_aaa_user.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}