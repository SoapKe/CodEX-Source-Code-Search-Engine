{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestLinkedList(object):\n\n    def test_insert_to_front(self):\n        print('Test: insert_to_front on an empty list')\n        linked_list = LinkedList(None)\n        linked_list.insert_to_front(10)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: insert_to_front on a None')\n        linked_list.insert_to_front(None)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: insert_to_front general case')\n        linked_list.insert_to_front('a')\n        linked_list.insert_to_front('bc')\n        assert_equal(linked_list.get_all_data(), ['bc', 'a', 10])\n\n        print('Success: test_insert_to_front\\n')\n\n    def test_append(self):\n        print('Test: append on an empty list')\n        linked_list = LinkedList(None)\n        linked_list.append(10)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: append a None')\n        linked_list.append(None)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: append general case')\n        linked_list.append('a')\n        linked_list.append('bc')\n        assert_equal(linked_list.get_all_data(), [10, 'a', 'bc'])\n\n        print('Success: test_append\\n')\n\n    def test_find(self):\n        print('Test: find on an empty list')\n        linked_list = LinkedList(None)\n        node = linked_list.find('a')\n        assert_equal(node, None)\n\n        print('Test: find a None')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        node = linked_list.find(None)\n        assert_equal(node, None)\n\n        print('Test: find general case with matches')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        linked_list.insert_to_front('a')\n        linked_list.insert_to_front('bc')\n        node = linked_list.find('a')\n        assert_equal(str(node), 'a')\n\n        print('Test: find general case with no matches')\n        node = linked_list.find('aaa')\n        assert_equal(node, None)\n\n        print('Success: test_find\\n')\n\n    def test_delete(self):\n        print('Test: delete on an empty list')\n        linked_list = LinkedList(None)\n        linked_list.delete('a')\n        assert_equal(linked_list.get_all_data(), [])\n\n        print('Test: delete a None')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        linked_list.delete(None)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: delete general case with matches')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        linked_list.insert_to_front('a')\n        linked_list.insert_to_front('bc')\n        linked_list.delete('a')\n        assert_equal(linked_list.get_all_data(), ['bc', 10])\n\n        print('Test: delete general case with no matches')\n        linked_list.delete('aa')\n        assert_equal(linked_list.get_all_data(), ['bc', 10])\n\n        print('Success: test_delete\\n')\n\n    def test_len(self):\n        print('Test: len on an empty list')\n        linked_list = LinkedList(None)\n        assert_equal(len(linked_list), 0)\n\n        print('Test: len general case')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        linked_list.insert_to_front('a')\n        linked_list.insert_to_front('bc')\n        assert_equal(len(linked_list), 3)\n\n        print('Success: test_len\\n')\n\n\ndef main():\n    test = TestLinkedList()\n    test.test_insert_to_front()\n    test.test_append()\n    test.test_find()\n    test.test_delete()\n    test.test_len()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestLinkedList(object):\n\n    def test_insert_to_front(self):\n        print('Test: insert_to_front on an empty list')\n        linked_list = LinkedList(None)\n        linked_list.insert_to_front(10)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: insert_to_front on a None')\n        linked_list.insert_to_front(None)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: insert_to_front general case')\n        linked_list.insert_to_front('a')\n        linked_list.insert_to_front('bc')\n        assert_equal(linked_list.get_all_data(), ['bc', 'a', 10])\n\n        print('Success: test_insert_to_front\\n')\n\n    def test_append(self):\n        print('Test: append on an empty list')\n        linked_list = LinkedList(None)\n        linked_list.append(10)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: append a None')\n        linked_list.append(None)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: append general case')\n        linked_list.append('a')\n        linked_list.append('bc')\n        assert_equal(linked_list.get_all_data(), [10, 'a', 'bc'])\n\n        print('Success: test_append\\n')\n\n    def test_find(self):\n        print('Test: find on an empty list')\n        linked_list = LinkedList(None)\n        node = linked_list.find('a')\n        assert_equal(node, None)\n\n        print('Test: find a None')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        node = linked_list.find(None)\n        assert_equal(node, None)\n\n        print('Test: find general case with matches')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        linked_list.insert_to_front('a')\n        linked_list.insert_to_front('bc')\n        node = linked_list.find('a')\n        assert_equal(str(node), 'a')\n\n        print('Test: find general case with no matches')\n        node = linked_list.find('aaa')\n        assert_equal(node, None)\n\n        print('Success: test_find\\n')\n\n    def test_delete(self):\n        print('Test: delete on an empty list')\n        linked_list = LinkedList(None)\n        linked_list.delete('a')\n        assert_equal(linked_list.get_all_data(), [])\n\n        print('Test: delete a None')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        linked_list.delete(None)\n        assert_equal(linked_list.get_all_data(), [10])\n\n        print('Test: delete general case with matches')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        linked_list.insert_to_front('a')\n        linked_list.insert_to_front('bc')\n        linked_list.delete('a')\n        assert_equal(linked_list.get_all_data(), ['bc', 10])\n\n        print('Test: delete general case with no matches')\n        linked_list.delete('aa')\n        assert_equal(linked_list.get_all_data(), ['bc', 10])\n\n        print('Success: test_delete\\n')\n\n    def test_len(self):\n        print('Test: len on an empty list')\n        linked_list = LinkedList(None)\n        assert_equal(len(linked_list), 0)\n\n        print('Test: len general case')\n        head = Node(10)\n        linked_list = LinkedList(head)\n        linked_list.insert_to_front('a')\n        linked_list.insert_to_front('bc')\n        assert_equal(len(linked_list), 3)\n\n        print('Success: test_len\\n')\n\n\ndef main():\n    test = TestLinkedList()\n    test.test_insert_to_front()\n    test.test_append()\n    test.test_find()\n    test.test_delete()\n    test.test_len()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_linked_list.py", "id": "69d9a9e6baab704fde5713eca744f338", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/linked_lists/linked_list/test_linked_list.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}