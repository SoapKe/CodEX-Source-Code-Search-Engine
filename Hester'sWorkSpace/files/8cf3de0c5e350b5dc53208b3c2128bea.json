{"author": "deepfakes", "code": "\n\n\nencoderH5 = 'IAE_encoder.h5'\ndecoderH5 = 'IAE_decoder.h5'\ninter_AH5 = 'IAE_inter_A.h5'\ninter_BH5 = 'IAE_inter_B.h5'\ninter_bothH5 = 'IAE_inter_both.h5'\n\n\nclass AutoEncoder:\n    def __init__(self, model_dir, gpus):\n        self.model_dir = model_dir\n        self.gpus = gpus\n\n        self.encoder = self.Encoder()\n        self.decoder = self.Decoder()\n        self.inter_A = self.Intermidiate()\n        self.inter_B = self.Intermidiate()\n        self.inter_both = self.Intermidiate()\n\n        self.initModel()\n\n    def load(self, swapped):\n        (face_A,face_B) = (inter_AH5, inter_BH5) if not swapped else (inter_AH5, inter_BH5)\n\n        try:\n            self.encoder.load_weights(str(self.model_dir / encoderH5))\n            self.decoder.load_weights(str(self.model_dir / decoderH5))\n            self.inter_both.load_weights(str(self.model_dir / inter_bothH5))\n            self.inter_A.load_weights(str(self.model_dir / face_A))\n            self.inter_B.load_weights(str(self.model_dir / face_B))\n            print('loaded model weights')\n            return True\n        except Exception as e:\n            print('Failed loading existing training data.')\n            print(e)\n            return False\n\n    def save_weights(self):\n        self.encoder.save_weights(str(self.model_dir / encoderH5))\n        self.decoder.save_weights(str(self.model_dir / decoderH5))\n        self.inter_both.save_weights(str(self.model_dir / inter_bothH5))\n        self.inter_A.save_weights(str(self.model_dir / inter_AH5))\n        self.inter_B.save_weights(str(self.model_dir / inter_BH5))\n        print('saved model weights')\n", "comments": "  improved autoencoder base classes ", "content": "# Improved-AutoEncoder base classes\n\n\nencoderH5 = 'IAE_encoder.h5'\ndecoderH5 = 'IAE_decoder.h5'\ninter_AH5 = 'IAE_inter_A.h5'\ninter_BH5 = 'IAE_inter_B.h5'\ninter_bothH5 = 'IAE_inter_both.h5'\n\n\nclass AutoEncoder:\n    def __init__(self, model_dir, gpus):\n        self.model_dir = model_dir\n        self.gpus = gpus\n\n        self.encoder = self.Encoder()\n        self.decoder = self.Decoder()\n        self.inter_A = self.Intermidiate()\n        self.inter_B = self.Intermidiate()\n        self.inter_both = self.Intermidiate()\n\n        self.initModel()\n\n    def load(self, swapped):\n        (face_A,face_B) = (inter_AH5, inter_BH5) if not swapped else (inter_AH5, inter_BH5)\n\n        try:\n            self.encoder.load_weights(str(self.model_dir / encoderH5))\n            self.decoder.load_weights(str(self.model_dir / decoderH5))\n            self.inter_both.load_weights(str(self.model_dir / inter_bothH5))\n            self.inter_A.load_weights(str(self.model_dir / face_A))\n            self.inter_B.load_weights(str(self.model_dir / face_B))\n            print('loaded model weights')\n            return True\n        except Exception as e:\n            print('Failed loading existing training data.')\n            print(e)\n            return False\n\n    def save_weights(self):\n        self.encoder.save_weights(str(self.model_dir / encoderH5))\n        self.decoder.save_weights(str(self.model_dir / decoderH5))\n        self.inter_both.save_weights(str(self.model_dir / inter_bothH5))\n        self.inter_A.save_weights(str(self.model_dir / inter_AH5))\n        self.inter_B.save_weights(str(self.model_dir / inter_BH5))\n        print('saved model weights')\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "AutoEncoder.py", "id": "8cf3de0c5e350b5dc53208b3c2128bea", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/plugins/Model_IAE/AutoEncoder.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}