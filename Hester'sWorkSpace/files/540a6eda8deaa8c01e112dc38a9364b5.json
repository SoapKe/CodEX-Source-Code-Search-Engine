{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n)\n\n\nclass MwaveIE(InfoExtractor):\n    _VALID_URL = r'https?://mwave\\.interest\\.me/(?:[^/]+/)?mnettv/videodetail\\.m\\?searchVideoDetailVO\\.clip_id=(?P<id>[0-9]+)'\n    _URL_TEMPLATE = 'http://mwave.interest.me/mnettv/videodetail.m?searchVideoDetailVO.clip_id=%s'\n    _TESTS = [{\n        'url': 'http://mwave.interest.me/mnettv/videodetail.m?searchVideoDetailVO.clip_id=168859',\n        \n        'info_dict': {\n            'id': '168859',\n            'ext': 'flv',\n            'title': '[M COUNTDOWN] SISTAR - SHAKE IT',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'M COUNTDOWN',\n            'duration': 206,\n            'view_count': int,\n        }\n    }, {\n        'url': 'http://mwave.interest.me/en/mnettv/videodetail.m?searchVideoDetailVO.clip_id=176199',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        vod_info = self._download_json(\n            'http://mwave.interest.me/onair/vod_info.m?vodtype=CL&sectorid=&endinfo=Y&id=%s' % video_id,\n            video_id, 'Download vod JSON')\n\n        formats = []\n        for num, cdn_info in enumerate(vod_info['cdn']):\n            stream_url = cdn_info.get('url')\n            if not stream_url:\n                continue\n            stream_name = cdn_info.get('name') or compat_str(num)\n            f4m_stream = self._download_json(\n                stream_url, video_id,\n                'Download %s stream JSON' % stream_name)\n            f4m_url = f4m_stream.get('fileurl')\n            if not f4m_url:\n                continue\n            formats.extend(\n                self._extract_f4m_formats(f4m_url + '&hdcore=3.0.3', video_id, f4m_id=stream_name))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': vod_info['title'],\n            'thumbnail': vod_info.get('cover'),\n            'uploader': vod_info.get('program_title'),\n            'duration': parse_duration(vod_info.get('time')),\n            'view_count': int_or_none(vod_info.get('hit')),\n            'formats': formats,\n        }\n\n\nclass MwaveMeetGreetIE(InfoExtractor):\n    _VALID_URL = r'https?://mwave\\.interest\\.me/(?:[^/]+/)?meetgreet/view/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://mwave.interest.me/meetgreet/view/256',\n        'info_dict': {\n            'id': '173294',\n            'ext': 'flv',\n            'title': '[MEET&GREET] Park BoRam',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Mwave',\n            'duration': 3634,\n            'view_count': int,\n        }\n    }, {\n        'url': 'http://mwave.interest.me/en/meetgreet/view/256',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        clip_id = self._html_search_regex(\n            r'<iframe[^>]+src=\"/mnettv/ifr_clip\\.m\\?searchVideoDetailVO\\.clip_id=(\\d+)',\n            webpage, 'clip ID')\n        clip_url = MwaveIE._URL_TEMPLATE % clip_id\n        return self.url_result(clip_url, 'Mwave', clip_id)\n", "comments": "# md5 is unstable\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n)\n\n\nclass MwaveIE(InfoExtractor):\n    _VALID_URL = r'https?://mwave\\.interest\\.me/(?:[^/]+/)?mnettv/videodetail\\.m\\?searchVideoDetailVO\\.clip_id=(?P<id>[0-9]+)'\n    _URL_TEMPLATE = 'http://mwave.interest.me/mnettv/videodetail.m?searchVideoDetailVO.clip_id=%s'\n    _TESTS = [{\n        'url': 'http://mwave.interest.me/mnettv/videodetail.m?searchVideoDetailVO.clip_id=168859',\n        # md5 is unstable\n        'info_dict': {\n            'id': '168859',\n            'ext': 'flv',\n            'title': '[M COUNTDOWN] SISTAR - SHAKE IT',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'M COUNTDOWN',\n            'duration': 206,\n            'view_count': int,\n        }\n    }, {\n        'url': 'http://mwave.interest.me/en/mnettv/videodetail.m?searchVideoDetailVO.clip_id=176199',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        vod_info = self._download_json(\n            'http://mwave.interest.me/onair/vod_info.m?vodtype=CL&sectorid=&endinfo=Y&id=%s' % video_id,\n            video_id, 'Download vod JSON')\n\n        formats = []\n        for num, cdn_info in enumerate(vod_info['cdn']):\n            stream_url = cdn_info.get('url')\n            if not stream_url:\n                continue\n            stream_name = cdn_info.get('name') or compat_str(num)\n            f4m_stream = self._download_json(\n                stream_url, video_id,\n                'Download %s stream JSON' % stream_name)\n            f4m_url = f4m_stream.get('fileurl')\n            if not f4m_url:\n                continue\n            formats.extend(\n                self._extract_f4m_formats(f4m_url + '&hdcore=3.0.3', video_id, f4m_id=stream_name))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': vod_info['title'],\n            'thumbnail': vod_info.get('cover'),\n            'uploader': vod_info.get('program_title'),\n            'duration': parse_duration(vod_info.get('time')),\n            'view_count': int_or_none(vod_info.get('hit')),\n            'formats': formats,\n        }\n\n\nclass MwaveMeetGreetIE(InfoExtractor):\n    _VALID_URL = r'https?://mwave\\.interest\\.me/(?:[^/]+/)?meetgreet/view/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://mwave.interest.me/meetgreet/view/256',\n        'info_dict': {\n            'id': '173294',\n            'ext': 'flv',\n            'title': '[MEET&GREET] Park BoRam',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Mwave',\n            'duration': 3634,\n            'view_count': int,\n        }\n    }, {\n        'url': 'http://mwave.interest.me/en/meetgreet/view/256',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        clip_id = self._html_search_regex(\n            r'<iframe[^>]+src=\"/mnettv/ifr_clip\\.m\\?searchVideoDetailVO\\.clip_id=(\\d+)',\n            webpage, 'clip ID')\n        clip_url = MwaveIE._URL_TEMPLATE % clip_id\n        return self.url_result(clip_url, 'Mwave', clip_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mwave.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mwave.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}