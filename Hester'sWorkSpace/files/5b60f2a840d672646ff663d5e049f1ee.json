{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport os\n\nfrom odoo import api, fields, models\n\n\nclass IrModuleModule(models.Model):\n    _name = \"ir.module.module\"\n    _inherit = _name\n\n    image_ids = fields.One2many('ir.attachment', 'res_id',\n                                domain=[('res_model', '=', _name), ('mimetype', '=like', 'image/%')],\n                                string='Screenshots', readonly=True)\n\n    @api.model\n    def update_list(self):\n        res = super(IrModuleModule, self).update_list()\n\n        IrAttachment = self.env['ir.attachment']\n        existing_urls = IrAttachment.search_read([['res_model', '=', self._name], ['type', '=', 'url']], ['url'])\n        existing_urls = [url_wrapped['url'] for url_wrapped in existing_urls]\n\n        for app in self.search([]):\n            terp = self.get_module_info(app.name)\n            images = terp.get('images', [])\n            for image in images:\n                image_path = os.path.join(app.name, image)\n                if image_path not in existing_urls:\n                    image_name = os.path.basename(image_path)\n                    IrAttachment.create({\n                        'type': 'url',\n                        'name': image_name,\n                        'datas_fname': image_name,\n                        'url': image_path,\n                        'res_model': self._name,\n                        'res_id': app.id,\n                    })\n\n        return res\n\n    @api.multi\n    def button_choose_theme(self):\n        theme_category = self.env.ref('base.module_category_theme', False)\n        hidden_category = self.env.ref('base.module_category_hidden', False)\n        theme_hidden_category = self.env.ref('base.module_category_theme_hidden', False)\n\n        theme_category_id = theme_category.id if theme_category else 0\n        hidden_categories_ids = [hidden_category.id if hidden_category else 0, theme_hidden_category.id if theme_hidden_category else 0]\n\n        self.search([ # Uninstall the theme(s) which is (are) installed\n            ('state', '=', 'installed'),\n            '|', ('category_id', 'not in', hidden_categories_ids), ('name', '=', 'theme_default'),\n            '|', ('category_id', '=', theme_category_id), ('category_id.parent_id', '=', theme_category_id)\n        ]).button_immediate_uninstall()\n\n        next_action = self.button_immediate_install() \n        if next_action.get('tag') == 'reload' and not next_action.get('params', {}).get('menu_id'):\n            next_action = self.env.ref('website.action_website').read()[0]\n\n        return next_action\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     uninstall theme(s) (are) installed    then install new chosen one ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport os\n\nfrom odoo import api, fields, models\n\n\nclass IrModuleModule(models.Model):\n    _name = \"ir.module.module\"\n    _inherit = _name\n\n    image_ids = fields.One2many('ir.attachment', 'res_id',\n                                domain=[('res_model', '=', _name), ('mimetype', '=like', 'image/%')],\n                                string='Screenshots', readonly=True)\n\n    @api.model\n    def update_list(self):\n        res = super(IrModuleModule, self).update_list()\n\n        IrAttachment = self.env['ir.attachment']\n        existing_urls = IrAttachment.search_read([['res_model', '=', self._name], ['type', '=', 'url']], ['url'])\n        existing_urls = [url_wrapped['url'] for url_wrapped in existing_urls]\n\n        for app in self.search([]):\n            terp = self.get_module_info(app.name)\n            images = terp.get('images', [])\n            for image in images:\n                image_path = os.path.join(app.name, image)\n                if image_path not in existing_urls:\n                    image_name = os.path.basename(image_path)\n                    IrAttachment.create({\n                        'type': 'url',\n                        'name': image_name,\n                        'datas_fname': image_name,\n                        'url': image_path,\n                        'res_model': self._name,\n                        'res_id': app.id,\n                    })\n\n        return res\n\n    @api.multi\n    def button_choose_theme(self):\n        theme_category = self.env.ref('base.module_category_theme', False)\n        hidden_category = self.env.ref('base.module_category_hidden', False)\n        theme_hidden_category = self.env.ref('base.module_category_theme_hidden', False)\n\n        theme_category_id = theme_category.id if theme_category else 0\n        hidden_categories_ids = [hidden_category.id if hidden_category else 0, theme_hidden_category.id if theme_hidden_category else 0]\n\n        self.search([ # Uninstall the theme(s) which is (are) installed\n            ('state', '=', 'installed'),\n            '|', ('category_id', 'not in', hidden_categories_ids), ('name', '=', 'theme_default'),\n            '|', ('category_id', '=', theme_category_id), ('category_id.parent_id', '=', theme_category_id)\n        ]).button_immediate_uninstall()\n\n        next_action = self.button_immediate_install() # Then install the new chosen one\n        if next_action.get('tag') == 'reload' and not next_action.get('params', {}).get('menu_id'):\n            next_action = self.env.ref('website.action_website').read()[0]\n\n        return next_action\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "ir_module_module.py", "id": "5b60f2a840d672646ff663d5e049f1ee", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_theme_install/models/ir_module_module.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}