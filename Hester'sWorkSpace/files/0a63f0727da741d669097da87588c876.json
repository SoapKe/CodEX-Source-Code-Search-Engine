{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport base64\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.addons.base.ir.ir_qweb import AssetsBundle\nfrom odoo.addons.web.controllers.main import binary_content\n\n\nclass LivechatController(http.Controller):\n\n    @http.route('/im_livechat/external_lib.<any(css,js):ext>', type='http', auth='none')\n    def livechat_lib(self, ext, **kwargs):\n        # _get_asset return the bundle html code (script and link list) but we want to use the attachment content\n        xmlid = 'im_livechat.external_lib'\n        files, remains = request.env[\"ir.qweb\"]._get_asset_content(xmlid, options=request.context)\n        asset = AssetsBundle(xmlid, files, remains)\n\n        mock_attachment = getattr(asset, ext)()\n        if isinstance(mock_attachment, list):  \n            mock_attachment = mock_attachment[0]\n        # can't use /web/content directly because we don't have attachment ids (attachments must be created)\n        status, headers, content = binary_content(id=mock_attachment.id, unique=asset.checksum)\n        content_base64 = base64.b64decode(content) if content else ''\n        headers.append(('Content-Length', len(content_base64)))\n        return request.make_response(content_base64, headers)\n\n    @http.route('/im_livechat/support/<int:channel_id>', type='http', auth='public')\n    def support_page(self, channel_id, **kwargs):\n        channel = request.env['im_livechat.channel'].sudo().browse(channel_id)\n        return request.render('im_livechat.support_page', {'channel': channel})\n\n    @http.route('/im_livechat/loader/<int:channel_id>', type='http', auth='public')\n    def loader(self, channel_id, **kwargs):\n        username = kwargs.get(\"username\", _(\"Visitor\"))\n        channel = request.env['im_livechat.channel'].sudo().browse(channel_id)\n        info = request.env['im_livechat.channel'].get_livechat_info(channel.id, username=username)\n        return request.render('im_livechat.loader', {'info': info, 'web_session_required': True}, headers=[('Content-Type', 'application/javascript')])\n\n    @http.route('/im_livechat/init', type='json', auth=\"public\")\n    def livechat_init(self, channel_id):\n        LivechatChannel = request.env['im_livechat.channel']\n        available = len(LivechatChannel.browse(channel_id).get_available_users())\n        rule = {}\n        if available:\n            \n            country_id = False\n            country_code = request.session.geoip and request.session.geoip.get('country_code') or False\n            if country_code:\n                country_ids = request.env['res.country'].sudo().search([('code', '=', country_code)])\n                if country_ids:\n                    country_id = country_ids[0].id\n            \n            url = request.httprequest.headers.get('Referer')\n            \n            matching_rule = request.env['im_livechat.channel.rule'].sudo().match_rule(channel_id, url, country_id)\n            if matching_rule:\n                rule = {\n                    'action': matching_rule.action,\n                    'auto_popup_timer': matching_rule.auto_popup_timer,\n                    'regex_url': matching_rule.regex_url,\n                }\n        return {\n            'available_for_me': available and (not rule or rule['action'] != 'hide_button'),\n            'rule': rule,\n        }\n\n    @http.route('/im_livechat/get_session', type=\"json\", auth='public')\n    def get_session(self, channel_id, anonymous_name, **kwargs):\n        \n        if request.session.geoip:\n            anonymous_name = anonymous_name + \" (\"+request.session.geoip.get('country_name', \"\")+\")\"\n        # if the user is identifiy (eg: portal user on the frontend), don't use the anonymous name. The user will be added to session.\n        if request.session.uid:\n            anonymous_name = request.env.user.name\n        return request.env[\"im_livechat.channel\"].with_context(lang=False).get_mail_channel(channel_id, anonymous_name)\n\n    @http.route('/im_livechat/feedback', type='json', auth='public')\n    def feedback(self, uuid, rate, reason=None, **kwargs):\n        Channel = request.env['mail.channel']\n        Rating = request.env['rating.rating']\n        channel = Channel.sudo().search([('uuid', '=', uuid)], limit=1)\n        if channel:\n            \n            values = {\n                'rating': rate,\n                'consumed': True,\n                'feedback': reason,\n            }\n            if not channel.rating_ids:\n                res_model_id = request.env['ir.model'].sudo().search([('model', '=', channel._name)], limit=1).id\n                values.update({\n                    'res_id': channel.id,\n                    'res_model_id': res_model_id,\n                })\n                # find the partner (operator)\n                if channel.channel_partner_ids:\n                    values['rated_partner_id'] = channel.channel_partner_ids[0] and channel.channel_partner_ids[0].id or False\n                \n                values['partner_id'] = request.env.user.partner_id.id if request.session.uid else False\n                \n                rating = Rating.sudo().create(values)\n            else:\n                rating = channel.rating_ids[0]\n                rating.write(values)\n            return rating.id\n        return False\n\n    @http.route('/im_livechat/history', type=\"json\", auth=\"public\")\n    def history_pages(self, pid, channel_uuid, page_history=None):\n        partner_ids = (pid, request.env.user.partner_id.id)\n        channel = request.env['mail.channel'].sudo().search([('uuid', '=', channel_uuid), ('channel_partner_ids', 'in', partner_ids)])\n        if channel:\n            channel._send_history_message(pid, page_history)\n        return True\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details      get asset return bundle html code (script link list) want use attachment content    suppose css asset required split pages    use  web content directly attachment ids (attachments must created)    find country request    extract url    find first matching rule given country url    geoip  add country name anonymous name    user identifiy (eg  portal user frontend)  use anonymous name  the user added session     limit creation   one rating per session    find partner (operator)    logged user  set partner rating    create rating ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport base64\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.addons.base.ir.ir_qweb import AssetsBundle\nfrom odoo.addons.web.controllers.main import binary_content\n\n\nclass LivechatController(http.Controller):\n\n    @http.route('/im_livechat/external_lib.<any(css,js):ext>', type='http', auth='none')\n    def livechat_lib(self, ext, **kwargs):\n        # _get_asset return the bundle html code (script and link list) but we want to use the attachment content\n        xmlid = 'im_livechat.external_lib'\n        files, remains = request.env[\"ir.qweb\"]._get_asset_content(xmlid, options=request.context)\n        asset = AssetsBundle(xmlid, files, remains)\n\n        mock_attachment = getattr(asset, ext)()\n        if isinstance(mock_attachment, list):  # suppose that CSS asset will not required to be split in pages\n            mock_attachment = mock_attachment[0]\n        # can't use /web/content directly because we don't have attachment ids (attachments must be created)\n        status, headers, content = binary_content(id=mock_attachment.id, unique=asset.checksum)\n        content_base64 = base64.b64decode(content) if content else ''\n        headers.append(('Content-Length', len(content_base64)))\n        return request.make_response(content_base64, headers)\n\n    @http.route('/im_livechat/support/<int:channel_id>', type='http', auth='public')\n    def support_page(self, channel_id, **kwargs):\n        channel = request.env['im_livechat.channel'].sudo().browse(channel_id)\n        return request.render('im_livechat.support_page', {'channel': channel})\n\n    @http.route('/im_livechat/loader/<int:channel_id>', type='http', auth='public')\n    def loader(self, channel_id, **kwargs):\n        username = kwargs.get(\"username\", _(\"Visitor\"))\n        channel = request.env['im_livechat.channel'].sudo().browse(channel_id)\n        info = request.env['im_livechat.channel'].get_livechat_info(channel.id, username=username)\n        return request.render('im_livechat.loader', {'info': info, 'web_session_required': True}, headers=[('Content-Type', 'application/javascript')])\n\n    @http.route('/im_livechat/init', type='json', auth=\"public\")\n    def livechat_init(self, channel_id):\n        LivechatChannel = request.env['im_livechat.channel']\n        available = len(LivechatChannel.browse(channel_id).get_available_users())\n        rule = {}\n        if available:\n            # find the country from the request\n            country_id = False\n            country_code = request.session.geoip and request.session.geoip.get('country_code') or False\n            if country_code:\n                country_ids = request.env['res.country'].sudo().search([('code', '=', country_code)])\n                if country_ids:\n                    country_id = country_ids[0].id\n            # extract url\n            url = request.httprequest.headers.get('Referer')\n            # find the first matching rule for the given country and url\n            matching_rule = request.env['im_livechat.channel.rule'].sudo().match_rule(channel_id, url, country_id)\n            if matching_rule:\n                rule = {\n                    'action': matching_rule.action,\n                    'auto_popup_timer': matching_rule.auto_popup_timer,\n                    'regex_url': matching_rule.regex_url,\n                }\n        return {\n            'available_for_me': available and (not rule or rule['action'] != 'hide_button'),\n            'rule': rule,\n        }\n\n    @http.route('/im_livechat/get_session', type=\"json\", auth='public')\n    def get_session(self, channel_id, anonymous_name, **kwargs):\n        # if geoip, add the country name to the anonymous name\n        if request.session.geoip:\n            anonymous_name = anonymous_name + \" (\"+request.session.geoip.get('country_name', \"\")+\")\"\n        # if the user is identifiy (eg: portal user on the frontend), don't use the anonymous name. The user will be added to session.\n        if request.session.uid:\n            anonymous_name = request.env.user.name\n        return request.env[\"im_livechat.channel\"].with_context(lang=False).get_mail_channel(channel_id, anonymous_name)\n\n    @http.route('/im_livechat/feedback', type='json', auth='public')\n    def feedback(self, uuid, rate, reason=None, **kwargs):\n        Channel = request.env['mail.channel']\n        Rating = request.env['rating.rating']\n        channel = Channel.sudo().search([('uuid', '=', uuid)], limit=1)\n        if channel:\n            # limit the creation : only ONE rating per session\n            values = {\n                'rating': rate,\n                'consumed': True,\n                'feedback': reason,\n            }\n            if not channel.rating_ids:\n                res_model_id = request.env['ir.model'].sudo().search([('model', '=', channel._name)], limit=1).id\n                values.update({\n                    'res_id': channel.id,\n                    'res_model_id': res_model_id,\n                })\n                # find the partner (operator)\n                if channel.channel_partner_ids:\n                    values['rated_partner_id'] = channel.channel_partner_ids[0] and channel.channel_partner_ids[0].id or False\n                # if logged in user, set its partner on rating\n                values['partner_id'] = request.env.user.partner_id.id if request.session.uid else False\n                # create the rating\n                rating = Rating.sudo().create(values)\n            else:\n                rating = channel.rating_ids[0]\n                rating.write(values)\n            return rating.id\n        return False\n\n    @http.route('/im_livechat/history', type=\"json\", auth=\"public\")\n    def history_pages(self, pid, channel_uuid, page_history=None):\n        partner_ids = (pid, request.env.user.partner_id.id)\n        channel = request.env['mail.channel'].sudo().search([('uuid', '=', channel_uuid), ('channel_partner_ids', 'in', partner_ids)])\n        if channel:\n            channel._send_history_message(pid, page_history)\n        return True\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "0a63f0727da741d669097da87588c876", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/im_livechat/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}