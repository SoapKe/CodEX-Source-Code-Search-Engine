{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import remove_start\n\n\nclass PressTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?presstv\\.ir/[^/]+/(?P<y>\\d+)/(?P<m>\\d+)/(?P<d>\\d+)/(?P<id>\\d+)/(?P<display_id>[^/]+)?'\n\n    _TEST = {\n        'url': 'http://www.presstv.ir/Detail/2016/04/09/459911/Australian-sewerage-treatment-facility-/',\n        'md5': '5d7e3195a447cb13e9267e931d8dd5a5',\n        'info_dict': {\n            'id': '459911',\n            'display_id': 'Australian-sewerage-treatment-facility-',\n            'ext': 'mp4',\n            'title': 'Organic mattresses used to clean waste water',\n            'upload_date': '20160409',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'description': 'md5:20002e654bbafb6908395a5c0cfcd125'\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        \n        video_url = self._hidden_inputs(webpage)['inpPlayback']\n\n        \n        \n        base_url = 'http://192.99.219.222:82/presstv'\n        _formats = [\n            (180, '_low200.mp4'),\n            (360, '_low400.mp4'),\n            (720, '_low800.mp4'),\n            (1080, '.mp4')\n        ]\n\n        formats = [{\n            'url': base_url + video_url[:-4] + extension,\n            'format_id': '%dp' % height,\n            'height': height,\n        } for height, extension in _formats]\n\n        \n        title = remove_start(\n            self._html_search_meta('title', webpage, fatal=True), 'PressTV-')\n\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._og_search_description(webpage)\n\n        upload_date = '%04d%02d%02d' % (\n            int(mobj.group('y')),\n            int(mobj.group('m')),\n            int(mobj.group('d')),\n        )\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'description': description\n        }\n", "comments": "# coding: utf-8\n# extract video URL from webpage\n# build list of available formats\n# specified in http://www.presstv.ir/Scripts/playback.js\n# extract video metadata\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import remove_start\n\n\nclass PressTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?presstv\\.ir/[^/]+/(?P<y>\\d+)/(?P<m>\\d+)/(?P<d>\\d+)/(?P<id>\\d+)/(?P<display_id>[^/]+)?'\n\n    _TEST = {\n        'url': 'http://www.presstv.ir/Detail/2016/04/09/459911/Australian-sewerage-treatment-facility-/',\n        'md5': '5d7e3195a447cb13e9267e931d8dd5a5',\n        'info_dict': {\n            'id': '459911',\n            'display_id': 'Australian-sewerage-treatment-facility-',\n            'ext': 'mp4',\n            'title': 'Organic mattresses used to clean waste water',\n            'upload_date': '20160409',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'description': 'md5:20002e654bbafb6908395a5c0cfcd125'\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        # extract video URL from webpage\n        video_url = self._hidden_inputs(webpage)['inpPlayback']\n\n        # build list of available formats\n        # specified in http://www.presstv.ir/Scripts/playback.js\n        base_url = 'http://192.99.219.222:82/presstv'\n        _formats = [\n            (180, '_low200.mp4'),\n            (360, '_low400.mp4'),\n            (720, '_low800.mp4'),\n            (1080, '.mp4')\n        ]\n\n        formats = [{\n            'url': base_url + video_url[:-4] + extension,\n            'format_id': '%dp' % height,\n            'height': height,\n        } for height, extension in _formats]\n\n        # extract video metadata\n        title = remove_start(\n            self._html_search_meta('title', webpage, fatal=True), 'PressTV-')\n\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._og_search_description(webpage)\n\n        upload_date = '%04d%02d%02d' % (\n            int(mobj.group('y')),\n            int(mobj.group('m')),\n            int(mobj.group('d')),\n        )\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'description': description\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "presstv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/presstv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}