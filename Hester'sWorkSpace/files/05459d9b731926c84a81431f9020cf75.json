{"author": "XX-net", "code": "import os\n\nimport xlog\nlogger = xlog.getLogger(\"tls_relay\")\nlogger.set_buffer(500)\n\nfrom config import Config\nimport host_manager\nfrom front_base.openssl_wrap import SSLContext\nfrom front_base.connect_creator import ConnectCreator\nfrom front_base.ip_manager import IpManager\nfrom front_base.http_dispatcher import HttpsDispatcher\nfrom front_base.connect_manager import ConnectManager\nfrom front_base.ip_source import IpSimpleSource\nfrom front_base.check_ip import CheckIp\nfrom gae_proxy.local import check_local_network\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath(os.path.join(current_path, os.pardir, os.pardir, os.pardir))\ndata_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, 'data'))\nmodule_data_path = os.path.join(data_path, 'x_tunnel')\n\n\nclass Front(object):\n    name = \"tls_relay_front\"\n\n    def __init__(self):\n        self.running = True\n\n        self.logger = logger\n        config_path = os.path.join(module_data_path, \"tls_relay.json\")\n        self.config = Config(config_path)\n\n        self.ca_cert_fn = os.path.join(module_data_path, \"tls_relay_CA.crt\")\n        self.openssl_context = SSLContext(logger)\n        if os.path.isfile(self.ca_cert_fn):\n            self.openssl_context.set_ca(self.ca_cert_fn)\n\n        host_fn = os.path.join(module_data_path, \"tls_host.json\")\n        self.host_manager = host_manager.HostManager(host_fn)\n\n        self.connect_creator = ConnectCreator(logger, self.config, self.openssl_context, self.host_manager)\n        self.check_ip = CheckIp(xlog.null, self.config, self.connect_creator)\n\n        ip_source = IpSimpleSource(self.config.ip_source_ips)\n\n        default_ip_list_fn = \"\"\n        ip_list_fn = os.path.join(module_data_path, \"tls_relay_ip_list.txt\")\n        self.ip_manager = IpManager(logger, self.config, ip_source, check_local_network, self.check_ip.check_ip,\n                 default_ip_list_fn, ip_list_fn, scan_ip_log=None)\n        for ip in self.config.ip_source_ips:\n            self.ip_manager.add_ip(ip, 100)\n\n        self.connect_manager = ConnectManager(logger, self.config, self.connect_creator, self.ip_manager, check_local_network)\n        self.http_dispatcher = HttpsDispatcher(logger, self.config, self.ip_manager, self.connect_manager)\n\n        self.account = \"\"\n        self.password = \"\"\n\n    def get_dispatcher(self, host=None):\n        return self.http_dispatcher\n\n    def set_x_tunnel_account(self, account, password):\n        self.account = account\n        self.password = password\n\n    def set_ips(self, ips):\n        if not ips:\n            return\n\n        host_info = {}\n        ca_certs = []\n        ipss = []\n        for ip in ips:\n            dat = ips[ip]\n            ca_cert = dat[\"ca_crt\"]\n            sni = dat[\"sni\"]\n\n            host_info[ip] = {\"sni\":sni, \"ca_crt\":ca_cert}\n            if ca_cert not in ca_certs:\n                ca_certs.append(ca_cert)\n            ipss.append(ip)\n\n        self.ip_manager.update_ips(ipss)\n        self.ip_manager.save(True)\n        self.host_manager.set_host(host_info)\n\n        ca_content = \"\\n\\n\".join(ca_certs)\n        with open(self.ca_cert_fn, \"w\") as fd:\n            fd.write(ca_content)\n        self.openssl_context.set_ca(self.ca_cert_fn)\n        self.logger.info(\"set_ips:%s\", \",\".join(ipss))\n\n    def request(self, method, host, path=\"/\", headers={}, data=\"\", timeout=120):\n        headers = dict(headers)\n        headers[\"XX-Account\"] = self.account\n\n        response = self.http_dispatcher.request(method, host, path, dict(headers), data, timeout=timeout)\n        if not response:\n            logger.warn(\"req %s get response timeout\", path)\n            return \"\", 602, {}\n\n        status = response.status\n\n        content = response.task.read_all()\n        if status == 200:\n            logger.debug(\"%s %s%s status:%d trace:%s\", method, host, path, status,\n                       response.task.get_trace())\n        else:\n            logger.warn(\"%s %s%s status:%d trace:%s\", method, host, path, status,\n                       response.task.get_trace())\n        return content, status, response\n\n    def stop(self):\n        logger.info(\"terminate\")\n        self.connect_manager.set_ssl_created_cb(None)\n        self.http_dispatcher.stop()\n        self.connect_manager.stop()\n        self.ip_manager.stop()\n\n        self.running = False\n\n    def set_proxy(self, args):\n        logger.info(\"set_proxy:%s\", args)\n\n        self.config.PROXY_ENABLE = args[\"enable\"]\n        self.config.PROXY_TYPE = args[\"type\"]\n        self.config.PROXY_HOST = args[\"host\"]\n        self.config.PROXY_PORT = args[\"port\"]\n        self.config.PROXY_USER = args[\"user\"]\n        self.config.PROXY_PASSWD = args[\"passwd\"]\n\n        self.config.save()\n\n        self.connect_creator.update_config()\n\n\nfront = Front()", "comments": "", "content": "import os\n\nimport xlog\nlogger = xlog.getLogger(\"tls_relay\")\nlogger.set_buffer(500)\n\nfrom config import Config\nimport host_manager\nfrom front_base.openssl_wrap import SSLContext\nfrom front_base.connect_creator import ConnectCreator\nfrom front_base.ip_manager import IpManager\nfrom front_base.http_dispatcher import HttpsDispatcher\nfrom front_base.connect_manager import ConnectManager\nfrom front_base.ip_source import IpSimpleSource\nfrom front_base.check_ip import CheckIp\nfrom gae_proxy.local import check_local_network\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath(os.path.join(current_path, os.pardir, os.pardir, os.pardir))\ndata_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, 'data'))\nmodule_data_path = os.path.join(data_path, 'x_tunnel')\n\n\nclass Front(object):\n    name = \"tls_relay_front\"\n\n    def __init__(self):\n        self.running = True\n\n        self.logger = logger\n        config_path = os.path.join(module_data_path, \"tls_relay.json\")\n        self.config = Config(config_path)\n\n        self.ca_cert_fn = os.path.join(module_data_path, \"tls_relay_CA.crt\")\n        self.openssl_context = SSLContext(logger)\n        if os.path.isfile(self.ca_cert_fn):\n            self.openssl_context.set_ca(self.ca_cert_fn)\n\n        host_fn = os.path.join(module_data_path, \"tls_host.json\")\n        self.host_manager = host_manager.HostManager(host_fn)\n\n        self.connect_creator = ConnectCreator(logger, self.config, self.openssl_context, self.host_manager)\n        self.check_ip = CheckIp(xlog.null, self.config, self.connect_creator)\n\n        ip_source = IpSimpleSource(self.config.ip_source_ips)\n\n        default_ip_list_fn = \"\"\n        ip_list_fn = os.path.join(module_data_path, \"tls_relay_ip_list.txt\")\n        self.ip_manager = IpManager(logger, self.config, ip_source, check_local_network, self.check_ip.check_ip,\n                 default_ip_list_fn, ip_list_fn, scan_ip_log=None)\n        for ip in self.config.ip_source_ips:\n            self.ip_manager.add_ip(ip, 100)\n\n        self.connect_manager = ConnectManager(logger, self.config, self.connect_creator, self.ip_manager, check_local_network)\n        self.http_dispatcher = HttpsDispatcher(logger, self.config, self.ip_manager, self.connect_manager)\n\n        self.account = \"\"\n        self.password = \"\"\n\n    def get_dispatcher(self, host=None):\n        return self.http_dispatcher\n\n    def set_x_tunnel_account(self, account, password):\n        self.account = account\n        self.password = password\n\n    def set_ips(self, ips):\n        if not ips:\n            return\n\n        host_info = {}\n        ca_certs = []\n        ipss = []\n        for ip in ips:\n            dat = ips[ip]\n            ca_cert = dat[\"ca_crt\"]\n            sni = dat[\"sni\"]\n\n            host_info[ip] = {\"sni\":sni, \"ca_crt\":ca_cert}\n            if ca_cert not in ca_certs:\n                ca_certs.append(ca_cert)\n            ipss.append(ip)\n\n        self.ip_manager.update_ips(ipss)\n        self.ip_manager.save(True)\n        self.host_manager.set_host(host_info)\n\n        ca_content = \"\\n\\n\".join(ca_certs)\n        with open(self.ca_cert_fn, \"w\") as fd:\n            fd.write(ca_content)\n        self.openssl_context.set_ca(self.ca_cert_fn)\n        self.logger.info(\"set_ips:%s\", \",\".join(ipss))\n\n    def request(self, method, host, path=\"/\", headers={}, data=\"\", timeout=120):\n        headers = dict(headers)\n        headers[\"XX-Account\"] = self.account\n\n        response = self.http_dispatcher.request(method, host, path, dict(headers), data, timeout=timeout)\n        if not response:\n            logger.warn(\"req %s get response timeout\", path)\n            return \"\", 602, {}\n\n        status = response.status\n\n        content = response.task.read_all()\n        if status == 200:\n            logger.debug(\"%s %s%s status:%d trace:%s\", method, host, path, status,\n                       response.task.get_trace())\n        else:\n            logger.warn(\"%s %s%s status:%d trace:%s\", method, host, path, status,\n                       response.task.get_trace())\n        return content, status, response\n\n    def stop(self):\n        logger.info(\"terminate\")\n        self.connect_manager.set_ssl_created_cb(None)\n        self.http_dispatcher.stop()\n        self.connect_manager.stop()\n        self.ip_manager.stop()\n\n        self.running = False\n\n    def set_proxy(self, args):\n        logger.info(\"set_proxy:%s\", args)\n\n        self.config.PROXY_ENABLE = args[\"enable\"]\n        self.config.PROXY_TYPE = args[\"type\"]\n        self.config.PROXY_HOST = args[\"host\"]\n        self.config.PROXY_PORT = args[\"port\"]\n        self.config.PROXY_USER = args[\"user\"]\n        self.config.PROXY_PASSWD = args[\"passwd\"]\n\n        self.config.save()\n\n        self.connect_creator.update_config()\n\n\nfront = Front()", "description": "a web proxy tool", "file_name": "front.py", "id": "05459d9b731926c84a81431f9020cf75", "language": "Python", "project_name": "XX-Net", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/XX-net-XX-Net/XX-net-XX-Net-673a005/code/default/x_tunnel/local/tls_relay_front/front.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:03Z", "url": "https://github.com/XX-net/XX-Net", "wiki": true}