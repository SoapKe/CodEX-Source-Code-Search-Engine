{"author": "sympy", "code": "# -*- coding: utf-8 -*-\nfrom __future__ import (absolute_import, division, print_function)\n\nfrom sympy import log, exp, Symbol, Pow\nfrom sympy.codegen.cfunctions import log2, exp2, expm1, log1p\nfrom sympy.codegen.rewriting import optimize, log2_opt, exp2_opt, expm1_opt, log1p_opt, optims_c99\nfrom sympy.utilities.pytest import XFAIL\n\n\ndef test_log2_opt():\n    x = Symbol('x')\n    expr1 = 7*log(3*x + 5)/(log(2))\n    opt1 = optimize(expr1, [log2_opt])\n    assert opt1 == 7*log2(3*x + 5)\n    assert opt1.rewrite(log) == expr1\n\n    expr2 = 3*log(5*x + 7)/(13*log(2))\n    opt2 = optimize(expr2, [log2_opt])\n    assert opt2 == 3*log2(5*x + 7)/13\n    assert opt2.rewrite(log) == expr2\n\n    expr3 = log(x)/log(2)\n    opt3 = optimize(expr3, [log2_opt])\n    assert opt3 == log2(x)\n    assert opt3.rewrite(log) == expr3\n\n    expr4 = log(x)/log(2) + log(x+1)\n    opt4 = optimize(expr4, [log2_opt])\n    assert opt4 == log2(x) + log(2)*log2(x+1)\n    assert opt4.rewrite(log) == expr4\n\n    expr5 = log(17)\n    opt5 = optimize(expr5, [log2_opt])\n    assert opt5 == expr5\n\n    expr6 = log(x + 3)/log(2)\n    opt6 = optimize(expr6, [log2_opt])\n    assert str(opt6) == 'log2(x + 3)'\n    assert opt6.rewrite(log) == expr6\n\n\ndef test_exp2_opt():\n    x = Symbol('x')\n    expr1 = 1 + 2**x\n    opt1 = optimize(expr1, [exp2_opt])\n    assert opt1 == 1 + exp2(x)\n    assert opt1.rewrite(Pow) == expr1\n\n    expr2 = 1 + 3**x\n    assert expr2 == optimize(expr2, [exp2_opt])\n\n\ndef test_expm1_opt():\n    x = Symbol('x')\n\n    expr1 = exp(x) - 1\n    opt1 = optimize(expr1, [expm1_opt])\n    assert expm1(x) - opt1 == 0\n    assert opt1.rewrite(exp) == expr1\n\n    expr2 = 3*exp(x) - 3\n    opt2 = optimize(expr2, [expm1_opt])\n    assert 3*expm1(x) == opt2\n    assert opt2.rewrite(exp) == expr2\n\n    expr3 = 3*exp(x) - 5\n    assert expr3 == optimize(expr3, [expm1_opt])\n\n    expr4 = 3*exp(x) + log(x) - 3\n    opt4 = optimize(expr4, [expm1_opt])\n    assert 3*expm1(x) + log(x) == opt4\n    assert opt4.rewrite(exp) == expr4\n\n    expr5 = 3*exp(2*x) - 3\n    opt5 = optimize(expr5, [expm1_opt])\n    assert 3*expm1(2*x) == opt5\n    assert opt5.rewrite(exp) == expr5\n\n\n@XFAIL\ndef test_expm1_two_exp_terms():\n    x, y = map(Symbol, 'x y'.split())\n    expr1 = exp(x) + exp(y) - 2\n    opt1 = optimize(expr1, [expm1_opt])\n    assert opt1 == expm1(x) + expm1(y)\n\n\ndef test_log1p_opt():\n    x = Symbol('x')\n    expr1 = log(x + 1)\n    opt1 = optimize(expr1, [log1p_opt])\n    assert log1p(x) - opt1 == 0\n    assert opt1.rewrite(log) == expr1\n\n    expr2 = log(3*x + 3)\n    opt2 = optimize(expr2, [log1p_opt])\n    assert log1p(x) + log(3) == opt2\n    assert (opt2.rewrite(log) - expr2).simplify() == 0\n\n    expr3 = log(2*x + 1)\n    opt3 = optimize(expr3, [log1p_opt])\n    assert log1p(2*x) - opt3 == 0\n    assert opt3.rewrite(log) == expr3\n\n    expr4 = log(x+3)\n    opt4 = optimize(expr4, [log1p_opt])\n    assert str(opt4) == 'log(x + 3)'\n\n\ndef test_optims_c99():\n    x = Symbol('x')\n\n    expr1 = 2**x + log(x)/log(2) + log(x + 1) + exp(x) - 1\n    opt1 = optimize(expr1, optims_c99).simplify()\n    assert opt1 == exp2(x) + log2(x) + log1p(x) + expm1(x)\n    assert opt1.rewrite(exp).rewrite(log).rewrite(Pow) == expr1\n\n    expr2 = log(x)/log(2) + log(x + 1)\n    opt2 = optimize(expr2, optims_c99)\n    assert opt2 == log2(x) + log1p(x)\n    assert opt2.rewrite(log) == expr2\n\n    expr3 = log(x)/log(2) + log(17*x + 17)\n    opt3 = optimize(expr3, optims_c99)\n    delta3 = opt3 - (log2(x) + log(17) + log1p(x))\n    assert delta3 == 0\n    assert (opt3.rewrite(log) - expr3).simplify() == 0\n\n    expr4 = 2**x + 3*log(5*x + 7)/(13*log(2)) + 11*exp(x) - 11 + log(17*x + 17)\n    opt4 = optimize(expr4, optims_c99).simplify()\n    delta4 = opt4 - (exp2(x) + 3*log2(5*x + 7)/13 + 11*expm1(x) + log(17) + log1p(x))\n    assert delta4 == 0\n    assert (opt4.rewrite(exp).rewrite(log).rewrite(Pow) - expr4).simplify() == 0\n\n    expr5 = 3*exp(2*x) - 3\n    opt5 = optimize(expr5, optims_c99)\n    delta5 = opt5 - 3*expm1(2*x)\n    assert delta5 == 0\n    assert opt5.rewrite(exp) == expr5\n\n    expr6 = exp(2*x) - 3\n    opt6 = optimize(expr6, optims_c99)\n    delta6 = opt6 - (exp(2*x) - 3)\n    assert delta6 == 0\n\n    expr7 = log(3*x + 3)\n    opt7 = optimize(expr7, optims_c99)\n    delta7 = opt7 - (log(3) + log1p(x))\n    assert delta7 == 0\n    assert (opt7.rewrite(log) - expr7).simplify() == 0\n\n    expr8 = log(2*x + 3)\n    opt8 = optimize(expr8, optims_c99)\n    assert opt8 == expr8\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\nfrom __future__ import (absolute_import, division, print_function)\n\nfrom sympy import log, exp, Symbol, Pow\nfrom sympy.codegen.cfunctions import log2, exp2, expm1, log1p\nfrom sympy.codegen.rewriting import optimize, log2_opt, exp2_opt, expm1_opt, log1p_opt, optims_c99\nfrom sympy.utilities.pytest import XFAIL\n\n\ndef test_log2_opt():\n    x = Symbol('x')\n    expr1 = 7*log(3*x + 5)/(log(2))\n    opt1 = optimize(expr1, [log2_opt])\n    assert opt1 == 7*log2(3*x + 5)\n    assert opt1.rewrite(log) == expr1\n\n    expr2 = 3*log(5*x + 7)/(13*log(2))\n    opt2 = optimize(expr2, [log2_opt])\n    assert opt2 == 3*log2(5*x + 7)/13\n    assert opt2.rewrite(log) == expr2\n\n    expr3 = log(x)/log(2)\n    opt3 = optimize(expr3, [log2_opt])\n    assert opt3 == log2(x)\n    assert opt3.rewrite(log) == expr3\n\n    expr4 = log(x)/log(2) + log(x+1)\n    opt4 = optimize(expr4, [log2_opt])\n    assert opt4 == log2(x) + log(2)*log2(x+1)\n    assert opt4.rewrite(log) == expr4\n\n    expr5 = log(17)\n    opt5 = optimize(expr5, [log2_opt])\n    assert opt5 == expr5\n\n    expr6 = log(x + 3)/log(2)\n    opt6 = optimize(expr6, [log2_opt])\n    assert str(opt6) == 'log2(x + 3)'\n    assert opt6.rewrite(log) == expr6\n\n\ndef test_exp2_opt():\n    x = Symbol('x')\n    expr1 = 1 + 2**x\n    opt1 = optimize(expr1, [exp2_opt])\n    assert opt1 == 1 + exp2(x)\n    assert opt1.rewrite(Pow) == expr1\n\n    expr2 = 1 + 3**x\n    assert expr2 == optimize(expr2, [exp2_opt])\n\n\ndef test_expm1_opt():\n    x = Symbol('x')\n\n    expr1 = exp(x) - 1\n    opt1 = optimize(expr1, [expm1_opt])\n    assert expm1(x) - opt1 == 0\n    assert opt1.rewrite(exp) == expr1\n\n    expr2 = 3*exp(x) - 3\n    opt2 = optimize(expr2, [expm1_opt])\n    assert 3*expm1(x) == opt2\n    assert opt2.rewrite(exp) == expr2\n\n    expr3 = 3*exp(x) - 5\n    assert expr3 == optimize(expr3, [expm1_opt])\n\n    expr4 = 3*exp(x) + log(x) - 3\n    opt4 = optimize(expr4, [expm1_opt])\n    assert 3*expm1(x) + log(x) == opt4\n    assert opt4.rewrite(exp) == expr4\n\n    expr5 = 3*exp(2*x) - 3\n    opt5 = optimize(expr5, [expm1_opt])\n    assert 3*expm1(2*x) == opt5\n    assert opt5.rewrite(exp) == expr5\n\n\n@XFAIL\ndef test_expm1_two_exp_terms():\n    x, y = map(Symbol, 'x y'.split())\n    expr1 = exp(x) + exp(y) - 2\n    opt1 = optimize(expr1, [expm1_opt])\n    assert opt1 == expm1(x) + expm1(y)\n\n\ndef test_log1p_opt():\n    x = Symbol('x')\n    expr1 = log(x + 1)\n    opt1 = optimize(expr1, [log1p_opt])\n    assert log1p(x) - opt1 == 0\n    assert opt1.rewrite(log) == expr1\n\n    expr2 = log(3*x + 3)\n    opt2 = optimize(expr2, [log1p_opt])\n    assert log1p(x) + log(3) == opt2\n    assert (opt2.rewrite(log) - expr2).simplify() == 0\n\n    expr3 = log(2*x + 1)\n    opt3 = optimize(expr3, [log1p_opt])\n    assert log1p(2*x) - opt3 == 0\n    assert opt3.rewrite(log) == expr3\n\n    expr4 = log(x+3)\n    opt4 = optimize(expr4, [log1p_opt])\n    assert str(opt4) == 'log(x + 3)'\n\n\ndef test_optims_c99():\n    x = Symbol('x')\n\n    expr1 = 2**x + log(x)/log(2) + log(x + 1) + exp(x) - 1\n    opt1 = optimize(expr1, optims_c99).simplify()\n    assert opt1 == exp2(x) + log2(x) + log1p(x) + expm1(x)\n    assert opt1.rewrite(exp).rewrite(log).rewrite(Pow) == expr1\n\n    expr2 = log(x)/log(2) + log(x + 1)\n    opt2 = optimize(expr2, optims_c99)\n    assert opt2 == log2(x) + log1p(x)\n    assert opt2.rewrite(log) == expr2\n\n    expr3 = log(x)/log(2) + log(17*x + 17)\n    opt3 = optimize(expr3, optims_c99)\n    delta3 = opt3 - (log2(x) + log(17) + log1p(x))\n    assert delta3 == 0\n    assert (opt3.rewrite(log) - expr3).simplify() == 0\n\n    expr4 = 2**x + 3*log(5*x + 7)/(13*log(2)) + 11*exp(x) - 11 + log(17*x + 17)\n    opt4 = optimize(expr4, optims_c99).simplify()\n    delta4 = opt4 - (exp2(x) + 3*log2(5*x + 7)/13 + 11*expm1(x) + log(17) + log1p(x))\n    assert delta4 == 0\n    assert (opt4.rewrite(exp).rewrite(log).rewrite(Pow) - expr4).simplify() == 0\n\n    expr5 = 3*exp(2*x) - 3\n    opt5 = optimize(expr5, optims_c99)\n    delta5 = opt5 - 3*expm1(2*x)\n    assert delta5 == 0\n    assert opt5.rewrite(exp) == expr5\n\n    expr6 = exp(2*x) - 3\n    opt6 = optimize(expr6, optims_c99)\n    delta6 = opt6 - (exp(2*x) - 3)\n    assert delta6 == 0\n\n    expr7 = log(3*x + 3)\n    opt7 = optimize(expr7, optims_c99)\n    delta7 = opt7 - (log(3) + log1p(x))\n    assert delta7 == 0\n    assert (opt7.rewrite(log) - expr7).simplify() == 0\n\n    expr8 = log(2*x + 3)\n    opt8 = optimize(expr8, optims_c99)\n    assert opt8 == expr8\n", "description": "A computer algebra system written in pure Python", "file_name": "test_rewriting.py", "id": "f270db96c8db9c4b90e2b28853098ae8", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/codegen/tests/test_rewriting.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}