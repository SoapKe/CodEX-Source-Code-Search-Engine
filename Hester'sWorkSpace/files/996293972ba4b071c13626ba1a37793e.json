{"author": "keon", "code": "\n\ndef square_root(n,p):\n\tguess = float(n) / 2\n\n\twhile abs(guess * guess - n) > p:\n\t\tguess = (guess + (n / guess)) / 2\n\n\treturn guess\n", "comments": "    given positive integer n precision factor p  write square root function produce output maximum error p actual square root n   example  given n   5 p   0 001  produce output o 2 235   o   2 237  actual square root 5 2 236      ", "content": "\"\"\"\nGiven a positive integer N and a precision factor P,\nwrite a square root function that produce an output\nwith a maximum error P from the actual square root of N.\n\nExample:\nGiven N = 5 and P = 0.001, can produce output O such that\n2.235 < O > 2.237. Actual square root of 5 being 2.236.\n\"\"\"\n\ndef square_root(n,p):\n\tguess = float(n) / 2\n\n\twhile abs(guess * guess - n) > p:\n\t\tguess = (guess + (n / guess)) / 2\n\n\treturn guess\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "sqrt_precision_factor.py", "id": "996293972ba4b071c13626ba1a37793e", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/maths/sqrt_precision_factor.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}