{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_urlencode,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    try_get,\n    unsmuggle_url,\n)\n\n\nclass OoyalaBaseIE(InfoExtractor):\n    _PLAYER_BASE = 'http://player.ooyala.com/'\n    _CONTENT_TREE_BASE = _PLAYER_BASE + 'player_api/v1/content_tree/'\n    _AUTHORIZATION_URL_TEMPLATE = _PLAYER_BASE + 'sas/player_api/v2/authorization/embed_code/%s/%s?'\n\n    def _extract(self, content_tree_url, video_id, domain='example.org', supportedformats=None, embed_token=None):\n        content_tree = self._download_json(content_tree_url, video_id)['content_tree']\n        metadata = content_tree[list(content_tree)[0]]\n        embed_code = metadata['embed_code']\n        pcode = metadata.get('asset_pcode') or embed_code\n        title = metadata['title']\n\n        auth_data = self._download_json(\n            self._AUTHORIZATION_URL_TEMPLATE % (pcode, embed_code) +\n            compat_urllib_parse_urlencode({\n                'domain': domain,\n                'supportedFormats': supportedformats or 'mp4,rtmp,m3u8,hds,dash,smooth',\n                'embedToken': embed_token,\n            }), video_id)\n\n        cur_auth_data = auth_data['authorization_data'][embed_code]\n\n        urls = []\n        formats = []\n        if cur_auth_data['authorized']:\n            for stream in cur_auth_data['streams']:\n                url_data = try_get(stream, lambda x: x['url']['data'], compat_str)\n                if not url_data:\n                    continue\n                s_url = compat_b64decode(url_data).decode('utf-8')\n                if not s_url or s_url in urls:\n                    continue\n                urls.append(s_url)\n                ext = determine_ext(s_url, None)\n                delivery_type = stream.get('delivery_type')\n                if delivery_type == 'hls' or ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        re.sub(r'/ip(?:ad|hone)/', '/all/', s_url), embed_code, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n                elif delivery_type == 'hds' or ext == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        s_url + '?hdcore=3.7.0', embed_code, f4m_id='hds', fatal=False))\n                elif delivery_type == 'dash' or ext == 'mpd':\n                    formats.extend(self._extract_mpd_formats(\n                        s_url, embed_code, mpd_id='dash', fatal=False))\n                elif delivery_type == 'smooth':\n                    self._extract_ism_formats(\n                        s_url, embed_code, ism_id='mss', fatal=False)\n                elif ext == 'smil':\n                    formats.extend(self._extract_smil_formats(\n                        s_url, embed_code, fatal=False))\n                else:\n                    formats.append({\n                        'url': s_url,\n                        'ext': ext or delivery_type,\n                        'vcodec': stream.get('video_codec'),\n                        'format_id': delivery_type,\n                        'width': int_or_none(stream.get('width')),\n                        'height': int_or_none(stream.get('height')),\n                        'abr': int_or_none(stream.get('audio_bitrate')),\n                        'vbr': int_or_none(stream.get('video_bitrate')),\n                        'fps': float_or_none(stream.get('framerate')),\n                    })\n        else:\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, cur_auth_data['message']), expected=True)\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for lang, sub in metadata.get('closed_captions_vtt', {}).get('captions', {}).items():\n            sub_url = sub.get('url')\n            if not sub_url:\n                continue\n            subtitles[lang] = [{\n                'url': sub_url,\n            }]\n\n        return {\n            'id': embed_code,\n            'title': title,\n            'description': metadata.get('description'),\n            'thumbnail': metadata.get('thumbnail_image') or metadata.get('promo_image'),\n            'duration': float_or_none(metadata.get('duration'), 1000),\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n\n\nclass OoyalaIE(OoyalaBaseIE):\n    _VALID_URL = r'(?:ooyala:|https?://.+?\\.ooyala\\.com/.*?(?:embedCode|ec)=)(?P<id>.+?)(&|$)'\n\n    _TESTS = [\n        {\n            \n            'url': 'http://player.ooyala.com/player.js?embedCode=pxczE2YjpfHfn1f3M-ykG_AmJRRn0PD8',\n            'info_dict': {\n                'id': 'pxczE2YjpfHfn1f3M-ykG_AmJRRn0PD8',\n                'ext': 'mp4',\n                'title': 'Explaining Data Recovery from Hard Drives and SSDs',\n                'description': 'How badly damaged does a drive have to be to defeat Russell and his crew? Apparently, smashed to bits.',\n                'duration': 853.386,\n            },\n            \n            'skip': 'Ooyala said: movie expired',\n        }, {\n            \n            'url': 'http://player.ooyala.com/player.js?embedCode=x1b3lqZDq9y_7kMyC2Op5qo-p077tXD0',\n            'info_dict': {\n                'id': 'x1b3lqZDq9y_7kMyC2Op5qo-p077tXD0',\n                'ext': 'mp4',\n                'title': 'Simulation Overview - Levels of Simulation',\n                'duration': 194.948,\n            },\n        },\n        {\n            \n            \n            'url': 'http://player.ooyala.com/player.js?embedCode=FiOG81ZTrvckcchQxmalf4aQj590qTEx',\n            'md5': 'a84001441b35ea492bc03736e59e7935',\n            'info_dict': {\n                'id': 'FiOG81ZTrvckcchQxmalf4aQj590qTEx',\n                'ext': 'mp4',\n                'title': 'Divide Tool Path.mp4',\n                'duration': 204.405,\n            }\n        },\n        {\n            \n            'url': 'http://player.ooyala.com/player.js?embedCode=w2bnZtYjE6axZ_dw1Cd0hQtXd_ige2Is',\n            'only_matching': True,\n        }\n    ]\n\n    @staticmethod\n    def _url_for_embed_code(embed_code):\n        return 'http://player.ooyala.com/player.js?embedCode=%s' % embed_code\n\n    @classmethod\n    def _build_url_result(cls, embed_code):\n        return cls.url_result(cls._url_for_embed_code(embed_code),\n                              ie=cls.ie_key())\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n        embed_code = self._match_id(url)\n        domain = smuggled_data.get('domain')\n        supportedformats = smuggled_data.get('supportedformats')\n        embed_token = smuggled_data.get('embed_token')\n        content_tree_url = self._CONTENT_TREE_BASE + 'embed_code/%s/%s' % (embed_code, embed_code)\n        return self._extract(content_tree_url, embed_code, domain, supportedformats, embed_token)\n\n\nclass OoyalaExternalIE(OoyalaBaseIE):\n    _VALID_URL = r\n\n    _TEST = {\n        'url': 'https://player.ooyala.com/player.js?externalId=espn:10365079&pcode=1kNG061cgaoolOncv54OAO1ceO-I&adSetCode=91cDU6NuXTGKz3OdjOxFdAgJVtQcKJnI&callback=handleEvents&hasModuleParams=1&height=968&playerBrandingId=7af3bd04449c444c964f347f11873075&targetReplaceId=videoPlayer&width=1656&wmode=opaque&allowScriptAccess=always',\n        'info_dict': {\n            'id': 'FkYWtmazr6Ed8xmvILvKLWjd4QvYZpzG',\n            'ext': 'mp4',\n            'title': 'dm_140128_30for30Shorts___JudgingJewellv2',\n            'duration': 1302.0,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        partner_id, video_id, pcode = re.match(self._VALID_URL, url).groups()\n        content_tree_url = self._CONTENT_TREE_BASE + 'external_id/%s/%s:%s' % (pcode, partner_id, video_id)\n        return self._extract(content_tree_url, video_id)\n", "comments": "(?x)\n                    (?:\n                        ooyalaexternal:|\n                        https?://.+?\\.ooyala\\.com/.*?\\bexternalId=\n                    )\n                    (?P<partner_id>[^:]+)\n                    :\n                    (?P<id>.+)\n                    (?:\n                        :|\n                        .*?&pcode=\n                    )\n                    (?P<pcode>.+?)\n                    (?:&|$)\n                    \n \n# From http://it.slashdot.org/story/13/04/25/178216/recovering-data-from-broken-hard-drives-and-ssds-video\n# The video in the original webpage now uses PlayWire\n# Only available for ipad\n# Information available only through SAS api\n# From http://community.plm.automation.siemens.com/t5/News-NX-Manufacturing/Tool-Path-Divide/ba-p/4187\n# empty stream['url']['data']\n# m3u8 download\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urllib_parse_urlencode,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    try_get,\n    unsmuggle_url,\n)\n\n\nclass OoyalaBaseIE(InfoExtractor):\n    _PLAYER_BASE = 'http://player.ooyala.com/'\n    _CONTENT_TREE_BASE = _PLAYER_BASE + 'player_api/v1/content_tree/'\n    _AUTHORIZATION_URL_TEMPLATE = _PLAYER_BASE + 'sas/player_api/v2/authorization/embed_code/%s/%s?'\n\n    def _extract(self, content_tree_url, video_id, domain='example.org', supportedformats=None, embed_token=None):\n        content_tree = self._download_json(content_tree_url, video_id)['content_tree']\n        metadata = content_tree[list(content_tree)[0]]\n        embed_code = metadata['embed_code']\n        pcode = metadata.get('asset_pcode') or embed_code\n        title = metadata['title']\n\n        auth_data = self._download_json(\n            self._AUTHORIZATION_URL_TEMPLATE % (pcode, embed_code) +\n            compat_urllib_parse_urlencode({\n                'domain': domain,\n                'supportedFormats': supportedformats or 'mp4,rtmp,m3u8,hds,dash,smooth',\n                'embedToken': embed_token,\n            }), video_id)\n\n        cur_auth_data = auth_data['authorization_data'][embed_code]\n\n        urls = []\n        formats = []\n        if cur_auth_data['authorized']:\n            for stream in cur_auth_data['streams']:\n                url_data = try_get(stream, lambda x: x['url']['data'], compat_str)\n                if not url_data:\n                    continue\n                s_url = compat_b64decode(url_data).decode('utf-8')\n                if not s_url or s_url in urls:\n                    continue\n                urls.append(s_url)\n                ext = determine_ext(s_url, None)\n                delivery_type = stream.get('delivery_type')\n                if delivery_type == 'hls' or ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        re.sub(r'/ip(?:ad|hone)/', '/all/', s_url), embed_code, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n                elif delivery_type == 'hds' or ext == 'f4m':\n                    formats.extend(self._extract_f4m_formats(\n                        s_url + '?hdcore=3.7.0', embed_code, f4m_id='hds', fatal=False))\n                elif delivery_type == 'dash' or ext == 'mpd':\n                    formats.extend(self._extract_mpd_formats(\n                        s_url, embed_code, mpd_id='dash', fatal=False))\n                elif delivery_type == 'smooth':\n                    self._extract_ism_formats(\n                        s_url, embed_code, ism_id='mss', fatal=False)\n                elif ext == 'smil':\n                    formats.extend(self._extract_smil_formats(\n                        s_url, embed_code, fatal=False))\n                else:\n                    formats.append({\n                        'url': s_url,\n                        'ext': ext or delivery_type,\n                        'vcodec': stream.get('video_codec'),\n                        'format_id': delivery_type,\n                        'width': int_or_none(stream.get('width')),\n                        'height': int_or_none(stream.get('height')),\n                        'abr': int_or_none(stream.get('audio_bitrate')),\n                        'vbr': int_or_none(stream.get('video_bitrate')),\n                        'fps': float_or_none(stream.get('framerate')),\n                    })\n        else:\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, cur_auth_data['message']), expected=True)\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for lang, sub in metadata.get('closed_captions_vtt', {}).get('captions', {}).items():\n            sub_url = sub.get('url')\n            if not sub_url:\n                continue\n            subtitles[lang] = [{\n                'url': sub_url,\n            }]\n\n        return {\n            'id': embed_code,\n            'title': title,\n            'description': metadata.get('description'),\n            'thumbnail': metadata.get('thumbnail_image') or metadata.get('promo_image'),\n            'duration': float_or_none(metadata.get('duration'), 1000),\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n\n\nclass OoyalaIE(OoyalaBaseIE):\n    _VALID_URL = r'(?:ooyala:|https?://.+?\\.ooyala\\.com/.*?(?:embedCode|ec)=)(?P<id>.+?)(&|$)'\n\n    _TESTS = [\n        {\n            # From http://it.slashdot.org/story/13/04/25/178216/recovering-data-from-broken-hard-drives-and-ssds-video\n            'url': 'http://player.ooyala.com/player.js?embedCode=pxczE2YjpfHfn1f3M-ykG_AmJRRn0PD8',\n            'info_dict': {\n                'id': 'pxczE2YjpfHfn1f3M-ykG_AmJRRn0PD8',\n                'ext': 'mp4',\n                'title': 'Explaining Data Recovery from Hard Drives and SSDs',\n                'description': 'How badly damaged does a drive have to be to defeat Russell and his crew? Apparently, smashed to bits.',\n                'duration': 853.386,\n            },\n            # The video in the original webpage now uses PlayWire\n            'skip': 'Ooyala said: movie expired',\n        }, {\n            # Only available for ipad\n            'url': 'http://player.ooyala.com/player.js?embedCode=x1b3lqZDq9y_7kMyC2Op5qo-p077tXD0',\n            'info_dict': {\n                'id': 'x1b3lqZDq9y_7kMyC2Op5qo-p077tXD0',\n                'ext': 'mp4',\n                'title': 'Simulation Overview - Levels of Simulation',\n                'duration': 194.948,\n            },\n        },\n        {\n            # Information available only through SAS api\n            # From http://community.plm.automation.siemens.com/t5/News-NX-Manufacturing/Tool-Path-Divide/ba-p/4187\n            'url': 'http://player.ooyala.com/player.js?embedCode=FiOG81ZTrvckcchQxmalf4aQj590qTEx',\n            'md5': 'a84001441b35ea492bc03736e59e7935',\n            'info_dict': {\n                'id': 'FiOG81ZTrvckcchQxmalf4aQj590qTEx',\n                'ext': 'mp4',\n                'title': 'Divide Tool Path.mp4',\n                'duration': 204.405,\n            }\n        },\n        {\n            # empty stream['url']['data']\n            'url': 'http://player.ooyala.com/player.js?embedCode=w2bnZtYjE6axZ_dw1Cd0hQtXd_ige2Is',\n            'only_matching': True,\n        }\n    ]\n\n    @staticmethod\n    def _url_for_embed_code(embed_code):\n        return 'http://player.ooyala.com/player.js?embedCode=%s' % embed_code\n\n    @classmethod\n    def _build_url_result(cls, embed_code):\n        return cls.url_result(cls._url_for_embed_code(embed_code),\n                              ie=cls.ie_key())\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n        embed_code = self._match_id(url)\n        domain = smuggled_data.get('domain')\n        supportedformats = smuggled_data.get('supportedformats')\n        embed_token = smuggled_data.get('embed_token')\n        content_tree_url = self._CONTENT_TREE_BASE + 'embed_code/%s/%s' % (embed_code, embed_code)\n        return self._extract(content_tree_url, embed_code, domain, supportedformats, embed_token)\n\n\nclass OoyalaExternalIE(OoyalaBaseIE):\n    _VALID_URL = r'''(?x)\n                    (?:\n                        ooyalaexternal:|\n                        https?://.+?\\.ooyala\\.com/.*?\\bexternalId=\n                    )\n                    (?P<partner_id>[^:]+)\n                    :\n                    (?P<id>.+)\n                    (?:\n                        :|\n                        .*?&pcode=\n                    )\n                    (?P<pcode>.+?)\n                    (?:&|$)\n                    '''\n\n    _TEST = {\n        'url': 'https://player.ooyala.com/player.js?externalId=espn:10365079&pcode=1kNG061cgaoolOncv54OAO1ceO-I&adSetCode=91cDU6NuXTGKz3OdjOxFdAgJVtQcKJnI&callback=handleEvents&hasModuleParams=1&height=968&playerBrandingId=7af3bd04449c444c964f347f11873075&targetReplaceId=videoPlayer&width=1656&wmode=opaque&allowScriptAccess=always',\n        'info_dict': {\n            'id': 'FkYWtmazr6Ed8xmvILvKLWjd4QvYZpzG',\n            'ext': 'mp4',\n            'title': 'dm_140128_30for30Shorts___JudgingJewellv2',\n            'duration': 1302.0,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        partner_id, video_id, pcode = re.match(self._VALID_URL, url).groups()\n        content_tree_url = self._CONTENT_TREE_BASE + 'external_id/%s/%s:%s' % (pcode, partner_id, video_id)\n        return self._extract(content_tree_url, video_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ooyala.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ooyala.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}