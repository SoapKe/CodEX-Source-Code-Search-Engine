{"author": "nicolargo", "code": "\n -*- coding: utf-8 -*-\n\n Glances - An eye on your system\n\n Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n\n Glances is free software; you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Glances is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Glances unitary tests suite.\"\"\"\n\nimport time\nimport unittest\n\nfrom glances.main import GlancesMain\nfrom glances.stats import GlancesStats\nfrom glances import __version__\nfrom glances.globals import WINDOWS, LINUX\nfrom glances.outputs.glances_bars import Bar\nfrom glances.compat import PY3, PY_PYPY\nfrom glances.thresholds import GlancesThresholdOk\nfrom glances.thresholds import GlancesThresholdCareful\nfrom glances.thresholds import GlancesThresholdWarning\nfrom glances.thresholds import GlancesThresholdCritical\nfrom glances.thresholds import GlancesThresholds\n\n Global variables\n =================\n\n Init Glances core\ncore = GlancesMain()\n\n Init Glances stats\nstats = GlancesStats()\n\n Unitest class\n ==============\nprint('Unitary tests for Glances %s' % __version__)\n\n\nclass TestGlances(unittest.TestCase):\n    \"\"\"Test Glances class.\"\"\"\n\n    def setUp(self):\n        \"\"\"The function is called *every time* before test_*.\"\"\"\n        print('\\n' + '=' * 78)\n\n    def test_000_update(self):\n        \"\"\"Update stats (mandatory step for all the stats).\n\n        The update is made twice (for rate computation).\n        \"\"\"\n        print('INFO: [TEST_000] Test the stats update function')\n        try:\n            stats.update()\n        except Exception as e:\n            print('ERROR: Stats update failed: %s' % e)\n            self.assertTrue(False)\n        time.sleep(1)\n        try:\n            stats.update()\n        except Exception as e:\n            print('ERROR: Stats update failed: %s' % e)\n            self.assertTrue(False)\n\n        self.assertTrue(True)\n\n    def test_001_plugins(self):\n        \"\"\"Check mandatory plugins.\"\"\"\n        plugins_to_check = ['system', 'cpu', 'load', 'mem', 'memswap', 'network', 'diskio', 'fs', 'irq']\n        print('INFO: [TEST_001] Check the mandatory plugins list: %s' % ', '.join(plugins_to_check))\n        plugins_list = stats.getAllPlugins()\n        for plugin in plugins_to_check:\n            self.assertTrue(plugin in plugins_list)\n\n    def test_002_system(self):\n        \"\"\"Check SYSTEM plugin.\"\"\"\n        stats_to_check = ['hostname', 'os_name']\n        print('INFO: [TEST_002] Check SYSTEM stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('system').get_raw()\n        for stat in stats_to_check:\n             Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n        print('INFO: SYSTEM stats: %s' % stats_grab)\n\n    def test_003_cpu(self):\n        \"\"\"Check CPU plugin.\"\"\"\n        stats_to_check = ['system', 'user', 'idle']\n        print('INFO: [TEST_003] Check mandatory CPU stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('cpu').get_raw()\n        for stat in stats_to_check:\n             Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n             Check that % is > 0 and < 100\n            self.assertGreaterEqual(stats_grab[stat], 0)\n            self.assertLessEqual(stats_grab[stat], 100)\n        print('INFO: CPU stats: %s' % stats_grab)\n\n    @unittest.skipIf(WINDOWS, \"Load average not available on Windows\")\n    def test_004_load(self):\n        \"\"\"Check LOAD plugin.\"\"\"\n        stats_to_check = ['cpucore', 'min1', 'min5', 'min15']\n        print('INFO: [TEST_004] Check LOAD stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('load').get_raw()\n        for stat in stats_to_check:\n             Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n             Check that % is > 0\n            self.assertGreaterEqual(stats_grab[stat], 0)\n        print('INFO: LOAD stats: %s' % stats_grab)\n\n    def test_005_mem(self):\n        \"\"\"Check MEM plugin.\"\"\"\n        stats_to_check = ['available', 'used', 'free', 'total']\n        print('INFO: [TEST_005] Check MEM stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('mem').get_raw()\n        for stat in stats_to_check:\n             Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n             Check that % is > 0\n            self.assertGreaterEqual(stats_grab[stat], 0)\n        print('INFO: MEM stats: %s' % stats_grab)\n\n    def test_006_swap(self):\n        \"\"\"Check MEMSWAP plugin.\"\"\"\n        stats_to_check = ['used', 'free', 'total']\n        print('INFO: [TEST_006] Check SWAP stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('memswap').get_raw()\n        for stat in stats_to_check:\n             Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n             Check that % is > 0\n            self.assertGreaterEqual(stats_grab[stat], 0)\n        print('INFO: SWAP stats: %s' % stats_grab)\n\n    def test_007_network(self):\n        \"\"\"Check NETWORK plugin.\"\"\"\n        print('INFO: [TEST_007] Check NETWORK stats')\n        stats_grab = stats.get_plugin('network').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='Network stats is not a list')\n        print('INFO: NETWORK stats: %s' % stats_grab)\n\n    def test_008_diskio(self):\n        \"\"\"Check DISKIO plugin.\"\"\"\n        print('INFO: [TEST_008] Check DISKIO stats')\n        stats_grab = stats.get_plugin('diskio').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='DiskIO stats is not a list')\n        print('INFO: diskio stats: %s' % stats_grab)\n\n    def test_009_fs(self):\n        \"\"\"Check File System plugin.\"\"\"\n         stats_to_check = [ ]\n        print('INFO: [TEST_009] Check FS stats')\n        stats_grab = stats.get_plugin('fs').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='FileSystem stats is not a list')\n        print('INFO: FS stats: %s' % stats_grab)\n\n    def test_010_processes(self):\n        \"\"\"Check Process plugin.\"\"\"\n         stats_to_check = [ ]\n        print('INFO: [TEST_010] Check PROCESS stats')\n        stats_grab = stats.get_plugin('processcount').get_raw()\n         total = stats_grab['total']\n        self.assertTrue(type(stats_grab) is dict, msg='Process count stats is not a dict')\n        print('INFO: PROCESS count stats: %s' % stats_grab)\n        stats_grab = stats.get_plugin('processlist').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='Process count stats is not a list')\n        print('INFO: PROCESS list stats: %s items in the list' % len(stats_grab))\n         Check if number of processes in the list equal counter\n         self.assertEqual(total, len(stats_grab))\n\n    def test_011_folders(self):\n        \"\"\"Check File System plugin.\"\"\"\n         stats_to_check = [ ]\n        print('INFO: [TEST_011] Check FOLDER stats')\n        stats_grab = stats.get_plugin('folders').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='Folders stats is not a list')\n        print('INFO: Folders stats: %s' % stats_grab)\n\n    def test_012_ip(self):\n        \"\"\"Check IP plugin.\"\"\"\n        print('INFO: [TEST_012] Check IP stats')\n        stats_grab = stats.get_plugin('ip').get_raw()\n        self.assertTrue(type(stats_grab) is dict, msg='IP stats is not a dict')\n        print('INFO: IP stats: %s' % stats_grab)\n\n    @unittest.skipIf(not LINUX, \"IRQs available only on Linux\")\n    def test_013_irq(self):\n        \"\"\"Check IRQ plugin.\"\"\"\n        print('INFO: [TEST_013] Check IRQ stats')\n        stats_grab = stats.get_plugin('irq').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='IRQ stats is not a list')\n        print('INFO: IRQ stats: %s' % stats_grab)\n\n    @unittest.skipIf(not LINUX, \"GPU available only on Linux\")\n    def test_013_gpu(self):\n        \"\"\"Check GPU plugin.\"\"\"\n        print('INFO: [TEST_014] Check GPU stats')\n        stats_grab = stats.get_plugin('gpu').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='GPU stats is not a list')\n        print('INFO: GPU stats: %s' % stats_grab)\n\n    @unittest.skipIf(PY3, True)\n    @unittest.skipIf(PY_PYPY, True)\n    def test_094_thresholds(self):\n        \"\"\"Test thresholds classes\"\"\"\n        print('INFO: [TEST_094] Thresholds')\n        ok = GlancesThresholdOk()\n        careful = GlancesThresholdCareful()\n        warning = GlancesThresholdWarning()\n        critical = GlancesThresholdCritical()\n        self.assertTrue(ok < careful)\n        self.assertTrue(careful < warning)\n        self.assertTrue(warning < critical)\n        self.assertFalse(ok > careful)\n        self.assertTrue(ok == ok)\n        self.assertTrue(str(ok) == 'OK')\n        thresholds = GlancesThresholds()\n        thresholds.add('cpu_percent', 'OK')\n        self.assertTrue(thresholds.get(stat_name='cpu_percent').description() == 'OK')\n\n    def test_095_methods(self):\n        \"\"\"Test mandatories methods\"\"\"\n        print('INFO: [TEST_095] Mandatories methods')\n        mandatories_methods = ['reset', 'update']\n        plugins_list = stats.getAllPlugins()\n        for plugin in plugins_list:\n            for method in mandatories_methods:\n                self.assertTrue(hasattr(stats.get_plugin(plugin), method),\n                                msg='{} has no method {}()'.format(plugin, method))\n\n    def test_096_views(self):\n        \"\"\"Test get_views method\"\"\"\n        print('INFO: [TEST_096] Test views')\n        plugins_list = stats.getAllPlugins()\n        for plugin in plugins_list:\n            stats_grab = stats.get_plugin(plugin).get_raw()\n            views_grab = stats.get_plugin(plugin).get_views()\n            self.assertTrue(type(views_grab) is dict,\n                            msg='{} view is not a dict'.format(plugin))\n\n    def test_097_attribute(self):\n        \"\"\"Test GlancesAttribute classe\"\"\"\n        print('INFO: [TEST_097] Test attribute')\n         GlancesAttribute\n        from glances.attribute import GlancesAttribute\n        a = GlancesAttribute('a', description='ad', history_max_size=3)\n        self.assertEqual(a.name, 'a')\n        self.assertEqual(a.description, 'ad')\n        a.description = 'adn'\n        self.assertEqual(a.description, 'adn')\n        a.value = 1\n        a.value = 2\n        self.assertEqual(len(a.history), 2)\n        a.value = 3\n        self.assertEqual(len(a.history), 3)\n        a.value = 4\n         Check if history_max_size=3 is OK\n        self.assertEqual(len(a.history), 3)\n        self.assertEqual(a.history_size(), 3)\n        self.assertEqual(a.history_len(), 3)\n        self.assertEqual(a.history_value()[1], 4)\n        self.assertEqual(a.history_mean(nb=3), 4.5)\n\n    def test_098_history(self):\n        \"\"\"Test GlancesHistory classe\"\"\"\n        print('INFO: [TEST_098] Test history')\n         GlancesHistory\n        from glances.history import GlancesHistory\n        h = GlancesHistory()\n        h.add('a', 1)\n        h.add('a', 2)\n        h.add('a', 3)\n        h.add('b', 10)\n        h.add('b', 20)\n        h.add('b', 30)\n        self.assertEqual(len(h.get()), 2)\n        self.assertEqual(len(h.get()['a']), 3)\n        h.reset()\n        self.assertEqual(len(h.get()), 2)\n        self.assertEqual(len(h.get()['a']), 0)\n\n    def test_099_output_bars_must_be_between_0_and_100_percent(self):\n        \"\"\"Test quick look plugin.\n\n        > bar.min_value\n        0\n        > bar.max_value\n        100\n        > bar.percent = -1\n        > bar.percent\n        0\n        > bar.percent = 101\n        > bar.percent\n        100\n        \"\"\"\n        print('INFO: [TEST_099] Test progress bar')\n        bar = Bar(size=1)\n        bar.percent = -1\n        self.assertLessEqual(bar.percent, bar.min_value)\n        bar.percent = 101\n        self.assertGreaterEqual(bar.percent, bar.max_value)\n\n    def test_999_the_end(self):\n        \"\"\"Free all the stats\"\"\"\n        print('INFO: [TEST_999] Free the stats')\n        stats.end()\n        self.assertTrue(True)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "   glances unitary tests suite      import time import unittest  glances main import glancesmain glances stats import glancesstats glances import   version   glances globals import windows  linux glances outputs glances bars import bar glances compat import py3  py pypy glances thresholds import glancesthresholdok glances thresholds import glancesthresholdcareful glances thresholds import glancesthresholdwarning glances thresholds import glancesthresholdcritical glances thresholds import glancesthresholds    global variables                        init glances core core   glancesmain()    init glances stats stats   glancesstats()    unitest class                  print( unitary tests glances       version  )   class testglances(unittest testcase)         test glances class          def setup(self)             the function called  every time  test               print(  n          78)      def test 000 update(self)             update stats (mandatory step stats)           the update made twice (for rate computation)                      print( info   test 000  test stats update function )         try              stats update()         except exception e              print( error  stats update failed      e)             self asserttrue(false)         time sleep(1)         try              stats update()         except exception e              print( error  stats update failed      e)             self asserttrue(false)          self asserttrue(true)      def test 001 plugins(self)             check mandatory plugins             plugins check     system    cpu    load    mem    memswap    network    diskio    fs    irq           print( info   test 001  check mandatory plugins list           join(plugins check))         plugins list   stats getallplugins()         plugin plugins check              self asserttrue(plugin plugins list)      def test 002 system(self)             check system plugin             stats check     hostname    os name           print( info   test 002  check system stats           join(stats check))         stats grab   stats get plugin( system ) get raw()         stat stats check                check key exist             self asserttrue(stat stats grab  msg  cannot find key      stat)         print( info  system stats      stats grab)      def test 003 cpu(self)             check cpu plugin             stats check     system    user    idle           print( info   test 003  check mandatory cpu stats           join(stats check))         stats grab   stats get plugin( cpu ) get raw()         stat stats check                check key exist             self asserttrue(stat stats grab  msg  cannot find key      stat)               check     0   100             self assertgreaterequal(stats grab stat   0)             self assertlessequal(stats grab stat   100)         print( info  cpu stats      stats grab)       unittest skipif(windows   load average available windows )     def test 004 load(self)             check load plugin             stats check     cpucore    min1    min5    min15           print( info   test 004  check load stats           join(stats check))         stats grab   stats get plugin( load ) get raw()         stat stats check                check key exist             self asserttrue(stat stats grab  msg  cannot find key      stat)               check     0             self assertgreaterequal(stats grab stat   0)         print( info  load stats      stats grab)      def test 005 mem(self)             check mem plugin             stats check     available    used    free    total           print( info   test 005  check mem stats           join(stats check))         stats grab   stats get plugin( mem ) get raw()         stat stats check                check key exist             self asserttrue(stat stats grab  msg  cannot find key      stat)               check     0             self assertgreaterequal(stats grab stat   0)         print( info  mem stats      stats grab)      def test 006 swap(self)             check memswap plugin             stats check     used    free    total           print( info   test 006  check swap stats           join(stats check))         stats grab   stats get plugin( memswap ) get raw()         stat stats check                check key exist             self asserttrue(stat stats grab  msg  cannot find key      stat)               check     0             self assertgreaterequal(stats grab stat   0)         print( info  swap stats      stats grab)      def test 007 network(self)             check network plugin             print( info   test 007  check network stats )         stats grab   stats get plugin( network ) get raw()         self asserttrue(type(stats grab) list  msg  network stats list )         print( info  network stats      stats grab)      def test 008 diskio(self)             check diskio plugin             print( info   test 008  check diskio stats )         stats grab   stats get plugin( diskio ) get raw()         self asserttrue(type(stats grab) list  msg  diskio stats list )         print( info  diskio stats      stats grab)      def test 009 fs(self)             check file system plugin               stats check               print( info   test 009  check fs stats )         stats grab   stats get plugin( fs ) get raw()         self asserttrue(type(stats grab) list  msg  filesystem stats list )         print( info  fs stats      stats grab)      def test 010 processes(self)             check process plugin               stats check               print( info   test 010  check process stats )         stats grab   stats get plugin( processcount ) get raw()           total   stats grab  total           self asserttrue(type(stats grab) dict  msg  process count stats dict )         print( info  process count stats      stats grab)         stats grab   stats get plugin( processlist ) get raw()         self asserttrue(type(stats grab) list  msg  process count stats list )         print( info  process list stats   items list    len(stats grab))           check number processes list equal counter           self assertequal(total  len(stats grab))      def test 011 folders(self)             check file system plugin               stats check               print( info   test 011  check folder stats )         stats grab   stats get plugin( folders ) get raw()         self asserttrue(type(stats grab) list  msg  folders stats list )         print( info  folders stats      stats grab)      def test 012 ip(self)             check ip plugin             print( info   test 012  check ip stats )         stats grab   stats get plugin( ip ) get raw()         self asserttrue(type(stats grab) dict  msg  ip stats dict )         print( info  ip stats      stats grab)       unittest skipif(not linux   irqs available linux )     def test 013 irq(self)             check irq plugin             print( info   test 013  check irq stats )         stats grab   stats get plugin( irq ) get raw()         self asserttrue(type(stats grab) list  msg  irq stats list )         print( info  irq stats      stats grab)       unittest skipif(not linux   gpu available linux )     def test 013 gpu(self)             check gpu plugin             print( info   test 014  check gpu stats )         stats grab   stats get plugin( gpu ) get raw()         self asserttrue(type(stats grab) list  msg  gpu stats list )         print( info  gpu stats      stats grab)       unittest skipif(py3  true)      unittest skipif(py pypy  true)     def test 094 thresholds(self)             test thresholds classes            print( info   test 094  thresholds )         ok   glancesthresholdok()         careful   glancesthresholdcareful()         warning   glancesthresholdwarning()         critical   glancesthresholdcritical()         self asserttrue(ok   careful)         self asserttrue(careful   warning)         self asserttrue(warning   critical)         self assertfalse(ok   careful)         self asserttrue(ok    ok)         self asserttrue(str(ok)     ok )         thresholds   glancesthresholds()         thresholds add( cpu percent    ok )         self asserttrue(thresholds get(stat name  cpu percent ) description()     ok )      def test 095 methods(self)             test mandatories methods            print( info   test 095  mandatories methods )         mandatories methods     reset    update           plugins list   stats getallplugins()         plugin plugins list              method mandatories methods                  self asserttrue(hasattr(stats get plugin(plugin)  method)                                  msg     method   ()  format(plugin  method))      def test 096 views(self)             test get views method            print( info   test 096  test views )         plugins list   stats getallplugins()         plugin plugins list              stats grab   stats get plugin(plugin) get raw()             views grab   stats get plugin(plugin) get views()             self asserttrue(type(views grab) dict                              msg     view dict  format(plugin))      def test 097 attribute(self)             test glancesattribute classe            print( info   test 097  test attribute )           glancesattribute         glances attribute import glancesattribute           glancesattribute(   description  ad   history max size 3)         self assertequal(a name   )         self assertequal(a description   ad )         description    adn          self assertequal(a description   adn )         value   1         value   2         self assertequal(len(a history)  2)         value   3         self assertequal(len(a history)  3)         value   4           check history max size 3 ok         self assertequal(len(a history)  3)         self assertequal(a history size()  3)         self assertequal(a history len()  3)         self assertequal(a history value() 1   4)         self assertequal(a history mean(nb 3)  4 5)      def test 098 history(self)             test glanceshistory classe            print( info   test 098  test history )           glanceshistory         glances history import glanceshistory         h   glanceshistory()         h add(   1)         h add(   2)         h add(   3)         h add( b   10)         h add( b   20)         h add( b   30)         self assertequal(len(h get())  2)         self assertequal(len(h get()   )  3)         h reset()         self assertequal(len(h get())  2)         self assertequal(len(h get()   )  0)      def test 099 output bars must 0 100 percent(self)             test quick look plugin             bar min value         0           bar max value         100           bar percent    1           bar percent         0           bar percent   101           bar percent         100                     print( info   test 099  test progress bar )         bar   bar(size 1)         bar percent    1         self assertlessequal(bar percent  bar min value)         bar percent   101         self assertgreaterequal(bar percent  bar max value)      def test 999 end(self)             free stats        usr bin env python        coding  utf 8           glances   an eye system       copyright (c) 2017 nicolargo  nicolas nicolargo com        glances free software  redistribute modify    terms gnu lesser general public license published    free software foundation  either version 3 license     (at option) later version        glances distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose  see    gnu lesser general public license details        you received copy gnu lesser general public license    along program  if  see  http   www gnu org licenses       global variables                         init glances core    init glances stats    unitest class                      check key exist    check key exist    check     0   100    check key exist    check     0    check key exist    check     0    check key exist    check     0    stats check          stats check          total   stats grab  total      check number processes list equal counter    self assertequal(total  len(stats grab))    stats check          glancesattribute    check history max size 3 ok    glanceshistory ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Glances - An eye on your system\n#\n# Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n#\n# Glances is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Glances is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Glances unitary tests suite.\"\"\"\n\nimport time\nimport unittest\n\nfrom glances.main import GlancesMain\nfrom glances.stats import GlancesStats\nfrom glances import __version__\nfrom glances.globals import WINDOWS, LINUX\nfrom glances.outputs.glances_bars import Bar\nfrom glances.compat import PY3, PY_PYPY\nfrom glances.thresholds import GlancesThresholdOk\nfrom glances.thresholds import GlancesThresholdCareful\nfrom glances.thresholds import GlancesThresholdWarning\nfrom glances.thresholds import GlancesThresholdCritical\nfrom glances.thresholds import GlancesThresholds\n\n# Global variables\n# =================\n\n# Init Glances core\ncore = GlancesMain()\n\n# Init Glances stats\nstats = GlancesStats()\n\n# Unitest class\n# ==============\nprint('Unitary tests for Glances %s' % __version__)\n\n\nclass TestGlances(unittest.TestCase):\n    \"\"\"Test Glances class.\"\"\"\n\n    def setUp(self):\n        \"\"\"The function is called *every time* before test_*.\"\"\"\n        print('\\n' + '=' * 78)\n\n    def test_000_update(self):\n        \"\"\"Update stats (mandatory step for all the stats).\n\n        The update is made twice (for rate computation).\n        \"\"\"\n        print('INFO: [TEST_000] Test the stats update function')\n        try:\n            stats.update()\n        except Exception as e:\n            print('ERROR: Stats update failed: %s' % e)\n            self.assertTrue(False)\n        time.sleep(1)\n        try:\n            stats.update()\n        except Exception as e:\n            print('ERROR: Stats update failed: %s' % e)\n            self.assertTrue(False)\n\n        self.assertTrue(True)\n\n    def test_001_plugins(self):\n        \"\"\"Check mandatory plugins.\"\"\"\n        plugins_to_check = ['system', 'cpu', 'load', 'mem', 'memswap', 'network', 'diskio', 'fs', 'irq']\n        print('INFO: [TEST_001] Check the mandatory plugins list: %s' % ', '.join(plugins_to_check))\n        plugins_list = stats.getAllPlugins()\n        for plugin in plugins_to_check:\n            self.assertTrue(plugin in plugins_list)\n\n    def test_002_system(self):\n        \"\"\"Check SYSTEM plugin.\"\"\"\n        stats_to_check = ['hostname', 'os_name']\n        print('INFO: [TEST_002] Check SYSTEM stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('system').get_raw()\n        for stat in stats_to_check:\n            # Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n        print('INFO: SYSTEM stats: %s' % stats_grab)\n\n    def test_003_cpu(self):\n        \"\"\"Check CPU plugin.\"\"\"\n        stats_to_check = ['system', 'user', 'idle']\n        print('INFO: [TEST_003] Check mandatory CPU stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('cpu').get_raw()\n        for stat in stats_to_check:\n            # Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n            # Check that % is > 0 and < 100\n            self.assertGreaterEqual(stats_grab[stat], 0)\n            self.assertLessEqual(stats_grab[stat], 100)\n        print('INFO: CPU stats: %s' % stats_grab)\n\n    @unittest.skipIf(WINDOWS, \"Load average not available on Windows\")\n    def test_004_load(self):\n        \"\"\"Check LOAD plugin.\"\"\"\n        stats_to_check = ['cpucore', 'min1', 'min5', 'min15']\n        print('INFO: [TEST_004] Check LOAD stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('load').get_raw()\n        for stat in stats_to_check:\n            # Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n            # Check that % is > 0\n            self.assertGreaterEqual(stats_grab[stat], 0)\n        print('INFO: LOAD stats: %s' % stats_grab)\n\n    def test_005_mem(self):\n        \"\"\"Check MEM plugin.\"\"\"\n        stats_to_check = ['available', 'used', 'free', 'total']\n        print('INFO: [TEST_005] Check MEM stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('mem').get_raw()\n        for stat in stats_to_check:\n            # Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n            # Check that % is > 0\n            self.assertGreaterEqual(stats_grab[stat], 0)\n        print('INFO: MEM stats: %s' % stats_grab)\n\n    def test_006_swap(self):\n        \"\"\"Check MEMSWAP plugin.\"\"\"\n        stats_to_check = ['used', 'free', 'total']\n        print('INFO: [TEST_006] Check SWAP stats: %s' % ', '.join(stats_to_check))\n        stats_grab = stats.get_plugin('memswap').get_raw()\n        for stat in stats_to_check:\n            # Check that the key exist\n            self.assertTrue(stat in stats_grab, msg='Cannot find key: %s' % stat)\n            # Check that % is > 0\n            self.assertGreaterEqual(stats_grab[stat], 0)\n        print('INFO: SWAP stats: %s' % stats_grab)\n\n    def test_007_network(self):\n        \"\"\"Check NETWORK plugin.\"\"\"\n        print('INFO: [TEST_007] Check NETWORK stats')\n        stats_grab = stats.get_plugin('network').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='Network stats is not a list')\n        print('INFO: NETWORK stats: %s' % stats_grab)\n\n    def test_008_diskio(self):\n        \"\"\"Check DISKIO plugin.\"\"\"\n        print('INFO: [TEST_008] Check DISKIO stats')\n        stats_grab = stats.get_plugin('diskio').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='DiskIO stats is not a list')\n        print('INFO: diskio stats: %s' % stats_grab)\n\n    def test_009_fs(self):\n        \"\"\"Check File System plugin.\"\"\"\n        # stats_to_check = [ ]\n        print('INFO: [TEST_009] Check FS stats')\n        stats_grab = stats.get_plugin('fs').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='FileSystem stats is not a list')\n        print('INFO: FS stats: %s' % stats_grab)\n\n    def test_010_processes(self):\n        \"\"\"Check Process plugin.\"\"\"\n        # stats_to_check = [ ]\n        print('INFO: [TEST_010] Check PROCESS stats')\n        stats_grab = stats.get_plugin('processcount').get_raw()\n        # total = stats_grab['total']\n        self.assertTrue(type(stats_grab) is dict, msg='Process count stats is not a dict')\n        print('INFO: PROCESS count stats: %s' % stats_grab)\n        stats_grab = stats.get_plugin('processlist').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='Process count stats is not a list')\n        print('INFO: PROCESS list stats: %s items in the list' % len(stats_grab))\n        # Check if number of processes in the list equal counter\n        # self.assertEqual(total, len(stats_grab))\n\n    def test_011_folders(self):\n        \"\"\"Check File System plugin.\"\"\"\n        # stats_to_check = [ ]\n        print('INFO: [TEST_011] Check FOLDER stats')\n        stats_grab = stats.get_plugin('folders').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='Folders stats is not a list')\n        print('INFO: Folders stats: %s' % stats_grab)\n\n    def test_012_ip(self):\n        \"\"\"Check IP plugin.\"\"\"\n        print('INFO: [TEST_012] Check IP stats')\n        stats_grab = stats.get_plugin('ip').get_raw()\n        self.assertTrue(type(stats_grab) is dict, msg='IP stats is not a dict')\n        print('INFO: IP stats: %s' % stats_grab)\n\n    @unittest.skipIf(not LINUX, \"IRQs available only on Linux\")\n    def test_013_irq(self):\n        \"\"\"Check IRQ plugin.\"\"\"\n        print('INFO: [TEST_013] Check IRQ stats')\n        stats_grab = stats.get_plugin('irq').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='IRQ stats is not a list')\n        print('INFO: IRQ stats: %s' % stats_grab)\n\n    @unittest.skipIf(not LINUX, \"GPU available only on Linux\")\n    def test_013_gpu(self):\n        \"\"\"Check GPU plugin.\"\"\"\n        print('INFO: [TEST_014] Check GPU stats')\n        stats_grab = stats.get_plugin('gpu').get_raw()\n        self.assertTrue(type(stats_grab) is list, msg='GPU stats is not a list')\n        print('INFO: GPU stats: %s' % stats_grab)\n\n    @unittest.skipIf(PY3, True)\n    @unittest.skipIf(PY_PYPY, True)\n    def test_094_thresholds(self):\n        \"\"\"Test thresholds classes\"\"\"\n        print('INFO: [TEST_094] Thresholds')\n        ok = GlancesThresholdOk()\n        careful = GlancesThresholdCareful()\n        warning = GlancesThresholdWarning()\n        critical = GlancesThresholdCritical()\n        self.assertTrue(ok < careful)\n        self.assertTrue(careful < warning)\n        self.assertTrue(warning < critical)\n        self.assertFalse(ok > careful)\n        self.assertTrue(ok == ok)\n        self.assertTrue(str(ok) == 'OK')\n        thresholds = GlancesThresholds()\n        thresholds.add('cpu_percent', 'OK')\n        self.assertTrue(thresholds.get(stat_name='cpu_percent').description() == 'OK')\n\n    def test_095_methods(self):\n        \"\"\"Test mandatories methods\"\"\"\n        print('INFO: [TEST_095] Mandatories methods')\n        mandatories_methods = ['reset', 'update']\n        plugins_list = stats.getAllPlugins()\n        for plugin in plugins_list:\n            for method in mandatories_methods:\n                self.assertTrue(hasattr(stats.get_plugin(plugin), method),\n                                msg='{} has no method {}()'.format(plugin, method))\n\n    def test_096_views(self):\n        \"\"\"Test get_views method\"\"\"\n        print('INFO: [TEST_096] Test views')\n        plugins_list = stats.getAllPlugins()\n        for plugin in plugins_list:\n            stats_grab = stats.get_plugin(plugin).get_raw()\n            views_grab = stats.get_plugin(plugin).get_views()\n            self.assertTrue(type(views_grab) is dict,\n                            msg='{} view is not a dict'.format(plugin))\n\n    def test_097_attribute(self):\n        \"\"\"Test GlancesAttribute classe\"\"\"\n        print('INFO: [TEST_097] Test attribute')\n        # GlancesAttribute\n        from glances.attribute import GlancesAttribute\n        a = GlancesAttribute('a', description='ad', history_max_size=3)\n        self.assertEqual(a.name, 'a')\n        self.assertEqual(a.description, 'ad')\n        a.description = 'adn'\n        self.assertEqual(a.description, 'adn')\n        a.value = 1\n        a.value = 2\n        self.assertEqual(len(a.history), 2)\n        a.value = 3\n        self.assertEqual(len(a.history), 3)\n        a.value = 4\n        # Check if history_max_size=3 is OK\n        self.assertEqual(len(a.history), 3)\n        self.assertEqual(a.history_size(), 3)\n        self.assertEqual(a.history_len(), 3)\n        self.assertEqual(a.history_value()[1], 4)\n        self.assertEqual(a.history_mean(nb=3), 4.5)\n\n    def test_098_history(self):\n        \"\"\"Test GlancesHistory classe\"\"\"\n        print('INFO: [TEST_098] Test history')\n        # GlancesHistory\n        from glances.history import GlancesHistory\n        h = GlancesHistory()\n        h.add('a', 1)\n        h.add('a', 2)\n        h.add('a', 3)\n        h.add('b', 10)\n        h.add('b', 20)\n        h.add('b', 30)\n        self.assertEqual(len(h.get()), 2)\n        self.assertEqual(len(h.get()['a']), 3)\n        h.reset()\n        self.assertEqual(len(h.get()), 2)\n        self.assertEqual(len(h.get()['a']), 0)\n\n    def test_099_output_bars_must_be_between_0_and_100_percent(self):\n        \"\"\"Test quick look plugin.\n\n        > bar.min_value\n        0\n        > bar.max_value\n        100\n        > bar.percent = -1\n        > bar.percent\n        0\n        > bar.percent = 101\n        > bar.percent\n        100\n        \"\"\"\n        print('INFO: [TEST_099] Test progress bar')\n        bar = Bar(size=1)\n        bar.percent = -1\n        self.assertLessEqual(bar.percent, bar.min_value)\n        bar.percent = 101\n        self.assertGreaterEqual(bar.percent, bar.max_value)\n\n    def test_999_the_end(self):\n        \"\"\"Free all the stats\"\"\"\n        print('INFO: [TEST_999] Free the stats')\n        stats.end()\n        self.assertTrue(True)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Glances an Eye on your system. A top/htop alternative.", "file_name": "unitest.py", "id": "aa65fdc097e37cc3b0343b7ec72abc5f", "language": "Python", "project_name": "glances", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nicolargo-glances/nicolargo-glances-c286362/unitest.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:40:41Z", "url": "https://github.com/nicolargo/glances", "wiki": true}