{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    str_to_int,\n    xpath_text,\n    unescapeHTML,\n)\n\n\nclass DaumIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:m\\.)?tvpot\\.daum\\.net/v/|videofarm\\.daum\\.net/controller/player/VodPlayer\\.swf\\?vid=)(?P<id>[^?\n    IE_NAME = 'daum.net'\n\n    _TESTS = [{\n        'url': 'http://tvpot.daum.net/v/vab4dyeDBysyBssyukBUjBz',\n        'info_dict': {\n            'id': 'vab4dyeDBysyBssyukBUjBz',\n            'ext': 'mp4',\n            'title': '\ub9c8\ud06c \ud5cc\ud2b8 vs \uc548\ud1a0\ub2c8\uc624 \uc2e4\ubc14',\n            'description': 'Mark Hunt vs Antonio Silva',\n            'upload_date': '20131217',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'duration': 2117,\n            'view_count': int,\n            'comment_count': int,\n        },\n    }, {\n        'url': 'http://m.tvpot.daum.net/v/65139429',\n        'info_dict': {\n            'id': '65139429',\n            'ext': 'mp4',\n            'title': '1297\ud68c, \\'\uc544\ube60 \uc544\ub4e4\ub85c \ud0dc\uc5b4\ub098\uae38 \uc798 \ud588\uc5b4\\' \ubbfc\uc218, \uac10\ub3d9\uc758 \ub208\ubb3c[\uc544\ube60 \uc5b4\ub514\uac00] 20150118',\n            'description': 'md5:79794514261164ff27e36a21ad229fc5',\n            'upload_date': '20150604',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'duration': 154,\n            'view_count': int,\n            'comment_count': int,\n        },\n    }, {\n        'url': 'http://tvpot.daum.net/v/07dXWRka62Y%24',\n        'only_matching': True,\n    }, {\n        'url': 'http://videofarm.daum.net/controller/player/VodPlayer.swf?vid=vwIpVpCQsT8%24&ref=',\n        'info_dict': {\n            'id': 'vwIpVpCQsT8$',\n            'ext': 'flv',\n            'title': '01-Korean War ( Trouble on the horizon )',\n            'description': '\\nKorean War 01\\nTrouble on the horizon\\n\uc804\uc7c1\uc758 \uba39\uad6c\ub984',\n            'upload_date': '20080223',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'duration': 249,\n            'view_count': int,\n            'comment_count': int,\n        },\n    }, {\n        \n        'url': 'http://tvpot.daum.net/v/s3794Uf1NZeZ1qMpGpeqeRU',\n        'md5': 'a8917742069a4dd442516b86e7d66529',\n        'info_dict': {\n            'id': 's3794Uf1NZeZ1qMpGpeqeRU',\n            'ext': 'mp4',\n            'title': '\ub7ec\ube14\ub9ac\uc988 - Destiny (\ub098\uc758 \uc9c0\uad6c) (Lovelyz - Destiny) [\uc1fc! \uc74c\uc545\uc911\uc2ec] 508\ud68c 20160611',\n            'description': '\ub7ec\ube14\ub9ac\uc988 - Destiny (\ub098\uc758 \uc9c0\uad6c) (Lovelyz - Destiny)\\n\\n[\uc1fc! \uc74c\uc545\uc911\uc2ec] 20160611, 507\ud68c',\n            'upload_date': '20160611',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = compat_urllib_parse_unquote(self._match_id(url))\n        movie_data = self._download_json(\n            'http://videofarm.daum.net/controller/api/closed/v1_2/IntegratedMovieData.json',\n            video_id, 'Downloading video formats info', query={'vid': video_id, 'dte_type': 'WEB'})\n\n        \n        if not movie_data.get('output_list', {}).get('output_list') and re.match(r'^\\d+$', video_id):\n            return self.url_result('http://tvpot.daum.net/clip/ClipView.do?clipid=%s' % video_id)\n\n        info = self._download_xml(\n            'http://tvpot.daum.net/clip/ClipInfoXml.do', video_id,\n            'Downloading video info', query={'vid': video_id})\n\n        formats = []\n        for format_el in movie_data['output_list']['output_list']:\n            profile = format_el['profile']\n            format_query = compat_urllib_parse_urlencode({\n                'vid': video_id,\n                'profile': profile,\n            })\n            url_doc = self._download_xml(\n                'http://videofarm.daum.net/controller/api/open/v1_2/MovieLocation.apixml?' + format_query,\n                video_id, note='Downloading video data for %s format' % profile)\n            format_url = url_doc.find('result/url').text\n            formats.append({\n                'url': format_url,\n                'format_id': profile,\n                'width': int_or_none(format_el.get('width')),\n                'height': int_or_none(format_el.get('height')),\n                'filesize': int_or_none(format_el.get('filesize')),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info.find('TITLE').text,\n            'formats': formats,\n            'thumbnail': xpath_text(info, 'THUMB_URL'),\n            'description': xpath_text(info, 'CONTENTS'),\n            'duration': int_or_none(xpath_text(info, 'DURATION')),\n            'upload_date': info.find('REGDTTM').text[:8],\n            'view_count': str_to_int(xpath_text(info, 'PLAY_CNT')),\n            'comment_count': str_to_int(xpath_text(info, 'COMMENT_CNT')),\n        }\n\n\nclass DaumClipIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:m\\.)?tvpot\\.daum\\.net/(?:clip/ClipView.(?:do|tv)|mypot/View.do)\\?.*?clipid=(?P<id>\\d+)'\n    IE_NAME = 'daum.net:clip'\n    _URL_TEMPLATE = 'http://tvpot.daum.net/clip/ClipView.do?clipid=%s'\n\n    _TESTS = [{\n        'url': 'http://tvpot.daum.net/clip/ClipView.do?clipid=52554690',\n        'info_dict': {\n            'id': '52554690',\n            'ext': 'mp4',\n            'title': 'DOTA 2GETHER \uc2dc\uc98c2 6\ud68c - 2\ubd80',\n            'description': 'DOTA 2GETHER \uc2dc\uc98c2 6\ud68c - 2\ubd80',\n            'upload_date': '20130831',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'duration': 3868,\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://m.tvpot.daum.net/clip/ClipView.tv?clipid=54999425',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if DaumPlaylistIE.suitable(url) or DaumUserIE.suitable(url) else super(DaumClipIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        clip_info = self._download_json(\n            'http://tvpot.daum.net/mypot/json/GetClipInfo.do?clipid=%s' % video_id,\n            video_id, 'Downloading clip info')['clip_bean']\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'url': 'http://tvpot.daum.net/v/%s' % clip_info['vid'],\n            'title': unescapeHTML(clip_info['title']),\n            'thumbnail': clip_info.get('thumb_url'),\n            'description': clip_info.get('contents'),\n            'duration': int_or_none(clip_info.get('duration')),\n            'upload_date': clip_info.get('up_date')[:8],\n            'view_count': int_or_none(clip_info.get('play_count')),\n            'ie_key': 'Daum',\n        }\n\n\nclass DaumListIE(InfoExtractor):\n    def _get_entries(self, list_id, list_id_type):\n        name = None\n        entries = []\n        for pagenum in itertools.count(1):\n            list_info = self._download_json(\n                'http://tvpot.daum.net/mypot/json/GetClipInfo.do?size=48&init=true&order=date&page=%d&%s=%s' % (\n                    pagenum, list_id_type, list_id), list_id, 'Downloading list info - %s' % pagenum)\n\n            entries.extend([\n                self.url_result(\n                    'http://tvpot.daum.net/v/%s' % clip['vid'])\n                for clip in list_info['clip_list']\n            ])\n\n            if not name:\n                name = list_info.get('playlist_bean', {}).get('name') or \\\n                    list_info.get('potInfo', {}).get('name')\n\n            if not list_info.get('has_more'):\n                break\n\n        return name, entries\n\n    def _check_clip(self, url, list_id):\n        query_dict = compat_parse_qs(compat_urlparse.urlparse(url).query)\n        if 'clipid' in query_dict:\n            clip_id = query_dict['clipid'][0]\n            if self._downloader.params.get('noplaylist'):\n                self.to_screen('Downloading just video %s because of --no-playlist' % clip_id)\n                return self.url_result(DaumClipIE._URL_TEMPLATE % clip_id, 'DaumClip')\n            else:\n                self.to_screen('Downloading playlist %s - add --no-playlist to just download video' % list_id)\n\n\nclass DaumPlaylistIE(DaumListIE):\n    _VALID_URL = r'https?://(?:m\\.)?tvpot\\.daum\\.net/mypot/(?:View\\.do|Top\\.tv)\\?.*?playlistid=(?P<id>[0-9]+)'\n    IE_NAME = 'daum.net:playlist'\n    _URL_TEMPLATE = 'http://tvpot.daum.net/mypot/View.do?playlistid=%s'\n\n    _TESTS = [{\n        'note': 'Playlist url with clipid',\n        'url': 'http://tvpot.daum.net/mypot/View.do?playlistid=6213966&clipid=73806844',\n        'info_dict': {\n            'id': '6213966',\n            'title': 'Woorissica Official',\n        },\n        'playlist_mincount': 181\n    }, {\n        'note': 'Playlist url with clipid - noplaylist',\n        'url': 'http://tvpot.daum.net/mypot/View.do?playlistid=6213966&clipid=73806844',\n        'info_dict': {\n            'id': '73806844',\n            'ext': 'mp4',\n            'title': '151017 Airport',\n            'upload_date': '20160117',\n        },\n        'params': {\n            'noplaylist': True,\n            'skip_download': True,\n        }\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if DaumUserIE.suitable(url) else super(DaumPlaylistIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        clip_result = self._check_clip(url, list_id)\n        if clip_result:\n            return clip_result\n\n        name, entries = self._get_entries(list_id, 'playlistid')\n\n        return self.playlist_result(entries, list_id, name)\n\n\nclass DaumUserIE(DaumListIE):\n    _VALID_URL = r'https?://(?:m\\.)?tvpot\\.daum\\.net/mypot/(?:View|Top)\\.(?:do|tv)\\?.*?ownerid=(?P<id>[0-9a-zA-Z]+)'\n    IE_NAME = 'daum.net:user'\n\n    _TESTS = [{\n        'url': 'http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0',\n        'info_dict': {\n            'id': 'o2scDLIVbHc0',\n            'title': '\ub9c8\uc774 \ub9ac\ud2c0 \ud154\ub808\ube44\uc804',\n        },\n        'playlist_mincount': 213\n    }, {\n        'url': 'http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0&clipid=73801156',\n        'info_dict': {\n            'id': '73801156',\n            'ext': 'mp4',\n            'title': '[\ubbf8\uacf5\uac1c] \uae40\uad6c\ub77c, \uc624\ub9cc\uc11d\uc774 \ubd80\ub985\ub2c8\ub2e4 \\'\uc624\ucf00\ud53c\\' - \ub9c8\uc774 \ub9ac\ud2c0 \ud154\ub808\ube44\uc804 20160116',\n            'upload_date': '20160117',\n            'description': 'md5:5e91d2d6747f53575badd24bd62b9f36'\n        },\n        'params': {\n            'noplaylist': True,\n            'skip_download': True,\n        }\n    }, {\n        'note': 'Playlist url has ownerid and playlistid, playlistid takes precedence',\n        'url': 'http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0&playlistid=6196631',\n        'info_dict': {\n            'id': '6196631',\n            'title': '\ub9c8\uc774 \ub9ac\ud2c0 \ud154\ub808\ube44\uc804 - 20160109',\n        },\n        'playlist_count': 11\n    }, {\n        'url': 'http://tvpot.daum.net/mypot/Top.do?ownerid=o2scDLIVbHc0',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.tvpot.daum.net/mypot/Top.tv?ownerid=45x1okb1If50&playlistid=3569733',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        clip_result = self._check_clip(url, list_id)\n        if clip_result:\n            return clip_result\n\n        query_dict = compat_parse_qs(compat_urlparse.urlparse(url).query)\n        if 'playlistid' in query_dict:\n            playlist_id = query_dict['playlistid'][0]\n            return self.url_result(DaumPlaylistIE._URL_TEMPLATE % playlist_id, 'DaumPlaylist')\n\n        name, entries = self._get_entries(list_id, 'ownerid')\n\n        return self.playlist_result(entries, list_id, name)\n", "comments": "# coding: utf-8\n#&]+)'\n# Requires dte_type=WEB (#9972)\n# For urls like http://m.tvpot.daum.net/v/65139429, where the video_id is really a clipid\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlencode,\n    compat_urlparse,\n)\nfrom ..utils import (\n    int_or_none,\n    str_to_int,\n    xpath_text,\n    unescapeHTML,\n)\n\n\nclass DaumIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:m\\.)?tvpot\\.daum\\.net/v/|videofarm\\.daum\\.net/controller/player/VodPlayer\\.swf\\?vid=)(?P<id>[^?#&]+)'\n    IE_NAME = 'daum.net'\n\n    _TESTS = [{\n        'url': 'http://tvpot.daum.net/v/vab4dyeDBysyBssyukBUjBz',\n        'info_dict': {\n            'id': 'vab4dyeDBysyBssyukBUjBz',\n            'ext': 'mp4',\n            'title': '\ub9c8\ud06c \ud5cc\ud2b8 vs \uc548\ud1a0\ub2c8\uc624 \uc2e4\ubc14',\n            'description': 'Mark Hunt vs Antonio Silva',\n            'upload_date': '20131217',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'duration': 2117,\n            'view_count': int,\n            'comment_count': int,\n        },\n    }, {\n        'url': 'http://m.tvpot.daum.net/v/65139429',\n        'info_dict': {\n            'id': '65139429',\n            'ext': 'mp4',\n            'title': '1297\ud68c, \\'\uc544\ube60 \uc544\ub4e4\ub85c \ud0dc\uc5b4\ub098\uae38 \uc798 \ud588\uc5b4\\' \ubbfc\uc218, \uac10\ub3d9\uc758 \ub208\ubb3c[\uc544\ube60 \uc5b4\ub514\uac00] 20150118',\n            'description': 'md5:79794514261164ff27e36a21ad229fc5',\n            'upload_date': '20150604',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'duration': 154,\n            'view_count': int,\n            'comment_count': int,\n        },\n    }, {\n        'url': 'http://tvpot.daum.net/v/07dXWRka62Y%24',\n        'only_matching': True,\n    }, {\n        'url': 'http://videofarm.daum.net/controller/player/VodPlayer.swf?vid=vwIpVpCQsT8%24&ref=',\n        'info_dict': {\n            'id': 'vwIpVpCQsT8$',\n            'ext': 'flv',\n            'title': '01-Korean War ( Trouble on the horizon )',\n            'description': '\\nKorean War 01\\nTrouble on the horizon\\n\uc804\uc7c1\uc758 \uba39\uad6c\ub984',\n            'upload_date': '20080223',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'duration': 249,\n            'view_count': int,\n            'comment_count': int,\n        },\n    }, {\n        # Requires dte_type=WEB (#9972)\n        'url': 'http://tvpot.daum.net/v/s3794Uf1NZeZ1qMpGpeqeRU',\n        'md5': 'a8917742069a4dd442516b86e7d66529',\n        'info_dict': {\n            'id': 's3794Uf1NZeZ1qMpGpeqeRU',\n            'ext': 'mp4',\n            'title': '\ub7ec\ube14\ub9ac\uc988 - Destiny (\ub098\uc758 \uc9c0\uad6c) (Lovelyz - Destiny) [\uc1fc! \uc74c\uc545\uc911\uc2ec] 508\ud68c 20160611',\n            'description': '\ub7ec\ube14\ub9ac\uc988 - Destiny (\ub098\uc758 \uc9c0\uad6c) (Lovelyz - Destiny)\\n\\n[\uc1fc! \uc74c\uc545\uc911\uc2ec] 20160611, 507\ud68c',\n            'upload_date': '20160611',\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = compat_urllib_parse_unquote(self._match_id(url))\n        movie_data = self._download_json(\n            'http://videofarm.daum.net/controller/api/closed/v1_2/IntegratedMovieData.json',\n            video_id, 'Downloading video formats info', query={'vid': video_id, 'dte_type': 'WEB'})\n\n        # For urls like http://m.tvpot.daum.net/v/65139429, where the video_id is really a clipid\n        if not movie_data.get('output_list', {}).get('output_list') and re.match(r'^\\d+$', video_id):\n            return self.url_result('http://tvpot.daum.net/clip/ClipView.do?clipid=%s' % video_id)\n\n        info = self._download_xml(\n            'http://tvpot.daum.net/clip/ClipInfoXml.do', video_id,\n            'Downloading video info', query={'vid': video_id})\n\n        formats = []\n        for format_el in movie_data['output_list']['output_list']:\n            profile = format_el['profile']\n            format_query = compat_urllib_parse_urlencode({\n                'vid': video_id,\n                'profile': profile,\n            })\n            url_doc = self._download_xml(\n                'http://videofarm.daum.net/controller/api/open/v1_2/MovieLocation.apixml?' + format_query,\n                video_id, note='Downloading video data for %s format' % profile)\n            format_url = url_doc.find('result/url').text\n            formats.append({\n                'url': format_url,\n                'format_id': profile,\n                'width': int_or_none(format_el.get('width')),\n                'height': int_or_none(format_el.get('height')),\n                'filesize': int_or_none(format_el.get('filesize')),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': info.find('TITLE').text,\n            'formats': formats,\n            'thumbnail': xpath_text(info, 'THUMB_URL'),\n            'description': xpath_text(info, 'CONTENTS'),\n            'duration': int_or_none(xpath_text(info, 'DURATION')),\n            'upload_date': info.find('REGDTTM').text[:8],\n            'view_count': str_to_int(xpath_text(info, 'PLAY_CNT')),\n            'comment_count': str_to_int(xpath_text(info, 'COMMENT_CNT')),\n        }\n\n\nclass DaumClipIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:m\\.)?tvpot\\.daum\\.net/(?:clip/ClipView.(?:do|tv)|mypot/View.do)\\?.*?clipid=(?P<id>\\d+)'\n    IE_NAME = 'daum.net:clip'\n    _URL_TEMPLATE = 'http://tvpot.daum.net/clip/ClipView.do?clipid=%s'\n\n    _TESTS = [{\n        'url': 'http://tvpot.daum.net/clip/ClipView.do?clipid=52554690',\n        'info_dict': {\n            'id': '52554690',\n            'ext': 'mp4',\n            'title': 'DOTA 2GETHER \uc2dc\uc98c2 6\ud68c - 2\ubd80',\n            'description': 'DOTA 2GETHER \uc2dc\uc98c2 6\ud68c - 2\ubd80',\n            'upload_date': '20130831',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)',\n            'duration': 3868,\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://m.tvpot.daum.net/clip/ClipView.tv?clipid=54999425',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if DaumPlaylistIE.suitable(url) or DaumUserIE.suitable(url) else super(DaumClipIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        clip_info = self._download_json(\n            'http://tvpot.daum.net/mypot/json/GetClipInfo.do?clipid=%s' % video_id,\n            video_id, 'Downloading clip info')['clip_bean']\n\n        return {\n            '_type': 'url_transparent',\n            'id': video_id,\n            'url': 'http://tvpot.daum.net/v/%s' % clip_info['vid'],\n            'title': unescapeHTML(clip_info['title']),\n            'thumbnail': clip_info.get('thumb_url'),\n            'description': clip_info.get('contents'),\n            'duration': int_or_none(clip_info.get('duration')),\n            'upload_date': clip_info.get('up_date')[:8],\n            'view_count': int_or_none(clip_info.get('play_count')),\n            'ie_key': 'Daum',\n        }\n\n\nclass DaumListIE(InfoExtractor):\n    def _get_entries(self, list_id, list_id_type):\n        name = None\n        entries = []\n        for pagenum in itertools.count(1):\n            list_info = self._download_json(\n                'http://tvpot.daum.net/mypot/json/GetClipInfo.do?size=48&init=true&order=date&page=%d&%s=%s' % (\n                    pagenum, list_id_type, list_id), list_id, 'Downloading list info - %s' % pagenum)\n\n            entries.extend([\n                self.url_result(\n                    'http://tvpot.daum.net/v/%s' % clip['vid'])\n                for clip in list_info['clip_list']\n            ])\n\n            if not name:\n                name = list_info.get('playlist_bean', {}).get('name') or \\\n                    list_info.get('potInfo', {}).get('name')\n\n            if not list_info.get('has_more'):\n                break\n\n        return name, entries\n\n    def _check_clip(self, url, list_id):\n        query_dict = compat_parse_qs(compat_urlparse.urlparse(url).query)\n        if 'clipid' in query_dict:\n            clip_id = query_dict['clipid'][0]\n            if self._downloader.params.get('noplaylist'):\n                self.to_screen('Downloading just video %s because of --no-playlist' % clip_id)\n                return self.url_result(DaumClipIE._URL_TEMPLATE % clip_id, 'DaumClip')\n            else:\n                self.to_screen('Downloading playlist %s - add --no-playlist to just download video' % list_id)\n\n\nclass DaumPlaylistIE(DaumListIE):\n    _VALID_URL = r'https?://(?:m\\.)?tvpot\\.daum\\.net/mypot/(?:View\\.do|Top\\.tv)\\?.*?playlistid=(?P<id>[0-9]+)'\n    IE_NAME = 'daum.net:playlist'\n    _URL_TEMPLATE = 'http://tvpot.daum.net/mypot/View.do?playlistid=%s'\n\n    _TESTS = [{\n        'note': 'Playlist url with clipid',\n        'url': 'http://tvpot.daum.net/mypot/View.do?playlistid=6213966&clipid=73806844',\n        'info_dict': {\n            'id': '6213966',\n            'title': 'Woorissica Official',\n        },\n        'playlist_mincount': 181\n    }, {\n        'note': 'Playlist url with clipid - noplaylist',\n        'url': 'http://tvpot.daum.net/mypot/View.do?playlistid=6213966&clipid=73806844',\n        'info_dict': {\n            'id': '73806844',\n            'ext': 'mp4',\n            'title': '151017 Airport',\n            'upload_date': '20160117',\n        },\n        'params': {\n            'noplaylist': True,\n            'skip_download': True,\n        }\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if DaumUserIE.suitable(url) else super(DaumPlaylistIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        clip_result = self._check_clip(url, list_id)\n        if clip_result:\n            return clip_result\n\n        name, entries = self._get_entries(list_id, 'playlistid')\n\n        return self.playlist_result(entries, list_id, name)\n\n\nclass DaumUserIE(DaumListIE):\n    _VALID_URL = r'https?://(?:m\\.)?tvpot\\.daum\\.net/mypot/(?:View|Top)\\.(?:do|tv)\\?.*?ownerid=(?P<id>[0-9a-zA-Z]+)'\n    IE_NAME = 'daum.net:user'\n\n    _TESTS = [{\n        'url': 'http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0',\n        'info_dict': {\n            'id': 'o2scDLIVbHc0',\n            'title': '\ub9c8\uc774 \ub9ac\ud2c0 \ud154\ub808\ube44\uc804',\n        },\n        'playlist_mincount': 213\n    }, {\n        'url': 'http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0&clipid=73801156',\n        'info_dict': {\n            'id': '73801156',\n            'ext': 'mp4',\n            'title': '[\ubbf8\uacf5\uac1c] \uae40\uad6c\ub77c, \uc624\ub9cc\uc11d\uc774 \ubd80\ub985\ub2c8\ub2e4 \\'\uc624\ucf00\ud53c\\' - \ub9c8\uc774 \ub9ac\ud2c0 \ud154\ub808\ube44\uc804 20160116',\n            'upload_date': '20160117',\n            'description': 'md5:5e91d2d6747f53575badd24bd62b9f36'\n        },\n        'params': {\n            'noplaylist': True,\n            'skip_download': True,\n        }\n    }, {\n        'note': 'Playlist url has ownerid and playlistid, playlistid takes precedence',\n        'url': 'http://tvpot.daum.net/mypot/View.do?ownerid=o2scDLIVbHc0&playlistid=6196631',\n        'info_dict': {\n            'id': '6196631',\n            'title': '\ub9c8\uc774 \ub9ac\ud2c0 \ud154\ub808\ube44\uc804 - 20160109',\n        },\n        'playlist_count': 11\n    }, {\n        'url': 'http://tvpot.daum.net/mypot/Top.do?ownerid=o2scDLIVbHc0',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.tvpot.daum.net/mypot/Top.tv?ownerid=45x1okb1If50&playlistid=3569733',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        clip_result = self._check_clip(url, list_id)\n        if clip_result:\n            return clip_result\n\n        query_dict = compat_parse_qs(compat_urlparse.urlparse(url).query)\n        if 'playlistid' in query_dict:\n            playlist_id = query_dict['playlistid'][0]\n            return self.url_result(DaumPlaylistIE._URL_TEMPLATE % playlist_id, 'DaumPlaylist')\n\n        name, entries = self._get_entries(list_id, 'ownerid')\n\n        return self.playlist_result(entries, list_id, name)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "daum.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/daum.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}