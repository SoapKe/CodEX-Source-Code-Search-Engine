{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    try_get,\n)\n\n\nclass NexxIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        \n        'url': 'https://api.nexx.cloud/v3/748/videos/byid/128907',\n        'md5': '828cea195be04e66057b846288295ba1',\n        'info_dict': {\n            'id': '128907',\n            'ext': 'mp4',\n            'title': 'Stiftung Warentest',\n            'alt_title': 'Wie ein Test abl\u00e4uft',\n            'description': 'md5:d1ddb1ef63de721132abd38639cc2fd2',\n            'release_year': 2013,\n            'creator': 'SPIEGEL TV',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 2509,\n            'timestamp': 1384264416,\n            'upload_date': '20131112',\n        },\n    }, {\n        \n        'url': 'https://api.nexx.cloud/v3/741/videos/byid/247858',\n        'info_dict': {\n            'id': '247858',\n            'ext': 'mp4',\n            'title': 'Return of the Golden Child (OV)',\n            'description': 'md5:5d969537509a92b733de21bae249dc63',\n            'release_year': 2017,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1397,\n            'timestamp': 1495033267,\n            'upload_date': '20170517',\n            'episode_number': 2,\n            'season_number': 2,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://api.nexxcdn.com/v3/748/videos/byid/128907',\n        'only_matching': True,\n    }, {\n        'url': 'nexx:748:128907',\n        'only_matching': True,\n    }, {\n        'url': 'nexx:128907',\n        'only_matching': True,\n    }, {\n        'url': 'https://arc.nexx.cloud/api/video/128907.json',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_domain_id(webpage):\n        mobj = re.search(\n            r'<script\\b[^>]+\\bsrc=[\"\\'](?:https?:)?//require\\.nexx(?:\\.cloud|cdn\\.com)/(?P<id>\\d+)',\n            webpage)\n        return mobj.group('id') if mobj else None\n\n    @staticmethod\n    def _extract_urls(webpage):\n        \n        \n\n        entries = []\n\n        \n        domain_id = NexxIE._extract_domain_id(webpage)\n        if domain_id:\n            for video_id in re.findall(\n                    r'(?is)onPLAYReady.+?_play\\.init\\s*\\(.+?\\s*,\\s*[\"\\']?(\\d+)',\n                    webpage):\n                entries.append(\n                    'https://api.nexx.cloud/v3/%s/videos/byid/%s'\n                    % (domain_id, video_id))\n\n        \n\n        return entries\n\n    @staticmethod\n    def _extract_url(webpage):\n        return NexxIE._extract_urls(webpage)[0]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://arc.nexx.cloud/api/video/%s.json' % video_id,\n            video_id)['result']\n\n        general = video['general']\n        title = general['title']\n\n        stream_data = video['streamdata']\n        language = general.get('language_raw') or ''\n\n        \n\n        cdn = stream_data['cdnType']\n        assert cdn == 'azure'\n\n        azure_locator = stream_data['azureLocator']\n\n        AZURE_URL = 'http://nx%s%02d.akamaized.net/'\n\n        def get_cdn_shield_base(shield_type='', prefix='-p'):\n            for secure in ('', 's'):\n                cdn_shield = stream_data.get('cdnShield%sHTTP%s' % (shield_type, secure.upper()))\n                if cdn_shield:\n                    return 'http%s://%s' % (secure, cdn_shield)\n            else:\n                return AZURE_URL % (prefix, int(stream_data['azureAccount'].replace('nexxplayplus', '')))\n\n        azure_stream_base = get_cdn_shield_base()\n        is_ml = ',' in language\n        azure_manifest_url = '%s%s/%s_src%s.ism/Manifest' % (\n            azure_stream_base, azure_locator, video_id, ('_manifest' if is_ml else '')) + '%s'\n\n        protection_token = try_get(\n            video, lambda x: x['protectiondata']['token'], compat_str)\n        if protection_token:\n            azure_manifest_url += '?hdnts=%s' % protection_token\n\n        formats = self._extract_m3u8_formats(\n            azure_manifest_url % '(format=m3u8-aapl)',\n            video_id, 'mp4', 'm3u8_native',\n            m3u8_id='%s-hls' % cdn, fatal=False)\n        formats.extend(self._extract_mpd_formats(\n            azure_manifest_url % '(format=mpd-time-csf)',\n            video_id, mpd_id='%s-dash' % cdn, fatal=False))\n        formats.extend(self._extract_ism_formats(\n            azure_manifest_url % '', video_id, ism_id='%s-mss' % cdn, fatal=False))\n\n        azure_progressive_base = get_cdn_shield_base('Prog', '-d')\n        azure_file_distribution = stream_data.get('azureFileDistribution')\n        if azure_file_distribution:\n            fds = azure_file_distribution.split(',')\n            if fds:\n                for fd in fds:\n                    ss = fd.split(':')\n                    if len(ss) == 2:\n                        tbr = int_or_none(ss[0])\n                        if tbr:\n                            f = {\n                                'url': '%s%s/%s_src_%s_%d.mp4' % (\n                                    azure_progressive_base, azure_locator, video_id, ss[1], tbr),\n                                'format_id': '%s-http-%d' % (cdn, tbr),\n                                'tbr': tbr,\n                            }\n                            width_height = ss[1].split('x')\n                            if len(width_height) == 2:\n                                f.update({\n                                    'width': int_or_none(width_height[0]),\n                                    'height': int_or_none(width_height[1]),\n                                })\n                            formats.append(f)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'alt_title': general.get('subtitle'),\n            'description': general.get('description'),\n            'release_year': int_or_none(general.get('year')),\n            'creator': general.get('studio') or general.get('studio_adref'),\n            'thumbnail': try_get(\n                video, lambda x: x['imagedata']['thumb'], compat_str),\n            'duration': parse_duration(general.get('runtime')),\n            'timestamp': int_or_none(general.get('uploaded')),\n            'episode_number': int_or_none(try_get(\n                video, lambda x: x['episodedata']['episode'])),\n            'season_number': int_or_none(try_get(\n                video, lambda x: x['episodedata']['season'])),\n            'formats': formats,\n        }\n\n\nclass NexxEmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://embed\\.nexx(?:\\.cloud|cdn\\.com)/\\d+/(?P<id>[^/?\n    _TEST = {\n        'url': 'http://embed.nexx.cloud/748/KC1614647Z27Y7T?autoplay=1',\n        'md5': '16746bfc28c42049492385c989b26c4a',\n        'info_dict': {\n            'id': '161464',\n            'ext': 'mp4',\n            'title': 'Nervenkitzel Achterbahn',\n            'alt_title': 'Karussellbauer in Deutschland',\n            'description': 'md5:ffe7b1cc59a01f585e0569949aef73cc',\n            'release_year': 2005,\n            'creator': 'SPIEGEL TV',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 2761,\n            'timestamp': 1394021479,\n            'upload_date': '20140305',\n        },\n        'params': {\n            'format': 'bestvideo',\n            'skip_download': True,\n        },\n    }\n\n    @staticmethod\n    def _extract_urls(webpage):\n        \n        \n\n        \n        return [mobj.group('url') for mobj in re.finditer(\n            r'<iframe[^>]+\\bsrc=([\"\\'])(?P<url>(?:https?:)?//embed\\.nexx(?:\\.cloud|cdn\\.com)/\\d+/(?:(?!\\1).)+)\\1',\n            webpage)]\n\n    def _real_extract(self, url):\n        embed_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, embed_id)\n\n        return self.url_result(NexxIE._extract_url(webpage), ie=NexxIE.ie_key())\n", "comments": "(?x)\n                        (?:\n                            https?://api\\.nexx(?:\\.cloud|cdn\\.com)/v3/\\d+/videos/byid/|\n                            nexx:(?:\\d+:)?|\n                            https?://arc\\.nexx\\.cloud/api/video/\n                        )\n                        (?P<id>\\d+)\n                    \n \n# coding: utf-8\n# movie\n# episode\n# Reference:\n# 1. https://nx-s.akamaized.net/files/201510/44.pdf\n# JavaScript Integration\n# TODO: support more embed formats\n# TODO: reverse more cdns\n#&]+)'\n# Reference:\n# 1. https://nx-s.akamaized.net/files/201510/44.pdf\n# iFrame Embed Integration\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    try_get,\n)\n\n\nclass NexxIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                        (?:\n                            https?://api\\.nexx(?:\\.cloud|cdn\\.com)/v3/\\d+/videos/byid/|\n                            nexx:(?:\\d+:)?|\n                            https?://arc\\.nexx\\.cloud/api/video/\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [{\n        # movie\n        'url': 'https://api.nexx.cloud/v3/748/videos/byid/128907',\n        'md5': '828cea195be04e66057b846288295ba1',\n        'info_dict': {\n            'id': '128907',\n            'ext': 'mp4',\n            'title': 'Stiftung Warentest',\n            'alt_title': 'Wie ein Test abl\u00e4uft',\n            'description': 'md5:d1ddb1ef63de721132abd38639cc2fd2',\n            'release_year': 2013,\n            'creator': 'SPIEGEL TV',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 2509,\n            'timestamp': 1384264416,\n            'upload_date': '20131112',\n        },\n    }, {\n        # episode\n        'url': 'https://api.nexx.cloud/v3/741/videos/byid/247858',\n        'info_dict': {\n            'id': '247858',\n            'ext': 'mp4',\n            'title': 'Return of the Golden Child (OV)',\n            'description': 'md5:5d969537509a92b733de21bae249dc63',\n            'release_year': 2017,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1397,\n            'timestamp': 1495033267,\n            'upload_date': '20170517',\n            'episode_number': 2,\n            'season_number': 2,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://api.nexxcdn.com/v3/748/videos/byid/128907',\n        'only_matching': True,\n    }, {\n        'url': 'nexx:748:128907',\n        'only_matching': True,\n    }, {\n        'url': 'nexx:128907',\n        'only_matching': True,\n    }, {\n        'url': 'https://arc.nexx.cloud/api/video/128907.json',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_domain_id(webpage):\n        mobj = re.search(\n            r'<script\\b[^>]+\\bsrc=[\"\\'](?:https?:)?//require\\.nexx(?:\\.cloud|cdn\\.com)/(?P<id>\\d+)',\n            webpage)\n        return mobj.group('id') if mobj else None\n\n    @staticmethod\n    def _extract_urls(webpage):\n        # Reference:\n        # 1. https://nx-s.akamaized.net/files/201510/44.pdf\n\n        entries = []\n\n        # JavaScript Integration\n        domain_id = NexxIE._extract_domain_id(webpage)\n        if domain_id:\n            for video_id in re.findall(\n                    r'(?is)onPLAYReady.+?_play\\.init\\s*\\(.+?\\s*,\\s*[\"\\']?(\\d+)',\n                    webpage):\n                entries.append(\n                    'https://api.nexx.cloud/v3/%s/videos/byid/%s'\n                    % (domain_id, video_id))\n\n        # TODO: support more embed formats\n\n        return entries\n\n    @staticmethod\n    def _extract_url(webpage):\n        return NexxIE._extract_urls(webpage)[0]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'https://arc.nexx.cloud/api/video/%s.json' % video_id,\n            video_id)['result']\n\n        general = video['general']\n        title = general['title']\n\n        stream_data = video['streamdata']\n        language = general.get('language_raw') or ''\n\n        # TODO: reverse more cdns\n\n        cdn = stream_data['cdnType']\n        assert cdn == 'azure'\n\n        azure_locator = stream_data['azureLocator']\n\n        AZURE_URL = 'http://nx%s%02d.akamaized.net/'\n\n        def get_cdn_shield_base(shield_type='', prefix='-p'):\n            for secure in ('', 's'):\n                cdn_shield = stream_data.get('cdnShield%sHTTP%s' % (shield_type, secure.upper()))\n                if cdn_shield:\n                    return 'http%s://%s' % (secure, cdn_shield)\n            else:\n                return AZURE_URL % (prefix, int(stream_data['azureAccount'].replace('nexxplayplus', '')))\n\n        azure_stream_base = get_cdn_shield_base()\n        is_ml = ',' in language\n        azure_manifest_url = '%s%s/%s_src%s.ism/Manifest' % (\n            azure_stream_base, azure_locator, video_id, ('_manifest' if is_ml else '')) + '%s'\n\n        protection_token = try_get(\n            video, lambda x: x['protectiondata']['token'], compat_str)\n        if protection_token:\n            azure_manifest_url += '?hdnts=%s' % protection_token\n\n        formats = self._extract_m3u8_formats(\n            azure_manifest_url % '(format=m3u8-aapl)',\n            video_id, 'mp4', 'm3u8_native',\n            m3u8_id='%s-hls' % cdn, fatal=False)\n        formats.extend(self._extract_mpd_formats(\n            azure_manifest_url % '(format=mpd-time-csf)',\n            video_id, mpd_id='%s-dash' % cdn, fatal=False))\n        formats.extend(self._extract_ism_formats(\n            azure_manifest_url % '', video_id, ism_id='%s-mss' % cdn, fatal=False))\n\n        azure_progressive_base = get_cdn_shield_base('Prog', '-d')\n        azure_file_distribution = stream_data.get('azureFileDistribution')\n        if azure_file_distribution:\n            fds = azure_file_distribution.split(',')\n            if fds:\n                for fd in fds:\n                    ss = fd.split(':')\n                    if len(ss) == 2:\n                        tbr = int_or_none(ss[0])\n                        if tbr:\n                            f = {\n                                'url': '%s%s/%s_src_%s_%d.mp4' % (\n                                    azure_progressive_base, azure_locator, video_id, ss[1], tbr),\n                                'format_id': '%s-http-%d' % (cdn, tbr),\n                                'tbr': tbr,\n                            }\n                            width_height = ss[1].split('x')\n                            if len(width_height) == 2:\n                                f.update({\n                                    'width': int_or_none(width_height[0]),\n                                    'height': int_or_none(width_height[1]),\n                                })\n                            formats.append(f)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'alt_title': general.get('subtitle'),\n            'description': general.get('description'),\n            'release_year': int_or_none(general.get('year')),\n            'creator': general.get('studio') or general.get('studio_adref'),\n            'thumbnail': try_get(\n                video, lambda x: x['imagedata']['thumb'], compat_str),\n            'duration': parse_duration(general.get('runtime')),\n            'timestamp': int_or_none(general.get('uploaded')),\n            'episode_number': int_or_none(try_get(\n                video, lambda x: x['episodedata']['episode'])),\n            'season_number': int_or_none(try_get(\n                video, lambda x: x['episodedata']['season'])),\n            'formats': formats,\n        }\n\n\nclass NexxEmbedIE(InfoExtractor):\n    _VALID_URL = r'https?://embed\\.nexx(?:\\.cloud|cdn\\.com)/\\d+/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'http://embed.nexx.cloud/748/KC1614647Z27Y7T?autoplay=1',\n        'md5': '16746bfc28c42049492385c989b26c4a',\n        'info_dict': {\n            'id': '161464',\n            'ext': 'mp4',\n            'title': 'Nervenkitzel Achterbahn',\n            'alt_title': 'Karussellbauer in Deutschland',\n            'description': 'md5:ffe7b1cc59a01f585e0569949aef73cc',\n            'release_year': 2005,\n            'creator': 'SPIEGEL TV',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 2761,\n            'timestamp': 1394021479,\n            'upload_date': '20140305',\n        },\n        'params': {\n            'format': 'bestvideo',\n            'skip_download': True,\n        },\n    }\n\n    @staticmethod\n    def _extract_urls(webpage):\n        # Reference:\n        # 1. https://nx-s.akamaized.net/files/201510/44.pdf\n\n        # iFrame Embed Integration\n        return [mobj.group('url') for mobj in re.finditer(\n            r'<iframe[^>]+\\bsrc=([\"\\'])(?P<url>(?:https?:)?//embed\\.nexx(?:\\.cloud|cdn\\.com)/\\d+/(?:(?!\\1).)+)\\1',\n            webpage)]\n\n    def _real_extract(self, url):\n        embed_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, embed_id)\n\n        return self.url_result(NexxIE._extract_url(webpage), ie=NexxIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nexx.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nexx.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}