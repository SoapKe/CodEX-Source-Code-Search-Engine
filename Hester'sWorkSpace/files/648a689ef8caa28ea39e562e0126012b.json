{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\nr\"\"\"Train Onsets and Frames piano transcription model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n\n internal imports\n\nimport tensorflow as tf\n\nfrom magenta.models.onsets_frames_transcription import model\nfrom magenta.models.onsets_frames_transcription import train_util\n\nFLAGS = tf.app.flags.FLAGS\n\ntf.app.flags.DEFINE_string(\n    'examples_path', None,\n    'Path to a TFRecord file of train/eval examples.')\ntf.app.flags.DEFINE_string(\n    'run_dir', '~/tmp/onsets_frames',\n    'Path where checkpoints and summary events will be located during '\n    'training and evaluation. Separate subdirectories `train` and `eval` '\n    'will be created within this directory.')\ntf.app.flags.DEFINE_string(\n    'eval_dir', None,\n    'Path where eval summaries will be written. If not specified, will be a '\n    'subdirectory of run_dir.')\ntf.app.flags.DEFINE_string(\n    'checkpoint_path', None,\n    'Path to the checkpoint to use in `test` mode. If not provided, latest '\n    'in `run_dir` will be used.')\ntf.app.flags.DEFINE_integer(\n    'num_steps', None,\n    'Number of training steps or `None` for infinite.')\ntf.app.flags.DEFINE_integer(\n    'eval_num_batches', None,\n    'Number of batches to use during evaluation or `None` for all batches '\n    'in the data source.')\ntf.app.flags.DEFINE_integer(\n    'checkpoints_to_keep', 0,\n    'Maximum number of checkpoints to keep in `train` mode or 0 for infinite.')\ntf.app.flags.DEFINE_string(\n    'mode', 'train', 'Which mode to use (train, eval, or test).')\ntf.app.flags.DEFINE_string(\n    'hparams', '',\n    'A comma-separated list of `name=value` hyperparameter values.')\ntf.app.flags.DEFINE_string(\n    'log', 'INFO',\n    'The threshold for what messages will be logged: '\n    'DEBUG, INFO, WARN, ERROR, or FATAL.')\n\n\ndef run(hparams, run_dir):\n  \"\"\"Run train/eval/test.\"\"\"\n  train_dir = os.path.join(run_dir, 'train')\n\n  if FLAGS.mode == 'eval':\n    eval_dir = os.path.join(run_dir, 'eval')\n    if FLAGS.eval_dir:\n      eval_dir = os.path.join(eval_dir, FLAGS.eval_dir)\n    train_util.evaluate(\n        train_dir=train_dir,\n        eval_dir=eval_dir,\n        examples_path=FLAGS.examples_path,\n        num_batches=FLAGS.eval_num_batches,\n        hparams=hparams)\n  elif FLAGS.mode == 'test':\n    checkpoint_path = (os.path.expanduser(FLAGS.checkpoint_path)\n                       if FLAGS.checkpoint_path else\n                       tf.train.latest_checkpoint(train_dir))\n    tf.logging.info('Testing with checkpoint: %s', checkpoint_path)\n    test_dir = os.path.join(run_dir, 'test')\n    train_util.test(\n        checkpoint_path=checkpoint_path,\n        test_dir=test_dir,\n        examples_path=FLAGS.examples_path,\n        num_batches=FLAGS.eval_num_batches,\n        hparams=hparams)\n  elif FLAGS.mode == 'train':\n    train_util.train(\n        train_dir=train_dir,\n        examples_path=FLAGS.examples_path,\n        hparams=hparams,\n        checkpoints_to_keep=FLAGS.checkpoints_to_keep,\n        num_steps=FLAGS.num_steps)\n  else:\n    raise ValueError('Invalid mode: {}'.format(FLAGS.mode))\n\n\ndef main(unused_argv):\n  tf.logging.set_verbosity(FLAGS.log)\n\n  run_dir = os.path.expanduser(FLAGS.run_dir)\n\n  hparams = model.get_default_hparams()\n\n   Command line flags override any of the preceding hyperparameter values.\n  hparams.parse(FLAGS.hparams)\n\n  run(hparams, run_dir)\n\n\ndef console_entry_point():\n  tf.app.run(main)\n\n\nif __name__ == '__main__':\n  console_entry_point()\n", "comments": "   train onsets frames piano transcription model        future   import absolute import   future   import division   future   import print function  import os    internal imports  import tensorflow tf  magenta models onsets frames transcription import model magenta models onsets frames transcription import train util  flags   tf app flags flags  tf app flags define string(      examples path   none       path tfrecord file train eval examples  ) tf app flags define string(      run dir      tmp onsets frames        path checkpoints summary events located        training evaluation  separate subdirectories  train   eval         created within directory  ) tf app flags define string(      eval dir   none       path eval summaries written  if specified         subdirectory run dir  ) tf app flags define string(      checkpoint path   none       path checkpoint use  test  mode  if provided  latest         run dir  used  ) tf app flags define integer(      num steps   none       number training steps  none  infinite  ) tf app flags define integer(      eval num batches   none       number batches use evaluation  none  batches        data source  ) tf app flags define integer(      checkpoints keep   0       maximum number checkpoints keep  train  mode 0 infinite  ) tf app flags define string(      mode    train    which mode use (train  eval  test)  ) tf app flags define string(      hparams            a comma separated list  name value  hyperparameter values  ) tf app flags define string(      log    info        the threshold messages logged         debug  info  warn  error  fatal  )   def run(hparams  run dir)       run train eval test        copyright 2017 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     internal imports    command line flags override preceding hyperparameter values  ", "content": "# Copyright 2017 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nr\"\"\"Train Onsets and Frames piano transcription model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n\n# internal imports\n\nimport tensorflow as tf\n\nfrom magenta.models.onsets_frames_transcription import model\nfrom magenta.models.onsets_frames_transcription import train_util\n\nFLAGS = tf.app.flags.FLAGS\n\ntf.app.flags.DEFINE_string(\n    'examples_path', None,\n    'Path to a TFRecord file of train/eval examples.')\ntf.app.flags.DEFINE_string(\n    'run_dir', '~/tmp/onsets_frames',\n    'Path where checkpoints and summary events will be located during '\n    'training and evaluation. Separate subdirectories `train` and `eval` '\n    'will be created within this directory.')\ntf.app.flags.DEFINE_string(\n    'eval_dir', None,\n    'Path where eval summaries will be written. If not specified, will be a '\n    'subdirectory of run_dir.')\ntf.app.flags.DEFINE_string(\n    'checkpoint_path', None,\n    'Path to the checkpoint to use in `test` mode. If not provided, latest '\n    'in `run_dir` will be used.')\ntf.app.flags.DEFINE_integer(\n    'num_steps', None,\n    'Number of training steps or `None` for infinite.')\ntf.app.flags.DEFINE_integer(\n    'eval_num_batches', None,\n    'Number of batches to use during evaluation or `None` for all batches '\n    'in the data source.')\ntf.app.flags.DEFINE_integer(\n    'checkpoints_to_keep', 0,\n    'Maximum number of checkpoints to keep in `train` mode or 0 for infinite.')\ntf.app.flags.DEFINE_string(\n    'mode', 'train', 'Which mode to use (train, eval, or test).')\ntf.app.flags.DEFINE_string(\n    'hparams', '',\n    'A comma-separated list of `name=value` hyperparameter values.')\ntf.app.flags.DEFINE_string(\n    'log', 'INFO',\n    'The threshold for what messages will be logged: '\n    'DEBUG, INFO, WARN, ERROR, or FATAL.')\n\n\ndef run(hparams, run_dir):\n  \"\"\"Run train/eval/test.\"\"\"\n  train_dir = os.path.join(run_dir, 'train')\n\n  if FLAGS.mode == 'eval':\n    eval_dir = os.path.join(run_dir, 'eval')\n    if FLAGS.eval_dir:\n      eval_dir = os.path.join(eval_dir, FLAGS.eval_dir)\n    train_util.evaluate(\n        train_dir=train_dir,\n        eval_dir=eval_dir,\n        examples_path=FLAGS.examples_path,\n        num_batches=FLAGS.eval_num_batches,\n        hparams=hparams)\n  elif FLAGS.mode == 'test':\n    checkpoint_path = (os.path.expanduser(FLAGS.checkpoint_path)\n                       if FLAGS.checkpoint_path else\n                       tf.train.latest_checkpoint(train_dir))\n    tf.logging.info('Testing with checkpoint: %s', checkpoint_path)\n    test_dir = os.path.join(run_dir, 'test')\n    train_util.test(\n        checkpoint_path=checkpoint_path,\n        test_dir=test_dir,\n        examples_path=FLAGS.examples_path,\n        num_batches=FLAGS.eval_num_batches,\n        hparams=hparams)\n  elif FLAGS.mode == 'train':\n    train_util.train(\n        train_dir=train_dir,\n        examples_path=FLAGS.examples_path,\n        hparams=hparams,\n        checkpoints_to_keep=FLAGS.checkpoints_to_keep,\n        num_steps=FLAGS.num_steps)\n  else:\n    raise ValueError('Invalid mode: {}'.format(FLAGS.mode))\n\n\ndef main(unused_argv):\n  tf.logging.set_verbosity(FLAGS.log)\n\n  run_dir = os.path.expanduser(FLAGS.run_dir)\n\n  hparams = model.get_default_hparams()\n\n  # Command line flags override any of the preceding hyperparameter values.\n  hparams.parse(FLAGS.hparams)\n\n  run(hparams, run_dir)\n\n\ndef console_entry_point():\n  tf.app.run(main)\n\n\nif __name__ == '__main__':\n  console_entry_point()\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "onsets_frames_transcription_train.py", "id": "648a689ef8caa28ea39e562e0126012b", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-magenta/tensorflow-magenta-ca73164/magenta/models/onsets_frames_transcription/onsets_frames_transcription_train.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:00:14Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}