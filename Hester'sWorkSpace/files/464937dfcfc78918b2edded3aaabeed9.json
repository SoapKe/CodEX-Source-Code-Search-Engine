{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    qualities,\n)\n\n\nclass IviIE(InfoExtractor):\n    IE_DESC = 'ivi.ru'\n    IE_NAME = 'ivi'\n    _VALID_URL = r'https?://(?:www\\.)?ivi\\.ru/(?:watch/(?:[^/]+/)?|video/player\\?.*?videoId=)(?P<id>\\d+)'\n    _GEO_BYPASS = False\n    _GEO_COUNTRIES = ['RU']\n\n    _TESTS = [\n        \n        {\n            'url': 'http://www.ivi.ru/watch/53141',\n            'md5': '6ff5be2254e796ed346251d117196cf4',\n            'info_dict': {\n                'id': '53141',\n                'ext': 'mp4',\n                'title': '\u0418\u0432\u0430\u043d \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432\u0438\u0447 \u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e',\n                'description': 'md5:b924063ea1677c8fe343d8a72ac2195f',\n                'duration': 5498,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'skip': 'Only works from Russia',\n        },\n        \n        {\n            'url': 'http://www.ivi.ru/watch/dvoe_iz_lartsa/9549',\n            'md5': '221f56b35e3ed815fde2df71032f4b3e',\n            'info_dict': {\n                'id': '9549',\n                'ext': 'mp4',\n                'title': '\u0414\u0432\u043e\u0435 \u0438\u0437 \u043b\u0430\u0440\u0446\u0430 - \u0414\u0435\u043b\u043e \u0413\u043e\u043b\u044c\u0434\u0431\u0435\u0440\u0433\u0430 (1 \u0447\u0430\u0441\u0442\u044c)',\n                'series': '\u0414\u0432\u043e\u0435 \u0438\u0437 \u043b\u0430\u0440\u0446\u0430',\n                'season': '\u0421\u0435\u0437\u043e\u043d 1',\n                'season_number': 1,\n                'episode': '\u0414\u0435\u043b\u043e \u0413\u043e\u043b\u044c\u0434\u0431\u0435\u0440\u0433\u0430 (1 \u0447\u0430\u0441\u0442\u044c)',\n                'episode_number': 1,\n                'duration': 2655,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'skip': 'Only works from Russia',\n        },\n        {\n            \n            'url': 'http://www.ivi.ru/watch/146500',\n            'md5': 'd63d35cdbfa1ea61a5eafec7cc523e1e',\n            'info_dict': {\n                'id': '146500',\n                'ext': 'mp4',\n                'title': '\u041a\u0443\u043a\u043b\u0430',\n                'description': 'md5:ffca9372399976a2d260a407cc74cce6',\n                'duration': 5599,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'skip': 'Only works from Russia',\n        }\n    ]\n\n    \n    _KNOWN_FORMATS = (\n        'MP4-low-mobile', 'MP4-mobile', 'FLV-lo', 'MP4-lo', 'FLV-hi', 'MP4-hi',\n        'MP4-SHQ', 'MP4-HD720', 'MP4-HD1080')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = {\n            'method': 'da.content.get',\n            'params': [\n                video_id, {\n                    'site': 's183',\n                    'referrer': 'http://www.ivi.ru/watch/%s' % video_id,\n                    'contentid': video_id\n                }\n            ]\n        }\n\n        video_json = self._download_json(\n            'http://api.digitalaccess.ru/api/json/', video_id,\n            'Downloading video JSON', data=json.dumps(data))\n\n        if 'error' in video_json:\n            error = video_json['error']\n            origin = error['origin']\n            if origin == 'NotAllowedForLocation':\n                self.raise_geo_restricted(\n                    msg=error['message'], countries=self._GEO_COUNTRIES)\n            elif origin == 'NoRedisValidData':\n                raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n            raise ExtractorError(\n                'Unable to download video %s: %s' % (video_id, error['message']),\n                expected=True)\n\n        result = video_json['result']\n\n        quality = qualities(self._KNOWN_FORMATS)\n\n        formats = [{\n            'url': x['url'],\n            'format_id': x.get('content_format'),\n            'quality': quality(x.get('content_format')),\n        } for x in result['files'] if x.get('url')]\n\n        self._sort_formats(formats)\n\n        title = result['title']\n\n        duration = int_or_none(result.get('duration'))\n        compilation = result.get('compilation')\n        episode = title if compilation else None\n\n        title = '%s - %s' % (compilation, title) if compilation is not None else title\n\n        thumbnails = [{\n            'url': preview['url'],\n            'id': preview.get('content_format'),\n        } for preview in result.get('preview', []) if preview.get('url')]\n\n        webpage = self._download_webpage(url, video_id)\n\n        season = self._search_regex(\n            r'<li[^>]+class=\"season active\"[^>]*><a[^>]+>([^<]+)',\n            webpage, 'season', default=None)\n        season_number = int_or_none(self._search_regex(\n            r'<li[^>]+class=\"season active\"[^>]*><a[^>]+data-season(?:-index)?=\"(\\d+)\"',\n            webpage, 'season number', default=None))\n\n        episode_number = int_or_none(self._search_regex(\n            r'[^>]+itemprop=\"episode\"[^>]*>\\s*<meta[^>]+itemprop=\"episodeNumber\"[^>]+content=\"(\\d+)',\n            webpage, 'episode number', default=None))\n\n        description = self._og_search_description(webpage, default=None) or self._html_search_meta(\n            'description', webpage, 'description', default=None)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'series': compilation,\n            'season': season,\n            'season_number': season_number,\n            'episode': episode,\n            'episode_number': episode_number,\n            'thumbnails': thumbnails,\n            'description': description,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass IviCompilationIE(InfoExtractor):\n    IE_DESC = 'ivi.ru compilations'\n    IE_NAME = 'ivi:compilation'\n    _VALID_URL = r'https?://(?:www\\.)?ivi\\.ru/watch/(?!\\d+)(?P<compilationid>[a-z\\d_-]+)(?:/season(?P<seasonid>\\d+))?$'\n    _TESTS = [{\n        'url': 'http://www.ivi.ru/watch/dvoe_iz_lartsa',\n        'info_dict': {\n            'id': 'dvoe_iz_lartsa',\n            'title': '\u0414\u0432\u043e\u0435 \u0438\u0437 \u043b\u0430\u0440\u0446\u0430 (2006 - 2008)',\n        },\n        'playlist_mincount': 24,\n    }, {\n        'url': 'http://www.ivi.ru/watch/dvoe_iz_lartsa/season1',\n        'info_dict': {\n            'id': 'dvoe_iz_lartsa/season1',\n            'title': '\u0414\u0432\u043e\u0435 \u0438\u0437 \u043b\u0430\u0440\u0446\u0430 (2006 - 2008) 1 \u0441\u0435\u0437\u043e\u043d',\n        },\n        'playlist_mincount': 12,\n    }]\n\n    def _extract_entries(self, html, compilation_id):\n        return [\n            self.url_result(\n                'http://www.ivi.ru/watch/%s/%s' % (compilation_id, serie), IviIE.ie_key())\n            for serie in re.findall(\n                r'<a href=\"/watch/%s/(\\d+)\"[^>]+data-id=\"\\1\"' % compilation_id, html)]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        compilation_id = mobj.group('compilationid')\n        season_id = mobj.group('seasonid')\n\n        if season_id is not None:  \n            season_page = self._download_webpage(\n                url, compilation_id, 'Downloading season %s web page' % season_id)\n            playlist_id = '%s/season%s' % (compilation_id, season_id)\n            playlist_title = self._html_search_meta('title', season_page, 'title')\n            entries = self._extract_entries(season_page, compilation_id)\n        else:  \n            compilation_page = self._download_webpage(url, compilation_id, 'Downloading compilation web page')\n            playlist_id = compilation_id\n            playlist_title = self._html_search_meta('title', compilation_page, 'title')\n            seasons = re.findall(\n                r'<a href=\"/watch/%s/season(\\d+)' % compilation_id, compilation_page)\n            if not seasons:  \n                entries = self._extract_entries(compilation_page, compilation_id)\n            else:\n                entries = []\n                for season_id in seasons:\n                    season_page = self._download_webpage(\n                        'http://www.ivi.ru/watch/%s/season%s' % (compilation_id, season_id),\n                        compilation_id, 'Downloading season %s web page' % season_id)\n                    entries.extend(self._extract_entries(season_page, compilation_id))\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "comments": "# coding: utf-8\n# Single movie\n# Serial's series\n# with MP4-HD720 format\n# Sorted by quality\n# Season link\n# Compilation link\n# No seasons in this compilation\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    qualities,\n)\n\n\nclass IviIE(InfoExtractor):\n    IE_DESC = 'ivi.ru'\n    IE_NAME = 'ivi'\n    _VALID_URL = r'https?://(?:www\\.)?ivi\\.ru/(?:watch/(?:[^/]+/)?|video/player\\?.*?videoId=)(?P<id>\\d+)'\n    _GEO_BYPASS = False\n    _GEO_COUNTRIES = ['RU']\n\n    _TESTS = [\n        # Single movie\n        {\n            'url': 'http://www.ivi.ru/watch/53141',\n            'md5': '6ff5be2254e796ed346251d117196cf4',\n            'info_dict': {\n                'id': '53141',\n                'ext': 'mp4',\n                'title': '\u0418\u0432\u0430\u043d \u0412\u0430\u0441\u0438\u043b\u044c\u0435\u0432\u0438\u0447 \u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044e',\n                'description': 'md5:b924063ea1677c8fe343d8a72ac2195f',\n                'duration': 5498,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'skip': 'Only works from Russia',\n        },\n        # Serial's series\n        {\n            'url': 'http://www.ivi.ru/watch/dvoe_iz_lartsa/9549',\n            'md5': '221f56b35e3ed815fde2df71032f4b3e',\n            'info_dict': {\n                'id': '9549',\n                'ext': 'mp4',\n                'title': '\u0414\u0432\u043e\u0435 \u0438\u0437 \u043b\u0430\u0440\u0446\u0430 - \u0414\u0435\u043b\u043e \u0413\u043e\u043b\u044c\u0434\u0431\u0435\u0440\u0433\u0430 (1 \u0447\u0430\u0441\u0442\u044c)',\n                'series': '\u0414\u0432\u043e\u0435 \u0438\u0437 \u043b\u0430\u0440\u0446\u0430',\n                'season': '\u0421\u0435\u0437\u043e\u043d 1',\n                'season_number': 1,\n                'episode': '\u0414\u0435\u043b\u043e \u0413\u043e\u043b\u044c\u0434\u0431\u0435\u0440\u0433\u0430 (1 \u0447\u0430\u0441\u0442\u044c)',\n                'episode_number': 1,\n                'duration': 2655,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'skip': 'Only works from Russia',\n        },\n        {\n            # with MP4-HD720 format\n            'url': 'http://www.ivi.ru/watch/146500',\n            'md5': 'd63d35cdbfa1ea61a5eafec7cc523e1e',\n            'info_dict': {\n                'id': '146500',\n                'ext': 'mp4',\n                'title': '\u041a\u0443\u043a\u043b\u0430',\n                'description': 'md5:ffca9372399976a2d260a407cc74cce6',\n                'duration': 5599,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'skip': 'Only works from Russia',\n        }\n    ]\n\n    # Sorted by quality\n    _KNOWN_FORMATS = (\n        'MP4-low-mobile', 'MP4-mobile', 'FLV-lo', 'MP4-lo', 'FLV-hi', 'MP4-hi',\n        'MP4-SHQ', 'MP4-HD720', 'MP4-HD1080')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = {\n            'method': 'da.content.get',\n            'params': [\n                video_id, {\n                    'site': 's183',\n                    'referrer': 'http://www.ivi.ru/watch/%s' % video_id,\n                    'contentid': video_id\n                }\n            ]\n        }\n\n        video_json = self._download_json(\n            'http://api.digitalaccess.ru/api/json/', video_id,\n            'Downloading video JSON', data=json.dumps(data))\n\n        if 'error' in video_json:\n            error = video_json['error']\n            origin = error['origin']\n            if origin == 'NotAllowedForLocation':\n                self.raise_geo_restricted(\n                    msg=error['message'], countries=self._GEO_COUNTRIES)\n            elif origin == 'NoRedisValidData':\n                raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n            raise ExtractorError(\n                'Unable to download video %s: %s' % (video_id, error['message']),\n                expected=True)\n\n        result = video_json['result']\n\n        quality = qualities(self._KNOWN_FORMATS)\n\n        formats = [{\n            'url': x['url'],\n            'format_id': x.get('content_format'),\n            'quality': quality(x.get('content_format')),\n        } for x in result['files'] if x.get('url')]\n\n        self._sort_formats(formats)\n\n        title = result['title']\n\n        duration = int_or_none(result.get('duration'))\n        compilation = result.get('compilation')\n        episode = title if compilation else None\n\n        title = '%s - %s' % (compilation, title) if compilation is not None else title\n\n        thumbnails = [{\n            'url': preview['url'],\n            'id': preview.get('content_format'),\n        } for preview in result.get('preview', []) if preview.get('url')]\n\n        webpage = self._download_webpage(url, video_id)\n\n        season = self._search_regex(\n            r'<li[^>]+class=\"season active\"[^>]*><a[^>]+>([^<]+)',\n            webpage, 'season', default=None)\n        season_number = int_or_none(self._search_regex(\n            r'<li[^>]+class=\"season active\"[^>]*><a[^>]+data-season(?:-index)?=\"(\\d+)\"',\n            webpage, 'season number', default=None))\n\n        episode_number = int_or_none(self._search_regex(\n            r'[^>]+itemprop=\"episode\"[^>]*>\\s*<meta[^>]+itemprop=\"episodeNumber\"[^>]+content=\"(\\d+)',\n            webpage, 'episode number', default=None))\n\n        description = self._og_search_description(webpage, default=None) or self._html_search_meta(\n            'description', webpage, 'description', default=None)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'series': compilation,\n            'season': season,\n            'season_number': season_number,\n            'episode': episode,\n            'episode_number': episode_number,\n            'thumbnails': thumbnails,\n            'description': description,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass IviCompilationIE(InfoExtractor):\n    IE_DESC = 'ivi.ru compilations'\n    IE_NAME = 'ivi:compilation'\n    _VALID_URL = r'https?://(?:www\\.)?ivi\\.ru/watch/(?!\\d+)(?P<compilationid>[a-z\\d_-]+)(?:/season(?P<seasonid>\\d+))?$'\n    _TESTS = [{\n        'url': 'http://www.ivi.ru/watch/dvoe_iz_lartsa',\n        'info_dict': {\n            'id': 'dvoe_iz_lartsa',\n            'title': '\u0414\u0432\u043e\u0435 \u0438\u0437 \u043b\u0430\u0440\u0446\u0430 (2006 - 2008)',\n        },\n        'playlist_mincount': 24,\n    }, {\n        'url': 'http://www.ivi.ru/watch/dvoe_iz_lartsa/season1',\n        'info_dict': {\n            'id': 'dvoe_iz_lartsa/season1',\n            'title': '\u0414\u0432\u043e\u0435 \u0438\u0437 \u043b\u0430\u0440\u0446\u0430 (2006 - 2008) 1 \u0441\u0435\u0437\u043e\u043d',\n        },\n        'playlist_mincount': 12,\n    }]\n\n    def _extract_entries(self, html, compilation_id):\n        return [\n            self.url_result(\n                'http://www.ivi.ru/watch/%s/%s' % (compilation_id, serie), IviIE.ie_key())\n            for serie in re.findall(\n                r'<a href=\"/watch/%s/(\\d+)\"[^>]+data-id=\"\\1\"' % compilation_id, html)]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        compilation_id = mobj.group('compilationid')\n        season_id = mobj.group('seasonid')\n\n        if season_id is not None:  # Season link\n            season_page = self._download_webpage(\n                url, compilation_id, 'Downloading season %s web page' % season_id)\n            playlist_id = '%s/season%s' % (compilation_id, season_id)\n            playlist_title = self._html_search_meta('title', season_page, 'title')\n            entries = self._extract_entries(season_page, compilation_id)\n        else:  # Compilation link\n            compilation_page = self._download_webpage(url, compilation_id, 'Downloading compilation web page')\n            playlist_id = compilation_id\n            playlist_title = self._html_search_meta('title', compilation_page, 'title')\n            seasons = re.findall(\n                r'<a href=\"/watch/%s/season(\\d+)' % compilation_id, compilation_page)\n            if not seasons:  # No seasons in this compilation\n                entries = self._extract_entries(compilation_page, compilation_id)\n            else:\n                entries = []\n                for season_id in seasons:\n                    season_page = self._download_webpage(\n                        'http://www.ivi.ru/watch/%s/season%s' % (compilation_id, season_id),\n                        compilation_id, 'Downloading season %s web page' % season_id)\n                    entries.extend(self._extract_entries(season_page, compilation_id))\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ivi.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ivi.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}