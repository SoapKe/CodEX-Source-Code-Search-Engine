{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport codecs\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    multipart_encode,\n    parse_duration,\n    random_birthday,\n    urljoin,\n)\n\n\nclass CDAIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?cda\\.pl/video|ebd\\.cda\\.pl/[0-9]+x[0-9]+)/(?P<id>[0-9a-z]+)'\n    _BASE_URL = 'http://www.cda.pl/'\n    _TESTS = [{\n        'url': 'http://www.cda.pl/video/5749950c',\n        'md5': '6f844bf51b15f31fae165365707ae970',\n        'info_dict': {\n            'id': '5749950c',\n            'ext': 'mp4',\n            'height': 720,\n            'title': 'Oto dlaczego przed zakr\u0119tem nale\u017cy zwolni\u0107.',\n            'description': 'md5:269ccd135d550da90d1662651fcb9772',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'average_rating': float,\n            'duration': 39,\n            'age_limit': 0,\n        }\n    }, {\n        'url': 'http://www.cda.pl/video/57413289',\n        'md5': 'a88828770a8310fc00be6c95faf7f4d5',\n        'info_dict': {\n            'id': '57413289',\n            'ext': 'mp4',\n            'title': 'L\u0105dowanie na lotnisku na Maderze',\n            'description': 'md5:60d76b71186dcce4e0ba6d4bbdb13e1a',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'crash404',\n            'view_count': int,\n            'average_rating': float,\n            'duration': 137,\n            'age_limit': 0,\n        }\n    }, {\n        \n        'url': 'http://www.cda.pl/video/1273454c4',\n        'info_dict': {\n            'id': '1273454c4',\n            'ext': 'mp4',\n            'title': 'Bronson (2008) napisy HD 1080p',\n            'description': 'md5:1b6cb18508daf2dc4e0fa4db77fec24c',\n            'height': 1080,\n            'uploader': 'boniek61',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 5554,\n            'age_limit': 18,\n            'view_count': int,\n            'average_rating': float,\n        },\n    }, {\n        'url': 'http://ebd.cda.pl/0x0/5749950c',\n        'only_matching': True,\n    }]\n\n    def _download_age_confirm_page(self, url, video_id, *args, **kwargs):\n        form_data = random_birthday('rok', 'miesiac', 'dzien')\n        form_data.update({'return': url, 'module': 'video', 'module_id': video_id})\n        data, content_type = multipart_encode(form_data)\n        return self._download_webpage(\n            urljoin(url, '/a/validatebirth'), video_id, *args,\n            data=data, headers={\n                'Referer': url,\n                'Content-Type': content_type,\n            }, **kwargs)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        self._set_cookie('cda.pl', 'cda.player', 'html5')\n        webpage = self._download_webpage(\n            self._BASE_URL + '/video/' + video_id, video_id)\n\n        if 'Ten film jest dost\u0119pny dla u\u017cytkownik\u00f3w premium' in webpage:\n            raise ExtractorError('This video is only available for premium users.', expected=True)\n\n        need_confirm_age = False\n        if self._html_search_regex(r'(<form[^>]+action=\"/a/validatebirth\")',\n                                   webpage, 'birthday validate form', default=None):\n            webpage = self._download_age_confirm_page(\n                url, video_id, note='Confirming age')\n            need_confirm_age = True\n\n        formats = []\n\n        uploader = self._search_regex(r, webpage, 'uploader', default=None, group='uploader')\n        view_count = self._search_regex(\n            r'Ods\u0142ony:(?:\\s|&nbsp;)*([0-9]+)', webpage,\n            'view_count', default=None)\n        average_rating = self._search_regex(\n            r'<(?:span|meta)[^>]+itemprop=([\"\\'])ratingValue\\1[^>]*>(?P<rating_value>[0-9.]+)',\n            webpage, 'rating', fatal=False, group='rating_value')\n\n        info_dict = {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'description': self._og_search_description(webpage),\n            'uploader': uploader,\n            'view_count': int_or_none(view_count),\n            'average_rating': float_or_none(average_rating),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n            'duration': None,\n            'age_limit': 18 if need_confirm_age else 0,\n        }\n\n        def extract_format(page, version):\n            json_str = self._html_search_regex(\n                r'player_data=(\\\\?[\"\\'])(?P<player_data>.+?)\\1', page,\n                '%s player_json' % version, fatal=False, group='player_data')\n            if not json_str:\n                return\n            player_data = self._parse_json(\n                json_str, '%s player_data' % version, fatal=False)\n            if not player_data:\n                return\n            video = player_data.get('video')\n            if not video or 'file' not in video:\n                self.report_warning('Unable to extract %s version information' % version)\n                return\n            if video['file'].startswith('uggc'):\n                video['file'] = codecs.decode(video['file'], 'rot_13')\n                if video['file'].endswith('adc.mp4'):\n                    video['file'] = video['file'].replace('adc.mp4', '.mp4')\n            f = {\n                'url': video['file'],\n            }\n            m = re.search(\n                r'<a[^>]+data-quality=\"(?P<format_id>[^\"]+)\"[^>]+href=\"[^\"]+\"[^>]+class=\"[^\"]*quality-btn-active[^\"]*\">(?P<height>[0-9]+)p',\n                page)\n            if m:\n                f.update({\n                    'format_id': m.group('format_id'),\n                    'height': int(m.group('height')),\n                })\n            info_dict['formats'].append(f)\n            if not info_dict['duration']:\n                info_dict['duration'] = parse_duration(video.get('duration'))\n\n        extract_format(webpage, 'default')\n\n        for href, resolution in re.findall(\n                r'<a[^>]+data-quality=\"[^\"]+\"[^>]+href=\"([^\"]+)\"[^>]+class=\"quality-btn\"[^>]*>([0-9]+p)',\n                webpage):\n            if need_confirm_age:\n                handler = self._download_age_confirm_page\n            else:\n                handler = self._download_webpage\n\n            webpage = handler(\n                self._BASE_URL + href, video_id,\n                'Downloading %s version information' % resolution, fatal=False)\n            if not webpage:\n                \n                \n                self.report_warning('Unable to download %s version information' % resolution)\n                continue\n\n            extract_format(webpage, resolution)\n\n        self._sort_formats(formats)\n\n        return info_dict\n", "comments": "(?x)\n            <(span|meta)[^>]+itemprop=([\"\\'])author\\2[^>]*>\n            (?:<\\1[^>]*>[^<]*</\\1>|(?!</\\1>)(?:.|\\n))*?\n            <(span|meta)[^>]+itemprop=([\"\\'])name\\4[^>]*>(?P<uploader>[^<]+)</\\3>\n        \n \n# coding: utf-8\n# Age-restricted\n# Manually report warning because empty page is returned when\n# invalid version is requested.\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport codecs\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    multipart_encode,\n    parse_duration,\n    random_birthday,\n    urljoin,\n)\n\n\nclass CDAIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?cda\\.pl/video|ebd\\.cda\\.pl/[0-9]+x[0-9]+)/(?P<id>[0-9a-z]+)'\n    _BASE_URL = 'http://www.cda.pl/'\n    _TESTS = [{\n        'url': 'http://www.cda.pl/video/5749950c',\n        'md5': '6f844bf51b15f31fae165365707ae970',\n        'info_dict': {\n            'id': '5749950c',\n            'ext': 'mp4',\n            'height': 720,\n            'title': 'Oto dlaczego przed zakr\u0119tem nale\u017cy zwolni\u0107.',\n            'description': 'md5:269ccd135d550da90d1662651fcb9772',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'average_rating': float,\n            'duration': 39,\n            'age_limit': 0,\n        }\n    }, {\n        'url': 'http://www.cda.pl/video/57413289',\n        'md5': 'a88828770a8310fc00be6c95faf7f4d5',\n        'info_dict': {\n            'id': '57413289',\n            'ext': 'mp4',\n            'title': 'L\u0105dowanie na lotnisku na Maderze',\n            'description': 'md5:60d76b71186dcce4e0ba6d4bbdb13e1a',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'crash404',\n            'view_count': int,\n            'average_rating': float,\n            'duration': 137,\n            'age_limit': 0,\n        }\n    }, {\n        # Age-restricted\n        'url': 'http://www.cda.pl/video/1273454c4',\n        'info_dict': {\n            'id': '1273454c4',\n            'ext': 'mp4',\n            'title': 'Bronson (2008) napisy HD 1080p',\n            'description': 'md5:1b6cb18508daf2dc4e0fa4db77fec24c',\n            'height': 1080,\n            'uploader': 'boniek61',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 5554,\n            'age_limit': 18,\n            'view_count': int,\n            'average_rating': float,\n        },\n    }, {\n        'url': 'http://ebd.cda.pl/0x0/5749950c',\n        'only_matching': True,\n    }]\n\n    def _download_age_confirm_page(self, url, video_id, *args, **kwargs):\n        form_data = random_birthday('rok', 'miesiac', 'dzien')\n        form_data.update({'return': url, 'module': 'video', 'module_id': video_id})\n        data, content_type = multipart_encode(form_data)\n        return self._download_webpage(\n            urljoin(url, '/a/validatebirth'), video_id, *args,\n            data=data, headers={\n                'Referer': url,\n                'Content-Type': content_type,\n            }, **kwargs)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        self._set_cookie('cda.pl', 'cda.player', 'html5')\n        webpage = self._download_webpage(\n            self._BASE_URL + '/video/' + video_id, video_id)\n\n        if 'Ten film jest dost\u0119pny dla u\u017cytkownik\u00f3w premium' in webpage:\n            raise ExtractorError('This video is only available for premium users.', expected=True)\n\n        need_confirm_age = False\n        if self._html_search_regex(r'(<form[^>]+action=\"/a/validatebirth\")',\n                                   webpage, 'birthday validate form', default=None):\n            webpage = self._download_age_confirm_page(\n                url, video_id, note='Confirming age')\n            need_confirm_age = True\n\n        formats = []\n\n        uploader = self._search_regex(r'''(?x)\n            <(span|meta)[^>]+itemprop=([\"\\'])author\\2[^>]*>\n            (?:<\\1[^>]*>[^<]*</\\1>|(?!</\\1>)(?:.|\\n))*?\n            <(span|meta)[^>]+itemprop=([\"\\'])name\\4[^>]*>(?P<uploader>[^<]+)</\\3>\n        ''', webpage, 'uploader', default=None, group='uploader')\n        view_count = self._search_regex(\n            r'Ods\u0142ony:(?:\\s|&nbsp;)*([0-9]+)', webpage,\n            'view_count', default=None)\n        average_rating = self._search_regex(\n            r'<(?:span|meta)[^>]+itemprop=([\"\\'])ratingValue\\1[^>]*>(?P<rating_value>[0-9.]+)',\n            webpage, 'rating', fatal=False, group='rating_value')\n\n        info_dict = {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'description': self._og_search_description(webpage),\n            'uploader': uploader,\n            'view_count': int_or_none(view_count),\n            'average_rating': float_or_none(average_rating),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n            'duration': None,\n            'age_limit': 18 if need_confirm_age else 0,\n        }\n\n        def extract_format(page, version):\n            json_str = self._html_search_regex(\n                r'player_data=(\\\\?[\"\\'])(?P<player_data>.+?)\\1', page,\n                '%s player_json' % version, fatal=False, group='player_data')\n            if not json_str:\n                return\n            player_data = self._parse_json(\n                json_str, '%s player_data' % version, fatal=False)\n            if not player_data:\n                return\n            video = player_data.get('video')\n            if not video or 'file' not in video:\n                self.report_warning('Unable to extract %s version information' % version)\n                return\n            if video['file'].startswith('uggc'):\n                video['file'] = codecs.decode(video['file'], 'rot_13')\n                if video['file'].endswith('adc.mp4'):\n                    video['file'] = video['file'].replace('adc.mp4', '.mp4')\n            f = {\n                'url': video['file'],\n            }\n            m = re.search(\n                r'<a[^>]+data-quality=\"(?P<format_id>[^\"]+)\"[^>]+href=\"[^\"]+\"[^>]+class=\"[^\"]*quality-btn-active[^\"]*\">(?P<height>[0-9]+)p',\n                page)\n            if m:\n                f.update({\n                    'format_id': m.group('format_id'),\n                    'height': int(m.group('height')),\n                })\n            info_dict['formats'].append(f)\n            if not info_dict['duration']:\n                info_dict['duration'] = parse_duration(video.get('duration'))\n\n        extract_format(webpage, 'default')\n\n        for href, resolution in re.findall(\n                r'<a[^>]+data-quality=\"[^\"]+\"[^>]+href=\"([^\"]+)\"[^>]+class=\"quality-btn\"[^>]*>([0-9]+p)',\n                webpage):\n            if need_confirm_age:\n                handler = self._download_age_confirm_page\n            else:\n                handler = self._download_webpage\n\n            webpage = handler(\n                self._BASE_URL + href, video_id,\n                'Downloading %s version information' % resolution, fatal=False)\n            if not webpage:\n                # Manually report warning because empty page is returned when\n                # invalid version is requested.\n                self.report_warning('Unable to download %s version information' % resolution)\n                continue\n\n            extract_format(webpage, resolution)\n\n        self._sort_formats(formats)\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cda.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cda.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}