{"author": "odoo", "code": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nclass TestBankStatementReconciliation(AccountingTestCase):\n\n    def setUp(self):\n        super(TestBankStatementReconciliation, self).setUp()\n        self.i_model = self.env['account.invoice']\n        self.il_model = self.env['account.invoice.line']\n        self.bs_model = self.env['account.bank.statement']\n        self.bsl_model = self.env['account.bank.statement.line']\n        self.partner_agrolait = self.env.ref(\"base.res_partner_2\")\n\n    def test_reconciliation_proposition(self):\n        rcv_mv_line = self.create_invoice(100)\n        st_line = self.create_statement_line(100)\n\n        \n        rec_prop = st_line.get_reconciliation_proposition()\n        self.assertEqual(len(rec_prop), 1)\n        self.assertEqual(rec_prop[0].id, rcv_mv_line.id)\n\n    def test_full_reconcile(self):\n        rcv_mv_line = self.create_invoice(100)\n        st_line = self.create_statement_line(100)\n        \n        st_line.process_reconciliation(counterpart_aml_dicts=[{\n            'move_line': rcv_mv_line,\n            'credit': 100,\n            'debit': 0,\n            'name': rcv_mv_line.name,\n        }])\n\n        \n        self.assertTrue(st_line.journal_entry_ids)\n        counterpart_mv_line = None\n        for l in st_line.journal_entry_ids:\n            if l.account_id.user_type_id.type == 'receivable':\n                counterpart_mv_line = l\n                break\n        self.assertIsNotNone(counterpart_mv_line)\n        self.assertTrue(rcv_mv_line.reconciled)\n        self.assertTrue(counterpart_mv_line.reconciled)\n        self.assertEqual(counterpart_mv_line.matched_credit_ids, rcv_mv_line.matched_debit_ids)\n\n    def test_reconcile_with_write_off(self):\n        pass\n\n    def create_invoice(self, amount):\n        \"\"\" Return the move line that gets to be reconciled (the one in the receivable account) \"\"\"\n        vals = {'partner_id': self.partner_agrolait.id,\n                'type': 'out_invoice',\n                'name': '-',\n                'currency_id': self.env.user.company_id.currency_id.id,\n                }\n        \n        invoice = self.i_model.new(vals)\n        invoice._onchange_partner_id()\n        vals.update({'account_id': invoice.account_id.id})\n        invoice = self.i_model.create(vals)\n\n        self.il_model.create({\n            'quantity': 1,\n            'price_unit': amount,\n            'invoice_id': invoice.id,\n            'name': '.',\n            'account_id': self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1).id,\n        })\n        invoice.action_invoice_open()\n\n        mv_line = None\n        for l in invoice.move_id.line_ids:\n            if l.account_id.id == vals['account_id']:\n                mv_line = l\n        self.assertIsNotNone(mv_line)\n\n        return mv_line\n\n    def create_statement_line(self, st_line_amount):\n        journal = self.bs_model.with_context(journal_type='bank')._default_journal()\n        #journal = self.env.ref('l10n_be.bank_journal')\n        bank_stmt = self.bs_model.create({'journal_id': journal.id})\n\n        bank_stmt_line = self.bsl_model.create({\n            'name': '_',\n            'statement_id': bank_stmt.id,\n            'partner_id': self.partner_agrolait.id,\n            'amount': st_line_amount,\n            })\n\n        return bank_stmt_line\n", "comments": "    return move line gets reconciled (the one receivable account)        exact amount match    reconcile    check everything went expected    new creates temporary record apply change afterwards   journal   self env ref( l10n bank journal ) ", "content": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nclass TestBankStatementReconciliation(AccountingTestCase):\n\n    def setUp(self):\n        super(TestBankStatementReconciliation, self).setUp()\n        self.i_model = self.env['account.invoice']\n        self.il_model = self.env['account.invoice.line']\n        self.bs_model = self.env['account.bank.statement']\n        self.bsl_model = self.env['account.bank.statement.line']\n        self.partner_agrolait = self.env.ref(\"base.res_partner_2\")\n\n    def test_reconciliation_proposition(self):\n        rcv_mv_line = self.create_invoice(100)\n        st_line = self.create_statement_line(100)\n\n        # exact amount match\n        rec_prop = st_line.get_reconciliation_proposition()\n        self.assertEqual(len(rec_prop), 1)\n        self.assertEqual(rec_prop[0].id, rcv_mv_line.id)\n\n    def test_full_reconcile(self):\n        rcv_mv_line = self.create_invoice(100)\n        st_line = self.create_statement_line(100)\n        # reconcile\n        st_line.process_reconciliation(counterpart_aml_dicts=[{\n            'move_line': rcv_mv_line,\n            'credit': 100,\n            'debit': 0,\n            'name': rcv_mv_line.name,\n        }])\n\n        # check everything went as expected\n        self.assertTrue(st_line.journal_entry_ids)\n        counterpart_mv_line = None\n        for l in st_line.journal_entry_ids:\n            if l.account_id.user_type_id.type == 'receivable':\n                counterpart_mv_line = l\n                break\n        self.assertIsNotNone(counterpart_mv_line)\n        self.assertTrue(rcv_mv_line.reconciled)\n        self.assertTrue(counterpart_mv_line.reconciled)\n        self.assertEqual(counterpart_mv_line.matched_credit_ids, rcv_mv_line.matched_debit_ids)\n\n    def test_reconcile_with_write_off(self):\n        pass\n\n    def create_invoice(self, amount):\n        \"\"\" Return the move line that gets to be reconciled (the one in the receivable account) \"\"\"\n        vals = {'partner_id': self.partner_agrolait.id,\n                'type': 'out_invoice',\n                'name': '-',\n                'currency_id': self.env.user.company_id.currency_id.id,\n                }\n        # new creates a temporary record to apply the on_change afterwards\n        invoice = self.i_model.new(vals)\n        invoice._onchange_partner_id()\n        vals.update({'account_id': invoice.account_id.id})\n        invoice = self.i_model.create(vals)\n\n        self.il_model.create({\n            'quantity': 1,\n            'price_unit': amount,\n            'invoice_id': invoice.id,\n            'name': '.',\n            'account_id': self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1).id,\n        })\n        invoice.action_invoice_open()\n\n        mv_line = None\n        for l in invoice.move_id.line_ids:\n            if l.account_id.id == vals['account_id']:\n                mv_line = l\n        self.assertIsNotNone(mv_line)\n\n        return mv_line\n\n    def create_statement_line(self, st_line_amount):\n        journal = self.bs_model.with_context(journal_type='bank')._default_journal()\n        #journal = self.env.ref('l10n_be.bank_journal')\n        bank_stmt = self.bs_model.create({'journal_id': journal.id})\n\n        bank_stmt_line = self.bsl_model.create({\n            'name': '_',\n            'statement_id': bank_stmt.id,\n            'partner_id': self.partner_agrolait.id,\n            'amount': st_line_amount,\n            })\n\n        return bank_stmt_line\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_bank_statement_reconciliation.py", "id": "de436485d3cc663bdf1f8a37e405e732", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_bank_statement_reconciliation.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}