{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom werkzeug.exceptions import NotFound\n\nimport datetime\n\nfrom odoo import http\nfrom odoo.http import request\n\n\nclass WebsiteRatingProject(http.Controller):\n\n    @http.route(['/project/rating/'], type='http', auth=\"public\", website=True)\n    def index(self, **kw):\n        projects = request.env['project.project'].sudo().search([('rating_status', '!=', 'no'), ('portal_show_rating', '=', True)])\n        values = {'projects': projects}\n        return request.render('website_rating_project.index', values)\n\n    @http.route(['/project/rating/<int:project_id>'], type='http', auth=\"public\", website=True)\n    def page(self, project_id=None, **kw):\n        user = request.env.user\n        project = request.env['project.project'].sudo().browse(project_id)\n        \n        # and check if the user should be able to view the project (project managers only if it's unpublished or has no rating)\n        if not ((project.rating_status!='no') and project.portal_show_rating) and not user.sudo(user).has_group('project.group_project_manager'):\n            raise NotFound()\n        values = {\n            'project': project,\n            'task_data': self._calculate_rating(project.id),\n        }\n        return request.render('website_rating_project.project_rating_page', values)\n\n    def _calculate_rating(self, project_id):\n        \n        records = request.env[\"project.task\"].sudo().search([('project_id', '=', project_id)])\n        domain = [('res_model', '=', \"project.task\"), ('res_id', 'in', records.ids), ('consumed', '=', True)]\n        ratings = request.env['rating.rating'].search(domain, order=\"id desc\", limit=100)\n\n        yesterday = (datetime.date.today() - datetime.timedelta(days=-1)).strftime('%Y-%m-%d 23:59:59')\n        stats = {}\n        for x in (7, 30, 90):\n            todate = (datetime.date.today() - datetime.timedelta(days=x)).strftime('%Y-%m-%d 00:00:00')\n            domdate = domain + [('create_date', '<=', yesterday), ('create_date', '>=', todate)]\n            stats[x] = {1: 0, 5: 0, 10: 0}\n            rating_stats = request.env['rating.rating'].read_group(domdate, [], ['rating'])\n            total = sum(st['rating_count'] for st in rating_stats)\n            for rate in rating_stats:\n                stats[x][rate['rating']] = float(\"%.2f\" % (rate['rating_count'] * 100.0 / total))\n        return {'ratings': ratings, 'stats': stats}\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     avoid giving access rights projects public user  let use sudo    check user able view project (project managers unpublished rating)    calculate rating tasks ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom werkzeug.exceptions import NotFound\n\nimport datetime\n\nfrom odoo import http\nfrom odoo.http import request\n\n\nclass WebsiteRatingProject(http.Controller):\n\n    @http.route(['/project/rating/'], type='http', auth=\"public\", website=True)\n    def index(self, **kw):\n        projects = request.env['project.project'].sudo().search([('rating_status', '!=', 'no'), ('portal_show_rating', '=', True)])\n        values = {'projects': projects}\n        return request.render('website_rating_project.index', values)\n\n    @http.route(['/project/rating/<int:project_id>'], type='http', auth=\"public\", website=True)\n    def page(self, project_id=None, **kw):\n        user = request.env.user\n        project = request.env['project.project'].sudo().browse(project_id)\n        # to avoid giving any access rights on projects to the public user, let's use sudo\n        # and check if the user should be able to view the project (project managers only if it's unpublished or has no rating)\n        if not ((project.rating_status!='no') and project.portal_show_rating) and not user.sudo(user).has_group('project.group_project_manager'):\n            raise NotFound()\n        values = {\n            'project': project,\n            'task_data': self._calculate_rating(project.id),\n        }\n        return request.render('website_rating_project.project_rating_page', values)\n\n    def _calculate_rating(self, project_id):\n        # Calculate rating for Tasks\n        records = request.env[\"project.task\"].sudo().search([('project_id', '=', project_id)])\n        domain = [('res_model', '=', \"project.task\"), ('res_id', 'in', records.ids), ('consumed', '=', True)]\n        ratings = request.env['rating.rating'].search(domain, order=\"id desc\", limit=100)\n\n        yesterday = (datetime.date.today() - datetime.timedelta(days=-1)).strftime('%Y-%m-%d 23:59:59')\n        stats = {}\n        for x in (7, 30, 90):\n            todate = (datetime.date.today() - datetime.timedelta(days=x)).strftime('%Y-%m-%d 00:00:00')\n            domdate = domain + [('create_date', '<=', yesterday), ('create_date', '>=', todate)]\n            stats[x] = {1: 0, 5: 0, 10: 0}\n            rating_stats = request.env['rating.rating'].read_group(domdate, [], ['rating'])\n            total = sum(st['rating_count'] for st in rating_stats)\n            for rate in rating_stats:\n                stats[x][rate['rating']] = float(\"%.2f\" % (rate['rating_count'] * 100.0 / total))\n        return {'ratings': ratings, 'stats': stats}\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "7c99d55fae5e307c1c8a2c4f14de0705", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_rating_project/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}