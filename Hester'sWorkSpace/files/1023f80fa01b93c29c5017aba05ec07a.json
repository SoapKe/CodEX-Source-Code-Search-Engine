{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport calendar\nimport re\nimport time\n\nfrom .amp import AMPIE\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..compat import compat_urlparse\n\n\nclass AbcNewsVideoIE(AMPIE):\n    IE_NAME = 'abcnews:video'\n    _VALID_URL = r\n\n    _TESTS = [{\n        'url': 'http://abcnews.go.com/ThisWeek/video/week-exclusive-irans-foreign-minister-zarif-20411932',\n        'info_dict': {\n            'id': '20411932',\n            'ext': 'mp4',\n            'display_id': 'week-exclusive-irans-foreign-minister-zarif',\n            'title': '\\'This Week\\' Exclusive: Iran\\'s Foreign Minister Zarif',\n            'description': 'George Stephanopoulos goes one-on-one with Iranian Foreign Minister Dr. Javad Zarif.',\n            'duration': 180,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://abcnews.go.com/video/embed?id=46979033',\n        'only_matching': True,\n    }, {\n        'url': 'http://abcnews.go.com/2020/video/2020-husband-stands-teacher-jail-student-affairs-26119478',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n        video_id = mobj.group('id')\n        info_dict = self._extract_feed_info(\n            'http://abcnews.go.com/video/itemfeed?id=%s' % video_id)\n        info_dict.update({\n            'id': video_id,\n            'display_id': display_id,\n        })\n        return info_dict\n\n\nclass AbcNewsIE(InfoExtractor):\n    IE_NAME = 'abcnews'\n    _VALID_URL = r'https?://abcnews\\.go\\.com/(?:[^/]+/)+(?P<display_id>[0-9a-z-]+)/story\\?id=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://abcnews.go.com/Blotter/News/dramatic-video-rare-death-job-america/story?id=10498713\n        'info_dict': {\n            'id': '10505354',\n            'ext': 'flv',\n            'display_id': 'dramatic-video-rare-death-job-america',\n            'title': 'Occupational Hazards',\n            'description': 'Nightline investigates the dangers that lurk at various jobs.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20100428',\n            'timestamp': 1272412800,\n        },\n        'add_ie': ['AbcNewsVideo'],\n    }, {\n        'url': 'http://abcnews.go.com/Entertainment/justin-timberlake-performs-stop-feeling-eurovision-2016/story?id=39125818',\n        'info_dict': {\n            'id': '38897857',\n            'ext': 'mp4',\n            'display_id': 'justin-timberlake-performs-stop-feeling-eurovision-2016',\n            'title': 'Justin Timberlake Drops Hints For Secret Single',\n            'description': 'Lara Spencer reports the buzziest stories of the day in \"GMA\" Pop News.',\n            'upload_date': '20160515',\n            'timestamp': 1463329500,\n        },\n        'params': {\n            \n            'skip_download': True,\n            \n            'playlist_items': '1',\n        },\n        'add_ie': ['AbcNewsVideo'],\n    }, {\n        'url': 'http://abcnews.go.com/Technology/exclusive-apple-ceo-tim-cook-iphone-cracking-software/story?id=37173343',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        video_url = self._search_regex(\n            r'window\\.abcnvideo\\.url\\s*=\\s*\"([^\"]+)\"', webpage, 'video URL')\n        full_video_url = compat_urlparse.urljoin(url, video_url)\n\n        youtube_url = YoutubeIE._extract_url(webpage)\n\n        timestamp = None\n        date_str = self._html_search_regex(\n            r'<span[^>]+class=\"timestamp\">([^<]+)</span>',\n            webpage, 'timestamp', fatal=False)\n        if date_str:\n            tz_offset = 0\n            if date_str.endswith(' ET'):  \n                tz_offset = -5\n                date_str = date_str[:-3]\n            date_formats = ['%b. %d, %Y', '%b %d, %Y, %I:%M %p']\n            for date_format in date_formats:\n                try:\n                    timestamp = calendar.timegm(time.strptime(date_str.strip(), date_format))\n                except ValueError:\n                    continue\n            if timestamp is not None:\n                timestamp -= tz_offset * 3600\n\n        entry = {\n            '_type': 'url_transparent',\n            'ie_key': AbcNewsVideoIE.ie_key(),\n            'url': full_video_url,\n            'id': video_id,\n            'display_id': display_id,\n            'timestamp': timestamp,\n        }\n\n        if youtube_url:\n            entries = [entry, self.url_result(youtube_url, ie=YoutubeIE.ie_key())]\n            return self.playlist_result(entries)\n\n        return entry\n", "comments": "(?x)\n                    https?://\n                        abcnews\\.go\\.com/\n                        (?:\n                            [^/]+/video/(?P<display_id>[0-9a-z-]+)-|\n                            video/embed\\?.*?\\bid=\n                        )\n                        (?P<id>\\d+)\n                    \n \n# coding: utf-8\n# m3u8 download\n#.UIhwosWHLjY',\n# m3u8 download\n# The embedded YouTube video is blocked due to copyright issues\n# Eastern Time\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport calendar\nimport re\nimport time\n\nfrom .amp import AMPIE\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..compat import compat_urlparse\n\n\nclass AbcNewsVideoIE(AMPIE):\n    IE_NAME = 'abcnews:video'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        abcnews\\.go\\.com/\n                        (?:\n                            [^/]+/video/(?P<display_id>[0-9a-z-]+)-|\n                            video/embed\\?.*?\\bid=\n                        )\n                        (?P<id>\\d+)\n                    '''\n\n    _TESTS = [{\n        'url': 'http://abcnews.go.com/ThisWeek/video/week-exclusive-irans-foreign-minister-zarif-20411932',\n        'info_dict': {\n            'id': '20411932',\n            'ext': 'mp4',\n            'display_id': 'week-exclusive-irans-foreign-minister-zarif',\n            'title': '\\'This Week\\' Exclusive: Iran\\'s Foreign Minister Zarif',\n            'description': 'George Stephanopoulos goes one-on-one with Iranian Foreign Minister Dr. Javad Zarif.',\n            'duration': 180,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://abcnews.go.com/video/embed?id=46979033',\n        'only_matching': True,\n    }, {\n        'url': 'http://abcnews.go.com/2020/video/2020-husband-stands-teacher-jail-student-affairs-26119478',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n        video_id = mobj.group('id')\n        info_dict = self._extract_feed_info(\n            'http://abcnews.go.com/video/itemfeed?id=%s' % video_id)\n        info_dict.update({\n            'id': video_id,\n            'display_id': display_id,\n        })\n        return info_dict\n\n\nclass AbcNewsIE(InfoExtractor):\n    IE_NAME = 'abcnews'\n    _VALID_URL = r'https?://abcnews\\.go\\.com/(?:[^/]+/)+(?P<display_id>[0-9a-z-]+)/story\\?id=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://abcnews.go.com/Blotter/News/dramatic-video-rare-death-job-america/story?id=10498713#.UIhwosWHLjY',\n        'info_dict': {\n            'id': '10505354',\n            'ext': 'flv',\n            'display_id': 'dramatic-video-rare-death-job-america',\n            'title': 'Occupational Hazards',\n            'description': 'Nightline investigates the dangers that lurk at various jobs.',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20100428',\n            'timestamp': 1272412800,\n        },\n        'add_ie': ['AbcNewsVideo'],\n    }, {\n        'url': 'http://abcnews.go.com/Entertainment/justin-timberlake-performs-stop-feeling-eurovision-2016/story?id=39125818',\n        'info_dict': {\n            'id': '38897857',\n            'ext': 'mp4',\n            'display_id': 'justin-timberlake-performs-stop-feeling-eurovision-2016',\n            'title': 'Justin Timberlake Drops Hints For Secret Single',\n            'description': 'Lara Spencer reports the buzziest stories of the day in \"GMA\" Pop News.',\n            'upload_date': '20160515',\n            'timestamp': 1463329500,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n            # The embedded YouTube video is blocked due to copyright issues\n            'playlist_items': '1',\n        },\n        'add_ie': ['AbcNewsVideo'],\n    }, {\n        'url': 'http://abcnews.go.com/Technology/exclusive-apple-ceo-tim-cook-iphone-cracking-software/story?id=37173343',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        display_id = mobj.group('display_id')\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        video_url = self._search_regex(\n            r'window\\.abcnvideo\\.url\\s*=\\s*\"([^\"]+)\"', webpage, 'video URL')\n        full_video_url = compat_urlparse.urljoin(url, video_url)\n\n        youtube_url = YoutubeIE._extract_url(webpage)\n\n        timestamp = None\n        date_str = self._html_search_regex(\n            r'<span[^>]+class=\"timestamp\">([^<]+)</span>',\n            webpage, 'timestamp', fatal=False)\n        if date_str:\n            tz_offset = 0\n            if date_str.endswith(' ET'):  # Eastern Time\n                tz_offset = -5\n                date_str = date_str[:-3]\n            date_formats = ['%b. %d, %Y', '%b %d, %Y, %I:%M %p']\n            for date_format in date_formats:\n                try:\n                    timestamp = calendar.timegm(time.strptime(date_str.strip(), date_format))\n                except ValueError:\n                    continue\n            if timestamp is not None:\n                timestamp -= tz_offset * 3600\n\n        entry = {\n            '_type': 'url_transparent',\n            'ie_key': AbcNewsVideoIE.ie_key(),\n            'url': full_video_url,\n            'id': video_id,\n            'display_id': display_id,\n            'timestamp': timestamp,\n        }\n\n        if youtube_url:\n            entries = [entry, self.url_result(youtube_url, ie=YoutubeIE.ie_key())]\n            return self.playlist_result(entries)\n\n        return entry\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "abcnews.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/abcnews.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}