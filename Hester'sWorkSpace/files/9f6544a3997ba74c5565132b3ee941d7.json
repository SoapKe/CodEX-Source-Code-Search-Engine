{"author": "rushter", "code": "import logging\n\nfrom mla.neuralnet import NeuralNet\nfrom mla.neuralnet.layers import Activation, Dense\nfrom mla.neuralnet.optimizers import Adam\nfrom mla.rl.dqn import DQN\n\nlogging.basicConfig(level=logging.CRITICAL)\n\n\ndef mlp_model(n_actions, batch_size=64):\n    model = NeuralNet(\n        layers=[\n            Dense(32),\n            Activation('relu'),\n            Dense(n_actions),\n        ],\n        loss='mse',\n        optimizer=Adam(),\n        metric='mse',\n        batch_size=batch_size,\n        max_epochs=1,\n        verbose=False,\n\n    )\n    return model\n\n\nmodel = DQN(n_episodes=2500, batch_size=64)\nmodel.init_environment('CartPole-v0')\nmodel.init_model(mlp_model)\n\ntry:\n    \n    \n    # You can stop training process using Ctrl+C signal\n    \n    model.train(render=False)\nexcept:\n    pass\n\nmodel.play(episodes=100)\n", "comments": "  train model    it take 300 2500 episodes solve cartpole v0 problem due randomness environment     you stop training process using ctrl c signal    read problem  https   gym openai com envs cartpole v0    render trained model ", "content": "import logging\n\nfrom mla.neuralnet import NeuralNet\nfrom mla.neuralnet.layers import Activation, Dense\nfrom mla.neuralnet.optimizers import Adam\nfrom mla.rl.dqn import DQN\n\nlogging.basicConfig(level=logging.CRITICAL)\n\n\ndef mlp_model(n_actions, batch_size=64):\n    model = NeuralNet(\n        layers=[\n            Dense(32),\n            Activation('relu'),\n            Dense(n_actions),\n        ],\n        loss='mse',\n        optimizer=Adam(),\n        metric='mse',\n        batch_size=batch_size,\n        max_epochs=1,\n        verbose=False,\n\n    )\n    return model\n\n\nmodel = DQN(n_episodes=2500, batch_size=64)\nmodel.init_environment('CartPole-v0')\nmodel.init_model(mlp_model)\n\ntry:\n    # Train the model\n    # It can take from 300 to 2500 episodes to solve CartPole-v0 problem due to randomness of environment.\n    # You can stop training process using Ctrl+C signal\n    # Read more about this problem: https://gym.openai.com/envs/CartPole-v0\n    model.train(render=False)\nexcept:\n    pass\n# Render trained model\nmodel.play(episodes=100)\n", "description": "Minimal and clean examples of machine learning algorithms", "file_name": "rl_deep_q_learning.py", "id": "9f6544a3997ba74c5565132b3ee941d7", "language": "Python", "project_name": "MLAlgorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rushter-MLAlgorithms/rushter-MLAlgorithms-d398777/examples/rl_deep_q_learning.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:25:48Z", "url": "https://github.com/rushter/MLAlgorithms", "wiki": false}