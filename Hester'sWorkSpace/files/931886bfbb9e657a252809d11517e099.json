{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n (c) 2017 James Tanner (@jctanner) <tanner.jc@gmail.com>\n          Abhijeet Kasurde (@akasurde) <akasurde@redhat.com>\n\n Written by James Tanner <tanner.jc@gmail.com>\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\nimport psutil\nimport socket\nimport subprocess\n\nfrom flask import Flask\nfrom flask import jsonify\nfrom flask import request\n\n\napp = Flask(__name__)\nGOPATH = os.path.expanduser('/opt/gocode')\nVCSIMPATH = os.path.join(GOPATH, 'bin', 'vcsim')\nGOVCPATH = os.path.join(GOPATH, 'bin', 'govc')\nGOVCURL = None\n\n\n@app.route('/')\ndef m_index():\n    return 'vcsim controller'\n\n\n@app.route('/log')\ndef get_log():\n    \"\"\"Read and return the vcsim log\"\"\"\n    fdata = ''\n    if os.path.isfile('vcsim.log'):\n        with open('vcsim.log', 'rb') as f:\n            fdata = f.read()\n    return fdata\n\n\n@app.route('/kill/<int:number>')\ndef kill_one(number):\n    \"\"\"Kill any arbitrary process id\"\"\"\n\n    success = False\n    e = None\n\n    try:\n        p = psutil.Process(number)\n        p.terminate()\n        success = True\n    except Exception as e:\n        pass\n\n    return jsonify({'success': success, 'e': str(e)})\n\n\n@app.route('/killall')\ndef kill_all():\n    \"\"\"Kill ALL of the running vcsim pids\"\"\"\n\n    results = []\n\n    for x in psutil.pids():\n        p = psutil.Process(x)\n        if VCSIMPATH in p.cmdline():\n            success = False\n            e = None\n            try:\n                p.terminate()\n                success = True\n            except Exception as e:\n                pass\n            results.append(\n                {'pid': x, 'cmdline': p.cmdline(),\n                 'success': success, 'e': str(e)}\n            )\n\n    return jsonify(results)\n\n\n@app.route('/spawn')\ndef spawn_vcsim():\n    \"\"\"Launch vcsim in a background process and return the pid+govcm_url\"\"\"\n\n    global GOVCURL\n\n    username = request.args.get('username') or 'user'\n    password = request.args.get('password') or 'pass'\n    hostname = request.args.get('hostname') or \\\n        socket.gethostbyname(socket.gethostname())\n    port = request.args.get('port') or '443'\n    port = int(port)\n\n     FIXME - enable tracing\n    if request.args.get('trace'):\n        trace = True\n    else:\n        trace = False\n\n     vcsim cli options and their default values\n    cli_opts = [\n        ['app', 0],\n        ['cluster', 0],\n        ['dc', 1],\n        ['ds', 1],\n        ['folder', 1],\n        ['host', 3],\n        ['pg', 1],\n        ['pod', 1],\n        ['pool', 1],\n        ['vm', 2]\n    ]\n\n     useful for client govc commands\n    govc_url = 'https://%s:%s@%s:%s' % (username, password, hostname, port)\n    GOVCURL = govc_url\n\n     need these to run the service\n    env = {\n        'GOPATH': GOPATH,\n        'GOVC_URL': govc_url,\n        'GOVC_INSECURE': '1'\n    }\n\n     build the command\n    cmd = [\n        VCSIMPATH,\n        '-httptest.serve',\n        '%s:%s' % (hostname, port),\n    ]\n\n     trace soap requests+responses\n    if trace:\n        cmd.append('-trace')\n\n     esx only allows certain arguments\n    if request.args.get('esx'):\n        cmd.append('-esx')\n        for x in [('vm', 1), ('ds', 1)]:\n            name = x[0]\n            default = x[1]\n            if request.args.get(name):\n                default = request.args.get(name)\n            cmd.append('-%s=%s' % (name, default))\n    else:\n         use all other options as requested for vcenter\n        for x in cli_opts:\n            name = x[0]\n            default = x[1]\n            if request.args.get(name):\n                default = request.args.get(name)\n            cmd.append('-%s=%s' % (name, default))\n    cmd = ' '.join(cmd)\n    cmd += ' > vcsim.log 2>&1'\n\n     run it with environment settings\n    p = subprocess.Popen(\n        cmd,\n        env=env,\n        shell=True\n    )\n\n     return the relevant data\n    pid = p.pid\n    rdata = {\n        'cmd': cmd,\n        'pid': pid,\n        'host': hostname,\n        'port': port,\n        'username': username,\n        'password': password,\n        'GOVC_URL': govc_url\n    }\n\n    return jsonify(rdata)\n\n\n@app.route('/govc_find')\ndef govc_find():\n    \"\"\"Run govc find and optionally filter results\"\"\"\n    ofilter = request.args.get('filter') or None\n    stdout_lines = _get_all_objs(ofilter=ofilter)\n    return jsonify(stdout_lines)\n\n\n@app.route('/govc_vm_info')\ndef get_govc_vm_info():\n    \"\"\"Run govc vm info \"\"\"\n    vm_name = request.args.get('vm_name') or None\n    vm_output = {}\n    if vm_name:\n        all_vms = [vm_name]\n    else:\n         Get all VMs\n        all_vms = _get_all_objs(ofilter='VM')\n\n    for vm_name in all_vms:\n        vm_info = _get_vm_info(vm_name=vm_name)\n        name = vm_info.get('Name', vm_name)\n        vm_output[name] = vm_info\n\n    return jsonify(vm_output)\n\n\n@app.route('/govc_host_info')\ndef get_govc_host_info():\n    \"\"\" Run govc host.info \"\"\"\n    host_name = request.args.get(\"host_name\") or None\n    host_output = {}\n    if host_name:\n        all_hosts = [host_name]\n    else:\n        all_hosts = _get_all_objs(ofilter='H')\n    for host_system in all_hosts:\n        host_info = _get_host_info(host_name=host_system)\n        name = host_info.get('Name', host_system)\n        host_output[name] = host_info\n\n    return jsonify(host_output)\n\n\ndef _get_host_info(host_name=None):\n    \"\"\"\n    Get all information of host from vcsim\n    :param vm_name: Name of host\n    :return: Dictionary containing information about VM,\n             where KEY represent attributes and VALUE represent attribute's value\n    \"\"\"\n    cmd = '%s host.info -host=%s 2>&1' % (GOVCPATH, host_name)\n\n    host_info = {}\n    if host_name is None:\n        return host_info\n    host_info = parse_govc_info(cmd)\n\n    return host_info\n\n\ndef _get_vm_info(vm_name=None):\n    \"\"\"\n    Get all information of VM from vcsim\n    :param vm_name: Name of VM\n    :return: Dictionary containing information about VM,\n             where KEY represent attributes and VALUE represent attribute's value\n    \"\"\"\n    cmd = '%s vm.info %s 2>&1' % (GOVCPATH, vm_name)\n\n    vm_info = {}\n    if vm_name is None:\n        return vm_info\n    vm_info = parse_govc_info(cmd)\n\n    return vm_info\n\n\ndef parse_govc_info(cmd):\n    \"\"\"\n    Helper function to parse output of govc info commands\n    :param cmd: command variable to run and parse output for\n    :return: Dictionary containing information about object\n    \"\"\"\n    so, se = run_cmd(cmd)\n    stdout_lines = so.splitlines()\n    info = {}\n    for line in stdout_lines:\n        if \":\" in line:\n            key, value = line.split(\":\", 1)\n            key = key.lstrip()\n            info[key] = value.strip()\n\n    return info\n\n\ndef _get_all_objs(ofilter=None):\n    \"\"\"\n    Get all VM Objects from vcsim\n    :param ofilter: Specify which object to get\n    :return: list of Object specified by ofilter\n    \"\"\"\n    cmd = '%s find ' % GOVCPATH\n    filter_mapping = dict(VA='a', CCR='c', DC='d', F='f', DVP='g', H='h',\n                          VM='m', N='n', ON='o', RP='p', CR='r', D='s', DVS='w')\n    if ofilter:\n        type_filter = filter_mapping.get(ofilter, '')\n        if type_filter != '':\n            cmd += '-type %s ' % type_filter\n\n    cmd += \"2>&1\"\n    so, se = run_cmd(cmd)\n    stdout_lines = so.splitlines()\n    return stdout_lines\n\n\ndef run_cmd(cmd):\n    \"\"\"\n    Helper Function to run commands\n    :param cmd: Command string to execute\n    :return: StdOut and StdErr in string format\n    \"\"\"\n    global GOVCURL\n\n    env = {\n        'GOPATH': GOPATH,\n        'GOVC_URL': GOVCURL,\n        'GOVC_INSECURE': '1'\n    }\n\n    p = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        shell=True\n    )\n\n    (so, se) = p.communicate()\n    return so, se\n\n\nif __name__ == \"__main__\":\n    app.run(debug=False, host='0.0.0.0')\n", "comments": "   read return vcsim log        fdata          os path isfile( vcsim log )          open( vcsim log    rb ) f              fdata   f read()     return fdata    app route(  kill  int number  ) def kill one(number)         kill arbitrary process id         success   false     e   none      try          p   psutil process(number)         p terminate()         success   true     except exception e          pass      return jsonify(  success   success   e   str(e) )    app route(  killall ) def kill all()         kill all running vcsim pids         results           x psutil pids()          p   psutil process(x)         vcsimpath p cmdline()              success   false             e   none             try                  p terminate()                 success   true             except exception e                  pass             results append(                   pid   x   cmdline   p cmdline()                    success   success   e   str(e)              )      return jsonify(results)    app route(  spawn ) def spawn vcsim()         launch vcsim background process return pid govcm url         global govcurl      username   request args get( username )  user      password   request args get( password )  pass      hostname   request args get( hostname )           socket gethostbyname(socket gethostname())     port   request args get( port )  443      port   int(port)        fixme   enable tracing     request args get( trace )          trace   true     else          trace   false        vcsim cli options default values     cli opts               app   0             cluster   0             dc   1             ds   1             folder   1             host   3             pg   1             pod   1             pool   1             vm   2               useful client govc commands     govc url    https          (username  password  hostname  port)     govcurl   govc url        need run service     env              gopath   gopath           govc url   govc url           govc insecure    1               build command     cmd             vcsimpath            httptest serve                 (hostname  port)               trace soap requests responses     trace          cmd append(  trace )        esx allows certain arguments     request args get( esx )          cmd append(  esx )         x  ( vm   1)  ( ds   1)               name   x 0              default   x 1              request args get(name)                  default   request args get(name)             cmd append(       (name  default))     else            use options requested vcenter         x cli opts              name   x 0              default   x 1              request args get(name)                  default   request args get(name)             cmd append(       (name  default))     cmd       join(cmd)     cmd        vcsim log 2  1         run environment settings     p   subprocess popen(         cmd          env env          shell true     )        return relevant data     pid   p pid     rdata              cmd   cmd           pid   pid           host   hostname           port   port           username   username           password   password           govc url   govc url            return jsonify(rdata)    app route(  govc find ) def govc find()         run govc find optionally filter results        ofilter   request args get( filter ) none     stdout lines    get objs(ofilter ofilter)     return jsonify(stdout lines)    app route(  govc vm info ) def get govc vm info()         run govc vm info         vm name   request args get( vm name ) none     vm output          vm name          vms    vm name      else            get vms         vms    get objs(ofilter  vm )      vm name vms          vm info    get vm info(vm name vm name)         name   vm info get( name   vm name)         vm output name    vm info      return jsonify(vm output)    app route(  govc host info ) def get govc host info()          run govc host info         host name   request args get( host name ) none     host output          host name          hosts    host name      else          hosts    get objs(ofilter  h )     host system hosts          host info    get host info(host name host system)         name   host info get( name   host system)         host output name    host info      return jsonify(host output)   def  get host info(host name none)              get information host vcsim      param vm name  name host      return  dictionary containing information vm               key represent attributes value represent attribute value             cmd     host info  host  2  1    (govcpath  host name)      host info          host name none          return host info     host info   parse govc info(cmd)      return host info   def  get vm info(vm name none)              get information vm vcsim      param vm name  name vm      return  dictionary containing information vm               key represent attributes value represent attribute value             cmd     vm info  2  1    (govcpath  vm name)      vm info          vm name none          return vm info     vm info   parse govc info(cmd)      return vm info   def parse govc info(cmd)              helper function parse output govc info commands      param cmd  command variable run parse output      return  dictionary containing information object              se   run cmd(cmd)     stdout lines   splitlines()     info          line stdout lines              line              key  value   line split(     1)             key   key lstrip()             info key    value strip()      return info   def  get objs(ofilter none)              get vm objects vcsim      param ofilter  specify object get      return  list object specified ofilter             cmd     find     govcpath     filter mapping   dict(va    ccr  c   dc    f  f   dvp  g   h  h                             vm    n  n   on    rp  p   cr  r   d    dvs  w )     ofilter          type filter   filter mapping get(ofilter    )         type filter                    cmd      type      type filter      cmd     2  1       se   run cmd(cmd)     stdout lines   splitlines()     return stdout lines   def run cmd(cmd)              helper function run commands      param cmd  command string execute      return  stdout stderr string format             usr bin env python        coding  utf 8        (c) 2017 james tanner ( jctanner)  tanner jc gmail com              abhijeet kasurde ( akasurde)  akasurde redhat com        written james tanner  tanner jc gmail com     this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       fixme   enable tracing    vcsim cli options default values    useful client govc commands    need run service    build command    trace soap requests responses    esx allows certain arguments    use options requested vcenter    run environment settings    return relevant data    get vms ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# (c) 2017 James Tanner (@jctanner) <tanner.jc@gmail.com>\n#          Abhijeet Kasurde (@akasurde) <akasurde@redhat.com>\n#\n# Written by James Tanner <tanner.jc@gmail.com>\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nimport os\nimport psutil\nimport socket\nimport subprocess\n\nfrom flask import Flask\nfrom flask import jsonify\nfrom flask import request\n\n\napp = Flask(__name__)\nGOPATH = os.path.expanduser('/opt/gocode')\nVCSIMPATH = os.path.join(GOPATH, 'bin', 'vcsim')\nGOVCPATH = os.path.join(GOPATH, 'bin', 'govc')\nGOVCURL = None\n\n\n@app.route('/')\ndef m_index():\n    return 'vcsim controller'\n\n\n@app.route('/log')\ndef get_log():\n    \"\"\"Read and return the vcsim log\"\"\"\n    fdata = ''\n    if os.path.isfile('vcsim.log'):\n        with open('vcsim.log', 'rb') as f:\n            fdata = f.read()\n    return fdata\n\n\n@app.route('/kill/<int:number>')\ndef kill_one(number):\n    \"\"\"Kill any arbitrary process id\"\"\"\n\n    success = False\n    e = None\n\n    try:\n        p = psutil.Process(number)\n        p.terminate()\n        success = True\n    except Exception as e:\n        pass\n\n    return jsonify({'success': success, 'e': str(e)})\n\n\n@app.route('/killall')\ndef kill_all():\n    \"\"\"Kill ALL of the running vcsim pids\"\"\"\n\n    results = []\n\n    for x in psutil.pids():\n        p = psutil.Process(x)\n        if VCSIMPATH in p.cmdline():\n            success = False\n            e = None\n            try:\n                p.terminate()\n                success = True\n            except Exception as e:\n                pass\n            results.append(\n                {'pid': x, 'cmdline': p.cmdline(),\n                 'success': success, 'e': str(e)}\n            )\n\n    return jsonify(results)\n\n\n@app.route('/spawn')\ndef spawn_vcsim():\n    \"\"\"Launch vcsim in a background process and return the pid+govcm_url\"\"\"\n\n    global GOVCURL\n\n    username = request.args.get('username') or 'user'\n    password = request.args.get('password') or 'pass'\n    hostname = request.args.get('hostname') or \\\n        socket.gethostbyname(socket.gethostname())\n    port = request.args.get('port') or '443'\n    port = int(port)\n\n    # FIXME - enable tracing\n    if request.args.get('trace'):\n        trace = True\n    else:\n        trace = False\n\n    # vcsim cli options and their default values\n    cli_opts = [\n        ['app', 0],\n        ['cluster', 0],\n        ['dc', 1],\n        ['ds', 1],\n        ['folder', 1],\n        ['host', 3],\n        ['pg', 1],\n        ['pod', 1],\n        ['pool', 1],\n        ['vm', 2]\n    ]\n\n    # useful for client govc commands\n    govc_url = 'https://%s:%s@%s:%s' % (username, password, hostname, port)\n    GOVCURL = govc_url\n\n    # need these to run the service\n    env = {\n        'GOPATH': GOPATH,\n        'GOVC_URL': govc_url,\n        'GOVC_INSECURE': '1'\n    }\n\n    # build the command\n    cmd = [\n        VCSIMPATH,\n        '-httptest.serve',\n        '%s:%s' % (hostname, port),\n    ]\n\n    # trace soap requests+responses\n    if trace:\n        cmd.append('-trace')\n\n    # esx only allows certain arguments\n    if request.args.get('esx'):\n        cmd.append('-esx')\n        for x in [('vm', 1), ('ds', 1)]:\n            name = x[0]\n            default = x[1]\n            if request.args.get(name):\n                default = request.args.get(name)\n            cmd.append('-%s=%s' % (name, default))\n    else:\n        # use all other options as requested for vcenter\n        for x in cli_opts:\n            name = x[0]\n            default = x[1]\n            if request.args.get(name):\n                default = request.args.get(name)\n            cmd.append('-%s=%s' % (name, default))\n    cmd = ' '.join(cmd)\n    cmd += ' > vcsim.log 2>&1'\n\n    # run it with environment settings\n    p = subprocess.Popen(\n        cmd,\n        env=env,\n        shell=True\n    )\n\n    # return the relevant data\n    pid = p.pid\n    rdata = {\n        'cmd': cmd,\n        'pid': pid,\n        'host': hostname,\n        'port': port,\n        'username': username,\n        'password': password,\n        'GOVC_URL': govc_url\n    }\n\n    return jsonify(rdata)\n\n\n@app.route('/govc_find')\ndef govc_find():\n    \"\"\"Run govc find and optionally filter results\"\"\"\n    ofilter = request.args.get('filter') or None\n    stdout_lines = _get_all_objs(ofilter=ofilter)\n    return jsonify(stdout_lines)\n\n\n@app.route('/govc_vm_info')\ndef get_govc_vm_info():\n    \"\"\"Run govc vm info \"\"\"\n    vm_name = request.args.get('vm_name') or None\n    vm_output = {}\n    if vm_name:\n        all_vms = [vm_name]\n    else:\n        # Get all VMs\n        all_vms = _get_all_objs(ofilter='VM')\n\n    for vm_name in all_vms:\n        vm_info = _get_vm_info(vm_name=vm_name)\n        name = vm_info.get('Name', vm_name)\n        vm_output[name] = vm_info\n\n    return jsonify(vm_output)\n\n\n@app.route('/govc_host_info')\ndef get_govc_host_info():\n    \"\"\" Run govc host.info \"\"\"\n    host_name = request.args.get(\"host_name\") or None\n    host_output = {}\n    if host_name:\n        all_hosts = [host_name]\n    else:\n        all_hosts = _get_all_objs(ofilter='H')\n    for host_system in all_hosts:\n        host_info = _get_host_info(host_name=host_system)\n        name = host_info.get('Name', host_system)\n        host_output[name] = host_info\n\n    return jsonify(host_output)\n\n\ndef _get_host_info(host_name=None):\n    \"\"\"\n    Get all information of host from vcsim\n    :param vm_name: Name of host\n    :return: Dictionary containing information about VM,\n             where KEY represent attributes and VALUE represent attribute's value\n    \"\"\"\n    cmd = '%s host.info -host=%s 2>&1' % (GOVCPATH, host_name)\n\n    host_info = {}\n    if host_name is None:\n        return host_info\n    host_info = parse_govc_info(cmd)\n\n    return host_info\n\n\ndef _get_vm_info(vm_name=None):\n    \"\"\"\n    Get all information of VM from vcsim\n    :param vm_name: Name of VM\n    :return: Dictionary containing information about VM,\n             where KEY represent attributes and VALUE represent attribute's value\n    \"\"\"\n    cmd = '%s vm.info %s 2>&1' % (GOVCPATH, vm_name)\n\n    vm_info = {}\n    if vm_name is None:\n        return vm_info\n    vm_info = parse_govc_info(cmd)\n\n    return vm_info\n\n\ndef parse_govc_info(cmd):\n    \"\"\"\n    Helper function to parse output of govc info commands\n    :param cmd: command variable to run and parse output for\n    :return: Dictionary containing information about object\n    \"\"\"\n    so, se = run_cmd(cmd)\n    stdout_lines = so.splitlines()\n    info = {}\n    for line in stdout_lines:\n        if \":\" in line:\n            key, value = line.split(\":\", 1)\n            key = key.lstrip()\n            info[key] = value.strip()\n\n    return info\n\n\ndef _get_all_objs(ofilter=None):\n    \"\"\"\n    Get all VM Objects from vcsim\n    :param ofilter: Specify which object to get\n    :return: list of Object specified by ofilter\n    \"\"\"\n    cmd = '%s find ' % GOVCPATH\n    filter_mapping = dict(VA='a', CCR='c', DC='d', F='f', DVP='g', H='h',\n                          VM='m', N='n', ON='o', RP='p', CR='r', D='s', DVS='w')\n    if ofilter:\n        type_filter = filter_mapping.get(ofilter, '')\n        if type_filter != '':\n            cmd += '-type %s ' % type_filter\n\n    cmd += \"2>&1\"\n    so, se = run_cmd(cmd)\n    stdout_lines = so.splitlines()\n    return stdout_lines\n\n\ndef run_cmd(cmd):\n    \"\"\"\n    Helper Function to run commands\n    :param cmd: Command string to execute\n    :return: StdOut and StdErr in string format\n    \"\"\"\n    global GOVCURL\n\n    env = {\n        'GOPATH': GOPATH,\n        'GOVC_URL': GOVCURL,\n        'GOVC_INSECURE': '1'\n    }\n\n    p = subprocess.Popen(\n        cmd,\n        stdout=subprocess.PIPE,\n        stderr=subprocess.PIPE,\n        env=env,\n        shell=True\n    )\n\n    (so, se) = p.communicate()\n    return so, se\n\n\nif __name__ == \"__main__\":\n    app.run(debug=False, host='0.0.0.0')\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "flask_control.py", "id": "931886bfbb9e657a252809d11517e099", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/utils/docker/vcenter-simulator/flask_control.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}