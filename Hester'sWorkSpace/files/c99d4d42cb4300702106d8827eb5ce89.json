{"author": "django", "code": "import unittest\nfrom datetime import date, datetime, time, timedelta\nfrom decimal import Decimal\nfrom operator import attrgetter, itemgetter\nfrom uuid import UUID\n\nfrom django.core.exceptions import FieldError\nfrom django.db import models\nfrom django.db.models import F, Max, Min, Q, Sum, Value\nfrom django.db.models.expressions import Case, When\nfrom django.test import SimpleTestCase, TestCase\n\nfrom .models import CaseTestModel, Client, FKCaseTestModel, O2OCaseTestModel\n\ntry:\n    from PIL import Image\nexcept ImportError:\n    Image = None\n\n\nclass CaseExpressionTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')\n        O2OCaseTestModel.objects.create(o2o=o, integer=1)\n        FKCaseTestModel.objects.create(fk=o, integer=1)\n\n        o = CaseTestModel.objects.create(integer=2, integer2=3, string='2')\n        O2OCaseTestModel.objects.create(o2o=o, integer=2)\n        FKCaseTestModel.objects.create(fk=o, integer=2)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n\n        o = CaseTestModel.objects.create(integer=3, integer2=4, string='3')\n        O2OCaseTestModel.objects.create(o2o=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=4)\n\n        o = CaseTestModel.objects.create(integer=2, integer2=2, string='2')\n        O2OCaseTestModel.objects.create(o2o=o, integer=2)\n        FKCaseTestModel.objects.create(fk=o, integer=2)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n\n        o = CaseTestModel.objects.create(integer=3, integer2=4, string='3')\n        O2OCaseTestModel.objects.create(o2o=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=4)\n\n        o = CaseTestModel.objects.create(integer=3, integer2=3, string='3')\n        O2OCaseTestModel.objects.create(o2o=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=4)\n\n        o = CaseTestModel.objects.create(integer=4, integer2=5, string='4')\n        O2OCaseTestModel.objects.create(o2o=o, integer=1)\n        FKCaseTestModel.objects.create(fk=o, integer=5)\n\n        \n        cls.non_lob_fields = [\n            f.name for f in CaseTestModel._meta.get_fields()\n            if not (f.is_relation and f.auto_created) and not isinstance(f, (models.BinaryField, models.TextField))\n        ]\n\n    def test_annotate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(test=Case(\n                When(integer=1, then=Value('one')),\n                When(integer=2, then=Value('two')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(1, 'one'), (2, 'two'), (3, 'other'), (2, 'two'), (3, 'other'), (3, 'other'), (4, 'other')],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_annotate_without_default(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(test=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_annotate_with_expression_as_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(f_test=Case(\n                When(integer=1, then=F('integer') + 1),\n                When(integer=2, then=F('integer') + 3),\n                default='integer',\n            )).order_by('pk'),\n            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 4)],\n            transform=attrgetter('integer', 'f_test')\n        )\n\n    def test_annotate_with_expression_as_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(f_test=Case(\n                When(integer2=F('integer'), then=Value('equal')),\n                When(integer2=F('integer') + 1, then=Value('+1')),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],\n            transform=attrgetter('integer', 'f_test')\n        )\n\n    def test_annotate_with_join_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(join_test=Case(\n                When(integer=1, then=F('o2o_rel__integer') + 1),\n                When(integer=2, then=F('o2o_rel__integer') + 3),\n                default='o2o_rel__integer',\n            )).order_by('pk'),\n            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 1)],\n            transform=attrgetter('integer', 'join_test')\n        )\n\n    def test_annotate_with_in_clause(self):\n        fk_rels = FKCaseTestModel.objects.filter(integer__in=[5])\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.only('pk', 'integer').annotate(in_test=Sum(Case(\n                When(fk_rel__in=fk_rels, then=F('fk_rel__integer')),\n                default=Value(0),\n            ))).order_by('pk'),\n            [(1, 0), (2, 0), (3, 0), (2, 0), (3, 0), (3, 0), (4, 5)],\n            transform=attrgetter('integer', 'in_test')\n        )\n\n    def test_annotate_with_join_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(join_test=Case(\n                When(integer2=F('o2o_rel__integer'), then=Value('equal')),\n                When(integer2=F('o2o_rel__integer') + 1, then=Value('+1')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, 'other')],\n            transform=attrgetter('integer', 'join_test')\n        )\n\n    def test_annotate_with_join_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(join_test=Case(\n                When(o2o_rel__integer=1, then=Value('one')),\n                When(o2o_rel__integer=2, then=Value('two')),\n                When(o2o_rel__integer=3, then=Value('three')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(1, 'one'), (2, 'two'), (3, 'three'), (2, 'two'), (3, 'three'), (3, 'three'), (4, 'one')],\n            transform=attrgetter('integer', 'join_test')\n        )\n\n    def test_annotate_with_annotation_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_plus_1=F('integer') + 1,\n                f_plus_3=F('integer') + 3,\n            ).annotate(\n                f_test=Case(\n                    When(integer=1, then='f_plus_1'),\n                    When(integer=2, then='f_plus_3'),\n                    default='integer',\n                ),\n            ).order_by('pk'),\n            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 4)],\n            transform=attrgetter('integer', 'f_test')\n        )\n\n    def test_annotate_with_annotation_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_plus_1=F('integer') + 1,\n            ).annotate(\n                f_test=Case(\n                    When(integer2=F('integer'), then=Value('equal')),\n                    When(integer2=F('f_plus_1'), then=Value('+1')),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],\n            transform=attrgetter('integer', 'f_test')\n        )\n\n    def test_annotate_with_annotation_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_minus_2=F('integer') - 2,\n            ).annotate(\n                test=Case(\n                    When(f_minus_2=-1, then=Value('negative one')),\n                    When(f_minus_2=0, then=Value('zero')),\n                    When(f_minus_2=1, then=Value('one')),\n                    default=Value('other'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [(1, 'negative one'), (2, 'zero'), (3, 'one'), (2, 'zero'), (3, 'one'), (3, 'one'), (4, 'other')],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_annotate_with_aggregation_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                min=Min('fk_rel__integer'),\n                max=Max('fk_rel__integer'),\n            ).annotate(\n                test=Case(\n                    When(integer=2, then='min'),\n                    When(integer=3, then='max'),\n                ),\n            ).order_by('pk'),\n            [(1, None, 1, 1), (2, 2, 2, 3), (3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4), (3, 4, 3, 4), (4, None, 5, 5)],\n            transform=itemgetter('integer', 'test', 'min', 'max')\n        )\n\n    def test_annotate_with_aggregation_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                min=Min('fk_rel__integer'),\n                max=Max('fk_rel__integer'),\n            ).annotate(\n                test=Case(\n                    When(integer2=F('min'), then=Value('min')),\n                    When(integer2=F('max'), then=Value('max')),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [(1, 1, 'min'), (2, 3, 'max'), (3, 4, 'max'), (2, 2, 'min'), (3, 4, 'max'), (3, 3, 'min'), (4, 5, 'min')],\n            transform=itemgetter('integer', 'integer2', 'test')\n        )\n\n    def test_annotate_with_aggregation_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                max=Max('fk_rel__integer'),\n            ).annotate(\n                test=Case(\n                    When(max=3, then=Value('max = 3')),\n                    When(max=4, then=Value('max = 4')),\n                    default=Value(''),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [(1, 1, ''), (2, 3, 'max = 3'), (3, 4, 'max = 4'), (2, 3, 'max = 3'),\n             (3, 4, 'max = 4'), (3, 4, 'max = 4'), (4, 5, '')],\n            transform=itemgetter('integer', 'max', 'test')\n        )\n\n    def test_annotate_exclude(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(test=Case(\n                When(integer=1, then=Value('one')),\n                When(integer=2, then=Value('two')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).exclude(test='other').order_by('pk'),\n            [(1, 'one'), (2, 'two'), (2, 'two')],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_annotate_values_not_in_order_by(self):\n        self.assertEqual(\n            list(CaseTestModel.objects.annotate(test=Case(\n                When(integer=1, then=Value('one')),\n                When(integer=2, then=Value('two')),\n                When(integer=3, then=Value('three')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).order_by('test').values_list('integer', flat=True)),\n            [1, 4, 3, 3, 3, 2, 2]\n        )\n\n    def test_annotate_with_empty_when(self):\n        objects = CaseTestModel.objects.annotate(\n            selected=Case(\n                When(pk__in=[], then=Value('selected')),\n                default=Value('not selected'), output_field=models.CharField()\n            )\n        )\n        self.assertEqual(len(objects), CaseTestModel.objects.count())\n        self.assertTrue(all(obj.selected == 'not selected' for obj in objects))\n\n    def test_combined_expression(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                test=Case(\n                    When(integer=1, then=2),\n                    When(integer=2, then=1),\n                    default=3,\n                    output_field=models.IntegerField(),\n                ) + 1,\n            ).order_by('pk'),\n            [(1, 3), (2, 2), (3, 4), (2, 2), (3, 4), (3, 4), (4, 4)],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_in_subquery(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(\n                pk__in=CaseTestModel.objects.annotate(\n                    test=Case(\n                        When(integer=F('integer2'), then='pk'),\n                        When(integer=4, then='pk'),\n                        output_field=models.IntegerField(),\n                    ),\n                ).values('test')).order_by('pk'),\n            [(1, 1), (2, 2), (3, 3), (4, 5)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_case_reuse(self):\n        SOME_CASE = Case(\n            When(pk=0, then=Value('0')),\n            default=Value('1'),\n            output_field=models.CharField(),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(somecase=SOME_CASE).order_by('pk'),\n            CaseTestModel.objects.annotate(somecase=SOME_CASE).order_by('pk').values_list('pk', 'somecase'),\n            lambda x: (x.pk, x.somecase)\n        )\n\n    def test_aggregate(self):\n        self.assertEqual(\n            CaseTestModel.objects.aggregate(\n                one=models.Sum(Case(\n                    When(integer=1, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                two=models.Sum(Case(\n                    When(integer=2, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                three=models.Sum(Case(\n                    When(integer=3, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                four=models.Sum(Case(\n                    When(integer=4, then=1),\n                    output_field=models.IntegerField(),\n                )),\n            ),\n            {'one': 1, 'two': 2, 'three': 3, 'four': 1}\n        )\n\n    def test_aggregate_with_expression_as_value(self):\n        self.assertEqual(\n            CaseTestModel.objects.aggregate(\n                one=models.Sum(Case(When(integer=1, then='integer'))),\n                two=models.Sum(Case(When(integer=2, then=F('integer') - 1))),\n                three=models.Sum(Case(When(integer=3, then=F('integer') + 1))),\n            ),\n            {'one': 1, 'two': 2, 'three': 12}\n        )\n\n    def test_aggregate_with_expression_as_condition(self):\n        self.assertEqual(\n            CaseTestModel.objects.aggregate(\n                equal=models.Sum(Case(\n                    When(integer2=F('integer'), then=1),\n                    output_field=models.IntegerField(),\n                )),\n                plus_one=models.Sum(Case(\n                    When(integer2=F('integer') + 1, then=1),\n                    output_field=models.IntegerField(),\n                )),\n            ),\n            {'equal': 3, 'plus_one': 4}\n        )\n\n    def test_filter(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(integer=2, then=3),\n                When(integer=3, then=4),\n                default=1,\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(1, 1), (2, 3), (3, 4), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_without_default(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(integer=2, then=3),\n                When(integer=3, then=4),\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(2, 3), (3, 4), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_expression_as_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(integer=2, then=F('integer') + 1),\n                When(integer=3, then=F('integer')),\n                default='integer',\n            )).order_by('pk'),\n            [(1, 1), (2, 3), (3, 3)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_expression_as_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(string=Case(\n                When(integer2=F('integer'), then=Value('2')),\n                When(integer2=F('integer') + 1, then=Value('3')),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(3, 4, '3'), (2, 2, '2'), (3, 4, '3')],\n            transform=attrgetter('integer', 'integer2', 'string')\n        )\n\n    def test_filter_with_join_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(integer=2, then=F('o2o_rel__integer') + 1),\n                When(integer=3, then=F('o2o_rel__integer')),\n                default='o2o_rel__integer',\n            )).order_by('pk'),\n            [(1, 1), (2, 3), (3, 3)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_join_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer=Case(\n                When(integer2=F('o2o_rel__integer') + 1, then=2),\n                When(integer2=F('o2o_rel__integer'), then=3),\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(2, 3), (3, 3)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_join_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(o2o_rel__integer=1, then=1),\n                When(o2o_rel__integer=2, then=3),\n                When(o2o_rel__integer=3, then=4),\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(1, 1), (2, 3), (3, 4), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_annotation_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f=F('integer'),\n                f_plus_1=F('integer') + 1,\n            ).filter(\n                integer2=Case(\n                    When(integer=2, then='f_plus_1'),\n                    When(integer=3, then='f'),\n                ),\n            ).order_by('pk'),\n            [(2, 3), (3, 3)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_annotation_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_plus_1=F('integer') + 1,\n            ).filter(\n                integer=Case(\n                    When(integer2=F('integer'), then=2),\n                    When(integer2=F('f_plus_1'), then=3),\n                    output_field=models.IntegerField(),\n                ),\n            ).order_by('pk'),\n            [(3, 4), (2, 2), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_annotation_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_plus_1=F('integer') + 1,\n            ).filter(\n                integer2=Case(\n                    When(f_plus_1=3, then=3),\n                    When(f_plus_1=4, then=4),\n                    default=1,\n                    output_field=models.IntegerField(),\n                ),\n            ).order_by('pk'),\n            [(1, 1), (2, 3), (3, 4), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_aggregation_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                min=Min('fk_rel__integer'),\n                max=Max('fk_rel__integer'),\n            ).filter(\n                integer2=Case(\n                    When(integer=2, then='min'),\n                    When(integer=3, then='max'),\n                ),\n            ).order_by('pk'),\n            [(3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4)],\n            transform=itemgetter('integer', 'integer2', 'min', 'max')\n        )\n\n    def test_filter_with_aggregation_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                min=Min('fk_rel__integer'),\n                max=Max('fk_rel__integer'),\n            ).filter(\n                integer=Case(\n                    When(integer2=F('min'), then=2),\n                    When(integer2=F('max'), then=3),\n                ),\n            ).order_by('pk'),\n            [(3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4)],\n            transform=itemgetter('integer', 'integer2', 'min', 'max')\n        )\n\n    def test_filter_with_aggregation_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                max=Max('fk_rel__integer'),\n            ).filter(\n                integer=Case(\n                    When(max=3, then=2),\n                    When(max=4, then=3),\n                ),\n            ).order_by('pk'),\n            [(2, 3, 3), (3, 4, 4), (2, 2, 3), (3, 4, 4), (3, 3, 4)],\n            transform=itemgetter('integer', 'integer2', 'max')\n        )\n\n    def test_update(self):\n        CaseTestModel.objects.update(\n            string=Case(\n                When(integer=1, then=Value('one')),\n                When(integer=2, then=Value('two')),\n                default=Value('other'),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 'one'), (2, 'two'), (3, 'other'), (2, 'two'), (3, 'other'), (3, 'other'), (4, 'other')],\n            transform=attrgetter('integer', 'string')\n        )\n\n    def test_update_without_default(self):\n        CaseTestModel.objects.update(\n            integer2=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_update_with_expression_as_value(self):\n        CaseTestModel.objects.update(\n            integer=Case(\n                When(integer=1, then=F('integer') + 1),\n                When(integer=2, then=F('integer') + 3),\n                default='integer',\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [('1', 2), ('2', 5), ('3', 3), ('2', 5), ('3', 3), ('3', 3), ('4', 4)],\n            transform=attrgetter('string', 'integer')\n        )\n\n    def test_update_with_expression_as_condition(self):\n        CaseTestModel.objects.update(\n            string=Case(\n                When(integer2=F('integer'), then=Value('equal')),\n                When(integer2=F('integer') + 1, then=Value('+1')),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],\n            transform=attrgetter('integer', 'string')\n        )\n\n    def test_update_with_join_in_condition_raise_field_error(self):\n        with self.assertRaisesMessage(FieldError, 'Joined field references are not permitted in this query'):\n            CaseTestModel.objects.update(\n                integer=Case(\n                    When(integer2=F('o2o_rel__integer') + 1, then=2),\n                    When(integer2=F('o2o_rel__integer'), then=3),\n                    output_field=models.IntegerField(),\n                ),\n            )\n\n    def test_update_with_join_in_predicate_raise_field_error(self):\n        with self.assertRaisesMessage(FieldError, 'Joined field references are not permitted in this query'):\n            CaseTestModel.objects.update(\n                string=Case(\n                    When(o2o_rel__integer=1, then=Value('one')),\n                    When(o2o_rel__integer=2, then=Value('two')),\n                    When(o2o_rel__integer=3, then=Value('three')),\n                    default=Value('other'),\n                    output_field=models.CharField(),\n                ),\n            )\n\n    def test_update_big_integer(self):\n        CaseTestModel.objects.update(\n            big_integer=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'big_integer')\n        )\n\n    def test_update_binary(self):\n        CaseTestModel.objects.update(\n            binary=Case(\n                When(integer=1, then=Value(b'one', output_field=models.BinaryField())),\n                When(integer=2, then=Value(b'two', output_field=models.BinaryField())),\n                default=Value(b'', output_field=models.BinaryField()),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, b'one'), (2, b'two'), (3, b''), (2, b'two'), (3, b''), (3, b''), (4, b'')],\n            transform=lambda o: (o.integer, bytes(o.binary))\n        )\n\n    def test_update_boolean(self):\n        CaseTestModel.objects.update(\n            boolean=Case(\n                When(integer=1, then=True),\n                When(integer=2, then=True),\n                default=False,\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, True), (2, True), (3, False), (2, True), (3, False), (3, False), (4, False)],\n            transform=attrgetter('integer', 'boolean')\n        )\n\n    def test_update_date(self):\n        CaseTestModel.objects.update(\n            date=Case(\n                When(integer=1, then=date(2015, 1, 1)),\n                When(integer=2, then=date(2015, 1, 2)),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, date(2015, 1, 1)), (2, date(2015, 1, 2)), (3, None), (2, date(2015, 1, 2)),\n                (3, None), (3, None), (4, None)\n            ],\n            transform=attrgetter('integer', 'date')\n        )\n\n    def test_update_date_time(self):\n        CaseTestModel.objects.update(\n            date_time=Case(\n                When(integer=1, then=datetime(2015, 1, 1)),\n                When(integer=2, then=datetime(2015, 1, 2)),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, datetime(2015, 1, 1)), (2, datetime(2015, 1, 2)), (3, None), (2, datetime(2015, 1, 2)),\n                (3, None), (3, None), (4, None)\n            ],\n            transform=attrgetter('integer', 'date_time')\n        )\n\n    def test_update_decimal(self):\n        CaseTestModel.objects.update(\n            decimal=Case(\n                When(integer=1, then=Decimal('1.1')),\n                When(integer=2, then=Decimal('2.2')),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, Decimal('1.1')),\n                (2, Decimal('2.2')),\n                (3, None),\n                (2, Decimal('2.2')),\n                (3, None),\n                (3, None),\n                (4, None)\n            ],\n            transform=attrgetter('integer', 'decimal')\n        )\n\n    def test_update_duration(self):\n        CaseTestModel.objects.update(\n            duration=Case(\n                \n                \n                When(integer=1, then=Value(timedelta(1), output_field=models.DurationField())),\n                When(integer=2, then=Value(timedelta(2), output_field=models.DurationField())),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, timedelta(1)), (2, timedelta(2)), (3, None), (2, timedelta(2)), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'duration')\n        )\n\n    def test_update_email(self):\n        CaseTestModel.objects.update(\n            email=Case(\n                When(integer=1, then=Value('1@example.com')),\n                When(integer=2, then=Value('2@example.com')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '1@example.com'), (2, '2@example.com'), (3, ''), (2, '2@example.com'), (3, ''), (3, ''), (4, '')],\n            transform=attrgetter('integer', 'email')\n        )\n\n    def test_update_file(self):\n        CaseTestModel.objects.update(\n            file=Case(\n                When(integer=1, then=Value('~/1')),\n                When(integer=2, then=Value('~/2')),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],\n            transform=lambda o: (o.integer, str(o.file))\n        )\n\n    def test_update_file_path(self):\n        CaseTestModel.objects.update(\n            file_path=Case(\n                When(integer=1, then=Value('~/1')),\n                When(integer=2, then=Value('~/2')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],\n            transform=attrgetter('integer', 'file_path')\n        )\n\n    def test_update_float(self):\n        CaseTestModel.objects.update(\n            float=Case(\n                When(integer=1, then=1.1),\n                When(integer=2, then=2.2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1.1), (2, 2.2), (3, None), (2, 2.2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'float')\n        )\n\n    @unittest.skipUnless(Image, \"Pillow not installed\")\n    def test_update_image(self):\n        CaseTestModel.objects.update(\n            image=Case(\n                When(integer=1, then=Value('~/1')),\n                When(integer=2, then=Value('~/2')),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],\n            transform=lambda o: (o.integer, str(o.image))\n        )\n\n    def test_update_generic_ip_address(self):\n        CaseTestModel.objects.update(\n            generic_ip_address=Case(\n                \n                When(integer=1, then=Value('1.1.1.1')),\n                When(integer=2, then=Value('2.2.2.2')),\n                output_field=models.GenericIPAddressField(),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '1.1.1.1'), (2, '2.2.2.2'), (3, None), (2, '2.2.2.2'), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'generic_ip_address')\n        )\n\n    def test_update_null_boolean(self):\n        CaseTestModel.objects.update(\n            null_boolean=Case(\n                When(integer=1, then=True),\n                When(integer=2, then=False),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, True), (2, False), (3, None), (2, False), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'null_boolean')\n        )\n\n    def test_update_positive_integer(self):\n        CaseTestModel.objects.update(\n            positive_integer=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'positive_integer')\n        )\n\n    def test_update_positive_small_integer(self):\n        CaseTestModel.objects.update(\n            positive_small_integer=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'positive_small_integer')\n        )\n\n    def test_update_slug(self):\n        CaseTestModel.objects.update(\n            slug=Case(\n                When(integer=1, then=Value('1')),\n                When(integer=2, then=Value('2')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '1'), (2, '2'), (3, ''), (2, '2'), (3, ''), (3, ''), (4, '')],\n            transform=attrgetter('integer', 'slug')\n        )\n\n    def test_update_small_integer(self):\n        CaseTestModel.objects.update(\n            small_integer=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'small_integer')\n        )\n\n    def test_update_string(self):\n        CaseTestModel.objects.filter(string__in=['1', '2']).update(\n            string=Case(\n                When(integer=1, then=Value('1', output_field=models.CharField())),\n                When(integer=2, then=Value('2', output_field=models.CharField())),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(string__in=['1', '2']).order_by('pk'),\n            [(1, '1'), (2, '2'), (2, '2')],\n            transform=attrgetter('integer', 'string')\n        )\n\n    def test_update_text(self):\n        CaseTestModel.objects.update(\n            text=Case(\n                When(integer=1, then=Value('1')),\n                When(integer=2, then=Value('2')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '1'), (2, '2'), (3, ''), (2, '2'), (3, ''), (3, ''), (4, '')],\n            transform=attrgetter('integer', 'text')\n        )\n\n    def test_update_time(self):\n        CaseTestModel.objects.update(\n            time=Case(\n                \n                \n                When(integer=1, then=Value(time(1), output_field=models.TimeField())),\n                When(integer=2, then=Value(time(2), output_field=models.TimeField())),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, time(1)), (2, time(2)), (3, None), (2, time(2)), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'time')\n        )\n\n    def test_update_url(self):\n        CaseTestModel.objects.update(\n            url=Case(\n                When(integer=1, then=Value('http://1.example.com/')),\n                When(integer=2, then=Value('http://2.example.com/')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, 'http://1.example.com/'), (2, 'http://2.example.com/'), (3, ''), (2, 'http://2.example.com/'),\n                (3, ''), (3, ''), (4, '')\n            ],\n            transform=attrgetter('integer', 'url')\n        )\n\n    def test_update_uuid(self):\n        CaseTestModel.objects.update(\n            uuid=Case(\n                \n                \n                When(integer=1, then=Value(\n                    UUID('11111111111111111111111111111111'),\n                    output_field=models.UUIDField(),\n                )),\n                When(integer=2, then=Value(\n                    UUID('22222222222222222222222222222222'),\n                    output_field=models.UUIDField(),\n                )),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, UUID('11111111111111111111111111111111')),\n                (2, UUID('22222222222222222222222222222222')),\n                (3, None),\n                (2, UUID('22222222222222222222222222222222')),\n                (3, None),\n                (3, None),\n                (4, None),\n            ],\n            transform=attrgetter('integer', 'uuid')\n        )\n\n    def test_update_fk(self):\n        obj1, obj2 = CaseTestModel.objects.all()[:2]\n\n        CaseTestModel.objects.update(\n            fk=Case(\n                When(integer=1, then=obj1.pk),\n                When(integer=2, then=obj2.pk),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, obj1.pk), (2, obj2.pk), (3, None), (2, obj2.pk), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'fk_id')\n        )\n\n    def test_lookup_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                test=Case(\n                    When(integer__lt=2, then=Value('less than 2')),\n                    When(integer__gt=2, then=Value('greater than 2')),\n                    default=Value('equal to 2'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [\n                (1, 'less than 2'), (2, 'equal to 2'), (3, 'greater than 2'), (2, 'equal to 2'), (3, 'greater than 2'),\n                (3, 'greater than 2'), (4, 'greater than 2')\n            ],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_lookup_different_fields(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                test=Case(\n                    When(integer=2, integer2=3, then=Value('when')),\n                    default=Value('default'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [\n                (1, 1, 'default'), (2, 3, 'when'), (3, 4, 'default'), (2, 2, 'default'), (3, 4, 'default'),\n                (3, 3, 'default'), (4, 5, 'default')\n            ],\n            transform=attrgetter('integer', 'integer2', 'test')\n        )\n\n    def test_combined_q_object(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                test=Case(\n                    When(Q(integer=2) | Q(integer2=3), then=Value('when')),\n                    default=Value('default'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [\n                (1, 1, 'default'), (2, 3, 'when'), (3, 4, 'default'), (2, 2, 'when'), (3, 4, 'default'),\n                (3, 3, 'when'), (4, 5, 'default')\n            ],\n            transform=attrgetter('integer', 'integer2', 'test')\n        )\n\n    def test_order_by_conditional_implicit(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer__lte=2).annotate(test=Case(\n                When(integer=1, then=2),\n                When(integer=2, then=1),\n                default=3,\n                output_field=models.IntegerField(),\n            )).order_by('test', 'pk'),\n            [(2, 1), (2, 1), (1, 2)],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_order_by_conditional_explicit(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer__lte=2).annotate(test=Case(\n                When(integer=1, then=2),\n                When(integer=2, then=1),\n                default=3,\n                output_field=models.IntegerField(),\n            )).order_by(F('test').asc(), 'pk'),\n            [(2, 1), (2, 1), (1, 2)],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_join_promotion(self):\n        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')\n        \n        \n        \n        \n        \n        \n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(pk=o.pk).annotate(\n                foo=Case(\n                    When(fk_rel__pk=1, then=2),\n                    default=3,\n                    output_field=models.IntegerField()\n                ),\n            ),\n            [(o, 3)],\n            lambda x: (x, x.foo)\n        )\n        \n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(pk=o.pk).annotate(\n                foo=Case(\n                    When(fk_rel__isnull=True, then=2),\n                    default=3,\n                    output_field=models.IntegerField()\n                ),\n            ),\n            [(o, 2)],\n            lambda x: (x, x.foo)\n        )\n\n    def test_join_promotion_multiple_annotations(self):\n        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')\n        \n        \n        \n        \n        \n        \n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(pk=o.pk).annotate(\n                foo=Case(\n                    When(fk_rel__pk=1, then=2),\n                    default=3,\n                    output_field=models.IntegerField()\n                ),\n                bar=Case(\n                    When(fk_rel__pk=1, then=4),\n                    default=5,\n                    output_field=models.IntegerField()\n                ),\n            ),\n            [(o, 3, 5)],\n            lambda x: (x, x.foo, x.bar)\n        )\n        \n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(pk=o.pk).annotate(\n                foo=Case(\n                    When(fk_rel__isnull=True, then=2),\n                    default=3,\n                    output_field=models.IntegerField()\n                ),\n                bar=Case(\n                    When(fk_rel__isnull=True, then=4),\n                    default=5,\n                    output_field=models.IntegerField()\n                ),\n            ),\n            [(o, 2, 4)],\n            lambda x: (x, x.foo, x.bar)\n        )\n\n    def test_m2m_exclude(self):\n        CaseTestModel.objects.create(integer=10, integer2=1, string='1')\n        qs = CaseTestModel.objects.values_list('id', 'integer').annotate(\n            cnt=models.Sum(\n                Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n                output_field=models.IntegerField()\n            ),\n        ).order_by('integer')\n        \n        \n        # fk_rel objects, except for integer=4 and integer=10 (created above).\n        \n        # integer=10 doesn't have any and this too generates 1 (instead of 0)\n        # as ~Q() also matches nulls.\n        self.assertQuerysetEqual(\n            qs,\n            [(1, 2), (2, 2), (2, 2), (3, 2), (3, 2), (3, 2), (4, 1), (10, 1)],\n            lambda x: x[1:]\n        )\n\n    def test_m2m_reuse(self):\n        CaseTestModel.objects.create(integer=10, integer2=1, string='1')\n        \n        \n        qs = CaseTestModel.objects.values_list('id', 'integer').annotate(\n            cnt=models.Sum(\n                Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n                output_field=models.IntegerField()\n            ),\n        ).annotate(\n            cnt2=models.Sum(\n                Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n                output_field=models.IntegerField()\n            ),\n        ).order_by('integer')\n        self.assertEqual(str(qs.query).count(' JOIN '), 1)\n        self.assertQuerysetEqual(\n            qs,\n            [(1, 2, 2), (2, 2, 2), (2, 2, 2), (3, 2, 2), (3, 2, 2), (3, 2, 2), (4, 1, 1), (10, 1, 1)],\n            lambda x: x[1:]\n        )\n\n\nclass CaseDocumentationExamples(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        Client.objects.create(\n            name='Jane Doe',\n            account_type=Client.REGULAR,\n            registered_on=date.today() - timedelta(days=36),\n        )\n        Client.objects.create(\n            name='James Smith',\n            account_type=Client.GOLD,\n            registered_on=date.today() - timedelta(days=5),\n        )\n        Client.objects.create(\n            name='Jack Black',\n            account_type=Client.PLATINUM,\n            registered_on=date.today() - timedelta(days=10 * 365),\n        )\n\n    def test_simple_example(self):\n        self.assertQuerysetEqual(\n            Client.objects.annotate(\n                discount=Case(\n                    When(account_type=Client.GOLD, then=Value('5%')),\n                    When(account_type=Client.PLATINUM, then=Value('10%')),\n                    default=Value('0%'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [('Jane Doe', '0%'), ('James Smith', '5%'), ('Jack Black', '10%')],\n            transform=attrgetter('name', 'discount')\n        )\n\n    def test_lookup_example(self):\n        a_month_ago = date.today() - timedelta(days=30)\n        a_year_ago = date.today() - timedelta(days=365)\n        self.assertQuerysetEqual(\n            Client.objects.annotate(\n                discount=Case(\n                    When(registered_on__lte=a_year_ago, then=Value('10%')),\n                    When(registered_on__lte=a_month_ago, then=Value('5%')),\n                    default=Value('0%'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [('Jane Doe', '5%'), ('James Smith', '0%'), ('Jack Black', '10%')],\n            transform=attrgetter('name', 'discount')\n        )\n\n    def test_conditional_update_example(self):\n        a_month_ago = date.today() - timedelta(days=30)\n        a_year_ago = date.today() - timedelta(days=365)\n        Client.objects.update(\n            account_type=Case(\n                When(registered_on__lte=a_year_ago, then=Value(Client.PLATINUM)),\n                When(registered_on__lte=a_month_ago, then=Value(Client.GOLD)),\n                default=Value(Client.REGULAR),\n            ),\n        )\n        self.assertQuerysetEqual(\n            Client.objects.all().order_by('pk'),\n            [('Jane Doe', 'G'), ('James Smith', 'R'), ('Jack Black', 'P')],\n            transform=attrgetter('name', 'account_type')\n        )\n\n    def test_conditional_aggregation_example(self):\n        Client.objects.create(\n            name='Jean Grey',\n            account_type=Client.REGULAR,\n            registered_on=date.today(),\n        )\n        Client.objects.create(\n            name='James Bond',\n            account_type=Client.PLATINUM,\n            registered_on=date.today(),\n        )\n        Client.objects.create(\n            name='Jane Porter',\n            account_type=Client.PLATINUM,\n            registered_on=date.today(),\n        )\n        self.assertEqual(\n            Client.objects.aggregate(\n                regular=models.Count('pk', filter=Q(account_type=Client.REGULAR)),\n                gold=models.Count('pk', filter=Q(account_type=Client.GOLD)),\n                platinum=models.Count('pk', filter=Q(account_type=Client.PLATINUM)),\n            ),\n            {'regular': 2, 'gold': 1, 'platinum': 3}\n        )\n        \n        self.assertEqual(\n            Client.objects.aggregate(\n                regular=models.Sum(Case(\n                    When(account_type=Client.REGULAR, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                gold=models.Sum(Case(\n                    When(account_type=Client.GOLD, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                platinum=models.Sum(Case(\n                    When(account_type=Client.PLATINUM, then=1),\n                    output_field=models.IntegerField(),\n                )),\n            ),\n            {'regular': 2, 'gold': 1, 'platinum': 3}\n        )\n\n    def test_filter_example(self):\n        a_month_ago = date.today() - timedelta(days=30)\n        a_year_ago = date.today() - timedelta(days=365)\n        self.assertQuerysetEqual(\n            Client.objects.filter(\n                registered_on__lte=Case(\n                    When(account_type=Client.GOLD, then=a_month_ago),\n                    When(account_type=Client.PLATINUM, then=a_year_ago),\n                ),\n            ),\n            [('Jack Black', 'P')],\n            transform=attrgetter('name', 'account_type')\n        )\n\n    def test_hash(self):\n        expression_1 = Case(\n            When(account_type__in=[Client.REGULAR, Client.GOLD], then=1),\n            default=2,\n            output_field=models.IntegerField(),\n        )\n        expression_2 = Case(\n            When(account_type__in=(Client.REGULAR, Client.GOLD), then=1),\n            default=2,\n            output_field=models.IntegerField(),\n        )\n        expression_3 = Case(When(account_type__in=[Client.REGULAR, Client.GOLD], then=1), default=2)\n        expression_4 = Case(When(account_type__in=[Client.PLATINUM, Client.GOLD], then=2), default=1)\n        self.assertEqual(hash(expression_1), hash(expression_2))\n        self.assertNotEqual(hash(expression_2), hash(expression_3))\n        self.assertNotEqual(hash(expression_1), hash(expression_4))\n        self.assertNotEqual(hash(expression_3), hash(expression_4))\n\n\nclass CaseWhenTests(SimpleTestCase):\n    def test_only_when_arguments(self):\n        msg = 'Positional arguments must all be When objects.'\n        with self.assertRaisesMessage(TypeError, msg):\n            Case(When(Q(pk__in=[])), object())\n\n    def test_invalid_when_constructor_args(self):\n        msg = '__init__() takes either a Q object or lookups as keyword arguments'\n        with self.assertRaisesMessage(TypeError, msg):\n            When(condition=object())\n        with self.assertRaisesMessage(TypeError, msg):\n            When()\n\n    def test_empty_q_object(self):\n        msg = \"An empty Q() can't be used as a When() condition.\"\n        with self.assertRaisesMessage(ValueError, msg):\n            When(Q(), then=Value(True))\n", "comments": "  group by oracle fails textfield binaryfield  see  24096     fails sqlite output field set explicitly    values containing timedeltas    fails postgresql output field set explicitly    fails sqlite output field set explicitly    values containing times    fails sqlite output field set explicitly    values containing uuids    testing     1  there object remote side fk rel       relation  if query used inner joins  join fk rel       would remove results  so  effect testing       promoting fk rel join left outer join     2  the default value 3 generated case expression     now 2 generated  fk rel null     testing     1  there object remote side fk rel       relation  if query used inner joins  join fk rel       would remove results  so  effect testing       promoting fk rel join left outer join     2  the default value 3 generated case expression     now 2 generated  fk rel null     the first 2 fk rel  integer 1  thus hits    default 2 case  the ones 2 result 2    fk rel objects  except integer 4 integer 10 (created above)     the integer 4 case one integer  thus result 1     integer 10 generates 1 (instead 0)     q() also matches nulls     need use values annotate oracle group    fields capable grouping     this example filter argument added  ", "content": "import unittest\nfrom datetime import date, datetime, time, timedelta\nfrom decimal import Decimal\nfrom operator import attrgetter, itemgetter\nfrom uuid import UUID\n\nfrom django.core.exceptions import FieldError\nfrom django.db import models\nfrom django.db.models import F, Max, Min, Q, Sum, Value\nfrom django.db.models.expressions import Case, When\nfrom django.test import SimpleTestCase, TestCase\n\nfrom .models import CaseTestModel, Client, FKCaseTestModel, O2OCaseTestModel\n\ntry:\n    from PIL import Image\nexcept ImportError:\n    Image = None\n\n\nclass CaseExpressionTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')\n        O2OCaseTestModel.objects.create(o2o=o, integer=1)\n        FKCaseTestModel.objects.create(fk=o, integer=1)\n\n        o = CaseTestModel.objects.create(integer=2, integer2=3, string='2')\n        O2OCaseTestModel.objects.create(o2o=o, integer=2)\n        FKCaseTestModel.objects.create(fk=o, integer=2)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n\n        o = CaseTestModel.objects.create(integer=3, integer2=4, string='3')\n        O2OCaseTestModel.objects.create(o2o=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=4)\n\n        o = CaseTestModel.objects.create(integer=2, integer2=2, string='2')\n        O2OCaseTestModel.objects.create(o2o=o, integer=2)\n        FKCaseTestModel.objects.create(fk=o, integer=2)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n\n        o = CaseTestModel.objects.create(integer=3, integer2=4, string='3')\n        O2OCaseTestModel.objects.create(o2o=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=4)\n\n        o = CaseTestModel.objects.create(integer=3, integer2=3, string='3')\n        O2OCaseTestModel.objects.create(o2o=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=3)\n        FKCaseTestModel.objects.create(fk=o, integer=4)\n\n        o = CaseTestModel.objects.create(integer=4, integer2=5, string='4')\n        O2OCaseTestModel.objects.create(o2o=o, integer=1)\n        FKCaseTestModel.objects.create(fk=o, integer=5)\n\n        # GROUP BY on Oracle fails with TextField/BinaryField; see #24096.\n        cls.non_lob_fields = [\n            f.name for f in CaseTestModel._meta.get_fields()\n            if not (f.is_relation and f.auto_created) and not isinstance(f, (models.BinaryField, models.TextField))\n        ]\n\n    def test_annotate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(test=Case(\n                When(integer=1, then=Value('one')),\n                When(integer=2, then=Value('two')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(1, 'one'), (2, 'two'), (3, 'other'), (2, 'two'), (3, 'other'), (3, 'other'), (4, 'other')],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_annotate_without_default(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(test=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_annotate_with_expression_as_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(f_test=Case(\n                When(integer=1, then=F('integer') + 1),\n                When(integer=2, then=F('integer') + 3),\n                default='integer',\n            )).order_by('pk'),\n            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 4)],\n            transform=attrgetter('integer', 'f_test')\n        )\n\n    def test_annotate_with_expression_as_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(f_test=Case(\n                When(integer2=F('integer'), then=Value('equal')),\n                When(integer2=F('integer') + 1, then=Value('+1')),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],\n            transform=attrgetter('integer', 'f_test')\n        )\n\n    def test_annotate_with_join_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(join_test=Case(\n                When(integer=1, then=F('o2o_rel__integer') + 1),\n                When(integer=2, then=F('o2o_rel__integer') + 3),\n                default='o2o_rel__integer',\n            )).order_by('pk'),\n            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 1)],\n            transform=attrgetter('integer', 'join_test')\n        )\n\n    def test_annotate_with_in_clause(self):\n        fk_rels = FKCaseTestModel.objects.filter(integer__in=[5])\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.only('pk', 'integer').annotate(in_test=Sum(Case(\n                When(fk_rel__in=fk_rels, then=F('fk_rel__integer')),\n                default=Value(0),\n            ))).order_by('pk'),\n            [(1, 0), (2, 0), (3, 0), (2, 0), (3, 0), (3, 0), (4, 5)],\n            transform=attrgetter('integer', 'in_test')\n        )\n\n    def test_annotate_with_join_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(join_test=Case(\n                When(integer2=F('o2o_rel__integer'), then=Value('equal')),\n                When(integer2=F('o2o_rel__integer') + 1, then=Value('+1')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, 'other')],\n            transform=attrgetter('integer', 'join_test')\n        )\n\n    def test_annotate_with_join_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(join_test=Case(\n                When(o2o_rel__integer=1, then=Value('one')),\n                When(o2o_rel__integer=2, then=Value('two')),\n                When(o2o_rel__integer=3, then=Value('three')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(1, 'one'), (2, 'two'), (3, 'three'), (2, 'two'), (3, 'three'), (3, 'three'), (4, 'one')],\n            transform=attrgetter('integer', 'join_test')\n        )\n\n    def test_annotate_with_annotation_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_plus_1=F('integer') + 1,\n                f_plus_3=F('integer') + 3,\n            ).annotate(\n                f_test=Case(\n                    When(integer=1, then='f_plus_1'),\n                    When(integer=2, then='f_plus_3'),\n                    default='integer',\n                ),\n            ).order_by('pk'),\n            [(1, 2), (2, 5), (3, 3), (2, 5), (3, 3), (3, 3), (4, 4)],\n            transform=attrgetter('integer', 'f_test')\n        )\n\n    def test_annotate_with_annotation_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_plus_1=F('integer') + 1,\n            ).annotate(\n                f_test=Case(\n                    When(integer2=F('integer'), then=Value('equal')),\n                    When(integer2=F('f_plus_1'), then=Value('+1')),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],\n            transform=attrgetter('integer', 'f_test')\n        )\n\n    def test_annotate_with_annotation_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_minus_2=F('integer') - 2,\n            ).annotate(\n                test=Case(\n                    When(f_minus_2=-1, then=Value('negative one')),\n                    When(f_minus_2=0, then=Value('zero')),\n                    When(f_minus_2=1, then=Value('one')),\n                    default=Value('other'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [(1, 'negative one'), (2, 'zero'), (3, 'one'), (2, 'zero'), (3, 'one'), (3, 'one'), (4, 'other')],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_annotate_with_aggregation_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                min=Min('fk_rel__integer'),\n                max=Max('fk_rel__integer'),\n            ).annotate(\n                test=Case(\n                    When(integer=2, then='min'),\n                    When(integer=3, then='max'),\n                ),\n            ).order_by('pk'),\n            [(1, None, 1, 1), (2, 2, 2, 3), (3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4), (3, 4, 3, 4), (4, None, 5, 5)],\n            transform=itemgetter('integer', 'test', 'min', 'max')\n        )\n\n    def test_annotate_with_aggregation_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                min=Min('fk_rel__integer'),\n                max=Max('fk_rel__integer'),\n            ).annotate(\n                test=Case(\n                    When(integer2=F('min'), then=Value('min')),\n                    When(integer2=F('max'), then=Value('max')),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [(1, 1, 'min'), (2, 3, 'max'), (3, 4, 'max'), (2, 2, 'min'), (3, 4, 'max'), (3, 3, 'min'), (4, 5, 'min')],\n            transform=itemgetter('integer', 'integer2', 'test')\n        )\n\n    def test_annotate_with_aggregation_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                max=Max('fk_rel__integer'),\n            ).annotate(\n                test=Case(\n                    When(max=3, then=Value('max = 3')),\n                    When(max=4, then=Value('max = 4')),\n                    default=Value(''),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [(1, 1, ''), (2, 3, 'max = 3'), (3, 4, 'max = 4'), (2, 3, 'max = 3'),\n             (3, 4, 'max = 4'), (3, 4, 'max = 4'), (4, 5, '')],\n            transform=itemgetter('integer', 'max', 'test')\n        )\n\n    def test_annotate_exclude(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(test=Case(\n                When(integer=1, then=Value('one')),\n                When(integer=2, then=Value('two')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).exclude(test='other').order_by('pk'),\n            [(1, 'one'), (2, 'two'), (2, 'two')],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_annotate_values_not_in_order_by(self):\n        self.assertEqual(\n            list(CaseTestModel.objects.annotate(test=Case(\n                When(integer=1, then=Value('one')),\n                When(integer=2, then=Value('two')),\n                When(integer=3, then=Value('three')),\n                default=Value('other'),\n                output_field=models.CharField(),\n            )).order_by('test').values_list('integer', flat=True)),\n            [1, 4, 3, 3, 3, 2, 2]\n        )\n\n    def test_annotate_with_empty_when(self):\n        objects = CaseTestModel.objects.annotate(\n            selected=Case(\n                When(pk__in=[], then=Value('selected')),\n                default=Value('not selected'), output_field=models.CharField()\n            )\n        )\n        self.assertEqual(len(objects), CaseTestModel.objects.count())\n        self.assertTrue(all(obj.selected == 'not selected' for obj in objects))\n\n    def test_combined_expression(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                test=Case(\n                    When(integer=1, then=2),\n                    When(integer=2, then=1),\n                    default=3,\n                    output_field=models.IntegerField(),\n                ) + 1,\n            ).order_by('pk'),\n            [(1, 3), (2, 2), (3, 4), (2, 2), (3, 4), (3, 4), (4, 4)],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_in_subquery(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(\n                pk__in=CaseTestModel.objects.annotate(\n                    test=Case(\n                        When(integer=F('integer2'), then='pk'),\n                        When(integer=4, then='pk'),\n                        output_field=models.IntegerField(),\n                    ),\n                ).values('test')).order_by('pk'),\n            [(1, 1), (2, 2), (3, 3), (4, 5)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_case_reuse(self):\n        SOME_CASE = Case(\n            When(pk=0, then=Value('0')),\n            default=Value('1'),\n            output_field=models.CharField(),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(somecase=SOME_CASE).order_by('pk'),\n            CaseTestModel.objects.annotate(somecase=SOME_CASE).order_by('pk').values_list('pk', 'somecase'),\n            lambda x: (x.pk, x.somecase)\n        )\n\n    def test_aggregate(self):\n        self.assertEqual(\n            CaseTestModel.objects.aggregate(\n                one=models.Sum(Case(\n                    When(integer=1, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                two=models.Sum(Case(\n                    When(integer=2, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                three=models.Sum(Case(\n                    When(integer=3, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                four=models.Sum(Case(\n                    When(integer=4, then=1),\n                    output_field=models.IntegerField(),\n                )),\n            ),\n            {'one': 1, 'two': 2, 'three': 3, 'four': 1}\n        )\n\n    def test_aggregate_with_expression_as_value(self):\n        self.assertEqual(\n            CaseTestModel.objects.aggregate(\n                one=models.Sum(Case(When(integer=1, then='integer'))),\n                two=models.Sum(Case(When(integer=2, then=F('integer') - 1))),\n                three=models.Sum(Case(When(integer=3, then=F('integer') + 1))),\n            ),\n            {'one': 1, 'two': 2, 'three': 12}\n        )\n\n    def test_aggregate_with_expression_as_condition(self):\n        self.assertEqual(\n            CaseTestModel.objects.aggregate(\n                equal=models.Sum(Case(\n                    When(integer2=F('integer'), then=1),\n                    output_field=models.IntegerField(),\n                )),\n                plus_one=models.Sum(Case(\n                    When(integer2=F('integer') + 1, then=1),\n                    output_field=models.IntegerField(),\n                )),\n            ),\n            {'equal': 3, 'plus_one': 4}\n        )\n\n    def test_filter(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(integer=2, then=3),\n                When(integer=3, then=4),\n                default=1,\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(1, 1), (2, 3), (3, 4), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_without_default(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(integer=2, then=3),\n                When(integer=3, then=4),\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(2, 3), (3, 4), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_expression_as_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(integer=2, then=F('integer') + 1),\n                When(integer=3, then=F('integer')),\n                default='integer',\n            )).order_by('pk'),\n            [(1, 1), (2, 3), (3, 3)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_expression_as_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(string=Case(\n                When(integer2=F('integer'), then=Value('2')),\n                When(integer2=F('integer') + 1, then=Value('3')),\n                output_field=models.CharField(),\n            )).order_by('pk'),\n            [(3, 4, '3'), (2, 2, '2'), (3, 4, '3')],\n            transform=attrgetter('integer', 'integer2', 'string')\n        )\n\n    def test_filter_with_join_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(integer=2, then=F('o2o_rel__integer') + 1),\n                When(integer=3, then=F('o2o_rel__integer')),\n                default='o2o_rel__integer',\n            )).order_by('pk'),\n            [(1, 1), (2, 3), (3, 3)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_join_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer=Case(\n                When(integer2=F('o2o_rel__integer') + 1, then=2),\n                When(integer2=F('o2o_rel__integer'), then=3),\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(2, 3), (3, 3)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_join_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer2=Case(\n                When(o2o_rel__integer=1, then=1),\n                When(o2o_rel__integer=2, then=3),\n                When(o2o_rel__integer=3, then=4),\n                output_field=models.IntegerField(),\n            )).order_by('pk'),\n            [(1, 1), (2, 3), (3, 4), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_annotation_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f=F('integer'),\n                f_plus_1=F('integer') + 1,\n            ).filter(\n                integer2=Case(\n                    When(integer=2, then='f_plus_1'),\n                    When(integer=3, then='f'),\n                ),\n            ).order_by('pk'),\n            [(2, 3), (3, 3)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_annotation_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_plus_1=F('integer') + 1,\n            ).filter(\n                integer=Case(\n                    When(integer2=F('integer'), then=2),\n                    When(integer2=F('f_plus_1'), then=3),\n                    output_field=models.IntegerField(),\n                ),\n            ).order_by('pk'),\n            [(3, 4), (2, 2), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_annotation_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                f_plus_1=F('integer') + 1,\n            ).filter(\n                integer2=Case(\n                    When(f_plus_1=3, then=3),\n                    When(f_plus_1=4, then=4),\n                    default=1,\n                    output_field=models.IntegerField(),\n                ),\n            ).order_by('pk'),\n            [(1, 1), (2, 3), (3, 4), (3, 4)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_filter_with_aggregation_in_value(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                min=Min('fk_rel__integer'),\n                max=Max('fk_rel__integer'),\n            ).filter(\n                integer2=Case(\n                    When(integer=2, then='min'),\n                    When(integer=3, then='max'),\n                ),\n            ).order_by('pk'),\n            [(3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4)],\n            transform=itemgetter('integer', 'integer2', 'min', 'max')\n        )\n\n    def test_filter_with_aggregation_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                min=Min('fk_rel__integer'),\n                max=Max('fk_rel__integer'),\n            ).filter(\n                integer=Case(\n                    When(integer2=F('min'), then=2),\n                    When(integer2=F('max'), then=3),\n                ),\n            ).order_by('pk'),\n            [(3, 4, 3, 4), (2, 2, 2, 3), (3, 4, 3, 4)],\n            transform=itemgetter('integer', 'integer2', 'min', 'max')\n        )\n\n    def test_filter_with_aggregation_in_predicate(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.values(*self.non_lob_fields).annotate(\n                max=Max('fk_rel__integer'),\n            ).filter(\n                integer=Case(\n                    When(max=3, then=2),\n                    When(max=4, then=3),\n                ),\n            ).order_by('pk'),\n            [(2, 3, 3), (3, 4, 4), (2, 2, 3), (3, 4, 4), (3, 3, 4)],\n            transform=itemgetter('integer', 'integer2', 'max')\n        )\n\n    def test_update(self):\n        CaseTestModel.objects.update(\n            string=Case(\n                When(integer=1, then=Value('one')),\n                When(integer=2, then=Value('two')),\n                default=Value('other'),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 'one'), (2, 'two'), (3, 'other'), (2, 'two'), (3, 'other'), (3, 'other'), (4, 'other')],\n            transform=attrgetter('integer', 'string')\n        )\n\n    def test_update_without_default(self):\n        CaseTestModel.objects.update(\n            integer2=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'integer2')\n        )\n\n    def test_update_with_expression_as_value(self):\n        CaseTestModel.objects.update(\n            integer=Case(\n                When(integer=1, then=F('integer') + 1),\n                When(integer=2, then=F('integer') + 3),\n                default='integer',\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [('1', 2), ('2', 5), ('3', 3), ('2', 5), ('3', 3), ('3', 3), ('4', 4)],\n            transform=attrgetter('string', 'integer')\n        )\n\n    def test_update_with_expression_as_condition(self):\n        CaseTestModel.objects.update(\n            string=Case(\n                When(integer2=F('integer'), then=Value('equal')),\n                When(integer2=F('integer') + 1, then=Value('+1')),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 'equal'), (2, '+1'), (3, '+1'), (2, 'equal'), (3, '+1'), (3, 'equal'), (4, '+1')],\n            transform=attrgetter('integer', 'string')\n        )\n\n    def test_update_with_join_in_condition_raise_field_error(self):\n        with self.assertRaisesMessage(FieldError, 'Joined field references are not permitted in this query'):\n            CaseTestModel.objects.update(\n                integer=Case(\n                    When(integer2=F('o2o_rel__integer') + 1, then=2),\n                    When(integer2=F('o2o_rel__integer'), then=3),\n                    output_field=models.IntegerField(),\n                ),\n            )\n\n    def test_update_with_join_in_predicate_raise_field_error(self):\n        with self.assertRaisesMessage(FieldError, 'Joined field references are not permitted in this query'):\n            CaseTestModel.objects.update(\n                string=Case(\n                    When(o2o_rel__integer=1, then=Value('one')),\n                    When(o2o_rel__integer=2, then=Value('two')),\n                    When(o2o_rel__integer=3, then=Value('three')),\n                    default=Value('other'),\n                    output_field=models.CharField(),\n                ),\n            )\n\n    def test_update_big_integer(self):\n        CaseTestModel.objects.update(\n            big_integer=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'big_integer')\n        )\n\n    def test_update_binary(self):\n        CaseTestModel.objects.update(\n            binary=Case(\n                When(integer=1, then=Value(b'one', output_field=models.BinaryField())),\n                When(integer=2, then=Value(b'two', output_field=models.BinaryField())),\n                default=Value(b'', output_field=models.BinaryField()),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, b'one'), (2, b'two'), (3, b''), (2, b'two'), (3, b''), (3, b''), (4, b'')],\n            transform=lambda o: (o.integer, bytes(o.binary))\n        )\n\n    def test_update_boolean(self):\n        CaseTestModel.objects.update(\n            boolean=Case(\n                When(integer=1, then=True),\n                When(integer=2, then=True),\n                default=False,\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, True), (2, True), (3, False), (2, True), (3, False), (3, False), (4, False)],\n            transform=attrgetter('integer', 'boolean')\n        )\n\n    def test_update_date(self):\n        CaseTestModel.objects.update(\n            date=Case(\n                When(integer=1, then=date(2015, 1, 1)),\n                When(integer=2, then=date(2015, 1, 2)),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, date(2015, 1, 1)), (2, date(2015, 1, 2)), (3, None), (2, date(2015, 1, 2)),\n                (3, None), (3, None), (4, None)\n            ],\n            transform=attrgetter('integer', 'date')\n        )\n\n    def test_update_date_time(self):\n        CaseTestModel.objects.update(\n            date_time=Case(\n                When(integer=1, then=datetime(2015, 1, 1)),\n                When(integer=2, then=datetime(2015, 1, 2)),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, datetime(2015, 1, 1)), (2, datetime(2015, 1, 2)), (3, None), (2, datetime(2015, 1, 2)),\n                (3, None), (3, None), (4, None)\n            ],\n            transform=attrgetter('integer', 'date_time')\n        )\n\n    def test_update_decimal(self):\n        CaseTestModel.objects.update(\n            decimal=Case(\n                When(integer=1, then=Decimal('1.1')),\n                When(integer=2, then=Decimal('2.2')),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, Decimal('1.1')),\n                (2, Decimal('2.2')),\n                (3, None),\n                (2, Decimal('2.2')),\n                (3, None),\n                (3, None),\n                (4, None)\n            ],\n            transform=attrgetter('integer', 'decimal')\n        )\n\n    def test_update_duration(self):\n        CaseTestModel.objects.update(\n            duration=Case(\n                # fails on sqlite if output_field is not set explicitly on all\n                # Values containing timedeltas\n                When(integer=1, then=Value(timedelta(1), output_field=models.DurationField())),\n                When(integer=2, then=Value(timedelta(2), output_field=models.DurationField())),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, timedelta(1)), (2, timedelta(2)), (3, None), (2, timedelta(2)), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'duration')\n        )\n\n    def test_update_email(self):\n        CaseTestModel.objects.update(\n            email=Case(\n                When(integer=1, then=Value('1@example.com')),\n                When(integer=2, then=Value('2@example.com')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '1@example.com'), (2, '2@example.com'), (3, ''), (2, '2@example.com'), (3, ''), (3, ''), (4, '')],\n            transform=attrgetter('integer', 'email')\n        )\n\n    def test_update_file(self):\n        CaseTestModel.objects.update(\n            file=Case(\n                When(integer=1, then=Value('~/1')),\n                When(integer=2, then=Value('~/2')),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],\n            transform=lambda o: (o.integer, str(o.file))\n        )\n\n    def test_update_file_path(self):\n        CaseTestModel.objects.update(\n            file_path=Case(\n                When(integer=1, then=Value('~/1')),\n                When(integer=2, then=Value('~/2')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],\n            transform=attrgetter('integer', 'file_path')\n        )\n\n    def test_update_float(self):\n        CaseTestModel.objects.update(\n            float=Case(\n                When(integer=1, then=1.1),\n                When(integer=2, then=2.2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1.1), (2, 2.2), (3, None), (2, 2.2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'float')\n        )\n\n    @unittest.skipUnless(Image, \"Pillow not installed\")\n    def test_update_image(self):\n        CaseTestModel.objects.update(\n            image=Case(\n                When(integer=1, then=Value('~/1')),\n                When(integer=2, then=Value('~/2')),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '~/1'), (2, '~/2'), (3, ''), (2, '~/2'), (3, ''), (3, ''), (4, '')],\n            transform=lambda o: (o.integer, str(o.image))\n        )\n\n    def test_update_generic_ip_address(self):\n        CaseTestModel.objects.update(\n            generic_ip_address=Case(\n                # fails on postgresql if output_field is not set explicitly\n                When(integer=1, then=Value('1.1.1.1')),\n                When(integer=2, then=Value('2.2.2.2')),\n                output_field=models.GenericIPAddressField(),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '1.1.1.1'), (2, '2.2.2.2'), (3, None), (2, '2.2.2.2'), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'generic_ip_address')\n        )\n\n    def test_update_null_boolean(self):\n        CaseTestModel.objects.update(\n            null_boolean=Case(\n                When(integer=1, then=True),\n                When(integer=2, then=False),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, True), (2, False), (3, None), (2, False), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'null_boolean')\n        )\n\n    def test_update_positive_integer(self):\n        CaseTestModel.objects.update(\n            positive_integer=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'positive_integer')\n        )\n\n    def test_update_positive_small_integer(self):\n        CaseTestModel.objects.update(\n            positive_small_integer=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'positive_small_integer')\n        )\n\n    def test_update_slug(self):\n        CaseTestModel.objects.update(\n            slug=Case(\n                When(integer=1, then=Value('1')),\n                When(integer=2, then=Value('2')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '1'), (2, '2'), (3, ''), (2, '2'), (3, ''), (3, ''), (4, '')],\n            transform=attrgetter('integer', 'slug')\n        )\n\n    def test_update_small_integer(self):\n        CaseTestModel.objects.update(\n            small_integer=Case(\n                When(integer=1, then=1),\n                When(integer=2, then=2),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, 1), (2, 2), (3, None), (2, 2), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'small_integer')\n        )\n\n    def test_update_string(self):\n        CaseTestModel.objects.filter(string__in=['1', '2']).update(\n            string=Case(\n                When(integer=1, then=Value('1', output_field=models.CharField())),\n                When(integer=2, then=Value('2', output_field=models.CharField())),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(string__in=['1', '2']).order_by('pk'),\n            [(1, '1'), (2, '2'), (2, '2')],\n            transform=attrgetter('integer', 'string')\n        )\n\n    def test_update_text(self):\n        CaseTestModel.objects.update(\n            text=Case(\n                When(integer=1, then=Value('1')),\n                When(integer=2, then=Value('2')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, '1'), (2, '2'), (3, ''), (2, '2'), (3, ''), (3, ''), (4, '')],\n            transform=attrgetter('integer', 'text')\n        )\n\n    def test_update_time(self):\n        CaseTestModel.objects.update(\n            time=Case(\n                # fails on sqlite if output_field is not set explicitly on all\n                # Values containing times\n                When(integer=1, then=Value(time(1), output_field=models.TimeField())),\n                When(integer=2, then=Value(time(2), output_field=models.TimeField())),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, time(1)), (2, time(2)), (3, None), (2, time(2)), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'time')\n        )\n\n    def test_update_url(self):\n        CaseTestModel.objects.update(\n            url=Case(\n                When(integer=1, then=Value('http://1.example.com/')),\n                When(integer=2, then=Value('http://2.example.com/')),\n                default=Value(''),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, 'http://1.example.com/'), (2, 'http://2.example.com/'), (3, ''), (2, 'http://2.example.com/'),\n                (3, ''), (3, ''), (4, '')\n            ],\n            transform=attrgetter('integer', 'url')\n        )\n\n    def test_update_uuid(self):\n        CaseTestModel.objects.update(\n            uuid=Case(\n                # fails on sqlite if output_field is not set explicitly on all\n                # Values containing UUIDs\n                When(integer=1, then=Value(\n                    UUID('11111111111111111111111111111111'),\n                    output_field=models.UUIDField(),\n                )),\n                When(integer=2, then=Value(\n                    UUID('22222222222222222222222222222222'),\n                    output_field=models.UUIDField(),\n                )),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [\n                (1, UUID('11111111111111111111111111111111')),\n                (2, UUID('22222222222222222222222222222222')),\n                (3, None),\n                (2, UUID('22222222222222222222222222222222')),\n                (3, None),\n                (3, None),\n                (4, None),\n            ],\n            transform=attrgetter('integer', 'uuid')\n        )\n\n    def test_update_fk(self):\n        obj1, obj2 = CaseTestModel.objects.all()[:2]\n\n        CaseTestModel.objects.update(\n            fk=Case(\n                When(integer=1, then=obj1.pk),\n                When(integer=2, then=obj2.pk),\n            ),\n        )\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.all().order_by('pk'),\n            [(1, obj1.pk), (2, obj2.pk), (3, None), (2, obj2.pk), (3, None), (3, None), (4, None)],\n            transform=attrgetter('integer', 'fk_id')\n        )\n\n    def test_lookup_in_condition(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                test=Case(\n                    When(integer__lt=2, then=Value('less than 2')),\n                    When(integer__gt=2, then=Value('greater than 2')),\n                    default=Value('equal to 2'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [\n                (1, 'less than 2'), (2, 'equal to 2'), (3, 'greater than 2'), (2, 'equal to 2'), (3, 'greater than 2'),\n                (3, 'greater than 2'), (4, 'greater than 2')\n            ],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_lookup_different_fields(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                test=Case(\n                    When(integer=2, integer2=3, then=Value('when')),\n                    default=Value('default'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [\n                (1, 1, 'default'), (2, 3, 'when'), (3, 4, 'default'), (2, 2, 'default'), (3, 4, 'default'),\n                (3, 3, 'default'), (4, 5, 'default')\n            ],\n            transform=attrgetter('integer', 'integer2', 'test')\n        )\n\n    def test_combined_q_object(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.annotate(\n                test=Case(\n                    When(Q(integer=2) | Q(integer2=3), then=Value('when')),\n                    default=Value('default'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [\n                (1, 1, 'default'), (2, 3, 'when'), (3, 4, 'default'), (2, 2, 'when'), (3, 4, 'default'),\n                (3, 3, 'when'), (4, 5, 'default')\n            ],\n            transform=attrgetter('integer', 'integer2', 'test')\n        )\n\n    def test_order_by_conditional_implicit(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer__lte=2).annotate(test=Case(\n                When(integer=1, then=2),\n                When(integer=2, then=1),\n                default=3,\n                output_field=models.IntegerField(),\n            )).order_by('test', 'pk'),\n            [(2, 1), (2, 1), (1, 2)],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_order_by_conditional_explicit(self):\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(integer__lte=2).annotate(test=Case(\n                When(integer=1, then=2),\n                When(integer=2, then=1),\n                default=3,\n                output_field=models.IntegerField(),\n            )).order_by(F('test').asc(), 'pk'),\n            [(2, 1), (2, 1), (1, 2)],\n            transform=attrgetter('integer', 'test')\n        )\n\n    def test_join_promotion(self):\n        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')\n        # Testing that:\n        # 1. There isn't any object on the remote side of the fk_rel\n        #    relation. If the query used inner joins, then the join to fk_rel\n        #    would remove o from the results. So, in effect we are testing that\n        #    we are promoting the fk_rel join to a left outer join here.\n        # 2. The default value of 3 is generated for the case expression.\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(pk=o.pk).annotate(\n                foo=Case(\n                    When(fk_rel__pk=1, then=2),\n                    default=3,\n                    output_field=models.IntegerField()\n                ),\n            ),\n            [(o, 3)],\n            lambda x: (x, x.foo)\n        )\n        # Now 2 should be generated, as the fk_rel is null.\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(pk=o.pk).annotate(\n                foo=Case(\n                    When(fk_rel__isnull=True, then=2),\n                    default=3,\n                    output_field=models.IntegerField()\n                ),\n            ),\n            [(o, 2)],\n            lambda x: (x, x.foo)\n        )\n\n    def test_join_promotion_multiple_annotations(self):\n        o = CaseTestModel.objects.create(integer=1, integer2=1, string='1')\n        # Testing that:\n        # 1. There isn't any object on the remote side of the fk_rel\n        #    relation. If the query used inner joins, then the join to fk_rel\n        #    would remove o from the results. So, in effect we are testing that\n        #    we are promoting the fk_rel join to a left outer join here.\n        # 2. The default value of 3 is generated for the case expression.\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(pk=o.pk).annotate(\n                foo=Case(\n                    When(fk_rel__pk=1, then=2),\n                    default=3,\n                    output_field=models.IntegerField()\n                ),\n                bar=Case(\n                    When(fk_rel__pk=1, then=4),\n                    default=5,\n                    output_field=models.IntegerField()\n                ),\n            ),\n            [(o, 3, 5)],\n            lambda x: (x, x.foo, x.bar)\n        )\n        # Now 2 should be generated, as the fk_rel is null.\n        self.assertQuerysetEqual(\n            CaseTestModel.objects.filter(pk=o.pk).annotate(\n                foo=Case(\n                    When(fk_rel__isnull=True, then=2),\n                    default=3,\n                    output_field=models.IntegerField()\n                ),\n                bar=Case(\n                    When(fk_rel__isnull=True, then=4),\n                    default=5,\n                    output_field=models.IntegerField()\n                ),\n            ),\n            [(o, 2, 4)],\n            lambda x: (x, x.foo, x.bar)\n        )\n\n    def test_m2m_exclude(self):\n        CaseTestModel.objects.create(integer=10, integer2=1, string='1')\n        qs = CaseTestModel.objects.values_list('id', 'integer').annotate(\n            cnt=models.Sum(\n                Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n                output_field=models.IntegerField()\n            ),\n        ).order_by('integer')\n        # The first o has 2 as its fk_rel__integer=1, thus it hits the\n        # default=2 case. The other ones have 2 as the result as they have 2\n        # fk_rel objects, except for integer=4 and integer=10 (created above).\n        # The integer=4 case has one integer, thus the result is 1, and\n        # integer=10 doesn't have any and this too generates 1 (instead of 0)\n        # as ~Q() also matches nulls.\n        self.assertQuerysetEqual(\n            qs,\n            [(1, 2), (2, 2), (2, 2), (3, 2), (3, 2), (3, 2), (4, 1), (10, 1)],\n            lambda x: x[1:]\n        )\n\n    def test_m2m_reuse(self):\n        CaseTestModel.objects.create(integer=10, integer2=1, string='1')\n        # Need to use values before annotate so that Oracle will not group\n        # by fields it isn't capable of grouping by.\n        qs = CaseTestModel.objects.values_list('id', 'integer').annotate(\n            cnt=models.Sum(\n                Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n                output_field=models.IntegerField()\n            ),\n        ).annotate(\n            cnt2=models.Sum(\n                Case(When(~Q(fk_rel__integer=1), then=1), default=2),\n                output_field=models.IntegerField()\n            ),\n        ).order_by('integer')\n        self.assertEqual(str(qs.query).count(' JOIN '), 1)\n        self.assertQuerysetEqual(\n            qs,\n            [(1, 2, 2), (2, 2, 2), (2, 2, 2), (3, 2, 2), (3, 2, 2), (3, 2, 2), (4, 1, 1), (10, 1, 1)],\n            lambda x: x[1:]\n        )\n\n\nclass CaseDocumentationExamples(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        Client.objects.create(\n            name='Jane Doe',\n            account_type=Client.REGULAR,\n            registered_on=date.today() - timedelta(days=36),\n        )\n        Client.objects.create(\n            name='James Smith',\n            account_type=Client.GOLD,\n            registered_on=date.today() - timedelta(days=5),\n        )\n        Client.objects.create(\n            name='Jack Black',\n            account_type=Client.PLATINUM,\n            registered_on=date.today() - timedelta(days=10 * 365),\n        )\n\n    def test_simple_example(self):\n        self.assertQuerysetEqual(\n            Client.objects.annotate(\n                discount=Case(\n                    When(account_type=Client.GOLD, then=Value('5%')),\n                    When(account_type=Client.PLATINUM, then=Value('10%')),\n                    default=Value('0%'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [('Jane Doe', '0%'), ('James Smith', '5%'), ('Jack Black', '10%')],\n            transform=attrgetter('name', 'discount')\n        )\n\n    def test_lookup_example(self):\n        a_month_ago = date.today() - timedelta(days=30)\n        a_year_ago = date.today() - timedelta(days=365)\n        self.assertQuerysetEqual(\n            Client.objects.annotate(\n                discount=Case(\n                    When(registered_on__lte=a_year_ago, then=Value('10%')),\n                    When(registered_on__lte=a_month_ago, then=Value('5%')),\n                    default=Value('0%'),\n                    output_field=models.CharField(),\n                ),\n            ).order_by('pk'),\n            [('Jane Doe', '5%'), ('James Smith', '0%'), ('Jack Black', '10%')],\n            transform=attrgetter('name', 'discount')\n        )\n\n    def test_conditional_update_example(self):\n        a_month_ago = date.today() - timedelta(days=30)\n        a_year_ago = date.today() - timedelta(days=365)\n        Client.objects.update(\n            account_type=Case(\n                When(registered_on__lte=a_year_ago, then=Value(Client.PLATINUM)),\n                When(registered_on__lte=a_month_ago, then=Value(Client.GOLD)),\n                default=Value(Client.REGULAR),\n            ),\n        )\n        self.assertQuerysetEqual(\n            Client.objects.all().order_by('pk'),\n            [('Jane Doe', 'G'), ('James Smith', 'R'), ('Jack Black', 'P')],\n            transform=attrgetter('name', 'account_type')\n        )\n\n    def test_conditional_aggregation_example(self):\n        Client.objects.create(\n            name='Jean Grey',\n            account_type=Client.REGULAR,\n            registered_on=date.today(),\n        )\n        Client.objects.create(\n            name='James Bond',\n            account_type=Client.PLATINUM,\n            registered_on=date.today(),\n        )\n        Client.objects.create(\n            name='Jane Porter',\n            account_type=Client.PLATINUM,\n            registered_on=date.today(),\n        )\n        self.assertEqual(\n            Client.objects.aggregate(\n                regular=models.Count('pk', filter=Q(account_type=Client.REGULAR)),\n                gold=models.Count('pk', filter=Q(account_type=Client.GOLD)),\n                platinum=models.Count('pk', filter=Q(account_type=Client.PLATINUM)),\n            ),\n            {'regular': 2, 'gold': 1, 'platinum': 3}\n        )\n        # This was the example before the filter argument was added.\n        self.assertEqual(\n            Client.objects.aggregate(\n                regular=models.Sum(Case(\n                    When(account_type=Client.REGULAR, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                gold=models.Sum(Case(\n                    When(account_type=Client.GOLD, then=1),\n                    output_field=models.IntegerField(),\n                )),\n                platinum=models.Sum(Case(\n                    When(account_type=Client.PLATINUM, then=1),\n                    output_field=models.IntegerField(),\n                )),\n            ),\n            {'regular': 2, 'gold': 1, 'platinum': 3}\n        )\n\n    def test_filter_example(self):\n        a_month_ago = date.today() - timedelta(days=30)\n        a_year_ago = date.today() - timedelta(days=365)\n        self.assertQuerysetEqual(\n            Client.objects.filter(\n                registered_on__lte=Case(\n                    When(account_type=Client.GOLD, then=a_month_ago),\n                    When(account_type=Client.PLATINUM, then=a_year_ago),\n                ),\n            ),\n            [('Jack Black', 'P')],\n            transform=attrgetter('name', 'account_type')\n        )\n\n    def test_hash(self):\n        expression_1 = Case(\n            When(account_type__in=[Client.REGULAR, Client.GOLD], then=1),\n            default=2,\n            output_field=models.IntegerField(),\n        )\n        expression_2 = Case(\n            When(account_type__in=(Client.REGULAR, Client.GOLD), then=1),\n            default=2,\n            output_field=models.IntegerField(),\n        )\n        expression_3 = Case(When(account_type__in=[Client.REGULAR, Client.GOLD], then=1), default=2)\n        expression_4 = Case(When(account_type__in=[Client.PLATINUM, Client.GOLD], then=2), default=1)\n        self.assertEqual(hash(expression_1), hash(expression_2))\n        self.assertNotEqual(hash(expression_2), hash(expression_3))\n        self.assertNotEqual(hash(expression_1), hash(expression_4))\n        self.assertNotEqual(hash(expression_3), hash(expression_4))\n\n\nclass CaseWhenTests(SimpleTestCase):\n    def test_only_when_arguments(self):\n        msg = 'Positional arguments must all be When objects.'\n        with self.assertRaisesMessage(TypeError, msg):\n            Case(When(Q(pk__in=[])), object())\n\n    def test_invalid_when_constructor_args(self):\n        msg = '__init__() takes either a Q object or lookups as keyword arguments'\n        with self.assertRaisesMessage(TypeError, msg):\n            When(condition=object())\n        with self.assertRaisesMessage(TypeError, msg):\n            When()\n\n    def test_empty_q_object(self):\n        msg = \"An empty Q() can't be used as a When() condition.\"\n        with self.assertRaisesMessage(ValueError, msg):\n            When(Q(), then=Value(True))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "c99d4d42cb4300702106d8827eb5ce89", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/expressions_case/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}