{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote_plus\n\n\nclass YnetIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.+?\\.)?ynet\\.co\\.il/(?:.+?/)?0,7340,(?P<id>L(?:-[0-9]+)+),00\\.html'\n    _TESTS = [\n        {\n            'url': 'http://hot.ynet.co.il/home/0,7340,L-11659-99244,00.html',\n            'info_dict': {\n                'id': 'L-11659-99244',\n                'ext': 'flv',\n                'title': '\u05d0\u05d9\u05e9 \u05dc\u05d0 \u05d9\u05d5\u05d3\u05e2 \u05de\u05d0\u05d9\u05e4\u05d4 \u05d1\u05d0\u05e0\u05d5',\n                'thumbnail': r're:^https?://.*\\.jpg',\n            }\n        }, {\n            'url': 'http://hot.ynet.co.il/home/0,7340,L-8859-84418,00.html',\n            'info_dict': {\n                'id': 'L-8859-84418',\n                'ext': 'flv',\n                'title': \"\u05e6\u05e4\u05d5: \u05d4\u05e0\u05e9\u05d9\u05e7\u05d4 \u05d4\u05dc\u05d5\u05d4\u05d8\u05ea \u05e9\u05dc \u05ea\u05d5\u05e8\u05d2\u05d9' \u05d5\u05d9\u05d5\u05dc\u05d9\u05d4 \u05e4\u05dc\u05d5\u05d8\u05e7\u05d9\u05df\",\n                'thumbnail': r're:^https?://.*\\.jpg',\n            }\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        content = compat_urllib_parse_unquote_plus(self._og_search_video_url(webpage))\n        config = json.loads(self._search_regex(r'config=({.+?})$', content, 'video config'))\n        f4m_url = config['clip']['url']\n        title = self._og_search_title(webpage)\n        m = re.search(r'ynet - HOT -- ([\"\\']+)(?P<title>.+?)\\1', title)\n        if m:\n            title = m.group('title')\n        formats = self._extract_f4m_formats(f4m_url, video_id)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote_plus\n\n\nclass YnetIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:.+?\\.)?ynet\\.co\\.il/(?:.+?/)?0,7340,(?P<id>L(?:-[0-9]+)+),00\\.html'\n    _TESTS = [\n        {\n            'url': 'http://hot.ynet.co.il/home/0,7340,L-11659-99244,00.html',\n            'info_dict': {\n                'id': 'L-11659-99244',\n                'ext': 'flv',\n                'title': '\u05d0\u05d9\u05e9 \u05dc\u05d0 \u05d9\u05d5\u05d3\u05e2 \u05de\u05d0\u05d9\u05e4\u05d4 \u05d1\u05d0\u05e0\u05d5',\n                'thumbnail': r're:^https?://.*\\.jpg',\n            }\n        }, {\n            'url': 'http://hot.ynet.co.il/home/0,7340,L-8859-84418,00.html',\n            'info_dict': {\n                'id': 'L-8859-84418',\n                'ext': 'flv',\n                'title': \"\u05e6\u05e4\u05d5: \u05d4\u05e0\u05e9\u05d9\u05e7\u05d4 \u05d4\u05dc\u05d5\u05d4\u05d8\u05ea \u05e9\u05dc \u05ea\u05d5\u05e8\u05d2\u05d9' \u05d5\u05d9\u05d5\u05dc\u05d9\u05d4 \u05e4\u05dc\u05d5\u05d8\u05e7\u05d9\u05df\",\n                'thumbnail': r're:^https?://.*\\.jpg',\n            }\n        }\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        content = compat_urllib_parse_unquote_plus(self._og_search_video_url(webpage))\n        config = json.loads(self._search_regex(r'config=({.+?})$', content, 'video config'))\n        f4m_url = config['clip']['url']\n        title = self._og_search_title(webpage)\n        m = re.search(r'ynet - HOT -- ([\"\\']+)(?P<title>.+?)\\1', title)\n        if m:\n            title = m.group('title')\n        formats = self._extract_f4m_formats(f4m_url, video_id)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ynet.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ynet.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}