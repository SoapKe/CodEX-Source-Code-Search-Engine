{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_age_limit,\n    parse_duration,\n)\n\n\nclass NRKBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['NO']\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = self._download_json(\n            'http://%s/mediaelement/%s' % (self._API_HOST, video_id),\n            video_id, 'Downloading mediaelement JSON')\n\n        title = data.get('fullTitle') or data.get('mainTitle') or data['title']\n        video_id = data.get('id') or video_id\n\n        entries = []\n\n        conviva = data.get('convivaStatistics') or {}\n        live = (data.get('mediaElementType') == 'Live' or\n                data.get('isLive') is True or conviva.get('isLive'))\n\n        def make_title(t):\n            return self._live_title(t) if live else t\n\n        media_assets = data.get('mediaAssets')\n        if media_assets and isinstance(media_assets, list):\n            def video_id_and_title(idx):\n                return ((video_id, title) if len(media_assets) == 1\n                        else ('%s-%d' % (video_id, idx), '%s (Part %d)' % (title, idx)))\n            for num, asset in enumerate(media_assets, 1):\n                asset_url = asset.get('url')\n                if not asset_url:\n                    continue\n                formats = self._extract_akamai_formats(asset_url, video_id)\n                if not formats:\n                    continue\n                self._sort_formats(formats)\n\n                \n                for f in formats:\n                    extra_param = f.get('extra_param_to_segment_url')\n                    if extra_param and 'hdcore' in extra_param:\n                        del f['extra_param_to_segment_url']\n\n                entry_id, entry_title = video_id_and_title(num)\n                duration = parse_duration(asset.get('duration'))\n                subtitles = {}\n                for subtitle in ('webVtt', 'timedText'):\n                    subtitle_url = asset.get('%sSubtitlesUrl' % subtitle)\n                    if subtitle_url:\n                        subtitles.setdefault('no', []).append({\n                            'url': compat_urllib_parse_unquote(subtitle_url)\n                        })\n                entries.append({\n                    'id': asset.get('carrierId') or entry_id,\n                    'title': make_title(entry_title),\n                    'duration': duration,\n                    'subtitles': subtitles,\n                    'formats': formats,\n                })\n\n        if not entries:\n            media_url = data.get('mediaUrl')\n            if media_url:\n                formats = self._extract_akamai_formats(media_url, video_id)\n                self._sort_formats(formats)\n                duration = parse_duration(data.get('duration'))\n                entries = [{\n                    'id': video_id,\n                    'title': make_title(title),\n                    'duration': duration,\n                    'formats': formats,\n                }]\n\n        if not entries:\n            MESSAGES = {\n                'ProgramRightsAreNotReady': 'Du kan dessverre ikke se eller h\u00f8re programmet',\n                'ProgramRightsHasExpired': 'Programmet har g\u00e5tt ut',\n                'ProgramIsGeoBlocked': 'NRK har ikke rettigheter til \u00e5 vise dette programmet utenfor Norge',\n            }\n            message_type = data.get('messageType', '')\n            \n            if 'IsGeoBlocked' in message_type:\n                self.raise_geo_restricted(\n                    msg=MESSAGES.get('ProgramIsGeoBlocked'),\n                    countries=self._GEO_COUNTRIES)\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, MESSAGES.get(\n                    message_type, message_type)),\n                expected=True)\n\n        series = conviva.get('seriesName') or data.get('seriesTitle')\n        episode = conviva.get('episodeName') or data.get('episodeNumberOrDate')\n\n        season_number = None\n        episode_number = None\n        if data.get('mediaElementType') == 'Episode':\n            _season_episode = data.get('scoresStatistics', {}).get('springStreamStream') or \\\n                data.get('relativeOriginUrl', '')\n            EPISODENUM_RE = [\n                r'/s(?P<season>\\d{,2})e(?P<episode>\\d{,2})\\.',\n                r'/sesong-(?P<season>\\d{,2})/episode-(?P<episode>\\d{,2})',\n            ]\n            season_number = int_or_none(self._search_regex(\n                EPISODENUM_RE, _season_episode, 'season number',\n                default=None, group='season'))\n            episode_number = int_or_none(self._search_regex(\n                EPISODENUM_RE, _season_episode, 'episode number',\n                default=None, group='episode'))\n\n        thumbnails = None\n        images = data.get('images')\n        if images and isinstance(images, dict):\n            web_images = images.get('webImages')\n            if isinstance(web_images, list):\n                thumbnails = [{\n                    'url': image['imageUrl'],\n                    'width': int_or_none(image.get('width')),\n                    'height': int_or_none(image.get('height')),\n                } for image in web_images if image.get('imageUrl')]\n\n        description = data.get('description')\n        category = data.get('mediaAnalytics', {}).get('category')\n\n        common_info = {\n            'description': description,\n            'series': series,\n            'episode': episode,\n            'season_number': season_number,\n            'episode_number': episode_number,\n            'categories': [category] if category else None,\n            'age_limit': parse_age_limit(data.get('legalAge')),\n            'thumbnails': thumbnails,\n        }\n\n        vcodec = 'none' if data.get('mediaType') == 'Audio' else None\n\n        for entry in entries:\n            entry.update(common_info)\n            for f in entry['formats']:\n                f['vcodec'] = vcodec\n\n        points = data.get('shortIndexPoints')\n        if isinstance(points, list):\n            chapters = []\n            for next_num, point in enumerate(points, start=1):\n                if not isinstance(point, dict):\n                    continue\n                start_time = parse_duration(point.get('startPoint'))\n                if start_time is None:\n                    continue\n                end_time = parse_duration(\n                    data.get('duration')\n                    if next_num == len(points)\n                    else points[next_num].get('startPoint'))\n                if end_time is None:\n                    continue\n                chapters.append({\n                    'start_time': start_time,\n                    'end_time': end_time,\n                    'title': point.get('title'),\n                })\n            if chapters and len(entries) == 1:\n                entries[0]['chapters'] = chapters\n\n        return self.playlist_result(entries, video_id, title, description)\n\n\nclass NRKIE(NRKBaseIE):\n    _VALID_URL = r % _EPISODE_RE\n    _API_HOST = 'psapi-ne.nrk.no'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '4e9ca6629f09e588ed240fb11619922a',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l - TV',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514CA',\n            'ext': 'mp4',\n            'title': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting 24.05.2014',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605,\n            'series': 'Kunnskapskanalen',\n            'episode': '24.05.2014',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015\n        'info_dict': {\n            'id': 'MSPO40010515-part2',\n            'ext': 'flv',\n            'title': 'Tour de Ski: Sprint fri teknikk, kvinner og menn 06.01.2015 (del 2:2)',\n            'description': 'md5:238b67b97a4ac7d7b4bf0edf8cc57d26',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Video is geo restricted'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'playlist': [{\n            'info_dict': {\n                'id': 'MSPO40010515AH',\n                'ext': 'mp4',\n                'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015 (Part 1)',\n                'description': 'md5:c03aba1e917561eface5214020551b7a',\n                'duration': 772,\n                'series': 'Tour de Ski',\n                'episode': '06.01.2015',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        }, {\n            'info_dict': {\n                'id': 'MSPO40010515BH',\n                'ext': 'mp4',\n                'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015 (Part 2)',\n                'description': 'md5:c03aba1e917561eface5214020551b7a',\n                'duration': 6175,\n                'series': 'Tour de Ski',\n                'episode': '06.01.2015',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        }],\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n        },\n        'expected_warnings': ['Video is geo restricted'],\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317AA',\n            'ext': 'mp4',\n            'title': 'Anno 13:30',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13:30',\n            'season_number': 3,\n            'episode_number': 13,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317AA',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015\n        'only_matching': True,\n    }]\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 5,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n\nclass NRKTVEpisodesIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/program/[Ee]pisodes/[^/]+/(?P<id>\\d+)'\n    _ITEM_RE = r'data-episode=[\"\\']%s' % NRKTVIE._EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/episodes/nytt-paa-nytt/69031',\n        'info_dict': {\n            'id': '69031',\n            'title': 'Nytt p\u00e5 nytt, sesong: 201210',\n        },\n        'playlist_count': 4,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'title', fatal=False)\n\n\nclass NRKTVSeriesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/serie/(?P<id>[^/]+)'\n    _ITEM_RE = r'(?:data-season=[\"\\']|id=[\"\\']season-)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 9,\n    }, {\n        'url': 'http://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'md5:58afd450974c89e27d5a19212eee7115',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if NRKTVIE.suitable(url) else super(NRKTVSeriesIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        series_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, series_id)\n\n        entries = [\n            self.url_result(\n                'https://tv.nrk.no/program/Episodes/{series}/{season}'.format(\n                    series=series_id, season=season_id))\n            for season_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        title = self._html_search_meta(\n            'seriestitle', webpage,\n            'title', default=None) or self._og_search_title(\n            webpage, fatal=False)\n\n        description = self._html_search_meta(\n            'series_description', webpage,\n            'description', default=None) or self._og_search_description(webpage)\n\n        return self.playlist_result(entries, series_id, title, description)\n\n\nclass NRKSkoleIE(InfoExtractor):\n    IE_DESC = 'NRK Skole'\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/skole/?\\?.*\\bmediaId=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://www.nrk.no/skole/?page=search&q=&mediaId=14099',\n        'md5': '6bc936b01f9dd8ed45bc58b252b2d9b6',\n        'info_dict': {\n            'id': '6021',\n            'ext': 'mp4',\n            'title': 'Genetikk og eneggede tvillinger',\n            'description': 'md5:3aca25dcf38ec30f0363428d2b265f8d',\n            'duration': 399,\n        },\n    }, {\n        'url': 'https://www.nrk.no/skole/?page=objectives&subject=naturfag&objective=K15114&mediaId=19355',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'https://mimir.nrk.no/plugin/1.0/static?mediaId=%s' % video_id,\n            video_id)\n\n        nrk_id = self._parse_json(\n            self._search_regex(\n                r'<script[^>]+type=[\"\\']application/json[\"\\'][^>]*>({.+?})</script>',\n                webpage, 'application json'),\n            video_id)['activeMedia']['psId']\n\n        return self.url_result('nrk:%s' % nrk_id)\n", "comments": "(?x)\n                        (?:\n                            nrk:|\n                            https?://\n                                (?:\n                                    (?:www\\.)?nrk\\.no/video/PS\\*|\n                                    v8[-.]psapi\\.nrk\\.no/mediaelement/\n                                )\n                            )\n                            (?P<id>[^?#&]+)\n                        '''\n    _API_HOST = 'v8-psapi.nrk.no'\n    _TESTS = [{\n        # video\n        'url': 'http://www.nrk.no/video/PS*150533',\n        'md5': '2f7f6eeb2aacdd99885f355428715cfa',\n        'info_dict': {\n            'id': '150533',\n            'ext': 'mp4',\n            'title': 'Dompap og andre fugler i Piip-Show',\n            'description': 'md5:d9261ba34c43b61c812cb6b0269a5c8f',\n            'duration': 263,\n        }\n    }, {\n        # audio\n        'url': 'http://www.nrk.no/video/PS*154915',\n        # MD5 is unstable\n        'info_dict': {\n            'id': '154915',\n            'ext': 'flv',\n            'title': 'Slik h\u00f8res internett ut n\u00e5r du er blind',\n            'description': 'md5:a621f5cc1bd75c8d5104cb048c6b8568',\n            'duration': 20,\n        }\n    }, {\n        'url': 'nrk:ecc1b952-96dc-4a98-81b9-5296dc7a98d9',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:clip/7707d5a3-ebe7-434a-87d5-a3ebe7a34a70',\n        'only_matching': True,\n    }, {\n        'url': 'https://v8-psapi.nrk.no/mediaelement/ecc1b952-96dc-4a98-81b9-5296dc7a98d9',\n        'only_matching': True,\n    }]\n\n\nclass NRKTVIE(NRKBaseIE):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'''(?x)\n                        https?://\n                            (?:tv|radio)\\.nrk(?:super)?\\.no/\n                            (?:serie/[^/]+|program)/\n                            (?![Ee]pisodes)%s\n                            (?:/\\d{2}-\\d{2}-\\d{4})?\n                            (?:\\#del=(?P<part_id>\\d+))?\n                    \n \n# coding: utf-8\n# Some f4m streams may not work with hdcore in fragments' URLs\n# Can be ProgramIsGeoBlocked or ChannelIsGeoBlocked*\n# single playlist video\n#del=2',\n#',\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_age_limit,\n    parse_duration,\n)\n\n\nclass NRKBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['NO']\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = self._download_json(\n            'http://%s/mediaelement/%s' % (self._API_HOST, video_id),\n            video_id, 'Downloading mediaelement JSON')\n\n        title = data.get('fullTitle') or data.get('mainTitle') or data['title']\n        video_id = data.get('id') or video_id\n\n        entries = []\n\n        conviva = data.get('convivaStatistics') or {}\n        live = (data.get('mediaElementType') == 'Live' or\n                data.get('isLive') is True or conviva.get('isLive'))\n\n        def make_title(t):\n            return self._live_title(t) if live else t\n\n        media_assets = data.get('mediaAssets')\n        if media_assets and isinstance(media_assets, list):\n            def video_id_and_title(idx):\n                return ((video_id, title) if len(media_assets) == 1\n                        else ('%s-%d' % (video_id, idx), '%s (Part %d)' % (title, idx)))\n            for num, asset in enumerate(media_assets, 1):\n                asset_url = asset.get('url')\n                if not asset_url:\n                    continue\n                formats = self._extract_akamai_formats(asset_url, video_id)\n                if not formats:\n                    continue\n                self._sort_formats(formats)\n\n                # Some f4m streams may not work with hdcore in fragments' URLs\n                for f in formats:\n                    extra_param = f.get('extra_param_to_segment_url')\n                    if extra_param and 'hdcore' in extra_param:\n                        del f['extra_param_to_segment_url']\n\n                entry_id, entry_title = video_id_and_title(num)\n                duration = parse_duration(asset.get('duration'))\n                subtitles = {}\n                for subtitle in ('webVtt', 'timedText'):\n                    subtitle_url = asset.get('%sSubtitlesUrl' % subtitle)\n                    if subtitle_url:\n                        subtitles.setdefault('no', []).append({\n                            'url': compat_urllib_parse_unquote(subtitle_url)\n                        })\n                entries.append({\n                    'id': asset.get('carrierId') or entry_id,\n                    'title': make_title(entry_title),\n                    'duration': duration,\n                    'subtitles': subtitles,\n                    'formats': formats,\n                })\n\n        if not entries:\n            media_url = data.get('mediaUrl')\n            if media_url:\n                formats = self._extract_akamai_formats(media_url, video_id)\n                self._sort_formats(formats)\n                duration = parse_duration(data.get('duration'))\n                entries = [{\n                    'id': video_id,\n                    'title': make_title(title),\n                    'duration': duration,\n                    'formats': formats,\n                }]\n\n        if not entries:\n            MESSAGES = {\n                'ProgramRightsAreNotReady': 'Du kan dessverre ikke se eller h\u00f8re programmet',\n                'ProgramRightsHasExpired': 'Programmet har g\u00e5tt ut',\n                'ProgramIsGeoBlocked': 'NRK har ikke rettigheter til \u00e5 vise dette programmet utenfor Norge',\n            }\n            message_type = data.get('messageType', '')\n            # Can be ProgramIsGeoBlocked or ChannelIsGeoBlocked*\n            if 'IsGeoBlocked' in message_type:\n                self.raise_geo_restricted(\n                    msg=MESSAGES.get('ProgramIsGeoBlocked'),\n                    countries=self._GEO_COUNTRIES)\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, MESSAGES.get(\n                    message_type, message_type)),\n                expected=True)\n\n        series = conviva.get('seriesName') or data.get('seriesTitle')\n        episode = conviva.get('episodeName') or data.get('episodeNumberOrDate')\n\n        season_number = None\n        episode_number = None\n        if data.get('mediaElementType') == 'Episode':\n            _season_episode = data.get('scoresStatistics', {}).get('springStreamStream') or \\\n                data.get('relativeOriginUrl', '')\n            EPISODENUM_RE = [\n                r'/s(?P<season>\\d{,2})e(?P<episode>\\d{,2})\\.',\n                r'/sesong-(?P<season>\\d{,2})/episode-(?P<episode>\\d{,2})',\n            ]\n            season_number = int_or_none(self._search_regex(\n                EPISODENUM_RE, _season_episode, 'season number',\n                default=None, group='season'))\n            episode_number = int_or_none(self._search_regex(\n                EPISODENUM_RE, _season_episode, 'episode number',\n                default=None, group='episode'))\n\n        thumbnails = None\n        images = data.get('images')\n        if images and isinstance(images, dict):\n            web_images = images.get('webImages')\n            if isinstance(web_images, list):\n                thumbnails = [{\n                    'url': image['imageUrl'],\n                    'width': int_or_none(image.get('width')),\n                    'height': int_or_none(image.get('height')),\n                } for image in web_images if image.get('imageUrl')]\n\n        description = data.get('description')\n        category = data.get('mediaAnalytics', {}).get('category')\n\n        common_info = {\n            'description': description,\n            'series': series,\n            'episode': episode,\n            'season_number': season_number,\n            'episode_number': episode_number,\n            'categories': [category] if category else None,\n            'age_limit': parse_age_limit(data.get('legalAge')),\n            'thumbnails': thumbnails,\n        }\n\n        vcodec = 'none' if data.get('mediaType') == 'Audio' else None\n\n        for entry in entries:\n            entry.update(common_info)\n            for f in entry['formats']:\n                f['vcodec'] = vcodec\n\n        points = data.get('shortIndexPoints')\n        if isinstance(points, list):\n            chapters = []\n            for next_num, point in enumerate(points, start=1):\n                if not isinstance(point, dict):\n                    continue\n                start_time = parse_duration(point.get('startPoint'))\n                if start_time is None:\n                    continue\n                end_time = parse_duration(\n                    data.get('duration')\n                    if next_num == len(points)\n                    else points[next_num].get('startPoint'))\n                if end_time is None:\n                    continue\n                chapters.append({\n                    'start_time': start_time,\n                    'end_time': end_time,\n                    'title': point.get('title'),\n                })\n            if chapters and len(entries) == 1:\n                entries[0]['chapters'] = chapters\n\n        return self.playlist_result(entries, video_id, title, description)\n\n\nclass NRKIE(NRKBaseIE):\n    _VALID_URL = r'''(?x)\n                        (?:\n                            nrk:|\n                            https?://\n                                (?:\n                                    (?:www\\.)?nrk\\.no/video/PS\\*|\n                                    v8[-.]psapi\\.nrk\\.no/mediaelement/\n                                )\n                            )\n                            (?P<id>[^?#&]+)\n                        '''\n    _API_HOST = 'v8-psapi.nrk.no'\n    _TESTS = [{\n        # video\n        'url': 'http://www.nrk.no/video/PS*150533',\n        'md5': '2f7f6eeb2aacdd99885f355428715cfa',\n        'info_dict': {\n            'id': '150533',\n            'ext': 'mp4',\n            'title': 'Dompap og andre fugler i Piip-Show',\n            'description': 'md5:d9261ba34c43b61c812cb6b0269a5c8f',\n            'duration': 263,\n        }\n    }, {\n        # audio\n        'url': 'http://www.nrk.no/video/PS*154915',\n        # MD5 is unstable\n        'info_dict': {\n            'id': '154915',\n            'ext': 'flv',\n            'title': 'Slik h\u00f8res internett ut n\u00e5r du er blind',\n            'description': 'md5:a621f5cc1bd75c8d5104cb048c6b8568',\n            'duration': 20,\n        }\n    }, {\n        'url': 'nrk:ecc1b952-96dc-4a98-81b9-5296dc7a98d9',\n        'only_matching': True,\n    }, {\n        'url': 'nrk:clip/7707d5a3-ebe7-434a-87d5-a3ebe7a34a70',\n        'only_matching': True,\n    }, {\n        'url': 'https://v8-psapi.nrk.no/mediaelement/ecc1b952-96dc-4a98-81b9-5296dc7a98d9',\n        'only_matching': True,\n    }]\n\n\nclass NRKTVIE(NRKBaseIE):\n    IE_DESC = 'NRK TV and NRK Radio'\n    _EPISODE_RE = r'(?P<id>[a-zA-Z]{4}\\d{8})'\n    _VALID_URL = r'''(?x)\n                        https?://\n                            (?:tv|radio)\\.nrk(?:super)?\\.no/\n                            (?:serie/[^/]+|program)/\n                            (?![Ee]pisodes)%s\n                            (?:/\\d{2}-\\d{2}-\\d{4})?\n                            (?:\\#del=(?P<part_id>\\d+))?\n                    ''' % _EPISODE_RE\n    _API_HOST = 'psapi-ne.nrk.no'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/20-spoersmaal-tv/MUHH48000314/23-05-2014',\n        'md5': '4e9ca6629f09e588ed240fb11619922a',\n        'info_dict': {\n            'id': 'MUHH48000314AA',\n            'ext': 'mp4',\n            'title': '20 sp\u00f8rsm\u00e5l 23.05.2014',\n            'description': 'md5:bdea103bc35494c143c6a9acdd84887a',\n            'duration': 1741,\n            'series': '20 sp\u00f8rsm\u00e5l - TV',\n            'episode': '23.05.2014',\n        },\n    }, {\n        'url': 'https://tv.nrk.no/program/mdfp15000514',\n        'info_dict': {\n            'id': 'MDFP15000514CA',\n            'ext': 'mp4',\n            'title': 'Grunnlovsjubil\u00e9et - Stor st\u00e5hei for ingenting 24.05.2014',\n            'description': 'md5:89290c5ccde1b3a24bb8050ab67fe1db',\n            'duration': 4605,\n            'series': 'Kunnskapskanalen',\n            'episode': '24.05.2014',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # single playlist video\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015#del=2',\n        'info_dict': {\n            'id': 'MSPO40010515-part2',\n            'ext': 'flv',\n            'title': 'Tour de Ski: Sprint fri teknikk, kvinner og menn 06.01.2015 (del 2:2)',\n            'description': 'md5:238b67b97a4ac7d7b4bf0edf8cc57d26',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Video is geo restricted'],\n        'skip': 'particular part is not supported currently',\n    }, {\n        'url': 'https://tv.nrk.no/serie/tour-de-ski/MSPO40010515/06-01-2015',\n        'playlist': [{\n            'info_dict': {\n                'id': 'MSPO40010515AH',\n                'ext': 'mp4',\n                'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015 (Part 1)',\n                'description': 'md5:c03aba1e917561eface5214020551b7a',\n                'duration': 772,\n                'series': 'Tour de Ski',\n                'episode': '06.01.2015',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        }, {\n            'info_dict': {\n                'id': 'MSPO40010515BH',\n                'ext': 'mp4',\n                'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015 (Part 2)',\n                'description': 'md5:c03aba1e917561eface5214020551b7a',\n                'duration': 6175,\n                'series': 'Tour de Ski',\n                'episode': '06.01.2015',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        }],\n        'info_dict': {\n            'id': 'MSPO40010515',\n            'title': 'Sprint fri teknikk, kvinner og menn 06.01.2015',\n            'description': 'md5:c03aba1e917561eface5214020551b7a',\n        },\n        'expected_warnings': ['Video is geo restricted'],\n    }, {\n        'url': 'https://tv.nrk.no/serie/anno/KMTE50001317/sesong-3/episode-13',\n        'info_dict': {\n            'id': 'KMTE50001317AA',\n            'ext': 'mp4',\n            'title': 'Anno 13:30',\n            'description': 'md5:11d9613661a8dbe6f9bef54e3a4cbbfa',\n            'duration': 2340,\n            'series': 'Anno',\n            'episode': '13:30',\n            'season_number': 3,\n            'episode_number': 13,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://tv.nrk.no/serie/nytt-paa-nytt/MUHH46000317/27-01-2017',\n        'info_dict': {\n            'id': 'MUHH46000317AA',\n            'ext': 'mp4',\n            'title': 'Nytt p\u00e5 Nytt 27.01.2017',\n            'description': 'md5:5358d6388fba0ea6f0b6d11c48b9eb4b',\n            'duration': 1796,\n            'series': 'Nytt p\u00e5 nytt',\n            'episode': '27.01.2017',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://radio.nrk.no/serie/dagsnytt/NPUB21019315/12-07-2015#',\n        'only_matching': True,\n    }]\n\n\nclass NRKTVDirekteIE(NRKTVIE):\n    IE_DESC = 'NRK TV Direkte and NRK Radio Direkte'\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk\\.no/direkte/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/direkte/nrk1',\n        'only_matching': True,\n    }, {\n        'url': 'https://radio.nrk.no/direkte/p1_oslo_akershus',\n        'only_matching': True,\n    }]\n\n\nclass NRKPlaylistBaseIE(InfoExtractor):\n    def _extract_description(self, webpage):\n        pass\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('nrk:%s' % video_id, NRKIE.ie_key())\n            for video_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        playlist_title = self. _extract_title(webpage)\n        playlist_description = self._extract_description(webpage)\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_title, playlist_description)\n\n\nclass NRKPlaylistIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/(?!video|skole)(?:[^/]+/)+(?P<id>[^/]+)'\n    _ITEM_RE = r'class=\"[^\"]*\\brich\\b[^\"]*\"[^>]+data-video-id=\"([^\"]+)\"'\n    _TESTS = [{\n        'url': 'http://www.nrk.no/troms/gjenopplev-den-historiske-solformorkelsen-1.12270763',\n        'info_dict': {\n            'id': 'gjenopplev-den-historiske-solformorkelsen-1.12270763',\n            'title': 'Gjenopplev den historiske solform\u00f8rkelsen',\n            'description': 'md5:c2df8ea3bac5654a26fc2834a542feed',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.nrk.no/kultur/bok/rivertonprisen-til-karin-fossum-1.12266449',\n        'info_dict': {\n            'id': 'rivertonprisen-til-karin-fossum-1.12266449',\n            'title': 'Rivertonprisen til Karin Fossum',\n            'description': 'F\u00f8rste kvinne p\u00e5 15 \u00e5r til \u00e5 vinne krimlitteraturprisen.',\n        },\n        'playlist_count': 5,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._og_search_title(webpage, fatal=False)\n\n    def _extract_description(self, webpage):\n        return self._og_search_description(webpage)\n\n\nclass NRKTVEpisodesIE(NRKPlaylistBaseIE):\n    _VALID_URL = r'https?://tv\\.nrk\\.no/program/[Ee]pisodes/[^/]+/(?P<id>\\d+)'\n    _ITEM_RE = r'data-episode=[\"\\']%s' % NRKTVIE._EPISODE_RE\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/program/episodes/nytt-paa-nytt/69031',\n        'info_dict': {\n            'id': '69031',\n            'title': 'Nytt p\u00e5 nytt, sesong: 201210',\n        },\n        'playlist_count': 4,\n    }]\n\n    def _extract_title(self, webpage):\n        return self._html_search_regex(\n            r'<h1>([^<]+)</h1>', webpage, 'title', fatal=False)\n\n\nclass NRKTVSeriesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tv|radio)\\.nrk(?:super)?\\.no/serie/(?P<id>[^/]+)'\n    _ITEM_RE = r'(?:data-season=[\"\\']|id=[\"\\']season-)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://tv.nrk.no/serie/groenn-glede',\n        'info_dict': {\n            'id': 'groenn-glede',\n            'title': 'Gr\u00f8nn glede',\n            'description': 'md5:7576e92ae7f65da6993cf90ee29e4608',\n        },\n        'playlist_mincount': 9,\n    }, {\n        'url': 'http://tv.nrksuper.no/serie/labyrint',\n        'info_dict': {\n            'id': 'labyrint',\n            'title': 'Labyrint',\n            'description': 'md5:58afd450974c89e27d5a19212eee7115',\n        },\n        'playlist_mincount': 3,\n    }, {\n        'url': 'https://tv.nrk.no/serie/broedrene-dal-og-spektralsteinene',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/saving-the-human-race',\n        'only_matching': True,\n    }, {\n        'url': 'https://tv.nrk.no/serie/postmann-pat',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if NRKTVIE.suitable(url) else super(NRKTVSeriesIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        series_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, series_id)\n\n        entries = [\n            self.url_result(\n                'https://tv.nrk.no/program/Episodes/{series}/{season}'.format(\n                    series=series_id, season=season_id))\n            for season_id in re.findall(self._ITEM_RE, webpage)\n        ]\n\n        title = self._html_search_meta(\n            'seriestitle', webpage,\n            'title', default=None) or self._og_search_title(\n            webpage, fatal=False)\n\n        description = self._html_search_meta(\n            'series_description', webpage,\n            'description', default=None) or self._og_search_description(webpage)\n\n        return self.playlist_result(entries, series_id, title, description)\n\n\nclass NRKSkoleIE(InfoExtractor):\n    IE_DESC = 'NRK Skole'\n    _VALID_URL = r'https?://(?:www\\.)?nrk\\.no/skole/?\\?.*\\bmediaId=(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'https://www.nrk.no/skole/?page=search&q=&mediaId=14099',\n        'md5': '6bc936b01f9dd8ed45bc58b252b2d9b6',\n        'info_dict': {\n            'id': '6021',\n            'ext': 'mp4',\n            'title': 'Genetikk og eneggede tvillinger',\n            'description': 'md5:3aca25dcf38ec30f0363428d2b265f8d',\n            'duration': 399,\n        },\n    }, {\n        'url': 'https://www.nrk.no/skole/?page=objectives&subject=naturfag&objective=K15114&mediaId=19355',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'https://mimir.nrk.no/plugin/1.0/static?mediaId=%s' % video_id,\n            video_id)\n\n        nrk_id = self._parse_json(\n            self._search_regex(\n                r'<script[^>]+type=[\"\\']application/json[\"\\'][^>]*>({.+?})</script>',\n                webpage, 'application json'),\n            video_id)['activeMedia']['psId']\n\n        return self.url_result('nrk:%s' % nrk_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nrk.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nrk.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}