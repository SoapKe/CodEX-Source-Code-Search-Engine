{"author": "python-telegram-bot", "code": "\n -*- coding: utf-8 -*-\n\n Simple Bot to reply to Telegram messages\n This program is dedicated to the public domain under the CC0 license.\n\"\"\"\nThis Bot uses the Updater class to handle the bot.\n\nFirst, a few callback functions are defined. Then, those functions are passed to\nthe Dispatcher and registered at their respective places.\nThen, the bot is started and runs until we press Ctrl-C on the command line.\n\nUsage:\nExample of a bot-user conversation using ConversationHandler.\nSend /start to initiate the conversation.\nPress Ctrl-C on the command line or send a signal to the process to stop the\nbot.\n\"\"\"\n\nfrom telegram import ReplyKeyboardMarkup\nfrom telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,\n                          ConversationHandler)\n\nimport logging\n\n Enable logging\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\nCHOOSING, TYPING_REPLY, TYPING_CHOICE = range(3)\n\nreply_keyboard = [['Age', 'Favourite colour'],\n                  ['Number of siblings', 'Something else...'],\n                  ['Done']]\nmarkup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)\n\n\ndef facts_to_str(user_data):\n    facts = list()\n\n    for key, value in user_data.items():\n        facts.append('{} - {}'.format(key, value))\n\n    return \"\\n\".join(facts).join(['\\n', '\\n'])\n\n\ndef start(bot, update):\n    update.message.reply_text(\n        \"Hi! My name is Doctor Botter. I will hold a more complex conversation with you. \"\n        \"Why don't you tell me something about yourself?\",\n        reply_markup=markup)\n\n    return CHOOSING\n\n\ndef regular_choice(bot, update, user_data):\n    text = update.message.text\n    user_data['choice'] = text\n    update.message.reply_text(\n        'Your {}? Yes, I would love to hear about that!'.format(text.lower()))\n\n    return TYPING_REPLY\n\n\ndef custom_choice(bot, update):\n    update.message.reply_text('Alright, please send me the category first, '\n                              'for example \"Most impressive skill\"')\n\n    return TYPING_CHOICE\n\n\ndef received_information(bot, update, user_data):\n    text = update.message.text\n    category = user_data['choice']\n    user_data[category] = text\n    del user_data['choice']\n\n    update.message.reply_text(\"Neat! Just so you know, this is what you already told me:\"\n                              \"{}\"\n                              \"You can tell me more, or change your opinion on something.\".format(\n                                  facts_to_str(user_data)), reply_markup=markup)\n\n    return CHOOSING\n\n\ndef done(bot, update, user_data):\n    if 'choice' in user_data:\n        del user_data['choice']\n\n    update.message.reply_text(\"I learned these facts about you:\"\n                              \"{}\"\n                              \"Until next time!\".format(facts_to_str(user_data)))\n\n    user_data.clear()\n    return ConversationHandler.END\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n     Create the Updater and pass it your bot's token.\n    updater = Updater(\"TOKEN\")\n\n     Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n     Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO\n    conv_handler = ConversationHandler(\n        entry_points=[CommandHandler('start', start)],\n\n        states={\n            CHOOSING: [RegexHandler('^(Age|Favourite colour|Number of siblings)$',\n                                    regular_choice,\n                                    pass_user_data=True),\n                       RegexHandler('^Something else...$',\n                                    custom_choice),\n                       ],\n\n            TYPING_CHOICE: [MessageHandler(Filters.text,\n                                           regular_choice,\n                                           pass_user_data=True),\n                            ],\n\n            TYPING_REPLY: [MessageHandler(Filters.text,\n                                          received_information,\n                                          pass_user_data=True),\n                           ],\n        },\n\n        fallbacks=[RegexHandler('^Done$', done, pass_user_data=True)]\n    )\n\n    dp.add_handler(conv_handler)\n\n     log all errors\n    dp.add_error_handler(error)\n\n     Start the Bot\n    updater.start_polling()\n\n     Run the bot until you press Ctrl-C or the process receives SIGINT,\n     SIGTERM or SIGABRT. This should be used most of the time, since\n     start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "    this bot uses updater class handle bot   first  callback functions defined  then  functions passed dispatcher registered respective places  then  bot started runs press ctrl c command line   usage  example bot user conversation using conversationhandler  send  start initiate conversation  press ctrl c command line send signal process stop bot       telegram import replykeyboardmarkup telegram ext import (updater  commandhandler  messagehandler  filters  regexhandler                            conversationhandler)  import logging    enable logging logging basicconfig(format   (asctime)s    (name)s    (levelname)s    (message)s                       level logging info)  logger   logging getlogger(  name  )  choosing  typing reply  typing choice   range(3)  reply keyboard      age    favourite colour                        number siblings    something else                           done    markup   replykeyboardmarkup(reply keyboard  one time keyboard true)   def facts str(user data)      facts   list()      key  value user data items()          facts append(          format(key  value))      return   n  join(facts) join(   n     n  )   def start(bot  update)      update message reply text(          hi  my name doctor botter  i hold complex conversation             why tell something            reply markup markup)      return choosing   def regular choice(bot  update  user data)      text   update message text     user data  choice     text     update message reply text(          your     yes  i would love hear   format(text lower()))      return typing reply   def custom choice(bot  update)      update message reply text( alright  please send category first                                   example  most impressive skill  )      return typing choice   def received information(bot  update  user data)      text   update message text     category   user data  choice       user data category    text     del user data  choice        update message reply text( neat  just know  already told                                                                     you tell  change opinion something   format(                                   facts str(user data))  reply markup markup)      return choosing   def done(bot  update  user data)       choice  user data          del user data  choice        update message reply text( i learned facts                                                                     until next time   format(facts str(user data)))      user data clear()     return conversationhandler end   def error(bot  update  error)         log errors caused updates         usr bin env python        coding  utf 8           simple bot reply telegram messages    this program dedicated public domain cc0 license     enable logging    create updater pass bot token     get dispatcher register handlers    add conversation handler states gender  photo  location bio    log errors    start bot    run bot press ctrl c process receives sigint     sigterm sigabrt  this used time  since    start polling() non blocking stop bot gracefully  ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Simple Bot to reply to Telegram messages\n# This program is dedicated to the public domain under the CC0 license.\n\"\"\"\nThis Bot uses the Updater class to handle the bot.\n\nFirst, a few callback functions are defined. Then, those functions are passed to\nthe Dispatcher and registered at their respective places.\nThen, the bot is started and runs until we press Ctrl-C on the command line.\n\nUsage:\nExample of a bot-user conversation using ConversationHandler.\nSend /start to initiate the conversation.\nPress Ctrl-C on the command line or send a signal to the process to stop the\nbot.\n\"\"\"\n\nfrom telegram import ReplyKeyboardMarkup\nfrom telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,\n                          ConversationHandler)\n\nimport logging\n\n# Enable logging\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\nCHOOSING, TYPING_REPLY, TYPING_CHOICE = range(3)\n\nreply_keyboard = [['Age', 'Favourite colour'],\n                  ['Number of siblings', 'Something else...'],\n                  ['Done']]\nmarkup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)\n\n\ndef facts_to_str(user_data):\n    facts = list()\n\n    for key, value in user_data.items():\n        facts.append('{} - {}'.format(key, value))\n\n    return \"\\n\".join(facts).join(['\\n', '\\n'])\n\n\ndef start(bot, update):\n    update.message.reply_text(\n        \"Hi! My name is Doctor Botter. I will hold a more complex conversation with you. \"\n        \"Why don't you tell me something about yourself?\",\n        reply_markup=markup)\n\n    return CHOOSING\n\n\ndef regular_choice(bot, update, user_data):\n    text = update.message.text\n    user_data['choice'] = text\n    update.message.reply_text(\n        'Your {}? Yes, I would love to hear about that!'.format(text.lower()))\n\n    return TYPING_REPLY\n\n\ndef custom_choice(bot, update):\n    update.message.reply_text('Alright, please send me the category first, '\n                              'for example \"Most impressive skill\"')\n\n    return TYPING_CHOICE\n\n\ndef received_information(bot, update, user_data):\n    text = update.message.text\n    category = user_data['choice']\n    user_data[category] = text\n    del user_data['choice']\n\n    update.message.reply_text(\"Neat! Just so you know, this is what you already told me:\"\n                              \"{}\"\n                              \"You can tell me more, or change your opinion on something.\".format(\n                                  facts_to_str(user_data)), reply_markup=markup)\n\n    return CHOOSING\n\n\ndef done(bot, update, user_data):\n    if 'choice' in user_data:\n        del user_data['choice']\n\n    update.message.reply_text(\"I learned these facts about you:\"\n                              \"{}\"\n                              \"Until next time!\".format(facts_to_str(user_data)))\n\n    user_data.clear()\n    return ConversationHandler.END\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n    # Create the Updater and pass it your bot's token.\n    updater = Updater(\"TOKEN\")\n\n    # Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n    # Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO\n    conv_handler = ConversationHandler(\n        entry_points=[CommandHandler('start', start)],\n\n        states={\n            CHOOSING: [RegexHandler('^(Age|Favourite colour|Number of siblings)$',\n                                    regular_choice,\n                                    pass_user_data=True),\n                       RegexHandler('^Something else...$',\n                                    custom_choice),\n                       ],\n\n            TYPING_CHOICE: [MessageHandler(Filters.text,\n                                           regular_choice,\n                                           pass_user_data=True),\n                            ],\n\n            TYPING_REPLY: [MessageHandler(Filters.text,\n                                          received_information,\n                                          pass_user_data=True),\n                           ],\n        },\n\n        fallbacks=[RegexHandler('^Done$', done, pass_user_data=True)]\n    )\n\n    dp.add_handler(conv_handler)\n\n    # log all errors\n    dp.add_error_handler(error)\n\n    # Start the Bot\n    updater.start_polling()\n\n    # Run the bot until you press Ctrl-C or the process receives SIGINT,\n    # SIGTERM or SIGABRT. This should be used most of the time, since\n    # start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "We have made you a wrapper you can't refuse", "file_name": "conversationbot2.py", "id": "ab1a9f7a65fd99380902a64bc6775fcf", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/examples/conversationbot2.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}