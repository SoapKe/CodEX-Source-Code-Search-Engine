{"author": "ansible", "code": "\n\n Copyright: Ansible Team\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = \"\"\"\n---\nmodule: aruba_config\nversion_added: \"2.4\"\nauthor: \"James Mighion (@jmighion)\"\nshort_description: Manage Aruba configuration sections\ndescription:\n  - Aruba configurations use a simple block indent file syntax\n    for segmenting configuration into sections.  This module provides\n    an implementation for working with Aruba configuration sections in\n    a deterministic way.\nextends_documentation_fragment: aruba\noptions:\n  lines:\n    description:\n      - The ordered set of commands that should be configured in the\n        section.  The commands must be the exact same commands as found\n        in the device running-config.  Be sure to note the configuration\n        command syntax as some commands are automatically modified by the\n        device config parser.\n    aliases: ['commands']\n  parents:\n    description:\n      - The ordered set of parents that uniquely identify the section or hierarchy\n        the commands should be checked against.  If the parents argument\n        is omitted, the commands are checked against the set of top\n        level or global commands.\n  src:\n    description:\n      - Specifies the source path to the file that contains the configuration\n        or configuration template to load.  The path to the source file can\n        either be the full path on the Ansible control host or a relative\n        path from the playbook or role root directory.  This argument is mutually\n        exclusive with I(lines), I(parents).\n  before:\n    description:\n      - The ordered set of commands to push on to the command stack if\n        a change needs to be made.  This allows the playbook designer\n        the opportunity to perform configuration commands prior to pushing\n        any changes without affecting how the set of commands are matched\n        against the system.\n  after:\n    description:\n      - The ordered set of commands to append to the end of the command\n        stack if a change needs to be made.  Just like with I(before) this\n        allows the playbook designer to append a set of commands to be\n        executed after the command set.\n  match:\n    description:\n      - Instructs the module on the way to perform the matching of\n        the set of commands against the current device config.  If\n        match is set to I(line), commands are matched line by line.  If\n        match is set to I(strict), command lines are matched with respect\n        to position.  If match is set to I(exact), command lines\n        must be an equal match.  Finally, if match is set to I(none), the\n        module will not attempt to compare the source configuration with\n        the running configuration on the remote device.\n    default: line\n    choices: ['line', 'strict', 'exact', 'none']\n  replace:\n    description:\n      - Instructs the module on the way to perform the configuration\n        on the device.  If the replace argument is set to I(line) then\n        the modified lines are pushed to the device in configuration\n        mode.  If the replace argument is set to I(block) then the entire\n        command block is pushed to the device in configuration mode if any\n        line is not correct.\n    default: line\n    choices: ['line', 'block']\n  backup:\n    description:\n      - This argument will cause the module to create a full backup of\n        the current C(running-config) from the remote device before any\n        changes are made.  The backup file is written to the C(backup)\n        folder in the playbook root directory.  If the directory does not\n        exist, it is created.\n    type: bool\n    default: 'no'\n  running_config:\n    description:\n      - The module, by default, will connect to the remote device and\n        retrieve the current running-config to use as a base for comparing\n        against the contents of source.  There are times when it is not\n        desirable to have the task get the current running-config for\n        every task in a playbook.  The I(running_config) argument allows the\n        implementer to pass in the configuration to use as the base\n        config for comparison.\n    aliases: ['config']\n  save_when:\n    description:\n      - When changes are made to the device running-configuration, the\n        changes are not copied to non-volatile storage by default.  Using\n        this argument will change that before.  If the argument is set to\n        I(always), then the running-config will always be copied to the\n        startup-config and the I(modified) flag will always be set to\n        True.  If the argument is set to I(modified), then the running-config\n        will only be copied to the startup-config if it has changed since\n        the last save to startup-config.  If the argument is set to\n        I(never), the running-config will never be copied to the\n        startup-config.  If the argument is set to I(changed), then the running-config\n        will only be copied to the startup-config if the task has made a change.\n    default: never\n    choices: ['always', 'never', 'modified', 'changed']\n    version_added: \"2.5\"\n  diff_against:\n    description:\n      - When using the C(ansible-playbook --diff) command line argument\n        the module can generate diffs against different sources.\n      - When this option is configure as I(startup), the module will return\n        the diff of the running-config against the startup-config.\n      - When this option is configured as I(intended), the module will\n        return the diff of the running-config against the configuration\n        provided in the C(intended_config) argument.\n      - When this option is configured as I(running), the module will\n        return the before and after diff of the running-config with respect\n        to any changes made to the device configuration.\n    choices: ['startup', 'intended', 'running']\n  diff_ignore_lines:\n    description:\n      - Use this argument to specify one or more lines that should be\n        ignored during the diff.  This is used for lines in the configuration\n        that are automatically updated by the system.  This argument takes\n        a list of regular expressions or exact line matches.\n  intended_config:\n    description:\n      - The C(intended_config) provides the master configuration that\n        the node should conform to and is used to check the final\n        running-config against.   This argument will not modify any settings\n        on the remote device and is strictly used to check the compliance\n        of the current device's configuration against.  When specifying this\n        argument, the task should also modify the C(diff_against) value and\n        set it to I(intended).\n  encrypt:\n    description:\n      - This allows an Aruba controller's passwords and keys to be displayed in plain\n        text when set to I(false) or encrypted when set to I(true).\n        If set to I(false), the setting will re-encrypt at the end of the module run.\n        Backups are still encrypted even when set to I(false).\n    type: bool\n    default: 'yes'\n    version_added: \"2.5\"\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: configure top level configuration\n  aruba_config:\n    lines: hostname {{ inventory_hostname }}\n\n- name: diff the running-config against a provided config\n  aruba_config:\n    diff_against: intended\n    intended: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: configure interface settings\n  aruba_config:\n    lines:\n      - description test interface\n      - ip access-group 1 in\n    parents: interface gigabitethernet 0/0/0\n\n- name: load new acl into device\n  aruba_config:\n    lines:\n      - permit host 10.10.10.10\n      - ipv6 permit host fda9:97d6:32a3:3e59::3333\n    parents: ip access-list standard 1\n    before: no ip access-list standard 1\n    match: exact\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The set of commands that will be pushed to the remote device\n  returned: always\n  type: list\n  sample: ['hostname foo', 'vlan 1', 'name default']\nupdates:\n  description: The set of commands that will be pushed to the remote device\n  returned: always\n  type: list\n  sample: ['hostname foo', 'vlan 1', 'name default']\nbackup_path:\n  description: The full path to the backup file\n  returned: when backup is yes\n  type: string\n  sample: /playbooks/ansible/backup/aruba_config.2016-07-16@22:28:34\n\"\"\"\n\n\nfrom ansible.module_utils.network.aruba.aruba import run_commands, get_config, load_config\nfrom ansible.module_utils.network.aruba.aruba import aruba_argument_spec\nfrom ansible.module_utils.network.aruba.aruba import check_args as aruba_check_args\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.common.config import NetworkConfig, dumps\n\n\ndef get_running_config(module, config=None):\n    contents = module.params['running_config']\n    if not contents:\n        if config:\n            contents = config\n        else:\n            contents = get_config(module)\n    return NetworkConfig(contents=contents)\n\n\ndef get_candidate(module):\n    candidate = NetworkConfig()\n\n    if module.params['src']:\n        candidate.load(module.params['src'])\n    elif module.params['lines']:\n        parents = module.params['parents'] or list()\n        candidate.add(module.params['lines'], parents=parents)\n    return candidate\n\n\ndef save_config(module, result):\n    result['changed'] = True\n    if not module.check_mode:\n        run_commands(module, 'copy running-config startup-config')\n    else:\n        module.warn('Skipping command `copy running-config startup-config` '\n                    'due to check_mode.  Configuration not copied to '\n                    'non-volatile storage')\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n    argument_spec = dict(\n        src=dict(type='path'),\n\n        lines=dict(aliases=['commands'], type='list'),\n        parents=dict(type='list'),\n\n        before=dict(type='list'),\n        after=dict(type='list'),\n\n        match=dict(default='line', choices=['line', 'strict', 'exact', 'none']),\n        replace=dict(default='line', choices=['line', 'block']),\n\n        running_config=dict(aliases=['config']),\n        intended_config=dict(),\n\n        backup=dict(type='bool', default=False),\n\n        save_when=dict(choices=['always', 'never', 'modified', 'changed'], default='never'),\n\n        diff_against=dict(choices=['running', 'startup', 'intended']),\n        diff_ignore_lines=dict(type='list'),\n\n        encrypt=dict(type='bool', default=True),\n    )\n\n    argument_spec.update(aruba_argument_spec)\n\n    mutually_exclusive = [('lines', 'src'),\n                          ('parents', 'src')]\n\n    required_if = [('match', 'strict', ['lines']),\n                   ('match', 'exact', ['lines']),\n                   ('replace', 'block', ['lines']),\n                   ('diff_against', 'intended', ['intended_config'])]\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           mutually_exclusive=mutually_exclusive,\n                           required_if=required_if,\n                           supports_check_mode=True)\n\n    warnings = list()\n    aruba_check_args(module, warnings)\n    result = {'changed': False, 'warnings': warnings}\n\n    config = None\n\n    if module.params['backup'] or (module._diff and module.params['diff_against'] == 'running'):\n        contents = get_config(module)\n        config = NetworkConfig(contents=contents)\n        if module.params['backup']:\n            result['__backup__'] = contents\n\n    if not module.params['encrypt']:\n        run_commands(module, 'encrypt disable')\n\n    if any((module.params['src'], module.params['lines'])):\n        match = module.params['match']\n        replace = module.params['replace']\n\n        candidate = get_candidate(module)\n\n        if match != 'none':\n            config = get_running_config(module, config)\n            path = module.params['parents']\n            configobjs = candidate.difference(config, match=match, replace=replace, path=path)\n        else:\n            configobjs = candidate.items\n\n        if configobjs:\n            commands = dumps(configobjs, 'commands').split('\\n')\n\n            if module.params['before']:\n                commands[:0] = module.params['before']\n\n            if module.params['after']:\n                commands.extend(module.params['after'])\n\n            result['commands'] = commands\n            result['updates'] = commands\n\n            if not module.check_mode:\n                load_config(module, commands)\n\n            result['changed'] = True\n\n    running_config = None\n    startup_config = None\n\n    diff_ignore_lines = module.params['diff_ignore_lines']\n\n    if module.params['save_when'] == 'always':\n        save_config(module, result)\n    elif module.params['save_when'] == 'modified':\n        output = run_commands(module, ['show running-config', 'show startup-config'])\n\n        running_config = NetworkConfig(contents=output[0], ignore_lines=diff_ignore_lines)\n        startup_config = NetworkConfig(contents=output[1], ignore_lines=diff_ignore_lines)\n\n        if running_config.sha1 != startup_config.sha1:\n            save_config(module, result)\n    elif module.params['save_when'] == 'changed':\n        if result['changed']:\n            save_config(module, result)\n\n    if module._diff:\n        if not running_config:\n            output = run_commands(module, 'show running-config')\n            contents = output[0]\n        else:\n            contents = running_config.config_text\n\n         recreate the object in order to process diff_ignore_lines\n        running_config = NetworkConfig(contents=contents, ignore_lines=diff_ignore_lines)\n\n        if module.params['diff_against'] == 'running':\n            if module.check_mode:\n                module.warn(\"unable to perform diff against running-config due to check mode\")\n                contents = None\n            else:\n                contents = config.config_text\n\n        elif module.params['diff_against'] == 'startup':\n            if not startup_config:\n                output = run_commands(module, 'show startup-config')\n                contents = output[0]\n            else:\n                contents = startup_config.config_text\n\n        elif module.params['diff_against'] == 'intended':\n            contents = module.params['intended_config']\n\n        if contents is not None:\n            base_config = NetworkConfig(contents=contents, ignore_lines=diff_ignore_lines)\n\n            if running_config.sha1 != base_config.sha1:\n                result.update({\n                    'changed': True,\n                    'diff': {'before': str(base_config), 'after': str(running_config)}\n                })\n\n     make sure 'encrypt enable' is applied if it was ever disabled\n    if not module.params['encrypt']:\n        run_commands(module, 'encrypt enable')\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  aruba config version added   2 4  author   james mighion ( jmighion)  short description  manage aruba configuration sections description      aruba configurations use simple block indent file syntax     segmenting configuration sections   this module provides     implementation working aruba configuration sections     deterministic way  extends documentation fragment  aruba options    lines      description          the ordered set commands configured         section   the commands must exact commands found         device running config   be sure note configuration         command syntax commands automatically modified         device config parser      aliases    commands     parents      description          the ordered set parents uniquely identify section hierarchy         commands checked   if parents argument         omitted  commands checked set top         level global commands    src      description          specifies source path file contains configuration         configuration template load   the path source file         either full path ansible control host relative         path playbook role root directory   this argument mutually         exclusive i(lines)  i(parents)         description          the ordered set commands push command stack         change needs made   this allows playbook designer         opportunity perform configuration commands prior pushing         changes without affecting set commands matched         system         description          the ordered set commands append end command         stack change needs made   just like i(before)         allows playbook designer append set commands         executed command set    match      description          instructs module way perform matching         set commands current device config   if         match set i(line)  commands matched line line   if         match set i(strict)  command lines matched respect         position   if match set i(exact)  command lines         must equal match   finally  match set i(none)          module attempt compare source configuration         running configuration remote device      default  line     choices    line    strict    exact    none     replace      description          instructs module way perform configuration         device   if replace argument set i(line)         modified lines pushed device configuration         mode   if replace argument set i(block) entire         command block pushed device configuration mode         line correct      default  line     choices    line    block     backup      description          this argument cause module create full backup         current c(running config) remote device         changes made   the backup file written c(backup)         folder playbook root directory   if directory         exist  created      type  bool     default      running config      description          the module  default  connect remote device         retrieve current running config use base comparing         contents source   there times         desirable task get current running config         every task playbook   the i(running config) argument allows         implementer pass configuration use base         config comparison      aliases    config     save      description          when changes made device running configuration          changes copied non volatile storage default   using         argument change   if argument set         i(always)  running config always copied         startup config i(modified) flag always set         true   if argument set i(modified)  running config         copied startup config changed since         last save startup config   if argument set         i(never)  running config never copied         startup config   if argument set i(changed)  running config         copied startup config task made change      default  never     choices    always    never    modified    changed       version added   2 5    diff      description          when using c(ansible playbook   diff) command line argument         module generate diffs different sources          when option configure i(startup)  module return         diff running config startup config          when option configured i(intended)  module         return diff running config configuration         provided c(intended config) argument          when option configured i(running)  module         return diff running config respect         changes made device configuration      choices    startup    intended    running     diff ignore lines      description          use argument specify one lines         ignored diff   this used lines configuration         automatically updated system   this argument takes         list regular expressions exact line matches    intended config      description          the c(intended config) provides master configuration         node conform used check final         running config    this argument modify settings         remote device strictly used check compliance         current device configuration   when specifying         argument  task also modify c(diff against) value         set i(intended)    encrypt      description          this allows aruba controller passwords keys displayed plain         text set i(false) encrypted set i(true)          if set i(false)  setting encrypt end module run          backups still encrypted even set i(false)      type  bool     default   yes      version added   2 5       examples         name  configure top level configuration   aruba config      lines  hostname    inventory hostname       name  diff running config provided config   aruba config      diff  intended     intended      lookup( file    master cfg )        name  configure interface settings   aruba config      lines          description test interface         ip access group 1     parents  interface gigabitethernet 0 0 0    name  load new acl device   aruba config      lines          permit host 10 10 10 10         ipv6 permit host fda9 97d6 32a3 3e59  3333     parents  ip access list standard 1      ip access list standard 1     match  exact      return       commands    description  the set commands pushed remote device   returned  always   type  list   sample    hostname foo    vlan 1    name default   updates    description  the set commands pushed remote device   returned  always   type  list   sample    hostname foo    vlan 1    name default   backup path    description  the full path backup file   returned  backup yes   type  string   sample   playbooks ansible backup aruba config 2016 07 16 22 28 34       ansible module utils network aruba aruba import run commands  get config  load config ansible module utils network aruba aruba import aruba argument spec ansible module utils network aruba aruba import check args aruba check args ansible module utils basic import ansiblemodule ansible module utils network common config import networkconfig  dumps   def get running config(module  config none)      contents   module params  running config       contents          config              contents   config         else              contents   get config(module)     return networkconfig(contents contents)   def get candidate(module)      candidate   networkconfig()      module params  src            candidate load(module params  src  )     elif module params  lines            parents   module params  parents   list()         candidate add(module params  lines    parents parents)     return candidate   def save config(module  result)      result  changed     true     module check mode          run commands(module   copy running config startup config )     else          module warn( skipping command  copy running config startup config                         due check mode   configuration copied                        non volatile storage )   def main()          main entry point module execution             usr bin python       copyright  ansible team    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    recreate object order process diff ignore lines    make sure  encrypt enable  applied ever disabled ", "content": "#!/usr/bin/python\n#\n# Copyright: Ansible Team\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = \"\"\"\n---\nmodule: aruba_config\nversion_added: \"2.4\"\nauthor: \"James Mighion (@jmighion)\"\nshort_description: Manage Aruba configuration sections\ndescription:\n  - Aruba configurations use a simple block indent file syntax\n    for segmenting configuration into sections.  This module provides\n    an implementation for working with Aruba configuration sections in\n    a deterministic way.\nextends_documentation_fragment: aruba\noptions:\n  lines:\n    description:\n      - The ordered set of commands that should be configured in the\n        section.  The commands must be the exact same commands as found\n        in the device running-config.  Be sure to note the configuration\n        command syntax as some commands are automatically modified by the\n        device config parser.\n    aliases: ['commands']\n  parents:\n    description:\n      - The ordered set of parents that uniquely identify the section or hierarchy\n        the commands should be checked against.  If the parents argument\n        is omitted, the commands are checked against the set of top\n        level or global commands.\n  src:\n    description:\n      - Specifies the source path to the file that contains the configuration\n        or configuration template to load.  The path to the source file can\n        either be the full path on the Ansible control host or a relative\n        path from the playbook or role root directory.  This argument is mutually\n        exclusive with I(lines), I(parents).\n  before:\n    description:\n      - The ordered set of commands to push on to the command stack if\n        a change needs to be made.  This allows the playbook designer\n        the opportunity to perform configuration commands prior to pushing\n        any changes without affecting how the set of commands are matched\n        against the system.\n  after:\n    description:\n      - The ordered set of commands to append to the end of the command\n        stack if a change needs to be made.  Just like with I(before) this\n        allows the playbook designer to append a set of commands to be\n        executed after the command set.\n  match:\n    description:\n      - Instructs the module on the way to perform the matching of\n        the set of commands against the current device config.  If\n        match is set to I(line), commands are matched line by line.  If\n        match is set to I(strict), command lines are matched with respect\n        to position.  If match is set to I(exact), command lines\n        must be an equal match.  Finally, if match is set to I(none), the\n        module will not attempt to compare the source configuration with\n        the running configuration on the remote device.\n    default: line\n    choices: ['line', 'strict', 'exact', 'none']\n  replace:\n    description:\n      - Instructs the module on the way to perform the configuration\n        on the device.  If the replace argument is set to I(line) then\n        the modified lines are pushed to the device in configuration\n        mode.  If the replace argument is set to I(block) then the entire\n        command block is pushed to the device in configuration mode if any\n        line is not correct.\n    default: line\n    choices: ['line', 'block']\n  backup:\n    description:\n      - This argument will cause the module to create a full backup of\n        the current C(running-config) from the remote device before any\n        changes are made.  The backup file is written to the C(backup)\n        folder in the playbook root directory.  If the directory does not\n        exist, it is created.\n    type: bool\n    default: 'no'\n  running_config:\n    description:\n      - The module, by default, will connect to the remote device and\n        retrieve the current running-config to use as a base for comparing\n        against the contents of source.  There are times when it is not\n        desirable to have the task get the current running-config for\n        every task in a playbook.  The I(running_config) argument allows the\n        implementer to pass in the configuration to use as the base\n        config for comparison.\n    aliases: ['config']\n  save_when:\n    description:\n      - When changes are made to the device running-configuration, the\n        changes are not copied to non-volatile storage by default.  Using\n        this argument will change that before.  If the argument is set to\n        I(always), then the running-config will always be copied to the\n        startup-config and the I(modified) flag will always be set to\n        True.  If the argument is set to I(modified), then the running-config\n        will only be copied to the startup-config if it has changed since\n        the last save to startup-config.  If the argument is set to\n        I(never), the running-config will never be copied to the\n        startup-config.  If the argument is set to I(changed), then the running-config\n        will only be copied to the startup-config if the task has made a change.\n    default: never\n    choices: ['always', 'never', 'modified', 'changed']\n    version_added: \"2.5\"\n  diff_against:\n    description:\n      - When using the C(ansible-playbook --diff) command line argument\n        the module can generate diffs against different sources.\n      - When this option is configure as I(startup), the module will return\n        the diff of the running-config against the startup-config.\n      - When this option is configured as I(intended), the module will\n        return the diff of the running-config against the configuration\n        provided in the C(intended_config) argument.\n      - When this option is configured as I(running), the module will\n        return the before and after diff of the running-config with respect\n        to any changes made to the device configuration.\n    choices: ['startup', 'intended', 'running']\n  diff_ignore_lines:\n    description:\n      - Use this argument to specify one or more lines that should be\n        ignored during the diff.  This is used for lines in the configuration\n        that are automatically updated by the system.  This argument takes\n        a list of regular expressions or exact line matches.\n  intended_config:\n    description:\n      - The C(intended_config) provides the master configuration that\n        the node should conform to and is used to check the final\n        running-config against.   This argument will not modify any settings\n        on the remote device and is strictly used to check the compliance\n        of the current device's configuration against.  When specifying this\n        argument, the task should also modify the C(diff_against) value and\n        set it to I(intended).\n  encrypt:\n    description:\n      - This allows an Aruba controller's passwords and keys to be displayed in plain\n        text when set to I(false) or encrypted when set to I(true).\n        If set to I(false), the setting will re-encrypt at the end of the module run.\n        Backups are still encrypted even when set to I(false).\n    type: bool\n    default: 'yes'\n    version_added: \"2.5\"\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: configure top level configuration\n  aruba_config:\n    lines: hostname {{ inventory_hostname }}\n\n- name: diff the running-config against a provided config\n  aruba_config:\n    diff_against: intended\n    intended: \"{{ lookup('file', 'master.cfg') }}\"\n\n- name: configure interface settings\n  aruba_config:\n    lines:\n      - description test interface\n      - ip access-group 1 in\n    parents: interface gigabitethernet 0/0/0\n\n- name: load new acl into device\n  aruba_config:\n    lines:\n      - permit host 10.10.10.10\n      - ipv6 permit host fda9:97d6:32a3:3e59::3333\n    parents: ip access-list standard 1\n    before: no ip access-list standard 1\n    match: exact\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The set of commands that will be pushed to the remote device\n  returned: always\n  type: list\n  sample: ['hostname foo', 'vlan 1', 'name default']\nupdates:\n  description: The set of commands that will be pushed to the remote device\n  returned: always\n  type: list\n  sample: ['hostname foo', 'vlan 1', 'name default']\nbackup_path:\n  description: The full path to the backup file\n  returned: when backup is yes\n  type: string\n  sample: /playbooks/ansible/backup/aruba_config.2016-07-16@22:28:34\n\"\"\"\n\n\nfrom ansible.module_utils.network.aruba.aruba import run_commands, get_config, load_config\nfrom ansible.module_utils.network.aruba.aruba import aruba_argument_spec\nfrom ansible.module_utils.network.aruba.aruba import check_args as aruba_check_args\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.common.config import NetworkConfig, dumps\n\n\ndef get_running_config(module, config=None):\n    contents = module.params['running_config']\n    if not contents:\n        if config:\n            contents = config\n        else:\n            contents = get_config(module)\n    return NetworkConfig(contents=contents)\n\n\ndef get_candidate(module):\n    candidate = NetworkConfig()\n\n    if module.params['src']:\n        candidate.load(module.params['src'])\n    elif module.params['lines']:\n        parents = module.params['parents'] or list()\n        candidate.add(module.params['lines'], parents=parents)\n    return candidate\n\n\ndef save_config(module, result):\n    result['changed'] = True\n    if not module.check_mode:\n        run_commands(module, 'copy running-config startup-config')\n    else:\n        module.warn('Skipping command `copy running-config startup-config` '\n                    'due to check_mode.  Configuration not copied to '\n                    'non-volatile storage')\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n    argument_spec = dict(\n        src=dict(type='path'),\n\n        lines=dict(aliases=['commands'], type='list'),\n        parents=dict(type='list'),\n\n        before=dict(type='list'),\n        after=dict(type='list'),\n\n        match=dict(default='line', choices=['line', 'strict', 'exact', 'none']),\n        replace=dict(default='line', choices=['line', 'block']),\n\n        running_config=dict(aliases=['config']),\n        intended_config=dict(),\n\n        backup=dict(type='bool', default=False),\n\n        save_when=dict(choices=['always', 'never', 'modified', 'changed'], default='never'),\n\n        diff_against=dict(choices=['running', 'startup', 'intended']),\n        diff_ignore_lines=dict(type='list'),\n\n        encrypt=dict(type='bool', default=True),\n    )\n\n    argument_spec.update(aruba_argument_spec)\n\n    mutually_exclusive = [('lines', 'src'),\n                          ('parents', 'src')]\n\n    required_if = [('match', 'strict', ['lines']),\n                   ('match', 'exact', ['lines']),\n                   ('replace', 'block', ['lines']),\n                   ('diff_against', 'intended', ['intended_config'])]\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           mutually_exclusive=mutually_exclusive,\n                           required_if=required_if,\n                           supports_check_mode=True)\n\n    warnings = list()\n    aruba_check_args(module, warnings)\n    result = {'changed': False, 'warnings': warnings}\n\n    config = None\n\n    if module.params['backup'] or (module._diff and module.params['diff_against'] == 'running'):\n        contents = get_config(module)\n        config = NetworkConfig(contents=contents)\n        if module.params['backup']:\n            result['__backup__'] = contents\n\n    if not module.params['encrypt']:\n        run_commands(module, 'encrypt disable')\n\n    if any((module.params['src'], module.params['lines'])):\n        match = module.params['match']\n        replace = module.params['replace']\n\n        candidate = get_candidate(module)\n\n        if match != 'none':\n            config = get_running_config(module, config)\n            path = module.params['parents']\n            configobjs = candidate.difference(config, match=match, replace=replace, path=path)\n        else:\n            configobjs = candidate.items\n\n        if configobjs:\n            commands = dumps(configobjs, 'commands').split('\\n')\n\n            if module.params['before']:\n                commands[:0] = module.params['before']\n\n            if module.params['after']:\n                commands.extend(module.params['after'])\n\n            result['commands'] = commands\n            result['updates'] = commands\n\n            if not module.check_mode:\n                load_config(module, commands)\n\n            result['changed'] = True\n\n    running_config = None\n    startup_config = None\n\n    diff_ignore_lines = module.params['diff_ignore_lines']\n\n    if module.params['save_when'] == 'always':\n        save_config(module, result)\n    elif module.params['save_when'] == 'modified':\n        output = run_commands(module, ['show running-config', 'show startup-config'])\n\n        running_config = NetworkConfig(contents=output[0], ignore_lines=diff_ignore_lines)\n        startup_config = NetworkConfig(contents=output[1], ignore_lines=diff_ignore_lines)\n\n        if running_config.sha1 != startup_config.sha1:\n            save_config(module, result)\n    elif module.params['save_when'] == 'changed':\n        if result['changed']:\n            save_config(module, result)\n\n    if module._diff:\n        if not running_config:\n            output = run_commands(module, 'show running-config')\n            contents = output[0]\n        else:\n            contents = running_config.config_text\n\n        # recreate the object in order to process diff_ignore_lines\n        running_config = NetworkConfig(contents=contents, ignore_lines=diff_ignore_lines)\n\n        if module.params['diff_against'] == 'running':\n            if module.check_mode:\n                module.warn(\"unable to perform diff against running-config due to check mode\")\n                contents = None\n            else:\n                contents = config.config_text\n\n        elif module.params['diff_against'] == 'startup':\n            if not startup_config:\n                output = run_commands(module, 'show startup-config')\n                contents = output[0]\n            else:\n                contents = startup_config.config_text\n\n        elif module.params['diff_against'] == 'intended':\n            contents = module.params['intended_config']\n\n        if contents is not None:\n            base_config = NetworkConfig(contents=contents, ignore_lines=diff_ignore_lines)\n\n            if running_config.sha1 != base_config.sha1:\n                result.update({\n                    'changed': True,\n                    'diff': {'before': str(base_config), 'after': str(running_config)}\n                })\n\n    # make sure 'encrypt enable' is applied if it was ever disabled\n    if not module.params['encrypt']:\n        run_commands(module, 'encrypt enable')\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aruba_config.py", "id": "49c3ab60f6cbcffbfb5cdbf48275d2aa", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aruba/aruba_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}