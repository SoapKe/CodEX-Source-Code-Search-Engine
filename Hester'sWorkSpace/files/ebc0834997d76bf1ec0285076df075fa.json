{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    js_to_json,\n    parse_iso8601,\n    parse_filesize,\n)\n\n\nclass TagesschauPlayerIE(InfoExtractor):\n    IE_NAME = 'tagesschau:player'\n    _VALID_URL = r'https?://(?:www\\.)?tagesschau\\.de/multimedia/(?P<kind>audio|video)/(?P=kind)-(?P<id>\\d+)~player(?:_[^/?\n\n    _TESTS = [{\n        'url': 'http://www.tagesschau.de/multimedia/video/video-179517~player.html',\n        'md5': '8d09548d5c15debad38bee3a4d15ca21',\n        'info_dict': {\n            'id': '179517',\n            'ext': 'mp4',\n            'title': 'Marie Kristin Boese, ARD Berlin, \u00fcber den zuk\u00fcnftigen Kurs der AfD',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n            'formats': 'mincount:6',\n        },\n    }, {\n        'url': 'https://www.tagesschau.de/multimedia/audio/audio-29417~player.html',\n        'md5': '76e6eec6ebd40740671cf0a2c88617e5',\n        'info_dict': {\n            'id': '29417',\n            'ext': 'mp3',\n            'title': 'Trabi - Bye, bye Rennpappe',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n            'formats': 'mincount:2',\n        },\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/audio/audio-29417~player_autoplay-true.html',\n        'only_matching': True,\n    }]\n\n    _FORMATS = {\n        'xs': {'quality': 0},\n        's': {'width': 320, 'height': 180, 'quality': 1},\n        'm': {'width': 512, 'height': 288, 'quality': 2},\n        'l': {'width': 960, 'height': 540, 'quality': 3},\n        'xl': {'width': 1280, 'height': 720, 'quality': 4},\n        'xxl': {'quality': 5},\n    }\n\n    def _extract_via_api(self, kind, video_id):\n        info = self._download_json(\n            'https://www.tagesschau.de/api/multimedia/{0}/{0}-{1}.json'.format(kind, video_id),\n            video_id)\n        title = info['headline']\n        formats = []\n        for media in info['mediadata']:\n            for format_id, format_url in media.items():\n                if determine_ext(format_url) == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        format_url, video_id, 'mp4',\n                        entry_protocol='m3u8_native', m3u8_id='hls'))\n                else:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': format_id,\n                        'vcodec': 'none' if kind == 'audio' else None,\n                    })\n        self._sort_formats(formats)\n        timestamp = parse_iso8601(info.get('date'))\n        return {\n            'id': video_id,\n            'title': title,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        \n        \n        \n\n        \n        \n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(webpage).strip()\n        formats = []\n\n        for media_json in re.findall(r'({src\\s*:\\s*[\"\\']http[^}]+type\\s*:[^}]+})', webpage):\n            media = self._parse_json(js_to_json(media_json), video_id, fatal=False)\n            if not media:\n                continue\n            src = media.get('src')\n            if not src:\n                return\n            quality = media.get('quality')\n            kind = media.get('type', '').split('/')[0]\n            ext = determine_ext(src)\n            f = {\n                'url': src,\n                'format_id': '%s_%s' % (quality, ext) if quality else ext,\n                'ext': ext,\n                'vcodec': 'none' if kind == 'audio' else None,\n            }\n            f.update(self._FORMATS.get(quality, {}))\n            formats.append(f)\n\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass TagesschauIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tagesschau\\.de/(?P<path>[^/]+/(?:[^/]+/)*?(?P<id>[^/\n\n    _TESTS = [{\n        'url': 'http://www.tagesschau.de/multimedia/video/video-102143.html',\n        'md5': 'f7c27a0eff3bfe8c7727e65f8fe1b1e6',\n        'info_dict': {\n            'id': 'video-102143',\n            'ext': 'mp4',\n            'title': 'Regierungsumbildung in Athen: Neue Minister in Griechenland vereidigt',\n            'description': '18.07.2015 20:10 Uhr',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/ts-5727.html',\n        'md5': '3c54c1f6243d279b706bde660ceec633',\n        'info_dict': {\n            'id': 'ts-5727',\n            'ext': 'mp4',\n            'title': 'Sendung: tagesschau \\t04.12.2014 20:00 Uhr',\n            'description': 'md5:695c01bfd98b7e313c501386327aea59',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n        },\n    }, {\n        \n        'url': 'http://www.tagesschau.de/multimedia/audio/audio-29417.html',\n        'md5': '76e6eec6ebd40740671cf0a2c88617e5',\n        'info_dict': {\n            'id': 'audio-29417',\n            'ext': 'mp3',\n            'title': 'Trabi - Bye, bye Rennpappe',\n            'description': 'md5:8687dda862cbbe2cfb2df09b56341317',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n        },\n    }, {\n        \n        'url': 'http://www.tagesschau.de/inland/bnd-303.html',\n        'md5': 'e0916c623e85fc1d2b26b78f299d3958',\n        'info_dict': {\n            'id': 'bnd-303',\n            'ext': 'mp3',\n            'title': 'Viele Baustellen f\u00fcr neuen BND-Chef',\n            'description': 'md5:1e69a54be3e1255b2b07cdbce5bcd8b4',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://www.tagesschau.de/inland/afd-parteitag-135.html',\n        'info_dict': {\n            'id': 'afd-parteitag-135',\n            'title': 'M\u00f6chtegern-Underdog mit Machtanspruch',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/tsg-3771.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/tt-3827.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/nm-3475.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/weltspiegel-3167.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/tsvorzwanzig-959.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/bab/bab-3299~_bab-sendung-209.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/video/video-102303~_bab-sendung-211.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/100sekunden/index.html',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.tagesschau.de/wirtschaft/faq-freihandelszone-eu-usa-101.html',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TagesschauPlayerIE.suitable(url) else super(TagesschauIE, cls).suitable(url)\n\n    def _extract_formats(self, download_text, media_kind):\n        links = re.finditer(\n            r'<div class=\"button\" title=\"(?P<title>[^\"]*)\"><a href=\"(?P<url>[^\"]+)\">(?P<name>.+?)</a></div>',\n            download_text)\n        formats = []\n        for l in links:\n            link_url = l.group('url')\n            if not link_url:\n                continue\n            format_id = self._search_regex(\n                r'.*/[^/.]+\\.([^/]+)\\.[^/.]+$', link_url, 'format ID',\n                default=determine_ext(link_url))\n            format = {\n                'format_id': format_id,\n                'url': l.group('url'),\n                'format_name': l.group('name'),\n            }\n            title = l.group('title')\n            if title:\n                if media_kind.lower() == 'video':\n                    m = re.match(\n                        r,\n                        title)\n                    if m:\n                        format.update({\n                            'format_note': m.group('audio_desc'),\n                            'vcodec': m.group('vcodec'),\n                            'width': int(m.group('width')),\n                            'height': int(m.group('height')),\n                            'abr': int(m.group('abr')),\n                            'vbr': int(m.group('vbr')),\n                            'filesize_approx': parse_filesize(m.group('filesize_approx')),\n                        })\n                else:\n                    m = re.match(\n                        r'(?P<format>.+?)-Format\\s*:\\s*(?P<abr>\\d+)kbps\\s*,\\s*(?P<note>.+)',\n                        title)\n                    if m:\n                        format.update({\n                            'format_note': '%s, %s' % (m.group('format'), m.group('note')),\n                            'vcodec': 'none',\n                            'abr': int(m.group('abr')),\n                        })\n            formats.append(format)\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('path')\n        display_id = video_id.lstrip('-')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._html_search_regex(\n            r'<span[^>]*class=\"headline\"[^>]*>(.+?)</span>',\n            webpage, 'title', default=None) or self._og_search_title(webpage)\n\n        DOWNLOAD_REGEX = r'(?s)<p>Wir bieten dieses (?P<kind>Video|Audio) in folgenden Formaten zum Download an:</p>\\s*<div class=\"controls\">(?P<links>.*?)</div>\\s*<p>'\n\n        webpage_type = self._og_search_property('type', webpage, default=None)\n        if webpage_type == 'website':  \n            entries = []\n            for num, (entry_title, media_kind, download_text) in enumerate(re.findall(\n                    r'(?s)<p[^>]+class=\"infotext\"[^>]*>\\s*(?:<a[^>]+>)?\\s*<strong>(.+?)</strong>.*?</p>.*?%s' % DOWNLOAD_REGEX,\n                    webpage), 1):\n                entries.append({\n                    'id': '%s-%d' % (display_id, num),\n                    'title': '%s' % entry_title,\n                    'formats': self._extract_formats(download_text, media_kind),\n                })\n            if len(entries) > 1:\n                return self.playlist_result(entries, display_id, title)\n            formats = entries[0]['formats']\n        else:  \n            download_text = self._search_regex(\n                DOWNLOAD_REGEX, webpage, 'download links', group='links')\n            media_kind = self._search_regex(\n                DOWNLOAD_REGEX, webpage, 'media kind', default='Video', group='kind')\n            formats = self._extract_formats(download_text, media_kind)\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._html_search_regex(\n            r'(?s)<p class=\"teasertext\">(.*?)</p>',\n            webpage, 'description', default=None)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': display_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n            'description': description,\n        }\n", "comments": "(?x)\n                            Video:\\s*(?P<vcodec>[a-zA-Z0-9/._-]+)\\s*&\\#10;\n                            (?P<width>[0-9]+)x(?P<height>[0-9]+)px&\\#10;\n                            (?P<vbr>[0-9]+)kbps&\\#10;\n                            Audio:\\s*(?P<abr>[0-9]+)kbps,\\s*(?P<audio_desc>[A-Za-z\\.0-9]+)&\\#10;\n                            Gr&ouml;&szlig;e:\\s*(?P<filesize_approx>[0-9.,]+\\s+[a-zA-Z]*B)\n)\n# coding: utf-8\n#&]+)?\\.html'\n# kind = mobj.group('kind').lower()\n# if kind == 'video':\n#     return self._extract_via_api(kind, video_id)\n# JSON api does not provide some audio formats (e.g. ogg) thus\n# extractiong audio via webpage\n#?]+?(?:-?[0-9]+)?))(?:~_?[^/#?]+?)?\\.html'\n# exclusive audio\n# audio in article\n# playlist article with collapsing sections\n# Article\n# Assume single video\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    js_to_json,\n    parse_iso8601,\n    parse_filesize,\n)\n\n\nclass TagesschauPlayerIE(InfoExtractor):\n    IE_NAME = 'tagesschau:player'\n    _VALID_URL = r'https?://(?:www\\.)?tagesschau\\.de/multimedia/(?P<kind>audio|video)/(?P=kind)-(?P<id>\\d+)~player(?:_[^/?#&]+)?\\.html'\n\n    _TESTS = [{\n        'url': 'http://www.tagesschau.de/multimedia/video/video-179517~player.html',\n        'md5': '8d09548d5c15debad38bee3a4d15ca21',\n        'info_dict': {\n            'id': '179517',\n            'ext': 'mp4',\n            'title': 'Marie Kristin Boese, ARD Berlin, \u00fcber den zuk\u00fcnftigen Kurs der AfD',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n            'formats': 'mincount:6',\n        },\n    }, {\n        'url': 'https://www.tagesschau.de/multimedia/audio/audio-29417~player.html',\n        'md5': '76e6eec6ebd40740671cf0a2c88617e5',\n        'info_dict': {\n            'id': '29417',\n            'ext': 'mp3',\n            'title': 'Trabi - Bye, bye Rennpappe',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n            'formats': 'mincount:2',\n        },\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/audio/audio-29417~player_autoplay-true.html',\n        'only_matching': True,\n    }]\n\n    _FORMATS = {\n        'xs': {'quality': 0},\n        's': {'width': 320, 'height': 180, 'quality': 1},\n        'm': {'width': 512, 'height': 288, 'quality': 2},\n        'l': {'width': 960, 'height': 540, 'quality': 3},\n        'xl': {'width': 1280, 'height': 720, 'quality': 4},\n        'xxl': {'quality': 5},\n    }\n\n    def _extract_via_api(self, kind, video_id):\n        info = self._download_json(\n            'https://www.tagesschau.de/api/multimedia/{0}/{0}-{1}.json'.format(kind, video_id),\n            video_id)\n        title = info['headline']\n        formats = []\n        for media in info['mediadata']:\n            for format_id, format_url in media.items():\n                if determine_ext(format_url) == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        format_url, video_id, 'mp4',\n                        entry_protocol='m3u8_native', m3u8_id='hls'))\n                else:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': format_id,\n                        'vcodec': 'none' if kind == 'audio' else None,\n                    })\n        self._sort_formats(formats)\n        timestamp = parse_iso8601(info.get('date'))\n        return {\n            'id': video_id,\n            'title': title,\n            'timestamp': timestamp,\n            'formats': formats,\n        }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        # kind = mobj.group('kind').lower()\n        # if kind == 'video':\n        #     return self._extract_via_api(kind, video_id)\n\n        # JSON api does not provide some audio formats (e.g. ogg) thus\n        # extractiong audio via webpage\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(webpage).strip()\n        formats = []\n\n        for media_json in re.findall(r'({src\\s*:\\s*[\"\\']http[^}]+type\\s*:[^}]+})', webpage):\n            media = self._parse_json(js_to_json(media_json), video_id, fatal=False)\n            if not media:\n                continue\n            src = media.get('src')\n            if not src:\n                return\n            quality = media.get('quality')\n            kind = media.get('type', '').split('/')[0]\n            ext = determine_ext(src)\n            f = {\n                'url': src,\n                'format_id': '%s_%s' % (quality, ext) if quality else ext,\n                'ext': ext,\n                'vcodec': 'none' if kind == 'audio' else None,\n            }\n            f.update(self._FORMATS.get(quality, {}))\n            formats.append(f)\n\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass TagesschauIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tagesschau\\.de/(?P<path>[^/]+/(?:[^/]+/)*?(?P<id>[^/#?]+?(?:-?[0-9]+)?))(?:~_?[^/#?]+?)?\\.html'\n\n    _TESTS = [{\n        'url': 'http://www.tagesschau.de/multimedia/video/video-102143.html',\n        'md5': 'f7c27a0eff3bfe8c7727e65f8fe1b1e6',\n        'info_dict': {\n            'id': 'video-102143',\n            'ext': 'mp4',\n            'title': 'Regierungsumbildung in Athen: Neue Minister in Griechenland vereidigt',\n            'description': '18.07.2015 20:10 Uhr',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/ts-5727.html',\n        'md5': '3c54c1f6243d279b706bde660ceec633',\n        'info_dict': {\n            'id': 'ts-5727',\n            'ext': 'mp4',\n            'title': 'Sendung: tagesschau \\t04.12.2014 20:00 Uhr',\n            'description': 'md5:695c01bfd98b7e313c501386327aea59',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n        },\n    }, {\n        # exclusive audio\n        'url': 'http://www.tagesschau.de/multimedia/audio/audio-29417.html',\n        'md5': '76e6eec6ebd40740671cf0a2c88617e5',\n        'info_dict': {\n            'id': 'audio-29417',\n            'ext': 'mp3',\n            'title': 'Trabi - Bye, bye Rennpappe',\n            'description': 'md5:8687dda862cbbe2cfb2df09b56341317',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n        },\n    }, {\n        # audio in article\n        'url': 'http://www.tagesschau.de/inland/bnd-303.html',\n        'md5': 'e0916c623e85fc1d2b26b78f299d3958',\n        'info_dict': {\n            'id': 'bnd-303',\n            'ext': 'mp3',\n            'title': 'Viele Baustellen f\u00fcr neuen BND-Chef',\n            'description': 'md5:1e69a54be3e1255b2b07cdbce5bcd8b4',\n            'thumbnail': r're:^https?:.*\\.jpg$',\n        },\n    }, {\n        'url': 'http://www.tagesschau.de/inland/afd-parteitag-135.html',\n        'info_dict': {\n            'id': 'afd-parteitag-135',\n            'title': 'M\u00f6chtegern-Underdog mit Machtanspruch',\n        },\n        'playlist_count': 2,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/tsg-3771.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/tt-3827.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/nm-3475.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/weltspiegel-3167.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/tsvorzwanzig-959.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/sendung/bab/bab-3299~_bab-sendung-209.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/multimedia/video/video-102303~_bab-sendung-211.html',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.tagesschau.de/100sekunden/index.html',\n        'only_matching': True,\n    }, {\n        # playlist article with collapsing sections\n        'url': 'http://www.tagesschau.de/wirtschaft/faq-freihandelszone-eu-usa-101.html',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if TagesschauPlayerIE.suitable(url) else super(TagesschauIE, cls).suitable(url)\n\n    def _extract_formats(self, download_text, media_kind):\n        links = re.finditer(\n            r'<div class=\"button\" title=\"(?P<title>[^\"]*)\"><a href=\"(?P<url>[^\"]+)\">(?P<name>.+?)</a></div>',\n            download_text)\n        formats = []\n        for l in links:\n            link_url = l.group('url')\n            if not link_url:\n                continue\n            format_id = self._search_regex(\n                r'.*/[^/.]+\\.([^/]+)\\.[^/.]+$', link_url, 'format ID',\n                default=determine_ext(link_url))\n            format = {\n                'format_id': format_id,\n                'url': l.group('url'),\n                'format_name': l.group('name'),\n            }\n            title = l.group('title')\n            if title:\n                if media_kind.lower() == 'video':\n                    m = re.match(\n                        r'''(?x)\n                            Video:\\s*(?P<vcodec>[a-zA-Z0-9/._-]+)\\s*&\\#10;\n                            (?P<width>[0-9]+)x(?P<height>[0-9]+)px&\\#10;\n                            (?P<vbr>[0-9]+)kbps&\\#10;\n                            Audio:\\s*(?P<abr>[0-9]+)kbps,\\s*(?P<audio_desc>[A-Za-z\\.0-9]+)&\\#10;\n                            Gr&ouml;&szlig;e:\\s*(?P<filesize_approx>[0-9.,]+\\s+[a-zA-Z]*B)''',\n                        title)\n                    if m:\n                        format.update({\n                            'format_note': m.group('audio_desc'),\n                            'vcodec': m.group('vcodec'),\n                            'width': int(m.group('width')),\n                            'height': int(m.group('height')),\n                            'abr': int(m.group('abr')),\n                            'vbr': int(m.group('vbr')),\n                            'filesize_approx': parse_filesize(m.group('filesize_approx')),\n                        })\n                else:\n                    m = re.match(\n                        r'(?P<format>.+?)-Format\\s*:\\s*(?P<abr>\\d+)kbps\\s*,\\s*(?P<note>.+)',\n                        title)\n                    if m:\n                        format.update({\n                            'format_note': '%s, %s' % (m.group('format'), m.group('note')),\n                            'vcodec': 'none',\n                            'abr': int(m.group('abr')),\n                        })\n            formats.append(format)\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id') or mobj.group('path')\n        display_id = video_id.lstrip('-')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._html_search_regex(\n            r'<span[^>]*class=\"headline\"[^>]*>(.+?)</span>',\n            webpage, 'title', default=None) or self._og_search_title(webpage)\n\n        DOWNLOAD_REGEX = r'(?s)<p>Wir bieten dieses (?P<kind>Video|Audio) in folgenden Formaten zum Download an:</p>\\s*<div class=\"controls\">(?P<links>.*?)</div>\\s*<p>'\n\n        webpage_type = self._og_search_property('type', webpage, default=None)\n        if webpage_type == 'website':  # Article\n            entries = []\n            for num, (entry_title, media_kind, download_text) in enumerate(re.findall(\n                    r'(?s)<p[^>]+class=\"infotext\"[^>]*>\\s*(?:<a[^>]+>)?\\s*<strong>(.+?)</strong>.*?</p>.*?%s' % DOWNLOAD_REGEX,\n                    webpage), 1):\n                entries.append({\n                    'id': '%s-%d' % (display_id, num),\n                    'title': '%s' % entry_title,\n                    'formats': self._extract_formats(download_text, media_kind),\n                })\n            if len(entries) > 1:\n                return self.playlist_result(entries, display_id, title)\n            formats = entries[0]['formats']\n        else:  # Assume single video\n            download_text = self._search_regex(\n                DOWNLOAD_REGEX, webpage, 'download links', group='links')\n            media_kind = self._search_regex(\n                DOWNLOAD_REGEX, webpage, 'media kind', default='Video', group='kind')\n            formats = self._extract_formats(download_text, media_kind)\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._html_search_regex(\n            r'(?s)<p class=\"teasertext\">(.*?)</p>',\n            webpage, 'description', default=None)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': display_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n            'description': description,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tagesschau.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tagesschau.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}