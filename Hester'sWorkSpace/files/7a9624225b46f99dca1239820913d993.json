{"author": "gunthercox", "code": "from tests.base_case import ChatBotTestCase\nfrom mock import Mock, MagicMock\nfrom chatterbot.trainers import TwitterTrainer\nimport os\nimport json\n\n\ndef get_search_side_effect(*args, **kwargs):\n    from twitter import Status\n\n    current_directory = os.path.dirname(os.path.realpath(__file__))\n    data_file = os.path.join(\n        current_directory,\n        'test_data',\n        'get_search.json'\n    )\n    tweet_data = open(data_file)\n    data = json.loads(tweet_data.read())\n    tweet_data.close()\n\n    return [Status.NewFromJsonDict(x) for x in data.get('statuses')]\n\n\ndef get_status_side_effect(*args, **kwargs):\n    from twitter import Status\n\n    current_directory = os.path.dirname(os.path.realpath(__file__))\n    data_file = os.path.join(\n        current_directory,\n        'test_data',\n        'get_search.json'\n    )\n    tweet_data = open(data_file)\n    data = json.loads(tweet_data.read())\n    tweet_data.close()\n\n    return Status.NewFromJsonDict(data.get('statuses')[1])\n\n\nclass TwitterTrainerTestCase(ChatBotTestCase):\n\n    def setUp(self):\n        \n        super(TwitterTrainerTestCase, self).setUp()\n\n        self.trainer = TwitterTrainer(\n            self.chatbot.storage,\n            twitter_consumer_key='twitter_consumer_key',\n            twitter_consumer_secret='twitter_consumer_secret',\n            twitter_access_token_key='twitter_access_token_key',\n            twitter_access_token_secret='twitter_access_token_secret',\n            show_training_progress=False\n        )\n        self.trainer.api = Mock()\n\n        self.trainer.api.GetSearch = MagicMock(side_effect=get_search_side_effect)\n        self.trainer.api.GetStatus = MagicMock(side_effect=get_status_side_effect)\n\n    def test_random_word(self):\n        word = self.trainer.random_word('random')\n\n        self.assertTrue(len(word) > 3)\n\n    def test_get_words_from_tweets(self):\n        tweets = get_search_side_effect()\n        words = self.trainer.get_words_from_tweets(tweets)\n\n        self.assertIn('about', words)\n        self.assertIn('favorite', words)\n        self.assertIn('things', words)\n\n    def test_get_statements(self):\n        statements = self.trainer.get_statements()\n\n        self.assertEqual(len(statements), 1)\n\n    def test_train(self):\n        self.trainer.train()\n\n        statement_created = self.trainer.storage.filter()\n        self.assertTrue(len(statement_created))\n", "comments": "            instantiate trainer class testing              ", "content": "from tests.base_case import ChatBotTestCase\nfrom mock import Mock, MagicMock\nfrom chatterbot.trainers import TwitterTrainer\nimport os\nimport json\n\n\ndef get_search_side_effect(*args, **kwargs):\n    from twitter import Status\n\n    current_directory = os.path.dirname(os.path.realpath(__file__))\n    data_file = os.path.join(\n        current_directory,\n        'test_data',\n        'get_search.json'\n    )\n    tweet_data = open(data_file)\n    data = json.loads(tweet_data.read())\n    tweet_data.close()\n\n    return [Status.NewFromJsonDict(x) for x in data.get('statuses')]\n\n\ndef get_status_side_effect(*args, **kwargs):\n    from twitter import Status\n\n    current_directory = os.path.dirname(os.path.realpath(__file__))\n    data_file = os.path.join(\n        current_directory,\n        'test_data',\n        'get_search.json'\n    )\n    tweet_data = open(data_file)\n    data = json.loads(tweet_data.read())\n    tweet_data.close()\n\n    return Status.NewFromJsonDict(data.get('statuses')[1])\n\n\nclass TwitterTrainerTestCase(ChatBotTestCase):\n\n    def setUp(self):\n        \"\"\"\n        Instantiate the trainer class for testing.\n        \"\"\"\n        super(TwitterTrainerTestCase, self).setUp()\n\n        self.trainer = TwitterTrainer(\n            self.chatbot.storage,\n            twitter_consumer_key='twitter_consumer_key',\n            twitter_consumer_secret='twitter_consumer_secret',\n            twitter_access_token_key='twitter_access_token_key',\n            twitter_access_token_secret='twitter_access_token_secret',\n            show_training_progress=False\n        )\n        self.trainer.api = Mock()\n\n        self.trainer.api.GetSearch = MagicMock(side_effect=get_search_side_effect)\n        self.trainer.api.GetStatus = MagicMock(side_effect=get_status_side_effect)\n\n    def test_random_word(self):\n        word = self.trainer.random_word('random')\n\n        self.assertTrue(len(word) > 3)\n\n    def test_get_words_from_tweets(self):\n        tweets = get_search_side_effect()\n        words = self.trainer.get_words_from_tweets(tweets)\n\n        self.assertIn('about', words)\n        self.assertIn('favorite', words)\n        self.assertIn('things', words)\n\n    def test_get_statements(self):\n        statements = self.trainer.get_statements()\n\n        self.assertEqual(len(statements), 1)\n\n    def test_train(self):\n        self.trainer.train()\n\n        statement_created = self.trainer.storage.filter()\n        self.assertTrue(len(statement_created))\n", "description": "ChatterBot is a machine learning, conversational dialog engine for creating chat bots", "file_name": "test_twitter_trainer.py", "id": "7a9624225b46f99dca1239820913d993", "language": "Python", "project_name": "ChatterBot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/gunthercox-ChatterBot/gunthercox-ChatterBot-f20c412/tests/training_tests/test_twitter_trainer.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:44:53Z", "url": "https://github.com/gunthercox/ChatterBot", "wiki": true}