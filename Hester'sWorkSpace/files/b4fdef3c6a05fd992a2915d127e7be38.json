{"author": "donnemartin", "code": " -*- coding: utf-8 -*-\n\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\n\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nfrom datetime import datetime\nimport mock\nimport pytz\n\nfrom gitsome.lib.github3 import null\nfrom gitsome.lib.github3.exceptions import UnprocessableEntity\n\n\nclass MockEmail(object):\n\n    def __init__(self, email, primary=False, verified=False):\n        self.email = email\n        self.primary = primary\n        self.verified = verified\n\n\nclass MockUser(object):\n\n    def __init__(self, login, user_type='User'):\n        self.login = login\n        self.repositories = {}\n        self.emails = []\n        self.avatar_url = 'https://www.github.com'\n        self.company = 'bigcorp'\n        self.location = 'interwebz'\n        self.email = login + '@foo.com'\n        self.type = user_type\n        self.followers_count = 0\n        self.following_count = 0\n        self.feed_events = []\n\n    def events(self, public):\n        feed_events = []\n        feed_events.append(MockEvent(\n            event_type='CommitCommentEvent',\n            payload={\n                'comment': MockRepoComment(),\n            }))\n        feed_events.append(MockEvent(\n            event_type='CreateEvent',\n            payload={\n                'ref_type': 'branch',\n                'ref': 'master',\n                'description': None,\n            }))\n        feed_events.append(MockEvent(\n            event_type='FollowEvent'))\n        feed_events.append(MockEvent(\n            event_type='ForkEvent'))\n        feed_events.append(MockEvent(\n            event_type='IssueCommentEvent',\n            payload={\n                'comment': MockIssueComment('foo'),\n                'issue': MockIssue('1', MockRepo(self, 'repo1'), 'foo'),\n            }))\n        feed_events.append(MockEvent(\n            event_type='IssuesEvent',\n            payload={\n                'action': 'closed',\n                'issue': MockIssue('1', MockRepo(self, 'repo1'), 'foo'),\n            }))\n        feed_events.append(MockEvent(\n            event_type='PullRequestEvent',\n            payload={\n                'action': 'closed',\n                'pull_request': MockIssue('1', MockRepo(self, 'repo1'), 'foo'),\n            }))\n        feed_events.append(MockEvent(\n            event_type='PushEvent',\n            payload={\n                'ref': 'refs/heads/master',\n                'commits': [{'url': 'https://api.github.com/repos/donnemartin/gitsome/commits/5ee4d1b20ee7cb16cd5be19b103301541a41003f', 'message': 'Fix GitHubCli class docstring', 'distinct': True, 'author': {'email': 'donne.martin@gmail.com', 'name': 'Donne Martin'}, 'sha': '5ee4d1b20ee7cb16cd5be19b103301541a41003f'}, {'url': 'https://api.github.com/repos/donnemartin/gitsome/commits/fc2309b645313646a3792eca9e0e9168cf25b267', 'message': 'Update gh configure docstring', 'distinct': True, 'author': {'email': 'donne.martin@gmail.com', 'name': 'Donne Martin'}, 'sha': 'fc2309b645313646a3792eca9e0e9168cf25b267'}, {'url': 'https://api.github.com/repos/donnemartin/gitsome/commits/dde19b7685ad7a07872fea1b4dc8019585322fdb', 'message': 'Update gh create-comment docstring', 'distinct': True, 'author': {'email': 'donne.martin@gmail.com', 'name': 'Donne Martin'}, 'sha': 'dde19b7685ad7a07872fea1b4dc8019585322fdb'}]   NOQA\n            }))\n        mock_release_tag = mock.Mock()\n        mock_release_tag.tag_name = '0.5.0'\n        feed_events.append(MockEvent(\n            event_type='ReleaseEvent',\n            payload={\n                'release': mock_release_tag,\n            }))\n        return feed_events\n\n    def raise_mock_unprocessableentity(self):\n        response = mock.Mock()\n        response.json = lambda: exec('raise(Exception())')\n        response.content = 'foobar'\n        raise UnprocessableEntity(response)\n\n    def create_repo(self, name, desc='', private=False):\n        if name in self.repositories:\n            self.raise_mock_unprocessableentity()\n        repo = MockRepo(self, name, desc, private)\n        self.repositories.update({repo.full_name: repo})\n        return repo\n\n\nclass MockRepo(object):\n\n    def __init__(self, user, full_name, description='', private=False):\n        self.user = user\n        self.full_name = full_name\n        self.description = description\n        self.private = private\n        self.issues = {}\n        self.clone_url = 'https://github.com/octocat/spoon-knife'\n        self.stargazers_count = 1\n        self.forks_count = 1\n        self.language = ''\n        self.updated_at = ''\n        self.repository = 'foobar'\n\n    def __lt__(self, other):\n        return self.full_name < other.full_name\n\n    def gen_key(self):\n        return len(self.issues) + 1\n\n    def create_issue(self, issue_title, issue_desc=''):\n        number = self.gen_key()\n        issue = MockIssue(number, self, issue_title, issue_desc)\n        self.issues.update({number: issue})\n        return issue\n\n    def pull_requests(self):\n        return list(self.issues.values())\n\n\nclass MockIssue(object):\n\n    def __init__(self, number, repository, title, body=''):\n        self.number = number\n        self.repository = (repository.user.login, repository.full_name)\n        self.title = title\n        self.body = body\n        self.state = 'open'\n        self.comments_count = 1\n        self.assignee = 'user1'\n        self.user = 'user2'\n        self.created_at = ''\n        self.comments = []\n        self.issue = 'foobar'\n\n    def create_comment(self, body):\n        issue_comment = MockIssueComment(body)\n        self.comments.append(issue_comment)\n        return issue_comment\n\n\nclass MockIssueComment(object):\n\n    def __init__(self, body):\n        self.body = body\n\n\nclass MockRepoComment(object):\n\n    def __init__(self):\n        self.commit_id = 'AAA23e2c6cb6997d25cfe61673aea6d701e9bZZZ'\n        self.body = 'foo'\n\n\nclass MockLicense(object):\n\n    def __init__(self, key, name):\n        self.key = key\n        self.name = name\n\n\nclass MockThread(object):\n\n    def __init__(self, thread_type, title, unread):\n        self.subject = {\n            'title': title,\n            'type': thread_type,\n            'url': 'https://api.github.com/repos/foo/bar/pulls/1',\n        }\n        self.unread = unread\n        self.updated_at = ''\n\n\nclass MockEvent(object):\n\n    def __init__(self, event_type, payload=''):\n        self.id = 1\n        self.created_at = datetime.now(pytz.utc)\n        self.actor = 'donnemartin'\n        self.org = 'org'\n        self.type = event_type\n        self.payload = payload\n        self.repo = ('user1', 'repo1')\n        self.public = True\n\n\nclass MockGitHubApi(object):\n\n    def __init__(self):\n        self.users = {}\n        self.current_user = 'user1'\n        self.ratelimit_remaining = 5000\n        self._generate_mock_data()\n\n    def _generate_mock_data(self):\n        user1 = MockUser(self.current_user, 'User')\n        user1_repo1 = user1.create_repo('repo1')\n        user1_repo1.create_issue('title1', 'body1')\n        user1_repo1.create_issue('title2', 'body2')\n        user1_repo1.create_issue('title3', 'body3')\n        user1.emails.extend([\n            MockEmail('foo@baz.com', True, False),\n            MockEmail('bar@baz.com', False, True),\n        ])\n        user2 = MockUser('user2', 'Organization')\n        self.users.update({\n            user1.login: user1,\n            user2.login: user2,\n        })\n\n    def create_issue(self, user_login, repo_name, issue_title, issue_desc):\n        try:\n            user = self.users[user_login]\n            repo = user.repositories[repo_name]\n            issue = repo.create_issue(issue_title, issue_desc)\n            return issue\n        except KeyError:\n            return null.NullObject('Issue')\n\n    def create_repository(self, repo_name, repo_desc='', private=False):\n        user = self.users[self.current_user]\n        return user.create_repo(repo_name, repo_desc, private)\n\n    def emails(self):\n        user = self.users[self.current_user]\n        return user.emails\n\n    def emojis(self, pager=False):\n        return [\n            'dolls',\n            'palm_tree',\n            'uk',\n            '100',\n            'baby_chick',\n        ]\n\n    def followers_of(self, user_login):\n        return [\n            MockUser('foo1'),\n            MockUser('foo2'),\n            MockUser('foo3'),\n        ]\n\n    def followed_by(self, user_login):\n        return self.followers_of(user_login)\n\n    def gitignore_template(self, language):\n        if language == 'valid_language':\n            return 'template'\n        else:\n            return ''\n\n    def gitignore_templates(self):\n        return [\n            'Actionscript',\n            'Ada',\n            'Agda',\n            'Android',\n            'AppEngine',\n        ]\n\n    def issue(self, user_login, repo_name, number):\n        try:\n            user = self.users[user_login]\n            repo = user.repositories[repo_name]\n            return repo.issues[int(number)]\n        except KeyError:\n            return null.NullObject('Issue')\n\n    def issues(self, issue_filter='subscribed', issue_state='open'):\n        user = self.users[self.current_user]\n        repo = user.repositories['repo1']\n        issues_dict = repo.issues\n        issues = list(issues_dict.values())\n        return issues\n\n    def license(self, license):\n        if license == 'valid_license':\n            template = mock.Mock()\n            template.body = 'template'\n            return template\n        else:\n            return null.NullObject('License')\n\n    def licenses(self):\n        return [\n            MockLicense('mit', '(MIT License)'),\n            MockLicense('gpl-2.0', '(GNU General Public License v2.0)'),\n            MockLicense('bsd-2-clause', '(BSD 2-clause \"Simplified\" License)'),\n            MockLicense('isc', '(ISC License)'),\n            MockLicense('epl-1.0', '(Eclipse Public License 1.0)'),\n        ]\n\n    def notifications(self, all=True, participating=False):\n        return [\n            MockThread('type1', 'title1', True),\n            MockThread('type2', 'title2', False),\n            MockThread('type3', 'title3', True),\n        ]\n\n    def octocat(self, say):\n        return say\n\n    def pull_request(self, owner, repository, number):\n        pull_requests = self.issues()\n        return pull_requests[0]\n\n    def search_issues(self, query):\n        return self.issues()\n\n    def search_repositories(self, query, sort):\n        return self.repositories()\n\n    def repositories(self, user_id=None):\n        if user_id is None:\n            user_id = self.current_user\n        user = self.users[user_id]\n        repos = list(user.repositories.values())\n        repos_sorted = sorted(repos)\n        return repos_sorted\n\n    def user(self, user_id):\n        try:\n            return self.users[user_id]\n        except KeyError:\n            return null.NullObject('User')\n", "comments": "      coding  utf 8        copyright 2015 donne martin  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   www apache org licenses license 2 0        license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     noqa ", "content": "# -*- coding: utf-8 -*-\n\n# Copyright 2015 Donne Martin. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n\nfrom __future__ import unicode_literals\nfrom __future__ import print_function\n\nfrom datetime import datetime\nimport mock\nimport pytz\n\nfrom gitsome.lib.github3 import null\nfrom gitsome.lib.github3.exceptions import UnprocessableEntity\n\n\nclass MockEmail(object):\n\n    def __init__(self, email, primary=False, verified=False):\n        self.email = email\n        self.primary = primary\n        self.verified = verified\n\n\nclass MockUser(object):\n\n    def __init__(self, login, user_type='User'):\n        self.login = login\n        self.repositories = {}\n        self.emails = []\n        self.avatar_url = 'https://www.github.com'\n        self.company = 'bigcorp'\n        self.location = 'interwebz'\n        self.email = login + '@foo.com'\n        self.type = user_type\n        self.followers_count = 0\n        self.following_count = 0\n        self.feed_events = []\n\n    def events(self, public):\n        feed_events = []\n        feed_events.append(MockEvent(\n            event_type='CommitCommentEvent',\n            payload={\n                'comment': MockRepoComment(),\n            }))\n        feed_events.append(MockEvent(\n            event_type='CreateEvent',\n            payload={\n                'ref_type': 'branch',\n                'ref': 'master',\n                'description': None,\n            }))\n        feed_events.append(MockEvent(\n            event_type='FollowEvent'))\n        feed_events.append(MockEvent(\n            event_type='ForkEvent'))\n        feed_events.append(MockEvent(\n            event_type='IssueCommentEvent',\n            payload={\n                'comment': MockIssueComment('foo'),\n                'issue': MockIssue('1', MockRepo(self, 'repo1'), 'foo'),\n            }))\n        feed_events.append(MockEvent(\n            event_type='IssuesEvent',\n            payload={\n                'action': 'closed',\n                'issue': MockIssue('1', MockRepo(self, 'repo1'), 'foo'),\n            }))\n        feed_events.append(MockEvent(\n            event_type='PullRequestEvent',\n            payload={\n                'action': 'closed',\n                'pull_request': MockIssue('1', MockRepo(self, 'repo1'), 'foo'),\n            }))\n        feed_events.append(MockEvent(\n            event_type='PushEvent',\n            payload={\n                'ref': 'refs/heads/master',\n                'commits': [{'url': 'https://api.github.com/repos/donnemartin/gitsome/commits/5ee4d1b20ee7cb16cd5be19b103301541a41003f', 'message': 'Fix GitHubCli class docstring', 'distinct': True, 'author': {'email': 'donne.martin@gmail.com', 'name': 'Donne Martin'}, 'sha': '5ee4d1b20ee7cb16cd5be19b103301541a41003f'}, {'url': 'https://api.github.com/repos/donnemartin/gitsome/commits/fc2309b645313646a3792eca9e0e9168cf25b267', 'message': 'Update gh configure docstring', 'distinct': True, 'author': {'email': 'donne.martin@gmail.com', 'name': 'Donne Martin'}, 'sha': 'fc2309b645313646a3792eca9e0e9168cf25b267'}, {'url': 'https://api.github.com/repos/donnemartin/gitsome/commits/dde19b7685ad7a07872fea1b4dc8019585322fdb', 'message': 'Update gh create-comment docstring', 'distinct': True, 'author': {'email': 'donne.martin@gmail.com', 'name': 'Donne Martin'}, 'sha': 'dde19b7685ad7a07872fea1b4dc8019585322fdb'}]  # NOQA\n            }))\n        mock_release_tag = mock.Mock()\n        mock_release_tag.tag_name = '0.5.0'\n        feed_events.append(MockEvent(\n            event_type='ReleaseEvent',\n            payload={\n                'release': mock_release_tag,\n            }))\n        return feed_events\n\n    def raise_mock_unprocessableentity(self):\n        response = mock.Mock()\n        response.json = lambda: exec('raise(Exception())')\n        response.content = 'foobar'\n        raise UnprocessableEntity(response)\n\n    def create_repo(self, name, desc='', private=False):\n        if name in self.repositories:\n            self.raise_mock_unprocessableentity()\n        repo = MockRepo(self, name, desc, private)\n        self.repositories.update({repo.full_name: repo})\n        return repo\n\n\nclass MockRepo(object):\n\n    def __init__(self, user, full_name, description='', private=False):\n        self.user = user\n        self.full_name = full_name\n        self.description = description\n        self.private = private\n        self.issues = {}\n        self.clone_url = 'https://github.com/octocat/spoon-knife'\n        self.stargazers_count = 1\n        self.forks_count = 1\n        self.language = ''\n        self.updated_at = ''\n        self.repository = 'foobar'\n\n    def __lt__(self, other):\n        return self.full_name < other.full_name\n\n    def gen_key(self):\n        return len(self.issues) + 1\n\n    def create_issue(self, issue_title, issue_desc=''):\n        number = self.gen_key()\n        issue = MockIssue(number, self, issue_title, issue_desc)\n        self.issues.update({number: issue})\n        return issue\n\n    def pull_requests(self):\n        return list(self.issues.values())\n\n\nclass MockIssue(object):\n\n    def __init__(self, number, repository, title, body=''):\n        self.number = number\n        self.repository = (repository.user.login, repository.full_name)\n        self.title = title\n        self.body = body\n        self.state = 'open'\n        self.comments_count = 1\n        self.assignee = 'user1'\n        self.user = 'user2'\n        self.created_at = ''\n        self.comments = []\n        self.issue = 'foobar'\n\n    def create_comment(self, body):\n        issue_comment = MockIssueComment(body)\n        self.comments.append(issue_comment)\n        return issue_comment\n\n\nclass MockIssueComment(object):\n\n    def __init__(self, body):\n        self.body = body\n\n\nclass MockRepoComment(object):\n\n    def __init__(self):\n        self.commit_id = 'AAA23e2c6cb6997d25cfe61673aea6d701e9bZZZ'\n        self.body = 'foo'\n\n\nclass MockLicense(object):\n\n    def __init__(self, key, name):\n        self.key = key\n        self.name = name\n\n\nclass MockThread(object):\n\n    def __init__(self, thread_type, title, unread):\n        self.subject = {\n            'title': title,\n            'type': thread_type,\n            'url': 'https://api.github.com/repos/foo/bar/pulls/1',\n        }\n        self.unread = unread\n        self.updated_at = ''\n\n\nclass MockEvent(object):\n\n    def __init__(self, event_type, payload=''):\n        self.id = 1\n        self.created_at = datetime.now(pytz.utc)\n        self.actor = 'donnemartin'\n        self.org = 'org'\n        self.type = event_type\n        self.payload = payload\n        self.repo = ('user1', 'repo1')\n        self.public = True\n\n\nclass MockGitHubApi(object):\n\n    def __init__(self):\n        self.users = {}\n        self.current_user = 'user1'\n        self.ratelimit_remaining = 5000\n        self._generate_mock_data()\n\n    def _generate_mock_data(self):\n        user1 = MockUser(self.current_user, 'User')\n        user1_repo1 = user1.create_repo('repo1')\n        user1_repo1.create_issue('title1', 'body1')\n        user1_repo1.create_issue('title2', 'body2')\n        user1_repo1.create_issue('title3', 'body3')\n        user1.emails.extend([\n            MockEmail('foo@baz.com', True, False),\n            MockEmail('bar@baz.com', False, True),\n        ])\n        user2 = MockUser('user2', 'Organization')\n        self.users.update({\n            user1.login: user1,\n            user2.login: user2,\n        })\n\n    def create_issue(self, user_login, repo_name, issue_title, issue_desc):\n        try:\n            user = self.users[user_login]\n            repo = user.repositories[repo_name]\n            issue = repo.create_issue(issue_title, issue_desc)\n            return issue\n        except KeyError:\n            return null.NullObject('Issue')\n\n    def create_repository(self, repo_name, repo_desc='', private=False):\n        user = self.users[self.current_user]\n        return user.create_repo(repo_name, repo_desc, private)\n\n    def emails(self):\n        user = self.users[self.current_user]\n        return user.emails\n\n    def emojis(self, pager=False):\n        return [\n            'dolls',\n            'palm_tree',\n            'uk',\n            '100',\n            'baby_chick',\n        ]\n\n    def followers_of(self, user_login):\n        return [\n            MockUser('foo1'),\n            MockUser('foo2'),\n            MockUser('foo3'),\n        ]\n\n    def followed_by(self, user_login):\n        return self.followers_of(user_login)\n\n    def gitignore_template(self, language):\n        if language == 'valid_language':\n            return 'template'\n        else:\n            return ''\n\n    def gitignore_templates(self):\n        return [\n            'Actionscript',\n            'Ada',\n            'Agda',\n            'Android',\n            'AppEngine',\n        ]\n\n    def issue(self, user_login, repo_name, number):\n        try:\n            user = self.users[user_login]\n            repo = user.repositories[repo_name]\n            return repo.issues[int(number)]\n        except KeyError:\n            return null.NullObject('Issue')\n\n    def issues(self, issue_filter='subscribed', issue_state='open'):\n        user = self.users[self.current_user]\n        repo = user.repositories['repo1']\n        issues_dict = repo.issues\n        issues = list(issues_dict.values())\n        return issues\n\n    def license(self, license):\n        if license == 'valid_license':\n            template = mock.Mock()\n            template.body = 'template'\n            return template\n        else:\n            return null.NullObject('License')\n\n    def licenses(self):\n        return [\n            MockLicense('mit', '(MIT License)'),\n            MockLicense('gpl-2.0', '(GNU General Public License v2.0)'),\n            MockLicense('bsd-2-clause', '(BSD 2-clause \"Simplified\" License)'),\n            MockLicense('isc', '(ISC License)'),\n            MockLicense('epl-1.0', '(Eclipse Public License 1.0)'),\n        ]\n\n    def notifications(self, all=True, participating=False):\n        return [\n            MockThread('type1', 'title1', True),\n            MockThread('type2', 'title2', False),\n            MockThread('type3', 'title3', True),\n        ]\n\n    def octocat(self, say):\n        return say\n\n    def pull_request(self, owner, repository, number):\n        pull_requests = self.issues()\n        return pull_requests[0]\n\n    def search_issues(self, query):\n        return self.issues()\n\n    def search_repositories(self, query, sort):\n        return self.repositories()\n\n    def repositories(self, user_id=None):\n        if user_id is None:\n            user_id = self.current_user\n        user = self.users[user_id]\n        repos = list(user.repositories.values())\n        repos_sorted = sorted(repos)\n        return repos_sorted\n\n    def user(self, user_id):\n        try:\n            return self.users[user_id]\n        except KeyError:\n            return null.NullObject('User')\n", "description": "A supercharged Git/GitHub command line interface (CLI).  An official integration for GitHub and GitHub Enterprise: https://github.com/works-with/category/desktop-tools", "file_name": "mock_github_api.py", "id": "b4fdef3c6a05fd992a2915d127e7be38", "language": "Python", "project_name": "gitsome", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-gitsome/donnemartin-gitsome-5751a31/tests/mock_github_api.py", "save_time": "", "source": "", "update_at": "2018-03-18T02:47:11Z", "url": "https://github.com/donnemartin/gitsome", "wiki": true}