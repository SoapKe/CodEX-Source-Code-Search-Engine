{"author": "HelloZeroNet", "code": "import os\nimport subprocess\nimport re\nimport logging\nimport time\n\nfrom Config import config\nfrom util import helper\n\n\n\ndef findfiles(path, find_ext):\n    def sorter(f1, f2):\n        f1 = f1[0].replace(path, \"\")\n        f2 = f2[0].replace(path, \"\")\n        if f1 == \"\":\n            return 1\n        elif f2 == \"\":\n            return -1\n        else:\n            return cmp(f1.lower(), f2.lower())\n\n    for root, dirs, files in sorted(os.walk(path, topdown=False), cmp=sorter):\n        for file in sorted(files):\n            file_path = root + \"/\" + file\n            file_ext = file.split(\".\")[-1]\n            if file_ext in find_ext and not file.startswith(\"all.\"):\n                yield file_path.replace(\"\\\\\", \"/\")\n\n\n\ndef findCoffeescriptCompiler():\n    coffeescript_compiler = None\n    try:\n        import distutils.spawn\n        coffeescript_compiler = helper.shellquote(distutils.spawn.find_executable(\"coffee\")) + \" --no-header -p\"\n    except:\n        pass\n    if coffeescript_compiler:\n        return coffeescript_compiler\n    else:\n        return False\n\n\n# Generates: all.js: merge *.js, compile coffeescript, all.css: merge *.css, vendor prefix features\ndef merge(merged_path):\n    merge_dir = os.path.dirname(merged_path)\n    s = time.time()\n    ext = merged_path.split(\".\")[-1]\n    if ext == \"js\":  \n        find_ext = [\"js\", \"coffee\"]\n    else:\n        find_ext = [ext]\n\n    \n    if os.path.isfile(merged_path):\n        merged_mtime = os.path.getmtime(merged_path)\n    else:\n        merged_mtime = 0\n\n    changed = {}\n    for file_path in findfiles(merge_dir, find_ext):\n        if os.path.getmtime(file_path) > merged_mtime + 1:\n            changed[file_path] = True\n    if not changed:\n        return  \n\n    if os.path.isfile(merged_path):  \n        merged_old = open(merged_path, \"rb\").read().decode(\"utf8\")\n        old_parts = {}\n        for match in re.findall(\"(/\\* ---- (.*?) ---- \\*/(.*?)(?=/\\* ----|$))\", merged_old, re.DOTALL):\n            old_parts[match[1]] = match[2].strip(\"\\n\\r\")\n\n    \n    parts = []\n    s_total = time.time()\n    for file_path in findfiles(merge_dir, find_ext):\n        parts.append(\"\\n\\n/* ---- %s ---- */\\n\\n\" % file_path.replace(config.data_dir, \"\"))\n        if file_path.endswith(\".coffee\"):  \n            if file_path in changed or file_path.replace(config.data_dir, \"\") not in old_parts:  \n                if config.coffeescript_compiler is None:\n                    config.coffeescript_compiler = findCoffeescriptCompiler()\n                if not config.coffeescript_compiler:\n                    logging.error(\"No coffeescript compiler defined, skipping compiling %s\" % merged_path)\n                    return False  \n\n                \n                file_path_escaped = helper.shellquote(file_path.replace(\"/\", os.path.sep))\n\n                if \"%s\" in config.coffeescript_compiler:  \n                    command = config.coffeescript_compiler % file_path_escaped\n                else:  \n                    command = config.coffeescript_compiler + \" \" + file_path_escaped\n\n                \n                s = time.time()\n                compiler = subprocess.Popen(command, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n                out = compiler.stdout.read().decode(\"utf8\")\n                compiler.wait()\n                logging.debug(\"Running: %s (Done in %.2fs)\" % (command, time.time() - s))\n\n                \n                if out and out.startswith(\"(\"):  \n                    parts.append(out)\n                else:  \n                    error = out\n                    logging.error(\"%s Compile error: %s\" % (file_path, error))\n                    parts.append(\n                        \"alert('%s compile error: %s');\" %\n                        (file_path, re.escape(error).replace(\"\\n\", \"\\\\n\").replace(r\"\\\\n\", r\"\\n\"))\n                    )\n            else:  \n                parts.append(old_parts[file_path.replace(config.data_dir, \"\")])\n        else:  \n            parts.append(open(file_path).read().decode(\"utf8\"))\n\n    merged = u\"\\n\".join(parts)\n    if ext == \"css\":  \n        from lib.cssvendor import cssvendor\n        merged = cssvendor.prefix(merged)\n    merged = merged.replace(\"\\r\", \"\")\n    open(merged_path, \"wb\").write(merged.encode(\"utf8\"))\n    logging.debug(\"Merged %s (%.2fs)\" % (merged_path, time.time() - s_total))\n\n\nif __name__ == \"__main__\":\n    logging.getLogger().setLevel(logging.DEBUG)\n    os.chdir(\"..\")\n    config.coffeescript_compiler = r'type \"%s\" | tools\\coffee-node\\bin\\node.exe tools\\coffee-node\\bin\\coffee --no-header -s -p'\n    merge(\"data/12Hw8rTgzrNo4DSh2AkqwPRqDyTticwJyH/js/all.js\")\n", "comments": "  find files extension path    try find coffeescript compiler path    generates  js  merge   js  compile coffeescript  css  merge   css  vendor prefix features    if merging  js find  coffee    if exist check files modification date    assets changed  nothing    find old parts avoid unncessary recompile    merge files    compile coffee script    only recompile changed compiled    no coffeescript compiler  skip file    replace   os separators escape    replace  coffeescript file    put coffeescript file end    start compiling    check errors    no error found    put error message place source code    not changed use old part    add parts    vendor prefix css ", "content": "import os\nimport subprocess\nimport re\nimport logging\nimport time\n\nfrom Config import config\nfrom util import helper\n\n\n# Find files with extension in path\ndef findfiles(path, find_ext):\n    def sorter(f1, f2):\n        f1 = f1[0].replace(path, \"\")\n        f2 = f2[0].replace(path, \"\")\n        if f1 == \"\":\n            return 1\n        elif f2 == \"\":\n            return -1\n        else:\n            return cmp(f1.lower(), f2.lower())\n\n    for root, dirs, files in sorted(os.walk(path, topdown=False), cmp=sorter):\n        for file in sorted(files):\n            file_path = root + \"/\" + file\n            file_ext = file.split(\".\")[-1]\n            if file_ext in find_ext and not file.startswith(\"all.\"):\n                yield file_path.replace(\"\\\\\", \"/\")\n\n\n# Try to find coffeescript compiler in path\ndef findCoffeescriptCompiler():\n    coffeescript_compiler = None\n    try:\n        import distutils.spawn\n        coffeescript_compiler = helper.shellquote(distutils.spawn.find_executable(\"coffee\")) + \" --no-header -p\"\n    except:\n        pass\n    if coffeescript_compiler:\n        return coffeescript_compiler\n    else:\n        return False\n\n\n# Generates: all.js: merge *.js, compile coffeescript, all.css: merge *.css, vendor prefix features\ndef merge(merged_path):\n    merge_dir = os.path.dirname(merged_path)\n    s = time.time()\n    ext = merged_path.split(\".\")[-1]\n    if ext == \"js\":  # If merging .js find .coffee too\n        find_ext = [\"js\", \"coffee\"]\n    else:\n        find_ext = [ext]\n\n    # If exist check the other files modification date\n    if os.path.isfile(merged_path):\n        merged_mtime = os.path.getmtime(merged_path)\n    else:\n        merged_mtime = 0\n\n    changed = {}\n    for file_path in findfiles(merge_dir, find_ext):\n        if os.path.getmtime(file_path) > merged_mtime + 1:\n            changed[file_path] = True\n    if not changed:\n        return  # Assets not changed, nothing to do\n\n    if os.path.isfile(merged_path):  # Find old parts to avoid unncessary recompile\n        merged_old = open(merged_path, \"rb\").read().decode(\"utf8\")\n        old_parts = {}\n        for match in re.findall(\"(/\\* ---- (.*?) ---- \\*/(.*?)(?=/\\* ----|$))\", merged_old, re.DOTALL):\n            old_parts[match[1]] = match[2].strip(\"\\n\\r\")\n\n    # Merge files\n    parts = []\n    s_total = time.time()\n    for file_path in findfiles(merge_dir, find_ext):\n        parts.append(\"\\n\\n/* ---- %s ---- */\\n\\n\" % file_path.replace(config.data_dir, \"\"))\n        if file_path.endswith(\".coffee\"):  # Compile coffee script\n            if file_path in changed or file_path.replace(config.data_dir, \"\") not in old_parts:  # Only recompile if changed or its not compiled before\n                if config.coffeescript_compiler is None:\n                    config.coffeescript_compiler = findCoffeescriptCompiler()\n                if not config.coffeescript_compiler:\n                    logging.error(\"No coffeescript compiler defined, skipping compiling %s\" % merged_path)\n                    return False  # No coffeescript compiler, skip this file\n\n                # Replace / with os separators and escape it\n                file_path_escaped = helper.shellquote(file_path.replace(\"/\", os.path.sep))\n\n                if \"%s\" in config.coffeescript_compiler:  # Replace %s with coffeescript file\n                    command = config.coffeescript_compiler % file_path_escaped\n                else:  # Put coffeescript file to end\n                    command = config.coffeescript_compiler + \" \" + file_path_escaped\n\n                # Start compiling\n                s = time.time()\n                compiler = subprocess.Popen(command, shell=True, stderr=subprocess.STDOUT, stdout=subprocess.PIPE)\n                out = compiler.stdout.read().decode(\"utf8\")\n                compiler.wait()\n                logging.debug(\"Running: %s (Done in %.2fs)\" % (command, time.time() - s))\n\n                # Check errors\n                if out and out.startswith(\"(\"):  # No error found\n                    parts.append(out)\n                else:  # Put error message in place of source code\n                    error = out\n                    logging.error(\"%s Compile error: %s\" % (file_path, error))\n                    parts.append(\n                        \"alert('%s compile error: %s');\" %\n                        (file_path, re.escape(error).replace(\"\\n\", \"\\\\n\").replace(r\"\\\\n\", r\"\\n\"))\n                    )\n            else:  # Not changed use the old_part\n                parts.append(old_parts[file_path.replace(config.data_dir, \"\")])\n        else:  # Add to parts\n            parts.append(open(file_path).read().decode(\"utf8\"))\n\n    merged = u\"\\n\".join(parts)\n    if ext == \"css\":  # Vendor prefix css\n        from lib.cssvendor import cssvendor\n        merged = cssvendor.prefix(merged)\n    merged = merged.replace(\"\\r\", \"\")\n    open(merged_path, \"wb\").write(merged.encode(\"utf8\"))\n    logging.debug(\"Merged %s (%.2fs)\" % (merged_path, time.time() - s_total))\n\n\nif __name__ == \"__main__\":\n    logging.getLogger().setLevel(logging.DEBUG)\n    os.chdir(\"..\")\n    config.coffeescript_compiler = r'type \"%s\" | tools\\coffee-node\\bin\\node.exe tools\\coffee-node\\bin\\coffee --no-header -s -p'\n    merge(\"data/12Hw8rTgzrNo4DSh2AkqwPRqDyTticwJyH/js/all.js\")\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "DebugMedia.py", "id": "c0b514c4c03b2b08d1b006db770790a7", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Debug/DebugMedia.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}