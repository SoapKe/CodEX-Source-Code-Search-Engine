{"author": "tensorflow", "code": "\n\n Copyright 2016 Google Inc. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\nfrom __future__ import print_function\nimport re\nimport sys\nfrom getopt import GetoptError, getopt\n\nfrom vecs import Vecs\n\ntry:\n  opts, args = getopt(sys.argv[1:], 'v:e:', ['vocab=', 'embeddings='])\nexcept GetoptError as e:\n  print(e, file=sys.stderr)\n  sys.exit(2)\n\nopt_vocab = 'vocab.txt'\nopt_embeddings = None\n\nfor o, a in opts:\n  if o in ('-v', '--vocab'):\n    opt_vocab = a\n  if o in ('-e', '--embeddings'):\n    opt_embeddings = a\n\nvecs = Vecs(opt_vocab, opt_embeddings)\n\nwhile True:\n  sys.stdout.write('query> ')\n  sys.stdout.flush()\n\n  query = sys.stdin.readline().strip()\n  if not query:\n    break\n\n  parts = re.split(r'\\s+', query)\n\n  if len(parts) == 1:\n    res = vecs.neighbors(parts[0])\n\n  elif len(parts) == 3:\n    vs = [vecs.lookup(w) for w in parts]\n    if any(v is None for v in vs):\n      print('not in vocabulary: %s' % (\n            ', '.join(tok for tok, v in zip(parts, vs) if v is None)))\n\n      continue\n\n    res = vecs.neighbors(vs[2] - vs[0] + vs[1])\n\n  else:\n    print('use a single word to query neighbors, or three words for analogy')\n    continue\n\n  if not res:\n    continue\n\n  for word, sim in res[:20]:\n    print('%0.4f: %s' % (sim, word))\n\n  print()\n", "comments": "   simple tool inspecting nearest neighbors analogies         usr bin env python       copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license  ", "content": "#!/usr/bin/env python\n#\n# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Simple tool for inspecting nearest neighbors and analogies.\"\"\"\n\nfrom __future__ import print_function\nimport re\nimport sys\nfrom getopt import GetoptError, getopt\n\nfrom vecs import Vecs\n\ntry:\n  opts, args = getopt(sys.argv[1:], 'v:e:', ['vocab=', 'embeddings='])\nexcept GetoptError as e:\n  print(e, file=sys.stderr)\n  sys.exit(2)\n\nopt_vocab = 'vocab.txt'\nopt_embeddings = None\n\nfor o, a in opts:\n  if o in ('-v', '--vocab'):\n    opt_vocab = a\n  if o in ('-e', '--embeddings'):\n    opt_embeddings = a\n\nvecs = Vecs(opt_vocab, opt_embeddings)\n\nwhile True:\n  sys.stdout.write('query> ')\n  sys.stdout.flush()\n\n  query = sys.stdin.readline().strip()\n  if not query:\n    break\n\n  parts = re.split(r'\\s+', query)\n\n  if len(parts) == 1:\n    res = vecs.neighbors(parts[0])\n\n  elif len(parts) == 3:\n    vs = [vecs.lookup(w) for w in parts]\n    if any(v is None for v in vs):\n      print('not in vocabulary: %s' % (\n            ', '.join(tok for tok, v in zip(parts, vs) if v is None)))\n\n      continue\n\n    res = vecs.neighbors(vs[2] - vs[0] + vs[1])\n\n  else:\n    print('use a single word to query neighbors, or three words for analogy')\n    continue\n\n  if not res:\n    continue\n\n  for word, sim in res[:20]:\n    print('%0.4f: %s' % (sim, word))\n\n  print()\n", "description": "Models and examples built with TensorFlow", "file_name": "nearest.py", "id": "98e0c641e68336ca0e23fe52183b1de6", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/swivel/nearest.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}