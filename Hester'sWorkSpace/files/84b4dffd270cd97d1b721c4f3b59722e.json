{"author": "ansible", "code": " (c) 2012, Jeroen Hoekx <jeroen@hoekx.be>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport re\nimport operator as py_operator\nfrom collections import MutableMapping, MutableSequence\nfrom distutils.version import LooseVersion, StrictVersion\n\nfrom ansible import errors\n\n\ndef failed(result):\n    ''' Test if task result yields failed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The failed test expects a dictionary\")\n    return result.get('failed', False)\n\n\ndef success(result):\n    ''' Test if task result yields success '''\n    return not failed(result)\n\n\ndef changed(result):\n    ''' Test if task result yields changed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The changed test expects a dictionary\")\n    if 'changed' not in result:\n        changed = False\n        if (\n            'results' in result and    some modules return a 'results' key\n            isinstance(result['results'], MutableSequence) and\n            isinstance(result['results'][0], MutableMapping)\n        ):\n            for res in result['results']:\n                if res.get('changed', False):\n                    changed = True\n                    break\n    else:\n        changed = result.get('changed', False)\n    return changed\n\n\ndef skipped(result):\n    ''' Test if task result yields skipped '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The skipped test expects a dictionary\")\n    return result.get('skipped', False)\n\n\ndef regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search'):\n    ''' Expose `re` as a boolean filter using the `search` method by default.\n        This is likely only useful for `search` and `match` which already\n        have their own filters.\n    '''\n    flags = 0\n    if ignorecase:\n        flags ||= re.M\n    _re = re.compile(pattern, flags=flags)\n    _bool = __builtins__.get('bool')\n    return _bool(getattr(_re, match_type, 'search')(value))\n\n\ndef match(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.match` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'match')\n\n\ndef search(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.search` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'search')\n\n\ndef version_compare(value, version, operator='eq', strict=False):\n    ''' Perform a version comparison on a value '''\n    op_map = {\n        '==': 'eq', '=': 'eq', 'eq': 'eq',\n        '<': 'lt', 'lt': 'lt',\n        '<=': 'le', 'le': 'le',\n        '>': 'gt', 'gt': 'gt',\n        '>=': 'ge', 'ge': 'ge',\n        '!=': 'ne', '<>': 'ne', 'ne': 'ne'\n    }\n\n    if strict:\n        Version = StrictVersion\n    else:\n        Version = LooseVersion\n\n    if operator in op_map:\n        operator = op_map[operator]\n    else:\n        raise errors.AnsibleFilterError('Invalid operator type')\n\n    try:\n        method = getattr(py_operator, operator)\n        return method(Version(str(value)), Version(str(version)))\n    except Exception as e:\n        raise errors.AnsibleFilterError('Version comparison: %s' % e)\n\n\nclass TestModule(object):\n    ''' Ansible core jinja2 tests '''\n\n    def tests(self):\n        return {\n             failure testing\n            'failed': failed,\n            'failure': failed,\n            'succeeded': success,\n            'success': success,\n            'successful': success,\n\n             changed testing\n            'changed': changed,\n            'change': changed,\n\n             skip testing\n            'skipped': skipped,\n            'skip': skipped,\n\n             regex\n            'match': match,\n            'search': search,\n            'regex': regex,\n\n             version comparison\n            'version_compare': version_compare,\n            'version': version_compare,\n\n             lists\n            'any': any,\n            'all': all,\n        }\n", "comments": "    test task result yields failed         isinstance(result  mutablemapping)          raise errors ansiblefiltererror( the failed test expects dictionary )     return result get( failed   false)   def success(result)          test task result yields success         return failed(result)   def changed(result)          test task result yields changed         isinstance(result  mutablemapping)          raise errors ansiblefiltererror( the changed test expects dictionary )      changed  result          changed   false         (              results  result     modules return  results  key             isinstance(result  results    mutablesequence)             isinstance(result  results   0   mutablemapping)         )              res result  results                    res get( changed   false)                      changed   true                     break     else          changed   result get( changed   false)     return changed   def skipped(result)          test task result yields skipped         isinstance(result  mutablemapping)          raise errors ansiblefiltererror( the skipped test expects dictionary )     return result get( skipped   false)   def regex(value     pattern     ignorecase false  multiline false  match type  search )          expose   boolean filter using  search  method default          this likely useful  search   match  already         filters              flags   0     ignorecase          flags    i     multiline          flags    m        compile(pattern  flags flags)      bool     builtins   get( bool )     return  bool(getattr(  match type   search )(value))   def match(value  pattern     ignorecase false  multiline false)          perform  match  returning boolean         return regex(value  pattern  ignorecase  multiline   match )   def search(value  pattern     ignorecase false  multiline false)          perform  search  returning boolean         return regex(value  pattern  ignorecase  multiline   search )   def version compare(value  version  operator  eq   strict false)          perform version comparison value         op map                    eq         eq    eq    eq                 lt    lt    lt                  le    le    le                 gt    gt    gt                  ge    ge    ge                  ne          ne    ne    ne             strict          version   strictversion     else          version   looseversion      operator op map          operator   op map operator      else          raise errors ansiblefiltererror( invalid operator type )      try          method   getattr(py operator  operator)         return method(version(str(value))  version(str(version)))     except exception e          raise errors ansiblefiltererror( version comparison      e)   class testmodule(object)          ansible core jinja2 tests        (c) 2012  jeroen hoekx  jeroen hoekx        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    modules return  results  key    failure testing    changed testing    skip testing    regex    version comparison    lists ", "content": "# (c) 2012, Jeroen Hoekx <jeroen@hoekx.be>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport re\nimport operator as py_operator\nfrom collections import MutableMapping, MutableSequence\nfrom distutils.version import LooseVersion, StrictVersion\n\nfrom ansible import errors\n\n\ndef failed(result):\n    ''' Test if task result yields failed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The failed test expects a dictionary\")\n    return result.get('failed', False)\n\n\ndef success(result):\n    ''' Test if task result yields success '''\n    return not failed(result)\n\n\ndef changed(result):\n    ''' Test if task result yields changed '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The changed test expects a dictionary\")\n    if 'changed' not in result:\n        changed = False\n        if (\n            'results' in result and   # some modules return a 'results' key\n            isinstance(result['results'], MutableSequence) and\n            isinstance(result['results'][0], MutableMapping)\n        ):\n            for res in result['results']:\n                if res.get('changed', False):\n                    changed = True\n                    break\n    else:\n        changed = result.get('changed', False)\n    return changed\n\n\ndef skipped(result):\n    ''' Test if task result yields skipped '''\n    if not isinstance(result, MutableMapping):\n        raise errors.AnsibleFilterError(\"The skipped test expects a dictionary\")\n    return result.get('skipped', False)\n\n\ndef regex(value='', pattern='', ignorecase=False, multiline=False, match_type='search'):\n    ''' Expose `re` as a boolean filter using the `search` method by default.\n        This is likely only useful for `search` and `match` which already\n        have their own filters.\n    '''\n    flags = 0\n    if ignorecase:\n        flags |= re.I\n    if multiline:\n        flags |= re.M\n    _re = re.compile(pattern, flags=flags)\n    _bool = __builtins__.get('bool')\n    return _bool(getattr(_re, match_type, 'search')(value))\n\n\ndef match(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.match` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'match')\n\n\ndef search(value, pattern='', ignorecase=False, multiline=False):\n    ''' Perform a `re.search` returning a boolean '''\n    return regex(value, pattern, ignorecase, multiline, 'search')\n\n\ndef version_compare(value, version, operator='eq', strict=False):\n    ''' Perform a version comparison on a value '''\n    op_map = {\n        '==': 'eq', '=': 'eq', 'eq': 'eq',\n        '<': 'lt', 'lt': 'lt',\n        '<=': 'le', 'le': 'le',\n        '>': 'gt', 'gt': 'gt',\n        '>=': 'ge', 'ge': 'ge',\n        '!=': 'ne', '<>': 'ne', 'ne': 'ne'\n    }\n\n    if strict:\n        Version = StrictVersion\n    else:\n        Version = LooseVersion\n\n    if operator in op_map:\n        operator = op_map[operator]\n    else:\n        raise errors.AnsibleFilterError('Invalid operator type')\n\n    try:\n        method = getattr(py_operator, operator)\n        return method(Version(str(value)), Version(str(version)))\n    except Exception as e:\n        raise errors.AnsibleFilterError('Version comparison: %s' % e)\n\n\nclass TestModule(object):\n    ''' Ansible core jinja2 tests '''\n\n    def tests(self):\n        return {\n            # failure testing\n            'failed': failed,\n            'failure': failed,\n            'succeeded': success,\n            'success': success,\n            'successful': success,\n\n            # changed testing\n            'changed': changed,\n            'change': changed,\n\n            # skip testing\n            'skipped': skipped,\n            'skip': skipped,\n\n            # regex\n            'match': match,\n            'search': search,\n            'regex': regex,\n\n            # version comparison\n            'version_compare': version_compare,\n            'version': version_compare,\n\n            # lists\n            'any': any,\n            'all': all,\n        }\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "core.py", "id": "84b4dffd270cd97d1b721c4f3b59722e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/plugins/test/core.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}