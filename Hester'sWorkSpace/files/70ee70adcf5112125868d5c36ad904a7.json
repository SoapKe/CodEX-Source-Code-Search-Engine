{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_HTTPError\nfrom ..utils import (\n    float_or_none,\n    parse_iso8601,\n    unescapeHTML,\n    ExtractorError,\n)\n\n\nclass RteBaseIE(InfoExtractor):\n    def _real_extract(self, url):\n        item_id = self._match_id(url)\n\n        try:\n            json_string = self._download_json(\n                'http://www.rte.ie/rteavgen/getplaylist/?type=web&format=json&id=' + item_id,\n                item_id)\n        except ExtractorError as ee:\n            if isinstance(ee.cause, compat_HTTPError) and ee.cause.code == 404:\n                error_info = self._parse_json(ee.cause.read().decode(), item_id, fatal=False)\n                if error_info:\n                    raise ExtractorError(\n                        '%s said: %s' % (self.IE_NAME, error_info['message']),\n                        expected=True)\n            raise\n\n        \n        show = json_string['shows'][0]\n        title = unescapeHTML(show['title'])\n        description = unescapeHTML(show.get('description'))\n        thumbnail = show.get('thumbnail')\n        duration = float_or_none(show.get('duration'), 1000)\n        timestamp = parse_iso8601(show.get('published'))\n\n        mg = show['media:group'][0]\n\n        formats = []\n\n        if mg.get('url'):\n            m = re.match(r'(?P<url>rtmpe?://[^/]+)/(?P<app>.+)/(?P<playpath>mp4:.*)', mg['url'])\n            if m:\n                m = m.groupdict()\n                formats.append({\n                    'url': m['url'] + '/' + m['app'],\n                    'app': m['app'],\n                    'play_path': m['playpath'],\n                    'player_url': url,\n                    'ext': 'flv',\n                    'format_id': 'rtmp',\n                })\n\n        if mg.get('hls_server') and mg.get('hls_url'):\n            formats.extend(self._extract_m3u8_formats(\n                mg['hls_server'] + mg['hls_url'], item_id, 'mp4',\n                entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n\n        if mg.get('hds_server') and mg.get('hds_url'):\n            formats.extend(self._extract_f4m_formats(\n                mg['hds_server'] + mg['hds_url'], item_id,\n                f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': item_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass RteIE(RteBaseIE):\n    IE_NAME = 'rte'\n    IE_DESC = 'Raidi\u00f3 Teilif\u00eds \u00c9ireann TV'\n    _VALID_URL = r'https?://(?:www\\.)?rte\\.ie/player/[^/]{2,3}/show/[^/]+/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.rte.ie/player/ie/show/iwitness-862/10478715/',\n        'md5': '4a76eb3396d98f697e6e8110563d2604',\n        'info_dict': {\n            'id': '10478715',\n            'ext': 'mp4',\n            'title': 'iWitness',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'The spirit of Ireland, one voice and one minute at a time.',\n            'duration': 60.046,\n            'upload_date': '20151012',\n            'timestamp': 1444694160,\n        },\n    }\n\n\nclass RteRadioIE(RteBaseIE):\n    IE_NAME = 'rte:radio'\n    IE_DESC = 'Raidi\u00f3 Teilif\u00eds \u00c9ireann radio'\n    \n    \n    \n    \n    \n    _VALID_URL = r'https?://(?:www\\.)?rte\\.ie/radio/utils/radioplayer/rteradioweb\\.html\n\n    _TESTS = [{\n        \n        'url': 'http://www.rte.ie/radio/utils/radioplayer/rteradioweb.html\n        'md5': 'c79ccb2c195998440065456b69760411',\n        'info_dict': {\n            'id': '10507902',\n            'ext': 'mp4',\n            'title': 'Gloria',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'md5:9ce124a7fb41559ec68f06387cabddf0',\n            'timestamp': 1451203200,\n            'upload_date': '20151227',\n            'duration': 7230.0,\n        },\n    }, {\n        \n        'url': 'http://rte.ie/radio/utils/radioplayer/rteradioweb.html\n        'info_dict': {\n            'id': '3250678',\n            'ext': 'flv',\n            'title': 'The Lyric Concert with Paul Herriott',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': '',\n            'timestamp': 1333742400,\n            'upload_date': '20120406',\n            'duration': 7199.016,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }]\n", "comments": "# coding: utf-8\n# NB the string values in the JSON are stored using XML escaping(!)\n# Radioplayer URLs have two distinct specifier formats,\n# the old format #!rii=<channel_id>:<id>:<playable_item_id>:<date>:\n# the new format #!rii=b<channel_id>_<id>_<playable_item_id>_<date>_\n# where the IDs are int/empty, the date is DD-MM-YYYY, and the specifier may be truncated.\n# An <id> uniquely defines an individual recording, and is the only part we require.\n#!rii=(?:b?[0-9]*)(?:%3A|:|%5F|_)(?P<id>[0-9]+)'\n# Old-style player URL; HLS and RTMPE formats\n#!rii=16:10507902:2414:27-12-2015:',\n# New-style player URL; RTMPE formats only\n#!rii=b16_3250678_8861_06-04-2012_',\n# rtmp download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_HTTPError\nfrom ..utils import (\n    float_or_none,\n    parse_iso8601,\n    unescapeHTML,\n    ExtractorError,\n)\n\n\nclass RteBaseIE(InfoExtractor):\n    def _real_extract(self, url):\n        item_id = self._match_id(url)\n\n        try:\n            json_string = self._download_json(\n                'http://www.rte.ie/rteavgen/getplaylist/?type=web&format=json&id=' + item_id,\n                item_id)\n        except ExtractorError as ee:\n            if isinstance(ee.cause, compat_HTTPError) and ee.cause.code == 404:\n                error_info = self._parse_json(ee.cause.read().decode(), item_id, fatal=False)\n                if error_info:\n                    raise ExtractorError(\n                        '%s said: %s' % (self.IE_NAME, error_info['message']),\n                        expected=True)\n            raise\n\n        # NB the string values in the JSON are stored using XML escaping(!)\n        show = json_string['shows'][0]\n        title = unescapeHTML(show['title'])\n        description = unescapeHTML(show.get('description'))\n        thumbnail = show.get('thumbnail')\n        duration = float_or_none(show.get('duration'), 1000)\n        timestamp = parse_iso8601(show.get('published'))\n\n        mg = show['media:group'][0]\n\n        formats = []\n\n        if mg.get('url'):\n            m = re.match(r'(?P<url>rtmpe?://[^/]+)/(?P<app>.+)/(?P<playpath>mp4:.*)', mg['url'])\n            if m:\n                m = m.groupdict()\n                formats.append({\n                    'url': m['url'] + '/' + m['app'],\n                    'app': m['app'],\n                    'play_path': m['playpath'],\n                    'player_url': url,\n                    'ext': 'flv',\n                    'format_id': 'rtmp',\n                })\n\n        if mg.get('hls_server') and mg.get('hls_url'):\n            formats.extend(self._extract_m3u8_formats(\n                mg['hls_server'] + mg['hls_url'], item_id, 'mp4',\n                entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n\n        if mg.get('hds_server') and mg.get('hds_url'):\n            formats.extend(self._extract_f4m_formats(\n                mg['hds_server'] + mg['hds_url'], item_id,\n                f4m_id='hds', fatal=False))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': item_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass RteIE(RteBaseIE):\n    IE_NAME = 'rte'\n    IE_DESC = 'Raidi\u00f3 Teilif\u00eds \u00c9ireann TV'\n    _VALID_URL = r'https?://(?:www\\.)?rte\\.ie/player/[^/]{2,3}/show/[^/]+/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.rte.ie/player/ie/show/iwitness-862/10478715/',\n        'md5': '4a76eb3396d98f697e6e8110563d2604',\n        'info_dict': {\n            'id': '10478715',\n            'ext': 'mp4',\n            'title': 'iWitness',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'The spirit of Ireland, one voice and one minute at a time.',\n            'duration': 60.046,\n            'upload_date': '20151012',\n            'timestamp': 1444694160,\n        },\n    }\n\n\nclass RteRadioIE(RteBaseIE):\n    IE_NAME = 'rte:radio'\n    IE_DESC = 'Raidi\u00f3 Teilif\u00eds \u00c9ireann radio'\n    # Radioplayer URLs have two distinct specifier formats,\n    # the old format #!rii=<channel_id>:<id>:<playable_item_id>:<date>:\n    # the new format #!rii=b<channel_id>_<id>_<playable_item_id>_<date>_\n    # where the IDs are int/empty, the date is DD-MM-YYYY, and the specifier may be truncated.\n    # An <id> uniquely defines an individual recording, and is the only part we require.\n    _VALID_URL = r'https?://(?:www\\.)?rte\\.ie/radio/utils/radioplayer/rteradioweb\\.html#!rii=(?:b?[0-9]*)(?:%3A|:|%5F|_)(?P<id>[0-9]+)'\n\n    _TESTS = [{\n        # Old-style player URL; HLS and RTMPE formats\n        'url': 'http://www.rte.ie/radio/utils/radioplayer/rteradioweb.html#!rii=16:10507902:2414:27-12-2015:',\n        'md5': 'c79ccb2c195998440065456b69760411',\n        'info_dict': {\n            'id': '10507902',\n            'ext': 'mp4',\n            'title': 'Gloria',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': 'md5:9ce124a7fb41559ec68f06387cabddf0',\n            'timestamp': 1451203200,\n            'upload_date': '20151227',\n            'duration': 7230.0,\n        },\n    }, {\n        # New-style player URL; RTMPE formats only\n        'url': 'http://rte.ie/radio/utils/radioplayer/rteradioweb.html#!rii=b16_3250678_8861_06-04-2012_',\n        'info_dict': {\n            'id': '3250678',\n            'ext': 'flv',\n            'title': 'The Lyric Concert with Paul Herriott',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'description': '',\n            'timestamp': 1333742400,\n            'upload_date': '20120406',\n            'duration': 7199.016,\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }]\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rte.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rte.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}