{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestFindLoopStart(object):\n\n    def test_find_loop_start(self):\n        print('Test: Empty list')\n        linked_list = MyLinkedList()\n        assert_equal(linked_list.find_loop_start(), None)\n\n        print('Test: Not a circular linked list: One element')\n        head = Node(1)\n        linked_list = MyLinkedList(head)\n        assert_equal(linked_list.find_loop_start(), None)\n\n        print('Test: Not a circular linked list: Two elements')\n        linked_list.append(2)\n        assert_equal(linked_list.find_loop_start(), None)\n\n        print('Test: Not a circular linked list: Three or more elements')\n        linked_list.append(3)\n        assert_equal(linked_list.find_loop_start(), None)\n\n        print('Test: General case: Circular linked list')\n        node10 = Node(10)\n        node9 = Node(9, node10)\n        node8 = Node(8, node9)\n        node7 = Node(7, node8)\n        node6 = Node(6, node7)\n        node5 = Node(5, node6)\n        node4 = Node(4, node5)\n        node3 = Node(3, node4)\n        node2 = Node(2, node3)\n        node1 = Node(1, node2)\n        node0 = Node(0, node1)\n        node10.next = node3\n        linked_list = MyLinkedList(node0)\n        assert_equal(linked_list.find_loop_start(), node3)\n\n        print('Success: test_find_loop_start')\n\n\ndef main():\n    test = TestFindLoopStart()\n    test.test_find_loop_start()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestFindLoopStart(object):\n\n    def test_find_loop_start(self):\n        print('Test: Empty list')\n        linked_list = MyLinkedList()\n        assert_equal(linked_list.find_loop_start(), None)\n\n        print('Test: Not a circular linked list: One element')\n        head = Node(1)\n        linked_list = MyLinkedList(head)\n        assert_equal(linked_list.find_loop_start(), None)\n\n        print('Test: Not a circular linked list: Two elements')\n        linked_list.append(2)\n        assert_equal(linked_list.find_loop_start(), None)\n\n        print('Test: Not a circular linked list: Three or more elements')\n        linked_list.append(3)\n        assert_equal(linked_list.find_loop_start(), None)\n\n        print('Test: General case: Circular linked list')\n        node10 = Node(10)\n        node9 = Node(9, node10)\n        node8 = Node(8, node9)\n        node7 = Node(7, node8)\n        node6 = Node(6, node7)\n        node5 = Node(5, node6)\n        node4 = Node(4, node5)\n        node3 = Node(3, node4)\n        node2 = Node(2, node3)\n        node1 = Node(1, node2)\n        node0 = Node(0, node1)\n        node10.next = node3\n        linked_list = MyLinkedList(node0)\n        assert_equal(linked_list.find_loop_start(), node3)\n\n        print('Success: test_find_loop_start')\n\n\ndef main():\n    test = TestFindLoopStart()\n    test.test_find_loop_start()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_find_loop_start.py", "id": "cf71b4135a9dc2b64f5818405c052c7d", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/linked_lists/find_loop_start/test_find_loop_start.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}