{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    remove_end,\n)\n\n\nclass TelegraafIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?telegraaf\\.nl/tv/(?:[^/]+/)+(?P<id>\\d+)/[^/]+\\.html'\n    _TEST = {\n        'url': 'http://www.telegraaf.nl/tv/nieuws/binnenland/24353229/__Tikibad_ontruimd_wegens_brand__.html',\n        'info_dict': {\n            'id': '24353229',\n            'ext': 'mp4',\n            'title': 'Tikibad ontruimd wegens brand',\n            'description': 'md5:05ca046ff47b931f9b04855015e163a4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 33,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        player_url = self._html_search_regex(\n            r'<iframe[^>]+src=\"([^\"]+\")', webpage, 'player URL')\n        player_page = self._download_webpage(\n            player_url, video_id, note='Download player webpage')\n        playlist_url = self._search_regex(\n            r'playlist\\s*:\\s*\"([^\"]+)\"', player_page, 'playlist URL')\n        playlist_data = self._download_json(playlist_url, video_id)\n\n        item = playlist_data['items'][0]\n        formats = []\n        locations = item['locations']\n        for location in locations.get('adaptive', []):\n            manifest_url = location['src']\n            ext = determine_ext(manifest_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    manifest_url, video_id, ext='mp4', m3u8_id='hls', fatal=False))\n            elif ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    manifest_url, video_id, mpd_id='dash', fatal=False))\n            else:\n                self.report_warning('Unknown adaptive format %s' % ext)\n        for location in locations.get('progressive', []):\n            formats.append({\n                'url': location['sources'][0]['src'],\n                'width': location.get('width'),\n                'height': location.get('height'),\n                'format_id': 'http-%s' % location['label'],\n            })\n\n        self._sort_formats(formats)\n\n        title = remove_end(self._og_search_title(webpage), ' - VIDEO')\n        description = self._og_search_description(webpage)\n        duration = item.get('duration')\n        thumbnail = item.get('poster')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'formats': formats,\n            'duration': duration,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    remove_end,\n)\n\n\nclass TelegraafIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?telegraaf\\.nl/tv/(?:[^/]+/)+(?P<id>\\d+)/[^/]+\\.html'\n    _TEST = {\n        'url': 'http://www.telegraaf.nl/tv/nieuws/binnenland/24353229/__Tikibad_ontruimd_wegens_brand__.html',\n        'info_dict': {\n            'id': '24353229',\n            'ext': 'mp4',\n            'title': 'Tikibad ontruimd wegens brand',\n            'description': 'md5:05ca046ff47b931f9b04855015e163a4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 33,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        player_url = self._html_search_regex(\n            r'<iframe[^>]+src=\"([^\"]+\")', webpage, 'player URL')\n        player_page = self._download_webpage(\n            player_url, video_id, note='Download player webpage')\n        playlist_url = self._search_regex(\n            r'playlist\\s*:\\s*\"([^\"]+)\"', player_page, 'playlist URL')\n        playlist_data = self._download_json(playlist_url, video_id)\n\n        item = playlist_data['items'][0]\n        formats = []\n        locations = item['locations']\n        for location in locations.get('adaptive', []):\n            manifest_url = location['src']\n            ext = determine_ext(manifest_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    manifest_url, video_id, ext='mp4', m3u8_id='hls', fatal=False))\n            elif ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    manifest_url, video_id, mpd_id='dash', fatal=False))\n            else:\n                self.report_warning('Unknown adaptive format %s' % ext)\n        for location in locations.get('progressive', []):\n            formats.append({\n                'url': location['sources'][0]['src'],\n                'width': location.get('width'),\n                'height': location.get('height'),\n                'format_id': 'http-%s' % location['label'],\n            })\n\n        self._sort_formats(formats)\n\n        title = remove_end(self._og_search_title(webpage), ' - VIDEO')\n        description = self._og_search_description(webpage)\n        duration = item.get('duration')\n        thumbnail = item.get('poster')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'formats': formats,\n            'duration': duration,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "telegraaf.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/telegraaf.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}