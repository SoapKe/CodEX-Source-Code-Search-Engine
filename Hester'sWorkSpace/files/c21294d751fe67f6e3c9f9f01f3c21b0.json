{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\nimport pytest\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_monitor_tcp_half_open import Parameters\n    from library.bigip_monitor_tcp_half_open import ModuleManager\n    from library.bigip_monitor_tcp_half_open import ArgumentSpec\n    from library.bigip_monitor_tcp_half_open import HAS_F5SDK\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_monitor_tcp_half_open import Parameters\n        from ansible.modules.network.f5.bigip_monitor_tcp_half_open import ModuleManager\n        from ansible.modules.network.f5.bigip_monitor_tcp_half_open import ArgumentSpec\n        from ansible.modules.network.f5.bigip_monitor_tcp_half_open import HAS_F5SDK\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='foo',\n            parent='parent',\n            ip='10.10.10.10',\n            port=80,\n            interval=20,\n            timeout=30,\n            time_until_up=60,\n            partition='Common'\n        )\n\n        p = Parameters(params=args)\n        assert p.name == 'foo'\n        assert p.parent == '/Common/parent'\n        assert p.ip == '10.10.10.10'\n        assert p.port == 80\n        assert p.type == 'tcp_half_open'\n        assert p.destination == '10.10.10.10:80'\n        assert p.interval == 20\n        assert p.timeout == 30\n        assert p.time_until_up == 60\n\n    def test_module_parameters_ints_as_strings(self):\n        args = dict(\n            name='foo',\n            parent='parent',\n            ip='10.10.10.10',\n            port=80,\n            interval='20',\n            timeout='30',\n            time_until_up='60',\n            partition='Common'\n        )\n\n        p = Parameters(params=args)\n        assert p.name == 'foo'\n        assert p.parent == '/Common/parent'\n        assert p.ip == '10.10.10.10'\n        assert p.port == 80\n        assert p.type == 'tcp_half_open'\n        assert p.destination == '10.10.10.10:80'\n        assert p.interval == 20\n        assert p.timeout == 30\n        assert p.time_until_up == 60\n\n    def test_api_parameters(self):\n        args = dict(\n            name='foo',\n            defaultsFrom='/Common/parent',\n            destination='10.10.10.10:80',\n            interval=20,\n            timeout=30,\n            timeUntilUp=60\n        )\n\n        p = Parameters(params=args)\n        assert p.name == 'foo'\n        assert p.parent == '/Common/parent'\n        assert p.ip == '10.10.10.10'\n        assert p.port == 80\n        assert p.type == 'tcp_half_open'\n        assert p.destination == '10.10.10.10:80'\n        assert p.interval == 20\n        assert p.timeout == 30\n        assert p.time_until_up == 60\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_monitor(self, *args):\n        set_module_args(dict(\n            name='foo',\n            ip='10.10.10.10',\n            port=80,\n            interval=20,\n            timeout=30,\n            time_until_up=60,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_create_monitor_idempotent(self, *args):\n        set_module_args(dict(\n            name='foo',\n            ip='10.10.10.10',\n            port=80,\n            interval=20,\n            timeout=30,\n            time_until_up=60,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_update_interval(self, *args):\n        set_module_args(dict(\n            name='foo',\n            interval=10,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['interval'] == 10\n\n    def test_update_interval_larger_than_existing_timeout(self, *args):\n        set_module_args(dict(\n            name='foo',\n            interval=30,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n\n        assert \"must be less than\" in str(ex)\n\n    def test_update_interval_larger_than_new_timeout(self, *args):\n        set_module_args(dict(\n            name='foo',\n            interval=10,\n            timeout=5,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n\n        assert \"must be less than\" in str(ex)\n\n    def test_update_timeout(self, *args):\n        set_module_args(dict(\n            name='foo',\n            timeout=300,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n        assert results['timeout'] == 300\n\n    def test_update_time_until_up(self, *args):\n        set_module_args(dict(\n            name='foo',\n            time_until_up=300,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['time_until_up'] == 300\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods specific type manager    override methods specific type manager    override methods specific type manager    override methods specific type manager    override methods specific type manager    override methods specific type manager    override methods specific type manager ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\nimport pytest\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_monitor_tcp_half_open import Parameters\n    from library.bigip_monitor_tcp_half_open import ModuleManager\n    from library.bigip_monitor_tcp_half_open import ArgumentSpec\n    from library.bigip_monitor_tcp_half_open import HAS_F5SDK\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_monitor_tcp_half_open import Parameters\n        from ansible.modules.network.f5.bigip_monitor_tcp_half_open import ModuleManager\n        from ansible.modules.network.f5.bigip_monitor_tcp_half_open import ArgumentSpec\n        from ansible.modules.network.f5.bigip_monitor_tcp_half_open import HAS_F5SDK\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='foo',\n            parent='parent',\n            ip='10.10.10.10',\n            port=80,\n            interval=20,\n            timeout=30,\n            time_until_up=60,\n            partition='Common'\n        )\n\n        p = Parameters(params=args)\n        assert p.name == 'foo'\n        assert p.parent == '/Common/parent'\n        assert p.ip == '10.10.10.10'\n        assert p.port == 80\n        assert p.type == 'tcp_half_open'\n        assert p.destination == '10.10.10.10:80'\n        assert p.interval == 20\n        assert p.timeout == 30\n        assert p.time_until_up == 60\n\n    def test_module_parameters_ints_as_strings(self):\n        args = dict(\n            name='foo',\n            parent='parent',\n            ip='10.10.10.10',\n            port=80,\n            interval='20',\n            timeout='30',\n            time_until_up='60',\n            partition='Common'\n        )\n\n        p = Parameters(params=args)\n        assert p.name == 'foo'\n        assert p.parent == '/Common/parent'\n        assert p.ip == '10.10.10.10'\n        assert p.port == 80\n        assert p.type == 'tcp_half_open'\n        assert p.destination == '10.10.10.10:80'\n        assert p.interval == 20\n        assert p.timeout == 30\n        assert p.time_until_up == 60\n\n    def test_api_parameters(self):\n        args = dict(\n            name='foo',\n            defaultsFrom='/Common/parent',\n            destination='10.10.10.10:80',\n            interval=20,\n            timeout=30,\n            timeUntilUp=60\n        )\n\n        p = Parameters(params=args)\n        assert p.name == 'foo'\n        assert p.parent == '/Common/parent'\n        assert p.ip == '10.10.10.10'\n        assert p.port == 80\n        assert p.type == 'tcp_half_open'\n        assert p.destination == '10.10.10.10:80'\n        assert p.interval == 20\n        assert p.timeout == 30\n        assert p.time_until_up == 60\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_monitor(self, *args):\n        set_module_args(dict(\n            name='foo',\n            ip='10.10.10.10',\n            port=80,\n            interval=20,\n            timeout=30,\n            time_until_up=60,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_create_monitor_idempotent(self, *args):\n        set_module_args(dict(\n            name='foo',\n            ip='10.10.10.10',\n            port=80,\n            interval=20,\n            timeout=30,\n            time_until_up=60,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n\n    def test_update_interval(self, *args):\n        set_module_args(dict(\n            name='foo',\n            interval=10,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['interval'] == 10\n\n    def test_update_interval_larger_than_existing_timeout(self, *args):\n        set_module_args(dict(\n            name='foo',\n            interval=30,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n\n        assert \"must be less than\" in str(ex)\n\n    def test_update_interval_larger_than_new_timeout(self, *args):\n        set_module_args(dict(\n            name='foo',\n            interval=10,\n            timeout=5,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n\n        assert \"must be less than\" in str(ex)\n\n    def test_update_timeout(self, *args):\n        set_module_args(dict(\n            name='foo',\n            timeout=300,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n        assert results['timeout'] == 300\n\n    def test_update_time_until_up(self, *args):\n        set_module_args(dict(\n            name='foo',\n            time_until_up=300,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        current = Parameters(params=load_fixture('load_ltm_monitor_tcp_half_open.json'))\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n        mm.update_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['time_until_up'] == 300\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_monitor_tcp_half_open.py", "id": "c21294d751fe67f6e3c9f9f01f3c21b0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_monitor_tcp_half_open.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}