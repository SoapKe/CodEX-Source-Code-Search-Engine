{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    unified_strdate,\n    urlencode_postdata,\n    xpath_element,\n    xpath_text,\n    update_url_query,\n    js_to_json,\n)\n\n\nclass Laola1TvEmbedIE(InfoExtractor):\n    IE_NAME = 'laola1tv:embed'\n    _VALID_URL = r'https?://(?:www\\.)?laola1\\.tv/titanplayer\\.php\\?.*?\\bvideoid=(?P<id>\\d+)'\n    _TESTS = [{\n        \n        'url': 'https://www.laola1.tv/titanplayer.php?videoid=708065&type=V&lang=en&portal=int&customer=1024',\n        'info_dict': {\n            'id': '708065',\n            'ext': 'mp4',\n            'title': 'MA Long CHN - FAN Zhendong CHN',\n            'uploader': 'ITTF - International Table Tennis Federation',\n            'upload_date': '20161211',\n        },\n    }]\n\n    def _extract_token_url(self, stream_access_url, video_id, data):\n        return self._download_json(\n            stream_access_url, video_id, headers={\n                'Content-Type': 'application/json',\n            }, data=json.dumps(data).encode())['data']['stream-access'][0]\n\n    def _extract_formats(self, token_url, video_id):\n        token_doc = self._download_xml(\n            token_url, video_id, 'Downloading token',\n            headers=self.geo_verification_headers())\n\n        token_attrib = xpath_element(token_doc, './/token').attrib\n\n        if token_attrib['status'] != '0':\n            raise ExtractorError(\n                'Token error: %s' % token_attrib['comment'], expected=True)\n\n        formats = self._extract_akamai_formats(\n            '%s?hdnea=%s' % (token_attrib['url'], token_attrib['auth']),\n            video_id)\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        flash_vars = self._search_regex(\n            r'(?s)flashvars\\s*=\\s*({.+?});', webpage, 'flash vars')\n\n        def get_flashvar(x, *args, **kwargs):\n            flash_var = self._search_regex(\n                r'%s\\s*:\\s*\"([^\"]+)\"' % x,\n                flash_vars, x, default=None)\n            if not flash_var:\n                flash_var = self._search_regex([\n                    r'flashvars\\.%s\\s*=\\s*\"([^\"]+)\"' % x,\n                    r'%s\\s*=\\s*\"([^\"]+)\"' % x],\n                    webpage, x, *args, **kwargs)\n            return flash_var\n\n        hd_doc = self._download_xml(\n            'http://www.laola1.tv/server/hd_video.php', video_id, query={\n                'play': get_flashvar('streamid'),\n                'partner': get_flashvar('partnerid'),\n                'portal': get_flashvar('portalid'),\n                'lang': get_flashvar('sprache'),\n                'v5ident': '',\n            })\n\n        _v = lambda x, **k: xpath_text(hd_doc, './/video/' + x, **k)\n        title = _v('title', fatal=True)\n\n        token_url = None\n        premium = get_flashvar('premium', default=None)\n        if premium:\n            token_url = update_url_query(\n                _v('url', fatal=True), {\n                    'timestamp': get_flashvar('timestamp'),\n                    'auth': get_flashvar('auth'),\n                })\n        else:\n            data_abo = urlencode_postdata(\n                dict((i, v) for i, v in enumerate(_v('req_liga_abos').split(','))))\n            stream_access_url = update_url_query(\n                'https://club.laola1.tv/sp/laola1/api/v3/user/session/premium/player/stream-access', {\n                    'videoId': _v('id'),\n                    'target': self._search_regex(r'vs_target = (\\d+);', webpage, 'vs target'),\n                    'label': _v('label'),\n                    'area': _v('area'),\n                })\n            token_url = self._extract_token_url(stream_access_url, video_id, data_abo)\n\n        formats = self._extract_formats(token_url, video_id)\n\n        categories_str = _v('meta_sports')\n        categories = categories_str.split(',') if categories_str else []\n        is_live = _v('islive') == 'true'\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'upload_date': unified_strdate(_v('time_date')),\n            'uploader': _v('meta_organisation'),\n            'categories': categories,\n            'is_live': is_live,\n            'formats': formats,\n        }\n\n\nclass Laola1TvIE(Laola1TvEmbedIE):\n    IE_NAME = 'laola1tv'\n    _VALID_URL = r'https?://(?:www\\.)?laola1\\.tv/[a-z]+-[a-z]+/[^/]+/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.laola1.tv/de-de/video/straubing-tigers-koelner-haie/227883.html',\n        'info_dict': {\n            'id': '227883',\n            'display_id': 'straubing-tigers-koelner-haie',\n            'ext': 'flv',\n            'title': 'Straubing Tigers - K\u00f6lner Haie',\n            'upload_date': '20140912',\n            'is_live': False,\n            'categories': ['Eishockey'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.laola1.tv/de-de/video/straubing-tigers-koelner-haie',\n        'info_dict': {\n            'id': '464602',\n            'display_id': 'straubing-tigers-koelner-haie',\n            'ext': 'flv',\n            'title': 'Straubing Tigers - K\u00f6lner Haie',\n            'upload_date': '20160129',\n            'is_live': False,\n            'categories': ['Eishockey'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.laola1.tv/de-de/livestream/2016-03-22-belogorie-belgorod-trentino-diatec-lde',\n        'info_dict': {\n            'id': '487850',\n            'display_id': '2016-03-22-belogorie-belgorod-trentino-diatec-lde',\n            'ext': 'flv',\n            'title': 'Belogorie BELGOROD - TRENTINO Diatec',\n            'upload_date': '20160322',\n            'uploader': 'CEV - Europ\u00e4ischer Volleyball Verband',\n            'is_live': True,\n            'categories': ['Volleyball'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'This live stream has already finished.',\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        if 'Dieser Livestream ist bereits beendet.' in webpage:\n            raise ExtractorError('This live stream has already finished.', expected=True)\n\n        conf = self._parse_json(self._search_regex(\n            r'(?s)conf\\s*=\\s*({.+?});', webpage, 'conf'),\n            display_id, js_to_json)\n\n        video_id = conf['videoid']\n\n        config = self._download_json(conf['configUrl'], video_id, query={\n            'videoid': video_id,\n            'partnerid': conf['partnerid'],\n            'language': conf.get('language', ''),\n            'portal': conf.get('portalid', ''),\n        })\n        error = config.get('error')\n        if error:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n        video_data = config['video']\n        title = video_data['title']\n        is_live = video_data.get('isLivestream') and video_data.get('isLive')\n        meta = video_data.get('metaInformation')\n        sports = meta.get('sports')\n        categories = sports.split(',') if sports else []\n\n        token_url = self._extract_token_url(\n            video_data['streamAccess'], video_id,\n            video_data['abo']['required'])\n\n        formats = self._extract_formats(token_url, video_id)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('image'),\n            'categories': categories,\n            'formats': formats,\n            'is_live': is_live,\n        }\n\n\nclass ITTFIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.ittf\\.com/video/[^/]+/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://tv.ittf.com/video/peng-wang-wei-matsudaira-kenta/951802',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        return self.url_result(\n            update_url_query('https://www.laola1.tv/titanplayer.php', {\n                'videoid': self._match_id(url),\n                'type': 'V',\n                'lang': 'en',\n                'portal': 'int',\n                'customer': 1024,\n            }), Laola1TvEmbedIE.ie_key())\n", "comments": "# coding: utf-8\n# flashvars.premium = \"false\";\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    unified_strdate,\n    urlencode_postdata,\n    xpath_element,\n    xpath_text,\n    update_url_query,\n    js_to_json,\n)\n\n\nclass Laola1TvEmbedIE(InfoExtractor):\n    IE_NAME = 'laola1tv:embed'\n    _VALID_URL = r'https?://(?:www\\.)?laola1\\.tv/titanplayer\\.php\\?.*?\\bvideoid=(?P<id>\\d+)'\n    _TESTS = [{\n        # flashvars.premium = \"false\";\n        'url': 'https://www.laola1.tv/titanplayer.php?videoid=708065&type=V&lang=en&portal=int&customer=1024',\n        'info_dict': {\n            'id': '708065',\n            'ext': 'mp4',\n            'title': 'MA Long CHN - FAN Zhendong CHN',\n            'uploader': 'ITTF - International Table Tennis Federation',\n            'upload_date': '20161211',\n        },\n    }]\n\n    def _extract_token_url(self, stream_access_url, video_id, data):\n        return self._download_json(\n            stream_access_url, video_id, headers={\n                'Content-Type': 'application/json',\n            }, data=json.dumps(data).encode())['data']['stream-access'][0]\n\n    def _extract_formats(self, token_url, video_id):\n        token_doc = self._download_xml(\n            token_url, video_id, 'Downloading token',\n            headers=self.geo_verification_headers())\n\n        token_attrib = xpath_element(token_doc, './/token').attrib\n\n        if token_attrib['status'] != '0':\n            raise ExtractorError(\n                'Token error: %s' % token_attrib['comment'], expected=True)\n\n        formats = self._extract_akamai_formats(\n            '%s?hdnea=%s' % (token_attrib['url'], token_attrib['auth']),\n            video_id)\n        self._sort_formats(formats)\n        return formats\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        flash_vars = self._search_regex(\n            r'(?s)flashvars\\s*=\\s*({.+?});', webpage, 'flash vars')\n\n        def get_flashvar(x, *args, **kwargs):\n            flash_var = self._search_regex(\n                r'%s\\s*:\\s*\"([^\"]+)\"' % x,\n                flash_vars, x, default=None)\n            if not flash_var:\n                flash_var = self._search_regex([\n                    r'flashvars\\.%s\\s*=\\s*\"([^\"]+)\"' % x,\n                    r'%s\\s*=\\s*\"([^\"]+)\"' % x],\n                    webpage, x, *args, **kwargs)\n            return flash_var\n\n        hd_doc = self._download_xml(\n            'http://www.laola1.tv/server/hd_video.php', video_id, query={\n                'play': get_flashvar('streamid'),\n                'partner': get_flashvar('partnerid'),\n                'portal': get_flashvar('portalid'),\n                'lang': get_flashvar('sprache'),\n                'v5ident': '',\n            })\n\n        _v = lambda x, **k: xpath_text(hd_doc, './/video/' + x, **k)\n        title = _v('title', fatal=True)\n\n        token_url = None\n        premium = get_flashvar('premium', default=None)\n        if premium:\n            token_url = update_url_query(\n                _v('url', fatal=True), {\n                    'timestamp': get_flashvar('timestamp'),\n                    'auth': get_flashvar('auth'),\n                })\n        else:\n            data_abo = urlencode_postdata(\n                dict((i, v) for i, v in enumerate(_v('req_liga_abos').split(','))))\n            stream_access_url = update_url_query(\n                'https://club.laola1.tv/sp/laola1/api/v3/user/session/premium/player/stream-access', {\n                    'videoId': _v('id'),\n                    'target': self._search_regex(r'vs_target = (\\d+);', webpage, 'vs target'),\n                    'label': _v('label'),\n                    'area': _v('area'),\n                })\n            token_url = self._extract_token_url(stream_access_url, video_id, data_abo)\n\n        formats = self._extract_formats(token_url, video_id)\n\n        categories_str = _v('meta_sports')\n        categories = categories_str.split(',') if categories_str else []\n        is_live = _v('islive') == 'true'\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'upload_date': unified_strdate(_v('time_date')),\n            'uploader': _v('meta_organisation'),\n            'categories': categories,\n            'is_live': is_live,\n            'formats': formats,\n        }\n\n\nclass Laola1TvIE(Laola1TvEmbedIE):\n    IE_NAME = 'laola1tv'\n    _VALID_URL = r'https?://(?:www\\.)?laola1\\.tv/[a-z]+-[a-z]+/[^/]+/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.laola1.tv/de-de/video/straubing-tigers-koelner-haie/227883.html',\n        'info_dict': {\n            'id': '227883',\n            'display_id': 'straubing-tigers-koelner-haie',\n            'ext': 'flv',\n            'title': 'Straubing Tigers - K\u00f6lner Haie',\n            'upload_date': '20140912',\n            'is_live': False,\n            'categories': ['Eishockey'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.laola1.tv/de-de/video/straubing-tigers-koelner-haie',\n        'info_dict': {\n            'id': '464602',\n            'display_id': 'straubing-tigers-koelner-haie',\n            'ext': 'flv',\n            'title': 'Straubing Tigers - K\u00f6lner Haie',\n            'upload_date': '20160129',\n            'is_live': False,\n            'categories': ['Eishockey'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.laola1.tv/de-de/livestream/2016-03-22-belogorie-belgorod-trentino-diatec-lde',\n        'info_dict': {\n            'id': '487850',\n            'display_id': '2016-03-22-belogorie-belgorod-trentino-diatec-lde',\n            'ext': 'flv',\n            'title': 'Belogorie BELGOROD - TRENTINO Diatec',\n            'upload_date': '20160322',\n            'uploader': 'CEV - Europ\u00e4ischer Volleyball Verband',\n            'is_live': True,\n            'categories': ['Volleyball'],\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'This live stream has already finished.',\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        if 'Dieser Livestream ist bereits beendet.' in webpage:\n            raise ExtractorError('This live stream has already finished.', expected=True)\n\n        conf = self._parse_json(self._search_regex(\n            r'(?s)conf\\s*=\\s*({.+?});', webpage, 'conf'),\n            display_id, js_to_json)\n\n        video_id = conf['videoid']\n\n        config = self._download_json(conf['configUrl'], video_id, query={\n            'videoid': video_id,\n            'partnerid': conf['partnerid'],\n            'language': conf.get('language', ''),\n            'portal': conf.get('portalid', ''),\n        })\n        error = config.get('error')\n        if error:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n        video_data = config['video']\n        title = video_data['title']\n        is_live = video_data.get('isLivestream') and video_data.get('isLive')\n        meta = video_data.get('metaInformation')\n        sports = meta.get('sports')\n        categories = sports.split(',') if sports else []\n\n        token_url = self._extract_token_url(\n            video_data['streamAccess'], video_id,\n            video_data['abo']['required'])\n\n        formats = self._extract_formats(token_url, video_id)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('image'),\n            'categories': categories,\n            'formats': formats,\n            'is_live': is_live,\n        }\n\n\nclass ITTFIE(InfoExtractor):\n    _VALID_URL = r'https?://tv\\.ittf\\.com/video/[^/]+/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://tv.ittf.com/video/peng-wang-wei-matsudaira-kenta/951802',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        return self.url_result(\n            update_url_query('https://www.laola1.tv/titanplayer.php', {\n                'videoid': self._match_id(url),\n                'type': 'V',\n                'lang': 'en',\n                'portal': 'int',\n                'customer': 1024,\n            }), Laola1TvEmbedIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "laola1tv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/laola1tv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}