{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestStackMin(object):\n\n    def test_stack_min(self):\n        print('Test: Push on empty stack, non-empty stack')\n        stack = StackMin()\n        stack.push(5)\n        assert_equal(stack.peek(), 5)\n        assert_equal(stack.minimum(), 5)\n        stack.push(1)\n        assert_equal(stack.peek(), 1)\n        assert_equal(stack.minimum(), 1)\n        stack.push(3)\n        assert_equal(stack.peek(), 3)\n        assert_equal(stack.minimum(), 1)\n        stack.push(0)\n        assert_equal(stack.peek(), 0)\n        assert_equal(stack.minimum(), 0)\n\n        print('Test: Pop on non-empty stack')\n        assert_equal(stack.pop(), 0)\n        assert_equal(stack.minimum(), 1)\n        assert_equal(stack.pop(), 3)\n        assert_equal(stack.minimum(), 1)\n        assert_equal(stack.pop(), 1)\n        assert_equal(stack.minimum(), 5)\n        assert_equal(stack.pop(), 5)\n        assert_equal(stack.minimum(), sys.maxsize)\n\n        print('Test: Pop empty stack')\n        assert_equal(stack.pop(), None)\n\n        print('Success: test_stack_min')\n\n\ndef main():\n    test = TestStackMin()\n    test.test_stack_min()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestStackMin(object):\n\n    def test_stack_min(self):\n        print('Test: Push on empty stack, non-empty stack')\n        stack = StackMin()\n        stack.push(5)\n        assert_equal(stack.peek(), 5)\n        assert_equal(stack.minimum(), 5)\n        stack.push(1)\n        assert_equal(stack.peek(), 1)\n        assert_equal(stack.minimum(), 1)\n        stack.push(3)\n        assert_equal(stack.peek(), 3)\n        assert_equal(stack.minimum(), 1)\n        stack.push(0)\n        assert_equal(stack.peek(), 0)\n        assert_equal(stack.minimum(), 0)\n\n        print('Test: Pop on non-empty stack')\n        assert_equal(stack.pop(), 0)\n        assert_equal(stack.minimum(), 1)\n        assert_equal(stack.pop(), 3)\n        assert_equal(stack.minimum(), 1)\n        assert_equal(stack.pop(), 1)\n        assert_equal(stack.minimum(), 5)\n        assert_equal(stack.pop(), 5)\n        assert_equal(stack.minimum(), sys.maxsize)\n\n        print('Test: Pop empty stack')\n        assert_equal(stack.pop(), None)\n\n        print('Success: test_stack_min')\n\n\ndef main():\n    test = TestStackMin()\n    test.test_stack_min()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_stack_min.py", "id": "e32f504998151d14daf2ac3599bf9cf9", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/stacks_queues/stack_min/test_stack_min.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}