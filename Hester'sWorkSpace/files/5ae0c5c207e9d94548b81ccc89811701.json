{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nimport re\n\n\nclass ToypicsIE(InfoExtractor):\n    IE_DESC = 'Toypics video'\n    _VALID_URL = r'https?://videos\\.toypics\\.net/view/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://videos.toypics.net/view/514/chancebulged,-2-1/',\n        'md5': '16e806ad6d6f58079d210fe30985e08b',\n        'info_dict': {\n            'id': '514',\n            'ext': 'mp4',\n            'title': \"Chance-Bulge'd, 2\",\n            'age_limit': 18,\n            'uploader': 'kidsune',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        formats = self._parse_html5_media_entries(\n            url, webpage, video_id)[0]['formats']\n        title = self._html_search_regex([\n            r'<h1[^>]+class=[\"\\']view-video-title[^>]+>([^<]+)</h',\n            r'<title>([^<]+) - Toypics</title>',\n        ], webpage, 'title')\n\n        uploader = self._html_search_regex(\n            r'More videos from <strong>([^<]+)</strong>', webpage, 'uploader',\n            fatal=False)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'uploader': uploader,\n            'age_limit': 18,\n        }\n\n\nclass ToypicsUserIE(InfoExtractor):\n    IE_DESC = 'Toypics user profile'\n    _VALID_URL = r'https?://videos\\.toypics\\.net/(?!view)(?P<id>[^/?\n    _TEST = {\n        'url': 'http://videos.toypics.net/Mikey',\n        'info_dict': {\n            'id': 'Mikey',\n        },\n        'playlist_mincount': 19,\n    }\n\n    def _real_extract(self, url):\n        username = self._match_id(url)\n\n        profile_page = self._download_webpage(\n            url, username, note='Retrieving profile page')\n\n        video_count = int(self._search_regex(\n            r'public/\">Public Videos \\(([0-9]+)\\)</a></li>', profile_page,\n            'video count'))\n\n        PAGE_SIZE = 8\n        urls = []\n        page_count = (video_count + PAGE_SIZE + 1) // PAGE_SIZE\n        for n in range(1, page_count + 1):\n            lpage_url = url + '/public/%d' % n\n            lpage = self._download_webpage(\n                lpage_url, username,\n                note='Downloading page %d/%d' % (n, page_count))\n            urls.extend(\n                re.findall(\n                    r'<div[^>]+class=[\"\\']preview[^>]+>\\s*<a[^>]+href=\"(https?://videos\\.toypics\\.net/view/[^\"]+)\"',\n                    lpage))\n\n        return {\n            '_type': 'playlist',\n            'id': username,\n            'entries': [{\n                '_type': 'url',\n                'url': eurl,\n                'ie_key': 'Toypics',\n            } for eurl in urls]\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nimport re\n\n\nclass ToypicsIE(InfoExtractor):\n    IE_DESC = 'Toypics video'\n    _VALID_URL = r'https?://videos\\.toypics\\.net/view/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://videos.toypics.net/view/514/chancebulged,-2-1/',\n        'md5': '16e806ad6d6f58079d210fe30985e08b',\n        'info_dict': {\n            'id': '514',\n            'ext': 'mp4',\n            'title': \"Chance-Bulge'd, 2\",\n            'age_limit': 18,\n            'uploader': 'kidsune',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        formats = self._parse_html5_media_entries(\n            url, webpage, video_id)[0]['formats']\n        title = self._html_search_regex([\n            r'<h1[^>]+class=[\"\\']view-video-title[^>]+>([^<]+)</h',\n            r'<title>([^<]+) - Toypics</title>',\n        ], webpage, 'title')\n\n        uploader = self._html_search_regex(\n            r'More videos from <strong>([^<]+)</strong>', webpage, 'uploader',\n            fatal=False)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'uploader': uploader,\n            'age_limit': 18,\n        }\n\n\nclass ToypicsUserIE(InfoExtractor):\n    IE_DESC = 'Toypics user profile'\n    _VALID_URL = r'https?://videos\\.toypics\\.net/(?!view)(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'http://videos.toypics.net/Mikey',\n        'info_dict': {\n            'id': 'Mikey',\n        },\n        'playlist_mincount': 19,\n    }\n\n    def _real_extract(self, url):\n        username = self._match_id(url)\n\n        profile_page = self._download_webpage(\n            url, username, note='Retrieving profile page')\n\n        video_count = int(self._search_regex(\n            r'public/\">Public Videos \\(([0-9]+)\\)</a></li>', profile_page,\n            'video count'))\n\n        PAGE_SIZE = 8\n        urls = []\n        page_count = (video_count + PAGE_SIZE + 1) // PAGE_SIZE\n        for n in range(1, page_count + 1):\n            lpage_url = url + '/public/%d' % n\n            lpage = self._download_webpage(\n                lpage_url, username,\n                note='Downloading page %d/%d' % (n, page_count))\n            urls.extend(\n                re.findall(\n                    r'<div[^>]+class=[\"\\']preview[^>]+>\\s*<a[^>]+href=\"(https?://videos\\.toypics\\.net/view/[^\"]+)\"',\n                    lpage))\n\n        return {\n            '_type': 'playlist',\n            'id': username,\n            'entries': [{\n                '_type': 'url',\n                'url': eurl,\n                'ie_key': 'Toypics',\n            } for eurl in urls]\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "toypics.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/toypics.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}