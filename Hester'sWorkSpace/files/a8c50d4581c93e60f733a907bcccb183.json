{"author": "django", "code": "\n\nimport random\nimport tempfile\n\nfrom django.core.files.storage import FileSystemStorage\nfrom django.db import models\n\n\nclass CustomValidNameStorage(FileSystemStorage):\n    def get_valid_name(self, name):\n        \n        return name + '_valid'\n\n\ntemp_storage_location = tempfile.mkdtemp()\ntemp_storage = FileSystemStorage(location=temp_storage_location)\n\n\nclass Storage(models.Model):\n    def custom_upload_to(self, filename):\n        return 'foo'\n\n    def random_upload_to(self, filename):\n        \n        \n        return '%s/%s' % (random.randint(100, 999), filename)\n\n    normal = models.FileField(storage=temp_storage, upload_to='tests')\n    custom = models.FileField(storage=temp_storage, upload_to=custom_upload_to)\n    random = models.FileField(storage=temp_storage, upload_to=random_upload_to)\n    custom_valid_name = models.FileField(\n        storage=CustomValidNameStorage(location=temp_storage_location),\n        upload_to=random_upload_to,\n    )\n    default = models.FileField(storage=temp_storage, upload_to='tests', default='tests/default.txt')\n    empty = models.FileField(storage=temp_storage)\n    limited_length = models.FileField(storage=temp_storage, upload_to='tests', max_length=20)\n    extended_length = models.FileField(storage=temp_storage, upload_to='tests', max_length=300)\n", "comments": "    storing files according custom storage system    filefield   variations take   storage   argument specify files stored         mark name show called    this returns different result time     make sure gets called  ", "content": "\"\"\"\nStoring files according to a custom storage system\n\n``FileField`` and its variations can take a ``storage`` argument to specify how\nand where files should be stored.\n\"\"\"\n\nimport random\nimport tempfile\n\nfrom django.core.files.storage import FileSystemStorage\nfrom django.db import models\n\n\nclass CustomValidNameStorage(FileSystemStorage):\n    def get_valid_name(self, name):\n        # mark the name to show that this was called\n        return name + '_valid'\n\n\ntemp_storage_location = tempfile.mkdtemp()\ntemp_storage = FileSystemStorage(location=temp_storage_location)\n\n\nclass Storage(models.Model):\n    def custom_upload_to(self, filename):\n        return 'foo'\n\n    def random_upload_to(self, filename):\n        # This returns a different result each time,\n        # to make sure it only gets called once.\n        return '%s/%s' % (random.randint(100, 999), filename)\n\n    normal = models.FileField(storage=temp_storage, upload_to='tests')\n    custom = models.FileField(storage=temp_storage, upload_to=custom_upload_to)\n    random = models.FileField(storage=temp_storage, upload_to=random_upload_to)\n    custom_valid_name = models.FileField(\n        storage=CustomValidNameStorage(location=temp_storage_location),\n        upload_to=random_upload_to,\n    )\n    default = models.FileField(storage=temp_storage, upload_to='tests', default='tests/default.txt')\n    empty = models.FileField(storage=temp_storage)\n    limited_length = models.FileField(storage=temp_storage, upload_to='tests', max_length=20)\n    extended_length = models.FileField(storage=temp_storage, upload_to='tests', max_length=300)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "a8c50d4581c93e60f733a907bcccb183", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/file_storage/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}