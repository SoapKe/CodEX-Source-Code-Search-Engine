{"author": "mopidy", "code": "from __future__ import absolute_import, unicode_literals\n\nimport mock\n\nimport pytest\n\nfrom mopidy.mpd import actor\n\n\n\n\n@pytest.mark.parametrize(\"event,expected\", [\n    (['track_playback_paused', 'tl_track', 'time_position'], None),\n    (['track_playback_resumed', 'tl_track', 'time_position'], None),\n    (['track_playback_started', 'tl_track'], None),\n    (['track_playback_ended', 'tl_track', 'time_position'], None),\n    (['playback_state_changed', 'old_state', 'new_state'], 'player'),\n    (['tracklist_changed'], 'playlist'),\n    (['playlists_loaded'], 'stored_playlist'),\n    (['playlist_changed', 'playlist'], 'stored_playlist'),\n    (['playlist_deleted', 'uri'], 'stored_playlist'),\n    (['options_changed'], 'options'),\n    (['volume_changed', 'volume'], 'mixer'),\n    (['mute_changed', 'mute'], 'output'),\n    (['seeked', 'time_position'], 'player'),\n    (['stream_title_changed', 'title'], 'playlist'),\n])\ndef test_idle_hooked_up_correctly(event, expected):\n    config = {'mpd': {'hostname': 'foobar',\n                      'port': 1234,\n                      'zeroconf': None,\n                      'max_connections': None,\n                      'connection_timeout': None}}\n\n    with mock.patch.object(actor.MpdFrontend, '_setup_server'):\n        frontend = actor.MpdFrontend(core=mock.Mock(), config=config)\n\n    with mock.patch('mopidy.listener.send') as send_mock:\n        frontend.on_event(event[0], **{e: None for e in event[1:]})\n\n    if expected is None:\n        assert not send_mock.call_args\n    else:\n        send_mock.assert_called_once_with(mock.ANY, expected)\n", "comments": "  note  should kept sync events mopidy core listener ", "content": "from __future__ import absolute_import, unicode_literals\n\nimport mock\n\nimport pytest\n\nfrom mopidy.mpd import actor\n\n# NOTE: Should be kept in sync with all events from mopidy.core.listener\n\n\n@pytest.mark.parametrize(\"event,expected\", [\n    (['track_playback_paused', 'tl_track', 'time_position'], None),\n    (['track_playback_resumed', 'tl_track', 'time_position'], None),\n    (['track_playback_started', 'tl_track'], None),\n    (['track_playback_ended', 'tl_track', 'time_position'], None),\n    (['playback_state_changed', 'old_state', 'new_state'], 'player'),\n    (['tracklist_changed'], 'playlist'),\n    (['playlists_loaded'], 'stored_playlist'),\n    (['playlist_changed', 'playlist'], 'stored_playlist'),\n    (['playlist_deleted', 'uri'], 'stored_playlist'),\n    (['options_changed'], 'options'),\n    (['volume_changed', 'volume'], 'mixer'),\n    (['mute_changed', 'mute'], 'output'),\n    (['seeked', 'time_position'], 'player'),\n    (['stream_title_changed', 'title'], 'playlist'),\n])\ndef test_idle_hooked_up_correctly(event, expected):\n    config = {'mpd': {'hostname': 'foobar',\n                      'port': 1234,\n                      'zeroconf': None,\n                      'max_connections': None,\n                      'connection_timeout': None}}\n\n    with mock.patch.object(actor.MpdFrontend, '_setup_server'):\n        frontend = actor.MpdFrontend(core=mock.Mock(), config=config)\n\n    with mock.patch('mopidy.listener.send') as send_mock:\n        frontend.on_event(event[0], **{e: None for e in event[1:]})\n\n    if expected is None:\n        assert not send_mock.call_args\n    else:\n        send_mock.assert_called_once_with(mock.ANY, expected)\n", "description": "Mopidy is an extensible music server that plays music from local disk, Spotify, SoundCloud, Google Play Music, and more. You edit the playlist from any phone, tablet, or computer using a range of MPD and web clients.", "file_name": "test_actor.py", "id": "e3fc2d2acf228b10357d95d6b2a440dc", "language": "Python", "project_name": "mopidy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mopidy-mopidy/mopidy-mopidy-79d42c3/tests/mpd/test_actor.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:12:51Z", "url": "https://github.com/mopidy/mopidy", "wiki": false}