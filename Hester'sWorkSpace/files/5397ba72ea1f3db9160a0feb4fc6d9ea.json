{"author": "tgalal", "code": "from yowsup.layers import YowLayer, YowLayerEvent, EventCallback\nfrom yowsup.common.http.httpproxy import HttpProxy\nfrom yowsup.layers.network.layer_interface import YowNetworkLayerInterface\nimport asyncore, socket, logging\nlogger = logging.getLogger(__name__)\n\nclass YowNetworkLayer(YowLayer, asyncore.dispatcher_with_send):\n    \n\n    EVENT_STATE_CONNECT         = \"org.openwhatsapp.yowsup.event.network.connect\"\n    EVENT_STATE_DISCONNECT      = \"org.openwhatsapp.yowsup.event.network.disconnect\"\n    EVENT_STATE_CONNECTED       = \"org.openwhatsapp.yowsup.event.network.connected\"\n    EVENT_STATE_DISCONNECTED    = \"org.openwhatsapp.yowsup.event.network.disconnected\"\n\n    PROP_ENDPOINT               = \"org.openwhatsapp.yowsup.prop.endpoint\"\n    PROP_NET_READSIZE           = \"org.openwhatsapp.yowsup.prop.net.readSize\"\n\n    STATE_DISCONNECTED          = 0\n    STATE_CONNECTING            = 1\n    STATE_CONNECTED             = 2\n    STATE_DISCONNECTING         = 3\n\n    def __init__(self):\n        asyncore.dispatcher.__init__(self)\n        self.state = self.__class__.STATE_DISCONNECTED\n        YowLayer.__init__(self)\n        self.interface = YowNetworkLayerInterface(self)\n        httpProxy = HttpProxy.getFromEnviron()\n        proxyHandler = None\n        if httpProxy != None:\n            logger.debug(\"HttpProxy initialize: %s\" % httpProxy)\n            def onConnect():\n                logger.debug(\"HttpProxy connected\")\n                self.proxyHandler = None\n                self.handle_connect()\n            proxyHandler = httpProxy.handler()\n            proxyHandler.onConnect = onConnect\n        self.proxyHandler = proxyHandler\n\n    @EventCallback(EVENT_STATE_CONNECT)\n    def onConnect(self, ev):\n        self.createConnection()\n        return True\n\n    @EventCallback(EVENT_STATE_DISCONNECT)\n    def onDisconnect(self, ev):\n        self.destroyConnection(ev.getArg(\"reason\"))\n        return True\n\n    def createConnection(self):\n        self.state = self.__class__.STATE_CONNECTING\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.out_buffer = bytearray()\n        endpoint = self.getProp(self.__class__.PROP_ENDPOINT)\n        logger.debug(\"Connecting to %s:%s\" % endpoint)\n        if self.proxyHandler != None:\n            logger.debug(\"HttpProxy connect: %s:%d\" % endpoint)\n            self.proxyHandler.connect(self, endpoint)\n        else:\n            try:\n                self.connect(endpoint)\n            except OSError as e:\n                self.handle_close(e)\n\n    def destroyConnection(self, reason = None):\n        self.state = self.__class__.STATE_DISCONNECTING\n        self.handle_close(reason or \"Requested\")\n\n    def getStatus(self):\n        return self.connected\n\n    def handle_connect(self):\n        self.state = self.__class__.STATE_CONNECTED\n        self.connected = True\n        if self.proxyHandler != None:\n            logger.debug(\"HttpProxy handle connect\")\n            self.proxyHandler.send(self)\n        else:\n            self.emitEvent(YowLayerEvent(YowNetworkLayer.EVENT_STATE_CONNECTED))\n\n    def handle_close(self, reason = \"Connection Closed\"):\n        if self.state != self.__class__.STATE_DISCONNECTED:\n            self.state = self.__class__.STATE_DISCONNECTED\n            self.connected = False\n            logger.debug(\"Disconnected, reason: %s\" % reason)\n            self.emitEvent(YowLayerEvent(self.__class__.EVENT_STATE_DISCONNECTED, reason = reason, detached=True))\n            self.close()\n\n    def handle_error(self):\n        raise\n\n    def handle_read(self):\n        readSize = self.getProp(self.__class__.PROP_NET_READSIZE, 1024)\n        if self.proxyHandler != None:\n            data = self.proxyHandler.recv(self, readSize)\n            logger.debug(\"HttpProxy handle read: %s\" % data)\n        else:\n            data = self.recv(readSize)\n            self.receive(data)\n\n    def send(self, data):\n        if self.connected:\n            self.out_buffer = self.out_buffer + data\n            self.initiate_send()\n\n    def receive(self, data):\n        self.toUpper(data)\n\n    def __str__(self):\n        return \"Network Layer\"\n", "comments": "            send        bytearray    none         receive     bytearray    bytearray         ", "content": "from yowsup.layers import YowLayer, YowLayerEvent, EventCallback\nfrom yowsup.common.http.httpproxy import HttpProxy\nfrom yowsup.layers.network.layer_interface import YowNetworkLayerInterface\nimport asyncore, socket, logging\nlogger = logging.getLogger(__name__)\n\nclass YowNetworkLayer(YowLayer, asyncore.dispatcher_with_send):\n    '''\n        send:       bytearray -> None\n        receive:    bytearray -> bytearray\n    '''\n\n    EVENT_STATE_CONNECT         = \"org.openwhatsapp.yowsup.event.network.connect\"\n    EVENT_STATE_DISCONNECT      = \"org.openwhatsapp.yowsup.event.network.disconnect\"\n    EVENT_STATE_CONNECTED       = \"org.openwhatsapp.yowsup.event.network.connected\"\n    EVENT_STATE_DISCONNECTED    = \"org.openwhatsapp.yowsup.event.network.disconnected\"\n\n    PROP_ENDPOINT               = \"org.openwhatsapp.yowsup.prop.endpoint\"\n    PROP_NET_READSIZE           = \"org.openwhatsapp.yowsup.prop.net.readSize\"\n\n    STATE_DISCONNECTED          = 0\n    STATE_CONNECTING            = 1\n    STATE_CONNECTED             = 2\n    STATE_DISCONNECTING         = 3\n\n    def __init__(self):\n        asyncore.dispatcher.__init__(self)\n        self.state = self.__class__.STATE_DISCONNECTED\n        YowLayer.__init__(self)\n        self.interface = YowNetworkLayerInterface(self)\n        httpProxy = HttpProxy.getFromEnviron()\n        proxyHandler = None\n        if httpProxy != None:\n            logger.debug(\"HttpProxy initialize: %s\" % httpProxy)\n            def onConnect():\n                logger.debug(\"HttpProxy connected\")\n                self.proxyHandler = None\n                self.handle_connect()\n            proxyHandler = httpProxy.handler()\n            proxyHandler.onConnect = onConnect\n        self.proxyHandler = proxyHandler\n\n    @EventCallback(EVENT_STATE_CONNECT)\n    def onConnect(self, ev):\n        self.createConnection()\n        return True\n\n    @EventCallback(EVENT_STATE_DISCONNECT)\n    def onDisconnect(self, ev):\n        self.destroyConnection(ev.getArg(\"reason\"))\n        return True\n\n    def createConnection(self):\n        self.state = self.__class__.STATE_CONNECTING\n        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.out_buffer = bytearray()\n        endpoint = self.getProp(self.__class__.PROP_ENDPOINT)\n        logger.debug(\"Connecting to %s:%s\" % endpoint)\n        if self.proxyHandler != None:\n            logger.debug(\"HttpProxy connect: %s:%d\" % endpoint)\n            self.proxyHandler.connect(self, endpoint)\n        else:\n            try:\n                self.connect(endpoint)\n            except OSError as e:\n                self.handle_close(e)\n\n    def destroyConnection(self, reason = None):\n        self.state = self.__class__.STATE_DISCONNECTING\n        self.handle_close(reason or \"Requested\")\n\n    def getStatus(self):\n        return self.connected\n\n    def handle_connect(self):\n        self.state = self.__class__.STATE_CONNECTED\n        self.connected = True\n        if self.proxyHandler != None:\n            logger.debug(\"HttpProxy handle connect\")\n            self.proxyHandler.send(self)\n        else:\n            self.emitEvent(YowLayerEvent(YowNetworkLayer.EVENT_STATE_CONNECTED))\n\n    def handle_close(self, reason = \"Connection Closed\"):\n        if self.state != self.__class__.STATE_DISCONNECTED:\n            self.state = self.__class__.STATE_DISCONNECTED\n            self.connected = False\n            logger.debug(\"Disconnected, reason: %s\" % reason)\n            self.emitEvent(YowLayerEvent(self.__class__.EVENT_STATE_DISCONNECTED, reason = reason, detached=True))\n            self.close()\n\n    def handle_error(self):\n        raise\n\n    def handle_read(self):\n        readSize = self.getProp(self.__class__.PROP_NET_READSIZE, 1024)\n        if self.proxyHandler != None:\n            data = self.proxyHandler.recv(self, readSize)\n            logger.debug(\"HttpProxy handle read: %s\" % data)\n        else:\n            data = self.recv(readSize)\n            self.receive(data)\n\n    def send(self, data):\n        if self.connected:\n            self.out_buffer = self.out_buffer + data\n            self.initiate_send()\n\n    def receive(self, data):\n        self.toUpper(data)\n\n    def __str__(self):\n        return \"Network Layer\"\n", "description": "The python WhatsApp library", "file_name": "layer.py", "id": "5397ba72ea1f3db9160a0feb4fc6d9ea", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/network/layer.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}