{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2015, Manuel Sousa <manuel.sousa@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_exchange\nauthor: \"Manuel Sousa (@manuel-sousa)\"\nversion_added: \"2.0\"\n\nshort_description: This module manages rabbitMQ exchanges\ndescription:\n  - This module uses rabbitMQ Rest API to create/delete exchanges\nrequirements: [ \"requests >= 1.0.0\" ]\noptions:\n    name:\n        description:\n            - Name of the exchange to create\n        required: true\n    state:\n        description:\n            - Whether the exchange should be present or absent\n            - Only present implemented atm\n        choices: [ \"present\", \"absent\" ]\n        required: false\n        default: present\n    login_user:\n        description:\n            - rabbitMQ user for connection\n        required: false\n        default: guest\n    login_password:\n        description:\n            - rabbitMQ password for connection\n        required: false\n        default: false\n    login_host:\n        description:\n            - rabbitMQ host for connection\n        required: false\n        default: localhost\n    login_port:\n        description:\n            - rabbitMQ management api port\n        required: false\n        default: 15672\n    vhost:\n        description:\n            - rabbitMQ virtual host\n        required: false\n        default: \"/\"\n    durable:\n        description:\n            - whether exchange is durable or not\n        required: false\n        choices: [ \"yes\", \"no\" ]\n        default: yes\n    exchange_type:\n        description:\n            - type for the exchange\n        required: false\n        choices: [ \"fanout\", \"direct\", \"headers\", \"topic\" ]\n        aliases: [ \"type\" ]\n        default: direct\n    auto_delete:\n        description:\n            - if the exchange should delete itself after all queues/exchanges unbound from it\n        required: false\n        choices: [ \"yes\", \"no\" ]\n        default: no\n    internal:\n        description:\n            - exchange is available only for other exchanges\n        required: false\n        choices: [ \"yes\", \"no\" ]\n        default: no\n    arguments:\n        description:\n            - extra arguments for exchange. If defined this argument is a key/value dictionary\n        required: false\n        default: {}\n'''\n\nEXAMPLES = '''\n\n- rabbitmq_exchange:\n    name: directExchange\n\n\n- rabbitmq_exchange:\n    name: topicExchange\n    type: topic\n    vhost: myVhost\n'''\n\nimport json\n\ntry:\n    import requests\n    HAS_REQUESTS = True\nexcept ImportError:\n    HAS_REQUESTS = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib import parse as urllib_parse\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(default='present', choices=['present', 'absent'], type='str'),\n            name=dict(required=True, type='str'),\n            login_user=dict(default='guest', type='str'),\n            login_password=dict(default='guest', type='str', no_log=True),\n            login_host=dict(default='localhost', type='str'),\n            login_port=dict(default='15672', type='str'),\n            vhost=dict(default='/', type='str'),\n            durable=dict(default=True, type='bool'),\n            auto_delete=dict(default=False, type='bool'),\n            internal=dict(default=False, type='bool'),\n            exchange_type=dict(default='direct', aliases=['type'], type='str'),\n            arguments=dict(default=dict(), type='dict')\n        ),\n        supports_check_mode=True\n    )\n\n    result = dict(changed=False, name=module.params['name'])\n\n    url = \"http://%s:%s/api/exchanges/%s/%s\" % (\n        module.params['login_host'],\n        module.params['login_port'],\n        urllib_parse.quote(module.params['vhost'], ''),\n        urllib_parse.quote(module.params['name'], '')\n    )\n\n    if not HAS_REQUESTS:\n        module.fail_json(msg=\"requests library is required for this module. To install, use `pip install requests`\")\n\n    \n    r = requests.get(url, auth=(module.params['login_user'], module.params['login_password']))\n\n    if r.status_code == 200:\n        exchange_exists = True\n        response = r.json()\n    elif r.status_code == 404:\n        exchange_exists = False\n        response = r.text\n    else:\n        module.fail_json(\n            msg=\"Invalid response from RESTAPI when trying to check if exchange exists\",\n            details=r.text\n        )\n\n    if module.params['state'] == 'present':\n        change_required = not exchange_exists\n    else:\n        change_required = exchange_exists\n\n    \n    if not change_required and r.status_code == 200 and module.params['state'] == 'present':\n        if not (\n            response['durable'] == module.params['durable'] and\n            response['auto_delete'] == module.params['auto_delete'] and\n            response['internal'] == module.params['internal'] and\n            response['type'] == module.params['exchange_type']\n        ):\n            module.fail_json(\n                msg=\"RabbitMQ RESTAPI doesn't support attribute changes for existing exchanges\"\n            )\n\n    \n    if module.check_mode:\n        result['changed'] = change_required\n        result['details'] = response\n        result['arguments'] = module.params['arguments']\n        module.exit_json(**result)\n\n    \n    if change_required:\n        if module.params['state'] == 'present':\n            r = requests.put(\n                url,\n                auth=(module.params['login_user'], module.params['login_password']),\n                headers={\"content-type\": \"application/json\"},\n                data=json.dumps({\n                    \"durable\": module.params['durable'],\n                    \"auto_delete\": module.params['auto_delete'],\n                    \"internal\": module.params['internal'],\n                    \"type\": module.params['exchange_type'],\n                    \"arguments\": module.params['arguments']\n                })\n            )\n        elif module.params['state'] == 'absent':\n            r = requests.delete(url, auth=(module.params['login_user'], module.params['login_password']))\n\n        \n        if r.status_code == 204 or r.status_code == 201:\n            result['changed'] = True\n            module.exit_json(**result)\n        else:\n            module.fail_json(\n                msg=\"Error creating exchange\",\n                status=r.status_code,\n                details=r.text\n            )\n\n    else:\n        result['changed'] = False\n        module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rabbitmq exchange author   manuel sousa ( manuel sousa)  version added   2 0   short description  this module manages rabbitmq exchanges description      this module uses rabbitmq rest api create delete exchanges requirements     requests    1 0 0    options      name          description                name exchange create         required  true     state          description                whether exchange present absent               only present implemented atm         choices     present    absent            required  false         default  present     login user          description                rabbitmq user connection         required  false         default  guest     login password          description                rabbitmq password connection         required  false         default  false     login host          description                rabbitmq host connection         required  false         default  localhost     login port          description                rabbitmq management api port         required  false         default  15672     vhost          description                rabbitmq virtual host         required  false         default          durable          description                whether exchange durable         required  false         choices     yes               default  yes     exchange type          description                type exchange         required  false         choices     fanout    direct    headers    topic            aliases     type            default  direct     auto delete          description                exchange delete queues exchanges unbound         required  false         choices     yes               default      internal          description                exchange available exchanges         required  false         choices     yes               default      arguments          description                extra arguments exchange  if defined argument key value dictionary         required  false         default          examples         create direct exchange   rabbitmq exchange      name  directexchange    create topic exchange vhost   rabbitmq exchange      name  topicexchange     type  topic     vhost  myvhost         usr bin python        coding  utf 8        (c) 2015  manuel sousa  manuel sousa gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    create direct exchange    create topic exchange vhost    check exchange already exists    check attributes change existing exchange    exit check mode    do changes    rabbitmq 3 6 7 changed response code 204 201 ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2015, Manuel Sousa <manuel.sousa@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_exchange\nauthor: \"Manuel Sousa (@manuel-sousa)\"\nversion_added: \"2.0\"\n\nshort_description: This module manages rabbitMQ exchanges\ndescription:\n  - This module uses rabbitMQ Rest API to create/delete exchanges\nrequirements: [ \"requests >= 1.0.0\" ]\noptions:\n    name:\n        description:\n            - Name of the exchange to create\n        required: true\n    state:\n        description:\n            - Whether the exchange should be present or absent\n            - Only present implemented atm\n        choices: [ \"present\", \"absent\" ]\n        required: false\n        default: present\n    login_user:\n        description:\n            - rabbitMQ user for connection\n        required: false\n        default: guest\n    login_password:\n        description:\n            - rabbitMQ password for connection\n        required: false\n        default: false\n    login_host:\n        description:\n            - rabbitMQ host for connection\n        required: false\n        default: localhost\n    login_port:\n        description:\n            - rabbitMQ management api port\n        required: false\n        default: 15672\n    vhost:\n        description:\n            - rabbitMQ virtual host\n        required: false\n        default: \"/\"\n    durable:\n        description:\n            - whether exchange is durable or not\n        required: false\n        choices: [ \"yes\", \"no\" ]\n        default: yes\n    exchange_type:\n        description:\n            - type for the exchange\n        required: false\n        choices: [ \"fanout\", \"direct\", \"headers\", \"topic\" ]\n        aliases: [ \"type\" ]\n        default: direct\n    auto_delete:\n        description:\n            - if the exchange should delete itself after all queues/exchanges unbound from it\n        required: false\n        choices: [ \"yes\", \"no\" ]\n        default: no\n    internal:\n        description:\n            - exchange is available only for other exchanges\n        required: false\n        choices: [ \"yes\", \"no\" ]\n        default: no\n    arguments:\n        description:\n            - extra arguments for exchange. If defined this argument is a key/value dictionary\n        required: false\n        default: {}\n'''\n\nEXAMPLES = '''\n# Create direct exchange\n- rabbitmq_exchange:\n    name: directExchange\n\n# Create topic exchange on vhost\n- rabbitmq_exchange:\n    name: topicExchange\n    type: topic\n    vhost: myVhost\n'''\n\nimport json\n\ntry:\n    import requests\n    HAS_REQUESTS = True\nexcept ImportError:\n    HAS_REQUESTS = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib import parse as urllib_parse\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(default='present', choices=['present', 'absent'], type='str'),\n            name=dict(required=True, type='str'),\n            login_user=dict(default='guest', type='str'),\n            login_password=dict(default='guest', type='str', no_log=True),\n            login_host=dict(default='localhost', type='str'),\n            login_port=dict(default='15672', type='str'),\n            vhost=dict(default='/', type='str'),\n            durable=dict(default=True, type='bool'),\n            auto_delete=dict(default=False, type='bool'),\n            internal=dict(default=False, type='bool'),\n            exchange_type=dict(default='direct', aliases=['type'], type='str'),\n            arguments=dict(default=dict(), type='dict')\n        ),\n        supports_check_mode=True\n    )\n\n    result = dict(changed=False, name=module.params['name'])\n\n    url = \"http://%s:%s/api/exchanges/%s/%s\" % (\n        module.params['login_host'],\n        module.params['login_port'],\n        urllib_parse.quote(module.params['vhost'], ''),\n        urllib_parse.quote(module.params['name'], '')\n    )\n\n    if not HAS_REQUESTS:\n        module.fail_json(msg=\"requests library is required for this module. To install, use `pip install requests`\")\n\n    # Check if exchange already exists\n    r = requests.get(url, auth=(module.params['login_user'], module.params['login_password']))\n\n    if r.status_code == 200:\n        exchange_exists = True\n        response = r.json()\n    elif r.status_code == 404:\n        exchange_exists = False\n        response = r.text\n    else:\n        module.fail_json(\n            msg=\"Invalid response from RESTAPI when trying to check if exchange exists\",\n            details=r.text\n        )\n\n    if module.params['state'] == 'present':\n        change_required = not exchange_exists\n    else:\n        change_required = exchange_exists\n\n    # Check if attributes change on existing exchange\n    if not change_required and r.status_code == 200 and module.params['state'] == 'present':\n        if not (\n            response['durable'] == module.params['durable'] and\n            response['auto_delete'] == module.params['auto_delete'] and\n            response['internal'] == module.params['internal'] and\n            response['type'] == module.params['exchange_type']\n        ):\n            module.fail_json(\n                msg=\"RabbitMQ RESTAPI doesn't support attribute changes for existing exchanges\"\n            )\n\n    # Exit if check_mode\n    if module.check_mode:\n        result['changed'] = change_required\n        result['details'] = response\n        result['arguments'] = module.params['arguments']\n        module.exit_json(**result)\n\n    # Do changes\n    if change_required:\n        if module.params['state'] == 'present':\n            r = requests.put(\n                url,\n                auth=(module.params['login_user'], module.params['login_password']),\n                headers={\"content-type\": \"application/json\"},\n                data=json.dumps({\n                    \"durable\": module.params['durable'],\n                    \"auto_delete\": module.params['auto_delete'],\n                    \"internal\": module.params['internal'],\n                    \"type\": module.params['exchange_type'],\n                    \"arguments\": module.params['arguments']\n                })\n            )\n        elif module.params['state'] == 'absent':\n            r = requests.delete(url, auth=(module.params['login_user'], module.params['login_password']))\n\n        # RabbitMQ 3.6.7 changed this response code from 204 to 201\n        if r.status_code == 204 or r.status_code == 201:\n            result['changed'] = True\n            module.exit_json(**result)\n        else:\n            module.fail_json(\n                msg=\"Error creating exchange\",\n                status=r.status_code,\n                details=r.text\n            )\n\n    else:\n        result['changed'] = False\n        module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rabbitmq_exchange.py", "id": "29e1078bc24d800789cb705a11bb158a", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/messaging/rabbitmq_exchange.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}