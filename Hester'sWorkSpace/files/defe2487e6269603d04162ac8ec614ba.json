{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .brightcove import BrightcoveNewIE\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    smuggle_url,\n    try_get,\n)\n\n\nclass NoovoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[^/]+\\.)?noovo\\.ca/videos/(?P<id>[^/]+/[^/?\n    _TESTS = [{\n        \n        'url': 'http://noovo.ca/videos/rpm-plus/chrysler-imperial',\n        'info_dict': {\n            'id': '5386045029001',\n            'ext': 'mp4',\n            'title': 'Chrysler Imperial',\n            'description': 'md5:de3c898d1eb810f3e6243e08c8b4a056',\n            'timestamp': 1491399228,\n            'upload_date': '20170405',\n            'uploader_id': '618566855001',\n            'series': 'RPM+',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'http://noovo.ca/videos/l-amour-est-dans-le-pre/episode-13-8',\n        'info_dict': {\n            'id': '5395865725001',\n            'title': '\u00c9pisode 13 : Les retrouvailles',\n            'description': 'md5:888c3330f0c1b4476c5bc99a1c040473',\n            'ext': 'mp4',\n            'timestamp': 1492019320,\n            'upload_date': '20170412',\n            'uploader_id': '618566855001',\n            'series': \"L'amour est dans le pr\u00e9\",\n            'season_number': 5,\n            'episode': '\u00c9pisode 13',\n            'episode_number': 13,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n    BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/618566855001/default_default/index.html?videoId=%s'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        bc_url = BrightcoveNewIE._extract_url(self, webpage)\n\n        data = self._parse_json(\n            self._search_regex(\n                r'(?s)dataLayer\\.push\\(\\s*({.+?})\\s*\\);', webpage, 'data',\n                default='{}'),\n            video_id, transform_source=js_to_json, fatal=False)\n\n        title = try_get(\n            data, lambda x: x['video']['nom'],\n            compat_str) or self._html_search_meta(\n            'dcterms.Title', webpage, 'title', fatal=True)\n\n        description = self._html_search_meta(\n            ('dcterms.Description', 'description'), webpage, 'description')\n\n        series = try_get(\n            data, lambda x: x['emission']['nom']) or self._search_regex(\n            r'<div[^>]+class=\"banner-card__subtitle h4\"[^>]*>([^<]+)',\n            webpage, 'series', default=None)\n\n        season_el = try_get(data, lambda x: x['emission']['saison'], dict) or {}\n        season = try_get(season_el, lambda x: x['nom'], compat_str)\n        season_number = int_or_none(try_get(season_el, lambda x: x['numero']))\n\n        episode_el = try_get(season_el, lambda x: x['episode'], dict) or {}\n        episode = try_get(episode_el, lambda x: x['nom'], compat_str)\n        episode_number = int_or_none(try_get(episode_el, lambda x: x['numero']))\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': BrightcoveNewIE.ie_key(),\n            'url': smuggle_url(bc_url, {'geo_countries': ['CA']}),\n            'title': title,\n            'description': description,\n            'series': series,\n            'season': season,\n            'season_number': season_number,\n            'episode': episode,\n            'episode_number': episode_number,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n# clip\n# episode\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .brightcove import BrightcoveNewIE\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    js_to_json,\n    smuggle_url,\n    try_get,\n)\n\n\nclass NoovoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[^/]+\\.)?noovo\\.ca/videos/(?P<id>[^/]+/[^/?#&]+)'\n    _TESTS = [{\n        # clip\n        'url': 'http://noovo.ca/videos/rpm-plus/chrysler-imperial',\n        'info_dict': {\n            'id': '5386045029001',\n            'ext': 'mp4',\n            'title': 'Chrysler Imperial',\n            'description': 'md5:de3c898d1eb810f3e6243e08c8b4a056',\n            'timestamp': 1491399228,\n            'upload_date': '20170405',\n            'uploader_id': '618566855001',\n            'series': 'RPM+',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # episode\n        'url': 'http://noovo.ca/videos/l-amour-est-dans-le-pre/episode-13-8',\n        'info_dict': {\n            'id': '5395865725001',\n            'title': '\u00c9pisode 13 : Les retrouvailles',\n            'description': 'md5:888c3330f0c1b4476c5bc99a1c040473',\n            'ext': 'mp4',\n            'timestamp': 1492019320,\n            'upload_date': '20170412',\n            'uploader_id': '618566855001',\n            'series': \"L'amour est dans le pr\u00e9\",\n            'season_number': 5,\n            'episode': '\u00c9pisode 13',\n            'episode_number': 13,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n    BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/618566855001/default_default/index.html?videoId=%s'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        bc_url = BrightcoveNewIE._extract_url(self, webpage)\n\n        data = self._parse_json(\n            self._search_regex(\n                r'(?s)dataLayer\\.push\\(\\s*({.+?})\\s*\\);', webpage, 'data',\n                default='{}'),\n            video_id, transform_source=js_to_json, fatal=False)\n\n        title = try_get(\n            data, lambda x: x['video']['nom'],\n            compat_str) or self._html_search_meta(\n            'dcterms.Title', webpage, 'title', fatal=True)\n\n        description = self._html_search_meta(\n            ('dcterms.Description', 'description'), webpage, 'description')\n\n        series = try_get(\n            data, lambda x: x['emission']['nom']) or self._search_regex(\n            r'<div[^>]+class=\"banner-card__subtitle h4\"[^>]*>([^<]+)',\n            webpage, 'series', default=None)\n\n        season_el = try_get(data, lambda x: x['emission']['saison'], dict) or {}\n        season = try_get(season_el, lambda x: x['nom'], compat_str)\n        season_number = int_or_none(try_get(season_el, lambda x: x['numero']))\n\n        episode_el = try_get(season_el, lambda x: x['episode'], dict) or {}\n        episode = try_get(episode_el, lambda x: x['nom'], compat_str)\n        episode_number = int_or_none(try_get(episode_el, lambda x: x['numero']))\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': BrightcoveNewIE.ie_key(),\n            'url': smuggle_url(bc_url, {'geo_countries': ['CA']}),\n            'title': title,\n            'description': description,\n            'series': series,\n            'season': season,\n            'season_number': season_number,\n            'episode': episode,\n            'episode_number': episode_number,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "noovo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/noovo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}