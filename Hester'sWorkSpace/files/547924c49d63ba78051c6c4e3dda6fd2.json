{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2016-2017, Cumulus Networks <ce-ceng@cumulusnetworks.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: nclu\nversion_added: \"2.3\"\nauthor: \"Cumulus Networks\"\nshort_description: Configure network interfaces using NCLU\ndescription:\n    - Interface to the Network Command Line Utility, developed to make it easier\n      to configure operating systems running ifupdown2 and Quagga, such as\n      Cumulus Linux. Command documentation is available at\n      U(https://docs.cumulusnetworks.com/display/DOCS/Network+Command+Line+Utility)\noptions:\n    commands:\n        description:\n            - A list of strings containing the net commands to run. Mutually\n              exclusive with I(template).\n    template:\n        description:\n            - A single, multi-line string with jinja2 formatting. This string\n              will be broken by lines, and each line will be run through net.\n              Mutually exclusive with I(commands).\n    commit:\n        description:\n            - When true, performs a 'net commit' at the end of the block.\n              Mutually exclusive with I(atomic).\n        default: false\n    abort:\n        description:\n            - Boolean. When true, perform a 'net abort' before the block.\n              This cleans out any uncommitted changes in the buffer.\n              Mutually exclusive with I(atomic).\n        default: false\n    atomic:\n        description:\n            - When true, equivalent to both I(commit) and I(abort) being true.\n              Mutually exclusive with I(commit) and I(atomic).\n        default: false\n    description:\n        description:\n            - Commit description that will be recorded to the commit log if\n              I(commit) or I(atomic) are true.\n        default: \"Ansible-originated commit\"\n'''\n\nEXAMPLES = '''\n\n- name: Add two interfaces without committing any changes\n  nclu:\n    commands:\n        - add int swp1\n        - add int swp2\n\n- name: Add 48 interfaces and commit the change.\n  nclu:\n    template: |\n        {% for iface in range(1,49) %}\n        add int swp{{iface}}\n        {% endfor %}\n    commit: true\n    description: \"Ansible - add swps1-48\"\n\n- name: Atomically add an interface\n  nclu:\n    commands:\n        - add int swp1\n    atomic: true\n    description: \"Ansible - add swp1\"\n'''\n\nRETURN = '''\nchanged:\n    description: whether the interface was changed\n    returned: changed\n    type: bool\n    sample: True\nmsg:\n    description: human-readable report of success or failure\n    returned: always\n    type: string\n    sample: \"interface bond0 config updated\"\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef command_helper(module, command, errmsg=None):\n    \"\"\"Run a command, catch any nclu errors\"\"\"\n    (_rc, output, _err) = module.run_command(\"/usr/bin/net %s\" % command)\n    if _rc or 'ERROR' in output or 'ERROR' in _err:\n        module.fail_json(msg=errmsg or output)\n    return str(output)\n\n\ndef check_pending(module):\n    \"\"\"Check the pending diff of the nclu buffer.\"\"\"\n    pending = command_helper(module, \"pending\", \"Error in pending config. You may want to view `net pending` on this target.\")\n\n    delimeter1 = \"net add/del commands since the last 'net commit'\"\n    color1 = '\\x1b[94m'\n    if delimeter1 in pending:\n        pending = pending.split(delimeter1)[0]\n        pending = pending.replace(color1, '')\n    return pending.strip()\n\n\ndef run_nclu(module, command_list, command_string, commit, atomic, abort, description):\n    _changed = False\n\n    commands = []\n    if command_list:\n        commands = command_list\n    elif command_string:\n        commands = command_string.splitlines()\n\n    do_commit = False\n    do_abort = abort\n    if commit or atomic:\n        do_commit = True\n        if atomic:\n            do_abort = True\n\n    if do_abort:\n        command_helper(module, \"abort\")\n\n    \n    before = check_pending(module)\n    \n    output_lines = []\n    for line in commands:\n        output_lines += [command_helper(module, line.strip(), \"Failed on line %s\" % line)]\n    output = \"\\n\".join(output_lines)\n\n    \n    after = check_pending(module)\n    if before == after:\n        _changed = False\n    else:\n        _changed = True\n\n    \n    if do_commit:\n        result = command_helper(module, \"commit description '%s'\" % description)\n        if \"commit ignored\" in result:\n            _changed = False\n            command_helper(module, \"abort\")\n        elif command_helper(module, \"show commit last\") == \"\":\n            _changed = False\n\n    return _changed, output\n\n\ndef main(testing=False):\n    module = AnsibleModule(argument_spec=dict(\n        commands=dict(required=False, type='list'),\n        template=dict(required=False, type='str'),\n        description=dict(required=False, type='str', default=\"Ansible-originated commit\"),\n        abort=dict(required=False, type='bool', default=False),\n        commit=dict(required=False, type='bool', default=False),\n        atomic=dict(required=False, type='bool', default=False)),\n        mutually_exclusive=[('commands', 'template'),\n                            ('commit', 'atomic'),\n                            ('abort', 'atomic')]\n    )\n    command_list = module.params.get('commands', None)\n    command_string = module.params.get('template', None)\n    commit = module.params.get('commit')\n    atomic = module.params.get('atomic')\n    abort = module.params.get('abort')\n    description = module.params.get('description')\n\n    _changed, output = run_nclu(module, command_list, command_string, commit, atomic, abort, description)\n    if not testing:\n        module.exit_json(changed=_changed, msg=output)\n    elif testing:\n        return {\"changed\": _changed, \"msg\": output}\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   run command  catch nclu errors        ( rc  output   err)   module run command(  usr bin net     command)      rc  error  output  error   err          module fail json(msg errmsg output)     return str(output)   def check pending(module)         check pending diff nclu buffer              module  nclu version added   2 3  author   cumulus networks  short description  configure network interfaces using nclu description        interface network command line utility  developed make easier       configure operating systems running ifupdown2 quagga        cumulus linux  command documentation available       u(https   docs cumulusnetworks com display docs network command line utility) options      commands          description                a list strings containing net commands run  mutually               exclusive i(template)      template          description                a single  multi line string jinja2 formatting  this string               broken lines  line run net                mutually exclusive i(commands)      commit          description                when true  performs  net commit  end block                mutually exclusive i(atomic)          default  false     abort          description                boolean  when true  perform  net abort  block                this cleans uncommitted changes buffer                mutually exclusive i(atomic)          default  false     atomic          description                when true  equivalent i(commit) i(abort) true                mutually exclusive i(commit) i(atomic)          default  false     description          description                commit description recorded commit log               i(commit) i(atomic) true          default   ansible originated commit       examples          name  add two interfaces without committing changes   nclu      commands            add int swp1           add int swp2    name  add 48 interfaces commit change    nclu      template               iface range(1 49)            add int swp  iface              endfor        commit  true     description   ansible   add swps1 48     name  atomically add interface   nclu      commands            add int swp1     atomic  true     description   ansible   add swp1       return       changed      description  whether interface changed     returned  changed     type  bool     sample  true msg      description  human readable report success failure     returned  always     type  string     sample   interface bond0 config updated          usr bin python        coding  utf 8        (c) 2016 2017  cumulus networks  ce ceng cumulusnetworks com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    first  look staged commands     run net commands    if pending changes changed  report change     do commit  ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016-2017, Cumulus Networks <ce-ceng@cumulusnetworks.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: nclu\nversion_added: \"2.3\"\nauthor: \"Cumulus Networks\"\nshort_description: Configure network interfaces using NCLU\ndescription:\n    - Interface to the Network Command Line Utility, developed to make it easier\n      to configure operating systems running ifupdown2 and Quagga, such as\n      Cumulus Linux. Command documentation is available at\n      U(https://docs.cumulusnetworks.com/display/DOCS/Network+Command+Line+Utility)\noptions:\n    commands:\n        description:\n            - A list of strings containing the net commands to run. Mutually\n              exclusive with I(template).\n    template:\n        description:\n            - A single, multi-line string with jinja2 formatting. This string\n              will be broken by lines, and each line will be run through net.\n              Mutually exclusive with I(commands).\n    commit:\n        description:\n            - When true, performs a 'net commit' at the end of the block.\n              Mutually exclusive with I(atomic).\n        default: false\n    abort:\n        description:\n            - Boolean. When true, perform a 'net abort' before the block.\n              This cleans out any uncommitted changes in the buffer.\n              Mutually exclusive with I(atomic).\n        default: false\n    atomic:\n        description:\n            - When true, equivalent to both I(commit) and I(abort) being true.\n              Mutually exclusive with I(commit) and I(atomic).\n        default: false\n    description:\n        description:\n            - Commit description that will be recorded to the commit log if\n              I(commit) or I(atomic) are true.\n        default: \"Ansible-originated commit\"\n'''\n\nEXAMPLES = '''\n\n- name: Add two interfaces without committing any changes\n  nclu:\n    commands:\n        - add int swp1\n        - add int swp2\n\n- name: Add 48 interfaces and commit the change.\n  nclu:\n    template: |\n        {% for iface in range(1,49) %}\n        add int swp{{iface}}\n        {% endfor %}\n    commit: true\n    description: \"Ansible - add swps1-48\"\n\n- name: Atomically add an interface\n  nclu:\n    commands:\n        - add int swp1\n    atomic: true\n    description: \"Ansible - add swp1\"\n'''\n\nRETURN = '''\nchanged:\n    description: whether the interface was changed\n    returned: changed\n    type: bool\n    sample: True\nmsg:\n    description: human-readable report of success or failure\n    returned: always\n    type: string\n    sample: \"interface bond0 config updated\"\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef command_helper(module, command, errmsg=None):\n    \"\"\"Run a command, catch any nclu errors\"\"\"\n    (_rc, output, _err) = module.run_command(\"/usr/bin/net %s\" % command)\n    if _rc or 'ERROR' in output or 'ERROR' in _err:\n        module.fail_json(msg=errmsg or output)\n    return str(output)\n\n\ndef check_pending(module):\n    \"\"\"Check the pending diff of the nclu buffer.\"\"\"\n    pending = command_helper(module, \"pending\", \"Error in pending config. You may want to view `net pending` on this target.\")\n\n    delimeter1 = \"net add/del commands since the last 'net commit'\"\n    color1 = '\\x1b[94m'\n    if delimeter1 in pending:\n        pending = pending.split(delimeter1)[0]\n        pending = pending.replace(color1, '')\n    return pending.strip()\n\n\ndef run_nclu(module, command_list, command_string, commit, atomic, abort, description):\n    _changed = False\n\n    commands = []\n    if command_list:\n        commands = command_list\n    elif command_string:\n        commands = command_string.splitlines()\n\n    do_commit = False\n    do_abort = abort\n    if commit or atomic:\n        do_commit = True\n        if atomic:\n            do_abort = True\n\n    if do_abort:\n        command_helper(module, \"abort\")\n\n    # First, look at the staged commands.\n    before = check_pending(module)\n    # Run all of the net commands\n    output_lines = []\n    for line in commands:\n        output_lines += [command_helper(module, line.strip(), \"Failed on line %s\" % line)]\n    output = \"\\n\".join(output_lines)\n\n    # If pending changes changed, report a change.\n    after = check_pending(module)\n    if before == after:\n        _changed = False\n    else:\n        _changed = True\n\n    # Do the commit.\n    if do_commit:\n        result = command_helper(module, \"commit description '%s'\" % description)\n        if \"commit ignored\" in result:\n            _changed = False\n            command_helper(module, \"abort\")\n        elif command_helper(module, \"show commit last\") == \"\":\n            _changed = False\n\n    return _changed, output\n\n\ndef main(testing=False):\n    module = AnsibleModule(argument_spec=dict(\n        commands=dict(required=False, type='list'),\n        template=dict(required=False, type='str'),\n        description=dict(required=False, type='str', default=\"Ansible-originated commit\"),\n        abort=dict(required=False, type='bool', default=False),\n        commit=dict(required=False, type='bool', default=False),\n        atomic=dict(required=False, type='bool', default=False)),\n        mutually_exclusive=[('commands', 'template'),\n                            ('commit', 'atomic'),\n                            ('abort', 'atomic')]\n    )\n    command_list = module.params.get('commands', None)\n    command_string = module.params.get('template', None)\n    commit = module.params.get('commit')\n    atomic = module.params.get('atomic')\n    abort = module.params.get('abort')\n    description = module.params.get('description')\n\n    _changed, output = run_nclu(module, command_list, command_string, commit, atomic, abort, description)\n    if not testing:\n        module.exit_json(changed=_changed, msg=output)\n    elif testing:\n        return {\"changed\": _changed, \"msg\": output}\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "nclu.py", "id": "547924c49d63ba78051c6c4e3dda6fd2", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/cumulus/nclu.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}