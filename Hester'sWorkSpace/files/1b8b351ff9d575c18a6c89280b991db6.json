{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    unified_timestamp,\n)\n\n\nclass MeipaiIE(InfoExtractor):\n    IE_DESC = '\u7f8e\u62cd'\n    _VALID_URL = r'https?://(?:www\\.)?meipai\\.com/media/(?P<id>[0-9]+)'\n    _TESTS = [{\n        \n        'url': 'http://www.meipai.com/media/531697625',\n        'md5': 'e3e9600f9e55a302daecc90825854b4f',\n        'info_dict': {\n            'id': '531697625',\n            'ext': 'mp4',\n            'title': '\n            'description': '\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 152,\n            'timestamp': 1465492420,\n            'upload_date': '20160609',\n            'view_count': 35511,\n            'creator': '\u5979\u5979-TATA',\n            'tags': ['\u8449\u5b50', '\u963f\u6851', '\u4f59\u59ff\u6600', '\u8d85\u7d1a\u5973\u8072'],\n        }\n    }, {\n        \n        'url': 'http://www.meipai.com/media/585526361',\n        'md5': 'ff7d6afdbc6143342408223d4f5fb99a',\n        'info_dict': {\n            'id': '585526361',\n            'ext': 'mp4',\n            'title': '\u59ff\u6600\u548c\u5584\u9858 \u7df4\u6b4c\u7df4\u7434\u5566\ud83d\ude01\ud83d\ude01\ud83d\ude01',\n            'description': '\u59ff\u6600\u548c\u5584\u9858 \u7df4\u6b4c\u7df4\u7434\u5566\ud83d\ude01\ud83d\ude01\ud83d\ude01',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 5975,\n            'timestamp': 1474311799,\n            'upload_date': '20160919',\n            'view_count': 1215,\n            'creator': '\u5979\u5979-TATA',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(\n            webpage, default=None) or self._html_search_regex(\n            r'<title[^>]*>([^<]+)</title>', webpage, 'title')\n\n        formats = []\n\n        \n        m3u8_url = self._html_search_regex(\n            r'file:\\s*encodeURIComponent\\(([\"\\'])(?P<url>(?:(?!\\1).)+)\\1\\)',\n            webpage, 'm3u8 url', group='url', default=None)\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        if not formats:\n            \n            video_url = self._search_regex(\n                r'data-video=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage, 'video url',\n                group='url', default=None)\n            if video_url:\n                formats.append({\n                    'url': video_url,\n                    'format_id': 'http',\n                })\n\n        timestamp = unified_timestamp(self._og_search_property(\n            'video:release_date', webpage, 'release date', fatal=False))\n\n        tags = self._og_search_property(\n            'video:tag', webpage, 'tags', default='').split(',')\n\n        view_count = int_or_none(self._html_search_meta(\n            'interactionCount', webpage, 'view count'))\n        duration = parse_duration(self._html_search_meta(\n            'duration', webpage, 'duration'))\n        creator = self._og_search_property(\n            'video:director', webpage, 'creator', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'creator': creator,\n            'tags': tags,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# regular uploaded video\n#\u8449\u5b50##\u963f\u6851##\u4f59\u59ff\u6600##\u8d85\u7d1a\u5973\u8072#',\n#\u8449\u5b50##\u963f\u6851##\u4f59\u59ff\u6600##\u8d85\u7d1a\u5973\u8072#',\n# record of live streaming\n# recorded playback of live streaming\n# regular uploaded video\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    unified_timestamp,\n)\n\n\nclass MeipaiIE(InfoExtractor):\n    IE_DESC = '\u7f8e\u62cd'\n    _VALID_URL = r'https?://(?:www\\.)?meipai\\.com/media/(?P<id>[0-9]+)'\n    _TESTS = [{\n        # regular uploaded video\n        'url': 'http://www.meipai.com/media/531697625',\n        'md5': 'e3e9600f9e55a302daecc90825854b4f',\n        'info_dict': {\n            'id': '531697625',\n            'ext': 'mp4',\n            'title': '#\u8449\u5b50##\u963f\u6851##\u4f59\u59ff\u6600##\u8d85\u7d1a\u5973\u8072#',\n            'description': '#\u8449\u5b50##\u963f\u6851##\u4f59\u59ff\u6600##\u8d85\u7d1a\u5973\u8072#',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 152,\n            'timestamp': 1465492420,\n            'upload_date': '20160609',\n            'view_count': 35511,\n            'creator': '\u5979\u5979-TATA',\n            'tags': ['\u8449\u5b50', '\u963f\u6851', '\u4f59\u59ff\u6600', '\u8d85\u7d1a\u5973\u8072'],\n        }\n    }, {\n        # record of live streaming\n        'url': 'http://www.meipai.com/media/585526361',\n        'md5': 'ff7d6afdbc6143342408223d4f5fb99a',\n        'info_dict': {\n            'id': '585526361',\n            'ext': 'mp4',\n            'title': '\u59ff\u6600\u548c\u5584\u9858 \u7df4\u6b4c\u7df4\u7434\u5566\ud83d\ude01\ud83d\ude01\ud83d\ude01',\n            'description': '\u59ff\u6600\u548c\u5584\u9858 \u7df4\u6b4c\u7df4\u7434\u5566\ud83d\ude01\ud83d\ude01\ud83d\ude01',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 5975,\n            'timestamp': 1474311799,\n            'upload_date': '20160919',\n            'view_count': 1215,\n            'creator': '\u5979\u5979-TATA',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(\n            webpage, default=None) or self._html_search_regex(\n            r'<title[^>]*>([^<]+)</title>', webpage, 'title')\n\n        formats = []\n\n        # recorded playback of live streaming\n        m3u8_url = self._html_search_regex(\n            r'file:\\s*encodeURIComponent\\(([\"\\'])(?P<url>(?:(?!\\1).)+)\\1\\)',\n            webpage, 'm3u8 url', group='url', default=None)\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        if not formats:\n            # regular uploaded video\n            video_url = self._search_regex(\n                r'data-video=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage, 'video url',\n                group='url', default=None)\n            if video_url:\n                formats.append({\n                    'url': video_url,\n                    'format_id': 'http',\n                })\n\n        timestamp = unified_timestamp(self._og_search_property(\n            'video:release_date', webpage, 'release date', fatal=False))\n\n        tags = self._og_search_property(\n            'video:tag', webpage, 'tags', default='').split(',')\n\n        view_count = int_or_none(self._html_search_meta(\n            'interactionCount', webpage, 'view count'))\n        duration = parse_duration(self._html_search_meta(\n            'duration', webpage, 'duration'))\n        creator = self._og_search_property(\n            'video:director', webpage, 'creator', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'creator': creator,\n            'tags': tags,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "meipai.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/meipai.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}