{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import _\nfrom odoo.exceptions import UserError\n\nimport logging\n\n_logger = logging.getLogger(__name__)\n_phonenumbers_lib_warning = False\n\n\ntry:\n    import phonenumbers\n\n    def phone_parse(number, country_code):\n        try:\n            phone_nbr = phonenumbers.parse(number, region=country_code, keep_raw_input=True)\n        except phonenumbers.phonenumberutil.NumberParseException as e:\n            raise UserError(_('Unable to parse %s:\\n%s') % (number, e))\n\n        if not phonenumbers.is_possible_number(phone_nbr):\n            raise UserError(_('Impossible number %s: probably invalid number of digits') % number)\n        if not phonenumbers.is_valid_number(phone_nbr):\n            raise UserError(_('Invalid number %s: probably incorrect prefix') % number)\n\n        return phone_nbr\n\n    def phone_format(number, country_code, country_phone_code, always_international=True, raise_exception=True):\n        \"\"\" Format the given phone number according to the localisation and international options.\n            :param number: number to convert\n            :param country_code: the ISO country code in two chars\n            :type country_code: str\n            :param country_phone_code: country dial in codes, defined by the ITU-T (Ex: 32 for Belgium)\n            :type country_phone_code: int\n            :rtype: str\n        \"\"\"\n        try:\n            phone_nbr = phone_parse(number, country_code)\n        except (phonenumbers.phonenumberutil.NumberParseException, UserError) as e:\n            if raise_exception:\n                raise\n            else:\n                _logger.warning(_('Unable to format %s:\\n%s'), number, e)\n                return number\n        if always_international or phone_nbr.country_code != country_phone_code:\n            phone_fmt = phonenumbers.PhoneNumberFormat.INTERNATIONAL\n        else:\n            phone_fmt = phonenumbers.PhoneNumberFormat.NATIONAL\n        return phonenumbers.format_number(phone_nbr, phone_fmt)\n\nexcept ImportError:\n\n    def phone_parse(number, country_code):\n        return False\n\n    def phone_format(number, country_code, country_phone_code, always_international=True, raise_exception=True):\n        global _phonenumbers_lib_warning\n        if not _phonenumbers_lib_warning:\n            _logger.warning(\n                \"The `phonenumbers` Python module is not installed, contact numbers will not be \"\n                \"verified. Please install the `phonenumbers` Python module.\"\n            )\n            _phonenumbers_lib_warning = True\n        return number\n", "comments": "    format given phone number according localisation international options               param number  number convert              param country code  iso country code two chars              type country code  str              param country phone code  country dial codes  defined itu t (ex  32 belgium)              type country phone code  int              rtype  str                    coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import _\nfrom odoo.exceptions import UserError\n\nimport logging\n\n_logger = logging.getLogger(__name__)\n_phonenumbers_lib_warning = False\n\n\ntry:\n    import phonenumbers\n\n    def phone_parse(number, country_code):\n        try:\n            phone_nbr = phonenumbers.parse(number, region=country_code, keep_raw_input=True)\n        except phonenumbers.phonenumberutil.NumberParseException as e:\n            raise UserError(_('Unable to parse %s:\\n%s') % (number, e))\n\n        if not phonenumbers.is_possible_number(phone_nbr):\n            raise UserError(_('Impossible number %s: probably invalid number of digits') % number)\n        if not phonenumbers.is_valid_number(phone_nbr):\n            raise UserError(_('Invalid number %s: probably incorrect prefix') % number)\n\n        return phone_nbr\n\n    def phone_format(number, country_code, country_phone_code, always_international=True, raise_exception=True):\n        \"\"\" Format the given phone number according to the localisation and international options.\n            :param number: number to convert\n            :param country_code: the ISO country code in two chars\n            :type country_code: str\n            :param country_phone_code: country dial in codes, defined by the ITU-T (Ex: 32 for Belgium)\n            :type country_phone_code: int\n            :rtype: str\n        \"\"\"\n        try:\n            phone_nbr = phone_parse(number, country_code)\n        except (phonenumbers.phonenumberutil.NumberParseException, UserError) as e:\n            if raise_exception:\n                raise\n            else:\n                _logger.warning(_('Unable to format %s:\\n%s'), number, e)\n                return number\n        if always_international or phone_nbr.country_code != country_phone_code:\n            phone_fmt = phonenumbers.PhoneNumberFormat.INTERNATIONAL\n        else:\n            phone_fmt = phonenumbers.PhoneNumberFormat.NATIONAL\n        return phonenumbers.format_number(phone_nbr, phone_fmt)\n\nexcept ImportError:\n\n    def phone_parse(number, country_code):\n        return False\n\n    def phone_format(number, country_code, country_phone_code, always_international=True, raise_exception=True):\n        global _phonenumbers_lib_warning\n        if not _phonenumbers_lib_warning:\n            _logger.warning(\n                \"The `phonenumbers` Python module is not installed, contact numbers will not be \"\n                \"verified. Please install the `phonenumbers` Python module.\"\n            )\n            _phonenumbers_lib_warning = True\n        return number\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "phone_validation.py", "id": "4830d802ecb7932af3aa9eb63bb9eae3", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/phone_validation/tools/phone_validation.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}