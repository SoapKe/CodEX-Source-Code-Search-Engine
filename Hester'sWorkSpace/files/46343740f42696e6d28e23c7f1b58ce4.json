{"author": "keon", "code": "from collections import defaultdict\n\nclass Graph:\n\tdef __init__(self,v):\n\t\tself.v = v\n\t\tself.graph = defaultdict(list)\n\t\tself.has_path = False\n\n\tdef add_edge(self,u,v):\n\t\tself.graph[u].append(v)\n\n\tdef dfs(self,x,y):\n\t\tvisited = [False] * self.v\n\t\tself.dfsutil(visited,x,y,)\n\n\tdef dfsutil(self,visited,x,y):\n\t\tvisited[x] = True\n\t\tfor i in self.graph[x]:\n\t\t\tif y in self.graph[x]:\n\t\t\t\tself.has_path = True\n\t\t\t\treturn\n\t\t\tif(not(visited[i])):\n\t\t\t\tself.dfsutil(visited,x,i)\n\n\tdef is_reachable(self,x,y):\n\t\tself.has_path = False\n\t\tself.dfs(x,y)\n\t\treturn self.has_path\n\n\n\ng = Graph(4)\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(1, 2)\ng.add_edge(2, 0)\ng.add_edge(2, 3)\ng.add_edge(3, 3)\n \nu =1; v = 3\n \nif g.is_reachable(u, v):\n    print(\"There is a path from %d to %d\" % (u,v))\nelse :\n    print(\"There is no path from %d to %d\" % (u,v))\n \nu = 3; v = 1\nif g.is_reachable(u, v) :\n    print(\"There is a path from %d to %d\" % (u,v))\nelse :\n    print(\"There is no path from %d to %d\" % (u,v))\n", "comments": "  create graph given diagram ", "content": "from collections import defaultdict\n\nclass Graph:\n\tdef __init__(self,v):\n\t\tself.v = v\n\t\tself.graph = defaultdict(list)\n\t\tself.has_path = False\n\n\tdef add_edge(self,u,v):\n\t\tself.graph[u].append(v)\n\n\tdef dfs(self,x,y):\n\t\tvisited = [False] * self.v\n\t\tself.dfsutil(visited,x,y,)\n\n\tdef dfsutil(self,visited,x,y):\n\t\tvisited[x] = True\n\t\tfor i in self.graph[x]:\n\t\t\tif y in self.graph[x]:\n\t\t\t\tself.has_path = True\n\t\t\t\treturn\n\t\t\tif(not(visited[i])):\n\t\t\t\tself.dfsutil(visited,x,i)\n\n\tdef is_reachable(self,x,y):\n\t\tself.has_path = False\n\t\tself.dfs(x,y)\n\t\treturn self.has_path\n\n\n# Create a graph given in the above diagram\ng = Graph(4)\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(1, 2)\ng.add_edge(2, 0)\ng.add_edge(2, 3)\ng.add_edge(3, 3)\n \nu =1; v = 3\n \nif g.is_reachable(u, v):\n    print(\"There is a path from %d to %d\" % (u,v))\nelse :\n    print(\"There is no path from %d to %d\" % (u,v))\n \nu = 3; v = 1\nif g.is_reachable(u, v) :\n    print(\"There is a path from %d to %d\" % (u,v))\nelse :\n    print(\"There is no path from %d to %d\" % (u,v))\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "pathBetweenTwoVerticesInDiGraph.py", "id": "46343740f42696e6d28e23c7f1b58ce4", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/graph/pathBetweenTwoVerticesInDiGraph.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}