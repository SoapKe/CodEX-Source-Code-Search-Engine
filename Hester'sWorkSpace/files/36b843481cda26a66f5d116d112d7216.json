{"author": "python-telegram-bot", "code": "\n\n A library that provides a Python interface to the Telegram Bot API\n Copyright (C) 2015-2018\n Leandro Toledo de Souza <devs@python-telegram-bot.org>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser Public License for more details.\n\n You should have received a copy of the GNU Lesser Public License\n along with this program.  If not, see [http://www.gnu.org/licenses/].\n\nimport pytest\n\nfrom telegram import ShippingAddress\n\n\n@pytest.fixture(scope='class')\ndef shipping_address():\n    return ShippingAddress(TestShippingAddress.country_code,\n                           TestShippingAddress.state,\n                           TestShippingAddress.city,\n                           TestShippingAddress.street_line1,\n                           TestShippingAddress.street_line2,\n                           TestShippingAddress.post_code)\n\n\nclass TestShippingAddress(object):\n    country_code = 'GB'\n    state = 'state'\n    city = 'London'\n    street_line1 = '12 Grimmauld Place'\n    street_line2 = 'street_line2'\n    post_code = 'WC1'\n\n    def test_de_json(self, bot):\n        json_dict = {\n            'country_code': self.country_code,\n            'state': self.state,\n            'city': self.city,\n            'street_line1': self.street_line1,\n            'street_line2': self.street_line2,\n            'post_code': self.post_code\n        }\n        shipping_address = ShippingAddress.de_json(json_dict, bot)\n\n        assert shipping_address.country_code == self.country_code\n        assert shipping_address.state == self.state\n        assert shipping_address.city == self.city\n        assert shipping_address.street_line1 == self.street_line1\n        assert shipping_address.street_line2 == self.street_line2\n        assert shipping_address.post_code == self.post_code\n\n    def test_to_dict(self, shipping_address):\n        shipping_address_dict = shipping_address.to_dict()\n\n        assert isinstance(shipping_address_dict, dict)\n        assert shipping_address_dict['country_code'] == shipping_address.country_code\n        assert shipping_address_dict['state'] == shipping_address.state\n        assert shipping_address_dict['city'] == shipping_address.city\n        assert shipping_address_dict['street_line1'] == shipping_address.street_line1\n        assert shipping_address_dict['street_line2'] == shipping_address.street_line2\n        assert shipping_address_dict['post_code'] == shipping_address.post_code\n\n    def test_equality(self):\n        a = ShippingAddress(self.country_code, self.state, self.city, self.street_line1,\n                            self.street_line2, self.post_code)\n        b = ShippingAddress(self.country_code, self.state, self.city, self.street_line1,\n                            self.street_line2, self.post_code)\n        d = ShippingAddress('', self.state, self.city, self.street_line1,\n                            self.street_line2, self.post_code)\n        d2 = ShippingAddress(self.country_code, '', self.city, self.street_line1,\n                             self.street_line2, self.post_code)\n        d3 = ShippingAddress(self.country_code, self.state, '', self.street_line1,\n                             self.street_line2, self.post_code)\n        d4 = ShippingAddress(self.country_code, self.state, self.city, '',\n                             self.street_line2, self.post_code)\n        d5 = ShippingAddress(self.country_code, self.state, self.city, self.street_line1,\n                             '', self.post_code)\n        d6 = ShippingAddress(self.country_code, self.state, self.city, self.street_line1,\n                             self.street_line2, '')\n\n        assert a == b\n        assert hash(a) == hash(b)\n        assert a is not b\n\n        assert a != d\n        assert hash(a) != hash(d)\n\n        assert a != d2\n        assert hash(a) != hash(d2)\n\n        assert a != d3\n        assert hash(a) != hash(d3)\n\n        assert a != d4\n        assert hash(a) != hash(d4)\n\n        assert a != d5\n        assert hash(a) != hash(d5)\n\n        assert a != d6\n        assert hash(6) != hash(d6)\n", "comments": "   usr bin env python       a library provides python interface telegram bot api    copyright (c) 2015 2018    leandro toledo de souza  devs python telegram bot org        this program free software  redistribute modify    terms gnu lesser public license published    free software foundation  either version 3 license     (at option) later version        this program distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu lesser public license details        you received copy gnu lesser public license    along program   if  see  http   www gnu org licenses    ", "content": "#!/usr/bin/env python\n#\n# A library that provides a Python interface to the Telegram Bot API\n# Copyright (C) 2015-2018\n# Leandro Toledo de Souza <devs@python-telegram-bot.org>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Lesser Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser Public License for more details.\n#\n# You should have received a copy of the GNU Lesser Public License\n# along with this program.  If not, see [http://www.gnu.org/licenses/].\n\nimport pytest\n\nfrom telegram import ShippingAddress\n\n\n@pytest.fixture(scope='class')\ndef shipping_address():\n    return ShippingAddress(TestShippingAddress.country_code,\n                           TestShippingAddress.state,\n                           TestShippingAddress.city,\n                           TestShippingAddress.street_line1,\n                           TestShippingAddress.street_line2,\n                           TestShippingAddress.post_code)\n\n\nclass TestShippingAddress(object):\n    country_code = 'GB'\n    state = 'state'\n    city = 'London'\n    street_line1 = '12 Grimmauld Place'\n    street_line2 = 'street_line2'\n    post_code = 'WC1'\n\n    def test_de_json(self, bot):\n        json_dict = {\n            'country_code': self.country_code,\n            'state': self.state,\n            'city': self.city,\n            'street_line1': self.street_line1,\n            'street_line2': self.street_line2,\n            'post_code': self.post_code\n        }\n        shipping_address = ShippingAddress.de_json(json_dict, bot)\n\n        assert shipping_address.country_code == self.country_code\n        assert shipping_address.state == self.state\n        assert shipping_address.city == self.city\n        assert shipping_address.street_line1 == self.street_line1\n        assert shipping_address.street_line2 == self.street_line2\n        assert shipping_address.post_code == self.post_code\n\n    def test_to_dict(self, shipping_address):\n        shipping_address_dict = shipping_address.to_dict()\n\n        assert isinstance(shipping_address_dict, dict)\n        assert shipping_address_dict['country_code'] == shipping_address.country_code\n        assert shipping_address_dict['state'] == shipping_address.state\n        assert shipping_address_dict['city'] == shipping_address.city\n        assert shipping_address_dict['street_line1'] == shipping_address.street_line1\n        assert shipping_address_dict['street_line2'] == shipping_address.street_line2\n        assert shipping_address_dict['post_code'] == shipping_address.post_code\n\n    def test_equality(self):\n        a = ShippingAddress(self.country_code, self.state, self.city, self.street_line1,\n                            self.street_line2, self.post_code)\n        b = ShippingAddress(self.country_code, self.state, self.city, self.street_line1,\n                            self.street_line2, self.post_code)\n        d = ShippingAddress('', self.state, self.city, self.street_line1,\n                            self.street_line2, self.post_code)\n        d2 = ShippingAddress(self.country_code, '', self.city, self.street_line1,\n                             self.street_line2, self.post_code)\n        d3 = ShippingAddress(self.country_code, self.state, '', self.street_line1,\n                             self.street_line2, self.post_code)\n        d4 = ShippingAddress(self.country_code, self.state, self.city, '',\n                             self.street_line2, self.post_code)\n        d5 = ShippingAddress(self.country_code, self.state, self.city, self.street_line1,\n                             '', self.post_code)\n        d6 = ShippingAddress(self.country_code, self.state, self.city, self.street_line1,\n                             self.street_line2, '')\n\n        assert a == b\n        assert hash(a) == hash(b)\n        assert a is not b\n\n        assert a != d\n        assert hash(a) != hash(d)\n\n        assert a != d2\n        assert hash(a) != hash(d2)\n\n        assert a != d3\n        assert hash(a) != hash(d3)\n\n        assert a != d4\n        assert hash(a) != hash(d4)\n\n        assert a != d5\n        assert hash(a) != hash(d5)\n\n        assert a != d6\n        assert hash(6) != hash(d6)\n", "description": "We have made you a wrapper you can't refuse", "file_name": "test_shippingaddress.py", "id": "36b843481cda26a66f5d116d112d7216", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/tests/test_shippingaddress.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}