{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = r'''\n---\nmodule: hpilo_facts\nversion_added: \"2.3\"\nauthor: Dag Wieers (@dagwieers)\nshort_description: Gather facts through an HP iLO interface\ndescription:\n- This module gathers facts for a specific system using its HP iLO interface.\n  These facts include hardware and network related information useful\n  for provisioning (e.g. macaddress, uuid).\n- This module requires the hpilo python module.\noptions:\n  host:\n    description:\n    - The HP iLO hostname/address that is linked to the physical system.\n    required: true\n  login:\n    description:\n    - The login name to authenticate to the HP iLO interface.\n    default: Administrator\n  password:\n    description:\n    - The password to authenticate to the HP iLO interface.\n    default: admin\n  ssl_version:\n    description:\n      - Change the ssl_version used.\n    default: TLSv1\n    choices: [ \"SSLv3\", \"SSLv23\", \"TLSv1\", \"TLSv1_1\", \"TLSv1_2\" ]\n    version_added: '2.4'\nrequirements:\n- hpilo\nnotes:\n- This module ought to be run from a system that can access the HP iLO\n  interface directly, either by using C(local_action) or using C(delegate_to).\n'''\n\nEXAMPLES = r'''\n\n- hpilo_facts:\n    host: YOUR_ILO_ADDRESS\n    login: YOUR_ILO_LOGIN\n    password: YOUR_ILO_PASSWORD\n  when: cmdb_hwmodel.startswith('HP ')\n  delegate_to: localhost\n\n- fail:\n    msg: 'CMDB serial ({{ cmdb_serialno }}) does not match hardware serial ({{ hw_system_serial }}) !'\n  when: cmdb_serialno != hw_system_serial\n'''\n\nRETURN = r'''\n\nhw_bios_date:\n    description: BIOS date\n    returned: always\n    type: string\n    sample: 05/05/2011\n\nhw_bios_version:\n    description: BIOS version\n    returned: always\n    type: string\n    sample: P68\n\nhw_ethX:\n    description: Interface information (for each interface)\n    returned: always\n    type: dictionary\n    sample:\n      - macaddress: 00:11:22:33:44:55\n        macaddress_dash: 00-11-22-33-44-55\n\nhw_eth_ilo:\n    description: Interface information (for the iLO network interface)\n    returned: always\n    type: dictionary\n    sample:\n      - macaddress: 00:11:22:33:44:BA\n      - macaddress_dash: 00-11-22-33-44-BA\n\nhw_product_name:\n    description: Product name\n    returned: always\n    type: string\n    sample: ProLiant DL360 G7\n\nhw_product_uuid:\n    description: Product UUID\n    returned: always\n    type: string\n    sample: ef50bac8-2845-40ff-81d9-675315501dac\n\nhw_system_serial:\n    description: System serial number\n    returned: always\n    type: string\n    sample: ABC12345D6\n\nhw_uuid:\n    description: Hardware UUID\n    returned: always\n    type: string\n    sample: 123456ABC78901D2\n'''\n\nimport re\nimport warnings\n\ntry:\n    import hpilo\n    HAS_HPILO = True\nexcept ImportError:\n    HAS_HPILO = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\n\nwarnings.simplefilter('ignore')\n\n\ndef parse_flat_interface(entry, non_numeric='hw_eth_ilo'):\n    try:\n        factname = 'hw_eth' + str(int(entry['Port']) - 1)\n    except:\n        factname = non_numeric\n\n    facts = {\n        'macaddress': entry['MAC'].replace('-', ':'),\n        'macaddress_dash': entry['MAC']\n    }\n    return (factname, facts)\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            host=dict(type='str', required=True),\n            login=dict(type='str', default='Administrator'),\n            password=dict(type='str', default='admin', no_log=True),\n            ssl_version=dict(type='str', default='TLSv1', choices=['SSLv3', 'SSLv23', 'TLSv1', 'TLSv1_1', 'TLSv1_2']),\n        ),\n        supports_check_mode=True,\n    )\n\n    if not HAS_HPILO:\n        module.fail_json(msg='The hpilo python module is required')\n\n    host = module.params['host']\n    login = module.params['login']\n    password = module.params['password']\n    ssl_version = getattr(hpilo.ssl, 'PROTOCOL_' + module.params.get('ssl_version').upper().replace('V', 'v'))\n\n    ilo = hpilo.Ilo(host, login=login, password=password, ssl_version=ssl_version)\n\n    facts = {\n        'module_hw': True,\n    }\n\n    \n    data = ilo.get_host_data()\n    for entry in data:\n        if 'type' not in entry:\n            continue\n        elif entry['type'] == 0:  \n            facts['hw_bios_version'] = entry['Family']\n            facts['hw_bios_date'] = entry['Date']\n        elif entry['type'] == 1:  \n            facts['hw_uuid'] = entry['UUID']\n            facts['hw_system_serial'] = entry['Serial Number'].rstrip()\n            facts['hw_product_name'] = entry['Product Name']\n            facts['hw_product_uuid'] = entry['cUUID']\n        elif entry['type'] == 209:  \n            if 'fields' in entry:\n                for (name, value) in [(e['name'], e['value']) for e in entry['fields']]:\n                    if name.startswith('Port'):\n                        try:\n                            factname = 'hw_eth' + str(int(value) - 1)\n                        except:\n                            factname = 'hw_eth_ilo'\n                    elif name.startswith('MAC'):\n                        facts[factname] = {\n                            'macaddress': value.replace('-', ':'),\n                            'macaddress_dash': value\n                        }\n            else:\n                (factname, entry_facts) = parse_flat_interface(entry, 'hw_eth_ilo')\n                facts[factname] = entry_facts\n        elif entry['type'] == 209:  \n            for (name, value) in [(e['name'], e['value']) for e in entry['fields']]:\n                if name.startswith('Port'):\n                    try:\n                        factname = 'hw_iscsi' + str(int(value) - 1)\n                    except:\n                        factname = 'hw_iscsi_ilo'\n                elif name.startswith('MAC'):\n                    facts[factname] = {\n                        'macaddress': value.replace('-', ':'),\n                        'macaddress_dash': value\n                    }\n        elif entry['type'] == 233:   (Alternate data format)\n            (factname, entry_facts) = parse_flat_interface(entry, 'hw_eth_ilo')\n            facts[factname] = entry_facts\n\n    # Collect health (RAM/CPU data)\n    health = ilo.get_embedded_health()\n    facts['hw_health'] = health\n\n    memory_details_summary = health.get('memory', {}).get('memory_details_summary')\n    \n    if memory_details_summary:\n        facts['hw_memory_details_summary'] = memory_details_summary\n        facts['hw_memory_total'] = 0\n        for cpu, details in memory_details_summary.items():\n            cpu_total_memory_size = details.get('total_memory_size')\n            if cpu_total_memory_size:\n                ram = re.search(r'(\\d+)\\s+(\\w+)', cpu_total_memory_size)\n                if ram:\n                    if ram.group(2) == 'GB':\n                        facts['hw_memory_total'] = facts['hw_memory_total'] + int(ram.group(1))\n\n        \n        facts['hw_memory_total'] = \"{0} GB\".format(facts['hw_memory_total'])\n\n    module.exit_json(ansible_facts=facts)\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  hpilo facts version added   2 3  author  dag wieers ( dagwieers) short description  gather facts hp ilo interface description    this module gathers facts specific system using hp ilo interface    these facts include hardware network related information useful   provisioning (e g  macaddress  uuid)    this module requires hpilo python module  options    host      description        the hp ilo hostname address linked physical system      required  true   login      description        the login name authenticate hp ilo interface      default  administrator   password      description        the password authenticate hp ilo interface      default  admin   ssl version      description          change ssl version used      default  tlsv1     choices     sslv3    sslv23    tlsv1    tlsv1 1    tlsv1 2        version added   2 4  requirements    hpilo notes    this module ought run system access hp ilo   interface directly  either using c(local action) using c(delegate to)       examples   r      task gather facts hp ilo interface system hp server   hpilo facts      host  your ilo address     login  your ilo login     password  your ilo password    cmdb hwmodel startswith( hp  )   delegate  localhost    fail      msg   cmdb serial (   cmdb serialno   ) match hardware serial (   hw system serial   )       cmdb serialno    hw system serial      return   r      typical output hp ilo facts physical system hw bios date      description  bios date     returned  always     type  string     sample  05 05 2011  hw bios version      description  bios version     returned  always     type  string     sample  p68  hw ethx      description  interface information (for interface)     returned  always     type  dictionary     sample          macaddress  00 11 22 33 44 55         macaddress dash  00 11 22 33 44 55  hw eth ilo      description  interface information (for ilo network interface)     returned  always     type  dictionary     sample          macaddress  00 11 22 33 44 ba         macaddress dash  00 11 22 33 44 ba  hw product name      description  product name     returned  always     type  string     sample  proliant dl360 g7  hw product uuid      description  product uuid     returned  always     type  string     sample  ef50bac8 2845 40ff 81d9 675315501dac  hw system serial      description  system serial number     returned  always     type  string     sample  abc12345d6  hw uuid      description  hardware uuid     returned  always     type  string     sample  123456abc78901d2         usr bin python        coding  utf 8        copyright 2012 dag wieers  dag wieers com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    task gather facts hp ilo interface system hp server    typical output hp ilo facts physical system    suppress warnings hpilo    todo  count number cpus  dimms total memory    bios information    system information    embedded nic mac assignment    hpq nic iscsi mac info    embedded nic mac assignment (alternate data format)    collect health (ram cpu data)    ram reported ilo 2 10 proliant bl460c gen8    reformat text friendly format ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright 2012 Dag Wieers <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = r'''\n---\nmodule: hpilo_facts\nversion_added: \"2.3\"\nauthor: Dag Wieers (@dagwieers)\nshort_description: Gather facts through an HP iLO interface\ndescription:\n- This module gathers facts for a specific system using its HP iLO interface.\n  These facts include hardware and network related information useful\n  for provisioning (e.g. macaddress, uuid).\n- This module requires the hpilo python module.\noptions:\n  host:\n    description:\n    - The HP iLO hostname/address that is linked to the physical system.\n    required: true\n  login:\n    description:\n    - The login name to authenticate to the HP iLO interface.\n    default: Administrator\n  password:\n    description:\n    - The password to authenticate to the HP iLO interface.\n    default: admin\n  ssl_version:\n    description:\n      - Change the ssl_version used.\n    default: TLSv1\n    choices: [ \"SSLv3\", \"SSLv23\", \"TLSv1\", \"TLSv1_1\", \"TLSv1_2\" ]\n    version_added: '2.4'\nrequirements:\n- hpilo\nnotes:\n- This module ought to be run from a system that can access the HP iLO\n  interface directly, either by using C(local_action) or using C(delegate_to).\n'''\n\nEXAMPLES = r'''\n# Task to gather facts from a HP iLO interface only if the system is an HP server\n- hpilo_facts:\n    host: YOUR_ILO_ADDRESS\n    login: YOUR_ILO_LOGIN\n    password: YOUR_ILO_PASSWORD\n  when: cmdb_hwmodel.startswith('HP ')\n  delegate_to: localhost\n\n- fail:\n    msg: 'CMDB serial ({{ cmdb_serialno }}) does not match hardware serial ({{ hw_system_serial }}) !'\n  when: cmdb_serialno != hw_system_serial\n'''\n\nRETURN = r'''\n# Typical output of HP iLO_facts for a physical system\nhw_bios_date:\n    description: BIOS date\n    returned: always\n    type: string\n    sample: 05/05/2011\n\nhw_bios_version:\n    description: BIOS version\n    returned: always\n    type: string\n    sample: P68\n\nhw_ethX:\n    description: Interface information (for each interface)\n    returned: always\n    type: dictionary\n    sample:\n      - macaddress: 00:11:22:33:44:55\n        macaddress_dash: 00-11-22-33-44-55\n\nhw_eth_ilo:\n    description: Interface information (for the iLO network interface)\n    returned: always\n    type: dictionary\n    sample:\n      - macaddress: 00:11:22:33:44:BA\n      - macaddress_dash: 00-11-22-33-44-BA\n\nhw_product_name:\n    description: Product name\n    returned: always\n    type: string\n    sample: ProLiant DL360 G7\n\nhw_product_uuid:\n    description: Product UUID\n    returned: always\n    type: string\n    sample: ef50bac8-2845-40ff-81d9-675315501dac\n\nhw_system_serial:\n    description: System serial number\n    returned: always\n    type: string\n    sample: ABC12345D6\n\nhw_uuid:\n    description: Hardware UUID\n    returned: always\n    type: string\n    sample: 123456ABC78901D2\n'''\n\nimport re\nimport warnings\n\ntry:\n    import hpilo\n    HAS_HPILO = True\nexcept ImportError:\n    HAS_HPILO = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\n# Suppress warnings from hpilo\nwarnings.simplefilter('ignore')\n\n\ndef parse_flat_interface(entry, non_numeric='hw_eth_ilo'):\n    try:\n        factname = 'hw_eth' + str(int(entry['Port']) - 1)\n    except:\n        factname = non_numeric\n\n    facts = {\n        'macaddress': entry['MAC'].replace('-', ':'),\n        'macaddress_dash': entry['MAC']\n    }\n    return (factname, facts)\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            host=dict(type='str', required=True),\n            login=dict(type='str', default='Administrator'),\n            password=dict(type='str', default='admin', no_log=True),\n            ssl_version=dict(type='str', default='TLSv1', choices=['SSLv3', 'SSLv23', 'TLSv1', 'TLSv1_1', 'TLSv1_2']),\n        ),\n        supports_check_mode=True,\n    )\n\n    if not HAS_HPILO:\n        module.fail_json(msg='The hpilo python module is required')\n\n    host = module.params['host']\n    login = module.params['login']\n    password = module.params['password']\n    ssl_version = getattr(hpilo.ssl, 'PROTOCOL_' + module.params.get('ssl_version').upper().replace('V', 'v'))\n\n    ilo = hpilo.Ilo(host, login=login, password=password, ssl_version=ssl_version)\n\n    facts = {\n        'module_hw': True,\n    }\n\n    # TODO: Count number of CPUs, DIMMs and total memory\n    data = ilo.get_host_data()\n    for entry in data:\n        if 'type' not in entry:\n            continue\n        elif entry['type'] == 0:  # BIOS Information\n            facts['hw_bios_version'] = entry['Family']\n            facts['hw_bios_date'] = entry['Date']\n        elif entry['type'] == 1:  # System Information\n            facts['hw_uuid'] = entry['UUID']\n            facts['hw_system_serial'] = entry['Serial Number'].rstrip()\n            facts['hw_product_name'] = entry['Product Name']\n            facts['hw_product_uuid'] = entry['cUUID']\n        elif entry['type'] == 209:  # Embedded NIC MAC Assignment\n            if 'fields' in entry:\n                for (name, value) in [(e['name'], e['value']) for e in entry['fields']]:\n                    if name.startswith('Port'):\n                        try:\n                            factname = 'hw_eth' + str(int(value) - 1)\n                        except:\n                            factname = 'hw_eth_ilo'\n                    elif name.startswith('MAC'):\n                        facts[factname] = {\n                            'macaddress': value.replace('-', ':'),\n                            'macaddress_dash': value\n                        }\n            else:\n                (factname, entry_facts) = parse_flat_interface(entry, 'hw_eth_ilo')\n                facts[factname] = entry_facts\n        elif entry['type'] == 209:  # HPQ NIC iSCSI MAC Info\n            for (name, value) in [(e['name'], e['value']) for e in entry['fields']]:\n                if name.startswith('Port'):\n                    try:\n                        factname = 'hw_iscsi' + str(int(value) - 1)\n                    except:\n                        factname = 'hw_iscsi_ilo'\n                elif name.startswith('MAC'):\n                    facts[factname] = {\n                        'macaddress': value.replace('-', ':'),\n                        'macaddress_dash': value\n                    }\n        elif entry['type'] == 233:  # Embedded NIC MAC Assignment (Alternate data format)\n            (factname, entry_facts) = parse_flat_interface(entry, 'hw_eth_ilo')\n            facts[factname] = entry_facts\n\n    # Collect health (RAM/CPU data)\n    health = ilo.get_embedded_health()\n    facts['hw_health'] = health\n\n    memory_details_summary = health.get('memory', {}).get('memory_details_summary')\n    # RAM as reported by iLO 2.10 on ProLiant BL460c Gen8\n    if memory_details_summary:\n        facts['hw_memory_details_summary'] = memory_details_summary\n        facts['hw_memory_total'] = 0\n        for cpu, details in memory_details_summary.items():\n            cpu_total_memory_size = details.get('total_memory_size')\n            if cpu_total_memory_size:\n                ram = re.search(r'(\\d+)\\s+(\\w+)', cpu_total_memory_size)\n                if ram:\n                    if ram.group(2) == 'GB':\n                        facts['hw_memory_total'] = facts['hw_memory_total'] + int(ram.group(1))\n\n        # reformat into a text friendly format\n        facts['hw_memory_total'] = \"{0} GB\".format(facts['hw_memory_total'])\n\n    module.exit_json(ansible_facts=facts)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "hpilo_facts.py", "id": "d7fe26782c22d7fd4f2cfa522addbc51", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/hpilo/hpilo_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}