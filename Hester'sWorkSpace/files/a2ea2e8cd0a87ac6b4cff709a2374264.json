{"author": "nvbn", "code": "import re\nfrom subprocess import Popen, PIPE\nfrom thefuck.utils import for_app, eager, replace_command\n\nregex = re.compile(r\"Task '(.*)' (is ambiguous|not found)\")\n\n\n@for_app('gradle', './gradlew')\ndef match(command):\n    return regex.findall(command.output)\n\n\n@eager\ndef _get_all_tasks(gradle):\n    proc = Popen([gradle, 'tasks'], stdout=PIPE)\n    should_yield = False\n    for line in proc.stdout.readlines():\n        line = line.decode().strip()\n        if line.startswith('----'):\n            should_yield = True\n            continue\n\n        if not line.strip():\n            should_yield = False\n            continue\n\n        if should_yield and not line.startswith('All tasks runnable from root project'):\n            yield line.split(' ')[0]\n\n\ndef get_new_command(command):\n    wrong_task = regex.findall(command.output)[0][0]\n    all_tasks = _get_all_tasks(command.script_parts[0])\n    return replace_command(command, wrong_task, all_tasks)\n", "comments": "", "content": "import re\nfrom subprocess import Popen, PIPE\nfrom thefuck.utils import for_app, eager, replace_command\n\nregex = re.compile(r\"Task '(.*)' (is ambiguous|not found)\")\n\n\n@for_app('gradle', './gradlew')\ndef match(command):\n    return regex.findall(command.output)\n\n\n@eager\ndef _get_all_tasks(gradle):\n    proc = Popen([gradle, 'tasks'], stdout=PIPE)\n    should_yield = False\n    for line in proc.stdout.readlines():\n        line = line.decode().strip()\n        if line.startswith('----'):\n            should_yield = True\n            continue\n\n        if not line.strip():\n            should_yield = False\n            continue\n\n        if should_yield and not line.startswith('All tasks runnable from root project'):\n            yield line.split(' ')[0]\n\n\ndef get_new_command(command):\n    wrong_task = regex.findall(command.output)[0][0]\n    all_tasks = _get_all_tasks(command.script_parts[0])\n    return replace_command(command, wrong_task, all_tasks)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "gradle_no_task.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/rules/gradle_no_task.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}