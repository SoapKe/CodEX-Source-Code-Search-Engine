{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    parse_duration,\n    remove_end,\n)\n\n\nclass VuClipIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:m\\.)?vuclip\\.com/w\\?.*?cid=(?P<id>[0-9]+)'\n\n    _TEST = {\n        'url': 'http://m.vuclip.com/w?cid=1129900602&bu=8589892792&frm=w&z=34801&op=0&oc=843169247&section=recommend',\n        'info_dict': {\n            'id': '1129900602',\n            'ext': '3gp',\n            'title': 'Top 10 TV Convicts',\n            'duration': 733,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        ad_m = re.search(\n            r, webpage)\n        if ad_m:\n            urlr = compat_urllib_parse_urlparse(url)\n            adfree_url = urlr.scheme + '://' + urlr.netloc + ad_m.group(1)\n            webpage = self._download_webpage(\n                adfree_url, video_id, note='Download post-ad page')\n\n        error_msg = self._html_search_regex(\n            r'<p class=\"message\">(.*?)</p>', webpage, 'error message',\n            default=None)\n        if error_msg:\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n\n        \n        video_url = self._search_regex(\n            r'<a[^>]+href=\"([^\"]+)\"[^>]*><img[^>]+src=\"[^\"]*/play\\.gif',\n            webpage, 'video URL', default=None)\n        if video_url:\n            formats = [{\n                'url': video_url,\n            }]\n        else:\n            formats = self._parse_html5_media_entries(url, webpage, video_id)[0]['formats']\n\n        title = remove_end(self._html_search_regex(\n            r'<title>(.*?)-\\s*Vuclip</title>', webpage, 'title').strip(), ' - Video')\n\n        duration = parse_duration(self._html_search_regex(\n            r'[(>]([0-9]+:[0-9]+)(?:<span|\\))', webpage, 'duration', fatal=False))\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'duration': duration,\n        }\n", "comments": "value=\"No.*?\" onClick=\"location.href='([^\"']+)'\"\n\"\n# These clowns alternate between two page types\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    parse_duration,\n    remove_end,\n)\n\n\nclass VuClipIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:m\\.)?vuclip\\.com/w\\?.*?cid=(?P<id>[0-9]+)'\n\n    _TEST = {\n        'url': 'http://m.vuclip.com/w?cid=1129900602&bu=8589892792&frm=w&z=34801&op=0&oc=843169247&section=recommend',\n        'info_dict': {\n            'id': '1129900602',\n            'ext': '3gp',\n            'title': 'Top 10 TV Convicts',\n            'duration': 733,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        ad_m = re.search(\n            r'''value=\"No.*?\" onClick=\"location.href='([^\"']+)'\"''', webpage)\n        if ad_m:\n            urlr = compat_urllib_parse_urlparse(url)\n            adfree_url = urlr.scheme + '://' + urlr.netloc + ad_m.group(1)\n            webpage = self._download_webpage(\n                adfree_url, video_id, note='Download post-ad page')\n\n        error_msg = self._html_search_regex(\n            r'<p class=\"message\">(.*?)</p>', webpage, 'error message',\n            default=None)\n        if error_msg:\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n\n        # These clowns alternate between two page types\n        video_url = self._search_regex(\n            r'<a[^>]+href=\"([^\"]+)\"[^>]*><img[^>]+src=\"[^\"]*/play\\.gif',\n            webpage, 'video URL', default=None)\n        if video_url:\n            formats = [{\n                'url': video_url,\n            }]\n        else:\n            formats = self._parse_html5_media_entries(url, webpage, video_id)[0]['formats']\n\n        title = remove_end(self._html_search_regex(\n            r'<title>(.*?)-\\s*Vuclip</title>', webpage, 'title').strip(), ' - Video')\n\n        duration = parse_duration(self._html_search_regex(\n            r'[(>]([0-9]+:[0-9]+)(?:<span|\\))', webpage, 'duration', fatal=False))\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'duration': duration,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vuclip.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vuclip.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}