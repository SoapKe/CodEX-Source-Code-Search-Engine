{"author": "django", "code": "from django.db import models\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    birthday = models.DateField()\n    defaults = models.TextField()\n\n    def __str__(self):\n        return '%s %s' % (self.first_name, self.last_name)\n\n\nclass DefaultPerson(models.Model):\n    first_name = models.CharField(max_length=100, default=\"Anonymous\")\n\n\nclass ManualPrimaryKeyTest(models.Model):\n    id = models.IntegerField(primary_key=True)\n    data = models.CharField(max_length=100)\n\n\nclass Profile(models.Model):\n    person = models.ForeignKey(Person, models.CASCADE, primary_key=True)\n\n\nclass Tag(models.Model):\n    text = models.CharField(max_length=255, unique=True)\n\n\nclass Thing(models.Model):\n    name = models.CharField(max_length=255)\n    tags = models.ManyToManyField(Tag)\n\n    @property\n    def capitalized_name_property(self):\n        return self.name\n\n    @capitalized_name_property.setter\n    def capitalized_name_property(self, val):\n        self.name = val.capitalize()\n\n    @property\n    def name_in_all_caps(self):\n        return self.name.upper()\n\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Author, related_name='books')\n    publisher = models.ForeignKey(\n        Publisher,\n        models.CASCADE,\n        related_name='books',\n        db_column=\"publisher_id_column\",\n    )\n", "comments": "", "content": "from django.db import models\n\n\nclass Person(models.Model):\n    first_name = models.CharField(max_length=100)\n    last_name = models.CharField(max_length=100)\n    birthday = models.DateField()\n    defaults = models.TextField()\n\n    def __str__(self):\n        return '%s %s' % (self.first_name, self.last_name)\n\n\nclass DefaultPerson(models.Model):\n    first_name = models.CharField(max_length=100, default=\"Anonymous\")\n\n\nclass ManualPrimaryKeyTest(models.Model):\n    id = models.IntegerField(primary_key=True)\n    data = models.CharField(max_length=100)\n\n\nclass Profile(models.Model):\n    person = models.ForeignKey(Person, models.CASCADE, primary_key=True)\n\n\nclass Tag(models.Model):\n    text = models.CharField(max_length=255, unique=True)\n\n\nclass Thing(models.Model):\n    name = models.CharField(max_length=255)\n    tags = models.ManyToManyField(Tag)\n\n    @property\n    def capitalized_name_property(self):\n        return self.name\n\n    @capitalized_name_property.setter\n    def capitalized_name_property(self, val):\n        self.name = val.capitalize()\n\n    @property\n    def name_in_all_caps(self):\n        return self.name.upper()\n\n\nclass Publisher(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Book(models.Model):\n    name = models.CharField(max_length=100)\n    authors = models.ManyToManyField(Author, related_name='books')\n    publisher = models.ForeignKey(\n        Publisher,\n        models.CASCADE,\n        related_name='books',\n        db_column=\"publisher_id_column\",\n    )\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "e81b926590858cf2fd46b6fa567c5874", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/get_or_create/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}