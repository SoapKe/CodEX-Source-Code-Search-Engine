{"author": "django", "code": "from django.contrib.postgres.indexes import BrinIndex, GinIndex, GistIndex\nfrom django.db import connection\nfrom django.test import skipUnlessDBFeature\n\nfrom . import PostgreSQLTestCase\nfrom .models import CharFieldModel, DateTimeArrayModel, IntegerArrayModel\n\n\n@skipUnlessDBFeature('has_brin_index_support')\nclass BrinIndexTests(PostgreSQLTestCase):\n\n    def test_suffix(self):\n        self.assertEqual(BrinIndex.suffix, 'brin')\n\n    def test_not_eq(self):\n        index = BrinIndex(fields=['title'])\n        index_with_page_range = BrinIndex(fields=['title'], pages_per_range=16)\n        self.assertNotEqual(index, index_with_page_range)\n\n    def test_name_auto_generation(self):\n        \"\"\"\n        A name longer than 30 characters (since len(BrinIndex.suffix) is 4\n        rather than usual limit of 3) is okay for PostgreSQL. For this test,\n        the name of the field ('datetimes') must be at least 7 characters to\n        generate a name longer than 30 characters.\n        \"\"\"\n        index = BrinIndex(fields=['datetimes'])\n        index.set_name_with_model(DateTimeArrayModel)\n        self.assertEqual(index.name, 'postgres_te_datetim_abf104_brin')\n\n    def test_deconstruction(self):\n        index = BrinIndex(fields=['title'], name='test_title_brin')\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.BrinIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'fields': ['title'], 'name': 'test_title_brin'})\n\n    def test_deconstruction_with_pages_per_range(self):\n        index = BrinIndex(fields=['title'], name='test_title_brin', pages_per_range=16)\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.BrinIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'fields': ['title'], 'name': 'test_title_brin', 'pages_per_range': 16})\n\n    def test_invalid_pages_per_range(self):\n        with self.assertRaisesMessage(ValueError, 'pages_per_range must be None or a positive integer'):\n            BrinIndex(fields=['title'], name='test_title_brin', pages_per_range=0)\n\n\nclass GinIndexTests(PostgreSQLTestCase):\n\n    def test_suffix(self):\n        self.assertEqual(GinIndex.suffix, 'gin')\n\n    def test_eq(self):\n        index = GinIndex(fields=['title'])\n        same_index = GinIndex(fields=['title'])\n        another_index = GinIndex(fields=['author'])\n        self.assertEqual(index, same_index)\n        self.assertNotEqual(index, another_index)\n\n    def test_name_auto_generation(self):\n        index = GinIndex(fields=['field'])\n        index.set_name_with_model(IntegerArrayModel)\n        self.assertEqual(index.name, 'postgres_te_field_def2f8_gin')\n\n    def test_deconstruction(self):\n        index = GinIndex(\n            fields=['title'],\n            name='test_title_gin',\n            fastupdate=True,\n            gin_pending_list_limit=128,\n        )\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.GinIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(\n            kwargs,\n            {\n                'fields': ['title'],\n                'name': 'test_title_gin',\n                'fastupdate': True,\n                'gin_pending_list_limit': 128,\n            }\n        )\n\n    def test_deconstruct_no_args(self):\n        index = GinIndex(fields=['title'], name='test_title_gin')\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.GinIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'fields': ['title'], 'name': 'test_title_gin'})\n\n\nclass GistIndexTests(PostgreSQLTestCase):\n\n    def test_suffix(self):\n        self.assertEqual(GistIndex.suffix, 'gist')\n\n    def test_eq(self):\n        index = GistIndex(fields=['title'], fillfactor=64)\n        same_index = GistIndex(fields=['title'], fillfactor=64)\n        another_index = GistIndex(fields=['author'], buffering=True)\n        self.assertEqual(index, same_index)\n        self.assertNotEqual(index, another_index)\n\n    def test_name_auto_generation(self):\n        index = GistIndex(fields=['field'])\n        index.set_name_with_model(CharFieldModel)\n        self.assertEqual(index.name, 'postgres_te_field_1e0206_gist')\n\n    def test_deconstruction(self):\n        index = GistIndex(fields=['title'], name='test_title_gist', buffering=False, fillfactor=80)\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.GistIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(\n            kwargs,\n            {\n                'fields': ['title'],\n                'name': 'test_title_gist',\n                'buffering': False,\n                'fillfactor': 80,\n            }\n        )\n\n    def test_deconstruction_no_customization(self):\n        index = GistIndex(fields=['title'], name='test_title_gist')\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.GistIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'fields': ['title'], 'name': 'test_title_gist'})\n\n\nclass SchemaTests(PostgreSQLTestCase):\n\n    def get_constraints(self, table):\n        \"\"\"\n        Get the indexes on the table using a new cursor.\n        \"\"\"\n        with connection.cursor() as cursor:\n            return connection.introspection.get_constraints(cursor, table)\n\n    def test_gin_index(self):\n        \n        self.assertNotIn('field', self.get_constraints(IntegerArrayModel._meta.db_table))\n        \n        index_name = 'integer_array_model_field_gin'\n        index = GinIndex(fields=['field'], name=index_name)\n        with connection.schema_editor() as editor:\n            editor.add_index(IntegerArrayModel, index)\n        constraints = self.get_constraints(IntegerArrayModel._meta.db_table)\n        \n        self.assertEqual(constraints[index_name]['type'], GinIndex.suffix)\n        \n        with connection.schema_editor() as editor:\n            editor.remove_index(IntegerArrayModel, index)\n        self.assertNotIn(index_name, self.get_constraints(IntegerArrayModel._meta.db_table))\n\n    def test_gin_fastupdate(self):\n        index_name = 'integer_array_gin_fastupdate'\n        index = GinIndex(fields=['field'], name=index_name, fastupdate=False)\n        with connection.schema_editor() as editor:\n            editor.add_index(IntegerArrayModel, index)\n        constraints = self.get_constraints(IntegerArrayModel._meta.db_table)\n        self.assertEqual(constraints[index_name]['type'], 'gin')\n        self.assertEqual(constraints[index_name]['options'], ['fastupdate=off'])\n        with connection.schema_editor() as editor:\n            editor.remove_index(IntegerArrayModel, index)\n        self.assertNotIn(index_name, self.get_constraints(IntegerArrayModel._meta.db_table))\n\n    @skipUnlessDBFeature('has_gin_pending_list_limit')\n    def test_gin_parameters(self):\n        index_name = 'integer_array_gin_params'\n        index = GinIndex(fields=['field'], name=index_name, fastupdate=True, gin_pending_list_limit=64)\n        with connection.schema_editor() as editor:\n            editor.add_index(IntegerArrayModel, index)\n        constraints = self.get_constraints(IntegerArrayModel._meta.db_table)\n        self.assertEqual(constraints[index_name]['type'], 'gin')\n        self.assertEqual(constraints[index_name]['options'], ['gin_pending_list_limit=64', 'fastupdate=on'])\n        with connection.schema_editor() as editor:\n            editor.remove_index(IntegerArrayModel, index)\n        self.assertNotIn(index_name, self.get_constraints(IntegerArrayModel._meta.db_table))\n\n    @skipUnlessDBFeature('has_brin_index_support')\n    def test_brin_index(self):\n        index_name = 'char_field_model_field_brin'\n        index = BrinIndex(fields=['field'], name=index_name, pages_per_range=4)\n        with connection.schema_editor() as editor:\n            editor.add_index(CharFieldModel, index)\n        constraints = self.get_constraints(CharFieldModel._meta.db_table)\n        self.assertEqual(constraints[index_name]['type'], BrinIndex.suffix)\n        self.assertEqual(constraints[index_name]['options'], ['pages_per_range=4'])\n        with connection.schema_editor() as editor:\n            editor.remove_index(CharFieldModel, index)\n        self.assertNotIn(index_name, self.get_constraints(CharFieldModel._meta.db_table))\n\n    def test_gist_index(self):\n        \n        self.assertNotIn('field', self.get_constraints(CharFieldModel._meta.db_table))\n        .\n        index_name = 'char_field_model_field_gist'\n        index = GistIndex(fields=['field'], name=index_name)\n        with connection.schema_editor() as editor:\n            editor.add_index(CharFieldModel, index)\n        constraints = self.get_constraints(CharFieldModel._meta.db_table)\n        \n        self.assertEqual(constraints[index_name]['type'], GistIndex.suffix)\n        .\n        with connection.schema_editor() as editor:\n            editor.remove_index(CharFieldModel, index)\n        self.assertNotIn(index_name, self.get_constraints(CharFieldModel._meta.db_table))\n\n    def test_gist_parameters(self):\n        index_name = 'integer_array_gist_buffering'\n        index = GistIndex(fields=['field'], name=index_name, buffering=True, fillfactor=80)\n        with connection.schema_editor() as editor:\n            editor.add_index(CharFieldModel, index)\n        constraints = self.get_constraints(CharFieldModel._meta.db_table)\n        self.assertEqual(constraints[index_name]['type'], GistIndex.suffix)\n        self.assertEqual(constraints[index_name]['options'], ['buffering=on', 'fillfactor=80'])\n        with connection.schema_editor() as editor:\n            editor.remove_index(CharFieldModel, index)\n        self.assertNotIn(index_name, self.get_constraints(CharFieldModel._meta.db_table))\n", "comments": "            a name longer 30 characters (since len(brinindex suffix) 4         rather usual limit 3) okay postgresql  for test          name field ( datetimes ) must least 7 characters         generate name longer 30 characters                      index   brinindex(fields   datetimes  )         index set name model(datetimearraymodel)         self assertequal(index name   postgres te datetim abf104 brin )      def test deconstruction(self)          index   brinindex(fields   title    name  test title brin )         path  args  kwargs   index deconstruct()         self assertequal(path   django contrib postgres indexes brinindex )         self assertequal(args  ())         self assertequal(kwargs    fields     title     name    test title brin  )      def test deconstruction pages per range(self)          index   brinindex(fields   title    name  test title brin   pages per range 16)         path  args  kwargs   index deconstruct()         self assertequal(path   django contrib postgres indexes brinindex )         self assertequal(args  ())         self assertequal(kwargs    fields     title     name    test title brin    pages per range   16 )      def test invalid pages per range(self)          self assertraisesmessage(valueerror   pages per range must none positive integer )              brinindex(fields   title    name  test title brin   pages per range 0)   class ginindextests(postgresqltestcase)       def test suffix(self)          self assertequal(ginindex suffix   gin )      def test eq(self)          index   ginindex(fields   title  )         index   ginindex(fields   title  )         another index   ginindex(fields   author  )         self assertequal(index  index)         self assertnotequal(index  another index)      def test name auto generation(self)          index   ginindex(fields   field  )         index set name model(integerarraymodel)         self assertequal(index name   postgres te field def2f8 gin )      def test deconstruction(self)          index   ginindex(             fields   title                name  test title gin               fastupdate true              gin pending list limit 128          )         path  args  kwargs   index deconstruct()         self assertequal(path   django contrib postgres indexes ginindex )         self assertequal(args  ())         self assertequal(             kwargs                                 fields     title                     name    test title gin                    fastupdate   true                   gin pending list limit   128                        )      def test deconstruct args(self)          index   ginindex(fields   title    name  test title gin )         path  args  kwargs   index deconstruct()         self assertequal(path   django contrib postgres indexes ginindex )         self assertequal(args  ())         self assertequal(kwargs    fields     title     name    test title gin  )   class gistindextests(postgresqltestcase)       def test suffix(self)          self assertequal(gistindex suffix   gist )      def test eq(self)          index   gistindex(fields   title    fillfactor 64)         index   gistindex(fields   title    fillfactor 64)         another index   gistindex(fields   author    buffering true)         self assertequal(index  index)         self assertnotequal(index  another index)      def test name auto generation(self)          index   gistindex(fields   field  )         index set name model(charfieldmodel)         self assertequal(index name   postgres te field 1e0206 gist )      def test deconstruction(self)          index   gistindex(fields   title    name  test title gist   buffering false  fillfactor 80)         path  args  kwargs   index deconstruct()         self assertequal(path   django contrib postgres indexes gistindex )         self assertequal(args  ())         self assertequal(             kwargs                                 fields     title                     name    test title gist                    buffering   false                   fillfactor   80                        )      def test deconstruction customization(self)          index   gistindex(fields   title    name  test title gist )         path  args  kwargs   index deconstruct()         self assertequal(path   django contrib postgres indexes gistindex )         self assertequal(args  ())         self assertequal(kwargs    fields     title     name    test title gist  )   class schematests(postgresqltestcase)       def get constraints(self  table)                      get indexes table using new cursor                 ensure table index     add index    check gin index added    drop index    ensure table index     add index     the index added     drop index  ", "content": "from django.contrib.postgres.indexes import BrinIndex, GinIndex, GistIndex\nfrom django.db import connection\nfrom django.test import skipUnlessDBFeature\n\nfrom . import PostgreSQLTestCase\nfrom .models import CharFieldModel, DateTimeArrayModel, IntegerArrayModel\n\n\n@skipUnlessDBFeature('has_brin_index_support')\nclass BrinIndexTests(PostgreSQLTestCase):\n\n    def test_suffix(self):\n        self.assertEqual(BrinIndex.suffix, 'brin')\n\n    def test_not_eq(self):\n        index = BrinIndex(fields=['title'])\n        index_with_page_range = BrinIndex(fields=['title'], pages_per_range=16)\n        self.assertNotEqual(index, index_with_page_range)\n\n    def test_name_auto_generation(self):\n        \"\"\"\n        A name longer than 30 characters (since len(BrinIndex.suffix) is 4\n        rather than usual limit of 3) is okay for PostgreSQL. For this test,\n        the name of the field ('datetimes') must be at least 7 characters to\n        generate a name longer than 30 characters.\n        \"\"\"\n        index = BrinIndex(fields=['datetimes'])\n        index.set_name_with_model(DateTimeArrayModel)\n        self.assertEqual(index.name, 'postgres_te_datetim_abf104_brin')\n\n    def test_deconstruction(self):\n        index = BrinIndex(fields=['title'], name='test_title_brin')\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.BrinIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'fields': ['title'], 'name': 'test_title_brin'})\n\n    def test_deconstruction_with_pages_per_range(self):\n        index = BrinIndex(fields=['title'], name='test_title_brin', pages_per_range=16)\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.BrinIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'fields': ['title'], 'name': 'test_title_brin', 'pages_per_range': 16})\n\n    def test_invalid_pages_per_range(self):\n        with self.assertRaisesMessage(ValueError, 'pages_per_range must be None or a positive integer'):\n            BrinIndex(fields=['title'], name='test_title_brin', pages_per_range=0)\n\n\nclass GinIndexTests(PostgreSQLTestCase):\n\n    def test_suffix(self):\n        self.assertEqual(GinIndex.suffix, 'gin')\n\n    def test_eq(self):\n        index = GinIndex(fields=['title'])\n        same_index = GinIndex(fields=['title'])\n        another_index = GinIndex(fields=['author'])\n        self.assertEqual(index, same_index)\n        self.assertNotEqual(index, another_index)\n\n    def test_name_auto_generation(self):\n        index = GinIndex(fields=['field'])\n        index.set_name_with_model(IntegerArrayModel)\n        self.assertEqual(index.name, 'postgres_te_field_def2f8_gin')\n\n    def test_deconstruction(self):\n        index = GinIndex(\n            fields=['title'],\n            name='test_title_gin',\n            fastupdate=True,\n            gin_pending_list_limit=128,\n        )\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.GinIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(\n            kwargs,\n            {\n                'fields': ['title'],\n                'name': 'test_title_gin',\n                'fastupdate': True,\n                'gin_pending_list_limit': 128,\n            }\n        )\n\n    def test_deconstruct_no_args(self):\n        index = GinIndex(fields=['title'], name='test_title_gin')\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.GinIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'fields': ['title'], 'name': 'test_title_gin'})\n\n\nclass GistIndexTests(PostgreSQLTestCase):\n\n    def test_suffix(self):\n        self.assertEqual(GistIndex.suffix, 'gist')\n\n    def test_eq(self):\n        index = GistIndex(fields=['title'], fillfactor=64)\n        same_index = GistIndex(fields=['title'], fillfactor=64)\n        another_index = GistIndex(fields=['author'], buffering=True)\n        self.assertEqual(index, same_index)\n        self.assertNotEqual(index, another_index)\n\n    def test_name_auto_generation(self):\n        index = GistIndex(fields=['field'])\n        index.set_name_with_model(CharFieldModel)\n        self.assertEqual(index.name, 'postgres_te_field_1e0206_gist')\n\n    def test_deconstruction(self):\n        index = GistIndex(fields=['title'], name='test_title_gist', buffering=False, fillfactor=80)\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.GistIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(\n            kwargs,\n            {\n                'fields': ['title'],\n                'name': 'test_title_gist',\n                'buffering': False,\n                'fillfactor': 80,\n            }\n        )\n\n    def test_deconstruction_no_customization(self):\n        index = GistIndex(fields=['title'], name='test_title_gist')\n        path, args, kwargs = index.deconstruct()\n        self.assertEqual(path, 'django.contrib.postgres.indexes.GistIndex')\n        self.assertEqual(args, ())\n        self.assertEqual(kwargs, {'fields': ['title'], 'name': 'test_title_gist'})\n\n\nclass SchemaTests(PostgreSQLTestCase):\n\n    def get_constraints(self, table):\n        \"\"\"\n        Get the indexes on the table using a new cursor.\n        \"\"\"\n        with connection.cursor() as cursor:\n            return connection.introspection.get_constraints(cursor, table)\n\n    def test_gin_index(self):\n        # Ensure the table is there and doesn't have an index.\n        self.assertNotIn('field', self.get_constraints(IntegerArrayModel._meta.db_table))\n        # Add the index\n        index_name = 'integer_array_model_field_gin'\n        index = GinIndex(fields=['field'], name=index_name)\n        with connection.schema_editor() as editor:\n            editor.add_index(IntegerArrayModel, index)\n        constraints = self.get_constraints(IntegerArrayModel._meta.db_table)\n        # Check gin index was added\n        self.assertEqual(constraints[index_name]['type'], GinIndex.suffix)\n        # Drop the index\n        with connection.schema_editor() as editor:\n            editor.remove_index(IntegerArrayModel, index)\n        self.assertNotIn(index_name, self.get_constraints(IntegerArrayModel._meta.db_table))\n\n    def test_gin_fastupdate(self):\n        index_name = 'integer_array_gin_fastupdate'\n        index = GinIndex(fields=['field'], name=index_name, fastupdate=False)\n        with connection.schema_editor() as editor:\n            editor.add_index(IntegerArrayModel, index)\n        constraints = self.get_constraints(IntegerArrayModel._meta.db_table)\n        self.assertEqual(constraints[index_name]['type'], 'gin')\n        self.assertEqual(constraints[index_name]['options'], ['fastupdate=off'])\n        with connection.schema_editor() as editor:\n            editor.remove_index(IntegerArrayModel, index)\n        self.assertNotIn(index_name, self.get_constraints(IntegerArrayModel._meta.db_table))\n\n    @skipUnlessDBFeature('has_gin_pending_list_limit')\n    def test_gin_parameters(self):\n        index_name = 'integer_array_gin_params'\n        index = GinIndex(fields=['field'], name=index_name, fastupdate=True, gin_pending_list_limit=64)\n        with connection.schema_editor() as editor:\n            editor.add_index(IntegerArrayModel, index)\n        constraints = self.get_constraints(IntegerArrayModel._meta.db_table)\n        self.assertEqual(constraints[index_name]['type'], 'gin')\n        self.assertEqual(constraints[index_name]['options'], ['gin_pending_list_limit=64', 'fastupdate=on'])\n        with connection.schema_editor() as editor:\n            editor.remove_index(IntegerArrayModel, index)\n        self.assertNotIn(index_name, self.get_constraints(IntegerArrayModel._meta.db_table))\n\n    @skipUnlessDBFeature('has_brin_index_support')\n    def test_brin_index(self):\n        index_name = 'char_field_model_field_brin'\n        index = BrinIndex(fields=['field'], name=index_name, pages_per_range=4)\n        with connection.schema_editor() as editor:\n            editor.add_index(CharFieldModel, index)\n        constraints = self.get_constraints(CharFieldModel._meta.db_table)\n        self.assertEqual(constraints[index_name]['type'], BrinIndex.suffix)\n        self.assertEqual(constraints[index_name]['options'], ['pages_per_range=4'])\n        with connection.schema_editor() as editor:\n            editor.remove_index(CharFieldModel, index)\n        self.assertNotIn(index_name, self.get_constraints(CharFieldModel._meta.db_table))\n\n    def test_gist_index(self):\n        # Ensure the table is there and doesn't have an index.\n        self.assertNotIn('field', self.get_constraints(CharFieldModel._meta.db_table))\n        # Add the index.\n        index_name = 'char_field_model_field_gist'\n        index = GistIndex(fields=['field'], name=index_name)\n        with connection.schema_editor() as editor:\n            editor.add_index(CharFieldModel, index)\n        constraints = self.get_constraints(CharFieldModel._meta.db_table)\n        # The index was added.\n        self.assertEqual(constraints[index_name]['type'], GistIndex.suffix)\n        # Drop the index.\n        with connection.schema_editor() as editor:\n            editor.remove_index(CharFieldModel, index)\n        self.assertNotIn(index_name, self.get_constraints(CharFieldModel._meta.db_table))\n\n    def test_gist_parameters(self):\n        index_name = 'integer_array_gist_buffering'\n        index = GistIndex(fields=['field'], name=index_name, buffering=True, fillfactor=80)\n        with connection.schema_editor() as editor:\n            editor.add_index(CharFieldModel, index)\n        constraints = self.get_constraints(CharFieldModel._meta.db_table)\n        self.assertEqual(constraints[index_name]['type'], GistIndex.suffix)\n        self.assertEqual(constraints[index_name]['options'], ['buffering=on', 'fillfactor=80'])\n        with connection.schema_editor() as editor:\n            editor.remove_index(CharFieldModel, index)\n        self.assertNotIn(index_name, self.get_constraints(CharFieldModel._meta.db_table))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_indexes.py", "id": "4017fc9ef9656c50f4fb74a71b4c7030", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/postgres_tests/test_indexes.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}