{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (2016-2017) Hewlett Packard Enterprise Development LP\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nimport yaml\n\nfrom ansible.compat.tests import unittest, mock\nfrom oneview_module_loader import EthernetNetworkModule, OneViewModuleResourceNotFound\nfrom hpe_test_utils import OneViewBaseTestCase\n\nFAKE_MSG_ERROR = 'Fake message error'\nDEFAULT_ETHERNET_NAME = 'Test Ethernet Network'\nRENAMED_ETHERNET = 'Renamed Ethernet Network'\n\nDEFAULT_ENET_TEMPLATE = dict(\n    name=DEFAULT_ETHERNET_NAME,\n    vlanId=200,\n    ethernetNetworkType=\"Tagged\",\n    purpose=\"General\",\n    smartLink=False,\n    privateNetwork=False,\n    connectionTemplateUri=None\n)\n\nPARAMS_FOR_PRESENT = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_ETHERNET_NAME)\n)\n\nPARAMS_TO_RENAME = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_ETHERNET_NAME,\n              newName=RENAMED_ETHERNET)\n)\n\nYAML_PARAMS_WITH_CHANGES = \"\"\"\n    config: \"config.json\"\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      purpose: Management\n      connectionTemplateUri: ~\n      bandwidth:\n          maximumBandwidth: 3000\n          typicalBandwidth: 2000\n\"\"\"\n\nYAML_RESET_CONNECTION_TEMPLATE = \"\"\"\n        config: \"{{ config }}\"\n        state: default_bandwidth_reset\n        data:\n          name: 'network name'\n\"\"\"\n\nPARAMS_FOR_SCOPES_SET = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_ETHERNET_NAME)\n)\n\nPARAMS_FOR_ABSENT = dict(\n    config='config.json',\n    state='absent',\n    data=dict(name=DEFAULT_ETHERNET_NAME)\n)\n\nPARAMS_FOR_BULK_CREATED = dict(\n    config='config.json',\n    state='present',\n    data=dict(namePrefix=\"TestNetwork\", vlanIdRange=\"1-2,5,9-10\")\n)\n\nDEFAULT_BULK_ENET_TEMPLATE = [\n    {'name': 'TestNetwork_1', 'vlanId': 1},\n    {'name': 'TestNetwork_2', 'vlanId': 2},\n    {'name': 'TestNetwork_5', 'vlanId': 5},\n    {'name': 'TestNetwork_9', 'vlanId': 9},\n    {'name': 'TestNetwork_10', 'vlanId': 10},\n]\n\nDICT_PARAMS_WITH_CHANGES = yaml.load(YAML_PARAMS_WITH_CHANGES)[\"data\"]\n\n\nclass EthernetNetworkModuleSpec(unittest.TestCase,\n                                OneViewBaseTestCase):\n    \"\"\"\n    OneViewBaseTestCase provides the mocks used in this test case\n    \"\"\"\n\n    def setUp(self):\n        self.configure_mocks(self, EthernetNetworkModule)\n        self.resource = self.mock_ov_client.ethernet_networks\n\n    def test_should_create_new_ethernet_network(self):\n        self.resource.get_by.return_value = []\n        self.resource.create.return_value = DEFAULT_ENET_TEMPLATE\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_CREATED,\n            ansible_facts=dict(ethernet_network=DEFAULT_ENET_TEMPLATE)\n        )\n\n    def test_should_not_update_when_data_is_equals(self):\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=EthernetNetworkModule.MSG_ALREADY_PRESENT,\n            ansible_facts=dict(ethernet_network=DEFAULT_ENET_TEMPLATE)\n        )\n\n    def test_update_when_data_has_modified_attributes(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        data_merged['purpose'] = 'Management'\n\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n        self.resource.update.return_value = data_merged\n        self.mock_ov_client.connection_templates.get.return_value = {\"uri\": \"uri\"}\n\n        self.mock_ansible_module.params = yaml.load(YAML_PARAMS_WITH_CHANGES)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(ethernet_network=data_merged)\n        )\n\n    def test_update_when_only_bandwidth_has_modified_attributes(self):\n        self.resource.get_by.return_value = [DICT_PARAMS_WITH_CHANGES]\n        self.mock_ov_client.connection_templates.get.return_value = {\"uri\": \"uri\"}\n\n        self.mock_ansible_module.params = yaml.load(YAML_PARAMS_WITH_CHANGES)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(ethernet_network=DICT_PARAMS_WITH_CHANGES)\n        )\n\n    def test_update_when_data_has_modified_attributes_but_bandwidth_is_equal(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        data_merged['purpose'] = 'Management'\n\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n        self.resource.update.return_value = data_merged\n        self.mock_ov_client.connection_templates.get.return_value = {\n            \"bandwidth\": DICT_PARAMS_WITH_CHANGES['bandwidth']}\n\n        self.mock_ansible_module.params = yaml.load(YAML_PARAMS_WITH_CHANGES)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(ethernet_network=data_merged)\n        )\n\n    def test_update_successfully_even_when_connection_template_uri_not_exists(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        del data_merged['connectionTemplateUri']\n\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n        self.resource.update.return_value = data_merged\n\n        self.mock_ansible_module.params = yaml.load(YAML_PARAMS_WITH_CHANGES)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(ethernet_network=data_merged)\n        )\n\n    def test_rename_when_resource_exists(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        data_merged['name'] = RENAMED_ETHERNET\n        params_to_rename = PARAMS_TO_RENAME.copy()\n\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n        self.resource.update.return_value = data_merged\n\n        self.mock_ansible_module.params = params_to_rename\n\n        EthernetNetworkModule().run()\n\n        self.resource.update.assert_called_once_with(data_merged)\n\n    def test_create_with_new_name_when_resource_not_exists(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        data_merged['name'] = RENAMED_ETHERNET\n        params_to_rename = PARAMS_TO_RENAME.copy()\n\n        self.resource.get_by.return_value = []\n        self.resource.create.return_value = DEFAULT_ENET_TEMPLATE\n\n        self.mock_ansible_module.params = params_to_rename\n\n        EthernetNetworkModule().run()\n\n        self.resource.create.assert_called_once_with(PARAMS_TO_RENAME['data'])\n\n    def test_should_remove_ethernet_network(self):\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_DELETED\n        )\n\n    def test_should_do_nothing_when_ethernet_network_not_exist(self):\n        self.resource.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=EthernetNetworkModule.MSG_ALREADY_ABSENT\n        )\n\n    def test_should_create_all_ethernet_networks(self):\n        self.resource.get_range.side_effect = [[], DEFAULT_BULK_ENET_TEMPLATE]\n        self.resource.create_bulk.return_value = DEFAULT_BULK_ENET_TEMPLATE\n\n        self.mock_ansible_module.params = PARAMS_FOR_BULK_CREATED\n\n        EthernetNetworkModule().run()\n\n        self.resource.create_bulk.assert_called_once_with(\n            dict(namePrefix=\"TestNetwork\", vlanIdRange=\"1-2,5,9-10\"))\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_BULK_CREATED,\n            ansible_facts=dict(ethernet_network_bulk=DEFAULT_BULK_ENET_TEMPLATE))\n\n    def test_should_create_missing_ethernet_networks(self):\n        enet_get_range_return = [\n            {'name': 'TestNetwork_1', 'vlanId': 1},\n            {'name': 'TestNetwork_2', 'vlanId': 2},\n        ]\n\n        self.resource.get_range.side_effect = [enet_get_range_return, DEFAULT_BULK_ENET_TEMPLATE]\n        self.resource.dissociate_values_or_ranges.return_value = [1, 2, 5, 9, 10]\n\n        self.mock_ansible_module.params = PARAMS_FOR_BULK_CREATED\n\n        EthernetNetworkModule().run()\n\n        self.resource.create_bulk.assert_called_once_with(\n            dict(namePrefix=\"TestNetwork\", vlanIdRange=\"5,9,10\"))\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True, msg=EthernetNetworkModule.MSG_MISSING_BULK_CREATED,\n            ansible_facts=dict(ethernet_network_bulk=DEFAULT_BULK_ENET_TEMPLATE))\n\n    def test_should_create_missing_ethernet_networks_with_just_one_difference(self):\n        enet_get_range_return = [\n            {'name': 'TestNetwork_1', 'vlanId': 1},\n            {'name': 'TestNetwork_2', 'vlanId': 2},\n        ]\n\n        self.resource.get_range.side_effect = [enet_get_range_return, DEFAULT_BULK_ENET_TEMPLATE]\n        self.resource.dissociate_values_or_ranges.return_value = [1, 2, 5]\n\n        self.mock_ansible_module.params = PARAMS_FOR_BULK_CREATED\n\n        EthernetNetworkModule().run()\n\n        self.resource.create_bulk.assert_called_once_with({'vlanIdRange': '5-5', 'namePrefix': 'TestNetwork'})\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_MISSING_BULK_CREATED,\n            ansible_facts=dict(ethernet_network_bulk=DEFAULT_BULK_ENET_TEMPLATE))\n\n    def test_should_do_nothing_when_ethernet_networks_already_exist(self):\n        self.resource.get_range.return_value = DEFAULT_BULK_ENET_TEMPLATE\n        self.resource.dissociate_values_or_ranges.return_value = [1, 2, 5, 9, 10]\n\n        self.mock_ansible_module.params = PARAMS_FOR_BULK_CREATED\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False, msg=EthernetNetworkModule.MSG_BULK_ALREADY_EXIST,\n            ansible_facts=dict(ethernet_network_bulk=DEFAULT_BULK_ENET_TEMPLATE))\n\n    def test_reset_successfully(self):\n        self.resource.get_by.return_value = [DICT_PARAMS_WITH_CHANGES]\n        self.mock_ov_client.connection_templates.update.return_value = {'result': 'success'}\n        self.mock_ov_client.connection_templates.get.return_value = {\n            \"bandwidth\": DICT_PARAMS_WITH_CHANGES['bandwidth']}\n\n        self.mock_ov_client.connection_templates.get_default.return_value = {\"bandwidth\": {\n            \"max\": 1\n        }}\n\n        self.mock_ansible_module.params = yaml.load(YAML_RESET_CONNECTION_TEMPLATE)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True, msg=EthernetNetworkModule.MSG_CONNECTION_TEMPLATE_RESET,\n            ansible_facts=dict(ethernet_network_connection_template={'result': 'success'}))\n\n    def test_should_fail_when_reset_not_existing_ethernet_network(self):\n        self.resource.get_by.return_value = [None]\n\n        self.mock_ansible_module.params = yaml.load(YAML_RESET_CONNECTION_TEMPLATE)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(\n            exception=mock.ANY,\n            msg=EthernetNetworkModule.MSG_ETHERNET_NETWORK_NOT_FOUND\n        )\n\n    def test_update_scopes_when_different(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = DEFAULT_ENET_TEMPLATE.copy()\n        resource_data['scopeUris'] = ['fake']\n        resource_data['uri'] = 'rest/ethernet/fake'\n        self.resource.get_by.return_value = [resource_data]\n\n        patch_return = resource_data.copy()\n        patch_return['scopeUris'] = ['test']\n        self.resource.patch.return_value = patch_return\n\n        EthernetNetworkModule().run()\n\n        self.resource.patch.assert_called_once_with('rest/ethernet/fake',\n                                                    operation='replace',\n                                                    path='/scopeUris',\n                                                    value=['test'])\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            ansible_facts=dict(ethernet_network=patch_return),\n            msg=EthernetNetworkModule.MSG_UPDATED\n        )\n\n    def test_should_do_nothing_when_scopes_are_the_same(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = DEFAULT_ENET_TEMPLATE.copy()\n        resource_data['scopeUris'] = ['test']\n        self.resource.get_by.return_value = [resource_data]\n\n        EthernetNetworkModule().run()\n\n        self.resource.patch.not_been_called()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(ethernet_network=resource_data),\n            msg=EthernetNetworkModule.MSG_ALREADY_PRESENT\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "        config   config json      state  present     data        name   test ethernet network        purpose  management       connectiontemplateuri          bandwidth            maximumbandwidth  3000           typicalbandwidth  2000      yaml reset connection template               config      config             state  default bandwidth reset         data            name   network name       params for scopes set   dict(     config  config json       state  present       data dict(name default ethernet name) )  params for absent   dict(     config  config json       state  absent       data dict(name default ethernet name) )  params for bulk created   dict(     config  config json       state  present       data dict(nameprefix  testnetwork   vlanidrange  1 2 5 9 10 ) )  default bulk enet template           name    testnetwork 1    vlanid   1         name    testnetwork 2    vlanid   2         name    testnetwork 5    vlanid   5         name    testnetwork 9    vlanid   9         name    testnetwork 10    vlanid   10      dict params with changes   yaml load(yaml params with changes)  data     class ethernetnetworkmodulespec(unittest testcase                                  oneviewbasetestcase)              oneviewbasetestcase provides mocks used test case                coding  utf 8           copyright (2016 2017) hewlett packard enterprise development lp       this program free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        this program distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose  see    gnu general public license details        you received copy gnu general public license    along program  if  see  http   www gnu org licenses    ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (2016-2017) Hewlett Packard Enterprise Development LP\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nimport yaml\n\nfrom ansible.compat.tests import unittest, mock\nfrom oneview_module_loader import EthernetNetworkModule, OneViewModuleResourceNotFound\nfrom hpe_test_utils import OneViewBaseTestCase\n\nFAKE_MSG_ERROR = 'Fake message error'\nDEFAULT_ETHERNET_NAME = 'Test Ethernet Network'\nRENAMED_ETHERNET = 'Renamed Ethernet Network'\n\nDEFAULT_ENET_TEMPLATE = dict(\n    name=DEFAULT_ETHERNET_NAME,\n    vlanId=200,\n    ethernetNetworkType=\"Tagged\",\n    purpose=\"General\",\n    smartLink=False,\n    privateNetwork=False,\n    connectionTemplateUri=None\n)\n\nPARAMS_FOR_PRESENT = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_ETHERNET_NAME)\n)\n\nPARAMS_TO_RENAME = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_ETHERNET_NAME,\n              newName=RENAMED_ETHERNET)\n)\n\nYAML_PARAMS_WITH_CHANGES = \"\"\"\n    config: \"config.json\"\n    state: present\n    data:\n      name: 'Test Ethernet Network'\n      purpose: Management\n      connectionTemplateUri: ~\n      bandwidth:\n          maximumBandwidth: 3000\n          typicalBandwidth: 2000\n\"\"\"\n\nYAML_RESET_CONNECTION_TEMPLATE = \"\"\"\n        config: \"{{ config }}\"\n        state: default_bandwidth_reset\n        data:\n          name: 'network name'\n\"\"\"\n\nPARAMS_FOR_SCOPES_SET = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_ETHERNET_NAME)\n)\n\nPARAMS_FOR_ABSENT = dict(\n    config='config.json',\n    state='absent',\n    data=dict(name=DEFAULT_ETHERNET_NAME)\n)\n\nPARAMS_FOR_BULK_CREATED = dict(\n    config='config.json',\n    state='present',\n    data=dict(namePrefix=\"TestNetwork\", vlanIdRange=\"1-2,5,9-10\")\n)\n\nDEFAULT_BULK_ENET_TEMPLATE = [\n    {'name': 'TestNetwork_1', 'vlanId': 1},\n    {'name': 'TestNetwork_2', 'vlanId': 2},\n    {'name': 'TestNetwork_5', 'vlanId': 5},\n    {'name': 'TestNetwork_9', 'vlanId': 9},\n    {'name': 'TestNetwork_10', 'vlanId': 10},\n]\n\nDICT_PARAMS_WITH_CHANGES = yaml.load(YAML_PARAMS_WITH_CHANGES)[\"data\"]\n\n\nclass EthernetNetworkModuleSpec(unittest.TestCase,\n                                OneViewBaseTestCase):\n    \"\"\"\n    OneViewBaseTestCase provides the mocks used in this test case\n    \"\"\"\n\n    def setUp(self):\n        self.configure_mocks(self, EthernetNetworkModule)\n        self.resource = self.mock_ov_client.ethernet_networks\n\n    def test_should_create_new_ethernet_network(self):\n        self.resource.get_by.return_value = []\n        self.resource.create.return_value = DEFAULT_ENET_TEMPLATE\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_CREATED,\n            ansible_facts=dict(ethernet_network=DEFAULT_ENET_TEMPLATE)\n        )\n\n    def test_should_not_update_when_data_is_equals(self):\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=EthernetNetworkModule.MSG_ALREADY_PRESENT,\n            ansible_facts=dict(ethernet_network=DEFAULT_ENET_TEMPLATE)\n        )\n\n    def test_update_when_data_has_modified_attributes(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        data_merged['purpose'] = 'Management'\n\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n        self.resource.update.return_value = data_merged\n        self.mock_ov_client.connection_templates.get.return_value = {\"uri\": \"uri\"}\n\n        self.mock_ansible_module.params = yaml.load(YAML_PARAMS_WITH_CHANGES)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(ethernet_network=data_merged)\n        )\n\n    def test_update_when_only_bandwidth_has_modified_attributes(self):\n        self.resource.get_by.return_value = [DICT_PARAMS_WITH_CHANGES]\n        self.mock_ov_client.connection_templates.get.return_value = {\"uri\": \"uri\"}\n\n        self.mock_ansible_module.params = yaml.load(YAML_PARAMS_WITH_CHANGES)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(ethernet_network=DICT_PARAMS_WITH_CHANGES)\n        )\n\n    def test_update_when_data_has_modified_attributes_but_bandwidth_is_equal(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        data_merged['purpose'] = 'Management'\n\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n        self.resource.update.return_value = data_merged\n        self.mock_ov_client.connection_templates.get.return_value = {\n            \"bandwidth\": DICT_PARAMS_WITH_CHANGES['bandwidth']}\n\n        self.mock_ansible_module.params = yaml.load(YAML_PARAMS_WITH_CHANGES)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(ethernet_network=data_merged)\n        )\n\n    def test_update_successfully_even_when_connection_template_uri_not_exists(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        del data_merged['connectionTemplateUri']\n\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n        self.resource.update.return_value = data_merged\n\n        self.mock_ansible_module.params = yaml.load(YAML_PARAMS_WITH_CHANGES)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(ethernet_network=data_merged)\n        )\n\n    def test_rename_when_resource_exists(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        data_merged['name'] = RENAMED_ETHERNET\n        params_to_rename = PARAMS_TO_RENAME.copy()\n\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n        self.resource.update.return_value = data_merged\n\n        self.mock_ansible_module.params = params_to_rename\n\n        EthernetNetworkModule().run()\n\n        self.resource.update.assert_called_once_with(data_merged)\n\n    def test_create_with_new_name_when_resource_not_exists(self):\n        data_merged = DEFAULT_ENET_TEMPLATE.copy()\n        data_merged['name'] = RENAMED_ETHERNET\n        params_to_rename = PARAMS_TO_RENAME.copy()\n\n        self.resource.get_by.return_value = []\n        self.resource.create.return_value = DEFAULT_ENET_TEMPLATE\n\n        self.mock_ansible_module.params = params_to_rename\n\n        EthernetNetworkModule().run()\n\n        self.resource.create.assert_called_once_with(PARAMS_TO_RENAME['data'])\n\n    def test_should_remove_ethernet_network(self):\n        self.resource.get_by.return_value = [DEFAULT_ENET_TEMPLATE]\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_DELETED\n        )\n\n    def test_should_do_nothing_when_ethernet_network_not_exist(self):\n        self.resource.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=EthernetNetworkModule.MSG_ALREADY_ABSENT\n        )\n\n    def test_should_create_all_ethernet_networks(self):\n        self.resource.get_range.side_effect = [[], DEFAULT_BULK_ENET_TEMPLATE]\n        self.resource.create_bulk.return_value = DEFAULT_BULK_ENET_TEMPLATE\n\n        self.mock_ansible_module.params = PARAMS_FOR_BULK_CREATED\n\n        EthernetNetworkModule().run()\n\n        self.resource.create_bulk.assert_called_once_with(\n            dict(namePrefix=\"TestNetwork\", vlanIdRange=\"1-2,5,9-10\"))\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_BULK_CREATED,\n            ansible_facts=dict(ethernet_network_bulk=DEFAULT_BULK_ENET_TEMPLATE))\n\n    def test_should_create_missing_ethernet_networks(self):\n        enet_get_range_return = [\n            {'name': 'TestNetwork_1', 'vlanId': 1},\n            {'name': 'TestNetwork_2', 'vlanId': 2},\n        ]\n\n        self.resource.get_range.side_effect = [enet_get_range_return, DEFAULT_BULK_ENET_TEMPLATE]\n        self.resource.dissociate_values_or_ranges.return_value = [1, 2, 5, 9, 10]\n\n        self.mock_ansible_module.params = PARAMS_FOR_BULK_CREATED\n\n        EthernetNetworkModule().run()\n\n        self.resource.create_bulk.assert_called_once_with(\n            dict(namePrefix=\"TestNetwork\", vlanIdRange=\"5,9,10\"))\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True, msg=EthernetNetworkModule.MSG_MISSING_BULK_CREATED,\n            ansible_facts=dict(ethernet_network_bulk=DEFAULT_BULK_ENET_TEMPLATE))\n\n    def test_should_create_missing_ethernet_networks_with_just_one_difference(self):\n        enet_get_range_return = [\n            {'name': 'TestNetwork_1', 'vlanId': 1},\n            {'name': 'TestNetwork_2', 'vlanId': 2},\n        ]\n\n        self.resource.get_range.side_effect = [enet_get_range_return, DEFAULT_BULK_ENET_TEMPLATE]\n        self.resource.dissociate_values_or_ranges.return_value = [1, 2, 5]\n\n        self.mock_ansible_module.params = PARAMS_FOR_BULK_CREATED\n\n        EthernetNetworkModule().run()\n\n        self.resource.create_bulk.assert_called_once_with({'vlanIdRange': '5-5', 'namePrefix': 'TestNetwork'})\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=EthernetNetworkModule.MSG_MISSING_BULK_CREATED,\n            ansible_facts=dict(ethernet_network_bulk=DEFAULT_BULK_ENET_TEMPLATE))\n\n    def test_should_do_nothing_when_ethernet_networks_already_exist(self):\n        self.resource.get_range.return_value = DEFAULT_BULK_ENET_TEMPLATE\n        self.resource.dissociate_values_or_ranges.return_value = [1, 2, 5, 9, 10]\n\n        self.mock_ansible_module.params = PARAMS_FOR_BULK_CREATED\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False, msg=EthernetNetworkModule.MSG_BULK_ALREADY_EXIST,\n            ansible_facts=dict(ethernet_network_bulk=DEFAULT_BULK_ENET_TEMPLATE))\n\n    def test_reset_successfully(self):\n        self.resource.get_by.return_value = [DICT_PARAMS_WITH_CHANGES]\n        self.mock_ov_client.connection_templates.update.return_value = {'result': 'success'}\n        self.mock_ov_client.connection_templates.get.return_value = {\n            \"bandwidth\": DICT_PARAMS_WITH_CHANGES['bandwidth']}\n\n        self.mock_ov_client.connection_templates.get_default.return_value = {\"bandwidth\": {\n            \"max\": 1\n        }}\n\n        self.mock_ansible_module.params = yaml.load(YAML_RESET_CONNECTION_TEMPLATE)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True, msg=EthernetNetworkModule.MSG_CONNECTION_TEMPLATE_RESET,\n            ansible_facts=dict(ethernet_network_connection_template={'result': 'success'}))\n\n    def test_should_fail_when_reset_not_existing_ethernet_network(self):\n        self.resource.get_by.return_value = [None]\n\n        self.mock_ansible_module.params = yaml.load(YAML_RESET_CONNECTION_TEMPLATE)\n\n        EthernetNetworkModule().run()\n\n        self.mock_ansible_module.fail_json.assert_called_once_with(\n            exception=mock.ANY,\n            msg=EthernetNetworkModule.MSG_ETHERNET_NETWORK_NOT_FOUND\n        )\n\n    def test_update_scopes_when_different(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = DEFAULT_ENET_TEMPLATE.copy()\n        resource_data['scopeUris'] = ['fake']\n        resource_data['uri'] = 'rest/ethernet/fake'\n        self.resource.get_by.return_value = [resource_data]\n\n        patch_return = resource_data.copy()\n        patch_return['scopeUris'] = ['test']\n        self.resource.patch.return_value = patch_return\n\n        EthernetNetworkModule().run()\n\n        self.resource.patch.assert_called_once_with('rest/ethernet/fake',\n                                                    operation='replace',\n                                                    path='/scopeUris',\n                                                    value=['test'])\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            ansible_facts=dict(ethernet_network=patch_return),\n            msg=EthernetNetworkModule.MSG_UPDATED\n        )\n\n    def test_should_do_nothing_when_scopes_are_the_same(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = DEFAULT_ENET_TEMPLATE.copy()\n        resource_data['scopeUris'] = ['test']\n        self.resource.get_by.return_value = [resource_data]\n\n        EthernetNetworkModule().run()\n\n        self.resource.patch.not_been_called()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(ethernet_network=resource_data),\n            msg=EthernetNetworkModule.MSG_ALREADY_PRESENT\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_oneview_ethernet_network.py", "id": "9868c93893862910293170793fbf3cd8", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/test_oneview_ethernet_network.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}