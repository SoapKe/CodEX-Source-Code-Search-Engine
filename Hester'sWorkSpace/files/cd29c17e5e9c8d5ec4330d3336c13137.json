{"author": "HelloZeroNet", "code": "import argparse\nimport sys\nimport os\nimport locale\nimport re\nimport ConfigParser\n\n\nclass Config(object):\n\n    def __init__(self, argv):\n        self.version = \"0.6.2\"\n        self.rev = 3367\n        self.argv = argv\n        self.action = None\n        self.config_file = \"zeronet.conf\"\n        self.createParser()\n        self.createArguments()\n\n    def createParser(self):\n        \n        self.parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n        self.parser.register('type', 'bool', self.strToBool)\n        self.subparsers = self.parser.add_subparsers(title=\"Action to perform\", dest=\"action\")\n\n    def __str__(self):\n        return str(self.arguments).replace(\"Namespace\", \"Config\")  \n\n    \n    def strToBool(self, v):\n        return v.lower() in (\"yes\", \"true\", \"t\", \"1\")\n\n    \n    def createArguments(self):\n        trackers = [\n            \"zero://boot3rdez4rzn36x.onion:15441\",\n            \"zero://zero.booth.moe\n            \"udp://tracker.coppersurfer.tk:6969\",  \n            \"udp://tracker.leechers-paradise.org:6969\",  \n            \"udp://9.rarbg.com:2710\",  \n            \"http://tracker.city9x.com:2710/announce\",  \n            \"http://0d.kebhana.mx:443/announce\",  \n            \"http://retracker.spark-rostov.ru:80/announce\"  \n        ]\n        \n        if sys.platform.startswith(\"win\"):\n            coffeescript = \"type %s | tools\\\\coffee\\\\coffee.cmd\"\n        else:\n            coffeescript = None\n\n        try:\n            language, enc = locale.getdefaultlocale()\n            language = language.split(\"_\")[0]\n        except Exception:\n            language = \"en\"\n\n        use_openssl = True\n\n        if repr(1483108852.565) != \"1483108852.565\":\n            fix_float_decimals = True\n        else:\n            fix_float_decimals = False\n\n        this_file = os.path.abspath(__file__).replace(\"\\\\\", \"/\").rstrip(\"cd\")\n\n        if this_file.endswith(\"/Contents/Resources/core/src/Config.py\"):\n            \n            if this_file.startswith(\"/Application\") or this_file.startswith(\"/private\") or this_file.startswith(os.path.expanduser(\"~/Library\")):\n                \n                start_dir = os.path.expanduser(\"~/Library/Application Support/ZeroNet\").decode(sys.getfilesystemencoding())\n            else:\n                \n                start_dir = re.sub(\"/[^/]+/Contents/Resources/core/src/Config.py\", \"\", this_file).decode(sys.getfilesystemencoding())\n            config_file = start_dir + \"/zeronet.conf\"\n            data_dir = start_dir + \"/data\"\n            log_dir = start_dir + \"/log\"\n        elif this_file.endswith(\"/core/src/Config.py\"):\n            \n            start_dir = this_file.replace(\"/core/src/Config.py\", \"\").decode(sys.getfilesystemencoding())\n            config_file = start_dir + \"/zeronet.conf\"\n            data_dir = start_dir + \"/data\"\n            log_dir = start_dir + \"/log\"\n        elif this_file.endswith(\"usr/share/zeronet/src/Config.py\"):\n            \n            start_dir = os.path.expanduser(\"~/ZeroNet\").decode(sys.getfilesystemencoding())\n            config_file = start_dir + \"/zeronet.conf\"\n            data_dir = start_dir + \"/data\"\n            log_dir = start_dir + \"/log\"\n        else:\n            config_file = \"zeronet.conf\"\n            data_dir = \"data\"\n            log_dir = \"log\"\n\n        ip_local = [\"127.0.0.1\"]\n\n        \n        action = self.subparsers.add_parser(\"main\", help='Start UiServer and FileServer (default)')\n\n        \n        action = self.subparsers.add_parser(\"siteCreate\", help='Create a new site')\n\n        \n        action = self.subparsers.add_parser(\"siteNeedFile\", help='Get a file from site')\n        action.add_argument('address', help='Site address')\n        action.add_argument('inner_path', help='File inner path')\n\n        \n        action = self.subparsers.add_parser(\"siteDownload\", help='Download a new site')\n        action.add_argument('address', help='Site address')\n\n        \n        action = self.subparsers.add_parser(\"siteSign\", help='Update and sign content.json: address [privatekey]')\n        action.add_argument('address', help='Site to sign')\n        action.add_argument('privatekey', help='Private key (default: ask on execute)', nargs='?')\n        action.add_argument('--inner_path', help='File you want to sign (default: content.json)',\n                            default=\"content.json\", metavar=\"inner_path\")\n        action.add_argument('--remove_missing_optional', help='Remove optional files that is not present in the directory', action='store_true')\n        action.add_argument('--publish', help='Publish site after the signing', action='store_true')\n\n        \n        action = self.subparsers.add_parser(\"sitePublish\", help='Publish site to other peers: address')\n        action.add_argument('address', help='Site to publish')\n        action.add_argument('peer_ip', help='Peer ip to publish (default: random peers ip from tracker)',\n                            default=None, nargs='?')\n        action.add_argument('peer_port', help='Peer port to publish (default: random peer port from tracker)',\n                            default=15441, nargs='?')\n        action.add_argument('--inner_path', help='Content.json you want to publish (default: content.json)',\n                            default=\"content.json\", metavar=\"inner_path\")\n\n        \n        action = self.subparsers.add_parser(\"siteVerify\", help='Verify site files using sha512: address')\n        action.add_argument('address', help='Site to verify')\n\n        \n        action = self.subparsers.add_parser(\"dbRebuild\", help='Rebuild site database cache')\n        action.add_argument('address', help='Site to rebuild')\n\n        \n        action = self.subparsers.add_parser(\"dbQuery\", help='Query site sql cache')\n        action.add_argument('address', help='Site to query')\n        action.add_argument('query', help='Sql query')\n\n        \n        action = self.subparsers.add_parser(\"peerPing\", help='Send Ping command to peer')\n        action.add_argument('peer_ip', help='Peer ip')\n        action.add_argument('peer_port', help='Peer port', nargs='?')\n\n        \n        action = self.subparsers.add_parser(\"peerGetFile\", help='Request and print a file content from peer')\n        action.add_argument('peer_ip', help='Peer ip')\n        action.add_argument('peer_port', help='Peer port')\n        action.add_argument('site', help='Site address')\n        action.add_argument('filename', help='File name to request')\n        action.add_argument('--benchmark', help='Request file 10x then displays the total time', action='store_true')\n\n        \n        action = self.subparsers.add_parser(\"peerCmd\", help='Request and print a file content from peer')\n        action.add_argument('peer_ip', help='Peer ip')\n        action.add_argument('peer_port', help='Peer port')\n        action.add_argument('cmd', help='Command to execute')\n        action.add_argument('parameters', help='Parameters to command', nargs='?')\n\n        \n        action = self.subparsers.add_parser(\"cryptSign\", help='Sign message using Bitcoin private key')\n        action.add_argument('message', help='Message to sign')\n        action.add_argument('privatekey', help='Private key')\n\n        \n        action = self.subparsers.add_parser(\"cryptVerify\", help='Verify message using Bitcoin public address')\n        action.add_argument('message', help='Message to verify')\n        action.add_argument('sign', help='Signiture for message')\n        action.add_argument('address', help='Signer\\'s address')\n\n        action = self.subparsers.add_parser(\"getConfig\", help='Return json-encoded info')\n        action = self.subparsers.add_parser(\"testConnection\", help='Testing')\n        action = self.subparsers.add_parser(\"testAnnounce\", help='Testing')\n\n        \n        self.parser.add_argument('--verbose', help='More detailed logging', action='store_true')\n        self.parser.add_argument('--debug', help='Debug mode', action='store_true')\n        self.parser.add_argument('--silent', help='Disable logging to terminal output', action='store_true')\n        self.parser.add_argument('--debug_socket', help='Debug socket connections', action='store_true')\n\n        self.parser.add_argument('--batch', help=\"Batch mode (No interactive input for commands)\", action='store_true')\n\n        self.parser.add_argument('--config_file', help='Path of config file', default=config_file, metavar=\"path\")\n        self.parser.add_argument('--data_dir', help='Path of data directory', default=data_dir, metavar=\"path\")\n        self.parser.add_argument('--log_dir', help='Path of logging directory', default=log_dir, metavar=\"path\")\n        self.parser.add_argument('--log_level', help='Level of logging to file', default=\"DEBUG\", choices=[\"DEBUG\", \"INFO\", \"ERROR\"])\n\n        self.parser.add_argument('--language', help='Web interface language', default=language, metavar='language')\n        self.parser.add_argument('--ui_ip', help='Web interface bind address', default=\"127.0.0.1\", metavar='ip')\n        self.parser.add_argument('--ui_port', help='Web interface bind port', default=43110, type=int, metavar='port')\n        self.parser.add_argument('--ui_restrict', help='Restrict web access', default=False, metavar='ip', nargs='*')\n        self.parser.add_argument('--ui_host', help='Allow access using this hosts', metavar='host', nargs='*')\n\n        self.parser.add_argument('--open_browser', help='Open homepage in web browser automatically',\n                                 nargs='?', const=\"default_browser\", metavar='browser_name')\n        self.parser.add_argument('--homepage', help='Web interface Homepage', default='1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D',\n                                 metavar='address')\n        self.parser.add_argument('--updatesite', help='Source code update site', default='1UPDatEDxnvHDo7TXvq6AEBARfNkyfxsp',\n                                 metavar='address')\n        self.parser.add_argument('--size_limit', help='Default site size limit in MB', default=10, type=int, metavar='limit')\n        self.parser.add_argument('--file_size_limit', help='Maximum per file size limit in MB', default=10, type=int, metavar='limit')\n        self.parser.add_argument('--connected_limit', help='Max connected peer per site', default=8, type=int, metavar='connected_limit')\n        self.parser.add_argument('--global_connected_limit', help='Max connections', default=512, type=int, metavar='global_connected_limit')\n        self.parser.add_argument('--workers', help='Download workers per site', default=5, type=int, metavar='workers')\n\n        self.parser.add_argument('--fileserver_ip', help='FileServer bind address', default=\"*\", metavar='ip')\n        self.parser.add_argument('--fileserver_port', help='FileServer bind port', default=15441, type=int, metavar='port')\n        self.parser.add_argument('--ip_local', help='My local ips', default=ip_local, type=int, metavar='ip', nargs='*')\n\n        self.parser.add_argument('--disable_udp', help='Disable UDP connections', action='store_true')\n        self.parser.add_argument('--proxy', help='Socks proxy address', metavar='ip:port')\n        self.parser.add_argument('--bind', help='Bind outgoing sockets to this address', metavar='ip')\n        self.parser.add_argument('--ip_external', help='Set reported external ip (tested on start if None)', metavar='ip')\n        self.parser.add_argument('--trackers', help='Bootstraping torrent trackers', default=trackers, metavar='protocol://address', nargs='*')\n        self.parser.add_argument('--trackers_file', help='Load torrent trackers dynamically from a file', default=False, metavar='path')\n        self.parser.add_argument('--use_openssl', help='Use OpenSSL liblary for speedup',\n                                 type='bool', choices=[True, False], default=use_openssl)\n        self.parser.add_argument('--disable_db', help='Disable database updating', action='store_true')\n        self.parser.add_argument('--disable_encryption', help='Disable connection encryption', action='store_true')\n        self.parser.add_argument('--force_encryption', help=\"Enforce encryption to all peer connections\", action='store_true')\n        self.parser.add_argument('--disable_sslcompression', help='Disable SSL compression to save memory',\n                                 type='bool', choices=[True, False], default=True)\n        self.parser.add_argument('--keep_ssl_cert', help='Disable new SSL cert generation on startup', action='store_true')\n        self.parser.add_argument('--max_files_opened', help='Change maximum opened files allowed by OS to this value on startup',\n                                 default=2048, type=int, metavar='limit')\n        self.parser.add_argument('--stack_size', help='Change thread stack size', default=None, type=int, metavar='thread_stack_size')\n        self.parser.add_argument('--use_tempfiles', help='Use temporary files when downloading (experimental)',\n                                 type='bool', choices=[True, False], default=False)\n        self.parser.add_argument('--stream_downloads', help='Stream download directly to files (experimental)',\n                                 type='bool', choices=[True, False], default=False)\n        self.parser.add_argument(\"--msgpack_purepython\", help='Use less memory, but a bit more CPU power',\n                                 type='bool', choices=[True, False], default=False)\n        self.parser.add_argument(\"--fix_float_decimals\", help='Fix content.json modification date float precision on verification',\n                                 type='bool', choices=[True, False], default=fix_float_decimals)\n        self.parser.add_argument(\"--db_mode\", choices=[\"speed\", \"security\"], default=\"speed\")\n        self.parser.add_argument(\"--download_optional\", choices=[\"manual\", \"auto\"], default=\"manual\")\n\n        self.parser.add_argument('--coffeescript_compiler', help='Coffeescript compiler for developing', default=coffeescript,\n                                 metavar='executable_path')\n\n        self.parser.add_argument('--tor', help='enable: Use only for Tor peers, always: Use Tor for every connection', choices=[\"disable\", \"enable\", \"always\"], default='enable')\n        self.parser.add_argument('--tor_controller', help='Tor controller address', metavar='ip:port', default='127.0.0.1:9051')\n        self.parser.add_argument('--tor_proxy', help='Tor proxy address', metavar='ip:port', default='127.0.0.1:9050')\n        self.parser.add_argument('--tor_password', help='Tor controller password', metavar='password')\n        self.parser.add_argument('--tor_hs_limit', help='Maximum number of hidden services', metavar='limit', type=int, default=10)\n\n        self.parser.add_argument('--version', action='version', version='ZeroNet %s r%s' % (self.version, self.rev))\n        self.parser.add_argument('--end', help='Stop multi value argument parsing', action='store_true')\n\n        return self.parser\n\n    def loadTrackersFile(self):\n        self.trackers = []\n        for tracker in open(self.trackers_file):\n            if \"://\" in tracker:\n                self.trackers.append(tracker.strip())\n\n    \n    def getActionArguments(self):\n        back = {}\n        arguments = self.parser._subparsers._group_actions[0].choices[self.action]._actions[1:]  \n        for argument in arguments:\n            back[argument.dest] = getattr(self, argument.dest)\n        return back\n\n    \n    def getAction(self, argv):\n        actions = [action.choices.keys() for action in self.parser._actions if action.dest == \"action\"][0]  \n        found_action = False\n        for action in actions:  \n            if action in argv:\n                found_action = action\n                break\n        return found_action\n\n    \n    def moveUnknownToEnd(self, argv, default_action):\n        valid_actions = sum([action.option_strings for action in self.parser._actions], [])\n        valid_parameters = []\n        plugin_parameters = []\n        plugin = False\n        for arg in argv:\n            if arg.startswith(\"--\"):\n                if arg not in valid_actions:\n                    plugin = True\n                else:\n                    plugin = False\n            elif arg == default_action:\n                plugin = False\n\n            if plugin:\n                plugin_parameters.append(arg)\n            else:\n                valid_parameters.append(arg)\n        return valid_parameters + plugin_parameters\n\n    \n    def parse(self, silent=False, parse_config=True):\n        if silent:  \n            original_print_message = self.parser._print_message\n            original_exit = self.parser.exit\n\n            def silencer(parser, function_name):\n                parser.exited = True\n                return None\n            self.parser.exited = False\n            self.parser._print_message = lambda *args, **kwargs: silencer(self.parser, \"_print_message\")\n            self.parser.exit = lambda *args, **kwargs: silencer(self.parser, \"exit\")\n\n        argv = self.argv[:]  \n        self.parseCommandline(argv, silent)  \n        self.setAttributes()\n        if parse_config:\n            argv = self.parseConfig(argv)  \n\n        self.parseCommandline(argv, silent)  \n        self.setAttributes()\n\n        if not silent:\n            if self.fileserver_ip != \"*\" and self.fileserver_ip not in self.ip_local:\n                self.ip_local.append(self.fileserver_ip)\n\n        if silent:  \n            if self.parser.exited and self.action == \"main\":  \n                self.action = None\n            self.parser._print_message = original_print_message\n            self.parser.exit = original_exit\n\n    \n    def parseCommandline(self, argv, silent=False):\n        \n        action = self.getAction(argv)\n        if not action:\n            argv.append(\"--end\")\n            argv.append(\"main\")\n            action = \"main\"\n        argv = self.moveUnknownToEnd(argv, action)\n        if silent:\n            res = self.parser.parse_known_args(argv[1:])\n            if res:\n                self.arguments = res[0]\n            else:\n                self.arguments = {}\n        else:\n            self.arguments = self.parser.parse_args(argv[1:])\n\n    \n    def parseConfig(self, argv):\n        \n        if \"--config_file\" in argv:\n            self.config_file = argv[argv.index(\"--config_file\") + 1]\n        \n        if os.path.isfile(self.config_file):\n            config = ConfigParser.ConfigParser(allow_no_value=True)\n            config.read(self.config_file)\n            for section in config.sections():\n                for key, val in config.items(section):\n                    if section != \"global\":  \n                        key = section + \"_\" + key\n                    if val:\n                        for line in val.strip().split(\"\\n\"):  \n                            argv.insert(1, line)\n                    argv.insert(1, \"--%s\" % key)\n        return argv\n\n    \n    def setAttributes(self):\n        \n        if self.arguments:\n            args = vars(self.arguments)\n            for key, val in args.items():\n                setattr(self, key, val)\n\n    def loadPlugins(self):\n        from Plugin import PluginManager\n\n        @PluginManager.acceptPlugins\n        class ConfigPlugin(object):\n            def __init__(self, config):\n                self.parser = config.parser\n                self.createArguments()\n\n            def createArguments(self):\n                pass\n\n        ConfigPlugin(self)\n\n    def saveValue(self, key, value):\n        if not os.path.isfile(self.config_file):\n            content = \"\"\n        else:\n            content = open(self.config_file).read()\n        lines = content.splitlines()\n\n        global_line_i = None\n        key_line_i = None\n        i = 0\n        for line in lines:\n            if line.strip() == \"[global]\":\n                global_line_i = i\n            if line.startswith(key + \" = \"):\n                key_line_i = i\n            i += 1\n\n        if value is None:  \n            if key_line_i:\n                del lines[key_line_i]\n        else:  \n            new_line = \"%s = %s\" % (key, str(value).replace(\"\\n\", \"\").replace(\"\\r\", \"\"))\n            if key_line_i:  \n                lines[key_line_i] = new_line\n            elif global_line_i is None:  \n                lines.append(\"[global]\")\n                lines.append(new_line)\n            else:  \n                lines.insert(global_line_i + 1, new_line)\n\n        open(self.config_file, \"w\").write(\"\\n\".join(lines))\n\n    def getServerInfo(self):\n        from Plugin import PluginManager\n\n        info = {\n            \"platform\": sys.platform,\n            \"fileserver_ip\": self.fileserver_ip,\n            \"fileserver_port\": self.fileserver_port,\n            \"ui_ip\": self.ui_ip,\n            \"ui_port\": self.ui_port,\n            \"version\": self.version,\n            \"rev\": self.rev,\n            \"language\": self.language,\n            \"debug\": self.debug,\n            \"plugins\": PluginManager.plugin_manager.plugin_names,\n\n            \"log_dir\": os.path.abspath(self.log_dir),\n            \"data_dir\": os.path.abspath(self.data_dir),\n            \"src_dir\": os.path.dirname(os.path.abspath(__file__))\n        }\n\n        try:\n            info[\"ip_external\"] = sys.modules[\"main\"].file_server.port_opened\n            info[\"tor_enabled\"] = sys.modules[\"main\"].file_server.tor_manager.enabled\n            info[\"tor_status\"] = sys.modules[\"main\"].file_server.tor_manager.status\n        except:\n            pass\n\n        return info\n\nconfig = Config(sys.argv)\n", "comments": "  create parser    using argparse str output    convert string bool    create command line arguments   f36ca555bee6ba216b14d10f38c16f7769ff064e0e37d887603548cc2e64191d 15441      us ny    de    nl    fr    us la    fr    ru    platform specific    running zeronet app    runnig non writeable directory  put data application support    running writeable directory put data next  app    running exe source application support directory  put var files outside core dir    running non writeable location  e g   appimage    main    sitecreate    siteneedfile    sitedownload    sitesign    sitepublish    siteverify    dbrebuild    dbquery    peerping    peergetfile    peercmd    cryptsign    crypt verify    config parameters    find arguments specified current action    first   version    try find action argv    valid actions    see argv    move plugin parameters end argument list    parse arguments config file command line    don display messages quit unknown parameter    copy command line arguments    parse argv    add arguments config file    parse argv    restore original functions    argument parsing halted  start zeronet main action    parse command line arguments    find action specificed start    parse config file    find config file path parameters    load config file    if global prefix key section    allow multi line values    expose arguments class attributes    set attributes arguments    delete line    add   update    already config  change line    no global section yet  append end file    has global section  append line ", "content": "import argparse\nimport sys\nimport os\nimport locale\nimport re\nimport ConfigParser\n\n\nclass Config(object):\n\n    def __init__(self, argv):\n        self.version = \"0.6.2\"\n        self.rev = 3367\n        self.argv = argv\n        self.action = None\n        self.config_file = \"zeronet.conf\"\n        self.createParser()\n        self.createArguments()\n\n    def createParser(self):\n        # Create parser\n        self.parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n        self.parser.register('type', 'bool', self.strToBool)\n        self.subparsers = self.parser.add_subparsers(title=\"Action to perform\", dest=\"action\")\n\n    def __str__(self):\n        return str(self.arguments).replace(\"Namespace\", \"Config\")  # Using argparse str output\n\n    # Convert string to bool\n    def strToBool(self, v):\n        return v.lower() in (\"yes\", \"true\", \"t\", \"1\")\n\n    # Create command line arguments\n    def createArguments(self):\n        trackers = [\n            \"zero://boot3rdez4rzn36x.onion:15441\",\n            \"zero://zero.booth.moe#f36ca555bee6ba216b14d10f38c16f7769ff064e0e37d887603548cc2e64191d:15441\",  # US/NY\n            \"udp://tracker.coppersurfer.tk:6969\",  # DE\n            \"udp://tracker.leechers-paradise.org:6969\",  # NL\n            \"udp://9.rarbg.com:2710\",  # FR\n            \"http://tracker.city9x.com:2710/announce\",  # US/LA\n            \"http://0d.kebhana.mx:443/announce\",  # FR\n            \"http://retracker.spark-rostov.ru:80/announce\"  # RU\n        ]\n        # Platform specific\n        if sys.platform.startswith(\"win\"):\n            coffeescript = \"type %s | tools\\\\coffee\\\\coffee.cmd\"\n        else:\n            coffeescript = None\n\n        try:\n            language, enc = locale.getdefaultlocale()\n            language = language.split(\"_\")[0]\n        except Exception:\n            language = \"en\"\n\n        use_openssl = True\n\n        if repr(1483108852.565) != \"1483108852.565\":\n            fix_float_decimals = True\n        else:\n            fix_float_decimals = False\n\n        this_file = os.path.abspath(__file__).replace(\"\\\\\", \"/\").rstrip(\"cd\")\n\n        if this_file.endswith(\"/Contents/Resources/core/src/Config.py\"):\n            # Running as ZeroNet.app\n            if this_file.startswith(\"/Application\") or this_file.startswith(\"/private\") or this_file.startswith(os.path.expanduser(\"~/Library\")):\n                # Runnig from non-writeable directory, put data to Application Support\n                start_dir = os.path.expanduser(\"~/Library/Application Support/ZeroNet\").decode(sys.getfilesystemencoding())\n            else:\n                # Running from writeable directory put data next to .app\n                start_dir = re.sub(\"/[^/]+/Contents/Resources/core/src/Config.py\", \"\", this_file).decode(sys.getfilesystemencoding())\n            config_file = start_dir + \"/zeronet.conf\"\n            data_dir = start_dir + \"/data\"\n            log_dir = start_dir + \"/log\"\n        elif this_file.endswith(\"/core/src/Config.py\"):\n            # Running as exe or source is at Application Support directory, put var files to outside of core dir\n            start_dir = this_file.replace(\"/core/src/Config.py\", \"\").decode(sys.getfilesystemencoding())\n            config_file = start_dir + \"/zeronet.conf\"\n            data_dir = start_dir + \"/data\"\n            log_dir = start_dir + \"/log\"\n        elif this_file.endswith(\"usr/share/zeronet/src/Config.py\"):\n            # Running from non-writeable location, e.g., AppImage\n            start_dir = os.path.expanduser(\"~/ZeroNet\").decode(sys.getfilesystemencoding())\n            config_file = start_dir + \"/zeronet.conf\"\n            data_dir = start_dir + \"/data\"\n            log_dir = start_dir + \"/log\"\n        else:\n            config_file = \"zeronet.conf\"\n            data_dir = \"data\"\n            log_dir = \"log\"\n\n        ip_local = [\"127.0.0.1\"]\n\n        # Main\n        action = self.subparsers.add_parser(\"main\", help='Start UiServer and FileServer (default)')\n\n        # SiteCreate\n        action = self.subparsers.add_parser(\"siteCreate\", help='Create a new site')\n\n        # SiteNeedFile\n        action = self.subparsers.add_parser(\"siteNeedFile\", help='Get a file from site')\n        action.add_argument('address', help='Site address')\n        action.add_argument('inner_path', help='File inner path')\n\n        # SiteDownload\n        action = self.subparsers.add_parser(\"siteDownload\", help='Download a new site')\n        action.add_argument('address', help='Site address')\n\n        # SiteSign\n        action = self.subparsers.add_parser(\"siteSign\", help='Update and sign content.json: address [privatekey]')\n        action.add_argument('address', help='Site to sign')\n        action.add_argument('privatekey', help='Private key (default: ask on execute)', nargs='?')\n        action.add_argument('--inner_path', help='File you want to sign (default: content.json)',\n                            default=\"content.json\", metavar=\"inner_path\")\n        action.add_argument('--remove_missing_optional', help='Remove optional files that is not present in the directory', action='store_true')\n        action.add_argument('--publish', help='Publish site after the signing', action='store_true')\n\n        # SitePublish\n        action = self.subparsers.add_parser(\"sitePublish\", help='Publish site to other peers: address')\n        action.add_argument('address', help='Site to publish')\n        action.add_argument('peer_ip', help='Peer ip to publish (default: random peers ip from tracker)',\n                            default=None, nargs='?')\n        action.add_argument('peer_port', help='Peer port to publish (default: random peer port from tracker)',\n                            default=15441, nargs='?')\n        action.add_argument('--inner_path', help='Content.json you want to publish (default: content.json)',\n                            default=\"content.json\", metavar=\"inner_path\")\n\n        # SiteVerify\n        action = self.subparsers.add_parser(\"siteVerify\", help='Verify site files using sha512: address')\n        action.add_argument('address', help='Site to verify')\n\n        # dbRebuild\n        action = self.subparsers.add_parser(\"dbRebuild\", help='Rebuild site database cache')\n        action.add_argument('address', help='Site to rebuild')\n\n        # dbQuery\n        action = self.subparsers.add_parser(\"dbQuery\", help='Query site sql cache')\n        action.add_argument('address', help='Site to query')\n        action.add_argument('query', help='Sql query')\n\n        # PeerPing\n        action = self.subparsers.add_parser(\"peerPing\", help='Send Ping command to peer')\n        action.add_argument('peer_ip', help='Peer ip')\n        action.add_argument('peer_port', help='Peer port', nargs='?')\n\n        # PeerGetFile\n        action = self.subparsers.add_parser(\"peerGetFile\", help='Request and print a file content from peer')\n        action.add_argument('peer_ip', help='Peer ip')\n        action.add_argument('peer_port', help='Peer port')\n        action.add_argument('site', help='Site address')\n        action.add_argument('filename', help='File name to request')\n        action.add_argument('--benchmark', help='Request file 10x then displays the total time', action='store_true')\n\n        # PeerCmd\n        action = self.subparsers.add_parser(\"peerCmd\", help='Request and print a file content from peer')\n        action.add_argument('peer_ip', help='Peer ip')\n        action.add_argument('peer_port', help='Peer port')\n        action.add_argument('cmd', help='Command to execute')\n        action.add_argument('parameters', help='Parameters to command', nargs='?')\n\n        # CryptSign\n        action = self.subparsers.add_parser(\"cryptSign\", help='Sign message using Bitcoin private key')\n        action.add_argument('message', help='Message to sign')\n        action.add_argument('privatekey', help='Private key')\n\n        # Crypt Verify\n        action = self.subparsers.add_parser(\"cryptVerify\", help='Verify message using Bitcoin public address')\n        action.add_argument('message', help='Message to verify')\n        action.add_argument('sign', help='Signiture for message')\n        action.add_argument('address', help='Signer\\'s address')\n\n        action = self.subparsers.add_parser(\"getConfig\", help='Return json-encoded info')\n        action = self.subparsers.add_parser(\"testConnection\", help='Testing')\n        action = self.subparsers.add_parser(\"testAnnounce\", help='Testing')\n\n        # Config parameters\n        self.parser.add_argument('--verbose', help='More detailed logging', action='store_true')\n        self.parser.add_argument('--debug', help='Debug mode', action='store_true')\n        self.parser.add_argument('--silent', help='Disable logging to terminal output', action='store_true')\n        self.parser.add_argument('--debug_socket', help='Debug socket connections', action='store_true')\n\n        self.parser.add_argument('--batch', help=\"Batch mode (No interactive input for commands)\", action='store_true')\n\n        self.parser.add_argument('--config_file', help='Path of config file', default=config_file, metavar=\"path\")\n        self.parser.add_argument('--data_dir', help='Path of data directory', default=data_dir, metavar=\"path\")\n        self.parser.add_argument('--log_dir', help='Path of logging directory', default=log_dir, metavar=\"path\")\n        self.parser.add_argument('--log_level', help='Level of logging to file', default=\"DEBUG\", choices=[\"DEBUG\", \"INFO\", \"ERROR\"])\n\n        self.parser.add_argument('--language', help='Web interface language', default=language, metavar='language')\n        self.parser.add_argument('--ui_ip', help='Web interface bind address', default=\"127.0.0.1\", metavar='ip')\n        self.parser.add_argument('--ui_port', help='Web interface bind port', default=43110, type=int, metavar='port')\n        self.parser.add_argument('--ui_restrict', help='Restrict web access', default=False, metavar='ip', nargs='*')\n        self.parser.add_argument('--ui_host', help='Allow access using this hosts', metavar='host', nargs='*')\n\n        self.parser.add_argument('--open_browser', help='Open homepage in web browser automatically',\n                                 nargs='?', const=\"default_browser\", metavar='browser_name')\n        self.parser.add_argument('--homepage', help='Web interface Homepage', default='1HeLLo4uzjaLetFx6NH3PMwFP3qbRbTf3D',\n                                 metavar='address')\n        self.parser.add_argument('--updatesite', help='Source code update site', default='1UPDatEDxnvHDo7TXvq6AEBARfNkyfxsp',\n                                 metavar='address')\n        self.parser.add_argument('--size_limit', help='Default site size limit in MB', default=10, type=int, metavar='limit')\n        self.parser.add_argument('--file_size_limit', help='Maximum per file size limit in MB', default=10, type=int, metavar='limit')\n        self.parser.add_argument('--connected_limit', help='Max connected peer per site', default=8, type=int, metavar='connected_limit')\n        self.parser.add_argument('--global_connected_limit', help='Max connections', default=512, type=int, metavar='global_connected_limit')\n        self.parser.add_argument('--workers', help='Download workers per site', default=5, type=int, metavar='workers')\n\n        self.parser.add_argument('--fileserver_ip', help='FileServer bind address', default=\"*\", metavar='ip')\n        self.parser.add_argument('--fileserver_port', help='FileServer bind port', default=15441, type=int, metavar='port')\n        self.parser.add_argument('--ip_local', help='My local ips', default=ip_local, type=int, metavar='ip', nargs='*')\n\n        self.parser.add_argument('--disable_udp', help='Disable UDP connections', action='store_true')\n        self.parser.add_argument('--proxy', help='Socks proxy address', metavar='ip:port')\n        self.parser.add_argument('--bind', help='Bind outgoing sockets to this address', metavar='ip')\n        self.parser.add_argument('--ip_external', help='Set reported external ip (tested on start if None)', metavar='ip')\n        self.parser.add_argument('--trackers', help='Bootstraping torrent trackers', default=trackers, metavar='protocol://address', nargs='*')\n        self.parser.add_argument('--trackers_file', help='Load torrent trackers dynamically from a file', default=False, metavar='path')\n        self.parser.add_argument('--use_openssl', help='Use OpenSSL liblary for speedup',\n                                 type='bool', choices=[True, False], default=use_openssl)\n        self.parser.add_argument('--disable_db', help='Disable database updating', action='store_true')\n        self.parser.add_argument('--disable_encryption', help='Disable connection encryption', action='store_true')\n        self.parser.add_argument('--force_encryption', help=\"Enforce encryption to all peer connections\", action='store_true')\n        self.parser.add_argument('--disable_sslcompression', help='Disable SSL compression to save memory',\n                                 type='bool', choices=[True, False], default=True)\n        self.parser.add_argument('--keep_ssl_cert', help='Disable new SSL cert generation on startup', action='store_true')\n        self.parser.add_argument('--max_files_opened', help='Change maximum opened files allowed by OS to this value on startup',\n                                 default=2048, type=int, metavar='limit')\n        self.parser.add_argument('--stack_size', help='Change thread stack size', default=None, type=int, metavar='thread_stack_size')\n        self.parser.add_argument('--use_tempfiles', help='Use temporary files when downloading (experimental)',\n                                 type='bool', choices=[True, False], default=False)\n        self.parser.add_argument('--stream_downloads', help='Stream download directly to files (experimental)',\n                                 type='bool', choices=[True, False], default=False)\n        self.parser.add_argument(\"--msgpack_purepython\", help='Use less memory, but a bit more CPU power',\n                                 type='bool', choices=[True, False], default=False)\n        self.parser.add_argument(\"--fix_float_decimals\", help='Fix content.json modification date float precision on verification',\n                                 type='bool', choices=[True, False], default=fix_float_decimals)\n        self.parser.add_argument(\"--db_mode\", choices=[\"speed\", \"security\"], default=\"speed\")\n        self.parser.add_argument(\"--download_optional\", choices=[\"manual\", \"auto\"], default=\"manual\")\n\n        self.parser.add_argument('--coffeescript_compiler', help='Coffeescript compiler for developing', default=coffeescript,\n                                 metavar='executable_path')\n\n        self.parser.add_argument('--tor', help='enable: Use only for Tor peers, always: Use Tor for every connection', choices=[\"disable\", \"enable\", \"always\"], default='enable')\n        self.parser.add_argument('--tor_controller', help='Tor controller address', metavar='ip:port', default='127.0.0.1:9051')\n        self.parser.add_argument('--tor_proxy', help='Tor proxy address', metavar='ip:port', default='127.0.0.1:9050')\n        self.parser.add_argument('--tor_password', help='Tor controller password', metavar='password')\n        self.parser.add_argument('--tor_hs_limit', help='Maximum number of hidden services', metavar='limit', type=int, default=10)\n\n        self.parser.add_argument('--version', action='version', version='ZeroNet %s r%s' % (self.version, self.rev))\n        self.parser.add_argument('--end', help='Stop multi value argument parsing', action='store_true')\n\n        return self.parser\n\n    def loadTrackersFile(self):\n        self.trackers = []\n        for tracker in open(self.trackers_file):\n            if \"://\" in tracker:\n                self.trackers.append(tracker.strip())\n\n    # Find arguments specified for current action\n    def getActionArguments(self):\n        back = {}\n        arguments = self.parser._subparsers._group_actions[0].choices[self.action]._actions[1:]  # First is --version\n        for argument in arguments:\n            back[argument.dest] = getattr(self, argument.dest)\n        return back\n\n    # Try to find action from argv\n    def getAction(self, argv):\n        actions = [action.choices.keys() for action in self.parser._actions if action.dest == \"action\"][0]  # Valid actions\n        found_action = False\n        for action in actions:  # See if any in argv\n            if action in argv:\n                found_action = action\n                break\n        return found_action\n\n    # Move plugin parameters to end of argument list\n    def moveUnknownToEnd(self, argv, default_action):\n        valid_actions = sum([action.option_strings for action in self.parser._actions], [])\n        valid_parameters = []\n        plugin_parameters = []\n        plugin = False\n        for arg in argv:\n            if arg.startswith(\"--\"):\n                if arg not in valid_actions:\n                    plugin = True\n                else:\n                    plugin = False\n            elif arg == default_action:\n                plugin = False\n\n            if plugin:\n                plugin_parameters.append(arg)\n            else:\n                valid_parameters.append(arg)\n        return valid_parameters + plugin_parameters\n\n    # Parse arguments from config file and command line\n    def parse(self, silent=False, parse_config=True):\n        if silent:  # Don't display messages or quit on unknown parameter\n            original_print_message = self.parser._print_message\n            original_exit = self.parser.exit\n\n            def silencer(parser, function_name):\n                parser.exited = True\n                return None\n            self.parser.exited = False\n            self.parser._print_message = lambda *args, **kwargs: silencer(self.parser, \"_print_message\")\n            self.parser.exit = lambda *args, **kwargs: silencer(self.parser, \"exit\")\n\n        argv = self.argv[:]  # Copy command line arguments\n        self.parseCommandline(argv, silent)  # Parse argv\n        self.setAttributes()\n        if parse_config:\n            argv = self.parseConfig(argv)  # Add arguments from config file\n\n        self.parseCommandline(argv, silent)  # Parse argv\n        self.setAttributes()\n\n        if not silent:\n            if self.fileserver_ip != \"*\" and self.fileserver_ip not in self.ip_local:\n                self.ip_local.append(self.fileserver_ip)\n\n        if silent:  # Restore original functions\n            if self.parser.exited and self.action == \"main\":  # Argument parsing halted, don't start ZeroNet with main action\n                self.action = None\n            self.parser._print_message = original_print_message\n            self.parser.exit = original_exit\n\n    # Parse command line arguments\n    def parseCommandline(self, argv, silent=False):\n        # Find out if action is specificed on start\n        action = self.getAction(argv)\n        if not action:\n            argv.append(\"--end\")\n            argv.append(\"main\")\n            action = \"main\"\n        argv = self.moveUnknownToEnd(argv, action)\n        if silent:\n            res = self.parser.parse_known_args(argv[1:])\n            if res:\n                self.arguments = res[0]\n            else:\n                self.arguments = {}\n        else:\n            self.arguments = self.parser.parse_args(argv[1:])\n\n    # Parse config file\n    def parseConfig(self, argv):\n        # Find config file path from parameters\n        if \"--config_file\" in argv:\n            self.config_file = argv[argv.index(\"--config_file\") + 1]\n        # Load config file\n        if os.path.isfile(self.config_file):\n            config = ConfigParser.ConfigParser(allow_no_value=True)\n            config.read(self.config_file)\n            for section in config.sections():\n                for key, val in config.items(section):\n                    if section != \"global\":  # If not global prefix key with section\n                        key = section + \"_\" + key\n                    if val:\n                        for line in val.strip().split(\"\\n\"):  # Allow multi-line values\n                            argv.insert(1, line)\n                    argv.insert(1, \"--%s\" % key)\n        return argv\n\n    # Expose arguments as class attributes\n    def setAttributes(self):\n        # Set attributes from arguments\n        if self.arguments:\n            args = vars(self.arguments)\n            for key, val in args.items():\n                setattr(self, key, val)\n\n    def loadPlugins(self):\n        from Plugin import PluginManager\n\n        @PluginManager.acceptPlugins\n        class ConfigPlugin(object):\n            def __init__(self, config):\n                self.parser = config.parser\n                self.createArguments()\n\n            def createArguments(self):\n                pass\n\n        ConfigPlugin(self)\n\n    def saveValue(self, key, value):\n        if not os.path.isfile(self.config_file):\n            content = \"\"\n        else:\n            content = open(self.config_file).read()\n        lines = content.splitlines()\n\n        global_line_i = None\n        key_line_i = None\n        i = 0\n        for line in lines:\n            if line.strip() == \"[global]\":\n                global_line_i = i\n            if line.startswith(key + \" = \"):\n                key_line_i = i\n            i += 1\n\n        if value is None:  # Delete line\n            if key_line_i:\n                del lines[key_line_i]\n        else:  # Add / update\n            new_line = \"%s = %s\" % (key, str(value).replace(\"\\n\", \"\").replace(\"\\r\", \"\"))\n            if key_line_i:  # Already in the config, change the line\n                lines[key_line_i] = new_line\n            elif global_line_i is None:  # No global section yet, append to end of file\n                lines.append(\"[global]\")\n                lines.append(new_line)\n            else:  # Has global section, append the line after it\n                lines.insert(global_line_i + 1, new_line)\n\n        open(self.config_file, \"w\").write(\"\\n\".join(lines))\n\n    def getServerInfo(self):\n        from Plugin import PluginManager\n\n        info = {\n            \"platform\": sys.platform,\n            \"fileserver_ip\": self.fileserver_ip,\n            \"fileserver_port\": self.fileserver_port,\n            \"ui_ip\": self.ui_ip,\n            \"ui_port\": self.ui_port,\n            \"version\": self.version,\n            \"rev\": self.rev,\n            \"language\": self.language,\n            \"debug\": self.debug,\n            \"plugins\": PluginManager.plugin_manager.plugin_names,\n\n            \"log_dir\": os.path.abspath(self.log_dir),\n            \"data_dir\": os.path.abspath(self.data_dir),\n            \"src_dir\": os.path.dirname(os.path.abspath(__file__))\n        }\n\n        try:\n            info[\"ip_external\"] = sys.modules[\"main\"].file_server.port_opened\n            info[\"tor_enabled\"] = sys.modules[\"main\"].file_server.tor_manager.enabled\n            info[\"tor_status\"] = sys.modules[\"main\"].file_server.tor_manager.status\n        except:\n            pass\n\n        return info\n\nconfig = Config(sys.argv)\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "Config.py", "id": "cd29c17e5e9c8d5ec4330d3336c13137", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Config.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}