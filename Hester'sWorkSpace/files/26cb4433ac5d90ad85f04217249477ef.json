{"author": "localstack", "code": "import json\nimport base64\nimport boto3.dynamodb.types\nfrom io import BytesIO\nfrom localstack.utils.aws import aws_stack\nfrom localstack.utils.common import to_str, to_bytes\n\nTEST_BUCKET_NAME = 'test_bucket'\nKINESIS_STREAM_NAME = 'test_stream_1'\nMSG_BODY_RAISE_ERROR_FLAG = 'raise_error'\nMSG_BODY_MESSAGE_TARGET = 'message_target'\n\n\n\n\nclass TypeDeserializer(boto3.dynamodb.types.TypeDeserializer):\n    def _deserialize_n(self, value):\n        return float(value)\n\n    def _deserialize_b(self, value):\n        return value        \n\n\ndef handler(event, context):\n    \n\n    if 'httpMethod' in event:\n        \n        body = json.loads(event['body'])\n        body['pathParameters'] = event.get('pathParameters')\n        return {\n            'body': body,\n            'statusCode': body.get('return_status_code', 200),\n            'headers': body.get('return_headers', {})\n        }\n\n    if 'Records' not in event:\n        return event\n\n    raw_event_messages = []\n    for record in event['Records']:\n        \n        # \"NewImage\" (the new version of the full ddb document)\n        ddb_new_image = deserialize_event(record)\n\n        if MSG_BODY_RAISE_ERROR_FLAG in ddb_new_image.get('data', {}):\n            raise Exception('Test exception (this is intentional)')\n\n        \n        kinesis_record = {\n            'PartitionKey': 'key123',\n            'Data': json.dumps(ddb_new_image)\n        }\n\n        if MSG_BODY_MESSAGE_TARGET in ddb_new_image.get('data', {}):\n            forwarding_target = ddb_new_image['data'][MSG_BODY_MESSAGE_TARGET]\n            target_name = forwarding_target.split(':')[-1]\n            if forwarding_target.startswith('kinesis:'):\n                ddb_new_image['data'][MSG_BODY_MESSAGE_TARGET] = 's3:/test_chain_result'\n                kinesis_record['Data'] = json.dumps(ddb_new_image['data'])\n                forward_event_to_target_stream(kinesis_record, target_name)\n            elif forwarding_target.startswith('s3:'):\n                s3_client = aws_stack.connect_to_service('s3')\n                test_data = to_bytes(json.dumps({'test_data': ddb_new_image['data']['test_data']}))\n                s3_client.upload_fileobj(BytesIO(test_data), TEST_BUCKET_NAME, target_name)\n        else:\n            raw_event_messages.append(kinesis_record)\n\n    \n    forward_events(raw_event_messages)\n\n\ndef deserialize_event(event):\n     \"NewImage\" (the new version of the full ddb document)\n    ddb = event.get('dynamodb')\n    if ddb:\n        ddb_deserializer = TypeDeserializer()\n        result = ddb_deserializer.deserialize({'M': ddb.get('NewImage')})\n        result['__action_type'] = event.get('eventName')\n        return result\n    kinesis = event.get('kinesis')\n    if kinesis:\n        assert kinesis['sequenceNumber']\n        kinesis['data'] = json.loads(to_str(base64.b64decode(kinesis['data'])))\n        return kinesis\n    return event.get('Sns')\n\n\ndef forward_events(records):\n    if not records:\n        return\n    kinesis = aws_stack.connect_to_service('kinesis')\n    kinesis.put_records(StreamName=KINESIS_STREAM_NAME, Records=records)\n\n\ndef forward_event_to_target_stream(record, stream_name):\n    kinesis = aws_stack.connect_to_service('kinesis')\n    kinesis.put_record(StreamName=stream_name, Data=record['Data'], PartitionKey=record['PartitionKey'])\n", "comments": "    generic event forwarder lambda         subclass boto typedeserializer dynamodb    adjust dynamodb stream format     already base64    looks like call aws proxy api gateway    deserialize python dictionary extract     newimage  (the new version full ddb document)    place raw event message document kinesis message format    forward messages kinesis    deserialize python dictionary extract  newimage  (the new version full ddb document) ", "content": "import json\nimport base64\nimport boto3.dynamodb.types\nfrom io import BytesIO\nfrom localstack.utils.aws import aws_stack\nfrom localstack.utils.common import to_str, to_bytes\n\nTEST_BUCKET_NAME = 'test_bucket'\nKINESIS_STREAM_NAME = 'test_stream_1'\nMSG_BODY_RAISE_ERROR_FLAG = 'raise_error'\nMSG_BODY_MESSAGE_TARGET = 'message_target'\n\n\n# Subclass of boto's TypeDeserializer for DynamoDB\n# to adjust for DynamoDB Stream format.\nclass TypeDeserializer(boto3.dynamodb.types.TypeDeserializer):\n    def _deserialize_n(self, value):\n        return float(value)\n\n    def _deserialize_b(self, value):\n        return value        # already in Base64\n\n\ndef handler(event, context):\n    \"\"\" Generic event forwarder Lambda. \"\"\"\n\n    if 'httpMethod' in event:\n        # looks like this is a call from an AWS_PROXY API Gateway\n        body = json.loads(event['body'])\n        body['pathParameters'] = event.get('pathParameters')\n        return {\n            'body': body,\n            'statusCode': body.get('return_status_code', 200),\n            'headers': body.get('return_headers', {})\n        }\n\n    if 'Records' not in event:\n        return event\n\n    raw_event_messages = []\n    for record in event['Records']:\n        # Deserialize into Python dictionary and extract the\n        # \"NewImage\" (the new version of the full ddb document)\n        ddb_new_image = deserialize_event(record)\n\n        if MSG_BODY_RAISE_ERROR_FLAG in ddb_new_image.get('data', {}):\n            raise Exception('Test exception (this is intentional)')\n\n        # Place the raw event message document into the Kinesis message format\n        kinesis_record = {\n            'PartitionKey': 'key123',\n            'Data': json.dumps(ddb_new_image)\n        }\n\n        if MSG_BODY_MESSAGE_TARGET in ddb_new_image.get('data', {}):\n            forwarding_target = ddb_new_image['data'][MSG_BODY_MESSAGE_TARGET]\n            target_name = forwarding_target.split(':')[-1]\n            if forwarding_target.startswith('kinesis:'):\n                ddb_new_image['data'][MSG_BODY_MESSAGE_TARGET] = 's3:/test_chain_result'\n                kinesis_record['Data'] = json.dumps(ddb_new_image['data'])\n                forward_event_to_target_stream(kinesis_record, target_name)\n            elif forwarding_target.startswith('s3:'):\n                s3_client = aws_stack.connect_to_service('s3')\n                test_data = to_bytes(json.dumps({'test_data': ddb_new_image['data']['test_data']}))\n                s3_client.upload_fileobj(BytesIO(test_data), TEST_BUCKET_NAME, target_name)\n        else:\n            raw_event_messages.append(kinesis_record)\n\n    # Forward messages to Kinesis\n    forward_events(raw_event_messages)\n\n\ndef deserialize_event(event):\n    # Deserialize into Python dictionary and extract the \"NewImage\" (the new version of the full ddb document)\n    ddb = event.get('dynamodb')\n    if ddb:\n        ddb_deserializer = TypeDeserializer()\n        result = ddb_deserializer.deserialize({'M': ddb.get('NewImage')})\n        result['__action_type'] = event.get('eventName')\n        return result\n    kinesis = event.get('kinesis')\n    if kinesis:\n        assert kinesis['sequenceNumber']\n        kinesis['data'] = json.loads(to_str(base64.b64decode(kinesis['data'])))\n        return kinesis\n    return event.get('Sns')\n\n\ndef forward_events(records):\n    if not records:\n        return\n    kinesis = aws_stack.connect_to_service('kinesis')\n    kinesis.put_records(StreamName=KINESIS_STREAM_NAME, Records=records)\n\n\ndef forward_event_to_target_stream(record, stream_name):\n    kinesis = aws_stack.connect_to_service('kinesis')\n    kinesis.put_record(StreamName=stream_name, Data=record['Data'], PartitionKey=record['PartitionKey'])\n", "description": "\ud83d\udcbb  A fully functional local AWS cloud stack. Develop and test your cloud apps offline!", "file_name": "lambda_integration.py", "id": "26cb4433ac5d90ad85f04217249477ef", "language": "Python", "project_name": "localstack", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/localstack-localstack/localstack-localstack-865ec3a/tests/integration/lambdas/lambda_integration.py", "save_time": "", "source": "", "update_at": "2018-03-14T00:04:55Z", "url": "https://github.com/localstack/localstack", "wiki": true}