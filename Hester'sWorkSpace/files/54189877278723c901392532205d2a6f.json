{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\"\"\"Tests for astro_fc_model.AstroFCModel.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom astronet.astro_fc_model import astro_fc_model\nfrom astronet.astro_fc_model import configurations\nfrom astronet.ops import input_ops\nfrom astronet.ops import testing\nfrom astronet.util import configdict\n\n\nclass AstroFCModelTest(tf.test.TestCase):\n\n  def assertShapeEquals(self, shape, tensor_or_array):\n    \"\"\"Asserts that a Tensor or Numpy array has the expected shape.\n\n    Args:\n      shape: Numpy array or anything that can be converted to one.\n      tensor_or_array: tf.Tensor, tf.Variable, Numpy array or anything that can\n          be converted to one.\n    \"\"\"\n    if isinstance(tensor_or_array, (np.ndarray, np.generic)):\n      self.assertAllEqual(shape, tensor_or_array.shape)\n    elif isinstance(tensor_or_array, (tf.Tensor, tf.Variable)):\n      self.assertAllEqual(shape, tensor_or_array.shape.as_list())\n    else:\n      raise TypeError(\"tensor_or_array must be a Tensor or Numpy ndarray\")\n\n  def testOneTimeSeriesFeature(self):\n     Build config.\n    feature_spec = {\n        \"time_feature_1\": {\n            \"length\": 14,\n            \"is_time_series\": True,\n        }\n    }\n    hidden_spec = {\n        \"time_feature_1\": {\n            \"num_local_layers\": 2,\n            \"local_layer_size\": 20,\n            \"translation_delta\": 2,\n            \"pooling_type\": \"max\",\n            \"dropout_rate\": 0.5,\n        }\n    }\n    config = configurations.base()\n    config[\"inputs\"][\"features\"] = feature_spec\n    config[\"hparams\"][\"time_series_hidden\"] = hidden_spec\n    config = configdict.ConfigDict(config)\n\n     Build model.\n    features = input_ops.build_feature_placeholders(config.inputs.features)\n    labels = input_ops.build_labels_placeholder()\n    model = astro_fc_model.AstroFCModel(features, labels, config.hparams,\n                                        tf.estimator.ModeKeys.TRAIN)\n    model.build()\n\n     Validate Tensor shapes.\n    conv = testing.get_variable_by_name(\"time_feature_1_hidden/conv1d/kernel\")\n    self.assertShapeEquals((10, 1, 20), conv)\n\n    fc_1 = testing.get_variable_by_name(\n        \"time_feature_1_hidden/fully_connected_1/weights\")\n    self.assertShapeEquals((20, 20), fc_1)\n\n    self.assertItemsEqual([\"time_feature_1\"],\n                          model.time_series_hidden_layers.keys())\n    self.assertShapeEquals((None, 20),\n                           model.time_series_hidden_layers[\"time_feature_1\"])\n    self.assertEqual(len(model.aux_hidden_layers), 0)\n    self.assertIs(model.time_series_hidden_layers[\"time_feature_1\"],\n                  model.pre_logits_concat)\n\n     Execute the TensorFlow graph.\n    scaffold = tf.train.Scaffold()\n    scaffold.finalize()\n    with self.test_session() as sess:\n      sess.run([scaffold.init_op, scaffold.local_init_op])\n      step = sess.run(model.global_step)\n      self.assertEqual(0, step)\n\n       Fetch predictions.\n      features = testing.fake_features(feature_spec, batch_size=16)\n      labels = testing.fake_labels(config.hparams.output_dim, batch_size=16)\n      feed_dict = input_ops.prepare_feed_dict(model, features, labels)\n      predictions = sess.run(model.predictions, feed_dict=feed_dict)\n      self.assertShapeEquals((16, 1), predictions)\n\n  def testTwoTimeSeriesFeatures(self):\n     Build config.\n    feature_spec = {\n        \"time_feature_1\": {\n            \"length\": 20,\n            \"is_time_series\": True,\n        },\n        \"time_feature_2\": {\n            \"length\": 5,\n            \"is_time_series\": True,\n        },\n        \"aux_feature_1\": {\n            \"length\": 1,\n            \"is_time_series\": False,\n        },\n    }\n    hidden_spec = {\n        \"time_feature_1\": {\n            \"num_local_layers\": 1,\n            \"local_layer_size\": 20,\n            \"translation_delta\": 1,\n            \"pooling_type\": \"max\",\n            \"dropout_rate\": 0.5,\n        },\n        \"time_feature_2\": {\n            \"num_local_layers\": 2,\n            \"local_layer_size\": 7,\n            \"translation_delta\": 0,\n            \"dropout_rate\": 0,\n        }\n    }\n    config = configurations.base()\n    config[\"inputs\"][\"features\"] = feature_spec\n    config[\"hparams\"][\"time_series_hidden\"] = hidden_spec\n    config = configdict.ConfigDict(config)\n\n     Build model.\n    features = input_ops.build_feature_placeholders(config.inputs.features)\n    labels = input_ops.build_labels_placeholder()\n    model = astro_fc_model.AstroFCModel(features, labels, config.hparams,\n                                        tf.estimator.ModeKeys.TRAIN)\n    model.build()\n\n     Validate Tensor shapes.\n    conv = testing.get_variable_by_name(\"time_feature_1_hidden/conv1d/kernel\")\n    self.assertShapeEquals((18, 1, 20), conv)\n\n    fc_1 = testing.get_variable_by_name(\n        \"time_feature_2_hidden/fully_connected_1/weights\")\n    self.assertShapeEquals((5, 7), fc_1)\n\n    fc_2 = testing.get_variable_by_name(\n        \"time_feature_2_hidden/fully_connected_2/weights\")\n    self.assertShapeEquals((7, 7), fc_2)\n\n    self.assertItemsEqual([\"time_feature_1\", \"time_feature_2\"],\n                          model.time_series_hidden_layers.keys())\n    self.assertShapeEquals((None, 20),\n                           model.time_series_hidden_layers[\"time_feature_1\"])\n    self.assertShapeEquals((None, 7),\n                           model.time_series_hidden_layers[\"time_feature_2\"])\n    self.assertItemsEqual([\"aux_feature_1\"], model.aux_hidden_layers.keys())\n    self.assertIs(model.aux_features[\"aux_feature_1\"],\n                  model.aux_hidden_layers[\"aux_feature_1\"])\n    self.assertShapeEquals((None, 28), model.pre_logits_concat)\n\n     Execute the TensorFlow graph.\n    scaffold = tf.train.Scaffold()\n    scaffold.finalize()\n    with self.test_session() as sess:\n      sess.run([scaffold.init_op, scaffold.local_init_op])\n      step = sess.run(model.global_step)\n      self.assertEqual(0, step)\n\n       Fetch predictions.\n      features = testing.fake_features(feature_spec, batch_size=16)\n      labels = testing.fake_labels(config.hparams.output_dim, batch_size=16)\n      feed_dict = input_ops.prepare_feed_dict(model, features, labels)\n      predictions = sess.run(model.predictions, feed_dict=feed_dict)\n      self.assertShapeEquals((16, 1), predictions)\n\n\nif __name__ == \"__main__\":\n  tf.test.main()\n", "comments": "   tests astro fc model astrofcmodel        future   import absolute import   future   import division   future   import print function  import numpy np import tensorflow tf  astronet astro fc model import astro fc model astronet astro fc model import configurations astronet ops import input ops astronet ops import testing astronet util import configdict   class astrofcmodeltest(tf test testcase)     def assertshapeequals(self  shape  tensor array)         asserts tensor numpy array expected shape       args        shape  numpy array anything converted one        tensor array  tf tensor  tf variable  numpy array anything           converted one             copyright 2018 the tensorflow authors        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     build config     build model     validate tensor shapes     execute tensorflow graph     fetch predictions     build config     build model     validate tensor shapes     execute tensorflow graph     fetch predictions  ", "content": "# Copyright 2018 The TensorFlow Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\"\"\"Tests for astro_fc_model.AstroFCModel.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom astronet.astro_fc_model import astro_fc_model\nfrom astronet.astro_fc_model import configurations\nfrom astronet.ops import input_ops\nfrom astronet.ops import testing\nfrom astronet.util import configdict\n\n\nclass AstroFCModelTest(tf.test.TestCase):\n\n  def assertShapeEquals(self, shape, tensor_or_array):\n    \"\"\"Asserts that a Tensor or Numpy array has the expected shape.\n\n    Args:\n      shape: Numpy array or anything that can be converted to one.\n      tensor_or_array: tf.Tensor, tf.Variable, Numpy array or anything that can\n          be converted to one.\n    \"\"\"\n    if isinstance(tensor_or_array, (np.ndarray, np.generic)):\n      self.assertAllEqual(shape, tensor_or_array.shape)\n    elif isinstance(tensor_or_array, (tf.Tensor, tf.Variable)):\n      self.assertAllEqual(shape, tensor_or_array.shape.as_list())\n    else:\n      raise TypeError(\"tensor_or_array must be a Tensor or Numpy ndarray\")\n\n  def testOneTimeSeriesFeature(self):\n    # Build config.\n    feature_spec = {\n        \"time_feature_1\": {\n            \"length\": 14,\n            \"is_time_series\": True,\n        }\n    }\n    hidden_spec = {\n        \"time_feature_1\": {\n            \"num_local_layers\": 2,\n            \"local_layer_size\": 20,\n            \"translation_delta\": 2,\n            \"pooling_type\": \"max\",\n            \"dropout_rate\": 0.5,\n        }\n    }\n    config = configurations.base()\n    config[\"inputs\"][\"features\"] = feature_spec\n    config[\"hparams\"][\"time_series_hidden\"] = hidden_spec\n    config = configdict.ConfigDict(config)\n\n    # Build model.\n    features = input_ops.build_feature_placeholders(config.inputs.features)\n    labels = input_ops.build_labels_placeholder()\n    model = astro_fc_model.AstroFCModel(features, labels, config.hparams,\n                                        tf.estimator.ModeKeys.TRAIN)\n    model.build()\n\n    # Validate Tensor shapes.\n    conv = testing.get_variable_by_name(\"time_feature_1_hidden/conv1d/kernel\")\n    self.assertShapeEquals((10, 1, 20), conv)\n\n    fc_1 = testing.get_variable_by_name(\n        \"time_feature_1_hidden/fully_connected_1/weights\")\n    self.assertShapeEquals((20, 20), fc_1)\n\n    self.assertItemsEqual([\"time_feature_1\"],\n                          model.time_series_hidden_layers.keys())\n    self.assertShapeEquals((None, 20),\n                           model.time_series_hidden_layers[\"time_feature_1\"])\n    self.assertEqual(len(model.aux_hidden_layers), 0)\n    self.assertIs(model.time_series_hidden_layers[\"time_feature_1\"],\n                  model.pre_logits_concat)\n\n    # Execute the TensorFlow graph.\n    scaffold = tf.train.Scaffold()\n    scaffold.finalize()\n    with self.test_session() as sess:\n      sess.run([scaffold.init_op, scaffold.local_init_op])\n      step = sess.run(model.global_step)\n      self.assertEqual(0, step)\n\n      # Fetch predictions.\n      features = testing.fake_features(feature_spec, batch_size=16)\n      labels = testing.fake_labels(config.hparams.output_dim, batch_size=16)\n      feed_dict = input_ops.prepare_feed_dict(model, features, labels)\n      predictions = sess.run(model.predictions, feed_dict=feed_dict)\n      self.assertShapeEquals((16, 1), predictions)\n\n  def testTwoTimeSeriesFeatures(self):\n    # Build config.\n    feature_spec = {\n        \"time_feature_1\": {\n            \"length\": 20,\n            \"is_time_series\": True,\n        },\n        \"time_feature_2\": {\n            \"length\": 5,\n            \"is_time_series\": True,\n        },\n        \"aux_feature_1\": {\n            \"length\": 1,\n            \"is_time_series\": False,\n        },\n    }\n    hidden_spec = {\n        \"time_feature_1\": {\n            \"num_local_layers\": 1,\n            \"local_layer_size\": 20,\n            \"translation_delta\": 1,\n            \"pooling_type\": \"max\",\n            \"dropout_rate\": 0.5,\n        },\n        \"time_feature_2\": {\n            \"num_local_layers\": 2,\n            \"local_layer_size\": 7,\n            \"translation_delta\": 0,\n            \"dropout_rate\": 0,\n        }\n    }\n    config = configurations.base()\n    config[\"inputs\"][\"features\"] = feature_spec\n    config[\"hparams\"][\"time_series_hidden\"] = hidden_spec\n    config = configdict.ConfigDict(config)\n\n    # Build model.\n    features = input_ops.build_feature_placeholders(config.inputs.features)\n    labels = input_ops.build_labels_placeholder()\n    model = astro_fc_model.AstroFCModel(features, labels, config.hparams,\n                                        tf.estimator.ModeKeys.TRAIN)\n    model.build()\n\n    # Validate Tensor shapes.\n    conv = testing.get_variable_by_name(\"time_feature_1_hidden/conv1d/kernel\")\n    self.assertShapeEquals((18, 1, 20), conv)\n\n    fc_1 = testing.get_variable_by_name(\n        \"time_feature_2_hidden/fully_connected_1/weights\")\n    self.assertShapeEquals((5, 7), fc_1)\n\n    fc_2 = testing.get_variable_by_name(\n        \"time_feature_2_hidden/fully_connected_2/weights\")\n    self.assertShapeEquals((7, 7), fc_2)\n\n    self.assertItemsEqual([\"time_feature_1\", \"time_feature_2\"],\n                          model.time_series_hidden_layers.keys())\n    self.assertShapeEquals((None, 20),\n                           model.time_series_hidden_layers[\"time_feature_1\"])\n    self.assertShapeEquals((None, 7),\n                           model.time_series_hidden_layers[\"time_feature_2\"])\n    self.assertItemsEqual([\"aux_feature_1\"], model.aux_hidden_layers.keys())\n    self.assertIs(model.aux_features[\"aux_feature_1\"],\n                  model.aux_hidden_layers[\"aux_feature_1\"])\n    self.assertShapeEquals((None, 28), model.pre_logits_concat)\n\n    # Execute the TensorFlow graph.\n    scaffold = tf.train.Scaffold()\n    scaffold.finalize()\n    with self.test_session() as sess:\n      sess.run([scaffold.init_op, scaffold.local_init_op])\n      step = sess.run(model.global_step)\n      self.assertEqual(0, step)\n\n      # Fetch predictions.\n      features = testing.fake_features(feature_spec, batch_size=16)\n      labels = testing.fake_labels(config.hparams.output_dim, batch_size=16)\n      feed_dict = input_ops.prepare_feed_dict(model, features, labels)\n      predictions = sess.run(model.predictions, feed_dict=feed_dict)\n      self.assertShapeEquals((16, 1), predictions)\n\n\nif __name__ == \"__main__\":\n  tf.test.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "astro_fc_model_test.py", "id": "54189877278723c901392532205d2a6f", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/astronet/astronet/astro_fc_model/astro_fc_model_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}