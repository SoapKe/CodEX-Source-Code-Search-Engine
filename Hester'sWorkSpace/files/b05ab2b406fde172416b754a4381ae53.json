{"author": "ansible", "code": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nimport pytest\n\nfrom oneview_module_loader import OneViewModuleBase\nfrom ansible.modules.remote_management.oneview.oneview_datacenter_facts import DatacenterFactsModule\nfrom hpe_test_utils import FactsParamsTest\n\nPARAMS_GET_CONNECTED = dict(\n    config='config.json',\n    name=\"MyDatacenter\",\n    options=['visualContent']\n)\n\n\n@pytest.mark.resource('datacenters')\nclass TestDatacenterFactsModule(FactsParamsTest):\n    @pytest.fixture(autouse=True)\n    def setUp(self, mock_ansible_module, mock_ov_client):\n        self.resource = mock_ov_client.datacenters\n        self.mock_ansible_module = mock_ansible_module\n        self.mock_ov_client = mock_ov_client\n\n    def test_should_get_all_datacenters(self):\n        self.resource.get_all.return_value = {\"name\": \"Data Center Name\"}\n\n        self.mock_ansible_module.params = dict(config='config.json',)\n\n        DatacenterFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(datacenters=({\"name\": \"Data Center Name\"}))\n        )\n\n    def test_should_get_datacenter_by_name(self):\n        self.resource.get_by.return_value = [{\"name\": \"Data Center Name\"}]\n\n        self.mock_ansible_module.params = dict(config='config.json', name=\"MyDatacenter\")\n\n        DatacenterFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(datacenters=([{\"name\": \"Data Center Name\"}]))\n        )\n\n    def test_should_get_datacenter_visual_content(self):\n        self.resource.get_by.return_value = [{\"name\": \"Data Center Name\", \"uri\": \"/rest/datacenter/id\"}]\n\n        self.resource.get_visual_content.return_value = {\n            \"name\": \"Visual Content\"}\n\n        self.mock_ansible_module.params = PARAMS_GET_CONNECTED\n\n        DatacenterFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts={'datacenter_visual_content': {'name': 'Visual Content'},\n                           'datacenters': [{'name': 'Data Center Name', 'uri': '/rest/datacenter/id'}]}\n        )\n\n    def test_should_get_none_datacenter_visual_content(self):\n        self.resource.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_GET_CONNECTED\n\n        DatacenterFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts={'datacenter_visual_content': None,\n                           'datacenters': []}\n        )\n", "comments": "  copyright (c) 2016 2017 hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nimport pytest\n\nfrom oneview_module_loader import OneViewModuleBase\nfrom ansible.modules.remote_management.oneview.oneview_datacenter_facts import DatacenterFactsModule\nfrom hpe_test_utils import FactsParamsTest\n\nPARAMS_GET_CONNECTED = dict(\n    config='config.json',\n    name=\"MyDatacenter\",\n    options=['visualContent']\n)\n\n\n@pytest.mark.resource('datacenters')\nclass TestDatacenterFactsModule(FactsParamsTest):\n    @pytest.fixture(autouse=True)\n    def setUp(self, mock_ansible_module, mock_ov_client):\n        self.resource = mock_ov_client.datacenters\n        self.mock_ansible_module = mock_ansible_module\n        self.mock_ov_client = mock_ov_client\n\n    def test_should_get_all_datacenters(self):\n        self.resource.get_all.return_value = {\"name\": \"Data Center Name\"}\n\n        self.mock_ansible_module.params = dict(config='config.json',)\n\n        DatacenterFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(datacenters=({\"name\": \"Data Center Name\"}))\n        )\n\n    def test_should_get_datacenter_by_name(self):\n        self.resource.get_by.return_value = [{\"name\": \"Data Center Name\"}]\n\n        self.mock_ansible_module.params = dict(config='config.json', name=\"MyDatacenter\")\n\n        DatacenterFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(datacenters=([{\"name\": \"Data Center Name\"}]))\n        )\n\n    def test_should_get_datacenter_visual_content(self):\n        self.resource.get_by.return_value = [{\"name\": \"Data Center Name\", \"uri\": \"/rest/datacenter/id\"}]\n\n        self.resource.get_visual_content.return_value = {\n            \"name\": \"Visual Content\"}\n\n        self.mock_ansible_module.params = PARAMS_GET_CONNECTED\n\n        DatacenterFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts={'datacenter_visual_content': {'name': 'Visual Content'},\n                           'datacenters': [{'name': 'Data Center Name', 'uri': '/rest/datacenter/id'}]}\n        )\n\n    def test_should_get_none_datacenter_visual_content(self):\n        self.resource.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_GET_CONNECTED\n\n        DatacenterFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts={'datacenter_visual_content': None,\n                           'datacenters': []}\n        )\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_oneview_datacenter_facts.py", "id": "b05ab2b406fde172416b754a4381ae53", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/test_oneview_datacenter_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}