{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    clean_html,\n    get_element_by_id,\n)\n\n\nclass VeeHDIE(InfoExtractor):\n    _VALID_URL = r'https?://veehd\\.com/video/(?P<id>\\d+)'\n\n    \n    \n    _TESTS = [{\n        'url': 'http://veehd.com/video/4639434_Solar-Sinter',\n        'info_dict': {\n            'id': '4639434',\n            'ext': 'mp4',\n            'title': 'Solar Sinter',\n            'uploader_id': 'VideoEyes',\n            'description': 'md5:46a840e8692ddbaffb5f81d9885cb457',\n        },\n        'skip': 'Video deleted',\n    }, {\n        'url': 'http://veehd.com/video/4905758_Elysian-Fields-Channeling',\n        'info_dict': {\n            'id': '4905758',\n            'ext': 'mp4',\n            'title': 'Elysian Fields - Channeling',\n            'description': 'md5:360e4e95fdab58aefbea0f2a19e5604b',\n            'uploader_id': 'spotted',\n        }\n    }, {\n        'url': 'http://veehd.com/video/2046729_2012-2009-DivX-Trailer',\n        'info_dict': {\n            'id': '2046729',\n            'ext': 'avi',\n            'title': '2012 (2009) DivX Trailer',\n            'description': 'md5:75435ee95255e6a9838ac6f6f3a2396b',\n            'uploader_id': 'Movie_Trailers',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        \n        \n        self._download_webpage(url, video_id, 'Requesting webpage')\n        webpage = self._download_webpage(url, video_id)\n\n        if 'This video has been removed<' in webpage:\n            raise ExtractorError('Video %s has been removed' % video_id, expected=True)\n\n        player_path = self._search_regex(\n            r'\\$\\(\"\n            webpage, 'player path')\n        player_url = compat_urlparse.urljoin(url, player_path)\n\n        self._download_webpage(player_url, video_id, 'Requesting player page')\n        player_page = self._download_webpage(\n            player_url, video_id, 'Downloading player page')\n\n        video_url = None\n\n        config_json = self._search_regex(\n            r'value=\\'config=({.+?})\\'', player_page, 'config json', default=None)\n\n        if config_json:\n            config = json.loads(config_json)\n            video_url = compat_urllib_parse_unquote(config['clip']['url'])\n\n        if not video_url:\n            video_url = self._html_search_regex(\n                r'<embed[^>]+type=\"video/divx\"[^>]+src=\"([^\"]+)\"',\n                player_page, 'video url', default=None)\n\n        if not video_url:\n            iframe_src = self._search_regex(\n                r'<iframe[^>]+src=\"/?([^\"]+)\"', player_page, 'iframe url')\n            iframe_url = 'http://veehd.com/%s' % iframe_src\n\n            self._download_webpage(iframe_url, video_id, 'Requesting iframe page')\n            iframe_page = self._download_webpage(\n                iframe_url, video_id, 'Downloading iframe page')\n\n            video_url = self._search_regex(\n                r\"file\\s*:\\s*'([^']+)'\", iframe_page, 'video url')\n\n        title = clean_html(get_element_by_id('videoName', webpage).rpartition('|')[0])\n        uploader_id = self._html_search_regex(\n            r'<a href=\"/profile/\\d+\">(.+?)</a>',\n            webpage, 'uploader')\n        thumbnail = self._search_regex(\n            r'<img id=\"veehdpreview\" src=\"(.+?)\"',\n            webpage, 'thumbnail')\n        description = self._html_search_regex(\n            r'<td class=\"infodropdown\".*?<div>(.*?)<ul',\n            webpage, 'description', flags=re.DOTALL)\n\n        return {\n            '_type': 'video',\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            'uploader_id': uploader_id,\n            'thumbnail': thumbnail,\n            'description': description,\n        }\n", "comments": "# Seems VeeHD videos have multiple copies on several servers, all of\n# whom have different MD5 checksums, so omit md5 field in all tests\n# VeeHD seems to send garbage on the first request.\n# See https://github.com/rg3/youtube-dl/issues/2102\n#playeriframe\"\\).attr\\({src : \"(.+?)\"',\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    clean_html,\n    get_element_by_id,\n)\n\n\nclass VeeHDIE(InfoExtractor):\n    _VALID_URL = r'https?://veehd\\.com/video/(?P<id>\\d+)'\n\n    # Seems VeeHD videos have multiple copies on several servers, all of\n    # whom have different MD5 checksums, so omit md5 field in all tests\n    _TESTS = [{\n        'url': 'http://veehd.com/video/4639434_Solar-Sinter',\n        'info_dict': {\n            'id': '4639434',\n            'ext': 'mp4',\n            'title': 'Solar Sinter',\n            'uploader_id': 'VideoEyes',\n            'description': 'md5:46a840e8692ddbaffb5f81d9885cb457',\n        },\n        'skip': 'Video deleted',\n    }, {\n        'url': 'http://veehd.com/video/4905758_Elysian-Fields-Channeling',\n        'info_dict': {\n            'id': '4905758',\n            'ext': 'mp4',\n            'title': 'Elysian Fields - Channeling',\n            'description': 'md5:360e4e95fdab58aefbea0f2a19e5604b',\n            'uploader_id': 'spotted',\n        }\n    }, {\n        'url': 'http://veehd.com/video/2046729_2012-2009-DivX-Trailer',\n        'info_dict': {\n            'id': '2046729',\n            'ext': 'avi',\n            'title': '2012 (2009) DivX Trailer',\n            'description': 'md5:75435ee95255e6a9838ac6f6f3a2396b',\n            'uploader_id': 'Movie_Trailers',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        # VeeHD seems to send garbage on the first request.\n        # See https://github.com/rg3/youtube-dl/issues/2102\n        self._download_webpage(url, video_id, 'Requesting webpage')\n        webpage = self._download_webpage(url, video_id)\n\n        if 'This video has been removed<' in webpage:\n            raise ExtractorError('Video %s has been removed' % video_id, expected=True)\n\n        player_path = self._search_regex(\n            r'\\$\\(\"#playeriframe\"\\).attr\\({src : \"(.+?)\"',\n            webpage, 'player path')\n        player_url = compat_urlparse.urljoin(url, player_path)\n\n        self._download_webpage(player_url, video_id, 'Requesting player page')\n        player_page = self._download_webpage(\n            player_url, video_id, 'Downloading player page')\n\n        video_url = None\n\n        config_json = self._search_regex(\n            r'value=\\'config=({.+?})\\'', player_page, 'config json', default=None)\n\n        if config_json:\n            config = json.loads(config_json)\n            video_url = compat_urllib_parse_unquote(config['clip']['url'])\n\n        if not video_url:\n            video_url = self._html_search_regex(\n                r'<embed[^>]+type=\"video/divx\"[^>]+src=\"([^\"]+)\"',\n                player_page, 'video url', default=None)\n\n        if not video_url:\n            iframe_src = self._search_regex(\n                r'<iframe[^>]+src=\"/?([^\"]+)\"', player_page, 'iframe url')\n            iframe_url = 'http://veehd.com/%s' % iframe_src\n\n            self._download_webpage(iframe_url, video_id, 'Requesting iframe page')\n            iframe_page = self._download_webpage(\n                iframe_url, video_id, 'Downloading iframe page')\n\n            video_url = self._search_regex(\n                r\"file\\s*:\\s*'([^']+)'\", iframe_page, 'video url')\n\n        title = clean_html(get_element_by_id('videoName', webpage).rpartition('|')[0])\n        uploader_id = self._html_search_regex(\n            r'<a href=\"/profile/\\d+\">(.+?)</a>',\n            webpage, 'uploader')\n        thumbnail = self._search_regex(\n            r'<img id=\"veehdpreview\" src=\"(.+?)\"',\n            webpage, 'thumbnail')\n        description = self._html_search_regex(\n            r'<td class=\"infodropdown\".*?<div>(.*?)<ul',\n            webpage, 'description', flags=re.DOTALL)\n\n        return {\n            '_type': 'video',\n            'id': video_id,\n            'title': title,\n            'url': video_url,\n            'uploader_id': uploader_id,\n            'thumbnail': thumbnail,\n            'description': description,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "veehd.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/veehd.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}