{"author": "donnemartin", "code": "from nose.tools import assert_true\nfrom nose.tools import raises\n\n\nclass TestTrie(object):       \n\n    def test_trie(self):\n        trie = Trie()\n\n        print('Test: Insert')\n        words = ['a', 'at', 'has', 'hat', 'he',\n                 'me', 'men', 'mens', 'met']\n        for word in words:\n            trie.insert(word)\n        for word in trie.list_words():\n            assert_true(trie.find(word) is not None)\n            \n        print('Test: Remove me')\n        trie.remove('me')\n        words_removed = ['me']\n        words = ['a', 'at', 'has', 'hat', 'he',\n                 'men', 'mens', 'met']\n        for word in words:\n            assert_true(trie.find(word) is not None)\n        for word in words_removed:\n            assert_true(trie.find(word) is None)\n\n        print('Test: Remove mens')\n        trie.remove('mens')\n        words_removed = ['me', 'mens']\n        words = ['a', 'at', 'has', 'hat', 'he',\n                 'men', 'met']\n        for word in words:\n            assert_true(trie.find(word) is not None)\n        for word in words_removed:\n            assert_true(trie.find(word) is None)\n\n        print('Test: Remove a')\n        trie.remove('a')\n        words_removed = ['a', 'me', 'mens']\n        words = ['at', 'has', 'hat', 'he',\n                 'men', 'met']\n        for word in words:\n            assert_true(trie.find(word) is not None)\n        for word in words_removed:\n            assert_true(trie.find(word) is None)\n\n        print('Test: Remove has')\n        trie.remove('has')\n        words_removed = ['a', 'has', 'me', 'mens']\n        words = ['at', 'hat', 'he',\n                 'men', 'met']\n        for word in words:\n            assert_true(trie.find(word) is not None)\n        for word in words_removed:\n            assert_true(trie.find(word) is None)\n\n        print('Success: test_trie')\n\n    @raises(Exception)\n    def test_trie_remove_invalid(self):\n        print('Test: Remove from empty trie')\n        trie = Trie()\n        assert_true(trie.remove('foo') is None) \n\n\ndef main():\n    test = TestTrie()\n    test.test_trie()\n    test.test_trie_remove_invalid()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_true\nfrom nose.tools import raises\n\n\nclass TestTrie(object):       \n\n    def test_trie(self):\n        trie = Trie()\n\n        print('Test: Insert')\n        words = ['a', 'at', 'has', 'hat', 'he',\n                 'me', 'men', 'mens', 'met']\n        for word in words:\n            trie.insert(word)\n        for word in trie.list_words():\n            assert_true(trie.find(word) is not None)\n            \n        print('Test: Remove me')\n        trie.remove('me')\n        words_removed = ['me']\n        words = ['a', 'at', 'has', 'hat', 'he',\n                 'men', 'mens', 'met']\n        for word in words:\n            assert_true(trie.find(word) is not None)\n        for word in words_removed:\n            assert_true(trie.find(word) is None)\n\n        print('Test: Remove mens')\n        trie.remove('mens')\n        words_removed = ['me', 'mens']\n        words = ['a', 'at', 'has', 'hat', 'he',\n                 'men', 'met']\n        for word in words:\n            assert_true(trie.find(word) is not None)\n        for word in words_removed:\n            assert_true(trie.find(word) is None)\n\n        print('Test: Remove a')\n        trie.remove('a')\n        words_removed = ['a', 'me', 'mens']\n        words = ['at', 'has', 'hat', 'he',\n                 'men', 'met']\n        for word in words:\n            assert_true(trie.find(word) is not None)\n        for word in words_removed:\n            assert_true(trie.find(word) is None)\n\n        print('Test: Remove has')\n        trie.remove('has')\n        words_removed = ['a', 'has', 'me', 'mens']\n        words = ['at', 'hat', 'he',\n                 'men', 'met']\n        for word in words:\n            assert_true(trie.find(word) is not None)\n        for word in words_removed:\n            assert_true(trie.find(word) is None)\n\n        print('Success: test_trie')\n\n    @raises(Exception)\n    def test_trie_remove_invalid(self):\n        print('Test: Remove from empty trie')\n        trie = Trie()\n        assert_true(trie.remove('foo') is None) \n\n\ndef main():\n    test = TestTrie()\n    test.test_trie()\n    test.test_trie_remove_invalid()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_trie.py", "id": "7f6efc8f873af9ef2e3d373f13e9143e", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/trie/test_trie.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}