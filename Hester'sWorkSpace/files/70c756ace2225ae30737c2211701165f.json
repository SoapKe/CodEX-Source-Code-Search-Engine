{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests.common import TransactionCase\n\n\nclass TestCheckJournalEntry(TransactionCase):\n    \n\n    def setUp(self):\n        super(TestCheckJournalEntry, self).setUp()\n\n        self.tax = self.env['account.tax'].create({\n            'name': 'Expense 10%',\n            'amount': 10,\n            'amount_type': 'percent',\n            'type_tax_use': 'purchase',\n            'price_include': True,\n        })\n        self.product = self.env.ref('hr_expense.air_ticket')\n        self.product.write({'supplier_taxes_id': [(6, 0, [self.tax.id])]})\n\n        self.employee = self.env.ref('hr.employee_mit')\n\n        \n        user_type = self.env.ref('account.data_account_type_payable')\n        account_payable = self.env['account.account'].create({\n            'code': 'X1111',\n            'name': 'HR Expense - Test Payable Account',\n            'user_type_id': user_type.id,\n            'reconcile': True\n        })\n        self.employee.address_home_id.property_account_payable_id = account_payable.id\n\n        \n        user_type = self.env.ref('account.data_account_type_expenses')\n        account_expense = self.env['account.account'].create({\n            'code': 'X2120',\n            'name': 'HR Expense - Test Purchase Account',\n            'user_type_id': user_type.id\n        })\n        \n        self.product.write({'property_account_expense_id': account_expense.id})\n\n        \n        company = self.env.ref('base.main_company')\n        self.env['account.journal'].create({\n            'name': 'Purchase Journal - Test',\n            'code': 'HRTPJ',\n            'type': 'purchase',\n            'company_id': company.id\n        })\n\n        self.expense = self.env['hr.expense.sheet'].create({\n            'name': 'Expense for John Smith',\n            'employee_id': self.employee.id,\n        })\n        self.expense_line = self.env['hr.expense'].create({\n            'name': 'Car Travel Expenses',\n            'employee_id': self.employee.id,\n            'product_id': self.product.id,\n            'unit_amount': 700.00,\n            'tax_ids': [(6, 0, [self.tax.id])],\n            'sheet_id': self.expense.id,\n        })\n\n    def test_journal_entry(self):\n        \n        self.assertEquals(self.expense.state, 'submit', 'Expense is not in Reported state')\n        \n        self.expense.approve_expense_sheets()\n        self.assertEquals(self.expense.state, 'approve', 'Expense is not in Approved state')\n        \n        self.expense.action_sheet_move_create()\n        self.assertEquals(self.expense.state, 'post', 'Expense is not in Waiting Payment state')\n        self.assertTrue(self.expense.account_move_id.id, 'Expense Journal Entry is not created')\n\n        # [(line.debit, line.credit, line.tax_line_id.id) for line in self.expense.expense_line_ids.account_move_id.line_ids]\n        hould git this result [(0.0, 700.0, False), (63.64, 0.0, 179), (636.36, 0.0, False)]\n        for line in self.expense.account_move_id.line_ids:\n            if line.credit:\n                self.assertAlmostEquals(line.credit, 700.00)\n            else:\n                if not line.tax_line_id == self.tax:\n                    self.assertAlmostEquals(line.debit, 636.36)\n                else:\n                    self.assertAlmostEquals(line.debit, 63.64)\n", "comments": "        check journal entries expense product tax tax included                 coding  utf 8        part odoo  see license file full copyright licensing details     create payable account expense    create expenses account expense    assign air ticket product    create sales journal    submitted manager    approve    create expense entries     (line debit  line credit  line tax line id id) line self expense expense line ids account move id line ids     git result  (0 0  700 0  false)  (63 64  0 0  179)  (636 36  0 0  false)  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests.common import TransactionCase\n\n\nclass TestCheckJournalEntry(TransactionCase):\n    \"\"\"\n    Check journal entries when the expense product is having tax which is tax included.\n    \"\"\"\n\n    def setUp(self):\n        super(TestCheckJournalEntry, self).setUp()\n\n        self.tax = self.env['account.tax'].create({\n            'name': 'Expense 10%',\n            'amount': 10,\n            'amount_type': 'percent',\n            'type_tax_use': 'purchase',\n            'price_include': True,\n        })\n        self.product = self.env.ref('hr_expense.air_ticket')\n        self.product.write({'supplier_taxes_id': [(6, 0, [self.tax.id])]})\n\n        self.employee = self.env.ref('hr.employee_mit')\n\n        # Create payable account for the expense\n        user_type = self.env.ref('account.data_account_type_payable')\n        account_payable = self.env['account.account'].create({\n            'code': 'X1111',\n            'name': 'HR Expense - Test Payable Account',\n            'user_type_id': user_type.id,\n            'reconcile': True\n        })\n        self.employee.address_home_id.property_account_payable_id = account_payable.id\n\n        # Create expenses account for the expense\n        user_type = self.env.ref('account.data_account_type_expenses')\n        account_expense = self.env['account.account'].create({\n            'code': 'X2120',\n            'name': 'HR Expense - Test Purchase Account',\n            'user_type_id': user_type.id\n        })\n        # Assign it to the air ticket product\n        self.product.write({'property_account_expense_id': account_expense.id})\n\n        # Create Sales Journal\n        company = self.env.ref('base.main_company')\n        self.env['account.journal'].create({\n            'name': 'Purchase Journal - Test',\n            'code': 'HRTPJ',\n            'type': 'purchase',\n            'company_id': company.id\n        })\n\n        self.expense = self.env['hr.expense.sheet'].create({\n            'name': 'Expense for John Smith',\n            'employee_id': self.employee.id,\n        })\n        self.expense_line = self.env['hr.expense'].create({\n            'name': 'Car Travel Expenses',\n            'employee_id': self.employee.id,\n            'product_id': self.product.id,\n            'unit_amount': 700.00,\n            'tax_ids': [(6, 0, [self.tax.id])],\n            'sheet_id': self.expense.id,\n        })\n\n    def test_journal_entry(self):\n        # Submitted to Manager\n        self.assertEquals(self.expense.state, 'submit', 'Expense is not in Reported state')\n        # Approve\n        self.expense.approve_expense_sheets()\n        self.assertEquals(self.expense.state, 'approve', 'Expense is not in Approved state')\n        # Create Expense Entries\n        self.expense.action_sheet_move_create()\n        self.assertEquals(self.expense.state, 'post', 'Expense is not in Waiting Payment state')\n        self.assertTrue(self.expense.account_move_id.id, 'Expense Journal Entry is not created')\n\n        # [(line.debit, line.credit, line.tax_line_id.id) for line in self.expense.expense_line_ids.account_move_id.line_ids]\n        # should git this result [(0.0, 700.0, False), (63.64, 0.0, 179), (636.36, 0.0, False)]\n        for line in self.expense.account_move_id.line_ids:\n            if line.credit:\n                self.assertAlmostEquals(line.credit, 700.00)\n            else:\n                if not line.tax_line_id == self.tax:\n                    self.assertAlmostEquals(line.debit, 636.36)\n                else:\n                    self.assertAlmostEquals(line.debit, 63.64)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_expenses.py", "id": "70c756ace2225ae30737c2211701165f", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_expense/tests/test_expenses.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}