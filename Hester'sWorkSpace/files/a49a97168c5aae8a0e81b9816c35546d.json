{"author": "webpy", "code": "import web\nimport unittest\nfrom web.template import SecurityError, Template\nfrom web.py3helpers import PY2\n\nclass _TestResult:\n    def __init__(self, t):\n        self.t = t\n\n    def __getattr__(self, name):\n        return getattr(self.t, name)\n\n    def __repr__(self):\n        return repr(unicode(self.t) if PY2 else str(self.t))\n\ndef t(code, **keywords):\n    tmpl = Template(code, **keywords)\n    return lambda *a, **kw: _TestResult(tmpl(*a, **kw))\n\nclass TemplateTest(unittest.TestCase):\n    \n\n    def testPrint(self):\n        if PY2:\n            tpl = \"$code:\\n    print 'blah'\"\n            \n            self.assertRaises(SyntaxError, t, tpl)\n        else:\n            tpl = \"$code:\\n    print('blah')\"\n            self.assertRaises(NameError, t(tpl))\n\n    def testRepr(self):\n        if PY2: \n            tpl = \"$code:\\n    `1`\"\n            self.assertRaises(SecurityError, t, tpl)\n\n    def testAttr(self):\n        tpl = '$code:\\n    (lambda x: x+1).func_code'\n        self.assertRaises(SecurityError, t, tpl)\n\n        tpl = '$def with (a)\\n$code:\\n    a.b = 3'\n        self.assertRaises(SecurityError, t, tpl)\n\n        \n        t(\"$code:\\n    foo = {'a': 1}.items()\")()\n        if not PY2:\n            t(\"$code:\\n    bar = {k:0 for k in [1,2,3]}\")()\n\nclass TestRender:\n    def test_template_without_ext(self, tmpdir):\n        tmpdir.join(\"foobar\").write(\"hello\")\n        render = web.template.render(str(tmpdir))\n        assert str(render.foobar()).strip() == \"hello\"\n", "comments": "   tests template security feature       print function imported   future   print statement exist anymore   feature exist py3 anymore   two execute flawlessly ", "content": "import web\nimport unittest\nfrom web.template import SecurityError, Template\nfrom web.py3helpers import PY2\n\nclass _TestResult:\n    def __init__(self, t):\n        self.t = t\n\n    def __getattr__(self, name):\n        return getattr(self.t, name)\n\n    def __repr__(self):\n        return repr(unicode(self.t) if PY2 else str(self.t))\n\ndef t(code, **keywords):\n    tmpl = Template(code, **keywords)\n    return lambda *a, **kw: _TestResult(tmpl(*a, **kw))\n\nclass TemplateTest(unittest.TestCase):\n    \"\"\"Tests for the template security feature.\"\"\"\n\n    def testPrint(self):\n        if PY2:\n            tpl = \"$code:\\n    print 'blah'\"\n            #print_function has been imported from __future__ so the print statement doesn't exist anymore\n            self.assertRaises(SyntaxError, t, tpl)\n        else:\n            tpl = \"$code:\\n    print('blah')\"\n            self.assertRaises(NameError, t(tpl))\n\n    def testRepr(self):\n        if PY2: #this feature doesn't exist in Py3 anymore\n            tpl = \"$code:\\n    `1`\"\n            self.assertRaises(SecurityError, t, tpl)\n\n    def testAttr(self):\n        tpl = '$code:\\n    (lambda x: x+1).func_code'\n        self.assertRaises(SecurityError, t, tpl)\n\n        tpl = '$def with (a)\\n$code:\\n    a.b = 3'\n        self.assertRaises(SecurityError, t, tpl)\n\n        #these two should execute themselves flawlessly\n        t(\"$code:\\n    foo = {'a': 1}.items()\")()\n        if not PY2:\n            t(\"$code:\\n    bar = {k:0 for k in [1,2,3]}\")()\n\nclass TestRender:\n    def test_template_without_ext(self, tmpdir):\n        tmpdir.join(\"foobar\").write(\"hello\")\n        render = web.template.render(str(tmpdir))\n        assert str(render.foobar()).strip() == \"hello\"\n", "description": "web.py is a web framework for python that is as simple as it is powerful. ", "file_name": "test_template.py", "id": "a49a97168c5aae8a0e81b9816c35546d", "language": "Python", "project_name": "webpy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/webpy-webpy/webpy-webpy-817c979/tests/test_template.py", "save_time": "", "source": "", "update_at": "2018-03-16T08:06:22Z", "url": "https://github.com/webpy/webpy", "wiki": false}