{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.git_two_dashes import match, get_new_command\nfrom thefuck.types import Command\n\n\noutput = 'error: did you mean `{}` (with two dashes ?)'.format\n\n\n@pytest.mark.parametrize('command', [\n    Command('git add -patch', output('--patch')),\n    Command('git checkout -patch', output('--patch')),\n    Command('git commit -amend', output('--amend')),\n    Command('git push -tags', output('--tags')),\n    Command('git rebase -continue', output('--continue'))])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('git add --patch', ''),\n    Command('git checkout --patch', ''),\n    Command('git commit --amend', ''),\n    Command('git push --tags', ''),\n    Command('git rebase --continue', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('command, output', [\n    (Command('git add -patch', output('--patch')),\n        'git add --patch'),\n    (Command('git checkout -patch', output('--patch')),\n        'git checkout --patch'),\n    (Command('git checkout -patch', output('--patch')),\n        'git checkout --patch'),\n    (Command('git init -bare', output('--bare')),\n        'git init --bare'),\n    (Command('git commit -amend', output('--amend')),\n        'git commit --amend'),\n    (Command('git push -tags', output('--tags')),\n        'git push --tags'),\n    (Command('git rebase -continue', output('--continue')),\n        'git rebase --continue')])\ndef test_get_new_command(command, output):\n    assert get_new_command(command) == output\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.git_two_dashes import match, get_new_command\nfrom thefuck.types import Command\n\n\noutput = 'error: did you mean `{}` (with two dashes ?)'.format\n\n\n@pytest.mark.parametrize('command', [\n    Command('git add -patch', output('--patch')),\n    Command('git checkout -patch', output('--patch')),\n    Command('git commit -amend', output('--amend')),\n    Command('git push -tags', output('--tags')),\n    Command('git rebase -continue', output('--continue'))])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('git add --patch', ''),\n    Command('git checkout --patch', ''),\n    Command('git commit --amend', ''),\n    Command('git push --tags', ''),\n    Command('git rebase --continue', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('command, output', [\n    (Command('git add -patch', output('--patch')),\n        'git add --patch'),\n    (Command('git checkout -patch', output('--patch')),\n        'git checkout --patch'),\n    (Command('git checkout -patch', output('--patch')),\n        'git checkout --patch'),\n    (Command('git init -bare', output('--bare')),\n        'git init --bare'),\n    (Command('git commit -amend', output('--amend')),\n        'git commit --amend'),\n    (Command('git push -tags', output('--tags')),\n        'git push --tags'),\n    (Command('git rebase -continue', output('--continue')),\n        'git rebase --continue')])\ndef test_get_new_command(command, output):\n    assert get_new_command(command) == output\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_two_dashes.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_two_dashes.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}