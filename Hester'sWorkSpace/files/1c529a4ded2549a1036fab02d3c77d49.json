{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport pytest\nimport six\n\nfrom sentry.runner.importer import ConfigurationError\nfrom sentry.runner.initializer import bootstrap_options, apply_legacy_settings\n\n\n@pytest.fixture\ndef settings():\n    class Settings(object):\n        pass\n\n    s = Settings()\n    s.TIME_ZONE = 'UTC'\n    s.ALLOWED_HOSTS = []\n    s.SENTRY_FEATURES = {}\n    s.SENTRY_OPTIONS = {}\n    s.SENTRY_DEFAULT_OPTIONS = {}\n    s.SENTRY_EMAIL_BACKEND_ALIASES = {'dummy': 'alias-for-dummy'}\n    return s\n\n\n@pytest.fixture\ndef config_yml(tmpdir):\n    return tmpdir.join('config.yml')\n\n\ndef test_bootstrap_options_simple(settings, config_yml):\n    \"Config options are specified in both places, but config.yml should prevail\"\n    settings.SECRET_KEY = 'xxx'\n    settings.EMAIL_BACKEND = 'xxx'\n    settings.EMAIL_HOST = 'xxx'\n    settings.EMAIL_PORT = 6969\n    settings.EMAIL_HOST_USER = 'xxx'\n    settings.EMAIL_HOST_PASSWORD = 'xxx'\n    settings.EMAIL_USE_TLS = False\n    settings.SERVER_EMAIL = 'xxx'\n    settings.EMAIL_SUBJECT_PREFIX = 'xxx'\n    settings.SENTRY_OPTIONS = {'something.else': True}\n\n    config_yml.write(\n        \"\"\"\\\nfoo.bar: my-foo-bar\nsystem.secret-key: my-system-secret-key\nmail.backend: my-mail-backend\nmail.host: my-mail-host\nmail.port: 123\nmail.username: my-mail-username\nmail.password: my-mail-password\nmail.use-tls: true\nmail.from: my-mail-from\nmail.subject-prefix: my-mail-subject-prefix\n\"\"\"\n    )\n\n    bootstrap_options(settings, six.text_type(config_yml))\n    assert settings.SENTRY_OPTIONS == {\n        'something.else': True,\n        'foo.bar': 'my-foo-bar',\n        'system.secret-key': 'my-system-secret-key',\n        'mail.backend': 'my-mail-backend',\n        'mail.host': 'my-mail-host',\n        'mail.port': 123,\n        'mail.username': 'my-mail-username',\n        'mail.password': 'my-mail-password',\n        'mail.use-tls': True,\n        'mail.from': 'my-mail-from',\n        'mail.subject-prefix': 'my-mail-subject-prefix',\n    }\n    assert settings.SECRET_KEY == 'my-system-secret-key'\n    assert settings.EMAIL_BACKEND == 'my-mail-backend'\n    assert settings.EMAIL_HOST == 'my-mail-host'\n    assert settings.EMAIL_PORT == 123\n    assert settings.EMAIL_HOST_USER == 'my-mail-username'\n    assert settings.EMAIL_HOST_PASSWORD == 'my-mail-password'\n    assert settings.EMAIL_USE_TLS is True\n    assert settings.SERVER_EMAIL == 'my-mail-from'\n    assert settings.EMAIL_SUBJECT_PREFIX == 'my-mail-subject-prefix'\n\n\ndef test_bootstrap_options_malformed_yml(settings, config_yml):\n    config_yml.write('1')\n    with pytest.raises(ConfigurationError):\n        bootstrap_options(settings, six.text_type(config_yml))\n\n    config_yml.write('{{{')\n    with pytest.raises(ConfigurationError):\n        bootstrap_options(settings, six.text_type(config_yml))\n\n\ndef test_bootstrap_options_no_config(settings):\n    \"No config file should gracefully extract values out of settings\"\n    settings.SECRET_KEY = 'my-system-secret-key'\n    settings.EMAIL_BACKEND = 'my-mail-backend'\n    settings.EMAIL_HOST = 'my-mail-host'\n    settings.EMAIL_PORT = 123\n    settings.EMAIL_HOST_USER = 'my-mail-username'\n    settings.EMAIL_HOST_PASSWORD = 'my-mail-password'\n    settings.EMAIL_USE_TLS = True\n    settings.SERVER_EMAIL = 'my-mail-from'\n    settings.EMAIL_SUBJECT_PREFIX = 'my-mail-subject-prefix'\n    settings.FOO_BAR = 'lol'\n\n    bootstrap_options(settings)\n    assert settings.SENTRY_OPTIONS == {\n        'system.secret-key': 'my-system-secret-key',\n        'mail.backend': 'my-mail-backend',\n        'mail.host': 'my-mail-host',\n        'mail.port': 123,\n        'mail.username': 'my-mail-username',\n        'mail.password': 'my-mail-password',\n        'mail.use-tls': True,\n        'mail.from': 'my-mail-from',\n        'mail.subject-prefix': 'my-mail-subject-prefix',\n    }\n\n\ndef test_bootstrap_options_no_config_only_sentry_options(settings):\n    \"SENTRY_OPTIONS is only declared, but should be promoted into settings\"\n    settings.SENTRY_OPTIONS = {\n        'system.secret-key': 'my-system-secret-key',\n        'mail.backend': 'my-mail-backend',\n        'mail.host': 'my-mail-host',\n        'mail.port': 123,\n        'mail.username': 'my-mail-username',\n        'mail.password': 'my-mail-password',\n        'mail.use-tls': True,\n        'mail.from': 'my-mail-from',\n        'mail.subject-prefix': 'my-mail-subject-prefix',\n    }\n\n    bootstrap_options(settings)\n    assert settings.SECRET_KEY == 'my-system-secret-key'\n    assert settings.EMAIL_BACKEND == 'my-mail-backend'\n    assert settings.EMAIL_HOST == 'my-mail-host'\n    assert settings.EMAIL_PORT == 123\n    assert settings.EMAIL_HOST_USER == 'my-mail-username'\n    assert settings.EMAIL_HOST_PASSWORD == 'my-mail-password'\n    assert settings.EMAIL_USE_TLS is True\n    assert settings.SERVER_EMAIL == 'my-mail-from'\n    assert settings.EMAIL_SUBJECT_PREFIX == 'my-mail-subject-prefix'\n\n\ndef test_bootstrap_options_mail_aliases(settings):\n    settings.SENTRY_OPTIONS = {\n        'mail.backend': 'dummy',\n    }\n    bootstrap_options(settings)\n    assert settings.EMAIL_BACKEND == 'alias-for-dummy'\n\n\ndef test_bootstrap_options_missing_file(settings):\n    bootstrap_options(settings, 'this-file-does-not-exist-xxxxxxxxxxxxxx.yml')\n    assert settings.SENTRY_OPTIONS == {}\n\n\ndef test_bootstrap_options_empty_file(settings, config_yml):\n    config_yml.write('')\n    bootstrap_options(settings, six.text_type(config_yml))\n    assert settings.SENTRY_OPTIONS == {}\n\n\ndef test_apply_legacy_settings(settings):\n    settings.ALLOWED_HOSTS = []\n    settings.SENTRY_USE_QUEUE = True\n    settings.SENTRY_ALLOW_REGISTRATION = True\n    settings.SENTRY_ADMIN_EMAIL = 'admin-email'\n    settings.SENTRY_URL_PREFIX = 'http://url-prefix'\n    settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 10\n    settings.SENTRY_REDIS_OPTIONS = {'foo': 'bar'}\n    settings.SENTRY_ENABLE_EMAIL_REPLIES = True\n    settings.SENTRY_SMTP_HOSTNAME = 'reply-hostname'\n    settings.MAILGUN_API_KEY = 'mailgun-api-key'\n    settings.SENTRY_OPTIONS = {\n        'system.secret-key': 'secret-key',\n        'mail.from': 'mail-from',\n    }\n    settings.SENTRY_FILESTORE = 'some-filestore'\n    settings.SENTRY_FILESTORE_OPTIONS = {'filestore-foo': 'filestore-bar'}\n    apply_legacy_settings(settings)\n    assert settings.CELERY_ALWAYS_EAGER is False\n    assert settings.SENTRY_FEATURES['auth:register'] is True\n    assert settings.SENTRY_OPTIONS == {\n        'system.admin-email': 'admin-email',\n        'system.url-prefix': 'http://url-prefix',\n        'system.rate-limit': 10,\n        'system.secret-key': 'secret-key',\n        'redis.clusters': {\n            'default': {\n                'foo': 'bar'\n            }\n        },\n        'mail.from': 'mail-from',\n        'mail.enable-replies': True,\n        'mail.reply-hostname': 'reply-hostname',\n        'mail.mailgun-api-key': 'mailgun-api-key',\n        'filestore.backend': 'some-filestore',\n        'filestore.options': {\n            'filestore-foo': 'filestore-bar'\n        },\n    }\n    assert settings.DEFAULT_FROM_EMAIL == 'mail-from'\n    assert settings.ALLOWED_HOSTS == ['*']\n\n\ndef test_initialize_app(settings):\n    \"Just a sanity check of the full initialization process\"\n    settings.SENTRY_OPTIONS = {'system.secret-key': 'secret-key'}\n    bootstrap_options(settings)\n    apply_legacy_settings(settings)\n\n\ndef test_require_secret_key(settings):\n    assert 'system.secret-key' not in settings.SENTRY_OPTIONS\n    with pytest.raises(ConfigurationError):\n        apply_legacy_settings(settings)\n", "comments": "     foo bar  foo bar system secret key  system secret key mail backend  mail backend mail host  mail host mail port  123 mail username  mail username mail password  mail password mail use tls  true mail  mail mail subject prefix  mail subject prefix     ", "content": "from __future__ import absolute_import\n\nimport pytest\nimport six\n\nfrom sentry.runner.importer import ConfigurationError\nfrom sentry.runner.initializer import bootstrap_options, apply_legacy_settings\n\n\n@pytest.fixture\ndef settings():\n    class Settings(object):\n        pass\n\n    s = Settings()\n    s.TIME_ZONE = 'UTC'\n    s.ALLOWED_HOSTS = []\n    s.SENTRY_FEATURES = {}\n    s.SENTRY_OPTIONS = {}\n    s.SENTRY_DEFAULT_OPTIONS = {}\n    s.SENTRY_EMAIL_BACKEND_ALIASES = {'dummy': 'alias-for-dummy'}\n    return s\n\n\n@pytest.fixture\ndef config_yml(tmpdir):\n    return tmpdir.join('config.yml')\n\n\ndef test_bootstrap_options_simple(settings, config_yml):\n    \"Config options are specified in both places, but config.yml should prevail\"\n    settings.SECRET_KEY = 'xxx'\n    settings.EMAIL_BACKEND = 'xxx'\n    settings.EMAIL_HOST = 'xxx'\n    settings.EMAIL_PORT = 6969\n    settings.EMAIL_HOST_USER = 'xxx'\n    settings.EMAIL_HOST_PASSWORD = 'xxx'\n    settings.EMAIL_USE_TLS = False\n    settings.SERVER_EMAIL = 'xxx'\n    settings.EMAIL_SUBJECT_PREFIX = 'xxx'\n    settings.SENTRY_OPTIONS = {'something.else': True}\n\n    config_yml.write(\n        \"\"\"\\\nfoo.bar: my-foo-bar\nsystem.secret-key: my-system-secret-key\nmail.backend: my-mail-backend\nmail.host: my-mail-host\nmail.port: 123\nmail.username: my-mail-username\nmail.password: my-mail-password\nmail.use-tls: true\nmail.from: my-mail-from\nmail.subject-prefix: my-mail-subject-prefix\n\"\"\"\n    )\n\n    bootstrap_options(settings, six.text_type(config_yml))\n    assert settings.SENTRY_OPTIONS == {\n        'something.else': True,\n        'foo.bar': 'my-foo-bar',\n        'system.secret-key': 'my-system-secret-key',\n        'mail.backend': 'my-mail-backend',\n        'mail.host': 'my-mail-host',\n        'mail.port': 123,\n        'mail.username': 'my-mail-username',\n        'mail.password': 'my-mail-password',\n        'mail.use-tls': True,\n        'mail.from': 'my-mail-from',\n        'mail.subject-prefix': 'my-mail-subject-prefix',\n    }\n    assert settings.SECRET_KEY == 'my-system-secret-key'\n    assert settings.EMAIL_BACKEND == 'my-mail-backend'\n    assert settings.EMAIL_HOST == 'my-mail-host'\n    assert settings.EMAIL_PORT == 123\n    assert settings.EMAIL_HOST_USER == 'my-mail-username'\n    assert settings.EMAIL_HOST_PASSWORD == 'my-mail-password'\n    assert settings.EMAIL_USE_TLS is True\n    assert settings.SERVER_EMAIL == 'my-mail-from'\n    assert settings.EMAIL_SUBJECT_PREFIX == 'my-mail-subject-prefix'\n\n\ndef test_bootstrap_options_malformed_yml(settings, config_yml):\n    config_yml.write('1')\n    with pytest.raises(ConfigurationError):\n        bootstrap_options(settings, six.text_type(config_yml))\n\n    config_yml.write('{{{')\n    with pytest.raises(ConfigurationError):\n        bootstrap_options(settings, six.text_type(config_yml))\n\n\ndef test_bootstrap_options_no_config(settings):\n    \"No config file should gracefully extract values out of settings\"\n    settings.SECRET_KEY = 'my-system-secret-key'\n    settings.EMAIL_BACKEND = 'my-mail-backend'\n    settings.EMAIL_HOST = 'my-mail-host'\n    settings.EMAIL_PORT = 123\n    settings.EMAIL_HOST_USER = 'my-mail-username'\n    settings.EMAIL_HOST_PASSWORD = 'my-mail-password'\n    settings.EMAIL_USE_TLS = True\n    settings.SERVER_EMAIL = 'my-mail-from'\n    settings.EMAIL_SUBJECT_PREFIX = 'my-mail-subject-prefix'\n    settings.FOO_BAR = 'lol'\n\n    bootstrap_options(settings)\n    assert settings.SENTRY_OPTIONS == {\n        'system.secret-key': 'my-system-secret-key',\n        'mail.backend': 'my-mail-backend',\n        'mail.host': 'my-mail-host',\n        'mail.port': 123,\n        'mail.username': 'my-mail-username',\n        'mail.password': 'my-mail-password',\n        'mail.use-tls': True,\n        'mail.from': 'my-mail-from',\n        'mail.subject-prefix': 'my-mail-subject-prefix',\n    }\n\n\ndef test_bootstrap_options_no_config_only_sentry_options(settings):\n    \"SENTRY_OPTIONS is only declared, but should be promoted into settings\"\n    settings.SENTRY_OPTIONS = {\n        'system.secret-key': 'my-system-secret-key',\n        'mail.backend': 'my-mail-backend',\n        'mail.host': 'my-mail-host',\n        'mail.port': 123,\n        'mail.username': 'my-mail-username',\n        'mail.password': 'my-mail-password',\n        'mail.use-tls': True,\n        'mail.from': 'my-mail-from',\n        'mail.subject-prefix': 'my-mail-subject-prefix',\n    }\n\n    bootstrap_options(settings)\n    assert settings.SECRET_KEY == 'my-system-secret-key'\n    assert settings.EMAIL_BACKEND == 'my-mail-backend'\n    assert settings.EMAIL_HOST == 'my-mail-host'\n    assert settings.EMAIL_PORT == 123\n    assert settings.EMAIL_HOST_USER == 'my-mail-username'\n    assert settings.EMAIL_HOST_PASSWORD == 'my-mail-password'\n    assert settings.EMAIL_USE_TLS is True\n    assert settings.SERVER_EMAIL == 'my-mail-from'\n    assert settings.EMAIL_SUBJECT_PREFIX == 'my-mail-subject-prefix'\n\n\ndef test_bootstrap_options_mail_aliases(settings):\n    settings.SENTRY_OPTIONS = {\n        'mail.backend': 'dummy',\n    }\n    bootstrap_options(settings)\n    assert settings.EMAIL_BACKEND == 'alias-for-dummy'\n\n\ndef test_bootstrap_options_missing_file(settings):\n    bootstrap_options(settings, 'this-file-does-not-exist-xxxxxxxxxxxxxx.yml')\n    assert settings.SENTRY_OPTIONS == {}\n\n\ndef test_bootstrap_options_empty_file(settings, config_yml):\n    config_yml.write('')\n    bootstrap_options(settings, six.text_type(config_yml))\n    assert settings.SENTRY_OPTIONS == {}\n\n\ndef test_apply_legacy_settings(settings):\n    settings.ALLOWED_HOSTS = []\n    settings.SENTRY_USE_QUEUE = True\n    settings.SENTRY_ALLOW_REGISTRATION = True\n    settings.SENTRY_ADMIN_EMAIL = 'admin-email'\n    settings.SENTRY_URL_PREFIX = 'http://url-prefix'\n    settings.SENTRY_SYSTEM_MAX_EVENTS_PER_MINUTE = 10\n    settings.SENTRY_REDIS_OPTIONS = {'foo': 'bar'}\n    settings.SENTRY_ENABLE_EMAIL_REPLIES = True\n    settings.SENTRY_SMTP_HOSTNAME = 'reply-hostname'\n    settings.MAILGUN_API_KEY = 'mailgun-api-key'\n    settings.SENTRY_OPTIONS = {\n        'system.secret-key': 'secret-key',\n        'mail.from': 'mail-from',\n    }\n    settings.SENTRY_FILESTORE = 'some-filestore'\n    settings.SENTRY_FILESTORE_OPTIONS = {'filestore-foo': 'filestore-bar'}\n    apply_legacy_settings(settings)\n    assert settings.CELERY_ALWAYS_EAGER is False\n    assert settings.SENTRY_FEATURES['auth:register'] is True\n    assert settings.SENTRY_OPTIONS == {\n        'system.admin-email': 'admin-email',\n        'system.url-prefix': 'http://url-prefix',\n        'system.rate-limit': 10,\n        'system.secret-key': 'secret-key',\n        'redis.clusters': {\n            'default': {\n                'foo': 'bar'\n            }\n        },\n        'mail.from': 'mail-from',\n        'mail.enable-replies': True,\n        'mail.reply-hostname': 'reply-hostname',\n        'mail.mailgun-api-key': 'mailgun-api-key',\n        'filestore.backend': 'some-filestore',\n        'filestore.options': {\n            'filestore-foo': 'filestore-bar'\n        },\n    }\n    assert settings.DEFAULT_FROM_EMAIL == 'mail-from'\n    assert settings.ALLOWED_HOSTS == ['*']\n\n\ndef test_initialize_app(settings):\n    \"Just a sanity check of the full initialization process\"\n    settings.SENTRY_OPTIONS = {'system.secret-key': 'secret-key'}\n    bootstrap_options(settings)\n    apply_legacy_settings(settings)\n\n\ndef test_require_secret_key(settings):\n    assert 'system.secret-key' not in settings.SENTRY_OPTIONS\n    with pytest.raises(ConfigurationError):\n        apply_legacy_settings(settings)\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_initializer.py", "id": "1c529a4ded2549a1036fab02d3c77d49", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/runner/test_initializer.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}