{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Fran Fitzpatrick (francis.x.fitzpatrick@gmail.com)\n# Borrowed heavily from other work by Abhijeet Kasurde (akasurde@redhat.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_dnszone\nauthor: Fran Fitzpatrick (@fxfitz)\nshort_description: Manage FreeIPA DNS Zones\ndescription:\n- Add and delete an IPA DNS Zones using IPA API\noptions:\n  zone_name:\n    description:\n    - The DNS zone name to which needs to be managed.\n    required: true\n  state:\n    description: State to ensure\n    required: false\n    default: present\n    choices: [\"present\", \"absent\"]\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.5\"\n'''\n\nEXAMPLES = '''\n\n- ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n\n\n- ipa_dnszone:\n    zone_name: example.com\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: topsecret\n    state: absent\n'''\n\nRETURN = '''\nzone:\n  description: DNS zone as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass DNSZoneIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(DNSZoneIPAClient, self).__init__(module, host, port, protocol)\n\n    def dnszone_find(self, zone_name):\n        return self._post_json(\n            method='dnszone_find',\n            name=zone_name,\n            item={'idnsname': zone_name}\n        )\n\n    def dnszone_add(self, zone_name=None, details=None):\n        return self._post_json(\n            method='dnszone_add',\n            name=zone_name,\n            item={}\n        )\n\n    def dnszone_del(self, zone_name=None, record_name=None, details=None):\n        return self._post_json(\n            method='dnszone_del', name=zone_name, item={})\n\n\ndef ensure(module, client):\n    zone_name = module.params['zone_name']\n    state = module.params['state']\n\n    ipa_dnszone = client.dnszone_find(zone_name)\n\n    changed = False\n    if state == 'present':\n        if not ipa_dnszone:\n            changed = True\n            if not module.check_mode:\n                client.dnszone_add(zone_name=zone_name)\n        else:\n            changed = False\n    else:\n        if ipa_dnszone:\n            changed = True\n            if not module.check_mode:\n                client.dnszone_del(zone_name=zone_name)\n\n    return changed, client.dnszone_find(zone_name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(zone_name=dict(type='str', required=True),\n                         state=dict(type='str', default='present', choices=['present', 'absent']),\n                         )\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True,\n                           )\n\n    client = DNSZoneIPAClient(\n        module=module,\n        host=module.params['ipa_host'],\n        port=module.params['ipa_port'],\n        protocol=module.params['ipa_prot']\n    )\n\n    try:\n        client.login(\n            username=module.params['ipa_user'],\n            password=module.params['ipa_pass']\n        )\n        changed, zone = ensure(module, client)\n        module.exit_json(changed=changed, zone=zone)\n    except Exception as e:\n        module.fail_json(msg=to_native(e))\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipa dnszone author  fran fitzpatrick ( fxfitz) short description  manage freeipa dns zones description    add delete ipa dns zones using ipa api options    zone name      description        the dns zone name needs managed      required  true   state      description  state ensure     required  false     default  present     choices    present    absent   extends documentation fragment  ipa documentation version added   2 5       examples         ensure dns zone present   ipa dnsrecord      ipa host  spider example com     ipa pass  passw0rd      state  present     zone name  example com    ensure dns zone removed   ipa dnszone      zone name  example com     ipa host  localhost     ipa user  admin     ipa pass  topsecret     state  absent      return       zone    description  dns zone returned ipa api    returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  fran fitzpatrick (francis x fitzpatrick gmail com)    borrowed heavily work abhijeet kasurde (akasurde redhat com)    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure dns zone present    ensure dns zone removed ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Fran Fitzpatrick (francis.x.fitzpatrick@gmail.com)\n# Borrowed heavily from other work by Abhijeet Kasurde (akasurde@redhat.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_dnszone\nauthor: Fran Fitzpatrick (@fxfitz)\nshort_description: Manage FreeIPA DNS Zones\ndescription:\n- Add and delete an IPA DNS Zones using IPA API\noptions:\n  zone_name:\n    description:\n    - The DNS zone name to which needs to be managed.\n    required: true\n  state:\n    description: State to ensure\n    required: false\n    default: present\n    choices: [\"present\", \"absent\"]\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.5\"\n'''\n\nEXAMPLES = '''\n# Ensure dns zone is present\n- ipa_dnsrecord:\n    ipa_host: spider.example.com\n    ipa_pass: Passw0rd!\n    state: present\n    zone_name: example.com\n\n# Ensure that dns zone is removed\n- ipa_dnszone:\n    zone_name: example.com\n    ipa_host: localhost\n    ipa_user: admin\n    ipa_pass: topsecret\n    state: absent\n'''\n\nRETURN = '''\nzone:\n  description: DNS zone as returned by IPA API.\n  returned: always\n  type: dict\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass DNSZoneIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(DNSZoneIPAClient, self).__init__(module, host, port, protocol)\n\n    def dnszone_find(self, zone_name):\n        return self._post_json(\n            method='dnszone_find',\n            name=zone_name,\n            item={'idnsname': zone_name}\n        )\n\n    def dnszone_add(self, zone_name=None, details=None):\n        return self._post_json(\n            method='dnszone_add',\n            name=zone_name,\n            item={}\n        )\n\n    def dnszone_del(self, zone_name=None, record_name=None, details=None):\n        return self._post_json(\n            method='dnszone_del', name=zone_name, item={})\n\n\ndef ensure(module, client):\n    zone_name = module.params['zone_name']\n    state = module.params['state']\n\n    ipa_dnszone = client.dnszone_find(zone_name)\n\n    changed = False\n    if state == 'present':\n        if not ipa_dnszone:\n            changed = True\n            if not module.check_mode:\n                client.dnszone_add(zone_name=zone_name)\n        else:\n            changed = False\n    else:\n        if ipa_dnszone:\n            changed = True\n            if not module.check_mode:\n                client.dnszone_del(zone_name=zone_name)\n\n    return changed, client.dnszone_find(zone_name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(zone_name=dict(type='str', required=True),\n                         state=dict(type='str', default='present', choices=['present', 'absent']),\n                         )\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True,\n                           )\n\n    client = DNSZoneIPAClient(\n        module=module,\n        host=module.params['ipa_host'],\n        port=module.params['ipa_port'],\n        protocol=module.params['ipa_prot']\n    )\n\n    try:\n        client.login(\n            username=module.params['ipa_user'],\n            password=module.params['ipa_pass']\n        )\n        changed, zone = ensure(module, client)\n        module.exit_json(changed=changed, zone=zone)\n    except Exception as e:\n        module.fail_json(msg=to_native(e))\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_dnszone.py", "id": "076f80930d6f5e783c87f5e00c65851e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_dnszone.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}