{"author": "yandex", "code": "from nose.tools import assert_equals, assert_false, assert_true\nfrom tests.asserts import assert_is_instance\nfrom gixy.parser.nginx_parser import NginxParser\nfrom gixy.directives.directive import *\n\n\ndef _get_parsed(config):\n    root = NginxParser(cwd='', allow_includes=False).parse(config)\n    return root.children[0]\n\n\ndef test_directive():\n    config = 'some \"foo\" \"bar\";'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, Directive)\n    assert_equals(directive.name, 'some')\n    assert_equals(directive.args, ['foo', 'bar'])\n    assert_equals(str(directive), 'some foo bar;')\n\n\ndef test_add_header():\n    config = 'add_header \"X-Foo\" \"bar\";'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, AddHeaderDirective)\n    assert_equals(directive.name, 'add_header')\n    assert_equals(directive.args, ['X-Foo', 'bar'])\n    assert_equals(directive.header, 'x-foo')\n    assert_equals(directive.value, 'bar')\n    assert_false(directive.always)\n    assert_equals(str(directive), 'add_header X-Foo bar;')\n\n\ndef test_add_header_always():\n    config = 'add_header \"X-Foo\" \"bar\" always;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, AddHeaderDirective)\n    assert_equals(directive.name, 'add_header')\n    assert_equals(directive.args, ['X-Foo', 'bar', 'always'])\n    assert_equals(directive.header, 'x-foo')\n    assert_equals(directive.value, 'bar')\n    assert_true(directive.always)\n    assert_equals(str(directive), 'add_header X-Foo bar always;')\n\n\ndef test_set():\n    config = 'set $foo bar;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, SetDirective)\n    assert_equals(directive.name, 'set')\n    assert_equals(directive.args, ['$foo', 'bar'])\n    assert_equals(directive.variable, 'foo')\n    assert_equals(directive.value, 'bar')\n    assert_equals(str(directive), 'set $foo bar;')\n    assert_true(directive.provide_variables)\n\n\ndef test_rewrite():\n    config = 'rewrite ^ http://some;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, RewriteDirective)\n    assert_equals(directive.name, 'rewrite')\n    assert_equals(directive.args, ['^', 'http://some'])\n    assert_equals(str(directive), 'rewrite ^ http://some;')\n    assert_true(directive.provide_variables)\n\n    assert_equals(directive.pattern, '^')\n    assert_equals(directive.replace, 'http://some')\n    assert_equals(directive.flag, None)\n\n\ndef test_rewrite_flags():\n    config = 'rewrite ^/(.*)$ http://some/$1 redirect;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, RewriteDirective)\n    assert_equals(directive.name, 'rewrite')\n    assert_equals(directive.args, ['^/(.*)$', 'http://some/$1', 'redirect'])\n    assert_equals(str(directive), 'rewrite ^/(.*)$ http://some/$1 redirect;')\n    assert_true(directive.provide_variables)\n\n    assert_equals(directive.pattern, '^/(.*)$')\n    assert_equals(directive.replace, 'http://some/$1')\n    assert_equals(directive.flag, 'redirect')\n\n\ndef test_root():\n    config = 'root /var/www/html;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, RootDirective)\n    assert_equals(directive.name, 'root')\n    assert_equals(directive.args, ['/var/www/html'])\n    assert_equals(str(directive), 'root /var/www/html;')\n    assert_true(directive.provide_variables)\n\n    assert_equals(directive.path, '/var/www/html')\n", "comments": "", "content": "from nose.tools import assert_equals, assert_false, assert_true\nfrom tests.asserts import assert_is_instance\nfrom gixy.parser.nginx_parser import NginxParser\nfrom gixy.directives.directive import *\n\n\ndef _get_parsed(config):\n    root = NginxParser(cwd='', allow_includes=False).parse(config)\n    return root.children[0]\n\n\ndef test_directive():\n    config = 'some \"foo\" \"bar\";'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, Directive)\n    assert_equals(directive.name, 'some')\n    assert_equals(directive.args, ['foo', 'bar'])\n    assert_equals(str(directive), 'some foo bar;')\n\n\ndef test_add_header():\n    config = 'add_header \"X-Foo\" \"bar\";'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, AddHeaderDirective)\n    assert_equals(directive.name, 'add_header')\n    assert_equals(directive.args, ['X-Foo', 'bar'])\n    assert_equals(directive.header, 'x-foo')\n    assert_equals(directive.value, 'bar')\n    assert_false(directive.always)\n    assert_equals(str(directive), 'add_header X-Foo bar;')\n\n\ndef test_add_header_always():\n    config = 'add_header \"X-Foo\" \"bar\" always;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, AddHeaderDirective)\n    assert_equals(directive.name, 'add_header')\n    assert_equals(directive.args, ['X-Foo', 'bar', 'always'])\n    assert_equals(directive.header, 'x-foo')\n    assert_equals(directive.value, 'bar')\n    assert_true(directive.always)\n    assert_equals(str(directive), 'add_header X-Foo bar always;')\n\n\ndef test_set():\n    config = 'set $foo bar;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, SetDirective)\n    assert_equals(directive.name, 'set')\n    assert_equals(directive.args, ['$foo', 'bar'])\n    assert_equals(directive.variable, 'foo')\n    assert_equals(directive.value, 'bar')\n    assert_equals(str(directive), 'set $foo bar;')\n    assert_true(directive.provide_variables)\n\n\ndef test_rewrite():\n    config = 'rewrite ^ http://some;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, RewriteDirective)\n    assert_equals(directive.name, 'rewrite')\n    assert_equals(directive.args, ['^', 'http://some'])\n    assert_equals(str(directive), 'rewrite ^ http://some;')\n    assert_true(directive.provide_variables)\n\n    assert_equals(directive.pattern, '^')\n    assert_equals(directive.replace, 'http://some')\n    assert_equals(directive.flag, None)\n\n\ndef test_rewrite_flags():\n    config = 'rewrite ^/(.*)$ http://some/$1 redirect;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, RewriteDirective)\n    assert_equals(directive.name, 'rewrite')\n    assert_equals(directive.args, ['^/(.*)$', 'http://some/$1', 'redirect'])\n    assert_equals(str(directive), 'rewrite ^/(.*)$ http://some/$1 redirect;')\n    assert_true(directive.provide_variables)\n\n    assert_equals(directive.pattern, '^/(.*)$')\n    assert_equals(directive.replace, 'http://some/$1')\n    assert_equals(directive.flag, 'redirect')\n\n\ndef test_root():\n    config = 'root /var/www/html;'\n\n    directive = _get_parsed(config)\n    assert_is_instance(directive, RootDirective)\n    assert_equals(directive.name, 'root')\n    assert_equals(directive.args, ['/var/www/html'])\n    assert_equals(str(directive), 'root /var/www/html;')\n    assert_true(directive.provide_variables)\n\n    assert_equals(directive.path, '/var/www/html')\n", "description": "Nginx configuration static analyzer", "file_name": "test_directive.py", "id": "4cf3a9adfb655a005d1ba415a3651351", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/tests/directives/test_directive.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}