{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport pickle\nimport six\n\nfrom django.db import connection, models\nfrom django.db.models import F\nfrom django.test import TestCase\n\nfrom bitfield import Bit, BitField, BitHandler\nfrom bitfield.compat import bitand, bitor\n\nfrom .forms import BitFieldTestModelForm\nfrom .models import BitFieldTestModel, CompositeBitFieldTestModel\n\n\nclass BitHandlerTest(TestCase):\n    def test_comparison(self):\n        bithandler_1 = BitHandler(0, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        bithandler_2 = BitHandler(1, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        bithandler_3 = BitHandler(0, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        assert bithandler_1 == bithandler_1\n        assert bithandler_1 != bithandler_2\n        assert bithandler_1 == bithandler_3\n\n    def test_defaults(self):\n        bithandler = BitHandler(0, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        \n        self.assertEquals(int(bithandler), 0)\n        \n        self.assertEquals(int(bithandler.FLAG_0.number), 0)\n        self.assertEquals(int(bithandler.FLAG_1.number), 1)\n        self.assertEquals(int(bithandler.FLAG_2.number), 2)\n        self.assertEquals(int(bithandler.FLAG_3.number), 3)\n        \n        self.assertRaises(AttributeError, lambda: bithandler.FLAG_4)\n        ).\n        self.assertEquals(bool(bithandler.FLAG_0), False)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n    def test_nonzero_default(self):\n        bithandler = BitHandler(1, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), True)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler = BitHandler(2, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), False)\n        self.assertEquals(bool(bithandler.FLAG_1), True)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler = BitHandler(3, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), True)\n        self.assertEquals(bool(bithandler.FLAG_1), True)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler = BitHandler(4, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), False)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), True)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n    def test_mutation(self):\n        bithandler = BitHandler(0, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), False)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler = BitHandler(bithandler | 1, bithandler._keys)\n        self.assertEquals(bool(bithandler.FLAG_0), True)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler ^= 3\n        self.assertEquals(int(bithandler), 2)\n\n        self.assertEquals(bool(bithandler & 1), False)\n\n        bithandler.FLAG_0 = False\n        self.assertEquals(bithandler.FLAG_0, False)\n\n        bithandler.FLAG_1 = True\n        self.assertEquals(bithandler.FLAG_0, False)\n        self.assertEquals(bithandler.FLAG_1, True)\n\n        bithandler.FLAG_2 = False\n        self.assertEquals(bithandler.FLAG_0, False)\n        self.assertEquals(bithandler.FLAG_1, True)\n        self.assertEquals(bithandler.FLAG_2, False)\n\n\nclass BitTest(TestCase):\n    def test_int(self):\n        bit = Bit(0)\n        self.assertEquals(int(bit), 1)\n        self.assertEquals(bool(bit), True)\n        self.assertFalse(not bit)\n\n    def test_comparison(self):\n        self.assertEquals(Bit(0), Bit(0))\n        self.assertNotEquals(Bit(1), Bit(0))\n        self.assertNotEquals(Bit(0, 0), Bit(0, 1))\n        self.assertEquals(Bit(0, 1), Bit(0, 1))\n        self.assertEquals(Bit(0), 1)\n\n    def test_and(self):\n        self.assertEquals(1 & Bit(2), 0)\n        self.assertEquals(1 & Bit(0), 1)\n        self.assertEquals(1 & ~Bit(0), 0)\n        self.assertEquals(Bit(0) & Bit(2), 0)\n        self.assertEquals(Bit(0) & Bit(0), 1)\n        self.assertEquals(Bit(0) & ~Bit(0), 0)\n\n    def test_or(self):\n        self.assertEquals(1 | Bit(2), 5)\n        self.assertEquals(1 | Bit(5), 33)\n        self.assertEquals(1 | ~Bit(2), -5)\n        self.assertEquals(Bit(0) | Bit(2), 5)\n        self.assertEquals(Bit(0) | Bit(5), 33)\n        self.assertEquals(Bit(0) | ~Bit(2), -5)\n\n    def test_xor(self):\n        self.assertEquals(1 ^ Bit(2), 5)\n        self.assertEquals(1 ^ Bit(0), 0)\n        self.assertEquals(1 ^ Bit(1), 3)\n        self.assertEquals(1 ^ Bit(5), 33)\n        self.assertEquals(1 ^ ~Bit(2), -6)\n        self.assertEquals(Bit(0) ^ Bit(2), 5)\n        self.assertEquals(Bit(0) ^ Bit(0), 0)\n        self.assertEquals(Bit(0) ^ Bit(1), 3)\n        self.assertEquals(Bit(0) ^ Bit(5), 33)\n        self.assertEquals(Bit(0) ^ ~Bit(2), -6)\n\n\nclass BitFieldTest(TestCase):\n    def test_basic(self):\n        \n        instance = BitFieldTestModel.objects.create(flags=1)\n        self.assertTrue(instance.flags.FLAG_0)\n        self.assertFalse(instance.flags.FLAG_1)\n        self.assertFalse(instance.flags.FLAG_2)\n        self.assertFalse(instance.flags.FLAG_3)\n\n    def test_regression_1425(self):\n        \n        instance = BitFieldTestModel.objects.create(flags=-1)\n        self.assertEqual(instance.flags._value, 15)\n        self.assertTrue(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertTrue(instance.flags.FLAG_2)\n        self.assertTrue(instance.flags.FLAG_3)\n\n        cursor = connection.cursor()\n        flags_field = BitFieldTestModel._meta.get_field('flags')\n        flags_db_column = flags_field.db_column or flags_field.name\n        cursor.execute(\n            \"INSERT INTO %s (%s) VALUES (-1)\" % (BitFieldTestModel._meta.db_table, flags_db_column)\n        )\n        \n        instance = BitFieldTestModel.objects.get(flags=-1)\n        self.assertTrue(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertTrue(instance.flags.FLAG_2)\n        self.assertTrue(instance.flags.FLAG_3)\n        instance.save()\n\n        self.assertEqual(BitFieldTestModel.objects.filter(flags=15).count(), 2)\n        self.assertEqual(BitFieldTestModel.objects.filter(flags__lt=0).count(), 0)\n\n    def test_select(self):\n        BitFieldTestModel.objects.create(flags=3)\n        self.assertTrue(\n            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_1).exists()\n        )\n        self.assertTrue(\n            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_0).exists()\n        )\n        self.assertFalse(\n            BitFieldTestModel.objects.exclude(flags=BitFieldTestModel.flags.FLAG_0).exists()\n        )\n        self.assertFalse(\n            BitFieldTestModel.objects.exclude(flags=BitFieldTestModel.flags.FLAG_1).exists()\n        )\n\n    def test_update(self):\n        instance = BitFieldTestModel.objects.create(flags=0)\n        self.assertFalse(instance.flags.FLAG_0)\n\n        BitFieldTestModel.objects.filter(pk=instance.pk).update(\n            flags=bitor(F('flags'), BitFieldTestModel.flags.FLAG_1)\n        )\n        instance = BitFieldTestModel.objects.get(pk=instance.pk)\n        self.assertTrue(instance.flags.FLAG_1)\n\n        BitFieldTestModel.objects.filter(pk=instance.pk).update(\n            flags=bitor(\n                F('flags'), ((~BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_3))\n            )\n        )\n        instance = BitFieldTestModel.objects.get(pk=instance.pk)\n        self.assertFalse(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertTrue(instance.flags.FLAG_3)\n        self.assertFalse(\n            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_0).exists()\n        )\n\n        BitFieldTestModel.objects.filter(pk=instance.pk).update(\n            flags=bitand(F('flags'), ~BitFieldTestModel.flags.FLAG_3)\n        )\n        instance = BitFieldTestModel.objects.get(pk=instance.pk)\n        self.assertFalse(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertFalse(instance.flags.FLAG_3)\n\n    def test_update_with_handler(self):\n        instance = BitFieldTestModel.objects.create(flags=0)\n        self.assertFalse(instance.flags.FLAG_0)\n\n        instance.flags.FLAG_1 = True\n\n        BitFieldTestModel.objects.filter(pk=instance.pk).update(\n            flags=bitor(F('flags'), instance.flags)\n        )\n        instance = BitFieldTestModel.objects.get(pk=instance.pk)\n        self.assertTrue(instance.flags.FLAG_1)\n\n    def test_negate(self):\n        BitFieldTestModel.objects.create(\n            flags=BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_1\n        )\n        BitFieldTestModel.objects.create(flags=BitFieldTestModel.flags.FLAG_1)\n        self.assertEqual(\n            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_0).count(), 1\n        )\n        self.assertEqual(\n            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_1).count(), 0\n        )\n        self.assertEqual(\n            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_2).count(), 2\n        )\n\n    def test_default_value(self):\n        instance = BitFieldTestModel.objects.create()\n        self.assertTrue(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertFalse(instance.flags.FLAG_2)\n        self.assertFalse(instance.flags.FLAG_3)\n\n    def test_binary_capacity(self):\n        import math\n        from django.db.models.fields import BigIntegerField\n        \n        MAX_COUNT = int(math.floor(math.log(BigIntegerField.MAX_BIGINT, 2)))\n\n        \n        flags = ['f' + six.text_type(i) for i in range(100)]\n\n        try:\n            BitField(flags=flags[:MAX_COUNT])\n        except ValueError:\n            self.fail(\"It should work well with these flags\")\n\n        self.assertRaises(ValueError, BitField, flags=flags[:(MAX_COUNT + 1)])\n\n    def test_dictionary_init(self):\n        flags = {\n            0: 'zero',\n            1: 'first',\n            10: 'tenth',\n            2: 'second',\n            'wrongkey': 'wrongkey',\n            100: 'bigkey',\n            -100: 'smallkey',\n        }\n\n        try:\n            bf = BitField(flags)\n        except ValueError:\n            self.fail(\"It should work well with these flags\")\n\n        self.assertEquals(\n            bf.flags, ['zero', 'first', 'second', '', '', '', '', '', '', '', 'tenth']\n        )\n        self.assertRaises(ValueError, BitField, flags={})\n        self.assertRaises(ValueError, BitField, flags={'wrongkey': 'wrongkey'})\n        self.assertRaises(ValueError, BitField, flags={'1': 'non_int_key'})\n\n    def test_defaults_as_key_names(self):\n        class TestModel(models.Model):\n            flags = BitField(\n                flags=('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3', ), default=('FLAG_1', 'FLAG_2')\n            )\n\n        field = TestModel._meta.get_field('flags')\n        self.assertEquals(field.default, TestModel.flags.FLAG_1 | TestModel.flags.FLAG_2)\n\n\nclass BitFieldSerializationTest(TestCase):\n    def test_can_unserialize_bithandler(self):\n        bf = BitFieldTestModel()\n        bf.flags.FLAG_0 = 1\n        bf.flags.FLAG_1 = 0\n        data = pickle.dumps(bf)\n        inst = pickle.loads(data)\n        self.assertTrue(inst.flags.FLAG_0)\n        self.assertFalse(inst.flags.FLAG_1)\n\n    def test_pickle_integration(self):\n        inst = BitFieldTestModel.objects.create(flags=1)\n        data = pickle.dumps(inst)\n        inst = pickle.loads(data)\n        self.assertEquals(type(inst.flags), BitHandler)\n        self.assertEquals(int(inst.flags), 1)\n\n    def test_added_field(self):\n        bf = BitFieldTestModel()\n        bf.flags.FLAG_0 = 1\n        bf.flags.FLAG_1 = 0\n        bf.flags.FLAG_3 = 0\n        data = pickle.dumps(bf)\n        inst = pickle.loads(data)\n        self.assertTrue('FLAG_3' in inst.flags.keys())\n\n\nclass CompositeBitFieldTest(TestCase):\n    def test_get_flag(self):\n        inst = CompositeBitFieldTestModel()\n        self.assertEqual(inst.flags.FLAG_0, inst.flags_1.FLAG_0)\n        self.assertEqual(inst.flags.FLAG_4, inst.flags_2.FLAG_4)\n        self.assertRaises(AttributeError, lambda: inst.flags.flag_NA)\n\n    def test_set_flag(self):\n        inst = CompositeBitFieldTestModel()\n\n        flag_0_original = bool(inst.flags.FLAG_0)\n        self.assertEqual(bool(inst.flags_1.FLAG_0), flag_0_original)\n        flag_4_original = bool(inst.flags.FLAG_4)\n        self.assertEqual(bool(inst.flags_2.FLAG_4), flag_4_original)\n\n        \n        inst.flags.FLAG_0 = not flag_0_original\n        inst.flags.FLAG_4 = not flag_4_original\n\n        \n        self.assertNotEqual(bool(inst.flags.FLAG_0), flag_0_original)\n        self.assertNotEqual(bool(inst.flags_1.FLAG_0), flag_0_original)\n        self.assertNotEqual(bool(inst.flags.FLAG_4), flag_4_original)\n        self.assertNotEqual(bool(inst.flags_2.FLAG_4), flag_4_original)\n\n        def set_flag():\n            inst.flags.flag_NA = False\n\n        self.assertRaises(AttributeError, set_flag)\n\n    def test_hasattr(self):\n        inst = CompositeBitFieldTestModel()\n        self.assertEqual(hasattr(inst.flags, 'flag_0'), hasattr(inst.flags_1, 'flag_0'))\n        self.assertEqual(hasattr(inst.flags, 'flag_4'), hasattr(inst.flags_2, 'flag_4'))\n\n\nclass BitFormFieldTest(TestCase):\n    def test_form_new_invalid(self):\n        invalid_data_dicts = [\n            {\n                'flags': ['FLAG_0', 'FLAG_FLAG']\n            }, {\n                'flags': ['FLAG_4']\n            }, {\n                'flags': [1, 2]\n            }\n        ]\n        for invalid_data in invalid_data_dicts:\n            form = BitFieldTestModelForm(data=invalid_data)\n            self.assertFalse(form.is_valid())\n\n    def test_form_new(self):\n        data_dicts = [{'flags': ['FLAG_0', 'FLAG_1']}, {'flags': ['FLAG_3']}, {'flags': []}, {}]\n        for data in data_dicts:\n            form = BitFieldTestModelForm(data=data)\n            self.failUnless(form.is_valid())\n            instance = form.save()\n            flags = data['flags'] if 'flags' in data else []\n            for k in BitFieldTestModel.flags:\n                self.assertEquals(bool(getattr(instance.flags, k)), k in flags)\n\n    def test_form_update(self):\n        instance = BitFieldTestModel.objects.create(flags=0)\n        for k in BitFieldTestModel.flags:\n            self.assertFalse(bool(getattr(instance.flags, k)))\n\n        data = {'flags': ['FLAG_0', 'FLAG_1']}\n        form = BitFieldTestModelForm(data=data, instance=instance)\n        self.failUnless(form.is_valid())\n        instance = form.save()\n        for k in BitFieldTestModel.flags:\n            self.assertEquals(bool(getattr(instance.flags, k)), k in data['flags'])\n\n        data = {'flags': ['FLAG_2', 'FLAG_3']}\n        form = BitFieldTestModelForm(data=data, instance=instance)\n        self.failUnless(form.is_valid())\n        instance = form.save()\n        for k in BitFieldTestModel.flags:\n            self.assertEquals(bool(getattr(instance.flags, k)), k in data['flags'])\n\n        data = {'flags': []}\n        form = BitFieldTestModelForm(data=data, instance=instance)\n        self.failUnless(form.is_valid())\n        instance = form.save()\n        for k in BitFieldTestModel.flags:\n            self.assertFalse(bool(getattr(instance.flags, k)))\n", "comments": "  default value 0     test bit numbers     negative test non existant key     test bool()     create instance make sure flags working properly     creating new instances allow negative values     there one row inserted cursor     local maximum value  slow canonical algorithm    big flags list    flip flags  bits    check make sure bit flips took effect ", "content": "from __future__ import absolute_import\n\nimport pickle\nimport six\n\nfrom django.db import connection, models\nfrom django.db.models import F\nfrom django.test import TestCase\n\nfrom bitfield import Bit, BitField, BitHandler\nfrom bitfield.compat import bitand, bitor\n\nfrom .forms import BitFieldTestModelForm\nfrom .models import BitFieldTestModel, CompositeBitFieldTestModel\n\n\nclass BitHandlerTest(TestCase):\n    def test_comparison(self):\n        bithandler_1 = BitHandler(0, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        bithandler_2 = BitHandler(1, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        bithandler_3 = BitHandler(0, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        assert bithandler_1 == bithandler_1\n        assert bithandler_1 != bithandler_2\n        assert bithandler_1 == bithandler_3\n\n    def test_defaults(self):\n        bithandler = BitHandler(0, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        # Default value of 0.\n        self.assertEquals(int(bithandler), 0)\n        # Test bit numbers.\n        self.assertEquals(int(bithandler.FLAG_0.number), 0)\n        self.assertEquals(int(bithandler.FLAG_1.number), 1)\n        self.assertEquals(int(bithandler.FLAG_2.number), 2)\n        self.assertEquals(int(bithandler.FLAG_3.number), 3)\n        # Negative test non-existant key.\n        self.assertRaises(AttributeError, lambda: bithandler.FLAG_4)\n        # Test bool().\n        self.assertEquals(bool(bithandler.FLAG_0), False)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n    def test_nonzero_default(self):\n        bithandler = BitHandler(1, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), True)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler = BitHandler(2, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), False)\n        self.assertEquals(bool(bithandler.FLAG_1), True)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler = BitHandler(3, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), True)\n        self.assertEquals(bool(bithandler.FLAG_1), True)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler = BitHandler(4, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), False)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), True)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n    def test_mutation(self):\n        bithandler = BitHandler(0, ('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3'))\n        self.assertEquals(bool(bithandler.FLAG_0), False)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler = BitHandler(bithandler | 1, bithandler._keys)\n        self.assertEquals(bool(bithandler.FLAG_0), True)\n        self.assertEquals(bool(bithandler.FLAG_1), False)\n        self.assertEquals(bool(bithandler.FLAG_2), False)\n        self.assertEquals(bool(bithandler.FLAG_3), False)\n\n        bithandler ^= 3\n        self.assertEquals(int(bithandler), 2)\n\n        self.assertEquals(bool(bithandler & 1), False)\n\n        bithandler.FLAG_0 = False\n        self.assertEquals(bithandler.FLAG_0, False)\n\n        bithandler.FLAG_1 = True\n        self.assertEquals(bithandler.FLAG_0, False)\n        self.assertEquals(bithandler.FLAG_1, True)\n\n        bithandler.FLAG_2 = False\n        self.assertEquals(bithandler.FLAG_0, False)\n        self.assertEquals(bithandler.FLAG_1, True)\n        self.assertEquals(bithandler.FLAG_2, False)\n\n\nclass BitTest(TestCase):\n    def test_int(self):\n        bit = Bit(0)\n        self.assertEquals(int(bit), 1)\n        self.assertEquals(bool(bit), True)\n        self.assertFalse(not bit)\n\n    def test_comparison(self):\n        self.assertEquals(Bit(0), Bit(0))\n        self.assertNotEquals(Bit(1), Bit(0))\n        self.assertNotEquals(Bit(0, 0), Bit(0, 1))\n        self.assertEquals(Bit(0, 1), Bit(0, 1))\n        self.assertEquals(Bit(0), 1)\n\n    def test_and(self):\n        self.assertEquals(1 & Bit(2), 0)\n        self.assertEquals(1 & Bit(0), 1)\n        self.assertEquals(1 & ~Bit(0), 0)\n        self.assertEquals(Bit(0) & Bit(2), 0)\n        self.assertEquals(Bit(0) & Bit(0), 1)\n        self.assertEquals(Bit(0) & ~Bit(0), 0)\n\n    def test_or(self):\n        self.assertEquals(1 | Bit(2), 5)\n        self.assertEquals(1 | Bit(5), 33)\n        self.assertEquals(1 | ~Bit(2), -5)\n        self.assertEquals(Bit(0) | Bit(2), 5)\n        self.assertEquals(Bit(0) | Bit(5), 33)\n        self.assertEquals(Bit(0) | ~Bit(2), -5)\n\n    def test_xor(self):\n        self.assertEquals(1 ^ Bit(2), 5)\n        self.assertEquals(1 ^ Bit(0), 0)\n        self.assertEquals(1 ^ Bit(1), 3)\n        self.assertEquals(1 ^ Bit(5), 33)\n        self.assertEquals(1 ^ ~Bit(2), -6)\n        self.assertEquals(Bit(0) ^ Bit(2), 5)\n        self.assertEquals(Bit(0) ^ Bit(0), 0)\n        self.assertEquals(Bit(0) ^ Bit(1), 3)\n        self.assertEquals(Bit(0) ^ Bit(5), 33)\n        self.assertEquals(Bit(0) ^ ~Bit(2), -6)\n\n\nclass BitFieldTest(TestCase):\n    def test_basic(self):\n        # Create instance and make sure flags are working properly.\n        instance = BitFieldTestModel.objects.create(flags=1)\n        self.assertTrue(instance.flags.FLAG_0)\n        self.assertFalse(instance.flags.FLAG_1)\n        self.assertFalse(instance.flags.FLAG_2)\n        self.assertFalse(instance.flags.FLAG_3)\n\n    def test_regression_1425(self):\n        # Creating new instances shouldn't allow negative values.\n        instance = BitFieldTestModel.objects.create(flags=-1)\n        self.assertEqual(instance.flags._value, 15)\n        self.assertTrue(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertTrue(instance.flags.FLAG_2)\n        self.assertTrue(instance.flags.FLAG_3)\n\n        cursor = connection.cursor()\n        flags_field = BitFieldTestModel._meta.get_field('flags')\n        flags_db_column = flags_field.db_column or flags_field.name\n        cursor.execute(\n            \"INSERT INTO %s (%s) VALUES (-1)\" % (BitFieldTestModel._meta.db_table, flags_db_column)\n        )\n        # There should only be the one row we inserted through the cursor.\n        instance = BitFieldTestModel.objects.get(flags=-1)\n        self.assertTrue(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertTrue(instance.flags.FLAG_2)\n        self.assertTrue(instance.flags.FLAG_3)\n        instance.save()\n\n        self.assertEqual(BitFieldTestModel.objects.filter(flags=15).count(), 2)\n        self.assertEqual(BitFieldTestModel.objects.filter(flags__lt=0).count(), 0)\n\n    def test_select(self):\n        BitFieldTestModel.objects.create(flags=3)\n        self.assertTrue(\n            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_1).exists()\n        )\n        self.assertTrue(\n            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_0).exists()\n        )\n        self.assertFalse(\n            BitFieldTestModel.objects.exclude(flags=BitFieldTestModel.flags.FLAG_0).exists()\n        )\n        self.assertFalse(\n            BitFieldTestModel.objects.exclude(flags=BitFieldTestModel.flags.FLAG_1).exists()\n        )\n\n    def test_update(self):\n        instance = BitFieldTestModel.objects.create(flags=0)\n        self.assertFalse(instance.flags.FLAG_0)\n\n        BitFieldTestModel.objects.filter(pk=instance.pk).update(\n            flags=bitor(F('flags'), BitFieldTestModel.flags.FLAG_1)\n        )\n        instance = BitFieldTestModel.objects.get(pk=instance.pk)\n        self.assertTrue(instance.flags.FLAG_1)\n\n        BitFieldTestModel.objects.filter(pk=instance.pk).update(\n            flags=bitor(\n                F('flags'), ((~BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_3))\n            )\n        )\n        instance = BitFieldTestModel.objects.get(pk=instance.pk)\n        self.assertFalse(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertTrue(instance.flags.FLAG_3)\n        self.assertFalse(\n            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_0).exists()\n        )\n\n        BitFieldTestModel.objects.filter(pk=instance.pk).update(\n            flags=bitand(F('flags'), ~BitFieldTestModel.flags.FLAG_3)\n        )\n        instance = BitFieldTestModel.objects.get(pk=instance.pk)\n        self.assertFalse(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertFalse(instance.flags.FLAG_3)\n\n    def test_update_with_handler(self):\n        instance = BitFieldTestModel.objects.create(flags=0)\n        self.assertFalse(instance.flags.FLAG_0)\n\n        instance.flags.FLAG_1 = True\n\n        BitFieldTestModel.objects.filter(pk=instance.pk).update(\n            flags=bitor(F('flags'), instance.flags)\n        )\n        instance = BitFieldTestModel.objects.get(pk=instance.pk)\n        self.assertTrue(instance.flags.FLAG_1)\n\n    def test_negate(self):\n        BitFieldTestModel.objects.create(\n            flags=BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_1\n        )\n        BitFieldTestModel.objects.create(flags=BitFieldTestModel.flags.FLAG_1)\n        self.assertEqual(\n            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_0).count(), 1\n        )\n        self.assertEqual(\n            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_1).count(), 0\n        )\n        self.assertEqual(\n            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_2).count(), 2\n        )\n\n    def test_default_value(self):\n        instance = BitFieldTestModel.objects.create()\n        self.assertTrue(instance.flags.FLAG_0)\n        self.assertTrue(instance.flags.FLAG_1)\n        self.assertFalse(instance.flags.FLAG_2)\n        self.assertFalse(instance.flags.FLAG_3)\n\n    def test_binary_capacity(self):\n        import math\n        from django.db.models.fields import BigIntegerField\n        # Local maximum value, slow canonical algorithm\n        MAX_COUNT = int(math.floor(math.log(BigIntegerField.MAX_BIGINT, 2)))\n\n        # Big flags list\n        flags = ['f' + six.text_type(i) for i in range(100)]\n\n        try:\n            BitField(flags=flags[:MAX_COUNT])\n        except ValueError:\n            self.fail(\"It should work well with these flags\")\n\n        self.assertRaises(ValueError, BitField, flags=flags[:(MAX_COUNT + 1)])\n\n    def test_dictionary_init(self):\n        flags = {\n            0: 'zero',\n            1: 'first',\n            10: 'tenth',\n            2: 'second',\n            'wrongkey': 'wrongkey',\n            100: 'bigkey',\n            -100: 'smallkey',\n        }\n\n        try:\n            bf = BitField(flags)\n        except ValueError:\n            self.fail(\"It should work well with these flags\")\n\n        self.assertEquals(\n            bf.flags, ['zero', 'first', 'second', '', '', '', '', '', '', '', 'tenth']\n        )\n        self.assertRaises(ValueError, BitField, flags={})\n        self.assertRaises(ValueError, BitField, flags={'wrongkey': 'wrongkey'})\n        self.assertRaises(ValueError, BitField, flags={'1': 'non_int_key'})\n\n    def test_defaults_as_key_names(self):\n        class TestModel(models.Model):\n            flags = BitField(\n                flags=('FLAG_0', 'FLAG_1', 'FLAG_2', 'FLAG_3', ), default=('FLAG_1', 'FLAG_2')\n            )\n\n        field = TestModel._meta.get_field('flags')\n        self.assertEquals(field.default, TestModel.flags.FLAG_1 | TestModel.flags.FLAG_2)\n\n\nclass BitFieldSerializationTest(TestCase):\n    def test_can_unserialize_bithandler(self):\n        bf = BitFieldTestModel()\n        bf.flags.FLAG_0 = 1\n        bf.flags.FLAG_1 = 0\n        data = pickle.dumps(bf)\n        inst = pickle.loads(data)\n        self.assertTrue(inst.flags.FLAG_0)\n        self.assertFalse(inst.flags.FLAG_1)\n\n    def test_pickle_integration(self):\n        inst = BitFieldTestModel.objects.create(flags=1)\n        data = pickle.dumps(inst)\n        inst = pickle.loads(data)\n        self.assertEquals(type(inst.flags), BitHandler)\n        self.assertEquals(int(inst.flags), 1)\n\n    def test_added_field(self):\n        bf = BitFieldTestModel()\n        bf.flags.FLAG_0 = 1\n        bf.flags.FLAG_1 = 0\n        bf.flags.FLAG_3 = 0\n        data = pickle.dumps(bf)\n        inst = pickle.loads(data)\n        self.assertTrue('FLAG_3' in inst.flags.keys())\n\n\nclass CompositeBitFieldTest(TestCase):\n    def test_get_flag(self):\n        inst = CompositeBitFieldTestModel()\n        self.assertEqual(inst.flags.FLAG_0, inst.flags_1.FLAG_0)\n        self.assertEqual(inst.flags.FLAG_4, inst.flags_2.FLAG_4)\n        self.assertRaises(AttributeError, lambda: inst.flags.flag_NA)\n\n    def test_set_flag(self):\n        inst = CompositeBitFieldTestModel()\n\n        flag_0_original = bool(inst.flags.FLAG_0)\n        self.assertEqual(bool(inst.flags_1.FLAG_0), flag_0_original)\n        flag_4_original = bool(inst.flags.FLAG_4)\n        self.assertEqual(bool(inst.flags_2.FLAG_4), flag_4_original)\n\n        # flip flags' bits\n        inst.flags.FLAG_0 = not flag_0_original\n        inst.flags.FLAG_4 = not flag_4_original\n\n        # check to make sure the bit flips took effect\n        self.assertNotEqual(bool(inst.flags.FLAG_0), flag_0_original)\n        self.assertNotEqual(bool(inst.flags_1.FLAG_0), flag_0_original)\n        self.assertNotEqual(bool(inst.flags.FLAG_4), flag_4_original)\n        self.assertNotEqual(bool(inst.flags_2.FLAG_4), flag_4_original)\n\n        def set_flag():\n            inst.flags.flag_NA = False\n\n        self.assertRaises(AttributeError, set_flag)\n\n    def test_hasattr(self):\n        inst = CompositeBitFieldTestModel()\n        self.assertEqual(hasattr(inst.flags, 'flag_0'), hasattr(inst.flags_1, 'flag_0'))\n        self.assertEqual(hasattr(inst.flags, 'flag_4'), hasattr(inst.flags_2, 'flag_4'))\n\n\nclass BitFormFieldTest(TestCase):\n    def test_form_new_invalid(self):\n        invalid_data_dicts = [\n            {\n                'flags': ['FLAG_0', 'FLAG_FLAG']\n            }, {\n                'flags': ['FLAG_4']\n            }, {\n                'flags': [1, 2]\n            }\n        ]\n        for invalid_data in invalid_data_dicts:\n            form = BitFieldTestModelForm(data=invalid_data)\n            self.assertFalse(form.is_valid())\n\n    def test_form_new(self):\n        data_dicts = [{'flags': ['FLAG_0', 'FLAG_1']}, {'flags': ['FLAG_3']}, {'flags': []}, {}]\n        for data in data_dicts:\n            form = BitFieldTestModelForm(data=data)\n            self.failUnless(form.is_valid())\n            instance = form.save()\n            flags = data['flags'] if 'flags' in data else []\n            for k in BitFieldTestModel.flags:\n                self.assertEquals(bool(getattr(instance.flags, k)), k in flags)\n\n    def test_form_update(self):\n        instance = BitFieldTestModel.objects.create(flags=0)\n        for k in BitFieldTestModel.flags:\n            self.assertFalse(bool(getattr(instance.flags, k)))\n\n        data = {'flags': ['FLAG_0', 'FLAG_1']}\n        form = BitFieldTestModelForm(data=data, instance=instance)\n        self.failUnless(form.is_valid())\n        instance = form.save()\n        for k in BitFieldTestModel.flags:\n            self.assertEquals(bool(getattr(instance.flags, k)), k in data['flags'])\n\n        data = {'flags': ['FLAG_2', 'FLAG_3']}\n        form = BitFieldTestModelForm(data=data, instance=instance)\n        self.failUnless(form.is_valid())\n        instance = form.save()\n        for k in BitFieldTestModel.flags:\n            self.assertEquals(bool(getattr(instance.flags, k)), k in data['flags'])\n\n        data = {'flags': []}\n        form = BitFieldTestModelForm(data=data, instance=instance)\n        self.failUnless(form.is_valid())\n        instance = form.save()\n        for k in BitFieldTestModel.flags:\n            self.assertFalse(bool(getattr(instance.flags, k)))\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "2bf9468766b297e7489e26aab904527b", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/bitfield/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}