{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport json\nimport logging\nimport pprint\nimport werkzeug\n\nfrom odoo import http\nfrom odoo.http import request\n\n_logger = logging.getLogger(__name__)\n\n\nclass AdyenController(http.Controller):\n    _return_url = '/payment/adyen/return/'\n\n    @http.route([\n        '/payment/adyen/return',\n    ], type='http', auth='none', csrf=False)\n    def adyen_return(self, **post):\n        _logger.info('Beginning Adyen form_feedback with post data %s', pprint.pformat(post))  \n        if post.get('authResult') not in ['CANCELLED']:\n            request.env['payment.transaction'].sudo().form_feedback(post, 'adyen')\n        return_url = post.pop('return_url', '')\n        if not return_url:\n            custom = json.loads(post.pop('merchantReturnData', '{}'))\n            return_url = custom.pop('return_url', '/')\n        return werkzeug.utils.redirect(return_url)\n\n    @http.route([\n        '/payment/adyen/notification',\n    ], type='http', auth='none', methods=['POST'], csrf=False)\n    def adyen_notification(self, **post):\n        tx = post.get('merchantReference') and request.env['payment.transaction'].sudo().search([('reference', 'in', [post.get('merchantReference')])], limit=1)\n        if post.get('eventCode') in ['AUTHORISATION'] and tx:\n            states = (post.get('merchantReference'), post.get('success'), tx.state)\n            if (post.get('success') == 'true' and tx.state == 'done') or (post.get('success') == 'false' and tx.state in ['cancel', 'error']):\n                _logger.info('Notification from Adyen for the reference %s: received %s, state is %s', states)\n            else:\n                _logger.warning('Notification from Adyen for the reference %s: received %s but state is %s', states)\n        return '[accepted]'\n", "comments": "      coding  utf 8        debug ", "content": "# -*- coding: utf-8 -*-\n\nimport json\nimport logging\nimport pprint\nimport werkzeug\n\nfrom odoo import http\nfrom odoo.http import request\n\n_logger = logging.getLogger(__name__)\n\n\nclass AdyenController(http.Controller):\n    _return_url = '/payment/adyen/return/'\n\n    @http.route([\n        '/payment/adyen/return',\n    ], type='http', auth='none', csrf=False)\n    def adyen_return(self, **post):\n        _logger.info('Beginning Adyen form_feedback with post data %s', pprint.pformat(post))  # debug\n        if post.get('authResult') not in ['CANCELLED']:\n            request.env['payment.transaction'].sudo().form_feedback(post, 'adyen')\n        return_url = post.pop('return_url', '')\n        if not return_url:\n            custom = json.loads(post.pop('merchantReturnData', '{}'))\n            return_url = custom.pop('return_url', '/')\n        return werkzeug.utils.redirect(return_url)\n\n    @http.route([\n        '/payment/adyen/notification',\n    ], type='http', auth='none', methods=['POST'], csrf=False)\n    def adyen_notification(self, **post):\n        tx = post.get('merchantReference') and request.env['payment.transaction'].sudo().search([('reference', 'in', [post.get('merchantReference')])], limit=1)\n        if post.get('eventCode') in ['AUTHORISATION'] and tx:\n            states = (post.get('merchantReference'), post.get('success'), tx.state)\n            if (post.get('success') == 'true' and tx.state == 'done') or (post.get('success') == 'false' and tx.state in ['cancel', 'error']):\n                _logger.info('Notification from Adyen for the reference %s: received %s, state is %s', states)\n            else:\n                _logger.warning('Notification from Adyen for the reference %s: received %s but state is %s', states)\n        return '[accepted]'\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "1b32dfb168e02e76498746873c93a6b5", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_adyen/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}