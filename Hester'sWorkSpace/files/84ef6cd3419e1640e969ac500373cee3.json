{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models, SUPERUSER_ID\nfrom odoo.http import request\nfrom odoo.tools import pycompat\n\n\nclass UtmMedium(models.Model):\n    \n    _name = 'utm.medium'\n    _description = 'Channels'\n    _order = 'name'\n\n    name = fields.Char(string='Channel Name', required=True)\n    active = fields.Boolean(default=True)\n\n\nclass UtmCampaign(models.Model):\n    \n    _name = 'utm.campaign'\n    _description = 'Campaign'\n\n    name = fields.Char(string='Campaign Name', required=True, translate=True)\n\n\nclass UtmSource(models.Model):\n    _name = 'utm.source'\n    _description = 'Source'\n\n    name = fields.Char(string='Source Name', required=True, translate=True)\n\n\nclass UtmMixin(models.AbstractModel):\n\n    \n    _name = 'utm.mixin'\n\n    campaign_id = fields.Many2one('utm.campaign', 'Campaign',\n                                  help=\"This is a name that helps you keep track of your different campaign efforts, e.g. Fall_Drive, Christmas_Special\")\n    source_id = fields.Many2one('utm.source', 'Source',\n                                help=\"This is the source of the link, e.g. Search Engine, another domain, or name of email list\")\n    medium_id = fields.Many2one('utm.medium', 'Medium',\n                                help=\"This is the method of delivery, e.g. Postcard, Email, or Banner Ad\", oldname='channel_id')\n\n    def tracking_fields(self):\n        \n        \n        # record_crm_lead.tracking_fields() will call tracking_fields() from module utm.mixin (if not overridden on crm.lead)\n        \n        # To force the call of overridden method, we use self.env['utm.mixin'].tracking_fields() which respects overridden\n        \n        return [\n            # (\"URL_PARAMETER\", \"FIELD_NAME_MIXIN\", \"NAME_IN_COOKIES\")\n            ('utm_campaign', 'campaign_id', 'odoo_utm_campaign'),\n            ('utm_source', 'source_id', 'odoo_utm_source'),\n            ('utm_medium', 'medium_id', 'odoo_utm_medium'),\n        ]\n\n    @api.model\n    def default_get(self, fields):\n        values = super(UtmMixin, self).default_get(fields)\n\n        \n        if self.env.uid != SUPERUSER_ID and self.env.user.has_group('sales_team.group_sale_salesman'):\n            return values\n\n        for url_param, field_name, cookie_name in self.env['utm.mixin'].tracking_fields():\n            if field_name in fields:\n                field = self._fields[field_name]\n                value = False\n                if request:\n                    \n                    value = request.httprequest.cookies.get(cookie_name)\n                \n                if field.type == 'many2one' and isinstance(value, pycompat.string_types) and value:\n                    Model = self.env[field.comodel_name]\n                    records = Model.search([('name', '=', value)], limit=1)\n                    if not records:\n                        records = Model.create({'name': value})\n                    value = records.id\n                if value:\n                    values[field_name] = value\n        return values\n", "comments": "   mixin class objects tracked marketing             coding  utf 8        part odoo  see license file full copyright licensing details     old crm case channel    old crm case resource type    this function cannot overridden model inherit utm mixin    limitation heritage abstractmodel    record crm lead tracking fields() call tracking fields() module utm mixin (if overridden crm lead)    instead overridden method utm mixin     to force call overridden method  use self env  utm mixin   tracking fields() respects overridden    methods utm mixin  ignore overridden method crm lead    ( url parameter    field name mixin    name in cookies )    we ignore utm salemen  except requests could done superuser id bypass access rights     ir http dispatch saves url params cookie    receive string many2one  search create id ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, SUPERUSER_ID\nfrom odoo.http import request\nfrom odoo.tools import pycompat\n\n\nclass UtmMedium(models.Model):\n    # OLD crm.case.channel\n    _name = 'utm.medium'\n    _description = 'Channels'\n    _order = 'name'\n\n    name = fields.Char(string='Channel Name', required=True)\n    active = fields.Boolean(default=True)\n\n\nclass UtmCampaign(models.Model):\n    # OLD crm.case.resource.type\n    _name = 'utm.campaign'\n    _description = 'Campaign'\n\n    name = fields.Char(string='Campaign Name', required=True, translate=True)\n\n\nclass UtmSource(models.Model):\n    _name = 'utm.source'\n    _description = 'Source'\n\n    name = fields.Char(string='Source Name', required=True, translate=True)\n\n\nclass UtmMixin(models.AbstractModel):\n\n    \"\"\"Mixin class for objects which can be tracked by marketing. \"\"\"\n    _name = 'utm.mixin'\n\n    campaign_id = fields.Many2one('utm.campaign', 'Campaign',\n                                  help=\"This is a name that helps you keep track of your different campaign efforts, e.g. Fall_Drive, Christmas_Special\")\n    source_id = fields.Many2one('utm.source', 'Source',\n                                help=\"This is the source of the link, e.g. Search Engine, another domain, or name of email list\")\n    medium_id = fields.Many2one('utm.medium', 'Medium',\n                                help=\"This is the method of delivery, e.g. Postcard, Email, or Banner Ad\", oldname='channel_id')\n\n    def tracking_fields(self):\n        # This function cannot be overridden in a model which inherit utm.mixin\n        # Limitation by the heritage on AbstractModel\n        # record_crm_lead.tracking_fields() will call tracking_fields() from module utm.mixin (if not overridden on crm.lead)\n        # instead of the overridden method from utm.mixin.\n        # To force the call of overridden method, we use self.env['utm.mixin'].tracking_fields() which respects overridden\n        # methods of utm.mixin, but will ignore overridden method on crm.lead\n        return [\n            # (\"URL_PARAMETER\", \"FIELD_NAME_MIXIN\", \"NAME_IN_COOKIES\")\n            ('utm_campaign', 'campaign_id', 'odoo_utm_campaign'),\n            ('utm_source', 'source_id', 'odoo_utm_source'),\n            ('utm_medium', 'medium_id', 'odoo_utm_medium'),\n        ]\n\n    @api.model\n    def default_get(self, fields):\n        values = super(UtmMixin, self).default_get(fields)\n\n        # We ignore UTM for salemen, except some requests that could be done as superuser_id to bypass access rights.\n        if self.env.uid != SUPERUSER_ID and self.env.user.has_group('sales_team.group_sale_salesman'):\n            return values\n\n        for url_param, field_name, cookie_name in self.env['utm.mixin'].tracking_fields():\n            if field_name in fields:\n                field = self._fields[field_name]\n                value = False\n                if request:\n                    # ir_http dispatch saves the url params in a cookie\n                    value = request.httprequest.cookies.get(cookie_name)\n                # if we receive a string for a many2one, we search/create the id\n                if field.type == 'many2one' and isinstance(value, pycompat.string_types) and value:\n                    Model = self.env[field.comodel_name]\n                    records = Model.search([('name', '=', value)], limit=1)\n                    if not records:\n                        records = Model.create({'name': value})\n                    value = records.id\n                if value:\n                    values[field_name] = value\n        return values\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "utm.py", "id": "84ef6cd3419e1640e969ac500373cee3", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/utm/models/utm.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}