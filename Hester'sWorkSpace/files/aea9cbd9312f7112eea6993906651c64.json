{"author": "django", "code": "from . import ValidationTestCase\nfrom .models import ModelToValidate\n\n\nclass TestModelsWithValidators(ValidationTestCase):\n    def test_custom_validator_passes_for_correct_value(self):\n        mtv = ModelToValidate(number=10, name='Some Name', f_with_custom_validator=42,\n                              f_with_iterable_of_validators=42)\n        self.assertIsNone(mtv.full_clean())\n\n    def test_custom_validator_raises_error_for_incorrect_value(self):\n        mtv = ModelToValidate(number=10, name='Some Name', f_with_custom_validator=12,\n                              f_with_iterable_of_validators=42)\n        self.assertFailsValidation(mtv.full_clean, ['f_with_custom_validator'])\n        self.assertFieldFailsValidationWithMessage(\n            mtv.full_clean,\n            'f_with_custom_validator',\n            ['This is not the answer to life, universe and everything!']\n        )\n\n    def test_field_validators_can_be_any_iterable(self):\n        mtv = ModelToValidate(number=10, name='Some Name', f_with_custom_validator=42,\n                              f_with_iterable_of_validators=12)\n        self.assertFailsValidation(mtv.full_clean, ['f_with_iterable_of_validators'])\n        self.assertFieldFailsValidationWithMessage(\n            mtv.full_clean,\n            'f_with_iterable_of_validators',\n            ['This is not the answer to life, universe and everything!']\n        )\n", "comments": "", "content": "from . import ValidationTestCase\nfrom .models import ModelToValidate\n\n\nclass TestModelsWithValidators(ValidationTestCase):\n    def test_custom_validator_passes_for_correct_value(self):\n        mtv = ModelToValidate(number=10, name='Some Name', f_with_custom_validator=42,\n                              f_with_iterable_of_validators=42)\n        self.assertIsNone(mtv.full_clean())\n\n    def test_custom_validator_raises_error_for_incorrect_value(self):\n        mtv = ModelToValidate(number=10, name='Some Name', f_with_custom_validator=12,\n                              f_with_iterable_of_validators=42)\n        self.assertFailsValidation(mtv.full_clean, ['f_with_custom_validator'])\n        self.assertFieldFailsValidationWithMessage(\n            mtv.full_clean,\n            'f_with_custom_validator',\n            ['This is not the answer to life, universe and everything!']\n        )\n\n    def test_field_validators_can_be_any_iterable(self):\n        mtv = ModelToValidate(number=10, name='Some Name', f_with_custom_validator=42,\n                              f_with_iterable_of_validators=12)\n        self.assertFailsValidation(mtv.full_clean, ['f_with_iterable_of_validators'])\n        self.assertFieldFailsValidationWithMessage(\n            mtv.full_clean,\n            'f_with_iterable_of_validators',\n            ['This is not the answer to life, universe and everything!']\n        )\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_validators.py", "id": "aea9cbd9312f7112eea6993906651c64", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/validation/test_validators.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}