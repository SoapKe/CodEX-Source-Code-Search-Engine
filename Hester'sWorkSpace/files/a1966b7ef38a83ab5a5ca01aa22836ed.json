{"author": "rushter", "code": "import logging\n\ntry:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\n\nfrom mla.metrics.metrics import accuracy\nfrom mla.svm.kernerls import Linear, RBF\nfrom mla.svm.svm import SVM\n\nlogging.basicConfig(level=logging.DEBUG)\n\n\ndef classification():\n    \n    X, y = make_classification(n_samples=1200, n_features=10, n_informative=5,\n                               random_state=1111, n_classes=2, class_sep=1.75,)\n    \n    y = (y * 2) - 1\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n                                                        random_state=1111)\n\n    for kernel in [RBF(gamma=0.1), Linear()]:\n        model = SVM(max_iter=500, kernel=kernel, C=0.6)\n        model.fit(X_train, y_train)\n        predictions = model.predict(X_test)\n        print('Classification accuracy (%s): %s'\n              % (kernel, accuracy(y_test, predictions)))\n\n\nif __name__ == '__main__':\n    classification()\n", "comments": "  generate random binary classification problem     convert   1  1  ", "content": "import logging\n\ntry:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\n\nfrom mla.metrics.metrics import accuracy\nfrom mla.svm.kernerls import Linear, RBF\nfrom mla.svm.svm import SVM\n\nlogging.basicConfig(level=logging.DEBUG)\n\n\ndef classification():\n    # Generate a random binary classification problem.\n    X, y = make_classification(n_samples=1200, n_features=10, n_informative=5,\n                               random_state=1111, n_classes=2, class_sep=1.75,)\n    # Convert y to {-1, 1}\n    y = (y * 2) - 1\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,\n                                                        random_state=1111)\n\n    for kernel in [RBF(gamma=0.1), Linear()]:\n        model = SVM(max_iter=500, kernel=kernel, C=0.6)\n        model.fit(X_train, y_train)\n        predictions = model.predict(X_test)\n        print('Classification accuracy (%s): %s'\n              % (kernel, accuracy(y_test, predictions)))\n\n\nif __name__ == '__main__':\n    classification()\n", "description": "Minimal and clean examples of machine learning algorithms", "file_name": "svm.py", "id": "a1966b7ef38a83ab5a5ca01aa22836ed", "language": "Python", "project_name": "MLAlgorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rushter-MLAlgorithms/rushter-MLAlgorithms-d398777/examples/svm.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:25:48Z", "url": "https://github.com/rushter/MLAlgorithms", "wiki": false}