{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\n\nclass StockMoveInvoice(AccountingTestCase):\n\n    def setUp(self):\n        super(StockMoveInvoice, self).setUp()\n        self.ProductProduct = self.env['product.product']\n        self.SaleOrder = self.env['sale.order']\n        self.AccountJournal = self.env['account.journal']\n\n        self.partner_18 = self.env.ref('base.res_partner_18')\n        self.pricelist_id = self.env.ref('product.list0')\n        self.product_11 = self.env.ref('product.product_product_11')\n        self.product_icecream = self.env.ref('stock.product_icecream')\n        self.product_uom_kgm = self.env.ref('product.product_uom_kgm')\n        self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n\n    def test_01_delivery_stock_move(self):\n        \n        \n        self.product_11.write({\n            'weight': 0.25,\n        })\n\n        self.sale_prepaid = self.SaleOrder.create({\n            'partner_id': self.partner_18.id,\n            'partner_invoice_id': self.partner_18.id,\n            'partner_shipping_id': self.partner_18.id,\n            'pricelist_id': self.pricelist_id.id,\n            'order_line': [(0, 0, {\n                'name': 'Ice Cream',\n                'product_id': self.product_icecream.id,\n                'product_uom_qty': 2,\n                'product_uom': self.product_uom_kgm.id,\n                'price_unit': 750.00,\n            })],\n            'carrier_id': self.normal_delivery.id\n        })\n\n        \n        self.sale_prepaid.get_delivery_price()\n        self.sale_prepaid.set_delivery_line()\n\n        \n        self.sale_prepaid.action_confirm()\n        self.sale_prepaid.action_invoice_create()\n\n        \n        self.assertEqual(len(self.sale_prepaid.invoice_ids), 1, \"Invoice not created.\")\n\n        \n\n        self.invoice = self.sale_prepaid.invoice_ids\n        self.invoice.action_invoice_open()\n\n        \n        self.invoice = self.sale_prepaid.invoice_ids\n        self.invoice.action_invoice_open()\n        self.journal = self.AccountJournal.search([('type', '=', 'cash'), ('company_id', '=', self.sale_prepaid.company_id.id)], limit=1)\n        self.invoice.pay_and_reconcile(self.journal, self.invoice.amount_total)\n\n        \n        self.assertNotEqual(self.sale_prepaid.invoice_count, 0, 'order not invoiced')\n        self.assertTrue(self.sale_prepaid.invoice_status == 'invoiced', 'order is not invoiced')\n        self.assertEqual(len(self.sale_prepaid.picking_ids), 1, 'pickings not generated')\n\n        \n        moves = self.sale_prepaid.picking_ids.move_lines\n        self.assertEqual(moves[0].product_qty, 2, 'wrong product_qty')\n        self.assertEqual(moves[0].weight, 2.0, 'wrong move weight')\n\n        \n        self.picking = self.sale_prepaid.picking_ids.action_done()\n", "comments": "      coding  utf 8        test stored fields stock moves computed invoice delivery flow    set weight ipod 16gb    i add delivery cost sales order    i confirm so     i check invoice created    i confirm invoice    i pay invoice     check so paying invoice    check stock moves    ship ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\n\nclass StockMoveInvoice(AccountingTestCase):\n\n    def setUp(self):\n        super(StockMoveInvoice, self).setUp()\n        self.ProductProduct = self.env['product.product']\n        self.SaleOrder = self.env['sale.order']\n        self.AccountJournal = self.env['account.journal']\n\n        self.partner_18 = self.env.ref('base.res_partner_18')\n        self.pricelist_id = self.env.ref('product.list0')\n        self.product_11 = self.env.ref('product.product_product_11')\n        self.product_icecream = self.env.ref('stock.product_icecream')\n        self.product_uom_kgm = self.env.ref('product.product_uom_kgm')\n        self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n\n    def test_01_delivery_stock_move(self):\n        # Test if the stored fields of stock moves are computed with invoice before delivery flow\n        # Set a weight on ipod 16GB\n        self.product_11.write({\n            'weight': 0.25,\n        })\n\n        self.sale_prepaid = self.SaleOrder.create({\n            'partner_id': self.partner_18.id,\n            'partner_invoice_id': self.partner_18.id,\n            'partner_shipping_id': self.partner_18.id,\n            'pricelist_id': self.pricelist_id.id,\n            'order_line': [(0, 0, {\n                'name': 'Ice Cream',\n                'product_id': self.product_icecream.id,\n                'product_uom_qty': 2,\n                'product_uom': self.product_uom_kgm.id,\n                'price_unit': 750.00,\n            })],\n            'carrier_id': self.normal_delivery.id\n        })\n\n        # I add delivery cost in Sales order\n        self.sale_prepaid.get_delivery_price()\n        self.sale_prepaid.set_delivery_line()\n\n        # I confirm the SO.\n        self.sale_prepaid.action_confirm()\n        self.sale_prepaid.action_invoice_create()\n\n        # I check that the invoice was created\n        self.assertEqual(len(self.sale_prepaid.invoice_ids), 1, \"Invoice not created.\")\n\n        # I confirm the invoice\n\n        self.invoice = self.sale_prepaid.invoice_ids\n        self.invoice.action_invoice_open()\n\n        # I pay the invoice.\n        self.invoice = self.sale_prepaid.invoice_ids\n        self.invoice.action_invoice_open()\n        self.journal = self.AccountJournal.search([('type', '=', 'cash'), ('company_id', '=', self.sale_prepaid.company_id.id)], limit=1)\n        self.invoice.pay_and_reconcile(self.journal, self.invoice.amount_total)\n\n        # Check the SO after paying the invoice\n        self.assertNotEqual(self.sale_prepaid.invoice_count, 0, 'order not invoiced')\n        self.assertTrue(self.sale_prepaid.invoice_status == 'invoiced', 'order is not invoiced')\n        self.assertEqual(len(self.sale_prepaid.picking_ids), 1, 'pickings not generated')\n\n        # Check the stock moves\n        moves = self.sale_prepaid.picking_ids.move_lines\n        self.assertEqual(moves[0].product_qty, 2, 'wrong product_qty')\n        self.assertEqual(moves[0].weight, 2.0, 'wrong move weight')\n\n        # Ship\n        self.picking = self.sale_prepaid.picking_ids.action_done()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_delivery_stock_move.py", "id": "eb574d5b806354cf42d14207f0c4d4ff", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/delivery/tests/test_delivery_stock_move.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}