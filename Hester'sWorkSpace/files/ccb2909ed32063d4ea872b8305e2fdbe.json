{"author": "django", "code": "import datetime\n\nfrom django.db import models\n\n\nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=80)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return \"%s the place\" % self.name\n\n\nclass Restaurant(Place):\n    serves_hot_dogs = models.BooleanField(default=False)\n    serves_pizza = models.BooleanField(default=False)\n\n    def __str__(self):\n        return \"%s the restaurant\" % self.name\n\n\nclass ItalianRestaurant(Restaurant):\n    serves_gnocchi = models.BooleanField(default=False)\n\n    def __str__(self):\n        return \"%s the italian restaurant\" % self.name\n\n\nclass ParkingLot(Place):\n    # An explicit link to the parent (we can control the attribute name).\n    parent = models.OneToOneField(Place, models.CASCADE, primary_key=True, parent_link=True)\n    capacity = models.IntegerField()\n\n    def __str__(self):\n        return \"%s the parking lot\" % self.name\n\n\nclass ParkingLot3(Place):\n    \n    primary_key = models.AutoField(primary_key=True)\n    parent = models.OneToOneField(Place, models.CASCADE, parent_link=True)\n\n\nclass ParkingLot4(models.Model):\n    \n    parent = models.OneToOneField(Place, models.CASCADE, parent_link=True)\n\n    class Meta:\n        abstract = True\n\n\nclass ParkingLot4A(ParkingLot4, Place):\n    pass\n\n\nclass ParkingLot4B(Place, ParkingLot4):\n    pass\n\n\nclass Supplier(models.Model):\n    name = models.CharField(max_length=50)\n    restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Wholesaler(Supplier):\n    retailer = models.ForeignKey(Supplier, models.CASCADE, related_name='wholesale_supplier')\n\n\nclass Parent(models.Model):\n    created = models.DateTimeField(default=datetime.datetime.now)\n\n\nclass Child(Parent):\n    name = models.CharField(max_length=10)\n\n\nclass SelfRefParent(models.Model):\n    parent_data = models.IntegerField()\n    self_data = models.ForeignKey('self', models.SET_NULL, null=True)\n\n\nclass SelfRefChild(SelfRefParent):\n    child_data = models.IntegerField()\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=100)\n    pub_date = models.DateTimeField()\n\n    class Meta:\n        ordering = ('-pub_date', 'headline')\n\n    def __str__(self):\n        return self.headline\n\n\nclass ArticleWithAuthor(Article):\n    author = models.CharField(max_length=100)\n\n\nclass M2MBase(models.Model):\n    articles = models.ManyToManyField(Article)\n\n\nclass M2MChild(M2MBase):\n    name = models.CharField(max_length=50)\n\n\nclass Evaluation(Article):\n    quality = models.IntegerField()\n\n    class Meta:\n        abstract = True\n\n\nclass QualityControl(Evaluation):\n    assignee = models.CharField(max_length=50)\n\n\nclass BaseM(models.Model):\n    base_name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.base_name\n\n\nclass DerivedM(BaseM):\n    customPK = models.IntegerField(primary_key=True)\n    derived_name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return \"PK = %d, base_name = %s, derived_name = %s\" % (\n            self.customPK, self.base_name, self.derived_name)\n\n\nclass AuditBase(models.Model):\n    planned_date = models.DateField()\n\n    class Meta:\n        abstract = True\n        verbose_name_plural = 'Audits'\n\n\nclass CertificationAudit(AuditBase):\n    class Meta(AuditBase.Meta):\n        abstract = True\n\n\nclass InternalCertificationAudit(CertificationAudit):\n    auditing_dept = models.CharField(max_length=20)\n\n\n\nclass Person(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n\nclass AbstractEvent(models.Model):\n    name = models.CharField(max_length=100)\n    attendees = models.ManyToManyField(Person, related_name=\"%(class)s_set\")\n\n    class Meta:\n        abstract = True\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n\nclass BirthdayParty(AbstractEvent):\n    pass\n\n\nclass BachelorParty(AbstractEvent):\n    pass\n\n\nclass MessyBachelorParty(BachelorParty):\n    pass\n\n\n\nclass SearchableLocation(models.Model):\n    keywords = models.CharField(max_length=255)\n\n\nclass Station(SearchableLocation):\n    name = models.CharField(max_length=128)\n\n    class Meta:\n        abstract = True\n\n\nclass BusStation(Station):\n    inbound = models.BooleanField(default=False)\n\n\nclass TrainStation(Station):\n    zone = models.IntegerField()\n\n\nclass User(models.Model):\n    username = models.CharField(max_length=30, unique=True)\n\n\nclass Profile(User):\n    profile_id = models.AutoField(primary_key=True)\n    extra = models.CharField(max_length=30, blank=True)\n\n\n# Check concrete + concrete -> concrete -> concrete\nclass Politician(models.Model):\n    politician_id = models.AutoField(primary_key=True)\n    title = models.CharField(max_length=50)\n\n\nclass Congressman(Person, Politician):\n    state = models.CharField(max_length=2)\n\n\nclass Senator(Congressman):\n    pass\n", "comments": "  an explicit link parent (we control attribute name)     the parent link connector need pk model     test parent link connector discovered abstract classes     abstract classes get m2m tables autocreated     check concrete    abstract    concrete inheritance    check concrete   concrete    concrete    concrete ", "content": "import datetime\n\nfrom django.db import models\n\n\nclass Place(models.Model):\n    name = models.CharField(max_length=50)\n    address = models.CharField(max_length=80)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return \"%s the place\" % self.name\n\n\nclass Restaurant(Place):\n    serves_hot_dogs = models.BooleanField(default=False)\n    serves_pizza = models.BooleanField(default=False)\n\n    def __str__(self):\n        return \"%s the restaurant\" % self.name\n\n\nclass ItalianRestaurant(Restaurant):\n    serves_gnocchi = models.BooleanField(default=False)\n\n    def __str__(self):\n        return \"%s the italian restaurant\" % self.name\n\n\nclass ParkingLot(Place):\n    # An explicit link to the parent (we can control the attribute name).\n    parent = models.OneToOneField(Place, models.CASCADE, primary_key=True, parent_link=True)\n    capacity = models.IntegerField()\n\n    def __str__(self):\n        return \"%s the parking lot\" % self.name\n\n\nclass ParkingLot3(Place):\n    # The parent_link connector need not be the pk on the model.\n    primary_key = models.AutoField(primary_key=True)\n    parent = models.OneToOneField(Place, models.CASCADE, parent_link=True)\n\n\nclass ParkingLot4(models.Model):\n    # Test parent_link connector can be discovered in abstract classes.\n    parent = models.OneToOneField(Place, models.CASCADE, parent_link=True)\n\n    class Meta:\n        abstract = True\n\n\nclass ParkingLot4A(ParkingLot4, Place):\n    pass\n\n\nclass ParkingLot4B(Place, ParkingLot4):\n    pass\n\n\nclass Supplier(models.Model):\n    name = models.CharField(max_length=50)\n    restaurant = models.ForeignKey(Restaurant, models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\n\nclass Wholesaler(Supplier):\n    retailer = models.ForeignKey(Supplier, models.CASCADE, related_name='wholesale_supplier')\n\n\nclass Parent(models.Model):\n    created = models.DateTimeField(default=datetime.datetime.now)\n\n\nclass Child(Parent):\n    name = models.CharField(max_length=10)\n\n\nclass SelfRefParent(models.Model):\n    parent_data = models.IntegerField()\n    self_data = models.ForeignKey('self', models.SET_NULL, null=True)\n\n\nclass SelfRefChild(SelfRefParent):\n    child_data = models.IntegerField()\n\n\nclass Article(models.Model):\n    headline = models.CharField(max_length=100)\n    pub_date = models.DateTimeField()\n\n    class Meta:\n        ordering = ('-pub_date', 'headline')\n\n    def __str__(self):\n        return self.headline\n\n\nclass ArticleWithAuthor(Article):\n    author = models.CharField(max_length=100)\n\n\nclass M2MBase(models.Model):\n    articles = models.ManyToManyField(Article)\n\n\nclass M2MChild(M2MBase):\n    name = models.CharField(max_length=50)\n\n\nclass Evaluation(Article):\n    quality = models.IntegerField()\n\n    class Meta:\n        abstract = True\n\n\nclass QualityControl(Evaluation):\n    assignee = models.CharField(max_length=50)\n\n\nclass BaseM(models.Model):\n    base_name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.base_name\n\n\nclass DerivedM(BaseM):\n    customPK = models.IntegerField(primary_key=True)\n    derived_name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return \"PK = %d, base_name = %s, derived_name = %s\" % (\n            self.customPK, self.base_name, self.derived_name)\n\n\nclass AuditBase(models.Model):\n    planned_date = models.DateField()\n\n    class Meta:\n        abstract = True\n        verbose_name_plural = 'Audits'\n\n\nclass CertificationAudit(AuditBase):\n    class Meta(AuditBase.Meta):\n        abstract = True\n\n\nclass InternalCertificationAudit(CertificationAudit):\n    auditing_dept = models.CharField(max_length=20)\n\n\n# Abstract classes don't get m2m tables autocreated.\nclass Person(models.Model):\n    name = models.CharField(max_length=100)\n\n    class Meta:\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n\nclass AbstractEvent(models.Model):\n    name = models.CharField(max_length=100)\n    attendees = models.ManyToManyField(Person, related_name=\"%(class)s_set\")\n\n    class Meta:\n        abstract = True\n        ordering = ('name',)\n\n    def __str__(self):\n        return self.name\n\n\nclass BirthdayParty(AbstractEvent):\n    pass\n\n\nclass BachelorParty(AbstractEvent):\n    pass\n\n\nclass MessyBachelorParty(BachelorParty):\n    pass\n\n\n# Check concrete -> abstract -> concrete inheritance\nclass SearchableLocation(models.Model):\n    keywords = models.CharField(max_length=255)\n\n\nclass Station(SearchableLocation):\n    name = models.CharField(max_length=128)\n\n    class Meta:\n        abstract = True\n\n\nclass BusStation(Station):\n    inbound = models.BooleanField(default=False)\n\n\nclass TrainStation(Station):\n    zone = models.IntegerField()\n\n\nclass User(models.Model):\n    username = models.CharField(max_length=30, unique=True)\n\n\nclass Profile(User):\n    profile_id = models.AutoField(primary_key=True)\n    extra = models.CharField(max_length=30, blank=True)\n\n\n# Check concrete + concrete -> concrete -> concrete\nclass Politician(models.Model):\n    politician_id = models.AutoField(primary_key=True)\n    title = models.CharField(max_length=50)\n\n\nclass Congressman(Person, Politician):\n    state = models.CharField(max_length=2)\n\n\nclass Senator(Congressman):\n    pass\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "ccb2909ed32063d4ea872b8305e2fdbe", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/model_inheritance_regress/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}