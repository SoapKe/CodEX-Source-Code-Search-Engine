{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom collections import OrderedDict\nfrom functools import partial\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.safe import safe_execute, trim, trim_dict, get_path\n\na_very_long_string = 'a' * 1024\n\n\nclass TrimTest(TestCase):\n    def test_simple_string(self):\n        assert trim(a_very_long_string) == a_very_long_string[:509] + '...'\n\n    def test_list_of_strings(self):\n        assert trim([a_very_long_string, a_very_long_string]) == [\n            a_very_long_string[:507] + '...',\n        ]\n\n    def test_nonascii(self):\n        assert trim({'x': '\\xc3\\xbc'}) == {'x': '\\xc3\\xbc'}\n        assert trim(['x', '\\xc3\\xbc']) == ['x', '\\xc3\\xbc']\n\n    def test_idempotent(self):\n        trm = partial(trim, max_depth=2)\n        a = {'a': {'b': {'c': {'d': 1}}}}\n        assert trm(a) == {'a': {'b': {'c': '{\"d\":1}'}}}\n        assert trm(trm(trm(trm(a)))) == trm(a)\n\n    def test_sorted_trim(self):\n        \n        \n        alpha = OrderedDict([('a', '12345'), ('z', '12345')])\n        reverse = OrderedDict([('z', '12345'), ('a', '12345')])\n        trm = partial(trim, max_size=12)\n        expected = {'a': '12345', 'z': '1...'}\n\n        assert trm(alpha) == expected\n        assert trm(reverse) == expected\n\n    def test_max_depth(self):\n        trm = partial(trim, max_depth=2)\n        a = {'a': {'b': {'c': 'd'}}}\n        assert trm(a) == a\n\n        a = {'a': {'b': {'c': u'd'}}}\n        assert trm(a) == {'a': {'b': {'c': 'd'}}}\n\n        a = {'a': {'b': {'c': {u'd': u'e'}}}}\n        assert trm(a) == {'a': {'b': {'c': '{\"d\":\"e\"}'}}}\n\n        a = {'a': {'b': {'c': []}}}\n        assert trm(a) == {'a': {'b': {'c': '[]'}}}\n\n\nclass TrimDictTest(TestCase):\n    def test_large_dict(self):\n        value = dict((k, k) for k in range(500))\n        trim_dict(value)\n        assert len(value) == 50\n\n\nclass SafeExecuteTest(TestCase):\n    def test_with_nameless_function(self):\n        assert safe_execute(lambda a: a, 1) == 1\n        assert safe_execute(lambda: a) is None  \n\n    def test_with_simple_function(self):\n        def simple(a):\n            return a\n\n        assert safe_execute(simple, 1) == 1\n\n        def simple(a):\n            raise Exception()\n\n        assert safe_execute(simple, 1) is None\n\n    def test_with_instance_method(self):\n        class Foo(object):\n            def simple(self, a):\n                return a\n\n        assert safe_execute(Foo().simple, 1) == 1\n\n        class Foo(object):\n            def simple(self, a):\n                raise Exception()\n\n        assert safe_execute(Foo().simple, 1) is None\n\n\nclass GetChainTest(TestCase):\n    def test_get_path(self):\n        assert get_path({}, ['a']) is None\n        assert get_path({}, ['a'], 1) == 1\n        assert get_path({'a': 2}, ['a']) == 2\n        assert get_path({'a': 2}, ['b']) is None\n        assert get_path({'a': 2}, ['b'], 1) == 1\n        assert get_path({'a': {'b': []}}, ['a', 'b']) == []\n        assert get_path({'a': []}, ['a', 'b']) is None\n", "comments": "  trim always trim keys alpha order    regardless original order     noqa ", "content": "from __future__ import absolute_import\n\nfrom collections import OrderedDict\nfrom functools import partial\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.safe import safe_execute, trim, trim_dict, get_path\n\na_very_long_string = 'a' * 1024\n\n\nclass TrimTest(TestCase):\n    def test_simple_string(self):\n        assert trim(a_very_long_string) == a_very_long_string[:509] + '...'\n\n    def test_list_of_strings(self):\n        assert trim([a_very_long_string, a_very_long_string]) == [\n            a_very_long_string[:507] + '...',\n        ]\n\n    def test_nonascii(self):\n        assert trim({'x': '\\xc3\\xbc'}) == {'x': '\\xc3\\xbc'}\n        assert trim(['x', '\\xc3\\xbc']) == ['x', '\\xc3\\xbc']\n\n    def test_idempotent(self):\n        trm = partial(trim, max_depth=2)\n        a = {'a': {'b': {'c': {'d': 1}}}}\n        assert trm(a) == {'a': {'b': {'c': '{\"d\":1}'}}}\n        assert trm(trm(trm(trm(a)))) == trm(a)\n\n    def test_sorted_trim(self):\n        # Trim should always trim the keys in alpha order\n        # regardless of the original order.\n        alpha = OrderedDict([('a', '12345'), ('z', '12345')])\n        reverse = OrderedDict([('z', '12345'), ('a', '12345')])\n        trm = partial(trim, max_size=12)\n        expected = {'a': '12345', 'z': '1...'}\n\n        assert trm(alpha) == expected\n        assert trm(reverse) == expected\n\n    def test_max_depth(self):\n        trm = partial(trim, max_depth=2)\n        a = {'a': {'b': {'c': 'd'}}}\n        assert trm(a) == a\n\n        a = {'a': {'b': {'c': u'd'}}}\n        assert trm(a) == {'a': {'b': {'c': 'd'}}}\n\n        a = {'a': {'b': {'c': {u'd': u'e'}}}}\n        assert trm(a) == {'a': {'b': {'c': '{\"d\":\"e\"}'}}}\n\n        a = {'a': {'b': {'c': []}}}\n        assert trm(a) == {'a': {'b': {'c': '[]'}}}\n\n\nclass TrimDictTest(TestCase):\n    def test_large_dict(self):\n        value = dict((k, k) for k in range(500))\n        trim_dict(value)\n        assert len(value) == 50\n\n\nclass SafeExecuteTest(TestCase):\n    def test_with_nameless_function(self):\n        assert safe_execute(lambda a: a, 1) == 1\n        assert safe_execute(lambda: a) is None  # NOQA\n\n    def test_with_simple_function(self):\n        def simple(a):\n            return a\n\n        assert safe_execute(simple, 1) == 1\n\n        def simple(a):\n            raise Exception()\n\n        assert safe_execute(simple, 1) is None\n\n    def test_with_instance_method(self):\n        class Foo(object):\n            def simple(self, a):\n                return a\n\n        assert safe_execute(Foo().simple, 1) == 1\n\n        class Foo(object):\n            def simple(self, a):\n                raise Exception()\n\n        assert safe_execute(Foo().simple, 1) is None\n\n\nclass GetChainTest(TestCase):\n    def test_get_path(self):\n        assert get_path({}, ['a']) is None\n        assert get_path({}, ['a'], 1) == 1\n        assert get_path({'a': 2}, ['a']) == 2\n        assert get_path({'a': 2}, ['b']) is None\n        assert get_path({'a': 2}, ['b'], 1) == 1\n        assert get_path({'a': {'b': []}}, ['a', 'b']) == []\n        assert get_path({'a': []}, ['a', 'b']) is None\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_safe.py", "id": "c3939e540a4b00ba4a6edbc65621ee5d", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_safe.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}