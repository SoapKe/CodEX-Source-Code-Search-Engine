{"author": "HelloZeroNet", "code": "import hashlib\nimport os\n\nimport pytest\n\nfrom Bootstrapper import BootstrapperPlugin\nfrom Bootstrapper.BootstrapperDb import BootstrapperDb\nfrom Peer import Peer\nfrom Crypt import CryptRsa\nfrom util import helper\n\n\n@pytest.fixture()\ndef bootstrapper_db(request):\n    BootstrapperPlugin.db.close()\n    BootstrapperPlugin.db = BootstrapperDb()\n    BootstrapperPlugin.db.createTables()  \n    BootstrapperPlugin.db.cur.logging = True\n\n    def cleanup():\n        BootstrapperPlugin.db.close()\n        os.unlink(BootstrapperPlugin.db.db_path)\n\n    request.addfinalizer(cleanup)\n    return BootstrapperPlugin.db\n\n\n@pytest.mark.usefixtures(\"resetSettings\")\nclass TestBootstrapper:\n    def testIp4(self, file_server, bootstrapper_db):\n        peer = Peer(\"127.0.0.1\", 1544, connection_server=file_server)\n        hash1 = hashlib.sha256(\"site1\").digest()\n        hash2 = hashlib.sha256(\"site2\").digest()\n        hash3 = hashlib.sha256(\"site3\").digest()\n\n        \n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1, hash2],\n            \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n\n        assert len(res[\"peers\"][0][\"ip4\"]) == 0  \n\n        \n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=15441, hashes=[hash1, hash2], delete_missing_hashes=True)\n\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1, hash2],\n            \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n        assert len(res[\"peers\"][1][\"ip4\"]) == 1\n\n        \n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=15441, hashes=[hash1], delete_missing_hashes=True)\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1, hash2],\n            \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n        assert len(res[\"peers\"][1][\"ip4\"]) == 0\n\n        \n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=15441, hashes=[hash1, hash2, hash3], delete_missing_hashes=True)\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1, hash2, hash3],\n            \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n        assert len(res[\"peers\"][1][\"ip4\"]) == 1\n        assert len(res[\"peers\"][2][\"ip4\"]) == 1\n\n        \n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1], \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n\n        \n        assert bootstrapper_db.execute(\"SELECT COUNT(*) AS num FROM peer\").fetchone()[\"num\"] == 1  \n\n        \n        bootstrapper_db.execute(\"DELETE FROM peer WHERE ip4 = '1.2.3.4'\")\n        assert bootstrapper_db.execute(\"SELECT COUNT(*) AS num FROM peer_to_hash\").fetchone()[\"num\"] == 0\n\n        assert bootstrapper_db.execute(\"SELECT COUNT(*) AS num FROM hash\").fetchone()[\"num\"] == 3  \n        assert bootstrapper_db.execute(\"SELECT COUNT(*) AS num FROM peer\").fetchone()[\"num\"] == 0  \n\n    def testPassive(self, file_server, bootstrapper_db):\n        peer = Peer(\"127.0.0.1\", 1544, connection_server=file_server)\n        hash1 = hashlib.sha256(\"hash1\").digest()\n\n        bootstrapper_db.peerAnnounce(ip4=None, port=15441, hashes=[hash1])\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1], \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": []\n        })\n\n        assert len(res[\"peers\"][0][\"ip4\"]) == 0  \n\n    def testAddOnion(self, file_server, site, bootstrapper_db, tor_manager):\n        onion1 = tor_manager.addOnion()\n        onion2 = tor_manager.addOnion()\n        peer = Peer(\"127.0.0.1\", 1544, connection_server=file_server)\n        hash1 = hashlib.sha256(\"site1\").digest()\n        hash2 = hashlib.sha256(\"site2\").digest()\n        hash3 = hashlib.sha256(\"site3\").digest()\n\n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=1234, hashes=[hash1, hash2, hash3])\n        res = peer.request(\"announce\", {\n            \"onions\": [onion1, onion1, onion2],\n            \"hashes\": [hash1, hash2, hash3], \"port\": 15441, \"need_types\": [\"ip4\", \"onion\"], \"need_num\": 10, \"add\": [\"onion\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n\n        \n        site_peers = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash1)\n        assert len(site_peers[\"onion\"]) == 0\n        assert \"onion_sign_this\" in res\n\n        \n        sign1 = CryptRsa.sign(res[\"onion_sign_this\"], tor_manager.getPrivatekey(onion1))\n        sign2 = CryptRsa.sign(res[\"onion_sign_this\"], tor_manager.getPrivatekey(onion2))\n\n        # Bad sign (different address)\n        res = peer.request(\"announce\", {\n            \"onions\": [onion1], \"onion_sign_this\": res[\"onion_sign_this\"],\n            \"onion_signs\": {tor_manager.getPublickey(onion2): sign2},\n            \"hashes\": [hash1], \"port\": 15441, \"need_types\": [\"ip4\", \"onion\"], \"need_num\": 10, \"add\": [\"onion\"]\n        })\n        assert \"onion_sign_this\" in res\n        site_peers1 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash1)\n        assert len(site_peers1[\"onion\"]) == 0  \n\n        # Bad sign (missing one)\n        res = peer.request(\"announce\", {\n            \"onions\": [onion1, onion1, onion2], \"onion_sign_this\": res[\"onion_sign_this\"],\n            \"onion_signs\": {tor_manager.getPublickey(onion1): sign1},\n            \"hashes\": [hash1, hash2, hash3], \"port\": 15441, \"need_types\": [\"ip4\", \"onion\"], \"need_num\": 10, \"add\": [\"onion\"]\n        })\n        assert \"onion_sign_this\" in res\n        site_peers1 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash1)\n        assert len(site_peers1[\"onion\"]) == 0  \n\n        \n        res = peer.request(\"announce\", {\n            \"onions\": [onion1, onion1, onion2], \"onion_sign_this\": res[\"onion_sign_this\"],\n            \"onion_signs\": {tor_manager.getPublickey(onion1): sign1, tor_manager.getPublickey(onion2): sign2},\n            \"hashes\": [hash1, hash2, hash3], \"port\": 15441, \"need_types\": [\"ip4\", \"onion\"], \"need_num\": 10, \"add\": [\"onion\"]\n        })\n        assert \"onion_sign_this\" not in res\n\n        \n        site_peers1 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash1)\n        assert len(site_peers1[\"onion\"]) == 1\n        site_peers2 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash2)\n        assert len(site_peers2[\"onion\"]) == 1\n        site_peers3 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash3)\n        assert len(site_peers3[\"onion\"]) == 1\n\n        assert site_peers1[\"onion\"][0] == site_peers2[\"onion\"][0]\n        assert site_peers2[\"onion\"][0] != site_peers3[\"onion\"][0]\n        assert helper.unpackOnionAddress(site_peers1[\"onion\"][0])[0] == onion1+\".onion\"\n        assert helper.unpackOnionAddress(site_peers2[\"onion\"][0])[0] == onion1+\".onion\"\n        assert helper.unpackOnionAddress(site_peers3[\"onion\"][0])[0] == onion2+\".onion\"\n\n        tor_manager.delOnion(onion1)\n        tor_manager.delOnion(onion2)\n\n\n    def testRequestPeers(self, file_server, site, bootstrapper_db, tor_manager):\n        site.connection_server = file_server\n        site.connection_server.tor_manager = tor_manager\n        hash = hashlib.sha256(site.address).digest()\n\n        \n        assert len(site.peers) == 0\n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=1234, hashes=[hash])\n        site.announceTracker(\"zero\", \"127.0.0.1:1544\")\n        assert len(site.peers) == 1\n\n        \n        bootstrapper_db.peerAnnounce(onion=\"bka4ht2bzxchy44r\", port=1234, hashes=[hash], onion_signed=True)\n        site.announceTracker(\"zero\", \"127.0.0.1:1544\")\n        assert len(site.peers) == 2\n        assert \"bka4ht2bzxchy44r.onion:1234\" in site.peers\n", "comments": "  reset db    verify empty result    empty result    verify added peer previous request    hash2 deleted 1 2 3 4    announce 3 hash    single hash announce    test db cleanup    127 0 0 1 never get added db    delete peers    3 sites    0 peer    empty result    onion address added yet    sign nonces    bad sign (different address)    not added    bad sign (missing one)    not added    good sign    onion addresses added    request peers tracker    test onion address store ", "content": "import hashlib\nimport os\n\nimport pytest\n\nfrom Bootstrapper import BootstrapperPlugin\nfrom Bootstrapper.BootstrapperDb import BootstrapperDb\nfrom Peer import Peer\nfrom Crypt import CryptRsa\nfrom util import helper\n\n\n@pytest.fixture()\ndef bootstrapper_db(request):\n    BootstrapperPlugin.db.close()\n    BootstrapperPlugin.db = BootstrapperDb()\n    BootstrapperPlugin.db.createTables()  # Reset db\n    BootstrapperPlugin.db.cur.logging = True\n\n    def cleanup():\n        BootstrapperPlugin.db.close()\n        os.unlink(BootstrapperPlugin.db.db_path)\n\n    request.addfinalizer(cleanup)\n    return BootstrapperPlugin.db\n\n\n@pytest.mark.usefixtures(\"resetSettings\")\nclass TestBootstrapper:\n    def testIp4(self, file_server, bootstrapper_db):\n        peer = Peer(\"127.0.0.1\", 1544, connection_server=file_server)\n        hash1 = hashlib.sha256(\"site1\").digest()\n        hash2 = hashlib.sha256(\"site2\").digest()\n        hash3 = hashlib.sha256(\"site3\").digest()\n\n        # Verify empty result\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1, hash2],\n            \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n\n        assert len(res[\"peers\"][0][\"ip4\"]) == 0  # Empty result\n\n        # Verify added peer on previous request\n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=15441, hashes=[hash1, hash2], delete_missing_hashes=True)\n\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1, hash2],\n            \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n        assert len(res[\"peers\"][1][\"ip4\"]) == 1\n\n        # hash2 deleted from 1.2.3.4\n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=15441, hashes=[hash1], delete_missing_hashes=True)\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1, hash2],\n            \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n        assert len(res[\"peers\"][1][\"ip4\"]) == 0\n\n        # Announce 3 hash again\n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=15441, hashes=[hash1, hash2, hash3], delete_missing_hashes=True)\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1, hash2, hash3],\n            \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n        assert len(res[\"peers\"][1][\"ip4\"]) == 1\n        assert len(res[\"peers\"][2][\"ip4\"]) == 1\n\n        # Single hash announce\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1], \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": [\"ip4\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n\n        # Test DB cleanup\n        assert bootstrapper_db.execute(\"SELECT COUNT(*) AS num FROM peer\").fetchone()[\"num\"] == 1  # 127.0.0.1 never get added to db\n\n        # Delete peers\n        bootstrapper_db.execute(\"DELETE FROM peer WHERE ip4 = '1.2.3.4'\")\n        assert bootstrapper_db.execute(\"SELECT COUNT(*) AS num FROM peer_to_hash\").fetchone()[\"num\"] == 0\n\n        assert bootstrapper_db.execute(\"SELECT COUNT(*) AS num FROM hash\").fetchone()[\"num\"] == 3  # 3 sites\n        assert bootstrapper_db.execute(\"SELECT COUNT(*) AS num FROM peer\").fetchone()[\"num\"] == 0  # 0 peer\n\n    def testPassive(self, file_server, bootstrapper_db):\n        peer = Peer(\"127.0.0.1\", 1544, connection_server=file_server)\n        hash1 = hashlib.sha256(\"hash1\").digest()\n\n        bootstrapper_db.peerAnnounce(ip4=None, port=15441, hashes=[hash1])\n        res = peer.request(\"announce\", {\n            \"hashes\": [hash1], \"port\": 15441, \"need_types\": [\"ip4\"], \"need_num\": 10, \"add\": []\n        })\n\n        assert len(res[\"peers\"][0][\"ip4\"]) == 0  # Empty result\n\n    def testAddOnion(self, file_server, site, bootstrapper_db, tor_manager):\n        onion1 = tor_manager.addOnion()\n        onion2 = tor_manager.addOnion()\n        peer = Peer(\"127.0.0.1\", 1544, connection_server=file_server)\n        hash1 = hashlib.sha256(\"site1\").digest()\n        hash2 = hashlib.sha256(\"site2\").digest()\n        hash3 = hashlib.sha256(\"site3\").digest()\n\n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=1234, hashes=[hash1, hash2, hash3])\n        res = peer.request(\"announce\", {\n            \"onions\": [onion1, onion1, onion2],\n            \"hashes\": [hash1, hash2, hash3], \"port\": 15441, \"need_types\": [\"ip4\", \"onion\"], \"need_num\": 10, \"add\": [\"onion\"]\n        })\n        assert len(res[\"peers\"][0][\"ip4\"]) == 1\n\n        # Onion address not added yet\n        site_peers = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash1)\n        assert len(site_peers[\"onion\"]) == 0\n        assert \"onion_sign_this\" in res\n\n        # Sign the nonces\n        sign1 = CryptRsa.sign(res[\"onion_sign_this\"], tor_manager.getPrivatekey(onion1))\n        sign2 = CryptRsa.sign(res[\"onion_sign_this\"], tor_manager.getPrivatekey(onion2))\n\n        # Bad sign (different address)\n        res = peer.request(\"announce\", {\n            \"onions\": [onion1], \"onion_sign_this\": res[\"onion_sign_this\"],\n            \"onion_signs\": {tor_manager.getPublickey(onion2): sign2},\n            \"hashes\": [hash1], \"port\": 15441, \"need_types\": [\"ip4\", \"onion\"], \"need_num\": 10, \"add\": [\"onion\"]\n        })\n        assert \"onion_sign_this\" in res\n        site_peers1 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash1)\n        assert len(site_peers1[\"onion\"]) == 0  # Not added\n\n        # Bad sign (missing one)\n        res = peer.request(\"announce\", {\n            \"onions\": [onion1, onion1, onion2], \"onion_sign_this\": res[\"onion_sign_this\"],\n            \"onion_signs\": {tor_manager.getPublickey(onion1): sign1},\n            \"hashes\": [hash1, hash2, hash3], \"port\": 15441, \"need_types\": [\"ip4\", \"onion\"], \"need_num\": 10, \"add\": [\"onion\"]\n        })\n        assert \"onion_sign_this\" in res\n        site_peers1 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash1)\n        assert len(site_peers1[\"onion\"]) == 0  # Not added\n\n        # Good sign\n        res = peer.request(\"announce\", {\n            \"onions\": [onion1, onion1, onion2], \"onion_sign_this\": res[\"onion_sign_this\"],\n            \"onion_signs\": {tor_manager.getPublickey(onion1): sign1, tor_manager.getPublickey(onion2): sign2},\n            \"hashes\": [hash1, hash2, hash3], \"port\": 15441, \"need_types\": [\"ip4\", \"onion\"], \"need_num\": 10, \"add\": [\"onion\"]\n        })\n        assert \"onion_sign_this\" not in res\n\n        # Onion addresses added\n        site_peers1 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash1)\n        assert len(site_peers1[\"onion\"]) == 1\n        site_peers2 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash2)\n        assert len(site_peers2[\"onion\"]) == 1\n        site_peers3 = bootstrapper_db.peerList(ip4=\"1.2.3.4\", port=1234, hash=hash3)\n        assert len(site_peers3[\"onion\"]) == 1\n\n        assert site_peers1[\"onion\"][0] == site_peers2[\"onion\"][0]\n        assert site_peers2[\"onion\"][0] != site_peers3[\"onion\"][0]\n        assert helper.unpackOnionAddress(site_peers1[\"onion\"][0])[0] == onion1+\".onion\"\n        assert helper.unpackOnionAddress(site_peers2[\"onion\"][0])[0] == onion1+\".onion\"\n        assert helper.unpackOnionAddress(site_peers3[\"onion\"][0])[0] == onion2+\".onion\"\n\n        tor_manager.delOnion(onion1)\n        tor_manager.delOnion(onion2)\n\n\n    def testRequestPeers(self, file_server, site, bootstrapper_db, tor_manager):\n        site.connection_server = file_server\n        site.connection_server.tor_manager = tor_manager\n        hash = hashlib.sha256(site.address).digest()\n\n        # Request peers from tracker\n        assert len(site.peers) == 0\n        bootstrapper_db.peerAnnounce(ip4=\"1.2.3.4\", port=1234, hashes=[hash])\n        site.announceTracker(\"zero\", \"127.0.0.1:1544\")\n        assert len(site.peers) == 1\n\n        # Test onion address store\n        bootstrapper_db.peerAnnounce(onion=\"bka4ht2bzxchy44r\", port=1234, hashes=[hash], onion_signed=True)\n        site.announceTracker(\"zero\", \"127.0.0.1:1544\")\n        assert len(site.peers) == 2\n        assert \"bka4ht2bzxchy44r.onion:1234\" in site.peers\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "TestBootstrapper.py", "id": "38de1e201d897061a4f28ea06aa8f192", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/disabled-Bootstrapper/Test/TestBootstrapper.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}