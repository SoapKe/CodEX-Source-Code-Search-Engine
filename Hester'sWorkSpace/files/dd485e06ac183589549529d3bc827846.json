{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.no_command import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture(autouse=True)\ndef get_all_executables(mocker):\n    mocker.patch('thefuck.rules.no_command.get_all_executables',\n                 return_value=['vim', 'fsck', 'git', 'go'])\n\n\n@pytest.fixture(autouse=True)\ndef history_without_current(mocker):\n    return mocker.patch(\n        'thefuck.rules.no_command.get_valid_history_without_current',\n        return_value=['git commit'])\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, output', [\n    ('vom file.py', 'vom: not found'),\n    ('fucck', 'fucck: not found'),\n    ('got commit', 'got: command not found')])\ndef test_match(mocker, script, output):\n    mocker.patch('thefuck.rules.no_command.which', return_value=None)\n\n    assert match(Command(script, output))\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, output, which', [\n    ('qweqwe', 'qweqwe: not found', None),\n    ('vom file.py', 'some text', None),\n    ('vim file.py', 'vim: not found', 'vim')])\ndef test_not_match(mocker, script, output, which):\n    mocker.patch('thefuck.rules.no_command.which', return_value=which)\n\n    assert not match(Command(script, output))\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, result', [\n    ('vom file.py', ['vim file.py']),\n    ('fucck', ['fsck']),\n    ('got commit', ['git commit', 'go commit'])])\ndef test_get_new_command(script, result):\n    assert get_new_command(Command(script, '')) == result\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.no_command import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture(autouse=True)\ndef get_all_executables(mocker):\n    mocker.patch('thefuck.rules.no_command.get_all_executables',\n                 return_value=['vim', 'fsck', 'git', 'go'])\n\n\n@pytest.fixture(autouse=True)\ndef history_without_current(mocker):\n    return mocker.patch(\n        'thefuck.rules.no_command.get_valid_history_without_current',\n        return_value=['git commit'])\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, output', [\n    ('vom file.py', 'vom: not found'),\n    ('fucck', 'fucck: not found'),\n    ('got commit', 'got: command not found')])\ndef test_match(mocker, script, output):\n    mocker.patch('thefuck.rules.no_command.which', return_value=None)\n\n    assert match(Command(script, output))\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, output, which', [\n    ('qweqwe', 'qweqwe: not found', None),\n    ('vom file.py', 'some text', None),\n    ('vim file.py', 'vim: not found', 'vim')])\ndef test_not_match(mocker, script, output, which):\n    mocker.patch('thefuck.rules.no_command.which', return_value=which)\n\n    assert not match(Command(script, output))\n\n\n@pytest.mark.usefixtures('no_memoize')\n@pytest.mark.parametrize('script, result', [\n    ('vom file.py', ['vim file.py']),\n    ('fucck', ['fsck']),\n    ('got commit', ['git commit', 'go commit'])])\ndef test_get_new_command(script, result):\n    assert get_new_command(Command(script, '')) == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_no_command.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_no_command.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}