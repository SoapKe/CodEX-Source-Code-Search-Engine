{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\nr\"\"\"CelebA dataset formating.\n\nDownload img_align_celeba.zip from\nhttp://mmlab.ie.cuhk.edu.hk/projects/CelebA.html under the\nlink \"Align&Cropped Images\" in the \"Img\" directory and list_eval_partition.txt\nunder the link \"Train/Val/Test Partitions\" in the \"Eval\" directory. Then do:\nunzip img_align_celeba.zip\n\nUse the script as follow:\npython celeba_formatting.py \\\n    --partition_fn [PARTITION_FILE_PATH] \\\n    --file_out [OUTPUT_FILE_PATH_PREFIX] \\\n    --fn_root [CELEBA_FOLDER] \\\n    --set [SUBSET_INDEX]\n\n\"\"\"\n\nfrom __future__ import print_function\n\nimport os\nimport os.path\n\nimport scipy.io\nimport scipy.io.wavfile\nimport scipy.ndimage\nimport tensorflow as tf\n\n\ntf.flags.DEFINE_string(\"file_out\", \"\",\n                       \"Filename of the output .tfrecords file.\")\ntf.flags.DEFINE_string(\"fn_root\", \"\", \"Name of root file path.\")\ntf.flags.DEFINE_string(\"partition_fn\", \"\", \"Partition file path.\")\ntf.flags.DEFINE_string(\"set\", \"\", \"Name of subset.\")\n\nFLAGS = tf.flags.FLAGS\n\n\ndef _int64_feature(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef _bytes_feature(value):\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef main():\n    \"\"\"Main converter function.\"\"\"\n     Celeb A\n    with open(FLAGS.partition_fn, \"r\") as infile:\n        img_fn_list = infile.readlines()\n    img_fn_list = [elem.strip().split() for elem in img_fn_list]\n    img_fn_list = [elem[0] for elem in img_fn_list if elem[1] == FLAGS.set]\n    fn_root = FLAGS.fn_root\n    num_examples = len(img_fn_list)\n\n    file_out = \"%s.tfrecords\" % FLAGS.file_out\n    writer = tf.python_io.TFRecordWriter(file_out)\n    for example_idx, img_fn in enumerate(img_fn_list):\n        if example_idx % 1000 == 0:\n            print(example_idx, \"/\", num_examples)\n        image_raw = scipy.ndimage.imread(os.path.join(fn_root, img_fn))\n        rows = image_raw.shape[0]\n        cols = image_raw.shape[1]\n        depth = image_raw.shape[2]\n        image_raw = image_raw.tostring()\n        example = tf.train.Example(\n            features=tf.train.Features(\n                feature={\n                    \"height\": _int64_feature(rows),\n                    \"width\": _int64_feature(cols),\n                    \"depth\": _int64_feature(depth),\n                    \"image_raw\": _bytes_feature(image_raw)\n                }\n            )\n        )\n        writer.write(example.SerializeToString())\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "   celeba dataset formating   download img align celeba zip http   mmlab ie cuhk edu hk projects celeba html link  align cropped images   img  directory list eval partition txt link  train val test partitions   eval  directory  then  unzip img align celeba zip  use script follow  python celeba formatting py         partition fn  partition file path          file  output file path prefix          fn root  celeba folder          set  subset index          future   import print function  import os import os path  import scipy io import scipy io wavfile import scipy ndimage import tensorflow tf   tf flags define string( file                               filename output  tfrecords file  ) tf flags define string( fn root        name root file path  ) tf flags define string( partition fn        partition file path  ) tf flags define string( set        name subset  )  flags   tf flags flags   def  int64 feature(value)      return tf train feature(int64 list tf train int64list(value  value ))   def  bytes feature(value)      return tf train feature(bytes list tf train byteslist(value  value ))   def main()         main converter function        copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       celeb a ", "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\nr\"\"\"CelebA dataset formating.\n\nDownload img_align_celeba.zip from\nhttp://mmlab.ie.cuhk.edu.hk/projects/CelebA.html under the\nlink \"Align&Cropped Images\" in the \"Img\" directory and list_eval_partition.txt\nunder the link \"Train/Val/Test Partitions\" in the \"Eval\" directory. Then do:\nunzip img_align_celeba.zip\n\nUse the script as follow:\npython celeba_formatting.py \\\n    --partition_fn [PARTITION_FILE_PATH] \\\n    --file_out [OUTPUT_FILE_PATH_PREFIX] \\\n    --fn_root [CELEBA_FOLDER] \\\n    --set [SUBSET_INDEX]\n\n\"\"\"\n\nfrom __future__ import print_function\n\nimport os\nimport os.path\n\nimport scipy.io\nimport scipy.io.wavfile\nimport scipy.ndimage\nimport tensorflow as tf\n\n\ntf.flags.DEFINE_string(\"file_out\", \"\",\n                       \"Filename of the output .tfrecords file.\")\ntf.flags.DEFINE_string(\"fn_root\", \"\", \"Name of root file path.\")\ntf.flags.DEFINE_string(\"partition_fn\", \"\", \"Partition file path.\")\ntf.flags.DEFINE_string(\"set\", \"\", \"Name of subset.\")\n\nFLAGS = tf.flags.FLAGS\n\n\ndef _int64_feature(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))\n\n\ndef _bytes_feature(value):\n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\n\ndef main():\n    \"\"\"Main converter function.\"\"\"\n    # Celeb A\n    with open(FLAGS.partition_fn, \"r\") as infile:\n        img_fn_list = infile.readlines()\n    img_fn_list = [elem.strip().split() for elem in img_fn_list]\n    img_fn_list = [elem[0] for elem in img_fn_list if elem[1] == FLAGS.set]\n    fn_root = FLAGS.fn_root\n    num_examples = len(img_fn_list)\n\n    file_out = \"%s.tfrecords\" % FLAGS.file_out\n    writer = tf.python_io.TFRecordWriter(file_out)\n    for example_idx, img_fn in enumerate(img_fn_list):\n        if example_idx % 1000 == 0:\n            print(example_idx, \"/\", num_examples)\n        image_raw = scipy.ndimage.imread(os.path.join(fn_root, img_fn))\n        rows = image_raw.shape[0]\n        cols = image_raw.shape[1]\n        depth = image_raw.shape[2]\n        image_raw = image_raw.tostring()\n        example = tf.train.Example(\n            features=tf.train.Features(\n                feature={\n                    \"height\": _int64_feature(rows),\n                    \"width\": _int64_feature(cols),\n                    \"depth\": _int64_feature(depth),\n                    \"image_raw\": _bytes_feature(image_raw)\n                }\n            )\n        )\n        writer.write(example.SerializeToString())\n    writer.close()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Models and examples built with TensorFlow", "file_name": "celeba_formatting.py", "id": "4c7cbf27078128f7c5374e7abbabb668", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/real_nvp/celeba_formatting.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}