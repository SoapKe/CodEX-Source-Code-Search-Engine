{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass CriterionIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?criterion\\.com/films/(?P<id>[0-9]+)-.+'\n    _TEST = {\n        'url': 'http://www.criterion.com/films/184-le-samourai',\n        'md5': 'bc51beba55685509883a9a7830919ec3',\n        'info_dict': {\n            'id': '184',\n            'ext': 'mp4',\n            'title': 'Le Samoura\u00ef',\n            'description': 'md5:a2b4b116326558149bef81f76dcbb93f',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        final_url = self._search_regex(\n            r'so\\.addVariable\\(\"videoURL\", \"(.+?)\"\\)\\;', webpage, 'video url')\n        title = self._og_search_title(webpage)\n        description = self._html_search_meta('description', webpage)\n        thumbnail = self._search_regex(\n            r'so\\.addVariable\\(\"thumbnailURL\", \"(.+?)\"\\)\\;',\n            webpage, 'thumbnail url')\n\n        return {\n            'id': video_id,\n            'url': final_url,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass CriterionIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?criterion\\.com/films/(?P<id>[0-9]+)-.+'\n    _TEST = {\n        'url': 'http://www.criterion.com/films/184-le-samourai',\n        'md5': 'bc51beba55685509883a9a7830919ec3',\n        'info_dict': {\n            'id': '184',\n            'ext': 'mp4',\n            'title': 'Le Samoura\u00ef',\n            'description': 'md5:a2b4b116326558149bef81f76dcbb93f',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        final_url = self._search_regex(\n            r'so\\.addVariable\\(\"videoURL\", \"(.+?)\"\\)\\;', webpage, 'video url')\n        title = self._og_search_title(webpage)\n        description = self._html_search_meta('description', webpage)\n        thumbnail = self._search_regex(\n            r'so\\.addVariable\\(\"thumbnailURL\", \"(.+?)\"\\)\\;',\n            webpage, 'thumbnail url')\n\n        return {\n            'id': video_id,\n            'url': final_url,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "criterion.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/criterion.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}