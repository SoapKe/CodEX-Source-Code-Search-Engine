{"author": "getredash", "code": "import sqlite3\nfrom unittest import TestCase\n\nfrom redash.query_runner.query_results import (PermissionError, _load_query, create_table,\n                                               extract_query_ids)\nfrom tests import BaseTestCase\n\n\nclass TestExtractQueryIds(TestCase):\n    def test_works_with_simple_query(self):\n        query = \"SELECT 1\"\n        self.assertEquals([], extract_query_ids(query))\n\n    def test_finds_queries_to_load(self):\n        query = \"SELECT * FROM query_123\"\n        self.assertEquals([123], extract_query_ids(query))\n\n    def test_finds_queries_in_joins(self):\n        query = \"SELECT * FROM query_123 JOIN query_4566\"\n        self.assertEquals([123, 4566], extract_query_ids(query))\n\n    def test_finds_queries_with_whitespace_characters(self):\n        query = \"SELECT * FROM    query_123 a JOIN\\tquery_4566 b ON a.id=b.parent_id JOIN\\r\\nquery_78 c ON b.id=c.parent_id\"\n        self.assertEquals([123, 4566, 78], extract_query_ids(query))\n\n\nclass TestCreateTable(TestCase):\n    def test_creates_table_with_colons_in_column_name(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': 'ga:newUsers'}, {\n            'name': 'test2'}], 'rows': [{'ga:newUsers': 123, 'test2': 2}]}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_creates_table(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': 'test1'},\n                               {'name': 'test2'}], 'rows': []}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_creates_table_with_missing_columns(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': 'test1'}, {'name': 'test2'}], 'rows': [\n            {'test1': 1, 'test2': 2}, {'test1': 3}]}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_creates_table_with_spaces_in_column_name(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': 'two words'}, {'name': 'test2'}], 'rows': [\n            {'two words': 1, 'test2': 2}, {'test1': 3}]}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_creates_table_with_non_ascii_in_column_name(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': u'\\xe4'}, {'name': 'test2'}], 'rows': [\n            {u'\\xe4': 1, 'test2': 2}]}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_loads_results(self):\n        connection = sqlite3.connect(':memory:')\n        rows = [{'test1': 1, 'test2': 'test'}, {'test1': 2, 'test2': 'test2'}]\n        results = {'columns': [{'name': 'test1'},\n                               {'name': 'test2'}], 'rows': rows}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        self.assertEquals(\n            len(list(connection.execute('SELECT * FROM query_123'))), 2)\n\n\nclass TestGetQuery(BaseTestCase):\n    \n    def test_raises_exception_for_query_from_different_account(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user(org=self.factory.create_org())\n\n        self.assertRaises(PermissionError, lambda: _load_query(user, query.id))\n\n    def test_raises_exception_for_query_with_different_groups(self):\n        ds = self.factory.create_data_source(group=self.factory.create_group())\n        query = self.factory.create_query(data_source=ds)\n        user = self.factory.create_user()\n\n        self.assertRaises(PermissionError, lambda: _load_query(user, query.id))\n\n    def test_returns_query(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user()\n\n        loaded = _load_query(user, query.id)\n        self.assertEquals(query, loaded)\n", "comments": "  test query different account ", "content": "import sqlite3\nfrom unittest import TestCase\n\nfrom redash.query_runner.query_results import (PermissionError, _load_query, create_table,\n                                               extract_query_ids)\nfrom tests import BaseTestCase\n\n\nclass TestExtractQueryIds(TestCase):\n    def test_works_with_simple_query(self):\n        query = \"SELECT 1\"\n        self.assertEquals([], extract_query_ids(query))\n\n    def test_finds_queries_to_load(self):\n        query = \"SELECT * FROM query_123\"\n        self.assertEquals([123], extract_query_ids(query))\n\n    def test_finds_queries_in_joins(self):\n        query = \"SELECT * FROM query_123 JOIN query_4566\"\n        self.assertEquals([123, 4566], extract_query_ids(query))\n\n    def test_finds_queries_with_whitespace_characters(self):\n        query = \"SELECT * FROM    query_123 a JOIN\\tquery_4566 b ON a.id=b.parent_id JOIN\\r\\nquery_78 c ON b.id=c.parent_id\"\n        self.assertEquals([123, 4566, 78], extract_query_ids(query))\n\n\nclass TestCreateTable(TestCase):\n    def test_creates_table_with_colons_in_column_name(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': 'ga:newUsers'}, {\n            'name': 'test2'}], 'rows': [{'ga:newUsers': 123, 'test2': 2}]}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_creates_table(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': 'test1'},\n                               {'name': 'test2'}], 'rows': []}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_creates_table_with_missing_columns(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': 'test1'}, {'name': 'test2'}], 'rows': [\n            {'test1': 1, 'test2': 2}, {'test1': 3}]}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_creates_table_with_spaces_in_column_name(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': 'two words'}, {'name': 'test2'}], 'rows': [\n            {'two words': 1, 'test2': 2}, {'test1': 3}]}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_creates_table_with_non_ascii_in_column_name(self):\n        connection = sqlite3.connect(':memory:')\n        results = {'columns': [{'name': u'\\xe4'}, {'name': 'test2'}], 'rows': [\n            {u'\\xe4': 1, 'test2': 2}]}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        connection.execute('SELECT 1 FROM query_123')\n\n    def test_loads_results(self):\n        connection = sqlite3.connect(':memory:')\n        rows = [{'test1': 1, 'test2': 'test'}, {'test1': 2, 'test2': 'test2'}]\n        results = {'columns': [{'name': 'test1'},\n                               {'name': 'test2'}], 'rows': rows}\n        table_name = 'query_123'\n        create_table(connection, table_name, results)\n        self.assertEquals(\n            len(list(connection.execute('SELECT * FROM query_123'))), 2)\n\n\nclass TestGetQuery(BaseTestCase):\n    # test query from different account\n    def test_raises_exception_for_query_from_different_account(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user(org=self.factory.create_org())\n\n        self.assertRaises(PermissionError, lambda: _load_query(user, query.id))\n\n    def test_raises_exception_for_query_with_different_groups(self):\n        ds = self.factory.create_data_source(group=self.factory.create_group())\n        query = self.factory.create_query(data_source=ds)\n        user = self.factory.create_user()\n\n        self.assertRaises(PermissionError, lambda: _load_query(user, query.id))\n\n    def test_returns_query(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user()\n\n        loaded = _load_query(user, query.id)\n        self.assertEquals(query, loaded)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_query_results.py", "id": "adf37f97fd19fe47196e9d08380d46cf", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/query_runner/test_query_results.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}