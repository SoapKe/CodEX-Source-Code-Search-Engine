{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport json\nimport hashlib\nimport uuid\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    sanitized_Request,\n    unified_strdate,\n    urlencode_postdata,\n    xpath_text,\n)\n\n\nclass SmotriIE(InfoExtractor):\n    IE_DESC = 'Smotri.com'\n    IE_NAME = 'smotri'\n    _VALID_URL = r'https?://(?:www\\.)?(?:smotri\\.com/video/view/\\?id=|pics\\.smotri\\.com/(?:player|scrubber_custom8)\\.swf\\?file=)(?P<id>v(?P<realvideoid>[0-9]+)[a-z0-9]{4})'\n    _NETRC_MACHINE = 'smotri'\n\n    _TESTS = [\n        \n        {\n            'url': 'http://smotri.com/video/view/?id=v261036632ab',\n            'md5': '02c0dfab2102984e9c5bb585cc7cc321',\n            'info_dict': {\n                'id': 'v261036632ab',\n                'ext': 'mp4',\n                'title': '\u043a\u0430\u0442\u0430\u0441\u0442\u0440\u043e\u0444\u0430 \u0441 \u043a\u0430\u043c\u0435\u0440 \u0432\u0438\u0434\u0435\u043e\u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f',\n                'uploader': 'rbc2008',\n                'uploader_id': 'rbc08',\n                'upload_date': '20131118',\n                'thumbnail': 'http://frame6.loadup.ru/8b/a9/2610366.3.3.jpg',\n            },\n        },\n        \n        {\n            'url': 'http://smotri.com/video/view/?id=v57591cb20',\n            'md5': '830266dfc21f077eac5afd1883091bcd',\n            'info_dict': {\n                'id': 'v57591cb20',\n                'ext': 'flv',\n                'title': 'test',\n                'uploader': 'Support Photofile@photofile',\n                'uploader_id': 'support-photofile',\n                'upload_date': '20070704',\n                'thumbnail': 'http://frame4.loadup.ru/03/ed/57591.2.3.jpg',\n            },\n        },\n        \n        {\n            'url': 'http://smotri.com/video/view/?id=v1390466a13c',\n            'md5': 'f6331cef33cad65a0815ee482a54440b',\n            'info_dict': {\n                'id': 'v1390466a13c',\n                'ext': 'mp4',\n                'title': 'TOCCA_A_NOI_-_LE_COSE_NON_VANNO_CAMBIAMOLE_ORA-1',\n                'uploader': 'timoxa40',\n                'uploader_id': 'timoxa40',\n                'upload_date': '20100404',\n                'thumbnail': 'http://frame7.loadup.ru/af/3f/1390466.3.3.jpg',\n            },\n            'params': {\n                'videopassword': 'qwerty',\n            },\n            'skip': 'Video is not approved by moderator',\n        },\n        \n        {\n            'url': 'http://smotri.com/video/view/?id=v6984858774\n            'md5': 'f11e01d13ac676370fc3b95b9bda11b0',\n            'info_dict': {\n                'id': 'v6984858774',\n                'ext': 'mp4',\n                'title': '\u0414\u0430\u0447\u0430 \u0421\u043e\u043b\u0436\u0435\u043d\u0438\u0446\u0438\u043d\u0430 \u041f\u0410\u0420\u041e\u041b\u042c 223322',\n                'uploader': 'psavari1',\n                'uploader_id': 'psavari1',\n                'upload_date': '20081103',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                'videopassword': '223322',\n            },\n        },\n        \n        {\n            'url': 'http://smotri.com/video/view/?id=v15408898bcf',\n            'md5': '91e909c9f0521adf5ee86fbe073aad70',\n            'info_dict': {\n                'id': 'v15408898bcf',\n                'ext': 'flv',\n                'title': '\u044d\u0442\u043e\u0442 \u0440\u043e\u043b\u0438\u043a \u043d\u0435 \u043f\u043e\u043a\u0430\u0436\u0443\u0442 \u043f\u043e \u0422\u0412',\n                'uploader': 'zzxxx',\n                'uploader_id': 'ueggb',\n                'upload_date': '20101001',\n                'thumbnail': 'http://frame3.loadup.ru/75/75/1540889.1.3.jpg',\n                'age_limit': 18,\n            },\n            'params': {\n                'videopassword': '333'\n            },\n            'skip': 'Video is not approved by moderator',\n        },\n        \n        {\n            'url': 'http://smotri.com/video/view/?id=v7780025814',\n            'md5': 'b4599b068422559374a59300c5337d72',\n            'info_dict': {\n                'id': 'v7780025814',\n                'ext': 'mp4',\n                'title': 'Sexy Beach (\u043f\u0430\u0440\u043e\u043b\u044c 123)',\n                'uploader': '\u0432\u0410\u0441\u044f',\n                'uploader_id': 'asya_prosto',\n                'upload_date': '20081218',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'age_limit': 18,\n            },\n            'params': {\n                'videopassword': '123'\n            },\n        },\n        \n        {\n            'url': 'http://pics.smotri.com/scrubber_custom8.swf?file=v9188090500',\n            'md5': '31099eeb4bc906712c5f40092045108d',\n            'info_dict': {\n                'id': 'v9188090500',\n                'ext': 'mp4',\n                'title': 'Shakira - Don\\'t Bother',\n                'uploader': 'HannahL',\n                'uploader_id': 'lisaha95',\n                'upload_date': '20090331',\n                'thumbnail': 'http://frame8.loadup.ru/44/0b/918809.7.3.jpg',\n            },\n        },\n    ]\n\n    @classmethod\n    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<embed[^>]src=([\"\\'])(?P<url>http://pics\\.smotri\\.com/(?:player|scrubber_custom8)\\.swf\\?file=v.+?\\1)',\n            webpage)\n        if mobj is not None:\n            return mobj.group('url')\n\n        mobj = re.search(\n            r, webpage)\n        if mobj is not None:\n            return 'http://smotri.com/video/view/?id=%s' % mobj.group('id')\n\n    def _search_meta(self, name, html, display_name=None):\n        if display_name is None:\n            display_name = name\n        return self._html_search_meta(name, html, display_name)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_form = {\n            'ticket': video_id,\n            'video_url': '1',\n            'frame_url': '1',\n            'devid': 'LoadupFlashPlayer',\n            'getvideoinfo': '1',\n        }\n\n        video_password = self._downloader.params.get('videopassword')\n        if video_password:\n            video_form['pass'] = hashlib.md5(video_password.encode('utf-8')).hexdigest()\n\n        video = self._download_json(\n            'http://smotri.com/video/view/url/bot/',\n            video_id, 'Downloading video JSON',\n            data=urlencode_postdata(video_form),\n            headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n        video_url = video.get('_vidURL') or video.get('_vidURL_mp4')\n\n        if not video_url:\n            if video.get('_moderate_no'):\n                raise ExtractorError(\n                    'Video %s has not been approved by moderator' % video_id, expected=True)\n\n            if video.get('error'):\n                raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n            if video.get('_pass_protected') == 1:\n                msg = ('Invalid video password' if video_password\n                       else 'This video is protected by a password, use the --video-password option')\n                raise ExtractorError(msg, expected=True)\n\n        title = video['title']\n        thumbnail = video.get('_imgURL')\n        upload_date = unified_strdate(video.get('added'))\n        uploader = video.get('userNick')\n        uploader_id = video.get('userLogin')\n        duration = int_or_none(video.get('duration'))\n\n        \n        \n        webpage_url = 'http://smotri.com/video/view/?id=%s' % video_id\n        webpage = self._download_webpage(webpage_url, video_id, 'Downloading video page')\n\n        \n        warning = self._html_search_regex(\n            r'<div[^>]+class=\"videoUnModer\"[^>]*>(.+?)</div>', webpage,\n            'warning message', default=None)\n        if warning is not None:\n            self._downloader.report_warning(\n                'Video %s may not be available; smotri said: %s ' %\n                (video_id, warning))\n\n        \n        if 'EroConfirmText\">' in webpage:\n            self.report_age_confirmation()\n            confirm_string = self._html_search_regex(\n                r'<a[^>]+href=\"/video/view/\\?id=%s&confirm=([^\"]+)\"' % video_id,\n                webpage, 'confirm string')\n            confirm_url = webpage_url + '&confirm=%s' % confirm_string\n            webpage = self._download_webpage(\n                confirm_url, video_id,\n                'Downloading video page (age confirmed)')\n            adult_content = True\n        else:\n            adult_content = False\n\n        view_count = self._html_search_regex(\n            r'(?s)\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432.*?<span class=\"Number\">(\\d+)</span>',\n            webpage, 'view count', fatal=False)\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'upload_date': upload_date,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'view_count': int_or_none(view_count),\n            'age_limit': 18 if adult_content else 0,\n        }\n\n\nclass SmotriCommunityIE(InfoExtractor):\n    IE_DESC = 'Smotri.com community videos'\n    IE_NAME = 'smotri:community'\n    _VALID_URL = r'https?://(?:www\\.)?smotri\\.com/community/video/(?P<id>[0-9A-Za-z_\\'-]+)'\n    _TEST = {\n        'url': 'http://smotri.com/community/video/kommuna',\n        'info_dict': {\n            'id': 'kommuna',\n        },\n        'playlist_mincount': 4,\n    }\n\n    def _real_extract(self, url):\n        community_id = self._match_id(url)\n\n        rss = self._download_xml(\n            'http://smotri.com/export/rss/video/by/community/-/%s/video.xml' % community_id,\n            community_id, 'Downloading community RSS')\n\n        entries = [\n            self.url_result(video_url.text, SmotriIE.ie_key())\n            for video_url in rss.findall('./channel/item/link')]\n\n        return self.playlist_result(entries, community_id)\n\n\nclass SmotriUserIE(InfoExtractor):\n    IE_DESC = 'Smotri.com user videos'\n    IE_NAME = 'smotri:user'\n    _VALID_URL = r'https?://(?:www\\.)?smotri\\.com/user/(?P<id>[0-9A-Za-z_\\'-]+)'\n    _TESTS = [{\n        'url': 'http://smotri.com/user/inspector',\n        'info_dict': {\n            'id': 'inspector',\n            'title': 'Inspector',\n        },\n        'playlist_mincount': 9,\n    }]\n\n    def _real_extract(self, url):\n        user_id = self._match_id(url)\n\n        rss = self._download_xml(\n            'http://smotri.com/export/rss/user/video/-/%s/video.xml' % user_id,\n            user_id, 'Downloading user RSS')\n\n        entries = [self.url_result(video_url.text, 'Smotri')\n                   for video_url in rss.findall('./channel/item/link')]\n\n        description_text = xpath_text(rss, './channel/description') or ''\n        user_nickname = self._search_regex(\n            '^\u0412\u0438\u0434\u0435\u043e \u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u0430 (.+)$', description_text,\n            'user nickname', fatal=False)\n\n        return self.playlist_result(entries, user_id, user_nickname)\n\n\nclass SmotriBroadcastIE(InfoExtractor):\n    IE_DESC = 'Smotri.com broadcasts'\n    IE_NAME = 'smotri:broadcast'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<url>smotri\\.com/live/(?P<id>[^/]+))/?.*'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        broadcast_id = mobj.group('id')\n\n        broadcast_url = 'http://' + mobj.group('url')\n        broadcast_page = self._download_webpage(broadcast_url, broadcast_id, 'Downloading broadcast page')\n\n        if re.search('>\u0420\u0435\u0436\u0438\u0441\u0441\u0435\u0440 \u0441 \u043b\u043e\u0433\u0438\u043d\u043e\u043c <br/>\"%s\"<br/> <span>\u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442<' % broadcast_id, broadcast_page) is not None:\n            raise ExtractorError(\n                'Broadcast %s does not exist' % broadcast_id, expected=True)\n\n        \n        if re.search('EroConfirmText\">', broadcast_page) is not None:\n\n            (username, password) = self._get_login_info()\n            if username is None:\n                self.raise_login_required(\n                    'Erotic broadcasts allowed only for registered users')\n\n            login_form = {\n                'login-hint53': '1',\n                'confirm_erotic': '1',\n                'login': username,\n                'password': password,\n            }\n\n            request = sanitized_Request(\n                broadcast_url + '/?no_redirect=1', urlencode_postdata(login_form))\n            request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n            broadcast_page = self._download_webpage(\n                request, broadcast_id, 'Logging in and confirming age')\n\n            if '>\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c<' in broadcast_page:\n                raise ExtractorError(\n                    'Unable to log in: bad username or password', expected=True)\n\n            adult_content = True\n        else:\n            adult_content = False\n\n        ticket = self._html_search_regex(\n            r\"window\\.broadcast_control\\.addFlashVar\\('file'\\s*,\\s*'([^']+)'\\)\",\n            broadcast_page, 'broadcast ticket')\n\n        url = 'http://smotri.com/broadcast/view/url/?ticket=%s' % ticket\n\n        broadcast_password = self._downloader.params.get('videopassword')\n        if broadcast_password:\n            url += '&pass=%s' % hashlib.md5(broadcast_password.encode('utf-8')).hexdigest()\n\n        broadcast_json_page = self._download_webpage(\n            url, broadcast_id, 'Downloading broadcast JSON')\n\n        try:\n            broadcast_json = json.loads(broadcast_json_page)\n\n            protected_broadcast = broadcast_json['_pass_protected'] == 1\n            if protected_broadcast and not broadcast_password:\n                raise ExtractorError(\n                    'This broadcast is protected by a password, use the --video-password option',\n                    expected=True)\n\n            broadcast_offline = broadcast_json['is_play'] == 0\n            if broadcast_offline:\n                raise ExtractorError('Broadcast %s is offline' % broadcast_id, expected=True)\n\n            rtmp_url = broadcast_json['_server']\n            mobj = re.search(r'^rtmp://[^/]+/(?P<app>.+)/?$', rtmp_url)\n            if not mobj:\n                raise ExtractorError('Unexpected broadcast rtmp URL')\n\n            broadcast_playpath = broadcast_json['_streamName']\n            broadcast_app = '%s/%s' % (mobj.group('app'), broadcast_json['_vidURL'])\n            broadcast_thumbnail = broadcast_json.get('_imgURL')\n            broadcast_title = self._live_title(broadcast_json['title'])\n            broadcast_description = broadcast_json.get('description')\n            broadcaster_nick = broadcast_json.get('nick')\n            broadcaster_login = broadcast_json.get('login')\n            rtmp_conn = 'S:%s' % uuid.uuid4().hex\n        except KeyError:\n            if protected_broadcast:\n                raise ExtractorError('Bad broadcast password', expected=True)\n            raise ExtractorError('Unexpected broadcast JSON')\n\n        return {\n            'id': broadcast_id,\n            'url': rtmp_url,\n            'title': broadcast_title,\n            'thumbnail': broadcast_thumbnail,\n            'description': broadcast_description,\n            'uploader': broadcaster_nick,\n            'uploader_id': broadcaster_login,\n            'age_limit': 18 if adult_content else 0,\n            'ext': 'flv',\n            'play_path': broadcast_playpath,\n            'player_url': 'http://pics.smotri.com/broadcast_play.swf',\n            'app': broadcast_app,\n            'rtmp_live': True,\n            'rtmp_conn': rtmp_conn,\n            'is_live': True,\n        }\n", "comments": "(?x)<div\\s+class=\"video_file\">http://smotri\\.com/video/download/file/[^<]+</div>\\s*\n                    <div\\s+class=\"video_image\">[^<]+</div>\\s*\n                    <div\\s+class=\"video_id\">(?P<id>[^<]+)</div>\n>\n# coding: utf-8\n# real video id 2610366\n# real video id 57591\n# video-password, not approved by moderator\n# video-password\n#',\n# age limit + video-password, not approved by moderator\n# age limit + video-password\n# swf player\n# Video JSON does not provide enough meta data\n# We will extract some from the video web page instead\n# Warning if video is unavailable\n# Adult content\n# Adult content\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport json\nimport hashlib\nimport uuid\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    sanitized_Request,\n    unified_strdate,\n    urlencode_postdata,\n    xpath_text,\n)\n\n\nclass SmotriIE(InfoExtractor):\n    IE_DESC = 'Smotri.com'\n    IE_NAME = 'smotri'\n    _VALID_URL = r'https?://(?:www\\.)?(?:smotri\\.com/video/view/\\?id=|pics\\.smotri\\.com/(?:player|scrubber_custom8)\\.swf\\?file=)(?P<id>v(?P<realvideoid>[0-9]+)[a-z0-9]{4})'\n    _NETRC_MACHINE = 'smotri'\n\n    _TESTS = [\n        # real video id 2610366\n        {\n            'url': 'http://smotri.com/video/view/?id=v261036632ab',\n            'md5': '02c0dfab2102984e9c5bb585cc7cc321',\n            'info_dict': {\n                'id': 'v261036632ab',\n                'ext': 'mp4',\n                'title': '\u043a\u0430\u0442\u0430\u0441\u0442\u0440\u043e\u0444\u0430 \u0441 \u043a\u0430\u043c\u0435\u0440 \u0432\u0438\u0434\u0435\u043e\u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f',\n                'uploader': 'rbc2008',\n                'uploader_id': 'rbc08',\n                'upload_date': '20131118',\n                'thumbnail': 'http://frame6.loadup.ru/8b/a9/2610366.3.3.jpg',\n            },\n        },\n        # real video id 57591\n        {\n            'url': 'http://smotri.com/video/view/?id=v57591cb20',\n            'md5': '830266dfc21f077eac5afd1883091bcd',\n            'info_dict': {\n                'id': 'v57591cb20',\n                'ext': 'flv',\n                'title': 'test',\n                'uploader': 'Support Photofile@photofile',\n                'uploader_id': 'support-photofile',\n                'upload_date': '20070704',\n                'thumbnail': 'http://frame4.loadup.ru/03/ed/57591.2.3.jpg',\n            },\n        },\n        # video-password, not approved by moderator\n        {\n            'url': 'http://smotri.com/video/view/?id=v1390466a13c',\n            'md5': 'f6331cef33cad65a0815ee482a54440b',\n            'info_dict': {\n                'id': 'v1390466a13c',\n                'ext': 'mp4',\n                'title': 'TOCCA_A_NOI_-_LE_COSE_NON_VANNO_CAMBIAMOLE_ORA-1',\n                'uploader': 'timoxa40',\n                'uploader_id': 'timoxa40',\n                'upload_date': '20100404',\n                'thumbnail': 'http://frame7.loadup.ru/af/3f/1390466.3.3.jpg',\n            },\n            'params': {\n                'videopassword': 'qwerty',\n            },\n            'skip': 'Video is not approved by moderator',\n        },\n        # video-password\n        {\n            'url': 'http://smotri.com/video/view/?id=v6984858774#',\n            'md5': 'f11e01d13ac676370fc3b95b9bda11b0',\n            'info_dict': {\n                'id': 'v6984858774',\n                'ext': 'mp4',\n                'title': '\u0414\u0430\u0447\u0430 \u0421\u043e\u043b\u0436\u0435\u043d\u0438\u0446\u0438\u043d\u0430 \u041f\u0410\u0420\u041e\u041b\u042c 223322',\n                'uploader': 'psavari1',\n                'uploader_id': 'psavari1',\n                'upload_date': '20081103',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                'videopassword': '223322',\n            },\n        },\n        # age limit + video-password, not approved by moderator\n        {\n            'url': 'http://smotri.com/video/view/?id=v15408898bcf',\n            'md5': '91e909c9f0521adf5ee86fbe073aad70',\n            'info_dict': {\n                'id': 'v15408898bcf',\n                'ext': 'flv',\n                'title': '\u044d\u0442\u043e\u0442 \u0440\u043e\u043b\u0438\u043a \u043d\u0435 \u043f\u043e\u043a\u0430\u0436\u0443\u0442 \u043f\u043e \u0422\u0412',\n                'uploader': 'zzxxx',\n                'uploader_id': 'ueggb',\n                'upload_date': '20101001',\n                'thumbnail': 'http://frame3.loadup.ru/75/75/1540889.1.3.jpg',\n                'age_limit': 18,\n            },\n            'params': {\n                'videopassword': '333'\n            },\n            'skip': 'Video is not approved by moderator',\n        },\n        # age limit + video-password\n        {\n            'url': 'http://smotri.com/video/view/?id=v7780025814',\n            'md5': 'b4599b068422559374a59300c5337d72',\n            'info_dict': {\n                'id': 'v7780025814',\n                'ext': 'mp4',\n                'title': 'Sexy Beach (\u043f\u0430\u0440\u043e\u043b\u044c 123)',\n                'uploader': '\u0432\u0410\u0441\u044f',\n                'uploader_id': 'asya_prosto',\n                'upload_date': '20081218',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'age_limit': 18,\n            },\n            'params': {\n                'videopassword': '123'\n            },\n        },\n        # swf player\n        {\n            'url': 'http://pics.smotri.com/scrubber_custom8.swf?file=v9188090500',\n            'md5': '31099eeb4bc906712c5f40092045108d',\n            'info_dict': {\n                'id': 'v9188090500',\n                'ext': 'mp4',\n                'title': 'Shakira - Don\\'t Bother',\n                'uploader': 'HannahL',\n                'uploader_id': 'lisaha95',\n                'upload_date': '20090331',\n                'thumbnail': 'http://frame8.loadup.ru/44/0b/918809.7.3.jpg',\n            },\n        },\n    ]\n\n    @classmethod\n    def _extract_url(cls, webpage):\n        mobj = re.search(\n            r'<embed[^>]src=([\"\\'])(?P<url>http://pics\\.smotri\\.com/(?:player|scrubber_custom8)\\.swf\\?file=v.+?\\1)',\n            webpage)\n        if mobj is not None:\n            return mobj.group('url')\n\n        mobj = re.search(\n            r'''(?x)<div\\s+class=\"video_file\">http://smotri\\.com/video/download/file/[^<]+</div>\\s*\n                    <div\\s+class=\"video_image\">[^<]+</div>\\s*\n                    <div\\s+class=\"video_id\">(?P<id>[^<]+)</div>''', webpage)\n        if mobj is not None:\n            return 'http://smotri.com/video/view/?id=%s' % mobj.group('id')\n\n    def _search_meta(self, name, html, display_name=None):\n        if display_name is None:\n            display_name = name\n        return self._html_search_meta(name, html, display_name)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_form = {\n            'ticket': video_id,\n            'video_url': '1',\n            'frame_url': '1',\n            'devid': 'LoadupFlashPlayer',\n            'getvideoinfo': '1',\n        }\n\n        video_password = self._downloader.params.get('videopassword')\n        if video_password:\n            video_form['pass'] = hashlib.md5(video_password.encode('utf-8')).hexdigest()\n\n        video = self._download_json(\n            'http://smotri.com/video/view/url/bot/',\n            video_id, 'Downloading video JSON',\n            data=urlencode_postdata(video_form),\n            headers={'Content-Type': 'application/x-www-form-urlencoded'})\n\n        video_url = video.get('_vidURL') or video.get('_vidURL_mp4')\n\n        if not video_url:\n            if video.get('_moderate_no'):\n                raise ExtractorError(\n                    'Video %s has not been approved by moderator' % video_id, expected=True)\n\n            if video.get('error'):\n                raise ExtractorError('Video %s does not exist' % video_id, expected=True)\n\n            if video.get('_pass_protected') == 1:\n                msg = ('Invalid video password' if video_password\n                       else 'This video is protected by a password, use the --video-password option')\n                raise ExtractorError(msg, expected=True)\n\n        title = video['title']\n        thumbnail = video.get('_imgURL')\n        upload_date = unified_strdate(video.get('added'))\n        uploader = video.get('userNick')\n        uploader_id = video.get('userLogin')\n        duration = int_or_none(video.get('duration'))\n\n        # Video JSON does not provide enough meta data\n        # We will extract some from the video web page instead\n        webpage_url = 'http://smotri.com/video/view/?id=%s' % video_id\n        webpage = self._download_webpage(webpage_url, video_id, 'Downloading video page')\n\n        # Warning if video is unavailable\n        warning = self._html_search_regex(\n            r'<div[^>]+class=\"videoUnModer\"[^>]*>(.+?)</div>', webpage,\n            'warning message', default=None)\n        if warning is not None:\n            self._downloader.report_warning(\n                'Video %s may not be available; smotri said: %s ' %\n                (video_id, warning))\n\n        # Adult content\n        if 'EroConfirmText\">' in webpage:\n            self.report_age_confirmation()\n            confirm_string = self._html_search_regex(\n                r'<a[^>]+href=\"/video/view/\\?id=%s&confirm=([^\"]+)\"' % video_id,\n                webpage, 'confirm string')\n            confirm_url = webpage_url + '&confirm=%s' % confirm_string\n            webpage = self._download_webpage(\n                confirm_url, video_id,\n                'Downloading video page (age confirmed)')\n            adult_content = True\n        else:\n            adult_content = False\n\n        view_count = self._html_search_regex(\n            r'(?s)\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432.*?<span class=\"Number\">(\\d+)</span>',\n            webpage, 'view count', fatal=False)\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'upload_date': upload_date,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'view_count': int_or_none(view_count),\n            'age_limit': 18 if adult_content else 0,\n        }\n\n\nclass SmotriCommunityIE(InfoExtractor):\n    IE_DESC = 'Smotri.com community videos'\n    IE_NAME = 'smotri:community'\n    _VALID_URL = r'https?://(?:www\\.)?smotri\\.com/community/video/(?P<id>[0-9A-Za-z_\\'-]+)'\n    _TEST = {\n        'url': 'http://smotri.com/community/video/kommuna',\n        'info_dict': {\n            'id': 'kommuna',\n        },\n        'playlist_mincount': 4,\n    }\n\n    def _real_extract(self, url):\n        community_id = self._match_id(url)\n\n        rss = self._download_xml(\n            'http://smotri.com/export/rss/video/by/community/-/%s/video.xml' % community_id,\n            community_id, 'Downloading community RSS')\n\n        entries = [\n            self.url_result(video_url.text, SmotriIE.ie_key())\n            for video_url in rss.findall('./channel/item/link')]\n\n        return self.playlist_result(entries, community_id)\n\n\nclass SmotriUserIE(InfoExtractor):\n    IE_DESC = 'Smotri.com user videos'\n    IE_NAME = 'smotri:user'\n    _VALID_URL = r'https?://(?:www\\.)?smotri\\.com/user/(?P<id>[0-9A-Za-z_\\'-]+)'\n    _TESTS = [{\n        'url': 'http://smotri.com/user/inspector',\n        'info_dict': {\n            'id': 'inspector',\n            'title': 'Inspector',\n        },\n        'playlist_mincount': 9,\n    }]\n\n    def _real_extract(self, url):\n        user_id = self._match_id(url)\n\n        rss = self._download_xml(\n            'http://smotri.com/export/rss/user/video/-/%s/video.xml' % user_id,\n            user_id, 'Downloading user RSS')\n\n        entries = [self.url_result(video_url.text, 'Smotri')\n                   for video_url in rss.findall('./channel/item/link')]\n\n        description_text = xpath_text(rss, './channel/description') or ''\n        user_nickname = self._search_regex(\n            '^\u0412\u0438\u0434\u0435\u043e \u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u0430 (.+)$', description_text,\n            'user nickname', fatal=False)\n\n        return self.playlist_result(entries, user_id, user_nickname)\n\n\nclass SmotriBroadcastIE(InfoExtractor):\n    IE_DESC = 'Smotri.com broadcasts'\n    IE_NAME = 'smotri:broadcast'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<url>smotri\\.com/live/(?P<id>[^/]+))/?.*'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        broadcast_id = mobj.group('id')\n\n        broadcast_url = 'http://' + mobj.group('url')\n        broadcast_page = self._download_webpage(broadcast_url, broadcast_id, 'Downloading broadcast page')\n\n        if re.search('>\u0420\u0435\u0436\u0438\u0441\u0441\u0435\u0440 \u0441 \u043b\u043e\u0433\u0438\u043d\u043e\u043c <br/>\"%s\"<br/> <span>\u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442<' % broadcast_id, broadcast_page) is not None:\n            raise ExtractorError(\n                'Broadcast %s does not exist' % broadcast_id, expected=True)\n\n        # Adult content\n        if re.search('EroConfirmText\">', broadcast_page) is not None:\n\n            (username, password) = self._get_login_info()\n            if username is None:\n                self.raise_login_required(\n                    'Erotic broadcasts allowed only for registered users')\n\n            login_form = {\n                'login-hint53': '1',\n                'confirm_erotic': '1',\n                'login': username,\n                'password': password,\n            }\n\n            request = sanitized_Request(\n                broadcast_url + '/?no_redirect=1', urlencode_postdata(login_form))\n            request.add_header('Content-Type', 'application/x-www-form-urlencoded')\n            broadcast_page = self._download_webpage(\n                request, broadcast_id, 'Logging in and confirming age')\n\n            if '>\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c<' in broadcast_page:\n                raise ExtractorError(\n                    'Unable to log in: bad username or password', expected=True)\n\n            adult_content = True\n        else:\n            adult_content = False\n\n        ticket = self._html_search_regex(\n            r\"window\\.broadcast_control\\.addFlashVar\\('file'\\s*,\\s*'([^']+)'\\)\",\n            broadcast_page, 'broadcast ticket')\n\n        url = 'http://smotri.com/broadcast/view/url/?ticket=%s' % ticket\n\n        broadcast_password = self._downloader.params.get('videopassword')\n        if broadcast_password:\n            url += '&pass=%s' % hashlib.md5(broadcast_password.encode('utf-8')).hexdigest()\n\n        broadcast_json_page = self._download_webpage(\n            url, broadcast_id, 'Downloading broadcast JSON')\n\n        try:\n            broadcast_json = json.loads(broadcast_json_page)\n\n            protected_broadcast = broadcast_json['_pass_protected'] == 1\n            if protected_broadcast and not broadcast_password:\n                raise ExtractorError(\n                    'This broadcast is protected by a password, use the --video-password option',\n                    expected=True)\n\n            broadcast_offline = broadcast_json['is_play'] == 0\n            if broadcast_offline:\n                raise ExtractorError('Broadcast %s is offline' % broadcast_id, expected=True)\n\n            rtmp_url = broadcast_json['_server']\n            mobj = re.search(r'^rtmp://[^/]+/(?P<app>.+)/?$', rtmp_url)\n            if not mobj:\n                raise ExtractorError('Unexpected broadcast rtmp URL')\n\n            broadcast_playpath = broadcast_json['_streamName']\n            broadcast_app = '%s/%s' % (mobj.group('app'), broadcast_json['_vidURL'])\n            broadcast_thumbnail = broadcast_json.get('_imgURL')\n            broadcast_title = self._live_title(broadcast_json['title'])\n            broadcast_description = broadcast_json.get('description')\n            broadcaster_nick = broadcast_json.get('nick')\n            broadcaster_login = broadcast_json.get('login')\n            rtmp_conn = 'S:%s' % uuid.uuid4().hex\n        except KeyError:\n            if protected_broadcast:\n                raise ExtractorError('Bad broadcast password', expected=True)\n            raise ExtractorError('Unexpected broadcast JSON')\n\n        return {\n            'id': broadcast_id,\n            'url': rtmp_url,\n            'title': broadcast_title,\n            'thumbnail': broadcast_thumbnail,\n            'description': broadcast_description,\n            'uploader': broadcaster_nick,\n            'uploader_id': broadcaster_login,\n            'age_limit': 18 if adult_content else 0,\n            'ext': 'flv',\n            'play_path': broadcast_playpath,\n            'player_url': 'http://pics.smotri.com/broadcast_play.swf',\n            'app': broadcast_app,\n            'rtmp_live': True,\n            'rtmp_conn': rtmp_conn,\n            'is_live': True,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "smotri.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/smotri.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}