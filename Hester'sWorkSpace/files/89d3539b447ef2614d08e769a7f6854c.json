{"author": "getredash", "code": "from unittest import TestCase\nfrom redash.query_runner.jql import FieldMapping, parse_issue\n\n\nclass TestFieldMapping(TestCase):\n\n    def test_empty(self):\n        field_mapping = FieldMapping({})\n\n        self.assertEqual(field_mapping.get_output_field_name('field1'), 'field1')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field1','member1'), None)\n        self.assertEqual(field_mapping.get_dict_members('field1'), [])\n\n    def test_with_mappings(self):\n        field_mapping = FieldMapping({\n            'field1': 'output_name_1',\n            'field2.member1': 'output_name_2',\n            'field2.member2': 'output_name_3'\n            })\n\n        self.assertEqual(field_mapping.get_output_field_name('field1'), 'output_name_1')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field1','member1'), None)\n        self.assertEqual(field_mapping.get_dict_members('field1'), [])\n\n        self.assertEqual(field_mapping.get_output_field_name('field2'), 'field2')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field2','member1'), 'output_name_2')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field2','member2'), 'output_name_3')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field2','member3'), None)\n        self.assertEqual(field_mapping.get_dict_members('field2'), ['member1','member2'])\n\n\nclass TestParseIssue(TestCase):\n    issue = {\n        'key': 'KEY-1',\n        'fields': {\n            'string_field': 'value1',\n            'int_field': 123,\n            'string_list_field': ['value1','value2'],\n            'dict_field': {'member1':'value1','member2': 'value2'},\n            'dict_list_field': [\n                {'member1':'value1a','member2': 'value2a'},\n                {'member1':'value1b','member2': 'value2b'}\n            ],\n            'dict_legacy': {'key':'legacyKey','name':'legacyName','dict_legacy':'legacyValue'},\n            'watchers': {'watchCount':10}\n        }\n    }\n\n    def test_no_mapping(self):\n        result = parse_issue(self.issue, FieldMapping({}))\n\n        self.assertEqual(result['key'], 'KEY-1')\n        self.assertEqual(result['string_field'], 'value1')\n        self.assertEqual(result['int_field'], 123)\n        self.assertEqual(result['string_list_field'], 'value1,value2')\n        self.assertEqual('dict_field' in result, False)\n        self.assertEqual('dict_list_field' in result, False)\n        self.assertEqual(result['dict_legacy'], 'legacyValue')\n        self.assertEqual(result['dict_legacy_key'], 'legacyKey')\n        self.assertEqual(result['dict_legacy_name'], 'legacyName')\n        self.assertEqual(result['watchers'], 10)\n\n    def test_mapping(self):\n        result = parse_issue(self.issue, FieldMapping({\n            'string_field': 'string_output_field',\n            'string_list_field': 'string_output_list_field',\n            'dict_field.member1': 'dict_field_1',\n            'dict_field.member2': 'dict_field_2',\n            'dict_list_field.member1': 'dict_list_field_1',\n            'dict_legacy.key': 'dict_legacy',\n            'watchers.watchCount': 'watchCount',\n        }))\n\n        self.assertEqual(result['key'], 'KEY-1')\n        self.assertEqual(result['string_output_field'], 'value1')\n        self.assertEqual(result['int_field'], 123)\n        self.assertEqual(result['string_output_list_field'], 'value1,value2')\n        self.assertEqual(result['dict_field_1'], 'value1')\n        self.assertEqual(result['dict_field_2'], 'value2')\n        self.assertEqual(result['dict_list_field_1'], 'value1a,value1b')\n        self.assertEqual(result['dict_legacy'], 'legacyKey')\n        self.assertEqual('dict_legacy_key' in result, False)\n        self.assertEqual('dict_legacy_name' in result, False)\n        self.assertEqual('watchers' in result, False)\n        self.assertEqual(result['watchCount'], 10)\n\n\n    def test_mapping_nonexisting_field(self):\n        result = parse_issue(self.issue, FieldMapping({\n            'non_existing_field': 'output_name1',\n            'dict_field.non_existing_member': 'output_name2',\n            'dict_list_field.non_existing_member': 'output_name3'\n        }))\n\n        self.assertEqual(result['key'], 'KEY-1')\n        self.assertEqual(result['string_field'], 'value1')\n        self.assertEqual(result['int_field'], 123)\n        self.assertEqual(result['string_list_field'], 'value1,value2')\n        self.assertEqual('dict_field' in result, False)\n        self.assertEqual('dict_list_field' in result, False)\n        self.assertEqual(result['dict_legacy'], 'legacyValue')\n        self.assertEqual(result['dict_legacy_key'], 'legacyKey')\n        self.assertEqual(result['dict_legacy_name'], 'legacyName')\n        self.assertEqual(result['watchers'], 10)\n", "comments": "", "content": "from unittest import TestCase\nfrom redash.query_runner.jql import FieldMapping, parse_issue\n\n\nclass TestFieldMapping(TestCase):\n\n    def test_empty(self):\n        field_mapping = FieldMapping({})\n\n        self.assertEqual(field_mapping.get_output_field_name('field1'), 'field1')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field1','member1'), None)\n        self.assertEqual(field_mapping.get_dict_members('field1'), [])\n\n    def test_with_mappings(self):\n        field_mapping = FieldMapping({\n            'field1': 'output_name_1',\n            'field2.member1': 'output_name_2',\n            'field2.member2': 'output_name_3'\n            })\n\n        self.assertEqual(field_mapping.get_output_field_name('field1'), 'output_name_1')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field1','member1'), None)\n        self.assertEqual(field_mapping.get_dict_members('field1'), [])\n\n        self.assertEqual(field_mapping.get_output_field_name('field2'), 'field2')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field2','member1'), 'output_name_2')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field2','member2'), 'output_name_3')\n        self.assertEqual(field_mapping.get_dict_output_field_name('field2','member3'), None)\n        self.assertEqual(field_mapping.get_dict_members('field2'), ['member1','member2'])\n\n\nclass TestParseIssue(TestCase):\n    issue = {\n        'key': 'KEY-1',\n        'fields': {\n            'string_field': 'value1',\n            'int_field': 123,\n            'string_list_field': ['value1','value2'],\n            'dict_field': {'member1':'value1','member2': 'value2'},\n            'dict_list_field': [\n                {'member1':'value1a','member2': 'value2a'},\n                {'member1':'value1b','member2': 'value2b'}\n            ],\n            'dict_legacy': {'key':'legacyKey','name':'legacyName','dict_legacy':'legacyValue'},\n            'watchers': {'watchCount':10}\n        }\n    }\n\n    def test_no_mapping(self):\n        result = parse_issue(self.issue, FieldMapping({}))\n\n        self.assertEqual(result['key'], 'KEY-1')\n        self.assertEqual(result['string_field'], 'value1')\n        self.assertEqual(result['int_field'], 123)\n        self.assertEqual(result['string_list_field'], 'value1,value2')\n        self.assertEqual('dict_field' in result, False)\n        self.assertEqual('dict_list_field' in result, False)\n        self.assertEqual(result['dict_legacy'], 'legacyValue')\n        self.assertEqual(result['dict_legacy_key'], 'legacyKey')\n        self.assertEqual(result['dict_legacy_name'], 'legacyName')\n        self.assertEqual(result['watchers'], 10)\n\n    def test_mapping(self):\n        result = parse_issue(self.issue, FieldMapping({\n            'string_field': 'string_output_field',\n            'string_list_field': 'string_output_list_field',\n            'dict_field.member1': 'dict_field_1',\n            'dict_field.member2': 'dict_field_2',\n            'dict_list_field.member1': 'dict_list_field_1',\n            'dict_legacy.key': 'dict_legacy',\n            'watchers.watchCount': 'watchCount',\n        }))\n\n        self.assertEqual(result['key'], 'KEY-1')\n        self.assertEqual(result['string_output_field'], 'value1')\n        self.assertEqual(result['int_field'], 123)\n        self.assertEqual(result['string_output_list_field'], 'value1,value2')\n        self.assertEqual(result['dict_field_1'], 'value1')\n        self.assertEqual(result['dict_field_2'], 'value2')\n        self.assertEqual(result['dict_list_field_1'], 'value1a,value1b')\n        self.assertEqual(result['dict_legacy'], 'legacyKey')\n        self.assertEqual('dict_legacy_key' in result, False)\n        self.assertEqual('dict_legacy_name' in result, False)\n        self.assertEqual('watchers' in result, False)\n        self.assertEqual(result['watchCount'], 10)\n\n\n    def test_mapping_nonexisting_field(self):\n        result = parse_issue(self.issue, FieldMapping({\n            'non_existing_field': 'output_name1',\n            'dict_field.non_existing_member': 'output_name2',\n            'dict_list_field.non_existing_member': 'output_name3'\n        }))\n\n        self.assertEqual(result['key'], 'KEY-1')\n        self.assertEqual(result['string_field'], 'value1')\n        self.assertEqual(result['int_field'], 123)\n        self.assertEqual(result['string_list_field'], 'value1,value2')\n        self.assertEqual('dict_field' in result, False)\n        self.assertEqual('dict_list_field' in result, False)\n        self.assertEqual(result['dict_legacy'], 'legacyValue')\n        self.assertEqual(result['dict_legacy_key'], 'legacyKey')\n        self.assertEqual(result['dict_legacy_name'], 'legacyName')\n        self.assertEqual(result['watchers'], 10)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_jql.py", "id": "89d3539b447ef2614d08e769a7f6854c", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/query_runner/test_jql.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}