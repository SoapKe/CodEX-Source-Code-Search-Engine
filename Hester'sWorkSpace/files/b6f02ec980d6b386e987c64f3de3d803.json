{"author": "ansible", "code": "\n (c) 2017 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport json\nimport re\nfrom itertools import chain\n\nfrom ansible.module_utils._text import to_bytes, to_text\nfrom ansible.module_utils.network.common.utils import to_list\nfrom ansible.plugins.cliconf import CliconfBase\n\n\nclass Cliconf(CliconfBase):\n\n    def get_text(self, ele, tag):\n        try:\n            return to_text(ele.find(tag).text, errors='surrogate_then_replace').strip()\n        except AttributeError:\n            pass\n\n    def get_device_info(self):\n        device_info = dict()\n        device_info['network_os'] = 'junos'\n\n        reply = self.get(command='show version')\n        data = to_text(reply, errors='surrogate_or_strict').strip()\n\n        match = re.search(r'Junos: (\\S+)', data)\n        if match:\n            device_info['network_os_version'] = match.group(1)\n\n        match = re.search(r'Model: (\\S+)', data, re.M)\n        if match:\n            device_info['network_os_model'] = match.group(1)\n\n        match = re.search(r'Hostname: (\\S+)', data, re.M)\n        if match:\n            device_info['network_os_hostname'] = match.group(1)\n        return device_info\n\n    def get_config(self, source='running', format='text'):\n        if source != 'running':\n            return self.invalid_params(\"fetching configuration from %s is not supported\" % source)\n        if format == 'text':\n            cmd = 'show configuration'\n        else:\n            cmd = 'show configuration | display %s' % format\n        return self.send_command(cmd)\n\n    def edit_config(self, command):\n        for cmd in chain(['configure'], to_list(command)):\n            self.send_command(cmd)\n\n    def get(self, command, prompt=None, answer=None, sendonly=False):\n        return self.send_command(command, prompt=prompt, answer=answer, sendonly=sendonly)\n\n    def commit(self, *args, **kwargs):\n        \n        comment = kwargs.get('comment', None)\n        command = b'commit'\n        if comment:\n            command += b' comment {0}'.format(comment)\n        command += b' and-quit'\n        return self.send_command(command)\n\n    def discard_changes(self, rollback_id=None):\n        command = b'rollback'\n        if rollback_id is not None:\n            command += b' %s' % int(rollback_id)\n        for cmd in chain(to_list(command), b'exit'):\n            self.send_command(cmd)\n\n    def get_capabilities(self):\n        result = dict()\n        result['rpc'] = self.get_base_rpc() + ['commit', 'discard_changes']\n        result['network_api'] = 'cliconf'\n        result['device_info'] = self.get_device_info()\n        return json.dumps(result)\n\n    def compare_configuration(self, rollback_id=None):\n        command = b'show | compare'\n        if rollback_id is not None:\n            command += b' rollback %s' % int(rollback_id)\n        return self.send_command(command)\n", "comments": "   execute commit command remote device           kwargs              comment  optional commit description                    (c) 2017 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       ", "content": "#\n# (c) 2017 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport json\nimport re\nfrom itertools import chain\n\nfrom ansible.module_utils._text import to_bytes, to_text\nfrom ansible.module_utils.network.common.utils import to_list\nfrom ansible.plugins.cliconf import CliconfBase\n\n\nclass Cliconf(CliconfBase):\n\n    def get_text(self, ele, tag):\n        try:\n            return to_text(ele.find(tag).text, errors='surrogate_then_replace').strip()\n        except AttributeError:\n            pass\n\n    def get_device_info(self):\n        device_info = dict()\n        device_info['network_os'] = 'junos'\n\n        reply = self.get(command='show version')\n        data = to_text(reply, errors='surrogate_or_strict').strip()\n\n        match = re.search(r'Junos: (\\S+)', data)\n        if match:\n            device_info['network_os_version'] = match.group(1)\n\n        match = re.search(r'Model: (\\S+)', data, re.M)\n        if match:\n            device_info['network_os_model'] = match.group(1)\n\n        match = re.search(r'Hostname: (\\S+)', data, re.M)\n        if match:\n            device_info['network_os_hostname'] = match.group(1)\n        return device_info\n\n    def get_config(self, source='running', format='text'):\n        if source != 'running':\n            return self.invalid_params(\"fetching configuration from %s is not supported\" % source)\n        if format == 'text':\n            cmd = 'show configuration'\n        else:\n            cmd = 'show configuration | display %s' % format\n        return self.send_command(cmd)\n\n    def edit_config(self, command):\n        for cmd in chain(['configure'], to_list(command)):\n            self.send_command(cmd)\n\n    def get(self, command, prompt=None, answer=None, sendonly=False):\n        return self.send_command(command, prompt=prompt, answer=answer, sendonly=sendonly)\n\n    def commit(self, *args, **kwargs):\n        \"\"\"Execute commit command on remote device.\n        :kwargs:\n            comment: Optional commit description.\n        \"\"\"\n        comment = kwargs.get('comment', None)\n        command = b'commit'\n        if comment:\n            command += b' comment {0}'.format(comment)\n        command += b' and-quit'\n        return self.send_command(command)\n\n    def discard_changes(self, rollback_id=None):\n        command = b'rollback'\n        if rollback_id is not None:\n            command += b' %s' % int(rollback_id)\n        for cmd in chain(to_list(command), b'exit'):\n            self.send_command(cmd)\n\n    def get_capabilities(self):\n        result = dict()\n        result['rpc'] = self.get_base_rpc() + ['commit', 'discard_changes']\n        result['network_api'] = 'cliconf'\n        result['device_info'] = self.get_device_info()\n        return json.dumps(result)\n\n    def compare_configuration(self, rollback_id=None):\n        command = b'show | compare'\n        if rollback_id is not None:\n            command += b' rollback %s' % int(rollback_id)\n        return self.send_command(command)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "junos.py", "id": "b6f02ec980d6b386e987c64f3de3d803", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/plugins/cliconf/junos.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}