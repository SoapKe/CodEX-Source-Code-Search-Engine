{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .adobepass import AdobePassIE\nfrom ..utils import (\n    smuggle_url,\n    update_url_query,\n    int_or_none,\n)\n\n\nclass BravoTVIE(AdobePassIE):\n    _VALID_URL = r'https?://(?:www\\.)?bravotv\\.com/(?:[^/]+/)+(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.bravotv.com/last-chance-kitchen/season-5/videos/lck-ep-12-fishy-finale',\n        'md5': '9086d0b7ef0ea2aabc4781d75f4e5863',\n        'info_dict': {\n            'id': 'zHyk1_HU_mPy',\n            'ext': 'mp4',\n            'title': 'LCK Ep 12: Fishy Finale',\n            'description': 'S13/E12: Two eliminated chefs have just 12 minutes to cook up a delicious fish dish.',\n            'uploader': 'NBCU-BRAV',\n            'upload_date': '20160302',\n            'timestamp': 1456945320,\n        }\n    }, {\n        'url': 'http://www.bravotv.com/below-deck/season-3/ep-14-reunion-part-1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        settings = self._parse_json(self._search_regex(\n            r'jQuery\\.extend\\(Drupal\\.settings\\s*,\\s*({.+?})\\);', webpage, 'drupal settings'),\n            display_id)\n        info = {}\n        query = {\n            'mbr': 'true',\n        }\n        account_pid, release_pid = [None] * 2\n        tve = settings.get('sharedTVE')\n        if tve:\n            query['manifest'] = 'm3u'\n            account_pid = 'HNK2IC'\n            release_pid = tve['release_pid']\n            if tve.get('entitlement') == 'auth':\n                adobe_pass = settings.get('adobePass', {})\n                resource = self._get_mvpd_resource(\n                    adobe_pass.get('adobePassResourceId', 'bravo'),\n                    tve['title'], release_pid, tve.get('rating'))\n                query['auth'] = self._extract_mvpd_auth(\n                    url, release_pid, adobe_pass.get('adobePassRequestorId', 'bravo'), resource)\n        else:\n            shared_playlist = settings['shared_playlist']\n            account_pid = shared_playlist['account_pid']\n            metadata = shared_playlist['video_metadata'][shared_playlist['default_clip']]\n            release_pid = metadata['release_pid']\n            info.update({\n                'title': metadata['title'],\n                'description': metadata.get('description'),\n                'season_number': int_or_none(metadata.get('season_num')),\n                'episode_number': int_or_none(metadata.get('episode_num')),\n            })\n            query['switch'] = 'progressive'\n        info.update({\n            '_type': 'url_transparent',\n            'id': release_pid,\n            'url': smuggle_url(update_url_query(\n                'http://link.theplatform.com/s/%s/%s' % (account_pid, release_pid),\n                query), {'force_smil_url': True}),\n            'ie_key': 'ThePlatform',\n        })\n        return info\n", "comments": "# coding: utf-8\n#]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .adobepass import AdobePassIE\nfrom ..utils import (\n    smuggle_url,\n    update_url_query,\n    int_or_none,\n)\n\n\nclass BravoTVIE(AdobePassIE):\n    _VALID_URL = r'https?://(?:www\\.)?bravotv\\.com/(?:[^/]+/)+(?P<id>[^/?#]+)'\n    _TESTS = [{\n        'url': 'http://www.bravotv.com/last-chance-kitchen/season-5/videos/lck-ep-12-fishy-finale',\n        'md5': '9086d0b7ef0ea2aabc4781d75f4e5863',\n        'info_dict': {\n            'id': 'zHyk1_HU_mPy',\n            'ext': 'mp4',\n            'title': 'LCK Ep 12: Fishy Finale',\n            'description': 'S13/E12: Two eliminated chefs have just 12 minutes to cook up a delicious fish dish.',\n            'uploader': 'NBCU-BRAV',\n            'upload_date': '20160302',\n            'timestamp': 1456945320,\n        }\n    }, {\n        'url': 'http://www.bravotv.com/below-deck/season-3/ep-14-reunion-part-1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        settings = self._parse_json(self._search_regex(\n            r'jQuery\\.extend\\(Drupal\\.settings\\s*,\\s*({.+?})\\);', webpage, 'drupal settings'),\n            display_id)\n        info = {}\n        query = {\n            'mbr': 'true',\n        }\n        account_pid, release_pid = [None] * 2\n        tve = settings.get('sharedTVE')\n        if tve:\n            query['manifest'] = 'm3u'\n            account_pid = 'HNK2IC'\n            release_pid = tve['release_pid']\n            if tve.get('entitlement') == 'auth':\n                adobe_pass = settings.get('adobePass', {})\n                resource = self._get_mvpd_resource(\n                    adobe_pass.get('adobePassResourceId', 'bravo'),\n                    tve['title'], release_pid, tve.get('rating'))\n                query['auth'] = self._extract_mvpd_auth(\n                    url, release_pid, adobe_pass.get('adobePassRequestorId', 'bravo'), resource)\n        else:\n            shared_playlist = settings['shared_playlist']\n            account_pid = shared_playlist['account_pid']\n            metadata = shared_playlist['video_metadata'][shared_playlist['default_clip']]\n            release_pid = metadata['release_pid']\n            info.update({\n                'title': metadata['title'],\n                'description': metadata.get('description'),\n                'season_number': int_or_none(metadata.get('season_num')),\n                'episode_number': int_or_none(metadata.get('episode_num')),\n            })\n            query['switch'] = 'progressive'\n        info.update({\n            '_type': 'url_transparent',\n            'id': release_pid,\n            'url': smuggle_url(update_url_query(\n                'http://link.theplatform.com/s/%s/%s' % (account_pid, release_pid),\n                query), {'force_smil_url': True}),\n            'ie_key': 'ThePlatform',\n        })\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "bravotv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/bravotv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}