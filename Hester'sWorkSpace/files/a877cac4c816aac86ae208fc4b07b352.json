{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.osv import expression\n\nfrom odoo.tools import float_round\n\n\nclass SaleTimesheetController(http.Controller):\n\n    @http.route('/timesheet/plan', type='json', auth=\"user\")\n    def plan(self, domain):\n        domain = expression.AND([domain, [('project_id', '!=', False)]])  \n        values = self._prepare_plan_values(domain)\n        view = request.env.ref('sale_timesheet.timesheet_plan')\n        return {\n            'html_content': view.render(values)\n        }\n\n    def _prepare_plan_values(self, domain):\n\n        timesheet_lines = request.env['account.analytic.line'].search(domain)\n        currency = request.env.user.company_id.currency_id\n\n        values = {\n            'currency': currency,\n            'timesheet_lines': timesheet_lines,\n            'domain': domain,\n        }\n        hour_rounding = request.env.ref('product.product_uom_hour').rounding\n        billable_types = ['non_billable', 'non_billable_project', 'billable_time', 'billable_fixed']\n\n        \n        values['stat_buttons'] = self._plan_get_stat_button(timesheet_lines)\n\n        # -- Dashboard (per billable type)\n        dashboard_values = {\n            'hours': dict.fromkeys(billable_types + ['total'], 0.0),\n            'rates': dict.fromkeys(billable_types + ['total'], 0.0),\n            'money_amount': {\n                'invoiced': 0.0,\n                'to_invoiced': 0.0,\n                'cost': 0.0,\n                'total': 0.0,\n            }\n        }\n        dashboard_domain = domain + [('timesheet_invoice_type', '!=', False)]  \n        dashboard_data = request.env['account.analytic.line'].read_group(dashboard_domain, ['unit_amount', 'timesheet_revenue', 'timesheet_invoice_type'], ['timesheet_invoice_type'])\n\n        dashboard_total_hours = sum([data['unit_amount'] for data in dashboard_data])\n        for data in dashboard_data:\n            billable_type = data['timesheet_invoice_type']\n            \n            dashboard_values['hours'][billable_type] = float_round(data.get('unit_amount'), precision_rounding=hour_rounding)\n            dashboard_values['hours']['total'] += float_round(data.get('unit_amount'), precision_rounding=hour_rounding)\n            \n            dashboard_values['rates'][billable_type] = round(data.get('unit_amount') / dashboard_total_hours * 100, 2)\n            dashboard_values['rates']['total'] += round(data.get('unit_amount') / dashboard_total_hours * 100, 2)\n\n        \n        so_lines = values['timesheet_lines'].mapped('so_line')\n        invoice_lines = so_lines.mapped('invoice_lines')\n        dashboard_values['money_amount']['invoiced'] = sum([inv_line.currency_id.with_context(date=inv_line.invoice_id.date_invoice).compute(inv_line.price_unit * inv_line.quantity, currency) for inv_line in invoice_lines.filtered(lambda line: line.invoice_id.state in ['open', 'paid'])])\n        dashboard_values['money_amount']['to_invoice'] = sum([sol.currency_id.compute(sol.price_unit * (1 - (sol.discount or 0.0) / 100.0) * sol.qty_to_invoice, currency) for sol in so_lines]) + sum([i.currency_id.with_context(date=i.invoice_id.date_invoice).compute(i.price_unit * i.quantity, currency) for i in invoice_lines.filtered(lambda line: line.invoice_id.state == 'draft')])\n        dashboard_values['money_amount']['cost'] = sum(values['timesheet_lines'].mapped('amount'))\n        dashboard_values['money_amount']['total'] = sum([dashboard_values['money_amount'][item] for item in dashboard_values['money_amount'].keys()])\n\n        values['dashboard'] = dashboard_values\n\n        # -- Time Repartition (per employee)\n        repartition_domain = domain + [('employee_id', '!=', False), ('timesheet_invoice_type', '!=', False)]  \n        repartition_data = request.env['account.analytic.line'].read_group(repartition_domain, ['employee_id', 'timesheet_invoice_type', 'unit_amount'], ['employee_id', 'timesheet_invoice_type'], lazy=False)\n\n        \n        repartition_employee = {}\n        for data in repartition_data:\n            employee_id = data['employee_id'][0]\n            repartition_employee.setdefault(employee_id, dict(\n                employee_id=data['employee_id'][0],\n                employee_name=data['employee_id'][1],\n                non_billable_project=0.0,\n                non_billable=0.0,\n                billable_time=0.0,\n                billable_fixed=0.0,\n                total=0.0,\n            ))[data['timesheet_invoice_type']] = float_round(data.get('unit_amount', 0.0), precision_rounding=hour_rounding)\n            repartition_employee[employee_id]['__domain_'+data['timesheet_invoice_type']] = data['__domain']\n\n        \n        for employee_id, vals in repartition_employee.items():\n            repartition_employee[employee_id]['total'] = sum([vals[inv_type] for inv_type in billable_types])\n\n        hours_per_employee = [repartition_employee[employee_id]['total'] for employee_id in repartition_employee]\n        values['repartition_employee_max'] = max(hours_per_employee) if hours_per_employee else 1\n        values['repartition_employee'] = repartition_employee\n\n        return values\n\n    def _plan_get_stat_button(self, timesheet_lines):\n        stat_buttons = []\n        stat_buttons.append({\n            'name': _('Timesheets'),\n            'res_model': 'account.analytic.line',\n            'domain': [('id', 'in', timesheet_lines.ids)],\n            'icon': 'fa fa-calendar',\n        })\n        stat_project_ids = timesheet_lines.mapped('project_id').ids\n        stat_task_domain = [('project_id', 'in', stat_project_ids), '|', ('stage_id', '=', False), ('stage_id.fold', '=', False)]\n        stat_buttons.append({\n            'name': _('Tasks'),\n            'count': request.env['project.task'].search_count(stat_task_domain),\n            'res_model': 'project.task',\n            'domain': stat_task_domain,\n            'icon': 'fa fa-tasks',\n        })\n        return stat_buttons\n\n    @http.route('/timesheet/plan/action', type='json', auth=\"user\")\n    def plan_stat_button(self, domain, res_model='account.analytic.line'):\n        action = {\n            'type': 'ir.actions.act_window',\n            'view_id': False,\n            'view_mode': 'tree,form',\n            'view_type': 'list',\n            'domain': domain,\n        }\n        if res_model == 'account.analytic.line':\n            ts_view_tree_id = request.env.ref('hr_timesheet.hr_timesheet_line_tree').id\n            ts_view_form_id = request.env.ref('hr_timesheet.hr_timesheet_line_form').id\n            action = {\n                'name': _('Timesheets'),\n                'type': 'ir.actions.act_window',\n                'res_model': res_model,\n                'view_mode': 'tree,form',\n                'view_type': 'tree',\n                'views': [[ts_view_tree_id, 'list'], [ts_view_form_id, 'form']],\n                'domain': domain,\n            }\n        elif res_model == 'project.task':\n            action = request.env.ref('project.action_view_task').read()[0]\n            action.update({\n                'name': _('Tasks'),\n                'domain': domain,\n                'context': request.env.context,  \n            })\n        return action\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     force timesheet aal       stat buttons       dashboard (per billable type)    force billable type    hours    rates    money amount       time repartition (per employee)    force billable type    set repartition per type per employee    compute total    erase original context avoid default filter ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.osv import expression\n\nfrom odoo.tools import float_round\n\n\nclass SaleTimesheetController(http.Controller):\n\n    @http.route('/timesheet/plan', type='json', auth=\"user\")\n    def plan(self, domain):\n        domain = expression.AND([domain, [('project_id', '!=', False)]])  # force timesheet and not AAL\n        values = self._prepare_plan_values(domain)\n        view = request.env.ref('sale_timesheet.timesheet_plan')\n        return {\n            'html_content': view.render(values)\n        }\n\n    def _prepare_plan_values(self, domain):\n\n        timesheet_lines = request.env['account.analytic.line'].search(domain)\n        currency = request.env.user.company_id.currency_id\n\n        values = {\n            'currency': currency,\n            'timesheet_lines': timesheet_lines,\n            'domain': domain,\n        }\n        hour_rounding = request.env.ref('product.product_uom_hour').rounding\n        billable_types = ['non_billable', 'non_billable_project', 'billable_time', 'billable_fixed']\n\n        # -- Stat Buttons\n        values['stat_buttons'] = self._plan_get_stat_button(timesheet_lines)\n\n        # -- Dashboard (per billable type)\n        dashboard_values = {\n            'hours': dict.fromkeys(billable_types + ['total'], 0.0),\n            'rates': dict.fromkeys(billable_types + ['total'], 0.0),\n            'money_amount': {\n                'invoiced': 0.0,\n                'to_invoiced': 0.0,\n                'cost': 0.0,\n                'total': 0.0,\n            }\n        }\n        dashboard_domain = domain + [('timesheet_invoice_type', '!=', False)]  # force billable type\n        dashboard_data = request.env['account.analytic.line'].read_group(dashboard_domain, ['unit_amount', 'timesheet_revenue', 'timesheet_invoice_type'], ['timesheet_invoice_type'])\n\n        dashboard_total_hours = sum([data['unit_amount'] for data in dashboard_data])\n        for data in dashboard_data:\n            billable_type = data['timesheet_invoice_type']\n            # hours\n            dashboard_values['hours'][billable_type] = float_round(data.get('unit_amount'), precision_rounding=hour_rounding)\n            dashboard_values['hours']['total'] += float_round(data.get('unit_amount'), precision_rounding=hour_rounding)\n            # rates\n            dashboard_values['rates'][billable_type] = round(data.get('unit_amount') / dashboard_total_hours * 100, 2)\n            dashboard_values['rates']['total'] += round(data.get('unit_amount') / dashboard_total_hours * 100, 2)\n\n        # money_amount\n        so_lines = values['timesheet_lines'].mapped('so_line')\n        invoice_lines = so_lines.mapped('invoice_lines')\n        dashboard_values['money_amount']['invoiced'] = sum([inv_line.currency_id.with_context(date=inv_line.invoice_id.date_invoice).compute(inv_line.price_unit * inv_line.quantity, currency) for inv_line in invoice_lines.filtered(lambda line: line.invoice_id.state in ['open', 'paid'])])\n        dashboard_values['money_amount']['to_invoice'] = sum([sol.currency_id.compute(sol.price_unit * (1 - (sol.discount or 0.0) / 100.0) * sol.qty_to_invoice, currency) for sol in so_lines]) + sum([i.currency_id.with_context(date=i.invoice_id.date_invoice).compute(i.price_unit * i.quantity, currency) for i in invoice_lines.filtered(lambda line: line.invoice_id.state == 'draft')])\n        dashboard_values['money_amount']['cost'] = sum(values['timesheet_lines'].mapped('amount'))\n        dashboard_values['money_amount']['total'] = sum([dashboard_values['money_amount'][item] for item in dashboard_values['money_amount'].keys()])\n\n        values['dashboard'] = dashboard_values\n\n        # -- Time Repartition (per employee)\n        repartition_domain = domain + [('employee_id', '!=', False), ('timesheet_invoice_type', '!=', False)]  # force billable type\n        repartition_data = request.env['account.analytic.line'].read_group(repartition_domain, ['employee_id', 'timesheet_invoice_type', 'unit_amount'], ['employee_id', 'timesheet_invoice_type'], lazy=False)\n\n        # set repartition per type per employee\n        repartition_employee = {}\n        for data in repartition_data:\n            employee_id = data['employee_id'][0]\n            repartition_employee.setdefault(employee_id, dict(\n                employee_id=data['employee_id'][0],\n                employee_name=data['employee_id'][1],\n                non_billable_project=0.0,\n                non_billable=0.0,\n                billable_time=0.0,\n                billable_fixed=0.0,\n                total=0.0,\n            ))[data['timesheet_invoice_type']] = float_round(data.get('unit_amount', 0.0), precision_rounding=hour_rounding)\n            repartition_employee[employee_id]['__domain_'+data['timesheet_invoice_type']] = data['__domain']\n\n        # compute total\n        for employee_id, vals in repartition_employee.items():\n            repartition_employee[employee_id]['total'] = sum([vals[inv_type] for inv_type in billable_types])\n\n        hours_per_employee = [repartition_employee[employee_id]['total'] for employee_id in repartition_employee]\n        values['repartition_employee_max'] = max(hours_per_employee) if hours_per_employee else 1\n        values['repartition_employee'] = repartition_employee\n\n        return values\n\n    def _plan_get_stat_button(self, timesheet_lines):\n        stat_buttons = []\n        stat_buttons.append({\n            'name': _('Timesheets'),\n            'res_model': 'account.analytic.line',\n            'domain': [('id', 'in', timesheet_lines.ids)],\n            'icon': 'fa fa-calendar',\n        })\n        stat_project_ids = timesheet_lines.mapped('project_id').ids\n        stat_task_domain = [('project_id', 'in', stat_project_ids), '|', ('stage_id', '=', False), ('stage_id.fold', '=', False)]\n        stat_buttons.append({\n            'name': _('Tasks'),\n            'count': request.env['project.task'].search_count(stat_task_domain),\n            'res_model': 'project.task',\n            'domain': stat_task_domain,\n            'icon': 'fa fa-tasks',\n        })\n        return stat_buttons\n\n    @http.route('/timesheet/plan/action', type='json', auth=\"user\")\n    def plan_stat_button(self, domain, res_model='account.analytic.line'):\n        action = {\n            'type': 'ir.actions.act_window',\n            'view_id': False,\n            'view_mode': 'tree,form',\n            'view_type': 'list',\n            'domain': domain,\n        }\n        if res_model == 'account.analytic.line':\n            ts_view_tree_id = request.env.ref('hr_timesheet.hr_timesheet_line_tree').id\n            ts_view_form_id = request.env.ref('hr_timesheet.hr_timesheet_line_form').id\n            action = {\n                'name': _('Timesheets'),\n                'type': 'ir.actions.act_window',\n                'res_model': res_model,\n                'view_mode': 'tree,form',\n                'view_type': 'tree',\n                'views': [[ts_view_tree_id, 'list'], [ts_view_form_id, 'form']],\n                'domain': domain,\n            }\n        elif res_model == 'project.task':\n            action = request.env.ref('project.action_view_task').read()[0]\n            action.update({\n                'name': _('Tasks'),\n                'domain': domain,\n                'context': request.env.context,  # erase original context to avoid default filter\n            })\n        return action\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "a877cac4c816aac86ae208fc4b07b352", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale_timesheet/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}