{"author": "jakubroztocil", "code": "from __future__ import division\nimport json\nfrom collections import OrderedDict\n\n\ndef load_json_preserve_order(s):\n    return json.loads(s, object_pairs_hook=OrderedDict)\n\n\ndef repr_dict_nice(d):\n    def prepare_dict(d):\n        for k, v in d.items():\n            if isinstance(v, dict):\n                v = dict(prepare_dict(v))\n            elif isinstance(v, bytes):\n                v = v.decode('utf8')\n            elif not isinstance(v, (int, str)):\n                v = repr(v)\n            yield k, v\n    return json.dumps(\n        dict(prepare_dict(d)),\n        indent=4, sort_keys=True,\n    )\n\n\ndef humanize_bytes(n, precision=2):\n    \n    \n    \n    \n    abbrevs = [\n        (1 << 50, 'PB'),\n        (1 << 40, 'TB'),\n        (1 << 30, 'GB'),\n        (1 << 20, 'MB'),\n        (1 << 10, 'kB'),\n        (1, 'B')\n    ]\n\n    if n == 1:\n        return '1 B'\n\n    for factor, suffix in abbrevs:\n        if n >= factor:\n            break\n\n    \n    return '%.*f %s' % (precision, n / factor, suffix)\n", "comments": "Return a humanized string representation of a number of bytes.\n\n    Assumes `from __future__ import division`.\n\n    >>> humanize_bytes(1)\n    '1 B'\n    >>> humanize_bytes(1024, precision=1)\n    '1.0 kB'\n    >>> humanize_bytes(1024 * 123, precision=1)\n    '123.0 kB'\n    >>> humanize_bytes(1024 * 12342, precision=1)\n    '12.1 MB'\n    >>> humanize_bytes(1024 * 12342, precision=2)\n    '12.05 MB'\n    >>> humanize_bytes(1024 * 1234, precision=2)\n    '1.21 MB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=2)\n    '1.31 GB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=1)\n    '1.3 GB'\n\n    \n \n# Author: Doug Latornell\n# Licence: MIT\n# URL: http://code.activestate.com/recipes/577081/\n# noinspection PyUnboundLocalVariable\n", "content": "from __future__ import division\nimport json\nfrom collections import OrderedDict\n\n\ndef load_json_preserve_order(s):\n    return json.loads(s, object_pairs_hook=OrderedDict)\n\n\ndef repr_dict_nice(d):\n    def prepare_dict(d):\n        for k, v in d.items():\n            if isinstance(v, dict):\n                v = dict(prepare_dict(v))\n            elif isinstance(v, bytes):\n                v = v.decode('utf8')\n            elif not isinstance(v, (int, str)):\n                v = repr(v)\n            yield k, v\n    return json.dumps(\n        dict(prepare_dict(d)),\n        indent=4, sort_keys=True,\n    )\n\n\ndef humanize_bytes(n, precision=2):\n    # Author: Doug Latornell\n    # Licence: MIT\n    # URL: http://code.activestate.com/recipes/577081/\n    \"\"\"Return a humanized string representation of a number of bytes.\n\n    Assumes `from __future__ import division`.\n\n    >>> humanize_bytes(1)\n    '1 B'\n    >>> humanize_bytes(1024, precision=1)\n    '1.0 kB'\n    >>> humanize_bytes(1024 * 123, precision=1)\n    '123.0 kB'\n    >>> humanize_bytes(1024 * 12342, precision=1)\n    '12.1 MB'\n    >>> humanize_bytes(1024 * 12342, precision=2)\n    '12.05 MB'\n    >>> humanize_bytes(1024 * 1234, precision=2)\n    '1.21 MB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=2)\n    '1.31 GB'\n    >>> humanize_bytes(1024 * 1234 * 1111, precision=1)\n    '1.3 GB'\n\n    \"\"\"\n    abbrevs = [\n        (1 << 50, 'PB'),\n        (1 << 40, 'TB'),\n        (1 << 30, 'GB'),\n        (1 << 20, 'MB'),\n        (1 << 10, 'kB'),\n        (1, 'B')\n    ]\n\n    if n == 1:\n        return '1 B'\n\n    for factor, suffix in abbrevs:\n        if n >= factor:\n            break\n\n    # noinspection PyUnboundLocalVariable\n    return '%.*f %s' % (precision, n / factor, suffix)\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "utils.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/httpie/utils.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}