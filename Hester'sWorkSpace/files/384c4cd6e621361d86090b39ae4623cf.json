{"author": "HelloZeroNet", "code": "\n\n\nimport os\nimport sys\n\n\ndef main():\n    if \"--silent\" not in sys.argv:\n        print \"- Starting ZeroNet...\"\n\n    main = None\n    try:\n        app_dir = os.path.dirname(os.path.abspath(__file__))\n        os.chdir(app_dir)  \n        sys.path.insert(0, os.path.join(app_dir, \"src/lib\"))  \n        sys.path.insert(0, os.path.join(app_dir, \"src\"))  \n        import main\n        main.start()\n        if main.update_after_shutdown:  \n            import gc\n            import update\n            import atexit\n            \n            try:\n                if \"lib.opensslVerify\" in sys.modules:\n                    sys.modules[\"lib.opensslVerify\"].opensslVerify.closeLibrary()\n            except Exception, err:\n                print \"Error closing opensslVerify lib\", err\n            try:\n                if \"lib.pyelliptic\" in sys.modules:\n                    sys.modules[\"lib.pyelliptic\"].openssl.closeLibrary()\n            except Exception, err:\n                print \"Error closing pyelliptic lib\", err\n\n            \n            sys.modules[\"main\"].lock.close()\n\n            \n            try:\n                update.update()\n            except Exception, err:\n                print \"Update error: %s\" % err\n\n            \n            logger = sys.modules[\"main\"].logging.getLogger()\n\n            for handler in logger.handlers[:]:\n                handler.flush()\n                handler.close()\n                logger.removeHandler(handler)\n\n            atexit._run_exitfuncs()\n\n    except Exception, err:  \n        import traceback\n        try:\n            import logging\n            logging.exception(\"Unhandled exception: %s\" % err)\n        except Exception, log_err:\n            print \"Failed to log error:\", log_err\n            traceback.print_exc()\n        from src.Config import config\n        traceback.print_exc(file=open(config.log_dir + \"/error.log\", \"a\"))\n\n    if main and main.update_after_shutdown:  \n        \n        gc.collect()  \n        print \"Restarting...\"\n        import time\n        time.sleep(1)  \n        args = sys.argv[:]\n\n        sys.executable = sys.executable.replace(\".pkg\", \"\")  \n\n        if not getattr(sys, 'frozen', False):\n            args.insert(0, sys.executable)\n\n        if sys.platform == 'win32':\n            args = ['\"%s\"' % arg for arg in args]\n\n        try:\n            print \"Executing %s %s\" % (sys.executable, args)\n            os.execv(sys.executable, args)\n        except Exception, err:\n            print \"Execv error: %s\" % err\n        print \"Bye.\"\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   usr bin env python2 7    included modules    change working dir zeronet py dir    external liblary directory    imports relative src    updater    try cleanup openssl    close lock file    update    close log files    prevent closing    updater    restart    garbage collect    wait files close    frozen mac fix ", "content": "#!/usr/bin/env python2.7\n\n# Included modules\nimport os\nimport sys\n\n\ndef main():\n    if \"--silent\" not in sys.argv:\n        print \"- Starting ZeroNet...\"\n\n    main = None\n    try:\n        app_dir = os.path.dirname(os.path.abspath(__file__))\n        os.chdir(app_dir)  # Change working dir to zeronet.py dir\n        sys.path.insert(0, os.path.join(app_dir, \"src/lib\"))  # External liblary directory\n        sys.path.insert(0, os.path.join(app_dir, \"src\"))  # Imports relative to src\n        import main\n        main.start()\n        if main.update_after_shutdown:  # Updater\n            import gc\n            import update\n            import atexit\n            # Try cleanup openssl\n            try:\n                if \"lib.opensslVerify\" in sys.modules:\n                    sys.modules[\"lib.opensslVerify\"].opensslVerify.closeLibrary()\n            except Exception, err:\n                print \"Error closing opensslVerify lib\", err\n            try:\n                if \"lib.pyelliptic\" in sys.modules:\n                    sys.modules[\"lib.pyelliptic\"].openssl.closeLibrary()\n            except Exception, err:\n                print \"Error closing pyelliptic lib\", err\n\n            # Close lock file\n            sys.modules[\"main\"].lock.close()\n\n            # Update\n            try:\n                update.update()\n            except Exception, err:\n                print \"Update error: %s\" % err\n\n            # Close log files\n            logger = sys.modules[\"main\"].logging.getLogger()\n\n            for handler in logger.handlers[:]:\n                handler.flush()\n                handler.close()\n                logger.removeHandler(handler)\n\n            atexit._run_exitfuncs()\n\n    except Exception, err:  # Prevent closing\n        import traceback\n        try:\n            import logging\n            logging.exception(\"Unhandled exception: %s\" % err)\n        except Exception, log_err:\n            print \"Failed to log error:\", log_err\n            traceback.print_exc()\n        from src.Config import config\n        traceback.print_exc(file=open(config.log_dir + \"/error.log\", \"a\"))\n\n    if main and main.update_after_shutdown:  # Updater\n        # Restart\n        gc.collect()  # Garbage collect\n        print \"Restarting...\"\n        import time\n        time.sleep(1)  # Wait files to close\n        args = sys.argv[:]\n\n        sys.executable = sys.executable.replace(\".pkg\", \"\")  # Frozen mac fix\n\n        if not getattr(sys, 'frozen', False):\n            args.insert(0, sys.executable)\n\n        if sys.platform == 'win32':\n            args = ['\"%s\"' % arg for arg in args]\n\n        try:\n            print \"Executing %s %s\" % (sys.executable, args)\n            os.execv(sys.executable, args)\n        except Exception, err:\n            print \"Execv error: %s\" % err\n        print \"Bye.\"\n\n\nif __name__ == '__main__':\n    main()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "zeronet.py", "id": "384c4cd6e621361d86090b39ae4623cf", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/zeronet.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}