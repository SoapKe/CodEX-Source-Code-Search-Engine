{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    unescapeHTML,\n)\n\n\nclass DVTVIE(InfoExtractor):\n    IE_NAME = 'dvtv'\n    IE_DESC = 'http://video.aktualne.cz/'\n\n    _VALID_URL = r'https?://video\\.aktualne\\.cz/(?:[^/]+/)+r~(?P<id>[0-9a-f]{32})'\n\n    _TESTS = [{\n        'url': 'http://video.aktualne.cz/dvtv/vondra-o-ceskem-stoleti-pri-pohledu-na-havla-mi-bylo-trapne/r~e5efe9ca855511e4833a0025900fea04/',\n        'md5': '67cb83e4a955d36e1b5d31993134a0c2',\n        'info_dict': {\n            'id': 'dc0768de855511e49e4b0025900fea04',\n            'ext': 'mp4',\n            'title': 'Vondra o \u010cesk\u00e9m stolet\u00ed: P\u0159i pohledu na Havla mi bylo trapn\u011b',\n            'duration': 1484,\n        }\n    }, {\n        'url': 'http://video.aktualne.cz/dvtv/dvtv-16-12-2014-utok-talibanu-boj-o-kliniku-uprchlici/r~973eb3bc854e11e498be002590604f2e/',\n        'info_dict': {\n            'title': r're:^DVTV 16\\. 12\\. 2014: \u00fatok Talibanu, boj o kliniku, uprchl\u00edci',\n            'id': '973eb3bc854e11e498be002590604f2e',\n        },\n        'playlist': [{\n            'md5': 'da7ca6be4935532241fa9520b3ad91e4',\n            'info_dict': {\n                'id': 'b0b40906854d11e4bdad0025900fea04',\n                'ext': 'mp4',\n                'title': 'Drtinov\u00e1 Veselovsk\u00fd TV 16. 12. 2014: T\u00e9mata dne',\n                'description': 'md5:0916925dea8e30fe84222582280b47a0',\n                'timestamp': 1418760010,\n                'upload_date': '20141216',\n            }\n        }, {\n            'md5': '5f7652a08b05009c1292317b449ffea2',\n            'info_dict': {\n                'id': '420ad9ec854a11e4bdad0025900fea04',\n                'ext': 'mp4',\n                'title': '\u0160koln\u00ed masakr mo\u017en\u00e1 zm\u011bn\u00ed boj s Talibanem, \u0159\u00edk\u00e1 novin\u00e1\u0159ka',\n                'description': 'md5:ff2f9f6de73c73d7cef4f756c1c1af42',\n                'timestamp': 1418760010,\n                'upload_date': '20141216',\n            }\n        }, {\n            'md5': '498eb9dfa97169f409126c617e2a3d64',\n            'info_dict': {\n                'id': '95d35580846a11e4b6d20025900fea04',\n                'ext': 'mp4',\n                'title': 'Boj o kliniku: Ve\u0159ejn\u00fd z\u00e1jem, nebo pr\u00e1vo na majetek?',\n                'description': 'md5:889fe610a70fee5511dc3326a089188e',\n                'timestamp': 1418760010,\n                'upload_date': '20141216',\n            }\n        }, {\n            'md5': 'b8dc6b744844032dab6ba3781a7274b9',\n            'info_dict': {\n                'id': '6fe14d66853511e4833a0025900fea04',\n                'ext': 'mp4',\n                'title': 'P\u00e1nek: Odm\u00edt\u00e1n\u00ed syrsk\u00fdch uprchl\u00edk\u016f je ostudou \u010desk\u00e9 vl\u00e1dy',\n                'description': 'md5:544f86de6d20c4815bea11bf2ac3004f',\n                'timestamp': 1418760010,\n                'upload_date': '20141216',\n            }\n        }],\n    }, {\n        'url': 'https://video.aktualne.cz/dvtv/zeman-si-jen-leci-mindraky-sobotku-nenavidi-a-babis-se-mu-te/r~960cdb3a365a11e7a83b0025900fea04/',\n        'md5': 'f8efe9656017da948369aa099788c8ea',\n        'info_dict': {\n            'id': '3c496fec365911e7a6500025900fea04',\n            'ext': 'mp4',\n            'title': 'Zeman si jen l\u00e9\u010d\u00ed mindr\u00e1ky, Sobotku nen\u00e1vid\u00ed a Babi\u0161 se mu te\u010f hod\u00ed, tvrd\u00ed Kmenta',\n            'duration': 1103,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://video.aktualne.cz/v-cechach-poprve-zazni-zelenkova-zrestaurovana-mse/r~45b4b00483ec11e4883b002590604f2e/',\n        'only_matching': True,\n    }, {\n        'url': 'https://video.aktualne.cz/dvtv/babis-a-zeman-nesou-vinu-za-to-ze-nemame-jasno-v-tom-kdo-bud/r~026afb54fad711e79704ac1f6b220ee8/',\n        'md5': '87defe16681b1429c91f7a74809823c6',\n        'info_dict': {\n            'id': 'f5ae72f6fad611e794dbac1f6b220ee8',\n            'ext': 'mp4',\n            'title': 'Babi\u0161 a Zeman nesou vinu za to, \u017ee nem\u00e1me jasno v tom, kdo bude vl\u00e1dnout, \u0159\u00edk\u00e1 Pekarov\u00e1 Adamov\u00e1',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _parse_video_metadata(self, js, video_id, live_js=None):\n        data = self._parse_json(js, video_id, transform_source=js_to_json)\n        if live_js:\n            data.update(self._parse_json(\n                live_js, video_id, transform_source=js_to_json))\n\n        title = unescapeHTML(data['title'])\n\n        formats = []\n        for video in data['sources']:\n            video_url = video.get('file')\n            if not video_url:\n                continue\n            video_type = video.get('type')\n            ext = determine_ext(video_url, mimetype2ext(video_type))\n            if video_type == 'application/vnd.apple.mpegurl' or ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif video_type == 'application/dash+xml' or ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    video_url, video_id, mpd_id='dash', fatal=False))\n            else:\n                label = video.get('label')\n                height = self._search_regex(\n                    r'^(\\d+)[pP]', label or '', 'height', default=None)\n                format_id = ['http']\n                for f in (ext, label):\n                    if f:\n                        format_id.append(f)\n                formats.append({\n                    'url': video_url,\n                    'format_id': '-'.join(format_id),\n                    'height': int_or_none(height),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': data.get('mediaid') or video_id,\n            'title': title,\n            'description': data.get('description'),\n            'thumbnail': data.get('image'),\n            'duration': int_or_none(data.get('duration')),\n            'timestamp': int_or_none(data.get('pubtime')),\n            'formats': formats\n        }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        \n        live_item = self._search_regex(\n            r'(?s)embedData[0-9a-f]{32}\\.asset\\.liveStarter\\s*=\\s*(\\{.+?\\});',\n            webpage, 'video', default=None)\n\n        \n        item = self._search_regex(\n            r'(?s)embedData[0-9a-f]{32}\\[[\"\\']asset[\"\\']\\]\\s*=\\s*(\\{.+?\\});',\n            webpage, 'video', default=None)\n\n        if item:\n            return self._parse_video_metadata(item, video_id, live_item)\n\n        \n        items = re.findall(\n            r\"(?s)BBX\\.context\\.assets\\['[0-9a-f]{32}'\\]\\.push\\(({.+?})\\);\",\n            webpage)\n        if not items:\n            items = re.findall(r'(?s)var\\s+asset\\s*=\\s*({.+?});\\n', webpage)\n\n        if items:\n            return {\n                '_type': 'playlist',\n                'id': video_id,\n                'title': self._og_search_title(webpage),\n                'entries': [self._parse_video_metadata(i, video_id) for i in items]\n            }\n\n        raise ExtractorError('Could not find neither video nor playlist')\n", "comments": "# coding: utf-8\n# live content\n# single video\n# playlist\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    js_to_json,\n    mimetype2ext,\n    unescapeHTML,\n)\n\n\nclass DVTVIE(InfoExtractor):\n    IE_NAME = 'dvtv'\n    IE_DESC = 'http://video.aktualne.cz/'\n\n    _VALID_URL = r'https?://video\\.aktualne\\.cz/(?:[^/]+/)+r~(?P<id>[0-9a-f]{32})'\n\n    _TESTS = [{\n        'url': 'http://video.aktualne.cz/dvtv/vondra-o-ceskem-stoleti-pri-pohledu-na-havla-mi-bylo-trapne/r~e5efe9ca855511e4833a0025900fea04/',\n        'md5': '67cb83e4a955d36e1b5d31993134a0c2',\n        'info_dict': {\n            'id': 'dc0768de855511e49e4b0025900fea04',\n            'ext': 'mp4',\n            'title': 'Vondra o \u010cesk\u00e9m stolet\u00ed: P\u0159i pohledu na Havla mi bylo trapn\u011b',\n            'duration': 1484,\n        }\n    }, {\n        'url': 'http://video.aktualne.cz/dvtv/dvtv-16-12-2014-utok-talibanu-boj-o-kliniku-uprchlici/r~973eb3bc854e11e498be002590604f2e/',\n        'info_dict': {\n            'title': r're:^DVTV 16\\. 12\\. 2014: \u00fatok Talibanu, boj o kliniku, uprchl\u00edci',\n            'id': '973eb3bc854e11e498be002590604f2e',\n        },\n        'playlist': [{\n            'md5': 'da7ca6be4935532241fa9520b3ad91e4',\n            'info_dict': {\n                'id': 'b0b40906854d11e4bdad0025900fea04',\n                'ext': 'mp4',\n                'title': 'Drtinov\u00e1 Veselovsk\u00fd TV 16. 12. 2014: T\u00e9mata dne',\n                'description': 'md5:0916925dea8e30fe84222582280b47a0',\n                'timestamp': 1418760010,\n                'upload_date': '20141216',\n            }\n        }, {\n            'md5': '5f7652a08b05009c1292317b449ffea2',\n            'info_dict': {\n                'id': '420ad9ec854a11e4bdad0025900fea04',\n                'ext': 'mp4',\n                'title': '\u0160koln\u00ed masakr mo\u017en\u00e1 zm\u011bn\u00ed boj s Talibanem, \u0159\u00edk\u00e1 novin\u00e1\u0159ka',\n                'description': 'md5:ff2f9f6de73c73d7cef4f756c1c1af42',\n                'timestamp': 1418760010,\n                'upload_date': '20141216',\n            }\n        }, {\n            'md5': '498eb9dfa97169f409126c617e2a3d64',\n            'info_dict': {\n                'id': '95d35580846a11e4b6d20025900fea04',\n                'ext': 'mp4',\n                'title': 'Boj o kliniku: Ve\u0159ejn\u00fd z\u00e1jem, nebo pr\u00e1vo na majetek?',\n                'description': 'md5:889fe610a70fee5511dc3326a089188e',\n                'timestamp': 1418760010,\n                'upload_date': '20141216',\n            }\n        }, {\n            'md5': 'b8dc6b744844032dab6ba3781a7274b9',\n            'info_dict': {\n                'id': '6fe14d66853511e4833a0025900fea04',\n                'ext': 'mp4',\n                'title': 'P\u00e1nek: Odm\u00edt\u00e1n\u00ed syrsk\u00fdch uprchl\u00edk\u016f je ostudou \u010desk\u00e9 vl\u00e1dy',\n                'description': 'md5:544f86de6d20c4815bea11bf2ac3004f',\n                'timestamp': 1418760010,\n                'upload_date': '20141216',\n            }\n        }],\n    }, {\n        'url': 'https://video.aktualne.cz/dvtv/zeman-si-jen-leci-mindraky-sobotku-nenavidi-a-babis-se-mu-te/r~960cdb3a365a11e7a83b0025900fea04/',\n        'md5': 'f8efe9656017da948369aa099788c8ea',\n        'info_dict': {\n            'id': '3c496fec365911e7a6500025900fea04',\n            'ext': 'mp4',\n            'title': 'Zeman si jen l\u00e9\u010d\u00ed mindr\u00e1ky, Sobotku nen\u00e1vid\u00ed a Babi\u0161 se mu te\u010f hod\u00ed, tvrd\u00ed Kmenta',\n            'duration': 1103,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://video.aktualne.cz/v-cechach-poprve-zazni-zelenkova-zrestaurovana-mse/r~45b4b00483ec11e4883b002590604f2e/',\n        'only_matching': True,\n    }, {\n        'url': 'https://video.aktualne.cz/dvtv/babis-a-zeman-nesou-vinu-za-to-ze-nemame-jasno-v-tom-kdo-bud/r~026afb54fad711e79704ac1f6b220ee8/',\n        'md5': '87defe16681b1429c91f7a74809823c6',\n        'info_dict': {\n            'id': 'f5ae72f6fad611e794dbac1f6b220ee8',\n            'ext': 'mp4',\n            'title': 'Babi\u0161 a Zeman nesou vinu za to, \u017ee nem\u00e1me jasno v tom, kdo bude vl\u00e1dnout, \u0159\u00edk\u00e1 Pekarov\u00e1 Adamov\u00e1',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _parse_video_metadata(self, js, video_id, live_js=None):\n        data = self._parse_json(js, video_id, transform_source=js_to_json)\n        if live_js:\n            data.update(self._parse_json(\n                live_js, video_id, transform_source=js_to_json))\n\n        title = unescapeHTML(data['title'])\n\n        formats = []\n        for video in data['sources']:\n            video_url = video.get('file')\n            if not video_url:\n                continue\n            video_type = video.get('type')\n            ext = determine_ext(video_url, mimetype2ext(video_type))\n            if video_type == 'application/vnd.apple.mpegurl' or ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif video_type == 'application/dash+xml' or ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    video_url, video_id, mpd_id='dash', fatal=False))\n            else:\n                label = video.get('label')\n                height = self._search_regex(\n                    r'^(\\d+)[pP]', label or '', 'height', default=None)\n                format_id = ['http']\n                for f in (ext, label):\n                    if f:\n                        format_id.append(f)\n                formats.append({\n                    'url': video_url,\n                    'format_id': '-'.join(format_id),\n                    'height': int_or_none(height),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': data.get('mediaid') or video_id,\n            'title': title,\n            'description': data.get('description'),\n            'thumbnail': data.get('image'),\n            'duration': int_or_none(data.get('duration')),\n            'timestamp': int_or_none(data.get('pubtime')),\n            'formats': formats\n        }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        # live content\n        live_item = self._search_regex(\n            r'(?s)embedData[0-9a-f]{32}\\.asset\\.liveStarter\\s*=\\s*(\\{.+?\\});',\n            webpage, 'video', default=None)\n\n        # single video\n        item = self._search_regex(\n            r'(?s)embedData[0-9a-f]{32}\\[[\"\\']asset[\"\\']\\]\\s*=\\s*(\\{.+?\\});',\n            webpage, 'video', default=None)\n\n        if item:\n            return self._parse_video_metadata(item, video_id, live_item)\n\n        # playlist\n        items = re.findall(\n            r\"(?s)BBX\\.context\\.assets\\['[0-9a-f]{32}'\\]\\.push\\(({.+?})\\);\",\n            webpage)\n        if not items:\n            items = re.findall(r'(?s)var\\s+asset\\s*=\\s*({.+?});\\n', webpage)\n\n        if items:\n            return {\n                '_type': 'playlist',\n                'id': video_id,\n                'title': self._og_search_title(webpage),\n                'entries': [self._parse_video_metadata(i, video_id) for i in items]\n            }\n\n        raise ExtractorError('Could not find neither video nor playlist')\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "dvtv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/dvtv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}