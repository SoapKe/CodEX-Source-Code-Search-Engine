{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_iso8601,\n    parse_duration,\n    parse_filesize,\n    int_or_none,\n)\n\n\nclass AlphaPornoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?alphaporno\\.com/videos/(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://www.alphaporno.com/videos/sensual-striptease-porn-with-samantha-alexandra/',\n        'md5': 'feb6d3bba8848cd54467a87ad34bd38e',\n        'info_dict': {\n            'id': '258807',\n            'display_id': 'sensual-striptease-porn-with-samantha-alexandra',\n            'ext': 'mp4',\n            'title': 'Sensual striptease porn with Samantha Alexandra',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'timestamp': 1418694611,\n            'upload_date': '20141216',\n            'duration': 387,\n            'filesize_approx': 54120000,\n            'tbr': 1145,\n            'categories': list,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_id = self._search_regex(\n            r\"video_id\\s*:\\s*'([^']+)'\", webpage, 'video id', default=None)\n\n        video_url = self._search_regex(\n            r\"video_url\\s*:\\s*'([^']+)'\", webpage, 'video url')\n        ext = self._html_search_meta(\n            'encodingFormat', webpage, 'ext', default='.mp4')[1:]\n\n        title = self._search_regex(\n            [r'<meta content=\"([^\"]+)\" itemprop=\"description\">',\n             r'class=\"title\" itemprop=\"name\">([^<]+)<'],\n            webpage, 'title')\n        thumbnail = self._html_search_meta('thumbnail', webpage, 'thumbnail')\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage, 'upload date'))\n        duration = parse_duration(self._html_search_meta(\n            'duration', webpage, 'duration'))\n        filesize_approx = parse_filesize(self._html_search_meta(\n            'contentSize', webpage, 'file size'))\n        bitrate = int_or_none(self._html_search_meta(\n            'bitrate', webpage, 'bitrate'))\n        categories = self._html_search_meta(\n            'keywords', webpage, 'categories', default='').split(',')\n\n        age_limit = self._rta_search(webpage)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'ext': ext,\n            'title': title,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'filesize_approx': filesize_approx,\n            'tbr': bitrate,\n            'categories': categories,\n            'age_limit': age_limit,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_iso8601,\n    parse_duration,\n    parse_filesize,\n    int_or_none,\n)\n\n\nclass AlphaPornoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?alphaporno\\.com/videos/(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://www.alphaporno.com/videos/sensual-striptease-porn-with-samantha-alexandra/',\n        'md5': 'feb6d3bba8848cd54467a87ad34bd38e',\n        'info_dict': {\n            'id': '258807',\n            'display_id': 'sensual-striptease-porn-with-samantha-alexandra',\n            'ext': 'mp4',\n            'title': 'Sensual striptease porn with Samantha Alexandra',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'timestamp': 1418694611,\n            'upload_date': '20141216',\n            'duration': 387,\n            'filesize_approx': 54120000,\n            'tbr': 1145,\n            'categories': list,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_id = self._search_regex(\n            r\"video_id\\s*:\\s*'([^']+)'\", webpage, 'video id', default=None)\n\n        video_url = self._search_regex(\n            r\"video_url\\s*:\\s*'([^']+)'\", webpage, 'video url')\n        ext = self._html_search_meta(\n            'encodingFormat', webpage, 'ext', default='.mp4')[1:]\n\n        title = self._search_regex(\n            [r'<meta content=\"([^\"]+)\" itemprop=\"description\">',\n             r'class=\"title\" itemprop=\"name\">([^<]+)<'],\n            webpage, 'title')\n        thumbnail = self._html_search_meta('thumbnail', webpage, 'thumbnail')\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage, 'upload date'))\n        duration = parse_duration(self._html_search_meta(\n            'duration', webpage, 'duration'))\n        filesize_approx = parse_filesize(self._html_search_meta(\n            'contentSize', webpage, 'file size'))\n        bitrate = int_or_none(self._html_search_meta(\n            'bitrate', webpage, 'bitrate'))\n        categories = self._html_search_meta(\n            'keywords', webpage, 'categories', default='').split(',')\n\n        age_limit = self._rta_search(webpage)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'ext': ext,\n            'title': title,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'filesize_approx': filesize_approx,\n            'tbr': bitrate,\n            'categories': categories,\n            'age_limit': age_limit,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "alphaporno.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/alphaporno.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}