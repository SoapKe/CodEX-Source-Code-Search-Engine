{"author": "ansible", "code": "\n (c) 2017 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport re\nimport json\n\nfrom itertools import chain\n\nfrom ansible.module_utils._text import to_bytes, to_text\nfrom ansible.module_utils.network.common.utils import to_list\nfrom ansible.plugins.cliconf import CliconfBase\n\n\nclass Cliconf(CliconfBase):\n\n    def get_device_info(self):\n        device_info = {}\n\n        device_info['network_os'] = 'iosxr'\n        reply = self.get(b'show version brief')\n        data = to_text(reply, errors='surrogate_or_strict').strip()\n\n        match = re.search(r'Version (\\S+)$', data, re.M)\n        if match:\n            device_info['network_os_version'] = match.group(1)\n\n        match = re.search(r'image file is \"(.+)\"', data)\n        if match:\n            device_info['network_os_image'] = match.group(1)\n\n        match = re.search(r'^Cisco (.+) \\(revision', data, re.M)\n        if match:\n            device_info['network_os_model'] = match.group(1)\n\n        match = re.search(r'^(.+) uptime', data, re.M)\n        if match:\n            device_info['network_os_hostname'] = match.group(1)\n\n        return device_info\n\n    def get_config(self, source='running', format='text', filter=None):\n        lookup = {'running': 'running-config'}\n        if source not in lookup:\n            return self.invalid_params(\"fetching configuration from %s is not supported\" % source)\n        if filter:\n            cmd = to_bytes('show {0} {1}'.format(lookup[source], filter), errors='surrogate_or_strict')\n        else:\n            cmd = to_bytes('show {0}'.format(lookup[source]), errors='surrogate_or_strict')\n\n        return self.send_command(cmd)\n\n    def edit_config(self, commands=None):\n        for cmd in chain(to_list(commands)):\n            try:\n                if isinstance(cmd, str):\n                    cmd = json.loads(cmd)\n                command = cmd.get('command', None)\n                prompt = cmd.get('prompt', None)\n                answer = cmd.get('answer', None)\n                sendonly = cmd.get('sendonly', False)\n                newline = cmd.get('newline', True)\n            except:\n                command = cmd\n                prompt = None\n                answer = None\n                sendonly = None\n                newline = None\n\n            self.send_command(command=command, prompt=prompt, answer=answer, sendonly=sendonly, newline=newline)\n\n    def get(self, command=None, prompt=None, answer=None, sendonly=False, newline=True):\n        return self.send_command(command=command, prompt=prompt, answer=answer, sendonly=sendonly, newline=newline)\n\n    def commit(self, comment=None):\n        if comment:\n            command = 'commit comment {0}'.format(comment)\n        else:\n            command = 'commit'\n        self.send_command(to_bytes(command))\n\n    def discard_changes(self):\n        self.send_command(b'abort')\n\n    def get_capabilities(self):\n        result = {}\n        result['rpc'] = self.get_base_rpc() + ['commit', 'discard_changes']\n        result['network_api'] = 'cliconf'\n        result['device_info'] = self.get_device_info()\n        return json.dumps(result)\n", "comments": "     (c) 2017 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       ", "content": "#\n# (c) 2017 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport re\nimport json\n\nfrom itertools import chain\n\nfrom ansible.module_utils._text import to_bytes, to_text\nfrom ansible.module_utils.network.common.utils import to_list\nfrom ansible.plugins.cliconf import CliconfBase\n\n\nclass Cliconf(CliconfBase):\n\n    def get_device_info(self):\n        device_info = {}\n\n        device_info['network_os'] = 'iosxr'\n        reply = self.get(b'show version brief')\n        data = to_text(reply, errors='surrogate_or_strict').strip()\n\n        match = re.search(r'Version (\\S+)$', data, re.M)\n        if match:\n            device_info['network_os_version'] = match.group(1)\n\n        match = re.search(r'image file is \"(.+)\"', data)\n        if match:\n            device_info['network_os_image'] = match.group(1)\n\n        match = re.search(r'^Cisco (.+) \\(revision', data, re.M)\n        if match:\n            device_info['network_os_model'] = match.group(1)\n\n        match = re.search(r'^(.+) uptime', data, re.M)\n        if match:\n            device_info['network_os_hostname'] = match.group(1)\n\n        return device_info\n\n    def get_config(self, source='running', format='text', filter=None):\n        lookup = {'running': 'running-config'}\n        if source not in lookup:\n            return self.invalid_params(\"fetching configuration from %s is not supported\" % source)\n        if filter:\n            cmd = to_bytes('show {0} {1}'.format(lookup[source], filter), errors='surrogate_or_strict')\n        else:\n            cmd = to_bytes('show {0}'.format(lookup[source]), errors='surrogate_or_strict')\n\n        return self.send_command(cmd)\n\n    def edit_config(self, commands=None):\n        for cmd in chain(to_list(commands)):\n            try:\n                if isinstance(cmd, str):\n                    cmd = json.loads(cmd)\n                command = cmd.get('command', None)\n                prompt = cmd.get('prompt', None)\n                answer = cmd.get('answer', None)\n                sendonly = cmd.get('sendonly', False)\n                newline = cmd.get('newline', True)\n            except:\n                command = cmd\n                prompt = None\n                answer = None\n                sendonly = None\n                newline = None\n\n            self.send_command(command=command, prompt=prompt, answer=answer, sendonly=sendonly, newline=newline)\n\n    def get(self, command=None, prompt=None, answer=None, sendonly=False, newline=True):\n        return self.send_command(command=command, prompt=prompt, answer=answer, sendonly=sendonly, newline=newline)\n\n    def commit(self, comment=None):\n        if comment:\n            command = 'commit comment {0}'.format(comment)\n        else:\n            command = 'commit'\n        self.send_command(to_bytes(command))\n\n    def discard_changes(self):\n        self.send_command(b'abort')\n\n    def get_capabilities(self):\n        result = {}\n        result['rpc'] = self.get_base_rpc() + ['commit', 'discard_changes']\n        result['network_api'] = 'cliconf'\n        result['device_info'] = self.get_device_info()\n        return json.dumps(result)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "iosxr.py", "id": "e35fa0e6cfb135c9c473f6b51002fe1d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/plugins/cliconf/iosxr.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}