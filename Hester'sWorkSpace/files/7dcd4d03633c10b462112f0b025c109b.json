{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    mimetype2ext,\n    determine_ext,\n    update_url_query,\n    get_element_by_attribute,\n    int_or_none,\n)\n\n\nclass NobelPrizeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?nobelprize\\.org/mediaplayer.*?\\bid=(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.nobelprize.org/mediaplayer/?id=2636',\n        'md5': '04c81e5714bb36cc4e2232fee1d8157f',\n        'info_dict': {\n            'id': '2636',\n            'ext': 'mp4',\n            'title': 'Announcement of the 2016 Nobel Prize in Physics',\n            'description': 'md5:05beba57f4f5a4bbd4cf2ef28fcff739',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        media = self._parse_json(self._search_regex(\n            r'(?s)var\\s*config\\s*=\\s*({.+?});', webpage,\n            'config'), video_id, js_to_json)['media']\n        title = media['title']\n\n        formats = []\n        for source in media.get('source', []):\n            source_src = source.get('src')\n            if not source_src:\n                continue\n            ext = mimetype2ext(source.get('type')) or determine_ext(source_src)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    source_src, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(source_src, {'hdcore': '3.7.0'}),\n                    video_id, f4m_id='hds', fatal=False))\n            else:\n                formats.append({\n                    'url': source_src,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': get_element_by_attribute('itemprop', 'description', webpage),\n            'duration': int_or_none(media.get('duration')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    mimetype2ext,\n    determine_ext,\n    update_url_query,\n    get_element_by_attribute,\n    int_or_none,\n)\n\n\nclass NobelPrizeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?nobelprize\\.org/mediaplayer.*?\\bid=(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.nobelprize.org/mediaplayer/?id=2636',\n        'md5': '04c81e5714bb36cc4e2232fee1d8157f',\n        'info_dict': {\n            'id': '2636',\n            'ext': 'mp4',\n            'title': 'Announcement of the 2016 Nobel Prize in Physics',\n            'description': 'md5:05beba57f4f5a4bbd4cf2ef28fcff739',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        media = self._parse_json(self._search_regex(\n            r'(?s)var\\s*config\\s*=\\s*({.+?});', webpage,\n            'config'), video_id, js_to_json)['media']\n        title = media['title']\n\n        formats = []\n        for source in media.get('source', []):\n            source_src = source.get('src')\n            if not source_src:\n                continue\n            ext = mimetype2ext(source.get('type')) or determine_ext(source_src)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    source_src, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    update_url_query(source_src, {'hdcore': '3.7.0'}),\n                    video_id, f4m_id='hds', fatal=False))\n            else:\n                formats.append({\n                    'url': source_src,\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': get_element_by_attribute('itemprop', 'description', webpage),\n            'duration': int_or_none(media.get('duration')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nobelprize.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nobelprize.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}