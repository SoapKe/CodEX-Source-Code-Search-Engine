{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nfrom ..compat import (\n    compat_b64decode,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    update_url_query,\n)\nfrom .bokecc import BokeCCBaseIE\n\n\nclass InfoQIE(BokeCCBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?infoq\\.com/(?:[^/]+/)+(?P<id>[^/]+)'\n\n    _TESTS = [{\n        'url': 'http://www.infoq.com/presentations/A-Few-of-My-Favorite-Python-Things',\n        'md5': 'b5ca0e0a8c1fed93b0e65e48e462f9a2',\n        'info_dict': {\n            'id': 'A-Few-of-My-Favorite-Python-Things',\n            'ext': 'mp4',\n            'description': 'Mike Pirnat presents some tips and tricks, standard libraries and third party packages that make programming in Python a richer experience.',\n            'title': 'A Few of My Favorite [Python] Things',\n        },\n    }, {\n        'url': 'http://www.infoq.com/fr/presentations/changez-avis-sur-javascript',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.infoq.com/cn/presentations/openstack-continued-delivery',\n        'md5': '4918d0cca1497f2244572caf626687ef',\n        'info_dict': {\n            'id': 'openstack-continued-delivery',\n            'title': 'OpenStack\u6301\u7eed\u4ea4\u4ed8\u4e4b\u8def',\n            'ext': 'flv',\n            'description': 'md5:308d981fb28fa42f49f9568322c683ff',\n        },\n    }, {\n        'url': 'https://www.infoq.com/presentations/Simple-Made-Easy',\n        'md5': '0e34642d4d9ef44bf86f66f6399672db',\n        'info_dict': {\n            'id': 'Simple-Made-Easy',\n            'title': 'Simple Made Easy',\n            'ext': 'mp3',\n            'description': 'md5:3e0e213a8bbd074796ef89ea35ada25b',\n        },\n        'params': {\n            'format': 'bestaudio',\n        },\n    }]\n\n    def _extract_rtmp_video(self, webpage):\n        \n        video_url = 'rtmpe://video.infoq.com/cfx/st/'\n\n        \n        encoded_id = self._search_regex(\n            r\"jsclassref\\s*=\\s*'([^']*)'\", webpage, 'encoded id', default=None)\n\n        real_id = compat_urllib_parse_unquote(compat_b64decode(encoded_id).decode('utf-8'))\n        playpath = 'mp4:' + real_id\n\n        return [{\n            'format_id': 'rtmp_video',\n            'url': video_url,\n            'ext': determine_ext(playpath),\n            'play_path': playpath,\n        }]\n\n    def _extract_cf_auth(self, webpage):\n        policy = self._search_regex(r'InfoQConstants\\.scp\\s*=\\s*\\'([^\\']+)\\'', webpage, 'policy')\n        signature = self._search_regex(r'InfoQConstants\\.scs\\s*=\\s*\\'([^\\']+)\\'', webpage, 'signature')\n        key_pair_id = self._search_regex(r'InfoQConstants\\.sck\\s*=\\s*\\'([^\\']+)\\'', webpage, 'key-pair-id')\n        return {\n            'Policy': policy,\n            'Signature': signature,\n            'Key-Pair-Id': key_pair_id,\n        }\n\n    def _extract_http_video(self, webpage):\n        http_video_url = self._search_regex(r'P\\.s\\s*=\\s*\\'([^\\']+)\\'', webpage, 'video URL')\n        http_video_url = update_url_query(http_video_url, self._extract_cf_auth(webpage))\n        return [{\n            'format_id': 'http_video',\n            'url': http_video_url,\n        }]\n\n    def _extract_http_audio(self, webpage, video_id):\n        fields = self._hidden_inputs(webpage)\n        http_audio_url = fields.get('filename')\n        if not http_audio_url:\n            return []\n\n        \n        \n        http_audio_url = compat_urlparse.urljoin('http://res.infoq.com/downloads/mp3downloads/', http_audio_url)\n        http_audio_url = update_url_query(http_audio_url, self._extract_cf_auth(webpage))\n\n        \n        \n        if not self._is_valid_url(http_audio_url, video_id):\n            return []\n\n        return [{\n            'format_id': 'http_audio',\n            'url': http_audio_url,\n            'vcodec': 'none',\n        }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_title = self._html_search_regex(r'<title>(.*?)</title>', webpage, 'title')\n        video_description = self._html_search_meta('description', webpage, 'description')\n\n        if '/cn/' in url:\n            \n            formats = self._extract_bokecc_formats(webpage, video_id)\n        else:\n            formats = (\n                self._extract_rtmp_video(webpage) +\n                self._extract_http_video(webpage) +\n                self._extract_http_audio(webpage, video_id))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'description': video_description,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# The server URL is hardcoded\n# Extract video URL\n# base URL is found in the Location header in the response returned by\n# GET https://www.infoq.com/mp3download.action?filename=... when logged in.\n# audio file seem to be missing some times even if there is a download link\n# so probe URL to make sure\n# for China videos, HTTP video URL exists but always fails with 403\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nfrom ..compat import (\n    compat_b64decode,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    update_url_query,\n)\nfrom .bokecc import BokeCCBaseIE\n\n\nclass InfoQIE(BokeCCBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?infoq\\.com/(?:[^/]+/)+(?P<id>[^/]+)'\n\n    _TESTS = [{\n        'url': 'http://www.infoq.com/presentations/A-Few-of-My-Favorite-Python-Things',\n        'md5': 'b5ca0e0a8c1fed93b0e65e48e462f9a2',\n        'info_dict': {\n            'id': 'A-Few-of-My-Favorite-Python-Things',\n            'ext': 'mp4',\n            'description': 'Mike Pirnat presents some tips and tricks, standard libraries and third party packages that make programming in Python a richer experience.',\n            'title': 'A Few of My Favorite [Python] Things',\n        },\n    }, {\n        'url': 'http://www.infoq.com/fr/presentations/changez-avis-sur-javascript',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.infoq.com/cn/presentations/openstack-continued-delivery',\n        'md5': '4918d0cca1497f2244572caf626687ef',\n        'info_dict': {\n            'id': 'openstack-continued-delivery',\n            'title': 'OpenStack\u6301\u7eed\u4ea4\u4ed8\u4e4b\u8def',\n            'ext': 'flv',\n            'description': 'md5:308d981fb28fa42f49f9568322c683ff',\n        },\n    }, {\n        'url': 'https://www.infoq.com/presentations/Simple-Made-Easy',\n        'md5': '0e34642d4d9ef44bf86f66f6399672db',\n        'info_dict': {\n            'id': 'Simple-Made-Easy',\n            'title': 'Simple Made Easy',\n            'ext': 'mp3',\n            'description': 'md5:3e0e213a8bbd074796ef89ea35ada25b',\n        },\n        'params': {\n            'format': 'bestaudio',\n        },\n    }]\n\n    def _extract_rtmp_video(self, webpage):\n        # The server URL is hardcoded\n        video_url = 'rtmpe://video.infoq.com/cfx/st/'\n\n        # Extract video URL\n        encoded_id = self._search_regex(\n            r\"jsclassref\\s*=\\s*'([^']*)'\", webpage, 'encoded id', default=None)\n\n        real_id = compat_urllib_parse_unquote(compat_b64decode(encoded_id).decode('utf-8'))\n        playpath = 'mp4:' + real_id\n\n        return [{\n            'format_id': 'rtmp_video',\n            'url': video_url,\n            'ext': determine_ext(playpath),\n            'play_path': playpath,\n        }]\n\n    def _extract_cf_auth(self, webpage):\n        policy = self._search_regex(r'InfoQConstants\\.scp\\s*=\\s*\\'([^\\']+)\\'', webpage, 'policy')\n        signature = self._search_regex(r'InfoQConstants\\.scs\\s*=\\s*\\'([^\\']+)\\'', webpage, 'signature')\n        key_pair_id = self._search_regex(r'InfoQConstants\\.sck\\s*=\\s*\\'([^\\']+)\\'', webpage, 'key-pair-id')\n        return {\n            'Policy': policy,\n            'Signature': signature,\n            'Key-Pair-Id': key_pair_id,\n        }\n\n    def _extract_http_video(self, webpage):\n        http_video_url = self._search_regex(r'P\\.s\\s*=\\s*\\'([^\\']+)\\'', webpage, 'video URL')\n        http_video_url = update_url_query(http_video_url, self._extract_cf_auth(webpage))\n        return [{\n            'format_id': 'http_video',\n            'url': http_video_url,\n        }]\n\n    def _extract_http_audio(self, webpage, video_id):\n        fields = self._hidden_inputs(webpage)\n        http_audio_url = fields.get('filename')\n        if not http_audio_url:\n            return []\n\n        # base URL is found in the Location header in the response returned by\n        # GET https://www.infoq.com/mp3download.action?filename=... when logged in.\n        http_audio_url = compat_urlparse.urljoin('http://res.infoq.com/downloads/mp3downloads/', http_audio_url)\n        http_audio_url = update_url_query(http_audio_url, self._extract_cf_auth(webpage))\n\n        # audio file seem to be missing some times even if there is a download link\n        # so probe URL to make sure\n        if not self._is_valid_url(http_audio_url, video_id):\n            return []\n\n        return [{\n            'format_id': 'http_audio',\n            'url': http_audio_url,\n            'vcodec': 'none',\n        }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_title = self._html_search_regex(r'<title>(.*?)</title>', webpage, 'title')\n        video_description = self._html_search_meta('description', webpage, 'description')\n\n        if '/cn/' in url:\n            # for China videos, HTTP video URL exists but always fails with 403\n            formats = self._extract_bokecc_formats(webpage, video_id)\n        else:\n            formats = (\n                self._extract_rtmp_video(webpage) +\n                self._extract_http_video(webpage) +\n                self._extract_http_audio(webpage, video_id))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'description': video_description,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "infoq.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/infoq.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}