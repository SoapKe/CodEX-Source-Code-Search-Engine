{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models, tools\n\n\nclass MailComposeMessage(models.TransientModel):\n    \"\"\"Add concept of mass mailing campaign to the mail.compose.message wizard\n    \"\"\"\n    _inherit = 'mail.compose.message'\n\n    mass_mailing_campaign_id = fields.Many2one('mail.mass_mailing.campaign', string='Mass Mailing Campaign')\n    mass_mailing_id = fields.Many2one('mail.mass_mailing', string='Mass Mailing', ondelete='cascade')\n    mass_mailing_name = fields.Char(string='Mass Mailing')\n    mailing_list_ids = fields.Many2many('mail.mass_mailing.list', string='Mailing List')\n\n    @api.multi\n    def get_mail_values(self, res_ids):\n        \"\"\" Override method that generated the mail content by creating the\n        mail.mail.statistics values in the o2m of mail_mail, when doing pure\n        email mass mailing. \"\"\"\n        self.ensure_one()\n        res = super(MailComposeMessage, self).get_mail_values(res_ids)\n        \n        if self.composition_mode == 'mass_mail' and \\\n                (self.mass_mailing_name or self.mass_mailing_id) and \\\n                self.env['ir.model'].sudo().search([('model', '=', self.model), ('is_mail_thread', '=', True)], limit=1):\n            mass_mailing = self.mass_mailing_id\n            if not mass_mailing:\n                reply_to_mode = 'email' if self.no_auto_thread else 'thread'\n                reply_to = self.reply_to if self.no_auto_thread else False\n                mass_mailing = self.env['mail.mass_mailing'].create({\n                        'mass_mailing_campaign_id': self.mass_mailing_campaign_id.id,\n                        'name': self.mass_mailing_name,\n                        'template_id': self.template_id.id,\n                        'state': 'done',\n                        'reply_to_mode': reply_to_mode,\n                        'reply_to': reply_to,\n                        'sent_date': fields.Datetime.now(),\n                        'body_html': self.body,\n                        'mailing_model_id': self.env['ir.model']._get(self.model).id,\n                        'mailing_domain': self.active_domain,\n                })\n\n            \n            \n            # (the only object to fill get_default_recipient this way)\n            recipient_partners_ids = []\n            read_partners = {}\n            for res_id in res_ids:\n                mail_values = res[res_id]\n                if mail_values.get('recipient_ids'):\n                    \n                    recipient_partners_ids.append(mail_values.get('recipient_ids')[0][1])\n            read_partners = self.env['res.partner'].browse(recipient_partners_ids)\n\n            partners_email = {p.id: p.email for p in read_partners}\n\n            blacklist = self._context.get('mass_mailing_blacklist')\n            seen_list = self._context.get('mass_mailing_seen_list')\n            for res_id in res_ids:\n                mail_values = res[res_id]\n                if mail_values.get('email_to'):\n                    recips = tools.email_split(mail_values['email_to'])\n                else:\n                    recips = tools.email_split(partners_email.get(res_id))\n                mail_to = recips[0].lower() if recips else False\n                if (blacklist and mail_to in blacklist) or (seen_list and mail_to in seen_list):\n                    \n                    mail_values['state'] = 'cancel'\n                elif seen_list is not None:\n                    seen_list.add(mail_to)\n                stat_vals = {\n                    'model': self.model,\n                    'res_id': res_id,\n                    'mass_mailing_id': mass_mailing.id\n                }\n                \n                if mail_values.get('state') == 'cancel':\n                    stat_vals['exception'] = fields.Datetime.now()\n                mail_values.update({\n                    'mailing_id': mass_mailing.id,\n                    'statistics_ids': [(0, 0, stat_vals)],\n                    \n                    'notification': mass_mailing.reply_to_mode == 'thread',\n                    'auto_delete': not mass_mailing.keep_archives,\n                })\n        return res\n", "comments": "   add concept mass mailing campaign mail compose message wizard              inherit    mail compose message       mass mailing campaign id   fields many2one( mail mass mailing campaign   string  mass mailing campaign )     mass mailing id   fields many2one( mail mass mailing   string  mass mailing   ondelete  cascade )     mass mailing name   fields char(string  mass mailing )     mailing list ids   fields many2many( mail mass mailing list   string  mailing list )       api multi     def get mail values(self  res ids)              override method generated mail content creating         mail mail statistics values o2m mail mail  pure         email mass mailing             coding  utf 8        part odoo  see license file full copyright licensing details     use allowed models mass mailing    preprocess res partners batch fetch db    recipient ids present  means partners    (the object fill get default recipient way)    recipient ids list x2m command tuples point    prevent sending blocked addresses included mistake    propagate exception state stat still born    email mode  keep original message routing ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nfrom odoo import api, fields, models, tools\n\n\nclass MailComposeMessage(models.TransientModel):\n    \"\"\"Add concept of mass mailing campaign to the mail.compose.message wizard\n    \"\"\"\n    _inherit = 'mail.compose.message'\n\n    mass_mailing_campaign_id = fields.Many2one('mail.mass_mailing.campaign', string='Mass Mailing Campaign')\n    mass_mailing_id = fields.Many2one('mail.mass_mailing', string='Mass Mailing', ondelete='cascade')\n    mass_mailing_name = fields.Char(string='Mass Mailing')\n    mailing_list_ids = fields.Many2many('mail.mass_mailing.list', string='Mailing List')\n\n    @api.multi\n    def get_mail_values(self, res_ids):\n        \"\"\" Override method that generated the mail content by creating the\n        mail.mail.statistics values in the o2m of mail_mail, when doing pure\n        email mass mailing. \"\"\"\n        self.ensure_one()\n        res = super(MailComposeMessage, self).get_mail_values(res_ids)\n        # use only for allowed models in mass mailing\n        if self.composition_mode == 'mass_mail' and \\\n                (self.mass_mailing_name or self.mass_mailing_id) and \\\n                self.env['ir.model'].sudo().search([('model', '=', self.model), ('is_mail_thread', '=', True)], limit=1):\n            mass_mailing = self.mass_mailing_id\n            if not mass_mailing:\n                reply_to_mode = 'email' if self.no_auto_thread else 'thread'\n                reply_to = self.reply_to if self.no_auto_thread else False\n                mass_mailing = self.env['mail.mass_mailing'].create({\n                        'mass_mailing_campaign_id': self.mass_mailing_campaign_id.id,\n                        'name': self.mass_mailing_name,\n                        'template_id': self.template_id.id,\n                        'state': 'done',\n                        'reply_to_mode': reply_to_mode,\n                        'reply_to': reply_to,\n                        'sent_date': fields.Datetime.now(),\n                        'body_html': self.body,\n                        'mailing_model_id': self.env['ir.model']._get(self.model).id,\n                        'mailing_domain': self.active_domain,\n                })\n\n            # Preprocess res.partners to batch-fetch from db\n            # if recipient_ids is present, it means they are partners\n            # (the only object to fill get_default_recipient this way)\n            recipient_partners_ids = []\n            read_partners = {}\n            for res_id in res_ids:\n                mail_values = res[res_id]\n                if mail_values.get('recipient_ids'):\n                    # recipient_ids is a list of x2m command tuples at this point\n                    recipient_partners_ids.append(mail_values.get('recipient_ids')[0][1])\n            read_partners = self.env['res.partner'].browse(recipient_partners_ids)\n\n            partners_email = {p.id: p.email for p in read_partners}\n\n            blacklist = self._context.get('mass_mailing_blacklist')\n            seen_list = self._context.get('mass_mailing_seen_list')\n            for res_id in res_ids:\n                mail_values = res[res_id]\n                if mail_values.get('email_to'):\n                    recips = tools.email_split(mail_values['email_to'])\n                else:\n                    recips = tools.email_split(partners_email.get(res_id))\n                mail_to = recips[0].lower() if recips else False\n                if (blacklist and mail_to in blacklist) or (seen_list and mail_to in seen_list):\n                    # prevent sending to blocked addresses that were included by mistake\n                    mail_values['state'] = 'cancel'\n                elif seen_list is not None:\n                    seen_list.add(mail_to)\n                stat_vals = {\n                    'model': self.model,\n                    'res_id': res_id,\n                    'mass_mailing_id': mass_mailing.id\n                }\n                # propagate exception state to stat when still-born\n                if mail_values.get('state') == 'cancel':\n                    stat_vals['exception'] = fields.Datetime.now()\n                mail_values.update({\n                    'mailing_id': mass_mailing.id,\n                    'statistics_ids': [(0, 0, stat_vals)],\n                    # email-mode: keep original message for routing\n                    'notification': mass_mailing.reply_to_mode == 'thread',\n                    'auto_delete': not mass_mailing.keep_archives,\n                })\n        return res\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "mail_compose_message.py", "id": "bc66fa9479cfb90bcdd72550a043b8fb", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mass_mailing/wizard/mail_compose_message.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}