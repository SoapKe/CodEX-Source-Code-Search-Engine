{"author": "rushter", "code": "try:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\n\nfrom mla.linear_models import LogisticRegression\nfrom mla.metrics import accuracy\nfrom mla.pca import PCA\n\n# logging.basicConfig(level=logging.DEBUG)\n\n\nX, y = make_classification(n_samples=1000, n_features=100, n_informative=75,\n                           random_state=1111, n_classes=2, class_sep=2.5, )\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                        random_state=1111)\n\nfor s in ['svd', 'eigen']:\n    p = PCA(15, solver=s)\n\n    \n    p.fit(X_train)\n    X_train_reduced = p.transform(X_train)\n    X_test_reduced = p.transform(X_test)\n    \n    model = LogisticRegression(lr=0.001, max_iters=2500)\n    model.fit(X_train_reduced, y_train)\n    predictions = model.predict(X_test_reduced)\n    print('Classification accuracy for %s PCA: %s'\n          % (s, accuracy(y_test, predictions)))\n", "comments": "  logging basicconfig(level logging debug)    generate random binary classification problem     fit pca training data  entire dataset ", "content": "try:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\n\nfrom mla.linear_models import LogisticRegression\nfrom mla.metrics import accuracy\nfrom mla.pca import PCA\n\n# logging.basicConfig(level=logging.DEBUG)\n\n# Generate a random binary classification problem.\nX, y = make_classification(n_samples=1000, n_features=100, n_informative=75,\n                           random_state=1111, n_classes=2, class_sep=2.5, )\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                        random_state=1111)\n\nfor s in ['svd', 'eigen']:\n    p = PCA(15, solver=s)\n\n    # fit PCA with training data, not entire dataset\n    p.fit(X_train)\n    X_train_reduced = p.transform(X_train)\n    X_test_reduced = p.transform(X_test)\n    \n    model = LogisticRegression(lr=0.001, max_iters=2500)\n    model.fit(X_train_reduced, y_train)\n    predictions = model.predict(X_test_reduced)\n    print('Classification accuracy for %s PCA: %s'\n          % (s, accuracy(y_test, predictions)))\n", "description": "Minimal and clean examples of machine learning algorithms", "file_name": "pca.py", "id": "7f9ac354d0bd74dc019f66ae0dd29e24", "language": "Python", "project_name": "MLAlgorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rushter-MLAlgorithms/rushter-MLAlgorithms-d398777/examples/pca.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:25:48Z", "url": "https://github.com/rushter/MLAlgorithms", "wiki": false}