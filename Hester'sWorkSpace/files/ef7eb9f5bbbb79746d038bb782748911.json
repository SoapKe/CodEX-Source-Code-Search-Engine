{"author": "aws", "code": "\n\n\n Liense uner the Apahe Liense, Version 2.0 (the \"Liense\"). You\n may not use this file exept in ompliane with the Liense. A opy of\n the Liense is loate at\n\n     http://aws.amazon.om/apahe2.0/\n\n or in the \"liense\" file aompanying this file. This file is\n istriute on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implie. See the Liense for the speifi\n language governing permissions an limitations uner the Liense.\n\"\"\"Test help output for the AWS CLI.\n\nThe purpose of these os is to test that the generate output looks how\nwe expet.\n\nIt's intene to e as en to en as possile, ut instea of looking\nat the man output, we look one step efore at the generate rst output\n(it's easier to verify).\n\n\"\"\"\nfrom awsli.testutils import BaseAWSHelpOutputTest\nfrom awsli.testutils import FileCreator\n\nfrom awsli.ompat import six\nfrom awsli.alias import AliasLoaer\nimport mok\n\n\nlass TestHelpOutput(BaseAWSHelpOutputTest):\n    ef test_output(self):\n        self.river.main(['help'])\n         Chek for the referene lael.\n        self.assert_ontains('.. _li:aws:')\n        self.assert_ontains('***\\naws\\n***')\n        self.assert_ontains(\n            'The AWS Comman Line Interfae is a unifie tool '\n            'to manage your AWS servies.')\n        self.assert_ontains('Use *aws help topis* to view')\n         Verify we see the os for top level params, so pik\n         a few representative types of params.\n        self.assert_ontains('``--enpoint-url``')\n         Boolean type\n        self.assert_ontains('``--no-paginate``')\n         Arg with hoies\n        self.assert_ontains('``--olor``')\n        self.assert_ontains('* on')\n        self.assert_ontains('* off')\n        self.assert_ontains('* auto')\n         Then we shoul see the servies.\n        self.assert_ontains('* e2')\n        self.assert_ontains('* s3api')\n        self.assert_ontains('* sts')\n         Make sure it its a relate item\n        self.assert_ontains('========\\nSee Also\\n========')\n        self.assert_ontains('aws help topis')\n\n    ef test_servie_help_output(self):\n        self.river.main(['e2', 'help'])\n         Chek for the referene lael.\n        self.assert_ontains('.. _li:aws e2:')\n         We shoul see the setion title for the servie.\n        self.assert_ontains('***\\ne2\\n***')\n         With a esription heaer.\n        self.assert_ontains('===========\\nDesription\\n===========')\n         An we shoul see the operations liste.\n        self.assert_ontains('* monitor-instanes')\n        self.assert_ontains('* run-instanes')\n        self.assert_ontains('* esrie-instanes')\n\n    ef test_operation_help_output(self):\n        self.river.main(['e2', 'run-instanes', 'help'])\n         Chek for the referene lael.\n        self.assert_ontains('.. _li:aws e2 run-instanes:')\n         Shoul see the title with the operation name\n        self.assert_ontains('*************\\nrun-instanes\\n*************')\n         Shoul ontain part of the help text from the moel.\n        self.assert_ontains('Launhes the speifie numer of instanes')\n        self.assert_ontains('``--ount`` (string)')\n\n    ef test_ustom_servie_help_output(self):\n        self.river.main(['s3', 'help'])\n        self.assert_ontains('.. _li:aws s3:')\n        self.assert_ontains('high-level S3 ommans')\n        self.assert_ontains('* p')\n\n    ef test_ustom_operation_help_output(self):\n        self.river.main(['s3', 'ls', 'help'])\n        self.assert_ontains('.. _li:aws s3 ls:')\n        self.assert_ontains('List S3 ojets')\n        self.assert_ontains('--summarize')\n\n    ef test_topi_list_help_output(self):\n        self.river.main(['help', 'topis'])\n         Shoul ontain the title\n        self.assert_ontains(\n            '*******************\\nAWS CLI Topi Guie\\n*******************'\n        )\n         Shoul ontain the esription\n        self.assert_ontains('This is the AWS CLI Topi Guie.')\n         Shoul ontain the availale topis setion\n        self.assert_ontains('Availale Topis')\n         Assert the general orer of topi ategories.\n        self.assert_text_orer(\n            '-------\\nGeneral\\n-------',\n            '--\\nS3\\n--',\n            starting_from='Availale Topis'\n        )\n         Make sure that the topi elements elements show up as well.\n        self.assert_ontains(\n            '* return-oes: Desries'\n        )\n         Make sure the topi elements are unerneath the ategories as well\n         an they get ae to eah ategory they fall eneath\n        self.assert_text_orer(\n            '-------\\nGeneral\\n-------',\n            '* return-oes: Desries',\n            '--\\nS3\\n--',\n            starting_from='-------\\nGeneral\\n-------'\n        )\n\n    ef test_topi_help_omman(self):\n        self.river.main(['help', 'return-oes'])\n        self.assert_ontains(\n            '********************\\nAWS CLI Return Coes\\n********************'\n        )\n        self.assert_ontains('These are the following return oes')\n\n    ef test_arguments_with_example_json_syntax(self):\n        self.river.main(['e2', 'run-instanes', 'help'])\n        self.assert_ontains('``--iam-instane-profile``')\n        self.assert_ontains('JSON Syntax')\n        self.assert_ontains('\"Arn\": \"string\"')\n        self.assert_ontains('\"Name\": \"string\"')\n\n    ef test_arguments_with_example_shorthan_syntax(self):\n        self.river.main(['e2', 'run-instanes', 'help'])\n        self.assert_ontains('``--iam-instane-profile``')\n        self.assert_ontains('Shorthan Syntax')\n        self.assert_ontains('Arn=string,Name=string')\n\n    ef test_require_args_ome_efore_optional_args(self):\n        self.river.main(['e2', 'run-instanes', 'help'])\n         We're asserting that the args in the synopsis setion appear\n         in this orer.  They on't have to e in this exat orer, ut\n         eah item in the list has to ome efore the previous arg.\n        self.assert_text_orer(\n            '--image-i <value>',\n            '[--key-name <value>]',\n            '[--seurity-groups <value>]', starting_from='Synopsis')\n\n    ef test_servie_operation_orer(self):\n        self.river.main(['e2', 'help'])\n        self.assert_text_orer(\n            'ativate-liense',\n            'alloate-aress',\n            'assign-private-ip-aresses', starting_from='Availale Commans')\n\n    ef test_top_level_args_orer(self):\n        self.river.main(['help'])\n        self.assert_text_orer(\n            'autosaling\\n', 'louformation\\n', 'el\\n', 'swf\\n',\n            starting_from='Availale Servies')\n\n    ef test_examples_in_operation_help(self):\n        self.river.main(['e2', 'run-instanes', 'help'])\n        self.assert_ontains('========\\nExamples\\n========')\n\n    ef test_a_help_for_ryrun(self):\n        self.river.main(['e2', 'run-instanes', 'help'])\n        self.assert_ontains('DryRunOperation')\n        self.assert_ontains('UnauthorizeOperation')\n\n    ef test_el_help_output(self):\n        self.river.main(['el', 'help'])\n         We shoul *not* have any invali links like\n         .. _`:\n        self.assert_not_ontains('.. _`:')\n\n    ef test_shorthan_flattens_list_of_single_memer_strutures(self):\n        self.river.main(['el', 'remove-tags', 'help'])\n        self.assert_ontains(\"--tags Key1 Key2 Key3\")\n\n    ef test_epreate_operations_not_oumente(self):\n        self.river.main(['s3api', 'help'])\n        self.assert_not_ontains('get-uket-lifeyle\\n')\n        self.assert_not_ontains('put-uket-lifeyle\\n')\n        self.assert_not_ontains('get-uket-notifiation\\n')\n        self.assert_not_ontains('put-uket-notifiation\\n')\n\n\nlass TestRemoveDepreateCommans(BaseAWSHelpOutputTest):\n    ef assert_omman_oes_not_exist(self, servie, omman):\n         Basially try to get the help output for the remove\n         omman verify that we get a SystemExit exeption\n         an that we get something in sterr that says that\n         we mae an invali hoie (eause the operation is remove).\n        sterr = six.StringIO()\n        with mok.path('sys.sterr', sterr):\n            with self.assertRaises(SystemExit):\n                self.river.main([servie, omman, 'help'])\n         We shoul see an error message omplaining aout\n         an invali hoie eause the operation has een remove.\n        self.assertIn('argument operation: Invali hoie', sterr.getvalue())\n\n    ef test_ses_epreate_ommans(self):\n        self.river.main(['ses', 'help'])\n        self.assert_not_ontains('list-verifie-email-aresses')\n        self.assert_not_ontains('elete-verifie-email-aress')\n        self.assert_not_ontains('verify-email-aress')\n\n        self.assert_omman_oes_not_exist(\n            'ses', 'list-verifie-email-aresses')\n        self.assert_omman_oes_not_exist(\n            'ses', 'elete-verifie-email-aress')\n        self.assert_omman_oes_not_exist(\n            'ses', 'verify-email-aress')\n\n    ef test_e2_import_export(self):\n        self.river.main(['e2', 'help'])\n        self.assert_not_ontains('import-instane')\n        self.assert_not_ontains('import-volume')\n        self.assert_omman_oes_not_exist(\n            'e2', 'import-instane')\n        self.assert_omman_oes_not_exist(\n            'e2', 'import-volume')\n\n    ef test_oolean_param_oumente(self):\n        self.river.main(['autosaling',\n                          'terminate-instane-in-auto-saling-group', 'help'])\n        self.assert_ontains(\n            ('``--shoul-erement-esire-apaity`` | '\n             '``--no-shoul-erement-esire-apaity`` (oolean)'))\n\n    ef test_streaming_output_arg(self):\n        self.river.main(['s3api', 'get-ojet', 'help'])\n        self.assert_not_ontains('``--outfile``')\n        self.assert_ontains('``outfile`` (string)')\n\n    ef test_rs_a_arg_help_has_orret_omman_name(self):\n        self.river.main(['rs', 'a-option-to-option-group', 'help'])\n        self.assert_ontains('a-option-to-option-group')\n\n    ef test_rs_remove_arg_help_has_orret_omman_name(self):\n        self.river.main(['rs', 'remove-option-from-option-group', 'help'])\n        self.assert_ontains('remove-option-from-option-group')\n\n    ef test_moify_operation_not_in_help(self):\n        self.river.main(['rs', 'help'])\n         This was split into a/remove ommans.  The moify\n         omman shoul not e availale.\n        self.assert_not_ontains('moify-option-group')\n\n\nlass TestPagingParamDos(BaseAWSHelpOutputTest):\n    ef test_starting_token_injete(self):\n        self.river.main(['s3api', 'list-ojets', 'help'])\n        self.assert_ontains('``--starting-token``')\n\n    ef test_max_items_injete(self):\n        self.river.main(['s3api', 'list-ojets', 'help'])\n        self.assert_ontains('``--max-items``')\n\n    ef test_uiltin_paging_params_remove(self):\n        self.river.main(['s3api', 'list-ojets', 'help'])\n        self.assert_not_ontains('``--next-token``')\n        self.assert_not_ontains('``--max-keys``')\n\n    ef test_paging_oumentation_ae(self):\n        self.river.main(['s3api', 'list-ojets', 'help'])\n        self.assert_ontains('``list-ojets`` is a paginate operation')\n        self.assert_ontains('When using ``--output text`` an the')\n        self.assert_ontains('following query expressions: ')\n\n\nlass TestMergeBooleanGroupArgs(BaseAWSHelpOutputTest):\n    ef test_merge_ool_args(self):\n         Boolean args nee to e group together so rather than\n         --foo foo os\n         again\n        \n         We instea have:\n         --foo |\n        self.river.main(['e2', 'run-instanes', 'help'])\n        self.assert_ontains('``--ry-run`` | ``--no-ry-run``')\n\n    ef test_top_level_ools(self):\n         struture(salar) of a single value of Value whose value is\n         a oolean is pulle into a top level arg.\n        self.river.main(['e2', 'moify-instane-attriute', 'help'])\n        self.assert_ontains('``--es-optimize`` | ``--no-es-optimize``')\n\n    ef test_top_level_ool_has_no_example(self):\n         Normally a struture(ool) param woul have an example\n         of {\"Value\": true|\n         a top level ool, we shoul not generate an example.\n        self.river.main(['e2', 'moify-instane-attriute', 'help'])\n        self.assert_not_ontains('\"Value\": true|false')\n\n\nlass TestStrutureSalarHasNoExamples(BaseAWSHelpOutputTest):\n    ef test_no_examples_for_struture_single_salar(self):\n        self.river.main(['e2', 'moify-instane-attriute', 'help'])\n        self.assert_not_ontains('\"Value\": \"string\"')\n        self.assert_not_ontains('Value=string')\n\n    ef test_example_for_single_struture_not_name_value(self):\n         Verify that if a struture oes math our speial ase\n         (single element name \"Value\"), then we still oument\n         the example syntax.\n        self.river.main(['s3api', 'reate-uket', 'help'])\n        self.assert_ontains('LoationConstraint=string')\n         Also shoul see the JSON syntax in the help output.\n        self.assert_ontains('\"LoationConstraint\": ')\n\n\nlass TestJSONListSalarDos(BaseAWSHelpOutputTest):\n    ef test_spae_separate_list_os(self):\n         A list of salar type an e speifie as JSON:\n              JSON Syntax:\n        \n               [\"string\", ...]\n         But at the same time you an always replae that with\n         a spae separate list.  Therefore we want to oument\n         the spae separate list version an not the JSON list\n         version.\n        self.river.main(['e2', 'terminate-instanes', 'help'])\n        self.assert_not_ontains('[\"string\", ...]')\n        self.assert_ontains('\"string\" \"string\"')\n\n\nlass TestParamRename(BaseAWSHelpOutputTest):\n    ef test_reate_image_renames(self):\n         We're just herry piking this partiular operation to verify\n         that the rename arg ustomizations are working.\n        self.river.main(['e2', 'reate-image', 'help'])\n        self.assert_not_ontains('no-no-reoot')\n        self.assert_ontains('--reoot')\n\nlass TestCustomCommanDosFromFile(BaseAWSHelpOutputTest):\n    ef test_esription_from_rst_file(self):\n         The esription for the onfigure omman\n         is in _esription.rst.  We're verifying that we\n         an rea those ontents properly.\n        self.river.main(['onfigure', 'help'])\n         These are a few options that are oumente in the help output.\n        self.assert_ontains('metaata_servie_timeout')\n        self.assert_ontains('metaata_servie_num_attempts')\n        self.assert_ontains('aws_aess_key_i')\n\nlass TestEnumDosArentDupliate(BaseAWSHelpOutputTest):\n    ef test_enum_os_arent_upliate(self):\n         Test for: https://githu.om/aws/aws-li/issues/609\n         What's happening is if you have a list param that has\n         an enum, we oument it as:\n         a||||||\n         Exept we show all of the possile enum params twie.\n         Eah enum param shoul only our one.  The ieal oumentation\n         shoul e:\n        \n         string1 string2\n        \n         Where eah value is one of:\n             value1\n             value2\n        self.river.main(['louformation', 'list-staks', 'help'])\n         \"CREATE_IN_PROGRESS\" is a enum value, an shoul only\n         appear one in the help output.\n        ontents = self.renerer.renere_ontents\n        self.assertTrue(ontents.ount(\"CREATE_IN_PROGRESS\") == 1,\n                        (\"Enum param was only suppose to e appear one in \"\n                         \"renere o output, appeare: %s\" %\n                         ontents.ount(\"CREATE_IN_PROGRESS\")))\n\n\nlass TestParametersCanBeHien(BaseAWSHelpOutputTest):\n    ef mark_as_unoumente(self, argument_tale, **kwargs):\n        argument_tale['starting-sequene-numer']._UNDOCUMENTED = True\n\n    ef test_hien_params_are_not_oumente(self):\n         We're going to emonstrate hiing a parameter.\n         --evie\n        self.river.session.register('uiling-argument-tale',\n                                     self.mark_as_unoumente)\n        self.river.main(['kinesis', 'get-shar-iterator', 'help'])\n        self.assert_not_ontains('--starting-sequene-numer')\n\n\nlass TestCanDoumentAsRequire(BaseAWSHelpOutputTest):\n    ef test_an_o_as_require(self):\n         This param is alreay marke as require, ut to e\n         expliit this is repeate here to make it more lear.\n        ef o_as_require(argument_tale, **kwargs):\n            arg = argument_tale['volume-arns']\n        self.river.session.register('uiling-argument-tale',\n                                     o_as_require)\n        self.river.main(['storagegateway', 'esrie-ahe-issi-volumes',\n                          'help'])\n        self.assert_not_ontains('[--volume-arns <value>]')\n\n\nlass TestEC2AuthorizeSeurityGroupNotRenere(BaseAWSHelpOutputTest):\n    ef test_epreate_args_not_oumente(self):\n        self.river.main(['e2', 'authorize-seurity-group-ingress', 'help'])\n        self.assert_not_ontains('--ip-protool')\n        self.assert_not_ontains('--from-port')\n        self.assert_not_ontains('--to-port')\n        self.assert_not_ontains('--soure-seurity-group-name')\n        self.assert_not_ontains('--soure-seurity-group-owner-i')\n\n\nlass TestKMSCreateGrant(BaseAWSHelpOutputTest):\n    ef test_proper_asing(self):\n        self.river.main(['kms', 'reate-grant', 'help'])\n         Ensure that the proper asing is use for this omman's os.\n        self.assert_not_ontains('generate-ata-key')\n        self.assert_ontains('GenerateDataKey')\n\n\nlass TestRoute53CreateHosteZone(BaseAWSHelpOutputTest):\n    ef test_proper_asing(self):\n        self.river.main(['route53', 'reate-hoste-zone', 'help'])\n         Ensure that the proper asing is use for this omman's os.\n        self.assert_ontains(\n            'o **not** inlue ``PrivateZone`` in this input struture')\n\n\nlass TestIotData(BaseAWSHelpOutputTest):\n    ef test_servie_help_omman_has_note(self):\n        self.river.main(['iot-ata', 'help'])\n         Ensure the note is in help page.\n        self.assert_ontains(\n            'The efault enpoint ata.iot.[region].amazonaws.om is '\n            'intene for testing purposes only.')\n\n    ef test_operation_help_omman_has_note(self):\n        self.river.main(['iot-ata', 'get-thing-shaow', 'help'])\n         Ensure the note is in help page.\n        self.assert_ontains(\n            'The efault enpoint ata.iot.[region].amazonaws.om is '\n            'intene for testing purposes only.')\n\n\nlass TestAliases(BaseAWSHelpOutputTest):\n    ef setUp(self):\n        super(TestAliases, self).setUp()\n        self.files = FileCreator()\n        self.alias_file = self.files.reate_file('alias', '[toplevel]\\n')\n        self.river.alias_loaer = AliasLoaer(self.alias_file)\n\n    ef tearDown(self):\n        super(TestAliases, self).tearDown()\n        self.files.remove_all()\n\n    ef a_alias(self, alias_name, alias_value):\n        with open(self.alias_file, 'a+') as f:\n            f.write('%s = %s\\n' % (alias_name, alias_value))\n\n    ef test_alias_not_in_main_help(self):\n        self.a_alias('my-alias', 'e2 esrie-regions')\n        self.river.main(['help'])\n        self.assert_not_ontains('my-alias')\n", "comments": "   test help output aws cli   the purpose docs test generated output looks expect   it intended end end possible  instead looking man output  look one step generated rst output (it easier verify)           usr bin env python    copyright 2013 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     check reference label     verify see docs top level params  pick    representative types params     boolean type    arg choices    then see services     make sure related item    check reference label     we see section title service     with description header     and see operations listed     check reference label     should see title operation name    should contain part help text model     should contain title    should contain description    should contain available topics section    assert general order topic categories     make sure topic elements elements show well     make sure topic elements underneath categories well    get added category fall beneath    we asserting args synopsis section appear    order   they exact order     item list come previous arg     we   invalid links like              basically try get help output removed    command verify get systemexit exception    get something stderr says    made invalid choice (because operation removed)     we see error message complaining    invalid choice operation removed     this split add remove commands   the modify    command available     boolean args need group together rather      foo foo docs      foo foo docs       we instead       foo     foo foo docs    structure(scalar) single value value whose value    boolean pulled top level arg     normally structure(bool) param would example      value   true false    pull arg    top level bool  generate example     verify structure match special case    (single element named  value )  still document    example syntax     also see json syntax help output     a list scalar type specified json          json syntax                string           but time always replace    space separated list   therefore want document    space separated list version json list    version     we cherry picking particular operation verify    rename arg customizations working     the description configure command     description rst   we verifying    read contents properly     these options documented help output     test  https   github com aws aws cli issues 609    what happening list param    enum  document     b c   b c    except show possible enum params twice     each enum param occur   the ideal documentation           string1 string2       where value one         value1        value2     create in progress  enum value     appear help output     we going demonstrate hiding parameter       device    this param already marked required     explicit repeated make clear     ensure proper casing used command docs     ensure proper casing used command docs     ensure note help page     ensure note help page  ", "content": "#!/usr/bin/env python\n# Copyright 2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n\"\"\"Test help output for the AWS CLI.\n\nThe purpose of these docs is to test that the generated output looks how\nwe expect.\n\nIt's intended to be as end to end as possible, but instead of looking\nat the man output, we look one step before at the generated rst output\n(it's easier to verify).\n\n\"\"\"\nfrom awscli.testutils import BaseAWSHelpOutputTest\nfrom awscli.testutils import FileCreator\n\nfrom awscli.compat import six\nfrom awscli.alias import AliasLoader\nimport mock\n\n\nclass TestHelpOutput(BaseAWSHelpOutputTest):\n    def test_output(self):\n        self.driver.main(['help'])\n        # Check for the reference label.\n        self.assert_contains('.. _cli:aws:')\n        self.assert_contains('***\\naws\\n***')\n        self.assert_contains(\n            'The AWS Command Line Interface is a unified tool '\n            'to manage your AWS services.')\n        self.assert_contains('Use *aws help topics* to view')\n        # Verify we see the docs for top level params, so pick\n        # a few representative types of params.\n        self.assert_contains('``--endpoint-url``')\n        # Boolean type\n        self.assert_contains('``--no-paginate``')\n        # Arg with choices\n        self.assert_contains('``--color``')\n        self.assert_contains('* on')\n        self.assert_contains('* off')\n        self.assert_contains('* auto')\n        # Then we should see the services.\n        self.assert_contains('* ec2')\n        self.assert_contains('* s3api')\n        self.assert_contains('* sts')\n        # Make sure it its a related item\n        self.assert_contains('========\\nSee Also\\n========')\n        self.assert_contains('aws help topics')\n\n    def test_service_help_output(self):\n        self.driver.main(['ec2', 'help'])\n        # Check for the reference label.\n        self.assert_contains('.. _cli:aws ec2:')\n        # We should see the section title for the service.\n        self.assert_contains('***\\nec2\\n***')\n        # With a description header.\n        self.assert_contains('===========\\nDescription\\n===========')\n        # And we should see the operations listed.\n        self.assert_contains('* monitor-instances')\n        self.assert_contains('* run-instances')\n        self.assert_contains('* describe-instances')\n\n    def test_operation_help_output(self):\n        self.driver.main(['ec2', 'run-instances', 'help'])\n        # Check for the reference label.\n        self.assert_contains('.. _cli:aws ec2 run-instances:')\n        # Should see the title with the operation name\n        self.assert_contains('*************\\nrun-instances\\n*************')\n        # Should contain part of the help text from the model.\n        self.assert_contains('Launches the specified number of instances')\n        self.assert_contains('``--count`` (string)')\n\n    def test_custom_service_help_output(self):\n        self.driver.main(['s3', 'help'])\n        self.assert_contains('.. _cli:aws s3:')\n        self.assert_contains('high-level S3 commands')\n        self.assert_contains('* cp')\n\n    def test_custom_operation_help_output(self):\n        self.driver.main(['s3', 'ls', 'help'])\n        self.assert_contains('.. _cli:aws s3 ls:')\n        self.assert_contains('List S3 objects')\n        self.assert_contains('--summarize')\n\n    def test_topic_list_help_output(self):\n        self.driver.main(['help', 'topics'])\n        # Should contain the title\n        self.assert_contains(\n            '*******************\\nAWS CLI Topic Guide\\n*******************'\n        )\n        # Should contain the description\n        self.assert_contains('This is the AWS CLI Topic Guide.')\n        # Should contain the available topics section\n        self.assert_contains('Available Topics')\n        # Assert the general order of topic categories.\n        self.assert_text_order(\n            '-------\\nGeneral\\n-------',\n            '--\\nS3\\n--',\n            starting_from='Available Topics'\n        )\n        # Make sure that the topic elements elements show up as well.\n        self.assert_contains(\n            '* return-codes: Describes'\n        )\n        # Make sure the topic elements are underneath the categories as well\n        # and they get added to each category they fall beneath\n        self.assert_text_order(\n            '-------\\nGeneral\\n-------',\n            '* return-codes: Describes',\n            '--\\nS3\\n--',\n            starting_from='-------\\nGeneral\\n-------'\n        )\n\n    def test_topic_help_command(self):\n        self.driver.main(['help', 'return-codes'])\n        self.assert_contains(\n            '********************\\nAWS CLI Return Codes\\n********************'\n        )\n        self.assert_contains('These are the following return codes')\n\n    def test_arguments_with_example_json_syntax(self):\n        self.driver.main(['ec2', 'run-instances', 'help'])\n        self.assert_contains('``--iam-instance-profile``')\n        self.assert_contains('JSON Syntax')\n        self.assert_contains('\"Arn\": \"string\"')\n        self.assert_contains('\"Name\": \"string\"')\n\n    def test_arguments_with_example_shorthand_syntax(self):\n        self.driver.main(['ec2', 'run-instances', 'help'])\n        self.assert_contains('``--iam-instance-profile``')\n        self.assert_contains('Shorthand Syntax')\n        self.assert_contains('Arn=string,Name=string')\n\n    def test_required_args_come_before_optional_args(self):\n        self.driver.main(['ec2', 'run-instances', 'help'])\n        # We're asserting that the args in the synopsis section appear\n        # in this order.  They don't have to be in this exact order, but\n        # each item in the list has to come before the previous arg.\n        self.assert_text_order(\n            '--image-id <value>',\n            '[--key-name <value>]',\n            '[--security-groups <value>]', starting_from='Synopsis')\n\n    def test_service_operation_order(self):\n        self.driver.main(['ec2', 'help'])\n        self.assert_text_order(\n            'activate-license',\n            'allocate-address',\n            'assign-private-ip-addresses', starting_from='Available Commands')\n\n    def test_top_level_args_order(self):\n        self.driver.main(['help'])\n        self.assert_text_order(\n            'autoscaling\\n', 'cloudformation\\n', 'elb\\n', 'swf\\n',\n            starting_from='Available Services')\n\n    def test_examples_in_operation_help(self):\n        self.driver.main(['ec2', 'run-instances', 'help'])\n        self.assert_contains('========\\nExamples\\n========')\n\n    def test_add_help_for_dryrun(self):\n        self.driver.main(['ec2', 'run-instances', 'help'])\n        self.assert_contains('DryRunOperation')\n        self.assert_contains('UnauthorizedOperation')\n\n    def test_elb_help_output(self):\n        self.driver.main(['elb', 'help'])\n        # We should *not* have any invalid links like\n        # .. _`:\n        self.assert_not_contains('.. _`:')\n\n    def test_shorthand_flattens_list_of_single_member_structures(self):\n        self.driver.main(['elb', 'remove-tags', 'help'])\n        self.assert_contains(\"--tags Key1 Key2 Key3\")\n\n    def test_deprecated_operations_not_documented(self):\n        self.driver.main(['s3api', 'help'])\n        self.assert_not_contains('get-bucket-lifecycle\\n')\n        self.assert_not_contains('put-bucket-lifecycle\\n')\n        self.assert_not_contains('get-bucket-notification\\n')\n        self.assert_not_contains('put-bucket-notification\\n')\n\n\nclass TestRemoveDeprecatedCommands(BaseAWSHelpOutputTest):\n    def assert_command_does_not_exist(self, service, command):\n        # Basically try to get the help output for the removed\n        # command verify that we get a SystemExit exception\n        # and that we get something in stderr that says that\n        # we made an invalid choice (because the operation is removed).\n        stderr = six.StringIO()\n        with mock.patch('sys.stderr', stderr):\n            with self.assertRaises(SystemExit):\n                self.driver.main([service, command, 'help'])\n        # We should see an error message complaining about\n        # an invalid choice because the operation has been removed.\n        self.assertIn('argument operation: Invalid choice', stderr.getvalue())\n\n    def test_ses_deprecated_commands(self):\n        self.driver.main(['ses', 'help'])\n        self.assert_not_contains('list-verified-email-addresses')\n        self.assert_not_contains('delete-verified-email-address')\n        self.assert_not_contains('verify-email-address')\n\n        self.assert_command_does_not_exist(\n            'ses', 'list-verified-email-addresses')\n        self.assert_command_does_not_exist(\n            'ses', 'delete-verified-email-address')\n        self.assert_command_does_not_exist(\n            'ses', 'verify-email-address')\n\n    def test_ec2_import_export(self):\n        self.driver.main(['ec2', 'help'])\n        self.assert_not_contains('import-instance')\n        self.assert_not_contains('import-volume')\n        self.assert_command_does_not_exist(\n            'ec2', 'import-instance')\n        self.assert_command_does_not_exist(\n            'ec2', 'import-volume')\n\n    def test_boolean_param_documented(self):\n        self.driver.main(['autoscaling',\n                          'terminate-instance-in-auto-scaling-group', 'help'])\n        self.assert_contains(\n            ('``--should-decrement-desired-capacity`` | '\n             '``--no-should-decrement-desired-capacity`` (boolean)'))\n\n    def test_streaming_output_arg(self):\n        self.driver.main(['s3api', 'get-object', 'help'])\n        self.assert_not_contains('``--outfile``')\n        self.assert_contains('``outfile`` (string)')\n\n    def test_rds_add_arg_help_has_correct_command_name(self):\n        self.driver.main(['rds', 'add-option-to-option-group', 'help'])\n        self.assert_contains('add-option-to-option-group')\n\n    def test_rds_remove_arg_help_has_correct_command_name(self):\n        self.driver.main(['rds', 'remove-option-from-option-group', 'help'])\n        self.assert_contains('remove-option-from-option-group')\n\n    def test_modify_operation_not_in_help(self):\n        self.driver.main(['rds', 'help'])\n        # This was split into add/remove commands.  The modify\n        # command should not be available.\n        self.assert_not_contains('modify-option-group')\n\n\nclass TestPagingParamDocs(BaseAWSHelpOutputTest):\n    def test_starting_token_injected(self):\n        self.driver.main(['s3api', 'list-objects', 'help'])\n        self.assert_contains('``--starting-token``')\n\n    def test_max_items_injected(self):\n        self.driver.main(['s3api', 'list-objects', 'help'])\n        self.assert_contains('``--max-items``')\n\n    def test_builtin_paging_params_removed(self):\n        self.driver.main(['s3api', 'list-objects', 'help'])\n        self.assert_not_contains('``--next-token``')\n        self.assert_not_contains('``--max-keys``')\n\n    def test_paging_documentation_added(self):\n        self.driver.main(['s3api', 'list-objects', 'help'])\n        self.assert_contains('``list-objects`` is a paginated operation')\n        self.assert_contains('When using ``--output text`` and the')\n        self.assert_contains('following query expressions: ')\n\n\nclass TestMergeBooleanGroupArgs(BaseAWSHelpOutputTest):\n    def test_merge_bool_args(self):\n        # Boolean args need to be group together so rather than\n        # --foo foo docs\n        # --no-foo foo docs again\n        #\n        # We instead have:\n        # --foo | --no-foo foo docs\n        self.driver.main(['ec2', 'run-instances', 'help'])\n        self.assert_contains('``--dry-run`` | ``--no-dry-run``')\n\n    def test_top_level_bools(self):\n        # structure(scalar) of a single value of Value whose value is\n        # a boolean is pulled into a top level arg.\n        self.driver.main(['ec2', 'modify-instance-attribute', 'help'])\n        self.assert_contains('``--ebs-optimized`` | ``--no-ebs-optimized``')\n\n    def test_top_level_bool_has_no_example(self):\n        # Normally a structure(bool) param would have an example\n        # of {\"Value\": true|false}\", but when we pull the arg up into\n        # a top level bool, we should not generate an example.\n        self.driver.main(['ec2', 'modify-instance-attribute', 'help'])\n        self.assert_not_contains('\"Value\": true|false')\n\n\nclass TestStructureScalarHasNoExamples(BaseAWSHelpOutputTest):\n    def test_no_examples_for_structure_single_scalar(self):\n        self.driver.main(['ec2', 'modify-instance-attribute', 'help'])\n        self.assert_not_contains('\"Value\": \"string\"')\n        self.assert_not_contains('Value=string')\n\n    def test_example_for_single_structure_not_named_value(self):\n        # Verify that if a structure does match our special case\n        # (single element named \"Value\"), then we still document\n        # the example syntax.\n        self.driver.main(['s3api', 'create-bucket', 'help'])\n        self.assert_contains('LocationConstraint=string')\n        # Also should see the JSON syntax in the help output.\n        self.assert_contains('\"LocationConstraint\": ')\n\n\nclass TestJSONListScalarDocs(BaseAWSHelpOutputTest):\n    def test_space_separated_list_docs(self):\n        # A list of scalar type can be specified as JSON:\n        #      JSON Syntax:\n        #\n        #       [\"string\", ...]\n        # But at the same time you can always replace that with\n        # a space separated list.  Therefore we want to document\n        # the space separated list version and not the JSON list\n        # version.\n        self.driver.main(['ec2', 'terminate-instances', 'help'])\n        self.assert_not_contains('[\"string\", ...]')\n        self.assert_contains('\"string\" \"string\"')\n\n\nclass TestParamRename(BaseAWSHelpOutputTest):\n    def test_create_image_renames(self):\n        # We're just cherry picking this particular operation to verify\n        # that the rename arg customizations are working.\n        self.driver.main(['ec2', 'create-image', 'help'])\n        self.assert_not_contains('no-no-reboot')\n        self.assert_contains('--reboot')\n\nclass TestCustomCommandDocsFromFile(BaseAWSHelpOutputTest):\n    def test_description_from_rst_file(self):\n        # The description for the configure command\n        # is in _description.rst.  We're verifying that we\n        # can read those contents properly.\n        self.driver.main(['configure', 'help'])\n        # These are a few options that are documented in the help output.\n        self.assert_contains('metadata_service_timeout')\n        self.assert_contains('metadata_service_num_attempts')\n        self.assert_contains('aws_access_key_id')\n\nclass TestEnumDocsArentDuplicated(BaseAWSHelpOutputTest):\n    def test_enum_docs_arent_duplicated(self):\n        # Test for: https://github.com/aws/aws-cli/issues/609\n        # What's happening is if you have a list param that has\n        # an enum, we document it as:\n        # a|b|c|d   a|b|c|d\n        # Except we show all of the possible enum params twice.\n        # Each enum param should only occur once.  The ideal documentation\n        # should be:\n        #\n        # string1 string2\n        #\n        # Where each value is one of:\n        #     value1\n        #     value2\n        self.driver.main(['cloudformation', 'list-stacks', 'help'])\n        # \"CREATE_IN_PROGRESS\" is a enum value, and should only\n        # appear once in the help output.\n        contents = self.renderer.rendered_contents\n        self.assertTrue(contents.count(\"CREATE_IN_PROGRESS\") == 1,\n                        (\"Enum param was only suppose to be appear once in \"\n                         \"rendered doc output, appeared: %s\" %\n                         contents.count(\"CREATE_IN_PROGRESS\")))\n\n\nclass TestParametersCanBeHidden(BaseAWSHelpOutputTest):\n    def mark_as_undocumented(self, argument_table, **kwargs):\n        argument_table['starting-sequence-number']._UNDOCUMENTED = True\n\n    def test_hidden_params_are_not_documented(self):\n        # We're going to demonstrate hiding a parameter.\n        # --device\n        self.driver.session.register('building-argument-table',\n                                     self.mark_as_undocumented)\n        self.driver.main(['kinesis', 'get-shard-iterator', 'help'])\n        self.assert_not_contains('--starting-sequence-number')\n\n\nclass TestCanDocumentAsRequired(BaseAWSHelpOutputTest):\n    def test_can_doc_as_required(self):\n        # This param is already marked as required, but to be\n        # explicit this is repeated here to make it more clear.\n        def doc_as_required(argument_table, **kwargs):\n            arg = argument_table['volume-arns']\n        self.driver.session.register('building-argument-table',\n                                     doc_as_required)\n        self.driver.main(['storagegateway', 'describe-cached-iscsi-volumes',\n                          'help'])\n        self.assert_not_contains('[--volume-arns <value>]')\n\n\nclass TestEC2AuthorizeSecurityGroupNotRendered(BaseAWSHelpOutputTest):\n    def test_deprecated_args_not_documented(self):\n        self.driver.main(['ec2', 'authorize-security-group-ingress', 'help'])\n        self.assert_not_contains('--ip-protocol')\n        self.assert_not_contains('--from-port')\n        self.assert_not_contains('--to-port')\n        self.assert_not_contains('--source-security-group-name')\n        self.assert_not_contains('--source-security-group-owner-id')\n\n\nclass TestKMSCreateGrant(BaseAWSHelpOutputTest):\n    def test_proper_casing(self):\n        self.driver.main(['kms', 'create-grant', 'help'])\n        # Ensure that the proper casing is used for this command's docs.\n        self.assert_not_contains('generate-data-key')\n        self.assert_contains('GenerateDataKey')\n\n\nclass TestRoute53CreateHostedZone(BaseAWSHelpOutputTest):\n    def test_proper_casing(self):\n        self.driver.main(['route53', 'create-hosted-zone', 'help'])\n        # Ensure that the proper casing is used for this command's docs.\n        self.assert_contains(\n            'do **not** include ``PrivateZone`` in this input structure')\n\n\nclass TestIotData(BaseAWSHelpOutputTest):\n    def test_service_help_command_has_note(self):\n        self.driver.main(['iot-data', 'help'])\n        # Ensure the note is in help page.\n        self.assert_contains(\n            'The default endpoint data.iot.[region].amazonaws.com is '\n            'intended for testing purposes only.')\n\n    def test_operation_help_command_has_note(self):\n        self.driver.main(['iot-data', 'get-thing-shadow', 'help'])\n        # Ensure the note is in help page.\n        self.assert_contains(\n            'The default endpoint data.iot.[region].amazonaws.com is '\n            'intended for testing purposes only.')\n\n\nclass TestAliases(BaseAWSHelpOutputTest):\n    def setUp(self):\n        super(TestAliases, self).setUp()\n        self.files = FileCreator()\n        self.alias_file = self.files.create_file('alias', '[toplevel]\\n')\n        self.driver.alias_loader = AliasLoader(self.alias_file)\n\n    def tearDown(self):\n        super(TestAliases, self).tearDown()\n        self.files.remove_all()\n\n    def add_alias(self, alias_name, alias_value):\n        with open(self.alias_file, 'a+') as f:\n            f.write('%s = %s\\n' % (alias_name, alias_value))\n\n    def test_alias_not_in_main_help(self):\n        self.add_alias('my-alias', 'ec2 describe-regions')\n        self.driver.main(['help'])\n        self.assert_not_contains('my-alias')\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_help_output.py", "id": "ef7eb9f5bbbb79746d038bb782748911", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/docs/test_help_output.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}