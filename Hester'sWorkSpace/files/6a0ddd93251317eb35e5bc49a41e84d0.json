{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Ted Elhourani <ted@bigswitch.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: bcf_switch\nauthor: \"Ted (@tedelhourani)\"\nshort_description: Create and remove a bcf switch.\ndescription:\n    - Create and remove a Big Cloud Fabric switch.\nversion_added: \"2.4\"\noptions:\n  name:\n    description:\n     - The name of the switch.\n    required: true\n  fabric_role:\n    description:\n     - Fabric role of the switch.\n    choices: ['spine', 'leaf']\n    required: true\n  leaf_group:\n    description:\n     - The leaf group of the switch if the switch is a leaf.\n    required: false\n  mac:\n    description:\n     - The MAC address of the switch.\n    required: true\n  state:\n    description:\n     - Whether the switch should be present or absent.\n    default: present\n    choices: ['present', 'absent']\n  controller:\n    description:\n     - The controller IP address.\n    required: true\n  validate_certs:\n    description:\n      - If C(false), SSL certificates will not be validated. This should only be used\n        on personally controlled devices using self-signed certificates.\n    required: false\n    default: true\n    choices: [true, false]\n  access_token:\n    description:\n     - Big Cloud Fabric access token. If this isn't set then the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.\n'''\n\n\nEXAMPLES = '''\n- name: bcf leaf switch\n  bcf_switch:\n    name: Rack1Leaf1\n    fabric_role: leaf\n    leaf_group: R1\n    mac: 00:00:00:02:00:02\n    controller: '{{ inventory_hostname }}'\n    state: present\n    validate_certs: false\n'''\n\n\nRETURN = ''' \n\nimport os\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.bigswitch.bigswitch import Rest\nfrom ansible.module_utils._text import to_native\n\n\ndef switch(module, check_mode):\n    try:\n        access_token = module.params['access_token'] or os.environ['BIGSWITCH_ACCESS_TOKEN']\n    except KeyError as e:\n        module.fail_json(msg='Unable to load %s' % e.message, exception=traceback.format_exc())\n\n    name = module.params['name']\n    fabric_role = module.params['fabric_role']\n    leaf_group = module.params['leaf_group']\n    dpid = '00:00:' + module.params['mac']\n    state = module.params['state']\n    controller = module.params['controller']\n\n    rest = Rest(module,\n                {'content-type': 'application/json', 'Cookie': 'session_cookie=' + access_token},\n                'https://' + controller + ':8443/api/v1/data/controller/core')\n\n    response = rest.get('switch-config', data={})\n    if response.status_code != 200:\n        module.fail_json(msg=\"failed to obtain existing switch config: {}\".format(response.json['description']))\n\n    config_present = False\n    for switch in response.json:\n        if all((switch['name'] == name,\n                switch['fabric-role'] == fabric_role,\n                switch['dpid'] == dpid)):\n            config_present = switch.get('leaf-group', None) == leaf_group\n            if config_present:\n                break\n\n    if state in ('present') and config_present:\n        module.exit_json(changed=False)\n\n    if state in ('absent') and not config_present:\n        module.exit_json(changed=False)\n\n    if check_mode:\n        module.exit_json(changed=True)\n\n    if state in ('present'):\n        data = {'name': name, 'fabric-role': fabric_role, 'leaf-group': leaf_group, 'dpid': dpid}\n        response = rest.put('switch-config[name=\"%s\"]' % name, data)\n        if response.status_code == 204:\n            module.exit_json(changed=True)\n        else:\n            module.fail_json(msg=\"error configuring switch '{}': {}\".format(name, response.json['description']))\n\n    if state in ('absent'):\n        response = rest.delete('switch-config[name=\"%s\"]' % name, data={})\n        if response.status_code == 204:\n            module.exit_json(changed=True)\n        else:\n            module.fail_json(msg=\"error deleting switch '{}': {}\".format(name, response.json['description']))\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(type='str', required=True),\n            fabric_role=dict(choices=['spine', 'leaf'], required=True),\n            leaf_group=dict(type='str', required=False),\n            mac=dict(type='str', required=True),\n            controller=dict(type='str', required=True),\n            state=dict(choices=['present', 'absent'], default='present'),\n            validate_certs=dict(type='bool', default='True'),\n            access_token=dict(type='str', no_log=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    try:\n        switch(module, check_mode=module.check_mode)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  bcf switch author   ted ( tedelhourani)  short description  create remove bcf switch  description        create remove big cloud fabric switch  version added   2 4  options    name      description         the name switch      required  true   fabric role      description         fabric role switch      choices    spine    leaf       required  true   leaf group      description         the leaf group switch switch leaf      required  false   mac      description         the mac address switch      required  true   state      description         whether switch present absent      default  present     choices    present    absent     controller      description         the controller ip address      required  true   validate certs      description          if c(false)  ssl certificates validated  this used         personally controlled devices using self signed certificates      required  false     default  true     choices   true  false    access token      description         big cloud fabric access token  if set environment variable c(bigswitch access token) used        examples         name  bcf leaf switch   bcf switch      name  rack1leaf1     fabric role  leaf     leaf group  r1     mac  00 00 00 02 00 02     controller      inventory hostname         state  present     validate certs  false       return                 usr bin python        coding  utf 8        (c) 2017  ted elhourani  ted bigswitch com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)        ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Ted Elhourani <ted@bigswitch.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: bcf_switch\nauthor: \"Ted (@tedelhourani)\"\nshort_description: Create and remove a bcf switch.\ndescription:\n    - Create and remove a Big Cloud Fabric switch.\nversion_added: \"2.4\"\noptions:\n  name:\n    description:\n     - The name of the switch.\n    required: true\n  fabric_role:\n    description:\n     - Fabric role of the switch.\n    choices: ['spine', 'leaf']\n    required: true\n  leaf_group:\n    description:\n     - The leaf group of the switch if the switch is a leaf.\n    required: false\n  mac:\n    description:\n     - The MAC address of the switch.\n    required: true\n  state:\n    description:\n     - Whether the switch should be present or absent.\n    default: present\n    choices: ['present', 'absent']\n  controller:\n    description:\n     - The controller IP address.\n    required: true\n  validate_certs:\n    description:\n      - If C(false), SSL certificates will not be validated. This should only be used\n        on personally controlled devices using self-signed certificates.\n    required: false\n    default: true\n    choices: [true, false]\n  access_token:\n    description:\n     - Big Cloud Fabric access token. If this isn't set then the environment variable C(BIGSWITCH_ACCESS_TOKEN) is used.\n'''\n\n\nEXAMPLES = '''\n- name: bcf leaf switch\n  bcf_switch:\n    name: Rack1Leaf1\n    fabric_role: leaf\n    leaf_group: R1\n    mac: 00:00:00:02:00:02\n    controller: '{{ inventory_hostname }}'\n    state: present\n    validate_certs: false\n'''\n\n\nRETURN = ''' # '''\n\nimport os\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.bigswitch.bigswitch import Rest\nfrom ansible.module_utils._text import to_native\n\n\ndef switch(module, check_mode):\n    try:\n        access_token = module.params['access_token'] or os.environ['BIGSWITCH_ACCESS_TOKEN']\n    except KeyError as e:\n        module.fail_json(msg='Unable to load %s' % e.message, exception=traceback.format_exc())\n\n    name = module.params['name']\n    fabric_role = module.params['fabric_role']\n    leaf_group = module.params['leaf_group']\n    dpid = '00:00:' + module.params['mac']\n    state = module.params['state']\n    controller = module.params['controller']\n\n    rest = Rest(module,\n                {'content-type': 'application/json', 'Cookie': 'session_cookie=' + access_token},\n                'https://' + controller + ':8443/api/v1/data/controller/core')\n\n    response = rest.get('switch-config', data={})\n    if response.status_code != 200:\n        module.fail_json(msg=\"failed to obtain existing switch config: {}\".format(response.json['description']))\n\n    config_present = False\n    for switch in response.json:\n        if all((switch['name'] == name,\n                switch['fabric-role'] == fabric_role,\n                switch['dpid'] == dpid)):\n            config_present = switch.get('leaf-group', None) == leaf_group\n            if config_present:\n                break\n\n    if state in ('present') and config_present:\n        module.exit_json(changed=False)\n\n    if state in ('absent') and not config_present:\n        module.exit_json(changed=False)\n\n    if check_mode:\n        module.exit_json(changed=True)\n\n    if state in ('present'):\n        data = {'name': name, 'fabric-role': fabric_role, 'leaf-group': leaf_group, 'dpid': dpid}\n        response = rest.put('switch-config[name=\"%s\"]' % name, data)\n        if response.status_code == 204:\n            module.exit_json(changed=True)\n        else:\n            module.fail_json(msg=\"error configuring switch '{}': {}\".format(name, response.json['description']))\n\n    if state in ('absent'):\n        response = rest.delete('switch-config[name=\"%s\"]' % name, data={})\n        if response.status_code == 204:\n            module.exit_json(changed=True)\n        else:\n            module.fail_json(msg=\"error deleting switch '{}': {}\".format(name, response.json['description']))\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(type='str', required=True),\n            fabric_role=dict(choices=['spine', 'leaf'], required=True),\n            leaf_group=dict(type='str', required=False),\n            mac=dict(type='str', required=True),\n            controller=dict(type='str', required=True),\n            state=dict(choices=['present', 'absent'], default='present'),\n            validate_certs=dict(type='bool', default='True'),\n            access_token=dict(type='str', no_log=True)\n        ),\n        supports_check_mode=True,\n    )\n\n    try:\n        switch(module, check_mode=module.check_mode)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "bcf_switch.py", "id": "6a0ddd93251317eb35e5bc49a41e84d0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/bigswitch/bcf_switch.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}