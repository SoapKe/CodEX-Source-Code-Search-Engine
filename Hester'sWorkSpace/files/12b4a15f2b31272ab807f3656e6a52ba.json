{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\nimport os\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n    compat_urllib_parse_urlencode,\n    compat_urllib_parse_urlparse,\n    compat_str,\n)\nfrom ..utils import (\n    unified_strdate,\n    determine_ext,\n    int_or_none,\n    parse_iso8601,\n    parse_duration,\n)\n\n\nclass NHLBaseInfoExtractor(InfoExtractor):\n    @staticmethod\n    def _fix_json(json_string):\n        return json_string.replace('\\\\\\'', '\\'')\n\n    def _real_extract_video(self, video_id):\n        vid_parts = video_id.split(',')\n        if len(vid_parts) == 3:\n            video_id = '%s0%s%s-X-h' % (vid_parts[0][:4], vid_parts[1], vid_parts[2].rjust(4, '0'))\n        json_url = 'http://video.nhl.com/videocenter/servlets/playlist?ids=%s&format=json' % video_id\n        data = self._download_json(\n            json_url, video_id, transform_source=self._fix_json)\n        return self._extract_video(data[0])\n\n    def _extract_video(self, info):\n        video_id = info['id']\n        self.report_extraction(video_id)\n\n        initial_video_url = info['publishPoint']\n        if info['formats'] == '1':\n            parsed_url = compat_urllib_parse_urlparse(initial_video_url)\n            filename, ext = os.path.splitext(parsed_url.path)\n            path = '%s_sd%s' % (filename, ext)\n            data = compat_urllib_parse_urlencode({\n                'type': 'fvod',\n                'path': compat_urlparse.urlunparse(parsed_url[:2] + (path,) + parsed_url[3:])\n            })\n            path_url = 'http://video.nhl.com/videocenter/servlets/encryptvideopath?' + data\n            path_doc = self._download_xml(\n                path_url, video_id, 'Downloading final video url')\n            video_url = path_doc.find('path').text\n        else:\n            video_url = initial_video_url\n\n        join = compat_urlparse.urljoin\n        ret = {\n            'id': video_id,\n            'title': info['name'],\n            'url': video_url,\n            'description': info['description'],\n            'duration': int(info['duration']),\n            'thumbnail': join(join(video_url, '/u/'), info['bigImage']),\n            'upload_date': unified_strdate(info['releaseDate'].split('.')[0]),\n        }\n        if video_url.startswith('rtmp:'):\n            mobj = re.match(r'(?P<tc_url>rtmp://[^/]+/(?P<app>[a-z0-9/]+))/(?P<play_path>mp4:.*)', video_url)\n            ret.update({\n                'tc_url': mobj.group('tc_url'),\n                'play_path': mobj.group('play_path'),\n                'app': mobj.group('app'),\n                'no_resume': True,\n            })\n        return ret\n\n\nclass NHLVideocenterIE(NHLBaseInfoExtractor):\n    IE_NAME = 'nhl.com:videocenter'\n    _VALID_URL = r'https?://video(?P<team>\\.[^.]*)?\\.nhl\\.com/videocenter/(?:console|embed)?(?:\\?(?:.*?[?&])?)(?:id|hlg|playlist)=(?P<id>[-0-9a-zA-Z,]+)'\n\n    _TESTS = [{\n        'url': 'http://video.canucks.nhl.com/videocenter/console?catid=6?id=453614',\n        'md5': 'db704a4ea09e8d3988c85e36cc892d09',\n        'info_dict': {\n            'id': '453614',\n            'ext': 'mp4',\n            'title': 'Quick clip: Weise 4-3 goal vs Flames',\n            'description': 'Dale Weise scores his first of the season to put the Canucks up 4-3.',\n            'duration': 18,\n            'upload_date': '20131006',\n        },\n    }, {\n        'url': 'http://video.nhl.com/videocenter/console?id=2014020024-628-h',\n        'md5': 'd22e82bc592f52d37d24b03531ee9696',\n        'info_dict': {\n            'id': '2014020024-628-h',\n            'ext': 'mp4',\n            'title': 'Alex Galchenyuk Goal on Ray Emery (14:40/3rd)',\n            'description': 'Home broadcast - Montreal Canadiens at Philadelphia Flyers - October 11, 2014',\n            'duration': 0,\n            'upload_date': '20141011',\n        },\n    }, {\n        'url': 'http://video.mapleleafs.nhl.com/videocenter/console?id=58665&catid=802',\n        'md5': 'c78fc64ea01777e426cfc202b746c825',\n        'info_dict': {\n            'id': '58665',\n            'ext': 'flv',\n            'title': 'Classic Game In Six - April 22, 1979',\n            'description': 'It was the last playoff game for the Leafs in the decade, and the last time the Leafs and Habs played in the playoffs. Great game, not a great ending.',\n            'duration': 400,\n            'upload_date': '20100129'\n        },\n    }, {\n        'url': 'http://video.flames.nhl.com/videocenter/console?id=630616',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.nhl.com/videocenter/?id=736722',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.nhl.com/videocenter/console?hlg=20142015,2,299&lang=en',\n        'md5': '076fcb88c255154aacbf0a7accc3f340',\n        'info_dict': {\n            'id': '2014020299-X-h',\n            'ext': 'mp4',\n            'title': 'Penguins at Islanders / Game Highlights',\n            'description': 'Home broadcast - Pittsburgh Penguins at New York Islanders - November 22, 2014',\n            'duration': 268,\n            'upload_date': '20141122',\n        }\n    }, {\n        'url': 'http://video.oilers.nhl.com/videocenter/console?id=691469&catid=4',\n        'info_dict': {\n            'id': '691469',\n            'ext': 'mp4',\n            'title': 'RAW | Craig MacTavish Full Press Conference',\n            'description': 'Oilers GM Craig MacTavish addresses the media at Rexall Place on Friday.',\n            'upload_date': '20141205',\n        },\n        'params': {\n            'skip_download': True,  \n        }\n    }, {\n        'url': 'http://video.nhl.com/videocenter/embed?playlist=836127',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self._real_extract_video(video_id)\n\n\nclass NHLNewsIE(NHLBaseInfoExtractor):\n    IE_NAME = 'nhl.com:news'\n    IE_DESC = 'NHL news'\n    _VALID_URL = r'https?://(?:.+?\\.)?nhl\\.com/(?:ice|club)/news\\.html?(?:\\?(?:.*?[?&])?)id=(?P<id>[-0-9a-zA-Z]+)'\n\n    _TESTS = [{\n        'url': 'http://www.nhl.com/ice/news.htm?id=750727',\n        'md5': '4b3d1262e177687a3009937bd9ec0be8',\n        'info_dict': {\n            'id': '736722',\n            'ext': 'mp4',\n            'title': 'Cal Clutterbuck has been fined $2,000',\n            'description': 'md5:45fe547d30edab88b23e0dd0ab1ed9e6',\n            'duration': 37,\n            'upload_date': '20150128',\n        },\n    }, {\n        \n        'url': 'http://sabres.nhl.com/club/news.htm?id=780189',\n        'md5': '9f663d1c006c90ac9fb82777d4294e12',\n        'info_dict': {\n            'id': '836127',\n            'ext': 'mp4',\n            'title': 'Morning Skate: OTT vs. BUF (9/23/15)',\n            'description': \"Brian Duff chats with Tyler Ennis prior to Buffalo's first preseason home game.\",\n            'duration': 93,\n            'upload_date': '20150923',\n        },\n    }]\n\n    def _real_extract(self, url):\n        news_id = self._match_id(url)\n        webpage = self._download_webpage(url, news_id)\n        video_id = self._search_regex(\n            [r'pVid(\\d+)', r\"nlid\\s*:\\s*'(\\d+)'\",\n             r'<iframe[^>]+src=[\"\\']https?://video.*?\\.nhl\\.com/videocenter/embed\\?.*\\bplaylist=(\\d+)'],\n            webpage, 'video id')\n        return self._real_extract_video(video_id)\n\n\nclass NHLVideocenterCategoryIE(NHLBaseInfoExtractor):\n    IE_NAME = 'nhl.com:videocenter:category'\n    IE_DESC = 'NHL videocenter category'\n    _VALID_URL = r'https?://video\\.(?P<team>[^.]*)\\.nhl\\.com/videocenter/(console\\?[^(id=)]*catid=(?P<catid>[0-9]+)(?![&?]id=).*?)?$'\n    _TEST = {\n        'url': 'http://video.canucks.nhl.com/videocenter/console?catid=999',\n        'info_dict': {\n            'id': '999',\n            'title': 'Highlights',\n        },\n        'playlist_count': 12,\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        team = mobj.group('team')\n        webpage = self._download_webpage(url, team)\n        cat_id = self._search_regex(\n            [r'var defaultCatId = \"(.+?)\";',\n             r'{statusIndex:0,index:0,.*?id:(.*?),'],\n            webpage, 'category id')\n        playlist_title = self._html_search_regex(\n            r'tab0\"[^>]*?>(.*?)</td>',\n            webpage, 'playlist title', flags=re.DOTALL).lower().capitalize()\n\n        data = compat_urllib_parse_urlencode({\n            'cid': cat_id,\n            \n            'count': 12,\n            'ptrs': 3,\n            'format': 'json',\n        })\n        path = '/videocenter/servlets/browse?' + data\n        request_url = compat_urlparse.urljoin(url, path)\n        response = self._download_webpage(request_url, playlist_title)\n        response = self._fix_json(response)\n        if not response.strip():\n            self._downloader.report_warning('Got an empty response, trying '\n                                            'adding the \"newvideos\" parameter')\n            response = self._download_webpage(request_url + '&newvideos=true',\n                                              playlist_title)\n            response = self._fix_json(response)\n        videos = json.loads(response)\n\n        return {\n            '_type': 'playlist',\n            'title': playlist_title,\n            'id': cat_id,\n            'entries': [self._extract_video(v) for v in videos],\n        }\n\n\nclass NHLIE(InfoExtractor):\n    IE_NAME = 'nhl.com'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>nhl|wch2016)\\.com/(?:[^/]+/)*c-(?P<id>\\d+)'\n    _SITES_MAP = {\n        'nhl': 'nhl',\n        'wch2016': 'wch',\n    }\n    _TESTS = [{\n        \n        'url': 'https://www.nhl.com/video/anisimov-cleans-up-mess/t-277752844/c-43663503',\n        'md5': '0f7b9a8f986fb4b4eeeece9a56416eaf',\n        'info_dict': {\n            'id': '43663503',\n            'ext': 'mp4',\n            'title': 'Anisimov cleans up mess',\n            'description': 'md5:a02354acdfe900e940ce40706939ca63',\n            'timestamp': 1461288600,\n            'upload_date': '20160422',\n        },\n    }, {\n        \n        'url': 'https://www.nhl.com/news/dennis-wideman-suspended/c-278258934',\n        'md5': '1f39f4ea74c1394dea110699a25b366c',\n        'info_dict': {\n            'id': '40784403',\n            'ext': 'mp4',\n            'title': 'Wideman suspended by NHL',\n            'description': 'Flames defenseman Dennis Wideman was banned 20 games for violation of Rule 40 (Physical Abuse of Officials)',\n            'upload_date': '20160204',\n            'timestamp': 1454544904,\n        },\n    }, {\n        \n        'url': 'https://www.nhl.com/predators/video/poile-laviolette-on-subban-trade/t-277437416/c-44315003',\n        'md5': '50b2bb47f405121484dda3ccbea25459',\n        'info_dict': {\n            'id': '44315003',\n            'ext': 'mp4',\n            'title': 'Poile, Laviolette on Subban trade',\n            'description': 'General manager David Poile and head coach Peter Laviolette share their thoughts on acquiring P.K. Subban from Montreal (06/29/16)',\n            'timestamp': 1467242866,\n            'upload_date': '20160629',\n        },\n    }, {\n        'url': 'https://www.wch2016.com/video/caneur-best-of-game-2-micd-up/t-281230378/c-44983703',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.wch2016.com/news/3-stars-team-europe-vs-team-canada/c-282195068',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        tmp_id, site = mobj.group('id'), mobj.group('site')\n        video_data = self._download_json(\n            'https://nhl.bamcontent.com/%s/id/v1/%s/details/web-v1.json'\n            % (self._SITES_MAP[site], tmp_id), tmp_id)\n        if video_data.get('type') == 'article':\n            video_data = video_data['media']\n\n        video_id = compat_str(video_data['id'])\n        title = video_data['title']\n\n        formats = []\n        for playback in video_data.get('playbacks', []):\n            playback_url = playback.get('url')\n            if not playback_url:\n                continue\n            ext = determine_ext(playback_url)\n            if ext == 'm3u8':\n                m3u8_formats = self._extract_m3u8_formats(\n                    playback_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id=playback.get('name', 'hls'), fatal=False)\n                self._check_formats(m3u8_formats, video_id)\n                formats.extend(m3u8_formats)\n            else:\n                height = int_or_none(playback.get('height'))\n                formats.append({\n                    'format_id': playback.get('name', 'http' + ('-%dp' % height if height else '')),\n                    'url': playback_url,\n                    'width': int_or_none(playback.get('width')),\n                    'height': height,\n                })\n        self._sort_formats(formats, ('preference', 'width', 'height', 'tbr', 'format_id'))\n\n        thumbnails = []\n        for thumbnail_id, thumbnail_data in video_data.get('image', {}).get('cuts', {}).items():\n            thumbnail_url = thumbnail_data.get('src')\n            if not thumbnail_url:\n                continue\n            thumbnails.append({\n                'id': thumbnail_id,\n                'url': thumbnail_url,\n                'width': int_or_none(thumbnail_data.get('width')),\n                'height': int_or_none(thumbnail_data.get('height')),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'timestamp': parse_iso8601(video_data.get('date')),\n            'duration': parse_duration(video_data.get('duration')),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "# Requires rtmpdump\n# iframe embed\n# This is the default value\n# type=video\n# type=article\n# Some m3u8 URLs are invalid (https://github.com/rg3/youtube-dl/issues/10713)\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\nimport os\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n    compat_urllib_parse_urlencode,\n    compat_urllib_parse_urlparse,\n    compat_str,\n)\nfrom ..utils import (\n    unified_strdate,\n    determine_ext,\n    int_or_none,\n    parse_iso8601,\n    parse_duration,\n)\n\n\nclass NHLBaseInfoExtractor(InfoExtractor):\n    @staticmethod\n    def _fix_json(json_string):\n        return json_string.replace('\\\\\\'', '\\'')\n\n    def _real_extract_video(self, video_id):\n        vid_parts = video_id.split(',')\n        if len(vid_parts) == 3:\n            video_id = '%s0%s%s-X-h' % (vid_parts[0][:4], vid_parts[1], vid_parts[2].rjust(4, '0'))\n        json_url = 'http://video.nhl.com/videocenter/servlets/playlist?ids=%s&format=json' % video_id\n        data = self._download_json(\n            json_url, video_id, transform_source=self._fix_json)\n        return self._extract_video(data[0])\n\n    def _extract_video(self, info):\n        video_id = info['id']\n        self.report_extraction(video_id)\n\n        initial_video_url = info['publishPoint']\n        if info['formats'] == '1':\n            parsed_url = compat_urllib_parse_urlparse(initial_video_url)\n            filename, ext = os.path.splitext(parsed_url.path)\n            path = '%s_sd%s' % (filename, ext)\n            data = compat_urllib_parse_urlencode({\n                'type': 'fvod',\n                'path': compat_urlparse.urlunparse(parsed_url[:2] + (path,) + parsed_url[3:])\n            })\n            path_url = 'http://video.nhl.com/videocenter/servlets/encryptvideopath?' + data\n            path_doc = self._download_xml(\n                path_url, video_id, 'Downloading final video url')\n            video_url = path_doc.find('path').text\n        else:\n            video_url = initial_video_url\n\n        join = compat_urlparse.urljoin\n        ret = {\n            'id': video_id,\n            'title': info['name'],\n            'url': video_url,\n            'description': info['description'],\n            'duration': int(info['duration']),\n            'thumbnail': join(join(video_url, '/u/'), info['bigImage']),\n            'upload_date': unified_strdate(info['releaseDate'].split('.')[0]),\n        }\n        if video_url.startswith('rtmp:'):\n            mobj = re.match(r'(?P<tc_url>rtmp://[^/]+/(?P<app>[a-z0-9/]+))/(?P<play_path>mp4:.*)', video_url)\n            ret.update({\n                'tc_url': mobj.group('tc_url'),\n                'play_path': mobj.group('play_path'),\n                'app': mobj.group('app'),\n                'no_resume': True,\n            })\n        return ret\n\n\nclass NHLVideocenterIE(NHLBaseInfoExtractor):\n    IE_NAME = 'nhl.com:videocenter'\n    _VALID_URL = r'https?://video(?P<team>\\.[^.]*)?\\.nhl\\.com/videocenter/(?:console|embed)?(?:\\?(?:.*?[?&])?)(?:id|hlg|playlist)=(?P<id>[-0-9a-zA-Z,]+)'\n\n    _TESTS = [{\n        'url': 'http://video.canucks.nhl.com/videocenter/console?catid=6?id=453614',\n        'md5': 'db704a4ea09e8d3988c85e36cc892d09',\n        'info_dict': {\n            'id': '453614',\n            'ext': 'mp4',\n            'title': 'Quick clip: Weise 4-3 goal vs Flames',\n            'description': 'Dale Weise scores his first of the season to put the Canucks up 4-3.',\n            'duration': 18,\n            'upload_date': '20131006',\n        },\n    }, {\n        'url': 'http://video.nhl.com/videocenter/console?id=2014020024-628-h',\n        'md5': 'd22e82bc592f52d37d24b03531ee9696',\n        'info_dict': {\n            'id': '2014020024-628-h',\n            'ext': 'mp4',\n            'title': 'Alex Galchenyuk Goal on Ray Emery (14:40/3rd)',\n            'description': 'Home broadcast - Montreal Canadiens at Philadelphia Flyers - October 11, 2014',\n            'duration': 0,\n            'upload_date': '20141011',\n        },\n    }, {\n        'url': 'http://video.mapleleafs.nhl.com/videocenter/console?id=58665&catid=802',\n        'md5': 'c78fc64ea01777e426cfc202b746c825',\n        'info_dict': {\n            'id': '58665',\n            'ext': 'flv',\n            'title': 'Classic Game In Six - April 22, 1979',\n            'description': 'It was the last playoff game for the Leafs in the decade, and the last time the Leafs and Habs played in the playoffs. Great game, not a great ending.',\n            'duration': 400,\n            'upload_date': '20100129'\n        },\n    }, {\n        'url': 'http://video.flames.nhl.com/videocenter/console?id=630616',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.nhl.com/videocenter/?id=736722',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.nhl.com/videocenter/console?hlg=20142015,2,299&lang=en',\n        'md5': '076fcb88c255154aacbf0a7accc3f340',\n        'info_dict': {\n            'id': '2014020299-X-h',\n            'ext': 'mp4',\n            'title': 'Penguins at Islanders / Game Highlights',\n            'description': 'Home broadcast - Pittsburgh Penguins at New York Islanders - November 22, 2014',\n            'duration': 268,\n            'upload_date': '20141122',\n        }\n    }, {\n        'url': 'http://video.oilers.nhl.com/videocenter/console?id=691469&catid=4',\n        'info_dict': {\n            'id': '691469',\n            'ext': 'mp4',\n            'title': 'RAW | Craig MacTavish Full Press Conference',\n            'description': 'Oilers GM Craig MacTavish addresses the media at Rexall Place on Friday.',\n            'upload_date': '20141205',\n        },\n        'params': {\n            'skip_download': True,  # Requires rtmpdump\n        }\n    }, {\n        'url': 'http://video.nhl.com/videocenter/embed?playlist=836127',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self._real_extract_video(video_id)\n\n\nclass NHLNewsIE(NHLBaseInfoExtractor):\n    IE_NAME = 'nhl.com:news'\n    IE_DESC = 'NHL news'\n    _VALID_URL = r'https?://(?:.+?\\.)?nhl\\.com/(?:ice|club)/news\\.html?(?:\\?(?:.*?[?&])?)id=(?P<id>[-0-9a-zA-Z]+)'\n\n    _TESTS = [{\n        'url': 'http://www.nhl.com/ice/news.htm?id=750727',\n        'md5': '4b3d1262e177687a3009937bd9ec0be8',\n        'info_dict': {\n            'id': '736722',\n            'ext': 'mp4',\n            'title': 'Cal Clutterbuck has been fined $2,000',\n            'description': 'md5:45fe547d30edab88b23e0dd0ab1ed9e6',\n            'duration': 37,\n            'upload_date': '20150128',\n        },\n    }, {\n        # iframe embed\n        'url': 'http://sabres.nhl.com/club/news.htm?id=780189',\n        'md5': '9f663d1c006c90ac9fb82777d4294e12',\n        'info_dict': {\n            'id': '836127',\n            'ext': 'mp4',\n            'title': 'Morning Skate: OTT vs. BUF (9/23/15)',\n            'description': \"Brian Duff chats with Tyler Ennis prior to Buffalo's first preseason home game.\",\n            'duration': 93,\n            'upload_date': '20150923',\n        },\n    }]\n\n    def _real_extract(self, url):\n        news_id = self._match_id(url)\n        webpage = self._download_webpage(url, news_id)\n        video_id = self._search_regex(\n            [r'pVid(\\d+)', r\"nlid\\s*:\\s*'(\\d+)'\",\n             r'<iframe[^>]+src=[\"\\']https?://video.*?\\.nhl\\.com/videocenter/embed\\?.*\\bplaylist=(\\d+)'],\n            webpage, 'video id')\n        return self._real_extract_video(video_id)\n\n\nclass NHLVideocenterCategoryIE(NHLBaseInfoExtractor):\n    IE_NAME = 'nhl.com:videocenter:category'\n    IE_DESC = 'NHL videocenter category'\n    _VALID_URL = r'https?://video\\.(?P<team>[^.]*)\\.nhl\\.com/videocenter/(console\\?[^(id=)]*catid=(?P<catid>[0-9]+)(?![&?]id=).*?)?$'\n    _TEST = {\n        'url': 'http://video.canucks.nhl.com/videocenter/console?catid=999',\n        'info_dict': {\n            'id': '999',\n            'title': 'Highlights',\n        },\n        'playlist_count': 12,\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        team = mobj.group('team')\n        webpage = self._download_webpage(url, team)\n        cat_id = self._search_regex(\n            [r'var defaultCatId = \"(.+?)\";',\n             r'{statusIndex:0,index:0,.*?id:(.*?),'],\n            webpage, 'category id')\n        playlist_title = self._html_search_regex(\n            r'tab0\"[^>]*?>(.*?)</td>',\n            webpage, 'playlist title', flags=re.DOTALL).lower().capitalize()\n\n        data = compat_urllib_parse_urlencode({\n            'cid': cat_id,\n            # This is the default value\n            'count': 12,\n            'ptrs': 3,\n            'format': 'json',\n        })\n        path = '/videocenter/servlets/browse?' + data\n        request_url = compat_urlparse.urljoin(url, path)\n        response = self._download_webpage(request_url, playlist_title)\n        response = self._fix_json(response)\n        if not response.strip():\n            self._downloader.report_warning('Got an empty response, trying '\n                                            'adding the \"newvideos\" parameter')\n            response = self._download_webpage(request_url + '&newvideos=true',\n                                              playlist_title)\n            response = self._fix_json(response)\n        videos = json.loads(response)\n\n        return {\n            '_type': 'playlist',\n            'title': playlist_title,\n            'id': cat_id,\n            'entries': [self._extract_video(v) for v in videos],\n        }\n\n\nclass NHLIE(InfoExtractor):\n    IE_NAME = 'nhl.com'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>nhl|wch2016)\\.com/(?:[^/]+/)*c-(?P<id>\\d+)'\n    _SITES_MAP = {\n        'nhl': 'nhl',\n        'wch2016': 'wch',\n    }\n    _TESTS = [{\n        # type=video\n        'url': 'https://www.nhl.com/video/anisimov-cleans-up-mess/t-277752844/c-43663503',\n        'md5': '0f7b9a8f986fb4b4eeeece9a56416eaf',\n        'info_dict': {\n            'id': '43663503',\n            'ext': 'mp4',\n            'title': 'Anisimov cleans up mess',\n            'description': 'md5:a02354acdfe900e940ce40706939ca63',\n            'timestamp': 1461288600,\n            'upload_date': '20160422',\n        },\n    }, {\n        # type=article\n        'url': 'https://www.nhl.com/news/dennis-wideman-suspended/c-278258934',\n        'md5': '1f39f4ea74c1394dea110699a25b366c',\n        'info_dict': {\n            'id': '40784403',\n            'ext': 'mp4',\n            'title': 'Wideman suspended by NHL',\n            'description': 'Flames defenseman Dennis Wideman was banned 20 games for violation of Rule 40 (Physical Abuse of Officials)',\n            'upload_date': '20160204',\n            'timestamp': 1454544904,\n        },\n    }, {\n        # Some m3u8 URLs are invalid (https://github.com/rg3/youtube-dl/issues/10713)\n        'url': 'https://www.nhl.com/predators/video/poile-laviolette-on-subban-trade/t-277437416/c-44315003',\n        'md5': '50b2bb47f405121484dda3ccbea25459',\n        'info_dict': {\n            'id': '44315003',\n            'ext': 'mp4',\n            'title': 'Poile, Laviolette on Subban trade',\n            'description': 'General manager David Poile and head coach Peter Laviolette share their thoughts on acquiring P.K. Subban from Montreal (06/29/16)',\n            'timestamp': 1467242866,\n            'upload_date': '20160629',\n        },\n    }, {\n        'url': 'https://www.wch2016.com/video/caneur-best-of-game-2-micd-up/t-281230378/c-44983703',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.wch2016.com/news/3-stars-team-europe-vs-team-canada/c-282195068',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        tmp_id, site = mobj.group('id'), mobj.group('site')\n        video_data = self._download_json(\n            'https://nhl.bamcontent.com/%s/id/v1/%s/details/web-v1.json'\n            % (self._SITES_MAP[site], tmp_id), tmp_id)\n        if video_data.get('type') == 'article':\n            video_data = video_data['media']\n\n        video_id = compat_str(video_data['id'])\n        title = video_data['title']\n\n        formats = []\n        for playback in video_data.get('playbacks', []):\n            playback_url = playback.get('url')\n            if not playback_url:\n                continue\n            ext = determine_ext(playback_url)\n            if ext == 'm3u8':\n                m3u8_formats = self._extract_m3u8_formats(\n                    playback_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id=playback.get('name', 'hls'), fatal=False)\n                self._check_formats(m3u8_formats, video_id)\n                formats.extend(m3u8_formats)\n            else:\n                height = int_or_none(playback.get('height'))\n                formats.append({\n                    'format_id': playback.get('name', 'http' + ('-%dp' % height if height else '')),\n                    'url': playback_url,\n                    'width': int_or_none(playback.get('width')),\n                    'height': height,\n                })\n        self._sort_formats(formats, ('preference', 'width', 'height', 'tbr', 'format_id'))\n\n        thumbnails = []\n        for thumbnail_id, thumbnail_data in video_data.get('image', {}).get('cuts', {}).items():\n            thumbnail_url = thumbnail_data.get('src')\n            if not thumbnail_url:\n                continue\n            thumbnails.append({\n                'id': thumbnail_id,\n                'url': thumbnail_url,\n                'width': int_or_none(thumbnail_data.get('width')),\n                'height': int_or_none(thumbnail_data.get('height')),\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'timestamp': parse_iso8601(video_data.get('date')),\n            'duration': parse_duration(video_data.get('duration')),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nhl.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nhl.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}