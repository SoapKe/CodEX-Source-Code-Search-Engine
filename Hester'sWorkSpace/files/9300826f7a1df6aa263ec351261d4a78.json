{"author": "aws", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nimport mock\nfrom awscli.compat import six\n\nfrom awscli.customizations import preview\nfrom awscli.testutils import BaseAWSCommandParamsTest\n\n\nclass TestPreviewMode(BaseAWSCommandParamsTest):\n\n    def setUp(self):\n        super(TestPreviewMode, self).setUp()\n        self.stderr = six.StringIO()\n        self.stderr_patch = mock.patch('sys.stderr', self.stderr)\n        self.stderr_patch.start()\n        self.full_config = {'profiles': {}}\n         Implementation detail, but we want to patch out the\n         session config, as that's the only way to control\n         preview services.\n        self.driver.session._config = self.full_config\n\n    def tearDown(self):\n        super(TestPreviewMode, self).tearDown()\n        self.stderr_patch.stop()\n\n    def test_invoke_preview_mode_service(self):\n         By default cloudfront is a preview service.\n         We check this to make sure we fail loudly if we\n         ever mark cloudfront as not being a preview service\n         by default.\n        self.assertIn('sdb', preview.PREVIEW_SERVICES)\n        rc = self.driver.main('sdb list-domains'.split())\n        self.assertEqual(rc, 1)\n        self.assertIn(preview.PreviewModeCommandMixin.HELP_SNIPPET,\n                      self.stderr.getvalue())\n\n    def test_preview_service_not_true(self):\n         If it's not \"true\" then we still make it a preview service.\n        self.full_config['preview'] = {'sdb': 'false'}\n        rc = self.driver.main('sdb list-domains'.split())\n        self.assertEqual(rc, 1)\n        self.assertIn(preview.PreviewModeCommandMixin.HELP_SNIPPET,\n                      self.stderr.getvalue())\n\n    def test_preview_service_enabled_makes_call(self):\n        self.full_config['preview'] = {'sdb': 'true'}\n        self.assert_params_for_cmd('sdb list-domains', params={})\n\n    @mock.patch('awscli.help.get_renderer')\n    def test_can_still_document_preview_service(self, get_renderer):\n         Even if a service is still marked as being in preview,\n         you can still pull up its documentation.\n        self.full_config['preview'] = {'sdb': 'false'}\n        self.driver.main('sdb help'.split())\n         In this case, the normal help processing should have occurred\n         and we check that we rendered the contents correctly.\n        self.assertTrue(get_renderer.return_value.render.called)\n        contents = get_renderer.return_value.render.call_args[0][0]\n        self.assertIn('aws configure set preview.sdb true',\n                      contents.decode('utf-8'))\n\n    @mock.patch('awscli.help.get_renderer')\n    def test_document_preview_service_operation(self, get_renderer):\n         Even if a service is still marked as being in preview,\n         you can still pull up its documentation for its operations.\n        self.full_config['preview'] = {'sdb': 'false'}\n        self.driver.main('sdb list-domains help'.split())\n         The contents should be have the correct way to set the command\n         out of preview in the config file.\n        self.assertTrue(get_renderer.return_value.render.called)\n        contents = get_renderer.return_value.render.call_args[0][0]\n        self.assertIn('aws configure set preview.sdb true',\n                      contents.decode('utf-8'))\n\n    @mock.patch('awscli.help.get_renderer')\n    def test_preview_mode_is_in_provider_help(self, renderer):\n        self.driver.main(['help'])\n        contents = renderer.return_value.render.call_args[0][0]\n         The preview services should still be in the help output.\n        for service in preview.PREVIEW_SERVICES:\n            self.assertIn(service, contents.decode('utf-8'))\n", "comments": "  copyright 2013 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     implementation detail  want patch    session config  way control    preview services     by default cloudfront preview service     we check make sure fail loudly    ever mark cloudfront preview service    default     if  true  still make preview service     even service still marked preview     still pull documentation     in case  normal help processing occurred    check rendered contents correctly     even service still marked preview     still pull documentation operations     the contents correct way set command    preview config file     the preview services still help output  ", "content": "# Copyright 2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nimport mock\nfrom awscli.compat import six\n\nfrom awscli.customizations import preview\nfrom awscli.testutils import BaseAWSCommandParamsTest\n\n\nclass TestPreviewMode(BaseAWSCommandParamsTest):\n\n    def setUp(self):\n        super(TestPreviewMode, self).setUp()\n        self.stderr = six.StringIO()\n        self.stderr_patch = mock.patch('sys.stderr', self.stderr)\n        self.stderr_patch.start()\n        self.full_config = {'profiles': {}}\n        # Implementation detail, but we want to patch out the\n        # session config, as that's the only way to control\n        # preview services.\n        self.driver.session._config = self.full_config\n\n    def tearDown(self):\n        super(TestPreviewMode, self).tearDown()\n        self.stderr_patch.stop()\n\n    def test_invoke_preview_mode_service(self):\n        # By default cloudfront is a preview service.\n        # We check this to make sure we fail loudly if we\n        # ever mark cloudfront as not being a preview service\n        # by default.\n        self.assertIn('sdb', preview.PREVIEW_SERVICES)\n        rc = self.driver.main('sdb list-domains'.split())\n        self.assertEqual(rc, 1)\n        self.assertIn(preview.PreviewModeCommandMixin.HELP_SNIPPET,\n                      self.stderr.getvalue())\n\n    def test_preview_service_not_true(self):\n        # If it's not \"true\" then we still make it a preview service.\n        self.full_config['preview'] = {'sdb': 'false'}\n        rc = self.driver.main('sdb list-domains'.split())\n        self.assertEqual(rc, 1)\n        self.assertIn(preview.PreviewModeCommandMixin.HELP_SNIPPET,\n                      self.stderr.getvalue())\n\n    def test_preview_service_enabled_makes_call(self):\n        self.full_config['preview'] = {'sdb': 'true'}\n        self.assert_params_for_cmd('sdb list-domains', params={})\n\n    @mock.patch('awscli.help.get_renderer')\n    def test_can_still_document_preview_service(self, get_renderer):\n        # Even if a service is still marked as being in preview,\n        # you can still pull up its documentation.\n        self.full_config['preview'] = {'sdb': 'false'}\n        self.driver.main('sdb help'.split())\n        # In this case, the normal help processing should have occurred\n        # and we check that we rendered the contents correctly.\n        self.assertTrue(get_renderer.return_value.render.called)\n        contents = get_renderer.return_value.render.call_args[0][0]\n        self.assertIn('aws configure set preview.sdb true',\n                      contents.decode('utf-8'))\n\n    @mock.patch('awscli.help.get_renderer')\n    def test_document_preview_service_operation(self, get_renderer):\n        # Even if a service is still marked as being in preview,\n        # you can still pull up its documentation for its operations.\n        self.full_config['preview'] = {'sdb': 'false'}\n        self.driver.main('sdb list-domains help'.split())\n        # The contents should be have the correct way to set the command\n        # out of preview in the config file.\n        self.assertTrue(get_renderer.return_value.render.called)\n        contents = get_renderer.return_value.render.call_args[0][0]\n        self.assertIn('aws configure set preview.sdb true',\n                      contents.decode('utf-8'))\n\n    @mock.patch('awscli.help.get_renderer')\n    def test_preview_mode_is_in_provider_help(self, renderer):\n        self.driver.main(['help'])\n        contents = renderer.return_value.render.call_args[0][0]\n        # The preview services should still be in the help output.\n        for service in preview.PREVIEW_SERVICES:\n            self.assertIn(service, contents.decode('utf-8'))\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_preview.py", "id": "9300826f7a1df6aa263ec351261d4a78", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/test_preview.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}