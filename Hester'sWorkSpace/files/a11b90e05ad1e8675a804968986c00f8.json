{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass ExpoTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?expotv\\.com/videos/[^?\n    _TEST = {\n        'url': 'http://www.expotv.com/videos/reviews/3/40/NYX-Butter-lipstick/667916',\n        'md5': 'fe1d728c3a813ff78f595bc8b7a707a8',\n        'info_dict': {\n            'id': '667916',\n            'ext': 'mp4',\n            'title': 'NYX Butter Lipstick Little Susie',\n            'description': 'Goes on like butter, but looks better!',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Stephanie S.',\n            'upload_date': '20150520',\n            'view_count': int,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        player_key = self._search_regex(\n            r'<param name=\"playerKey\" value=\"([^\"]+)\"', webpage, 'player key')\n        config = self._download_json(\n            'http://client.expotv.com/video/config/%s/%s' % (video_id, player_key),\n            video_id, 'Downloading video configuration')\n\n        formats = []\n        for fcfg in config['sources']:\n            media_url = fcfg.get('file')\n            if not media_url:\n                continue\n            if fcfg.get('type') == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    media_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls'))\n            else:\n                formats.append({\n                    'url': media_url,\n                    'height': int_or_none(fcfg.get('height')),\n                    'format_id': fcfg.get('label'),\n                    'ext': self._search_regex(\n                        r'filename=.*\\.([a-z0-9_A-Z]+)&', media_url,\n                        'file extension', default=None) or fcfg.get('type'),\n                })\n        self._sort_formats(formats)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        thumbnail = config.get('image')\n        view_count = int_or_none(self._search_regex(\n            r'<h5>Plays: ([0-9]+)</h5>', webpage, 'view counts'))\n        uploader = self._search_regex(\n            r'<div class=\"reviewer\">\\s*<img alt=\"([^\"]+)\"', webpage, 'uploader',\n            fatal=False)\n        upload_date = unified_strdate(self._search_regex(\n            r'<h5>Reviewed on ([0-9/.]+)</h5>', webpage, 'upload date',\n            fatal=False), day_first=False)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': description,\n            'view_count': view_count,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'upload_date': upload_date,\n        }\n", "comments": "#]*/(?P<id>[0-9]+)($|[?#])'\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_strdate,\n)\n\n\nclass ExpoTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?expotv\\.com/videos/[^?#]*/(?P<id>[0-9]+)($|[?#])'\n    _TEST = {\n        'url': 'http://www.expotv.com/videos/reviews/3/40/NYX-Butter-lipstick/667916',\n        'md5': 'fe1d728c3a813ff78f595bc8b7a707a8',\n        'info_dict': {\n            'id': '667916',\n            'ext': 'mp4',\n            'title': 'NYX Butter Lipstick Little Susie',\n            'description': 'Goes on like butter, but looks better!',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Stephanie S.',\n            'upload_date': '20150520',\n            'view_count': int,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        player_key = self._search_regex(\n            r'<param name=\"playerKey\" value=\"([^\"]+)\"', webpage, 'player key')\n        config = self._download_json(\n            'http://client.expotv.com/video/config/%s/%s' % (video_id, player_key),\n            video_id, 'Downloading video configuration')\n\n        formats = []\n        for fcfg in config['sources']:\n            media_url = fcfg.get('file')\n            if not media_url:\n                continue\n            if fcfg.get('type') == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    media_url, video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls'))\n            else:\n                formats.append({\n                    'url': media_url,\n                    'height': int_or_none(fcfg.get('height')),\n                    'format_id': fcfg.get('label'),\n                    'ext': self._search_regex(\n                        r'filename=.*\\.([a-z0-9_A-Z]+)&', media_url,\n                        'file extension', default=None) or fcfg.get('type'),\n                })\n        self._sort_formats(formats)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        thumbnail = config.get('image')\n        view_count = int_or_none(self._search_regex(\n            r'<h5>Plays: ([0-9]+)</h5>', webpage, 'view counts'))\n        uploader = self._search_regex(\n            r'<div class=\"reviewer\">\\s*<img alt=\"([^\"]+)\"', webpage, 'uploader',\n            fatal=False)\n        upload_date = unified_strdate(self._search_regex(\n            r'<h5>Reviewed on ([0-9/.]+)</h5>', webpage, 'upload date',\n            fatal=False), day_first=False)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': description,\n            'view_count': view_count,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'upload_date': upload_date,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "expotv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/expotv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}