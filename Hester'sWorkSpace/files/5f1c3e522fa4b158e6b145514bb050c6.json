{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import date, timedelta\n\nimport requests\nimport werkzeug\n\nfrom odoo import models, api, service\nfrom odoo.tools.translate import _\nfrom odoo.exceptions import UserError\nfrom odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT, misc\n\n\nclass MercuryTransaction(models.Model):\n    _name = 'pos_mercury.mercury_transaction'\n\n    def _get_pos_session(self):\n        pos_session = self.env['pos.session'].search([('state', '=', 'opened'), ('user_id', '=', self.env.uid)], limit=1)\n        if not pos_session:\n            raise UserError(_(\"No opened point of sale session for user %s found\") % self.env.user.name)\n\n        pos_session.login()\n\n        return pos_session\n\n    def _get_pos_mercury_config_id(self, config, journal_id):\n        journal = config.journal_ids.filtered(lambda r: r.id == journal_id)\n\n        if journal and journal.pos_mercury_config_id:\n            return journal.pos_mercury_config_id\n        else:\n            raise UserError(_(\"No Mercury configuration associated with the journal.\"))\n\n    def _setup_request(self, data):\n        \n        pos_session = self._get_pos_session()\n\n        config = pos_session.config_id\n        pos_mercury_config = self._get_pos_mercury_config_id(config, data['journal_id'])\n\n        data['operator_id'] = pos_session.user_id.login\n        data['merchant_id'] = pos_mercury_config.sudo().merchant_id\n        data['merchant_pwd'] = pos_mercury_config.sudo().merchant_pwd\n        data['memo'] = \"Odoo \" + service.common.exp_version()['server_version']\n\n    def _do_request(self, template, data):\n        xml_transaction = self.env.ref(template).render(data).decode()\n\n        if not data['merchant_id'] or not data['merchant_pwd']:\n            return \"not setup\"\n\n        soap_header = '<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mer=\"http://www.mercurypay.com\"><soapenv:Header/><soapenv:Body><mer:CreditTransaction><mer:tran>'\n        soap_footer = '</mer:tran><mer:pw>' + data['merchant_pwd'] + '</mer:pw></mer:CreditTransaction></soapenv:Body></soapenv:Envelope>'\n        xml_transaction = soap_header + misc.html_escape(xml_transaction) + soap_footer\n\n        response = ''\n\n        headers = {\n            'Content-Type': 'text/xml',\n            'SOAPAction': 'http://www.mercurypay.com/CreditTransaction',\n        }\n\n        try:\n            r = requests.post('https://w1.mercurypay.com/ws/ws.asmx', data=xml_transaction, headers=headers, timeout=65)\n            r.raise_for_status()\n            response = werkzeug.utils.unescape(r.content.decode())\n        except:\n            response = \"timeout\"\n\n        return response\n\n    def _do_reversal_or_voidsale(self, data, is_voidsale):\n        try:\n            self._setup_request(data)\n        except UserError:\n            return \"internal error\"\n\n        data['is_voidsale'] = is_voidsale\n        response = self._do_request('pos_mercury.mercury_voidsale', data)\n        return response\n\n    @api.model\n    def do_payment(self, data):\n        try:\n            self._setup_request(data)\n        except UserError:\n            return \"internal error\"\n\n        response = self._do_request('pos_mercury.mercury_transaction', data)\n        return response\n\n    @api.model\n    def do_reversal(self, data):\n        return self._do_reversal_or_voidsale(data, False)\n\n    @api.model\n    def do_voidsale(self, data):\n        return self._do_reversal_or_voidsale(data, True)\n\n    def do_return(self, data):\n        try:\n            self._setup_request(data)\n        except UserError:\n            return \"internal error\"\n\n        response = self._do_request('pos_mercury.mercury_return', data)\n        return response\n\n    # One time (the ones we use) Mercury tokens are required to be\n    \n    @api.model\n    def cleanup_old_tokens(self):\n        expired_creation_date = (date.today() - timedelta(days=6 * 30)).strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n\n        for order in self.env['pos.order'].search([('create_date', '<', expired_creation_date)]):\n            order.ref_no = \"\"\n            order.record_no = \"\"\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     todo  master make client include pos session id use    one time (the ones use) mercury tokens required    deleted 6 months ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import date, timedelta\n\nimport requests\nimport werkzeug\n\nfrom odoo import models, api, service\nfrom odoo.tools.translate import _\nfrom odoo.exceptions import UserError\nfrom odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT, misc\n\n\nclass MercuryTransaction(models.Model):\n    _name = 'pos_mercury.mercury_transaction'\n\n    def _get_pos_session(self):\n        pos_session = self.env['pos.session'].search([('state', '=', 'opened'), ('user_id', '=', self.env.uid)], limit=1)\n        if not pos_session:\n            raise UserError(_(\"No opened point of sale session for user %s found\") % self.env.user.name)\n\n        pos_session.login()\n\n        return pos_session\n\n    def _get_pos_mercury_config_id(self, config, journal_id):\n        journal = config.journal_ids.filtered(lambda r: r.id == journal_id)\n\n        if journal and journal.pos_mercury_config_id:\n            return journal.pos_mercury_config_id\n        else:\n            raise UserError(_(\"No Mercury configuration associated with the journal.\"))\n\n    def _setup_request(self, data):\n        # todo: in master make the client include the pos.session id and use that\n        pos_session = self._get_pos_session()\n\n        config = pos_session.config_id\n        pos_mercury_config = self._get_pos_mercury_config_id(config, data['journal_id'])\n\n        data['operator_id'] = pos_session.user_id.login\n        data['merchant_id'] = pos_mercury_config.sudo().merchant_id\n        data['merchant_pwd'] = pos_mercury_config.sudo().merchant_pwd\n        data['memo'] = \"Odoo \" + service.common.exp_version()['server_version']\n\n    def _do_request(self, template, data):\n        xml_transaction = self.env.ref(template).render(data).decode()\n\n        if not data['merchant_id'] or not data['merchant_pwd']:\n            return \"not setup\"\n\n        soap_header = '<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:mer=\"http://www.mercurypay.com\"><soapenv:Header/><soapenv:Body><mer:CreditTransaction><mer:tran>'\n        soap_footer = '</mer:tran><mer:pw>' + data['merchant_pwd'] + '</mer:pw></mer:CreditTransaction></soapenv:Body></soapenv:Envelope>'\n        xml_transaction = soap_header + misc.html_escape(xml_transaction) + soap_footer\n\n        response = ''\n\n        headers = {\n            'Content-Type': 'text/xml',\n            'SOAPAction': 'http://www.mercurypay.com/CreditTransaction',\n        }\n\n        try:\n            r = requests.post('https://w1.mercurypay.com/ws/ws.asmx', data=xml_transaction, headers=headers, timeout=65)\n            r.raise_for_status()\n            response = werkzeug.utils.unescape(r.content.decode())\n        except:\n            response = \"timeout\"\n\n        return response\n\n    def _do_reversal_or_voidsale(self, data, is_voidsale):\n        try:\n            self._setup_request(data)\n        except UserError:\n            return \"internal error\"\n\n        data['is_voidsale'] = is_voidsale\n        response = self._do_request('pos_mercury.mercury_voidsale', data)\n        return response\n\n    @api.model\n    def do_payment(self, data):\n        try:\n            self._setup_request(data)\n        except UserError:\n            return \"internal error\"\n\n        response = self._do_request('pos_mercury.mercury_transaction', data)\n        return response\n\n    @api.model\n    def do_reversal(self, data):\n        return self._do_reversal_or_voidsale(data, False)\n\n    @api.model\n    def do_voidsale(self, data):\n        return self._do_reversal_or_voidsale(data, True)\n\n    def do_return(self, data):\n        try:\n            self._setup_request(data)\n        except UserError:\n            return \"internal error\"\n\n        response = self._do_request('pos_mercury.mercury_return', data)\n        return response\n\n    # One time (the ones we use) Mercury tokens are required to be\n    # deleted after 6 months\n    @api.model\n    def cleanup_old_tokens(self):\n        expired_creation_date = (date.today() - timedelta(days=6 * 30)).strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n\n        for order in self.env['pos.order'].search([('create_date', '<', expired_creation_date)]):\n            order.ref_no = \"\"\n            order.record_no = \"\"\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "pos_mercury_transaction.py", "id": "5f1c3e522fa4b158e6b145514bb050c6", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/pos_mercury/models/pos_mercury_transaction.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}