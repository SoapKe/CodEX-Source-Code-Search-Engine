{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\nfrom sentry.interfaces.user import User\nfrom sentry.models import Event\n\n\nclass UserTest(TestCase):\n    @fixture\n    def event(self):\n        return mock.Mock(spec=Event())\n\n    @fixture\n    def interface(self):\n        return User.to_python(dict(\n            id=1,\n            email='lol@example.com',\n            favorite_color='brown',\n        ))\n\n    def test_path(self):\n        assert self.interface.get_path() == 'sentry.interfaces.User'\n\n    def test_serialize_behavior(self):\n        assert self.interface.to_json() == {\n            'id': '1',\n            'email': 'lol@example.com',\n            'data': {\n                'favorite_color': 'brown'\n            }\n        }\n\n    def test_invalid_ip_address(self):\n        with self.assertRaises(Exception):\n            User.to_python(dict(\n                ip_address='abc',\n            ))\n\n    def test_invalid_email_address(self):\n        with self.assertRaises(Exception):\n            User.to_python(dict(\n                email=1,\n            ))\n\n        with self.assertRaises(Exception):\n            User.to_python(dict(\n                email='foo',\n            ))\n\n    def test_id_long_dict(self):\n        u = User.to_python({\n            'id': {x: 'foobarbaz' for x in range(10)},  \n        })\n        assert len(u.to_json()['id']) == 128\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n", "comments": "      coding  utf 8        dict longer 128 chars ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport mock\nfrom exam import fixture\n\nfrom sentry.testutils import TestCase\nfrom sentry.interfaces.user import User\nfrom sentry.models import Event\n\n\nclass UserTest(TestCase):\n    @fixture\n    def event(self):\n        return mock.Mock(spec=Event())\n\n    @fixture\n    def interface(self):\n        return User.to_python(dict(\n            id=1,\n            email='lol@example.com',\n            favorite_color='brown',\n        ))\n\n    def test_path(self):\n        assert self.interface.get_path() == 'sentry.interfaces.User'\n\n    def test_serialize_behavior(self):\n        assert self.interface.to_json() == {\n            'id': '1',\n            'email': 'lol@example.com',\n            'data': {\n                'favorite_color': 'brown'\n            }\n        }\n\n    def test_invalid_ip_address(self):\n        with self.assertRaises(Exception):\n            User.to_python(dict(\n                ip_address='abc',\n            ))\n\n    def test_invalid_email_address(self):\n        with self.assertRaises(Exception):\n            User.to_python(dict(\n                email=1,\n            ))\n\n        with self.assertRaises(Exception):\n            User.to_python(dict(\n                email='foo',\n            ))\n\n    def test_id_long_dict(self):\n        u = User.to_python({\n            'id': {x: 'foobarbaz' for x in range(10)},  # dict longer than 128 chars\n        })\n        assert len(u.to_json()['id']) == 128\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_user.py", "id": "6b87a057cbb1a6df10880dc522685b58", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_user.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}