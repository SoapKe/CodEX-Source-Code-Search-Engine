{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Gregory Shulov (gregory.shulov@gmail.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: infini_pool\nversion_added: 2.3\nshort_description: Create, Delete and Modify Pools on Infinibox\ndescription:\n    - This module to creates, deletes or modifies pools on Infinibox.\nauthor: Gregory Shulov (@GR360RY)\noptions:\n  name:\n    description:\n      - Pool Name\n    required: true\n  state:\n    description:\n      - Creates/Modifies Pool when present or removes when absent\n    required: false\n    default: present\n    choices: [ \"present\", \"absent\" ]\n  size:\n    description:\n      - Pool Physical Capacity in MB, GB or TB units.\n        If pool size is not set on pool creation, size will be equal to 1TB.\n        See examples.\n    required: false\n  vsize:\n    description:\n      - Pool Virtual Capacity in MB, GB or TB units.\n        If pool vsize is not set on pool creation, Virtual Capacity will be equal to Physical Capacity.\n        See examples.\n    required: false\n  ssd_cache:\n    description:\n      - Enable/Disable SSD Cache on Pool\n    required: false\n    default: yes\n    choices: [ \"yes\", \"no\" ]\nnotes:\n  - Infinibox Admin level access is required for pool modifications\nextends_documentation_fragment:\n    - infinibox\nrequirements:\n    - capacity\n'''\n\nEXAMPLES = '''\n- name: Make sure pool foo exists. Set pool physical capacity to 10TB\n  infini_pool:\n    name: foo\n    size: 10TB\n    vsize: 10TB\n    user: admin\n    password: secret\n    system: ibox001\n\n- name: Disable SSD Cache on pool\n  infini_pool:\n    name: foo\n    ssd_cache: no\n    user: admin\n    password: secret\n    system: ibox001\n'''\n\nRETURN = '''\n'''\n\ntry:\n    from capacity import KiB, Capacity\n    HAS_CAPACITY = True\nexcept ImportError:\n    HAS_CAPACITY = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.infinibox import HAS_INFINISDK, api_wrapper, get_system, infinibox_argument_spec\n\n\n@api_wrapper\ndef get_pool(module, system):\n    \"\"\"Return Pool on None\"\"\"\n    try:\n        return system.pools.get(name=module.params['name'])\n    except:\n        return None\n\n\n@api_wrapper\ndef create_pool(module, system):\n    \"\"\"Create Pool\"\"\"\n    name = module.params['name']\n    size = module.params['size']\n    vsize = module.params['vsize']\n    ssd_cache = module.params['ssd_cache']\n\n    if not module.check_mode:\n        if not size and not vsize:\n            pool = system.pools.create(name=name, physical_capacity=Capacity('1TB'), virtual_capacity=Capacity('1TB'))\n        elif size and not vsize:\n            pool = system.pools.create(name=name, physical_capacity=Capacity(size), virtual_capacity=Capacity(size))\n        elif not size and vsize:\n            pool = system.pools.create(name=name, physical_capacity=Capacity('1TB'), virtual_capacity=Capacity(vsize))\n        else:\n            pool = system.pools.create(name=name, physical_capacity=Capacity(size), virtual_capacity=Capacity(vsize))\n        \n        if not ssd_cache:\n            pool.update_ssd_enabled(ssd_cache)\n\n    module.exit_json(changed=True)\n\n\n@api_wrapper\ndef update_pool(module, system, pool):\n    \"\"\"Update Pool\"\"\"\n    changed = False\n\n    size = module.params['size']\n    vsize = module.params['vsize']\n    ssd_cache = module.params['ssd_cache']\n\n    \n    if size:\n        physical_capacity = Capacity(size).roundup(6 * 64 * KiB)\n        if pool.get_physical_capacity() != physical_capacity:\n            if not module.check_mode:\n                pool.update_physical_capacity(physical_capacity)\n            changed = True\n\n    if vsize:\n        virtual_capacity = Capacity(vsize).roundup(6 * 64 * KiB)\n        if pool.get_virtual_capacity() != virtual_capacity:\n            if not module.check_mode:\n                pool.update_virtual_capacity(virtual_capacity)\n            changed = True\n\n    if pool.get_ssd_enabled() != ssd_cache:\n        if not module.check_mode:\n            pool.update_ssd_enabled(ssd_cache)\n        changed = True\n\n    module.exit_json(changed=changed)\n\n\n@api_wrapper\ndef delete_pool(module, pool):\n    \"\"\"Delete Pool\"\"\"\n    if not module.check_mode:\n        pool.delete()\n    module.exit_json(changed=True)\n\n\ndef main():\n    argument_spec = infinibox_argument_spec()\n    argument_spec.update(\n        dict(\n            name=dict(required=True),\n            state=dict(default='present', choices=['present', 'absent']),\n            size=dict(),\n            vsize=dict(),\n            ssd_cache=dict(type='bool', default=True)\n        )\n    )\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_INFINISDK:\n        module.fail_json(msg='infinisdk is required for this module')\n    if not HAS_CAPACITY:\n        module.fail_json(msg='The capacity python library is required for this module')\n\n    if module.params['size']:\n        try:\n            Capacity(module.params['size'])\n        except:\n            module.fail_json(msg='size (Physical Capacity) should be defined in MB, GB, TB or PB units')\n\n    if module.params['vsize']:\n        try:\n            Capacity(module.params['vsize'])\n        except:\n            module.fail_json(msg='vsize (Virtual Capacity) should be defined in MB, GB, TB or PB units')\n\n    state = module.params['state']\n    system = get_system(module)\n    pool = get_pool(module, system)\n\n    if state == 'present' and not pool:\n        create_pool(module, system)\n    elif state == 'present' and pool:\n        update_pool(module, system, pool)\n    elif state == 'absent' and pool:\n        delete_pool(module, pool)\n    elif state == 'absent' and not pool:\n        module.exit_json(changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   return pool none        try          return system pools get(name module params  name  )     except          return none    api wrapper def create pool(module  system)         create pool        name   module params  name       size   module params  size       vsize   module params  vsize       ssd cache   module params  ssd cache        module check mode          size vsize              pool   system pools create(name name  physical capacity capacity( 1tb )  virtual capacity capacity( 1tb ))         elif size vsize              pool   system pools create(name name  physical capacity capacity(size)  virtual capacity capacity(size))         elif size vsize              pool   system pools create(name name  physical capacity capacity( 1tb )  virtual capacity capacity(vsize))         else              pool   system pools create(name name  physical capacity capacity(size)  virtual capacity capacity(vsize))           default value ssd cache true  disable ssd chacing false         ssd cache              pool update ssd enabled(ssd cache)      module exit json(changed true)    api wrapper def update pool(module  system  pool)         update pool        changed   false      size   module params  size       vsize   module params  vsize       ssd cache   module params  ssd cache          roundup capacity mimic infinibox behaviour     size          physical capacity   capacity(size) roundup(6   64   kib)         pool get physical capacity()    physical capacity              module check mode                  pool update physical capacity(physical capacity)             changed   true      vsize          virtual capacity   capacity(vsize) roundup(6   64   kib)         pool get virtual capacity()    virtual capacity              module check mode                  pool update virtual capacity(virtual capacity)             changed   true      pool get ssd enabled()    ssd cache          module check mode              pool update ssd enabled(ssd cache)         changed   true      module exit json(changed changed)    api wrapper def delete pool(module  pool)         delete pool             module  infini pool version added  2 3 short description  create  delete modify pools infinibox description        this module creates  deletes modifies pools infinibox  author  gregory shulov ( gr360ry) options    name      description          pool name     required  true   state      description          creates modifies pool present removes absent     required  false     default  present     choices     present    absent      size      description          pool physical capacity mb  gb tb units          if pool size set pool creation  size equal 1tb          see examples      required  false   vsize      description          pool virtual capacity mb  gb tb units          if pool vsize set pool creation  virtual capacity equal physical capacity          see examples      required  false   ssd cache      description          enable disable ssd cache pool     required  false     default  yes     choices     yes       notes      infinibox admin level access required pool modifications extends documentation fragment        infinibox requirements        capacity      examples         name  make sure pool foo exists  set pool physical capacity 10tb   infini pool      name  foo     size  10tb     vsize  10tb     user  admin     password  secret     system  ibox001    name  disable ssd cache pool   infini pool      name  foo     ssd cache      user  admin     password  secret     system  ibox001      return               usr bin python        coding  utf 8        (c) 2016  gregory shulov (gregory shulov gmail com)    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    default value ssd cache true  disable ssd chacing false    roundup capacity mimic infinibox behaviour ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2016, Gregory Shulov (gregory.shulov@gmail.com)\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: infini_pool\nversion_added: 2.3\nshort_description: Create, Delete and Modify Pools on Infinibox\ndescription:\n    - This module to creates, deletes or modifies pools on Infinibox.\nauthor: Gregory Shulov (@GR360RY)\noptions:\n  name:\n    description:\n      - Pool Name\n    required: true\n  state:\n    description:\n      - Creates/Modifies Pool when present or removes when absent\n    required: false\n    default: present\n    choices: [ \"present\", \"absent\" ]\n  size:\n    description:\n      - Pool Physical Capacity in MB, GB or TB units.\n        If pool size is not set on pool creation, size will be equal to 1TB.\n        See examples.\n    required: false\n  vsize:\n    description:\n      - Pool Virtual Capacity in MB, GB or TB units.\n        If pool vsize is not set on pool creation, Virtual Capacity will be equal to Physical Capacity.\n        See examples.\n    required: false\n  ssd_cache:\n    description:\n      - Enable/Disable SSD Cache on Pool\n    required: false\n    default: yes\n    choices: [ \"yes\", \"no\" ]\nnotes:\n  - Infinibox Admin level access is required for pool modifications\nextends_documentation_fragment:\n    - infinibox\nrequirements:\n    - capacity\n'''\n\nEXAMPLES = '''\n- name: Make sure pool foo exists. Set pool physical capacity to 10TB\n  infini_pool:\n    name: foo\n    size: 10TB\n    vsize: 10TB\n    user: admin\n    password: secret\n    system: ibox001\n\n- name: Disable SSD Cache on pool\n  infini_pool:\n    name: foo\n    ssd_cache: no\n    user: admin\n    password: secret\n    system: ibox001\n'''\n\nRETURN = '''\n'''\n\ntry:\n    from capacity import KiB, Capacity\n    HAS_CAPACITY = True\nexcept ImportError:\n    HAS_CAPACITY = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.infinibox import HAS_INFINISDK, api_wrapper, get_system, infinibox_argument_spec\n\n\n@api_wrapper\ndef get_pool(module, system):\n    \"\"\"Return Pool on None\"\"\"\n    try:\n        return system.pools.get(name=module.params['name'])\n    except:\n        return None\n\n\n@api_wrapper\ndef create_pool(module, system):\n    \"\"\"Create Pool\"\"\"\n    name = module.params['name']\n    size = module.params['size']\n    vsize = module.params['vsize']\n    ssd_cache = module.params['ssd_cache']\n\n    if not module.check_mode:\n        if not size and not vsize:\n            pool = system.pools.create(name=name, physical_capacity=Capacity('1TB'), virtual_capacity=Capacity('1TB'))\n        elif size and not vsize:\n            pool = system.pools.create(name=name, physical_capacity=Capacity(size), virtual_capacity=Capacity(size))\n        elif not size and vsize:\n            pool = system.pools.create(name=name, physical_capacity=Capacity('1TB'), virtual_capacity=Capacity(vsize))\n        else:\n            pool = system.pools.create(name=name, physical_capacity=Capacity(size), virtual_capacity=Capacity(vsize))\n        # Default value of ssd_cache is True. Disable ssd chacing if False\n        if not ssd_cache:\n            pool.update_ssd_enabled(ssd_cache)\n\n    module.exit_json(changed=True)\n\n\n@api_wrapper\ndef update_pool(module, system, pool):\n    \"\"\"Update Pool\"\"\"\n    changed = False\n\n    size = module.params['size']\n    vsize = module.params['vsize']\n    ssd_cache = module.params['ssd_cache']\n\n    # Roundup the capacity to mimic Infinibox behaviour\n    if size:\n        physical_capacity = Capacity(size).roundup(6 * 64 * KiB)\n        if pool.get_physical_capacity() != physical_capacity:\n            if not module.check_mode:\n                pool.update_physical_capacity(physical_capacity)\n            changed = True\n\n    if vsize:\n        virtual_capacity = Capacity(vsize).roundup(6 * 64 * KiB)\n        if pool.get_virtual_capacity() != virtual_capacity:\n            if not module.check_mode:\n                pool.update_virtual_capacity(virtual_capacity)\n            changed = True\n\n    if pool.get_ssd_enabled() != ssd_cache:\n        if not module.check_mode:\n            pool.update_ssd_enabled(ssd_cache)\n        changed = True\n\n    module.exit_json(changed=changed)\n\n\n@api_wrapper\ndef delete_pool(module, pool):\n    \"\"\"Delete Pool\"\"\"\n    if not module.check_mode:\n        pool.delete()\n    module.exit_json(changed=True)\n\n\ndef main():\n    argument_spec = infinibox_argument_spec()\n    argument_spec.update(\n        dict(\n            name=dict(required=True),\n            state=dict(default='present', choices=['present', 'absent']),\n            size=dict(),\n            vsize=dict(),\n            ssd_cache=dict(type='bool', default=True)\n        )\n    )\n\n    module = AnsibleModule(argument_spec, supports_check_mode=True)\n\n    if not HAS_INFINISDK:\n        module.fail_json(msg='infinisdk is required for this module')\n    if not HAS_CAPACITY:\n        module.fail_json(msg='The capacity python library is required for this module')\n\n    if module.params['size']:\n        try:\n            Capacity(module.params['size'])\n        except:\n            module.fail_json(msg='size (Physical Capacity) should be defined in MB, GB, TB or PB units')\n\n    if module.params['vsize']:\n        try:\n            Capacity(module.params['vsize'])\n        except:\n            module.fail_json(msg='vsize (Virtual Capacity) should be defined in MB, GB, TB or PB units')\n\n    state = module.params['state']\n    system = get_system(module)\n    pool = get_pool(module, system)\n\n    if state == 'present' and not pool:\n        create_pool(module, system)\n    elif state == 'present' and pool:\n        update_pool(module, system, pool)\n    elif state == 'absent' and pool:\n        delete_pool(module, pool)\n    elif state == 'absent' and not pool:\n        module.exit_json(changed=False)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "infini_pool.py", "id": "fe039f14eb4365e4f419678dbbf58933", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/infinidat/infini_pool.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}