{"author": "keon", "code": "\n Binary search works for a sorted array.\n Note: The code logic is written for an array sorted in\n       increasing order.\n T(n): O(log n)\n\n\n\ndef binary_search(array, query):\n    lo, hi = 0, len(array) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        val = array[mid]\n        if val == query:\n            return mid\n        elif val < query:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return None\n\n\ndef main():\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6]\n    print(array)\n    print(\"-----SEARCH-----\")\n    print(\"found: \", 5, \" in index:\", binary_search(array, 5))\n    print(\"-----SEARCH-----\")\n    print(\"found: \", 6, \" in index:\", binary_search(array, 6))\n    print(\"-----SEARCH-----\")\n    print(\"found: \", 7, \" in index:\", binary_search(array, 7))\n    print(\"-----SEARCH-----\")\n    print(\"found: \", -1, \" in index:\", binary_search(array, -1))\n    print(\"-----SEARCH-----\")\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "     binary search works sorted array     note  the code logic written array sorted          increasing order     t(n)  o(log n)    ", "content": "#\n# Binary search works for a sorted array.\n# Note: The code logic is written for an array sorted in\n#       increasing order.\n# T(n): O(log n)\n#\n\n\ndef binary_search(array, query):\n    lo, hi = 0, len(array) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        val = array[mid]\n        if val == query:\n            return mid\n        elif val < query:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return None\n\n\ndef main():\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6]\n    print(array)\n    print(\"-----SEARCH-----\")\n    print(\"found: \", 5, \" in index:\", binary_search(array, 5))\n    print(\"-----SEARCH-----\")\n    print(\"found: \", 6, \" in index:\", binary_search(array, 6))\n    print(\"-----SEARCH-----\")\n    print(\"found: \", 7, \" in index:\", binary_search(array, 7))\n    print(\"-----SEARCH-----\")\n    print(\"found: \", -1, \" in index:\", binary_search(array, -1))\n    print(\"-----SEARCH-----\")\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "binary_search.py", "id": "585c215bd3e703ce22635d08ab13d6f4", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/search/binary_search.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}