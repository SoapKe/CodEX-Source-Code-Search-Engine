{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport random\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    xpath_text,\n    int_or_none,\n    ExtractorError,\n    sanitized_Request,\n)\n\n\nclass MioMioIE(InfoExtractor):\n    IE_NAME = 'miomio.tv'\n    _VALID_URL = r'https?://(?:www\\.)?miomio\\.tv/watch/cc(?P<id>[0-9]+)'\n    _TESTS = [{\n        \n        'url': 'http://www.miomio.tv/watch/cc88912/',\n        'info_dict': {\n            'id': '88912',\n            'ext': 'flv',\n            'title': '\u3010SKY\u3011\u5b57\u5e55 \u94e0\u6b66\u662d\u548cVS\u5e73\u6210 \u5047\u9762\u9a91\u58eb\u5927\u6218FEAT\u6218\u961f \u9b54\u661f\u5b57\u5e55\u7ec4 \u5b57\u5e55',\n            'duration': 5923,\n        },\n        'skip': 'Unable to load videos',\n    }, {\n        'url': 'http://www.miomio.tv/watch/cc184024/',\n        'info_dict': {\n            'id': '43729',\n            'title': '\u300a\u52a8\u6f2b\u540c\u4eba\u63d2\u753b\u7ed8\u5236\u300b',\n        },\n        'playlist_mincount': 86,\n        'skip': 'Unable to load videos',\n    }, {\n        'url': 'http://www.miomio.tv/watch/cc173113/',\n        'info_dict': {\n            'id': '173113',\n            'title': 'The New Macbook 2015 \u4e0a\u624b\u8bd5\u73a9\u4e0e\u7b80\u8bc4'\n        },\n        'playlist_mincount': 2,\n        'skip': 'Unable to load videos',\n    }, {\n        \n        'url': 'http://www.miomio.tv/watch/cc273997/',\n        'md5': '0b27a4b4495055d826813f8c3a6b2070',\n        'info_dict': {\n            'id': '273997',\n            'ext': 'mp4',\n            'title': '\u30de\u30c4\u30b3\u306e\u77e5\u3089\u306a\u3044\u4e16\u754c\u3010\u5287\u7684\u9032\u5316SP\uff01\u30d3\u30cb\u30fc\u30eb\u5098\uff06\u51b7\u51cd\u98df\u54c12016\u3011 1_2 - 16 05 31',\n        },\n        'skip': 'Unable to load videos',\n    }]\n\n    def _extract_mioplayer(self, webpage, video_id, title, http_headers):\n        xml_config = self._search_regex(\n            r'flashvars=\"type=(?:sina|video)&amp;(.+?)&amp;',\n            webpage, 'xml config')\n\n        \n        self._request_webpage(\n            'http://www.miomio.tv/mioplayer/mioplayerconfigfiles/xml.php?id=%s&r=%s' % (id, random.randint(100, 999)),\n            video_id)\n\n        vid_config_request = sanitized_Request(\n            'http://www.miomio.tv/mioplayer/mioplayerconfigfiles/sina.php?{0}'.format(xml_config),\n            headers=http_headers)\n\n        \n        vid_config = self._download_xml(vid_config_request, video_id)\n\n        if not int_or_none(xpath_text(vid_config, 'timelength')):\n            raise ExtractorError('Unable to load videos!', expected=True)\n\n        entries = []\n        for f in vid_config.findall('./durl'):\n            segment_url = xpath_text(f, 'url', 'video url')\n            if not segment_url:\n                continue\n            order = xpath_text(f, 'order', 'order')\n            segment_id = video_id\n            segment_title = title\n            if order:\n                segment_id += '-%s' % order\n                segment_title += ' part %s' % order\n            entries.append({\n                'id': segment_id,\n                'url': segment_url,\n                'title': segment_title,\n                'duration': int_or_none(xpath_text(f, 'length', 'duration'), 1000),\n                'http_headers': http_headers,\n            })\n\n        return entries\n\n    def _download_chinese_webpage(self, *args, **kwargs):\n        \n        headers = {\n            'Accept-Language': 'zh-TW,en-US;q=0.7,en;q=0.3',\n        }\n        kwargs.setdefault('headers', {}).update(headers)\n        return self._download_webpage(*args, **kwargs)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_chinese_webpage(\n            url, video_id)\n\n        title = self._html_search_meta(\n            'description', webpage, 'title', fatal=True)\n\n        mioplayer_path = self._search_regex(\n            r'src=\"(/mioplayer(?:_h5)?/[^\"]+)\"', webpage, 'ref_path')\n\n        if '_h5' in mioplayer_path:\n            player_url = compat_urlparse.urljoin(url, mioplayer_path)\n            player_webpage = self._download_chinese_webpage(\n                player_url, video_id,\n                note='Downloading player webpage', headers={'Referer': url})\n            entries = self._parse_html5_media_entries(player_url, player_webpage, video_id)\n            http_headers = {'Referer': player_url}\n        else:\n            http_headers = {'Referer': 'http://www.miomio.tv%s' % mioplayer_path}\n            entries = self._extract_mioplayer(webpage, video_id, title, http_headers)\n\n        if len(entries) == 1:\n            segment = entries[0]\n            segment['id'] = video_id\n            segment['title'] = title\n            segment['http_headers'] = http_headers\n            return segment\n\n        return {\n            '_type': 'multi_video',\n            'id': video_id,\n            'entries': entries,\n            'title': title,\n            'http_headers': http_headers,\n        }\n", "comments": "# coding: utf-8\n# \"type=video\" in flashvars\n# new 'h5' player\n# skipping the following page causes lags and eventually connection drop-outs\n# the following xml contains the actual configuration information on the video file(s)\n# Requests with English locales return garbage\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport random\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    xpath_text,\n    int_or_none,\n    ExtractorError,\n    sanitized_Request,\n)\n\n\nclass MioMioIE(InfoExtractor):\n    IE_NAME = 'miomio.tv'\n    _VALID_URL = r'https?://(?:www\\.)?miomio\\.tv/watch/cc(?P<id>[0-9]+)'\n    _TESTS = [{\n        # \"type=video\" in flashvars\n        'url': 'http://www.miomio.tv/watch/cc88912/',\n        'info_dict': {\n            'id': '88912',\n            'ext': 'flv',\n            'title': '\u3010SKY\u3011\u5b57\u5e55 \u94e0\u6b66\u662d\u548cVS\u5e73\u6210 \u5047\u9762\u9a91\u58eb\u5927\u6218FEAT\u6218\u961f \u9b54\u661f\u5b57\u5e55\u7ec4 \u5b57\u5e55',\n            'duration': 5923,\n        },\n        'skip': 'Unable to load videos',\n    }, {\n        'url': 'http://www.miomio.tv/watch/cc184024/',\n        'info_dict': {\n            'id': '43729',\n            'title': '\u300a\u52a8\u6f2b\u540c\u4eba\u63d2\u753b\u7ed8\u5236\u300b',\n        },\n        'playlist_mincount': 86,\n        'skip': 'Unable to load videos',\n    }, {\n        'url': 'http://www.miomio.tv/watch/cc173113/',\n        'info_dict': {\n            'id': '173113',\n            'title': 'The New Macbook 2015 \u4e0a\u624b\u8bd5\u73a9\u4e0e\u7b80\u8bc4'\n        },\n        'playlist_mincount': 2,\n        'skip': 'Unable to load videos',\n    }, {\n        # new 'h5' player\n        'url': 'http://www.miomio.tv/watch/cc273997/',\n        'md5': '0b27a4b4495055d826813f8c3a6b2070',\n        'info_dict': {\n            'id': '273997',\n            'ext': 'mp4',\n            'title': '\u30de\u30c4\u30b3\u306e\u77e5\u3089\u306a\u3044\u4e16\u754c\u3010\u5287\u7684\u9032\u5316SP\uff01\u30d3\u30cb\u30fc\u30eb\u5098\uff06\u51b7\u51cd\u98df\u54c12016\u3011 1_2 - 16 05 31',\n        },\n        'skip': 'Unable to load videos',\n    }]\n\n    def _extract_mioplayer(self, webpage, video_id, title, http_headers):\n        xml_config = self._search_regex(\n            r'flashvars=\"type=(?:sina|video)&amp;(.+?)&amp;',\n            webpage, 'xml config')\n\n        # skipping the following page causes lags and eventually connection drop-outs\n        self._request_webpage(\n            'http://www.miomio.tv/mioplayer/mioplayerconfigfiles/xml.php?id=%s&r=%s' % (id, random.randint(100, 999)),\n            video_id)\n\n        vid_config_request = sanitized_Request(\n            'http://www.miomio.tv/mioplayer/mioplayerconfigfiles/sina.php?{0}'.format(xml_config),\n            headers=http_headers)\n\n        # the following xml contains the actual configuration information on the video file(s)\n        vid_config = self._download_xml(vid_config_request, video_id)\n\n        if not int_or_none(xpath_text(vid_config, 'timelength')):\n            raise ExtractorError('Unable to load videos!', expected=True)\n\n        entries = []\n        for f in vid_config.findall('./durl'):\n            segment_url = xpath_text(f, 'url', 'video url')\n            if not segment_url:\n                continue\n            order = xpath_text(f, 'order', 'order')\n            segment_id = video_id\n            segment_title = title\n            if order:\n                segment_id += '-%s' % order\n                segment_title += ' part %s' % order\n            entries.append({\n                'id': segment_id,\n                'url': segment_url,\n                'title': segment_title,\n                'duration': int_or_none(xpath_text(f, 'length', 'duration'), 1000),\n                'http_headers': http_headers,\n            })\n\n        return entries\n\n    def _download_chinese_webpage(self, *args, **kwargs):\n        # Requests with English locales return garbage\n        headers = {\n            'Accept-Language': 'zh-TW,en-US;q=0.7,en;q=0.3',\n        }\n        kwargs.setdefault('headers', {}).update(headers)\n        return self._download_webpage(*args, **kwargs)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_chinese_webpage(\n            url, video_id)\n\n        title = self._html_search_meta(\n            'description', webpage, 'title', fatal=True)\n\n        mioplayer_path = self._search_regex(\n            r'src=\"(/mioplayer(?:_h5)?/[^\"]+)\"', webpage, 'ref_path')\n\n        if '_h5' in mioplayer_path:\n            player_url = compat_urlparse.urljoin(url, mioplayer_path)\n            player_webpage = self._download_chinese_webpage(\n                player_url, video_id,\n                note='Downloading player webpage', headers={'Referer': url})\n            entries = self._parse_html5_media_entries(player_url, player_webpage, video_id)\n            http_headers = {'Referer': player_url}\n        else:\n            http_headers = {'Referer': 'http://www.miomio.tv%s' % mioplayer_path}\n            entries = self._extract_mioplayer(webpage, video_id, title, http_headers)\n\n        if len(entries) == 1:\n            segment = entries[0]\n            segment['id'] = video_id\n            segment['title'] = title\n            segment['http_headers'] = http_headers\n            return segment\n\n        return {\n            '_type': 'multi_video',\n            'id': video_id,\n            'entries': entries,\n            'title': title,\n            'http_headers': http_headers,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "miomio.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/miomio.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}