{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom . import common\nfrom odoo.exceptions import except_orm\n\n\nclass TestWarehouse(common.TestMrpCommon):\n\n    def test_manufacturing_route(self):\n        warehouse_1_stock_manager = self.warehouse_1.sudo(self.user_stock_manager)\n        manu_rule = self.env['procurement.rule'].search([\n            ('action', '=', 'manufacture'),\n            ('warehouse_id', '=', self.warehouse_1.id)])\n        self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n        manu_route = manu_rule.route_id\n        self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n        warehouse_1_stock_manager.write({\n            'manufacture_to_resupply': False\n        })\n        self.assertFalse(self.warehouse_1.manufacture_pull_id)\n        self.assertFalse(self.warehouse_1.manu_type_id.active)\n        self.assertNotIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n        warehouse_1_stock_manager.write({\n            'manufacture_to_resupply': True\n        })\n        manu_rule = self.env['procurement.rule'].search([\n            ('action', '=', 'manufacture'),\n            ('warehouse_id', '=', self.warehouse_1.id)])\n        self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n        self.assertTrue(self.warehouse_1.manu_type_id.active)\n        self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n\n    def test_manufacturing_scrap(self):\n        \n\n        \n        (self.product_4 | self.product_2).write({\n            'tracking': 'lot',\n        })\n\n        \n        self.bom_3.bom_line_ids.filtered(lambda x: x.product_id == self.product_5).unlink()\n\n        \n        lot_product_4 = self.env['stock.production.lot'].create({\n            'name': '0000000000001',\n            'product_id': self.product_4.id,\n        })\n        lot_product_2 = self.env['stock.production.lot'].create({\n            'name': '0000000000002',\n            'product_id': self.product_2.id,\n        })\n\n        stock_inv_product_4 = self.env['stock.inventory'].create({\n            'name': 'Stock Inventory for Stick',\n            'filter': 'product',\n            'product_id': self.product_4.id,\n            'line_ids': [\n                (0, 0, {'product_id': self.product_4.id, 'product_uom_id': self.product_4.uom_id.id, 'product_qty': 8, 'prod_lot_id': lot_product_4.id, 'location_id': self.ref('stock.stock_location_14')}),\n            ]})\n\n        stock_inv_product_2 = self.env['stock.inventory'].create({\n            'name': 'Stock Inventory for Stone Tools',\n            'filter': 'product',\n            'product_id': self.product_2.id,\n            'line_ids': [\n                (0, 0, {'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 12, 'prod_lot_id': lot_product_2.id, 'location_id': self.ref('stock.stock_location_14')})\n            ]})\n        (stock_inv_product_4 | stock_inv_product_2).action_start()\n        (stock_inv_product_4 | stock_inv_product_2).action_done()\n\n        \n        production_3 = self.env['mrp.production'].create({\n            'name': 'MO-Test003',\n            'product_id': self.product_6.id,\n            'product_qty': 12,\n            'bom_id': self.bom_3.id,\n            'product_uom_id': self.product_6.uom_id.id,\n        })\n        production_3.action_assign()\n\n        \n        self.assertEqual(production_3.availability, 'assigned', \"Production order's availability should be Available.\")\n\n        location_id = production_3.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and production_3.location_src_id.id or production_3.location_dest_id.id,\n\n        .\n        scrap_id = self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})\n        with self.assertRaises(except_orm):\n            scrap_id.do_scrap()\n\n        \n        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})\n\n        \n        \n        \n#        scrap_move = production_3.move_raw_ids.filtered(lambda x: x.product_id == self.product_2 and x.scrapped)\n#        self.assertTrue(scrap_move, \"There are no any scrap move created for production order.\")\n", "comments": "                testing scrap consumed material                     coding  utf 8        part odoo  see license file full copyright licensing details     update demo products    update bill of material remove product phantom bom     create inventory adjustment for stick stone tools lot    create manufacturing order     check manufacturing order availability     scrap product wood without lot check assert raise       scrap product wood lot    check scrap move created production order    todo  check scrap objects link           scrap move   production 3 move raw ids filtered(lambda x  x product id    self product 2 x scrapped)           self asserttrue(scrap move   there scrap move created production order  ) ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom . import common\nfrom odoo.exceptions import except_orm\n\n\nclass TestWarehouse(common.TestMrpCommon):\n\n    def test_manufacturing_route(self):\n        warehouse_1_stock_manager = self.warehouse_1.sudo(self.user_stock_manager)\n        manu_rule = self.env['procurement.rule'].search([\n            ('action', '=', 'manufacture'),\n            ('warehouse_id', '=', self.warehouse_1.id)])\n        self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n        manu_route = manu_rule.route_id\n        self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n        warehouse_1_stock_manager.write({\n            'manufacture_to_resupply': False\n        })\n        self.assertFalse(self.warehouse_1.manufacture_pull_id)\n        self.assertFalse(self.warehouse_1.manu_type_id.active)\n        self.assertNotIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n        warehouse_1_stock_manager.write({\n            'manufacture_to_resupply': True\n        })\n        manu_rule = self.env['procurement.rule'].search([\n            ('action', '=', 'manufacture'),\n            ('warehouse_id', '=', self.warehouse_1.id)])\n        self.assertEqual(self.warehouse_1.manufacture_pull_id, manu_rule)\n        self.assertTrue(self.warehouse_1.manu_type_id.active)\n        self.assertIn(manu_route, warehouse_1_stock_manager._get_all_routes())\n\n    def test_manufacturing_scrap(self):\n        \"\"\"\n            Testing to do a scrap of consumed material.\n        \"\"\"\n\n        # Update demo products\n        (self.product_4 | self.product_2).write({\n            'tracking': 'lot',\n        })\n\n        # Update Bill Of Material to remove product with phantom bom.\n        self.bom_3.bom_line_ids.filtered(lambda x: x.product_id == self.product_5).unlink()\n\n        # Create Inventory Adjustment For Stick and Stone Tools with lot.\n        lot_product_4 = self.env['stock.production.lot'].create({\n            'name': '0000000000001',\n            'product_id': self.product_4.id,\n        })\n        lot_product_2 = self.env['stock.production.lot'].create({\n            'name': '0000000000002',\n            'product_id': self.product_2.id,\n        })\n\n        stock_inv_product_4 = self.env['stock.inventory'].create({\n            'name': 'Stock Inventory for Stick',\n            'filter': 'product',\n            'product_id': self.product_4.id,\n            'line_ids': [\n                (0, 0, {'product_id': self.product_4.id, 'product_uom_id': self.product_4.uom_id.id, 'product_qty': 8, 'prod_lot_id': lot_product_4.id, 'location_id': self.ref('stock.stock_location_14')}),\n            ]})\n\n        stock_inv_product_2 = self.env['stock.inventory'].create({\n            'name': 'Stock Inventory for Stone Tools',\n            'filter': 'product',\n            'product_id': self.product_2.id,\n            'line_ids': [\n                (0, 0, {'product_id': self.product_2.id, 'product_uom_id': self.product_2.uom_id.id, 'product_qty': 12, 'prod_lot_id': lot_product_2.id, 'location_id': self.ref('stock.stock_location_14')})\n            ]})\n        (stock_inv_product_4 | stock_inv_product_2).action_start()\n        (stock_inv_product_4 | stock_inv_product_2).action_done()\n\n        #Create Manufacturing order.\n        production_3 = self.env['mrp.production'].create({\n            'name': 'MO-Test003',\n            'product_id': self.product_6.id,\n            'product_qty': 12,\n            'bom_id': self.bom_3.id,\n            'product_uom_id': self.product_6.uom_id.id,\n        })\n        production_3.action_assign()\n\n        # Check Manufacturing order's availability.\n        self.assertEqual(production_3.availability, 'assigned', \"Production order's availability should be Available.\")\n\n        location_id = production_3.move_raw_ids.filtered(lambda x: x.state not in ('done', 'cancel')) and production_3.location_src_id.id or production_3.location_dest_id.id,\n\n        # Scrap Product Wood without lot to check assert raise ?.\n        scrap_id = self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'production_id': production_3.id})\n        with self.assertRaises(except_orm):\n            scrap_id.do_scrap()\n\n        # Scrap Product Wood with lot.\n        self.env['stock.scrap'].with_context(active_model='mrp.production', active_id=production_3.id).create({'product_id': self.product_2.id, 'scrap_qty': 1.0, 'product_uom_id': self.product_2.uom_id.id, 'location_id': location_id, 'lot_id': lot_product_2.id, 'production_id': production_3.id})\n\n        #Check scrap move is created for this production order.\n        #TODO: should check with scrap objects link in between\n        \n#        scrap_move = production_3.move_raw_ids.filtered(lambda x: x.product_id == self.product_2 and x.scrapped)\n#        self.assertTrue(scrap_move, \"There are no any scrap move created for production order.\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_stock.py", "id": "45e9356a4aaf780534ec3352c698aec8", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp/tests/test_stock.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}