{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright: (c) 2017, F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_device_httpd import Parameters\n    from library.bigip_device_httpd import ModuleManager\n    from library.bigip_device_httpd import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_device_httpd import Parameters\n        from ansible.modules.network.f5.bigip_device_httpd import ModuleManager\n        from ansible.modules.network.f5.bigip_device_httpd import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            auth_name='BIG-IP',\n            auth_pam_idle_timeout=1200,\n            auth_pam_validate_ip='on'\n        )\n\n        p = Parameters(params=args)\n        assert p.auth_name == 'BIG-IP'\n        assert p.auth_pam_idle_timeout == 1200\n        assert p.auth_pam_validate_ip == 'on'\n\n    def test_api_parameters(self):\n        args = load_fixture('load_sys_httpd.json')\n        p = Parameters(params=args)\n        assert p.auth_name == 'BIG-IP'\n        assert p.auth_pam_idle_timeout == 1200\n\n\nclass TestModuleManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n        self.patcher1 = patch('time.sleep')\n        self.patcher1.start()\n\n    def tearDown(self):\n        self.patcher1.stop()\n\n    def test_update(self, *args):\n        set_module_args(\n            dict(\n                auth_name='foo',\n                auth_pam_idle_timeout='1000',\n                auth_pam_validate_ip='off',\n                auth_pam_dashboard_timeout='on',\n                fast_cgi_timeout=200,\n                hostname_lookup='on',\n                log_level='error',\n                max_clients='20',\n                redirect_http_to_https='yes',\n                ssl_port=8443,\n                server='localhost',\n                user='admin',\n                password='password'\n            )\n        )\n\n        current = Parameters(params=load_fixture('load_sys_httpd.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n", "comments": "      coding  utf 8           copyright  (c) 2017  f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright: (c) 2017, F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_device_httpd import Parameters\n    from library.bigip_device_httpd import ModuleManager\n    from library.bigip_device_httpd import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_device_httpd import Parameters\n        from ansible.modules.network.f5.bigip_device_httpd import ModuleManager\n        from ansible.modules.network.f5.bigip_device_httpd import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            auth_name='BIG-IP',\n            auth_pam_idle_timeout=1200,\n            auth_pam_validate_ip='on'\n        )\n\n        p = Parameters(params=args)\n        assert p.auth_name == 'BIG-IP'\n        assert p.auth_pam_idle_timeout == 1200\n        assert p.auth_pam_validate_ip == 'on'\n\n    def test_api_parameters(self):\n        args = load_fixture('load_sys_httpd.json')\n        p = Parameters(params=args)\n        assert p.auth_name == 'BIG-IP'\n        assert p.auth_pam_idle_timeout == 1200\n\n\nclass TestModuleManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n        self.patcher1 = patch('time.sleep')\n        self.patcher1.start()\n\n    def tearDown(self):\n        self.patcher1.stop()\n\n    def test_update(self, *args):\n        set_module_args(\n            dict(\n                auth_name='foo',\n                auth_pam_idle_timeout='1000',\n                auth_pam_validate_ip='off',\n                auth_pam_dashboard_timeout='on',\n                fast_cgi_timeout=200,\n                hostname_lookup='on',\n                log_level='error',\n                max_clients='20',\n                redirect_http_to_https='yes',\n                ssl_port=8443,\n                server='localhost',\n                user='admin',\n                password='password'\n            )\n        )\n\n        current = Parameters(params=load_fixture('load_sys_httpd.json'))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_device_httpd.py", "id": "3d0a328a1a82994d82277bed07d0234e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_device_httpd.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}