{"author": "tldr-pages", "code": "\n\n\n\n\n\nimport os\nimport sys\nimport glob\nimport re\nimport markdown\nimport argparse\n\nfrom weasyprint import HTML\n\ndef main(loc, colorscheme):\n\n    oslist = []\n    allmd = []\n    group = []\n    ap = []\n\n    \n    if not os.path.isdir(loc):\n        print(\"Invalid directory. Please try again!\", file = sys.stderr)\n        sys.exit(1)\n\n    \n    for os_dir in os.listdir(loc):\n        oslist.append(os_dir)\n\n    oslist.sort()\n\n    \n    header = \"<html><head><link rel=stylesheet type=text/css href=\" + colorscheme + \".css></head><body>\\n\"\n    footer = \"</body></html>\"\n    title_content = \"<h1 class=titlemain>tldr pages</h1><h4 class=titlesub>Simplified and community driven man pages</h4></body></html>\"\n\n    \n    with open(\"title.html\", 'w') as f:\n        f.write(header + title_content)\n\n    group.append(HTML('title.html').render())\n\n    for operating_sys in oslist:\n\n        i = 1\n\n        \n        dir_title = \"<h2 class=titledir>\" + operating_sys.capitalize() + \"</h2></body></html>\"\n\n        \n        with open(\"dir_title.html\", 'w') as os_html:\n            os_html.write(header + dir_title)\n        \n        group.append(HTML('dir_title.html').render())\n\n        \n        for temp in glob.glob(os.path.join(loc, operating_sys, '*.md')):\n            allmd.append(temp)\n\n        \n        allmd.sort()\n\n        \n        for md in allmd:\n\n            with open(md, \"r\") as inp:\n                text = inp.readlines()\n\n            with open(\"htmlout.html\", \"w\") as out:\n                out.write(header)\n\n                for line in text:\n                    if re.match(r'^>', line):\n                        line = line[:0] + '####' + line[1:]\n                    html = markdown.markdown(line)\n                    out.write(html)\n                out.write(footer)\n\n            group.append(HTML('htmlout.html').render())\n            print(\"Rendered page {} of the directory {}\".format(str(i), operating_sys))\n            i += 1\n        \n        allmd.clear()\n\n    \n    for doc in group:\n        for p in doc.pages:\n            ap.append(p)\n\n    \n    group[2].copy(ap).write_pdf('tldr.pdf')\n\n    if os.path.exists(\"tldr.pdf\"):\n        print(\"\\nCreated tldr.pdf in the current directory!\\n\")\n\n    \n    try:\n        os.remove(\"htmlout.html\")\n        os.remove(\"title.html\")\n        os.remove(\"dir_title.html\")\n    except OSError:\n        print(\"Error removing temporary file(s)\")\n\n\nif __name__ == '__main__':\n\n    \n    colorscheme = \"basic\"\n\n    \n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"dir_path\", help = \"Path to tldr 'pages' directory\")\n    parser.add_argument(\"-c\", choices=[\"solarized-light\", \"solarized-dark\"], help=\"Color scheme of the PDF\")\n    args = parser.parse_args()\n    \n    loc = args.dir_path\n    if args.c == \"solarized-light\" or args.c == \"solarized-dark\":\n        colorscheme = args.c\n        \n    main(loc, colorscheme)", "comments": "   usr bin env python3   a python script generate single pdf document tldr pages  it works generating    intermediate html files existing md files using python markdown  applying desired formating    css  finally rendering pdf  there latex dependency generating pdf    checking correctness path   writing names directories inside  pages  list   required strings create intermediate html files   creating title page   required string create directory title pages   creating directory title page current directory   creating list md files current directory   sorting filenames directory  maintain order pdf   conversion md html         line 1     merging documents single pdf   writing pdf disk  preserving metadata first tldr page   removing unnecessary intermediate files   unless specified otherwise user  default colorscheme   parsing arguments ", "content": "#!/usr/bin/env python3\n\n#A Python script to generate a single PDF document with all the tldr pages. It works by generating \n#intermediate HTML files from existing md files using Python-markdown, applying desired formating \n#through CSS, and finally rendering them as PDF. There is no LaTeX dependency for generating the PDF.\n\nimport os\nimport sys\nimport glob\nimport re\nimport markdown\nimport argparse\n\nfrom weasyprint import HTML\n\ndef main(loc, colorscheme):\n\n    oslist = []\n    allmd = []\n    group = []\n    ap = []\n\n    #Checking correctness of path\n    if not os.path.isdir(loc):\n        print(\"Invalid directory. Please try again!\", file = sys.stderr)\n        sys.exit(1)\n\n    #Writing names of all directories inside 'pages' to a list\n    for os_dir in os.listdir(loc):\n        oslist.append(os_dir)\n\n    oslist.sort()\n\n    #Required strings to create intermediate HTML files\n    header = \"<html><head><link rel=stylesheet type=text/css href=\" + colorscheme + \".css></head><body>\\n\"\n    footer = \"</body></html>\"\n    title_content = \"<h1 class=titlemain>tldr pages</h1><h4 class=titlesub>Simplified and community driven man pages</h4></body></html>\"\n\n    #Creating title page\n    with open(\"title.html\", 'w') as f:\n        f.write(header + title_content)\n\n    group.append(HTML('title.html').render())\n\n    for operating_sys in oslist:\n\n        i = 1\n\n        #Required string to create directory title pages\n        dir_title = \"<h2 class=titledir>\" + operating_sys.capitalize() + \"</h2></body></html>\"\n\n        #Creating directory title page for current directory\n        with open(\"dir_title.html\", 'w') as os_html:\n            os_html.write(header + dir_title)\n        \n        group.append(HTML('dir_title.html').render())\n\n        #Creating a list of all md files in the current directory\n        for temp in glob.glob(os.path.join(loc, operating_sys, '*.md')):\n            allmd.append(temp)\n\n        #Sorting all filenames in the directory, to maintain the order of the PDF\n        allmd.sort()\n\n        #Conversion of md to HTML\n        for md in allmd:\n\n            with open(md, \"r\") as inp:\n                text = inp.readlines()\n\n            with open(\"htmlout.html\", \"w\") as out:\n                out.write(header)\n\n                for line in text:\n                    if re.match(r'^>', line):\n                        line = line[:0] + '####' + line[1:]\n                    html = markdown.markdown(line)\n                    out.write(html)\n                out.write(footer)\n\n            group.append(HTML('htmlout.html').render())\n            print(\"Rendered page {} of the directory {}\".format(str(i), operating_sys))\n            i += 1\n        \n        allmd.clear()\n\n    #Merging all the documents into a single PDF\n    for doc in group:\n        for p in doc.pages:\n            ap.append(p)\n\n    #Writing the PDF to disk, preserving metadata of first tldr page\n    group[2].copy(ap).write_pdf('tldr.pdf')\n\n    if os.path.exists(\"tldr.pdf\"):\n        print(\"\\nCreated tldr.pdf in the current directory!\\n\")\n\n    #Removing unnecessary intermediate files\n    try:\n        os.remove(\"htmlout.html\")\n        os.remove(\"title.html\")\n        os.remove(\"dir_title.html\")\n    except OSError:\n        print(\"Error removing temporary file(s)\")\n\n\nif __name__ == '__main__':\n\n    #Unless specified otherwise by the user, this is the default colorscheme\n    colorscheme = \"basic\"\n\n    #Parsing the arguments\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"dir_path\", help = \"Path to tldr 'pages' directory\")\n    parser.add_argument(\"-c\", choices=[\"solarized-light\", \"solarized-dark\"], help=\"Color scheme of the PDF\")\n    args = parser.parse_args()\n    \n    loc = args.dir_path\n    if args.c == \"solarized-light\" or args.c == \"solarized-dark\":\n        colorscheme = args.c\n        \n    main(loc, colorscheme)", "description": ":books: Simplified and community-driven man pages", "file_name": "render.py", "id": "dc156dba46ce49cba87f52e8f04fff42", "language": "Python", "project_name": "tldr", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tldr-pages-tldr/tldr-pages-tldr-eff392c/scripts/pdf/render.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:08Z", "url": "https://github.com/tldr-pages/tldr", "wiki": true}