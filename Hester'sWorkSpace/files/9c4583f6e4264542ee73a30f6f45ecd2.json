{"author": "facebookresearch", "code": " Copyright (c) 2017-present, Facebook, Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport logging\nimport numpy as np\nimport os\nimport shutil\nimport uuid\n\nfrom core.config import cfg\nfrom datasets.dataset_catalog import DATASETS\nfrom datasets.dataset_catalog import DEVKIT_DIR\nfrom datasets.voc_eval import voc_eval\nfrom utils.io import save_object\n\nlogger = logging.getLogger(__name__)\n\n\ndef evaluate_boxes(\n    json_dataset,\n    all_boxes,\n    output_dir,\n    use_salt=True,\n    cleanup=True,\n    use_matlab=False\n):\n    salt = '_{}'.format(str(uuid.uuid4())) if use_salt else ''\n    filenames = _write_voc_results_files(json_dataset, all_boxes, salt)\n    _do_python_eval(json_dataset, salt, output_dir)\n    if use_matlab:\n        _do_matlab_eval(json_dataset, salt, output_dir)\n    if cleanup:\n        for filename in filenames:\n            shutil.copy(filename, output_dir)\n            os.remove(filename)\n    return None\n\n\ndef _write_voc_results_files(json_dataset, all_boxes, salt):\n    filenames = []\n    image_set_path = voc_info(json_dataset)['image_set_path']\n    assert os.path.exists(image_set_path), \\\n        'Image set path does not exist: {}'.format(image_set_path)\n    with open(image_set_path, 'r') as f:\n        image_index = [x.strip() for x in f.readlines()]\n     Sanity check that order of images in json dataset matches order in the\n     image set\n    roidb = json_dataset.get_roidb()\n    for i, entry in enumerate(roidb):\n        index = os.path.splitext(os.path.split(entry['image'])[1])[0]\n        assert index == image_index[i]\n    for cls_ind, cls in enumerate(json_dataset.classes):\n        if cls == '__background__':\n            continue\n        logger.info('Writing VOC results for: {}'.format(cls))\n        filename = _get_voc_results_file_template(json_dataset,\n                                                  salt).format(cls)\n        filenames.append(filename)\n        assert len(all_boxes[cls_ind]) == len(image_index)\n        with open(filename, 'wt') as f:\n            for im_ind, index in enumerate(image_index):\n                dets = all_boxes[cls_ind][im_ind]\n                if type(dets) == list:\n                    assert len(dets) == 0, \\\n                        'dets should be numpy.ndarray or empty list'\n                    continue\n                 the VOCdevkit expects 1-based indices\n                for k in range(dets.shape[0]):\n                    f.write('{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'.\n                            format(index, dets[k, -1],\n                                   dets[k, 0] + 1, dets[k, 1] + 1,\n                                   dets[k, 2] + 1, dets[k, 3] + 1))\n    return filenames\n\n\ndef _get_voc_results_file_template(json_dataset, salt):\n    info = voc_info(json_dataset)\n    year = info['year']\n    image_set = info['image_set']\n    devkit_path = info['devkit_path']\n     VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt\n    filename = 'comp4' + salt + '_det_' + image_set + '_{:s}.txt'\n    return os.path.join(devkit_path, 'results', 'VOC' + year, 'Main', filename)\n\n\ndef _do_python_eval(json_dataset, salt, output_dir='output'):\n    info = voc_info(json_dataset)\n    year = info['year']\n    anno_path = info['anno_path']\n    image_set_path = info['image_set_path']\n    devkit_path = info['devkit_path']\n    cachedir = os.path.join(devkit_path, 'annotations_cache')\n    aps = []\n     The PASCAL VOC metric changed in 2010\n    use_07_metric = True if int(year) < 2010 else False\n    logger.info('VOC07 metric? ' + ('Yes' if use_07_metric else 'No'))\n    if not os.path.isdir(output_dir):\n        os.mkdir(output_dir)\n    for _, cls in enumerate(json_dataset.classes):\n        if cls == '__background__':\n            continue\n        filename = _get_voc_results_file_template(\n            json_dataset, salt).format(cls)\n        rec, prec, ap = voc_eval(\n            filename, anno_path, image_set_path, cls, cachedir, ovthresh=0.5,\n            use_07_metric=use_07_metric)\n        aps += [ap]\n        logger.info('AP for {} = {:.4f}'.format(cls, ap))\n        res_file = os.path.join(output_dir, cls + '_pr.pkl')\n        save_object({'rec': rec, 'prec': prec, 'ap': ap}, res_file)\n    logger.info('Mean AP = {:.4f}'.format(np.mean(aps)))\n    logger.info('~~~~~~~~')\n    logger.info('Results:')\n    for ap in aps:\n        logger.info('{:.3f}'.format(ap))\n    logger.info('{:.3f}'.format(np.mean(aps)))\n    logger.info('~~~~~~~~')\n    logger.info('')\n    logger.info('----------------------------------------------------------')\n    logger.info('Results computed with the **unofficial** Python eval code.')\n    logger.info('Results should be very close to the official MATLAB code.')\n    logger.info('Use `./tools/reval.py --matlab ...` for your paper.')\n    logger.info('-- Thanks, The Management')\n    logger.info('----------------------------------------------------------')\n\n\ndef _do_matlab_eval(json_dataset, salt, output_dir='output'):\n    import subprocess\n    logger.info('-----------------------------------------------------')\n    logger.info('Computing results with the official MATLAB eval code.')\n    logger.info('-----------------------------------------------------')\n    info = voc_info(json_dataset)\n    path = os.path.join(\n        cfg.ROOT_DIR, 'lib', 'datasets', 'VOCdevkit-matlab-wrapper')\n    cmd = 'cd {} && '.format(path)\n    cmd += '{:s} -nodisplay -nodesktop '.format(cfg.MATLAB)\n    cmd += '-r \"dbstop if error; '\n    cmd += 'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"' \\\n       .format(info['devkit_path'], 'comp4' + salt, info['image_set'],\n               output_dir)\n    logger.info('Running:\\n{}'.format(cmd))\n    subprocess.call(cmd, shell=True)\n\n\ndef voc_info(json_dataset):\n    year = json_dataset.name[4:8]\n    image_set = json_dataset.name[9:]\n    devkit_path = DATASETS[json_dataset.name][DEVKIT_DIR]\n    assert os.path.exists(devkit_path), \\\n        'Devkit directory {} not found'.format(devkit_path)\n    anno_path = os.path.join(\n        devkit_path, 'VOC' + year, 'Annotations', '{:s}.xml')\n    image_set_path = os.path.join(\n        devkit_path, 'VOC' + year, 'ImageSets', 'Main', image_set + '.txt')\n    return dict(\n        year=year,\n        image_set=image_set,\n        devkit_path=devkit_path,\n        anno_path=anno_path,\n        image_set_path=image_set_path)\n", "comments": "   pascal voc dataset evaluation interface        copyright (c) 2017 present  facebook  inc        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                     sanity check order images json dataset matches order    image set    vocdevkit expects 1 based indices    vocdevkit results voc2007 main  comp id  det test aeroplane txt    the pascal voc metric changed 2010 ", "content": "# Copyright (c) 2017-present, Facebook, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##############################################################################\n\n\"\"\"PASCAL VOC dataset evaluation interface.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport logging\nimport numpy as np\nimport os\nimport shutil\nimport uuid\n\nfrom core.config import cfg\nfrom datasets.dataset_catalog import DATASETS\nfrom datasets.dataset_catalog import DEVKIT_DIR\nfrom datasets.voc_eval import voc_eval\nfrom utils.io import save_object\n\nlogger = logging.getLogger(__name__)\n\n\ndef evaluate_boxes(\n    json_dataset,\n    all_boxes,\n    output_dir,\n    use_salt=True,\n    cleanup=True,\n    use_matlab=False\n):\n    salt = '_{}'.format(str(uuid.uuid4())) if use_salt else ''\n    filenames = _write_voc_results_files(json_dataset, all_boxes, salt)\n    _do_python_eval(json_dataset, salt, output_dir)\n    if use_matlab:\n        _do_matlab_eval(json_dataset, salt, output_dir)\n    if cleanup:\n        for filename in filenames:\n            shutil.copy(filename, output_dir)\n            os.remove(filename)\n    return None\n\n\ndef _write_voc_results_files(json_dataset, all_boxes, salt):\n    filenames = []\n    image_set_path = voc_info(json_dataset)['image_set_path']\n    assert os.path.exists(image_set_path), \\\n        'Image set path does not exist: {}'.format(image_set_path)\n    with open(image_set_path, 'r') as f:\n        image_index = [x.strip() for x in f.readlines()]\n    # Sanity check that order of images in json dataset matches order in the\n    # image set\n    roidb = json_dataset.get_roidb()\n    for i, entry in enumerate(roidb):\n        index = os.path.splitext(os.path.split(entry['image'])[1])[0]\n        assert index == image_index[i]\n    for cls_ind, cls in enumerate(json_dataset.classes):\n        if cls == '__background__':\n            continue\n        logger.info('Writing VOC results for: {}'.format(cls))\n        filename = _get_voc_results_file_template(json_dataset,\n                                                  salt).format(cls)\n        filenames.append(filename)\n        assert len(all_boxes[cls_ind]) == len(image_index)\n        with open(filename, 'wt') as f:\n            for im_ind, index in enumerate(image_index):\n                dets = all_boxes[cls_ind][im_ind]\n                if type(dets) == list:\n                    assert len(dets) == 0, \\\n                        'dets should be numpy.ndarray or empty list'\n                    continue\n                # the VOCdevkit expects 1-based indices\n                for k in range(dets.shape[0]):\n                    f.write('{:s} {:.3f} {:.1f} {:.1f} {:.1f} {:.1f}\\n'.\n                            format(index, dets[k, -1],\n                                   dets[k, 0] + 1, dets[k, 1] + 1,\n                                   dets[k, 2] + 1, dets[k, 3] + 1))\n    return filenames\n\n\ndef _get_voc_results_file_template(json_dataset, salt):\n    info = voc_info(json_dataset)\n    year = info['year']\n    image_set = info['image_set']\n    devkit_path = info['devkit_path']\n    # VOCdevkit/results/VOC2007/Main/<comp_id>_det_test_aeroplane.txt\n    filename = 'comp4' + salt + '_det_' + image_set + '_{:s}.txt'\n    return os.path.join(devkit_path, 'results', 'VOC' + year, 'Main', filename)\n\n\ndef _do_python_eval(json_dataset, salt, output_dir='output'):\n    info = voc_info(json_dataset)\n    year = info['year']\n    anno_path = info['anno_path']\n    image_set_path = info['image_set_path']\n    devkit_path = info['devkit_path']\n    cachedir = os.path.join(devkit_path, 'annotations_cache')\n    aps = []\n    # The PASCAL VOC metric changed in 2010\n    use_07_metric = True if int(year) < 2010 else False\n    logger.info('VOC07 metric? ' + ('Yes' if use_07_metric else 'No'))\n    if not os.path.isdir(output_dir):\n        os.mkdir(output_dir)\n    for _, cls in enumerate(json_dataset.classes):\n        if cls == '__background__':\n            continue\n        filename = _get_voc_results_file_template(\n            json_dataset, salt).format(cls)\n        rec, prec, ap = voc_eval(\n            filename, anno_path, image_set_path, cls, cachedir, ovthresh=0.5,\n            use_07_metric=use_07_metric)\n        aps += [ap]\n        logger.info('AP for {} = {:.4f}'.format(cls, ap))\n        res_file = os.path.join(output_dir, cls + '_pr.pkl')\n        save_object({'rec': rec, 'prec': prec, 'ap': ap}, res_file)\n    logger.info('Mean AP = {:.4f}'.format(np.mean(aps)))\n    logger.info('~~~~~~~~')\n    logger.info('Results:')\n    for ap in aps:\n        logger.info('{:.3f}'.format(ap))\n    logger.info('{:.3f}'.format(np.mean(aps)))\n    logger.info('~~~~~~~~')\n    logger.info('')\n    logger.info('----------------------------------------------------------')\n    logger.info('Results computed with the **unofficial** Python eval code.')\n    logger.info('Results should be very close to the official MATLAB code.')\n    logger.info('Use `./tools/reval.py --matlab ...` for your paper.')\n    logger.info('-- Thanks, The Management')\n    logger.info('----------------------------------------------------------')\n\n\ndef _do_matlab_eval(json_dataset, salt, output_dir='output'):\n    import subprocess\n    logger.info('-----------------------------------------------------')\n    logger.info('Computing results with the official MATLAB eval code.')\n    logger.info('-----------------------------------------------------')\n    info = voc_info(json_dataset)\n    path = os.path.join(\n        cfg.ROOT_DIR, 'lib', 'datasets', 'VOCdevkit-matlab-wrapper')\n    cmd = 'cd {} && '.format(path)\n    cmd += '{:s} -nodisplay -nodesktop '.format(cfg.MATLAB)\n    cmd += '-r \"dbstop if error; '\n    cmd += 'voc_eval(\\'{:s}\\',\\'{:s}\\',\\'{:s}\\',\\'{:s}\\'); quit;\"' \\\n       .format(info['devkit_path'], 'comp4' + salt, info['image_set'],\n               output_dir)\n    logger.info('Running:\\n{}'.format(cmd))\n    subprocess.call(cmd, shell=True)\n\n\ndef voc_info(json_dataset):\n    year = json_dataset.name[4:8]\n    image_set = json_dataset.name[9:]\n    devkit_path = DATASETS[json_dataset.name][DEVKIT_DIR]\n    assert os.path.exists(devkit_path), \\\n        'Devkit directory {} not found'.format(devkit_path)\n    anno_path = os.path.join(\n        devkit_path, 'VOC' + year, 'Annotations', '{:s}.xml')\n    image_set_path = os.path.join(\n        devkit_path, 'VOC' + year, 'ImageSets', 'Main', image_set + '.txt')\n    return dict(\n        year=year,\n        image_set=image_set,\n        devkit_path=devkit_path,\n        anno_path=anno_path,\n        image_set_path=image_set_path)\n", "description": "FAIR's research platform for object detection research, implementing popular algorithms like Mask R-CNN and RetinaNet.", "file_name": "voc_dataset_evaluator.py", "id": "9c4583f6e4264542ee73a30f6f45ecd2", "language": "Python", "project_name": "Detectron", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/facebookresearch-Detectron/facebookresearch-Detectron-a026d77/lib/datasets/voc_dataset_evaluator.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:00:46Z", "url": "https://github.com/facebookresearch/Detectron", "wiki": false}