{"author": "getredash", "code": "import datetime\nimport json\nfrom unittest import TestCase\nfrom pytz import utc\nfrom redash.query_runner.mongodb import parse_query_json, parse_results, _get_column_by_name\n\nfrom redash.utils import parse_human_time\n\n\nclass TestParseQueryJson(TestCase):\n    def test_ignores_non_isodate_fields(self):\n        query = {\n            'test': 1,\n            'test_list': ['a', 'b', 'c'],\n            'test_dict': {\n                'a': 1,\n                'b': 2\n            }\n        }\n\n        query_data = parse_query_json(json.dumps(query))\n        self.assertDictEqual(query_data, query)\n\n    def test_parses_isodate_fields(self):\n        query = {\n            'test': 1,\n            'test_list': ['a', 'b', 'c'],\n            'test_dict': {\n                'a': 1,\n                'b': 2\n            },\n            'testIsoDate': \"ISODate(\\\"2014-10-03T00:00\\\")\"\n        }\n\n        query_data = parse_query_json(json.dumps(query))\n\n        self.assertEqual(query_data['testIsoDate'], datetime.datetime(2014, 10, 3, 0, 0))\n\n    def test_parses_isodate_in_nested_fields(self):\n        query = {\n            'test': 1,\n            'test_list': ['a', 'b', 'c'],\n            'test_dict': {\n                'a': 1,\n                'b': {\n                    'date': \"ISODate(\\\"2014-10-04T00:00\\\")\"\n                }\n            },\n            'testIsoDate': \"ISODate(\\\"2014-10-03T00:00\\\")\"\n        }\n\n        query_data = parse_query_json(json.dumps(query))\n\n        self.assertEqual(query_data['testIsoDate'], datetime.datetime(2014, 10, 3, 0, 0))\n        self.assertEqual(query_data['test_dict']['b']['date'], datetime.datetime(2014, 10, 4, 0, 0))\n\n    def test_handles_nested_fields(self):\n        \n        query = {\n            \"collection\": \"bus\",\n            \"aggregate\": [\n                {\n                    \"$geoNear\": {\n                        \"near\": {\"type\": \"Point\", \"coordinates\": [-22.910079, -43.205161]},\n                        \"maxDistance\": 100000000,\n                        \"distanceField\": \"dist.calculated\",\n                        \"includeLocs\": \"dist.location\",\n                        \"spherical\": True\n                    }\n                }\n            ]\n        }\n\n        query_data = parse_query_json(json.dumps(query))\n\n        self.assertDictEqual(query, query_data)\n\n    def test_supports_extended_json_types(self):\n        query = {\n            'test': 1,\n            'test_list': ['a', 'b', 'c'],\n            'test_dict': {\n                'a': 1,\n                'b': 2\n            },\n            'testIsoDate': \"ISODate(\\\"2014-10-03T00:00\\\")\",\n            'test$date': {\n                '$date': '2014-10-03T00:00:00.0'\n            },\n            'test$undefined': {\n                '$undefined': None\n            }\n        }\n        query_data = parse_query_json(json.dumps(query))\n        self.assertEqual(query_data['test$undefined'], None)\n        self.assertEqual(query_data['test$date'], datetime.datetime(2014, 10, 3, 0, 0).replace(tzinfo=utc))\n\n    def test_supports_relative_timestamps(self):\n        query = {\n            'ts': {'$humanTime': '1 hour ago'}\n        }\n\n        one_hour_ago = parse_human_time(\"1 hour ago\")\n        query_data = parse_query_json(json.dumps(query))\n        self.assertEqual(query_data['ts'], one_hour_ago)\n\n\nclass TestMongoResults(TestCase):\n    def test_parses_regular_results(self):\n        raw_results = [\n            {'column': 1, 'column2': 'test'},\n            {'column': 2, 'column2': 'test', 'column3': 'hello'}\n        ]\n        rows, columns = parse_results(raw_results)\n\n        for i, row in enumerate(rows):\n            self.assertDictEqual(row, raw_results[i])\n\n        self.assertIsNotNone(_get_column_by_name(columns, 'column'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'column2'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'column3'))\n    \n    def test_parses_nested_results(self):\n        raw_results = [\n            {'column': 1, 'column2': 'test', 'nested': {\n                'a': 1,\n                'b': 'str'\n            }},\n            {'column': 2, 'column2': 'test', 'column3': 'hello', 'nested': {\n                'a': 2,\n                'b': 'str2',\n                'c': 'c'\n            }}\n        ]\n\n        rows, columns = parse_results(raw_results)\n\n        self.assertDictEqual(rows[0], { 'column': 1, 'column2': 'test', 'nested.a': 1, 'nested.b': 'str' })\n        self.assertDictEqual(rows[1], { 'column': 2, 'column2': 'test', 'column3': 'hello', 'nested.a': 2, 'nested.b': 'str2', 'nested.c': 'c' })\n\n        self.assertIsNotNone(_get_column_by_name(columns, 'column'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'column2'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'column3'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'nested.a'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'nested.b'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'nested.c'))", "comments": "  https   github com getredash redash issues 597 ", "content": "import datetime\nimport json\nfrom unittest import TestCase\nfrom pytz import utc\nfrom redash.query_runner.mongodb import parse_query_json, parse_results, _get_column_by_name\n\nfrom redash.utils import parse_human_time\n\n\nclass TestParseQueryJson(TestCase):\n    def test_ignores_non_isodate_fields(self):\n        query = {\n            'test': 1,\n            'test_list': ['a', 'b', 'c'],\n            'test_dict': {\n                'a': 1,\n                'b': 2\n            }\n        }\n\n        query_data = parse_query_json(json.dumps(query))\n        self.assertDictEqual(query_data, query)\n\n    def test_parses_isodate_fields(self):\n        query = {\n            'test': 1,\n            'test_list': ['a', 'b', 'c'],\n            'test_dict': {\n                'a': 1,\n                'b': 2\n            },\n            'testIsoDate': \"ISODate(\\\"2014-10-03T00:00\\\")\"\n        }\n\n        query_data = parse_query_json(json.dumps(query))\n\n        self.assertEqual(query_data['testIsoDate'], datetime.datetime(2014, 10, 3, 0, 0))\n\n    def test_parses_isodate_in_nested_fields(self):\n        query = {\n            'test': 1,\n            'test_list': ['a', 'b', 'c'],\n            'test_dict': {\n                'a': 1,\n                'b': {\n                    'date': \"ISODate(\\\"2014-10-04T00:00\\\")\"\n                }\n            },\n            'testIsoDate': \"ISODate(\\\"2014-10-03T00:00\\\")\"\n        }\n\n        query_data = parse_query_json(json.dumps(query))\n\n        self.assertEqual(query_data['testIsoDate'], datetime.datetime(2014, 10, 3, 0, 0))\n        self.assertEqual(query_data['test_dict']['b']['date'], datetime.datetime(2014, 10, 4, 0, 0))\n\n    def test_handles_nested_fields(self):\n        # https://github.com/getredash/redash/issues/597\n        query = {\n            \"collection\": \"bus\",\n            \"aggregate\": [\n                {\n                    \"$geoNear\": {\n                        \"near\": {\"type\": \"Point\", \"coordinates\": [-22.910079, -43.205161]},\n                        \"maxDistance\": 100000000,\n                        \"distanceField\": \"dist.calculated\",\n                        \"includeLocs\": \"dist.location\",\n                        \"spherical\": True\n                    }\n                }\n            ]\n        }\n\n        query_data = parse_query_json(json.dumps(query))\n\n        self.assertDictEqual(query, query_data)\n\n    def test_supports_extended_json_types(self):\n        query = {\n            'test': 1,\n            'test_list': ['a', 'b', 'c'],\n            'test_dict': {\n                'a': 1,\n                'b': 2\n            },\n            'testIsoDate': \"ISODate(\\\"2014-10-03T00:00\\\")\",\n            'test$date': {\n                '$date': '2014-10-03T00:00:00.0'\n            },\n            'test$undefined': {\n                '$undefined': None\n            }\n        }\n        query_data = parse_query_json(json.dumps(query))\n        self.assertEqual(query_data['test$undefined'], None)\n        self.assertEqual(query_data['test$date'], datetime.datetime(2014, 10, 3, 0, 0).replace(tzinfo=utc))\n\n    def test_supports_relative_timestamps(self):\n        query = {\n            'ts': {'$humanTime': '1 hour ago'}\n        }\n\n        one_hour_ago = parse_human_time(\"1 hour ago\")\n        query_data = parse_query_json(json.dumps(query))\n        self.assertEqual(query_data['ts'], one_hour_ago)\n\n\nclass TestMongoResults(TestCase):\n    def test_parses_regular_results(self):\n        raw_results = [\n            {'column': 1, 'column2': 'test'},\n            {'column': 2, 'column2': 'test', 'column3': 'hello'}\n        ]\n        rows, columns = parse_results(raw_results)\n\n        for i, row in enumerate(rows):\n            self.assertDictEqual(row, raw_results[i])\n\n        self.assertIsNotNone(_get_column_by_name(columns, 'column'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'column2'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'column3'))\n    \n    def test_parses_nested_results(self):\n        raw_results = [\n            {'column': 1, 'column2': 'test', 'nested': {\n                'a': 1,\n                'b': 'str'\n            }},\n            {'column': 2, 'column2': 'test', 'column3': 'hello', 'nested': {\n                'a': 2,\n                'b': 'str2',\n                'c': 'c'\n            }}\n        ]\n\n        rows, columns = parse_results(raw_results)\n\n        self.assertDictEqual(rows[0], { 'column': 1, 'column2': 'test', 'nested.a': 1, 'nested.b': 'str' })\n        self.assertDictEqual(rows[1], { 'column': 2, 'column2': 'test', 'column3': 'hello', 'nested.a': 2, 'nested.b': 'str2', 'nested.c': 'c' })\n\n        self.assertIsNotNone(_get_column_by_name(columns, 'column'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'column2'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'column3'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'nested.a'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'nested.b'))\n        self.assertIsNotNone(_get_column_by_name(columns, 'nested.c'))", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_mongodb.py", "id": "868b25535f81d3e44ca43fb31d8c7d93", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/query_runner/test_mongodb.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}