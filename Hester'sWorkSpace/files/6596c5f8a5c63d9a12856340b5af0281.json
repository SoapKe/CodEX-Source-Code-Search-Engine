{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_filesize,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass MinhatecaIE(InfoExtractor):\n    _VALID_URL = r'https?://minhateca\\.com\\.br/[^?\n    _TEST = {\n        'url': 'http://minhateca.com.br/pereba/misc/youtube-dl+test+video,125848331.mp4(video)',\n        'info_dict': {\n            'id': '125848331',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'filesize_approx': 1530000,\n            'duration': 9,\n            'view_count': int,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        token = self._html_search_regex(\n            r'<input name=\"__RequestVerificationToken\".*?value=\"([^\"]+)\"',\n            webpage, 'request token')\n        token_data = [\n            ('fileId', video_id),\n            ('__RequestVerificationToken', token),\n        ]\n        req = sanitized_Request(\n            'http://minhateca.com.br/action/License/Download',\n            data=urlencode_postdata(token_data))\n        req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        data = self._download_json(\n            req, video_id, note='Downloading metadata')\n\n        video_url = data['redirectUrl']\n        title_str = self._html_search_regex(\n            r'<h1.*?>(.*?)</h1>', webpage, 'title')\n        title, _, ext = title_str.rpartition('.')\n        filesize_approx = parse_filesize(self._html_search_regex(\n            r'<p class=\"fileSize\">(.*?)</p>',\n            webpage, 'file size approximation', fatal=False))\n        duration = parse_duration(self._html_search_regex(\n            r'(?s)<p class=\"fileLeng[ht][th]\">.*?class=\"bold\">(.*?)<',\n            webpage, 'duration', fatal=False))\n        view_count = int_or_none(self._html_search_regex(\n            r'<p class=\"downloadsCounter\">([0-9]+)</p>',\n            webpage, 'view count', fatal=False))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'ext': ext,\n            'filesize_approx': filesize_approx,\n            'duration': duration,\n            'view_count': view_count,\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "comments": "# coding: utf-8\n#]+,(?P<id>[0-9]+)\\.'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_filesize,\n    sanitized_Request,\n    urlencode_postdata,\n)\n\n\nclass MinhatecaIE(InfoExtractor):\n    _VALID_URL = r'https?://minhateca\\.com\\.br/[^?#]+,(?P<id>[0-9]+)\\.'\n    _TEST = {\n        'url': 'http://minhateca.com.br/pereba/misc/youtube-dl+test+video,125848331.mp4(video)',\n        'info_dict': {\n            'id': '125848331',\n            'ext': 'mp4',\n            'title': 'youtube-dl test video',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'filesize_approx': 1530000,\n            'duration': 9,\n            'view_count': int,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        token = self._html_search_regex(\n            r'<input name=\"__RequestVerificationToken\".*?value=\"([^\"]+)\"',\n            webpage, 'request token')\n        token_data = [\n            ('fileId', video_id),\n            ('__RequestVerificationToken', token),\n        ]\n        req = sanitized_Request(\n            'http://minhateca.com.br/action/License/Download',\n            data=urlencode_postdata(token_data))\n        req.add_header('Content-Type', 'application/x-www-form-urlencoded')\n        data = self._download_json(\n            req, video_id, note='Downloading metadata')\n\n        video_url = data['redirectUrl']\n        title_str = self._html_search_regex(\n            r'<h1.*?>(.*?)</h1>', webpage, 'title')\n        title, _, ext = title_str.rpartition('.')\n        filesize_approx = parse_filesize(self._html_search_regex(\n            r'<p class=\"fileSize\">(.*?)</p>',\n            webpage, 'file size approximation', fatal=False))\n        duration = parse_duration(self._html_search_regex(\n            r'(?s)<p class=\"fileLeng[ht][th]\">.*?class=\"bold\">(.*?)<',\n            webpage, 'duration', fatal=False))\n        view_count = int_or_none(self._html_search_regex(\n            r'<p class=\"downloadsCounter\">([0-9]+)</p>',\n            webpage, 'view count', fatal=False))\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'ext': ext,\n            'filesize_approx': filesize_approx,\n            'duration': duration,\n            'view_count': view_count,\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "minhateca.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/minhateca.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}