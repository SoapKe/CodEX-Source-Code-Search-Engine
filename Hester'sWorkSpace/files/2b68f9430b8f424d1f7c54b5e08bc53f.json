{"author": "webpy", "code": "import unittest\nimport time\nimport threading\nimport sys\nimport web\nimport urllib\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:\n    from urllib import urlencode\n\nfrom web.py3helpers import PY2\n\ndata = \"\"\"\nimport web\n\nurls = (\"/\", \"%(classname)s\")\napp = web.application(urls, globals(), autoreload=True)\n\nclass %(classname)s:\n    def GET(self):\n        return \"%(output)s\"\n\n\"\"\"\n\nurls = (\n    \"/iter\", \"do_iter\",\n)\napp = web.application(urls, globals())\n\nclass do_iter:\n    def GET(self):\n        yield 'hello, '\n        yield web.input(name='world').name\n\n    POST = GET\n\ndef write(filename, data):\n    f = open(filename, 'w')\n    f.write(data)\n    f.close()\n\nclass ApplicationTest(unittest.TestCase):\n    def test_reloader(self):\n        write('foo.py', data % dict(classname='a', output='a'))\n        import foo\n        app = foo.app\n\n        self.assertEquals(app.request('/').data, b'a')\n\n        \n        time.sleep(1)\n        write('foo.py', data % dict(classname='a', output='b'))\n        self.assertEquals(app.request('/').data, b'b')\n\n        \n        time.sleep(1)\n        write('foo.py', data % dict(classname='c', output='c'))\n        self.assertEquals(app.request('/').data, b'c')\n        \n    def testUppercaseMethods(self):\n        urls = (\"/\", \"hello\")\n        app = web.application(urls, locals())\n        class hello:\n            def GET(self): return \"hello\"\n            def internal(self): return \"secret\"\n            \n        response = app.request('/', method='internal')\n        self.assertEquals(response.status, '405 Method Not Allowed')\n        \n    def testRedirect(self):\n        urls = (\n            \"/a\", \"redirect /hello/\",\n            \"/b/(.*)\", r\"redirect /hello/\\1\",\n            \"/hello/(.*)\", \"hello\"\n        )\n        app = web.application(urls, locals())\n        class hello:\n            def GET(self, name): \n                name = name or 'world'\n                return \"hello \" + name\n            \n        response = app.request('/a')\n        self.assertEquals(response.status, '301 Moved Permanently')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/hello/')\n\n        response = app.request('/a?x=2')\n        self.assertEquals(response.status, '301 Moved Permanently')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/hello/?x=2')\n\n        response = app.request('/b/foo?x=2')\n        self.assertEquals(response.status, '301 Moved Permanently')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/hello/foo?x=2')\n\n    def test_routing(self):\n        urls = (\n            \"/foo\", \"foo\"\n        )\n\n        class foo:\n            def GET(self):\n                return \"foo\"\n\n        app = web.application(urls, {\"foo\": foo})\n\n        self.assertEquals(app.request('/foo\\n').data, b'not found')\n        self.assertEquals(app.request('/foo').data, b'foo')\n        \n    def test_subdirs(self):\n        urls = (\n            \"/(.*)\", \"blog\"\n        )\n        class blog:\n            def GET(self, path):\n                return \"blog \" + path\n        app_blog = web.application(urls, locals())\n        \n        urls = (\n            \"/blog\", app_blog,\n            \"/(.*)\", \"index\"\n        )\n        class index:\n            def GET(self, path):\n                return \"hello \" + path\n        app = web.application(urls, locals())\n        \n        self.assertEquals(app.request('/blog/foo').data, b'blog foo')\n        self.assertEquals(app.request('/foo').data, b'hello foo')\n        \n        def processor(handler):\n            return web.ctx.path + \":\" + handler()\n        app.add_processor(processor)\n        self.assertEquals(app.request('/blog/foo').data, b'/blog/foo:blog foo')\n    \n    def test_subdomains(self):\n        def create_app(name):\n            urls = (\"/\", \"index\")\n            class index:\n                def GET(self):\n                    return name\n            return web.application(urls, locals())\n        \n        urls = (\n            \"a.example.com\", create_app('a'),\n            \"b.example.com\", create_app('b'),\n            \".*.example.com\", create_app('*')\n        )\n        app = web.subdomain_application(urls, locals())\n        \n        def test(host, expected_result):\n            result = app.request('/', host=host)\n            self.assertEquals(result.data, expected_result)\n            \n        test('a.example.com', b'a')\n        test('b.example.com', b'b')\n        test('c.example.com', b'*')\n        test('d.example.com', b'*')\n        \n    def test_redirect(self):\n        urls = (\n            \"/(.*)\", \"blog\"\n        )\n        class blog:\n            def GET(self, path):\n                if path == 'foo':\n                    raise web.seeother('/login', absolute=True)\n                else:\n                    raise web.seeother('/bar')\n        app_blog = web.application(urls, locals())\n        \n        urls = (\n            \"/blog\", app_blog,\n            \"/(.*)\", \"index\"\n        )\n        class index:\n            def GET(self, path):\n                return \"hello \" + path\n        app = web.application(urls, locals())\n        \n        response = app.request('/blog/foo')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/login')\n        \n        response = app.request('/blog/foo', env={'SCRIPT_NAME': '/x'})\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/x/login')\n\n        response = app.request('/blog/foo2')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/blog/bar')\n        \n        response = app.request('/blog/foo2', env={'SCRIPT_NAME': '/x'})\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/x/blog/bar')\n\n    def test_processors(self):\n        urls = (\n            \"/(.*)\", \"blog\"\n        )\n        class blog:\n            def GET(self, path):\n                return 'blog ' + path\n\n        state = web.storage(x=0, y=0)\n        def f():\n            state.x += 1\n\n        app_blog = web.application(urls, locals())\n        app_blog.add_processor(web.loadhook(f))\n        \n        urls = (\n            \"/blog\", app_blog,\n            \"/(.*)\", \"index\"\n        )\n        class index:\n            def GET(self, path):\n                return \"hello \" + path\n        app = web.application(urls, locals())\n        def g():\n            state.y += 1\n        app.add_processor(web.loadhook(g))\n\n        app.request('/blog/foo')\n        assert state.x == 1 and state.y == 1, repr(state)\n        app.request('/foo')\n        assert state.x == 1 and state.y == 2, repr(state)\n        \n    def testUnicodeInput(self):\n        urls = (\n            \"(/.*)\", \"foo\"\n        )\n        class foo:\n            def GET(self, path):\n                i = web.input(name='')\n                return repr(i.name)\n                \n            def POST(self, path):\n                if path == '/multipart':\n                    i = web.input(file={})\n                    return i.file.value\n                else:\n                    i = web.input()\n                    return repr(dict(i)).replace('u','')\n                \n        app = web.application(urls, locals())\n        \n        def f(name):\n            path = '/?' + urlencode({\"name\": name.encode('utf-8')})\n            self.assertEquals(app.request(path).data.decode('utf-8'), repr(name))\n            \n        f(u'\\u1234')\n        f(u'foo')\n\n        response = app.request('/', method='POST', data=dict(name='foo'))\n\n        self.assertEquals(response.data, b\"{'name': 'foo'}\")\n\n        \n        data = '--boundary\\r\\nContent-Disposition: form-data; name=\"x\"\\r\\n\\r\\nfoo\\r\\n--boundary\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"a.txt\"\\r\\nContent-Type: text/plain\\r\\n\\r\\na\\r\\n--boundary--\\r\\n'\n        headers = {'Content-Type': 'multipart/form-data; boundary=boundary'}\n        response = app.request('/multipart', method=\"POST\", data=data, headers=headers)\n\n\n        self.assertEquals(response.data, b'a')\n\n        \n    def testCustomNotFound(self):\n        urls_a = (\"/\", \"a\")\n        urls_b = (\"/\", \"b\")\n        \n        app_a = web.application(urls_a, locals())\n        app_b = web.application(urls_b, locals())\n        \n        app_a.notfound = lambda: web.HTTPError(\"404 Not Found\", {}, \"not found 1\")\n        \n        urls = (\n            \"/a\", app_a,\n            \"/b\", app_b\n        )\n        app = web.application(urls, locals())\n        \n        def assert_notfound(path, message):\n            response = app.request(path)\n            self.assertEquals(response.status.split()[0], \"404\")\n            self.assertEquals(response.data, message)\n            \n        assert_notfound(\"/a/foo\", b\"not found 1\")\n        assert_notfound(\"/b/foo\", b\"not found\")\n        \n        app.notfound = lambda: web.HTTPError(\"404 Not Found\", {}, \"not found 2\")\n        assert_notfound(\"/a/foo\", b\"not found 1\")\n        assert_notfound(\"/b/foo\", b\"not found 2\")\n\n    def testIter(self):\n        self.assertEquals(app.request('/iter').data, b'hello, world')\n        self.assertEquals(app.request('/iter?name=web').data, b'hello, web')\n\n        self.assertEquals(app.request('/iter', method='POST').data, b'hello, world')\n        self.assertEquals(app.request('/iter', method='POST', data='name=web').data, b'hello, web')\n\n    def testUnload(self):\n        x = web.storage(a=0)\n\n        urls = (\n            \"/foo\", \"foo\",\n            \"/bar\", \"bar\"\n        )\n        class foo:\n            def GET(self):\n                return \"foo\"\n        class bar:\n            def GET(self):\n                raise web.notfound()\n\n        app = web.application(urls, locals())\n        def unload():\n            x.a += 1\n        app.add_processor(web.unloadhook(unload))\n\n        app.request('/foo')\n        self.assertEquals(x.a, 1)\n\n        app.request('/bar')\n        self.assertEquals(x.a, 2)\n        \n    def test_changequery(self):\n        urls = (\n            '/', 'index',\n        )\n        class index:\n            def GET(self):\n                return web.changequery(x=1)\n        app = web.application(urls, locals())\n                \n        def f(path):\n            return app.request(path).data\n                \n        self.assertEquals(f('/?x=2'), b'/?x=1')\n\n        p = f('/?y=1&y=2&x=2')\n        self.assertTrue(p == b'/?y=1&y=2&x=1' or p == b'/?x=1&y=1&y=2')\n        \n    def test_setcookie(self):\n        urls = (\n            '/', 'index',\n        )\n        class index:\n            def GET(self):\n                web.setcookie(\"foo\", \"bar\")\n                return \"hello\"\n        app = web.application(urls, locals())\n        def f(script_name=\"\"):\n            response = app.request(\"/\", env={\"SCRIPT_NAME\": script_name})\n            return response.headers['Set-Cookie']\n        \n        self.assertEquals(f(''), 'foo=bar; Path=/')\n        self.assertEquals(f('/admin'), 'foo=bar; Path=/admin/')\n\n    def test_stopsimpleserver(self):\n        urls = (\n            '/', 'index',\n        )\n        class index:\n            def GET(self):\n                pass\n\n        \n        sys.argv = [\"code.py\"]\n\n        app = web.application(urls, locals())\n        thread = threading.Thread(target=app.run)\n\n        thread.start()\n        time.sleep(1)\n        self.assertTrue(thread.isAlive())\n\n        app.stop()\n        thread.join(timeout=1)\n        self.assertFalse(thread.isAlive())\n", "comments": "    import web  urls   (       (classname)s ) app   web application(urls  globals()  autoreload true)  class  (classname)s      def get(self)          return   (output)s          test class change    test urls change    reset command line arguments ", "content": "import unittest\nimport time\nimport threading\nimport sys\nimport web\nimport urllib\n\ntry:\n    from urllib.parse import urlencode\nexcept ImportError:\n    from urllib import urlencode\n\nfrom web.py3helpers import PY2\n\ndata = \"\"\"\nimport web\n\nurls = (\"/\", \"%(classname)s\")\napp = web.application(urls, globals(), autoreload=True)\n\nclass %(classname)s:\n    def GET(self):\n        return \"%(output)s\"\n\n\"\"\"\n\nurls = (\n    \"/iter\", \"do_iter\",\n)\napp = web.application(urls, globals())\n\nclass do_iter:\n    def GET(self):\n        yield 'hello, '\n        yield web.input(name='world').name\n\n    POST = GET\n\ndef write(filename, data):\n    f = open(filename, 'w')\n    f.write(data)\n    f.close()\n\nclass ApplicationTest(unittest.TestCase):\n    def test_reloader(self):\n        write('foo.py', data % dict(classname='a', output='a'))\n        import foo\n        app = foo.app\n\n        self.assertEquals(app.request('/').data, b'a')\n\n        # test class change\n        time.sleep(1)\n        write('foo.py', data % dict(classname='a', output='b'))\n        self.assertEquals(app.request('/').data, b'b')\n\n        # test urls change\n        time.sleep(1)\n        write('foo.py', data % dict(classname='c', output='c'))\n        self.assertEquals(app.request('/').data, b'c')\n        \n    def testUppercaseMethods(self):\n        urls = (\"/\", \"hello\")\n        app = web.application(urls, locals())\n        class hello:\n            def GET(self): return \"hello\"\n            def internal(self): return \"secret\"\n            \n        response = app.request('/', method='internal')\n        self.assertEquals(response.status, '405 Method Not Allowed')\n        \n    def testRedirect(self):\n        urls = (\n            \"/a\", \"redirect /hello/\",\n            \"/b/(.*)\", r\"redirect /hello/\\1\",\n            \"/hello/(.*)\", \"hello\"\n        )\n        app = web.application(urls, locals())\n        class hello:\n            def GET(self, name): \n                name = name or 'world'\n                return \"hello \" + name\n            \n        response = app.request('/a')\n        self.assertEquals(response.status, '301 Moved Permanently')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/hello/')\n\n        response = app.request('/a?x=2')\n        self.assertEquals(response.status, '301 Moved Permanently')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/hello/?x=2')\n\n        response = app.request('/b/foo?x=2')\n        self.assertEquals(response.status, '301 Moved Permanently')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/hello/foo?x=2')\n\n    def test_routing(self):\n        urls = (\n            \"/foo\", \"foo\"\n        )\n\n        class foo:\n            def GET(self):\n                return \"foo\"\n\n        app = web.application(urls, {\"foo\": foo})\n\n        self.assertEquals(app.request('/foo\\n').data, b'not found')\n        self.assertEquals(app.request('/foo').data, b'foo')\n        \n    def test_subdirs(self):\n        urls = (\n            \"/(.*)\", \"blog\"\n        )\n        class blog:\n            def GET(self, path):\n                return \"blog \" + path\n        app_blog = web.application(urls, locals())\n        \n        urls = (\n            \"/blog\", app_blog,\n            \"/(.*)\", \"index\"\n        )\n        class index:\n            def GET(self, path):\n                return \"hello \" + path\n        app = web.application(urls, locals())\n        \n        self.assertEquals(app.request('/blog/foo').data, b'blog foo')\n        self.assertEquals(app.request('/foo').data, b'hello foo')\n        \n        def processor(handler):\n            return web.ctx.path + \":\" + handler()\n        app.add_processor(processor)\n        self.assertEquals(app.request('/blog/foo').data, b'/blog/foo:blog foo')\n    \n    def test_subdomains(self):\n        def create_app(name):\n            urls = (\"/\", \"index\")\n            class index:\n                def GET(self):\n                    return name\n            return web.application(urls, locals())\n        \n        urls = (\n            \"a.example.com\", create_app('a'),\n            \"b.example.com\", create_app('b'),\n            \".*.example.com\", create_app('*')\n        )\n        app = web.subdomain_application(urls, locals())\n        \n        def test(host, expected_result):\n            result = app.request('/', host=host)\n            self.assertEquals(result.data, expected_result)\n            \n        test('a.example.com', b'a')\n        test('b.example.com', b'b')\n        test('c.example.com', b'*')\n        test('d.example.com', b'*')\n        \n    def test_redirect(self):\n        urls = (\n            \"/(.*)\", \"blog\"\n        )\n        class blog:\n            def GET(self, path):\n                if path == 'foo':\n                    raise web.seeother('/login', absolute=True)\n                else:\n                    raise web.seeother('/bar')\n        app_blog = web.application(urls, locals())\n        \n        urls = (\n            \"/blog\", app_blog,\n            \"/(.*)\", \"index\"\n        )\n        class index:\n            def GET(self, path):\n                return \"hello \" + path\n        app = web.application(urls, locals())\n        \n        response = app.request('/blog/foo')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/login')\n        \n        response = app.request('/blog/foo', env={'SCRIPT_NAME': '/x'})\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/x/login')\n\n        response = app.request('/blog/foo2')\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/blog/bar')\n        \n        response = app.request('/blog/foo2', env={'SCRIPT_NAME': '/x'})\n        self.assertEquals(response.headers['Location'], 'http://0.0.0.0:8080/x/blog/bar')\n\n    def test_processors(self):\n        urls = (\n            \"/(.*)\", \"blog\"\n        )\n        class blog:\n            def GET(self, path):\n                return 'blog ' + path\n\n        state = web.storage(x=0, y=0)\n        def f():\n            state.x += 1\n\n        app_blog = web.application(urls, locals())\n        app_blog.add_processor(web.loadhook(f))\n        \n        urls = (\n            \"/blog\", app_blog,\n            \"/(.*)\", \"index\"\n        )\n        class index:\n            def GET(self, path):\n                return \"hello \" + path\n        app = web.application(urls, locals())\n        def g():\n            state.y += 1\n        app.add_processor(web.loadhook(g))\n\n        app.request('/blog/foo')\n        assert state.x == 1 and state.y == 1, repr(state)\n        app.request('/foo')\n        assert state.x == 1 and state.y == 2, repr(state)\n        \n    def testUnicodeInput(self):\n        urls = (\n            \"(/.*)\", \"foo\"\n        )\n        class foo:\n            def GET(self, path):\n                i = web.input(name='')\n                return repr(i.name)\n                \n            def POST(self, path):\n                if path == '/multipart':\n                    i = web.input(file={})\n                    return i.file.value\n                else:\n                    i = web.input()\n                    return repr(dict(i)).replace('u','')\n                \n        app = web.application(urls, locals())\n        \n        def f(name):\n            path = '/?' + urlencode({\"name\": name.encode('utf-8')})\n            self.assertEquals(app.request(path).data.decode('utf-8'), repr(name))\n            \n        f(u'\\u1234')\n        f(u'foo')\n\n        response = app.request('/', method='POST', data=dict(name='foo'))\n\n        self.assertEquals(response.data, b\"{'name': 'foo'}\")\n\n        \n        data = '--boundary\\r\\nContent-Disposition: form-data; name=\"x\"\\r\\n\\r\\nfoo\\r\\n--boundary\\r\\nContent-Disposition: form-data; name=\"file\"; filename=\"a.txt\"\\r\\nContent-Type: text/plain\\r\\n\\r\\na\\r\\n--boundary--\\r\\n'\n        headers = {'Content-Type': 'multipart/form-data; boundary=boundary'}\n        response = app.request('/multipart', method=\"POST\", data=data, headers=headers)\n\n\n        self.assertEquals(response.data, b'a')\n\n        \n    def testCustomNotFound(self):\n        urls_a = (\"/\", \"a\")\n        urls_b = (\"/\", \"b\")\n        \n        app_a = web.application(urls_a, locals())\n        app_b = web.application(urls_b, locals())\n        \n        app_a.notfound = lambda: web.HTTPError(\"404 Not Found\", {}, \"not found 1\")\n        \n        urls = (\n            \"/a\", app_a,\n            \"/b\", app_b\n        )\n        app = web.application(urls, locals())\n        \n        def assert_notfound(path, message):\n            response = app.request(path)\n            self.assertEquals(response.status.split()[0], \"404\")\n            self.assertEquals(response.data, message)\n            \n        assert_notfound(\"/a/foo\", b\"not found 1\")\n        assert_notfound(\"/b/foo\", b\"not found\")\n        \n        app.notfound = lambda: web.HTTPError(\"404 Not Found\", {}, \"not found 2\")\n        assert_notfound(\"/a/foo\", b\"not found 1\")\n        assert_notfound(\"/b/foo\", b\"not found 2\")\n\n    def testIter(self):\n        self.assertEquals(app.request('/iter').data, b'hello, world')\n        self.assertEquals(app.request('/iter?name=web').data, b'hello, web')\n\n        self.assertEquals(app.request('/iter', method='POST').data, b'hello, world')\n        self.assertEquals(app.request('/iter', method='POST', data='name=web').data, b'hello, web')\n\n    def testUnload(self):\n        x = web.storage(a=0)\n\n        urls = (\n            \"/foo\", \"foo\",\n            \"/bar\", \"bar\"\n        )\n        class foo:\n            def GET(self):\n                return \"foo\"\n        class bar:\n            def GET(self):\n                raise web.notfound()\n\n        app = web.application(urls, locals())\n        def unload():\n            x.a += 1\n        app.add_processor(web.unloadhook(unload))\n\n        app.request('/foo')\n        self.assertEquals(x.a, 1)\n\n        app.request('/bar')\n        self.assertEquals(x.a, 2)\n        \n    def test_changequery(self):\n        urls = (\n            '/', 'index',\n        )\n        class index:\n            def GET(self):\n                return web.changequery(x=1)\n        app = web.application(urls, locals())\n                \n        def f(path):\n            return app.request(path).data\n                \n        self.assertEquals(f('/?x=2'), b'/?x=1')\n\n        p = f('/?y=1&y=2&x=2')\n        self.assertTrue(p == b'/?y=1&y=2&x=1' or p == b'/?x=1&y=1&y=2')\n        \n    def test_setcookie(self):\n        urls = (\n            '/', 'index',\n        )\n        class index:\n            def GET(self):\n                web.setcookie(\"foo\", \"bar\")\n                return \"hello\"\n        app = web.application(urls, locals())\n        def f(script_name=\"\"):\n            response = app.request(\"/\", env={\"SCRIPT_NAME\": script_name})\n            return response.headers['Set-Cookie']\n        \n        self.assertEquals(f(''), 'foo=bar; Path=/')\n        self.assertEquals(f('/admin'), 'foo=bar; Path=/admin/')\n\n    def test_stopsimpleserver(self):\n        urls = (\n            '/', 'index',\n        )\n        class index:\n            def GET(self):\n                pass\n\n        # reset command-line arguments\n        sys.argv = [\"code.py\"]\n\n        app = web.application(urls, locals())\n        thread = threading.Thread(target=app.run)\n\n        thread.start()\n        time.sleep(1)\n        self.assertTrue(thread.isAlive())\n\n        app.stop()\n        thread.join(timeout=1)\n        self.assertFalse(thread.isAlive())\n", "description": "web.py is a web framework for python that is as simple as it is powerful. ", "file_name": "test_application.py", "id": "2b68f9430b8f424d1f7c54b5e08bc53f", "language": "Python", "project_name": "webpy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/webpy-webpy/webpy-webpy-817c979/tests/test_application.py", "save_time": "", "source": "", "update_at": "2018-03-16T08:06:22Z", "url": "https://github.com/webpy/webpy", "wiki": false}