{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import fields, models\n\n\nclass StockPickingType(models.Model):\n    _inherit = 'stock.picking.type'\n\n    code = fields.Selection(selection_add=[('mrp_operation', 'Manufacturing Operation')])\n    count_mo_todo = fields.Integer(string=\"Number of Manufacturing Orders to Process\",\n        compute='_get_mo_count')\n    count_mo_waiting = fields.Integer(string=\"Number of Manufacturing Orders Waiting\",\n        compute='_get_mo_count')\n    count_mo_late = fields.Integer(string=\"Number of Manufacturing Orders Late\",\n        compute='_get_mo_count')\n\n    def _get_mo_count(self):\n        mrp_picking_types = self.filtered(lambda picking: picking.code == 'mrp_operation')\n        if not mrp_picking_types:\n            return\n        domains = {\n            'count_mo_waiting': [('availability', '=', 'waiting')],\n            'count_mo_todo': [('state', 'in', ('confirmed', 'planned', 'progress'))],\n            'count_mo_late': [('date_planned_start', '<', fields.Date.today()), ('state', '=', 'confirmed')],\n        }\n        for field in domains:\n            data = self.env['mrp.production'].read_group(domains[field] +\n                [('state', 'not in', ('done', 'cancel')), ('picking_type_id', 'in', self.ids)],\n                ['picking_type_id'], ['picking_type_id'])\n            count = {x['picking_type_id'] and x['picking_type_id'][0]: x['picking_type_id_count'] for x in data}\n            for record in mrp_picking_types:\n                record[field] = count.get(record.id, 0)\n\n    def get_mrp_stock_picking_action_picking_type(self):\n        return self._get_action('mrp.mrp_production_action_picking_deshboard')\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import fields, models\n\n\nclass StockPickingType(models.Model):\n    _inherit = 'stock.picking.type'\n\n    code = fields.Selection(selection_add=[('mrp_operation', 'Manufacturing Operation')])\n    count_mo_todo = fields.Integer(string=\"Number of Manufacturing Orders to Process\",\n        compute='_get_mo_count')\n    count_mo_waiting = fields.Integer(string=\"Number of Manufacturing Orders Waiting\",\n        compute='_get_mo_count')\n    count_mo_late = fields.Integer(string=\"Number of Manufacturing Orders Late\",\n        compute='_get_mo_count')\n\n    def _get_mo_count(self):\n        mrp_picking_types = self.filtered(lambda picking: picking.code == 'mrp_operation')\n        if not mrp_picking_types:\n            return\n        domains = {\n            'count_mo_waiting': [('availability', '=', 'waiting')],\n            'count_mo_todo': [('state', 'in', ('confirmed', 'planned', 'progress'))],\n            'count_mo_late': [('date_planned_start', '<', fields.Date.today()), ('state', '=', 'confirmed')],\n        }\n        for field in domains:\n            data = self.env['mrp.production'].read_group(domains[field] +\n                [('state', 'not in', ('done', 'cancel')), ('picking_type_id', 'in', self.ids)],\n                ['picking_type_id'], ['picking_type_id'])\n            count = {x['picking_type_id'] and x['picking_type_id'][0]: x['picking_type_id_count'] for x in data}\n            for record in mrp_picking_types:\n                record[field] = count.get(record.id, 0)\n\n    def get_mrp_stock_picking_action_picking_type(self):\n        return self._get_action('mrp.mrp_production_action_picking_deshboard')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "stock_picking.py", "id": "ac8d8c49ac2b0e0e66800ea95fcb88ba", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp/models/stock_picking.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}