{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    qualities,\n)\n\n\nclass TassIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tass\\.ru|itar-tass\\.com)/[^/]+/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://tass.ru/obschestvo/1586870',\n            'md5': '3b4cdd011bc59174596b6145cda474a4',\n            'info_dict': {\n                'id': '1586870',\n                'ext': 'mp4',\n                'title': '\u041f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f\u043c \u043c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0437\u043e\u043e\u043f\u0430\u0440\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043a\u0440\u0430\u0441\u043d\u0443\u044e \u043f\u0430\u043d\u0434\u0443',\n                'description': '\u041f\u0440\u0438\u0435\u0445\u0430\u0432\u0448\u0443\u044e \u0438\u0437 \u0414\u0443\u0431\u043b\u0438\u043d\u0430 \u0417\u0435\u0439\u043d\u0443 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0432 \u043f\u0430\u0432\u0438\u043b\u044c\u043e\u043d\u0435 \"\u041a\u043e\u0448\u043a\u0438 \u0442\u0440\u043e\u043f\u0438\u043a\u043e\u0432\"',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            'url': 'http://itar-tass.com/obschestvo/1600009',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        sources = json.loads(js_to_json(self._search_regex(\n            r'(?s)sources\\s*:\\s*(\\[.+?\\])', webpage, 'sources')))\n\n        quality = qualities(['sd', 'hd'])\n\n        formats = []\n        for source in sources:\n            video_url = source.get('file')\n            if not video_url or not video_url.startswith('http') or not video_url.endswith('.mp4'):\n                continue\n            label = source.get('label')\n            formats.append({\n                'url': video_url,\n                'format_id': label,\n                'quality': quality(label),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    qualities,\n)\n\n\nclass TassIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:tass\\.ru|itar-tass\\.com)/[^/]+/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://tass.ru/obschestvo/1586870',\n            'md5': '3b4cdd011bc59174596b6145cda474a4',\n            'info_dict': {\n                'id': '1586870',\n                'ext': 'mp4',\n                'title': '\u041f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f\u043c \u043c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0437\u043e\u043e\u043f\u0430\u0440\u043a\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u043a\u0440\u0430\u0441\u043d\u0443\u044e \u043f\u0430\u043d\u0434\u0443',\n                'description': '\u041f\u0440\u0438\u0435\u0445\u0430\u0432\u0448\u0443\u044e \u0438\u0437 \u0414\u0443\u0431\u043b\u0438\u043d\u0430 \u0417\u0435\u0439\u043d\u0443 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0432 \u043f\u0430\u0432\u0438\u043b\u044c\u043e\u043d\u0435 \"\u041a\u043e\u0448\u043a\u0438 \u0442\u0440\u043e\u043f\u0438\u043a\u043e\u0432\"',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            'url': 'http://itar-tass.com/obschestvo/1600009',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        sources = json.loads(js_to_json(self._search_regex(\n            r'(?s)sources\\s*:\\s*(\\[.+?\\])', webpage, 'sources')))\n\n        quality = qualities(['sd', 'hd'])\n\n        formats = []\n        for source in sources:\n            video_url = source.get('file')\n            if not video_url or not video_url.startswith('http') or not video_url.endswith('.mp4'):\n                continue\n            label = source.get('label')\n            formats.append({\n                'url': video_url,\n                'format_id': label,\n                'quality': quality(label),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "tass.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/tass.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}