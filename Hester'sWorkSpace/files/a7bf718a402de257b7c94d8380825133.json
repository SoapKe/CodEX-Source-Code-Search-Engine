{"author": "odoo", "code": "# -*- coding:utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\n\nfrom odoo.exceptions import ValidationError\n\n\nclass HrContract(models.Model):\n    _inherit = 'hr.contract'\n\n    transport_mode = fields.Selection([\n        ('company_car', 'Company car'),\n        ('public_transport', 'Public Transport'),\n        ('others', 'Other'),\n    ], string=\"Transport\", default='company_car',\n    help=\"Transport mode the employee uses to go to work.\")\n    car_atn = fields.Monetary(string='ATN Company Car')\n    public_transport_employee_amount = fields.Monetary('Paid by the employee (Monthly)')\n    thirteen_month = fields.Monetary(compute='_compute_holidays_advantages', string='13th Month',\n        help=\"Yearly gross amount the employee receives as 13th month bonus.\")\n    double_holidays = fields.Monetary(compute='_compute_holidays_advantages', string='Holiday Bonus',\n        help=\"Yearly gross amount the employee receives as holidays bonus.\")\n    warrant_value_employee = fields.Monetary(compute='_compute_warrants_cost', string=\"Warrant value for the employee\")\n\n    \n    final_yearly_costs = fields.Monetary(compute='_compute_final_yearly_costs', readonly=False,\n        string='Total Employee Cost', groups=\"hr.group_hr_manager\",\n        help=\"Total yearly cost of the employee for the employer.\")\n    monthly_yearly_costs = fields.Monetary(compute='_compute_monthly_yearly_costs', string='Monthly Equivalent Cost', readonly=True,\n        help=\"Total monthly cost of the employee for the employer.\")\n    ucm_insurance = fields.Monetary(compute='_compute_ucm_insurance', string=\"Social Secretary Costs\")\n    social_security_contributions = fields.Monetary(compute='_compute_social_security_contributions', string=\"Social Security Contributions\")\n    yearly_cost_before_charges = fields.Monetary(compute='_compute_yearly_cost_before_charges', string=\"Yearly Costs Before Charges\")\n    meal_voucher_paid_by_employer = fields.Monetary(compute='_compute_meal_voucher_paid_by_employer', string=\"Meal Voucher Paid by Employer\")\n    company_car_total_depreciated_cost = fields.Monetary()\n    public_transport_reimbursed_amount = fields.Monetary(string='Reimbursed amount',\n        compute='_compute_public_transport_reimbursed_amount', readonly=False, store=True)\n    others_reimbursed_amount = fields.Monetary(string='Reimbursed amount')\n    transport_employer_cost = fields.Monetary(compute='_compute_transport_employer_cost', string=\"Employer cost from employee transports\")\n    warrants_cost = fields.Monetary(compute='_compute_warrants_cost')\n\n    \n    commission_on_target = fields.Monetary(string=\"Commission on Target\",\n        default=lambda self: self.get_attribute('commission_on_target', 'default_value'),\n        help=\"Monthly gross amount that the employee receives if the target is reached.\")\n    fuel_card = fields.Monetary(string=\"Fuel Card\",\n        default=lambda self: self.get_attribute('fuel_card', 'default_value'),\n        help=\"Monthly amount the employee receives on his fuel card.\")\n    internet = fields.Monetary(string=\"Internet\",\n        default=lambda self: self.get_attribute('internet', 'default_value'),\n        help=\"The employee's internet subcription will be paid up to this amount.\")\n    representation_fees = fields.Monetary(string=\"Representation Fees\",\n        default=lambda self: self.get_attribute('representation_fees', 'default_value'),\n        help=\"Monthly net amount the employee receives to cover his representation fees.\")\n    mobile = fields.Monetary(string=\"Mobile\",\n        default=lambda self: self.get_attribute('mobile', 'default_value'),\n        help=\"The employee's mobile subscription will be paid up to this amount.\")\n    mobile_plus = fields.Monetary(string=\"International Communication\",\n        default=lambda self: self.get_attribute('mobile_plus', 'default_value'),\n        help=\"The employee's mobile subscription for international communication will be paid up to this amount.\")\n    meal_voucher_amount = fields.Monetary(string=\"Meal Vouchers\",\n        default=lambda self: self.get_attribute('meal_voucher_amount', 'default_value'),\n        help=\"Amount the employee receives in the form of meal vouchers per worked day.\")\n    holidays = fields.Float(string='Legal Leaves',\n        default=lambda self: self.get_attribute('holidays', 'default_value'),\n        help=\"Number of days of paid leaves the employee gets per year.\")\n    holidays_editable = fields.Boolean(string=\"Editable Leaves\", default=True)\n    holidays_compensation = fields.Monetary(compute='_compute_holidays_compensation', string=\"Holidays Compensation\")\n    wage_with_holidays = fields.Monetary(compute='_compute_wage_with_holidays', inverse='_inverse_wage_with_holidays', string=\"Wage update with holidays retenues\")\n    additional_net_amount = fields.Monetary(string=\"Net Supplements\",\n        help=\"Monthly net amount the employee receives.\")\n    retained_net_amount = fields.Monetary(sting=\"Net Retained\",\n        help=\"Monthly net amount that is retained on the employee's salary.\")\n    eco_checks = fields.Monetary(\"Eco Vouchers\",\n        default=lambda self: self.get_attribute('eco_checks', 'default_value'),\n        help=\"Yearly amount the employee receives in the form of eco vouchers.\")\n\n    @api.depends('holidays', 'wage', 'final_yearly_costs')\n    def _compute_wage_with_holidays(self):\n        for contract in self:\n            if contract.holidays > 20.0:\n                yearly_cost = contract.final_yearly_costs * (1.0 - (contract.holidays - 20.0) / 231.0)\n                contract.wage_with_holidays = contract._get_gross_from_employer_costs(yearly_cost)\n            else:\n                contract.wage_with_holidays = contract.wage\n\n    def _inverse_wage_with_holidays(self):\n        for contract in self:\n            if contract.holidays > 20.0:\n                remaining_for_gross = contract.wage_with_holidays * (13.0 + 13.0 * 0.3507 + 0.92)\n                yearly_cost = remaining_for_gross \\\n                    + 12.0 * contract.representation_fees \\\n                    + 12.0 * contract.fuel_card \\\n                    + 12.0 * contract.internet \\\n                    + 12.0 * (contract.mobile + contract.mobile_plus) \\\n                    + 12.0 * contract.transport_employer_cost \\\n                    + contract.warrants_cost \\\n                    + 220.0 * contract.meal_voucher_paid_by_employer\n                contract.final_yearly_costs = yearly_cost / (1.0 - (contract.holidays - 20.0) / 231.0)\n                contract.wage = contract._get_gross_from_employer_costs(contract.final_yearly_costs)\n            else:\n                contract.wage = contract.wage_with_holidays\n\n    @api.depends('transport_mode', 'company_car_total_depreciated_cost',\n        'public_transport_reimbursed_amount', 'others_reimbursed_amount')\n    def _compute_transport_employer_cost(self):\n        for contract in self:\n            if contract.transport_mode == 'company_car':\n                contract.transport_employer_cost = contract.company_car_total_depreciated_cost\n            elif contract.transport_mode == 'public_transport':\n                contract.transport_employer_cost = contract.public_transport_reimbursed_amount\n            elif contract.transport_mode == 'others':\n                contract.transport_employer_cost = contract.others_reimbursed_amount\n\n    @api.depends('commission_on_target')\n    def _compute_warrants_cost(self):\n        for contract in self:\n            contract.warrants_cost = contract.commission_on_target * 1.326 * 1.05 * 12.0\n            contract.warrant_value_employee = contract.commission_on_target * 1.326 * (1.00 - 0.535) * 12.0\n\n    @api.depends('wage', 'fuel_card', 'representation_fees', 'transport_employer_cost',\n        'internet', 'mobile', 'mobile_plus')\n    def _compute_yearly_cost_before_charges(self):\n        for contract in self:\n            contract.yearly_cost_before_charges = 12.0 * (\n                contract.wage * (1.0 + 1.0 / 12.0) +\n                contract.fuel_card +\n                contract.representation_fees +\n                contract.internet +\n                contract.mobile +\n                contract.mobile_plus +\n                contract.transport_employer_cost\n            )\n\n    @api.depends('yearly_cost_before_charges', 'social_security_contributions', 'wage',\n        'social_security_contributions', 'double_holidays', 'warrants_cost', 'meal_voucher_paid_by_employer')\n    def _compute_final_yearly_costs(self):\n        for contract in self:\n            contract.final_yearly_costs = (\n                contract.yearly_cost_before_charges +\n                contract.social_security_contributions +\n                contract.double_holidays +\n                contract.warrants_cost +\n                (220.0 * contract.meal_voucher_paid_by_employer)\n            )\n\n    @api.depends('holidays', 'final_yearly_costs')\n    def _compute_holidays_compensation(self):\n        for contract in self:\n            if contract.holidays < 20:\n                decrease_amount = contract.final_yearly_costs * (20.0 - contract.holidays) / 231.0\n                contract.holidays_compensation = decrease_amount\n            else:\n                contract.holidays_compensation = 0.0\n\n    @api.onchange('final_yearly_costs')\n    def _onchange_final_yearly_costs(self):\n        self.wage = self._get_gross_from_employer_costs(self.final_yearly_costs)\n\n    @api.depends('meal_voucher_amount')\n    def _compute_meal_voucher_paid_by_employer(self):\n        for contract in self:\n            contract.meal_voucher_paid_by_employer = contract.meal_voucher_amount * (1 - 0.1463)\n\n    @api.depends('wage')\n    def _compute_social_security_contributions(self):\n        for contract in self:\n            total_wage = contract.wage * 13.0\n            contract.social_security_contributions = (total_wage) * 0.3507\n\n    @api.depends('wage')\n    def _compute_ucm_insurance(self):\n        for contract in self:\n            contract.ucm_insurance = (contract.wage * 12.0) * 0.05\n\n    @api.depends('public_transport_employee_amount')\n    def _compute_public_transport_reimbursed_amount(self):\n        for contract in self:\n            contract.public_transport_reimbursed_amount = contract._get_public_transport_reimbursed_amount(contract.public_transport_employee_amount)\n\n    def _get_public_transport_reimbursed_amount(self, amount):\n        return amount * 0.68\n\n    @api.depends('final_yearly_costs')\n    def _compute_monthly_yearly_costs(self):\n        for contract in self:\n            contract.monthly_yearly_costs = contract.final_yearly_costs / 12.0\n\n    @api.depends('wage')\n    def _compute_holidays_advantages(self):\n        for contract in self:\n            contract.double_holidays = contract.wage * 0.92\n            contract.thirteen_month = contract.wage\n\n    @api.onchange('transport_mode')\n    def _onchange_transport_mode(self):\n        if self.transport_mode != 'company_car':\n            self.fuel_card = 0\n            self.company_car_total_depreciated_cost = 0\n        if self.transport_mode != 'others':\n            self.others_reimbursed_amount = 0\n        if self.transport_mode != 'public_transports':\n            self.public_transport_reimbursed_amount = 0\n\n    @api.onchange('mobile', 'mobile_plus')\n    def _onchange_mobile(self):\n        if self.mobile_plus and not self.mobile:\n            raise ValidationError(_('You should have a mobile subscription to select an international communication amount!'))\n\n    def _get_internet_amount(self, has_internet):\n        if has_internet:\n            return self.get_attribute('internet', 'default_value')\n        else:\n            return 0.0\n\n    def _get_mobile_amount(self, has_mobile, international_communication):\n        if has_mobile and international_communication:\n            return self.get_attribute('mobile', 'default_value') + self.get_attribute('mobile_plus', 'default_value')\n        elif has_mobile:\n            return self.get_attribute('mobile', 'default_value')\n        else:\n            return 0.0\n\n    def _get_gross_from_employer_costs(self, yearly_cost):\n        contract = self\n        remaining_for_gross = yearly_cost \\\n            - 12.0 * contract.representation_fees \\\n            - 12.0 * contract.fuel_card \\\n            - 12.0 * contract.internet \\\n            - 12.0 * (contract.mobile + contract.mobile_plus) \\\n            - 12.0 * contract.transport_employer_cost \\\n            - contract.warrants_cost \\\n            - 220.0 * contract.meal_voucher_paid_by_employer\n        gross = remaining_for_gross / (13.0 + 13.0 * 0.3507 + 0.92)\n        return gross\n\n\nclass HrEmployee(models.Model):\n    _inherit = 'hr.employee'\n\n    spouse_fiscal_status = fields.Selection([\n        ('without income', 'Without Income'),\n        ('with income', 'With Income')\n    ], string='Tax status for spouse', groups=\"hr.group_hr_user\")\n    disabled = fields.Boolean(string=\"Disabled\", help=\"If the employee is declared disabled by law\", groups=\"hr.group_hr_user\")\n    disabled_spouse_bool = fields.Boolean(string='Disabled Spouse', help='if recipient spouse is declared disabled by law', groups=\"hr.group_hr_user\")\n    disabled_children_bool = fields.Boolean(string='Disabled Children', help='if recipient children is/are declared disabled by law', groups=\"hr.group_hr_user\")\n    resident_bool = fields.Boolean(string='Nonresident', help='if recipient lives in a foreign country', groups=\"hr.group_hr_user\")\n    disabled_children_number = fields.Integer('Number of disabled children', groups=\"hr.group_hr_user\")\n    dependent_children = fields.Integer(compute='_compute_dependent_children', string='Considered number of dependent children', groups=\"hr.group_hr_user\")\n    other_dependent_people = fields.Boolean(string=\"Other Dependent People\", help=\"If other people are dependent on the employee\", groups=\"hr.group_hr_user\")\n    other_senior_dependent = fields.Integer('# seniors (>=65)', help=\"Number of seniors dependent on the employee, including the disabled ones\", groups=\"hr.group_hr_user\")\n    other_disabled_senior_dependent = fields.Integer('# disabled seniors (>=65)', groups=\"hr.group_hr_user\")\n    other_juniors_dependent = fields.Integer('# people (<65)', help=\"Number of juniors dependent on the employee, including the disabled ones\", groups=\"hr.group_hr_user\")\n    other_disabled_juniors_dependent = fields.Integer('# disabled people (<65)', groups=\"hr.group_hr_user\")\n    dependent_seniors = fields.Integer(compute='_compute_dependent_people', string=\"Considered number of dependent seniors\", groups=\"hr.group_hr_user\")\n    dependent_juniors = fields.Integer(compute='_compute_dependent_people', string=\"Considered number of dependent juniors\", groups=\"hr.group_hr_user\")\n    spouse_net_revenue = fields.Float(string=\"Spouse Net Revenue\", help=\"Own professional income, other than pensions, annuities or similar income\", groups=\"hr.group_hr_user\")\n    spouse_other_net_revenue = fields.Float(string=\"Spouse Other Net Revenue\",\n        help='Own professional income which is exclusively composed of pensions, annuities or similar income', groups=\"hr.group_hr_user\")\n\n    @api.constrains('spouse_fiscal_status', 'spouse_net_revenue', 'spouse_other_net_revenue')\n    def _check_spouse_revenue(self):\n        for employee in self:\n            if employee.spouse_fiscal_status == 'with income' and not employee.spouse_net_revenue and not employee.spouse_other_net_revenue:\n                raise ValidationError(_(\"The revenue for the spouse can't be equal to zero is the fiscal status is 'With Income'.\"))\n\n    @api.onchange('spouse_fiscal_status')\n    def _onchange_spouse_fiscal_status(self):\n        self.spouse_net_revenue = 0.0\n        self.spouse_other_net_revenue = 0.0\n\n    @api.onchange('disabled_children_bool')\n    def _onchange_disabled_children_bool(self):\n        self.disabled_children_number = 0\n\n    @api.onchange('other_dependent_people')\n    def _onchange_other_dependent_people(self):\n        self.other_senior_dependent = 0.0\n        self.other_disabled_senior_dependent = 0.0\n        self.other_juniors_dependent = 0.0\n        self.other_disabled_juniors_dependent = 0.0\n\n    @api.depends('disabled_children_bool', 'disabled_children_number', 'children')\n    def _compute_dependent_children(self):\n        for employee in self:\n            if employee.disabled_children_bool:\n                employee.dependent_children = employee.children + employee.disabled_children_number\n            else:\n                employee.dependent_children = employee.children\n\n    @api.depends('other_dependent_people', 'other_senior_dependent',\n        'other_disabled_senior_dependent', 'other_juniors_dependent', 'other_disabled_juniors_dependent')\n    def _compute_dependent_people(self):\n        for employee in self:\n            employee.dependent_seniors = employee.other_senior_dependent + employee.other_disabled_senior_dependent\n            employee.dependent_juniors = employee.other_juniors_dependent + employee.other_disabled_juniors_dependent\n", "comments": "      coding utf 8        part odoo  see license file full copyright licensing details     employer costs fields    advantages ", "content": "# -*- coding:utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\n\nfrom odoo.exceptions import ValidationError\n\n\nclass HrContract(models.Model):\n    _inherit = 'hr.contract'\n\n    transport_mode = fields.Selection([\n        ('company_car', 'Company car'),\n        ('public_transport', 'Public Transport'),\n        ('others', 'Other'),\n    ], string=\"Transport\", default='company_car',\n    help=\"Transport mode the employee uses to go to work.\")\n    car_atn = fields.Monetary(string='ATN Company Car')\n    public_transport_employee_amount = fields.Monetary('Paid by the employee (Monthly)')\n    thirteen_month = fields.Monetary(compute='_compute_holidays_advantages', string='13th Month',\n        help=\"Yearly gross amount the employee receives as 13th month bonus.\")\n    double_holidays = fields.Monetary(compute='_compute_holidays_advantages', string='Holiday Bonus',\n        help=\"Yearly gross amount the employee receives as holidays bonus.\")\n    warrant_value_employee = fields.Monetary(compute='_compute_warrants_cost', string=\"Warrant value for the employee\")\n\n    # Employer costs fields\n    final_yearly_costs = fields.Monetary(compute='_compute_final_yearly_costs', readonly=False,\n        string='Total Employee Cost', groups=\"hr.group_hr_manager\",\n        help=\"Total yearly cost of the employee for the employer.\")\n    monthly_yearly_costs = fields.Monetary(compute='_compute_monthly_yearly_costs', string='Monthly Equivalent Cost', readonly=True,\n        help=\"Total monthly cost of the employee for the employer.\")\n    ucm_insurance = fields.Monetary(compute='_compute_ucm_insurance', string=\"Social Secretary Costs\")\n    social_security_contributions = fields.Monetary(compute='_compute_social_security_contributions', string=\"Social Security Contributions\")\n    yearly_cost_before_charges = fields.Monetary(compute='_compute_yearly_cost_before_charges', string=\"Yearly Costs Before Charges\")\n    meal_voucher_paid_by_employer = fields.Monetary(compute='_compute_meal_voucher_paid_by_employer', string=\"Meal Voucher Paid by Employer\")\n    company_car_total_depreciated_cost = fields.Monetary()\n    public_transport_reimbursed_amount = fields.Monetary(string='Reimbursed amount',\n        compute='_compute_public_transport_reimbursed_amount', readonly=False, store=True)\n    others_reimbursed_amount = fields.Monetary(string='Reimbursed amount')\n    transport_employer_cost = fields.Monetary(compute='_compute_transport_employer_cost', string=\"Employer cost from employee transports\")\n    warrants_cost = fields.Monetary(compute='_compute_warrants_cost')\n\n    # Advantages\n    commission_on_target = fields.Monetary(string=\"Commission on Target\",\n        default=lambda self: self.get_attribute('commission_on_target', 'default_value'),\n        help=\"Monthly gross amount that the employee receives if the target is reached.\")\n    fuel_card = fields.Monetary(string=\"Fuel Card\",\n        default=lambda self: self.get_attribute('fuel_card', 'default_value'),\n        help=\"Monthly amount the employee receives on his fuel card.\")\n    internet = fields.Monetary(string=\"Internet\",\n        default=lambda self: self.get_attribute('internet', 'default_value'),\n        help=\"The employee's internet subcription will be paid up to this amount.\")\n    representation_fees = fields.Monetary(string=\"Representation Fees\",\n        default=lambda self: self.get_attribute('representation_fees', 'default_value'),\n        help=\"Monthly net amount the employee receives to cover his representation fees.\")\n    mobile = fields.Monetary(string=\"Mobile\",\n        default=lambda self: self.get_attribute('mobile', 'default_value'),\n        help=\"The employee's mobile subscription will be paid up to this amount.\")\n    mobile_plus = fields.Monetary(string=\"International Communication\",\n        default=lambda self: self.get_attribute('mobile_plus', 'default_value'),\n        help=\"The employee's mobile subscription for international communication will be paid up to this amount.\")\n    meal_voucher_amount = fields.Monetary(string=\"Meal Vouchers\",\n        default=lambda self: self.get_attribute('meal_voucher_amount', 'default_value'),\n        help=\"Amount the employee receives in the form of meal vouchers per worked day.\")\n    holidays = fields.Float(string='Legal Leaves',\n        default=lambda self: self.get_attribute('holidays', 'default_value'),\n        help=\"Number of days of paid leaves the employee gets per year.\")\n    holidays_editable = fields.Boolean(string=\"Editable Leaves\", default=True)\n    holidays_compensation = fields.Monetary(compute='_compute_holidays_compensation', string=\"Holidays Compensation\")\n    wage_with_holidays = fields.Monetary(compute='_compute_wage_with_holidays', inverse='_inverse_wage_with_holidays', string=\"Wage update with holidays retenues\")\n    additional_net_amount = fields.Monetary(string=\"Net Supplements\",\n        help=\"Monthly net amount the employee receives.\")\n    retained_net_amount = fields.Monetary(sting=\"Net Retained\",\n        help=\"Monthly net amount that is retained on the employee's salary.\")\n    eco_checks = fields.Monetary(\"Eco Vouchers\",\n        default=lambda self: self.get_attribute('eco_checks', 'default_value'),\n        help=\"Yearly amount the employee receives in the form of eco vouchers.\")\n\n    @api.depends('holidays', 'wage', 'final_yearly_costs')\n    def _compute_wage_with_holidays(self):\n        for contract in self:\n            if contract.holidays > 20.0:\n                yearly_cost = contract.final_yearly_costs * (1.0 - (contract.holidays - 20.0) / 231.0)\n                contract.wage_with_holidays = contract._get_gross_from_employer_costs(yearly_cost)\n            else:\n                contract.wage_with_holidays = contract.wage\n\n    def _inverse_wage_with_holidays(self):\n        for contract in self:\n            if contract.holidays > 20.0:\n                remaining_for_gross = contract.wage_with_holidays * (13.0 + 13.0 * 0.3507 + 0.92)\n                yearly_cost = remaining_for_gross \\\n                    + 12.0 * contract.representation_fees \\\n                    + 12.0 * contract.fuel_card \\\n                    + 12.0 * contract.internet \\\n                    + 12.0 * (contract.mobile + contract.mobile_plus) \\\n                    + 12.0 * contract.transport_employer_cost \\\n                    + contract.warrants_cost \\\n                    + 220.0 * contract.meal_voucher_paid_by_employer\n                contract.final_yearly_costs = yearly_cost / (1.0 - (contract.holidays - 20.0) / 231.0)\n                contract.wage = contract._get_gross_from_employer_costs(contract.final_yearly_costs)\n            else:\n                contract.wage = contract.wage_with_holidays\n\n    @api.depends('transport_mode', 'company_car_total_depreciated_cost',\n        'public_transport_reimbursed_amount', 'others_reimbursed_amount')\n    def _compute_transport_employer_cost(self):\n        for contract in self:\n            if contract.transport_mode == 'company_car':\n                contract.transport_employer_cost = contract.company_car_total_depreciated_cost\n            elif contract.transport_mode == 'public_transport':\n                contract.transport_employer_cost = contract.public_transport_reimbursed_amount\n            elif contract.transport_mode == 'others':\n                contract.transport_employer_cost = contract.others_reimbursed_amount\n\n    @api.depends('commission_on_target')\n    def _compute_warrants_cost(self):\n        for contract in self:\n            contract.warrants_cost = contract.commission_on_target * 1.326 * 1.05 * 12.0\n            contract.warrant_value_employee = contract.commission_on_target * 1.326 * (1.00 - 0.535) * 12.0\n\n    @api.depends('wage', 'fuel_card', 'representation_fees', 'transport_employer_cost',\n        'internet', 'mobile', 'mobile_plus')\n    def _compute_yearly_cost_before_charges(self):\n        for contract in self:\n            contract.yearly_cost_before_charges = 12.0 * (\n                contract.wage * (1.0 + 1.0 / 12.0) +\n                contract.fuel_card +\n                contract.representation_fees +\n                contract.internet +\n                contract.mobile +\n                contract.mobile_plus +\n                contract.transport_employer_cost\n            )\n\n    @api.depends('yearly_cost_before_charges', 'social_security_contributions', 'wage',\n        'social_security_contributions', 'double_holidays', 'warrants_cost', 'meal_voucher_paid_by_employer')\n    def _compute_final_yearly_costs(self):\n        for contract in self:\n            contract.final_yearly_costs = (\n                contract.yearly_cost_before_charges +\n                contract.social_security_contributions +\n                contract.double_holidays +\n                contract.warrants_cost +\n                (220.0 * contract.meal_voucher_paid_by_employer)\n            )\n\n    @api.depends('holidays', 'final_yearly_costs')\n    def _compute_holidays_compensation(self):\n        for contract in self:\n            if contract.holidays < 20:\n                decrease_amount = contract.final_yearly_costs * (20.0 - contract.holidays) / 231.0\n                contract.holidays_compensation = decrease_amount\n            else:\n                contract.holidays_compensation = 0.0\n\n    @api.onchange('final_yearly_costs')\n    def _onchange_final_yearly_costs(self):\n        self.wage = self._get_gross_from_employer_costs(self.final_yearly_costs)\n\n    @api.depends('meal_voucher_amount')\n    def _compute_meal_voucher_paid_by_employer(self):\n        for contract in self:\n            contract.meal_voucher_paid_by_employer = contract.meal_voucher_amount * (1 - 0.1463)\n\n    @api.depends('wage')\n    def _compute_social_security_contributions(self):\n        for contract in self:\n            total_wage = contract.wage * 13.0\n            contract.social_security_contributions = (total_wage) * 0.3507\n\n    @api.depends('wage')\n    def _compute_ucm_insurance(self):\n        for contract in self:\n            contract.ucm_insurance = (contract.wage * 12.0) * 0.05\n\n    @api.depends('public_transport_employee_amount')\n    def _compute_public_transport_reimbursed_amount(self):\n        for contract in self:\n            contract.public_transport_reimbursed_amount = contract._get_public_transport_reimbursed_amount(contract.public_transport_employee_amount)\n\n    def _get_public_transport_reimbursed_amount(self, amount):\n        return amount * 0.68\n\n    @api.depends('final_yearly_costs')\n    def _compute_monthly_yearly_costs(self):\n        for contract in self:\n            contract.monthly_yearly_costs = contract.final_yearly_costs / 12.0\n\n    @api.depends('wage')\n    def _compute_holidays_advantages(self):\n        for contract in self:\n            contract.double_holidays = contract.wage * 0.92\n            contract.thirteen_month = contract.wage\n\n    @api.onchange('transport_mode')\n    def _onchange_transport_mode(self):\n        if self.transport_mode != 'company_car':\n            self.fuel_card = 0\n            self.company_car_total_depreciated_cost = 0\n        if self.transport_mode != 'others':\n            self.others_reimbursed_amount = 0\n        if self.transport_mode != 'public_transports':\n            self.public_transport_reimbursed_amount = 0\n\n    @api.onchange('mobile', 'mobile_plus')\n    def _onchange_mobile(self):\n        if self.mobile_plus and not self.mobile:\n            raise ValidationError(_('You should have a mobile subscription to select an international communication amount!'))\n\n    def _get_internet_amount(self, has_internet):\n        if has_internet:\n            return self.get_attribute('internet', 'default_value')\n        else:\n            return 0.0\n\n    def _get_mobile_amount(self, has_mobile, international_communication):\n        if has_mobile and international_communication:\n            return self.get_attribute('mobile', 'default_value') + self.get_attribute('mobile_plus', 'default_value')\n        elif has_mobile:\n            return self.get_attribute('mobile', 'default_value')\n        else:\n            return 0.0\n\n    def _get_gross_from_employer_costs(self, yearly_cost):\n        contract = self\n        remaining_for_gross = yearly_cost \\\n            - 12.0 * contract.representation_fees \\\n            - 12.0 * contract.fuel_card \\\n            - 12.0 * contract.internet \\\n            - 12.0 * (contract.mobile + contract.mobile_plus) \\\n            - 12.0 * contract.transport_employer_cost \\\n            - contract.warrants_cost \\\n            - 220.0 * contract.meal_voucher_paid_by_employer\n        gross = remaining_for_gross / (13.0 + 13.0 * 0.3507 + 0.92)\n        return gross\n\n\nclass HrEmployee(models.Model):\n    _inherit = 'hr.employee'\n\n    spouse_fiscal_status = fields.Selection([\n        ('without income', 'Without Income'),\n        ('with income', 'With Income')\n    ], string='Tax status for spouse', groups=\"hr.group_hr_user\")\n    disabled = fields.Boolean(string=\"Disabled\", help=\"If the employee is declared disabled by law\", groups=\"hr.group_hr_user\")\n    disabled_spouse_bool = fields.Boolean(string='Disabled Spouse', help='if recipient spouse is declared disabled by law', groups=\"hr.group_hr_user\")\n    disabled_children_bool = fields.Boolean(string='Disabled Children', help='if recipient children is/are declared disabled by law', groups=\"hr.group_hr_user\")\n    resident_bool = fields.Boolean(string='Nonresident', help='if recipient lives in a foreign country', groups=\"hr.group_hr_user\")\n    disabled_children_number = fields.Integer('Number of disabled children', groups=\"hr.group_hr_user\")\n    dependent_children = fields.Integer(compute='_compute_dependent_children', string='Considered number of dependent children', groups=\"hr.group_hr_user\")\n    other_dependent_people = fields.Boolean(string=\"Other Dependent People\", help=\"If other people are dependent on the employee\", groups=\"hr.group_hr_user\")\n    other_senior_dependent = fields.Integer('# seniors (>=65)', help=\"Number of seniors dependent on the employee, including the disabled ones\", groups=\"hr.group_hr_user\")\n    other_disabled_senior_dependent = fields.Integer('# disabled seniors (>=65)', groups=\"hr.group_hr_user\")\n    other_juniors_dependent = fields.Integer('# people (<65)', help=\"Number of juniors dependent on the employee, including the disabled ones\", groups=\"hr.group_hr_user\")\n    other_disabled_juniors_dependent = fields.Integer('# disabled people (<65)', groups=\"hr.group_hr_user\")\n    dependent_seniors = fields.Integer(compute='_compute_dependent_people', string=\"Considered number of dependent seniors\", groups=\"hr.group_hr_user\")\n    dependent_juniors = fields.Integer(compute='_compute_dependent_people', string=\"Considered number of dependent juniors\", groups=\"hr.group_hr_user\")\n    spouse_net_revenue = fields.Float(string=\"Spouse Net Revenue\", help=\"Own professional income, other than pensions, annuities or similar income\", groups=\"hr.group_hr_user\")\n    spouse_other_net_revenue = fields.Float(string=\"Spouse Other Net Revenue\",\n        help='Own professional income which is exclusively composed of pensions, annuities or similar income', groups=\"hr.group_hr_user\")\n\n    @api.constrains('spouse_fiscal_status', 'spouse_net_revenue', 'spouse_other_net_revenue')\n    def _check_spouse_revenue(self):\n        for employee in self:\n            if employee.spouse_fiscal_status == 'with income' and not employee.spouse_net_revenue and not employee.spouse_other_net_revenue:\n                raise ValidationError(_(\"The revenue for the spouse can't be equal to zero is the fiscal status is 'With Income'.\"))\n\n    @api.onchange('spouse_fiscal_status')\n    def _onchange_spouse_fiscal_status(self):\n        self.spouse_net_revenue = 0.0\n        self.spouse_other_net_revenue = 0.0\n\n    @api.onchange('disabled_children_bool')\n    def _onchange_disabled_children_bool(self):\n        self.disabled_children_number = 0\n\n    @api.onchange('other_dependent_people')\n    def _onchange_other_dependent_people(self):\n        self.other_senior_dependent = 0.0\n        self.other_disabled_senior_dependent = 0.0\n        self.other_juniors_dependent = 0.0\n        self.other_disabled_juniors_dependent = 0.0\n\n    @api.depends('disabled_children_bool', 'disabled_children_number', 'children')\n    def _compute_dependent_children(self):\n        for employee in self:\n            if employee.disabled_children_bool:\n                employee.dependent_children = employee.children + employee.disabled_children_number\n            else:\n                employee.dependent_children = employee.children\n\n    @api.depends('other_dependent_people', 'other_senior_dependent',\n        'other_disabled_senior_dependent', 'other_juniors_dependent', 'other_disabled_juniors_dependent')\n    def _compute_dependent_people(self):\n        for employee in self:\n            employee.dependent_seniors = employee.other_senior_dependent + employee.other_disabled_senior_dependent\n            employee.dependent_juniors = employee.other_juniors_dependent + employee.other_disabled_juniors_dependent\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "l10n_be_hr_payroll.py", "id": "a7bf718a402de257b7c94d8380825133", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/l10n_be_hr_payroll/models/l10n_be_hr_payroll.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}