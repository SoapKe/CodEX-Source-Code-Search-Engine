{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.git_stash import match, get_new_command\nfrom thefuck.types import Command\n\n\ncherry_pick_error = (\n    'error: Your local changes would be overwritten by cherry-pick.\\n'\n    'hint: Commit your changes or stash them to proceed.\\n'\n    'fatal: cherry-pick failed')\n\n\nrebase_error = (\n    'Cannot rebase: Your index contains uncommitted changes.\\n'\n    'Please commit or stash them.')\n\n\n@pytest.mark.parametrize('command', [\n    Command('git cherry-pick a1b2c3d', cherry_pick_error),\n    Command('git rebase -i HEAD~7', rebase_error)])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('git cherry-pick a1b2c3d', ''),\n    Command('git rebase -i HEAD~7', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('command, new_command', [\n    (Command('git cherry-pick a1b2c3d', cherry_pick_error),\n     'git stash && git cherry-pick a1b2c3d'),\n    (Command('git rebase -i HEAD~7', rebase_error),\n     'git stash && git rebase -i HEAD~7')])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command) == new_command\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.git_stash import match, get_new_command\nfrom thefuck.types import Command\n\n\ncherry_pick_error = (\n    'error: Your local changes would be overwritten by cherry-pick.\\n'\n    'hint: Commit your changes or stash them to proceed.\\n'\n    'fatal: cherry-pick failed')\n\n\nrebase_error = (\n    'Cannot rebase: Your index contains uncommitted changes.\\n'\n    'Please commit or stash them.')\n\n\n@pytest.mark.parametrize('command', [\n    Command('git cherry-pick a1b2c3d', cherry_pick_error),\n    Command('git rebase -i HEAD~7', rebase_error)])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('git cherry-pick a1b2c3d', ''),\n    Command('git rebase -i HEAD~7', '')])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('command, new_command', [\n    (Command('git cherry-pick a1b2c3d', cherry_pick_error),\n     'git stash && git cherry-pick a1b2c3d'),\n    (Command('git rebase -i HEAD~7', rebase_error),\n     'git stash && git rebase -i HEAD~7')])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command) == new_command\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_git_stash.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_git_stash.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}