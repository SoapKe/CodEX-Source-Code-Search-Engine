{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import datetime, timedelta\n\nfrom odoo.exceptions import ValidationError\nfrom odoo.tests.common import TransactionCase\nfrom odoo.exceptions import AccessError, UserError\n\n\nclass StockQuant(TransactionCase):\n    def setUp(self):\n        super(StockQuant, self).setUp()\n        Users = self.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n        self.demo_user = Users.create({\n            'name': 'Pauline Poivraisselle',\n            'login': 'pauline',\n            'email': 'p.p@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [self.env.ref('base.group_user').id])]\n        })\n        self.stock_user = Users.create({\n            'name': 'Pauline Poivraisselle',\n            'login': 'pauline2',\n            'email': 'p.p@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [self.env.ref('stock.group_stock_user').id])]\n        })\n\n    def test_get_available_quantity_1(self):\n        \"\"\" Quantity availability with only one quant in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n\n    def test_get_available_quantity_2(self):\n        \"\"\" Quantity availability with multiple quants in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(3):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 3.0)\n\n    def test_get_available_quantity_3(self):\n        \"\"\" Quantity availability with multiple quants (including negatives ones) in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(3):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': -3.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_get_available_quantity_4(self):\n        \"\"\" Quantity availability with no quants in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_get_available_quantity_5(self):\n        \"\"\" Quantity availability with multiple partially reserved quants in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 9.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n            'reserved_quantity': 1.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n\n    def test_get_available_quantity_6(self):\n        \"\"\" Quantity availability with multiple partially reserved quants in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 20.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 5.0,\n            'reserved_quantity': 0.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, allow_negative=True), -5.0)\n\n    def test_get_available_quantity_7(self):\n        \"\"\" Quantity availability with only one tracked quant in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'lot',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 20.0,\n            'lot_id': lot1.id,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 0.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1, allow_negative=True), -10.0)\n\n    def test_get_available_quantity_8(self):\n        \"\"\" Quantity availability with a consumable product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'consu',\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 0)\n        with self.assertRaises(ValidationError):\n            self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n\n    def test_get_available_quantity_9(self):\n        \"\"\" Quantity availability by a demo user with access rights/rules.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n        })\n        self.env = self.env(user=self.env.ref('base.user_demo'))\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n\n    def test_increase_available_quantity_1(self):\n        \"\"\" Increase the available quantity when no quants are already in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n\n    def test_increase_available_quantity_2(self):\n        \"\"\" Increase the available quantity when multiple quants are already in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(2):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 3.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n\n    def test_increase_available_quantity_3(self):\n        \"\"\" Increase the available quantity when a concurrent transaction is already increasing\n        the reserved quanntity for the same product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product = self.env.ref('stock.test_quant_product')\n        product.type = 'product'  \n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 10.0)\n\n        \n        \n        cr2 = self.registry.cursor()\n        cr2.execute(\"SELECT id FROM stock_quant WHERE product_id=%s AND location_id=%s\", (product.id, stock_location.id))\n        quant_id = cr2.fetchone()\n        cr2.execute(\"SELECT 1 FROM stock_quant WHERE id=%s FOR UPDATE\", quant_id)\n\n        self.env['stock.quant']._update_available_quantity(product, stock_location, 1.0)\n        cr2.rollback()\n        cr2.close()\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 11.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product, stock_location)), 2)\n\n    def test_increase_available_quantity_4(self):\n        \"\"\" Increase the available quantity when no quants are already in a location with a user without access right.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env = self.env(user=self.env.ref('base.user_demo'))\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n\n    def test_increase_available_quantity_5(self):\n        \"\"\" Increase the available quantity when no quants are already in stock.\n        Increase a subLocation and check that quants are in this location. Also test inverse.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        stock_sub_location = stock_location.child_ids[0]\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        product2 = self.env['product.product'].create({\n            'name': 'Product B',\n            'type': 'product',\n        })\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.env['stock.quant']._update_available_quantity(product1, stock_sub_location, 1.0)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_sub_location), 1.0)\n\n        self.env['stock.quant']._update_available_quantity(product2, stock_sub_location, 1.0)\n        self.env['stock.quant']._update_available_quantity(product2, stock_location, 1.0)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product2, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product2, stock_sub_location), 1.0)\n\n    def test_increase_available_quantity_6(self):\n        \"\"\" Increasing the available quantity in a view location should be forbidden.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        location1 = self.env['stock.location'].create({\n            'name': 'viewloc1',\n            'usage': 'view',\n            'location_id': stock_location.id,\n        })\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        with self.assertRaises(ValidationError):\n            self.env['stock.quant']._update_available_quantity(product1, location1, 1.0)\n\n    def test_increase_available_quantity_7(self):\n        \"\"\" Setting a location's usage as \"view\" should be forbidden if it already\n        contains quant.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        self.assertTrue(len(stock_location.quant_ids.ids) > 0)\n        with self.assertRaises(UserError):\n            stock_location.usage = 'view'\n\n    def test_decrease_available_quantity_1(self):\n        \"\"\" Decrease the available quantity when no quants are already in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, -1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, allow_negative=True), -1.0)\n\n    def test_decrease_available_quantity_2(self):\n        \"\"\" Decrease the available quantity when multiple quants are already in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(2):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, -1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n\n    def test_decrease_available_quantity_3(self):\n        \"\"\" Decrease the available quantity when a concurrent transaction is already increasing\n        the reserved quanntity for the same product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product = self.env.ref('stock.test_quant_product')\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 10.0)\n        quants = self.env['stock.quant']._gather(product, stock_location)\n        self.assertEqual(len(quants), 1)\n\n        \n        \n        cr2 = self.registry.cursor()\n        cr2.execute(\"SELECT 1 FROM stock_quant WHERE id = %s FOR UPDATE\", quants.ids)\n        self.env['stock.quant']._update_available_quantity(product, stock_location, -1.0)\n        cr2.rollback()\n        cr2.close()\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 9.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product, stock_location)), 2)\n\n    def test_decrease_available_quantity_4(self):\n        \"\"\" Decrease the available quantity that delete the quant. The active user should have\n        read,write and unlink rights\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n        })\n        self.env = self.env(user=self.demo_user)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, -1.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 0)\n\n    def test_increase_reserved_quantity_1(self):\n        \"\"\" Increase the reserved quantity of quantity x when there's a single quant in a given\n        location which has an available quantity of x.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 10.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 10.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n\n    def test_increase_reserved_quantity_2(self):\n        \"\"\" Increase the reserved quantity of quantity x when there's two quants in a given\n        location which have an available quantity of x together.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(2):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 5.0,\n            })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 10.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 10.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n\n    def test_increase_reserved_quantity_3(self):\n        \"\"\" Increase the reserved quantity of quantity x when there's multiple quants in a given\n        location which have an available quantity of x together.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 5.0,\n            'reserved_quantity': 2.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 12.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 8.0,\n            'reserved_quantity': 3.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 35.0,\n            'reserved_quantity': 12.0,\n        })\n        \n        \n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 29.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 4)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 10.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 19.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 4)\n\n    def test_increase_reserved_quantity_4(self):\n        \"\"\" Increase the reserved quantity of quantity x when there's multiple quants in a given\n        location which have an available quantity of x together.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 5.0,\n            'reserved_quantity': 7.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 12.0,\n            'reserved_quantity': 10.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 10.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_increase_reserved_quantity_5(self):\n        \"\"\" Decrease the available quantity when no quant are in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_decrease_reserved_quantity_1(self):\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 10.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -10.0, strict=True)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 10.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n\n    def test_increase_decrease_reserved_quantity_1(self):\n        \"\"\" Decrease then increase reserved quantity when no quant are in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -1.0, strict=True)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_action_done_1(self):\n        stock_location = self.env.ref('stock.stock_location_stock')\n        pack_location = self.env.ref('stock.location_pack_zone')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -2.0, strict=True)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, -2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.env['stock.quant']._update_available_quantity(product1, pack_location, 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, pack_location), 2.0)\n\n    def test_mix_tracked_untracked_1(self):\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'serial',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n\n        \n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, strict=True), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 1.0)\n\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1.0, lot_id=lot1, strict=True)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, strict=True), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 0.0)\n\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -1.0, lot_id=lot1, strict=True)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, strict=True), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 1.0)\n\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -1.0, strict=True)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, strict=True), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 1.0)\n\n    def test_access_rights_1(self):\n        \"\"\" Directly update the quant with a user with or without stock access rights sould raise\n        an AccessError.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        quant = self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n        })\n        self.env = self.env(user=self.demo_user)\n        with self.assertRaises(AccessError):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        with self.assertRaises(AccessError):\n            quant.sudo(self.demo_user).write({'quantity': 2.0})\n        with self.assertRaises(AccessError):\n            quant.sudo(self.demo_user).unlink()\n\n        self.env = self.env(user=self.stock_user)\n        with self.assertRaises(AccessError):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        with self.assertRaises(AccessError):\n            quant.sudo(self.demo_user).write({'quantity': 2.0})\n        with self.assertRaises(AccessError):\n            quant.sudo(self.demo_user).unlink()\n\n    def test_in_date_1(self):\n        \"\"\" Check that no incoming date is set when updating the quantity of an untracked quant.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        quantity, in_date = self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.assertEqual(quantity, 1)\n        self.assertEqual(in_date, None)\n\n    def test_in_date_2(self):\n        \"\"\" Check that an incoming date is correctly set when updating the quantity of a tracked\n        quant.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'serial',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n        quantity, in_date = self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1)\n        self.assertEqual(quantity, 1)\n        self.assertNotEqual(in_date, None)\n\n    def test_in_date_3(self):\n        \"\"\" Check that the FIFO strategies correctly applies when you have multiple lot received\n        at different times for a tracked product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'serial',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n        lot2 = self.env['stock.production.lot'].create({\n            'name': 'lot2',\n            'product_id': product1.id,\n        })\n        in_date_lot1 = datetime.now()\n        in_date_lot2 = datetime.now() - timedelta(days=5)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1, in_date=in_date_lot1)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot2, in_date=in_date_lot2)\n\n        quants = self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1)\n\n        \n        self.assertEqual(quants[0][0].lot_id.id, lot2.id)\n\n    def test_in_date_4(self):\n        \"\"\" Check that the LIFO strategies correctly applies when you have multiple lot received\n        at different times for a tracked product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        lifo_strategy = self.env['product.removal'].search([('method', '=', 'lifo')])\n        stock_location.removal_strategy_id = lifo_strategy\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'serial',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n        lot2 = self.env['stock.production.lot'].create({\n            'name': 'lot2',\n            'product_id': product1.id,\n        })\n        in_date_lot1 = datetime.now()\n        in_date_lot2 = datetime.now() - timedelta(days=5)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1, in_date=in_date_lot1)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot2, in_date=in_date_lot2)\n\n        quants = self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1)\n\n        \n        self.assertEqual(quants[0][0].lot_id.id, lot1.id)\n\n    def test_in_date_5(self):\n        \"\"\" Receive the same lot at different times, once they're in the same location, the quants\n        are merged and only the earliest incoming date is kept.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'lot',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n\n        in_date1 = datetime.now()\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1, in_date=in_date1)\n\n        quant = self.env['stock.quant'].search([\n            ('product_id', '=', product1.id),\n            ('location_id', '=', stock_location.id),\n        ])\n        self.assertEqual(len(quant), 1)\n        self.assertEqual(quant.quantity, 1)\n        self.assertEqual(quant.lot_id.id, lot1.id)\n        from odoo.fields import Datetime\n        self.assertEqual(quant.in_date, Datetime.to_string(in_date1))\n\n        in_date2 = datetime.now() - timedelta(days=5)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1, in_date=in_date2)\n\n        quant = self.env['stock.quant'].search([\n            ('product_id', '=', product1.id),\n            ('location_id', '=', stock_location.id),\n        ])\n        self.assertEqual(len(quant), 1)\n        self.assertEqual(quant.quantity, 2)\n        self.assertEqual(quant.lot_id.id, lot1.id)\n        self.assertEqual(quant.in_date, Datetime.to_string(in_date2))\n", "comments": "    quantity availability one quant location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   1 0           )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  1 0)      def test get available quantity 2(self)              quantity availability multiple quants location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         range(3)              self env  stock quant   create(                   product id   product1 id                   location id   stock location id                   quantity   1 0               )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  3 0)      def test get available quantity 3(self)              quantity availability multiple quants (including negatives ones) location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         range(3)              self env  stock quant   create(                   product id   product1 id                   location id   stock location id                   quantity   1 0               )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity    3 0           )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)      def test get available quantity 4(self)              quantity availability quants location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)      def test get available quantity 5(self)              quantity availability multiple partially reserved quants location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   10 0               reserved quantity   9 0           )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   1 0               reserved quantity   1 0           )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  1 0)      def test get available quantity 6(self)              quantity availability multiple partially reserved quants location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   10 0               reserved quantity   20 0           )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   5 0               reserved quantity   0 0           )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  allow negative true)   5 0)      def test get available quantity 7(self)              quantity availability one tracked quant location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product                tracking    lot            )         lot1   self env  stock production lot   create(               name    lot1                product id   product1 id           )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   10 0               reserved quantity   20 0               lot id   lot1 id           )         self assertequal(self env  stock quant    get available quantity(product1  stock location  lot id lot1)  0 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  lot id lot1  allow negative true)   10 0)      def test get available quantity 8(self)              quantity availability consumable product                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    consu            )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  0)         self assertraises(validationerror)              self env  stock quant    update available quantity(product1  stock location  1 0)      def test get available quantity 9(self)              quantity availability demo user access rights rules                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   1 0           )         self env   self env(user self env ref( base user demo ))         self assertequal(self env  stock quant    get available quantity(product1  stock location)  1 0)      def test increase available quantity 1(self)              increase available quantity quants already location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant    update available quantity(product1  stock location  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  1 0)      def test increase available quantity 2(self)              increase available quantity multiple quants already location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         range(2)              self env  stock quant   create(                   product id   product1 id                   location id   stock location id                   quantity   1 0               )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  2 0)         self env  stock quant    update available quantity(product1  stock location  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  3 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  2)      def test increase available quantity 3(self)              increase available quantity concurrent transaction already increasing         reserved quanntity product                      stock location   self env ref( stock stock location stock )         product   self env ref( stock test quant product )         product type    product     product 12 consumable default         self assertequal(self env  stock quant    get available quantity(product  stock location)  10 0)            opens new cursor select for update quant  simulate another concurrent reserved           quantity increase         cr2   self registry cursor()         cr2 execute( select id from stock quant where product id  and location id    (product id  stock location id))         quant id   cr2 fetchone()         cr2 execute( select 1 from stock quant where id  for update   quant id)          self env  stock quant    update available quantity(product  stock location  1 0)         cr2 rollback()         cr2 close()         self assertequal(self env  stock quant    get available quantity(product  stock location)  11 0)         self assertequal(len(self env  stock quant    gather(product  stock location))  2)      def test increase available quantity 4(self)              increase available quantity quants already location user without access right                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env   self env(user self env ref( base user demo ))         self env  stock quant    update available quantity(product1  stock location  1 0)      def test increase available quantity 5(self)              increase available quantity quants already stock          increase sublocation check quants location  also test inverse                      stock location   self env ref( stock stock location stock )         stock sub location   stock location child ids 0          product1   self env  product product   create(               name    product a                type    product            )         product2   self env  product product   create(               name    product b                type    product            )         self env  stock quant    update available quantity(product1  stock location  1 0)         self env  stock quant    update available quantity(product1  stock sub location  1 0)          self assertequal(self env  stock quant    get available quantity(product1  stock location)  2 0)         self assertequal(self env  stock quant    get available quantity(product1  stock sub location)  1 0)          self env  stock quant    update available quantity(product2  stock sub location  1 0)         self env  stock quant    update available quantity(product2  stock location  1 0)          self assertequal(self env  stock quant    get available quantity(product2  stock location)  2 0)         self assertequal(self env  stock quant    get available quantity(product2  stock sub location)  1 0)      def test increase available quantity 6(self)              increasing available quantity view location forbidden                      stock location   self env ref( stock stock location stock )         location1   self env  stock location   create(               name    viewloc1                usage    view                location id   stock location id           )         product1   self env  product product   create(               name    product a                type    product            )         self assertraises(validationerror)              self env  stock quant    update available quantity(product1  location1  1 0)      def test increase available quantity 7(self)              setting location usage  view  forbidden already         contains quant                      stock location   self env ref( stock stock location stock )         self asserttrue(len(stock location quant ids ids)   0)         self assertraises(usererror)              stock location usage    view       def test decrease available quantity 1(self)              decrease available quantity quants already location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant    update available quantity(product1  stock location   1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  allow negative true)   1 0)      def test decrease available quantity 2(self)              decrease available quantity multiple quants already location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         range(2)              self env  stock quant   create(                   product id   product1 id                   location id   stock location id                   quantity   1 0               )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  2 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  2)         self env  stock quant    update available quantity(product1  stock location   1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  1 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  1)      def test decrease available quantity 3(self)              decrease available quantity concurrent transaction already increasing         reserved quanntity product                      stock location   self env ref( stock stock location stock )         product   self env ref( stock test quant product )         self assertequal(self env  stock quant    get available quantity(product  stock location)  10 0)         quants   self env  stock quant    gather(product  stock location)         self assertequal(len(quants)  1)            opens new cursor select for update quant  simulate another concurrent reserved           quantity increase         cr2   self registry cursor()         cr2 execute( select 1 from stock quant where id    for update   quants ids)         self env  stock quant    update available quantity(product  stock location   1 0)         cr2 rollback()         cr2 close()         self assertequal(self env  stock quant    get available quantity(product  stock location)  9 0)         self assertequal(len(self env  stock quant    gather(product  stock location))  2)      def test decrease available quantity 4(self)              decrease available quantity delete quant  the active user         read write unlink rights                     stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   1 0           )         self env   self env(user self demo user)         self env  stock quant    update available quantity(product1  stock location   1 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  0)      def test increase reserved quantity 1(self)              increase reserved quantity quantity x single quant given         location available quantity x                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   10 0           )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  10 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  1)         self env  stock quant    update reserved quantity(product1  stock location  10 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  1)      def test increase reserved quantity 2(self)              increase reserved quantity quantity x two quants given         location available quantity x together                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         range(2)              self env  stock quant   create(                   product id   product1 id                   location id   stock location id                   quantity   5 0               )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  10 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  2)         self env  stock quant    update reserved quantity(product1  stock location  10 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  2)      def test increase reserved quantity 3(self)              increase reserved quantity quantity x multiple quants given         location available quantity x together                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   5 0               reserved quantity   2 0           )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   10 0               reserved quantity   12 0           )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   8 0               reserved quantity   3 0           )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   35 0               reserved quantity   12 0           )           total quantity  58           total reserved quantity  29         self assertequal(self env  stock quant    get available quantity(product1  stock location)  29 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  4)         self env  stock quant    update reserved quantity(product1  stock location  10 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  19 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  4)      def test increase reserved quantity 4(self)              increase reserved quantity quantity x multiple quants given         location available quantity x together                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   5 0               reserved quantity   7 0           )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   12 0               reserved quantity   10 0           )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  2)         self assertraises(usererror)              self env  stock quant    update reserved quantity(product1  stock location  10 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)      def test increase reserved quantity 5(self)              decrease available quantity quant location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self assertraises(usererror)              self env  stock quant    update reserved quantity(product1  stock location  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)      def test decrease reserved quantity 1(self)          stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   10 0               reserved quantity   10 0           )         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  1)         self env  stock quant    update reserved quantity(product1  stock location   10 0  strict true)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  10 0)         self assertequal(len(self env  stock quant    gather(product1  stock location))  1)      def test increase decrease reserved quantity 1(self)              decrease increase reserved quantity quant location                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         self assertraises(usererror)              self env  stock quant    update reserved quantity(product1  stock location  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self assertraises(usererror)              self env  stock quant    update reserved quantity(product1  stock location   1 0  strict true)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)      def test action done 1(self)          stock location   self env ref( stock stock location stock )         pack location   self env ref( stock location pack zone )         product1   self env  product product   create(               name    product a                type    product            )         self env  stock quant    update available quantity(product1  stock location  2 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  2 0)         self env  stock quant    update reserved quantity(product1  stock location  2 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self env  stock quant    update reserved quantity(product1  stock location   2 0  strict true)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  2 0)         self env  stock quant    update available quantity(product1  stock location   2 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location)  0 0)         self env  stock quant    update available quantity(product1  pack location  2 0)         self assertequal(self env  stock quant    get available quantity(product1  pack location)  2 0)      def test mix tracked untracked 1(self)          stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product                tracking    serial            )         lot1   self env  stock production lot   create(               name    lot1                product id   product1 id           )            add one tracked  one untracked         self env  stock quant    update available quantity(product1  stock location  1 0)         self env  stock quant    update available quantity(product1  stock location  1 0  lot id lot1)          self assertequal(self env  stock quant    get available quantity(product1  stock location)  2 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  strict true)  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  lot id lot1)  1 0)          self env  stock quant    update reserved quantity(product1  stock location  1 0  lot id lot1  strict true)          self assertequal(self env  stock quant    get available quantity(product1  stock location)  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  strict true)  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  lot id lot1)  0 0)          self env  stock quant    update reserved quantity(product1  stock location   1 0  lot id lot1  strict true)          self assertequal(self env  stock quant    get available quantity(product1  stock location)  2 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  strict true)  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  lot id lot1)  1 0)          self assertraises(usererror)              self env  stock quant    update reserved quantity(product1  stock location   1 0  strict true)          self assertequal(self env  stock quant    get available quantity(product1  stock location)  2 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  strict true)  1 0)         self assertequal(self env  stock quant    get available quantity(product1  stock location  lot id lot1)  1 0)      def test access rights 1(self)              directly update quant user without stock access rights sould raise         accesserror                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         quant   self env  stock quant   create(               product id   product1 id               location id   stock location id               quantity   1 0           )         self env   self env(user self demo user)         self assertraises(accesserror)              self env  stock quant   create(                   product id   product1 id                   location id   stock location id                   quantity   1 0               )         self assertraises(accesserror)              quant sudo(self demo user) write(  quantity   2 0 )         self assertraises(accesserror)              quant sudo(self demo user) unlink()          self env   self env(user self stock user)         self assertraises(accesserror)              self env  stock quant   create(                   product id   product1 id                   location id   stock location id                   quantity   1 0               )         self assertraises(accesserror)              quant sudo(self demo user) write(  quantity   2 0 )         self assertraises(accesserror)              quant sudo(self demo user) unlink()      def test date 1(self)              check incoming date set updating quantity untracked quant                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product            )         quantity  date   self env  stock quant    update available quantity(product1  stock location  1 0)         self assertequal(quantity  1)         self assertequal(in date  none)      def test date 2(self)              check incoming date correctly set updating quantity tracked         quant                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product                tracking    serial            )         lot1   self env  stock production lot   create(               name    lot1                product id   product1 id           )         quantity  date   self env  stock quant    update available quantity(product1  stock location  1 0  lot id lot1)         self assertequal(quantity  1)         self assertnotequal(in date  none)      def test date 3(self)              check fifo strategies correctly applies multiple lot received         different times tracked product                      stock location   self env ref( stock stock location stock )         product1   self env  product product   create(               name    product a                type    product                tracking    serial            )         lot1   self env  stock production lot   create(               name    lot1                product id   product1 id           )         lot2   self env  stock production lot   create(               name    lot2                product id   product1 id           )         date lot1   datetime now()         date lot2   datetime now()   timedelta(days 5)         self env  stock quant    update available quantity(product1  stock location  1 0  lot id lot1  date date lot1)         self env  stock quant    update available quantity(product1  stock location  1 0  lot id lot2  date date lot2)          quants   self env  stock quant    update reserved quantity(product1  stock location  1)            default removal strategy fifo  lot2 received received earlier          self assertequal(quants 0  0  lot id id  lot2 id)      def test date 4(self)              check lifo strategies correctly applies multiple lot received         different times tracked product                      stock location   self env ref( stock stock location stock )         lifo strategy   self env  product removal   search( ( method         lifo ) )         stock location removal strategy id   lifo strategy         product1   self env  product product   create(               name    product a                type    product                tracking    serial            )         lot1   self env  stock production lot   create(               name    lot1                product id   product1 id           )         lot2   self env  stock production lot   create(               name    lot2                product id   product1 id           )         date lot1   datetime now()         date lot2   datetime now()   timedelta(days 5)         self env  stock quant    update available quantity(product1  stock location  1 0  lot id lot1  date date lot1)         self env  stock quant    update available quantity(product1  stock location  1 0  lot id lot2  date date lot2)          quants   self env  stock quant    update reserved quantity(product1  stock location  1)            removal strategy lifo  lot1 received received later          self assertequal(quants 0  0  lot id id  lot1 id)      def test date 5(self)              receive lot different times  location  quants         merged earliest incoming date kept                     coding  utf 8        part odoo  see license file full copyright licensing details     product 12 consumable default    opens new cursor select for update quant  simulate another concurrent reserved    quantity increase    opens new cursor select for update quant  simulate another concurrent reserved    quantity increase    total quantity  58    total reserved quantity  29    add one tracked  one untracked    default removal strategy fifo  lot2 received received earlier     removal strategy lifo  lot1 received received later  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import datetime, timedelta\n\nfrom odoo.exceptions import ValidationError\nfrom odoo.tests.common import TransactionCase\nfrom odoo.exceptions import AccessError, UserError\n\n\nclass StockQuant(TransactionCase):\n    def setUp(self):\n        super(StockQuant, self).setUp()\n        Users = self.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n        self.demo_user = Users.create({\n            'name': 'Pauline Poivraisselle',\n            'login': 'pauline',\n            'email': 'p.p@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [self.env.ref('base.group_user').id])]\n        })\n        self.stock_user = Users.create({\n            'name': 'Pauline Poivraisselle',\n            'login': 'pauline2',\n            'email': 'p.p@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [self.env.ref('stock.group_stock_user').id])]\n        })\n\n    def test_get_available_quantity_1(self):\n        \"\"\" Quantity availability with only one quant in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n\n    def test_get_available_quantity_2(self):\n        \"\"\" Quantity availability with multiple quants in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(3):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 3.0)\n\n    def test_get_available_quantity_3(self):\n        \"\"\" Quantity availability with multiple quants (including negatives ones) in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(3):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': -3.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_get_available_quantity_4(self):\n        \"\"\" Quantity availability with no quants in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_get_available_quantity_5(self):\n        \"\"\" Quantity availability with multiple partially reserved quants in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 9.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n            'reserved_quantity': 1.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n\n    def test_get_available_quantity_6(self):\n        \"\"\" Quantity availability with multiple partially reserved quants in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 20.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 5.0,\n            'reserved_quantity': 0.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, allow_negative=True), -5.0)\n\n    def test_get_available_quantity_7(self):\n        \"\"\" Quantity availability with only one tracked quant in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'lot',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 20.0,\n            'lot_id': lot1.id,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 0.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1, allow_negative=True), -10.0)\n\n    def test_get_available_quantity_8(self):\n        \"\"\" Quantity availability with a consumable product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'consu',\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 0)\n        with self.assertRaises(ValidationError):\n            self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n\n    def test_get_available_quantity_9(self):\n        \"\"\" Quantity availability by a demo user with access rights/rules.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n        })\n        self.env = self.env(user=self.env.ref('base.user_demo'))\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n\n    def test_increase_available_quantity_1(self):\n        \"\"\" Increase the available quantity when no quants are already in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n\n    def test_increase_available_quantity_2(self):\n        \"\"\" Increase the available quantity when multiple quants are already in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(2):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 3.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n\n    def test_increase_available_quantity_3(self):\n        \"\"\" Increase the available quantity when a concurrent transaction is already increasing\n        the reserved quanntity for the same product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product = self.env.ref('stock.test_quant_product')\n        product.type = 'product'  # product 12 is a consumable by default\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 10.0)\n\n        # opens a new cursor and SELECT FOR UPDATE the quant, to simulate another concurrent reserved\n        # quantity increase\n        cr2 = self.registry.cursor()\n        cr2.execute(\"SELECT id FROM stock_quant WHERE product_id=%s AND location_id=%s\", (product.id, stock_location.id))\n        quant_id = cr2.fetchone()\n        cr2.execute(\"SELECT 1 FROM stock_quant WHERE id=%s FOR UPDATE\", quant_id)\n\n        self.env['stock.quant']._update_available_quantity(product, stock_location, 1.0)\n        cr2.rollback()\n        cr2.close()\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 11.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product, stock_location)), 2)\n\n    def test_increase_available_quantity_4(self):\n        \"\"\" Increase the available quantity when no quants are already in a location with a user without access right.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env = self.env(user=self.env.ref('base.user_demo'))\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n\n    def test_increase_available_quantity_5(self):\n        \"\"\" Increase the available quantity when no quants are already in stock.\n        Increase a subLocation and check that quants are in this location. Also test inverse.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        stock_sub_location = stock_location.child_ids[0]\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        product2 = self.env['product.product'].create({\n            'name': 'Product B',\n            'type': 'product',\n        })\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.env['stock.quant']._update_available_quantity(product1, stock_sub_location, 1.0)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_sub_location), 1.0)\n\n        self.env['stock.quant']._update_available_quantity(product2, stock_sub_location, 1.0)\n        self.env['stock.quant']._update_available_quantity(product2, stock_location, 1.0)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product2, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product2, stock_sub_location), 1.0)\n\n    def test_increase_available_quantity_6(self):\n        \"\"\" Increasing the available quantity in a view location should be forbidden.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        location1 = self.env['stock.location'].create({\n            'name': 'viewloc1',\n            'usage': 'view',\n            'location_id': stock_location.id,\n        })\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        with self.assertRaises(ValidationError):\n            self.env['stock.quant']._update_available_quantity(product1, location1, 1.0)\n\n    def test_increase_available_quantity_7(self):\n        \"\"\" Setting a location's usage as \"view\" should be forbidden if it already\n        contains quant.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        self.assertTrue(len(stock_location.quant_ids.ids) > 0)\n        with self.assertRaises(UserError):\n            stock_location.usage = 'view'\n\n    def test_decrease_available_quantity_1(self):\n        \"\"\" Decrease the available quantity when no quants are already in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, -1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, allow_negative=True), -1.0)\n\n    def test_decrease_available_quantity_2(self):\n        \"\"\" Decrease the available quantity when multiple quants are already in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(2):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, -1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n\n    def test_decrease_available_quantity_3(self):\n        \"\"\" Decrease the available quantity when a concurrent transaction is already increasing\n        the reserved quanntity for the same product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product = self.env.ref('stock.test_quant_product')\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 10.0)\n        quants = self.env['stock.quant']._gather(product, stock_location)\n        self.assertEqual(len(quants), 1)\n\n        # opens a new cursor and SELECT FOR UPDATE the quant, to simulate another concurrent reserved\n        # quantity increase\n        cr2 = self.registry.cursor()\n        cr2.execute(\"SELECT 1 FROM stock_quant WHERE id = %s FOR UPDATE\", quants.ids)\n        self.env['stock.quant']._update_available_quantity(product, stock_location, -1.0)\n        cr2.rollback()\n        cr2.close()\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product, stock_location), 9.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product, stock_location)), 2)\n\n    def test_decrease_available_quantity_4(self):\n        \"\"\" Decrease the available quantity that delete the quant. The active user should have\n        read,write and unlink rights\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n        })\n        self.env = self.env(user=self.demo_user)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, -1.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 0)\n\n    def test_increase_reserved_quantity_1(self):\n        \"\"\" Increase the reserved quantity of quantity x when there's a single quant in a given\n        location which has an available quantity of x.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 10.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 10.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n\n    def test_increase_reserved_quantity_2(self):\n        \"\"\" Increase the reserved quantity of quantity x when there's two quants in a given\n        location which have an available quantity of x together.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        for i in range(2):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 5.0,\n            })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 10.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 10.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n\n    def test_increase_reserved_quantity_3(self):\n        \"\"\" Increase the reserved quantity of quantity x when there's multiple quants in a given\n        location which have an available quantity of x together.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 5.0,\n            'reserved_quantity': 2.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 12.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 8.0,\n            'reserved_quantity': 3.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 35.0,\n            'reserved_quantity': 12.0,\n        })\n        # total quantity: 58\n        # total reserved quantity: 29\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 29.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 4)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 10.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 19.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 4)\n\n    def test_increase_reserved_quantity_4(self):\n        \"\"\" Increase the reserved quantity of quantity x when there's multiple quants in a given\n        location which have an available quantity of x together.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 5.0,\n            'reserved_quantity': 7.0,\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 12.0,\n            'reserved_quantity': 10.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 2)\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 10.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_increase_reserved_quantity_5(self):\n        \"\"\" Decrease the available quantity when no quant are in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_decrease_reserved_quantity_1(self):\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 10.0,\n            'reserved_quantity': 10.0,\n        })\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -10.0, strict=True)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 10.0)\n        self.assertEqual(len(self.env['stock.quant']._gather(product1, stock_location)), 1)\n\n    def test_increase_decrease_reserved_quantity_1(self):\n        \"\"\" Decrease then increase reserved quantity when no quant are in a location.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -1.0, strict=True)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n\n    def test_action_done_1(self):\n        stock_location = self.env.ref('stock.stock_location_stock')\n        pack_location = self.env.ref('stock.location_pack_zone')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -2.0, strict=True)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, -2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 0.0)\n        self.env['stock.quant']._update_available_quantity(product1, pack_location, 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, pack_location), 2.0)\n\n    def test_mix_tracked_untracked_1(self):\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'serial',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n\n        # add one tracked, one untracked\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, strict=True), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 1.0)\n\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1.0, lot_id=lot1, strict=True)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, strict=True), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 0.0)\n\n        self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -1.0, lot_id=lot1, strict=True)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, strict=True), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 1.0)\n\n        with self.assertRaises(UserError):\n            self.env['stock.quant']._update_reserved_quantity(product1, stock_location, -1.0, strict=True)\n\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location), 2.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, strict=True), 1.0)\n        self.assertEqual(self.env['stock.quant']._get_available_quantity(product1, stock_location, lot_id=lot1), 1.0)\n\n    def test_access_rights_1(self):\n        \"\"\" Directly update the quant with a user with or without stock access rights sould raise\n        an AccessError.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        quant = self.env['stock.quant'].create({\n            'product_id': product1.id,\n            'location_id': stock_location.id,\n            'quantity': 1.0,\n        })\n        self.env = self.env(user=self.demo_user)\n        with self.assertRaises(AccessError):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        with self.assertRaises(AccessError):\n            quant.sudo(self.demo_user).write({'quantity': 2.0})\n        with self.assertRaises(AccessError):\n            quant.sudo(self.demo_user).unlink()\n\n        self.env = self.env(user=self.stock_user)\n        with self.assertRaises(AccessError):\n            self.env['stock.quant'].create({\n                'product_id': product1.id,\n                'location_id': stock_location.id,\n                'quantity': 1.0,\n            })\n        with self.assertRaises(AccessError):\n            quant.sudo(self.demo_user).write({'quantity': 2.0})\n        with self.assertRaises(AccessError):\n            quant.sudo(self.demo_user).unlink()\n\n    def test_in_date_1(self):\n        \"\"\" Check that no incoming date is set when updating the quantity of an untracked quant.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n        })\n        quantity, in_date = self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0)\n        self.assertEqual(quantity, 1)\n        self.assertEqual(in_date, None)\n\n    def test_in_date_2(self):\n        \"\"\" Check that an incoming date is correctly set when updating the quantity of a tracked\n        quant.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'serial',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n        quantity, in_date = self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1)\n        self.assertEqual(quantity, 1)\n        self.assertNotEqual(in_date, None)\n\n    def test_in_date_3(self):\n        \"\"\" Check that the FIFO strategies correctly applies when you have multiple lot received\n        at different times for a tracked product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'serial',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n        lot2 = self.env['stock.production.lot'].create({\n            'name': 'lot2',\n            'product_id': product1.id,\n        })\n        in_date_lot1 = datetime.now()\n        in_date_lot2 = datetime.now() - timedelta(days=5)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1, in_date=in_date_lot1)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot2, in_date=in_date_lot2)\n\n        quants = self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1)\n\n        # Default removal strategy is FIFO, so lot2 should be received as it was received earlier.\n        self.assertEqual(quants[0][0].lot_id.id, lot2.id)\n\n    def test_in_date_4(self):\n        \"\"\" Check that the LIFO strategies correctly applies when you have multiple lot received\n        at different times for a tracked product.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        lifo_strategy = self.env['product.removal'].search([('method', '=', 'lifo')])\n        stock_location.removal_strategy_id = lifo_strategy\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'serial',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n        lot2 = self.env['stock.production.lot'].create({\n            'name': 'lot2',\n            'product_id': product1.id,\n        })\n        in_date_lot1 = datetime.now()\n        in_date_lot2 = datetime.now() - timedelta(days=5)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1, in_date=in_date_lot1)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot2, in_date=in_date_lot2)\n\n        quants = self.env['stock.quant']._update_reserved_quantity(product1, stock_location, 1)\n\n        # Removal strategy is LIFO, so lot1 should be received as it was received later.\n        self.assertEqual(quants[0][0].lot_id.id, lot1.id)\n\n    def test_in_date_5(self):\n        \"\"\" Receive the same lot at different times, once they're in the same location, the quants\n        are merged and only the earliest incoming date is kept.\n        \"\"\"\n        stock_location = self.env.ref('stock.stock_location_stock')\n        product1 = self.env['product.product'].create({\n            'name': 'Product A',\n            'type': 'product',\n            'tracking': 'lot',\n        })\n        lot1 = self.env['stock.production.lot'].create({\n            'name': 'lot1',\n            'product_id': product1.id,\n        })\n\n        in_date1 = datetime.now()\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1, in_date=in_date1)\n\n        quant = self.env['stock.quant'].search([\n            ('product_id', '=', product1.id),\n            ('location_id', '=', stock_location.id),\n        ])\n        self.assertEqual(len(quant), 1)\n        self.assertEqual(quant.quantity, 1)\n        self.assertEqual(quant.lot_id.id, lot1.id)\n        from odoo.fields import Datetime\n        self.assertEqual(quant.in_date, Datetime.to_string(in_date1))\n\n        in_date2 = datetime.now() - timedelta(days=5)\n        self.env['stock.quant']._update_available_quantity(product1, stock_location, 1.0, lot_id=lot1, in_date=in_date2)\n\n        quant = self.env['stock.quant'].search([\n            ('product_id', '=', product1.id),\n            ('location_id', '=', stock_location.id),\n        ])\n        self.assertEqual(len(quant), 1)\n        self.assertEqual(quant.quantity, 2)\n        self.assertEqual(quant.lot_id.id, lot1.id)\n        self.assertEqual(quant.in_date, Datetime.to_string(in_date2))\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_quant.py", "id": "bf1de2af7491fd5f367c08b38ea77bcd", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/stock/tests/test_quant.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}