{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import timedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.tools.safe_eval import safe_eval\n\n\nclass ProjectTaskType(models.Model):\n\n    _inherit = 'project.task.type'\n\n    rating_template_id = fields.Many2one(\n        'mail.template',\n        string='Rating Email Template',\n        domain=[('model', '=', 'project.task')],\n        help=\"If set and if the project's rating configuration is 'Rating when changing stage', then an email will be sent to the customer when the task reaches this step.\")\n    auto_validation_kanban_state = fields.Boolean('Automatic kanban status', default=False,\n        help=\"Automatically modify the kanban state when the customer replies to the feedback request for this stage.\\n\"\n            \" * A good feedback from the customer will update the kanban state to 'ready for the new stage' (green bullet).\\n\"\n            \" * A medium or a bad feedback will set the kanban state to 'blocked' (red bullet).\\n\")\n\n\nclass Task(models.Model):\n    _name = 'project.task'\n    _inherit = ['project.task', 'rating.mixin']\n\n    @api.multi\n    def write(self, values):\n        res = super(Task, self).write(values)\n        if 'stage_id' in values and values.get('stage_id'):\n            self.filtered(lambda x: x.project_id.rating_status == 'stage')._send_task_rating_mail(force_send=True)\n        return res\n\n    def _send_task_rating_mail(self, force_send=False):\n        for task in self:\n            rating_template = task.stage_id.rating_template_id\n            if rating_template:\n                task.rating_send_request(rating_template, lang=task.partner_id.lang, force_send=force_send)\n\n    def rating_get_partner_id(self):\n        res = super(Task, self).rating_get_partner_id()\n        if not res and self.project_id.partner_id:\n            return self.project_id.partner_id\n        return res\n\n    @api.multi\n    def rating_apply(self, rate, token=None, feedback=None, subtype=None):\n        return super(Task, self).rating_apply(rate, token=token, feedback=feedback, subtype=\"rating_project.mt_task_rating\")\n\n    def rating_get_parent_model_name(self, vals):\n        return 'project.project'\n\n    def rating_get_parent_id(self):\n        return self.project_id.id\n\n\nclass Project(models.Model):\n\n    _inherit = \"project.project\"\n\n    \n    @api.model\n    def _send_rating_all(self):\n        projects = self.search([('rating_status', '=', 'periodic'), ('rating_request_deadline', '<=', fields.Datetime.now())])\n        projects.mapped('task_ids')._send_task_rating_mail()\n        projects._compute_rating_request_deadline()\n\n    @api.depends('percentage_satisfaction_task')\n    def _compute_percentage_satisfaction_project(self):\n        domain = [('create_date', '>=', fields.Datetime.to_string(fields.datetime.now() - timedelta(days=30)))]\n        for project in self:\n            activity = project.tasks.rating_get_grades(domain)\n            project.percentage_satisfaction_project = activity['great'] * 100 / sum(activity.values()) if sum(activity.values()) else -1\n\n    @api.one\n    @api.depends('tasks.rating_ids.rating')\n    def _compute_percentage_satisfaction_task(self):\n        activity = self.tasks.rating_get_grades()\n        self.percentage_satisfaction_task = activity['great'] * 100 / sum(activity.values()) if sum(activity.values()) else -1\n\n    percentage_satisfaction_task = fields.Integer(\n        compute='_compute_percentage_satisfaction_task', string=\"Happy % on Task\", store=True, default=-1)\n    percentage_satisfaction_project = fields.Integer(\n        compute=\"_compute_percentage_satisfaction_project\", string=\"Happy % on Project\", store=True, default=-1)\n    rating_request_deadline = fields.Datetime(compute='_compute_rating_request_deadline', store=True)\n    rating_status = fields.Selection([('stage', 'Rating when changing stage'), ('periodic', 'Periodical Rating'), ('no','No rating')], 'Customer(s) Ratings', help=\"How to get the customer's feedbacks?\\n\"\n                    \"- Rating when changing stage: Email will be sent when a task/issue is pulled in another stage\\n\"\n                    \"- Periodical Rating: Email will be sent periodically\\n\\n\"\n                    \"Don't forget to set up the mail templates on the stages for which you want to get the customer's feedbacks.\", default=\"no\", required=True)\n    rating_status_period = fields.Selection([\n            ('daily', 'Daily'), ('weekly', 'Weekly'), ('bimonthly', 'Twice a Month'),\n            ('monthly', 'Once a Month'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')\n        ], 'Rating Frequency')\n\n    @api.depends('rating_status', 'rating_status_period')\n    def _compute_rating_request_deadline(self):\n        periods = {'daily': 1, 'weekly': 7, 'bimonthly': 15, 'monthly': 30, 'quarterly': 90, 'yearly': 365}\n        for project in self:\n            project.rating_request_deadline = fields.datetime.now() + timedelta(days=periods.get(project.rating_status_period, 0))\n\n    @api.multi\n    def action_view_all_rating(self):\n        \n        action = self.env['ir.actions.act_window'].for_xml_id('rating_project', 'rating_rating_action_view_project_rating')\n        action['name'] = _('Ratings of %s') % (self.name,)\n        action_context = safe_eval(action['context']) if action['context'] else {}\n        action_context.update(self._context)\n        action_context['search_default_rating_tasks'] = 1\n        return dict(action, context=action_context)\n", "comments": "    return action see rating project  activate default filters            coding  utf 8        part odoo  see license file full copyright licensing details     this method called day scheduler ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import timedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.tools.safe_eval import safe_eval\n\n\nclass ProjectTaskType(models.Model):\n\n    _inherit = 'project.task.type'\n\n    rating_template_id = fields.Many2one(\n        'mail.template',\n        string='Rating Email Template',\n        domain=[('model', '=', 'project.task')],\n        help=\"If set and if the project's rating configuration is 'Rating when changing stage', then an email will be sent to the customer when the task reaches this step.\")\n    auto_validation_kanban_state = fields.Boolean('Automatic kanban status', default=False,\n        help=\"Automatically modify the kanban state when the customer replies to the feedback request for this stage.\\n\"\n            \" * A good feedback from the customer will update the kanban state to 'ready for the new stage' (green bullet).\\n\"\n            \" * A medium or a bad feedback will set the kanban state to 'blocked' (red bullet).\\n\")\n\n\nclass Task(models.Model):\n    _name = 'project.task'\n    _inherit = ['project.task', 'rating.mixin']\n\n    @api.multi\n    def write(self, values):\n        res = super(Task, self).write(values)\n        if 'stage_id' in values and values.get('stage_id'):\n            self.filtered(lambda x: x.project_id.rating_status == 'stage')._send_task_rating_mail(force_send=True)\n        return res\n\n    def _send_task_rating_mail(self, force_send=False):\n        for task in self:\n            rating_template = task.stage_id.rating_template_id\n            if rating_template:\n                task.rating_send_request(rating_template, lang=task.partner_id.lang, force_send=force_send)\n\n    def rating_get_partner_id(self):\n        res = super(Task, self).rating_get_partner_id()\n        if not res and self.project_id.partner_id:\n            return self.project_id.partner_id\n        return res\n\n    @api.multi\n    def rating_apply(self, rate, token=None, feedback=None, subtype=None):\n        return super(Task, self).rating_apply(rate, token=token, feedback=feedback, subtype=\"rating_project.mt_task_rating\")\n\n    def rating_get_parent_model_name(self, vals):\n        return 'project.project'\n\n    def rating_get_parent_id(self):\n        return self.project_id.id\n\n\nclass Project(models.Model):\n\n    _inherit = \"project.project\"\n\n    # This method should be called once a day by the scheduler\n    @api.model\n    def _send_rating_all(self):\n        projects = self.search([('rating_status', '=', 'periodic'), ('rating_request_deadline', '<=', fields.Datetime.now())])\n        projects.mapped('task_ids')._send_task_rating_mail()\n        projects._compute_rating_request_deadline()\n\n    @api.depends('percentage_satisfaction_task')\n    def _compute_percentage_satisfaction_project(self):\n        domain = [('create_date', '>=', fields.Datetime.to_string(fields.datetime.now() - timedelta(days=30)))]\n        for project in self:\n            activity = project.tasks.rating_get_grades(domain)\n            project.percentage_satisfaction_project = activity['great'] * 100 / sum(activity.values()) if sum(activity.values()) else -1\n\n    @api.one\n    @api.depends('tasks.rating_ids.rating')\n    def _compute_percentage_satisfaction_task(self):\n        activity = self.tasks.rating_get_grades()\n        self.percentage_satisfaction_task = activity['great'] * 100 / sum(activity.values()) if sum(activity.values()) else -1\n\n    percentage_satisfaction_task = fields.Integer(\n        compute='_compute_percentage_satisfaction_task', string=\"Happy % on Task\", store=True, default=-1)\n    percentage_satisfaction_project = fields.Integer(\n        compute=\"_compute_percentage_satisfaction_project\", string=\"Happy % on Project\", store=True, default=-1)\n    rating_request_deadline = fields.Datetime(compute='_compute_rating_request_deadline', store=True)\n    rating_status = fields.Selection([('stage', 'Rating when changing stage'), ('periodic', 'Periodical Rating'), ('no','No rating')], 'Customer(s) Ratings', help=\"How to get the customer's feedbacks?\\n\"\n                    \"- Rating when changing stage: Email will be sent when a task/issue is pulled in another stage\\n\"\n                    \"- Periodical Rating: Email will be sent periodically\\n\\n\"\n                    \"Don't forget to set up the mail templates on the stages for which you want to get the customer's feedbacks.\", default=\"no\", required=True)\n    rating_status_period = fields.Selection([\n            ('daily', 'Daily'), ('weekly', 'Weekly'), ('bimonthly', 'Twice a Month'),\n            ('monthly', 'Once a Month'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly')\n        ], 'Rating Frequency')\n\n    @api.depends('rating_status', 'rating_status_period')\n    def _compute_rating_request_deadline(self):\n        periods = {'daily': 1, 'weekly': 7, 'bimonthly': 15, 'monthly': 30, 'quarterly': 90, 'yearly': 365}\n        for project in self:\n            project.rating_request_deadline = fields.datetime.now() + timedelta(days=periods.get(project.rating_status_period, 0))\n\n    @api.multi\n    def action_view_all_rating(self):\n        \"\"\" return the action to see all the rating of the project, and activate default filters \"\"\"\n        action = self.env['ir.actions.act_window'].for_xml_id('rating_project', 'rating_rating_action_view_project_rating')\n        action['name'] = _('Ratings of %s') % (self.name,)\n        action_context = safe_eval(action['context']) if action['context'] else {}\n        action_context.update(self._context)\n        action_context['search_default_rating_tasks'] = 1\n        return dict(action, context=action_context)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "project.py", "id": "a2c7a769aa78549f39a7b1d23af54051", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/rating_project/models/project.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}