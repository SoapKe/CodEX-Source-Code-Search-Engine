{"author": "ansible", "code": "import collections\nimport os\nimport sys\nimport yaml\n\ntry:\n    from libcloud.compute.types import Provider\n    from libcloud.compute.providers import get_driver\n    _ = Provider.GCE\nexcept ImportError:\n    print(\"failed=True msg='libcloud with GCE support (0.13.3+) required for this module'\")\n    sys.exit(1)\n\n\ndef add_credentials_options(parser):\n    default_service_account_email = None\n    default_pem_file = None\n    default_project_id = None\n\n    \n    if os.path.isfile('credentials.yml'):\n        credentials = yaml.load(open('credentials.yml', 'r'))\n        default_service_account_email = credentials[\n            'gce_service_account_email']\n        default_pem_file = credentials['gce_pem_file']\n        default_project_id = credentials['gce_project_id']\n\n    parser.add_option(\n        \"--service_account_email\", action=\"store\",\n        dest=\"service_account_email\", default=default_service_account_email,\n        help=\"GCE service account email. Default is loaded from credentials.yml.\")\n    parser.add_option(\n        \"--pem_file\", action=\"store\", dest=\"pem_file\",\n        default=default_pem_file,\n        help=\"GCE client key. Default is loaded from credentials.yml.\")\n    parser.add_option(\n        \"--project_id\", action=\"store\", dest=\"project_id\",\n        default=default_project_id,\n        help=\"Google Cloud project ID. Default is loaded from credentials.yml.\")\n\n\ndef check_required(opts, parser):\n    for required in ['service_account_email', 'pem_file', 'project_id']:\n        if getattr(opts, required) is None:\n            parser.error(\"Missing required parameter: --%s\" % required)\n\n\ndef get_gce_driver(opts):\n    \n    gce_cls = get_driver(Provider.GCE)\n    return gce_cls(opts.service_account_email, opts.pem_file,\n                   project=opts.project_id)\n", "comments": "  load details credentials yml    connect gce ", "content": "import collections\nimport os\nimport sys\nimport yaml\n\ntry:\n    from libcloud.compute.types import Provider\n    from libcloud.compute.providers import get_driver\n    _ = Provider.GCE\nexcept ImportError:\n    print(\"failed=True msg='libcloud with GCE support (0.13.3+) required for this module'\")\n    sys.exit(1)\n\n\ndef add_credentials_options(parser):\n    default_service_account_email = None\n    default_pem_file = None\n    default_project_id = None\n\n    # Load details from credentials.yml\n    if os.path.isfile('credentials.yml'):\n        credentials = yaml.load(open('credentials.yml', 'r'))\n        default_service_account_email = credentials[\n            'gce_service_account_email']\n        default_pem_file = credentials['gce_pem_file']\n        default_project_id = credentials['gce_project_id']\n\n    parser.add_option(\n        \"--service_account_email\", action=\"store\",\n        dest=\"service_account_email\", default=default_service_account_email,\n        help=\"GCE service account email. Default is loaded from credentials.yml.\")\n    parser.add_option(\n        \"--pem_file\", action=\"store\", dest=\"pem_file\",\n        default=default_pem_file,\n        help=\"GCE client key. Default is loaded from credentials.yml.\")\n    parser.add_option(\n        \"--project_id\", action=\"store\", dest=\"project_id\",\n        default=default_project_id,\n        help=\"Google Cloud project ID. Default is loaded from credentials.yml.\")\n\n\ndef check_required(opts, parser):\n    for required in ['service_account_email', 'pem_file', 'project_id']:\n        if getattr(opts, required) is None:\n            parser.error(\"Missing required parameter: --%s\" % required)\n\n\ndef get_gce_driver(opts):\n    # Connect to GCE\n    gce_cls = get_driver(Provider.GCE)\n    return gce_cls(opts.service_account_email, opts.pem_file,\n                   project=opts.project_id)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "gce_credentials.py", "id": "9c385b94740da30f499919154e947bf5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/legacy/gce_credentials.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}