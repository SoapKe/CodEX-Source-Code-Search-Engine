{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass ToggleIE(InfoExtractor):\n    IE_NAME = 'toggle'\n    _VALID_URL = r'https?://video\\.toggle\\.sg/(?:en|zh)/(?:[^/]+/){2,}(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://video.toggle.sg/en/series/lion-moms-tif/trailers/lion-moms-premier/343115',\n        'info_dict': {\n            'id': '343115',\n            'ext': 'mp4',\n            'title': 'Lion Moms Premiere',\n            'description': 'md5:aea1149404bff4d7f7b6da11fafd8e6b',\n            'upload_date': '20150910',\n            'timestamp': 1441858274,\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        }\n    }, {\n        'note': 'DRM-protected video',\n        'url': 'http://video.toggle.sg/en/movies/dug-s-special-mission/341413',\n        'info_dict': {\n            'id': '341413',\n            'ext': 'wvm',\n            'title': 'Dug\\'s Special Mission',\n            'description': 'md5:e86c6f4458214905c1772398fabc93e0',\n            'upload_date': '20150827',\n            'timestamp': 1440644006,\n        },\n        'params': {\n            'skip_download': 'DRM-protected wvm download',\n        }\n    }, {\n        \n        'note': 'm3u8 links are geo-restricted, but Android/mp4 is okay',\n        'url': 'http://video.toggle.sg/en/series/28th-sea-games-5-show/28th-sea-games-5-show-ep11/332861',\n        'info_dict': {\n            'id': '332861',\n            'ext': 'mp4',\n            'title': '28th SEA Games (5 Show) -  Episode  11',\n            'description': 'md5:3cd4f5f56c7c3b1340c50a863f896faa',\n            'upload_date': '20150605',\n            'timestamp': 1433480166,\n        },\n        'params': {\n            'skip_download': 'DRM-protected wvm download',\n        },\n        'skip': 'm3u8 links are geo-restricted'\n    }, {\n        'url': 'http://video.toggle.sg/en/clips/seraph-sun-aloysius-will-suddenly-sing-some-old-songs-in-high-pitch-on-set/343331',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.toggle.sg/zh/series/zero-calling-s2-hd/ep13/336367',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.toggle.sg/en/series/vetri-s2/webisodes/jeeva-is-an-orphan-vetri-s2-webisode-7/342302',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.toggle.sg/en/movies/seven-days/321936',\n        'only_matching': True,\n    }, {\n        'url': 'https://video.toggle.sg/en/tv-show/news/may-2017-cna-singapore-tonight/fri-19-may-2017/512456',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.toggle.sg/en/channels/eleven-plus/401585',\n        'only_matching': True,\n    }]\n\n    _FORMAT_PREFERENCES = {\n        'wvm-STBMain': -10,\n        'wvm-iPadMain': -20,\n        'wvm-iPhoneMain': -30,\n        'wvm-Android': -40,\n    }\n    _API_USER = 'tvpapi_147'\n    _API_PASS = '11111'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            url, video_id, note='Downloading video page')\n\n        api_user = self._search_regex(\n            r'apiUser\\s*:\\s*([\"\\'])(?P<user>.+?)\\1', webpage, 'apiUser',\n            default=self._API_USER, group='user')\n        api_pass = self._search_regex(\n            r'apiPass\\s*:\\s*([\"\\'])(?P<pass>.+?)\\1', webpage, 'apiPass',\n            default=self._API_PASS, group='pass')\n\n        params = {\n            'initObj': {\n                'Locale': {\n                    'LocaleLanguage': '',\n                    'LocaleCountry': '',\n                    'LocaleDevice': '',\n                    'LocaleUserState': 0\n                },\n                'Platform': 0,\n                'SiteGuid': 0,\n                'DomainID': '0',\n                'UDID': '',\n                'ApiUser': api_user,\n                'ApiPass': api_pass\n            },\n            'MediaID': video_id,\n            'mediaType': 0,\n        }\n\n        req = sanitized_Request(\n            'http://tvpapi.as.tvinci.com/v2_9/gateways/jsonpostgw.aspx?m=GetMediaInfo',\n            json.dumps(params).encode('utf-8'))\n        info = self._download_json(req, video_id, 'Downloading video info json')\n\n        title = info['MediaName']\n\n        formats = []\n        for video_file in info.get('Files', []):\n            video_url, vid_format = video_file.get('URL'), video_file.get('Format')\n            if not video_url or video_url == 'NA' or not vid_format:\n                continue\n            ext = determine_ext(video_url)\n            vid_format = vid_format.replace(' ', '')\n            \n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, ext='mp4', m3u8_id=vid_format,\n                    note='Downloading %s m3u8 information' % vid_format,\n                    errnote='Failed to download %s m3u8 information' % vid_format,\n                    fatal=False))\n            elif ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    video_url, video_id, mpd_id=vid_format,\n                    note='Downloading %s MPD manifest' % vid_format,\n                    errnote='Failed to download %s MPD manifest' % vid_format,\n                    fatal=False))\n            elif ext == 'ism':\n                formats.extend(self._extract_ism_formats(\n                    video_url, video_id, ism_id=vid_format,\n                    note='Downloading %s ISM manifest' % vid_format,\n                    errnote='Failed to download %s ISM manifest' % vid_format,\n                    fatal=False))\n            elif ext in ('mp4', 'wvm'):\n                \n                formats.append({\n                    'ext': ext,\n                    'url': video_url,\n                    'format_id': vid_format,\n                    'preference': self._FORMAT_PREFERENCES.get(ext + '-' + vid_format) or -1,\n                    'format_note': 'DRM-protected video' if ext == 'wvm' else None\n                })\n        if not formats:\n            \n            raise ExtractorError('No downloadable videos found', expected=True)\n        self._sort_formats(formats)\n\n        duration = int_or_none(info.get('Duration'))\n        description = info.get('Description')\n        created_at = parse_iso8601(info.get('CreationDate') or None)\n\n        average_rating = float_or_none(info.get('Rating'))\n        view_count = int_or_none(info.get('ViewCounter') or info.get('view_counter'))\n        like_count = int_or_none(info.get('LikeCounter') or info.get('like_counter'))\n\n        thumbnails = []\n        for picture in info.get('Pictures', []):\n            if not isinstance(picture, dict):\n                continue\n            pic_url = picture.get('URL')\n            if not pic_url:\n                continue\n            thumbnail = {\n                'url': pic_url,\n            }\n            pic_size = picture.get('PicSize', '')\n            m = re.search(r'(?P<width>\\d+)[xX](?P<height>\\d+)', pic_size)\n            if m:\n                thumbnail.update({\n                    'width': int(m.group('width')),\n                    'height': int(m.group('height')),\n                })\n            thumbnails.append(thumbnail)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': created_at,\n            'average_rating': average_rating,\n            'view_count': view_count,\n            'like_count': like_count,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# this also tests correct video id extraction\n# if geo-restricted, m3u8 is inaccessible, but mp4 is okay\n# wvm are drm-protected files\n# Most likely because geo-blocked\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n    sanitized_Request,\n)\n\n\nclass ToggleIE(InfoExtractor):\n    IE_NAME = 'toggle'\n    _VALID_URL = r'https?://video\\.toggle\\.sg/(?:en|zh)/(?:[^/]+/){2,}(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://video.toggle.sg/en/series/lion-moms-tif/trailers/lion-moms-premier/343115',\n        'info_dict': {\n            'id': '343115',\n            'ext': 'mp4',\n            'title': 'Lion Moms Premiere',\n            'description': 'md5:aea1149404bff4d7f7b6da11fafd8e6b',\n            'upload_date': '20150910',\n            'timestamp': 1441858274,\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        }\n    }, {\n        'note': 'DRM-protected video',\n        'url': 'http://video.toggle.sg/en/movies/dug-s-special-mission/341413',\n        'info_dict': {\n            'id': '341413',\n            'ext': 'wvm',\n            'title': 'Dug\\'s Special Mission',\n            'description': 'md5:e86c6f4458214905c1772398fabc93e0',\n            'upload_date': '20150827',\n            'timestamp': 1440644006,\n        },\n        'params': {\n            'skip_download': 'DRM-protected wvm download',\n        }\n    }, {\n        # this also tests correct video id extraction\n        'note': 'm3u8 links are geo-restricted, but Android/mp4 is okay',\n        'url': 'http://video.toggle.sg/en/series/28th-sea-games-5-show/28th-sea-games-5-show-ep11/332861',\n        'info_dict': {\n            'id': '332861',\n            'ext': 'mp4',\n            'title': '28th SEA Games (5 Show) -  Episode  11',\n            'description': 'md5:3cd4f5f56c7c3b1340c50a863f896faa',\n            'upload_date': '20150605',\n            'timestamp': 1433480166,\n        },\n        'params': {\n            'skip_download': 'DRM-protected wvm download',\n        },\n        'skip': 'm3u8 links are geo-restricted'\n    }, {\n        'url': 'http://video.toggle.sg/en/clips/seraph-sun-aloysius-will-suddenly-sing-some-old-songs-in-high-pitch-on-set/343331',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.toggle.sg/zh/series/zero-calling-s2-hd/ep13/336367',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.toggle.sg/en/series/vetri-s2/webisodes/jeeva-is-an-orphan-vetri-s2-webisode-7/342302',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.toggle.sg/en/movies/seven-days/321936',\n        'only_matching': True,\n    }, {\n        'url': 'https://video.toggle.sg/en/tv-show/news/may-2017-cna-singapore-tonight/fri-19-may-2017/512456',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.toggle.sg/en/channels/eleven-plus/401585',\n        'only_matching': True,\n    }]\n\n    _FORMAT_PREFERENCES = {\n        'wvm-STBMain': -10,\n        'wvm-iPadMain': -20,\n        'wvm-iPhoneMain': -30,\n        'wvm-Android': -40,\n    }\n    _API_USER = 'tvpapi_147'\n    _API_PASS = '11111'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            url, video_id, note='Downloading video page')\n\n        api_user = self._search_regex(\n            r'apiUser\\s*:\\s*([\"\\'])(?P<user>.+?)\\1', webpage, 'apiUser',\n            default=self._API_USER, group='user')\n        api_pass = self._search_regex(\n            r'apiPass\\s*:\\s*([\"\\'])(?P<pass>.+?)\\1', webpage, 'apiPass',\n            default=self._API_PASS, group='pass')\n\n        params = {\n            'initObj': {\n                'Locale': {\n                    'LocaleLanguage': '',\n                    'LocaleCountry': '',\n                    'LocaleDevice': '',\n                    'LocaleUserState': 0\n                },\n                'Platform': 0,\n                'SiteGuid': 0,\n                'DomainID': '0',\n                'UDID': '',\n                'ApiUser': api_user,\n                'ApiPass': api_pass\n            },\n            'MediaID': video_id,\n            'mediaType': 0,\n        }\n\n        req = sanitized_Request(\n            'http://tvpapi.as.tvinci.com/v2_9/gateways/jsonpostgw.aspx?m=GetMediaInfo',\n            json.dumps(params).encode('utf-8'))\n        info = self._download_json(req, video_id, 'Downloading video info json')\n\n        title = info['MediaName']\n\n        formats = []\n        for video_file in info.get('Files', []):\n            video_url, vid_format = video_file.get('URL'), video_file.get('Format')\n            if not video_url or video_url == 'NA' or not vid_format:\n                continue\n            ext = determine_ext(video_url)\n            vid_format = vid_format.replace(' ', '')\n            # if geo-restricted, m3u8 is inaccessible, but mp4 is okay\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, ext='mp4', m3u8_id=vid_format,\n                    note='Downloading %s m3u8 information' % vid_format,\n                    errnote='Failed to download %s m3u8 information' % vid_format,\n                    fatal=False))\n            elif ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    video_url, video_id, mpd_id=vid_format,\n                    note='Downloading %s MPD manifest' % vid_format,\n                    errnote='Failed to download %s MPD manifest' % vid_format,\n                    fatal=False))\n            elif ext == 'ism':\n                formats.extend(self._extract_ism_formats(\n                    video_url, video_id, ism_id=vid_format,\n                    note='Downloading %s ISM manifest' % vid_format,\n                    errnote='Failed to download %s ISM manifest' % vid_format,\n                    fatal=False))\n            elif ext in ('mp4', 'wvm'):\n                # wvm are drm-protected files\n                formats.append({\n                    'ext': ext,\n                    'url': video_url,\n                    'format_id': vid_format,\n                    'preference': self._FORMAT_PREFERENCES.get(ext + '-' + vid_format) or -1,\n                    'format_note': 'DRM-protected video' if ext == 'wvm' else None\n                })\n        if not formats:\n            # Most likely because geo-blocked\n            raise ExtractorError('No downloadable videos found', expected=True)\n        self._sort_formats(formats)\n\n        duration = int_or_none(info.get('Duration'))\n        description = info.get('Description')\n        created_at = parse_iso8601(info.get('CreationDate') or None)\n\n        average_rating = float_or_none(info.get('Rating'))\n        view_count = int_or_none(info.get('ViewCounter') or info.get('view_counter'))\n        like_count = int_or_none(info.get('LikeCounter') or info.get('like_counter'))\n\n        thumbnails = []\n        for picture in info.get('Pictures', []):\n            if not isinstance(picture, dict):\n                continue\n            pic_url = picture.get('URL')\n            if not pic_url:\n                continue\n            thumbnail = {\n                'url': pic_url,\n            }\n            pic_size = picture.get('PicSize', '')\n            m = re.search(r'(?P<width>\\d+)[xX](?P<height>\\d+)', pic_size)\n            if m:\n                thumbnail.update({\n                    'width': int(m.group('width')),\n                    'height': int(m.group('height')),\n                })\n            thumbnails.append(thumbnail)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': created_at,\n            'average_rating': average_rating,\n            'view_count': view_count,\n            'like_count': like_count,\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "toggle.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/toggle.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}