{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n    compat_urllib_parse_urlencode,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    qualities,\n)\n\n\nclass AddAnimeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:\\w+\\.)?add-anime\\.net/(?:watch_video\\.php\\?(?:.*?)v=|video/)(?P<id>[\\w_]+)'\n    _TESTS = [{\n        'url': 'http://www.add-anime.net/watch_video.php?v=24MR3YO5SAS9',\n        'md5': '72954ea10bc979ab5e2eb288b21425a0',\n        'info_dict': {\n            'id': '24MR3YO5SAS9',\n            'ext': 'mp4',\n            'description': 'One Piece 606',\n            'title': 'One Piece 606',\n        },\n        'skip': 'Video is gone',\n    }, {\n        'url': 'http://add-anime.net/video/MDUGWYKNGBD8/One-Piece-687',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        try:\n            webpage = self._download_webpage(url, video_id)\n        except ExtractorError as ee:\n            if not isinstance(ee.cause, compat_HTTPError) or \\\n               ee.cause.code != 503:\n                raise\n\n            redir_webpage = ee.cause.read().decode('utf-8')\n            action = self._search_regex(\n                r'<form id=\"challenge-form\" action=\"([^\"]+)\"',\n                redir_webpage, 'Redirect form')\n            vc = self._search_regex(\n                r'<input type=\"hidden\" name=\"jschl_vc\" value=\"([^\"]+)\"/>',\n                redir_webpage, 'redirect vc value')\n            av = re.search(\n                r'a\\.value = ([0-9]+)[+]([0-9]+)[*]([0-9]+);',\n                redir_webpage)\n            if av is None:\n                raise ExtractorError('Cannot find redirect math task')\n            av_res = int(av.group(1)) + int(av.group(2)) * int(av.group(3))\n\n            parsed_url = compat_urllib_parse_urlparse(url)\n            av_val = av_res + len(parsed_url.netloc)\n            confirm_url = (\n                parsed_url.scheme + '://' + parsed_url.netloc +\n                action + '?' +\n                compat_urllib_parse_urlencode({\n                    'jschl_vc': vc, 'jschl_answer': compat_str(av_val)}))\n            self._download_webpage(\n                confirm_url, video_id,\n                note='Confirming after redirect')\n            webpage = self._download_webpage(url, video_id)\n\n        FORMATS = ('normal', 'hq')\n        quality = qualities(FORMATS)\n        formats = []\n        for format_id in FORMATS:\n            rex = r\"var %s_video_file = '(.*?)';\" % re.escape(format_id)\n            video_url = self._search_regex(rex, webpage, 'video file URLx',\n                                           fatal=False)\n            if not video_url:\n                continue\n            formats.append({\n                'format_id': format_id,\n                'url': video_url,\n                'quality': quality(format_id),\n            })\n        self._sort_formats(formats)\n        video_title = self._og_search_title(webpage)\n        video_description = self._og_search_description(webpage)\n\n        return {\n            '_type': 'video',\n            'id': video_id,\n            'formats': formats,\n            'title': video_title,\n            'description': video_description\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n    compat_urllib_parse_urlencode,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    qualities,\n)\n\n\nclass AddAnimeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:\\w+\\.)?add-anime\\.net/(?:watch_video\\.php\\?(?:.*?)v=|video/)(?P<id>[\\w_]+)'\n    _TESTS = [{\n        'url': 'http://www.add-anime.net/watch_video.php?v=24MR3YO5SAS9',\n        'md5': '72954ea10bc979ab5e2eb288b21425a0',\n        'info_dict': {\n            'id': '24MR3YO5SAS9',\n            'ext': 'mp4',\n            'description': 'One Piece 606',\n            'title': 'One Piece 606',\n        },\n        'skip': 'Video is gone',\n    }, {\n        'url': 'http://add-anime.net/video/MDUGWYKNGBD8/One-Piece-687',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        try:\n            webpage = self._download_webpage(url, video_id)\n        except ExtractorError as ee:\n            if not isinstance(ee.cause, compat_HTTPError) or \\\n               ee.cause.code != 503:\n                raise\n\n            redir_webpage = ee.cause.read().decode('utf-8')\n            action = self._search_regex(\n                r'<form id=\"challenge-form\" action=\"([^\"]+)\"',\n                redir_webpage, 'Redirect form')\n            vc = self._search_regex(\n                r'<input type=\"hidden\" name=\"jschl_vc\" value=\"([^\"]+)\"/>',\n                redir_webpage, 'redirect vc value')\n            av = re.search(\n                r'a\\.value = ([0-9]+)[+]([0-9]+)[*]([0-9]+);',\n                redir_webpage)\n            if av is None:\n                raise ExtractorError('Cannot find redirect math task')\n            av_res = int(av.group(1)) + int(av.group(2)) * int(av.group(3))\n\n            parsed_url = compat_urllib_parse_urlparse(url)\n            av_val = av_res + len(parsed_url.netloc)\n            confirm_url = (\n                parsed_url.scheme + '://' + parsed_url.netloc +\n                action + '?' +\n                compat_urllib_parse_urlencode({\n                    'jschl_vc': vc, 'jschl_answer': compat_str(av_val)}))\n            self._download_webpage(\n                confirm_url, video_id,\n                note='Confirming after redirect')\n            webpage = self._download_webpage(url, video_id)\n\n        FORMATS = ('normal', 'hq')\n        quality = qualities(FORMATS)\n        formats = []\n        for format_id in FORMATS:\n            rex = r\"var %s_video_file = '(.*?)';\" % re.escape(format_id)\n            video_url = self._search_regex(rex, webpage, 'video file URLx',\n                                           fatal=False)\n            if not video_url:\n                continue\n            formats.append({\n                'format_id': format_id,\n                'url': video_url,\n                'quality': quality(format_id),\n            })\n        self._sort_formats(formats)\n        video_title = self._og_search_title(webpage)\n        video_description = self._og_search_description(webpage)\n\n        return {\n            '_type': 'video',\n            'id': video_id,\n            'formats': formats,\n            'title': video_title,\n            'description': video_description\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "addanime.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/addanime.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}