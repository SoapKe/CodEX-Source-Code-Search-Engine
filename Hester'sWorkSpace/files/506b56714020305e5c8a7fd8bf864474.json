{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (c) 2015, Manuel Sousa <manuel.sousa@gmail.com>\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_binding\nauthor: \"Manuel Sousa (@manuel-sousa)\"\nversion_added: \"2.0\"\n\nshort_description: This module manages rabbitMQ bindings\ndescription:\n  - This module uses rabbitMQ Rest API to create/delete bindings\nrequirements: [ \"requests >= 1.0.0\" ]\noptions:\n    state:\n        description:\n            - Whether the exchange should be present or absent\n            - Only present implemented atm\n        choices: [ \"present\", \"absent\" ]\n        required: false\n        default: present\n    name:\n        description:\n            - source exchange to create binding on\n        required: true\n        aliases: [ \"src\", \"source\" ]\n    login_user:\n        description:\n            - rabbitMQ user for connection\n        required: false\n        default: guest\n    login_password:\n        description:\n            - rabbitMQ password for connection\n        required: false\n        default: false\n    login_host:\n        description:\n            - rabbitMQ host for connection\n        required: false\n        default: localhost\n    login_port:\n        description:\n            - rabbitMQ management api port\n        required: false\n        default: 15672\n    vhost:\n        description:\n            - rabbitMQ virtual host\n            - default vhost is /\n        required: false\n        default: \"/\"\n    destination:\n        description:\n            - destination exchange or queue for the binding\n        required: true\n        aliases: [ \"dst\", \"dest\" ]\n    destination_type:\n        description:\n            - Either queue or exchange\n        required: true\n        choices: [ \"queue\", \"exchange\" ]\n        aliases: [ \"type\", \"dest_type\" ]\n    routing_key:\n        description:\n            - routing key for the binding\n            - default is \n        required: false\n        default: \"\"\n    arguments:\n        description:\n            - extra arguments for exchange. If defined this argument is a key/value dictionary\n        required: false\n        default: {}\n'''\n\nEXAMPLES = '''\n Bind myQueue to directExchange with routing key info\n- rabbitmq_binding:\n    name: directExchange\n    destination: myQueue\n    type: queue\n    routing_key: info\n\n Bind directExchange to topicExchange with routing key *.info\n- rabbitmq_binding:\n    name: topicExchange\n    destination: topicExchange\n    type: exchange\n    routing_key: '*.info'\n'''\n\nimport json\n\ntry:\n    import requests\n    HAS_REQUESTS = True\nexcept ImportError:\n    HAS_REQUESTS = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib import parse as urllib_parse\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(default='present', choices=['present', 'absent'], type='str'),\n            name=dict(required=True, aliases=[\"src\", \"source\"], type='str'),\n            login_user=dict(default='guest', type='str'),\n            login_password=dict(default='guest', type='str', no_log=True),\n            login_host=dict(default='localhost', type='str'),\n            login_port=dict(default='15672', type='str'),\n            vhost=dict(default='/', type='str'),\n            destination=dict(required=True, aliases=[\"dst\", \"dest\"], type='str'),\n            destination_type=dict(required=True, aliases=[\"type\", \"dest_type\"], choices=[\"queue\", \"exchange\"], type='str'),\n            routing_key=dict(default='', type='str'),\n            arguments=dict(default=dict(), type='dict')\n        ),\n        supports_check_mode=True\n    )\n\n    if not HAS_REQUESTS:\n        module.fail_json(msg=\"requests library is required for this module. To install, use `pip install requests`\")\n    result = dict(changed=False, name=module.params['name'])\n\n    if module.params['destination_type'] == \"queue\":\n        dest_type = \"q\"\n    else:\n        dest_type = \"e\"\n\n    if module.params['routing_key'] == \"\":\n        props = \"~\"\n    else:\n        props = urllib_parse.quote(module.params['routing_key'], '')\n\n    base_url = \"http://%s:%s/api/bindings\" % (module.params['login_host'], module.params['login_port'])\n\n    url = \"%s/%s/e/%s/%s/%s/%s\" % (base_url,\n                                   urllib_parse.quote(module.params['vhost'], ''),\n                                   urllib_parse.quote(module.params['name'], ''),\n                                   dest_type,\n                                   urllib_parse.quote(module.params['destination'], ''),\n                                   props\n                                   )\n\n     Check if exchange already exists\n    r = requests.get(url, auth=(module.params['login_user'], module.params['login_password']))\n\n    if r.status_code == 200:\n        binding_exists = True\n        response = r.json()\n    elif r.status_code == 404:\n        binding_exists = False\n        response = r.text\n    else:\n        module.fail_json(\n            msg=\"Invalid response from RESTAPI when trying to check if exchange exists\",\n            details=r.text\n        )\n\n    if module.params['state'] == 'present':\n        change_required = not binding_exists\n    else:\n        change_required = binding_exists\n\n     Exit if check_mode\n    if module.check_mode:\n        result['changed'] = change_required\n        result['details'] = response\n        result['arguments'] = module.params['arguments']\n        module.exit_json(**result)\n\n     Do changes\n    if change_required:\n        if module.params['state'] == 'present':\n            url = \"%s/%s/e/%s/%s/%s\" % (\n                base_url,\n                urllib_parse.quote(module.params['vhost'], ''),\n                urllib_parse.quote(module.params['name'], ''),\n                dest_type,\n                urllib_parse.quote(module.params['destination'], '')\n            )\n\n            r = requests.post(\n                url,\n                auth=(module.params['login_user'], module.params['login_password']),\n                headers={\"content-type\": \"application/json\"},\n                data=json.dumps({\n                    \"routing_key\": module.params['routing_key'],\n                    \"arguments\": module.params['arguments']\n                })\n            )\n        elif module.params['state'] == 'absent':\n            r = requests.delete(url, auth=(module.params['login_user'], module.params['login_password']))\n\n        if r.status_code == 204 or r.status_code == 201:\n            result['changed'] = True\n            result['destination'] = module.params['destination']\n            module.exit_json(**result)\n        else:\n            module.fail_json(\n                msg=\"Error creating exchange\",\n                status=r.status_code,\n                details=r.text\n            )\n\n    else:\n        result['changed'] = False\n        module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  rabbitmq binding author   manuel sousa ( manuel sousa)  version added   2 0   short description  this module manages rabbitmq bindings description      this module uses rabbitmq rest api create delete bindings requirements     requests    1 0 0    options      state          description                whether exchange present absent               only present implemented atm         choices     present    absent            required  false         default  present     name          description                source exchange create binding         required  true         aliases     src    source        login user          description                rabbitmq user connection         required  false         default  guest     login password          description                rabbitmq password connection         required  false         default  false     login host          description                rabbitmq host connection         required  false         default  localhost     login port          description                rabbitmq management api port         required  false         default  15672     vhost          description                rabbitmq virtual host               default vhost           required  false         default          destination          description                destination exchange queue binding         required  true         aliases     dst    dest        destination type          description                either queue exchange         required  true         choices     queue    exchange            aliases     type    dest type        routing key          description                routing key binding               default           required  false         default          arguments          description                extra arguments exchange  if defined argument key value dictionary         required  false         default          examples         bind myqueue directexchange routing key info   rabbitmq binding      name  directexchange     destination  myqueue     type  queue     routing key  info    bind directexchange topicexchange routing key   info   rabbitmq binding      name  topicexchange     destination  topicexchange     type  exchange     routing key     info          usr bin python        coding  utf 8        (c) 2015  manuel sousa  manuel sousa gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)       bind myqueue directexchange routing key info    bind directexchange topicexchange routing key   info    check exchange already exists    exit check mode    do changes ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2015, Manuel Sousa <manuel.sousa@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: rabbitmq_binding\nauthor: \"Manuel Sousa (@manuel-sousa)\"\nversion_added: \"2.0\"\n\nshort_description: This module manages rabbitMQ bindings\ndescription:\n  - This module uses rabbitMQ Rest API to create/delete bindings\nrequirements: [ \"requests >= 1.0.0\" ]\noptions:\n    state:\n        description:\n            - Whether the exchange should be present or absent\n            - Only present implemented atm\n        choices: [ \"present\", \"absent\" ]\n        required: false\n        default: present\n    name:\n        description:\n            - source exchange to create binding on\n        required: true\n        aliases: [ \"src\", \"source\" ]\n    login_user:\n        description:\n            - rabbitMQ user for connection\n        required: false\n        default: guest\n    login_password:\n        description:\n            - rabbitMQ password for connection\n        required: false\n        default: false\n    login_host:\n        description:\n            - rabbitMQ host for connection\n        required: false\n        default: localhost\n    login_port:\n        description:\n            - rabbitMQ management api port\n        required: false\n        default: 15672\n    vhost:\n        description:\n            - rabbitMQ virtual host\n            - default vhost is /\n        required: false\n        default: \"/\"\n    destination:\n        description:\n            - destination exchange or queue for the binding\n        required: true\n        aliases: [ \"dst\", \"dest\" ]\n    destination_type:\n        description:\n            - Either queue or exchange\n        required: true\n        choices: [ \"queue\", \"exchange\" ]\n        aliases: [ \"type\", \"dest_type\" ]\n    routing_key:\n        description:\n            - routing key for the binding\n            - default is #\n        required: false\n        default: \"#\"\n    arguments:\n        description:\n            - extra arguments for exchange. If defined this argument is a key/value dictionary\n        required: false\n        default: {}\n'''\n\nEXAMPLES = '''\n# Bind myQueue to directExchange with routing key info\n- rabbitmq_binding:\n    name: directExchange\n    destination: myQueue\n    type: queue\n    routing_key: info\n\n# Bind directExchange to topicExchange with routing key *.info\n- rabbitmq_binding:\n    name: topicExchange\n    destination: topicExchange\n    type: exchange\n    routing_key: '*.info'\n'''\n\nimport json\n\ntry:\n    import requests\n    HAS_REQUESTS = True\nexcept ImportError:\n    HAS_REQUESTS = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib import parse as urllib_parse\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            state=dict(default='present', choices=['present', 'absent'], type='str'),\n            name=dict(required=True, aliases=[\"src\", \"source\"], type='str'),\n            login_user=dict(default='guest', type='str'),\n            login_password=dict(default='guest', type='str', no_log=True),\n            login_host=dict(default='localhost', type='str'),\n            login_port=dict(default='15672', type='str'),\n            vhost=dict(default='/', type='str'),\n            destination=dict(required=True, aliases=[\"dst\", \"dest\"], type='str'),\n            destination_type=dict(required=True, aliases=[\"type\", \"dest_type\"], choices=[\"queue\", \"exchange\"], type='str'),\n            routing_key=dict(default='#', type='str'),\n            arguments=dict(default=dict(), type='dict')\n        ),\n        supports_check_mode=True\n    )\n\n    if not HAS_REQUESTS:\n        module.fail_json(msg=\"requests library is required for this module. To install, use `pip install requests`\")\n    result = dict(changed=False, name=module.params['name'])\n\n    if module.params['destination_type'] == \"queue\":\n        dest_type = \"q\"\n    else:\n        dest_type = \"e\"\n\n    if module.params['routing_key'] == \"\":\n        props = \"~\"\n    else:\n        props = urllib_parse.quote(module.params['routing_key'], '')\n\n    base_url = \"http://%s:%s/api/bindings\" % (module.params['login_host'], module.params['login_port'])\n\n    url = \"%s/%s/e/%s/%s/%s/%s\" % (base_url,\n                                   urllib_parse.quote(module.params['vhost'], ''),\n                                   urllib_parse.quote(module.params['name'], ''),\n                                   dest_type,\n                                   urllib_parse.quote(module.params['destination'], ''),\n                                   props\n                                   )\n\n    # Check if exchange already exists\n    r = requests.get(url, auth=(module.params['login_user'], module.params['login_password']))\n\n    if r.status_code == 200:\n        binding_exists = True\n        response = r.json()\n    elif r.status_code == 404:\n        binding_exists = False\n        response = r.text\n    else:\n        module.fail_json(\n            msg=\"Invalid response from RESTAPI when trying to check if exchange exists\",\n            details=r.text\n        )\n\n    if module.params['state'] == 'present':\n        change_required = not binding_exists\n    else:\n        change_required = binding_exists\n\n    # Exit if check_mode\n    if module.check_mode:\n        result['changed'] = change_required\n        result['details'] = response\n        result['arguments'] = module.params['arguments']\n        module.exit_json(**result)\n\n    # Do changes\n    if change_required:\n        if module.params['state'] == 'present':\n            url = \"%s/%s/e/%s/%s/%s\" % (\n                base_url,\n                urllib_parse.quote(module.params['vhost'], ''),\n                urllib_parse.quote(module.params['name'], ''),\n                dest_type,\n                urllib_parse.quote(module.params['destination'], '')\n            )\n\n            r = requests.post(\n                url,\n                auth=(module.params['login_user'], module.params['login_password']),\n                headers={\"content-type\": \"application/json\"},\n                data=json.dumps({\n                    \"routing_key\": module.params['routing_key'],\n                    \"arguments\": module.params['arguments']\n                })\n            )\n        elif module.params['state'] == 'absent':\n            r = requests.delete(url, auth=(module.params['login_user'], module.params['login_password']))\n\n        if r.status_code == 204 or r.status_code == 201:\n            result['changed'] = True\n            result['destination'] = module.params['destination']\n            module.exit_json(**result)\n        else:\n            module.fail_json(\n                msg=\"Error creating exchange\",\n                status=r.status_code,\n                details=r.text\n            )\n\n    else:\n        result['changed'] = False\n        module.exit_json(**result)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "rabbitmq_binding.py", "id": "506b56714020305e5c8a7fd8bf864474", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/messaging/rabbitmq_binding.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}