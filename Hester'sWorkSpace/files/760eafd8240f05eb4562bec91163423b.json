{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlparse\nfrom ..utils import (\n    int_or_none,\n    mimetype2ext,\n    remove_end,\n)\n\n\nclass IwaraIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.|ecchi\\.)?iwara\\.tv/videos/(?P<id>[a-zA-Z0-9]+)'\n    _TESTS = [{\n        'url': 'http://iwara.tv/videos/amVwUl1EHpAD9RD',\n        \n        'info_dict': {\n            'id': 'amVwUl1EHpAD9RD',\n            'ext': 'mp4',\n            'title': '\u3010MMD R-18\u3011\u30ac\u30fc\u30eb\u30d5\u30ec\u30f3\u30c9 carry_me_off',\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://ecchi.iwara.tv/videos/Vb4yf2yZspkzkBO',\n        'md5': '7e5f1f359cd51a027ba4a7b7710a50f0',\n        'info_dict': {\n            'id': '0B1LvuHnL-sRFNXB1WHNqbGw4SXc',\n            'ext': 'mp4',\n            'title': '[3D Hentai] Kyonyu \u00d7 Genkai \u00d7 Emaki Shinobi Girls.mp4',\n            'age_limit': 18,\n        },\n        'add_ie': ['GoogleDrive'],\n    }, {\n        'url': 'http://www.iwara.tv/videos/nawkaumd6ilezzgq',\n        \n        'info_dict': {\n            'id': '6liAP9s2Ojc',\n            'ext': 'mp4',\n            'age_limit': 18,\n            'title': '[MMD] Do It Again Ver.2 [1080p 60FPS] (Motion,Camera,Wav+DL)',\n            'description': 'md5:590c12c0df1443d833fbebe05da8c47a',\n            'upload_date': '20160910',\n            'uploader': 'aMMDsork',\n            'uploader_id': 'UCVOFyOSCyFkXTYYHITtqB7A',\n        },\n        'add_ie': ['Youtube'],\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        hostname = compat_urllib_parse_urlparse(urlh.geturl()).hostname\n        \n        age_limit = 18 if hostname.split('.')[0] == 'ecchi' else 0\n\n        video_data = self._download_json('http://www.iwara.tv/api/video/%s' % video_id, video_id)\n\n        if not video_data:\n            iframe_url = self._html_search_regex(\n                r'<iframe[^>]+src=([\\'\"])(?P<url>[^\\'\"]+)\\1',\n                webpage, 'iframe URL', group='url')\n            return {\n                '_type': 'url_transparent',\n                'url': iframe_url,\n                'age_limit': age_limit,\n            }\n\n        title = remove_end(self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title'), ' | Iwara')\n\n        formats = []\n        for a_format in video_data:\n            format_id = a_format.get('resolution')\n            height = int_or_none(self._search_regex(\n                r'(\\d+)p', format_id, 'height', default=None))\n            formats.append({\n                'url': a_format['uri'],\n                'format_id': format_id,\n                'ext': mimetype2ext(a_format.get('mime')) or 'mp4',\n                'height': height,\n                'width': int_or_none(height / 9.0 * 16.0 if height else None),\n                'quality': 1 if format_id == 'Source' else 0,\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# md5 is unstable\n# md5 is unstable\n# ecchi is 'sexy' in Japanese\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlparse\nfrom ..utils import (\n    int_or_none,\n    mimetype2ext,\n    remove_end,\n)\n\n\nclass IwaraIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.|ecchi\\.)?iwara\\.tv/videos/(?P<id>[a-zA-Z0-9]+)'\n    _TESTS = [{\n        'url': 'http://iwara.tv/videos/amVwUl1EHpAD9RD',\n        # md5 is unstable\n        'info_dict': {\n            'id': 'amVwUl1EHpAD9RD',\n            'ext': 'mp4',\n            'title': '\u3010MMD R-18\u3011\u30ac\u30fc\u30eb\u30d5\u30ec\u30f3\u30c9 carry_me_off',\n            'age_limit': 18,\n        },\n    }, {\n        'url': 'http://ecchi.iwara.tv/videos/Vb4yf2yZspkzkBO',\n        'md5': '7e5f1f359cd51a027ba4a7b7710a50f0',\n        'info_dict': {\n            'id': '0B1LvuHnL-sRFNXB1WHNqbGw4SXc',\n            'ext': 'mp4',\n            'title': '[3D Hentai] Kyonyu \u00d7 Genkai \u00d7 Emaki Shinobi Girls.mp4',\n            'age_limit': 18,\n        },\n        'add_ie': ['GoogleDrive'],\n    }, {\n        'url': 'http://www.iwara.tv/videos/nawkaumd6ilezzgq',\n        # md5 is unstable\n        'info_dict': {\n            'id': '6liAP9s2Ojc',\n            'ext': 'mp4',\n            'age_limit': 18,\n            'title': '[MMD] Do It Again Ver.2 [1080p 60FPS] (Motion,Camera,Wav+DL)',\n            'description': 'md5:590c12c0df1443d833fbebe05da8c47a',\n            'upload_date': '20160910',\n            'uploader': 'aMMDsork',\n            'uploader_id': 'UCVOFyOSCyFkXTYYHITtqB7A',\n        },\n        'add_ie': ['Youtube'],\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        hostname = compat_urllib_parse_urlparse(urlh.geturl()).hostname\n        # ecchi is 'sexy' in Japanese\n        age_limit = 18 if hostname.split('.')[0] == 'ecchi' else 0\n\n        video_data = self._download_json('http://www.iwara.tv/api/video/%s' % video_id, video_id)\n\n        if not video_data:\n            iframe_url = self._html_search_regex(\n                r'<iframe[^>]+src=([\\'\"])(?P<url>[^\\'\"]+)\\1',\n                webpage, 'iframe URL', group='url')\n            return {\n                '_type': 'url_transparent',\n                'url': iframe_url,\n                'age_limit': age_limit,\n            }\n\n        title = remove_end(self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title'), ' | Iwara')\n\n        formats = []\n        for a_format in video_data:\n            format_id = a_format.get('resolution')\n            height = int_or_none(self._search_regex(\n                r'(\\d+)p', format_id, 'height', default=None))\n            formats.append({\n                'url': a_format['uri'],\n                'format_id': format_id,\n                'ext': mimetype2ext(a_format.get('mime')) or 'mp4',\n                'height': height,\n                'width': int_or_none(height / 9.0 * 16.0 if height else None),\n                'quality': 1 if format_id == 'Source' else 0,\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "iwara.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/iwara.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}