{"author": "nvbn", "code": "from time import time\nimport os\nfrom tempfile import gettempdir\nfrom uuid import uuid4\nfrom ..conf import settings\nfrom ..const import ARGUMENT_PLACEHOLDER, USER_COMMAND_MARK\nfrom ..utils import memoize\nfrom .generic import Generic\n\n\nclass Zsh(Generic):\n    def app_alias(self, alias_name):\n        \n        return .format(log=log_path)\n\n    def _parse_alias(self, alias):\n        name, value = alias.split('=', 1)\n        if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n            value = value[1:-1]\n        return name, value\n\n    @memoize\n    def get_aliases(self):\n        raw_aliases = os.environ.get('TF_SHELL_ALIASES', '').split('\\n')\n        return dict(self._parse_alias(alias)\n                    for alias in raw_aliases if alias and '=' in alias)\n\n    def _get_history_file_name(self):\n        return os.environ.get(\"HISTFILE\",\n                              os.path.expanduser('~/.zsh_history'))\n\n    def _get_history_line(self, command_script):\n        return u': {}:0;{}\\n'.format(int(time()), command_script)\n\n    def _script_from_history(self, line):\n        if ';' in line:\n            return line.split(';', 1)[1]\n        else:\n            return ''\n\n    def how_to_configure(self):\n        return self._create_shell_configuration(\n            content=u'eval $(thefuck --alias)',\n            path='~/.zshrc',\n            reload='source ~/.zshrc')\n", "comments": "\n            {name} () {{\n                TF_PYTHONIOENCODING=$PYTHONIOENCODING;\n                export TF_SHELL=zsh;\n                export TF_ALIAS={name};\n                export TF_SHELL_ALIASES=$(alias);\n                export TF_HISTORY=\"$(fc -ln -10)\";\n                export PYTHONIOENCODING=utf-8;\n                TF_CMD=$(\n                    thefuck {argument_placeholder} $@\n                ) && eval $TF_CMD;\n                unset TF_HISTORY;\n                export PYTHONIOENCODING=$TF_PYTHONIOENCODING;\n                {alter_history}\n            }}\n        '''.format(\n            name=alias_name,\n            argument_placeholder=ARGUMENT_PLACEHOLDER,\n            alter_history=('test -n \"$TF_CMD\" && print -s $TF_CMD'\n                           if settings.alter_history else ''))\n\n    def instant_mode_alias(self, alias_name):\n        if os.environ.get('THEFUCK_INSTANT_MODE', '').lower() == 'true':\n            mark = ('%{' +\n                    USER_COMMAND_MARK + '\\b' * len(USER_COMMAND_MARK)\n                    + '%}')\n            return '''\n                export PS1=\"{user_command_mark}$PS1\";\n                {app_alias}\n            '''.format(user_command_mark=mark,\n                       app_alias=self.app_alias(alias_name))\n        else:\n            log_path = os.path.join(\n                gettempdir(), 'thefuck-script-log-{}'.format(uuid4().hex))\n            return '''\n                export THEFUCK_INSTANT_MODE=True;\n                export THEFUCK_OUTPUT_LOG={log};\n                thefuck --shell-logger {log};\n                rm {log};\n                exit\n            \n \n# It is VERY important to have the variables declared WITHIN the function\n", "content": "from time import time\nimport os\nfrom tempfile import gettempdir\nfrom uuid import uuid4\nfrom ..conf import settings\nfrom ..const import ARGUMENT_PLACEHOLDER, USER_COMMAND_MARK\nfrom ..utils import memoize\nfrom .generic import Generic\n\n\nclass Zsh(Generic):\n    def app_alias(self, alias_name):\n        # It is VERY important to have the variables declared WITHIN the function\n        return '''\n            {name} () {{\n                TF_PYTHONIOENCODING=$PYTHONIOENCODING;\n                export TF_SHELL=zsh;\n                export TF_ALIAS={name};\n                export TF_SHELL_ALIASES=$(alias);\n                export TF_HISTORY=\"$(fc -ln -10)\";\n                export PYTHONIOENCODING=utf-8;\n                TF_CMD=$(\n                    thefuck {argument_placeholder} $@\n                ) && eval $TF_CMD;\n                unset TF_HISTORY;\n                export PYTHONIOENCODING=$TF_PYTHONIOENCODING;\n                {alter_history}\n            }}\n        '''.format(\n            name=alias_name,\n            argument_placeholder=ARGUMENT_PLACEHOLDER,\n            alter_history=('test -n \"$TF_CMD\" && print -s $TF_CMD'\n                           if settings.alter_history else ''))\n\n    def instant_mode_alias(self, alias_name):\n        if os.environ.get('THEFUCK_INSTANT_MODE', '').lower() == 'true':\n            mark = ('%{' +\n                    USER_COMMAND_MARK + '\\b' * len(USER_COMMAND_MARK)\n                    + '%}')\n            return '''\n                export PS1=\"{user_command_mark}$PS1\";\n                {app_alias}\n            '''.format(user_command_mark=mark,\n                       app_alias=self.app_alias(alias_name))\n        else:\n            log_path = os.path.join(\n                gettempdir(), 'thefuck-script-log-{}'.format(uuid4().hex))\n            return '''\n                export THEFUCK_INSTANT_MODE=True;\n                export THEFUCK_OUTPUT_LOG={log};\n                thefuck --shell-logger {log};\n                rm {log};\n                exit\n            '''.format(log=log_path)\n\n    def _parse_alias(self, alias):\n        name, value = alias.split('=', 1)\n        if value[0] == value[-1] == '\"' or value[0] == value[-1] == \"'\":\n            value = value[1:-1]\n        return name, value\n\n    @memoize\n    def get_aliases(self):\n        raw_aliases = os.environ.get('TF_SHELL_ALIASES', '').split('\\n')\n        return dict(self._parse_alias(alias)\n                    for alias in raw_aliases if alias and '=' in alias)\n\n    def _get_history_file_name(self):\n        return os.environ.get(\"HISTFILE\",\n                              os.path.expanduser('~/.zsh_history'))\n\n    def _get_history_line(self, command_script):\n        return u': {}:0;{}\\n'.format(int(time()), command_script)\n\n    def _script_from_history(self, line):\n        if ';' in line:\n            return line.split(';', 1)[1]\n        else:\n            return ''\n\n    def how_to_configure(self):\n        return self._create_shell_configuration(\n            content=u'eval $(thefuck --alias)',\n            path='~/.zshrc',\n            reload='source ~/.zshrc')\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "zsh.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/shells/zsh.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}