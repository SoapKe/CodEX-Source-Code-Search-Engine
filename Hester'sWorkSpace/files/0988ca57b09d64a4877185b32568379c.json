{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import PostProcessor\n\n\nclass MetadataFromTitlePP(PostProcessor):\n    def __init__(self, downloader, titleformat):\n        super(MetadataFromTitlePP, self).__init__(downloader)\n        self._titleformat = titleformat\n        self._titleregex = (self.format_to_regex(titleformat)\n                            if re.search(r'%\\(\\w+\\)s', titleformat)\n                            else titleformat)\n\n    def format_to_regex(self, fmt):\n        r\n        lastpos = 0\n        regex = ''\n        \n        for match in re.finditer(r'%\\((\\w+)\\)s', fmt):\n            regex += re.escape(fmt[lastpos:match.start()])\n            regex += r'(?P<' + match.group(1) + '>.+)'\n            lastpos = match.end()\n        if lastpos < len(fmt):\n            regex += re.escape(fmt[lastpos:])\n        return regex\n\n    def run(self, info):\n        title = info['title']\n        match = re.match(self._titleregex, title)\n        if match is None:\n            self._downloader.to_screen(\n                '[fromtitle] Could not interpret title of video as \"%s\"'\n                % self._titleformat)\n            return [], info\n        for attribute, value in match.groupdict().items():\n            info[attribute] = value\n            self._downloader.to_screen(\n                '[fromtitle] parsed %s: %s'\n                % (attribute, value if value is not None else 'NA'))\n\n        return [], info\n", "comments": "\n        Converts a string like\n           '%(title)s - %(artist)s'\n        to a regex like\n           '(?P<title>.+)\\ \\-\\ (?P<artist>.+)'\n        \n \n# replace %(..)s with regex group and escape other string parts\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import PostProcessor\n\n\nclass MetadataFromTitlePP(PostProcessor):\n    def __init__(self, downloader, titleformat):\n        super(MetadataFromTitlePP, self).__init__(downloader)\n        self._titleformat = titleformat\n        self._titleregex = (self.format_to_regex(titleformat)\n                            if re.search(r'%\\(\\w+\\)s', titleformat)\n                            else titleformat)\n\n    def format_to_regex(self, fmt):\n        r\"\"\"\n        Converts a string like\n           '%(title)s - %(artist)s'\n        to a regex like\n           '(?P<title>.+)\\ \\-\\ (?P<artist>.+)'\n        \"\"\"\n        lastpos = 0\n        regex = ''\n        # replace %(..)s with regex group and escape other string parts\n        for match in re.finditer(r'%\\((\\w+)\\)s', fmt):\n            regex += re.escape(fmt[lastpos:match.start()])\n            regex += r'(?P<' + match.group(1) + '>.+)'\n            lastpos = match.end()\n        if lastpos < len(fmt):\n            regex += re.escape(fmt[lastpos:])\n        return regex\n\n    def run(self, info):\n        title = info['title']\n        match = re.match(self._titleregex, title)\n        if match is None:\n            self._downloader.to_screen(\n                '[fromtitle] Could not interpret title of video as \"%s\"'\n                % self._titleformat)\n            return [], info\n        for attribute, value in match.groupdict().items():\n            info[attribute] = value\n            self._downloader.to_screen(\n                '[fromtitle] parsed %s: %s'\n                % (attribute, value if value is not None else 'NA'))\n\n        return [], info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "metadatafromtitle.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/postprocessor/metadatafromtitle.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}