{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport functools\nfrom datetime import datetime, timedelta\n\nimport mock\nimport pytest\nimport pytz\nfrom django.core import mail\n\nfrom sentry.app import tsdb\nfrom sentry.models import Project, UserOption\nfrom sentry.tasks.reports import (\n    DISABLED_ORGANIZATIONS_USER_OPTION_KEY, Report, Skipped, change, clean_series, colorize,\n    deliver_organization_user_report, get_calendar_range, get_percentile, has_valid_aggregates,\n    index_to_month, merge_mappings, merge_sequences, merge_series, month_to_index, prepare_reports,\n    safe_add, user_subscribed_to_organization_reports\n)\nfrom sentry.testutils.cases import TestCase\nfrom sentry.utils.dates import to_datetime, to_timestamp\nfrom six.moves import xrange\n\n\n@pytest.yield_fixture(scope=\"module\")\ndef interval():\n    stop = datetime(2016, 9, 12, tzinfo=pytz.utc)\n    yield stop - timedelta(days=7), stop\n\n\ndef test_change():\n    assert change(1, 0) is None\n    assert change(10, 5) == 1.00  \n    assert change(50, 100) == -0.50  \n    assert change(None, 100) == -1.00  \n    assert change(50, None) is None\n\n\ndef test_safe_add():\n    assert safe_add(1, 1) == 2\n    assert safe_add(None, 1) == 1\n    assert safe_add(1, None) == 1\n    assert safe_add(None, None) is None\n\n\ndef test_merge_mappings():\n    assert merge_mappings(\n        {\n            'a': 1,\n            'b': 2,\n            'c': 3\n        },\n        {'a': 0,\n         'b': 1,\n         'c': 2},\n    ) == {\n        'a': 1,\n        'b': 3,\n        'c': 5\n    }\n\n\ndef test_merge_mappings_custom_operator():\n    assert merge_mappings(\n        {\n            'a': {\n                'x': 1,\n                'y': 1\n            },\n            'b': {\n                'x': 2,\n                'y': 2\n            },\n        },\n        {\n            'a': {\n                'x': 1,\n                'y': 1\n            },\n            'b': {\n                'x': 2,\n                'y': 2\n            },\n        },\n        lambda left, right: merge_mappings(left, right),\n    ) == {\n        'a': {\n            'x': 2,\n            'y': 2\n        },\n        'b': {\n            'x': 4,\n            'y': 4\n        },\n    }\n\n\ndef test_merge_mapping_different_keys():\n    with pytest.raises(AssertionError):\n        merge_mappings({'a': 1}, {'b': 2})\n\n\ndef test_merge_sequences():\n    assert merge_sequences(\n        range(0, 4),\n        range(0, 4),\n    ) == [i * 2 for i in xrange(0, 4)]\n\n\ndef test_merge_sequences_custom_operator():\n    assert merge_sequences(\n        [{\n            chr(65 + i): i\n        } for i in xrange(0, 26)],\n        [{\n            chr(65 + i): i\n        } for i in xrange(0, 26)],\n        merge_mappings,\n    ) == [{\n        chr(65 + i): i * 2\n    } for i in xrange(0, 26)]\n\n\ndef test_merge_series():\n    assert merge_series(\n        [(i, i) for i in xrange(0, 10)],\n        [(i, i) for i in xrange(0, 10)],\n    ) == [(i, i * 2) for i in xrange(0, 10)]\n\n\ndef test_merge_series_custom_operator():\n    assert merge_series(\n        [(i, {\n            chr(65 + i): i\n        }) for i in xrange(0, 26)],\n        [(i, {\n            chr(65 + i): i\n        }) for i in xrange(0, 26)],\n        merge_mappings,\n    ) == [(i, {\n        chr(65 + i): i * 2\n    }) for i in xrange(0, 26)]\n\n\ndef test_merge_series_offset_timestamps():\n    with pytest.raises(AssertionError):\n        merge_series(\n            [(i, i) for i in xrange(0, 10)],\n            [(i + 1, i) for i in xrange(0, 10)],\n        )\n\n\ndef test_merge_series_different_lengths():\n    with pytest.raises(AssertionError):\n        merge_series(\n            [(i, i) for i in xrange(0, 1)],\n            [(i, i) for i in xrange(0, 10)],\n        )\n\n    with pytest.raises(AssertionError):\n        merge_series(\n            [(i, i) for i in xrange(0, 10)],\n            [(i, i) for i in xrange(0, 1)],\n        )\n\n\ndef test_clean_series():\n    rollup = 60\n    n = 5\n    start = to_datetime(rollup * 0)\n    stop = to_datetime(rollup * n)\n    series = [(rollup * i, i) for i in xrange(0, n)]\n    assert clean_series(\n        start,\n        stop,\n        rollup,\n        series,\n    ) == series\n\n\ndef test_clean_series_trims_extra():\n    rollup = 60\n    n = 5\n    start = to_datetime(rollup * 0)\n    stop = to_datetime(rollup * n)\n    series = [(rollup * i, i) for i in xrange(0, n + 1)]\n    assert clean_series(\n        start,\n        stop,\n        rollup,\n        series,\n    ) == series[:n]\n\n\ndef test_clean_series_rejects_offset_timestamp():\n    rollup = 60\n    n = 5\n    start = to_datetime(rollup * 0)\n    stop = to_datetime(rollup * n)\n    series = [(rollup * (i * 1.1), i) for i in xrange(0, n)]\n    with pytest.raises(AssertionError):\n        clean_series(\n            start,\n            stop,\n            rollup,\n            series,\n        )\n\n\ndef test_has_valid_aggregates(interval):\n    project = None  \n\n    def make_report(aggregates):\n        return Report(None, aggregates, None, None, None)\n\n    assert has_valid_aggregates(\n        interval,\n        (project, make_report([None] * 4)),\n    ) is False\n\n    assert has_valid_aggregates(\n        interval,\n        (project, make_report([0] * 4)),\n    ) is False\n\n    assert has_valid_aggregates(\n        interval,\n        (project, make_report([1, 0, 0, 0])),\n    ) is True\n\n\ndef test_percentiles():\n    values = [3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20]\n\n    get_percentile(values, 0.25) == 7\n    get_percentile(values, 0.50) == 9\n    get_percentile(values, 0.75) == 15\n    get_percentile(values, 1.00) == 20\n\n\ndef test_colorize():\n    colors = ['green', 'yellow', 'red']\n    values = [2, 5, 1, 3, 4, 0]\n\n    legend, results = colorize(colors, values)\n\n    assert results == [\n        (2, 'yellow'),\n        (5, 'red'),\n        (1, 'green'),\n        (3, 'yellow'),\n        (4, 'red'),\n        (0, 'green'),\n    ]\n\n\ndef test_month_indexing():\n    assert index_to_month(month_to_index(1986, 10)) == (1986, 10)\n\n\ndef test_calendar_range():\n    assert get_calendar_range(\n        (None, datetime(2016, 2, 1, tzinfo=pytz.utc)),\n        months=3,\n    ) == (month_to_index(2015, 11), month_to_index(2016, 1), )\n\n\nclass ReportTestCase(TestCase):\n    def test_integration(self):\n        Project.objects.all().delete()\n\n        now = datetime(2016, 9, 12, tzinfo=pytz.utc)\n\n        project = self.create_project(\n            organization=self.organization,\n            teams=[self.team],\n            date_added=now - timedelta(days=90),\n        )\n\n        tsdb.incr(\n            tsdb.models.project,\n            project.id,\n            now - timedelta(days=1),\n        )\n\n        member_set = set(project.teams.first().member_set.all())\n\n        with self.tasks(), \\\n                mock.patch.object(tsdb, 'get_earliest_timestamp') as get_earliest_timestamp:\n            \n            \n            # that would be considered expired relative to the *actual* current\n            \n            get_earliest_timestamp.return_value = to_timestamp(now - timedelta(days=60))\n\n            prepare_reports(timestamp=to_timestamp(now))\n            assert len(mail.outbox) == len(member_set) == 1\n\n            message = mail.outbox[0]\n            assert self.organization.name in message.subject\n\n    def test_deliver_organization_user_report_respects_settings(self):\n        user = self.user\n        organization = self.organization\n\n        set_option_value = functools.partial(\n            UserOption.objects.set_value,\n            user,\n            DISABLED_ORGANIZATIONS_USER_OPTION_KEY,\n        )\n\n        deliver_report = functools.partial(\n            deliver_organization_user_report,\n            0,\n            60 * 60 * 24 * 7,\n            organization.id,\n            user.id,\n        )\n\n        set_option_value([])\n        assert deliver_report() is not Skipped.NotSubscribed\n\n        set_option_value([organization.id])\n        assert deliver_report() is Skipped.NotSubscribed\n\n    def test_user_subscribed_to_organization_reports(self):\n        user = self.user\n        organization = self.organization\n\n        set_option_value = functools.partial(\n            UserOption.objects.set_value,\n            user,\n            DISABLED_ORGANIZATIONS_USER_OPTION_KEY,\n        )\n\n        set_option_value([])\n        assert user_subscribed_to_organization_reports(user, organization) is True\n\n        set_option_value([-1])\n        assert user_subscribed_to_organization_reports(user, organization) is True\n\n        set_option_value([organization.id])\n        assert user_subscribed_to_organization_reports(user, organization) is False\n", "comments": "  100  increase    50  decrease    100  decrease    parameter unused    ensure   get earliest timestamp   relative fixed     current  timestamp    prevents filtering data points    would considered expired relative  actual  current    timestamp  ", "content": "from __future__ import absolute_import\n\nimport functools\nfrom datetime import datetime, timedelta\n\nimport mock\nimport pytest\nimport pytz\nfrom django.core import mail\n\nfrom sentry.app import tsdb\nfrom sentry.models import Project, UserOption\nfrom sentry.tasks.reports import (\n    DISABLED_ORGANIZATIONS_USER_OPTION_KEY, Report, Skipped, change, clean_series, colorize,\n    deliver_organization_user_report, get_calendar_range, get_percentile, has_valid_aggregates,\n    index_to_month, merge_mappings, merge_sequences, merge_series, month_to_index, prepare_reports,\n    safe_add, user_subscribed_to_organization_reports\n)\nfrom sentry.testutils.cases import TestCase\nfrom sentry.utils.dates import to_datetime, to_timestamp\nfrom six.moves import xrange\n\n\n@pytest.yield_fixture(scope=\"module\")\ndef interval():\n    stop = datetime(2016, 9, 12, tzinfo=pytz.utc)\n    yield stop - timedelta(days=7), stop\n\n\ndef test_change():\n    assert change(1, 0) is None\n    assert change(10, 5) == 1.00  # 100% increase\n    assert change(50, 100) == -0.50  # 50% decrease\n    assert change(None, 100) == -1.00  # 100% decrease\n    assert change(50, None) is None\n\n\ndef test_safe_add():\n    assert safe_add(1, 1) == 2\n    assert safe_add(None, 1) == 1\n    assert safe_add(1, None) == 1\n    assert safe_add(None, None) is None\n\n\ndef test_merge_mappings():\n    assert merge_mappings(\n        {\n            'a': 1,\n            'b': 2,\n            'c': 3\n        },\n        {'a': 0,\n         'b': 1,\n         'c': 2},\n    ) == {\n        'a': 1,\n        'b': 3,\n        'c': 5\n    }\n\n\ndef test_merge_mappings_custom_operator():\n    assert merge_mappings(\n        {\n            'a': {\n                'x': 1,\n                'y': 1\n            },\n            'b': {\n                'x': 2,\n                'y': 2\n            },\n        },\n        {\n            'a': {\n                'x': 1,\n                'y': 1\n            },\n            'b': {\n                'x': 2,\n                'y': 2\n            },\n        },\n        lambda left, right: merge_mappings(left, right),\n    ) == {\n        'a': {\n            'x': 2,\n            'y': 2\n        },\n        'b': {\n            'x': 4,\n            'y': 4\n        },\n    }\n\n\ndef test_merge_mapping_different_keys():\n    with pytest.raises(AssertionError):\n        merge_mappings({'a': 1}, {'b': 2})\n\n\ndef test_merge_sequences():\n    assert merge_sequences(\n        range(0, 4),\n        range(0, 4),\n    ) == [i * 2 for i in xrange(0, 4)]\n\n\ndef test_merge_sequences_custom_operator():\n    assert merge_sequences(\n        [{\n            chr(65 + i): i\n        } for i in xrange(0, 26)],\n        [{\n            chr(65 + i): i\n        } for i in xrange(0, 26)],\n        merge_mappings,\n    ) == [{\n        chr(65 + i): i * 2\n    } for i in xrange(0, 26)]\n\n\ndef test_merge_series():\n    assert merge_series(\n        [(i, i) for i in xrange(0, 10)],\n        [(i, i) for i in xrange(0, 10)],\n    ) == [(i, i * 2) for i in xrange(0, 10)]\n\n\ndef test_merge_series_custom_operator():\n    assert merge_series(\n        [(i, {\n            chr(65 + i): i\n        }) for i in xrange(0, 26)],\n        [(i, {\n            chr(65 + i): i\n        }) for i in xrange(0, 26)],\n        merge_mappings,\n    ) == [(i, {\n        chr(65 + i): i * 2\n    }) for i in xrange(0, 26)]\n\n\ndef test_merge_series_offset_timestamps():\n    with pytest.raises(AssertionError):\n        merge_series(\n            [(i, i) for i in xrange(0, 10)],\n            [(i + 1, i) for i in xrange(0, 10)],\n        )\n\n\ndef test_merge_series_different_lengths():\n    with pytest.raises(AssertionError):\n        merge_series(\n            [(i, i) for i in xrange(0, 1)],\n            [(i, i) for i in xrange(0, 10)],\n        )\n\n    with pytest.raises(AssertionError):\n        merge_series(\n            [(i, i) for i in xrange(0, 10)],\n            [(i, i) for i in xrange(0, 1)],\n        )\n\n\ndef test_clean_series():\n    rollup = 60\n    n = 5\n    start = to_datetime(rollup * 0)\n    stop = to_datetime(rollup * n)\n    series = [(rollup * i, i) for i in xrange(0, n)]\n    assert clean_series(\n        start,\n        stop,\n        rollup,\n        series,\n    ) == series\n\n\ndef test_clean_series_trims_extra():\n    rollup = 60\n    n = 5\n    start = to_datetime(rollup * 0)\n    stop = to_datetime(rollup * n)\n    series = [(rollup * i, i) for i in xrange(0, n + 1)]\n    assert clean_series(\n        start,\n        stop,\n        rollup,\n        series,\n    ) == series[:n]\n\n\ndef test_clean_series_rejects_offset_timestamp():\n    rollup = 60\n    n = 5\n    start = to_datetime(rollup * 0)\n    stop = to_datetime(rollup * n)\n    series = [(rollup * (i * 1.1), i) for i in xrange(0, n)]\n    with pytest.raises(AssertionError):\n        clean_series(\n            start,\n            stop,\n            rollup,\n            series,\n        )\n\n\ndef test_has_valid_aggregates(interval):\n    project = None  # parameter is unused\n\n    def make_report(aggregates):\n        return Report(None, aggregates, None, None, None)\n\n    assert has_valid_aggregates(\n        interval,\n        (project, make_report([None] * 4)),\n    ) is False\n\n    assert has_valid_aggregates(\n        interval,\n        (project, make_report([0] * 4)),\n    ) is False\n\n    assert has_valid_aggregates(\n        interval,\n        (project, make_report([1, 0, 0, 0])),\n    ) is True\n\n\ndef test_percentiles():\n    values = [3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20]\n\n    get_percentile(values, 0.25) == 7\n    get_percentile(values, 0.50) == 9\n    get_percentile(values, 0.75) == 15\n    get_percentile(values, 1.00) == 20\n\n\ndef test_colorize():\n    colors = ['green', 'yellow', 'red']\n    values = [2, 5, 1, 3, 4, 0]\n\n    legend, results = colorize(colors, values)\n\n    assert results == [\n        (2, 'yellow'),\n        (5, 'red'),\n        (1, 'green'),\n        (3, 'yellow'),\n        (4, 'red'),\n        (0, 'green'),\n    ]\n\n\ndef test_month_indexing():\n    assert index_to_month(month_to_index(1986, 10)) == (1986, 10)\n\n\ndef test_calendar_range():\n    assert get_calendar_range(\n        (None, datetime(2016, 2, 1, tzinfo=pytz.utc)),\n        months=3,\n    ) == (month_to_index(2015, 11), month_to_index(2016, 1), )\n\n\nclass ReportTestCase(TestCase):\n    def test_integration(self):\n        Project.objects.all().delete()\n\n        now = datetime(2016, 9, 12, tzinfo=pytz.utc)\n\n        project = self.create_project(\n            organization=self.organization,\n            teams=[self.team],\n            date_added=now - timedelta(days=90),\n        )\n\n        tsdb.incr(\n            tsdb.models.project,\n            project.id,\n            now - timedelta(days=1),\n        )\n\n        member_set = set(project.teams.first().member_set.all())\n\n        with self.tasks(), \\\n                mock.patch.object(tsdb, 'get_earliest_timestamp') as get_earliest_timestamp:\n            # Ensure ``get_earliest_timestamp`` is relative to the fixed\n            # \"current\" timestamp -- this prevents filtering out data points\n            # that would be considered expired relative to the *actual* current\n            # timestamp.\n            get_earliest_timestamp.return_value = to_timestamp(now - timedelta(days=60))\n\n            prepare_reports(timestamp=to_timestamp(now))\n            assert len(mail.outbox) == len(member_set) == 1\n\n            message = mail.outbox[0]\n            assert self.organization.name in message.subject\n\n    def test_deliver_organization_user_report_respects_settings(self):\n        user = self.user\n        organization = self.organization\n\n        set_option_value = functools.partial(\n            UserOption.objects.set_value,\n            user,\n            DISABLED_ORGANIZATIONS_USER_OPTION_KEY,\n        )\n\n        deliver_report = functools.partial(\n            deliver_organization_user_report,\n            0,\n            60 * 60 * 24 * 7,\n            organization.id,\n            user.id,\n        )\n\n        set_option_value([])\n        assert deliver_report() is not Skipped.NotSubscribed\n\n        set_option_value([organization.id])\n        assert deliver_report() is Skipped.NotSubscribed\n\n    def test_user_subscribed_to_organization_reports(self):\n        user = self.user\n        organization = self.organization\n\n        set_option_value = functools.partial(\n            UserOption.objects.set_value,\n            user,\n            DISABLED_ORGANIZATIONS_USER_OPTION_KEY,\n        )\n\n        set_option_value([])\n        assert user_subscribed_to_organization_reports(user, organization) is True\n\n        set_option_value([-1])\n        assert user_subscribed_to_organization_reports(user, organization) is True\n\n        set_option_value([organization.id])\n        assert user_subscribed_to_organization_reports(user, organization) is False\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_reports.py", "id": "bbef23a306d411d824d81201867aef1d", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_reports.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}