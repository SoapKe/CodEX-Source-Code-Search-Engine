{"author": "Theano", "code": "from __future__ import absolute_import, print_function, division\nimport numpy, theano\nimport theano.misc.pycuda_init\nfrom pycuda.compiler import SourceModule\nimport theano.sandbox.cuda as cuda\n\nclass PyCUDADoubleOp(theano.Op):\n    def __eq__(self, other):\n        return type(self) == type(other)\n    def __hash__(self):\n        return hash(type(self))\n    def __str__(self):\n        return self.__class__.__name__\n    def make_node(self, inp):\n        inp = cuda.basic_ops.gpu_contiguous(\n           cuda.basic_ops.as_cuda_ndarray_variable(inp))\n        assert inp.dtype == \"float32\"\n        return theano.Apply(self, [inp], [inp.type()])\n\n    def make_thunk(self, node, storage_map, _, _2):\n        mod = SourceModule(\"\"\"\n    __global__ void my_fct(float * i0, float * o0, int size) {\n    int i = blockIdx.x*blockDim.x + threadIdx.x;\n    if(i<size){\n        o0[i] = i0[i]*2;\n    }\n  }\"\"\")\n        pycuda_fct = mod.get_function(\"my_fct\")\n        inputs = [ storage_map[v] for v in node.inputs]\n        outputs = [ storage_map[v] for v in node.outputs]\n        def thunk():\n            z = outputs[0]\n            if z[0] is None or z[0].shape!=inputs[0][0].shape:\n                z[0] = cuda.CudaNdarray.zeros(inputs[0][0].shape)\n            grid = (int(numpy.ceil(inputs[0][0].size / 512.)),1)\n            pycuda_fct(inputs[0][0], z[0], numpy.intc(inputs[0][0].size),\n                       block=(512,1,1), grid=grid)\n\n        return thunk\n\nx = theano.tensor.fmatrix()\nf = theano.function([x], PyCUDADoubleOp()(x))\nxv=numpy.ones((4,5), dtype=\"float32\")\n\nassert numpy.allclose(f(xv), xv*2)\nprint(numpy.asarray(f(xv)))\n", "comments": "          global   void fct(float   i0  float   o0  int size)       int   blockidx x blockdim x   threadidx x      if(i size)          o0    i0  2               ", "content": "from __future__ import absolute_import, print_function, division\nimport numpy, theano\nimport theano.misc.pycuda_init\nfrom pycuda.compiler import SourceModule\nimport theano.sandbox.cuda as cuda\n\nclass PyCUDADoubleOp(theano.Op):\n    def __eq__(self, other):\n        return type(self) == type(other)\n    def __hash__(self):\n        return hash(type(self))\n    def __str__(self):\n        return self.__class__.__name__\n    def make_node(self, inp):\n        inp = cuda.basic_ops.gpu_contiguous(\n           cuda.basic_ops.as_cuda_ndarray_variable(inp))\n        assert inp.dtype == \"float32\"\n        return theano.Apply(self, [inp], [inp.type()])\n\n    def make_thunk(self, node, storage_map, _, _2):\n        mod = SourceModule(\"\"\"\n    __global__ void my_fct(float * i0, float * o0, int size) {\n    int i = blockIdx.x*blockDim.x + threadIdx.x;\n    if(i<size){\n        o0[i] = i0[i]*2;\n    }\n  }\"\"\")\n        pycuda_fct = mod.get_function(\"my_fct\")\n        inputs = [ storage_map[v] for v in node.inputs]\n        outputs = [ storage_map[v] for v in node.outputs]\n        def thunk():\n            z = outputs[0]\n            if z[0] is None or z[0].shape!=inputs[0][0].shape:\n                z[0] = cuda.CudaNdarray.zeros(inputs[0][0].shape)\n            grid = (int(numpy.ceil(inputs[0][0].size / 512.)),1)\n            pycuda_fct(inputs[0][0], z[0], numpy.intc(inputs[0][0].size),\n                       block=(512,1,1), grid=grid)\n\n        return thunk\n\nx = theano.tensor.fmatrix()\nf = theano.function([x], PyCUDADoubleOp()(x))\nxv=numpy.ones((4,5), dtype=\"float32\")\n\nassert numpy.allclose(f(xv), xv*2)\nprint(numpy.asarray(f(xv)))\n", "description": "Theano is a Python library that allows you to define, optimize, and evaluate mathematical expressions involving multi-dimensional arrays efficiently. It can use GPUs and perform efficient symbolic differentiation.", "file_name": "pycuda_double_op.py", "id": "7cea8aeed8b876cb861928790e213305", "language": "Python", "project_name": "Theano", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Theano-Theano/Theano-Theano-546067d/doc/hpcs2011_tutorial/pycuda_double_op.py", "save_time": "", "source": "", "update_at": "2018-03-18T03:16:17Z", "url": "https://github.com/Theano/Theano", "wiki": true}