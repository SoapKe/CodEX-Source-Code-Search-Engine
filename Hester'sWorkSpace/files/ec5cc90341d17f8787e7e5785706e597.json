{"author": "ansible", "code": "|-y is provided, the prompt for confirmation prior to deleting resources.\nPlease use caution, you can easily delete your *ENTIRE* GCE infrastructure.\n'''\n\nimport optparse\nimport os\nimport re\nimport sys\nimport yaml\n\ntry:\n    from libcloud.common.google import (\n        GoogleBaseError,\n        QuotaExceededError,\n        ResourceExistsError,\n        ResourceInUseError,\n        ResourceNotFoundError,\n    )\n    from libcloud.compute.providers import get_driver\n    from libcloud.compute.types import Provider\n    _ = Provider.GCE\nexcept ImportError:\n    print(\"failed=True msg='libcloud with GCE support (0.13.3+) required for this module'\")\n    sys.exit(1)\n\nimport gce_credentials\n\nfrom ansible.module_utils.six.moves import input\n\n\ndef delete_gce_resources(get_func, attr, opts):\n    for item in get_func():\n        val = getattr(item, attr)\n        if re.search(opts.match_re, val, re.IGNORECASE):\n            prompt_and_delete(item, \"Delete matching %s? [y/n]: \" % (item,), opts.assumeyes)\n\n\ndef prompt_and_delete(item, prompt, assumeyes):\n    if not assumeyes:\n        assumeyes = input(prompt).lower() == 'y'\n    assert hasattr(item, 'destroy'), \"Class <%s> has no delete attribute\" % item.__class__\n    if assumeyes:\n        item.destroy()\n        print(\"Deleted %s\" % item)\n\n\ndef parse_args():\n    parser = optparse.OptionParser(\n        usage=\"%s [options]\" % sys.argv[0],\n        description=__doc__\n    )\n    gce_credentials.add_credentials_options(parser)\n    parser.add_option(\n        \"--yes\", \"-y\",\n        action=\"store_true\", dest=\"assumeyes\",\n        default=False,\n        help=\"Don't prompt for confirmation\"\n    )\n    parser.add_option(\n        \"--match\",\n        action=\"store\", dest=\"match_re\",\n        default=\"^ansible-testing-\",\n        help=\"Regular expression used to find GCE resources (default: %default)\"\n    )\n\n    (opts, args) = parser.parse_args()\n    gce_credentials.check_required(opts, parser)\n    return (opts, args)\n\nif __name__ == '__main__':\n\n    (opts, args) = parse_args()\n\n    \n    gce = gce_credentials.get_gce_driver(opts)\n\n    try:\n        \n        delete_gce_resources(gce.list_nodes, 'name', opts)\n\n        \n        def get_snapshots():\n            for volume in gce.list_volumes():\n                for snapshot in gce.list_volume_snapshots(volume):\n                    yield snapshot\n        delete_gce_resources(get_snapshots, 'name', opts)\n        \n        delete_gce_resources(gce.list_volumes, 'name', opts)\n    except KeyboardInterrupt as e:\n        print(\"\\nExiting on user command.\")\n", "comments": "    find delete gce resources matching provided   match string   unless   yes  provided  prompt confirmation prior deleting resources  please use caution  easily delete  entire  gce infrastructure         connect gce    delete matching instances    delete matching snapshots    delete matching disks ", "content": "'''\nFind and delete GCE resources matching the provided --match string.  Unless\n--yes|-y is provided, the prompt for confirmation prior to deleting resources.\nPlease use caution, you can easily delete your *ENTIRE* GCE infrastructure.\n'''\n\nimport optparse\nimport os\nimport re\nimport sys\nimport yaml\n\ntry:\n    from libcloud.common.google import (\n        GoogleBaseError,\n        QuotaExceededError,\n        ResourceExistsError,\n        ResourceInUseError,\n        ResourceNotFoundError,\n    )\n    from libcloud.compute.providers import get_driver\n    from libcloud.compute.types import Provider\n    _ = Provider.GCE\nexcept ImportError:\n    print(\"failed=True msg='libcloud with GCE support (0.13.3+) required for this module'\")\n    sys.exit(1)\n\nimport gce_credentials\n\nfrom ansible.module_utils.six.moves import input\n\n\ndef delete_gce_resources(get_func, attr, opts):\n    for item in get_func():\n        val = getattr(item, attr)\n        if re.search(opts.match_re, val, re.IGNORECASE):\n            prompt_and_delete(item, \"Delete matching %s? [y/n]: \" % (item,), opts.assumeyes)\n\n\ndef prompt_and_delete(item, prompt, assumeyes):\n    if not assumeyes:\n        assumeyes = input(prompt).lower() == 'y'\n    assert hasattr(item, 'destroy'), \"Class <%s> has no delete attribute\" % item.__class__\n    if assumeyes:\n        item.destroy()\n        print(\"Deleted %s\" % item)\n\n\ndef parse_args():\n    parser = optparse.OptionParser(\n        usage=\"%s [options]\" % sys.argv[0],\n        description=__doc__\n    )\n    gce_credentials.add_credentials_options(parser)\n    parser.add_option(\n        \"--yes\", \"-y\",\n        action=\"store_true\", dest=\"assumeyes\",\n        default=False,\n        help=\"Don't prompt for confirmation\"\n    )\n    parser.add_option(\n        \"--match\",\n        action=\"store\", dest=\"match_re\",\n        default=\"^ansible-testing-\",\n        help=\"Regular expression used to find GCE resources (default: %default)\"\n    )\n\n    (opts, args) = parser.parse_args()\n    gce_credentials.check_required(opts, parser)\n    return (opts, args)\n\nif __name__ == '__main__':\n\n    (opts, args) = parse_args()\n\n    # Connect to GCE\n    gce = gce_credentials.get_gce_driver(opts)\n\n    try:\n        # Delete matching instances\n        delete_gce_resources(gce.list_nodes, 'name', opts)\n\n        # Delete matching snapshots\n        def get_snapshots():\n            for volume in gce.list_volumes():\n                for snapshot in gce.list_volume_snapshots(volume):\n                    yield snapshot\n        delete_gce_resources(get_snapshots, 'name', opts)\n        # Delete matching disks\n        delete_gce_resources(gce.list_volumes, 'name', opts)\n    except KeyboardInterrupt as e:\n        print(\"\\nExiting on user command.\")\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "cleanup_gce.py", "id": "ec5cc90341d17f8787e7e5785706e597", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/legacy/cleanup_gce.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}