{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass RestaurantFloor(models.Model):\n\n    _name = 'restaurant.floor'\n\n    name = fields.Char('Floor Name', required=True, help='An internal identification of the restaurant floor')\n    pos_config_id = fields.Many2one('pos.config', string='Point of Sale')\n    background_image = fields.Binary('Background Image', attachment=True, help='A background image used to display a floor layout in the point of sale interface')\n    background_color = fields.Char('Background Color', help='The background color of the floor layout, (must be specified in a html-compatible format)', default='rgb(210, 210, 210)')\n    table_ids = fields.One2many('restaurant.table', 'floor_id', string='Tables', help='The list of tables in this floor')\n    sequence = fields.Integer('Sequence', help='Used to sort Floors', default=1)\n\n\nclass RestaurantTable(models.Model):\n\n    _name = 'restaurant.table'\n\n    name = fields.Char('Table Name', required=True, help='An internal identification of a table')\n    floor_id = fields.Many2one('restaurant.floor', string='Floor')\n    shape = fields.Selection([('square', 'Square'), ('round', 'Round')], string='Shape', required=True, default='square')\n    position_h = fields.Float('Horizontal Position', default=10,\n        help=\"The table's horizontal position from the left side to the table's center, in pixels\")\n    position_v = fields.Float('Vertical Position', default=10,\n        help=\"The table's vertical position from the top to the table's center, in pixels\")\n    width = fields.Float('Width', default=50, help=\"The table's width in pixels\")\n    height = fields.Float('Height', default=50, help=\"The table's height in pixels\")\n    seats = fields.Integer('Seats', default=1, help=\"The default number of customer served at this table.\")\n    color = fields.Char('Color', help=\"The table's color, expressed as a valid 'background' CSS property value\")\n    active = fields.Boolean('Active', default=True, help='If false, the table is deactivated and will not be available in the point of sale')\n\n    @api.model\n    def create_from_ui(self, table):\n        \n        if table.get('floor_id'):\n            table['floor_id'] = table['floor_id'][0]\n\n        table_id = table.pop('id', False)\n        if table_id:\n            self.browse(table_id).write(table)\n        else:\n            table_id = self.create(table).id\n        return table_id\n\n\nclass RestaurantPrinter(models.Model):\n\n    _name = 'restaurant.printer'\n\n    name = fields.Char('Printer Name', required=True, default='Printer', help='An internal identification of the printer')\n    proxy_ip = fields.Char('Proxy IP Address', help=\"The IP Address or hostname of the Printer's hardware proxy\")\n    product_categories_ids = fields.Many2many('pos.category', 'printer_category_rel', 'printer_id', 'category_id', string='Printed Product Categories')\n", "comments": "    create modify table point sale ui              table contains table fields  if contains             id  modify existing table  it             returns id table                     coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass RestaurantFloor(models.Model):\n\n    _name = 'restaurant.floor'\n\n    name = fields.Char('Floor Name', required=True, help='An internal identification of the restaurant floor')\n    pos_config_id = fields.Many2one('pos.config', string='Point of Sale')\n    background_image = fields.Binary('Background Image', attachment=True, help='A background image used to display a floor layout in the point of sale interface')\n    background_color = fields.Char('Background Color', help='The background color of the floor layout, (must be specified in a html-compatible format)', default='rgb(210, 210, 210)')\n    table_ids = fields.One2many('restaurant.table', 'floor_id', string='Tables', help='The list of tables in this floor')\n    sequence = fields.Integer('Sequence', help='Used to sort Floors', default=1)\n\n\nclass RestaurantTable(models.Model):\n\n    _name = 'restaurant.table'\n\n    name = fields.Char('Table Name', required=True, help='An internal identification of a table')\n    floor_id = fields.Many2one('restaurant.floor', string='Floor')\n    shape = fields.Selection([('square', 'Square'), ('round', 'Round')], string='Shape', required=True, default='square')\n    position_h = fields.Float('Horizontal Position', default=10,\n        help=\"The table's horizontal position from the left side to the table's center, in pixels\")\n    position_v = fields.Float('Vertical Position', default=10,\n        help=\"The table's vertical position from the top to the table's center, in pixels\")\n    width = fields.Float('Width', default=50, help=\"The table's width in pixels\")\n    height = fields.Float('Height', default=50, help=\"The table's height in pixels\")\n    seats = fields.Integer('Seats', default=1, help=\"The default number of customer served at this table.\")\n    color = fields.Char('Color', help=\"The table's color, expressed as a valid 'background' CSS property value\")\n    active = fields.Boolean('Active', default=True, help='If false, the table is deactivated and will not be available in the point of sale')\n\n    @api.model\n    def create_from_ui(self, table):\n        \"\"\" create or modify a table from the point of sale UI.\n            table contains the table's fields. If it contains an\n            id, it will modify the existing table. It then\n            returns the id of the table.\n        \"\"\"\n        if table.get('floor_id'):\n            table['floor_id'] = table['floor_id'][0]\n\n        table_id = table.pop('id', False)\n        if table_id:\n            self.browse(table_id).write(table)\n        else:\n            table_id = self.create(table).id\n        return table_id\n\n\nclass RestaurantPrinter(models.Model):\n\n    _name = 'restaurant.printer'\n\n    name = fields.Char('Printer Name', required=True, default='Printer', help='An internal identification of the printer')\n    proxy_ip = fields.Char('Proxy IP Address', help=\"The IP Address or hostname of the Printer's hardware proxy\")\n    product_categories_ids = fields.Many2many('pos.category', 'printer_category_rel', 'printer_id', 'category_id', string='Printed Product Categories')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "pos_restaurant.py", "id": "393ce9b147c936de87bf2aedda4e8ee4", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/pos_restaurant/models/pos_restaurant.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}