{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..aes import aes_cbc_decrypt\nfrom ..compat import (\n    compat_b64decode,\n    compat_ord,\n    compat_str,\n)\nfrom ..utils import (\n    bytes_to_intlist,\n    ExtractorError,\n    intlist_to_bytes,\n    int_or_none,\n    strip_or_none,\n)\n\n\nclass RTL2IE(InfoExtractor):\n    IE_NAME = 'rtl2'\n    _VALID_URL = r'http?://(?:www\\.)?rtl2\\.de/[^?\n    _TESTS = [{\n        'url': 'http://www.rtl2.de/sendung/grip-das-motormagazin/folge/folge-203-0',\n        'info_dict': {\n            'id': 'folge-203-0',\n            'ext': 'f4v',\n            'title': 'GRIP sucht den Sommerk\u00f6nig',\n            'description': 'md5:e3adbb940fd3c6e76fa341b8748b562f'\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.rtl2.de/sendung/koeln-50667/video/5512-anna/21040-anna-erwischt-alex/',\n        'info_dict': {\n            'id': '21040-anna-erwischt-alex',\n            'ext': 'mp4',\n            'title': 'Anna erwischt Alex!',\n            'description': 'Anna nimmt ihrem Vater nicht ab, dass er nicht spielt. Und tats\u00e4chlich erwischt sie ihn auf frischer Tat.'\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        \n        if not url.endswith('/'):\n            url += '/'\n\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        mobj = re.search(\n            r'<div[^>]+data-collection=\"(?P<vico_id>\\d+)\"[^>]+data-video=\"(?P<vivi_id>\\d+)\"',\n            webpage)\n        if mobj:\n            vico_id = mobj.group('vico_id')\n            vivi_id = mobj.group('vivi_id')\n        else:\n            vico_id = self._html_search_regex(\n                r'vico_id\\s*:\\s*([0-9]+)', webpage, 'vico_id')\n            vivi_id = self._html_search_regex(\n                r'vivi_id\\s*:\\s*([0-9]+)', webpage, 'vivi_id')\n\n        info = self._download_json(\n            'http://www.rtl2.de/sites/default/modules/rtl2/mediathek/php/get_video_jw.php',\n            video_id, query={\n                'vico_id': vico_id,\n                'vivi_id': vivi_id,\n            })\n        video_info = info['video']\n        title = video_info['titel']\n\n        formats = []\n\n        rtmp_url = video_info.get('streamurl')\n        if rtmp_url:\n            rtmp_url = rtmp_url.replace('\\\\', '')\n            stream_url = 'mp4:' + self._html_search_regex(r'/ondemand/(.+)', rtmp_url, 'stream URL')\n            rtmp_conn = ['S:connect', 'O:1', 'NS:pageUrl:' + url, 'NB:fpad:0', 'NN:videoFunction:1', 'O:0']\n\n            formats.append({\n                'format_id': 'rtmp',\n                'url': rtmp_url,\n                'play_path': stream_url,\n                'player_url': 'http://www.rtl2.de/flashplayer/vipo_player.swf',\n                'page_url': url,\n                'flash_version': 'LNX 11,2,202,429',\n                'rtmp_conn': rtmp_conn,\n                'no_resume': True,\n                'preference': 1,\n            })\n\n        m3u8_url = video_info.get('streamurl_hls')\n        if m3u8_url:\n            formats.extend(self._extract_akamai_formats(m3u8_url, video_id))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': video_info.get('image'),\n            'description': video_info.get('beschreibung'),\n            'duration': int_or_none(video_info.get('duration')),\n            'formats': formats,\n        }\n\n\nclass RTL2YouBaseIE(InfoExtractor):\n    _BACKWERK_BASE_URL = 'https://p-you-backwerk.rtl2apps.de/'\n\n\nclass RTL2YouIE(RTL2YouBaseIE):\n    IE_NAME = 'rtl2:you'\n    _VALID_URL = r'http?://you\\.rtl2\\.de/(?:video/\\d+/|youplayer/index\\.html\\?.*?\\bvid=)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://you.rtl2.de/video/3002/15740/MJUNIK%20%E2%80%93%20Home%20of%20YOU/307-hirn-wo-bist-du',\n        'info_dict': {\n            'id': '15740',\n            'ext': 'mp4',\n            'title': 'MJUNIK \u2013 Home of YOU - \n            'description': 'md5:ddaa95c61b372b12b66e115b2772fe01',\n            'age_limit': 12,\n        },\n    }, {\n        'url': 'http://you.rtl2.de/youplayer/index.html?vid=15712',\n        'only_matching': True,\n    }]\n    _AES_KEY = b'\\xe9W\\xe4.<*\\xb8\\x1a\\xd2\\xb6\\x92\\xf3C\\xd3\\xefL\\x1b\\x03*\\xbbbH\\xc0\\x03\\xffo\\xc2\\xf2(\\xaa\\xaa!'\n    _GEO_COUNTRIES = ['DE']\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        stream_data = self._download_json(\n            self._BACKWERK_BASE_URL + 'stream/video/' + video_id, video_id)\n\n        data, iv = compat_b64decode(stream_data['streamUrl']).decode().split(':')\n        stream_url = intlist_to_bytes(aes_cbc_decrypt(\n            bytes_to_intlist(compat_b64decode(data)),\n            bytes_to_intlist(self._AES_KEY),\n            bytes_to_intlist(compat_b64decode(iv))\n        ))\n        if b'rtl2_you_video_not_found' in stream_url:\n            raise ExtractorError('video not found', expected=True)\n\n        formats = self._extract_m3u8_formats(\n            stream_url[:-compat_ord(stream_url[-1])].decode(),\n            video_id, 'mp4', 'm3u8_native')\n        self._sort_formats(formats)\n\n        video_data = self._download_json(\n            self._BACKWERK_BASE_URL + 'video/' + video_id, video_id)\n\n        series = video_data.get('formatTitle')\n        title = episode = video_data.get('title') or series\n        if series and series != title:\n            title = '%s - %s' % (series, title)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': strip_or_none(video_data.get('description')),\n            'thumbnail': video_data.get('image'),\n            'duration': int_or_none(stream_data.get('duration') or video_data.get('duration'), 1000),\n            'series': series,\n            'episode': episode,\n            'age_limit': int_or_none(video_data.get('minimumAge')),\n        }\n\n\nclass RTL2YouSeriesIE(RTL2YouBaseIE):\n    IE_NAME = 'rtl2:you:series'\n    _VALID_URL = r'http?://you\\.rtl2\\.de/videos/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://you.rtl2.de/videos/115/dragon-ball',\n        'info_dict': {\n            'id': '115',\n        },\n        'playlist_mincount': 5,\n    }\n\n    def _real_extract(self, url):\n        series_id = self._match_id(url)\n        stream_data = self._download_json(\n            self._BACKWERK_BASE_URL + 'videos',\n            series_id, query={\n                'formatId': series_id,\n                'limit': 1000000000,\n            })\n\n        entries = []\n        for video in stream_data.get('videos', []):\n            video_id = compat_str(video['videoId'])\n            if not video_id:\n                continue\n            entries.append(self.url_result(\n                'http://you.rtl2.de/video/%s/%s' % (series_id, video_id),\n                'RTL2You', video_id))\n        return self.playlist_result(entries, series_id)\n", "comments": "# coding: utf-8\n#]*?/(?P<id>[^?#/]*?)(?:$|/(?:$|[?#]))'\n# rtmp download\n# rtmp download\n# Some rtl2 urls have no slash at the end, so append it.\n#307 Hirn, wo bist du?!',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..aes import aes_cbc_decrypt\nfrom ..compat import (\n    compat_b64decode,\n    compat_ord,\n    compat_str,\n)\nfrom ..utils import (\n    bytes_to_intlist,\n    ExtractorError,\n    intlist_to_bytes,\n    int_or_none,\n    strip_or_none,\n)\n\n\nclass RTL2IE(InfoExtractor):\n    IE_NAME = 'rtl2'\n    _VALID_URL = r'http?://(?:www\\.)?rtl2\\.de/[^?#]*?/(?P<id>[^?#/]*?)(?:$|/(?:$|[?#]))'\n    _TESTS = [{\n        'url': 'http://www.rtl2.de/sendung/grip-das-motormagazin/folge/folge-203-0',\n        'info_dict': {\n            'id': 'folge-203-0',\n            'ext': 'f4v',\n            'title': 'GRIP sucht den Sommerk\u00f6nig',\n            'description': 'md5:e3adbb940fd3c6e76fa341b8748b562f'\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.rtl2.de/sendung/koeln-50667/video/5512-anna/21040-anna-erwischt-alex/',\n        'info_dict': {\n            'id': '21040-anna-erwischt-alex',\n            'ext': 'mp4',\n            'title': 'Anna erwischt Alex!',\n            'description': 'Anna nimmt ihrem Vater nicht ab, dass er nicht spielt. Und tats\u00e4chlich erwischt sie ihn auf frischer Tat.'\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        # Some rtl2 urls have no slash at the end, so append it.\n        if not url.endswith('/'):\n            url += '/'\n\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        mobj = re.search(\n            r'<div[^>]+data-collection=\"(?P<vico_id>\\d+)\"[^>]+data-video=\"(?P<vivi_id>\\d+)\"',\n            webpage)\n        if mobj:\n            vico_id = mobj.group('vico_id')\n            vivi_id = mobj.group('vivi_id')\n        else:\n            vico_id = self._html_search_regex(\n                r'vico_id\\s*:\\s*([0-9]+)', webpage, 'vico_id')\n            vivi_id = self._html_search_regex(\n                r'vivi_id\\s*:\\s*([0-9]+)', webpage, 'vivi_id')\n\n        info = self._download_json(\n            'http://www.rtl2.de/sites/default/modules/rtl2/mediathek/php/get_video_jw.php',\n            video_id, query={\n                'vico_id': vico_id,\n                'vivi_id': vivi_id,\n            })\n        video_info = info['video']\n        title = video_info['titel']\n\n        formats = []\n\n        rtmp_url = video_info.get('streamurl')\n        if rtmp_url:\n            rtmp_url = rtmp_url.replace('\\\\', '')\n            stream_url = 'mp4:' + self._html_search_regex(r'/ondemand/(.+)', rtmp_url, 'stream URL')\n            rtmp_conn = ['S:connect', 'O:1', 'NS:pageUrl:' + url, 'NB:fpad:0', 'NN:videoFunction:1', 'O:0']\n\n            formats.append({\n                'format_id': 'rtmp',\n                'url': rtmp_url,\n                'play_path': stream_url,\n                'player_url': 'http://www.rtl2.de/flashplayer/vipo_player.swf',\n                'page_url': url,\n                'flash_version': 'LNX 11,2,202,429',\n                'rtmp_conn': rtmp_conn,\n                'no_resume': True,\n                'preference': 1,\n            })\n\n        m3u8_url = video_info.get('streamurl_hls')\n        if m3u8_url:\n            formats.extend(self._extract_akamai_formats(m3u8_url, video_id))\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': video_info.get('image'),\n            'description': video_info.get('beschreibung'),\n            'duration': int_or_none(video_info.get('duration')),\n            'formats': formats,\n        }\n\n\nclass RTL2YouBaseIE(InfoExtractor):\n    _BACKWERK_BASE_URL = 'https://p-you-backwerk.rtl2apps.de/'\n\n\nclass RTL2YouIE(RTL2YouBaseIE):\n    IE_NAME = 'rtl2:you'\n    _VALID_URL = r'http?://you\\.rtl2\\.de/(?:video/\\d+/|youplayer/index\\.html\\?.*?\\bvid=)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://you.rtl2.de/video/3002/15740/MJUNIK%20%E2%80%93%20Home%20of%20YOU/307-hirn-wo-bist-du',\n        'info_dict': {\n            'id': '15740',\n            'ext': 'mp4',\n            'title': 'MJUNIK \u2013 Home of YOU - #307 Hirn, wo bist du?!',\n            'description': 'md5:ddaa95c61b372b12b66e115b2772fe01',\n            'age_limit': 12,\n        },\n    }, {\n        'url': 'http://you.rtl2.de/youplayer/index.html?vid=15712',\n        'only_matching': True,\n    }]\n    _AES_KEY = b'\\xe9W\\xe4.<*\\xb8\\x1a\\xd2\\xb6\\x92\\xf3C\\xd3\\xefL\\x1b\\x03*\\xbbbH\\xc0\\x03\\xffo\\xc2\\xf2(\\xaa\\xaa!'\n    _GEO_COUNTRIES = ['DE']\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        stream_data = self._download_json(\n            self._BACKWERK_BASE_URL + 'stream/video/' + video_id, video_id)\n\n        data, iv = compat_b64decode(stream_data['streamUrl']).decode().split(':')\n        stream_url = intlist_to_bytes(aes_cbc_decrypt(\n            bytes_to_intlist(compat_b64decode(data)),\n            bytes_to_intlist(self._AES_KEY),\n            bytes_to_intlist(compat_b64decode(iv))\n        ))\n        if b'rtl2_you_video_not_found' in stream_url:\n            raise ExtractorError('video not found', expected=True)\n\n        formats = self._extract_m3u8_formats(\n            stream_url[:-compat_ord(stream_url[-1])].decode(),\n            video_id, 'mp4', 'm3u8_native')\n        self._sort_formats(formats)\n\n        video_data = self._download_json(\n            self._BACKWERK_BASE_URL + 'video/' + video_id, video_id)\n\n        series = video_data.get('formatTitle')\n        title = episode = video_data.get('title') or series\n        if series and series != title:\n            title = '%s - %s' % (series, title)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': strip_or_none(video_data.get('description')),\n            'thumbnail': video_data.get('image'),\n            'duration': int_or_none(stream_data.get('duration') or video_data.get('duration'), 1000),\n            'series': series,\n            'episode': episode,\n            'age_limit': int_or_none(video_data.get('minimumAge')),\n        }\n\n\nclass RTL2YouSeriesIE(RTL2YouBaseIE):\n    IE_NAME = 'rtl2:you:series'\n    _VALID_URL = r'http?://you\\.rtl2\\.de/videos/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://you.rtl2.de/videos/115/dragon-ball',\n        'info_dict': {\n            'id': '115',\n        },\n        'playlist_mincount': 5,\n    }\n\n    def _real_extract(self, url):\n        series_id = self._match_id(url)\n        stream_data = self._download_json(\n            self._BACKWERK_BASE_URL + 'videos',\n            series_id, query={\n                'formatId': series_id,\n                'limit': 1000000000,\n            })\n\n        entries = []\n        for video in stream_data.get('videos', []):\n            video_id = compat_str(video['videoId'])\n            if not video_id:\n                continue\n            entries.append(self.url_result(\n                'http://you.rtl2.de/video/%s/%s' % (series_id, video_id),\n                'RTL2You', video_id))\n        return self.playlist_result(entries, series_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rtl2.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rtl2.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}