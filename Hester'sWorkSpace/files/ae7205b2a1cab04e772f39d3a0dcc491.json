{"author": "donnemartin", "code": "import theano\nimport theano.tensor as T\nimport numpy as np\n\nprobabilities = T.vector()\nnb_samples = T.iscalar()\n\nrng = T.shared_randomstreams.RandomStreams(1234)\n\n\ndef sample_from_pvect(pvect):\n    \"\"\" Provided utility function: given a symbolic vector of\n    probabilities (which MUST sum to 1), sample one element\n    and return its index.\n    \"\"\"\n    onehot_sample = rng.multinomial(n=1, pvals=pvect)\n    sample = onehot_sample.argmax()\n    return sample\n\n\ndef set_p_to_zero(pvect, i):\n    \"\"\" Provided utility function: given a symbolic vector of\n    probabilities and an index 'i', set the probability of the\n    i-th element to 0 and renormalize the probabilities so they\n    sum to 1.\n    \"\"\"\n    new_pvect = T.set_subtensor(pvect[i], 0.)\n    new_pvect = new_pvect / new_pvect.sum()\n    return new_pvect\n\n\ndef step(p):\n    sample = sample_from_pvect(p)\n    new_p = set_p_to_zero(p, sample)\n    return new_p, sample\n\noutput, updates = theano.scan(fn=step,\n                              outputs_info=[probabilities, None],\n                              n_steps=nb_samples)\n\nmodified_probabilities, samples = output\n\nf = theano.function(inputs=[probabilities, nb_samples],\n                    outputs=[samples],\n                    updates=updates)\n\n\ntest_probs = np.asarray([0.6, 0.3, 0.1], dtype=theano.config.floatX)\nfor i in range(10):\n    print(f(test_probs, 2))\n", "comments": "    provided utility function  given symbolic vector     probabilities (which must sum 1)  sample one element     return index              onehot sample   rng multinomial(n 1  pvals pvect)     sample   onehot sample argmax()     return sample   def set p zero(pvect  i)          provided utility function  given symbolic vector     probabilities index    set probability     th element 0 renormalize probabilities     sum 1             testing function ", "content": "import theano\nimport theano.tensor as T\nimport numpy as np\n\nprobabilities = T.vector()\nnb_samples = T.iscalar()\n\nrng = T.shared_randomstreams.RandomStreams(1234)\n\n\ndef sample_from_pvect(pvect):\n    \"\"\" Provided utility function: given a symbolic vector of\n    probabilities (which MUST sum to 1), sample one element\n    and return its index.\n    \"\"\"\n    onehot_sample = rng.multinomial(n=1, pvals=pvect)\n    sample = onehot_sample.argmax()\n    return sample\n\n\ndef set_p_to_zero(pvect, i):\n    \"\"\" Provided utility function: given a symbolic vector of\n    probabilities and an index 'i', set the probability of the\n    i-th element to 0 and renormalize the probabilities so they\n    sum to 1.\n    \"\"\"\n    new_pvect = T.set_subtensor(pvect[i], 0.)\n    new_pvect = new_pvect / new_pvect.sum()\n    return new_pvect\n\n\ndef step(p):\n    sample = sample_from_pvect(p)\n    new_p = set_p_to_zero(p, sample)\n    return new_p, sample\n\noutput, updates = theano.scan(fn=step,\n                              outputs_info=[probabilities, None],\n                              n_steps=nb_samples)\n\nmodified_probabilities, samples = output\n\nf = theano.function(inputs=[probabilities, nb_samples],\n                    outputs=[samples],\n                    updates=updates)\n\n# Testing the function\ntest_probs = np.asarray([0.6, 0.3, 0.1], dtype=theano.config.floatX)\nfor i in range(10):\n    print(f(test_probs, 2))\n", "description": "Data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe, Keras), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.", "file_name": "scan_ex2_solution.py", "id": "ae7205b2a1cab04e772f39d3a0dcc491", "language": "Python", "project_name": "data-science-ipython-notebooks", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-data-science-ipython-notebooks/donnemartin-data-science-ipython-notebooks-a876e34/deep-learning/theano-tutorial/scan_tutorial/scan_ex2_solution.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:16:56Z", "url": "https://github.com/donnemartin/data-science-ipython-notebooks", "wiki": true}