{"author": "mitmproxy", "code": "import pytest\n\nfrom mitmproxy.utils import strutils\n\n\ndef test_always_bytes():\n    assert strutils.always_bytes(bytes(range(256))) == bytes(range(256))\n    assert strutils.always_bytes(\"foo\") == b\"foo\"\n    with pytest.raises(ValueError):\n        strutils.always_bytes(u\"\\u2605\", \"ascii\")\n    with pytest.raises(TypeError):\n        strutils.always_bytes(42, \"ascii\")\n\n\ndef test_always_str():\n    with pytest.raises(TypeError):\n        strutils.always_str(42)\n    assert strutils.always_str(\"foo\") == \"foo\"\n    assert strutils.always_str(b\"foo\") == \"foo\"\n    assert strutils.always_str(None) is None\n\n\ndef test_escape_control_characters():\n    assert strutils.escape_control_characters(u\"one\") == u\"one\"\n    assert strutils.escape_control_characters(u\"\\00ne\") == u\".ne\"\n    assert strutils.escape_control_characters(u\"\\nne\") == u\"\\nne\"\n    assert strutils.escape_control_characters(u\"\\nne\", False) == u\".ne\"\n    assert strutils.escape_control_characters(u\"\\u2605\") == u\"\\u2605\"\n    assert (\n        strutils.escape_control_characters(bytes(bytearray(range(128))).decode()) ==\n        u'.........\\t\\n..\\r.................. !\"#$%&\\'()*+,-./0123456789:;<'\n        u'=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~.'\n    )\n    assert (\n        strutils.escape_control_characters(bytes(bytearray(range(128))).decode(), False) ==\n        u'................................ !\"#$%&\\'()*+,-./0123456789:;<'\n        u'=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~.'\n    )\n\n    with pytest.raises(ValueError):\n        strutils.escape_control_characters(b\"foo\")\n\n\ndef test_bytes_to_escaped_str():\n    assert strutils.bytes_to_escaped_str(b\"foo\") == \"foo\"\n    assert strutils.bytes_to_escaped_str(b\"\\b\") == r\"\\x08\"\n    assert strutils.bytes_to_escaped_str(br\"&!?=\\)\") == r\"&!?=\\\\)\"\n    assert strutils.bytes_to_escaped_str(b'\\xc3\\xbc') == r\"\\xc3\\xbc\"\n    assert strutils.bytes_to_escaped_str(b\"'\") == r\"'\"\n    assert strutils.bytes_to_escaped_str(b'\"') == r'\"'\n\n    assert strutils.bytes_to_escaped_str(b\"'\", escape_single_quotes=True) == r\"\\'\"\n    assert strutils.bytes_to_escaped_str(b'\"', escape_single_quotes=True) == r'\"'\n\n    assert strutils.bytes_to_escaped_str(b\"\\r\\n\\t\") == \"\\\\r\\\\n\\\\t\"\n    assert strutils.bytes_to_escaped_str(b\"\\r\\n\\t\", True) == \"\\r\\n\\t\"\n\n    assert strutils.bytes_to_escaped_str(b\"\\n\", True) == \"\\n\"\n    assert strutils.bytes_to_escaped_str(b\"\\\\n\", True) == \"\\\\ \\\\ n\".replace(\" \", \"\")\n    assert strutils.bytes_to_escaped_str(b\"\\\\\\n\", True) == \"\\\\ \\\\ \\n\".replace(\" \", \"\")\n    assert strutils.bytes_to_escaped_str(b\"\\\\\\\\n\", True) == \"\\\\ \\\\ \\\\ \\\\ n\".replace(\" \", \"\")\n\n    with pytest.raises(ValueError):\n        strutils.bytes_to_escaped_str(u\"such unicode\")\n\n\ndef test_escaped_str_to_bytes():\n    assert strutils.escaped_str_to_bytes(\"foo\") == b\"foo\"\n    assert strutils.escaped_str_to_bytes(\"\\x08\") == b\"\\b\"\n    assert strutils.escaped_str_to_bytes(\"&!?=\\\\\\\\)\") == br\"&!?=\\)\"\n    assert strutils.escaped_str_to_bytes(u\"\\\\x08\") == b\"\\b\"\n    assert strutils.escaped_str_to_bytes(u\"&!?=\\\\\\\\)\") == br\"&!?=\\)\"\n    assert strutils.escaped_str_to_bytes(u\"\\u00fc\") == b'\\xc3\\xbc'\n\n    with pytest.raises(ValueError):\n        strutils.escaped_str_to_bytes(b\"very byte\")\n\n\ndef test_is_mostly_bin():\n    assert not strutils.is_mostly_bin(b\"foo\\xFF\")\n    assert strutils.is_mostly_bin(b\"foo\" + b\"\\xFF\" * 10)\n    assert not strutils.is_mostly_bin(\"\")\n\n\ndef test_is_xml():\n    assert not strutils.is_xml(b\"foo\")\n    assert strutils.is_xml(b\"<foo\")\n    assert strutils.is_xml(b\"  \\n<foo\")\n\n\ndef test_clean_hanging_newline():\n    s = \"foo\\n\"\n    assert strutils.clean_hanging_newline(s) == \"foo\"\n    assert strutils.clean_hanging_newline(\"foo\") == \"foo\"\n\n\ndef test_hexdump():\n    assert list(strutils.hexdump(b\"one\\0\" * 10))\n\n\nESCAPE_QUOTES = [\n    \"'\" + strutils.SINGLELINE_CONTENT + strutils.NO_ESCAPE + \"'\",\n    '\"' + strutils.SINGLELINE_CONTENT + strutils.NO_ESCAPE + '\"'\n]\n\n\ndef test_split_special_areas():\n    assert strutils.split_special_areas(\"foo\", ESCAPE_QUOTES) == [\"foo\"]\n    assert strutils.split_special_areas(\"foo 'bar' baz\", ESCAPE_QUOTES) == [\"foo \", \"'bar'\", \" baz\"]\n    assert strutils.split_special_areas(\n        \"\"\"foo 'b\\\\'a\"r' baz\"\"\",\n        ESCAPE_QUOTES\n    ) == [\"foo \", \"'b\\\\'a\\\"r'\", \" baz\"]\n    assert strutils.split_special_areas(\n        \"foo\\n/*bar\\nbaz*/\\nqux\",\n        [r'/\\*[\\s\\S]+?\\*/']\n    ) == [\"foo\\n\", \"/*bar\\nbaz*/\", \"\\nqux\"]\n    assert strutils.split_special_areas(\n        \"foo\\n//bar\\nbaz\",\n        [r'//.+$']\n    ) == [\"foo\\n\", \"//bar\", \"\\nbaz\"]\n\n\ndef test_escape_special_areas():\n    assert strutils.escape_special_areas('foo \"bar\" baz', ESCAPE_QUOTES, \"*\") == 'foo \"bar\" baz'\n    esc = strutils.escape_special_areas('foo \"b*r\" b*z', ESCAPE_QUOTES, \"*\")\n    assert esc == 'foo \"b\\ue02ar\" b*z'\n    assert strutils.unescape_special_areas(esc) == 'foo \"b*r\" b*z'\n", "comments": "   foo  b   r  baz    ", "content": "import pytest\n\nfrom mitmproxy.utils import strutils\n\n\ndef test_always_bytes():\n    assert strutils.always_bytes(bytes(range(256))) == bytes(range(256))\n    assert strutils.always_bytes(\"foo\") == b\"foo\"\n    with pytest.raises(ValueError):\n        strutils.always_bytes(u\"\\u2605\", \"ascii\")\n    with pytest.raises(TypeError):\n        strutils.always_bytes(42, \"ascii\")\n\n\ndef test_always_str():\n    with pytest.raises(TypeError):\n        strutils.always_str(42)\n    assert strutils.always_str(\"foo\") == \"foo\"\n    assert strutils.always_str(b\"foo\") == \"foo\"\n    assert strutils.always_str(None) is None\n\n\ndef test_escape_control_characters():\n    assert strutils.escape_control_characters(u\"one\") == u\"one\"\n    assert strutils.escape_control_characters(u\"\\00ne\") == u\".ne\"\n    assert strutils.escape_control_characters(u\"\\nne\") == u\"\\nne\"\n    assert strutils.escape_control_characters(u\"\\nne\", False) == u\".ne\"\n    assert strutils.escape_control_characters(u\"\\u2605\") == u\"\\u2605\"\n    assert (\n        strutils.escape_control_characters(bytes(bytearray(range(128))).decode()) ==\n        u'.........\\t\\n..\\r.................. !\"#$%&\\'()*+,-./0123456789:;<'\n        u'=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~.'\n    )\n    assert (\n        strutils.escape_control_characters(bytes(bytearray(range(128))).decode(), False) ==\n        u'................................ !\"#$%&\\'()*+,-./0123456789:;<'\n        u'=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~.'\n    )\n\n    with pytest.raises(ValueError):\n        strutils.escape_control_characters(b\"foo\")\n\n\ndef test_bytes_to_escaped_str():\n    assert strutils.bytes_to_escaped_str(b\"foo\") == \"foo\"\n    assert strutils.bytes_to_escaped_str(b\"\\b\") == r\"\\x08\"\n    assert strutils.bytes_to_escaped_str(br\"&!?=\\)\") == r\"&!?=\\\\)\"\n    assert strutils.bytes_to_escaped_str(b'\\xc3\\xbc') == r\"\\xc3\\xbc\"\n    assert strutils.bytes_to_escaped_str(b\"'\") == r\"'\"\n    assert strutils.bytes_to_escaped_str(b'\"') == r'\"'\n\n    assert strutils.bytes_to_escaped_str(b\"'\", escape_single_quotes=True) == r\"\\'\"\n    assert strutils.bytes_to_escaped_str(b'\"', escape_single_quotes=True) == r'\"'\n\n    assert strutils.bytes_to_escaped_str(b\"\\r\\n\\t\") == \"\\\\r\\\\n\\\\t\"\n    assert strutils.bytes_to_escaped_str(b\"\\r\\n\\t\", True) == \"\\r\\n\\t\"\n\n    assert strutils.bytes_to_escaped_str(b\"\\n\", True) == \"\\n\"\n    assert strutils.bytes_to_escaped_str(b\"\\\\n\", True) == \"\\\\ \\\\ n\".replace(\" \", \"\")\n    assert strutils.bytes_to_escaped_str(b\"\\\\\\n\", True) == \"\\\\ \\\\ \\n\".replace(\" \", \"\")\n    assert strutils.bytes_to_escaped_str(b\"\\\\\\\\n\", True) == \"\\\\ \\\\ \\\\ \\\\ n\".replace(\" \", \"\")\n\n    with pytest.raises(ValueError):\n        strutils.bytes_to_escaped_str(u\"such unicode\")\n\n\ndef test_escaped_str_to_bytes():\n    assert strutils.escaped_str_to_bytes(\"foo\") == b\"foo\"\n    assert strutils.escaped_str_to_bytes(\"\\x08\") == b\"\\b\"\n    assert strutils.escaped_str_to_bytes(\"&!?=\\\\\\\\)\") == br\"&!?=\\)\"\n    assert strutils.escaped_str_to_bytes(u\"\\\\x08\") == b\"\\b\"\n    assert strutils.escaped_str_to_bytes(u\"&!?=\\\\\\\\)\") == br\"&!?=\\)\"\n    assert strutils.escaped_str_to_bytes(u\"\\u00fc\") == b'\\xc3\\xbc'\n\n    with pytest.raises(ValueError):\n        strutils.escaped_str_to_bytes(b\"very byte\")\n\n\ndef test_is_mostly_bin():\n    assert not strutils.is_mostly_bin(b\"foo\\xFF\")\n    assert strutils.is_mostly_bin(b\"foo\" + b\"\\xFF\" * 10)\n    assert not strutils.is_mostly_bin(\"\")\n\n\ndef test_is_xml():\n    assert not strutils.is_xml(b\"foo\")\n    assert strutils.is_xml(b\"<foo\")\n    assert strutils.is_xml(b\"  \\n<foo\")\n\n\ndef test_clean_hanging_newline():\n    s = \"foo\\n\"\n    assert strutils.clean_hanging_newline(s) == \"foo\"\n    assert strutils.clean_hanging_newline(\"foo\") == \"foo\"\n\n\ndef test_hexdump():\n    assert list(strutils.hexdump(b\"one\\0\" * 10))\n\n\nESCAPE_QUOTES = [\n    \"'\" + strutils.SINGLELINE_CONTENT + strutils.NO_ESCAPE + \"'\",\n    '\"' + strutils.SINGLELINE_CONTENT + strutils.NO_ESCAPE + '\"'\n]\n\n\ndef test_split_special_areas():\n    assert strutils.split_special_areas(\"foo\", ESCAPE_QUOTES) == [\"foo\"]\n    assert strutils.split_special_areas(\"foo 'bar' baz\", ESCAPE_QUOTES) == [\"foo \", \"'bar'\", \" baz\"]\n    assert strutils.split_special_areas(\n        \"\"\"foo 'b\\\\'a\"r' baz\"\"\",\n        ESCAPE_QUOTES\n    ) == [\"foo \", \"'b\\\\'a\\\"r'\", \" baz\"]\n    assert strutils.split_special_areas(\n        \"foo\\n/*bar\\nbaz*/\\nqux\",\n        [r'/\\*[\\s\\S]+?\\*/']\n    ) == [\"foo\\n\", \"/*bar\\nbaz*/\", \"\\nqux\"]\n    assert strutils.split_special_areas(\n        \"foo\\n//bar\\nbaz\",\n        [r'//.+$']\n    ) == [\"foo\\n\", \"//bar\", \"\\nbaz\"]\n\n\ndef test_escape_special_areas():\n    assert strutils.escape_special_areas('foo \"bar\" baz', ESCAPE_QUOTES, \"*\") == 'foo \"bar\" baz'\n    esc = strutils.escape_special_areas('foo \"b*r\" b*z', ESCAPE_QUOTES, \"*\")\n    assert esc == 'foo \"b\\ue02ar\" b*z'\n    assert strutils.unescape_special_areas(esc) == 'foo \"b*r\" b*z'\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "test_strutils.py", "id": "a2f607b5333b8a3ccb736b37225103de", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/mitmproxy-mitmproxy/mitmproxy-mitmproxy-0bc3f1f/test/mitmproxy/utils/test_strutils.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:46Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}