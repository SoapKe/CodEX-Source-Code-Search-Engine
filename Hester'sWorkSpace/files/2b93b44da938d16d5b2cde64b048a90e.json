{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass RTBFIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'https://www.rtbf.be/video/detail_les-diables-au-coeur-episode-2?id=1921274',\n        'md5': '799f334ddf2c0a582ba80c44655be570',\n        'info_dict': {\n            'id': '1921274',\n            'ext': 'mp4',\n            'title': 'Les Diables au coeur (\u00e9pisode 2)',\n            'description': 'Football - Diables Rouges',\n            'duration': 3099,\n            'upload_date': '20140425',\n            'timestamp': 1398456336,\n            'uploader': 'rtbfsport',\n        }\n    }, {\n        \n        'url': 'http://www.rtbf.be/ouftivi/heros/detail_scooby-doo-mysteres-associes?id=1097&videoId=2057442',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.rtbf.be/ouftivi/niouzz?videoId=2055858',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.rtbf.be/auvio/detail_jeudi-en-prime-siegfried-bracke?id=2102996',\n        'only_matching': True,\n    }]\n    _IMAGE_HOST = 'http://ds1.ds.static.rtbf.be'\n    _PROVIDERS = {\n        'YOUTUBE': 'Youtube',\n        'DAILYMOTION': 'Dailymotion',\n        'VIMEO': 'Vimeo',\n    }\n    _QUALITIES = [\n        ('mobile', 'SD'),\n        ('web', 'MD'),\n        ('high', 'HD'),\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        data = self._download_json(\n            'http://www.rtbf.be/api/media/video?method=getVideoDetail&args[]=%s' % video_id, video_id)\n\n        error = data.get('error')\n        if error:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n        data = data['data']\n\n        provider = data.get('provider')\n        if provider in self._PROVIDERS:\n            return self.url_result(data['url'], self._PROVIDERS[provider])\n\n        formats = []\n        for key, format_id in self._QUALITIES:\n            format_url = data.get(key + 'Url')\n            if format_url:\n                formats.append({\n                    'format_id': format_id,\n                    'url': format_url,\n                })\n\n        thumbnails = []\n        for thumbnail_id, thumbnail_url in data.get('thumbnail', {}).items():\n            if thumbnail_id != 'default':\n                thumbnails.append({\n                    'url': self._IMAGE_HOST + thumbnail_url,\n                    'id': thumbnail_id,\n                })\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': data['title'],\n            'description': data.get('description') or data.get('subtitle'),\n            'thumbnails': thumbnails,\n            'duration': data.get('duration') or data.get('realDuration'),\n            'timestamp': int_or_none(data.get('created')),\n            'view_count': int_or_none(data.get('viewCount')),\n            'uploader': data.get('channel'),\n            'tags': data.get('tags'),\n        }\n", "comments": "(?x)\n        https?://(?:www\\.)?rtbf\\.be/\n        (?:\n            video/[^?]+\\?.*\\bid=|\n            ouftivi/(?:[^/]+/)*[^?]+\\?.*\\bvideoId=|\n            auvio/[^/]+\\?.*id=\n        )(?P<id>\\d+)\n)\n# coding: utf-8\n# geo restricted\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    ExtractorError,\n)\n\n\nclass RTBFIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n        https?://(?:www\\.)?rtbf\\.be/\n        (?:\n            video/[^?]+\\?.*\\bid=|\n            ouftivi/(?:[^/]+/)*[^?]+\\?.*\\bvideoId=|\n            auvio/[^/]+\\?.*id=\n        )(?P<id>\\d+)'''\n    _TESTS = [{\n        'url': 'https://www.rtbf.be/video/detail_les-diables-au-coeur-episode-2?id=1921274',\n        'md5': '799f334ddf2c0a582ba80c44655be570',\n        'info_dict': {\n            'id': '1921274',\n            'ext': 'mp4',\n            'title': 'Les Diables au coeur (\u00e9pisode 2)',\n            'description': 'Football - Diables Rouges',\n            'duration': 3099,\n            'upload_date': '20140425',\n            'timestamp': 1398456336,\n            'uploader': 'rtbfsport',\n        }\n    }, {\n        # geo restricted\n        'url': 'http://www.rtbf.be/ouftivi/heros/detail_scooby-doo-mysteres-associes?id=1097&videoId=2057442',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.rtbf.be/ouftivi/niouzz?videoId=2055858',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.rtbf.be/auvio/detail_jeudi-en-prime-siegfried-bracke?id=2102996',\n        'only_matching': True,\n    }]\n    _IMAGE_HOST = 'http://ds1.ds.static.rtbf.be'\n    _PROVIDERS = {\n        'YOUTUBE': 'Youtube',\n        'DAILYMOTION': 'Dailymotion',\n        'VIMEO': 'Vimeo',\n    }\n    _QUALITIES = [\n        ('mobile', 'SD'),\n        ('web', 'MD'),\n        ('high', 'HD'),\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        data = self._download_json(\n            'http://www.rtbf.be/api/media/video?method=getVideoDetail&args[]=%s' % video_id, video_id)\n\n        error = data.get('error')\n        if error:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n        data = data['data']\n\n        provider = data.get('provider')\n        if provider in self._PROVIDERS:\n            return self.url_result(data['url'], self._PROVIDERS[provider])\n\n        formats = []\n        for key, format_id in self._QUALITIES:\n            format_url = data.get(key + 'Url')\n            if format_url:\n                formats.append({\n                    'format_id': format_id,\n                    'url': format_url,\n                })\n\n        thumbnails = []\n        for thumbnail_id, thumbnail_url in data.get('thumbnail', {}).items():\n            if thumbnail_id != 'default':\n                thumbnails.append({\n                    'url': self._IMAGE_HOST + thumbnail_url,\n                    'id': thumbnail_id,\n                })\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': data['title'],\n            'description': data.get('description') or data.get('subtitle'),\n            'thumbnails': thumbnails,\n            'duration': data.get('duration') or data.get('realDuration'),\n            'timestamp': int_or_none(data.get('created')),\n            'view_count': int_or_none(data.get('viewCount')),\n            'uploader': data.get('channel'),\n            'tags': data.get('tags'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rtbf.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rtbf.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}