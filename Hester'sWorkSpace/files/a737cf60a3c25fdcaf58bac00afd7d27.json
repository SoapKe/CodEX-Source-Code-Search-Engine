{"author": "jakubroztocil", "code": "\nfrom fixtures import BIN_FILE_PATH, BIN_FILE_CONTENT, BIN_FILE_PATH_ARG\nfrom httpie.compat import urlopen\nfrom httpie.output.streams import BINARY_SUPPRESSED_NOTICE\nfrom utils import MockEnvironment, http\n\n\nclass TestBinaryRequestData:\n\n    def test_binary_stdin(self, httpbin):\n        with open(BIN_FILE_PATH, 'rb') as stdin:\n            env = MockEnvironment(\n                stdin=stdin,\n                stdin_isatty=False,\n                stdout_isatty=False\n            )\n            r = http('--print=B', 'POST', httpbin.url + '/post', env=env)\n            assert r == BIN_FILE_CONTENT\n\n    def test_binary_file_path(self, httpbin):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--print=B', 'POST', httpbin.url + '/post',\n                 '@' + BIN_FILE_PATH_ARG, env=env, )\n        assert r == BIN_FILE_CONTENT\n\n    def test_binary_file_form(self, httpbin):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--print=B', '--form', 'POST', httpbin.url + '/post',\n                 'test@' + BIN_FILE_PATH_ARG, env=env)\n        assert bytes(BIN_FILE_CONTENT) in bytes(r)\n\n\nclass TestBinaryResponseData:\n    url = 'http://www.google.com/favicon.ico'\n\n    @property\n    def bindata(self):\n        if not hasattr(self, '_bindata'):\n            self._bindata = urlopen(self.url).read()\n        return self._bindata\n\n    def test_binary_suppresses_when_terminal(self):\n        r = http('GET', self.url)\n        assert BINARY_SUPPRESSED_NOTICE.decode() in r\n\n    def test_binary_suppresses_when_not_terminal_but_pretty(self):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--pretty=all', 'GET', self.url,\n                 env=env)\n        assert BINARY_SUPPRESSED_NOTICE.decode() in r\n\n    def test_binary_included_and_correct_when_suitable(self):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('GET', self.url, env=env)\n        assert r == self.bindata\n", "comments": "   tests dealing binary request response data     ", "content": "\"\"\"Tests for dealing with binary request and response data.\"\"\"\nfrom fixtures import BIN_FILE_PATH, BIN_FILE_CONTENT, BIN_FILE_PATH_ARG\nfrom httpie.compat import urlopen\nfrom httpie.output.streams import BINARY_SUPPRESSED_NOTICE\nfrom utils import MockEnvironment, http\n\n\nclass TestBinaryRequestData:\n\n    def test_binary_stdin(self, httpbin):\n        with open(BIN_FILE_PATH, 'rb') as stdin:\n            env = MockEnvironment(\n                stdin=stdin,\n                stdin_isatty=False,\n                stdout_isatty=False\n            )\n            r = http('--print=B', 'POST', httpbin.url + '/post', env=env)\n            assert r == BIN_FILE_CONTENT\n\n    def test_binary_file_path(self, httpbin):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--print=B', 'POST', httpbin.url + '/post',\n                 '@' + BIN_FILE_PATH_ARG, env=env, )\n        assert r == BIN_FILE_CONTENT\n\n    def test_binary_file_form(self, httpbin):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--print=B', '--form', 'POST', httpbin.url + '/post',\n                 'test@' + BIN_FILE_PATH_ARG, env=env)\n        assert bytes(BIN_FILE_CONTENT) in bytes(r)\n\n\nclass TestBinaryResponseData:\n    url = 'http://www.google.com/favicon.ico'\n\n    @property\n    def bindata(self):\n        if not hasattr(self, '_bindata'):\n            self._bindata = urlopen(self.url).read()\n        return self._bindata\n\n    def test_binary_suppresses_when_terminal(self):\n        r = http('GET', self.url)\n        assert BINARY_SUPPRESSED_NOTICE.decode() in r\n\n    def test_binary_suppresses_when_not_terminal_but_pretty(self):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('--pretty=all', 'GET', self.url,\n                 env=env)\n        assert BINARY_SUPPRESSED_NOTICE.decode() in r\n\n    def test_binary_included_and_correct_when_suitable(self):\n        env = MockEnvironment(stdin_isatty=True, stdout_isatty=False)\n        r = http('GET', self.url, env=env)\n        assert r == self.bindata\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "test_binary.py", "id": "a737cf60a3c25fdcaf58bac00afd7d27", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil-httpie/jakubroztocil-httpie-0f4dce9/tests/test_binary.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:48:16Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}