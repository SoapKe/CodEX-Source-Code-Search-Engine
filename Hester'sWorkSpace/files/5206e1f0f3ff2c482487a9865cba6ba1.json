{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom collections import OrderedDict\n\nfrom odoo import http\nfrom odoo.exceptions import AccessError\nfrom odoo.http import request\nfrom odoo.tools.translate import _\nfrom odoo.addons.portal.controllers.portal import get_records_pager, pager as portal_pager, CustomerPortal\n\n\nclass CustomerPortal(CustomerPortal):\n\n    def _prepare_portal_layout_values(self):\n        values = super(CustomerPortal, self)._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        values['purchase_count'] = request.env['purchase.order'].sudo().search_count([\n            '|',\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('partner_id', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['purchase', 'done', 'cancel'])\n        ])\n        return values\n\n    @http.route(['/my/purchase', '/my/purchase/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_purchase_orders(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        PurchaseOrder = request.env['purchase.order']\n\n        domain = [\n            '|',\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('partner_id', 'child_of', [partner.commercial_partner_id.id]),\n        ]\n\n        archive_groups = self._get_archive_groups('purchase.order', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n        searchbar_sortings = {\n            'date': {'label': _('Newest'), 'order': 'create_date desc, id desc'},\n            'name': {'label': _('Name'), 'order': 'name asc, id asc'},\n            'amount_total': {'label': _('Total'), 'order': 'amount_total desc, id desc'},\n        }\n        \n        if not sortby:\n            sortby = 'date'\n        order = searchbar_sortings[sortby]['order']\n\n        searchbar_filters = {\n            'all': {'label': _('All'), 'domain': [('state', 'in', ['purchase', 'done', 'cancel'])]},\n            'purchase': {'label': _('Purchase Order'), 'domain': [('state', '=', 'purchase')]},\n            'cancel': {'label': _('Cancelled'), 'domain': [('state', '=', 'cancel')]},\n            'done': {'label': _('Locked'), 'domain': [('state', '=', 'done')]},\n        }\n        \n        if not filterby:\n            filterby = 'all'\n        domain += searchbar_filters[filterby]['domain']\n\n        \n        purchase_count = PurchaseOrder.search_count(domain)\n        \n        pager = portal_pager(\n            url=\"/my/purchase\",\n            url_args={'date_begin': date_begin, 'date_end': date_end},\n            total=purchase_count,\n            page=page,\n            step=self._items_per_page\n        )\n        \n        orders = PurchaseOrder.search(\n            domain,\n            order=order,\n            limit=self._items_per_page,\n            offset=pager['offset']\n        )\n        request.session['my_purchases_history'] = orders.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'orders': orders,\n            'page_name': 'purchase',\n            'pager': pager,\n            'archive_groups': archive_groups,\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby,\n            'searchbar_filters': OrderedDict(sorted(searchbar_filters.items())),\n            'filterby': filterby,\n            'default_url': '/my/purchase',\n        })\n        return request.render(\"purchase.portal_my_purchase_orders\", values)\n\n    @http.route(['/my/purchase/<int:order_id>'], type='http', auth=\"user\", website=True)\n    def portal_my_purchase_order(self, order_id=None, **kw):\n        order = request.env['purchase.order'].browse(order_id)\n        try:\n            order.check_access_rights('read')\n            order.check_access_rule('read')\n        except AccessError:\n            return request.redirect('/my')\n        history = request.session.get('my_purchases_history', [])\n        values = {\n            'order': order.sudo(),\n        }\n        values.update(get_records_pager(history, order))\n        return request.render(\"purchase.portal_my_purchase_order\", values)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     default sort value    default filter value    count pager    make pager    search purchase orders display  according pager data ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom collections import OrderedDict\n\nfrom odoo import http\nfrom odoo.exceptions import AccessError\nfrom odoo.http import request\nfrom odoo.tools.translate import _\nfrom odoo.addons.portal.controllers.portal import get_records_pager, pager as portal_pager, CustomerPortal\n\n\nclass CustomerPortal(CustomerPortal):\n\n    def _prepare_portal_layout_values(self):\n        values = super(CustomerPortal, self)._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        values['purchase_count'] = request.env['purchase.order'].sudo().search_count([\n            '|',\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('partner_id', 'child_of', [partner.commercial_partner_id.id]),\n            ('state', 'in', ['purchase', 'done', 'cancel'])\n        ])\n        return values\n\n    @http.route(['/my/purchase', '/my/purchase/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_purchase_orders(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        PurchaseOrder = request.env['purchase.order']\n\n        domain = [\n            '|',\n            ('message_partner_ids', 'child_of', [partner.commercial_partner_id.id]),\n            ('partner_id', 'child_of', [partner.commercial_partner_id.id]),\n        ]\n\n        archive_groups = self._get_archive_groups('purchase.order', domain)\n        if date_begin and date_end:\n            domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n        searchbar_sortings = {\n            'date': {'label': _('Newest'), 'order': 'create_date desc, id desc'},\n            'name': {'label': _('Name'), 'order': 'name asc, id asc'},\n            'amount_total': {'label': _('Total'), 'order': 'amount_total desc, id desc'},\n        }\n        # default sort by value\n        if not sortby:\n            sortby = 'date'\n        order = searchbar_sortings[sortby]['order']\n\n        searchbar_filters = {\n            'all': {'label': _('All'), 'domain': [('state', 'in', ['purchase', 'done', 'cancel'])]},\n            'purchase': {'label': _('Purchase Order'), 'domain': [('state', '=', 'purchase')]},\n            'cancel': {'label': _('Cancelled'), 'domain': [('state', '=', 'cancel')]},\n            'done': {'label': _('Locked'), 'domain': [('state', '=', 'done')]},\n        }\n        # default filter by value\n        if not filterby:\n            filterby = 'all'\n        domain += searchbar_filters[filterby]['domain']\n\n        # count for pager\n        purchase_count = PurchaseOrder.search_count(domain)\n        # make pager\n        pager = portal_pager(\n            url=\"/my/purchase\",\n            url_args={'date_begin': date_begin, 'date_end': date_end},\n            total=purchase_count,\n            page=page,\n            step=self._items_per_page\n        )\n        # search the purchase orders to display, according to the pager data\n        orders = PurchaseOrder.search(\n            domain,\n            order=order,\n            limit=self._items_per_page,\n            offset=pager['offset']\n        )\n        request.session['my_purchases_history'] = orders.ids[:100]\n\n        values.update({\n            'date': date_begin,\n            'orders': orders,\n            'page_name': 'purchase',\n            'pager': pager,\n            'archive_groups': archive_groups,\n            'searchbar_sortings': searchbar_sortings,\n            'sortby': sortby,\n            'searchbar_filters': OrderedDict(sorted(searchbar_filters.items())),\n            'filterby': filterby,\n            'default_url': '/my/purchase',\n        })\n        return request.render(\"purchase.portal_my_purchase_orders\", values)\n\n    @http.route(['/my/purchase/<int:order_id>'], type='http', auth=\"user\", website=True)\n    def portal_my_purchase_order(self, order_id=None, **kw):\n        order = request.env['purchase.order'].browse(order_id)\n        try:\n            order.check_access_rights('read')\n            order.check_access_rule('read')\n        except AccessError:\n            return request.redirect('/my')\n        history = request.session.get('my_purchases_history', [])\n        values = {\n            'order': order.sudo(),\n        }\n        values.update(get_records_pager(history, order))\n        return request.render(\"purchase.portal_my_purchase_order\", values)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "portal.py", "id": "5206e1f0f3ff2c482487a9865cba6ba1", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/purchase/controllers/portal.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}