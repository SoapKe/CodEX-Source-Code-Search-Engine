{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import api, fields, models\n\n\nclass CrmLead(models.Model):\n    _inherit = 'crm.lead'\n\n    sale_amount_total = fields.Monetary(compute='_compute_sale_amount_total', string=\"Sum of Orders\", help=\"Untaxed Total of Confirmed Orders\", currency_field='company_currency')\n    sale_number = fields.Integer(compute='_compute_sale_amount_total', string=\"Number of Quotations\")\n    order_ids = fields.One2many('sale.order', 'opportunity_id', string='Orders')\n\n    @api.depends('order_ids')\n    def _compute_sale_amount_total(self):\n        for lead in self:\n            total = 0.0\n            nbr = 0\n            company_currency = lead.company_currency or self.env.user.company_id.currency_id\n            for order in lead.order_ids:\n                if order.state in ('draft', 'sent', 'sale'):\n                    nbr += 1\n                if order.state not in ('draft', 'sent', 'cancel'):\n                    total += order.currency_id.compute(order.amount_untaxed, company_currency)\n            lead.sale_amount_total = total\n            lead.sale_number = nbr\n\n    @api.model\n    def retrieve_sales_dashboard(self):\n        res = super(CrmLead, self).retrieve_sales_dashboard()\n        date_today = fields.Date.from_string(fields.Date.context_today(self))\n\n        res['invoiced'] = {\n            'this_month': 0,\n            'last_month': 0,\n        }\n        account_invoice_domain = [\n            ('state', 'in', ['open', 'paid']),\n            ('user_id', '=', self.env.uid),\n            ('date_invoice', '>=', date_today.replace(day=1) - relativedelta(months=+1)),\n            ('type', 'in', ['out_invoice', 'out_refund'])\n        ]\n\n        invoice_data = self.env['account.invoice'].search_read(account_invoice_domain, ['date_invoice', 'amount_untaxed_signed'])\n\n        for invoice in invoice_data:\n            if invoice['date_invoice']:\n                invoice_date = fields.Date.from_string(invoice['date_invoice'])\n                if invoice_date <= date_today and invoice_date >= date_today.replace(day=1):\n                    res['invoiced']['this_month'] += invoice['amount_untaxed_signed']\n                elif invoice_date < date_today.replace(day=1) and invoice_date >= date_today.replace(day=1) - relativedelta(months=+1):\n                    res['invoiced']['last_month'] += invoice['amount_untaxed_signed']\n\n        res['invoiced']['target'] = self.env.user.target_sales_invoiced\n        return res\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import api, fields, models\n\n\nclass CrmLead(models.Model):\n    _inherit = 'crm.lead'\n\n    sale_amount_total = fields.Monetary(compute='_compute_sale_amount_total', string=\"Sum of Orders\", help=\"Untaxed Total of Confirmed Orders\", currency_field='company_currency')\n    sale_number = fields.Integer(compute='_compute_sale_amount_total', string=\"Number of Quotations\")\n    order_ids = fields.One2many('sale.order', 'opportunity_id', string='Orders')\n\n    @api.depends('order_ids')\n    def _compute_sale_amount_total(self):\n        for lead in self:\n            total = 0.0\n            nbr = 0\n            company_currency = lead.company_currency or self.env.user.company_id.currency_id\n            for order in lead.order_ids:\n                if order.state in ('draft', 'sent', 'sale'):\n                    nbr += 1\n                if order.state not in ('draft', 'sent', 'cancel'):\n                    total += order.currency_id.compute(order.amount_untaxed, company_currency)\n            lead.sale_amount_total = total\n            lead.sale_number = nbr\n\n    @api.model\n    def retrieve_sales_dashboard(self):\n        res = super(CrmLead, self).retrieve_sales_dashboard()\n        date_today = fields.Date.from_string(fields.Date.context_today(self))\n\n        res['invoiced'] = {\n            'this_month': 0,\n            'last_month': 0,\n        }\n        account_invoice_domain = [\n            ('state', 'in', ['open', 'paid']),\n            ('user_id', '=', self.env.uid),\n            ('date_invoice', '>=', date_today.replace(day=1) - relativedelta(months=+1)),\n            ('type', 'in', ['out_invoice', 'out_refund'])\n        ]\n\n        invoice_data = self.env['account.invoice'].search_read(account_invoice_domain, ['date_invoice', 'amount_untaxed_signed'])\n\n        for invoice in invoice_data:\n            if invoice['date_invoice']:\n                invoice_date = fields.Date.from_string(invoice['date_invoice'])\n                if invoice_date <= date_today and invoice_date >= date_today.replace(day=1):\n                    res['invoiced']['this_month'] += invoice['amount_untaxed_signed']\n                elif invoice_date < date_today.replace(day=1) and invoice_date >= date_today.replace(day=1) - relativedelta(months=+1):\n                    res['invoiced']['last_month'] += invoice['amount_untaxed_signed']\n\n        res['invoiced']['target'] = self.env.user.target_sales_invoiced\n        return res\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "crm_lead.py", "id": "fcc4ede688716e8399ddfcb689f7fa57", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale_crm/models/crm_lead.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}