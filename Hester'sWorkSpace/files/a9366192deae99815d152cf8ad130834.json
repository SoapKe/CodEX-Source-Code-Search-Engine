{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    parse_iso8601,\n    parse_duration,\n)\n\n\nclass SkyNewsArabiaBaseIE(InfoExtractor):\n    _IMAGE_BASE_URL = 'http://www.skynewsarabia.com/web/images'\n\n    def _call_api(self, path, value):\n        return self._download_json('http://api.skynewsarabia.com/web/rest/v2/%s/%s.json' % (path, value), value)\n\n    def _get_limelight_media_id(self, url):\n        return self._search_regex(r'/media/[^/]+/([a-z0-9]{32})', url, 'limelight media id')\n\n    def _get_image_url(self, image_path_template, width='1600', height='1200'):\n        return self._IMAGE_BASE_URL + image_path_template.format(width=width, height=height)\n\n    def _extract_video_info(self, video_data):\n        video_id = compat_str(video_data['id'])\n        topic = video_data.get('topicTitle')\n        return {\n            '_type': 'url_transparent',\n            'url': 'limelight:media:%s' % self._get_limelight_media_id(video_data['videoUrl'][0]['url']),\n            'id': video_id,\n            'title': video_data['headline'],\n            'description': video_data.get('summary'),\n            'thumbnail': self._get_image_url(video_data['mediaAsset']['imageUrl']),\n            'timestamp': parse_iso8601(video_data.get('date')),\n            'duration': parse_duration(video_data.get('runTime')),\n            'tags': video_data.get('tags', []),\n            'categories': [topic] if topic else [],\n            'webpage_url': 'http://www.skynewsarabia.com/web/video/%s' % video_id,\n            'ie_key': 'LimelightMedia',\n        }\n\n\nclass SkyNewsArabiaIE(SkyNewsArabiaBaseIE):\n    IE_NAME = 'skynewsarabia:video'\n    _VALID_URL = r'https?://(?:www\\.)?skynewsarabia\\.com/web/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.skynewsarabia.com/web/video/794902/%D9%86%D8%B5%D9%81-%D9%85%D9%84%D9%8A%D9%88%D9%86-%D9%85%D8%B5%D8%A8%D8%A7%D8%AD-%D8%B4%D8%AC%D8%B1%D8%A9-%D9%83%D8%B1%D9%8A%D8%B3%D9%85%D8%A7%D8%B3',\n        'info_dict': {\n            'id': '794902',\n            'ext': 'flv',\n            'title': '\u0646\u0635\u0641 \u0645\u0644\u064a\u0648\u0646 \u0645\u0635\u0628\u0627\u062d \u0639\u0644\u0649 \u0634\u062c\u0631\u0629 \u0643\u0631\u064a\u0633\u0645\u0627\u0633',\n            'description': 'md5:22f1b27f0850eeb10c7e59b1f16eb7c6',\n            'upload_date': '20151128',\n            'timestamp': 1448697198,\n            'duration': 2119,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._call_api('video', video_id)\n        return self._extract_video_info(video_data)\n\n\nclass SkyNewsArabiaArticleIE(SkyNewsArabiaBaseIE):\n    IE_NAME = 'skynewsarabia:article'\n    _VALID_URL = r'https?://(?:www\\.)?skynewsarabia\\.com/web/article/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.skynewsarabia.com/web/article/794549/%D8%A7%D9%94%D8%AD%D8%AF%D8%A7%D8%AB-%D8%A7%D9%84%D8%B4%D8%B1%D9%82-%D8%A7%D9%84%D8%A7%D9%94%D9%88%D8%B3%D8%B7-%D8%AE%D8%B1%D9%8A%D8%B7%D8%A9-%D8%A7%D9%84%D8%A7%D9%94%D9%84%D8%B9%D8%A7%D8%A8-%D8%A7%D9%84%D8%B0%D9%83%D9%8A%D8%A9',\n        'info_dict': {\n            'id': '794549',\n            'ext': 'flv',\n            'title': '\u0628\u0627\u0644\u0641\u064a\u062f\u064a\u0648.. \u0623\u0644\u0639\u0627\u0628 \u0630\u0643\u064a\u0629 \u062a\u062d\u0627\u0643\u064a \u0648\u0627\u0642\u0639 \u0627\u0644\u0645\u0646\u0637\u0642\u0629',\n            'description': 'md5:0c373d29919a851e080ee4edd0c5d97f',\n            'upload_date': '20151126',\n            'timestamp': 1448559336,\n            'duration': 281.6,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.skynewsarabia.com/web/article/794844/%D8%A7%D8%B3%D8%AA%D9%87%D8%AF%D8%A7%D9%81-%D9%82%D9%88%D8%A7%D8%B1%D8%A8-%D8%A7%D9%94%D8%B3%D9%84%D8%AD%D8%A9-%D9%84%D9%85%D9%8A%D9%84%D9%8A%D8%B4%D9%8A%D8%A7%D8%AA-%D8%A7%D9%84%D8%AD%D9%88%D8%AB%D9%8A-%D9%88%D8%B5%D8%A7%D9%84%D8%AD',\n        'info_dict': {\n            'id': '794844',\n            'title': '\u0625\u062d\u0628\u0627\u0637 \u062a\u0647\u0631\u064a\u0628 \u0623\u0633\u0644\u062d\u0629 \u0644\u0645\u064a\u0644\u064a\u0634\u064a\u0627\u062a \u0627\u0644\u062d\u0648\u062b\u064a \u0648\u0635\u0627\u0644\u062d \u0628\u062c\u0646\u0648\u0628 \u0627\u0644\u064a\u0645\u0646',\n            'description': 'md5:5c927b8b2e805796e7f693538d96fc7e',\n        },\n        'playlist_mincount': 2,\n    }]\n\n    def _real_extract(self, url):\n        article_id = self._match_id(url)\n        article_data = self._call_api('article', article_id)\n        media_asset = article_data['mediaAsset']\n        if media_asset['type'] == 'VIDEO':\n            topic = article_data.get('topicTitle')\n            return {\n                '_type': 'url_transparent',\n                'url': 'limelight:media:%s' % self._get_limelight_media_id(media_asset['videoUrl'][0]['url']),\n                'id': article_id,\n                'title': article_data['headline'],\n                'description': article_data.get('summary'),\n                'thumbnail': self._get_image_url(media_asset['imageUrl']),\n                'timestamp': parse_iso8601(article_data.get('date')),\n                'tags': article_data.get('tags', []),\n                'categories': [topic] if topic else [],\n                'webpage_url': url,\n                'ie_key': 'LimelightMedia',\n            }\n        entries = [self._extract_video_info(item) for item in article_data.get('inlineItems', []) if item['type'] == 'VIDEO']\n        return self.playlist_result(entries, article_id, article_data['headline'], article_data.get('summary'))\n", "comments": "# coding: utf-8\n# rtmp download\n# rtmp download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    parse_iso8601,\n    parse_duration,\n)\n\n\nclass SkyNewsArabiaBaseIE(InfoExtractor):\n    _IMAGE_BASE_URL = 'http://www.skynewsarabia.com/web/images'\n\n    def _call_api(self, path, value):\n        return self._download_json('http://api.skynewsarabia.com/web/rest/v2/%s/%s.json' % (path, value), value)\n\n    def _get_limelight_media_id(self, url):\n        return self._search_regex(r'/media/[^/]+/([a-z0-9]{32})', url, 'limelight media id')\n\n    def _get_image_url(self, image_path_template, width='1600', height='1200'):\n        return self._IMAGE_BASE_URL + image_path_template.format(width=width, height=height)\n\n    def _extract_video_info(self, video_data):\n        video_id = compat_str(video_data['id'])\n        topic = video_data.get('topicTitle')\n        return {\n            '_type': 'url_transparent',\n            'url': 'limelight:media:%s' % self._get_limelight_media_id(video_data['videoUrl'][0]['url']),\n            'id': video_id,\n            'title': video_data['headline'],\n            'description': video_data.get('summary'),\n            'thumbnail': self._get_image_url(video_data['mediaAsset']['imageUrl']),\n            'timestamp': parse_iso8601(video_data.get('date')),\n            'duration': parse_duration(video_data.get('runTime')),\n            'tags': video_data.get('tags', []),\n            'categories': [topic] if topic else [],\n            'webpage_url': 'http://www.skynewsarabia.com/web/video/%s' % video_id,\n            'ie_key': 'LimelightMedia',\n        }\n\n\nclass SkyNewsArabiaIE(SkyNewsArabiaBaseIE):\n    IE_NAME = 'skynewsarabia:video'\n    _VALID_URL = r'https?://(?:www\\.)?skynewsarabia\\.com/web/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.skynewsarabia.com/web/video/794902/%D9%86%D8%B5%D9%81-%D9%85%D9%84%D9%8A%D9%88%D9%86-%D9%85%D8%B5%D8%A8%D8%A7%D8%AD-%D8%B4%D8%AC%D8%B1%D8%A9-%D9%83%D8%B1%D9%8A%D8%B3%D9%85%D8%A7%D8%B3',\n        'info_dict': {\n            'id': '794902',\n            'ext': 'flv',\n            'title': '\u0646\u0635\u0641 \u0645\u0644\u064a\u0648\u0646 \u0645\u0635\u0628\u0627\u062d \u0639\u0644\u0649 \u0634\u062c\u0631\u0629 \u0643\u0631\u064a\u0633\u0645\u0627\u0633',\n            'description': 'md5:22f1b27f0850eeb10c7e59b1f16eb7c6',\n            'upload_date': '20151128',\n            'timestamp': 1448697198,\n            'duration': 2119,\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._call_api('video', video_id)\n        return self._extract_video_info(video_data)\n\n\nclass SkyNewsArabiaArticleIE(SkyNewsArabiaBaseIE):\n    IE_NAME = 'skynewsarabia:article'\n    _VALID_URL = r'https?://(?:www\\.)?skynewsarabia\\.com/web/article/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.skynewsarabia.com/web/article/794549/%D8%A7%D9%94%D8%AD%D8%AF%D8%A7%D8%AB-%D8%A7%D9%84%D8%B4%D8%B1%D9%82-%D8%A7%D9%84%D8%A7%D9%94%D9%88%D8%B3%D8%B7-%D8%AE%D8%B1%D9%8A%D8%B7%D8%A9-%D8%A7%D9%84%D8%A7%D9%94%D9%84%D8%B9%D8%A7%D8%A8-%D8%A7%D9%84%D8%B0%D9%83%D9%8A%D8%A9',\n        'info_dict': {\n            'id': '794549',\n            'ext': 'flv',\n            'title': '\u0628\u0627\u0644\u0641\u064a\u062f\u064a\u0648.. \u0623\u0644\u0639\u0627\u0628 \u0630\u0643\u064a\u0629 \u062a\u062d\u0627\u0643\u064a \u0648\u0627\u0642\u0639 \u0627\u0644\u0645\u0646\u0637\u0642\u0629',\n            'description': 'md5:0c373d29919a851e080ee4edd0c5d97f',\n            'upload_date': '20151126',\n            'timestamp': 1448559336,\n            'duration': 281.6,\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.skynewsarabia.com/web/article/794844/%D8%A7%D8%B3%D8%AA%D9%87%D8%AF%D8%A7%D9%81-%D9%82%D9%88%D8%A7%D8%B1%D8%A8-%D8%A7%D9%94%D8%B3%D9%84%D8%AD%D8%A9-%D9%84%D9%85%D9%8A%D9%84%D9%8A%D8%B4%D9%8A%D8%A7%D8%AA-%D8%A7%D9%84%D8%AD%D9%88%D8%AB%D9%8A-%D9%88%D8%B5%D8%A7%D9%84%D8%AD',\n        'info_dict': {\n            'id': '794844',\n            'title': '\u0625\u062d\u0628\u0627\u0637 \u062a\u0647\u0631\u064a\u0628 \u0623\u0633\u0644\u062d\u0629 \u0644\u0645\u064a\u0644\u064a\u0634\u064a\u0627\u062a \u0627\u0644\u062d\u0648\u062b\u064a \u0648\u0635\u0627\u0644\u062d \u0628\u062c\u0646\u0648\u0628 \u0627\u0644\u064a\u0645\u0646',\n            'description': 'md5:5c927b8b2e805796e7f693538d96fc7e',\n        },\n        'playlist_mincount': 2,\n    }]\n\n    def _real_extract(self, url):\n        article_id = self._match_id(url)\n        article_data = self._call_api('article', article_id)\n        media_asset = article_data['mediaAsset']\n        if media_asset['type'] == 'VIDEO':\n            topic = article_data.get('topicTitle')\n            return {\n                '_type': 'url_transparent',\n                'url': 'limelight:media:%s' % self._get_limelight_media_id(media_asset['videoUrl'][0]['url']),\n                'id': article_id,\n                'title': article_data['headline'],\n                'description': article_data.get('summary'),\n                'thumbnail': self._get_image_url(media_asset['imageUrl']),\n                'timestamp': parse_iso8601(article_data.get('date')),\n                'tags': article_data.get('tags', []),\n                'categories': [topic] if topic else [],\n                'webpage_url': url,\n                'ie_key': 'LimelightMedia',\n            }\n        entries = [self._extract_video_info(item) for item in article_data.get('inlineItems', []) if item['type'] == 'VIDEO']\n        return self.playlist_result(entries, article_id, article_data['headline'], article_data.get('summary'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "skynewsarabia.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/skynewsarabia.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}