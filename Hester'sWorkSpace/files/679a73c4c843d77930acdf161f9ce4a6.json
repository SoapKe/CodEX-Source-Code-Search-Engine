{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .once import OnceIE\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import ExtractorError\n\n\nclass VoxMediaVolumeIE(OnceIE):\n    _VALID_URL = r'https?://volume\\.vox-cdn\\.com/embed/(?P<id>[0-9a-f]{9})'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        video_data = self._parse_json(self._search_regex(\n            r'Volume\\.createVideo\\(({.+})\\s*,\\s*{.*}\\s*,\\s*\\[.*\\]\\s*,\\s*{.*}\\);', webpage, 'video data'), video_id)\n        for provider_video_type in ('ooyala', 'youtube', 'brightcove'):\n            provider_video_id = video_data.get('%s_id' % provider_video_type)\n            if not provider_video_id:\n                continue\n            info = {\n                'id': video_id,\n                'title': video_data.get('title_short'),\n                'description': video_data.get('description_long') or video_data.get('description_short'),\n                'thumbnail': video_data.get('brightcove_thumbnail')\n            }\n            if provider_video_type == 'brightcove':\n                info['formats'] = self._extract_once_formats(provider_video_id)\n                self._sort_formats(info['formats'])\n            else:\n                info.update({\n                    '_type': 'url_transparent',\n                    'url': provider_video_id if provider_video_type == 'youtube' else '%s:%s' % (provider_video_type, provider_video_id),\n                    'ie_key': provider_video_type.capitalize(),\n                })\n            return info\n        raise ExtractorError('Unable to find provider video id')\n\n\nclass VoxMediaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:(?:theverge|vox|sbnation|eater|polygon|curbed|racked)\\.com|recode\\.net)/(?:[^/]+/)*(?P<id>[^/?]+)'\n    _TESTS = [{\n        'url': 'http://www.theverge.com/2014/6/27/5849272/material-world-how-google-discovered-what-software-is-made-of',\n        'info_dict': {\n            'id': '11eXZobjrG8DCSTgrNjVinU-YmmdYjhe',\n            'ext': 'mp4',\n            'title': 'Google\\'s new material design direction',\n            'description': 'md5:2f44f74c4d14a1f800ea73e1c6832ad2',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'add_ie': ['Ooyala'],\n    }, {\n        \n        'url': 'http://www.theverge.com/2014/10/21/7025853/google-nexus-6-hands-on-photos-video-android-phablet',\n        'md5': 'd744484ff127884cd2ba09e3fa604e4b',\n        'info_dict': {\n            'id': 'RkZXU4cTphOCPDMZg5oEounJyoFI0g-B',\n            'ext': 'mp4',\n            'title': 'The Nexus 6: hands-on with Google\\'s phablet',\n            'description': 'md5:87a51fe95ff8cea8b5bdb9ac7ae6a6af',\n        },\n        'add_ie': ['Ooyala'],\n        'skip': 'Video Not Found',\n    }, {\n        \n        'url': 'http://www.vox.com/2016/3/31/11336640/mississippi-lgbt-religious-freedom-bill',\n        'info_dict': {\n            'id': 'wydzk3dDpmRz7PQoXRsTIX6XTkPjYL0b',\n            'ext': 'mp4',\n            'title': 'The new frontier of LGBTQ civil rights, explained',\n            'description': 'md5:0dc58e94a465cbe91d02950f770eb93f',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'add_ie': ['Ooyala'],\n    }, {\n        \n        'url': 'http://www.vox.com/2016/3/24/11291692/robot-dance',\n        'md5': '83b3080489fb103941e549352d3e0977',\n        'info_dict': {\n            'id': 'FcNHTJU1ufM',\n            'ext': 'mp4',\n            'title': 'How \"the robot\" became the greatest novelty dance of all time',\n            'description': 'md5:b081c0d588b8b2085870cda55e6da176',\n            'upload_date': '20160324',\n            'uploader_id': 'voxdotcom',\n            'uploader': 'Vox',\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        \n        'url': 'http://www.sbnation.com/college-football-recruiting/2015/2/3/7970291/national-signing-day-rationalizations-itll-be-ok-itll-be-ok',\n        'info_dict': {\n            'id': 'national-signing-day-rationalizations-itll-be-ok-itll-be-ok',\n            'title': '25 lies you will tell yourself on National Signing Day',\n            'description': 'It\\'s the most self-delusional time of the year, and everyone\\'s gonna tell the same lies together!',\n        },\n        'playlist': [{\n            'md5': '721fededf2ab74ae4176c8c8cbfe092e',\n            'info_dict': {\n                'id': 'p3cThlMjE61VDi_SD9JlIteSNPWVDBB9',\n                'ext': 'mp4',\n                'title': 'Buddy Hield vs Steph Curry (and the world)',\n                'description': 'Let\u2019s dissect only the most important Final Four storylines.',\n            },\n        }, {\n            'md5': 'bf0c5cc115636af028be1bab79217ea9',\n            'info_dict': {\n                'id': 'BmbmVjMjE6esPHxdALGubTrouQ0jYLHj',\n                'ext': 'mp4',\n                'title': 'Chasing Cinderella 2016: Syracuse basketball',\n                'description': 'md5:e02d56b026d51aa32c010676765a690d',\n            },\n        }],\n    }, {\n        \n        'url': 'https://www.recode.net/2014/6/17/11628066/post-post-pc-ceo-the-full-code-conference-video-of-microsofts-satya',\n        'md5': '01571a896281f77dc06e084138987ea2',\n        'info_dict': {\n            'id': '1231c973d',\n            'ext': 'mp4',\n            'title': 'Post-Post-PC CEO: The Full Code Conference Video of Microsoft\\'s Satya Nadella',\n            'description': 'The longtime veteran was chosen earlier this year as the software giant\\'s third leader in its history.',\n        },\n        'add_ie': ['VoxMediaVolume'],\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = compat_urllib_parse_unquote(self._download_webpage(url, display_id))\n\n        def create_entry(provider_video_id, provider_video_type, title=None, description=None):\n            video_url = {\n                'youtube': '%s',\n                'ooyala': 'ooyala:%s',\n                'volume': 'http://volume.vox-cdn.com/embed/%s',\n            }[provider_video_type] % provider_video_id\n            return {\n                '_type': 'url_transparent',\n                'url': video_url,\n                'title': title or self._og_search_title(webpage),\n                'description': description or self._og_search_description(webpage),\n            }\n\n        entries = []\n        entries_data = self._search_regex([\n            r'Chorus\\.VideoContext\\.addVideo\\((\\[{.+}\\])\\);',\n            r'var\\s+entry\\s*=\\s*({.+});',\n            r'SBN\\.VideoLinkset\\.entryGroup\\(\\s*(\\[.+\\])',\n        ], webpage, 'video data', default=None)\n        if entries_data:\n            entries_data = self._parse_json(entries_data, display_id)\n            if isinstance(entries_data, dict):\n                entries_data = [entries_data]\n            for video_data in entries_data:\n                provider_video_id = video_data.get('provider_video_id')\n                provider_video_type = video_data.get('provider_video_type')\n                if provider_video_id and provider_video_type:\n                    entries.append(create_entry(\n                        provider_video_id, provider_video_type,\n                        video_data.get('title'), video_data.get('description')))\n\n        provider_video_id = self._search_regex(\n            r'data-ooyala-id=\"([^\"]+)\"', webpage, 'ooyala id', default=None)\n        if provider_video_id:\n            entries.append(create_entry(provider_video_id, 'ooyala'))\n\n        volume_uuid = self._search_regex(\n            r'data-volume-uuid=\"([^\"]+)\"', webpage, 'volume uuid', default=None)\n        if volume_uuid:\n            entries.append(create_entry(volume_uuid, 'volume'))\n\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            return self.playlist_result(entries, display_id, self._og_search_title(webpage), self._og_search_description(webpage))\n", "comments": "# coding: utf-8\n# m3u8 download\n# data-ooyala-id\n# volume embed\n# m3u8 download\n# youtube embed\n# SBN.VideoLinkset.entryGroup multiple ooyala embeds\n# volume embed, Brightcove Once\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom .once import OnceIE\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import ExtractorError\n\n\nclass VoxMediaVolumeIE(OnceIE):\n    _VALID_URL = r'https?://volume\\.vox-cdn\\.com/embed/(?P<id>[0-9a-f]{9})'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        video_data = self._parse_json(self._search_regex(\n            r'Volume\\.createVideo\\(({.+})\\s*,\\s*{.*}\\s*,\\s*\\[.*\\]\\s*,\\s*{.*}\\);', webpage, 'video data'), video_id)\n        for provider_video_type in ('ooyala', 'youtube', 'brightcove'):\n            provider_video_id = video_data.get('%s_id' % provider_video_type)\n            if not provider_video_id:\n                continue\n            info = {\n                'id': video_id,\n                'title': video_data.get('title_short'),\n                'description': video_data.get('description_long') or video_data.get('description_short'),\n                'thumbnail': video_data.get('brightcove_thumbnail')\n            }\n            if provider_video_type == 'brightcove':\n                info['formats'] = self._extract_once_formats(provider_video_id)\n                self._sort_formats(info['formats'])\n            else:\n                info.update({\n                    '_type': 'url_transparent',\n                    'url': provider_video_id if provider_video_type == 'youtube' else '%s:%s' % (provider_video_type, provider_video_id),\n                    'ie_key': provider_video_type.capitalize(),\n                })\n            return info\n        raise ExtractorError('Unable to find provider video id')\n\n\nclass VoxMediaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:(?:theverge|vox|sbnation|eater|polygon|curbed|racked)\\.com|recode\\.net)/(?:[^/]+/)*(?P<id>[^/?]+)'\n    _TESTS = [{\n        'url': 'http://www.theverge.com/2014/6/27/5849272/material-world-how-google-discovered-what-software-is-made-of',\n        'info_dict': {\n            'id': '11eXZobjrG8DCSTgrNjVinU-YmmdYjhe',\n            'ext': 'mp4',\n            'title': 'Google\\'s new material design direction',\n            'description': 'md5:2f44f74c4d14a1f800ea73e1c6832ad2',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'add_ie': ['Ooyala'],\n    }, {\n        # data-ooyala-id\n        'url': 'http://www.theverge.com/2014/10/21/7025853/google-nexus-6-hands-on-photos-video-android-phablet',\n        'md5': 'd744484ff127884cd2ba09e3fa604e4b',\n        'info_dict': {\n            'id': 'RkZXU4cTphOCPDMZg5oEounJyoFI0g-B',\n            'ext': 'mp4',\n            'title': 'The Nexus 6: hands-on with Google\\'s phablet',\n            'description': 'md5:87a51fe95ff8cea8b5bdb9ac7ae6a6af',\n        },\n        'add_ie': ['Ooyala'],\n        'skip': 'Video Not Found',\n    }, {\n        # volume embed\n        'url': 'http://www.vox.com/2016/3/31/11336640/mississippi-lgbt-religious-freedom-bill',\n        'info_dict': {\n            'id': 'wydzk3dDpmRz7PQoXRsTIX6XTkPjYL0b',\n            'ext': 'mp4',\n            'title': 'The new frontier of LGBTQ civil rights, explained',\n            'description': 'md5:0dc58e94a465cbe91d02950f770eb93f',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'add_ie': ['Ooyala'],\n    }, {\n        # youtube embed\n        'url': 'http://www.vox.com/2016/3/24/11291692/robot-dance',\n        'md5': '83b3080489fb103941e549352d3e0977',\n        'info_dict': {\n            'id': 'FcNHTJU1ufM',\n            'ext': 'mp4',\n            'title': 'How \"the robot\" became the greatest novelty dance of all time',\n            'description': 'md5:b081c0d588b8b2085870cda55e6da176',\n            'upload_date': '20160324',\n            'uploader_id': 'voxdotcom',\n            'uploader': 'Vox',\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        # SBN.VideoLinkset.entryGroup multiple ooyala embeds\n        'url': 'http://www.sbnation.com/college-football-recruiting/2015/2/3/7970291/national-signing-day-rationalizations-itll-be-ok-itll-be-ok',\n        'info_dict': {\n            'id': 'national-signing-day-rationalizations-itll-be-ok-itll-be-ok',\n            'title': '25 lies you will tell yourself on National Signing Day',\n            'description': 'It\\'s the most self-delusional time of the year, and everyone\\'s gonna tell the same lies together!',\n        },\n        'playlist': [{\n            'md5': '721fededf2ab74ae4176c8c8cbfe092e',\n            'info_dict': {\n                'id': 'p3cThlMjE61VDi_SD9JlIteSNPWVDBB9',\n                'ext': 'mp4',\n                'title': 'Buddy Hield vs Steph Curry (and the world)',\n                'description': 'Let\u2019s dissect only the most important Final Four storylines.',\n            },\n        }, {\n            'md5': 'bf0c5cc115636af028be1bab79217ea9',\n            'info_dict': {\n                'id': 'BmbmVjMjE6esPHxdALGubTrouQ0jYLHj',\n                'ext': 'mp4',\n                'title': 'Chasing Cinderella 2016: Syracuse basketball',\n                'description': 'md5:e02d56b026d51aa32c010676765a690d',\n            },\n        }],\n    }, {\n        # volume embed, Brightcove Once\n        'url': 'https://www.recode.net/2014/6/17/11628066/post-post-pc-ceo-the-full-code-conference-video-of-microsofts-satya',\n        'md5': '01571a896281f77dc06e084138987ea2',\n        'info_dict': {\n            'id': '1231c973d',\n            'ext': 'mp4',\n            'title': 'Post-Post-PC CEO: The Full Code Conference Video of Microsoft\\'s Satya Nadella',\n            'description': 'The longtime veteran was chosen earlier this year as the software giant\\'s third leader in its history.',\n        },\n        'add_ie': ['VoxMediaVolume'],\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = compat_urllib_parse_unquote(self._download_webpage(url, display_id))\n\n        def create_entry(provider_video_id, provider_video_type, title=None, description=None):\n            video_url = {\n                'youtube': '%s',\n                'ooyala': 'ooyala:%s',\n                'volume': 'http://volume.vox-cdn.com/embed/%s',\n            }[provider_video_type] % provider_video_id\n            return {\n                '_type': 'url_transparent',\n                'url': video_url,\n                'title': title or self._og_search_title(webpage),\n                'description': description or self._og_search_description(webpage),\n            }\n\n        entries = []\n        entries_data = self._search_regex([\n            r'Chorus\\.VideoContext\\.addVideo\\((\\[{.+}\\])\\);',\n            r'var\\s+entry\\s*=\\s*({.+});',\n            r'SBN\\.VideoLinkset\\.entryGroup\\(\\s*(\\[.+\\])',\n        ], webpage, 'video data', default=None)\n        if entries_data:\n            entries_data = self._parse_json(entries_data, display_id)\n            if isinstance(entries_data, dict):\n                entries_data = [entries_data]\n            for video_data in entries_data:\n                provider_video_id = video_data.get('provider_video_id')\n                provider_video_type = video_data.get('provider_video_type')\n                if provider_video_id and provider_video_type:\n                    entries.append(create_entry(\n                        provider_video_id, provider_video_type,\n                        video_data.get('title'), video_data.get('description')))\n\n        provider_video_id = self._search_regex(\n            r'data-ooyala-id=\"([^\"]+)\"', webpage, 'ooyala id', default=None)\n        if provider_video_id:\n            entries.append(create_entry(provider_video_id, 'ooyala'))\n\n        volume_uuid = self._search_regex(\n            r'data-volume-uuid=\"([^\"]+)\"', webpage, 'volume uuid', default=None)\n        if volume_uuid:\n            entries.append(create_entry(volume_uuid, 'volume'))\n\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            return self.playlist_result(entries, display_id, self._og_search_title(webpage), self._og_search_description(webpage))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "voxmedia.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/voxmedia.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}