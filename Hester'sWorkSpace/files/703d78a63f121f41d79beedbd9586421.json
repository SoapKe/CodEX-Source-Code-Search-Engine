{"author": "samuelclay", "code": "import hashlib\nfrom simplejson.decoder import JSONDecodeError\nfrom utils import json_functions as json\nfrom django.contrib.auth.models import User\nfrom django.core.cache import cache\nfrom django.utils.http import urlquote\nfrom django.http import HttpResponseForbidden\nfrom django.http import HttpResponse\nfrom django.conf import settings\n\ndef ajax_login_required(function=None):\n    def _dec(view_func):\n        def _view(request, *args, **kwargs):\n            if request.user.is_anonymous():\n                return HttpResponseForbidden()\n            else:\n                return view_func(request, *args, **kwargs)\n\n        _view.__name__ = view_func.__name__\n        _view.__dict__ = view_func.__dict__\n        _view.__doc__ = view_func.__doc__\n\n        return _view\n\n    if function is None:\n        return _dec\n    else:\n        return _dec(function)\n\ndef oauth_login_required(function=None):\n    def _dec(view_func):\n        def _view(request, *args, **kwargs):\n            if request.user.is_anonymous():\n                return HttpResponse(content=json.encode({\n                    \"message\": \"You must have a valid OAuth token.\",\n                }), status=401)\n            else:\n                try:\n                    setattr(request, 'body_json', json.decode(request.body))\n                except JSONDecodeError:\n                    return HttpResponse(content=json.encode({\n                        \"message\": \"Your JSON body is malformed.\",\n                    }), status=400)\n                return view_func(request, *args, **kwargs)\n\n        _view.__name__ = view_func.__name__\n        _view.__dict__ = view_func.__dict__\n        _view.__doc__ = view_func.__doc__\n\n        return _view\n\n    if function is None:\n        return _dec\n    else:\n        return _dec(function)\n\ndef admin_only(function=None):\n    def _dec(view_func):\n        def _view(request, *args, **kwargs):\n            if not request.user.is_staff:\n                return HttpResponseForbidden()\n            else:\n                return view_func(request, *args, **kwargs)\n\n        _view.__name__ = view_func.__name__\n        _view.__dict__ = view_func.__dict__\n        _view.__doc__ = view_func.__doc__\n\n        return _view\n\n    if function is None:\n        return _dec\n    else:\n        return _dec(function)\n        \ndef get_user(request):\n    if not hasattr(request, 'user'):\n        user = request\n    else:\n        user = request.user\n        \n    if user.is_anonymous():\n        user = cache.get('user:%s' % settings.HOMEPAGE_USERNAME, None)\n        if not user:\n            try:\n                user = User.objects.get(username=settings.HOMEPAGE_USERNAME)\n                cache.set('user:%s' % user, user)\n            except User.DoesNotExist:\n                user = User.objects.create(username=settings.HOMEPAGE_USERNAME)\n                user.set_password('')\n                user.save()\n    return user\n    \ndef invalidate_template_cache(fragment_name, *variables):\n    args = hashlib.md5(u':'.join([urlquote(var) for var in variables]))\n    cache_key = 'template.cache.%s.%s' % (fragment_name, args.hexdigest())\n    cache.delete(cache_key)\n    \ndef generate_secret_token(phrase, size=12):\n    \"\"\"Generate a (SHA1) security hash from the provided info.\"\"\"\n    info = (phrase, settings.SECRET_KEY)\n    return hashlib.sha1(\"\".join(info)).hexdigest()[:size]\n\ndef extract_user_agent(request):\n    user_agent = request.environ.get('HTTP_USER_AGENT', '').lower()\n    platform = '------'\n    if 'ipad app' in user_agent:\n        platform = 'iPad'\n    elif 'iphone app' in user_agent:\n        platform = 'iPhone'\n    elif 'blar' in user_agent:\n        platform = 'Blar'\n    elif 'Android app' in user_agent:\n        platform = 'Androd'\n    elif 'android' in user_agent:\n        platform = 'androd'\n    elif 'pluggio' in user_agent:\n        platform = 'Plugio'\n    elif 'msie' in user_agent:\n        platform = 'IE'\n        if 'msie 9' in user_agent:\n            platform += '9'\n        elif 'msie 10' in user_agent:\n            platform += '10'\n        elif 'msie 8' in user_agent:\n            platform += '8'\n    elif 'trident/7' in user_agent:\n        platform = 'IE11'\n    elif 'chrome' in user_agent:\n        platform = 'Chrome'\n    elif 'safari' in user_agent:\n        platform = 'Safari'\n    elif 'meego' in user_agent:\n        platform = 'MeeGo'\n    elif 'firefox' in user_agent:\n        platform = 'FF'\n    elif 'opera' in user_agent:\n        platform = 'Opera'\n    elif 'wp7' in user_agent:\n        platform = 'WP7'\n    elif 'wp8' in user_agent:\n        platform = 'WP8'\n    elif 'tafiti' in user_agent:\n        platform = 'Tafiti'\n    elif 'readkit' in user_agent:\n        platform = 'ReadKt'\n    elif 'reeder' in user_agent:\n        platform = 'Reeder'\n    elif 'metroblur' in user_agent:\n        platform = 'Metrob'\n    elif 'feedme' in user_agent:\n        platform = 'FeedMe'\n    elif 'theoldreader' in user_agent:\n        platform = 'OldRdr'\n    elif 'fever' in user_agent:\n        platform = 'Fever'\n    elif 'superfeedr' in user_agent:\n        platform = 'Suprfd'\n    elif 'feed reader-window' in user_agent:\n        platform = 'FeedRe'\n    elif 'feed reader-background' in user_agent:\n        platform = 'FeReBg'\n    \n    return platform\n", "comments": "   generate (sha1) security hash provided info     ", "content": "import hashlib\nfrom simplejson.decoder import JSONDecodeError\nfrom utils import json_functions as json\nfrom django.contrib.auth.models import User\nfrom django.core.cache import cache\nfrom django.utils.http import urlquote\nfrom django.http import HttpResponseForbidden\nfrom django.http import HttpResponse\nfrom django.conf import settings\n\ndef ajax_login_required(function=None):\n    def _dec(view_func):\n        def _view(request, *args, **kwargs):\n            if request.user.is_anonymous():\n                return HttpResponseForbidden()\n            else:\n                return view_func(request, *args, **kwargs)\n\n        _view.__name__ = view_func.__name__\n        _view.__dict__ = view_func.__dict__\n        _view.__doc__ = view_func.__doc__\n\n        return _view\n\n    if function is None:\n        return _dec\n    else:\n        return _dec(function)\n\ndef oauth_login_required(function=None):\n    def _dec(view_func):\n        def _view(request, *args, **kwargs):\n            if request.user.is_anonymous():\n                return HttpResponse(content=json.encode({\n                    \"message\": \"You must have a valid OAuth token.\",\n                }), status=401)\n            else:\n                try:\n                    setattr(request, 'body_json', json.decode(request.body))\n                except JSONDecodeError:\n                    return HttpResponse(content=json.encode({\n                        \"message\": \"Your JSON body is malformed.\",\n                    }), status=400)\n                return view_func(request, *args, **kwargs)\n\n        _view.__name__ = view_func.__name__\n        _view.__dict__ = view_func.__dict__\n        _view.__doc__ = view_func.__doc__\n\n        return _view\n\n    if function is None:\n        return _dec\n    else:\n        return _dec(function)\n\ndef admin_only(function=None):\n    def _dec(view_func):\n        def _view(request, *args, **kwargs):\n            if not request.user.is_staff:\n                return HttpResponseForbidden()\n            else:\n                return view_func(request, *args, **kwargs)\n\n        _view.__name__ = view_func.__name__\n        _view.__dict__ = view_func.__dict__\n        _view.__doc__ = view_func.__doc__\n\n        return _view\n\n    if function is None:\n        return _dec\n    else:\n        return _dec(function)\n        \ndef get_user(request):\n    if not hasattr(request, 'user'):\n        user = request\n    else:\n        user = request.user\n        \n    if user.is_anonymous():\n        user = cache.get('user:%s' % settings.HOMEPAGE_USERNAME, None)\n        if not user:\n            try:\n                user = User.objects.get(username=settings.HOMEPAGE_USERNAME)\n                cache.set('user:%s' % user, user)\n            except User.DoesNotExist:\n                user = User.objects.create(username=settings.HOMEPAGE_USERNAME)\n                user.set_password('')\n                user.save()\n    return user\n    \ndef invalidate_template_cache(fragment_name, *variables):\n    args = hashlib.md5(u':'.join([urlquote(var) for var in variables]))\n    cache_key = 'template.cache.%s.%s' % (fragment_name, args.hexdigest())\n    cache.delete(cache_key)\n    \ndef generate_secret_token(phrase, size=12):\n    \"\"\"Generate a (SHA1) security hash from the provided info.\"\"\"\n    info = (phrase, settings.SECRET_KEY)\n    return hashlib.sha1(\"\".join(info)).hexdigest()[:size]\n\ndef extract_user_agent(request):\n    user_agent = request.environ.get('HTTP_USER_AGENT', '').lower()\n    platform = '------'\n    if 'ipad app' in user_agent:\n        platform = 'iPad'\n    elif 'iphone app' in user_agent:\n        platform = 'iPhone'\n    elif 'blar' in user_agent:\n        platform = 'Blar'\n    elif 'Android app' in user_agent:\n        platform = 'Androd'\n    elif 'android' in user_agent:\n        platform = 'androd'\n    elif 'pluggio' in user_agent:\n        platform = 'Plugio'\n    elif 'msie' in user_agent:\n        platform = 'IE'\n        if 'msie 9' in user_agent:\n            platform += '9'\n        elif 'msie 10' in user_agent:\n            platform += '10'\n        elif 'msie 8' in user_agent:\n            platform += '8'\n    elif 'trident/7' in user_agent:\n        platform = 'IE11'\n    elif 'chrome' in user_agent:\n        platform = 'Chrome'\n    elif 'safari' in user_agent:\n        platform = 'Safari'\n    elif 'meego' in user_agent:\n        platform = 'MeeGo'\n    elif 'firefox' in user_agent:\n        platform = 'FF'\n    elif 'opera' in user_agent:\n        platform = 'Opera'\n    elif 'wp7' in user_agent:\n        platform = 'WP7'\n    elif 'wp8' in user_agent:\n        platform = 'WP8'\n    elif 'tafiti' in user_agent:\n        platform = 'Tafiti'\n    elif 'readkit' in user_agent:\n        platform = 'ReadKt'\n    elif 'reeder' in user_agent:\n        platform = 'Reeder'\n    elif 'metroblur' in user_agent:\n        platform = 'Metrob'\n    elif 'feedme' in user_agent:\n        platform = 'FeedMe'\n    elif 'theoldreader' in user_agent:\n        platform = 'OldRdr'\n    elif 'fever' in user_agent:\n        platform = 'Fever'\n    elif 'superfeedr' in user_agent:\n        platform = 'Suprfd'\n    elif 'feed reader-window' in user_agent:\n        platform = 'FeedRe'\n    elif 'feed reader-background' in user_agent:\n        platform = 'FeReBg'\n    \n    return platform\n", "description": "NewsBlur is a personal news reader that brings people together to talk about the world. A new sound of an old instrument.", "file_name": "user_functions.py", "id": "703d78a63f121f41d79beedbd9586421", "language": "Python", "project_name": "NewsBlur", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/samuelclay-NewsBlur/samuelclay-NewsBlur-60aa891/utils/user_functions.py", "save_time": "", "source": "", "update_at": "2018-03-17T20:48:37Z", "url": "https://github.com/samuelclay/NewsBlur", "wiki": false}