{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_pool import ApiParameters\n    from library.bigip_pool import ModuleParameters\n    from library.bigip_pool import ModuleManager\n    from library.bigip_pool import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_pool import ApiParameters\n        from ansible.modules.network.f5.bigip_pool import ModuleParameters\n        from ansible.modules.network.f5.bigip_pool import ModuleManager\n        from ansible.modules.network.f5.bigip_pool import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            monitor_type='m_of_n',\n            monitors=['/Common/Fake', '/Common/Fake2'],\n            quorum=1,\n            slow_ramp_time=200,\n            reselect_tries=5,\n            service_down_action='drop'\n        )\n\n        p = ModuleParameters(params=args)\n        assert p.monitor_type == 'm_of_n'\n        assert p.quorum == 1\n        assert p.monitors == 'min 1 of { /Common/Fake /Common/Fake2 }'\n        assert p.slow_ramp_time == 200\n        assert p.reselect_tries == 5\n        assert p.service_down_action == 'drop'\n\n    def test_api_parameters(self):\n        args = dict(\n            monitor=\"/Common/Fake and /Common/Fake2 \",\n            slowRampTime=200,\n            reselectTries=5,\n            serviceDownAction='drop'\n        )\n\n        p = ApiParameters(params=args)\n        assert p.monitors == '/Common/Fake and /Common/Fake2'\n        assert p.slow_ramp_time == 200\n        assert p.reselect_tries == 5\n        assert p.service_down_action == 'drop'\n\n    def test_unknown_module_lb_method(self):\n        args = dict(\n            lb_method='obscure_hyphenated_fake_method',\n        )\n        with pytest.raises(F5ModuleError):\n            p = ModuleParameters(params=args)\n            assert p.lb_method == 'foo'\n\n    def test_unknown_api_lb_method(self):\n        args = dict(\n            loadBalancingMode='obscure_hypenated_fake_method'\n        )\n        with pytest.raises(F5ModuleError):\n            p = ApiParameters(params=args)\n            assert p.lb_method == 'foo'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_pool(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            description='fakepool',\n            service_down_action='drop',\n            lb_method='round-robin',\n            partition='Common',\n            slow_ramp_time=10,\n            reselect_tries=1,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['description'] == 'fakepool'\n        assert results['service_down_action'] == 'drop'\n        assert results['lb_method'] == 'round-robin'\n        assert results['slow_ramp_time'] == 10\n        assert results['reselect_tries'] == 1\n\n    def test_create_pool_monitor_type_missing(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            lb_method='round-robin',\n            partition='Common',\n            monitors=['/Common/tcp', '/Common/http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitors_missing(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            lb_method='round-robin',\n            partition='Common',\n            monitor_type='and_list',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        msg = \"The 'monitors' parameter cannot be empty when \" \\\n              \"'monitor_type' parameter is specified\"\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n\n        assert str(err.value) == msg\n\n    def test_create_pool_quorum_missing(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            lb_method='round-robin',\n            partition='Common',\n            monitor_type='m_of_n',\n            monitors=['/Common/tcp', '/Common/http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        msg = \"Quorum value must be specified with monitor_type 'm_of_n'.\"\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n\n        assert str(err.value) == msg\n\n    def test_create_pool_monitor_and_list(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            partition='Common',\n            monitor_type='and_list',\n            monitors=['/Common/tcp', '/Common/http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitor_m_of_n(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            partition='Common',\n            monitor_type='m_of_n',\n            quorum=1,\n            monitors=['/Common/tcp', '/Common/http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'm_of_n'\n\n    def test_update_monitors(self, *args):\n        set_module_args(dict(\n            name='test_pool',\n            partition='Common',\n            monitor_type='and_list',\n            monitors=['/Common/http', '/Common/tcp'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        current = ApiParameters(params=load_fixture('load_ltm_pool.json'))\n\n        mm.update_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitor_and_list_no_partition(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            monitor_type='and_list',\n            monitors=['tcp', 'http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitor_m_of_n_no_partition(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            monitor_type='m_of_n',\n            quorum=1,\n            monitors=['tcp', 'http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'm_of_n'\n\n    def test_create_pool_monitor_and_list_custom_partition(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            partition='Testing',\n            monitor_type='and_list',\n            monitors=['tcp', 'http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Testing/http', '/Testing/tcp']\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitor_m_of_n_custom_partition(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            partition='Testing',\n            monitor_type='m_of_n',\n            quorum=1,\n            monitors=['tcp', 'http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Testing/http', '/Testing/tcp']\n        assert results['monitor_type'] == 'm_of_n'\n\n    def test_create_pool_with_metadata(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            metadata=dict(ansible='2.4'),\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert 'metadata' in results\n        assert 'ansible' in results['metadata']\n        assert results['metadata']['ansible'] == '2.4'\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_pool import ApiParameters\n    from library.bigip_pool import ModuleParameters\n    from library.bigip_pool import ModuleManager\n    from library.bigip_pool import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_pool import ApiParameters\n        from ansible.modules.network.f5.bigip_pool import ModuleParameters\n        from ansible.modules.network.f5.bigip_pool import ModuleManager\n        from ansible.modules.network.f5.bigip_pool import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            monitor_type='m_of_n',\n            monitors=['/Common/Fake', '/Common/Fake2'],\n            quorum=1,\n            slow_ramp_time=200,\n            reselect_tries=5,\n            service_down_action='drop'\n        )\n\n        p = ModuleParameters(params=args)\n        assert p.monitor_type == 'm_of_n'\n        assert p.quorum == 1\n        assert p.monitors == 'min 1 of { /Common/Fake /Common/Fake2 }'\n        assert p.slow_ramp_time == 200\n        assert p.reselect_tries == 5\n        assert p.service_down_action == 'drop'\n\n    def test_api_parameters(self):\n        args = dict(\n            monitor=\"/Common/Fake and /Common/Fake2 \",\n            slowRampTime=200,\n            reselectTries=5,\n            serviceDownAction='drop'\n        )\n\n        p = ApiParameters(params=args)\n        assert p.monitors == '/Common/Fake and /Common/Fake2'\n        assert p.slow_ramp_time == 200\n        assert p.reselect_tries == 5\n        assert p.service_down_action == 'drop'\n\n    def test_unknown_module_lb_method(self):\n        args = dict(\n            lb_method='obscure_hyphenated_fake_method',\n        )\n        with pytest.raises(F5ModuleError):\n            p = ModuleParameters(params=args)\n            assert p.lb_method == 'foo'\n\n    def test_unknown_api_lb_method(self):\n        args = dict(\n            loadBalancingMode='obscure_hypenated_fake_method'\n        )\n        with pytest.raises(F5ModuleError):\n            p = ApiParameters(params=args)\n            assert p.lb_method == 'foo'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_pool(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            description='fakepool',\n            service_down_action='drop',\n            lb_method='round-robin',\n            partition='Common',\n            slow_ramp_time=10,\n            reselect_tries=1,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['description'] == 'fakepool'\n        assert results['service_down_action'] == 'drop'\n        assert results['lb_method'] == 'round-robin'\n        assert results['slow_ramp_time'] == 10\n        assert results['reselect_tries'] == 1\n\n    def test_create_pool_monitor_type_missing(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            lb_method='round-robin',\n            partition='Common',\n            monitors=['/Common/tcp', '/Common/http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitors_missing(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            lb_method='round-robin',\n            partition='Common',\n            monitor_type='and_list',\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        msg = \"The 'monitors' parameter cannot be empty when \" \\\n              \"'monitor_type' parameter is specified\"\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n\n        assert str(err.value) == msg\n\n    def test_create_pool_quorum_missing(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            lb_method='round-robin',\n            partition='Common',\n            monitor_type='m_of_n',\n            monitors=['/Common/tcp', '/Common/http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        msg = \"Quorum value must be specified with monitor_type 'm_of_n'.\"\n        with pytest.raises(F5ModuleError) as err:\n            mm.exec_module()\n\n        assert str(err.value) == msg\n\n    def test_create_pool_monitor_and_list(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            partition='Common',\n            monitor_type='and_list',\n            monitors=['/Common/tcp', '/Common/http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitor_m_of_n(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            partition='Common',\n            monitor_type='m_of_n',\n            quorum=1,\n            monitors=['/Common/tcp', '/Common/http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'm_of_n'\n\n    def test_update_monitors(self, *args):\n        set_module_args(dict(\n            name='test_pool',\n            partition='Common',\n            monitor_type='and_list',\n            monitors=['/Common/http', '/Common/tcp'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        current = ApiParameters(params=load_fixture('load_ltm_pool.json'))\n\n        mm.update_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitor_and_list_no_partition(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            monitor_type='and_list',\n            monitors=['tcp', 'http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitor_m_of_n_no_partition(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            monitor_type='m_of_n',\n            quorum=1,\n            monitors=['tcp', 'http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Common/http', '/Common/tcp']\n        assert results['monitor_type'] == 'm_of_n'\n\n    def test_create_pool_monitor_and_list_custom_partition(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            partition='Testing',\n            monitor_type='and_list',\n            monitors=['tcp', 'http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Testing/http', '/Testing/tcp']\n        assert results['monitor_type'] == 'and_list'\n\n    def test_create_pool_monitor_m_of_n_custom_partition(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            partition='Testing',\n            monitor_type='m_of_n',\n            quorum=1,\n            monitors=['tcp', 'http'],\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert results['monitors'] == ['/Testing/http', '/Testing/tcp']\n        assert results['monitor_type'] == 'm_of_n'\n\n    def test_create_pool_with_metadata(self, *args):\n        set_module_args(dict(\n            pool='fake_pool',\n            metadata=dict(ansible='2.4'),\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        mm = ModuleManager(module=module)\n        mm.create_on_device = Mock(return_value=True)\n        mm.exists = Mock(return_value=False)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['name'] == 'fake_pool'\n        assert 'metadata' in results\n        assert 'ansible' in results['metadata']\n        assert results['metadata']['ansible'] == '2.4'\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_pool.py", "id": "6b943230f05db2b8e1e792d47ac27b1c", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_pool.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}