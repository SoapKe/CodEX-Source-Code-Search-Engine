{"author": "eliangcs", "code": "import unittest\n\nfrom http_prompt.tree import Node\n\n\nclass TestNode(unittest.TestCase):\n\n    def setUp(self):\n        \n        \n        \n        \n        \n        \n        self.root = Node('root')\n        self.root.add_path('a', 'b', 'c')\n        self.root.add_path('a', 'b', 'f')\n        self.root.add_path('a', 'd', 'e')\n        self.root.add_path('a', 'd', 'g')\n        self.root.add_path('h', 'i', 'k', 'l')\n        self.root.add_path('h', 'i', 'k', 'm')\n        self.root.add_path('h', 'i', 'k', 'p')\n        self.root.add_path('h', 'n', 'o')\n\n    def test_illegal_name(self):\n        self.assertRaises(ValueError, Node, '.')\n        self.assertRaises(ValueError, Node, '..')\n\n    def test_str(self):\n        node = Node('my node')\n        self.assertEqual(str(node), 'my node')\n\n    def test_cmp_same_type(self):\n        a = Node('a', data={'type': 'dir'})\n        b = Node('b', data={'type': 'dir'})\n        self.assertTrue(a < b)\n\n    def test_cmp_different_type(self):\n        a = Node('a', data={'type': 'file'})\n        b = Node('b', data={'type': 'dir'})\n        self.assertTrue(b < a)\n\n    def test_eq(self):\n        a = Node('a', data={'type': 'file'})\n        b = Node('b', data={'type': 'dir'})\n        self.assertNotEqual(a, b)\n\n        a = Node('a', data={'type': 'file'})\n        b = Node('a', data={'type': 'file'})\n        self.assertEqual(a, b)\n\n    def test_add_path_and_find_child(self):\n        # Level 1 (root)\n        self.assertEqual(set(c.name for c in self.root.children), set('ah'))\n\n        \n        node_a = self.root.find_child('a')\n        node_h = self.root.find_child('h')\n        self.assertEqual(set(c.name for c in node_a.children), set('bd'))\n        self.assertEqual(set(c.name for c in node_h.children), set('in'))\n\n        \n        node_b = node_a.find_child('b')\n        node_i = node_h.find_child('i')\n        self.assertEqual(set(c.name for c in node_b.children), set('cf'))\n        self.assertEqual(set(c.name for c in node_i.children), set('k'))\n\n        \n        node_c = node_b.find_child('c')\n        node_k = node_i.find_child('k')\n        self.assertEqual(set(c.name for c in node_c.children), set())\n        self.assertEqual(set(c.name for c in node_k.children), set('lmp'))\n\n        \n        self.assertFalse(node_c.find_child('x'))\n\n    def test_find_child_wildcard(self):\n        root = Node('root')\n        root.add_path('a')\n        root.add_path('{b}')\n        root.add_path('c')\n\n        self.assertEqual(root.find_child('a').name, 'a')\n        self.assertEqual(root.find_child('c').name, 'c')\n        self.assertEqual(root.find_child('x').name, '{b}')\n        self.assertFalse(root.find_child('x', wildcard=False))\n\n    def test_ls(self):\n        self.assertEqual([n.name for n in self.root.ls('a')], list('bd'))\n        self.assertEqual([n.name for n in self.root.ls('a', 'b')], list('cf'))\n        self.assertEqual([n.name for n in self.root.ls('a', 'b', 'c')], [])\n        self.assertEqual([n.name for n in self.root.ls('h', 'i', 'k')],\n                         list('lmp'))\n\n    def test_ls_root(self):\n        self.assertEqual([n.name for n in self.root.ls()], list('ah'))\n\n    def test_ls_non_existing(self):\n        self.assertEqual([n.name for n in self.root.ls('x')], [])\n        self.assertEqual([n.name for n in self.root.ls('a', 'b', 'x')], [])\n\n    def test_ls_parent(self):\n        self.assertEqual([n.name for n in self.root.ls('..')], list('ah'))\n        self.assertEqual([n.name for n in self.root.ls('..', '..', '..')],\n                         list('ah'))\n        self.assertEqual([n.name for n in self.root.ls('..', '..', 'h')],\n                         list('in'))\n        self.assertEqual(\n            [n.name for n in self.root.ls('..', '..', 'h', '..', 'a')],\n            list('bd'))\n\n    def test_ls_dot(self):\n        self.assertEqual([n.name for n in self.root.ls('.')], list('ah'))\n        self.assertEqual([n.name for n in self.root.ls('.', '.', '.')],\n                         list('ah'))\n        self.assertEqual([n.name for n in self.root.ls('.', 'a', 'b')],\n                         list('cf'))\n        self.assertEqual([n.name for n in self.root.ls('.', 'h', '.')],\n                         list('in'))\n        self.assertEqual(\n            [n.name for n in self.root.ls('.', 'h', '.', '.', 'n')], ['o'])\n\n    def test_ls_sort_by_types(self):\n        self.root.add_path('q', 'r')\n        self.root.add_path('q', 's', node_type='file')\n        self.root.add_path('q', 't', node_type='file')\n        self.root.add_path('q', 'u')\n        self.root.add_path('q', 'v', node_type='file')\n\n        self.assertEqual([n.name for n in self.root.ls('q')],\n                         list('rustv'))\n", "comments": "  make tree like              root                    h     b              n    c f   e g     k                    l p    level 1 (root)    level 2    level 3    level 4    return none child found ", "content": "import unittest\n\nfrom http_prompt.tree import Node\n\n\nclass TestNode(unittest.TestCase):\n\n    def setUp(self):\n        # Make a tree like this:\n        #          root\n        #     a             h\n        #  b     d        i   n\n        # c f   e g     k     o\n        #             l m p\n        self.root = Node('root')\n        self.root.add_path('a', 'b', 'c')\n        self.root.add_path('a', 'b', 'f')\n        self.root.add_path('a', 'd', 'e')\n        self.root.add_path('a', 'd', 'g')\n        self.root.add_path('h', 'i', 'k', 'l')\n        self.root.add_path('h', 'i', 'k', 'm')\n        self.root.add_path('h', 'i', 'k', 'p')\n        self.root.add_path('h', 'n', 'o')\n\n    def test_illegal_name(self):\n        self.assertRaises(ValueError, Node, '.')\n        self.assertRaises(ValueError, Node, '..')\n\n    def test_str(self):\n        node = Node('my node')\n        self.assertEqual(str(node), 'my node')\n\n    def test_cmp_same_type(self):\n        a = Node('a', data={'type': 'dir'})\n        b = Node('b', data={'type': 'dir'})\n        self.assertTrue(a < b)\n\n    def test_cmp_different_type(self):\n        a = Node('a', data={'type': 'file'})\n        b = Node('b', data={'type': 'dir'})\n        self.assertTrue(b < a)\n\n    def test_eq(self):\n        a = Node('a', data={'type': 'file'})\n        b = Node('b', data={'type': 'dir'})\n        self.assertNotEqual(a, b)\n\n        a = Node('a', data={'type': 'file'})\n        b = Node('a', data={'type': 'file'})\n        self.assertEqual(a, b)\n\n    def test_add_path_and_find_child(self):\n        # Level 1 (root)\n        self.assertEqual(set(c.name for c in self.root.children), set('ah'))\n\n        # Level 2\n        node_a = self.root.find_child('a')\n        node_h = self.root.find_child('h')\n        self.assertEqual(set(c.name for c in node_a.children), set('bd'))\n        self.assertEqual(set(c.name for c in node_h.children), set('in'))\n\n        # Level 3\n        node_b = node_a.find_child('b')\n        node_i = node_h.find_child('i')\n        self.assertEqual(set(c.name for c in node_b.children), set('cf'))\n        self.assertEqual(set(c.name for c in node_i.children), set('k'))\n\n        # Level 4\n        node_c = node_b.find_child('c')\n        node_k = node_i.find_child('k')\n        self.assertEqual(set(c.name for c in node_c.children), set())\n        self.assertEqual(set(c.name for c in node_k.children), set('lmp'))\n\n        # Return None if child can't be found\n        self.assertFalse(node_c.find_child('x'))\n\n    def test_find_child_wildcard(self):\n        root = Node('root')\n        root.add_path('a')\n        root.add_path('{b}')\n        root.add_path('c')\n\n        self.assertEqual(root.find_child('a').name, 'a')\n        self.assertEqual(root.find_child('c').name, 'c')\n        self.assertEqual(root.find_child('x').name, '{b}')\n        self.assertFalse(root.find_child('x', wildcard=False))\n\n    def test_ls(self):\n        self.assertEqual([n.name for n in self.root.ls('a')], list('bd'))\n        self.assertEqual([n.name for n in self.root.ls('a', 'b')], list('cf'))\n        self.assertEqual([n.name for n in self.root.ls('a', 'b', 'c')], [])\n        self.assertEqual([n.name for n in self.root.ls('h', 'i', 'k')],\n                         list('lmp'))\n\n    def test_ls_root(self):\n        self.assertEqual([n.name for n in self.root.ls()], list('ah'))\n\n    def test_ls_non_existing(self):\n        self.assertEqual([n.name for n in self.root.ls('x')], [])\n        self.assertEqual([n.name for n in self.root.ls('a', 'b', 'x')], [])\n\n    def test_ls_parent(self):\n        self.assertEqual([n.name for n in self.root.ls('..')], list('ah'))\n        self.assertEqual([n.name for n in self.root.ls('..', '..', '..')],\n                         list('ah'))\n        self.assertEqual([n.name for n in self.root.ls('..', '..', 'h')],\n                         list('in'))\n        self.assertEqual(\n            [n.name for n in self.root.ls('..', '..', 'h', '..', 'a')],\n            list('bd'))\n\n    def test_ls_dot(self):\n        self.assertEqual([n.name for n in self.root.ls('.')], list('ah'))\n        self.assertEqual([n.name for n in self.root.ls('.', '.', '.')],\n                         list('ah'))\n        self.assertEqual([n.name for n in self.root.ls('.', 'a', 'b')],\n                         list('cf'))\n        self.assertEqual([n.name for n in self.root.ls('.', 'h', '.')],\n                         list('in'))\n        self.assertEqual(\n            [n.name for n in self.root.ls('.', 'h', '.', '.', 'n')], ['o'])\n\n    def test_ls_sort_by_types(self):\n        self.root.add_path('q', 'r')\n        self.root.add_path('q', 's', node_type='file')\n        self.root.add_path('q', 't', node_type='file')\n        self.root.add_path('q', 'u')\n        self.root.add_path('q', 'v', node_type='file')\n\n        self.assertEqual([n.name for n in self.root.ls('q')],\n                         list('rustv'))\n", "description": "HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting", "file_name": "test_tree.py", "id": "4147af840096c83f48bad46eb6a89b60", "language": "Python", "project_name": "http-prompt", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/eliangcs-http-prompt/eliangcs-http-prompt-87f1e9d/tests/test_tree.py", "save_time": "", "source": "", "update_at": "2018-03-17T18:26:33Z", "url": "https://github.com/eliangcs/http-prompt", "wiki": true}