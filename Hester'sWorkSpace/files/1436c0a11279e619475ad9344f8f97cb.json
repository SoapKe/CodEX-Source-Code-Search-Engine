{"author": "ansible", "code": "\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_linkagg\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxLinkaggModule(TestOnyxModule):\n\n    module = onyx_linkagg\n\n    def setUp(self):\n        super(TestOnyxLinkaggModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_linkagg.OnyxLinkAggModule,\n            \"_get_port_channels\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxLinkaggModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixture(self, config_file):\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def load_port_channel_fixture(self):\n        config_file = 'onyx_port_channel_show.cfg'\n        self.load_fixture(config_file)\n\n    def load_mlag_port_channel_fixture(self):\n        config_file = 'onyx_mlag_port_channel_show.cfg'\n        self.load_fixture(config_file)\n\n    def test_port_channel_no_change(self):\n        set_module_args(dict(name='Po22', state='present',\n                             members=['Eth1/7']))\n        self.load_port_channel_fixture()\n        self.execute_module(changed=False)\n\n    def test_port_channel_remove(self):\n        set_module_args(dict(name='Po22', state='absent'))\n        self.load_port_channel_fixture()\n        commands = ['no interface port-channel 22']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_port_channel_add(self):\n        set_module_args(dict(name='Po23', state='present',\n                             members=['Eth1/8']))\n        self.load_port_channel_fixture()\n        commands = ['interface port-channel 23', 'exit',\n                    'interface ethernet 1/8 channel-group 23 mode on']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_port_channel_add_member(self):\n        set_module_args(dict(name='Po22', state='present',\n                             members=['Eth1/7', 'Eth1/8']))\n        self.load_port_channel_fixture()\n        commands = ['interface ethernet 1/8 channel-group 22 mode on']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_port_channel_remove_member(self):\n        set_module_args(dict(name='Po22', state='present'))\n        self.load_port_channel_fixture()\n        commands = ['interface ethernet 1/7 no channel-group']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_port_channel_no_change(self):\n        set_module_args(dict(name='Mpo33', state='present',\n                             members=['Eth1/8']))\n        self.load_mlag_port_channel_fixture()\n        self.execute_module(changed=False)\n\n    def test_mlag_port_channel_remove(self):\n        set_module_args(dict(name='Mpo33', state='absent'))\n        self.load_mlag_port_channel_fixture()\n        commands = ['no interface mlag-port-channel 33']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_port_channel_add(self):\n        set_module_args(dict(name='Mpo34', state='present',\n                             members=['Eth1/9']))\n        self.load_mlag_port_channel_fixture()\n        commands = ['interface mlag-port-channel 34', 'exit',\n                    'interface ethernet 1/9 mlag-channel-group 34 mode on']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_port_channel_add_member(self):\n        set_module_args(dict(name='Mpo33', state='present',\n                             members=['Eth1/8', 'Eth1/9']))\n        self.load_mlag_port_channel_fixture()\n        commands = ['interface ethernet 1/9 mlag-channel-group 33 mode on']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_port_channel_remove_member(self):\n        set_module_args(dict(name='Mpo33', state='present'))\n        self.load_mlag_port_channel_fixture()\n        commands = ['interface ethernet 1/8 no mlag-channel-group']\n        self.execute_module(changed=True, commands=commands)\n", "comments": "     copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish ", "content": "#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_linkagg\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxLinkaggModule(TestOnyxModule):\n\n    module = onyx_linkagg\n\n    def setUp(self):\n        super(TestOnyxLinkaggModule, self).setUp()\n        self.mock_get_config = patch.object(\n            onyx_linkagg.OnyxLinkAggModule,\n            \"_get_port_channels\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxLinkaggModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixture(self, config_file):\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def load_port_channel_fixture(self):\n        config_file = 'onyx_port_channel_show.cfg'\n        self.load_fixture(config_file)\n\n    def load_mlag_port_channel_fixture(self):\n        config_file = 'onyx_mlag_port_channel_show.cfg'\n        self.load_fixture(config_file)\n\n    def test_port_channel_no_change(self):\n        set_module_args(dict(name='Po22', state='present',\n                             members=['Eth1/7']))\n        self.load_port_channel_fixture()\n        self.execute_module(changed=False)\n\n    def test_port_channel_remove(self):\n        set_module_args(dict(name='Po22', state='absent'))\n        self.load_port_channel_fixture()\n        commands = ['no interface port-channel 22']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_port_channel_add(self):\n        set_module_args(dict(name='Po23', state='present',\n                             members=['Eth1/8']))\n        self.load_port_channel_fixture()\n        commands = ['interface port-channel 23', 'exit',\n                    'interface ethernet 1/8 channel-group 23 mode on']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_port_channel_add_member(self):\n        set_module_args(dict(name='Po22', state='present',\n                             members=['Eth1/7', 'Eth1/8']))\n        self.load_port_channel_fixture()\n        commands = ['interface ethernet 1/8 channel-group 22 mode on']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_port_channel_remove_member(self):\n        set_module_args(dict(name='Po22', state='present'))\n        self.load_port_channel_fixture()\n        commands = ['interface ethernet 1/7 no channel-group']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_port_channel_no_change(self):\n        set_module_args(dict(name='Mpo33', state='present',\n                             members=['Eth1/8']))\n        self.load_mlag_port_channel_fixture()\n        self.execute_module(changed=False)\n\n    def test_mlag_port_channel_remove(self):\n        set_module_args(dict(name='Mpo33', state='absent'))\n        self.load_mlag_port_channel_fixture()\n        commands = ['no interface mlag-port-channel 33']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_port_channel_add(self):\n        set_module_args(dict(name='Mpo34', state='present',\n                             members=['Eth1/9']))\n        self.load_mlag_port_channel_fixture()\n        commands = ['interface mlag-port-channel 34', 'exit',\n                    'interface ethernet 1/9 mlag-channel-group 34 mode on']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_port_channel_add_member(self):\n        set_module_args(dict(name='Mpo33', state='present',\n                             members=['Eth1/8', 'Eth1/9']))\n        self.load_mlag_port_channel_fixture()\n        commands = ['interface ethernet 1/9 mlag-channel-group 33 mode on']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_mlag_port_channel_remove_member(self):\n        set_module_args(dict(name='Mpo33', state='present'))\n        self.load_mlag_port_channel_fixture()\n        commands = ['interface ethernet 1/8 no mlag-channel-group']\n        self.execute_module(changed=True, commands=commands)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_onyx_linkagg.py", "id": "1436c0a11279e619475ad9344f8f97cb", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/onyx/test_onyx_linkagg.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}