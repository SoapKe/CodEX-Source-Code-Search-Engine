{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.tools.float_utils import float_compare\n\nimport logging\nimport pprint\n\n_logger = logging.getLogger(__name__)\n\n\nclass TransferPaymentAcquirer(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('transfer', 'Wire Transfer')], default='transfer')\n\n    def transfer_get_form_action_url(self):\n        return '/payment/transfer/feedback'\n\n    def _format_transfer_data(self):\n        company_id = self.env.user.company_id.id\n        \n        journals = self.env['account.journal'].search([('type', '=', 'bank'), ('company_id', '=', company_id)])\n        accounts = journals.mapped('bank_account_id').name_get()\n        bank_title = _('Bank Accounts') if len(accounts) > 1 else _('Bank Account')\n        bank_accounts = ''.join(['<ul>'] + ['<li>%s</li>' % name for id, name in accounts] + ['</ul>'])\n        post_msg = _('''<div>\n<h3>Please use the following transfer details</h3>\n<h4>%(bank_title)s</h4>\n%(bank_accounts)s\n<h4>Communication</h4>\n<p>Please use the order name as communication reference.</p>\n</div>''') % {\n            'bank_title': bank_title,\n            'bank_accounts': bank_accounts,\n        }\n        return post_msg\n\n    @api.model\n    def create(self, values):\n        \"\"\" Hook in create to create a default post_msg. This is done in create\n        to have access to the name and other creation values. If no post_msg\n        or a void post_msg is given at creation, generate a default one. \"\"\"\n        if values.get('provider') == 'transfer' and not values.get('post_msg'):\n            values['post_msg'] = self._format_transfer_data()\n        return super(TransferPaymentAcquirer, self).create(values)\n\n    @api.multi\n    def write(self, values):\n        \"\"\" Hook in write to create a default post_msg. See create(). \"\"\"\n        if all(not acquirer.post_msg and acquirer.provider != 'transfer' for acquirer in self) and values.get('provider') == 'transfer':\n            values['post_msg'] = self._format_transfer_data()\n        return super(TransferPaymentAcquirer, self).write(values)\n\n\nclass TransferPaymentTransaction(models.Model):\n    _inherit = 'payment.transaction'\n\n    @api.model\n    def _transfer_form_get_tx_from_data(self, data):\n        reference, amount, currency_name = data.get('reference'), data.get('amount'), data.get('currency_name')\n        tx = self.search([('reference', '=', reference)])\n\n        if not tx or len(tx) > 1:\n            error_msg = _('received data for reference %s') % (pprint.pformat(reference))\n            if not tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        return tx\n\n    def _transfer_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        if float_compare(float(data.get('amount', '0.0')), self.amount, 2) != 0:\n            invalid_parameters.append(('amount', data.get('amount'), '%.2f' % self.amount))\n        if data.get('currency') != self.currency_id.name:\n            invalid_parameters.append(('currency', data.get('currency'), self.currency_id.name))\n\n        return invalid_parameters\n\n    def _transfer_form_validate(self, data):\n        _logger.info('Validated transfer payment for tx %s: set as pending' % (self.reference))\n        return self.write({'state': 'pending'})\n", "comments": "    hook create create default post msg  this done create         access name creation values  if post msg         void post msg given creation  generate default one              values get( provider )     transfer  values get( post msg )              values  post msg     self  format transfer data()         return super(transferpaymentacquirer  self) create(values)       api multi     def write(self  values)              hook write create default post msg  see create()           div   h3 please use following transfer details  h3   h4  (bank title)s  h4   (bank accounts)s  h4 communication  h4   p please use order name communication reference   p    div            coding  utf 8        filter bank accounts marked visible ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.tools.float_utils import float_compare\n\nimport logging\nimport pprint\n\n_logger = logging.getLogger(__name__)\n\n\nclass TransferPaymentAcquirer(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('transfer', 'Wire Transfer')], default='transfer')\n\n    def transfer_get_form_action_url(self):\n        return '/payment/transfer/feedback'\n\n    def _format_transfer_data(self):\n        company_id = self.env.user.company_id.id\n        # filter only bank accounts marked as visible\n        journals = self.env['account.journal'].search([('type', '=', 'bank'), ('company_id', '=', company_id)])\n        accounts = journals.mapped('bank_account_id').name_get()\n        bank_title = _('Bank Accounts') if len(accounts) > 1 else _('Bank Account')\n        bank_accounts = ''.join(['<ul>'] + ['<li>%s</li>' % name for id, name in accounts] + ['</ul>'])\n        post_msg = _('''<div>\n<h3>Please use the following transfer details</h3>\n<h4>%(bank_title)s</h4>\n%(bank_accounts)s\n<h4>Communication</h4>\n<p>Please use the order name as communication reference.</p>\n</div>''') % {\n            'bank_title': bank_title,\n            'bank_accounts': bank_accounts,\n        }\n        return post_msg\n\n    @api.model\n    def create(self, values):\n        \"\"\" Hook in create to create a default post_msg. This is done in create\n        to have access to the name and other creation values. If no post_msg\n        or a void post_msg is given at creation, generate a default one. \"\"\"\n        if values.get('provider') == 'transfer' and not values.get('post_msg'):\n            values['post_msg'] = self._format_transfer_data()\n        return super(TransferPaymentAcquirer, self).create(values)\n\n    @api.multi\n    def write(self, values):\n        \"\"\" Hook in write to create a default post_msg. See create(). \"\"\"\n        if all(not acquirer.post_msg and acquirer.provider != 'transfer' for acquirer in self) and values.get('provider') == 'transfer':\n            values['post_msg'] = self._format_transfer_data()\n        return super(TransferPaymentAcquirer, self).write(values)\n\n\nclass TransferPaymentTransaction(models.Model):\n    _inherit = 'payment.transaction'\n\n    @api.model\n    def _transfer_form_get_tx_from_data(self, data):\n        reference, amount, currency_name = data.get('reference'), data.get('amount'), data.get('currency_name')\n        tx = self.search([('reference', '=', reference)])\n\n        if not tx or len(tx) > 1:\n            error_msg = _('received data for reference %s') % (pprint.pformat(reference))\n            if not tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        return tx\n\n    def _transfer_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        if float_compare(float(data.get('amount', '0.0')), self.amount, 2) != 0:\n            invalid_parameters.append(('amount', data.get('amount'), '%.2f' % self.amount))\n        if data.get('currency') != self.currency_id.name:\n            invalid_parameters.append(('currency', data.get('currency'), self.currency_id.name))\n\n        return invalid_parameters\n\n    def _transfer_form_validate(self, data):\n        _logger.info('Validated transfer payment for tx %s: set as pending' % (self.reference))\n        return self.write({'state': 'pending'})\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "payment.py", "id": "879d6f2b22322e1b2e949856c79d447c", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_transfer/models/payment.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}