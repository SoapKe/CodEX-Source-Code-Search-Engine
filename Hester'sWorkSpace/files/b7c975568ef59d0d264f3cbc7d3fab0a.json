{"author": "python-telegram-bot", "code": "\n# -*- coding: utf-8 -*-\n\n\"\"\"Simple Bot to reply to Telegram messages.\n\nThis program is dedicated to the public domain under the CC0 license.\n\nThis Bot uses the Updater class to handle the bot.\n\nFirst, a few handler functions are defined. Then, those functions are passed to\nthe Dispatcher and registered at their respective places.\nThen, the bot is started and runs until we press Ctrl-C on the command line.\n\nUsage:\nBasic Echobot example, repeats messages.\nPress Ctrl-C on the command line or send a signal to the process to stop the\nbot.\n\"\"\"\n\nfrom telegram.ext import Updater, CommandHandler, MessageHandler, Filters\nimport logging\n\n\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\n\n\n\ndef start(bot, update):\n    \"\"\"Send a message when the command /start is issued.\"\"\"\n    update.message.reply_text('Hi!')\n\n\ndef help(bot, update):\n    \"\"\"Send a message when the command /help is issued.\"\"\"\n    update.message.reply_text('Help!')\n\n\ndef echo(bot, update):\n    \"\"\"Echo the user message.\"\"\"\n    update.message.reply_text(update.message.text)\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n    \"\"\"Start the bot.\"\"\"\n    \n    updater = Updater(\"TOKEN\")\n\n    \n    dp = updater.dispatcher\n\n    \n    dp.add_handler(CommandHandler(\"start\", start))\n    dp.add_handler(CommandHandler(\"help\", help))\n\n    \n    dp.add_handler(MessageHandler(Filters.text, echo))\n\n    \n    dp.add_error_handler(error)\n\n    \n    updater.start_polling()\n\n    \n    \n    # start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "   simple bot reply telegram messages   this program dedicated public domain cc0 license   this bot uses updater class handle bot   first  handler functions defined  then  functions passed dispatcher registered respective places  then  bot started runs press ctrl c command line   usage  basic echobot example  repeats messages  press ctrl c command line send signal process stop bot       telegram ext import updater  commandhandler  messagehandler  filters import logging    enable logging logging basicconfig(format   (asctime)s    (name)s    (levelname)s    (message)s                       level logging info)  logger   logging getlogger(  name  )     define command handlers  these usually take two arguments bot   update  error handlers also receive raised telegramerror object error  def start(bot  update)         send message command  start issued         update message reply text( hi  )   def help(bot  update)         send message command  help issued         update message reply text( help  )   def echo(bot  update)         echo user message         update message reply text(update message text)   def error(bot  update  error)         log errors caused updates         logger warning( update    caused error      update  error)   def main()         start bot         usr bin env python        coding  utf 8        enable logging    define command handlers  these usually take two arguments bot    update  error handlers also receive raised telegramerror object error     create eventhandler pass bot token     get dispatcher register handlers    different commands   answer telegram    noncommand e message   echo message telegram    log errors    start bot    run bot press ctrl c process receives sigint     sigterm sigabrt  this used time  since    start polling() non blocking stop bot gracefully  ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"Simple Bot to reply to Telegram messages.\n\nThis program is dedicated to the public domain under the CC0 license.\n\nThis Bot uses the Updater class to handle the bot.\n\nFirst, a few handler functions are defined. Then, those functions are passed to\nthe Dispatcher and registered at their respective places.\nThen, the bot is started and runs until we press Ctrl-C on the command line.\n\nUsage:\nBasic Echobot example, repeats messages.\nPress Ctrl-C on the command line or send a signal to the process to stop the\nbot.\n\"\"\"\n\nfrom telegram.ext import Updater, CommandHandler, MessageHandler, Filters\nimport logging\n\n# Enable logging\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\n\n# Define a few command handlers. These usually take the two arguments bot and\n# update. Error handlers also receive the raised TelegramError object in error.\ndef start(bot, update):\n    \"\"\"Send a message when the command /start is issued.\"\"\"\n    update.message.reply_text('Hi!')\n\n\ndef help(bot, update):\n    \"\"\"Send a message when the command /help is issued.\"\"\"\n    update.message.reply_text('Help!')\n\n\ndef echo(bot, update):\n    \"\"\"Echo the user message.\"\"\"\n    update.message.reply_text(update.message.text)\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n    \"\"\"Start the bot.\"\"\"\n    # Create the EventHandler and pass it your bot's token.\n    updater = Updater(\"TOKEN\")\n\n    # Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n    # on different commands - answer in Telegram\n    dp.add_handler(CommandHandler(\"start\", start))\n    dp.add_handler(CommandHandler(\"help\", help))\n\n    # on noncommand i.e message - echo the message on Telegram\n    dp.add_handler(MessageHandler(Filters.text, echo))\n\n    # log all errors\n    dp.add_error_handler(error)\n\n    # Start the Bot\n    updater.start_polling()\n\n    # Run the bot until you press Ctrl-C or the process receives SIGINT,\n    # SIGTERM or SIGABRT. This should be used most of the time, since\n    # start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "We have made you a wrapper you can't refuse", "file_name": "echobot2.py", "id": "b7c975568ef59d0d264f3cbc7d3fab0a", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/examples/echobot2.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}