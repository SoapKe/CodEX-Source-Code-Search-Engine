{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    xpath_text,\n    qualities,\n)\n\n\nclass PladformIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'https://out.pladform.ru/player?pl=64471&videoid=3777899&vk_puid15=0&vk_puid34=0',\n        'md5': '53362fac3a27352da20fa2803cc5cd6f',\n        'info_dict': {\n            'id': '3777899',\n            'ext': 'mp4',\n            'title': '\u0421\u0422\u0423\u0414\u0418\u042f \u0421\u041e\u042e\u0417 \u2022 \u0428\u043e\u0443 \u0421\u0442\u0443\u0434\u0438\u044f \u0421\u043e\u044e\u0437, 24 \u0432\u044b\u043f\u0443\u0441\u043a (01.02.2018) \u041d\u0443\u0440\u043b\u0430\u043d \u0421\u0430\u0431\u0443\u0440\u043e\u0432 \u0438 \u0421\u043b\u0430\u0432\u0430 \u041a\u043e\u043c\u0438\u0441\u0441\u0430\u0440\u0435\u043d\u043a\u043e',\n            'description': 'md5:05140e8bf1b7e2d46e7ba140be57fd95',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 3190,\n        },\n    }, {\n        'url': 'http://static.pladform.ru/player.swf?pl=21469&videoid=100183293&vkcid=0',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.pladform.ru/catalog/video/videoid/100183293/vkcid/0',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//out\\.pladform\\.ru/player\\?.+?)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        pl = qs.get('pl', ['1'])[0]\n\n        video = self._download_xml(\n            'http://out.pladform.ru/getVideo', video_id, query={\n                'pl': pl,\n                'videoid': video_id,\n            })\n\n        def fail(text):\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, text),\n                expected=True)\n\n        if video.tag == 'error':\n            fail(video.text)\n\n        quality = qualities(('ld', 'sd', 'hd'))\n\n        formats = []\n        for src in video.findall('./src'):\n            if src is None:\n                continue\n            format_url = src.text\n            if not format_url:\n                continue\n            if src.get('type') == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': src.text,\n                    'format_id': src.get('quality'),\n                    'quality': quality(src.get('quality')),\n                })\n\n        if not formats:\n            error = xpath_text(video, './cap', 'error', default=None)\n            if error:\n                fail(error)\n\n        self._sort_formats(formats)\n\n        webpage = self._download_webpage(\n            'http://video.pladform.ru/catalog/video/videoid/%s' % video_id,\n            video_id)\n\n        title = self._og_search_title(webpage, fatal=False) or xpath_text(\n            video, './/title', 'title', fatal=True)\n        description = self._search_regex(\n            r'</h3>\\s*<p>([^<]+)</p>', webpage, 'description', fatal=False)\n        thumbnail = self._og_search_thumbnail(webpage) or xpath_text(\n            video, './/cover', 'cover')\n\n        duration = int_or_none(xpath_text(video, './/time', 'duration'))\n        age_limit = int_or_none(xpath_text(video, './/age18', 'age limit'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "comments": "(?x)\n                    https?://\n                        (?:\n                            (?:\n                                out\\.pladform\\.ru/player|\n                                static\\.pladform\\.ru/player\\.swf\n                            )\n                            \\?.*\\bvideoid=|\n                            video\\.pladform\\.ru/catalog/video/videoid/\n                        )\n                        (?P<id>\\d+)\n                    \n \n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    xpath_text,\n    qualities,\n)\n\n\nclass PladformIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:\n                            (?:\n                                out\\.pladform\\.ru/player|\n                                static\\.pladform\\.ru/player\\.swf\n                            )\n                            \\?.*\\bvideoid=|\n                            video\\.pladform\\.ru/catalog/video/videoid/\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [{\n        'url': 'https://out.pladform.ru/player?pl=64471&videoid=3777899&vk_puid15=0&vk_puid34=0',\n        'md5': '53362fac3a27352da20fa2803cc5cd6f',\n        'info_dict': {\n            'id': '3777899',\n            'ext': 'mp4',\n            'title': '\u0421\u0422\u0423\u0414\u0418\u042f \u0421\u041e\u042e\u0417 \u2022 \u0428\u043e\u0443 \u0421\u0442\u0443\u0434\u0438\u044f \u0421\u043e\u044e\u0437, 24 \u0432\u044b\u043f\u0443\u0441\u043a (01.02.2018) \u041d\u0443\u0440\u043b\u0430\u043d \u0421\u0430\u0431\u0443\u0440\u043e\u0432 \u0438 \u0421\u043b\u0430\u0432\u0430 \u041a\u043e\u043c\u0438\u0441\u0441\u0430\u0440\u0435\u043d\u043a\u043e',\n            'description': 'md5:05140e8bf1b7e2d46e7ba140be57fd95',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 3190,\n        },\n    }, {\n        'url': 'http://static.pladform.ru/player.swf?pl=21469&videoid=100183293&vkcid=0',\n        'only_matching': True,\n    }, {\n        'url': 'http://video.pladform.ru/catalog/video/videoid/100183293/vkcid/0',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//out\\.pladform\\.ru/player\\?.+?)\\1', webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        qs = compat_urlparse.parse_qs(compat_urlparse.urlparse(url).query)\n        pl = qs.get('pl', ['1'])[0]\n\n        video = self._download_xml(\n            'http://out.pladform.ru/getVideo', video_id, query={\n                'pl': pl,\n                'videoid': video_id,\n            })\n\n        def fail(text):\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, text),\n                expected=True)\n\n        if video.tag == 'error':\n            fail(video.text)\n\n        quality = qualities(('ld', 'sd', 'hd'))\n\n        formats = []\n        for src in video.findall('./src'):\n            if src is None:\n                continue\n            format_url = src.text\n            if not format_url:\n                continue\n            if src.get('type') == 'hls' or determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': src.text,\n                    'format_id': src.get('quality'),\n                    'quality': quality(src.get('quality')),\n                })\n\n        if not formats:\n            error = xpath_text(video, './cap', 'error', default=None)\n            if error:\n                fail(error)\n\n        self._sort_formats(formats)\n\n        webpage = self._download_webpage(\n            'http://video.pladform.ru/catalog/video/videoid/%s' % video_id,\n            video_id)\n\n        title = self._og_search_title(webpage, fatal=False) or xpath_text(\n            video, './/title', 'title', fatal=True)\n        description = self._search_regex(\n            r'</h3>\\s*<p>([^<]+)</p>', webpage, 'description', fatal=False)\n        thumbnail = self._og_search_thumbnail(webpage) or xpath_text(\n            video, './/cover', 'cover')\n\n        duration = int_or_none(xpath_text(video, './/time', 'duration'))\n        age_limit = int_or_none(xpath_text(video, './/age18', 'age limit'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pladform.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pladform.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}