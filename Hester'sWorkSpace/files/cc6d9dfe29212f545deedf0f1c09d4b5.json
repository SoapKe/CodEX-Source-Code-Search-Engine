{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import datetime, timedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.tools.translate import html_translate\nfrom odoo.addons import decimal_precision as dp\n\nfrom werkzeug.urls import url_encode\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = \"sale.order.line\"\n    _description = \"Sales Order Line\"\n\n    website_description = fields.Html('Line Description', sanitize=False, translate=html_translate)\n    option_line_id = fields.One2many('sale.order.option', 'line_id', 'Optional Products Lines')\n\n    \n    @api.onchange('product_id')\n    def product_id_change(self):\n        domain = super(SaleOrderLine, self).product_id_change()\n        if self.order_id.template_id:\n            self.name = next((quote_line.name for quote_line in self.order_id.template_id.quote_line if\n                             quote_line.product_id.id == self.product_id.id), self.name)\n        return domain\n\n    @api.model\n    def create(self, values):\n        values = self._inject_quote_description(values)\n        return super(SaleOrderLine, self).create(values)\n\n    @api.multi\n    def write(self, values):\n        values = self._inject_quote_description(values)\n        return super(SaleOrderLine, self).write(values)\n\n    def _inject_quote_description(self, values):\n        values = dict(values or {})\n        if not values.get('website_description') and values.get('product_id'):\n            product = self.env['product.product'].browse(values['product_id'])\n            values['website_description'] = product.quote_description or product.website_description\n        return values\n\n\nclass SaleOrder(models.Model):\n    _inherit = 'sale.order'\n\n    def _get_default_template(self):\n        template = self.env.ref('website_quote.website_quote_template_default', raise_if_not_found=False)\n        return template and template.active and template or False\n\n    def _get_default_online_payment(self):\n        default_template = self._get_default_template()\n        if self.template_id:\n            return self.template_id.require_payment\n        elif default_template:\n            return default_template.require_payment\n        elif self.env['ir.config_parameter'].sudo().get_param('sale.sale_portal_confirmation_options', default='none') == 'pay':\n            return 1\n        else:\n            return 0\n\n    template_id = fields.Many2one(\n        'sale.quote.template', 'Quotation Template',\n        readonly=True,\n        states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},\n        default=_get_default_template)\n    website_description = fields.Html('Description', sanitize_attributes=False, translate=html_translate)\n    options = fields.One2many(\n        'sale.order.option', 'order_id', 'Optional Products Lines',\n        copy=True, readonly=True,\n        states={'draft': [('readonly', False)], 'sent': [('readonly', False)]})\n    amount_undiscounted = fields.Float(\n        'Amount Before Discount', compute='_compute_amount_undiscounted', digits=0)\n    quote_viewed = fields.Boolean('Quotation Viewed')\n    require_payment = fields.Selection([\n        (0, 'Online Signature'),\n        (1, 'Online Payment')], default=_get_default_online_payment, string='Confirmation Mode',\n        help=\"Choose how you want to confirm an order to launch the delivery process. You can either \"\n             \"request a digital signature or an upfront payment. With a digital signature, you can \"\n             \"request the payment when issuing the invoice.\")\n\n    @api.multi\n    def copy(self, default=None):\n        if self.template_id and self.template_id.number_of_days > 0:\n            default = dict(default or {})\n            default['validity_date'] = fields.Date.to_string(datetime.now() + timedelta(self.template_id.number_of_days))\n        return super(SaleOrder, self).copy(default=default)\n\n    @api.one\n    def _compute_amount_undiscounted(self):\n        total = 0.0\n        for line in self.order_line:\n            total += line.price_subtotal + line.price_unit * ((line.discount or 0.0) / 100.0) * line.product_uom_qty   ??\n        self.amount_undiscounted = total\n\n    @api.onchange('partner_id')\n    def onchange_partner_id(self):\n        super(SaleOrder, self).onchange_partner_id()\n        self.note = self.template_id.note or self.note\n\n    @api.onchange('partner_id')\n    def onchange_update_description_lang(self):\n        if not self.template_id:\n            return\n        else:\n            template = self.template_id.with_context(lang=self.partner_id.lang)\n            self.website_description = template.website_description\n\n    @api.onchange('template_id')\n    def onchange_template_id(self):\n        if not self.template_id:\n            return\n        template = self.template_id.with_context(lang=self.partner_id.lang)\n\n        order_lines = [(5, 0, 0)]\n        for line in template.quote_line:\n            discount = 0\n            if self.pricelist_id:\n                price = self.pricelist_id.with_context(uom=line.product_uom_id.id).get_product_price(line.product_id, 1, False)\n                if self.pricelist_id.discount_policy == 'without_discount' and line.price_unit:\n                    discount = (line.price_unit - price) / line.price_unit * 100\n                    price = line.price_unit\n\n            else:\n                price = line.price_unit\n\n            data = {\n                'name': line.name,\n                'price_unit': price,\n                'discount': 100 - ((100 - discount) * (100 - line.discount)/100),\n                'product_uom_qty': line.product_uom_qty,\n                'product_id': line.product_id.id,\n                'layout_category_id': line.layout_category_id,\n                'product_uom': line.product_uom_id.id,\n                'website_description': line.website_description,\n                'state': 'draft',\n                'customer_lead': self._get_customer_lead(line.product_id.product_tmpl_id),\n            }\n            if self.pricelist_id:\n                data.update(self.env['sale.order.line']._get_purchase_price(self.pricelist_id, line.product_id, line.product_uom_id, fields.Date.context_today(self)))\n            order_lines.append((0, 0, data))\n\n        self.order_line = order_lines\n        self.order_line._compute_tax_id()\n\n        option_lines = []\n        for option in template.options:\n            if self.pricelist_id:\n                price = self.pricelist_id.with_context(uom=option.uom_id.id).get_product_price(option.product_id, 1, False)\n            else:\n                price = option.price_unit\n            data = {\n                'product_id': option.product_id.id,\n                'layout_category_id': option.layout_category_id,\n                'name': option.name,\n                'quantity': option.quantity,\n                'uom_id': option.uom_id.id,\n                'price_unit': price,\n                'discount': option.discount,\n                'website_description': option.website_description,\n            }\n            option_lines.append((0, 0, data))\n        self.options = option_lines\n\n        if template.number_of_days > 0:\n            self.validity_date = fields.Date.to_string(datetime.now() + timedelta(template.number_of_days))\n\n        self.website_description = template.website_description\n        self.require_payment = template.require_payment\n\n        if template.note:\n            self.note = template.note\n\n    @api.multi\n    def open_quotation(self):\n        self.ensure_one()\n        self.write({'quote_viewed': True})\n        return {\n            'type': 'ir.actions.act_url',\n            'target': 'self',\n            'url': '/quote/%s/%s' % (self.id, self.access_token)\n        }\n\n    @api.multi\n    def get_access_action(self, access_uid=None):\n        \"\"\" Instead of the classic form view, redirect to the online quote if it exists. \"\"\"\n        self.ensure_one()\n        user = access_uid and self.env['res.users'].sudo().browse(access_uid) or self.env.user\n\n        if not self.template_id or (not user.share and not self.env.context.get('force_website')):\n            return super(SaleOrder, self).get_access_action(access_uid)\n        return {\n            'type': 'ir.actions.act_url',\n            'url': '/quote/%s/%s' % (self.id, self.access_token),\n            'target': 'self',\n            'res_id': self.id,\n        }\n\n    def get_mail_url(self):\n        self.ensure_one()\n        if self.state not in ['sale', 'done']:\n            auth_param = url_encode(self.partner_id.signup_get_auth_param()[self.partner_id.id])\n            return '/quote/%s/%s?' % (self.id, self.access_token) + auth_param\n        return super(SaleOrder, self).get_mail_url()\n\n    def get_portal_confirmation_action(self):\n        \"\"\" Template override default behavior of pay / sign chosen in sales settings \"\"\"\n        if self.require_payment is not None or self.require_payment is not False:\n            return 'pay' if self.require_payment == 1 else 'sign'\n        return super(SaleOrder, self).get_portal_confirmation_action()\n\n    @api.multi\n    def action_confirm(self):\n        res = super(SaleOrder, self).action_confirm()\n        for order in self:\n            if order.template_id and order.template_id.mail_template_id:\n                self.template_id.mail_template_id.send_mail(order.id)\n        return res\n\n    @api.multi\n    def _get_payment_type(self):\n        self.ensure_one()\n        return 'form_save' if self.require_payment else 'form'\n\n\nclass SaleOrderOption(models.Model):\n    _name = \"sale.order.option\"\n    _description = \"Sale Options\"\n    _order = 'sequence, id'\n\n    order_id = fields.Many2one('sale.order', 'Sales Order Reference', ondelete='cascade', index=True)\n    line_id = fields.Many2one('sale.order.line', on_delete=\"set null\")\n    name = fields.Text('Description', required=True)\n    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)])\n    layout_category_id = fields.Many2one('sale.layout_category', string='Section')\n    website_description = fields.Html('Line Description', sanitize_attributes=False, translate=html_translate)\n    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))\n    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'))\n    uom_id = fields.Many2one('product.uom', 'Unit of Measure ', required=True)\n    quantity = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)\n    sequence = fields.Integer('Sequence', help=\"Gives the sequence order when displaying a list of suggested product.\")\n\n    @api.onchange('product_id', 'uom_id')\n    def _onchange_product_id(self):\n        if not self.product_id:\n            return\n        product = self.product_id.with_context(lang=self.order_id.partner_id.lang)\n        self.price_unit = product.list_price\n        self.website_description = product.quote_description or product.website_description\n        self.name = product.name\n        if product.description_sale:\n            self.name += '\\n' + product.description_sale\n        self.uom_id = self.uom_id or product.uom_id\n        pricelist = self.order_id.pricelist_id\n        if pricelist and product:\n            partner_id = self.order_id.partner_id.id\n            self.price_unit = pricelist.with_context(uom=self.uom_id.id).get_product_price(product, self.quantity, partner_id)\n        domain = {'uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}\n        return {'domain': domain}\n\n    @api.multi\n    def button_add_to_order(self):\n        self.ensure_one()\n        order = self.order_id\n        if order.state not in ['draft', 'sent']:\n            return False\n\n        order_line = order.order_line.filtered(lambda line: line.product_id == self.product_id)\n        if order_line:\n            order_line = order_line[0]\n            order_line.product_uom_qty += 1\n        else:\n            vals = {\n                'price_unit': self.price_unit,\n                'website_description': self.website_description,\n                'name': self.name,\n                'order_id': order.id,\n                'product_id': self.product_id.id,\n                'layout_category_id': self.layout_category_id.id,\n                'product_uom_qty': self.quantity,\n                'product_uom': self.uom_id.id,\n                'discount': self.discount,\n            }\n            order_line = self.env['sale.order.line'].create(vals)\n            order_line._compute_tax_id()\n\n        self.write({'line_id': order_line.id})\n        return {'type': 'ir.actions.client', 'tag': 'reload'}\n", "comments": "    instead classic form view  redirect online quote exists              self ensure one()         user   access uid self env  res users   sudo() browse(access uid) self env user          self template id (not user share self env context get( force website ))              return super(saleorder  self) get access action(access uid)         return                type    ir actions act url                url     quote      (self id  self access token)               target    self                res id   self id                 def get mail url(self)          self ensure one()         self state   sale    done                auth param   url encode(self partner id signup get auth param() self partner id id )             return   quote       (self id  self access token)   auth param         return super(saleorder  self) get mail url()      def get portal confirmation action(self)              template override default behavior pay   sign chosen sales settings            coding  utf 8        part odoo  see license file full copyright licensing details     take description order template product present    discount field named amount undiscounted    ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import datetime, timedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.tools.translate import html_translate\nfrom odoo.addons import decimal_precision as dp\n\nfrom werkzeug.urls import url_encode\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = \"sale.order.line\"\n    _description = \"Sales Order Line\"\n\n    website_description = fields.Html('Line Description', sanitize=False, translate=html_translate)\n    option_line_id = fields.One2many('sale.order.option', 'line_id', 'Optional Products Lines')\n\n    # Take the description on the order template if the product is present in it\n    @api.onchange('product_id')\n    def product_id_change(self):\n        domain = super(SaleOrderLine, self).product_id_change()\n        if self.order_id.template_id:\n            self.name = next((quote_line.name for quote_line in self.order_id.template_id.quote_line if\n                             quote_line.product_id.id == self.product_id.id), self.name)\n        return domain\n\n    @api.model\n    def create(self, values):\n        values = self._inject_quote_description(values)\n        return super(SaleOrderLine, self).create(values)\n\n    @api.multi\n    def write(self, values):\n        values = self._inject_quote_description(values)\n        return super(SaleOrderLine, self).write(values)\n\n    def _inject_quote_description(self, values):\n        values = dict(values or {})\n        if not values.get('website_description') and values.get('product_id'):\n            product = self.env['product.product'].browse(values['product_id'])\n            values['website_description'] = product.quote_description or product.website_description\n        return values\n\n\nclass SaleOrder(models.Model):\n    _inherit = 'sale.order'\n\n    def _get_default_template(self):\n        template = self.env.ref('website_quote.website_quote_template_default', raise_if_not_found=False)\n        return template and template.active and template or False\n\n    def _get_default_online_payment(self):\n        default_template = self._get_default_template()\n        if self.template_id:\n            return self.template_id.require_payment\n        elif default_template:\n            return default_template.require_payment\n        elif self.env['ir.config_parameter'].sudo().get_param('sale.sale_portal_confirmation_options', default='none') == 'pay':\n            return 1\n        else:\n            return 0\n\n    template_id = fields.Many2one(\n        'sale.quote.template', 'Quotation Template',\n        readonly=True,\n        states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},\n        default=_get_default_template)\n    website_description = fields.Html('Description', sanitize_attributes=False, translate=html_translate)\n    options = fields.One2many(\n        'sale.order.option', 'order_id', 'Optional Products Lines',\n        copy=True, readonly=True,\n        states={'draft': [('readonly', False)], 'sent': [('readonly', False)]})\n    amount_undiscounted = fields.Float(\n        'Amount Before Discount', compute='_compute_amount_undiscounted', digits=0)\n    quote_viewed = fields.Boolean('Quotation Viewed')\n    require_payment = fields.Selection([\n        (0, 'Online Signature'),\n        (1, 'Online Payment')], default=_get_default_online_payment, string='Confirmation Mode',\n        help=\"Choose how you want to confirm an order to launch the delivery process. You can either \"\n             \"request a digital signature or an upfront payment. With a digital signature, you can \"\n             \"request the payment when issuing the invoice.\")\n\n    @api.multi\n    def copy(self, default=None):\n        if self.template_id and self.template_id.number_of_days > 0:\n            default = dict(default or {})\n            default['validity_date'] = fields.Date.to_string(datetime.now() + timedelta(self.template_id.number_of_days))\n        return super(SaleOrder, self).copy(default=default)\n\n    @api.one\n    def _compute_amount_undiscounted(self):\n        total = 0.0\n        for line in self.order_line:\n            total += line.price_subtotal + line.price_unit * ((line.discount or 0.0) / 100.0) * line.product_uom_qty  # why is there a discount in a field named amount_undiscounted ??\n        self.amount_undiscounted = total\n\n    @api.onchange('partner_id')\n    def onchange_partner_id(self):\n        super(SaleOrder, self).onchange_partner_id()\n        self.note = self.template_id.note or self.note\n\n    @api.onchange('partner_id')\n    def onchange_update_description_lang(self):\n        if not self.template_id:\n            return\n        else:\n            template = self.template_id.with_context(lang=self.partner_id.lang)\n            self.website_description = template.website_description\n\n    @api.onchange('template_id')\n    def onchange_template_id(self):\n        if not self.template_id:\n            return\n        template = self.template_id.with_context(lang=self.partner_id.lang)\n\n        order_lines = [(5, 0, 0)]\n        for line in template.quote_line:\n            discount = 0\n            if self.pricelist_id:\n                price = self.pricelist_id.with_context(uom=line.product_uom_id.id).get_product_price(line.product_id, 1, False)\n                if self.pricelist_id.discount_policy == 'without_discount' and line.price_unit:\n                    discount = (line.price_unit - price) / line.price_unit * 100\n                    price = line.price_unit\n\n            else:\n                price = line.price_unit\n\n            data = {\n                'name': line.name,\n                'price_unit': price,\n                'discount': 100 - ((100 - discount) * (100 - line.discount)/100),\n                'product_uom_qty': line.product_uom_qty,\n                'product_id': line.product_id.id,\n                'layout_category_id': line.layout_category_id,\n                'product_uom': line.product_uom_id.id,\n                'website_description': line.website_description,\n                'state': 'draft',\n                'customer_lead': self._get_customer_lead(line.product_id.product_tmpl_id),\n            }\n            if self.pricelist_id:\n                data.update(self.env['sale.order.line']._get_purchase_price(self.pricelist_id, line.product_id, line.product_uom_id, fields.Date.context_today(self)))\n            order_lines.append((0, 0, data))\n\n        self.order_line = order_lines\n        self.order_line._compute_tax_id()\n\n        option_lines = []\n        for option in template.options:\n            if self.pricelist_id:\n                price = self.pricelist_id.with_context(uom=option.uom_id.id).get_product_price(option.product_id, 1, False)\n            else:\n                price = option.price_unit\n            data = {\n                'product_id': option.product_id.id,\n                'layout_category_id': option.layout_category_id,\n                'name': option.name,\n                'quantity': option.quantity,\n                'uom_id': option.uom_id.id,\n                'price_unit': price,\n                'discount': option.discount,\n                'website_description': option.website_description,\n            }\n            option_lines.append((0, 0, data))\n        self.options = option_lines\n\n        if template.number_of_days > 0:\n            self.validity_date = fields.Date.to_string(datetime.now() + timedelta(template.number_of_days))\n\n        self.website_description = template.website_description\n        self.require_payment = template.require_payment\n\n        if template.note:\n            self.note = template.note\n\n    @api.multi\n    def open_quotation(self):\n        self.ensure_one()\n        self.write({'quote_viewed': True})\n        return {\n            'type': 'ir.actions.act_url',\n            'target': 'self',\n            'url': '/quote/%s/%s' % (self.id, self.access_token)\n        }\n\n    @api.multi\n    def get_access_action(self, access_uid=None):\n        \"\"\" Instead of the classic form view, redirect to the online quote if it exists. \"\"\"\n        self.ensure_one()\n        user = access_uid and self.env['res.users'].sudo().browse(access_uid) or self.env.user\n\n        if not self.template_id or (not user.share and not self.env.context.get('force_website')):\n            return super(SaleOrder, self).get_access_action(access_uid)\n        return {\n            'type': 'ir.actions.act_url',\n            'url': '/quote/%s/%s' % (self.id, self.access_token),\n            'target': 'self',\n            'res_id': self.id,\n        }\n\n    def get_mail_url(self):\n        self.ensure_one()\n        if self.state not in ['sale', 'done']:\n            auth_param = url_encode(self.partner_id.signup_get_auth_param()[self.partner_id.id])\n            return '/quote/%s/%s?' % (self.id, self.access_token) + auth_param\n        return super(SaleOrder, self).get_mail_url()\n\n    def get_portal_confirmation_action(self):\n        \"\"\" Template override default behavior of pay / sign chosen in sales settings \"\"\"\n        if self.require_payment is not None or self.require_payment is not False:\n            return 'pay' if self.require_payment == 1 else 'sign'\n        return super(SaleOrder, self).get_portal_confirmation_action()\n\n    @api.multi\n    def action_confirm(self):\n        res = super(SaleOrder, self).action_confirm()\n        for order in self:\n            if order.template_id and order.template_id.mail_template_id:\n                self.template_id.mail_template_id.send_mail(order.id)\n        return res\n\n    @api.multi\n    def _get_payment_type(self):\n        self.ensure_one()\n        return 'form_save' if self.require_payment else 'form'\n\n\nclass SaleOrderOption(models.Model):\n    _name = \"sale.order.option\"\n    _description = \"Sale Options\"\n    _order = 'sequence, id'\n\n    order_id = fields.Many2one('sale.order', 'Sales Order Reference', ondelete='cascade', index=True)\n    line_id = fields.Many2one('sale.order.line', on_delete=\"set null\")\n    name = fields.Text('Description', required=True)\n    product_id = fields.Many2one('product.product', 'Product', domain=[('sale_ok', '=', True)])\n    layout_category_id = fields.Many2one('sale.layout_category', string='Section')\n    website_description = fields.Html('Line Description', sanitize_attributes=False, translate=html_translate)\n    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'))\n    discount = fields.Float('Discount (%)', digits=dp.get_precision('Discount'))\n    uom_id = fields.Many2one('product.uom', 'Unit of Measure ', required=True)\n    quantity = fields.Float('Quantity', required=True, digits=dp.get_precision('Product UoS'), default=1)\n    sequence = fields.Integer('Sequence', help=\"Gives the sequence order when displaying a list of suggested product.\")\n\n    @api.onchange('product_id', 'uom_id')\n    def _onchange_product_id(self):\n        if not self.product_id:\n            return\n        product = self.product_id.with_context(lang=self.order_id.partner_id.lang)\n        self.price_unit = product.list_price\n        self.website_description = product.quote_description or product.website_description\n        self.name = product.name\n        if product.description_sale:\n            self.name += '\\n' + product.description_sale\n        self.uom_id = self.uom_id or product.uom_id\n        pricelist = self.order_id.pricelist_id\n        if pricelist and product:\n            partner_id = self.order_id.partner_id.id\n            self.price_unit = pricelist.with_context(uom=self.uom_id.id).get_product_price(product, self.quantity, partner_id)\n        domain = {'uom_id': [('category_id', '=', self.product_id.uom_id.category_id.id)]}\n        return {'domain': domain}\n\n    @api.multi\n    def button_add_to_order(self):\n        self.ensure_one()\n        order = self.order_id\n        if order.state not in ['draft', 'sent']:\n            return False\n\n        order_line = order.order_line.filtered(lambda line: line.product_id == self.product_id)\n        if order_line:\n            order_line = order_line[0]\n            order_line.product_uom_qty += 1\n        else:\n            vals = {\n                'price_unit': self.price_unit,\n                'website_description': self.website_description,\n                'name': self.name,\n                'order_id': order.id,\n                'product_id': self.product_id.id,\n                'layout_category_id': self.layout_category_id.id,\n                'product_uom_qty': self.quantity,\n                'product_uom': self.uom_id.id,\n                'discount': self.discount,\n            }\n            order_line = self.env['sale.order.line'].create(vals)\n            order_line._compute_tax_id()\n\n        self.write({'line_id': order_line.id})\n        return {'type': 'ir.actions.client', 'tag': 'reload'}\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_order.py", "id": "cc6d9dfe29212f545deedf0f1c09d4b5", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_quote/models/sale_order.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}