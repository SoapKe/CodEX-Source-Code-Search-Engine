{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    get_element_by_id,\n    int_or_none,\n    remove_end,\n)\n\n\nclass FoxgayIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?foxgay\\.com/videos/(?:\\S+-)?(?P<id>\\d+)\\.shtml'\n    _TEST = {\n        'url': 'http://foxgay.com/videos/fuck-turkish-style-2582.shtml',\n        'md5': '344558ccfea74d33b7adbce22e577f54',\n        'info_dict': {\n            'id': '2582',\n            'ext': 'mp4',\n            'title': 'Fuck Turkish-style',\n            'description': 'md5:6ae2d9486921891efe89231ace13ffdf',\n            'age_limit': 18,\n            'thumbnail': r're:https?://.*\\.jpg$',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = remove_end(self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title'), ' - Foxgay.com')\n        description = get_element_by_id('inf_tit', webpage)\n\n        \n        self._downloader.cookiejar.clear('.foxgay.com')\n        \n        iframe_url = self._html_search_regex(\n            r'<iframe[^>]+src=([\\'\"])(?P<url>[^\\'\"]+)\\1', webpage,\n            'video frame', group='url')\n        iframe = self._download_webpage(\n            iframe_url, video_id, headers={'User-Agent': 'curl/7.50.1'},\n            note='Downloading video frame')\n        video_data = self._parse_json(self._search_regex(\n            r'video_data\\s*=\\s*([^;]+);', iframe, 'video data'), video_id)\n\n        formats = [{\n            'url': source,\n            'height': int_or_none(resolution),\n        } for source, resolution in zip(\n            video_data['sources'], video_data.get('resolutions', itertools.repeat(None)))]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'thumbnail': video_data.get('act_vid', {}).get('thumb'),\n            'age_limit': 18,\n        }\n", "comments": "# The default user-agent with foxgay cookies leads to pages without videos\n# Find the URL for the iFrame which contains the actual video.\n", "content": "from __future__ import unicode_literals\n\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    get_element_by_id,\n    int_or_none,\n    remove_end,\n)\n\n\nclass FoxgayIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?foxgay\\.com/videos/(?:\\S+-)?(?P<id>\\d+)\\.shtml'\n    _TEST = {\n        'url': 'http://foxgay.com/videos/fuck-turkish-style-2582.shtml',\n        'md5': '344558ccfea74d33b7adbce22e577f54',\n        'info_dict': {\n            'id': '2582',\n            'ext': 'mp4',\n            'title': 'Fuck Turkish-style',\n            'description': 'md5:6ae2d9486921891efe89231ace13ffdf',\n            'age_limit': 18,\n            'thumbnail': r're:https?://.*\\.jpg$',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = remove_end(self._html_search_regex(\n            r'<title>([^<]+)</title>', webpage, 'title'), ' - Foxgay.com')\n        description = get_element_by_id('inf_tit', webpage)\n\n        # The default user-agent with foxgay cookies leads to pages without videos\n        self._downloader.cookiejar.clear('.foxgay.com')\n        # Find the URL for the iFrame which contains the actual video.\n        iframe_url = self._html_search_regex(\n            r'<iframe[^>]+src=([\\'\"])(?P<url>[^\\'\"]+)\\1', webpage,\n            'video frame', group='url')\n        iframe = self._download_webpage(\n            iframe_url, video_id, headers={'User-Agent': 'curl/7.50.1'},\n            note='Downloading video frame')\n        video_data = self._parse_json(self._search_regex(\n            r'video_data\\s*=\\s*([^;]+);', iframe, 'video data'), video_id)\n\n        formats = [{\n            'url': source,\n            'height': int_or_none(resolution),\n        } for source, resolution in zip(\n            video_data['sources'], video_data.get('resolutions', itertools.repeat(None)))]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'thumbnail': video_data.get('act_vid', {}).get('thumb'),\n            'age_limit': 18,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "foxgay.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/foxgay.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}