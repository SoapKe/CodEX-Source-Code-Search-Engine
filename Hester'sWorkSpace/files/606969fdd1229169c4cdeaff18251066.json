{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    remove_start,\n    int_or_none,\n)\n\n\nclass BlinkxIE(InfoExtractor):\n    _VALID_URL = r'(?:https?://(?:www\\.)blinkx\\.com/\n    IE_NAME = 'blinkx'\n\n    _TEST = {\n        'url': 'http://www.blinkx.com/ce/Da0Gw3xc5ucpNduzLuDDlv4WC9PuI4fDi1-t6Y3LyfdY2SZS5Urbvn-UPJvrvbo8LTKTc67Wu2rPKSQDJyZeeORCR8bYkhs8lI7eqddznH2ofh5WEEdjYXnoRtj7ByQwt7atMErmXIeYKPsSDuMAAqJDlQZ-3Ff4HJVeH_s3Gh8oQ',\n        'md5': '337cf7a344663ec79bf93a526a2e06c7',\n        'info_dict': {\n            'id': 'Da0Gw3xc',\n            'ext': 'mp4',\n            'title': 'No Daily Show for John Oliver; HBO Show Renewed - IGN News',\n            'uploader': 'IGN News',\n            'upload_date': '20150217',\n            'timestamp': 1424215740,\n            'description': 'HBO has renewed Last Week Tonight With John Oliver for two more seasons.',\n            'duration': 47.743333,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        display_id = video_id[:8]\n\n        api_url = ('https://apib4.blinkx.com/api.php?action=play_video&' +\n                   'video=%s' % video_id)\n        data_json = self._download_webpage(api_url, display_id)\n        data = json.loads(data_json)['api']['results'][0]\n        duration = None\n        thumbnails = []\n        formats = []\n        for m in data['media']:\n            if m['type'] == 'jpg':\n                thumbnails.append({\n                    'url': m['link'],\n                    'width': int(m['w']),\n                    'height': int(m['h']),\n                })\n            elif m['type'] == 'original':\n                duration = float(m['d'])\n            elif m['type'] == 'youtube':\n                yt_id = m['link']\n                self.to_screen('Youtube video detected: %s' % yt_id)\n                return self.url_result(yt_id, 'Youtube', video_id=yt_id)\n            elif m['type'] in ('flv', 'mp4'):\n                vcodec = remove_start(m['vcodec'], 'ff')\n                acodec = remove_start(m['acodec'], 'ff')\n                vbr = int_or_none(m.get('vbr') or m.get('vbitrate'), 1000)\n                abr = int_or_none(m.get('abr') or m.get('abitrate'), 1000)\n                tbr = vbr + abr if vbr and abr else None\n                format_id = '%s-%sk-%s' % (vcodec, tbr, m['w'])\n                formats.append({\n                    'format_id': format_id,\n                    'url': m['link'],\n                    'vcodec': vcodec,\n                    'acodec': acodec,\n                    'abr': abr,\n                    'vbr': vbr,\n                    'tbr': tbr,\n                    'width': int_or_none(m.get('w')),\n                    'height': int_or_none(m.get('h')),\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': display_id,\n            'fullid': video_id,\n            'title': data['title'],\n            'formats': formats,\n            'uploader': data['channel_name'],\n            'timestamp': data['pubdate_epoch'],\n            'description': data.get('description'),\n            'thumbnails': thumbnails,\n            'duration': duration,\n        }\n", "comments": "#?ce/|blinkx:)(?P<id>[^?]+)'\n", "content": "from __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    remove_start,\n    int_or_none,\n)\n\n\nclass BlinkxIE(InfoExtractor):\n    _VALID_URL = r'(?:https?://(?:www\\.)blinkx\\.com/#?ce/|blinkx:)(?P<id>[^?]+)'\n    IE_NAME = 'blinkx'\n\n    _TEST = {\n        'url': 'http://www.blinkx.com/ce/Da0Gw3xc5ucpNduzLuDDlv4WC9PuI4fDi1-t6Y3LyfdY2SZS5Urbvn-UPJvrvbo8LTKTc67Wu2rPKSQDJyZeeORCR8bYkhs8lI7eqddznH2ofh5WEEdjYXnoRtj7ByQwt7atMErmXIeYKPsSDuMAAqJDlQZ-3Ff4HJVeH_s3Gh8oQ',\n        'md5': '337cf7a344663ec79bf93a526a2e06c7',\n        'info_dict': {\n            'id': 'Da0Gw3xc',\n            'ext': 'mp4',\n            'title': 'No Daily Show for John Oliver; HBO Show Renewed - IGN News',\n            'uploader': 'IGN News',\n            'upload_date': '20150217',\n            'timestamp': 1424215740,\n            'description': 'HBO has renewed Last Week Tonight With John Oliver for two more seasons.',\n            'duration': 47.743333,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        display_id = video_id[:8]\n\n        api_url = ('https://apib4.blinkx.com/api.php?action=play_video&' +\n                   'video=%s' % video_id)\n        data_json = self._download_webpage(api_url, display_id)\n        data = json.loads(data_json)['api']['results'][0]\n        duration = None\n        thumbnails = []\n        formats = []\n        for m in data['media']:\n            if m['type'] == 'jpg':\n                thumbnails.append({\n                    'url': m['link'],\n                    'width': int(m['w']),\n                    'height': int(m['h']),\n                })\n            elif m['type'] == 'original':\n                duration = float(m['d'])\n            elif m['type'] == 'youtube':\n                yt_id = m['link']\n                self.to_screen('Youtube video detected: %s' % yt_id)\n                return self.url_result(yt_id, 'Youtube', video_id=yt_id)\n            elif m['type'] in ('flv', 'mp4'):\n                vcodec = remove_start(m['vcodec'], 'ff')\n                acodec = remove_start(m['acodec'], 'ff')\n                vbr = int_or_none(m.get('vbr') or m.get('vbitrate'), 1000)\n                abr = int_or_none(m.get('abr') or m.get('abitrate'), 1000)\n                tbr = vbr + abr if vbr and abr else None\n                format_id = '%s-%sk-%s' % (vcodec, tbr, m['w'])\n                formats.append({\n                    'format_id': format_id,\n                    'url': m['link'],\n                    'vcodec': vcodec,\n                    'acodec': acodec,\n                    'abr': abr,\n                    'vbr': vbr,\n                    'tbr': tbr,\n                    'width': int_or_none(m.get('w')),\n                    'height': int_or_none(m.get('h')),\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': display_id,\n            'fullid': video_id,\n            'title': data['title'],\n            'formats': formats,\n            'uploader': data['channel_name'],\n            'timestamp': data['pubdate_epoch'],\n            'description': data.get('description'),\n            'thumbnails': thumbnails,\n            'duration': duration,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "blinkx.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/blinkx.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}