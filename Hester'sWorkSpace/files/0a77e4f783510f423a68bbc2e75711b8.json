{"author": "getsentry", "code": "from __future__ import absolute_import, print_function\n\nimport json\nimport sentry\n\nfrom mock import patch\nfrom uuid import uuid4\n\nfrom sentry import options\nfrom sentry.models import Broadcast\nfrom sentry.testutils import TestCase\nfrom sentry.tasks.beacon import BEACON_URL, send_beacon\n\n\nclass SendBeaconTest(TestCase):\n    @patch('sentry.tasks.beacon.get_all_package_versions')\n    @patch('sentry.tasks.beacon.safe_urlopen')\n    @patch('sentry.tasks.beacon.safe_urlread')\n    def test_simple(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):\n        mock_get_all_package_versions.return_value = {'foo': '1.0'}\n        safe_urlread.return_value = json.dumps({\n            'notices': [],\n            'version': {\n                'stable': '1.0.0'\n            },\n        })\n\n        assert options.set('system.admin-email', 'foo@example.com')\n        assert options.set('beacon.anonymous', False)\n        send_beacon()\n\n        install_id = options.get('sentry:install-id')\n        assert install_id and len(install_id) == 40\n\n        safe_urlopen.assert_called_once_with(\n            BEACON_URL,\n            json={\n                'install_id': install_id,\n                'version': sentry.get_version(),\n                'docker': sentry.is_docker(),\n                'data': {\n                    'organizations': 1,\n                    'users': 0,\n                    'projects': 1,\n                    'teams': 1,\n                    'events.24h': 0,\n                },\n                'anonymous': False,\n                'admin_email': 'foo@example.com',\n                'packages': mock_get_all_package_versions.return_value,\n            },\n            timeout=5\n        )\n        safe_urlread.assert_called_once_with(safe_urlopen.return_value)\n\n        assert options.get('sentry:latest_version') == '1.0.0'\n\n    @patch('sentry.tasks.beacon.get_all_package_versions')\n    @patch('sentry.tasks.beacon.safe_urlopen')\n    @patch('sentry.tasks.beacon.safe_urlread')\n    def test_anonymous(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):\n        mock_get_all_package_versions.return_value = {'foo': '1.0'}\n        safe_urlread.return_value = json.dumps({\n            'notices': [],\n            'version': {\n                'stable': '1.0.0'\n            },\n        })\n\n        assert options.set('system.admin-email', 'foo@example.com')\n        assert options.set('beacon.anonymous', True)\n        send_beacon()\n\n        install_id = options.get('sentry:install-id')\n        assert install_id and len(install_id) == 40\n\n        safe_urlopen.assert_called_once_with(\n            BEACON_URL,\n            json={\n                'install_id': install_id,\n                'version': sentry.get_version(),\n                'docker': sentry.is_docker(),\n                'data': {\n                    'organizations': 1,\n                    'users': 0,\n                    'projects': 1,\n                    'teams': 1,\n                    'events.24h': 0,\n                },\n                'anonymous': True,\n                'packages': mock_get_all_package_versions.return_value,\n            },\n            timeout=5\n        )\n        safe_urlread.assert_called_once_with(safe_urlopen.return_value)\n\n        assert options.get('sentry:latest_version') == '1.0.0'\n\n    @patch('sentry.tasks.beacon.get_all_package_versions')\n    @patch('sentry.tasks.beacon.safe_urlopen')\n    @patch('sentry.tasks.beacon.safe_urlread')\n    def test_with_broadcasts(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):\n        broadcast_id = uuid4().hex\n        mock_get_all_package_versions.return_value = {}\n        safe_urlread.return_value = json.dumps(\n            {\n                'notices': [\n                    {\n                        'id': broadcast_id,\n                        'title': 'Hello!',\n                        'message': 'Hello world',\n                        'active': True,\n                    }\n                ],\n                'version': {\n                    'stable': '1.0.0'\n                },\n            }\n        )\n\n        with self.settings():\n            send_beacon()\n\n        broadcast = Broadcast.objects.get(upstream_id=broadcast_id)\n\n        assert broadcast.title == 'Hello!'\n        assert broadcast.message == 'Hello world'\n        assert broadcast.is_active\n\n        safe_urlread.return_value = json.dumps({\n            'notices': [],\n            'version': {\n                'stable': '1.0.0'\n            },\n        })\n\n        with self.settings():\n            send_beacon()\n\n        \n        broadcast = Broadcast.objects.get(upstream_id=broadcast_id)\n\n        assert not broadcast.is_active\n", "comments": "  test explicit disable ", "content": "from __future__ import absolute_import, print_function\n\nimport json\nimport sentry\n\nfrom mock import patch\nfrom uuid import uuid4\n\nfrom sentry import options\nfrom sentry.models import Broadcast\nfrom sentry.testutils import TestCase\nfrom sentry.tasks.beacon import BEACON_URL, send_beacon\n\n\nclass SendBeaconTest(TestCase):\n    @patch('sentry.tasks.beacon.get_all_package_versions')\n    @patch('sentry.tasks.beacon.safe_urlopen')\n    @patch('sentry.tasks.beacon.safe_urlread')\n    def test_simple(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):\n        mock_get_all_package_versions.return_value = {'foo': '1.0'}\n        safe_urlread.return_value = json.dumps({\n            'notices': [],\n            'version': {\n                'stable': '1.0.0'\n            },\n        })\n\n        assert options.set('system.admin-email', 'foo@example.com')\n        assert options.set('beacon.anonymous', False)\n        send_beacon()\n\n        install_id = options.get('sentry:install-id')\n        assert install_id and len(install_id) == 40\n\n        safe_urlopen.assert_called_once_with(\n            BEACON_URL,\n            json={\n                'install_id': install_id,\n                'version': sentry.get_version(),\n                'docker': sentry.is_docker(),\n                'data': {\n                    'organizations': 1,\n                    'users': 0,\n                    'projects': 1,\n                    'teams': 1,\n                    'events.24h': 0,\n                },\n                'anonymous': False,\n                'admin_email': 'foo@example.com',\n                'packages': mock_get_all_package_versions.return_value,\n            },\n            timeout=5\n        )\n        safe_urlread.assert_called_once_with(safe_urlopen.return_value)\n\n        assert options.get('sentry:latest_version') == '1.0.0'\n\n    @patch('sentry.tasks.beacon.get_all_package_versions')\n    @patch('sentry.tasks.beacon.safe_urlopen')\n    @patch('sentry.tasks.beacon.safe_urlread')\n    def test_anonymous(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):\n        mock_get_all_package_versions.return_value = {'foo': '1.0'}\n        safe_urlread.return_value = json.dumps({\n            'notices': [],\n            'version': {\n                'stable': '1.0.0'\n            },\n        })\n\n        assert options.set('system.admin-email', 'foo@example.com')\n        assert options.set('beacon.anonymous', True)\n        send_beacon()\n\n        install_id = options.get('sentry:install-id')\n        assert install_id and len(install_id) == 40\n\n        safe_urlopen.assert_called_once_with(\n            BEACON_URL,\n            json={\n                'install_id': install_id,\n                'version': sentry.get_version(),\n                'docker': sentry.is_docker(),\n                'data': {\n                    'organizations': 1,\n                    'users': 0,\n                    'projects': 1,\n                    'teams': 1,\n                    'events.24h': 0,\n                },\n                'anonymous': True,\n                'packages': mock_get_all_package_versions.return_value,\n            },\n            timeout=5\n        )\n        safe_urlread.assert_called_once_with(safe_urlopen.return_value)\n\n        assert options.get('sentry:latest_version') == '1.0.0'\n\n    @patch('sentry.tasks.beacon.get_all_package_versions')\n    @patch('sentry.tasks.beacon.safe_urlopen')\n    @patch('sentry.tasks.beacon.safe_urlread')\n    def test_with_broadcasts(self, safe_urlread, safe_urlopen, mock_get_all_package_versions):\n        broadcast_id = uuid4().hex\n        mock_get_all_package_versions.return_value = {}\n        safe_urlread.return_value = json.dumps(\n            {\n                'notices': [\n                    {\n                        'id': broadcast_id,\n                        'title': 'Hello!',\n                        'message': 'Hello world',\n                        'active': True,\n                    }\n                ],\n                'version': {\n                    'stable': '1.0.0'\n                },\n            }\n        )\n\n        with self.settings():\n            send_beacon()\n\n        broadcast = Broadcast.objects.get(upstream_id=broadcast_id)\n\n        assert broadcast.title == 'Hello!'\n        assert broadcast.message == 'Hello world'\n        assert broadcast.is_active\n\n        safe_urlread.return_value = json.dumps({\n            'notices': [],\n            'version': {\n                'stable': '1.0.0'\n            },\n        })\n\n        with self.settings():\n            send_beacon()\n\n        # test explicit disable\n        broadcast = Broadcast.objects.get(upstream_id=broadcast_id)\n\n        assert not broadcast.is_active\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_beacon.py", "id": "0a77e4f783510f423a68bbc2e75711b8", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_beacon.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}