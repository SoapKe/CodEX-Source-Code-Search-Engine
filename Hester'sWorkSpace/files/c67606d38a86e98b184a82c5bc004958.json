{"author": "nvbn", "code": "import pytest\n\nfrom thefuck.types import Command\nfrom thefuck.rules.mercurial import (\n    extract_possibilities, match, get_new_command\n)\n\n\n@pytest.mark.parametrize('command', [\n    Command('hg base', (\n        \"hg: unknown command 'base'\"\n        '\\n(did you mean one of blame, phase, rebase?)'\n    )),\n    Command('hg branchch', (\n        \"hg: unknown command 'branchch'\"\n        '\\n(did you mean one of branch, branches?)'\n    )),\n    Command('hg vert', (\n        \"hg: unknown command 'vert'\"\n        '\\n(did you mean one of revert?)'\n    )),\n    Command('hg lgo -r tip', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n(did you mean one of log?)'\n    )),\n    Command('hg rerere', (\n        \"hg: unknown command 'rerere'\"\n        '\\n(did you mean one of revert?)'\n    )),\n    Command('hg re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )),\n    Command('hg re re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )),\n])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('hg', (\n        '\\nMercurial Distributed SCM\\n\\nbasic commands:'\n    )),\n    Command('hg asdf', (\n        \"hg: unknown command 'asdf'\"\n        '\\nMercurial Distributed SCM\\n\\nbasic commands:'\n    )),\n    Command('hg qwer', (\n        \"hg: unknown command 'qwer'\"\n        '\\nMercurial Distributed SCM\\n\\nbasic commands:'\n    )),\n    Command('hg me', (\n        \"\\nabort: no repository found in './thefuck' (.hg not found)!\"\n    )),\n    Command('hg reb', (\n        \"\\nabort: no repository found in './thefuck' (.hg not found)!\"\n    )),\n    Command('hg co', (\n        \"\\nabort: no repository found in './thefuck' (.hg not found)!\"\n    )),\n])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('command, possibilities', [\n    (Command('hg base', (\n        \"hg: unknown command 'base'\"\n        '\\n(did you mean one of blame, phase, rebase?)'\n    )), ['blame', 'phase', 'rebase']),\n    (Command('hg branchch', (\n        \"hg: unknown command 'branchch'\"\n        '\\n(did you mean one of branch, branches?)'\n    )), ['branch', 'branches']),\n    (Command('hg vert', (\n        \"hg: unknown command 'vert'\"\n        '\\n(did you mean one of revert?)'\n    )), ['revert']),\n    (Command('hg lgo -r tip', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n(did you mean one of log?)'\n    )), ['log']),\n    (Command('hg rerere', (\n        \"hg: unknown command 'rerere'\"\n        '\\n(did you mean one of revert?)'\n    )), ['revert']),\n    (Command('hg re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )), ['rebase', 'recover', 'remove', 'rename', 'resolve', 'revert']),\n    (Command('hg re re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )), ['rebase', 'recover', 'remove', 'rename', 'resolve', 'revert']),\n])\ndef test_extract_possibilities(command, possibilities):\n    assert extract_possibilities(command) == possibilities\n\n\n@pytest.mark.parametrize('command, new_command', [\n    (Command('hg base', (\n        \"hg: unknown command 'base'\"\n        '\\n(did you mean one of blame, phase, rebase?)'\n    )), 'hg rebase'),\n    (Command('hg branchch', (\n        \"hg: unknown command 'branchch'\"\n        '\\n(did you mean one of branch, branches?)'\n    )), 'hg branch'),\n    (Command('hg vert', (\n        \"hg: unknown command 'vert'\"\n        '\\n(did you mean one of revert?)'\n    )), 'hg revert'),\n    (Command('hg lgo -r tip', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n(did you mean one of log?)'\n    )), 'hg log -r tip'),\n    (Command('hg rerere', (\n        \"hg: unknown command 'rerere'\"\n        '\\n(did you mean one of revert?)'\n    )), 'hg revert'),\n    (Command('hg re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )), 'hg rebase'),\n    (Command('hg re re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )), 'hg rebase re'),\n])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command) == new_command\n", "comments": "", "content": "import pytest\n\nfrom thefuck.types import Command\nfrom thefuck.rules.mercurial import (\n    extract_possibilities, match, get_new_command\n)\n\n\n@pytest.mark.parametrize('command', [\n    Command('hg base', (\n        \"hg: unknown command 'base'\"\n        '\\n(did you mean one of blame, phase, rebase?)'\n    )),\n    Command('hg branchch', (\n        \"hg: unknown command 'branchch'\"\n        '\\n(did you mean one of branch, branches?)'\n    )),\n    Command('hg vert', (\n        \"hg: unknown command 'vert'\"\n        '\\n(did you mean one of revert?)'\n    )),\n    Command('hg lgo -r tip', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n(did you mean one of log?)'\n    )),\n    Command('hg rerere', (\n        \"hg: unknown command 'rerere'\"\n        '\\n(did you mean one of revert?)'\n    )),\n    Command('hg re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )),\n    Command('hg re re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )),\n])\ndef test_match(command):\n    assert match(command)\n\n\n@pytest.mark.parametrize('command', [\n    Command('hg', (\n        '\\nMercurial Distributed SCM\\n\\nbasic commands:'\n    )),\n    Command('hg asdf', (\n        \"hg: unknown command 'asdf'\"\n        '\\nMercurial Distributed SCM\\n\\nbasic commands:'\n    )),\n    Command('hg qwer', (\n        \"hg: unknown command 'qwer'\"\n        '\\nMercurial Distributed SCM\\n\\nbasic commands:'\n    )),\n    Command('hg me', (\n        \"\\nabort: no repository found in './thefuck' (.hg not found)!\"\n    )),\n    Command('hg reb', (\n        \"\\nabort: no repository found in './thefuck' (.hg not found)!\"\n    )),\n    Command('hg co', (\n        \"\\nabort: no repository found in './thefuck' (.hg not found)!\"\n    )),\n])\ndef test_not_match(command):\n    assert not match(command)\n\n\n@pytest.mark.parametrize('command, possibilities', [\n    (Command('hg base', (\n        \"hg: unknown command 'base'\"\n        '\\n(did you mean one of blame, phase, rebase?)'\n    )), ['blame', 'phase', 'rebase']),\n    (Command('hg branchch', (\n        \"hg: unknown command 'branchch'\"\n        '\\n(did you mean one of branch, branches?)'\n    )), ['branch', 'branches']),\n    (Command('hg vert', (\n        \"hg: unknown command 'vert'\"\n        '\\n(did you mean one of revert?)'\n    )), ['revert']),\n    (Command('hg lgo -r tip', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n(did you mean one of log?)'\n    )), ['log']),\n    (Command('hg rerere', (\n        \"hg: unknown command 'rerere'\"\n        '\\n(did you mean one of revert?)'\n    )), ['revert']),\n    (Command('hg re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )), ['rebase', 'recover', 'remove', 'rename', 'resolve', 'revert']),\n    (Command('hg re re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )), ['rebase', 'recover', 'remove', 'rename', 'resolve', 'revert']),\n])\ndef test_extract_possibilities(command, possibilities):\n    assert extract_possibilities(command) == possibilities\n\n\n@pytest.mark.parametrize('command, new_command', [\n    (Command('hg base', (\n        \"hg: unknown command 'base'\"\n        '\\n(did you mean one of blame, phase, rebase?)'\n    )), 'hg rebase'),\n    (Command('hg branchch', (\n        \"hg: unknown command 'branchch'\"\n        '\\n(did you mean one of branch, branches?)'\n    )), 'hg branch'),\n    (Command('hg vert', (\n        \"hg: unknown command 'vert'\"\n        '\\n(did you mean one of revert?)'\n    )), 'hg revert'),\n    (Command('hg lgo -r tip', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n(did you mean one of log?)'\n    )), 'hg log -r tip'),\n    (Command('hg rerere', (\n        \"hg: unknown command 'rerere'\"\n        '\\n(did you mean one of revert?)'\n    )), 'hg revert'),\n    (Command('hg re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )), 'hg rebase'),\n    (Command('hg re re', (\n        \"hg: command 're' is ambiguous:\"\n        '\\n    rebase recover remove rename resolve revert'\n    )), 'hg rebase re'),\n])\ndef test_get_new_command(command, new_command):\n    assert get_new_command(command) == new_command\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_mercurial.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_mercurial.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}