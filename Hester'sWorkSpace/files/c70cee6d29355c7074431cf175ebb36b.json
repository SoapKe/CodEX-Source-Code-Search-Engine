{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.interfaces.exception import (SingleException, Exception, slim_exception_data)\nfrom sentry.testutils import TestCase\nfrom sentry.stacktraces import normalize_in_app\n\n\nclass ExceptionTest(TestCase):\n    @fixture\n    def interface(self):\n        return Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': True,\n                            }]\n                        },\n                    }, {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': True,\n                            }]\n                        },\n                    }\n                ]\n            )\n        )\n\n    def test_path(self):\n        assert self.interface.get_path() == 'sentry.interfaces.Exception'\n\n    def test_args_as_keyword_args(self):\n        inst = Exception.to_python(\n            dict(values=[{\n                'type': 'ValueError',\n                'value': 'hello world',\n                'module': 'foo.bar',\n            }])\n        )\n        assert type(inst.values[0]) is SingleException\n        assert inst.values[0].type == 'ValueError'\n        assert inst.values[0].value == 'hello world'\n        assert inst.values[0].module == 'foo.bar'\n\n    def test_args_as_old_style(self):\n        inst = Exception.to_python(\n            {\n                'type': 'ValueError',\n                'value': 'hello world',\n                'module': 'foo.bar',\n            }\n        )\n        assert type(inst.values[0]) is SingleException\n        assert inst.values[0].type == 'ValueError'\n        assert inst.values[0].value == 'hello world'\n        assert inst.values[0].module == 'foo.bar'\n\n    def test_non_string_value_with_no_type(self):\n        inst = Exception.to_python(\n            {\n                'value': {'foo': 'bar'},\n            }\n        )\n        assert inst.values[0].value == '{\"foo\":\"bar\"}'\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_to_string(self):\n        result = self.interface.to_string(self.event)\n        assert result == \n\n    def test_get_hash(self):\n        inst = self.interface\n\n        all_values = sum([v.get_hash() for v in inst.values], [])\n        assert inst.get_hash() == all_values\n\n    def test_context_with_mixed_frames(self):\n        inst = Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': True,\n                            }]\n                        },\n                    }, {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': False,\n                            }]\n                        },\n                    }\n                ]\n            )\n        )\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert context['hasSystemFrames']\n\n    def test_context_with_symbols(self):\n        inst = Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.py',\n                                    'function': 'myfunc',\n                                    'symbol': 'Class.myfunc',\n                                    'lineno': 1,\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }\n                ]\n            )\n        )\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert context['values'][0]['stacktrace']['frames'][0]['symbol'] == 'Class.myfunc'\n\n    def test_context_with_only_system_frames(self):\n        inst = Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': False,\n                            }]\n                        },\n                    }, {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': False,\n                            }]\n                        },\n                    }\n                ]\n            )\n        )\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert not context['hasSystemFrames']\n\n    def test_context_with_only_app_frames(self):\n        values = [\n            {\n                'type': 'ValueError',\n                'value': 'hello world',\n                'module': 'foo.bar',\n                'stacktrace': {\n                    'frames': [{\n                        'filename': 'foo/baz.py',\n                        'lineno': 1,\n                        'in_app': True,\n                    }]\n                },\n            }, {\n                'type': 'ValueError',\n                'value': 'hello world',\n                'module': 'foo.bar',\n                'stacktrace': {\n                    'frames': [{\n                        'filename': 'foo/baz.py',\n                        'lineno': 1,\n                        'in_app': True,\n                    }]\n                },\n            }\n        ]\n        exc = dict(values=values)\n        normalize_in_app({'sentry.interfaces.Exception': exc})\n        inst = Exception.to_python(exc)\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert not context['hasSystemFrames']\n\n    def test_context_with_raw_stacks(self):\n        inst = Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foobar',\n                        'raw_stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': None,\n                                    'lineno': 1,\n                                    'function': '<redacted>',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.c',\n                                    'lineno': 1,\n                                    'function': 'main',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }\n                ]\n            )\n        )\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'\n        assert context['values'][0]['rawStacktrace']['frames'][0]['function'] == '<redacted>'\n\n\nclass SingleExceptionTest(TestCase):\n    @fixture\n    def interface(self):\n        return SingleException.to_python(\n            dict(\n                type='ValueError',\n                value='hello world',\n                module='foo.bar',\n            )\n        )\n\n    def test_serialize_behavior(self):\n        assert self.interface.to_json() == {\n            'type': self.interface.type,\n            'value': self.interface.value,\n            'module': self.interface.module,\n            'thread_id': None,\n            'mechanism': None,\n            'stacktrace': None,\n            'raw_stacktrace': None,\n        }\n\n    def test_get_hash(self):\n        assert self.interface.get_hash() == [\n            self.interface.type,\n            self.interface.value,\n        ]\n\n    def test_get_hash_without_type(self):\n        self.interface.type = None\n        assert self.interface.get_hash() == [\n            self.interface.value,\n        ]\n\n    def test_get_hash_without_value(self):\n        self.interface.value = None\n        assert self.interface.get_hash() == [\n            self.interface.type,\n        ]\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_only_requires_only_type_or_value(self):\n        SingleException.to_python(dict(\n            type='ValueError',\n        ))\n        SingleException.to_python(dict(\n            value='ValueError',\n        ))\n\n    def test_throws_away_empty_stacktrace(self):\n        result = SingleException.to_python(\n            dict(\n                type='ValueError',\n                value='foo',\n                stacktrace={'frames': []},\n            )\n        )\n        assert not result.stacktrace\n\n    def test_coerces_object_value_to_string(self):\n        result = SingleException.to_python({\n            'type': 'ValueError',\n            'value': {'unauthorized': True},\n        })\n        assert result.value == '{\"unauthorized\":true}'\n\n    def test_handles_type_in_value(self):\n        result = SingleException.to_python(dict(\n            value='ValueError: unauthorized',\n        ))\n        assert result.type == 'ValueError'\n        assert result.value == 'unauthorized'\n\n        result = SingleException.to_python(dict(\n            value='ValueError:unauthorized',\n        ))\n        assert result.type == 'ValueError'\n        assert result.value == 'unauthorized'\n\n    def test_value_serialization_idempotent(self):\n        result = SingleException.to_python({\n            'type': None,\n            'value': {'unauthorized': True},\n        }).to_json()\n\n        assert result['type'] is None\n        assert result['value'] == '{\"unauthorized\":true}'\n\n        \n        result = SingleException.to_python(result).to_json()\n        assert result['type'] is None\n        assert result['value'] == '{\"unauthorized\":true}'\n\n\nclass SlimExceptionDataTest(TestCase):\n    def test_under_max(self):\n        interface = Exception.to_python(\n            {\n                'values': [{\n                    'value': 'foo',\n                    'stacktrace': {\n                        'frames': [{\n                            'filename': 'foo'\n                        }]\n                    },\n                }]\n            }\n        )\n        slim_exception_data(interface)\n        assert len(interface.values[0].stacktrace.frames) == 1\n\n    def test_over_max(self):\n        values = []\n        for x in range(5):\n            exc = {'value': 'exc %d' % x, 'stacktrace': {'frames': []}}\n            values.append(exc)\n            for y in range(5):\n                exc['stacktrace']['frames'].append(\n                    {\n                        'filename': 'exc %d frame %d' % (x, y),\n                        'vars': {\n                            'foo': 'bar'\n                        },\n                        'context_line': 'b',\n                        'pre_context': ['a'],\n                        'post_context': ['c'],\n                    }\n                )\n\n        interface = Exception.to_python({'values': values})\n\n        \n        slim_exception_data(interface, 10)\n\n        assert len(interface.values) == 5\n        for e_num, value in enumerate(interface.values):\n            assert value.value == 'exc %d' % e_num\n            assert len(value.stacktrace.frames) == 5\n            for f_num, frame in enumerate(value.stacktrace.frames):\n                assert frame.filename == 'exc %d frame %d' % (e_num, f_num)\n                if e_num in (0, 4):\n                    assert frame.vars is not None\n                    assert frame.pre_context is not None\n                    assert frame.post_context is not None\n                else:\n                    assert frame.vars is None\n                    assert frame.pre_context is None\n                    assert frame.post_context is None\n", "comments": "   valueerror  hello world   file  foo baz py   line 1  valueerror  hello world   file  foo baz py   line 1           coding  utf 8        don split json serialized value colon    slim 10 frames make tests easier ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.interfaces.exception import (SingleException, Exception, slim_exception_data)\nfrom sentry.testutils import TestCase\nfrom sentry.stacktraces import normalize_in_app\n\n\nclass ExceptionTest(TestCase):\n    @fixture\n    def interface(self):\n        return Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': True,\n                            }]\n                        },\n                    }, {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': True,\n                            }]\n                        },\n                    }\n                ]\n            )\n        )\n\n    def test_path(self):\n        assert self.interface.get_path() == 'sentry.interfaces.Exception'\n\n    def test_args_as_keyword_args(self):\n        inst = Exception.to_python(\n            dict(values=[{\n                'type': 'ValueError',\n                'value': 'hello world',\n                'module': 'foo.bar',\n            }])\n        )\n        assert type(inst.values[0]) is SingleException\n        assert inst.values[0].type == 'ValueError'\n        assert inst.values[0].value == 'hello world'\n        assert inst.values[0].module == 'foo.bar'\n\n    def test_args_as_old_style(self):\n        inst = Exception.to_python(\n            {\n                'type': 'ValueError',\n                'value': 'hello world',\n                'module': 'foo.bar',\n            }\n        )\n        assert type(inst.values[0]) is SingleException\n        assert inst.values[0].type == 'ValueError'\n        assert inst.values[0].value == 'hello world'\n        assert inst.values[0].module == 'foo.bar'\n\n    def test_non_string_value_with_no_type(self):\n        inst = Exception.to_python(\n            {\n                'value': {'foo': 'bar'},\n            }\n        )\n        assert inst.values[0].value == '{\"foo\":\"bar\"}'\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_to_string(self):\n        result = self.interface.to_string(self.event)\n        assert result == \"\"\"ValueError: hello world\n  File \"foo/baz.py\", line 1\n\nValueError: hello world\n  File \"foo/baz.py\", line 1\"\"\"\n\n    def test_get_hash(self):\n        inst = self.interface\n\n        all_values = sum([v.get_hash() for v in inst.values], [])\n        assert inst.get_hash() == all_values\n\n    def test_context_with_mixed_frames(self):\n        inst = Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': True,\n                            }]\n                        },\n                    }, {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': False,\n                            }]\n                        },\n                    }\n                ]\n            )\n        )\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert context['hasSystemFrames']\n\n    def test_context_with_symbols(self):\n        inst = Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.py',\n                                    'function': 'myfunc',\n                                    'symbol': 'Class.myfunc',\n                                    'lineno': 1,\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }\n                ]\n            )\n        )\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert context['values'][0]['stacktrace']['frames'][0]['symbol'] == 'Class.myfunc'\n\n    def test_context_with_only_system_frames(self):\n        inst = Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': False,\n                            }]\n                        },\n                    }, {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foo.bar',\n                        'stacktrace': {\n                            'frames': [{\n                                'filename': 'foo/baz.py',\n                                'lineno': 1,\n                                'in_app': False,\n                            }]\n                        },\n                    }\n                ]\n            )\n        )\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert not context['hasSystemFrames']\n\n    def test_context_with_only_app_frames(self):\n        values = [\n            {\n                'type': 'ValueError',\n                'value': 'hello world',\n                'module': 'foo.bar',\n                'stacktrace': {\n                    'frames': [{\n                        'filename': 'foo/baz.py',\n                        'lineno': 1,\n                        'in_app': True,\n                    }]\n                },\n            }, {\n                'type': 'ValueError',\n                'value': 'hello world',\n                'module': 'foo.bar',\n                'stacktrace': {\n                    'frames': [{\n                        'filename': 'foo/baz.py',\n                        'lineno': 1,\n                        'in_app': True,\n                    }]\n                },\n            }\n        ]\n        exc = dict(values=values)\n        normalize_in_app({'sentry.interfaces.Exception': exc})\n        inst = Exception.to_python(exc)\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert not context['hasSystemFrames']\n\n    def test_context_with_raw_stacks(self):\n        inst = Exception.to_python(\n            dict(\n                values=[\n                    {\n                        'type': 'ValueError',\n                        'value': 'hello world',\n                        'module': 'foobar',\n                        'raw_stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': None,\n                                    'lineno': 1,\n                                    'function': '<redacted>',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.c',\n                                    'lineno': 1,\n                                    'function': 'main',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }\n                ]\n            )\n        )\n\n        self.create_event(data={\n            'sentry.interfaces.Exception': inst.to_json(),\n        })\n        context = inst.get_api_context()\n        assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'\n        assert context['values'][0]['rawStacktrace']['frames'][0]['function'] == '<redacted>'\n\n\nclass SingleExceptionTest(TestCase):\n    @fixture\n    def interface(self):\n        return SingleException.to_python(\n            dict(\n                type='ValueError',\n                value='hello world',\n                module='foo.bar',\n            )\n        )\n\n    def test_serialize_behavior(self):\n        assert self.interface.to_json() == {\n            'type': self.interface.type,\n            'value': self.interface.value,\n            'module': self.interface.module,\n            'thread_id': None,\n            'mechanism': None,\n            'stacktrace': None,\n            'raw_stacktrace': None,\n        }\n\n    def test_get_hash(self):\n        assert self.interface.get_hash() == [\n            self.interface.type,\n            self.interface.value,\n        ]\n\n    def test_get_hash_without_type(self):\n        self.interface.type = None\n        assert self.interface.get_hash() == [\n            self.interface.value,\n        ]\n\n    def test_get_hash_without_value(self):\n        self.interface.value = None\n        assert self.interface.get_hash() == [\n            self.interface.type,\n        ]\n\n    def test_serialize_unserialize_behavior(self):\n        result = type(self.interface).to_python(self.interface.to_json())\n        assert result.to_json() == self.interface.to_json()\n\n    def test_only_requires_only_type_or_value(self):\n        SingleException.to_python(dict(\n            type='ValueError',\n        ))\n        SingleException.to_python(dict(\n            value='ValueError',\n        ))\n\n    def test_throws_away_empty_stacktrace(self):\n        result = SingleException.to_python(\n            dict(\n                type='ValueError',\n                value='foo',\n                stacktrace={'frames': []},\n            )\n        )\n        assert not result.stacktrace\n\n    def test_coerces_object_value_to_string(self):\n        result = SingleException.to_python({\n            'type': 'ValueError',\n            'value': {'unauthorized': True},\n        })\n        assert result.value == '{\"unauthorized\":true}'\n\n    def test_handles_type_in_value(self):\n        result = SingleException.to_python(dict(\n            value='ValueError: unauthorized',\n        ))\n        assert result.type == 'ValueError'\n        assert result.value == 'unauthorized'\n\n        result = SingleException.to_python(dict(\n            value='ValueError:unauthorized',\n        ))\n        assert result.type == 'ValueError'\n        assert result.value == 'unauthorized'\n\n    def test_value_serialization_idempotent(self):\n        result = SingleException.to_python({\n            'type': None,\n            'value': {'unauthorized': True},\n        }).to_json()\n\n        assert result['type'] is None\n        assert result['value'] == '{\"unauthorized\":true}'\n\n        # Don't re-split a json-serialized value on the colon\n        result = SingleException.to_python(result).to_json()\n        assert result['type'] is None\n        assert result['value'] == '{\"unauthorized\":true}'\n\n\nclass SlimExceptionDataTest(TestCase):\n    def test_under_max(self):\n        interface = Exception.to_python(\n            {\n                'values': [{\n                    'value': 'foo',\n                    'stacktrace': {\n                        'frames': [{\n                            'filename': 'foo'\n                        }]\n                    },\n                }]\n            }\n        )\n        slim_exception_data(interface)\n        assert len(interface.values[0].stacktrace.frames) == 1\n\n    def test_over_max(self):\n        values = []\n        for x in range(5):\n            exc = {'value': 'exc %d' % x, 'stacktrace': {'frames': []}}\n            values.append(exc)\n            for y in range(5):\n                exc['stacktrace']['frames'].append(\n                    {\n                        'filename': 'exc %d frame %d' % (x, y),\n                        'vars': {\n                            'foo': 'bar'\n                        },\n                        'context_line': 'b',\n                        'pre_context': ['a'],\n                        'post_context': ['c'],\n                    }\n                )\n\n        interface = Exception.to_python({'values': values})\n\n        # slim to 10 frames to make tests easier\n        slim_exception_data(interface, 10)\n\n        assert len(interface.values) == 5\n        for e_num, value in enumerate(interface.values):\n            assert value.value == 'exc %d' % e_num\n            assert len(value.stacktrace.frames) == 5\n            for f_num, frame in enumerate(value.stacktrace.frames):\n                assert frame.filename == 'exc %d frame %d' % (e_num, f_num)\n                if e_num in (0, 4):\n                    assert frame.vars is not None\n                    assert frame.pre_context is not None\n                    assert frame.post_context is not None\n                else:\n                    assert frame.vars is None\n                    assert frame.pre_context is None\n                    assert frame.post_context is None\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_exception.py", "id": "c70cee6d29355c7074431cf175ebb36b", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_exception.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}