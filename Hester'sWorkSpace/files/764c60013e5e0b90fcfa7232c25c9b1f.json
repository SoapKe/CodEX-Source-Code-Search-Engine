{"author": "rg3", "code": "\nfrom __future__ import unicode_literals, division\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass CrackleIE(InfoExtractor):\n    _GEO_COUNTRIES = ['US']\n    _VALID_URL = r'(?:crackle:|https?://(?:(?:www|m)\\.)?crackle\\.com/(?:playlist/\\d+/|(?:[^/]+/)+))(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.crackle.com/comedians-in-cars-getting-coffee/2498934',\n        'info_dict': {\n            'id': '2498934',\n            'ext': 'mp4',\n            'title': 'Everybody Respects A Bloody Nose',\n            'description': 'Jerry is kaffeeklatsching in L.A. with funnyman J.B. Smoove (Saturday Night Live, Real Husbands of Hollywood). They\u2019re headed for brew at 10 Speed Coffee in a 1964 Studebaker Avanti.',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 906,\n            'series': 'Comedians In Cars Getting Coffee',\n            'season_number': 8,\n            'episode_number': 4,\n            'subtitles': {\n                'en-US': [\n                    {'ext': 'vtt'},\n                    {'ext': 'tt'},\n                ]\n            },\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }\n\n    _THUMBNAIL_RES = [\n        (120, 90),\n        (208, 156),\n        (220, 124),\n        (220, 220),\n        (240, 180),\n        (250, 141),\n        (315, 236),\n        (320, 180),\n        (360, 203),\n        (400, 300),\n        (421, 316),\n        (460, 330),\n        (460, 460),\n        (462, 260),\n        (480, 270),\n        (587, 330),\n        (640, 480),\n        (700, 330),\n        (700, 394),\n        (854, 480),\n        (1024, 1024),\n        (1920, 1080),\n    ]\n\n    \n    _MEDIA_FILE_SLOTS = {\n        'c544.flv': {\n            'width': 544,\n            'height': 306,\n        },\n        '360p.mp4': {\n            'width': 640,\n            'height': 360,\n        },\n        '480p.mp4': {\n            'width': 852,\n            'height': 478,\n        },\n        '480p_1mbps.mp4': {\n            'width': 852,\n            'height': 478,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        config_doc = self._download_xml(\n            'http://legacyweb-us.crackle.com/flash/QueryReferrer.ashx?site=16',\n            video_id, 'Downloading config')\n\n        item = self._download_xml(\n            'http://legacyweb-us.crackle.com/app/revamp/vidwallcache.aspx?flags=-1&fm=%s' % video_id,\n            video_id, headers=self.geo_verification_headers()).find('i')\n        title = item.attrib['t']\n\n        subtitles = {}\n        formats = self._extract_m3u8_formats(\n            'http://content.uplynk.com/ext/%s/%s.m3u8' % (config_doc.attrib['strUplynkOwnerId'], video_id),\n            video_id, 'mp4', m3u8_id='hls', fatal=None)\n        thumbnails = []\n        path = item.attrib.get('p')\n        if path:\n            for width, height in self._THUMBNAIL_RES:\n                res = '%dx%d' % (width, height)\n                thumbnails.append({\n                    'id': res,\n                    'url': 'http://images-us-am.crackle.com/%stnl_%s.jpg' % (path, res),\n                    'width': width,\n                    'height': height,\n                    'resolution': res,\n                })\n            http_base_url = 'http://ahttp.crackle.com/' + path\n            for mfs_path, mfs_info in self._MEDIA_FILE_SLOTS.items():\n                formats.append({\n                    'url': http_base_url + mfs_path,\n                    'format_id': 'http-' + mfs_path.split('.')[0],\n                    'width': mfs_info['width'],\n                    'height': mfs_info['height'],\n                })\n            for cc in item.findall('cc'):\n                locale = cc.attrib.get('l')\n                v = cc.attrib.get('v')\n                if locale and v:\n                    if locale not in subtitles:\n                        subtitles[locale] = []\n                    for url_ext, ext in (('vtt', 'vtt'), ('xml', 'tt')):\n                        subtitles.setdefault(locale, []).append({\n                            'url': '%s/%s%s_%s.%s' % (config_doc.attrib['strSubtitleServer'], path, locale, v, url_ext),\n                            'ext': ext,\n                        })\n        self._sort_formats(formats, ('width', 'height', 'tbr', 'format_id'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': item.attrib.get('d'),\n            'duration': int(item.attrib.get('r'), 16) / 1000 if item.attrib.get('r') else None,\n            'series': item.attrib.get('sn'),\n            'season_number': int_or_none(item.attrib.get('se')),\n            'episode_number': int_or_none(item.attrib.get('ep')),\n            'thumbnails': thumbnails,\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# m3u8 download\n# extracted from http://legacyweb-us.crackle.com/flash/ReferrerRedirect.ashx\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals, division\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\nclass CrackleIE(InfoExtractor):\n    _GEO_COUNTRIES = ['US']\n    _VALID_URL = r'(?:crackle:|https?://(?:(?:www|m)\\.)?crackle\\.com/(?:playlist/\\d+/|(?:[^/]+/)+))(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://www.crackle.com/comedians-in-cars-getting-coffee/2498934',\n        'info_dict': {\n            'id': '2498934',\n            'ext': 'mp4',\n            'title': 'Everybody Respects A Bloody Nose',\n            'description': 'Jerry is kaffeeklatsching in L.A. with funnyman J.B. Smoove (Saturday Night Live, Real Husbands of Hollywood). They\u2019re headed for brew at 10 Speed Coffee in a 1964 Studebaker Avanti.',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'duration': 906,\n            'series': 'Comedians In Cars Getting Coffee',\n            'season_number': 8,\n            'episode_number': 4,\n            'subtitles': {\n                'en-US': [\n                    {'ext': 'vtt'},\n                    {'ext': 'tt'},\n                ]\n            },\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        }\n    }\n\n    _THUMBNAIL_RES = [\n        (120, 90),\n        (208, 156),\n        (220, 124),\n        (220, 220),\n        (240, 180),\n        (250, 141),\n        (315, 236),\n        (320, 180),\n        (360, 203),\n        (400, 300),\n        (421, 316),\n        (460, 330),\n        (460, 460),\n        (462, 260),\n        (480, 270),\n        (587, 330),\n        (640, 480),\n        (700, 330),\n        (700, 394),\n        (854, 480),\n        (1024, 1024),\n        (1920, 1080),\n    ]\n\n    # extracted from http://legacyweb-us.crackle.com/flash/ReferrerRedirect.ashx\n    _MEDIA_FILE_SLOTS = {\n        'c544.flv': {\n            'width': 544,\n            'height': 306,\n        },\n        '360p.mp4': {\n            'width': 640,\n            'height': 360,\n        },\n        '480p.mp4': {\n            'width': 852,\n            'height': 478,\n        },\n        '480p_1mbps.mp4': {\n            'width': 852,\n            'height': 478,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        config_doc = self._download_xml(\n            'http://legacyweb-us.crackle.com/flash/QueryReferrer.ashx?site=16',\n            video_id, 'Downloading config')\n\n        item = self._download_xml(\n            'http://legacyweb-us.crackle.com/app/revamp/vidwallcache.aspx?flags=-1&fm=%s' % video_id,\n            video_id, headers=self.geo_verification_headers()).find('i')\n        title = item.attrib['t']\n\n        subtitles = {}\n        formats = self._extract_m3u8_formats(\n            'http://content.uplynk.com/ext/%s/%s.m3u8' % (config_doc.attrib['strUplynkOwnerId'], video_id),\n            video_id, 'mp4', m3u8_id='hls', fatal=None)\n        thumbnails = []\n        path = item.attrib.get('p')\n        if path:\n            for width, height in self._THUMBNAIL_RES:\n                res = '%dx%d' % (width, height)\n                thumbnails.append({\n                    'id': res,\n                    'url': 'http://images-us-am.crackle.com/%stnl_%s.jpg' % (path, res),\n                    'width': width,\n                    'height': height,\n                    'resolution': res,\n                })\n            http_base_url = 'http://ahttp.crackle.com/' + path\n            for mfs_path, mfs_info in self._MEDIA_FILE_SLOTS.items():\n                formats.append({\n                    'url': http_base_url + mfs_path,\n                    'format_id': 'http-' + mfs_path.split('.')[0],\n                    'width': mfs_info['width'],\n                    'height': mfs_info['height'],\n                })\n            for cc in item.findall('cc'):\n                locale = cc.attrib.get('l')\n                v = cc.attrib.get('v')\n                if locale and v:\n                    if locale not in subtitles:\n                        subtitles[locale] = []\n                    for url_ext, ext in (('vtt', 'vtt'), ('xml', 'tt')):\n                        subtitles.setdefault(locale, []).append({\n                            'url': '%s/%s%s_%s.%s' % (config_doc.attrib['strSubtitleServer'], path, locale, v, url_ext),\n                            'ext': ext,\n                        })\n        self._sort_formats(formats, ('width', 'height', 'tbr', 'format_id'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': item.attrib.get('d'),\n            'duration': int(item.attrib.get('r'), 16) / 1000 if item.attrib.get('r') else None,\n            'series': item.attrib.get('sn'),\n            'season_number': int_or_none(item.attrib.get('se')),\n            'episode_number': int_or_none(item.attrib.get('ep')),\n            'thumbnails': thumbnails,\n            'subtitles': subtitles,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "crackle.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/crackle.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}