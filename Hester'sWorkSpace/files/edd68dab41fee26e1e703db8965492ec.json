{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, models\nfrom odoo.tools import float_round\n\n\nclass report_product_pricelist(models.AbstractModel):\n    _name = 'report.product.report_pricelist'\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        data = data if data is not None else {}\n        pricelist = self.env['product.pricelist'].browse(data.get('form', {}).get('price_list', False))\n        products = self.env['product.product'].browse(data.get('ids', data.get('active_ids')))\n        quantities = self._get_quantity(data)\n        return {\n            'doc_ids': data.get('ids', data.get('active_ids')),\n            'doc_model': 'hr.contribution.register',\n            'docs': products,\n            'data': dict(\n                data,\n                pricelist=pricelist,\n                quantities=quantities,\n                categories_data=self._get_categories(pricelist, products, quantities)\n            ),\n        }\n\n    def _get_quantity(self, data):\n        return sorted([data['form'][key] for key in data['form'] if key.startswith('qty') and data['form'][key]])\n\n    def _get_categories(self, pricelist, products, quantities):\n        categ_data = []\n        categories = self.env['product.category']\n        for product in products:\n            categories |= product.categ_id\n\n        for category in categories:\n            categ_products = products.filtered(lambda product: product.categ_id == category)\n            prices = {}\n            for categ_product in categ_products:\n                prices[categ_product.id] = dict.fromkeys(quantities, 0.0)\n                for quantity in quantities:\n                    prices[categ_product.id][quantity] = self._get_price(pricelist, categ_product, quantity)\n            categ_data.append({\n                'category': category,\n                'products': categ_products,\n                'prices': prices,\n            })\n        return categ_data\n\n    def _get_price(self, pricelist, product, qty):\n        sale_price_digits = self.env['decimal.precision'].precision_get('Product Price')\n        price = pricelist.get_product_price(product, qty, False)\n        if not price:\n            price = product.list_price\n        return float_round(price, precision_digits=sale_price_digits)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, models\nfrom odoo.tools import float_round\n\n\nclass report_product_pricelist(models.AbstractModel):\n    _name = 'report.product.report_pricelist'\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        data = data if data is not None else {}\n        pricelist = self.env['product.pricelist'].browse(data.get('form', {}).get('price_list', False))\n        products = self.env['product.product'].browse(data.get('ids', data.get('active_ids')))\n        quantities = self._get_quantity(data)\n        return {\n            'doc_ids': data.get('ids', data.get('active_ids')),\n            'doc_model': 'hr.contribution.register',\n            'docs': products,\n            'data': dict(\n                data,\n                pricelist=pricelist,\n                quantities=quantities,\n                categories_data=self._get_categories(pricelist, products, quantities)\n            ),\n        }\n\n    def _get_quantity(self, data):\n        return sorted([data['form'][key] for key in data['form'] if key.startswith('qty') and data['form'][key]])\n\n    def _get_categories(self, pricelist, products, quantities):\n        categ_data = []\n        categories = self.env['product.category']\n        for product in products:\n            categories |= product.categ_id\n\n        for category in categories:\n            categ_products = products.filtered(lambda product: product.categ_id == category)\n            prices = {}\n            for categ_product in categ_products:\n                prices[categ_product.id] = dict.fromkeys(quantities, 0.0)\n                for quantity in quantities:\n                    prices[categ_product.id][quantity] = self._get_price(pricelist, categ_product, quantity)\n            categ_data.append({\n                'category': category,\n                'products': categ_products,\n                'prices': prices,\n            })\n        return categ_data\n\n    def _get_price(self, pricelist, product, qty):\n        sale_price_digits = self.env['decimal.precision'].precision_get('Product Price')\n        price = pricelist.get_product_price(product, qty, False)\n        if not price:\n            price = product.list_price\n        return float_round(price, precision_digits=sale_price_digits)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "product_pricelist.py", "id": "edd68dab41fee26e1e703db8965492ec", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/product/report/product_pricelist.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}