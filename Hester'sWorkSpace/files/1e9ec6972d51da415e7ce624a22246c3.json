{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass FreshLiveIE(InfoExtractor):\n    _VALID_URL = r'https?://freshlive\\.tv/[^/]+/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://freshlive.tv/satotv/74712',\n        'md5': '9f0cf5516979c4454ce982df3d97f352',\n        'info_dict': {\n            'id': '74712',\n            'ext': 'mp4',\n            'title': '\u30c6\u30b9\u30c8',\n            'description': '\u30c6\u30b9\u30c8',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1511,\n            'timestamp': 1483619655,\n            'upload_date': '20170105',\n            'uploader': '\u30b5\u30c8TV',\n            'uploader_id': 'satotv',\n            'view_count': int,\n            'comment_count': int,\n            'is_live': False,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        options = self._parse_json(\n            self._search_regex(\n                r'window\\.__CONTEXT__\\s*=\\s*({.+?});\\s*</script>',\n                webpage, 'initial context'),\n            video_id)\n\n        info = options['context']['dispatcher']['stores']['ProgramStore']['programs'][video_id]\n\n        title = info['title']\n\n        if info.get('status') == 'upcoming':\n            raise ExtractorError('Stream %s is upcoming' % video_id, expected=True)\n\n        stream_url = info.get('liveStreamUrl') or info['archiveStreamUrl']\n\n        is_live = info.get('liveStreamUrl') is not None\n\n        formats = self._extract_m3u8_formats(\n            stream_url, video_id, 'mp4',\n            'm3u8_native', m3u8_id='hls')\n\n        if is_live:\n            title = self._live_title(title)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': info.get('description'),\n            'thumbnail': info.get('thumbnailUrl'),\n            'duration': int_or_none(info.get('airTime')),\n            'timestamp': unified_timestamp(info.get('createdAt')),\n            'uploader': try_get(\n                info, lambda x: x['channel']['title'], compat_str),\n            'uploader_id': try_get(\n                info, lambda x: x['channel']['code'], compat_str),\n            'uploader_url': try_get(\n                info, lambda x: x['channel']['permalink'], compat_str),\n            'view_count': int_or_none(info.get('viewCount')),\n            'comment_count': int_or_none(info.get('commentCount')),\n            'tags': info.get('tags', []),\n            'is_live': is_live,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass FreshLiveIE(InfoExtractor):\n    _VALID_URL = r'https?://freshlive\\.tv/[^/]+/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://freshlive.tv/satotv/74712',\n        'md5': '9f0cf5516979c4454ce982df3d97f352',\n        'info_dict': {\n            'id': '74712',\n            'ext': 'mp4',\n            'title': '\u30c6\u30b9\u30c8',\n            'description': '\u30c6\u30b9\u30c8',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1511,\n            'timestamp': 1483619655,\n            'upload_date': '20170105',\n            'uploader': '\u30b5\u30c8TV',\n            'uploader_id': 'satotv',\n            'view_count': int,\n            'comment_count': int,\n            'is_live': False,\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        options = self._parse_json(\n            self._search_regex(\n                r'window\\.__CONTEXT__\\s*=\\s*({.+?});\\s*</script>',\n                webpage, 'initial context'),\n            video_id)\n\n        info = options['context']['dispatcher']['stores']['ProgramStore']['programs'][video_id]\n\n        title = info['title']\n\n        if info.get('status') == 'upcoming':\n            raise ExtractorError('Stream %s is upcoming' % video_id, expected=True)\n\n        stream_url = info.get('liveStreamUrl') or info['archiveStreamUrl']\n\n        is_live = info.get('liveStreamUrl') is not None\n\n        formats = self._extract_m3u8_formats(\n            stream_url, video_id, 'mp4',\n            'm3u8_native', m3u8_id='hls')\n\n        if is_live:\n            title = self._live_title(title)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': info.get('description'),\n            'thumbnail': info.get('thumbnailUrl'),\n            'duration': int_or_none(info.get('airTime')),\n            'timestamp': unified_timestamp(info.get('createdAt')),\n            'uploader': try_get(\n                info, lambda x: x['channel']['title'], compat_str),\n            'uploader_id': try_get(\n                info, lambda x: x['channel']['code'], compat_str),\n            'uploader_url': try_get(\n                info, lambda x: x['channel']['permalink'], compat_str),\n            'view_count': int_or_none(info.get('viewCount')),\n            'comment_count': int_or_none(info.get('commentCount')),\n            'tags': info.get('tags', []),\n            'is_live': is_live,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "freshlive.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/freshlive.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}