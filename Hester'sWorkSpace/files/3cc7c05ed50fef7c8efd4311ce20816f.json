{"author": "tornadoweb", "code": "\n\n Copyright 2009 Facebook\n\n Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n not use this file except in compliance with the License. You may obtain\n a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n License for the specific language governing permissions and limitations\n under the License.\n\nimport os.path\nimport tornado.auth\nimport tornado.escape\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\n\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"facebook_api_key\", help=\"your Facebook application API key\", type=str)\ndefine(\"facebook_secret\", help=\"your Facebook application secret\", type=str)\n\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/\", MainHandler),\n            (r\"/auth/login\", AuthLoginHandler),\n            (r\"/auth/logout\", AuthLogoutHandler),\n        ]\n        settings = dict(\n            cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",\n            login_url=\"/auth/login\",\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\"),\n            static_path=os.path.join(os.path.dirname(__file__), \"static\"),\n            xsrf_cookies=True,\n            facebook_api_key=options.facebook_api_key,\n            facebook_secret=options.facebook_secret,\n            ui_modules={\"Post\": PostModule},\n            debug=True,\n            autoescape=None,\n        )\n        tornado.web.Application.__init__(self, handlers, **settings)\n\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def get_current_user(self):\n        user_json = self.get_secure_cookie(\"fbdemo_user\")\n        if not user_json:\n            return None\n        return tornado.escape.json_decode(user_json)\n\n\nclass MainHandler(BaseHandler, tornado.auth.FacebookGraphMixin):\n    @tornado.web.authenticated\n    @tornado.web.asynchronous\n    def get(self):\n        self.facebook_request(\"/me/home\", self._on_stream,\n                              access_token=self.current_user[\"access_token\"])\n\n    def _on_stream(self, stream):\n        if stream is None:\n             Session may have expired\n            self.redirect(\"/auth/login\")\n            return\n        self.render(\"stream.html\", stream=stream)\n\n\nclass AuthLoginHandler(BaseHandler, tornado.auth.FacebookGraphMixin):\n    @tornado.web.asynchronous\n    def get(self):\n        my_url = (self.request.protocol + \"://\" + self.request.host +\n                  \"/auth/login?next=\" +\n                  tornado.escape.url_escape(self.get_argument(\"next\", \"/\")))\n        if self.get_argument(\"code\", False):\n            self.get_authenticated_user(\n                redirect_uri=my_url,\n                client_id=self.settings[\"facebook_api_key\"],\n                client_secret=self.settings[\"facebook_secret\"],\n                code=self.get_argument(\"code\"),\n                callback=self._on_auth)\n            return\n        self.authorize_redirect(redirect_uri=my_url,\n                                client_id=self.settings[\"facebook_api_key\"],\n                                extra_params={\"scope\": \"user_posts\"})\n\n    def _on_auth(self, user):\n        if not user:\n            raise tornado.web.HTTPError(500, \"Facebook auth failed\")\n        self.set_secure_cookie(\"fbdemo_user\", tornado.escape.json_encode(user))\n        self.redirect(self.get_argument(\"next\", \"/\"))\n\n\nclass AuthLogoutHandler(BaseHandler, tornado.auth.FacebookGraphMixin):\n    def get(self):\n        self.clear_cookie(\"fbdemo_user\")\n        self.redirect(self.get_argument(\"next\", \"/\"))\n\n\nclass PostModule(tornado.web.UIModule):\n    def render(self, post):\n        return self.render_string(\"modules/post.html\", post=post)\n\n\ndef main():\n    tornado.options.parse_command_line()\n    if not (options.facebook_api_key and options.facebook_secret):\n        print(\"--facebook_api_key and --facebook_secret must be set\")\n        return\n    http_server = tornado.httpserver.HTTPServer(Application())\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.current().start()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "   usr bin env python       copyright 2009 facebook       licensed apache license  version 2 0 (the  license )  may    use file except compliance license  you may obtain    copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis  without    warranties or conditions of any kind  either express implied  see    license specific language governing permissions limitations    license     session may expired ", "content": "#!/usr/bin/env python\n#\n# Copyright 2009 Facebook\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\nimport os.path\nimport tornado.auth\nimport tornado.escape\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\n\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"facebook_api_key\", help=\"your Facebook application API key\", type=str)\ndefine(\"facebook_secret\", help=\"your Facebook application secret\", type=str)\n\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/\", MainHandler),\n            (r\"/auth/login\", AuthLoginHandler),\n            (r\"/auth/logout\", AuthLogoutHandler),\n        ]\n        settings = dict(\n            cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",\n            login_url=\"/auth/login\",\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\"),\n            static_path=os.path.join(os.path.dirname(__file__), \"static\"),\n            xsrf_cookies=True,\n            facebook_api_key=options.facebook_api_key,\n            facebook_secret=options.facebook_secret,\n            ui_modules={\"Post\": PostModule},\n            debug=True,\n            autoescape=None,\n        )\n        tornado.web.Application.__init__(self, handlers, **settings)\n\n\nclass BaseHandler(tornado.web.RequestHandler):\n    def get_current_user(self):\n        user_json = self.get_secure_cookie(\"fbdemo_user\")\n        if not user_json:\n            return None\n        return tornado.escape.json_decode(user_json)\n\n\nclass MainHandler(BaseHandler, tornado.auth.FacebookGraphMixin):\n    @tornado.web.authenticated\n    @tornado.web.asynchronous\n    def get(self):\n        self.facebook_request(\"/me/home\", self._on_stream,\n                              access_token=self.current_user[\"access_token\"])\n\n    def _on_stream(self, stream):\n        if stream is None:\n            # Session may have expired\n            self.redirect(\"/auth/login\")\n            return\n        self.render(\"stream.html\", stream=stream)\n\n\nclass AuthLoginHandler(BaseHandler, tornado.auth.FacebookGraphMixin):\n    @tornado.web.asynchronous\n    def get(self):\n        my_url = (self.request.protocol + \"://\" + self.request.host +\n                  \"/auth/login?next=\" +\n                  tornado.escape.url_escape(self.get_argument(\"next\", \"/\")))\n        if self.get_argument(\"code\", False):\n            self.get_authenticated_user(\n                redirect_uri=my_url,\n                client_id=self.settings[\"facebook_api_key\"],\n                client_secret=self.settings[\"facebook_secret\"],\n                code=self.get_argument(\"code\"),\n                callback=self._on_auth)\n            return\n        self.authorize_redirect(redirect_uri=my_url,\n                                client_id=self.settings[\"facebook_api_key\"],\n                                extra_params={\"scope\": \"user_posts\"})\n\n    def _on_auth(self, user):\n        if not user:\n            raise tornado.web.HTTPError(500, \"Facebook auth failed\")\n        self.set_secure_cookie(\"fbdemo_user\", tornado.escape.json_encode(user))\n        self.redirect(self.get_argument(\"next\", \"/\"))\n\n\nclass AuthLogoutHandler(BaseHandler, tornado.auth.FacebookGraphMixin):\n    def get(self):\n        self.clear_cookie(\"fbdemo_user\")\n        self.redirect(self.get_argument(\"next\", \"/\"))\n\n\nclass PostModule(tornado.web.UIModule):\n    def render(self, post):\n        return self.render_string(\"modules/post.html\", post=post)\n\n\ndef main():\n    tornado.options.parse_command_line()\n    if not (options.facebook_api_key and options.facebook_secret):\n        print(\"--facebook_api_key and --facebook_secret must be set\")\n        return\n    http_server = tornado.httpserver.HTTPServer(Application())\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.current().start()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "facebook.py", "id": "3cc7c05ed50fef7c8efd4311ce20816f", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/test/tornadoweb-tornado/tornadoweb-tornado-62e43f6/demos/facebook/facebook.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:11:42Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}