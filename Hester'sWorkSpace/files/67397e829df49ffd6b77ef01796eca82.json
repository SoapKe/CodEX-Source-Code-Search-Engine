{"author": "sympy", "code": "\"\"\" This module contains the Mathieu functions.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nfrom sympy.core import S\nfrom sympy.core.function import Function, ArgumentIndexError\nfrom sympy.functions.elementary.miscellaneous import sqrt\nfrom sympy.functions.elementary.trigonometric import sin, cos\n\n\nclass MathieuBase(Function):\n    \"\"\"\n    Abstract base class for Mathieu functions.\n\n    This class is meant to reduce code duplication.\n    \"\"\"\n\n    unbranched = True\n\n    def _eval_conjugate(self):\n        a, q, z = self.args\n        return self.func(a.conjugate(), q.conjugate(), z.conjugate())\n\n\nclass mathieus(MathieuBase):\n    r\"\"\"\n    The Mathieu Sine function `S(a,q,z)`. This function is one solution\n    of the Mathieu differential equation:\n\n    .. math ::\n        y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0\n\n    The other solution is the Mathieu Cosine function.\n\n    Examples\n    ========\n\n    >>> from sympy import diff, mathieus\n    >>> from sympy.abc import a, q, z\n\n    >>> mathieus(a, q, z)\n    mathieus(a, q, z)\n\n    >>> mathieus(a, 0, z)\n    sin(sqrt(a)*z)\n\n    >>> diff(mathieus(a, q, z), z)\n    mathieusprime(a, q, z)\n\n    See Also\n    ========\n\n    mathieuc: Mathieu cosine function.\n    mathieusprime: Derivative of Mathieu sine function.\n    mathieucprime: Derivative of Mathieu cosine function.\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Mathieu_function\n    .. [2] http://dlmf.nist.gov/28\n    .. [3] http://mathworld.wolfram.com/MathieuBase.html\n    .. [4] http://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuS/\n    \"\"\"\n\n    def fdiff(self, argindex=1):\n        if argindex == 3:\n            a, q, z = self.args\n            return mathieusprime(a, q, z)\n        else:\n            raise ArgumentIndexError(self, argindex)\n\n    @classmethod\n    def eval(cls, a, q, z):\n        if q.is_Number and q is S.Zero:\n            return sin(sqrt(a)*z)\n        \n        if z.could_extract_minus_sign():\n            return -cls(a, q, -z)\n\n\nclass mathieuc(MathieuBase):\n    r\"\"\"\n    The Mathieu Cosine function `C(a,q,z)`. This function is one solution\n    of the Mathieu differential equation:\n\n    .. math ::\n        y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0\n\n    The other solution is the Mathieu Sine function.\n\n    Examples\n    ========\n\n    >>> from sympy import diff, mathieuc\n    >>> from sympy.abc import a, q, z\n\n    >>> mathieuc(a, q, z)\n    mathieuc(a, q, z)\n\n    >>> mathieuc(a, 0, z)\n    cos(sqrt(a)*z)\n\n    >>> diff(mathieuc(a, q, z), z)\n    mathieucprime(a, q, z)\n\n    See Also\n    ========\n\n    mathieus: Mathieu sine function\n    mathieusprime: Derivative of Mathieu sine function\n    mathieucprime: Derivative of Mathieu cosine function\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Mathieu_function\n    .. [2] http://dlmf.nist.gov/28\n    .. [3] http://mathworld.wolfram.com/MathieuBase.html\n    .. [4] http://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuC/\n    \"\"\"\n\n    def fdiff(self, argindex=1):\n        if argindex == 3:\n            a, q, z = self.args\n            return mathieucprime(a, q, z)\n        else:\n            raise ArgumentIndexError(self, argindex)\n\n    @classmethod\n    def eval(cls, a, q, z):\n        if q.is_Number and q is S.Zero:\n            return cos(sqrt(a)*z)\n        \n        if z.could_extract_minus_sign():\n            return cls(a, q, -z)\n\n\nclass mathieusprime(MathieuBase):\n    r\"\"\"\n    The derivative `S^{\\prime}(a,q,z)` of the Mathieu Sine function.\n    This function is one solution of the Mathieu differential equation:\n\n    .. math ::\n        y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0\n\n    The other solution is the Mathieu Cosine function.\n\n    Examples\n    ========\n\n    >>> from sympy import diff, mathieusprime\n    >>> from sympy.abc import a, q, z\n\n    >>> mathieusprime(a, q, z)\n    mathieusprime(a, q, z)\n\n    >>> mathieusprime(a, 0, z)\n    sqrt(a)*cos(sqrt(a)*z)\n\n    >>> diff(mathieusprime(a, q, z), z)\n    (-a + 2*q*cos(2*z))*mathieus(a, q, z)\n\n    See Also\n    ========\n\n    mathieus: Mathieu sine function\n    mathieuc: Mathieu cosine function\n    mathieucprime: Derivative of Mathieu cosine function\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Mathieu_function\n    .. [2] http://dlmf.nist.gov/28\n    .. [3] http://mathworld.wolfram.com/MathieuBase.html\n    .. [4] http://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuSPrime/\n    \"\"\"\n\n    def fdiff(self, argindex=1):\n        if argindex == 3:\n            a, q, z = self.args\n            return (2*q*cos(2*z) - a)*mathieus(a, q, z)\n        else:\n            raise ArgumentIndexError(self, argindex)\n\n    @classmethod\n    def eval(cls, a, q, z):\n        if q.is_Number and q is S.Zero:\n            return sqrt(a)*cos(sqrt(a)*z)\n        \n        if z.could_extract_minus_sign():\n            return cls(a, q, -z)\n\n\nclass mathieucprime(MathieuBase):\n    r\"\"\"\n    The derivative `C^{\\prime}(a,q,z)` of the Mathieu Cosine function.\n    This function is one solution of the Mathieu differential equation:\n\n    .. math ::\n        y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0\n\n    The other solution is the Mathieu Sine function.\n\n    Examples\n    ========\n\n    >>> from sympy import diff, mathieucprime\n    >>> from sympy.abc import a, q, z\n\n    >>> mathieucprime(a, q, z)\n    mathieucprime(a, q, z)\n\n    >>> mathieucprime(a, 0, z)\n    -sqrt(a)*sin(sqrt(a)*z)\n\n    >>> diff(mathieucprime(a, q, z), z)\n    (-a + 2*q*cos(2*z))*mathieuc(a, q, z)\n\n    See Also\n    ========\n\n    mathieus: Mathieu sine function\n    mathieuc: Mathieu cosine function\n    mathieusprime: Derivative of Mathieu sine function\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Mathieu_function\n    .. [2] http://dlmf.nist.gov/28\n    .. [3] http://mathworld.wolfram.com/MathieuBase.html\n    .. [4] http://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuCPrime/\n    \"\"\"\n\n    def fdiff(self, argindex=1):\n        if argindex == 3:\n            a, q, z = self.args\n            return (2*q*cos(2*z) - a)*mathieuc(a, q, z)\n        else:\n            raise ArgumentIndexError(self, argindex)\n\n    @classmethod\n    def eval(cls, a, q, z):\n        if q.is_Number and q is S.Zero:\n            return -sqrt(a)*sin(sqrt(a)*z)\n        \n        if z.could_extract_minus_sign():\n            return -cls(a, q, -z)\n", "comments": "    this module contains mathieu functions         future   import print function  division  sympy core import s sympy core function import function  argumentindexerror sympy functions elementary miscellaneous import sqrt sympy functions elementary trigonometric import sin  cos   class mathieubase(function)              abstract base class mathieu functions       this class meant reduce code duplication               unbranched   true      def  eval conjugate(self)           q  z   self args         return self func(a conjugate()  q conjugate()  z conjugate())   class mathieus(mathieubase)      r        the mathieu sine function  s(a q z)   this function one solution     mathieu differential equation          math            y(x)   prime prime    (a   2 q  cos(2 x)) y(x)   0      the solution mathieu cosine function       examples                       sympy import diff  mathieus         sympy abc import  q  z          mathieus(a  q  z)     mathieus(a  q  z)          mathieus(a  0  z)     sin(sqrt(a) z)          diff(mathieus(a  q  z)  z)     mathieusprime(a  q  z)      see also                   mathieuc  mathieu cosine function      mathieusprime  derivative mathieu sine function      mathieucprime  derivative mathieu cosine function       references                         1  http   en wikipedia org wiki mathieu function         2  http   dlmf nist gov 28         3  http   mathworld wolfram com mathieubase html         4  http   functions wolfram com mathieuandspheroidalfunctions mathieus               def fdiff(self  argindex 1)          argindex    3               q  z   self args             return mathieusprime(a  q  z)         else              raise argumentindexerror(self  argindex)       classmethod     def eval(cls   q  z)          q number q s zero              return sin(sqrt(a) z)           try pull factors  1         z could extract minus sign()              return  cls(a  q   z)   class mathieuc(mathieubase)      r        the mathieu cosine function  c(a q z)   this function one solution     mathieu differential equation          math            y(x)   prime prime    (a   2 q  cos(2 x)) y(x)   0      the solution mathieu sine function       examples                       sympy import diff  mathieuc         sympy abc import  q  z          mathieuc(a  q  z)     mathieuc(a  q  z)          mathieuc(a  0  z)     cos(sqrt(a) z)          diff(mathieuc(a  q  z)  z)     mathieucprime(a  q  z)      see also                   mathieus  mathieu sine function     mathieusprime  derivative mathieu sine function     mathieucprime  derivative mathieu cosine function      references                         1  http   en wikipedia org wiki mathieu function         2  http   dlmf nist gov 28         3  http   mathworld wolfram com mathieubase html         4  http   functions wolfram com mathieuandspheroidalfunctions mathieuc               def fdiff(self  argindex 1)          argindex    3               q  z   self args             return mathieucprime(a  q  z)         else              raise argumentindexerror(self  argindex)       classmethod     def eval(cls   q  z)          q number q s zero              return cos(sqrt(a) z)           try pull factors  1         z could extract minus sign()              return cls(a  q   z)   class mathieusprime(mathieubase)      r        the derivative  s   prime (a q z)  mathieu sine function      this function one solution mathieu differential equation          math            y(x)   prime prime    (a   2 q  cos(2 x)) y(x)   0      the solution mathieu cosine function       examples                       sympy import diff  mathieusprime         sympy abc import  q  z          mathieusprime(a  q  z)     mathieusprime(a  q  z)          mathieusprime(a  0  z)     sqrt(a) cos(sqrt(a) z)          diff(mathieusprime(a  q  z)  z)     (   2 q cos(2 z)) mathieus(a  q  z)      see also                   mathieus  mathieu sine function     mathieuc  mathieu cosine function     mathieucprime  derivative mathieu cosine function      references                         1  http   en wikipedia org wiki mathieu function         2  http   dlmf nist gov 28         3  http   mathworld wolfram com mathieubase html         4  http   functions wolfram com mathieuandspheroidalfunctions mathieusprime               def fdiff(self  argindex 1)          argindex    3               q  z   self args             return (2 q cos(2 z)   a) mathieus(a  q  z)         else              raise argumentindexerror(self  argindex)       classmethod     def eval(cls   q  z)          q number q s zero              return sqrt(a) cos(sqrt(a) z)           try pull factors  1         z could extract minus sign()              return cls(a  q   z)   class mathieucprime(mathieubase)      r        the derivative  c   prime (a q z)  mathieu cosine function      this function one solution mathieu differential equation          math            y(x)   prime prime    (a   2 q  cos(2 x)) y(x)   0      the solution mathieu sine function       examples                       sympy import diff  mathieucprime         sympy abc import  q  z          mathieucprime(a  q  z)     mathieucprime(a  q  z)          mathieucprime(a  0  z)      sqrt(a) sin(sqrt(a) z)          diff(mathieucprime(a  q  z)  z)     (   2 q cos(2 z)) mathieuc(a  q  z)      see also                   mathieus  mathieu sine function     mathieuc  mathieu cosine function     mathieusprime  derivative mathieu sine function      references                         1  http   en wikipedia org wiki mathieu function         2  http   dlmf nist gov 28         3  http   mathworld wolfram com mathieubase html         4  http   functions wolfram com mathieuandspheroidalfunctions mathieucprime             try pull factors  1    try pull factors  1    try pull factors  1    try pull factors  1 ", "content": "\"\"\" This module contains the Mathieu functions.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nfrom sympy.core import S\nfrom sympy.core.function import Function, ArgumentIndexError\nfrom sympy.functions.elementary.miscellaneous import sqrt\nfrom sympy.functions.elementary.trigonometric import sin, cos\n\n\nclass MathieuBase(Function):\n    \"\"\"\n    Abstract base class for Mathieu functions.\n\n    This class is meant to reduce code duplication.\n    \"\"\"\n\n    unbranched = True\n\n    def _eval_conjugate(self):\n        a, q, z = self.args\n        return self.func(a.conjugate(), q.conjugate(), z.conjugate())\n\n\nclass mathieus(MathieuBase):\n    r\"\"\"\n    The Mathieu Sine function `S(a,q,z)`. This function is one solution\n    of the Mathieu differential equation:\n\n    .. math ::\n        y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0\n\n    The other solution is the Mathieu Cosine function.\n\n    Examples\n    ========\n\n    >>> from sympy import diff, mathieus\n    >>> from sympy.abc import a, q, z\n\n    >>> mathieus(a, q, z)\n    mathieus(a, q, z)\n\n    >>> mathieus(a, 0, z)\n    sin(sqrt(a)*z)\n\n    >>> diff(mathieus(a, q, z), z)\n    mathieusprime(a, q, z)\n\n    See Also\n    ========\n\n    mathieuc: Mathieu cosine function.\n    mathieusprime: Derivative of Mathieu sine function.\n    mathieucprime: Derivative of Mathieu cosine function.\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Mathieu_function\n    .. [2] http://dlmf.nist.gov/28\n    .. [3] http://mathworld.wolfram.com/MathieuBase.html\n    .. [4] http://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuS/\n    \"\"\"\n\n    def fdiff(self, argindex=1):\n        if argindex == 3:\n            a, q, z = self.args\n            return mathieusprime(a, q, z)\n        else:\n            raise ArgumentIndexError(self, argindex)\n\n    @classmethod\n    def eval(cls, a, q, z):\n        if q.is_Number and q is S.Zero:\n            return sin(sqrt(a)*z)\n        # Try to pull out factors of -1\n        if z.could_extract_minus_sign():\n            return -cls(a, q, -z)\n\n\nclass mathieuc(MathieuBase):\n    r\"\"\"\n    The Mathieu Cosine function `C(a,q,z)`. This function is one solution\n    of the Mathieu differential equation:\n\n    .. math ::\n        y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0\n\n    The other solution is the Mathieu Sine function.\n\n    Examples\n    ========\n\n    >>> from sympy import diff, mathieuc\n    >>> from sympy.abc import a, q, z\n\n    >>> mathieuc(a, q, z)\n    mathieuc(a, q, z)\n\n    >>> mathieuc(a, 0, z)\n    cos(sqrt(a)*z)\n\n    >>> diff(mathieuc(a, q, z), z)\n    mathieucprime(a, q, z)\n\n    See Also\n    ========\n\n    mathieus: Mathieu sine function\n    mathieusprime: Derivative of Mathieu sine function\n    mathieucprime: Derivative of Mathieu cosine function\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Mathieu_function\n    .. [2] http://dlmf.nist.gov/28\n    .. [3] http://mathworld.wolfram.com/MathieuBase.html\n    .. [4] http://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuC/\n    \"\"\"\n\n    def fdiff(self, argindex=1):\n        if argindex == 3:\n            a, q, z = self.args\n            return mathieucprime(a, q, z)\n        else:\n            raise ArgumentIndexError(self, argindex)\n\n    @classmethod\n    def eval(cls, a, q, z):\n        if q.is_Number and q is S.Zero:\n            return cos(sqrt(a)*z)\n        # Try to pull out factors of -1\n        if z.could_extract_minus_sign():\n            return cls(a, q, -z)\n\n\nclass mathieusprime(MathieuBase):\n    r\"\"\"\n    The derivative `S^{\\prime}(a,q,z)` of the Mathieu Sine function.\n    This function is one solution of the Mathieu differential equation:\n\n    .. math ::\n        y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0\n\n    The other solution is the Mathieu Cosine function.\n\n    Examples\n    ========\n\n    >>> from sympy import diff, mathieusprime\n    >>> from sympy.abc import a, q, z\n\n    >>> mathieusprime(a, q, z)\n    mathieusprime(a, q, z)\n\n    >>> mathieusprime(a, 0, z)\n    sqrt(a)*cos(sqrt(a)*z)\n\n    >>> diff(mathieusprime(a, q, z), z)\n    (-a + 2*q*cos(2*z))*mathieus(a, q, z)\n\n    See Also\n    ========\n\n    mathieus: Mathieu sine function\n    mathieuc: Mathieu cosine function\n    mathieucprime: Derivative of Mathieu cosine function\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Mathieu_function\n    .. [2] http://dlmf.nist.gov/28\n    .. [3] http://mathworld.wolfram.com/MathieuBase.html\n    .. [4] http://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuSPrime/\n    \"\"\"\n\n    def fdiff(self, argindex=1):\n        if argindex == 3:\n            a, q, z = self.args\n            return (2*q*cos(2*z) - a)*mathieus(a, q, z)\n        else:\n            raise ArgumentIndexError(self, argindex)\n\n    @classmethod\n    def eval(cls, a, q, z):\n        if q.is_Number and q is S.Zero:\n            return sqrt(a)*cos(sqrt(a)*z)\n        # Try to pull out factors of -1\n        if z.could_extract_minus_sign():\n            return cls(a, q, -z)\n\n\nclass mathieucprime(MathieuBase):\n    r\"\"\"\n    The derivative `C^{\\prime}(a,q,z)` of the Mathieu Cosine function.\n    This function is one solution of the Mathieu differential equation:\n\n    .. math ::\n        y(x)^{\\prime\\prime} + (a - 2 q \\cos(2 x)) y(x) = 0\n\n    The other solution is the Mathieu Sine function.\n\n    Examples\n    ========\n\n    >>> from sympy import diff, mathieucprime\n    >>> from sympy.abc import a, q, z\n\n    >>> mathieucprime(a, q, z)\n    mathieucprime(a, q, z)\n\n    >>> mathieucprime(a, 0, z)\n    -sqrt(a)*sin(sqrt(a)*z)\n\n    >>> diff(mathieucprime(a, q, z), z)\n    (-a + 2*q*cos(2*z))*mathieuc(a, q, z)\n\n    See Also\n    ========\n\n    mathieus: Mathieu sine function\n    mathieuc: Mathieu cosine function\n    mathieusprime: Derivative of Mathieu sine function\n\n    References\n    ==========\n\n    .. [1] http://en.wikipedia.org/wiki/Mathieu_function\n    .. [2] http://dlmf.nist.gov/28\n    .. [3] http://mathworld.wolfram.com/MathieuBase.html\n    .. [4] http://functions.wolfram.com/MathieuandSpheroidalFunctions/MathieuCPrime/\n    \"\"\"\n\n    def fdiff(self, argindex=1):\n        if argindex == 3:\n            a, q, z = self.args\n            return (2*q*cos(2*z) - a)*mathieuc(a, q, z)\n        else:\n            raise ArgumentIndexError(self, argindex)\n\n    @classmethod\n    def eval(cls, a, q, z):\n        if q.is_Number and q is S.Zero:\n            return -sqrt(a)*sin(sqrt(a)*z)\n        # Try to pull out factors of -1\n        if z.could_extract_minus_sign():\n            return -cls(a, q, -z)\n", "description": "A computer algebra system written in pure Python", "file_name": "mathieu_functions.py", "id": "67397e829df49ffd6b77ef01796eca82", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/functions/special/mathieu_functions.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}