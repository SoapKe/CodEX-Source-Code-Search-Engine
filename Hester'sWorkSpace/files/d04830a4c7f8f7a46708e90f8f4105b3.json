{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (C) 2017 Red Hat Inc.\n Copyright (C) 2017 Lenovo.\n\n GNU General Public License v3.0+\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Module to configure Lenovo Switches.\n Lenovo Networking\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: enos_config\nversion_added: \"2.5\"\nauthor: \"Anil Kumar Muraleedharan (@amuraleedhar)\"\nshort_description: Manage Lenovo ENOS configuration sections\ndescription:\n  - Lenovo ENOS configurations use a simple block indent file syntax\n    for segmenting configuration into sections.  This module provides\n    an implementation for working with ENOS configuration sections in\n    a deterministic way.\nextends_documentation_fragment: enos\nnotes:\n  - Tested against ENOS 8.4.1.2\noptions:\n  lines:\n    description:\n      - The ordered set of commands that should be configured in the\n        section.  The commands must be the exact same commands as found\n        in the device running-config.  Be sure to note the configuration\n        command syntax as some commands are automatically modified by the\n        device config parser.\n    aliases: ['commands']\n  parents:\n    description:\n      - The ordered set of parents that uniquely identify the section\n        the commands should be checked against.  If the parents argument\n        is omitted, the commands are checked against the set of top\n        level or global commands.\n  src:\n    description:\n      - Specifies the source path to the file that contains the configuration\n        or configuration template to load.  The path to the source file can\n        either be the full path on the Ansible control host or a relative\n        path from the playbook or role root directory.  This argument is\n        mutually exclusive with I(lines), I(parents).\n  before:\n    description:\n      - The ordered set of commands to push on to the command stack if\n        a change needs to be made.  This allows the playbook designer\n        the opportunity to perform configuration commands prior to pushing\n        any changes without affecting how the set of commands are matched\n        against the system.\n  after:\n    description:\n      - The ordered set of commands to append to the end of the command\n        stack if a change needs to be made.  Just like with I(before) this\n        allows the playbook designer to append a set of commands to be\n        executed after the command set.\n  match:\n    description:\n      - Instructs the module on the way to perform the matching of\n        the set of commands against the current device config.  If\n        match is set to I(line), commands are matched line by line.  If\n        match is set to I(strict), command lines are matched with respect\n        to position.  If match is set to I(exact), command lines\n        must be an equal match.  Finally, if match is set to I(none), the\n        module will not attempt to compare the source configuration with\n        the running configuration on the remote device.\n    default: line\n    choices: ['line', 'strict', 'exact', 'none']\n  replace:\n    description:\n      - Instructs the module on the way to perform the configuration\n        on the device.  If the replace argument is set to I(line) then\n        the modified lines are pushed to the device in configuration\n        mode.  If the replace argument is set to I(block) then the entire\n        command block is pushed to the device in configuration mode if any\n        line is not correct.\n    default: line\n    choices: ['line', 'block', 'config']\n  config:\n    description:\n      - The module, by default, will connect to the remote device and\n        retrieve the current running-config to use as a base for comparing\n        against the contents of source.  There are times when it is not\n        desirable to have the task get the current running-config for\n        every task in a playbook.  The I(config) argument allows the\n        implementer to pass in the configuration to use as the base\n        config for comparison.\n  backup:\n    description:\n      - This argument will cause the module to create a full backup of\n        the current C(running-config) from the remote device before any\n        changes are made.  The backup file is written to the C(backup)\n        folder in the playbook root directory.  If the directory does not\n        exist, it is created.\n    type: bool\n    default: 'no'\n  comment:\n    description:\n      - Allows a commit description to be specified to be included\n        when the configuration is committed.  If the configuration is\n        not changed or committed, this argument is ignored.\n    default: 'configured by enos_config'\n  admin:\n    description:\n      - Enters into administration configuration mode for making config\n        changes to the device.\n    type: bool\n    default: 'no'\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: configure top level configuration\n  enos_config:\n    \"lines: hostname {{ inventory_hostname }}\"\n\n- name: configure interface settings\n  enos_config:\n    lines:\n      - enable\n      - ip ospf enable\n    parents: interface ip 13\n\n- name: load a config from disk and replace the current config\n  enos_config:\n    src: config.cfg\n    backup: yes\n\"\"\"\n\nRETURN = \"\"\"\nupdates:\n  description: The set of commands that will be pushed to the remote device\n  returned: Only when lines is specified.\n  type: list\n  sample: ['...', '...']\nbackup_path:\n  description: The full path to the backup file\n  returned: when backup is yes\n  type: string\n  sample: /playbooks/ansible/backup/enos01.2016-07-16@22:28:34\n\"\"\"\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.enos.enos import load_config, get_config\nfrom ansible.module_utils.network.enos.enos import enos_argument_spec\nfrom ansible.module_utils.network.enos.enos import check_args\nfrom ansible.module_utils.network.common.config import NetworkConfig, dumps\n\n\nDEFAULT_COMMIT_COMMENT = 'configured by enos_config'\n\n\ndef get_running_config(module):\n    contents = module.params['config']\n    if not contents:\n        contents = get_config(module)\n    return NetworkConfig(indent=1, contents=contents)\n\n\ndef get_candidate(module):\n    candidate = NetworkConfig(indent=1)\n    if module.params['src']:\n        candidate.load(module.params['src'])\n    elif module.params['lines']:\n        parents = module.params['parents'] or list()\n        candidate.add(module.params['lines'], parents=parents)\n    return candidate\n\n\ndef run(module, result):\n    match = module.params['match']\n    replace = module.params['replace']\n    replace_config = replace == 'config'\n    path = module.params['parents']\n    comment = module.params['comment']\n    admin = module.params['admin']\n    check_mode = module.check_mode\n\n    candidate = get_candidate(module)\n\n    if match != 'none' and replace != 'config':\n        contents = get_running_config(module)\n        configobj = NetworkConfig(contents=contents, indent=1)\n        commands = candidate.difference(configobj, path=path, match=match,\n                                        replace=replace)\n    else:\n        commands = candidate.items\n\n    if commands:\n        commands = dumps(commands, 'commands').split('\\n')\n\n        if any((module.params['lines'], module.params['src'])):\n            if module.params['before']:\n                commands[:0] = module.params['before']\n\n            if module.params['after']:\n                commands.extend(module.params['after'])\n\n            result['commands'] = commands\n\n        diff = load_config(module, commands)\n        if diff:\n            result['diff'] = dict(prepared=diff)\n            result['changed'] = True\n\n\ndef main():\n    \"\"\"main entry point for module execution\n    \"\"\"\n    argument_spec = dict(\n        src=dict(type='path'),\n\n        lines=dict(aliases=['commands'], type='list'),\n        parents=dict(type='list'),\n\n        before=dict(type='list'),\n        after=dict(type='list'),\n\n        match=dict(default='line', choices=['line', 'strict', 'exact', 'none']),\n        replace=dict(default='line', choices=['line', 'block', 'config']),\n\n        config=dict(),\n        backup=dict(type='bool', default=False),\n        comment=dict(default=DEFAULT_COMMIT_COMMENT),\n        admin=dict(type='bool', default=False)\n    )\n\n    argument_spec.update(enos_argument_spec)\n\n    mutually_exclusive = [('lines', 'src'),\n                          ('parents', 'src')]\n\n    required_if = [('match', 'strict', ['lines']),\n                   ('match', 'exact', ['lines']),\n                   ('replace', 'block', ['lines']),\n                   ('replace', 'config', ['src'])]\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           mutually_exclusive=mutually_exclusive,\n                           required_if=required_if,\n                           supports_check_mode=True)\n\n    warnings = list()\n    check_args(module, warnings)\n\n    result = dict(changed=False, warnings=warnings)\n\n    if module.params['backup']:\n        result['__backup__'] = get_config(module)\n\n    run(module, result)\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  enos config version added   2 5  author   anil kumar muraleedharan ( amuraleedhar)  short description  manage lenovo enos configuration sections description      lenovo enos configurations use simple block indent file syntax     segmenting configuration sections   this module provides     implementation working enos configuration sections     deterministic way  extends documentation fragment  enos notes      tested enos 8 4 1 2 options    lines      description          the ordered set commands configured         section   the commands must exact commands found         device running config   be sure note configuration         command syntax commands automatically modified         device config parser      aliases    commands     parents      description          the ordered set parents uniquely identify section         commands checked   if parents argument         omitted  commands checked set top         level global commands    src      description          specifies source path file contains configuration         configuration template load   the path source file         either full path ansible control host relative         path playbook role root directory   this argument         mutually exclusive i(lines)  i(parents)         description          the ordered set commands push command stack         change needs made   this allows playbook designer         opportunity perform configuration commands prior pushing         changes without affecting set commands matched         system         description          the ordered set commands append end command         stack change needs made   just like i(before)         allows playbook designer append set commands         executed command set    match      description          instructs module way perform matching         set commands current device config   if         match set i(line)  commands matched line line   if         match set i(strict)  command lines matched respect         position   if match set i(exact)  command lines         must equal match   finally  match set i(none)          module attempt compare source configuration         running configuration remote device      default  line     choices    line    strict    exact    none     replace      description          instructs module way perform configuration         device   if replace argument set i(line)         modified lines pushed device configuration         mode   if replace argument set i(block) entire         command block pushed device configuration mode         line correct      default  line     choices    line    block    config     config      description          the module  default  connect remote device         retrieve current running config use base comparing         contents source   there times         desirable task get current running config         every task playbook   the i(config) argument allows         implementer pass configuration use base         config comparison    backup      description          this argument cause module create full backup         current c(running config) remote device         changes made   the backup file written c(backup)         folder playbook root directory   if directory         exist  created      type  bool     default      comment      description          allows commit description specified included         configuration committed   if configuration         changed committed  argument ignored      default   configured enos config    admin      description          enters administration configuration mode making config         changes device      type  bool     default         examples         name  configure top level configuration   enos config       lines  hostname    inventory hostname        name  configure interface settings   enos config      lines          enable         ip ospf enable     parents  interface ip 13    name  load config disk replace current config   enos config      src  config cfg     backup  yes      return       updates    description  the set commands pushed remote device   returned  only lines specified    type  list   sample                 backup path    description  the full path backup file   returned  backup yes   type  string   sample   playbooks ansible backup enos01 2016 07 16 22 28 34     ansible module utils basic import ansiblemodule ansible module utils network enos enos import load config  get config ansible module utils network enos enos import enos argument spec ansible module utils network enos enos import check args ansible module utils network common config import networkconfig  dumps   default commit comment    configured enos config    def get running config(module)      contents   module params  config       contents          contents   get config(module)     return networkconfig(indent 1  contents contents)   def get candidate(module)      candidate   networkconfig(indent 1)     module params  src            candidate load(module params  src  )     elif module params  lines            parents   module params  parents   list()         candidate add(module params  lines    parents parents)     return candidate   def run(module  result)      match   module params  match       replace   module params  replace       replace config   replace     config      path   module params  parents       comment   module params  comment       admin   module params  admin       check mode   module check mode      candidate   get candidate(module)      match     none  replace     config           contents   get running config(module)         configobj   networkconfig(contents contents  indent 1)         commands   candidate difference(configobj  path path  match match                                          replace replace)     else          commands   candidate items      commands          commands   dumps(commands   commands ) split(  n )          any((module params  lines    module params  src  ))              module params                     commands  0    module params                 module params                     commands extend(module params   )              result  commands     commands          diff   load config(module  commands)         diff              result  diff     dict(prepared diff)             result  changed     true   def main()         main entry point module execution             usr bin python        coding  utf 8           (c) 2017 red hat inc     copyright (c) 2017 lenovo        gnu general public license v3 0        this program distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        (see copying https   www gnu org licenses gpl 3 0 txt)       module configure lenovo switches     lenovo networking    ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# (C) 2017 Red Hat Inc.\n# Copyright (C) 2017 Lenovo.\n#\n# GNU General Public License v3.0+\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n#\n# Module to configure Lenovo Switches.\n# Lenovo Networking\n#\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: enos_config\nversion_added: \"2.5\"\nauthor: \"Anil Kumar Muraleedharan (@amuraleedhar)\"\nshort_description: Manage Lenovo ENOS configuration sections\ndescription:\n  - Lenovo ENOS configurations use a simple block indent file syntax\n    for segmenting configuration into sections.  This module provides\n    an implementation for working with ENOS configuration sections in\n    a deterministic way.\nextends_documentation_fragment: enos\nnotes:\n  - Tested against ENOS 8.4.1.2\noptions:\n  lines:\n    description:\n      - The ordered set of commands that should be configured in the\n        section.  The commands must be the exact same commands as found\n        in the device running-config.  Be sure to note the configuration\n        command syntax as some commands are automatically modified by the\n        device config parser.\n    aliases: ['commands']\n  parents:\n    description:\n      - The ordered set of parents that uniquely identify the section\n        the commands should be checked against.  If the parents argument\n        is omitted, the commands are checked against the set of top\n        level or global commands.\n  src:\n    description:\n      - Specifies the source path to the file that contains the configuration\n        or configuration template to load.  The path to the source file can\n        either be the full path on the Ansible control host or a relative\n        path from the playbook or role root directory.  This argument is\n        mutually exclusive with I(lines), I(parents).\n  before:\n    description:\n      - The ordered set of commands to push on to the command stack if\n        a change needs to be made.  This allows the playbook designer\n        the opportunity to perform configuration commands prior to pushing\n        any changes without affecting how the set of commands are matched\n        against the system.\n  after:\n    description:\n      - The ordered set of commands to append to the end of the command\n        stack if a change needs to be made.  Just like with I(before) this\n        allows the playbook designer to append a set of commands to be\n        executed after the command set.\n  match:\n    description:\n      - Instructs the module on the way to perform the matching of\n        the set of commands against the current device config.  If\n        match is set to I(line), commands are matched line by line.  If\n        match is set to I(strict), command lines are matched with respect\n        to position.  If match is set to I(exact), command lines\n        must be an equal match.  Finally, if match is set to I(none), the\n        module will not attempt to compare the source configuration with\n        the running configuration on the remote device.\n    default: line\n    choices: ['line', 'strict', 'exact', 'none']\n  replace:\n    description:\n      - Instructs the module on the way to perform the configuration\n        on the device.  If the replace argument is set to I(line) then\n        the modified lines are pushed to the device in configuration\n        mode.  If the replace argument is set to I(block) then the entire\n        command block is pushed to the device in configuration mode if any\n        line is not correct.\n    default: line\n    choices: ['line', 'block', 'config']\n  config:\n    description:\n      - The module, by default, will connect to the remote device and\n        retrieve the current running-config to use as a base for comparing\n        against the contents of source.  There are times when it is not\n        desirable to have the task get the current running-config for\n        every task in a playbook.  The I(config) argument allows the\n        implementer to pass in the configuration to use as the base\n        config for comparison.\n  backup:\n    description:\n      - This argument will cause the module to create a full backup of\n        the current C(running-config) from the remote device before any\n        changes are made.  The backup file is written to the C(backup)\n        folder in the playbook root directory.  If the directory does not\n        exist, it is created.\n    type: bool\n    default: 'no'\n  comment:\n    description:\n      - Allows a commit description to be specified to be included\n        when the configuration is committed.  If the configuration is\n        not changed or committed, this argument is ignored.\n    default: 'configured by enos_config'\n  admin:\n    description:\n      - Enters into administration configuration mode for making config\n        changes to the device.\n    type: bool\n    default: 'no'\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: configure top level configuration\n  enos_config:\n    \"lines: hostname {{ inventory_hostname }}\"\n\n- name: configure interface settings\n  enos_config:\n    lines:\n      - enable\n      - ip ospf enable\n    parents: interface ip 13\n\n- name: load a config from disk and replace the current config\n  enos_config:\n    src: config.cfg\n    backup: yes\n\"\"\"\n\nRETURN = \"\"\"\nupdates:\n  description: The set of commands that will be pushed to the remote device\n  returned: Only when lines is specified.\n  type: list\n  sample: ['...', '...']\nbackup_path:\n  description: The full path to the backup file\n  returned: when backup is yes\n  type: string\n  sample: /playbooks/ansible/backup/enos01.2016-07-16@22:28:34\n\"\"\"\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.enos.enos import load_config, get_config\nfrom ansible.module_utils.network.enos.enos import enos_argument_spec\nfrom ansible.module_utils.network.enos.enos import check_args\nfrom ansible.module_utils.network.common.config import NetworkConfig, dumps\n\n\nDEFAULT_COMMIT_COMMENT = 'configured by enos_config'\n\n\ndef get_running_config(module):\n    contents = module.params['config']\n    if not contents:\n        contents = get_config(module)\n    return NetworkConfig(indent=1, contents=contents)\n\n\ndef get_candidate(module):\n    candidate = NetworkConfig(indent=1)\n    if module.params['src']:\n        candidate.load(module.params['src'])\n    elif module.params['lines']:\n        parents = module.params['parents'] or list()\n        candidate.add(module.params['lines'], parents=parents)\n    return candidate\n\n\ndef run(module, result):\n    match = module.params['match']\n    replace = module.params['replace']\n    replace_config = replace == 'config'\n    path = module.params['parents']\n    comment = module.params['comment']\n    admin = module.params['admin']\n    check_mode = module.check_mode\n\n    candidate = get_candidate(module)\n\n    if match != 'none' and replace != 'config':\n        contents = get_running_config(module)\n        configobj = NetworkConfig(contents=contents, indent=1)\n        commands = candidate.difference(configobj, path=path, match=match,\n                                        replace=replace)\n    else:\n        commands = candidate.items\n\n    if commands:\n        commands = dumps(commands, 'commands').split('\\n')\n\n        if any((module.params['lines'], module.params['src'])):\n            if module.params['before']:\n                commands[:0] = module.params['before']\n\n            if module.params['after']:\n                commands.extend(module.params['after'])\n\n            result['commands'] = commands\n\n        diff = load_config(module, commands)\n        if diff:\n            result['diff'] = dict(prepared=diff)\n            result['changed'] = True\n\n\ndef main():\n    \"\"\"main entry point for module execution\n    \"\"\"\n    argument_spec = dict(\n        src=dict(type='path'),\n\n        lines=dict(aliases=['commands'], type='list'),\n        parents=dict(type='list'),\n\n        before=dict(type='list'),\n        after=dict(type='list'),\n\n        match=dict(default='line', choices=['line', 'strict', 'exact', 'none']),\n        replace=dict(default='line', choices=['line', 'block', 'config']),\n\n        config=dict(),\n        backup=dict(type='bool', default=False),\n        comment=dict(default=DEFAULT_COMMIT_COMMENT),\n        admin=dict(type='bool', default=False)\n    )\n\n    argument_spec.update(enos_argument_spec)\n\n    mutually_exclusive = [('lines', 'src'),\n                          ('parents', 'src')]\n\n    required_if = [('match', 'strict', ['lines']),\n                   ('match', 'exact', ['lines']),\n                   ('replace', 'block', ['lines']),\n                   ('replace', 'config', ['src'])]\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           mutually_exclusive=mutually_exclusive,\n                           required_if=required_if,\n                           supports_check_mode=True)\n\n    warnings = list()\n    check_args(module, warnings)\n\n    result = dict(changed=False, warnings=warnings)\n\n    if module.params['backup']:\n        result['__backup__'] = get_config(module)\n\n    run(module, result)\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "enos_config.py", "id": "d04830a4c7f8f7a46708e90f8f4105b3", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/enos/enos_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}