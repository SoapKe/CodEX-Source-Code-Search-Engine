{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass ParliamentLiveUKIE(InfoExtractor):\n    IE_NAME = 'parliamentlive.tv'\n    IE_DESC = 'UK parliament videos'\n    _VALID_URL = r'(?i)https?://(?:www\\.)?parliamentlive\\.tv/Event/Index/(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'http://parliamentlive.tv/Event/Index/c1e9d44d-fd6c-4263-b50f-97ed26cc998b',\n        'info_dict': {\n            'id': '1_af9nv9ym',\n            'ext': 'mp4',\n            'title': 'Home Affairs Committee',\n            'uploader_id': 'FFMPEG-01',\n            'timestamp': 1422696664,\n            'upload_date': '20150131',\n        },\n    }, {\n        'url': 'http://parliamentlive.tv/event/index/3f24936f-130f-40bf-9a5d-b3d6479da6a4',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            'http://vodplayer.parliamentlive.tv/?mid=' + video_id, video_id)\n        widget_config = self._parse_json(self._search_regex(\n            r'(?s)kWidgetConfig\\s*=\\s*({.+});',\n            webpage, 'kaltura widget config'), video_id)\n        kaltura_url = 'kaltura:%s:%s' % (\n            widget_config['wid'][1:], widget_config['entry_id'])\n        event_title = self._download_json(\n            'http://parliamentlive.tv/Event/GetShareVideo/' + video_id, video_id)['event']['title']\n        return {\n            '_type': 'url_transparent',\n            'title': event_title,\n            'description': '',\n            'url': kaltura_url,\n            'ie_key': 'Kaltura',\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass ParliamentLiveUKIE(InfoExtractor):\n    IE_NAME = 'parliamentlive.tv'\n    IE_DESC = 'UK parliament videos'\n    _VALID_URL = r'(?i)https?://(?:www\\.)?parliamentlive\\.tv/Event/Index/(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n\n    _TESTS = [{\n        'url': 'http://parliamentlive.tv/Event/Index/c1e9d44d-fd6c-4263-b50f-97ed26cc998b',\n        'info_dict': {\n            'id': '1_af9nv9ym',\n            'ext': 'mp4',\n            'title': 'Home Affairs Committee',\n            'uploader_id': 'FFMPEG-01',\n            'timestamp': 1422696664,\n            'upload_date': '20150131',\n        },\n    }, {\n        'url': 'http://parliamentlive.tv/event/index/3f24936f-130f-40bf-9a5d-b3d6479da6a4',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            'http://vodplayer.parliamentlive.tv/?mid=' + video_id, video_id)\n        widget_config = self._parse_json(self._search_regex(\n            r'(?s)kWidgetConfig\\s*=\\s*({.+});',\n            webpage, 'kaltura widget config'), video_id)\n        kaltura_url = 'kaltura:%s:%s' % (\n            widget_config['wid'][1:], widget_config['entry_id'])\n        event_title = self._download_json(\n            'http://parliamentlive.tv/Event/GetShareVideo/' + video_id, video_id)['event']['title']\n        return {\n            '_type': 'url_transparent',\n            'title': event_title,\n            'description': '',\n            'url': kaltura_url,\n            'ie_key': 'Kaltura',\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "parliamentliveuk.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/parliamentliveuk.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}