{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport io\nimport json\nimport traceback\nimport hashlib\nimport os\nimport subprocess\nimport sys\nfrom zipimport import zipimporter\n\nfrom .utils import encode_compat_str\n\nfrom .version import __version__\n\n\ndef rsa_verify(message, signature, key):\n    from hashlib import sha256\n    assert isinstance(message, bytes)\n    byte_size = (len(bin(key[0])) - 2 + 8 - 1) // 8\n    signature = ('%x' % pow(int(signature, 16), key[1], key[0])).encode()\n    signature = (byte_size * 2 - len(signature)) * b'0' + signature\n    asn1 = b'3031300d060960864801650304020105000420'\n    asn1 += sha256(message).hexdigest().encode()\n    if byte_size < len(asn1) // 2 + 11:\n        return False\n    expected = b'0001' + (byte_size - len(asn1) // 2 - 3) * b'ff' + b'00' + asn1\n    return expected == signature\n\n\ndef update_self(to_screen, verbose, opener):\n    \n\n    UPDATE_URL = 'https://rg3.github.io/youtube-dl/update/'\n    VERSION_URL = UPDATE_URL + 'LATEST_VERSION'\n    JSON_URL = UPDATE_URL + 'versions.json'\n    UPDATES_RSA_KEY = (0x9d60ee4d8f805312fdb15a62f87b95bd66177b91df176765d13514a0f1754bcd2057295c5b6f1d35daa6742c3ffc9a82d3e118861c207995a8031e151d863c9927e304576bc80692bc8e094896fcf11b66f3e29e04e3a71e9a11558558acea1840aec37fc396fb6b65dc81a1c4144e03bd1c011de62e3f1357b327d08426fe93, 65537)\n\n    if not isinstance(globals().get('__loader__'), zipimporter) and not hasattr(sys, 'frozen'):\n        to_screen('It looks like you installed youtube-dl with a package manager, pip, setup.py or a tarball. Please use that to update.')\n        return\n\n    \n    try:\n        newversion = opener.open(VERSION_URL).read().decode('utf-8').strip()\n    except Exception:\n        if verbose:\n            to_screen(encode_compat_str(traceback.format_exc()))\n        to_screen('ERROR: can\\'t find the current version. Please try again later.')\n        return\n    if newversion == __version__:\n        to_screen('youtube-dl is up-to-date (' + __version__ + ')')\n        return\n\n    \n    try:\n        versions_info = opener.open(JSON_URL).read().decode('utf-8')\n        versions_info = json.loads(versions_info)\n    except Exception:\n        if verbose:\n            to_screen(encode_compat_str(traceback.format_exc()))\n        to_screen('ERROR: can\\'t obtain versions info. Please try again later.')\n        return\n    if 'signature' not in versions_info:\n        to_screen('ERROR: the versions file is not signed or corrupted. Aborting.')\n        return\n    signature = versions_info['signature']\n    del versions_info['signature']\n    if not rsa_verify(json.dumps(versions_info, sort_keys=True).encode('utf-8'), signature, UPDATES_RSA_KEY):\n        to_screen('ERROR: the versions file signature is invalid. Aborting.')\n        return\n\n    version_id = versions_info['latest']\n\n    def version_tuple(version_str):\n        return tuple(map(int, version_str.split('.')))\n    if version_tuple(__version__) >= version_tuple(version_id):\n        to_screen('youtube-dl is up to date (%s)' % __version__)\n        return\n\n    to_screen('Updating to version ' + version_id + ' ...')\n    version = versions_info['versions'][version_id]\n\n    print_notes(to_screen, versions_info['versions'])\n\n    \n    filename = sys.executable if hasattr(sys, 'frozen') else sys.argv[0]\n\n    if not os.access(filename, os.W_OK):\n        to_screen('ERROR: no write permissions on %s' % filename)\n        return\n\n    \n    if hasattr(sys, 'frozen'):\n        exe = filename\n        directory = os.path.dirname(exe)\n        if not os.access(directory, os.W_OK):\n            to_screen('ERROR: no write permissions on %s' % directory)\n            return\n\n        try:\n            urlh = opener.open(version['exe'][0])\n            newcontent = urlh.read()\n            urlh.close()\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to download latest version')\n            return\n\n        newcontent_hash = hashlib.sha256(newcontent).hexdigest()\n        if newcontent_hash != version['exe'][1]:\n            to_screen('ERROR: the downloaded file hash does not match. Aborting.')\n            return\n\n        try:\n            with open(exe + '.new', 'wb') as outf:\n                outf.write(newcontent)\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to write the new version')\n            return\n\n        try:\n            bat = os.path.join(directory, 'youtube-dl-updater.bat')\n            with io.open(bat, 'w') as batfile:\n                batfile.write( % (exe, exe, version_id))\n\n            subprocess.Popen([bat])  \n            return  \n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to overwrite current version')\n            return\n\n    \n    elif isinstance(globals().get('__loader__'), zipimporter):\n        try:\n            urlh = opener.open(version['bin'][0])\n            newcontent = urlh.read()\n            urlh.close()\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to download latest version')\n            return\n\n        newcontent_hash = hashlib.sha256(newcontent).hexdigest()\n        if newcontent_hash != version['bin'][1]:\n            to_screen('ERROR: the downloaded file hash does not match. Aborting.')\n            return\n\n        try:\n            with open(filename, 'wb') as outf:\n                outf.write(newcontent)\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to overwrite current version')\n            return\n\n    to_screen('Updated youtube-dl. Restart youtube-dl to use the new version.')\n\n\ndef get_notes(versions, fromVersion):\n    notes = []\n    for v, vdata in sorted(versions.items()):\n        if v > fromVersion:\n            notes.extend(vdata.get('notes', []))\n    return notes\n\n\ndef print_notes(to_screen, versions, fromVersion=__version__):\n    notes = get_notes(versions, fromVersion)\n    if notes:\n        to_screen('PLEASE NOTE:')\n        for note in notes:\n            to_screen(note)\n", "comments": "Update the program file with the latest version from the repository\ny\n\n@echo off\necho Waiting for file handle to be closed ...\nping 127.0.0.1 -n 5 -w 1000 > NUL\nmove /Y \"%s.new\" \"%s\" > NUL\necho Updated youtube-dl to version %s.\nstart /b \"\" cmd /c del \"%%~f0\"&exit /b\"\n                \\n\nn\n# Check if there is a new version\n# Download and check versions info\n# sys.executable is set to the full pathname of the exe-file for py2exe\n# Py2EXE\n# Continues to run in the background\n# Do not show premature success messages\n# Zip unix package\n", "content": "from __future__ import unicode_literals\n\nimport io\nimport json\nimport traceback\nimport hashlib\nimport os\nimport subprocess\nimport sys\nfrom zipimport import zipimporter\n\nfrom .utils import encode_compat_str\n\nfrom .version import __version__\n\n\ndef rsa_verify(message, signature, key):\n    from hashlib import sha256\n    assert isinstance(message, bytes)\n    byte_size = (len(bin(key[0])) - 2 + 8 - 1) // 8\n    signature = ('%x' % pow(int(signature, 16), key[1], key[0])).encode()\n    signature = (byte_size * 2 - len(signature)) * b'0' + signature\n    asn1 = b'3031300d060960864801650304020105000420'\n    asn1 += sha256(message).hexdigest().encode()\n    if byte_size < len(asn1) // 2 + 11:\n        return False\n    expected = b'0001' + (byte_size - len(asn1) // 2 - 3) * b'ff' + b'00' + asn1\n    return expected == signature\n\n\ndef update_self(to_screen, verbose, opener):\n    \"\"\"Update the program file with the latest version from the repository\"\"\"\n\n    UPDATE_URL = 'https://rg3.github.io/youtube-dl/update/'\n    VERSION_URL = UPDATE_URL + 'LATEST_VERSION'\n    JSON_URL = UPDATE_URL + 'versions.json'\n    UPDATES_RSA_KEY = (0x9d60ee4d8f805312fdb15a62f87b95bd66177b91df176765d13514a0f1754bcd2057295c5b6f1d35daa6742c3ffc9a82d3e118861c207995a8031e151d863c9927e304576bc80692bc8e094896fcf11b66f3e29e04e3a71e9a11558558acea1840aec37fc396fb6b65dc81a1c4144e03bd1c011de62e3f1357b327d08426fe93, 65537)\n\n    if not isinstance(globals().get('__loader__'), zipimporter) and not hasattr(sys, 'frozen'):\n        to_screen('It looks like you installed youtube-dl with a package manager, pip, setup.py or a tarball. Please use that to update.')\n        return\n\n    # Check if there is a new version\n    try:\n        newversion = opener.open(VERSION_URL).read().decode('utf-8').strip()\n    except Exception:\n        if verbose:\n            to_screen(encode_compat_str(traceback.format_exc()))\n        to_screen('ERROR: can\\'t find the current version. Please try again later.')\n        return\n    if newversion == __version__:\n        to_screen('youtube-dl is up-to-date (' + __version__ + ')')\n        return\n\n    # Download and check versions info\n    try:\n        versions_info = opener.open(JSON_URL).read().decode('utf-8')\n        versions_info = json.loads(versions_info)\n    except Exception:\n        if verbose:\n            to_screen(encode_compat_str(traceback.format_exc()))\n        to_screen('ERROR: can\\'t obtain versions info. Please try again later.')\n        return\n    if 'signature' not in versions_info:\n        to_screen('ERROR: the versions file is not signed or corrupted. Aborting.')\n        return\n    signature = versions_info['signature']\n    del versions_info['signature']\n    if not rsa_verify(json.dumps(versions_info, sort_keys=True).encode('utf-8'), signature, UPDATES_RSA_KEY):\n        to_screen('ERROR: the versions file signature is invalid. Aborting.')\n        return\n\n    version_id = versions_info['latest']\n\n    def version_tuple(version_str):\n        return tuple(map(int, version_str.split('.')))\n    if version_tuple(__version__) >= version_tuple(version_id):\n        to_screen('youtube-dl is up to date (%s)' % __version__)\n        return\n\n    to_screen('Updating to version ' + version_id + ' ...')\n    version = versions_info['versions'][version_id]\n\n    print_notes(to_screen, versions_info['versions'])\n\n    # sys.executable is set to the full pathname of the exe-file for py2exe\n    filename = sys.executable if hasattr(sys, 'frozen') else sys.argv[0]\n\n    if not os.access(filename, os.W_OK):\n        to_screen('ERROR: no write permissions on %s' % filename)\n        return\n\n    # Py2EXE\n    if hasattr(sys, 'frozen'):\n        exe = filename\n        directory = os.path.dirname(exe)\n        if not os.access(directory, os.W_OK):\n            to_screen('ERROR: no write permissions on %s' % directory)\n            return\n\n        try:\n            urlh = opener.open(version['exe'][0])\n            newcontent = urlh.read()\n            urlh.close()\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to download latest version')\n            return\n\n        newcontent_hash = hashlib.sha256(newcontent).hexdigest()\n        if newcontent_hash != version['exe'][1]:\n            to_screen('ERROR: the downloaded file hash does not match. Aborting.')\n            return\n\n        try:\n            with open(exe + '.new', 'wb') as outf:\n                outf.write(newcontent)\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to write the new version')\n            return\n\n        try:\n            bat = os.path.join(directory, 'youtube-dl-updater.bat')\n            with io.open(bat, 'w') as batfile:\n                batfile.write('''\n@echo off\necho Waiting for file handle to be closed ...\nping 127.0.0.1 -n 5 -w 1000 > NUL\nmove /Y \"%s.new\" \"%s\" > NUL\necho Updated youtube-dl to version %s.\nstart /b \"\" cmd /c del \"%%~f0\"&exit /b\"\n                \\n''' % (exe, exe, version_id))\n\n            subprocess.Popen([bat])  # Continues to run in the background\n            return  # Do not show premature success messages\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to overwrite current version')\n            return\n\n    # Zip unix package\n    elif isinstance(globals().get('__loader__'), zipimporter):\n        try:\n            urlh = opener.open(version['bin'][0])\n            newcontent = urlh.read()\n            urlh.close()\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to download latest version')\n            return\n\n        newcontent_hash = hashlib.sha256(newcontent).hexdigest()\n        if newcontent_hash != version['bin'][1]:\n            to_screen('ERROR: the downloaded file hash does not match. Aborting.')\n            return\n\n        try:\n            with open(filename, 'wb') as outf:\n                outf.write(newcontent)\n        except (IOError, OSError):\n            if verbose:\n                to_screen(encode_compat_str(traceback.format_exc()))\n            to_screen('ERROR: unable to overwrite current version')\n            return\n\n    to_screen('Updated youtube-dl. Restart youtube-dl to use the new version.')\n\n\ndef get_notes(versions, fromVersion):\n    notes = []\n    for v, vdata in sorted(versions.items()):\n        if v > fromVersion:\n            notes.extend(vdata.get('notes', []))\n    return notes\n\n\ndef print_notes(to_screen, versions, fromVersion=__version__):\n    notes = get_notes(versions, fromVersion)\n    if notes:\n        to_screen('PLEASE NOTE:')\n        for note in notes:\n            to_screen(note)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "update.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/update.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}