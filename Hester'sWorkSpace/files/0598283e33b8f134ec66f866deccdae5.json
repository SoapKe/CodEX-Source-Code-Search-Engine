{"author": "ansible", "code": "\n\n# (c) 2017, NetApp, Inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n\nmodule: sf_check_connections\n\nshort_description: Check connectivity to MVIP and SVIP.\nextends_documentation_fragment:\n    - netapp.solidfire\nversion_added: '2.3'\nauthor: Sumit Kumar (sumit4@netapp.com)\ndescription:\n- Used to test the management connection to the cluster.\n- The test pings the MVIP and SVIP, and executes a simple API method to verify connectivity.\n\noptions:\n\n  skip:\n    description:\n    - Skip checking connection to SVIP or MVIP.\n    choices: ['svip', 'mvip']\n\n  mvip:\n    description:\n    - Optionally, use to test connection of a different MVIP.\n    - This is not needed to test the connection to the target cluster.\n\n  svip:\n    description:\n    - Optionally, use to test connection of a different SVIP.\n    - This is not needed to test the connection to the target cluster.\n\n'''\n\n\nEXAMPLES = \"\"\"\n   - name: Check connections to MVIP and SVIP\n     sf_check_connections:\n       hostname: \"{{ solidfire_hostname }}\"\n       username: \"{{ solidfire_username }}\"\n       password: \"{{ solidfire_password }}\"\n\"\"\"\n\nRETURN = \"\"\"\n\n\"\"\"\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\nimport ansible.module_utils.netapp as netapp_utils\n\n\nHAS_SF_SDK = netapp_utils.has_sf_sdk()\n\n\nclass SolidFireConnection(object):\n\n    def __init__(self):\n        self.argument_spec = netapp_utils.ontap_sf_host_argument_spec()\n        self.argument_spec.update(dict(\n            skip=dict(required=False, type='str', default=None, choices=['mvip', 'svip']),\n            mvip=dict(required=False, type='str', default=None),\n            svip=dict(required=False, type='str', default=None)\n        ))\n\n        self.module = AnsibleModule(\n            argument_spec=self.argument_spec,\n            supports_check_mode=True\n        )\n\n        p = self.module.params\n\n        \n        self.skip = p['skip']\n        self.mvip = p['mvip']\n        self.svip = p['svip']\n\n        if HAS_SF_SDK is False:\n            self.module.fail_json(msg=\"Unable to import the SolidFire Python SDK\")\n        else:\n            self.sfe = netapp_utils.ElementFactory.create(p['hostname'], p['username'], p['password'], port=442)\n\n    def check_mvip_connection(self):\n        \"\"\"\n            Check connection to MVIP\n\n            :return: true if connection was successful, false otherwise.\n            :rtype: bool\n        \"\"\"\n        try:\n            test = self.sfe.test_connect_mvip(mvip=self.mvip)\n            result = test.details.connected\n            \n            return result\n\n        except Exception as e:\n            self.module.fail_json(msg='Error checking connection to MVIP: %s' % to_native(e), exception=traceback.format_exc())\n            return False\n\n    def check_svip_connection(self):\n        \"\"\"\n            Check connection to SVIP\n\n            :return: true if connection was successful, false otherwise.\n            :rtype: bool\n        \"\"\"\n        try:\n            test = self.sfe.test_connect_svip(svip=self.svip)\n            result = test.details.connected\n            \n            return result\n\n        except Exception as e:\n            self.module.fail_json(msg='Error checking connection to SVIP: %s' % to_native(e), exception=traceback.format_exc())\n            return False\n\n    def check(self):\n\n        failed = True\n        msg = ''\n\n        if self.skip is None:\n            mvip_connection_established = self.check_mvip_connection()\n            svip_connection_established = self.check_svip_connection()\n\n            \n            if not mvip_connection_established:\n                failed = True\n                msg = 'Connection to MVIP failed.'\n            elif not svip_connection_established:\n                failed = True\n                msg = 'Connection to SVIP failed.'\n            else:\n                failed = False\n\n        elif self.skip == 'mvip':\n            svip_connection_established = self.check_svip_connection()\n\n            \n            if not svip_connection_established:\n                failed = True\n                msg = 'Connection to SVIP failed.'\n            else:\n                failed = False\n\n        elif self.skip == 'svip':\n            mvip_connection_established = self.check_mvip_connection()\n\n            \n            if not mvip_connection_established:\n                failed = True\n                msg = 'Connection to MVIP failed.'\n            else:\n                failed = False\n\n        if failed:\n            self.module.fail_json(msg=msg)\n        else:\n            self.module.exit_json()\n\n\ndef main():\n    v = SolidFireConnection()\n    v.check()\n\nif __name__ == '__main__':\n    main()\n", "comments": "         name  check connections mvip svip      sf check connections         hostname      solidfire hostname            username      solidfire username            password      solidfire password          return            import traceback  ansible module utils basic import ansiblemodule ansible module utils  text import native import ansible module utils netapp netapp utils   has sf sdk   netapp utils sf sdk()   class solidfireconnection(object)       def   init  (self)          self argument spec   netapp utils ontap sf host argument spec()         self argument spec update(dict(             skip dict(required false  type  str   default none  choices   mvip    svip  )              mvip dict(required false  type  str   default none)              svip dict(required false  type  str   default none)         ))          self module   ansiblemodule(             argument spec self argument spec              supports check mode true         )          p   self module params            set state variables         self skip   p  skip           self mvip   p  mvip           self svip   p  svip            has sf sdk false              self module fail json(msg  unable import solidfire python sdk )         else              self sfe   netapp utils elementfactory create(p  hostname    p  username    p  password    port 442)      def check mvip connection(self)                          check connection mvip               return  true connection successful  false otherwise               rtype  bool                     try              test   self sfe test connect mvip(mvip self mvip)             result   test details connected               todo   log details test             return result          except exception e              self module fail json(msg  error checking connection mvip      native(e)  exception traceback format exc())             return false      def check svip connection(self)                          check connection svip               return  true connection successful  false otherwise               rtype  bool                   module  sf check connections  short description  check connectivity mvip svip  extends documentation fragment        netapp solidfire version added   2 3  author  sumit kumar (sumit4 netapp com) description    used test management connection cluster    the test pings mvip svip  executes simple api method verify connectivity   options     skip      description        skip checking connection svip mvip      choices    svip    mvip      mvip      description        optionally  use test connection different mvip        this needed test connection target cluster     svip      description        optionally  use test connection different svip        this needed test connection target cluster           usr bin python    (c) 2017  netapp  inc    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    set state variables    todo   log details test    todo   log details test    set failed msg    set failed msg    set failed msg ", "content": "#!/usr/bin/python\n\n# (c) 2017, NetApp, Inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n\nmodule: sf_check_connections\n\nshort_description: Check connectivity to MVIP and SVIP.\nextends_documentation_fragment:\n    - netapp.solidfire\nversion_added: '2.3'\nauthor: Sumit Kumar (sumit4@netapp.com)\ndescription:\n- Used to test the management connection to the cluster.\n- The test pings the MVIP and SVIP, and executes a simple API method to verify connectivity.\n\noptions:\n\n  skip:\n    description:\n    - Skip checking connection to SVIP or MVIP.\n    choices: ['svip', 'mvip']\n\n  mvip:\n    description:\n    - Optionally, use to test connection of a different MVIP.\n    - This is not needed to test the connection to the target cluster.\n\n  svip:\n    description:\n    - Optionally, use to test connection of a different SVIP.\n    - This is not needed to test the connection to the target cluster.\n\n'''\n\n\nEXAMPLES = \"\"\"\n   - name: Check connections to MVIP and SVIP\n     sf_check_connections:\n       hostname: \"{{ solidfire_hostname }}\"\n       username: \"{{ solidfire_username }}\"\n       password: \"{{ solidfire_password }}\"\n\"\"\"\n\nRETURN = \"\"\"\n\n\"\"\"\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\nimport ansible.module_utils.netapp as netapp_utils\n\n\nHAS_SF_SDK = netapp_utils.has_sf_sdk()\n\n\nclass SolidFireConnection(object):\n\n    def __init__(self):\n        self.argument_spec = netapp_utils.ontap_sf_host_argument_spec()\n        self.argument_spec.update(dict(\n            skip=dict(required=False, type='str', default=None, choices=['mvip', 'svip']),\n            mvip=dict(required=False, type='str', default=None),\n            svip=dict(required=False, type='str', default=None)\n        ))\n\n        self.module = AnsibleModule(\n            argument_spec=self.argument_spec,\n            supports_check_mode=True\n        )\n\n        p = self.module.params\n\n        # set up state variables\n        self.skip = p['skip']\n        self.mvip = p['mvip']\n        self.svip = p['svip']\n\n        if HAS_SF_SDK is False:\n            self.module.fail_json(msg=\"Unable to import the SolidFire Python SDK\")\n        else:\n            self.sfe = netapp_utils.ElementFactory.create(p['hostname'], p['username'], p['password'], port=442)\n\n    def check_mvip_connection(self):\n        \"\"\"\n            Check connection to MVIP\n\n            :return: true if connection was successful, false otherwise.\n            :rtype: bool\n        \"\"\"\n        try:\n            test = self.sfe.test_connect_mvip(mvip=self.mvip)\n            result = test.details.connected\n            # Todo - Log details about the test\n            return result\n\n        except Exception as e:\n            self.module.fail_json(msg='Error checking connection to MVIP: %s' % to_native(e), exception=traceback.format_exc())\n            return False\n\n    def check_svip_connection(self):\n        \"\"\"\n            Check connection to SVIP\n\n            :return: true if connection was successful, false otherwise.\n            :rtype: bool\n        \"\"\"\n        try:\n            test = self.sfe.test_connect_svip(svip=self.svip)\n            result = test.details.connected\n            # Todo - Log details about the test\n            return result\n\n        except Exception as e:\n            self.module.fail_json(msg='Error checking connection to SVIP: %s' % to_native(e), exception=traceback.format_exc())\n            return False\n\n    def check(self):\n\n        failed = True\n        msg = ''\n\n        if self.skip is None:\n            mvip_connection_established = self.check_mvip_connection()\n            svip_connection_established = self.check_svip_connection()\n\n            # Set failed and msg\n            if not mvip_connection_established:\n                failed = True\n                msg = 'Connection to MVIP failed.'\n            elif not svip_connection_established:\n                failed = True\n                msg = 'Connection to SVIP failed.'\n            else:\n                failed = False\n\n        elif self.skip == 'mvip':\n            svip_connection_established = self.check_svip_connection()\n\n            # Set failed and msg\n            if not svip_connection_established:\n                failed = True\n                msg = 'Connection to SVIP failed.'\n            else:\n                failed = False\n\n        elif self.skip == 'svip':\n            mvip_connection_established = self.check_mvip_connection()\n\n            # Set failed and msg\n            if not mvip_connection_established:\n                failed = True\n                msg = 'Connection to MVIP failed.'\n            else:\n                failed = False\n\n        if failed:\n            self.module.fail_json(msg=msg)\n        else:\n            self.module.exit_json()\n\n\ndef main():\n    v = SolidFireConnection()\n    v.check()\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "sf_check_connections.py", "id": "0598283e33b8f134ec66f866deccdae5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/storage/netapp/sf_check_connections.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}