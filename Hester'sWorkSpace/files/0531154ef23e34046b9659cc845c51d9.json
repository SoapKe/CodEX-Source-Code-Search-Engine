{"author": "mitmproxy", "code": "\n\nimport contextlib\nimport os\nimport sys\nimport platform\nimport runpy\nimport shlex\nimport subprocess\nfrom os.path import join, abspath, dirname\n\nimport cryptography.fernet\nimport click\n\n\nROOT_DIR = abspath(join(dirname(__file__), \"..\"))\nRELEASE_DIR = join(ROOT_DIR, \"release\")\nDIST_DIR = join(RELEASE_DIR, \"dist\")\nVERSION_FILE = join(ROOT_DIR, \"mitmproxy\", \"version.py\")\n\n\ndef git(args: str) -> str:\n    with chdir(ROOT_DIR):\n        return subprocess.check_output([\"git\"] + shlex.split(args)).decode()\n\n\ndef get_version(dev: bool = False, build: bool = False) -> str:\n    x = runpy.run_path(VERSION_FILE)\n    return x[\"get_version\"](dev, build, True)\n\n\ndef wheel_name() -> str:\n    return \"mitmproxy-{version}-py3-none-any.whl\".format(\n        version=get_version(True),\n    )\n\n\n@contextlib.contextmanager\ndef chdir(path: str):\n    old_dir = os.getcwd()\n    os.chdir(path)\n    yield\n    os.chdir(old_dir)\n\n\n@click.group(chain=True)\ndef cli():\n    \"\"\"\n    mitmproxy build tool\n    \"\"\"\n    pass\n\n\n@cli.command(\"contributors\")\ndef contributors():\n    \"\"\"\n    Update CONTRIBUTORS.md\n    \"\"\"\n    with chdir(ROOT_DIR):\n        print(\"Updating CONTRIBUTORS...\")\n        contributors_data = git(\"shortlog -n -s\")\n        with open(\"CONTRIBUTORS\", \"wb\") as f:\n            f.write(contributors_data.encode())\n\n\n@cli.command(\"upload-release\")\n@click.option('--username', prompt=True)\n@click.password_option(confirmation_prompt=False)\n@click.option('--repository', default=\"pypi\")\ndef upload_release(username, password, repository):\n    \"\"\"\n    Upload wheels to PyPI\n    \"\"\"\n    filename = wheel_name()\n    print(\"Uploading {} to {}...\".format(filename, repository))\n    subprocess.check_call([\n        \"twine\",\n        \"upload\",\n        \"-u\", username,\n        \"-p\", password,\n        \"-r\", repository,\n        join(DIST_DIR, filename)\n    ])\n\n\n@cli.command(\"homebrew-pr\")\ndef homebrew_pr():\n    \"\"\"\n    Create a new Homebrew PR\n    \"\"\"\n    if platform.system() != \"Darwin\":\n        print(\"You need to run this on macOS to create a new Homebrew PR. Sorry.\")\n        sys.exit(1)\n\n    print(\"Creating a new PR with Homebrew...\")\n    subprocess.check_call([\n        \"brew\",\n        \"bump-formula-pr\",\n        \"--url\", \"https://github.com/mitmproxy/mitmproxy/archive/v{}\".format(get_version()),\n        \"mitmproxy\",\n    ])\n\n\n@cli.command(\"encrypt\")\n@click.argument('infile', type=click.File('rb'))\n@click.argument('outfile', type=click.File('wb'))\n@click.argument('key', envvar='RTOOL_KEY')\ndef encrypt(infile, outfile, key):\n    f = cryptography.fernet.Fernet(key.encode())\n    outfile.write(f.encrypt(infile.read()))\n\n\nif __name__ == \"__main__\":\n    cli()\n", "comments": "        mitmproxy build tool             pass    cli command( contributors ) def contributors()              update contributors md             chdir(root dir)          print( updating contributors    )         contributors data   git( shortlog  n  )         open( contributors    wb ) f              f write(contributors data encode())    cli command( upload release )  click option(   username   prompt true)  click password option(confirmation prompt false)  click option(   repository   default  pypi ) def upload release(username  password  repository)              upload wheels pypi             filename   wheel name()     print( uploading           format(filename  repository))     subprocess check call(           twine            upload             u   username            p   password            r   repository          join(dist dir  filename)      )    cli command( homebrew pr ) def homebrew pr()              create new homebrew pr             usr bin env python3 ", "content": "#!/usr/bin/env python3\n\nimport contextlib\nimport os\nimport sys\nimport platform\nimport runpy\nimport shlex\nimport subprocess\nfrom os.path import join, abspath, dirname\n\nimport cryptography.fernet\nimport click\n\n\nROOT_DIR = abspath(join(dirname(__file__), \"..\"))\nRELEASE_DIR = join(ROOT_DIR, \"release\")\nDIST_DIR = join(RELEASE_DIR, \"dist\")\nVERSION_FILE = join(ROOT_DIR, \"mitmproxy\", \"version.py\")\n\n\ndef git(args: str) -> str:\n    with chdir(ROOT_DIR):\n        return subprocess.check_output([\"git\"] + shlex.split(args)).decode()\n\n\ndef get_version(dev: bool = False, build: bool = False) -> str:\n    x = runpy.run_path(VERSION_FILE)\n    return x[\"get_version\"](dev, build, True)\n\n\ndef wheel_name() -> str:\n    return \"mitmproxy-{version}-py3-none-any.whl\".format(\n        version=get_version(True),\n    )\n\n\n@contextlib.contextmanager\ndef chdir(path: str):\n    old_dir = os.getcwd()\n    os.chdir(path)\n    yield\n    os.chdir(old_dir)\n\n\n@click.group(chain=True)\ndef cli():\n    \"\"\"\n    mitmproxy build tool\n    \"\"\"\n    pass\n\n\n@cli.command(\"contributors\")\ndef contributors():\n    \"\"\"\n    Update CONTRIBUTORS.md\n    \"\"\"\n    with chdir(ROOT_DIR):\n        print(\"Updating CONTRIBUTORS...\")\n        contributors_data = git(\"shortlog -n -s\")\n        with open(\"CONTRIBUTORS\", \"wb\") as f:\n            f.write(contributors_data.encode())\n\n\n@cli.command(\"upload-release\")\n@click.option('--username', prompt=True)\n@click.password_option(confirmation_prompt=False)\n@click.option('--repository', default=\"pypi\")\ndef upload_release(username, password, repository):\n    \"\"\"\n    Upload wheels to PyPI\n    \"\"\"\n    filename = wheel_name()\n    print(\"Uploading {} to {}...\".format(filename, repository))\n    subprocess.check_call([\n        \"twine\",\n        \"upload\",\n        \"-u\", username,\n        \"-p\", password,\n        \"-r\", repository,\n        join(DIST_DIR, filename)\n    ])\n\n\n@cli.command(\"homebrew-pr\")\ndef homebrew_pr():\n    \"\"\"\n    Create a new Homebrew PR\n    \"\"\"\n    if platform.system() != \"Darwin\":\n        print(\"You need to run this on macOS to create a new Homebrew PR. Sorry.\")\n        sys.exit(1)\n\n    print(\"Creating a new PR with Homebrew...\")\n    subprocess.check_call([\n        \"brew\",\n        \"bump-formula-pr\",\n        \"--url\", \"https://github.com/mitmproxy/mitmproxy/archive/v{}\".format(get_version()),\n        \"mitmproxy\",\n    ])\n\n\n@cli.command(\"encrypt\")\n@click.argument('infile', type=click.File('rb'))\n@click.argument('outfile', type=click.File('wb'))\n@click.argument('key', envvar='RTOOL_KEY')\ndef encrypt(infile, outfile, key):\n    f = cryptography.fernet.Fernet(key.encode())\n    outfile.write(f.encrypt(infile.read()))\n\n\nif __name__ == \"__main__\":\n    cli()\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "rtool.py", "id": "0531154ef23e34046b9659cc845c51d9", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/mitmproxy-mitmproxy/mitmproxy-mitmproxy-0bc3f1f/release/rtool.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:46Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}