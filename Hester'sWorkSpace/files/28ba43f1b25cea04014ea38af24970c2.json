{"author": "nvbn", "code": "import os\nimport shlex\nfrom subprocess import Popen, PIPE, STDOUT\nfrom psutil import Process, TimeoutExpired\nfrom .. import logs\nfrom ..conf import settings\n\n\ndef _wait_output(popen, is_slow):\n    \n    env = dict(os.environ)\n    env.update(settings.env)\n\n    is_slow = shlex.split(expanded) in settings.slow_commands\n    with logs.debug_time(u'Call: {}; with env: {}; is slow: '.format(\n            script, env, is_slow)):\n        result = Popen(expanded, shell=True, stdin=PIPE,\n                       stdout=PIPE, stderr=STDOUT, env=env)\n        if _wait_output(result, is_slow):\n            output = result.stdout.read().decode('utf-8')\n            logs.debug(u'Received output: {}'.format(output))\n            return output\n        else:\n            logs.debug(u'Execution timed out!')\n            return None\n", "comments": "Returns `True` if we can get output of the command in the\n    `settings.wait_command` time.\n\n    Command will be killed if it wasn't finished in the time.\n\n    :type popen: Popen\n    :rtype: bool\n\n    \"\"\"\n    proc = Process(popen.pid)\n    try:\n        proc.wait(settings.wait_slow_command if is_slow\n                  else settings.wait_command)\n        return True\n    except TimeoutExpired:\n        for child in proc.children(recursive=True):\n            child.kill()\n        proc.kill()\n        return False\n\n\ndef get_output(script, expanded):\n    \"\"\"Runs the script and obtains stdin/stderr.\n\n    :type script: str\n    :type expanded: str\n    :rtype: str | None\n\n    \n \n", "content": "import os\nimport shlex\nfrom subprocess import Popen, PIPE, STDOUT\nfrom psutil import Process, TimeoutExpired\nfrom .. import logs\nfrom ..conf import settings\n\n\ndef _wait_output(popen, is_slow):\n    \"\"\"Returns `True` if we can get output of the command in the\n    `settings.wait_command` time.\n\n    Command will be killed if it wasn't finished in the time.\n\n    :type popen: Popen\n    :rtype: bool\n\n    \"\"\"\n    proc = Process(popen.pid)\n    try:\n        proc.wait(settings.wait_slow_command if is_slow\n                  else settings.wait_command)\n        return True\n    except TimeoutExpired:\n        for child in proc.children(recursive=True):\n            child.kill()\n        proc.kill()\n        return False\n\n\ndef get_output(script, expanded):\n    \"\"\"Runs the script and obtains stdin/stderr.\n\n    :type script: str\n    :type expanded: str\n    :rtype: str | None\n\n    \"\"\"\n    env = dict(os.environ)\n    env.update(settings.env)\n\n    is_slow = shlex.split(expanded) in settings.slow_commands\n    with logs.debug_time(u'Call: {}; with env: {}; is slow: '.format(\n            script, env, is_slow)):\n        result = Popen(expanded, shell=True, stdin=PIPE,\n                       stdout=PIPE, stderr=STDOUT, env=env)\n        if _wait_output(result, is_slow):\n            output = result.stdout.read().decode('utf-8')\n            logs.debug(u'Received output: {}'.format(output))\n            return output\n        else:\n            logs.debug(u'Execution timed out!')\n            return None\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "rerun.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/output_readers/rerun.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}