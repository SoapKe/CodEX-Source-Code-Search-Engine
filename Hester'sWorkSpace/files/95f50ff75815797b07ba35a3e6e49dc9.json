{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom datetime import datetime, timedelta\n\nfrom odoo import fields\nfrom odoo.tests import common\n\n\nclass TestEventCommon(common.TransactionCase):\n\n    def setUp(self):\n        super(TestEventCommon, self).setUp()\n\n        \n        self.Users = self.env['res.users']\n        self.Event = self.env['event.event']\n        self.Registration = self.env['event.registration']\n        self.EventMail = self.env['event.mail']\n\n        \n        self.group_employee_id = self.env['ir.model.data'].xmlid_to_res_id('base.group_user')\n        self.group_event_user_id = self.env['ir.model.data'].xmlid_to_res_id('event.group_event_user')\n        self.group_event_manager_id = self.env['ir.model.data'].xmlid_to_res_id('event.group_event_manager')\n        group_system = self.env.ref('base.group_system')\n\n        \n        self.user_eventuser = self.Users.with_context({'no_reset_password': True}).create({\n            'name': 'Armande EventUser',\n            'login': 'Armande',\n            'email': 'armande.eventuser@example.com',\n            'tz': 'Europe/Brussels',\n            'groups_id': [(6, 0, [self.group_employee_id, self.group_event_user_id])]\n        })\n        self.user_eventmanager = self.Users.with_context({'no_reset_password': True}).create({\n            'name': 'Bastien EventManager',\n            'login': 'bastien',\n            'email': 'bastien.eventmanager@example.com',\n            'tz': 'Europe/Brussels',\n            'groups_id': [(6, 0, [\n                self.group_employee_id,\n                self.group_event_manager_id,\n                group_system.id])]\n        })\n\n        self.event_0 = self.env['event.event'].create({\n            'name': 'TestEvent',\n            'date_begin': fields.Datetime.to_string(datetime.today() + timedelta(days=1)),\n            'date_end': fields.Datetime.to_string(datetime.today() + timedelta(days=15)),\n            'registration_ids': [(0, 0, {\n                'partner_id': self.user_eventuser.partner_id.id,\n            })]\n        })\n", "comments": "      coding  utf 8        usefull models    user groups    test users use various tests ", "content": "# -*- coding: utf-8 -*-\n\nfrom datetime import datetime, timedelta\n\nfrom odoo import fields\nfrom odoo.tests import common\n\n\nclass TestEventCommon(common.TransactionCase):\n\n    def setUp(self):\n        super(TestEventCommon, self).setUp()\n\n        # Usefull models\n        self.Users = self.env['res.users']\n        self.Event = self.env['event.event']\n        self.Registration = self.env['event.registration']\n        self.EventMail = self.env['event.mail']\n\n        # User groups\n        self.group_employee_id = self.env['ir.model.data'].xmlid_to_res_id('base.group_user')\n        self.group_event_user_id = self.env['ir.model.data'].xmlid_to_res_id('event.group_event_user')\n        self.group_event_manager_id = self.env['ir.model.data'].xmlid_to_res_id('event.group_event_manager')\n        group_system = self.env.ref('base.group_system')\n\n        # Test users to use through the various tests\n        self.user_eventuser = self.Users.with_context({'no_reset_password': True}).create({\n            'name': 'Armande EventUser',\n            'login': 'Armande',\n            'email': 'armande.eventuser@example.com',\n            'tz': 'Europe/Brussels',\n            'groups_id': [(6, 0, [self.group_employee_id, self.group_event_user_id])]\n        })\n        self.user_eventmanager = self.Users.with_context({'no_reset_password': True}).create({\n            'name': 'Bastien EventManager',\n            'login': 'bastien',\n            'email': 'bastien.eventmanager@example.com',\n            'tz': 'Europe/Brussels',\n            'groups_id': [(6, 0, [\n                self.group_employee_id,\n                self.group_event_manager_id,\n                group_system.id])]\n        })\n\n        self.event_0 = self.env['event.event'].create({\n            'name': 'TestEvent',\n            'date_begin': fields.Datetime.to_string(datetime.today() + timedelta(days=1)),\n            'date_end': fields.Datetime.to_string(datetime.today() + timedelta(days=15)),\n            'registration_ids': [(0, 0, {\n                'partner_id': self.user_eventuser.partner_id.id,\n            })]\n        })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "common.py", "id": "95f50ff75815797b07ba35a3e6e49dc9", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/event/tests/common.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}