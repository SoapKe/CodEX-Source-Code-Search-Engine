{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import http, _\nfrom odoo.addons.http_routing.models.ir_http import slug\nfrom odoo.http import request\n\n\nclass WebsiteHrRecruitment(http.Controller):\n    def sitemap_jobs(env, rule, qs):\n        if not qs or qs.lower() in '/jobs':\n            yield {'loc': '/jobs'}\n\n    @http.route([\n        '/jobs',\n        '/jobs/country/<model(\"res.country\"):country>',\n        '/jobs/department/<model(\"hr.department\"):department>',\n        '/jobs/country/<model(\"res.country\"):country>/department/<model(\"hr.department\"):department>',\n        '/jobs/office/<int:office_id>',\n        '/jobs/country/<model(\"res.country\"):country>/office/<int:office_id>',\n        '/jobs/department/<model(\"hr.department\"):department>/office/<int:office_id>',\n        '/jobs/country/<model(\"res.country\"):country>/department/<model(\"hr.department\"):department>/office/<int:office_id>',\n    ], type='http', auth=\"public\", website=True, sitemap=sitemap_jobs)\n    def jobs(self, country=None, department=None, office_id=None, **kwargs):\n        env = request.env(context=dict(request.env.context, show_address=True, no_tag_br=True))\n\n        Country = env['res.country']\n        Jobs = env['hr.job']\n\n        \n        job_ids = Jobs.search([], order=\"website_published desc,no_of_recruitment desc\").ids\n        \n        jobs = Jobs.sudo().browse(job_ids)\n\n        \n        if not (country or department or office_id or kwargs.get('all_countries')):\n            country_code = request.session['geoip'].get('country_code')\n            if country_code:\n                countries_ = Country.search([('code', '=', country_code)])\n                country = countries_[0] if countries_ else None\n                if not any(j for j in jobs if j.address_id and j.address_id.country_id == country):\n                    country = False\n\n        \n        if country and not kwargs.get('all_countries'):\n            jobs = [j for j in jobs if j.address_id is None or j.address_id.country_id and j.address_id.country_id.id == country.id]\n            offices = set(j.address_id for j in jobs if j.address_id is None or j.address_id.country_id and j.address_id.country_id.id == country.id)\n        else:\n            offices = set(j.address_id for j in jobs if j.address_id)\n\n        \n        departments = set(j.department_id for j in jobs if j.department_id)\n        countries = set(o.country_id for o in offices if o.country_id)\n\n        if department:\n            jobs = [j for j in jobs if j.department_id and j.department_id.id == department.id]\n        if office_id and office_id in [x.id for x in offices]:\n            jobs = [j for j in jobs if j.address_id and j.address_id.id == office_id]\n        else:\n            office_id = False\n\n        \n        return request.render(\"website_hr_recruitment.index\", {\n            'jobs': jobs,\n            'countries': countries,\n            'departments': departments,\n            'offices': offices,\n            'country_id': country,\n            'department_id': department,\n            'office_id': office_id,\n        })\n\n    @http.route('/jobs/add', type='http', auth=\"user\", website=True)\n    def jobs_add(self, **kwargs):\n        job = request.env['hr.job'].create({\n            'name': _('Job Title'),\n        })\n        return request.redirect(\"/jobs/detail/%s?enable_editor=1\" % slug(job))\n\n    @http.route('/jobs/detail/<model(\"hr.job\"):job>', type='http', auth=\"public\", website=True)\n    def jobs_detail(self, job, **kwargs):\n        return request.render(\"website_hr_recruitment.detail\", {\n            'job': job,\n            'main_object': job,\n        })\n\n    @http.route('/jobs/apply/<model(\"hr.job\"):job>', type='http', auth=\"public\", website=True)\n    def jobs_apply(self, job, **kwargs):\n        error = {}\n        default = {}\n        if 'website_hr_recruitment_error' in request.session:\n            error = request.session.pop('website_hr_recruitment_error')\n            default = request.session.pop('website_hr_recruitment_default')\n        return request.render(\"website_hr_recruitment.apply\", {\n            'job': job,\n            'error': error,\n            'default': default,\n        })\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     list jobs available current uid    browse jobs superuser  address restricted    default search user country    filter job   office country    deduce departments countries offices jobs    render page ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import http, _\nfrom odoo.addons.http_routing.models.ir_http import slug\nfrom odoo.http import request\n\n\nclass WebsiteHrRecruitment(http.Controller):\n    def sitemap_jobs(env, rule, qs):\n        if not qs or qs.lower() in '/jobs':\n            yield {'loc': '/jobs'}\n\n    @http.route([\n        '/jobs',\n        '/jobs/country/<model(\"res.country\"):country>',\n        '/jobs/department/<model(\"hr.department\"):department>',\n        '/jobs/country/<model(\"res.country\"):country>/department/<model(\"hr.department\"):department>',\n        '/jobs/office/<int:office_id>',\n        '/jobs/country/<model(\"res.country\"):country>/office/<int:office_id>',\n        '/jobs/department/<model(\"hr.department\"):department>/office/<int:office_id>',\n        '/jobs/country/<model(\"res.country\"):country>/department/<model(\"hr.department\"):department>/office/<int:office_id>',\n    ], type='http', auth=\"public\", website=True, sitemap=sitemap_jobs)\n    def jobs(self, country=None, department=None, office_id=None, **kwargs):\n        env = request.env(context=dict(request.env.context, show_address=True, no_tag_br=True))\n\n        Country = env['res.country']\n        Jobs = env['hr.job']\n\n        # List jobs available to current UID\n        job_ids = Jobs.search([], order=\"website_published desc,no_of_recruitment desc\").ids\n        # Browse jobs as superuser, because address is restricted\n        jobs = Jobs.sudo().browse(job_ids)\n\n        # Default search by user country\n        if not (country or department or office_id or kwargs.get('all_countries')):\n            country_code = request.session['geoip'].get('country_code')\n            if country_code:\n                countries_ = Country.search([('code', '=', country_code)])\n                country = countries_[0] if countries_ else None\n                if not any(j for j in jobs if j.address_id and j.address_id.country_id == country):\n                    country = False\n\n        # Filter job / office for country\n        if country and not kwargs.get('all_countries'):\n            jobs = [j for j in jobs if j.address_id is None or j.address_id.country_id and j.address_id.country_id.id == country.id]\n            offices = set(j.address_id for j in jobs if j.address_id is None or j.address_id.country_id and j.address_id.country_id.id == country.id)\n        else:\n            offices = set(j.address_id for j in jobs if j.address_id)\n\n        # Deduce departments and countries offices of those jobs\n        departments = set(j.department_id for j in jobs if j.department_id)\n        countries = set(o.country_id for o in offices if o.country_id)\n\n        if department:\n            jobs = [j for j in jobs if j.department_id and j.department_id.id == department.id]\n        if office_id and office_id in [x.id for x in offices]:\n            jobs = [j for j in jobs if j.address_id and j.address_id.id == office_id]\n        else:\n            office_id = False\n\n        # Render page\n        return request.render(\"website_hr_recruitment.index\", {\n            'jobs': jobs,\n            'countries': countries,\n            'departments': departments,\n            'offices': offices,\n            'country_id': country,\n            'department_id': department,\n            'office_id': office_id,\n        })\n\n    @http.route('/jobs/add', type='http', auth=\"user\", website=True)\n    def jobs_add(self, **kwargs):\n        job = request.env['hr.job'].create({\n            'name': _('Job Title'),\n        })\n        return request.redirect(\"/jobs/detail/%s?enable_editor=1\" % slug(job))\n\n    @http.route('/jobs/detail/<model(\"hr.job\"):job>', type='http', auth=\"public\", website=True)\n    def jobs_detail(self, job, **kwargs):\n        return request.render(\"website_hr_recruitment.detail\", {\n            'job': job,\n            'main_object': job,\n        })\n\n    @http.route('/jobs/apply/<model(\"hr.job\"):job>', type='http', auth=\"public\", website=True)\n    def jobs_apply(self, job, **kwargs):\n        error = {}\n        default = {}\n        if 'website_hr_recruitment_error' in request.session:\n            error = request.session.pop('website_hr_recruitment_error')\n            default = request.session.pop('website_hr_recruitment_default')\n        return request.render(\"website_hr_recruitment.apply\", {\n            'job': job,\n            'error': error,\n            'default': default,\n        })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "dc1d2666feb05a733187011eb8e6baa3", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_hr_recruitment/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}