{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import js_to_json\n\n\nclass MegaphoneIE(InfoExtractor):\n    IE_NAME = 'megaphone.fm'\n    IE_DESC = 'megaphone.fm embedded players'\n    _VALID_URL = r'https://player\\.megaphone\\.fm/(?P<id>[A-Z0-9]+)'\n    _TEST = {\n        'url': 'https://player.megaphone.fm/GLT9749789991?\"',\n        'md5': '4816a0de523eb3e972dc0dda2c191f96',\n        'info_dict': {\n            'id': 'GLT9749789991',\n            'ext': 'mp3',\n            'title': '\n            'thumbnail': r're:^https://.*\\.png.*$',\n            'duration': 1776.26375,\n            'author': 'Reply All',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_property('audio:title', webpage)\n        author = self._og_search_property('audio:artist', webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        episode_json = self._search_regex(r'(?s)var\\s+episode\\s*=\\s*(\\{.+?\\});', webpage, 'episode JSON')\n        episode_data = self._parse_json(episode_json, video_id, js_to_json)\n        video_url = self._proto_relative_url(episode_data['mediaUrl'], 'https:')\n\n        formats = [{\n            'url': video_url,\n        }]\n\n        return {\n            'id': video_id,\n            'thumbnail': thumbnail,\n            'title': title,\n            'author': author,\n            'duration': episode_data['duration'],\n            'formats': formats,\n        }\n\n    @classmethod\n    def _extract_urls(cls, webpage):\n        return [m[0] for m in re.findall(\n            r'<iframe[^>]*?\\ssrc=[\"\\'](%s)' % cls._VALID_URL, webpage)]\n", "comments": "# coding: utf-8\n#97 What Kind Of Idiot Gets Phished?',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import js_to_json\n\n\nclass MegaphoneIE(InfoExtractor):\n    IE_NAME = 'megaphone.fm'\n    IE_DESC = 'megaphone.fm embedded players'\n    _VALID_URL = r'https://player\\.megaphone\\.fm/(?P<id>[A-Z0-9]+)'\n    _TEST = {\n        'url': 'https://player.megaphone.fm/GLT9749789991?\"',\n        'md5': '4816a0de523eb3e972dc0dda2c191f96',\n        'info_dict': {\n            'id': 'GLT9749789991',\n            'ext': 'mp3',\n            'title': '#97 What Kind Of Idiot Gets Phished?',\n            'thumbnail': r're:^https://.*\\.png.*$',\n            'duration': 1776.26375,\n            'author': 'Reply All',\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_property('audio:title', webpage)\n        author = self._og_search_property('audio:artist', webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        episode_json = self._search_regex(r'(?s)var\\s+episode\\s*=\\s*(\\{.+?\\});', webpage, 'episode JSON')\n        episode_data = self._parse_json(episode_json, video_id, js_to_json)\n        video_url = self._proto_relative_url(episode_data['mediaUrl'], 'https:')\n\n        formats = [{\n            'url': video_url,\n        }]\n\n        return {\n            'id': video_id,\n            'thumbnail': thumbnail,\n            'title': title,\n            'author': author,\n            'duration': episode_data['duration'],\n            'formats': formats,\n        }\n\n    @classmethod\n    def _extract_urls(cls, webpage):\n        return [m[0] for m in re.findall(\n            r'<iframe[^>]*?\\ssrc=[\"\\'](%s)' % cls._VALID_URL, webpage)]\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "megaphone.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/megaphone.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}