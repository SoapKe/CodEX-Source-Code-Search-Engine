{"author": "mwaskom", "code": "import numpy as np\nimport matplotlib as mpl\nfrom distutils.version import LooseVersion\nimport nose\nimport matplotlib.pyplot as plt\nimport nose.tools as nt\nimport numpy.testing as npt\n\nfrom .. import rcmod\n\n\nclass RCParamTester(object):\n\n    def flatten_list(self, orig_list):\n\n        iter_list = map(np.atleast_1d, orig_list)\n        flat_list = [item for sublist in iter_list for item in sublist]\n        return flat_list\n\n    def assert_rc_params(self, params):\n\n        for k, v in params.items():\n            if isinstance(v, np.ndarray):\n                npt.assert_array_equal(mpl.rcParams[k], v)\n            else:\n                nt.assert_equal((k, mpl.rcParams[k]), (k, v))\n\n\nclass TestAxesStyle(RCParamTester):\n\n    styles = [\"white\", \"dark\", \"whitegrid\", \"darkgrid\", \"ticks\"]\n\n    def test_default_return(self):\n\n        current = rcmod.axes_style()\n        self.assert_rc_params(current)\n\n    def test_key_usage(self):\n\n        _style_keys = set(rcmod._style_keys)\n        for style in self.styles:\n            nt.assert_true(not set(rcmod.axes_style(style)) ^ _style_keys)\n\n    def test_bad_style(self):\n\n        with nt.assert_raises(ValueError):\n            rcmod.axes_style(\"i_am_not_a_style\")\n\n    def test_rc_override(self):\n\n        rc = {\"axes.facecolor\": \"blue\", \"foo.notaparam\": \"bar\"}\n        out = rcmod.axes_style(\"darkgrid\", rc)\n        nt.assert_equal(out[\"axes.facecolor\"], \"blue\")\n        nt.assert_not_in(\"foo.notaparam\", out)\n\n    def test_set_style(self):\n\n        for style in self.styles:\n\n            style_dict = rcmod.axes_style(style)\n            rcmod.set_style(style)\n            self.assert_rc_params(style_dict)\n\n    def test_style_context_manager(self):\n\n        rcmod.set_style(\"darkgrid\")\n        orig_params = rcmod.axes_style()\n        context_params = rcmod.axes_style(\"whitegrid\")\n\n        with rcmod.axes_style(\"whitegrid\"):\n            self.assert_rc_params(context_params)\n        self.assert_rc_params(orig_params)\n\n        @rcmod.axes_style(\"whitegrid\")\n        def func():\n            self.assert_rc_params(context_params)\n        func()\n        self.assert_rc_params(orig_params)\n\n    def test_style_context_independence(self):\n\n        nt.assert_true(set(rcmod._style_keys) ^ set(rcmod._context_keys))\n\n    def test_set_rc(self):\n\n        rcmod.set(rc={\"lines.linewidth\": 4})\n        nt.assert_equal(mpl.rcParams[\"lines.linewidth\"], 4)\n        rcmod.set()\n\n    def test_reset_defaults(self):\n\n        \n        \n        if LooseVersion(mpl.__version__) < LooseVersion(\"1.3\"):\n            raise nose.SkipTest\n\n        rcmod.reset_defaults()\n        self.assert_rc_params(mpl.rcParamsDefault)\n        rcmod.set()\n\n    def test_reset_orig(self):\n\n        \n        \n        if LooseVersion(mpl.__version__) < LooseVersion(\"1.3\"):\n            raise nose.SkipTest\n\n        rcmod.reset_orig()\n        self.assert_rc_params(mpl.rcParamsOrig)\n        rcmod.set()\n\n\nclass TestPlottingContext(RCParamTester):\n\n    contexts = [\"paper\", \"notebook\", \"talk\", \"poster\"]\n\n    def test_default_return(self):\n\n        current = rcmod.plotting_context()\n        self.assert_rc_params(current)\n\n    def test_key_usage(self):\n\n        _context_keys = set(rcmod._context_keys)\n        for context in self.contexts:\n            missing = set(rcmod.plotting_context(context)) ^ _context_keys\n            nt.assert_true(not missing)\n\n    def test_bad_context(self):\n\n        with nt.assert_raises(ValueError):\n            rcmod.plotting_context(\"i_am_not_a_context\")\n\n    def test_font_scale(self):\n\n        notebook_ref = rcmod.plotting_context(\"notebook\")\n        notebook_big = rcmod.plotting_context(\"notebook\", 2)\n\n        font_keys = [\"axes.labelsize\", \"axes.titlesize\", \"legend.fontsize\",\n                     \"xtick.labelsize\", \"ytick.labelsize\", \"font.size\"]\n\n        for k in font_keys:\n            nt.assert_equal(notebook_ref[k] * 2, notebook_big[k])\n\n    def test_rc_override(self):\n\n        key, val = \"grid.linewidth\", 5\n        rc = {key: val, \"foo\": \"bar\"}\n        out = rcmod.plotting_context(\"talk\", rc=rc)\n        nt.assert_equal(out[key], val)\n        nt.assert_not_in(\"foo\", out)\n\n    def test_set_context(self):\n\n        for context in self.contexts:\n\n            context_dict = rcmod.plotting_context(context)\n            rcmod.set_context(context)\n            self.assert_rc_params(context_dict)\n\n    def test_context_context_manager(self):\n\n        rcmod.set_context(\"notebook\")\n        orig_params = rcmod.plotting_context()\n        context_params = rcmod.plotting_context(\"paper\")\n\n        with rcmod.plotting_context(\"paper\"):\n            self.assert_rc_params(context_params)\n        self.assert_rc_params(orig_params)\n\n        @rcmod.plotting_context(\"paper\")\n        def func():\n            self.assert_rc_params(context_params)\n        func()\n        self.assert_rc_params(orig_params)\n\n\nclass TestFonts(object):\n\n    def test_set_font(self):\n\n        rcmod.set(font=\"Verdana\")\n\n        _, ax = plt.subplots()\n        ax.set_xlabel(\"foo\")\n\n        try:\n            nt.assert_equal(ax.xaxis.label.get_fontname(),\n                            \"Verdana\")\n        except AssertionError:\n            if has_verdana():\n                raise\n            else:\n                raise nose.SkipTest(\"Verdana font is not present\")\n        finally:\n            rcmod.set()\n\n    def test_set_serif_font(self):\n\n        rcmod.set(font=\"serif\")\n\n        _, ax = plt.subplots()\n        ax.set_xlabel(\"foo\")\n\n        nt.assert_in(ax.xaxis.label.get_fontname(),\n                     mpl.rcParams[\"font.serif\"])\n\n        rcmod.set()\n\n    def test_different_sans_serif(self):\n\n        if LooseVersion(mpl.__version__) < LooseVersion(\"1.4\"):\n            raise nose.SkipTest\n\n        rcmod.set()\n        rcmod.set_style(rc={\"font.sans-serif\":\n                            [\"Verdana\"]})\n\n        _, ax = plt.subplots()\n        ax.set_xlabel(\"foo\")\n\n        try:\n            nt.assert_equal(ax.xaxis.label.get_fontname(),\n                            \"Verdana\")\n        except AssertionError:\n            if has_verdana():\n                raise\n            else:\n                raise nose.SkipTest(\"Verdana font is not present\")\n        finally:\n            rcmod.set()\n\n\ndef has_verdana():\n    \n    \n    \n    \n    import matplotlib.font_manager as mplfm\n    try:\n        verdana_font = mplfm.findfont('Verdana', fallback_to_default=False)\n    except:\n        \n        \n        return False\n    \n    try:\n        unlikely_font = mplfm.findfont(\"very_unlikely_to_exist1234\",\n                                       fallback_to_default=False)\n    except:\n        \n        return True\n    \n    return verdana_font != unlikely_font\n", "comments": "   helper verify verdana font present       changes rc parameters make test hard manage    older versions matplotlib  skip    changes rc parameters make test hard manage    older versions matplotlib  skip    this import relatively lengthy  prevent import    testing tests module requiring knowledge     import font manager    https   github com matplotlib matplotlib pull 3435    gets accepted    otherwise check matching logic  default  one    matched verdana unlikely  verdana must exist    otherwise    match  must default ", "content": "import numpy as np\nimport matplotlib as mpl\nfrom distutils.version import LooseVersion\nimport nose\nimport matplotlib.pyplot as plt\nimport nose.tools as nt\nimport numpy.testing as npt\n\nfrom .. import rcmod\n\n\nclass RCParamTester(object):\n\n    def flatten_list(self, orig_list):\n\n        iter_list = map(np.atleast_1d, orig_list)\n        flat_list = [item for sublist in iter_list for item in sublist]\n        return flat_list\n\n    def assert_rc_params(self, params):\n\n        for k, v in params.items():\n            if isinstance(v, np.ndarray):\n                npt.assert_array_equal(mpl.rcParams[k], v)\n            else:\n                nt.assert_equal((k, mpl.rcParams[k]), (k, v))\n\n\nclass TestAxesStyle(RCParamTester):\n\n    styles = [\"white\", \"dark\", \"whitegrid\", \"darkgrid\", \"ticks\"]\n\n    def test_default_return(self):\n\n        current = rcmod.axes_style()\n        self.assert_rc_params(current)\n\n    def test_key_usage(self):\n\n        _style_keys = set(rcmod._style_keys)\n        for style in self.styles:\n            nt.assert_true(not set(rcmod.axes_style(style)) ^ _style_keys)\n\n    def test_bad_style(self):\n\n        with nt.assert_raises(ValueError):\n            rcmod.axes_style(\"i_am_not_a_style\")\n\n    def test_rc_override(self):\n\n        rc = {\"axes.facecolor\": \"blue\", \"foo.notaparam\": \"bar\"}\n        out = rcmod.axes_style(\"darkgrid\", rc)\n        nt.assert_equal(out[\"axes.facecolor\"], \"blue\")\n        nt.assert_not_in(\"foo.notaparam\", out)\n\n    def test_set_style(self):\n\n        for style in self.styles:\n\n            style_dict = rcmod.axes_style(style)\n            rcmod.set_style(style)\n            self.assert_rc_params(style_dict)\n\n    def test_style_context_manager(self):\n\n        rcmod.set_style(\"darkgrid\")\n        orig_params = rcmod.axes_style()\n        context_params = rcmod.axes_style(\"whitegrid\")\n\n        with rcmod.axes_style(\"whitegrid\"):\n            self.assert_rc_params(context_params)\n        self.assert_rc_params(orig_params)\n\n        @rcmod.axes_style(\"whitegrid\")\n        def func():\n            self.assert_rc_params(context_params)\n        func()\n        self.assert_rc_params(orig_params)\n\n    def test_style_context_independence(self):\n\n        nt.assert_true(set(rcmod._style_keys) ^ set(rcmod._context_keys))\n\n    def test_set_rc(self):\n\n        rcmod.set(rc={\"lines.linewidth\": 4})\n        nt.assert_equal(mpl.rcParams[\"lines.linewidth\"], 4)\n        rcmod.set()\n\n    def test_reset_defaults(self):\n\n        # Changes to the rc parameters make this test hard to manage\n        # on older versions of matplotlib, so we'll skip it\n        if LooseVersion(mpl.__version__) < LooseVersion(\"1.3\"):\n            raise nose.SkipTest\n\n        rcmod.reset_defaults()\n        self.assert_rc_params(mpl.rcParamsDefault)\n        rcmod.set()\n\n    def test_reset_orig(self):\n\n        # Changes to the rc parameters make this test hard to manage\n        # on older versions of matplotlib, so we'll skip it\n        if LooseVersion(mpl.__version__) < LooseVersion(\"1.3\"):\n            raise nose.SkipTest\n\n        rcmod.reset_orig()\n        self.assert_rc_params(mpl.rcParamsOrig)\n        rcmod.set()\n\n\nclass TestPlottingContext(RCParamTester):\n\n    contexts = [\"paper\", \"notebook\", \"talk\", \"poster\"]\n\n    def test_default_return(self):\n\n        current = rcmod.plotting_context()\n        self.assert_rc_params(current)\n\n    def test_key_usage(self):\n\n        _context_keys = set(rcmod._context_keys)\n        for context in self.contexts:\n            missing = set(rcmod.plotting_context(context)) ^ _context_keys\n            nt.assert_true(not missing)\n\n    def test_bad_context(self):\n\n        with nt.assert_raises(ValueError):\n            rcmod.plotting_context(\"i_am_not_a_context\")\n\n    def test_font_scale(self):\n\n        notebook_ref = rcmod.plotting_context(\"notebook\")\n        notebook_big = rcmod.plotting_context(\"notebook\", 2)\n\n        font_keys = [\"axes.labelsize\", \"axes.titlesize\", \"legend.fontsize\",\n                     \"xtick.labelsize\", \"ytick.labelsize\", \"font.size\"]\n\n        for k in font_keys:\n            nt.assert_equal(notebook_ref[k] * 2, notebook_big[k])\n\n    def test_rc_override(self):\n\n        key, val = \"grid.linewidth\", 5\n        rc = {key: val, \"foo\": \"bar\"}\n        out = rcmod.plotting_context(\"talk\", rc=rc)\n        nt.assert_equal(out[key], val)\n        nt.assert_not_in(\"foo\", out)\n\n    def test_set_context(self):\n\n        for context in self.contexts:\n\n            context_dict = rcmod.plotting_context(context)\n            rcmod.set_context(context)\n            self.assert_rc_params(context_dict)\n\n    def test_context_context_manager(self):\n\n        rcmod.set_context(\"notebook\")\n        orig_params = rcmod.plotting_context()\n        context_params = rcmod.plotting_context(\"paper\")\n\n        with rcmod.plotting_context(\"paper\"):\n            self.assert_rc_params(context_params)\n        self.assert_rc_params(orig_params)\n\n        @rcmod.plotting_context(\"paper\")\n        def func():\n            self.assert_rc_params(context_params)\n        func()\n        self.assert_rc_params(orig_params)\n\n\nclass TestFonts(object):\n\n    def test_set_font(self):\n\n        rcmod.set(font=\"Verdana\")\n\n        _, ax = plt.subplots()\n        ax.set_xlabel(\"foo\")\n\n        try:\n            nt.assert_equal(ax.xaxis.label.get_fontname(),\n                            \"Verdana\")\n        except AssertionError:\n            if has_verdana():\n                raise\n            else:\n                raise nose.SkipTest(\"Verdana font is not present\")\n        finally:\n            rcmod.set()\n\n    def test_set_serif_font(self):\n\n        rcmod.set(font=\"serif\")\n\n        _, ax = plt.subplots()\n        ax.set_xlabel(\"foo\")\n\n        nt.assert_in(ax.xaxis.label.get_fontname(),\n                     mpl.rcParams[\"font.serif\"])\n\n        rcmod.set()\n\n    def test_different_sans_serif(self):\n\n        if LooseVersion(mpl.__version__) < LooseVersion(\"1.4\"):\n            raise nose.SkipTest\n\n        rcmod.set()\n        rcmod.set_style(rc={\"font.sans-serif\":\n                            [\"Verdana\"]})\n\n        _, ax = plt.subplots()\n        ax.set_xlabel(\"foo\")\n\n        try:\n            nt.assert_equal(ax.xaxis.label.get_fontname(),\n                            \"Verdana\")\n        except AssertionError:\n            if has_verdana():\n                raise\n            else:\n                raise nose.SkipTest(\"Verdana font is not present\")\n        finally:\n            rcmod.set()\n\n\ndef has_verdana():\n    \"\"\"Helper to verify if Verdana font is present\"\"\"\n    # This import is relatively lengthy, so to prevent its import for\n    # testing other tests in this module not requiring this knowledge,\n    # import font_manager here\n    import matplotlib.font_manager as mplfm\n    try:\n        verdana_font = mplfm.findfont('Verdana', fallback_to_default=False)\n    except:\n        # if https://github.com/matplotlib/matplotlib/pull/3435\n        # gets accepted\n        return False\n    # otherwise check if not matching the logic for a 'default' one\n    try:\n        unlikely_font = mplfm.findfont(\"very_unlikely_to_exist1234\",\n                                       fallback_to_default=False)\n    except:\n        # if matched verdana but not unlikely, Verdana must exist\n        return True\n    # otherwise -- if they match, must be the same default\n    return verdana_font != unlikely_font\n", "description": "Statistical data visualization using matplotlib", "file_name": "test_rcmod.py", "id": "f8fa506ab0d542ed9409497639b97959", "language": "Python", "project_name": "seaborn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mwaskom-seaborn/mwaskom-seaborn-71a807b/seaborn/tests/test_rcmod.py", "save_time": "", "source": "", "update_at": "2018-03-18T02:14:24Z", "url": "https://github.com/mwaskom/seaborn", "wiki": false}