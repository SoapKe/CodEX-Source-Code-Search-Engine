{"author": "sympy", "code": "from sympy.solvers.decompogen import decompogen, compogen\nfrom sympy import sin, cos, sqrt, Abs\nfrom sympy import symbols\nfrom sympy.utilities.pytest import XFAIL, raises\n\nx, y = symbols('x y')\n\n\ndef test_decompogen():\n    assert decompogen(sin(cos(x)), x) == [sin(x), cos(x)]\n    assert decompogen(sin(x)**2 + sin(x) + 1, x) == [x**2 + x + 1, sin(x)]\n    assert decompogen(sqrt(6*x**2 - 5), x) == [sqrt(x), 6*x**2 - 5]\n    assert decompogen(sin(sqrt(cos(x**2 + 1))), x) == [sin(x), sqrt(x), cos(x), x**2 + 1]\n    assert decompogen(Abs(cos(x)**2 + 3*cos(x) - 4), x) == [Abs(x), x**2 + 3*x - 4, cos(x)]\n    assert decompogen(sin(x)**2 + sin(x) - sqrt(3)/2, x) == [x**2 + x - sqrt(3)/2, sin(x)]\n    assert decompogen(Abs(cos(y)**2 + 3*cos(x) - 4), x) == [Abs(x), 3*x + cos(y)**2 - 4, cos(x)]\n    assert decompogen(x, y) == [x]\n    assert decompogen(1, x) == [1]\n    raises(TypeError, lambda: decompogen(x < 5, x))\n\n\ndef test_decompogen_poly():\n    assert decompogen(x**4 + 2*x**2 + 1, x) == [x**2 + 2*x + 1, x**2]\n    assert decompogen(x**4 + 2*x**3 - x - 1, x) == [x**2 - x - 1, x**2 + x]\n\n\n@XFAIL\ndef test_decompogen_fails():\n    A = lambda x: x**2 + 2*x + 3\n    B = lambda x: 4*x**2 + 5*x + 6\n    assert decompogen(A(x*exp(x)), x) == [x**2 + 2*x + 3, x*exp(x)]\n    assert decompogen(A(B(x)), x) == [x**2 + 2*x + 3, 4*x**2 + 5*x + 6]\n    assert decompogen(A(1/x + 1/x**2), x) == [x**2 + 2*x + 3, 1/x + 1/x**2]\n    assert decompogen(A(1/x + 2/(x + 1)), x) == [x**2 + 2*x + 3, 1/x + 2/(x + 1)]\n\n\ndef test_compogen():\n    assert compogen([sin(x), cos(x)], x) == sin(cos(x))\n    assert compogen([x**2 + x + 1, sin(x)], x) == sin(x)**2 + sin(x) + 1\n    assert compogen([sqrt(x), 6*x**2 - 5], x) == sqrt(6*x**2 - 5)\n    assert compogen([sin(x), sqrt(x), cos(x), x**2 + 1], x) == sin(sqrt(\n                                                                cos(x**2 + 1)))\n    assert compogen([Abs(x), x**2 + 3*x - 4, cos(x)], x) == Abs(cos(x)**2 +\n                                                                3*cos(x) - 4)\n    assert compogen([x**2 + x - sqrt(3)/2, sin(x)], x) == (sin(x)**2 + sin(x) -\n                                                           sqrt(3)/2)\n    assert compogen([Abs(x), 3*x + cos(y)**2 - 4, cos(x)], x) == \\\n        Abs(3*cos(x) + cos(y)**2 - 4)\n    assert compogen([x**2 + 2*x + 1, x**2], x) == x**4 + 2*x**2 + 1\n    \n    assert compogen([x**2 - x - 1, x**2 + x], x) == -x**2 - x + (x**2 + x)**2 - 1\n", "comments": "  result unsimplified form ", "content": "from sympy.solvers.decompogen import decompogen, compogen\nfrom sympy import sin, cos, sqrt, Abs\nfrom sympy import symbols\nfrom sympy.utilities.pytest import XFAIL, raises\n\nx, y = symbols('x y')\n\n\ndef test_decompogen():\n    assert decompogen(sin(cos(x)), x) == [sin(x), cos(x)]\n    assert decompogen(sin(x)**2 + sin(x) + 1, x) == [x**2 + x + 1, sin(x)]\n    assert decompogen(sqrt(6*x**2 - 5), x) == [sqrt(x), 6*x**2 - 5]\n    assert decompogen(sin(sqrt(cos(x**2 + 1))), x) == [sin(x), sqrt(x), cos(x), x**2 + 1]\n    assert decompogen(Abs(cos(x)**2 + 3*cos(x) - 4), x) == [Abs(x), x**2 + 3*x - 4, cos(x)]\n    assert decompogen(sin(x)**2 + sin(x) - sqrt(3)/2, x) == [x**2 + x - sqrt(3)/2, sin(x)]\n    assert decompogen(Abs(cos(y)**2 + 3*cos(x) - 4), x) == [Abs(x), 3*x + cos(y)**2 - 4, cos(x)]\n    assert decompogen(x, y) == [x]\n    assert decompogen(1, x) == [1]\n    raises(TypeError, lambda: decompogen(x < 5, x))\n\n\ndef test_decompogen_poly():\n    assert decompogen(x**4 + 2*x**2 + 1, x) == [x**2 + 2*x + 1, x**2]\n    assert decompogen(x**4 + 2*x**3 - x - 1, x) == [x**2 - x - 1, x**2 + x]\n\n\n@XFAIL\ndef test_decompogen_fails():\n    A = lambda x: x**2 + 2*x + 3\n    B = lambda x: 4*x**2 + 5*x + 6\n    assert decompogen(A(x*exp(x)), x) == [x**2 + 2*x + 3, x*exp(x)]\n    assert decompogen(A(B(x)), x) == [x**2 + 2*x + 3, 4*x**2 + 5*x + 6]\n    assert decompogen(A(1/x + 1/x**2), x) == [x**2 + 2*x + 3, 1/x + 1/x**2]\n    assert decompogen(A(1/x + 2/(x + 1)), x) == [x**2 + 2*x + 3, 1/x + 2/(x + 1)]\n\n\ndef test_compogen():\n    assert compogen([sin(x), cos(x)], x) == sin(cos(x))\n    assert compogen([x**2 + x + 1, sin(x)], x) == sin(x)**2 + sin(x) + 1\n    assert compogen([sqrt(x), 6*x**2 - 5], x) == sqrt(6*x**2 - 5)\n    assert compogen([sin(x), sqrt(x), cos(x), x**2 + 1], x) == sin(sqrt(\n                                                                cos(x**2 + 1)))\n    assert compogen([Abs(x), x**2 + 3*x - 4, cos(x)], x) == Abs(cos(x)**2 +\n                                                                3*cos(x) - 4)\n    assert compogen([x**2 + x - sqrt(3)/2, sin(x)], x) == (sin(x)**2 + sin(x) -\n                                                           sqrt(3)/2)\n    assert compogen([Abs(x), 3*x + cos(y)**2 - 4, cos(x)], x) == \\\n        Abs(3*cos(x) + cos(y)**2 - 4)\n    assert compogen([x**2 + 2*x + 1, x**2], x) == x**4 + 2*x**2 + 1\n    # the result is in unsimplified form\n    assert compogen([x**2 - x - 1, x**2 + x], x) == -x**2 - x + (x**2 + x)**2 - 1\n", "description": "A computer algebra system written in pure Python", "file_name": "test_decompogen.py", "id": "86053e947f483624c46fbbd5d627631d", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/solvers/tests/test_decompogen.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}