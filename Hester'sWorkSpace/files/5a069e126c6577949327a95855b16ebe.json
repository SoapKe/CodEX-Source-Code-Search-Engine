{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"A set of utils for dealing with nested lists and tuples of Tensors.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nfrom tensorflow.python.util import nest\n\ndef map_nested(map_fn, nested):\n  \"\"\"Executes map_fn on every element in a (potentially) nested structure.\n\n  Args:\n    map_fn: A callable to execute on each element in 'nested'.\n    nested: A potentially nested combination of sequence objects. Sequence\n      objects include tuples, lists, namedtuples, and all subclasses of\n      collections.Sequence except strings. See nest.is_sequence for details.\n      For example [1, ('hello', 4.3)] is a nested structure containing elements\n      1, 'hello', and 4.3.\n  Returns:\n    out_structure: A potentially nested combination of sequence objects with the\n      same structure as the 'nested' input argument. out_structure\n      contains the result of applying map_fn to each element in 'nested'. For\n      example map_nested(lambda x: x+1, [1, (3, 4.3)]) returns [2, (4, 5.3)].\n  \"\"\"\n  out = map(map_fn, nest.flatten(nested))\n  return nest.pack_sequence_as(nested, out)\n\n\ndef tile_tensors(tensors, multiples):\n  \"\"\"Tiles a set of Tensors.\n\n  Args:\n    tensors: A potentially nested tuple or list of Tensors with rank\n      greater than or equal to the length of 'multiples'. The Tensors do not\n      need to have the same rank, but their rank must not be dynamic.\n    multiples: A python list of ints indicating how to tile each Tensor\n      in 'tensors'. Similar to the 'multiples' argument to tf.tile.\n  Returns:\n    tiled_tensors: A potentially nested tuple or list of Tensors with the same\n      structure as the 'tensors' input argument. Contains the result of\n      applying tf.tile to each Tensor in 'tensors'. When the rank of a Tensor\n      in 'tensors' is greater than the length of multiples, multiples is padded\n      at the end with 1s. For example when tiling a 4-dimensional Tensor with\n      multiples [3, 4], multiples would be padded to [3, 4, 1, 1] before tiling.\n  \"\"\"\n  def tile_fn(x):\n    return tf.tile(x, multiples + [1]*(x.shape.ndims - len(multiples)))\n\n  return map_nested(tile_fn, tensors)\n\n\ndef gather_tensors(tensors, indices):\n  \"\"\"Performs a tf.gather operation on a set of Tensors.\n\n  Args:\n    tensors: A potentially nested tuple or list of Tensors.\n    indices: The indices to use for the gather operation.\n  Returns:\n    gathered_tensors: A potentially nested tuple or list of Tensors with the\n      same structure as the 'tensors' input argument. Contains the result of\n      applying tf.gather(x, indices) on each element x in 'tensors'.\n  \"\"\"\n  return map_nested(lambda x: tf.gather(x, indices), tensors)\n\n\ndef tas_for_tensors(tensors, length):\n  \"\"\"Unstacks a set of Tensors into TensorArrays.\n\n  Args:\n    tensors: A potentially nested tuple or list of Tensors with length in the\n      first dimension greater than or equal to the 'length' input argument.\n    length: The desired length of the TensorArrays.\n  Returns:\n    tensorarrays: A potentially nested tuple or list of TensorArrays with the\n      same structure as 'tensors'. Contains the result of unstacking each Tensor\n      in 'tensors'.\n  \"\"\"\n  def map_fn(x):\n    ta = tf.TensorArray(x.dtype, length, name=x.name.split(':')[0] + '_ta')\n    return ta.unstack(x[:length, :])\n  return map_nested(map_fn, tensors)\n\n\ndef read_tas(tas, index):\n  \"\"\"Performs a read operation on a set of TensorArrays.\n\n  Args:\n    tas: A potentially nested tuple or list of TensorArrays with length greater\n      than 'index'.\n    index: The location to read from.\n  Returns:\n    read_tensors: A potentially nested tuple or list of Tensors with the same\n      structure as the 'tas' input argument. Contains the result of\n      performing a read operation at 'index' on each TensorArray in 'tas'.\n  \"\"\"\n  return map_nested(lambda ta: ta.read(index), tas)\n", "comments": "   a set utils dealing nested lists tuples tensors        future   import absolute import   future   import division   future   import print function  import tensorflow tf tensorflow python util import nest  def map nested(map fn  nested)       executes map fn every element (potentially) nested structure     args      map fn  a callable execute element  nested       nested  a potentially nested combination sequence objects  sequence       objects include tuples  lists  namedtuples  subclasses       collections sequence except strings  see nest sequence details        for example  1  ( hello   4 3)  nested structure containing elements       1   hello   4 3    returns      structure  a potentially nested combination sequence objects       structure  nested  input argument  structure       contains result applying map fn element  nested   for       example map nested(lambda x  x 1   1  (3  4 3) ) returns  2  (4  5 3)             map(map fn  nest flatten(nested))   return nest pack sequence as(nested  out)   def tile tensors(tensors  multiples)       tiles set tensors     args      tensors  a potentially nested tuple list tensors rank       greater equal length  multiples   the tensors       need rank  rank must dynamic      multiples  a python list ints indicating tile tensor        tensors   similar  multiples  argument tf tile    returns      tiled tensors  a potentially nested tuple list tensors       structure  tensors  input argument  contains result       applying tf tile tensor  tensors   when rank tensor        tensors  greater length multiples  multiples padded       end 1s  for example tiling 4 dimensional tensor       multiples  3  4   multiples would padded  3  4  1  1  tiling          def tile fn(x)      return tf tile(x  multiples    1  (x shape ndims   len(multiples)))    return map nested(tile fn  tensors)   def gather tensors(tensors  indices)       performs tf gather operation set tensors     args      tensors  a potentially nested tuple list tensors      indices  the indices use gather operation    returns      gathered tensors  a potentially nested tuple list tensors       structure  tensors  input argument  contains result       applying tf gather(x  indices) element x  tensors           return map nested(lambda x  tf gather(x  indices)  tensors)   def tas tensors(tensors  length)       unstacks set tensors tensorarrays     args      tensors  a potentially nested tuple list tensors length       first dimension greater equal  length  input argument      length  the desired length tensorarrays    returns      tensorarrays  a potentially nested tuple list tensorarrays       structure  tensors   contains result unstacking tensor        tensors           def map fn(x)      ta   tf tensorarray(x dtype  length  name x name split(   ) 0      ta )     return ta unstack(x  length    )   return map nested(map fn  tensors)   def read tas(tas  index)       performs read operation set tensorarrays     args      tas  a potentially nested tuple list tensorarrays length greater        index       index  the location read    returns      read tensors  a potentially nested tuple list tensors       structure  tas  input argument  contains result       performing read operation  index  tensorarray  tas            copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                    ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"A set of utils for dealing with nested lists and tuples of Tensors.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport tensorflow as tf\nfrom tensorflow.python.util import nest\n\ndef map_nested(map_fn, nested):\n  \"\"\"Executes map_fn on every element in a (potentially) nested structure.\n\n  Args:\n    map_fn: A callable to execute on each element in 'nested'.\n    nested: A potentially nested combination of sequence objects. Sequence\n      objects include tuples, lists, namedtuples, and all subclasses of\n      collections.Sequence except strings. See nest.is_sequence for details.\n      For example [1, ('hello', 4.3)] is a nested structure containing elements\n      1, 'hello', and 4.3.\n  Returns:\n    out_structure: A potentially nested combination of sequence objects with the\n      same structure as the 'nested' input argument. out_structure\n      contains the result of applying map_fn to each element in 'nested'. For\n      example map_nested(lambda x: x+1, [1, (3, 4.3)]) returns [2, (4, 5.3)].\n  \"\"\"\n  out = map(map_fn, nest.flatten(nested))\n  return nest.pack_sequence_as(nested, out)\n\n\ndef tile_tensors(tensors, multiples):\n  \"\"\"Tiles a set of Tensors.\n\n  Args:\n    tensors: A potentially nested tuple or list of Tensors with rank\n      greater than or equal to the length of 'multiples'. The Tensors do not\n      need to have the same rank, but their rank must not be dynamic.\n    multiples: A python list of ints indicating how to tile each Tensor\n      in 'tensors'. Similar to the 'multiples' argument to tf.tile.\n  Returns:\n    tiled_tensors: A potentially nested tuple or list of Tensors with the same\n      structure as the 'tensors' input argument. Contains the result of\n      applying tf.tile to each Tensor in 'tensors'. When the rank of a Tensor\n      in 'tensors' is greater than the length of multiples, multiples is padded\n      at the end with 1s. For example when tiling a 4-dimensional Tensor with\n      multiples [3, 4], multiples would be padded to [3, 4, 1, 1] before tiling.\n  \"\"\"\n  def tile_fn(x):\n    return tf.tile(x, multiples + [1]*(x.shape.ndims - len(multiples)))\n\n  return map_nested(tile_fn, tensors)\n\n\ndef gather_tensors(tensors, indices):\n  \"\"\"Performs a tf.gather operation on a set of Tensors.\n\n  Args:\n    tensors: A potentially nested tuple or list of Tensors.\n    indices: The indices to use for the gather operation.\n  Returns:\n    gathered_tensors: A potentially nested tuple or list of Tensors with the\n      same structure as the 'tensors' input argument. Contains the result of\n      applying tf.gather(x, indices) on each element x in 'tensors'.\n  \"\"\"\n  return map_nested(lambda x: tf.gather(x, indices), tensors)\n\n\ndef tas_for_tensors(tensors, length):\n  \"\"\"Unstacks a set of Tensors into TensorArrays.\n\n  Args:\n    tensors: A potentially nested tuple or list of Tensors with length in the\n      first dimension greater than or equal to the 'length' input argument.\n    length: The desired length of the TensorArrays.\n  Returns:\n    tensorarrays: A potentially nested tuple or list of TensorArrays with the\n      same structure as 'tensors'. Contains the result of unstacking each Tensor\n      in 'tensors'.\n  \"\"\"\n  def map_fn(x):\n    ta = tf.TensorArray(x.dtype, length, name=x.name.split(':')[0] + '_ta')\n    return ta.unstack(x[:length, :])\n  return map_nested(map_fn, tensors)\n\n\ndef read_tas(tas, index):\n  \"\"\"Performs a read operation on a set of TensorArrays.\n\n  Args:\n    tas: A potentially nested tuple or list of TensorArrays with length greater\n      than 'index'.\n    index: The location to read from.\n  Returns:\n    read_tensors: A potentially nested tuple or list of Tensors with the same\n      structure as the 'tas' input argument. Contains the result of\n      performing a read operation at 'index' on each TensorArray in 'tas'.\n  \"\"\"\n  return map_nested(lambda ta: ta.read(index), tas)\n", "description": "Models and examples built with TensorFlow", "file_name": "nested_utils.py", "id": "5a069e126c6577949327a95855b16ebe", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/fivo/nested_utils.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}