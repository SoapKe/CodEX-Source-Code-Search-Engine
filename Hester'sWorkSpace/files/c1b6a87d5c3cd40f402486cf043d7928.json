{"author": "keon", "code": "import collections\n\n\n\n\n\n\n\n\n\n# 1. Pop (from the end) indexes of smaller elements (they'll be useless).\n\n# 3. Pop (from the front) the index i - k, if it's still in the deque\n#    (it falls out of the window).\n\n\n\n\ndef max_sliding_window(nums, k):\n    d = collections.deque()\n    out = []\n    for i, n in enumerate(nums):\n        while d and nums[d[-1]] < n:\n            d.pop()\n        d += i,\n        if d[0] == i - k:\n            d.popleft()\n        if i >= k - 1:\n            out += nums[d[0]],\n    return out\n\n\narray = [1, 3, -1, -3, 5, 3, 6, 7]\n\nprint(max_sliding_window(array, 5))\n", "comments": "  keep indexes good candidates deque     the indexes current window  increasing     corresponding nums decreasing     then first deque element index largest window value     for index     1  pop (from end) indexes smaller elements (they useless)     2  append current index     3  pop (from front) index   k  still deque       (it falls window)     4  if window reached size k        append current window maximum output  ", "content": "import collections\n\n\n# Keep indexes of good candidates in deque d.\n# The indexes in d are from the current window, they're increasing,\n# and their corresponding nums are decreasing.\n# Then the first deque element is the index of the largest window value.\n\n# For each index i:\n\n# 1. Pop (from the end) indexes of smaller elements (they'll be useless).\n# 2. Append the current index.\n# 3. Pop (from the front) the index i - k, if it's still in the deque\n#    (it falls out of the window).\n# 4. If our window has reached size k,\n#    append the current window maximum to the output.\n\n\ndef max_sliding_window(nums, k):\n    d = collections.deque()\n    out = []\n    for i, n in enumerate(nums):\n        while d and nums[d[-1]] < n:\n            d.pop()\n        d += i,\n        if d[0] == i - k:\n            d.popleft()\n        if i >= k - 1:\n            out += nums[d[0]],\n    return out\n\n\narray = [1, 3, -1, -3, 5, 3, 6, 7]\n\nprint(max_sliding_window(array, 5))\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "max_sliding_window.py", "id": "c1b6a87d5c3cd40f402486cf043d7928", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/queues/max_sliding_window.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}