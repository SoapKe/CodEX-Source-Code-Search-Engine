{"author": "eliangcs", "code": "from http_prompt.context import Context\n\n\ndef test_creation():\n    context = Context('http://example.com')\n    assert context.url == 'http://example.com'\n    assert context.options == {}\n    assert context.headers == {}\n    assert context.querystring_params == {}\n    assert context.body_params == {}\n    assert not context.should_exit\n\n\ndef test_creation_with_longer_url():\n    context = Context('http://example.com/a/b/c/index.html')\n    assert context.url == 'http://example.com/a/b/c/index.html'\n    assert context.options == {}\n    assert context.headers == {}\n    assert context.querystring_params == {}\n    assert context.body_params == {}\n    assert not context.should_exit\n\n\ndef test_eq():\n    c1 = Context('http://localhost')\n    c2 = Context('http://localhost')\n    assert c1 == c2\n\n    c1.options['--verify'] = 'no'\n    assert c1 != c2\n\n\ndef test_copy():\n    c1 = Context('http://localhost')\n    c2 = c1.copy()\n    assert c1 == c2\n    assert c1 is not c2\n\n\ndef test_update():\n    c1 = Context('http://localhost')\n    c1.headers['Accept'] = 'application/json'\n    c1.querystring_params['flag'] = '1'\n    c1.body_params.update({\n        'name': 'John Doe',\n        'email': 'john@example.com'\n    })\n\n    c2 = Context('http://example.com')\n    c2.headers['Content-Type'] = 'text/html'\n    c2.body_params['name'] = 'John Smith'\n\n    c1.update(c2)\n\n    assert c1.url == 'http://example.com'\n    assert c1.headers == {\n        'Accept': 'application/json',\n        'Content-Type': 'text/html'\n    }\n    assert c1.querystring_params == {'flag': '1'}\n    assert c1.body_params == {\n        'name': 'John Smith',\n        'email': 'john@example.com'\n    }\n\n\ndef test_spec():\n    c = Context('http://localhost', spec={\n        'paths': {\n            '/users': {\n                'get': {\n                    'parameters': [\n                        {'name': 'username', 'in': 'path'},\n                        {'name': 'since', 'in': 'query'},\n                        {'name': 'Accept'}\n                    ]\n                }\n            },\n            '/orgs/{org}': {\n                'get': {\n                    'parameters': [\n                        {'name': 'org', 'in': 'path'},\n                        {'name': 'featured', 'in': 'query'},\n                        {'name': 'X-Foo', 'in': 'header'}\n                    ]\n                }\n            }\n        }\n    })\n    assert c.url == 'http://localhost'\n\n    root_children = list(sorted(c.root.children))\n    assert len(root_children) == 2\n    assert root_children[0].name == 'orgs'\n    assert root_children[1].name == 'users'\n\n    orgs_children = list(sorted(root_children[0].children))\n    assert len(orgs_children) == 1\n\n    org_children = list(sorted(list(orgs_children)[0].children))\n    assert len(org_children) == 2\n    assert org_children[0].name == 'X-Foo'\n    assert org_children[1].name == 'featured'\n\n    users_children = list(sorted(root_children[1].children))\n    assert len(users_children) == 2\n    assert users_children[0].name == 'Accept'\n    assert users_children[1].name == 'since'\n", "comments": "", "content": "from http_prompt.context import Context\n\n\ndef test_creation():\n    context = Context('http://example.com')\n    assert context.url == 'http://example.com'\n    assert context.options == {}\n    assert context.headers == {}\n    assert context.querystring_params == {}\n    assert context.body_params == {}\n    assert not context.should_exit\n\n\ndef test_creation_with_longer_url():\n    context = Context('http://example.com/a/b/c/index.html')\n    assert context.url == 'http://example.com/a/b/c/index.html'\n    assert context.options == {}\n    assert context.headers == {}\n    assert context.querystring_params == {}\n    assert context.body_params == {}\n    assert not context.should_exit\n\n\ndef test_eq():\n    c1 = Context('http://localhost')\n    c2 = Context('http://localhost')\n    assert c1 == c2\n\n    c1.options['--verify'] = 'no'\n    assert c1 != c2\n\n\ndef test_copy():\n    c1 = Context('http://localhost')\n    c2 = c1.copy()\n    assert c1 == c2\n    assert c1 is not c2\n\n\ndef test_update():\n    c1 = Context('http://localhost')\n    c1.headers['Accept'] = 'application/json'\n    c1.querystring_params['flag'] = '1'\n    c1.body_params.update({\n        'name': 'John Doe',\n        'email': 'john@example.com'\n    })\n\n    c2 = Context('http://example.com')\n    c2.headers['Content-Type'] = 'text/html'\n    c2.body_params['name'] = 'John Smith'\n\n    c1.update(c2)\n\n    assert c1.url == 'http://example.com'\n    assert c1.headers == {\n        'Accept': 'application/json',\n        'Content-Type': 'text/html'\n    }\n    assert c1.querystring_params == {'flag': '1'}\n    assert c1.body_params == {\n        'name': 'John Smith',\n        'email': 'john@example.com'\n    }\n\n\ndef test_spec():\n    c = Context('http://localhost', spec={\n        'paths': {\n            '/users': {\n                'get': {\n                    'parameters': [\n                        {'name': 'username', 'in': 'path'},\n                        {'name': 'since', 'in': 'query'},\n                        {'name': 'Accept'}\n                    ]\n                }\n            },\n            '/orgs/{org}': {\n                'get': {\n                    'parameters': [\n                        {'name': 'org', 'in': 'path'},\n                        {'name': 'featured', 'in': 'query'},\n                        {'name': 'X-Foo', 'in': 'header'}\n                    ]\n                }\n            }\n        }\n    })\n    assert c.url == 'http://localhost'\n\n    root_children = list(sorted(c.root.children))\n    assert len(root_children) == 2\n    assert root_children[0].name == 'orgs'\n    assert root_children[1].name == 'users'\n\n    orgs_children = list(sorted(root_children[0].children))\n    assert len(orgs_children) == 1\n\n    org_children = list(sorted(list(orgs_children)[0].children))\n    assert len(org_children) == 2\n    assert org_children[0].name == 'X-Foo'\n    assert org_children[1].name == 'featured'\n\n    users_children = list(sorted(root_children[1].children))\n    assert len(users_children) == 2\n    assert users_children[0].name == 'Accept'\n    assert users_children[1].name == 'since'\n", "description": "HTTPie + prompt_toolkit = an interactive command-line HTTP client featuring autocomplete and syntax highlighting", "file_name": "test_context.py", "id": "08a2968275233c0aa1c2c23c159bdf64", "language": "Python", "project_name": "http-prompt", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/eliangcs-http-prompt/eliangcs-http-prompt-87f1e9d/tests/context/test_context.py", "save_time": "", "source": "", "update_at": "2018-03-17T18:26:33Z", "url": "https://github.com/eliangcs/http-prompt", "wiki": true}