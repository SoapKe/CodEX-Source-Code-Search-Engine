{"author": "keon", "code": "def rotate_clockwise(matrix):\n    new = []\n    for row in reversed(matrix):\n        for i, elem in enumerate(row):\n            try:\n                new[i].append(elem)\n            except IndexError:\n                new.insert(i, [])\n                new[i].append(elem)\n    return new\n\ndef rotate_counterclockwise(matrix):\n    new = []\n    for row in matrix:\n        for i, elem in enumerate(reversed(row)):\n            try:\n                new[i].append(elem)\n            except IndexError:\n                new.insert(i, [])\n                new[i].append(elem)\n    return new\n\ndef top_left_invert(matrix):\n    new = []\n    for row in matrix:\n        for i, elem in enumerate(row):\n            try:\n                new[i].append(elem)\n            except IndexError:\n                new.insert(i, [])\n                new[i].append(elem)\n    return new\n\ndef bottom_left_invert(matrix):\n    new = []\n    for row in reversed(matrix):\n        for i, elem in enumerate(reversed(row)):\n            try:\n                new[i].append(elem)\n            except IndexError:\n                new.insert(i, [])\n                new[i].append(elem)\n    return new\n\nif __name__ == '__main__':\n    def print_matrix(matrix, name):\n        print('{}:\\n['.format(name))\n        for row in matrix:\n            print('  {}'.format(row))\n        print(']\\n')\n\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n\n    print_matrix(matrix, 'initial')\n    print_matrix(rotate_clockwise(matrix), 'clockwise')\n    print_matrix(rotate_counterclockwise(matrix), 'counterclockwise')\n    print_matrix(top_left_invert(matrix), 'top left invert')\n    print_matrix(bottom_left_invert(matrix), 'bottom left invert')\n", "comments": "", "content": "def rotate_clockwise(matrix):\n    new = []\n    for row in reversed(matrix):\n        for i, elem in enumerate(row):\n            try:\n                new[i].append(elem)\n            except IndexError:\n                new.insert(i, [])\n                new[i].append(elem)\n    return new\n\ndef rotate_counterclockwise(matrix):\n    new = []\n    for row in matrix:\n        for i, elem in enumerate(reversed(row)):\n            try:\n                new[i].append(elem)\n            except IndexError:\n                new.insert(i, [])\n                new[i].append(elem)\n    return new\n\ndef top_left_invert(matrix):\n    new = []\n    for row in matrix:\n        for i, elem in enumerate(row):\n            try:\n                new[i].append(elem)\n            except IndexError:\n                new.insert(i, [])\n                new[i].append(elem)\n    return new\n\ndef bottom_left_invert(matrix):\n    new = []\n    for row in reversed(matrix):\n        for i, elem in enumerate(reversed(row)):\n            try:\n                new[i].append(elem)\n            except IndexError:\n                new.insert(i, [])\n                new[i].append(elem)\n    return new\n\nif __name__ == '__main__':\n    def print_matrix(matrix, name):\n        print('{}:\\n['.format(name))\n        for row in matrix:\n            print('  {}'.format(row))\n        print(']\\n')\n\n    matrix = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n    ]\n\n    print_matrix(matrix, 'initial')\n    print_matrix(rotate_clockwise(matrix), 'clockwise')\n    print_matrix(rotate_counterclockwise(matrix), 'counterclockwise')\n    print_matrix(top_left_invert(matrix), 'top left invert')\n    print_matrix(bottom_left_invert(matrix), 'bottom left invert')\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "copy_transform.py", "id": "cbbcc55540a75df9b4e002befc914b49", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/matrix/copy_transform.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}