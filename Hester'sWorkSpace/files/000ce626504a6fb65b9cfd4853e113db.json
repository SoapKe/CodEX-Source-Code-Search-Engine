{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass ABCOTVSIE(InfoExtractor):\n    IE_NAME = 'abcotvs'\n    IE_DESC = 'ABC Owned Television Stations'\n    _VALID_URL = r'https?://(?:abc(?:7(?:news|ny|chicago)?|11|13|30)|6abc)\\.com(?:/[^/]+/(?P<display_id>[^/]+))?/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://abc7news.com/entertainment/east-bay-museum-celebrates-vintage-synthesizers/472581/',\n            'info_dict': {\n                'id': '472581',\n                'display_id': 'east-bay-museum-celebrates-vintage-synthesizers',\n                'ext': 'mp4',\n                'title': 'East Bay museum celebrates vintage synthesizers',\n                'description': 'md5:24ed2bd527096ec2a5c67b9d5a9005f3',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'timestamp': 1421123075,\n                'upload_date': '20150113',\n                'uploader': 'Jonathan Bloom',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://abc7news.com/472581',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        m3u8 = self._html_search_meta(\n            'contentURL', webpage, 'm3u8 url', fatal=True).split('?')[0]\n\n        formats = self._extract_m3u8_formats(m3u8, display_id, 'mp4')\n        self._sort_formats(formats)\n\n        title = self._og_search_title(webpage).strip()\n        description = self._og_search_description(webpage).strip()\n        thumbnail = self._og_search_thumbnail(webpage)\n        timestamp = parse_iso8601(self._search_regex(\n            r'<div class=\"meta\">\\s*<time class=\"timeago\" datetime=\"([^\"]+)\">',\n            webpage, 'upload date', fatal=False))\n        uploader = self._search_regex(\n            r'rel=\"author\">([^<]+)</a>',\n            webpage, 'uploader', default=None)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'formats': formats,\n        }\n\n\nclass ABCOTVSClipsIE(InfoExtractor):\n    IE_NAME = 'abcotvs:clips'\n    _VALID_URL = r'https?://clips\\.abcotvs\\.com/(?:[^/]+/)*video/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://clips.abcotvs.com/kabc/video/214814',\n        'info_dict': {\n            'id': '214814',\n            'ext': 'mp4',\n            'title': 'SpaceX launch pad explosion destroys rocket, satellite',\n            'description': 'md5:9f186e5ad8f490f65409965ee9c7be1b',\n            'upload_date': '20160901',\n            'timestamp': 1472756695,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json('https://clips.abcotvs.com/vogo/video/getByIds?ids=' + video_id, video_id)['results'][0]\n        title = video_data['title']\n        formats = self._extract_m3u8_formats(\n            video_data['videoURL'].split('?')[0], video_id, 'mp4')\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('thumbnailURL'),\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': int_or_none(video_data.get('pubDate')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# m3u8 download\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass ABCOTVSIE(InfoExtractor):\n    IE_NAME = 'abcotvs'\n    IE_DESC = 'ABC Owned Television Stations'\n    _VALID_URL = r'https?://(?:abc(?:7(?:news|ny|chicago)?|11|13|30)|6abc)\\.com(?:/[^/]+/(?P<display_id>[^/]+))?/(?P<id>\\d+)'\n    _TESTS = [\n        {\n            'url': 'http://abc7news.com/entertainment/east-bay-museum-celebrates-vintage-synthesizers/472581/',\n            'info_dict': {\n                'id': '472581',\n                'display_id': 'east-bay-museum-celebrates-vintage-synthesizers',\n                'ext': 'mp4',\n                'title': 'East Bay museum celebrates vintage synthesizers',\n                'description': 'md5:24ed2bd527096ec2a5c67b9d5a9005f3',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'timestamp': 1421123075,\n                'upload_date': '20150113',\n                'uploader': 'Jonathan Bloom',\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://abc7news.com/472581',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        m3u8 = self._html_search_meta(\n            'contentURL', webpage, 'm3u8 url', fatal=True).split('?')[0]\n\n        formats = self._extract_m3u8_formats(m3u8, display_id, 'mp4')\n        self._sort_formats(formats)\n\n        title = self._og_search_title(webpage).strip()\n        description = self._og_search_description(webpage).strip()\n        thumbnail = self._og_search_thumbnail(webpage)\n        timestamp = parse_iso8601(self._search_regex(\n            r'<div class=\"meta\">\\s*<time class=\"timeago\" datetime=\"([^\"]+)\">',\n            webpage, 'upload date', fatal=False))\n        uploader = self._search_regex(\n            r'rel=\"author\">([^<]+)</a>',\n            webpage, 'uploader', default=None)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'formats': formats,\n        }\n\n\nclass ABCOTVSClipsIE(InfoExtractor):\n    IE_NAME = 'abcotvs:clips'\n    _VALID_URL = r'https?://clips\\.abcotvs\\.com/(?:[^/]+/)*video/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://clips.abcotvs.com/kabc/video/214814',\n        'info_dict': {\n            'id': '214814',\n            'ext': 'mp4',\n            'title': 'SpaceX launch pad explosion destroys rocket, satellite',\n            'description': 'md5:9f186e5ad8f490f65409965ee9c7be1b',\n            'upload_date': '20160901',\n            'timestamp': 1472756695,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json('https://clips.abcotvs.com/vogo/video/getByIds?ids=' + video_id, video_id)['results'][0]\n        title = video_data['title']\n        formats = self._extract_m3u8_formats(\n            video_data['videoURL'].split('?')[0], video_id, 'mp4')\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'thumbnail': video_data.get('thumbnailURL'),\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': int_or_none(video_data.get('pubDate')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "abcotvs.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/abcotvs.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}