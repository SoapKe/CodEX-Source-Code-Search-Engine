{"author": "ansible", "code": " (c) 2017 Ansible By Red Hat\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.playbook import Play\nfrom ansible.playbook.block import Block\nfrom ansible.playbook.role import Role\nfrom ansible.playbook.task import Task\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n\ndef get_reserved_names(include_private=True):\n    ''' this function returns the list of reserved names associated with play objects'''\n\n    public = set()\n    private = set()\n    result = set()\n\n     FIXME: find a way to 'not hardcode', possibly need role deps/includes\n    class_list = [Play, Role, Block, Task]\n\n    for aclass in class_list:\n        aobj = aclass()\n\n         build ordered list to loop over and dict with attributes\n        for attribute in aobj.__dict__['_attributes']:\n            if 'private' in attribute:\n                private.add(attribute)\n            else:\n                public.add(attribute)\n\n     local_action is implicit with action\n    if 'action' in public:\n        public.add('local_action')\n\n     loop implies with_\n     FIXME: remove after with_ is not only deprecated but removed\n    if 'loop' in private or 'loop' in public:\n        public.add('with_')\n\n    if include_private:\n        result = public.union(private)\n    else:\n        result = public\n\n    return result\n\n\ndef warn_if_reserved(myvars):\n    ''' this function warns if any variable passed conflicts with internally reserved names '''\n\n    varnames = set(myvars)\n    varnames.discard('vars')   we add this one internally, so safe to ignore\n    for varname in varnames.intersection(_RESERVED_NAMES):\n        display.warning('Found variable using reserved name: %s' % varname)\n\n\n_RESERVED_NAMES = frozenset(get_reserved_names())\n", "comments": "    function returns list reserved names associated play objects         public   set()     private   set()     result   set()        fixme  find way  hardcode   possibly need role deps includes     class list    play  role  block  task       aclass class list          aobj   aclass()            build ordered list loop dict attributes         attribute aobj   dict     attributes                 private  attribute                  private add(attribute)             else                  public add(attribute)        local action implicit action      action  public          public add( local action )        loop implies        fixme  remove  deprecated removed      loop  private  loop  public          public add(  )      include private          result   public union(private)     else          result   public      return result   def warn reserved(myvars)          function warns variable passed conflicts internally reserved names        (c) 2017 ansible by red hat       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    fixme  find way  hardcode   possibly need role deps includes    build ordered list loop dict attributes    local action implicit action    loop implies     fixme  remove  deprecated removed    add one internally  safe ignore ", "content": "# (c) 2017 Ansible By Red Hat\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.playbook import Play\nfrom ansible.playbook.block import Block\nfrom ansible.playbook.role import Role\nfrom ansible.playbook.task import Task\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n\ndef get_reserved_names(include_private=True):\n    ''' this function returns the list of reserved names associated with play objects'''\n\n    public = set()\n    private = set()\n    result = set()\n\n    # FIXME: find a way to 'not hardcode', possibly need role deps/includes\n    class_list = [Play, Role, Block, Task]\n\n    for aclass in class_list:\n        aobj = aclass()\n\n        # build ordered list to loop over and dict with attributes\n        for attribute in aobj.__dict__['_attributes']:\n            if 'private' in attribute:\n                private.add(attribute)\n            else:\n                public.add(attribute)\n\n    # local_action is implicit with action\n    if 'action' in public:\n        public.add('local_action')\n\n    # loop implies with_\n    # FIXME: remove after with_ is not only deprecated but removed\n    if 'loop' in private or 'loop' in public:\n        public.add('with_')\n\n    if include_private:\n        result = public.union(private)\n    else:\n        result = public\n\n    return result\n\n\ndef warn_if_reserved(myvars):\n    ''' this function warns if any variable passed conflicts with internally reserved names '''\n\n    varnames = set(myvars)\n    varnames.discard('vars')  # we add this one internally, so safe to ignore\n    for varname in varnames.intersection(_RESERVED_NAMES):\n        display.warning('Found variable using reserved name: %s' % varname)\n\n\n_RESERVED_NAMES = frozenset(get_reserved_names())\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "reserved.py", "id": "14082b940cadd4e8e2435494c149c093", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/vars/reserved.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}