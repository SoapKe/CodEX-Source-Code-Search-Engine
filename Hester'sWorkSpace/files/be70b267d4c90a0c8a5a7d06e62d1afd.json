{"author": "tqdm", "code": "# -*- coding: utf-8 -*-\n\"\"\"Usage:\n  7zx.py [--help | options] <zipfiles>...\n\nOptions:\n  -h, --help     Print this help and exit\n  -v, --version  Print version and exit\n  -c, --compressed       Use compressed (instead of uncompressed) file sizes\n  -s, --silent   Do not print one row per zip file\n  -y, --yes      Assume yes to all queries (for extraction)\n  -D=<level>, --debug=<level>\n                 Print various types of debugging information. Choices:\n                         CRITICAL|FATAL\n                         ERROR\n                         WARN(ING)\n                         [default: INFO]\n                         DEBUG\n                         NOTSET\n  -d, --debug-trace      Print lots of debugging information (-D NOTSET)\n\"\"\"\nfrom __future__ import print_function\nfrom docopt import docopt\nimport logging as log\nimport subprocess\nimport re\nfrom tqdm import tqdm\nimport pty\nimport os\nimport io\n__author__ = \"Casper da Costa-Luis <casper.dcl@physics.org>\"\n__licence__ = \"MPLv2.0\"\n__version__ = \"0.2.0\"\n__license__ = __licence__\n\nRE_SCN = re.compile(\"([0-9]+)\\s+([0-9]+)\\s+(.*)$\", flags=re.M)\n\n\ndef main():\n    args = docopt(__doc__, version=__version__)\n    if args.pop('--debug-trace', False):\n        args['--debug'] = \"NOTSET\"\n    log.basicConfig(level=getattr(log, args['--debug'], log.INFO),\n                    format='%(levelname)s: %(message)s')\n    log.debug(args)\n\n    \n    zips = {}\n    for fn in args['<zipfiles>']:\n        info = subprocess.check_output([\"7z\", \"l\", fn]).strip()\n        finfo = RE_SCN.findall(info)\n\n        \n        log.debug(finfo)\n        totals = map(int, finfo[-1][:2])\n        # log.debug(totals)\n        for s in range(2):\n            assert (sum(map(int, (inf[s] for inf in finfo[:-1]))) == totals[s])\n        fcomp = dict((n, int(c if args['--compressed'] else u))\n                     for (u, c, n) in finfo[:-1])\n        # log.debug(fcomp)\n        # zips  : {'zipname' : {'filename' : int(size)}}\n        zips[fn] = fcomp\n\n    \n    cmd7zx = [\"7z\", \"x\", \"-bd\"]\n    if args['--yes']:\n        cmd7zx += [\"-y\"]\n    log.info(\"Extracting from {:d} file(s)\".format(len(zips)))\n    with tqdm(total=sum(sum(fcomp.values()) for fcomp in zips.values()),\n              unit=\"B\", unit_scale=True) as tall:\n        for fn, fcomp in zips.items():\n            md, sd = pty.openpty()\n            ex = subprocess.Popen(\n                cmd7zx + [fn],\n                bufsize=1,\n                stdout=md,  \n                stderr=subprocess.STDOUT)\n            os.close(sd)\n            with io.open(md, mode=\"rU\", buffering=1) as m:\n                with tqdm(total=sum(fcomp.values()), disable=len(zips) < 2,\n                          leave=False, unit=\"B\", unit_scale=True) as t:\n                    while True:\n                        try:\n                            l_raw = m.readline()\n                        except IOError:\n                            break\n                        l = l_raw.strip()\n                        if l.startswith(\"Extracting\"):\n                            exname = l.lstrip(\"Extracting\").lstrip()\n                            s = fcomp.get(exname, 0)  \n                            t.update(s)\n                            tall.update(s)\n                        elif l:\n                            if not any(\n                                    l.startswith(i)\n                                    for i in (\"7-Zip \", \"p7zip Version \",\n                                              \"Everything is Ok\", \"Folders: \",\n                                              \"Files: \", \"Size: \",\n                                              \"Compressed: \")):\n                                if l.startswith(\"Processing archive: \"):\n                                    if not args['--silent']:\n                                        t.write(\n                                            t.format_interval(\n                                                t.start_t - tall.start_t) + ' '\n                                            + l.lstrip(\"Processing archive: \"))\n                                else:\n                                    t.write(l)\n            ex.wait()\n\n\nmain.__doc__ = __doc__\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "   usage    7zx py    help   options   zipfiles      options     h    help     print help exit    v    version  print version exit    c    compressed       use compressed (instead uncompressed) file sizes       silent   do print one row per zip file       yes      assume yes queries (for extraction)    d  level     debug  level                   print various types debugging information  choices                           critical fatal                          error                          warn(ing)                           default  info                           debug                          notset       debug trace      print lots debugging information ( d notset)            coding  utf 8        get compressed sizes    builtin test  last line total sizes    log debug(totals)    log debug(fcomp)    zips      zipname      filename    int(size)      extract    subprocess pipe     0 likely folders ", "content": "# -*- coding: utf-8 -*-\n\"\"\"Usage:\n  7zx.py [--help | options] <zipfiles>...\n\nOptions:\n  -h, --help     Print this help and exit\n  -v, --version  Print version and exit\n  -c, --compressed       Use compressed (instead of uncompressed) file sizes\n  -s, --silent   Do not print one row per zip file\n  -y, --yes      Assume yes to all queries (for extraction)\n  -D=<level>, --debug=<level>\n                 Print various types of debugging information. Choices:\n                         CRITICAL|FATAL\n                         ERROR\n                         WARN(ING)\n                         [default: INFO]\n                         DEBUG\n                         NOTSET\n  -d, --debug-trace      Print lots of debugging information (-D NOTSET)\n\"\"\"\nfrom __future__ import print_function\nfrom docopt import docopt\nimport logging as log\nimport subprocess\nimport re\nfrom tqdm import tqdm\nimport pty\nimport os\nimport io\n__author__ = \"Casper da Costa-Luis <casper.dcl@physics.org>\"\n__licence__ = \"MPLv2.0\"\n__version__ = \"0.2.0\"\n__license__ = __licence__\n\nRE_SCN = re.compile(\"([0-9]+)\\s+([0-9]+)\\s+(.*)$\", flags=re.M)\n\n\ndef main():\n    args = docopt(__doc__, version=__version__)\n    if args.pop('--debug-trace', False):\n        args['--debug'] = \"NOTSET\"\n    log.basicConfig(level=getattr(log, args['--debug'], log.INFO),\n                    format='%(levelname)s: %(message)s')\n    log.debug(args)\n\n    # Get compressed sizes\n    zips = {}\n    for fn in args['<zipfiles>']:\n        info = subprocess.check_output([\"7z\", \"l\", fn]).strip()\n        finfo = RE_SCN.findall(info)\n\n        # builtin test: last line should be total sizes\n        log.debug(finfo)\n        totals = map(int, finfo[-1][:2])\n        # log.debug(totals)\n        for s in range(2):\n            assert (sum(map(int, (inf[s] for inf in finfo[:-1]))) == totals[s])\n        fcomp = dict((n, int(c if args['--compressed'] else u))\n                     for (u, c, n) in finfo[:-1])\n        # log.debug(fcomp)\n        # zips  : {'zipname' : {'filename' : int(size)}}\n        zips[fn] = fcomp\n\n    # Extract\n    cmd7zx = [\"7z\", \"x\", \"-bd\"]\n    if args['--yes']:\n        cmd7zx += [\"-y\"]\n    log.info(\"Extracting from {:d} file(s)\".format(len(zips)))\n    with tqdm(total=sum(sum(fcomp.values()) for fcomp in zips.values()),\n              unit=\"B\", unit_scale=True) as tall:\n        for fn, fcomp in zips.items():\n            md, sd = pty.openpty()\n            ex = subprocess.Popen(\n                cmd7zx + [fn],\n                bufsize=1,\n                stdout=md,  # subprocess.PIPE,\n                stderr=subprocess.STDOUT)\n            os.close(sd)\n            with io.open(md, mode=\"rU\", buffering=1) as m:\n                with tqdm(total=sum(fcomp.values()), disable=len(zips) < 2,\n                          leave=False, unit=\"B\", unit_scale=True) as t:\n                    while True:\n                        try:\n                            l_raw = m.readline()\n                        except IOError:\n                            break\n                        l = l_raw.strip()\n                        if l.startswith(\"Extracting\"):\n                            exname = l.lstrip(\"Extracting\").lstrip()\n                            s = fcomp.get(exname, 0)  # 0 is likely folders\n                            t.update(s)\n                            tall.update(s)\n                        elif l:\n                            if not any(\n                                    l.startswith(i)\n                                    for i in (\"7-Zip \", \"p7zip Version \",\n                                              \"Everything is Ok\", \"Folders: \",\n                                              \"Files: \", \"Size: \",\n                                              \"Compressed: \")):\n                                if l.startswith(\"Processing archive: \"):\n                                    if not args['--silent']:\n                                        t.write(\n                                            t.format_interval(\n                                                t.start_t - tall.start_t) + ' '\n                                            + l.lstrip(\"Processing archive: \"))\n                                else:\n                                    t.write(l)\n            ex.wait()\n\n\nmain.__doc__ = __doc__\n\nif __name__ == \"__main__\":\n    main()\n", "description": "A fast, extensible progress bar for Python and CLI", "file_name": "7zx.py", "id": "be70b267d4c90a0c8a5a7d06e62d1afd", "language": "Python", "project_name": "tqdm", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tqdm-tqdm/tqdm-tqdm-d861caa/examples/7zx.py", "save_time": "", "source": "", "update_at": "2018-03-18T17:06:37Z", "url": "https://github.com/tqdm/tqdm", "wiki": true}