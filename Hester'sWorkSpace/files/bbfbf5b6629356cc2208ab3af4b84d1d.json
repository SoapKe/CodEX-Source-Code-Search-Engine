{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    determine_protocol,\n    try_get,\n    unescapeHTML,\n)\n\n\nclass DailyMailIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?dailymail\\.co\\.uk/(?:video/[^/]+/video-|embed/video/)(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.dailymail.co.uk/video/tvshowbiz/video-1295863/The-Mountain-appears-sparkling-water-ad-Heavy-Bubbles.html',\n        'md5': 'f6129624562251f628296c3a9ffde124',\n        'info_dict': {\n            'id': '1295863',\n            'ext': 'mp4',\n            'title': 'The Mountain appears in sparkling water ad for \\'Heavy Bubbles\\'',\n            'description': 'md5:a93d74b6da172dd5dc4d973e0b766a84',\n        }\n    }, {\n        'url': 'http://www.dailymail.co.uk/embed/video/1295863.html',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe\\b[^>]+\\bsrc=[\"\\'](?P<url>(?:https?:)?//(?:www\\.)?dailymail\\.co\\.uk/embed/video/\\d+\\.html)',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        video_data = self._parse_json(self._search_regex(\n            r\"data-opts='({.+?})'\", webpage, 'video data'), video_id)\n        title = unescapeHTML(video_data['title'])\n\n        sources_url = (try_get(\n            video_data,\n            (lambda x: x['plugins']['sources']['url'],\n             lambda x: x['sources']['url']), compat_str) or\n            'http://www.dailymail.co.uk/api/player/%s/video-sources.json' % video_id)\n\n        video_sources = self._download_json(sources_url, video_id)\n\n        formats = []\n        for rendition in video_sources['renditions']:\n            rendition_url = rendition.get('url')\n            if not rendition_url:\n                continue\n            tbr = int_or_none(rendition.get('encodingRate'), 1000)\n            container = rendition.get('videoContainer')\n            is_hls = container == 'M2TS'\n            protocol = 'm3u8_native' if is_hls else determine_protocol({'url': rendition_url})\n            formats.append({\n                'format_id': ('hls' if is_hls else protocol) + ('-%d' % tbr if tbr else ''),\n                'url': rendition_url,\n                'width': int_or_none(rendition.get('frameWidth')),\n                'height': int_or_none(rendition.get('frameHeight')),\n                'tbr': tbr,\n                'vcodec': rendition.get('videoCodec'),\n                'container': container,\n                'protocol': protocol,\n                'ext': 'mp4' if is_hls else None,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': unescapeHTML(video_data.get('descr')),\n            'thumbnail': video_data.get('poster') or video_data.get('thumbnail'),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    determine_protocol,\n    try_get,\n    unescapeHTML,\n)\n\n\nclass DailyMailIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?dailymail\\.co\\.uk/(?:video/[^/]+/video-|embed/video/)(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.dailymail.co.uk/video/tvshowbiz/video-1295863/The-Mountain-appears-sparkling-water-ad-Heavy-Bubbles.html',\n        'md5': 'f6129624562251f628296c3a9ffde124',\n        'info_dict': {\n            'id': '1295863',\n            'ext': 'mp4',\n            'title': 'The Mountain appears in sparkling water ad for \\'Heavy Bubbles\\'',\n            'description': 'md5:a93d74b6da172dd5dc4d973e0b766a84',\n        }\n    }, {\n        'url': 'http://www.dailymail.co.uk/embed/video/1295863.html',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe\\b[^>]+\\bsrc=[\"\\'](?P<url>(?:https?:)?//(?:www\\.)?dailymail\\.co\\.uk/embed/video/\\d+\\.html)',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        video_data = self._parse_json(self._search_regex(\n            r\"data-opts='({.+?})'\", webpage, 'video data'), video_id)\n        title = unescapeHTML(video_data['title'])\n\n        sources_url = (try_get(\n            video_data,\n            (lambda x: x['plugins']['sources']['url'],\n             lambda x: x['sources']['url']), compat_str) or\n            'http://www.dailymail.co.uk/api/player/%s/video-sources.json' % video_id)\n\n        video_sources = self._download_json(sources_url, video_id)\n\n        formats = []\n        for rendition in video_sources['renditions']:\n            rendition_url = rendition.get('url')\n            if not rendition_url:\n                continue\n            tbr = int_or_none(rendition.get('encodingRate'), 1000)\n            container = rendition.get('videoContainer')\n            is_hls = container == 'M2TS'\n            protocol = 'm3u8_native' if is_hls else determine_protocol({'url': rendition_url})\n            formats.append({\n                'format_id': ('hls' if is_hls else protocol) + ('-%d' % tbr if tbr else ''),\n                'url': rendition_url,\n                'width': int_or_none(rendition.get('frameWidth')),\n                'height': int_or_none(rendition.get('frameHeight')),\n                'tbr': tbr,\n                'vcodec': rendition.get('videoCodec'),\n                'container': container,\n                'protocol': protocol,\n                'ext': 'mp4' if is_hls else None,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': unescapeHTML(video_data.get('descr')),\n            'thumbnail': video_data.get('poster') or video_data.get('thumbnail'),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "dailymail.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/dailymail.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}