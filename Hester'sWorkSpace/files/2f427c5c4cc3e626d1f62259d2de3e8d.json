{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_parse_qs,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    bool_or_none,\n    int_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass RutubeBaseIE(InfoExtractor):\n    def _extract_video(self, video, video_id=None, require_title=True):\n        title = video['title'] if require_title else video.get('title')\n\n        age_limit = video.get('is_adult')\n        if age_limit is not None:\n            age_limit = 18 if age_limit is True else 0\n\n        uploader_id = try_get(video, lambda x: x['author']['id'])\n        category = try_get(video, lambda x: x['category']['name'])\n\n        return {\n            'id': video.get('id') or video_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': video.get('thumbnail_url'),\n            'duration': int_or_none(video.get('duration')),\n            'uploader': try_get(video, lambda x: x['author']['name']),\n            'uploader_id': compat_str(uploader_id) if uploader_id else None,\n            'timestamp': unified_timestamp(video.get('created_ts')),\n            'category': [category] if category else None,\n            'age_limit': age_limit,\n            'view_count': int_or_none(video.get('hits')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'is_live': bool_or_none(video.get('is_livestream')),\n        }\n\n\nclass RutubeIE(RutubeBaseIE):\n    IE_NAME = 'rutube'\n    IE_DESC = 'Rutube videos'\n    _VALID_URL = r'https?://rutube\\.ru/(?:video|(?:play/)?embed)/(?P<id>[\\da-z]{32})'\n\n    _TESTS = [{\n        'url': 'http://rutube.ru/video/3eac3b4561676c17df9132a9a1e62e3e/',\n        'md5': '79938ade01294ef7e27574890d0d3769',\n        'info_dict': {\n            'id': '3eac3b4561676c17df9132a9a1e62e3e',\n            'ext': 'flv',\n            'title': '\u0420\u0430\u043d\u0435\u043d\u043d\u044b\u0439 \u043a\u0435\u043d\u0433\u0443\u0440\u0443 \u0437\u0430\u0431\u0435\u0436\u0430\u043b \u0432 \u0430\u043f\u0442\u0435\u043a\u0443',\n            'description': 'http://www.ntdtv.ru ',\n            'duration': 80,\n            'uploader': 'NTDRussian',\n            'uploader_id': '29790',\n            'timestamp': 1381943602,\n            'upload_date': '20131016',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'http://rutube.ru/play/embed/a10e53b86e8f349080f718582ce4c661',\n        'only_matching': True,\n    }, {\n        'url': 'http://rutube.ru/embed/a10e53b86e8f349080f718582ce4c661',\n        'only_matching': True,\n    }, {\n        'url': 'http://rutube.ru/video/3eac3b4561676c17df9132a9a1e62e3e/?pl_id=4252',\n        'only_matching': True,\n    }, {\n        'url': 'https://rutube.ru/video/10b3a03fc01d5bbcc632a2f3514e8aab/?pl_type=source',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if RutubePlaylistIE.suitable(url) else super(RutubeIE, cls).suitable(url)\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [mobj.group('url') for mobj in re.finditer(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//rutube\\.ru/embed/[\\da-z]{32}.*?)\\1',\n            webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://rutube.ru/api/video/%s/?format=json' % video_id,\n            video_id, 'Downloading video JSON')\n\n        info = self._extract_video(video, video_id)\n\n        options = self._download_json(\n            'http://rutube.ru/api/play/options/%s/?format=json' % video_id,\n            video_id, 'Downloading options JSON')\n\n        formats = []\n        for format_id, format_url in options['video_balancer'].items():\n            ext = determine_ext(format_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', m3u8_id=format_id, fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    format_url, video_id, f4m_id=format_id, fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'format_id': format_id,\n                })\n        self._sort_formats(formats)\n\n        info['formats'] = formats\n        return info\n\n\nclass RutubeEmbedIE(InfoExtractor):\n    IE_NAME = 'rutube:embed'\n    IE_DESC = 'Rutube embedded videos'\n    _VALID_URL = r'https?://rutube\\.ru/(?:video|play)/embed/(?P<id>[0-9]+)'\n\n    _TESTS = [{\n        'url': 'http://rutube.ru/video/embed/6722881?vk_puid37=&vk_puid38=',\n        'info_dict': {\n            'id': 'a10e53b86e8f349080f718582ce4c661',\n            'ext': 'flv',\n            'timestamp': 1387830582,\n            'upload_date': '20131223',\n            'uploader_id': '297833',\n            'description': '\u0412\u0438\u0434\u0435\u043e \u0433\u0440\u0443\u043f\u043f\u044b \u2605http://vk.com/foxkidsreset\u2605 \u043c\u0443\u0437\u0435\u0439 Fox Kids \u0438 Jetix<br/><br/> \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0438 \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0432 \u0448\u0438\u043a\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0435 subziro89 http://vk.com/subziro89',\n            'uploader': 'subziro89 ILya',\n            'title': '\u041c\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u043e\u0440\u043e\u0434\u043e\u043a \u042d\u0439\u0440\u0438 \u0432 \u0418\u043d\u0434\u0438\u0430\u043d 5 \u0441\u0435\u0440\u0438\u044f \u043e\u0437\u0432\u0443\u0447\u043a\u0430 subziro89',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://rutube.ru/play/embed/8083783',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        embed_id = self._match_id(url)\n        webpage = self._download_webpage(url, embed_id)\n\n        canonical_url = self._html_search_regex(\n            r'<link\\s+rel=\"canonical\"\\s+href=\"([^\"]+?)\"', webpage,\n            'Canonical URL')\n        return self.url_result(canonical_url, RutubeIE.ie_key())\n\n\nclass RutubePlaylistBaseIE(RutubeBaseIE):\n    def _next_page_url(self, page_num, playlist_id, *args, **kwargs):\n        return self._PAGE_TEMPLATE % (playlist_id, page_num)\n\n    def _entries(self, playlist_id, *args, **kwargs):\n        next_page_url = None\n        for pagenum in itertools.count(1):\n            page = self._download_json(\n                next_page_url or self._next_page_url(\n                    pagenum, playlist_id, *args, **kwargs),\n                playlist_id, 'Downloading page %s' % pagenum)\n\n            results = page.get('results')\n            if not results or not isinstance(results, list):\n                break\n\n            for result in results:\n                video_url = result.get('video_url')\n                if not video_url or not isinstance(video_url, compat_str):\n                    continue\n                entry = self._extract_video(result, require_title=False)\n                entry.update({\n                    '_type': 'url',\n                    'url': video_url,\n                    'ie_key': RutubeIE.ie_key(),\n                })\n                yield entry\n\n            next_page_url = page.get('next')\n            if not next_page_url or not page.get('has_next'):\n                break\n\n    def _extract_playlist(self, playlist_id, *args, **kwargs):\n        return self.playlist_result(\n            self._entries(playlist_id, *args, **kwargs),\n            playlist_id, kwargs.get('playlist_name'))\n\n    def _real_extract(self, url):\n        return self._extract_playlist(self._match_id(url))\n\n\nclass RutubeChannelIE(RutubePlaylistBaseIE):\n    IE_NAME = 'rutube:channel'\n    IE_DESC = 'Rutube channels'\n    _VALID_URL = r'https?://rutube\\.ru/tags/video/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://rutube.ru/tags/video/1800/',\n        'info_dict': {\n            'id': '1800',\n        },\n        'playlist_mincount': 68,\n    }]\n\n    _PAGE_TEMPLATE = 'http://rutube.ru/api/tags/video/%s/?page=%s&format=json'\n\n\nclass RutubeMovieIE(RutubePlaylistBaseIE):\n    IE_NAME = 'rutube:movie'\n    IE_DESC = 'Rutube movies'\n    _VALID_URL = r'https?://rutube\\.ru/metainfo/tv/(?P<id>\\d+)'\n    _TESTS = []\n\n    _MOVIE_TEMPLATE = 'http://rutube.ru/api/metainfo/tv/%s/?format=json'\n    _PAGE_TEMPLATE = 'http://rutube.ru/api/metainfo/tv/%s/video?page=%s&format=json'\n\n    def _real_extract(self, url):\n        movie_id = self._match_id(url)\n        movie = self._download_json(\n            self._MOVIE_TEMPLATE % movie_id, movie_id,\n            'Downloading movie JSON')\n        return self._extract_playlist(\n            movie_id, playlist_name=movie.get('name'))\n\n\nclass RutubePersonIE(RutubePlaylistBaseIE):\n    IE_NAME = 'rutube:person'\n    IE_DESC = 'Rutube person videos'\n    _VALID_URL = r'https?://rutube\\.ru/video/person/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://rutube.ru/video/person/313878/',\n        'info_dict': {\n            'id': '313878',\n        },\n        'playlist_mincount': 37,\n    }]\n\n    _PAGE_TEMPLATE = 'http://rutube.ru/api/video/person/%s/?page=%s&format=json'\n\n\nclass RutubePlaylistIE(RutubePlaylistBaseIE):\n    IE_NAME = 'rutube:playlist'\n    IE_DESC = 'Rutube playlists'\n    _VALID_URL = r'https?://rutube\\.ru/(?:video|(?:play/)?embed)/[\\da-z]{32}/\\?.*?\\bpl_id=(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://rutube.ru/video/cecd58ed7d531fc0f3d795d51cee9026/?pl_id=3097&pl_type=tag',\n        'info_dict': {\n            'id': '3097',\n        },\n        'playlist_count': 27,\n    }, {\n        'url': 'https://rutube.ru/video/10b3a03fc01d5bbcc632a2f3514e8aab/?pl_id=4252&pl_type=source',\n        'only_matching': True,\n    }]\n\n    _PAGE_TEMPLATE = 'http://rutube.ru/api/playlist/%s/%s/?page=%s&format=json'\n\n    @classmethod\n    def suitable(cls, url):\n        if not super(RutubePlaylistIE, cls).suitable(url):\n            return False\n        params = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        return params.get('pl_type', [None])[0] and int_or_none(params.get('pl_id', [None])[0])\n\n    def _next_page_url(self, page_num, playlist_id, item_kind):\n        return self._PAGE_TEMPLATE % (item_kind, playlist_id, page_num)\n\n    def _real_extract(self, url):\n        qs = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        playlist_kind = qs['pl_type'][0]\n        playlist_id = qs['pl_id'][0]\n        return self._extract_playlist(playlist_id, item_kind=playlist_kind)\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_parse_qs,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    bool_or_none,\n    int_or_none,\n    try_get,\n    unified_timestamp,\n)\n\n\nclass RutubeBaseIE(InfoExtractor):\n    def _extract_video(self, video, video_id=None, require_title=True):\n        title = video['title'] if require_title else video.get('title')\n\n        age_limit = video.get('is_adult')\n        if age_limit is not None:\n            age_limit = 18 if age_limit is True else 0\n\n        uploader_id = try_get(video, lambda x: x['author']['id'])\n        category = try_get(video, lambda x: x['category']['name'])\n\n        return {\n            'id': video.get('id') or video_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': video.get('thumbnail_url'),\n            'duration': int_or_none(video.get('duration')),\n            'uploader': try_get(video, lambda x: x['author']['name']),\n            'uploader_id': compat_str(uploader_id) if uploader_id else None,\n            'timestamp': unified_timestamp(video.get('created_ts')),\n            'category': [category] if category else None,\n            'age_limit': age_limit,\n            'view_count': int_or_none(video.get('hits')),\n            'comment_count': int_or_none(video.get('comments_count')),\n            'is_live': bool_or_none(video.get('is_livestream')),\n        }\n\n\nclass RutubeIE(RutubeBaseIE):\n    IE_NAME = 'rutube'\n    IE_DESC = 'Rutube videos'\n    _VALID_URL = r'https?://rutube\\.ru/(?:video|(?:play/)?embed)/(?P<id>[\\da-z]{32})'\n\n    _TESTS = [{\n        'url': 'http://rutube.ru/video/3eac3b4561676c17df9132a9a1e62e3e/',\n        'md5': '79938ade01294ef7e27574890d0d3769',\n        'info_dict': {\n            'id': '3eac3b4561676c17df9132a9a1e62e3e',\n            'ext': 'flv',\n            'title': '\u0420\u0430\u043d\u0435\u043d\u043d\u044b\u0439 \u043a\u0435\u043d\u0433\u0443\u0440\u0443 \u0437\u0430\u0431\u0435\u0436\u0430\u043b \u0432 \u0430\u043f\u0442\u0435\u043a\u0443',\n            'description': 'http://www.ntdtv.ru ',\n            'duration': 80,\n            'uploader': 'NTDRussian',\n            'uploader_id': '29790',\n            'timestamp': 1381943602,\n            'upload_date': '20131016',\n            'age_limit': 0,\n        },\n    }, {\n        'url': 'http://rutube.ru/play/embed/a10e53b86e8f349080f718582ce4c661',\n        'only_matching': True,\n    }, {\n        'url': 'http://rutube.ru/embed/a10e53b86e8f349080f718582ce4c661',\n        'only_matching': True,\n    }, {\n        'url': 'http://rutube.ru/video/3eac3b4561676c17df9132a9a1e62e3e/?pl_id=4252',\n        'only_matching': True,\n    }, {\n        'url': 'https://rutube.ru/video/10b3a03fc01d5bbcc632a2f3514e8aab/?pl_type=source',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if RutubePlaylistIE.suitable(url) else super(RutubeIE, cls).suitable(url)\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return [mobj.group('url') for mobj in re.finditer(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//rutube\\.ru/embed/[\\da-z]{32}.*?)\\1',\n            webpage)]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video = self._download_json(\n            'http://rutube.ru/api/video/%s/?format=json' % video_id,\n            video_id, 'Downloading video JSON')\n\n        info = self._extract_video(video, video_id)\n\n        options = self._download_json(\n            'http://rutube.ru/api/play/options/%s/?format=json' % video_id,\n            video_id, 'Downloading options JSON')\n\n        formats = []\n        for format_id, format_url in options['video_balancer'].items():\n            ext = determine_ext(format_url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', m3u8_id=format_id, fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    format_url, video_id, f4m_id=format_id, fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'format_id': format_id,\n                })\n        self._sort_formats(formats)\n\n        info['formats'] = formats\n        return info\n\n\nclass RutubeEmbedIE(InfoExtractor):\n    IE_NAME = 'rutube:embed'\n    IE_DESC = 'Rutube embedded videos'\n    _VALID_URL = r'https?://rutube\\.ru/(?:video|play)/embed/(?P<id>[0-9]+)'\n\n    _TESTS = [{\n        'url': 'http://rutube.ru/video/embed/6722881?vk_puid37=&vk_puid38=',\n        'info_dict': {\n            'id': 'a10e53b86e8f349080f718582ce4c661',\n            'ext': 'flv',\n            'timestamp': 1387830582,\n            'upload_date': '20131223',\n            'uploader_id': '297833',\n            'description': '\u0412\u0438\u0434\u0435\u043e \u0433\u0440\u0443\u043f\u043f\u044b \u2605http://vk.com/foxkidsreset\u2605 \u043c\u0443\u0437\u0435\u0439 Fox Kids \u0438 Jetix<br/><br/> \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0438 \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0432 \u0448\u0438\u043a\u043e\u0444\u043e\u0440\u043c\u0430\u0442\u0435 subziro89 http://vk.com/subziro89',\n            'uploader': 'subziro89 ILya',\n            'title': '\u041c\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0433\u043e\u0440\u043e\u0434\u043e\u043a \u042d\u0439\u0440\u0438 \u0432 \u0418\u043d\u0434\u0438\u0430\u043d 5 \u0441\u0435\u0440\u0438\u044f \u043e\u0437\u0432\u0443\u0447\u043a\u0430 subziro89',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://rutube.ru/play/embed/8083783',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        embed_id = self._match_id(url)\n        webpage = self._download_webpage(url, embed_id)\n\n        canonical_url = self._html_search_regex(\n            r'<link\\s+rel=\"canonical\"\\s+href=\"([^\"]+?)\"', webpage,\n            'Canonical URL')\n        return self.url_result(canonical_url, RutubeIE.ie_key())\n\n\nclass RutubePlaylistBaseIE(RutubeBaseIE):\n    def _next_page_url(self, page_num, playlist_id, *args, **kwargs):\n        return self._PAGE_TEMPLATE % (playlist_id, page_num)\n\n    def _entries(self, playlist_id, *args, **kwargs):\n        next_page_url = None\n        for pagenum in itertools.count(1):\n            page = self._download_json(\n                next_page_url or self._next_page_url(\n                    pagenum, playlist_id, *args, **kwargs),\n                playlist_id, 'Downloading page %s' % pagenum)\n\n            results = page.get('results')\n            if not results or not isinstance(results, list):\n                break\n\n            for result in results:\n                video_url = result.get('video_url')\n                if not video_url or not isinstance(video_url, compat_str):\n                    continue\n                entry = self._extract_video(result, require_title=False)\n                entry.update({\n                    '_type': 'url',\n                    'url': video_url,\n                    'ie_key': RutubeIE.ie_key(),\n                })\n                yield entry\n\n            next_page_url = page.get('next')\n            if not next_page_url or not page.get('has_next'):\n                break\n\n    def _extract_playlist(self, playlist_id, *args, **kwargs):\n        return self.playlist_result(\n            self._entries(playlist_id, *args, **kwargs),\n            playlist_id, kwargs.get('playlist_name'))\n\n    def _real_extract(self, url):\n        return self._extract_playlist(self._match_id(url))\n\n\nclass RutubeChannelIE(RutubePlaylistBaseIE):\n    IE_NAME = 'rutube:channel'\n    IE_DESC = 'Rutube channels'\n    _VALID_URL = r'https?://rutube\\.ru/tags/video/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://rutube.ru/tags/video/1800/',\n        'info_dict': {\n            'id': '1800',\n        },\n        'playlist_mincount': 68,\n    }]\n\n    _PAGE_TEMPLATE = 'http://rutube.ru/api/tags/video/%s/?page=%s&format=json'\n\n\nclass RutubeMovieIE(RutubePlaylistBaseIE):\n    IE_NAME = 'rutube:movie'\n    IE_DESC = 'Rutube movies'\n    _VALID_URL = r'https?://rutube\\.ru/metainfo/tv/(?P<id>\\d+)'\n    _TESTS = []\n\n    _MOVIE_TEMPLATE = 'http://rutube.ru/api/metainfo/tv/%s/?format=json'\n    _PAGE_TEMPLATE = 'http://rutube.ru/api/metainfo/tv/%s/video?page=%s&format=json'\n\n    def _real_extract(self, url):\n        movie_id = self._match_id(url)\n        movie = self._download_json(\n            self._MOVIE_TEMPLATE % movie_id, movie_id,\n            'Downloading movie JSON')\n        return self._extract_playlist(\n            movie_id, playlist_name=movie.get('name'))\n\n\nclass RutubePersonIE(RutubePlaylistBaseIE):\n    IE_NAME = 'rutube:person'\n    IE_DESC = 'Rutube person videos'\n    _VALID_URL = r'https?://rutube\\.ru/video/person/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://rutube.ru/video/person/313878/',\n        'info_dict': {\n            'id': '313878',\n        },\n        'playlist_mincount': 37,\n    }]\n\n    _PAGE_TEMPLATE = 'http://rutube.ru/api/video/person/%s/?page=%s&format=json'\n\n\nclass RutubePlaylistIE(RutubePlaylistBaseIE):\n    IE_NAME = 'rutube:playlist'\n    IE_DESC = 'Rutube playlists'\n    _VALID_URL = r'https?://rutube\\.ru/(?:video|(?:play/)?embed)/[\\da-z]{32}/\\?.*?\\bpl_id=(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://rutube.ru/video/cecd58ed7d531fc0f3d795d51cee9026/?pl_id=3097&pl_type=tag',\n        'info_dict': {\n            'id': '3097',\n        },\n        'playlist_count': 27,\n    }, {\n        'url': 'https://rutube.ru/video/10b3a03fc01d5bbcc632a2f3514e8aab/?pl_id=4252&pl_type=source',\n        'only_matching': True,\n    }]\n\n    _PAGE_TEMPLATE = 'http://rutube.ru/api/playlist/%s/%s/?page=%s&format=json'\n\n    @classmethod\n    def suitable(cls, url):\n        if not super(RutubePlaylistIE, cls).suitable(url):\n            return False\n        params = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        return params.get('pl_type', [None])[0] and int_or_none(params.get('pl_id', [None])[0])\n\n    def _next_page_url(self, page_num, playlist_id, item_kind):\n        return self._PAGE_TEMPLATE % (item_kind, playlist_id, page_num)\n\n    def _real_extract(self, url):\n        qs = compat_parse_qs(compat_urllib_parse_urlparse(url).query)\n        playlist_kind = qs['pl_type'][0]\n        playlist_id = qs['pl_id'][0]\n        return self._extract_playlist(playlist_id, item_kind=playlist_kind)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rutube.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rutube.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}