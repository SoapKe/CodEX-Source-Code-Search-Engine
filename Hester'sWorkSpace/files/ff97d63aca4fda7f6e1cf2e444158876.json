{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    js_to_json,\n)\n\n\nclass IPrimaIE(InfoExtractor):\n    _VALID_URL = r'https?://play\\.iprima\\.cz/(?:.+/)?(?P<id>[^?\n    _GEO_BYPASS = False\n\n    _TESTS = [{\n        'url': 'http://play.iprima.cz/gondici-s-r-o-33',\n        'info_dict': {\n            'id': 'p136534',\n            'ext': 'mp4',\n            'title': 'Gond\u00edci s. r. o. (34)',\n            'description': 'md5:16577c629d006aa91f59ca8d8e7f99bd',\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }, {\n        'url': 'http://play.iprima.cz/particka/particka-92',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://play.iprima.cz/closer-nove-pripady/closer-nove-pripady-iv-1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_id = self._search_regex(r'data-product=\"([^\"]+)\">', webpage, 'real id')\n\n        playerpage = self._download_webpage(\n            'http://play.iprima.cz/prehravac/init',\n            video_id, note='Downloading player', query={\n                '_infuse': 1,\n                '_ts': round(time.time()),\n                'productId': video_id,\n            }, headers={'Referer': url})\n\n        formats = []\n\n        def extract_formats(format_url, format_key=None, lang=None):\n            ext = determine_ext(format_url)\n            new_formats = []\n            if format_key == 'hls' or ext == 'm3u8':\n                new_formats = self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False)\n            elif format_key == 'dash' or ext == 'mpd':\n                return\n                new_formats = self._extract_mpd_formats(\n                    format_url, video_id, mpd_id='dash', fatal=False)\n            if lang:\n                for f in new_formats:\n                    if not f.get('language'):\n                        f['language'] = lang\n            formats.extend(new_formats)\n\n        options = self._parse_json(\n            self._search_regex(\n                r'(?s)(?:TDIPlayerOptions|playerOptions)\\s*=\\s*({.+?});\\s*\\]\\]',\n                playerpage, 'player options', default='{}'),\n            video_id, transform_source=js_to_json, fatal=False)\n        if options:\n            for key, tracks in options.get('tracks', {}).items():\n                if not isinstance(tracks, list):\n                    continue\n                for track in tracks:\n                    src = track.get('src')\n                    if src:\n                        extract_formats(src, key.lower(), track.get('lang'))\n\n        if not formats:\n            for _, src in re.findall(r'src[\"\\']\\s*:\\s*([\"\\'])(.+?)\\1', playerpage):\n                extract_formats(src)\n\n        if not formats and '>GEO_IP_NOT_ALLOWED<' in playerpage:\n            self.raise_geo_restricted(countries=['CZ'])\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n        }\n", "comments": "# coding: utf-8\n#]+)'\n# m3u8 download\n# geo restricted\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    js_to_json,\n)\n\n\nclass IPrimaIE(InfoExtractor):\n    _VALID_URL = r'https?://play\\.iprima\\.cz/(?:.+/)?(?P<id>[^?#]+)'\n    _GEO_BYPASS = False\n\n    _TESTS = [{\n        'url': 'http://play.iprima.cz/gondici-s-r-o-33',\n        'info_dict': {\n            'id': 'p136534',\n            'ext': 'mp4',\n            'title': 'Gond\u00edci s. r. o. (34)',\n            'description': 'md5:16577c629d006aa91f59ca8d8e7f99bd',\n        },\n        'params': {\n            'skip_download': True,  # m3u8 download\n        },\n    }, {\n        'url': 'http://play.iprima.cz/particka/particka-92',\n        'only_matching': True,\n    }, {\n        # geo restricted\n        'url': 'http://play.iprima.cz/closer-nove-pripady/closer-nove-pripady-iv-1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_id = self._search_regex(r'data-product=\"([^\"]+)\">', webpage, 'real id')\n\n        playerpage = self._download_webpage(\n            'http://play.iprima.cz/prehravac/init',\n            video_id, note='Downloading player', query={\n                '_infuse': 1,\n                '_ts': round(time.time()),\n                'productId': video_id,\n            }, headers={'Referer': url})\n\n        formats = []\n\n        def extract_formats(format_url, format_key=None, lang=None):\n            ext = determine_ext(format_url)\n            new_formats = []\n            if format_key == 'hls' or ext == 'm3u8':\n                new_formats = self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False)\n            elif format_key == 'dash' or ext == 'mpd':\n                return\n                new_formats = self._extract_mpd_formats(\n                    format_url, video_id, mpd_id='dash', fatal=False)\n            if lang:\n                for f in new_formats:\n                    if not f.get('language'):\n                        f['language'] = lang\n            formats.extend(new_formats)\n\n        options = self._parse_json(\n            self._search_regex(\n                r'(?s)(?:TDIPlayerOptions|playerOptions)\\s*=\\s*({.+?});\\s*\\]\\]',\n                playerpage, 'player options', default='{}'),\n            video_id, transform_source=js_to_json, fatal=False)\n        if options:\n            for key, tracks in options.get('tracks', {}).items():\n                if not isinstance(tracks, list):\n                    continue\n                for track in tracks:\n                    src = track.get('src')\n                    if src:\n                        extract_formats(src, key.lower(), track.get('lang'))\n\n        if not formats:\n            for _, src in re.findall(r'src[\"\\']\\s*:\\s*([\"\\'])(.+?)\\1', playerpage):\n                extract_formats(src)\n\n        if not formats and '>GEO_IP_NOT_ALLOWED<' in playerpage:\n            self.raise_geo_restricted(countries=['CZ'])\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "iprima.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/iprima.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}