{"author": "aws", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nimport re\nimport random\nfrom nose.tools import assert_equal\n\nfrom awscli.testutils import aws\n\n\n These are a list of commands that we should run.\n We're just verifying that we can properly send a no-arg request\n and that we can parse any response that comes back.\nCOMMANDS = [\n    'autoscaling describe-account-limits',\n    'autoscaling describe-adjustment-types',\n    'cloudformation describe-stacks',\n    'cloudformation list-stacks',\n    'cloudsearch describe-domains',\n    'cloudsearch list-domain-names',\n    'cloudtrail describe-trails',\n    'cloudwatch list-metrics',\n    'cognito-identity list-identity-pools --max-results 1',\n    'datapipeline list-pipelines',\n    'directconnect describe-connections',\n    'dynamodb list-tables',\n    'ec2 describe-instances',\n    'ec2 describe-regions',\n    'elasticache describe-cache-clusters',\n    'elb describe-load-balancers',\n    'emr list-clusters',\n     Smoke test for timestamp parsing.\n    'emr list-clusters --created-after 2014-11-24T00:00:00',\n    'iam list-users',\n    'kinesis list-streams',\n    'kms generate-random --number-of-bytes 128',\n    'logs describe-log-groups',\n    'opsworks describe-stacks',\n    'rds describe-db-instances',\n    'redshift describe-clusters',\n    'route53 list-hosted-zones',\n    'route53domains list-domains',\n    's3api list-buckets',\n    's3 ls',\n    'ses list-identities',\n    'sns list-topics',\n    'sqs list-queues',\n    'storagegateway list-gateways',\n    'swf list-domains --registration-status REGISTERED',\n    ('swf list-open-workflow-executions --domain foo '\n     '--start-time-filter oldestDate=1970-01-01'),\n\n     Verify waiters as well.  We're picking the\n     \"resource does not exist\" type waiters so we can\n     give an identifier that doesn't exist and verify we have\n     a 0 rc.\n    'rds wait db-instance-deleted --db-instance-identifier foo-123',\n]\n\n\n A list of commands that generate error messages.  The idea is to try to have\n at least one command for each service.\n\n This verifies that service errors are properly displayed to the user, as\n opposed to either silently failing or inproperly handling the error responses\n and not displaying something useful.  Each command tries to call an operation\n with an identifier that does not exist, and part of the identifier is also\n randomly generated to help ensure that is the case.\nERROR_COMMANDS = [\n    'autoscaling attach-instances --auto-scaling-group-name %s',\n    'cloudformation cancel-update-stack --stack-name %s',\n    'cloudsearch describe-suggesters --domain-name %s',\n    'cloudtrail get-trail-status --name %s',\n    'cognito-identity delete-identity-pool --identity-pool-id %s',\n    'datapipeline delete-pipeline --pipeline-id %s',\n    'directconnect delete-connection --connection-id %s',\n    'dynamodb delete-table --table-name %s',\n    'ec2 terminate-instances --instance-ids %s',\n    'elasticache delete-cache-cluster --cache-cluster-id %s',\n    'elb describe-load-balancers --load-balancer-names %s',\n    'emr list-instances --cluster-id %s',\n    'iam delete-user --user-name %s',\n    'kinesis delete-stream --stream-name %s',\n    'logs delete-log-group --log-group-name %s',\n    'opsworks delete-app --app-id %s',\n    'rds delete-db-instance --db-instance-identifier %s',\n    'redshift delete-cluster --cluster-identifier %s',\n    'route53 delete-hosted-zone --id %s',\n    'route53domains get-domain-detail --domain-name %s',\n    's3api head-bucket --bucket %s',\n    'ses set-identity-dkim-enabled --identity %s --dkim-enabled',\n    'sns delete-endpoint --endpoint-arn %s',\n    'sqs delete-queue --queue-url %s',\n     --gateway-arn has min length client side validation\n     so we have to generate an identifier that's long enough.\n    ('storagegateway delete-gateway --gateway-arn '\n     'foo-cli-test-foo-cli-test-foo-cli-test-%s'),\n    'swf deprecate-domain --name %s',\n]\n\n\ndef test_can_make_success_request():\n    for cmd in COMMANDS:\n        yield _run_successful_aws_command, cmd\n\n\ndef _run_successful_aws_command(command_string):\n    result = aws(command_string)\n    assert_equal(result.rc, 0)\n    assert_equal(result.stderr, '')\n\n\ndef test_display_error_message():\n    identifier = 'foo-awscli-test-%s' % random.randint(1000, 100000)\n    for cmd in ERROR_COMMANDS:\n        yield _run_error_aws_command, cmd % identifier\n\n\ndef _run_error_aws_command(command_string):\n    result = aws(command_string)\n    assert_equal(result.rc, 255)\n    error_message = re.compile(\n        'An error occurred \\(.+\\) when calling the \\w+ operation: \\w+')\n    match = error_message.search(result.stderr)\n    if match is None:\n        raise AssertionError(\n            'Error message was not displayed for command \"%s\": %s' % (\n                command_string, result.stderr))\n", "comments": "  copyright 2014 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     these list commands run     we verifying properly send arg request    parse response comes back     smoke test timestamp parsing     verify waiters well   we picking     resource exist  type waiters    give identifier exist verify    0 rc     a list commands generate error messages   the idea try    least one command service        this verifies service errors properly displayed user     opposed either silently failing inproperly handling error responses    displaying something useful   each command tries call operation    identifier exist  part identifier also    randomly generated help ensure case       gateway arn min length client side validation    generate identifier long enough  ", "content": "# Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nimport re\nimport random\nfrom nose.tools import assert_equal\n\nfrom awscli.testutils import aws\n\n\n# These are a list of commands that we should run.\n# We're just verifying that we can properly send a no-arg request\n# and that we can parse any response that comes back.\nCOMMANDS = [\n    'autoscaling describe-account-limits',\n    'autoscaling describe-adjustment-types',\n    'cloudformation describe-stacks',\n    'cloudformation list-stacks',\n    'cloudsearch describe-domains',\n    'cloudsearch list-domain-names',\n    'cloudtrail describe-trails',\n    'cloudwatch list-metrics',\n    'cognito-identity list-identity-pools --max-results 1',\n    'datapipeline list-pipelines',\n    'directconnect describe-connections',\n    'dynamodb list-tables',\n    'ec2 describe-instances',\n    'ec2 describe-regions',\n    'elasticache describe-cache-clusters',\n    'elb describe-load-balancers',\n    'emr list-clusters',\n    # Smoke test for timestamp parsing.\n    'emr list-clusters --created-after 2014-11-24T00:00:00',\n    'iam list-users',\n    'kinesis list-streams',\n    'kms generate-random --number-of-bytes 128',\n    'logs describe-log-groups',\n    'opsworks describe-stacks',\n    'rds describe-db-instances',\n    'redshift describe-clusters',\n    'route53 list-hosted-zones',\n    'route53domains list-domains',\n    's3api list-buckets',\n    's3 ls',\n    'ses list-identities',\n    'sns list-topics',\n    'sqs list-queues',\n    'storagegateway list-gateways',\n    'swf list-domains --registration-status REGISTERED',\n    ('swf list-open-workflow-executions --domain foo '\n     '--start-time-filter oldestDate=1970-01-01'),\n\n    # Verify waiters as well.  We're picking the\n    # \"resource does not exist\" type waiters so we can\n    # give an identifier that doesn't exist and verify we have\n    # a 0 rc.\n    'rds wait db-instance-deleted --db-instance-identifier foo-123',\n]\n\n\n# A list of commands that generate error messages.  The idea is to try to have\n# at least one command for each service.\n#\n# This verifies that service errors are properly displayed to the user, as\n# opposed to either silently failing or inproperly handling the error responses\n# and not displaying something useful.  Each command tries to call an operation\n# with an identifier that does not exist, and part of the identifier is also\n# randomly generated to help ensure that is the case.\nERROR_COMMANDS = [\n    'autoscaling attach-instances --auto-scaling-group-name %s',\n    'cloudformation cancel-update-stack --stack-name %s',\n    'cloudsearch describe-suggesters --domain-name %s',\n    'cloudtrail get-trail-status --name %s',\n    'cognito-identity delete-identity-pool --identity-pool-id %s',\n    'datapipeline delete-pipeline --pipeline-id %s',\n    'directconnect delete-connection --connection-id %s',\n    'dynamodb delete-table --table-name %s',\n    'ec2 terminate-instances --instance-ids %s',\n    'elasticache delete-cache-cluster --cache-cluster-id %s',\n    'elb describe-load-balancers --load-balancer-names %s',\n    'emr list-instances --cluster-id %s',\n    'iam delete-user --user-name %s',\n    'kinesis delete-stream --stream-name %s',\n    'logs delete-log-group --log-group-name %s',\n    'opsworks delete-app --app-id %s',\n    'rds delete-db-instance --db-instance-identifier %s',\n    'redshift delete-cluster --cluster-identifier %s',\n    'route53 delete-hosted-zone --id %s',\n    'route53domains get-domain-detail --domain-name %s',\n    's3api head-bucket --bucket %s',\n    'ses set-identity-dkim-enabled --identity %s --dkim-enabled',\n    'sns delete-endpoint --endpoint-arn %s',\n    'sqs delete-queue --queue-url %s',\n    # --gateway-arn has min length client side validation\n    # so we have to generate an identifier that's long enough.\n    ('storagegateway delete-gateway --gateway-arn '\n     'foo-cli-test-foo-cli-test-foo-cli-test-%s'),\n    'swf deprecate-domain --name %s',\n]\n\n\ndef test_can_make_success_request():\n    for cmd in COMMANDS:\n        yield _run_successful_aws_command, cmd\n\n\ndef _run_successful_aws_command(command_string):\n    result = aws(command_string)\n    assert_equal(result.rc, 0)\n    assert_equal(result.stderr, '')\n\n\ndef test_display_error_message():\n    identifier = 'foo-awscli-test-%s' % random.randint(1000, 100000)\n    for cmd in ERROR_COMMANDS:\n        yield _run_error_aws_command, cmd % identifier\n\n\ndef _run_error_aws_command(command_string):\n    result = aws(command_string)\n    assert_equal(result.rc, 255)\n    error_message = re.compile(\n        'An error occurred \\(.+\\) when calling the \\w+ operation: \\w+')\n    match = error_message.search(result.stderr)\n    if match is None:\n        raise AssertionError(\n            'Error message was not displayed for command \"%s\": %s' % (\n                command_string, result.stderr))\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_smoke.py", "id": "5d37d3680e8e8a6ddaa306e857a9b338", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/integration/test_smoke.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}