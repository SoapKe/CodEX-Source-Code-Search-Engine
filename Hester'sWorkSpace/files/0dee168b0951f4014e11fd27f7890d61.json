{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_domain\nshort_description: Manage physical, virtual, bridged, routed or FC domain profiles (phys:DomP, vmm:DomP, l2ext:DomP, l3ext:DomP, fc:DomP)\ndescription:\n- Manage physical, virtual, bridged, routed or FC domain profiles on Cisco ACI fabrics.\nnotes:\n- More information about the internal APIC classes B(phys:DomP),\n  B(vmm:DomP), B(l2ext:DomP), B(l3ext:DomP) and B(fc:DomP) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.5'\noptions:\n  domain:\n    description:\n    - Name of the physical, virtual, bridged routed or FC domain profile.\n    aliases: [ domain_name, domain_profile, name ]\n  domain_type:\n    description:\n    - The type of domain profile.\n    - 'C(fc): The FC domain profile is a policy pertaining to single FC Management domain'\n    - 'C(l2dom): The external bridged domain profile is a policy for managing L2 bridged infrastructure bridged outside the fabric.'\n    - 'C(l3dom): The external routed domain profile is a policy for managing L3 routed infrastructure outside the fabric.'\n    - 'C(phys): The physical domain profile stores the physical resources and encap resources that should be used for EPGs associated with this domain.'\n    - 'C(vmm): The VMM domain profile is a policy for grouping VM controllers with similar networking policy requirements.'\n    choices: [ fc, l2dom, l3dom, phys, vmm ]\n    aliases: [ type ]\n  dscp:\n    description:\n    - The target Differentiated Service (DSCP) value.\n    choices: [ AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, CS0, CS1, CS2, CS3, CS4, CS5, CS6, CS7, EF, VA, unspecified ]\n    default: unspecified\n    aliases: [ target ]\n  encap_mode:\n    description:\n    - The layer 2 encapsulation protocol to use with the virtual switch.\n    choices: [ unknown, vlan, vxlan ]\n  multicast_address:\n    description:\n    - The muticast IP address to use for the virtual switch.\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\n  vm_provider:\n    description:\n    - The VM platform for VMM Domains.\n    - Support for Kubernetes was added in ACI v3.0.\n    - Support for CloudFoundry, OpenShift and Red Hat was added in ACI v3.1.\n    choices: [ cloudfoundry, kubernetes, microsoft, openshift, openstack, redhat, vmware ]\n  vswitch:\n    description:\n    - The virtual switch to use for vmm domains.\n    choices: [ avs, default, dvs, unknown ]\n    default: default\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new physical domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    state: present\n\n- name: Remove a physical domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    state: absent\n\n- name: Add a new VMM domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: hyperv_dom\n    domain_type: vmm\n    vm_provider: microsoft\n    state: present\n\n- name: Remove a VMM domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: hyperv_dom\n    domain_type: vmm\n    vm_provider: microsoft\n    state: absent\n\n- name: Query a specific physical domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    state: query\n\n- name: Query all domains\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain_type: phys\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\n\nVM_PROVIDER_MAPPING = dict(\n    cloudfoundry='CloudFoundry',\n    kubernetes='Kubernetes',\n    microsoft='Microsoft',\n    openshift='OpenShift',\n    openstack='OpenStack',\n    redhat='Redhat',\n    vmware='VMware',\n)\nVSWITCH_MAPPING = dict(\n    avs='n1kv',\n    default='default',\n    dvs='default',\n    unknown='unknown',\n)\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        dscp=dict(type='str',\n                  choices=['AF11', 'AF12', 'AF13', 'AF21', 'AF22', 'AF23', 'AF31', 'AF32', 'AF33', 'AF41', 'AF42', 'AF43',\n                           'CS0', 'CS1', 'CS2', 'CS3', 'CS4', 'CS5', 'CS6', 'CS7', 'EF', 'VA', 'unspecified'],\n                  aliases=['target']),\n        domain=dict(type='str', aliases=['domain_name', 'domain_profile', 'name']),  \n        domain_type=dict(type='str', required=True, choices=['fc', 'l2dom', 'l3dom', 'phys', 'vmm'], aliases=['type']),  \n        encap_mode=dict(type='str', choices=['unknown', 'vlan', 'vxlan']),\n        multicast_address=dict(type='str'),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        vm_provider=dict(type='str', choices=['cloudfoundry', 'kubernetes', 'microsoft', 'openshift', 'openstack', 'redhat', 'vmware']),\n        vswitch=dict(type='str', choices=['avs', 'default', 'dvs', 'unknown']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['domain_type', 'vmm', ['vm_provider']],\n            ['state', 'absent', ['domain', 'domain_type']],\n            ['state', 'present', ['domain', 'domain_type']],\n        ],\n    )\n\n    dscp = module.params['dscp']\n    domain = module.params['domain']\n    domain_type = module.params['domain_type']\n    encap_mode = module.params['encap_mode']\n    multicast_address = module.params['multicast_address']\n    vm_provider = module.params['vm_provider']\n    vswitch = module.params['vswitch']\n    if vswitch is not None:\n        vswitch = VSWITCH_MAPPING[vswitch]\n    state = module.params['state']\n\n    if domain_type != 'vmm':\n        if vm_provider is not None:\n            module.fail_json(msg=\"Domain type '{0}' cannot have parameter 'vm_provider'\".format(domain_type))\n        if encap_mode is not None:\n            module.fail_json(msg=\"Domain type '{0}' cannot have parameter 'encap_mode'\".format(domain_type))\n        if multicast_address is not None:\n            module.fail_json(msg=\"Domain type '{0}' cannot have parameter 'multicast_address'\".format(domain_type))\n        if vswitch is not None:\n            module.fail_json(msg=\"Domain type '{0}' cannot have parameter 'vswitch'\".format(domain_type))\n\n    if dscp is not None and domain_type not in ['l2dom', 'l3dom']:\n        module.fail_json(msg=\"DSCP values can only be assigned to 'l2ext and 'l3ext' domains\")\n\n    \n    if domain_type == 'fc':\n        domain_class = 'fcDomP'\n        domain_mo = 'uni/fc-{0}'.format(domain)\n        domain_rn = 'fc-{0}'.format(domain)\n    elif domain_type == 'l2dom':\n        domain_class = 'l2extDomP'\n        domain_mo = 'uni/l2dom-{0}'.format(domain)\n        domain_rn = 'l2dom-{0}'.format(domain)\n    elif domain_type == 'l3dom':\n        domain_class = 'l3extDomP'\n        domain_mo = 'uni/l3dom-{0}'.format(domain)\n        domain_rn = 'l3dom-{0}'.format(domain)\n    elif domain_type == 'phys':\n        domain_class = 'physDomP'\n        domain_mo = 'uni/phys-{0}'.format(domain)\n        domain_rn = 'phys-{0}'.format(domain)\n    elif domain_type == 'vmm':\n        domain_class = 'vmmDomP'\n        domain_mo = 'uni/vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)\n        domain_rn = 'vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)\n\n    \n    if domain is None:\n        domain_mo = None\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class=domain_class,\n            aci_rn=domain_rn,\n            filter_target='eq({0}.name, \"{1}\")'.format(domain_class, domain),\n            module_object=domain_mo,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class=domain_class,\n            class_config=dict(\n                encapMode=encap_mode,\n                mcastAddr=multicast_address,\n                mode=vswitch,\n                name=domain,\n                targetDscp=dscp,\n            ),\n        )\n\n        aci.get_diff(aci_class=domain_class)\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci domain short description  manage physical  virtual  bridged  routed fc domain profiles (phys domp  vmm domp  l2ext domp  l3ext domp  fc domp) description    manage physical  virtual  bridged  routed fc domain profiles cisco aci fabrics  notes    more information internal apic classes b(phys domp)    b(vmm domp)  b(l2ext domp)  b(l3ext domp) b(fc domp)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    dag wieers ( dagwieers) version added   2 5  options    domain      description        name physical  virtual  bridged routed fc domain profile      aliases    domain name  domain profile  name     domain type      description        the type domain profile         c(fc)  the fc domain profile policy pertaining single fc management domain         c(l2dom)  the external bridged domain profile policy managing l2 bridged infrastructure bridged outside fabric          c(l3dom)  the external routed domain profile policy managing l3 routed infrastructure outside fabric          c(phys)  the physical domain profile stores physical resources encap resources used epgs associated domain          c(vmm)  the vmm domain profile policy grouping vm controllers similar networking policy requirements       choices    fc  l2dom  l3dom  phys  vmm       aliases    type     dscp      description        the target differentiated service (dscp) value      choices    af11  af12  af13  af21  af22  af23  af31  af32  af33  af41  af42  af43  cs0  cs1  cs2  cs3  cs4  cs5  cs6  cs7  ef  va  unspecified       default  unspecified     aliases    target     encap mode      description        the layer 2 encapsulation protocol use virtual switch      choices    unknown  vlan  vxlan     multicast address      description        the muticast ip address use virtual switch    state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present   vm provider      description        the vm platform vmm domains        support kubernetes added aci v3 0        support cloudfoundry  openshift red hat added aci v3 1      choices    cloudfoundry  kubernetes  microsoft  openshift  openstack  redhat  vmware     vswitch      description        the virtual switch use vmm domains      choices    avs  default  dvs  unknown       default  default extends documentation fragment  aci      examples   r      name  add new physical domain   aci domain      host  apic     username  admin     password  somesecretpassword     domain  phys dom     domain type  phys     state  present    name  remove physical domain   aci domain      host  apic     username  admin     password  somesecretpassword     domain  phys dom     domain type  phys     state  absent    name  add new vmm domain   aci domain      host  apic     username  admin     password  somesecretpassword     domain  hyperv dom     domain type  vmm     vm provider  microsoft     state  present    name  remove vmm domain   aci domain      host  apic     username  admin     password  somesecretpassword     domain  hyperv dom     domain type  vmm     vm provider  microsoft     state  absent    name  query specific physical domain   aci domain      host  apic     username  admin     password  somesecretpassword     domain  phys dom     domain type  phys     state  query    name  query domains   aci domain      host  apic     username  admin     password  somesecretpassword     domain type  phys     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    not required querying objects    compile full domain url building    ensure querying objects works domain type provided ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_domain\nshort_description: Manage physical, virtual, bridged, routed or FC domain profiles (phys:DomP, vmm:DomP, l2ext:DomP, l3ext:DomP, fc:DomP)\ndescription:\n- Manage physical, virtual, bridged, routed or FC domain profiles on Cisco ACI fabrics.\nnotes:\n- More information about the internal APIC classes B(phys:DomP),\n  B(vmm:DomP), B(l2ext:DomP), B(l3ext:DomP) and B(fc:DomP) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.5'\noptions:\n  domain:\n    description:\n    - Name of the physical, virtual, bridged routed or FC domain profile.\n    aliases: [ domain_name, domain_profile, name ]\n  domain_type:\n    description:\n    - The type of domain profile.\n    - 'C(fc): The FC domain profile is a policy pertaining to single FC Management domain'\n    - 'C(l2dom): The external bridged domain profile is a policy for managing L2 bridged infrastructure bridged outside the fabric.'\n    - 'C(l3dom): The external routed domain profile is a policy for managing L3 routed infrastructure outside the fabric.'\n    - 'C(phys): The physical domain profile stores the physical resources and encap resources that should be used for EPGs associated with this domain.'\n    - 'C(vmm): The VMM domain profile is a policy for grouping VM controllers with similar networking policy requirements.'\n    choices: [ fc, l2dom, l3dom, phys, vmm ]\n    aliases: [ type ]\n  dscp:\n    description:\n    - The target Differentiated Service (DSCP) value.\n    choices: [ AF11, AF12, AF13, AF21, AF22, AF23, AF31, AF32, AF33, AF41, AF42, AF43, CS0, CS1, CS2, CS3, CS4, CS5, CS6, CS7, EF, VA, unspecified ]\n    default: unspecified\n    aliases: [ target ]\n  encap_mode:\n    description:\n    - The layer 2 encapsulation protocol to use with the virtual switch.\n    choices: [ unknown, vlan, vxlan ]\n  multicast_address:\n    description:\n    - The muticast IP address to use for the virtual switch.\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\n  vm_provider:\n    description:\n    - The VM platform for VMM Domains.\n    - Support for Kubernetes was added in ACI v3.0.\n    - Support for CloudFoundry, OpenShift and Red Hat was added in ACI v3.1.\n    choices: [ cloudfoundry, kubernetes, microsoft, openshift, openstack, redhat, vmware ]\n  vswitch:\n    description:\n    - The virtual switch to use for vmm domains.\n    choices: [ avs, default, dvs, unknown ]\n    default: default\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Add a new physical domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    state: present\n\n- name: Remove a physical domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    state: absent\n\n- name: Add a new VMM domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: hyperv_dom\n    domain_type: vmm\n    vm_provider: microsoft\n    state: present\n\n- name: Remove a VMM domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: hyperv_dom\n    domain_type: vmm\n    vm_provider: microsoft\n    state: absent\n\n- name: Query a specific physical domain\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    state: query\n\n- name: Query all domains\n  aci_domain:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain_type: phys\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\n\nVM_PROVIDER_MAPPING = dict(\n    cloudfoundry='CloudFoundry',\n    kubernetes='Kubernetes',\n    microsoft='Microsoft',\n    openshift='OpenShift',\n    openstack='OpenStack',\n    redhat='Redhat',\n    vmware='VMware',\n)\nVSWITCH_MAPPING = dict(\n    avs='n1kv',\n    default='default',\n    dvs='default',\n    unknown='unknown',\n)\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        dscp=dict(type='str',\n                  choices=['AF11', 'AF12', 'AF13', 'AF21', 'AF22', 'AF23', 'AF31', 'AF32', 'AF33', 'AF41', 'AF42', 'AF43',\n                           'CS0', 'CS1', 'CS2', 'CS3', 'CS4', 'CS5', 'CS6', 'CS7', 'EF', 'VA', 'unspecified'],\n                  aliases=['target']),\n        domain=dict(type='str', aliases=['domain_name', 'domain_profile', 'name']),  # Not required for querying all objects\n        domain_type=dict(type='str', required=True, choices=['fc', 'l2dom', 'l3dom', 'phys', 'vmm'], aliases=['type']),  # Not required for querying all objects\n        encap_mode=dict(type='str', choices=['unknown', 'vlan', 'vxlan']),\n        multicast_address=dict(type='str'),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        vm_provider=dict(type='str', choices=['cloudfoundry', 'kubernetes', 'microsoft', 'openshift', 'openstack', 'redhat', 'vmware']),\n        vswitch=dict(type='str', choices=['avs', 'default', 'dvs', 'unknown']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['domain_type', 'vmm', ['vm_provider']],\n            ['state', 'absent', ['domain', 'domain_type']],\n            ['state', 'present', ['domain', 'domain_type']],\n        ],\n    )\n\n    dscp = module.params['dscp']\n    domain = module.params['domain']\n    domain_type = module.params['domain_type']\n    encap_mode = module.params['encap_mode']\n    multicast_address = module.params['multicast_address']\n    vm_provider = module.params['vm_provider']\n    vswitch = module.params['vswitch']\n    if vswitch is not None:\n        vswitch = VSWITCH_MAPPING[vswitch]\n    state = module.params['state']\n\n    if domain_type != 'vmm':\n        if vm_provider is not None:\n            module.fail_json(msg=\"Domain type '{0}' cannot have parameter 'vm_provider'\".format(domain_type))\n        if encap_mode is not None:\n            module.fail_json(msg=\"Domain type '{0}' cannot have parameter 'encap_mode'\".format(domain_type))\n        if multicast_address is not None:\n            module.fail_json(msg=\"Domain type '{0}' cannot have parameter 'multicast_address'\".format(domain_type))\n        if vswitch is not None:\n            module.fail_json(msg=\"Domain type '{0}' cannot have parameter 'vswitch'\".format(domain_type))\n\n    if dscp is not None and domain_type not in ['l2dom', 'l3dom']:\n        module.fail_json(msg=\"DSCP values can only be assigned to 'l2ext and 'l3ext' domains\")\n\n    # Compile the full domain for URL building\n    if domain_type == 'fc':\n        domain_class = 'fcDomP'\n        domain_mo = 'uni/fc-{0}'.format(domain)\n        domain_rn = 'fc-{0}'.format(domain)\n    elif domain_type == 'l2dom':\n        domain_class = 'l2extDomP'\n        domain_mo = 'uni/l2dom-{0}'.format(domain)\n        domain_rn = 'l2dom-{0}'.format(domain)\n    elif domain_type == 'l3dom':\n        domain_class = 'l3extDomP'\n        domain_mo = 'uni/l3dom-{0}'.format(domain)\n        domain_rn = 'l3dom-{0}'.format(domain)\n    elif domain_type == 'phys':\n        domain_class = 'physDomP'\n        domain_mo = 'uni/phys-{0}'.format(domain)\n        domain_rn = 'phys-{0}'.format(domain)\n    elif domain_type == 'vmm':\n        domain_class = 'vmmDomP'\n        domain_mo = 'uni/vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)\n        domain_rn = 'vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)\n\n    # Ensure that querying all objects works when only domain_type is provided\n    if domain is None:\n        domain_mo = None\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class=domain_class,\n            aci_rn=domain_rn,\n            filter_target='eq({0}.name, \"{1}\")'.format(domain_class, domain),\n            module_object=domain_mo,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class=domain_class,\n            class_config=dict(\n                encapMode=encap_mode,\n                mcastAddr=multicast_address,\n                mode=vswitch,\n                name=domain,\n                targetDscp=dscp,\n            ),\n        )\n\n        aci.get_diff(aci_class=domain_class)\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_domain.py", "id": "0dee168b0951f4014e11fd27f7890d61", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_domain.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}