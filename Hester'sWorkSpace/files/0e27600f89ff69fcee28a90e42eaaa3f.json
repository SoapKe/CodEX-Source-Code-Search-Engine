{"author": "ansible", "code": "\n\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = \"\"\"\n---\nmodule: onyx_mlag_ipl\nversion_added: \"2.5\"\nauthor: \"Samer Deeb (@samerd)\"\nshort_description: Manage IPL (inter-peer link) on Mellanox ONYX network devices\ndescription:\n  - This module provides declarative management of IPL (inter-peer link)\n    management on Mellanox ONYX network devices.\nnotes:\n  - Tested on ONYX 3.6.4000\noptions:\n  name:\n    description:\n      - Name of the interface (port-channel) IPL should be configured on.\n    required: true\n  vlan_interface:\n    description:\n      - Name of the IPL vlan interface.\n  state:\n    description:\n      - IPL state.\n    default: present\n    choices: ['present', 'absent']\n  peer_address:\n    description:\n      - IPL peer IP address.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: run configure ipl\n  onyx_mlag_ipl:\n    name: Po1\n    vlan_interface: Vlan 322\n    state: present\n    peer_address: 192.168.7.1\n\n- name: run remove ipl\n  onyx_mlag_ipl:\n    name: Po1\n    state: absent\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The list of configuration mode commands to send to the device.\n  returned: always\n  type: list\n  sample:\n    - interface port-channel 1 ipl 1\n    - interface vlan 1024 ipl 1 peer-address 10.10.10.10\n\"\"\"\nimport re\n\nfrom ansible.module_utils.basic import AnsibleModule\n\nfrom ansible.module_utils.network.onyx.onyx import BaseOnyxModule\nfrom ansible.module_utils.network.onyx.onyx import show_cmd\n\n\nclass OnyxMlagIplModule(BaseOnyxModule):\n    VLAN_IF_REGEX = re.compile(r'^Vlan \\d+')\n\n    @classmethod\n    def _get_element_spec(cls):\n        return dict(\n            name=dict(required=True),\n            state=dict(default='present',\n                       choices=['present', 'absent']),\n            peer_address=dict(),\n            vlan_interface=dict(),\n        )\n\n    def init_module(self):\n        \"\"\" module initialization\n        \"\"\"\n        element_spec = self._get_element_spec()\n        argument_spec = dict()\n        argument_spec.update(element_spec)\n        self._module = AnsibleModule(\n            argument_spec=argument_spec,\n            supports_check_mode=True)\n\n    def get_required_config(self):\n        module_params = self._module.params\n        self._required_config = dict(\n            name=module_params['name'],\n            state=module_params['state'],\n            peer_address=module_params['peer_address'],\n            vlan_interface=module_params['vlan_interface'])\n        self.validate_param_values(self._required_config)\n\n    def _update_mlag_data(self, mlag_data):\n        if not mlag_data:\n            return\n        mlag_summary = mlag_data.get(\"MLAG IPLs Summary\", {})\n        ipl_id = \"1\"\n        ipl_list = mlag_summary.get(ipl_id)\n        if ipl_list:\n            ipl_data = ipl_list[0]\n            vlan_id = ipl_data.get(\"Vlan Interface\")\n            vlan_interface = \"\"\n            if vlan_id != \"N/A\":\n                vlan_interface = \"Vlan %s\" % vlan_id\n            peer_address = ipl_data.get(\"Peer IP address\")\n            name = ipl_data.get(\"Group Port-Channel\")\n            self._current_config = dict(\n                name=name,\n                peer_address=peer_address,\n                vlan_interface=vlan_interface)\n\n    def _show_mlag_data(self):\n        cmd = \"show mlag\"\n        return show_cmd(self._module, cmd, json_fmt=True, fail_on_error=False)\n\n    def load_current_config(self):\n         called in base class in run function\n        self._current_config = dict()\n        mlag_data = self._show_mlag_data()\n        self._update_mlag_data(mlag_data)\n\n    def _get_interface_cmd_name(self, if_name):\n        if if_name.startswith('Po'):\n            return if_name.replace(\"Po\", \"port-channel \")\n        self._module.fail_json(\n            msg='invalid interface name: %s' % if_name)\n\n    def _generate_port_channel_command(self, if_name, enable):\n        if_cmd_name = self._get_interface_cmd_name(if_name)\n        if enable:\n            ipl_cmd = 'ipl 1'\n        else:\n            ipl_cmd = \"no ipl 1\"\n        cmd = \"interface %s %s\" % (if_cmd_name, ipl_cmd)\n        return cmd\n\n    def _generate_vlan_if_command(self, if_name, enable, peer_address):\n        if_cmd_name = if_name.lower()\n        if enable:\n            ipl_cmd = 'ipl 1 peer-address %s' % peer_address\n        else:\n            ipl_cmd = \"no ipl 1\"\n        cmd = \"interface %s %s\" % (if_cmd_name, ipl_cmd)\n        return cmd\n\n    def _generate_no_ipl_commands(self):\n        curr_interface = self._current_config.get('name')\n        req_interface = self._required_config.get('name')\n        if curr_interface == req_interface:\n            cmd = self._generate_port_channel_command(\n                req_interface, enable=False)\n            self._commands.append(cmd)\n\n    def _generate_ipl_commands(self):\n        curr_interface = self._current_config.get('name')\n        req_interface = self._required_config.get('name')\n        if curr_interface != req_interface:\n            if curr_interface and curr_interface != 'N/A':\n                cmd = self._generate_port_channel_command(\n                    curr_interface, enable=False)\n                self._commands.append(cmd)\n            cmd = self._generate_port_channel_command(\n                req_interface, enable=True)\n            self._commands.append(cmd)\n        curr_vlan = self._current_config.get('vlan_interface')\n        req_vlan = self._required_config.get('vlan_interface')\n        add_peer = False\n        if curr_vlan != req_vlan:\n            add_peer = True\n            if curr_vlan:\n                cmd = self._generate_vlan_if_command(curr_vlan, enable=False,\n                                                     peer_address=None)\n                self._commands.append(cmd)\n        curr_peer = self._current_config.get('peer_address')\n        req_peer = self._required_config.get('peer_address')\n        if req_peer != curr_peer:\n            add_peer = True\n        if add_peer and req_peer:\n            cmd = self._generate_vlan_if_command(req_vlan, enable=True,\n                                                 peer_address=req_peer)\n            self._commands.append(cmd)\n\n    def generate_commands(self):\n        state = self._required_config['state']\n        if state == 'absent':\n            self._generate_no_ipl_commands()\n        else:\n            self._generate_ipl_commands()\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n    OnyxMlagIplModule.main()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  onyx mlag ipl version added   2 5  author   samer deeb ( samerd)  short description  manage ipl (inter peer link) mellanox onyx network devices description      this module provides declarative management ipl (inter peer link)     management mellanox onyx network devices  notes      tested onyx 3 6 4000 options    name      description          name interface (port channel) ipl configured      required  true   vlan interface      description          name ipl vlan interface    state      description          ipl state      default  present     choices    present    absent     peer address      description          ipl peer ip address       examples         name  run configure ipl   onyx mlag ipl      name  po1     vlan interface  vlan 322     state  present     peer address  192 168 7 1    name  run remove ipl   onyx mlag ipl      name  po1     state  absent      return       commands    description  the list configuration mode commands send device    returned  always   type  list   sample        interface port channel 1 ipl 1       interface vlan 1024 ipl 1 peer address 10 10 10 10     import  ansible module utils basic import ansiblemodule  ansible module utils network onyx onyx import baseonyxmodule ansible module utils network onyx onyx import show cmd   class onyxmlagiplmodule(baseonyxmodule)      vlan if regex   compile(r  vlan   )       classmethod     def  get element spec(cls)          return dict(             name dict(required true)              state dict(default  present                          choices   present    absent  )              peer address dict()              vlan interface dict()          )      def init module(self)              module initialization                     element spec   self  get element spec()         argument spec   dict()         argument spec update(element spec)         self  module   ansiblemodule(             argument spec argument spec              supports check mode true)      def get required config(self)          module params   self  module params         self  required config   dict(             name module params  name                state module params  state                peer address module params  peer address                vlan interface module params  vlan interface  )         self validate param values(self  required config)      def  update mlag data(self  mlag data)          mlag data              return         mlag summary   mlag data get( mlag ipls summary     )         ipl id    1          ipl list   mlag summary get(ipl id)         ipl list              ipl data   ipl list 0              vlan id   ipl data get( vlan interface )             vlan interface                  vlan id     n a                   vlan interface    vlan     vlan id             peer address   ipl data get( peer ip address )             name   ipl data get( group port channel )             self  current config   dict(                 name name                  peer address peer address                  vlan interface vlan interface)      def  show mlag data(self)          cmd    show mlag          return show cmd(self  module  cmd  json fmt true  fail error false)      def load current config(self)            called base class run function         self  current config   dict()         mlag data   self  show mlag data()         self  update mlag data(mlag data)      def  get interface cmd name(self  name)          name startswith( po )              return name replace( po    port channel  )         self  module fail json(             msg  invalid interface name      name)      def  generate port channel command(self  name  enable)          cmd name   self  get interface cmd name(if name)         enable              ipl cmd    ipl 1          else              ipl cmd    ipl 1          cmd    interface      (if cmd name  ipl cmd)         return cmd      def  generate vlan command(self  name  enable  peer address)          cmd name   name lower()         enable              ipl cmd    ipl 1 peer address     peer address         else              ipl cmd    ipl 1          cmd    interface      (if cmd name  ipl cmd)         return cmd      def  generate ipl commands(self)          curr interface   self  current config get( name )         req interface   self  required config get( name )         curr interface    req interface              cmd   self  generate port channel command(                 req interface  enable false)             self  commands append(cmd)      def  generate ipl commands(self)          curr interface   self  current config get( name )         req interface   self  required config get( name )         curr interface    req interface              curr interface curr interface     n a                   cmd   self  generate port channel command(                     curr interface  enable false)                 self  commands append(cmd)             cmd   self  generate port channel command(                 req interface  enable true)             self  commands append(cmd)         curr vlan   self  current config get( vlan interface )         req vlan   self  required config get( vlan interface )         add peer   false         curr vlan    req vlan              add peer   true             curr vlan                  cmd   self  generate vlan command(curr vlan  enable false                                                       peer address none)                 self  commands append(cmd)         curr peer   self  current config get( peer address )         req peer   self  required config get( peer address )         req peer    curr peer              add peer   true         add peer req peer              cmd   self  generate vlan command(req vlan  enable true                                                   peer address req peer)             self  commands append(cmd)      def generate commands(self)          state   self  required config  state           state     absent               self  generate ipl commands()         else              self  generate ipl commands()   def main()          main entry point module execution             usr bin python       copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    called base class run function ", "content": "#!/usr/bin/python\n#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = \"\"\"\n---\nmodule: onyx_mlag_ipl\nversion_added: \"2.5\"\nauthor: \"Samer Deeb (@samerd)\"\nshort_description: Manage IPL (inter-peer link) on Mellanox ONYX network devices\ndescription:\n  - This module provides declarative management of IPL (inter-peer link)\n    management on Mellanox ONYX network devices.\nnotes:\n  - Tested on ONYX 3.6.4000\noptions:\n  name:\n    description:\n      - Name of the interface (port-channel) IPL should be configured on.\n    required: true\n  vlan_interface:\n    description:\n      - Name of the IPL vlan interface.\n  state:\n    description:\n      - IPL state.\n    default: present\n    choices: ['present', 'absent']\n  peer_address:\n    description:\n      - IPL peer IP address.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: run configure ipl\n  onyx_mlag_ipl:\n    name: Po1\n    vlan_interface: Vlan 322\n    state: present\n    peer_address: 192.168.7.1\n\n- name: run remove ipl\n  onyx_mlag_ipl:\n    name: Po1\n    state: absent\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The list of configuration mode commands to send to the device.\n  returned: always\n  type: list\n  sample:\n    - interface port-channel 1 ipl 1\n    - interface vlan 1024 ipl 1 peer-address 10.10.10.10\n\"\"\"\nimport re\n\nfrom ansible.module_utils.basic import AnsibleModule\n\nfrom ansible.module_utils.network.onyx.onyx import BaseOnyxModule\nfrom ansible.module_utils.network.onyx.onyx import show_cmd\n\n\nclass OnyxMlagIplModule(BaseOnyxModule):\n    VLAN_IF_REGEX = re.compile(r'^Vlan \\d+')\n\n    @classmethod\n    def _get_element_spec(cls):\n        return dict(\n            name=dict(required=True),\n            state=dict(default='present',\n                       choices=['present', 'absent']),\n            peer_address=dict(),\n            vlan_interface=dict(),\n        )\n\n    def init_module(self):\n        \"\"\" module initialization\n        \"\"\"\n        element_spec = self._get_element_spec()\n        argument_spec = dict()\n        argument_spec.update(element_spec)\n        self._module = AnsibleModule(\n            argument_spec=argument_spec,\n            supports_check_mode=True)\n\n    def get_required_config(self):\n        module_params = self._module.params\n        self._required_config = dict(\n            name=module_params['name'],\n            state=module_params['state'],\n            peer_address=module_params['peer_address'],\n            vlan_interface=module_params['vlan_interface'])\n        self.validate_param_values(self._required_config)\n\n    def _update_mlag_data(self, mlag_data):\n        if not mlag_data:\n            return\n        mlag_summary = mlag_data.get(\"MLAG IPLs Summary\", {})\n        ipl_id = \"1\"\n        ipl_list = mlag_summary.get(ipl_id)\n        if ipl_list:\n            ipl_data = ipl_list[0]\n            vlan_id = ipl_data.get(\"Vlan Interface\")\n            vlan_interface = \"\"\n            if vlan_id != \"N/A\":\n                vlan_interface = \"Vlan %s\" % vlan_id\n            peer_address = ipl_data.get(\"Peer IP address\")\n            name = ipl_data.get(\"Group Port-Channel\")\n            self._current_config = dict(\n                name=name,\n                peer_address=peer_address,\n                vlan_interface=vlan_interface)\n\n    def _show_mlag_data(self):\n        cmd = \"show mlag\"\n        return show_cmd(self._module, cmd, json_fmt=True, fail_on_error=False)\n\n    def load_current_config(self):\n        # called in base class in run function\n        self._current_config = dict()\n        mlag_data = self._show_mlag_data()\n        self._update_mlag_data(mlag_data)\n\n    def _get_interface_cmd_name(self, if_name):\n        if if_name.startswith('Po'):\n            return if_name.replace(\"Po\", \"port-channel \")\n        self._module.fail_json(\n            msg='invalid interface name: %s' % if_name)\n\n    def _generate_port_channel_command(self, if_name, enable):\n        if_cmd_name = self._get_interface_cmd_name(if_name)\n        if enable:\n            ipl_cmd = 'ipl 1'\n        else:\n            ipl_cmd = \"no ipl 1\"\n        cmd = \"interface %s %s\" % (if_cmd_name, ipl_cmd)\n        return cmd\n\n    def _generate_vlan_if_command(self, if_name, enable, peer_address):\n        if_cmd_name = if_name.lower()\n        if enable:\n            ipl_cmd = 'ipl 1 peer-address %s' % peer_address\n        else:\n            ipl_cmd = \"no ipl 1\"\n        cmd = \"interface %s %s\" % (if_cmd_name, ipl_cmd)\n        return cmd\n\n    def _generate_no_ipl_commands(self):\n        curr_interface = self._current_config.get('name')\n        req_interface = self._required_config.get('name')\n        if curr_interface == req_interface:\n            cmd = self._generate_port_channel_command(\n                req_interface, enable=False)\n            self._commands.append(cmd)\n\n    def _generate_ipl_commands(self):\n        curr_interface = self._current_config.get('name')\n        req_interface = self._required_config.get('name')\n        if curr_interface != req_interface:\n            if curr_interface and curr_interface != 'N/A':\n                cmd = self._generate_port_channel_command(\n                    curr_interface, enable=False)\n                self._commands.append(cmd)\n            cmd = self._generate_port_channel_command(\n                req_interface, enable=True)\n            self._commands.append(cmd)\n        curr_vlan = self._current_config.get('vlan_interface')\n        req_vlan = self._required_config.get('vlan_interface')\n        add_peer = False\n        if curr_vlan != req_vlan:\n            add_peer = True\n            if curr_vlan:\n                cmd = self._generate_vlan_if_command(curr_vlan, enable=False,\n                                                     peer_address=None)\n                self._commands.append(cmd)\n        curr_peer = self._current_config.get('peer_address')\n        req_peer = self._required_config.get('peer_address')\n        if req_peer != curr_peer:\n            add_peer = True\n        if add_peer and req_peer:\n            cmd = self._generate_vlan_if_command(req_vlan, enable=True,\n                                                 peer_address=req_peer)\n            self._commands.append(cmd)\n\n    def generate_commands(self):\n        state = self._required_config['state']\n        if state == 'absent':\n            self._generate_no_ipl_commands()\n        else:\n            self._generate_ipl_commands()\n\n\ndef main():\n    \"\"\" main entry point for module execution\n    \"\"\"\n    OnyxMlagIplModule.main()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "onyx_mlag_ipl.py", "id": "0e27600f89ff69fcee28a90e42eaaa3f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/onyx/onyx_mlag_ipl.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}