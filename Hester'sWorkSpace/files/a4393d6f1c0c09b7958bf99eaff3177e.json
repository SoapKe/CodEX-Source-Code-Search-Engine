{"author": "nicolargo", "code": " -*- coding: utf-8 -*-\n\n This file is part of Glances.\n\n Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n\n Glances is free software; you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Glances is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Manage the Glances server.\"\"\"\n\nimport json\nimport socket\nimport sys\nfrom base64 import b64decode\n\nfrom glances import __version__\nfrom glances.compat import SimpleXMLRPCRequestHandler, SimpleXMLRPCServer, Server\nfrom glances.autodiscover import GlancesAutoDiscoverClient\nfrom glances.logger import logger\nfrom glances.stats_server import GlancesStatsServer\nfrom glances.timer import Timer\n\n\nclass GlancesXMLRPCHandler(SimpleXMLRPCRequestHandler, object):\n\n    \"\"\"Main XML-RPC handler.\"\"\"\n\n    rpc_paths = ('/RPC2', )\n\n    def end_headers(self):\n         Hack to add a specific header\n         Thk to: https://gist.github.com/rca/4063325\n        self.send_my_headers()\n        super(GlancesXMLRPCHandler, self).end_headers()\n\n    def send_my_headers(self):\n         Specific header is here (solved the issue 227)\n        self.send_header(\"Access-Control-Allow-Origin\", \"*\")\n\n    def authenticate(self, headers):\n         auth = headers.get('Authorization')\n        try:\n            (basic, _, encoded) = headers.get('Authorization').partition(' ')\n        except Exception:\n             Client did not ask for authentidaction\n             If server need it then exit\n            return not self.server.isAuth\n        else:\n             Client authentication\n            (basic, _, encoded) = headers.get('Authorization').partition(' ')\n            assert basic == 'Basic', 'Only basic authentication supported'\n             Encoded portion of the header is a string\n             Need to convert to bytestring\n            encoded_byte_string = encoded.encode()\n             Decode base64 byte string to a decoded byte string\n            decoded_bytes = b64decode(encoded_byte_string)\n             Convert from byte string to a regular string\n            decoded_string = decoded_bytes.decode()\n             Get the username and password from the string\n            (username, _, password) = decoded_string.partition(':')\n             Check that username and password match internal global dictionary\n            return self.check_user(username, password)\n\n    def check_user(self, username, password):\n         Check username and password in the dictionary\n        if username in self.server.user_dict:\n            from glances.password import GlancesPassword\n            pwd = GlancesPassword()\n            return pwd.check_password(self.server.user_dict[username], password)\n        else:\n            return False\n\n    def parse_request(self):\n        if SimpleXMLRPCRequestHandler.parse_request(self):\n             Next we authenticate\n            if self.authenticate(self.headers):\n                return True\n            else:\n                 if authentication fails, tell the client\n                self.send_error(401, 'Authentication failed')\n        return False\n\n    def log_message(self, log_format, *args):\n         No message displayed on the server side\n        pass\n\n\nclass GlancesXMLRPCServer(SimpleXMLRPCServer, object):\n\n    \"\"\"Init a SimpleXMLRPCServer instance (IPv6-ready).\"\"\"\n\n    finished = False\n\n    def __init__(self, bind_address, bind_port=61209,\n                 requestHandler=GlancesXMLRPCHandler):\n\n        self.bind_address = bind_address\n        self.bind_port = bind_port\n        try:\n            self.address_family = socket.getaddrinfo(bind_address, bind_port)[0][0]\n        except socket.error as e:\n            logger.error(\"Couldn't open socket: {}\".format(e))\n            sys.exit(1)\n\n        super(GlancesXMLRPCServer, self).__init__((bind_address, bind_port), requestHandler)\n\n    def end(self):\n        \"\"\"Stop the server\"\"\"\n        self.server_close()\n        self.finished = True\n\n    def serve_forever(self):\n        \"\"\"Main loop\"\"\"\n        while not self.finished:\n            self.handle_request()\n\n\nclass GlancesInstance(object):\n\n    \"\"\"All the methods of this class are published as XML-RPC methods.\"\"\"\n\n    def __init__(self,\n                 config=None,\n                 args=None):\n         Init stats\n        self.stats = GlancesStatsServer(config=config, args=args)\n\n         Initial update\n        self.stats.update()\n\n         cached_time is the minimum time interval between stats updates\n         i.e. XML/RPC calls will not retrieve updated info until the time\n         since last update is passed (will retrieve old cached info instead)\n        self.timer = Timer(0)\n        self.cached_time = args.cached_time\n\n    def __update__(self):\n         Never update more than 1 time per cached_time\n        if self.timer.finished():\n            self.stats.update()\n            self.timer = Timer(self.cached_time)\n\n    def init(self):\n         Return the Glances version\n        return __version__\n\n    def getAll(self):\n         Update and return all the stats\n        self.__update__()\n        return json.dumps(self.stats.getAll())\n\n    def getAllPlugins(self):\n         Return the plugins list\n        return json.dumps(self.stats.getAllPlugins())\n\n    def getAllLimits(self):\n         Return all the plugins limits\n        return json.dumps(self.stats.getAllLimitsAsDict())\n\n    def getAllViews(self):\n         Return all the plugins views\n        return json.dumps(self.stats.getAllViewsAsDict())\n\n    def __getattr__(self, item):\n        \"\"\"Overwrite the getattr method in case of attribute is not found.\n\n        The goal is to dynamically generate the API get'Stats'() methods.\n        \"\"\"\n        header = 'get'\n         Check if the attribute starts with 'get'\n        if item.startswith(header):\n            try:\n                 Update the stat\n                self.__update__()\n                 Return the attribute\n                return getattr(self.stats, item)\n            except Exception:\n                 The method is not found for the plugin\n                raise AttributeError(item)\n        else:\n             Default behavior\n            raise AttributeError(item)\n\n\nclass GlancesServer(object):\n\n    \"\"\"This class creates and manages the TCP server.\"\"\"\n\n    def __init__(self,\n                 requestHandler=GlancesXMLRPCHandler,\n                 config=None,\n                 args=None):\n         Args\n        self.args = args\n\n         Init the XML RPC server\n        try:\n            self.server = GlancesXMLRPCServer(args.bind_address, args.port, requestHandler)\n        except Exception as e:\n            logger.critical(\"Cannot start Glances server: {}\".format(e))\n            sys.exit(2)\n        else:\n            print('Glances XML-RPC server is running on {}:{}'.format(args.bind_address, args.port))\n\n         The users dict\n         username / password couple\n         By default, no auth is needed\n        self.server.user_dict = {}\n        self.server.isAuth = False\n\n         Register functions\n        self.server.register_introspection_functions()\n        self.server.register_instance(GlancesInstance(config, args))\n\n        if not self.args.disable_autodiscover:\n             Note: The Zeroconf service name will be based on the hostname\n             Correct issue: Zeroconf problem with zeroconf service name 889\n            self.autodiscover_client = GlancesAutoDiscoverClient(socket.gethostname().split('.', 1)[0], args)\n        else:\n            logger.info(\"Glances autodiscover announce is disabled\")\n\n    def add_user(self, username, password):\n        \"\"\"Add an user to the dictionary.\"\"\"\n        self.server.user_dict[username] = password\n        self.server.isAuth = True\n\n    def serve_forever(self):\n        \"\"\"Call the main loop.\"\"\"\n         Set the server login/password (if -P/--password tag)\n        if self.args.password != \"\":\n            self.add_user(self.args.username, self.args.password)\n         Serve forever\n        self.server.serve_forever()\n\n    def end(self):\n        \"\"\"End of the Glances server session.\"\"\"\n        if not self.args.disable_autodiscover:\n            self.autodiscover_client.close()\n        self.server.end()\n", "comments": "   manage glances server      import json import socket import sys base64 import b64decode  glances import   version   glances compat import simplexmlrpcrequesthandler  simplexmlrpcserver  server glances autodiscover import glancesautodiscoverclient glances logger import logger glances stats server import glancesstatsserver glances timer import timer   class glancesxmlrpchandler(simplexmlrpcrequesthandler  object)          main xml rpc handler          rpc paths   (  rpc2   )      def end headers(self)            hack add specific header           thk  https   gist github com rca 4063325         self send headers()         super(glancesxmlrpchandler  self) end headers()      def send headers(self)            specific header (solved issue  227)         self send header( access control allow origin      )      def authenticate(self  headers)            auth   headers get( authorization )         try              (basic     encoded)   headers get( authorization ) partition(   )         except exception                client ask authentidaction               if server need exit             return self server isauth         else                client authentication             (basic     encoded)   headers get( authorization ) partition(   )             assert basic     basic    only basic authentication supported                encoded portion header string               need convert bytestring             encoded byte string   encoded encode()               decode base64 byte string decoded byte string             decoded bytes   b64decode(encoded byte string)               convert byte string regular string             decoded string   decoded bytes decode()               get username password string             (username     password)   decoded string partition(   )               check username password match internal global dictionary             return self check user(username  password)      def check user(self  username  password)            check username password dictionary         username self server user dict              glances password import glancespassword             pwd   glancespassword()             return pwd check password(self server user dict username   password)         else              return false      def parse request(self)          simplexmlrpcrequesthandler parse request(self)                next authenticate             self authenticate(self headers)                  return true             else                    authentication fails  tell client                 self send error(401   authentication failed )         return false      def log message(self  log format   args)            no message displayed server side         pass   class glancesxmlrpcserver(simplexmlrpcserver  object)          init simplexmlrpcserver instance (ipv6 ready)          finished   false      def   init  (self  bind address  bind port 61209                   requesthandler glancesxmlrpchandler)           self bind address   bind address         self bind port   bind port         try              self address family   socket getaddrinfo(bind address  bind port) 0  0          except socket error e              logger error( couldn open socket      format(e))             sys exit(1)          super(glancesxmlrpcserver  self)   init  ((bind address  bind port)  requesthandler)      def end(self)             stop server            self server close()         self finished   true      def serve forever(self)             main loop            self finished              self handle request()   class glancesinstance(object)          all methods class published xml rpc methods          def   init  (self                   config none                   args none)            init stats         self stats   glancesstatsserver(config config  args args)            initial update         self stats update()            cached time minimum time interval stats updates           e  xml rpc calls retrieve updated info time           since last update passed (will retrieve old cached info instead)         self timer   timer(0)         self cached time   args cached time      def   update  (self)            never update 1 time per cached time         self timer finished()              self stats update()             self timer   timer(self cached time)      def init(self)            return glances version         return   version        def getall(self)            update return stats         self   update  ()         return json dumps(self stats getall())      def getallplugins(self)            return plugins list         return json dumps(self stats getallplugins())      def getalllimits(self)            return plugins limits         return json dumps(self stats getalllimitsasdict())      def getallviews(self)            return plugins views         return json dumps(self stats getallviewsasdict())      def   getattr  (self  item)             overwrite getattr method case attribute found           the goal dynamically generate api get stats () methods                      header    get            check attribute starts  get          item startswith(header)              try                    update stat                 self   update  ()                   return attribute                 return getattr(self stats  item)             except exception                    the method found plugin                 raise attributeerror(item)         else                default behavior             raise attributeerror(item)   class glancesserver(object)          this class creates manages tcp server          def   init  (self                   requesthandler glancesxmlrpchandler                   config none                   args none)            args         self args   args            init xml rpc server         try              self server   glancesxmlrpcserver(args bind address  args port  requesthandler)         except exception e              logger critical( cannot start glances server      format(e))             sys exit(2)         else              print( glances xml rpc server running        format(args bind address  args port))            the users dict           username   password couple           by default  auth needed         self server user dict              self server isauth   false            register functions         self server register introspection functions()         self server register instance(glancesinstance(config  args))          self args disable autodiscover                note  the zeroconf service name based hostname               correct issue  zeroconf problem zeroconf service name  889             self autodiscover client   glancesautodiscoverclient(socket gethostname() split(     1) 0   args)         else              logger info( glances autodiscover announce disabled )      def add user(self  username  password)             add user dictionary             self server user dict username    password         self server isauth   true      def serve forever(self)             call main loop               set server login password (if  p   password tag)         self args password                    self add user(self args username  self args password)           serve forever         self server serve forever()      def end(self)             end glances server session            coding  utf 8           this file part glances        copyright (c) 2017 nicolargo  nicolas nicolargo com        glances free software  redistribute modify    terms gnu lesser general public license published    free software foundation  either version 3 license     (at option) later version        glances distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose  see    gnu lesser general public license details        you received copy gnu lesser general public license    along program  if  see  http   www gnu org licenses       hack add specific header    thk  https   gist github com rca 4063325    specific header (solved issue  227)    auth   headers get( authorization )    client ask authentidaction    if server need exit    client authentication    encoded portion header string    need convert bytestring    decode base64 byte string decoded byte string    convert byte string regular string    get username password string    check username password match internal global dictionary    check username password dictionary    next authenticate    authentication fails  tell client    no message displayed server side    init stats    initial update    cached time minimum time interval stats updates    e  xml rpc calls retrieve updated info time    since last update passed (will retrieve old cached info instead)    never update 1 time per cached time    return glances version    update return stats    return plugins list    return plugins limits    return plugins views    check attribute starts  get     update stat    return attribute    the method found plugin    default behavior    args    init xml rpc server    the users dict    username   password couple    by default  auth needed    register functions    note  the zeroconf service name based hostname    correct issue  zeroconf problem zeroconf service name  889    set server login password (if  p   password tag)    serve forever ", "content": "# -*- coding: utf-8 -*-\n#\n# This file is part of Glances.\n#\n# Copyright (C) 2017 Nicolargo <nicolas@nicolargo.com>\n#\n# Glances is free software; you can redistribute it and/or modify\n# it under the terms of the GNU Lesser General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Glances is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU Lesser General Public License for more details.\n#\n# You should have received a copy of the GNU Lesser General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n\"\"\"Manage the Glances server.\"\"\"\n\nimport json\nimport socket\nimport sys\nfrom base64 import b64decode\n\nfrom glances import __version__\nfrom glances.compat import SimpleXMLRPCRequestHandler, SimpleXMLRPCServer, Server\nfrom glances.autodiscover import GlancesAutoDiscoverClient\nfrom glances.logger import logger\nfrom glances.stats_server import GlancesStatsServer\nfrom glances.timer import Timer\n\n\nclass GlancesXMLRPCHandler(SimpleXMLRPCRequestHandler, object):\n\n    \"\"\"Main XML-RPC handler.\"\"\"\n\n    rpc_paths = ('/RPC2', )\n\n    def end_headers(self):\n        # Hack to add a specific header\n        # Thk to: https://gist.github.com/rca/4063325\n        self.send_my_headers()\n        super(GlancesXMLRPCHandler, self).end_headers()\n\n    def send_my_headers(self):\n        # Specific header is here (solved the issue #227)\n        self.send_header(\"Access-Control-Allow-Origin\", \"*\")\n\n    def authenticate(self, headers):\n        # auth = headers.get('Authorization')\n        try:\n            (basic, _, encoded) = headers.get('Authorization').partition(' ')\n        except Exception:\n            # Client did not ask for authentidaction\n            # If server need it then exit\n            return not self.server.isAuth\n        else:\n            # Client authentication\n            (basic, _, encoded) = headers.get('Authorization').partition(' ')\n            assert basic == 'Basic', 'Only basic authentication supported'\n            # Encoded portion of the header is a string\n            # Need to convert to bytestring\n            encoded_byte_string = encoded.encode()\n            # Decode base64 byte string to a decoded byte string\n            decoded_bytes = b64decode(encoded_byte_string)\n            # Convert from byte string to a regular string\n            decoded_string = decoded_bytes.decode()\n            # Get the username and password from the string\n            (username, _, password) = decoded_string.partition(':')\n            # Check that username and password match internal global dictionary\n            return self.check_user(username, password)\n\n    def check_user(self, username, password):\n        # Check username and password in the dictionary\n        if username in self.server.user_dict:\n            from glances.password import GlancesPassword\n            pwd = GlancesPassword()\n            return pwd.check_password(self.server.user_dict[username], password)\n        else:\n            return False\n\n    def parse_request(self):\n        if SimpleXMLRPCRequestHandler.parse_request(self):\n            # Next we authenticate\n            if self.authenticate(self.headers):\n                return True\n            else:\n                # if authentication fails, tell the client\n                self.send_error(401, 'Authentication failed')\n        return False\n\n    def log_message(self, log_format, *args):\n        # No message displayed on the server side\n        pass\n\n\nclass GlancesXMLRPCServer(SimpleXMLRPCServer, object):\n\n    \"\"\"Init a SimpleXMLRPCServer instance (IPv6-ready).\"\"\"\n\n    finished = False\n\n    def __init__(self, bind_address, bind_port=61209,\n                 requestHandler=GlancesXMLRPCHandler):\n\n        self.bind_address = bind_address\n        self.bind_port = bind_port\n        try:\n            self.address_family = socket.getaddrinfo(bind_address, bind_port)[0][0]\n        except socket.error as e:\n            logger.error(\"Couldn't open socket: {}\".format(e))\n            sys.exit(1)\n\n        super(GlancesXMLRPCServer, self).__init__((bind_address, bind_port), requestHandler)\n\n    def end(self):\n        \"\"\"Stop the server\"\"\"\n        self.server_close()\n        self.finished = True\n\n    def serve_forever(self):\n        \"\"\"Main loop\"\"\"\n        while not self.finished:\n            self.handle_request()\n\n\nclass GlancesInstance(object):\n\n    \"\"\"All the methods of this class are published as XML-RPC methods.\"\"\"\n\n    def __init__(self,\n                 config=None,\n                 args=None):\n        # Init stats\n        self.stats = GlancesStatsServer(config=config, args=args)\n\n        # Initial update\n        self.stats.update()\n\n        # cached_time is the minimum time interval between stats updates\n        # i.e. XML/RPC calls will not retrieve updated info until the time\n        # since last update is passed (will retrieve old cached info instead)\n        self.timer = Timer(0)\n        self.cached_time = args.cached_time\n\n    def __update__(self):\n        # Never update more than 1 time per cached_time\n        if self.timer.finished():\n            self.stats.update()\n            self.timer = Timer(self.cached_time)\n\n    def init(self):\n        # Return the Glances version\n        return __version__\n\n    def getAll(self):\n        # Update and return all the stats\n        self.__update__()\n        return json.dumps(self.stats.getAll())\n\n    def getAllPlugins(self):\n        # Return the plugins list\n        return json.dumps(self.stats.getAllPlugins())\n\n    def getAllLimits(self):\n        # Return all the plugins limits\n        return json.dumps(self.stats.getAllLimitsAsDict())\n\n    def getAllViews(self):\n        # Return all the plugins views\n        return json.dumps(self.stats.getAllViewsAsDict())\n\n    def __getattr__(self, item):\n        \"\"\"Overwrite the getattr method in case of attribute is not found.\n\n        The goal is to dynamically generate the API get'Stats'() methods.\n        \"\"\"\n        header = 'get'\n        # Check if the attribute starts with 'get'\n        if item.startswith(header):\n            try:\n                # Update the stat\n                self.__update__()\n                # Return the attribute\n                return getattr(self.stats, item)\n            except Exception:\n                # The method is not found for the plugin\n                raise AttributeError(item)\n        else:\n            # Default behavior\n            raise AttributeError(item)\n\n\nclass GlancesServer(object):\n\n    \"\"\"This class creates and manages the TCP server.\"\"\"\n\n    def __init__(self,\n                 requestHandler=GlancesXMLRPCHandler,\n                 config=None,\n                 args=None):\n        # Args\n        self.args = args\n\n        # Init the XML RPC server\n        try:\n            self.server = GlancesXMLRPCServer(args.bind_address, args.port, requestHandler)\n        except Exception as e:\n            logger.critical(\"Cannot start Glances server: {}\".format(e))\n            sys.exit(2)\n        else:\n            print('Glances XML-RPC server is running on {}:{}'.format(args.bind_address, args.port))\n\n        # The users dict\n        # username / password couple\n        # By default, no auth is needed\n        self.server.user_dict = {}\n        self.server.isAuth = False\n\n        # Register functions\n        self.server.register_introspection_functions()\n        self.server.register_instance(GlancesInstance(config, args))\n\n        if not self.args.disable_autodiscover:\n            # Note: The Zeroconf service name will be based on the hostname\n            # Correct issue: Zeroconf problem with zeroconf service name #889\n            self.autodiscover_client = GlancesAutoDiscoverClient(socket.gethostname().split('.', 1)[0], args)\n        else:\n            logger.info(\"Glances autodiscover announce is disabled\")\n\n    def add_user(self, username, password):\n        \"\"\"Add an user to the dictionary.\"\"\"\n        self.server.user_dict[username] = password\n        self.server.isAuth = True\n\n    def serve_forever(self):\n        \"\"\"Call the main loop.\"\"\"\n        # Set the server login/password (if -P/--password tag)\n        if self.args.password != \"\":\n            self.add_user(self.args.username, self.args.password)\n        # Serve forever\n        self.server.serve_forever()\n\n    def end(self):\n        \"\"\"End of the Glances server session.\"\"\"\n        if not self.args.disable_autodiscover:\n            self.autodiscover_client.close()\n        self.server.end()\n", "description": "Glances an Eye on your system. A top/htop alternative.", "file_name": "server.py", "id": "a4393d6f1c0c09b7958bf99eaff3177e", "language": "Python", "project_name": "glances", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nicolargo-glances/nicolargo-glances-c286362/glances/server.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:40:41Z", "url": "https://github.com/nicolargo/glances", "wiki": true}