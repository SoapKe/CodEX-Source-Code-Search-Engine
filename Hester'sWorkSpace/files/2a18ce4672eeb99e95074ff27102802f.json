{"author": "sympy", "code": "from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n    EmptySet, Union)\nfrom sympy import (Symbol, Eq, Lt, S, Abs, sin, pi, Lambda, Interval,\n    And, Mod)\nfrom sympy.utilities.pytest import raises\n\n\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nL = Symbol('lambda')\n\n\ndef test_CondSet():\n    sin_sols_principal = ConditionSet(x, Eq(sin(x), 0),\n                                      Interval(0, 2*pi, False, True))\n    assert pi in sin_sols_principal\n    assert pi/2 not in sin_sols_principal\n    assert 3*pi not in sin_sols_principal\n    assert 5 in ConditionSet(x, x**2 > 4, S.Reals)\n    assert 1 not in ConditionSet(x, x**2 > 4, S.Reals)\n\n    assert isinstance(ConditionSet(x, x < 1, {x, y}).base_set, FiniteSet)\n    raises(TypeError, lambda: ConditionSet(x, x + 1, {x, y}))\n    raises(TypeError, lambda: ConditionSet(x, x, 1))\n\n    I = S.Integers\n    C = ConditionSet\n    assert C(x, x < 1, C(x, x < 2, I)\n        ) == C(x, (x < 1) & (x < 2), I)\n    assert C(y, y < 1, C(x, y < 2, I)\n        ) == C(x, (x < 1) & (y < 2), I)\n    assert C(y, y < 1, C(x, x < 2, I)\n        ) == C(y, (y < 1) & (y < 2), I)\n    assert C(y, y < 1, C(x, y < x, I)\n        ) == C(x, (x < 1) & (y < x), I)\n    assert C(y, x < 1, C(x, y < x, I)\n        ) == C(L, (x < 1) & (y < L), I)\n    c = C(y, x < 1, C(x, L < y, I))\n    assert c == C(c.sym, (L < y) & (x < 1), I)\n    assert c.sym not in (x, y, L)\n    c = C(y, x < 1, C(x, y < x, FiniteSet(L)))\n    assert c == C(\n        c.sym, c.condition.xreplace({L: c.sym}), FiniteSet(L))\n    assert c.sym not in (x, y, L)\n\n\ndef test_CondSet_intersect():\n    input_conditionset = ConditionSet(x, x**2 > 4, Interval(1, 4, False, False))\n    other_domain = Interval(0, 3, False, False)\n    output_conditionset = ConditionSet(x, x**2 > 4, Interval(1, 3, False, False))\n    assert Intersection(input_conditionset, other_domain) == output_conditionset\n\n\ndef test_issue_9849():\n    assert ConditionSet(x, Eq(x, x), S.Naturals) == S.Naturals\n    assert ConditionSet(x, Eq(Abs(sin(x)), -1), S.Naturals) == S.EmptySet\n\n\ndef test_simplified_FiniteSet_in_CondSet():\n    assert ConditionSet(x, And(x < 1, x > -3), FiniteSet(0, 1, 2)) == FiniteSet(0)\n    assert ConditionSet(x, x < 0, FiniteSet(0, 1, 2)) == EmptySet()\n    assert ConditionSet(x, And(x < -3), EmptySet()) == EmptySet()\n    y = Symbol('y')\n    assert (ConditionSet(x, And(x > 0), FiniteSet(-1, 0, 1, y)) ==\n        Union(FiniteSet(1), ConditionSet(x, And(x > 0), FiniteSet(y))))\n    assert (ConditionSet(x, Eq(Mod(x, 3), 1), FiniteSet(1, 4, 2, y)) ==\n        Union(FiniteSet(1, 4), ConditionSet(x, Eq(Mod(x, 3), 1), FiniteSet(y))))\n\n\ndef test_free_symbols():\n    assert ConditionSet(x, Eq(y, 0), FiniteSet(z)\n        ).free_symbols == {y, z}\n    assert ConditionSet(x, Eq(x, 0), FiniteSet(z)\n        ).free_symbols == {z}\n    assert ConditionSet(x, Eq(x, 0), FiniteSet(x, z)\n        ).free_symbols == {x, z}\n\n\ndef test_subs_CondSet():\n    s = FiniteSet(z, y)\n    c = ConditionSet(x, x < 2, s)\n    \n    \n    assert c.subs(x, 1) == c\n    assert c.subs(x, y) == c\n    assert c.subs(x, w) == ConditionSet(w, w < 2, s)\n    assert ConditionSet(x, x < y, s\n        ).subs(y, w) == ConditionSet(x, x < w, s.subs(y, w))\n\n    \n    c = ConditionSet((x, y), {x + 1, x + y}, S.Reals)\n    assert c.subs(x, z) == c\n\n\ndef test_dummy_eq():\n    C = ConditionSet\n    I = S.Integers\n    c = C(x, x < 1, I)\n    assert c.dummy_eq(C(y, y < 1, I))\n    assert c.dummy_eq(1) == False\n    assert c.dummy_eq(C(x, x < 1, S.Reals)) == False\n    raises(ValueError, lambda: c.dummy_eq(C(x, x < 1, S.Reals), z))\n\n    \n    c1 = ConditionSet((x, y), {x + 1, x + y}, S.Reals)\n    c2 = ConditionSet((x, y), {x + 1, x + y}, S.Reals)\n    c3 = ConditionSet((x, y), {x + 1, x + y}, S.Complexes)\n    assert c1.dummy_eq(c2)\n    assert c1.dummy_eq(c3) is False\n    assert c.dummy_eq(c1) is False\n    assert c1.dummy_eq(c) is False\n", "comments": "  replace sym symbol    free symbols    eventually removed    eventually removed ", "content": "from sympy.sets import (ConditionSet, Intersection, FiniteSet,\n    EmptySet, Union)\nfrom sympy import (Symbol, Eq, Lt, S, Abs, sin, pi, Lambda, Interval,\n    And, Mod)\nfrom sympy.utilities.pytest import raises\n\n\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nL = Symbol('lambda')\n\n\ndef test_CondSet():\n    sin_sols_principal = ConditionSet(x, Eq(sin(x), 0),\n                                      Interval(0, 2*pi, False, True))\n    assert pi in sin_sols_principal\n    assert pi/2 not in sin_sols_principal\n    assert 3*pi not in sin_sols_principal\n    assert 5 in ConditionSet(x, x**2 > 4, S.Reals)\n    assert 1 not in ConditionSet(x, x**2 > 4, S.Reals)\n\n    assert isinstance(ConditionSet(x, x < 1, {x, y}).base_set, FiniteSet)\n    raises(TypeError, lambda: ConditionSet(x, x + 1, {x, y}))\n    raises(TypeError, lambda: ConditionSet(x, x, 1))\n\n    I = S.Integers\n    C = ConditionSet\n    assert C(x, x < 1, C(x, x < 2, I)\n        ) == C(x, (x < 1) & (x < 2), I)\n    assert C(y, y < 1, C(x, y < 2, I)\n        ) == C(x, (x < 1) & (y < 2), I)\n    assert C(y, y < 1, C(x, x < 2, I)\n        ) == C(y, (y < 1) & (y < 2), I)\n    assert C(y, y < 1, C(x, y < x, I)\n        ) == C(x, (x < 1) & (y < x), I)\n    assert C(y, x < 1, C(x, y < x, I)\n        ) == C(L, (x < 1) & (y < L), I)\n    c = C(y, x < 1, C(x, L < y, I))\n    assert c == C(c.sym, (L < y) & (x < 1), I)\n    assert c.sym not in (x, y, L)\n    c = C(y, x < 1, C(x, y < x, FiniteSet(L)))\n    assert c == C(\n        c.sym, c.condition.xreplace({L: c.sym}), FiniteSet(L))\n    assert c.sym not in (x, y, L)\n\n\ndef test_CondSet_intersect():\n    input_conditionset = ConditionSet(x, x**2 > 4, Interval(1, 4, False, False))\n    other_domain = Interval(0, 3, False, False)\n    output_conditionset = ConditionSet(x, x**2 > 4, Interval(1, 3, False, False))\n    assert Intersection(input_conditionset, other_domain) == output_conditionset\n\n\ndef test_issue_9849():\n    assert ConditionSet(x, Eq(x, x), S.Naturals) == S.Naturals\n    assert ConditionSet(x, Eq(Abs(sin(x)), -1), S.Naturals) == S.EmptySet\n\n\ndef test_simplified_FiniteSet_in_CondSet():\n    assert ConditionSet(x, And(x < 1, x > -3), FiniteSet(0, 1, 2)) == FiniteSet(0)\n    assert ConditionSet(x, x < 0, FiniteSet(0, 1, 2)) == EmptySet()\n    assert ConditionSet(x, And(x < -3), EmptySet()) == EmptySet()\n    y = Symbol('y')\n    assert (ConditionSet(x, And(x > 0), FiniteSet(-1, 0, 1, y)) ==\n        Union(FiniteSet(1), ConditionSet(x, And(x > 0), FiniteSet(y))))\n    assert (ConditionSet(x, Eq(Mod(x, 3), 1), FiniteSet(1, 4, 2, y)) ==\n        Union(FiniteSet(1, 4), ConditionSet(x, Eq(Mod(x, 3), 1), FiniteSet(y))))\n\n\ndef test_free_symbols():\n    assert ConditionSet(x, Eq(y, 0), FiniteSet(z)\n        ).free_symbols == {y, z}\n    assert ConditionSet(x, Eq(x, 0), FiniteSet(z)\n        ).free_symbols == {z}\n    assert ConditionSet(x, Eq(x, 0), FiniteSet(x, z)\n        ).free_symbols == {x, z}\n\n\ndef test_subs_CondSet():\n    s = FiniteSet(z, y)\n    c = ConditionSet(x, x < 2, s)\n    # you can only replace sym with a symbol that is not in\n    # the free symbols\n    assert c.subs(x, 1) == c\n    assert c.subs(x, y) == c\n    assert c.subs(x, w) == ConditionSet(w, w < 2, s)\n    assert ConditionSet(x, x < y, s\n        ).subs(y, w) == ConditionSet(x, x < w, s.subs(y, w))\n\n    # to eventually be removed\n    c = ConditionSet((x, y), {x + 1, x + y}, S.Reals)\n    assert c.subs(x, z) == c\n\n\ndef test_dummy_eq():\n    C = ConditionSet\n    I = S.Integers\n    c = C(x, x < 1, I)\n    assert c.dummy_eq(C(y, y < 1, I))\n    assert c.dummy_eq(1) == False\n    assert c.dummy_eq(C(x, x < 1, S.Reals)) == False\n    raises(ValueError, lambda: c.dummy_eq(C(x, x < 1, S.Reals), z))\n\n    # to eventually be removed\n    c1 = ConditionSet((x, y), {x + 1, x + y}, S.Reals)\n    c2 = ConditionSet((x, y), {x + 1, x + y}, S.Reals)\n    c3 = ConditionSet((x, y), {x + 1, x + y}, S.Complexes)\n    assert c1.dummy_eq(c2)\n    assert c1.dummy_eq(c3) is False\n    assert c.dummy_eq(c1) is False\n    assert c1.dummy_eq(c) is False\n", "description": "A computer algebra system written in pure Python", "file_name": "test_conditionset.py", "id": "2a18ce4672eeb99e95074ff27102802f", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/sets/tests/test_conditionset.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}