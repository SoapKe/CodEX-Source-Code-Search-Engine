{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass TrailerAddictIE(InfoExtractor):\n    _WORKING = False\n    _VALID_URL = r'(?:https?://)?(?:www\\.)?traileraddict\\.com/(?:trailer|clip)/(?P<movie>.+?)/(?P<trailer_name>.+)'\n    _TEST = {\n        'url': 'http://www.traileraddict.com/trailer/prince-avalanche/trailer',\n        'md5': '41365557f3c8c397d091da510e73ceb4',\n        'info_dict': {\n            'id': '76184',\n            'ext': 'mp4',\n            'title': 'Prince Avalanche Trailer',\n            'description': 'Trailer for Prince Avalanche.\\n\\nTwo highway road workers spend the summer of 1988 away from their city lives. The isolated landscape becomes a place of misadventure as the men find themselves at odds with each other and the women they left behind.',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        name = mobj.group('movie') + '/' + mobj.group('trailer_name')\n        webpage = self._download_webpage(url, name)\n\n        title = self._search_regex(r'<title>(.+?)</title>',\n                                   webpage, 'video title').replace(' - Trailer Addict', '')\n        view_count_str = self._search_regex(\n            r'<span class=\"views_n\">([0-9,.]+)</span>',\n            webpage, 'view count', fatal=False)\n        view_count = (\n            None if view_count_str is None\n            else int(view_count_str.replace(',', '')))\n        video_id = self._search_regex(\n            r'<param\\s+name=\"movie\"\\s+value=\"/emb/([0-9]+)\"\\s*/>',\n            webpage, 'video id')\n\n        \n        if re.search(r'function (no)?watchplus()', webpage):\n            fvar = 'fvarhd'\n        else:\n            fvar = 'fvar'\n\n        info_url = 'http://www.traileraddict.com/%s.php?tid=%s' % (fvar, str(video_id))\n        info_webpage = self._download_webpage(info_url, video_id, 'Downloading the info webpage')\n\n        final_url = self._search_regex(r'&fileurl=(.+)',\n                                       info_webpage, 'Download url').replace('%3F', '?')\n        thumbnail_url = self._search_regex(r'&image=(.+?)&',\n                                           info_webpage, 'thumbnail url')\n\n        description = self._html_search_regex(\n            r'(?s)<div class=\"synopsis\">.*?<div class=\"movie_label_info\"[^>]*>(.*?)</div>',\n            webpage, 'description', fatal=False)\n\n        return {\n            'id': video_id,\n            'url': final_url,\n            'title': title,\n            'thumbnail': thumbnail_url,\n            'description': description,\n            'view_count': view_count,\n        }\n", "comments": "# Presence of (no)watchplus function indicates HD quality is available\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass TrailerAddictIE(InfoExtractor):\n    _WORKING = False\n    _VALID_URL = r'(?:https?://)?(?:www\\.)?traileraddict\\.com/(?:trailer|clip)/(?P<movie>.+?)/(?P<trailer_name>.+)'\n    _TEST = {\n        'url': 'http://www.traileraddict.com/trailer/prince-avalanche/trailer',\n        'md5': '41365557f3c8c397d091da510e73ceb4',\n        'info_dict': {\n            'id': '76184',\n            'ext': 'mp4',\n            'title': 'Prince Avalanche Trailer',\n            'description': 'Trailer for Prince Avalanche.\\n\\nTwo highway road workers spend the summer of 1988 away from their city lives. The isolated landscape becomes a place of misadventure as the men find themselves at odds with each other and the women they left behind.',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        name = mobj.group('movie') + '/' + mobj.group('trailer_name')\n        webpage = self._download_webpage(url, name)\n\n        title = self._search_regex(r'<title>(.+?)</title>',\n                                   webpage, 'video title').replace(' - Trailer Addict', '')\n        view_count_str = self._search_regex(\n            r'<span class=\"views_n\">([0-9,.]+)</span>',\n            webpage, 'view count', fatal=False)\n        view_count = (\n            None if view_count_str is None\n            else int(view_count_str.replace(',', '')))\n        video_id = self._search_regex(\n            r'<param\\s+name=\"movie\"\\s+value=\"/emb/([0-9]+)\"\\s*/>',\n            webpage, 'video id')\n\n        # Presence of (no)watchplus function indicates HD quality is available\n        if re.search(r'function (no)?watchplus()', webpage):\n            fvar = 'fvarhd'\n        else:\n            fvar = 'fvar'\n\n        info_url = 'http://www.traileraddict.com/%s.php?tid=%s' % (fvar, str(video_id))\n        info_webpage = self._download_webpage(info_url, video_id, 'Downloading the info webpage')\n\n        final_url = self._search_regex(r'&fileurl=(.+)',\n                                       info_webpage, 'Download url').replace('%3F', '?')\n        thumbnail_url = self._search_regex(r'&image=(.+?)&',\n                                           info_webpage, 'thumbnail url')\n\n        description = self._html_search_regex(\n            r'(?s)<div class=\"synopsis\">.*?<div class=\"movie_label_info\"[^>]*>(.*?)</div>',\n            webpage, 'description', fatal=False)\n\n        return {\n            'id': video_id,\n            'url': final_url,\n            'title': title,\n            'thumbnail': thumbnail_url,\n            'description': description,\n            'view_count': view_count,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "traileraddict.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/traileraddict.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}