{"author": "rushter", "code": "from sklearn.metrics import roc_auc_score\n\nfrom mla.pca import PCA\nfrom mla.ensemble import RandomForestClassifier\n\ntry:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\n\n\nX, y = make_classification(n_samples=1000, n_features=100, n_informative=75,\n                           random_state=1111, n_classes=2, class_sep=2.5, )\n\n\ndef test_PCA():\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                        random_state=1111)\n    p = PCA(100, solver='eigen')\n\n    \n    p.fit(X_train)\n    X_train_reduced = p.transform(X_train)\n    X_test_reduced = p.transform(X_test)\n\n    model = RandomForestClassifier(n_estimators=10, max_depth=4)\n    model.fit(X_train_reduced, y_train)\n    predictions = model.predict(X_test_reduced)[:, 1]\n    print(roc_auc_score(y_test, predictions))\n    assert roc_auc_score(y_test, predictions) >= 0.70\n", "comments": "  generate random binary classification problem     fit pca training data  entire dataset ", "content": "from sklearn.metrics import roc_auc_score\n\nfrom mla.pca import PCA\nfrom mla.ensemble import RandomForestClassifier\n\ntry:\n    from sklearn.model_selection import train_test_split\nexcept ImportError:\n    from sklearn.cross_validation import train_test_split\nfrom sklearn.datasets import make_classification\n\n# Generate a random binary classification problem.\nX, y = make_classification(n_samples=1000, n_features=100, n_informative=75,\n                           random_state=1111, n_classes=2, class_sep=2.5, )\n\n\ndef test_PCA():\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,\n                                                        random_state=1111)\n    p = PCA(100, solver='eigen')\n\n    # fit PCA with training data, not the entire dataset\n    p.fit(X_train)\n    X_train_reduced = p.transform(X_train)\n    X_test_reduced = p.transform(X_test)\n\n    model = RandomForestClassifier(n_estimators=10, max_depth=4)\n    model.fit(X_train_reduced, y_train)\n    predictions = model.predict(X_test_reduced)[:, 1]\n    print(roc_auc_score(y_test, predictions))\n    assert roc_auc_score(y_test, predictions) >= 0.70\n", "description": "Minimal and clean examples of machine learning algorithms", "file_name": "test_reduction.py", "id": "2266878aa3722973bfa85465f6ac88d0", "language": "Python", "project_name": "MLAlgorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rushter-MLAlgorithms/rushter-MLAlgorithms-d398777/mla/tests/test_reduction.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:25:48Z", "url": "https://github.com/rushter/MLAlgorithms", "wiki": false}