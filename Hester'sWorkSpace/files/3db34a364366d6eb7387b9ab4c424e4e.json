{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestPowerSet(object):\n\n    def test_power_set(self):\n        input_set = ''\n        expected = ['']\n        self.run_test(input_set, expected)\n        input_set = 'a'\n        expected = ['a', '']\n        self.run_test(input_set, expected)\n        input_set = 'ab'\n        expected = ['a', 'ab', 'b', '']\n        self.run_test(input_set, expected)\n        input_set = 'abc'\n        expected = ['a', 'ab', 'abc', 'ac',\n                    'b', 'bc', 'c', '']\n        self.run_test(input_set, expected)\n        input_set = 'aabc'\n        expected = ['a', 'aa', 'aab', 'aabc', \n                    'aac', 'ab', 'abc', 'ac', \n                    'b', 'bc', 'c', '']\n        self.run_test(input_set, expected)\n        print('Success: test_power_set')\n\n    def run_test(self, input_set, expected):\n        combinatoric = Combinatoric()\n        result = combinatoric.find_power_set(input_set)\n        assert_equal(result, expected)\n\n\ndef main():\n    test = TestPowerSet()\n    test.test_power_set()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestPowerSet(object):\n\n    def test_power_set(self):\n        input_set = ''\n        expected = ['']\n        self.run_test(input_set, expected)\n        input_set = 'a'\n        expected = ['a', '']\n        self.run_test(input_set, expected)\n        input_set = 'ab'\n        expected = ['a', 'ab', 'b', '']\n        self.run_test(input_set, expected)\n        input_set = 'abc'\n        expected = ['a', 'ab', 'abc', 'ac',\n                    'b', 'bc', 'c', '']\n        self.run_test(input_set, expected)\n        input_set = 'aabc'\n        expected = ['a', 'aa', 'aab', 'aabc', \n                    'aac', 'ab', 'abc', 'ac', \n                    'b', 'bc', 'c', '']\n        self.run_test(input_set, expected)\n        print('Success: test_power_set')\n\n    def run_test(self, input_set, expected):\n        combinatoric = Combinatoric()\n        result = combinatoric.find_power_set(input_set)\n        assert_equal(result, expected)\n\n\ndef main():\n    test = TestPowerSet()\n    test.test_power_set()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_power_set.py", "id": "3db34a364366d6eb7387b9ab4c424e4e", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/recursion_dynamic/power_set/test_power_set.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}