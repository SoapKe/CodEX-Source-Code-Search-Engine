{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.tests import common\n\n\nclass TestMrpByProduct(common.TransactionCase):\n\n    def setUp(self):\n        super(TestMrpByProduct, self).setUp()\n        self.MrpBom = self.env['mrp.bom']\n        self.warehouse = self.env.ref('stock.warehouse0')\n        route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n        route_mto = self.warehouse.mto_pull_id.route_id.id\n        self.uom_unit_id = self.ref('product.product_uom_unit')\n        def create_product(name, route_ids=[]):\n            return self.env['product.product'].create({\n                'name': name,\n                'type': 'product',\n                'route_ids': route_ids})\n\n        \n        \n        self.product_a = create_product('Product A', route_ids=[(6, 0, [route_manufacture, route_mto])])\n        self.product_b = create_product('Product B', route_ids=[(6, 0, [route_manufacture, route_mto])])\n        self.product_c_id = create_product('Product C', route_ids=[]).id\n\n    def test_00_mrp_byproduct(self):\n        \n        \n        \n        bom_product_b = self.MrpBom.create({\n            'product_tmpl_id': self.product_b.product_tmpl_id.id,\n            'product_qty': 1.0,\n            'type': 'normal',\n            'product_uom_id': self.uom_unit_id,\n            'bom_line_ids': [(0, 0, {'product_id': self.product_c_id, 'product_uom_id': self.uom_unit_id, 'product_qty': 2})]\n            })\n\n        \n        bom_product_a = self.MrpBom.create({\n            'product_tmpl_id': self.product_a.product_tmpl_id.id,\n            'product_qty': 1.0,\n            'type': 'normal',\n            'product_uom_id': self.uom_unit_id,\n            'bom_line_ids': [(0, 0, {'product_id': self.product_c_id, 'product_uom_id': self.uom_unit_id, 'product_qty': 2})],\n            'sub_products': [(0, 0, {'product_id': self.product_b.id, 'product_uom_id': self.uom_unit_id, 'product_qty': 1})]\n            })\n\n        \n        -----------\n\n        mnf_product_a = self.env['mrp.production'].create({\n                        'product_id': self.product_a.id,\n                        'product_qty': 2.0,\n                        'product_uom_id': self.uom_unit_id,\n                        'bom_id': bom_product_a.id,\n                    })\n\n        \n        context = {\"active_model\": \"mrp.production\", \"active_ids\": [mnf_product_a.id], \"active_id\": mnf_product_a.id}\n\n        \n        self.assertEqual(mnf_product_a.state, 'confirmed', 'Production order should be in state confirmed')\n\n        \n        \n        moves = mnf_product_a.move_raw_ids | mnf_product_a.move_finished_ids\n        self.assertTrue(moves, 'No moves are created !')\n\n        \n        \n        product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 2.00})\n        \n        self.assertEqual(len(mnf_product_a.move_raw_ids), 1, \"Wrong consume move on production order.\")\n        product_consume.do_produce()\n        consume_move_c = mnf_product_a.move_raw_ids\n        by_product_move = mnf_product_a.move_finished_ids.filtered(lambda x: x.product_id.id == self.product_b.id)\n        \n        self.assertEqual(consume_move_c.product_uom_qty, 4, \"Wrong consumed quantity of product c.\")\n        self.assertEqual(by_product_move.product_uom_qty, 2, \"Wrong produced quantity of sub product.\")\n\n        mnf_product_a.post_inventory()\n\n        \n        self.assertFalse(any(move.state != 'done' for move in moves), 'Moves are not done!')\n", "comments": "    test product production order            coding  utf 8        part odoo  see license file full copyright licensing details     create product a  b  c                                   create bom product b                                create bom product a set byproduct product b    create production order product a                                             i compute data production order    i confirm production order     now i check stock moves byproduct i created bill material     this move created automatically i confirmed production order     i consume produce production products     i create record selecting mode quantity products produce     i finish production order     check sub production produced quantity       i see stock moves external hard disk including headset usb done  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests import common\n\n\nclass TestMrpByProduct(common.TransactionCase):\n\n    def setUp(self):\n        super(TestMrpByProduct, self).setUp()\n        self.MrpBom = self.env['mrp.bom']\n        self.warehouse = self.env.ref('stock.warehouse0')\n        route_manufacture = self.warehouse.manufacture_pull_id.route_id.id\n        route_mto = self.warehouse.mto_pull_id.route_id.id\n        self.uom_unit_id = self.ref('product.product_uom_unit')\n        def create_product(name, route_ids=[]):\n            return self.env['product.product'].create({\n                'name': name,\n                'type': 'product',\n                'route_ids': route_ids})\n\n        # Create product A, B, C.\n        # --------------------------\n        self.product_a = create_product('Product A', route_ids=[(6, 0, [route_manufacture, route_mto])])\n        self.product_b = create_product('Product B', route_ids=[(6, 0, [route_manufacture, route_mto])])\n        self.product_c_id = create_product('Product C', route_ids=[]).id\n\n    def test_00_mrp_byproduct(self):\n        \"\"\" Test by product with production order.\"\"\"\n        # Create BOM for product B\n        # ------------------------\n        bom_product_b = self.MrpBom.create({\n            'product_tmpl_id': self.product_b.product_tmpl_id.id,\n            'product_qty': 1.0,\n            'type': 'normal',\n            'product_uom_id': self.uom_unit_id,\n            'bom_line_ids': [(0, 0, {'product_id': self.product_c_id, 'product_uom_id': self.uom_unit_id, 'product_qty': 2})]\n            })\n\n        # Create BOM for product A and set byproduct product B\n        bom_product_a = self.MrpBom.create({\n            'product_tmpl_id': self.product_a.product_tmpl_id.id,\n            'product_qty': 1.0,\n            'type': 'normal',\n            'product_uom_id': self.uom_unit_id,\n            'bom_line_ids': [(0, 0, {'product_id': self.product_c_id, 'product_uom_id': self.uom_unit_id, 'product_qty': 2})],\n            'sub_products': [(0, 0, {'product_id': self.product_b.id, 'product_uom_id': self.uom_unit_id, 'product_qty': 1})]\n            })\n\n        # Create production order for product A\n        # -------------------------------------\n\n        mnf_product_a = self.env['mrp.production'].create({\n                        'product_id': self.product_a.id,\n                        'product_qty': 2.0,\n                        'product_uom_id': self.uom_unit_id,\n                        'bom_id': bom_product_a.id,\n                    })\n\n        # I compute the data of production order\n        context = {\"active_model\": \"mrp.production\", \"active_ids\": [mnf_product_a.id], \"active_id\": mnf_product_a.id}\n\n        # I confirm the production order.\n        self.assertEqual(mnf_product_a.state, 'confirmed', 'Production order should be in state confirmed')\n\n        # Now I check the stock moves for the byproduct I created in the bill of material.\n        # This move is created automatically when I confirmed the production order.\n        moves = mnf_product_a.move_raw_ids | mnf_product_a.move_finished_ids\n        self.assertTrue(moves, 'No moves are created !')\n\n        # I consume and produce the production of products.\n        # I create record for selecting mode and quantity of products to produce.\n        product_consume = self.env['mrp.product.produce'].with_context(context).create({'product_qty': 2.00})\n        # I finish the production order.\n        self.assertEqual(len(mnf_product_a.move_raw_ids), 1, \"Wrong consume move on production order.\")\n        product_consume.do_produce()\n        consume_move_c = mnf_product_a.move_raw_ids\n        by_product_move = mnf_product_a.move_finished_ids.filtered(lambda x: x.product_id.id == self.product_b.id)\n        # Check sub production produced quantity...\n        self.assertEqual(consume_move_c.product_uom_qty, 4, \"Wrong consumed quantity of product c.\")\n        self.assertEqual(by_product_move.product_uom_qty, 2, \"Wrong produced quantity of sub product.\")\n\n        mnf_product_a.post_inventory()\n\n        # I see that stock moves of External Hard Disk including Headset USB are done now.\n        self.assertFalse(any(move.state != 'done' for move in moves), 'Moves are not done!')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_mrp_byproduct.py", "id": "ee4b616ceb9f3d743f8827ca89b82729", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp_byproduct/tests/test_mrp_byproduct.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}