{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_kwargs,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n)\n\n\nclass ViuBaseIE(InfoExtractor):\n    def _real_initialize(self):\n        viu_auth_res = self._request_webpage(\n            'https://www.viu.com/api/apps/v2/authenticate', None,\n            'Requesting Viu auth', query={\n                'acct': 'test',\n                'appid': 'viu_desktop',\n                'fmt': 'json',\n                'iid': 'guest',\n                'languageid': 'default',\n                'platform': 'desktop',\n                'userid': 'guest',\n                'useridtype': 'guest',\n                'ver': '1.0'\n            }, headers=self.geo_verification_headers())\n        self._auth_token = viu_auth_res.info()['X-VIU-AUTH']\n\n    def _call_api(self, path, *args, **kwargs):\n        headers = self.geo_verification_headers()\n        headers.update({\n            'X-VIU-AUTH': self._auth_token\n        })\n        headers.update(kwargs.get('headers', {}))\n        kwargs['headers'] = headers\n        response = self._download_json(\n            'https://www.viu.com/api/' + path, *args,\n            **compat_kwargs(kwargs))['response']\n        if response.get('status') != 'success':\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, response['message']), expected=True)\n        return response\n\n\nclass ViuIE(ViuBaseIE):\n    _VALID_URL = r'(?:viu:|https?://[^/]+\\.viu\\.com/[a-z]{2}/media/)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://www.viu.com/en/media/1116705532?containerId=playlist-22168059',\n        'info_dict': {\n            'id': '1116705532',\n            'ext': 'mp4',\n            'title': 'Citizen Khan - Ep 1',\n            'description': 'md5:d7ea1604f49e5ba79c212c551ce2110e',\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        },\n        'skip': 'Geo-restricted to India',\n    }, {\n        'url': 'https://www.viu.com/en/media/1130599965',\n        'info_dict': {\n            'id': '1130599965',\n            'ext': 'mp4',\n            'title': 'Jealousy Incarnate - Episode 1',\n            'description': 'md5:d3d82375cab969415d2720b6894361e9',\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        },\n        'skip': 'Geo-restricted to Indonesia',\n    }, {\n        'url': 'https://india.viu.com/en/media/1126286865',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_data = self._call_api(\n            'clip/load', video_id, 'Downloading video data', query={\n                'appid': 'viu_desktop',\n                'fmt': 'json',\n                'id': video_id\n            })['item'][0]\n\n        title = video_data['title']\n\n        m3u8_url = None\n        url_path = video_data.get('urlpathd') or video_data.get('urlpath')\n        tdirforwhole = video_data.get('tdirforwhole')\n        \n        \n        \n        hls_file = video_data.get('jwhlsfile')\n        if url_path and tdirforwhole and hls_file:\n            m3u8_url = '%s/%s/%s' % (url_path, tdirforwhole, hls_file)\n        else:\n            \n            \n            \n            m3u8_url = video_data['href']\n        formats = self._extract_m3u8_formats(m3u8_url, video_id, 'mp4')\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for key, value in video_data.items():\n            mobj = re.match(r'^subtitle_(?P<lang>[^_]+)_(?P<ext>(vtt|srt))', key)\n            if not mobj:\n                continue\n            subtitles.setdefault(mobj.group('lang'), []).append({\n                'url': value,\n                'ext': mobj.group('ext')\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'series': video_data.get('moviealbumshowname'),\n            'episode': title,\n            'episode_number': int_or_none(video_data.get('episodeno')),\n            'duration': int_or_none(video_data.get('duration')),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViuPlaylistIE(ViuBaseIE):\n    IE_NAME = 'viu:playlist'\n    _VALID_URL = r'https?://www\\.viu\\.com/[^/]+/listing/playlist-(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://www.viu.com/en/listing/playlist-22461380',\n        'info_dict': {\n            'id': '22461380',\n            'title': 'The Good Wife',\n        },\n        'playlist_count': 16,\n        'skip': 'Geo-restricted to Indonesia',\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n        playlist_data = self._call_api(\n            'container/load', playlist_id,\n            'Downloading playlist info', query={\n                'appid': 'viu_desktop',\n                'fmt': 'json',\n                'id': 'playlist-' + playlist_id\n            })['container']\n\n        entries = []\n        for item in playlist_data.get('item', []):\n            item_id = item.get('id')\n            if not item_id:\n                continue\n            item_id = compat_str(item_id)\n            entries.append(self.url_result(\n                'viu:' + item_id, 'Viu', item_id))\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_data.get('title'))\n\n\nclass ViuOTTIE(InfoExtractor):\n    IE_NAME = 'viu:ott'\n    _VALID_URL = r'https?://(?:www\\.)?viu\\.com/ott/(?P<country_code>[a-z]{2})/[a-z]{2}-[a-z]{2}/vod/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.viu.com/ott/sg/en-us/vod/3421/The%20Prime%20Minister%20and%20I',\n        'info_dict': {\n            'id': '3421',\n            'ext': 'mp4',\n            'title': 'A New Beginning',\n            'description': 'md5:1e7486a619b6399b25ba6a41c0fe5b2c',\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        },\n        'skip': 'Geo-restricted to Singapore',\n    }, {\n        'url': 'http://www.viu.com/ott/hk/zh-hk/vod/7123/%E5%A4%A7%E4%BA%BA%E5%A5%B3%E5%AD%90',\n        'info_dict': {\n            'id': '7123',\n            'ext': 'mp4',\n            'title': '\u9019\u5c31\u662f\u6211\u7684\u751f\u6d3b\u4e4b\u9053',\n            'description': 'md5:4eb0d8b08cf04fcdc6bbbeb16043434f',\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        },\n        'skip': 'Geo-restricted to Hong Kong',\n    }]\n\n    def _real_extract(self, url):\n        country_code, video_id = re.match(self._VALID_URL, url).groups()\n\n        product_data = self._download_json(\n            'http://www.viu.com/ott/%s/index.php' % country_code, video_id,\n            'Downloading video info', query={\n                'r': 'vod/ajax-detail',\n                'platform_flag_label': 'web',\n                'product_id': video_id,\n            })['data']\n\n        video_data = product_data.get('current_product')\n        if not video_data:\n            raise ExtractorError('This video is not available in your region.', expected=True)\n\n        stream_data = self._download_json(\n            'https://d1k2us671qcoau.cloudfront.net/distribute_web_%s.php' % country_code,\n            video_id, 'Downloading stream info', query={\n                'ccs_product_id': video_data['ccs_product_id'],\n            })['data']['stream']\n\n        stream_sizes = stream_data.get('size', {})\n        formats = []\n        for vid_format, stream_url in stream_data.get('url', {}).items():\n            height = int_or_none(self._search_regex(\n                r's(\\d+)p', vid_format, 'height', default=None))\n            formats.append({\n                'format_id': vid_format,\n                'url': stream_url,\n                'height': height,\n                'ext': 'mp4',\n                'filesize': int_or_none(stream_sizes.get(vid_format))\n            })\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for sub in video_data.get('subtitle', []):\n            sub_url = sub.get('url')\n            if not sub_url:\n                continue\n            subtitles.setdefault(sub.get('name'), []).append({\n                'url': sub_url,\n                'ext': 'srt',\n            })\n\n        title = video_data['synopsis'].strip()\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'series': product_data.get('series', {}).get('name'),\n            'episode': title,\n            'episode_number': int_or_none(video_data.get('number')),\n            'duration': int_or_none(stream_data.get('duration')),\n            'thumbnail': video_data.get('cover_image_url'),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "# coding: utf-8\n# #EXT-X-BYTERANGE is not supported by native hls downloader\n# and ffmpeg (#10955)\n# hls_file = video_data.get('hlsfile')\n# m3u8_url = re.sub(\n#     r'(/hlsc_)[a-z]+(\\d+\\.m3u8)',\n#     r'\\1whe\\2', video_data['href'])\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_kwargs,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n)\n\n\nclass ViuBaseIE(InfoExtractor):\n    def _real_initialize(self):\n        viu_auth_res = self._request_webpage(\n            'https://www.viu.com/api/apps/v2/authenticate', None,\n            'Requesting Viu auth', query={\n                'acct': 'test',\n                'appid': 'viu_desktop',\n                'fmt': 'json',\n                'iid': 'guest',\n                'languageid': 'default',\n                'platform': 'desktop',\n                'userid': 'guest',\n                'useridtype': 'guest',\n                'ver': '1.0'\n            }, headers=self.geo_verification_headers())\n        self._auth_token = viu_auth_res.info()['X-VIU-AUTH']\n\n    def _call_api(self, path, *args, **kwargs):\n        headers = self.geo_verification_headers()\n        headers.update({\n            'X-VIU-AUTH': self._auth_token\n        })\n        headers.update(kwargs.get('headers', {}))\n        kwargs['headers'] = headers\n        response = self._download_json(\n            'https://www.viu.com/api/' + path, *args,\n            **compat_kwargs(kwargs))['response']\n        if response.get('status') != 'success':\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, response['message']), expected=True)\n        return response\n\n\nclass ViuIE(ViuBaseIE):\n    _VALID_URL = r'(?:viu:|https?://[^/]+\\.viu\\.com/[a-z]{2}/media/)(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'https://www.viu.com/en/media/1116705532?containerId=playlist-22168059',\n        'info_dict': {\n            'id': '1116705532',\n            'ext': 'mp4',\n            'title': 'Citizen Khan - Ep 1',\n            'description': 'md5:d7ea1604f49e5ba79c212c551ce2110e',\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        },\n        'skip': 'Geo-restricted to India',\n    }, {\n        'url': 'https://www.viu.com/en/media/1130599965',\n        'info_dict': {\n            'id': '1130599965',\n            'ext': 'mp4',\n            'title': 'Jealousy Incarnate - Episode 1',\n            'description': 'md5:d3d82375cab969415d2720b6894361e9',\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        },\n        'skip': 'Geo-restricted to Indonesia',\n    }, {\n        'url': 'https://india.viu.com/en/media/1126286865',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_data = self._call_api(\n            'clip/load', video_id, 'Downloading video data', query={\n                'appid': 'viu_desktop',\n                'fmt': 'json',\n                'id': video_id\n            })['item'][0]\n\n        title = video_data['title']\n\n        m3u8_url = None\n        url_path = video_data.get('urlpathd') or video_data.get('urlpath')\n        tdirforwhole = video_data.get('tdirforwhole')\n        # #EXT-X-BYTERANGE is not supported by native hls downloader\n        # and ffmpeg (#10955)\n        # hls_file = video_data.get('hlsfile')\n        hls_file = video_data.get('jwhlsfile')\n        if url_path and tdirforwhole and hls_file:\n            m3u8_url = '%s/%s/%s' % (url_path, tdirforwhole, hls_file)\n        else:\n            # m3u8_url = re.sub(\n            #     r'(/hlsc_)[a-z]+(\\d+\\.m3u8)',\n            #     r'\\1whe\\2', video_data['href'])\n            m3u8_url = video_data['href']\n        formats = self._extract_m3u8_formats(m3u8_url, video_id, 'mp4')\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for key, value in video_data.items():\n            mobj = re.match(r'^subtitle_(?P<lang>[^_]+)_(?P<ext>(vtt|srt))', key)\n            if not mobj:\n                continue\n            subtitles.setdefault(mobj.group('lang'), []).append({\n                'url': value,\n                'ext': mobj.group('ext')\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'series': video_data.get('moviealbumshowname'),\n            'episode': title,\n            'episode_number': int_or_none(video_data.get('episodeno')),\n            'duration': int_or_none(video_data.get('duration')),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass ViuPlaylistIE(ViuBaseIE):\n    IE_NAME = 'viu:playlist'\n    _VALID_URL = r'https?://www\\.viu\\.com/[^/]+/listing/playlist-(?P<id>\\d+)'\n    _TEST = {\n        'url': 'https://www.viu.com/en/listing/playlist-22461380',\n        'info_dict': {\n            'id': '22461380',\n            'title': 'The Good Wife',\n        },\n        'playlist_count': 16,\n        'skip': 'Geo-restricted to Indonesia',\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n        playlist_data = self._call_api(\n            'container/load', playlist_id,\n            'Downloading playlist info', query={\n                'appid': 'viu_desktop',\n                'fmt': 'json',\n                'id': 'playlist-' + playlist_id\n            })['container']\n\n        entries = []\n        for item in playlist_data.get('item', []):\n            item_id = item.get('id')\n            if not item_id:\n                continue\n            item_id = compat_str(item_id)\n            entries.append(self.url_result(\n                'viu:' + item_id, 'Viu', item_id))\n\n        return self.playlist_result(\n            entries, playlist_id, playlist_data.get('title'))\n\n\nclass ViuOTTIE(InfoExtractor):\n    IE_NAME = 'viu:ott'\n    _VALID_URL = r'https?://(?:www\\.)?viu\\.com/ott/(?P<country_code>[a-z]{2})/[a-z]{2}-[a-z]{2}/vod/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.viu.com/ott/sg/en-us/vod/3421/The%20Prime%20Minister%20and%20I',\n        'info_dict': {\n            'id': '3421',\n            'ext': 'mp4',\n            'title': 'A New Beginning',\n            'description': 'md5:1e7486a619b6399b25ba6a41c0fe5b2c',\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        },\n        'skip': 'Geo-restricted to Singapore',\n    }, {\n        'url': 'http://www.viu.com/ott/hk/zh-hk/vod/7123/%E5%A4%A7%E4%BA%BA%E5%A5%B3%E5%AD%90',\n        'info_dict': {\n            'id': '7123',\n            'ext': 'mp4',\n            'title': '\u9019\u5c31\u662f\u6211\u7684\u751f\u6d3b\u4e4b\u9053',\n            'description': 'md5:4eb0d8b08cf04fcdc6bbbeb16043434f',\n        },\n        'params': {\n            'skip_download': 'm3u8 download',\n        },\n        'skip': 'Geo-restricted to Hong Kong',\n    }]\n\n    def _real_extract(self, url):\n        country_code, video_id = re.match(self._VALID_URL, url).groups()\n\n        product_data = self._download_json(\n            'http://www.viu.com/ott/%s/index.php' % country_code, video_id,\n            'Downloading video info', query={\n                'r': 'vod/ajax-detail',\n                'platform_flag_label': 'web',\n                'product_id': video_id,\n            })['data']\n\n        video_data = product_data.get('current_product')\n        if not video_data:\n            raise ExtractorError('This video is not available in your region.', expected=True)\n\n        stream_data = self._download_json(\n            'https://d1k2us671qcoau.cloudfront.net/distribute_web_%s.php' % country_code,\n            video_id, 'Downloading stream info', query={\n                'ccs_product_id': video_data['ccs_product_id'],\n            })['data']['stream']\n\n        stream_sizes = stream_data.get('size', {})\n        formats = []\n        for vid_format, stream_url in stream_data.get('url', {}).items():\n            height = int_or_none(self._search_regex(\n                r's(\\d+)p', vid_format, 'height', default=None))\n            formats.append({\n                'format_id': vid_format,\n                'url': stream_url,\n                'height': height,\n                'ext': 'mp4',\n                'filesize': int_or_none(stream_sizes.get(vid_format))\n            })\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for sub in video_data.get('subtitle', []):\n            sub_url = sub.get('url')\n            if not sub_url:\n                continue\n            subtitles.setdefault(sub.get('name'), []).append({\n                'url': sub_url,\n                'ext': 'srt',\n            })\n\n        title = video_data['synopsis'].strip()\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'series': product_data.get('series', {}).get('name'),\n            'episode': title,\n            'episode_number': int_or_none(video_data.get('number')),\n            'duration': int_or_none(stream_data.get('duration')),\n            'thumbnail': video_data.get('cover_image_url'),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "viu.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/viu.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}