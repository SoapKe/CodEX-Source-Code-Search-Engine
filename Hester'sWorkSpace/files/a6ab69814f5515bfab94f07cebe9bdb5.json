{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: ipa_group\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA group\ndescription:\n- Add, modify and delete group within IPA server\noptions:\n  cn:\n    description:\n    - Canonical name.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: ['name']\n  external:\n    description:\n    - Allow adding external non-IPA members from trusted domains.\n  gidnumber:\n    description:\n    - GID (use this option to set it manually).\n  group:\n    description:\n    - List of group names assigned to this group.\n    - If an empty list is passed all groups will be removed from this group.\n    - If option is omitted assigned groups will not be checked or changed.\n    - Groups that are already assigned but not passed will be removed.\n  nonposix:\n    description:\n    - Create as a non-POSIX group.\n  user:\n    description:\n    - List of user names assigned to this group.\n    - If an empty list is passed all users will be removed from this group.\n    - If option is omitted assigned users will not be checked or changed.\n    - Users that are already assigned but not passed will be removed.\n  state:\n    description:\n    - State to ensure\n    default: \"present\"\n    choices: [\"present\", \"absent\"]\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n\n- ipa_group:\n    name: oinstall\n    gidnumber: 54321\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n\n- ipa_group:\n    name: ops\n    group:\n    - sysops\n    - appops\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n\n- ipa_group:\n    name: sysops\n    user:\n    - linus\n    - larry\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n\n- ipa_group:\n    name: sysops\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\ngroup:\n  description: Group as returned by IPA API\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass GroupIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(GroupIPAClient, self).__init__(module, host, port, protocol)\n\n    def group_find(self, name):\n        return self._post_json(method='group_find', name=None, item={'all': True, 'cn': name})\n\n    def group_add(self, name, item):\n        return self._post_json(method='group_add', name=name, item=item)\n\n    def group_mod(self, name, item):\n        return self._post_json(method='group_mod', name=name, item=item)\n\n    def group_del(self, name):\n        return self._post_json(method='group_del', name=name)\n\n    def group_add_member(self, name, item):\n        return self._post_json(method='group_add_member', name=name, item=item)\n\n    def group_add_member_group(self, name, item):\n        return self.group_add_member(name=name, item={'group': item})\n\n    def group_add_member_user(self, name, item):\n        return self.group_add_member(name=name, item={'user': item})\n\n    def group_remove_member(self, name, item):\n        return self._post_json(method='group_remove_member', name=name, item=item)\n\n    def group_remove_member_group(self, name, item):\n        return self.group_remove_member(name=name, item={'group': item})\n\n    def group_remove_member_user(self, name, item):\n        return self.group_remove_member(name=name, item={'user': item})\n\n\ndef get_group_dict(description=None, external=None, gid=None, nonposix=None):\n    group = {}\n    if description is not None:\n        group['description'] = description\n    if external is not None:\n        group['external'] = external\n    if gid is not None:\n        group['gidnumber'] = gid\n    if nonposix is not None:\n        group['nonposix'] = nonposix\n    return group\n\n\ndef get_group_diff(client, ipa_group, module_group):\n    data = []\n    \n    if 'nonposix' in module_group:\n        \n        if not module_group['nonposix'] and ipa_group.get('nonposix'):\n            module_group['posix'] = True\n        del module_group['nonposix']\n\n    if 'external' in module_group:\n        if module_group['external'] and 'ipaexternalgroup' in ipa_group.get('objectclass'):\n            del module_group['external']\n\n    return client.get_diff(ipa_data=ipa_group, module_data=module_group)\n\n\ndef ensure(module, client):\n    state = module.params['state']\n    name = module.params['cn']\n    group = module.params['group']\n    user = module.params['user']\n\n    module_group = get_group_dict(description=module.params['description'], external=module.params['external'],\n                                  gid=module.params['gidnumber'], nonposix=module.params['nonposix'])\n    ipa_group = client.group_find(name=name)\n\n    changed = False\n    if state == 'present':\n        if not ipa_group:\n            changed = True\n            if not module.check_mode:\n                ipa_group = client.group_add(name, item=module_group)\n        else:\n            diff = get_group_diff(client, ipa_group, module_group)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_group.get(key)\n                    client.group_mod(name=name, item=data)\n\n        if group is not None:\n            changed = client.modify_if_diff(name, ipa_group.get('member_group', []), group,\n                                            client.group_add_member_group,\n                                            client.group_remove_member_group) or changed\n\n        if user is not None:\n            changed = client.modify_if_diff(name, ipa_group.get('member_user', []), user,\n                                            client.group_add_member_user,\n                                            client.group_remove_member_user) or changed\n\n    else:\n        if ipa_group:\n            changed = True\n            if not module.check_mode:\n                client.group_del(name)\n\n    return changed, client.group_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         external=dict(type='bool'),\n                         gidnumber=dict(type='str', aliases=['gid']),\n                         group=dict(type='list'),\n                         nonposix=dict(type='bool'),\n                         state=dict(type='str', default='present', choices=['present', 'absent']),\n                         user=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True,\n                           )\n\n    client = GroupIPAClient(module=module,\n                            host=module.params['ipa_host'],\n                            port=module.params['ipa_port'],\n                            protocol=module.params['ipa_prot'])\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, group = ensure(module, client)\n        module.exit_json(changed=changed, group=group)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipa group author  thomas krahn ( nosmoht) short description  manage freeipa group description    add  modify delete group within ipa server options    cn      description        canonical name        can changed unique identifier      required  true     aliases    name     external      description        allow adding external non ipa members trusted domains    gidnumber      description        gid (use option set manually)    group      description        list group names assigned group        if empty list passed groups removed group        if option omitted assigned groups checked changed        groups already assigned passed removed    nonposix      description        create non posix group    user      description        list user names assigned group        if empty list passed users removed group        if option omitted assigned users checked changed        users already assigned passed removed    state      description        state ensure     default   present      choices    present    absent   extends documentation fragment  ipa documentation version added   2 3       examples         ensure group present   ipa group      name  oinstall     gidnumber  54321     state  present     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    ensure groups sysops appops assigned ops group   ipa group      name  ops     group        sysops       appops     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    ensure users linus larry assign group  user   ipa group      name  sysops     user        linus       larry     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    ensure group absent   ipa group      name  sysops     state  absent     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret      return       group    description  group returned ipa api   returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    ensure group present    ensure groups sysops appops assigned ops group    ensure users linus larry assign group  user    ensure group absent    with group add attribute nonposix passed  whereas group mod posix passed     only non posix groups changed posix ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: ipa_group\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA group\ndescription:\n- Add, modify and delete group within IPA server\noptions:\n  cn:\n    description:\n    - Canonical name.\n    - Can not be changed as it is the unique identifier.\n    required: true\n    aliases: ['name']\n  external:\n    description:\n    - Allow adding external non-IPA members from trusted domains.\n  gidnumber:\n    description:\n    - GID (use this option to set it manually).\n  group:\n    description:\n    - List of group names assigned to this group.\n    - If an empty list is passed all groups will be removed from this group.\n    - If option is omitted assigned groups will not be checked or changed.\n    - Groups that are already assigned but not passed will be removed.\n  nonposix:\n    description:\n    - Create as a non-POSIX group.\n  user:\n    description:\n    - List of user names assigned to this group.\n    - If an empty list is passed all users will be removed from this group.\n    - If option is omitted assigned users will not be checked or changed.\n    - Users that are already assigned but not passed will be removed.\n  state:\n    description:\n    - State to ensure\n    default: \"present\"\n    choices: [\"present\", \"absent\"]\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n# Ensure group is present\n- ipa_group:\n    name: oinstall\n    gidnumber: 54321\n    state: present\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n# Ensure that groups sysops and appops are assigned to ops but no other group\n- ipa_group:\n    name: ops\n    group:\n    - sysops\n    - appops\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n# Ensure that users linus and larry are assign to the group, but no other user\n- ipa_group:\n    name: sysops\n    user:\n    - linus\n    - larry\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n# Ensure group is absent\n- ipa_group:\n    name: sysops\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\ngroup:\n  description: Group as returned by IPA API\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass GroupIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(GroupIPAClient, self).__init__(module, host, port, protocol)\n\n    def group_find(self, name):\n        return self._post_json(method='group_find', name=None, item={'all': True, 'cn': name})\n\n    def group_add(self, name, item):\n        return self._post_json(method='group_add', name=name, item=item)\n\n    def group_mod(self, name, item):\n        return self._post_json(method='group_mod', name=name, item=item)\n\n    def group_del(self, name):\n        return self._post_json(method='group_del', name=name)\n\n    def group_add_member(self, name, item):\n        return self._post_json(method='group_add_member', name=name, item=item)\n\n    def group_add_member_group(self, name, item):\n        return self.group_add_member(name=name, item={'group': item})\n\n    def group_add_member_user(self, name, item):\n        return self.group_add_member(name=name, item={'user': item})\n\n    def group_remove_member(self, name, item):\n        return self._post_json(method='group_remove_member', name=name, item=item)\n\n    def group_remove_member_group(self, name, item):\n        return self.group_remove_member(name=name, item={'group': item})\n\n    def group_remove_member_user(self, name, item):\n        return self.group_remove_member(name=name, item={'user': item})\n\n\ndef get_group_dict(description=None, external=None, gid=None, nonposix=None):\n    group = {}\n    if description is not None:\n        group['description'] = description\n    if external is not None:\n        group['external'] = external\n    if gid is not None:\n        group['gidnumber'] = gid\n    if nonposix is not None:\n        group['nonposix'] = nonposix\n    return group\n\n\ndef get_group_diff(client, ipa_group, module_group):\n    data = []\n    # With group_add attribute nonposix is passed, whereas with group_mod only posix can be passed.\n    if 'nonposix' in module_group:\n        # Only non-posix groups can be changed to posix\n        if not module_group['nonposix'] and ipa_group.get('nonposix'):\n            module_group['posix'] = True\n        del module_group['nonposix']\n\n    if 'external' in module_group:\n        if module_group['external'] and 'ipaexternalgroup' in ipa_group.get('objectclass'):\n            del module_group['external']\n\n    return client.get_diff(ipa_data=ipa_group, module_data=module_group)\n\n\ndef ensure(module, client):\n    state = module.params['state']\n    name = module.params['cn']\n    group = module.params['group']\n    user = module.params['user']\n\n    module_group = get_group_dict(description=module.params['description'], external=module.params['external'],\n                                  gid=module.params['gidnumber'], nonposix=module.params['nonposix'])\n    ipa_group = client.group_find(name=name)\n\n    changed = False\n    if state == 'present':\n        if not ipa_group:\n            changed = True\n            if not module.check_mode:\n                ipa_group = client.group_add(name, item=module_group)\n        else:\n            diff = get_group_diff(client, ipa_group, module_group)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_group.get(key)\n                    client.group_mod(name=name, item=data)\n\n        if group is not None:\n            changed = client.modify_if_diff(name, ipa_group.get('member_group', []), group,\n                                            client.group_add_member_group,\n                                            client.group_remove_member_group) or changed\n\n        if user is not None:\n            changed = client.modify_if_diff(name, ipa_group.get('member_user', []), user,\n                                            client.group_add_member_user,\n                                            client.group_remove_member_user) or changed\n\n    else:\n        if ipa_group:\n            changed = True\n            if not module.check_mode:\n                client.group_del(name)\n\n    return changed, client.group_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         external=dict(type='bool'),\n                         gidnumber=dict(type='str', aliases=['gid']),\n                         group=dict(type='list'),\n                         nonposix=dict(type='bool'),\n                         state=dict(type='str', default='present', choices=['present', 'absent']),\n                         user=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True,\n                           )\n\n    client = GroupIPAClient(module=module,\n                            host=module.params['ipa_host'],\n                            port=module.params['ipa_port'],\n                            protocol=module.params['ipa_prot'])\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, group = ensure(module, client)\n        module.exit_json(changed=changed, group=group)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_group.py", "id": "a6ab69814f5515bfab94f07cebe9bdb5", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_group.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}