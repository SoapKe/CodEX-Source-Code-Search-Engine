{"author": "sympy", "code": "from sympy.core.compatibility import range\nfrom sympy import (FiniteSet, S, Symbol, sqrt,\n        symbols, simplify, Eq, cos, And, Tuple, Or, Dict, sympify, binomial,\n        cancel, KroneckerDelta, exp, I)\nfrom sympy.concrete.expr_with_limits import AddWithLimits\nfrom sympy.matrices import Matrix\nfrom sympy.stats import (DiscreteUniform, Die, Bernoulli, Coin, Binomial,\n    Hypergeometric, Rademacher, P, E, variance, covariance, skewness, sample,\n    density, where, FiniteRV, pspace, cdf,\n    correlation, moment, cmoment, smoment, characteristic_function)\nfrom sympy.stats.frv_types import DieDistribution\nfrom sympy.utilities.pytest import raises, slow\nfrom sympy.abc import p, x, i\n\noo = S.Infinity\n\n\ndef BayesTest(A, B):\n    assert P(A, B) == P(And(A, B)) / P(B)\n    assert P(A, B) == P(B, A) * P(A) / P(B)\n\n\ndef test_discreteuniform():\n    \n    a, b, c, t = symbols('a b c t')\n    X = DiscreteUniform('X', [a, b, c])\n\n    assert E(X) == (a + b + c)/3\n    assert simplify(variance(X)\n                    - ((a**2 + b**2 + c**2)/3 - (a/3 + b/3 + c/3)**2)) == 0\n    assert P(Eq(X, a)) == P(Eq(X, b)) == P(Eq(X, c)) == S('1/3')\n\n    Y = DiscreteUniform('Y', range(-5, 5))\n\n    \n    assert E(Y) == S('-1/2')\n    assert variance(Y) == S('33/4')\n\n    for x in range(-5, 5):\n        assert P(Eq(Y, x)) == S('1/10')\n        assert P(Y <= x) == S(x + 6)/10\n        assert P(Y >= x) == S(5 - x)/10\n\n    assert dict(density(Die('D', 6)).items()) == \\\n           dict(density(DiscreteUniform('U', range(1, 7))).items())\n\n    assert characteristic_function(X)(t) == exp(I*a*t)/3 + exp(I*b*t)/3 + exp(I*c*t)/3\n\n\ndef test_dice():\n    \n    X, Y, Z = Die('X', 6), Die('Y', 6), Die('Z', 6)\n    a, b, t = symbols('a b t')\n\n    assert E(X) == 3 + S.Half\n    assert variance(X) == S(35)/12\n    assert E(X + Y) == 7\n    assert E(X + X) == 7\n    assert E(a*X + b) == a*E(X) + b\n    assert variance(X + Y) == variance(X) + variance(Y) == cmoment(X + Y, 2)\n    assert variance(X + X) == 4 * variance(X) == cmoment(X + X, 2)\n    assert cmoment(X, 0) == 1\n    assert cmoment(4*X, 3) == 64*cmoment(X, 3)\n    assert covariance(X, Y) == S.Zero\n    assert covariance(X, X + Y) == variance(X)\n    assert density(Eq(cos(X*S.Pi), 1))[True] == S.Half\n    assert correlation(X, Y) == 0\n    assert correlation(X, Y) == correlation(Y, X)\n    assert smoment(X + Y, 3) == skewness(X + Y)\n    assert smoment(X, 0) == 1\n    assert P(X > 3) == S.Half\n    assert P(2*X > 6) == S.Half\n    assert P(X > Y) == S(5)/12\n    assert P(Eq(X, Y)) == P(Eq(X, 1))\n\n    assert E(X, X > 3) == 5 == moment(X, 1, 0, X > 3)\n    assert E(X, Y > 3) == E(X) == moment(X, 1, 0, Y > 3)\n    assert E(X + Y, Eq(X, Y)) == E(2*X)\n    assert moment(X, 0) == 1\n    assert moment(5*X, 2) == 25*moment(X, 2)\n\n    assert P(X > 3, X > 3) == S.One\n    assert P(X > Y, Eq(Y, 6)) == S.Zero\n    assert P(Eq(X + Y, 12)) == S.One/36\n    assert P(Eq(X + Y, 12), Eq(X, 6)) == S.One/6\n\n    assert density(X + Y) == density(Y + Z) != density(X + X)\n    d = density(2*X + Y**Z)\n    assert d[S(22)] == S.One/108 and d[S(4100)] == S.One/216 and S(3130) not in d\n\n    assert pspace(X).domain.as_boolean() == Or(\n        *[Eq(X.symbol, i) for i in [1, 2, 3, 4, 5, 6]])\n\n    assert where(X > 3).set == FiniteSet(4, 5, 6)\n\n    assert characteristic_function(X)(t) == exp(6*I*t)/6 + exp(5*I*t)/6 + exp(4*I*t)/6 + exp(3*I*t)/6 + exp(2*I*t)/6 + exp(I*t)/6\n\n\ndef test_given():\n    X = Die('X', 6)\n    assert density(X, X > 5) == {S(6): S(1)}\n    assert where(X > 2, X > 5).as_boolean() == Eq(X.symbol, 6)\n    assert sample(X, X > 5) == 6\n\n\ndef test_domains():\n    X, Y = Die('x', 6), Die('y', 6)\n    x, y = X.symbol, Y.symbol\n    \n    d = where(X > Y)\n    assert d.condition == (x > y)\n    d = where(And(X > Y, Y > 3))\n    assert d.as_boolean() == Or(And(Eq(x, 5), Eq(y, 4)), And(Eq(x, 6),\n        Eq(y, 5)), And(Eq(x, 6), Eq(y, 4)))\n    assert len(d.elements) == 3\n\n    assert len(pspace(X + Y).domain.elements) == 36\n\n    Z = Die('x', 4)\n\n    raises(ValueError, lambda: P(X > Z))  \n\n    assert pspace(X + Y).domain.set == FiniteSet(1, 2, 3, 4, 5, 6)**2\n\n    assert where(X > 3).set == FiniteSet(4, 5, 6)\n    assert X.pspace.domain.dict == FiniteSet(\n        *[Dict({X.symbol: i}) for i in range(1, 7)])\n\n    assert where(X > Y).dict == FiniteSet(*[Dict({X.symbol: i, Y.symbol: j})\n            for i in range(1, 7) for j in range(1, 7) if i > j])\n\n\ndef test_dice_bayes():\n    X, Y, Z = Die('X', 6), Die('Y', 6), Die('Z', 6)\n\n    BayesTest(X > 3, X + Y < 5)\n    BayesTest(Eq(X - Y, Z), Z > Y)\n    BayesTest(X > 3, X > 2)\n\n\ndef test_die_args():\n    raises(ValueError, lambda: Die('X', -1))  \n    raises(ValueError, lambda: Die('X', 0))\n    raises(ValueError, lambda: Die('X', 1.5))  \n\n    k = Symbol('k')\n    sym_die = Die('X', k)\n    raises(ValueError, lambda: density(sym_die).dict)\n\n\ndef test_bernoulli():\n    p, a, b, t = symbols('p a b t')\n    X = Bernoulli('B', p, a, b)\n\n    assert E(X) == a*p + b*(-p + 1)\n    assert density(X)[a] == p\n    assert density(X)[b] == 1 - p\n    assert characteristic_function(X)(t) == p * exp(I * a * t) + (-p + 1) * exp(I * b * t)\n\n    X = Bernoulli('B', p, 1, 0)\n\n    assert E(X) == p\n    assert simplify(variance(X)) == p*(1 - p)\n    assert E(a*X + b) == a*E(X) + b\n    assert simplify(variance(a*X + b)) == simplify(a**2 * variance(X))\n\ndef test_cdf():\n    D = Die('D', 6)\n    o = S.One\n\n    assert cdf(\n        D) == sympify({1: o/6, 2: o/3, 3: o/2, 4: 2*o/3, 5: 5*o/6, 6: o})\n\n\ndef test_coins():\n    C, D = Coin('C'), Coin('D')\n    H, T = symbols('H, T')\n    assert P(Eq(C, D)) == S.Half\n    assert density(Tuple(C, D)) == {(H, H): S.One/4, (H, T): S.One/4,\n            (T, H): S.One/4, (T, T): S.One/4}\n    assert dict(density(C).items()) == {H: S.Half, T: S.Half}\n\n    F = Coin('F', S.One/10)\n    assert P(Eq(F, H)) == S(1)/10\n\n    d = pspace(C).domain\n\n    assert d.as_boolean() == Or(Eq(C.symbol, H), Eq(C.symbol, T))\n\n    raises(ValueError, lambda: P(C > D))  \n\ndef test_binomial_verify_parameters():\n    raises(ValueError, lambda: Binomial('b', .2, .5))\n    raises(ValueError, lambda: Binomial('b', 3, 1.5))\n\ndef test_binomial_numeric():\n    nvals = range(5)\n    pvals = [0, S(1)/4, S.Half, S(3)/4, 1]\n\n    for n in nvals:\n        for p in pvals:\n            X = Binomial('X', n, p)\n            assert E(X) == n*p\n            assert variance(X) == n*p*(1 - p)\n            if n > 0 and 0 < p < 1:\n                assert skewness(X) == (1 - 2*p)/sqrt(n*p*(1 - p))\n            for k in range(n + 1):\n                assert P(Eq(X, k)) == binomial(n, k)*p**k*(1 - p)**(n - k)\n\n\ndef test_binomial_symbolic():\n    n = 2  \n    p = symbols('p', positive=True)\n    X = Binomial('X', n, p)\n    t = Symbol('t')\n\n    assert simplify(E(X)) == n*p == simplify(moment(X, 1))\n    assert simplify(variance(X)) == n*p*(1 - p) == simplify(cmoment(X, 2))\n    assert cancel((skewness(X) - (1 - 2*p)/sqrt(n*p*(1 - p)))) == 0\n    assert characteristic_function(X)(t) == p ** 2 * exp(2 * I * t) + 2 * p * (-p + 1) * exp(I * t) + (-p + 1) ** 2\n\n    \n    H, T = symbols('H T')\n    Y = Binomial('Y', n, p, succ=H, fail=T)\n    assert simplify(E(Y) - (n*(H*p + T*(1 - p)))) == 0\n\n\ndef test_hypergeometric_numeric():\n    for N in range(1, 5):\n        for m in range(0, N + 1):\n            for n in range(1, N + 1):\n                X = Hypergeometric('X', N, m, n)\n                N, m, n = map(sympify, (N, m, n))\n                assert sum(density(X).values()) == 1\n                assert E(X) == n * m / N\n                if N > 1:\n                    assert variance(X) == n*(m/N)*(N - m)/N*(N - n)/(N - 1)\n                \n                if N > 2 and 0 < m < N and n < N:\n                    assert skewness(X) == simplify((N - 2*m)*sqrt(N - 1)*(N - 2*n)\n                        / (sqrt(n*m*(N - m)*(N - n))*(N - 2)))\n\n\ndef test_rademacher():\n    X = Rademacher('X')\n    t = Symbol('t')\n\n    assert E(X) == 0\n    assert variance(X) == 1\n    assert density(X)[-1] == S.Half\n    assert density(X)[1] == S.Half\n    assert characteristic_function(X)(t) == exp(I*t)/2 + exp(-I*t)/2\n\ndef test_FiniteRV():\n    F = FiniteRV('F', {1: S.Half, 2: S.One/4, 3: S.One/4})\n\n    assert dict(density(F).items()) == {S(1): S.Half, S(2): S.One/4, S(3): S.One/4}\n    assert P(F >= 2) == S.Half\n\n    assert pspace(F).domain.as_boolean() == Or(\n        *[Eq(F.symbol, i) for i in [1, 2, 3]])\n\ndef test_density_call():\n    x = Bernoulli('x', p)\n    d = density(x)\n    assert d(0) == 1 - p\n    assert d(S.Zero) == 1 - p\n    assert d(5) == 0\n\n    assert 0 in d\n    assert 5 not in d\n    assert d(S(0)) == d[S(0)]\n\n\ndef test_DieDistribution():\n    X = DieDistribution(6)\n    assert X.pdf(S(1)/2) == S.Zero\n    assert X.pdf(x).subs({x: 1}).doit() == S(1)/6\n    assert X.pdf(x).subs({x: 7}).doit() == 0\n    assert X.pdf(x).subs({x: -1}).doit() == 0\n    assert X.pdf(x).subs({x: S(1)/3}).doit() == 0\n    raises(TypeError, lambda: X.pdf(x).subs({x: Matrix([0, 0])}))\n    raises(ValueError, lambda: X.pdf(x**2 - 1))\n\ndef test_FinitePSpace():\n    X = Die('X', 6)\n    space = pspace(X)\n    assert space.density == DieDistribution(6)\n", "comments": "  symbolic    numeric    todo  make iid method     domains    two domains internal symbol    issue 8105  negative sides     issue 8103  non integer sides     can intelligently compare h t    because using loops  symbolic n    test ability change success failure winnings    only test skewness defined ", "content": "from sympy.core.compatibility import range\nfrom sympy import (FiniteSet, S, Symbol, sqrt,\n        symbols, simplify, Eq, cos, And, Tuple, Or, Dict, sympify, binomial,\n        cancel, KroneckerDelta, exp, I)\nfrom sympy.concrete.expr_with_limits import AddWithLimits\nfrom sympy.matrices import Matrix\nfrom sympy.stats import (DiscreteUniform, Die, Bernoulli, Coin, Binomial,\n    Hypergeometric, Rademacher, P, E, variance, covariance, skewness, sample,\n    density, where, FiniteRV, pspace, cdf,\n    correlation, moment, cmoment, smoment, characteristic_function)\nfrom sympy.stats.frv_types import DieDistribution\nfrom sympy.utilities.pytest import raises, slow\nfrom sympy.abc import p, x, i\n\noo = S.Infinity\n\n\ndef BayesTest(A, B):\n    assert P(A, B) == P(And(A, B)) / P(B)\n    assert P(A, B) == P(B, A) * P(A) / P(B)\n\n\ndef test_discreteuniform():\n    # Symbolic\n    a, b, c, t = symbols('a b c t')\n    X = DiscreteUniform('X', [a, b, c])\n\n    assert E(X) == (a + b + c)/3\n    assert simplify(variance(X)\n                    - ((a**2 + b**2 + c**2)/3 - (a/3 + b/3 + c/3)**2)) == 0\n    assert P(Eq(X, a)) == P(Eq(X, b)) == P(Eq(X, c)) == S('1/3')\n\n    Y = DiscreteUniform('Y', range(-5, 5))\n\n    # Numeric\n    assert E(Y) == S('-1/2')\n    assert variance(Y) == S('33/4')\n\n    for x in range(-5, 5):\n        assert P(Eq(Y, x)) == S('1/10')\n        assert P(Y <= x) == S(x + 6)/10\n        assert P(Y >= x) == S(5 - x)/10\n\n    assert dict(density(Die('D', 6)).items()) == \\\n           dict(density(DiscreteUniform('U', range(1, 7))).items())\n\n    assert characteristic_function(X)(t) == exp(I*a*t)/3 + exp(I*b*t)/3 + exp(I*c*t)/3\n\n\ndef test_dice():\n    # TODO: Make iid method!\n    X, Y, Z = Die('X', 6), Die('Y', 6), Die('Z', 6)\n    a, b, t = symbols('a b t')\n\n    assert E(X) == 3 + S.Half\n    assert variance(X) == S(35)/12\n    assert E(X + Y) == 7\n    assert E(X + X) == 7\n    assert E(a*X + b) == a*E(X) + b\n    assert variance(X + Y) == variance(X) + variance(Y) == cmoment(X + Y, 2)\n    assert variance(X + X) == 4 * variance(X) == cmoment(X + X, 2)\n    assert cmoment(X, 0) == 1\n    assert cmoment(4*X, 3) == 64*cmoment(X, 3)\n    assert covariance(X, Y) == S.Zero\n    assert covariance(X, X + Y) == variance(X)\n    assert density(Eq(cos(X*S.Pi), 1))[True] == S.Half\n    assert correlation(X, Y) == 0\n    assert correlation(X, Y) == correlation(Y, X)\n    assert smoment(X + Y, 3) == skewness(X + Y)\n    assert smoment(X, 0) == 1\n    assert P(X > 3) == S.Half\n    assert P(2*X > 6) == S.Half\n    assert P(X > Y) == S(5)/12\n    assert P(Eq(X, Y)) == P(Eq(X, 1))\n\n    assert E(X, X > 3) == 5 == moment(X, 1, 0, X > 3)\n    assert E(X, Y > 3) == E(X) == moment(X, 1, 0, Y > 3)\n    assert E(X + Y, Eq(X, Y)) == E(2*X)\n    assert moment(X, 0) == 1\n    assert moment(5*X, 2) == 25*moment(X, 2)\n\n    assert P(X > 3, X > 3) == S.One\n    assert P(X > Y, Eq(Y, 6)) == S.Zero\n    assert P(Eq(X + Y, 12)) == S.One/36\n    assert P(Eq(X + Y, 12), Eq(X, 6)) == S.One/6\n\n    assert density(X + Y) == density(Y + Z) != density(X + X)\n    d = density(2*X + Y**Z)\n    assert d[S(22)] == S.One/108 and d[S(4100)] == S.One/216 and S(3130) not in d\n\n    assert pspace(X).domain.as_boolean() == Or(\n        *[Eq(X.symbol, i) for i in [1, 2, 3, 4, 5, 6]])\n\n    assert where(X > 3).set == FiniteSet(4, 5, 6)\n\n    assert characteristic_function(X)(t) == exp(6*I*t)/6 + exp(5*I*t)/6 + exp(4*I*t)/6 + exp(3*I*t)/6 + exp(2*I*t)/6 + exp(I*t)/6\n\n\ndef test_given():\n    X = Die('X', 6)\n    assert density(X, X > 5) == {S(6): S(1)}\n    assert where(X > 2, X > 5).as_boolean() == Eq(X.symbol, 6)\n    assert sample(X, X > 5) == 6\n\n\ndef test_domains():\n    X, Y = Die('x', 6), Die('y', 6)\n    x, y = X.symbol, Y.symbol\n    # Domains\n    d = where(X > Y)\n    assert d.condition == (x > y)\n    d = where(And(X > Y, Y > 3))\n    assert d.as_boolean() == Or(And(Eq(x, 5), Eq(y, 4)), And(Eq(x, 6),\n        Eq(y, 5)), And(Eq(x, 6), Eq(y, 4)))\n    assert len(d.elements) == 3\n\n    assert len(pspace(X + Y).domain.elements) == 36\n\n    Z = Die('x', 4)\n\n    raises(ValueError, lambda: P(X > Z))  # Two domains with same internal symbol\n\n    assert pspace(X + Y).domain.set == FiniteSet(1, 2, 3, 4, 5, 6)**2\n\n    assert where(X > 3).set == FiniteSet(4, 5, 6)\n    assert X.pspace.domain.dict == FiniteSet(\n        *[Dict({X.symbol: i}) for i in range(1, 7)])\n\n    assert where(X > Y).dict == FiniteSet(*[Dict({X.symbol: i, Y.symbol: j})\n            for i in range(1, 7) for j in range(1, 7) if i > j])\n\n\ndef test_dice_bayes():\n    X, Y, Z = Die('X', 6), Die('Y', 6), Die('Z', 6)\n\n    BayesTest(X > 3, X + Y < 5)\n    BayesTest(Eq(X - Y, Z), Z > Y)\n    BayesTest(X > 3, X > 2)\n\n\ndef test_die_args():\n    raises(ValueError, lambda: Die('X', -1))  # issue 8105: negative sides.\n    raises(ValueError, lambda: Die('X', 0))\n    raises(ValueError, lambda: Die('X', 1.5))  # issue 8103: non integer sides.\n\n    k = Symbol('k')\n    sym_die = Die('X', k)\n    raises(ValueError, lambda: density(sym_die).dict)\n\n\ndef test_bernoulli():\n    p, a, b, t = symbols('p a b t')\n    X = Bernoulli('B', p, a, b)\n\n    assert E(X) == a*p + b*(-p + 1)\n    assert density(X)[a] == p\n    assert density(X)[b] == 1 - p\n    assert characteristic_function(X)(t) == p * exp(I * a * t) + (-p + 1) * exp(I * b * t)\n\n    X = Bernoulli('B', p, 1, 0)\n\n    assert E(X) == p\n    assert simplify(variance(X)) == p*(1 - p)\n    assert E(a*X + b) == a*E(X) + b\n    assert simplify(variance(a*X + b)) == simplify(a**2 * variance(X))\n\ndef test_cdf():\n    D = Die('D', 6)\n    o = S.One\n\n    assert cdf(\n        D) == sympify({1: o/6, 2: o/3, 3: o/2, 4: 2*o/3, 5: 5*o/6, 6: o})\n\n\ndef test_coins():\n    C, D = Coin('C'), Coin('D')\n    H, T = symbols('H, T')\n    assert P(Eq(C, D)) == S.Half\n    assert density(Tuple(C, D)) == {(H, H): S.One/4, (H, T): S.One/4,\n            (T, H): S.One/4, (T, T): S.One/4}\n    assert dict(density(C).items()) == {H: S.Half, T: S.Half}\n\n    F = Coin('F', S.One/10)\n    assert P(Eq(F, H)) == S(1)/10\n\n    d = pspace(C).domain\n\n    assert d.as_boolean() == Or(Eq(C.symbol, H), Eq(C.symbol, T))\n\n    raises(ValueError, lambda: P(C > D))  # Can't intelligently compare H to T\n\ndef test_binomial_verify_parameters():\n    raises(ValueError, lambda: Binomial('b', .2, .5))\n    raises(ValueError, lambda: Binomial('b', 3, 1.5))\n\ndef test_binomial_numeric():\n    nvals = range(5)\n    pvals = [0, S(1)/4, S.Half, S(3)/4, 1]\n\n    for n in nvals:\n        for p in pvals:\n            X = Binomial('X', n, p)\n            assert E(X) == n*p\n            assert variance(X) == n*p*(1 - p)\n            if n > 0 and 0 < p < 1:\n                assert skewness(X) == (1 - 2*p)/sqrt(n*p*(1 - p))\n            for k in range(n + 1):\n                assert P(Eq(X, k)) == binomial(n, k)*p**k*(1 - p)**(n - k)\n\n\ndef test_binomial_symbolic():\n    n = 2  # Because we're using for loops, can't do symbolic n\n    p = symbols('p', positive=True)\n    X = Binomial('X', n, p)\n    t = Symbol('t')\n\n    assert simplify(E(X)) == n*p == simplify(moment(X, 1))\n    assert simplify(variance(X)) == n*p*(1 - p) == simplify(cmoment(X, 2))\n    assert cancel((skewness(X) - (1 - 2*p)/sqrt(n*p*(1 - p)))) == 0\n    assert characteristic_function(X)(t) == p ** 2 * exp(2 * I * t) + 2 * p * (-p + 1) * exp(I * t) + (-p + 1) ** 2\n\n    # Test ability to change success/failure winnings\n    H, T = symbols('H T')\n    Y = Binomial('Y', n, p, succ=H, fail=T)\n    assert simplify(E(Y) - (n*(H*p + T*(1 - p)))) == 0\n\n\ndef test_hypergeometric_numeric():\n    for N in range(1, 5):\n        for m in range(0, N + 1):\n            for n in range(1, N + 1):\n                X = Hypergeometric('X', N, m, n)\n                N, m, n = map(sympify, (N, m, n))\n                assert sum(density(X).values()) == 1\n                assert E(X) == n * m / N\n                if N > 1:\n                    assert variance(X) == n*(m/N)*(N - m)/N*(N - n)/(N - 1)\n                # Only test for skewness when defined\n                if N > 2 and 0 < m < N and n < N:\n                    assert skewness(X) == simplify((N - 2*m)*sqrt(N - 1)*(N - 2*n)\n                        / (sqrt(n*m*(N - m)*(N - n))*(N - 2)))\n\n\ndef test_rademacher():\n    X = Rademacher('X')\n    t = Symbol('t')\n\n    assert E(X) == 0\n    assert variance(X) == 1\n    assert density(X)[-1] == S.Half\n    assert density(X)[1] == S.Half\n    assert characteristic_function(X)(t) == exp(I*t)/2 + exp(-I*t)/2\n\ndef test_FiniteRV():\n    F = FiniteRV('F', {1: S.Half, 2: S.One/4, 3: S.One/4})\n\n    assert dict(density(F).items()) == {S(1): S.Half, S(2): S.One/4, S(3): S.One/4}\n    assert P(F >= 2) == S.Half\n\n    assert pspace(F).domain.as_boolean() == Or(\n        *[Eq(F.symbol, i) for i in [1, 2, 3]])\n\ndef test_density_call():\n    x = Bernoulli('x', p)\n    d = density(x)\n    assert d(0) == 1 - p\n    assert d(S.Zero) == 1 - p\n    assert d(5) == 0\n\n    assert 0 in d\n    assert 5 not in d\n    assert d(S(0)) == d[S(0)]\n\n\ndef test_DieDistribution():\n    X = DieDistribution(6)\n    assert X.pdf(S(1)/2) == S.Zero\n    assert X.pdf(x).subs({x: 1}).doit() == S(1)/6\n    assert X.pdf(x).subs({x: 7}).doit() == 0\n    assert X.pdf(x).subs({x: -1}).doit() == 0\n    assert X.pdf(x).subs({x: S(1)/3}).doit() == 0\n    raises(TypeError, lambda: X.pdf(x).subs({x: Matrix([0, 0])}))\n    raises(ValueError, lambda: X.pdf(x**2 - 1))\n\ndef test_FinitePSpace():\n    X = Die('X', 6)\n    space = pspace(X)\n    assert space.density == DieDistribution(6)\n", "description": "A computer algebra system written in pure Python", "file_name": "test_finite_rv.py", "id": "dc7f2a0379f65724013949a3f323927d", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/stats/tests/test_finite_rv.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}