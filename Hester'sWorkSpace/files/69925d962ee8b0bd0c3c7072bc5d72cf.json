{"author": "tgalal", "code": "from yowsup.layers import YowParallelLayer\nimport asyncore, time, logging, random\nfrom yowsup.layers import YowLayer\nfrom yowsup.layers.auth                        import YowCryptLayer, YowAuthenticationProtocolLayer\nfrom yowsup.layers.coder                       import YowCoderLayer\nfrom yowsup.layers.logger                      import YowLoggerLayer\nfrom yowsup.layers.network                     import YowNetworkLayer\nfrom yowsup.layers.protocol_messages           import YowMessagesProtocolLayer\nfrom yowsup.layers.stanzaregulator             import YowStanzaRegulator\nfrom yowsup.layers.protocol_media              import YowMediaProtocolLayer\nfrom yowsup.layers.protocol_acks               import YowAckProtocolLayer\nfrom yowsup.layers.protocol_receipts           import YowReceiptProtocolLayer\nfrom yowsup.layers.protocol_groups             import YowGroupsProtocolLayer\nfrom yowsup.layers.protocol_presence           import YowPresenceProtocolLayer\nfrom yowsup.layers.protocol_ib                 import YowIbProtocolLayer\nfrom yowsup.layers.protocol_notifications      import YowNotificationsProtocolLayer\nfrom yowsup.layers.protocol_iq                 import YowIqProtocolLayer\nfrom yowsup.layers.protocol_contacts           import YowContactsIqProtocolLayer\nfrom yowsup.layers.protocol_chatstate          import YowChatstateProtocolLayer\nfrom yowsup.layers.protocol_privacy            import YowPrivacyProtocolLayer\nfrom yowsup.layers.protocol_profiles           import YowProfilesProtocolLayer\nfrom yowsup.layers.protocol_calls import YowCallsProtocolLayer\nfrom yowsup.env import YowsupEnv\nfrom yowsup.common.constants import YowConstants\nimport inspect\ntry:\n    import Queue\nexcept ImportError:\n    import queue as Queue\nlogger = logging.getLogger(__name__)\n\n\nYOWSUP_PROTOCOL_LAYERS_BASIC = (\n    YowAuthenticationProtocolLayer, YowMessagesProtocolLayer,\n    YowReceiptProtocolLayer, YowAckProtocolLayer, YowPresenceProtocolLayer,\n    YowIbProtocolLayer, YowIqProtocolLayer, YowNotificationsProtocolLayer,\n    YowContactsIqProtocolLayer, YowChatstateProtocolLayer, YowCallsProtocolLayer\n\n)\n\nclass YowStackBuilder(object):\n\n    def __init__(self):\n        self.layers = ()\n        self._props = {}\n\n    def setProp(self, key, value):\n        self._props[key] = value\n        return self\n\n    def pushDefaultLayers(self, axolotl = False):\n        defaultLayers = YowStackBuilder.getDefaultLayers(axolotl)\n        self.layers += defaultLayers\n        return self\n\n    def push(self, yowLayer):\n        self.layers += (yowLayer,)\n        return self\n\n    def pop(self):\n        self.layers = self.layers[:-1]\n        return self\n\n    def build(self):\n        return YowStack(self.layers, reversed = False, props = self._props)\n\n    @staticmethod\n    def getDefaultLayers(axolotl = False, groups = True, media = True, privacy = True, profiles = True):\n        coreLayers = YowStackBuilder.getCoreLayers()\n        protocolLayers = YowStackBuilder.getProtocolLayers(groups = groups, media=media, privacy=privacy, profiles=profiles)\n\n        allLayers = coreLayers\n        if axolotl:\n            from yowsup.layers.axolotl import AxolotlSendLayer, AxolotlControlLayer, AxolotlReceivelayer\n            allLayers += (AxolotlControlLayer,)\n            allLayers += (YowParallelLayer((AxolotlSendLayer, AxolotlReceivelayer)),)\n\n        allLayers += (YowParallelLayer(protocolLayers),)\n\n        return allLayers\n\n    @staticmethod\n    def getDefaultStack(layer = None, axolotl = False, groups = True, media = True, privacy = True, profiles = True):\n        \n\n        allLayers = YowStackBuilder.getDefaultLayers(axolotl, groups = groups, media=media,privacy=privacy, profiles=profiles)\n        if layer:\n            allLayers = allLayers + (layer,)\n\n\n        return YowStack(allLayers, reversed = False)\n\n    @staticmethod\n    def getCoreLayers():\n        return (\n            YowLoggerLayer,\n            YowCoderLayer,\n            YowCryptLayer,\n            YowStanzaRegulator,\n            YowNetworkLayer\n        )[::-1]\n\n    @staticmethod\n    def getProtocolLayers(groups = True, media = True, privacy = True, profiles = True):\n        layers = YOWSUP_PROTOCOL_LAYERS_BASIC\n        if groups:\n            layers += (YowGroupsProtocolLayer,)\n\n        if media:\n            layers += (YowMediaProtocolLayer, )\n\n        if privacy:\n            layers += (YowPrivacyProtocolLayer, )\n\n        if profiles:\n            layers += (YowProfilesProtocolLayer, )\n\n        return layers\n\nclass YowStack(object):\n    __stack = []\n    __stackInstances = []\n    __detachedQueue = Queue.Queue()\n    def __init__(self, stackClassesArr = None, reversed = True, props = None):\n        stackClassesArr = stackClassesArr or ()\n        self.__stack = stackClassesArr[::-1] if reversed else stackClassesArr\n        self.__stackInstances = []\n        self._props = props or {}\n\n        self.setProp(YowNetworkLayer.PROP_ENDPOINT, YowConstants.ENDPOINTS[random.randint(0,len(YowConstants.ENDPOINTS)-1)])\n        self.setProp(YowCoderLayer.PROP_DOMAIN, YowConstants.DOMAIN)\n        self.setProp(YowCoderLayer.PROP_RESOURCE, YowsupEnv.getCurrent().getResource())\n        self._construct()\n\n\n    def getLayerInterface(self, YowLayerClass):\n        for inst in self.__stackInstances:\n            if inst.__class__ == YowLayerClass:\n                return inst.getLayerInterface()\n            elif inst.__class__ == YowParallelLayer:\n                res = inst.getLayerInterface(YowLayerClass)\n                if res:\n                    return res\n\n\n    def send(self, data):\n        self.__stackInstances[-1].send(data)\n\n    def receive(self, data):\n        self.__stackInstances[0].receive(data)\n\n    def setCredentials(self, credentials):\n        self.getLayerInterface(YowAuthenticationProtocolLayer).setCredentials(*credentials)\n\n    def addLayer(self, layerClass):\n        self.__stack.push(layerClass)\n\n    def addPostConstructLayer(self, layer):\n        self.__stackInstances[-1].setLayers(layer, self.__stackInstances[-2])\n        layer.setLayers(None, self.__stackInstances[-1])\n        self.__stackInstances.append(layer)\n\n    def setProp(self, key, value):\n        self._props[key] = value\n\n    def getProp(self, key, default = None):\n        return self._props[key] if key in self._props else default\n\n    def emitEvent(self, yowLayerEvent):\n        if not self.__stackInstances[0].onEvent(yowLayerEvent):\n            self.__stackInstances[0].emitEvent(yowLayerEvent)\n\n    def broadcastEvent(self, yowLayerEvent):\n        if not self.__stackInstances[-1].onEvent(yowLayerEvent):\n            self.__stackInstances[-1].broadcastEvent(yowLayerEvent)\n\n    def execDetached(self, fn):\n        self.__class__.__detachedQueue.put(fn)\n\n    def loop(self, *args, **kwargs):\n        if \"discrete\" in kwargs:\n            discreteVal = kwargs[\"discrete\"]\n            del kwargs[\"discrete\"]\n            while True:\n                asyncore.loop(*args, **kwargs)\n                time.sleep(discreteVal)\n                try:\n                    callback = self.__class__.__detachedQueue.get(False) \n                    callback()\n                except Queue.Empty:\n                    pass\n        else:\n            asyncore.loop(*args, **kwargs)\n\n    def _construct(self):\n        logger.debug(\"Initializing stack\")\n        for s in self.__stack:\n            if type(s) is tuple:\n                logger.warn(\"Implicit declaration of parallel layers in a tuple is deprecated, pass a YowParallelLayer instead\")\n                inst = YowParallelLayer(s)\n            else:\n                if inspect.isclass(s):\n                    if issubclass(s, YowLayer):\n                        inst = s()\n                    else:\n                        raise ValueError(\"Stack must contain only subclasses of YowLayer\")\n                elif issubclass(s.__class__, YowLayer):\n                        inst = s\n                else:\n                    raise ValueError(\"Stack must contain only subclasses of YowLayer\")\n                ()\n            logger.debug(\"Constructed %s\" % inst)\n            inst.setStack(self)\n            self.__stackInstances.append(inst)\n\n        for i in range(0, len(self.__stackInstances)):\n            upperLayer = self.__stackInstances[i + 1] if (i + 1) < len(self.__stackInstances) else None\n            lowerLayer = self.__stackInstances[i - 1] if i > 0 else None\n            self.__stackInstances[i].setLayers(upperLayer, lowerLayer)\n\n    def getLayer(self, layerIndex):\n        return self.__stackInstances[layerIndex]\n", "comments": "             param layer  an optional layer put top default stack          param axolotl  e2e encryption enabled  disabled          return  yowstack               block   inst   s() ", "content": "from yowsup.layers import YowParallelLayer\nimport asyncore, time, logging, random\nfrom yowsup.layers import YowLayer\nfrom yowsup.layers.auth                        import YowCryptLayer, YowAuthenticationProtocolLayer\nfrom yowsup.layers.coder                       import YowCoderLayer\nfrom yowsup.layers.logger                      import YowLoggerLayer\nfrom yowsup.layers.network                     import YowNetworkLayer\nfrom yowsup.layers.protocol_messages           import YowMessagesProtocolLayer\nfrom yowsup.layers.stanzaregulator             import YowStanzaRegulator\nfrom yowsup.layers.protocol_media              import YowMediaProtocolLayer\nfrom yowsup.layers.protocol_acks               import YowAckProtocolLayer\nfrom yowsup.layers.protocol_receipts           import YowReceiptProtocolLayer\nfrom yowsup.layers.protocol_groups             import YowGroupsProtocolLayer\nfrom yowsup.layers.protocol_presence           import YowPresenceProtocolLayer\nfrom yowsup.layers.protocol_ib                 import YowIbProtocolLayer\nfrom yowsup.layers.protocol_notifications      import YowNotificationsProtocolLayer\nfrom yowsup.layers.protocol_iq                 import YowIqProtocolLayer\nfrom yowsup.layers.protocol_contacts           import YowContactsIqProtocolLayer\nfrom yowsup.layers.protocol_chatstate          import YowChatstateProtocolLayer\nfrom yowsup.layers.protocol_privacy            import YowPrivacyProtocolLayer\nfrom yowsup.layers.protocol_profiles           import YowProfilesProtocolLayer\nfrom yowsup.layers.protocol_calls import YowCallsProtocolLayer\nfrom yowsup.env import YowsupEnv\nfrom yowsup.common.constants import YowConstants\nimport inspect\ntry:\n    import Queue\nexcept ImportError:\n    import queue as Queue\nlogger = logging.getLogger(__name__)\n\n\nYOWSUP_PROTOCOL_LAYERS_BASIC = (\n    YowAuthenticationProtocolLayer, YowMessagesProtocolLayer,\n    YowReceiptProtocolLayer, YowAckProtocolLayer, YowPresenceProtocolLayer,\n    YowIbProtocolLayer, YowIqProtocolLayer, YowNotificationsProtocolLayer,\n    YowContactsIqProtocolLayer, YowChatstateProtocolLayer, YowCallsProtocolLayer\n\n)\n\nclass YowStackBuilder(object):\n\n    def __init__(self):\n        self.layers = ()\n        self._props = {}\n\n    def setProp(self, key, value):\n        self._props[key] = value\n        return self\n\n    def pushDefaultLayers(self, axolotl = False):\n        defaultLayers = YowStackBuilder.getDefaultLayers(axolotl)\n        self.layers += defaultLayers\n        return self\n\n    def push(self, yowLayer):\n        self.layers += (yowLayer,)\n        return self\n\n    def pop(self):\n        self.layers = self.layers[:-1]\n        return self\n\n    def build(self):\n        return YowStack(self.layers, reversed = False, props = self._props)\n\n    @staticmethod\n    def getDefaultLayers(axolotl = False, groups = True, media = True, privacy = True, profiles = True):\n        coreLayers = YowStackBuilder.getCoreLayers()\n        protocolLayers = YowStackBuilder.getProtocolLayers(groups = groups, media=media, privacy=privacy, profiles=profiles)\n\n        allLayers = coreLayers\n        if axolotl:\n            from yowsup.layers.axolotl import AxolotlSendLayer, AxolotlControlLayer, AxolotlReceivelayer\n            allLayers += (AxolotlControlLayer,)\n            allLayers += (YowParallelLayer((AxolotlSendLayer, AxolotlReceivelayer)),)\n\n        allLayers += (YowParallelLayer(protocolLayers),)\n\n        return allLayers\n\n    @staticmethod\n    def getDefaultStack(layer = None, axolotl = False, groups = True, media = True, privacy = True, profiles = True):\n        \"\"\"\n        :param layer: An optional layer to put on top of default stack\n        :param axolotl: E2E encryption enabled/ disabled\n        :return: YowStack\n        \"\"\"\n\n        allLayers = YowStackBuilder.getDefaultLayers(axolotl, groups = groups, media=media,privacy=privacy, profiles=profiles)\n        if layer:\n            allLayers = allLayers + (layer,)\n\n\n        return YowStack(allLayers, reversed = False)\n\n    @staticmethod\n    def getCoreLayers():\n        return (\n            YowLoggerLayer,\n            YowCoderLayer,\n            YowCryptLayer,\n            YowStanzaRegulator,\n            YowNetworkLayer\n        )[::-1]\n\n    @staticmethod\n    def getProtocolLayers(groups = True, media = True, privacy = True, profiles = True):\n        layers = YOWSUP_PROTOCOL_LAYERS_BASIC\n        if groups:\n            layers += (YowGroupsProtocolLayer,)\n\n        if media:\n            layers += (YowMediaProtocolLayer, )\n\n        if privacy:\n            layers += (YowPrivacyProtocolLayer, )\n\n        if profiles:\n            layers += (YowProfilesProtocolLayer, )\n\n        return layers\n\nclass YowStack(object):\n    __stack = []\n    __stackInstances = []\n    __detachedQueue = Queue.Queue()\n    def __init__(self, stackClassesArr = None, reversed = True, props = None):\n        stackClassesArr = stackClassesArr or ()\n        self.__stack = stackClassesArr[::-1] if reversed else stackClassesArr\n        self.__stackInstances = []\n        self._props = props or {}\n\n        self.setProp(YowNetworkLayer.PROP_ENDPOINT, YowConstants.ENDPOINTS[random.randint(0,len(YowConstants.ENDPOINTS)-1)])\n        self.setProp(YowCoderLayer.PROP_DOMAIN, YowConstants.DOMAIN)\n        self.setProp(YowCoderLayer.PROP_RESOURCE, YowsupEnv.getCurrent().getResource())\n        self._construct()\n\n\n    def getLayerInterface(self, YowLayerClass):\n        for inst in self.__stackInstances:\n            if inst.__class__ == YowLayerClass:\n                return inst.getLayerInterface()\n            elif inst.__class__ == YowParallelLayer:\n                res = inst.getLayerInterface(YowLayerClass)\n                if res:\n                    return res\n\n\n    def send(self, data):\n        self.__stackInstances[-1].send(data)\n\n    def receive(self, data):\n        self.__stackInstances[0].receive(data)\n\n    def setCredentials(self, credentials):\n        self.getLayerInterface(YowAuthenticationProtocolLayer).setCredentials(*credentials)\n\n    def addLayer(self, layerClass):\n        self.__stack.push(layerClass)\n\n    def addPostConstructLayer(self, layer):\n        self.__stackInstances[-1].setLayers(layer, self.__stackInstances[-2])\n        layer.setLayers(None, self.__stackInstances[-1])\n        self.__stackInstances.append(layer)\n\n    def setProp(self, key, value):\n        self._props[key] = value\n\n    def getProp(self, key, default = None):\n        return self._props[key] if key in self._props else default\n\n    def emitEvent(self, yowLayerEvent):\n        if not self.__stackInstances[0].onEvent(yowLayerEvent):\n            self.__stackInstances[0].emitEvent(yowLayerEvent)\n\n    def broadcastEvent(self, yowLayerEvent):\n        if not self.__stackInstances[-1].onEvent(yowLayerEvent):\n            self.__stackInstances[-1].broadcastEvent(yowLayerEvent)\n\n    def execDetached(self, fn):\n        self.__class__.__detachedQueue.put(fn)\n\n    def loop(self, *args, **kwargs):\n        if \"discrete\" in kwargs:\n            discreteVal = kwargs[\"discrete\"]\n            del kwargs[\"discrete\"]\n            while True:\n                asyncore.loop(*args, **kwargs)\n                time.sleep(discreteVal)\n                try:\n                    callback = self.__class__.__detachedQueue.get(False) #doesn't block\n                    callback()\n                except Queue.Empty:\n                    pass\n        else:\n            asyncore.loop(*args, **kwargs)\n\n    def _construct(self):\n        logger.debug(\"Initializing stack\")\n        for s in self.__stack:\n            if type(s) is tuple:\n                logger.warn(\"Implicit declaration of parallel layers in a tuple is deprecated, pass a YowParallelLayer instead\")\n                inst = YowParallelLayer(s)\n            else:\n                if inspect.isclass(s):\n                    if issubclass(s, YowLayer):\n                        inst = s()\n                    else:\n                        raise ValueError(\"Stack must contain only subclasses of YowLayer\")\n                elif issubclass(s.__class__, YowLayer):\n                        inst = s\n                else:\n                    raise ValueError(\"Stack must contain only subclasses of YowLayer\")\n                #inst = s()\n            logger.debug(\"Constructed %s\" % inst)\n            inst.setStack(self)\n            self.__stackInstances.append(inst)\n\n        for i in range(0, len(self.__stackInstances)):\n            upperLayer = self.__stackInstances[i + 1] if (i + 1) < len(self.__stackInstances) else None\n            lowerLayer = self.__stackInstances[i - 1] if i > 0 else None\n            self.__stackInstances[i].setLayers(upperLayer, lowerLayer)\n\n    def getLayer(self, layerIndex):\n        return self.__stackInstances[layerIndex]\n", "description": "The python WhatsApp library", "file_name": "yowstack.py", "id": "69925d962ee8b0bd0c3c7072bc5d72cf", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/stacks/yowstack.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}