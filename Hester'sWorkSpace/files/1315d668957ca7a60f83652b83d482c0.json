{"author": "Miserlou", "code": "import unittest\nfrom mock import Mock\nfrom zappa.handler import LambdaHandler\n\n\ndef no_args():\n    return\n\n\ndef one_arg(first):\n    return first\n\n\ndef two_args(first, second):\n    return first, second\n\n\ndef var_args(*args):\n    return args\n\n\ndef var_args_with_one(first, *args):\n    return first, args[0]\n\n\ndef unsupported(first, second, third):\n    return first, second, third\n\n\ndef raises_exception(*args, **kwargs):\n    raise Exception('app exception')\n\n\ndef handle_bot_intent(event, context):\n    return \"Success\"\n\n\nmocked_exception_handler = Mock()\n\n\nclass TestZappa(unittest.TestCase):\n\n    def setUp(self):\n        mocked_exception_handler.reset_mock()\n\n    def tearDown(self):\n        LambdaHandler._LambdaHandler__instance = None\n        LambdaHandler.settings = None\n        LambdaHandler.settings_name = None\n\n    def test_run_function(self):\n        self.assertIsNone(LambdaHandler.run_function(no_args, 'e', 'c'))\n        self.assertEqual(LambdaHandler.run_function(one_arg, 'e', 'c'), 'e')\n        self.assertEqual(LambdaHandler.run_function(two_args, 'e', 'c'), ('e', 'c'))\n        self.assertEqual(LambdaHandler.run_function(var_args, 'e', 'c'), ('e', 'c'))\n        self.assertEqual(LambdaHandler.run_function(var_args_with_one, 'e', 'c'), ('e', 'c'))\n\n        try:\n            LambdaHandler.run_function(unsupported, 'e', 'c')\n            self.fail('Exception expected')\n        except RuntimeError as e:\n            pass\n\n    def test_wsgi_script_name_on_aws_url(self):\n        \"\"\"\n        Ensure that requests to the amazonaws.com host for an API with a\n        domain have the correct request.url\n        \"\"\"\n        lh = LambdaHandler('tests.test_wsgi_script_name_settings')\n\n        event = {\n            'body': '',\n            'resource': '/{proxy+}',\n            'requestContext': {},\n            'queryStringParameters': {},\n            'headers': {\n                'Host': '1234567890.execute-api.us-east-1.amazonaws.com',\n            },\n            'pathParameters': {\n                'proxy': 'return/request/url'\n            },\n            'httpMethod': 'GET',\n            'stageVariables': {},\n            'path': '/return/request/url'\n        }\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['statusCode'], 200)\n        self.assertEqual(\n            response['body'],\n            'https://1234567890.execute-api.us-east-1.amazonaws.com/dev/return/request/url'\n        )\n\n    def test_wsgi_script_name_on_domain_url(self):\n        \"\"\"\n        Ensure that requests to the amazonaws.com host for an API with a\n        domain have the correct request.url\n        \"\"\"\n        lh = LambdaHandler('tests.test_wsgi_script_name_settings')\n\n        event = {\n            'body': '',\n            'resource': '/{proxy+}',\n            'requestContext': {},\n            'queryStringParameters': {},\n            'headers': {\n                'Host': 'example.com',\n            },\n            'pathParameters': {\n                'proxy': 'return/request/url'\n            },\n            'httpMethod': 'GET',\n            'stageVariables': {},\n            'path': '/return/request/url'\n        }\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['statusCode'], 200)\n        self.assertEqual(\n            response['body'],\n            'https://example.com/return/request/url'\n        )\n\n    def test_wsgi_script_name_on_test_request(self):\n        \"\"\"\n        Ensure that requests sent by the \"Send test request\" button behaves\n        sensibly\n        \"\"\"\n        lh = LambdaHandler('tests.test_wsgi_script_name_settings')\n\n        event = {\n            'body': '',\n            'resource': '/{proxy+}',\n            'requestContext': {},\n            'queryStringParameters': {},\n            'headers': {},\n            'pathParameters': {\n                'proxy': 'return/request/url'\n            },\n            'httpMethod': 'GET',\n            'stageVariables': {},\n            'path': '/return/request/url'\n        }\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['statusCode'], 200)\n        self.assertEqual(\n            response['body'],\n            'https://zappa:80/return/request/url'\n        )\n\n    def test_exception_handler_on_web_request(self):\n        \"\"\"\n        Ensure that app exceptions triggered by web requests use the exception_handler.\n        \"\"\"\n        lh = LambdaHandler('tests.test_exception_handler_settings')\n\n        event = {\n            'body': '',\n            'resource': '/{proxy+}',\n            'requestContext': {},\n            'queryStringParameters': {},\n            'headers': {\n                'Host': '1234567890.execute-api.us-east-1.amazonaws.com',\n            },\n            'pathParameters': {\n                'proxy': 'return/request/url'\n            },\n            'httpMethod': 'GET',\n            'stageVariables': {},\n            'path': '/return/request/url'\n        }\n\n        mocked_exception_handler.assert_not_called()\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['statusCode'], 500)\n        mocked_exception_handler.assert_called()\n\n\n    def test_wsgi_script_on_cognito_event_request(self):\n        \"\"\"\n        Ensure that requests sent by cognito behave sensibly\n        \"\"\"\n        lh = LambdaHandler('tests.test_wsgi_script_name_settings')\n\n        event = {'version': '1',\n                 'region': 'eu-west-1',\n                 'userPoolId': 'region_poolID',\n                 'userName': 'uuu-id-here',\n                 'callerContext': {'awsSdkVersion': 'aws-sdk-js-2.149.0',\n                                   'clientId': 'client-id-here'},\n                 'triggerSource': 'PreSignUp_SignUp',\n                 'request': {'userAttributes':\n                                 {'email': 'email@example.com'}, 'validationData': None},\n                 'response': {'autoConfirmUser': False,\n                              'autoVerifyEmail': False,\n                              'autoVerifyPhone': False}}\n\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['response']['autoConfirmUser'], False)\n\n    def test_bot_triggered_event(self):\n        \"\"\"\n        Ensure that bot triggered events are handled as in the settings\n        \"\"\"\n        lh = LambdaHandler('tests.test_bot_handler_being_triggered')\n        \n        event = {\n            \"messageVersion\": \"1.0\",\n            \"invocationSource\": \"DialogCodeHook\",\n            \"userId\": \"user-id specified in the POST request to Amazon Lex.\",\n            \"sessionAttributes\": {\n                \"key1\": \"value1\",\n                \"key2\": \"value2\",\n            },\n            \"bot\": {\n                \"name\": \"bot-name\",\n                \"alias\": \"bot-alias\",\n                \"version\": \"bot-version\"\n            },\n            \"outputDialogMode\": \"Text or Voice, based on ContentType request header in runtime API request\",\n            \"currentIntent\": {\n                \"name\": \"intent-name\",\n                \"slots\": {\n                    \"slot-name\": \"value\",\n                    \"slot-name\": \"value\",\n                    \"slot-name\": \"value\"\n                },\n                \"confirmationStatus\": \"None, Confirmed, or Denied (intent confirmation, if configured)\"\n            }\n        }\n\n        response = lh.handler(event, None)\n\n        self.assertEqual(response, 'Success')\n\n    def test_exception_in_bot_triggered_event(self):\n        \"\"\"\n        Ensure that bot triggered exceptions are handled as defined in the settings.\n        \"\"\"\n        lh = LambdaHandler('tests.test_bot_exception_handler_settings')\n        \n        event = {\n            \"messageVersion\": \"1.0\",\n            \"invocationSource\": \"DialogCodeHook\",\n            \"userId\": \"user-id specified in the POST request to Amazon Lex.\",\n            \"sessionAttributes\": {\n                \"key1\": \"value1\",\n                \"key2\": \"value2\",\n            },\n            \"bot\": {\n                \"name\": \"bot-name\",\n                \"alias\": \"bot-alias\",\n                \"version\": \"bot-version\"\n            },\n            \"outputDialogMode\": \"Text or Voice, based on ContentType request header in runtime API request\",\n            \"currentIntent\": {\n                \"name\": \"intent-name\",\n                \"slots\": {\n                    \"slot-name\": \"value\",\n                    \"slot-name\": \"value\",\n                    \"slot-name\": \"value\"\n                },\n                \"confirmationStatus\": \"None, Confirmed, or Denied (intent confirmation, if configured)\"\n            }\n        }\n\n        response = lh.lambda_handler(event, None)\n        mocked_exception_handler.assert_called\n", "comments": "            ensure requests amazonaws com host api         domain correct request url                     lh   lambdahandler( tests test wsgi script name settings )          event                  body                    resource      proxy                  requestcontext                    querystringparameters                    headers                      host    1234567890 execute api us east 1 amazonaws com                               pathparameters                      proxy    return request url                              httpmethod    get                stagevariables                    path     return request url                    response   lh handler(event  none)          self assertequal(response  statuscode    200)         self assertequal(             response  body                 https   1234567890 execute api us east 1 amazonaws com dev return request url          )      def test wsgi script name domain url(self)                      ensure requests amazonaws com host api         domain correct request url                     lh   lambdahandler( tests test wsgi script name settings )          event                  body                    resource      proxy                  requestcontext                    querystringparameters                    headers                      host    example com                               pathparameters                      proxy    return request url                              httpmethod    get                stagevariables                    path     return request url                    response   lh handler(event  none)          self assertequal(response  statuscode    200)         self assertequal(             response  body                 https   example com return request url          )      def test wsgi script name test request(self)                      ensure requests sent  send test request  button behaves         sensibly                     lh   lambdahandler( tests test wsgi script name settings )          event                  body                    resource      proxy                  requestcontext                    querystringparameters                    headers                    pathparameters                      proxy    return request url                              httpmethod    get                stagevariables                    path     return request url                    response   lh handler(event  none)          self assertequal(response  statuscode    200)         self assertequal(             response  body                 https   zappa 80 return request url          )      def test exception handler web request(self)                      ensure app exceptions triggered web requests use exception handler                      lh   lambdahandler( tests test exception handler settings )          event                  body                    resource      proxy                  requestcontext                    querystringparameters                    headers                      host    1234567890 execute api us east 1 amazonaws com                               pathparameters                      proxy    return request url                              httpmethod    get                stagevariables                    path     return request url                     mocked exception handler assert called()         response   lh handler(event  none)          self assertequal(response  statuscode    500)         mocked exception handler assert called()       def test wsgi script cognito event request(self)                      ensure requests sent cognito behave sensibly                     lh   lambdahandler( tests test wsgi script name settings )          event     version    1                     region    eu west 1                     userpoolid    region poolid                     username    uuu id                     callercontext     awssdkversion    aws sdk js 2 149 0                                       clientid    client id                      triggersource    presignup signup                     request     userattributes                                      email    email example com     validationdata   none                     response     autoconfirmuser   false                                 autoverifyemail   false                                 autoverifyphone   false            response   lh handler(event  none)          self assertequal(response  response    autoconfirmuser    false)      def test bot triggered event(self)                      ensure bot triggered events handled settings                     lh   lambdahandler( tests test bot handler triggered )             https   docs aws amazon com lambda latest dg eventsources html eventsources lex         event                  messageversion    1 0                invocationsource    dialogcodehook                userid    user id specified post request amazon lex                 sessionattributes                      key1    value1                    key2    value2                               bot                      name    bot name                    alias    bot alias                    version    bot version                              outputdialogmode    text voice  based contenttype request header runtime api request                currentintent                      name    intent name                    slots                          slot name    value                        slot name    value                        slot name    value                                      confirmationstatus    none  confirmed  denied (intent confirmation  configured)                                   response   lh handler(event  none)          self assertequal(response   success )      def test exception bot triggered event(self)                      ensure bot triggered exceptions handled defined settings                   https   docs aws amazon com lambda latest dg eventsources html eventsources lex      https   docs aws amazon com lambda latest dg eventsources html eventsources lex ", "content": "import unittest\nfrom mock import Mock\nfrom zappa.handler import LambdaHandler\n\n\ndef no_args():\n    return\n\n\ndef one_arg(first):\n    return first\n\n\ndef two_args(first, second):\n    return first, second\n\n\ndef var_args(*args):\n    return args\n\n\ndef var_args_with_one(first, *args):\n    return first, args[0]\n\n\ndef unsupported(first, second, third):\n    return first, second, third\n\n\ndef raises_exception(*args, **kwargs):\n    raise Exception('app exception')\n\n\ndef handle_bot_intent(event, context):\n    return \"Success\"\n\n\nmocked_exception_handler = Mock()\n\n\nclass TestZappa(unittest.TestCase):\n\n    def setUp(self):\n        mocked_exception_handler.reset_mock()\n\n    def tearDown(self):\n        LambdaHandler._LambdaHandler__instance = None\n        LambdaHandler.settings = None\n        LambdaHandler.settings_name = None\n\n    def test_run_function(self):\n        self.assertIsNone(LambdaHandler.run_function(no_args, 'e', 'c'))\n        self.assertEqual(LambdaHandler.run_function(one_arg, 'e', 'c'), 'e')\n        self.assertEqual(LambdaHandler.run_function(two_args, 'e', 'c'), ('e', 'c'))\n        self.assertEqual(LambdaHandler.run_function(var_args, 'e', 'c'), ('e', 'c'))\n        self.assertEqual(LambdaHandler.run_function(var_args_with_one, 'e', 'c'), ('e', 'c'))\n\n        try:\n            LambdaHandler.run_function(unsupported, 'e', 'c')\n            self.fail('Exception expected')\n        except RuntimeError as e:\n            pass\n\n    def test_wsgi_script_name_on_aws_url(self):\n        \"\"\"\n        Ensure that requests to the amazonaws.com host for an API with a\n        domain have the correct request.url\n        \"\"\"\n        lh = LambdaHandler('tests.test_wsgi_script_name_settings')\n\n        event = {\n            'body': '',\n            'resource': '/{proxy+}',\n            'requestContext': {},\n            'queryStringParameters': {},\n            'headers': {\n                'Host': '1234567890.execute-api.us-east-1.amazonaws.com',\n            },\n            'pathParameters': {\n                'proxy': 'return/request/url'\n            },\n            'httpMethod': 'GET',\n            'stageVariables': {},\n            'path': '/return/request/url'\n        }\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['statusCode'], 200)\n        self.assertEqual(\n            response['body'],\n            'https://1234567890.execute-api.us-east-1.amazonaws.com/dev/return/request/url'\n        )\n\n    def test_wsgi_script_name_on_domain_url(self):\n        \"\"\"\n        Ensure that requests to the amazonaws.com host for an API with a\n        domain have the correct request.url\n        \"\"\"\n        lh = LambdaHandler('tests.test_wsgi_script_name_settings')\n\n        event = {\n            'body': '',\n            'resource': '/{proxy+}',\n            'requestContext': {},\n            'queryStringParameters': {},\n            'headers': {\n                'Host': 'example.com',\n            },\n            'pathParameters': {\n                'proxy': 'return/request/url'\n            },\n            'httpMethod': 'GET',\n            'stageVariables': {},\n            'path': '/return/request/url'\n        }\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['statusCode'], 200)\n        self.assertEqual(\n            response['body'],\n            'https://example.com/return/request/url'\n        )\n\n    def test_wsgi_script_name_on_test_request(self):\n        \"\"\"\n        Ensure that requests sent by the \"Send test request\" button behaves\n        sensibly\n        \"\"\"\n        lh = LambdaHandler('tests.test_wsgi_script_name_settings')\n\n        event = {\n            'body': '',\n            'resource': '/{proxy+}',\n            'requestContext': {},\n            'queryStringParameters': {},\n            'headers': {},\n            'pathParameters': {\n                'proxy': 'return/request/url'\n            },\n            'httpMethod': 'GET',\n            'stageVariables': {},\n            'path': '/return/request/url'\n        }\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['statusCode'], 200)\n        self.assertEqual(\n            response['body'],\n            'https://zappa:80/return/request/url'\n        )\n\n    def test_exception_handler_on_web_request(self):\n        \"\"\"\n        Ensure that app exceptions triggered by web requests use the exception_handler.\n        \"\"\"\n        lh = LambdaHandler('tests.test_exception_handler_settings')\n\n        event = {\n            'body': '',\n            'resource': '/{proxy+}',\n            'requestContext': {},\n            'queryStringParameters': {},\n            'headers': {\n                'Host': '1234567890.execute-api.us-east-1.amazonaws.com',\n            },\n            'pathParameters': {\n                'proxy': 'return/request/url'\n            },\n            'httpMethod': 'GET',\n            'stageVariables': {},\n            'path': '/return/request/url'\n        }\n\n        mocked_exception_handler.assert_not_called()\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['statusCode'], 500)\n        mocked_exception_handler.assert_called()\n\n\n    def test_wsgi_script_on_cognito_event_request(self):\n        \"\"\"\n        Ensure that requests sent by cognito behave sensibly\n        \"\"\"\n        lh = LambdaHandler('tests.test_wsgi_script_name_settings')\n\n        event = {'version': '1',\n                 'region': 'eu-west-1',\n                 'userPoolId': 'region_poolID',\n                 'userName': 'uuu-id-here',\n                 'callerContext': {'awsSdkVersion': 'aws-sdk-js-2.149.0',\n                                   'clientId': 'client-id-here'},\n                 'triggerSource': 'PreSignUp_SignUp',\n                 'request': {'userAttributes':\n                                 {'email': 'email@example.com'}, 'validationData': None},\n                 'response': {'autoConfirmUser': False,\n                              'autoVerifyEmail': False,\n                              'autoVerifyPhone': False}}\n\n        response = lh.handler(event, None)\n\n        self.assertEqual(response['response']['autoConfirmUser'], False)\n\n    def test_bot_triggered_event(self):\n        \"\"\"\n        Ensure that bot triggered events are handled as in the settings\n        \"\"\"\n        lh = LambdaHandler('tests.test_bot_handler_being_triggered')\n        # from : https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-lex\n        event = {\n            \"messageVersion\": \"1.0\",\n            \"invocationSource\": \"DialogCodeHook\",\n            \"userId\": \"user-id specified in the POST request to Amazon Lex.\",\n            \"sessionAttributes\": {\n                \"key1\": \"value1\",\n                \"key2\": \"value2\",\n            },\n            \"bot\": {\n                \"name\": \"bot-name\",\n                \"alias\": \"bot-alias\",\n                \"version\": \"bot-version\"\n            },\n            \"outputDialogMode\": \"Text or Voice, based on ContentType request header in runtime API request\",\n            \"currentIntent\": {\n                \"name\": \"intent-name\",\n                \"slots\": {\n                    \"slot-name\": \"value\",\n                    \"slot-name\": \"value\",\n                    \"slot-name\": \"value\"\n                },\n                \"confirmationStatus\": \"None, Confirmed, or Denied (intent confirmation, if configured)\"\n            }\n        }\n\n        response = lh.handler(event, None)\n\n        self.assertEqual(response, 'Success')\n\n    def test_exception_in_bot_triggered_event(self):\n        \"\"\"\n        Ensure that bot triggered exceptions are handled as defined in the settings.\n        \"\"\"\n        lh = LambdaHandler('tests.test_bot_exception_handler_settings')\n        # from : https://docs.aws.amazon.com/lambda/latest/dg/eventsources.html#eventsources-lex\n        event = {\n            \"messageVersion\": \"1.0\",\n            \"invocationSource\": \"DialogCodeHook\",\n            \"userId\": \"user-id specified in the POST request to Amazon Lex.\",\n            \"sessionAttributes\": {\n                \"key1\": \"value1\",\n                \"key2\": \"value2\",\n            },\n            \"bot\": {\n                \"name\": \"bot-name\",\n                \"alias\": \"bot-alias\",\n                \"version\": \"bot-version\"\n            },\n            \"outputDialogMode\": \"Text or Voice, based on ContentType request header in runtime API request\",\n            \"currentIntent\": {\n                \"name\": \"intent-name\",\n                \"slots\": {\n                    \"slot-name\": \"value\",\n                    \"slot-name\": \"value\",\n                    \"slot-name\": \"value\"\n                },\n                \"confirmationStatus\": \"None, Confirmed, or Denied (intent confirmation, if configured)\"\n            }\n        }\n\n        response = lh.lambda_handler(event, None)\n        mocked_exception_handler.assert_called\n", "description": "Serverless Python", "file_name": "test_handler.py", "id": "1315d668957ca7a60f83652b83d482c0", "language": "Python", "project_name": "Zappa", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/Miserlou-Zappa/Miserlou-Zappa-2a31b61/tests/test_handler.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:49:18Z", "url": "https://github.com/Miserlou/Zappa", "wiki": true}