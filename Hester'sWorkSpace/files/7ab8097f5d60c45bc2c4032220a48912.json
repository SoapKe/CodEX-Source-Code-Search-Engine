{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.stock.tests import common2\n\n\nclass TestMrpCommon(common2.TestStockCommon):\n\n    @classmethod\n    def generate_mo(self, tracking_final='none', tracking_base_1='none', tracking_base_2='none', qty_final=5, qty_base_1=4, qty_base_2=1):\n        \n        product_to_build = self.env['product.product'].create({\n            'name': 'Young Tom',\n            'type': 'product',\n            'tracking': tracking_final,\n        })\n        product_to_use_1 = self.env['product.product'].create({\n            'name': 'Botox',\n            'type': 'product',\n            'tracking': tracking_base_1,\n        })\n        product_to_use_2 = self.env['product.product'].create({\n            'name': 'Old Tom',\n            'type': 'product',\n            'tracking': tracking_base_2,\n        })\n        bom_1 = self.env['mrp.bom'].create({\n            'product_id': product_to_build.id,\n            'product_tmpl_id': product_to_build.product_tmpl_id.id,\n            'product_uom_id': self.uom_unit.id,\n            'product_qty': 1.0,\n            'type': 'normal',\n            'bom_line_ids': [\n                (0, 0, {'product_id': product_to_use_2.id, 'product_qty': qty_base_2}),\n                (0, 0, {'product_id': product_to_use_1.id, 'product_qty': qty_base_1})\n            ]})\n        mo = self.env['mrp.production'].create({\n            'name': 'MO 1',\n            'product_id': product_to_build.id,\n            'product_uom_id': product_to_build.uom_id.id,\n            'product_qty': qty_final,\n            'bom_id': bom_1.id,\n        })\n        return mo, bom_1, product_to_build, product_to_use_1, product_to_use_2\n\n    @classmethod\n    def setUpClass(cls):\n        super(TestMrpCommon, cls).setUpClass()\n\n        \n        user_group_mrp_user = cls.env.ref('mrp.group_mrp_user')\n        user_group_mrp_manager = cls.env.ref('mrp.group_mrp_manager')\n\n        \n        (cls.product_2 | cls.product_3 | cls.product_4 | cls.product_5 | cls.product_6 | cls.product_7 | cls.product_8).write({\n            'type': 'product',\n        })\n\n        \n        Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n        cls.user_mrp_user = Users.create({\n            'name': 'Hilda Ferachwal',\n            'login': 'hilda',\n            'email': 'h.h@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [user_group_mrp_user.id])]})\n        cls.user_mrp_manager = Users.create({\n            'name': 'Gary Youngwomen',\n            'login': 'gary',\n            'email': 'g.g@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [user_group_mrp_manager.id])]})\n\n        cls.workcenter_1 = cls.env['mrp.workcenter'].create({\n            'name': 'Nuclear Workcenter',\n            'capacity': 2,\n            'time_start': 10,\n            'time_stop': 5,\n            'time_efficiency': 80,\n        })\n        cls.routing_1 = cls.env['mrp.routing'].create({\n            'name': 'Simple Line',\n        })\n        cls.routing_2 = cls.env['mrp.routing'].create({\n            'name': 'Complicated Line',\n        })\n        cls.operation_1 = cls.env['mrp.routing.workcenter'].create({\n            'name': 'Gift Wrap Maching',\n            'workcenter_id': cls.workcenter_1.id,\n            'routing_id': cls.routing_1.id,\n            'time_cycle': 15,\n            'sequence': 1,\n        })\n        cls.operation_2 = cls.env['mrp.routing.workcenter'].create({\n            'name': 'Cutting Machine',\n            'workcenter_id': cls.workcenter_1.id,\n            'routing_id': cls.routing_2.id,\n            'time_cycle': 12,\n            'sequence': 1,\n        })\n        cls.operation_3 = cls.env['mrp.routing.workcenter'].create({\n            'name': 'Weld Machine',\n            'workcenter_id': cls.workcenter_1.id,\n            'routing_id': cls.routing_2.id,\n            'time_cycle': 18,\n            'sequence': 2,\n        })\n\n        cls.bom_1 = cls.env['mrp.bom'].create({\n            'product_id': cls.product_4.id,\n            'product_tmpl_id': cls.product_4.product_tmpl_id.id,\n            'product_uom_id': cls.uom_unit.id,\n            'product_qty': 4.0,\n            'routing_id': cls.routing_2.id,\n            'type': 'normal',\n            'bom_line_ids': [\n                (0, 0, {'product_id': cls.product_2.id, 'product_qty': 2}),\n                (0, 0, {'product_id': cls.product_1.id, 'product_qty': 4})\n            ]})\n        cls.bom_2 = cls.env['mrp.bom'].create({\n            'product_id': cls.product_5.id,\n            'product_tmpl_id': cls.product_5.product_tmpl_id.id,\n            'product_uom_id': cls.product_5.uom_id.id,\n            'product_qty': 1.0,\n            'routing_id': cls.routing_1.id,\n            'type': 'phantom',\n            'sequence': 2,\n            'bom_line_ids': [\n                (0, 0, {'product_id': cls.product_4.id, 'product_qty': 2}),\n                (0, 0, {'product_id': cls.product_3.id, 'product_qty': 3})\n            ]})\n        cls.bom_3 = cls.env['mrp.bom'].create({\n            'product_id': cls.product_6.id,\n            'product_tmpl_id': cls.product_6.product_tmpl_id.id,\n            'product_uom_id': cls.uom_dozen.id,\n            'product_qty': 2.0,\n            'routing_id': cls.routing_2.id,\n            'type': 'normal',\n            'bom_line_ids': [\n                (0, 0, {'product_id': cls.product_5.id, 'product_qty': 2}),\n                (0, 0, {'product_id': cls.product_4.id, 'product_qty': 8}),\n                (0, 0, {'product_id': cls.product_2.id, 'product_qty': 12})\n            ]})\n", "comments": "    this function generate manufacturing order one final         product two consumed product  arguments allows choose         tracking qty different products  it returns         mo  used bom tree products                     coding  utf 8        fetch mrp related user groups    update demo products    user data  mrp user mrp manager ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.stock.tests import common2\n\n\nclass TestMrpCommon(common2.TestStockCommon):\n\n    @classmethod\n    def generate_mo(self, tracking_final='none', tracking_base_1='none', tracking_base_2='none', qty_final=5, qty_base_1=4, qty_base_2=1):\n        \"\"\" This function generate a manufacturing order with one final\n        product and two consumed product. Arguments allows to choose\n        the tracking/qty for each different products. It returns the\n        MO, used bom and the tree products.\n        \"\"\"\n        product_to_build = self.env['product.product'].create({\n            'name': 'Young Tom',\n            'type': 'product',\n            'tracking': tracking_final,\n        })\n        product_to_use_1 = self.env['product.product'].create({\n            'name': 'Botox',\n            'type': 'product',\n            'tracking': tracking_base_1,\n        })\n        product_to_use_2 = self.env['product.product'].create({\n            'name': 'Old Tom',\n            'type': 'product',\n            'tracking': tracking_base_2,\n        })\n        bom_1 = self.env['mrp.bom'].create({\n            'product_id': product_to_build.id,\n            'product_tmpl_id': product_to_build.product_tmpl_id.id,\n            'product_uom_id': self.uom_unit.id,\n            'product_qty': 1.0,\n            'type': 'normal',\n            'bom_line_ids': [\n                (0, 0, {'product_id': product_to_use_2.id, 'product_qty': qty_base_2}),\n                (0, 0, {'product_id': product_to_use_1.id, 'product_qty': qty_base_1})\n            ]})\n        mo = self.env['mrp.production'].create({\n            'name': 'MO 1',\n            'product_id': product_to_build.id,\n            'product_uom_id': product_to_build.uom_id.id,\n            'product_qty': qty_final,\n            'bom_id': bom_1.id,\n        })\n        return mo, bom_1, product_to_build, product_to_use_1, product_to_use_2\n\n    @classmethod\n    def setUpClass(cls):\n        super(TestMrpCommon, cls).setUpClass()\n\n        # Fetch mrp-related user groups\n        user_group_mrp_user = cls.env.ref('mrp.group_mrp_user')\n        user_group_mrp_manager = cls.env.ref('mrp.group_mrp_manager')\n\n        # Update demo products\n        (cls.product_2 | cls.product_3 | cls.product_4 | cls.product_5 | cls.product_6 | cls.product_7 | cls.product_8).write({\n            'type': 'product',\n        })\n\n        # User Data: mrp user and mrp manager\n        Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n        cls.user_mrp_user = Users.create({\n            'name': 'Hilda Ferachwal',\n            'login': 'hilda',\n            'email': 'h.h@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [user_group_mrp_user.id])]})\n        cls.user_mrp_manager = Users.create({\n            'name': 'Gary Youngwomen',\n            'login': 'gary',\n            'email': 'g.g@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [user_group_mrp_manager.id])]})\n\n        cls.workcenter_1 = cls.env['mrp.workcenter'].create({\n            'name': 'Nuclear Workcenter',\n            'capacity': 2,\n            'time_start': 10,\n            'time_stop': 5,\n            'time_efficiency': 80,\n        })\n        cls.routing_1 = cls.env['mrp.routing'].create({\n            'name': 'Simple Line',\n        })\n        cls.routing_2 = cls.env['mrp.routing'].create({\n            'name': 'Complicated Line',\n        })\n        cls.operation_1 = cls.env['mrp.routing.workcenter'].create({\n            'name': 'Gift Wrap Maching',\n            'workcenter_id': cls.workcenter_1.id,\n            'routing_id': cls.routing_1.id,\n            'time_cycle': 15,\n            'sequence': 1,\n        })\n        cls.operation_2 = cls.env['mrp.routing.workcenter'].create({\n            'name': 'Cutting Machine',\n            'workcenter_id': cls.workcenter_1.id,\n            'routing_id': cls.routing_2.id,\n            'time_cycle': 12,\n            'sequence': 1,\n        })\n        cls.operation_3 = cls.env['mrp.routing.workcenter'].create({\n            'name': 'Weld Machine',\n            'workcenter_id': cls.workcenter_1.id,\n            'routing_id': cls.routing_2.id,\n            'time_cycle': 18,\n            'sequence': 2,\n        })\n\n        cls.bom_1 = cls.env['mrp.bom'].create({\n            'product_id': cls.product_4.id,\n            'product_tmpl_id': cls.product_4.product_tmpl_id.id,\n            'product_uom_id': cls.uom_unit.id,\n            'product_qty': 4.0,\n            'routing_id': cls.routing_2.id,\n            'type': 'normal',\n            'bom_line_ids': [\n                (0, 0, {'product_id': cls.product_2.id, 'product_qty': 2}),\n                (0, 0, {'product_id': cls.product_1.id, 'product_qty': 4})\n            ]})\n        cls.bom_2 = cls.env['mrp.bom'].create({\n            'product_id': cls.product_5.id,\n            'product_tmpl_id': cls.product_5.product_tmpl_id.id,\n            'product_uom_id': cls.product_5.uom_id.id,\n            'product_qty': 1.0,\n            'routing_id': cls.routing_1.id,\n            'type': 'phantom',\n            'sequence': 2,\n            'bom_line_ids': [\n                (0, 0, {'product_id': cls.product_4.id, 'product_qty': 2}),\n                (0, 0, {'product_id': cls.product_3.id, 'product_qty': 3})\n            ]})\n        cls.bom_3 = cls.env['mrp.bom'].create({\n            'product_id': cls.product_6.id,\n            'product_tmpl_id': cls.product_6.product_tmpl_id.id,\n            'product_uom_id': cls.uom_dozen.id,\n            'product_qty': 2.0,\n            'routing_id': cls.routing_2.id,\n            'type': 'normal',\n            'bom_line_ids': [\n                (0, 0, {'product_id': cls.product_5.id, 'product_qty': 2}),\n                (0, 0, {'product_id': cls.product_4.id, 'product_qty': 8}),\n                (0, 0, {'product_id': cls.product_2.id, 'product_qty': 12})\n            ]})\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "common.py", "id": "7ab8097f5d60c45bc2c4032220a48912", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp/tests/common.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}