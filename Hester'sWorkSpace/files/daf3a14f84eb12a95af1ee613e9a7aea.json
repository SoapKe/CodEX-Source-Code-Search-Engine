{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import models, fields, api, _\nfrom odoo.exceptions import ValidationError\n\nclass AccountJournal(models.Model):\n    _inherit = \"account.journal\"\n\n    @api.one\n    @api.depends('outbound_payment_method_ids')\n    def _compute_check_printing_payment_method_selected(self):\n        self.check_printing_payment_method_selected = any(pm.code == 'check_printing' for pm in self.outbound_payment_method_ids)\n\n    @api.one\n    @api.depends('check_manual_sequencing')\n    def _get_check_next_number(self):\n        if self.check_sequence_id:\n            self.check_next_number = self.check_sequence_id.number_next_actual\n        else:\n            self.check_next_number = 1\n\n    @api.one\n    def _set_check_next_number(self):\n        if self.check_next_number < self.check_sequence_id.number_next_actual:\n            raise ValidationError(_(\"The last check number was %s. In order to avoid a check being rejected \"\n                \"by the bank, you can only use a greater number.\") % self.check_sequence_id.number_next_actual)\n        if self.check_sequence_id:\n            self.check_sequence_id.sudo().number_next_actual = self.check_next_number\n\n    check_manual_sequencing = fields.Boolean('Manual Numbering', default=False,\n        help=\"Check this option if your pre-printed checks are not numbered.\")\n    check_sequence_id = fields.Many2one('ir.sequence', 'Check Sequence', readonly=True, copy=False,\n        help=\"Checks numbering sequence.\")\n    check_next_number = fields.Integer('Next Check Number', compute='_get_check_next_number', inverse='_set_check_next_number',\n        help=\"Sequence number of the next printed check.\")\n    check_printing_payment_method_selected = fields.Boolean(compute='_compute_check_printing_payment_method_selected',\n        help=\"Technical feature used to know whether check printing was enabled as payment method.\")\n\n    @api.model\n    def create(self, vals):\n        rec = super(AccountJournal, self).create(vals)\n        if not rec.check_sequence_id:\n            rec._create_check_sequence()\n        return rec\n\n    @api.one\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        rec = super(AccountJournal, self).copy(default)\n        rec._create_check_sequence()\n        return rec\n\n    @api.one\n    def _create_check_sequence(self):\n        \"\"\" Create a check sequence for the journal \"\"\"\n        self.check_sequence_id = self.env['ir.sequence'].sudo().create({\n            'name': self.name + _(\" : Check Number Sequence\"),\n            'implementation': 'no_gap',\n            'padding': 5,\n            'number_increment': 1,\n            'company_id': self.company_id.id,\n        })\n\n    def _default_outbound_payment_methods(self):\n        methods = super(AccountJournal, self)._default_outbound_payment_methods()\n        return methods + self.env.ref('account_check_printing.account_payment_method_check')\n\n    @api.model\n    def _enable_check_printing_on_bank_journals(self):\n        \"\"\" Enables check printing payment method and add a check sequence on bank journals.\n            Called upon module installation via data file.\n        \"\"\"\n        check_printing = self.env.ref('account_check_printing.account_payment_method_check')\n        bank_journals = self.search([('type', '=', 'bank')])\n        for bank_journal in bank_journals:\n            bank_journal._create_check_sequence()\n            bank_journal.write({\n                'outbound_payment_method_ids': [(4, check_printing.id, None)],\n            })\n\n    @api.multi\n    def get_journal_dashboard_datas(self):\n        domain_checks_to_print = [\n            ('journal_id', '=', self.id),\n            ('payment_method_id.code', '=', 'check_printing'),\n            ('state', '=', 'posted')\n        ]\n        return dict(\n            super(AccountJournal, self).get_journal_dashboard_datas(),\n            num_checks_to_print=len(self.env['account.payment'].search(domain_checks_to_print))\n        )\n\n    @api.multi\n    def action_checks_to_print(self):\n        return {\n            'name': _('Checks to Print'),\n            'type': 'ir.actions.act_window',\n            'view_mode': 'list,form,graph',\n            'res_model': 'account.payment',\n            'context': dict(\n                self.env.context,\n                search_default_checks_to_send=1,\n                journal_id=self.id,\n                default_journal_id=self.id,\n                default_payment_type='outbound',\n                default_payment_method_id=self.env.ref('account_check_printing.account_payment_method_check').id,\n            ),\n        }\n", "comments": "    create check sequence journal             self check sequence id   self env  ir sequence   sudo() create(               name   self name    (    check number sequence )               implementation    gap                padding   5               number increment   1               company id   self company id id           )      def  default outbound payment methods(self)          methods   super(accountjournal  self)  default outbound payment methods()         return methods   self env ref( account check printing account payment method check )       api model     def  enable check printing bank journals(self)              enables check printing payment method add check sequence bank journals              called upon module installation via data file                     coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import models, fields, api, _\nfrom odoo.exceptions import ValidationError\n\nclass AccountJournal(models.Model):\n    _inherit = \"account.journal\"\n\n    @api.one\n    @api.depends('outbound_payment_method_ids')\n    def _compute_check_printing_payment_method_selected(self):\n        self.check_printing_payment_method_selected = any(pm.code == 'check_printing' for pm in self.outbound_payment_method_ids)\n\n    @api.one\n    @api.depends('check_manual_sequencing')\n    def _get_check_next_number(self):\n        if self.check_sequence_id:\n            self.check_next_number = self.check_sequence_id.number_next_actual\n        else:\n            self.check_next_number = 1\n\n    @api.one\n    def _set_check_next_number(self):\n        if self.check_next_number < self.check_sequence_id.number_next_actual:\n            raise ValidationError(_(\"The last check number was %s. In order to avoid a check being rejected \"\n                \"by the bank, you can only use a greater number.\") % self.check_sequence_id.number_next_actual)\n        if self.check_sequence_id:\n            self.check_sequence_id.sudo().number_next_actual = self.check_next_number\n\n    check_manual_sequencing = fields.Boolean('Manual Numbering', default=False,\n        help=\"Check this option if your pre-printed checks are not numbered.\")\n    check_sequence_id = fields.Many2one('ir.sequence', 'Check Sequence', readonly=True, copy=False,\n        help=\"Checks numbering sequence.\")\n    check_next_number = fields.Integer('Next Check Number', compute='_get_check_next_number', inverse='_set_check_next_number',\n        help=\"Sequence number of the next printed check.\")\n    check_printing_payment_method_selected = fields.Boolean(compute='_compute_check_printing_payment_method_selected',\n        help=\"Technical feature used to know whether check printing was enabled as payment method.\")\n\n    @api.model\n    def create(self, vals):\n        rec = super(AccountJournal, self).create(vals)\n        if not rec.check_sequence_id:\n            rec._create_check_sequence()\n        return rec\n\n    @api.one\n    @api.returns('self', lambda value: value.id)\n    def copy(self, default=None):\n        rec = super(AccountJournal, self).copy(default)\n        rec._create_check_sequence()\n        return rec\n\n    @api.one\n    def _create_check_sequence(self):\n        \"\"\" Create a check sequence for the journal \"\"\"\n        self.check_sequence_id = self.env['ir.sequence'].sudo().create({\n            'name': self.name + _(\" : Check Number Sequence\"),\n            'implementation': 'no_gap',\n            'padding': 5,\n            'number_increment': 1,\n            'company_id': self.company_id.id,\n        })\n\n    def _default_outbound_payment_methods(self):\n        methods = super(AccountJournal, self)._default_outbound_payment_methods()\n        return methods + self.env.ref('account_check_printing.account_payment_method_check')\n\n    @api.model\n    def _enable_check_printing_on_bank_journals(self):\n        \"\"\" Enables check printing payment method and add a check sequence on bank journals.\n            Called upon module installation via data file.\n        \"\"\"\n        check_printing = self.env.ref('account_check_printing.account_payment_method_check')\n        bank_journals = self.search([('type', '=', 'bank')])\n        for bank_journal in bank_journals:\n            bank_journal._create_check_sequence()\n            bank_journal.write({\n                'outbound_payment_method_ids': [(4, check_printing.id, None)],\n            })\n\n    @api.multi\n    def get_journal_dashboard_datas(self):\n        domain_checks_to_print = [\n            ('journal_id', '=', self.id),\n            ('payment_method_id.code', '=', 'check_printing'),\n            ('state', '=', 'posted')\n        ]\n        return dict(\n            super(AccountJournal, self).get_journal_dashboard_datas(),\n            num_checks_to_print=len(self.env['account.payment'].search(domain_checks_to_print))\n        )\n\n    @api.multi\n    def action_checks_to_print(self):\n        return {\n            'name': _('Checks to Print'),\n            'type': 'ir.actions.act_window',\n            'view_mode': 'list,form,graph',\n            'res_model': 'account.payment',\n            'context': dict(\n                self.env.context,\n                search_default_checks_to_send=1,\n                journal_id=self.id,\n                default_journal_id=self.id,\n                default_payment_type='outbound',\n                default_payment_method_id=self.env.ref('account_check_printing.account_payment_method_check').id,\n            ),\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "account_journal.py", "id": "daf3a14f84eb12a95af1ee613e9a7aea", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account_check_printing/models/account_journal.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}