{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass TriluliluIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|m)\\.)?trilulilu\\.ro/(?:[^/]+/)?(?P<id>[^/\n    _TESTS = [{\n        'url': 'http://www.trilulilu.ro/big-buck-bunny-1',\n        'md5': '68da087b676a6196a413549212f60cc6',\n        'info_dict': {\n            'id': 'ae2899e124140b',\n            'ext': 'mp4',\n            'title': 'Big Buck Bunny',\n            'description': ':) pentru copilul din noi',\n            'uploader_id': 'chipy',\n            'upload_date': '20120304',\n            'timestamp': 1330830647,\n            'uploader': 'chipy',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n    }, {\n        'url': 'http://www.trilulilu.ro/adena-ft-morreti-inocenta',\n        'md5': '929dfb8729dc71750463af88bbbbf4a4',\n        'info_dict': {\n            'id': 'f299710e3c91c5',\n            'ext': 'mp4',\n            'title': 'Adena ft. Morreti - Inocenta',\n            'description': 'pop music',\n            'uploader_id': 'VEVOmixt',\n            'upload_date': '20151204',\n            'uploader': 'VEVOmixt',\n            'timestamp': 1449187937,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        media_info = self._download_json('http://m.trilulilu.ro/%s?format=json' % display_id, display_id)\n\n        age_limit = 0\n        errors = media_info.get('errors', {})\n        if errors.get('friends'):\n            raise ExtractorError('This video is private.', expected=True)\n        elif errors.get('geoblock'):\n            raise ExtractorError('This video is not available in your country.', expected=True)\n        elif errors.get('xxx_unlogged'):\n            age_limit = 18\n\n        media_class = media_info.get('class')\n        if media_class not in ('video', 'audio'):\n            raise ExtractorError('not a video or an audio')\n\n        user = media_info.get('user', {})\n\n        thumbnail = media_info.get('cover_url')\n        if thumbnail:\n            thumbnail.format(width='1600', height='1200')\n\n        \n        stream_type = media_info.get('stream_type')\n        formats = [{\n            'url': media_info['href'],\n            'ext': stream_type,\n        }]\n        if media_info.get('is_hd'):\n            formats.append({\n                'format_id': 'hd',\n                'url': media_info['hrefhd'],\n                'ext': stream_type,\n            })\n        if media_class == 'audio':\n            formats[0]['vcodec'] = 'none'\n        else:\n            formats[0]['format_id'] = 'sd'\n\n        return {\n            'id': media_info['identifier'].split('|')[1],\n            'display_id': display_id,\n            'formats': formats,\n            'title': media_info['title'],\n            'description': media_info.get('description'),\n            'thumbnail': thumbnail,\n            'uploader_id': user.get('username'),\n            'uploader': user.get('fullname'),\n            'timestamp': parse_iso8601(media_info.get('published'), ' '),\n            'duration': int_or_none(media_info.get('duration')),\n            'view_count': int_or_none(media_info.get('count_views')),\n            'like_count': int_or_none(media_info.get('count_likes')),\n            'comment_count': int_or_none(media_info.get('count_comments')),\n            'age_limit': age_limit,\n        }\n", "comments": "# coding: utf-8\n#\\?]+)'\n# TODO: get correct ext for audio files\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass TriluliluIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|m)\\.)?trilulilu\\.ro/(?:[^/]+/)?(?P<id>[^/#\\?]+)'\n    _TESTS = [{\n        'url': 'http://www.trilulilu.ro/big-buck-bunny-1',\n        'md5': '68da087b676a6196a413549212f60cc6',\n        'info_dict': {\n            'id': 'ae2899e124140b',\n            'ext': 'mp4',\n            'title': 'Big Buck Bunny',\n            'description': ':) pentru copilul din noi',\n            'uploader_id': 'chipy',\n            'upload_date': '20120304',\n            'timestamp': 1330830647,\n            'uploader': 'chipy',\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n    }, {\n        'url': 'http://www.trilulilu.ro/adena-ft-morreti-inocenta',\n        'md5': '929dfb8729dc71750463af88bbbbf4a4',\n        'info_dict': {\n            'id': 'f299710e3c91c5',\n            'ext': 'mp4',\n            'title': 'Adena ft. Morreti - Inocenta',\n            'description': 'pop music',\n            'uploader_id': 'VEVOmixt',\n            'upload_date': '20151204',\n            'uploader': 'VEVOmixt',\n            'timestamp': 1449187937,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        media_info = self._download_json('http://m.trilulilu.ro/%s?format=json' % display_id, display_id)\n\n        age_limit = 0\n        errors = media_info.get('errors', {})\n        if errors.get('friends'):\n            raise ExtractorError('This video is private.', expected=True)\n        elif errors.get('geoblock'):\n            raise ExtractorError('This video is not available in your country.', expected=True)\n        elif errors.get('xxx_unlogged'):\n            age_limit = 18\n\n        media_class = media_info.get('class')\n        if media_class not in ('video', 'audio'):\n            raise ExtractorError('not a video or an audio')\n\n        user = media_info.get('user', {})\n\n        thumbnail = media_info.get('cover_url')\n        if thumbnail:\n            thumbnail.format(width='1600', height='1200')\n\n        # TODO: get correct ext for audio files\n        stream_type = media_info.get('stream_type')\n        formats = [{\n            'url': media_info['href'],\n            'ext': stream_type,\n        }]\n        if media_info.get('is_hd'):\n            formats.append({\n                'format_id': 'hd',\n                'url': media_info['hrefhd'],\n                'ext': stream_type,\n            })\n        if media_class == 'audio':\n            formats[0]['vcodec'] = 'none'\n        else:\n            formats[0]['format_id'] = 'sd'\n\n        return {\n            'id': media_info['identifier'].split('|')[1],\n            'display_id': display_id,\n            'formats': formats,\n            'title': media_info['title'],\n            'description': media_info.get('description'),\n            'thumbnail': thumbnail,\n            'uploader_id': user.get('username'),\n            'uploader': user.get('fullname'),\n            'timestamp': parse_iso8601(media_info.get('published'), ' '),\n            'duration': int_or_none(media_info.get('duration')),\n            'view_count': int_or_none(media_info.get('count_views')),\n            'like_count': int_or_none(media_info.get('count_likes')),\n            'comment_count': int_or_none(media_info.get('count_comments')),\n            'age_limit': age_limit,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "trilulilu.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/trilulilu.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}