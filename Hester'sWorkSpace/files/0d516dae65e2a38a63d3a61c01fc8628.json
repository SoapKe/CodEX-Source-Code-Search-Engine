{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.addons.project.tests.test_project_base import TestProjectBase\nfrom odoo.exceptions import AccessError\nfrom odoo.tools import mute_logger\n\n\nclass TestPortalProjectBase(TestProjectBase):\n\n    def setUp(self):\n        super(TestPortalProjectBase, self).setUp()\n        self.user_noone = self.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True}).create({\n            'name': 'Noemie NoOne',\n            'login': 'noemie',\n            'email': 'n.n@example.com',\n            'signature': '--\\nNoemie',\n            'notification_type': 'email',\n            'groups_id': [(6, 0, [])]})\n\n        self.task_3 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({\n            'name': 'Test3', 'user_id': self.user_portal.id, 'project_id': self.project_pigs.id})\n        self.task_4 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({\n            'name': 'Test4', 'user_id': self.user_public.id, 'project_id': self.project_pigs.id})\n        self.task_5 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({\n            'name': 'Test5', 'user_id': False, 'project_id': self.project_pigs.id})\n        self.task_6 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({\n            'name': 'Test5', 'user_id': False, 'project_id': self.project_pigs.id})\n\n\nclass TestPortalProject(TestPortalProjectBase):\n\n    @mute_logger('odoo.addons.base.ir.ir_model')\n    def test_employee_project_access_rights(self):\n        pigs = self.project_pigs\n\n        pigs.write({'privacy_visibility': 'employees'})\n        # Do: Alfred reads project -> ok (employee ok employee)\n        pigs.sudo(self.user_projectuser).read(['user_id'])\n        \n        tasks = self.env['project.task'].sudo(self.user_projectuser).search([('project_id', '=', pigs.id)])\n        test_task_ids = set([self.task_1.id, self.task_2.id, self.task_3.id, self.task_4.id, self.task_5.id, self.task_6.id])\n        self.assertEqual(set(tasks.ids), test_task_ids,\n                        'access rights: project user cannot see all tasks of an employees project')\n        \n        self.assertRaises(AccessError, pigs.sudo(self.user_noone).read, ['user_id'])\n        # Do: Donovan reads project -> ko (public ko employee)\n        self.assertRaises(AccessError, pigs.sudo(self.user_public).read, ['user_id'])\n        \n        tmp_task = self.env['project.task'].sudo(self.user_projectuser).with_context({'mail_create_nolog': True}).create({\n            'name': 'Pigs task',\n            'project_id': pigs.id})\n        tmp_task.sudo(self.user_projectuser).unlink()\n\n    @mute_logger('odoo.addons.base.ir.ir_model')\n    def test_favorite_project_access_rights(self):\n        pigs = self.project_pigs.sudo(self.user_projectuser)\n\n        \n        self.assertRaises(AccessError, pigs.write, {'name': 'False Pigs'})\n        \n        pigs.write({'is_favorite': True})\n\n    @mute_logger('odoo.addons.base.ir.ir_model')\n    def test_followers_project_access_rights(self):\n        pigs = self.project_pigs\n        pigs.write({'privacy_visibility': 'followers'})\n\n        # Do: Alfred reads project -> ko (employee ko followers)\n        self.assertRaises(AccessError, pigs.sudo(self.user_projectuser).read, ['user_id'])\n        \n        tasks = self.env['project.task'].sudo(self.user_projectuser).search([('project_id', '=', pigs.id)])\n        self.assertEqual(tasks, self.task_1,\n                         'access rights: employee user should not see tasks of a not-followed followers project, only assigned')\n\n        \n        self.assertRaises(AccessError, pigs.sudo(self.user_noone).read, ['user_id'])\n\n        # Do: Donovan reads project -> ko (public ko employee)\n        self.assertRaises(AccessError, pigs.sudo(self.user_public).read, ['user_id'])\n\n        pigs.message_subscribe_users(user_ids=[self.user_projectuser.id])\n\n        # Do: Alfred reads project -> ok (follower ok followers)\n        prout = pigs.sudo(self.user_projectuser)\n        prout.invalidate_cache()\n        prout.read(['user_id'])\n\n        # Do: Donovan reads project -> ko (public ko follower even if follower)\n        self.assertRaises(AccessError, pigs.sudo(self.user_public).read, ['user_id'])\n        \n        self.env['project.task'].sudo(self.user_projectuser.id).with_context({'mail_create_nolog': True}).create({\n            'name': 'Pigs task', 'project_id': pigs.id\n        })\n        \n        pigs.sudo(self.user_projectuser).message_unsubscribe_users(user_ids=[self.user_projectuser.id])\n        self.assertRaises(AccessError, self.env['project.task'].sudo(self.user_projectuser).with_context({\n            'mail_create_nolog': True}).create, {'name': 'Pigs task', 'project_id': pigs.id})\n\n        \n        self.assertRaises(AccessError, self.env['project.task'].sudo(self.user_projectuser).with_context({\n            'mail_create_nolog': True}).create, {'name': 'Pigs task', 'project_id': pigs.id})\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     do  alfred reads project    ok (employee ok employee)    test  project tasks visible    do  bert reads project    crash  group    do  donovan reads project    ko (public ko employee)    do  project user employee create task    write project name    write favorite    do  alfred reads project    ko (employee ko followers)    test  project task visible    do  bert reads project    crash  group    do  donovan reads project    ko (public ko employee)    do  alfred reads project    ok (follower ok followers)    do  donovan reads project    ko (public ko follower even follower)    do  project user follower project create task    follower user able create task    do  project user create task without project ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.addons.project.tests.test_project_base import TestProjectBase\nfrom odoo.exceptions import AccessError\nfrom odoo.tools import mute_logger\n\n\nclass TestPortalProjectBase(TestProjectBase):\n\n    def setUp(self):\n        super(TestPortalProjectBase, self).setUp()\n        self.user_noone = self.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True}).create({\n            'name': 'Noemie NoOne',\n            'login': 'noemie',\n            'email': 'n.n@example.com',\n            'signature': '--\\nNoemie',\n            'notification_type': 'email',\n            'groups_id': [(6, 0, [])]})\n\n        self.task_3 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({\n            'name': 'Test3', 'user_id': self.user_portal.id, 'project_id': self.project_pigs.id})\n        self.task_4 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({\n            'name': 'Test4', 'user_id': self.user_public.id, 'project_id': self.project_pigs.id})\n        self.task_5 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({\n            'name': 'Test5', 'user_id': False, 'project_id': self.project_pigs.id})\n        self.task_6 = self.env['project.task'].with_context({'mail_create_nolog': True}).create({\n            'name': 'Test5', 'user_id': False, 'project_id': self.project_pigs.id})\n\n\nclass TestPortalProject(TestPortalProjectBase):\n\n    @mute_logger('odoo.addons.base.ir.ir_model')\n    def test_employee_project_access_rights(self):\n        pigs = self.project_pigs\n\n        pigs.write({'privacy_visibility': 'employees'})\n        # Do: Alfred reads project -> ok (employee ok employee)\n        pigs.sudo(self.user_projectuser).read(['user_id'])\n        # Test: all project tasks visible\n        tasks = self.env['project.task'].sudo(self.user_projectuser).search([('project_id', '=', pigs.id)])\n        test_task_ids = set([self.task_1.id, self.task_2.id, self.task_3.id, self.task_4.id, self.task_5.id, self.task_6.id])\n        self.assertEqual(set(tasks.ids), test_task_ids,\n                        'access rights: project user cannot see all tasks of an employees project')\n        # Do: Bert reads project -> crash, no group\n        self.assertRaises(AccessError, pigs.sudo(self.user_noone).read, ['user_id'])\n        # Do: Donovan reads project -> ko (public ko employee)\n        self.assertRaises(AccessError, pigs.sudo(self.user_public).read, ['user_id'])\n        # Do: project user is employee and can create a task\n        tmp_task = self.env['project.task'].sudo(self.user_projectuser).with_context({'mail_create_nolog': True}).create({\n            'name': 'Pigs task',\n            'project_id': pigs.id})\n        tmp_task.sudo(self.user_projectuser).unlink()\n\n    @mute_logger('odoo.addons.base.ir.ir_model')\n    def test_favorite_project_access_rights(self):\n        pigs = self.project_pigs.sudo(self.user_projectuser)\n\n        # we can't write on project name\n        self.assertRaises(AccessError, pigs.write, {'name': 'False Pigs'})\n        # we can write on is_favorite\n        pigs.write({'is_favorite': True})\n\n    @mute_logger('odoo.addons.base.ir.ir_model')\n    def test_followers_project_access_rights(self):\n        pigs = self.project_pigs\n        pigs.write({'privacy_visibility': 'followers'})\n\n        # Do: Alfred reads project -> ko (employee ko followers)\n        self.assertRaises(AccessError, pigs.sudo(self.user_projectuser).read, ['user_id'])\n        # Test: no project task visible\n        tasks = self.env['project.task'].sudo(self.user_projectuser).search([('project_id', '=', pigs.id)])\n        self.assertEqual(tasks, self.task_1,\n                         'access rights: employee user should not see tasks of a not-followed followers project, only assigned')\n\n        # Do: Bert reads project -> crash, no group\n        self.assertRaises(AccessError, pigs.sudo(self.user_noone).read, ['user_id'])\n\n        # Do: Donovan reads project -> ko (public ko employee)\n        self.assertRaises(AccessError, pigs.sudo(self.user_public).read, ['user_id'])\n\n        pigs.message_subscribe_users(user_ids=[self.user_projectuser.id])\n\n        # Do: Alfred reads project -> ok (follower ok followers)\n        prout = pigs.sudo(self.user_projectuser)\n        prout.invalidate_cache()\n        prout.read(['user_id'])\n\n        # Do: Donovan reads project -> ko (public ko follower even if follower)\n        self.assertRaises(AccessError, pigs.sudo(self.user_public).read, ['user_id'])\n        # Do: project user is follower of the project and can create a task\n        self.env['project.task'].sudo(self.user_projectuser.id).with_context({'mail_create_nolog': True}).create({\n            'name': 'Pigs task', 'project_id': pigs.id\n        })\n        # not follower user should not be able to create a task\n        pigs.sudo(self.user_projectuser).message_unsubscribe_users(user_ids=[self.user_projectuser.id])\n        self.assertRaises(AccessError, self.env['project.task'].sudo(self.user_projectuser).with_context({\n            'mail_create_nolog': True}).create, {'name': 'Pigs task', 'project_id': pigs.id})\n\n        # Do: project user can create a task without project\n        self.assertRaises(AccessError, self.env['project.task'].sudo(self.user_projectuser).with_context({\n            'mail_create_nolog': True}).create, {'name': 'Pigs task', 'project_id': pigs.id})\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_access_rights.py", "id": "0d516dae65e2a38a63d3a61c01fc8628", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/project/tests/test_access_rights.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}