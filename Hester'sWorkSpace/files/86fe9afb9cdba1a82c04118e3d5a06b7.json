{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport base64\nimport logging\n\nfrom odoo import api, fields, models\nfrom odoo import tools, _\nfrom odoo.exceptions import ValidationError, AccessError\nfrom odoo.modules.module import get_module_resource\n\n_logger = logging.getLogger(__name__)\n\n\nclass EmployeeCategory(models.Model):\n\n    _name = \"hr.employee.category\"\n    _description = \"Employee Category\"\n\n    name = fields.Char(string=\"Employee Tag\", required=True)\n    color = fields.Integer(string='Color Index')\n    employee_ids = fields.Many2many('hr.employee', 'employee_category_rel', 'category_id', 'emp_id', string='Employees')\n\n    _sql_constraints = [\n        ('name_uniq', 'unique (name)', \"Tag name already exists !\"),\n    ]\n\n\nclass Job(models.Model):\n\n    _name = \"hr.job\"\n    _description = \"Job Position\"\n    _inherit = ['mail.thread']\n\n    name = fields.Char(string='Job Position', required=True, index=True, translate=True)\n    expected_employees = fields.Integer(compute='_compute_employees', string='Total Forecasted Employees', store=True,\n        help='Expected number of employees for this job position after new recruitment.')\n    no_of_employee = fields.Integer(compute='_compute_employees', string=\"Current Number of Employees\", store=True,\n        help='Number of employees currently occupying this job position.')\n    no_of_recruitment = fields.Integer(string='Expected New Employees', copy=False,\n        help='Number of new employees you expect to recruit.', default=1)\n    no_of_hired_employee = fields.Integer(string='Hired Employees', copy=False,\n        help='Number of hired employees for this job position during recruitment phase.')\n    employee_ids = fields.One2many('hr.employee', 'job_id', string='Employees', groups='base.group_user')\n    description = fields.Text(string='Job Description')\n    requirements = fields.Text('Requirements')\n    department_id = fields.Many2one('hr.department', string='Department')\n    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.user.company_id)\n    state = fields.Selection([\n        ('recruit', 'Recruitment in Progress'),\n        ('open', 'Not Recruiting')\n    ], string='Status', readonly=True, required=True, track_visibility='always', copy=False, default='recruit', help=\"Set whether the recruitment process is open or closed for this job position.\")\n\n    _sql_constraints = [\n        ('name_company_uniq', 'unique(name, company_id, department_id)', 'The name of the job position must be unique per department in company!'),\n    ]\n\n    @api.depends('no_of_recruitment', 'employee_ids.job_id', 'employee_ids.active')\n    def _compute_employees(self):\n        employee_data = self.env['hr.employee'].read_group([('job_id', 'in', self.ids)], ['job_id'], ['job_id'])\n        result = dict((data['job_id'][0], data['job_id_count']) for data in employee_data)\n        for job in self:\n            job.no_of_employee = result.get(job.id, 0)\n            job.expected_employees = result.get(job.id, 0) + job.no_of_recruitment\n\n    @api.model\n    def create(self, values):\n        \"\"\" We don't want the current user to be follower of all created job \"\"\"\n        return super(Job, self.with_context(mail_create_nosubscribe=True)).create(values)\n\n    @api.multi\n    def copy(self, default=None):\n        self.ensure_one()\n        default = dict(default or {})\n        if 'name' not in default:\n            default['name'] = _(\"%s (copy)\") % (self.name)\n        return super(Job, self).copy(default=default)\n\n    @api.multi\n    def set_recruit(self):\n        for record in self:\n            no_of_recruitment = 1 if record.no_of_recruitment == 0 else record.no_of_recruitment\n            record.write({'state': 'recruit', 'no_of_recruitment': no_of_recruitment})\n        return True\n\n    @api.multi\n    def set_open(self):\n        return self.write({\n            'state': 'open',\n            'no_of_recruitment': 0,\n            'no_of_hired_employee': 0\n        })\n\n\nclass Employee(models.Model):\n    _name = \"hr.employee\"\n    _description = \"Employee\"\n    _order = 'name'\n    _inherit = ['mail.thread', 'resource.mixin']\n\n    _mail_post_access = 'read'\n\n    @api.model\n    def _default_image(self):\n        image_path = get_module_resource('hr', 'static/src/img', 'default_image.png')\n        return tools.image_resize_image_big(base64.b64encode(open(image_path, 'rb').read()))\n\n    \n    \n    name = fields.Char(related='resource_id.name', store=True, oldname='name_related')\n    user_id = fields.Many2one('res.users', 'User', related='resource_id.user_id')\n    active = fields.Boolean('Active', related='resource_id.active', default=True, store=True)\n    \n    address_home_id = fields.Many2one(\n        'res.partner', 'Private Address', help='Enter here the private address of the employee, not the one linked to your company.',\n        groups=\"hr.group_hr_user\")\n    is_address_home_a_company = fields.Boolean(\n        'The employee adress has a company linked',\n        compute='_compute_is_address_home_a_company',\n    )\n    country_id = fields.Many2one(\n        'res.country', 'Nationality (Country)', groups=\"hr.group_hr_user\")\n    gender = fields.Selection([\n        ('male', 'Male'),\n        ('female', 'Female'),\n        ('other', 'Other')\n    ], groups=\"hr.group_hr_user\", default=\"male\")\n    marital = fields.Selection([\n        ('single', 'Single'),\n        ('married', 'Married'),\n        ('cohabitant', 'Legal Cohabitant'),\n        ('widower', 'Widower'),\n        ('divorced', 'Divorced')\n    ], string='Marital Status', groups=\"hr.group_hr_user\", default='single')\n    birthday = fields.Date('Date of Birth', groups=\"hr.group_hr_user\")\n    ssnid = fields.Char('SSN No', help='Social Security Number', groups=\"hr.group_hr_user\")\n    sinid = fields.Char('SIN No', help='Social Insurance Number', groups=\"hr.group_hr_user\")\n    identification_id = fields.Char(string='Identification No', groups=\"hr.group_hr_user\")\n    passport_id = fields.Char('Passport No', groups=\"hr.group_hr_user\")\n    bank_account_id = fields.Many2one(\n        'res.partner.bank', 'Bank Account Number',\n        domain=\"[('partner_id', '=', address_home_id)]\",\n        groups=\"hr.group_hr_user\",\n        help='Employee bank salary account')\n    permit_no = fields.Char('Work Permit No', groups=\"hr.group_hr_user\")\n    visa_no = fields.Char('Visa No', groups=\"hr.group_hr_user\")\n    visa_expire = fields.Date('Visa Expire Date', groups=\"hr.group_hr_user\")\n\n    \n    image = fields.Binary(\n        \"Photo\", default=_default_image, attachment=True,\n        help=\"This field holds the image used as photo for the employee, limited to 1024x1024px.\")\n    image_medium = fields.Binary(\n        \"Medium-sized photo\", attachment=True,\n        help=\"Medium-sized photo of the employee. It is automatically \"\n             \"resized as a 128x128px image, with aspect ratio preserved. \"\n             \"Use this field in form views or some kanban views.\")\n    image_small = fields.Binary(\n        \"Small-sized photo\", attachment=True,\n        help=\"Small-sized photo of the employee. It is automatically \"\n             \"resized as a 64x64px image, with aspect ratio preserved. \"\n             \"Use this field anywhere a small image is required.\")\n    \n    address_id = fields.Many2one(\n        'res.partner', 'Work Address')\n    work_phone = fields.Char('Work Phone')\n    mobile_phone = fields.Char('Work Mobile')\n    work_email = fields.Char('Work Email')\n    work_location = fields.Char('Work Location')\n    \n    job_id = fields.Many2one('hr.job', 'Job Position')\n    department_id = fields.Many2one('hr.department', 'Department')\n    parent_id = fields.Many2one('hr.employee', 'Manager')\n    child_ids = fields.One2many('hr.employee', 'parent_id', string='Subordinates')\n    coach_id = fields.Many2one('hr.employee', 'Coach')\n    category_ids = fields.Many2many(\n        'hr.employee.category', 'employee_category_rel',\n        'emp_id', 'category_id',\n        string='Tags')\n    \n    notes = fields.Text('Notes')\n    color = fields.Integer('Color Index', default=0)\n\n    @api.constrains('parent_id')\n    def _check_parent_id(self):\n        for employee in self:\n            if not employee._check_recursion():\n                raise ValidationError(_('Error! You cannot create recursive hierarchy of Employee(s).'))\n\n    @api.onchange('address_id')\n    def _onchange_address(self):\n        self.work_phone = self.address_id.phone\n        self.mobile_phone = self.address_id.mobile\n\n    @api.onchange('company_id')\n    def _onchange_company(self):\n        address = self.company_id.partner_id.address_get(['default'])\n        self.address_id = address['default'] if address else False\n\n    @api.onchange('department_id')\n    def _onchange_department(self):\n        self.parent_id = self.department_id.manager_id\n\n    @api.onchange('user_id')\n    def _onchange_user(self):\n        if self.user_id:\n            self.update(self._sync_user(self.user_id))\n\n    def _sync_user(self, user):\n        return dict(\n            name=user.name,\n            image=user.image,\n            work_email=user.email,\n        )\n\n    @api.model\n    def create(self, vals):\n        if vals.get('user_id'):\n            vals.update(self._sync_user(self.env['res.users'].browse(vals['user_id'])))\n        tools.image_resize_images(vals)\n        return super(Employee, self).create(vals)\n\n    @api.multi\n    def write(self, vals):\n        if 'address_home_id' in vals:\n            account_id = vals.get('bank_account_id') or self.bank_account_id.id\n            if account_id:\n                self.env['res.partner.bank'].browse(account_id).partner_id = vals['address_home_id']\n        tools.image_resize_images(vals)\n        return super(Employee, self).write(vals)\n\n    @api.multi\n    def unlink(self):\n        resources = self.mapped('resource_id')\n        super(Employee, self).unlink()\n        return resources.unlink()\n\n    @api.multi\n    def action_follow(self):\n        \"\"\" Wrapper because message_subscribe_users take a user_ids=None\n            that receive the context without the wrapper.\n        \"\"\"\n        return self.message_subscribe_users()\n\n    @api.multi\n    def action_unfollow(self):\n        \"\"\" Wrapper because message_unsubscribe_users take a user_ids=None\n            that receive the context without the wrapper.\n        \"\"\"\n        return self.message_unsubscribe_users()\n\n    @api.model\n    def _message_get_auto_subscribe_fields(self, updated_fields, auto_follow_fields=None):\n        \"\"\" Overwrite of the original method to always follow user_id field,\n            even when not track_visibility so that a user will follow it's employee\n        \"\"\"\n        if auto_follow_fields is None:\n            auto_follow_fields = ['user_id']\n        user_field_lst = []\n        for name, field in self._fields.items():\n            if name in auto_follow_fields and name in updated_fields and field.comodel_name == 'res.users':\n                user_field_lst.append(name)\n        return user_field_lst\n\n    @api.multi\n    def _message_auto_subscribe_notify(self, partner_ids):\n        \n        return\n\n    @api.depends('address_home_id.parent_id')\n    def _compute_is_address_home_a_company(self):\n        \"\"\"Checks that choosen address (res.partner) is not linked to a company.\n        \"\"\"\n        for employee in self:\n            try:\n                employee.is_address_home_a_company = employee.address_home_id.parent_id.id is not False\n            except AccessError:\n                employee.is_address_home_a_company = False\n\n\nclass Department(models.Model):\n    _name = \"hr.department\"\n    _description = \"HR Department\"\n    _inherit = ['mail.thread']\n    _order = \"name\"\n    _rec_name = 'complete_name'\n\n    name = fields.Char('Department Name', required=True)\n    complete_name = fields.Char('Complete Name', compute='_compute_complete_name', store=True)\n    active = fields.Boolean('Active', default=True)\n    company_id = fields.Many2one('res.company', string='Company', index=True, default=lambda self: self.env.user.company_id)\n    parent_id = fields.Many2one('hr.department', string='Parent Department', index=True)\n    child_ids = fields.One2many('hr.department', 'parent_id', string='Child Departments')\n    manager_id = fields.Many2one('hr.employee', string='Manager', track_visibility='onchange')\n    member_ids = fields.One2many('hr.employee', 'department_id', string='Members', readonly=True)\n    jobs_ids = fields.One2many('hr.job', 'department_id', string='Jobs')\n    note = fields.Text('Note')\n    color = fields.Integer('Color Index')\n\n    @api.depends('name', 'parent_id.complete_name')\n    def _compute_complete_name(self):\n        for department in self:\n            if department.parent_id:\n                department.complete_name = '%s / %s' % (department.parent_id.complete_name, department.name)\n            else:\n                department.complete_name = department.name\n\n    @api.constrains('parent_id')\n    def _check_parent_id(self):\n        if not self._check_recursion():\n            raise ValidationError(_('Error! You cannot create recursive departments.'))\n\n    @api.model\n    def create(self, vals):\n        \n        # the tracking allows to track+subscribe fields linked to a res.user record\n        \n        department = super(Department, self.with_context(mail_create_nosubscribe=True)).create(vals)\n        manager = self.env['hr.employee'].browse(vals.get(\"manager_id\"))\n        if manager.user_id:\n            department.message_subscribe_users(user_ids=manager.user_id.ids)\n        return department\n\n    @api.multi\n    def write(self, vals):\n        \"\"\" If updating manager of a department, we need to update all the employees\n            of department hierarchy, and subscribe the new manager.\n        \"\"\"\n        \n        # the tracking allows to track+subscribe fields linked to a res.user record\n        \n        if 'manager_id' in vals:\n            manager_id = vals.get(\"manager_id\")\n            if manager_id:\n                manager = self.env['hr.employee'].browse(manager_id)\n                \n                if manager.user_id:\n                    self.message_subscribe_users(user_ids=manager.user_id.ids)\n            \n            self._update_employee_manager(manager_id)\n        return super(Department, self).write(vals)\n\n    def _update_employee_manager(self, manager_id):\n        employees = self.env['hr.employee']\n        for department in self:\n            employees = employees | self.env['hr.employee'].search([\n                ('id', '!=', manager_id),\n                ('department_id', '=', department.id),\n                ('parent_id', '=', department.manager_id.id)\n            ])\n        employees.write({'parent_id': manager_id})\n", "comments": "    we want current user follower created job             return super(job  self context(mail create nosubscribe true)) create(values)       api multi     def copy(self  default none)          self ensure one()         default   dict(default   )          name  default              default  name      (  (copy) )   (self name)         return super(job  self) copy(default default)       api multi     def set recruit(self)          record self              recruitment   1 record recruitment    0 else record recruitment             record write(  state    recruit    recruitment   recruitment )         return true       api multi     def set open(self)          return self write(               state    open                recruitment   0               hired employee   0          )   class employee(models model)       name    hr employee       description    employee       order    name       inherit     mail thread    resource mixin         mail post access    read        api model     def  default image(self)          image path   get module resource( hr    static src img    default image png )         return tools image resize image big(base64 b64encode(open(image path   rb ) read()))        resource user       required resource  make sure required  true  set view     name   fields char(related  resource id name   store true  oldname  name related )     user id   fields many2one( res users    user   related  resource id user id )     active   fields boolean( active   related  resource id active   default true  store true)       private partner     address home id   fields many2one(          res partner    private address   help  enter private address employee  one linked company            groups  hr group hr user )     address home company   fields boolean(          the employee adress company linked           compute   compute address home company       )     country id   fields many2one(          res country    nationality (country)   groups  hr group hr user )     gender   fields selection(          ( male    male )          ( female    female )          (    other )        groups  hr group hr user   default  male )     marital   fields selection(          ( single    single )          ( married    married )          ( cohabitant    legal cohabitant )          ( widower    widower )          ( divorced    divorced )        string  marital status   groups  hr group hr user   default  single )     birthday   fields date( date birth   groups  hr group hr user )     ssnid   fields char( ssn no   help  social security number   groups  hr group hr user )     sinid   fields char( sin no   help  social insurance number   groups  hr group hr user )     identification id   fields char(string  identification no   groups  hr group hr user )     passport id   fields char( passport no   groups  hr group hr user )     bank account id   fields many2one(          res partner bank    bank account number           domain   ( partner id        address home id)            groups  hr group hr user           help  employee bank salary account )     permit   fields char( work permit no   groups  hr group hr user )     visa   fields char( visa no   groups  hr group hr user )     visa expire   fields date( visa expire date   groups  hr group hr user )        image  image fields base64 encoded pil supported     image   fields binary(          photo   default  default image  attachment true          help  this field holds image used photo employee  limited 1024x1024px  )     image medium   fields binary(          medium sized photo   attachment true          help  medium sized photo employee  it automatically                 resized 128x128px image  aspect ratio preserved                  use field form views kanban views  )     image small   fields binary(          small sized photo   attachment true          help  small sized photo employee  it automatically                 resized 64x64px image  aspect ratio preserved                  use field anywhere small image required  )       work     address id   fields many2one(          res partner    work address )     work phone   fields char( work phone )     mobile phone   fields char( work mobile )     work email   fields char( work email )     work location   fields char( work location )       employee company     job id   fields many2one( hr job    job position )     department id   fields many2one( hr department    department )     parent id   fields many2one( hr employee    manager )     child ids   fields one2many( hr employee    parent id   string  subordinates )     coach id   fields many2one( hr employee    coach )     category ids   fields many2many(          hr employee category    employee category rel            emp id    category id           string  tags )       misc     notes   fields text( notes )     color   fields integer( color index   default 0)       api constrains( parent id )     def  check parent id(self)          employee self              employee  check recursion()                  raise validationerror( ( error  you cannot create recursive hierarchy employee(s)  ))       api onchange( address id )     def  onchange address(self)          self work phone   self address id phone         self mobile phone   self address id mobile       api onchange( company id )     def  onchange company(self)          address   self company id partner id address get(  default  )         self address id   address  default   address else false       api onchange( department id )     def  onchange department(self)          self parent id   self department id manager id       api onchange( user id )     def  onchange user(self)          self user id              self update(self  sync user(self user id))      def  sync user(self  user)          return dict(             name user name              image user image              work email user email          )       api model     def create(self  vals)          vals get( user id )              vals update(self  sync user(self env  res users   browse(vals  user id  )))         tools image resize images(vals)         return super(employee  self) create(vals)       api multi     def write(self  vals)           address home id  vals              account id   vals get( bank account id ) self bank account id id             account id                  self env  res partner bank   browse(account id) partner id   vals  address home id           tools image resize images(vals)         return super(employee  self) write(vals)       api multi     def unlink(self)          resources   self mapped( resource id )         super(employee  self) unlink()         return resources unlink()       api multi     def action follow(self)              wrapper message subscribe users take user ids none             receive context without wrapper                      return self message subscribe users()       api multi     def action unfollow(self)              wrapper message unsubscribe users take user ids none             receive context without wrapper                      return self message unsubscribe users()       api model     def  message get auto subscribe fields(self  updated fields  auto follow fields none)              overwrite original method always follow user id field              even track visibility user follow employee                     auto follow fields none              auto follow fields     user id           user field lst              name  field self  fields items()              name auto follow fields name updated fields field comodel name     res users                   user field lst append(name)         return user field lst       api multi     def  message auto subscribe notify(self  partner ids)            do notify user marked follower employee          return       api depends( address home id parent id )     def  compute address home company(self)             checks choosen address (res partner) linked company                      employee self              try                  employee address home company   employee address home id parent id id false             except accesserror                  employee address home company   false   class department(models model)       name    hr department       description    hr department       inherit     mail thread        order    name       rec name    complete name       name   fields char( department name   required true)     complete name   fields char( complete name   compute   compute complete name   store true)     active   fields boolean( active   default true)     company id   fields many2one( res company   string  company   index true  default lambda self  self env user company id)     parent id   fields many2one( hr department   string  parent department   index true)     child ids   fields one2many( hr department    parent id   string  child departments )     manager id   fields many2one( hr employee   string  manager   track visibility  onchange )     member ids   fields one2many( hr employee    department id   string  members   readonly true)     jobs ids   fields one2many( hr job    department id   string  jobs )     note   fields text( note )     color   fields integer( color index )       api depends( name    parent id complete name )     def  compute complete name(self)          department self              department parent id                  department complete name           (department parent id complete name  department name)             else                  department complete name   department name       api constrains( parent id )     def  check parent id(self)          self  check recursion()              raise validationerror( ( error  you cannot create recursive departments  ))       api model     def create(self  vals)            tde note  auto subscription manager done hand  currently           tracking allows track subscribe fields linked res user record           an update limited behavior come  currently done          department   super(department  self context(mail create nosubscribe true)) create(vals)         manager   self env  hr employee   browse(vals get( manager id ))         manager user id              department message subscribe users(user ids manager user id ids)         return department       api multi     def write(self  vals)              if updating manager department  need update employees             department hierarchy  subscribe new manager                     coding  utf 8        part odoo  see license file full copyright licensing details     resource user    required resource  make sure required  true  set view    private partner    image  image fields base64 encoded pil supported    work    employee company    misc    do notify user marked follower employee     tde note  auto subscription manager done hand  currently    tracking allows track subscribe fields linked res user record    an update limited behavior come  currently done     tde note  auto subscription manager done hand  currently    tracking allows track subscribe fields linked res user record    an update limited behavior come  currently done     subscribe manager user    set employees parent new manager ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nimport base64\nimport logging\n\nfrom odoo import api, fields, models\nfrom odoo import tools, _\nfrom odoo.exceptions import ValidationError, AccessError\nfrom odoo.modules.module import get_module_resource\n\n_logger = logging.getLogger(__name__)\n\n\nclass EmployeeCategory(models.Model):\n\n    _name = \"hr.employee.category\"\n    _description = \"Employee Category\"\n\n    name = fields.Char(string=\"Employee Tag\", required=True)\n    color = fields.Integer(string='Color Index')\n    employee_ids = fields.Many2many('hr.employee', 'employee_category_rel', 'category_id', 'emp_id', string='Employees')\n\n    _sql_constraints = [\n        ('name_uniq', 'unique (name)', \"Tag name already exists !\"),\n    ]\n\n\nclass Job(models.Model):\n\n    _name = \"hr.job\"\n    _description = \"Job Position\"\n    _inherit = ['mail.thread']\n\n    name = fields.Char(string='Job Position', required=True, index=True, translate=True)\n    expected_employees = fields.Integer(compute='_compute_employees', string='Total Forecasted Employees', store=True,\n        help='Expected number of employees for this job position after new recruitment.')\n    no_of_employee = fields.Integer(compute='_compute_employees', string=\"Current Number of Employees\", store=True,\n        help='Number of employees currently occupying this job position.')\n    no_of_recruitment = fields.Integer(string='Expected New Employees', copy=False,\n        help='Number of new employees you expect to recruit.', default=1)\n    no_of_hired_employee = fields.Integer(string='Hired Employees', copy=False,\n        help='Number of hired employees for this job position during recruitment phase.')\n    employee_ids = fields.One2many('hr.employee', 'job_id', string='Employees', groups='base.group_user')\n    description = fields.Text(string='Job Description')\n    requirements = fields.Text('Requirements')\n    department_id = fields.Many2one('hr.department', string='Department')\n    company_id = fields.Many2one('res.company', string='Company', default=lambda self: self.env.user.company_id)\n    state = fields.Selection([\n        ('recruit', 'Recruitment in Progress'),\n        ('open', 'Not Recruiting')\n    ], string='Status', readonly=True, required=True, track_visibility='always', copy=False, default='recruit', help=\"Set whether the recruitment process is open or closed for this job position.\")\n\n    _sql_constraints = [\n        ('name_company_uniq', 'unique(name, company_id, department_id)', 'The name of the job position must be unique per department in company!'),\n    ]\n\n    @api.depends('no_of_recruitment', 'employee_ids.job_id', 'employee_ids.active')\n    def _compute_employees(self):\n        employee_data = self.env['hr.employee'].read_group([('job_id', 'in', self.ids)], ['job_id'], ['job_id'])\n        result = dict((data['job_id'][0], data['job_id_count']) for data in employee_data)\n        for job in self:\n            job.no_of_employee = result.get(job.id, 0)\n            job.expected_employees = result.get(job.id, 0) + job.no_of_recruitment\n\n    @api.model\n    def create(self, values):\n        \"\"\" We don't want the current user to be follower of all created job \"\"\"\n        return super(Job, self.with_context(mail_create_nosubscribe=True)).create(values)\n\n    @api.multi\n    def copy(self, default=None):\n        self.ensure_one()\n        default = dict(default or {})\n        if 'name' not in default:\n            default['name'] = _(\"%s (copy)\") % (self.name)\n        return super(Job, self).copy(default=default)\n\n    @api.multi\n    def set_recruit(self):\n        for record in self:\n            no_of_recruitment = 1 if record.no_of_recruitment == 0 else record.no_of_recruitment\n            record.write({'state': 'recruit', 'no_of_recruitment': no_of_recruitment})\n        return True\n\n    @api.multi\n    def set_open(self):\n        return self.write({\n            'state': 'open',\n            'no_of_recruitment': 0,\n            'no_of_hired_employee': 0\n        })\n\n\nclass Employee(models.Model):\n    _name = \"hr.employee\"\n    _description = \"Employee\"\n    _order = 'name'\n    _inherit = ['mail.thread', 'resource.mixin']\n\n    _mail_post_access = 'read'\n\n    @api.model\n    def _default_image(self):\n        image_path = get_module_resource('hr', 'static/src/img', 'default_image.png')\n        return tools.image_resize_image_big(base64.b64encode(open(image_path, 'rb').read()))\n\n    # resource and user\n    # required on the resource, make sure required=\"True\" set in the view\n    name = fields.Char(related='resource_id.name', store=True, oldname='name_related')\n    user_id = fields.Many2one('res.users', 'User', related='resource_id.user_id')\n    active = fields.Boolean('Active', related='resource_id.active', default=True, store=True)\n    # private partner\n    address_home_id = fields.Many2one(\n        'res.partner', 'Private Address', help='Enter here the private address of the employee, not the one linked to your company.',\n        groups=\"hr.group_hr_user\")\n    is_address_home_a_company = fields.Boolean(\n        'The employee adress has a company linked',\n        compute='_compute_is_address_home_a_company',\n    )\n    country_id = fields.Many2one(\n        'res.country', 'Nationality (Country)', groups=\"hr.group_hr_user\")\n    gender = fields.Selection([\n        ('male', 'Male'),\n        ('female', 'Female'),\n        ('other', 'Other')\n    ], groups=\"hr.group_hr_user\", default=\"male\")\n    marital = fields.Selection([\n        ('single', 'Single'),\n        ('married', 'Married'),\n        ('cohabitant', 'Legal Cohabitant'),\n        ('widower', 'Widower'),\n        ('divorced', 'Divorced')\n    ], string='Marital Status', groups=\"hr.group_hr_user\", default='single')\n    birthday = fields.Date('Date of Birth', groups=\"hr.group_hr_user\")\n    ssnid = fields.Char('SSN No', help='Social Security Number', groups=\"hr.group_hr_user\")\n    sinid = fields.Char('SIN No', help='Social Insurance Number', groups=\"hr.group_hr_user\")\n    identification_id = fields.Char(string='Identification No', groups=\"hr.group_hr_user\")\n    passport_id = fields.Char('Passport No', groups=\"hr.group_hr_user\")\n    bank_account_id = fields.Many2one(\n        'res.partner.bank', 'Bank Account Number',\n        domain=\"[('partner_id', '=', address_home_id)]\",\n        groups=\"hr.group_hr_user\",\n        help='Employee bank salary account')\n    permit_no = fields.Char('Work Permit No', groups=\"hr.group_hr_user\")\n    visa_no = fields.Char('Visa No', groups=\"hr.group_hr_user\")\n    visa_expire = fields.Date('Visa Expire Date', groups=\"hr.group_hr_user\")\n\n    # image: all image fields are base64 encoded and PIL-supported\n    image = fields.Binary(\n        \"Photo\", default=_default_image, attachment=True,\n        help=\"This field holds the image used as photo for the employee, limited to 1024x1024px.\")\n    image_medium = fields.Binary(\n        \"Medium-sized photo\", attachment=True,\n        help=\"Medium-sized photo of the employee. It is automatically \"\n             \"resized as a 128x128px image, with aspect ratio preserved. \"\n             \"Use this field in form views or some kanban views.\")\n    image_small = fields.Binary(\n        \"Small-sized photo\", attachment=True,\n        help=\"Small-sized photo of the employee. It is automatically \"\n             \"resized as a 64x64px image, with aspect ratio preserved. \"\n             \"Use this field anywhere a small image is required.\")\n    # work\n    address_id = fields.Many2one(\n        'res.partner', 'Work Address')\n    work_phone = fields.Char('Work Phone')\n    mobile_phone = fields.Char('Work Mobile')\n    work_email = fields.Char('Work Email')\n    work_location = fields.Char('Work Location')\n    # employee in company\n    job_id = fields.Many2one('hr.job', 'Job Position')\n    department_id = fields.Many2one('hr.department', 'Department')\n    parent_id = fields.Many2one('hr.employee', 'Manager')\n    child_ids = fields.One2many('hr.employee', 'parent_id', string='Subordinates')\n    coach_id = fields.Many2one('hr.employee', 'Coach')\n    category_ids = fields.Many2many(\n        'hr.employee.category', 'employee_category_rel',\n        'emp_id', 'category_id',\n        string='Tags')\n    # misc\n    notes = fields.Text('Notes')\n    color = fields.Integer('Color Index', default=0)\n\n    @api.constrains('parent_id')\n    def _check_parent_id(self):\n        for employee in self:\n            if not employee._check_recursion():\n                raise ValidationError(_('Error! You cannot create recursive hierarchy of Employee(s).'))\n\n    @api.onchange('address_id')\n    def _onchange_address(self):\n        self.work_phone = self.address_id.phone\n        self.mobile_phone = self.address_id.mobile\n\n    @api.onchange('company_id')\n    def _onchange_company(self):\n        address = self.company_id.partner_id.address_get(['default'])\n        self.address_id = address['default'] if address else False\n\n    @api.onchange('department_id')\n    def _onchange_department(self):\n        self.parent_id = self.department_id.manager_id\n\n    @api.onchange('user_id')\n    def _onchange_user(self):\n        if self.user_id:\n            self.update(self._sync_user(self.user_id))\n\n    def _sync_user(self, user):\n        return dict(\n            name=user.name,\n            image=user.image,\n            work_email=user.email,\n        )\n\n    @api.model\n    def create(self, vals):\n        if vals.get('user_id'):\n            vals.update(self._sync_user(self.env['res.users'].browse(vals['user_id'])))\n        tools.image_resize_images(vals)\n        return super(Employee, self).create(vals)\n\n    @api.multi\n    def write(self, vals):\n        if 'address_home_id' in vals:\n            account_id = vals.get('bank_account_id') or self.bank_account_id.id\n            if account_id:\n                self.env['res.partner.bank'].browse(account_id).partner_id = vals['address_home_id']\n        tools.image_resize_images(vals)\n        return super(Employee, self).write(vals)\n\n    @api.multi\n    def unlink(self):\n        resources = self.mapped('resource_id')\n        super(Employee, self).unlink()\n        return resources.unlink()\n\n    @api.multi\n    def action_follow(self):\n        \"\"\" Wrapper because message_subscribe_users take a user_ids=None\n            that receive the context without the wrapper.\n        \"\"\"\n        return self.message_subscribe_users()\n\n    @api.multi\n    def action_unfollow(self):\n        \"\"\" Wrapper because message_unsubscribe_users take a user_ids=None\n            that receive the context without the wrapper.\n        \"\"\"\n        return self.message_unsubscribe_users()\n\n    @api.model\n    def _message_get_auto_subscribe_fields(self, updated_fields, auto_follow_fields=None):\n        \"\"\" Overwrite of the original method to always follow user_id field,\n            even when not track_visibility so that a user will follow it's employee\n        \"\"\"\n        if auto_follow_fields is None:\n            auto_follow_fields = ['user_id']\n        user_field_lst = []\n        for name, field in self._fields.items():\n            if name in auto_follow_fields and name in updated_fields and field.comodel_name == 'res.users':\n                user_field_lst.append(name)\n        return user_field_lst\n\n    @api.multi\n    def _message_auto_subscribe_notify(self, partner_ids):\n        # Do not notify user it has been marked as follower of its employee.\n        return\n\n    @api.depends('address_home_id.parent_id')\n    def _compute_is_address_home_a_company(self):\n        \"\"\"Checks that choosen address (res.partner) is not linked to a company.\n        \"\"\"\n        for employee in self:\n            try:\n                employee.is_address_home_a_company = employee.address_home_id.parent_id.id is not False\n            except AccessError:\n                employee.is_address_home_a_company = False\n\n\nclass Department(models.Model):\n    _name = \"hr.department\"\n    _description = \"HR Department\"\n    _inherit = ['mail.thread']\n    _order = \"name\"\n    _rec_name = 'complete_name'\n\n    name = fields.Char('Department Name', required=True)\n    complete_name = fields.Char('Complete Name', compute='_compute_complete_name', store=True)\n    active = fields.Boolean('Active', default=True)\n    company_id = fields.Many2one('res.company', string='Company', index=True, default=lambda self: self.env.user.company_id)\n    parent_id = fields.Many2one('hr.department', string='Parent Department', index=True)\n    child_ids = fields.One2many('hr.department', 'parent_id', string='Child Departments')\n    manager_id = fields.Many2one('hr.employee', string='Manager', track_visibility='onchange')\n    member_ids = fields.One2many('hr.employee', 'department_id', string='Members', readonly=True)\n    jobs_ids = fields.One2many('hr.job', 'department_id', string='Jobs')\n    note = fields.Text('Note')\n    color = fields.Integer('Color Index')\n\n    @api.depends('name', 'parent_id.complete_name')\n    def _compute_complete_name(self):\n        for department in self:\n            if department.parent_id:\n                department.complete_name = '%s / %s' % (department.parent_id.complete_name, department.name)\n            else:\n                department.complete_name = department.name\n\n    @api.constrains('parent_id')\n    def _check_parent_id(self):\n        if not self._check_recursion():\n            raise ValidationError(_('Error! You cannot create recursive departments.'))\n\n    @api.model\n    def create(self, vals):\n        # TDE note: auto-subscription of manager done by hand, because currently\n        # the tracking allows to track+subscribe fields linked to a res.user record\n        # An update of the limited behavior should come, but not currently done.\n        department = super(Department, self.with_context(mail_create_nosubscribe=True)).create(vals)\n        manager = self.env['hr.employee'].browse(vals.get(\"manager_id\"))\n        if manager.user_id:\n            department.message_subscribe_users(user_ids=manager.user_id.ids)\n        return department\n\n    @api.multi\n    def write(self, vals):\n        \"\"\" If updating manager of a department, we need to update all the employees\n            of department hierarchy, and subscribe the new manager.\n        \"\"\"\n        # TDE note: auto-subscription of manager done by hand, because currently\n        # the tracking allows to track+subscribe fields linked to a res.user record\n        # An update of the limited behavior should come, but not currently done.\n        if 'manager_id' in vals:\n            manager_id = vals.get(\"manager_id\")\n            if manager_id:\n                manager = self.env['hr.employee'].browse(manager_id)\n                # subscribe the manager user\n                if manager.user_id:\n                    self.message_subscribe_users(user_ids=manager.user_id.ids)\n            # set the employees's parent to the new manager\n            self._update_employee_manager(manager_id)\n        return super(Department, self).write(vals)\n\n    def _update_employee_manager(self, manager_id):\n        employees = self.env['hr.employee']\n        for department in self:\n            employees = employees | self.env['hr.employee'].search([\n                ('id', '!=', manager_id),\n                ('department_id', '=', department.id),\n                ('parent_id', '=', department.manager_id.id)\n            ])\n        employees.write({'parent_id': manager_id})\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "hr.py", "id": "86fe9afb9cdba1a82c04118e3d5a06b7", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr/models/hr.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}