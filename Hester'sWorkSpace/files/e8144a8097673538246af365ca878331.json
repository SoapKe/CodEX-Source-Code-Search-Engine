{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass HGTVComShowIE(InfoExtractor):\n    IE_NAME = 'hgtv.com:show'\n    _VALID_URL = r'https?://(?:www\\.)?hgtv\\.com/shows/[^/]+/(?P<id>[^/?\n    _TESTS = [{\n        \n        'url': 'http://www.hgtv.com/shows/flip-or-flop/flip-or-flop-full-episodes-season-4-videos',\n        'info_dict': {\n            'id': 'flip-or-flop-full-episodes-season-4-videos',\n            'title': 'Flip or Flop Full Episodes',\n        },\n        'playlist_mincount': 15,\n    }, {\n        \n        'url': 'http://www.hgtv.com/shows/good-bones/episodes/an-old-victorian-house-gets-a-new-facelift',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        config = self._parse_json(\n            self._search_regex(\n                r'(?s)data-(?:deferred-)?module=[\"\\']video[\"\\'][^>]*>.*?<script[^>]+type=[\"\\']text/x-config[\"\\'][^>]*>(.+?)</script',\n                webpage, 'video config'),\n            display_id)['channels'][0]\n\n        entries = [\n            self.url_result(video['releaseUrl'])\n            for video in config['videos'] if video.get('releaseUrl')]\n\n        return self.playlist_result(\n            entries, display_id, config.get('title'), config.get('description'))\n", "comments": "# coding: utf-8\n#&]+)'\n# data-module=\"video\"\n# data-deferred-module=\"video\"\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\n\nclass HGTVComShowIE(InfoExtractor):\n    IE_NAME = 'hgtv.com:show'\n    _VALID_URL = r'https?://(?:www\\.)?hgtv\\.com/shows/[^/]+/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        # data-module=\"video\"\n        'url': 'http://www.hgtv.com/shows/flip-or-flop/flip-or-flop-full-episodes-season-4-videos',\n        'info_dict': {\n            'id': 'flip-or-flop-full-episodes-season-4-videos',\n            'title': 'Flip or Flop Full Episodes',\n        },\n        'playlist_mincount': 15,\n    }, {\n        # data-deferred-module=\"video\"\n        'url': 'http://www.hgtv.com/shows/good-bones/episodes/an-old-victorian-house-gets-a-new-facelift',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        config = self._parse_json(\n            self._search_regex(\n                r'(?s)data-(?:deferred-)?module=[\"\\']video[\"\\'][^>]*>.*?<script[^>]+type=[\"\\']text/x-config[\"\\'][^>]*>(.+?)</script',\n                webpage, 'video config'),\n            display_id)['channels'][0]\n\n        entries = [\n            self.url_result(video['releaseUrl'])\n            for video in config['videos'] if video.get('releaseUrl')]\n\n        return self.playlist_result(\n            entries, display_id, config.get('title'), config.get('description'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hgtv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hgtv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}