{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlencode,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    get_element_by_attribute,\n    mimetype2ext,\n)\n\n\nclass MetacafeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?metacafe\\.com/watch/(?P<video_id>[^/]+)/(?P<display_id>[^/?\n    _DISCLAIMER = 'http://www.metacafe.com/family_filter/'\n    _FILTER_POST = 'http://www.metacafe.com/f/index.php?inputType=filter&controllerGroup=user'\n    IE_NAME = 'metacafe'\n    _TESTS = [\n        \n        {\n            'add_ie': ['Youtube'],\n            'url': 'http://metacafe.com/watch/yt-_aUehQsCQtM/the_electric_company_short_i_pbs_kids_go/',\n            'info_dict': {\n                'id': '_aUehQsCQtM',\n                'ext': 'mp4',\n                'upload_date': '20090102',\n                'title': 'The Electric Company | \"Short I\" | PBS KIDS GO!',\n                'description': 'md5:2439a8ef6d5a70e380c22f5ad323e5a8',\n                'uploader': 'PBS',\n                'uploader_id': 'PBS'\n            }\n        },\n        \n        {\n            'url': 'http://www.metacafe.com/watch/11121940/news_stuff_you_wont_do_with_your_playstation_4/',\n            'md5': '6e0bca200eaad2552e6915ed6fd4d9ad',\n            'info_dict': {\n                'id': '11121940',\n                'ext': 'mp4',\n                'title': 'News: Stuff You Won\\'t Do with Your PlayStation 4',\n                'uploader': 'ign',\n                'description': 'Sony released a massive FAQ on the PlayStation Blog detailing the PS4\\'s capabilities and limitations.',\n            },\n            'skip': 'Page is temporarily unavailable.',\n        },\n        \n        {\n            'url': 'http://www.metacafe.com/watch/2155630/adult_art_by_david_hart_156/',\n            'md5': 'b06082c5079bbdcde677a6291fbdf376',\n            'info_dict': {\n                'id': '2155630',\n                'ext': 'mp4',\n                'title': 'Adult Art By David Hart 156',\n                'uploader': '63346',\n                'description': 'md5:9afac8fc885252201ad14563694040fc',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.metacafe.com/watch/an-dVVXnuY7Jh77J/the_andromeda_strain_1971_stop_the_bomb_part_3/',\n            'info_dict': {\n                'id': 'an-dVVXnuY7Jh77J',\n                'ext': 'mp4',\n                'title': 'The Andromeda Strain (1971): Stop the Bomb Part 3',\n                'uploader': 'AnyClip',\n                'description': 'md5:cbef0460d31e3807f6feb4e7a5952e5b',\n            },\n        },\n        \n        {\n            'url': 'http://www.metacafe.com/watch/5186653/bbc_internal_christmas_tape_79_uncensored_outtakes_etc/',\n            'md5': '98dde7c1a35d02178e8ab7560fe8bd09',\n            'info_dict': {\n                'id': '5186653',\n                'ext': 'mp4',\n                'title': 'BBC INTERNAL Christmas Tape \\'79 - UNCENSORED Outtakes, Etc.',\n                'uploader': 'Dwayne Pipe',\n                'description': 'md5:950bf4c581e2c059911fa3ffbe377e4b',\n                'age_limit': 18,\n            },\n        },\n        \n        {\n            'url': 'http://www.metacafe.com/watch/cb-8VD4r_Zws8VP/open_this_is_face_the_nation_february_9/',\n            'info_dict': {\n                'id': '8VD4r_Zws8VP',\n                'ext': 'flv',\n                'title': 'Open: This is Face the Nation, February 9',\n                'description': 'md5:8a9ceec26d1f7ed6eab610834cc1a476',\n                'duration': 96,\n                'uploader': 'CBSI-NEW',\n                'upload_date': '20140209',\n                'timestamp': 1391959800,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.metacafe.com/watch/mv-Wy7ZU/my_week_with_marilyn_do_you_love_me/',\n            'info_dict': {\n                'id': 'mv-Wy7ZU',\n                'ext': 'mp4',\n                'title': 'My Week with Marilyn - Do You Love Me?',\n                'description': 'From the movie My Week with Marilyn - Colin (Eddie Redmayne) professes his love to Marilyn (Michelle Williams) and gets her to promise to return to set and finish the movie.',\n                'uploader': 'movie_trailers',\n                'duration': 176,\n            },\n            'params': {\n                'skip_download': 'requires rtmpdump',\n            }\n        }\n    ]\n\n    def report_disclaimer(self):\n        self.to_screen('Retrieving disclaimer')\n\n    def _real_extract(self, url):\n        \n        video_id, display_id = re.match(self._VALID_URL, url).groups()\n\n        \n        m_external = re.match(r'^(\\w{2})-(.*)$', video_id)\n        if m_external is not None:\n            prefix, ext_id = m_external.groups()\n            \n            if prefix == 'yt':\n                return self.url_result('http://www.youtube.com/watch?v=%s' % ext_id, 'Youtube')\n            \n            if prefix == 'cb':\n                return self.url_result('theplatform:%s' % ext_id, 'ThePlatform')\n\n        headers = {\n            \n            'Cookie': 'user=%s; ' % compat_urllib_parse_urlencode({'ffilter': False})\n        }\n\n        \n        \n        if video_id.startswith('an-'):\n            headers['Cookie'] += 'flashVersion=0; '\n\n        \n        webpage = self._download_webpage(url, video_id, headers=headers)\n\n        error = get_element_by_attribute(\n            'class', 'notfound-page-title', webpage)\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        video_title = self._html_search_meta(\n            ['og:title', 'twitter:title'], webpage, 'title', default=None) or self._search_regex(r'<h1>(.*?)</h1>', webpage, 'title')\n\n        \n        self.report_extraction(video_id)\n        video_url = None\n        mobj = re.search(r'(?m)&(?:media|video)URL=([^&]+)', webpage)\n        if mobj is not None:\n            mediaURL = compat_urllib_parse_unquote(mobj.group(1))\n            video_ext = determine_ext(mediaURL)\n\n            \n            mobj = re.search(r'(?m)&gdaKey=(.*?)&', webpage)\n            if mobj is None:\n                video_url = mediaURL\n            else:\n                gdaKey = mobj.group(1)\n                video_url = '%s?__gda__=%s' % (mediaURL, gdaKey)\n        if video_url is None:\n            mobj = re.search(r'<video src=\"([^\"]+)\"', webpage)\n            if mobj:\n                video_url = mobj.group(1)\n                video_ext = 'mp4'\n        if video_url is None:\n            flashvars = self._search_regex(\n                r' name=\"flashvars\" value=\"(.*?)\"', webpage, 'flashvars',\n                default=None)\n            if flashvars:\n                vardict = compat_parse_qs(flashvars)\n                if 'mediaData' not in vardict:\n                    raise ExtractorError('Unable to extract media URL')\n                mobj = re.search(\n                    r'\"mediaURL\":\"(?P<mediaURL>http.*?)\",(.*?)\"key\":\"(?P<key>.*?)\"', vardict['mediaData'][0])\n                if mobj is None:\n                    raise ExtractorError('Unable to extract media URL')\n                mediaURL = mobj.group('mediaURL').replace('\\\\/', '/')\n                video_url = '%s?__gda__=%s' % (mediaURL, mobj.group('key'))\n                video_ext = determine_ext(video_url)\n        if video_url is None:\n            player_url = self._search_regex(\n                r\"swfobject\\.embedSWF\\('([^']+)'\",\n                webpage, 'config URL', default=None)\n            if player_url:\n                config_url = self._search_regex(\n                    r'config=(.+)$', player_url, 'config URL')\n                config_doc = self._download_xml(\n                    config_url, video_id,\n                    note='Downloading video config')\n                smil_url = config_doc.find('.//properties').attrib['smil_file']\n                smil_doc = self._download_xml(\n                    smil_url, video_id,\n                    note='Downloading SMIL document')\n                base_url = smil_doc.find('./head/meta').attrib['base']\n                video_url = []\n                for vn in smil_doc.findall('.//video'):\n                    br = int(vn.attrib['system-bitrate'])\n                    play_path = vn.attrib['src']\n                    video_url.append({\n                        'format_id': 'smil-%d' % br,\n                        'url': base_url,\n                        'play_path': play_path,\n                        'page_url': url,\n                        'player_url': player_url,\n                        'ext': play_path.partition(':')[0],\n                    })\n        if video_url is None:\n            flashvars = self._parse_json(self._search_regex(\n                r'flashvars\\s*=\\s*({.*});', webpage, 'flashvars',\n                default=None), video_id, fatal=False)\n            if flashvars:\n                video_url = []\n                for source in flashvars.get('sources'):\n                    source_url = source.get('src')\n                    if not source_url:\n                        continue\n                    ext = mimetype2ext(source.get('type')) or determine_ext(source_url)\n                    if ext == 'm3u8':\n                        video_url.extend(self._extract_m3u8_formats(\n                            source_url, video_id, 'mp4',\n                            'm3u8_native', m3u8_id='hls', fatal=False))\n                    else:\n                        video_url.append({\n                            'url': source_url,\n                            'ext': ext,\n                        })\n\n        if video_url is None:\n            raise ExtractorError('Unsupported video type')\n\n        description = self._html_search_meta(\n            ['og:description', 'twitter:description', 'description'],\n            webpage, 'title', fatal=False)\n        thumbnail = self._html_search_meta(\n            ['og:image', 'twitter:image'], webpage, 'title', fatal=False)\n        video_uploader = self._html_search_regex(\n            r'submitter=(.*?);|googletag\\.pubads\\(\\)\\.setTargeting\\(\"(?:channel|submiter)\",\"([^\"]+)\"\\);',\n            webpage, 'uploader nickname', fatal=False)\n        duration = int_or_none(\n            self._html_search_meta('video:duration', webpage, default=None))\n        age_limit = (\n            18\n            if re.search(r'(?:\"contentRating\":|\"rating\",)\"restricted\"', webpage)\n            else 0)\n\n        if isinstance(video_url, list):\n            formats = video_url\n        else:\n            formats = [{\n                'url': video_url,\n                'ext': video_ext,\n            }]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'description': description,\n            'uploader': video_uploader,\n            'title': video_title,\n            'thumbnail': thumbnail,\n            'age_limit': age_limit,\n            'formats': formats,\n            'duration': duration,\n        }\n", "comments": "#]+)'\n# Youtube video\n# Normal metacafe video\n# metacafe video with family filter\n# AnyClip video\n# age-restricted video\n# cbs video\n# rtmp download\n# Movieclips.com video\n# Extract id and simplified title from URL\n# the video may come from an external site\n# Check if video comes from YouTube\n# CBS videos use theplatform.com\n# Disable family filter\n# AnyClip videos require the flashversion cookie so that we get the link\n# to the mp4 file\n# Retrieve video webpage to extract further information\n# Extract URL, uploader and title from webpage\n# Extract gdaKey if available\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlencode,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    get_element_by_attribute,\n    mimetype2ext,\n)\n\n\nclass MetacafeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?metacafe\\.com/watch/(?P<video_id>[^/]+)/(?P<display_id>[^/?#]+)'\n    _DISCLAIMER = 'http://www.metacafe.com/family_filter/'\n    _FILTER_POST = 'http://www.metacafe.com/f/index.php?inputType=filter&controllerGroup=user'\n    IE_NAME = 'metacafe'\n    _TESTS = [\n        # Youtube video\n        {\n            'add_ie': ['Youtube'],\n            'url': 'http://metacafe.com/watch/yt-_aUehQsCQtM/the_electric_company_short_i_pbs_kids_go/',\n            'info_dict': {\n                'id': '_aUehQsCQtM',\n                'ext': 'mp4',\n                'upload_date': '20090102',\n                'title': 'The Electric Company | \"Short I\" | PBS KIDS GO!',\n                'description': 'md5:2439a8ef6d5a70e380c22f5ad323e5a8',\n                'uploader': 'PBS',\n                'uploader_id': 'PBS'\n            }\n        },\n        # Normal metacafe video\n        {\n            'url': 'http://www.metacafe.com/watch/11121940/news_stuff_you_wont_do_with_your_playstation_4/',\n            'md5': '6e0bca200eaad2552e6915ed6fd4d9ad',\n            'info_dict': {\n                'id': '11121940',\n                'ext': 'mp4',\n                'title': 'News: Stuff You Won\\'t Do with Your PlayStation 4',\n                'uploader': 'ign',\n                'description': 'Sony released a massive FAQ on the PlayStation Blog detailing the PS4\\'s capabilities and limitations.',\n            },\n            'skip': 'Page is temporarily unavailable.',\n        },\n        # metacafe video with family filter\n        {\n            'url': 'http://www.metacafe.com/watch/2155630/adult_art_by_david_hart_156/',\n            'md5': 'b06082c5079bbdcde677a6291fbdf376',\n            'info_dict': {\n                'id': '2155630',\n                'ext': 'mp4',\n                'title': 'Adult Art By David Hart 156',\n                'uploader': '63346',\n                'description': 'md5:9afac8fc885252201ad14563694040fc',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # AnyClip video\n        {\n            'url': 'http://www.metacafe.com/watch/an-dVVXnuY7Jh77J/the_andromeda_strain_1971_stop_the_bomb_part_3/',\n            'info_dict': {\n                'id': 'an-dVVXnuY7Jh77J',\n                'ext': 'mp4',\n                'title': 'The Andromeda Strain (1971): Stop the Bomb Part 3',\n                'uploader': 'AnyClip',\n                'description': 'md5:cbef0460d31e3807f6feb4e7a5952e5b',\n            },\n        },\n        # age-restricted video\n        {\n            'url': 'http://www.metacafe.com/watch/5186653/bbc_internal_christmas_tape_79_uncensored_outtakes_etc/',\n            'md5': '98dde7c1a35d02178e8ab7560fe8bd09',\n            'info_dict': {\n                'id': '5186653',\n                'ext': 'mp4',\n                'title': 'BBC INTERNAL Christmas Tape \\'79 - UNCENSORED Outtakes, Etc.',\n                'uploader': 'Dwayne Pipe',\n                'description': 'md5:950bf4c581e2c059911fa3ffbe377e4b',\n                'age_limit': 18,\n            },\n        },\n        # cbs video\n        {\n            'url': 'http://www.metacafe.com/watch/cb-8VD4r_Zws8VP/open_this_is_face_the_nation_february_9/',\n            'info_dict': {\n                'id': '8VD4r_Zws8VP',\n                'ext': 'flv',\n                'title': 'Open: This is Face the Nation, February 9',\n                'description': 'md5:8a9ceec26d1f7ed6eab610834cc1a476',\n                'duration': 96,\n                'uploader': 'CBSI-NEW',\n                'upload_date': '20140209',\n                'timestamp': 1391959800,\n            },\n            'params': {\n                # rtmp download\n                'skip_download': True,\n            },\n        },\n        # Movieclips.com video\n        {\n            'url': 'http://www.metacafe.com/watch/mv-Wy7ZU/my_week_with_marilyn_do_you_love_me/',\n            'info_dict': {\n                'id': 'mv-Wy7ZU',\n                'ext': 'mp4',\n                'title': 'My Week with Marilyn - Do You Love Me?',\n                'description': 'From the movie My Week with Marilyn - Colin (Eddie Redmayne) professes his love to Marilyn (Michelle Williams) and gets her to promise to return to set and finish the movie.',\n                'uploader': 'movie_trailers',\n                'duration': 176,\n            },\n            'params': {\n                'skip_download': 'requires rtmpdump',\n            }\n        }\n    ]\n\n    def report_disclaimer(self):\n        self.to_screen('Retrieving disclaimer')\n\n    def _real_extract(self, url):\n        # Extract id and simplified title from URL\n        video_id, display_id = re.match(self._VALID_URL, url).groups()\n\n        # the video may come from an external site\n        m_external = re.match(r'^(\\w{2})-(.*)$', video_id)\n        if m_external is not None:\n            prefix, ext_id = m_external.groups()\n            # Check if video comes from YouTube\n            if prefix == 'yt':\n                return self.url_result('http://www.youtube.com/watch?v=%s' % ext_id, 'Youtube')\n            # CBS videos use theplatform.com\n            if prefix == 'cb':\n                return self.url_result('theplatform:%s' % ext_id, 'ThePlatform')\n\n        headers = {\n            # Disable family filter\n            'Cookie': 'user=%s; ' % compat_urllib_parse_urlencode({'ffilter': False})\n        }\n\n        # AnyClip videos require the flashversion cookie so that we get the link\n        # to the mp4 file\n        if video_id.startswith('an-'):\n            headers['Cookie'] += 'flashVersion=0; '\n\n        # Retrieve video webpage to extract further information\n        webpage = self._download_webpage(url, video_id, headers=headers)\n\n        error = get_element_by_attribute(\n            'class', 'notfound-page-title', webpage)\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        video_title = self._html_search_meta(\n            ['og:title', 'twitter:title'], webpage, 'title', default=None) or self._search_regex(r'<h1>(.*?)</h1>', webpage, 'title')\n\n        # Extract URL, uploader and title from webpage\n        self.report_extraction(video_id)\n        video_url = None\n        mobj = re.search(r'(?m)&(?:media|video)URL=([^&]+)', webpage)\n        if mobj is not None:\n            mediaURL = compat_urllib_parse_unquote(mobj.group(1))\n            video_ext = determine_ext(mediaURL)\n\n            # Extract gdaKey if available\n            mobj = re.search(r'(?m)&gdaKey=(.*?)&', webpage)\n            if mobj is None:\n                video_url = mediaURL\n            else:\n                gdaKey = mobj.group(1)\n                video_url = '%s?__gda__=%s' % (mediaURL, gdaKey)\n        if video_url is None:\n            mobj = re.search(r'<video src=\"([^\"]+)\"', webpage)\n            if mobj:\n                video_url = mobj.group(1)\n                video_ext = 'mp4'\n        if video_url is None:\n            flashvars = self._search_regex(\n                r' name=\"flashvars\" value=\"(.*?)\"', webpage, 'flashvars',\n                default=None)\n            if flashvars:\n                vardict = compat_parse_qs(flashvars)\n                if 'mediaData' not in vardict:\n                    raise ExtractorError('Unable to extract media URL')\n                mobj = re.search(\n                    r'\"mediaURL\":\"(?P<mediaURL>http.*?)\",(.*?)\"key\":\"(?P<key>.*?)\"', vardict['mediaData'][0])\n                if mobj is None:\n                    raise ExtractorError('Unable to extract media URL')\n                mediaURL = mobj.group('mediaURL').replace('\\\\/', '/')\n                video_url = '%s?__gda__=%s' % (mediaURL, mobj.group('key'))\n                video_ext = determine_ext(video_url)\n        if video_url is None:\n            player_url = self._search_regex(\n                r\"swfobject\\.embedSWF\\('([^']+)'\",\n                webpage, 'config URL', default=None)\n            if player_url:\n                config_url = self._search_regex(\n                    r'config=(.+)$', player_url, 'config URL')\n                config_doc = self._download_xml(\n                    config_url, video_id,\n                    note='Downloading video config')\n                smil_url = config_doc.find('.//properties').attrib['smil_file']\n                smil_doc = self._download_xml(\n                    smil_url, video_id,\n                    note='Downloading SMIL document')\n                base_url = smil_doc.find('./head/meta').attrib['base']\n                video_url = []\n                for vn in smil_doc.findall('.//video'):\n                    br = int(vn.attrib['system-bitrate'])\n                    play_path = vn.attrib['src']\n                    video_url.append({\n                        'format_id': 'smil-%d' % br,\n                        'url': base_url,\n                        'play_path': play_path,\n                        'page_url': url,\n                        'player_url': player_url,\n                        'ext': play_path.partition(':')[0],\n                    })\n        if video_url is None:\n            flashvars = self._parse_json(self._search_regex(\n                r'flashvars\\s*=\\s*({.*});', webpage, 'flashvars',\n                default=None), video_id, fatal=False)\n            if flashvars:\n                video_url = []\n                for source in flashvars.get('sources'):\n                    source_url = source.get('src')\n                    if not source_url:\n                        continue\n                    ext = mimetype2ext(source.get('type')) or determine_ext(source_url)\n                    if ext == 'm3u8':\n                        video_url.extend(self._extract_m3u8_formats(\n                            source_url, video_id, 'mp4',\n                            'm3u8_native', m3u8_id='hls', fatal=False))\n                    else:\n                        video_url.append({\n                            'url': source_url,\n                            'ext': ext,\n                        })\n\n        if video_url is None:\n            raise ExtractorError('Unsupported video type')\n\n        description = self._html_search_meta(\n            ['og:description', 'twitter:description', 'description'],\n            webpage, 'title', fatal=False)\n        thumbnail = self._html_search_meta(\n            ['og:image', 'twitter:image'], webpage, 'title', fatal=False)\n        video_uploader = self._html_search_regex(\n            r'submitter=(.*?);|googletag\\.pubads\\(\\)\\.setTargeting\\(\"(?:channel|submiter)\",\"([^\"]+)\"\\);',\n            webpage, 'uploader nickname', fatal=False)\n        duration = int_or_none(\n            self._html_search_meta('video:duration', webpage, default=None))\n        age_limit = (\n            18\n            if re.search(r'(?:\"contentRating\":|\"rating\",)\"restricted\"', webpage)\n            else 0)\n\n        if isinstance(video_url, list):\n            formats = video_url\n        else:\n            formats = [{\n                'url': video_url,\n                'ext': video_ext,\n            }]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'description': description,\n            'uploader': video_uploader,\n            'title': video_title,\n            'thumbnail': thumbnail,\n            'age_limit': age_limit,\n            'formats': formats,\n            'duration': duration,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "metacafe.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/metacafe.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}