{"author": "sympy", "code": "\n\n\n\n# Python (without numpy). Here we test everything, that a user may need when\n\n\nfrom __future__ import division\n\nfrom sympy.external import import_module\n\nnumpy = import_module('numpy')\nif numpy:\n    array, matrix, ndarray = numpy.array, numpy.matrix, numpy.ndarray\nelse:\n    \n    disabled = True\n\n\nfrom sympy import (Rational, Symbol, list2numpy, matrix2numpy, sin, Float,\n        Matrix, lambdify, symarray, symbols, Integer)\nimport sympy\n\nimport mpmath\nfrom sympy.abc import x, y, z\nfrom sympy.utilities.decorator import conserve_mpmath_dps\n\n\n\n\n\n\ndef test_systematic_basic():\n    def s(sympy_object, numpy_array):\n        x = sympy_object + numpy_array\n        x = numpy_array + sympy_object\n        x = sympy_object - numpy_array\n        x = numpy_array - sympy_object\n        x = sympy_object * numpy_array\n        x = numpy_array * sympy_object\n        x = sympy_object / numpy_array\n        x = numpy_array / sympy_object\n        x = sympy_object ** numpy_array\n        x = numpy_array ** sympy_object\n    x = Symbol(\"x\")\n    y = Symbol(\"y\")\n    sympy_objs = [\n        Rational(2, 3),\n        Float(\"1.3\"),\n        x,\n        y,\n        pow(x, y)*y,\n        Integer(5),\n        Float(5.5),\n    ]\n    numpy_objs = [\n        array([1]),\n        array([3, 8, -1]),\n        array([x, x**2, Rational(5)]),\n        array([x/y*sin(y), 5, Rational(5)]),\n    ]\n    for x in sympy_objs:\n        for y in numpy_objs:\n            s(x, y)\n\n\n\n\n\ndef test_basics():\n    one = Rational(1)\n    zero = Rational(0)\n    assert array(1) == array(one)\n    assert array([one]) == array([one])\n    assert array([x]) == array([x])\n    assert array(x) == array(Symbol(\"x\"))\n    assert array(one + x) == array(1 + x)\n\n    X = array([one, zero, zero])\n    assert (X == array([one, zero, zero])).all()\n    assert (X == array([one, 0, 0])).all()\n\n\ndef test_arrays():\n    one = Rational(1)\n    zero = Rational(0)\n    X = array([one, zero, zero])\n    Y = one*X\n    X = array([Symbol(\"a\") + Rational(1, 2)])\n    Y = X + X\n    assert Y == array([1 + 2*Symbol(\"a\")])\n    Y = Y + 1\n    assert Y == array([2 + 2*Symbol(\"a\")])\n    Y = X - X\n    assert Y == array([0])\n\n\ndef test_conversion1():\n    a = list2numpy([x**2, x])\n    ?\n    assert isinstance(a, ndarray)\n    assert a[0] == x**2\n    assert a[1] == x\n    assert len(a) == 2\n    \n\n\ndef test_conversion2():\n    a = 2*list2numpy([x**2, x])\n    b = list2numpy([2*x**2, 2*x])\n    assert (a == b).all()\n\n    one = Rational(1)\n    zero = Rational(0)\n    X = list2numpy([one, zero, zero])\n    Y = one*X\n    X = list2numpy([Symbol(\"a\") + Rational(1, 2)])\n    Y = X + X\n    assert Y == array([1 + 2*Symbol(\"a\")])\n    Y = Y + 1\n    assert Y == array([2 + 2*Symbol(\"a\")])\n    Y = X - X\n    assert Y == array([0])\n\n\ndef test_list2numpy():\n    assert (array([x**2, x]) == list2numpy([x**2, x])).all()\n\n\ndef test_Matrix1():\n    m = Matrix([[x, x**2], [5, 2/x]])\n    assert (array(m.subs(x, 2)) == array([[2, 4], [5, 1]])).all()\n    m = Matrix([[sin(x), x**2], [5, 2/x]])\n    assert (array(m.subs(x, 2)) == array([[sin(2), 4], [5, 1]])).all()\n\n\ndef test_Matrix2():\n    m = Matrix([[x, x**2], [5, 2/x]])\n    assert (matrix(m.subs(x, 2)) == matrix([[2, 4], [5, 1]])).all()\n    m = Matrix([[sin(x), x**2], [5, 2/x]])\n    assert (matrix(m.subs(x, 2)) == matrix([[sin(2), 4], [5, 1]])).all()\n\n\ndef test_Matrix3():\n    a = array([[2, 4], [5, 1]])\n    assert Matrix(a) == Matrix([[2, 4], [5, 1]])\n    assert Matrix(a) != Matrix([[2, 4], [5, 2]])\n    a = array([[sin(2), 4], [5, 1]])\n    assert Matrix(a) == Matrix([[sin(2), 4], [5, 1]])\n    assert Matrix(a) != Matrix([[sin(0), 4], [5, 1]])\n\n\ndef test_Matrix4():\n    a = matrix([[2, 4], [5, 1]])\n    assert Matrix(a) == Matrix([[2, 4], [5, 1]])\n    assert Matrix(a) != Matrix([[2, 4], [5, 2]])\n    a = matrix([[sin(2), 4], [5, 1]])\n    assert Matrix(a) == Matrix([[sin(2), 4], [5, 1]])\n    assert Matrix(a) != Matrix([[sin(0), 4], [5, 1]])\n\n\ndef test_Matrix_sum():\n    M = Matrix([[1, 2, 3], [x, y, x], [2*y, -50, z*x]])\n    m = matrix([[2, 3, 4], [x, 5, 6], [x, y, z**2]])\n    assert M + m == Matrix([[3, 5, 7], [2*x, y + 5, x + 6], [2*y + x, y - 50, z*x + z**2]])\n    assert m + M == Matrix([[3, 5, 7], [2*x, y + 5, x + 6], [2*y + x, y - 50, z*x + z**2]])\n    assert M + m == M.add(m)\n\n\ndef test_Matrix_mul():\n    M = Matrix([[1, 2, 3], [x, y, x]])\n    m = matrix([[2, 4], [x, 6], [x, z**2]])\n    assert M*m == Matrix([\n        [         2 + 5*x,        16 + 3*z**2],\n        [2*x + x*y + x**2, 4*x + 6*y + x*z**2],\n    ])\n\n    assert m*M == Matrix([\n        [   2 + 4*x,      4 + 4*y,      6 + 4*x],\n        [       7*x,    2*x + 6*y,          9*x],\n        [x + x*z**2, 2*x + y*z**2, 3*x + x*z**2],\n    ])\n    a = array([2])\n    assert a[0] * M == 2 * M\n    assert M * a[0] == 2 * M\n\n\ndef test_Matrix_array():\n    class matarray(object):\n        def __array__(self):\n            from numpy import array\n            return array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    matarr = matarray()\n    assert Matrix(matarr) == Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n\ndef test_matrix2numpy():\n    a = matrix2numpy(Matrix([[1, x**2], [3*sin(x), 0]]))\n    assert isinstance(a, ndarray)\n    assert a.shape == (2, 2)\n    assert a[0, 0] == 1\n    assert a[0, 1] == x**2\n    assert a[1, 0] == 3*sin(x)\n    assert a[1, 1] == 0\n\n\ndef test_matrix2numpy_conversion():\n    a = Matrix([[1, 2, sin(x)], [x**2, x, Rational(1, 2)]])\n    b = array([[1, 2, sin(x)], [x**2, x, Rational(1, 2)]])\n    assert (matrix2numpy(a) == b).all()\n    assert matrix2numpy(a).dtype == numpy.dtype('object')\n\n    c = matrix2numpy(Matrix([[1, 2], [10, 20]]), dtype='int8')\n    d = matrix2numpy(Matrix([[1, 2], [10, 20]]), dtype='float64')\n    assert c.dtype == numpy.dtype('int8')\n    assert d.dtype == numpy.dtype('float64')\n\n\ndef test_issue_3728():\n    assert (Rational(1, 2)*array([2*x, 0]) == array([x, 0])).all()\n    assert (Rational(1, 2) + array(\n        [2*x, 0]) == array([2*x + Rational(1, 2), Rational(1, 2)])).all()\n    assert (Float(\"0.5\")*array([2*x, 0]) == array([Float(\"1.0\")*x, 0])).all()\n    assert (Float(\"0.5\") + array(\n        [2*x, 0]) == array([2*x + Float(\"0.5\"), Float(\"0.5\")])).all()\n\n\n@conserve_mpmath_dps\ndef test_lambdify():\n    mpmath.mp.dps = 16\n    sin02 = mpmath.mpf(\"0.198669330795061215459412627\")\n    f = lambdify(x, sin(x), \"numpy\")\n    prec = 1e-15\n    assert -prec < f(0.2) - sin02 < prec\n    try:\n        f(x)  \n        assert False\n    except AttributeError:\n        pass\n\n\ndef test_lambdify_matrix():\n    f = lambdify(x, Matrix([[x, 2*x], [1, 2]]), [{'ImmutableMatrix': numpy.array}, \"numpy\"])\n    assert (f(1) == array([[1, 2], [1, 2]])).all()\n\n\ndef test_lambdify_matrix_multi_input():\n    M = sympy.Matrix([[x**2, x*y, x*z],\n                      [y*x, y**2, y*z],\n                      [z*x, z*y, z**2]])\n    f = lambdify((x, y, z), M, [{'ImmutableMatrix': numpy.array}, \"numpy\"])\n\n    xh, yh, zh = 1.0, 2.0, 3.0\n    expected = array([[xh**2, xh*yh, xh*zh],\n                      [yh*xh, yh**2, yh*zh],\n                      [zh*xh, zh*yh, zh**2]])\n    actual = f(xh, yh, zh)\n    assert numpy.allclose(actual, expected)\n\n\ndef test_lambdify_matrix_vec_input():\n    X = sympy.DeferredVector('X')\n    M = Matrix([\n        [X[0]**2, X[0]*X[1], X[0]*X[2]],\n        [X[1]*X[0], X[1]**2, X[1]*X[2]],\n        [X[2]*X[0], X[2]*X[1], X[2]**2]])\n    f = lambdify(X, M, [{'ImmutableMatrix': numpy.array}, \"numpy\"])\n\n    Xh = array([1.0, 2.0, 3.0])\n    expected = array([[Xh[0]**2, Xh[0]*Xh[1], Xh[0]*Xh[2]],\n                      [Xh[1]*Xh[0], Xh[1]**2, Xh[1]*Xh[2]],\n                      [Xh[2]*Xh[0], Xh[2]*Xh[1], Xh[2]**2]])\n    actual = f(Xh)\n    assert numpy.allclose(actual, expected)\n\n\ndef test_lambdify_transl():\n    from sympy.utilities.lambdify import NUMPY_TRANSLATIONS\n    for sym, mat in NUMPY_TRANSLATIONS.items():\n        assert sym in sympy.__dict__\n        assert mat in numpy.__dict__\n\n\ndef test_symarray():\n    \n\n    import numpy as np\n    import numpy.testing as npt\n\n    syms = symbols('_0,_1,_2')\n    s1 = symarray(\"\", 3)\n    s2 = symarray(\"\", 3)\n    npt.assert_array_equal(s1, np.array(syms, dtype=object))\n    assert s1[0] == s2[0]\n\n    a = symarray('a', 3)\n    b = symarray('b', 3)\n    assert not(a[0] == b[0])\n\n    asyms = symbols('a_0,a_1,a_2')\n    npt.assert_array_equal(a, np.array(asyms, dtype=object))\n\n    \n    a2d = symarray('a', (2, 3))\n    assert a2d.shape == (2, 3)\n    a00, a12 = symbols('a_0_0,a_1_2')\n    assert a2d[0, 0] == a00\n    assert a2d[1, 2] == a12\n\n    a3d = symarray('a', (2, 3, 2))\n    assert a3d.shape == (2, 3, 2)\n    a000, a120, a121 = symbols('a_0_0_0,a_1_2_0,a_1_2_1')\n    assert a3d[0, 0, 0] == a000\n    assert a3d[1, 2, 0] == a120\n    assert a3d[1, 2, 1] == a121\n\n\ndef test_vectorize():\n    assert (numpy.vectorize(\n        sin)([1, 2, 3]) == numpy.array([sin(1), sin(2), sin(3)])).all()\n", "comments": "   test creation numpy arrays sympy symbols        this testfile tests sympy     numpy compatibility    don test sympy features  just pure interaction numpy     always write regular sympy tests anything  tested pure    python (without numpy)  here test everything  user may need    using sympy numpy   bin test execute tests    first  systematically check  operations implemented    raise exception    random tests  test particular problems also    check results operations correct   looks like array    yes  array    succeeds  numpy function    multidimensional checks ", "content": "# This testfile tests SymPy <-> NumPy compatibility\n\n# Don't test any SymPy features here. Just pure interaction with NumPy.\n# Always write regular SymPy tests for anything, that can be tested in pure\n# Python (without numpy). Here we test everything, that a user may need when\n# using SymPy with NumPy\n\nfrom __future__ import division\n\nfrom sympy.external import import_module\n\nnumpy = import_module('numpy')\nif numpy:\n    array, matrix, ndarray = numpy.array, numpy.matrix, numpy.ndarray\nelse:\n    #bin/test will not execute any tests now\n    disabled = True\n\n\nfrom sympy import (Rational, Symbol, list2numpy, matrix2numpy, sin, Float,\n        Matrix, lambdify, symarray, symbols, Integer)\nimport sympy\n\nimport mpmath\nfrom sympy.abc import x, y, z\nfrom sympy.utilities.decorator import conserve_mpmath_dps\n\n\n# first, systematically check, that all operations are implemented and don't\n# raise an exception\n\n\ndef test_systematic_basic():\n    def s(sympy_object, numpy_array):\n        x = sympy_object + numpy_array\n        x = numpy_array + sympy_object\n        x = sympy_object - numpy_array\n        x = numpy_array - sympy_object\n        x = sympy_object * numpy_array\n        x = numpy_array * sympy_object\n        x = sympy_object / numpy_array\n        x = numpy_array / sympy_object\n        x = sympy_object ** numpy_array\n        x = numpy_array ** sympy_object\n    x = Symbol(\"x\")\n    y = Symbol(\"y\")\n    sympy_objs = [\n        Rational(2, 3),\n        Float(\"1.3\"),\n        x,\n        y,\n        pow(x, y)*y,\n        Integer(5),\n        Float(5.5),\n    ]\n    numpy_objs = [\n        array([1]),\n        array([3, 8, -1]),\n        array([x, x**2, Rational(5)]),\n        array([x/y*sin(y), 5, Rational(5)]),\n    ]\n    for x in sympy_objs:\n        for y in numpy_objs:\n            s(x, y)\n\n\n# now some random tests, that test particular problems and that also\n# check that the results of the operations are correct\n\ndef test_basics():\n    one = Rational(1)\n    zero = Rational(0)\n    assert array(1) == array(one)\n    assert array([one]) == array([one])\n    assert array([x]) == array([x])\n    assert array(x) == array(Symbol(\"x\"))\n    assert array(one + x) == array(1 + x)\n\n    X = array([one, zero, zero])\n    assert (X == array([one, zero, zero])).all()\n    assert (X == array([one, 0, 0])).all()\n\n\ndef test_arrays():\n    one = Rational(1)\n    zero = Rational(0)\n    X = array([one, zero, zero])\n    Y = one*X\n    X = array([Symbol(\"a\") + Rational(1, 2)])\n    Y = X + X\n    assert Y == array([1 + 2*Symbol(\"a\")])\n    Y = Y + 1\n    assert Y == array([2 + 2*Symbol(\"a\")])\n    Y = X - X\n    assert Y == array([0])\n\n\ndef test_conversion1():\n    a = list2numpy([x**2, x])\n    #looks like an array?\n    assert isinstance(a, ndarray)\n    assert a[0] == x**2\n    assert a[1] == x\n    assert len(a) == 2\n    #yes, it's the array\n\n\ndef test_conversion2():\n    a = 2*list2numpy([x**2, x])\n    b = list2numpy([2*x**2, 2*x])\n    assert (a == b).all()\n\n    one = Rational(1)\n    zero = Rational(0)\n    X = list2numpy([one, zero, zero])\n    Y = one*X\n    X = list2numpy([Symbol(\"a\") + Rational(1, 2)])\n    Y = X + X\n    assert Y == array([1 + 2*Symbol(\"a\")])\n    Y = Y + 1\n    assert Y == array([2 + 2*Symbol(\"a\")])\n    Y = X - X\n    assert Y == array([0])\n\n\ndef test_list2numpy():\n    assert (array([x**2, x]) == list2numpy([x**2, x])).all()\n\n\ndef test_Matrix1():\n    m = Matrix([[x, x**2], [5, 2/x]])\n    assert (array(m.subs(x, 2)) == array([[2, 4], [5, 1]])).all()\n    m = Matrix([[sin(x), x**2], [5, 2/x]])\n    assert (array(m.subs(x, 2)) == array([[sin(2), 4], [5, 1]])).all()\n\n\ndef test_Matrix2():\n    m = Matrix([[x, x**2], [5, 2/x]])\n    assert (matrix(m.subs(x, 2)) == matrix([[2, 4], [5, 1]])).all()\n    m = Matrix([[sin(x), x**2], [5, 2/x]])\n    assert (matrix(m.subs(x, 2)) == matrix([[sin(2), 4], [5, 1]])).all()\n\n\ndef test_Matrix3():\n    a = array([[2, 4], [5, 1]])\n    assert Matrix(a) == Matrix([[2, 4], [5, 1]])\n    assert Matrix(a) != Matrix([[2, 4], [5, 2]])\n    a = array([[sin(2), 4], [5, 1]])\n    assert Matrix(a) == Matrix([[sin(2), 4], [5, 1]])\n    assert Matrix(a) != Matrix([[sin(0), 4], [5, 1]])\n\n\ndef test_Matrix4():\n    a = matrix([[2, 4], [5, 1]])\n    assert Matrix(a) == Matrix([[2, 4], [5, 1]])\n    assert Matrix(a) != Matrix([[2, 4], [5, 2]])\n    a = matrix([[sin(2), 4], [5, 1]])\n    assert Matrix(a) == Matrix([[sin(2), 4], [5, 1]])\n    assert Matrix(a) != Matrix([[sin(0), 4], [5, 1]])\n\n\ndef test_Matrix_sum():\n    M = Matrix([[1, 2, 3], [x, y, x], [2*y, -50, z*x]])\n    m = matrix([[2, 3, 4], [x, 5, 6], [x, y, z**2]])\n    assert M + m == Matrix([[3, 5, 7], [2*x, y + 5, x + 6], [2*y + x, y - 50, z*x + z**2]])\n    assert m + M == Matrix([[3, 5, 7], [2*x, y + 5, x + 6], [2*y + x, y - 50, z*x + z**2]])\n    assert M + m == M.add(m)\n\n\ndef test_Matrix_mul():\n    M = Matrix([[1, 2, 3], [x, y, x]])\n    m = matrix([[2, 4], [x, 6], [x, z**2]])\n    assert M*m == Matrix([\n        [         2 + 5*x,        16 + 3*z**2],\n        [2*x + x*y + x**2, 4*x + 6*y + x*z**2],\n    ])\n\n    assert m*M == Matrix([\n        [   2 + 4*x,      4 + 4*y,      6 + 4*x],\n        [       7*x,    2*x + 6*y,          9*x],\n        [x + x*z**2, 2*x + y*z**2, 3*x + x*z**2],\n    ])\n    a = array([2])\n    assert a[0] * M == 2 * M\n    assert M * a[0] == 2 * M\n\n\ndef test_Matrix_array():\n    class matarray(object):\n        def __array__(self):\n            from numpy import array\n            return array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    matarr = matarray()\n    assert Matrix(matarr) == Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n\n\ndef test_matrix2numpy():\n    a = matrix2numpy(Matrix([[1, x**2], [3*sin(x), 0]]))\n    assert isinstance(a, ndarray)\n    assert a.shape == (2, 2)\n    assert a[0, 0] == 1\n    assert a[0, 1] == x**2\n    assert a[1, 0] == 3*sin(x)\n    assert a[1, 1] == 0\n\n\ndef test_matrix2numpy_conversion():\n    a = Matrix([[1, 2, sin(x)], [x**2, x, Rational(1, 2)]])\n    b = array([[1, 2, sin(x)], [x**2, x, Rational(1, 2)]])\n    assert (matrix2numpy(a) == b).all()\n    assert matrix2numpy(a).dtype == numpy.dtype('object')\n\n    c = matrix2numpy(Matrix([[1, 2], [10, 20]]), dtype='int8')\n    d = matrix2numpy(Matrix([[1, 2], [10, 20]]), dtype='float64')\n    assert c.dtype == numpy.dtype('int8')\n    assert d.dtype == numpy.dtype('float64')\n\n\ndef test_issue_3728():\n    assert (Rational(1, 2)*array([2*x, 0]) == array([x, 0])).all()\n    assert (Rational(1, 2) + array(\n        [2*x, 0]) == array([2*x + Rational(1, 2), Rational(1, 2)])).all()\n    assert (Float(\"0.5\")*array([2*x, 0]) == array([Float(\"1.0\")*x, 0])).all()\n    assert (Float(\"0.5\") + array(\n        [2*x, 0]) == array([2*x + Float(\"0.5\"), Float(\"0.5\")])).all()\n\n\n@conserve_mpmath_dps\ndef test_lambdify():\n    mpmath.mp.dps = 16\n    sin02 = mpmath.mpf(\"0.198669330795061215459412627\")\n    f = lambdify(x, sin(x), \"numpy\")\n    prec = 1e-15\n    assert -prec < f(0.2) - sin02 < prec\n    try:\n        f(x)  # if this succeeds, it can't be a numpy function\n        assert False\n    except AttributeError:\n        pass\n\n\ndef test_lambdify_matrix():\n    f = lambdify(x, Matrix([[x, 2*x], [1, 2]]), [{'ImmutableMatrix': numpy.array}, \"numpy\"])\n    assert (f(1) == array([[1, 2], [1, 2]])).all()\n\n\ndef test_lambdify_matrix_multi_input():\n    M = sympy.Matrix([[x**2, x*y, x*z],\n                      [y*x, y**2, y*z],\n                      [z*x, z*y, z**2]])\n    f = lambdify((x, y, z), M, [{'ImmutableMatrix': numpy.array}, \"numpy\"])\n\n    xh, yh, zh = 1.0, 2.0, 3.0\n    expected = array([[xh**2, xh*yh, xh*zh],\n                      [yh*xh, yh**2, yh*zh],\n                      [zh*xh, zh*yh, zh**2]])\n    actual = f(xh, yh, zh)\n    assert numpy.allclose(actual, expected)\n\n\ndef test_lambdify_matrix_vec_input():\n    X = sympy.DeferredVector('X')\n    M = Matrix([\n        [X[0]**2, X[0]*X[1], X[0]*X[2]],\n        [X[1]*X[0], X[1]**2, X[1]*X[2]],\n        [X[2]*X[0], X[2]*X[1], X[2]**2]])\n    f = lambdify(X, M, [{'ImmutableMatrix': numpy.array}, \"numpy\"])\n\n    Xh = array([1.0, 2.0, 3.0])\n    expected = array([[Xh[0]**2, Xh[0]*Xh[1], Xh[0]*Xh[2]],\n                      [Xh[1]*Xh[0], Xh[1]**2, Xh[1]*Xh[2]],\n                      [Xh[2]*Xh[0], Xh[2]*Xh[1], Xh[2]**2]])\n    actual = f(Xh)\n    assert numpy.allclose(actual, expected)\n\n\ndef test_lambdify_transl():\n    from sympy.utilities.lambdify import NUMPY_TRANSLATIONS\n    for sym, mat in NUMPY_TRANSLATIONS.items():\n        assert sym in sympy.__dict__\n        assert mat in numpy.__dict__\n\n\ndef test_symarray():\n    \"\"\"Test creation of numpy arrays of sympy symbols.\"\"\"\n\n    import numpy as np\n    import numpy.testing as npt\n\n    syms = symbols('_0,_1,_2')\n    s1 = symarray(\"\", 3)\n    s2 = symarray(\"\", 3)\n    npt.assert_array_equal(s1, np.array(syms, dtype=object))\n    assert s1[0] == s2[0]\n\n    a = symarray('a', 3)\n    b = symarray('b', 3)\n    assert not(a[0] == b[0])\n\n    asyms = symbols('a_0,a_1,a_2')\n    npt.assert_array_equal(a, np.array(asyms, dtype=object))\n\n    # Multidimensional checks\n    a2d = symarray('a', (2, 3))\n    assert a2d.shape == (2, 3)\n    a00, a12 = symbols('a_0_0,a_1_2')\n    assert a2d[0, 0] == a00\n    assert a2d[1, 2] == a12\n\n    a3d = symarray('a', (2, 3, 2))\n    assert a3d.shape == (2, 3, 2)\n    a000, a120, a121 = symbols('a_0_0_0,a_1_2_0,a_1_2_1')\n    assert a3d[0, 0, 0] == a000\n    assert a3d[1, 2, 0] == a120\n    assert a3d[1, 2, 1] == a121\n\n\ndef test_vectorize():\n    assert (numpy.vectorize(\n        sin)([1, 2, 3]) == numpy.array([sin(1), sin(2), sin(3)])).all()\n", "description": "A computer algebra system written in pure Python", "file_name": "test_numpy.py", "id": "e707ac515c7f90c65d1f2409f2dbd1e9", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/external/tests/test_numpy.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}