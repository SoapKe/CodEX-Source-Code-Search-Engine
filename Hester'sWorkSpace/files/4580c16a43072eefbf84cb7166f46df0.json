{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestGraph(object):\n\n    def create_graph(self):\n        graph = Graph()\n        for key in range(0, 6):\n            graph.add_node(key)\n        return graph\n\n    def test_graph(self):\n        graph = self.create_graph()\n        graph.add_edge(0, 1, weight=5)\n        graph.add_edge(0, 5, weight=2)\n        graph.add_edge(1, 2, weight=3)\n        graph.add_edge(2, 3, weight=4)\n        graph.add_edge(3, 4, weight=5)\n        graph.add_edge(3, 5, weight=6)\n        graph.add_edge(4, 0, weight=7)\n        graph.add_edge(5, 4, weight=8)\n        graph.add_edge(5, 2, weight=9)\n\n        assert_equal(graph.nodes[0].adj_weights[graph.nodes[1].key], 5)\n        assert_equal(graph.nodes[0].adj_weights[graph.nodes[5].key], 2)\n        assert_equal(graph.nodes[1].adj_weights[graph.nodes[2].key], 3)\n        assert_equal(graph.nodes[2].adj_weights[graph.nodes[3].key], 4)\n        assert_equal(graph.nodes[3].adj_weights[graph.nodes[4].key], 5)\n        assert_equal(graph.nodes[3].adj_weights[graph.nodes[5].key], 6)\n        assert_equal(graph.nodes[4].adj_weights[graph.nodes[0].key], 7)\n        assert_equal(graph.nodes[5].adj_weights[graph.nodes[4].key], 8)\n        assert_equal(graph.nodes[5].adj_weights[graph.nodes[2].key], 9)\n\n        assert_equal(graph.nodes[0].incoming_edges, 1)\n        assert_equal(graph.nodes[1].incoming_edges, 1)\n        assert_equal(graph.nodes[2].incoming_edges, 2)\n        assert_equal(graph.nodes[3].incoming_edges, 1)\n        assert_equal(graph.nodes[4].incoming_edges, 2)\n        assert_equal(graph.nodes[5].incoming_edges, 2)\n\n        graph.nodes[0].remove_neighbor(graph.nodes[1])\n        assert_equal(graph.nodes[1].incoming_edges, 0)\n        graph.nodes[3].remove_neighbor(graph.nodes[4])\n        assert_equal(graph.nodes[4].incoming_edges, 1)\n\n        assert_equal(graph.nodes[0] < graph.nodes[1], True)\n\n        print('Success: test_graph')\n\n    def test_graph_undirected(self):\n        graph = self.create_graph()\n        graph.add_undirected_edge(0, 1, weight=5)\n        graph.add_undirected_edge(0, 5, weight=2)\n        graph.add_undirected_edge(1, 2, weight=3)\n\n        assert_equal(graph.nodes[0].adj_weights[graph.nodes[1].key], 5)\n        assert_equal(graph.nodes[1].adj_weights[graph.nodes[0].key], 5)\n        assert_equal(graph.nodes[0].adj_weights[graph.nodes[5].key], 2)\n        assert_equal(graph.nodes[5].adj_weights[graph.nodes[0].key], 2)\n        assert_equal(graph.nodes[1].adj_weights[graph.nodes[2].key], 3)\n        assert_equal(graph.nodes[2].adj_weights[graph.nodes[1].key], 3)\n\n        print('Success: test_graph_undirected')\n\n\ndef main():\n    test = TestGraph()\n    test.test_graph()\n    test.test_graph_undirected()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestGraph(object):\n\n    def create_graph(self):\n        graph = Graph()\n        for key in range(0, 6):\n            graph.add_node(key)\n        return graph\n\n    def test_graph(self):\n        graph = self.create_graph()\n        graph.add_edge(0, 1, weight=5)\n        graph.add_edge(0, 5, weight=2)\n        graph.add_edge(1, 2, weight=3)\n        graph.add_edge(2, 3, weight=4)\n        graph.add_edge(3, 4, weight=5)\n        graph.add_edge(3, 5, weight=6)\n        graph.add_edge(4, 0, weight=7)\n        graph.add_edge(5, 4, weight=8)\n        graph.add_edge(5, 2, weight=9)\n\n        assert_equal(graph.nodes[0].adj_weights[graph.nodes[1].key], 5)\n        assert_equal(graph.nodes[0].adj_weights[graph.nodes[5].key], 2)\n        assert_equal(graph.nodes[1].adj_weights[graph.nodes[2].key], 3)\n        assert_equal(graph.nodes[2].adj_weights[graph.nodes[3].key], 4)\n        assert_equal(graph.nodes[3].adj_weights[graph.nodes[4].key], 5)\n        assert_equal(graph.nodes[3].adj_weights[graph.nodes[5].key], 6)\n        assert_equal(graph.nodes[4].adj_weights[graph.nodes[0].key], 7)\n        assert_equal(graph.nodes[5].adj_weights[graph.nodes[4].key], 8)\n        assert_equal(graph.nodes[5].adj_weights[graph.nodes[2].key], 9)\n\n        assert_equal(graph.nodes[0].incoming_edges, 1)\n        assert_equal(graph.nodes[1].incoming_edges, 1)\n        assert_equal(graph.nodes[2].incoming_edges, 2)\n        assert_equal(graph.nodes[3].incoming_edges, 1)\n        assert_equal(graph.nodes[4].incoming_edges, 2)\n        assert_equal(graph.nodes[5].incoming_edges, 2)\n\n        graph.nodes[0].remove_neighbor(graph.nodes[1])\n        assert_equal(graph.nodes[1].incoming_edges, 0)\n        graph.nodes[3].remove_neighbor(graph.nodes[4])\n        assert_equal(graph.nodes[4].incoming_edges, 1)\n\n        assert_equal(graph.nodes[0] < graph.nodes[1], True)\n\n        print('Success: test_graph')\n\n    def test_graph_undirected(self):\n        graph = self.create_graph()\n        graph.add_undirected_edge(0, 1, weight=5)\n        graph.add_undirected_edge(0, 5, weight=2)\n        graph.add_undirected_edge(1, 2, weight=3)\n\n        assert_equal(graph.nodes[0].adj_weights[graph.nodes[1].key], 5)\n        assert_equal(graph.nodes[1].adj_weights[graph.nodes[0].key], 5)\n        assert_equal(graph.nodes[0].adj_weights[graph.nodes[5].key], 2)\n        assert_equal(graph.nodes[5].adj_weights[graph.nodes[0].key], 2)\n        assert_equal(graph.nodes[1].adj_weights[graph.nodes[2].key], 3)\n        assert_equal(graph.nodes[2].adj_weights[graph.nodes[1].key], 3)\n\n        print('Success: test_graph_undirected')\n\n\ndef main():\n    test = TestGraph()\n    test.test_graph()\n    test.test_graph_undirected()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_graph.py", "id": "4580c16a43072eefbf84cb7166f46df0", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/graph/test_graph.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}