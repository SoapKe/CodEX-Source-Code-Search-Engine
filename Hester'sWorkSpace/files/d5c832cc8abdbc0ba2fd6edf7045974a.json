{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2013, Nandor Sivok <nandor@gawker.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['deprecated'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: netscaler\nversion_added: \"1.1\"\nshort_description: Manages Citrix NetScaler entities\ndescription:\n     - Manages Citrix NetScaler server and service entities.\ndeprecated:\n  removed_in: \"2.8\"\n  why: Replaced with Citrix maintained version.\n  alternative: Use M(netscaler_service) and M(netscaler_server) instead.\noptions:\n  nsc_host:\n    description:\n      - Hostname or ip of your netscaler.\n    required: true\n  nsc_protocol:\n    description:\n      - Protocol used to access netscaler.\n    default: https\n  user:\n    description:\n      - Username.\n    required: true\n  password:\n    description:\n      - Password.\n    required: true\n  action:\n    description:\n      - The action you want to perform on the entity.\n    choices: [ disable, enable ]\n    default: disable\n  name:\n    description:\n      - Name of the entity.\n    required: true\n    default: hostname\n  type:\n    description:\n      - Type of the entity.\n    choices: [ server, service ]\n    default: server\n  validate_certs:\n    description:\n      - If C(no), SSL certificates for the target url will not be validated.\n      - This should only be used on personally controlled sites using self-signed certificates.\n    type: bool\n    default: 'yes'\nauthor:\n- Nandor Sivok (@dominis)\n'''\n\nEXAMPLES = '''\n- name: Disable the server\n  netscaler:\n    nsc_host: nsc.example.com\n    user: apiuser\n    password: apipass\n\n- name: Enable the server\n  netscaler:\n    nsc_host: nsc.example.com\n    user: apiuser\n    password: apipass\n    action: enable\n\n- name: Disable the service local:8080\n  netscaler:\n    nsc_host: nsc.example.com\n    user: apiuser\n    password: apipass\n    name: local:8080\n    type: service\n    action: disable\n'''\n\nimport base64\nimport json\nimport socket\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib.parse import urlencode\nfrom ansible.module_utils._text import to_native\nfrom ansible.module_utils.urls import fetch_url\n\n\nclass netscaler(object):\n\n    _nitro_base_url = '/nitro/v1/'\n\n    def __init__(self, module):\n        self.module = module\n\n    def http_request(self, api_endpoint, data_json=None):\n        data_josn = {} if data_json is None else data_json\n\n        request_url = self._nsc_protocol + '://' + self._nsc_host + self._nitro_base_url + api_endpoint\n\n        data_json = urlencode(data_json)\n        if not len(data_json):\n            data_json = None\n\n        auth = base64.encodestring('%s:%s' % (self._nsc_user, self._nsc_pass)).replace('\\n', '').strip()\n        headers = {\n            'Authorization': 'Basic %s' % auth,\n            'Content-Type': 'application/x-www-form-urlencoded',\n        }\n\n        response, info = fetch_url(self.module, request_url, data=data_json, headers=headers)\n\n        return json.load(response)\n\n    def prepare_request(self, action):\n        resp = self.http_request(\n            'config',\n            {\n                \"object\":\n                {\n                    \"params\": {\"action\": action},\n                    self._type: {\"name\": self._name}\n                }\n            }\n        )\n\n        return resp\n\n\ndef core(module):\n    n = netscaler(module)\n    n._nsc_host = module.params.get('nsc_host')\n    n._nsc_user = module.params.get('user')\n    n._nsc_pass = module.params.get('password')\n    n._nsc_protocol = module.params.get('nsc_protocol')\n    n._name = module.params.get('name')\n    n._type = module.params.get('type')\n    action = module.params.get('action')\n\n    r = n.prepare_request(action)\n\n    return r['errorcode'], r\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            nsc_host=dict(type='str', required=True),\n            nsc_protocol=dict(type='str', default='https'),\n            user=dict(type='str', required=True),\n            password=dict(type='str', required=True, no_log=True),\n            action=dict(type='str', default='enable', choices=['disable', 'enable']),\n            name=dict(type='str', default=socket.gethostname()),\n            type=dict(type='str', default='server', choices=['server', 'service']),\n            validate_certs=dict(type='bool', default=True),\n        ),\n    )\n\n    rc = 0\n    try:\n        rc, result = core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n    if rc != 0:\n        module.fail_json(rc=rc, msg=result)\n    else:\n        result['changed'] = True\n        module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  netscaler version added   1 1  short description  manages citrix netscaler entities description         manages citrix netscaler server service entities  deprecated    removed   2 8     replaced citrix maintained version    alternative  use m(netscaler service) m(netscaler server) instead  options    nsc host      description          hostname ip netscaler      required  true   nsc protocol      description          protocol used access netscaler      default  https   user      description          username      required  true   password      description          password      required  true   action      description          the action want perform entity      choices    disable  enable       default  disable   name      description          name entity      required  true     default  hostname   type      description          type entity      choices    server  service       default  server   validate certs      description          if c(no)  ssl certificates target url validated          this used personally controlled sites using self signed certificates      type  bool     default   yes  author    nandor sivok ( dominis)      examples         name  disable server   netscaler      nsc host  nsc example com     user  apiuser     password  apipass    name  enable server   netscaler      nsc host  nsc example com     user  apiuser     password  apipass     action  enable    name  disable service local 8080   netscaler      nsc host  nsc example com     user  apiuser     password  apipass     name  local 8080     type  service     action  disable         usr bin python        coding  utf 8        copyright  (c) 2013  nandor sivok  nandor gawker com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2013, Nandor Sivok <nandor@gawker.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['deprecated'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: netscaler\nversion_added: \"1.1\"\nshort_description: Manages Citrix NetScaler entities\ndescription:\n     - Manages Citrix NetScaler server and service entities.\ndeprecated:\n  removed_in: \"2.8\"\n  why: Replaced with Citrix maintained version.\n  alternative: Use M(netscaler_service) and M(netscaler_server) instead.\noptions:\n  nsc_host:\n    description:\n      - Hostname or ip of your netscaler.\n    required: true\n  nsc_protocol:\n    description:\n      - Protocol used to access netscaler.\n    default: https\n  user:\n    description:\n      - Username.\n    required: true\n  password:\n    description:\n      - Password.\n    required: true\n  action:\n    description:\n      - The action you want to perform on the entity.\n    choices: [ disable, enable ]\n    default: disable\n  name:\n    description:\n      - Name of the entity.\n    required: true\n    default: hostname\n  type:\n    description:\n      - Type of the entity.\n    choices: [ server, service ]\n    default: server\n  validate_certs:\n    description:\n      - If C(no), SSL certificates for the target url will not be validated.\n      - This should only be used on personally controlled sites using self-signed certificates.\n    type: bool\n    default: 'yes'\nauthor:\n- Nandor Sivok (@dominis)\n'''\n\nEXAMPLES = '''\n- name: Disable the server\n  netscaler:\n    nsc_host: nsc.example.com\n    user: apiuser\n    password: apipass\n\n- name: Enable the server\n  netscaler:\n    nsc_host: nsc.example.com\n    user: apiuser\n    password: apipass\n    action: enable\n\n- name: Disable the service local:8080\n  netscaler:\n    nsc_host: nsc.example.com\n    user: apiuser\n    password: apipass\n    name: local:8080\n    type: service\n    action: disable\n'''\n\nimport base64\nimport json\nimport socket\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves.urllib.parse import urlencode\nfrom ansible.module_utils._text import to_native\nfrom ansible.module_utils.urls import fetch_url\n\n\nclass netscaler(object):\n\n    _nitro_base_url = '/nitro/v1/'\n\n    def __init__(self, module):\n        self.module = module\n\n    def http_request(self, api_endpoint, data_json=None):\n        data_josn = {} if data_json is None else data_json\n\n        request_url = self._nsc_protocol + '://' + self._nsc_host + self._nitro_base_url + api_endpoint\n\n        data_json = urlencode(data_json)\n        if not len(data_json):\n            data_json = None\n\n        auth = base64.encodestring('%s:%s' % (self._nsc_user, self._nsc_pass)).replace('\\n', '').strip()\n        headers = {\n            'Authorization': 'Basic %s' % auth,\n            'Content-Type': 'application/x-www-form-urlencoded',\n        }\n\n        response, info = fetch_url(self.module, request_url, data=data_json, headers=headers)\n\n        return json.load(response)\n\n    def prepare_request(self, action):\n        resp = self.http_request(\n            'config',\n            {\n                \"object\":\n                {\n                    \"params\": {\"action\": action},\n                    self._type: {\"name\": self._name}\n                }\n            }\n        )\n\n        return resp\n\n\ndef core(module):\n    n = netscaler(module)\n    n._nsc_host = module.params.get('nsc_host')\n    n._nsc_user = module.params.get('user')\n    n._nsc_pass = module.params.get('password')\n    n._nsc_protocol = module.params.get('nsc_protocol')\n    n._name = module.params.get('name')\n    n._type = module.params.get('type')\n    action = module.params.get('action')\n\n    r = n.prepare_request(action)\n\n    return r['errorcode'], r\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            nsc_host=dict(type='str', required=True),\n            nsc_protocol=dict(type='str', default='https'),\n            user=dict(type='str', required=True),\n            password=dict(type='str', required=True, no_log=True),\n            action=dict(type='str', default='enable', choices=['disable', 'enable']),\n            name=dict(type='str', default=socket.gethostname()),\n            type=dict(type='str', default='server', choices=['server', 'service']),\n            validate_certs=dict(type='bool', default=True),\n        ),\n    )\n\n    rc = 0\n    try:\n        rc, result = core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\n    if rc != 0:\n        module.fail_json(rc=rc, msg=result)\n    else:\n        result['changed'] = True\n        module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "_netscaler.py", "id": "d5c832cc8abdbc0ba2fd6edf7045974a", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/citrix/_netscaler.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}