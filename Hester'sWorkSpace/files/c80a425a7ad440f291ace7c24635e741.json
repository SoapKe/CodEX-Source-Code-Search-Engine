{"author": "odoo", "code": "# # -*- coding: utf-8 -*-\n\n\nfrom odoo.tests import common\n\n\n@common.at_install(False)\n@common.post_install(True)\nclass base_automation_test(common.TransactionCase):\n\n    def setUp(self):\n        super(base_automation_test, self).setUp()\n        self.user_admin = self.env.ref('base.user_root')\n        self.user_demo = self.env.ref('base.user_demo')\n\n    def create_lead(self, **kwargs):\n        vals = {\n            'name': \"Lead Test\",\n            'user_id': self.user_admin.id,\n        }\n        vals.update(kwargs)\n        return self.env['base.automation.lead.test'].create(vals)\n\n    def test_00_check_to_state_open_pre(self):\n        \"\"\"\n        Check that a new record (with state = open) doesn't change its responsible\n        when there is a precondition filter which check that the state is open.\n        \"\"\"\n        lead = self.create_lead(state='open')\n        self.assertEqual(lead.state, 'open')\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state 'open'.\")\n\n    def test_01_check_to_state_draft_post(self):\n        \"\"\"\n        Check that a new record changes its responsible when there is a postcondition\n        filter which check that the state is draft.\n        \"\"\"\n        lead = self.create_lead()\n        self.assertEqual(lead.state, 'draft', \"Lead state should be 'draft'\")\n        self.assertEqual(lead.user_id, self.user_demo, \"Responsible should be change on creation of Lead with state 'draft'.\")\n\n    def test_02_check_from_draft_to_done_with_steps(self):\n        \"\"\"\n        A new record is created and goes from states 'open' to 'done' via the\n        other states (open, pending and cancel). We have a rule with:\n         - precondition: the record is in \"open\"\n         - postcondition: that the record is \"done\".\n        If the state goes from 'open' to 'done' the responsible is changed.\n        If those two conditions aren't verified, the responsible remains the same.\n        \"\"\"\n        lead = self.create_lead(state='open')\n        self.assertEqual(lead.state, 'open', \"Lead state should be 'open'\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state 'open'.\")\n        \n        lead.write({'state': 'pending'})\n        self.assertEqual(lead.state, 'pending', \"Lead state should be 'pending'\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state from 'draft' to 'open'.\")\n        \n        lead.write({'state': 'done'})\n        self.assertEqual(lead.state, 'done', \"Lead state should be 'done'\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not chang on creation of Lead with state from 'pending' to 'done'.\")\n\n    def test_03_check_from_draft_to_done_without_steps(self):\n        \"\"\"\n        A new record is created and goes from states 'open' to 'done' via the\n        other states (open, pending and cancel). We have a rule with:\n         - precondition: the record is in \"open\"\n         - postcondition: that the record is \"done\".\n        If the state goes from 'open' to 'done' the responsible is changed.\n        If those two conditions aren't verified, the responsible remains the same.\n        \"\"\"\n        lead = self.create_lead(state='open')\n        self.assertEqual(lead.state, 'open', \"Lead state should be 'open'\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state 'open'.\")\n        \n        lead.write({'state': 'done'})\n        self.assertEqual(lead.state, 'done', \"Lead state should be 'done'\")\n        self.assertEqual(lead.user_id, self.user_demo, \"Responsible should be change on write of Lead with state from 'open' to 'done'.\")\n\n    def test_10_recomputed_field(self):\n        \"\"\"\n        Check that a rule is executed whenever a field is recomputed after a\n        change on another model.\n        \"\"\"\n        partner = self.env.ref('base.res_partner_1')\n        partner.write({'customer': False})\n        lead = self.create_lead(state='open', partner_id=partner.id)\n        self.assertFalse(lead.customer, \"Customer field should updated to False\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state from 'draft' to 'open'.\")\n        \n        partner.write({'customer': True})\n        self.assertTrue(lead.customer, \"Customer field should updated to True\")\n        self.assertEqual(lead.user_id, self.user_demo, \"Responsible should be change on write of Lead when Customer becomes True.\")\n\n    def test_11_recomputed_field(self):\n        \"\"\"\n        Check that a rule is executed whenever a field is recomputed and the\n        context contains the target field\n        \"\"\"\n        partner = self.env.ref('base.res_partner_1')\n        lead = self.create_lead(state='draft', partner_id=partner.id)\n        self.assertFalse(lead.deadline, 'There should not be a deadline defined')\n        \n        \n        lead.write({'priority': True, 'user_id': self.user_admin.id})\n        self.assertTrue(lead.deadline, 'Deadline should be defined')\n        self.assertTrue(lead.is_assigned_to_admin, 'Lead should be assigned to admin')\n\n    def test_12_recursive(self):\n        \"\"\" Check that a rule is executed recursively by a secondary change. \"\"\"\n        lead = self.create_lead(state='open')\n        self.assertEqual(lead.state, 'open')\n        self.assertEqual(lead.user_id, self.user_admin)\n        \n        partner = self.env.ref('base.res_partner_1')\n        lead.write({'partner_id': partner.id})\n        self.assertEqual(lead.state, 'draft')\n\n    def test_20_direct_line(self):\n        \"\"\"\n        Check that a rule is executed after creating a line record.\n        \"\"\"\n        line = self.env['base.automation.line.test'].create({'name': \"Line\"})\n        self.assertEqual(line.user_id, self.user_demo)\n\n    def test_20_indirect_line(self):\n        \"\"\"\n        Check that creating a lead with a line executes rules on both records.\n        \"\"\"\n        lead = self.create_lead(line_ids=[(0, 0, {'name': \"Line\"})])\n        self.assertEqual(lead.state, 'draft', \"Lead state should be 'draft'\")\n        self.assertEqual(lead.user_id, self.user_demo, \"Responsible should change on creation of Lead test line.\")\n        self.assertEqual(len(lead.line_ids), 1, \"New test line is not created\")\n        self.assertEqual(lead.line_ids.user_id, self.user_demo, \"Responsible should be change on creation of Lead test line.\")\n", "comments": "            check new record (with state   open) change responsible         precondition filter check state open                      lead   self create lead(state  open )         self assertequal(lead state   open )         self assertequal(lead user id  self user admin   responsible change creation lead state  open   )      def test 01 check state draft post(self)                      check new record changes responsible postcondition         filter check state draft                      lead   self create lead()         self assertequal(lead state   draft    lead state  draft  )         self assertequal(lead user id  self user demo   responsible change creation lead state  draft   )      def test 02 check draft done steps(self)                      a new record created goes states  open   done  via         states (open  pending cancel)  we rule             precondition  record  open             postcondition  record  done           if state goes  open   done  responsible changed          if two conditions verified  responsible remains                      lead   self create lead(state  open )         self assertequal(lead state   open    lead state  open  )         self assertequal(lead user id  self user admin   responsible change creation lead state  open   )           change state pending check responsible changed         lead write(  state    pending  )         self assertequal(lead state   pending    lead state  pending  )         self assertequal(lead user id  self user admin   responsible change creation lead state  draft   open   )           change state done check responsible changed         lead write(  state    done  )         self assertequal(lead state   done    lead state  done  )         self assertequal(lead user id  self user admin   responsible chang creation lead state  pending   done   )      def test 03 check draft done without steps(self)                      a new record created goes states  open   done  via         states (open  pending cancel)  we rule             precondition  record  open             postcondition  record  done           if state goes  open   done  responsible changed          if two conditions verified  responsible remains                      lead   self create lead(state  open )         self assertequal(lead state   open    lead state  open  )         self assertequal(lead user id  self user admin   responsible change creation lead state  open   )           change state done check responsible changed         lead write(  state    done  )         self assertequal(lead state   done    lead state  done  )         self assertequal(lead user id  self user demo   responsible change write lead state  open   done   )      def test 10 recomputed field(self)                      check rule executed whenever field recomputed         change another model                      partner   self env ref( base res partner 1 )         partner write(  customer   false )         lead   self create lead(state  open   partner id partner id)         self assertfalse(lead customer   customer field updated false )         self assertequal(lead user id  self user admin   responsible change creation lead state  draft   open   )           change partner  recompute lead trigger rule         partner write(  customer   true )         self asserttrue(lead customer   customer field updated true )         self assertequal(lead user id  self user demo   responsible change write lead customer becomes true  )      def test 11 recomputed field(self)                      check rule executed whenever field recomputed         context contains target field                     partner   self env ref( base res partner 1 )         lead   self create lead(state  draft   partner id partner id)         self assertfalse(lead deadline   there deadline defined )           change priority user  triggers deadline recomputation            server action set boolean field true         lead write(  priority   true   user id   self user admin id )         self asserttrue(lead deadline   deadline defined )         self asserttrue(lead assigned admin   lead assigned admin )      def test 12 recursive(self)              check rule executed recursively secondary change              lead   self create lead(state  open )         self assertequal(lead state   open )         self assertequal(lead user id  self user admin)           change partner  trigger rule modifies state         partner   self env ref( base res partner 1 )         lead write(  partner id   partner id )         self assertequal(lead state   draft )      def test 20 direct line(self)                      check rule executed creating line record                      line   self env  base automation line test   create(  name    line  )         self assertequal(line user id  self user demo)      def test 20 indirect line(self)                      check creating lead line executes rules records                       coding  utf 8          part odoo  see license file full copyright licensing details     change state pending check responsible changed    change state done check responsible changed    change state done check responsible changed    change partner  recompute lead trigger rule    change priority user  triggers deadline recomputation     server action set boolean field true    change partner  trigger rule modifies state ", "content": "# # -*- coding: utf-8 -*-\n# # Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.tests import common\n\n\n@common.at_install(False)\n@common.post_install(True)\nclass base_automation_test(common.TransactionCase):\n\n    def setUp(self):\n        super(base_automation_test, self).setUp()\n        self.user_admin = self.env.ref('base.user_root')\n        self.user_demo = self.env.ref('base.user_demo')\n\n    def create_lead(self, **kwargs):\n        vals = {\n            'name': \"Lead Test\",\n            'user_id': self.user_admin.id,\n        }\n        vals.update(kwargs)\n        return self.env['base.automation.lead.test'].create(vals)\n\n    def test_00_check_to_state_open_pre(self):\n        \"\"\"\n        Check that a new record (with state = open) doesn't change its responsible\n        when there is a precondition filter which check that the state is open.\n        \"\"\"\n        lead = self.create_lead(state='open')\n        self.assertEqual(lead.state, 'open')\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state 'open'.\")\n\n    def test_01_check_to_state_draft_post(self):\n        \"\"\"\n        Check that a new record changes its responsible when there is a postcondition\n        filter which check that the state is draft.\n        \"\"\"\n        lead = self.create_lead()\n        self.assertEqual(lead.state, 'draft', \"Lead state should be 'draft'\")\n        self.assertEqual(lead.user_id, self.user_demo, \"Responsible should be change on creation of Lead with state 'draft'.\")\n\n    def test_02_check_from_draft_to_done_with_steps(self):\n        \"\"\"\n        A new record is created and goes from states 'open' to 'done' via the\n        other states (open, pending and cancel). We have a rule with:\n         - precondition: the record is in \"open\"\n         - postcondition: that the record is \"done\".\n        If the state goes from 'open' to 'done' the responsible is changed.\n        If those two conditions aren't verified, the responsible remains the same.\n        \"\"\"\n        lead = self.create_lead(state='open')\n        self.assertEqual(lead.state, 'open', \"Lead state should be 'open'\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state 'open'.\")\n        # change state to pending and check that responsible has not changed\n        lead.write({'state': 'pending'})\n        self.assertEqual(lead.state, 'pending', \"Lead state should be 'pending'\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state from 'draft' to 'open'.\")\n        # change state to done and check that responsible has not changed\n        lead.write({'state': 'done'})\n        self.assertEqual(lead.state, 'done', \"Lead state should be 'done'\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not chang on creation of Lead with state from 'pending' to 'done'.\")\n\n    def test_03_check_from_draft_to_done_without_steps(self):\n        \"\"\"\n        A new record is created and goes from states 'open' to 'done' via the\n        other states (open, pending and cancel). We have a rule with:\n         - precondition: the record is in \"open\"\n         - postcondition: that the record is \"done\".\n        If the state goes from 'open' to 'done' the responsible is changed.\n        If those two conditions aren't verified, the responsible remains the same.\n        \"\"\"\n        lead = self.create_lead(state='open')\n        self.assertEqual(lead.state, 'open', \"Lead state should be 'open'\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state 'open'.\")\n        # change state to done and check that responsible has changed\n        lead.write({'state': 'done'})\n        self.assertEqual(lead.state, 'done', \"Lead state should be 'done'\")\n        self.assertEqual(lead.user_id, self.user_demo, \"Responsible should be change on write of Lead with state from 'open' to 'done'.\")\n\n    def test_10_recomputed_field(self):\n        \"\"\"\n        Check that a rule is executed whenever a field is recomputed after a\n        change on another model.\n        \"\"\"\n        partner = self.env.ref('base.res_partner_1')\n        partner.write({'customer': False})\n        lead = self.create_lead(state='open', partner_id=partner.id)\n        self.assertFalse(lead.customer, \"Customer field should updated to False\")\n        self.assertEqual(lead.user_id, self.user_admin, \"Responsible should not change on creation of Lead with state from 'draft' to 'open'.\")\n        # change partner, recompute on lead should trigger the rule\n        partner.write({'customer': True})\n        self.assertTrue(lead.customer, \"Customer field should updated to True\")\n        self.assertEqual(lead.user_id, self.user_demo, \"Responsible should be change on write of Lead when Customer becomes True.\")\n\n    def test_11_recomputed_field(self):\n        \"\"\"\n        Check that a rule is executed whenever a field is recomputed and the\n        context contains the target field\n        \"\"\"\n        partner = self.env.ref('base.res_partner_1')\n        lead = self.create_lead(state='draft', partner_id=partner.id)\n        self.assertFalse(lead.deadline, 'There should not be a deadline defined')\n        # change priority and user; this triggers deadline recomputation, and\n        # the server action should set the boolean field to True\n        lead.write({'priority': True, 'user_id': self.user_admin.id})\n        self.assertTrue(lead.deadline, 'Deadline should be defined')\n        self.assertTrue(lead.is_assigned_to_admin, 'Lead should be assigned to admin')\n\n    def test_12_recursive(self):\n        \"\"\" Check that a rule is executed recursively by a secondary change. \"\"\"\n        lead = self.create_lead(state='open')\n        self.assertEqual(lead.state, 'open')\n        self.assertEqual(lead.user_id, self.user_admin)\n        # change partner; this should trigger the rule that modifies the state\n        partner = self.env.ref('base.res_partner_1')\n        lead.write({'partner_id': partner.id})\n        self.assertEqual(lead.state, 'draft')\n\n    def test_20_direct_line(self):\n        \"\"\"\n        Check that a rule is executed after creating a line record.\n        \"\"\"\n        line = self.env['base.automation.line.test'].create({'name': \"Line\"})\n        self.assertEqual(line.user_id, self.user_demo)\n\n    def test_20_indirect_line(self):\n        \"\"\"\n        Check that creating a lead with a line executes rules on both records.\n        \"\"\"\n        lead = self.create_lead(line_ids=[(0, 0, {'name': \"Line\"})])\n        self.assertEqual(lead.state, 'draft', \"Lead state should be 'draft'\")\n        self.assertEqual(lead.user_id, self.user_demo, \"Responsible should change on creation of Lead test line.\")\n        self.assertEqual(len(lead.line_ids), 1, \"New test line is not created\")\n        self.assertEqual(lead.line_ids.user_id, self.user_demo, \"Responsible should be change on creation of Lead test line.\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_base_automation.py", "id": "c80a425a7ad440f291ace7c24635e741", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/base_automation/tests/test_base_automation.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}