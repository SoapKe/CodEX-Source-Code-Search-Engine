{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['stableinterface'],\n                    'supported_by': 'certified'}\n\n\nDOCUMENTATION = '''\n---\nmodule: sts_session_token\nshort_description: Obtain a session token from the AWS Security Token Service\ndescription:\n    - Obtain a session token from the AWS Security Token Service\nversion_added: \"2.2\"\nauthor: Victor Costan (@pwnall)\noptions:\n  duration_seconds:\n    description:\n      - The duration, in seconds, of the session token.\n        See http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html\n        for acceptable and default values.\n  mfa_serial_number:\n    description:\n      - The identification number of the MFA device that is associated with the user who is making the GetSessionToken call.\n  mfa_token:\n    description:\n      - The value provided by the MFA device, if the trust policy of the user requires MFA.\nnotes:\n  - In order to use the session token in a following playbook task you must pass the I(access_key), I(access_secret) and I(access_token).\nextends_documentation_fragment:\n    - aws\n    - ec2\nrequirements:\n    - boto3\n    - botocore\n    - python >= 2.6\n'''\n\nRETURN = \"\"\"\nsts_creds:\n    description: The Credentials object returned by the AWS Security Token Service\n    returned: always\n    type: list\n    sample:\n      access_key: ASXXXXXXXXXXXXXXXXXX\n      expiration: \"2016-04-08T11:59:47+00:00\"\n      secret_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n      session_token: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nchanged:\n    description: True if obtaining the credentials succeeds\n    type: bool\n    returned: always\n\"\"\"\n\n\nEXAMPLES = '''\n\n\n# Get a session token (more details: http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html)\nsts_session_token:\n  duration_seconds: 3600\nregister: session_credentials\n\n\nec2_tag:\n  aws_access_key: \"{{ session_credentials.sts_creds.access_key }}\"\n  aws_secret_key: \"{{ session_credentials.sts_creds.secret_key }}\"\n  security_token: \"{{ session_credentials.sts_creds.session_token }}\"\n  resource: i-xyzxyz01\n  state: present\n  tags:\n    MyNewTag: value\n\n'''\n\ntry:\n    import boto3\n    from botocore.exceptions import ClientError\n    HAS_BOTO3 = True\nexcept ImportError:\n    HAS_BOTO3 = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ec2 import boto3_conn, ec2_argument_spec, get_aws_connection_info\n\n\ndef normalize_credentials(credentials):\n    access_key = credentials.get('AccessKeyId', None)\n    secret_key = credentials.get('SecretAccessKey', None)\n    session_token = credentials.get('SessionToken', None)\n    expiration = credentials.get('Expiration', None)\n    return {\n        'access_key': access_key,\n        'secret_key': secret_key,\n        'session_token': session_token,\n        'expiration': expiration\n    }\n\n\ndef get_session_token(connection, module):\n    duration_seconds = module.params.get('duration_seconds')\n    mfa_serial_number = module.params.get('mfa_serial_number')\n    mfa_token = module.params.get('mfa_token')\n    changed = False\n\n    args = {}\n    if duration_seconds is not None:\n        args['DurationSeconds'] = duration_seconds\n    if mfa_serial_number is not None:\n        args['SerialNumber'] = mfa_serial_number\n    if mfa_token is not None:\n        args['TokenCode'] = mfa_token\n\n    try:\n        response = connection.get_session_token(**args)\n        changed = True\n    except ClientError as e:\n        module.fail_json(msg=e)\n\n    credentials = normalize_credentials(response.get('Credentials', {}))\n    module.exit_json(changed=changed, sts_creds=credentials)\n\n\ndef main():\n    argument_spec = ec2_argument_spec()\n    argument_spec.update(\n        dict(\n            duration_seconds=dict(required=False, default=None, type='int'),\n            mfa_serial_number=dict(required=False, default=None),\n            mfa_token=dict(required=False, default=None)\n        )\n    )\n\n    module = AnsibleModule(argument_spec=argument_spec)\n\n    if not HAS_BOTO3:\n        module.fail_json(msg='boto3 and botocore are required.')\n\n    region, ec2_url, aws_connect_kwargs = get_aws_connection_info(module, boto3=True)\n    if region:\n        connection = boto3_conn(module, conn_type='client', resource='sts', region=region, endpoint=ec2_url, **aws_connect_kwargs)\n    else:\n        module.fail_json(msg=\"region must be specified\")\n\n    get_session_token(connection, module)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "    sts creds      description  the credentials object returned aws security token service     returned  always     type  list     sample        access key  asxxxxxxxxxxxxxxxxxx       expiration   2016 04 08t11 59 47 00 00        secret key  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       session token  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx changed      description  true obtaining credentials succeeds     type  bool     returned  always              module  sts session token short description  obtain session token aws security token service description        obtain session token aws security token service version added   2 2  author  victor costan ( pwnall) options    duration seconds      description          the duration  seconds  session token          see http   docs aws amazon com sts latest apireference api getsessiontoken html api getsessiontoken requestparameters         acceptable default values    mfa serial number      description          the identification number mfa device associated user making getsessiontoken call    mfa token      description          the value provided mfa device  trust policy user requires mfa  notes      in order use session token following playbook task must pass i(access key)  i(access secret) i(access token)  extends documentation fragment        aws       ec2 requirements        boto3       botocore       python    2 6      return       sts creds      description  the credentials object returned aws security token service     returned  always     type  list     sample        access key  asxxxxxxxxxxxxxxxxxx       expiration   2016 04 08t11 59 47 00 00        secret key  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx       session token  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx changed      description  true obtaining credentials succeeds     type  bool     returned  always       examples         note  these examples set authentication details  see aws guide details     get session token (more details  http   docs aws amazon com sts latest apireference api getsessiontoken html) sts session token    duration seconds  3600 register  session credentials    use session token obtained tag instance account 123456789012 ec2 tag    aws access key      session credentials sts creds access key       aws secret key      session credentials sts creds secret key       security token      session credentials sts creds session token       resource  xyzxyz01   state  present   tags      mynewtag  value          usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)   api getsessiontoken requestparameters    note  these examples set authentication details  see aws guide details     get session token (more details  http   docs aws amazon com sts latest apireference api getsessiontoken html)    use session token obtained tag instance account 123456789012 ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['stableinterface'],\n                    'supported_by': 'certified'}\n\n\nDOCUMENTATION = '''\n---\nmodule: sts_session_token\nshort_description: Obtain a session token from the AWS Security Token Service\ndescription:\n    - Obtain a session token from the AWS Security Token Service\nversion_added: \"2.2\"\nauthor: Victor Costan (@pwnall)\noptions:\n  duration_seconds:\n    description:\n      - The duration, in seconds, of the session token.\n        See http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html#API_GetSessionToken_RequestParameters\n        for acceptable and default values.\n  mfa_serial_number:\n    description:\n      - The identification number of the MFA device that is associated with the user who is making the GetSessionToken call.\n  mfa_token:\n    description:\n      - The value provided by the MFA device, if the trust policy of the user requires MFA.\nnotes:\n  - In order to use the session token in a following playbook task you must pass the I(access_key), I(access_secret) and I(access_token).\nextends_documentation_fragment:\n    - aws\n    - ec2\nrequirements:\n    - boto3\n    - botocore\n    - python >= 2.6\n'''\n\nRETURN = \"\"\"\nsts_creds:\n    description: The Credentials object returned by the AWS Security Token Service\n    returned: always\n    type: list\n    sample:\n      access_key: ASXXXXXXXXXXXXXXXXXX\n      expiration: \"2016-04-08T11:59:47+00:00\"\n      secret_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n      session_token: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nchanged:\n    description: True if obtaining the credentials succeeds\n    type: bool\n    returned: always\n\"\"\"\n\n\nEXAMPLES = '''\n# Note: These examples do not set authentication details, see the AWS Guide for details.\n\n# Get a session token (more details: http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html)\nsts_session_token:\n  duration_seconds: 3600\nregister: session_credentials\n\n# Use the session token obtained above to tag an instance in account 123456789012\nec2_tag:\n  aws_access_key: \"{{ session_credentials.sts_creds.access_key }}\"\n  aws_secret_key: \"{{ session_credentials.sts_creds.secret_key }}\"\n  security_token: \"{{ session_credentials.sts_creds.session_token }}\"\n  resource: i-xyzxyz01\n  state: present\n  tags:\n    MyNewTag: value\n\n'''\n\ntry:\n    import boto3\n    from botocore.exceptions import ClientError\n    HAS_BOTO3 = True\nexcept ImportError:\n    HAS_BOTO3 = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ec2 import boto3_conn, ec2_argument_spec, get_aws_connection_info\n\n\ndef normalize_credentials(credentials):\n    access_key = credentials.get('AccessKeyId', None)\n    secret_key = credentials.get('SecretAccessKey', None)\n    session_token = credentials.get('SessionToken', None)\n    expiration = credentials.get('Expiration', None)\n    return {\n        'access_key': access_key,\n        'secret_key': secret_key,\n        'session_token': session_token,\n        'expiration': expiration\n    }\n\n\ndef get_session_token(connection, module):\n    duration_seconds = module.params.get('duration_seconds')\n    mfa_serial_number = module.params.get('mfa_serial_number')\n    mfa_token = module.params.get('mfa_token')\n    changed = False\n\n    args = {}\n    if duration_seconds is not None:\n        args['DurationSeconds'] = duration_seconds\n    if mfa_serial_number is not None:\n        args['SerialNumber'] = mfa_serial_number\n    if mfa_token is not None:\n        args['TokenCode'] = mfa_token\n\n    try:\n        response = connection.get_session_token(**args)\n        changed = True\n    except ClientError as e:\n        module.fail_json(msg=e)\n\n    credentials = normalize_credentials(response.get('Credentials', {}))\n    module.exit_json(changed=changed, sts_creds=credentials)\n\n\ndef main():\n    argument_spec = ec2_argument_spec()\n    argument_spec.update(\n        dict(\n            duration_seconds=dict(required=False, default=None, type='int'),\n            mfa_serial_number=dict(required=False, default=None),\n            mfa_token=dict(required=False, default=None)\n        )\n    )\n\n    module = AnsibleModule(argument_spec=argument_spec)\n\n    if not HAS_BOTO3:\n        module.fail_json(msg='boto3 and botocore are required.')\n\n    region, ec2_url, aws_connect_kwargs = get_aws_connection_info(module, boto3=True)\n    if region:\n        connection = boto3_conn(module, conn_type='client', resource='sts', region=region, endpoint=ec2_url, **aws_connect_kwargs)\n    else:\n        module.fail_json(msg=\"region must be specified\")\n\n    get_session_token(connection, module)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "sts_session_token.py", "id": "b436bd0bc3f8f269b399414b202a8f8e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/amazon/sts_session_token.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}