{"author": "getsentry", "code": "from __future__ import absolute_import, print_function\n\nfrom django.utils import timezone\n\nfrom sentry.models import ProjectPlatform\nfrom sentry.testutils import TestCase\nfrom sentry.tasks.collect_project_platforms import collect_project_platforms\n\n\nclass CollectProjectPlatformsTest(TestCase):\n    def test_simple(self):\n        now = timezone.now()\n        organization = self.create_organization(name='foo')\n        project1 = self.create_project(organization=organization, name='foo', slug='foo')\n        project2 = self.create_project(organization=organization, name='bar', slug='bar')\n        self.create_group(project=project1, last_seen=now, platform='php')\n        self.create_group(project=project1, last_seen=now, platform='perl')\n        self.create_group(project=project2, last_seen=now, platform='python')\n\n        with self.tasks():\n            collect_project_platforms()\n\n        assert ProjectPlatform.objects.filter(project_id=project1.id, platform='php').exists()\n        assert ProjectPlatform.objects.filter(project_id=project1.id, platform='perl').exists()\n        assert ProjectPlatform.objects.filter(project_id=project2.id, platform='python').exists()\n", "comments": "", "content": "from __future__ import absolute_import, print_function\n\nfrom django.utils import timezone\n\nfrom sentry.models import ProjectPlatform\nfrom sentry.testutils import TestCase\nfrom sentry.tasks.collect_project_platforms import collect_project_platforms\n\n\nclass CollectProjectPlatformsTest(TestCase):\n    def test_simple(self):\n        now = timezone.now()\n        organization = self.create_organization(name='foo')\n        project1 = self.create_project(organization=organization, name='foo', slug='foo')\n        project2 = self.create_project(organization=organization, name='bar', slug='bar')\n        self.create_group(project=project1, last_seen=now, platform='php')\n        self.create_group(project=project1, last_seen=now, platform='perl')\n        self.create_group(project=project2, last_seen=now, platform='python')\n\n        with self.tasks():\n            collect_project_platforms()\n\n        assert ProjectPlatform.objects.filter(project_id=project1.id, platform='php').exists()\n        assert ProjectPlatform.objects.filter(project_id=project1.id, platform='perl').exists()\n        assert ProjectPlatform.objects.filter(project_id=project2.id, platform='python').exists()\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_collect_project_platforms.py", "id": "4f4963b55d1af04369e6fc5f5b4d7cf2", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_collect_project_platforms.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}