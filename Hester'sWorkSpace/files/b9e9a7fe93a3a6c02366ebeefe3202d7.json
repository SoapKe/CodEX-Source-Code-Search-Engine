{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport hashlib\n\nfrom werkzeug import urls\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.tools.float_utils import float_compare\n\nimport logging\n\n_logger = logging.getLogger(__name__)\n\n\nclass PaymentAcquirerPayumoney(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('payumoney', 'PayUmoney')])\n    payumoney_merchant_key = fields.Char(string='Merchant Key', required_if_provider='payumoney', groups='base.group_user')\n    payumoney_merchant_salt = fields.Char(string='Merchant Salt', required_if_provider='payumoney', groups='base.group_user')\n\n    def _get_payumoney_urls(self, environment):\n        \"\"\" PayUmoney URLs\"\"\"\n        if environment == 'prod':\n            return {'payumoney_form_url': 'https://secure.payu.in/_payment'}\n        else:\n            return {'payumoney_form_url': 'https://test.payu.in/_payment'}\n\n    def _payumoney_generate_sign(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications.\n        :param self: the self browse record. It should have a shakey in shakey out\n        :param string inout: 'in' (odoo contacting payumoney) or 'out' (payumoney\n                             contacting odoo).\n        :param dict values: transaction values\n\n        :return string: shasign\n        \"\"\"\n        if inout not in ('in', 'out'):\n            raise Exception(\"Type must be 'in' or 'out'\")\n\n        if inout == 'in':\n            keys = \"key|||||||||||||||\".split('|')\n            sign = ''.join('%s|' % (values.get(k) or '') for k in keys)\n            sign += self.payumoney_merchant_salt or ''\n        else:\n            keys = \"|status|||||||||||||||\".split('|')\n            sign = ''.join('%s|' % (values.get(k) or '') for k in keys)\n            sign = self.payumoney_merchant_salt + sign + self.payumoney_merchant_key\n\n        shasign = hashlib.sha512(sign.encode('utf-8')).hexdigest()\n        return shasign\n\n    @api.multi\n    def payumoney_form_generate_values(self, values):\n        self.ensure_one()\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        payumoney_values = dict(values,\n                                key=self.payumoney_merchant_key,\n                                =values['reference'],\n                                =values[''],\n                                =values['reference'],\n                                =values.get('partner_name'),\n                                =values.get('partner_'),\n                                phone=values.get('partner_phone'),\n                                service_provider='payu_paisa',\n                                surl=urls.url_join(base_url, '/payment/payumoney/return'),\n                                furl=urls.url_join(base_url, '/payment/payumoney/error'),\n                                curl=urls.url_join(base_url, '/payment/payumoney/cancel')\n                                )\n\n        payumoney_values[''] = payumoney_values.pop('return_url', '/')\n        payumoney_values['hash'] = self._payumoney_generate_sign('in', payumoney_values)\n        return payumoney_values\n\n    @api.multi\n    def payumoney_get_form_action_url(self):\n        self.ensure_one()\n        return self._get_payumoney_urls(self.environment)['payumoney_form_url']\n\n\nclass PaymentTransactionPayumoney(models.Model):\n    _inherit = 'payment.transaction'\n\n    @api.model\n    def _payumoney_form_get_tx_from_data(self, data):\n        \"\"\" Given a data dict coming from payumoney, verify it and find the related\n        transaction record. \"\"\"\n        reference = data.get('')\n        pay_id = data.get('mihpayid')\n        shasign = data.get('hash')\n        if not reference or not pay_id or not shasign:\n            raise ValidationError(_('PayUmoney: received data with missing reference (%s) or pay_id (%s) or shashign (%s)') % (reference, pay_id, shasign))\n\n        transaction = self.search([('reference', '=', reference)])\n\n        if not transaction:\n            error_msg = (_('PayUmoney: received data for reference %s; no order found') % (reference))\n            raise ValidationError(error_msg)\n        elif len(transaction) > 1:\n            error_msg = (_('PayUmoney: received data for reference %s; multiple orders found') % (reference))\n            raise ValidationError(error_msg)\n\n        \n        shasign_check = transaction.acquirer_id._payumoney_generate_sign('out', data)\n        if shasign_check.upper() != shasign.upper():\n            raise ValidationError(_('PayUmoney: invalid shasign, received %s, computed %s, for data %s') % (shasign, shasign_check, data))\n        return transaction\n\n    @api.multi\n    def _payumoney_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        if self.acquirer_reference and data.get('mihpayid') != self.acquirer_reference:\n            invalid_parameters.append(\n                ('Transaction Id', data.get('mihpayid'), self.acquirer_reference))\n        \n        if float_compare(float(data.get('', '0.0')), self., 2) != 0:\n            invalid_parameters.append(\n                ('Amount', data.get(''), '%.2f' % self.))\n\n        return invalid_parameters\n\n    @api.multi\n    def _payumoney_form_validate(self, data):\n        status = data.get('status')\n        transaction_status = {\n            'success': {\n                'state': 'done',\n                'acquirer_reference': data.get('payuMoneyId'),\n                'date_validate': fields.Datetime.now(),\n            },\n            'pending': {\n                'state': 'pending',\n                'acquirer_reference': data.get('payuMoneyId'),\n                'date_validate': fields.Datetime.now(),\n            },\n            'failure': {\n                'state': 'cancel',\n                'acquirer_reference': data.get('payuMoneyId'),\n                'date_validate': fields.Datetime.now(),\n            },\n            'error': {\n                'state': 'error',\n                'state_message': data.get('error_Message') or _('PayUmoney: feedback error'),\n                'acquirer_reference': data.get('payuMoneyId'),\n                'date_validate': fields.Datetime.now(),\n            }\n        }\n        vals = transaction_status.get(status, False)\n        if not vals:\n            vals = transaction_status['error']\n            _logger.info(vals['state_message'])\n        return self.write(vals)\n", "comments": "    payumoney urls            environment     prod               return   payumoney form url    https   secure payu  payment           else              return   payumoney form url    https   test payu  payment        def  payumoney generate sign(self  inout  values)              generate shasign incoming outgoing communications           param self  self browse record  it shakey shakey          param string inout    (odoo contacting payumoney)   (payumoney                              contacting odoo)           param dict values  transaction values           return string  shasign                     inout (    )              raise exception( type must     )          inout                   keys    key txnid amount productinfo firstname email udf1           split(   )             sign      join(      (values get(k)   ) k keys)             sign    self payumoney merchant salt            else              keys     status          udf1 email firstname productinfo amount txnid  split(   )             sign      join(      (values get(k)   ) k keys)             sign   self payumoney merchant salt   sign   self payumoney merchant key          shasign   hashlib sha512(sign encode( utf 8 )) hexdigest()         return shasign       api multi     def payumoney form generate values(self  values)          self ensure one()         base url   self env  ir config parameter   sudo() get param( web base url )         payumoney values   dict(values                                  key self payumoney merchant key                                  txnid values  reference                                    amount values  amount                                    productinfo values  reference                                    firstname values get( partner name )                                  email values get( partner email )                                  phone values get( partner phone )                                  service provider  payu paisa                                   surl urls url join(base url    payment payumoney return )                                  furl urls url join(base url    payment payumoney error )                                  curl urls url join(base url    payment payumoney cancel )                                 )          payumoney values  udf1     payumoney values pop( return url      )         payumoney values  hash     self  payumoney generate sign(   payumoney values)         return payumoney values       api multi     def payumoney get form action url(self)          self ensure one()         return self  get payumoney urls(self environment)  payumoney form url     class paymenttransactionpayumoney(models model)       inherit    payment transaction        api model     def  payumoney form get tx data(self  data)              given data dict coming payumoney  verify find related         transaction record             coding  utf 8        part odoo  see license file full copyright licensing details    verify shasign   check buyed ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport hashlib\n\nfrom werkzeug import urls\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.tools.float_utils import float_compare\n\nimport logging\n\n_logger = logging.getLogger(__name__)\n\n\nclass PaymentAcquirerPayumoney(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('payumoney', 'PayUmoney')])\n    payumoney_merchant_key = fields.Char(string='Merchant Key', required_if_provider='payumoney', groups='base.group_user')\n    payumoney_merchant_salt = fields.Char(string='Merchant Salt', required_if_provider='payumoney', groups='base.group_user')\n\n    def _get_payumoney_urls(self, environment):\n        \"\"\" PayUmoney URLs\"\"\"\n        if environment == 'prod':\n            return {'payumoney_form_url': 'https://secure.payu.in/_payment'}\n        else:\n            return {'payumoney_form_url': 'https://test.payu.in/_payment'}\n\n    def _payumoney_generate_sign(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications.\n        :param self: the self browse record. It should have a shakey in shakey out\n        :param string inout: 'in' (odoo contacting payumoney) or 'out' (payumoney\n                             contacting odoo).\n        :param dict values: transaction values\n\n        :return string: shasign\n        \"\"\"\n        if inout not in ('in', 'out'):\n            raise Exception(\"Type must be 'in' or 'out'\")\n\n        if inout == 'in':\n            keys = \"key|txnid|amount|productinfo|firstname|email|udf1|||||||||\".split('|')\n            sign = ''.join('%s|' % (values.get(k) or '') for k in keys)\n            sign += self.payumoney_merchant_salt or ''\n        else:\n            keys = \"|status||||||||||udf1|email|firstname|productinfo|amount|txnid\".split('|')\n            sign = ''.join('%s|' % (values.get(k) or '') for k in keys)\n            sign = self.payumoney_merchant_salt + sign + self.payumoney_merchant_key\n\n        shasign = hashlib.sha512(sign.encode('utf-8')).hexdigest()\n        return shasign\n\n    @api.multi\n    def payumoney_form_generate_values(self, values):\n        self.ensure_one()\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        payumoney_values = dict(values,\n                                key=self.payumoney_merchant_key,\n                                txnid=values['reference'],\n                                amount=values['amount'],\n                                productinfo=values['reference'],\n                                firstname=values.get('partner_name'),\n                                email=values.get('partner_email'),\n                                phone=values.get('partner_phone'),\n                                service_provider='payu_paisa',\n                                surl=urls.url_join(base_url, '/payment/payumoney/return'),\n                                furl=urls.url_join(base_url, '/payment/payumoney/error'),\n                                curl=urls.url_join(base_url, '/payment/payumoney/cancel')\n                                )\n\n        payumoney_values['udf1'] = payumoney_values.pop('return_url', '/')\n        payumoney_values['hash'] = self._payumoney_generate_sign('in', payumoney_values)\n        return payumoney_values\n\n    @api.multi\n    def payumoney_get_form_action_url(self):\n        self.ensure_one()\n        return self._get_payumoney_urls(self.environment)['payumoney_form_url']\n\n\nclass PaymentTransactionPayumoney(models.Model):\n    _inherit = 'payment.transaction'\n\n    @api.model\n    def _payumoney_form_get_tx_from_data(self, data):\n        \"\"\" Given a data dict coming from payumoney, verify it and find the related\n        transaction record. \"\"\"\n        reference = data.get('txnid')\n        pay_id = data.get('mihpayid')\n        shasign = data.get('hash')\n        if not reference or not pay_id or not shasign:\n            raise ValidationError(_('PayUmoney: received data with missing reference (%s) or pay_id (%s) or shashign (%s)') % (reference, pay_id, shasign))\n\n        transaction = self.search([('reference', '=', reference)])\n\n        if not transaction:\n            error_msg = (_('PayUmoney: received data for reference %s; no order found') % (reference))\n            raise ValidationError(error_msg)\n        elif len(transaction) > 1:\n            error_msg = (_('PayUmoney: received data for reference %s; multiple orders found') % (reference))\n            raise ValidationError(error_msg)\n\n        #verify shasign\n        shasign_check = transaction.acquirer_id._payumoney_generate_sign('out', data)\n        if shasign_check.upper() != shasign.upper():\n            raise ValidationError(_('PayUmoney: invalid shasign, received %s, computed %s, for data %s') % (shasign, shasign_check, data))\n        return transaction\n\n    @api.multi\n    def _payumoney_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n\n        if self.acquirer_reference and data.get('mihpayid') != self.acquirer_reference:\n            invalid_parameters.append(\n                ('Transaction Id', data.get('mihpayid'), self.acquirer_reference))\n        #check what is buyed\n        if float_compare(float(data.get('amount', '0.0')), self.amount, 2) != 0:\n            invalid_parameters.append(\n                ('Amount', data.get('amount'), '%.2f' % self.amount))\n\n        return invalid_parameters\n\n    @api.multi\n    def _payumoney_form_validate(self, data):\n        status = data.get('status')\n        transaction_status = {\n            'success': {\n                'state': 'done',\n                'acquirer_reference': data.get('payuMoneyId'),\n                'date_validate': fields.Datetime.now(),\n            },\n            'pending': {\n                'state': 'pending',\n                'acquirer_reference': data.get('payuMoneyId'),\n                'date_validate': fields.Datetime.now(),\n            },\n            'failure': {\n                'state': 'cancel',\n                'acquirer_reference': data.get('payuMoneyId'),\n                'date_validate': fields.Datetime.now(),\n            },\n            'error': {\n                'state': 'error',\n                'state_message': data.get('error_Message') or _('PayUmoney: feedback error'),\n                'acquirer_reference': data.get('payuMoneyId'),\n                'date_validate': fields.Datetime.now(),\n            }\n        }\n        vals = transaction_status.get(status, False)\n        if not vals:\n            vals = transaction_status['error']\n            _logger.info(vals['state_message'])\n        return self.write(vals)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "payment.py", "id": "b9e9a7fe93a3a6c02366ebeefe3202d7", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_payumoney/models/payment.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}