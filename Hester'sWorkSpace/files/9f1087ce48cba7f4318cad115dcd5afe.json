{"author": "aws", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nimport os\n\nfrom awscli.alias import AliasLoader\nfrom awscli.testutils import skip_if_windows\nfrom awscli.testutils import FileCreator\nfrom awscli.testutils import BaseAWSCommandParamsTest\n\n\nclass TestAliases(BaseAWSCommandParamsTest):\n    def setUp(self):\n        super(TestAliases, self).setUp()\n        self.files = FileCreator()\n        self.alias_file = self.files.create_file('alias', '[toplevel]\\n')\n        self.driver.alias_loader = AliasLoader(self.alias_file)\n\n    def tearDown(self):\n        super(TestAliases, self).tearDown()\n        self.files.remove_all()\n\n    def add_alias(self, alias_name, alias_value):\n        with open(self.alias_file, 'a+') as f:\n            f.write('%s = %s\\n' % (alias_name, alias_value))\n\n    def test_subcommand_alias(self):\n        self.add_alias('my-alias', 'ec2 describe-regions')\n        cmdline = 'my-alias'\n        self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_subcommand_alias_with_additonal_params(self):\n        self.add_alias(\n            'my-alias', 'ec2 describe-regions --region-names us-east-1')\n        cmdline = 'my-alias'\n        self.assert_params_for_cmd(cmdline, {'RegionNames': ['us-east-1']})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_subcommand_alias_then_additonal_params(self):\n        self.add_alias('my-alias', 'ec2')\n        cmdline = 'my-alias describe-regions --region-names us-east-1'\n        self.assert_params_for_cmd(cmdline, {'RegionNames': ['us-east-1']})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_subcommand_alias_with_global_params(self):\n        self.add_alias(\n            'my-alias',\n            'ec2 describe-regions --query Regions[].RegionName --output text')\n        self.parsed_responses = [\n            {\n                'Regions': [\n                    {\n                        'Endpoint': 'ec2.us-east-1.amazonaws.com',\n                        'RegionName': 'us-east-1'\n                    }\n                ]\n            }\n        ]\n        cmdline = 'my-alias'\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n        self.assertEqual(stdout.strip(), 'us-east-1')\n\n    def test_subcommand_alias_then_global_params(self):\n        self.add_alias('my-alias', 'ec2 describe-regions')\n        self.parsed_responses = [\n            {\n                'Regions': [\n                    {\n                        'Endpoint': 'ec2.us-east-1.amazonaws.com',\n                        'RegionName': 'us-east-1'\n                    }\n                ]\n            }\n        ]\n        cmdline = 'my-alias '\n        cmdline += '--query=Regions[].RegionName '\n        cmdline += '--output=text'\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n        self.assertEqual(stdout.strip(), 'us-east-1')\n\n    def test_global_params_then_subcommand_alias(self):\n        self.add_alias('my-alias', 'ec2 describe-regions')\n        self.parsed_responses = [\n            {\n                'Regions': [\n                    {\n                        'Endpoint': 'ec2.us-east-1.amazonaws.com',\n                        'RegionName': 'us-east-1'\n                    }\n                ]\n            }\n        ]\n        cmdline = '--query=Regions[].RegionName '\n        cmdline += '--output=text '\n        cmdline += 'my-alias'\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n        self.assertEqual(stdout.strip(), 'us-east-1')\n\n    def test_alias_overrides_builtin_command(self):\n        self.add_alias('ec2', 's3api')\n        cmdline = 'ec2 list-buckets'\n        self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(self.operations_called[0][0].name, 'ListBuckets')\n\n    def test_alias_proxies_to_shadowed_command(self):\n        self.add_alias('ec2', 'ec2')\n        cmdline = 'ec2 describe-regions'\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_alias_chaining(self):\n        self.add_alias('base-alias', 'ec2 describe-regions')\n        self.add_alias(\n            'wrapper-alias', 'base-alias --region-names us-east-1')\n        cmdline = 'wrapper-alias'\n        self.assert_params_for_cmd(cmdline, {'RegionNames': ['us-east-1']})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_alias_chaining_with_globals(self):\n        self.add_alias('base-alias', 'ec2 describe-regions')\n        self.add_alias(\n            'wrapper-alias',\n            'base-alias --query Regions[].RegionName --output text')\n        cmdline = 'wrapper-alias'\n        self.parsed_responses = [\n            {\n                'Regions': [\n                    {\n                        'Endpoint': 'ec2.us-east-1.amazonaws.com',\n                        'RegionName': 'us-east-1'\n                    }\n                ]\n            }\n        ]\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n        self.assertEqual(stdout.strip(), 'us-east-1')\n\n    def test_external_alias(self):\n         The external alias is tested by using mkdir; a command that\n         is universal for the various OS's we support\n        directory_to_make = os.path.join(self.files.rootdir, 'newdir')\n        self.add_alias('mkdir', '!mkdir %s' % directory_to_make)\n        self.run_cmd('mkdir')\n        self.assertTrue(os.path.isdir(directory_to_make))\n\n    def test_external_alias_then_additonal_args(self):\n         The external alias is tested by using mkdir; a command that\n         is universal for the various OS's we support\n        directory_to_make = os.path.join(self.files.rootdir, 'newdir')\n        self.add_alias('mkdir', '!mkdir')\n        self.run_cmd('mkdir %s' % directory_to_make)\n        self.assertTrue(os.path.isdir(directory_to_make))\n\n    def test_external_alias_with_quoted_arguments(self):\n        directory_to_make = os.path.join(self.files.rootdir, 'new dir')\n        self.add_alias('mkdir', '!mkdir')\n        self.run_cmd(['mkdir', directory_to_make])\n        self.assertTrue(os.path.isdir(directory_to_make))\n\n    @skip_if_windows('Windows does not support BASH functions')\n    def test_external_alias_with_wrapper_bash_function(self):\n         The external alias is tested by using mkdir; a command that\n         is universal for the various OS's we support\n        directory_to_make = os.path.join(self.files.rootdir, 'newdir')\n        self.add_alias('mkdir', '!f() { mkdir \"${1}\"; }; f')\n        self.run_cmd('mkdir %s' % directory_to_make)\n        self.assertTrue(os.path.isdir(directory_to_make))\n", "comments": "  copyright 2016 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     the external alias tested using mkdir  command    universal various os support    the external alias tested using mkdir  command    universal various os support    the external alias tested using mkdir  command    universal various os support ", "content": "# Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nimport os\n\nfrom awscli.alias import AliasLoader\nfrom awscli.testutils import skip_if_windows\nfrom awscli.testutils import FileCreator\nfrom awscli.testutils import BaseAWSCommandParamsTest\n\n\nclass TestAliases(BaseAWSCommandParamsTest):\n    def setUp(self):\n        super(TestAliases, self).setUp()\n        self.files = FileCreator()\n        self.alias_file = self.files.create_file('alias', '[toplevel]\\n')\n        self.driver.alias_loader = AliasLoader(self.alias_file)\n\n    def tearDown(self):\n        super(TestAliases, self).tearDown()\n        self.files.remove_all()\n\n    def add_alias(self, alias_name, alias_value):\n        with open(self.alias_file, 'a+') as f:\n            f.write('%s = %s\\n' % (alias_name, alias_value))\n\n    def test_subcommand_alias(self):\n        self.add_alias('my-alias', 'ec2 describe-regions')\n        cmdline = 'my-alias'\n        self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_subcommand_alias_with_additonal_params(self):\n        self.add_alias(\n            'my-alias', 'ec2 describe-regions --region-names us-east-1')\n        cmdline = 'my-alias'\n        self.assert_params_for_cmd(cmdline, {'RegionNames': ['us-east-1']})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_subcommand_alias_then_additonal_params(self):\n        self.add_alias('my-alias', 'ec2')\n        cmdline = 'my-alias describe-regions --region-names us-east-1'\n        self.assert_params_for_cmd(cmdline, {'RegionNames': ['us-east-1']})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_subcommand_alias_with_global_params(self):\n        self.add_alias(\n            'my-alias',\n            'ec2 describe-regions --query Regions[].RegionName --output text')\n        self.parsed_responses = [\n            {\n                'Regions': [\n                    {\n                        'Endpoint': 'ec2.us-east-1.amazonaws.com',\n                        'RegionName': 'us-east-1'\n                    }\n                ]\n            }\n        ]\n        cmdline = 'my-alias'\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n        self.assertEqual(stdout.strip(), 'us-east-1')\n\n    def test_subcommand_alias_then_global_params(self):\n        self.add_alias('my-alias', 'ec2 describe-regions')\n        self.parsed_responses = [\n            {\n                'Regions': [\n                    {\n                        'Endpoint': 'ec2.us-east-1.amazonaws.com',\n                        'RegionName': 'us-east-1'\n                    }\n                ]\n            }\n        ]\n        cmdline = 'my-alias '\n        cmdline += '--query=Regions[].RegionName '\n        cmdline += '--output=text'\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n        self.assertEqual(stdout.strip(), 'us-east-1')\n\n    def test_global_params_then_subcommand_alias(self):\n        self.add_alias('my-alias', 'ec2 describe-regions')\n        self.parsed_responses = [\n            {\n                'Regions': [\n                    {\n                        'Endpoint': 'ec2.us-east-1.amazonaws.com',\n                        'RegionName': 'us-east-1'\n                    }\n                ]\n            }\n        ]\n        cmdline = '--query=Regions[].RegionName '\n        cmdline += '--output=text '\n        cmdline += 'my-alias'\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n        self.assertEqual(stdout.strip(), 'us-east-1')\n\n    def test_alias_overrides_builtin_command(self):\n        self.add_alias('ec2', 's3api')\n        cmdline = 'ec2 list-buckets'\n        self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(self.operations_called[0][0].name, 'ListBuckets')\n\n    def test_alias_proxies_to_shadowed_command(self):\n        self.add_alias('ec2', 'ec2')\n        cmdline = 'ec2 describe-regions'\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_alias_chaining(self):\n        self.add_alias('base-alias', 'ec2 describe-regions')\n        self.add_alias(\n            'wrapper-alias', 'base-alias --region-names us-east-1')\n        cmdline = 'wrapper-alias'\n        self.assert_params_for_cmd(cmdline, {'RegionNames': ['us-east-1']})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n\n    def test_alias_chaining_with_globals(self):\n        self.add_alias('base-alias', 'ec2 describe-regions')\n        self.add_alias(\n            'wrapper-alias',\n            'base-alias --query Regions[].RegionName --output text')\n        cmdline = 'wrapper-alias'\n        self.parsed_responses = [\n            {\n                'Regions': [\n                    {\n                        'Endpoint': 'ec2.us-east-1.amazonaws.com',\n                        'RegionName': 'us-east-1'\n                    }\n                ]\n            }\n        ]\n        stdout, _, _ = self.assert_params_for_cmd(cmdline, {})\n        self.assertEqual(len(self.operations_called), 1)\n        self.assertEqual(\n            self.operations_called[0][0].service_model.service_name,\n            'ec2'\n        )\n        self.assertEqual(self.operations_called[0][0].name, 'DescribeRegions')\n        self.assertEqual(stdout.strip(), 'us-east-1')\n\n    def test_external_alias(self):\n        # The external alias is tested by using mkdir; a command that\n        # is universal for the various OS's we support\n        directory_to_make = os.path.join(self.files.rootdir, 'newdir')\n        self.add_alias('mkdir', '!mkdir %s' % directory_to_make)\n        self.run_cmd('mkdir')\n        self.assertTrue(os.path.isdir(directory_to_make))\n\n    def test_external_alias_then_additonal_args(self):\n        # The external alias is tested by using mkdir; a command that\n        # is universal for the various OS's we support\n        directory_to_make = os.path.join(self.files.rootdir, 'newdir')\n        self.add_alias('mkdir', '!mkdir')\n        self.run_cmd('mkdir %s' % directory_to_make)\n        self.assertTrue(os.path.isdir(directory_to_make))\n\n    def test_external_alias_with_quoted_arguments(self):\n        directory_to_make = os.path.join(self.files.rootdir, 'new dir')\n        self.add_alias('mkdir', '!mkdir')\n        self.run_cmd(['mkdir', directory_to_make])\n        self.assertTrue(os.path.isdir(directory_to_make))\n\n    @skip_if_windows('Windows does not support BASH functions')\n    def test_external_alias_with_wrapper_bash_function(self):\n        # The external alias is tested by using mkdir; a command that\n        # is universal for the various OS's we support\n        directory_to_make = os.path.join(self.files.rootdir, 'newdir')\n        self.add_alias('mkdir', '!f() { mkdir \"${1}\"; }; f')\n        self.run_cmd('mkdir %s' % directory_to_make)\n        self.assertTrue(os.path.isdir(directory_to_make))\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_alias.py", "id": "9f1087ce48cba7f4318cad115dcd5afe", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/test_alias.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}