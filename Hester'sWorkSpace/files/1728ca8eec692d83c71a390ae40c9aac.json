{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n    remove_end,\n)\n\n\nclass LifeNewsIE(InfoExtractor):\n    IE_NAME = 'life'\n    IE_DESC = 'Life.ru'\n    _VALID_URL = r'https?://life\\.ru/t/[^/]+/(?P<id>\\d+)'\n\n    _TESTS = [{\n        \n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/98736',\n        'md5': '77c95eaefaca216e32a76a343ad89d23',\n        'info_dict': {\n            'id': '98736',\n            'ext': 'mp4',\n            'title': '\u041c\u0443\u0436\u0447\u0438\u043d\u0430 \u043d\u0430\u0448\u0435\u043b \u0434\u043e\u043c\u0430 \u0430\u0440\u0445\u0438\u0432 \u043e\u0431\u043e\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u043e\u0434\u0430',\n            'description': 'md5:3b06b1b39b5e2bea548e403d99b8bf26',\n            'timestamp': 1344154740,\n            'upload_date': '20120805',\n            'view_count': int,\n        }\n    }, {\n        \n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/152125',\n        'md5': '77d19a6f0886cd76bdbf44b4d971a273',\n        'info_dict': {\n            'id': '152125',\n            'ext': 'mp4',\n            'title': '\u0412 \u0421\u0435\u0442\u0438 \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c \u0432\u0438\u0434\u0435\u043e \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u00ab\u041f\u0440\u0430\u0432\u044b\u043c \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u043c\u00bb \u043a\u043e\u043b\u0445\u043e\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 ',\n            'description': '\u0416\u0438\u0442\u0435\u043b\u0438 \u0434\u0432\u0443\u0445 \u043f\u043e\u0441\u0435\u043b\u043a\u043e\u0432 \u0414\u043d\u0435\u043f\u0440\u043e\u043f\u0435\u0442\u0440\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u0438\u043b\u0438 \u0440\u0430\u0434\u0438\u043a\u0430\u043b\u0430\u043c \u0443\u0433\u0440\u043e\u0437\u0443 \u043b\u0438\u0448\u0435\u043d\u0438\u044f \u043f\u043b\u043e\u0434\u043e\u0440\u043e\u0434\u043d\u044b\u0445 \u0437\u0435\u043c\u0435\u043b\u044c \u0438 \u043f\u043e\u0448\u043b\u0438 \u0432 \u043b\u043e\u0431\u043e\u0432\u0443\u044e. ',\n            'timestamp': 1427961840,\n            'upload_date': '20150402',\n            'view_count': int,\n        }\n    }, {\n        \n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/153461',\n        'info_dict': {\n            'id': '153461',\n            'title': '\u0412 \u041c\u043e\u0441\u043a\u0432\u0435 \u0441\u043f\u0430\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0441\u044f \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0435',\n            'description': '\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0445\u0438\u0449\u043d\u0438\u043a \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u0440\u043e\u0433\u0443 \u0434\u043e\u043c\u043e\u0439 \u0438 \u043e\u0431\u0440\u0435\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0443\u0431\u0435\u0436\u0438\u0449\u0435 \u043d\u0430 \u0442\u043e\u043f\u043e\u043b\u0435 \u043d\u0435\u0434\u0430\u043b\u0435\u043a\u043e \u043e\u0442 \u0436\u0438\u043b\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u043e\u043a\u0430 \u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0448\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0441\u043a\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430.',\n            'timestamp': 1430825520,\n            'view_count': int,\n        },\n        'playlist': [{\n            'md5': '9b6ef8bc0ffa25aebc8bdb40d89ab795',\n            'info_dict': {\n                'id': '153461-video1',\n                'ext': 'mp4',\n                'title': '\u0412 \u041c\u043e\u0441\u043a\u0432\u0435 \u0441\u043f\u0430\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0441\u044f \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0435 (\u0412\u0438\u0434\u0435\u043e 1)',\n                'description': '\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0445\u0438\u0449\u043d\u0438\u043a \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u0440\u043e\u0433\u0443 \u0434\u043e\u043c\u043e\u0439 \u0438 \u043e\u0431\u0440\u0435\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0443\u0431\u0435\u0436\u0438\u0449\u0435 \u043d\u0430 \u0442\u043e\u043f\u043e\u043b\u0435 \u043d\u0435\u0434\u0430\u043b\u0435\u043a\u043e \u043e\u0442 \u0436\u0438\u043b\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u043e\u043a\u0430 \u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0448\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0441\u043a\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430.',\n                'timestamp': 1430825520,\n                'upload_date': '20150505',\n            },\n        }, {\n            'md5': 'ebb3bf3b1ce40e878d0d628e93eb0322',\n            'info_dict': {\n                'id': '153461-video2',\n                'ext': 'mp4',\n                'title': '\u0412 \u041c\u043e\u0441\u043a\u0432\u0435 \u0441\u043f\u0430\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0441\u044f \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0435 (\u0412\u0438\u0434\u0435\u043e 2)',\n                'description': '\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0445\u0438\u0449\u043d\u0438\u043a \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u0440\u043e\u0433\u0443 \u0434\u043e\u043c\u043e\u0439 \u0438 \u043e\u0431\u0440\u0435\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0443\u0431\u0435\u0436\u0438\u0449\u0435 \u043d\u0430 \u0442\u043e\u043f\u043e\u043b\u0435 \u043d\u0435\u0434\u0430\u043b\u0435\u043a\u043e \u043e\u0442 \u0436\u0438\u043b\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u043e\u043a\u0430 \u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0448\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0441\u043a\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430.',\n                'timestamp': 1430825520,\n                'upload_date': '20150505',\n            },\n        }],\n    }, {\n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/213035',\n        'only_matching': True,\n    }, {\n        'url': 'https://life.ru/t/%D0%BD%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B8/153461',\n        'only_matching': True,\n    }, {\n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/411489/manuel_vals_nazval_frantsiiu_tsieliu_nomier_odin_dlia_ighil',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_urls = re.findall(\n            r'<video[^>]+><source[^>]+src=[\"\\'](.+?)[\"\\']', webpage)\n\n        iframe_links = re.findall(\n            r'<iframe[^>]+src=[\"\\']((?:https?:)?//embed\\.life\\.ru/(?:embed|video)/.+?)[\"\\']',\n            webpage)\n\n        if not video_urls and not iframe_links:\n            raise ExtractorError('No media links available for %s' % video_id)\n\n        title = remove_end(\n            self._og_search_title(webpage),\n            ' - Life.ru')\n\n        description = self._og_search_description(webpage)\n\n        view_count = self._html_search_regex(\n            r'<div[^>]+class=([\"\\']).*?\\bhits-count\\b.*?\\1[^>]*>\\s*(?P<value>\\d+)\\s*</div>',\n            webpage, 'view count', fatal=False, group='value')\n\n        timestamp = parse_iso8601(self._search_regex(\n            r'<time[^>]+datetime=([\"\\'])(?P<value>.+?)\\1',\n            webpage, 'upload date', fatal=False, group='value'))\n\n        common_info = {\n            'description': description,\n            'view_count': int_or_none(view_count),\n            'timestamp': timestamp,\n        }\n\n        def make_entry(video_id, video_url, index=None):\n            cur_info = dict(common_info)\n            cur_info.update({\n                'id': video_id if not index else '%s-video%s' % (video_id, index),\n                'url': video_url,\n                'title': title if not index else '%s (\u0412\u0438\u0434\u0435\u043e %s)' % (title, index),\n            })\n            return cur_info\n\n        def make_video_entry(video_id, video_url, index=None):\n            video_url = compat_urlparse.urljoin(url, video_url)\n            return make_entry(video_id, video_url, index)\n\n        def make_iframe_entry(video_id, video_url, index=None):\n            video_url = self._proto_relative_url(video_url, 'http:')\n            cur_info = make_entry(video_id, video_url, index)\n            cur_info['_type'] = 'url_transparent'\n            return cur_info\n\n        if len(video_urls) == 1 and not iframe_links:\n            return make_video_entry(video_id, video_urls[0])\n\n        if len(iframe_links) == 1 and not video_urls:\n            return make_iframe_entry(video_id, iframe_links[0])\n\n        entries = []\n\n        if video_urls:\n            for num, video_url in enumerate(video_urls, 1):\n                entries.append(make_video_entry(video_id, video_url, num))\n\n        if iframe_links:\n            for num, iframe_link in enumerate(iframe_links, len(video_urls) + 1):\n                entries.append(make_iframe_entry(video_id, iframe_link, num))\n\n        playlist = common_info.copy()\n        playlist.update(self.playlist_result(entries, video_id, title, description))\n        return playlist\n\n\nclass LifeEmbedIE(InfoExtractor):\n    IE_NAME = 'life:embed'\n    _VALID_URL = r'https?://embed\\.life\\.ru/(?:embed|video)/(?P<id>[\\da-f]{32})'\n\n    _TESTS = [{\n        'url': 'http://embed.life.ru/embed/e50c2dec2867350528e2574c899b8291',\n        'md5': 'b889715c9e49cb1981281d0e5458fbbe',\n        'info_dict': {\n            'id': 'e50c2dec2867350528e2574c899b8291',\n            'ext': 'mp4',\n            'title': 'e50c2dec2867350528e2574c899b8291',\n            'thumbnail': r're:http://.*\\.jpg',\n        }\n    }, {\n        \n        'url': 'https://embed.life.ru/video/e50c2dec2867350528e2574c899b8291',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        thumbnail = None\n        formats = []\n\n        def extract_m3u8(manifest_url):\n            formats.extend(self._extract_m3u8_formats(\n                manifest_url, video_id, 'mp4',\n                entry_protocol='m3u8_native', m3u8_id='m3u8'))\n\n        def extract_original(original_url):\n            formats.append({\n                'url': original_url,\n                'format_id': determine_ext(original_url, None),\n                'preference': 1,\n            })\n\n        playlist = self._parse_json(\n            self._search_regex(\n                r'options\\s*=\\s*({.+?});', webpage, 'options', default='{}'),\n            video_id).get('playlist', {})\n        if playlist:\n            master = playlist.get('master')\n            if isinstance(master, compat_str) and determine_ext(master) == 'm3u8':\n                extract_m3u8(compat_urlparse.urljoin(url, master))\n            original = playlist.get('original')\n            if isinstance(original, compat_str):\n                extract_original(original)\n            thumbnail = playlist.get('image')\n\n        \n        if not formats:\n            for video_url in re.findall(r'\"file\"\\s*:\\s*\"([^\"]+)', webpage):\n                video_url = compat_urlparse.urljoin(url, video_url)\n                if determine_ext(video_url) == 'm3u8':\n                    extract_m3u8(video_url)\n                else:\n                    extract_original(video_url)\n\n        self._sort_formats(formats)\n\n        thumbnail = thumbnail or self._search_regex(\n            r'\"image\"\\s*:\\s*\"([^\"]+)', webpage, 'thumbnail', default=None)\n\n        return {\n            'id': video_id,\n            'title': video_id,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# single video embedded via video/source\n# single video embedded via iframe\n# two videos embedded via iframe\n# with 1080p\n# Old rendition fallback\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n    remove_end,\n)\n\n\nclass LifeNewsIE(InfoExtractor):\n    IE_NAME = 'life'\n    IE_DESC = 'Life.ru'\n    _VALID_URL = r'https?://life\\.ru/t/[^/]+/(?P<id>\\d+)'\n\n    _TESTS = [{\n        # single video embedded via video/source\n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/98736',\n        'md5': '77c95eaefaca216e32a76a343ad89d23',\n        'info_dict': {\n            'id': '98736',\n            'ext': 'mp4',\n            'title': '\u041c\u0443\u0436\u0447\u0438\u043d\u0430 \u043d\u0430\u0448\u0435\u043b \u0434\u043e\u043c\u0430 \u0430\u0440\u0445\u0438\u0432 \u043e\u0431\u043e\u0440\u043e\u043d\u043d\u043e\u0433\u043e \u0437\u0430\u0432\u043e\u0434\u0430',\n            'description': 'md5:3b06b1b39b5e2bea548e403d99b8bf26',\n            'timestamp': 1344154740,\n            'upload_date': '20120805',\n            'view_count': int,\n        }\n    }, {\n        # single video embedded via iframe\n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/152125',\n        'md5': '77d19a6f0886cd76bdbf44b4d971a273',\n        'info_dict': {\n            'id': '152125',\n            'ext': 'mp4',\n            'title': '\u0412 \u0421\u0435\u0442\u0438 \u043f\u043e\u044f\u0432\u0438\u043b\u043e\u0441\u044c \u0432\u0438\u0434\u0435\u043e \u0437\u0430\u0445\u0432\u0430\u0442\u0430 \u00ab\u041f\u0440\u0430\u0432\u044b\u043c \u0441\u0435\u043a\u0442\u043e\u0440\u043e\u043c\u00bb \u043a\u043e\u043b\u0445\u043e\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 ',\n            'description': '\u0416\u0438\u0442\u0435\u043b\u0438 \u0434\u0432\u0443\u0445 \u043f\u043e\u0441\u0435\u043b\u043a\u043e\u0432 \u0414\u043d\u0435\u043f\u0440\u043e\u043f\u0435\u0442\u0440\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u0438\u043b\u0438 \u0440\u0430\u0434\u0438\u043a\u0430\u043b\u0430\u043c \u0443\u0433\u0440\u043e\u0437\u0443 \u043b\u0438\u0448\u0435\u043d\u0438\u044f \u043f\u043b\u043e\u0434\u043e\u0440\u043e\u0434\u043d\u044b\u0445 \u0437\u0435\u043c\u0435\u043b\u044c \u0438 \u043f\u043e\u0448\u043b\u0438 \u0432 \u043b\u043e\u0431\u043e\u0432\u0443\u044e. ',\n            'timestamp': 1427961840,\n            'upload_date': '20150402',\n            'view_count': int,\n        }\n    }, {\n        # two videos embedded via iframe\n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/153461',\n        'info_dict': {\n            'id': '153461',\n            'title': '\u0412 \u041c\u043e\u0441\u043a\u0432\u0435 \u0441\u043f\u0430\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0441\u044f \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0435',\n            'description': '\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0445\u0438\u0449\u043d\u0438\u043a \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u0440\u043e\u0433\u0443 \u0434\u043e\u043c\u043e\u0439 \u0438 \u043e\u0431\u0440\u0435\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0443\u0431\u0435\u0436\u0438\u0449\u0435 \u043d\u0430 \u0442\u043e\u043f\u043e\u043b\u0435 \u043d\u0435\u0434\u0430\u043b\u0435\u043a\u043e \u043e\u0442 \u0436\u0438\u043b\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u043e\u043a\u0430 \u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0448\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0441\u043a\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430.',\n            'timestamp': 1430825520,\n            'view_count': int,\n        },\n        'playlist': [{\n            'md5': '9b6ef8bc0ffa25aebc8bdb40d89ab795',\n            'info_dict': {\n                'id': '153461-video1',\n                'ext': 'mp4',\n                'title': '\u0412 \u041c\u043e\u0441\u043a\u0432\u0435 \u0441\u043f\u0430\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0441\u044f \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0435 (\u0412\u0438\u0434\u0435\u043e 1)',\n                'description': '\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0445\u0438\u0449\u043d\u0438\u043a \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u0440\u043e\u0433\u0443 \u0434\u043e\u043c\u043e\u0439 \u0438 \u043e\u0431\u0440\u0435\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0443\u0431\u0435\u0436\u0438\u0449\u0435 \u043d\u0430 \u0442\u043e\u043f\u043e\u043b\u0435 \u043d\u0435\u0434\u0430\u043b\u0435\u043a\u043e \u043e\u0442 \u0436\u0438\u043b\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u043e\u043a\u0430 \u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0448\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0441\u043a\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430.',\n                'timestamp': 1430825520,\n                'upload_date': '20150505',\n            },\n        }, {\n            'md5': 'ebb3bf3b1ce40e878d0d628e93eb0322',\n            'info_dict': {\n                'id': '153461-video2',\n                'ext': 'mp4',\n                'title': '\u0412 \u041c\u043e\u0441\u043a\u0432\u0435 \u0441\u043f\u0430\u0441\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u043c\u0435\u0434\u0432\u0435\u0436\u043e\u043d\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043f\u0440\u044f\u0442\u0430\u043b\u0441\u044f \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u0435 (\u0412\u0438\u0434\u0435\u043e 2)',\n                'description': '\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0445\u0438\u0449\u043d\u0438\u043a \u043d\u0435 \u0441\u043c\u043e\u0433 \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u0440\u043e\u0433\u0443 \u0434\u043e\u043c\u043e\u0439 \u0438 \u043e\u0431\u0440\u0435\u043b \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u0443\u0431\u0435\u0436\u0438\u0449\u0435 \u043d\u0430 \u0442\u043e\u043f\u043e\u043b\u0435 \u043d\u0435\u0434\u0430\u043b\u0435\u043a\u043e \u043e\u0442 \u0436\u0438\u043b\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u043f\u043e\u043a\u0430 \u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0448\u043b\u0430 \u0441\u043e\u0441\u0435\u0434\u0441\u043a\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430.',\n                'timestamp': 1430825520,\n                'upload_date': '20150505',\n            },\n        }],\n    }, {\n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/213035',\n        'only_matching': True,\n    }, {\n        'url': 'https://life.ru/t/%D0%BD%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B8/153461',\n        'only_matching': True,\n    }, {\n        'url': 'https://life.ru/t/\u043d\u043e\u0432\u043e\u0441\u0442\u0438/411489/manuel_vals_nazval_frantsiiu_tsieliu_nomier_odin_dlia_ighil',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_urls = re.findall(\n            r'<video[^>]+><source[^>]+src=[\"\\'](.+?)[\"\\']', webpage)\n\n        iframe_links = re.findall(\n            r'<iframe[^>]+src=[\"\\']((?:https?:)?//embed\\.life\\.ru/(?:embed|video)/.+?)[\"\\']',\n            webpage)\n\n        if not video_urls and not iframe_links:\n            raise ExtractorError('No media links available for %s' % video_id)\n\n        title = remove_end(\n            self._og_search_title(webpage),\n            ' - Life.ru')\n\n        description = self._og_search_description(webpage)\n\n        view_count = self._html_search_regex(\n            r'<div[^>]+class=([\"\\']).*?\\bhits-count\\b.*?\\1[^>]*>\\s*(?P<value>\\d+)\\s*</div>',\n            webpage, 'view count', fatal=False, group='value')\n\n        timestamp = parse_iso8601(self._search_regex(\n            r'<time[^>]+datetime=([\"\\'])(?P<value>.+?)\\1',\n            webpage, 'upload date', fatal=False, group='value'))\n\n        common_info = {\n            'description': description,\n            'view_count': int_or_none(view_count),\n            'timestamp': timestamp,\n        }\n\n        def make_entry(video_id, video_url, index=None):\n            cur_info = dict(common_info)\n            cur_info.update({\n                'id': video_id if not index else '%s-video%s' % (video_id, index),\n                'url': video_url,\n                'title': title if not index else '%s (\u0412\u0438\u0434\u0435\u043e %s)' % (title, index),\n            })\n            return cur_info\n\n        def make_video_entry(video_id, video_url, index=None):\n            video_url = compat_urlparse.urljoin(url, video_url)\n            return make_entry(video_id, video_url, index)\n\n        def make_iframe_entry(video_id, video_url, index=None):\n            video_url = self._proto_relative_url(video_url, 'http:')\n            cur_info = make_entry(video_id, video_url, index)\n            cur_info['_type'] = 'url_transparent'\n            return cur_info\n\n        if len(video_urls) == 1 and not iframe_links:\n            return make_video_entry(video_id, video_urls[0])\n\n        if len(iframe_links) == 1 and not video_urls:\n            return make_iframe_entry(video_id, iframe_links[0])\n\n        entries = []\n\n        if video_urls:\n            for num, video_url in enumerate(video_urls, 1):\n                entries.append(make_video_entry(video_id, video_url, num))\n\n        if iframe_links:\n            for num, iframe_link in enumerate(iframe_links, len(video_urls) + 1):\n                entries.append(make_iframe_entry(video_id, iframe_link, num))\n\n        playlist = common_info.copy()\n        playlist.update(self.playlist_result(entries, video_id, title, description))\n        return playlist\n\n\nclass LifeEmbedIE(InfoExtractor):\n    IE_NAME = 'life:embed'\n    _VALID_URL = r'https?://embed\\.life\\.ru/(?:embed|video)/(?P<id>[\\da-f]{32})'\n\n    _TESTS = [{\n        'url': 'http://embed.life.ru/embed/e50c2dec2867350528e2574c899b8291',\n        'md5': 'b889715c9e49cb1981281d0e5458fbbe',\n        'info_dict': {\n            'id': 'e50c2dec2867350528e2574c899b8291',\n            'ext': 'mp4',\n            'title': 'e50c2dec2867350528e2574c899b8291',\n            'thumbnail': r're:http://.*\\.jpg',\n        }\n    }, {\n        # with 1080p\n        'url': 'https://embed.life.ru/video/e50c2dec2867350528e2574c899b8291',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        thumbnail = None\n        formats = []\n\n        def extract_m3u8(manifest_url):\n            formats.extend(self._extract_m3u8_formats(\n                manifest_url, video_id, 'mp4',\n                entry_protocol='m3u8_native', m3u8_id='m3u8'))\n\n        def extract_original(original_url):\n            formats.append({\n                'url': original_url,\n                'format_id': determine_ext(original_url, None),\n                'preference': 1,\n            })\n\n        playlist = self._parse_json(\n            self._search_regex(\n                r'options\\s*=\\s*({.+?});', webpage, 'options', default='{}'),\n            video_id).get('playlist', {})\n        if playlist:\n            master = playlist.get('master')\n            if isinstance(master, compat_str) and determine_ext(master) == 'm3u8':\n                extract_m3u8(compat_urlparse.urljoin(url, master))\n            original = playlist.get('original')\n            if isinstance(original, compat_str):\n                extract_original(original)\n            thumbnail = playlist.get('image')\n\n        # Old rendition fallback\n        if not formats:\n            for video_url in re.findall(r'\"file\"\\s*:\\s*\"([^\"]+)', webpage):\n                video_url = compat_urlparse.urljoin(url, video_url)\n                if determine_ext(video_url) == 'm3u8':\n                    extract_m3u8(video_url)\n                else:\n                    extract_original(video_url)\n\n        self._sort_formats(formats)\n\n        thumbnail = thumbnail or self._search_regex(\n            r'\"image\"\\s*:\\s*\"([^\"]+)', webpage, 'thumbnail', default=None)\n\n        return {\n            'id': video_id,\n            'title': video_id,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "lifenews.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/lifenews.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}