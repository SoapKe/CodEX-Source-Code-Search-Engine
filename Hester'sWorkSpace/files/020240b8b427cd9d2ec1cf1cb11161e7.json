{"author": "facebookresearch", "code": "\n\n Copyright (c) 2017-present, Facebook, Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport cv2   NOQA (Must import before importing caffe2 due to bug in cv2)\nimport os\nimport pprint\nimport sys\nimport time\n\nfrom caffe2.python import workspace\n\nfrom core.config import assert_and_infer_cfg\nfrom core.config import cfg\nfrom core.config import merge_cfg_from_file\nfrom core.config import merge_cfg_from_list\nfrom core.test_engine import run_inference\nfrom datasets import task_evaluation\nimport utils.c2\nimport utils.logging\n\nutils.c2.import_detectron_ops()\n OpenCL may be enabled by default in OpenCV3; disable it because it's not\n thread safe and causes unwanted GPU memory allocations.\ncv2.ocl.setUseOpenCL(False)\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Test a Fast R-CNN network')\n    parser.add_argument(\n        '--cfg',\n        dest='cfg_file',\n        help='optional config file',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--wait',\n        dest='wait',\n        help='wait until net file exists',\n        default=True,\n        type=bool\n    )\n    parser.add_argument(\n        '--vis', dest='vis', help='visualize detections', action='store_true'\n    )\n    parser.add_argument(\n        '--multi-gpu-testing',\n        dest='multi_gpu_testing',\n        help='using cfg.NUM_GPUS for inference',\n        action='store_true'\n    )\n    parser.add_argument(\n        '--range',\n        dest='range',\n        help='start (inclusive) and end (exclusive) indices',\n        default=None,\n        type=int,\n        nargs=2\n    )\n    parser.add_argument(\n        'opts',\n        help='See lib/core/config.py for all options',\n        default=None,\n        nargs=argparse.REMAINDER\n    )\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()\n\n\ndef main(ind_range=None, multi_gpu_testing=False):\n    all_results = run_inference(\n        ind_range=ind_range, multi_gpu_testing=multi_gpu_testing\n    )\n    if not ind_range:\n        task_evaluation.check_expected_results(\n            all_results,\n            atol=cfg.EXPECTED_RESULTS_ATOL,\n            rtol=cfg.EXPECTED_RESULTS_RTOL\n        )\n        task_evaluation.log_copy_paste_friendly_results(all_results)\n\n\nif __name__ == '__main__':\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\n    logger = utils.logging.setup_logging(__name__)\n    args = parse_args()\n    logger.info('Called with args:')\n    logger.info(args)\n    if args.cfg_file is not None:\n        merge_cfg_from_file(args.cfg_file)\n    if args.opts is not None:\n        merge_cfg_from_list(args.opts)\n    assert_and_infer_cfg()\n    logger.info('Testing with config:')\n    logger.info(pprint.pformat(cfg))\n\n    while not os.path.exists(cfg.TEST.WEIGHTS) and args.wait:\n        logger.info('Waiting for \\'{}\\' to exist...'.format(cfg.TEST.WEIGHTS))\n        time.sleep(10)\n\n    main(ind_range=args.range, multi_gpu_testing=args.multi_gpu_testing)\n", "comments": "   perform inference one datasets         usr bin env python2    copyright (c) 2017 present  facebook  inc        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                     noqa (must import importing caffe2 due bug cv2)    opencl may enabled default opencv3  disable    thread safe causes unwanted gpu memory allocations  ", "content": "#!/usr/bin/env python2\n\n# Copyright (c) 2017-present, Facebook, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##############################################################################\n\n\"\"\"Perform inference on one or more datasets.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport cv2  # NOQA (Must import before importing caffe2 due to bug in cv2)\nimport os\nimport pprint\nimport sys\nimport time\n\nfrom caffe2.python import workspace\n\nfrom core.config import assert_and_infer_cfg\nfrom core.config import cfg\nfrom core.config import merge_cfg_from_file\nfrom core.config import merge_cfg_from_list\nfrom core.test_engine import run_inference\nfrom datasets import task_evaluation\nimport utils.c2\nimport utils.logging\n\nutils.c2.import_detectron_ops()\n# OpenCL may be enabled by default in OpenCV3; disable it because it's not\n# thread safe and causes unwanted GPU memory allocations.\ncv2.ocl.setUseOpenCL(False)\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Test a Fast R-CNN network')\n    parser.add_argument(\n        '--cfg',\n        dest='cfg_file',\n        help='optional config file',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--wait',\n        dest='wait',\n        help='wait until net file exists',\n        default=True,\n        type=bool\n    )\n    parser.add_argument(\n        '--vis', dest='vis', help='visualize detections', action='store_true'\n    )\n    parser.add_argument(\n        '--multi-gpu-testing',\n        dest='multi_gpu_testing',\n        help='using cfg.NUM_GPUS for inference',\n        action='store_true'\n    )\n    parser.add_argument(\n        '--range',\n        dest='range',\n        help='start (inclusive) and end (exclusive) indices',\n        default=None,\n        type=int,\n        nargs=2\n    )\n    parser.add_argument(\n        'opts',\n        help='See lib/core/config.py for all options',\n        default=None,\n        nargs=argparse.REMAINDER\n    )\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()\n\n\ndef main(ind_range=None, multi_gpu_testing=False):\n    all_results = run_inference(\n        ind_range=ind_range, multi_gpu_testing=multi_gpu_testing\n    )\n    if not ind_range:\n        task_evaluation.check_expected_results(\n            all_results,\n            atol=cfg.EXPECTED_RESULTS_ATOL,\n            rtol=cfg.EXPECTED_RESULTS_RTOL\n        )\n        task_evaluation.log_copy_paste_friendly_results(all_results)\n\n\nif __name__ == '__main__':\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\n    logger = utils.logging.setup_logging(__name__)\n    args = parse_args()\n    logger.info('Called with args:')\n    logger.info(args)\n    if args.cfg_file is not None:\n        merge_cfg_from_file(args.cfg_file)\n    if args.opts is not None:\n        merge_cfg_from_list(args.opts)\n    assert_and_infer_cfg()\n    logger.info('Testing with config:')\n    logger.info(pprint.pformat(cfg))\n\n    while not os.path.exists(cfg.TEST.WEIGHTS) and args.wait:\n        logger.info('Waiting for \\'{}\\' to exist...'.format(cfg.TEST.WEIGHTS))\n        time.sleep(10)\n\n    main(ind_range=args.range, multi_gpu_testing=args.multi_gpu_testing)\n", "description": "FAIR's research platform for object detection research, implementing popular algorithms like Mask R-CNN and RetinaNet.", "file_name": "test_net.py", "id": "020240b8b427cd9d2ec1cf1cb11161e7", "language": "Python", "project_name": "Detectron", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/facebookresearch-Detectron/facebookresearch-Detectron-a026d77/tools/test_net.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:00:46Z", "url": "https://github.com/facebookresearch/Detectron", "wiki": false}