{"author": "apache", "code": "\n -*- coding: utf-8 -*-\n\n Copyright (C) 2016 Andi Albrecht, albrecht.andi@gmail.com\n\n This example is part of python-sqlparse and is released under\n the BSD License: http://www.opensource.org/licenses/bsd-license.php\n\n This example illustrates how to extract table names from nested\n SELECT statements.\n\n See:\n http://groups.google.com/group/sqlparse/browse_thread/thread/b0bd9a022e9d4895\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport sqlparse\nfrom sqlparse.sql import Identifier, IdentifierList\nfrom sqlparse.tokens import DML, Keyword\n\n\ndef is_subselect(parsed):\n    if not parsed.is_group():\n        return False\n    for item in parsed.tokens:\n        if item.ttype is DML and item.value.upper() == 'SELECT':\n            return True\n    return False\n\n\ndef extract_from_part(parsed):\n    from_seen = False\n    for item in parsed.tokens:\n        if from_seen:\n            if is_subselect(item):\n                for x in extract_from_part(item):\n                    yield x\n            elif item.ttype is Keyword:\n                raise StopIteration\n            else:\n                yield item\n        elif item.ttype is Keyword and item.value.upper() == 'FROM':\n            from_seen = True\n\n\ndef extract_table_identifiers(token_stream):\n    for item in token_stream:\n        if isinstance(item, IdentifierList):\n            for identifier in item.get_identifiers():\n                yield identifier.get_name()\n        elif isinstance(item, Identifier):\n            yield item.get_name()\n         It's a bug to check for Keyword here, but in the example\n         above some tables names are identified as keywords...\n        elif item.ttype is Keyword:\n            yield item.value\n\n\n TODO(bkyryliuk): add logic to support joins and unions.\ndef extract_tables(sql):\n    stream = extract_from_part(sqlparse.parse(sql)[0])\n    return list(extract_table_identifiers(stream))\n", "comments": "   usr bin env python        coding  utf 8           copyright (c) 2016 andi albrecht  albrecht andi gmail com       this example part python sqlparse released    bsd license  http   www opensource org licenses bsd license php       this example illustrates extract table names nested    select statements        see     http   groups google com group sqlparse browse thread thread b0bd9a022e9d4895    it bug check keyword  example    tables names identified keywords       todo(bkyryliuk)  add logic support joins unions  ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2016 Andi Albrecht, albrecht.andi@gmail.com\n#\n# This example is part of python-sqlparse and is released under\n# the BSD License: http://www.opensource.org/licenses/bsd-license.php\n#\n# This example illustrates how to extract table names from nested\n# SELECT statements.\n#\n# See:\n# http://groups.google.com/group/sqlparse/browse_thread/thread/b0bd9a022e9d4895\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport sqlparse\nfrom sqlparse.sql import Identifier, IdentifierList\nfrom sqlparse.tokens import DML, Keyword\n\n\ndef is_subselect(parsed):\n    if not parsed.is_group():\n        return False\n    for item in parsed.tokens:\n        if item.ttype is DML and item.value.upper() == 'SELECT':\n            return True\n    return False\n\n\ndef extract_from_part(parsed):\n    from_seen = False\n    for item in parsed.tokens:\n        if from_seen:\n            if is_subselect(item):\n                for x in extract_from_part(item):\n                    yield x\n            elif item.ttype is Keyword:\n                raise StopIteration\n            else:\n                yield item\n        elif item.ttype is Keyword and item.value.upper() == 'FROM':\n            from_seen = True\n\n\ndef extract_table_identifiers(token_stream):\n    for item in token_stream:\n        if isinstance(item, IdentifierList):\n            for identifier in item.get_identifiers():\n                yield identifier.get_name()\n        elif isinstance(item, Identifier):\n            yield item.get_name()\n        # It's a bug to check for Keyword here, but in the example\n        # above some tables names are identified as keywords...\n        elif item.ttype is Keyword:\n            yield item.value\n\n\n# TODO(bkyryliuk): add logic to support joins and unions.\ndef extract_tables(sql):\n    stream = extract_from_part(sqlparse.parse(sql)[0])\n    return list(extract_table_identifiers(stream))\n", "description": "Apache Superset (incubating) is a modern, enterprise-ready business intelligence web application", "file_name": "extract_table_names.py", "id": "f7ae428047942a0425d32c51f83fa9d6", "language": "Python", "project_name": "incubator-superset", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/apache-incubator-superset/apache-incubator-superset-95a9b04/superset/extract_table_names.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:41:03Z", "url": "https://github.com/apache/incubator-superset", "wiki": false}