{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    unsmuggle_url,\n)\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urlparse,\n)\n\n\nclass SenateISVPIE(InfoExtractor):\n    _COMM_MAP = [\n        ['ag', '76440', 'http://ag-f.akamaihd.net'],\n        ['aging', '76442', 'http://aging-f.akamaihd.net'],\n        ['approps', '76441', 'http://approps-f.akamaihd.net'],\n        ['armed', '76445', 'http://armed-f.akamaihd.net'],\n        ['banking', '76446', 'http://banking-f.akamaihd.net'],\n        ['budget', '76447', 'http://budget-f.akamaihd.net'],\n        ['cecc', '76486', 'http://srs-f.akamaihd.net'],\n        ['commerce', '80177', 'http://commerce1-f.akamaihd.net'],\n        ['csce', '75229', 'http://srs-f.akamaihd.net'],\n        ['dpc', '76590', 'http://dpc-f.akamaihd.net'],\n        ['energy', '76448', 'http://energy-f.akamaihd.net'],\n        ['epw', '76478', 'http://epw-f.akamaihd.net'],\n        ['ethics', '76449', 'http://ethics-f.akamaihd.net'],\n        ['finance', '76450', 'http://finance-f.akamaihd.net'],\n        ['foreign', '76451', 'http://foreign-f.akamaihd.net'],\n        ['govtaff', '76453', 'http://govtaff-f.akamaihd.net'],\n        ['help', '76452', 'http://help-f.akamaihd.net'],\n        ['indian', '76455', 'http://indian-f.akamaihd.net'],\n        ['intel', '76456', 'http://intel-f.akamaihd.net'],\n        ['intlnarc', '76457', 'http://intlnarc-f.akamaihd.net'],\n        ['jccic', '85180', 'http://jccic-f.akamaihd.net'],\n        ['jec', '76458', 'http://jec-f.akamaihd.net'],\n        ['judiciary', '76459', 'http://judiciary-f.akamaihd.net'],\n        ['rpc', '76591', 'http://rpc-f.akamaihd.net'],\n        ['rules', '76460', 'http://rules-f.akamaihd.net'],\n        ['saa', '76489', 'http://srs-f.akamaihd.net'],\n        ['smbiz', '76461', 'http://smbiz-f.akamaihd.net'],\n        ['srs', '75229', 'http://srs-f.akamaihd.net'],\n        ['uscc', '76487', 'http://srs-f.akamaihd.net'],\n        ['vetaff', '76462', 'http://vetaff-f.akamaihd.net'],\n        ['arch', '', 'http://ussenate-f.akamaihd.net/']\n    ]\n    _IE_NAME = 'senate.gov'\n    _VALID_URL = r'https?://(?:www\\.)?senate\\.gov/isvp/?\\?(?P<qs>.+)'\n    _TESTS = [{\n        'url': 'http://www.senate.gov/isvp/?comm=judiciary&type=live&stt=&filename=judiciary031715&auto_play=false&wmode=transparent&poster=http%3A%2F%2Fwww.judiciary.senate.gov%2Fthemes%2Fjudiciary%2Fimages%2Fvideo-poster-flash-fit.png',\n        'info_dict': {\n            'id': 'judiciary031715',\n            'ext': 'mp4',\n            'title': 'Integrated Senate Video Player',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)$',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.senate.gov/isvp/?type=live&comm=commerce&filename=commerce011514.mp4&auto_play=false',\n        'info_dict': {\n            'id': 'commerce011514',\n            'ext': 'mp4',\n            'title': 'Integrated Senate Video Player'\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.senate.gov/isvp/?type=arch&comm=intel&filename=intel090613&hc_location=ufi',\n        \n        'info_dict': {\n            'id': 'intel090613',\n            'ext': 'mp4',\n            'title': 'Integrated Senate Video Player'\n        }\n    }, {\n        \n        'url': 'http://www.senate.gov/isvp?type=live&comm=banking&filename=banking012715',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _search_iframe_url(webpage):\n        mobj = re.search(\n            r\"<iframe[^>]+src=['\\\"](?P<url>https?://www\\.senate\\.gov/isvp/?\\?[^'\\\"]+)['\\\"]\",\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _get_info_for_comm(self, committee):\n        for entry in self._COMM_MAP:\n            if entry[0] == committee:\n                return entry[1:]\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        qs = compat_parse_qs(re.match(self._VALID_URL, url).group('qs'))\n        if not qs.get('filename') or not qs.get('type') or not qs.get('comm'):\n            raise ExtractorError('Invalid URL', expected=True)\n\n        video_id = re.sub(r'.mp4$', '', qs['filename'][0])\n\n        webpage = self._download_webpage(url, video_id)\n\n        if smuggled_data.get('force_title'):\n            title = smuggled_data['force_title']\n        else:\n            title = self._html_search_regex(r'<title>([^<]+)</title>', webpage, video_id)\n        poster = qs.get('poster')\n        thumbnail = poster[0] if poster else None\n\n        video_type = qs['type'][0]\n        committee = video_type if video_type == 'arch' else qs['comm'][0]\n        stream_num, domain = self._get_info_for_comm(committee)\n\n        formats = []\n        if video_type == 'arch':\n            filename = video_id if '.' in video_id else video_id + '.mp4'\n            formats = [{\n                \n                'url': compat_urlparse.urljoin(domain, filename) + '?v=3.1.0&fp=&r=&g=',\n            }]\n        else:\n            hdcore_sign = 'hdcore=3.1.0'\n            url_params = (domain, video_id, stream_num)\n            f4m_url = '%s/z/%s_1@%s/manifest.f4m?' % url_params + hdcore_sign\n            m3u8_url = '%s/i/%s_1@%s/master.m3u8' % url_params\n            for entry in self._extract_f4m_formats(f4m_url, video_id, f4m_id='f4m'):\n                \n                entry.update({'extra_param_to_segment_url': hdcore_sign})\n                formats.append(entry)\n            for entry in self._extract_m3u8_formats(m3u8_url, video_id, ext='mp4', m3u8_id='m3u8'):\n                mobj = re.search(r'(?P<tag>(?:-p|-b)).m3u8', entry['url'])\n                if mobj:\n                    entry['format_id'] += mobj.group('tag')\n                formats.append(entry)\n\n            self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n# m3u8 download\n# m3u8 download\n# checksum differs each time\n# From http://www.c-span.org/video/?96791-1\n# All parameters in the query string are necessary to prevent a 403 error\n# URLs without the extra param induce an 404 error\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    unsmuggle_url,\n)\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urlparse,\n)\n\n\nclass SenateISVPIE(InfoExtractor):\n    _COMM_MAP = [\n        ['ag', '76440', 'http://ag-f.akamaihd.net'],\n        ['aging', '76442', 'http://aging-f.akamaihd.net'],\n        ['approps', '76441', 'http://approps-f.akamaihd.net'],\n        ['armed', '76445', 'http://armed-f.akamaihd.net'],\n        ['banking', '76446', 'http://banking-f.akamaihd.net'],\n        ['budget', '76447', 'http://budget-f.akamaihd.net'],\n        ['cecc', '76486', 'http://srs-f.akamaihd.net'],\n        ['commerce', '80177', 'http://commerce1-f.akamaihd.net'],\n        ['csce', '75229', 'http://srs-f.akamaihd.net'],\n        ['dpc', '76590', 'http://dpc-f.akamaihd.net'],\n        ['energy', '76448', 'http://energy-f.akamaihd.net'],\n        ['epw', '76478', 'http://epw-f.akamaihd.net'],\n        ['ethics', '76449', 'http://ethics-f.akamaihd.net'],\n        ['finance', '76450', 'http://finance-f.akamaihd.net'],\n        ['foreign', '76451', 'http://foreign-f.akamaihd.net'],\n        ['govtaff', '76453', 'http://govtaff-f.akamaihd.net'],\n        ['help', '76452', 'http://help-f.akamaihd.net'],\n        ['indian', '76455', 'http://indian-f.akamaihd.net'],\n        ['intel', '76456', 'http://intel-f.akamaihd.net'],\n        ['intlnarc', '76457', 'http://intlnarc-f.akamaihd.net'],\n        ['jccic', '85180', 'http://jccic-f.akamaihd.net'],\n        ['jec', '76458', 'http://jec-f.akamaihd.net'],\n        ['judiciary', '76459', 'http://judiciary-f.akamaihd.net'],\n        ['rpc', '76591', 'http://rpc-f.akamaihd.net'],\n        ['rules', '76460', 'http://rules-f.akamaihd.net'],\n        ['saa', '76489', 'http://srs-f.akamaihd.net'],\n        ['smbiz', '76461', 'http://smbiz-f.akamaihd.net'],\n        ['srs', '75229', 'http://srs-f.akamaihd.net'],\n        ['uscc', '76487', 'http://srs-f.akamaihd.net'],\n        ['vetaff', '76462', 'http://vetaff-f.akamaihd.net'],\n        ['arch', '', 'http://ussenate-f.akamaihd.net/']\n    ]\n    _IE_NAME = 'senate.gov'\n    _VALID_URL = r'https?://(?:www\\.)?senate\\.gov/isvp/?\\?(?P<qs>.+)'\n    _TESTS = [{\n        'url': 'http://www.senate.gov/isvp/?comm=judiciary&type=live&stt=&filename=judiciary031715&auto_play=false&wmode=transparent&poster=http%3A%2F%2Fwww.judiciary.senate.gov%2Fthemes%2Fjudiciary%2Fimages%2Fvideo-poster-flash-fit.png',\n        'info_dict': {\n            'id': 'judiciary031715',\n            'ext': 'mp4',\n            'title': 'Integrated Senate Video Player',\n            'thumbnail': r're:^https?://.*\\.(?:jpg|png)$',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.senate.gov/isvp/?type=live&comm=commerce&filename=commerce011514.mp4&auto_play=false',\n        'info_dict': {\n            'id': 'commerce011514',\n            'ext': 'mp4',\n            'title': 'Integrated Senate Video Player'\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.senate.gov/isvp/?type=arch&comm=intel&filename=intel090613&hc_location=ufi',\n        # checksum differs each time\n        'info_dict': {\n            'id': 'intel090613',\n            'ext': 'mp4',\n            'title': 'Integrated Senate Video Player'\n        }\n    }, {\n        # From http://www.c-span.org/video/?96791-1\n        'url': 'http://www.senate.gov/isvp?type=live&comm=banking&filename=banking012715',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _search_iframe_url(webpage):\n        mobj = re.search(\n            r\"<iframe[^>]+src=['\\\"](?P<url>https?://www\\.senate\\.gov/isvp/?\\?[^'\\\"]+)['\\\"]\",\n            webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _get_info_for_comm(self, committee):\n        for entry in self._COMM_MAP:\n            if entry[0] == committee:\n                return entry[1:]\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        qs = compat_parse_qs(re.match(self._VALID_URL, url).group('qs'))\n        if not qs.get('filename') or not qs.get('type') or not qs.get('comm'):\n            raise ExtractorError('Invalid URL', expected=True)\n\n        video_id = re.sub(r'.mp4$', '', qs['filename'][0])\n\n        webpage = self._download_webpage(url, video_id)\n\n        if smuggled_data.get('force_title'):\n            title = smuggled_data['force_title']\n        else:\n            title = self._html_search_regex(r'<title>([^<]+)</title>', webpage, video_id)\n        poster = qs.get('poster')\n        thumbnail = poster[0] if poster else None\n\n        video_type = qs['type'][0]\n        committee = video_type if video_type == 'arch' else qs['comm'][0]\n        stream_num, domain = self._get_info_for_comm(committee)\n\n        formats = []\n        if video_type == 'arch':\n            filename = video_id if '.' in video_id else video_id + '.mp4'\n            formats = [{\n                # All parameters in the query string are necessary to prevent a 403 error\n                'url': compat_urlparse.urljoin(domain, filename) + '?v=3.1.0&fp=&r=&g=',\n            }]\n        else:\n            hdcore_sign = 'hdcore=3.1.0'\n            url_params = (domain, video_id, stream_num)\n            f4m_url = '%s/z/%s_1@%s/manifest.f4m?' % url_params + hdcore_sign\n            m3u8_url = '%s/i/%s_1@%s/master.m3u8' % url_params\n            for entry in self._extract_f4m_formats(f4m_url, video_id, f4m_id='f4m'):\n                # URLs without the extra param induce an 404 error\n                entry.update({'extra_param_to_segment_url': hdcore_sign})\n                formats.append(entry)\n            for entry in self._extract_m3u8_formats(m3u8_url, video_id, ext='mp4', m3u8_id='m3u8'):\n                mobj = re.search(r'(?P<tag>(?:-p|-b)).m3u8', entry['url'])\n                if mobj:\n                    entry['format_id'] += mobj.group('tag')\n                formats.append(entry)\n\n            self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "senateisvp.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/senateisvp.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}