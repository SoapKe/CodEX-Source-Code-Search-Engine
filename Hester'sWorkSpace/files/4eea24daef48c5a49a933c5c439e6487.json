{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.tests import common\n\n\nclass TestFloatExport(common.TransactionCase):\n\n    def get_converter(self, name):\n        FloatField = self.env['ir.qweb.field.float']\n        _, precision = self.env['decimal.precision.test']._fields[name].digits or (None, None)\n\n        def converter(value, options=None):\n            record = self.env['decimal.precision.test'].new({name: value})\n            return FloatField.record_to_html(record, name, options or {})\n        return converter\n\n    def test_basic_float(self):\n        converter = self.get_converter('float')\n        self.assertEqual(\n            converter(42.0),\n            \"42.0\")\n        self.assertEqual(\n            converter(42.12345),\n            \"42.12345\")\n\n        converter = self.get_converter('float_2')\n        self.assertEqual(\n            converter(42.0),\n            \"42.00\")\n        self.assertEqual(\n            converter(42.12345),\n            \"42.12\")\n\n        converter = self.get_converter('float') \n        self.assertEqual(\n            converter(42.0, {'precision': 4}),\n            '42.0000')\n        self.assertEqual(\n            converter(42.12345, {'precision': 4}),\n            '42.1235')\n\n    def test_precision_domain(self):\n        self.env['decimal.precision'].create({\n            'name': 'A',\n            'digits': 2,\n        })\n        self.env['decimal.precision'].create({\n            'name': 'B',\n            'digits': 6,\n        })\n\n        converter = self.get_converter('float')\n        self.assertEqual(\n            converter(42.0, {'decimal_precision': 'A'}),\n            '42.00')\n        self.assertEqual(\n            converter(42.0, {'decimal_precision': 'B'}),\n            '42.000000')\n\n        converter = self.get_converter('float') \n        self.assertEqual(\n            converter(42.12345, {'decimal_precision': 'A'}),\n            '42.12')\n        self.assertEqual(\n            converter(42.12345, {'decimal_precision': 'B'}),\n            '42.123450')\n", "comments": "      coding  utf 8        use float 4 field value 42 12345 already orm converted 42 1235    use float 4 field value 42 12345 orm converted 42 1235 ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.tests import common\n\n\nclass TestFloatExport(common.TransactionCase):\n\n    def get_converter(self, name):\n        FloatField = self.env['ir.qweb.field.float']\n        _, precision = self.env['decimal.precision.test']._fields[name].digits or (None, None)\n\n        def converter(value, options=None):\n            record = self.env['decimal.precision.test'].new({name: value})\n            return FloatField.record_to_html(record, name, options or {})\n        return converter\n\n    def test_basic_float(self):\n        converter = self.get_converter('float')\n        self.assertEqual(\n            converter(42.0),\n            \"42.0\")\n        self.assertEqual(\n            converter(42.12345),\n            \"42.12345\")\n\n        converter = self.get_converter('float_2')\n        self.assertEqual(\n            converter(42.0),\n            \"42.00\")\n        self.assertEqual(\n            converter(42.12345),\n            \"42.12\")\n\n        converter = self.get_converter('float') # don't use float_4 because the field value 42.12345 is already orm converted to 42.1235\n        self.assertEqual(\n            converter(42.0, {'precision': 4}),\n            '42.0000')\n        self.assertEqual(\n            converter(42.12345, {'precision': 4}),\n            '42.1235')\n\n    def test_precision_domain(self):\n        self.env['decimal.precision'].create({\n            'name': 'A',\n            'digits': 2,\n        })\n        self.env['decimal.precision'].create({\n            'name': 'B',\n            'digits': 6,\n        })\n\n        converter = self.get_converter('float')\n        self.assertEqual(\n            converter(42.0, {'decimal_precision': 'A'}),\n            '42.00')\n        self.assertEqual(\n            converter(42.0, {'decimal_precision': 'B'}),\n            '42.000000')\n\n        converter = self.get_converter('float') # don't use float_4 because the field value 42.12345 is orm converted to 42.1235\n        self.assertEqual(\n            converter(42.12345, {'decimal_precision': 'A'}),\n            '42.12')\n        self.assertEqual(\n            converter(42.12345, {'decimal_precision': 'B'}),\n            '42.123450')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_qweb_float.py", "id": "4eea24daef48c5a49a933c5c439e6487", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/decimal_precision/tests/test_qweb_float.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}