{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass Zaq1IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?zaq1\\.pl/video/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://zaq1.pl/video/xev0e',\n        'md5': '24a5eb3f052e604ae597c4d0d19b351e',\n        'info_dict': {\n            'id': 'xev0e',\n            'title': 'DJ NA WESELE. TANIEC Z FIGURAMI.w\u0119gr\u00f3w/soko\u0142\u00f3w podlaski/siedlce/mi\u0144sk mazowiecki/warszawa',\n            'description': 'www.facebook.com/weseledjKontakt: 728 448 199 / 505 419 147',\n            'ext': 'mp4',\n            'duration': 511,\n            'timestamp': 1490896361,\n            'uploader': 'Anonim',\n            'upload_date': '20170330',\n            'view_count': int,\n        }\n    }, {\n        \n        'url': 'http://zaq1.pl/video/x81vn',\n        'info_dict': {\n            'id': 'x81vn',\n            'title': 'SEKRETNE \u017bYCIE WALTERA MITTY',\n            'ext': 'mp4',\n            'duration': 6234,\n            'timestamp': 1493494860,\n            'uploader': 'Anonim',\n            'upload_date': '20170429',\n            'view_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to parse JSON'],\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._search_regex(\n            r'data-video-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n            'video url', group='url')\n\n        info = self._search_json_ld(webpage, video_id, fatal=False)\n\n        def extract_data(field, name, fatal=False):\n            return self._search_regex(\n                r'data-%s=([\"\\'])(?P<field>(?:(?!\\1).)+)\\1' % field,\n                webpage, field, fatal=fatal, group='field')\n\n        if not info.get('title'):\n            info['title'] = extract_data('file-name', 'title', fatal=True)\n\n        if not info.get('duration'):\n            info['duration'] = int_or_none(extract_data('duration', 'duration'))\n\n        if not info.get('thumbnail'):\n            info['thumbnail'] = extract_data('photo-url', 'thumbnail')\n\n        if not info.get('timestamp'):\n            info['timestamp'] = unified_timestamp(self._html_search_meta(\n                'uploadDate', webpage, 'timestamp'))\n\n        if not info.get('interactionCount'):\n            info['view_count'] = int_or_none(self._html_search_meta(\n                'interactionCount', webpage, 'view count'))\n\n        uploader = self._html_search_regex(\n            r'Wideo doda\u0142:\\s*<a[^>]*>([^<]+)</a>', webpage, 'uploader',\n            fatal=False)\n\n        width = int_or_none(self._html_search_meta(\n            'width', webpage, fatal=False))\n        height = int_or_none(self._html_search_meta(\n            'height', webpage, fatal=False))\n\n        info.update({\n            'id': video_id,\n            'formats': [{\n                'url': video_url,\n                'width': width,\n                'height': height,\n                'http_headers': {\n                    'Referer': url,\n                },\n            }],\n            'uploader': uploader,\n        })\n\n        return info\n", "comments": "# coding: utf-8\n#&]+)'\n# malformed JSON-LD\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass Zaq1IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?zaq1\\.pl/video/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://zaq1.pl/video/xev0e',\n        'md5': '24a5eb3f052e604ae597c4d0d19b351e',\n        'info_dict': {\n            'id': 'xev0e',\n            'title': 'DJ NA WESELE. TANIEC Z FIGURAMI.w\u0119gr\u00f3w/soko\u0142\u00f3w podlaski/siedlce/mi\u0144sk mazowiecki/warszawa',\n            'description': 'www.facebook.com/weseledjKontakt: 728 448 199 / 505 419 147',\n            'ext': 'mp4',\n            'duration': 511,\n            'timestamp': 1490896361,\n            'uploader': 'Anonim',\n            'upload_date': '20170330',\n            'view_count': int,\n        }\n    }, {\n        # malformed JSON-LD\n        'url': 'http://zaq1.pl/video/x81vn',\n        'info_dict': {\n            'id': 'x81vn',\n            'title': 'SEKRETNE \u017bYCIE WALTERA MITTY',\n            'ext': 'mp4',\n            'duration': 6234,\n            'timestamp': 1493494860,\n            'uploader': 'Anonim',\n            'upload_date': '20170429',\n            'view_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Failed to parse JSON'],\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._search_regex(\n            r'data-video-url=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n            'video url', group='url')\n\n        info = self._search_json_ld(webpage, video_id, fatal=False)\n\n        def extract_data(field, name, fatal=False):\n            return self._search_regex(\n                r'data-%s=([\"\\'])(?P<field>(?:(?!\\1).)+)\\1' % field,\n                webpage, field, fatal=fatal, group='field')\n\n        if not info.get('title'):\n            info['title'] = extract_data('file-name', 'title', fatal=True)\n\n        if not info.get('duration'):\n            info['duration'] = int_or_none(extract_data('duration', 'duration'))\n\n        if not info.get('thumbnail'):\n            info['thumbnail'] = extract_data('photo-url', 'thumbnail')\n\n        if not info.get('timestamp'):\n            info['timestamp'] = unified_timestamp(self._html_search_meta(\n                'uploadDate', webpage, 'timestamp'))\n\n        if not info.get('interactionCount'):\n            info['view_count'] = int_or_none(self._html_search_meta(\n                'interactionCount', webpage, 'view count'))\n\n        uploader = self._html_search_regex(\n            r'Wideo doda\u0142:\\s*<a[^>]*>([^<]+)</a>', webpage, 'uploader',\n            fatal=False)\n\n        width = int_or_none(self._html_search_meta(\n            'width', webpage, fatal=False))\n        height = int_or_none(self._html_search_meta(\n            'height', webpage, fatal=False))\n\n        info.update({\n            'id': video_id,\n            'formats': [{\n                'url': video_url,\n                'width': width,\n                'height': height,\n                'http_headers': {\n                    'Referer': url,\n                },\n            }],\n            'uploader': uploader,\n        })\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "zaq1.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/zaq1.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}