{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport base64\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_str,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    smuggle_url,\n    unsmuggle_url,\n    urlencode_postdata,\n)\n\n\nclass AWAANIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:awaan|dcndigital)\\.ae/(?:\n\n    def _real_extract(self, url):\n        show_id, video_id, season_id = re.match(self._VALID_URL, url).groups()\n        if video_id and int(video_id) > 0:\n            return self.url_result(\n                'http://awaan.ae/media/%s' % video_id, 'AWAANVideo')\n        elif season_id and int(season_id) > 0:\n            return self.url_result(smuggle_url(\n                'http://awaan.ae/program/season/%s' % season_id,\n                {'show_id': show_id}), 'AWAANSeason')\n        else:\n            return self.url_result(\n                'http://awaan.ae/program/%s' % show_id, 'AWAANSeason')\n\n\nclass AWAANBaseIE(InfoExtractor):\n    def _parse_video_data(self, video_data, video_id, is_live):\n        title = video_data.get('title_en') or video_data['title_ar']\n        img = video_data.get('img')\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': video_data.get('description_en') or video_data.get('description_ar'),\n            'thumbnail': 'http://admin.mangomolo.com/analytics/%s' % img if img else None,\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': parse_iso8601(video_data.get('create_time'), ' '),\n            'is_live': is_live,\n        }\n\n\nclass AWAANVideoIE(AWAANBaseIE):\n    IE_NAME = 'awaan:video'\n    _VALID_URL = r'https?://(?:www\\.)?(?:awaan|dcndigital)\\.ae/(?:\n    _TESTS = [{\n        'url': 'http://www.dcndigital.ae/\n        'md5': '5f61c33bfc7794315c671a62d43116aa',\n        'info_dict':\n        {\n            'id': '17375',\n            'ext': 'mp4',\n            'title': '\u0631\u062d\u0644\u0629 \u0627\u0644\u0639\u0645\u0631 : \u0627\u0644\u062d\u0644\u0642\u0629 1',\n            'description': 'md5:0156e935d870acb8ef0a66d24070c6d6',\n            'duration': 2041,\n            'timestamp': 1227504126,\n            'upload_date': '20081124',\n            'uploader_id': '71',\n        },\n    }, {\n        'url': 'http://awaan.ae/video/26723981/%D8%AF%D8%A7%D8%B1-%D8%A7%D9%84%D8%B3%D9%84%D8%A7%D9%85:-%D8%AE%D9%8A%D8%B1-%D8%AF%D9%88%D8%B1-%D8%A7%D9%84%D8%A3%D9%86%D8%B5%D8%A7%D8%B1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_data = self._download_json(\n            'http://admin.mangomolo.com/analytics/index.php/plus/video?id=%s' % video_id,\n            video_id, headers={'Origin': 'http://awaan.ae'})\n        info = self._parse_video_data(video_data, video_id, False)\n\n        embed_url = 'http://admin.mangomolo.com/analytics/index.php/customers/embed/video?' + compat_urllib_parse_urlencode({\n            'id': video_data['id'],\n            'user_id': video_data['user_id'],\n            'signature': video_data['signature'],\n            'countries': 'Q0M=',\n            'filter': 'DENY',\n        })\n        info.update({\n            '_type': 'url_transparent',\n            'url': embed_url,\n            'ie_key': 'MangomoloVideo',\n        })\n        return info\n\n\nclass AWAANLiveIE(AWAANBaseIE):\n    IE_NAME = 'awaan:live'\n    _VALID_URL = r'https?://(?:www\\.)?(?:awaan|dcndigital)\\.ae/(?:\n    _TEST = {\n        'url': 'http://awaan.ae/live/6/dubai-tv',\n        'info_dict': {\n            'id': '6',\n            'ext': 'mp4',\n            'title': 're:Dubai Al Oula [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'upload_date': '20150107',\n            'timestamp': 1420588800,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        channel_id = self._match_id(url)\n\n        channel_data = self._download_json(\n            'http://admin.mangomolo.com/analytics/index.php/plus/getchanneldetails?channel_id=%s' % channel_id,\n            channel_id, headers={'Origin': 'http://awaan.ae'})\n        info = self._parse_video_data(channel_data, channel_id, True)\n\n        embed_url = 'http://admin.mangomolo.com/analytics/index.php/customers/embed/index?' + compat_urllib_parse_urlencode({\n            'id': base64.b64encode(channel_data['user_id'].encode()).decode(),\n            'channelid': base64.b64encode(channel_data['id'].encode()).decode(),\n            'signature': channel_data['signature'],\n            'countries': 'Q0M=',\n            'filter': 'DENY',\n        })\n        info.update({\n            '_type': 'url_transparent',\n            'url': embed_url,\n            'ie_key': 'MangomoloLive',\n        })\n        return info\n\n\nclass AWAANSeasonIE(InfoExtractor):\n    IE_NAME = 'awaan:season'\n    _VALID_URL = r'https?://(?:www\\.)?(?:awaan|dcndigital)\\.ae/(?:\n    _TEST = {\n        'url': 'http://dcndigital.ae/\n        'info_dict':\n        {\n            'id': '7910',\n            'title': '\u0645\u062d\u0627\u0636\u0631\u0627\u062a \u0627\u0644\u0634\u064a\u062e \u0627\u0644\u0634\u0639\u0631\u0627\u0648\u064a',\n        },\n        'playlist_mincount': 27,\n    }\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n        show_id, season_id = re.match(self._VALID_URL, url).groups()\n\n        data = {}\n        if season_id:\n            data['season'] = season_id\n            show_id = smuggled_data.get('show_id')\n            if show_id is None:\n                season = self._download_json(\n                    'http://admin.mangomolo.com/analytics/index.php/plus/season_info?id=%s' % season_id,\n                    season_id, headers={'Origin': 'http://awaan.ae'})\n                show_id = season['id']\n        data['show_id'] = show_id\n        show = self._download_json(\n            'http://admin.mangomolo.com/analytics/index.php/plus/show',\n            show_id, data=urlencode_postdata(data), headers={\n                'Origin': 'http://awaan.ae',\n                'Content-Type': 'application/x-www-form-urlencoded'\n            })\n        if not season_id:\n            season_id = show['default_season']\n        for season in show['seasons']:\n            if season['id'] == season_id:\n                title = season.get('title_en') or season['title_ar']\n\n                entries = []\n                for video in show['videos']:\n                    video_id = compat_str(video['id'])\n                    entries.append(self.url_result(\n                        'http://awaan.ae/media/%s' % video_id, 'AWAANVideo', video_id))\n\n                return self.playlist_result(entries, season_id, title)\n", "comments": "# coding: utf-8\n#/)?show/(?P<show_id>\\d+)/[^/]+(?:/(?P<video_id>\\d+)/(?P<season_id>\\d+))?'\n#/)?(?:video(?:/[^/]+)?|media|catchup/[^/]+/[^/]+)/(?P<id>\\d+)'\n#/video/%D8%B1%D8%AD%D9%84%D8%A9-%D8%A7%D9%84%D8%B9%D9%85%D8%B1-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9-1/17375',\n#/)?live/(?P<id>\\d+)'\n# m3u8 download\n#/)?program/(?:(?P<show_id>\\d+)|season/(?P<season_id>\\d+))'\n#/program/205024/%D9%85%D8%AD%D8%A7%D8%B6%D8%B1%D8%A7%D8%AA-%D8%A7%D9%84%D8%B4%D9%8A%D8%AE-%D8%A7%D9%84%D8%B4%D8%B9%D8%B1%D8%A7%D9%88%D9%8A',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport base64\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_str,\n)\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n    smuggle_url,\n    unsmuggle_url,\n    urlencode_postdata,\n)\n\n\nclass AWAANIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?:awaan|dcndigital)\\.ae/(?:#/)?show/(?P<show_id>\\d+)/[^/]+(?:/(?P<video_id>\\d+)/(?P<season_id>\\d+))?'\n\n    def _real_extract(self, url):\n        show_id, video_id, season_id = re.match(self._VALID_URL, url).groups()\n        if video_id and int(video_id) > 0:\n            return self.url_result(\n                'http://awaan.ae/media/%s' % video_id, 'AWAANVideo')\n        elif season_id and int(season_id) > 0:\n            return self.url_result(smuggle_url(\n                'http://awaan.ae/program/season/%s' % season_id,\n                {'show_id': show_id}), 'AWAANSeason')\n        else:\n            return self.url_result(\n                'http://awaan.ae/program/%s' % show_id, 'AWAANSeason')\n\n\nclass AWAANBaseIE(InfoExtractor):\n    def _parse_video_data(self, video_data, video_id, is_live):\n        title = video_data.get('title_en') or video_data['title_ar']\n        img = video_data.get('img')\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': video_data.get('description_en') or video_data.get('description_ar'),\n            'thumbnail': 'http://admin.mangomolo.com/analytics/%s' % img if img else None,\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': parse_iso8601(video_data.get('create_time'), ' '),\n            'is_live': is_live,\n        }\n\n\nclass AWAANVideoIE(AWAANBaseIE):\n    IE_NAME = 'awaan:video'\n    _VALID_URL = r'https?://(?:www\\.)?(?:awaan|dcndigital)\\.ae/(?:#/)?(?:video(?:/[^/]+)?|media|catchup/[^/]+/[^/]+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.dcndigital.ae/#/video/%D8%B1%D8%AD%D9%84%D8%A9-%D8%A7%D9%84%D8%B9%D9%85%D8%B1-%D8%A7%D9%84%D8%AD%D9%84%D9%82%D8%A9-1/17375',\n        'md5': '5f61c33bfc7794315c671a62d43116aa',\n        'info_dict':\n        {\n            'id': '17375',\n            'ext': 'mp4',\n            'title': '\u0631\u062d\u0644\u0629 \u0627\u0644\u0639\u0645\u0631 : \u0627\u0644\u062d\u0644\u0642\u0629 1',\n            'description': 'md5:0156e935d870acb8ef0a66d24070c6d6',\n            'duration': 2041,\n            'timestamp': 1227504126,\n            'upload_date': '20081124',\n            'uploader_id': '71',\n        },\n    }, {\n        'url': 'http://awaan.ae/video/26723981/%D8%AF%D8%A7%D8%B1-%D8%A7%D9%84%D8%B3%D9%84%D8%A7%D9%85:-%D8%AE%D9%8A%D8%B1-%D8%AF%D9%88%D8%B1-%D8%A7%D9%84%D8%A3%D9%86%D8%B5%D8%A7%D8%B1',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_data = self._download_json(\n            'http://admin.mangomolo.com/analytics/index.php/plus/video?id=%s' % video_id,\n            video_id, headers={'Origin': 'http://awaan.ae'})\n        info = self._parse_video_data(video_data, video_id, False)\n\n        embed_url = 'http://admin.mangomolo.com/analytics/index.php/customers/embed/video?' + compat_urllib_parse_urlencode({\n            'id': video_data['id'],\n            'user_id': video_data['user_id'],\n            'signature': video_data['signature'],\n            'countries': 'Q0M=',\n            'filter': 'DENY',\n        })\n        info.update({\n            '_type': 'url_transparent',\n            'url': embed_url,\n            'ie_key': 'MangomoloVideo',\n        })\n        return info\n\n\nclass AWAANLiveIE(AWAANBaseIE):\n    IE_NAME = 'awaan:live'\n    _VALID_URL = r'https?://(?:www\\.)?(?:awaan|dcndigital)\\.ae/(?:#/)?live/(?P<id>\\d+)'\n    _TEST = {\n        'url': 'http://awaan.ae/live/6/dubai-tv',\n        'info_dict': {\n            'id': '6',\n            'ext': 'mp4',\n            'title': 're:Dubai Al Oula [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'upload_date': '20150107',\n            'timestamp': 1420588800,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        channel_id = self._match_id(url)\n\n        channel_data = self._download_json(\n            'http://admin.mangomolo.com/analytics/index.php/plus/getchanneldetails?channel_id=%s' % channel_id,\n            channel_id, headers={'Origin': 'http://awaan.ae'})\n        info = self._parse_video_data(channel_data, channel_id, True)\n\n        embed_url = 'http://admin.mangomolo.com/analytics/index.php/customers/embed/index?' + compat_urllib_parse_urlencode({\n            'id': base64.b64encode(channel_data['user_id'].encode()).decode(),\n            'channelid': base64.b64encode(channel_data['id'].encode()).decode(),\n            'signature': channel_data['signature'],\n            'countries': 'Q0M=',\n            'filter': 'DENY',\n        })\n        info.update({\n            '_type': 'url_transparent',\n            'url': embed_url,\n            'ie_key': 'MangomoloLive',\n        })\n        return info\n\n\nclass AWAANSeasonIE(InfoExtractor):\n    IE_NAME = 'awaan:season'\n    _VALID_URL = r'https?://(?:www\\.)?(?:awaan|dcndigital)\\.ae/(?:#/)?program/(?:(?P<show_id>\\d+)|season/(?P<season_id>\\d+))'\n    _TEST = {\n        'url': 'http://dcndigital.ae/#/program/205024/%D9%85%D8%AD%D8%A7%D8%B6%D8%B1%D8%A7%D8%AA-%D8%A7%D9%84%D8%B4%D9%8A%D8%AE-%D8%A7%D9%84%D8%B4%D8%B9%D8%B1%D8%A7%D9%88%D9%8A',\n        'info_dict':\n        {\n            'id': '7910',\n            'title': '\u0645\u062d\u0627\u0636\u0631\u0627\u062a \u0627\u0644\u0634\u064a\u062e \u0627\u0644\u0634\u0639\u0631\u0627\u0648\u064a',\n        },\n        'playlist_mincount': 27,\n    }\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n        show_id, season_id = re.match(self._VALID_URL, url).groups()\n\n        data = {}\n        if season_id:\n            data['season'] = season_id\n            show_id = smuggled_data.get('show_id')\n            if show_id is None:\n                season = self._download_json(\n                    'http://admin.mangomolo.com/analytics/index.php/plus/season_info?id=%s' % season_id,\n                    season_id, headers={'Origin': 'http://awaan.ae'})\n                show_id = season['id']\n        data['show_id'] = show_id\n        show = self._download_json(\n            'http://admin.mangomolo.com/analytics/index.php/plus/show',\n            show_id, data=urlencode_postdata(data), headers={\n                'Origin': 'http://awaan.ae',\n                'Content-Type': 'application/x-www-form-urlencoded'\n            })\n        if not season_id:\n            season_id = show['default_season']\n        for season in show['seasons']:\n            if season['id'] == season_id:\n                title = season.get('title_en') or season['title_ar']\n\n                entries = []\n                for video in show['videos']:\n                    video_id = compat_str(video['id'])\n                    entries.append(self.url_result(\n                        'http://awaan.ae/media/%s' % video_id, 'AWAANVideo', video_id))\n\n                return self.playlist_result(entries, season_id, title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "awaan.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/awaan.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}