{"author": "django", "code": "from django.db.models import Prefetch, prefetch_related_objects\nfrom django.test import TestCase\n\nfrom .models import Author, Book, Reader\n\n\nclass PrefetchRelatedObjectsTests(TestCase):\n    \"\"\"\n    Since prefetch_related_objects() is just the inner part of\n    prefetch_related(), only do basic tests to ensure its API hasn't changed.\n    \"\"\"\n    @classmethod\n    def setUpTestData(cls):\n        cls.book1 = Book.objects.create(title='Poems')\n        cls.book2 = Book.objects.create(title='Jane Eyre')\n        cls.book3 = Book.objects.create(title='Wuthering Heights')\n        cls.book4 = Book.objects.create(title='Sense and Sensibility')\n\n        cls.author1 = Author.objects.create(name='Charlotte', first_book=cls.book1)\n        cls.author2 = Author.objects.create(name='Anne', first_book=cls.book1)\n        cls.author3 = Author.objects.create(name='Emily', first_book=cls.book1)\n        cls.author4 = Author.objects.create(name='Jane', first_book=cls.book4)\n\n        cls.book1.authors.add(cls.author1, cls.author2, cls.author3)\n        cls.book2.authors.add(cls.author1)\n        cls.book3.authors.add(cls.author3)\n        cls.book4.authors.add(cls.author4)\n\n        cls.reader1 = Reader.objects.create(name='Amy')\n        cls.reader2 = Reader.objects.create(name='Belinda')\n\n        cls.reader1.books_read.add(cls.book1, cls.book4)\n        cls.reader2.books_read.add(cls.book2, cls.book4)\n\n    def test_unknown(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertRaises(AttributeError):\n            prefetch_related_objects([book1], 'unknown_attribute')\n\n    def test_m2m_forward(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects([book1], 'authors')\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(book1.authors.all(), [self.author1, self.author2, self.author3])\n\n    def test_m2m_reverse(self):\n        author1 = Author.objects.get(id=self.author1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects([author1], 'books')\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(author1.books.all(), [self.book1, self.book2])\n\n    def test_foreignkey_forward(self):\n        authors = list(Author.objects.all())\n        with self.assertNumQueries(1):\n            prefetch_related_objects(authors, 'first_book')\n\n        with self.assertNumQueries(0):\n            [author.first_book for author in authors]\n\n    def test_foreignkey_reverse(self):\n        books = list(Book.objects.all())\n        with self.assertNumQueries(1):\n            prefetch_related_objects(books, 'first_time_authors')\n\n        with self.assertNumQueries(0):\n            [list(book.first_time_authors.all()) for book in books]\n\n    def test_m2m_then_m2m(self):\n        \"\"\"A m2m can be followed through another m2m.\"\"\"\n        authors = list(Author.objects.all())\n        with self.assertNumQueries(2):\n            prefetch_related_objects(authors, 'books__read_by')\n\n        with self.assertNumQueries(0):\n            self.assertEqual(\n                [\n                    [[str(r) for r in b.read_by.all()] for b in a.books.all()]\n                    for a in authors\n                ],\n                [\n                    [['Amy'], ['Belinda']],  \n                    [['Amy']],               \n                    [['Amy'], []],           \n                    [['Amy', 'Belinda']],    \n                ]\n            )\n\n    def test_prefetch_object(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects([book1], Prefetch('authors'))\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(book1.authors.all(), [self.author1, self.author2, self.author3])\n\n    def test_prefetch_object_to_attr(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects([book1], Prefetch('authors', to_attr='the_authors'))\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(book1.the_authors, [self.author1, self.author2, self.author3])\n\n    def test_prefetch_queryset(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects(\n                [book1],\n                Prefetch('authors', queryset=Author.objects.filter(id__in=[self.author1.id, self.author2.id]))\n            )\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(book1.authors.all(), [self.author1, self.author2])\n", "comments": "        since prefetch related objects() inner part     prefetch related()  basic tests ensure api changed               classmethod     def setuptestdata(cls)          cls book1   book objects create(title  poems )         cls book2   book objects create(title  jane eyre )         cls book3   book objects create(title  wuthering heights )         cls book4   book objects create(title  sense sensibility )          cls author1   author objects create(name  charlotte   first book cls book1)         cls author2   author objects create(name  anne   first book cls book1)         cls author3   author objects create(name  emily   first book cls book1)         cls author4   author objects create(name  jane   first book cls book4)          cls book1 authors add(cls author1  cls author2  cls author3)         cls book2 authors add(cls author1)         cls book3 authors add(cls author3)         cls book4 authors add(cls author4)          cls reader1   reader objects create(name  amy )         cls reader2   reader objects create(name  belinda )          cls reader1 books read add(cls book1  cls book4)         cls reader2 books read add(cls book2  cls book4)      def test unknown(self)          book1   book objects get(id self book1 id)         self assertraises(attributeerror)              prefetch related objects( book1    unknown attribute )      def test m2m forward(self)          book1   book objects get(id self book1 id)         self assertnumqueries(1)              prefetch related objects( book1    authors )          self assertnumqueries(0)              self assertcountequal(book1 authors all()   self author1  self author2  self author3 )      def test m2m reverse(self)          author1   author objects get(id self author1 id)         self assertnumqueries(1)              prefetch related objects( author1    books )          self assertnumqueries(0)              self assertcountequal(author1 books all()   self book1  self book2 )      def test foreignkey forward(self)          authors   list(author objects all())         self assertnumqueries(1)              prefetch related objects(authors   first book )          self assertnumqueries(0)               author first book author authors       def test foreignkey reverse(self)          books   list(book objects all())         self assertnumqueries(1)              prefetch related objects(books   first time authors )          self assertnumqueries(0)               list(book first time authors all()) book books       def test m2m m2m(self)             a m2m followed another m2m        charlotte   poems  jane eyre    anne   poems    emily   poems  wuthering heights    jane   sense sense ", "content": "from django.db.models import Prefetch, prefetch_related_objects\nfrom django.test import TestCase\n\nfrom .models import Author, Book, Reader\n\n\nclass PrefetchRelatedObjectsTests(TestCase):\n    \"\"\"\n    Since prefetch_related_objects() is just the inner part of\n    prefetch_related(), only do basic tests to ensure its API hasn't changed.\n    \"\"\"\n    @classmethod\n    def setUpTestData(cls):\n        cls.book1 = Book.objects.create(title='Poems')\n        cls.book2 = Book.objects.create(title='Jane Eyre')\n        cls.book3 = Book.objects.create(title='Wuthering Heights')\n        cls.book4 = Book.objects.create(title='Sense and Sensibility')\n\n        cls.author1 = Author.objects.create(name='Charlotte', first_book=cls.book1)\n        cls.author2 = Author.objects.create(name='Anne', first_book=cls.book1)\n        cls.author3 = Author.objects.create(name='Emily', first_book=cls.book1)\n        cls.author4 = Author.objects.create(name='Jane', first_book=cls.book4)\n\n        cls.book1.authors.add(cls.author1, cls.author2, cls.author3)\n        cls.book2.authors.add(cls.author1)\n        cls.book3.authors.add(cls.author3)\n        cls.book4.authors.add(cls.author4)\n\n        cls.reader1 = Reader.objects.create(name='Amy')\n        cls.reader2 = Reader.objects.create(name='Belinda')\n\n        cls.reader1.books_read.add(cls.book1, cls.book4)\n        cls.reader2.books_read.add(cls.book2, cls.book4)\n\n    def test_unknown(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertRaises(AttributeError):\n            prefetch_related_objects([book1], 'unknown_attribute')\n\n    def test_m2m_forward(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects([book1], 'authors')\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(book1.authors.all(), [self.author1, self.author2, self.author3])\n\n    def test_m2m_reverse(self):\n        author1 = Author.objects.get(id=self.author1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects([author1], 'books')\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(author1.books.all(), [self.book1, self.book2])\n\n    def test_foreignkey_forward(self):\n        authors = list(Author.objects.all())\n        with self.assertNumQueries(1):\n            prefetch_related_objects(authors, 'first_book')\n\n        with self.assertNumQueries(0):\n            [author.first_book for author in authors]\n\n    def test_foreignkey_reverse(self):\n        books = list(Book.objects.all())\n        with self.assertNumQueries(1):\n            prefetch_related_objects(books, 'first_time_authors')\n\n        with self.assertNumQueries(0):\n            [list(book.first_time_authors.all()) for book in books]\n\n    def test_m2m_then_m2m(self):\n        \"\"\"A m2m can be followed through another m2m.\"\"\"\n        authors = list(Author.objects.all())\n        with self.assertNumQueries(2):\n            prefetch_related_objects(authors, 'books__read_by')\n\n        with self.assertNumQueries(0):\n            self.assertEqual(\n                [\n                    [[str(r) for r in b.read_by.all()] for b in a.books.all()]\n                    for a in authors\n                ],\n                [\n                    [['Amy'], ['Belinda']],  # Charlotte - Poems, Jane Eyre\n                    [['Amy']],               # Anne - Poems\n                    [['Amy'], []],           # Emily - Poems, Wuthering Heights\n                    [['Amy', 'Belinda']],    # Jane - Sense and Sense\n                ]\n            )\n\n    def test_prefetch_object(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects([book1], Prefetch('authors'))\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(book1.authors.all(), [self.author1, self.author2, self.author3])\n\n    def test_prefetch_object_to_attr(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects([book1], Prefetch('authors', to_attr='the_authors'))\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(book1.the_authors, [self.author1, self.author2, self.author3])\n\n    def test_prefetch_queryset(self):\n        book1 = Book.objects.get(id=self.book1.id)\n        with self.assertNumQueries(1):\n            prefetch_related_objects(\n                [book1],\n                Prefetch('authors', queryset=Author.objects.filter(id__in=[self.author1.id, self.author2.id]))\n            )\n\n        with self.assertNumQueries(0):\n            self.assertCountEqual(book1.authors.all(), [self.author1, self.author2])\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_prefetch_related_objects.py", "id": "881dc0a0f4b4daccfd58a687bb8cf1c5", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/prefetch_related/test_prefetch_related_objects.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}