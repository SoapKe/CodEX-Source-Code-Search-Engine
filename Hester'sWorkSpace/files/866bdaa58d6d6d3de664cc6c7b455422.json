{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    fix_xml_ampersands,\n    int_or_none,\n    orderedSet,\n    parse_duration,\n    qualities,\n    strip_jsonp,\n    unified_strdate,\n)\n\n\nclass NPOBaseIE(InfoExtractor):\n    def _get_token(self, video_id):\n        return self._download_json(\n            'http://ida.omroep.nl/app.php/auth', video_id,\n            note='Downloading token')['token']\n\n\nclass NPOIE(NPOBaseIE):\n    IE_NAME = 'npo'\n    IE_DESC = 'npo.nl, ntr.nl, omroepwnl.nl, zapp.nl and npo3.nl'\n    _VALID_URL = r,\n            'description': 'md5:f8d66d537dfb641380226e31ca57b8e8',\n            'upload_date': '20150508',\n            'duration': 462,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        \n        'url': 'http://www.npo.nl/jouw-stad-rotterdam/29-01-2017/RBX_FUNX_6683215/RBX_FUNX_7601437',\n        'info_dict': {\n            'id': 'RBX_FUNX_6683215',\n            'ext': 'mp3',\n            'title': 'Jouw Stad Rotterdam',\n            'description': 'md5:db251505244f097717ec59fabc372d9f',\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.zapp.nl/de-bzt-show/gemist/KN_1687547',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.zapp.nl/de-bzt-show/filmpjes/POMS_KN_7315118',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.zapp.nl/beste-vrienden-quiz/extra-video-s/WO_NTR_1067990',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.npo3.nl/3onderzoekt/16-09-2015/VPWON_1239870',\n        'only_matching': True,\n    }, {\n        \n        'url': 'npo:LI_NL1_4188102',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.npo.nl/radio-gaga/13-06-2017/BNN_101383373',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.zapp.nl/1803-skelterlab/instructie-video-s/740-instructievideo-s/POMS_AT_11736927',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self._get_info(video_id)\n\n    def _get_info(self, video_id):\n        metadata = self._download_json(\n            'http://e.omroep.nl/metadata/%s' % video_id,\n            video_id,\n            \n            transform_source=strip_jsonp,\n        )\n\n        error = metadata.get('error')\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        \n        \n        \n        video_id = metadata.get('prid') or video_id\n\n        \n        \n        title = metadata['titel']\n        sub_title = metadata.get('aflevering_titel')\n        if sub_title and sub_title != title:\n            title += ': %s' % sub_title\n\n        token = self._get_token(video_id)\n\n        formats = []\n        urls = set()\n\n        def is_legal_url(format_url):\n            return format_url and format_url not in urls and re.match(\n                r'^(?:https?:)?//', format_url)\n\n        QUALITY_LABELS = ('Laag', 'Normaal', 'Hoog')\n        QUALITY_FORMATS = ('adaptive', 'wmv_sb', 'h264_sb', 'wmv_bb', 'h264_bb', 'wvc1_std', 'h264_std')\n\n        quality_from_label = qualities(QUALITY_LABELS)\n        quality_from_format_id = qualities(QUALITY_FORMATS)\n        items = self._download_json(\n            'http://ida.omroep.nl/app.php/%s' % video_id, video_id,\n            'Downloading formats JSON', query={\n                'adaptive': 'yes',\n                'token': token,\n            })['items'][0]\n        for num, item in enumerate(items):\n            item_url = item.get('url')\n            if not is_legal_url(item_url):\n                continue\n            urls.add(item_url)\n            format_id = self._search_regex(\n                r'video/ida/([^/]+)', item_url, 'format id',\n                default=None)\n\n            item_label = item.get('label')\n\n            def add_format_url(format_url):\n                width = int_or_none(self._search_regex(\n                    r'(\\d+)[xX]\\d+', format_url, 'width', default=None))\n                height = int_or_none(self._search_regex(\n                    r'\\d+[xX](\\d+)', format_url, 'height', default=None))\n                if item_label in QUALITY_LABELS:\n                    quality = quality_from_label(item_label)\n                    f_id = item_label\n                elif item_label in QUALITY_FORMATS:\n                    quality = quality_from_format_id(format_id)\n                    f_id = format_id\n                else:\n                    quality, f_id = [None] * 2\n                formats.append({\n                    'url': format_url,\n                    'format_id': f_id,\n                    'width': width,\n                    'height': height,\n                    'quality': quality,\n                })\n\n            \n            if item.get('contentType') in ('url', 'audio'):\n                add_format_url(item_url)\n                continue\n\n            try:\n                stream_info = self._download_json(\n                    item_url + '&type=json', video_id,\n                    'Downloading %s stream JSON'\n                    % item_label or item.get('format') or format_id or num)\n            except ExtractorError as ee:\n                if isinstance(ee.cause, compat_HTTPError) and ee.cause.code == 404:\n                    error = (self._parse_json(\n                        ee.cause.read().decode(), video_id,\n                        fatal=False) or {}).get('errorstring')\n                    if error:\n                        raise ExtractorError(error, expected=True)\n                raise\n            \n            if isinstance(stream_info, compat_str):\n                if not stream_info.startswith('http'):\n                    continue\n                video_url = stream_info\n            \n            else:\n                video_url = stream_info.get('url')\n            if not video_url or video_url in urls:\n                continue\n            urls.add(item_url)\n            if determine_ext(video_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, ext='mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            else:\n                add_format_url(video_url)\n\n        is_live = metadata.get('medium') == 'live'\n\n        if not is_live:\n            for num, stream in enumerate(metadata.get('streams', [])):\n                stream_url = stream.get('url')\n                if not is_legal_url(stream_url):\n                    continue\n                urls.add(stream_url)\n                \n                stream_type = stream.get('type', '').lower()\n                if stream_type in ['ss', 'ms']:\n                    continue\n                if stream_type == 'hds':\n                    f4m_formats = self._extract_f4m_formats(\n                        stream_url, video_id, fatal=False)\n                    \n                    for f4m_format in f4m_formats:\n                        f4m_format['preference'] = -1\n                    formats.extend(f4m_formats)\n                elif stream_type == 'hls':\n                    formats.extend(self._extract_m3u8_formats(\n                        stream_url, video_id, ext='mp4', fatal=False))\n                \n                elif '.asf' in stream_url:\n                    asx = self._download_xml(\n                        stream_url, video_id,\n                        'Downloading stream %d ASX playlist' % num,\n                        transform_source=fix_xml_ampersands, fatal=False)\n                    if not asx:\n                        continue\n                    ref = asx.find('./ENTRY/Ref')\n                    if ref is None:\n                        continue\n                    video_url = ref.get('href')\n                    if not video_url or video_url in urls:\n                        continue\n                    urls.add(video_url)\n                    formats.append({\n                        'url': video_url,\n                        'ext': stream.get('formaat', 'asf'),\n                        'quality': stream.get('kwaliteit'),\n                        'preference': -10,\n                    })\n                else:\n                    formats.append({\n                        'url': stream_url,\n                        'quality': stream.get('kwaliteit'),\n                    })\n\n        self._sort_formats(formats)\n\n        subtitles = {}\n        if metadata.get('tt888') == 'ja':\n            subtitles['nl'] = [{\n                'ext': 'vtt',\n                'url': 'http://tt888.omroep.nl/tt888/%s' % video_id,\n            }]\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': metadata.get('info'),\n            'thumbnail': metadata.get('images', [{'url': None}])[-1]['url'],\n            'upload_date': unified_strdate(metadata.get('gidsdatum')),\n            'duration': parse_duration(metadata.get('tijdsduur')),\n            'formats': formats,\n            'subtitles': subtitles,\n            'is_live': is_live,\n        }\n\n\nclass NPOLiveIE(NPOBaseIE):\n    IE_NAME = 'npo.nl:live'\n    _VALID_URL = r'https?://(?:www\\.)?npo\\.nl/live(?:/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'http://www.npo.nl/live/npo-1',\n        'info_dict': {\n            'id': 'LI_NL1_4188102',\n            'display_id': 'npo-1',\n            'ext': 'mp4',\n            'title': 're:^NPO 1 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.npo.nl/live',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url) or 'npo-1'\n\n        webpage = self._download_webpage(url, display_id)\n\n        live_id = self._search_regex(\n            [r'media-id=\"([^\"]+)\"', r'data-prid=\"([^\"]+)\"'], webpage, 'live id')\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'npo:%s' % live_id,\n            'ie_key': NPOIE.ie_key(),\n            'id': live_id,\n            'display_id': display_id,\n        }\n\n\nclass NPORadioIE(InfoExtractor):\n    IE_NAME = 'npo.nl:radio'\n    _VALID_URL = r'https?://(?:www\\.)?npo\\.nl/radio/(?P<id>[^/]+)/?$'\n\n    _TEST = {\n        'url': 'http://www.npo.nl/radio/radio-1',\n        'info_dict': {\n            'id': 'radio-1',\n            'ext': 'mp3',\n            'title': 're:^NPO Radio 1 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }\n\n    @staticmethod\n    def _html_get_attribute_regex(attribute):\n        return r'{0}\\s*=\\s*\\'([^\\']+)\\''.format(attribute)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            self._html_get_attribute_regex('data-channel'), webpage, 'title')\n\n        stream = self._parse_json(\n            self._html_search_regex(self._html_get_attribute_regex('data-streams'), webpage, 'data-streams'),\n            video_id)\n\n        codec = stream.get('codec')\n\n        return {\n            'id': video_id,\n            'url': stream['url'],\n            'title': self._live_title(title),\n            'acodec': codec,\n            'ext': codec,\n            'is_live': True,\n        }\n\n\nclass NPORadioFragmentIE(InfoExtractor):\n    IE_NAME = 'npo.nl:radio:fragment'\n    _VALID_URL = r'https?://(?:www\\.)?npo\\.nl/radio/[^/]+/fragment/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.npo.nl/radio/radio-5/fragment/174356',\n        'md5': 'dd8cc470dad764d0fdc70a9a1e2d18c2',\n        'info_dict': {\n            'id': '174356',\n            'ext': 'mp3',\n            'title': 'Jubileumconcert Willeke Alberti',\n        },\n    }\n\n    def _real_extract(self, url):\n        audio_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, audio_id)\n\n        title = self._html_search_regex(\n            r'href=\"/radio/[^/]+/fragment/%s\" title=\"([^\"]+)\"' % audio_id,\n            webpage, 'title')\n\n        audio_url = self._search_regex(\n            r\"data-streams='([^']+)'\", webpage, 'audio url')\n\n        return {\n            'id': audio_id,\n            'url': audio_url,\n            'title': title,\n        }\n\n\nclass NPODataMidEmbedIE(InfoExtractor):\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex(\n            r'data-mid=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1', webpage, 'video_id', group='id')\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'NPO',\n            'url': 'npo:%s' % video_id,\n            'display_id': display_id\n        }\n\n\nclass SchoolTVIE(NPODataMidEmbedIE):\n    IE_NAME = 'schooltv'\n    _VALID_URL = r'https?://(?:www\\.)?schooltv\\.nl/video/(?P<id>[^/?\n\n    _TEST = {\n        'url': 'http://www.schooltv.nl/video/ademhaling-de-hele-dag-haal-je-adem-maar-wat-gebeurt-er-dan-eigenlijk-in-je-lichaam/',\n        'info_dict': {\n            'id': 'WO_NTR_429477',\n            'display_id': 'ademhaling-de-hele-dag-haal-je-adem-maar-wat-gebeurt-er-dan-eigenlijk-in-je-lichaam',\n            'title': 'Ademhaling: De hele dag haal je adem. Maar wat gebeurt er dan eigenlijk in je lichaam?',\n            'ext': 'mp4',\n            'description': 'md5:abfa0ff690adb73fd0297fd033aaa631'\n        },\n        'params': {\n            \n            'skip_download': True\n        }\n    }\n\n\nclass HetKlokhuisIE(NPODataMidEmbedIE):\n    IE_NAME = 'hetklokhuis'\n    _VALID_URL = r'https?://(?:www\\.)?hetklokhuis\\.nl/[^/]+/\\d+/(?P<id>[^/?\n\n    _TEST = {\n        'url': 'http://hetklokhuis.nl/tv-uitzending/3471/Zwaartekrachtsgolven',\n        'info_dict': {\n            'id': 'VPWON_1260528',\n            'display_id': 'Zwaartekrachtsgolven',\n            'ext': 'm4v',\n            'title': 'Het Klokhuis: Zwaartekrachtsgolven',\n            'description': 'md5:c94f31fb930d76c2efa4a4a71651dd48',\n            'upload_date': '20170223',\n        },\n        'params': {\n            'skip_download': True\n        }\n    }\n\n\nclass NPOPlaylistBaseIE(NPOIE):\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('npo:%s' % video_id if not video_id.startswith('http') else video_id)\n            for video_id in orderedSet(re.findall(self._PLAYLIST_ENTRY_RE, webpage))\n        ]\n\n        playlist_title = self._html_search_regex(\n            self._PLAYLIST_TITLE_RE, webpage, 'playlist title',\n            default=None) or self._og_search_title(webpage)\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n\n\nclass VPROIE(NPOPlaylistBaseIE):\n    IE_NAME = 'vpro'\n    _VALID_URL = r'https?://(?:www\\.)?(?:(?:tegenlicht\\.)?vpro|2doc)\\.nl/(?:[^/]+/)*(?P<id>[^/]+)\\.html'\n    _PLAYLIST_TITLE_RE = (r'<h1[^>]+class=[\"\\'].*?\\bmedia-platform-title\\b.*?[\"\\'][^>]*>([^<]+)',\n                          r'<h5[^>]+class=[\"\\'].*?\\bmedia-platform-subtitle\\b.*?[\"\\'][^>]*>([^<]+)')\n    _PLAYLIST_ENTRY_RE = r'data-media-id=\"([^\"]+)\"'\n\n    _TESTS = [\n        {\n            'url': 'http://tegenlicht.vpro.nl/afleveringen/2012-2013/de-toekomst-komt-uit-afrika.html',\n            'md5': 'f8065e4e5a7824068ed3c7e783178f2c',\n            'info_dict': {\n                'id': 'VPWON_1169289',\n                'ext': 'm4v',\n                'title': 'De toekomst komt uit Afrika',\n                'description': 'md5:52cf4eefbc96fffcbdc06d024147abea',\n                'upload_date': '20130225',\n            },\n            'skip': 'Video gone',\n        },\n        {\n            'url': 'http://www.vpro.nl/programmas/2doc/2015/sergio-herman.html',\n            'info_dict': {\n                'id': 'sergio-herman',\n                'title': 'sergio herman: fucking perfect',\n            },\n            'playlist_count': 2,\n        },\n        {\n            \n            'url': 'http://www.vpro.nl/programmas/2doc/2015/education-education.html',\n            'info_dict': {\n                'id': 'education-education',\n                'title': 'education education',\n            },\n            'playlist_count': 2,\n        },\n        {\n            'url': 'http://www.2doc.nl/documentaires/series/2doc/2015/oktober/de-tegenprestatie.html',\n            'info_dict': {\n                'id': 'de-tegenprestatie',\n                'title': 'De Tegenprestatie',\n            },\n            'playlist_count': 2,\n        }, {\n            'url': 'http://www.2doc.nl/speel~VARA_101375237~mh17-het-verdriet-van-nederland~.html',\n            'info_dict': {\n                'id': 'VARA_101375237',\n                'ext': 'm4v',\n                'title': 'MH17: Het verdriet van Nederland',\n                'description': 'md5:09e1a37c1fdb144621e22479691a9f18',\n                'upload_date': '20150716',\n            },\n            'params': {\n                \n                'skip_download': True\n            },\n        }\n    ]\n\n\nclass WNLIE(NPOPlaylistBaseIE):\n    IE_NAME = 'wnl'\n    _VALID_URL = r'https?://(?:www\\.)?omroepwnl\\.nl/video/detail/(?P<id>[^/]+)__\\d+'\n    _PLAYLIST_TITLE_RE = r'(?s)<h1[^>]+class=\"subject\"[^>]*>(.+?)</h1>'\n    _PLAYLIST_ENTRY_RE = r'<a[^>]+href=\"([^\"]+)\"[^>]+class=\"js-mid\"[^>]*>Deel \\d+'\n\n    _TESTS = [{\n        'url': 'http://www.omroepwnl.nl/video/detail/vandaag-de-dag-6-mei__060515',\n        'info_dict': {\n            'id': 'vandaag-de-dag-6-mei',\n            'title': 'Vandaag de Dag 6 mei',\n        },\n        'playlist_count': 4,\n    }]\n\n\nclass AndereTijdenIE(NPOPlaylistBaseIE):\n    IE_NAME = 'anderetijden'\n    _VALID_URL = r'https?://(?:www\\.)?anderetijden\\.nl/programma/(?:[^/]+/)+(?P<id>[^/?\n    _PLAYLIST_TITLE_RE = r'(?s)<h1[^>]+class=[\"\\'].*?\\bpage-title\\b.*?[\"\\'][^>]*>(.+?)</h1>'\n    _PLAYLIST_ENTRY_RE = r'<figure[^>]+class=[\"\\']episode-container episode-page[\"\\'][^>]+data-prid=[\"\\'](.+?)[\"\\']'\n\n    _TESTS = [{\n        'url': 'http://anderetijden.nl/programma/1/Andere-Tijden/aflevering/676/Duitse-soldaten-over-de-Slag-bij-Arnhem',\n        'info_dict': {\n            'id': 'Duitse-soldaten-over-de-Slag-bij-Arnhem',\n            'title': 'Duitse soldaten over de Slag bij Arnhem',\n        },\n        'playlist_count': 3,\n    }]\n", "comments": "(?x)\n                    (?:\n                        npo:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                npo\\.nl/(?!(?:live|radio)/)(?:[^/]+/){2}|\n                                ntr\\.nl/(?:[^/]+/){2,}|\n                                omroepwnl\\.nl/video/fragment/[^/]+__|\n                                (?:zapp|npo3)\\.nl/(?:[^/]+/){2,}\n                            )\n                        )\n                        (?P<id>[^/?#]+)\n                '''\n\n    _TESTS = [{\n        'url': 'http://www.npo.nl/nieuwsuur/22-06-2014/VPWON_1220719',\n        'md5': '4b3f9c429157ec4775f2c9cb7b911016',\n        'info_dict': {\n            'id': 'VPWON_1220719',\n            'ext': 'm4v',\n            'title': 'Nieuwsuur',\n            'description': 'Dagelijks tussen tien en elf: nieuws, sport en achtergronden.',\n            'upload_date': '20140622',\n        },\n    }, {\n        'url': 'http://www.npo.nl/de-mega-mike-mega-thomas-show/27-02-2009/VARA_101191800',\n        'md5': 'da50a5787dbfc1603c4ad80f31c5120b',\n        'info_dict': {\n            'id': 'VARA_101191800',\n            'ext': 'm4v',\n            'title': 'De Mega Mike & Mega Thomas show: The best of.',\n            'description': 'md5:3b74c97fc9d6901d5a665aac0e5400f4',\n            'upload_date': '20090227',\n            'duration': 2400,\n        },\n    }, {\n        'url': 'http://www.npo.nl/tegenlicht/25-02-2013/VPWON_1169289',\n        'md5': 'f8065e4e5a7824068ed3c7e783178f2c',\n        'info_dict': {\n            'id': 'VPWON_1169289',\n            'ext': 'm4v',\n            'title': 'Tegenlicht: Zwart geld. De toekomst komt uit Afrika',\n            'description': 'md5:52cf4eefbc96fffcbdc06d024147abea',\n            'upload_date': '20130225',\n            'duration': 3000,\n        },\n    }, {\n        'url': 'http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706',\n        'info_dict': {\n            'id': 'WO_VPRO_043706',\n            'ext': 'm4v',\n            'title': 'De nieuwe mens - Deel 1',\n            'description': 'md5:518ae51ba1293ffb80d8d8ce90b74e4b',\n            'duration': 4680,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        # non asf in streams\n        'url': 'http://www.npo.nl/hoe-gaat-europa-verder-na-parijs/10-01-2015/WO_NOS_762771',\n        'info_dict': {\n            'id': 'WO_NOS_762771',\n            'ext': 'mp4',\n            'title': 'Hoe gaat Europa verder na Parijs?',\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.ntr.nl/Aap-Poot-Pies/27/detail/Aap-poot-pies/VPWON_1233944#content',\n        'info_dict': {\n            'id': 'VPWON_1233944',\n            'ext': 'm4v',\n            'title': 'Aap, poot, pies',\n            'description': 'md5:c9c8005d1869ae65b858e82c01a91fde',\n            'upload_date': '20150508',\n            'duration': 599,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.omroepwnl.nl/video/fragment/vandaag-de-dag-verkiezingen__POMS_WNL_853698',\n        'info_dict': {\n            'id': 'POW_00996502',\n            'ext': 'm4v',\n            'title': '''\"Dit is wel een 'landslide'...\"\n\"\n# audio\n# live stream\n# We have to remove the javascript callback\n# For some videos actual video id (prid) is different (e.g. for\n# http://www.omroepwnl.nl/video/fragment/vandaag-de-dag-verkiezingen__POMS_WNL_853698\n# video id is POMS_WNL_853698 but prid is POW_00996502)\n# titel is too generic in some cases so utilize aflevering_titel as well\n# when available (e.g. http://tegenlicht.vpro.nl/afleveringen/2014-2015/access-to-africa.html)\n# Example: http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706\n# Stream URL instead of JSON, example: npo:LI_NL1_4188102\n# JSON\n# smooth streaming is not supported\n# f4m downloader downloads only piece of live stream\n# Example: http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706\n#&]+))?'\n#&]+)'\n# Skip because of m3u8 download\n#&]+)'\n# playlist with youtube embed\n# Skip because of m3u8 download\n#&]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    fix_xml_ampersands,\n    int_or_none,\n    orderedSet,\n    parse_duration,\n    qualities,\n    strip_jsonp,\n    unified_strdate,\n)\n\n\nclass NPOBaseIE(InfoExtractor):\n    def _get_token(self, video_id):\n        return self._download_json(\n            'http://ida.omroep.nl/app.php/auth', video_id,\n            note='Downloading token')['token']\n\n\nclass NPOIE(NPOBaseIE):\n    IE_NAME = 'npo'\n    IE_DESC = 'npo.nl, ntr.nl, omroepwnl.nl, zapp.nl and npo3.nl'\n    _VALID_URL = r'''(?x)\n                    (?:\n                        npo:|\n                        https?://\n                            (?:www\\.)?\n                            (?:\n                                npo\\.nl/(?!(?:live|radio)/)(?:[^/]+/){2}|\n                                ntr\\.nl/(?:[^/]+/){2,}|\n                                omroepwnl\\.nl/video/fragment/[^/]+__|\n                                (?:zapp|npo3)\\.nl/(?:[^/]+/){2,}\n                            )\n                        )\n                        (?P<id>[^/?#]+)\n                '''\n\n    _TESTS = [{\n        'url': 'http://www.npo.nl/nieuwsuur/22-06-2014/VPWON_1220719',\n        'md5': '4b3f9c429157ec4775f2c9cb7b911016',\n        'info_dict': {\n            'id': 'VPWON_1220719',\n            'ext': 'm4v',\n            'title': 'Nieuwsuur',\n            'description': 'Dagelijks tussen tien en elf: nieuws, sport en achtergronden.',\n            'upload_date': '20140622',\n        },\n    }, {\n        'url': 'http://www.npo.nl/de-mega-mike-mega-thomas-show/27-02-2009/VARA_101191800',\n        'md5': 'da50a5787dbfc1603c4ad80f31c5120b',\n        'info_dict': {\n            'id': 'VARA_101191800',\n            'ext': 'm4v',\n            'title': 'De Mega Mike & Mega Thomas show: The best of.',\n            'description': 'md5:3b74c97fc9d6901d5a665aac0e5400f4',\n            'upload_date': '20090227',\n            'duration': 2400,\n        },\n    }, {\n        'url': 'http://www.npo.nl/tegenlicht/25-02-2013/VPWON_1169289',\n        'md5': 'f8065e4e5a7824068ed3c7e783178f2c',\n        'info_dict': {\n            'id': 'VPWON_1169289',\n            'ext': 'm4v',\n            'title': 'Tegenlicht: Zwart geld. De toekomst komt uit Afrika',\n            'description': 'md5:52cf4eefbc96fffcbdc06d024147abea',\n            'upload_date': '20130225',\n            'duration': 3000,\n        },\n    }, {\n        'url': 'http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706',\n        'info_dict': {\n            'id': 'WO_VPRO_043706',\n            'ext': 'm4v',\n            'title': 'De nieuwe mens - Deel 1',\n            'description': 'md5:518ae51ba1293ffb80d8d8ce90b74e4b',\n            'duration': 4680,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        # non asf in streams\n        'url': 'http://www.npo.nl/hoe-gaat-europa-verder-na-parijs/10-01-2015/WO_NOS_762771',\n        'info_dict': {\n            'id': 'WO_NOS_762771',\n            'ext': 'mp4',\n            'title': 'Hoe gaat Europa verder na Parijs?',\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.ntr.nl/Aap-Poot-Pies/27/detail/Aap-poot-pies/VPWON_1233944#content',\n        'info_dict': {\n            'id': 'VPWON_1233944',\n            'ext': 'm4v',\n            'title': 'Aap, poot, pies',\n            'description': 'md5:c9c8005d1869ae65b858e82c01a91fde',\n            'upload_date': '20150508',\n            'duration': 599,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.omroepwnl.nl/video/fragment/vandaag-de-dag-verkiezingen__POMS_WNL_853698',\n        'info_dict': {\n            'id': 'POW_00996502',\n            'ext': 'm4v',\n            'title': '''\"Dit is wel een 'landslide'...\"''',\n            'description': 'md5:f8d66d537dfb641380226e31ca57b8e8',\n            'upload_date': '20150508',\n            'duration': 462,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        # audio\n        'url': 'http://www.npo.nl/jouw-stad-rotterdam/29-01-2017/RBX_FUNX_6683215/RBX_FUNX_7601437',\n        'info_dict': {\n            'id': 'RBX_FUNX_6683215',\n            'ext': 'mp3',\n            'title': 'Jouw Stad Rotterdam',\n            'description': 'md5:db251505244f097717ec59fabc372d9f',\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.zapp.nl/de-bzt-show/gemist/KN_1687547',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.zapp.nl/de-bzt-show/filmpjes/POMS_KN_7315118',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.zapp.nl/beste-vrienden-quiz/extra-video-s/WO_NTR_1067990',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.npo3.nl/3onderzoekt/16-09-2015/VPWON_1239870',\n        'only_matching': True,\n    }, {\n        # live stream\n        'url': 'npo:LI_NL1_4188102',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.npo.nl/radio-gaga/13-06-2017/BNN_101383373',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.zapp.nl/1803-skelterlab/instructie-video-s/740-instructievideo-s/POMS_AT_11736927',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        return self._get_info(video_id)\n\n    def _get_info(self, video_id):\n        metadata = self._download_json(\n            'http://e.omroep.nl/metadata/%s' % video_id,\n            video_id,\n            # We have to remove the javascript callback\n            transform_source=strip_jsonp,\n        )\n\n        error = metadata.get('error')\n        if error:\n            raise ExtractorError(error, expected=True)\n\n        # For some videos actual video id (prid) is different (e.g. for\n        # http://www.omroepwnl.nl/video/fragment/vandaag-de-dag-verkiezingen__POMS_WNL_853698\n        # video id is POMS_WNL_853698 but prid is POW_00996502)\n        video_id = metadata.get('prid') or video_id\n\n        # titel is too generic in some cases so utilize aflevering_titel as well\n        # when available (e.g. http://tegenlicht.vpro.nl/afleveringen/2014-2015/access-to-africa.html)\n        title = metadata['titel']\n        sub_title = metadata.get('aflevering_titel')\n        if sub_title and sub_title != title:\n            title += ': %s' % sub_title\n\n        token = self._get_token(video_id)\n\n        formats = []\n        urls = set()\n\n        def is_legal_url(format_url):\n            return format_url and format_url not in urls and re.match(\n                r'^(?:https?:)?//', format_url)\n\n        QUALITY_LABELS = ('Laag', 'Normaal', 'Hoog')\n        QUALITY_FORMATS = ('adaptive', 'wmv_sb', 'h264_sb', 'wmv_bb', 'h264_bb', 'wvc1_std', 'h264_std')\n\n        quality_from_label = qualities(QUALITY_LABELS)\n        quality_from_format_id = qualities(QUALITY_FORMATS)\n        items = self._download_json(\n            'http://ida.omroep.nl/app.php/%s' % video_id, video_id,\n            'Downloading formats JSON', query={\n                'adaptive': 'yes',\n                'token': token,\n            })['items'][0]\n        for num, item in enumerate(items):\n            item_url = item.get('url')\n            if not is_legal_url(item_url):\n                continue\n            urls.add(item_url)\n            format_id = self._search_regex(\n                r'video/ida/([^/]+)', item_url, 'format id',\n                default=None)\n\n            item_label = item.get('label')\n\n            def add_format_url(format_url):\n                width = int_or_none(self._search_regex(\n                    r'(\\d+)[xX]\\d+', format_url, 'width', default=None))\n                height = int_or_none(self._search_regex(\n                    r'\\d+[xX](\\d+)', format_url, 'height', default=None))\n                if item_label in QUALITY_LABELS:\n                    quality = quality_from_label(item_label)\n                    f_id = item_label\n                elif item_label in QUALITY_FORMATS:\n                    quality = quality_from_format_id(format_id)\n                    f_id = format_id\n                else:\n                    quality, f_id = [None] * 2\n                formats.append({\n                    'url': format_url,\n                    'format_id': f_id,\n                    'width': width,\n                    'height': height,\n                    'quality': quality,\n                })\n\n            # Example: http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706\n            if item.get('contentType') in ('url', 'audio'):\n                add_format_url(item_url)\n                continue\n\n            try:\n                stream_info = self._download_json(\n                    item_url + '&type=json', video_id,\n                    'Downloading %s stream JSON'\n                    % item_label or item.get('format') or format_id or num)\n            except ExtractorError as ee:\n                if isinstance(ee.cause, compat_HTTPError) and ee.cause.code == 404:\n                    error = (self._parse_json(\n                        ee.cause.read().decode(), video_id,\n                        fatal=False) or {}).get('errorstring')\n                    if error:\n                        raise ExtractorError(error, expected=True)\n                raise\n            # Stream URL instead of JSON, example: npo:LI_NL1_4188102\n            if isinstance(stream_info, compat_str):\n                if not stream_info.startswith('http'):\n                    continue\n                video_url = stream_info\n            # JSON\n            else:\n                video_url = stream_info.get('url')\n            if not video_url or video_url in urls:\n                continue\n            urls.add(item_url)\n            if determine_ext(video_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, video_id, ext='mp4',\n                    entry_protocol='m3u8_native', m3u8_id='hls', fatal=False))\n            else:\n                add_format_url(video_url)\n\n        is_live = metadata.get('medium') == 'live'\n\n        if not is_live:\n            for num, stream in enumerate(metadata.get('streams', [])):\n                stream_url = stream.get('url')\n                if not is_legal_url(stream_url):\n                    continue\n                urls.add(stream_url)\n                # smooth streaming is not supported\n                stream_type = stream.get('type', '').lower()\n                if stream_type in ['ss', 'ms']:\n                    continue\n                if stream_type == 'hds':\n                    f4m_formats = self._extract_f4m_formats(\n                        stream_url, video_id, fatal=False)\n                    # f4m downloader downloads only piece of live stream\n                    for f4m_format in f4m_formats:\n                        f4m_format['preference'] = -1\n                    formats.extend(f4m_formats)\n                elif stream_type == 'hls':\n                    formats.extend(self._extract_m3u8_formats(\n                        stream_url, video_id, ext='mp4', fatal=False))\n                # Example: http://www.npo.nl/de-nieuwe-mens-deel-1/21-07-2010/WO_VPRO_043706\n                elif '.asf' in stream_url:\n                    asx = self._download_xml(\n                        stream_url, video_id,\n                        'Downloading stream %d ASX playlist' % num,\n                        transform_source=fix_xml_ampersands, fatal=False)\n                    if not asx:\n                        continue\n                    ref = asx.find('./ENTRY/Ref')\n                    if ref is None:\n                        continue\n                    video_url = ref.get('href')\n                    if not video_url or video_url in urls:\n                        continue\n                    urls.add(video_url)\n                    formats.append({\n                        'url': video_url,\n                        'ext': stream.get('formaat', 'asf'),\n                        'quality': stream.get('kwaliteit'),\n                        'preference': -10,\n                    })\n                else:\n                    formats.append({\n                        'url': stream_url,\n                        'quality': stream.get('kwaliteit'),\n                    })\n\n        self._sort_formats(formats)\n\n        subtitles = {}\n        if metadata.get('tt888') == 'ja':\n            subtitles['nl'] = [{\n                'ext': 'vtt',\n                'url': 'http://tt888.omroep.nl/tt888/%s' % video_id,\n            }]\n\n        return {\n            'id': video_id,\n            'title': self._live_title(title) if is_live else title,\n            'description': metadata.get('info'),\n            'thumbnail': metadata.get('images', [{'url': None}])[-1]['url'],\n            'upload_date': unified_strdate(metadata.get('gidsdatum')),\n            'duration': parse_duration(metadata.get('tijdsduur')),\n            'formats': formats,\n            'subtitles': subtitles,\n            'is_live': is_live,\n        }\n\n\nclass NPOLiveIE(NPOBaseIE):\n    IE_NAME = 'npo.nl:live'\n    _VALID_URL = r'https?://(?:www\\.)?npo\\.nl/live(?:/(?P<id>[^/?#&]+))?'\n\n    _TESTS = [{\n        'url': 'http://www.npo.nl/live/npo-1',\n        'info_dict': {\n            'id': 'LI_NL1_4188102',\n            'display_id': 'npo-1',\n            'ext': 'mp4',\n            'title': 're:^NPO 1 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.npo.nl/live',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url) or 'npo-1'\n\n        webpage = self._download_webpage(url, display_id)\n\n        live_id = self._search_regex(\n            [r'media-id=\"([^\"]+)\"', r'data-prid=\"([^\"]+)\"'], webpage, 'live id')\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'npo:%s' % live_id,\n            'ie_key': NPOIE.ie_key(),\n            'id': live_id,\n            'display_id': display_id,\n        }\n\n\nclass NPORadioIE(InfoExtractor):\n    IE_NAME = 'npo.nl:radio'\n    _VALID_URL = r'https?://(?:www\\.)?npo\\.nl/radio/(?P<id>[^/]+)/?$'\n\n    _TEST = {\n        'url': 'http://www.npo.nl/radio/radio-1',\n        'info_dict': {\n            'id': 'radio-1',\n            'ext': 'mp3',\n            'title': 're:^NPO Radio 1 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }\n\n    @staticmethod\n    def _html_get_attribute_regex(attribute):\n        return r'{0}\\s*=\\s*\\'([^\\']+)\\''.format(attribute)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            self._html_get_attribute_regex('data-channel'), webpage, 'title')\n\n        stream = self._parse_json(\n            self._html_search_regex(self._html_get_attribute_regex('data-streams'), webpage, 'data-streams'),\n            video_id)\n\n        codec = stream.get('codec')\n\n        return {\n            'id': video_id,\n            'url': stream['url'],\n            'title': self._live_title(title),\n            'acodec': codec,\n            'ext': codec,\n            'is_live': True,\n        }\n\n\nclass NPORadioFragmentIE(InfoExtractor):\n    IE_NAME = 'npo.nl:radio:fragment'\n    _VALID_URL = r'https?://(?:www\\.)?npo\\.nl/radio/[^/]+/fragment/(?P<id>\\d+)'\n\n    _TEST = {\n        'url': 'http://www.npo.nl/radio/radio-5/fragment/174356',\n        'md5': 'dd8cc470dad764d0fdc70a9a1e2d18c2',\n        'info_dict': {\n            'id': '174356',\n            'ext': 'mp3',\n            'title': 'Jubileumconcert Willeke Alberti',\n        },\n    }\n\n    def _real_extract(self, url):\n        audio_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, audio_id)\n\n        title = self._html_search_regex(\n            r'href=\"/radio/[^/]+/fragment/%s\" title=\"([^\"]+)\"' % audio_id,\n            webpage, 'title')\n\n        audio_url = self._search_regex(\n            r\"data-streams='([^']+)'\", webpage, 'audio url')\n\n        return {\n            'id': audio_id,\n            'url': audio_url,\n            'title': title,\n        }\n\n\nclass NPODataMidEmbedIE(InfoExtractor):\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._search_regex(\n            r'data-mid=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1', webpage, 'video_id', group='id')\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'NPO',\n            'url': 'npo:%s' % video_id,\n            'display_id': display_id\n        }\n\n\nclass SchoolTVIE(NPODataMidEmbedIE):\n    IE_NAME = 'schooltv'\n    _VALID_URL = r'https?://(?:www\\.)?schooltv\\.nl/video/(?P<id>[^/?#&]+)'\n\n    _TEST = {\n        'url': 'http://www.schooltv.nl/video/ademhaling-de-hele-dag-haal-je-adem-maar-wat-gebeurt-er-dan-eigenlijk-in-je-lichaam/',\n        'info_dict': {\n            'id': 'WO_NTR_429477',\n            'display_id': 'ademhaling-de-hele-dag-haal-je-adem-maar-wat-gebeurt-er-dan-eigenlijk-in-je-lichaam',\n            'title': 'Ademhaling: De hele dag haal je adem. Maar wat gebeurt er dan eigenlijk in je lichaam?',\n            'ext': 'mp4',\n            'description': 'md5:abfa0ff690adb73fd0297fd033aaa631'\n        },\n        'params': {\n            # Skip because of m3u8 download\n            'skip_download': True\n        }\n    }\n\n\nclass HetKlokhuisIE(NPODataMidEmbedIE):\n    IE_NAME = 'hetklokhuis'\n    _VALID_URL = r'https?://(?:www\\.)?hetklokhuis\\.nl/[^/]+/\\d+/(?P<id>[^/?#&]+)'\n\n    _TEST = {\n        'url': 'http://hetklokhuis.nl/tv-uitzending/3471/Zwaartekrachtsgolven',\n        'info_dict': {\n            'id': 'VPWON_1260528',\n            'display_id': 'Zwaartekrachtsgolven',\n            'ext': 'm4v',\n            'title': 'Het Klokhuis: Zwaartekrachtsgolven',\n            'description': 'md5:c94f31fb930d76c2efa4a4a71651dd48',\n            'upload_date': '20170223',\n        },\n        'params': {\n            'skip_download': True\n        }\n    }\n\n\nclass NPOPlaylistBaseIE(NPOIE):\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = [\n            self.url_result('npo:%s' % video_id if not video_id.startswith('http') else video_id)\n            for video_id in orderedSet(re.findall(self._PLAYLIST_ENTRY_RE, webpage))\n        ]\n\n        playlist_title = self._html_search_regex(\n            self._PLAYLIST_TITLE_RE, webpage, 'playlist title',\n            default=None) or self._og_search_title(webpage)\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n\n\nclass VPROIE(NPOPlaylistBaseIE):\n    IE_NAME = 'vpro'\n    _VALID_URL = r'https?://(?:www\\.)?(?:(?:tegenlicht\\.)?vpro|2doc)\\.nl/(?:[^/]+/)*(?P<id>[^/]+)\\.html'\n    _PLAYLIST_TITLE_RE = (r'<h1[^>]+class=[\"\\'].*?\\bmedia-platform-title\\b.*?[\"\\'][^>]*>([^<]+)',\n                          r'<h5[^>]+class=[\"\\'].*?\\bmedia-platform-subtitle\\b.*?[\"\\'][^>]*>([^<]+)')\n    _PLAYLIST_ENTRY_RE = r'data-media-id=\"([^\"]+)\"'\n\n    _TESTS = [\n        {\n            'url': 'http://tegenlicht.vpro.nl/afleveringen/2012-2013/de-toekomst-komt-uit-afrika.html',\n            'md5': 'f8065e4e5a7824068ed3c7e783178f2c',\n            'info_dict': {\n                'id': 'VPWON_1169289',\n                'ext': 'm4v',\n                'title': 'De toekomst komt uit Afrika',\n                'description': 'md5:52cf4eefbc96fffcbdc06d024147abea',\n                'upload_date': '20130225',\n            },\n            'skip': 'Video gone',\n        },\n        {\n            'url': 'http://www.vpro.nl/programmas/2doc/2015/sergio-herman.html',\n            'info_dict': {\n                'id': 'sergio-herman',\n                'title': 'sergio herman: fucking perfect',\n            },\n            'playlist_count': 2,\n        },\n        {\n            # playlist with youtube embed\n            'url': 'http://www.vpro.nl/programmas/2doc/2015/education-education.html',\n            'info_dict': {\n                'id': 'education-education',\n                'title': 'education education',\n            },\n            'playlist_count': 2,\n        },\n        {\n            'url': 'http://www.2doc.nl/documentaires/series/2doc/2015/oktober/de-tegenprestatie.html',\n            'info_dict': {\n                'id': 'de-tegenprestatie',\n                'title': 'De Tegenprestatie',\n            },\n            'playlist_count': 2,\n        }, {\n            'url': 'http://www.2doc.nl/speel~VARA_101375237~mh17-het-verdriet-van-nederland~.html',\n            'info_dict': {\n                'id': 'VARA_101375237',\n                'ext': 'm4v',\n                'title': 'MH17: Het verdriet van Nederland',\n                'description': 'md5:09e1a37c1fdb144621e22479691a9f18',\n                'upload_date': '20150716',\n            },\n            'params': {\n                # Skip because of m3u8 download\n                'skip_download': True\n            },\n        }\n    ]\n\n\nclass WNLIE(NPOPlaylistBaseIE):\n    IE_NAME = 'wnl'\n    _VALID_URL = r'https?://(?:www\\.)?omroepwnl\\.nl/video/detail/(?P<id>[^/]+)__\\d+'\n    _PLAYLIST_TITLE_RE = r'(?s)<h1[^>]+class=\"subject\"[^>]*>(.+?)</h1>'\n    _PLAYLIST_ENTRY_RE = r'<a[^>]+href=\"([^\"]+)\"[^>]+class=\"js-mid\"[^>]*>Deel \\d+'\n\n    _TESTS = [{\n        'url': 'http://www.omroepwnl.nl/video/detail/vandaag-de-dag-6-mei__060515',\n        'info_dict': {\n            'id': 'vandaag-de-dag-6-mei',\n            'title': 'Vandaag de Dag 6 mei',\n        },\n        'playlist_count': 4,\n    }]\n\n\nclass AndereTijdenIE(NPOPlaylistBaseIE):\n    IE_NAME = 'anderetijden'\n    _VALID_URL = r'https?://(?:www\\.)?anderetijden\\.nl/programma/(?:[^/]+/)+(?P<id>[^/?#&]+)'\n    _PLAYLIST_TITLE_RE = r'(?s)<h1[^>]+class=[\"\\'].*?\\bpage-title\\b.*?[\"\\'][^>]*>(.+?)</h1>'\n    _PLAYLIST_ENTRY_RE = r'<figure[^>]+class=[\"\\']episode-container episode-page[\"\\'][^>]+data-prid=[\"\\'](.+?)[\"\\']'\n\n    _TESTS = [{\n        'url': 'http://anderetijden.nl/programma/1/Andere-Tijden/aflevering/676/Duitse-soldaten-over-de-Slag-bij-Arnhem',\n        'info_dict': {\n            'id': 'Duitse-soldaten-over-de-Slag-bij-Arnhem',\n            'title': 'Duitse soldaten over de Slag bij Arnhem',\n        },\n        'playlist_count': 3,\n    }]\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "npo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/npo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}