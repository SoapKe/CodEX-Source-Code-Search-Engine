{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n)\n\n\nclass StreamableIE(InfoExtractor):\n    _VALID_URL = r'https?://streamable\\.com/(?:[es]/)?(?P<id>\\w+)'\n    _TESTS = [\n        {\n            'url': 'https://streamable.com/dnd1',\n            'md5': '3e3bc5ca088b48c2d436529b64397fef',\n            'info_dict': {\n                'id': 'dnd1',\n                'ext': 'mp4',\n                'title': 'Mikel Oiarzabal scores to make it 0-3 for La Real against Espanyol',\n                'thumbnail': r're:https?://.*\\.jpg$',\n                'uploader': 'teabaker',\n                'timestamp': 1454964157.35115,\n                'upload_date': '20160208',\n                'duration': 61.516,\n                'view_count': int,\n            }\n        },\n        \n        {\n            'url': 'https://streamable.com/moo',\n            'md5': '2cf6923639b87fba3279ad0df3a64e73',\n            'info_dict': {\n                'id': 'moo',\n                'ext': 'mp4',\n                'title': '\"Please don\\'t eat me!\"',\n                'thumbnail': r're:https?://.*\\.jpg$',\n                'timestamp': 1426115495,\n                'upload_date': '20150311',\n                'duration': 12,\n                'view_count': int,\n            }\n        },\n        {\n            'url': 'https://streamable.com/e/dnd1',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://streamable.com/s/okkqk/drxjds',\n            'only_matching': True,\n        }\n    ]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=(?P<q1>[\\'\"])(?P<src>(?:https?:)?//streamable\\.com/(?:(?!\\1).+))(?P=q1)',\n            webpage)\n        if mobj:\n            return mobj.group('src')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        \n        \n        \n        video = self._download_json(\n            'https://ajax.streamable.com/videos/%s' % video_id, video_id)\n\n        \n        \n        \n        \n        \n        status = video.get('status')\n        if status != 2:\n            raise ExtractorError(\n                'This video is currently unavailable. It may still be uploading or processing.',\n                expected=True)\n\n        title = video.get('reddit_title') or video['title']\n\n        formats = []\n        for key, info in video['files'].items():\n            if not info.get('url'):\n                continue\n            formats.append({\n                'format_id': key,\n                'url': self._proto_relative_url(info['url']),\n                'width': int_or_none(info.get('width')),\n                'height': int_or_none(info.get('height')),\n                'filesize': int_or_none(info.get('size')),\n                'fps': int_or_none(info.get('framerate')),\n                'vbr': float_or_none(info.get('bitrate'), 1000)\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': self._proto_relative_url(video.get('thumbnail_url')),\n            'uploader': video.get('owner', {}).get('user_name'),\n            'timestamp': float_or_none(video.get('date_added')),\n            'duration': float_or_none(video.get('duration')),\n            'view_count': int_or_none(video.get('plays')),\n            'formats': formats\n        }\n", "comments": "# coding: utf-8\n# older video without bitrate, width/height, etc. info\n# Note: Using the ajax API, as the public Streamable API doesn't seem\n# to return video info like the title properly sometimes, and doesn't\n# include info like the video duration\n# Format IDs:\n# 0 The video is being uploaded\n# 1 The video is being processed\n# 2 The video has at least one file ready\n# 3 The video is unavailable due to an error\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n)\n\n\nclass StreamableIE(InfoExtractor):\n    _VALID_URL = r'https?://streamable\\.com/(?:[es]/)?(?P<id>\\w+)'\n    _TESTS = [\n        {\n            'url': 'https://streamable.com/dnd1',\n            'md5': '3e3bc5ca088b48c2d436529b64397fef',\n            'info_dict': {\n                'id': 'dnd1',\n                'ext': 'mp4',\n                'title': 'Mikel Oiarzabal scores to make it 0-3 for La Real against Espanyol',\n                'thumbnail': r're:https?://.*\\.jpg$',\n                'uploader': 'teabaker',\n                'timestamp': 1454964157.35115,\n                'upload_date': '20160208',\n                'duration': 61.516,\n                'view_count': int,\n            }\n        },\n        # older video without bitrate, width/height, etc. info\n        {\n            'url': 'https://streamable.com/moo',\n            'md5': '2cf6923639b87fba3279ad0df3a64e73',\n            'info_dict': {\n                'id': 'moo',\n                'ext': 'mp4',\n                'title': '\"Please don\\'t eat me!\"',\n                'thumbnail': r're:https?://.*\\.jpg$',\n                'timestamp': 1426115495,\n                'upload_date': '20150311',\n                'duration': 12,\n                'view_count': int,\n            }\n        },\n        {\n            'url': 'https://streamable.com/e/dnd1',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://streamable.com/s/okkqk/drxjds',\n            'only_matching': True,\n        }\n    ]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+src=(?P<q1>[\\'\"])(?P<src>(?:https?:)?//streamable\\.com/(?:(?!\\1).+))(?P=q1)',\n            webpage)\n        if mobj:\n            return mobj.group('src')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        # Note: Using the ajax API, as the public Streamable API doesn't seem\n        # to return video info like the title properly sometimes, and doesn't\n        # include info like the video duration\n        video = self._download_json(\n            'https://ajax.streamable.com/videos/%s' % video_id, video_id)\n\n        # Format IDs:\n        # 0 The video is being uploaded\n        # 1 The video is being processed\n        # 2 The video has at least one file ready\n        # 3 The video is unavailable due to an error\n        status = video.get('status')\n        if status != 2:\n            raise ExtractorError(\n                'This video is currently unavailable. It may still be uploading or processing.',\n                expected=True)\n\n        title = video.get('reddit_title') or video['title']\n\n        formats = []\n        for key, info in video['files'].items():\n            if not info.get('url'):\n                continue\n            formats.append({\n                'format_id': key,\n                'url': self._proto_relative_url(info['url']),\n                'width': int_or_none(info.get('width')),\n                'height': int_or_none(info.get('height')),\n                'filesize': int_or_none(info.get('size')),\n                'fps': int_or_none(info.get('framerate')),\n                'vbr': float_or_none(info.get('bitrate'), 1000)\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('description'),\n            'thumbnail': self._proto_relative_url(video.get('thumbnail_url')),\n            'uploader': video.get('owner', {}).get('user_name'),\n            'timestamp': float_or_none(video.get('date_added')),\n            'duration': float_or_none(video.get('duration')),\n            'view_count': int_or_none(video.get('plays')),\n            'formats': formats\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "streamable.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/streamable.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}