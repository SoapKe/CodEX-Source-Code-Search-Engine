{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2016, Eric D Helms <ericdhelms@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: foreman\nshort_description: Manage Foreman Resources\ndescription:\n    - Allows the management of Foreman resources inside your Foreman server.\nversion_added: \"2.3\"\nauthor:\n- Eric D Helms (@ehelms)\nrequirements:\n    - nailgun >= 0.28.0\n    - python >= 2.6\n    - datetime\noptions:\n    server_url:\n        description:\n            - URL of Foreman server.\n        required: true\n    username:\n        description:\n            - Username on Foreman server.\n        required: true\n    password:\n        description:\n            - Password for user accessing Foreman server.\n        required: true\n    entity:\n        description:\n            - The Foreman resource that the action will be performed on (e.g. organization, host).\n        required: true\n    params:\n        description:\n            - Parameters associated to the entity resource to set or edit in dictionary format (e.g. name, description).\n        required: true\n'''\n\nEXAMPLES = '''\n- name: Create CI Organization\n  foreman:\n    username: admin\n    password: admin\n    server_url: https://fakeserver.com\n    entity: organization\n    params:\n      name: My Cool New Organization\n  delegate_to: localhost\n'''\n\nRETURN = '''# '''\n\nimport traceback\n\ntry:\n    from nailgun import entities\n    from nailgun.config import ServerConfig\n    HAS_NAILGUN_PACKAGE = True\nexcept:\n    HAS_NAILGUN_PACKAGE = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\nclass NailGun(object):\n    def __init__(self, server, entities, module):\n        self._server = server\n        self._entities = entities\n        self._module = module\n\n    def find_organization(self, name, **params):\n        org = self._entities.Organization(self._server, name=name, **params)\n        response = org.search(set(), {'search': 'name={}'.format(name)})\n\n        if len(response) == 1:\n            return response[0]\n\n        return None\n\n    def organization(self, params):\n        name = params['name']\n        del params['name']\n        org = self.find_organization(name, **params)\n\n        if org:\n            org = self._entities.Organization(self._server, name=name, id=org.id, **params)\n            org.update()\n        else:\n            org = self._entities.Organization(self._server, name=name, **params)\n            org.create()\n\n        return True\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            server_url=dict(type='str', required=True),\n            username=dict(type='str', required=True, no_log=True),\n            password=dict(type='str', required=True, no_log=True),\n            entity=dict(type='str', required=True),\n            verify_ssl=dict(type='bool', default=False),\n            params=dict(type='dict', required=True, no_log=True),\n        ),\n        supports_check_mode=True,\n    )\n\n    if not HAS_NAILGUN_PACKAGE:\n        module.fail_json(msg=\"Missing required nailgun module (check docs or install with: pip install nailgun\")\n\n    server_url = module.params['server_url']\n    username = module.params['username']\n    password = module.params['password']\n    entity = module.params['entity']\n    params = module.params['params']\n    verify_ssl = module.params['verify_ssl']\n\n    server = ServerConfig(\n        url=server_url,\n        auth=(username, password),\n        verify=verify_ssl\n    )\n    ng = NailGun(server, entities, module)\n\n    \n    try:\n        org = entities.Organization(server)\n        org.search()\n    except Exception as e:\n        module.fail_json(msg=\"Failed to connect to Foreman server: %s \" % to_native(e),\n                         exception=traceback.format_exc())\n\n    if entity == 'organization':\n        ng.organization(params)\n        module.exit_json(changed=True, result=\"%s updated\" % entity)\n    else:\n        module.fail_json(changed=False, result=\"Unsupported entity supplied\")\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  foreman short description  manage foreman resources description        allows management foreman resources inside foreman server  version added   2 3  author    eric d helms ( ehelms) requirements        nailgun    0 28 0       python    2 6       datetime options      server url          description                url foreman server          required  true     username          description                username foreman server          required  true     password          description                password user accessing foreman server          required  true     entity          description                the foreman resource action performed (e g  organization  host)          required  true     params          description                parameters associated entity resource set edit dictionary format (e g  name  description)          required  true      examples         name  create ci organization   foreman      username  admin     password  admin     server url  https   fakeserver com     entity  organization     params        name  my cool new organization   delegate  localhost      return                usr bin python        coding  utf 8        copyright  (c) 2016  eric d helms  ericdhelms gmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    lets make connection server username password ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2016, Eric D Helms <ericdhelms@gmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: foreman\nshort_description: Manage Foreman Resources\ndescription:\n    - Allows the management of Foreman resources inside your Foreman server.\nversion_added: \"2.3\"\nauthor:\n- Eric D Helms (@ehelms)\nrequirements:\n    - nailgun >= 0.28.0\n    - python >= 2.6\n    - datetime\noptions:\n    server_url:\n        description:\n            - URL of Foreman server.\n        required: true\n    username:\n        description:\n            - Username on Foreman server.\n        required: true\n    password:\n        description:\n            - Password for user accessing Foreman server.\n        required: true\n    entity:\n        description:\n            - The Foreman resource that the action will be performed on (e.g. organization, host).\n        required: true\n    params:\n        description:\n            - Parameters associated to the entity resource to set or edit in dictionary format (e.g. name, description).\n        required: true\n'''\n\nEXAMPLES = '''\n- name: Create CI Organization\n  foreman:\n    username: admin\n    password: admin\n    server_url: https://fakeserver.com\n    entity: organization\n    params:\n      name: My Cool New Organization\n  delegate_to: localhost\n'''\n\nRETURN = '''# '''\n\nimport traceback\n\ntry:\n    from nailgun import entities\n    from nailgun.config import ServerConfig\n    HAS_NAILGUN_PACKAGE = True\nexcept:\n    HAS_NAILGUN_PACKAGE = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils._text import to_native\n\n\nclass NailGun(object):\n    def __init__(self, server, entities, module):\n        self._server = server\n        self._entities = entities\n        self._module = module\n\n    def find_organization(self, name, **params):\n        org = self._entities.Organization(self._server, name=name, **params)\n        response = org.search(set(), {'search': 'name={}'.format(name)})\n\n        if len(response) == 1:\n            return response[0]\n\n        return None\n\n    def organization(self, params):\n        name = params['name']\n        del params['name']\n        org = self.find_organization(name, **params)\n\n        if org:\n            org = self._entities.Organization(self._server, name=name, id=org.id, **params)\n            org.update()\n        else:\n            org = self._entities.Organization(self._server, name=name, **params)\n            org.create()\n\n        return True\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            server_url=dict(type='str', required=True),\n            username=dict(type='str', required=True, no_log=True),\n            password=dict(type='str', required=True, no_log=True),\n            entity=dict(type='str', required=True),\n            verify_ssl=dict(type='bool', default=False),\n            params=dict(type='dict', required=True, no_log=True),\n        ),\n        supports_check_mode=True,\n    )\n\n    if not HAS_NAILGUN_PACKAGE:\n        module.fail_json(msg=\"Missing required nailgun module (check docs or install with: pip install nailgun\")\n\n    server_url = module.params['server_url']\n    username = module.params['username']\n    password = module.params['password']\n    entity = module.params['entity']\n    params = module.params['params']\n    verify_ssl = module.params['verify_ssl']\n\n    server = ServerConfig(\n        url=server_url,\n        auth=(username, password),\n        verify=verify_ssl\n    )\n    ng = NailGun(server, entities, module)\n\n    # Lets make an connection to the server with username and password\n    try:\n        org = entities.Organization(server)\n        org.search()\n    except Exception as e:\n        module.fail_json(msg=\"Failed to connect to Foreman server: %s \" % to_native(e),\n                         exception=traceback.format_exc())\n\n    if entity == 'organization':\n        ng.organization(params)\n        module.exit_json(changed=True, result=\"%s updated\" % entity)\n    else:\n        module.fail_json(changed=False, result=\"Unsupported entity supplied\")\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "foreman.py", "id": "7c80f9dfb3978e23b4752297313e4f6c", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/remote_management/foreman/foreman.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}