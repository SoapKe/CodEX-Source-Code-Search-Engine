{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.utils import timezone\n\nfrom sentry.testutils import AcceptanceTestCase\n\n\nclass ProjectOverviewTest(AcceptanceTestCase):\n    def setUp(self):\n        super(ProjectOverviewTest, self).setUp()\n        self.user = self.create_user('foo@example.com')\n        self.org = self.create_organization(\n            owner=self.user, name='Rowdy Tiger')\n        self.team = self.create_team(\n            organization=self.org, name='Mariachi Band')\n        self.project = self.create_project(\n            organization=self.org,\n            teams=[self.team],\n            name='Bengal',\n        )\n        self.login_as(self.user)\n        self.path = '/{}/{}/dashboard/'.format(\n            self.org.slug, self.project.slug)\n\n    def test_with_issues(self):\n        self.project.update(first_event=timezone.now())\n        self.create_group(\n            project=self.project,\n            message='Foo bar',\n        )\n        self.browser.get(self.path)\n        self.browser.wait_until('.chart-wrapper')\n        self.browser.wait_until_not('.loading')\n        self.browser.snapshot('project dashboard with issues')\n\n    def test_with_no_issues(self):\n        self.project.update(first_event=timezone.now())\n        self.browser.get(self.path)\n        self.browser.wait_until_not('.loading')\n        self.browser.wait_until('.group-list-empty')\n        self.browser.wait_until_not('.loading')\n        self.browser.snapshot('project dashboard without issues')\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.utils import timezone\n\nfrom sentry.testutils import AcceptanceTestCase\n\n\nclass ProjectOverviewTest(AcceptanceTestCase):\n    def setUp(self):\n        super(ProjectOverviewTest, self).setUp()\n        self.user = self.create_user('foo@example.com')\n        self.org = self.create_organization(\n            owner=self.user, name='Rowdy Tiger')\n        self.team = self.create_team(\n            organization=self.org, name='Mariachi Band')\n        self.project = self.create_project(\n            organization=self.org,\n            teams=[self.team],\n            name='Bengal',\n        )\n        self.login_as(self.user)\n        self.path = '/{}/{}/dashboard/'.format(\n            self.org.slug, self.project.slug)\n\n    def test_with_issues(self):\n        self.project.update(first_event=timezone.now())\n        self.create_group(\n            project=self.project,\n            message='Foo bar',\n        )\n        self.browser.get(self.path)\n        self.browser.wait_until('.chart-wrapper')\n        self.browser.wait_until_not('.loading')\n        self.browser.snapshot('project dashboard with issues')\n\n    def test_with_no_issues(self):\n        self.project.update(first_event=timezone.now())\n        self.browser.get(self.path)\n        self.browser.wait_until_not('.loading')\n        self.browser.wait_until('.group-list-empty')\n        self.browser.wait_until_not('.loading')\n        self.browser.snapshot('project dashboard without issues')\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_project_overview.py", "id": "2f96d4198f7d86acd68998ccb79016a8", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/acceptance/test_project_overview.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}