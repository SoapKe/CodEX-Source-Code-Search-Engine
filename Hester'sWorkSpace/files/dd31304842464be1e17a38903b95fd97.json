{"author": "tornadoweb", "code": "import logging\n\nfrom tornado import gen\nfrom tornado.ioloop import IOLoop\nfrom tornado.options import define, options, parse_command_line\nfrom tornado.websocket import websocket_connect\n\ndefine('url', default='ws://localhost:9001')\ndefine('name', default='Tornado')\n\n\n@gen.engine\ndef run_tests():\n    url = options.url + '/getCaseCount'\n    control_ws = yield websocket_connect(url, None)\n    num_tests = int((yield control_ws.read_message()))\n    logging.info('running %d cases', num_tests)\n    msg = yield control_ws.read_message()\n    assert msg is None\n\n    for i in range(1, num_tests + 1):\n        logging.info('running test case %d', i)\n        url = options.url + '/runCase?case=%d&agent=%s' % (i, options.name)\n        test_ws = yield websocket_connect(url, None, compression_options={})\n        while True:\n            message = yield test_ws.read_message()\n            if message is None:\n                break\n            test_ws.write_message(message, binary=isinstance(message, bytes))\n\n    url = options.url + '/updateReports?agent=%s' % options.name\n    update_ws = yield websocket_connect(url, None)\n    msg = yield update_ws.read_message()\n    assert msg is None\n    IOLoop.instance().stop()\n\n\ndef main():\n    parse_command_line()\n\n    IOLoop.instance().add_callback(run_tests)\n\n    IOLoop.instance().start()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "", "content": "import logging\n\nfrom tornado import gen\nfrom tornado.ioloop import IOLoop\nfrom tornado.options import define, options, parse_command_line\nfrom tornado.websocket import websocket_connect\n\ndefine('url', default='ws://localhost:9001')\ndefine('name', default='Tornado')\n\n\n@gen.engine\ndef run_tests():\n    url = options.url + '/getCaseCount'\n    control_ws = yield websocket_connect(url, None)\n    num_tests = int((yield control_ws.read_message()))\n    logging.info('running %d cases', num_tests)\n    msg = yield control_ws.read_message()\n    assert msg is None\n\n    for i in range(1, num_tests + 1):\n        logging.info('running test case %d', i)\n        url = options.url + '/runCase?case=%d&agent=%s' % (i, options.name)\n        test_ws = yield websocket_connect(url, None, compression_options={})\n        while True:\n            message = yield test_ws.read_message()\n            if message is None:\n                break\n            test_ws.write_message(message, binary=isinstance(message, bytes))\n\n    url = options.url + '/updateReports?agent=%s' % options.name\n    update_ws = yield websocket_connect(url, None)\n    msg = yield update_ws.read_message()\n    assert msg is None\n    IOLoop.instance().stop()\n\n\ndef main():\n    parse_command_line()\n\n    IOLoop.instance().add_callback(run_tests)\n\n    IOLoop.instance().start()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "client.py", "id": "dd31304842464be1e17a38903b95fd97", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tornadoweb-tornado/tornadoweb-tornado-9a97ffb/maint/test/websocket/client.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:52:45Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}