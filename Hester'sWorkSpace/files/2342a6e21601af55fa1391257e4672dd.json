{"author": "HelloZeroNet", "code": "\n# -*- coding: utf-8 -*-\n\n#  Copyright (C) 2011 Yann GUIBET <yannguibet@gmail.com>\n\n\nfrom pyelliptic.openssl import OpenSSL\n\n\n\ndef _equals_bytes(a, b):\n    if len(a) != len(b):\n        return False\n    result = 0\n    for x, y in zip(a, b):\n        result |= x ^ y\n    return result == 0\n\n\ndef _equals_str(a, b):\n    if len(a) != len(b):\n        return False\n    result = 0\n    for x, y in zip(a, b):\n        result |= ord(x) ^ ord(y)\n    return result == 0\n\n\ndef equals(a, b):\n    if isinstance(a, str):\n        return _equals_str(a, b)\n    else:\n        return _equals_bytes(a, b)\n\n\ndef hmac_sha256(k, m):\n    \"\"\"\n    Compute the key and the message with HMAC SHA5256\n    \"\"\"\n    key = OpenSSL.malloc(k, len(k))\n    d = OpenSSL.malloc(m, len(m))\n    md = OpenSSL.malloc(0, 32)\n    i = OpenSSL.pointer(OpenSSL.c_int(0))\n    OpenSSL.HMAC(OpenSSL.EVP_sha256(), key, len(k), d, len(m), md, i)\n    return md.raw\n\n\ndef hmac_sha512(k, m):\n    \"\"\"\n    Compute the key and the message with HMAC SHA512\n    \"\"\"\n    key = OpenSSL.malloc(k, len(k))\n    d = OpenSSL.malloc(m, len(m))\n    md = OpenSSL.malloc(0, 64)\n    i = OpenSSL.pointer(OpenSSL.c_int(0))\n    OpenSSL.HMAC(OpenSSL.EVP_sha512(), key, len(k), d, len(m), md, i)\n    return md.raw\n\n\ndef pbkdf2(password, salt=None, i=10000, keylen=64):\n    if salt is None:\n        salt = OpenSSL.rand(8)\n    p_password = OpenSSL.malloc(password, len(password))\n    p_salt = OpenSSL.malloc(salt, len(salt))\n    output = OpenSSL.malloc(0, keylen)\n    OpenSSL.PKCS5_PBKDF2_HMAC(p_password, len(password), p_salt,\n                              len(p_salt), i, OpenSSL.EVP_sha256(),\n                              keylen, output)\n    return salt, output.raw\n", "comments": "        compute key message hmac sha5256             key   openssl malloc(k  len(k))       openssl malloc(m  len(m))     md   openssl malloc(0  32)       openssl pointer(openssl c int(0))     openssl hmac(openssl evp sha256()  key  len(k)   len(m)  md  i)     return md raw   def hmac sha512(k  m)              compute key message hmac sha512             usr bin env python        coding  utf 8         copyright (c) 2011 yann guibet  yannguibet gmail com      see license details     for python3 ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n#  Copyright (C) 2011 Yann GUIBET <yannguibet@gmail.com>\n#  See LICENSE for details.\n\nfrom pyelliptic.openssl import OpenSSL\n\n\n# For python3\ndef _equals_bytes(a, b):\n    if len(a) != len(b):\n        return False\n    result = 0\n    for x, y in zip(a, b):\n        result |= x ^ y\n    return result == 0\n\n\ndef _equals_str(a, b):\n    if len(a) != len(b):\n        return False\n    result = 0\n    for x, y in zip(a, b):\n        result |= ord(x) ^ ord(y)\n    return result == 0\n\n\ndef equals(a, b):\n    if isinstance(a, str):\n        return _equals_str(a, b)\n    else:\n        return _equals_bytes(a, b)\n\n\ndef hmac_sha256(k, m):\n    \"\"\"\n    Compute the key and the message with HMAC SHA5256\n    \"\"\"\n    key = OpenSSL.malloc(k, len(k))\n    d = OpenSSL.malloc(m, len(m))\n    md = OpenSSL.malloc(0, 32)\n    i = OpenSSL.pointer(OpenSSL.c_int(0))\n    OpenSSL.HMAC(OpenSSL.EVP_sha256(), key, len(k), d, len(m), md, i)\n    return md.raw\n\n\ndef hmac_sha512(k, m):\n    \"\"\"\n    Compute the key and the message with HMAC SHA512\n    \"\"\"\n    key = OpenSSL.malloc(k, len(k))\n    d = OpenSSL.malloc(m, len(m))\n    md = OpenSSL.malloc(0, 64)\n    i = OpenSSL.pointer(OpenSSL.c_int(0))\n    OpenSSL.HMAC(OpenSSL.EVP_sha512(), key, len(k), d, len(m), md, i)\n    return md.raw\n\n\ndef pbkdf2(password, salt=None, i=10000, keylen=64):\n    if salt is None:\n        salt = OpenSSL.rand(8)\n    p_password = OpenSSL.malloc(password, len(password))\n    p_salt = OpenSSL.malloc(salt, len(salt))\n    output = OpenSSL.malloc(0, keylen)\n    OpenSSL.PKCS5_PBKDF2_HMAC(p_password, len(password), p_salt,\n                              len(p_salt), i, OpenSSL.EVP_sha256(),\n                              keylen, output)\n    return salt, output.raw\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "hash.py", "id": "2342a6e21601af55fa1391257e4672dd", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/lib/pyelliptic/hash.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}