{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\n\nimport tensorflow as tf\n\n pylint: disable=unused-import\nimport all_models\n pylint: enable=unused-import\nfrom entropy_coder.model import model_factory\n\n\nclass AllModelsTest(tf.test.TestCase):\n\n  def testBuildModelForTraining(self):\n    factory = model_factory.GetModelRegistry()\n    model_names = factory.GetAvailableModels()\n\n    for m in model_names:\n      tf.reset_default_graph()\n\n      global_step = tf.Variable(tf.zeros([], dtype=tf.int64),\n                                trainable=False,\n                                name='global_step')\n\n      optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1)\n\n      batch_size = 3\n      height = 40\n      width = 20\n      depth = 5\n      binary_codes = tf.placeholder(dtype=tf.float32,\n                                    shape=[batch_size, height, width, depth])\n\n       Create a model with the default configuration.\n      print('Creating model: {}'.format(m))\n      model = factory.CreateModel(m)\n      model.Initialize(global_step,\n                       optimizer,\n                       model.GetConfigStringForUnitTest())\n      self.assertTrue(model.loss is None, 'model: {}'.format(m))\n      self.assertTrue(model.train_op is None, 'model: {}'.format(m))\n      self.assertTrue(model.average_code_length is None, 'model: {}'.format(m))\n\n       Build the Tensorflow graph corresponding to the model.\n      model.BuildGraph(binary_codes)\n      self.assertTrue(model.loss is not None, 'model: {}'.format(m))\n      self.assertTrue(model.average_code_length is not None,\n                      'model: {}'.format(m))\n      if model.train_op is None:\n        print('Model {} is not trainable'.format(m))\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   basic test registered models        copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       pylint  disable unused import    pylint  enable unused import    create model default configuration     build tensorflow graph corresponding model  ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Basic test of all registered models.\"\"\"\n\nimport tensorflow as tf\n\n# pylint: disable=unused-import\nimport all_models\n# pylint: enable=unused-import\nfrom entropy_coder.model import model_factory\n\n\nclass AllModelsTest(tf.test.TestCase):\n\n  def testBuildModelForTraining(self):\n    factory = model_factory.GetModelRegistry()\n    model_names = factory.GetAvailableModels()\n\n    for m in model_names:\n      tf.reset_default_graph()\n\n      global_step = tf.Variable(tf.zeros([], dtype=tf.int64),\n                                trainable=False,\n                                name='global_step')\n\n      optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.1)\n\n      batch_size = 3\n      height = 40\n      width = 20\n      depth = 5\n      binary_codes = tf.placeholder(dtype=tf.float32,\n                                    shape=[batch_size, height, width, depth])\n\n      # Create a model with the default configuration.\n      print('Creating model: {}'.format(m))\n      model = factory.CreateModel(m)\n      model.Initialize(global_step,\n                       optimizer,\n                       model.GetConfigStringForUnitTest())\n      self.assertTrue(model.loss is None, 'model: {}'.format(m))\n      self.assertTrue(model.train_op is None, 'model: {}'.format(m))\n      self.assertTrue(model.average_code_length is None, 'model: {}'.format(m))\n\n      # Build the Tensorflow graph corresponding to the model.\n      model.BuildGraph(binary_codes)\n      self.assertTrue(model.loss is not None, 'model: {}'.format(m))\n      self.assertTrue(model.average_code_length is not None,\n                      'model: {}'.format(m))\n      if model.train_op is None:\n        print('Model {} is not trainable'.format(m))\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "all_models_test.py", "id": "a1d809cf7ebe684b53e5d5db6c665554", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/compression/entropy_coder/all_models/all_models_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}