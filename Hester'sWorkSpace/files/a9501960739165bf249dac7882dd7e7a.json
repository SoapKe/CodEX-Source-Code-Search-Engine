{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom cryptography.fernet import Fernet\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.encryption import EncryptionManager, MARKER\n\n\nclass EncryptionManagerTest(TestCase):\n    def test_simple(self):\n        manager = EncryptionManager(\n            schemes=(('1', Fernet('J5NxyG0w1OyZEDdEOX0Nyv2upm5H3J35rTEb1jEiVbs=')), )\n        )\n        value = manager.encrypt('hello world')\n        assert value.startswith(u'{}1$'.format(MARKER))\n        result = manager.decrypt(value)\n        assert result == 'hello world'\n\n        manager = EncryptionManager(\n            schemes=(\n                ('2', Fernet(Fernet.generate_key())),\n                ('1', Fernet('J5NxyG0w1OyZEDdEOX0Nyv2upm5H3J35rTEb1jEiVbs=')),\n            )\n        )\n\n        \n        result = manager.decrypt(value)\n        assert result == 'hello world'\n\n        value2 = manager.encrypt('hello world')\n        assert value2 != value\n        assert value2.startswith(u'{}2$'.format(MARKER))\n\n    def test_no_schemes(self):\n        manager = EncryptionManager(schemes=())\n        value = manager.encrypt('hello world')\n        assert value == 'hello world'\n        result = manager.decrypt(value)\n        assert result == 'hello world'\n", "comments": "  use first scheme ", "content": "from __future__ import absolute_import\n\nfrom cryptography.fernet import Fernet\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils.encryption import EncryptionManager, MARKER\n\n\nclass EncryptionManagerTest(TestCase):\n    def test_simple(self):\n        manager = EncryptionManager(\n            schemes=(('1', Fernet('J5NxyG0w1OyZEDdEOX0Nyv2upm5H3J35rTEb1jEiVbs=')), )\n        )\n        value = manager.encrypt('hello world')\n        assert value.startswith(u'{}1$'.format(MARKER))\n        result = manager.decrypt(value)\n        assert result == 'hello world'\n\n        manager = EncryptionManager(\n            schemes=(\n                ('2', Fernet(Fernet.generate_key())),\n                ('1', Fernet('J5NxyG0w1OyZEDdEOX0Nyv2upm5H3J35rTEb1jEiVbs=')),\n            )\n        )\n\n        # this should use the first scheme\n        result = manager.decrypt(value)\n        assert result == 'hello world'\n\n        value2 = manager.encrypt('hello world')\n        assert value2 != value\n        assert value2.startswith(u'{}2$'.format(MARKER))\n\n    def test_no_schemes(self):\n        manager = EncryptionManager(schemes=())\n        value = manager.encrypt('hello world')\n        assert value == 'hello world'\n        result = manager.decrypt(value)\n        assert result == 'hello world'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_encryption.py", "id": "a9501960739165bf249dac7882dd7e7a", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_encryption.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}