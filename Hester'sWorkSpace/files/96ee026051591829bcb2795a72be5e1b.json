{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.addons.payment_paypal.controllers.main import PaypalController\nfrom werkzeug import urls\n\nfrom odoo.tools import mute_logger\n\nfrom lxml import objectify\n\n\nclass PaypalCommon(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(PaypalCommon, self).setUp()\n\n        self.paypal = self.env.ref('payment.payment_acquirer_paypal')\n\n        \n        self.amex = (('378282246310005', '123'), ('371449635398431', '123'))\n        self.amex_corporate = (('378734493671000', '123'))\n        self.autralian_bankcard = (('5610591081018250', '123'))\n        self.dinersclub = (('30569309025904', '123'), ('38520000023237', '123'))\n        self.discover = (('6011111111111117', '123'), ('6011000990139424', '123'))\n        self.jcb = (('3530111333300000', '123'), ('3566002020360505', '123'))\n        self.mastercard = (('5555555555554444', '123'), ('5105105105105100', '123'))\n        self.visa = (('4111111111111111', '123'), ('4012888888881881', '123'), ('4222222222222', '123'))\n        self.dankord_pbs = (('76009244561', '123'), ('5019717010103742', '123'))\n        self.switch_polo = (('6331101999990016', '123'))\n\n\nclass PaypalForm(PaypalCommon):\n\n    def test_10_paypal_form_render(self):\n        base_url = self.env['ir.config_parameter'].get_param('web.base.url')\n        \n        self.paypal.write({'paypal_email_account': 'tde+paypal-facilitator@odoo.com', 'fees_active': False})\n        self.assertEqual(self.paypal.environment, 'test', 'test without test environment')\n\n        \n        \n        \n\n        \n        res = self.paypal.render(\n            'test_ref0', 0.01, self.currency_euro.id,\n            values=self.buyer_values)\n\n        form_values = {\n            'cmd': '_xclick',\n            'business': 'tde+paypal-facilitator@odoo.com',\n            'item_name': 'YourCompany: test_ref0',\n            'item_number': 'test_ref0',\n            'first_name': 'Norbert',\n            'last_name': 'Buyer',\n            'amount': '0.01',\n            'currency_code': 'EUR',\n            'address1': 'Huge Street 2/543',\n            'city': 'Sin City',\n            'zip': '1000',\n            'country': 'BE',\n            'email': 'norbert.buyer@example.com',\n            'return': urls.url_join(base_url, PaypalController._return_url),\n            'notify_url': urls.url_join(base_url, PaypalController._notify_url),\n            'cancel_return': urls.url_join(base_url, PaypalController._cancel_url),\n        }\n\n        \n        tree = objectify.fromstring(res)\n\n        data_set = tree.xpath(\"//input[@name='data_set']\")\n        self.assertEqual(len(data_set), 1, 'paypal: Found %d \"data_set\" input instead of 1' % len(data_set))\n        self.assertEqual(data_set[0].get('data-action-url'), 'https://www.sandbox.paypal.com/cgi-bin/webscr', 'paypal: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit', 'data_set']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'paypal: wrong value for input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n    def test_11_paypal_form_with_fees(self):\n        \n        self.assertEqual(self.paypal.environment, 'test', 'test without test environment')\n\n        \n        self.paypal.write({\n            'fees_active': True,\n            'fees_dom_fixed': 1.0,\n            'fees_dom_var': 0.35,\n            'fees_int_fixed': 1.5,\n            'fees_int_var': 0.50,\n        })\n\n        \n        res = self.paypal.render(\n            'test_ref0', 12.50, self.currency_euro.id,\n            values=self.buyer_values)\n\n        \n        handling_found = False\n        tree = objectify.fromstring(res)\n\n        data_set = tree.xpath(\"//input[@name='data_set']\")\n        self.assertEqual(len(data_set), 1, 'paypal: Found %d \"data_set\" input instead of 1' % len(data_set))\n        self.assertEqual(data_set[0].get('data-action-url'), 'https://www.sandbox.paypal.com/cgi-bin/webscr', 'paypal: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['handling']:\n                handling_found = True\n                self.assertEqual(form_input.get('value'), '1.57', 'paypal: wrong computed fees')\n        self.assertTrue(handling_found, 'paypal: fees_active did not add handling input in rendered form')\n\n    @mute_logger('odoo.addons.payment_paypal.models.payment', 'ValidationError')\n    def test_20_paypal_form_management(self):\n        \n        self.assertEqual(self.paypal.environment, 'test', 'test without test environment')\n\n        \n        paypal_post_data = {\n            'protection_eligibility': u'Ineligible',\n            'last_name': u'Poilu',\n            'txn_id': u'08D73520KX778924N',\n            'receiver_email': u'dummy',\n            'payment_status': u'Pending',\n            'payment_gross': u'',\n            'tax': u'0.00',\n            'residence_country': u'FR',\n            'address_state': u'Alsace',\n            'payer_status': u'verified',\n            'txn_type': u'web_accept',\n            'address_street': u'Av. de la Pelouse, 87648672 Mayet',\n            'handling_amount': u'0.00',\n            'payment_date': u'03:21:19 Nov 18, 2013 PST',\n            'first_name': u'Norbert',\n            'item_name': u'test_ref_2',\n            'address_country': u'France',\n            'charset': u'windows-1252',\n            'custom': u'',\n            'notify_version': u'3.7',\n            'address_name': u'Norbert Poilu',\n            'pending_reason': u'multi_currency',\n            'item_number': u'test_ref_2',\n            'receiver_id': u'dummy',\n            'transaction_subject': u'',\n            'business': u'dummy',\n            'test_ipn': u'1',\n            'payer_id': u'VTDKRZQSAHYPS',\n            'verify_sign': u'An5ns1Kso7MWUdW4ErQKJJJ4qi4-AVoiUf-3478q3vrSmqh08IouiYpM',\n            'address_zip': u'75002',\n            'address_country_code': u'FR',\n            'address_city': u'Paris',\n            'address_status': u'unconfirmed',\n            'mc_currency': u'EUR',\n            'shipping': u'0.00',\n            'payer_email': u'tde+buyer@odoo.com',\n            'payment_type': u'instant',\n            'mc_gross': u'1.95',\n            'ipn_track_id': u'866df2ccd444b',\n            'quantity': u'1'\n        }\n\n        \n        with self.assertRaises(ValidationError):\n            self.env['payment.transaction'].form_feedback(paypal_post_data, 'paypal')\n\n        \n        tx = self.env['payment.transaction'].create({\n            'amount': 1.95,\n            'acquirer_id': self.paypal.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'test_ref_2',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n\n        \n        tx.form_feedback(paypal_post_data, 'paypal')\n        \n        self.assertEqual(tx.state, 'pending', 'paypal: wrong state after receiving a valid pending notification')\n        self.assertEqual(tx.state_message, 'multi_currency', 'paypal: wrong state message after receiving a valid pending notification')\n        self.assertEqual(tx.acquirer_reference, '08D73520KX778924N', 'paypal: wrong txn_id after receiving a valid pending notification')\n        self.assertFalse(tx.date_validate, 'paypal: validation date should not be updated whenr receiving pending notification')\n\n        \n        tx.write({\n            'state': 'draft',\n            'acquirer_reference': False})\n\n        \n        paypal_post_data['payment_status'] = 'Completed'\n        \n        tx.form_feedback(paypal_post_data, 'paypal')\n        \n        self.assertEqual(tx.state, 'done', 'paypal: wrong state after receiving a valid pending notification')\n        self.assertEqual(tx.acquirer_reference, '08D73520KX778924N', 'paypal: wrong txn_id after receiving a valid pending notification')\n        self.assertEqual(tx.date_validate, '2013-11-18 11:21:19', 'paypal: wrong validation date')\n", "comments": "      coding  utf 8        cc    sure stupid things                                                test  button direct rendering                                                render button    check form result    sure stupid things    update acquirer  compute fees    render button    check form result    sure stupid things    typical data posted paypal client successfully paid    raise error unknown tx    create tx    validate    check    update tx    update notification paypal    validate    check ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.addons.payment_paypal.controllers.main import PaypalController\nfrom werkzeug import urls\n\nfrom odoo.tools import mute_logger\n\nfrom lxml import objectify\n\n\nclass PaypalCommon(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(PaypalCommon, self).setUp()\n\n        self.paypal = self.env.ref('payment.payment_acquirer_paypal')\n\n        # some CC\n        self.amex = (('378282246310005', '123'), ('371449635398431', '123'))\n        self.amex_corporate = (('378734493671000', '123'))\n        self.autralian_bankcard = (('5610591081018250', '123'))\n        self.dinersclub = (('30569309025904', '123'), ('38520000023237', '123'))\n        self.discover = (('6011111111111117', '123'), ('6011000990139424', '123'))\n        self.jcb = (('3530111333300000', '123'), ('3566002020360505', '123'))\n        self.mastercard = (('5555555555554444', '123'), ('5105105105105100', '123'))\n        self.visa = (('4111111111111111', '123'), ('4012888888881881', '123'), ('4222222222222', '123'))\n        self.dankord_pbs = (('76009244561', '123'), ('5019717010103742', '123'))\n        self.switch_polo = (('6331101999990016', '123'))\n\n\nclass PaypalForm(PaypalCommon):\n\n    def test_10_paypal_form_render(self):\n        base_url = self.env['ir.config_parameter'].get_param('web.base.url')\n        # be sure not to do stupid things\n        self.paypal.write({'paypal_email_account': 'tde+paypal-facilitator@odoo.com', 'fees_active': False})\n        self.assertEqual(self.paypal.environment, 'test', 'test without test environment')\n\n        # ----------------------------------------\n        # Test: button direct rendering\n        # ----------------------------------------\n\n        # render the button\n        res = self.paypal.render(\n            'test_ref0', 0.01, self.currency_euro.id,\n            values=self.buyer_values)\n\n        form_values = {\n            'cmd': '_xclick',\n            'business': 'tde+paypal-facilitator@odoo.com',\n            'item_name': 'YourCompany: test_ref0',\n            'item_number': 'test_ref0',\n            'first_name': 'Norbert',\n            'last_name': 'Buyer',\n            'amount': '0.01',\n            'currency_code': 'EUR',\n            'address1': 'Huge Street 2/543',\n            'city': 'Sin City',\n            'zip': '1000',\n            'country': 'BE',\n            'email': 'norbert.buyer@example.com',\n            'return': urls.url_join(base_url, PaypalController._return_url),\n            'notify_url': urls.url_join(base_url, PaypalController._notify_url),\n            'cancel_return': urls.url_join(base_url, PaypalController._cancel_url),\n        }\n\n        # check form result\n        tree = objectify.fromstring(res)\n\n        data_set = tree.xpath(\"//input[@name='data_set']\")\n        self.assertEqual(len(data_set), 1, 'paypal: Found %d \"data_set\" input instead of 1' % len(data_set))\n        self.assertEqual(data_set[0].get('data-action-url'), 'https://www.sandbox.paypal.com/cgi-bin/webscr', 'paypal: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit', 'data_set']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'paypal: wrong value for input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n    def test_11_paypal_form_with_fees(self):\n        # be sure not to do stupid things\n        self.assertEqual(self.paypal.environment, 'test', 'test without test environment')\n\n        # update acquirer: compute fees\n        self.paypal.write({\n            'fees_active': True,\n            'fees_dom_fixed': 1.0,\n            'fees_dom_var': 0.35,\n            'fees_int_fixed': 1.5,\n            'fees_int_var': 0.50,\n        })\n\n        # render the button\n        res = self.paypal.render(\n            'test_ref0', 12.50, self.currency_euro.id,\n            values=self.buyer_values)\n\n        # check form result\n        handling_found = False\n        tree = objectify.fromstring(res)\n\n        data_set = tree.xpath(\"//input[@name='data_set']\")\n        self.assertEqual(len(data_set), 1, 'paypal: Found %d \"data_set\" input instead of 1' % len(data_set))\n        self.assertEqual(data_set[0].get('data-action-url'), 'https://www.sandbox.paypal.com/cgi-bin/webscr', 'paypal: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['handling']:\n                handling_found = True\n                self.assertEqual(form_input.get('value'), '1.57', 'paypal: wrong computed fees')\n        self.assertTrue(handling_found, 'paypal: fees_active did not add handling input in rendered form')\n\n    @mute_logger('odoo.addons.payment_paypal.models.payment', 'ValidationError')\n    def test_20_paypal_form_management(self):\n        # be sure not to do stupid things\n        self.assertEqual(self.paypal.environment, 'test', 'test without test environment')\n\n        # typical data posted by paypal after client has successfully paid\n        paypal_post_data = {\n            'protection_eligibility': u'Ineligible',\n            'last_name': u'Poilu',\n            'txn_id': u'08D73520KX778924N',\n            'receiver_email': u'dummy',\n            'payment_status': u'Pending',\n            'payment_gross': u'',\n            'tax': u'0.00',\n            'residence_country': u'FR',\n            'address_state': u'Alsace',\n            'payer_status': u'verified',\n            'txn_type': u'web_accept',\n            'address_street': u'Av. de la Pelouse, 87648672 Mayet',\n            'handling_amount': u'0.00',\n            'payment_date': u'03:21:19 Nov 18, 2013 PST',\n            'first_name': u'Norbert',\n            'item_name': u'test_ref_2',\n            'address_country': u'France',\n            'charset': u'windows-1252',\n            'custom': u'',\n            'notify_version': u'3.7',\n            'address_name': u'Norbert Poilu',\n            'pending_reason': u'multi_currency',\n            'item_number': u'test_ref_2',\n            'receiver_id': u'dummy',\n            'transaction_subject': u'',\n            'business': u'dummy',\n            'test_ipn': u'1',\n            'payer_id': u'VTDKRZQSAHYPS',\n            'verify_sign': u'An5ns1Kso7MWUdW4ErQKJJJ4qi4-AVoiUf-3478q3vrSmqh08IouiYpM',\n            'address_zip': u'75002',\n            'address_country_code': u'FR',\n            'address_city': u'Paris',\n            'address_status': u'unconfirmed',\n            'mc_currency': u'EUR',\n            'shipping': u'0.00',\n            'payer_email': u'tde+buyer@odoo.com',\n            'payment_type': u'instant',\n            'mc_gross': u'1.95',\n            'ipn_track_id': u'866df2ccd444b',\n            'quantity': u'1'\n        }\n\n        # should raise error about unknown tx\n        with self.assertRaises(ValidationError):\n            self.env['payment.transaction'].form_feedback(paypal_post_data, 'paypal')\n\n        # create tx\n        tx = self.env['payment.transaction'].create({\n            'amount': 1.95,\n            'acquirer_id': self.paypal.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'test_ref_2',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n\n        # validate it\n        tx.form_feedback(paypal_post_data, 'paypal')\n        # check\n        self.assertEqual(tx.state, 'pending', 'paypal: wrong state after receiving a valid pending notification')\n        self.assertEqual(tx.state_message, 'multi_currency', 'paypal: wrong state message after receiving a valid pending notification')\n        self.assertEqual(tx.acquirer_reference, '08D73520KX778924N', 'paypal: wrong txn_id after receiving a valid pending notification')\n        self.assertFalse(tx.date_validate, 'paypal: validation date should not be updated whenr receiving pending notification')\n\n        # update tx\n        tx.write({\n            'state': 'draft',\n            'acquirer_reference': False})\n\n        # update notification from paypal\n        paypal_post_data['payment_status'] = 'Completed'\n        # validate it\n        tx.form_feedback(paypal_post_data, 'paypal')\n        # check\n        self.assertEqual(tx.state, 'done', 'paypal: wrong state after receiving a valid pending notification')\n        self.assertEqual(tx.acquirer_reference, '08D73520KX778924N', 'paypal: wrong txn_id after receiving a valid pending notification')\n        self.assertEqual(tx.date_validate, '2013-11-18 11:21:19', 'paypal: wrong validation date')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_paypal.py", "id": "96ee026051591829bcb2795a72be5e1b", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_paypal/tests/test_paypal.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}