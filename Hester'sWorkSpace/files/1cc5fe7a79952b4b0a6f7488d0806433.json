{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    \n    \n    int_or_none,\n    qualities,\n    unified_strdate,\n)\n\n\nclass CanalplusIE(InfoExtractor):\n    IE_DESC = 'mycanal.fr and piwiplus.fr'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>mycanal|piwiplus)\\.fr/(?:[^/]+/)*(?P<display_id>[^?/]+)(?:\\.html\\?.*\\bvid=|/p/)(?P<id>\\d+)'\n    _VIDEO_INFO_TEMPLATE = 'http://service.canal-plus.com/video/rest/getVideosLiees/%s/%s?format=json'\n    _SITE_ID_MAP = {\n        'mycanal': 'cplus',\n        'piwiplus': 'teletoon',\n    }\n\n    \n    _GEO_COUNTRIES = ['FR']\n\n    _TESTS = [{\n        'url': 'https://www.mycanal.fr/d17-emissions/lolywood/p/1397061',\n        'info_dict': {\n            'id': '1397061',\n            'display_id': 'lolywood',\n            'ext': 'mp4',\n            'title': 'Euro 2016 : Je pr\u00e9f\u00e8re te pr\u00e9venir - Lolywood - Episode 34',\n            'description': 'md5:7d97039d455cb29cdba0d652a0efaa5e',\n            'upload_date': '20160602',\n        },\n    }, {\n        \n        'url': 'http://www.piwiplus.fr/videos-piwi/pid1405-le-labyrinthe-boing-super-ranger.html?vid=1108190',\n        'info_dict': {\n            'id': '1108190',\n            'display_id': 'pid1405-le-labyrinthe-boing-super-ranger',\n            'ext': 'mp4',\n            'title': 'BOING SUPER RANGER - Ep : Le labyrinthe',\n            'description': 'md5:4cea7a37153be42c1ba2c1d3064376ff',\n            'upload_date': '20140724',\n        },\n        'expected_warnings': ['HTTP Error 403: Forbidden'],\n    }]\n\n    def _real_extract(self, url):\n        site, display_id, video_id = re.match(self._VALID_URL, url).groups()\n\n        site_id = self._SITE_ID_MAP[site]\n\n        info_url = self._VIDEO_INFO_TEMPLATE % (site_id, video_id)\n        video_data = self._download_json(info_url, video_id, 'Downloading video JSON')\n\n        if isinstance(video_data, list):\n            video_data = [video for video in video_data if video.get('ID') == video_id][0]\n        media = video_data['MEDIA']\n        infos = video_data['INFOS']\n\n        preference = qualities(['MOBILE', 'BAS_DEBIT', 'HAUT_DEBIT', 'HD'])\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        formats = []\n        for format_id, format_url in media['VIDEOS'].items():\n            if not format_url:\n                continue\n            if format_id == 'HLS':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', 'm3u8_native', m3u8_id=format_id, fatal=False))\n            elif format_id == 'HDS':\n                formats.extend(self._extract_f4m_formats(\n                    format_url + '?hdcore=2.11.3', video_id, f4m_id=format_id, fatal=False))\n            else:\n                formats.append({\n                    \n                    'url': format_url + '?secret=pqzerjlsmdkjfoiuerhsdlfknaes',\n                    'format_id': format_id,\n                    'preference': preference(format_id),\n                })\n        self._sort_formats(formats)\n\n        thumbnails = [{\n            'id': image_id,\n            'url': image_url,\n        } for image_id, image_url in media.get('images', {}).items()]\n\n        titrage = infos['TITRAGE']\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': '%s - %s' % (titrage['TITRE'],\n                                  titrage['SOUS_TITRE']),\n            'upload_date': unified_strdate(infos.get('PUBLICATION', {}).get('DATE')),\n            'thumbnails': thumbnails,\n            'description': infos.get('DESCRIPTION'),\n            'duration': int_or_none(infos.get('DURATION')),\n            'view_count': int_or_none(infos.get('NB_VUES')),\n            'like_count': int_or_none(infos.get('NB_LIKES')),\n            'comment_count': int_or_none(infos.get('NB_COMMENTS')),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# ExtractorError,\n# HEADRequest,\n# Only works for direct mp4 URLs\n# geo restricted, bypassed\n# _, fmt_url = next(iter(media['VIDEOS'].items()))\n# if '/geo' in fmt_url.lower():\n#     response = self._request_webpage(\n#         HEADRequest(fmt_url), video_id,\n#         'Checking if the video is georestricted')\n#     if '/blocage' in response.geturl():\n#         raise ExtractorError(\n#             'The video is not available in your country',\n#             expected=True)\n# the secret extracted from ya function in http://player.canalplus.fr/common/js/canalPlayer.js\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    # ExtractorError,\n    # HEADRequest,\n    int_or_none,\n    qualities,\n    unified_strdate,\n)\n\n\nclass CanalplusIE(InfoExtractor):\n    IE_DESC = 'mycanal.fr and piwiplus.fr'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site>mycanal|piwiplus)\\.fr/(?:[^/]+/)*(?P<display_id>[^?/]+)(?:\\.html\\?.*\\bvid=|/p/)(?P<id>\\d+)'\n    _VIDEO_INFO_TEMPLATE = 'http://service.canal-plus.com/video/rest/getVideosLiees/%s/%s?format=json'\n    _SITE_ID_MAP = {\n        'mycanal': 'cplus',\n        'piwiplus': 'teletoon',\n    }\n\n    # Only works for direct mp4 URLs\n    _GEO_COUNTRIES = ['FR']\n\n    _TESTS = [{\n        'url': 'https://www.mycanal.fr/d17-emissions/lolywood/p/1397061',\n        'info_dict': {\n            'id': '1397061',\n            'display_id': 'lolywood',\n            'ext': 'mp4',\n            'title': 'Euro 2016 : Je pr\u00e9f\u00e8re te pr\u00e9venir - Lolywood - Episode 34',\n            'description': 'md5:7d97039d455cb29cdba0d652a0efaa5e',\n            'upload_date': '20160602',\n        },\n    }, {\n        # geo restricted, bypassed\n        'url': 'http://www.piwiplus.fr/videos-piwi/pid1405-le-labyrinthe-boing-super-ranger.html?vid=1108190',\n        'info_dict': {\n            'id': '1108190',\n            'display_id': 'pid1405-le-labyrinthe-boing-super-ranger',\n            'ext': 'mp4',\n            'title': 'BOING SUPER RANGER - Ep : Le labyrinthe',\n            'description': 'md5:4cea7a37153be42c1ba2c1d3064376ff',\n            'upload_date': '20140724',\n        },\n        'expected_warnings': ['HTTP Error 403: Forbidden'],\n    }]\n\n    def _real_extract(self, url):\n        site, display_id, video_id = re.match(self._VALID_URL, url).groups()\n\n        site_id = self._SITE_ID_MAP[site]\n\n        info_url = self._VIDEO_INFO_TEMPLATE % (site_id, video_id)\n        video_data = self._download_json(info_url, video_id, 'Downloading video JSON')\n\n        if isinstance(video_data, list):\n            video_data = [video for video in video_data if video.get('ID') == video_id][0]\n        media = video_data['MEDIA']\n        infos = video_data['INFOS']\n\n        preference = qualities(['MOBILE', 'BAS_DEBIT', 'HAUT_DEBIT', 'HD'])\n\n        # _, fmt_url = next(iter(media['VIDEOS'].items()))\n        # if '/geo' in fmt_url.lower():\n        #     response = self._request_webpage(\n        #         HEADRequest(fmt_url), video_id,\n        #         'Checking if the video is georestricted')\n        #     if '/blocage' in response.geturl():\n        #         raise ExtractorError(\n        #             'The video is not available in your country',\n        #             expected=True)\n\n        formats = []\n        for format_id, format_url in media['VIDEOS'].items():\n            if not format_url:\n                continue\n            if format_id == 'HLS':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', 'm3u8_native', m3u8_id=format_id, fatal=False))\n            elif format_id == 'HDS':\n                formats.extend(self._extract_f4m_formats(\n                    format_url + '?hdcore=2.11.3', video_id, f4m_id=format_id, fatal=False))\n            else:\n                formats.append({\n                    # the secret extracted from ya function in http://player.canalplus.fr/common/js/canalPlayer.js\n                    'url': format_url + '?secret=pqzerjlsmdkjfoiuerhsdlfknaes',\n                    'format_id': format_id,\n                    'preference': preference(format_id),\n                })\n        self._sort_formats(formats)\n\n        thumbnails = [{\n            'id': image_id,\n            'url': image_url,\n        } for image_id, image_url in media.get('images', {}).items()]\n\n        titrage = infos['TITRAGE']\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': '%s - %s' % (titrage['TITRE'],\n                                  titrage['SOUS_TITRE']),\n            'upload_date': unified_strdate(infos.get('PUBLICATION', {}).get('DATE')),\n            'thumbnails': thumbnails,\n            'description': infos.get('DESCRIPTION'),\n            'duration': int_or_none(infos.get('DURATION')),\n            'view_count': int_or_none(infos.get('NB_VUES')),\n            'like_count': int_or_none(infos.get('NB_LIKES')),\n            'comment_count': int_or_none(infos.get('NB_COMMENTS')),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "canalplus.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/canalplus.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}