{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\n\nfrom sentry.models import Organization, OrganizationStatus\nfrom sentry.testutils import TestCase, PermissionTestCase\n\n\nclass RestoreOrganizationPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(RestoreOrganizationPermissionTest, self).setUp()\n        self.organization = self.create_organization(\n            name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)\n        self.path = reverse('sentry-restore-organization', args=[self.organization.slug])\n\n    def test_teamless_admin_cannot_load(self):\n        self.assert_teamless_admin_cannot_access(self.path)\n\n    def test_team_admin_cannot_load(self):\n        self.assert_team_admin_cannot_access(self.path)\n\n    def test_owner_can_load(self):\n        self.assert_owner_can_access(self.path)\n\n\nclass RemoveOrganizationTest(TestCase):\n    def setUp(self):\n        super(RemoveOrganizationTest, self).setUp()\n\n        self.organization = self.create_organization(\n            name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)\n        self.team = self.create_team(organization=self.organization)\n        self.path = reverse('sentry-restore-organization', args=[self.organization.slug])\n\n        self.login_as(self.user)\n\n    def test_renders_with_context(self):\n        resp = self.client.get(self.path)\n\n        assert resp.status_code == 200\n\n        self.assertTemplateUsed(resp, 'sentry/restore-organization.html')\n\n        assert resp.context['deleting_organization'] == self.organization\n        assert resp.context['pending_deletion'] is True\n\n        Organization.objects.filter(\n            id=self.organization.id,\n        ).update(status=OrganizationStatus.DELETION_IN_PROGRESS)\n\n        resp = self.client.get(self.path)\n\n        assert resp.status_code == 200\n\n        self.assertTemplateUsed(resp, 'sentry/restore-organization.html')\n\n        assert resp.context['deleting_organization'] == self.organization\n        assert resp.context['pending_deletion'] is False\n\n    def test_success(self):\n        resp = self.client.post(self.path)\n\n        assert resp.status_code == 302\n\n        org = Organization.objects.get(id=self.organization.id)\n\n        assert org.status == OrganizationStatus.VISIBLE\n\n    def test_too_late_still_restores(self):\n        Organization.objects.filter(\n            id=self.organization.id,\n        ).update(status=OrganizationStatus.DELETION_IN_PROGRESS)\n\n        resp = self.client.post(self.path)\n\n        assert resp.status_code == 302\n\n        org = Organization.objects.get(id=self.organization.id)\n\n        assert org.status == OrganizationStatus.VISIBLE\n", "comments": "", "content": "from __future__ import absolute_import\n\nfrom django.core.urlresolvers import reverse\n\nfrom sentry.models import Organization, OrganizationStatus\nfrom sentry.testutils import TestCase, PermissionTestCase\n\n\nclass RestoreOrganizationPermissionTest(PermissionTestCase):\n    def setUp(self):\n        super(RestoreOrganizationPermissionTest, self).setUp()\n        self.organization = self.create_organization(\n            name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)\n        self.path = reverse('sentry-restore-organization', args=[self.organization.slug])\n\n    def test_teamless_admin_cannot_load(self):\n        self.assert_teamless_admin_cannot_access(self.path)\n\n    def test_team_admin_cannot_load(self):\n        self.assert_team_admin_cannot_access(self.path)\n\n    def test_owner_can_load(self):\n        self.assert_owner_can_access(self.path)\n\n\nclass RemoveOrganizationTest(TestCase):\n    def setUp(self):\n        super(RemoveOrganizationTest, self).setUp()\n\n        self.organization = self.create_organization(\n            name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)\n        self.team = self.create_team(organization=self.organization)\n        self.path = reverse('sentry-restore-organization', args=[self.organization.slug])\n\n        self.login_as(self.user)\n\n    def test_renders_with_context(self):\n        resp = self.client.get(self.path)\n\n        assert resp.status_code == 200\n\n        self.assertTemplateUsed(resp, 'sentry/restore-organization.html')\n\n        assert resp.context['deleting_organization'] == self.organization\n        assert resp.context['pending_deletion'] is True\n\n        Organization.objects.filter(\n            id=self.organization.id,\n        ).update(status=OrganizationStatus.DELETION_IN_PROGRESS)\n\n        resp = self.client.get(self.path)\n\n        assert resp.status_code == 200\n\n        self.assertTemplateUsed(resp, 'sentry/restore-organization.html')\n\n        assert resp.context['deleting_organization'] == self.organization\n        assert resp.context['pending_deletion'] is False\n\n    def test_success(self):\n        resp = self.client.post(self.path)\n\n        assert resp.status_code == 302\n\n        org = Organization.objects.get(id=self.organization.id)\n\n        assert org.status == OrganizationStatus.VISIBLE\n\n    def test_too_late_still_restores(self):\n        Organization.objects.filter(\n            id=self.organization.id,\n        ).update(status=OrganizationStatus.DELETION_IN_PROGRESS)\n\n        resp = self.client.post(self.path)\n\n        assert resp.status_code == 302\n\n        org = Organization.objects.get(id=self.organization.id)\n\n        assert org.status == OrganizationStatus.VISIBLE\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_restore_organization.py", "id": "09ee45346764fa825b1577715ceb03c4", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/web/frontend/test_restore_organization.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}