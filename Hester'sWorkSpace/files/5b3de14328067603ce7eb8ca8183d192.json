{"author": "ansible", "code": " -*- coding: utf-8 -*-\n (c) 2016, Tom Melendez <tom@supertom.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\nimport os\nimport sys\n\nfrom ansible.compat.tests import mock, unittest\nfrom ansible.module_utils.gcp import check_min_pkg_version, GCPUtils, GCPInvalidURLError\n\n\ndef build_distribution(version):\n    obj = mock.MagicMock()\n    obj.version = '0.5.0'\n    return obj\n\n\nclass GCPUtilsTestCase(unittest.TestCase):\n    params_dict = {\n        'url_map_name': 'foo_url_map_name',\n        'description': 'foo_url_map description',\n        'host_rules': [\n            {\n                'description': 'host rules description',\n                'hosts': [\n                        'www.example.com',\n                        'www2.example.com'\n                ],\n                'path_matcher': 'host_rules_path_matcher'\n            }\n        ],\n        'path_matchers': [\n            {\n                'name': 'path_matcher_one',\n                'description': 'path matcher one',\n                'defaultService': 'bes-pathmatcher-one-default',\n                'pathRules': [\n                        {\n                            'service': 'my-one-bes',\n                            'paths': [\n                                '/',\n                                '/aboutus'\n                            ]\n                        }\n                ]\n            },\n            {\n                'name': 'path_matcher_two',\n                'description': 'path matcher two',\n                'defaultService': 'bes-pathmatcher-two-default',\n                'pathRules': [\n                        {\n                            'service': 'my-two-bes',\n                            'paths': [\n                                '/webapp',\n                                '/graphs'\n                            ]\n                        }\n                ]\n            }\n        ]\n    }\n\n    @mock.patch(\"pkg_resources.get_distribution\", side_effect=build_distribution)\n    def test_check_minimum_pkg_version(self, mockobj):\n        self.assertTrue(check_min_pkg_version('foobar', '0.4.0'))\n        self.assertTrue(check_min_pkg_version('foobar', '0.5.0'))\n        self.assertFalse(check_min_pkg_version('foobar', '0.6.0'))\n\n    def test_parse_gcp_url(self):\n         region, resource, entity, method\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/regions/us-east1/instanceGroupManagers/my-mig/recreateInstances'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertEquals('us-east1', actual['region'])\n        self.assertEquals('instanceGroupManagers', actual['resource_name'])\n        self.assertEquals('my-mig', actual['entity_name'])\n        self.assertEquals('recreateInstances', actual['method_name'])\n\n         zone, resource, entity, method\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/zones/us-east1-c/instanceGroupManagers/my-mig/recreateInstances'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertEquals('us-east1-c', actual['zone'])\n        self.assertEquals('instanceGroupManagers', actual['resource_name'])\n        self.assertEquals('my-mig', actual['entity_name'])\n        self.assertEquals('recreateInstances', actual['method_name'])\n\n         global, resource\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/global/urlMaps'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertTrue('global' in actual)\n        self.assertTrue(actual['global'])\n        self.assertEquals('urlMaps', actual['resource_name'])\n\n         global, resource, entity\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/global/urlMaps/my-url-map'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('myproject', actual['project'])\n        self.assertTrue('global' in actual)\n        self.assertTrue(actual['global'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('compute', actual['service'])\n\n         global URL, resource, entity, method_name\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/mybackendservice/getHealth'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertTrue('global' in actual)\n        self.assertTrue(actual['global'])\n        self.assertEquals('backendServices', actual['resource_name'])\n        self.assertEquals('mybackendservice', actual['entity_name'])\n        self.assertEquals('getHealth', actual['method_name'])\n\n         no location in URL\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/targetHttpProxies/mytargetproxy/setUrlMap'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertFalse('global' in actual)\n        self.assertEquals('targetHttpProxies', actual['resource_name'])\n        self.assertEquals('mytargetproxy', actual['entity_name'])\n        self.assertEquals('setUrlMap', actual['method_name'])\n\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/targetHttpProxies/mytargetproxy'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertFalse('global' in actual)\n        self.assertEquals('targetHttpProxies', actual['resource_name'])\n        self.assertEquals('mytargetproxy', actual['entity_name'])\n\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/targetHttpProxies'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertFalse('global' in actual)\n        self.assertEquals('targetHttpProxies', actual['resource_name'])\n\n         test exceptions\n        no_projects_input_url = 'https://www.googleapis.com/compute/v1/not-projects/myproject/global/backendServices/mybackendservice/getHealth'\n        no_resource_input_url = 'https://www.googleapis.com/compute/v1/not-projects/myproject/global'\n\n        no_resource_no_loc_input_url = 'https://www.googleapis.com/compute/v1/not-projects/myproject'\n\n        with self.assertRaises(GCPInvalidURLError) as cm:\n            GCPUtils.parse_gcp_url(no_projects_input_url)\n        self.assertTrue(cm.exception, GCPInvalidURLError)\n\n        with self.assertRaises(GCPInvalidURLError) as cm:\n            GCPUtils.parse_gcp_url(no_resource_input_url)\n        self.assertTrue(cm.exception, GCPInvalidURLError)\n\n        with self.assertRaises(GCPInvalidURLError) as cm:\n            GCPUtils.parse_gcp_url(no_resource_no_loc_input_url)\n        self.assertTrue(cm.exception, GCPInvalidURLError)\n\n    def test_params_to_gcp_dict(self):\n\n        expected = {\n            'description': 'foo_url_map description',\n            'hostRules': [\n                {\n                    'description': 'host rules description',\n                    'hosts': [\n                        'www.example.com',\n                        'www2.example.com'\n                    ],\n                    'pathMatcher': 'host_rules_path_matcher'\n                }\n            ],\n            'name': 'foo_url_map_name',\n            'pathMatchers': [\n                {\n                    'defaultService': 'bes-pathmatcher-one-default',\n                    'description': 'path matcher one',\n                    'name': 'path_matcher_one',\n                    'pathRules': [\n                        {\n                            'paths': [\n                                '/',\n                                '/aboutus'\n                            ],\n                            'service': 'my-one-bes'\n                        }\n                    ]\n                },\n                {\n                    'defaultService': 'bes-pathmatcher-two-default',\n                    'description': 'path matcher two',\n                    'name': 'path_matcher_two',\n                    'pathRules': [\n                        {\n                            'paths': [\n                                '/webapp',\n                                '/graphs'\n                            ],\n                            'service': 'my-two-bes'\n                        }\n                    ]\n                }\n            ]\n        }\n\n        actual = GCPUtils.params_to_gcp_dict(self.params_dict, 'url_map_name')\n        self.assertEqual(expected, actual)\n\n    def test_get_gcp_resource_from_methodId(self):\n        input_data = 'compute.urlMaps.list'\n        actual = GCPUtils.get_gcp_resource_from_methodId(input_data)\n        self.assertEqual('urlMaps', actual)\n        input_data = None\n        actual = GCPUtils.get_gcp_resource_from_methodId(input_data)\n        self.assertFalse(actual)\n        input_data = 666\n        actual = GCPUtils.get_gcp_resource_from_methodId(input_data)\n        self.assertFalse(actual)\n\n    def test_get_entity_name_from_resource_name(self):\n        input_data = 'urlMaps'\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual('urlMap', actual)\n        input_data = 'targetHttpProxies'\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual('targetHttpProxy', actual)\n        input_data = 'globalForwardingRules'\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual('forwardingRule', actual)\n        input_data = ''\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual(None, actual)\n        input_data = 666\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual(None, actual)\n\n    def test_are_params_equal(self):\n        params1 = {'one': 1}\n        params2 = {'one': 1}\n        actual = GCPUtils.are_params_equal(params1, params2)\n        self.assertTrue(actual)\n\n        params1 = {'one': 1}\n        params2 = {'two': 2}\n        actual = GCPUtils.are_params_equal(params1, params2)\n        self.assertFalse(actual)\n\n        params1 = {'three': 3, 'two': 2, 'one': 1}\n        params2 = {'one': 1, 'two': 2, 'three': 3}\n        actual = GCPUtils.are_params_equal(params1, params2)\n        self.assertTrue(actual)\n\n        params1 = {\n            \"creationTimestamp\": \"2017-04-21T11:19:20.718-07:00\",\n            \"defaultService\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/default-backend-service\",\n            \"description\": \"\",\n            \"fingerprint\": \"ickr_pwlZPU=\",\n            \"hostRules\": [\n                {\n                    \"description\": \"\",\n                    \"hosts\": [\n                        \"*.\"\n                    ],\n                    \"pathMatcher\": \"path-matcher-one\"\n                }\n            ],\n            \"id\": \"8566395781175047111\",\n            \"kind\": \"computeurlMap\",\n            \"name\": \"newtesturlmap-foo\",\n            \"pathMatchers\": [\n                {\n                    \"defaultService\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/bes-pathmatcher-one-default\",\n                    \"description\": \"path matcher one\",\n                    \"name\": \"path-matcher-one\",\n                    \"pathRules\": [\n                        {\n                            \"paths\": [\n                                \"/data\",\n                                \"/aboutus\"\n                            ],\n                            \"service\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/my-one-bes\"\n                        }\n                    ]\n                }\n            ],\n            \"selfLink\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/urlMaps/newtesturlmap-foo\"\n        }\n        params2 = {\n            \"defaultService\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/default-backend-service\",\n            \"hostRules\": [\n                {\n                    \"description\": \"\",\n                    \"hosts\": [\n                        \"*.\"\n                    ],\n                    \"pathMatcher\": \"path-matcher-one\"\n                }\n            ],\n            \"name\": \"newtesturlmap-foo\",\n            \"pathMatchers\": [\n                {\n                    \"defaultService\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/bes-pathmatcher-one-default\",\n                    \"description\": \"path matcher one\",\n                    \"name\": \"path-matcher-one\",\n                    \"pathRules\": [\n                        {\n                            \"paths\": [\n                                \"/data\",\n                                \"/aboutus\"\n                            ],\n                            \"service\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/my-one-bes\"\n                        }\n                    ]\n                }\n            ],\n        }\n\n         params1 has exclude fields, params2 doesn't. Should be equal\n        actual = GCPUtils.are_params_equal(params1, params2)\n        self.assertTrue(actual)\n\n    def test_filter_gcp_fields(self):\n        input_data = {\n            u'kind': u'computehttpsHealthCheck',\n            u'description': u'',\n            u'timeoutSec': 5,\n            u'checkIntervalSec': 5,\n            u'port': 443,\n            u'healthyThreshold': 2,\n            u'host': u'',\n            u'requestPath': u'/',\n            u'unhealthyThreshold': 2,\n            u'creationTimestamp': u'2017-05-16T15:09:36.546-07:00',\n            u'id': u'8727093129334146639',\n            u'selfLink': u'https://www.googleapis.com/compute/v1/projects/myproject/global/httpsHealthChecks/myhealthcheck',\n            u'name': u'myhealthcheck'}\n\n        expected = {\n            'name': 'myhealthcheck',\n            'checkIntervalSec': 5,\n            'port': 443,\n            'unhealthyThreshold': 2,\n            'healthyThreshold': 2,\n            'host': '',\n            'timeoutSec': 5,\n            'requestPath': '/'}\n\n        actual = GCPUtils.filter_gcp_fields(input_data)\n        self.assertEquals(expected, actual)\n", "comments": "      coding  utf 8        (c) 2016  tom melendez  tom supertom com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       region  resource  entity  method    zone  resource  entity  method    global  resource    global  resource  entity    global url  resource  entity  method name    location url    test exceptions   urlmap      params1 exclude fields  params2  should equal   httpshealthcheck   ", "content": "# -*- coding: utf-8 -*-\n# (c) 2016, Tom Melendez <tom@supertom.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\nimport os\nimport sys\n\nfrom ansible.compat.tests import mock, unittest\nfrom ansible.module_utils.gcp import check_min_pkg_version, GCPUtils, GCPInvalidURLError\n\n\ndef build_distribution(version):\n    obj = mock.MagicMock()\n    obj.version = '0.5.0'\n    return obj\n\n\nclass GCPUtilsTestCase(unittest.TestCase):\n    params_dict = {\n        'url_map_name': 'foo_url_map_name',\n        'description': 'foo_url_map description',\n        'host_rules': [\n            {\n                'description': 'host rules description',\n                'hosts': [\n                        'www.example.com',\n                        'www2.example.com'\n                ],\n                'path_matcher': 'host_rules_path_matcher'\n            }\n        ],\n        'path_matchers': [\n            {\n                'name': 'path_matcher_one',\n                'description': 'path matcher one',\n                'defaultService': 'bes-pathmatcher-one-default',\n                'pathRules': [\n                        {\n                            'service': 'my-one-bes',\n                            'paths': [\n                                '/',\n                                '/aboutus'\n                            ]\n                        }\n                ]\n            },\n            {\n                'name': 'path_matcher_two',\n                'description': 'path matcher two',\n                'defaultService': 'bes-pathmatcher-two-default',\n                'pathRules': [\n                        {\n                            'service': 'my-two-bes',\n                            'paths': [\n                                '/webapp',\n                                '/graphs'\n                            ]\n                        }\n                ]\n            }\n        ]\n    }\n\n    @mock.patch(\"pkg_resources.get_distribution\", side_effect=build_distribution)\n    def test_check_minimum_pkg_version(self, mockobj):\n        self.assertTrue(check_min_pkg_version('foobar', '0.4.0'))\n        self.assertTrue(check_min_pkg_version('foobar', '0.5.0'))\n        self.assertFalse(check_min_pkg_version('foobar', '0.6.0'))\n\n    def test_parse_gcp_url(self):\n        # region, resource, entity, method\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/regions/us-east1/instanceGroupManagers/my-mig/recreateInstances'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertEquals('us-east1', actual['region'])\n        self.assertEquals('instanceGroupManagers', actual['resource_name'])\n        self.assertEquals('my-mig', actual['entity_name'])\n        self.assertEquals('recreateInstances', actual['method_name'])\n\n        # zone, resource, entity, method\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/zones/us-east1-c/instanceGroupManagers/my-mig/recreateInstances'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertEquals('us-east1-c', actual['zone'])\n        self.assertEquals('instanceGroupManagers', actual['resource_name'])\n        self.assertEquals('my-mig', actual['entity_name'])\n        self.assertEquals('recreateInstances', actual['method_name'])\n\n        # global, resource\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/global/urlMaps'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertTrue('global' in actual)\n        self.assertTrue(actual['global'])\n        self.assertEquals('urlMaps', actual['resource_name'])\n\n        # global, resource, entity\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/global/urlMaps/my-url-map'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('myproject', actual['project'])\n        self.assertTrue('global' in actual)\n        self.assertTrue(actual['global'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('compute', actual['service'])\n\n        # global URL, resource, entity, method_name\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/mybackendservice/getHealth'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertTrue('global' in actual)\n        self.assertTrue(actual['global'])\n        self.assertEquals('backendServices', actual['resource_name'])\n        self.assertEquals('mybackendservice', actual['entity_name'])\n        self.assertEquals('getHealth', actual['method_name'])\n\n        # no location in URL\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/targetHttpProxies/mytargetproxy/setUrlMap'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertFalse('global' in actual)\n        self.assertEquals('targetHttpProxies', actual['resource_name'])\n        self.assertEquals('mytargetproxy', actual['entity_name'])\n        self.assertEquals('setUrlMap', actual['method_name'])\n\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/targetHttpProxies/mytargetproxy'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertFalse('global' in actual)\n        self.assertEquals('targetHttpProxies', actual['resource_name'])\n        self.assertEquals('mytargetproxy', actual['entity_name'])\n\n        input_url = 'https://www.googleapis.com/compute/v1/projects/myproject/targetHttpProxies'\n        actual = GCPUtils.parse_gcp_url(input_url)\n        self.assertEquals('compute', actual['service'])\n        self.assertEquals('v1', actual['api_version'])\n        self.assertEquals('myproject', actual['project'])\n        self.assertFalse('global' in actual)\n        self.assertEquals('targetHttpProxies', actual['resource_name'])\n\n        # test exceptions\n        no_projects_input_url = 'https://www.googleapis.com/compute/v1/not-projects/myproject/global/backendServices/mybackendservice/getHealth'\n        no_resource_input_url = 'https://www.googleapis.com/compute/v1/not-projects/myproject/global'\n\n        no_resource_no_loc_input_url = 'https://www.googleapis.com/compute/v1/not-projects/myproject'\n\n        with self.assertRaises(GCPInvalidURLError) as cm:\n            GCPUtils.parse_gcp_url(no_projects_input_url)\n        self.assertTrue(cm.exception, GCPInvalidURLError)\n\n        with self.assertRaises(GCPInvalidURLError) as cm:\n            GCPUtils.parse_gcp_url(no_resource_input_url)\n        self.assertTrue(cm.exception, GCPInvalidURLError)\n\n        with self.assertRaises(GCPInvalidURLError) as cm:\n            GCPUtils.parse_gcp_url(no_resource_no_loc_input_url)\n        self.assertTrue(cm.exception, GCPInvalidURLError)\n\n    def test_params_to_gcp_dict(self):\n\n        expected = {\n            'description': 'foo_url_map description',\n            'hostRules': [\n                {\n                    'description': 'host rules description',\n                    'hosts': [\n                        'www.example.com',\n                        'www2.example.com'\n                    ],\n                    'pathMatcher': 'host_rules_path_matcher'\n                }\n            ],\n            'name': 'foo_url_map_name',\n            'pathMatchers': [\n                {\n                    'defaultService': 'bes-pathmatcher-one-default',\n                    'description': 'path matcher one',\n                    'name': 'path_matcher_one',\n                    'pathRules': [\n                        {\n                            'paths': [\n                                '/',\n                                '/aboutus'\n                            ],\n                            'service': 'my-one-bes'\n                        }\n                    ]\n                },\n                {\n                    'defaultService': 'bes-pathmatcher-two-default',\n                    'description': 'path matcher two',\n                    'name': 'path_matcher_two',\n                    'pathRules': [\n                        {\n                            'paths': [\n                                '/webapp',\n                                '/graphs'\n                            ],\n                            'service': 'my-two-bes'\n                        }\n                    ]\n                }\n            ]\n        }\n\n        actual = GCPUtils.params_to_gcp_dict(self.params_dict, 'url_map_name')\n        self.assertEqual(expected, actual)\n\n    def test_get_gcp_resource_from_methodId(self):\n        input_data = 'compute.urlMaps.list'\n        actual = GCPUtils.get_gcp_resource_from_methodId(input_data)\n        self.assertEqual('urlMaps', actual)\n        input_data = None\n        actual = GCPUtils.get_gcp_resource_from_methodId(input_data)\n        self.assertFalse(actual)\n        input_data = 666\n        actual = GCPUtils.get_gcp_resource_from_methodId(input_data)\n        self.assertFalse(actual)\n\n    def test_get_entity_name_from_resource_name(self):\n        input_data = 'urlMaps'\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual('urlMap', actual)\n        input_data = 'targetHttpProxies'\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual('targetHttpProxy', actual)\n        input_data = 'globalForwardingRules'\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual('forwardingRule', actual)\n        input_data = ''\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual(None, actual)\n        input_data = 666\n        actual = GCPUtils.get_entity_name_from_resource_name(input_data)\n        self.assertEqual(None, actual)\n\n    def test_are_params_equal(self):\n        params1 = {'one': 1}\n        params2 = {'one': 1}\n        actual = GCPUtils.are_params_equal(params1, params2)\n        self.assertTrue(actual)\n\n        params1 = {'one': 1}\n        params2 = {'two': 2}\n        actual = GCPUtils.are_params_equal(params1, params2)\n        self.assertFalse(actual)\n\n        params1 = {'three': 3, 'two': 2, 'one': 1}\n        params2 = {'one': 1, 'two': 2, 'three': 3}\n        actual = GCPUtils.are_params_equal(params1, params2)\n        self.assertTrue(actual)\n\n        params1 = {\n            \"creationTimestamp\": \"2017-04-21T11:19:20.718-07:00\",\n            \"defaultService\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/default-backend-service\",\n            \"description\": \"\",\n            \"fingerprint\": \"ickr_pwlZPU=\",\n            \"hostRules\": [\n                {\n                    \"description\": \"\",\n                    \"hosts\": [\n                        \"*.\"\n                    ],\n                    \"pathMatcher\": \"path-matcher-one\"\n                }\n            ],\n            \"id\": \"8566395781175047111\",\n            \"kind\": \"compute#urlMap\",\n            \"name\": \"newtesturlmap-foo\",\n            \"pathMatchers\": [\n                {\n                    \"defaultService\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/bes-pathmatcher-one-default\",\n                    \"description\": \"path matcher one\",\n                    \"name\": \"path-matcher-one\",\n                    \"pathRules\": [\n                        {\n                            \"paths\": [\n                                \"/data\",\n                                \"/aboutus\"\n                            ],\n                            \"service\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/my-one-bes\"\n                        }\n                    ]\n                }\n            ],\n            \"selfLink\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/urlMaps/newtesturlmap-foo\"\n        }\n        params2 = {\n            \"defaultService\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/default-backend-service\",\n            \"hostRules\": [\n                {\n                    \"description\": \"\",\n                    \"hosts\": [\n                        \"*.\"\n                    ],\n                    \"pathMatcher\": \"path-matcher-one\"\n                }\n            ],\n            \"name\": \"newtesturlmap-foo\",\n            \"pathMatchers\": [\n                {\n                    \"defaultService\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/bes-pathmatcher-one-default\",\n                    \"description\": \"path matcher one\",\n                    \"name\": \"path-matcher-one\",\n                    \"pathRules\": [\n                        {\n                            \"paths\": [\n                                \"/data\",\n                                \"/aboutus\"\n                            ],\n                            \"service\": \"https://www.googleapis.com/compute/v1/projects/myproject/global/backendServices/my-one-bes\"\n                        }\n                    ]\n                }\n            ],\n        }\n\n        # params1 has exclude fields, params2 doesn't. Should be equal\n        actual = GCPUtils.are_params_equal(params1, params2)\n        self.assertTrue(actual)\n\n    def test_filter_gcp_fields(self):\n        input_data = {\n            u'kind': u'compute#httpsHealthCheck',\n            u'description': u'',\n            u'timeoutSec': 5,\n            u'checkIntervalSec': 5,\n            u'port': 443,\n            u'healthyThreshold': 2,\n            u'host': u'',\n            u'requestPath': u'/',\n            u'unhealthyThreshold': 2,\n            u'creationTimestamp': u'2017-05-16T15:09:36.546-07:00',\n            u'id': u'8727093129334146639',\n            u'selfLink': u'https://www.googleapis.com/compute/v1/projects/myproject/global/httpsHealthChecks/myhealthcheck',\n            u'name': u'myhealthcheck'}\n\n        expected = {\n            'name': 'myhealthcheck',\n            'checkIntervalSec': 5,\n            'port': 443,\n            'unhealthyThreshold': 2,\n            'healthyThreshold': 2,\n            'host': '',\n            'timeoutSec': 5,\n            'requestPath': '/'}\n\n        actual = GCPUtils.filter_gcp_fields(input_data)\n        self.assertEquals(expected, actual)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_utils.py", "id": "5b3de14328067603ce7eb8ca8183d192", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/module_utils/gcp/test_utils.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}