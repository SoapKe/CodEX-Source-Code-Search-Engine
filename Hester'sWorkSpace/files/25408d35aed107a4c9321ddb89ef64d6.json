{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\nclass TestBinaryTree(object):\n\n\tdef test_insert_traversals (self):\n\t\tmyTree = BinaryTree()\n\t\tmyTree2 = BinaryTree()\n\t\tfor num in [50, 30, 70, 10, 40, 60, 80, 7, 25, 38]:\n\t\t\tmyTree.insert(num)\n\t\t[myTree2.insert(num) for num in range (1, 100, 10)]\n\n\t\tprint(\"Test: insert checking with in order traversal\")\n\t\texpectVal = [7, 10, 25, 30, 38, 40, 50, 60, 70, 80]\n\t\tassert_equal(myTree.printInOrder(), expectVal)\n\t\texpectVal = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]\n\t\tassert_equal(myTree2.printInOrder(), expectVal)\n\n\t\tprint(\"Test: insert checking with post order traversal\")\n\t\texpectVal = [7, 25, 10, 38, 40, 30, 60, 80, 70, 50]\n\t\tassert_equal(myTree.printPostOrder(), expectVal)\n\t\texpectVal = [91, 81, 71, 61, 51, 41, 31, 21, 11, 1]\n\t\tassert_equal(myTree2.printPostOrder(), expectVal)\n\n\n\t\tprint(\"Test: insert checking with pre order traversal\")\n\t\texpectVal = [50, 30, 10, 7, 25, 40, 38, 70, 60, 80]\n\t\tassert_equal(myTree.printPreOrder(), expectVal)\n\t\texpectVal = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]\n\t\tassert_equal(myTree2.printPreOrder(), expectVal)\n\n\n\t\tprint(\"Success: test_insert_traversals\")\n\n\tdef test_max_min_nodes (self):\n\t\tmyTree = BinaryTree()\n\t\tmyTree.insert(5)\n\t\tmyTree.insert(1)\n\t\tmyTree.insert(21)\n\n\t\tprint(\"Test: max node\")\n\t\tassert_equal(myTree.maxNode(), 21)\n\t\tmyTree.insert(32)\n\t\tassert_equal(myTree.maxNode(), 32)\n\n\t\tprint(\"Test: min node\")\n\t\tassert_equal(myTree.minNode(), 1)\n\n\t\tprint(\"Test: min node inserting negative number\")\n\t\tmyTree.insert(-10)\n\t\tassert_equal(myTree.minNode(), -10)\n\n\t\tprint(\"Success: test_max_min_nodes\")\n\n\tdef test_delete (self):\n\t\tmyTree = BinaryTree()\n\t\tmyTree.insert(5)\n\n\t\tprint(\"Test: delete\")\n\t\tmyTree.delete(5)\n\t\tassert_equal(myTree.treeIsEmpty(), True)\n\t\t\n\t\tprint(\"Test: more complex deletions\")\n\t\t[myTree.insert(x) for x in range(1, 5)]\n\t\tmyTree.delete(2)\n\t\tassert_equal(myTree.root.rightChild.data, 3)\n\t\tprint(\"Test: delete invalid value\")\n\t\tassert_equal(myTree.delete(100), False)\n\n\n\t\tprint(\"Success: test_delete\")\n\ndef main():\n    testing = TestBinaryTree()\n    testing.test_insert_traversals()\n    testing.test_max_min_nodes()\n    testing.test_delete()\n    \nif __name__=='__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\nclass TestBinaryTree(object):\n\n\tdef test_insert_traversals (self):\n\t\tmyTree = BinaryTree()\n\t\tmyTree2 = BinaryTree()\n\t\tfor num in [50, 30, 70, 10, 40, 60, 80, 7, 25, 38]:\n\t\t\tmyTree.insert(num)\n\t\t[myTree2.insert(num) for num in range (1, 100, 10)]\n\n\t\tprint(\"Test: insert checking with in order traversal\")\n\t\texpectVal = [7, 10, 25, 30, 38, 40, 50, 60, 70, 80]\n\t\tassert_equal(myTree.printInOrder(), expectVal)\n\t\texpectVal = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]\n\t\tassert_equal(myTree2.printInOrder(), expectVal)\n\n\t\tprint(\"Test: insert checking with post order traversal\")\n\t\texpectVal = [7, 25, 10, 38, 40, 30, 60, 80, 70, 50]\n\t\tassert_equal(myTree.printPostOrder(), expectVal)\n\t\texpectVal = [91, 81, 71, 61, 51, 41, 31, 21, 11, 1]\n\t\tassert_equal(myTree2.printPostOrder(), expectVal)\n\n\n\t\tprint(\"Test: insert checking with pre order traversal\")\n\t\texpectVal = [50, 30, 10, 7, 25, 40, 38, 70, 60, 80]\n\t\tassert_equal(myTree.printPreOrder(), expectVal)\n\t\texpectVal = [1, 11, 21, 31, 41, 51, 61, 71, 81, 91]\n\t\tassert_equal(myTree2.printPreOrder(), expectVal)\n\n\n\t\tprint(\"Success: test_insert_traversals\")\n\n\tdef test_max_min_nodes (self):\n\t\tmyTree = BinaryTree()\n\t\tmyTree.insert(5)\n\t\tmyTree.insert(1)\n\t\tmyTree.insert(21)\n\n\t\tprint(\"Test: max node\")\n\t\tassert_equal(myTree.maxNode(), 21)\n\t\tmyTree.insert(32)\n\t\tassert_equal(myTree.maxNode(), 32)\n\n\t\tprint(\"Test: min node\")\n\t\tassert_equal(myTree.minNode(), 1)\n\n\t\tprint(\"Test: min node inserting negative number\")\n\t\tmyTree.insert(-10)\n\t\tassert_equal(myTree.minNode(), -10)\n\n\t\tprint(\"Success: test_max_min_nodes\")\n\n\tdef test_delete (self):\n\t\tmyTree = BinaryTree()\n\t\tmyTree.insert(5)\n\n\t\tprint(\"Test: delete\")\n\t\tmyTree.delete(5)\n\t\tassert_equal(myTree.treeIsEmpty(), True)\n\t\t\n\t\tprint(\"Test: more complex deletions\")\n\t\t[myTree.insert(x) for x in range(1, 5)]\n\t\tmyTree.delete(2)\n\t\tassert_equal(myTree.root.rightChild.data, 3)\n\t\tprint(\"Test: delete invalid value\")\n\t\tassert_equal(myTree.delete(100), False)\n\n\n\t\tprint(\"Success: test_delete\")\n\ndef main():\n    testing = TestBinaryTree()\n    testing.test_insert_traversals()\n    testing.test_max_min_nodes()\n    testing.test_delete()\n    \nif __name__=='__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_binary_search_tree.py", "id": "25408d35aed107a4c9321ddb89ef64d6", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/staging/graphs_trees/binary_tree/test_binary_search_tree.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}