{"author": "ajenti", "code": "import logging\nimport logging.handlers\nimport os\nimport sys\nfrom datetime import datetime\n\nfrom ajenti.api import extract_context\n\n\nLOG_DIR = '/var/log/ajenti'\nLOG_NAME = 'ajenti.log'\nLOG_FILE = os.path.join(LOG_DIR, LOG_NAME)\n\n\nclass DebugHandler (logging.StreamHandler):\n    \n\n    def __init__(self):\n        self.capturing = False\n        self.buffer = ''\n\n    def start(self):\n        self.capturing = True\n\n    def stop(self):\n        self.capturing = False\n\n    def handle(self, record):\n        if self.capturing:\n            self.buffer += self.formatter.format(record) + '\\n'\n\n\nclass ConsoleHandler (logging.StreamHandler):\n    def __init__(self, stream, debug):\n        self.debug = debug\n        logging.StreamHandler.__init__(self, stream)\n\n    def handle(self, record):\n        if not self.stream.isatty():\n            return logging.StreamHandler.handle(self, record)\n\n        s = ''\n        d = datetime.fromtimestamp(record.created)\n        s += d.strftime(\"\\033[37m%d.%m.%Y %H:%M \\033[0m\")\n        if self.debug:\n            s += ('%s:%s' % (record.filename, record.lineno)).ljust(30)\n        l = ''\n        if record.levelname == 'DEBUG':\n            l = '\\033[37mDEBUG\\033[0m '\n        if record.levelname == 'INFO':\n            l = '\\033[32mINFO\\033[0m  '\n        if record.levelname == 'WARNING':\n            l = '\\033[33mWARN\\033[0m  '\n        if record.levelname == 'ERROR':\n            l = '\\033[31mERROR\\033[0m '\n        s += l.ljust(9)\n\n        context = extract_context()\n        if hasattr(context, 'session') and hasattr(context.session, 'identity'):\n            s += '[%s] ' % context.session.identity\n\n        try:\n            s += record.msg % record.args\n        except:\n            s += record.msg\n        s += '\\n'\n        self.stream.write(s)\n\n\ndef make_log(debug=False, log_level=logging.INFO):\n    log = logging.getLogger()\n    log.setLevel(logging.DEBUG)\n\n    stdout = ConsoleHandler(sys.stdout, debug)\n    stdout.setLevel(log_level)\n\n    logging.blackbox = DebugHandler()\n    logging.blackbox.setLevel(logging.DEBUG)\n    dformatter = logging.Formatter('%(asctime)s %(levelname)-8s %(module)s.%(funcName)s(): %(message)s')\n    logging.blackbox.setFormatter(dformatter)\n    stdout.setFormatter(dformatter)\n    log.addHandler(logging.blackbox)\n\n    log.addHandler(stdout)\n\n\ndef init_log_directory():\n    if not os.path.exists(LOG_DIR):\n        os.mkdir(LOG_DIR)\n\n\ndef init_log_rotation():\n    log = logging.getLogger()\n    try:\n        handler = logging.handlers.TimedRotatingFileHandler(\n            os.path.join(LOG_DIR, LOG_NAME),\n            when='midnight',\n            backupCount=7\n        )\n        handler.setLevel(logging.INFO)\n        handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)-8s: %(message)s'))\n        log.addHandler(handler)\n    except IOError:\n        pass\n\n    return log\n\n\ndef init(level=logging.INFO):\n    make_log(debug=level == logging.DEBUG, log_level=level)\n    logging.blackbox.start()\n", "comments": "        captures log buffer error reports         ", "content": "import logging\nimport logging.handlers\nimport os\nimport sys\nfrom datetime import datetime\n\nfrom ajenti.api import extract_context\n\n\nLOG_DIR = '/var/log/ajenti'\nLOG_NAME = 'ajenti.log'\nLOG_FILE = os.path.join(LOG_DIR, LOG_NAME)\n\n\nclass DebugHandler (logging.StreamHandler):\n    \"\"\"\n    Captures log into a buffer for error reports\n    \"\"\"\n\n    def __init__(self):\n        self.capturing = False\n        self.buffer = ''\n\n    def start(self):\n        self.capturing = True\n\n    def stop(self):\n        self.capturing = False\n\n    def handle(self, record):\n        if self.capturing:\n            self.buffer += self.formatter.format(record) + '\\n'\n\n\nclass ConsoleHandler (logging.StreamHandler):\n    def __init__(self, stream, debug):\n        self.debug = debug\n        logging.StreamHandler.__init__(self, stream)\n\n    def handle(self, record):\n        if not self.stream.isatty():\n            return logging.StreamHandler.handle(self, record)\n\n        s = ''\n        d = datetime.fromtimestamp(record.created)\n        s += d.strftime(\"\\033[37m%d.%m.%Y %H:%M \\033[0m\")\n        if self.debug:\n            s += ('%s:%s' % (record.filename, record.lineno)).ljust(30)\n        l = ''\n        if record.levelname == 'DEBUG':\n            l = '\\033[37mDEBUG\\033[0m '\n        if record.levelname == 'INFO':\n            l = '\\033[32mINFO\\033[0m  '\n        if record.levelname == 'WARNING':\n            l = '\\033[33mWARN\\033[0m  '\n        if record.levelname == 'ERROR':\n            l = '\\033[31mERROR\\033[0m '\n        s += l.ljust(9)\n\n        context = extract_context()\n        if hasattr(context, 'session') and hasattr(context.session, 'identity'):\n            s += '[%s] ' % context.session.identity\n\n        try:\n            s += record.msg % record.args\n        except:\n            s += record.msg\n        s += '\\n'\n        self.stream.write(s)\n\n\ndef make_log(debug=False, log_level=logging.INFO):\n    log = logging.getLogger()\n    log.setLevel(logging.DEBUG)\n\n    stdout = ConsoleHandler(sys.stdout, debug)\n    stdout.setLevel(log_level)\n\n    logging.blackbox = DebugHandler()\n    logging.blackbox.setLevel(logging.DEBUG)\n    dformatter = logging.Formatter('%(asctime)s %(levelname)-8s %(module)s.%(funcName)s(): %(message)s')\n    logging.blackbox.setFormatter(dformatter)\n    stdout.setFormatter(dformatter)\n    log.addHandler(logging.blackbox)\n\n    log.addHandler(stdout)\n\n\ndef init_log_directory():\n    if not os.path.exists(LOG_DIR):\n        os.mkdir(LOG_DIR)\n\n\ndef init_log_rotation():\n    log = logging.getLogger()\n    try:\n        handler = logging.handlers.TimedRotatingFileHandler(\n            os.path.join(LOG_DIR, LOG_NAME),\n            when='midnight',\n            backupCount=7\n        )\n        handler.setLevel(logging.INFO)\n        handler.setFormatter(logging.Formatter('%(asctime)s %(levelname)-8s: %(message)s'))\n        log.addHandler(handler)\n    except IOError:\n        pass\n\n    return log\n\n\ndef init(level=logging.INFO):\n    make_log(debug=level == logging.DEBUG, log_level=level)\n    logging.blackbox.start()\n", "description": "Ajenti Core and stock plugins", "file_name": "log.py", "id": "38f6898a802d872c9868c2b29e918919", "language": "Python", "project_name": "ajenti", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ajenti-ajenti/ajenti-ajenti-dd36ab4/ajenti/log.py", "save_time": "", "source": "", "update_at": "2018-03-16T02:10:44Z", "url": "https://github.com/ajenti/ajenti", "wiki": false}