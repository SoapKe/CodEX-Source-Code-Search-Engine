{"author": "python", "code": "import os, string\n\ncodecs = {\n    'cn': ('gb2312', 'gbk', 'gb18030', 'hz'),\n    'tw': ('big5', 'cp950'),\n    'hk': ('big5hkscs',),\n    'jp': ('cp932', 'shift_jis', 'euc_jp', 'euc_jisx0213', 'shift_jisx0213',\n           'euc_jis_2004', 'shift_jis_2004'),\n    'kr': ('cp949', 'euc_kr', 'johab'),\n    'iso2022': ('iso2022_jp', 'iso2022_jp_1', 'iso2022_jp_2',\n                'iso2022_jp_2004', 'iso2022_jp_3', 'iso2022_jp_ext',\n                'iso2022_kr'),\n}\n\nTEMPLATE = string.Template(\"\"\"\\\n\n $encoding.py: Python Unicode Codec for $ENCODING\n\n Written by Hye-Shik Chang <perky@FreeBSD.org>\n\n\nimport _codecs_$owner, codecs\nimport _multibytecodec as mbc\n\ncodec = _codecs_$owner.getcodec('$encoding')\n\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\n\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\n\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\n\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name='$encoding',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n\"\"\")\n\ndef gencodecs(prefix):\n    for loc, encodings in codecs.items():\n        for enc in encodings:\n            code = TEMPLATE.substitute(ENCODING=enc.upper(),\n                                       encoding=enc.lower(),\n                                       owner=loc)\n            codecpath = os.path.join(prefix, enc + '.py')\n            open(codecpath, 'w').write(code)\n\nif __name__ == '__main__':\n    import sys\n    gencodecs(sys.argv[1])\n", "comments": "          encoding py  python unicode codec  encoding     written hye shik chang  perky freebsd org     import  codecs  owner  codecs import  multibytecodec mbc  codec    codecs  owner getcodec(  encoding )  class codec(codecs codec)      encode   codec encode     decode   codec decode  class incrementalencoder(mbc multibyteincrementalencoder                           codecs incrementalencoder)      codec   codec  class incrementaldecoder(mbc multibyteincrementaldecoder                           codecs incrementaldecoder)      codec   codec  class streamreader(codec  mbc multibytestreamreader  codecs streamreader)      codec   codec  class streamwriter(codec  mbc multibytestreamwriter  codecs streamwriter)      codec   codec  def getregentry()      return codecs codecinfo(         name   encoding           encode codec() encode          decode codec() decode          incrementalencoder incrementalencoder          incrementaldecoder incrementaldecoder          streamreader streamreader          streamwriter streamwriter      )            encoding py  python unicode codec  encoding       written hye shik chang  perky freebsd org     ", "content": "import os, string\n\ncodecs = {\n    'cn': ('gb2312', 'gbk', 'gb18030', 'hz'),\n    'tw': ('big5', 'cp950'),\n    'hk': ('big5hkscs',),\n    'jp': ('cp932', 'shift_jis', 'euc_jp', 'euc_jisx0213', 'shift_jisx0213',\n           'euc_jis_2004', 'shift_jis_2004'),\n    'kr': ('cp949', 'euc_kr', 'johab'),\n    'iso2022': ('iso2022_jp', 'iso2022_jp_1', 'iso2022_jp_2',\n                'iso2022_jp_2004', 'iso2022_jp_3', 'iso2022_jp_ext',\n                'iso2022_kr'),\n}\n\nTEMPLATE = string.Template(\"\"\"\\\n#\n# $encoding.py: Python Unicode Codec for $ENCODING\n#\n# Written by Hye-Shik Chang <perky@FreeBSD.org>\n#\n\nimport _codecs_$owner, codecs\nimport _multibytecodec as mbc\n\ncodec = _codecs_$owner.getcodec('$encoding')\n\nclass Codec(codecs.Codec):\n    encode = codec.encode\n    decode = codec.decode\n\nclass IncrementalEncoder(mbc.MultibyteIncrementalEncoder,\n                         codecs.IncrementalEncoder):\n    codec = codec\n\nclass IncrementalDecoder(mbc.MultibyteIncrementalDecoder,\n                         codecs.IncrementalDecoder):\n    codec = codec\n\nclass StreamReader(Codec, mbc.MultibyteStreamReader, codecs.StreamReader):\n    codec = codec\n\nclass StreamWriter(Codec, mbc.MultibyteStreamWriter, codecs.StreamWriter):\n    codec = codec\n\ndef getregentry():\n    return codecs.CodecInfo(\n        name='$encoding',\n        encode=Codec().encode,\n        decode=Codec().decode,\n        incrementalencoder=IncrementalEncoder,\n        incrementaldecoder=IncrementalDecoder,\n        streamreader=StreamReader,\n        streamwriter=StreamWriter,\n    )\n\"\"\")\n\ndef gencodecs(prefix):\n    for loc, encodings in codecs.items():\n        for enc in encodings:\n            code = TEMPLATE.substitute(ENCODING=enc.upper(),\n                                       encoding=enc.lower(),\n                                       owner=loc)\n            codecpath = os.path.join(prefix, enc + '.py')\n            open(codecpath, 'w').write(code)\n\nif __name__ == '__main__':\n    import sys\n    gencodecs(sys.argv[1])\n", "description": "The Python programming language", "file_name": "gencjkcodecs.py", "id": "0f85e32888b235f86ac3a3c71014f63a", "language": "Python", "project_name": "cpython", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-cpython/python-cpython-fe2bbb1/Tools/unicode/gencjkcodecs.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:51:39Z", "url": "https://github.com/python/cpython", "wiki": false}