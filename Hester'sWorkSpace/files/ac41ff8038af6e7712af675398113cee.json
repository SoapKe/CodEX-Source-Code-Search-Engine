{"author": "certbot", "code": "\n\nimport os\nimport unittest\n\nimport CloudFlare\nimport mock\n\nfrom certbot import errors\nfrom certbot.plugins import dns_test_common\nfrom certbot.plugins.dns_test_common import DOMAIN\nfrom certbot.tests import util as test_util\n\nAPI_ERROR = CloudFlare.exceptions.CloudFlareAPIError(1000, '', '')\nAPI_KEY = 'an-api-key'\nEMAIL = 'example@example.com'\n\n\nclass AuthenticatorTest(test_util.TempDirTestCase, dns_test_common.BaseAuthenticatorTest):\n\n    def setUp(self):\n        from certbot_dns_cloudflare.dns_cloudflare import Authenticator\n\n        super(AuthenticatorTest, self).setUp()\n\n        path = os.path.join(self.tempdir, 'file.ini')\n        dns_test_common.write({\"cloudflare_email\": EMAIL, \"cloudflare_api_key\": API_KEY}, path)\n\n        self.config = mock.MagicMock(cloudflare_credentials=path,\n                                     cloudflare_propagation_seconds=0)  \n\n        self.auth = Authenticator(self.config, \"cloudflare\")\n\n        self.mock_client = mock.MagicMock()\n        |\n        self.auth._get_cloudflare_client = mock.MagicMock(return_value=self.mock_client)\n\n    def test_perform(self):\n        self.auth.perform([self.achall])\n\n        expected = [mock.call.add_txt_record(DOMAIN, '_acme-challenge.'+DOMAIN, mock.ANY, mock.ANY)]\n        self.assertEqual(expected, self.mock_client.mock_calls)\n\n    def test_cleanup(self):\n        |\n        self.auth._attempt_cleanup = True\n        self.auth.cleanup([self.achall])\n\n        expected = [mock.call.del_txt_record(DOMAIN, '_acme-challenge.'+DOMAIN, mock.ANY)]\n        self.assertEqual(expected, self.mock_client.mock_calls)\n\n\nclass CloudflareClientTest(unittest.TestCase):\n    record_name = \"foo\"\n    record_content = \"bar\"\n    record_ttl = 42\n    zone_id = 1\n    record_id = 2\n\n    def setUp(self):\n        from certbot_dns_cloudflare.dns_cloudflare import _CloudflareClient\n\n        self.cloudflare_client = _CloudflareClient(EMAIL, API_KEY)\n\n        self.cf = mock.MagicMock()\n        self.cloudflare_client.cf = self.cf\n\n    def test_add_txt_record(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n\n        self.cloudflare_client.add_txt_record(DOMAIN, self.record_name, self.record_content,\n                                              self.record_ttl)\n\n        self.cf.zones.dns_records.post.assert_called_with(self.zone_id, data=mock.ANY)\n\n        post_data = self.cf.zones.dns_records.post.call_args[1]['data']\n\n        self.assertEqual('TXT', post_data['type'])\n        self.assertEqual(self.record_name, post_data['name'])\n        self.assertEqual(self.record_content, post_data['content'])\n        self.assertEqual(self.record_ttl, post_data['ttl'])\n\n    def test_add_txt_record_error(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n\n        self.cf.zones.dns_records.post.side_effect = API_ERROR\n\n        self.assertRaises(\n            errors.PluginError,\n            self.cloudflare_client.add_txt_record,\n            DOMAIN, self.record_name, self.record_content, self.record_ttl)\n\n    def test_add_txt_record_error_during_zone_lookup(self):\n        self.cf.zones.get.side_effect = API_ERROR\n\n        self.assertRaises(\n            errors.PluginError,\n            self.cloudflare_client.add_txt_record,\n            DOMAIN, self.record_name, self.record_content, self.record_ttl)\n\n    def test_add_txt_record_zone_not_found(self):\n        self.cf.zones.get.return_value = []\n\n        self.assertRaises(\n            errors.PluginError,\n            self.cloudflare_client.add_txt_record,\n            DOMAIN, self.record_name, self.record_content, self.record_ttl)\n\n    def test_del_txt_record(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n        self.cf.zones.dns_records.get.return_value = [{'id': self.record_id}]\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n\n        expected = [mock.call.zones.get(params=mock.ANY),\n                    mock.call.zones.dns_records.get(self.zone_id, params=mock.ANY),\n                    mock.call.zones.dns_records.delete(self.zone_id, self.record_id)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n        get_data = self.cf.zones.dns_records.get.call_args[1]['params']\n\n        self.assertEqual('TXT', get_data['type'])\n        self.assertEqual(self.record_name, get_data['name'])\n        self.assertEqual(self.record_content, get_data['content'])\n\n    def test_del_txt_record_error_during_zone_lookup(self):\n        self.cf.zones.get.side_effect = API_ERROR\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n\n    def test_del_txt_record_error_during_delete(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n        self.cf.zones.dns_records.get.return_value = [{'id': self.record_id}]\n        self.cf.zones.dns_records.delete.side_effect = API_ERROR\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n        expected = [mock.call.zones.get(params=mock.ANY),\n                    mock.call.zones.dns_records.get(self.zone_id, params=mock.ANY),\n                    mock.call.zones.dns_records.delete(self.zone_id, self.record_id)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n    def test_del_txt_record_error_during_get(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n        self.cf.zones.dns_records.get.side_effect = API_ERROR\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n        expected = [mock.call.zones.get(params=mock.ANY),\n                    mock.call.zones.dns_records.get(self.zone_id, params=mock.ANY)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n    def test_del_txt_record_no_record(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n        self.cf.zones.dns_records.get.return_value = []\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n        expected = [mock.call.zones.get(params=mock.ANY),\n                    mock.call.zones.dns_records.get(self.zone_id, params=mock.ANY)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n    def test_del_txt_record_no_zone(self):\n        self.cf.zones.get.return_value = [{'id': None}]\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n        expected = [mock.call.zones.get(params=mock.ANY)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n\nif __name__ == \"__main__\":\n    unittest.main()  \n", "comments": "   tests certbot dns cloudflare dns cloudflare        wait tests     get cloudflare client   pylint  disable protected access     attempt cleanup   pylint  disable protected access    pragma  cover ", "content": "\"\"\"Tests for certbot_dns_cloudflare.dns_cloudflare.\"\"\"\n\nimport os\nimport unittest\n\nimport CloudFlare\nimport mock\n\nfrom certbot import errors\nfrom certbot.plugins import dns_test_common\nfrom certbot.plugins.dns_test_common import DOMAIN\nfrom certbot.tests import util as test_util\n\nAPI_ERROR = CloudFlare.exceptions.CloudFlareAPIError(1000, '', '')\nAPI_KEY = 'an-api-key'\nEMAIL = 'example@example.com'\n\n\nclass AuthenticatorTest(test_util.TempDirTestCase, dns_test_common.BaseAuthenticatorTest):\n\n    def setUp(self):\n        from certbot_dns_cloudflare.dns_cloudflare import Authenticator\n\n        super(AuthenticatorTest, self).setUp()\n\n        path = os.path.join(self.tempdir, 'file.ini')\n        dns_test_common.write({\"cloudflare_email\": EMAIL, \"cloudflare_api_key\": API_KEY}, path)\n\n        self.config = mock.MagicMock(cloudflare_credentials=path,\n                                     cloudflare_propagation_seconds=0)  # don't wait during tests\n\n        self.auth = Authenticator(self.config, \"cloudflare\")\n\n        self.mock_client = mock.MagicMock()\n        # _get_cloudflare_client | pylint: disable=protected-access\n        self.auth._get_cloudflare_client = mock.MagicMock(return_value=self.mock_client)\n\n    def test_perform(self):\n        self.auth.perform([self.achall])\n\n        expected = [mock.call.add_txt_record(DOMAIN, '_acme-challenge.'+DOMAIN, mock.ANY, mock.ANY)]\n        self.assertEqual(expected, self.mock_client.mock_calls)\n\n    def test_cleanup(self):\n        # _attempt_cleanup | pylint: disable=protected-access\n        self.auth._attempt_cleanup = True\n        self.auth.cleanup([self.achall])\n\n        expected = [mock.call.del_txt_record(DOMAIN, '_acme-challenge.'+DOMAIN, mock.ANY)]\n        self.assertEqual(expected, self.mock_client.mock_calls)\n\n\nclass CloudflareClientTest(unittest.TestCase):\n    record_name = \"foo\"\n    record_content = \"bar\"\n    record_ttl = 42\n    zone_id = 1\n    record_id = 2\n\n    def setUp(self):\n        from certbot_dns_cloudflare.dns_cloudflare import _CloudflareClient\n\n        self.cloudflare_client = _CloudflareClient(EMAIL, API_KEY)\n\n        self.cf = mock.MagicMock()\n        self.cloudflare_client.cf = self.cf\n\n    def test_add_txt_record(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n\n        self.cloudflare_client.add_txt_record(DOMAIN, self.record_name, self.record_content,\n                                              self.record_ttl)\n\n        self.cf.zones.dns_records.post.assert_called_with(self.zone_id, data=mock.ANY)\n\n        post_data = self.cf.zones.dns_records.post.call_args[1]['data']\n\n        self.assertEqual('TXT', post_data['type'])\n        self.assertEqual(self.record_name, post_data['name'])\n        self.assertEqual(self.record_content, post_data['content'])\n        self.assertEqual(self.record_ttl, post_data['ttl'])\n\n    def test_add_txt_record_error(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n\n        self.cf.zones.dns_records.post.side_effect = API_ERROR\n\n        self.assertRaises(\n            errors.PluginError,\n            self.cloudflare_client.add_txt_record,\n            DOMAIN, self.record_name, self.record_content, self.record_ttl)\n\n    def test_add_txt_record_error_during_zone_lookup(self):\n        self.cf.zones.get.side_effect = API_ERROR\n\n        self.assertRaises(\n            errors.PluginError,\n            self.cloudflare_client.add_txt_record,\n            DOMAIN, self.record_name, self.record_content, self.record_ttl)\n\n    def test_add_txt_record_zone_not_found(self):\n        self.cf.zones.get.return_value = []\n\n        self.assertRaises(\n            errors.PluginError,\n            self.cloudflare_client.add_txt_record,\n            DOMAIN, self.record_name, self.record_content, self.record_ttl)\n\n    def test_del_txt_record(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n        self.cf.zones.dns_records.get.return_value = [{'id': self.record_id}]\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n\n        expected = [mock.call.zones.get(params=mock.ANY),\n                    mock.call.zones.dns_records.get(self.zone_id, params=mock.ANY),\n                    mock.call.zones.dns_records.delete(self.zone_id, self.record_id)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n        get_data = self.cf.zones.dns_records.get.call_args[1]['params']\n\n        self.assertEqual('TXT', get_data['type'])\n        self.assertEqual(self.record_name, get_data['name'])\n        self.assertEqual(self.record_content, get_data['content'])\n\n    def test_del_txt_record_error_during_zone_lookup(self):\n        self.cf.zones.get.side_effect = API_ERROR\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n\n    def test_del_txt_record_error_during_delete(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n        self.cf.zones.dns_records.get.return_value = [{'id': self.record_id}]\n        self.cf.zones.dns_records.delete.side_effect = API_ERROR\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n        expected = [mock.call.zones.get(params=mock.ANY),\n                    mock.call.zones.dns_records.get(self.zone_id, params=mock.ANY),\n                    mock.call.zones.dns_records.delete(self.zone_id, self.record_id)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n    def test_del_txt_record_error_during_get(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n        self.cf.zones.dns_records.get.side_effect = API_ERROR\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n        expected = [mock.call.zones.get(params=mock.ANY),\n                    mock.call.zones.dns_records.get(self.zone_id, params=mock.ANY)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n    def test_del_txt_record_no_record(self):\n        self.cf.zones.get.return_value = [{'id': self.zone_id}]\n        self.cf.zones.dns_records.get.return_value = []\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n        expected = [mock.call.zones.get(params=mock.ANY),\n                    mock.call.zones.dns_records.get(self.zone_id, params=mock.ANY)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n    def test_del_txt_record_no_zone(self):\n        self.cf.zones.get.return_value = [{'id': None}]\n\n        self.cloudflare_client.del_txt_record(DOMAIN, self.record_name, self.record_content)\n        expected = [mock.call.zones.get(params=mock.ANY)]\n\n        self.assertEqual(expected, self.cf.mock_calls)\n\n\nif __name__ == \"__main__\":\n    unittest.main()  # pragma: no cover\n", "description": "Certbot is EFF's tool to obtain certs from Let's Encrypt and (optionally) auto-enable HTTPS on your server.  It can also act as a client for any other CA that uses the ACME protocol.", "file_name": "dns_cloudflare_test.py", "id": "ac41ff8038af6e7712af675398113cee", "language": "Python", "project_name": "certbot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/certbot-certbot/certbot-certbot-1d0e3b1/certbot-dns-cloudflare/certbot_dns_cloudflare/dns_cloudflare_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:23Z", "url": "https://github.com/certbot/certbot", "wiki": false}