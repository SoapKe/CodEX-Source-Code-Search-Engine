{"author": "sympy", "code": "from sympy.core.decorators import deprecated\nfrom sympy.core.core import BasicMeta, Registry, all_classes\n\n\nclass ClassRegistry(Registry):\n    \n    __slots__ = []\n\n    def __setattr__(self, name, cls):\n        Registry.__setattr__(self, name, cls)\n        all_classes.add(cls)\n\n    def __delattr__(self, name):\n        cls = getattr(self, name)\n        Registry.__delattr__(self, name)\n        \n        \n        if cls not in self.__class__.__dict__.itervalues():\n            all_classes.remove(cls)\n\n    @deprecated(\n        feature='C, including its class ClassRegistry,',\n        last_supported_version='1.0',\n        useinstead='direct imports from the defining module',\n        issue=9371,\n        deprecated_since_version='1.0')\n\n    def __getattr__(self, name):\n        return any(cls.__name__ == name for cls in all_classes)\n\n    @property\n    def _sympy_(self):\n        \n        \n        \n        \n        raise NameError(\"name 'C' is not defined as a Symbol\")\n\nC = ClassRegistry()\nC.BasicMeta = BasicMeta\n", "comments": "        namespace sympy classes      this needed avoid problems cyclic imports      to get sympy class  use  c  class name   e g   c rational    c add        for performance reasons  coupled set  classes  holding     classes  modified directly             the class could different names  make sure    really gone c removing classes     c deprecated  sympification expression    c c defined raise error    since user trying use c like symbol       get  defined symbol ", "content": "from sympy.core.decorators import deprecated\nfrom sympy.core.core import BasicMeta, Registry, all_classes\n\n\nclass ClassRegistry(Registry):\n    \"\"\"\n    Namespace for SymPy classes\n\n    This is needed to avoid problems with cyclic imports.\n    To get a SymPy class, use `C.<class_name>` e.g. `C.Rational`, `C.Add`.\n\n    For performance reasons, this is coupled with a set `all_classes` holding\n    the classes, which should not be modified directly.\n    \"\"\"\n    __slots__ = []\n\n    def __setattr__(self, name, cls):\n        Registry.__setattr__(self, name, cls)\n        all_classes.add(cls)\n\n    def __delattr__(self, name):\n        cls = getattr(self, name)\n        Registry.__delattr__(self, name)\n        # The same class could have different names, so make sure\n        # it's really gone from C before removing it from all_classes.\n        if cls not in self.__class__.__dict__.itervalues():\n            all_classes.remove(cls)\n\n    @deprecated(\n        feature='C, including its class ClassRegistry,',\n        last_supported_version='1.0',\n        useinstead='direct imports from the defining module',\n        issue=9371,\n        deprecated_since_version='1.0')\n\n    def __getattr__(self, name):\n        return any(cls.__name__ == name for cls in all_classes)\n\n    @property\n    def _sympy_(self):\n        # until C is deprecated, any sympification of an expression\n        # with C when C has not been defined can raise this error\n        # since the user is trying to use C like a symbol -- and if\n        # we get here, it hasn't been defined as a symbol\n        raise NameError(\"name 'C' is not defined as a Symbol\")\n\nC = ClassRegistry()\nC.BasicMeta = BasicMeta\n", "description": "A computer algebra system written in pure Python", "file_name": "class_registry.py", "id": "1b7bcd10574ed875050a87b2f16a7f2c", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/deprecated/class_registry.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}