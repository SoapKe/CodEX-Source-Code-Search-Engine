{"author": "ansible", "code": "\n\n (c) 2015 Peter Sprygada, <psprygada@ansible.com>\n Copyright (c) 2017 Dell Inc.\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: dellos10_command\nversion_added: \"2.2\"\nauthor: \"Senthil Kumar Ganesan (@skg-net)\"\nshort_description: Run commands on remote devices running Dell OS10\ndescription:\n  - Sends arbitrary commands to a Dell OS10 node and returns the results\n    read from the device. This module includes an\n    argument that will cause the module to wait for a specific condition\n    before returning or timing out if the condition is not met.\n  - This module does not support running commands in configuration mode.\n    Please use M(dellos10_config) to configure Dell OS10 devices.\nextends_documentation_fragment: dellos10\noptions:\n  commands:\n    description:\n      - List of commands to send to the remote dellos10 device over the\n        configured provider. The resulting output from the command\n        is returned. If the I(wait_for) argument is provided, the\n        module is not returned until the condition is satisfied or\n        the number of retries has expired.\n    required: true\n  wait_for:\n    description:\n      - List of conditions to evaluate against the output of the\n        command. The task will wait for each condition to be true\n        before moving forward. If the conditional is not true\n        within the configured number of I(retries), the task fails.\n        See examples.\n    version_added: \"2.2\"\n  match:\n    description:\n      - The I(match) argument is used in conjunction with the\n        I(wait_for) argument to specify the match policy.  Valid\n        values are C(all) or C(any).  If the value is set to C(all)\n        then all conditionals in the wait_for must be satisfied.  If\n        the value is set to C(any) then only one of the values must be\n        satisfied.\n    default: all\n    choices: ['any', 'all']\n    version_added: \"2.5\"\n  retries:\n    description:\n      - Specifies the number of retries a command should be tried\n        before it is considered failed. The command is run on the\n        target device every retry and evaluated against the\n        I(wait_for) conditions.\n    default: 10\n  interval:\n    description:\n      - Configures the interval in seconds to wait between retries\n        of the command. If the command does not pass the specified\n        conditions, the interval indicates how long to wait before\n        trying the command again.\n    default: 1\n\"\"\"\n\nEXAMPLES = \"\"\"\ntasks:\n  - name: run show version on remote devices\n    dellos10_command:\n      commands: show version\n\n  - name: run show version and check to see if output contains OS10\n    dellos10_command:\n      commands: show version\n      wait_for: result[0] contains OS10\n\n  - name: run multiple commands on remote nodes\n    dellos10_command:\n      commands:\n        - show version\n        - show interface\n\n  - name: run multiple commands and evaluate the output\n    dellos10_command:\n      commands:\n        - show version\n        - show interface\n      wait_for:\n        - result[0] contains OS10\n        - result[1] contains Ethernet\n\"\"\"\n\nRETURN = \"\"\"\nstdout:\n  description: The set of responses from the commands\n  returned: always apart from low level errors (such as action plugin)\n  type: list\n  sample: ['...', '...']\nstdout_lines:\n  description: The value of stdout split into a list\n  returned: always apart from low level errors (such as action plugin)\n  type: list\n  sample: [['...', '...'], ['...'], ['...']]\nfailed_conditions:\n  description: The list of conditionals that have failed\n  returned: failed\n  type: list\n  sample: ['...', '...']\nwarnings:\n  description: The list of warnings (if any) generated by module based on arguments\n  returned: always\n  type: list\n  sample: ['...', '...']\n\"\"\"\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.dellos10.dellos10 import run_commands\nfrom ansible.module_utils.network.dellos10.dellos10 import dellos10_argument_spec, check_args\nfrom ansible.module_utils.network.common.utils import ComplexList\nfrom ansible.module_utils.network.common.parsing import Conditional\nfrom ansible.module_utils.six import string_types\n\n\ndef to_lines(stdout):\n    for item in stdout:\n        if isinstance(item, string_types):\n            item = str(item).split('\\n')\n        yield item\n\n\ndef parse_commands(module, warnings):\n    command = ComplexList(dict(\n        command=dict(key=True),\n        prompt=dict(),\n        answer=dict()\n    ), module)\n    commands = command(module.params['commands'])\n    for index, item in enumerate(commands):\n        if module.check_mode and not item['command'].startswith('show'):\n            warnings.append(\n                'only show commands are supported when using check mode, not '\n                'executing `%s`' % item['command']\n            )\n        elif item['command'].startswith('conf'):\n            module.fail_json(\n                msg='dellos10_command does not support running config mode '\n                    'commands.  Please use dellos10_config instead'\n            )\n    return commands\n\n\ndef main():\n    \"\"\"main entry point for module execution\n    \"\"\"\n    argument_spec = dict(\n         { command: <str>, prompt: <str>, response: <str> }\n        commands=dict(type='list', required=True),\n\n        wait_for=dict(type='list'),\n        match=dict(default='all', choices=['all', 'any']),\n\n        retries=dict(default=10, type='int'),\n        interval=dict(default=1, type='int')\n    )\n\n    argument_spec.update(dellos10_argument_spec)\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    result = {'changed': False}\n\n    warnings = list()\n    check_args(module, warnings)\n    commands = parse_commands(module, warnings)\n    result['warnings'] = warnings\n\n    wait_for = module.params['wait_for'] or list()\n    conditionals = [Conditional(c) for c in wait_for]\n\n    retries = module.params['retries']\n    interval = module.params['interval']\n    match = module.params['match']\n\n    while retries > 0:\n        responses = run_commands(module, commands)\n\n        for item in list(conditionals):\n            if item(responses):\n                if match == 'any':\n                    conditionals = list()\n                    break\n                conditionals.remove(item)\n\n        if not conditionals:\n            break\n\n        time.sleep(interval)\n        retries -= 1\n\n    if conditionals:\n        failed_conditions = [item.raw for item in conditionals]\n        msg = 'One or more conditional statements have not been satisfied'\n        module.fail_json(msg=msg, failed_conditions=failed_conditions)\n\n    result.update({\n        'changed': False,\n        'stdout': responses,\n        'stdout_lines': list(to_lines(responses))\n    })\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  dellos10 command version added   2 2  author   senthil kumar ganesan ( skg net)  short description  run commands remote devices running dell os10 description      sends arbitrary commands dell os10 node returns results     read device  this module includes     argument cause module wait specific condition     returning timing condition met      this module support running commands configuration mode      please use m(dellos10 config) configure dell os10 devices  extends documentation fragment  dellos10 options    commands      description          list commands send remote dellos10 device         configured provider  the resulting output command         returned  if i(wait for) argument provided          module returned condition satisfied         number retries expired      required  true   wait      description          list conditions evaluate output         command  the task wait condition true         moving forward  if conditional true         within configured number i(retries)  task fails          see examples      version added   2 2    match      description          the i(match) argument used conjunction         i(wait for) argument specify match policy   valid         values c(all) c(any)   if value set c(all)         conditionals wait must satisfied   if         value set c(any) one values must         satisfied      default      choices             version added   2 5    retries      description          specifies number retries command tried         considered failed  the command run         target device every retry evaluated         i(wait for) conditions      default  10   interval      description          configures interval seconds wait retries         command  if command pass specified         conditions  interval indicates long wait         trying command      default  1      examples       tasks      name  run show version remote devices     dellos10 command        commands  show version      name  run show version check see output contains os10     dellos10 command        commands  show version       wait  result 0  contains os10      name  run multiple commands remote nodes     dellos10 command        commands            show version           show interface      name  run multiple commands evaluate output     dellos10 command        commands            show version           show interface       wait            result 0  contains os10           result 1  contains ethernet      return       stdout    description  the set responses commands   returned  always apart low level errors (such action plugin)   type  list   sample                 stdout lines    description  the value stdout split list   returned  always apart low level errors (such action plugin)   type  list   sample                                     failed conditions    description  the list conditionals failed   returned  failed   type  list   sample                 warnings    description  the list warnings (if any) generated module based arguments   returned  always   type  list   sample                     import time  ansible module utils basic import ansiblemodule ansible module utils network dellos10 dellos10 import run commands ansible module utils network dellos10 dellos10 import dellos10 argument spec  check args ansible module utils network common utils import complexlist ansible module utils network common parsing import conditional ansible module utils six import string types   def lines(stdout)      item stdout          isinstance(item  string types)              item   str(item) split(  n )         yield item   def parse commands(module  warnings)      command   complexlist(dict(         command dict(key true)          prompt dict()          answer dict()     )  module)     commands   command(module params  commands  )     index  item enumerate(commands)          module check mode item  command   startswith( show )              warnings append(                  show commands supported using check mode                     executing       item  command               )         elif item  command   startswith( conf )              module fail json(                 msg  dellos10 command support running config mode                        commands   please use dellos10 config instead              )     return commands   def main()         main entry point module execution             usr bin python       (c) 2015 peter sprygada   psprygada ansible com     copyright (c) 2017 dell inc     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)      command   str   prompt   str   response   str    ", "content": "#!/usr/bin/python\n#\n# (c) 2015 Peter Sprygada, <psprygada@ansible.com>\n# Copyright (c) 2017 Dell Inc.\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: dellos10_command\nversion_added: \"2.2\"\nauthor: \"Senthil Kumar Ganesan (@skg-net)\"\nshort_description: Run commands on remote devices running Dell OS10\ndescription:\n  - Sends arbitrary commands to a Dell OS10 node and returns the results\n    read from the device. This module includes an\n    argument that will cause the module to wait for a specific condition\n    before returning or timing out if the condition is not met.\n  - This module does not support running commands in configuration mode.\n    Please use M(dellos10_config) to configure Dell OS10 devices.\nextends_documentation_fragment: dellos10\noptions:\n  commands:\n    description:\n      - List of commands to send to the remote dellos10 device over the\n        configured provider. The resulting output from the command\n        is returned. If the I(wait_for) argument is provided, the\n        module is not returned until the condition is satisfied or\n        the number of retries has expired.\n    required: true\n  wait_for:\n    description:\n      - List of conditions to evaluate against the output of the\n        command. The task will wait for each condition to be true\n        before moving forward. If the conditional is not true\n        within the configured number of I(retries), the task fails.\n        See examples.\n    version_added: \"2.2\"\n  match:\n    description:\n      - The I(match) argument is used in conjunction with the\n        I(wait_for) argument to specify the match policy.  Valid\n        values are C(all) or C(any).  If the value is set to C(all)\n        then all conditionals in the wait_for must be satisfied.  If\n        the value is set to C(any) then only one of the values must be\n        satisfied.\n    default: all\n    choices: ['any', 'all']\n    version_added: \"2.5\"\n  retries:\n    description:\n      - Specifies the number of retries a command should be tried\n        before it is considered failed. The command is run on the\n        target device every retry and evaluated against the\n        I(wait_for) conditions.\n    default: 10\n  interval:\n    description:\n      - Configures the interval in seconds to wait between retries\n        of the command. If the command does not pass the specified\n        conditions, the interval indicates how long to wait before\n        trying the command again.\n    default: 1\n\"\"\"\n\nEXAMPLES = \"\"\"\ntasks:\n  - name: run show version on remote devices\n    dellos10_command:\n      commands: show version\n\n  - name: run show version and check to see if output contains OS10\n    dellos10_command:\n      commands: show version\n      wait_for: result[0] contains OS10\n\n  - name: run multiple commands on remote nodes\n    dellos10_command:\n      commands:\n        - show version\n        - show interface\n\n  - name: run multiple commands and evaluate the output\n    dellos10_command:\n      commands:\n        - show version\n        - show interface\n      wait_for:\n        - result[0] contains OS10\n        - result[1] contains Ethernet\n\"\"\"\n\nRETURN = \"\"\"\nstdout:\n  description: The set of responses from the commands\n  returned: always apart from low level errors (such as action plugin)\n  type: list\n  sample: ['...', '...']\nstdout_lines:\n  description: The value of stdout split into a list\n  returned: always apart from low level errors (such as action plugin)\n  type: list\n  sample: [['...', '...'], ['...'], ['...']]\nfailed_conditions:\n  description: The list of conditionals that have failed\n  returned: failed\n  type: list\n  sample: ['...', '...']\nwarnings:\n  description: The list of warnings (if any) generated by module based on arguments\n  returned: always\n  type: list\n  sample: ['...', '...']\n\"\"\"\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.dellos10.dellos10 import run_commands\nfrom ansible.module_utils.network.dellos10.dellos10 import dellos10_argument_spec, check_args\nfrom ansible.module_utils.network.common.utils import ComplexList\nfrom ansible.module_utils.network.common.parsing import Conditional\nfrom ansible.module_utils.six import string_types\n\n\ndef to_lines(stdout):\n    for item in stdout:\n        if isinstance(item, string_types):\n            item = str(item).split('\\n')\n        yield item\n\n\ndef parse_commands(module, warnings):\n    command = ComplexList(dict(\n        command=dict(key=True),\n        prompt=dict(),\n        answer=dict()\n    ), module)\n    commands = command(module.params['commands'])\n    for index, item in enumerate(commands):\n        if module.check_mode and not item['command'].startswith('show'):\n            warnings.append(\n                'only show commands are supported when using check mode, not '\n                'executing `%s`' % item['command']\n            )\n        elif item['command'].startswith('conf'):\n            module.fail_json(\n                msg='dellos10_command does not support running config mode '\n                    'commands.  Please use dellos10_config instead'\n            )\n    return commands\n\n\ndef main():\n    \"\"\"main entry point for module execution\n    \"\"\"\n    argument_spec = dict(\n        # { command: <str>, prompt: <str>, response: <str> }\n        commands=dict(type='list', required=True),\n\n        wait_for=dict(type='list'),\n        match=dict(default='all', choices=['all', 'any']),\n\n        retries=dict(default=10, type='int'),\n        interval=dict(default=1, type='int')\n    )\n\n    argument_spec.update(dellos10_argument_spec)\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    result = {'changed': False}\n\n    warnings = list()\n    check_args(module, warnings)\n    commands = parse_commands(module, warnings)\n    result['warnings'] = warnings\n\n    wait_for = module.params['wait_for'] or list()\n    conditionals = [Conditional(c) for c in wait_for]\n\n    retries = module.params['retries']\n    interval = module.params['interval']\n    match = module.params['match']\n\n    while retries > 0:\n        responses = run_commands(module, commands)\n\n        for item in list(conditionals):\n            if item(responses):\n                if match == 'any':\n                    conditionals = list()\n                    break\n                conditionals.remove(item)\n\n        if not conditionals:\n            break\n\n        time.sleep(interval)\n        retries -= 1\n\n    if conditionals:\n        failed_conditions = [item.raw for item in conditionals]\n        msg = 'One or more conditional statements have not been satisfied'\n        module.fail_json(msg=msg, failed_conditions=failed_conditions)\n\n    result.update({\n        'changed': False,\n        'stdout': responses,\n        'stdout_lines': list(to_lines(responses))\n    })\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "dellos10_command.py", "id": "b8ce4c267474a6d7066970e1780b9802", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/dellos10/dellos10_command.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}