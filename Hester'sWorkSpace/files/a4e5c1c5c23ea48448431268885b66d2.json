{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport time\n\nfrom datetime import datetime, timedelta\nfrom dateutil import relativedelta\n\nfrom odoo import fields, tools\nfrom odoo.modules.module import get_module_resource\nfrom odoo.tests import common\n\n\nclass TestHrPayrollAccount(common.TransactionCase):\n\n    def _load(self, module, *args):\n        tools.convert_file(\n            self.cr, 'hr_payroll_account',\n            get_module_resource(module, *args), {}, 'init', False, 'test', self.registry._assertion_report)\n\n    def setUp(self):\n        super(TestHrPayrollAccount, self).setUp()\n\n        self._load('account', 'test', 'account_minimal_test.xml')\n\n        self.payslip_action_id = self.ref('hr_payroll.menu_department_tree')\n\n        self.res_partner_bank = self.env['res.partner.bank'].create({\n            'acc_number': '001-9876543-21',\n            'partner_id': self.ref('base.res_partner_12'),\n            'acc_type': 'bank',\n            'bank_id': self.ref('base.res_bank_1'),\n        })\n\n        self.hr_employee_john = self.env['hr.employee'].create({\n            'address_home_id': self.ref('base.res_partner_address_2'),\n            'address_id': self.ref('base.res_partner_address_12'),\n            'birthday': '1984-05-01',\n            'children': 0.0,\n            'country_id': self.ref('base.in'),\n            'department_id': self.ref('hr.dep_rd'),\n            'gender': 'male',\n            'marital': 'single',\n            'name': 'John',\n            'bank_account_id': self.res_partner_bank.bank_id.id,\n            'vehicle_distance': 0.0,\n        })\n\n        self.hr_structure_softwaredeveloper = self.env['hr.payroll.structure'].create({\n            'name': 'Salary Structure for Software Developer',\n            'code': 'SD',\n            'company_id': self.ref('base.main_company'),\n            'parent_id': self.ref('hr_payroll.structure_base'),\n            'rule_ids': [(6, 0, [\n                    self.ref('hr_payroll.hr_salary_rule_houserentallowance1'),\n                    self.ref('hr_payroll.hr_salary_rule_convanceallowance1'),\n                    self.ref('hr_payroll.hr_salary_rule_professionaltax1'),\n                    self.ref('hr_payroll.hr_salary_rule_providentfund1'),\n                    self.ref('hr_payroll.hr_salary_rule_meal_voucher'),\n                    self.ref('hr_payroll.hr_salary_rule_sales_commission')\n            ])],\n        })\n\n        \n        self.hr_contract_john = self.env['hr.contract'].create({\n            'date_end': fields.Date.to_string(datetime.now() + timedelta(days=365)),\n            'date_start': fields.Date.today(),\n            'name': 'Contract for John',\n            'wage': 5000.0,\n            'type_id': self.ref('hr_contract.hr_contract_type_emp'),\n            'employee_id': self.hr_employee_john.id,\n            'struct_id': self.hr_structure_softwaredeveloper.id,\n            'journal_id': self.ref('hr_payroll_account.expenses_journal'),\n        })\n\n        self.hr_payslip = self.env['hr.payslip'].create({\n            'employee_id': self.hr_employee_john.id,\n            'journal_id': self.ref('hr_payroll_account.expenses_journal'),\n        })\n\n    def test_00_hr_payslip(self):\n        \n\n        date_from = time.strftime('%Y-%m-01')\n        date_to = str(datetime.now() + relativedelta.relativedelta(months=+1, day=1, days=-1))[:10]\n        res = self.hr_payslip.onchange_employee_id(date_from, date_to, self.hr_employee_john.id)\n        vals = {\n            'struct_id': res['value']['struct_id'],\n            'contract_id': res['value']['contract_id'],\n            'name': res['value']['name'],\n        }\n        vals['worked_days_line_ids'] = [(0, 0, i) for i in res['value']['worked_days_line_ids']]\n        vals['input_line_ids'] = [(0, 0, i) for i in res['value']['input_line_ids']]\n        vals.update({'contract_id': self.hr_contract_john.id})\n        self.hr_payslip.write(vals)\n\n        \n        payslip_input = self.env['hr.payslip.input'].search([('payslip_id', '=', self.hr_payslip.id)])\n        payslip_input.write({'amount': 5.0})\n\n        \n        self.assertEqual(self.hr_payslip.state, 'draft', 'State not changed!')\n\n        \n        context = {\"lang\": \"en_US\", \"tz\": False, \"active_model\": 'hr.payslip', \"department_id\": False, \"active_ids\": [self.payslip_action_id], \"section_id\": False, \"active_id\": self.payslip_action_id}\n        self.hr_payslip.with_context(context).compute_sheet()\n\n        \n        self.hr_payslip.action_payslip_cancel()\n        self.assertEqual(self.hr_payslip.state, 'cancel', \"Payslip is rejected.\")\n        self.hr_payslip.action_payslip_draft()\n\n        \n        self.hr_payslip.action_payslip_done()\n\n        \n        self.assertTrue(self.hr_payslip.move_id, 'Accounting Entries has not been created')\n\n        \n        self.assertEqual(self.hr_payslip.state, 'done', 'State not changed!')\n", "comments": "    checking process payslip             coding  utf 8        part odoo  see license file full copyright licensing details     create account journal     i assign amount input data     i verify payslip draft state     i click  compute sheet  button     i want check cancel button  so i first cancel sheet make set draft     confirm payslip    i verify accounting entries created     i verify payslip done state  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport time\n\nfrom datetime import datetime, timedelta\nfrom dateutil import relativedelta\n\nfrom odoo import fields, tools\nfrom odoo.modules.module import get_module_resource\nfrom odoo.tests import common\n\n\nclass TestHrPayrollAccount(common.TransactionCase):\n\n    def _load(self, module, *args):\n        tools.convert_file(\n            self.cr, 'hr_payroll_account',\n            get_module_resource(module, *args), {}, 'init', False, 'test', self.registry._assertion_report)\n\n    def setUp(self):\n        super(TestHrPayrollAccount, self).setUp()\n\n        self._load('account', 'test', 'account_minimal_test.xml')\n\n        self.payslip_action_id = self.ref('hr_payroll.menu_department_tree')\n\n        self.res_partner_bank = self.env['res.partner.bank'].create({\n            'acc_number': '001-9876543-21',\n            'partner_id': self.ref('base.res_partner_12'),\n            'acc_type': 'bank',\n            'bank_id': self.ref('base.res_bank_1'),\n        })\n\n        self.hr_employee_john = self.env['hr.employee'].create({\n            'address_home_id': self.ref('base.res_partner_address_2'),\n            'address_id': self.ref('base.res_partner_address_12'),\n            'birthday': '1984-05-01',\n            'children': 0.0,\n            'country_id': self.ref('base.in'),\n            'department_id': self.ref('hr.dep_rd'),\n            'gender': 'male',\n            'marital': 'single',\n            'name': 'John',\n            'bank_account_id': self.res_partner_bank.bank_id.id,\n            'vehicle_distance': 0.0,\n        })\n\n        self.hr_structure_softwaredeveloper = self.env['hr.payroll.structure'].create({\n            'name': 'Salary Structure for Software Developer',\n            'code': 'SD',\n            'company_id': self.ref('base.main_company'),\n            'parent_id': self.ref('hr_payroll.structure_base'),\n            'rule_ids': [(6, 0, [\n                    self.ref('hr_payroll.hr_salary_rule_houserentallowance1'),\n                    self.ref('hr_payroll.hr_salary_rule_convanceallowance1'),\n                    self.ref('hr_payroll.hr_salary_rule_professionaltax1'),\n                    self.ref('hr_payroll.hr_salary_rule_providentfund1'),\n                    self.ref('hr_payroll.hr_salary_rule_meal_voucher'),\n                    self.ref('hr_payroll.hr_salary_rule_sales_commission')\n            ])],\n        })\n\n        # Create account journal.\n        self.hr_contract_john = self.env['hr.contract'].create({\n            'date_end': fields.Date.to_string(datetime.now() + timedelta(days=365)),\n            'date_start': fields.Date.today(),\n            'name': 'Contract for John',\n            'wage': 5000.0,\n            'type_id': self.ref('hr_contract.hr_contract_type_emp'),\n            'employee_id': self.hr_employee_john.id,\n            'struct_id': self.hr_structure_softwaredeveloper.id,\n            'journal_id': self.ref('hr_payroll_account.expenses_journal'),\n        })\n\n        self.hr_payslip = self.env['hr.payslip'].create({\n            'employee_id': self.hr_employee_john.id,\n            'journal_id': self.ref('hr_payroll_account.expenses_journal'),\n        })\n\n    def test_00_hr_payslip(self):\n        \"\"\" checking the process of payslip. \"\"\"\n\n        date_from = time.strftime('%Y-%m-01')\n        date_to = str(datetime.now() + relativedelta.relativedelta(months=+1, day=1, days=-1))[:10]\n        res = self.hr_payslip.onchange_employee_id(date_from, date_to, self.hr_employee_john.id)\n        vals = {\n            'struct_id': res['value']['struct_id'],\n            'contract_id': res['value']['contract_id'],\n            'name': res['value']['name'],\n        }\n        vals['worked_days_line_ids'] = [(0, 0, i) for i in res['value']['worked_days_line_ids']]\n        vals['input_line_ids'] = [(0, 0, i) for i in res['value']['input_line_ids']]\n        vals.update({'contract_id': self.hr_contract_john.id})\n        self.hr_payslip.write(vals)\n\n        # I assign the amount to Input data.\n        payslip_input = self.env['hr.payslip.input'].search([('payslip_id', '=', self.hr_payslip.id)])\n        payslip_input.write({'amount': 5.0})\n\n        # I verify the payslip is in draft state.\n        self.assertEqual(self.hr_payslip.state, 'draft', 'State not changed!')\n\n        # I click on \"Compute Sheet\" button.\n        context = {\"lang\": \"en_US\", \"tz\": False, \"active_model\": 'hr.payslip', \"department_id\": False, \"active_ids\": [self.payslip_action_id], \"section_id\": False, \"active_id\": self.payslip_action_id}\n        self.hr_payslip.with_context(context).compute_sheet()\n\n        # I want to check cancel button. So I first cancel the sheet then make it set to draft.\n        self.hr_payslip.action_payslip_cancel()\n        self.assertEqual(self.hr_payslip.state, 'cancel', \"Payslip is rejected.\")\n        self.hr_payslip.action_payslip_draft()\n\n        # Confirm Payslip\n        self.hr_payslip.action_payslip_done()\n\n        # I verify that the Accounting Entries are created.\n        self.assertTrue(self.hr_payslip.move_id, 'Accounting Entries has not been created')\n\n        # I verify that the payslip is in done state.\n        self.assertEqual(self.hr_payslip.state, 'done', 'State not changed!')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_hr_payroll_account.py", "id": "a4e5c1c5c23ea48448431268885b66d2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_payroll_account/tests/test_hr_payroll_account.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}