{"author": "sympy", "code": "from sympy.sandbox.indexed_integrals import IndexedIntegral\nfrom sympy import IndexedBase, Idx, symbols, sin, cos\n\n\ndef test_indexed_integrals():\n    A = IndexedBase('A')\n    i, j = symbols('i j', integer=True)\n    a1, a2 = symbols('a1:3', cls=Idx)\n    assert isinstance(a1, Idx)\n\n    assert IndexedIntegral(1, A[i]).doit() == A[i]\n    assert IndexedIntegral(A[i], A[i]).doit() == A[i] ** 2 / 2\n    assert IndexedIntegral(A[j], A[i]).doit() == A[i] * A[j]\n    assert IndexedIntegral(A[i] * A[j], A[i]).doit() == A[i] ** 2 * A[j] / 2\n    assert IndexedIntegral(sin(A[i]), A[i]).doit() == -cos(A[i])\n    assert IndexedIntegral(sin(A[j]), A[i]).doit() == sin(A[j]) * A[i]\n\n    assert IndexedIntegral(1, A[a1]).doit() == A[a1]\n    assert IndexedIntegral(A[a1], A[a1]).doit() == A[a1] ** 2 / 2\n    assert IndexedIntegral(A[a2], A[a1]).doit() == A[a1] * A[a2]\n    assert IndexedIntegral(A[a1] * A[a2], A[a1]).doit() == A[a1] ** 2 * A[a2] / 2\n    assert IndexedIntegral(sin(A[a1]), A[a1]).doit() == -cos(A[a1])\n    assert IndexedIntegral(sin(A[a2]), A[a1]).doit() == sin(A[a2]) * A[a1]\n", "comments": "", "content": "from sympy.sandbox.indexed_integrals import IndexedIntegral\nfrom sympy import IndexedBase, Idx, symbols, sin, cos\n\n\ndef test_indexed_integrals():\n    A = IndexedBase('A')\n    i, j = symbols('i j', integer=True)\n    a1, a2 = symbols('a1:3', cls=Idx)\n    assert isinstance(a1, Idx)\n\n    assert IndexedIntegral(1, A[i]).doit() == A[i]\n    assert IndexedIntegral(A[i], A[i]).doit() == A[i] ** 2 / 2\n    assert IndexedIntegral(A[j], A[i]).doit() == A[i] * A[j]\n    assert IndexedIntegral(A[i] * A[j], A[i]).doit() == A[i] ** 2 * A[j] / 2\n    assert IndexedIntegral(sin(A[i]), A[i]).doit() == -cos(A[i])\n    assert IndexedIntegral(sin(A[j]), A[i]).doit() == sin(A[j]) * A[i]\n\n    assert IndexedIntegral(1, A[a1]).doit() == A[a1]\n    assert IndexedIntegral(A[a1], A[a1]).doit() == A[a1] ** 2 / 2\n    assert IndexedIntegral(A[a2], A[a1]).doit() == A[a1] * A[a2]\n    assert IndexedIntegral(A[a1] * A[a2], A[a1]).doit() == A[a1] ** 2 * A[a2] / 2\n    assert IndexedIntegral(sin(A[a1]), A[a1]).doit() == -cos(A[a1])\n    assert IndexedIntegral(sin(A[a2]), A[a1]).doit() == sin(A[a2]) * A[a1]\n", "description": "A computer algebra system written in pure Python", "file_name": "test_indexed_integrals.py", "id": "d448ae0f87cd48ab807946e7109d5a6b", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/sandbox/tests/test_indexed_integrals.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}