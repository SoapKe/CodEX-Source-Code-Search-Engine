{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .kaltura import KalturaIE\nfrom ..utils import (\n    extract_attributes,\n    remove_end,\n    urlencode_postdata,\n)\n\n\nclass AsianCrushIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?asiancrush\\.com/video/(?:[^/]+/)?0+(?P<id>\\d+)v\\b'\n    _TESTS = [{\n        'url': 'https://www.asiancrush.com/video/012869v/women-who-flirt/',\n        'md5': 'c3b740e48d0ba002a42c0b72857beae6',\n        'info_dict': {\n            'id': '1_y4tmjm5r',\n            'ext': 'mp4',\n            'title': 'Women Who Flirt',\n            'description': 'md5:3db14e9186197857e7063522cb89a805',\n            'timestamp': 1496936429,\n            'upload_date': '20170608',\n            'uploader_id': 'craig@crifkin.com',\n        },\n    }, {\n        'url': 'https://www.asiancrush.com/video/she-was-pretty/011886v-pretty-episode-3/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = self._download_json(\n            'https://www.asiancrush.com/wp-admin/admin-ajax.php', video_id,\n            data=urlencode_postdata({\n                'postid': video_id,\n                'action': 'get_channel_kaltura_vars',\n            }))\n\n        entry_id = data['entry_id']\n\n        return self.url_result(\n            'kaltura:%s:%s' % (data['partner_id'], entry_id),\n            ie=KalturaIE.ie_key(), video_id=entry_id,\n            video_title=data.get('vid_label'))\n\n\nclass AsianCrushPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?asiancrush\\.com/series/0+(?P<id>\\d+)s\\b'\n    _TEST = {\n        'url': 'https://www.asiancrush.com/series/012481s/scholar-walks-night/',\n        'info_dict': {\n            'id': '12481',\n            'title': 'Scholar Who Walks the Night',\n            'description': 'md5:7addd7c5132a09fd4741152d96cce886',\n        },\n        'playlist_count': 20,\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = []\n\n        for mobj in re.finditer(\n                r'<a[^>]+href=([\"\\'])(?P<url>%s.*?)\\1[^>]*>' % AsianCrushIE._VALID_URL,\n                webpage):\n            attrs = extract_attributes(mobj.group(0))\n            if attrs.get('class') == 'clearfix':\n                entries.append(self.url_result(\n                    mobj.group('url'), ie=AsianCrushIE.ie_key()))\n\n        title = remove_end(\n            self._html_search_regex(\n                r'(?s)<h1\\b[^>]\\bid=[\"\\']movieTitle[^>]+>(.+?)</h1>', webpage,\n                'title', default=None) or self._og_search_title(\n                webpage, default=None) or self._html_search_meta(\n                'twitter:title', webpage, 'title',\n                default=None) or self._search_regex(\n                r'<title>([^<]+)</title>', webpage, 'title', fatal=False),\n            ' | AsianCrush')\n\n        description = self._og_search_description(\n            webpage, default=None) or self._html_search_meta(\n            'twitter:description', webpage, 'description', fatal=False)\n\n        return self.playlist_result(entries, playlist_id, title, description)\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .kaltura import KalturaIE\nfrom ..utils import (\n    extract_attributes,\n    remove_end,\n    urlencode_postdata,\n)\n\n\nclass AsianCrushIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?asiancrush\\.com/video/(?:[^/]+/)?0+(?P<id>\\d+)v\\b'\n    _TESTS = [{\n        'url': 'https://www.asiancrush.com/video/012869v/women-who-flirt/',\n        'md5': 'c3b740e48d0ba002a42c0b72857beae6',\n        'info_dict': {\n            'id': '1_y4tmjm5r',\n            'ext': 'mp4',\n            'title': 'Women Who Flirt',\n            'description': 'md5:3db14e9186197857e7063522cb89a805',\n            'timestamp': 1496936429,\n            'upload_date': '20170608',\n            'uploader_id': 'craig@crifkin.com',\n        },\n    }, {\n        'url': 'https://www.asiancrush.com/video/she-was-pretty/011886v-pretty-episode-3/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = self._download_json(\n            'https://www.asiancrush.com/wp-admin/admin-ajax.php', video_id,\n            data=urlencode_postdata({\n                'postid': video_id,\n                'action': 'get_channel_kaltura_vars',\n            }))\n\n        entry_id = data['entry_id']\n\n        return self.url_result(\n            'kaltura:%s:%s' % (data['partner_id'], entry_id),\n            ie=KalturaIE.ie_key(), video_id=entry_id,\n            video_title=data.get('vid_label'))\n\n\nclass AsianCrushPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?asiancrush\\.com/series/0+(?P<id>\\d+)s\\b'\n    _TEST = {\n        'url': 'https://www.asiancrush.com/series/012481s/scholar-walks-night/',\n        'info_dict': {\n            'id': '12481',\n            'title': 'Scholar Who Walks the Night',\n            'description': 'md5:7addd7c5132a09fd4741152d96cce886',\n        },\n        'playlist_count': 20,\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        entries = []\n\n        for mobj in re.finditer(\n                r'<a[^>]+href=([\"\\'])(?P<url>%s.*?)\\1[^>]*>' % AsianCrushIE._VALID_URL,\n                webpage):\n            attrs = extract_attributes(mobj.group(0))\n            if attrs.get('class') == 'clearfix':\n                entries.append(self.url_result(\n                    mobj.group('url'), ie=AsianCrushIE.ie_key()))\n\n        title = remove_end(\n            self._html_search_regex(\n                r'(?s)<h1\\b[^>]\\bid=[\"\\']movieTitle[^>]+>(.+?)</h1>', webpage,\n                'title', default=None) or self._og_search_title(\n                webpage, default=None) or self._html_search_meta(\n                'twitter:title', webpage, 'title',\n                default=None) or self._search_regex(\n                r'<title>([^<]+)</title>', webpage, 'title', fatal=False),\n            ' | AsianCrush')\n\n        description = self._og_search_description(\n            webpage, default=None) or self._html_search_meta(\n            'twitter:description', webpage, 'description', fatal=False)\n\n        return self.playlist_result(entries, playlist_id, title, description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "asiancrush.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/asiancrush.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}