{"author": "deepfakes", "code": "\n\nimport face_recognition\n\n\ndef avg(arr):\n  return sum(arr)*1.0/len(arr)\n\nclass FaceFilter():\n    def __init__(self, reference_file_paths, nreference_file_paths, threshold = 0.6):\n        images = list(map(face_recognition.load_image_file, reference_file_paths))\n        nimages = list(map(face_recognition.load_image_file, nreference_file_paths))\n        \n        self.encodings = list(map(lambda im: face_recognition.face_encodings(im)[0], images))\n        self.nencodings = list(map(lambda im: face_recognition.face_encodings(im)[0], nimages))\n        self.threshold = threshold\n    \n    def check(self, detected_face):\n        \n        encodings = face_recognition.face_encodings(detected_face.image)\n        if encodings is not None and len(encodings) > 0:\n            distances = list(face_recognition.face_distance(self.encodings, encodings[0]))\n            distance = avg(distances)\n            mindistance = min(distances)\n            maxdistance = max(distances)\n            if distance > self.threshold:\n                print(\"Distance above threshold: %f < %f\" % (distance, self.threshold))\n                return False\n            if len(self.nencodings) > 0:\n              ndistances = list(face_recognition.face_distance(self.nencodings, encodings[0]))\n              ndistance = avg(ndistances)\n              nmindistance = min(ndistances)\n              nmaxdistance = max(ndistances)\n              if (mindistance > nmindistance):\n                  print(\"Distance to negative sample is smaller\")\n                  return False\n              if (distance > ndistance):\n                  print(\"Average distance to negative sample is smaller\")\n                  return False\n              \n              K=min(5, min(len(distances), len(ndistances)) + 1)\n              N=sum(list(map(lambda x: x[0],\n                    list(sorted([(1,d) for d in distances] + [(0,d) for d in ndistances],\n                                key=lambda x: x[1]))[:K])))\n              ratio = N/K\n              if (ratio < 0.5):\n                  print(\"K-nn is %.2f\" % ratio)\n                  return False\n            return True\n        else:\n            print(\"No face encodings found\")\n            return False\n\n# # Copy/Paste (mostly) from private method in face_recognition\n()\n# face_encoder = dlib.face_recognition_model_v1(face_recognition_model)\n\n# def convert(detected_face):\n#     return np.array(face_encoder.compute_face_descriptor(detected_face.image, detected_face.landmarks, 1))\n\n", "comments": "  import dlib    import numpy np    import face recognition models    note  take first face  reference file contain one face     could use detected landmarks  i manage  todo the copy paste help    k nn classifier      copy paste (mostly) private method face recognition    face recognition model   face recognition models face recognition model location()    face encoder   dlib face recognition model v1(face recognition model)    def convert(detected face)         return np array(face encoder compute face descriptor(detected face image  detected face landmarks  1))      end copy paste ", "content": "# import dlib\n# import numpy as np\nimport face_recognition\n# import face_recognition_models\n\ndef avg(arr):\n  return sum(arr)*1.0/len(arr)\n\nclass FaceFilter():\n    def __init__(self, reference_file_paths, nreference_file_paths, threshold = 0.6):\n        images = list(map(face_recognition.load_image_file, reference_file_paths))\n        nimages = list(map(face_recognition.load_image_file, nreference_file_paths))\n        # Note: we take only first face, so the reference file should only contain one face.\n        self.encodings = list(map(lambda im: face_recognition.face_encodings(im)[0], images))\n        self.nencodings = list(map(lambda im: face_recognition.face_encodings(im)[0], nimages))\n        self.threshold = threshold\n    \n    def check(self, detected_face):\n        # we could use detected landmarks, but I did not manage to do so. TODO The copy/paste below should help\n        encodings = face_recognition.face_encodings(detected_face.image)\n        if encodings is not None and len(encodings) > 0:\n            distances = list(face_recognition.face_distance(self.encodings, encodings[0]))\n            distance = avg(distances)\n            mindistance = min(distances)\n            maxdistance = max(distances)\n            if distance > self.threshold:\n                print(\"Distance above threshold: %f < %f\" % (distance, self.threshold))\n                return False\n            if len(self.nencodings) > 0:\n              ndistances = list(face_recognition.face_distance(self.nencodings, encodings[0]))\n              ndistance = avg(ndistances)\n              nmindistance = min(ndistances)\n              nmaxdistance = max(ndistances)\n              if (mindistance > nmindistance):\n                  print(\"Distance to negative sample is smaller\")\n                  return False\n              if (distance > ndistance):\n                  print(\"Average distance to negative sample is smaller\")\n                  return False\n              # k-nn classifier\n              K=min(5, min(len(distances), len(ndistances)) + 1)\n              N=sum(list(map(lambda x: x[0],\n                    list(sorted([(1,d) for d in distances] + [(0,d) for d in ndistances],\n                                key=lambda x: x[1]))[:K])))\n              ratio = N/K\n              if (ratio < 0.5):\n                  print(\"K-nn is %.2f\" % ratio)\n                  return False\n            return True\n        else:\n            print(\"No face encodings found\")\n            return False\n\n# # Copy/Paste (mostly) from private method in face_recognition\n# face_recognition_model = face_recognition_models.face_recognition_model_location()\n# face_encoder = dlib.face_recognition_model_v1(face_recognition_model)\n\n# def convert(detected_face):\n#     return np.array(face_encoder.compute_face_descriptor(detected_face.image, detected_face.landmarks, 1))\n# # end of Copy/Paste\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "FaceFilter.py", "id": "2089367a62d30f509196073408d05aa4", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/lib/FaceFilter.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}