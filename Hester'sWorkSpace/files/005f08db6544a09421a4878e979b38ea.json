{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass CCCIE(InfoExtractor):\n    IE_NAME = 'media.ccc.de'\n    _VALID_URL = r'https?://(?:www\\.)?media\\.ccc\\.de/v/(?P<id>[^/?\n\n    _TESTS = [{\n        'url': 'https://media.ccc.de/v/30C3_-_5443_-_en_-_saal_g_-_201312281830_-_introduction_to_processor_design_-_byterazor\n        'md5': '3a1eda8f3a29515d27f5adb967d7e740',\n        'info_dict': {\n            'id': '1839',\n            'ext': 'mp4',\n            'title': 'Introduction to Processor Design',\n            'description': 'md5:df55f6d073d4ceae55aae6f2fd98a0ac',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20131228',\n            'timestamp': 1388188800,\n            'duration': 3710,\n        }\n    }, {\n        'url': 'https://media.ccc.de/v/32c3-7368-shopshifting\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        event_id = self._search_regex(r\"data-id='(\\d+)'\", webpage, 'event id')\n        event_data = self._download_json('https://media.ccc.de/public/events/%s' % event_id, event_id)\n\n        formats = []\n        for recording in event_data.get('recordings', []):\n            recording_url = recording.get('recording_url')\n            if not recording_url:\n                continue\n            language = recording.get('language')\n            folder = recording.get('folder')\n            format_id = None\n            if language:\n                format_id = language\n            if folder:\n                if language:\n                    format_id += '-' + folder\n                else:\n                    format_id = folder\n            vcodec = 'h264' if 'h264' in folder else (\n                'none' if folder in ('mp3', 'opus') else None\n            )\n            formats.append({\n                'format_id': format_id,\n                'url': recording_url,\n                'width': int_or_none(recording.get('width')),\n                'height': int_or_none(recording.get('height')),\n                'filesize': int_or_none(recording.get('size'), invscale=1024 * 1024),\n                'language': language,\n                'vcodec': vcodec,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': event_id,\n            'display_id': display_id,\n            'title': event_data['title'],\n            'description': event_data.get('description'),\n            'thumbnail': event_data.get('thumb_url'),\n            'timestamp': parse_iso8601(event_data.get('date')),\n            'duration': int_or_none(event_data.get('length')),\n            'tags': event_data.get('tags'),\n            'formats': formats,\n        }\n", "comments": "#&]+)'\n#video',\n#download',\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass CCCIE(InfoExtractor):\n    IE_NAME = 'media.ccc.de'\n    _VALID_URL = r'https?://(?:www\\.)?media\\.ccc\\.de/v/(?P<id>[^/?#&]+)'\n\n    _TESTS = [{\n        'url': 'https://media.ccc.de/v/30C3_-_5443_-_en_-_saal_g_-_201312281830_-_introduction_to_processor_design_-_byterazor#video',\n        'md5': '3a1eda8f3a29515d27f5adb967d7e740',\n        'info_dict': {\n            'id': '1839',\n            'ext': 'mp4',\n            'title': 'Introduction to Processor Design',\n            'description': 'md5:df55f6d073d4ceae55aae6f2fd98a0ac',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20131228',\n            'timestamp': 1388188800,\n            'duration': 3710,\n        }\n    }, {\n        'url': 'https://media.ccc.de/v/32c3-7368-shopshifting#download',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        event_id = self._search_regex(r\"data-id='(\\d+)'\", webpage, 'event id')\n        event_data = self._download_json('https://media.ccc.de/public/events/%s' % event_id, event_id)\n\n        formats = []\n        for recording in event_data.get('recordings', []):\n            recording_url = recording.get('recording_url')\n            if not recording_url:\n                continue\n            language = recording.get('language')\n            folder = recording.get('folder')\n            format_id = None\n            if language:\n                format_id = language\n            if folder:\n                if language:\n                    format_id += '-' + folder\n                else:\n                    format_id = folder\n            vcodec = 'h264' if 'h264' in folder else (\n                'none' if folder in ('mp3', 'opus') else None\n            )\n            formats.append({\n                'format_id': format_id,\n                'url': recording_url,\n                'width': int_or_none(recording.get('width')),\n                'height': int_or_none(recording.get('height')),\n                'filesize': int_or_none(recording.get('size'), invscale=1024 * 1024),\n                'language': language,\n                'vcodec': vcodec,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': event_id,\n            'display_id': display_id,\n            'title': event_data['title'],\n            'description': event_data.get('description'),\n            'thumbnail': event_data.get('thumb_url'),\n            'timestamp': parse_iso8601(event_data.get('date')),\n            'duration': int_or_none(event_data.get('length')),\n            'tags': event_data.get('tags'),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ccc.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ccc.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}