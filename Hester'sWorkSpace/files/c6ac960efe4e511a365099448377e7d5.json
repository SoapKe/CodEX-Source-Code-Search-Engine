{"author": "HelloZeroNet", "code": "import time\nimport os\n\nfrom Db import Db\nfrom Config import config\nfrom Plugin import PluginManager\nfrom Debug import Debug\n\n\n@PluginManager.acceptPlugins\nclass ContentDb(Db):\n    def __init__(self, path):\n        Db.__init__(self, {\"db_name\": \"ContentDb\", \"tables\": {}}, path)\n        self.foreign_keys = True\n        try:\n            self.schema = self.getSchema()\n            self.checkTables()\n        except Exception, err:\n            self.log.error(\"Error loading content.db: %s, rebuilding...\" % Debug.formatException(err))\n            self.close()\n            os.unlink(path)  \n            self.schema = self.getSchema()\n            self.checkTables()\n        self.site_ids = {}\n        self.sites = {}\n\n    def getSchema(self):\n        schema = {}\n        schema[\"db_name\"] = \"ContentDb\"\n        schema[\"version\"] = 3\n        schema[\"tables\"] = {}\n\n        if not self.getTableVersion(\"site\"):\n            self.log.debug(\"Migrating from table version-less content.db\")\n            version = int(self.execute(\"PRAGMA user_version\").fetchone()[0])\n            if version > 0:\n                self.checkTables()\n                self.execute(\"INSERT INTO keyvalue ?\", {\"json_id\": 0, \"key\": \"table.site.version\", \"value\": 1})\n                self.execute(\"INSERT INTO keyvalue ?\", {\"json_id\": 0, \"key\": \"table.content.version\", \"value\": 1})\n\n        schema[\"tables\"][\"site\"] = {\n            \"cols\": [\n                [\"site_id\", \"INTEGER  PRIMARY KEY ASC NOT NULL UNIQUE\"],\n                [\"address\", \"TEXT NOT NULL\"]\n            ],\n            \"indexes\": [\n                \"CREATE UNIQUE INDEX site_address ON site (address)\"\n            ],\n            \"schema_changed\": 1\n        }\n\n        schema[\"tables\"][\"content\"] = {\n            \"cols\": [\n                [\"content_id\", \"INTEGER PRIMARY KEY UNIQUE NOT NULL\"],\n                [\"site_id\", \"INTEGER REFERENCES site (site_id) ON DELETE CASCADE\"],\n                [\"inner_path\", \"TEXT\"],\n                [\"size\", \"INTEGER\"],\n                [\"size_files\", \"INTEGER\"],\n                [\"size_files_optional\", \"INTEGER\"],\n                [\"modified\", \"INTEGER\"]\n            ],\n            \"indexes\": [\n                \"CREATE UNIQUE INDEX content_key ON content (site_id, inner_path)\",\n                \"CREATE INDEX content_modified ON content (site_id, modified)\"\n            ],\n            \"schema_changed\": 1\n        }\n\n        return schema\n\n    def initSite(self, site):\n        self.sites[site.address] = site\n\n    def needSite(self, site):\n        if site.address not in self.site_ids:\n            self.execute(\"INSERT OR IGNORE INTO site ?\", {\"address\": site.address})\n            self.site_ids = {}\n            for row in self.execute(\"SELECT * FROM site\"):\n                self.site_ids[row[\"address\"]] = row[\"site_id\"]\n        return self.site_ids[site.address]\n\n    def deleteSite(self, site):\n        site_id = self.site_ids.get(site.address, 0)\n        if site_id:\n            self.execute(\"DELETE FROM site WHERE site_id = :site_id\", {\"site_id\": site_id})\n            del self.site_ids[site.address]\n            del self.sites[site.address]\n\n    def setContent(self, site, inner_path, content, size=0):\n        self.insertOrUpdate(\"content\", {\n            \"size\": size,\n            \"size_files\": sum([val[\"size\"] for key, val in content.get(\"files\", {}).iteritems()]),\n            \"size_files_optional\": sum([val[\"size\"] for key, val in content.get(\"files_optional\", {}).iteritems()]),\n            \"modified\": int(content.get(\"modified\", 0))\n        }, {\n            \"site_id\": self.site_ids.get(site.address, 0),\n            \"inner_path\": inner_path\n        })\n\n    def deleteContent(self, site, inner_path):\n        self.execute(\"DELETE FROM content WHERE ?\", {\"site_id\": self.site_ids.get(site.address, 0), \"inner_path\": inner_path})\n\n    def loadDbDict(self, site):\n        res = self.execute(\n            \"SELECT GROUP_CONCAT(inner_path, '|') AS inner_paths FROM content WHERE ?\",\n            {\"site_id\": self.site_ids.get(site.address, 0)}\n        )\n        row = res.fetchone()\n        if row and row[\"inner_paths\"]:\n            inner_paths = row[\"inner_paths\"].split(\"|\")\n            return dict.fromkeys(inner_paths, False)\n        else:\n            return {}\n\n    def getTotalSize(self, site, ignore=None):\n        params = {\"site_id\": self.site_ids.get(site.address, 0)}\n        if ignore:\n            params[\"not__inner_path\"] = ignore\n        res = self.execute(\"SELECT SUM(size) + SUM(size_files) AS size, SUM(size_files_optional) AS size_optional FROM content WHERE ?\", params)\n        row = dict(res.fetchone())\n\n        if not row[\"size\"]:\n            row[\"size\"] = 0\n        if not row[\"size_optional\"]:\n            row[\"size_optional\"] = 0\n\n        return row[\"size\"], row[\"size_optional\"]\n\n    def listModified(self, site, since):\n        res = self.execute(\n            \"SELECT inner_path, modified FROM content WHERE site_id = :site_id AND modified > :since\",\n            {\"site_id\": self.site_ids.get(site.address, 0), \"since\": since}\n        )\n        return {row[\"inner_path\"]: row[\"modified\"] for row in res}\n\ncontent_dbs = {}\n\n\ndef getContentDb(path=None):\n    if not path:\n        path = \"%s/content.db\" % config.data_dir\n    if path not in content_dbs:\n        content_dbs[path] = ContentDb(path)\n    return content_dbs[path]\n\ngetContentDb()  \n", "comments": "  remove try    pre connect default one ", "content": "import time\nimport os\n\nfrom Db import Db\nfrom Config import config\nfrom Plugin import PluginManager\nfrom Debug import Debug\n\n\n@PluginManager.acceptPlugins\nclass ContentDb(Db):\n    def __init__(self, path):\n        Db.__init__(self, {\"db_name\": \"ContentDb\", \"tables\": {}}, path)\n        self.foreign_keys = True\n        try:\n            self.schema = self.getSchema()\n            self.checkTables()\n        except Exception, err:\n            self.log.error(\"Error loading content.db: %s, rebuilding...\" % Debug.formatException(err))\n            self.close()\n            os.unlink(path)  # Remove and try again\n            self.schema = self.getSchema()\n            self.checkTables()\n        self.site_ids = {}\n        self.sites = {}\n\n    def getSchema(self):\n        schema = {}\n        schema[\"db_name\"] = \"ContentDb\"\n        schema[\"version\"] = 3\n        schema[\"tables\"] = {}\n\n        if not self.getTableVersion(\"site\"):\n            self.log.debug(\"Migrating from table version-less content.db\")\n            version = int(self.execute(\"PRAGMA user_version\").fetchone()[0])\n            if version > 0:\n                self.checkTables()\n                self.execute(\"INSERT INTO keyvalue ?\", {\"json_id\": 0, \"key\": \"table.site.version\", \"value\": 1})\n                self.execute(\"INSERT INTO keyvalue ?\", {\"json_id\": 0, \"key\": \"table.content.version\", \"value\": 1})\n\n        schema[\"tables\"][\"site\"] = {\n            \"cols\": [\n                [\"site_id\", \"INTEGER  PRIMARY KEY ASC NOT NULL UNIQUE\"],\n                [\"address\", \"TEXT NOT NULL\"]\n            ],\n            \"indexes\": [\n                \"CREATE UNIQUE INDEX site_address ON site (address)\"\n            ],\n            \"schema_changed\": 1\n        }\n\n        schema[\"tables\"][\"content\"] = {\n            \"cols\": [\n                [\"content_id\", \"INTEGER PRIMARY KEY UNIQUE NOT NULL\"],\n                [\"site_id\", \"INTEGER REFERENCES site (site_id) ON DELETE CASCADE\"],\n                [\"inner_path\", \"TEXT\"],\n                [\"size\", \"INTEGER\"],\n                [\"size_files\", \"INTEGER\"],\n                [\"size_files_optional\", \"INTEGER\"],\n                [\"modified\", \"INTEGER\"]\n            ],\n            \"indexes\": [\n                \"CREATE UNIQUE INDEX content_key ON content (site_id, inner_path)\",\n                \"CREATE INDEX content_modified ON content (site_id, modified)\"\n            ],\n            \"schema_changed\": 1\n        }\n\n        return schema\n\n    def initSite(self, site):\n        self.sites[site.address] = site\n\n    def needSite(self, site):\n        if site.address not in self.site_ids:\n            self.execute(\"INSERT OR IGNORE INTO site ?\", {\"address\": site.address})\n            self.site_ids = {}\n            for row in self.execute(\"SELECT * FROM site\"):\n                self.site_ids[row[\"address\"]] = row[\"site_id\"]\n        return self.site_ids[site.address]\n\n    def deleteSite(self, site):\n        site_id = self.site_ids.get(site.address, 0)\n        if site_id:\n            self.execute(\"DELETE FROM site WHERE site_id = :site_id\", {\"site_id\": site_id})\n            del self.site_ids[site.address]\n            del self.sites[site.address]\n\n    def setContent(self, site, inner_path, content, size=0):\n        self.insertOrUpdate(\"content\", {\n            \"size\": size,\n            \"size_files\": sum([val[\"size\"] for key, val in content.get(\"files\", {}).iteritems()]),\n            \"size_files_optional\": sum([val[\"size\"] for key, val in content.get(\"files_optional\", {}).iteritems()]),\n            \"modified\": int(content.get(\"modified\", 0))\n        }, {\n            \"site_id\": self.site_ids.get(site.address, 0),\n            \"inner_path\": inner_path\n        })\n\n    def deleteContent(self, site, inner_path):\n        self.execute(\"DELETE FROM content WHERE ?\", {\"site_id\": self.site_ids.get(site.address, 0), \"inner_path\": inner_path})\n\n    def loadDbDict(self, site):\n        res = self.execute(\n            \"SELECT GROUP_CONCAT(inner_path, '|') AS inner_paths FROM content WHERE ?\",\n            {\"site_id\": self.site_ids.get(site.address, 0)}\n        )\n        row = res.fetchone()\n        if row and row[\"inner_paths\"]:\n            inner_paths = row[\"inner_paths\"].split(\"|\")\n            return dict.fromkeys(inner_paths, False)\n        else:\n            return {}\n\n    def getTotalSize(self, site, ignore=None):\n        params = {\"site_id\": self.site_ids.get(site.address, 0)}\n        if ignore:\n            params[\"not__inner_path\"] = ignore\n        res = self.execute(\"SELECT SUM(size) + SUM(size_files) AS size, SUM(size_files_optional) AS size_optional FROM content WHERE ?\", params)\n        row = dict(res.fetchone())\n\n        if not row[\"size\"]:\n            row[\"size\"] = 0\n        if not row[\"size_optional\"]:\n            row[\"size_optional\"] = 0\n\n        return row[\"size\"], row[\"size_optional\"]\n\n    def listModified(self, site, since):\n        res = self.execute(\n            \"SELECT inner_path, modified FROM content WHERE site_id = :site_id AND modified > :since\",\n            {\"site_id\": self.site_ids.get(site.address, 0), \"since\": since}\n        )\n        return {row[\"inner_path\"]: row[\"modified\"] for row in res}\n\ncontent_dbs = {}\n\n\ndef getContentDb(path=None):\n    if not path:\n        path = \"%s/content.db\" % config.data_dir\n    if path not in content_dbs:\n        content_dbs[path] = ContentDb(path)\n    return content_dbs[path]\n\ngetContentDb()  # Pre-connect to default one\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "ContentDb.py", "id": "c6ac960efe4e511a365099448377e7d5", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Content/ContentDb.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}