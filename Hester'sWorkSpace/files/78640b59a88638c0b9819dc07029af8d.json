{"author": "ansible", "code": " (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.inventory.group import Group\nfrom ansible.utils.vars import combine_vars, get_unique_id\n\n__all__ = ['Host']\n\n\nclass Host:\n    \n\n     __slots__ = [ 'name', 'vars', 'groups' ]\n\n    def __getstate__(self):\n        return self.serialize()\n\n    def __setstate__(self, data):\n        return self.deserialize(data)\n\n    def __eq__(self, other):\n        if not isinstance(other, Host):\n            return False\n        return self._uuid == other._uuid\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __str__(self):\n        return self.get_name()\n\n    def __repr__(self):\n        return self.get_name()\n\n    def serialize(self):\n        groups = []\n        for group in self.groups:\n            groups.append(group.serialize())\n\n        return dict(\n            name=self.name,\n            vars=self.vars.copy(),\n            address=self.address,\n            uuid=self._uuid,\n            groups=groups,\n            implicit=self.implicit,\n        )\n\n    def deserialize(self, data):\n        self.__init__(gen_uuid=False)\n\n        self.name = data.get('name')\n        self.vars = data.get('vars', dict())\n        self.address = data.get('address', '')\n        self._uuid = data.get('uuid', None)\n        self.implicit = data.get('implicit', False)\n\n        groups = data.get('groups', [])\n        for group_data in groups:\n            g = Group()\n            g.deserialize(group_data)\n            self.groups.append(g)\n\n    def __init__(self, name=None, port=None, gen_uuid=True):\n\n        self.vars = {}\n        self.groups = []\n        self._uuid = None\n\n        self.name = name\n        self.address = name\n\n        if port:\n            self.set_variable('ansible_port', int(port))\n\n        if gen_uuid:\n            self._uuid = get_unique_id()\n        self.implicit = False\n\n    def get_name(self):\n        return self.name\n\n    def populate_ancestors(self):\n         populate ancestors\n        for group in self.groups:\n            self.add_group(group)\n\n    def add_group(self, group):\n\n         populate ancestors first\n        for oldg in group.get_ancestors():\n            if oldg not in self.groups:\n                self.add_group(oldg)\n\n         actually add group\n        if group not in self.groups:\n            self.groups.append(group)\n\n    def remove_group(self, group):\n\n        if group in self.groups:\n            self.groups.remove(group)\n\n             remove exclusive ancestors, xcept all!\n            for oldg in group.get_ancestors():\n                if oldg.name != 'all':\n                    for childg in self.groups:\n                        if oldg in childg.get_ancestors():\n                            break\n                    else:\n                        self.remove_group(oldg)\n\n    def set_variable(self, key, value):\n        self.vars[key] = value\n\n    def get_groups(self):\n        return self.groups\n\n    def get_magic_vars(self):\n        results = {}\n        results['inventory_hostname'] = self.name\n        results['inventory_hostname_short'] = self.name.split('.')[0]\n        results['group_names'] = sorted([g.name for g in self.get_groups() if g.name != 'all'])\n\n        return results\n\n    def get_vars(self):\n        return combine_vars(self.vars, self.get_magic_vars())\n", "comments": "    single ansible host        (c) 2012 2014  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish      slots        name    vars    groups       populate ancestors    populate ancestors first    actually add group    remove exclusive ancestors  xcept  ", "content": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.inventory.group import Group\nfrom ansible.utils.vars import combine_vars, get_unique_id\n\n__all__ = ['Host']\n\n\nclass Host:\n    ''' a single ansible host '''\n\n    # __slots__ = [ 'name', 'vars', 'groups' ]\n\n    def __getstate__(self):\n        return self.serialize()\n\n    def __setstate__(self, data):\n        return self.deserialize(data)\n\n    def __eq__(self, other):\n        if not isinstance(other, Host):\n            return False\n        return self._uuid == other._uuid\n\n    def __ne__(self, other):\n        return not self.__eq__(other)\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __str__(self):\n        return self.get_name()\n\n    def __repr__(self):\n        return self.get_name()\n\n    def serialize(self):\n        groups = []\n        for group in self.groups:\n            groups.append(group.serialize())\n\n        return dict(\n            name=self.name,\n            vars=self.vars.copy(),\n            address=self.address,\n            uuid=self._uuid,\n            groups=groups,\n            implicit=self.implicit,\n        )\n\n    def deserialize(self, data):\n        self.__init__(gen_uuid=False)\n\n        self.name = data.get('name')\n        self.vars = data.get('vars', dict())\n        self.address = data.get('address', '')\n        self._uuid = data.get('uuid', None)\n        self.implicit = data.get('implicit', False)\n\n        groups = data.get('groups', [])\n        for group_data in groups:\n            g = Group()\n            g.deserialize(group_data)\n            self.groups.append(g)\n\n    def __init__(self, name=None, port=None, gen_uuid=True):\n\n        self.vars = {}\n        self.groups = []\n        self._uuid = None\n\n        self.name = name\n        self.address = name\n\n        if port:\n            self.set_variable('ansible_port', int(port))\n\n        if gen_uuid:\n            self._uuid = get_unique_id()\n        self.implicit = False\n\n    def get_name(self):\n        return self.name\n\n    def populate_ancestors(self):\n        # populate ancestors\n        for group in self.groups:\n            self.add_group(group)\n\n    def add_group(self, group):\n\n        # populate ancestors first\n        for oldg in group.get_ancestors():\n            if oldg not in self.groups:\n                self.add_group(oldg)\n\n        # actually add group\n        if group not in self.groups:\n            self.groups.append(group)\n\n    def remove_group(self, group):\n\n        if group in self.groups:\n            self.groups.remove(group)\n\n            # remove exclusive ancestors, xcept all!\n            for oldg in group.get_ancestors():\n                if oldg.name != 'all':\n                    for childg in self.groups:\n                        if oldg in childg.get_ancestors():\n                            break\n                    else:\n                        self.remove_group(oldg)\n\n    def set_variable(self, key, value):\n        self.vars[key] = value\n\n    def get_groups(self):\n        return self.groups\n\n    def get_magic_vars(self):\n        results = {}\n        results['inventory_hostname'] = self.name\n        results['inventory_hostname_short'] = self.name.split('.')[0]\n        results['group_names'] = sorted([g.name for g in self.get_groups() if g.name != 'all'])\n\n        return results\n\n    def get_vars(self):\n        return combine_vars(self.vars, self.get_magic_vars())\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "host.py", "id": "78640b59a88638c0b9819dc07029af8d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/inventory/host.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}