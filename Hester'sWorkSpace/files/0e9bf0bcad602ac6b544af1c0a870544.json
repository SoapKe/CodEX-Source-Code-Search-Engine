{"author": "donnemartin", "code": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestSolution(object):\n\n    def test_count_sentence_fit(self):\n        solution = Solution()\n        assert_raises(TypeError, solution.count_sentence_fit, \n                      None, None, None)\n        assert_raises(ValueError, solution.count_sentence_fit, \n                      'abc', rows=-1, cols=-1)\n        sentence = [\"hello\", \"world\"]\n        expected = 1\n        assert_equal(solution.count_sentence_fit(sentence, rows=2, cols=8),\n                     expected)\n        sentence = [\"a\", \"bcd\", \"e\"]\n        expected = 2\n        assert_equal(solution.count_sentence_fit(sentence, rows=3, cols=6),\n                     expected)\n        sentence = [\"I\", \"had\", \"apple\", \"pie\"]\n        expected = 1\n        assert_equal(solution.count_sentence_fit(sentence, rows=4, cols=5),\n                     expected)\n        print('Success: test_count_sentence_fit')\n\n\ndef main():\n    test = TestSolution()\n    test.test_count_sentence_fit()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestSolution(object):\n\n    def test_count_sentence_fit(self):\n        solution = Solution()\n        assert_raises(TypeError, solution.count_sentence_fit, \n                      None, None, None)\n        assert_raises(ValueError, solution.count_sentence_fit, \n                      'abc', rows=-1, cols=-1)\n        sentence = [\"hello\", \"world\"]\n        expected = 1\n        assert_equal(solution.count_sentence_fit(sentence, rows=2, cols=8),\n                     expected)\n        sentence = [\"a\", \"bcd\", \"e\"]\n        expected = 2\n        assert_equal(solution.count_sentence_fit(sentence, rows=3, cols=6),\n                     expected)\n        sentence = [\"I\", \"had\", \"apple\", \"pie\"]\n        expected = 1\n        assert_equal(solution.count_sentence_fit(sentence, rows=4, cols=5),\n                     expected)\n        print('Success: test_count_sentence_fit')\n\n\ndef main():\n    test = TestSolution()\n    test.test_count_sentence_fit()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_count_sentence_fit.py", "id": "0e9bf0bcad602ac6b544af1c0a870544", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/online_judges/sentence_screen_fit/test_count_sentence_fit.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}