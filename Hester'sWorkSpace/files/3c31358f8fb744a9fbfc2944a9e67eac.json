{"author": "odoo", "code": "from odoo.addons.account.tests.account_test_users import AccountTestUsers\nimport datetime\n\n\nclass TestAccountCustomerInvoice(AccountTestUsers):\n\n    def test_customer_invoice(self):\n        \n        \n        self.res_partner_bank_0 = self.env['res.partner.bank'].sudo(self.account_manager.id).create(dict(\n            acc_type='bank',\n            company_id=self.main_company.id,\n            partner_id=self.main_partner.id,\n            acc_number='123456789',\n            bank_id=self.main_bank.id,\n        ))\n\n        \n        \n        self.account_invoice_obj = self.env['account.invoice']\n        self.payment_term = self.env.ref('account.account_payment_term_advance')\n        self.journalrec = self.env['account.journal'].search([('type', '=', 'sale')])[0]\n        self.partner3 = self.env.ref('base.res_partner_3')\n        account_user_type = self.env.ref('account.data_account_type_receivable')\n        self.ova = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_assets').id)], limit=1)\n\n        \n        self.account_rec1_id = self.account_model.sudo(self.account_manager.id).create(dict(\n            code=\"cust_acc\",\n            name=\"customer account\",\n            user_type_id=account_user_type.id,\n            reconcile=True,\n        ))\n\n        invoice_line_data = [\n            (0, 0,\n                {\n                    'product_id': self.env.ref('product.product_product_5').id,\n                    'quantity': 10.0,\n                    'account_id': self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1).id,\n                    'name': 'product test 5',\n                    'price_unit': 100.00,\n                }\n             )\n        ]\n\n        self.account_invoice_customer0 = self.account_invoice_obj.sudo(self.account_user.id).create(dict(\n            name=\"Test Customer Invoice\",\n            reference_type=\"none\",\n            payment_term_id=self.payment_term.id,\n            journal_id=self.journalrec.id,\n            partner_id=self.partner3.id,\n            account_id=self.account_rec1_id.id,\n            invoice_line_ids=invoice_line_data\n        ))\n\n        \n        invoice_tax_line = {\n            'name': 'Test Tax for Customer Invoice',\n            'manual': 1,\n            'amount': 9050,\n            'account_id': self.ova.id,\n            'invoice_id': self.account_invoice_customer0.id,\n        }\n        tax = self.env['account.invoice.tax'].create(invoice_tax_line)\n        assert tax, \"Tax has not been assigned correctly\"\n\n        total_before_confirm = self.partner3.total_invoiced\n\n        \n        self.assertEquals(self.account_invoice_customer0.state, 'draft')\n\n        \n        self.assertEquals(len(self.account_invoice_customer0.move_id), 0)\n\n        \n        self.account_invoice_customer0.action_invoice_open()\n\n        \n        self.assertEquals(self.account_invoice_customer0.state, 'open')\n\n        \n        assert self.account_invoice_customer0.move_id, \"Move not created for open invoice\"\n\n        \n        self.account_invoice_customer0.pay_and_reconcile(self.env['account.journal'].search([('type', '=', 'bank')], limit=1), 10050.0)\n\n        \n        assert (self.account_invoice_customer0.state == 'paid'), \"Invoice is not in Paid state\"\n\n        total_after_confirm = self.partner3.total_invoiced\n        self.assertEquals(total_after_confirm - total_before_confirm, self.account_invoice_customer0.amount_untaxed_signed)\n\n        \n        invoice_refund_obj = self.env['account.invoice.refund']\n        self.account_invoice_refund_0 = invoice_refund_obj.create(dict(\n            description='Credit Note for China Export',\n            date=datetime.date.today(),\n            filter_refund='refund'\n        ))\n\n        \n        self.account_invoice_refund_0.invoice_refund()\n", "comments": "  i create bank detail using manager access rights    account manager create bank details     test user rights make invoicing payment accountant     create customer invoice   adviser create account    i manually assign tax invoice    i check initially customer invoice  draft  state    i check move attached invoice    i validate invoice creating    i check invoice state  open     i check move attached invoice    i totally pay invoice    i verify invoice paid state    i created credit note using add credit note button    i clicked add credit note button  ", "content": "from odoo.addons.account.tests.account_test_users import AccountTestUsers\nimport datetime\n\n\nclass TestAccountCustomerInvoice(AccountTestUsers):\n\n    def test_customer_invoice(self):\n        # I will create bank detail with using manager access rights\n        # because account manager can only create bank details.\n        self.res_partner_bank_0 = self.env['res.partner.bank'].sudo(self.account_manager.id).create(dict(\n            acc_type='bank',\n            company_id=self.main_company.id,\n            partner_id=self.main_partner.id,\n            acc_number='123456789',\n            bank_id=self.main_bank.id,\n        ))\n\n        # Test with that user which have rights to make Invoicing and payment and who is accountant.\n        # Create a customer invoice\n        self.account_invoice_obj = self.env['account.invoice']\n        self.payment_term = self.env.ref('account.account_payment_term_advance')\n        self.journalrec = self.env['account.journal'].search([('type', '=', 'sale')])[0]\n        self.partner3 = self.env.ref('base.res_partner_3')\n        account_user_type = self.env.ref('account.data_account_type_receivable')\n        self.ova = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_current_assets').id)], limit=1)\n\n        #only adviser can create an account\n        self.account_rec1_id = self.account_model.sudo(self.account_manager.id).create(dict(\n            code=\"cust_acc\",\n            name=\"customer account\",\n            user_type_id=account_user_type.id,\n            reconcile=True,\n        ))\n\n        invoice_line_data = [\n            (0, 0,\n                {\n                    'product_id': self.env.ref('product.product_product_5').id,\n                    'quantity': 10.0,\n                    'account_id': self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1).id,\n                    'name': 'product test 5',\n                    'price_unit': 100.00,\n                }\n             )\n        ]\n\n        self.account_invoice_customer0 = self.account_invoice_obj.sudo(self.account_user.id).create(dict(\n            name=\"Test Customer Invoice\",\n            reference_type=\"none\",\n            payment_term_id=self.payment_term.id,\n            journal_id=self.journalrec.id,\n            partner_id=self.partner3.id,\n            account_id=self.account_rec1_id.id,\n            invoice_line_ids=invoice_line_data\n        ))\n\n        # I manually assign tax on invoice\n        invoice_tax_line = {\n            'name': 'Test Tax for Customer Invoice',\n            'manual': 1,\n            'amount': 9050,\n            'account_id': self.ova.id,\n            'invoice_id': self.account_invoice_customer0.id,\n        }\n        tax = self.env['account.invoice.tax'].create(invoice_tax_line)\n        assert tax, \"Tax has not been assigned correctly\"\n\n        total_before_confirm = self.partner3.total_invoiced\n\n        # I check that Initially customer invoice is in the \"Draft\" state\n        self.assertEquals(self.account_invoice_customer0.state, 'draft')\n\n        # I check that there is no move attached to the invoice\n        self.assertEquals(len(self.account_invoice_customer0.move_id), 0)\n\n        # I validate invoice by creating on\n        self.account_invoice_customer0.action_invoice_open()\n\n        # I check that the invoice state is \"Open\"\n        self.assertEquals(self.account_invoice_customer0.state, 'open')\n\n        # I check that now there is a move attached to the invoice\n        assert self.account_invoice_customer0.move_id, \"Move not created for open invoice\"\n\n        # I totally pay the Invoice\n        self.account_invoice_customer0.pay_and_reconcile(self.env['account.journal'].search([('type', '=', 'bank')], limit=1), 10050.0)\n\n        # I verify that invoice is now in Paid state\n        assert (self.account_invoice_customer0.state == 'paid'), \"Invoice is not in Paid state\"\n\n        total_after_confirm = self.partner3.total_invoiced\n        self.assertEquals(total_after_confirm - total_before_confirm, self.account_invoice_customer0.amount_untaxed_signed)\n\n        # I created a credit note Using Add Credit Note Button\n        invoice_refund_obj = self.env['account.invoice.refund']\n        self.account_invoice_refund_0 = invoice_refund_obj.create(dict(\n            description='Credit Note for China Export',\n            date=datetime.date.today(),\n            filter_refund='refund'\n        ))\n\n        # I clicked on Add Credit Note button.\n        self.account_invoice_refund_0.invoice_refund()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_account_customer_invoice.py", "id": "3c31358f8fb744a9fbfc2944a9e67eac", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_account_customer_invoice.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}