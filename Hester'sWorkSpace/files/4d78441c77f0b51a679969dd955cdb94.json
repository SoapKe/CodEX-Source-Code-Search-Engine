{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    determine_ext,\n)\n\n\nclass BpbIE(InfoExtractor):\n    IE_DESC = 'Bundeszentrale f\u00fcr politische Bildung'\n    _VALID_URL = r'https?://(?:www\\.)?bpb\\.de/mediathek/(?P<id>[0-9]+)/'\n\n    _TEST = {\n        'url': 'http://www.bpb.de/mediathek/297/joachim-gauck-zu-1989-und-die-erinnerung-an-die-ddr',\n        \n        'md5': 'c4f84c8a8044ca9ff68bb8441d300b3f',\n        'info_dict': {\n            'id': '297',\n            'ext': 'mp4',\n            'title': 'Joachim Gauck zu 1989 und die Erinnerung an die DDR',\n            'description': 'Joachim Gauck, erster Beauftragter f\u00fcr die Stasi-Unterlagen, spricht auf dem Geschichtsforum \u00fcber die friedliche Revolution 1989 und eine \"gewisse Traurigkeit\" im Umgang mit der DDR-Vergangenheit.'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            r'<h2 class=\"white\">(.*?)</h2>', webpage, 'title')\n        video_info_dicts = re.findall(\n            r\"({\\s*src\\s*:\\s*'https?://film\\.bpb\\.de/[^}]+})\", webpage)\n\n        formats = []\n        for video_info in video_info_dicts:\n            video_info = self._parse_json(\n                video_info, video_id, transform_source=js_to_json, fatal=False)\n            if not video_info:\n                continue\n            video_url = video_info.get('src')\n            if not video_url:\n                continue\n            quality = 'high' if '_high' in video_url else 'low'\n            formats.append({\n                'url': video_url,\n                'preference': 10 if quality == 'high' else 0,\n                'format_note': quality,\n                'format_id': '%s-%s' % (quality, determine_ext(video_url)),\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': self._og_search_description(webpage),\n        }\n", "comments": "# coding: utf-8\n# md5 fails in Python 2.6 due to buggy server response and wrong handling of urllib2\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    js_to_json,\n    determine_ext,\n)\n\n\nclass BpbIE(InfoExtractor):\n    IE_DESC = 'Bundeszentrale f\u00fcr politische Bildung'\n    _VALID_URL = r'https?://(?:www\\.)?bpb\\.de/mediathek/(?P<id>[0-9]+)/'\n\n    _TEST = {\n        'url': 'http://www.bpb.de/mediathek/297/joachim-gauck-zu-1989-und-die-erinnerung-an-die-ddr',\n        # md5 fails in Python 2.6 due to buggy server response and wrong handling of urllib2\n        'md5': 'c4f84c8a8044ca9ff68bb8441d300b3f',\n        'info_dict': {\n            'id': '297',\n            'ext': 'mp4',\n            'title': 'Joachim Gauck zu 1989 und die Erinnerung an die DDR',\n            'description': 'Joachim Gauck, erster Beauftragter f\u00fcr die Stasi-Unterlagen, spricht auf dem Geschichtsforum \u00fcber die friedliche Revolution 1989 und eine \"gewisse Traurigkeit\" im Umgang mit der DDR-Vergangenheit.'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            r'<h2 class=\"white\">(.*?)</h2>', webpage, 'title')\n        video_info_dicts = re.findall(\n            r\"({\\s*src\\s*:\\s*'https?://film\\.bpb\\.de/[^}]+})\", webpage)\n\n        formats = []\n        for video_info in video_info_dicts:\n            video_info = self._parse_json(\n                video_info, video_id, transform_source=js_to_json, fatal=False)\n            if not video_info:\n                continue\n            video_url = video_info.get('src')\n            if not video_url:\n                continue\n            quality = 'high' if '_high' in video_url else 'low'\n            formats.append({\n                'url': video_url,\n                'preference': 10 if quality == 'high' else 0,\n                'format_note': quality,\n                'format_id': '%s-%s' % (quality, determine_ext(video_url)),\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'title': title,\n            'description': self._og_search_description(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "bpb.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/bpb.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}