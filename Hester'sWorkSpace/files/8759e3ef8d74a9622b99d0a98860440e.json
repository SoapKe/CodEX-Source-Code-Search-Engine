{"author": "ansible", "code": "\n\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ovh_ip_loadbalancing_backend\nshort_description: Manage OVH IP LoadBalancing backends\ndescription:\n    - Manage OVH (French European hosting provider) LoadBalancing IP backends\nversion_added: \"2.2\"\nauthor: Pascal HERAUD @pascalheraud\nnotes:\n    - Uses the python OVH Api U(https://github.com/ovh/python-ovh).\n      You have to create an application (a key and secret) with a consummer\n      key as described into U(https://eu.api.ovh.com/g934.first_step_with_api)\nrequirements:\n    - ovh >  0.3.5\noptions:\n    name:\n        required: true\n        description:\n            - Name of the LoadBalancing internal name (ip-X.X.X.X)\n    backend:\n        required: true\n        description:\n            - The IP address of the backend to update / modify / delete\n    state:\n        default: present\n        choices: ['present', 'absent']\n        description:\n            - Determines whether the backend is to be created/modified\n              or deleted\n    probe:\n        default: 'none'\n        choices: ['none', 'http', 'icmp' , 'oco']\n        description:\n            - Determines the type of probe to use for this backend\n    weight:\n        default: 8\n        description:\n            - Determines the weight for this backend\n    endpoint:\n        required: true\n        description:\n            - The endpoint to use ( for instance ovh-eu)\n    application_key:\n        required: true\n        description:\n            - The applicationKey to use\n    application_secret:\n        required: true\n        description:\n            - The application secret to use\n    consumer_key:\n        required: true\n        description:\n            - The consumer key to use\n    timeout:\n        default: 120\n        description:\n            - The timeout in seconds used to wait for a task to be\n              completed.\n\n'''\n\nEXAMPLES = '''\n\n\n- ovh_ip_loadbalancing:\n    name: ip-1.1.1.1\n    backend: 212.1.1.1\n    state: present\n    probe: none\n    weight: 8\n    endpoint: ovh-eu\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n\n\n- ovh_ip_loadbalancing:\n    name: ip-1.1.1.1\n    backend: 212.1.1.1\n    state: absent\n    endpoint: ovh-eu\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n'''\n\nRETURN = '''\n'''\n\nimport time\n\ntry:\n    import ovh\n    import ovh.exceptions\n    from ovh.exceptions import APIError\n    HAS_OVH = True\nexcept ImportError:\n    HAS_OVH = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef getOvhClient(ansibleModule):\n    endpoint = ansibleModule.params.get('endpoint')\n    application_key = ansibleModule.params.get('application_key')\n    application_secret = ansibleModule.params.get('application_secret')\n    consumer_key = ansibleModule.params.get('consumer_key')\n\n    return ovh.Client(\n        endpoint=endpoint,\n        application_key=application_key,\n        application_secret=application_secret,\n        consumer_key=consumer_key\n    )\n\n\ndef waitForNoTask(client, name, timeout):\n    currentTimeout = timeout\n    while len(client.get('/ip/loadBalancing/{0}/task'.format(name))) > 0:\n        time.sleep(1)  \n        currentTimeout -= 1\n        if currentTimeout < 0:\n            return False\n    return True\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            backend=dict(required=True),\n            weight=dict(default=8, type='int'),\n            probe=dict(default='none',\n                       choices=['none', 'http', 'icmp', 'oco']),\n            state=dict(default='present', choices=['present', 'absent']),\n            endpoint=dict(required=True),\n            application_key=dict(required=True, no_log=True),\n            application_secret=dict(required=True, no_log=True),\n            consumer_key=dict(required=True, no_log=True),\n            timeout=dict(default=120, type='int')\n        )\n    )\n\n    if not HAS_OVH:\n        module.fail_json(msg='ovh-api python module'\n                         'is required to run this module ')\n\n    \n    name = module.params.get('name')\n    state = module.params.get('state')\n    backend = module.params.get('backend')\n    weight = module.params.get('weight')\n    probe = module.params.get('probe')\n    timeout = module.params.get('timeout')\n\n    \n    client = getOvhClient(module)\n\n    \n    try:\n        loadBalancings = client.get('/ip/loadBalancing')\n    except APIError as apiError:\n        module.fail_json(\n            msg='Unable to call OVH api for getting the list of loadBalancing, '\n                'check application key, secret, consumerkey and parameters. '\n                'Error returned by OVH api was : {0}'.format(apiError))\n\n    if name not in loadBalancings:\n        module.fail_json(msg='IP LoadBalancing {0} does not exist'.format(name))\n\n    \n    try:\n        if not waitForNoTask(client, name, timeout):\n            module.fail_json(\n                msg='Timeout of {0} seconds while waiting for no pending '\n                    'tasks before executing the module '.format(timeout))\n    except APIError as apiError:\n        module.fail_json(\n            msg='Unable to call OVH api for getting the list of pending tasks '\n                'of the loadBalancing, check application key, secret, consumerkey '\n                'and parameters. Error returned by OVH api was : {0}'\n                .format(apiError))\n\n    try:\n        backends = client.get('/ip/loadBalancing/{0}/backend'.format(name))\n    except APIError as apiError:\n        module.fail_json(\n            msg='Unable to call OVH api for getting the list of backends '\n                'of the loadBalancing, check application key, secret, consumerkey '\n                'and parameters. Error returned by OVH api was : {0}'\n            .format(apiError))\n\n    backendExists = backend in backends\n    moduleChanged = False\n    if state == \"absent\":\n        if backendExists:\n            \n            try:\n                client.delete(\n                    '/ip/loadBalancing/{0}/backend/{1}'.format(name, backend))\n                if not waitForNoTask(client, name, timeout):\n                    module.fail_json(\n                        msg='Timeout of {0} seconds while waiting for completion '\n                            'of removing backend task'.format(timeout))\n            except APIError as apiError:\n                module.fail_json(\n                    msg='Unable to call OVH api for deleting the backend, '\n                        'check application key, secret, consumerkey and '\n                        'parameters. Error returned by OVH api was : {0}'\n                        .format(apiError))\n            moduleChanged = True\n    else:\n        if backendExists:\n            \n            try:\n                backendProperties = client.get(\n                    '/ip/loadBalancing/{0}/backend/{1}'.format(name, backend))\n            except APIError as apiError:\n                module.fail_json(\n                    msg='Unable to call OVH api for getting the backend properties, '\n                        'check application key, secret, consumerkey and '\n                        'parameters. Error returned by OVH api was : {0}'\n                        .format(apiError))\n\n            if (backendProperties['weight'] != weight):\n                \n                try:\n                    client.post(\n                        '/ip/loadBalancing/{0}/backend/{1}/setWeight'\n                        .format(name, backend), weight=weight)\n                    if not waitForNoTask(client, name, timeout):\n                        module.fail_json(\n                            msg='Timeout of {0} seconds while waiting for completion '\n                                'of setWeight to backend task'\n                                .format(timeout))\n                except APIError as apiError:\n                    module.fail_json(\n                        msg='Unable to call OVH api for updating the weight of the '\n                            'backend, check application key, secret, consumerkey '\n                            'and parameters. Error returned by OVH api was : {0}'\n                            .format(apiError))\n                moduleChanged = True\n\n            if (backendProperties['probe'] != probe):\n                \n                backendProperties['probe'] = probe\n                try:\n                    client.put(\n                        '/ip/loadBalancing/{0}/backend/{1}'\n                        .format(name, backend), probe=probe)\n                    if not waitForNoTask(client, name, timeout):\n                        module.fail_json(\n                            msg='Timeout of {0} seconds while waiting for completion of '\n                                'setProbe to backend task'\n                                .format(timeout))\n                except APIError as apiError:\n                    module.fail_json(\n                        msg='Unable to call OVH api for updating the propbe of '\n                            'the backend, check application key, secret, '\n                            'consumerkey and parameters. Error returned by OVH api '\n                            'was : {0}'\n                            .format(apiError))\n                moduleChanged = True\n\n        else:\n            \n            try:\n                try:\n                    client.post('/ip/loadBalancing/{0}/backend'.format(name),\n                                ipBackend=backend, probe=probe, weight=weight)\n                except APIError as apiError:\n                    module.fail_json(\n                        msg='Unable to call OVH api for creating the backend, check '\n                            'application key, secret, consumerkey and parameters. '\n                            'Error returned by OVH api was : {0}'\n                            .format(apiError))\n\n                if not waitForNoTask(client, name, timeout):\n                    module.fail_json(\n                        msg='Timeout of {0} seconds while waiting for completion of '\n                            'backend creation task'.format(timeout))\n            except APIError as apiError:\n                module.fail_json(\n                    msg='Unable to call OVH api for creating the backend, check '\n                        'application key, secret, consumerkey and parameters. '\n                        'Error returned by OVH api was : {0}'.format(apiError))\n            moduleChanged = True\n\n    module.exit_json(changed=moduleChanged)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ovh ip loadbalancing backend short description  manage ovh ip loadbalancing backends description        manage ovh (french european hosting provider) loadbalancing ip backends version added   2 2  author  pascal heraud  pascalheraud notes        uses python ovh api u(https   github com ovh python ovh)        you create application (a key secret) consummer       key described u(https   eu api ovh com g934 first step api) requirements        ovh    0 3 5 options      name          required  true         description                name loadbalancing internal name (ip x x x x)     backend          required  true         description                the ip address backend update   modify   delete     state          default  present         choices    present    absent           description                determines whether backend created modified               deleted     probe          default   none          choices    none    http    icmp     oco           description                determines type probe use backend     weight          default  8         description                determines weight backend     endpoint          required  true         description                the endpoint use ( instance ovh eu)     application key          required  true         description                the applicationkey use     application secret          required  true         description                the application secret use     consumer key          required  true         description                the consumer key use     timeout          default  120         description                the timeout seconds used wait task               completed        examples         adds modify backend  212 1 1 1    loadbalancing  ip 1 1 1 1    ovh ip loadbalancing      name  ip 1 1 1 1     backend  212 1 1 1     state  present     probe  none     weight  8     endpoint  ovh eu     application key  yourkey     application secret  yoursecret     consumer key  yourconsumerkey    removes backend  212 1 1 1  loadbalancing  ip 1 1 1 1    ovh ip loadbalancing      name  ip 1 1 1 1     backend  212 1 1 1     state  absent     endpoint  ovh eu     application key  yourkey     application secret  yoursecret     consumer key  yourconsumerkey      return               usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    adds modify backend  212 1 1 1     loadbalancing  ip 1 1 1 1     removes backend  212 1 1 1  loadbalancing  ip 1 1 1 1     delay 1 sec    get parameters    connect ovh api    check load balancing exists    check task pending going    remove backend    get properties    change weight    change probe    creates backend ", "content": "#!/usr/bin/python\n\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ovh_ip_loadbalancing_backend\nshort_description: Manage OVH IP LoadBalancing backends\ndescription:\n    - Manage OVH (French European hosting provider) LoadBalancing IP backends\nversion_added: \"2.2\"\nauthor: Pascal HERAUD @pascalheraud\nnotes:\n    - Uses the python OVH Api U(https://github.com/ovh/python-ovh).\n      You have to create an application (a key and secret) with a consummer\n      key as described into U(https://eu.api.ovh.com/g934.first_step_with_api)\nrequirements:\n    - ovh >  0.3.5\noptions:\n    name:\n        required: true\n        description:\n            - Name of the LoadBalancing internal name (ip-X.X.X.X)\n    backend:\n        required: true\n        description:\n            - The IP address of the backend to update / modify / delete\n    state:\n        default: present\n        choices: ['present', 'absent']\n        description:\n            - Determines whether the backend is to be created/modified\n              or deleted\n    probe:\n        default: 'none'\n        choices: ['none', 'http', 'icmp' , 'oco']\n        description:\n            - Determines the type of probe to use for this backend\n    weight:\n        default: 8\n        description:\n            - Determines the weight for this backend\n    endpoint:\n        required: true\n        description:\n            - The endpoint to use ( for instance ovh-eu)\n    application_key:\n        required: true\n        description:\n            - The applicationKey to use\n    application_secret:\n        required: true\n        description:\n            - The application secret to use\n    consumer_key:\n        required: true\n        description:\n            - The consumer key to use\n    timeout:\n        default: 120\n        description:\n            - The timeout in seconds used to wait for a task to be\n              completed.\n\n'''\n\nEXAMPLES = '''\n# Adds or modify the backend '212.1.1.1' to a\n# loadbalancing 'ip-1.1.1.1'\n- ovh_ip_loadbalancing:\n    name: ip-1.1.1.1\n    backend: 212.1.1.1\n    state: present\n    probe: none\n    weight: 8\n    endpoint: ovh-eu\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n\n# Removes a backend '212.1.1.1' from a loadbalancing 'ip-1.1.1.1'\n- ovh_ip_loadbalancing:\n    name: ip-1.1.1.1\n    backend: 212.1.1.1\n    state: absent\n    endpoint: ovh-eu\n    application_key: yourkey\n    application_secret: yoursecret\n    consumer_key: yourconsumerkey\n'''\n\nRETURN = '''\n'''\n\nimport time\n\ntry:\n    import ovh\n    import ovh.exceptions\n    from ovh.exceptions import APIError\n    HAS_OVH = True\nexcept ImportError:\n    HAS_OVH = False\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef getOvhClient(ansibleModule):\n    endpoint = ansibleModule.params.get('endpoint')\n    application_key = ansibleModule.params.get('application_key')\n    application_secret = ansibleModule.params.get('application_secret')\n    consumer_key = ansibleModule.params.get('consumer_key')\n\n    return ovh.Client(\n        endpoint=endpoint,\n        application_key=application_key,\n        application_secret=application_secret,\n        consumer_key=consumer_key\n    )\n\n\ndef waitForNoTask(client, name, timeout):\n    currentTimeout = timeout\n    while len(client.get('/ip/loadBalancing/{0}/task'.format(name))) > 0:\n        time.sleep(1)  # Delay for 1 sec\n        currentTimeout -= 1\n        if currentTimeout < 0:\n            return False\n    return True\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            backend=dict(required=True),\n            weight=dict(default=8, type='int'),\n            probe=dict(default='none',\n                       choices=['none', 'http', 'icmp', 'oco']),\n            state=dict(default='present', choices=['present', 'absent']),\n            endpoint=dict(required=True),\n            application_key=dict(required=True, no_log=True),\n            application_secret=dict(required=True, no_log=True),\n            consumer_key=dict(required=True, no_log=True),\n            timeout=dict(default=120, type='int')\n        )\n    )\n\n    if not HAS_OVH:\n        module.fail_json(msg='ovh-api python module'\n                         'is required to run this module ')\n\n    # Get parameters\n    name = module.params.get('name')\n    state = module.params.get('state')\n    backend = module.params.get('backend')\n    weight = module.params.get('weight')\n    probe = module.params.get('probe')\n    timeout = module.params.get('timeout')\n\n    # Connect to OVH API\n    client = getOvhClient(module)\n\n    # Check that the load balancing exists\n    try:\n        loadBalancings = client.get('/ip/loadBalancing')\n    except APIError as apiError:\n        module.fail_json(\n            msg='Unable to call OVH api for getting the list of loadBalancing, '\n                'check application key, secret, consumerkey and parameters. '\n                'Error returned by OVH api was : {0}'.format(apiError))\n\n    if name not in loadBalancings:\n        module.fail_json(msg='IP LoadBalancing {0} does not exist'.format(name))\n\n    # Check that no task is pending before going on\n    try:\n        if not waitForNoTask(client, name, timeout):\n            module.fail_json(\n                msg='Timeout of {0} seconds while waiting for no pending '\n                    'tasks before executing the module '.format(timeout))\n    except APIError as apiError:\n        module.fail_json(\n            msg='Unable to call OVH api for getting the list of pending tasks '\n                'of the loadBalancing, check application key, secret, consumerkey '\n                'and parameters. Error returned by OVH api was : {0}'\n                .format(apiError))\n\n    try:\n        backends = client.get('/ip/loadBalancing/{0}/backend'.format(name))\n    except APIError as apiError:\n        module.fail_json(\n            msg='Unable to call OVH api for getting the list of backends '\n                'of the loadBalancing, check application key, secret, consumerkey '\n                'and parameters. Error returned by OVH api was : {0}'\n            .format(apiError))\n\n    backendExists = backend in backends\n    moduleChanged = False\n    if state == \"absent\":\n        if backendExists:\n            # Remove backend\n            try:\n                client.delete(\n                    '/ip/loadBalancing/{0}/backend/{1}'.format(name, backend))\n                if not waitForNoTask(client, name, timeout):\n                    module.fail_json(\n                        msg='Timeout of {0} seconds while waiting for completion '\n                            'of removing backend task'.format(timeout))\n            except APIError as apiError:\n                module.fail_json(\n                    msg='Unable to call OVH api for deleting the backend, '\n                        'check application key, secret, consumerkey and '\n                        'parameters. Error returned by OVH api was : {0}'\n                        .format(apiError))\n            moduleChanged = True\n    else:\n        if backendExists:\n            # Get properties\n            try:\n                backendProperties = client.get(\n                    '/ip/loadBalancing/{0}/backend/{1}'.format(name, backend))\n            except APIError as apiError:\n                module.fail_json(\n                    msg='Unable to call OVH api for getting the backend properties, '\n                        'check application key, secret, consumerkey and '\n                        'parameters. Error returned by OVH api was : {0}'\n                        .format(apiError))\n\n            if (backendProperties['weight'] != weight):\n                # Change weight\n                try:\n                    client.post(\n                        '/ip/loadBalancing/{0}/backend/{1}/setWeight'\n                        .format(name, backend), weight=weight)\n                    if not waitForNoTask(client, name, timeout):\n                        module.fail_json(\n                            msg='Timeout of {0} seconds while waiting for completion '\n                                'of setWeight to backend task'\n                                .format(timeout))\n                except APIError as apiError:\n                    module.fail_json(\n                        msg='Unable to call OVH api for updating the weight of the '\n                            'backend, check application key, secret, consumerkey '\n                            'and parameters. Error returned by OVH api was : {0}'\n                            .format(apiError))\n                moduleChanged = True\n\n            if (backendProperties['probe'] != probe):\n                # Change probe\n                backendProperties['probe'] = probe\n                try:\n                    client.put(\n                        '/ip/loadBalancing/{0}/backend/{1}'\n                        .format(name, backend), probe=probe)\n                    if not waitForNoTask(client, name, timeout):\n                        module.fail_json(\n                            msg='Timeout of {0} seconds while waiting for completion of '\n                                'setProbe to backend task'\n                                .format(timeout))\n                except APIError as apiError:\n                    module.fail_json(\n                        msg='Unable to call OVH api for updating the propbe of '\n                            'the backend, check application key, secret, '\n                            'consumerkey and parameters. Error returned by OVH api '\n                            'was : {0}'\n                            .format(apiError))\n                moduleChanged = True\n\n        else:\n            # Creates backend\n            try:\n                try:\n                    client.post('/ip/loadBalancing/{0}/backend'.format(name),\n                                ipBackend=backend, probe=probe, weight=weight)\n                except APIError as apiError:\n                    module.fail_json(\n                        msg='Unable to call OVH api for creating the backend, check '\n                            'application key, secret, consumerkey and parameters. '\n                            'Error returned by OVH api was : {0}'\n                            .format(apiError))\n\n                if not waitForNoTask(client, name, timeout):\n                    module.fail_json(\n                        msg='Timeout of {0} seconds while waiting for completion of '\n                            'backend creation task'.format(timeout))\n            except APIError as apiError:\n                module.fail_json(\n                    msg='Unable to call OVH api for creating the backend, check '\n                        'application key, secret, consumerkey and parameters. '\n                        'Error returned by OVH api was : {0}'.format(apiError))\n            moduleChanged = True\n\n    module.exit_json(changed=moduleChanged)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ovh_ip_loadbalancing_backend.py", "id": "8759e3ef8d74a9622b99d0a98860440e", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/ovh/ovh_ip_loadbalancing_backend.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}