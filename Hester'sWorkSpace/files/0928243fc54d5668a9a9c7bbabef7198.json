{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_iapp_service import Parameters\n    from library.bigip_iapp_service import ModuleManager\n    from library.bigip_iapp_service import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_iapp_service import Parameters\n        from ansible.modules.network.f5.bigip_iapp_service import ModuleManager\n        from ansible.modules.network.f5.bigip_iapp_service import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n\n    def test_module_parameters_keys(self):\n        args = load_fixture('create_iapp_service_parameters_f5_http.json')\n        p = Parameters(params=args)\n\n         Assert the top-level keys\n        assert p.name == 'http_example'\n        assert p.partition == 'Common'\n        assert p.template == '/Common/f5.http'\n        assert p.deviceGroup == 'none'\n        assert p.inheritedTrafficGroup == 'true'\n        assert p.inheritedDevicegroup == 'true'\n        assert p.traffic_group == '/Common/traffic-group-local-only'\n\n    def test_module_parameters_lists(self):\n        args = load_fixture('create_iapp_service_parameters_f5_http.json')\n        p = Parameters(params=args)\n\n        assert 'lists' in p._values\n\n        assert p.lists[0]['name'] == 'irules__irules'\n        assert p.lists[0]['encrypted'] == 'no'\n        assert len(p.lists[0]['value']) == 1\n        assert p.lists[0]['value'][0] == '/Common/lgyft'\n\n        assert p.lists[1]['name'] == 'net__client_vlan'\n        assert p.lists[1]['encrypted'] == 'no'\n        assert len(p.lists[1]['value']) == 1\n        assert p.lists[1]['value'][0] == '/Common/net2'\n\n    def test_module_parameters_tables(self):\n        args = load_fixture('create_iapp_service_parameters_f5_http.json')\n        p = Parameters(params=args)\n\n        assert 'tables' in p._values\n\n        assert 'columnNames' in p.tables[0]\n        assert len(p.tables[0]['columnNames']) == 1\n        assert p.tables[0]['columnNames'][0] == 'name'\n\n        assert 'name' in p.tables[0]\n        assert p.tables[0]['name'] == 'pool__hosts'\n\n        assert 'rows' in p.tables[0]\n        assert len(p.tables[0]['rows']) == 1\n        assert 'row' in p.tables[0]['rows'][0]\n        assert len(p.tables[0]['rows'][0]['row']) == 1\n        assert p.tables[0]['rows'][0]['row'][0] == 'demo.example.com'\n\n        assert len(p.tables[1]['rows']) == 2\n        assert 'row' in p.tables[0]['rows'][0]\n        assert len(p.tables[1]['rows'][0]['row']) == 2\n        assert p.tables[1]['rows'][0]['row'][0] == '10.1.1.1'\n        assert p.tables[1]['rows'][0]['row'][1] == '0'\n        assert p.tables[1]['rows'][1]['row'][0] == '10.1.1.2'\n        assert p.tables[1]['rows'][1]['row'][1] == '0'\n\n    def test_module_parameters_variables(self):\n        args = load_fixture('create_iapp_service_parameters_f5_http.json')\n        p = Parameters(params=args)\n\n        assert 'variables' in p._values\n        assert len(p.variables) == 34\n\n         Assert one configuration value\n        assert 'name' in p.variables[0]\n        assert 'value' in p.variables[0]\n        assert p.variables[0]['name'] == 'afm__dos_security_profile'\n        assert p.variables[0]['value'] == '/do_not_use'\n\n         Assert a second configuration value\n        assert 'name' in p.variables[1]\n        assert 'value' in p.variables[1]\n        assert p.variables[1]['name'] == 'afm__policy'\n        assert p.variables[1]['value'] == '/do_not_use'\n\n    def test_module_strict_updates_from_top_level(self):\n         Assumes the user did not provide any parameters\n\n        args = dict(\n            strict_updates=True\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'enabled'\n\n        args = dict(\n            strict_updates=False\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'disabled'\n\n    def test_module_strict_updates_override_from_top_level(self):\n        args = dict(\n            strict_updates=True,\n            parameters=dict(\n                strictUpdates='disabled'\n            )\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'enabled'\n\n        args = dict(\n            strict_updates=False,\n            parameters=dict(\n                strictUpdates='enabled'\n            )\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'disabled'\n\n    def test_module_strict_updates_only_parameters(self):\n        args = dict(\n            parameters=dict(\n                strictUpdates='disabled'\n            )\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'disabled'\n\n        args = dict(\n            parameters=dict(\n                strictUpdates='enabled'\n            )\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'enabled'\n\n    def test_api_strict_updates_from_top_level(self):\n        args = dict(\n            strictUpdates='enabled'\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'enabled'\n\n        args = dict(\n            strictUpdates='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'disabled'\n\n    def test_api_parameters_variables(self):\n        args = dict(\n            variables=[\n                dict(\n                    name=\"client__http_compression\",\n                    encrypted=\"no\",\n                    value=\"/create_new\"\n                )\n            ]\n        )\n        p = Parameters(params=args)\n        assert p.variables[0]['name'] == 'client__http_compression'\n\n    def test_api_parameters_tables(self):\n        args = dict(\n            tables=[\n                {\n                    \"name\": \"pool__members\",\n                    \"columnNames\": [\n                        \"addr\",\n                        \"port\",\n                        \"connection_limit\"\n                    ],\n                    \"rows\": [\n                        {\n                            \"row\": [\n                                \"12.12.12.12\",\n                                \"80\",\n                                \"0\"\n                            ]\n                        },\n                        {\n                            \"row\": [\n                                \"13.13.13.13\",\n                                \"443\",\n                                10\n                            ]\n                        }\n                    ]\n                }\n            ]\n        )\n        p = Parameters(params=args)\n        assert p.tables[0]['name'] == 'pool__members'\n        assert p.tables[0]['columnNames'] == ['addr', 'port', 'connection_limit']\n        assert len(p.tables[0]['rows']) == 2\n        assert 'row' in p.tables[0]['rows'][0]\n        assert 'row' in p.tables[0]['rows'][1]\n        assert p.tables[0]['rows'][0]['row'] == ['12.12.12.12', '80', '0']\n        assert p.tables[0]['rows'][1]['row'] == ['13.13.13.13', '443', '10']\n\n    def test_api_parameters_device_group(self):\n        args = dict(\n            deviceGroup='none'\n        )\n        p = Parameters(params=args)\n        assert p.deviceGroup == 'none'\n\n    def test_api_parameters_inherited_traffic_group(self):\n        args = dict(\n            inheritedTrafficGroup='true'\n        )\n        p = Parameters(params=args)\n        assert p.inheritedTrafficGroup == 'true'\n\n    def test_api_parameters_inherited_devicegroup(self):\n        args = dict(\n            inheritedDevicegroup='true'\n        )\n        p = Parameters(params=args)\n        assert p.inheritedDevicegroup == 'true'\n\n    def test_api_parameters_traffic_group(self):\n        args = dict(\n            trafficGroup='/Common/traffic-group-local-only'\n        )\n        p = Parameters(params=args)\n        assert p.traffic_group == '/Common/traffic-group-local-only'\n\n    def test_module_template_same_partition(self):\n        args = dict(\n            template='foo',\n            partition='bar'\n        )\n        p = Parameters(params=args)\n        assert p.template == '/bar/foo'\n\n    def test_module_template_same_partition_full_path(self):\n        args = dict(\n            template='/bar/foo',\n            partition='bar'\n        )\n        p = Parameters(params=args)\n        assert p.template == '/bar/foo'\n\n    def test_module_template_different_partition_full_path(self):\n        args = dict(\n            template='/Common/foo',\n            partition='bar'\n        )\n        p = Parameters(params=args)\n        assert p.template == '/Common/foo'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_service(self, *args):\n        parameters = load_fixture('create_iapp_service_parameters_f5_http.json')\n        set_module_args(dict(\n            name='foo',\n            template='f5.http',\n            parameters=parameters,\n            state='present',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n\n    def test_update_agent_status_traps(self, *args):\n        parameters = load_fixture('update_iapp_service_parameters_f5_http.json')\n        set_module_args(dict(\n            name='foo',\n            template='f5.http',\n            parameters=parameters,\n            state='present',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        parameters = load_fixture('create_iapp_service_parameters_f5_http.json')\n        current = Parameters(parameters)\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n         Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=True)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    assert top level keys    assert one configuration value   use      assert second configuration value   use      assumes user provide parameters   create new      override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_iapp_service import Parameters\n    from library.bigip_iapp_service import ModuleManager\n    from library.bigip_iapp_service import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_iapp_service import Parameters\n        from ansible.modules.network.f5.bigip_iapp_service import ModuleManager\n        from ansible.modules.network.f5.bigip_iapp_service import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n\n    def test_module_parameters_keys(self):\n        args = load_fixture('create_iapp_service_parameters_f5_http.json')\n        p = Parameters(params=args)\n\n        # Assert the top-level keys\n        assert p.name == 'http_example'\n        assert p.partition == 'Common'\n        assert p.template == '/Common/f5.http'\n        assert p.deviceGroup == 'none'\n        assert p.inheritedTrafficGroup == 'true'\n        assert p.inheritedDevicegroup == 'true'\n        assert p.traffic_group == '/Common/traffic-group-local-only'\n\n    def test_module_parameters_lists(self):\n        args = load_fixture('create_iapp_service_parameters_f5_http.json')\n        p = Parameters(params=args)\n\n        assert 'lists' in p._values\n\n        assert p.lists[0]['name'] == 'irules__irules'\n        assert p.lists[0]['encrypted'] == 'no'\n        assert len(p.lists[0]['value']) == 1\n        assert p.lists[0]['value'][0] == '/Common/lgyft'\n\n        assert p.lists[1]['name'] == 'net__client_vlan'\n        assert p.lists[1]['encrypted'] == 'no'\n        assert len(p.lists[1]['value']) == 1\n        assert p.lists[1]['value'][0] == '/Common/net2'\n\n    def test_module_parameters_tables(self):\n        args = load_fixture('create_iapp_service_parameters_f5_http.json')\n        p = Parameters(params=args)\n\n        assert 'tables' in p._values\n\n        assert 'columnNames' in p.tables[0]\n        assert len(p.tables[0]['columnNames']) == 1\n        assert p.tables[0]['columnNames'][0] == 'name'\n\n        assert 'name' in p.tables[0]\n        assert p.tables[0]['name'] == 'pool__hosts'\n\n        assert 'rows' in p.tables[0]\n        assert len(p.tables[0]['rows']) == 1\n        assert 'row' in p.tables[0]['rows'][0]\n        assert len(p.tables[0]['rows'][0]['row']) == 1\n        assert p.tables[0]['rows'][0]['row'][0] == 'demo.example.com'\n\n        assert len(p.tables[1]['rows']) == 2\n        assert 'row' in p.tables[0]['rows'][0]\n        assert len(p.tables[1]['rows'][0]['row']) == 2\n        assert p.tables[1]['rows'][0]['row'][0] == '10.1.1.1'\n        assert p.tables[1]['rows'][0]['row'][1] == '0'\n        assert p.tables[1]['rows'][1]['row'][0] == '10.1.1.2'\n        assert p.tables[1]['rows'][1]['row'][1] == '0'\n\n    def test_module_parameters_variables(self):\n        args = load_fixture('create_iapp_service_parameters_f5_http.json')\n        p = Parameters(params=args)\n\n        assert 'variables' in p._values\n        assert len(p.variables) == 34\n\n        # Assert one configuration value\n        assert 'name' in p.variables[0]\n        assert 'value' in p.variables[0]\n        assert p.variables[0]['name'] == 'afm__dos_security_profile'\n        assert p.variables[0]['value'] == '/#do_not_use#'\n\n        # Assert a second configuration value\n        assert 'name' in p.variables[1]\n        assert 'value' in p.variables[1]\n        assert p.variables[1]['name'] == 'afm__policy'\n        assert p.variables[1]['value'] == '/#do_not_use#'\n\n    def test_module_strict_updates_from_top_level(self):\n        # Assumes the user did not provide any parameters\n\n        args = dict(\n            strict_updates=True\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'enabled'\n\n        args = dict(\n            strict_updates=False\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'disabled'\n\n    def test_module_strict_updates_override_from_top_level(self):\n        args = dict(\n            strict_updates=True,\n            parameters=dict(\n                strictUpdates='disabled'\n            )\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'enabled'\n\n        args = dict(\n            strict_updates=False,\n            parameters=dict(\n                strictUpdates='enabled'\n            )\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'disabled'\n\n    def test_module_strict_updates_only_parameters(self):\n        args = dict(\n            parameters=dict(\n                strictUpdates='disabled'\n            )\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'disabled'\n\n        args = dict(\n            parameters=dict(\n                strictUpdates='enabled'\n            )\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'enabled'\n\n    def test_api_strict_updates_from_top_level(self):\n        args = dict(\n            strictUpdates='enabled'\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'enabled'\n\n        args = dict(\n            strictUpdates='disabled'\n        )\n        p = Parameters(params=args)\n        assert p.strict_updates == 'disabled'\n\n    def test_api_parameters_variables(self):\n        args = dict(\n            variables=[\n                dict(\n                    name=\"client__http_compression\",\n                    encrypted=\"no\",\n                    value=\"/#create_new#\"\n                )\n            ]\n        )\n        p = Parameters(params=args)\n        assert p.variables[0]['name'] == 'client__http_compression'\n\n    def test_api_parameters_tables(self):\n        args = dict(\n            tables=[\n                {\n                    \"name\": \"pool__members\",\n                    \"columnNames\": [\n                        \"addr\",\n                        \"port\",\n                        \"connection_limit\"\n                    ],\n                    \"rows\": [\n                        {\n                            \"row\": [\n                                \"12.12.12.12\",\n                                \"80\",\n                                \"0\"\n                            ]\n                        },\n                        {\n                            \"row\": [\n                                \"13.13.13.13\",\n                                \"443\",\n                                10\n                            ]\n                        }\n                    ]\n                }\n            ]\n        )\n        p = Parameters(params=args)\n        assert p.tables[0]['name'] == 'pool__members'\n        assert p.tables[0]['columnNames'] == ['addr', 'port', 'connection_limit']\n        assert len(p.tables[0]['rows']) == 2\n        assert 'row' in p.tables[0]['rows'][0]\n        assert 'row' in p.tables[0]['rows'][1]\n        assert p.tables[0]['rows'][0]['row'] == ['12.12.12.12', '80', '0']\n        assert p.tables[0]['rows'][1]['row'] == ['13.13.13.13', '443', '10']\n\n    def test_api_parameters_device_group(self):\n        args = dict(\n            deviceGroup='none'\n        )\n        p = Parameters(params=args)\n        assert p.deviceGroup == 'none'\n\n    def test_api_parameters_inherited_traffic_group(self):\n        args = dict(\n            inheritedTrafficGroup='true'\n        )\n        p = Parameters(params=args)\n        assert p.inheritedTrafficGroup == 'true'\n\n    def test_api_parameters_inherited_devicegroup(self):\n        args = dict(\n            inheritedDevicegroup='true'\n        )\n        p = Parameters(params=args)\n        assert p.inheritedDevicegroup == 'true'\n\n    def test_api_parameters_traffic_group(self):\n        args = dict(\n            trafficGroup='/Common/traffic-group-local-only'\n        )\n        p = Parameters(params=args)\n        assert p.traffic_group == '/Common/traffic-group-local-only'\n\n    def test_module_template_same_partition(self):\n        args = dict(\n            template='foo',\n            partition='bar'\n        )\n        p = Parameters(params=args)\n        assert p.template == '/bar/foo'\n\n    def test_module_template_same_partition_full_path(self):\n        args = dict(\n            template='/bar/foo',\n            partition='bar'\n        )\n        p = Parameters(params=args)\n        assert p.template == '/bar/foo'\n\n    def test_module_template_different_partition_full_path(self):\n        args = dict(\n            template='/Common/foo',\n            partition='bar'\n        )\n        p = Parameters(params=args)\n        assert p.template == '/Common/foo'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_service(self, *args):\n        parameters = load_fixture('create_iapp_service_parameters_f5_http.json')\n        set_module_args(dict(\n            name='foo',\n            template='f5.http',\n            parameters=parameters,\n            state='present',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=False)\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n\n    def test_update_agent_status_traps(self, *args):\n        parameters = load_fixture('update_iapp_service_parameters_f5_http.json')\n        set_module_args(dict(\n            name='foo',\n            template='f5.http',\n            parameters=parameters,\n            state='present',\n            password='passsword',\n            server='localhost',\n            user='admin'\n        ))\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        parameters = load_fixture('create_iapp_service_parameters_f5_http.json')\n        current = Parameters(parameters)\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n        mm = ModuleManager(module=module)\n\n        # Override methods to force specific logic in the module to happen\n        mm.exists = Mock(return_value=True)\n        mm.update_on_device = Mock(return_value=True)\n        mm.read_current_from_device = Mock(return_value=current)\n\n        results = mm.exec_module()\n        assert results['changed'] is True\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_iapp_service.py", "id": "0928243fc54d5668a9a9c7bbabef7198", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_iapp_service.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}