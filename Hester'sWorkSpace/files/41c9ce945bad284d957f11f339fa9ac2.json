{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport tensorflow as tf\n\nimport data_provider\nimport networks\nimport util\n\nflags = tf.flags\ntfgan = tf.contrib.gan\n\n\nflags.DEFINE_string('checkpoint_dir', '/tmp/mnist/',\n                    'Directory where the model was written to.')\n\nflags.DEFINE_string('eval_dir', '/tmp/mnist/',\n                    'Directory where the results are saved to.')\n\nflags.DEFINE_integer('num_images_per_class', 10,\n                     'Number of images to generate per class.')\n\nflags.DEFINE_integer('noise_dims', 64,\n                     'Dimensions of the generator noise vector')\n\nflags.DEFINE_string('classifier_filename', None,\n                    'Location of the pretrained classifier. If `None`, use '\n                    'default.')\n\nflags.DEFINE_integer('max_number_of_evaluations', None,\n                     'Number of times to run evaluation. If `None`, run '\n                     'forever.')\n\nflags.DEFINE_boolean('write_to_disk', True, 'If `True`, run images to disk.')\n\nFLAGS = flags.FLAGS\nNUM_CLASSES = 10\n\n\ndef main(_, run_eval_loop=True):\n  with tf.name_scope('inputs'):\n    noise, one_hot_labels = _get_generator_inputs(\n        FLAGS.num_images_per_class, NUM_CLASSES, FLAGS.noise_dims)\n\n   Generate images.\n  with tf.variable_scope('Generator'):   Same scope as in train job.\n    images = networks.conditional_generator(\n        (noise, one_hot_labels), is_training=False)\n\n   Visualize images.\n  reshaped_img = tfgan.eval.image_reshaper(\n      images, num_cols=FLAGS.num_images_per_class)\n  tf.summary.image('generated_images', reshaped_img, max_outputs=1)\n\n   Calculate evaluation metrics.\n  tf.summary.scalar('MNIST_Classifier_score',\n                    util.mnist_score(images, FLAGS.classifier_filename))\n  tf.summary.scalar('MNIST_Cross_entropy',\n                    util.mnist_cross_entropy(\n                        images, one_hot_labels, FLAGS.classifier_filename))\n\n   Write images to disk.\n  image_write_ops = None\n  if FLAGS.write_to_disk:\n    image_write_ops = tf.write_file(\n        '%s/%s'% (FLAGS.eval_dir, 'conditional_gan.png'),\n        tf.image.encode_png(data_provider.float_image_to_uint8(\n            reshaped_img[0])))\n\n   For unit testing, use `run_eval_loop=False`.\n  if not run_eval_loop: return\n  tf.contrib.training.evaluate_repeatedly(\n      FLAGS.checkpoint_dir,\n      hooks=[tf.contrib.training.SummaryAtEndHook(FLAGS.eval_dir),\n             tf.contrib.training.StopAfterNEvalsHook(1)],\n      eval_ops=image_write_ops,\n      max_number_of_evaluations=FLAGS.max_number_of_evaluations)\n\n\ndef _get_generator_inputs(num_images_per_class, num_classes, noise_dims):\n   Since we want a grid of numbers for the conditional generator, manually\n   construct the desired class labels.\n  num_images_generated = num_images_per_class * num_classes\n  noise = tf.random_normal([num_images_generated, noise_dims])\n  labels = [lbl for lbl in range(num_classes) for _\n            in range(num_images_per_class)]\n  one_hot_labels = tf.one_hot(tf.constant(labels), num_classes)\n  return noise, one_hot_labels\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "comments": "   evaluates conditional tfgan trained mnist model        copyright 2017 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       generate images     same scope train job     visualize images     calculate evaluation metrics     write images disk     for unit testing  use  run eval loop false      since want grid numbers conditional generator  manually    construct desired class labels  ", "content": "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Evaluates a conditional TFGAN trained MNIST model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport tensorflow as tf\n\nimport data_provider\nimport networks\nimport util\n\nflags = tf.flags\ntfgan = tf.contrib.gan\n\n\nflags.DEFINE_string('checkpoint_dir', '/tmp/mnist/',\n                    'Directory where the model was written to.')\n\nflags.DEFINE_string('eval_dir', '/tmp/mnist/',\n                    'Directory where the results are saved to.')\n\nflags.DEFINE_integer('num_images_per_class', 10,\n                     'Number of images to generate per class.')\n\nflags.DEFINE_integer('noise_dims', 64,\n                     'Dimensions of the generator noise vector')\n\nflags.DEFINE_string('classifier_filename', None,\n                    'Location of the pretrained classifier. If `None`, use '\n                    'default.')\n\nflags.DEFINE_integer('max_number_of_evaluations', None,\n                     'Number of times to run evaluation. If `None`, run '\n                     'forever.')\n\nflags.DEFINE_boolean('write_to_disk', True, 'If `True`, run images to disk.')\n\nFLAGS = flags.FLAGS\nNUM_CLASSES = 10\n\n\ndef main(_, run_eval_loop=True):\n  with tf.name_scope('inputs'):\n    noise, one_hot_labels = _get_generator_inputs(\n        FLAGS.num_images_per_class, NUM_CLASSES, FLAGS.noise_dims)\n\n  # Generate images.\n  with tf.variable_scope('Generator'):  # Same scope as in train job.\n    images = networks.conditional_generator(\n        (noise, one_hot_labels), is_training=False)\n\n  # Visualize images.\n  reshaped_img = tfgan.eval.image_reshaper(\n      images, num_cols=FLAGS.num_images_per_class)\n  tf.summary.image('generated_images', reshaped_img, max_outputs=1)\n\n  # Calculate evaluation metrics.\n  tf.summary.scalar('MNIST_Classifier_score',\n                    util.mnist_score(images, FLAGS.classifier_filename))\n  tf.summary.scalar('MNIST_Cross_entropy',\n                    util.mnist_cross_entropy(\n                        images, one_hot_labels, FLAGS.classifier_filename))\n\n  # Write images to disk.\n  image_write_ops = None\n  if FLAGS.write_to_disk:\n    image_write_ops = tf.write_file(\n        '%s/%s'% (FLAGS.eval_dir, 'conditional_gan.png'),\n        tf.image.encode_png(data_provider.float_image_to_uint8(\n            reshaped_img[0])))\n\n  # For unit testing, use `run_eval_loop=False`.\n  if not run_eval_loop: return\n  tf.contrib.training.evaluate_repeatedly(\n      FLAGS.checkpoint_dir,\n      hooks=[tf.contrib.training.SummaryAtEndHook(FLAGS.eval_dir),\n             tf.contrib.training.StopAfterNEvalsHook(1)],\n      eval_ops=image_write_ops,\n      max_number_of_evaluations=FLAGS.max_number_of_evaluations)\n\n\ndef _get_generator_inputs(num_images_per_class, num_classes, noise_dims):\n  # Since we want a grid of numbers for the conditional generator, manually\n  # construct the desired class labels.\n  num_images_generated = num_images_per_class * num_classes\n  noise = tf.random_normal([num_images_generated, noise_dims])\n  labels = [lbl for lbl in range(num_classes) for _\n            in range(num_images_per_class)]\n  one_hot_labels = tf.one_hot(tf.constant(labels), num_classes)\n  return noise, one_hot_labels\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "description": "Models and examples built with TensorFlow", "file_name": "conditional_eval.py", "id": "41c9ce945bad284d957f11f339fa9ac2", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/gan/mnist/conditional_eval.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}