{"author": "yandex", "code": "from nose.tools import assert_equals, assert_true\nfrom tests.asserts import assert_in\nimport os\nfrom os import path\nimport json\n\nfrom ..utils import *\nfrom gixy.core.manager import Manager as Gixy\nfrom gixy.core.plugins_manager import PluginsManager\nfrom gixy.core.config import Config\n\n\ndef setup_module():\n    pass\n\n\ndef teardown_module():\n    pass\n\n\ndef test_from_config():\n    tested_plugins = set()\n    tested_fp_plugins = set()\n\n    conf_dir = path.join(path.dirname(__file__), 'simply')\n    for plugin in os.listdir(conf_dir):\n        if plugin in ('.', '..'):\n            continue\n\n        plugin_path = path.join(conf_dir, plugin)\n        if not path.isdir(plugin_path):\n            continue\n\n        config = {}\n        if path.exists(path.join(plugin_path, 'config.json')):\n            with open(path.join(plugin_path, 'config.json'), 'r') as file:\n                config = json.loads(file.read())\n\n        for test_case in os.listdir(plugin_path):\n            if not test_case.endswith('.conf'):\n                continue\n\n            config_path = path.join(plugin_path, test_case)\n            if not test_case.endswith('_fp.conf'):\n                \n                tested_plugins.add(plugin)\n                test_func = check_configuration\n            else:\n                tested_fp_plugins.add(plugin)\n                test_func = check_configuration_fp\n\n            yield test_func, plugin, config_path, config\n\n    manager = PluginsManager()\n    for plugin in manager.plugins:\n        plugin = plugin.name\n        assert_true(plugin in tested_plugins,\n                    'Plugin {name!r} should have at least one simple test config'.format(name=plugin))\n        assert_true(plugin in tested_fp_plugins,\n                    'Plugin {name!r} should have at least one simple test config with false positive'.format(name=plugin))\n\n\ndef parse_plugin_options(config_path):\n    with open(config_path, 'r') as f:\n        config_line = f.readline()\n        if config_line.startswith('# Options: '):\n            return json.loads(config_line[10:])\n    return None\n\n\ndef yoda_provider(plugin, plugin_options=None):\n    config = Config(\n        allow_includes=False,\n        plugins=[plugin]\n    )\n    if plugin_options:\n        config.set_for(plugin, plugin_options)\n    return Gixy(config=config)\n\n\ndef check_configuration(plugin, config_path, test_config):\n    plugin_options = parse_plugin_options(config_path)\n    with yoda_provider(plugin, plugin_options) as yoda:\n        yoda.audit(config_path, open(config_path, mode='r'))\n        formatter = BaseFormatter()\n        formatter.feed(config_path, yoda)\n        _, results = formatter.reports.popitem()\n\n        assert_equals(len(results), 1, 'Should have one report')\n        result = results[0]\n\n        if 'severity' in test_config:\n            if not hasattr(test_config['severity'], '__iter__'):\n                assert_equals(result['severity'], test_config['severity'])\n            else:\n                assert_in(result['severity'], test_config['severity'])\n        assert_equals(result['plugin'], plugin)\n        assert_true(result['summary'])\n        assert_true(result['description'])\n        assert_true(result['config'])\n        assert_true(result['help_url'].startswith('https://'),\n                    'help_url must starts with https://. It\\'is URL!')\n\n\ndef check_configuration_fp(plugin, config_path, test_config):\n    with yoda_provider(plugin) as yoda:\n        yoda.audit(config_path, open(config_path, mode='r'))\n        assert_equals(len([x for x in yoda.results]), 0,\n                      'False positive configuration must not trigger any plugins')\n", "comments": "  not false positive test ", "content": "from nose.tools import assert_equals, assert_true\nfrom tests.asserts import assert_in\nimport os\nfrom os import path\nimport json\n\nfrom ..utils import *\nfrom gixy.core.manager import Manager as Gixy\nfrom gixy.core.plugins_manager import PluginsManager\nfrom gixy.core.config import Config\n\n\ndef setup_module():\n    pass\n\n\ndef teardown_module():\n    pass\n\n\ndef test_from_config():\n    tested_plugins = set()\n    tested_fp_plugins = set()\n\n    conf_dir = path.join(path.dirname(__file__), 'simply')\n    for plugin in os.listdir(conf_dir):\n        if plugin in ('.', '..'):\n            continue\n\n        plugin_path = path.join(conf_dir, plugin)\n        if not path.isdir(plugin_path):\n            continue\n\n        config = {}\n        if path.exists(path.join(plugin_path, 'config.json')):\n            with open(path.join(plugin_path, 'config.json'), 'r') as file:\n                config = json.loads(file.read())\n\n        for test_case in os.listdir(plugin_path):\n            if not test_case.endswith('.conf'):\n                continue\n\n            config_path = path.join(plugin_path, test_case)\n            if not test_case.endswith('_fp.conf'):\n                # Not False Positive test\n                tested_plugins.add(plugin)\n                test_func = check_configuration\n            else:\n                tested_fp_plugins.add(plugin)\n                test_func = check_configuration_fp\n\n            yield test_func, plugin, config_path, config\n\n    manager = PluginsManager()\n    for plugin in manager.plugins:\n        plugin = plugin.name\n        assert_true(plugin in tested_plugins,\n                    'Plugin {name!r} should have at least one simple test config'.format(name=plugin))\n        assert_true(plugin in tested_fp_plugins,\n                    'Plugin {name!r} should have at least one simple test config with false positive'.format(name=plugin))\n\n\ndef parse_plugin_options(config_path):\n    with open(config_path, 'r') as f:\n        config_line = f.readline()\n        if config_line.startswith('# Options: '):\n            return json.loads(config_line[10:])\n    return None\n\n\ndef yoda_provider(plugin, plugin_options=None):\n    config = Config(\n        allow_includes=False,\n        plugins=[plugin]\n    )\n    if plugin_options:\n        config.set_for(plugin, plugin_options)\n    return Gixy(config=config)\n\n\ndef check_configuration(plugin, config_path, test_config):\n    plugin_options = parse_plugin_options(config_path)\n    with yoda_provider(plugin, plugin_options) as yoda:\n        yoda.audit(config_path, open(config_path, mode='r'))\n        formatter = BaseFormatter()\n        formatter.feed(config_path, yoda)\n        _, results = formatter.reports.popitem()\n\n        assert_equals(len(results), 1, 'Should have one report')\n        result = results[0]\n\n        if 'severity' in test_config:\n            if not hasattr(test_config['severity'], '__iter__'):\n                assert_equals(result['severity'], test_config['severity'])\n            else:\n                assert_in(result['severity'], test_config['severity'])\n        assert_equals(result['plugin'], plugin)\n        assert_true(result['summary'])\n        assert_true(result['description'])\n        assert_true(result['config'])\n        assert_true(result['help_url'].startswith('https://'),\n                    'help_url must starts with https://. It\\'is URL!')\n\n\ndef check_configuration_fp(plugin, config_path, test_config):\n    with yoda_provider(plugin) as yoda:\n        yoda.audit(config_path, open(config_path, mode='r'))\n        assert_equals(len([x for x in yoda.results]), 0,\n                      'False positive configuration must not trigger any plugins')\n", "description": "Nginx configuration static analyzer", "file_name": "test_simply.py", "id": "4001a46dc4001ea97483c1e6e864dc8b", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/tests/plugins/test_simply.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}