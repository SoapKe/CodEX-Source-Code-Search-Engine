{"author": "nvbn", "code": "import pytest\nfrom thefuck.rules.scm_correction import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef get_actual_scm_mock(mocker):\n    return mocker.patch('thefuck.rules.scm_correction._get_actual_scm',\n                        return_value=None)\n\n\n@pytest.mark.parametrize('script, output, actual_scm', [\n    ('git log', 'fatal: Not a git repository '\n                '(or any of the parent directories): .git',\n     'hg'),\n    ('hg log', \"abort: no repository found in '/home/nvbn/exp/thefuck' \"\n               \"(.hg not found)!\",\n     'git')])\ndef test_match(get_actual_scm_mock, script, output, actual_scm):\n    get_actual_scm_mock.return_value = actual_scm\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, actual_scm', [\n    ('git log', '', 'hg'),\n    ('git log', 'fatal: Not a git repository '\n                '(or any of the parent directories): .git',\n     None),\n    ('hg log', \"abort: no repository found in '/home/nvbn/exp/thefuck' \"\n               \"(.hg not found)!\",\n     None),\n    ('not-scm log', \"abort: no repository found in '/home/nvbn/exp/thefuck' \"\n                    \"(.hg not found)!\",\n     'git')])\ndef test_not_match(get_actual_scm_mock, script, output, actual_scm):\n    get_actual_scm_mock.return_value = actual_scm\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, actual_scm, result', [\n    ('git log', 'hg', 'hg log'),\n    ('hg log', 'git', 'git log')])\ndef test_get_new_command(get_actual_scm_mock, script, actual_scm, result):\n    get_actual_scm_mock.return_value = actual_scm\n    new_command = get_new_command(Command(script, ''))\n    assert new_command == result\n", "comments": "", "content": "import pytest\nfrom thefuck.rules.scm_correction import match, get_new_command\nfrom thefuck.types import Command\n\n\n@pytest.fixture\ndef get_actual_scm_mock(mocker):\n    return mocker.patch('thefuck.rules.scm_correction._get_actual_scm',\n                        return_value=None)\n\n\n@pytest.mark.parametrize('script, output, actual_scm', [\n    ('git log', 'fatal: Not a git repository '\n                '(or any of the parent directories): .git',\n     'hg'),\n    ('hg log', \"abort: no repository found in '/home/nvbn/exp/thefuck' \"\n               \"(.hg not found)!\",\n     'git')])\ndef test_match(get_actual_scm_mock, script, output, actual_scm):\n    get_actual_scm_mock.return_value = actual_scm\n    assert match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, output, actual_scm', [\n    ('git log', '', 'hg'),\n    ('git log', 'fatal: Not a git repository '\n                '(or any of the parent directories): .git',\n     None),\n    ('hg log', \"abort: no repository found in '/home/nvbn/exp/thefuck' \"\n               \"(.hg not found)!\",\n     None),\n    ('not-scm log', \"abort: no repository found in '/home/nvbn/exp/thefuck' \"\n                    \"(.hg not found)!\",\n     'git')])\ndef test_not_match(get_actual_scm_mock, script, output, actual_scm):\n    get_actual_scm_mock.return_value = actual_scm\n    assert not match(Command(script, output))\n\n\n@pytest.mark.parametrize('script, actual_scm, result', [\n    ('git log', 'hg', 'hg log'),\n    ('hg log', 'git', 'git log')])\ndef test_get_new_command(get_actual_scm_mock, script, actual_scm, result):\n    get_actual_scm_mock.return_value = actual_scm\n    new_command = get_new_command(Command(script, ''))\n    assert new_command == result\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_scm_correction.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/rules/test_scm_correction.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}