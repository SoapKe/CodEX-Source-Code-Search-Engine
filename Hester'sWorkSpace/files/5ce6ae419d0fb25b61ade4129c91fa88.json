{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry.cache.redis import RedisCache, ValueTooLarge\nfrom sentry.testutils import TestCase\n\n\nclass RedisCacheTest(TestCase):\n    def setUp(self):\n        self.backend = RedisCache()\n\n    def test_integration(self):\n        self.backend.set('foo', {'foo': 'bar'}, 50)\n\n        result = self.backend.get('foo')\n        assert result == {'foo': 'bar'}\n\n        self.backend.delete('foo')\n\n        result = self.backend.get('foo')\n        assert result is None\n\n        with self.assertRaises(ValueTooLarge):\n            self.backend.set('foo', 'x' * (RedisCache.max_size + 1), 0)\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry.cache.redis import RedisCache, ValueTooLarge\nfrom sentry.testutils import TestCase\n\n\nclass RedisCacheTest(TestCase):\n    def setUp(self):\n        self.backend = RedisCache()\n\n    def test_integration(self):\n        self.backend.set('foo', {'foo': 'bar'}, 50)\n\n        result = self.backend.get('foo')\n        assert result == {'foo': 'bar'}\n\n        self.backend.delete('foo')\n\n        result = self.backend.get('foo')\n        assert result is None\n\n        with self.assertRaises(ValueTooLarge):\n            self.backend.set('foo', 'x' * (RedisCache.max_size + 1), 0)\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_redis.py", "id": "5ce6ae419d0fb25b61ade4129c91fa88", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/cache/test_redis.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}