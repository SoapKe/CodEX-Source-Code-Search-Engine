{"author": "aws", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nimport datetime\n\nfrom botocore.compat import urlsplit\nfrom awscli.testutils import BaseAWSCommandParamsTest, mock, temporary_file\nfrom awscli.testutils import create_clidriver\n\n\n Values used to fix time.time() and datetime.datetime.utcnow()\n so we know the exact values of the signatures generated.\nFROZEN_TIMESTAMP = 1471305652\nDEFAULT_EXPIRES = 3600\nFROZEN_TIME = mock.Mock(return_value=FROZEN_TIMESTAMP)\nFROZEN_DATETIME = mock.Mock(\n    return_value=datetime.datetime(2016, 8, 18, 14, 33, 3, 0))\n\n\nclass TestPresignCommand(BaseAWSCommandParamsTest):\n\n    prefix = 's3 presign '\n\n    def enable_addressing_mode_in_config(self, fileobj, mode):\n        fileobj.write(\n            \"[default]\\n\"\n            \"s3 =\\n\"\n            \"    addressing_style = %s\\n\" % mode\n        )\n        fileobj.flush()\n        self.environ['AWS_CONFIG_FILE'] = fileobj.name\n        self.driver = create_clidriver()\n\n    def enable_sigv4_from_config_file(self, fileobj):\n        fileobj.write(\n            \"[default]\\n\"\n            \"s3 =\\n\"\n            \"    signature_version = s3v4\\n\"\n        )\n        fileobj.flush()\n        self.environ['AWS_CONFIG_FILE'] = fileobj.name\n        self.driver = create_clidriver()\n\n    def assert_presigned_url_matches(self, actual_url, expected_match):\n        \n        parts = urlsplit(actual_url)\n        self.assertEqual(parts.netloc, expected_match['hostname'])\n        self.assertEqual(parts.path, expected_match['path'])\n        query_params = self.parse_query_string(parts.query)\n        self.assertEqual(query_params, expected_match['query_params'])\n\n    def parse_query_string(self, query_string):\n        pairs = []\n        for part in query_string.split('&'):\n            pairs.append(part.split('=', 1))\n        return dict(pairs)\n\n    def get_presigned_url_for_cmd(self, cmdline):\n        with mock.patch('time.time', FROZEN_TIME):\n            with mock.patch('datetime.datetime') as d:\n                d.utcnow = FROZEN_DATETIME\n                stdout = self.assert_params_for_cmd(cmdline, None)[0].strip()\n                return stdout\n\n    def test_generates_a_url(self):\n        stdout = self.get_presigned_url_for_cmd(\n            self.prefix + 's3://bucket/key')\n\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 'bucket.s3.amazonaws.com',\n                'path': '/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + DEFAULT_EXPIRES),\n                    'Signature': '2m9M0eLB%2BqI0nUpkyTskKmHd0Ig%3D',\n                }\n            }\n        )\n\n    def test_handles_non_dns_compatible_buckets(self):\n        stdout = self.get_presigned_url_for_cmd(\n            self.prefix + 's3://bucket.dots/key')\n\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 's3.amazonaws.com',\n                'path': '/bucket.dots/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + DEFAULT_EXPIRES),\n                    'Signature': '0IiC2vxub438EVcKfEFEMHuoHRw%3D',\n                }\n            }\n        )\n\n    def test_handles_expires_in(self):\n        expires_in = 1000\n        stdout = self.get_presigned_url_for_cmd(\n            self.prefix + 's3://bucket/key --expires-in %s' % expires_in)\n\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 'bucket.s3.amazonaws.com',\n                'path': '/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + expires_in),\n                    'Signature': 'WZEMcfBNlzfTZBq3bOvYef1cfoU%3D',\n                }\n            }\n        )\n\n    def test_handles_sigv4(self):\n        with temporary_file('w') as f:\n            self.enable_sigv4_from_config_file(f)\n            stdout = self.get_presigned_url_for_cmd(\n                self.prefix + 's3://bucket/key')\n\n        expected = {\n            'hostname': 'bucket.s3.amazonaws.com',\n            'path': '/key',\n            'query_params': {\n                'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',\n                'X-Amz-Credential': (\n                    'access_key%2F20160818%2Fus-east-1'\n                    '%2Fs3%2Faws4_request'),\n                'X-Amz-Date': '20160818T143303Z',\n                'X-Amz-Expires': '3600',\n                'X-Amz-Signature': (\n                    'd28b6c4a54f31196a6d49335556736a3fc29f036018c8e'\n                    '50775887299092d1a0'),\n                'X-Amz-SignedHeaders': 'host'\n            }\n        }\n        self.assert_presigned_url_matches(stdout, expected)\n\n    def test_s3_prefix_not_needed(self):\n         Consistent with the 'ls' command.\n        stdout = self.get_presigned_url_for_cmd(\n            self.prefix + 'bucket/key')\n\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 'bucket.s3.amazonaws.com',\n                'path': '/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + DEFAULT_EXPIRES),\n                    'Signature': '2m9M0eLB%2BqI0nUpkyTskKmHd0Ig%3D',\n                }\n            }\n        )\n\n    def test_can_support_addressing_mode_config(self):\n        with temporary_file('w') as f:\n            self.enable_addressing_mode_in_config(f, 'path')\n            stdout = self.get_presigned_url_for_cmd(\n                self.prefix + 's3://bucket/key')\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 's3.amazonaws.com',\n                'path': '/bucket/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + DEFAULT_EXPIRES),\n                    'Signature': '2m9M0eLB%2BqI0nUpkyTskKmHd0Ig%3D',\n                }\n            }\n        )\n", "comments": "   verify generated presigned url matches expected dict           this method compares actual url dict expected         values   the reason  expected match  dict instead         expected presigned url query params         unordered guarantee expected query param         ordering                  copyright 2016 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     values used fix time time() datetime datetime utcnow()    know exact values signatures generated     consistent  ls  command  ", "content": "# Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nimport datetime\n\nfrom botocore.compat import urlsplit\nfrom awscli.testutils import BaseAWSCommandParamsTest, mock, temporary_file\nfrom awscli.testutils import create_clidriver\n\n\n# Values used to fix time.time() and datetime.datetime.utcnow()\n# so we know the exact values of the signatures generated.\nFROZEN_TIMESTAMP = 1471305652\nDEFAULT_EXPIRES = 3600\nFROZEN_TIME = mock.Mock(return_value=FROZEN_TIMESTAMP)\nFROZEN_DATETIME = mock.Mock(\n    return_value=datetime.datetime(2016, 8, 18, 14, 33, 3, 0))\n\n\nclass TestPresignCommand(BaseAWSCommandParamsTest):\n\n    prefix = 's3 presign '\n\n    def enable_addressing_mode_in_config(self, fileobj, mode):\n        fileobj.write(\n            \"[default]\\n\"\n            \"s3 =\\n\"\n            \"    addressing_style = %s\\n\" % mode\n        )\n        fileobj.flush()\n        self.environ['AWS_CONFIG_FILE'] = fileobj.name\n        self.driver = create_clidriver()\n\n    def enable_sigv4_from_config_file(self, fileobj):\n        fileobj.write(\n            \"[default]\\n\"\n            \"s3 =\\n\"\n            \"    signature_version = s3v4\\n\"\n        )\n        fileobj.flush()\n        self.environ['AWS_CONFIG_FILE'] = fileobj.name\n        self.driver = create_clidriver()\n\n    def assert_presigned_url_matches(self, actual_url, expected_match):\n        \"\"\"Verify generated presigned URL matches expected dict.\n\n        This method compares an actual URL against a dict of expected\n        values.  The reason that the \"expected_match\" is a dict instead\n        of the expected presigned URL is because the query params\n        are unordered so we can't guarantee an expected query param\n        ordering.\n\n        \"\"\"\n        parts = urlsplit(actual_url)\n        self.assertEqual(parts.netloc, expected_match['hostname'])\n        self.assertEqual(parts.path, expected_match['path'])\n        query_params = self.parse_query_string(parts.query)\n        self.assertEqual(query_params, expected_match['query_params'])\n\n    def parse_query_string(self, query_string):\n        pairs = []\n        for part in query_string.split('&'):\n            pairs.append(part.split('=', 1))\n        return dict(pairs)\n\n    def get_presigned_url_for_cmd(self, cmdline):\n        with mock.patch('time.time', FROZEN_TIME):\n            with mock.patch('datetime.datetime') as d:\n                d.utcnow = FROZEN_DATETIME\n                stdout = self.assert_params_for_cmd(cmdline, None)[0].strip()\n                return stdout\n\n    def test_generates_a_url(self):\n        stdout = self.get_presigned_url_for_cmd(\n            self.prefix + 's3://bucket/key')\n\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 'bucket.s3.amazonaws.com',\n                'path': '/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + DEFAULT_EXPIRES),\n                    'Signature': '2m9M0eLB%2BqI0nUpkyTskKmHd0Ig%3D',\n                }\n            }\n        )\n\n    def test_handles_non_dns_compatible_buckets(self):\n        stdout = self.get_presigned_url_for_cmd(\n            self.prefix + 's3://bucket.dots/key')\n\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 's3.amazonaws.com',\n                'path': '/bucket.dots/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + DEFAULT_EXPIRES),\n                    'Signature': '0IiC2vxub438EVcKfEFEMHuoHRw%3D',\n                }\n            }\n        )\n\n    def test_handles_expires_in(self):\n        expires_in = 1000\n        stdout = self.get_presigned_url_for_cmd(\n            self.prefix + 's3://bucket/key --expires-in %s' % expires_in)\n\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 'bucket.s3.amazonaws.com',\n                'path': '/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + expires_in),\n                    'Signature': 'WZEMcfBNlzfTZBq3bOvYef1cfoU%3D',\n                }\n            }\n        )\n\n    def test_handles_sigv4(self):\n        with temporary_file('w') as f:\n            self.enable_sigv4_from_config_file(f)\n            stdout = self.get_presigned_url_for_cmd(\n                self.prefix + 's3://bucket/key')\n\n        expected = {\n            'hostname': 'bucket.s3.amazonaws.com',\n            'path': '/key',\n            'query_params': {\n                'X-Amz-Algorithm': 'AWS4-HMAC-SHA256',\n                'X-Amz-Credential': (\n                    'access_key%2F20160818%2Fus-east-1'\n                    '%2Fs3%2Faws4_request'),\n                'X-Amz-Date': '20160818T143303Z',\n                'X-Amz-Expires': '3600',\n                'X-Amz-Signature': (\n                    'd28b6c4a54f31196a6d49335556736a3fc29f036018c8e'\n                    '50775887299092d1a0'),\n                'X-Amz-SignedHeaders': 'host'\n            }\n        }\n        self.assert_presigned_url_matches(stdout, expected)\n\n    def test_s3_prefix_not_needed(self):\n        # Consistent with the 'ls' command.\n        stdout = self.get_presigned_url_for_cmd(\n            self.prefix + 'bucket/key')\n\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 'bucket.s3.amazonaws.com',\n                'path': '/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + DEFAULT_EXPIRES),\n                    'Signature': '2m9M0eLB%2BqI0nUpkyTskKmHd0Ig%3D',\n                }\n            }\n        )\n\n    def test_can_support_addressing_mode_config(self):\n        with temporary_file('w') as f:\n            self.enable_addressing_mode_in_config(f, 'path')\n            stdout = self.get_presigned_url_for_cmd(\n                self.prefix + 's3://bucket/key')\n        self.assert_presigned_url_matches(\n            stdout, {\n                'hostname': 's3.amazonaws.com',\n                'path': '/bucket/key',\n                'query_params': {\n                    'AWSAccessKeyId': 'access_key',\n                    'Expires': str(FROZEN_TIMESTAMP + DEFAULT_EXPIRES),\n                    'Signature': '2m9M0eLB%2BqI0nUpkyTskKmHd0Ig%3D',\n                }\n            }\n        )\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_presign_command.py", "id": "9b48fef5bd148827bf5b893fa4cb89e0", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/s3/test_presign_command.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}