{"author": "wangshub", "code": "import time\nimport math\nimport random\n\nfrom PIL import Image, ImageDraw\n\nimport settings\nfrom connector import Connector\nfrom algos import get_press_time\n\n\nclass AutoBot(Connector):\n\n    def __init__(self, params=settings.get_bot_params()):\n        \n        super(AutoBot, self).__init__()\n\n        \n        self.status = True\n\n        \n        self.params = params\n        self.swipe_x1 = 0;\n        self.swipe_y1 = 0;\n        self.swipe_x2 = 0;\n        self.swipe_y2 = 0;\n\n    def run(self):\n        steps = 0\n\n        while (self.status):\n            self.connector_screenshot()\n            image = Image.open(self.image_dir)\n\n            steps += 1\n            coord_y_start_scan = self._get_coord_y_start_scan(image)\n            piece_x, piece_y = self._find_piece(image, coord_y_start_scan)\n            board_x, board_y = self._find_board(image, piece_x, piece_y)\n            print(\"step: \", steps)\n            print(\"- image: \", image.size)\n            print(\"- coord_y_start_scan: \", coord_y_start_scan)\n            print(\"- piece (x, y): \", piece_x, piece_y)\n            print(\"- board (x, y): \", board_x, board_y)\n            if piece_x == 0: \n                print(\"Game Over.\")\n                return\n\n            self._set_button_coords(image)           \n            press_time = get_press_time(piece_x, piece_y, board_x, board_y, self.params[\"TIME_COEFF\"])\n            print(\"- press time: \", press_time)\n            self.connector_taphold(press_time)\n            time.sleep(random.uniform(1, 1.1))\n\n\n    def _get_coord_y_start_scan(self, image):\n        width, height = image.size\n        pixels = image.load()\n        coord_y_start_scan = 0\n\n        for i in range(self.params[\"COORD_Y_START_SCAN\"], height, 50):\n            last_pixel = pixels[0, i]\n            for j in range(1, width):\n                pixel = pixels[j, i]\n\n                if (pixel[0] != last_pixel[0]) or (pixel[1] != last_pixel[1]) or (pixel[2] != last_pixel[2]):\n                    coord_y_start_scan = i - 50\n                    break;\n\n            if coord_y_start_scan: break;\n\n        return coord_y_start_scan\n\n    def _find_piece(self, image, coord_y_start_scan):\n        width, height = image.size\n        pixels = image.load()\n\n        border_x_scan = int(width/8)\n        piece_x_sum = 0\n        piece_x_counter = 0\n        piece_y_max = 0\n\n        for i in range(coord_y_start_scan, int(height * 2 / 3)):\n            for j in range(border_x_scan, width - border_x_scan):\n                pixel = pixels[j, i]\n                if (50 < pixel[0] < 60) and (53 < pixel[1] < 63) and (95 < pixel[2] < 110):\n                    piece_x_sum += j\n                    piece_x_counter += 1\n                    piece_y_max = max(i, piece_y_max)\n\n        if not all((piece_x_sum, piece_x_counter)): return 0, 0\n        piece_x = piece_x_sum / piece_x_counter\n        piece_y = piece_y_max - self.params[\"PIECE_BASE_HEIGHT_HALF\"]\n        return piece_x, piece_y\n\n\n    def _find_board(self, image, piece_x, piece_y):\n        width, height = image.size\n        pixels = image.load()\n\n        board_x = 0\n        board_y = 0\n\n        for i in range(int(height/3), int(height * 2/3)):\n            if board_x or board_y: \n                break;\n\n            board_x_sum = 0\n            board_x_counter = 0\n            last_pixel = pixels[0, i]\n            for j in range(width):\n                pixel = pixels[j, i]\n                if (abs(j - piece_x) < self.params[\"PIECE_BODY_WIDTH\"]):\n                    continue\n                if abs(pixel[0] - last_pixel[0]) + abs(pixel[1] - last_pixel[1]) + abs(pixel[2] - last_pixel[2]) > 10:\n                    board_x_sum += j\n                    board_x_counter += 1\n\n            if board_x_sum:\n                board_x = board_x_sum / board_x_counter\n\n        \n        board_y = piece_y - abs(board_x - piece_x) * math.sqrt(3) / 3\n        if not all ((board_x, board_y)):   \n            return 0, 0\n\n        return board_x, board_y\n\n    def _set_button_coords(self, image):\n        width, height = image.size\n        left = width / 2\n        top = 1003 * (height / 1280.0) + 10\n        self.swipe_x1, self.swipe_y1, self.swipe_x2, self.swipe_y2 = left, top, left, top\n", "comments": "  init connector    init bot    init game    find centroid next board ", "content": "import time\nimport math\nimport random\n\nfrom PIL import Image, ImageDraw\n\nimport settings\nfrom connector import Connector\nfrom algos import get_press_time\n\n\nclass AutoBot(Connector):\n\n    def __init__(self, params=settings.get_bot_params()):\n        # init connector\n        super(AutoBot, self).__init__()\n\n        # init bot\n        self.status = True\n\n        # init game\n        self.params = params\n        self.swipe_x1 = 0;\n        self.swipe_y1 = 0;\n        self.swipe_x2 = 0;\n        self.swipe_y2 = 0;\n\n    def run(self):\n        steps = 0\n\n        while (self.status):\n            self.connector_screenshot()\n            image = Image.open(self.image_dir)\n\n            steps += 1\n            coord_y_start_scan = self._get_coord_y_start_scan(image)\n            piece_x, piece_y = self._find_piece(image, coord_y_start_scan)\n            board_x, board_y = self._find_board(image, piece_x, piece_y)\n            print(\"step: \", steps)\n            print(\"- image: \", image.size)\n            print(\"- coord_y_start_scan: \", coord_y_start_scan)\n            print(\"- piece (x, y): \", piece_x, piece_y)\n            print(\"- board (x, y): \", board_x, board_y)\n            if piece_x == 0: \n                print(\"Game Over.\")\n                return\n\n            self._set_button_coords(image)           \n            press_time = get_press_time(piece_x, piece_y, board_x, board_y, self.params[\"TIME_COEFF\"])\n            print(\"- press time: \", press_time)\n            self.connector_taphold(press_time)\n            time.sleep(random.uniform(1, 1.1))\n\n\n    def _get_coord_y_start_scan(self, image):\n        width, height = image.size\n        pixels = image.load()\n        coord_y_start_scan = 0\n\n        for i in range(self.params[\"COORD_Y_START_SCAN\"], height, 50):\n            last_pixel = pixels[0, i]\n            for j in range(1, width):\n                pixel = pixels[j, i]\n\n                if (pixel[0] != last_pixel[0]) or (pixel[1] != last_pixel[1]) or (pixel[2] != last_pixel[2]):\n                    coord_y_start_scan = i - 50\n                    break;\n\n            if coord_y_start_scan: break;\n\n        return coord_y_start_scan\n\n    def _find_piece(self, image, coord_y_start_scan):\n        width, height = image.size\n        pixels = image.load()\n\n        border_x_scan = int(width/8)\n        piece_x_sum = 0\n        piece_x_counter = 0\n        piece_y_max = 0\n\n        for i in range(coord_y_start_scan, int(height * 2 / 3)):\n            for j in range(border_x_scan, width - border_x_scan):\n                pixel = pixels[j, i]\n                if (50 < pixel[0] < 60) and (53 < pixel[1] < 63) and (95 < pixel[2] < 110):\n                    piece_x_sum += j\n                    piece_x_counter += 1\n                    piece_y_max = max(i, piece_y_max)\n\n        if not all((piece_x_sum, piece_x_counter)): return 0, 0\n        piece_x = piece_x_sum / piece_x_counter\n        piece_y = piece_y_max - self.params[\"PIECE_BASE_HEIGHT_HALF\"]\n        return piece_x, piece_y\n\n\n    def _find_board(self, image, piece_x, piece_y):\n        width, height = image.size\n        pixels = image.load()\n\n        board_x = 0\n        board_y = 0\n\n        for i in range(int(height/3), int(height * 2/3)):\n            if board_x or board_y: \n                break;\n\n            board_x_sum = 0\n            board_x_counter = 0\n            last_pixel = pixels[0, i]\n            for j in range(width):\n                pixel = pixels[j, i]\n                if (abs(j - piece_x) < self.params[\"PIECE_BODY_WIDTH\"]):\n                    continue\n                if abs(pixel[0] - last_pixel[0]) + abs(pixel[1] - last_pixel[1]) + abs(pixel[2] - last_pixel[2]) > 10:\n                    board_x_sum += j\n                    board_x_counter += 1\n\n            if board_x_sum:\n                board_x = board_x_sum / board_x_counter\n\n        # find the centroid of next board\n        board_y = piece_y - abs(board_x - piece_x) * math.sqrt(3) / 3\n        if not all ((board_x, board_y)):   \n            return 0, 0\n\n        return board_x, board_y\n\n    def _set_button_coords(self, image):\n        width, height = image.size\n        left = width / 2\n        top = 1003 * (height / 1280.0) + 10\n        self.swipe_x1, self.swipe_y1, self.swipe_x2, self.swipe_y2 = left, top, left, top\n", "description": "python \u5fae\u4fe1\u300a\u8df3\u4e00\u8df3\u300b\u8f85\u52a9", "file_name": "auto.py", "id": "f3963ecd5f438963ce961fd653d58832", "language": "Python", "project_name": "wechat_jump_game", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/wangshub-wechat_jump_game/wangshub-wechat_jump_game-748e4b9/jump_bot/jumpbot/auto.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:35:59Z", "url": "https://github.com/wangshub/wechat_jump_game", "wiki": true}