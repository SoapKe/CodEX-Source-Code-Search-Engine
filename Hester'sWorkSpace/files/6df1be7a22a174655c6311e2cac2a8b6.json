{"author": "ajenti", "code": "\nimport subprocess\nimport shutil\nimport glob\nimport os\nimport re\nimport sys\nimport gevent\n\ntry:\n    from gevent import subprocess\nexcept:\n    import subprocess\n\nimport uuid\nimport threading\n\nimport logging\nimport ajenti.compat\nimport ajenti.log\n\n\ndef check_output(*args, **kwargs):\n    try:\n        return subprocess.check_output(*args, **kwargs)\n    except Exception as e:\n        logging.error('Call failed')\n        logging.error(' '.join(args[0]))\n        logging.error(str(e))\n        sys.exit(0)\n\n\najenti.log.init()\n\n\ndef dirname():\n    return 'tmp/' + str(uuid.uuid4())\n\ndef compile_coffeescript(inpath):\n    outpath = '%s.c.js' % inpath\n\n    if os.path.exists(outpath) and os.stat(outpath).st_mtime > os.stat(inpath).st_mtime:\n        logging.info('Skipping %s' % inpath)\n        return\n\n    logging.info('Compiling CoffeeScript: %s' % inpath)\n\n    d = dirname()\n    check_output('coffee -o %s -c \"%s\"' % (d, inpath), shell=True)\n    shutil.move(glob.glob('./%s/*.js' % d)[0], outpath)\n    shutil.rmtree(d)\n\n\ndef compile_less(inpath):\n    outpath = '%s.c.css' % inpath\n\n    if os.path.exists(outpath) and os.stat(outpath).st_mtime > os.stat(inpath).st_mtime:\n        logging.info('Skipping %s' % inpath)\n        \n\n    logging.info('Compiling LESS %s' % inpath)\n    out = check_output('lessc \"%s\" \"%s\"' % (inpath, outpath), shell=True)\n    if out:\n        logging.error(out)\n    #print subprocess.check_output('recess --compile \"%s\" > \"%s\"' % (inpath, outpath), shell=True)\n\ncompilers = {\n    r'.+\\.coffee$': compile_coffeescript,\n    r'.+[^i]\\.less$': compile_less,\n}\n\n\n\ngreenlets = []\n\ndef traverse(fx):\n    plugins_path = './ajenti/plugins'\n    for plugin in os.listdir(plugins_path):\n        path = os.path.join(plugins_path, plugin, 'content')\n        if os.path.exists(path):\n            for (dp, dn, fn) in os.walk(path):\n                for name in fn:\n                    file_path = os.path.join(dp, name)\n                    greenlets.append(gevent.spawn(fx, file_path))\n\n    done = 0\n    done_gls = []\n    length = 40\n    total = len(greenlets)\n    print\n\n    while True:\n        for gl in greenlets:\n            if gl.ready() and not gl in done_gls:\n                done_gls.append(gl)\n                done += 1\n                dots = int(1.0 * length * done / total)\n                sys.stdout.write('\\r%3i/%3i [' % (done, total) + '.' * dots + ' ' * (length - dots) + ']')\n                sys.stdout.flush()\n        gevent.sleep(0.1)\n        if done == total:\n            print\n            break\n\n\n\ndef compile(file_path):\n    for pattern in compilers:\n        if re.match(pattern, file_path):\n            compilers[pattern](file_path)\n\n\n\nif not os.path.exists('tmp'):\n    os.mkdir('tmp')\n\ngreenlets = []\ntraverse(compile)\n", "comments": "   usr bin env python   return   print subprocess check output( recess   compile            (inpath  outpath)  shell true) ", "content": "#!/usr/bin/env python\nimport subprocess\nimport shutil\nimport glob\nimport os\nimport re\nimport sys\nimport gevent\n\ntry:\n    from gevent import subprocess\nexcept:\n    import subprocess\n\nimport uuid\nimport threading\n\nimport logging\nimport ajenti.compat\nimport ajenti.log\n\n\ndef check_output(*args, **kwargs):\n    try:\n        return subprocess.check_output(*args, **kwargs)\n    except Exception as e:\n        logging.error('Call failed')\n        logging.error(' '.join(args[0]))\n        logging.error(str(e))\n        sys.exit(0)\n\n\najenti.log.init()\n\n\ndef dirname():\n    return 'tmp/' + str(uuid.uuid4())\n\ndef compile_coffeescript(inpath):\n    outpath = '%s.c.js' % inpath\n\n    if os.path.exists(outpath) and os.stat(outpath).st_mtime > os.stat(inpath).st_mtime:\n        logging.info('Skipping %s' % inpath)\n        return\n\n    logging.info('Compiling CoffeeScript: %s' % inpath)\n\n    d = dirname()\n    check_output('coffee -o %s -c \"%s\"' % (d, inpath), shell=True)\n    shutil.move(glob.glob('./%s/*.js' % d)[0], outpath)\n    shutil.rmtree(d)\n\n\ndef compile_less(inpath):\n    outpath = '%s.c.css' % inpath\n\n    if os.path.exists(outpath) and os.stat(outpath).st_mtime > os.stat(inpath).st_mtime:\n        logging.info('Skipping %s' % inpath)\n        #return\n\n    logging.info('Compiling LESS %s' % inpath)\n    out = check_output('lessc \"%s\" \"%s\"' % (inpath, outpath), shell=True)\n    if out:\n        logging.error(out)\n    #print subprocess.check_output('recess --compile \"%s\" > \"%s\"' % (inpath, outpath), shell=True)\n\ncompilers = {\n    r'.+\\.coffee$': compile_coffeescript,\n    r'.+[^i]\\.less$': compile_less,\n}\n\n\n\ngreenlets = []\n\ndef traverse(fx):\n    plugins_path = './ajenti/plugins'\n    for plugin in os.listdir(plugins_path):\n        path = os.path.join(plugins_path, plugin, 'content')\n        if os.path.exists(path):\n            for (dp, dn, fn) in os.walk(path):\n                for name in fn:\n                    file_path = os.path.join(dp, name)\n                    greenlets.append(gevent.spawn(fx, file_path))\n\n    done = 0\n    done_gls = []\n    length = 40\n    total = len(greenlets)\n    print\n\n    while True:\n        for gl in greenlets:\n            if gl.ready() and not gl in done_gls:\n                done_gls.append(gl)\n                done += 1\n                dots = int(1.0 * length * done / total)\n                sys.stdout.write('\\r%3i/%3i [' % (done, total) + '.' * dots + ' ' * (length - dots) + ']')\n                sys.stdout.flush()\n        gevent.sleep(0.1)\n        if done == total:\n            print\n            break\n\n\n\ndef compile(file_path):\n    for pattern in compilers:\n        if re.match(pattern, file_path):\n            compilers[pattern](file_path)\n\n\n\nif not os.path.exists('tmp'):\n    os.mkdir('tmp')\n\ngreenlets = []\ntraverse(compile)\n", "description": "Ajenti Core and stock plugins", "file_name": "compile_resources.py", "id": "6df1be7a22a174655c6311e2cac2a8b6", "language": "Python", "project_name": "ajenti", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ajenti-ajenti/ajenti-ajenti-dd36ab4/compile_resources.py", "save_time": "", "source": "", "update_at": "2018-03-16T02:10:44Z", "url": "https://github.com/ajenti/ajenti", "wiki": false}