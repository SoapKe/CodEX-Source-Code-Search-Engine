{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass PartnerBinding(models.TransientModel):\n    \"\"\"\n        Handle the partner binding or generation in any CRM wizard that requires\n        such feature, like the lead2opportunity wizard, or the\n        phonecall2opportunity wizard.  Try to find a matching partner from the\n        CRM model's information (name, email, phone number, etc) or create a new\n        one on the fly.\n        Use it like a mixin with the wizard of your choice.\n    \"\"\"\n\n    _name = 'crm.partner.binding'\n    _description = 'Handle partner binding or generation in CRM wizards.'\n\n    @api.model\n    def default_get(self, fields):\n        res = super(PartnerBinding, self).default_get(fields)\n        partner_id = self._find_matching_partner()\n\n        if 'action' in fields and not res.get('action'):\n            res['action'] = 'exist' if partner_id else 'create'\n        if 'partner_id' in fields:\n            res['partner_id'] = partner_id\n        return res\n\n    action = fields.Selection([\n        ('exist', 'Link to an existing customer'),\n        ('create', 'Create a new customer'),\n        ('nothing', 'Do not link to a customer')\n    ], 'Related Customer', required=True)\n    partner_id = fields.Many2one('res.partner', 'Customer')\n\n    @api.model\n    def _find_matching_partner(self):\n        \"\"\" Try to find a matching partner regarding the active model data, like\n            the customer's name, email, phone number, etc.\n            :return int partner_id if any, False otherwise\n        \"\"\"\n        \n        if self._context.get('active_model') != 'crm.lead' or not self._context.get('active_id'):\n            return False\n\n        lead = self.env['crm.lead'].browse(self._context.get('active_id'))\n\n        \n        Partner = self.env['res.partner']\n        if lead.partner_id:  \n            return lead.partner_id.id\n\n        if lead.email_from:  \n            partner = Partner.search([('email', '=', lead.email_from)], limit=1)\n            return partner.id\n\n        if lead.partner_name:  \n            partner = Partner.search([('name', 'ilike', '%' + lead.partner_name + '%')], limit=1)\n            return partner.id\n\n        if lead.contact_name:\n            partner = Partner.search([('name', 'ilike', '%' + lead.contact_name+'%')], limit=1)\n            return partner.id\n\n        return False\n", "comments": "            handle partner binding generation crm wizard requires         feature  like lead2opportunity wizard          phonecall2opportunity wizard   try find matching partner         crm model information (name  email  phone number  etc) create new         one fly          use like mixin wizard choice                name    crm partner binding       description    handle partner binding generation crm wizards         api model     def default get(self  fields)          res   super(partnerbinding  self) default get(fields)         partner id   self  find matching partner()           action  fields res get( action )              res  action      exist  partner id else  create           partner id  fields              res  partner id     partner id         return res      action   fields selection(          ( exist    link existing customer )          ( create    create new customer )          ( nothing    do link customer )         related customer   required true)     partner id   fields many2one( res partner    customer )       api model     def  find matching partner(self)              try find matching partner regarding active model data  like             customer name  email  phone number  etc               return int partner id  false otherwise                    coding  utf 8        part odoo  see license file full copyright licensing details     active model lead    find best matching partner active model    partner set already    search existing partners based lead email    search existing partners based lead partner contact name ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass PartnerBinding(models.TransientModel):\n    \"\"\"\n        Handle the partner binding or generation in any CRM wizard that requires\n        such feature, like the lead2opportunity wizard, or the\n        phonecall2opportunity wizard.  Try to find a matching partner from the\n        CRM model's information (name, email, phone number, etc) or create a new\n        one on the fly.\n        Use it like a mixin with the wizard of your choice.\n    \"\"\"\n\n    _name = 'crm.partner.binding'\n    _description = 'Handle partner binding or generation in CRM wizards.'\n\n    @api.model\n    def default_get(self, fields):\n        res = super(PartnerBinding, self).default_get(fields)\n        partner_id = self._find_matching_partner()\n\n        if 'action' in fields and not res.get('action'):\n            res['action'] = 'exist' if partner_id else 'create'\n        if 'partner_id' in fields:\n            res['partner_id'] = partner_id\n        return res\n\n    action = fields.Selection([\n        ('exist', 'Link to an existing customer'),\n        ('create', 'Create a new customer'),\n        ('nothing', 'Do not link to a customer')\n    ], 'Related Customer', required=True)\n    partner_id = fields.Many2one('res.partner', 'Customer')\n\n    @api.model\n    def _find_matching_partner(self):\n        \"\"\" Try to find a matching partner regarding the active model data, like\n            the customer's name, email, phone number, etc.\n            :return int partner_id if any, False otherwise\n        \"\"\"\n        # active model has to be a lead\n        if self._context.get('active_model') != 'crm.lead' or not self._context.get('active_id'):\n            return False\n\n        lead = self.env['crm.lead'].browse(self._context.get('active_id'))\n\n        # find the best matching partner for the active model\n        Partner = self.env['res.partner']\n        if lead.partner_id:  # a partner is set already\n            return lead.partner_id.id\n\n        if lead.email_from:  # search through the existing partners based on the lead's email\n            partner = Partner.search([('email', '=', lead.email_from)], limit=1)\n            return partner.id\n\n        if lead.partner_name:  # search through the existing partners based on the lead's partner or contact name\n            partner = Partner.search([('name', 'ilike', '%' + lead.partner_name + '%')], limit=1)\n            return partner.id\n\n        if lead.contact_name:\n            partner = Partner.search([('name', 'ilike', '%' + lead.contact_name+'%')], limit=1)\n            return partner.id\n\n        return False\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "crm_partner_binding.py", "id": "7aecc98d7e6b60ca8e90ee8ab5aaeab4", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/crm/wizard/crm_partner_binding.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}