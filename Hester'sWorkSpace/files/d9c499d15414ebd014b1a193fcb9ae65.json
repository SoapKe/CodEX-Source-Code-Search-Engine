{"author": "django", "code": "from django.db.models import F, IntegerField, Value\nfrom django.db.utils import DatabaseError, NotSupportedError\nfrom django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n\nfrom .models import Number, ReservedName\n\n\n@skipUnlessDBFeature('supports_select_union')\nclass QuerySetSetOperationTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        Number.objects.bulk_create(Number(num=i) for i in range(10))\n\n    def number_transform(self, value):\n        return value.num\n\n    def assertNumbersEqual(self, queryset, expected_numbers, ordered=True):\n        self.assertQuerysetEqual(queryset, expected_numbers, self.number_transform, ordered)\n\n    def test_simple_union(self):\n        qs1 = Number.objects.filter(num__lte=1)\n        qs2 = Number.objects.filter(num__gte=8)\n        qs3 = Number.objects.filter(num=5)\n        self.assertNumbersEqual(qs1.union(qs2, qs3), [0, 1, 5, 8, 9], ordered=False)\n\n    @skipUnlessDBFeature('supports_select_intersection')\n    def test_simple_intersection(self):\n        qs1 = Number.objects.filter(num__lte=5)\n        qs2 = Number.objects.filter(num__gte=5)\n        qs3 = Number.objects.filter(num__gte=4, num__lte=6)\n        self.assertNumbersEqual(qs1.intersection(qs2, qs3), [5], ordered=False)\n\n    @skipUnlessDBFeature('supports_select_intersection')\n    def test_intersection_with_values(self):\n        ReservedName.objects.create(name='a', order=2)\n        qs1 = ReservedName.objects.all()\n        reserved_name = qs1.intersection(qs1).values('name', 'order', 'id').get()\n        self.assertEqual(reserved_name['name'], 'a')\n        self.assertEqual(reserved_name['order'], 2)\n        reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n        self.assertEqual(reserved_name[:2], ('a', 2))\n\n    @skipUnlessDBFeature('supports_select_difference')\n    def test_simple_difference(self):\n        qs1 = Number.objects.filter(num__lte=5)\n        qs2 = Number.objects.filter(num__lte=4)\n        self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n\n    def test_union_distinct(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.all()\n        self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n        self.assertEqual(len(list(qs1.union(qs2))), 10)\n\n    @skipUnlessDBFeature('supports_select_intersection')\n    def test_intersection_with_empty_qs(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.none()\n        qs3 = Number.objects.filter(pk__in=[])\n        self.assertEqual(len(qs1.intersection(qs2)), 0)\n        self.assertEqual(len(qs1.intersection(qs3)), 0)\n        self.assertEqual(len(qs2.intersection(qs1)), 0)\n        self.assertEqual(len(qs3.intersection(qs1)), 0)\n        self.assertEqual(len(qs2.intersection(qs2)), 0)\n        self.assertEqual(len(qs3.intersection(qs3)), 0)\n\n    @skipUnlessDBFeature('supports_select_difference')\n    def test_difference_with_empty_qs(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.none()\n        qs3 = Number.objects.filter(pk__in=[])\n        self.assertEqual(len(qs1.difference(qs2)), 10)\n        self.assertEqual(len(qs1.difference(qs3)), 10)\n        self.assertEqual(len(qs2.difference(qs1)), 0)\n        self.assertEqual(len(qs3.difference(qs1)), 0)\n        self.assertEqual(len(qs2.difference(qs2)), 0)\n        self.assertEqual(len(qs3.difference(qs3)), 0)\n\n    @skipUnlessDBFeature('supports_select_difference')\n    def test_difference_with_values(self):\n        ReservedName.objects.create(name='a', order=2)\n        qs1 = ReservedName.objects.all()\n        qs2 = ReservedName.objects.none()\n        reserved_name = qs1.difference(qs2).values('name', 'order', 'id').get()\n        self.assertEqual(reserved_name['name'], 'a')\n        self.assertEqual(reserved_name['order'], 2)\n        reserved_name = qs1.difference(qs2).values_list('name', 'order', 'id').get()\n        self.assertEqual(reserved_name[:2], ('a', 2))\n\n    def test_union_with_empty_qs(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.none()\n        qs3 = Number.objects.filter(pk__in=[])\n        self.assertEqual(len(qs1.union(qs2)), 10)\n        self.assertEqual(len(qs2.union(qs1)), 10)\n        self.assertEqual(len(qs1.union(qs3)), 10)\n        self.assertEqual(len(qs3.union(qs1)), 10)\n        self.assertEqual(len(qs2.union(qs1, qs1, qs1)), 10)\n        self.assertEqual(len(qs2.union(qs1, qs1, all=True)), 20)\n        self.assertEqual(len(qs2.union(qs2)), 0)\n        self.assertEqual(len(qs3.union(qs3)), 0)\n\n    def test_limits(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.all()\n        self.assertEqual(len(list(qs1.union(qs2)[:2])), 2)\n\n    def test_ordering(self):\n        qs1 = Number.objects.filter(num__lte=1)\n        qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n        self.assertNumbersEqual(qs1.union(qs2).order_by('-num'), [3, 2, 1, 0])\n\n    def test_union_with_values(self):\n        ReservedName.objects.create(name='a', order=2)\n        qs1 = ReservedName.objects.all()\n        reserved_name = qs1.union(qs1).values('name', 'order', 'id').get()\n        self.assertEqual(reserved_name['name'], 'a')\n        self.assertEqual(reserved_name['order'], 2)\n        reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n        self.assertEqual(reserved_name[:2], ('a', 2))\n\n    def test_count_union(self):\n        qs1 = Number.objects.filter(num__lte=1).values('num')\n        qs2 = Number.objects.filter(num__gte=2, num__lte=3).values('num')\n        self.assertEqual(qs1.union(qs2).count(), 4)\n\n    def test_count_union_empty_result(self):\n        qs = Number.objects.filter(pk__in=[])\n        self.assertEqual(qs.union(qs).count(), 0)\n\n    @skipUnlessDBFeature('supports_select_difference')\n    def test_count_difference(self):\n        qs1 = Number.objects.filter(num__lt=10)\n        qs2 = Number.objects.filter(num__lt=9)\n        self.assertEqual(qs1.difference(qs2).count(), 1)\n\n    @skipUnlessDBFeature('supports_select_intersection')\n    def test_count_intersection(self):\n        qs1 = Number.objects.filter(num__gte=5)\n        qs2 = Number.objects.filter(num__lte=5)\n        self.assertEqual(qs1.intersection(qs2).count(), 1)\n\n    @skipUnlessDBFeature('supports_slicing_ordering_in_compound')\n    def test_ordering_subqueries(self):\n        qs1 = Number.objects.order_by('num')[:2]\n        qs2 = Number.objects.order_by('-num')[:2]\n        self.assertNumbersEqual(qs1.union(qs2).order_by('-num')[:4], [9, 8, 1, 0])\n\n    @skipIfDBFeature('supports_slicing_ordering_in_compound')\n    def test_unsupported_ordering_slicing_raises_db_error(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.all()\n        msg = 'LIMIT/OFFSET not allowed in subqueries of compound statements'\n        with self.assertRaisesMessage(DatabaseError, msg):\n            list(qs1.union(qs2[:10]))\n        msg = 'ORDER BY not allowed in subqueries of compound statements'\n        with self.assertRaisesMessage(DatabaseError, msg):\n            list(qs1.order_by('id').union(qs2))\n\n    @skipIfDBFeature('supports_select_intersection')\n    def test_unsupported_intersection_raises_db_error(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.all()\n        msg = 'intersection is not supported on this database backend'\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            list(qs1.intersection(qs2))\n\n    def test_combining_multiple_models(self):\n        ReservedName.objects.create(name='99 little bugs', order=99)\n        qs1 = Number.objects.filter(num=1).values_list('num', flat=True)\n        qs2 = ReservedName.objects.values_list('order')\n        self.assertEqual(list(qs1.union(qs2).order_by('num')), [1, 99])\n\n    def test_order_raises_on_non_selected_column(self):\n        qs1 = Number.objects.filter().annotate(\n            annotation=Value(1, IntegerField()),\n        ).values('annotation', num2=F('num'))\n        qs2 = Number.objects.filter().values('id', 'num')\n        \n        list(qs1.union(qs2).order_by('annotation'))\n        list(qs1.union(qs2).order_by('num2'))\n        msg = 'ORDER BY term does not match any column in the result set'\n        \n        with self.assertRaisesMessage(DatabaseError, msg):\n            list(qs1.union(qs2).order_by('id'))\n        \n        with self.assertRaisesMessage(DatabaseError, msg):\n            list(qs1.union(qs2).order_by('num'))\n        \n        list(qs2.union(qs1).order_by('num'))\n", "comments": "  should raise     id  part select     num  got realiased num2    switched order   exists   ", "content": "from django.db.models import F, IntegerField, Value\nfrom django.db.utils import DatabaseError, NotSupportedError\nfrom django.test import TestCase, skipIfDBFeature, skipUnlessDBFeature\n\nfrom .models import Number, ReservedName\n\n\n@skipUnlessDBFeature('supports_select_union')\nclass QuerySetSetOperationTests(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        Number.objects.bulk_create(Number(num=i) for i in range(10))\n\n    def number_transform(self, value):\n        return value.num\n\n    def assertNumbersEqual(self, queryset, expected_numbers, ordered=True):\n        self.assertQuerysetEqual(queryset, expected_numbers, self.number_transform, ordered)\n\n    def test_simple_union(self):\n        qs1 = Number.objects.filter(num__lte=1)\n        qs2 = Number.objects.filter(num__gte=8)\n        qs3 = Number.objects.filter(num=5)\n        self.assertNumbersEqual(qs1.union(qs2, qs3), [0, 1, 5, 8, 9], ordered=False)\n\n    @skipUnlessDBFeature('supports_select_intersection')\n    def test_simple_intersection(self):\n        qs1 = Number.objects.filter(num__lte=5)\n        qs2 = Number.objects.filter(num__gte=5)\n        qs3 = Number.objects.filter(num__gte=4, num__lte=6)\n        self.assertNumbersEqual(qs1.intersection(qs2, qs3), [5], ordered=False)\n\n    @skipUnlessDBFeature('supports_select_intersection')\n    def test_intersection_with_values(self):\n        ReservedName.objects.create(name='a', order=2)\n        qs1 = ReservedName.objects.all()\n        reserved_name = qs1.intersection(qs1).values('name', 'order', 'id').get()\n        self.assertEqual(reserved_name['name'], 'a')\n        self.assertEqual(reserved_name['order'], 2)\n        reserved_name = qs1.intersection(qs1).values_list('name', 'order', 'id').get()\n        self.assertEqual(reserved_name[:2], ('a', 2))\n\n    @skipUnlessDBFeature('supports_select_difference')\n    def test_simple_difference(self):\n        qs1 = Number.objects.filter(num__lte=5)\n        qs2 = Number.objects.filter(num__lte=4)\n        self.assertNumbersEqual(qs1.difference(qs2), [5], ordered=False)\n\n    def test_union_distinct(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.all()\n        self.assertEqual(len(list(qs1.union(qs2, all=True))), 20)\n        self.assertEqual(len(list(qs1.union(qs2))), 10)\n\n    @skipUnlessDBFeature('supports_select_intersection')\n    def test_intersection_with_empty_qs(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.none()\n        qs3 = Number.objects.filter(pk__in=[])\n        self.assertEqual(len(qs1.intersection(qs2)), 0)\n        self.assertEqual(len(qs1.intersection(qs3)), 0)\n        self.assertEqual(len(qs2.intersection(qs1)), 0)\n        self.assertEqual(len(qs3.intersection(qs1)), 0)\n        self.assertEqual(len(qs2.intersection(qs2)), 0)\n        self.assertEqual(len(qs3.intersection(qs3)), 0)\n\n    @skipUnlessDBFeature('supports_select_difference')\n    def test_difference_with_empty_qs(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.none()\n        qs3 = Number.objects.filter(pk__in=[])\n        self.assertEqual(len(qs1.difference(qs2)), 10)\n        self.assertEqual(len(qs1.difference(qs3)), 10)\n        self.assertEqual(len(qs2.difference(qs1)), 0)\n        self.assertEqual(len(qs3.difference(qs1)), 0)\n        self.assertEqual(len(qs2.difference(qs2)), 0)\n        self.assertEqual(len(qs3.difference(qs3)), 0)\n\n    @skipUnlessDBFeature('supports_select_difference')\n    def test_difference_with_values(self):\n        ReservedName.objects.create(name='a', order=2)\n        qs1 = ReservedName.objects.all()\n        qs2 = ReservedName.objects.none()\n        reserved_name = qs1.difference(qs2).values('name', 'order', 'id').get()\n        self.assertEqual(reserved_name['name'], 'a')\n        self.assertEqual(reserved_name['order'], 2)\n        reserved_name = qs1.difference(qs2).values_list('name', 'order', 'id').get()\n        self.assertEqual(reserved_name[:2], ('a', 2))\n\n    def test_union_with_empty_qs(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.none()\n        qs3 = Number.objects.filter(pk__in=[])\n        self.assertEqual(len(qs1.union(qs2)), 10)\n        self.assertEqual(len(qs2.union(qs1)), 10)\n        self.assertEqual(len(qs1.union(qs3)), 10)\n        self.assertEqual(len(qs3.union(qs1)), 10)\n        self.assertEqual(len(qs2.union(qs1, qs1, qs1)), 10)\n        self.assertEqual(len(qs2.union(qs1, qs1, all=True)), 20)\n        self.assertEqual(len(qs2.union(qs2)), 0)\n        self.assertEqual(len(qs3.union(qs3)), 0)\n\n    def test_limits(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.all()\n        self.assertEqual(len(list(qs1.union(qs2)[:2])), 2)\n\n    def test_ordering(self):\n        qs1 = Number.objects.filter(num__lte=1)\n        qs2 = Number.objects.filter(num__gte=2, num__lte=3)\n        self.assertNumbersEqual(qs1.union(qs2).order_by('-num'), [3, 2, 1, 0])\n\n    def test_union_with_values(self):\n        ReservedName.objects.create(name='a', order=2)\n        qs1 = ReservedName.objects.all()\n        reserved_name = qs1.union(qs1).values('name', 'order', 'id').get()\n        self.assertEqual(reserved_name['name'], 'a')\n        self.assertEqual(reserved_name['order'], 2)\n        reserved_name = qs1.union(qs1).values_list('name', 'order', 'id').get()\n        self.assertEqual(reserved_name[:2], ('a', 2))\n\n    def test_count_union(self):\n        qs1 = Number.objects.filter(num__lte=1).values('num')\n        qs2 = Number.objects.filter(num__gte=2, num__lte=3).values('num')\n        self.assertEqual(qs1.union(qs2).count(), 4)\n\n    def test_count_union_empty_result(self):\n        qs = Number.objects.filter(pk__in=[])\n        self.assertEqual(qs.union(qs).count(), 0)\n\n    @skipUnlessDBFeature('supports_select_difference')\n    def test_count_difference(self):\n        qs1 = Number.objects.filter(num__lt=10)\n        qs2 = Number.objects.filter(num__lt=9)\n        self.assertEqual(qs1.difference(qs2).count(), 1)\n\n    @skipUnlessDBFeature('supports_select_intersection')\n    def test_count_intersection(self):\n        qs1 = Number.objects.filter(num__gte=5)\n        qs2 = Number.objects.filter(num__lte=5)\n        self.assertEqual(qs1.intersection(qs2).count(), 1)\n\n    @skipUnlessDBFeature('supports_slicing_ordering_in_compound')\n    def test_ordering_subqueries(self):\n        qs1 = Number.objects.order_by('num')[:2]\n        qs2 = Number.objects.order_by('-num')[:2]\n        self.assertNumbersEqual(qs1.union(qs2).order_by('-num')[:4], [9, 8, 1, 0])\n\n    @skipIfDBFeature('supports_slicing_ordering_in_compound')\n    def test_unsupported_ordering_slicing_raises_db_error(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.all()\n        msg = 'LIMIT/OFFSET not allowed in subqueries of compound statements'\n        with self.assertRaisesMessage(DatabaseError, msg):\n            list(qs1.union(qs2[:10]))\n        msg = 'ORDER BY not allowed in subqueries of compound statements'\n        with self.assertRaisesMessage(DatabaseError, msg):\n            list(qs1.order_by('id').union(qs2))\n\n    @skipIfDBFeature('supports_select_intersection')\n    def test_unsupported_intersection_raises_db_error(self):\n        qs1 = Number.objects.all()\n        qs2 = Number.objects.all()\n        msg = 'intersection is not supported on this database backend'\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            list(qs1.intersection(qs2))\n\n    def test_combining_multiple_models(self):\n        ReservedName.objects.create(name='99 little bugs', order=99)\n        qs1 = Number.objects.filter(num=1).values_list('num', flat=True)\n        qs2 = ReservedName.objects.values_list('order')\n        self.assertEqual(list(qs1.union(qs2).order_by('num')), [1, 99])\n\n    def test_order_raises_on_non_selected_column(self):\n        qs1 = Number.objects.filter().annotate(\n            annotation=Value(1, IntegerField()),\n        ).values('annotation', num2=F('num'))\n        qs2 = Number.objects.filter().values('id', 'num')\n        # Should not raise\n        list(qs1.union(qs2).order_by('annotation'))\n        list(qs1.union(qs2).order_by('num2'))\n        msg = 'ORDER BY term does not match any column in the result set'\n        # 'id' is not part of the select\n        with self.assertRaisesMessage(DatabaseError, msg):\n            list(qs1.union(qs2).order_by('id'))\n        # 'num' got realiased to num2\n        with self.assertRaisesMessage(DatabaseError, msg):\n            list(qs1.union(qs2).order_by('num'))\n        # switched order, now 'exists' again:\n        list(qs2.union(qs1).order_by('num'))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_qs_combinators.py", "id": "d9c499d15414ebd014b1a193fcb9ae65", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/queries/test_qs_combinators.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}