{"author": "mailpile", "code": "\n\n\n To start creating a new plugin, it may make sense to copy this file,\n globally search/replace the word \"Demo\" with your preferred plugin\n name and then go delete sections you aren't going to use.\n\n Happy hacking!\n\nfrom gettext import gettext as _\nfrom mailpile.plugins import PluginManager\n\n\n[ Pluggable configuration ]\n\n FIXME\n\n\n[ Pluggable keyword extractors ]\n\n FIXME\n\n\n[ Pluggable search terms ]\n\n Pluggable search terms allow plugins to enhance the behavior of the\n search engine in various ways. Examples of basic enhanced search terms\n are the date: and size: keywords, which accept human-friendly ranges\n and input, and convert those to a list of \"low level\" keywords to\n actually search for.\n\n FIXME\n\n\n[ Pluggable vcard functions ]\nfrom mailpile.vcard import *\n\n\nclass DemoVCardImporter(VCardImporter):\n    \"\"\"\n    This VCard importer simply generates VCards based on data in the\n    configuration. This is not particularly useful, but it demonstrates\n    how each importer can define (and use) its own settings.\n    \"\"\"\n    FORMAT_NAME = _('Demo Contacts')\n    FORMAT_DESCRPTION = _('This is the demo importer')\n    SHORT_NAME = 'demo'\n    CONFIG_RULES = {\n        'active': [_('Activate demo importer'), bool, True],\n        'name': [_('Contact name'), str, 'Mr. Rogers'],\n        'email': [_('Contact email'), 'email', 'mr@rogers.com']\n    }\n\n    def get_vcards(self):\n        \"\"\"Returns just a single contact, based on data from the config.\"\"\"\n         Notes to implementors:\n        \n          - It is important to only return one card per (set of)\n            e-mail addresses, as internal overwriting may cause\n            unexpected results.\n          - If data is to be deleted from the contact list, it\n            is important to return a VCard for that e-mail address\n            which has the relevant data removed.\n        \n        if not self.config.active:\n            return []\n        return [MailpileVCard(\n            VCardLine(name='fn', value=self.config.name),\n            VCardLine(name='email', value=self.config.email)\n        )]\n\n\n[ Pluggable cron jobs ]\n\ndef TickJob(session):\n    \"\"\"\n    This is a very minimal cron job - just a function that runs within\n    a session.\n\n    Note that generally it is a better pattern to create a Command which\n    is then invoked by the cron job, so power users can access the\n    functionality directly.  It is also a good idea to make the interval\n    configurable by registering a setting and referencing that instead of\n    a fixed number.  See compose.py for an example of how this is done.\n    \"\"\"\n    session.ui.notify('Tick!')\n\n\n[ Pluggable commands and data views ]\n\nfrom mailpile.commands import Command\nfrom mailpile.util import md5_hex\n\n\nclass md5sumCommand(Command):\n    \"\"\"This command calculates MD5 sums\"\"\"\n    SYNOPSIS_ARGS = '[<data to hash>]'\n    SPLIT_ARG = False\n    HTTP_CALLABLE = ('GET', 'POST')\n    HTTP_QUERY_VARS = {\n       'data': 'Data to hash'\n    }\n\n    def command(self):\n        if 'data' in self.data:\n            data = self.data['data'][0]\n        else:\n            data = ''.join(self.args)\n\n        for gross in self.session.config.sys.md5sum_blacklist.split():\n            if gross in data or not data:\n                return self._error(_('I refuse to work with empty '\n                                     'or gross data'),\n                                   info={'data': data})\n\n        return self._success(_('I hashed your data for you, yay!'),\n                             result=md5_hex(data))\n\n\nclass md5sumWordyView(md5sumCommand):\n    \"\"\"Represent MD5 sums in a more wordy way.\"\"\"\n    @classmethod\n    def view(cls, result):\n        return 'MD5:%s' % result\n\n\ndef on_plugin_start(config):\n    \"\"\"Called once after plugin is loaded.\n\n    You can initialize external or expensive dependencies here.\n\n    Args:\n        config: The Mailpile configuration dictionary\n\n    Returns:\n        void\n    \"\"\"\n     initialize some external dependencies\n    pass\n\n\ndef on_plugin_shutdown(config):\n    \"\"\"Called before plugin is stopped.\n\n    Shutdown external dependencies here, especially if they created some threads.\n\n    Args:\n        config: The Mailpile configuration dictionary\n\n    Returns:\n        void\n    \"\"\"\n     properly shutdown external dependencies\n    pass\n\n\nclass DemoMailbox(object):\n    \"\"\"A dysfunctional demo mailbox. See mailpile.mailboxes.* for proper mailbox examples\"\"\"\n    @classmethod\n    def parse_path(cls, config, fn, create=False):\n        raise ValueError('This is only a demo mailbox class!')\n", "comments": "        this vcard importer simply generates vcards based data     configuration  this particularly useful  demonstrates     importer define (and use) settings              format name    ( demo contacts )     format descrption    ( this demo importer )     short name    demo      config rules              active     ( activate demo importer )  bool  true            name     ( contact name )  str   mr  rogers             email     ( contact email )   email    mr rogers com              def get vcards(self)             returns single contact  based data config               notes implementors                         it important return one card per (set of)              e mail addresses  internal overwriting may cause              unexpected results               if data deleted contact list               important return vcard e mail address              relevant data removed                    self config active              return            return  mailpilevcard(             vcardline(name  fn   value self config name)              vcardline(name  email   value self config email)         )        pluggable cron jobs                                                         def tickjob(session)              this minimal cron job   function runs within     session       note generally better pattern create command     invoked cron job  power users access     functionality directly   it also good idea make interval     configurable registering setting referencing instead     fixed number   see compose py example done              session ui notify( tick  )       pluggable commands data views                                           mailpile commands import command mailpile util import md5 hex   class md5sumcommand(command)         this command calculates md5 sums        synopsis args      data hash        split arg   false     http callable   ( get    post )     http query vars             data    data hash             def command(self)           data  self data              data   self data  data   0          else              data      join(self args)          gross self session config sys md5sum blacklist split()              gross data data                  return self  error( ( i refuse work empty                                         gross data )                                     info   data   data )          return self  success( ( i hashed data  yay  )                               result md5 hex(data))   class md5sumwordyview(md5sumcommand)         represent md5 sums wordy way          classmethod     def view(cls  result)          return  md5     result   def plugin start(config)         called plugin loaded       you initialize external expensive dependencies       args          config  the mailpile configuration dictionary      returns          void               initialize external dependencies     pass   def plugin shutdown(config)         called plugin stopped       shutdown external dependencies  especially created threads       args          config  the mailpile configuration dictionary      returns          void               properly shutdown external dependencies     pass   class demomailbox(object)         a dysfunctional demo mailbox  see mailpile mailboxes   proper mailbox examples       this collection short demo plugins illustrate    create register hooks various parts mailpile       to start creating new plugin  may make sense copy file     globally search replace word  demo  preferred plugin    name go delete sections going use        happy hacking       pluggable configuration                                                       fixme      pluggable keyword extractors                                                  fixme      pluggable search terms                                                        pluggable search terms allow plugins enhance behavior    search engine various ways  examples basic enhanced search terms    date  size  keywords  accept human friendly ranges    input  convert list  low level  keywords    actually search     fixme      pluggable vcard functions                                                     notes implementors           it important return one card per (set of)       e mail addresses  internal overwriting may cause       unexpected results        if data deleted contact list        important return vcard e mail address       relevant data removed          pluggable cron jobs                                                             pluggable commands data views                                             initialize external dependencies    properly shutdown external dependencies ", "content": "# This is a collection of very short demo-plugins to illustrate how\n# to create and register hooks into the various parts of Mailpile\n#\n# To start creating a new plugin, it may make sense to copy this file,\n# globally search/replace the word \"Demo\" with your preferred plugin\n# name and then go delete sections you aren't going to use.\n#\n# Happy hacking!\n\nfrom gettext import gettext as _\nfrom mailpile.plugins import PluginManager\n\n\n##[ Pluggable configuration ]#################################################\n\n# FIXME\n\n\n##[ Pluggable keyword extractors ]############################################\n\n# FIXME\n\n\n##[ Pluggable search terms ]##################################################\n\n# Pluggable search terms allow plugins to enhance the behavior of the\n# search engine in various ways. Examples of basic enhanced search terms\n# are the date: and size: keywords, which accept human-friendly ranges\n# and input, and convert those to a list of \"low level\" keywords to\n# actually search for.\n\n# FIXME\n\n\n##[ Pluggable vcard functions ]###############################################\nfrom mailpile.vcard import *\n\n\nclass DemoVCardImporter(VCardImporter):\n    \"\"\"\n    This VCard importer simply generates VCards based on data in the\n    configuration. This is not particularly useful, but it demonstrates\n    how each importer can define (and use) its own settings.\n    \"\"\"\n    FORMAT_NAME = _('Demo Contacts')\n    FORMAT_DESCRPTION = _('This is the demo importer')\n    SHORT_NAME = 'demo'\n    CONFIG_RULES = {\n        'active': [_('Activate demo importer'), bool, True],\n        'name': [_('Contact name'), str, 'Mr. Rogers'],\n        'email': [_('Contact email'), 'email', 'mr@rogers.com']\n    }\n\n    def get_vcards(self):\n        \"\"\"Returns just a single contact, based on data from the config.\"\"\"\n        # Notes to implementors:\n        #\n        #  - It is important to only return one card per (set of)\n        #    e-mail addresses, as internal overwriting may cause\n        #    unexpected results.\n        #  - If data is to be deleted from the contact list, it\n        #    is important to return a VCard for that e-mail address\n        #    which has the relevant data removed.\n        #\n        if not self.config.active:\n            return []\n        return [MailpileVCard(\n            VCardLine(name='fn', value=self.config.name),\n            VCardLine(name='email', value=self.config.email)\n        )]\n\n\n##[ Pluggable cron jobs ]#####################################################\n\ndef TickJob(session):\n    \"\"\"\n    This is a very minimal cron job - just a function that runs within\n    a session.\n\n    Note that generally it is a better pattern to create a Command which\n    is then invoked by the cron job, so power users can access the\n    functionality directly.  It is also a good idea to make the interval\n    configurable by registering a setting and referencing that instead of\n    a fixed number.  See compose.py for an example of how this is done.\n    \"\"\"\n    session.ui.notify('Tick!')\n\n\n##[ Pluggable commands and data views ]#######################################\n\nfrom mailpile.commands import Command\nfrom mailpile.util import md5_hex\n\n\nclass md5sumCommand(Command):\n    \"\"\"This command calculates MD5 sums\"\"\"\n    SYNOPSIS_ARGS = '[<data to hash>]'\n    SPLIT_ARG = False\n    HTTP_CALLABLE = ('GET', 'POST')\n    HTTP_QUERY_VARS = {\n       'data': 'Data to hash'\n    }\n\n    def command(self):\n        if 'data' in self.data:\n            data = self.data['data'][0]\n        else:\n            data = ''.join(self.args)\n\n        for gross in self.session.config.sys.md5sum_blacklist.split():\n            if gross in data or not data:\n                return self._error(_('I refuse to work with empty '\n                                     'or gross data'),\n                                   info={'data': data})\n\n        return self._success(_('I hashed your data for you, yay!'),\n                             result=md5_hex(data))\n\n\nclass md5sumWordyView(md5sumCommand):\n    \"\"\"Represent MD5 sums in a more wordy way.\"\"\"\n    @classmethod\n    def view(cls, result):\n        return 'MD5:%s' % result\n\n\ndef on_plugin_start(config):\n    \"\"\"Called once after plugin is loaded.\n\n    You can initialize external or expensive dependencies here.\n\n    Args:\n        config: The Mailpile configuration dictionary\n\n    Returns:\n        void\n    \"\"\"\n    # initialize some external dependencies\n    pass\n\n\ndef on_plugin_shutdown(config):\n    \"\"\"Called before plugin is stopped.\n\n    Shutdown external dependencies here, especially if they created some threads.\n\n    Args:\n        config: The Mailpile configuration dictionary\n\n    Returns:\n        void\n    \"\"\"\n    # properly shutdown external dependencies\n    pass\n\n\nclass DemoMailbox(object):\n    \"\"\"A dysfunctional demo mailbox. See mailpile.mailboxes.* for proper mailbox examples\"\"\"\n    @classmethod\n    def parse_path(cls, config, fn, create=False):\n        raise ValueError('This is only a demo mailbox class!')\n", "description": "A free & open modern, fast email client with user-friendly encryption and privacy features", "file_name": "demos.py", "id": "111bb3eb65971b687ff2c1997a4ebed6", "language": "Python", "project_name": "Mailpile", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mailpile-Mailpile/mailpile-Mailpile-8ebc5fe/external-plugins/demos/demos.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:54:52Z", "url": "https://github.com/mailpile/Mailpile", "wiki": true}