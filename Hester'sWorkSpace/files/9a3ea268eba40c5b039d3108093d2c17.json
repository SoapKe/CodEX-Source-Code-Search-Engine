{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport logging\n\nfrom odoo import models, fields, api, _\n\n_logger = logging.getLogger(__name__)\n\n\nclass BarcodeRule(models.Model):\n    _inherit = 'barcode.rule'\n\n    type = fields.Selection(selection_add=[\n        ('credit', _('Credit Card'))\n    ])\n\n\nclass PosMercuryConfiguration(models.Model):\n    _name = 'pos_mercury.configuration'\n\n    name = fields.Char(required=True, help='Name of this Mercury configuration')\n    merchant_id = fields.Char(string='Merchant ID', required=True, help='ID of the merchant to authenticate him on the payment provider server')\n    merchant_pwd = fields.Char(string='Merchant Password', required=True, help='Password of the merchant to authenticate him on the payment provider server')\n\n\nclass AccountBankStatementLine(models.Model):\n    _inherit = \"account.bank.statement.line\"\n\n    mercury_card_number = fields.Char(string='Card Number', help='The last 4 numbers of the card used to pay')\n    mercury_prefixed_card_number = fields.Char(string='Card Number', compute='_compute_prefixed_card_number', help='The card number used for the payment.')\n    mercury_card_brand = fields.Char(string='Card Brand', help='The brand of the payment card (e.g. Visa, AMEX, ...)')\n    mercury_card_owner_name = fields.Char(string='Card Owner Name', help='The name of the card owner')\n    mercury_ref_no = fields.Char(string='Mercury reference number', help='Payment reference number from Mercury Pay')\n    mercury_record_no = fields.Char(string='Mercury record number', help='Payment record number from Mercury Pay')\n    mercury_invoice_no = fields.Char(string='Mercury invoice number', help='Invoice number from Mercury Pay')\n\n    @api.one\n    def _compute_prefixed_card_number(self):\n        if self.mercury_card_number:\n            self.mercury_prefixed_card_number = \"********\" + self.mercury_card_number\n        else:\n            self.mercury_prefixed_card_number = \"\"\n\n\nclass AccountJournal(models.Model):\n    _inherit = 'account.journal'\n\n    pos_mercury_config_id = fields.Many2one('pos_mercury.configuration', string='Mercury Credentials', help='The configuration of Mercury used for this journal')\n\n\nclass PosOrder(models.Model):\n    _inherit = \"pos.order\"\n\n    @api.model\n    def _payment_fields(self, ui_paymentline):\n        fields = super(PosOrder, self)._payment_fields(ui_paymentline)\n\n        fields.update({\n            'card_number': ui_paymentline.get('mercury_card_number'),\n            'card_brand': ui_paymentline.get('mercury_card_brand'),\n            'card_owner_name': ui_paymentline.get('mercury_card_owner_name'),\n            'ref_no': ui_paymentline.get('mercury_ref_no'),\n            'record_no': ui_paymentline.get('mercury_record_no'),\n            'invoice_no': ui_paymentline.get('mercury_invoice_no')\n        })\n\n        return fields\n\n    def add_payment(self, data):\n        statement_id = super(PosOrder, self).add_payment(data)\n        statement_lines = self.env['account.bank.statement.line'].search([('statement_id', '=', statement_id),\n                                                                         ('pos_statement_id', '=', self.id),\n                                                                         ('journal_id', '=', data['journal']),\n                                                                         ('amount', '=', data['amount'])])\n\n        \n        \n        \n        \n        for line in statement_lines:\n            if not line.mercury_card_brand:\n                line.mercury_card_brand = data.get('card_brand')\n                line.mercury_card_number = data.get('card_number')\n                line.mercury_card_owner_name = data.get('card_owner_name')\n\n                line.mercury_ref_no = data.get('ref_no')\n                line.mercury_record_no = data.get('record_no')\n                line.mercury_invoice_no = data.get('invoice_no')\n\n                break\n\n        return statement_id\n\n\nclass AutoVacuum(models.AbstractModel):\n    _inherit = 'ir.autovacuum'\n\n    @api.model\n    def power_on(self, *args, **kwargs):\n        self.env['pos_mercury.mercury_transaction'].cleanup_old_tokens()\n        return super(AutoVacuum, self).power_on(*args, **kwargs)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     get multiple statement lines  1 credit    card payments amount  in case    matter statement line pick  pick one    already used  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport logging\n\nfrom odoo import models, fields, api, _\n\n_logger = logging.getLogger(__name__)\n\n\nclass BarcodeRule(models.Model):\n    _inherit = 'barcode.rule'\n\n    type = fields.Selection(selection_add=[\n        ('credit', _('Credit Card'))\n    ])\n\n\nclass PosMercuryConfiguration(models.Model):\n    _name = 'pos_mercury.configuration'\n\n    name = fields.Char(required=True, help='Name of this Mercury configuration')\n    merchant_id = fields.Char(string='Merchant ID', required=True, help='ID of the merchant to authenticate him on the payment provider server')\n    merchant_pwd = fields.Char(string='Merchant Password', required=True, help='Password of the merchant to authenticate him on the payment provider server')\n\n\nclass AccountBankStatementLine(models.Model):\n    _inherit = \"account.bank.statement.line\"\n\n    mercury_card_number = fields.Char(string='Card Number', help='The last 4 numbers of the card used to pay')\n    mercury_prefixed_card_number = fields.Char(string='Card Number', compute='_compute_prefixed_card_number', help='The card number used for the payment.')\n    mercury_card_brand = fields.Char(string='Card Brand', help='The brand of the payment card (e.g. Visa, AMEX, ...)')\n    mercury_card_owner_name = fields.Char(string='Card Owner Name', help='The name of the card owner')\n    mercury_ref_no = fields.Char(string='Mercury reference number', help='Payment reference number from Mercury Pay')\n    mercury_record_no = fields.Char(string='Mercury record number', help='Payment record number from Mercury Pay')\n    mercury_invoice_no = fields.Char(string='Mercury invoice number', help='Invoice number from Mercury Pay')\n\n    @api.one\n    def _compute_prefixed_card_number(self):\n        if self.mercury_card_number:\n            self.mercury_prefixed_card_number = \"********\" + self.mercury_card_number\n        else:\n            self.mercury_prefixed_card_number = \"\"\n\n\nclass AccountJournal(models.Model):\n    _inherit = 'account.journal'\n\n    pos_mercury_config_id = fields.Many2one('pos_mercury.configuration', string='Mercury Credentials', help='The configuration of Mercury used for this journal')\n\n\nclass PosOrder(models.Model):\n    _inherit = \"pos.order\"\n\n    @api.model\n    def _payment_fields(self, ui_paymentline):\n        fields = super(PosOrder, self)._payment_fields(ui_paymentline)\n\n        fields.update({\n            'card_number': ui_paymentline.get('mercury_card_number'),\n            'card_brand': ui_paymentline.get('mercury_card_brand'),\n            'card_owner_name': ui_paymentline.get('mercury_card_owner_name'),\n            'ref_no': ui_paymentline.get('mercury_ref_no'),\n            'record_no': ui_paymentline.get('mercury_record_no'),\n            'invoice_no': ui_paymentline.get('mercury_invoice_no')\n        })\n\n        return fields\n\n    def add_payment(self, data):\n        statement_id = super(PosOrder, self).add_payment(data)\n        statement_lines = self.env['account.bank.statement.line'].search([('statement_id', '=', statement_id),\n                                                                         ('pos_statement_id', '=', self.id),\n                                                                         ('journal_id', '=', data['journal']),\n                                                                         ('amount', '=', data['amount'])])\n\n        # we can get multiple statement_lines when there are >1 credit\n        # card payments with the same amount. In that case it doesn't\n        # matter which statement line we pick, just pick one that\n        # isn't already used.\n        for line in statement_lines:\n            if not line.mercury_card_brand:\n                line.mercury_card_brand = data.get('card_brand')\n                line.mercury_card_number = data.get('card_number')\n                line.mercury_card_owner_name = data.get('card_owner_name')\n\n                line.mercury_ref_no = data.get('ref_no')\n                line.mercury_record_no = data.get('record_no')\n                line.mercury_invoice_no = data.get('invoice_no')\n\n                break\n\n        return statement_id\n\n\nclass AutoVacuum(models.AbstractModel):\n    _inherit = 'ir.autovacuum'\n\n    @api.model\n    def power_on(self, *args, **kwargs):\n        self.env['pos_mercury.mercury_transaction'].cleanup_old_tokens()\n        return super(AutoVacuum, self).power_on(*args, **kwargs)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "pos_mercury.py", "id": "9a3ea268eba40c5b039d3108093d2c17", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/pos_mercury/models/pos_mercury.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}