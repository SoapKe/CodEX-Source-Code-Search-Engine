{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_parse_qs\nfrom ..utils import (\n    xpath_text,\n    xpath_element,\n    int_or_none,\n    parse_iso8601,\n    ExtractorError,\n)\n\n\nclass RICEIE(InfoExtractor):\n    _VALID_URL = r'https?://mediahub\\.rice\\.edu/app/[Pp]ortal/video\\.aspx\\?(?P<query>.+)'\n    _TEST = {\n        'url': 'https://mediahub.rice.edu/app/Portal/video.aspx?PortalID=25ffd62c-3d01-4b29-8c70-7c94270efb3e&DestinationID=66bc9434-03bd-4725-b47e-c659d8d809db&ContentID=YEWIvbhb40aqdjMD1ALSqw',\n        'md5': '9b83b4a2eead4912dc3b7fac7c449b6a',\n        'info_dict': {\n            'id': 'YEWIvbhb40aqdjMD1ALSqw',\n            'ext': 'mp4',\n            'title': 'Active Learning in Archeology',\n            'upload_date': '20140616',\n            'timestamp': 1402926346,\n        }\n    }\n    _NS = 'http://schemas.datacontract.org/2004/07/ensembleVideo.Data.Service.Contracts.Models.Player.Config'\n\n    def _real_extract(self, url):\n        qs = compat_parse_qs(re.match(self._VALID_URL, url).group('query'))\n        if not qs.get('PortalID') or not qs.get('DestinationID') or not qs.get('ContentID'):\n            raise ExtractorError('Invalid URL', expected=True)\n\n        portal_id = qs['PortalID'][0]\n        playlist_id = qs['DestinationID'][0]\n        content_id = qs['ContentID'][0]\n\n        content_data = self._download_xml('https://mediahub.rice.edu/api/portal/GetContentTitle', content_id, query={\n            'portalId': portal_id,\n            'playlistId': playlist_id,\n            'contentId': content_id\n        })\n        metadata = xpath_element(content_data, './/metaData', fatal=True)\n        title = xpath_text(metadata, 'primaryTitle', fatal=True)\n        encodings = xpath_element(content_data, './/encodings', fatal=True)\n        player_data = self._download_xml('https://mediahub.rice.edu/api/player/GetPlayerConfig', content_id, query={\n            'temporaryLinkId': xpath_text(encodings, 'temporaryLinkId', fatal=True),\n            'contentId': content_id,\n        })\n\n        common_fmt = {}\n        dimensions = xpath_text(encodings, 'dimensions')\n        if dimensions:\n            wh = dimensions.split('x')\n            if len(wh) == 2:\n                common_fmt.update({\n                    'width': int_or_none(wh[0]),\n                    'height': int_or_none(wh[1]),\n                })\n\n        formats = []\n        rtsp_path = xpath_text(player_data, self._xpath_ns('RtspPath', self._NS))\n        if rtsp_path:\n            fmt = {\n                'url': rtsp_path,\n                'format_id': 'rtsp',\n            }\n            fmt.update(common_fmt)\n            formats.append(fmt)\n        for source in player_data.findall(self._xpath_ns('.//Source', self._NS)):\n            video_url = xpath_text(source, self._xpath_ns('File', self._NS))\n            if not video_url:\n                continue\n            if '.m3u8' in video_url:\n                formats.extend(self._extract_m3u8_formats(video_url, content_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'url': video_url,\n                    'format_id': video_url.split(':')[0],\n                }\n                fmt.update(common_fmt)\n                rtmp = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', video_url)\n                if rtmp:\n                    fmt.update({\n                        'url': rtmp.group('url'),\n                        'play_path': rtmp.group('playpath'),\n                        'app': rtmp.group('app'),\n                        'ext': 'flv',\n                    })\n                formats.append(fmt)\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for content_asset in content_data.findall('.//contentAssets'):\n            asset_type = xpath_text(content_asset, 'type')\n            if asset_type == 'image':\n                image_url = xpath_text(content_asset, 'httpPath')\n                if not image_url:\n                    continue\n                thumbnails.append({\n                    'id': xpath_text(content_asset, 'ID'),\n                    'url': image_url,\n                })\n\n        return {\n            'id': content_id,\n            'title': title,\n            'description': xpath_text(metadata, 'abstract'),\n            'duration': int_or_none(xpath_text(metadata, 'duration')),\n            'timestamp': parse_iso8601(xpath_text(metadata, 'dateUpdated')),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_parse_qs\nfrom ..utils import (\n    xpath_text,\n    xpath_element,\n    int_or_none,\n    parse_iso8601,\n    ExtractorError,\n)\n\n\nclass RICEIE(InfoExtractor):\n    _VALID_URL = r'https?://mediahub\\.rice\\.edu/app/[Pp]ortal/video\\.aspx\\?(?P<query>.+)'\n    _TEST = {\n        'url': 'https://mediahub.rice.edu/app/Portal/video.aspx?PortalID=25ffd62c-3d01-4b29-8c70-7c94270efb3e&DestinationID=66bc9434-03bd-4725-b47e-c659d8d809db&ContentID=YEWIvbhb40aqdjMD1ALSqw',\n        'md5': '9b83b4a2eead4912dc3b7fac7c449b6a',\n        'info_dict': {\n            'id': 'YEWIvbhb40aqdjMD1ALSqw',\n            'ext': 'mp4',\n            'title': 'Active Learning in Archeology',\n            'upload_date': '20140616',\n            'timestamp': 1402926346,\n        }\n    }\n    _NS = 'http://schemas.datacontract.org/2004/07/ensembleVideo.Data.Service.Contracts.Models.Player.Config'\n\n    def _real_extract(self, url):\n        qs = compat_parse_qs(re.match(self._VALID_URL, url).group('query'))\n        if not qs.get('PortalID') or not qs.get('DestinationID') or not qs.get('ContentID'):\n            raise ExtractorError('Invalid URL', expected=True)\n\n        portal_id = qs['PortalID'][0]\n        playlist_id = qs['DestinationID'][0]\n        content_id = qs['ContentID'][0]\n\n        content_data = self._download_xml('https://mediahub.rice.edu/api/portal/GetContentTitle', content_id, query={\n            'portalId': portal_id,\n            'playlistId': playlist_id,\n            'contentId': content_id\n        })\n        metadata = xpath_element(content_data, './/metaData', fatal=True)\n        title = xpath_text(metadata, 'primaryTitle', fatal=True)\n        encodings = xpath_element(content_data, './/encodings', fatal=True)\n        player_data = self._download_xml('https://mediahub.rice.edu/api/player/GetPlayerConfig', content_id, query={\n            'temporaryLinkId': xpath_text(encodings, 'temporaryLinkId', fatal=True),\n            'contentId': content_id,\n        })\n\n        common_fmt = {}\n        dimensions = xpath_text(encodings, 'dimensions')\n        if dimensions:\n            wh = dimensions.split('x')\n            if len(wh) == 2:\n                common_fmt.update({\n                    'width': int_or_none(wh[0]),\n                    'height': int_or_none(wh[1]),\n                })\n\n        formats = []\n        rtsp_path = xpath_text(player_data, self._xpath_ns('RtspPath', self._NS))\n        if rtsp_path:\n            fmt = {\n                'url': rtsp_path,\n                'format_id': 'rtsp',\n            }\n            fmt.update(common_fmt)\n            formats.append(fmt)\n        for source in player_data.findall(self._xpath_ns('.//Source', self._NS)):\n            video_url = xpath_text(source, self._xpath_ns('File', self._NS))\n            if not video_url:\n                continue\n            if '.m3u8' in video_url:\n                formats.extend(self._extract_m3u8_formats(video_url, content_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False))\n            else:\n                fmt = {\n                    'url': video_url,\n                    'format_id': video_url.split(':')[0],\n                }\n                fmt.update(common_fmt)\n                rtmp = re.search(r'^(?P<url>rtmp://[^/]+/(?P<app>.+))/(?P<playpath>mp4:.+)$', video_url)\n                if rtmp:\n                    fmt.update({\n                        'url': rtmp.group('url'),\n                        'play_path': rtmp.group('playpath'),\n                        'app': rtmp.group('app'),\n                        'ext': 'flv',\n                    })\n                formats.append(fmt)\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for content_asset in content_data.findall('.//contentAssets'):\n            asset_type = xpath_text(content_asset, 'type')\n            if asset_type == 'image':\n                image_url = xpath_text(content_asset, 'httpPath')\n                if not image_url:\n                    continue\n                thumbnails.append({\n                    'id': xpath_text(content_asset, 'ID'),\n                    'url': image_url,\n                })\n\n        return {\n            'id': content_id,\n            'title': title,\n            'description': xpath_text(metadata, 'abstract'),\n            'duration': int_or_none(xpath_text(metadata, 'duration')),\n            'timestamp': parse_iso8601(xpath_text(metadata, 'dateUpdated')),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rice.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rice.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}