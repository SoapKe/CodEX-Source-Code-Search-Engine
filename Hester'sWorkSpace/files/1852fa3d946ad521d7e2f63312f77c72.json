{"author": "tornadoweb", "code": "\n\n\"\"\"Usage: python file_uploader.py [--put] file1.txt file2.png ...\n\nDemonstrates uploading files to a server, without concurrency. It can either\nPOST a multipart-form-encoded request containing one or more files, or PUT a\nsingle file without encoding.\n\nSee also file_receiver.py in this directory, a server that receives uploads.\n\"\"\"\n\nfrom __future__ import print_function\nimport mimetypes\nimport os\nimport sys\nfrom functools import partial\nfrom uuid import uuid4\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    \n    from urllib import quote\n\nfrom tornado import gen, httpclient, ioloop\nfrom tornado.options import define, options\n\n\n\n\n@gen.coroutine\ndef multipart_producer(boundary, filenames, write):\n    boundary_bytes = boundary.encode()\n\n    for filename in filenames:\n        filename_bytes = filename.encode()\n        mtype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n        buf = (\n            (b'--%s\\r\\n' % boundary_bytes) +\n            (b'Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"\\r\\n' %\n             (filename_bytes, filename_bytes)) +\n            (b'Content-Type: %s\\r\\n' % mtype.encode()) +\n            b'\\r\\n'\n        )\n        yield write(buf)\n        with open(filename, 'rb') as f:\n            while True:\n                \n                chunk = f.read(16 * 1024)\n                if not chunk:\n                    break\n                yield write(chunk)\n\n        yield write(b'\\r\\n')\n\n    yield write(b'--%s--\\r\\n' % (boundary_bytes,))\n\n\n\n\n@gen.coroutine\ndef post(filenames):\n    client = httpclient.AsyncHTTPClient()\n    boundary = uuid4().hex\n    headers = {'Content-Type': 'multipart/form-data; boundary=%s' % boundary}\n    producer = partial(multipart_producer, boundary, filenames)\n    response = yield client.fetch('http://localhost:8888/post',\n                                  method='POST',\n                                  headers=headers,\n                                  body_producer=producer)\n\n    print(response)\n\n\n@gen.coroutine\ndef raw_producer(filename, write):\n    with open(filename, 'rb') as f:\n        while True:\n            \n            chunk = f.read(16 * 1024)\n            if not chunk:\n                \n                break\n\n            yield write(chunk)\n\n\n@gen.coroutine\ndef put(filenames):\n    client = httpclient.AsyncHTTPClient()\n    for filename in filenames:\n        mtype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n        headers = {'Content-Type': mtype}\n        producer = partial(raw_producer, filename)\n        url_path = quote(os.path.basename(filename))\n        response = yield client.fetch('http://localhost:8888/%s' % url_path,\n                                      method='PUT',\n                                      headers=headers,\n                                      body_producer=producer)\n        print(response)\n\n\nif __name__ == \"__main__\":\n    define(\"put\", type=bool, help=\"Use PUT instead of POST\", group=\"file uploader\")\n\n    \n    filenames = options.parse_command_line()\n    if not filenames:\n        print(\"Provide a list of filenames to upload.\", file=sys.stderr)\n        sys.exit(1)\n\n    method = put if options.put else post\n    ioloop.IOLoop.current().run_sync(lambda: method(filenames))\n", "comments": "   usage  python file uploader py    put  file1 txt file2 png      demonstrates uploading files server  without concurrency  it either post multipart form encoded request containing one files  put single file without encoding   see also file receiver py directory  server receives uploads          usr bin env python    python 2     using http post  upload one files single multipart form encoded    request     16k time     using http put  upload one raw file  this preferred large files since    server stream data instead buffering entirely memory     16k time     complete     tornado configures logging command line opts returns remaining args  ", "content": "#!/usr/bin/env python\n\n\"\"\"Usage: python file_uploader.py [--put] file1.txt file2.png ...\n\nDemonstrates uploading files to a server, without concurrency. It can either\nPOST a multipart-form-encoded request containing one or more files, or PUT a\nsingle file without encoding.\n\nSee also file_receiver.py in this directory, a server that receives uploads.\n\"\"\"\n\nfrom __future__ import print_function\nimport mimetypes\nimport os\nimport sys\nfrom functools import partial\nfrom uuid import uuid4\n\ntry:\n    from urllib.parse import quote\nexcept ImportError:\n    # Python 2.\n    from urllib import quote\n\nfrom tornado import gen, httpclient, ioloop\nfrom tornado.options import define, options\n\n\n# Using HTTP POST, upload one or more files in a single multipart-form-encoded\n# request.\n@gen.coroutine\ndef multipart_producer(boundary, filenames, write):\n    boundary_bytes = boundary.encode()\n\n    for filename in filenames:\n        filename_bytes = filename.encode()\n        mtype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n        buf = (\n            (b'--%s\\r\\n' % boundary_bytes) +\n            (b'Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"\\r\\n' %\n             (filename_bytes, filename_bytes)) +\n            (b'Content-Type: %s\\r\\n' % mtype.encode()) +\n            b'\\r\\n'\n        )\n        yield write(buf)\n        with open(filename, 'rb') as f:\n            while True:\n                # 16k at a time.\n                chunk = f.read(16 * 1024)\n                if not chunk:\n                    break\n                yield write(chunk)\n\n        yield write(b'\\r\\n')\n\n    yield write(b'--%s--\\r\\n' % (boundary_bytes,))\n\n\n# Using HTTP PUT, upload one raw file. This is preferred for large files since\n# the server can stream the data instead of buffering it entirely in memory.\n@gen.coroutine\ndef post(filenames):\n    client = httpclient.AsyncHTTPClient()\n    boundary = uuid4().hex\n    headers = {'Content-Type': 'multipart/form-data; boundary=%s' % boundary}\n    producer = partial(multipart_producer, boundary, filenames)\n    response = yield client.fetch('http://localhost:8888/post',\n                                  method='POST',\n                                  headers=headers,\n                                  body_producer=producer)\n\n    print(response)\n\n\n@gen.coroutine\ndef raw_producer(filename, write):\n    with open(filename, 'rb') as f:\n        while True:\n            # 16K at a time.\n            chunk = f.read(16 * 1024)\n            if not chunk:\n                # Complete.\n                break\n\n            yield write(chunk)\n\n\n@gen.coroutine\ndef put(filenames):\n    client = httpclient.AsyncHTTPClient()\n    for filename in filenames:\n        mtype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'\n        headers = {'Content-Type': mtype}\n        producer = partial(raw_producer, filename)\n        url_path = quote(os.path.basename(filename))\n        response = yield client.fetch('http://localhost:8888/%s' % url_path,\n                                      method='PUT',\n                                      headers=headers,\n                                      body_producer=producer)\n        print(response)\n\n\nif __name__ == \"__main__\":\n    define(\"put\", type=bool, help=\"Use PUT instead of POST\", group=\"file uploader\")\n\n    # Tornado configures logging from command line opts and returns remaining args.\n    filenames = options.parse_command_line()\n    if not filenames:\n        print(\"Provide a list of filenames to upload.\", file=sys.stderr)\n        sys.exit(1)\n\n    method = put if options.put else post\n    ioloop.IOLoop.current().run_sync(lambda: method(filenames))\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "file_uploader.py", "id": "1852fa3d946ad521d7e2f63312f77c72", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tornadoweb-tornado/tornadoweb-tornado-62e43f6/demos/file_upload/file_uploader.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:11:42Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}