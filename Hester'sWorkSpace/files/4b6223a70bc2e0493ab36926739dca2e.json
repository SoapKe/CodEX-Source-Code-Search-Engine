{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom datetime import datetime\nfrom odoo.tests.common import TransactionCase\nfrom dateutil.relativedelta import relativedelta\n\n\nclass TestHrContracts(TransactionCase):\n\n    def setUp(self):\n        super(TestHrContracts, self).setUp()\n        self.contracts = self.env['hr.contract'].with_context(tracking_disable=True)\n        self.employee = self.env.ref('hr.employee_root')\n        self.test_contract = dict(name='Test', wage=1, employee_id=self.employee.id, state='open')\n\n    def apply_cron(self):\n        self.env.ref('hr_contract.ir_cron_data_contract_update_state').method_direct_trigger()\n\n    def test_contract_enddate(self):\n        self.test_contract.update(dict(date_end=datetime.now() + relativedelta(days=100)))\n        self.contract = self.contracts.create(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'open')\n\n        self.test_contract.update(dict(date_end=datetime.now() + relativedelta(days=5)))\n        self.contract.write(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'pending')\n\n        self.test_contract.update({\n            'date_start': datetime.now() + relativedelta(days=-50),\n            'date_end': datetime.now() + relativedelta(days=-1),\n            'state': 'pending',\n        })\n        self.contract.write(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'close')\n\n    def test_contract_pending_visa_expire(self):\n        self.employee.visa_expire = datetime.now() + relativedelta(days=30)\n        self.test_contract.update(dict(date_end=False))\n        self.contract = self.contracts.create(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'pending')\n\n        self.employee.visa_expire = datetime.now() + relativedelta(days=-5)\n        self.test_contract.update({\n            'date_start': datetime.now() + relativedelta(days=-50),\n            'state': 'pending',\n        })\n        self.contract.write(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'close')\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nfrom datetime import datetime\nfrom odoo.tests.common import TransactionCase\nfrom dateutil.relativedelta import relativedelta\n\n\nclass TestHrContracts(TransactionCase):\n\n    def setUp(self):\n        super(TestHrContracts, self).setUp()\n        self.contracts = self.env['hr.contract'].with_context(tracking_disable=True)\n        self.employee = self.env.ref('hr.employee_root')\n        self.test_contract = dict(name='Test', wage=1, employee_id=self.employee.id, state='open')\n\n    def apply_cron(self):\n        self.env.ref('hr_contract.ir_cron_data_contract_update_state').method_direct_trigger()\n\n    def test_contract_enddate(self):\n        self.test_contract.update(dict(date_end=datetime.now() + relativedelta(days=100)))\n        self.contract = self.contracts.create(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'open')\n\n        self.test_contract.update(dict(date_end=datetime.now() + relativedelta(days=5)))\n        self.contract.write(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'pending')\n\n        self.test_contract.update({\n            'date_start': datetime.now() + relativedelta(days=-50),\n            'date_end': datetime.now() + relativedelta(days=-1),\n            'state': 'pending',\n        })\n        self.contract.write(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'close')\n\n    def test_contract_pending_visa_expire(self):\n        self.employee.visa_expire = datetime.now() + relativedelta(days=30)\n        self.test_contract.update(dict(date_end=False))\n        self.contract = self.contracts.create(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'pending')\n\n        self.employee.visa_expire = datetime.now() + relativedelta(days=-5)\n        self.test_contract.update({\n            'date_start': datetime.now() + relativedelta(days=-50),\n            'state': 'pending',\n        })\n        self.contract.write(self.test_contract)\n        self.apply_cron()\n        self.assertEquals(self.contract.state, 'close')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_auto_status.py", "id": "4b6223a70bc2e0493ab36926739dca2e", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_contract/tests/test_auto_status.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}