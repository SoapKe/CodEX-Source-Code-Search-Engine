{"author": "HelloZeroNet", "code": "import time\nimport os\n\nimport ContentDb\n\nclass ContentDbDict(dict):\n    def __init__(self, site, *args, **kwargs):\n        s = time.time()\n        self.site = site\n        self.cached_keys = []\n        self.log = self.site.log\n        self.db = ContentDb.getContentDb()\n        self.db_id = self.db.needSite(site)\n        self.num_loaded = 0\n        super(ContentDbDict, self).__init__(self.db.loadDbDict(site))  \n        self.log.debug(\"ContentDb init: %.3fs, found files: %s, sites: %s\" % (time.time() - s, len(self), len(self.db.site_ids)))\n\n    def loadItem(self, key):\n        try:\n            self.num_loaded += 1\n            if self.num_loaded % 100 == 0:\n                self.log.debug(\"Loaded json: %s (latest: %s)\" % (self.num_loaded, key))\n            content = self.site.storage.loadJson(key)\n            dict.__setitem__(self, key, content)\n        except IOError:\n            if dict.get(self, key):\n                self.__delitem__(key)  \n            raise KeyError(key)\n\n        self.addCachedKey(key)\n        self.checkLimit()\n\n        return content\n\n    def getItemSize(self, key):\n        return self.site.storage.getSize(key)\n\n    \n    def checkLimit(self):\n        if len(self.cached_keys) > 10:\n            key_deleted = self.cached_keys.pop(0)\n            dict.__setitem__(self, key_deleted, False)\n\n    def addCachedKey(self, key):\n        if key not in self.cached_keys and key != \"content.json\" and len(key) > 40:  \n            self.cached_keys.append(key)\n\n    def __getitem__(self, key):\n        val = dict.get(self, key)\n        if val:  \n            return val\n        elif val is None:  \n            raise KeyError(key)\n        elif val is False:  \n            return self.loadItem(key)\n\n    def __setitem__(self, key, val):\n        self.addCachedKey(key)\n        self.checkLimit()\n        size = self.getItemSize(key)\n        self.db.setContent(self.site, key, val, size)\n        dict.__setitem__(self, key, val)\n\n    def __delitem__(self, key):\n        self.db.deleteContent(self.site, key)\n        dict.__delitem__(self, key)\n        try:\n            self.cached_keys.remove(key)\n        except ValueError:\n            pass\n\n    def iteritems(self):\n        for key in dict.keys(self):\n            try:\n                val = self[key]\n            except Exception as err:\n                self.log.warning(\"Error loading %s: %s\" % (key, err))\n                continue\n            yield key, val\n\n    def items(self):\n        back = []\n        for key in dict.keys(self):\n            try:\n                val = self[key]\n            except Exception as err:\n                self.log.warning(\"Error loading %s: %s\" % (key, err))\n                continue\n            back.append((key, val))\n        return back\n\n    def values(self):\n        back = []\n        for key, val in dict.iteritems(self):\n            if not val:\n                try:\n                    val = self.loadItem(key)\n                except Exception:\n                    continue\n            back.append(val)\n        return back\n\n    def get(self, key, default=None):\n        try:\n            return self.__getitem__(key)\n        except KeyError:\n            return default\n        except Exception as err:\n            self.site.bad_files[key] = self.site.bad_files.get(key, 1)\n            dict.__delitem__(self, key)\n            self.log.warning(\"Error loading %s: %s\" % (key, err))\n            return default\n\n    def execute(self, query, params={}):\n        params[\"site_id\"] = self.db_id\n        return self.db.execute(query, params)\n\nif __name__ == \"__main__\":\n    import psutil\n    process = psutil.Process(os.getpid())\n    s_mem = process.memory_info()[0] / float(2 ** 20)\n    root = \"data-live/1MaiL5gfBM1cyb4a8e3iiL8L5gXmoAJu27\"\n    contents = ContentDbDict(\"1MaiL5gfBM1cyb4a8e3iiL8L5gXmoAJu27\", root)\n    print \"Init len\", len(contents)\n\n    s = time.time()\n    for dir_name in os.listdir(root + \"/data/users/\")[0:8000]:\n        contents[\"data/users/%s/content.json\" % dir_name]\n    print \"Load: %.3fs\" % (time.time() - s)\n\n    s = time.time()\n    found = 0\n    for key, val in contents.iteritems():\n        found += 1\n        assert key\n        assert val\n    print \"Found:\", found\n    print \"Iteritem: %.3fs\" % (time.time() - s)\n\n    s = time.time()\n    found = 0\n    for key in contents.keys():\n        found += 1\n        assert key in contents\n    print \"In: %.3fs\" % (time.time() - s)\n\n    print \"Len:\", len(contents.values()), len(contents.keys())\n\n    print \"Mem: +\", process.memory_info()[0] / float(2 ** 20) - s_mem\n", "comments": "  load keys database    file exists anymore    only keep last 10 accessed json memory    always keep keys smaller 40 char    already loaded    unknown key    loaded  purged cache ", "content": "import time\nimport os\n\nimport ContentDb\n\nclass ContentDbDict(dict):\n    def __init__(self, site, *args, **kwargs):\n        s = time.time()\n        self.site = site\n        self.cached_keys = []\n        self.log = self.site.log\n        self.db = ContentDb.getContentDb()\n        self.db_id = self.db.needSite(site)\n        self.num_loaded = 0\n        super(ContentDbDict, self).__init__(self.db.loadDbDict(site))  # Load keys from database\n        self.log.debug(\"ContentDb init: %.3fs, found files: %s, sites: %s\" % (time.time() - s, len(self), len(self.db.site_ids)))\n\n    def loadItem(self, key):\n        try:\n            self.num_loaded += 1\n            if self.num_loaded % 100 == 0:\n                self.log.debug(\"Loaded json: %s (latest: %s)\" % (self.num_loaded, key))\n            content = self.site.storage.loadJson(key)\n            dict.__setitem__(self, key, content)\n        except IOError:\n            if dict.get(self, key):\n                self.__delitem__(key)  # File not exists anymore\n            raise KeyError(key)\n\n        self.addCachedKey(key)\n        self.checkLimit()\n\n        return content\n\n    def getItemSize(self, key):\n        return self.site.storage.getSize(key)\n\n    # Only keep last 10 accessed json in memory\n    def checkLimit(self):\n        if len(self.cached_keys) > 10:\n            key_deleted = self.cached_keys.pop(0)\n            dict.__setitem__(self, key_deleted, False)\n\n    def addCachedKey(self, key):\n        if key not in self.cached_keys and key != \"content.json\" and len(key) > 40:  # Always keep keys smaller than 40 char\n            self.cached_keys.append(key)\n\n    def __getitem__(self, key):\n        val = dict.get(self, key)\n        if val:  # Already loaded\n            return val\n        elif val is None:  # Unknown key\n            raise KeyError(key)\n        elif val is False:  # Loaded before, but purged from cache\n            return self.loadItem(key)\n\n    def __setitem__(self, key, val):\n        self.addCachedKey(key)\n        self.checkLimit()\n        size = self.getItemSize(key)\n        self.db.setContent(self.site, key, val, size)\n        dict.__setitem__(self, key, val)\n\n    def __delitem__(self, key):\n        self.db.deleteContent(self.site, key)\n        dict.__delitem__(self, key)\n        try:\n            self.cached_keys.remove(key)\n        except ValueError:\n            pass\n\n    def iteritems(self):\n        for key in dict.keys(self):\n            try:\n                val = self[key]\n            except Exception as err:\n                self.log.warning(\"Error loading %s: %s\" % (key, err))\n                continue\n            yield key, val\n\n    def items(self):\n        back = []\n        for key in dict.keys(self):\n            try:\n                val = self[key]\n            except Exception as err:\n                self.log.warning(\"Error loading %s: %s\" % (key, err))\n                continue\n            back.append((key, val))\n        return back\n\n    def values(self):\n        back = []\n        for key, val in dict.iteritems(self):\n            if not val:\n                try:\n                    val = self.loadItem(key)\n                except Exception:\n                    continue\n            back.append(val)\n        return back\n\n    def get(self, key, default=None):\n        try:\n            return self.__getitem__(key)\n        except KeyError:\n            return default\n        except Exception as err:\n            self.site.bad_files[key] = self.site.bad_files.get(key, 1)\n            dict.__delitem__(self, key)\n            self.log.warning(\"Error loading %s: %s\" % (key, err))\n            return default\n\n    def execute(self, query, params={}):\n        params[\"site_id\"] = self.db_id\n        return self.db.execute(query, params)\n\nif __name__ == \"__main__\":\n    import psutil\n    process = psutil.Process(os.getpid())\n    s_mem = process.memory_info()[0] / float(2 ** 20)\n    root = \"data-live/1MaiL5gfBM1cyb4a8e3iiL8L5gXmoAJu27\"\n    contents = ContentDbDict(\"1MaiL5gfBM1cyb4a8e3iiL8L5gXmoAJu27\", root)\n    print \"Init len\", len(contents)\n\n    s = time.time()\n    for dir_name in os.listdir(root + \"/data/users/\")[0:8000]:\n        contents[\"data/users/%s/content.json\" % dir_name]\n    print \"Load: %.3fs\" % (time.time() - s)\n\n    s = time.time()\n    found = 0\n    for key, val in contents.iteritems():\n        found += 1\n        assert key\n        assert val\n    print \"Found:\", found\n    print \"Iteritem: %.3fs\" % (time.time() - s)\n\n    s = time.time()\n    found = 0\n    for key in contents.keys():\n        found += 1\n        assert key in contents\n    print \"In: %.3fs\" % (time.time() - s)\n\n    print \"Len:\", len(contents.values()), len(contents.keys())\n\n    print \"Mem: +\", process.memory_info()[0] / float(2 ** 20) - s_mem\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "ContentDbDict.py", "id": "5e7f81840ef6acace1cb67e8fa8fedfc", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/Content/ContentDbDict.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}