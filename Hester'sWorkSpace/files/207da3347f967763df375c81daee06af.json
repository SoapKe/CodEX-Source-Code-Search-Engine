{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\n Copyright (C) 2017 Lenovo, Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Module to download new image to Lenovo Switches\n Lenovo Networking\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: cnos_image\nauthor: \"Dave Kasberg (@dkasberg)\"\nshort_description: Perform firmware upgrade/download from a remote server on devices running Lenovo CNOS\ndescription:\n    - This module allows you to work with switch firmware images. It provides a way to download a firmware image\n     to a network device from a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory\n     from where the remote server can be reached. The next step is to provide the full file path of the image's\n     location. Authentication details required by the remote server must be provided as well. By default, this\n     method makes the newly downloaded firmware image the active image, which will be used by the switch during the\n     next restart.\n     This module uses SSH to manage network device configuration.\n     The results of the operation will be placed in a directory named 'results'\n     that must be created by the user in their local directory to where the playbook is run.\n     For more information about this module from Lenovo and customizing it usage for your\n     use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_image.html)\nversion_added: \"2.3\"\nextends_documentation_fragment: cnos\noptions:\n    protocol:\n        description:\n            - This refers to the protocol used by the network device to interact with the remote server from where\n             to download the firmware image. The choices are FTP, SFTP, TFTP, or SCP. Any other protocols will\n             result in error. If this parameter is not specified, there is no default value to be used.\n        required: true\n        choices: [SFTP, SCP, FTP, TFTP]\n    serverip:\n        description:\n            - This specifies the IP Address of the remote server from where the software image will be downloaded.\n        required: true\n    imgpath:\n        description:\n            - This specifies the full file path of the image located on the remote server. In case the relative path\n             is used as the variable value, the root folder for the user of the server needs to be specified.\n        required: true\n    imgtype:\n        description:\n            - This specifies the firmware image type to be downloaded\n        required: true\n        choices: [all, boot, os, onie]\n    serverusername:\n        description:\n            - Specify the username for the server relating to the protocol used.\n        required: true\n    serverpassword:\n        description:\n            - Specify the password for the server relating to the protocol used.\n'''\nEXAMPLES = '''\nTasks : The following are examples of using the module cnos_image. These are written in the main.yml file of the tasks directory.\n---\n- name: Test Image transfer\n  cnos_image:\n      host: \"{{ inventory_hostname }}\"\n      username: \"{{ hostvars[inventory_hostname]['username'] }}\"\n      password: \"{{ hostvars[inventory_hostname]['password'] }}\"\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      enablePassword: \"{{ hostvars[inventory_hostname]['enablePassword'] }}\"\n      outputfile: \"./results/test_image_{{ inventory_hostname }}_output.txt\"\n      protocol: \"sftp\"\n      serverip: \"10.241.106.118\"\n      imgpath: \"/root/cnos_images/G8272-10.1.0.112.img\"\n      imgtype: \"os\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Image tftp\n  cnos_image:\n      host: \"{{ inventory_hostname }}\"\n      username: \"{{ hostvars[inventory_hostname]['username'] }}\"\n      password: \"{{ hostvars[inventory_hostname]['password'] }}\"\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      enablePassword: \"{{ hostvars[inventory_hostname]['enablePassword'] }}\"\n      outputfile: \"./results/test_image_{{ inventory_hostname }}_output.txt\"\n      protocol: \"tftp\"\n      serverip: \"10.241.106.118\"\n      imgpath: \"/anil/G8272-10.2.0.34.img\"\n      imgtype: \"os\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n'''\nRETURN = '''\nmsg:\n  description: Success or failure message\n  returned: always\n  type: string\n  sample: \"Image file tranferred to device\"\n'''\n\nimport sys\ntry:\n    import paramiko\n    HAS_PARAMIKO = True\nexcept ImportError:\n    HAS_PARAMIKO = False\nimport time\nimport socket\nimport array\nimport json\nimport time\nimport re\ntry:\n    from ansible.module_utils.network.cnos import cnos\n    HAS_LIB = True\nexcept:\n    HAS_LIB = False\nfrom ansible.module_utils.basic import AnsibleModule\nfrom collections import defaultdict\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            outputfile=dict(required=True),\n            host=dict(required=True),\n            username=dict(required=True),\n            password=dict(required=True, no_log=True),\n            enablePassword=dict(required=False, no_log=True),\n            deviceType=dict(required=True),\n            protocol=dict(required=True),\n            serverip=dict(required=True),\n            imgpath=dict(required=True),\n            imgtype=dict(required=True),\n            serverusername=dict(required=False),\n            serverpassword=dict(required=False, no_log=True),),\n        supports_check_mode=False)\n\n    username = module.params['username']\n    password = module.params['password']\n    enablePassword = module.params['enablePassword']\n    outputfile = module.params['outputfile']\n    host = module.params['host']\n    deviceType = module.params['deviceType']\n    protocol = module.params['protocol'].lower()\n    imgserverip = module.params['serverip']\n    imgpath = module.params['imgpath']\n    imgtype = module.params['imgtype']\n    imgserveruser = module.params['serverusername']\n    imgserverpwd = module.params['serverpassword']\n    output = \"\"\n    timeout = 120\n    tftptimeout = 600\n    if not HAS_PARAMIKO:\n        module.fail_json(msg='paramiko is required for this module')\n\n     Create instance of SSHClient object\n    remote_conn_pre = paramiko.SSHClient()\n\n     Automatically add untrusted hosts (make sure okay for security policy in your environment)\n    remote_conn_pre.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n     initiate SSH connection with the switch\n    remote_conn_pre.connect(host, username=username, password=password)\n    time.sleep(2)\n\n     Use invoke_shell to establish an 'interactive session'\n    remote_conn = remote_conn_pre.invoke_shell()\n    time.sleep(2)\n\n     Enable and enter configure terminal then send command\n    output = output + cnos.waitForDeviceResponse(\"\\n\", \">\", 2, remote_conn)\n\n    output = output + cnos.enterEnableModeForDevice(enablePassword, 3, remote_conn)\n\n     Make terminal length = 0\n    output = output + cnos.waitForDeviceResponse(\"terminal length 0\\n\", \"\", 2, remote_conn)\n\n    transfer_status = \"\"\n     Invoke method for image transfer from server\n    if(protocol == \"tftp\" or protocol == \"ftp\"):\n        transfer_status = cnos.doImageTransfer(protocol, tftptimeout, imgserverip, imgpath, imgtype, imgserveruser, imgserverpwd, remote_conn)\n    elif(protocol == \"sftp\" or protocol == \"scp\"):\n        transfer_status = cnos.doSecureImageTransfer(protocol, timeout, imgserverip, imgpath, imgtype, imgserveruser, imgserverpwd, remote_conn)\n    else:\n        transfer_status = \"Invalid Protocol option\"\n\n    output = output + \"\\n Image Transfer status \\n\" + transfer_status\n\n     Save it into the file\n    file = open(outputfile, \"a\")\n    file.write(output)\n    file.close()\n\n     Logic to check when changes occur or not\n    errorMsg = cnos.checkOutputForError(output)\n    if(errorMsg is None):\n        module.exit_json(changed=True, msg=\"Image file tranferred to device\")\n    else:\n        module.fail_json(msg=errorMsg)\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  cnos image author   dave kasberg ( dkasberg)  short description  perform firmware upgrade download remote server devices running lenovo cnos description        this module allows work switch firmware images  it provides way download firmware image      network device remote server using ftp  sftp  tftp  scp  the first step create directory      remote server reached  the next step provide full file path image      location  authentication details required remote server must provided well  by default       method makes newly downloaded firmware image active image  used switch      next restart       this module uses ssh manage network device configuration       the results operation placed directory named  results       must created user local directory playbook run       for information module lenovo customizing usage      use cases  please visit u(http   systemx lenovofiles com help index jsp topic  2fcom lenovo switchmgt ansible doc 2fcnos image html) version added   2 3  extends documentation fragment  cnos options      protocol          description                this refers protocol used network device interact remote server              download firmware image  the choices ftp  sftp  tftp  scp  any protocols              result error  if parameter specified  default value used          required  true         choices   sftp  scp  ftp  tftp      serverip          description                this specifies ip address remote server software image downloaded          required  true     imgpath          description                this specifies full file path image located remote server  in case relative path              used variable value  root folder user server needs specified          required  true     imgtype          description                this specifies firmware image type downloaded         required  true         choices    boot  os  onie      serverusername          description                specify username server relating protocol used          required  true     serverpassword          description                specify password server relating protocol used      examples       tasks   the following examples using module cnos image  these written main yml file tasks directory        name  test image transfer   cnos image        host      inventory hostname           username      hostvars inventory hostname   username             password      hostvars inventory hostname   password             devicetype      hostvars inventory hostname   devicetype             enablepassword      hostvars inventory hostname   enablepassword             outputfile     results test image    inventory hostname    output txt        protocol   sftp        serverip   10 241 106 118        imgpath    root cnos images g8272 10 1 0 112 img        imgtype   os        serverusername   root        serverpassword   root123     name  test image tftp   cnos image        host      inventory hostname           username      hostvars inventory hostname   username             password      hostvars inventory hostname   password             devicetype      hostvars inventory hostname   devicetype             enablepassword      hostvars inventory hostname   enablepassword             outputfile     results test image    inventory hostname    output txt        protocol   tftp        serverip   10 241 106 118        imgpath    anil g8272 10 2 0 34 img        imgtype   os        serverusername   root        serverpassword   root123      return       msg    description  success failure message   returned  always   type  string   sample   image file tranferred device          usr bin python        coding  utf 8           copyright (c) 2017 lenovo  inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          module download new image lenovo switches    lenovo networking       create instance sshclient object    automatically add untrusted hosts (make sure okay security policy environment)    initiate ssh connection switch    use invoke shell establish  interactive session     enable enter configure terminal send command    make terminal length   0    invoke method image transfer server    save file    logic check changes occur ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n#\n# Copyright (C) 2017 Lenovo, Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n# Module to download new image to Lenovo Switches\n# Lenovo Networking\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: cnos_image\nauthor: \"Dave Kasberg (@dkasberg)\"\nshort_description: Perform firmware upgrade/download from a remote server on devices running Lenovo CNOS\ndescription:\n    - This module allows you to work with switch firmware images. It provides a way to download a firmware image\n     to a network device from a remote server using FTP, SFTP, TFTP, or SCP. The first step is to create a directory\n     from where the remote server can be reached. The next step is to provide the full file path of the image's\n     location. Authentication details required by the remote server must be provided as well. By default, this\n     method makes the newly downloaded firmware image the active image, which will be used by the switch during the\n     next restart.\n     This module uses SSH to manage network device configuration.\n     The results of the operation will be placed in a directory named 'results'\n     that must be created by the user in their local directory to where the playbook is run.\n     For more information about this module from Lenovo and customizing it usage for your\n     use cases, please visit U(http://systemx.lenovofiles.com/help/index.jsp?topic=%2Fcom.lenovo.switchmgt.ansible.doc%2Fcnos_image.html)\nversion_added: \"2.3\"\nextends_documentation_fragment: cnos\noptions:\n    protocol:\n        description:\n            - This refers to the protocol used by the network device to interact with the remote server from where\n             to download the firmware image. The choices are FTP, SFTP, TFTP, or SCP. Any other protocols will\n             result in error. If this parameter is not specified, there is no default value to be used.\n        required: true\n        choices: [SFTP, SCP, FTP, TFTP]\n    serverip:\n        description:\n            - This specifies the IP Address of the remote server from where the software image will be downloaded.\n        required: true\n    imgpath:\n        description:\n            - This specifies the full file path of the image located on the remote server. In case the relative path\n             is used as the variable value, the root folder for the user of the server needs to be specified.\n        required: true\n    imgtype:\n        description:\n            - This specifies the firmware image type to be downloaded\n        required: true\n        choices: [all, boot, os, onie]\n    serverusername:\n        description:\n            - Specify the username for the server relating to the protocol used.\n        required: true\n    serverpassword:\n        description:\n            - Specify the password for the server relating to the protocol used.\n'''\nEXAMPLES = '''\nTasks : The following are examples of using the module cnos_image. These are written in the main.yml file of the tasks directory.\n---\n- name: Test Image transfer\n  cnos_image:\n      host: \"{{ inventory_hostname }}\"\n      username: \"{{ hostvars[inventory_hostname]['username'] }}\"\n      password: \"{{ hostvars[inventory_hostname]['password'] }}\"\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      enablePassword: \"{{ hostvars[inventory_hostname]['enablePassword'] }}\"\n      outputfile: \"./results/test_image_{{ inventory_hostname }}_output.txt\"\n      protocol: \"sftp\"\n      serverip: \"10.241.106.118\"\n      imgpath: \"/root/cnos_images/G8272-10.1.0.112.img\"\n      imgtype: \"os\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n\n- name: Test Image tftp\n  cnos_image:\n      host: \"{{ inventory_hostname }}\"\n      username: \"{{ hostvars[inventory_hostname]['username'] }}\"\n      password: \"{{ hostvars[inventory_hostname]['password'] }}\"\n      deviceType: \"{{ hostvars[inventory_hostname]['deviceType'] }}\"\n      enablePassword: \"{{ hostvars[inventory_hostname]['enablePassword'] }}\"\n      outputfile: \"./results/test_image_{{ inventory_hostname }}_output.txt\"\n      protocol: \"tftp\"\n      serverip: \"10.241.106.118\"\n      imgpath: \"/anil/G8272-10.2.0.34.img\"\n      imgtype: \"os\"\n      serverusername: \"root\"\n      serverpassword: \"root123\"\n'''\nRETURN = '''\nmsg:\n  description: Success or failure message\n  returned: always\n  type: string\n  sample: \"Image file tranferred to device\"\n'''\n\nimport sys\ntry:\n    import paramiko\n    HAS_PARAMIKO = True\nexcept ImportError:\n    HAS_PARAMIKO = False\nimport time\nimport socket\nimport array\nimport json\nimport time\nimport re\ntry:\n    from ansible.module_utils.network.cnos import cnos\n    HAS_LIB = True\nexcept:\n    HAS_LIB = False\nfrom ansible.module_utils.basic import AnsibleModule\nfrom collections import defaultdict\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            outputfile=dict(required=True),\n            host=dict(required=True),\n            username=dict(required=True),\n            password=dict(required=True, no_log=True),\n            enablePassword=dict(required=False, no_log=True),\n            deviceType=dict(required=True),\n            protocol=dict(required=True),\n            serverip=dict(required=True),\n            imgpath=dict(required=True),\n            imgtype=dict(required=True),\n            serverusername=dict(required=False),\n            serverpassword=dict(required=False, no_log=True),),\n        supports_check_mode=False)\n\n    username = module.params['username']\n    password = module.params['password']\n    enablePassword = module.params['enablePassword']\n    outputfile = module.params['outputfile']\n    host = module.params['host']\n    deviceType = module.params['deviceType']\n    protocol = module.params['protocol'].lower()\n    imgserverip = module.params['serverip']\n    imgpath = module.params['imgpath']\n    imgtype = module.params['imgtype']\n    imgserveruser = module.params['serverusername']\n    imgserverpwd = module.params['serverpassword']\n    output = \"\"\n    timeout = 120\n    tftptimeout = 600\n    if not HAS_PARAMIKO:\n        module.fail_json(msg='paramiko is required for this module')\n\n    # Create instance of SSHClient object\n    remote_conn_pre = paramiko.SSHClient()\n\n    # Automatically add untrusted hosts (make sure okay for security policy in your environment)\n    remote_conn_pre.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n    # initiate SSH connection with the switch\n    remote_conn_pre.connect(host, username=username, password=password)\n    time.sleep(2)\n\n    # Use invoke_shell to establish an 'interactive session'\n    remote_conn = remote_conn_pre.invoke_shell()\n    time.sleep(2)\n\n    # Enable and enter configure terminal then send command\n    output = output + cnos.waitForDeviceResponse(\"\\n\", \">\", 2, remote_conn)\n\n    output = output + cnos.enterEnableModeForDevice(enablePassword, 3, remote_conn)\n\n    # Make terminal length = 0\n    output = output + cnos.waitForDeviceResponse(\"terminal length 0\\n\", \"#\", 2, remote_conn)\n\n    transfer_status = \"\"\n    # Invoke method for image transfer from server\n    if(protocol == \"tftp\" or protocol == \"ftp\"):\n        transfer_status = cnos.doImageTransfer(protocol, tftptimeout, imgserverip, imgpath, imgtype, imgserveruser, imgserverpwd, remote_conn)\n    elif(protocol == \"sftp\" or protocol == \"scp\"):\n        transfer_status = cnos.doSecureImageTransfer(protocol, timeout, imgserverip, imgpath, imgtype, imgserveruser, imgserverpwd, remote_conn)\n    else:\n        transfer_status = \"Invalid Protocol option\"\n\n    output = output + \"\\n Image Transfer status \\n\" + transfer_status\n\n    # Save it into the file\n    file = open(outputfile, \"a\")\n    file.write(output)\n    file.close()\n\n    # Logic to check when changes occur or not\n    errorMsg = cnos.checkOutputForError(output)\n    if(errorMsg is None):\n        module.exit_json(changed=True, msg=\"Image file tranferred to device\")\n    else:\n        module.fail_json(msg=errorMsg)\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "cnos_image.py", "id": "207da3347f967763df375c81daee06af", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/cnos/cnos_image.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}