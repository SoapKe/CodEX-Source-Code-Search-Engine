{"author": "mailpile", "code": "\n\n This is a basic GUI launcher for Mailpile.\n\n It relies on gui-o-matic for the actual GUI, the logic here is used to\n figure out if we need to launch a new Mailpile or if we can connect to\n one that is already running in the background.\n\n The script can also be run with --script as an argument to simply\n output the gui-o-matic launch sequence.\n\n It also supports --profile=... and --home=... for selecting alternate\n Mailpile data directories.\n\n Note: Most of the GUI behaviours are defined in `mailpile.plugins.gui`.\n       The logic here is just enough to configure our windows and display\n       a splash-screen. Arguably, more of this logic should be moved\n       into `mailpile.plugins.gui` so everything is in one place.\n\nimport copy\nimport fasteners\nimport json\nimport os\nimport sys\nimport subprocess\nimport threading\nfrom cStringIO import StringIO\n\nfrom mailpile.config.defaults import CONFIG_RULES\nfrom mailpile.config.manager import ConfigManager\nfrom mailpile.i18n import ActivateTranslation\nfrom mailpile.i18n import gettext as _\nfrom mailpile.plugins.gui import GetUserSecret\n\n\nAPPDIR = os.path.dirname(__file__)\nif not os.path.exists(os.path.join(APPDIR, 'media', 'splash.jpg')):\n    APPDIR = os.path.join(\n        ConfigManager.DEFAULT_SHARED_DATADIR(), 'mailpile-gui')\n\nMEDIA_PATH = os.path.join(APPDIR, 'media')\nICONS_PATH = os.path.join(APPDIR, 'icons-%(theme)s')\n\nMAILPILE_HOME_IMAGE   = os.path.join(MEDIA_PATH, 'background.jpg')\nMAILPILE_SPLASH_IMAGE = os.path.join(MEDIA_PATH, 'splash.jpg')\n\n\ndef SPLASH_SCREEN(state, message):\n    return {\n        \"image\": MAILPILE_SPLASH_IMAGE,\n        \"width\": 396,\n        \"height\": 594,\n        \"message_y\": 0.80,\n        \"progress_bar\": True,\n        \"message\": message}\n\n\ndef BASIC_GUI_CONFIGURATION(state):\n    mailpile_home = state.base_url\n    mailpile_quit = state.base_url + 'quitquitquit'\n    oib_checked = True if state.pub_config.prefs.open_in_browser else False\n    return {\n        \"app_name\": \"Mailpile\",\n        \"app_icon\": \"icon:logo\",\n        \"icons\": {\n            \"logo\":       os.path.join(MEDIA_PATH, 'logo-color.png'),\n            \"new-setup\":  os.path.join(MEDIA_PATH, 'new-setup.svg'),\n            \"logged-in\":  os.path.join(MEDIA_PATH, 'lock-open.svg'),\n            \"logged-out\": os.path.join(MEDIA_PATH, 'lock-closed.svg'),\n            \"ra-on\":      os.path.join(MEDIA_PATH, 'remote-access-on.svg'),\n            \"ra-off\":     os.path.join(MEDIA_PATH, 'remote-access-off.svg'),\n            \"startup\":    os.path.join(ICONS_PATH, 'startup.png'),\n            \"normal\":     os.path.join(ICONS_PATH, 'normal.png'),\n            \"attention\":  os.path.join(ICONS_PATH, 'attention.png'),\n            \"working\":    os.path.join(ICONS_PATH, 'working.png'),\n            \"shutdown\":   os.path.join(ICONS_PATH, 'shutdown.png')},\n        \"font-styles\": {\n            \"label\": {\n                \"family\": \"normal\",\n                \"points\": 18,\n                \"bold\": True\n            },\n            \"hint\": {\n                \"points\": 10\n            },\n            \"splash\": {\n                \"points\": 16\n            },\n            \"status\": {\n                \"italic\": True\n            }\n        },\n        \"main_window\": {\n            \"show\": False,\n            \"close_quits\": False,\n            \"width\": 550,\n            \"height\": 330,\n            \"image\": MAILPILE_HOME_IMAGE,\n            \"status\": '',\n            \"substatus\": [{\n                \"item\": \"mailpile\",\n                \"icon\": \"icon:logo\",\n                \"label\": _(\"Mailpile is starting up\"),\n                \"hint\": _(\"Patience is a virtue...\")\n            },{\n                \"item\": \"logged-in\",\n                \"icon\": \"icon:logged-out\",\n                \"label\": _(\"You are not logged in\"),\n                \"hint\": ''\n            },{\n                \"item\": \"remote_access\",\n                \"icon\": \"icon:ra-off\",\n                \"label\": _(\"Remote access is disabled\"),\n                \"hint\": _(\"Enable remote access if you would like to access\\n\"\n                          \"Mailpile from your phone or another computer.\")\n            }],\n            \"actions\": [{\n                \"item\": \"open\",\n                \"type\": \"button\",\n                \"position\": \"first\",\n                \"label\": _(\"Open in Web Browser\"),\n                \"op\": \"show_url\",\n                \"args\": [mailpile_home]\n            },{\n               \"item\": \"cb_obs\",\n               \"type\": \"checkbox\",\n               \"checked\": oib_checked,\n               \"position\": \"left\",\n               \"label\": \"Open in Browser on Startup\"\n           },{\n                \"item\": \"quit_button\",\n                \"type\": \"button\",\n                \"position\": \"last\",\n                \"label\": _(\"Quit GUI\"),\n                \"op\": \"quit\"}]},\n        \"indicator\": {\n            \"initial_status\": \"startup\",\n            \"menu\": [{\n                \"item\": \"status\",\n                \"label\": _(\"Starting up\"),\n                \"sensitive\": False\n            },{\n                \"separator\": True\n            },{\n                \"item\": \"main\",\n                \"label\": _(\"Show Status Window\"),\n                \"op\": \"show_main_window\",\n                \"args\": [],\n                \"sensitive\": False\n            },{\n                \"item\": \"browse\",\n                \"label\": _(\"Open in Web Browser\"),\n                \"op\": \"show_url\",\n                \"args\": [mailpile_home],\n                \"sensitive\": False\n            },{\n                \"item\": \"screen\",\n                \"label\": _(\"Open in Terminal\"),\n                \"op\": \"terminal\",\n                \"args\": {\n                    \"command\": \"screen -r -x mailpile\",\n                    \"title\": \"mailpile\"},\n                \"sensitive\": True\n            },{\n                \"separator\": True\n            },{\n                \"item\": \"quit\",\n                \"op\": \"quit\",\n                \"args\": [],\n                \"label\": _(\"Quit GUI\"),\n                \"sensitive\": True}]}}\n\n\nclass MailpileState(object):\n    def __init__(self):\n        self.base_url = 'http://localhost:33411/'\n        self.pub_config = None\n        self.is_running = None\n        self.secret = ''\n\n    def check_if_running(self):\n         FIXME: This is rather slow. We should refactor upstream to speed\n                up or include our own custom parser if that is infeasible.\n        wd_lock_path = ConfigManager.LOCK_PATHS()[1]\n        wd_lock = fasteners.InterProcessLock(wd_lock_path)\n        try:\n            if wd_lock.acquire(blocking=False):\n                wd_lock.release()\n                return False\n            else:\n                return True\n        except (OSError, IOError):\n            return False\n\n    def _load_public_config(self):\n        self.pub_config = ConfigManager(rules=CONFIG_RULES)\n        try:\n            self.pub_config.load(None, public_only=True)\n            self.secret = GetUserSecret(self.pub_config)\n            self.base_url = 'http://%s:%s%s/' % (\n                self.pub_config.sys.http_host,\n                self.pub_config.sys.http_port,\n                self.pub_config.sys.http_path)\n        except:\n            self.pub_config = None\n\n    def discover(self, argv):\n        self._load_public_config()\n        self.is_running = self.check_if_running()\n        self.http_port = self.pub_config.sys.http_port\n\n         Check if we have a screen session?\n\n        return self\n\n\ndef GenerateConfig(state):\n    \"\"\"Generate the basic gui-o-matic window configuration.\"\"\"\n    config = BASIC_GUI_CONFIGURATION(state)\n    return json.dumps(config, indent=2)\n\n\ndef GenerateBootstrap(state):\n    \"\"\"\n    Generate the gui-o-matic bootstrap sequence.\n\n    Once this sequence completes, either we have failed and will die,\n    or Mailpile (specifically `mailpile.plugins.gui`) will take over and\n    start sending gui-o-matic commands to update the UI.\n    \"\"\"\n    bootstrap = [\"OK LISTEN\"]\n\n    if state.is_running:\n         If Mailpile is running already, connect and ask it to talk to us.\n        bootstrap += [\n            \"show_main_window {}\",\n            \"notify_user %s\" % json.dumps({\n                'message': _(\"Connecting to Mailpile\")}),\n            \"set_next_error_message %s\" % json.dumps({\n                'message': _(\"Failed to connect to Mailpile!\")}),\n            \"OK LISTEN HTTP: \" + (\n                '%sgui/%s/watch/%%PORT%%/' % (state.base_url, state.secret))]\n    else:\n         If Mailpile is not running already, launch it in a screen session.\n        bootstrap += [\n            \"show_splash_screen %s\" % json.dumps(\n                SPLASH_SCREEN(state, _(\"Launching Mailpile\"))),\n            \"set_next_error_message %s\" % json.dumps({\n                'message': _(\"Failed to launch Mailpile!\")}),\n            \"OK LISTEN TCP: \" + (\n                 FIXME: This should launch a screen session using the\n                        same concepts as multipile's mailpile-admin.\n                'screen -S mailpile -d -m mailpile'\n                ' --set=\"prefs.open_in_browser = false\" '\n                ' --gui=%PORT% --interact')]\n\n    return '\\n'.join(bootstrap)\n\n\ndef Main(argv):\n    set_profile = set_home = False\n    for arg in argv:\n        if arg.startswith('--profile='):\n            os.environ['MAILPILE_PROFILE'] = arg.split('=', 1)[-1]\n            if 'MAILPILE_HOME' in os.environ:\n                del os.environ['MAILPILE_HOME']\n            set_profile = True\n        elif arg.startswith('--home='):\n            os.environ['MAILPILE_HOME'] = arg.split('=', 1)[-1]\n            if 'MAILPILE_PROFILE' in os.environ:\n                del os.environ['MAILPILE_PROFILE']\n            set_home = True\n    if set_home and set_profile:\n        raise ValueError('Please only use one of --home and --profile')\n\n    state = MailpileState().discover(argv)\n    ActivateTranslation(None, state.pub_config, None)\n\n    script = [\n        GenerateConfig(state),\n        GenerateBootstrap(state)]\n\n    if '--script' in argv:\n        print '\\n'.join(script)\n\n    else:\n         FIXME: We shouldn't need to do this, refactoring upstream\n                to pull in less weird stuff would make sense.\n        from mailpile.safe_popen import MakePopenUnsafe\n        MakePopenUnsafe()\n\n        from gui_o_matic.control import GUIPipeControl\n        GUIPipeControl(StringIO('\\n'.join(script) + '\\n')).bootstrap()\n\n\nif __name__ == \"__main__\":\n    Main(sys.argv)\n", "comments": "   generate basic gui matic window configuration         config   basic gui configuration(state)     return json dumps(config  indent 2)   def generatebootstrap(state)              generate gui matic bootstrap sequence       once sequence completes  either failed die      mailpile (specifically  mailpile plugins gui ) take     start sending gui matic commands update ui              usr bin python2       this basic gui launcher mailpile        it relies gui matic actual gui  logic used    figure need launch new mailpile connect    one already running background        the script also run   script argument simply    output gui matic launch sequence        it also supports   profile       home     selecting alternate    mailpile data directories        note  most gui behaviours defined  mailpile plugins gui            the logic enough configure windows display          splash screen  arguably  logic moved           mailpile plugins gui  everything one place                       item    cb obs                     type    checkbox                     checked   oib checked                    position    left                     label    open browser startup                      fixme  this rather slow  we refactor upstream speed           include custom parser infeasible     check screen session     if mailpile running already  connect ask talk us     if mailpile running already  launch screen session     fixme  this launch screen session using           concepts multipile mailpile admin     fixme  we need  refactoring upstream           pull less weird stuff would make sense  ", "content": "#!/usr/bin/python2\n#\n# This is a basic GUI launcher for Mailpile.\n#\n# It relies on gui-o-matic for the actual GUI, the logic here is used to\n# figure out if we need to launch a new Mailpile or if we can connect to\n# one that is already running in the background.\n#\n# The script can also be run with --script as an argument to simply\n# output the gui-o-matic launch sequence.\n#\n# It also supports --profile=... and --home=... for selecting alternate\n# Mailpile data directories.\n#\n# Note: Most of the GUI behaviours are defined in `mailpile.plugins.gui`.\n#       The logic here is just enough to configure our windows and display\n#       a splash-screen. Arguably, more of this logic should be moved\n#       into `mailpile.plugins.gui` so everything is in one place.\n#\nimport copy\nimport fasteners\nimport json\nimport os\nimport sys\nimport subprocess\nimport threading\nfrom cStringIO import StringIO\n\nfrom mailpile.config.defaults import CONFIG_RULES\nfrom mailpile.config.manager import ConfigManager\nfrom mailpile.i18n import ActivateTranslation\nfrom mailpile.i18n import gettext as _\nfrom mailpile.plugins.gui import GetUserSecret\n\n\nAPPDIR = os.path.dirname(__file__)\nif not os.path.exists(os.path.join(APPDIR, 'media', 'splash.jpg')):\n    APPDIR = os.path.join(\n        ConfigManager.DEFAULT_SHARED_DATADIR(), 'mailpile-gui')\n\nMEDIA_PATH = os.path.join(APPDIR, 'media')\nICONS_PATH = os.path.join(APPDIR, 'icons-%(theme)s')\n\nMAILPILE_HOME_IMAGE   = os.path.join(MEDIA_PATH, 'background.jpg')\nMAILPILE_SPLASH_IMAGE = os.path.join(MEDIA_PATH, 'splash.jpg')\n\n\ndef SPLASH_SCREEN(state, message):\n    return {\n        \"image\": MAILPILE_SPLASH_IMAGE,\n        \"width\": 396,\n        \"height\": 594,\n        \"message_y\": 0.80,\n        \"progress_bar\": True,\n        \"message\": message}\n\n\ndef BASIC_GUI_CONFIGURATION(state):\n    mailpile_home = state.base_url\n    mailpile_quit = state.base_url + 'quitquitquit'\n    oib_checked = True if state.pub_config.prefs.open_in_browser else False\n    return {\n        \"app_name\": \"Mailpile\",\n        \"app_icon\": \"icon:logo\",\n        \"icons\": {\n            \"logo\":       os.path.join(MEDIA_PATH, 'logo-color.png'),\n            \"new-setup\":  os.path.join(MEDIA_PATH, 'new-setup.svg'),\n            \"logged-in\":  os.path.join(MEDIA_PATH, 'lock-open.svg'),\n            \"logged-out\": os.path.join(MEDIA_PATH, 'lock-closed.svg'),\n            \"ra-on\":      os.path.join(MEDIA_PATH, 'remote-access-on.svg'),\n            \"ra-off\":     os.path.join(MEDIA_PATH, 'remote-access-off.svg'),\n            \"startup\":    os.path.join(ICONS_PATH, 'startup.png'),\n            \"normal\":     os.path.join(ICONS_PATH, 'normal.png'),\n            \"attention\":  os.path.join(ICONS_PATH, 'attention.png'),\n            \"working\":    os.path.join(ICONS_PATH, 'working.png'),\n            \"shutdown\":   os.path.join(ICONS_PATH, 'shutdown.png')},\n        \"font-styles\": {\n            \"label\": {\n                \"family\": \"normal\",\n                \"points\": 18,\n                \"bold\": True\n            },\n            \"hint\": {\n                \"points\": 10\n            },\n            \"splash\": {\n                \"points\": 16\n            },\n            \"status\": {\n                \"italic\": True\n            }\n        },\n        \"main_window\": {\n            \"show\": False,\n            \"close_quits\": False,\n            \"width\": 550,\n            \"height\": 330,\n            \"image\": MAILPILE_HOME_IMAGE,\n            \"status\": '',\n            \"substatus\": [{\n                \"item\": \"mailpile\",\n                \"icon\": \"icon:logo\",\n                \"label\": _(\"Mailpile is starting up\"),\n                \"hint\": _(\"Patience is a virtue...\")\n            },{\n                \"item\": \"logged-in\",\n                \"icon\": \"icon:logged-out\",\n                \"label\": _(\"You are not logged in\"),\n                \"hint\": ''\n            },{\n                \"item\": \"remote_access\",\n                \"icon\": \"icon:ra-off\",\n                \"label\": _(\"Remote access is disabled\"),\n                \"hint\": _(\"Enable remote access if you would like to access\\n\"\n                          \"Mailpile from your phone or another computer.\")\n            }],\n            \"actions\": [{\n                \"item\": \"open\",\n                \"type\": \"button\",\n                \"position\": \"first\",\n                \"label\": _(\"Open in Web Browser\"),\n                \"op\": \"show_url\",\n                \"args\": [mailpile_home]\n            },{\n#               \"item\": \"cb_obs\",\n#               \"type\": \"checkbox\",\n#               \"checked\": oib_checked,\n#               \"position\": \"left\",\n#               \"label\": \"Open in Browser on Startup\"\n#           },{\n                \"item\": \"quit_button\",\n                \"type\": \"button\",\n                \"position\": \"last\",\n                \"label\": _(\"Quit GUI\"),\n                \"op\": \"quit\"}]},\n        \"indicator\": {\n            \"initial_status\": \"startup\",\n            \"menu\": [{\n                \"item\": \"status\",\n                \"label\": _(\"Starting up\"),\n                \"sensitive\": False\n            },{\n                \"separator\": True\n            },{\n                \"item\": \"main\",\n                \"label\": _(\"Show Status Window\"),\n                \"op\": \"show_main_window\",\n                \"args\": [],\n                \"sensitive\": False\n            },{\n                \"item\": \"browse\",\n                \"label\": _(\"Open in Web Browser\"),\n                \"op\": \"show_url\",\n                \"args\": [mailpile_home],\n                \"sensitive\": False\n            },{\n                \"item\": \"screen\",\n                \"label\": _(\"Open in Terminal\"),\n                \"op\": \"terminal\",\n                \"args\": {\n                    \"command\": \"screen -r -x mailpile\",\n                    \"title\": \"mailpile\"},\n                \"sensitive\": True\n            },{\n                \"separator\": True\n            },{\n                \"item\": \"quit\",\n                \"op\": \"quit\",\n                \"args\": [],\n                \"label\": _(\"Quit GUI\"),\n                \"sensitive\": True}]}}\n\n\nclass MailpileState(object):\n    def __init__(self):\n        self.base_url = 'http://localhost:33411/'\n        self.pub_config = None\n        self.is_running = None\n        self.secret = ''\n\n    def check_if_running(self):\n        # FIXME: This is rather slow. We should refactor upstream to speed\n        #        up or include our own custom parser if that is infeasible.\n        wd_lock_path = ConfigManager.LOCK_PATHS()[1]\n        wd_lock = fasteners.InterProcessLock(wd_lock_path)\n        try:\n            if wd_lock.acquire(blocking=False):\n                wd_lock.release()\n                return False\n            else:\n                return True\n        except (OSError, IOError):\n            return False\n\n    def _load_public_config(self):\n        self.pub_config = ConfigManager(rules=CONFIG_RULES)\n        try:\n            self.pub_config.load(None, public_only=True)\n            self.secret = GetUserSecret(self.pub_config)\n            self.base_url = 'http://%s:%s%s/' % (\n                self.pub_config.sys.http_host,\n                self.pub_config.sys.http_port,\n                self.pub_config.sys.http_path)\n        except:\n            self.pub_config = None\n\n    def discover(self, argv):\n        self._load_public_config()\n        self.is_running = self.check_if_running()\n        self.http_port = self.pub_config.sys.http_port\n\n        # Check if we have a screen session?\n\n        return self\n\n\ndef GenerateConfig(state):\n    \"\"\"Generate the basic gui-o-matic window configuration.\"\"\"\n    config = BASIC_GUI_CONFIGURATION(state)\n    return json.dumps(config, indent=2)\n\n\ndef GenerateBootstrap(state):\n    \"\"\"\n    Generate the gui-o-matic bootstrap sequence.\n\n    Once this sequence completes, either we have failed and will die,\n    or Mailpile (specifically `mailpile.plugins.gui`) will take over and\n    start sending gui-o-matic commands to update the UI.\n    \"\"\"\n    bootstrap = [\"OK LISTEN\"]\n\n    if state.is_running:\n        # If Mailpile is running already, connect and ask it to talk to us.\n        bootstrap += [\n            \"show_main_window {}\",\n            \"notify_user %s\" % json.dumps({\n                'message': _(\"Connecting to Mailpile\")}),\n            \"set_next_error_message %s\" % json.dumps({\n                'message': _(\"Failed to connect to Mailpile!\")}),\n            \"OK LISTEN HTTP: \" + (\n                '%sgui/%s/watch/%%PORT%%/' % (state.base_url, state.secret))]\n    else:\n        # If Mailpile is not running already, launch it in a screen session.\n        bootstrap += [\n            \"show_splash_screen %s\" % json.dumps(\n                SPLASH_SCREEN(state, _(\"Launching Mailpile\"))),\n            \"set_next_error_message %s\" % json.dumps({\n                'message': _(\"Failed to launch Mailpile!\")}),\n            \"OK LISTEN TCP: \" + (\n                # FIXME: This should launch a screen session using the\n                #        same concepts as multipile's mailpile-admin.\n                'screen -S mailpile -d -m mailpile'\n                ' --set=\"prefs.open_in_browser = false\" '\n                ' --gui=%PORT% --interact')]\n\n    return '\\n'.join(bootstrap)\n\n\ndef Main(argv):\n    set_profile = set_home = False\n    for arg in argv:\n        if arg.startswith('--profile='):\n            os.environ['MAILPILE_PROFILE'] = arg.split('=', 1)[-1]\n            if 'MAILPILE_HOME' in os.environ:\n                del os.environ['MAILPILE_HOME']\n            set_profile = True\n        elif arg.startswith('--home='):\n            os.environ['MAILPILE_HOME'] = arg.split('=', 1)[-1]\n            if 'MAILPILE_PROFILE' in os.environ:\n                del os.environ['MAILPILE_PROFILE']\n            set_home = True\n    if set_home and set_profile:\n        raise ValueError('Please only use one of --home and --profile')\n\n    state = MailpileState().discover(argv)\n    ActivateTranslation(None, state.pub_config, None)\n\n    script = [\n        GenerateConfig(state),\n        GenerateBootstrap(state)]\n\n    if '--script' in argv:\n        print '\\n'.join(script)\n\n    else:\n        # FIXME: We shouldn't need to do this, refactoring upstream\n        #        to pull in less weird stuff would make sense.\n        from mailpile.safe_popen import MakePopenUnsafe\n        MakePopenUnsafe()\n\n        from gui_o_matic.control import GUIPipeControl\n        GUIPipeControl(StringIO('\\n'.join(script) + '\\n')).bootstrap()\n\n\nif __name__ == \"__main__\":\n    Main(sys.argv)\n", "description": "A free & open modern, fast email client with user-friendly encryption and privacy features", "file_name": "mailpile-gui.py", "id": "1acf814d57a886c366ed7b03313a49b7", "language": "Python", "project_name": "Mailpile", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mailpile-Mailpile/mailpile-Mailpile-8ebc5fe/shared-data/mailpile-gui/mailpile-gui.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:54:52Z", "url": "https://github.com/mailpile/Mailpile", "wiki": true}