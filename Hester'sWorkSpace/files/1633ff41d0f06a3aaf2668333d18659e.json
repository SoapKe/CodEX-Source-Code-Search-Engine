{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    find_xpath_attr,\n    fix_xml_ampersands\n)\n\n\nclass ClipsyndicateIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:chic|www)\\.clipsyndicate\\.com/video/play(list/\\d+)?/(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.clipsyndicate.com/video/play/4629301/brick_briscoe',\n        'md5': '4d7d549451bad625e0ff3d7bd56d776c',\n        'info_dict': {\n            'id': '4629301',\n            'ext': 'mp4',\n            'title': 'Brick Briscoe',\n            'duration': 612,\n            'thumbnail': r're:^https?://.+\\.jpg',\n        },\n    }, {\n        'url': 'http://chic.clipsyndicate.com/video/play/5844117/shark_attack',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        js_player = self._download_webpage(\n            'http://eplayer.clipsyndicate.com/embed/player.js?va_id=%s' % video_id,\n            video_id, 'Downlaoding player')\n        \n        flvars = self._search_regex(r'flvars: \"(.*?)\"', js_player, 'flvars')\n\n        pdoc = self._download_xml(\n            'http://eplayer.clipsyndicate.com/osmf/playlist?%s' % flvars,\n            video_id, 'Downloading video info',\n            transform_source=fix_xml_ampersands)\n\n        track_doc = pdoc.find('trackList/track')\n\n        def find_param(name):\n            node = find_xpath_attr(track_doc, './/param', 'name', name)\n            if node is not None:\n                return node.attrib['value']\n\n        return {\n            'id': video_id,\n            'title': find_param('title'),\n            'url': track_doc.find('location').text,\n            'thumbnail': find_param('thumbnail'),\n            'duration': int(find_param('duration')),\n        }\n", "comments": "# it includes a required token\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    find_xpath_attr,\n    fix_xml_ampersands\n)\n\n\nclass ClipsyndicateIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:chic|www)\\.clipsyndicate\\.com/video/play(list/\\d+)?/(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.clipsyndicate.com/video/play/4629301/brick_briscoe',\n        'md5': '4d7d549451bad625e0ff3d7bd56d776c',\n        'info_dict': {\n            'id': '4629301',\n            'ext': 'mp4',\n            'title': 'Brick Briscoe',\n            'duration': 612,\n            'thumbnail': r're:^https?://.+\\.jpg',\n        },\n    }, {\n        'url': 'http://chic.clipsyndicate.com/video/play/5844117/shark_attack',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        js_player = self._download_webpage(\n            'http://eplayer.clipsyndicate.com/embed/player.js?va_id=%s' % video_id,\n            video_id, 'Downlaoding player')\n        # it includes a required token\n        flvars = self._search_regex(r'flvars: \"(.*?)\"', js_player, 'flvars')\n\n        pdoc = self._download_xml(\n            'http://eplayer.clipsyndicate.com/osmf/playlist?%s' % flvars,\n            video_id, 'Downloading video info',\n            transform_source=fix_xml_ampersands)\n\n        track_doc = pdoc.find('trackList/track')\n\n        def find_param(name):\n            node = find_xpath_attr(track_doc, './/param', 'name', name)\n            if node is not None:\n                return node.attrib['value']\n\n        return {\n            'id': video_id,\n            'title': find_param('title'),\n            'url': track_doc.find('location').text,\n            'thumbnail': find_param('thumbnail'),\n            'duration': int(find_param('duration')),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "clipsyndicate.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/clipsyndicate.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}