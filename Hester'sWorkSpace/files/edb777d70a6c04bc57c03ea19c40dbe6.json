{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n    urlencode_postdata,\n    xpath_text,\n    xpath_with_ns,\n)\n\n_x = lambda p: xpath_with_ns(p, {'xspf': 'http://xspf.org/ns/0/'})\n\n\nclass NosVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?nosvideo\\.com/' + \\\n                 r'(?:embed/|\\?v=)(?P<id>[A-Za-z0-9]{12})/?'\n    _PLAYLIST_URL = 'http://nosvideo.com/xml/{xml_id:s}.xml'\n    _FILE_DELETED_REGEX = r'<b>File Not Found</b>'\n    _TEST = {\n        'url': 'http://nosvideo.com/?v=mu8fle7g7rpq',\n        'md5': '6124ed47130d8be3eacae635b071e6b6',\n        'info_dict': {\n            'id': 'mu8fle7g7rpq',\n            'ext': 'mp4',\n            'title': 'big_buck_bunny_480p_surround-fix.avi.mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        fields = {\n            'id': video_id,\n            'op': 'download1',\n            'method_free': 'Continue to Video',\n        }\n        req = sanitized_Request(url, urlencode_postdata(fields))\n        req.add_header('Content-type', 'application/x-www-form-urlencoded')\n        webpage = self._download_webpage(req, video_id,\n                                         'Downloading download page')\n        if re.search(self._FILE_DELETED_REGEX, webpage) is not None:\n            raise ExtractorError('Video %s does not exist' % video_id,\n                                 expected=True)\n\n        xml_id = self._search_regex(r'php\\|([^\\|]+)\\|', webpage, 'XML ID')\n        playlist_url = self._PLAYLIST_URL.format(xml_id=xml_id)\n        playlist = self._download_xml(playlist_url, video_id)\n\n        track = playlist.find(_x('.//xspf:track'))\n        if track is None:\n            raise ExtractorError(\n                'XML playlist is missing the \\'track\\' element',\n                expected=True)\n        title = xpath_text(track, _x('./xspf:title'), 'title')\n        url = xpath_text(track, _x('./xspf:file'), 'URL', fatal=True)\n        thumbnail = xpath_text(track, _x('./xspf:image'), 'thumbnail')\n        if title is not None:\n            title = title.strip()\n\n        formats = [{\n            'format_id': 'sd',\n            'url': url,\n        }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n    urlencode_postdata,\n    xpath_text,\n    xpath_with_ns,\n)\n\n_x = lambda p: xpath_with_ns(p, {'xspf': 'http://xspf.org/ns/0/'})\n\n\nclass NosVideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?nosvideo\\.com/' + \\\n                 r'(?:embed/|\\?v=)(?P<id>[A-Za-z0-9]{12})/?'\n    _PLAYLIST_URL = 'http://nosvideo.com/xml/{xml_id:s}.xml'\n    _FILE_DELETED_REGEX = r'<b>File Not Found</b>'\n    _TEST = {\n        'url': 'http://nosvideo.com/?v=mu8fle7g7rpq',\n        'md5': '6124ed47130d8be3eacae635b071e6b6',\n        'info_dict': {\n            'id': 'mu8fle7g7rpq',\n            'ext': 'mp4',\n            'title': 'big_buck_bunny_480p_surround-fix.avi.mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        fields = {\n            'id': video_id,\n            'op': 'download1',\n            'method_free': 'Continue to Video',\n        }\n        req = sanitized_Request(url, urlencode_postdata(fields))\n        req.add_header('Content-type', 'application/x-www-form-urlencoded')\n        webpage = self._download_webpage(req, video_id,\n                                         'Downloading download page')\n        if re.search(self._FILE_DELETED_REGEX, webpage) is not None:\n            raise ExtractorError('Video %s does not exist' % video_id,\n                                 expected=True)\n\n        xml_id = self._search_regex(r'php\\|([^\\|]+)\\|', webpage, 'XML ID')\n        playlist_url = self._PLAYLIST_URL.format(xml_id=xml_id)\n        playlist = self._download_xml(playlist_url, video_id)\n\n        track = playlist.find(_x('.//xspf:track'))\n        if track is None:\n            raise ExtractorError(\n                'XML playlist is missing the \\'track\\' element',\n                expected=True)\n        title = xpath_text(track, _x('./xspf:title'), 'title')\n        url = xpath_text(track, _x('./xspf:file'), 'URL', fatal=True)\n        thumbnail = xpath_text(track, _x('./xspf:image'), 'thumbnail')\n        if title is not None:\n            title = title.strip()\n\n        formats = [{\n            'format_id': 'sd',\n            'url': url,\n        }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nosvideo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nosvideo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}