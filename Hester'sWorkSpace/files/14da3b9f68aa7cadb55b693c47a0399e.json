{"author": "odoo", "code": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\nfrom odoo.exceptions import Warning\n\nclass TestAccountSupplierInvoice(AccountingTestCase):\n\n    def test_supplier_invoice(self):\n        tax = self.env['account.tax'].create({\n            'name': 'Tax 10.0',\n            'amount': 10.0,\n            'amount_type': 'fixed',\n        })\n        analytic_account = self.env['account.analytic.account'].create({\n            'name': 'test account',\n        })\n\n        \n        invoice_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1).id\n        invoice_line_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_expenses').id)], limit=1).id\n\n        invoice = self.env['account.invoice'].create({'partner_id': self.env.ref('base.res_partner_2').id,\n            'account_id': invoice_account,\n            'type': 'in_invoice',\n        })\n\n        self.env['account.invoice.line'].create({'product_id': self.env.ref('product.product_product_4').id,\n            'quantity': 1.0,\n            'price_unit': 100.0,\n            'invoice_id': invoice.id,\n            'name': 'product that cost 100',\n            'account_id': invoice_line_account,\n            'invoice_line_tax_ids': [(6, 0, [tax.id])],\n            'account_analytic_id': analytic_account.id,\n        })\n\n        \n        self.assertTrue((invoice.state == 'draft'), \"Initially vendor bill state is Draft\")\n\n        \n        invoice.action_invoice_open()\n\n        \n        with self.assertRaises(Warning):\n            invoice.move_id.button_cancel()\n\n    def test_supplier_invoice2(self):\n        tax_fixed = self.env['account.tax'].create({\n            'sequence': 10,\n            'name': 'Tax 10.0 (Fixed)',\n            'amount': 10.0,\n            'amount_type': 'fixed',\n            'include_base_amount': True,\n        })\n        tax_percent_included_base_incl = self.env['account.tax'].create({\n            'sequence': 20,\n            'name': 'Tax 50.0% (Percentage of Price Tax Included)',\n            'amount': 50.0,\n            'amount_type': 'division',\n            'include_base_amount': True,\n        })\n        tax_percentage = self.env['account.tax'].create({\n            'sequence': 30,\n            'name': 'Tax 20.0% (Percentage of Price)',\n            'amount': 20.0,\n            'amount_type': 'percent',\n            'include_base_amount': False,\n        })\n        analytic_account = self.env['account.analytic.account'].create({\n            'name': 'test account',\n        })\n\n        \n        invoice_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1).id\n        invoice_line_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_expenses').id)], limit=1).id\n\n        invoice = self.env['account.invoice'].create({'partner_id': self.env.ref('base.res_partner_2').id,\n            'account_id': invoice_account,\n            'type': 'in_invoice',\n        })\n\n        invoice_line = self.env['account.invoice.line'].create({'product_id': self.env.ref('product.product_product_4').id,\n            'quantity': 5.0,\n            'price_unit': 100.0,\n            'invoice_id': invoice.id,\n            'name': 'product that cost 100',\n            'account_id': invoice_line_account,\n            'invoice_line_tax_ids': [(6, 0, [tax_fixed.id, tax_percent_included_base_incl.id, tax_percentage.id])],\n            'account_analytic_id': analytic_account.id,\n        })\n        invoice.compute_taxes()\n\n        \n        self.assertTrue((invoice.state == 'draft'), \"Initially vendor bill state is Draft\")\n\n        \n        invoice.action_invoice_open()\n\n        \n        # Keep in mind that tax amount can be changed by the user at any time before validating (based on the invoice and tax laws applicable)\n        invoice_tax = invoice.tax_line_ids.sorted(key=lambda r: r.sequence)\n        self.assertEquals(invoice_tax.mapped('amount'), [50.0, 550.0, 220.0])\n        self.assertEquals(invoice_tax.mapped('base'), [500.0, 550.0, 1100.0])\n\n        \n        with self.assertRaises(Warning):\n            invoice.move_id.button_cancel()\n", "comments": "  should changed automatic change later    check initially supplier bill state  draft    change state invoice open clicking validate button   i cancel account move posted state verifies gives warning message    should changed automatic change later    check initially supplier bill state  draft    change state invoice open clicking validate button    check amount corresponded base correct tax scenarios given computational base    keep mind tax amount changed user time validating (based invoice tax laws applicable)   i cancel account move posted state verifies gives warning message ", "content": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\nfrom odoo.exceptions import Warning\n\nclass TestAccountSupplierInvoice(AccountingTestCase):\n\n    def test_supplier_invoice(self):\n        tax = self.env['account.tax'].create({\n            'name': 'Tax 10.0',\n            'amount': 10.0,\n            'amount_type': 'fixed',\n        })\n        analytic_account = self.env['account.analytic.account'].create({\n            'name': 'test account',\n        })\n\n        # Should be changed by automatic on_change later\n        invoice_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1).id\n        invoice_line_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_expenses').id)], limit=1).id\n\n        invoice = self.env['account.invoice'].create({'partner_id': self.env.ref('base.res_partner_2').id,\n            'account_id': invoice_account,\n            'type': 'in_invoice',\n        })\n\n        self.env['account.invoice.line'].create({'product_id': self.env.ref('product.product_product_4').id,\n            'quantity': 1.0,\n            'price_unit': 100.0,\n            'invoice_id': invoice.id,\n            'name': 'product that cost 100',\n            'account_id': invoice_line_account,\n            'invoice_line_tax_ids': [(6, 0, [tax.id])],\n            'account_analytic_id': analytic_account.id,\n        })\n\n        # check that Initially supplier bill state is \"Draft\"\n        self.assertTrue((invoice.state == 'draft'), \"Initially vendor bill state is Draft\")\n\n        #change the state of invoice to open by clicking Validate button\n        invoice.action_invoice_open()\n\n        #I cancel the account move which is in posted state and verifies that it gives warning message\n        with self.assertRaises(Warning):\n            invoice.move_id.button_cancel()\n\n    def test_supplier_invoice2(self):\n        tax_fixed = self.env['account.tax'].create({\n            'sequence': 10,\n            'name': 'Tax 10.0 (Fixed)',\n            'amount': 10.0,\n            'amount_type': 'fixed',\n            'include_base_amount': True,\n        })\n        tax_percent_included_base_incl = self.env['account.tax'].create({\n            'sequence': 20,\n            'name': 'Tax 50.0% (Percentage of Price Tax Included)',\n            'amount': 50.0,\n            'amount_type': 'division',\n            'include_base_amount': True,\n        })\n        tax_percentage = self.env['account.tax'].create({\n            'sequence': 30,\n            'name': 'Tax 20.0% (Percentage of Price)',\n            'amount': 20.0,\n            'amount_type': 'percent',\n            'include_base_amount': False,\n        })\n        analytic_account = self.env['account.analytic.account'].create({\n            'name': 'test account',\n        })\n\n        # Should be changed by automatic on_change later\n        invoice_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1).id\n        invoice_line_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_expenses').id)], limit=1).id\n\n        invoice = self.env['account.invoice'].create({'partner_id': self.env.ref('base.res_partner_2').id,\n            'account_id': invoice_account,\n            'type': 'in_invoice',\n        })\n\n        invoice_line = self.env['account.invoice.line'].create({'product_id': self.env.ref('product.product_product_4').id,\n            'quantity': 5.0,\n            'price_unit': 100.0,\n            'invoice_id': invoice.id,\n            'name': 'product that cost 100',\n            'account_id': invoice_line_account,\n            'invoice_line_tax_ids': [(6, 0, [tax_fixed.id, tax_percent_included_base_incl.id, tax_percentage.id])],\n            'account_analytic_id': analytic_account.id,\n        })\n        invoice.compute_taxes()\n\n        # check that Initially supplier bill state is \"Draft\"\n        self.assertTrue((invoice.state == 'draft'), \"Initially vendor bill state is Draft\")\n\n        #change the state of invoice to open by clicking Validate button\n        invoice.action_invoice_open()\n\n        # Check if amount and corresponded base is correct for all tax scenarios given on a computational base\n        # Keep in mind that tax amount can be changed by the user at any time before validating (based on the invoice and tax laws applicable)\n        invoice_tax = invoice.tax_line_ids.sorted(key=lambda r: r.sequence)\n        self.assertEquals(invoice_tax.mapped('amount'), [50.0, 550.0, 220.0])\n        self.assertEquals(invoice_tax.mapped('base'), [500.0, 550.0, 1100.0])\n\n        #I cancel the account move which is in posted state and verifies that it gives warning message\n        with self.assertRaises(Warning):\n            invoice.move_id.button_cancel()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_account_supplier_invoice.py", "id": "14da3b9f68aa7cadb55b693c47a0399e", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_account_supplier_invoice.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}