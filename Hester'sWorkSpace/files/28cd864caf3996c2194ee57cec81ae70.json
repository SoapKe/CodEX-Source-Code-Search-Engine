{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import get_params, try_rm\n\n\nimport io\n\nimport xml.etree.ElementTree\n\nimport youtube_dl.YoutubeDL\nimport youtube_dl.extractor\n\n\nclass YoutubeDL(youtube_dl.YoutubeDL):\n    def __init__(self, *args, **kwargs):\n        super(YoutubeDL, self).__init__(*args, **kwargs)\n        self.to_stderr = self.to_screen\n\n\nparams = get_params({\n    'writeannotations': True,\n    'skip_download': True,\n    'writeinfojson': False,\n    'format': 'flv',\n})\n\n\nTEST_ID = 'gr51aVj-mLg'\nANNOTATIONS_FILE = TEST_ID + '.annotations.xml'\nEXPECTED_ANNOTATIONS = ['Speech bubble', 'Note', 'Title', 'Spotlight', 'Label']\n\n\nclass TestAnnotations(unittest.TestCase):\n    def setUp(self):\n        \n        self.tearDown()\n\n    def test_info_json(self):\n        expected = list(EXPECTED_ANNOTATIONS)  \n        ie = youtube_dl.extractor.YoutubeIE()\n        ydl = YoutubeDL(params)\n        ydl.add_info_extractor(ie)\n        ydl.download([TEST_ID])\n        self.assertTrue(os.path.exists(ANNOTATIONS_FILE))\n        annoxml = None\n        with io.open(ANNOTATIONS_FILE, 'r', encoding='utf-8') as annof:\n            annoxml = xml.etree.ElementTree.parse(annof)\n        self.assertTrue(annoxml is not None, 'Failed to parse annotations XML')\n        root = annoxml.getroot()\n        self.assertEqual(root.tag, 'document')\n        annotationsTag = root.find('annotations')\n        self.assertEqual(annotationsTag.tag, 'annotations')\n        annotations = annotationsTag.findall('annotation')\n\n        \n        for a in annotations:\n            self.assertEqual(a.tag, 'annotation')\n            if a.get('type') == 'text':\n                textTag = a.find('TEXT')\n                text = textTag.text\n                self.assertTrue(text in expected)  \n                \n                expected.remove(text)\n        \n        self.assertEqual(len(expected), 0, 'Not all expected annotations were found.')\n\n    def tearDown(self):\n        try_rm(ANNOTATIONS_FILE)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "#!/usr/bin/env python\n# coding: utf-8\n# Allow direct execution\n# Clear old files\n# Two annotations could have the same text.\n# Not all the annotations have TEXT children and the annotations are returned unsorted.\n# assertIn only added in python 2.7\n# remove the first occurrence, there could be more than one annotation with the same text\n# We should have seen (and removed) all the expected annotation texts.\n", "content": "#!/usr/bin/env python\n# coding: utf-8\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import get_params, try_rm\n\n\nimport io\n\nimport xml.etree.ElementTree\n\nimport youtube_dl.YoutubeDL\nimport youtube_dl.extractor\n\n\nclass YoutubeDL(youtube_dl.YoutubeDL):\n    def __init__(self, *args, **kwargs):\n        super(YoutubeDL, self).__init__(*args, **kwargs)\n        self.to_stderr = self.to_screen\n\n\nparams = get_params({\n    'writeannotations': True,\n    'skip_download': True,\n    'writeinfojson': False,\n    'format': 'flv',\n})\n\n\nTEST_ID = 'gr51aVj-mLg'\nANNOTATIONS_FILE = TEST_ID + '.annotations.xml'\nEXPECTED_ANNOTATIONS = ['Speech bubble', 'Note', 'Title', 'Spotlight', 'Label']\n\n\nclass TestAnnotations(unittest.TestCase):\n    def setUp(self):\n        # Clear old files\n        self.tearDown()\n\n    def test_info_json(self):\n        expected = list(EXPECTED_ANNOTATIONS)  # Two annotations could have the same text.\n        ie = youtube_dl.extractor.YoutubeIE()\n        ydl = YoutubeDL(params)\n        ydl.add_info_extractor(ie)\n        ydl.download([TEST_ID])\n        self.assertTrue(os.path.exists(ANNOTATIONS_FILE))\n        annoxml = None\n        with io.open(ANNOTATIONS_FILE, 'r', encoding='utf-8') as annof:\n            annoxml = xml.etree.ElementTree.parse(annof)\n        self.assertTrue(annoxml is not None, 'Failed to parse annotations XML')\n        root = annoxml.getroot()\n        self.assertEqual(root.tag, 'document')\n        annotationsTag = root.find('annotations')\n        self.assertEqual(annotationsTag.tag, 'annotations')\n        annotations = annotationsTag.findall('annotation')\n\n        # Not all the annotations have TEXT children and the annotations are returned unsorted.\n        for a in annotations:\n            self.assertEqual(a.tag, 'annotation')\n            if a.get('type') == 'text':\n                textTag = a.find('TEXT')\n                text = textTag.text\n                self.assertTrue(text in expected)  # assertIn only added in python 2.7\n                # remove the first occurrence, there could be more than one annotation with the same text\n                expected.remove(text)\n        # We should have seen (and removed) all the expected annotation texts.\n        self.assertEqual(len(expected), 0, 'Not all expected annotations were found.')\n\n    def tearDown(self):\n        try_rm(ANNOTATIONS_FILE)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_write_annotations.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_write_annotations.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}