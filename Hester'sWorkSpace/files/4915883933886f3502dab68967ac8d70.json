{"author": "pallets", "code": "\n\n    register_and_login(client, 'foo', 'default')\n    add_message(client, 'the message by foo')\n    logout(client)\n    register_and_login(client, 'bar', 'default')\n    add_message(client, 'the message by bar')\n    rv = client.get('/public')\n    assert b'the message by foo' in rv.data\n    assert b'the message by bar' in rv.data\n\n    \n    rv = client.get('/')\n    assert b'the message by foo' not in rv.data\n    assert b'the message by bar' in rv.data\n\n    \n    rv = client.get('/foo/follow', follow_redirects=True)\n    assert b'You are now following &\n\n    \n    rv = client.get('/')\n    assert b'the message by foo' in rv.data\n    assert b'the message by bar' in rv.data\n\n    \n    rv = client.get('/bar')\n    assert b'the message by foo' not in rv.data\n    assert b'the message by bar' in rv.data\n    rv = client.get('/foo')\n    assert b'the message by foo' in rv.data\n    assert b'the message by bar' not in rv.data\n\n    \n    rv = client.get('/foo/unfollow', follow_redirects=True)\n    assert b'You are no longer following &\n    rv = client.get('/')\n    assert b'the message by foo' not in rv.data\n    assert b'the message by bar' in rv.data\n", "comments": "\n    MiniTwit Tests\n    ~~~~~~~~~~~~~~\n\n    Tests the MiniTwit application.\n\n    :copyright: \u00a9 2010 by the Pallets team.\n    :license: BSD, see LICENSE for more details.\n\"\"\"\n\nimport os\nimport tempfile\nimport pytest\nfrom minitwit import minitwit\n\n\n@pytest.fixture\ndef client():\n    db_fd, minitwit.app.config['DATABASE'] = tempfile.mkstemp()\n    client = minitwit.app.test_client()\n    with minitwit.app.app_context():\n        minitwit.init_db()\n\n    yield client\n\n    os.close(db_fd)\n    os.unlink(minitwit.app.config['DATABASE'])\n\n\ndef register(client, username, password, password2=None, email=None):\n    \"\"\"Helper function to register a user\"\"\"\n    if password2 is None:\n        password2 = password\n    if email is None:\n        email = username + '@example.com'\n    return client.post('/register', data={\n        'username':     username,\n        'password':     password,\n        'password2':    password2,\n        'email':        email,\n    }, follow_redirects=True)\n\n\ndef login(client, username, password):\n    \"\"\"Helper function to login\"\"\"\n    return client.post('/login', data={\n        'username': username,\n        'password': password\n    }, follow_redirects=True)\n\n\ndef register_and_login(client, username, password):\n    \"\"\"Registers and logs in in one go\"\"\"\n    register(client, username, password)\n    return login(client, username, password)\n\n\ndef logout(client):\n    \"\"\"Helper function to logout\"\"\"\n    return client.get('/logout', follow_redirects=True)\n\n\ndef add_message(client, text):\n    \"\"\"Records a message\"\"\"\n    rv = client.post('/add_message', data={'text': text},\n                     follow_redirects=True)\n    if text:\n        assert b'Your message was recorded' in rv.data\n    return rv\n\n\ndef test_register(client):\n    \"\"\"Make sure registering works\"\"\"\n    rv = register(client, 'user1', 'default')\n    assert b'You were successfully registered ' \\\n           b'and can login now' in rv.data\n    rv = register(client, 'user1', 'default')\n    assert b'The username is already taken' in rv.data\n    rv = register(client, '', 'default')\n    assert b'You have to enter a username' in rv.data\n    rv = register(client, 'meh', '')\n    assert b'You have to enter a password' in rv.data\n    rv = register(client, 'meh', 'x', 'y')\n    assert b'The two passwords do not match' in rv.data\n    rv = register(client, 'meh', 'foo', email='broken')\n    assert b'You have to enter a valid email address' in rv.data\n\n\ndef test_login_logout(client):\n    \"\"\"Make sure logging in and logging out works\"\"\"\n    rv = register_and_login(client, 'user1', 'default')\n    assert b'You were logged in' in rv.data\n    rv = logout(client)\n    assert b'You were logged out' in rv.data\n    rv = login(client, 'user1', 'wrongpassword')\n    assert b'Invalid password' in rv.data\n    rv = login(client, 'user2', 'wrongpassword')\n    assert b'Invalid username' in rv.data\n\n\ndef test_message_recording(client):\n    \"\"\"Check if adding messages works\"\"\"\n    register_and_login(client, 'foo', 'default')\n    add_message(client, 'test message 1')\n    add_message(client, '<test message 2>')\n    rv = client.get('/')\n    assert b'test message 1' in rv.data\n    assert b'&lt;test message 2&gt;' in rv.data\n\n\ndef test_timelines(client):\n    \"\"\"Make sure that timelines work\nk\n# -*- coding: utf-8 -*-\n# bar's timeline should just show bar's message\n# now let's follow foo\n#34;foo&#34;' in rv.data\n# we should now see foo's message\n# but on the user's page we only want the user's message\n# now unfollow and check if that worked\n#34;foo&#34;' in rv.data\n", "content": "# -*- coding: utf-8 -*-\n\"\"\"\n    MiniTwit Tests\n    ~~~~~~~~~~~~~~\n\n    Tests the MiniTwit application.\n\n    :copyright: \u00a9 2010 by the Pallets team.\n    :license: BSD, see LICENSE for more details.\n\"\"\"\n\nimport os\nimport tempfile\nimport pytest\nfrom minitwit import minitwit\n\n\n@pytest.fixture\ndef client():\n    db_fd, minitwit.app.config['DATABASE'] = tempfile.mkstemp()\n    client = minitwit.app.test_client()\n    with minitwit.app.app_context():\n        minitwit.init_db()\n\n    yield client\n\n    os.close(db_fd)\n    os.unlink(minitwit.app.config['DATABASE'])\n\n\ndef register(client, username, password, password2=None, email=None):\n    \"\"\"Helper function to register a user\"\"\"\n    if password2 is None:\n        password2 = password\n    if email is None:\n        email = username + '@example.com'\n    return client.post('/register', data={\n        'username':     username,\n        'password':     password,\n        'password2':    password2,\n        'email':        email,\n    }, follow_redirects=True)\n\n\ndef login(client, username, password):\n    \"\"\"Helper function to login\"\"\"\n    return client.post('/login', data={\n        'username': username,\n        'password': password\n    }, follow_redirects=True)\n\n\ndef register_and_login(client, username, password):\n    \"\"\"Registers and logs in in one go\"\"\"\n    register(client, username, password)\n    return login(client, username, password)\n\n\ndef logout(client):\n    \"\"\"Helper function to logout\"\"\"\n    return client.get('/logout', follow_redirects=True)\n\n\ndef add_message(client, text):\n    \"\"\"Records a message\"\"\"\n    rv = client.post('/add_message', data={'text': text},\n                     follow_redirects=True)\n    if text:\n        assert b'Your message was recorded' in rv.data\n    return rv\n\n\ndef test_register(client):\n    \"\"\"Make sure registering works\"\"\"\n    rv = register(client, 'user1', 'default')\n    assert b'You were successfully registered ' \\\n           b'and can login now' in rv.data\n    rv = register(client, 'user1', 'default')\n    assert b'The username is already taken' in rv.data\n    rv = register(client, '', 'default')\n    assert b'You have to enter a username' in rv.data\n    rv = register(client, 'meh', '')\n    assert b'You have to enter a password' in rv.data\n    rv = register(client, 'meh', 'x', 'y')\n    assert b'The two passwords do not match' in rv.data\n    rv = register(client, 'meh', 'foo', email='broken')\n    assert b'You have to enter a valid email address' in rv.data\n\n\ndef test_login_logout(client):\n    \"\"\"Make sure logging in and logging out works\"\"\"\n    rv = register_and_login(client, 'user1', 'default')\n    assert b'You were logged in' in rv.data\n    rv = logout(client)\n    assert b'You were logged out' in rv.data\n    rv = login(client, 'user1', 'wrongpassword')\n    assert b'Invalid password' in rv.data\n    rv = login(client, 'user2', 'wrongpassword')\n    assert b'Invalid username' in rv.data\n\n\ndef test_message_recording(client):\n    \"\"\"Check if adding messages works\"\"\"\n    register_and_login(client, 'foo', 'default')\n    add_message(client, 'test message 1')\n    add_message(client, '<test message 2>')\n    rv = client.get('/')\n    assert b'test message 1' in rv.data\n    assert b'&lt;test message 2&gt;' in rv.data\n\n\ndef test_timelines(client):\n    \"\"\"Make sure that timelines work\"\"\"\n    register_and_login(client, 'foo', 'default')\n    add_message(client, 'the message by foo')\n    logout(client)\n    register_and_login(client, 'bar', 'default')\n    add_message(client, 'the message by bar')\n    rv = client.get('/public')\n    assert b'the message by foo' in rv.data\n    assert b'the message by bar' in rv.data\n\n    # bar's timeline should just show bar's message\n    rv = client.get('/')\n    assert b'the message by foo' not in rv.data\n    assert b'the message by bar' in rv.data\n\n    # now let's follow foo\n    rv = client.get('/foo/follow', follow_redirects=True)\n    assert b'You are now following &#34;foo&#34;' in rv.data\n\n    # we should now see foo's message\n    rv = client.get('/')\n    assert b'the message by foo' in rv.data\n    assert b'the message by bar' in rv.data\n\n    # but on the user's page we only want the user's message\n    rv = client.get('/bar')\n    assert b'the message by foo' not in rv.data\n    assert b'the message by bar' in rv.data\n    rv = client.get('/foo')\n    assert b'the message by foo' in rv.data\n    assert b'the message by bar' not in rv.data\n\n    # now unfollow and check if that worked\n    rv = client.get('/foo/unfollow', follow_redirects=True)\n    assert b'You are no longer following &#34;foo&#34;' in rv.data\n    rv = client.get('/')\n    assert b'the message by foo' not in rv.data\n    assert b'the message by bar' in rv.data\n", "description": "The Python micro framework for building web applications.", "file_name": "test_minitwit.py", "language": "Python", "project_name": "flask", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/pallets_flask/pallets-flask-a2ea186/examples/minitwit/tests/test_minitwit.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:52:03Z", "url": "https://github.com/pallets/flask", "wiki": false}