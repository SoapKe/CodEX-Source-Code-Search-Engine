{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    js_to_json,\n    mimetype2ext,\n)\n\n\nclass ThreeQSDNIE(InfoExtractor):\n    IE_NAME = '3qsdn'\n    IE_DESC = '3Q SDN'\n    _VALID_URL = r'https?://playout\\.3qsdn\\.com/(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n    _TESTS = [{\n        \n        'url': 'http://playout.3qsdn.com/0280d6b9-1215-11e6-b427-0cc47a188158?protocol=http',\n        'md5': 'ab040e37bcfa2e0c079f92cb1dd7f6cd',\n        'info_dict': {\n            'id': '0280d6b9-1215-11e6-b427-0cc47a188158',\n            'ext': 'mp4',\n            'title': '0280d6b9-1215-11e6-b427-0cc47a188158',\n            'is_live': False,\n        },\n        'expected_warnings': ['Failed to download MPD manifest', 'Failed to parse JSON'],\n    }, {\n        \n        'url': 'https://playout.3qsdn.com/d755d94b-4ab9-11e3-9162-0025907ad44f?js=true',\n        'info_dict': {\n            'id': 'd755d94b-4ab9-11e3-9162-0025907ad44f',\n            'ext': 'mp4',\n            'title': 're:^d755d94b-4ab9-11e3-9162-0025907ad44f [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,  \n        },\n        'expected_warnings': ['Failed to download MPD manifest'],\n    }, {\n        \n        'url': 'http://playout.3qsdn.com/9edf36e0-6bf2-11e2-a16a-9acf09e2db48',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://playout.3qsdn.com/ac5c3186-777a-11e2-9c30-9acf09e2db48',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://playout.3qsdn.com/d63a3ffe-75e8-11e2-9c30-9acf09e2db48',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://playout.3qsdn.com/8e330f26-6ae2-11e2-a16a-9acf09e2db48',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://playout.3qsdn.com/6092bb9e-8f72-11e4-a173-002590c750be',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+\\b(?:data-)?src=([\"\\'])(?P<url>%s.*?)\\1' % ThreeQSDNIE._VALID_URL, webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        js = self._download_webpage(\n            'http://playout.3qsdn.com/%s' % video_id, video_id,\n            query={'js': 'true'})\n\n        if any(p in js for p in (\n                '>This content is not available in your country',\n                'playout.3qsdn.com/forbidden')):\n            self.raise_geo_restricted()\n\n        stream_content = self._search_regex(\n            r'streamContent\\s*:\\s*([\"\\'])(?P<content>.+?)\\1', js,\n            'stream content', default='demand', group='content')\n\n        live = stream_content == 'live'\n\n        stream_type = self._search_regex(\n            r'streamType\\s*:\\s*([\"\\'])(?P<type>audio|video)\\1', js,\n            'stream type', default='video', group='type')\n\n        formats = []\n        urls = set()\n\n        def extract_formats(item_url, item={}):\n            if not item_url or item_url in urls:\n                return\n            urls.add(item_url)\n            ext = mimetype2ext(item.get('type')) or determine_ext(item_url, default_ext=None)\n            if ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    item_url, video_id, mpd_id='mpd', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    item_url, video_id, 'mp4',\n                    entry_protocol='m3u8' if live else 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    item_url, video_id, f4m_id='hds', fatal=False))\n            else:\n                if not self._is_valid_url(item_url, video_id):\n                    return\n                formats.append({\n                    'url': item_url,\n                    'format_id': item.get('quality'),\n                    'ext': 'mp4' if item_url.startswith('rtsp') else ext,\n                    'vcodec': 'none' if stream_type == 'audio' else None,\n                })\n\n        for item_js in re.findall(r'({[^{]*?\\b(?:src|source)\\s*:\\s*[\"\\'].+?})', js):\n            f = self._parse_json(\n                item_js, video_id, transform_source=js_to_json, fatal=False)\n            if not f:\n                continue\n            extract_formats(f.get('src'), f)\n\n        \n        \n        for _, src in re.findall(r'\\b(?:src|source)\\s*:\\s*([\"\\'])((?:https?|rtsp)://.+?)\\1', js):\n            extract_formats(src)\n\n        self._sort_formats(formats)\n\n        title = self._live_title(video_id) if live else video_id\n\n        return {\n            'id': video_id,\n            'title': title,\n            'is_live': live,\n            'formats': formats,\n        }\n", "comments": "# ondemand from http://www.philharmonie.tv/veranstaltung/26/\n# live video stream\n# m3u8 downloads\n# live audio stream\n# live audio stream with some 404 URLs\n# geo restricted with 'This content is not available in your country'\n# geo restricted with 'playout.3qsdn.com/forbidden'\n# live video with rtmp link\n# More relaxed version to collect additional URLs and acting\n# as a future-proof fallback\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    js_to_json,\n    mimetype2ext,\n)\n\n\nclass ThreeQSDNIE(InfoExtractor):\n    IE_NAME = '3qsdn'\n    IE_DESC = '3Q SDN'\n    _VALID_URL = r'https?://playout\\.3qsdn\\.com/(?P<id>[\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})'\n    _TESTS = [{\n        # ondemand from http://www.philharmonie.tv/veranstaltung/26/\n        'url': 'http://playout.3qsdn.com/0280d6b9-1215-11e6-b427-0cc47a188158?protocol=http',\n        'md5': 'ab040e37bcfa2e0c079f92cb1dd7f6cd',\n        'info_dict': {\n            'id': '0280d6b9-1215-11e6-b427-0cc47a188158',\n            'ext': 'mp4',\n            'title': '0280d6b9-1215-11e6-b427-0cc47a188158',\n            'is_live': False,\n        },\n        'expected_warnings': ['Failed to download MPD manifest', 'Failed to parse JSON'],\n    }, {\n        # live video stream\n        'url': 'https://playout.3qsdn.com/d755d94b-4ab9-11e3-9162-0025907ad44f?js=true',\n        'info_dict': {\n            'id': 'd755d94b-4ab9-11e3-9162-0025907ad44f',\n            'ext': 'mp4',\n            'title': 're:^d755d94b-4ab9-11e3-9162-0025907ad44f [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,  # m3u8 downloads\n        },\n        'expected_warnings': ['Failed to download MPD manifest'],\n    }, {\n        # live audio stream\n        'url': 'http://playout.3qsdn.com/9edf36e0-6bf2-11e2-a16a-9acf09e2db48',\n        'only_matching': True,\n    }, {\n        # live audio stream with some 404 URLs\n        'url': 'http://playout.3qsdn.com/ac5c3186-777a-11e2-9c30-9acf09e2db48',\n        'only_matching': True,\n    }, {\n        # geo restricted with 'This content is not available in your country'\n        'url': 'http://playout.3qsdn.com/d63a3ffe-75e8-11e2-9c30-9acf09e2db48',\n        'only_matching': True,\n    }, {\n        # geo restricted with 'playout.3qsdn.com/forbidden'\n        'url': 'http://playout.3qsdn.com/8e330f26-6ae2-11e2-a16a-9acf09e2db48',\n        'only_matching': True,\n    }, {\n        # live video with rtmp link\n        'url': 'https://playout.3qsdn.com/6092bb9e-8f72-11e4-a173-002590c750be',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        mobj = re.search(\n            r'<iframe[^>]+\\b(?:data-)?src=([\"\\'])(?P<url>%s.*?)\\1' % ThreeQSDNIE._VALID_URL, webpage)\n        if mobj:\n            return mobj.group('url')\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        js = self._download_webpage(\n            'http://playout.3qsdn.com/%s' % video_id, video_id,\n            query={'js': 'true'})\n\n        if any(p in js for p in (\n                '>This content is not available in your country',\n                'playout.3qsdn.com/forbidden')):\n            self.raise_geo_restricted()\n\n        stream_content = self._search_regex(\n            r'streamContent\\s*:\\s*([\"\\'])(?P<content>.+?)\\1', js,\n            'stream content', default='demand', group='content')\n\n        live = stream_content == 'live'\n\n        stream_type = self._search_regex(\n            r'streamType\\s*:\\s*([\"\\'])(?P<type>audio|video)\\1', js,\n            'stream type', default='video', group='type')\n\n        formats = []\n        urls = set()\n\n        def extract_formats(item_url, item={}):\n            if not item_url or item_url in urls:\n                return\n            urls.add(item_url)\n            ext = mimetype2ext(item.get('type')) or determine_ext(item_url, default_ext=None)\n            if ext == 'mpd':\n                formats.extend(self._extract_mpd_formats(\n                    item_url, video_id, mpd_id='mpd', fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    item_url, video_id, 'mp4',\n                    entry_protocol='m3u8' if live else 'm3u8_native',\n                    m3u8_id='hls', fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    item_url, video_id, f4m_id='hds', fatal=False))\n            else:\n                if not self._is_valid_url(item_url, video_id):\n                    return\n                formats.append({\n                    'url': item_url,\n                    'format_id': item.get('quality'),\n                    'ext': 'mp4' if item_url.startswith('rtsp') else ext,\n                    'vcodec': 'none' if stream_type == 'audio' else None,\n                })\n\n        for item_js in re.findall(r'({[^{]*?\\b(?:src|source)\\s*:\\s*[\"\\'].+?})', js):\n            f = self._parse_json(\n                item_js, video_id, transform_source=js_to_json, fatal=False)\n            if not f:\n                continue\n            extract_formats(f.get('src'), f)\n\n        # More relaxed version to collect additional URLs and acting\n        # as a future-proof fallback\n        for _, src in re.findall(r'\\b(?:src|source)\\s*:\\s*([\"\\'])((?:https?|rtsp)://.+?)\\1', js):\n            extract_formats(src)\n\n        self._sort_formats(formats)\n\n        title = self._live_title(video_id) if live else video_id\n\n        return {\n            'id': video_id,\n            'title': title,\n            'is_live': live,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "threeqsdn.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/threeqsdn.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}