{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_strdate\n\n\nclass TeleTaskIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tele-task\\.de/archive/video/html5/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.tele-task.de/archive/video/html5/26168/',\n        'info_dict': {\n            'id': '26168',\n            'title': 'Duplicate Detection',\n        },\n        'playlist': [{\n            'md5': '290ef69fb2792e481169c3958dbfbd57',\n            'info_dict': {\n                'id': '26168-speaker',\n                'ext': 'mp4',\n                'title': 'Duplicate Detection',\n                'upload_date': '20141218',\n            }\n        }, {\n            'md5': 'e1e7218c5f0e4790015a437fcf6c71b4',\n            'info_dict': {\n                'id': '26168-slides',\n                'ext': 'mp4',\n                'title': 'Duplicate Detection',\n                'upload_date': '20141218',\n            }\n        }]\n    }\n\n    def _real_extract(self, url):\n        lecture_id = self._match_id(url)\n        webpage = self._download_webpage(url, lecture_id)\n\n        title = self._html_search_regex(\n            r'itemprop=\"name\">([^<]+)</a>', webpage, 'title')\n        upload_date = unified_strdate(self._html_search_regex(\n            r'Date:</td><td>([^<]+)</td>', webpage, 'date', fatal=False))\n\n        entries = [{\n            'id': '%s-%s' % (lecture_id, format_id),\n            'url': video_url,\n            'title': title,\n            'upload_date': upload_date,\n        } for format_id, video_url in re.findall(\n            r'<video class=\"([^\"]+)\"[^>]*>\\s*<source src=\"([^\"]+)\"', webpage)]\n\n        return self.playlist_result(entries, lecture_id, title)\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_strdate\n\n\nclass TeleTaskIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?tele-task\\.de/archive/video/html5/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.tele-task.de/archive/video/html5/26168/',\n        'info_dict': {\n            'id': '26168',\n            'title': 'Duplicate Detection',\n        },\n        'playlist': [{\n            'md5': '290ef69fb2792e481169c3958dbfbd57',\n            'info_dict': {\n                'id': '26168-speaker',\n                'ext': 'mp4',\n                'title': 'Duplicate Detection',\n                'upload_date': '20141218',\n            }\n        }, {\n            'md5': 'e1e7218c5f0e4790015a437fcf6c71b4',\n            'info_dict': {\n                'id': '26168-slides',\n                'ext': 'mp4',\n                'title': 'Duplicate Detection',\n                'upload_date': '20141218',\n            }\n        }]\n    }\n\n    def _real_extract(self, url):\n        lecture_id = self._match_id(url)\n        webpage = self._download_webpage(url, lecture_id)\n\n        title = self._html_search_regex(\n            r'itemprop=\"name\">([^<]+)</a>', webpage, 'title')\n        upload_date = unified_strdate(self._html_search_regex(\n            r'Date:</td><td>([^<]+)</td>', webpage, 'date', fatal=False))\n\n        entries = [{\n            'id': '%s-%s' % (lecture_id, format_id),\n            'url': video_url,\n            'title': title,\n            'upload_date': upload_date,\n        } for format_id, video_url in re.findall(\n            r'<video class=\"([^\"]+)\"[^>]*>\\s*<source src=\"([^\"]+)\"', webpage)]\n\n        return self.playlist_result(entries, lecture_id, title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "teletask.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/teletask.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}