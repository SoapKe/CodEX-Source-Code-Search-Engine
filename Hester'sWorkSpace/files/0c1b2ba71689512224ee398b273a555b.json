{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass RTVNHIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?rtvnh\\.nl/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.rtvnh.nl/video/131946',\n        'md5': 'cdbec9f44550763c8afc96050fa747dc',\n        'info_dict': {\n            'id': '131946',\n            'ext': 'mp4',\n            'title': 'Grote zoektocht in zee bij Zandvoort naar vermiste vrouw',\n            'thumbnail': r're:^https?:.*\\.jpg$'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        meta = self._parse_json(self._download_webpage(\n            'http://www.rtvnh.nl/video/json?m=' + video_id, video_id), video_id)\n\n        status = meta.get('status')\n        if status != 200:\n            raise ExtractorError(\n                '%s returned error code %d' % (self.IE_NAME, status), expected=True)\n\n        formats = []\n        rtmp_formats = self._extract_smil_formats(\n            'http://www.rtvnh.nl/video/smil?m=' + video_id, video_id)\n        formats.extend(rtmp_formats)\n\n        for rtmp_format in rtmp_formats:\n            rtmp_url = '%s/%s' % (rtmp_format['url'], rtmp_format['play_path'])\n            rtsp_format = rtmp_format.copy()\n            del rtsp_format['play_path']\n            del rtsp_format['ext']\n            rtsp_format.update({\n                'format_id': rtmp_format['format_id'].replace('rtmp', 'rtsp'),\n                'url': rtmp_url.replace('rtmp://', 'rtsp://'),\n                'protocol': 'rtsp',\n            })\n            formats.append(rtsp_format)\n            http_base_url = rtmp_url.replace('rtmp://', 'http://')\n            formats.extend(self._extract_m3u8_formats(\n                http_base_url + '/playlist.m3u8', video_id, 'mp4',\n                'm3u8_native', m3u8_id='hls', fatal=False))\n            formats.extend(self._extract_f4m_formats(\n                http_base_url + '/manifest.f4m',\n                video_id, f4m_id='hds', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': meta['title'].strip(),\n            'thumbnail': meta.get('image'),\n            'formats': formats\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass RTVNHIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?rtvnh\\.nl/video/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.rtvnh.nl/video/131946',\n        'md5': 'cdbec9f44550763c8afc96050fa747dc',\n        'info_dict': {\n            'id': '131946',\n            'ext': 'mp4',\n            'title': 'Grote zoektocht in zee bij Zandvoort naar vermiste vrouw',\n            'thumbnail': r're:^https?:.*\\.jpg$'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        meta = self._parse_json(self._download_webpage(\n            'http://www.rtvnh.nl/video/json?m=' + video_id, video_id), video_id)\n\n        status = meta.get('status')\n        if status != 200:\n            raise ExtractorError(\n                '%s returned error code %d' % (self.IE_NAME, status), expected=True)\n\n        formats = []\n        rtmp_formats = self._extract_smil_formats(\n            'http://www.rtvnh.nl/video/smil?m=' + video_id, video_id)\n        formats.extend(rtmp_formats)\n\n        for rtmp_format in rtmp_formats:\n            rtmp_url = '%s/%s' % (rtmp_format['url'], rtmp_format['play_path'])\n            rtsp_format = rtmp_format.copy()\n            del rtsp_format['play_path']\n            del rtsp_format['ext']\n            rtsp_format.update({\n                'format_id': rtmp_format['format_id'].replace('rtmp', 'rtsp'),\n                'url': rtmp_url.replace('rtmp://', 'rtsp://'),\n                'protocol': 'rtsp',\n            })\n            formats.append(rtsp_format)\n            http_base_url = rtmp_url.replace('rtmp://', 'http://')\n            formats.extend(self._extract_m3u8_formats(\n                http_base_url + '/playlist.m3u8', video_id, 'mp4',\n                'm3u8_native', m3u8_id='hls', fatal=False))\n            formats.extend(self._extract_f4m_formats(\n                http_base_url + '/manifest.f4m',\n                video_id, f4m_id='hds', fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': meta['title'].strip(),\n            'thumbnail': meta.get('image'),\n            'formats': formats\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rtvnh.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rtvnh.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}