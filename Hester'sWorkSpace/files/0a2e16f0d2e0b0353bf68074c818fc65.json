{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nclass TestStockLandedCostsCommon(AccountingTestCase):\n\n    def setUp(self):\n        super(TestStockLandedCostsCommon, self).setUp()\n        \n        self.Product = self.env['product.product']\n        self.Picking = self.env['stock.picking']\n        self.Move = self.env['stock.move']\n        self.LandedCost = self.env['stock.landed.cost']\n        self.CostLine = self.env['stock.landed.cost.lines']\n        \n        self.supplier_id = self.ref('base.res_partner_2')\n        self.customer_id = self.ref('base.res_partner_4')\n        self.picking_type_in_id = self.ref('stock.picking_type_in')\n        self.picking_type_out_id = self.ref('stock.picking_type_out')\n        self.supplier_location_id = self.ref('stock.stock_location_suppliers')\n        self.stock_location_id = self.ref('stock.stock_location_stock')\n        self.customer_location_id = self.ref('stock.stock_location_customers')\n        self.categ_all = self.env.ref('product.product_category_all')\n        \n        self.default_account = self.env['account.account'].create({\n            'name': \"Purchased Stocks\",\n            'code': \"X1101\",\n            'user_type_id': self.env['account.account.type'].create({\n                    'name': 'Expenses',\n                    'type': 'other'}).id,\n            'reconcile': True})\n        self.expenses_journal = self.env['account.journal'].create({\n            'name': 'Expenses - Test',\n            'code': 'TEXJ',\n            'type': 'purchase',\n            'default_debit_account_id': self.default_account.id,\n            'default_credit_account_id': self.default_account.id})\n        \n        self.product_refrigerator = self.Product.create({\n            'name': 'Refrigerator',\n            'type': 'product',\n            'cost_method': 'fifo',\n            'valuation': 'real_time',\n            'standard_price': 1.0,\n            'weight': 10,\n            'volume': 1,\n            'categ_id': self.categ_all.id})\n        self.product_oven = self.Product.create({\n            'name': 'Microwave Oven',\n            'type': 'product',\n            'cost_method': 'fifo',\n            'valuation': 'real_time',\n            'standard_price': 1.0,\n            'weight': 20,\n            'volume': 1.5,\n            'categ_id': self.categ_all.id})\n        \n        self.landed_cost = self._create_services('Landed Cost')\n        self.brokerage_quantity = self._create_services('Brokerage Cost')\n        self.transportation_weight = self._create_services('Transportation Cost')\n        self.packaging_volume = self._create_services('Packaging Cost')\n        \n        self.ensure_account_property('property_stock_account_input')\n        self.ensure_account_property('property_stock_account_output')\n\n    def _create_services(self, name):\n        return self.Product.create({\n            'name': name,\n            'landed_cost_ok': True,\n            'type': 'service'})\n", "comments": "      coding  utf 8        objects    references    create account    create product refrigerator   oven    create service type product 1 labour 2 brokerage 3 transportation 4 packaging    ensure account properties exists  ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nclass TestStockLandedCostsCommon(AccountingTestCase):\n\n    def setUp(self):\n        super(TestStockLandedCostsCommon, self).setUp()\n        # Objects\n        self.Product = self.env['product.product']\n        self.Picking = self.env['stock.picking']\n        self.Move = self.env['stock.move']\n        self.LandedCost = self.env['stock.landed.cost']\n        self.CostLine = self.env['stock.landed.cost.lines']\n        # References\n        self.supplier_id = self.ref('base.res_partner_2')\n        self.customer_id = self.ref('base.res_partner_4')\n        self.picking_type_in_id = self.ref('stock.picking_type_in')\n        self.picking_type_out_id = self.ref('stock.picking_type_out')\n        self.supplier_location_id = self.ref('stock.stock_location_suppliers')\n        self.stock_location_id = self.ref('stock.stock_location_stock')\n        self.customer_location_id = self.ref('stock.stock_location_customers')\n        self.categ_all = self.env.ref('product.product_category_all')\n        # Create account\n        self.default_account = self.env['account.account'].create({\n            'name': \"Purchased Stocks\",\n            'code': \"X1101\",\n            'user_type_id': self.env['account.account.type'].create({\n                    'name': 'Expenses',\n                    'type': 'other'}).id,\n            'reconcile': True})\n        self.expenses_journal = self.env['account.journal'].create({\n            'name': 'Expenses - Test',\n            'code': 'TEXJ',\n            'type': 'purchase',\n            'default_debit_account_id': self.default_account.id,\n            'default_credit_account_id': self.default_account.id})\n        # Create product refrigerator & oven\n        self.product_refrigerator = self.Product.create({\n            'name': 'Refrigerator',\n            'type': 'product',\n            'cost_method': 'fifo',\n            'valuation': 'real_time',\n            'standard_price': 1.0,\n            'weight': 10,\n            'volume': 1,\n            'categ_id': self.categ_all.id})\n        self.product_oven = self.Product.create({\n            'name': 'Microwave Oven',\n            'type': 'product',\n            'cost_method': 'fifo',\n            'valuation': 'real_time',\n            'standard_price': 1.0,\n            'weight': 20,\n            'volume': 1.5,\n            'categ_id': self.categ_all.id})\n        # Create service type product 1.Labour 2.Brokerage 3.Transportation 4.Packaging\n        self.landed_cost = self._create_services('Landed Cost')\n        self.brokerage_quantity = self._create_services('Brokerage Cost')\n        self.transportation_weight = self._create_services('Transportation Cost')\n        self.packaging_volume = self._create_services('Packaging Cost')\n        # Ensure the account properties exists.\n        self.ensure_account_property('property_stock_account_input')\n        self.ensure_account_property('property_stock_account_output')\n\n    def _create_services(self, name):\n        return self.Product.create({\n            'name': name,\n            'landed_cost_ok': True,\n            'type': 'service'})\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "common.py", "id": "0a2e16f0d2e0b0353bf68074c818fc65", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/stock_landed_costs/tests/common.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}