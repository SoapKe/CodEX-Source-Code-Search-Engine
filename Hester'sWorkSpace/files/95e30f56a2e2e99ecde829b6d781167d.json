{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n#  Copyright (c) 2017 Citrix Systems\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: netscaler_save_config\nshort_description: Save Netscaler configuration.\ndescription:\n    - This module uncoditionally saves the configuration on the target netscaler node.\n    - This module does not support check mode.\n    - This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.\n\nversion_added: \"2.4.0\"\n\nauthor: George Nikolopoulos (@giorgos-nikolopoulos)\n\noptions:\n    nsip:\n        description:\n            - The ip address of the netscaler appliance where the nitro API calls will be made.\n            - \"The port can be specified with the colon (:). E.g. C(192.168.1.1:555).\"\n        required: True\n\n    nitro_user:\n        description:\n            - The username with which to authenticate to the netscaler node.\n        required: True\n\n    nitro_pass:\n        description:\n            - The password with which to authenticate to the netscaler node.\n        required: True\n\n    nitro_protocol:\n        choices: [ 'http', 'https' ]\n        default: http\n        description:\n            - Which protocol to use when accessing the nitro API objects.\n\n    validate_certs:\n        description:\n            - If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        required: false\n        default: 'yes'\n\n    nitro_timeout:\n        description:\n            - Time in seconds until a timeout error is thrown when establishing a new session with Netscaler.\n        default: 310\n\nrequirements:\n    - nitro python sdk\n'''\n\nEXAMPLES = '''\n---\n- name: Save netscaler configuration\n  delegate_to: localhost\n  netscaler_save_config:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n- name: Setup server without saving  configuration\n  delegate_to: localhost\n  notify: Save configuration\n  netscaler_server:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    save_config: no\n\n    name: server-1\n    ipaddress: 192.168.1.1\n\n\n\n- name: Save configuration\n  delegate_to: localhost\n  netscaler_save_config:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n'''\n\nRETURN = '''\nloglines:\n    description: list of logged messages by the module\n    returned: always\n    type: list\n    sample: ['message 1', 'message 2']\n\nmsg:\n    description: Message detailing the failure reason\n    returned: failure\n    type: str\n    sample: \"Action does not exist\"\n\n'''\n\nimport copy\n\ntry:\n    from nssrc.com.citrix.netscaler.nitro.exception.nitro_exception import nitro_exception\n    PYTHON_SDK_IMPORTED = True\nexcept ImportError as e:\n    PYTHON_SDK_IMPORTED = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.netscaler.netscaler import get_nitro_client, log, loglines, netscaler_common_arguments\n\n\ndef main():\n\n    argument_spec = copy.deepcopy(netscaler_common_arguments)\n\n    \n    del argument_spec['state']\n    del argument_spec['save_config']\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=False,\n    )\n\n    module_result = dict(\n        changed=False,\n        failed=False,\n        loglines=loglines,\n    )\n\n    \n    if not PYTHON_SDK_IMPORTED:\n        module.fail_json(msg='Could not load nitro python sdk')\n\n    \n    client = get_nitro_client(module)\n\n    try:\n        client.login()\n    except nitro_exception as e:\n        msg = \"nitro exception during login. errorcode=%s, message=%s\" % (str(e.errorcode), e.message)\n        module.fail_json(msg=msg)\n    except Exception as e:\n        if str(type(e)) == \"<class 'requests.exceptions.ConnectionError'>\":\n            module.fail_json(msg='Connection error %s' % str(e))\n        elif str(type(e)) == \"<class 'requests.exceptions.SSLError'>\":\n            module.fail_json(msg='SSL Error %s' % str(e))\n        else:\n            module.fail_json(msg='Unexpected error during login %s' % str(e))\n\n    try:\n        log('Saving configuration')\n        client.save_config()\n    except nitro_exception as e:\n        msg = \"nitro exception errorcode=\" + str(e.errorcode) + \",message=\" + e.message\n        module.fail_json(msg=msg, **module_result)\n\n    client.logout()\n    module.exit_json(**module_result)\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  netscaler save config short description  save netscaler configuration  description        this module uncoditionally saves configuration target netscaler node        this module support check mode        this module intended run either ansible  control node bastion (jumpserver) access actual netscaler instance   version added   2 4 0   author  george nikolopoulos ( giorgos nikolopoulos)  options      nsip          description                the ip address netscaler appliance nitro api calls made                 the port specified colon ( )  e g  c(192 168 1 1 555)           required  true      nitro user          description                the username authenticate netscaler node          required  true      nitro pass          description                the password authenticate netscaler node          required  true      nitro protocol          choices     http    https            default  http         description                which protocol use accessing nitro api objects       validate certs          description                if c(no)  ssl certificates validated  this used personally controlled sites using self signed certificates          required  false         default   yes       nitro timeout          description                time seconds timeout error thrown establishing new session netscaler          default  310  requirements        nitro python sdk      examples             name  save netscaler configuration   delegate  localhost   netscaler save config      nsip  172 18 0 2     nitro user  nsroot     nitro pass  nsroot    name  setup server without saving  configuration   delegate  localhost   notify  save configuration   netscaler server      nsip  172 18 0 2     nitro user  nsroot     nitro pass  nsroot      save config       name  server 1     ipaddress  192 168 1 1    under playbook handlers    name  save configuration   delegate  localhost   netscaler save config      nsip  172 18 0 2     nitro user  nsroot     nitro pass  nsroot      return       loglines      description  list logged messages module     returned  always     type  list     sample    message 1    message 2    msg      description  message detailing failure reason     returned  failure     type  str     sample   action exist           usr bin python        coding  utf 8         copyright (c) 2017 citrix systems    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    under playbook handlers    delete common arguments irrelevant module    fail module imports failed    fallthrough rest execution ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n#  Copyright (c) 2017 Citrix Systems\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: netscaler_save_config\nshort_description: Save Netscaler configuration.\ndescription:\n    - This module uncoditionally saves the configuration on the target netscaler node.\n    - This module does not support check mode.\n    - This module is intended to run either on the ansible  control node or a bastion (jumpserver) with access to the actual netscaler instance.\n\nversion_added: \"2.4.0\"\n\nauthor: George Nikolopoulos (@giorgos-nikolopoulos)\n\noptions:\n    nsip:\n        description:\n            - The ip address of the netscaler appliance where the nitro API calls will be made.\n            - \"The port can be specified with the colon (:). E.g. C(192.168.1.1:555).\"\n        required: True\n\n    nitro_user:\n        description:\n            - The username with which to authenticate to the netscaler node.\n        required: True\n\n    nitro_pass:\n        description:\n            - The password with which to authenticate to the netscaler node.\n        required: True\n\n    nitro_protocol:\n        choices: [ 'http', 'https' ]\n        default: http\n        description:\n            - Which protocol to use when accessing the nitro API objects.\n\n    validate_certs:\n        description:\n            - If C(no), SSL certificates will not be validated. This should only be used on personally controlled sites using self-signed certificates.\n        required: false\n        default: 'yes'\n\n    nitro_timeout:\n        description:\n            - Time in seconds until a timeout error is thrown when establishing a new session with Netscaler.\n        default: 310\n\nrequirements:\n    - nitro python sdk\n'''\n\nEXAMPLES = '''\n---\n- name: Save netscaler configuration\n  delegate_to: localhost\n  netscaler_save_config:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n- name: Setup server without saving  configuration\n  delegate_to: localhost\n  notify: Save configuration\n  netscaler_server:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n\n    save_config: no\n\n    name: server-1\n    ipaddress: 192.168.1.1\n\n# Under playbook's handlers\n\n- name: Save configuration\n  delegate_to: localhost\n  netscaler_save_config:\n    nsip: 172.18.0.2\n    nitro_user: nsroot\n    nitro_pass: nsroot\n'''\n\nRETURN = '''\nloglines:\n    description: list of logged messages by the module\n    returned: always\n    type: list\n    sample: ['message 1', 'message 2']\n\nmsg:\n    description: Message detailing the failure reason\n    returned: failure\n    type: str\n    sample: \"Action does not exist\"\n\n'''\n\nimport copy\n\ntry:\n    from nssrc.com.citrix.netscaler.nitro.exception.nitro_exception import nitro_exception\n    PYTHON_SDK_IMPORTED = True\nexcept ImportError as e:\n    PYTHON_SDK_IMPORTED = False\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.netscaler.netscaler import get_nitro_client, log, loglines, netscaler_common_arguments\n\n\ndef main():\n\n    argument_spec = copy.deepcopy(netscaler_common_arguments)\n\n    # Delete common arguments irrelevant to this module\n    del argument_spec['state']\n    del argument_spec['save_config']\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=False,\n    )\n\n    module_result = dict(\n        changed=False,\n        failed=False,\n        loglines=loglines,\n    )\n\n    # Fail the module if imports failed\n    if not PYTHON_SDK_IMPORTED:\n        module.fail_json(msg='Could not load nitro python sdk')\n\n    # Fallthrough to rest of execution\n    client = get_nitro_client(module)\n\n    try:\n        client.login()\n    except nitro_exception as e:\n        msg = \"nitro exception during login. errorcode=%s, message=%s\" % (str(e.errorcode), e.message)\n        module.fail_json(msg=msg)\n    except Exception as e:\n        if str(type(e)) == \"<class 'requests.exceptions.ConnectionError'>\":\n            module.fail_json(msg='Connection error %s' % str(e))\n        elif str(type(e)) == \"<class 'requests.exceptions.SSLError'>\":\n            module.fail_json(msg='SSL Error %s' % str(e))\n        else:\n            module.fail_json(msg='Unexpected error during login %s' % str(e))\n\n    try:\n        log('Saving configuration')\n        client.save_config()\n    except nitro_exception as e:\n        msg = \"nitro exception errorcode=\" + str(e.errorcode) + \",message=\" + e.message\n        module.fail_json(msg=msg, **module_result)\n\n    client.logout()\n    module.exit_json(**module_result)\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "netscaler_save_config.py", "id": "95e30f56a2e2e99ecde829b6d781167d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netscaler/netscaler_save_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}