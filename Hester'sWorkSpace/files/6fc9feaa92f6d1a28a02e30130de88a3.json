{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom ..compat import compat_urlparse\nfrom .common import InfoExtractor\nfrom ..utils import parse_duration\n\n\nclass JamendoBaseIE(InfoExtractor):\n    def _extract_meta(self, webpage, fatal=True):\n        title = self._og_search_title(\n            webpage, default=None) or self._search_regex(\n            r'<title>([^<]+)', webpage,\n            'title', default=None)\n        if title:\n            title = self._search_regex(\n                r'(.+?)\\s*\\|\\s*Jamendo Music', title, 'title', default=None)\n        if not title:\n            title = self._html_search_meta(\n                'name', webpage, 'title', fatal=fatal)\n        mobj = re.search(r'(.+) - (.+)', title or '')\n        artist, second = mobj.groups() if mobj else [None] * 2\n        return title, artist, second\n\n\nclass JamendoIE(JamendoBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?jamendo\\.com/track/(?P<id>[0-9]+)/(?P<display_id>[^/?\n    _TEST = {\n        'url': 'https://www.jamendo.com/track/196219/stories-from-emona-i',\n        'md5': '6e9e82ed6db98678f171c25a8ed09ffd',\n        'info_dict': {\n            'id': '196219',\n            'display_id': 'stories-from-emona-i',\n            'ext': 'flac',\n            'title': 'Maya Filipi\u010d - Stories from Emona I',\n            'artist': 'Maya Filipi\u010d',\n            'track': 'Stories from Emona I',\n            'duration': 210,\n            'thumbnail': r're:^https?://.*\\.jpg'\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = self._VALID_URL_RE.match(url)\n        track_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title, artist, track = self._extract_meta(webpage)\n\n        formats = [{\n            'url': 'https://%s.jamendo.com/?trackid=%s&format=%s&from=app-97dab294'\n                   % (sub_domain, track_id, format_id),\n            'format_id': format_id,\n            'ext': ext,\n            'quality': quality,\n        } for quality, (format_id, sub_domain, ext) in enumerate((\n            ('mp31', 'mp3l', 'mp3'),\n            ('mp32', 'mp3d', 'mp3'),\n            ('ogg1', 'ogg', 'ogg'),\n            ('flac', 'flac', 'flac'),\n        ))]\n        self._sort_formats(formats)\n\n        thumbnail = self._html_search_meta(\n            'image', webpage, 'thumbnail', fatal=False)\n        duration = parse_duration(self._search_regex(\n            r'<span[^>]+itemprop=[\"\\']duration[\"\\'][^>]+content=[\"\\'](.+?)[\"\\']',\n            webpage, 'duration', fatal=False))\n\n        return {\n            'id': track_id,\n            'display_id': display_id,\n            'thumbnail': thumbnail,\n            'title': title,\n            'duration': duration,\n            'artist': artist,\n            'track': track,\n            'formats': formats\n        }\n\n\nclass JamendoAlbumIE(JamendoBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?jamendo\\.com/album/(?P<id>[0-9]+)/(?P<display_id>[\\w-]+)'\n    _TEST = {\n        'url': 'https://www.jamendo.com/album/121486/duck-on-cover',\n        'info_dict': {\n            'id': '121486',\n            'title': 'Shearer - Duck On Cover'\n        },\n        'playlist': [{\n            'md5': 'e1a2fcb42bda30dfac990212924149a8',\n            'info_dict': {\n                'id': '1032333',\n                'ext': 'flac',\n                'title': 'Shearer - Warmachine',\n                'artist': 'Shearer',\n                'track': 'Warmachine',\n            }\n        }, {\n            'md5': '1f358d7b2f98edfe90fd55dac0799d50',\n            'info_dict': {\n                'id': '1032330',\n                'ext': 'flac',\n                'title': 'Shearer - Without Your Ghost',\n                'artist': 'Shearer',\n                'track': 'Without Your Ghost',\n            }\n        }],\n        'params': {\n            'playlistend': 2\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = self._VALID_URL_RE.match(url)\n        album_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, mobj.group('display_id'))\n\n        title, artist, album = self._extract_meta(webpage, fatal=False)\n\n        entries = [{\n            '_type': 'url_transparent',\n            'url': compat_urlparse.urljoin(url, m.group('path')),\n            'ie_key': JamendoIE.ie_key(),\n            'id': self._search_regex(\n                r'/track/(\\d+)', m.group('path'), 'track id', default=None),\n            'artist': artist,\n            'album': album,\n        } for m in re.finditer(\n            r'<a[^>]+href=([\"\\'])(?P<path>(?:(?!\\1).)+)\\1[^>]+class=[\"\\'][^>]*js-trackrow-albumpage-link',\n            webpage)]\n\n        return self.playlist_result(entries, album_id, title)\n", "comments": "# coding: utf-8\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom ..compat import compat_urlparse\nfrom .common import InfoExtractor\nfrom ..utils import parse_duration\n\n\nclass JamendoBaseIE(InfoExtractor):\n    def _extract_meta(self, webpage, fatal=True):\n        title = self._og_search_title(\n            webpage, default=None) or self._search_regex(\n            r'<title>([^<]+)', webpage,\n            'title', default=None)\n        if title:\n            title = self._search_regex(\n                r'(.+?)\\s*\\|\\s*Jamendo Music', title, 'title', default=None)\n        if not title:\n            title = self._html_search_meta(\n                'name', webpage, 'title', fatal=fatal)\n        mobj = re.search(r'(.+) - (.+)', title or '')\n        artist, second = mobj.groups() if mobj else [None] * 2\n        return title, artist, second\n\n\nclass JamendoIE(JamendoBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?jamendo\\.com/track/(?P<id>[0-9]+)/(?P<display_id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://www.jamendo.com/track/196219/stories-from-emona-i',\n        'md5': '6e9e82ed6db98678f171c25a8ed09ffd',\n        'info_dict': {\n            'id': '196219',\n            'display_id': 'stories-from-emona-i',\n            'ext': 'flac',\n            'title': 'Maya Filipi\u010d - Stories from Emona I',\n            'artist': 'Maya Filipi\u010d',\n            'track': 'Stories from Emona I',\n            'duration': 210,\n            'thumbnail': r're:^https?://.*\\.jpg'\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = self._VALID_URL_RE.match(url)\n        track_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title, artist, track = self._extract_meta(webpage)\n\n        formats = [{\n            'url': 'https://%s.jamendo.com/?trackid=%s&format=%s&from=app-97dab294'\n                   % (sub_domain, track_id, format_id),\n            'format_id': format_id,\n            'ext': ext,\n            'quality': quality,\n        } for quality, (format_id, sub_domain, ext) in enumerate((\n            ('mp31', 'mp3l', 'mp3'),\n            ('mp32', 'mp3d', 'mp3'),\n            ('ogg1', 'ogg', 'ogg'),\n            ('flac', 'flac', 'flac'),\n        ))]\n        self._sort_formats(formats)\n\n        thumbnail = self._html_search_meta(\n            'image', webpage, 'thumbnail', fatal=False)\n        duration = parse_duration(self._search_regex(\n            r'<span[^>]+itemprop=[\"\\']duration[\"\\'][^>]+content=[\"\\'](.+?)[\"\\']',\n            webpage, 'duration', fatal=False))\n\n        return {\n            'id': track_id,\n            'display_id': display_id,\n            'thumbnail': thumbnail,\n            'title': title,\n            'duration': duration,\n            'artist': artist,\n            'track': track,\n            'formats': formats\n        }\n\n\nclass JamendoAlbumIE(JamendoBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?jamendo\\.com/album/(?P<id>[0-9]+)/(?P<display_id>[\\w-]+)'\n    _TEST = {\n        'url': 'https://www.jamendo.com/album/121486/duck-on-cover',\n        'info_dict': {\n            'id': '121486',\n            'title': 'Shearer - Duck On Cover'\n        },\n        'playlist': [{\n            'md5': 'e1a2fcb42bda30dfac990212924149a8',\n            'info_dict': {\n                'id': '1032333',\n                'ext': 'flac',\n                'title': 'Shearer - Warmachine',\n                'artist': 'Shearer',\n                'track': 'Warmachine',\n            }\n        }, {\n            'md5': '1f358d7b2f98edfe90fd55dac0799d50',\n            'info_dict': {\n                'id': '1032330',\n                'ext': 'flac',\n                'title': 'Shearer - Without Your Ghost',\n                'artist': 'Shearer',\n                'track': 'Without Your Ghost',\n            }\n        }],\n        'params': {\n            'playlistend': 2\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = self._VALID_URL_RE.match(url)\n        album_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, mobj.group('display_id'))\n\n        title, artist, album = self._extract_meta(webpage, fatal=False)\n\n        entries = [{\n            '_type': 'url_transparent',\n            'url': compat_urlparse.urljoin(url, m.group('path')),\n            'ie_key': JamendoIE.ie_key(),\n            'id': self._search_regex(\n                r'/track/(\\d+)', m.group('path'), 'track id', default=None),\n            'artist': artist,\n            'album': album,\n        } for m in re.finditer(\n            r'<a[^>]+href=([\"\\'])(?P<path>(?:(?!\\1).)+)\\1[^>]+class=[\"\\'][^>]*js-trackrow-albumpage-link',\n            webpage)]\n\n        return self.playlist_result(entries, album_id, title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "jamendo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/jamendo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}