{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\n_translation_table = {\n    'a': 'h', 'd': 'e', 'e': 'v', 'f': 'o', 'g': 'f', 'i': 'd', 'l': 'n',\n    'm': 'a', 'n': 'm', 'p': 'u', 'q': 't', 'r': 's', 'v': 'p', 'x': 'r',\n    'y': 'l', 'z': 'i',\n    '$': ':', '&': '.', '(': '=', '^': '&', '=': '/',\n}\n\n\ndef _decode(s):\n    return ''.join(_translation_table.get(c, c) for c in s)\n\n\nclass CliphunterIE(InfoExtractor):\n    IE_NAME = 'cliphunter'\n\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://www.cliphunter.com/w/1012420/Fun_Jynx_Maze_solo',\n        'md5': 'b7c9bbd4eb3a226ab91093714dcaa480',\n        'info_dict': {\n            'id': '1012420',\n            'ext': 'flv',\n            'title': 'Fun Jynx Maze solo',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'age_limit': 18,\n        },\n        'skip': 'Video gone',\n    }, {\n        'url': 'http://www.cliphunter.com/w/2019449/ShesNew__My_booty_girlfriend_Victoria_Paradices_pussy_filled_with_jizz',\n        'md5': '55a723c67bfc6da6b0cfa00d55da8a27',\n        'info_dict': {\n            'id': '2019449',\n            'ext': 'mp4',\n            'title': 'ShesNew - My booty girlfriend, Victoria Paradice\\'s pussy filled with jizz',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'age_limit': 18,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_title = self._search_regex(\n            r'mediaTitle = \"([^\"]+)\"', webpage, 'title')\n\n        gexo_files = self._parse_json(\n            self._search_regex(\n                r'var\\s+gexoFiles\\s*=\\s*({.+?});', webpage, 'gexo files'),\n            video_id)\n\n        formats = []\n        for format_id, f in gexo_files.items():\n            video_url = f.get('url')\n            if not video_url:\n                continue\n            fmt = f.get('fmt')\n            height = f.get('h')\n            format_id = '%s_%sp' % (fmt, height) if fmt and height else format_id\n            formats.append({\n                'url': _decode(video_url),\n                'format_id': format_id,\n                'width': int_or_none(f.get('w')),\n                'height': int_or_none(height),\n                'tbr': int_or_none(f.get('br')),\n            })\n        self._sort_formats(formats)\n\n        thumbnail = self._search_regex(\n            r\"var\\s+mov_thumb\\s*=\\s*'([^']+)';\",\n            webpage, 'thumbnail', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'formats': formats,\n            'age_limit': self._rta_search(webpage),\n            'thumbnail': thumbnail,\n        }\n", "comments": "(?x)https?://(?:www\\.)?cliphunter\\.com/w/\n        (?P<id>[0-9]+)/\n        (?P<seo>.+?)(?:$|[#\\?])\n    \n \n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import int_or_none\n\n\n_translation_table = {\n    'a': 'h', 'd': 'e', 'e': 'v', 'f': 'o', 'g': 'f', 'i': 'd', 'l': 'n',\n    'm': 'a', 'n': 'm', 'p': 'u', 'q': 't', 'r': 's', 'v': 'p', 'x': 'r',\n    'y': 'l', 'z': 'i',\n    '$': ':', '&': '.', '(': '=', '^': '&', '=': '/',\n}\n\n\ndef _decode(s):\n    return ''.join(_translation_table.get(c, c) for c in s)\n\n\nclass CliphunterIE(InfoExtractor):\n    IE_NAME = 'cliphunter'\n\n    _VALID_URL = r'''(?x)https?://(?:www\\.)?cliphunter\\.com/w/\n        (?P<id>[0-9]+)/\n        (?P<seo>.+?)(?:$|[#\\?])\n    '''\n    _TESTS = [{\n        'url': 'http://www.cliphunter.com/w/1012420/Fun_Jynx_Maze_solo',\n        'md5': 'b7c9bbd4eb3a226ab91093714dcaa480',\n        'info_dict': {\n            'id': '1012420',\n            'ext': 'flv',\n            'title': 'Fun Jynx Maze solo',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'age_limit': 18,\n        },\n        'skip': 'Video gone',\n    }, {\n        'url': 'http://www.cliphunter.com/w/2019449/ShesNew__My_booty_girlfriend_Victoria_Paradices_pussy_filled_with_jizz',\n        'md5': '55a723c67bfc6da6b0cfa00d55da8a27',\n        'info_dict': {\n            'id': '2019449',\n            'ext': 'mp4',\n            'title': 'ShesNew - My booty girlfriend, Victoria Paradice\\'s pussy filled with jizz',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'age_limit': 18,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_title = self._search_regex(\n            r'mediaTitle = \"([^\"]+)\"', webpage, 'title')\n\n        gexo_files = self._parse_json(\n            self._search_regex(\n                r'var\\s+gexoFiles\\s*=\\s*({.+?});', webpage, 'gexo files'),\n            video_id)\n\n        formats = []\n        for format_id, f in gexo_files.items():\n            video_url = f.get('url')\n            if not video_url:\n                continue\n            fmt = f.get('fmt')\n            height = f.get('h')\n            format_id = '%s_%sp' % (fmt, height) if fmt and height else format_id\n            formats.append({\n                'url': _decode(video_url),\n                'format_id': format_id,\n                'width': int_or_none(f.get('w')),\n                'height': int_or_none(height),\n                'tbr': int_or_none(f.get('br')),\n            })\n        self._sort_formats(formats)\n\n        thumbnail = self._search_regex(\n            r\"var\\s+mov_thumb\\s*=\\s*'([^']+)';\",\n            webpage, 'thumbnail', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'formats': formats,\n            'age_limit': self._rta_search(webpage),\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cliphunter.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cliphunter.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}