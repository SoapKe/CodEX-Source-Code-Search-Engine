{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import datetime\nimport json\nimport logging\n\nimport requests\nfrom werkzeug import urls\n\nfrom odoo import api, fields, models, registry, _\nfrom odoo.exceptions import UserError\nfrom odoo.http import request\n\n\n_logger = logging.getLogger(__name__)\n\nTIMEOUT = 20\n\nGOOGLE_AUTH_ENDPOINT = 'https://accounts.google.com/o/oauth2/auth'\nGOOGLE_TOKEN_ENDPOINT = 'https://accounts.google.com/o/oauth2/token'\nGOOGLE_API_BASE_URL = 'https://www.googleapis.com'\n\n\n\nclass GoogleService(models.TransientModel):\n    _name = 'google.service'\n\n    @api.model\n    def generate_refresh_token(self, service, authorization_code):\n        \"\"\" Call Google API to refresh the token, with the given authorization code\n            :param service : the name of the google service to actualize\n            :param authorization_code : the code to exchange against the new refresh token\n            :returns the new refresh token\n        \"\"\"\n        Parameters = self.env['ir.config_parameter'].sudo()\n        client_id = Parameters.get_param('google_%s_client_id' % service)\n        client_secret = Parameters.get_param('google_%s_client_secret' % service)\n        redirect_uri = Parameters.get_param('google_redirect_uri')\n\n        \n        headers = {\"Content-type\": \"application/x-www-form-urlencoded\"}\n        data = {\n            'code': authorization_code,\n            'client_id': client_id,\n            'client_secret': client_secret,\n            'redirect_uri': redirect_uri,\n            'grant_type': \"authorization_code\"\n        }\n        try:\n            req = requests.post(GOOGLE_TOKEN_ENDPOINT, data=data, headers=headers, timeout=TIMEOUT)\n            req.raise_for_status()\n            content = req.json()\n        except IOError:\n            error_msg = _(\"Something went wrong during your token generation. Maybe your Authorization Code is invalid or already expired\")\n            raise self.env['res.config.settings'].get_config_warning(error_msg)\n\n        return content.get('refresh_token')\n\n    @api.model\n    def _get_google_token_uri(self, service, scope):\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        encoded_params = urls.url_encode({\n            'scope': scope,\n            'redirect_uri': get_param('google_redirect_uri'),\n            'client_id': get_param('google_%s_client_id' % service),\n            'response_type': 'code',\n        })\n        return '%s?%s' % (GOOGLE_AUTH_ENDPOINT, encoded_params)\n\n    @api.model\n    def _get_authorize_uri(self, from_url, service, scope=False):\n        \"\"\" This method return the url needed to allow this instance of Odoo to access to the scope\n            of gmail specified as parameters\n        \"\"\"\n        state = {\n            'd': self.env.cr.dbname,\n            's': service,\n            'f': from_url\n        }\n\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        base_url = get_param('web.base.url', default='http://www.odoo.com?NoBaseUrl')\n        client_id = get_param('google_%s_client_id' % (service,), default=False)\n\n        encoded_params = urls.url_encode({\n            'response_type': 'code',\n            'client_id': client_id,\n            'state': json.dumps(state),\n            'scope': scope or '%s/auth/%s' % (GOOGLE_API_BASE_URL, service),  \n            'redirect_uri': base_url + '/google_account/authentication',\n            'approval_prompt': 'force',\n            'access_type': 'offline'\n        })\n        return \"%s?%s\" % (GOOGLE_AUTH_ENDPOINT, encoded_params)\n\n    @api.model\n    def _get_google_token_json(self, authorize_code, service):\n        \"\"\" Call Google API to exchange authorization code against token, with POST request, to\n            not be redirected.\n        \"\"\"\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        base_url = get_param('web.base.url', default='http://www.odoo.com?NoBaseUrl')\n        client_id = get_param('google_%s_client_id' % (service,), default=False)\n        client_secret = get_param('google_%s_client_secret' % (service,), default=False)\n\n        headers = {\"content-type\": \"application/x-www-form-urlencoded\"}\n        data = {\n            'code': authorize_code,\n            'client_id': client_id,\n            'client_secret': client_secret,\n            'grant_type': 'authorization_code',\n            'redirect_uri': base_url + '/google_account/authentication'\n        }\n        try:\n            dummy, response, dummy = self._do_request(GOOGLE_TOKEN_ENDPOINT, params=data, headers=headers, type='POST', preuri='')\n            return response\n        except requests.HTTPError:\n            error_msg = _(\"Something went wrong during your token generation. Maybe your Authorization Code is invalid\")\n            raise self.env['res.config.settings'].get_config_warning(error_msg)\n\n    \n    @api.model\n    def _refresh_google_token_json(self, refresh_token, service):  # exchange_AUTHORIZATION vs Token (service = calendar)\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        client_id = get_param('google_%s_client_id' % (service,), default=False)\n        client_secret = get_param('google_%s_client_secret' % (service,), default=False)\n\n        if not client_id or not client_secret:\n            raise UserError(_(\"The account for the Google service '%s' is not configured\") % service)\n\n        headers = {\"content-type\": \"application/x-www-form-urlencoded\"}\n        data = {\n            'refresh_token': refresh_token,\n            'client_id': client_id,\n            'client_secret': client_secret,\n            'grant_type': 'refresh_token',\n        }\n\n        try:\n            dummy, response, dummy = self._do_request(GOOGLE_TOKEN_ENDPOINT, params=data, headers=headers, type='POST', preuri='')\n            return response\n        except requests.HTTPError as error:\n            if error.response.status_code == 400:  \n                with registry(request.session.db).cursor() as cur:\n                    self.env(cur)['res.users'].browse(self.env.uid).write({'google_%s_rtoken' % service: False})\n            error_key = error.response.json().get(\"error\", \"nc\")\n            _logger.exception(\"Bad google request : %s !\", error_key)\n            error_msg = _(\"Something went wrong during your token generation. Maybe your Authorization Code is invalid or already expired [%s]\") % error_key\n            raise self.env['res.config.settings'].get_config_warning(error_msg)\n\n    \n    @api.model\n    def _do_request(self, uri, params={}, headers={}, type='POST', preuri=\"https://www.googleapis.com\"):\n        \"\"\" Execute the request to Google API. Return a tuple ('HTTP_CODE', 'HTTP_RESPONSE')\n            :param uri : the url to contact\n            :param params : dict or already encoded parameters for the request to make\n            :param headers : headers of request\n            :param type : the method to use to make the request\n            :param preuri : pre url to prepend to param uri.\n        \"\"\"\n        _logger.debug(\"Uri: %s - Type : %s - Headers: %s - Params : %s !\", (uri, type, headers, params))\n\n        ask_time = fields.Datetime.now()\n        try:\n            if type.upper() in ('GET', 'DELETE'):\n                res = requests.request(type.lower(), preuri + uri, params=params, timeout=TIMEOUT)\n            elif type.upper() in ('POST', 'PATCH', 'PUT'):\n                res = requests.request(type.lower(), preuri + uri, data=params, headers=headers, timeout=TIMEOUT)\n            else:\n                raise Exception(_('Method not supported [%s] not in [GET, POST, PUT, PATCH or DELETE]!') % (type))\n            res.raise_for_status()\n            status = res.status_code\n\n            if int(status) in (204, 404):  \n                response = False\n            else:\n                response = res.json()\n\n            try:\n                ask_time = datetime.strptime(res.headers.get('date'), \"%a, %d %b %Y %H:%M:%S %Z\")\n            except:\n                pass\n        except requests.HTTPError as error:\n            if error.response.status_code in (204, 404):\n                status = error.response.status_code\n                response = \"\"\n            else:\n                _logger.exception(\"Bad google request : %s !\", error.response.content)\n                if error.response.status_code in (400, 401, 410):\n                    raise error\n                raise self.env['res.config.settings'].get_config_warning(_(\"Something went wrong with your request to google\"))\n        return (status, response, ask_time)\n\n    \n    @api.model\n    def get_client_id(self, service):\n        return self.env['ir.config_parameter'].sudo().get_param('google_%s_client_id' % (service,), default=False)\n", "comments": "    call google api refresh token  given authorization code              param service   name google service actualize              param authorization code   code exchange new refresh token              returns new refresh token                     parameters   self env  ir config parameter   sudo()         client id   parameters get param( google  client id    service)         client secret   parameters get param( google  client secret    service)         redirect uri   parameters get param( google redirect uri )            get refresh token from google and store ir config parameter         headers     content type    application x www form urlencoded           data                  code   authorization code               client id   client id               client secret   client secret               redirect uri   redirect uri               grant type    authorization code                    try              req   requests post(google token endpoint  data data  headers headers  timeout timeout)             req raise status()             content   req json()         except ioerror              error msg    ( something went wrong token generation  maybe authorization code invalid already expired )             raise self env  res config settings   get config warning(error msg)          return content get( refresh token )       api model     def  get google token uri(self  service  scope)          get param   self env  ir config parameter   sudo() get param         encoded params   urls url encode(               scope   scope               redirect uri   get param( google redirect uri )               client id   get param( google  client id    service)               response type    code            )         return       (google auth endpoint  encoded params)       api model     def  get authorize uri(self  url  service  scope false)              this method return url needed allow instance odoo access scope             gmail specified parameters                     state                    self env cr dbname                 service               f   url                    get param   self env  ir config parameter   sudo() get param         base url   get param( web base url   default  http   www odoo com nobaseurl )         client id   get param( google  client id    (service )  default false)          encoded params   urls url encode(               response type    code                client id   client id               state   json dumps(state)               scope   scope   auth     (google api base url  service)     if scope passed  use service default get default scope              redirect uri   base url     google account authentication                approval prompt    force                access type    offline           )         return       (google auth endpoint  encoded params)       api model     def  get google token json(self  authorize code  service)              call google api exchange authorization code token  post request              redirected                      get param   self env  ir config parameter   sudo() get param         base url   get param( web base url   default  http   www odoo com nobaseurl )         client id   get param( google  client id    (service )  default false)         client secret   get param( google  client secret    (service )  default false)          headers     content type    application x www form urlencoded           data                  code   authorize code               client id   client id               client secret   client secret               grant type    authorization code                redirect uri   base url     google account authentication                    try              dummy  response  dummy   self  request(google token endpoint  params data  headers headers  type  post   preuri   )             return response         except requests httperror              error msg    ( something went wrong token generation  maybe authorization code invalid )             raise self env  res config settings   get config warning(error msg)        fixme   method update field defined google calendar module  since used module  maybe moved       api model     def  refresh google token json(self  refresh token  service)     exchange authorization vs token (service   calendar)         get param   self env  ir config parameter   sudo() get param         client id   get param( google  client id    (service )  default false)         client secret   get param( google  client secret    (service )  default false)          client id client secret              raise usererror( ( the account google service    configured )   service)          headers     content type    application x www form urlencoded           data                  refresh token   refresh token               client id   client id               client secret   client secret               grant type    refresh token                      try              dummy  response  dummy   self  request(google token endpoint  params data  headers headers  type  post   preuri   )             return response         except requests httperror error              error response status code    400     invalid grant                 registry(request session db) cursor() cur                      self env(cur)  res users   browse(self env uid) write(  google  rtoken    service  false )             error key   error response json() get( error    nc )              logger exception( bad google request        error key)             error msg    ( something went wrong token generation  maybe authorization code invalid already expired    )   error key             raise self env  res config settings   get config warning(error msg)        todo jem   remove preuri param  rename type method      api model     def  request(self  uri  params     headers     type  post   preuri  https   www googleapis com )              execute request google api  return tuple ( http code    http response )              param uri   url contact              param params   dict already encoded parameters request make              param headers   headers request              param type   method use make request              param preuri   pre url prepend param uri                     coding  utf 8        part odoo  see license file full copyright licensing details     fixme   needs become abstractmodel  inhereted google calendar service google drive service    get refresh token from google and store ir config parameter    if scope passed  use service default get default scope    fixme   method update field defined google calendar module  since used module  maybe moved     exchange authorization vs token (service   calendar)    invalid grant    todo jem   remove preuri param  rename type method    page found  response    todo   remove  used google calendar  make google calendar use constants ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import datetime\nimport json\nimport logging\n\nimport requests\nfrom werkzeug import urls\n\nfrom odoo import api, fields, models, registry, _\nfrom odoo.exceptions import UserError\nfrom odoo.http import request\n\n\n_logger = logging.getLogger(__name__)\n\nTIMEOUT = 20\n\nGOOGLE_AUTH_ENDPOINT = 'https://accounts.google.com/o/oauth2/auth'\nGOOGLE_TOKEN_ENDPOINT = 'https://accounts.google.com/o/oauth2/token'\nGOOGLE_API_BASE_URL = 'https://www.googleapis.com'\n\n\n# FIXME : this needs to become an AbstractModel, to be inhereted by google_calendar_service and google_drive_service\nclass GoogleService(models.TransientModel):\n    _name = 'google.service'\n\n    @api.model\n    def generate_refresh_token(self, service, authorization_code):\n        \"\"\" Call Google API to refresh the token, with the given authorization code\n            :param service : the name of the google service to actualize\n            :param authorization_code : the code to exchange against the new refresh token\n            :returns the new refresh token\n        \"\"\"\n        Parameters = self.env['ir.config_parameter'].sudo()\n        client_id = Parameters.get_param('google_%s_client_id' % service)\n        client_secret = Parameters.get_param('google_%s_client_secret' % service)\n        redirect_uri = Parameters.get_param('google_redirect_uri')\n\n        # Get the Refresh Token From Google And store it in ir.config_parameter\n        headers = {\"Content-type\": \"application/x-www-form-urlencoded\"}\n        data = {\n            'code': authorization_code,\n            'client_id': client_id,\n            'client_secret': client_secret,\n            'redirect_uri': redirect_uri,\n            'grant_type': \"authorization_code\"\n        }\n        try:\n            req = requests.post(GOOGLE_TOKEN_ENDPOINT, data=data, headers=headers, timeout=TIMEOUT)\n            req.raise_for_status()\n            content = req.json()\n        except IOError:\n            error_msg = _(\"Something went wrong during your token generation. Maybe your Authorization Code is invalid or already expired\")\n            raise self.env['res.config.settings'].get_config_warning(error_msg)\n\n        return content.get('refresh_token')\n\n    @api.model\n    def _get_google_token_uri(self, service, scope):\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        encoded_params = urls.url_encode({\n            'scope': scope,\n            'redirect_uri': get_param('google_redirect_uri'),\n            'client_id': get_param('google_%s_client_id' % service),\n            'response_type': 'code',\n        })\n        return '%s?%s' % (GOOGLE_AUTH_ENDPOINT, encoded_params)\n\n    @api.model\n    def _get_authorize_uri(self, from_url, service, scope=False):\n        \"\"\" This method return the url needed to allow this instance of Odoo to access to the scope\n            of gmail specified as parameters\n        \"\"\"\n        state = {\n            'd': self.env.cr.dbname,\n            's': service,\n            'f': from_url\n        }\n\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        base_url = get_param('web.base.url', default='http://www.odoo.com?NoBaseUrl')\n        client_id = get_param('google_%s_client_id' % (service,), default=False)\n\n        encoded_params = urls.url_encode({\n            'response_type': 'code',\n            'client_id': client_id,\n            'state': json.dumps(state),\n            'scope': scope or '%s/auth/%s' % (GOOGLE_API_BASE_URL, service),  # If no scope is passed, we use service by default to get a default scope\n            'redirect_uri': base_url + '/google_account/authentication',\n            'approval_prompt': 'force',\n            'access_type': 'offline'\n        })\n        return \"%s?%s\" % (GOOGLE_AUTH_ENDPOINT, encoded_params)\n\n    @api.model\n    def _get_google_token_json(self, authorize_code, service):\n        \"\"\" Call Google API to exchange authorization code against token, with POST request, to\n            not be redirected.\n        \"\"\"\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        base_url = get_param('web.base.url', default='http://www.odoo.com?NoBaseUrl')\n        client_id = get_param('google_%s_client_id' % (service,), default=False)\n        client_secret = get_param('google_%s_client_secret' % (service,), default=False)\n\n        headers = {\"content-type\": \"application/x-www-form-urlencoded\"}\n        data = {\n            'code': authorize_code,\n            'client_id': client_id,\n            'client_secret': client_secret,\n            'grant_type': 'authorization_code',\n            'redirect_uri': base_url + '/google_account/authentication'\n        }\n        try:\n            dummy, response, dummy = self._do_request(GOOGLE_TOKEN_ENDPOINT, params=data, headers=headers, type='POST', preuri='')\n            return response\n        except requests.HTTPError:\n            error_msg = _(\"Something went wrong during your token generation. Maybe your Authorization Code is invalid\")\n            raise self.env['res.config.settings'].get_config_warning(error_msg)\n\n    # FIXME : this method update a field defined in google_calendar module. Since it is used only in that module, maybe it should be moved.\n    @api.model\n    def _refresh_google_token_json(self, refresh_token, service):  # exchange_AUTHORIZATION vs Token (service = calendar)\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        client_id = get_param('google_%s_client_id' % (service,), default=False)\n        client_secret = get_param('google_%s_client_secret' % (service,), default=False)\n\n        if not client_id or not client_secret:\n            raise UserError(_(\"The account for the Google service '%s' is not configured\") % service)\n\n        headers = {\"content-type\": \"application/x-www-form-urlencoded\"}\n        data = {\n            'refresh_token': refresh_token,\n            'client_id': client_id,\n            'client_secret': client_secret,\n            'grant_type': 'refresh_token',\n        }\n\n        try:\n            dummy, response, dummy = self._do_request(GOOGLE_TOKEN_ENDPOINT, params=data, headers=headers, type='POST', preuri='')\n            return response\n        except requests.HTTPError as error:\n            if error.response.status_code == 400:  # invalid grant\n                with registry(request.session.db).cursor() as cur:\n                    self.env(cur)['res.users'].browse(self.env.uid).write({'google_%s_rtoken' % service: False})\n            error_key = error.response.json().get(\"error\", \"nc\")\n            _logger.exception(\"Bad google request : %s !\", error_key)\n            error_msg = _(\"Something went wrong during your token generation. Maybe your Authorization Code is invalid or already expired [%s]\") % error_key\n            raise self.env['res.config.settings'].get_config_warning(error_msg)\n\n    # TODO JEM : remove preuri param, and rename type into method\n    @api.model\n    def _do_request(self, uri, params={}, headers={}, type='POST', preuri=\"https://www.googleapis.com\"):\n        \"\"\" Execute the request to Google API. Return a tuple ('HTTP_CODE', 'HTTP_RESPONSE')\n            :param uri : the url to contact\n            :param params : dict or already encoded parameters for the request to make\n            :param headers : headers of request\n            :param type : the method to use to make the request\n            :param preuri : pre url to prepend to param uri.\n        \"\"\"\n        _logger.debug(\"Uri: %s - Type : %s - Headers: %s - Params : %s !\", (uri, type, headers, params))\n\n        ask_time = fields.Datetime.now()\n        try:\n            if type.upper() in ('GET', 'DELETE'):\n                res = requests.request(type.lower(), preuri + uri, params=params, timeout=TIMEOUT)\n            elif type.upper() in ('POST', 'PATCH', 'PUT'):\n                res = requests.request(type.lower(), preuri + uri, data=params, headers=headers, timeout=TIMEOUT)\n            else:\n                raise Exception(_('Method not supported [%s] not in [GET, POST, PUT, PATCH or DELETE]!') % (type))\n            res.raise_for_status()\n            status = res.status_code\n\n            if int(status) in (204, 404):  # Page not found, no response\n                response = False\n            else:\n                response = res.json()\n\n            try:\n                ask_time = datetime.strptime(res.headers.get('date'), \"%a, %d %b %Y %H:%M:%S %Z\")\n            except:\n                pass\n        except requests.HTTPError as error:\n            if error.response.status_code in (204, 404):\n                status = error.response.status_code\n                response = \"\"\n            else:\n                _logger.exception(\"Bad google request : %s !\", error.response.content)\n                if error.response.status_code in (400, 401, 410):\n                    raise error\n                raise self.env['res.config.settings'].get_config_warning(_(\"Something went wrong with your request to google\"))\n        return (status, response, ask_time)\n\n    # TODO : remove me, it is only used in google calendar. Make google_calendar use the constants\n    @api.model\n    def get_client_id(self, service):\n        return self.env['ir.config_parameter'].sudo().get_param('google_%s_client_id' % (service,), default=False)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "google_service.py", "id": "47e4c9c960b81c73f983f1d546c0a4e9", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/google_account/models/google_service.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}