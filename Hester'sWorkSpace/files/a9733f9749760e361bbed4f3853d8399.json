{"author": "odoo", "code": "\nfrom hashlib import sha1\nimport logging\n\nfrom werkzeug import urls\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment_buckaroo.controllers.main import BuckarooController\n\nfrom odoo.tools.float_utils import float_compare\n\n_logger = logging.getLogger(__name__)\n\n\ndef normalize_keys_upper(data):\n    \"\"\"Set all keys of a dictionnary to uppercase\n\n    Buckaroo parameters names are case insensitive\n    convert everything to upper case to be able to easily detected the presence\n    of a parameter by checking the uppercase key only\n    \"\"\"\n    return {key.upper(): val for key, val in data.items()}\n\n\nclass AcquirerBuckaroo(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('buckaroo', 'Buckaroo')])\n    brq_websitekey = fields.Char('WebsiteKey', required_if_provider='buckaroo', groups='base.group_user')\n    brq_secretkey = fields.Char('SecretKey', required_if_provider='buckaroo', groups='base.group_user')\n\n    def _get_buckaroo_urls(self, environment):\n        \"\"\" Buckaroo URLs\n        \"\"\"\n        if environment == 'prod':\n            return {\n                'buckaroo_form_url': 'https://checkout.buckaroo.nl/html/',\n            }\n        else:\n            return {\n                'buckaroo_form_url': 'https://testcheckout.buckaroo.nl/html/',\n            }\n\n    def _buckaroo_generate_digital_sign(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications.\n\n        :param browse acquirer: the payment.acquirer browse record. It should\n                                have a shakey in shaky out\n        :param string inout: 'in' (odoo contacting buckaroo) or 'out' (buckaroo\n                             contacting odoo).\n        :param dict values: transaction values\n\n        :return string: shasign\n        \"\"\"\n        assert inout in ('in', 'out')\n        assert self.provider == 'buckaroo'\n\n        keys = \"add_returndata Brq_amount Brq_culture Brq_currency Brq_invoicenumber Brq_return Brq_returncancel Brq_returnerror Brq_returnreject brq_test Brq_websitekey\".split()\n\n        def get_value(key):\n            if values.get(key):\n                return values[key]\n            return ''\n\n        values = dict(values or {})\n\n        if inout == 'out':\n            for key in list(values):\n                \n                if key.upper() == 'BRQ_SIGNATURE':\n                    del values[key]\n                    break\n\n            items = sorted(values.items(), key=lambda pair: pair[0].lower())\n            sign = ''.join('%s=%s' % (k, urls.url_unquote_plus(v)) for k, v in items)\n        else:\n            sign = ''.join('%s=%s' % (k, get_value(k)) for k in keys)\n        \n        sign = sign + self.brq_secretkey\n        shasign = sha1(sign.encode('utf-8')).hexdigest()\n        return shasign\n\n    @api.multi\n    def buckaroo_form_generate_values(self, values):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        buckaroo_tx_values = dict(values)\n        buckaroo_tx_values.update({\n            'Brq_websitekey': self.brq_websitekey,\n            'Brq_amount': values['amount'],\n            'Brq_currency': values['currency'] and values['currency'].name or '',\n            'Brq_invoicenumber': values['reference'],\n            'brq_test': False if self.environment == 'prod' else True,\n            'Brq_return': urls.url_join(base_url, BuckarooController._return_url),\n            'Brq_returncancel': urls.url_join(base_url, BuckarooController._cancel_url),\n            'Brq_returnerror': urls.url_join(base_url, BuckarooController._exception_url),\n            'Brq_returnreject': urls.url_join(base_url, BuckarooController._reject_url),\n            'Brq_culture': (values.get('partner_lang') or 'en_US').replace('_', '-'),\n            'add_returndata': buckaroo_tx_values.pop('return_url', '') or '',\n        })\n        buckaroo_tx_values['Brq_signature'] = self._buckaroo_generate_digital_sign('in', buckaroo_tx_values)\n        return buckaroo_tx_values\n\n    @api.multi\n    def buckaroo_get_form_action_url(self):\n        return self._get_buckaroo_urls(self.environment)['buckaroo_form_url']\n\n\nclass TxBuckaroo(models.Model):\n    _inherit = 'payment.transaction'\n\n    \n    _buckaroo_valid_tx_status = [190]\n    _buckaroo_pending_tx_status = [790, 791, 792, 793]\n    _buckaroo_cancel_tx_status = [890, 891]\n    _buckaroo_error_tx_status = [490, 491, 492]\n    _buckaroo_reject_tx_status = [690]\n\n    \n    \n    \n\n    @api.model\n    def _buckaroo_form_get_tx_from_data(self, data):\n        \"\"\" Given a data dict coming from buckaroo, verify it and find the related\n        transaction record. \"\"\"\n        origin_data = dict(data)\n        data = normalize_keys_upper(data)\n        reference, pay_id, shasign = data.get('BRQ_INVOICENUMBER'), data.get('BRQ_PAYMENT'), data.get('BRQ_SIGNATURE')\n        if not reference or not pay_id or not shasign:\n            error_msg = _('Buckaroo: received data with missing reference (%s) or pay_id (%s) or shasign (%s)') % (reference, pay_id, shasign)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        tx = self.search([('reference', '=', reference)])\n        if not tx or len(tx) > 1:\n            error_msg = _('Buckaroo: received data for reference %s') % (reference)\n            if not tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        \n        shasign_check = tx.acquirer_id._buckaroo_generate_digital_sign('out', origin_data)\n        if shasign_check.upper() != shasign.upper():\n            error_msg = _('Buckaroo: invalid shasign, received %s, computed %s, for data %s') % (shasign, shasign_check, data)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        return tx\n\n    def _buckaroo_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n        data = normalize_keys_upper(data)\n        if self.acquirer_reference and data.get('BRQ_TRANSACTIONS') != self.acquirer_reference:\n            invalid_parameters.append(('Transaction Id', data.get('BRQ_TRANSACTIONS'), self.acquirer_reference))\n        \n        if float_compare(float(data.get('BRQ_AMOUNT', '0.0')), self.amount, 2) != 0:\n            invalid_parameters.append(('Amount', data.get('BRQ_AMOUNT'), '%.2f' % self.amount))\n        if data.get('BRQ_CURRENCY') != self.currency_id.name:\n            invalid_parameters.append(('Currency', data.get('BRQ_CURRENCY'), self.currency_id.name))\n\n        return invalid_parameters\n\n    def _buckaroo_form_validate(self, data):\n        data = normalize_keys_upper(data)\n        status_code = int(data.get('BRQ_STATUSCODE', '0'))\n        if status_code in self._buckaroo_valid_tx_status:\n            self.write({\n                'state': 'done',\n                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),\n            })\n            return True\n        elif status_code in self._buckaroo_pending_tx_status:\n            self.write({\n                'state': 'pending',\n                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),\n            })\n            return True\n        elif status_code in self._buckaroo_cancel_tx_status:\n            self.write({\n                'state': 'cancel',\n                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),\n            })\n            return True\n        else:\n            error = 'Buckaroo: feedback error'\n            _logger.info(error)\n            self.write({\n                'state': 'error',\n                'state_message': error,\n                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),\n            })\n            return False\n", "comments": "   set keys dictionnary uppercase      buckaroo parameters names case insensitive     convert everything upper case able easily detected presence     parameter checking uppercase key             return  key upper()  val key  val data items()    class acquirerbuckaroo(models model)       inherit    payment acquirer       provider   fields selection(selection add  ( buckaroo    buckaroo ) )     brq websitekey   fields char( websitekey   required provider  buckaroo   groups  base group user )     brq secretkey   fields char( secretkey   required provider  buckaroo   groups  base group user )      def  get buckaroo urls(self  environment)              buckaroo urls                     environment     prod               return                    buckaroo form url    https   checkout buckaroo nl html                          else              return                    buckaroo form url    https   testcheckout buckaroo nl html                       def  buckaroo generate digital sign(self  inout  values)              generate shasign incoming outgoing communications            param browse acquirer  payment acquirer browse record  it                                 shakey shaky          param string inout    (odoo contacting buckaroo)   (buckaroo                              contacting odoo)           param dict values  transaction values           return string  shasign                     assert inout (    )         assert self provider     buckaroo           keys    add returndata brq amount brq culture brq currency brq invoicenumber brq return brq returncancel brq returnerror brq returnreject brq test brq websitekey  split()          def get value(key)              values get(key)                  return values key              return             values   dict(values   )          inout                   key list(values)                    case insensitive keys                 key upper()     brq signature                       del values key                      break              items   sorted(values items()  key lambda pair  pair 0  lower())             sign      join(      (k  urls url unquote plus(v)) k  v items)         else              sign      join(      (k  get value(k)) k keys)           add pre shared secret key end signature         sign   sign   self brq secretkey         shasign   sha1(sign encode( utf 8 )) hexdigest()         return shasign       api multi     def buckaroo form generate values(self  values)          base url   self env  ir config parameter   sudo() get param( web base url )         buckaroo tx values   dict(values)         buckaroo tx values update(               brq websitekey   self brq websitekey               brq amount   values  amount                 brq currency   values  currency   values  currency   name                  brq invoicenumber   values  reference                 brq test   false self environment     prod  else true               brq return   urls url join(base url  buckaroocontroller  return url)               brq returncancel   urls url join(base url  buckaroocontroller  cancel url)               brq returnerror   urls url join(base url  buckaroocontroller  exception url)               brq returnreject   urls url join(base url  buckaroocontroller  reject url)               brq culture   (values get( partner lang )  en us ) replace(        )               add returndata   buckaroo tx values pop( return url     )              )         buckaroo tx values  brq signature     self  buckaroo generate digital sign(   buckaroo tx values)         return buckaroo tx values       api multi     def buckaroo get form action url(self)          return self  get buckaroo urls(self environment)  buckaroo form url     class txbuckaroo(models model)       inherit    payment transaction         buckaroo status      buckaroo valid tx status    190       buckaroo pending tx status    790  791  792  793       buckaroo cancel tx status    890  891       buckaroo error tx status    490  491  492       buckaroo reject tx status    690                                                                  form related methods                                                                api model     def  buckaroo form get tx data(self  data)              given data dict coming buckaroo  verify find related         transaction record         coding  utf 8    case insensitive keys    add pre shared secret key end signature    buckaroo status                                                          form related methods                                                          verify shasign    check buyed ", "content": "# coding: utf-8\nfrom hashlib import sha1\nimport logging\n\nfrom werkzeug import urls\n\nfrom odoo import api, fields, models, _\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment_buckaroo.controllers.main import BuckarooController\n\nfrom odoo.tools.float_utils import float_compare\n\n_logger = logging.getLogger(__name__)\n\n\ndef normalize_keys_upper(data):\n    \"\"\"Set all keys of a dictionnary to uppercase\n\n    Buckaroo parameters names are case insensitive\n    convert everything to upper case to be able to easily detected the presence\n    of a parameter by checking the uppercase key only\n    \"\"\"\n    return {key.upper(): val for key, val in data.items()}\n\n\nclass AcquirerBuckaroo(models.Model):\n    _inherit = 'payment.acquirer'\n\n    provider = fields.Selection(selection_add=[('buckaroo', 'Buckaroo')])\n    brq_websitekey = fields.Char('WebsiteKey', required_if_provider='buckaroo', groups='base.group_user')\n    brq_secretkey = fields.Char('SecretKey', required_if_provider='buckaroo', groups='base.group_user')\n\n    def _get_buckaroo_urls(self, environment):\n        \"\"\" Buckaroo URLs\n        \"\"\"\n        if environment == 'prod':\n            return {\n                'buckaroo_form_url': 'https://checkout.buckaroo.nl/html/',\n            }\n        else:\n            return {\n                'buckaroo_form_url': 'https://testcheckout.buckaroo.nl/html/',\n            }\n\n    def _buckaroo_generate_digital_sign(self, inout, values):\n        \"\"\" Generate the shasign for incoming or outgoing communications.\n\n        :param browse acquirer: the payment.acquirer browse record. It should\n                                have a shakey in shaky out\n        :param string inout: 'in' (odoo contacting buckaroo) or 'out' (buckaroo\n                             contacting odoo).\n        :param dict values: transaction values\n\n        :return string: shasign\n        \"\"\"\n        assert inout in ('in', 'out')\n        assert self.provider == 'buckaroo'\n\n        keys = \"add_returndata Brq_amount Brq_culture Brq_currency Brq_invoicenumber Brq_return Brq_returncancel Brq_returnerror Brq_returnreject brq_test Brq_websitekey\".split()\n\n        def get_value(key):\n            if values.get(key):\n                return values[key]\n            return ''\n\n        values = dict(values or {})\n\n        if inout == 'out':\n            for key in list(values):\n                # case insensitive keys\n                if key.upper() == 'BRQ_SIGNATURE':\n                    del values[key]\n                    break\n\n            items = sorted(values.items(), key=lambda pair: pair[0].lower())\n            sign = ''.join('%s=%s' % (k, urls.url_unquote_plus(v)) for k, v in items)\n        else:\n            sign = ''.join('%s=%s' % (k, get_value(k)) for k in keys)\n        # Add the pre-shared secret key at the end of the signature\n        sign = sign + self.brq_secretkey\n        shasign = sha1(sign.encode('utf-8')).hexdigest()\n        return shasign\n\n    @api.multi\n    def buckaroo_form_generate_values(self, values):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        buckaroo_tx_values = dict(values)\n        buckaroo_tx_values.update({\n            'Brq_websitekey': self.brq_websitekey,\n            'Brq_amount': values['amount'],\n            'Brq_currency': values['currency'] and values['currency'].name or '',\n            'Brq_invoicenumber': values['reference'],\n            'brq_test': False if self.environment == 'prod' else True,\n            'Brq_return': urls.url_join(base_url, BuckarooController._return_url),\n            'Brq_returncancel': urls.url_join(base_url, BuckarooController._cancel_url),\n            'Brq_returnerror': urls.url_join(base_url, BuckarooController._exception_url),\n            'Brq_returnreject': urls.url_join(base_url, BuckarooController._reject_url),\n            'Brq_culture': (values.get('partner_lang') or 'en_US').replace('_', '-'),\n            'add_returndata': buckaroo_tx_values.pop('return_url', '') or '',\n        })\n        buckaroo_tx_values['Brq_signature'] = self._buckaroo_generate_digital_sign('in', buckaroo_tx_values)\n        return buckaroo_tx_values\n\n    @api.multi\n    def buckaroo_get_form_action_url(self):\n        return self._get_buckaroo_urls(self.environment)['buckaroo_form_url']\n\n\nclass TxBuckaroo(models.Model):\n    _inherit = 'payment.transaction'\n\n    # buckaroo status\n    _buckaroo_valid_tx_status = [190]\n    _buckaroo_pending_tx_status = [790, 791, 792, 793]\n    _buckaroo_cancel_tx_status = [890, 891]\n    _buckaroo_error_tx_status = [490, 491, 492]\n    _buckaroo_reject_tx_status = [690]\n\n    # --------------------------------------------------\n    # FORM RELATED METHODS\n    # --------------------------------------------------\n\n    @api.model\n    def _buckaroo_form_get_tx_from_data(self, data):\n        \"\"\" Given a data dict coming from buckaroo, verify it and find the related\n        transaction record. \"\"\"\n        origin_data = dict(data)\n        data = normalize_keys_upper(data)\n        reference, pay_id, shasign = data.get('BRQ_INVOICENUMBER'), data.get('BRQ_PAYMENT'), data.get('BRQ_SIGNATURE')\n        if not reference or not pay_id or not shasign:\n            error_msg = _('Buckaroo: received data with missing reference (%s) or pay_id (%s) or shasign (%s)') % (reference, pay_id, shasign)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        tx = self.search([('reference', '=', reference)])\n        if not tx or len(tx) > 1:\n            error_msg = _('Buckaroo: received data for reference %s') % (reference)\n            if not tx:\n                error_msg += _('; no order found')\n            else:\n                error_msg += _('; multiple order found')\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        # verify shasign\n        shasign_check = tx.acquirer_id._buckaroo_generate_digital_sign('out', origin_data)\n        if shasign_check.upper() != shasign.upper():\n            error_msg = _('Buckaroo: invalid shasign, received %s, computed %s, for data %s') % (shasign, shasign_check, data)\n            _logger.info(error_msg)\n            raise ValidationError(error_msg)\n\n        return tx\n\n    def _buckaroo_form_get_invalid_parameters(self, data):\n        invalid_parameters = []\n        data = normalize_keys_upper(data)\n        if self.acquirer_reference and data.get('BRQ_TRANSACTIONS') != self.acquirer_reference:\n            invalid_parameters.append(('Transaction Id', data.get('BRQ_TRANSACTIONS'), self.acquirer_reference))\n        # check what is buyed\n        if float_compare(float(data.get('BRQ_AMOUNT', '0.0')), self.amount, 2) != 0:\n            invalid_parameters.append(('Amount', data.get('BRQ_AMOUNT'), '%.2f' % self.amount))\n        if data.get('BRQ_CURRENCY') != self.currency_id.name:\n            invalid_parameters.append(('Currency', data.get('BRQ_CURRENCY'), self.currency_id.name))\n\n        return invalid_parameters\n\n    def _buckaroo_form_validate(self, data):\n        data = normalize_keys_upper(data)\n        status_code = int(data.get('BRQ_STATUSCODE', '0'))\n        if status_code in self._buckaroo_valid_tx_status:\n            self.write({\n                'state': 'done',\n                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),\n            })\n            return True\n        elif status_code in self._buckaroo_pending_tx_status:\n            self.write({\n                'state': 'pending',\n                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),\n            })\n            return True\n        elif status_code in self._buckaroo_cancel_tx_status:\n            self.write({\n                'state': 'cancel',\n                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),\n            })\n            return True\n        else:\n            error = 'Buckaroo: feedback error'\n            _logger.info(error)\n            self.write({\n                'state': 'error',\n                'state_message': error,\n                'acquirer_reference': data.get('BRQ_TRANSACTIONS'),\n            })\n            return False\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "payment.py", "id": "a9733f9749760e361bbed4f3853d8399", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_buckaroo/models/payment.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}