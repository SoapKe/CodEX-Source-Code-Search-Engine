{"author": "HelloZeroNet", "code": "import urllib\nimport zipfile\nimport os\nimport sys\nimport ssl\nimport httplib\nimport socket\nimport re\nimport json\nimport cStringIO as StringIO\n\ndef download():\n    from src.util import helper\n\n    urls = [\n        \"https://github.com/HelloZeroNet/ZeroNet/archive/master.zip\",\n        \"https://gitlab.com/HelloZeroNet/ZeroNet/repository/archive.zip?ref=master\",\n        \"https://try.gogs.io/ZeroNet/ZeroNet/archive/master.zip\"\n    ]\n\n    zipdata = None\n    for url in urls:\n        print \"Downloading from:\", url,\n        try:\n            req = helper.httpRequest(url)\n            data = StringIO.StringIO()\n            while True:\n                buff = req.read(1024 * 16)\n                if not buff:\n                    break\n                data.write(buff)\n                print \".\",\n            try:\n                zipdata = zipfile.ZipFile(data)\n                break  \n            except Exception, err:\n                data.seek(0)\n                print \"Unpack error\", err, data.read(256)\n        except Exception, err:\n            print \"Error downloading update from %s: %s\" % (url, err)\n\n    if not zipdata:\n        raise err\n\n    print \"Downloaded.\"\n\n    return zipdata\n\n\ndef update():\n    from Config import config\n    if getattr(sys, 'source_update_dir', False):\n        if not os.path.isdir(sys.source_update_dir):\n            os.makedirs(sys.source_update_dir)\n        os.chdir(sys.source_update_dir)  \n\n    updatesite_path = config.data_dir + \"/\" + config.updatesite\n    sites_json = json.load(open(config.data_dir + \"/sites.json\"))\n    updatesite_bad_files = sites_json.get(config.updatesite, {}).get(\"cache\", {}).get(\"bad_files\", {})\n    print \"Update site path: %s, bad_files: %s\" % (updatesite_path, len(updatesite_bad_files))\n    if os.path.isfile(updatesite_path + \"/content.json\") and len(updatesite_bad_files) == 0 and sites_json.get(config.updatesite, {}).get(\"serving\"):\n        \n        print \"Updating using site %s\" % config.updatesite\n        zipdata = False\n        inner_paths = json.load(open(updatesite_path + \"/content.json\"))[\"files\"].keys()\n        \n        inner_paths = [inner_path for inner_path in inner_paths if inner_path.startswith(\"ZeroNet/\")]\n    else:\n        \n        zipdata = download()\n        inner_paths = zipdata.namelist()\n\n    \n    plugins_enabled = []\n    plugins_disabled = []\n    if os.path.isdir(\"plugins\"):\n        for dir in os.listdir(\"plugins\"):\n            if dir.startswith(\"disabled-\"):\n                plugins_disabled.append(dir.replace(\"disabled-\", \"\"))\n            else:\n                plugins_enabled.append(dir)\n        print \"Plugins enabled:\", plugins_enabled, \"disabled:\", plugins_disabled\n\n    print \"Extracting to %s...\" % os.getcwd(),\n    for inner_path in inner_paths:\n        if \"..\" in inner_path:\n            continue\n        inner_path = inner_path.replace(\"\\\\\", \"/\")  \n        print \".\",\n        dest_path = re.sub(\"^([^/]*-master.*?|ZeroNet)/\", \"\", inner_path)  \n        dest_path = dest_path.lstrip(\"/\")\n        if not dest_path:\n            continue\n\n        \n        match = re.match(\"plugins/([^/]+)\", dest_path)\n        if match:\n            plugin_name = match.group(1).replace(\"disabled-\", \"\")\n            if plugin_name in plugins_enabled:  \n                dest_path = dest_path.replace(\"plugins/disabled-\" + plugin_name, \"plugins/\" + plugin_name)\n            elif plugin_name in plugins_disabled:  \n                dest_path = dest_path.replace(\"plugins/\" + plugin_name, \"plugins/disabled-\" + plugin_name)\n            print \"P\",\n\n        dest_dir = os.path.dirname(dest_path)\n\n        if dest_dir and not os.path.isdir(dest_dir):\n            os.makedirs(dest_dir)\n\n        if dest_dir != dest_path.strip(\"/\"):\n            if zipdata:\n                data = zipdata.read(inner_path)\n            else:\n                data = open(updatesite_path + \"/\" + inner_path, \"rb\").read()\n\n            try:\n                open(dest_path, 'wb').write(data)\n            except Exception, err:\n                print dest_path, err\n\n    print \"Done.\"\n    return True\n\n\nif __name__ == \"__main__\":\n    import sys\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), \"src\"))  \n\n    from gevent import monkey\n    monkey.patch_all()\n\n    from Config import config\n    config.parse(silent=True)\n\n    from src.util import SslPatch\n\n    try:\n        update()\n    except Exception, err:\n        print \"Update error: %s\" % err\n    raw_input(\"Press enter to exit\")\n", "comments": "  success    new source code stored different directory    update site exists broken file    keep file zeronet directory    fallback download    checking plugins    make sure unix path    skip root zeronet master     like directories    keep plugin disabled enabled status    plugin enabled    plugin disabled    imports relative src ", "content": "import urllib\nimport zipfile\nimport os\nimport sys\nimport ssl\nimport httplib\nimport socket\nimport re\nimport json\nimport cStringIO as StringIO\n\ndef download():\n    from src.util import helper\n\n    urls = [\n        \"https://github.com/HelloZeroNet/ZeroNet/archive/master.zip\",\n        \"https://gitlab.com/HelloZeroNet/ZeroNet/repository/archive.zip?ref=master\",\n        \"https://try.gogs.io/ZeroNet/ZeroNet/archive/master.zip\"\n    ]\n\n    zipdata = None\n    for url in urls:\n        print \"Downloading from:\", url,\n        try:\n            req = helper.httpRequest(url)\n            data = StringIO.StringIO()\n            while True:\n                buff = req.read(1024 * 16)\n                if not buff:\n                    break\n                data.write(buff)\n                print \".\",\n            try:\n                zipdata = zipfile.ZipFile(data)\n                break  # Success\n            except Exception, err:\n                data.seek(0)\n                print \"Unpack error\", err, data.read(256)\n        except Exception, err:\n            print \"Error downloading update from %s: %s\" % (url, err)\n\n    if not zipdata:\n        raise err\n\n    print \"Downloaded.\"\n\n    return zipdata\n\n\ndef update():\n    from Config import config\n    if getattr(sys, 'source_update_dir', False):\n        if not os.path.isdir(sys.source_update_dir):\n            os.makedirs(sys.source_update_dir)\n        os.chdir(sys.source_update_dir)  # New source code will be stored in different directory\n\n    updatesite_path = config.data_dir + \"/\" + config.updatesite\n    sites_json = json.load(open(config.data_dir + \"/sites.json\"))\n    updatesite_bad_files = sites_json.get(config.updatesite, {}).get(\"cache\", {}).get(\"bad_files\", {})\n    print \"Update site path: %s, bad_files: %s\" % (updatesite_path, len(updatesite_bad_files))\n    if os.path.isfile(updatesite_path + \"/content.json\") and len(updatesite_bad_files) == 0 and sites_json.get(config.updatesite, {}).get(\"serving\"):\n        # Update site exists and no broken file\n        print \"Updating using site %s\" % config.updatesite\n        zipdata = False\n        inner_paths = json.load(open(updatesite_path + \"/content.json\"))[\"files\"].keys()\n        # Keep file only in ZeroNet directory\n        inner_paths = [inner_path for inner_path in inner_paths if inner_path.startswith(\"ZeroNet/\")]\n    else:\n        # Fallback to download\n        zipdata = download()\n        inner_paths = zipdata.namelist()\n\n    # Checking plugins\n    plugins_enabled = []\n    plugins_disabled = []\n    if os.path.isdir(\"plugins\"):\n        for dir in os.listdir(\"plugins\"):\n            if dir.startswith(\"disabled-\"):\n                plugins_disabled.append(dir.replace(\"disabled-\", \"\"))\n            else:\n                plugins_enabled.append(dir)\n        print \"Plugins enabled:\", plugins_enabled, \"disabled:\", plugins_disabled\n\n    print \"Extracting to %s...\" % os.getcwd(),\n    for inner_path in inner_paths:\n        if \"..\" in inner_path:\n            continue\n        inner_path = inner_path.replace(\"\\\\\", \"/\")  # Make sure we have unix path\n        print \".\",\n        dest_path = re.sub(\"^([^/]*-master.*?|ZeroNet)/\", \"\", inner_path)  # Skip root zeronet-master-... like directories\n        dest_path = dest_path.lstrip(\"/\")\n        if not dest_path:\n            continue\n\n        # Keep plugin disabled/enabled status\n        match = re.match(\"plugins/([^/]+)\", dest_path)\n        if match:\n            plugin_name = match.group(1).replace(\"disabled-\", \"\")\n            if plugin_name in plugins_enabled:  # Plugin was enabled\n                dest_path = dest_path.replace(\"plugins/disabled-\" + plugin_name, \"plugins/\" + plugin_name)\n            elif plugin_name in plugins_disabled:  # Plugin was disabled\n                dest_path = dest_path.replace(\"plugins/\" + plugin_name, \"plugins/disabled-\" + plugin_name)\n            print \"P\",\n\n        dest_dir = os.path.dirname(dest_path)\n\n        if dest_dir and not os.path.isdir(dest_dir):\n            os.makedirs(dest_dir)\n\n        if dest_dir != dest_path.strip(\"/\"):\n            if zipdata:\n                data = zipdata.read(inner_path)\n            else:\n                data = open(updatesite_path + \"/\" + inner_path, \"rb\").read()\n\n            try:\n                open(dest_path, 'wb').write(data)\n            except Exception, err:\n                print dest_path, err\n\n    print \"Done.\"\n    return True\n\n\nif __name__ == \"__main__\":\n    import sys\n    sys.path.insert(0, os.path.join(os.path.dirname(__file__), \"src\"))  # Imports relative to src\n\n    from gevent import monkey\n    monkey.patch_all()\n\n    from Config import config\n    config.parse(silent=True)\n\n    from src.util import SslPatch\n\n    try:\n        update()\n    except Exception, err:\n        print \"Update error: %s\" % err\n    raw_input(\"Press enter to exit\")\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "update.py", "id": "cf9de639f5ce68ed7277ef111e92f181", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/update.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}