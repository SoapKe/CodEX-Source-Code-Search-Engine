{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo.addons.event.tests.common import TestEventCommon\nfrom odoo.exceptions import ValidationError, UserError, AccessError\nfrom odoo.tools import mute_logger\nfrom odoo.fields import Datetime\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\n\nclass TestEventFlow(TestEventCommon):\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_00_basic_event_auto_confirm(self):\n        \"\"\" Basic event management with auto confirmation \"\"\"\n        \n        test_event = self.Event.sudo(self.user_eventmanager).create({\n            'name': 'TestEvent',\n            'auto_confirm': True,\n            'date_begin': datetime.datetime.now() + relativedelta(days=-1),\n            'date_end': datetime.datetime.now() + relativedelta(days=1),\n            'seats_max': 2,\n            'seats_availability': 'limited',\n        })\n        self.assertEqual(test_event.state, 'confirm', 'Event: auto_confirmation of event failed')\n\n        \n        test_reg1 = self.Registration.sudo(self.user_eventuser).create({\n            'name': 'TestReg1',\n            'event_id': test_event.id,\n        })\n        self.assertEqual(test_reg1.state, 'open', 'Event: auto_confirmation of registration failed')\n        self.assertEqual(test_event.seats_reserved, 1, 'Event: wrong number of reserved seats after confirmed registration')\n        test_reg2 = self.Registration.sudo(self.user_eventuser).create({\n            'name': 'TestReg2',\n            'event_id': test_event.id,\n        })\n        self.assertEqual(test_reg2.state, 'open', 'Event: auto_confirmation of registration failed')\n        self.assertEqual(test_event.seats_reserved, 2, 'Event: wrong number of reserved seats after confirmed registration')\n\n        : too much registrations\n        with self.assertRaises(ValidationError):\n            self.Registration.sudo(self.user_eventuser).create({\n                'name': 'TestReg3',\n                'event_id': test_event.id,\n            })\n\n        \n        test_reg1.button_reg_close()\n        self.assertEqual(test_reg1.state, 'done', 'Event: wrong state of attended registration')\n        self.assertEqual(test_event.seats_used, 1, 'Event: incorrect number of attendees after closing registration')\n        test_reg2.button_reg_close()\n        self.assertEqual(test_reg1.state, 'done', 'Event: wrong state of attended registration')\n        self.assertEqual(test_event.seats_used, 2, 'Event: incorrect number of attendees after closing registration')\n\n        \n        test_event.button_done()\n\n        \n        with self.assertRaises(UserError):\n            test_event.button_cancel()\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_10_advanced_event_flow(self):\n        \"\"\" Avanced event flow: no auto confirmation, manage minimum / maximum\n        seats, ... \"\"\"\n        \n        test_event = self.Event.sudo(self.user_eventmanager).create({\n            'name': 'TestEvent',\n            'date_begin': datetime.datetime.now() + relativedelta(days=-1),\n            'date_end': datetime.datetime.now() + relativedelta(days=1),\n            'seats_max': 10,\n        })\n        self.assertEqual(\n            test_event.state, 'draft',\n            'Event: new event should be in draft state, no auto confirmation')\n\n         -> no auto confirmation\n        test_reg1 = self.Registration.sudo(self.user_eventuser).create({\n            'name': 'TestReg1',\n            'event_id': test_event.id,\n        })\n        self.assertEqual(\n            test_reg1.state, 'draft',\n            'Event: new registration should not be confirmed with auto_confirmation parameter being False')\n\n    def test_event_access_rights(self):\n        \n        with self.assertRaises(AccessError):\n            self.Event.sudo(self.user_eventuser).create({\n                'name': 'TestEvent',\n                'date_begin': datetime.datetime.now() + relativedelta(days=-1),\n                'date_end': datetime.datetime.now() + relativedelta(days=1),\n                'seats_max': 10,\n            })\n        with self.assertRaises(AccessError):\n            self.event_0.sudo(self.user_eventuser).write({\n                'name': 'TestEvent Modified',\n            })\n\n        \n        self.user_eventmanager.write({'groups_id': [\n            (3, self.env.ref('base.group_system').id),\n            (4, self.env.ref('base.group_erp_manager').id)\n        ]})\n        with self.assertRaises(AccessError):\n            event_config = self.env['res.config.settings'].sudo(self.user_eventmanager).create({\n            })\n            event_config.execute()\n\n    def test_event_data(self):\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'tomorrow')\n\n    def test_event_date_range(self):\n        self.patcher = patch('odoo.addons.event.models.event.fields.Datetime', wraps=Datetime)\n        self.mock_datetime = self.patcher.start()\n\n        self.mock_datetime.now.return_value = Datetime.to_string(datetime.datetime(2015, 12, 31, 12, 0))\n\n        self.event_0.registration_ids.event_begin_date = datetime.datetime(2015, 12, 31, 18, 0)\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'today')\n\n        self.event_0.registration_ids.event_begin_date = datetime.datetime(2016, 1, 1, 6, 0)\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'tomorrow')\n\n        self.event_0.registration_ids.event_begin_date = datetime.datetime(2016, 1, 2, 6, 0)\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'in 2 days')\n\n        self.mock_datetime.now.return_value = Datetime.to_string(datetime.datetime(2015, 12, 10, 12, 0))\n        self.event_0.registration_ids.event_begin_date = datetime.datetime(2016, 1, 25, 6, 0)\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'next month')\n\n        self.patcher.stop()\n", "comments": "    basic event management auto confirmation               eventuser creates new event  ok         test event   self event sudo(self user eventmanager) create(               name    testevent                auto confirm   true               date begin   datetime datetime now()   relativedelta(days  1)               date end   datetime datetime now()   relativedelta(days 1)               seats max   2               seats availability    limited            )         self assertequal(test event state   confirm    event  auto confirmation event failed )            eventuser create registrations event         test reg1   self registration sudo(self user eventuser) create(               name    testreg1                event id   test event id           )         self assertequal(test reg1 state   open    event  auto confirmation registration failed )         self assertequal(test event seats reserved  1   event  wrong number reserved seats confirmed registration )         test reg2   self registration sudo(self user eventuser) create(               name    testreg2                event id   test event id           )         self assertequal(test reg2 state   open    event  auto confirmation registration failed )         self assertequal(test event seats reserved  2   event  wrong number reserved seats confirmed registration )            eventuser create registrations event  much registrations         self assertraises(validationerror)              self registration sudo(self user eventuser) create(                   name    testreg3                    event id   test event id               )            eventuser validates registrations         test reg1 button reg close()         self assertequal(test reg1 state   done    event  wrong state attended registration )         self assertequal(test event seats used  1   event  incorrect number attendees closing registration )         test reg2 button reg close()         self assertequal(test reg1 state   done    event  wrong state attended registration )         self assertequal(test event seats used  2   event  incorrect number attendees closing registration )            eventuser closes event         test event button done()            eventuser cancels    possible attendees         self assertraises(usererror)              test event button cancel()       mute logger( odoo addons base ir ir model    odoo models )     def test 10 advanced event flow(self)              avanced event flow  auto confirmation  manage minimum   maximum         seats                 coding  utf 8        eventuser creates new event  ok    eventuser create registrations event    eventuser create registrations event  much registrations    eventuser validates registrations    eventuser closes event    eventuser cancels    possible attendees    eventuser creates new event  ok    eventuser create registrations event    auto confirmation    eventmanager required create update events    settings access rights required enable features ", "content": "# -*- coding: utf-8 -*-\n\nimport datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo.addons.event.tests.common import TestEventCommon\nfrom odoo.exceptions import ValidationError, UserError, AccessError\nfrom odoo.tools import mute_logger\nfrom odoo.fields import Datetime\ntry:\n    from unittest.mock import patch\nexcept ImportError:\n    from mock import patch\n\n\nclass TestEventFlow(TestEventCommon):\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_00_basic_event_auto_confirm(self):\n        \"\"\" Basic event management with auto confirmation \"\"\"\n        # EventUser creates a new event: ok\n        test_event = self.Event.sudo(self.user_eventmanager).create({\n            'name': 'TestEvent',\n            'auto_confirm': True,\n            'date_begin': datetime.datetime.now() + relativedelta(days=-1),\n            'date_end': datetime.datetime.now() + relativedelta(days=1),\n            'seats_max': 2,\n            'seats_availability': 'limited',\n        })\n        self.assertEqual(test_event.state, 'confirm', 'Event: auto_confirmation of event failed')\n\n        # EventUser create registrations for this event\n        test_reg1 = self.Registration.sudo(self.user_eventuser).create({\n            'name': 'TestReg1',\n            'event_id': test_event.id,\n        })\n        self.assertEqual(test_reg1.state, 'open', 'Event: auto_confirmation of registration failed')\n        self.assertEqual(test_event.seats_reserved, 1, 'Event: wrong number of reserved seats after confirmed registration')\n        test_reg2 = self.Registration.sudo(self.user_eventuser).create({\n            'name': 'TestReg2',\n            'event_id': test_event.id,\n        })\n        self.assertEqual(test_reg2.state, 'open', 'Event: auto_confirmation of registration failed')\n        self.assertEqual(test_event.seats_reserved, 2, 'Event: wrong number of reserved seats after confirmed registration')\n\n        # EventUser create registrations for this event: too much registrations\n        with self.assertRaises(ValidationError):\n            self.Registration.sudo(self.user_eventuser).create({\n                'name': 'TestReg3',\n                'event_id': test_event.id,\n            })\n\n        # EventUser validates registrations\n        test_reg1.button_reg_close()\n        self.assertEqual(test_reg1.state, 'done', 'Event: wrong state of attended registration')\n        self.assertEqual(test_event.seats_used, 1, 'Event: incorrect number of attendees after closing registration')\n        test_reg2.button_reg_close()\n        self.assertEqual(test_reg1.state, 'done', 'Event: wrong state of attended registration')\n        self.assertEqual(test_event.seats_used, 2, 'Event: incorrect number of attendees after closing registration')\n\n        # EventUser closes the event\n        test_event.button_done()\n\n        # EventUser cancels -> not possible when having attendees\n        with self.assertRaises(UserError):\n            test_event.button_cancel()\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_10_advanced_event_flow(self):\n        \"\"\" Avanced event flow: no auto confirmation, manage minimum / maximum\n        seats, ... \"\"\"\n        # EventUser creates a new event: ok\n        test_event = self.Event.sudo(self.user_eventmanager).create({\n            'name': 'TestEvent',\n            'date_begin': datetime.datetime.now() + relativedelta(days=-1),\n            'date_end': datetime.datetime.now() + relativedelta(days=1),\n            'seats_max': 10,\n        })\n        self.assertEqual(\n            test_event.state, 'draft',\n            'Event: new event should be in draft state, no auto confirmation')\n\n        # EventUser create registrations for this event -> no auto confirmation\n        test_reg1 = self.Registration.sudo(self.user_eventuser).create({\n            'name': 'TestReg1',\n            'event_id': test_event.id,\n        })\n        self.assertEqual(\n            test_reg1.state, 'draft',\n            'Event: new registration should not be confirmed with auto_confirmation parameter being False')\n\n    def test_event_access_rights(self):\n        # EventManager required to create or update events\n        with self.assertRaises(AccessError):\n            self.Event.sudo(self.user_eventuser).create({\n                'name': 'TestEvent',\n                'date_begin': datetime.datetime.now() + relativedelta(days=-1),\n                'date_end': datetime.datetime.now() + relativedelta(days=1),\n                'seats_max': 10,\n            })\n        with self.assertRaises(AccessError):\n            self.event_0.sudo(self.user_eventuser).write({\n                'name': 'TestEvent Modified',\n            })\n\n        # Settings access rights required to enable some features\n        self.user_eventmanager.write({'groups_id': [\n            (3, self.env.ref('base.group_system').id),\n            (4, self.env.ref('base.group_erp_manager').id)\n        ]})\n        with self.assertRaises(AccessError):\n            event_config = self.env['res.config.settings'].sudo(self.user_eventmanager).create({\n            })\n            event_config.execute()\n\n    def test_event_data(self):\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'tomorrow')\n\n    def test_event_date_range(self):\n        self.patcher = patch('odoo.addons.event.models.event.fields.Datetime', wraps=Datetime)\n        self.mock_datetime = self.patcher.start()\n\n        self.mock_datetime.now.return_value = Datetime.to_string(datetime.datetime(2015, 12, 31, 12, 0))\n\n        self.event_0.registration_ids.event_begin_date = datetime.datetime(2015, 12, 31, 18, 0)\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'today')\n\n        self.event_0.registration_ids.event_begin_date = datetime.datetime(2016, 1, 1, 6, 0)\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'tomorrow')\n\n        self.event_0.registration_ids.event_begin_date = datetime.datetime(2016, 1, 2, 6, 0)\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'in 2 days')\n\n        self.mock_datetime.now.return_value = Datetime.to_string(datetime.datetime(2015, 12, 10, 12, 0))\n        self.event_0.registration_ids.event_begin_date = datetime.datetime(2016, 1, 25, 6, 0)\n        self.assertEqual(self.event_0.registration_ids.get_date_range_str(), u'next month')\n\n        self.patcher.stop()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_event_flow.py", "id": "9a48064c78ae28d3e9e6ff55ceb349e0", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/event/tests/test_event_flow.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}