{"author": "ansible", "code": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest\nfrom oneview_module_loader import OneViewModuleBase\nfrom ansible.modules.remote_management.oneview.oneview_enclosure_facts import EnclosureFactsModule\nfrom hpe_test_utils import FactsParamsTestCase\n\n\nERROR_MSG = 'Fake message error'\n\nPARAMS_GET_ALL = dict(\n    config='config.json',\n    name=None\n)\n\nPARAMS_GET_BY_NAME = dict(\n    config='config.json',\n    name=\"Test-Enclosure\",\n    options=[]\n)\n\nPARAMS_GET_BY_NAME_WITH_OPTIONS = dict(\n    config='config.json',\n    name=\"Test-Enclosure\",\n    options=['utilization', 'environmentalConfiguration', 'script']\n)\n\nPARAMS_GET_UTILIZATION_WITH_PARAMS = dict(\n    config='config.json',\n    name=\"Test-Enclosure\",\n    options=[dict(utilization=dict(fields='AveragePower',\n                                   filter=['startDate=2016-06-30T03:29:42.000Z',\n                                           'endDate=2016-07-01T03:29:42.000Z'],\n                                   view='day',\n                                   refresh=True))]\n)\n\nPRESENT_ENCLOSURES = [{\n    \"name\": \"Test-Enclosure\",\n    \"uri\": \"/rest/enclosures/c6bf9af9-48e7-4236-b08a-77684dc258a5\"\n}]\n\nENCLOSURE_SCRIPT = '# script content'\n\nENCLOSURE_UTILIZATION = {\n    \"isFresh\": \"True\"\n}\n\nENCLOSURE_ENVIRONMENTAL_CONFIG = {\n    \"calibratedMaxPower\": \"2500\"\n}\n\n\nclass EnclosureFactsSpec(unittest.TestCase,\n                         FactsParamsTestCase):\n    def setUp(self):\n        self.configure_mocks(self, EnclosureFactsModule)\n        self.enclosures = self.mock_ov_client.enclosures\n        FactsParamsTestCase.configure_client_mock(self, self.enclosures)\n\n    def test_should_get_all_enclosures(self):\n        self.enclosures.get_all.return_value = PRESENT_ENCLOSURES\n        self.mock_ansible_module.params = PARAMS_GET_ALL\n\n        EnclosureFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(enclosures=(PRESENT_ENCLOSURES))\n        )\n\n    def test_should_get_enclosure_by_name(self):\n        self.enclosures.get_by.return_value = PRESENT_ENCLOSURES\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME\n\n        EnclosureFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(enclosures=(PRESENT_ENCLOSURES))\n\n        )\n\n    def test_should_get_enclosure_by_name_with_options(self):\n        self.enclosures.get_by.return_value = PRESENT_ENCLOSURES\n        self.enclosures.get_script.return_value = ENCLOSURE_SCRIPT\n        self.enclosures.get_utilization.return_value = ENCLOSURE_UTILIZATION\n        self.enclosures.get_environmental_configuration.return_value = ENCLOSURE_ENVIRONMENTAL_CONFIG\n\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME_WITH_OPTIONS\n\n        EnclosureFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(enclosures=PRESENT_ENCLOSURES,\n                               enclosure_script=ENCLOSURE_SCRIPT,\n                               enclosure_environmental_configuration=ENCLOSURE_ENVIRONMENTAL_CONFIG,\n                               enclosure_utilization=ENCLOSURE_UTILIZATION)\n\n        )\n\n    def test_should_get_all_utilization_data(self):\n        self.enclosures.get_by.return_value = PRESENT_ENCLOSURES\n        self.enclosures.get_script.return_value = ENCLOSURE_SCRIPT\n        self.enclosures.get_utilization.return_value = ENCLOSURE_UTILIZATION\n        self.enclosures.get_environmental_configuration.return_value = ENCLOSURE_ENVIRONMENTAL_CONFIG\n\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME_WITH_OPTIONS\n\n        EnclosureFactsModule().run()\n\n        self.enclosures.get_utilization.assert_called_once_with(PRESENT_ENCLOSURES[0]['uri'], fields='', filter='',\n                                                                view='', refresh='')\n\n    def test_should_get_utilization_with_parameters(self):\n        self.enclosures.get_by.return_value = PRESENT_ENCLOSURES\n        self.enclosures.get_script.return_value = ENCLOSURE_SCRIPT\n        self.enclosures.get_utilization.return_value = ENCLOSURE_UTILIZATION\n        self.enclosures.get_environmental_configuration.return_value = ENCLOSURE_ENVIRONMENTAL_CONFIG\n\n        self.mock_ansible_module.params = PARAMS_GET_UTILIZATION_WITH_PARAMS\n\n        EnclosureFactsModule().run()\n\n        date_filter = [\"startDate=2016-06-30T03:29:42.000Z\", \"endDate=2016-07-01T03:29:42.000Z\"]\n\n        self.enclosures.get_utilization.assert_called_once_with(\n            PRESENT_ENCLOSURES[0]['uri'], fields='AveragePower', filter=date_filter, view='day', refresh=True)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "  copyright (c) 2016 2017 hewlett packard enterprise development lp    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "# Copyright (c) 2016-2017 Hewlett Packard Enterprise Development LP\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom ansible.compat.tests import unittest\nfrom oneview_module_loader import OneViewModuleBase\nfrom ansible.modules.remote_management.oneview.oneview_enclosure_facts import EnclosureFactsModule\nfrom hpe_test_utils import FactsParamsTestCase\n\n\nERROR_MSG = 'Fake message error'\n\nPARAMS_GET_ALL = dict(\n    config='config.json',\n    name=None\n)\n\nPARAMS_GET_BY_NAME = dict(\n    config='config.json',\n    name=\"Test-Enclosure\",\n    options=[]\n)\n\nPARAMS_GET_BY_NAME_WITH_OPTIONS = dict(\n    config='config.json',\n    name=\"Test-Enclosure\",\n    options=['utilization', 'environmentalConfiguration', 'script']\n)\n\nPARAMS_GET_UTILIZATION_WITH_PARAMS = dict(\n    config='config.json',\n    name=\"Test-Enclosure\",\n    options=[dict(utilization=dict(fields='AveragePower',\n                                   filter=['startDate=2016-06-30T03:29:42.000Z',\n                                           'endDate=2016-07-01T03:29:42.000Z'],\n                                   view='day',\n                                   refresh=True))]\n)\n\nPRESENT_ENCLOSURES = [{\n    \"name\": \"Test-Enclosure\",\n    \"uri\": \"/rest/enclosures/c6bf9af9-48e7-4236-b08a-77684dc258a5\"\n}]\n\nENCLOSURE_SCRIPT = '# script content'\n\nENCLOSURE_UTILIZATION = {\n    \"isFresh\": \"True\"\n}\n\nENCLOSURE_ENVIRONMENTAL_CONFIG = {\n    \"calibratedMaxPower\": \"2500\"\n}\n\n\nclass EnclosureFactsSpec(unittest.TestCase,\n                         FactsParamsTestCase):\n    def setUp(self):\n        self.configure_mocks(self, EnclosureFactsModule)\n        self.enclosures = self.mock_ov_client.enclosures\n        FactsParamsTestCase.configure_client_mock(self, self.enclosures)\n\n    def test_should_get_all_enclosures(self):\n        self.enclosures.get_all.return_value = PRESENT_ENCLOSURES\n        self.mock_ansible_module.params = PARAMS_GET_ALL\n\n        EnclosureFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(enclosures=(PRESENT_ENCLOSURES))\n        )\n\n    def test_should_get_enclosure_by_name(self):\n        self.enclosures.get_by.return_value = PRESENT_ENCLOSURES\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME\n\n        EnclosureFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(enclosures=(PRESENT_ENCLOSURES))\n\n        )\n\n    def test_should_get_enclosure_by_name_with_options(self):\n        self.enclosures.get_by.return_value = PRESENT_ENCLOSURES\n        self.enclosures.get_script.return_value = ENCLOSURE_SCRIPT\n        self.enclosures.get_utilization.return_value = ENCLOSURE_UTILIZATION\n        self.enclosures.get_environmental_configuration.return_value = ENCLOSURE_ENVIRONMENTAL_CONFIG\n\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME_WITH_OPTIONS\n\n        EnclosureFactsModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(enclosures=PRESENT_ENCLOSURES,\n                               enclosure_script=ENCLOSURE_SCRIPT,\n                               enclosure_environmental_configuration=ENCLOSURE_ENVIRONMENTAL_CONFIG,\n                               enclosure_utilization=ENCLOSURE_UTILIZATION)\n\n        )\n\n    def test_should_get_all_utilization_data(self):\n        self.enclosures.get_by.return_value = PRESENT_ENCLOSURES\n        self.enclosures.get_script.return_value = ENCLOSURE_SCRIPT\n        self.enclosures.get_utilization.return_value = ENCLOSURE_UTILIZATION\n        self.enclosures.get_environmental_configuration.return_value = ENCLOSURE_ENVIRONMENTAL_CONFIG\n\n        self.mock_ansible_module.params = PARAMS_GET_BY_NAME_WITH_OPTIONS\n\n        EnclosureFactsModule().run()\n\n        self.enclosures.get_utilization.assert_called_once_with(PRESENT_ENCLOSURES[0]['uri'], fields='', filter='',\n                                                                view='', refresh='')\n\n    def test_should_get_utilization_with_parameters(self):\n        self.enclosures.get_by.return_value = PRESENT_ENCLOSURES\n        self.enclosures.get_script.return_value = ENCLOSURE_SCRIPT\n        self.enclosures.get_utilization.return_value = ENCLOSURE_UTILIZATION\n        self.enclosures.get_environmental_configuration.return_value = ENCLOSURE_ENVIRONMENTAL_CONFIG\n\n        self.mock_ansible_module.params = PARAMS_GET_UTILIZATION_WITH_PARAMS\n\n        EnclosureFactsModule().run()\n\n        date_filter = [\"startDate=2016-06-30T03:29:42.000Z\", \"endDate=2016-07-01T03:29:42.000Z\"]\n\n        self.enclosures.get_utilization.assert_called_once_with(\n            PRESENT_ENCLOSURES[0]['uri'], fields='AveragePower', filter=date_filter, view='day', refresh=True)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_oneview_enclosure_facts.py", "id": "d6082f9bfada05ec8e7d6cbfa3d8cbd2", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/test_oneview_enclosure_facts.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}