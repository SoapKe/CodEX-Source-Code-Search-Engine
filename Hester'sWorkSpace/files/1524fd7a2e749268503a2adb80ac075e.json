{"author": "openai", "code": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass ReacherEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        utils.EzPickle.__init__(self)\n        mujoco_env.MujocoEnv.__init__(self, 'reacher.xml', 2)\n\n    def step(self, a):\n        vec = self.get_body_com(\"fingertip\")-self.get_body_com(\"target\")\n        reward_dist = - np.linalg.norm(vec)\n        reward_ctrl = - np.square(a).sum()\n        reward = reward_dist + reward_ctrl\n        self.do_simulation(a, self.frame_skip)\n        ob = self._get_obs()\n        done = False\n        return ob, reward, done, dict(reward_dist=reward_dist, reward_ctrl=reward_ctrl)\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 0\n\n    def reset_model(self):\n        qpos = self.np_random.uniform(low=-0.1, high=0.1, size=self.model.nq) + self.init_qpos\n        while True:\n            self.goal = self.np_random.uniform(low=-.2, high=.2, size=2)\n            if np.linalg.norm(self.goal) < 2:\n                break\n        qpos[-2:] = self.goal\n        qvel = self.init_qvel + self.np_random.uniform(low=-.005, high=.005, size=self.model.nv)\n        qvel[-2:] = 0\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def _get_obs(self):\n        theta = self.sim.data.qpos.flat[:2]\n        return np.concatenate([\n            np.cos(theta),\n            np.sin(theta),\n            self.sim.data.qpos.flat[2:],\n            self.sim.data.qvel.flat[:2],\n            self.get_body_com(\"fingertip\") - self.get_body_com(\"target\")\n        ])\n", "comments": "", "content": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass ReacherEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        utils.EzPickle.__init__(self)\n        mujoco_env.MujocoEnv.__init__(self, 'reacher.xml', 2)\n\n    def step(self, a):\n        vec = self.get_body_com(\"fingertip\")-self.get_body_com(\"target\")\n        reward_dist = - np.linalg.norm(vec)\n        reward_ctrl = - np.square(a).sum()\n        reward = reward_dist + reward_ctrl\n        self.do_simulation(a, self.frame_skip)\n        ob = self._get_obs()\n        done = False\n        return ob, reward, done, dict(reward_dist=reward_dist, reward_ctrl=reward_ctrl)\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 0\n\n    def reset_model(self):\n        qpos = self.np_random.uniform(low=-0.1, high=0.1, size=self.model.nq) + self.init_qpos\n        while True:\n            self.goal = self.np_random.uniform(low=-.2, high=.2, size=2)\n            if np.linalg.norm(self.goal) < 2:\n                break\n        qpos[-2:] = self.goal\n        qvel = self.init_qvel + self.np_random.uniform(low=-.005, high=.005, size=self.model.nv)\n        qvel[-2:] = 0\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def _get_obs(self):\n        theta = self.sim.data.qpos.flat[:2]\n        return np.concatenate([\n            np.cos(theta),\n            np.sin(theta),\n            self.sim.data.qpos.flat[2:],\n            self.sim.data.qvel.flat[:2],\n            self.get_body_com(\"fingertip\") - self.get_body_com(\"target\")\n        ])\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "reacher.py", "id": "1524fd7a2e749268503a2adb80ac075e", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/reacher.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}