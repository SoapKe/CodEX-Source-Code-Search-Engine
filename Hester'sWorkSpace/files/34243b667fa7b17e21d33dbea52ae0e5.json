{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import FileDownloader\nfrom .f4m import F4mFD\nfrom .hls import HlsFD\nfrom .http import HttpFD\nfrom .rtmp import RtmpFD\nfrom .dash import DashSegmentsFD\nfrom .rtsp import RtspFD\nfrom .ism import IsmFD\nfrom .external import (\n    get_external_downloader,\n    FFmpegFD,\n)\n\nfrom ..utils import (\n    determine_protocol,\n)\n\nPROTOCOL_MAP = {\n    'rtmp': RtmpFD,\n    'm3u8_native': HlsFD,\n    'm3u8': FFmpegFD,\n    'mms': RtspFD,\n    'rtsp': RtspFD,\n    'f4m': F4mFD,\n    'http_dash_segments': DashSegmentsFD,\n    'ism': IsmFD,\n}\n\n\ndef get_suitable_downloader(info_dict, params={}):\n    \n    protocol = determine_protocol(info_dict)\n    info_dict['protocol'] = protocol\n\n    \n    \n\n    external_downloader = params.get('external_downloader')\n    if external_downloader is not None:\n        ed = get_external_downloader(external_downloader)\n        if ed.can_download(info_dict):\n            return ed\n\n    if protocol.startswith('m3u8') and info_dict.get('is_live'):\n        return FFmpegFD\n\n    if protocol == 'm3u8' and params.get('hls_prefer_native') is True:\n        return HlsFD\n\n    if protocol == 'm3u8_native' and params.get('hls_prefer_native') is False:\n        return FFmpegFD\n\n    return PROTOCOL_MAP.get(protocol, HttpFD)\n\n\n__all__ = [\n    'get_suitable_downloader',\n    'FileDownloader',\n]\n", "comments": "Get the downloader class that can handle the info dict.\n.\n# if (info_dict.get('start_time') or info_dict.get('end_time')) and not info_dict.get('requested_formats') and FFmpegFD.can_download(info_dict):\n#     return FFmpegFD\n", "content": "from __future__ import unicode_literals\n\nfrom .common import FileDownloader\nfrom .f4m import F4mFD\nfrom .hls import HlsFD\nfrom .http import HttpFD\nfrom .rtmp import RtmpFD\nfrom .dash import DashSegmentsFD\nfrom .rtsp import RtspFD\nfrom .ism import IsmFD\nfrom .external import (\n    get_external_downloader,\n    FFmpegFD,\n)\n\nfrom ..utils import (\n    determine_protocol,\n)\n\nPROTOCOL_MAP = {\n    'rtmp': RtmpFD,\n    'm3u8_native': HlsFD,\n    'm3u8': FFmpegFD,\n    'mms': RtspFD,\n    'rtsp': RtspFD,\n    'f4m': F4mFD,\n    'http_dash_segments': DashSegmentsFD,\n    'ism': IsmFD,\n}\n\n\ndef get_suitable_downloader(info_dict, params={}):\n    \"\"\"Get the downloader class that can handle the info dict.\"\"\"\n    protocol = determine_protocol(info_dict)\n    info_dict['protocol'] = protocol\n\n    # if (info_dict.get('start_time') or info_dict.get('end_time')) and not info_dict.get('requested_formats') and FFmpegFD.can_download(info_dict):\n    #     return FFmpegFD\n\n    external_downloader = params.get('external_downloader')\n    if external_downloader is not None:\n        ed = get_external_downloader(external_downloader)\n        if ed.can_download(info_dict):\n            return ed\n\n    if protocol.startswith('m3u8') and info_dict.get('is_live'):\n        return FFmpegFD\n\n    if protocol == 'm3u8' and params.get('hls_prefer_native') is True:\n        return HlsFD\n\n    if protocol == 'm3u8_native' and params.get('hls_prefer_native') is False:\n        return FFmpegFD\n\n    return PROTOCOL_MAP.get(protocol, HttpFD)\n\n\n__all__ = [\n    'get_suitable_downloader',\n    'FileDownloader',\n]\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "__init__.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/downloader/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}