{"author": "USArmyResearchLab", "code": "import dshell\nimport netflowout\n\n\nclass DshellDecoder(dshell.TCPDecoder):\n\n    def __init__(self):\n        dshell.TCPDecoder.__init__(self,\n                                   name='netflow',\n                                   description='generate netflow information from pcap',\n                                   longdescription='generate netflow information from pcap',\n                                   filter='(tcp or udp)',\n                                   author='bg',\n                                   \n                                   optiondict={'group': dict()}\n                                   )\n        self.out = netflowout.NetflowOutput()\n\n    def preModule(self):\n        \n        if self.group:\n            self.out.group = self.group.split(',')\n        dshell.TCPDecoder.preModule(self)\n\n    def connectionHandler(self, conn):\n        self.alert(**conn.info())\n\n    def postModule(self):\n        self.out.close()  \n        dshell.TCPDecoder.postModule(self)\n\n\nif __name__ == '__main__':\n    dObj = DshellDecoder()\n    print dObj\nelse:\n    dObj = DshellDecoder()\n", "comments": "  grouping output module    pass grouping output module    write flow groups grouping ", "content": "import dshell\nimport netflowout\n\n\nclass DshellDecoder(dshell.TCPDecoder):\n\n    def __init__(self):\n        dshell.TCPDecoder.__init__(self,\n                                   name='netflow',\n                                   description='generate netflow information from pcap',\n                                   longdescription='generate netflow information from pcap',\n                                   filter='(tcp or udp)',\n                                   author='bg',\n                                   # grouping for output module\n                                   optiondict={'group': dict()}\n                                   )\n        self.out = netflowout.NetflowOutput()\n\n    def preModule(self):\n        # pass grouping to output module\n        if self.group:\n            self.out.group = self.group.split(',')\n        dshell.TCPDecoder.preModule(self)\n\n    def connectionHandler(self, conn):\n        self.alert(**conn.info())\n\n    def postModule(self):\n        self.out.close()  # write flow groups if grouping\n        dshell.TCPDecoder.postModule(self)\n\n\nif __name__ == '__main__':\n    dObj = DshellDecoder()\n    print dObj\nelse:\n    dObj = DshellDecoder()\n", "description": "Dshell is a network forensic analysis framework.", "file_name": "netflow.py", "id": "e0a3baa09d9df97962caf84e91bfc611", "language": "Python", "project_name": "Dshell", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/USArmyResearchLab-Dshell/USArmyResearchLab-Dshell-5850adf/decoders/flows/netflow.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:01:29Z", "url": "https://github.com/USArmyResearchLab/Dshell", "wiki": true}