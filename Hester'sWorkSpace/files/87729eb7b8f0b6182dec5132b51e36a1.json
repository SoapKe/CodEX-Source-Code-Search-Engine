{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    int_or_none,\n    js_to_json,\n    parse_iso8601,\n)\n\n\nclass NetzkinoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?netzkino\\.de/\\\n\n    _TEST = {\n        'url': 'http://www.netzkino.de/\n        'md5': '92a3f8b76f8d7220acce5377ea5d4873',\n        'info_dict': {\n            'id': 'rakete-zum-mond',\n            'ext': 'mp4',\n            'title': 'Rakete zum Mond (Endstation Mond, Destination Moon)',\n            'comments': 'mincount:3',\n            'description': 'md5:1eddeacc7e62d5a25a2d1a7290c64a28',\n            'upload_date': '20120813',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'timestamp': 1344858571,\n            'age_limit': 12,\n        },\n        'params': {\n            'skip_download': 'Download only works from Germany',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        category_id = mobj.group('category')\n        video_id = mobj.group('id')\n\n        api_url = 'http://api.netzkino.de.simplecache.net/capi-2.0a/categories/%s.json?d=www' % category_id\n        api_info = self._download_json(api_url, video_id)\n        info = next(\n            p for p in api_info['posts'] if p['slug'] == video_id)\n        custom_fields = info['custom_fields']\n\n        production_js = self._download_webpage(\n            'http://www.netzkino.de/beta/dist/production.min.js', video_id,\n            note='Downloading player code')\n        avo_js = self._search_regex(\n            r'var urlTemplate=(\\{.*?\"\\})',\n            production_js, 'URL templates')\n        templates = self._parse_json(\n            avo_js, video_id, transform_source=js_to_json)\n\n        suffix = {\n            'hds': '.mp4/manifest.f4m',\n            'hls': '.mp4/master.m3u8',\n            'pmd': '.mp4',\n        }\n        film_fn = custom_fields['Streaming'][0]\n        formats = [{\n            'format_id': key,\n            'ext': 'mp4',\n            'url': tpl.replace('{}', film_fn) + suffix[key],\n        } for key, tpl in templates.items()]\n        self._sort_formats(formats)\n\n        comments = [{\n            'timestamp': parse_iso8601(c.get('date'), delimiter=' '),\n            'id': c['id'],\n            'author': c['name'],\n            'html': c['content'],\n            'parent': 'root' if c.get('parent', 0) == 0 else c['parent'],\n        } for c in info.get('comments', [])]\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'comments': comments,\n            'title': info['title'],\n            'age_limit': int_or_none(custom_fields.get('FSK')[0]),\n            'timestamp': parse_iso8601(info.get('date'), delimiter=' '),\n            'description': clean_html(info.get('content')),\n            'thumbnail': info.get('thumbnail'),\n            'playlist_title': api_info.get('title'),\n            'playlist_id': category_id,\n        }\n", "comments": "# coding: utf-8\n#!/(?P<category>[^/]+)/(?P<id>[^/]+)'\n#!/scifikino/rakete-zum-mond',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    clean_html,\n    int_or_none,\n    js_to_json,\n    parse_iso8601,\n)\n\n\nclass NetzkinoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?netzkino\\.de/\\#!/(?P<category>[^/]+)/(?P<id>[^/]+)'\n\n    _TEST = {\n        'url': 'http://www.netzkino.de/#!/scifikino/rakete-zum-mond',\n        'md5': '92a3f8b76f8d7220acce5377ea5d4873',\n        'info_dict': {\n            'id': 'rakete-zum-mond',\n            'ext': 'mp4',\n            'title': 'Rakete zum Mond (Endstation Mond, Destination Moon)',\n            'comments': 'mincount:3',\n            'description': 'md5:1eddeacc7e62d5a25a2d1a7290c64a28',\n            'upload_date': '20120813',\n            'thumbnail': r're:https?://.*\\.jpg$',\n            'timestamp': 1344858571,\n            'age_limit': 12,\n        },\n        'params': {\n            'skip_download': 'Download only works from Germany',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        category_id = mobj.group('category')\n        video_id = mobj.group('id')\n\n        api_url = 'http://api.netzkino.de.simplecache.net/capi-2.0a/categories/%s.json?d=www' % category_id\n        api_info = self._download_json(api_url, video_id)\n        info = next(\n            p for p in api_info['posts'] if p['slug'] == video_id)\n        custom_fields = info['custom_fields']\n\n        production_js = self._download_webpage(\n            'http://www.netzkino.de/beta/dist/production.min.js', video_id,\n            note='Downloading player code')\n        avo_js = self._search_regex(\n            r'var urlTemplate=(\\{.*?\"\\})',\n            production_js, 'URL templates')\n        templates = self._parse_json(\n            avo_js, video_id, transform_source=js_to_json)\n\n        suffix = {\n            'hds': '.mp4/manifest.f4m',\n            'hls': '.mp4/master.m3u8',\n            'pmd': '.mp4',\n        }\n        film_fn = custom_fields['Streaming'][0]\n        formats = [{\n            'format_id': key,\n            'ext': 'mp4',\n            'url': tpl.replace('{}', film_fn) + suffix[key],\n        } for key, tpl in templates.items()]\n        self._sort_formats(formats)\n\n        comments = [{\n            'timestamp': parse_iso8601(c.get('date'), delimiter=' '),\n            'id': c['id'],\n            'author': c['name'],\n            'html': c['content'],\n            'parent': 'root' if c.get('parent', 0) == 0 else c['parent'],\n        } for c in info.get('comments', [])]\n\n        return {\n            'id': video_id,\n            'formats': formats,\n            'comments': comments,\n            'title': info['title'],\n            'age_limit': int_or_none(custom_fields.get('FSK')[0]),\n            'timestamp': parse_iso8601(info.get('date'), delimiter=' '),\n            'description': clean_html(info.get('content')),\n            'thumbnail': info.get('thumbnail'),\n            'playlist_title': api_info.get('title'),\n            'playlist_id': category_id,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "netzkino.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/netzkino.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}