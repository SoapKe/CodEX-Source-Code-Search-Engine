{"author": "odoo", "code": "from odoo.tests import common\n\nclass TestFiscalPosition(common.TransactionCase):\n    \"\"\"Tests for fiscal positions in auto apply (account.fiscal.position).\n    If a partner has a vat number, the fiscal positions with \"vat_required=True\"\n    are preferred.\n    \"\"\"\n\n    def setUp(self):\n        super(TestFiscalPosition, self).setUp()\n        self.fp = self.env['account.fiscal.position']\n\n        \n        self.fp.search([]).write({'auto_apply': False})\n\n        self.res_partner = self.env['res.partner']\n        self.be = be = self.env.ref('base.be')\n        self.fr = fr = self.env.ref('base.fr')\n        self.mx = mx = self.env.ref('base.mx')\n        self.eu = eu = self.env.ref('base.europe')\n        self.state_fr = self.env['res.country.state'].create(dict(\n                                           name=\"State\",\n                                           code=\"ST\",\n                                           country_id=fr.id))\n        self.jc = self.res_partner.create(dict(\n                                           name=\"JCVD\",\n                                           vat=\"BE0477472701\",\n                                           country_id=be.id))\n        self.ben = self.res_partner.create(dict(\n                                           name=\"BP\",\n                                           country_id=be.id))\n        self.george = self.res_partner.create(dict(\n                                           name=\"George\",\n                                           vat=\"BE0477472701\",\n                                           country_id=fr.id))\n        self.alberto = self.res_partner.create(dict(\n                                           name=\"Alberto\",\n                                           vat=\"BE0477472701\",\n                                           country_id=mx.id))\n        self.be_nat = self.fp.create(dict(\n                                         name=\"BE-NAT\",\n                                         auto_apply=True,\n                                         country_id=be.id,\n                                         vat_required=False,\n                                         sequence=10))\n        self.fr_b2c = self.fp.create(dict(\n                                         name=\"EU-VAT-FR-B2C\",\n                                         auto_apply=True,\n                                         country_id=fr.id,\n                                         vat_required=False,\n                                         sequence=40))\n        self.fr_b2b = self.fp.create(dict(\n                                         name=\"EU-VAT-FR-B2B\",\n                                         auto_apply=True,\n                                         country_id=fr.id,\n                                         vat_required=True,\n                                         sequence=50))\n\n    def test_10_fp_country(self):\n        def assert_fp(partner, expected_pos, message):\n            self.assertEquals(\n                self.fp.get_fiscal_position(partner.id),\n                expected_pos.id,\n                message)\n\n        george, jc, ben, alberto = self.george, self.jc, self.ben, self.alberto\n\n        \n        self.assertGreater(self.fr_b2b.sequence, self.fr_b2c.sequence)\n        assert_fp(george, self.fr_b2b, \"FR-B2B should have precedence over FR-B2C\")\n        self.fr_b2b.auto_apply = False\n        assert_fp(george, self.fr_b2c, \"FR-B2C should match now\")\n        self.fr_b2b.auto_apply = True\n\n        \n        self.eu_intra_b2b = self.fp.create(dict(\n                                         name=\"EU-INTRA B2B\",\n                                         auto_apply=True,\n                                         country_group_id=self.eu.id,\n                                         vat_required=True,\n                                         sequence=20))\n        self.world = self.fp.create(dict(\n                                         name=\"WORLD-EXTRA\",\n                                         auto_apply=True,\n                                         vat_required=False,\n                                         sequence=30))\n\n        \n        self.assertGreater(self.fr_b2b.sequence, self.eu_intra_b2b.sequence)\n        assert_fp(george, self.fr_b2b, \"FR-B2B should have precedence over EU-INTRA B2B\")\n\n        \n        self.assertGreater(self.eu_intra_b2b.sequence, self.be_nat.sequence)\n        assert_fp(jc, self.eu_intra_b2b, \"EU-INTRA B2B should match before BE-NAT\")\n\n        \n        self.assertFalse(ben.vat) \n        assert_fp(ben, self.be_nat, \"BE-NAT should match before EU-INTRA due to lower sequence\")\n\n        \n        self.be.write({'country_group_ids': [(3, self.eu.id)]})\n        self.assertTrue(jc.vat) \n        assert_fp(jc, self.be_nat, \"BE-NAT should match as fallback even w/o VAT match\")\n\n        \n        self.assertTrue(alberto.vat) \n        assert_fp(alberto, self.world, \"WORLD-EXTRA should match anything else (1)\")\n        alberto.vat = False          \n        assert_fp(alberto, self.world, \"WORLD-EXTRA should match anything else (2)\")\n\n        \n        self.fr_b2b_zip100 = self.fr_b2b.copy(dict(zip_from=0, zip_to=5000, sequence=60))\n        george.zip = 6000\n        assert_fp(george, self.fr_b2b, \"FR-B2B with wrong zip range should not match\")\n        george.zip = 3000\n        assert_fp(george, self.fr_b2b_zip100, \"FR-B2B with zip range should have precedence\")\n\n        \n        self.fr_b2b_state = self.fr_b2b.copy(dict(state_ids=[(4, self.state_fr.id)], sequence=70))\n        george.state_id = self.state_fr\n        assert_fp(george, self.fr_b2b_zip100, \"FR-B2B with zip should have precedence over states\")\n        george.zip = 0\n        assert_fp(george, self.fr_b2b_state, \"FR-B2B with states should have precedence\")\n\n        \n        george.property_account_position_id = self.be_nat\n        assert_fp(george, self.be_nat, \"Forced position has max precedence\")\n", "comments": "   tests fiscal positions auto apply (account fiscal position)      if partner vat number  fiscal positions  vat required true      preferred             reset existing fp    b2b precedence b2c country even sequence gives lower precedence    create positions matching country group no country    country match higher precedence group match sequence    b2b precedence regardless country group match    lower sequence   higher precedence country group vat matches    no vat set    remove be eu group  be nat fallback match wildcard world    vat set    no country   wildcard match nothing else matches    vat    without    zip range    states    dedicated position max precedence ", "content": "from odoo.tests import common\n\nclass TestFiscalPosition(common.TransactionCase):\n    \"\"\"Tests for fiscal positions in auto apply (account.fiscal.position).\n    If a partner has a vat number, the fiscal positions with \"vat_required=True\"\n    are preferred.\n    \"\"\"\n\n    def setUp(self):\n        super(TestFiscalPosition, self).setUp()\n        self.fp = self.env['account.fiscal.position']\n\n        # reset any existing FP\n        self.fp.search([]).write({'auto_apply': False})\n\n        self.res_partner = self.env['res.partner']\n        self.be = be = self.env.ref('base.be')\n        self.fr = fr = self.env.ref('base.fr')\n        self.mx = mx = self.env.ref('base.mx')\n        self.eu = eu = self.env.ref('base.europe')\n        self.state_fr = self.env['res.country.state'].create(dict(\n                                           name=\"State\",\n                                           code=\"ST\",\n                                           country_id=fr.id))\n        self.jc = self.res_partner.create(dict(\n                                           name=\"JCVD\",\n                                           vat=\"BE0477472701\",\n                                           country_id=be.id))\n        self.ben = self.res_partner.create(dict(\n                                           name=\"BP\",\n                                           country_id=be.id))\n        self.george = self.res_partner.create(dict(\n                                           name=\"George\",\n                                           vat=\"BE0477472701\",\n                                           country_id=fr.id))\n        self.alberto = self.res_partner.create(dict(\n                                           name=\"Alberto\",\n                                           vat=\"BE0477472701\",\n                                           country_id=mx.id))\n        self.be_nat = self.fp.create(dict(\n                                         name=\"BE-NAT\",\n                                         auto_apply=True,\n                                         country_id=be.id,\n                                         vat_required=False,\n                                         sequence=10))\n        self.fr_b2c = self.fp.create(dict(\n                                         name=\"EU-VAT-FR-B2C\",\n                                         auto_apply=True,\n                                         country_id=fr.id,\n                                         vat_required=False,\n                                         sequence=40))\n        self.fr_b2b = self.fp.create(dict(\n                                         name=\"EU-VAT-FR-B2B\",\n                                         auto_apply=True,\n                                         country_id=fr.id,\n                                         vat_required=True,\n                                         sequence=50))\n\n    def test_10_fp_country(self):\n        def assert_fp(partner, expected_pos, message):\n            self.assertEquals(\n                self.fp.get_fiscal_position(partner.id),\n                expected_pos.id,\n                message)\n\n        george, jc, ben, alberto = self.george, self.jc, self.ben, self.alberto\n\n        # B2B has precedence over B2C for same country even when sequence gives lower precedence\n        self.assertGreater(self.fr_b2b.sequence, self.fr_b2c.sequence)\n        assert_fp(george, self.fr_b2b, \"FR-B2B should have precedence over FR-B2C\")\n        self.fr_b2b.auto_apply = False\n        assert_fp(george, self.fr_b2c, \"FR-B2C should match now\")\n        self.fr_b2b.auto_apply = True\n\n        # Create positions matching on Country Group and on NO country at all\n        self.eu_intra_b2b = self.fp.create(dict(\n                                         name=\"EU-INTRA B2B\",\n                                         auto_apply=True,\n                                         country_group_id=self.eu.id,\n                                         vat_required=True,\n                                         sequence=20))\n        self.world = self.fp.create(dict(\n                                         name=\"WORLD-EXTRA\",\n                                         auto_apply=True,\n                                         vat_required=False,\n                                         sequence=30))\n\n        # Country match has higher precedence than group match or sequence\n        self.assertGreater(self.fr_b2b.sequence, self.eu_intra_b2b.sequence)\n        assert_fp(george, self.fr_b2b, \"FR-B2B should have precedence over EU-INTRA B2B\")\n\n        # B2B has precedence regardless of country or group match\n        self.assertGreater(self.eu_intra_b2b.sequence, self.be_nat.sequence)\n        assert_fp(jc, self.eu_intra_b2b, \"EU-INTRA B2B should match before BE-NAT\")\n\n        # Lower sequence = higher precedence if country/group and VAT matches\n        self.assertFalse(ben.vat) # No VAT set\n        assert_fp(ben, self.be_nat, \"BE-NAT should match before EU-INTRA due to lower sequence\")\n\n        # Remove BE from EU group, now BE-NAT should be the fallback match before the wildcard WORLD\n        self.be.write({'country_group_ids': [(3, self.eu.id)]})\n        self.assertTrue(jc.vat) # VAT set\n        assert_fp(jc, self.be_nat, \"BE-NAT should match as fallback even w/o VAT match\")\n\n        # No country = wildcard match only if nothing else matches\n        self.assertTrue(alberto.vat) # with VAT\n        assert_fp(alberto, self.world, \"WORLD-EXTRA should match anything else (1)\")\n        alberto.vat = False          # or without\n        assert_fp(alberto, self.world, \"WORLD-EXTRA should match anything else (2)\")\n\n        # Zip range\n        self.fr_b2b_zip100 = self.fr_b2b.copy(dict(zip_from=0, zip_to=5000, sequence=60))\n        george.zip = 6000\n        assert_fp(george, self.fr_b2b, \"FR-B2B with wrong zip range should not match\")\n        george.zip = 3000\n        assert_fp(george, self.fr_b2b_zip100, \"FR-B2B with zip range should have precedence\")\n\n        # States\n        self.fr_b2b_state = self.fr_b2b.copy(dict(state_ids=[(4, self.state_fr.id)], sequence=70))\n        george.state_id = self.state_fr\n        assert_fp(george, self.fr_b2b_zip100, \"FR-B2B with zip should have precedence over states\")\n        george.zip = 0\n        assert_fp(george, self.fr_b2b_state, \"FR-B2B with states should have precedence\")\n\n        # Dedicated position has max precedence\n        george.property_account_position_id = self.be_nat\n        assert_fp(george, self.be_nat, \"Forced position has max precedence\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_fiscal_position.py", "id": "3b140af35f418daf4f71e8c47ad44071", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_fiscal_position.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}