{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\nfrom odoo.addons import decimal_precision as dp\n\nSTATE = [\n    ('none', 'Non Member'),\n    ('canceled', 'Cancelled Member'),\n    ('old', 'Old Member'),\n    ('waiting', 'Waiting Member'),\n    ('invoiced', 'Invoiced Member'),\n    ('free', 'Free Member'),\n    ('paid', 'Paid Member'),\n]\n\n\nclass MembershipLine(models.Model):\n    _name = 'membership.membership_line'\n    _rec_name = 'partner'\n    _order = 'id desc'\n\n    partner = fields.Many2one('res.partner', string='Partner', ondelete='cascade', index=True)\n    membership_id = fields.Many2one('product.product', string=\"Membership\", required=True)\n    date_from = fields.Date(string='From', readonly=True)\n    date_to = fields.Date(string='To', readonly=True)\n    date_cancel = fields.Date(string='Cancel date')\n    date = fields.Date(string='Join Date',\n        help=\"Date on which member has joined the membership\")\n    member_price = fields.Float(string='Membership Fee',\n        digits=dp.get_precision('Product Price'), required=True,\n        help='Amount for the membership')\n    account_invoice_line = fields.Many2one('account.invoice.line', string='Account Invoice line', readonly=True, ondelete='cascade')\n    account_invoice_id = fields.Many2one('account.invoice', related='account_invoice_line.invoice_id', string='Invoice', readonly=True)\n    company_id = fields.Many2one('res.company', related='account_invoice_line.invoice_id.company_id', string=\"Company\", readonly=True, store=True)\n    state = fields.Selection(STATE, compute='_compute_state', string='Membership Status', store=True,\n        help=\"It indicates the membership status.\\n\"\n             \"-Non Member: A member who has not applied for any membership.\\n\"\n             \"-Cancelled Member: A member who has cancelled his membership.\\n\"\n             \"-Old Member: A member whose membership date has expired.\\n\"\n             \"-Waiting Member: A member who has applied for the membership and whose invoice is going to be created.\\n\"\n             \"-Invoiced Member: A member whose invoice has been created.\\n\"\n             \"-Paid Member: A member who has paid the membership amount.\")\n\n    @api.depends('account_invoice_line.invoice_id.state',\n                 'account_invoice_line.invoice_id.payment_ids',\n                 'account_invoice_line.invoice_id.payment_ids.invoice_ids.type')\n    def _compute_state(self):\n        \n        Invoice = self.env['account.invoice']\n        for line in self:\n            self._cr.execute('''\n            SELECT i.state, i.id FROM\n            account_invoice i\n            WHERE\n            i.id = (\n                SELECT l.invoice_id FROM\n                account_invoice_line l WHERE\n                l.id = (\n                    SELECT  ml.account_invoice_line FROM\n                    membership_membership_line ml WHERE\n                    ml.id = %s\n                    )\n                )\n            ''', (line.id,))\n            fetched = self._cr.fetchone()\n            if not fetched:\n                line.state = 'canceled'\n                continue\n            istate = fetched[0]\n            if istate == 'draft':\n                line.state = 'waiting'\n            elif istate == 'open':\n                line.state = 'invoiced'\n            elif istate == 'paid':\n                line.state = 'paid'\n                invoices = Invoice.browse(fetched[1]).payment_ids.mapped('invoice_ids')\n                if invoices.filtered(lambda invoice: invoice.type == 'out_refund'):\n                    line.state = 'canceled'\n            elif istate == 'cancel':\n                line.state = 'canceled'\n            else:\n                line.state = 'none'\n", "comments": "   compute state lines                      select state  id from             account invoice             where             id   (                 select l invoice id from                 account invoice line l where                 l id   (                     select  ml account invoice line from                     membership membership line ml where                     ml id                        )                 )                        coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\nfrom odoo.addons import decimal_precision as dp\n\nSTATE = [\n    ('none', 'Non Member'),\n    ('canceled', 'Cancelled Member'),\n    ('old', 'Old Member'),\n    ('waiting', 'Waiting Member'),\n    ('invoiced', 'Invoiced Member'),\n    ('free', 'Free Member'),\n    ('paid', 'Paid Member'),\n]\n\n\nclass MembershipLine(models.Model):\n    _name = 'membership.membership_line'\n    _rec_name = 'partner'\n    _order = 'id desc'\n\n    partner = fields.Many2one('res.partner', string='Partner', ondelete='cascade', index=True)\n    membership_id = fields.Many2one('product.product', string=\"Membership\", required=True)\n    date_from = fields.Date(string='From', readonly=True)\n    date_to = fields.Date(string='To', readonly=True)\n    date_cancel = fields.Date(string='Cancel date')\n    date = fields.Date(string='Join Date',\n        help=\"Date on which member has joined the membership\")\n    member_price = fields.Float(string='Membership Fee',\n        digits=dp.get_precision('Product Price'), required=True,\n        help='Amount for the membership')\n    account_invoice_line = fields.Many2one('account.invoice.line', string='Account Invoice line', readonly=True, ondelete='cascade')\n    account_invoice_id = fields.Many2one('account.invoice', related='account_invoice_line.invoice_id', string='Invoice', readonly=True)\n    company_id = fields.Many2one('res.company', related='account_invoice_line.invoice_id.company_id', string=\"Company\", readonly=True, store=True)\n    state = fields.Selection(STATE, compute='_compute_state', string='Membership Status', store=True,\n        help=\"It indicates the membership status.\\n\"\n             \"-Non Member: A member who has not applied for any membership.\\n\"\n             \"-Cancelled Member: A member who has cancelled his membership.\\n\"\n             \"-Old Member: A member whose membership date has expired.\\n\"\n             \"-Waiting Member: A member who has applied for the membership and whose invoice is going to be created.\\n\"\n             \"-Invoiced Member: A member whose invoice has been created.\\n\"\n             \"-Paid Member: A member who has paid the membership amount.\")\n\n    @api.depends('account_invoice_line.invoice_id.state',\n                 'account_invoice_line.invoice_id.payment_ids',\n                 'account_invoice_line.invoice_id.payment_ids.invoice_ids.type')\n    def _compute_state(self):\n        \"\"\"Compute the state lines \"\"\"\n        Invoice = self.env['account.invoice']\n        for line in self:\n            self._cr.execute('''\n            SELECT i.state, i.id FROM\n            account_invoice i\n            WHERE\n            i.id = (\n                SELECT l.invoice_id FROM\n                account_invoice_line l WHERE\n                l.id = (\n                    SELECT  ml.account_invoice_line FROM\n                    membership_membership_line ml WHERE\n                    ml.id = %s\n                    )\n                )\n            ''', (line.id,))\n            fetched = self._cr.fetchone()\n            if not fetched:\n                line.state = 'canceled'\n                continue\n            istate = fetched[0]\n            if istate == 'draft':\n                line.state = 'waiting'\n            elif istate == 'open':\n                line.state = 'invoiced'\n            elif istate == 'paid':\n                line.state = 'paid'\n                invoices = Invoice.browse(fetched[1]).payment_ids.mapped('invoice_ids')\n                if invoices.filtered(lambda invoice: invoice.type == 'out_refund'):\n                    line.state = 'canceled'\n            elif istate == 'cancel':\n                line.state = 'canceled'\n            else:\n                line.state = 'none'\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "membership.py", "id": "3e671ae19ba32509cd0fdd6c128970b1", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/membership/models/membership.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}