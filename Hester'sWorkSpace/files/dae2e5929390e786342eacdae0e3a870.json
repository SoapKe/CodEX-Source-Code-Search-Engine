{"author": "lra", "code": "import unittest\nimport os.path\n\nfrom mackup.constants import (ENGINE_DROPBOX,\n                              ENGINE_GDRIVE,\n                              ENGINE_COPY,\n                              ENGINE_ICLOUD,\n                              ENGINE_BOX,\n                              ENGINE_FS)\nfrom mackup.config import Config, ConfigError\n\n\nclass TestConfig(unittest.TestCase):\n\n    def setUp(self):\n        realpath = os.path.dirname(os.path.realpath(__file__))\n        os.environ['HOME'] = os.path.join(realpath, 'fixtures')\n\n    def test_config_no_config(self):\n        cfg = Config()\n\n        \n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set()\n\n    def test_config_empty(self):\n        cfg = Config('mackup-empty.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set()\n\n    def test_config_engine_dropbox(self):\n        cfg = Config('mackup-engine-dropbox.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'some_weirld_name'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/some_weirld_name'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set()\n\n    def test_config_engine_filesystem_absolute(self):\n        cfg = Config('mackup-engine-file_system-absolute.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_FS\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/some/absolute/folder'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'custom_folder'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/some/absolute/folder/custom_folder'\n\n        assert cfg.apps_to_ignore == set(['subversion', 'sequel-pro'])\n        assert cfg.apps_to_sync == set()\n\n    def test_config_engine_filesystem(self):\n        cfg = Config('mackup-engine-file_system.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_FS\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path.endswith(os.path.join(os.environ[u'HOME'],\n                                              u'some/relative/folder'))\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == os.path.join(os.environ[u'HOME'],\n                                            u'some/relative/folder',\n                                            u'Mackup')\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set(['sabnzbd', 'sublime-text-3', 'x11'])\n\n    def test_config_engine_google_drive(self):\n        cfg = Config('mackup-engine-google_drive.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_GDRIVE\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/Users/whatever/Google Drive'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath.endswith(u'/Google Drive/Mackup')\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set(['sublime-text-3', 'x11', 'sabnzbd'])\n\n    def test_config_engine_copy(self):\n        cfg = Config('mackup-engine-copy.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_COPY\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/Users/someuser/Copy'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath.endswith(u'/Copy/Mackup')\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set(['sublime-text-3', 'x11', 'sabnzbd'])\n\n    def test_config_engine_icloud(self):\n        cfg = Config('mackup-engine-icloud.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_ICLOUD\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == os.path.expanduser(\n            '~/Library/Mobile Documents/com~apple~CloudDocs/')\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath.endswith(u'/com~apple~CloudDocs/Mackup')\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set(['sublime-text-3', 'x11', 'sabnzbd'])\n\n    def test_config_engine_box(self):\n        cfg = Config('mackup-engine-box.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_BOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/Users/whatever/Box Sync'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'some_weirder_name'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/Users/whatever/Box Sync/some_weirder_name'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set()\n\n    def test_config_engine_filesystem_no_path(self):\n        with self.assertRaises(ConfigError):\n            Config('mackup-engine-file_system-no_path.cfg')\n\n    def test_config_engine_unknown(self):\n        with self.assertRaises(ConfigError):\n            Config('mackup-engine-unknown.cfg')\n\n    def test_config_apps_to_ignore(self):\n        cfg = Config('mackup-apps_to_ignore.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set()\n\n    def test_config_apps_to_sync(self):\n        cfg = Config('mackup-apps_to_sync.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set(['sabnzbd',\n                                        'sublime-text-3',\n                                        'x11'])\n\n    def test_config_apps_to_ignore_and_sync(self):\n        cfg = Config('mackup-apps_to_ignore_and_sync.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set(['sabnzbd',\n                                        'sublime-text-3',\n                                        'x11',\n                                        'vim'])\n\n    def test_config_old_config(self):\n        self.assertRaises(SystemExit, Config, 'mackup-old-config.cfg')\n", "comments": "  should default  empty configuration ", "content": "import unittest\nimport os.path\n\nfrom mackup.constants import (ENGINE_DROPBOX,\n                              ENGINE_GDRIVE,\n                              ENGINE_COPY,\n                              ENGINE_ICLOUD,\n                              ENGINE_BOX,\n                              ENGINE_FS)\nfrom mackup.config import Config, ConfigError\n\n\nclass TestConfig(unittest.TestCase):\n\n    def setUp(self):\n        realpath = os.path.dirname(os.path.realpath(__file__))\n        os.environ['HOME'] = os.path.join(realpath, 'fixtures')\n\n    def test_config_no_config(self):\n        cfg = Config()\n\n        # Should should do the same as the default, empty configuration\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set()\n\n    def test_config_empty(self):\n        cfg = Config('mackup-empty.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set()\n\n    def test_config_engine_dropbox(self):\n        cfg = Config('mackup-engine-dropbox.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'some_weirld_name'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/some_weirld_name'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set()\n\n    def test_config_engine_filesystem_absolute(self):\n        cfg = Config('mackup-engine-file_system-absolute.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_FS\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/some/absolute/folder'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'custom_folder'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/some/absolute/folder/custom_folder'\n\n        assert cfg.apps_to_ignore == set(['subversion', 'sequel-pro'])\n        assert cfg.apps_to_sync == set()\n\n    def test_config_engine_filesystem(self):\n        cfg = Config('mackup-engine-file_system.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_FS\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path.endswith(os.path.join(os.environ[u'HOME'],\n                                              u'some/relative/folder'))\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == os.path.join(os.environ[u'HOME'],\n                                            u'some/relative/folder',\n                                            u'Mackup')\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set(['sabnzbd', 'sublime-text-3', 'x11'])\n\n    def test_config_engine_google_drive(self):\n        cfg = Config('mackup-engine-google_drive.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_GDRIVE\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/Users/whatever/Google Drive'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath.endswith(u'/Google Drive/Mackup')\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set(['sublime-text-3', 'x11', 'sabnzbd'])\n\n    def test_config_engine_copy(self):\n        cfg = Config('mackup-engine-copy.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_COPY\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/Users/someuser/Copy'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath.endswith(u'/Copy/Mackup')\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set(['sublime-text-3', 'x11', 'sabnzbd'])\n\n    def test_config_engine_icloud(self):\n        cfg = Config('mackup-engine-icloud.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_ICLOUD\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == os.path.expanduser(\n            '~/Library/Mobile Documents/com~apple~CloudDocs/')\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath.endswith(u'/com~apple~CloudDocs/Mackup')\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set(['sublime-text-3', 'x11', 'sabnzbd'])\n\n    def test_config_engine_box(self):\n        cfg = Config('mackup-engine-box.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_BOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/Users/whatever/Box Sync'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'some_weirder_name'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/Users/whatever/Box Sync/some_weirder_name'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set()\n\n    def test_config_engine_filesystem_no_path(self):\n        with self.assertRaises(ConfigError):\n            Config('mackup-engine-file_system-no_path.cfg')\n\n    def test_config_engine_unknown(self):\n        with self.assertRaises(ConfigError):\n            Config('mackup-engine-unknown.cfg')\n\n    def test_config_apps_to_ignore(self):\n        cfg = Config('mackup-apps_to_ignore.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set()\n\n    def test_config_apps_to_sync(self):\n        cfg = Config('mackup-apps_to_sync.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set()\n        assert cfg.apps_to_sync == set(['sabnzbd',\n                                        'sublime-text-3',\n                                        'x11'])\n\n    def test_config_apps_to_ignore_and_sync(self):\n        cfg = Config('mackup-apps_to_ignore_and_sync.cfg')\n\n        assert isinstance(cfg.engine, str)\n        assert cfg.engine == ENGINE_DROPBOX\n\n        assert isinstance(cfg.path, str)\n        assert cfg.path == u'/home/some_user/Dropbox'\n\n        assert isinstance(cfg.directory, str)\n        assert cfg.directory == u'Mackup'\n\n        assert isinstance(cfg.fullpath, str)\n        assert cfg.fullpath == u'/home/some_user/Dropbox/Mackup'\n\n        assert cfg.apps_to_ignore == set(['subversion',\n                                          'sequel-pro',\n                                          'sabnzbd'])\n        assert cfg.apps_to_sync == set(['sabnzbd',\n                                        'sublime-text-3',\n                                        'x11',\n                                        'vim'])\n\n    def test_config_old_config(self):\n        self.assertRaises(SystemExit, Config, 'mackup-old-config.cfg')\n", "description": "Keep your application settings in sync (OS X/Linux)", "file_name": "config_tests.py", "id": "dae2e5929390e786342eacdae0e3a870", "language": "Python", "project_name": "mackup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/lra-mackup/lra-mackup-5609f25/tests/config_tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:12Z", "url": "https://github.com/lra/mackup", "wiki": false}