{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport base64\nimport json\nimport pytz\n\nfrom datetime import datetime\nfrom psycopg2 import IntegrityError\n\nfrom odoo import http\nfrom odoo.http import request\nfrom odoo.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT\nfrom odoo.tools.translate import _\nfrom odoo.exceptions import ValidationError\nfrom odoo.addons.base.ir.ir_qweb.fields import nl2br\n\n\nclass WebsiteForm(http.Controller):\n\n    \n    @http.route('/website_form/<string:model_name>', type='http', auth=\"public\", methods=['POST'], website=True)\n    def website_form(self, model_name, **kwargs):\n        model_record = request.env['ir.model'].sudo().search([('model', '=', model_name), ('website_form_access', '=', True)])\n        if not model_record:\n            return json.dumps(False)\n\n        try:\n            data = self.extract_data(model_record, request.params)\n        \n        except ValidationError as e:\n            \n            return json.dumps({'error_fields' : e.args[0]})\n\n        try:\n            id_record = self.insert_record(request, model_record, data['record'], data['custom'], data.get('meta'))\n            if id_record:\n                self.insert_attachment(model_record, id_record, data['attachments'])\n\n        \n        \n        ?\n        except IntegrityError:\n            return json.dumps(False)\n\n        request.session['form_builder_model_model'] = model_record.model\n        request.session['form_builder_model'] = model_record.name\n        request.session['form_builder_id'] = id_record\n\n        return json.dumps({'id': id_record})\n\n    \n\n    _custom_label = \"%s\\n___________\\n\\n\" % _(\"Custom infos\")  \n    _meta_label = \"%s\\n________\\n\\n\" % _(\"Metadata\")  \n\n    \n\n    def identity(self, field_label, field_input):\n        return field_input\n\n    def integer(self, field_label, field_input):\n        return int(field_input)\n\n    def floating(self, field_label, field_input):\n        return float(field_input)\n\n    def boolean(self, field_label, field_input):\n        return bool(field_input)\n\n    def date(self, field_label, field_input):\n        lang = request.env['ir.qweb.field'].user_lang()\n        return datetime.strptime(field_input, lang.date_format).strftime(DEFAULT_SERVER_DATE_FORMAT)\n\n    def datetime(self, field_label, field_input):\n        lang = request.env['ir.qweb.field'].user_lang()\n        strftime_format = (u\"%s %s\" % (lang.date_format, lang.time_format))\n        user_tz = pytz.timezone(request.context.get('tz') or request.env.user.tz or 'UTC')\n        dt = user_tz.localize(datetime.strptime(field_input, strftime_format)).astimezone(pytz.utc)\n        return dt.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n\n    def binary(self, field_label, field_input):\n        return base64.b64encode(field_input.read())\n\n    def one2many(self, field_label, field_input):\n        return [int(i) for i in field_input.split(',')]\n\n    def many2many(self, field_label, field_input, *args):\n        return [(args[0] if args else (6,0)) + (self.one2many(field_label, field_input),)]\n\n    _input_filters = {\n        'char': identity,\n        'text': identity,\n        'html': identity,\n        'date': date,\n        'datetime': datetime,\n        'many2one': integer,\n        'one2many': one2many,\n        'many2many':many2many,\n        'selection': identity,\n        'boolean': boolean,\n        'integer': integer,\n        'float': floating,\n        'binary': binary,\n    }\n\n\n    \n    def extract_data(self, model, values):\n\n        data = {\n            'record': {},        \n            'attachments': [],  \n            'custom': '',        \n        }\n\n        authorized_fields = model.sudo()._get_form_writable_fields()\n        error_fields = []\n\n\n        for field_name, field_value in values.items():\n            \n            if hasattr(field_value, 'filename'):\n                \n                field_name = field_name.rsplit('[', 1)[0]\n\n                \n                \n                if field_name in authorized_fields and authorized_fields[field_name]['type'] == 'binary':\n                    data['record'][field_name] = base64.b64encode(field_value.read())\n                else:\n                    field_value.field_name = field_name\n                    data['attachments'].append(field_value)\n\n            \n            elif field_name in authorized_fields:\n                try:\n                    input_filter = self._input_filters[authorized_fields[field_name]['type']]\n                    data['record'][field_name] = input_filter(self, field_name, field_value)\n                except ValueError:\n                    error_fields.append(field_name)\n\n            \n            elif field_name != 'context':\n                data['custom'] += u\"%s : %s\\n\" % (field_name, field_value)\n\n        \n        environ = request.httprequest.headers.environ\n        if(request.website.website_form_enable_metadata):\n            data['meta'] += \"%s : %s\\n%s : %s\\n%s : %s\\n%s : %s\\n\" % (\n                \"IP\"                , environ.get(\"REMOTE_ADDR\"),\n                \"USER_AGENT\"        , environ.get(\"HTTP_USER_AGENT\"),\n                \"ACCEPT_LANGUAGE\"   , environ.get(\"HTTP_ACCEPT_LANGUAGE\"),\n                \"REFERER\"           , environ.get(\"HTTP_REFERER\")\n            )\n\n        \n        \n        \n        # def website_form_input_filter(self, values):\n        #     values['name'] = '%s\\'s Application' % values['partner_name']\n        \n        dest_model = request.env[model.sudo().model]\n        if hasattr(dest_model, \"website_form_input_filter\"):\n            data['record'] = dest_model.website_form_input_filter(request, data['record'])\n\n        missing_required_fields = [label for label, field in authorized_fields.items() if field['required'] and not label in data['record']]\n        if any(error_fields):\n            raise ValidationError(error_fields + missing_required_fields)\n\n        return data\n\n    def insert_record(self, request, model, values, custom, meta=None):\n        model_name = model.sudo().model\n        record = request.env[model_name].sudo().with_context(mail_create_nosubscribe=True).create(values)\n\n        if custom or meta:\n            default_field = model.website_form_default_field_id\n            default_field_data = values.get(default_field.name, '')\n            custom_content = (default_field_data + \"\\n\\n\" if default_field_data else '') \\\n                           + (self._custom_label + custom + \"\\n\\n\" if custom else '') \\\n                           + (self._meta_label + meta if meta else '')\n\n            \n            \n            if default_field.name:\n                if default_field.ttype == 'html' or model_name == 'mail.mail':\n                    custom_content = nl2br(custom_content)\n                record.update({default_field.name: custom_content})\n            else:\n                values = {\n                    'body': nl2br(custom_content),\n                    'model': model_name,\n                    'message_type': 'comment',\n                    'no_auto_thread': False,\n                    'res_id': record.id,\n                }\n                mail_id = request.env['mail.message'].sudo().create(values)\n\n        return record.id\n\n    \n    def insert_attachment(self, model, id_record, files):\n        orphan_attachment_ids = []\n        model_name = model.sudo().model\n        record = model.env[model_name].browse(id_record)\n        authorized_fields = model.sudo()._get_form_writable_fields()\n        for file in files:\n            custom_field = file.field_name not in authorized_fields\n            attachment_value = {\n                'name': file.field_name if custom_field else file.filename,\n                'datas': base64.encodestring(file.read()),\n                'datas_fname': file.filename,\n                'res_model': model_name,\n                'res_id': record.id,\n            }\n            attachment_id = request.env['ir.attachment'].sudo().create(attachment_value)\n            if attachment_id and not custom_field:\n                record.sudo()[file.field_name] = [(4, attachment_id.id)]\n            else:\n                orphan_attachment_ids.append(attachment_id.id)\n\n        \n        \n        if orphan_attachment_ids:\n            if model_name != 'mail.mail':\n                values = {\n                    'body': _('<p>Attached files : </p>'),\n                    'model': model_name,\n                    'message_type': 'comment',\n                    'no_auto_thread': False,\n                    'res_id': id_record,\n                    'attachment_ids': [(6, 0, orphan_attachment_ids)],\n                }\n                mail_id = request.env['mail.message'].sudo().create(values)\n        else:\n            \n            \n            for attachment_id_id in orphan_attachment_ids:\n                record.attachment_ids = [(4, attachment_id_id)]\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     check insert values form model  model     if encounter issue extracting data    i find cleaner way pass data exception    some fields additional sql constraints check generically    ex  crm lead probability float 0 1    todo  how get name erroneous field      constants string make custom info metadata readable text field    title custom fields    title meta data    dict dynamically called filters following type field fault tolerent    extract data sent form sort several properties    values create record    attached files    custom fields values    if value field file    undo file upload field name indexing    if actual binary field  convert input file    if  use attachments instead    if known field    if custom field    add metadata enabled    this function defined model provide    model specific filtering record values    example     def website form input filter(self  values)         values  name        application    values  partner name          return values    if default field configured model  use     if  put custom data message instead    link files attached form    if attachments match field model     create mail message link record    if model mail mail choice    attach custom binary field files attachment ids field  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport base64\nimport json\nimport pytz\n\nfrom datetime import datetime\nfrom psycopg2 import IntegrityError\n\nfrom odoo import http\nfrom odoo.http import request\nfrom odoo.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT\nfrom odoo.tools.translate import _\nfrom odoo.exceptions import ValidationError\nfrom odoo.addons.base.ir.ir_qweb.fields import nl2br\n\n\nclass WebsiteForm(http.Controller):\n\n    # Check and insert values from the form on the model <model>\n    @http.route('/website_form/<string:model_name>', type='http', auth=\"public\", methods=['POST'], website=True)\n    def website_form(self, model_name, **kwargs):\n        model_record = request.env['ir.model'].sudo().search([('model', '=', model_name), ('website_form_access', '=', True)])\n        if not model_record:\n            return json.dumps(False)\n\n        try:\n            data = self.extract_data(model_record, request.params)\n        # If we encounter an issue while extracting data\n        except ValidationError as e:\n            # I couldn't find a cleaner way to pass data to an exception\n            return json.dumps({'error_fields' : e.args[0]})\n\n        try:\n            id_record = self.insert_record(request, model_record, data['record'], data['custom'], data.get('meta'))\n            if id_record:\n                self.insert_attachment(model_record, id_record, data['attachments'])\n\n        # Some fields have additional SQL constraints that we can't check generically\n        # Ex: crm.lead.probability which is a float between 0 and 1\n        # TODO: How to get the name of the erroneous field ?\n        except IntegrityError:\n            return json.dumps(False)\n\n        request.session['form_builder_model_model'] = model_record.model\n        request.session['form_builder_model'] = model_record.name\n        request.session['form_builder_id'] = id_record\n\n        return json.dumps({'id': id_record})\n\n    # Constants string to make custom info and metadata readable on a text field\n\n    _custom_label = \"%s\\n___________\\n\\n\" % _(\"Custom infos\")  # Title for custom fields\n    _meta_label = \"%s\\n________\\n\\n\" % _(\"Metadata\")  # Title for meta data\n\n    # Dict of dynamically called filters following type of field to be fault tolerent\n\n    def identity(self, field_label, field_input):\n        return field_input\n\n    def integer(self, field_label, field_input):\n        return int(field_input)\n\n    def floating(self, field_label, field_input):\n        return float(field_input)\n\n    def boolean(self, field_label, field_input):\n        return bool(field_input)\n\n    def date(self, field_label, field_input):\n        lang = request.env['ir.qweb.field'].user_lang()\n        return datetime.strptime(field_input, lang.date_format).strftime(DEFAULT_SERVER_DATE_FORMAT)\n\n    def datetime(self, field_label, field_input):\n        lang = request.env['ir.qweb.field'].user_lang()\n        strftime_format = (u\"%s %s\" % (lang.date_format, lang.time_format))\n        user_tz = pytz.timezone(request.context.get('tz') or request.env.user.tz or 'UTC')\n        dt = user_tz.localize(datetime.strptime(field_input, strftime_format)).astimezone(pytz.utc)\n        return dt.strftime(DEFAULT_SERVER_DATETIME_FORMAT)\n\n    def binary(self, field_label, field_input):\n        return base64.b64encode(field_input.read())\n\n    def one2many(self, field_label, field_input):\n        return [int(i) for i in field_input.split(',')]\n\n    def many2many(self, field_label, field_input, *args):\n        return [(args[0] if args else (6,0)) + (self.one2many(field_label, field_input),)]\n\n    _input_filters = {\n        'char': identity,\n        'text': identity,\n        'html': identity,\n        'date': date,\n        'datetime': datetime,\n        'many2one': integer,\n        'one2many': one2many,\n        'many2many':many2many,\n        'selection': identity,\n        'boolean': boolean,\n        'integer': integer,\n        'float': floating,\n        'binary': binary,\n    }\n\n\n    # Extract all data sent by the form and sort its on several properties\n    def extract_data(self, model, values):\n\n        data = {\n            'record': {},        # Values to create record\n            'attachments': [],  # Attached files\n            'custom': '',        # Custom fields values\n        }\n\n        authorized_fields = model.sudo()._get_form_writable_fields()\n        error_fields = []\n\n\n        for field_name, field_value in values.items():\n            # If the value of the field if a file\n            if hasattr(field_value, 'filename'):\n                # Undo file upload field name indexing\n                field_name = field_name.rsplit('[', 1)[0]\n\n                # If it's an actual binary field, convert the input file\n                # If it's not, we'll use attachments instead\n                if field_name in authorized_fields and authorized_fields[field_name]['type'] == 'binary':\n                    data['record'][field_name] = base64.b64encode(field_value.read())\n                else:\n                    field_value.field_name = field_name\n                    data['attachments'].append(field_value)\n\n            # If it's a known field\n            elif field_name in authorized_fields:\n                try:\n                    input_filter = self._input_filters[authorized_fields[field_name]['type']]\n                    data['record'][field_name] = input_filter(self, field_name, field_value)\n                except ValueError:\n                    error_fields.append(field_name)\n\n            # If it's a custom field\n            elif field_name != 'context':\n                data['custom'] += u\"%s : %s\\n\" % (field_name, field_value)\n\n        # Add metadata if enabled\n        environ = request.httprequest.headers.environ\n        if(request.website.website_form_enable_metadata):\n            data['meta'] += \"%s : %s\\n%s : %s\\n%s : %s\\n%s : %s\\n\" % (\n                \"IP\"                , environ.get(\"REMOTE_ADDR\"),\n                \"USER_AGENT\"        , environ.get(\"HTTP_USER_AGENT\"),\n                \"ACCEPT_LANGUAGE\"   , environ.get(\"HTTP_ACCEPT_LANGUAGE\"),\n                \"REFERER\"           , environ.get(\"HTTP_REFERER\")\n            )\n\n        # This function can be defined on any model to provide\n        # a model-specific filtering of the record values\n        # Example:\n        # def website_form_input_filter(self, values):\n        #     values['name'] = '%s\\'s Application' % values['partner_name']\n        #     return values\n        dest_model = request.env[model.sudo().model]\n        if hasattr(dest_model, \"website_form_input_filter\"):\n            data['record'] = dest_model.website_form_input_filter(request, data['record'])\n\n        missing_required_fields = [label for label, field in authorized_fields.items() if field['required'] and not label in data['record']]\n        if any(error_fields):\n            raise ValidationError(error_fields + missing_required_fields)\n\n        return data\n\n    def insert_record(self, request, model, values, custom, meta=None):\n        model_name = model.sudo().model\n        record = request.env[model_name].sudo().with_context(mail_create_nosubscribe=True).create(values)\n\n        if custom or meta:\n            default_field = model.website_form_default_field_id\n            default_field_data = values.get(default_field.name, '')\n            custom_content = (default_field_data + \"\\n\\n\" if default_field_data else '') \\\n                           + (self._custom_label + custom + \"\\n\\n\" if custom else '') \\\n                           + (self._meta_label + meta if meta else '')\n\n            # If there is a default field configured for this model, use it.\n            # If there isn't, put the custom data in a message instead\n            if default_field.name:\n                if default_field.ttype == 'html' or model_name == 'mail.mail':\n                    custom_content = nl2br(custom_content)\n                record.update({default_field.name: custom_content})\n            else:\n                values = {\n                    'body': nl2br(custom_content),\n                    'model': model_name,\n                    'message_type': 'comment',\n                    'no_auto_thread': False,\n                    'res_id': record.id,\n                }\n                mail_id = request.env['mail.message'].sudo().create(values)\n\n        return record.id\n\n    # Link all files attached on the form\n    def insert_attachment(self, model, id_record, files):\n        orphan_attachment_ids = []\n        model_name = model.sudo().model\n        record = model.env[model_name].browse(id_record)\n        authorized_fields = model.sudo()._get_form_writable_fields()\n        for file in files:\n            custom_field = file.field_name not in authorized_fields\n            attachment_value = {\n                'name': file.field_name if custom_field else file.filename,\n                'datas': base64.encodestring(file.read()),\n                'datas_fname': file.filename,\n                'res_model': model_name,\n                'res_id': record.id,\n            }\n            attachment_id = request.env['ir.attachment'].sudo().create(attachment_value)\n            if attachment_id and not custom_field:\n                record.sudo()[file.field_name] = [(4, attachment_id.id)]\n            else:\n                orphan_attachment_ids.append(attachment_id.id)\n\n        # If some attachments didn't match a field on the model,\n        # we create a mail.message to link them to the record\n        if orphan_attachment_ids:\n            if model_name != 'mail.mail':\n                values = {\n                    'body': _('<p>Attached files : </p>'),\n                    'model': model_name,\n                    'message_type': 'comment',\n                    'no_auto_thread': False,\n                    'res_id': id_record,\n                    'attachment_ids': [(6, 0, orphan_attachment_ids)],\n                }\n                mail_id = request.env['mail.message'].sudo().create(values)\n        else:\n            # If the model is mail.mail then we have no other choice but to\n            # attach the custom binary field files on the attachment_ids field.\n            for attachment_id_id in orphan_attachment_ids:\n                record.attachment_ids = [(4, attachment_id_id)]\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "02ed5441b9fa52f6e94c9c8a62468cec", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_form/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}