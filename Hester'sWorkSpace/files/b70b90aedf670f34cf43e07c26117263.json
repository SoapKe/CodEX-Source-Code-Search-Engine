{"author": "tflearn", "code": "'''\n    This file contains test cases for tflearn\n'''\n\nimport tensorflow as tf\nimport tflearn\nimport unittest\n\nclass TestActivations(unittest.TestCase):\n    '''\n        This class contains test cases for the functions in tflearn/activations.py\n    '''\n    PLACES = 4 \n\n    def test_linear(self):\n        f = tflearn.linear\n\n        \n        x = tf.placeholder(tf.float32, shape=())\n        self.assertEqual(f(x), x)\n\n        \n        x = tf.placeholder(tf.int64, shape=())\n        self.assertEqual(f(x), x)\n\n    def test_tanh(self):\n        f = tflearn.tanh\n        x = tf.placeholder(tf.float32, shape=())\n        \n        with tf.Session() as sess:\n            \n            self.assertEqual(sess.run(f(x), feed_dict={x:0}), 0)\n\n            \n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:0.5}),\n                0.4621, places=TestActivations.PLACES)\n\n            \n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:-0.25}),\n                -0.2449, places=TestActivations.PLACES)\n\n    def test_leaky_relu(self):\n        f = lambda x: tflearn.leaky_relu(x, alpha=0.2)\n        x = tf.placeholder(tf.float32, shape=())\n\n        with tf.Session() as sess:\n            \n            self.assertEqual(sess.run(f(x), feed_dict={x:0}), 0)\n\n            \n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:1}),\n                1, places=TestActivations.PLACES)\n\n            \n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:-1}),\n                -0.2, places=TestActivations.PLACES)\n\n            \n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:-5}),\n                -1, places=TestActivations.PLACES)\n\n    def test_apply_activation(self):\n        lrelu_02 = lambda x: tflearn.leaky_relu(x, alpha=0.2)\n        x = tf.constant(-0.25, tf.float32)\n\n        with tf.Session() as sess:\n            : 'linear'\n            self.assertEqual(\n                sess.run(tflearn.activation(x, 'linear')),\n                -0.25)\n\n            : 'relu'\n            self.assertEqual(\n                sess.run(tflearn.activation(x, 'relu')),\n                0)\n\n            : 'leaky_relu'\n            self.assertAlmostEqual(\n                sess.run(tflearn.activation(x, 'leaky_relu')),\n                -0.025, places=TestActivations.PLACES)\n\n            : 'tanh'\n            self.assertAlmostEqual(\n                sess.run(tflearn.activation(x, 'tanh')),\n                -0.2449, places=TestActivations.PLACES)\n\n            # Case 5: lrelu_02 (callable)\n            self.assertAlmostEqual(\n                sess.run(tflearn.activation(x, lrelu_02)),\n                -0.05, places=TestActivations.PLACES)\n\nif __name__ == \"__main__\":\n    unittest.main()", "comments": "        this file contains test cases tflearn      import tensorflow tf import tflearn import unittest  class testactivations(unittest testcase)                  this class contains test cases functions tflearn activations py            number places match testing floating point values    case 1    case 2    case 1    case 2    case 3    case 1    case 2    case 3    case 4    case 1   linear     case 2   relu     case 3   leaky relu     case 4   tanh     case 5  lrelu 02 (callable) ", "content": "'''\n    This file contains test cases for tflearn\n'''\n\nimport tensorflow as tf\nimport tflearn\nimport unittest\n\nclass TestActivations(unittest.TestCase):\n    '''\n        This class contains test cases for the functions in tflearn/activations.py\n    '''\n    PLACES = 4 # Number of places to match when testing floating point values\n\n    def test_linear(self):\n        f = tflearn.linear\n\n        # Case 1\n        x = tf.placeholder(tf.float32, shape=())\n        self.assertEqual(f(x), x)\n\n        # Case 2\n        x = tf.placeholder(tf.int64, shape=())\n        self.assertEqual(f(x), x)\n\n    def test_tanh(self):\n        f = tflearn.tanh\n        x = tf.placeholder(tf.float32, shape=())\n        \n        with tf.Session() as sess:\n            # Case 1\n            self.assertEqual(sess.run(f(x), feed_dict={x:0}), 0)\n\n            # Case 2\n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:0.5}),\n                0.4621, places=TestActivations.PLACES)\n\n            # Case 3\n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:-0.25}),\n                -0.2449, places=TestActivations.PLACES)\n\n    def test_leaky_relu(self):\n        f = lambda x: tflearn.leaky_relu(x, alpha=0.2)\n        x = tf.placeholder(tf.float32, shape=())\n\n        with tf.Session() as sess:\n            # Case 1\n            self.assertEqual(sess.run(f(x), feed_dict={x:0}), 0)\n\n            # Case 2\n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:1}),\n                1, places=TestActivations.PLACES)\n\n            # Case 3\n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:-1}),\n                -0.2, places=TestActivations.PLACES)\n\n            # Case 4\n            self.assertAlmostEqual(sess.run(f(x), feed_dict={x:-5}),\n                -1, places=TestActivations.PLACES)\n\n    def test_apply_activation(self):\n        lrelu_02 = lambda x: tflearn.leaky_relu(x, alpha=0.2)\n        x = tf.constant(-0.25, tf.float32)\n\n        with tf.Session() as sess:\n            # Case 1: 'linear'\n            self.assertEqual(\n                sess.run(tflearn.activation(x, 'linear')),\n                -0.25)\n\n            # Case 2: 'relu'\n            self.assertEqual(\n                sess.run(tflearn.activation(x, 'relu')),\n                0)\n\n            # Case 3: 'leaky_relu'\n            self.assertAlmostEqual(\n                sess.run(tflearn.activation(x, 'leaky_relu')),\n                -0.025, places=TestActivations.PLACES)\n\n            # Case 4: 'tanh'\n            self.assertAlmostEqual(\n                sess.run(tflearn.activation(x, 'tanh')),\n                -0.2449, places=TestActivations.PLACES)\n\n            # Case 5: lrelu_02 (callable)\n            self.assertAlmostEqual(\n                sess.run(tflearn.activation(x, lrelu_02)),\n                -0.05, places=TestActivations.PLACES)\n\nif __name__ == \"__main__\":\n    unittest.main()", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "test.py", "id": "b70b90aedf670f34cf43e07c26117263", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/tests/test.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}