{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    str_to_int,\n    unified_strdate,\n)\n\n\nclass RedTubeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?redtube\\.com/|embed\\.redtube\\.com/\\?.*?\\bid=)(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.redtube.com/66418',\n        'md5': 'fc08071233725f26b8f014dba9590005',\n        'info_dict': {\n            'id': '66418',\n            'ext': 'mp4',\n            'title': 'Sucked on a toilet',\n            'upload_date': '20110811',\n            'duration': 596,\n            'view_count': int,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://embed.redtube.com/?bgcolor=000000&id=1443286',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+?src=[\"\\'](?P<url>(?:https?:)?//embed\\.redtube\\.com/\\?.*?\\bid=\\d+)',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            'http://www.redtube.com/%s' % video_id, video_id)\n\n        if any(s in webpage for s in ['video-deleted-info', '>This video has been removed']):\n            raise ExtractorError('Video %s has been removed' % video_id, expected=True)\n\n        title = self._html_search_regex(\n            (r'<h(\\d)[^>]+class=\"(?:video_title_text|videoTitle)[^\"]*\">(?P<title>(?:(?!\\1).)+)</h\\1>',\n             r'(?:videoTitle|title)\\s*:\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',),\n            webpage, 'title', group='title',\n            default=None) or self._og_search_title(webpage)\n\n        formats = []\n        sources = self._parse_json(\n            self._search_regex(\n                r'sources\\s*:\\s*({.+?})', webpage, 'source', default='{}'),\n            video_id, fatal=False)\n        if sources and isinstance(sources, dict):\n            for format_id, format_url in sources.items():\n                if format_url:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': format_id,\n                        'height': int_or_none(format_id),\n                    })\n        medias = self._parse_json(\n            self._search_regex(\n                r'mediaDefinition\\s*:\\s*(\\[.+?\\])', webpage,\n                'media definitions', default='{}'),\n            video_id, fatal=False)\n        if medias and isinstance(medias, list):\n            for media in medias:\n                format_url = media.get('videoUrl')\n                if not format_url or not isinstance(format_url, compat_str):\n                    continue\n                format_id = media.get('quality')\n                formats.append({\n                    'url': format_url,\n                    'format_id': format_id,\n                    'height': int_or_none(format_id),\n                })\n        if not formats:\n            video_url = self._html_search_regex(\n                r'<source src=\"(.+?)\" type=\"video/mp4\">', webpage, 'video URL')\n            formats.append({'url': video_url})\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'<span[^>]+>ADDED ([^<]+)<',\n            webpage, 'upload date', fatal=False))\n        duration = int_or_none(self._og_search_property(\n            'video:duration', webpage, default=None) or self._search_regex(\n                r'videoDuration\\s*:\\s*(\\d+)', webpage, 'duration', default=None))\n        view_count = str_to_int(self._search_regex(\n            (r'<div[^>]*>Views</div>\\s*<div[^>]*>\\s*([\\d,.]+)',\n             r'<span[^>]*>VIEWS</span>\\s*</td>\\s*<td>\\s*([\\d,.]+)'),\n            webpage, 'view count', fatal=False))\n\n        \n        \n        age_limit = 18\n\n        return {\n            'id': video_id,\n            'ext': 'mp4',\n            'title': title,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'duration': duration,\n            'view_count': view_count,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "comments": "# No self-labeling, but they describe themselves as\n# \"Home of Videos Porno\"\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    str_to_int,\n    unified_strdate,\n)\n\n\nclass RedTubeIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www\\.)?redtube\\.com/|embed\\.redtube\\.com/\\?.*?\\bid=)(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.redtube.com/66418',\n        'md5': 'fc08071233725f26b8f014dba9590005',\n        'info_dict': {\n            'id': '66418',\n            'ext': 'mp4',\n            'title': 'Sucked on a toilet',\n            'upload_date': '20110811',\n            'duration': 596,\n            'view_count': int,\n            'age_limit': 18,\n        }\n    }, {\n        'url': 'http://embed.redtube.com/?bgcolor=000000&id=1443286',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe[^>]+?src=[\"\\'](?P<url>(?:https?:)?//embed\\.redtube\\.com/\\?.*?\\bid=\\d+)',\n            webpage)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(\n            'http://www.redtube.com/%s' % video_id, video_id)\n\n        if any(s in webpage for s in ['video-deleted-info', '>This video has been removed']):\n            raise ExtractorError('Video %s has been removed' % video_id, expected=True)\n\n        title = self._html_search_regex(\n            (r'<h(\\d)[^>]+class=\"(?:video_title_text|videoTitle)[^\"]*\">(?P<title>(?:(?!\\1).)+)</h\\1>',\n             r'(?:videoTitle|title)\\s*:\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',),\n            webpage, 'title', group='title',\n            default=None) or self._og_search_title(webpage)\n\n        formats = []\n        sources = self._parse_json(\n            self._search_regex(\n                r'sources\\s*:\\s*({.+?})', webpage, 'source', default='{}'),\n            video_id, fatal=False)\n        if sources and isinstance(sources, dict):\n            for format_id, format_url in sources.items():\n                if format_url:\n                    formats.append({\n                        'url': format_url,\n                        'format_id': format_id,\n                        'height': int_or_none(format_id),\n                    })\n        medias = self._parse_json(\n            self._search_regex(\n                r'mediaDefinition\\s*:\\s*(\\[.+?\\])', webpage,\n                'media definitions', default='{}'),\n            video_id, fatal=False)\n        if medias and isinstance(medias, list):\n            for media in medias:\n                format_url = media.get('videoUrl')\n                if not format_url or not isinstance(format_url, compat_str):\n                    continue\n                format_id = media.get('quality')\n                formats.append({\n                    'url': format_url,\n                    'format_id': format_id,\n                    'height': int_or_none(format_id),\n                })\n        if not formats:\n            video_url = self._html_search_regex(\n                r'<source src=\"(.+?)\" type=\"video/mp4\">', webpage, 'video URL')\n            formats.append({'url': video_url})\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'<span[^>]+>ADDED ([^<]+)<',\n            webpage, 'upload date', fatal=False))\n        duration = int_or_none(self._og_search_property(\n            'video:duration', webpage, default=None) or self._search_regex(\n                r'videoDuration\\s*:\\s*(\\d+)', webpage, 'duration', default=None))\n        view_count = str_to_int(self._search_regex(\n            (r'<div[^>]*>Views</div>\\s*<div[^>]*>\\s*([\\d,.]+)',\n             r'<span[^>]*>VIEWS</span>\\s*</td>\\s*<td>\\s*([\\d,.]+)'),\n            webpage, 'view count', fatal=False))\n\n        # No self-labeling, but they describe themselves as\n        # \"Home of Videos Porno\"\n        age_limit = 18\n\n        return {\n            'id': video_id,\n            'ext': 'mp4',\n            'title': title,\n            'thumbnail': thumbnail,\n            'upload_date': upload_date,\n            'duration': duration,\n            'view_count': view_count,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "redtube.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/redtube.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}