{"author": "getredash", "code": "from tests import BaseTestCase\n\nfrom redash.models import AccessPermission\nfrom redash.permissions import ACCESS_TYPE_MODIFY\n\n\nclass TestObjectPermissionsListGet(BaseTestCase):\n    def test_returns_empty_list_when_no_permissions(self):\n        query = self.factory.create_query()\n        user = self.factory.user\n        rv = self.make_request('get', '/api/queries/{}/acl'.format(query.id), user=user)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual({}, rv.json)\n\n    def test_returns_permissions(self):\n        query = self.factory.create_query()\n        user = self.factory.user\n\n        AccessPermission.grant(obj=query, access_type=ACCESS_TYPE_MODIFY,\n                               grantor=self.factory.user, grantee=self.factory.user)\n\n        rv = self.make_request('get', '/api/queries/{}/acl'.format(query.id), user=user)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertIn('modify', rv.json)\n        self.assertEqual(user.id, rv.json['modify'][0]['id'])\n\n    def test_returns_404_for_outside_of_organization_users(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user(org=self.factory.create_org())\n        rv = self.make_request('get', '/api/queries/{}/acl'.format(query.id), user=user)\n\n        self.assertEqual(rv.status_code, 404)\n\n\nclass TestObjectPermissionsListPost(BaseTestCase):\n    def test_creates_permission_if_the_user_is_an_owner(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=query.user, data=data)\n\n        self.assertEqual(200, rv.status_code)\n        self.assertTrue(AccessPermission.exists(query, ACCESS_TYPE_MODIFY, other_user))\n\n    def test_returns_403_if_the_user_isnt_owner(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=other_user, data=data)\n        self.assertEqual(403, rv.status_code)\n\n    def test_returns_400_if_the_grantee_isnt_from_organization(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user(org=self.factory.create_org())\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=query.user, data=data)\n        self.assertEqual(400, rv.status_code)\n\n    def test_returns_404_if_the_user_from_different_org(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user(org=self.factory.create_org())\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=other_user, data=data)\n        self.assertEqual(404, rv.status_code)\n\n    def test_accepts_only_correct_access_types(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': 'random string',\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=query.user, data=data)\n\n        self.assertEqual(400, rv.status_code)\n\n\nclass TestObjectPermissionsListDelete(BaseTestCase):\n    def test_removes_permission(self):\n        query = self.factory.create_query()\n        user = self.factory.user\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        AccessPermission.grant(obj=query, access_type=ACCESS_TYPE_MODIFY, grantor=self.factory.user, grantee=other_user)\n\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=user, data=data)\n\n        self.assertEqual(rv.status_code, 200)\n\n        self.assertFalse(AccessPermission.exists(query, ACCESS_TYPE_MODIFY, other_user))\n\n    def test_removes_permission_created_by_another_user(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        AccessPermission.grant(obj=query, access_type=ACCESS_TYPE_MODIFY, grantor=self.factory.user, grantee=other_user)\n\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=self.factory.create_admin(),\n                               data=data)\n\n        self.assertEqual(rv.status_code, 200)\n\n        self.assertFalse(AccessPermission.exists(query, ACCESS_TYPE_MODIFY, other_user))\n\n    def test_returns_404_for_outside_of_organization_users(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user(org=self.factory.create_org())\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': user.id\n        }\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=user, data=data)\n\n        self.assertEqual(rv.status_code, 404)\n\n    def test_returns_403_for_non_owner(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': user.id\n        }\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=user, data=data)\n\n        self.assertEqual(rv.status_code, 403)\n\n    def test_returns_200_even_if_there_is_no_permission(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': user.id\n        }\n\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=query.user, data=data)\n\n        self.assertEqual(rv.status_code, 200)\n\n\nclass TestCheckPermissionsGet(BaseTestCase):\n    def test_returns_true_for_existing_permission(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        AccessPermission.grant(obj=query, access_type=ACCESS_TYPE_MODIFY, grantor=self.factory.user, grantee=other_user)\n\n        rv = self.make_request('get', '/api/queries/{}/acl/{}'.format(query.id, ACCESS_TYPE_MODIFY), user=other_user)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(True, rv.json['response'])\n\n    def test_returns_false_for_existing_permission(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        rv = self.make_request('get', '/api/queries/{}/acl/{}'.format(query.id, ACCESS_TYPE_MODIFY), user=other_user)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(False, rv.json['response'])\n\n    def test_returns_404_for_outside_of_org_users(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user(org=self.factory.create_org())\n\n        rv = self.make_request('get', '/api/queries/{}/acl/{}'.format(query.id, ACCESS_TYPE_MODIFY), user=other_user)\n\n        self.assertEqual(rv.status_code, 404)\n", "comments": "", "content": "from tests import BaseTestCase\n\nfrom redash.models import AccessPermission\nfrom redash.permissions import ACCESS_TYPE_MODIFY\n\n\nclass TestObjectPermissionsListGet(BaseTestCase):\n    def test_returns_empty_list_when_no_permissions(self):\n        query = self.factory.create_query()\n        user = self.factory.user\n        rv = self.make_request('get', '/api/queries/{}/acl'.format(query.id), user=user)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual({}, rv.json)\n\n    def test_returns_permissions(self):\n        query = self.factory.create_query()\n        user = self.factory.user\n\n        AccessPermission.grant(obj=query, access_type=ACCESS_TYPE_MODIFY,\n                               grantor=self.factory.user, grantee=self.factory.user)\n\n        rv = self.make_request('get', '/api/queries/{}/acl'.format(query.id), user=user)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertIn('modify', rv.json)\n        self.assertEqual(user.id, rv.json['modify'][0]['id'])\n\n    def test_returns_404_for_outside_of_organization_users(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user(org=self.factory.create_org())\n        rv = self.make_request('get', '/api/queries/{}/acl'.format(query.id), user=user)\n\n        self.assertEqual(rv.status_code, 404)\n\n\nclass TestObjectPermissionsListPost(BaseTestCase):\n    def test_creates_permission_if_the_user_is_an_owner(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=query.user, data=data)\n\n        self.assertEqual(200, rv.status_code)\n        self.assertTrue(AccessPermission.exists(query, ACCESS_TYPE_MODIFY, other_user))\n\n    def test_returns_403_if_the_user_isnt_owner(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=other_user, data=data)\n        self.assertEqual(403, rv.status_code)\n\n    def test_returns_400_if_the_grantee_isnt_from_organization(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user(org=self.factory.create_org())\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=query.user, data=data)\n        self.assertEqual(400, rv.status_code)\n\n    def test_returns_404_if_the_user_from_different_org(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user(org=self.factory.create_org())\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=other_user, data=data)\n        self.assertEqual(404, rv.status_code)\n\n    def test_accepts_only_correct_access_types(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': 'random string',\n            'user_id': other_user.id\n        }\n\n        rv = self.make_request('post', '/api/queries/{}/acl'.format(query.id), user=query.user, data=data)\n\n        self.assertEqual(400, rv.status_code)\n\n\nclass TestObjectPermissionsListDelete(BaseTestCase):\n    def test_removes_permission(self):\n        query = self.factory.create_query()\n        user = self.factory.user\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        AccessPermission.grant(obj=query, access_type=ACCESS_TYPE_MODIFY, grantor=self.factory.user, grantee=other_user)\n\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=user, data=data)\n\n        self.assertEqual(rv.status_code, 200)\n\n        self.assertFalse(AccessPermission.exists(query, ACCESS_TYPE_MODIFY, other_user))\n\n    def test_removes_permission_created_by_another_user(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': other_user.id\n        }\n\n        AccessPermission.grant(obj=query, access_type=ACCESS_TYPE_MODIFY, grantor=self.factory.user, grantee=other_user)\n\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=self.factory.create_admin(),\n                               data=data)\n\n        self.assertEqual(rv.status_code, 200)\n\n        self.assertFalse(AccessPermission.exists(query, ACCESS_TYPE_MODIFY, other_user))\n\n    def test_returns_404_for_outside_of_organization_users(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user(org=self.factory.create_org())\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': user.id\n        }\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=user, data=data)\n\n        self.assertEqual(rv.status_code, 404)\n\n    def test_returns_403_for_non_owner(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': user.id\n        }\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=user, data=data)\n\n        self.assertEqual(rv.status_code, 403)\n\n    def test_returns_200_even_if_there_is_no_permission(self):\n        query = self.factory.create_query()\n        user = self.factory.create_user()\n\n        data = {\n            'access_type': ACCESS_TYPE_MODIFY,\n            'user_id': user.id\n        }\n\n        rv = self.make_request('delete', '/api/queries/{}/acl'.format(query.id), user=query.user, data=data)\n\n        self.assertEqual(rv.status_code, 200)\n\n\nclass TestCheckPermissionsGet(BaseTestCase):\n    def test_returns_true_for_existing_permission(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        AccessPermission.grant(obj=query, access_type=ACCESS_TYPE_MODIFY, grantor=self.factory.user, grantee=other_user)\n\n        rv = self.make_request('get', '/api/queries/{}/acl/{}'.format(query.id, ACCESS_TYPE_MODIFY), user=other_user)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(True, rv.json['response'])\n\n    def test_returns_false_for_existing_permission(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user()\n\n        rv = self.make_request('get', '/api/queries/{}/acl/{}'.format(query.id, ACCESS_TYPE_MODIFY), user=other_user)\n\n        self.assertEqual(rv.status_code, 200)\n        self.assertEqual(False, rv.json['response'])\n\n    def test_returns_404_for_outside_of_org_users(self):\n        query = self.factory.create_query()\n        other_user = self.factory.create_user(org=self.factory.create_org())\n\n        rv = self.make_request('get', '/api/queries/{}/acl/{}'.format(query.id, ACCESS_TYPE_MODIFY), user=other_user)\n\n        self.assertEqual(rv.status_code, 404)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "test_permissions.py", "id": "7ee21c37e1068a33881f4e7a4e379b1a", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/tests/handlers/test_permissions.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}