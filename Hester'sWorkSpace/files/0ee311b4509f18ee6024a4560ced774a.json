{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    float_or_none,\n    unified_strdate,\n)\n\n\nclass DctpTvIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?dctp\\.tv/(?:\n    _TEST = {\n        'url': 'http://www.dctp.tv/filme/videoinstallation-fuer-eine-kaufhausfassade/',\n        'info_dict': {\n            'id': '95eaa4f33dad413aa17b4ee613cccc6c',\n            'display_id': 'videoinstallation-fuer-eine-kaufhausfassade',\n            'ext': 'flv',\n            'title': 'Videoinstallation f\u00fcr eine Kaufhausfassade',\n            'description': 'Kurzfilm',\n            'upload_date': '20110407',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 71.24,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_id = self._html_search_meta(\n            'DC.identifier', webpage, 'video id',\n            default=None) or self._search_regex(\n            r'id=[\"\\']uuid[^>]+>([^<]+)<', webpage, 'video id')\n\n        title = self._og_search_title(webpage)\n\n        servers = self._download_json(\n            'http://www.dctp.tv/streaming_servers/', display_id,\n            note='Downloading server list', fatal=False)\n\n        if servers:\n            endpoint = next(\n                server['endpoint']\n                for server in servers\n                if isinstance(server.get('endpoint'), compat_str) and\n                'cloudfront' in server['endpoint'])\n        else:\n            endpoint = 'rtmpe://s2pqqn4u96e4j8.cloudfront.net/cfx/st/'\n\n        app = self._search_regex(\n            r'^rtmpe?://[^/]+/(?P<app>.*)$', endpoint, 'app')\n\n        formats = [{\n            'url': endpoint,\n            'app': app,\n            'play_path': 'mp4:%s_dctp_0500_4x3.m4v' % video_id,\n            'page_url': url,\n            'player_url': 'http://svm-prod-dctptv-static.s3.amazonaws.com/dctptv-relaunch2012-109.swf',\n            'ext': 'flv',\n        }]\n\n        description = self._html_search_meta('DC.description', webpage)\n        upload_date = unified_strdate(\n            self._html_search_meta('DC.date.created', webpage))\n        thumbnail = self._og_search_thumbnail(webpage)\n        duration = float_or_none(self._search_regex(\n            r'id=[\"\\']duration_in_ms[^+]>(\\d+)', webpage, 'duration',\n            default=None), scale=1000)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'display_id': display_id,\n            'description': description,\n            'upload_date': upload_date,\n            'thumbnail': thumbnail,\n            'duration': duration,\n        }\n", "comments": "# coding: utf-8\n#/)?filme/(?P<id>[^/?#&]+)'\n# rtmp download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    float_or_none,\n    unified_strdate,\n)\n\n\nclass DctpTvIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?dctp\\.tv/(?:#/)?filme/(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'http://www.dctp.tv/filme/videoinstallation-fuer-eine-kaufhausfassade/',\n        'info_dict': {\n            'id': '95eaa4f33dad413aa17b4ee613cccc6c',\n            'display_id': 'videoinstallation-fuer-eine-kaufhausfassade',\n            'ext': 'flv',\n            'title': 'Videoinstallation f\u00fcr eine Kaufhausfassade',\n            'description': 'Kurzfilm',\n            'upload_date': '20110407',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 71.24,\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_id = self._html_search_meta(\n            'DC.identifier', webpage, 'video id',\n            default=None) or self._search_regex(\n            r'id=[\"\\']uuid[^>]+>([^<]+)<', webpage, 'video id')\n\n        title = self._og_search_title(webpage)\n\n        servers = self._download_json(\n            'http://www.dctp.tv/streaming_servers/', display_id,\n            note='Downloading server list', fatal=False)\n\n        if servers:\n            endpoint = next(\n                server['endpoint']\n                for server in servers\n                if isinstance(server.get('endpoint'), compat_str) and\n                'cloudfront' in server['endpoint'])\n        else:\n            endpoint = 'rtmpe://s2pqqn4u96e4j8.cloudfront.net/cfx/st/'\n\n        app = self._search_regex(\n            r'^rtmpe?://[^/]+/(?P<app>.*)$', endpoint, 'app')\n\n        formats = [{\n            'url': endpoint,\n            'app': app,\n            'play_path': 'mp4:%s_dctp_0500_4x3.m4v' % video_id,\n            'page_url': url,\n            'player_url': 'http://svm-prod-dctptv-static.s3.amazonaws.com/dctptv-relaunch2012-109.swf',\n            'ext': 'flv',\n        }]\n\n        description = self._html_search_meta('DC.description', webpage)\n        upload_date = unified_strdate(\n            self._html_search_meta('DC.date.created', webpage))\n        thumbnail = self._og_search_thumbnail(webpage)\n        duration = float_or_none(self._search_regex(\n            r'id=[\"\\']duration_in_ms[^+]>(\\d+)', webpage, 'duration',\n            default=None), scale=1000)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'display_id': display_id,\n            'description': description,\n            'upload_date': upload_date,\n            'thumbnail': thumbnail,\n            'duration': duration,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "dctp.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/dctp.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}