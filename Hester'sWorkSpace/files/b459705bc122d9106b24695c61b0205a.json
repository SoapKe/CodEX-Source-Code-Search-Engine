{"author": "donnemartin", "code": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestCoinChange(object):\n\n    def test_coin_change(self):\n        coin_changer = CoinChanger()\n        assert_raises(TypeError, coin_changer.make_change, None, None)\n        assert_equal(coin_changer.make_change([], 0), 0)\n        assert_equal(coin_changer.make_change([1, 2, 3], 5), 2)\n        assert_equal(coin_changer.make_change([3, 2, 1], 5), 2)\n        assert_equal(coin_changer.make_change([3, 2, 1], 8), 3)\n        print('Success: test_coin_change')\n\n\ndef main():\n    test = TestCoinChange()\n    test.test_coin_change()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestCoinChange(object):\n\n    def test_coin_change(self):\n        coin_changer = CoinChanger()\n        assert_raises(TypeError, coin_changer.make_change, None, None)\n        assert_equal(coin_changer.make_change([], 0), 0)\n        assert_equal(coin_changer.make_change([1, 2, 3], 5), 2)\n        assert_equal(coin_changer.make_change([3, 2, 1], 5), 2)\n        assert_equal(coin_changer.make_change([3, 2, 1], 8), 3)\n        print('Success: test_coin_change')\n\n\ndef main():\n    test = TestCoinChange()\n    test.test_coin_change()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_coin_change_min.py", "id": "b459705bc122d9106b24695c61b0205a", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/recursion_dynamic/coin_change_min/test_coin_change_min.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}