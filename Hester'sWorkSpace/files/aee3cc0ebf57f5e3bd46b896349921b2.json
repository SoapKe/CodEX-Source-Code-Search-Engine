{"author": "openai", "code": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass HopperEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'hopper.xml', 4)\n        utils.EzPickle.__init__(self)\n\n    def step(self, a):\n        posbefore = self.sim.data.qpos[0]\n        self.do_simulation(a, self.frame_skip)\n        posafter, height, ang = self.sim.data.qpos[0:3]\n        alive_bonus = 1.0\n        reward = (posafter - posbefore) / self.dt\n        reward += alive_bonus\n        reward -= 1e-3 * np.square(a).sum()\n        s = self.state_vector()\n        done = not (np.isfinite(s).all() and (np.abs(s[2:]) < 100).all() and\n                    (height > .7) and (abs(ang) < .2))\n        ob = self._get_obs()\n        return ob, reward, done, {}\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[1:],\n            np.clip(self.sim.data.qvel.flat, -10, 10)\n        ])\n\n    def reset_model(self):\n        qpos = self.init_qpos + self.np_random.uniform(low=-.005, high=.005, size=self.model.nq)\n        qvel = self.init_qvel + self.np_random.uniform(low=-.005, high=.005, size=self.model.nv)\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 2\n        self.viewer.cam.distance = self.model.stat.extent * 0.75\n        self.viewer.cam.lookat[2] += .8\n        self.viewer.cam.elevation = -20\n", "comments": "", "content": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass HopperEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'hopper.xml', 4)\n        utils.EzPickle.__init__(self)\n\n    def step(self, a):\n        posbefore = self.sim.data.qpos[0]\n        self.do_simulation(a, self.frame_skip)\n        posafter, height, ang = self.sim.data.qpos[0:3]\n        alive_bonus = 1.0\n        reward = (posafter - posbefore) / self.dt\n        reward += alive_bonus\n        reward -= 1e-3 * np.square(a).sum()\n        s = self.state_vector()\n        done = not (np.isfinite(s).all() and (np.abs(s[2:]) < 100).all() and\n                    (height > .7) and (abs(ang) < .2))\n        ob = self._get_obs()\n        return ob, reward, done, {}\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[1:],\n            np.clip(self.sim.data.qvel.flat, -10, 10)\n        ])\n\n    def reset_model(self):\n        qpos = self.init_qpos + self.np_random.uniform(low=-.005, high=.005, size=self.model.nq)\n        qvel = self.init_qvel + self.np_random.uniform(low=-.005, high=.005, size=self.model.nv)\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.trackbodyid = 2\n        self.viewer.cam.distance = self.model.stat.extent * 0.75\n        self.viewer.cam.lookat[2] += .8\n        self.viewer.cam.elevation = -20\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "hopper.py", "id": "aee3cc0ebf57f5e3bd46b896349921b2", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/hopper.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}