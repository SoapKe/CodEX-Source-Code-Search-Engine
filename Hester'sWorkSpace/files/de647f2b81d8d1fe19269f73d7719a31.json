{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    srt_subtitles_timecode,\n)\n\n\nclass KanalPlayIE(InfoExtractor):\n    IE_DESC = 'Kanal 5/9/11 Play'\n    _VALID_URL = r'https?://(?:www\\.)?kanal(?P<channel_id>5|9|11)play\\.se/(?:\n    _TESTS = [{\n        'url': 'http://www.kanal5play.se/\n        'info_dict': {\n            'id': '3270012277',\n            'ext': 'flv',\n            'title': 'Saknar b\u00e5de dusch och avlopp',\n            'description': 'md5:6023a95832a06059832ae93bc3c7efb7',\n            'duration': 2636.36,\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.kanal9play.se/\n        'only_matching': True,\n    }, {\n        'url': 'http://www.kanal11play.se/\n        'only_matching': True,\n    }]\n\n    def _fix_subtitles(self, subs):\n        return '\\r\\n\\r\\n'.join(\n            '%s\\r\\n%s --> %s\\r\\n%s'\n            % (\n                num,\n                srt_subtitles_timecode(item['startMillis'] / 1000.0),\n                srt_subtitles_timecode(item['endMillis'] / 1000.0),\n                item['text'],\n            ) for num, item in enumerate(subs, 1))\n\n    def _get_subtitles(self, channel_id, video_id):\n        subs = self._download_json(\n            'http://www.kanal%splay.se/api/subtitles/%s' % (channel_id, video_id),\n            video_id, 'Downloading subtitles JSON', fatal=False)\n        return {'sv': [{'ext': 'srt', 'data': self._fix_subtitles(subs)}]} if subs else {}\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        channel_id = mobj.group('channel_id')\n\n        video = self._download_json(\n            'http://www.kanal%splay.se/api/getVideo?format=FLASH&videoId=%s' % (channel_id, video_id),\n            video_id)\n\n        reasons_for_no_streams = video.get('reasonsForNoStreams')\n        if reasons_for_no_streams:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, '\\n'.join(reasons_for_no_streams)),\n                expected=True)\n\n        title = video['title']\n        description = video.get('description')\n        duration = float_or_none(video.get('length'), 1000)\n        thumbnail = video.get('posterUrl')\n\n        stream_base_url = video['streamBaseUrl']\n\n        formats = [{\n            'url': stream_base_url,\n            'play_path': stream['source'],\n            'ext': 'flv',\n            'tbr': float_or_none(stream.get('bitrate'), 1000),\n            'rtmp_real_time': True,\n        } for stream in video['streams']]\n        self._sort_formats(formats)\n\n        subtitles = {}\n        if video.get('hasSubtitle'):\n            subtitles = self.extract_subtitles(channel_id, video_id)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "# coding: utf-8\n#!/)?(?:play/)?program/\\d+/video/(?P<id>\\d+)'\n#!/play/program/3060212363/video/3270012277',\n# rtmp download\n#!/play/program/335032/video/246042',\n#!/play/program/232835958/video/367135199',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    srt_subtitles_timecode,\n)\n\n\nclass KanalPlayIE(InfoExtractor):\n    IE_DESC = 'Kanal 5/9/11 Play'\n    _VALID_URL = r'https?://(?:www\\.)?kanal(?P<channel_id>5|9|11)play\\.se/(?:#!/)?(?:play/)?program/\\d+/video/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.kanal5play.se/#!/play/program/3060212363/video/3270012277',\n        'info_dict': {\n            'id': '3270012277',\n            'ext': 'flv',\n            'title': 'Saknar b\u00e5de dusch och avlopp',\n            'description': 'md5:6023a95832a06059832ae93bc3c7efb7',\n            'duration': 2636.36,\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.kanal9play.se/#!/play/program/335032/video/246042',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.kanal11play.se/#!/play/program/232835958/video/367135199',\n        'only_matching': True,\n    }]\n\n    def _fix_subtitles(self, subs):\n        return '\\r\\n\\r\\n'.join(\n            '%s\\r\\n%s --> %s\\r\\n%s'\n            % (\n                num,\n                srt_subtitles_timecode(item['startMillis'] / 1000.0),\n                srt_subtitles_timecode(item['endMillis'] / 1000.0),\n                item['text'],\n            ) for num, item in enumerate(subs, 1))\n\n    def _get_subtitles(self, channel_id, video_id):\n        subs = self._download_json(\n            'http://www.kanal%splay.se/api/subtitles/%s' % (channel_id, video_id),\n            video_id, 'Downloading subtitles JSON', fatal=False)\n        return {'sv': [{'ext': 'srt', 'data': self._fix_subtitles(subs)}]} if subs else {}\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        channel_id = mobj.group('channel_id')\n\n        video = self._download_json(\n            'http://www.kanal%splay.se/api/getVideo?format=FLASH&videoId=%s' % (channel_id, video_id),\n            video_id)\n\n        reasons_for_no_streams = video.get('reasonsForNoStreams')\n        if reasons_for_no_streams:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, '\\n'.join(reasons_for_no_streams)),\n                expected=True)\n\n        title = video['title']\n        description = video.get('description')\n        duration = float_or_none(video.get('length'), 1000)\n        thumbnail = video.get('posterUrl')\n\n        stream_base_url = video['streamBaseUrl']\n\n        formats = [{\n            'url': stream_base_url,\n            'play_path': stream['source'],\n            'ext': 'flv',\n            'tbr': float_or_none(stream.get('bitrate'), 1000),\n            'rtmp_real_time': True,\n        } for stream in video['streams']]\n        self._sort_formats(formats)\n\n        subtitles = {}\n        if video.get('hasSubtitle'):\n            subtitles = self.extract_subtitles(channel_id, video_id)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "kanalplay.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/kanalplay.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}