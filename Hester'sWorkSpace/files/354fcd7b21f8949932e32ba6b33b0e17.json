{"author": "benoitc", "code": " -*- coding: utf-8 -\n\n This file is part of gunicorn released under the MIT license.\n See the NOTICE for more information.\n\nimport os\nimport sys\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.test import test as TestCommand\n\nfrom gunicorn import __version__\n\n\nCLASSIFIERS = [\n    'Development Status :: 4 - Beta',\n    'Environment :: Other Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: MIT License',\n    'Operating System :: MacOS :: MacOS X',\n    'Operating System :: POSIX',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 2.6',\n    'Programming Language :: Python :: 2.7',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.2',\n    'Programming Language :: Python :: 3.3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Topic :: Internet',\n    'Topic :: Utilities',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: Internet :: WWW/HTTP',\n    'Topic :: Internet :: WWW/HTTP :: WSGI',\n    'Topic :: Internet :: WWW/HTTP :: WSGI :: Server',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content']\n\n read long description\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst')) as f:\n    long_description = f.read()\n\n read dev requirements\nfname = os.path.join(os.path.dirname(__file__), 'requirements_test.txt')\nwith open(fname) as f:\n    tests_require = [l.strip() for l in f.readlines()]\n\nif sys.version_info[:2] < (3, 3):\n    tests_require.append('mock')\nif sys.version_info[:2] < (2, 7):\n    tests_require.append('unittest2')\n\nclass PyTestCommand(TestCommand):\n    user_options = [\n        (\"cov\", None, \"measure coverage\")\n    ]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.cov = None\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = ['tests']\n        if self.cov:\n            self.test_args += ['--cov', 'gunicorn']\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n        errno = pytest.main(self.test_args)\n        sys.exit(errno)\n\n\nextra_require = {\n    'gevent':  ['gevent>=0.13'],\n    'eventlet': ['eventlet>=0.9.7'],\n    'tornado': ['tornado>=0.2'],\n    'gthread': [],\n}\nif sys.version_info[0] < 3:\n    extra_require['gthread'] = ['futures']\n\nsetup(\n    name='gunicorn',\n    version=__version__,\n\n    description='WSGI HTTP Server for UNIX',\n    long_description=long_description,\n    author='Benoit Chesneau',\n    author_email='benoitc@e-engura.com',\n    license='MIT',\n    url='http://gunicorn.org',\n\n    classifiers=CLASSIFIERS,\n    zip_safe=False,\n    packages=find_packages(exclude=['examples', 'tests']),\n    include_package_data=True,\n\n    tests_require=tests_require,\n    cmdclass={'test': PyTestCommand},\n\n    entry_points=\"\"\"\n    [console_scripts]\n    gunicorn=gunicorn.app.wsgiapp:run\n    gunicorn_paster=gunicorn.app.pasterapp:run\n\n    [paste.server_runner]\n    main=gunicorn.app.pasterapp:paste_server\n    \"\"\",\n    extras_require=extra_require,\n)\n", "comments": "         console scripts      gunicorn gunicorn app wsgiapp run     gunicorn paster gunicorn app pasterapp run       paste server runner      main gunicorn app pasterapp paste server                coding  utf 8         this file part gunicorn released mit license     see notice information     read long description    read dev requirements ", "content": "# -*- coding: utf-8 -\n#\n# This file is part of gunicorn released under the MIT license.\n# See the NOTICE for more information.\n\nimport os\nimport sys\n\nfrom setuptools import setup, find_packages\nfrom setuptools.command.test import test as TestCommand\n\nfrom gunicorn import __version__\n\n\nCLASSIFIERS = [\n    'Development Status :: 4 - Beta',\n    'Environment :: Other Environment',\n    'Intended Audience :: Developers',\n    'License :: OSI Approved :: MIT License',\n    'Operating System :: MacOS :: MacOS X',\n    'Operating System :: POSIX',\n    'Programming Language :: Python',\n    'Programming Language :: Python :: 2',\n    'Programming Language :: Python :: 2.6',\n    'Programming Language :: Python :: 2.7',\n    'Programming Language :: Python :: 3',\n    'Programming Language :: Python :: 3.2',\n    'Programming Language :: Python :: 3.3',\n    'Programming Language :: Python :: 3.4',\n    'Programming Language :: Python :: 3.5',\n    'Programming Language :: Python :: 3.6',\n    'Topic :: Internet',\n    'Topic :: Utilities',\n    'Topic :: Software Development :: Libraries :: Python Modules',\n    'Topic :: Internet :: WWW/HTTP',\n    'Topic :: Internet :: WWW/HTTP :: WSGI',\n    'Topic :: Internet :: WWW/HTTP :: WSGI :: Server',\n    'Topic :: Internet :: WWW/HTTP :: Dynamic Content']\n\n# read long description\nwith open(os.path.join(os.path.dirname(__file__), 'README.rst')) as f:\n    long_description = f.read()\n\n# read dev requirements\nfname = os.path.join(os.path.dirname(__file__), 'requirements_test.txt')\nwith open(fname) as f:\n    tests_require = [l.strip() for l in f.readlines()]\n\nif sys.version_info[:2] < (3, 3):\n    tests_require.append('mock')\nif sys.version_info[:2] < (2, 7):\n    tests_require.append('unittest2')\n\nclass PyTestCommand(TestCommand):\n    user_options = [\n        (\"cov\", None, \"measure coverage\")\n    ]\n\n    def initialize_options(self):\n        TestCommand.initialize_options(self)\n        self.cov = None\n\n    def finalize_options(self):\n        TestCommand.finalize_options(self)\n        self.test_args = ['tests']\n        if self.cov:\n            self.test_args += ['--cov', 'gunicorn']\n        self.test_suite = True\n\n    def run_tests(self):\n        import pytest\n        errno = pytest.main(self.test_args)\n        sys.exit(errno)\n\n\nextra_require = {\n    'gevent':  ['gevent>=0.13'],\n    'eventlet': ['eventlet>=0.9.7'],\n    'tornado': ['tornado>=0.2'],\n    'gthread': [],\n}\nif sys.version_info[0] < 3:\n    extra_require['gthread'] = ['futures']\n\nsetup(\n    name='gunicorn',\n    version=__version__,\n\n    description='WSGI HTTP Server for UNIX',\n    long_description=long_description,\n    author='Benoit Chesneau',\n    author_email='benoitc@e-engura.com',\n    license='MIT',\n    url='http://gunicorn.org',\n\n    classifiers=CLASSIFIERS,\n    zip_safe=False,\n    packages=find_packages(exclude=['examples', 'tests']),\n    include_package_data=True,\n\n    tests_require=tests_require,\n    cmdclass={'test': PyTestCommand},\n\n    entry_points=\"\"\"\n    [console_scripts]\n    gunicorn=gunicorn.app.wsgiapp:run\n    gunicorn_paster=gunicorn.app.pasterapp:run\n\n    [paste.server_runner]\n    main=gunicorn.app.pasterapp:paste_server\n    \"\"\",\n    extras_require=extra_require,\n)\n", "description": "gunicorn 'Green Unicorn' is a WSGI HTTP Server for UNIX, fast clients and sleepy applications.", "file_name": "setup.py", "id": "354fcd7b21f8949932e32ba6b33b0e17", "language": "Python", "project_name": "gunicorn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/benoitc-gunicorn/benoitc-gunicorn-d1f5268/setup.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:27:00Z", "url": "https://github.com/benoitc/gunicorn", "wiki": true}