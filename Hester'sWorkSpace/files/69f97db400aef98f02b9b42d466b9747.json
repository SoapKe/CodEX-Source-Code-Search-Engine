{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport logging\n\nfrom odoo import models, _\n\nfrom odoo.addons.iap.models.iap import InsufficientCreditError\n\n_logger = logging.getLogger(__name__)\n\n\nclass MailThread(models.AbstractModel):\n    _inherit = 'mail.thread'\n\n    def _get_default_sms_recipients(self):\n        \"\"\" This method will likely need to be overriden by inherited models.\n               :returns partners: recordset of res.partner\n        \"\"\"\n        partners = self.env['res.partner']\n        if hasattr(self, 'partner_id'):\n            partners |= self.mapped('partner_id')\n        if hasattr(self, 'partner_ids'):\n            partners |= self.mapped('partner_ids')\n        return partners\n\n    def message_post_send_sms(self, sms_message, numbers=None, partners=None, note_msg=None, log_error=False):\n        \"\"\" Send an SMS text message and post an internal note in the chatter if successfull\n            :param sms_message: plaintext message to send by sms\n            :param partners: the numbers to send to, if none are given it will take those\n                                from partners or _get_default_sms_recipients\n            :param partners: the recipients partners, if none are given it will take those\n                                from _get_default_sms_recipients, this argument\n                                is ignored if numbers is defined\n            :param note_msg: message to log in the chatter, if none is given a default one\n                             containing the sms_message is logged\n        \"\"\"\n        if not numbers:\n            if not partners:\n                partners = self._get_default_sms_recipients()\n\n                \n                numbers = list(set([i.mobile for i in partners if i.mobile]))\n\n        if numbers:\n            try:\n                self.env['sms.api']._send_sms(numbers, sms_message)\n                mail_message = note_msg or _('SMS message sent: %s') % sms_message\n\n            except InsufficientCreditError as e:\n                if not log_error:\n                    raise e\n                mail_message = _('Insufficient credit, unable to send SMS message: %s') % sms_message\n        else:\n            mail_message = _('No mobile number defined, unable to send SMS message: %s') % sms_message\n\n        for thread in self:\n            thread.message_post(body=mail_message)\n        return False\n", "comments": "    this method likely need overriden inherited models                  returns partners  recordset res partner                     partners   self env  res partner           hasattr(self   partner id )              partners    self mapped( partner id )         hasattr(self   partner ids )              partners    self mapped( partner ids )         return partners      def message post send sms(self  sms message  numbers none  partners none  note msg none  log error false)              send sms text message post internal note chatter successfull              param sms message  plaintext message send sms              param partners  numbers send  none given take                                 partners  get default sms recipients              param partners  recipients partners  none given take                                  get default sms recipients  argument                                 ignored numbers defined              param note msg  message log chatter  none given default one                              containing sms message logged                    coding  utf 8        part odoo  see license file full copyright licensing details     collect numbers  consider message sent least one number found ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport logging\n\nfrom odoo import models, _\n\nfrom odoo.addons.iap.models.iap import InsufficientCreditError\n\n_logger = logging.getLogger(__name__)\n\n\nclass MailThread(models.AbstractModel):\n    _inherit = 'mail.thread'\n\n    def _get_default_sms_recipients(self):\n        \"\"\" This method will likely need to be overriden by inherited models.\n               :returns partners: recordset of res.partner\n        \"\"\"\n        partners = self.env['res.partner']\n        if hasattr(self, 'partner_id'):\n            partners |= self.mapped('partner_id')\n        if hasattr(self, 'partner_ids'):\n            partners |= self.mapped('partner_ids')\n        return partners\n\n    def message_post_send_sms(self, sms_message, numbers=None, partners=None, note_msg=None, log_error=False):\n        \"\"\" Send an SMS text message and post an internal note in the chatter if successfull\n            :param sms_message: plaintext message to send by sms\n            :param partners: the numbers to send to, if none are given it will take those\n                                from partners or _get_default_sms_recipients\n            :param partners: the recipients partners, if none are given it will take those\n                                from _get_default_sms_recipients, this argument\n                                is ignored if numbers is defined\n            :param note_msg: message to log in the chatter, if none is given a default one\n                             containing the sms_message is logged\n        \"\"\"\n        if not numbers:\n            if not partners:\n                partners = self._get_default_sms_recipients()\n\n                # Collect numbers, we will consider the message to be sent if at least one number can be found\n                numbers = list(set([i.mobile for i in partners if i.mobile]))\n\n        if numbers:\n            try:\n                self.env['sms.api']._send_sms(numbers, sms_message)\n                mail_message = note_msg or _('SMS message sent: %s') % sms_message\n\n            except InsufficientCreditError as e:\n                if not log_error:\n                    raise e\n                mail_message = _('Insufficient credit, unable to send SMS message: %s') % sms_message\n        else:\n            mail_message = _('No mobile number defined, unable to send SMS message: %s') % sms_message\n\n        for thread in self:\n            thread.message_post(body=mail_message)\n        return False\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "mail_thread.py", "id": "69f97db400aef98f02b9b42d466b9747", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sms/models/mail_thread.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}