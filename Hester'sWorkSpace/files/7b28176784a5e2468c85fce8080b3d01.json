{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import timedelta\n\nfrom odoo import fields\nfrom odoo.addons.stock.tests.common2 import TestStockCommon\n\n\nclass TestSaleStockLeadTime(TestStockCommon):\n\n    def setUp(self):\n        super(TestSaleStockLeadTime, self).setUp()\n\n        \n        self.product_1.write({'type': 'product',\n                              'sale_delay': 5.0})\n\n    def test_00_product_company_level_delays(self):\n        \"\"\" In order to check schedule date, set product's Customer Lead Time\n            and company's Sales Safety Days.\"\"\"\n\n        company = self.env.ref('base.main_company')\n\n        \n        company.write({'security_lead': 3.00})\n\n        \n        order = self.env['sale.order'].create({\n            'partner_id': self.partner_1.id,\n            'partner_invoice_id': self.partner_1.id,\n            'partner_shipping_id': self.partner_1.id,\n            'pricelist_id': self.env.ref('product.list0').id,\n            'picking_policy': 'direct',\n            'warehouse_id': self.warehouse_1.id,\n            'order_line': [(0, 0, {'name': self.product_1.name,\n                                   'product_id': self.product_1.id,\n                                   'product_uom_qty': 10,\n                                   'product_uom': self.uom_unit.id,\n                                   'customer_lead': self.product_1.sale_delay})]})\n\n        \n        order.action_confirm()\n\n        \n        self.assertTrue(order.picking_ids, \"Picking should be created.\")\n\n        \n        out_date = fields.Datetime.from_string(order.date_order) + timedelta(days=self.product_1.sale_delay) - timedelta(days=company.security_lead)\n        min_date = fields.Datetime.from_string(order.picking_ids[0].scheduled_date)\n        self.assertTrue(abs(min_date - out_date) <= timedelta(seconds=1), 'Schedule date of picking should be equal to: order date + Customer Lead Time - Sales Safety Days.')\n\n    def test_01_product_route_level_delays(self):\n        \"\"\" In order to check schedule dates, set product's Customer Lead Time\n            and warehouse route's delay.\"\"\"\n\n        # Update warehouse_1 with Outgoing Shippings pick + pack + ship\n        self.warehouse_1.write({'delivery_steps': 'pick_pack_ship'})\n\n        \n        for pull_rule in self.warehouse_1.delivery_route_id.pull_ids:\n            pull_rule.write({'delay': 2})\n\n        \n        order = self.env['sale.order'].create({\n            'partner_id': self.partner_1.id,\n            'partner_invoice_id': self.partner_1.id,\n            'partner_shipping_id': self.partner_1.id,\n            'pricelist_id': self.env.ref('product.list0').id,\n            'picking_policy': 'direct',\n            'warehouse_id': self.warehouse_1.id,\n            'order_line': [(0, 0, {'name': self.product_1.name,\n                                   'product_id': self.product_1.id,\n                                   'product_uom_qty': 5,\n                                   'product_uom': self.uom_unit.id,\n                                   'customer_lead': self.product_1.sale_delay})]})\n\n        \n        order.action_confirm()\n\n        \n        self.assertTrue(order.picking_ids, \"Pickings should be created.\")\n\n        \n        out = order.picking_ids.filtered(lambda r: r.picking_type_id == self.warehouse_1.out_type_id)\n        out_min_date = fields.Datetime.from_string(out.scheduled_date)\n        out_date = fields.Datetime.from_string(order.date_order) + timedelta(days=self.product_1.sale_delay) - timedelta(days=out.move_lines[0].rule_id.delay)\n        self.assertTrue(abs(out_min_date - out_date) <= timedelta(seconds=1), 'Schedule date of ship type picking should be equal to: order date + Customer Lead Time - pull rule delay.')\n\n        \n        pack = order.picking_ids.filtered(lambda r: r.picking_type_id == self.warehouse_1.pack_type_id)\n        pack_min_date = fields.Datetime.from_string(pack.scheduled_date)\n        pack_date = out_date - timedelta(days=pack.move_lines[0].rule_id.delay)\n        self.assertTrue(abs(pack_min_date - pack_date) <= timedelta(seconds=1), 'Schedule date of pack type picking should be equal to: Schedule date of ship type picking - pull rule delay.')\n\n        \n        pick = order.picking_ids.filtered(lambda r: r.picking_type_id == self.warehouse_1.pick_type_id)\n        pick_min_date = fields.Datetime.from_string(pick.scheduled_date)\n        pick_date = pack_date - timedelta(days=pick.move_lines[0].rule_id.delay)\n        self.assertTrue(abs(pick_min_date - pick_date) <= timedelta(seconds=1), 'Schedule date of pick type picking should be equal to: Schedule date of pack type picking - pull rule delay.')\n", "comments": "    in order check schedule date  set product customer lead time             company sales safety days              company   self env ref( base main company )            update company sales safety days         company write(  security lead   3 00 )            create sale order product 1         order   self env  sale order   create(               partner id   self partner 1 id               partner invoice id   self partner 1 id               partner shipping id   self partner 1 id               pricelist id   self env ref( product list0 ) id               picking policy    direct                warehouse id   self warehouse 1 id               order line    (0  0    name   self product 1 name                                      product id   self product 1 id                                      product uom qty   10                                      product uom   self uom unit id                                      customer lead   self product 1 sale delay )  )            confirm standard sale order         order action confirm()            check picking crated         self asserttrue(order picking ids   picking created  )            check schedule date picking         date   fields datetime string(order date order)   timedelta(days self product 1 sale delay)   timedelta(days company security lead)         min date   fields datetime string(order picking ids 0  scheduled date)         self asserttrue(abs(min date   date)    timedelta(seconds 1)   schedule date picking equal  order date   customer lead time   sales safety days  )      def test 01 product route level delays(self)              in order check schedule dates  set product customer lead time             warehouse route delay            coding  utf 8        part odoo  see license file full copyright licensing details     update product 1 type customer lead time    update company sales safety days    create sale order product 1    confirm standard sale order    check picking crated    check schedule date picking    update warehouse 1 outgoing shippings pick   pack   ship    set delay pull rule    create sale order product 1    confirm standard sale order    check picking crated    check schedule date ship type picking    check schedule date pack type picking    check schedule date pick type picking ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import timedelta\n\nfrom odoo import fields\nfrom odoo.addons.stock.tests.common2 import TestStockCommon\n\n\nclass TestSaleStockLeadTime(TestStockCommon):\n\n    def setUp(self):\n        super(TestSaleStockLeadTime, self).setUp()\n\n        # Update the product_1 with type and Customer Lead Time\n        self.product_1.write({'type': 'product',\n                              'sale_delay': 5.0})\n\n    def test_00_product_company_level_delays(self):\n        \"\"\" In order to check schedule date, set product's Customer Lead Time\n            and company's Sales Safety Days.\"\"\"\n\n        company = self.env.ref('base.main_company')\n\n        # Update company with Sales Safety Days\n        company.write({'security_lead': 3.00})\n\n        # Create sale order of product_1\n        order = self.env['sale.order'].create({\n            'partner_id': self.partner_1.id,\n            'partner_invoice_id': self.partner_1.id,\n            'partner_shipping_id': self.partner_1.id,\n            'pricelist_id': self.env.ref('product.list0').id,\n            'picking_policy': 'direct',\n            'warehouse_id': self.warehouse_1.id,\n            'order_line': [(0, 0, {'name': self.product_1.name,\n                                   'product_id': self.product_1.id,\n                                   'product_uom_qty': 10,\n                                   'product_uom': self.uom_unit.id,\n                                   'customer_lead': self.product_1.sale_delay})]})\n\n        # Confirm our standard sale order\n        order.action_confirm()\n\n        # Check the picking crated or not\n        self.assertTrue(order.picking_ids, \"Picking should be created.\")\n\n        # Check schedule date of picking\n        out_date = fields.Datetime.from_string(order.date_order) + timedelta(days=self.product_1.sale_delay) - timedelta(days=company.security_lead)\n        min_date = fields.Datetime.from_string(order.picking_ids[0].scheduled_date)\n        self.assertTrue(abs(min_date - out_date) <= timedelta(seconds=1), 'Schedule date of picking should be equal to: order date + Customer Lead Time - Sales Safety Days.')\n\n    def test_01_product_route_level_delays(self):\n        \"\"\" In order to check schedule dates, set product's Customer Lead Time\n            and warehouse route's delay.\"\"\"\n\n        # Update warehouse_1 with Outgoing Shippings pick + pack + ship\n        self.warehouse_1.write({'delivery_steps': 'pick_pack_ship'})\n\n        # Set delay on pull rule\n        for pull_rule in self.warehouse_1.delivery_route_id.pull_ids:\n            pull_rule.write({'delay': 2})\n\n        # Create sale order of product_1\n        order = self.env['sale.order'].create({\n            'partner_id': self.partner_1.id,\n            'partner_invoice_id': self.partner_1.id,\n            'partner_shipping_id': self.partner_1.id,\n            'pricelist_id': self.env.ref('product.list0').id,\n            'picking_policy': 'direct',\n            'warehouse_id': self.warehouse_1.id,\n            'order_line': [(0, 0, {'name': self.product_1.name,\n                                   'product_id': self.product_1.id,\n                                   'product_uom_qty': 5,\n                                   'product_uom': self.uom_unit.id,\n                                   'customer_lead': self.product_1.sale_delay})]})\n\n        # Confirm our standard sale order\n        order.action_confirm()\n\n        # Check the picking crated or not\n        self.assertTrue(order.picking_ids, \"Pickings should be created.\")\n\n        # Check schedule date of ship type picking\n        out = order.picking_ids.filtered(lambda r: r.picking_type_id == self.warehouse_1.out_type_id)\n        out_min_date = fields.Datetime.from_string(out.scheduled_date)\n        out_date = fields.Datetime.from_string(order.date_order) + timedelta(days=self.product_1.sale_delay) - timedelta(days=out.move_lines[0].rule_id.delay)\n        self.assertTrue(abs(out_min_date - out_date) <= timedelta(seconds=1), 'Schedule date of ship type picking should be equal to: order date + Customer Lead Time - pull rule delay.')\n\n        # Check schedule date of pack type picking\n        pack = order.picking_ids.filtered(lambda r: r.picking_type_id == self.warehouse_1.pack_type_id)\n        pack_min_date = fields.Datetime.from_string(pack.scheduled_date)\n        pack_date = out_date - timedelta(days=pack.move_lines[0].rule_id.delay)\n        self.assertTrue(abs(pack_min_date - pack_date) <= timedelta(seconds=1), 'Schedule date of pack type picking should be equal to: Schedule date of ship type picking - pull rule delay.')\n\n        # Check schedule date of pick type picking\n        pick = order.picking_ids.filtered(lambda r: r.picking_type_id == self.warehouse_1.pick_type_id)\n        pick_min_date = fields.Datetime.from_string(pick.scheduled_date)\n        pick_date = pack_date - timedelta(days=pick.move_lines[0].rule_id.delay)\n        self.assertTrue(abs(pick_min_date - pick_date) <= timedelta(seconds=1), 'Schedule date of pick type picking should be equal to: Schedule date of pack type picking - pull rule delay.')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_sale_stock_lead_time.py", "id": "7b28176784a5e2468c85fce8080b3d01", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale_stock/tests/test_sale_stock_lead_time.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}