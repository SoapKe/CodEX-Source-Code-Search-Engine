{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom datetime import timedelta\nfrom django.utils import timezone\n\nfrom sentry.models import Release\nfrom sentry.testutils import TestCase\nfrom sentry.utils.committers import get_previous_releases, score_path_match_length, tokenize_path\n\n\ndef test_score_path_match_length():\n    assert score_path_match_length('foo/bar/baz', 'foo/bar/baz') == 3\n    assert score_path_match_length('foo/bar/baz', 'bar/baz') == 2\n    assert score_path_match_length('foo/bar/baz', 'baz') == 1\n    assert score_path_match_length('foo/bar/baz', 'foo') == 0\n    assert score_path_match_length('./foo/bar/baz', 'foo/bar/baz') == 3\n\n\ndef test_tokenize_path():\n    assert list(tokenize_path('foo/bar')) == ['bar', 'foo']\n    assert list(tokenize_path('foo\\\\bar')) == ['bar', 'foo']\n    assert list(tokenize_path('foo.bar')) == ['foo.bar']\n\n\nclass GetPreviousReleasesTestCase(TestCase):\n    def test_simple(self):\n        current_datetime = timezone.now()\n\n        org = self.create_organization()\n        project = self.create_project(organization=org, name='foo')\n\n        release1 = Release.objects.create(\n            organization=org,\n            version='a' * 40,\n            date_released=current_datetime - timedelta(days=2),\n        )\n\n        release1.add_project(project)\n\n        release2 = Release.objects.create(\n            organization=org,\n            version='b' * 40,\n            date_released=current_datetime - timedelta(days=1),\n        )\n\n        release2.add_project(project)\n\n        \n        release3 = Release.objects.create(\n            organization=org,\n            version='c' * 40,\n            date_released=current_datetime,\n        )\n\n        release3.add_project(project)\n\n        releases = list(get_previous_releases(project, release2.version))\n\n        assert len(releases) == 2\n        assert releases[0] == release2\n        assert releases[1] == release1\n", "comments": "  included ", "content": "from __future__ import absolute_import\n\nfrom datetime import timedelta\nfrom django.utils import timezone\n\nfrom sentry.models import Release\nfrom sentry.testutils import TestCase\nfrom sentry.utils.committers import get_previous_releases, score_path_match_length, tokenize_path\n\n\ndef test_score_path_match_length():\n    assert score_path_match_length('foo/bar/baz', 'foo/bar/baz') == 3\n    assert score_path_match_length('foo/bar/baz', 'bar/baz') == 2\n    assert score_path_match_length('foo/bar/baz', 'baz') == 1\n    assert score_path_match_length('foo/bar/baz', 'foo') == 0\n    assert score_path_match_length('./foo/bar/baz', 'foo/bar/baz') == 3\n\n\ndef test_tokenize_path():\n    assert list(tokenize_path('foo/bar')) == ['bar', 'foo']\n    assert list(tokenize_path('foo\\\\bar')) == ['bar', 'foo']\n    assert list(tokenize_path('foo.bar')) == ['foo.bar']\n\n\nclass GetPreviousReleasesTestCase(TestCase):\n    def test_simple(self):\n        current_datetime = timezone.now()\n\n        org = self.create_organization()\n        project = self.create_project(organization=org, name='foo')\n\n        release1 = Release.objects.create(\n            organization=org,\n            version='a' * 40,\n            date_released=current_datetime - timedelta(days=2),\n        )\n\n        release1.add_project(project)\n\n        release2 = Release.objects.create(\n            organization=org,\n            version='b' * 40,\n            date_released=current_datetime - timedelta(days=1),\n        )\n\n        release2.add_project(project)\n\n        # this shouldn't be included\n        release3 = Release.objects.create(\n            organization=org,\n            version='c' * 40,\n            date_released=current_datetime,\n        )\n\n        release3.add_project(project)\n\n        releases = list(get_previous_releases(project, release2.version))\n\n        assert len(releases) == 2\n        assert releases[0] == release2\n        assert releases[1] == release1\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_committers.py", "id": "2728d8d2545c614433aa9db7e82d71e9", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_committers.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}