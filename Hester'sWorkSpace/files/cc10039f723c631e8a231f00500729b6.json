{"author": "ansible", "code": "\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: cyberark_authentication\nshort_description: Module for CyberArk Vault Authentication using PAS Web Services SDK\nauthor: Edward Nunez @ CyberArk BizDev (@enunez-cyberark, @cyberark-bizdev, @erasmix)\nversion_added: 2.4\ndescription:\n    - Authenticates to CyberArk Vault using Privileged Account Security Web Services SDK and\n      creates a session fact that can be used by other modules. It returns an Ansible fact\n      called I(cyberark_session). Every module can use this fact as C(cyberark_session) parameter.\n\n\noptions:\n    state:\n        default: present\n        choices: [present, absent]\n        description:\n            - Specifies if an authentication logon/logoff and a cyberark_session should be added/removed.\n    username:\n        description:\n            - The name of the user who will logon to the Vault.\n    password:\n        description:\n            - The password of the user.\n    new_password:\n        description:\n            - The new password of the user. This parameter is optional, and enables you to change a password.\n    api_base_url:\n        description:\n            - A string containing the base URL of the server hosting CyberArk's Privileged Account Security Web Services SDK.\n    validate_certs:\n        type: bool\n        default: 'yes'\n        description:\n            - If C(false), SSL certificates will not be validated.  This should only\n              set to C(false) used on personally controlled sites using self-signed\n              certificates.\n    use_shared_logon_authentication:\n        type: bool\n        default: 'no'\n        description:\n            - Whether or not Shared Logon Authentication will be used.\n    use_radius_authentication:\n        type: bool\n        default: 'no'\n        description:\n            - Whether or not users will be authenticated via a RADIUS server. Valid values are true/false.\n    cyberark_session:\n        description:\n            - Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session.\n'''\n\nEXAMPLES = '''\n- name: Logon to CyberArk Vault using PAS Web Services SDK - use_shared_logon_authentication\n  cyberark_authentication:\n    api_base_url: \"{{ web_services_base_url }}\"\n    use_shared_logon_authentication: yes\n\n- name: Logon to CyberArk Vault using PAS Web Services SDK - Not use_shared_logon_authentication\n  cyberark_authentication:\n    api_base_url: \"{{ web_services_base_url }}\"\n    username: \"{{ password_object.password }}\"\n    password: \"{{ password_object.passprops.username }}\"\n    use_shared_logon_authentication: no\n\n- name: Logoff from CyberArk Vault\n  cyberark_authentication:\n    state: absent\n    cyberark_session: \"{{ cyberark_session }}\"\n'''\n\nRETURN = '''\ncyberark_session:\n    description: Authentication facts.\n    returned: success\n    type: dict\n    sample:\n        api_base_url:\n            description: Base URL for API calls. Returned in the cyberark_session, so it can be used in subsequent calls.\n            type: string\n            returned: always\n        token:\n            description: The token that identifies the session, encoded in BASE 64.\n            type: string\n            returned: always\n        use_shared_logon_authentication:\n            description: Whether or not Shared Logon Authentication was used to establish the session.\n            type: bool\n            returned: always\n        validate_certs:\n            description: Whether or not SSL certificates should be validated.\n            type: bool\n            returned: always\n'''\n\nfrom ansible.module_utils._text import to_text\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.urls import open_url\nfrom ansible.module_utils.six.moves.urllib.error import HTTPError\nimport json\ntry:\n    import httplib\nexcept ImportError:\n    \n    import http.client as httplib\n\n\ndef processAuthentication(module):\n\n    \n\n    api_base_url = module.params[\"api_base_url\"]\n    validate_certs = module.params[\"validate_certs\"]\n    username = module.params[\"username\"]\n    password = module.params[\"password\"]\n    new_password = module.params[\"new_password\"]\n    use_shared_logon_authentication = module.params[\n        \"use_shared_logon_authentication\"]\n    use_radius_authentication = module.params[\"use_radius_authentication\"]\n    state = module.params[\"state\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n\n    \n    if module.check_mode and new_password is not None:\n        new_password = None\n\n    \n    headers = {'Content-Type': 'application/json'}\n    payload = \"\"\n\n    if state == \"present\":  \n\n        \n        if use_shared_logon_authentication:\n\n            end_point = \"/PasswordVault/WebServices/auth/Shared/RestfulAuthenticationService.svc/Logon\"\n\n        else:\n\n            end_point = \"/PasswordVault/WebServices/auth/Cyberark/CyberArkAuthenticationService.svc/Logon\"\n\n            \n            \n            payload_dict = {\"username\": username, \"password\": password}\n\n            if use_radius_authentication:\n                payload_dict[\"useRadiusAuthentication\"] = use_radius_authentication\n\n            if new_password is not None:\n                payload_dict[\"newPassword\"] = new_password\n\n            payload = json.dumps(payload_dict)\n\n    else:  \n\n        \n        api_base_url = cyberark_session[\"api_base_url\"]\n        validate_certs = cyberark_session[\"validate_certs\"]\n        use_shared_logon_authentication = cyberark_session[\n            \"use_shared_logon_authentication\"]\n        headers[\"Authorization\"] = cyberark_session[\"token\"]\n\n        \n        if use_shared_logon_authentication:\n            end_point = \"/PasswordVault/WebServices/auth/Shared/RestfulAuthenticationService.svc/Logoff\"\n        else:\n            end_point = \"/PasswordVault/WebServices/auth/Cyberark/CyberArkAuthenticationService.svc/Logoff\"\n\n    result = None\n    changed = False\n    response = None\n\n    try:\n\n        response = open_url(\n            api_base_url + end_point,\n            method=\"POST\",\n            headers=headers,\n            data=payload,\n            validate_certs=validate_certs)\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        module.fail_json(\n            msg=(\"Error while performing authentication.\"\n                 \"Please validate parameters provided, and ability to logon to CyberArk.\"\n                 \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, to_text(http_exception))),\n            payload=payload,\n            headers=headers,\n            status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing authentication.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            payload=payload,\n            headers=headers,\n            status_code=-1)\n\n    if response.getcode() == 200:  \n\n        if state == \"present\":  \n\n            \n            \n            token = None\n            try:\n                if use_shared_logon_authentication:\n                    token = json.loads(response.read())[\"LogonResult\"]\n                else:\n                    token = json.loads(response.read())[\"CyberArkLogonResult\"]\n            except Exception as e:\n                module.fail_json(\n                    msg=\"Error obtaining token\\n%s\" % (to_text(e)),\n                    payload=payload,\n                    headers=headers,\n                    status_code=-1)\n\n            \n            result = {\n                \"cyberark_session\": {\n                    \"token\": token, \"api_base_url\": api_base_url, \"validate_certs\": validate_certs,\n                    \"use_shared_logon_authentication\": use_shared_logon_authentication},\n            }\n\n            if new_password is not None:\n                \n                \n                changed = True\n\n        else:   clears cyberark_session\n\n            result = {\n                \"cyberark_session\": {}\n            }\n\n        return (changed, result, response.getcode())\n\n    else:\n        module.fail_json(\n            msg=\"error in end_point=>\" +\n            end_point,\n            headers=headers)\n\n\ndef main():\n\n    fields = {\n        \"api_base_url\": {\"type\": \"str\"},\n        \"validate_certs\": {\"type\": \"bool\",\n                           \"default\": \"true\"},\n        \"username\": {\"type\": \"str\"},\n        \"password\": {\"type\": \"str\", \"no_log\": True},\n        \"new_password\": {\"type\": \"str\", \"no_log\": True},\n        \"use_shared_logon_authentication\": {\"default\": False, \"type\": \"bool\"},\n        \"use_radius_authentication\": {\"default\": False, \"type\": \"bool\"},\n        \"state\": {\"type\": \"str\",\n                  \"choices\": [\"present\", \"absent\"],\n                  \"default\": \"present\"},\n        \"cyberark_session\": {\"type\": \"dict\"},\n    }\n\n    mutually_exclusive = [\n        [\"use_shared_logon_authentication\", \"use_radius_authentication\"],\n        [\"use_shared_logon_authentication\", \"new_password\"],\n        [\"api_base_url\", \"cyberark_session\"],\n        [\"cyberark_session\", \"username\", \"use_shared_logon_authentication\"]\n    ]\n\n    required_if = [\n        (\"state\", \"present\", [\"api_base_url\"]),\n        (\"state\", \"absent\", [\"cyberark_session\"])\n    ]\n\n    required_together = [\n        [\"username\", \"password\"]\n    ]\n\n    module = AnsibleModule(\n        argument_spec=fields,\n        mutually_exclusive=mutually_exclusive,\n        required_if=required_if,\n        required_together=required_together,\n        supports_check_mode=True)\n\n    (changed, result, status_code) = processAuthentication(module)\n\n    module.exit_json(\n        changed=changed,\n        ansible_facts=result,\n        status_code=status_code)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  cyberark authentication short description  module cyberark vault authentication using pas web services sdk author  edward nunez   cyberark bizdev ( enunez cyberark   cyberark bizdev   erasmix) version added  2 4 description        authenticates cyberark vault using privileged account security web services sdk       creates session fact used modules  it returns ansible fact       called i(cyberark session)  every module use fact c(cyberark session) parameter    options      state          default  present         choices   present  absent          description                specifies authentication logon logoff cyberark session added removed      username          description                the name user logon vault      password          description                the password user      new password          description                the new password user  this parameter optional  enables change password      api base url          description                a string containing base url server hosting cyberark privileged account security web services sdk      validate certs          type  bool         default   yes          description                if c(false)  ssl certificates validated   this               set c(false) used personally controlled sites using self signed               certificates      use shared logon authentication          type  bool         default            description                whether shared logon authentication used      use radius authentication          type  bool         default            description                whether users authenticated via radius server  valid values true false      cyberark session          description                dictionary set cyberark authentication containing different values perform actions logged cyberark session       examples         name  logon cyberark vault using pas web services sdk   use shared logon authentication   cyberark authentication      api base url      web services base url         use shared logon authentication  yes    name  logon cyberark vault using pas web services sdk   not use shared logon authentication   cyberark authentication      api base url      web services base url         username      password object password         password      password object passprops username         use shared logon authentication     name  logoff cyberark vault   cyberark authentication      state  absent     cyberark session      cyberark session          return       cyberark session      description  authentication facts      returned  success     type  dict     sample          api base url              description  base url api calls  returned cyberark session  used subsequent calls              type  string             returned  always         token              description  the token identifies session  encoded base 64              type  string             returned  always         use shared logon authentication              description  whether shared logon authentication used establish session              type  bool             returned  always         validate certs              description  whether ssl certificates validated              type  bool             returned  always         usr bin python    copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    python 3    getting parameters module    check mode perform password changes    defining initial values open url call    logon action    different end points based use shared logon authentication    the payload contain username  password    optionally use radius authentication new password    logoff action    get values cyberark session already established    different end points based use shared logon authentication    success    logon action    result token rest api uses different key based    use shared logon authentication    preparing result module    only marks change new password received resulting    password change    logoff action clears cyberark session ", "content": "#!/usr/bin/python\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = '''\n---\nmodule: cyberark_authentication\nshort_description: Module for CyberArk Vault Authentication using PAS Web Services SDK\nauthor: Edward Nunez @ CyberArk BizDev (@enunez-cyberark, @cyberark-bizdev, @erasmix)\nversion_added: 2.4\ndescription:\n    - Authenticates to CyberArk Vault using Privileged Account Security Web Services SDK and\n      creates a session fact that can be used by other modules. It returns an Ansible fact\n      called I(cyberark_session). Every module can use this fact as C(cyberark_session) parameter.\n\n\noptions:\n    state:\n        default: present\n        choices: [present, absent]\n        description:\n            - Specifies if an authentication logon/logoff and a cyberark_session should be added/removed.\n    username:\n        description:\n            - The name of the user who will logon to the Vault.\n    password:\n        description:\n            - The password of the user.\n    new_password:\n        description:\n            - The new password of the user. This parameter is optional, and enables you to change a password.\n    api_base_url:\n        description:\n            - A string containing the base URL of the server hosting CyberArk's Privileged Account Security Web Services SDK.\n    validate_certs:\n        type: bool\n        default: 'yes'\n        description:\n            - If C(false), SSL certificates will not be validated.  This should only\n              set to C(false) used on personally controlled sites using self-signed\n              certificates.\n    use_shared_logon_authentication:\n        type: bool\n        default: 'no'\n        description:\n            - Whether or not Shared Logon Authentication will be used.\n    use_radius_authentication:\n        type: bool\n        default: 'no'\n        description:\n            - Whether or not users will be authenticated via a RADIUS server. Valid values are true/false.\n    cyberark_session:\n        description:\n            - Dictionary set by a CyberArk authentication containing the different values to perform actions on a logged-on CyberArk session.\n'''\n\nEXAMPLES = '''\n- name: Logon to CyberArk Vault using PAS Web Services SDK - use_shared_logon_authentication\n  cyberark_authentication:\n    api_base_url: \"{{ web_services_base_url }}\"\n    use_shared_logon_authentication: yes\n\n- name: Logon to CyberArk Vault using PAS Web Services SDK - Not use_shared_logon_authentication\n  cyberark_authentication:\n    api_base_url: \"{{ web_services_base_url }}\"\n    username: \"{{ password_object.password }}\"\n    password: \"{{ password_object.passprops.username }}\"\n    use_shared_logon_authentication: no\n\n- name: Logoff from CyberArk Vault\n  cyberark_authentication:\n    state: absent\n    cyberark_session: \"{{ cyberark_session }}\"\n'''\n\nRETURN = '''\ncyberark_session:\n    description: Authentication facts.\n    returned: success\n    type: dict\n    sample:\n        api_base_url:\n            description: Base URL for API calls. Returned in the cyberark_session, so it can be used in subsequent calls.\n            type: string\n            returned: always\n        token:\n            description: The token that identifies the session, encoded in BASE 64.\n            type: string\n            returned: always\n        use_shared_logon_authentication:\n            description: Whether or not Shared Logon Authentication was used to establish the session.\n            type: bool\n            returned: always\n        validate_certs:\n            description: Whether or not SSL certificates should be validated.\n            type: bool\n            returned: always\n'''\n\nfrom ansible.module_utils._text import to_text\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.urls import open_url\nfrom ansible.module_utils.six.moves.urllib.error import HTTPError\nimport json\ntry:\n    import httplib\nexcept ImportError:\n    # Python 3\n    import http.client as httplib\n\n\ndef processAuthentication(module):\n\n    # Getting parameters from module\n\n    api_base_url = module.params[\"api_base_url\"]\n    validate_certs = module.params[\"validate_certs\"]\n    username = module.params[\"username\"]\n    password = module.params[\"password\"]\n    new_password = module.params[\"new_password\"]\n    use_shared_logon_authentication = module.params[\n        \"use_shared_logon_authentication\"]\n    use_radius_authentication = module.params[\"use_radius_authentication\"]\n    state = module.params[\"state\"]\n    cyberark_session = module.params[\"cyberark_session\"]\n\n    # if in check mode it will not perform password changes\n    if module.check_mode and new_password is not None:\n        new_password = None\n\n    # Defining initial values for open_url call\n    headers = {'Content-Type': 'application/json'}\n    payload = \"\"\n\n    if state == \"present\":  # Logon Action\n\n        # Different end_points based on the use of shared logon authentication\n        if use_shared_logon_authentication:\n\n            end_point = \"/PasswordVault/WebServices/auth/Shared/RestfulAuthenticationService.svc/Logon\"\n\n        else:\n\n            end_point = \"/PasswordVault/WebServices/auth/Cyberark/CyberArkAuthenticationService.svc/Logon\"\n\n            # The payload will contain username, password\n            # and optionally use_radius_authentication and new_password\n            payload_dict = {\"username\": username, \"password\": password}\n\n            if use_radius_authentication:\n                payload_dict[\"useRadiusAuthentication\"] = use_radius_authentication\n\n            if new_password is not None:\n                payload_dict[\"newPassword\"] = new_password\n\n            payload = json.dumps(payload_dict)\n\n    else:  # Logoff Action\n\n        # Get values from cyberark_session already established\n        api_base_url = cyberark_session[\"api_base_url\"]\n        validate_certs = cyberark_session[\"validate_certs\"]\n        use_shared_logon_authentication = cyberark_session[\n            \"use_shared_logon_authentication\"]\n        headers[\"Authorization\"] = cyberark_session[\"token\"]\n\n        # Different end_points based on the use of shared logon authentication\n        if use_shared_logon_authentication:\n            end_point = \"/PasswordVault/WebServices/auth/Shared/RestfulAuthenticationService.svc/Logoff\"\n        else:\n            end_point = \"/PasswordVault/WebServices/auth/Cyberark/CyberArkAuthenticationService.svc/Logoff\"\n\n    result = None\n    changed = False\n    response = None\n\n    try:\n\n        response = open_url(\n            api_base_url + end_point,\n            method=\"POST\",\n            headers=headers,\n            data=payload,\n            validate_certs=validate_certs)\n\n    except (HTTPError, httplib.HTTPException) as http_exception:\n\n        module.fail_json(\n            msg=(\"Error while performing authentication.\"\n                 \"Please validate parameters provided, and ability to logon to CyberArk.\"\n                 \"\\n*** end_point=%s%s\\n ==> %s\" % (api_base_url, end_point, to_text(http_exception))),\n            payload=payload,\n            headers=headers,\n            status_code=http_exception.code)\n\n    except Exception as unknown_exception:\n\n        module.fail_json(\n            msg=(\"Unknown error while performing authentication.\"\n                 \"\\n*** end_point=%s%s\\n%s\" % (api_base_url, end_point, to_text(unknown_exception))),\n            payload=payload,\n            headers=headers,\n            status_code=-1)\n\n    if response.getcode() == 200:  # Success\n\n        if state == \"present\":  # Logon Action\n\n            # Result token from REST Api uses a different key based\n            # the use of shared logon authentication\n            token = None\n            try:\n                if use_shared_logon_authentication:\n                    token = json.loads(response.read())[\"LogonResult\"]\n                else:\n                    token = json.loads(response.read())[\"CyberArkLogonResult\"]\n            except Exception as e:\n                module.fail_json(\n                    msg=\"Error obtaining token\\n%s\" % (to_text(e)),\n                    payload=payload,\n                    headers=headers,\n                    status_code=-1)\n\n            # Preparing result of the module\n            result = {\n                \"cyberark_session\": {\n                    \"token\": token, \"api_base_url\": api_base_url, \"validate_certs\": validate_certs,\n                    \"use_shared_logon_authentication\": use_shared_logon_authentication},\n            }\n\n            if new_password is not None:\n                # Only marks change if new_password was received resulting\n                # in a password change\n                changed = True\n\n        else:  # Logoff Action clears cyberark_session\n\n            result = {\n                \"cyberark_session\": {}\n            }\n\n        return (changed, result, response.getcode())\n\n    else:\n        module.fail_json(\n            msg=\"error in end_point=>\" +\n            end_point,\n            headers=headers)\n\n\ndef main():\n\n    fields = {\n        \"api_base_url\": {\"type\": \"str\"},\n        \"validate_certs\": {\"type\": \"bool\",\n                           \"default\": \"true\"},\n        \"username\": {\"type\": \"str\"},\n        \"password\": {\"type\": \"str\", \"no_log\": True},\n        \"new_password\": {\"type\": \"str\", \"no_log\": True},\n        \"use_shared_logon_authentication\": {\"default\": False, \"type\": \"bool\"},\n        \"use_radius_authentication\": {\"default\": False, \"type\": \"bool\"},\n        \"state\": {\"type\": \"str\",\n                  \"choices\": [\"present\", \"absent\"],\n                  \"default\": \"present\"},\n        \"cyberark_session\": {\"type\": \"dict\"},\n    }\n\n    mutually_exclusive = [\n        [\"use_shared_logon_authentication\", \"use_radius_authentication\"],\n        [\"use_shared_logon_authentication\", \"new_password\"],\n        [\"api_base_url\", \"cyberark_session\"],\n        [\"cyberark_session\", \"username\", \"use_shared_logon_authentication\"]\n    ]\n\n    required_if = [\n        (\"state\", \"present\", [\"api_base_url\"]),\n        (\"state\", \"absent\", [\"cyberark_session\"])\n    ]\n\n    required_together = [\n        [\"username\", \"password\"]\n    ]\n\n    module = AnsibleModule(\n        argument_spec=fields,\n        mutually_exclusive=mutually_exclusive,\n        required_if=required_if,\n        required_together=required_together,\n        supports_check_mode=True)\n\n    (changed, result, status_code) = processAuthentication(module)\n\n    module.exit_json(\n        changed=changed,\n        ansible_facts=result,\n        status_code=status_code)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "cyberark_authentication.py", "id": "cc10039f723c631e8a231f00500729b6", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/cyberark/cyberark_authentication.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}