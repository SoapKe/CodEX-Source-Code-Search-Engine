{"author": "tornadoweb", "code": "\nfrom __future__ import absolute_import, division, print_function\n\nimport contextlib\nimport errno\nimport os\nimport random\nimport signal\nimport socket\nimport subprocess\nimport sys\nimport time\nimport urllib2\n\ntry:\n    xrange\nexcept NameError:\n    xrange = range\n\nif __name__ == \"__main__\":\n    tornado_root = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                                '../../..'))\n    \n    port = random.randrange(10000, 11000)\n    ?\n    proc = subprocess.Popen([sys.executable,\n                             \"/usr/local/bin/dev_appserver.py\",\n                             os.path.dirname(os.path.abspath(__file__)),\n                             \"--port=%d\" % port,\n                             \"--skip_sdk_update_check\",\n                             ],\n                            cwd=tornado_root)\n\n    try:\n        for i in xrange(50):\n            with contextlib.closing(socket.socket()) as sock:\n                err = sock.connect_ex(('localhost', port))\n                if err == 0:\n                    break\n                elif err != errno.ECONNREFUSED:\n                    raise Exception(\"Got unexpected socket error %d\" % err)\n                time.sleep(0.1)\n        else:\n            raise Exception(\"Server didn't start listening\")\n\n        resp = urllib2.urlopen(\"http://localhost:%d/\" % port)\n        print(resp.read())\n    finally:\n        # dev_appserver sometimes ignores SIGTERM (especially on 2.5),\n        \n        for sig in [signal.SIGTERM, signal.SIGTERM, signal.SIGKILL]:\n            os.kill(proc.pid, sig)\n            res = os.waitpid(proc.pid, os.WNOHANG)\n            if res != (0, 0):\n                break\n            time.sleep(0.1)\n        else:\n            os.waitpid(proc.pid, 0)\n", "comments": "   usr bin env python    dev appserver seem set so reuseaddr    dev appserver py ever live anywhere  usr local bin     dev appserver sometimes ignores sigterm (especially 2 5)     try times kill  ", "content": "#!/usr/bin/env python\nfrom __future__ import absolute_import, division, print_function\n\nimport contextlib\nimport errno\nimport os\nimport random\nimport signal\nimport socket\nimport subprocess\nimport sys\nimport time\nimport urllib2\n\ntry:\n    xrange\nexcept NameError:\n    xrange = range\n\nif __name__ == \"__main__\":\n    tornado_root = os.path.abspath(os.path.join(os.path.dirname(__file__),\n                                                '../../..'))\n    # dev_appserver doesn't seem to set SO_REUSEADDR\n    port = random.randrange(10000, 11000)\n    # does dev_appserver.py ever live anywhere but /usr/local/bin?\n    proc = subprocess.Popen([sys.executable,\n                             \"/usr/local/bin/dev_appserver.py\",\n                             os.path.dirname(os.path.abspath(__file__)),\n                             \"--port=%d\" % port,\n                             \"--skip_sdk_update_check\",\n                             ],\n                            cwd=tornado_root)\n\n    try:\n        for i in xrange(50):\n            with contextlib.closing(socket.socket()) as sock:\n                err = sock.connect_ex(('localhost', port))\n                if err == 0:\n                    break\n                elif err != errno.ECONNREFUSED:\n                    raise Exception(\"Got unexpected socket error %d\" % err)\n                time.sleep(0.1)\n        else:\n            raise Exception(\"Server didn't start listening\")\n\n        resp = urllib2.urlopen(\"http://localhost:%d/\" % port)\n        print(resp.read())\n    finally:\n        # dev_appserver sometimes ignores SIGTERM (especially on 2.5),\n        # so try a few times to kill it.\n        for sig in [signal.SIGTERM, signal.SIGTERM, signal.SIGKILL]:\n            os.kill(proc.pid, sig)\n            res = os.waitpid(proc.pid, os.WNOHANG)\n            if res != (0, 0):\n                break\n            time.sleep(0.1)\n        else:\n            os.waitpid(proc.pid, 0)\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "runtests.py", "id": "bcf346f900751867665c57bd43973c7a", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tornadoweb-tornado/tornadoweb-tornado-62e43f6/maint/test/appengine/py27/runtests.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:11:42Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}