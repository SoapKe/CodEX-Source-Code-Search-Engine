{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass RTPIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?rtp\\.pt/play/p(?P<program_id>[0-9]+)/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.rtp.pt/play/p405/e174042/paixoes-cruzadas',\n        'md5': 'e736ce0c665e459ddb818546220b4ef8',\n        'info_dict': {\n            'id': 'e174042',\n            'ext': 'mp3',\n            'title': 'Paix\u00f5es Cruzadas',\n            'description': 'As paix\u00f5es musicais de Ant\u00f3nio Cartaxo e Ant\u00f3nio Macedo',\n            'thumbnail': r're:^https?://.*\\.jpg',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.rtp.pt/play/p831/a-quimica-das-coisas',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        title = self._html_search_meta(\n            'twitter:title', webpage, display_name='title', fatal=True)\n        description = self._html_search_meta('description', webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        player_config = self._search_regex(\n            r'(?s)RTPPLAY\\.player\\.newPlayer\\(\\s*(\\{.*?\\})\\s*\\)', webpage, 'player config')\n        config = self._parse_json(player_config, video_id)\n\n        path, ext = config.get('file').rsplit('.', 1)\n        formats = [{\n            'format_id': 'rtmp',\n            'ext': ext,\n            'vcodec': config.get('type') == 'audio' and 'none' or None,\n            'preference': -2,\n            'url': 'rtmp://{streamer:s}/{application:s}'.format(**config),\n            'app': config.get('application'),\n            'play_path': '{ext:s}:{path:s}'.format(ext=ext, path=path),\n            'page_url': url,\n            'rtmp_live': config.get('live', False),\n            'player_url': 'http://programas.rtp.pt/play/player.swf?v3',\n            'rtmp_real_time': True,\n        }]\n\n        \n        replacements = {\n            'audio': {\n                'format_id': 'mp3',\n                'pattern': r'^nas2\\.share/wavrss/',\n                'repl': 'http://rsspod.rtp.pt/podcasts/',\n                'vcodec': 'none',\n            },\n            'video': {\n                'format_id': 'mp4_h264',\n                'pattern': r'^nas2\\.share/h264/',\n                'repl': 'http://rsspod.rtp.pt/videocasts/',\n                'vcodec': 'h264',\n            },\n        }\n        r = replacements[config['type']]\n        if re.match(r['pattern'], config['file']) is not None:\n            formats.append({\n                'format_id': r['format_id'],\n                'url': re.sub(r['pattern'], r['repl'], config['file']),\n                'vcodec': r['vcodec'],\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n#]+)/?'\n# rtmp download\n# Construct regular HTTP download URLs\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\n\n\nclass RTPIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?rtp\\.pt/play/p(?P<program_id>[0-9]+)/(?P<id>[^/?#]+)/?'\n    _TESTS = [{\n        'url': 'http://www.rtp.pt/play/p405/e174042/paixoes-cruzadas',\n        'md5': 'e736ce0c665e459ddb818546220b4ef8',\n        'info_dict': {\n            'id': 'e174042',\n            'ext': 'mp3',\n            'title': 'Paix\u00f5es Cruzadas',\n            'description': 'As paix\u00f5es musicais de Ant\u00f3nio Cartaxo e Ant\u00f3nio Macedo',\n            'thumbnail': r're:^https?://.*\\.jpg',\n        },\n        'params': {\n            # rtmp download\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.rtp.pt/play/p831/a-quimica-das-coisas',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n        title = self._html_search_meta(\n            'twitter:title', webpage, display_name='title', fatal=True)\n        description = self._html_search_meta('description', webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        player_config = self._search_regex(\n            r'(?s)RTPPLAY\\.player\\.newPlayer\\(\\s*(\\{.*?\\})\\s*\\)', webpage, 'player config')\n        config = self._parse_json(player_config, video_id)\n\n        path, ext = config.get('file').rsplit('.', 1)\n        formats = [{\n            'format_id': 'rtmp',\n            'ext': ext,\n            'vcodec': config.get('type') == 'audio' and 'none' or None,\n            'preference': -2,\n            'url': 'rtmp://{streamer:s}/{application:s}'.format(**config),\n            'app': config.get('application'),\n            'play_path': '{ext:s}:{path:s}'.format(ext=ext, path=path),\n            'page_url': url,\n            'rtmp_live': config.get('live', False),\n            'player_url': 'http://programas.rtp.pt/play/player.swf?v3',\n            'rtmp_real_time': True,\n        }]\n\n        # Construct regular HTTP download URLs\n        replacements = {\n            'audio': {\n                'format_id': 'mp3',\n                'pattern': r'^nas2\\.share/wavrss/',\n                'repl': 'http://rsspod.rtp.pt/podcasts/',\n                'vcodec': 'none',\n            },\n            'video': {\n                'format_id': 'mp4_h264',\n                'pattern': r'^nas2\\.share/h264/',\n                'repl': 'http://rsspod.rtp.pt/videocasts/',\n                'vcodec': 'h264',\n            },\n        }\n        r = replacements[config['type']]\n        if re.match(r['pattern'], config['file']) is not None:\n            formats.append({\n                'format_id': r['format_id'],\n                'url': re.sub(r['pattern'], r['repl'], config['file']),\n                'vcodec': r['vcodec'],\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rtp.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rtp.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}