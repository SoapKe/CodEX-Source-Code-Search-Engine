{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry.interfaces.contexts import Contexts\nfrom sentry.testutils import TestCase\n\n\nclass ContextsTest(TestCase):\n    def test_os(self):\n        ctx = Contexts.to_python({\n            'os': {\n                'name': 'Windows',\n                'version': '95',\n                'rooted': True,\n            },\n        })\n        assert sorted(ctx.iter_tags()) == [\n            ('os', 'Windows 95'),\n            ('os.name', 'Windows'),\n            ('os.rooted', 'yes'),\n        ]\n        assert ctx.to_json() == {\n            'os': {\n                'type': 'os',\n                'name': 'Windows',\n                'version': '95',\n                'rooted': True,\n            }\n        }\n\n    def test_runtime(self):\n        ctx = Contexts.to_python(\n            {\n                'runtime': {\n                    'name': 'Java',\n                    'version': '1.2.3',\n                    'build': 'BLAH',\n                },\n            }\n        )\n        assert sorted(ctx.iter_tags()) == [\n            ('runtime', 'Java 1.2.3'),\n            ('runtime.name', 'Java'),\n        ]\n        assert ctx.to_json() == {\n            'runtime': {\n                'type': 'runtime',\n                'name': 'Java',\n                'version': '1.2.3',\n                'build': 'BLAH',\n            }\n        }\n\n    def test_device(self):\n        ctx = Contexts.to_python(\n            {\n                'device': {\n                    'name': 'My iPad',\n                    'model': 'iPad',\n                    'model_id': '1234AB',\n                    'version': '1.2.3',\n                    'arch': 'arm64',\n                },\n            }\n        )\n        assert sorted(ctx.iter_tags()) == [\n            ('device', 'iPad'),\n        ]\n        assert ctx.to_json() == {\n            'device': {\n                'type': 'device',\n                'name': 'My iPad',\n                'model': 'iPad',\n                'model_id': '1234AB',\n                'version': '1.2.3',\n                'arch': 'arm64',\n            }\n        }\n\n    def test_device_with_alias(self):\n        ctx = Contexts.to_python(\n            {\n                'my_device': {\n                    'type': 'device',\n                    'title': 'My Title',\n                    'name': 'My iPad',\n                    'model': 'iPad',\n                    'model_id': '1234AB',\n                    'version': '1.2.3',\n                    'arch': 'arm64',\n                },\n            }\n        )\n        assert sorted(ctx.iter_tags()) == [('my_device', 'iPad')]\n        assert ctx.to_json() == {\n            'my_device': {\n                'type': 'device',\n                'title': 'My Title',\n                'name': 'My iPad',\n                'model': 'iPad',\n                'model_id': '1234AB',\n                'version': '1.2.3',\n                'arch': 'arm64',\n            }\n        }\n\n    def test_default(self):\n        ctx = Contexts.to_python(\n            {\n                'whatever': {\n                    'foo': 'bar',\n                    'blub': 'blah',\n                    'biz': [1, 2, 3],\n                    'baz': {\n                        'foo': 'bar'\n                    },\n                },\n            }\n        )\n        assert sorted(ctx.iter_tags()) == []\n        assert ctx.to_json() == {\n            'whatever': {\n                'type': 'default',\n                'foo': 'bar',\n                'blub': 'blah',\n                'biz': [1, 2, 3],\n                'baz': {\n                    'foo': 'bar'\n                },\n            }\n        }\n\n    def test_path(self):\n        assert Contexts().get_path() == 'contexts'\n\n    def test_app(self):\n        ctx = Contexts.to_python({\n            'app': {\n                'app_id': '1234',\n                'device_app_hash': '5678',\n            },\n        })\n        assert sorted(ctx.iter_tags()) == [\n            ('app.device', '5678'),\n        ]\n        assert ctx.to_json() == {\n            'app': {\n                'type': 'app',\n                'app_id': '1234',\n                'device_app_hash': '5678',\n            }\n        }\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry.interfaces.contexts import Contexts\nfrom sentry.testutils import TestCase\n\n\nclass ContextsTest(TestCase):\n    def test_os(self):\n        ctx = Contexts.to_python({\n            'os': {\n                'name': 'Windows',\n                'version': '95',\n                'rooted': True,\n            },\n        })\n        assert sorted(ctx.iter_tags()) == [\n            ('os', 'Windows 95'),\n            ('os.name', 'Windows'),\n            ('os.rooted', 'yes'),\n        ]\n        assert ctx.to_json() == {\n            'os': {\n                'type': 'os',\n                'name': 'Windows',\n                'version': '95',\n                'rooted': True,\n            }\n        }\n\n    def test_runtime(self):\n        ctx = Contexts.to_python(\n            {\n                'runtime': {\n                    'name': 'Java',\n                    'version': '1.2.3',\n                    'build': 'BLAH',\n                },\n            }\n        )\n        assert sorted(ctx.iter_tags()) == [\n            ('runtime', 'Java 1.2.3'),\n            ('runtime.name', 'Java'),\n        ]\n        assert ctx.to_json() == {\n            'runtime': {\n                'type': 'runtime',\n                'name': 'Java',\n                'version': '1.2.3',\n                'build': 'BLAH',\n            }\n        }\n\n    def test_device(self):\n        ctx = Contexts.to_python(\n            {\n                'device': {\n                    'name': 'My iPad',\n                    'model': 'iPad',\n                    'model_id': '1234AB',\n                    'version': '1.2.3',\n                    'arch': 'arm64',\n                },\n            }\n        )\n        assert sorted(ctx.iter_tags()) == [\n            ('device', 'iPad'),\n        ]\n        assert ctx.to_json() == {\n            'device': {\n                'type': 'device',\n                'name': 'My iPad',\n                'model': 'iPad',\n                'model_id': '1234AB',\n                'version': '1.2.3',\n                'arch': 'arm64',\n            }\n        }\n\n    def test_device_with_alias(self):\n        ctx = Contexts.to_python(\n            {\n                'my_device': {\n                    'type': 'device',\n                    'title': 'My Title',\n                    'name': 'My iPad',\n                    'model': 'iPad',\n                    'model_id': '1234AB',\n                    'version': '1.2.3',\n                    'arch': 'arm64',\n                },\n            }\n        )\n        assert sorted(ctx.iter_tags()) == [('my_device', 'iPad')]\n        assert ctx.to_json() == {\n            'my_device': {\n                'type': 'device',\n                'title': 'My Title',\n                'name': 'My iPad',\n                'model': 'iPad',\n                'model_id': '1234AB',\n                'version': '1.2.3',\n                'arch': 'arm64',\n            }\n        }\n\n    def test_default(self):\n        ctx = Contexts.to_python(\n            {\n                'whatever': {\n                    'foo': 'bar',\n                    'blub': 'blah',\n                    'biz': [1, 2, 3],\n                    'baz': {\n                        'foo': 'bar'\n                    },\n                },\n            }\n        )\n        assert sorted(ctx.iter_tags()) == []\n        assert ctx.to_json() == {\n            'whatever': {\n                'type': 'default',\n                'foo': 'bar',\n                'blub': 'blah',\n                'biz': [1, 2, 3],\n                'baz': {\n                    'foo': 'bar'\n                },\n            }\n        }\n\n    def test_path(self):\n        assert Contexts().get_path() == 'contexts'\n\n    def test_app(self):\n        ctx = Contexts.to_python({\n            'app': {\n                'app_id': '1234',\n                'device_app_hash': '5678',\n            },\n        })\n        assert sorted(ctx.iter_tags()) == [\n            ('app.device', '5678'),\n        ]\n        assert ctx.to_json() == {\n            'app': {\n                'type': 'app',\n                'app_id': '1234',\n                'device_app_hash': '5678',\n            }\n        }\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_contexts.py", "id": "b9c332321145ea478048b814f26efd13", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_contexts.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}