{"author": "django", "code": "import operator\nimport unittest\nfrom collections import namedtuple\nfrom contextlib import contextmanager\n\nfrom django.db import connection, models\nfrom django.test import TestCase\n\nfrom ..models import Person\n\n\n@unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL tests')\nclass ServerSideCursorsPostgres(TestCase):\n    cursor_fields = 'name, statement, is_holdable, is_binary, is_scrollable, creation_time'\n    PostgresCursor = namedtuple('PostgresCursor', cursor_fields)\n\n    @classmethod\n    def setUpTestData(cls):\n        Person.objects.create(first_name='a', last_name='a')\n        Person.objects.create(first_name='b', last_name='b')\n\n    def inspect_cursors(self):\n        with connection.cursor() as cursor:\n            cursor.execute('SELECT {fields} FROM pg_cursors;'.format(fields=self.cursor_fields))\n            cursors = cursor.fetchall()\n        return [self.PostgresCursor._make(cursor) for cursor in cursors]\n\n    @contextmanager\n    def override_db_setting(self, **kwargs):\n        for setting in kwargs:\n            original_value = connection.settings_dict.get(setting)\n            if setting in connection.settings_dict:\n                self.addCleanup(operator.setitem, connection.settings_dict, setting, original_value)\n            else:\n                self.addCleanup(operator.delitem, connection.settings_dict, setting)\n\n            connection.settings_dict[setting] = kwargs[setting]\n            yield\n\n    def assertUsesCursor(self, queryset, num_expected=1):\n        next(queryset)  \n        cursors = self.inspect_cursors()\n        self.assertEqual(len(cursors), num_expected)\n        for cursor in cursors:\n            self.assertIn('_django_curs_', cursor.name)\n            self.assertFalse(cursor.is_scrollable)\n            self.assertFalse(cursor.is_holdable)\n            self.assertFalse(cursor.is_binary)\n\n    def asserNotUsesCursor(self, queryset):\n        self.assertUsesCursor(queryset, num_expected=0)\n\n    def test_server_side_cursor(self):\n        self.assertUsesCursor(Person.objects.iterator())\n\n    def test_values(self):\n        self.assertUsesCursor(Person.objects.values('first_name').iterator())\n\n    def test_values_list(self):\n        self.assertUsesCursor(Person.objects.values_list('first_name').iterator())\n\n    def test_values_list_flat(self):\n        self.assertUsesCursor(Person.objects.values_list('first_name', flat=True).iterator())\n\n    def test_values_list_fields_not_equal_to_names(self):\n        expr = models.Count('id')\n        self.assertUsesCursor(Person.objects.annotate(id__count=expr).values_list(expr, 'id__count').iterator())\n\n    def test_server_side_cursor_many_cursors(self):\n        persons = Person.objects.iterator()\n        persons2 = Person.objects.iterator()\n        next(persons)  \n        self.assertUsesCursor(persons2, num_expected=2)\n\n    def test_closed_server_side_cursor(self):\n        persons = Person.objects.iterator()\n        next(persons)  \n        del persons\n        cursors = self.inspect_cursors()\n        self.assertEqual(len(cursors), 0)\n\n    def test_server_side_cursors_setting(self):\n        with self.override_db_setting(DISABLE_SERVER_SIDE_CURSORS=False):\n            persons = Person.objects.iterator()\n            self.assertUsesCursor(persons)\n            del persons  \n\n        with self.override_db_setting(DISABLE_SERVER_SIDE_CURSORS=True):\n            self.asserNotUsesCursor(Person.objects.iterator())\n", "comments": "  open server side cursor    open server side cursor    open server side cursor    close server side cursor ", "content": "import operator\nimport unittest\nfrom collections import namedtuple\nfrom contextlib import contextmanager\n\nfrom django.db import connection, models\nfrom django.test import TestCase\n\nfrom ..models import Person\n\n\n@unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL tests')\nclass ServerSideCursorsPostgres(TestCase):\n    cursor_fields = 'name, statement, is_holdable, is_binary, is_scrollable, creation_time'\n    PostgresCursor = namedtuple('PostgresCursor', cursor_fields)\n\n    @classmethod\n    def setUpTestData(cls):\n        Person.objects.create(first_name='a', last_name='a')\n        Person.objects.create(first_name='b', last_name='b')\n\n    def inspect_cursors(self):\n        with connection.cursor() as cursor:\n            cursor.execute('SELECT {fields} FROM pg_cursors;'.format(fields=self.cursor_fields))\n            cursors = cursor.fetchall()\n        return [self.PostgresCursor._make(cursor) for cursor in cursors]\n\n    @contextmanager\n    def override_db_setting(self, **kwargs):\n        for setting in kwargs:\n            original_value = connection.settings_dict.get(setting)\n            if setting in connection.settings_dict:\n                self.addCleanup(operator.setitem, connection.settings_dict, setting, original_value)\n            else:\n                self.addCleanup(operator.delitem, connection.settings_dict, setting)\n\n            connection.settings_dict[setting] = kwargs[setting]\n            yield\n\n    def assertUsesCursor(self, queryset, num_expected=1):\n        next(queryset)  # Open a server-side cursor\n        cursors = self.inspect_cursors()\n        self.assertEqual(len(cursors), num_expected)\n        for cursor in cursors:\n            self.assertIn('_django_curs_', cursor.name)\n            self.assertFalse(cursor.is_scrollable)\n            self.assertFalse(cursor.is_holdable)\n            self.assertFalse(cursor.is_binary)\n\n    def asserNotUsesCursor(self, queryset):\n        self.assertUsesCursor(queryset, num_expected=0)\n\n    def test_server_side_cursor(self):\n        self.assertUsesCursor(Person.objects.iterator())\n\n    def test_values(self):\n        self.assertUsesCursor(Person.objects.values('first_name').iterator())\n\n    def test_values_list(self):\n        self.assertUsesCursor(Person.objects.values_list('first_name').iterator())\n\n    def test_values_list_flat(self):\n        self.assertUsesCursor(Person.objects.values_list('first_name', flat=True).iterator())\n\n    def test_values_list_fields_not_equal_to_names(self):\n        expr = models.Count('id')\n        self.assertUsesCursor(Person.objects.annotate(id__count=expr).values_list(expr, 'id__count').iterator())\n\n    def test_server_side_cursor_many_cursors(self):\n        persons = Person.objects.iterator()\n        persons2 = Person.objects.iterator()\n        next(persons)  # Open a server-side cursor\n        self.assertUsesCursor(persons2, num_expected=2)\n\n    def test_closed_server_side_cursor(self):\n        persons = Person.objects.iterator()\n        next(persons)  # Open a server-side cursor\n        del persons\n        cursors = self.inspect_cursors()\n        self.assertEqual(len(cursors), 0)\n\n    def test_server_side_cursors_setting(self):\n        with self.override_db_setting(DISABLE_SERVER_SIDE_CURSORS=False):\n            persons = Person.objects.iterator()\n            self.assertUsesCursor(persons)\n            del persons  # Close server-side cursor\n\n        with self.override_db_setting(DISABLE_SERVER_SIDE_CURSORS=True):\n            self.asserNotUsesCursor(Person.objects.iterator())\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_server_side_cursors.py", "id": "7bf04dbe4866d335d4a0be0f6592a413", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/backends/postgresql/test_server_side_cursors.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}