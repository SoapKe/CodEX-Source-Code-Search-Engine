{
  "author": "rg3",
  "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    parse_iso8601,\n    xpath_with_ns,\n    xpath_text,\n    int_or_none,\n)\n\n\nclass ZapiksIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?zapiks\\.(?:fr|com)/(?:(?:[a-z]{2}/)?(?P<display_id>.+?)\\.html|index\\.php\\?.*\\bmedia_id=(?P<id>\\d+))'\n    _TESTS = [\n        {\n            'url': 'http://www.zapiks.fr/ep2s3-bon-appetit-eh-be-viva.html',\n            'md5': 'aeb3c473b2d564b2d46d664d28d5f050',\n            'info_dict': {\n                'id': '80798',\n                'ext': 'mp4',\n                'title': 'EP2S3 - Bon App\u00e9tit - Eh b\u00e9 viva les pyr\u00e9n\u00e9es con!',\n                'description': 'md5:7054d6f6f620c6519be1fe710d4da847',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 528,\n                'timestamp': 1359044972,\n                'upload_date': '20130124',\n                'view_count': int,\n                'comment_count': int,\n            },\n        },\n        {\n            'url': 'http://www.zapiks.com/ep3s5-bon-appetit-baqueira-m-1.html',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.zapiks.com/nl/ep3s5-bon-appetit-baqueira-m-1.html',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.zapiks.fr/index.php?action=playerIframe&amp;media_id=118046&amp;width=640&amp;height=360&amp;autoStart=false&amp;language=fr',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        if not video_id:\n            video_id = self._search_regex(\n                r'data-media-id=\"(\\d+)\"', webpage, 'video id')\n\n        playlist = self._download_xml(\n            'http://www.zapiks.fr/view/index.php?action=playlist&media_id=%s&lang=en' % video_id,\n            display_id)\n\n        NS_MAP = {\n            'jwplayer': 'http://rss.jwpcdn.com/'\n        }\n\n        def ns(path):\n            return xpath_with_ns(path, NS_MAP)\n\n        item = playlist.find('./channel/item')\n\n        title = xpath_text(item, 'title', 'title') or self._og_search_title(webpage)\n        description = self._og_search_description(webpage, default=None)\n        thumbnail = xpath_text(\n            item, ns('./jwplayer:image'), 'thumbnail') or self._og_search_thumbnail(webpage, default=None)\n        duration = parse_duration(self._html_search_meta(\n            'duration', webpage, 'duration', default=None))\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage, 'upload date', default=None), ' ')\n\n        view_count = int_or_none(self._search_regex(\n            r'UserPlays:(\\d+)', webpage, 'view count', default=None))\n        comment_count = int_or_none(self._search_regex(\n            r'UserComments:(\\d+)', webpage, 'comment count', default=None))\n\n        formats = []\n        for source in item.findall(ns('./jwplayer:source')):\n            format_id = source.attrib['label']\n            f = {\n                'url': source.attrib['file'],\n                'format_id': format_id,\n            }\n            m = re.search(r'^(?P<height>\\d+)[pP]', format_id)\n            if m:\n                f['height'] = int(m.group('height'))\n            formats.append(f)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'formats': formats,\n        }\n",
  "comments": "# coding: utf-8\n",
  "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    parse_iso8601,\n    xpath_with_ns,\n    xpath_text,\n    int_or_none,\n)\n\n\nclass ZapiksIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?zapiks\\.(?:fr|com)/(?:(?:[a-z]{2}/)?(?P<display_id>.+?)\\.html|index\\.php\\?.*\\bmedia_id=(?P<id>\\d+))'\n    _TESTS = [\n        {\n            'url': 'http://www.zapiks.fr/ep2s3-bon-appetit-eh-be-viva.html',\n            'md5': 'aeb3c473b2d564b2d46d664d28d5f050',\n            'info_dict': {\n                'id': '80798',\n                'ext': 'mp4',\n                'title': 'EP2S3 - Bon App\u00e9tit - Eh b\u00e9 viva les pyr\u00e9n\u00e9es con!',\n                'description': 'md5:7054d6f6f620c6519be1fe710d4da847',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 528,\n                'timestamp': 1359044972,\n                'upload_date': '20130124',\n                'view_count': int,\n                'comment_count': int,\n            },\n        },\n        {\n            'url': 'http://www.zapiks.com/ep3s5-bon-appetit-baqueira-m-1.html',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.zapiks.com/nl/ep3s5-bon-appetit-baqueira-m-1.html',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://www.zapiks.fr/index.php?action=playerIframe&amp;media_id=118046&amp;width=640&amp;height=360&amp;autoStart=false&amp;language=fr',\n            'only_matching': True,\n        },\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id') or video_id\n\n        webpage = self._download_webpage(url, display_id)\n\n        if not video_id:\n            video_id = self._search_regex(\n                r'data-media-id=\"(\\d+)\"', webpage, 'video id')\n\n        playlist = self._download_xml(\n            'http://www.zapiks.fr/view/index.php?action=playlist&media_id=%s&lang=en' % video_id,\n            display_id)\n\n        NS_MAP = {\n            'jwplayer': 'http://rss.jwpcdn.com/'\n        }\n\n        def ns(path):\n            return xpath_with_ns(path, NS_MAP)\n\n        item = playlist.find('./channel/item')\n\n        title = xpath_text(item, 'title', 'title') or self._og_search_title(webpage)\n        description = self._og_search_description(webpage, default=None)\n        thumbnail = xpath_text(\n            item, ns('./jwplayer:image'), 'thumbnail') or self._og_search_thumbnail(webpage, default=None)\n        duration = parse_duration(self._html_search_meta(\n            'duration', webpage, 'duration', default=None))\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage, 'upload date', default=None), ' ')\n\n        view_count = int_or_none(self._search_regex(\n            r'UserPlays:(\\d+)', webpage, 'view count', default=None))\n        comment_count = int_or_none(self._search_regex(\n            r'UserComments:(\\d+)', webpage, 'comment count', default=None))\n\n        formats = []\n        for source in item.findall(ns('./jwplayer:source')):\n            format_id = source.attrib['label']\n            f = {\n                'url': source.attrib['file'],\n                'format_id': format_id,\n            }\n            m = re.search(r'^(?P<height>\\d+)[pP]', format_id)\n            if m:\n                f['height'] = int(m.group('height'))\n            formats.append(f)\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'formats': formats,\n        }\n",
  "description": "Command-line program to download videos from YouTube.com and other video sites",
  "file_name": "zapiks.py",
  "language": "Python",
  "project_name": "youtube-dl",
  "quality": "",
  "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/zapiks.py",
  "save_time": "",
  "source": "",
  "update_at": "2018-03-07T09:18:39Z",
  "url": "https://github.com/rg3/youtube-dl",
  "wiki": false
}