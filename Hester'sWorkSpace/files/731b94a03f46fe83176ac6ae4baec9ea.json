{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\"\"\"Vocabulary class for an image-to-text model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport tensorflow as tf\n\n\nclass Vocabulary(object):\n  \"\"\"Vocabulary class for an image-to-text model.\"\"\"\n\n  def __init__(self,\n               vocab_file,\n               start_word=\"<S>\",\n               end_word=\"</S>\",\n               unk_word=\"<UNK>\"):\n    \"\"\"Initializes the vocabulary.\n\n    Args:\n      vocab_file: File containing the vocabulary, where the words are the first\n        whitespace-separated token on each line (other tokens are ignored) and\n        the word ids are the corresponding line numbers.\n      start_word: Special word denoting sentence start.\n      end_word: Special word denoting sentence end.\n      unk_word: Special word denoting unknown words.\n    \"\"\"\n    if not tf.gfile.Exists(vocab_file):\n      tf.logging.fatal(\"Vocab file %s not found.\", vocab_file)\n    tf.logging.info(\"Initializing vocabulary from file: %s\", vocab_file)\n\n    with tf.gfile.GFile(vocab_file, mode=\"r\") as f:\n      reverse_vocab = list(f.readlines())\n    reverse_vocab = [line.split()[0] for line in reverse_vocab]\n    assert start_word in reverse_vocab\n    assert end_word in reverse_vocab\n    if unk_word not in reverse_vocab:\n      reverse_vocab.append(unk_word)\n    vocab = dict([(x, y) for (y, x) in enumerate(reverse_vocab)])\n\n    tf.logging.info(\"Created vocabulary with %d words\" % len(vocab))\n\n    self.vocab = vocab   vocab[word] = id\n    self.reverse_vocab = reverse_vocab   reverse_vocab[id] = word\n\n     Save special word ids.\n    self.start_id = vocab[start_word]\n    self.end_id = vocab[end_word]\n    self.unk_id = vocab[unk_word]\n\n  def word_to_id(self, word):\n    \"\"\"Returns the integer word id of a word string.\"\"\"\n    if word in self.vocab:\n      return self.vocab[word]\n    else:\n      return self.unk_id\n\n  def id_to_word(self, word_id):\n    \"\"\"Returns the word string of an integer word id.\"\"\"\n    if word_id >= len(self.reverse_vocab):\n      return self.reverse_vocab[self.unk_id]\n    else:\n      return self.reverse_vocab[word_id]\n", "comments": "   vocabulary class image text model        future   import absolute import   future   import division   future   import print function   import tensorflow tf   class vocabulary(object)       vocabulary class image text model        def   init  (self                 vocab file                 start word   s                   end word    s                   unk word   unk  )         initializes vocabulary       args        vocab file  file containing vocabulary  words first         whitespace separated token line (other tokens ignored)         word ids corresponding line numbers        start word  special word denoting sentence start        end word  special word denoting sentence end        unk word  special word denoting unknown words              tf gfile exists(vocab file)        tf logging fatal( vocab file  found    vocab file)     tf logging info( initializing vocabulary file     vocab file)      tf gfile gfile(vocab file  mode  r ) f        reverse vocab   list(f readlines())     reverse vocab    line split() 0  line reverse vocab      assert start word reverse vocab     assert end word reverse vocab     unk word reverse vocab        reverse vocab append(unk word)     vocab   dict( (x  y) (y  x) enumerate(reverse vocab) )      tf logging info( created vocabulary  words    len(vocab))      self vocab   vocab    vocab word    id     self reverse vocab   reverse vocab    reverse vocab id    word        save special word ids      self start id   vocab start word      self end id   vocab end word      self unk id   vocab unk word     def word id(self  word)         returns integer word id word string         word self vocab        return self vocab word      else        return self unk id    def id word(self  word id)         returns word string integer word id        copyright 2016 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       vocab word    id    reverse vocab id    word    save special word ids  ", "content": "# Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Vocabulary class for an image-to-text model.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport tensorflow as tf\n\n\nclass Vocabulary(object):\n  \"\"\"Vocabulary class for an image-to-text model.\"\"\"\n\n  def __init__(self,\n               vocab_file,\n               start_word=\"<S>\",\n               end_word=\"</S>\",\n               unk_word=\"<UNK>\"):\n    \"\"\"Initializes the vocabulary.\n\n    Args:\n      vocab_file: File containing the vocabulary, where the words are the first\n        whitespace-separated token on each line (other tokens are ignored) and\n        the word ids are the corresponding line numbers.\n      start_word: Special word denoting sentence start.\n      end_word: Special word denoting sentence end.\n      unk_word: Special word denoting unknown words.\n    \"\"\"\n    if not tf.gfile.Exists(vocab_file):\n      tf.logging.fatal(\"Vocab file %s not found.\", vocab_file)\n    tf.logging.info(\"Initializing vocabulary from file: %s\", vocab_file)\n\n    with tf.gfile.GFile(vocab_file, mode=\"r\") as f:\n      reverse_vocab = list(f.readlines())\n    reverse_vocab = [line.split()[0] for line in reverse_vocab]\n    assert start_word in reverse_vocab\n    assert end_word in reverse_vocab\n    if unk_word not in reverse_vocab:\n      reverse_vocab.append(unk_word)\n    vocab = dict([(x, y) for (y, x) in enumerate(reverse_vocab)])\n\n    tf.logging.info(\"Created vocabulary with %d words\" % len(vocab))\n\n    self.vocab = vocab  # vocab[word] = id\n    self.reverse_vocab = reverse_vocab  # reverse_vocab[id] = word\n\n    # Save special word ids.\n    self.start_id = vocab[start_word]\n    self.end_id = vocab[end_word]\n    self.unk_id = vocab[unk_word]\n\n  def word_to_id(self, word):\n    \"\"\"Returns the integer word id of a word string.\"\"\"\n    if word in self.vocab:\n      return self.vocab[word]\n    else:\n      return self.unk_id\n\n  def id_to_word(self, word_id):\n    \"\"\"Returns the word string of an integer word id.\"\"\"\n    if word_id >= len(self.reverse_vocab):\n      return self.reverse_vocab[self.unk_id]\n    else:\n      return self.reverse_vocab[word_id]\n", "description": "Models and examples built with TensorFlow", "file_name": "vocabulary.py", "id": "731b94a03f46fe83176ac6ae4baec9ea", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/im2txt/im2txt/inference_utils/vocabulary.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}