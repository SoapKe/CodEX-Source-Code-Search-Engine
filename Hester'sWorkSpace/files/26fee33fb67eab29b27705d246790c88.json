{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport collections\nimport re\nimport sys\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    get_element_by_class,\n    int_or_none,\n    orderedSet,\n    remove_start,\n    str_to_int,\n    unescapeHTML,\n    unified_timestamp,\n    urlencode_postdata,\n)\nfrom .dailymotion import DailymotionIE\nfrom .pladform import PladformIE\nfrom .vimeo import VimeoIE\nfrom .youtube import YoutubeIE\n\n\nclass VKBaseIE(InfoExtractor):\n    _NETRC_MACHINE = 'vk'\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_page, url_handle = self._download_webpage_handle(\n            'https://vk.com', None, 'Downloading login page')\n\n        login_form = self._hidden_inputs(login_page)\n\n        login_form.update({\n            'email': username.encode('cp1251'),\n            'pass': password.encode('cp1251'),\n        })\n\n        \n        \n        \n        \n        \n        \n        \n        for header, cookies in url_handle.headers.items():\n            if header.lower() != 'set-cookie':\n                continue\n            if sys.version_info[0] >= 3:\n                cookies = cookies.encode('iso-8859-1')\n            cookies = cookies.decode('utf-8')\n            remixlhk = re.search(r'remixlhk=(.+?);.*?\\bdomain=(.+?)(?:[,;]|$)', cookies)\n            if remixlhk:\n                value, domain = remixlhk.groups()\n                self._set_cookie(domain, 'remixlhk', value)\n                break\n\n        login_page = self._download_webpage(\n            'https://login.vk.com/?act=login', None,\n            note='Logging in',\n            data=urlencode_postdata(login_form))\n\n        if re.search(r'onLoginFailed', login_page):\n            raise ExtractorError(\n                'Unable to login, incorrect username and/or password', expected=True)\n\n    def _real_initialize(self):\n        self._login()\n\n\nclass VKIE(VKBaseIE):\n    IE_NAME = 'vk'\n    IE_DESC = 'VK'\n    _VALID_URL = r\n    _TESTS = [\n        {\n            'url': 'http://vk.com/videos-77521?z=video-77521_162222515%2Fclub77521',\n            'md5': '7babad3b85ea2e91948005b1b8b0cb84',\n            'info_dict': {\n                'id': '162222515',\n                'ext': 'mp4',\n                'title': 'ProtivoGunz - \u0425\u0443\u0451\u0432\u0430\u044f \u043f\u0435\u0441\u043d\u044f',\n                'uploader': 're:(?:Noize MC|Alexander Ilyashenko).*',\n                'duration': 195,\n                'timestamp': 1329060660,\n                'upload_date': '20120212',\n                'view_count': int,\n            },\n        },\n        {\n            'url': 'http://vk.com/video205387401_165548505',\n            'md5': '6c0aeb2e90396ba97035b9cbde548700',\n            'info_dict': {\n                'id': '165548505',\n                'ext': 'mp4',\n                'uploader': 'Tom Cruise',\n                'title': 'No name',\n                'duration': 9,\n                'timestamp': 1374374880,\n                'upload_date': '20130721',\n                'view_count': int,\n            }\n        },\n        {\n            'note': 'Embedded video',\n            'url': 'http://vk.com/video_ext.php?oid=32194266&id=162925554&hash=7d8c2e0d5e05aeaa&hd=1',\n            'md5': 'c7ce8f1f87bec05b3de07fdeafe21a0a',\n            'info_dict': {\n                'id': '162925554',\n                'ext': 'mp4',\n                'uploader': 'Vladimir Gavrin',\n                'title': 'Lin Dan',\n                'duration': 101,\n                'upload_date': '20120730',\n                'view_count': int,\n            },\n            'skip': 'This video has been removed from public access.',\n        },\n        {\n            \n            \n            'url': 'http://vk.com/video-8871596_164049491',\n            'md5': 'a590bcaf3d543576c9bd162812387666',\n            'note': 'Only available for registered users',\n            'info_dict': {\n                'id': '164049491',\n                'ext': 'mp4',\n                'uploader': '\u0422\u0440\u0438\u043b\u043b\u0435\u0440\u044b',\n                'title': '\u25ba \u0411\u043e\u0439\u0446\u043e\u0432\u0441\u043a\u0438\u0439 \u043a\u043b\u0443\u0431 / Fight Club 1999 [HD 720]',\n                'duration': 8352,\n                'upload_date': '20121218',\n                'view_count': int,\n            },\n            'skip': 'Requires vk account credentials',\n        },\n        {\n            'url': 'http://vk.com/hd_kino_mania?z=video-43215063_168067957%2F15c66b9b533119788d',\n            'md5': '4d7a5ef8cf114dfa09577e57b2993202',\n            'info_dict': {\n                'id': '168067957',\n                'ext': 'mp4',\n                'uploader': '\u041a\u0438\u043d\u043e\u043c\u0430\u043d\u0438\u044f - \u043b\u0443\u0447\u0448\u0435\u0435 \u0438\u0437 \u043c\u0438\u0440\u0430 \u043a\u0438\u043d\u043e',\n                'title': ' ',\n                'duration': 7291,\n                'upload_date': '20140328',\n            },\n            'skip': 'Requires vk account credentials',\n        },\n        {\n            'url': 'http://m.vk.com/video-43215063_169084319?list=125c627d1aa1cebb83&from=wall-43215063_2566540',\n            'md5': '0c45586baa71b7cb1d0784ee3f4e00a6',\n            'note': 'ivi.ru embed',\n            'info_dict': {\n                'id': '60690',\n                'ext': 'mp4',\n                'title': '\u041a\u043d\u0438\u0433\u0430 \u0418\u043b\u0430\u044f',\n                'duration': 6771,\n                'upload_date': '20140626',\n                'view_count': int,\n            },\n            'skip': 'Only works from Russia',\n        },\n        {\n            \n            'url': 'https://vk.com/video30481095_171201961?list=8764ae2d21f14088d4',\n            'md5': '091287af5402239a1051c37ec7b92913',\n            'info_dict': {\n                'id': '171201961',\n                'ext': 'mp4',\n                'title': '\u0422\u044e\u043c\u0435\u043d\u0446\u0435\u0432\u0412\u0412_09.07.2015',\n                'uploader': 'Anton Ivanov',\n                'duration': 109,\n                'upload_date': '20150709',\n                'view_count': int,\n            },\n            'skip': 'Removed',\n        },\n        {\n            \n            'url': 'https://vk.com/video276849682_170681728',\n            'info_dict': {\n                'id': 'V3K4mi0SYkc',\n                'ext': 'webm',\n                'title': \"DSWD Awards 'Children's Joy Foundation, Inc.' Certificate of Registration and License to Operate\",\n                'description': 'md5:d9903938abdc74c738af77f527ca0596',\n                'duration': 178,\n                'upload_date': '20130116',\n                'uploader': \"Children's Joy Foundation\",\n                'uploader_id': 'thecjf',\n                'view_count': int,\n            },\n        },\n        {\n            \n            'url': 'https://vk.com/video-37468416_456239855',\n            'info_dict': {\n                'id': 'k3lz2cmXyRuJQSjGHUv',\n                'ext': 'mp4',\n                'title': 'md5:d52606645c20b0ddbb21655adaa4f56f',\n                'description': 'md5:c651358f03c56f1150b555c26d90a0fd',\n                'uploader': 'AniLibria.Tv',\n                'upload_date': '20160914',\n                'uploader_id': 'x1p5vl5',\n                'timestamp': 1473877246,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            \n            'url': 'http://vk.com/video-110305615_171782105',\n            'md5': 'e13fcda136f99764872e739d13fac1d1',\n            'info_dict': {\n                'id': '171782105',\n                'ext': 'mp4',\n                'title': 'S-Dance, \u0440\u0435\u043f\u0435\u0442\u0438\u0446\u0438\u0438 \u043a The way show',\n                'uploader': 'THE WAY SHOW | 17 \u0430\u043f\u0440\u0435\u043b\u044f',\n                'timestamp': 1454870100,\n                'upload_date': '20160207',\n                'view_count': int,\n            },\n        },\n        {\n            \n            'url': 'https://vk.com/videos-387766?z=video-387766_456242764%2Fpl_-387766_-2',\n            'md5': '90d22d051fccbbe9becfccc615be6791',\n            'info_dict': {\n                'id': '456242764',\n                'ext': 'mp4',\n                'title': '\u0418\u0433\u0440\u043e\u041c\u0438\u0440 2016 \u2014 \u0434\u0435\u043d\u044c 1',\n                'uploader': '\u0418\u0433\u0440\u043e\u043c\u0430\u043d\u0438\u044f',\n                'duration': 5239,\n                'view_count': int,\n            },\n        },\n        {\n            \n            \n            'url': 'https://vk.com/video-140332_456239111',\n            'only_matching': True,\n        },\n        {\n            \n            'url': 'http://vk.com/feed?z=video-43215063_166094326%2Fbb50cacd3177146d7a',\n            'only_matching': True,\n        },\n        {\n            \n            'url': 'https://vk.com/video205387401_164765225',\n            'only_matching': True,\n        },\n        {\n            \n            'url': 'https://vk.com/video-76116461_171554880',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://new.vk.com/video205387401_165548505',\n            'only_matching': True,\n        },\n        {\n            \n            'url': 'https://vk.com/video-10639516_456240611',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('videoid')\n\n        if video_id:\n            info_url = 'https://vk.com/al_video.php?act=show&al=1&module=video&video=%s' % video_id\n            \n            list_id = mobj.group('list_id')\n            if list_id:\n                info_url += '&list=%s' % list_id\n        else:\n            info_url = 'http://vk.com/video_ext.php?' + mobj.group('embed_query')\n            video_id = '%s_%s' % (mobj.group('oid'), mobj.group('id'))\n\n        info_page = self._download_webpage(info_url, video_id)\n\n        error_message = self._html_search_regex(\n            [r'(?s)<!><div[^>]+class=\"video_layer_message\"[^>]*>(.+?)</div>',\n                r'(?s)<div[^>]+id=\"video_ext_msg\"[^>]*>(.+?)</div>'],\n            info_page, 'error message', default=None)\n        if error_message:\n            raise ExtractorError(error_message, expected=True)\n\n        if re.search(r'<!>/login\\.php\\?.*\\bact=security_check', info_page):\n            raise ExtractorError(\n                'You are trying to log in from an unusual location. You should confirm ownership at vk.com to log in with this IP.',\n                expected=True)\n\n        ERROR_COPYRIGHT = 'Video %s has been removed from public access due to rightholder complaint.'\n\n        ERRORS = {\n            r'>\u0412\u0438\u0434\u0435\u043e\u0437\u0430\u043f\u0438\u0441\u044c .*? \u0431\u044b\u043b\u0430 \u0438\u0437\u044a\u044f\u0442\u0430 \u0438\u0437 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0430\u0432\u043e\u043e\u0431\u043b\u0430\u0434\u0430\u0442\u0435\u043b\u044f.<':\n            ERROR_COPYRIGHT,\n\n            r'>The video .*? was removed from public access by request of the copyright holder.<':\n            ERROR_COPYRIGHT,\n\n            r'<!>Please log in or <':\n            'Video %s is only available for registered users, '\n            'use --username and --password options to provide account credentials.',\n\n            r'<!>Unknown error':\n            'Video %s does not exist.',\n\n            r'<!>\u0412\u0438\u0434\u0435\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e':\n            'Video %s is temporarily unavailable.',\n\n            r'<!>Access denied':\n            'Access denied to video %s.',\n\n            r'<!>\u0412\u0438\u0434\u0435\u043e\u0437\u0430\u043f\u0438\u0441\u044c \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0435\u0451 \u0430\u0432\u0442\u043e\u0440 \u0431\u044b\u043b \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d.':\n            'Video %s is no longer available, because its author has been blocked.',\n\n            r'<!>This video is no longer available, because its author has been blocked.':\n            'Video %s is no longer available, because its author has been blocked.',\n        }\n\n        for error_re, error_msg in ERRORS.items():\n            if re.search(error_re, info_page):\n                raise ExtractorError(error_msg % video_id, expected=True)\n\n        youtube_url = YoutubeIE._extract_url(info_page)\n        if youtube_url:\n            return self.url_result(youtube_url, ie=YoutubeIE.ie_key())\n\n        vimeo_url = VimeoIE._extract_url(url, info_page)\n        if vimeo_url is not None:\n            return self.url_result(vimeo_url)\n\n        pladform_url = PladformIE._extract_url(info_page)\n        if pladform_url:\n            return self.url_result(pladform_url)\n\n        m_rutube = re.search(\n            r'\\ssrc=\"((?:https?:)?//rutube\\.ru\\\\?/(?:video|play)\\\\?/embed(?:.*?))\\\\?\"', info_page)\n        if m_rutube is not None:\n            rutube_url = self._proto_relative_url(\n                m_rutube.group(1).replace('\\\\', ''))\n            return self.url_result(rutube_url)\n\n        dailymotion_urls = DailymotionIE._extract_urls(info_page)\n        if dailymotion_urls:\n            return self.url_result(dailymotion_urls[0], DailymotionIE.ie_key())\n\n        m_opts = re.search(r'(?s)var\\s+opts\\s*=\\s*({.+?});', info_page)\n        if m_opts:\n            m_opts_url = re.search(r\"url\\s*:\\s*'((?!/\\b)[^']+)\", m_opts.group(1))\n            if m_opts_url:\n                opts_url = m_opts_url.group(1)\n                if opts_url.startswith('//'):\n                    opts_url = 'http:' + opts_url\n                return self.url_result(opts_url)\n\n        \n        data = self._parse_json(\n            self._search_regex(\n                r'var\\s+vars\\s*=\\s*({.+?});', info_page, 'vars', default='{}'),\n            video_id, fatal=False)\n\n        \n        if not data:\n            data = self._parse_json(\n                self._search_regex(\n                    r'<!json>\\s*({.+?})\\s*<!>', info_page, 'json', default='{}'),\n                video_id)\n            if data:\n                data = data['player']['params'][0]\n\n        if not data:\n            data = self._parse_json(\n                self._search_regex(\n                    r'var\\s+playerParams\\s*=\\s*({.+?})\\s*;\\s*\\n', info_page,\n                    'player params'),\n                video_id)['params'][0]\n\n        title = unescapeHTML(data['md_title'])\n\n        \n        \n        is_live = data.get('live') == 2\n        if is_live:\n            title = self._live_title(title)\n\n        timestamp = unified_timestamp(self._html_search_regex(\n            r'class=[\"\\']mv_info_date[^>]+>([^<]+)(?:<|from)', info_page,\n            'upload date', fatal=False))\n\n        view_count = str_to_int(self._search_regex(\n            r'class=[\"\\']mv_views_count[^>]+>\\s*([\\d,.]+)',\n            info_page, 'view count', default=None))\n\n        formats = []\n        for format_id, format_url in data.items():\n            if not isinstance(format_url, compat_str) or not format_url.startswith(('http', '//', 'rtmp')):\n                continue\n            if (format_id.startswith(('url', 'cache')) or\n                    format_id in ('extra_data', 'live_mp4', 'postlive_mp4')):\n                height = int_or_none(self._search_regex(\n                    r'^(?:url|cache)(\\d+)', format_id, 'height', default=None))\n                formats.append({\n                    'format_id': format_id,\n                    'url': format_url,\n                    'height': height,\n                })\n            elif format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id=format_id, fatal=False, live=is_live))\n            elif format_id == 'rtmp':\n                formats.append({\n                    'format_id': format_id,\n                    'url': format_url,\n                    'ext': 'flv',\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': compat_str(data.get('vid') or video_id),\n            'formats': formats,\n            'title': title,\n            'thumbnail': data.get('jpg'),\n            'uploader': data.get('md_author'),\n            'duration': data.get('duration'),\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'is_live': is_live,\n        }\n\n\nclass VKUserVideosIE(VKBaseIE):\n    IE_NAME = 'vk:uservideos'\n    IE_DESC = \"VK - User's Videos\"\n    _VALID_URL = r'https?://(?:(?:m|new)\\.)?vk\\.com/videos(?P<id>-?[0-9]+)(?!\\?.*\\bz=video)(?:[/?\n    _TEMPLATE_URL = 'https://vk.com/videos'\n    _TESTS = [{\n        'url': 'http://vk.com/videos205387401',\n        'info_dict': {\n            'id': '205387401',\n            'title': \"Tom Cruise's Videos\",\n        },\n        'playlist_mincount': 4,\n    }, {\n        'url': 'http://vk.com/videos-77521',\n        'only_matching': True,\n    }, {\n        'url': 'http://vk.com/videos-97664626?section=all',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.vk.com/videos205387401',\n        'only_matching': True,\n    }, {\n        'url': 'http://new.vk.com/videos205387401',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, page_id)\n\n        entries = [\n            self.url_result(\n                'http://vk.com/video' + video_id, 'VK', video_id=video_id)\n            for video_id in orderedSet(re.findall(r'href=\"/video(-?[0-9_]+)\"', webpage))]\n\n        title = unescapeHTML(self._search_regex(\n            r'<title>\\s*([^<]+?)\\s+\\|\\s+\\d+\\s+videos',\n            webpage, 'title', default=page_id))\n\n        return self.playlist_result(entries, page_id, title)\n\n\nclass VKWallPostIE(VKBaseIE):\n    IE_NAME = 'vk:wallpost'\n    _VALID_URL = r'https?://(?:(?:(?:(?:m|new)\\.)?vk\\.com/(?:[^?]+\\?.*\\bw=)?wall(?P<id>-?\\d+_\\d+)))'\n    _TESTS = [{\n        \n        'url': 'https://vk.com/bs.official?w=wall-23538238_35',\n        'info_dict': {\n            'id': '23538238_35',\n            'title': 'Black Shadow - Wall post 23538238_35',\n            'description': 'md5:3f84b9c4f9ef499731cf1ced9998cc0c',\n        },\n        'playlist': [{\n            'md5': '5ba93864ec5b85f7ce19a9af4af080f6',\n            'info_dict': {\n                'id': '135220665_111806521',\n                'ext': 'mp3',\n                'title': 'Black Shadow - \u0421\u043b\u0435\u043f\u043e\u0435 \u0412\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u0435',\n                'duration': 370,\n                'uploader': 'Black Shadow',\n                'artist': 'Black Shadow',\n                'track': '\u0421\u043b\u0435\u043f\u043e\u0435 \u0412\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u0435',\n            },\n        }, {\n            'md5': '4cc7e804579122b17ea95af7834c9233',\n            'info_dict': {\n                'id': '135220665_111802303',\n                'ext': 'mp3',\n                'title': 'Black Shadow - \u0412\u043e\u0439\u043d\u0430 - \u041d\u0435\u0433\u0430\u0441\u0438\u043c\u043e\u0435 \u0411\u0435\u0437\u0434\u043d\u044b \u041f\u043b\u0430\u043c\u044f!',\n                'duration': 423,\n                'uploader': 'Black Shadow',\n                'artist': 'Black Shadow',\n                'track': '\u0412\u043e\u0439\u043d\u0430 - \u041d\u0435\u0433\u0430\u0441\u0438\u043c\u043e\u0435 \u0411\u0435\u0437\u0434\u043d\u044b \u041f\u043b\u0430\u043c\u044f!',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        }],\n        'params': {\n            'usenetrc': True,\n        },\n        'skip': 'Requires vk account credentials',\n    }, {\n        \n        'url': 'https://vk.com/wall85155021_6319',\n        'info_dict': {\n            'id': '85155021_6319',\n            'title': 'Sergey Gorbunov - Wall post 85155021_6319',\n        },\n        'playlist_count': 1,\n        'params': {\n            'usenetrc': True,\n        },\n        'skip': 'Requires vk account credentials',\n    }, {\n        \n        'url': 'https://vk.com/wall-23538238_35',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://m.vk.com/wall-23538238_35',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        post_id = self._match_id(url)\n\n        wall_url = 'https://vk.com/wall%s' % post_id\n\n        post_id = remove_start(post_id, '-')\n\n        webpage = self._download_webpage(wall_url, post_id)\n\n        error = self._html_search_regex(\n            r'>Error</div>\\s*<div[^>]+class=[\"\\']body[\"\\'][^>]*>([^<]+)',\n            webpage, 'error', default=None)\n        if error:\n            raise ExtractorError('VK said: %s' % error, expected=True)\n\n        description = clean_html(get_element_by_class('wall_post_text', webpage))\n        uploader = clean_html(get_element_by_class('author', webpage))\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        entries = []\n\n        audio_ids = re.findall(r'data-full-id=[\"\\'](\\d+_\\d+)', webpage)\n        if audio_ids:\n            al_audio = self._download_webpage(\n                'https://vk.com/al_audio.php', post_id,\n                note='Downloading audio info', fatal=False,\n                data=urlencode_postdata({\n                    'act': 'reload_audio',\n                    'al': '1',\n                    'ids': ','.join(audio_ids)\n                }))\n            if al_audio:\n                Audio = collections.namedtuple(\n                    'Audio', ['id', 'user_id', 'url', 'track', 'artist', 'duration'])\n                audios = self._parse_json(\n                    self._search_regex(\n                        r'<!json>(.+?)<!>', al_audio, 'audios', default='[]'),\n                    post_id, fatal=False, transform_source=unescapeHTML)\n                if isinstance(audios, list):\n                    for audio in audios:\n                        a = Audio._make(audio[:6])\n                        entries.append({\n                            'id': '%s_%s' % (a.user_id, a.id),\n                            'url': a.url,\n                            'title': '%s - %s' % (a.artist, a.track) if a.artist and a.track else a.id,\n                            'thumbnail': thumbnail,\n                            'duration': a.duration,\n                            'uploader': uploader,\n                            'artist': a.artist,\n                            'track': a.track,\n                        })\n\n        for video in re.finditer(\n                r'<a[^>]+href=([\"\\'])(?P<url>/video(?:-?[\\d_]+).*?)\\1', webpage):\n            entries.append(self.url_result(\n                compat_urlparse.urljoin(url, video.group('url')), VKIE.ie_key()))\n\n        title = 'Wall post %s' % post_id\n\n        return self.playlist_result(\n            orderedSet(entries), post_id,\n            '%s - %s' % (uploader, title) if uploader else title,\n            description)\n", "comments": "(?x)\n                    https?://\n                        (?:\n                            (?:\n                                (?:(?:m|new)\\.)?vk\\.com/video_|\n                                (?:www\\.)?daxab.com/\n                            )\n                            ext\\.php\\?(?P<embed_query>.*?\\boid=(?P<oid>-?\\d+).*?\\bid=(?P<id>\\d+).*)|\n                            (?:\n                                (?:(?:m|new)\\.)?vk\\.com/(?:.+?\\?.*?z=)?video|\n                                (?:www\\.)?daxab.com/embed/\n                            )\n                            (?P<videoid>-?\\d+_\\d+)(?:.*\\blist=(?P<list_id>[\\da-f]+))?\n                        )\n                    \n \n# coding: utf-8\n# https://new.vk.com/ serves two same remixlhk cookies in Set-Cookie header\n# and expects the first one to be set rather than second (see\n# https://github.com/rg3/youtube-dl/issues/9841#issuecomment-227871201).\n# As of RFC6265 the newer one cookie should be set into cookie store\n# what actually happens.\n# We will workaround this VK issue by resetting the remixlhk cookie to\n# the first one manually.\n# VIDEO NOW REMOVED\n# please update if you find a video whose URL follows the same pattern\n# video (removed?) only available with list id\n# youtube embed\n# dailymotion embed\n# video key is extra_data not url\\d+\n# finished live stream, postlive_mp4\n# live stream, hls and rtmp links, most likely already finished live\n# stream by the time you are reading this comment\n# removed video, just testing that we match the pattern\n# age restricted video, requires vk account credentials\n# pladform embed\n# This video is no longer available, because its author has been blocked.\n# Some videos (removed?) can only be downloaded with list id specified\n# vars does not look to be served anymore since 24.10.2016\n# <!json> is served instead\n# 2 = live\n# 3 = post live (finished live)\n#&]|$)'\n# public page URL, audio playlist\n# single YouTube embed, no leading -\n# wall page URL\n# mobile wall page URL\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport collections\nimport re\nimport sys\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    get_element_by_class,\n    int_or_none,\n    orderedSet,\n    remove_start,\n    str_to_int,\n    unescapeHTML,\n    unified_timestamp,\n    urlencode_postdata,\n)\nfrom .dailymotion import DailymotionIE\nfrom .pladform import PladformIE\nfrom .vimeo import VimeoIE\nfrom .youtube import YoutubeIE\n\n\nclass VKBaseIE(InfoExtractor):\n    _NETRC_MACHINE = 'vk'\n\n    def _login(self):\n        (username, password) = self._get_login_info()\n        if username is None:\n            return\n\n        login_page, url_handle = self._download_webpage_handle(\n            'https://vk.com', None, 'Downloading login page')\n\n        login_form = self._hidden_inputs(login_page)\n\n        login_form.update({\n            'email': username.encode('cp1251'),\n            'pass': password.encode('cp1251'),\n        })\n\n        # https://new.vk.com/ serves two same remixlhk cookies in Set-Cookie header\n        # and expects the first one to be set rather than second (see\n        # https://github.com/rg3/youtube-dl/issues/9841#issuecomment-227871201).\n        # As of RFC6265 the newer one cookie should be set into cookie store\n        # what actually happens.\n        # We will workaround this VK issue by resetting the remixlhk cookie to\n        # the first one manually.\n        for header, cookies in url_handle.headers.items():\n            if header.lower() != 'set-cookie':\n                continue\n            if sys.version_info[0] >= 3:\n                cookies = cookies.encode('iso-8859-1')\n            cookies = cookies.decode('utf-8')\n            remixlhk = re.search(r'remixlhk=(.+?);.*?\\bdomain=(.+?)(?:[,;]|$)', cookies)\n            if remixlhk:\n                value, domain = remixlhk.groups()\n                self._set_cookie(domain, 'remixlhk', value)\n                break\n\n        login_page = self._download_webpage(\n            'https://login.vk.com/?act=login', None,\n            note='Logging in',\n            data=urlencode_postdata(login_form))\n\n        if re.search(r'onLoginFailed', login_page):\n            raise ExtractorError(\n                'Unable to login, incorrect username and/or password', expected=True)\n\n    def _real_initialize(self):\n        self._login()\n\n\nclass VKIE(VKBaseIE):\n    IE_NAME = 'vk'\n    IE_DESC = 'VK'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:\n                            (?:\n                                (?:(?:m|new)\\.)?vk\\.com/video_|\n                                (?:www\\.)?daxab.com/\n                            )\n                            ext\\.php\\?(?P<embed_query>.*?\\boid=(?P<oid>-?\\d+).*?\\bid=(?P<id>\\d+).*)|\n                            (?:\n                                (?:(?:m|new)\\.)?vk\\.com/(?:.+?\\?.*?z=)?video|\n                                (?:www\\.)?daxab.com/embed/\n                            )\n                            (?P<videoid>-?\\d+_\\d+)(?:.*\\blist=(?P<list_id>[\\da-f]+))?\n                        )\n                    '''\n    _TESTS = [\n        {\n            'url': 'http://vk.com/videos-77521?z=video-77521_162222515%2Fclub77521',\n            'md5': '7babad3b85ea2e91948005b1b8b0cb84',\n            'info_dict': {\n                'id': '162222515',\n                'ext': 'mp4',\n                'title': 'ProtivoGunz - \u0425\u0443\u0451\u0432\u0430\u044f \u043f\u0435\u0441\u043d\u044f',\n                'uploader': 're:(?:Noize MC|Alexander Ilyashenko).*',\n                'duration': 195,\n                'timestamp': 1329060660,\n                'upload_date': '20120212',\n                'view_count': int,\n            },\n        },\n        {\n            'url': 'http://vk.com/video205387401_165548505',\n            'md5': '6c0aeb2e90396ba97035b9cbde548700',\n            'info_dict': {\n                'id': '165548505',\n                'ext': 'mp4',\n                'uploader': 'Tom Cruise',\n                'title': 'No name',\n                'duration': 9,\n                'timestamp': 1374374880,\n                'upload_date': '20130721',\n                'view_count': int,\n            }\n        },\n        {\n            'note': 'Embedded video',\n            'url': 'http://vk.com/video_ext.php?oid=32194266&id=162925554&hash=7d8c2e0d5e05aeaa&hd=1',\n            'md5': 'c7ce8f1f87bec05b3de07fdeafe21a0a',\n            'info_dict': {\n                'id': '162925554',\n                'ext': 'mp4',\n                'uploader': 'Vladimir Gavrin',\n                'title': 'Lin Dan',\n                'duration': 101,\n                'upload_date': '20120730',\n                'view_count': int,\n            },\n            'skip': 'This video has been removed from public access.',\n        },\n        {\n            # VIDEO NOW REMOVED\n            # please update if you find a video whose URL follows the same pattern\n            'url': 'http://vk.com/video-8871596_164049491',\n            'md5': 'a590bcaf3d543576c9bd162812387666',\n            'note': 'Only available for registered users',\n            'info_dict': {\n                'id': '164049491',\n                'ext': 'mp4',\n                'uploader': '\u0422\u0440\u0438\u043b\u043b\u0435\u0440\u044b',\n                'title': '\u25ba \u0411\u043e\u0439\u0446\u043e\u0432\u0441\u043a\u0438\u0439 \u043a\u043b\u0443\u0431 / Fight Club 1999 [HD 720]',\n                'duration': 8352,\n                'upload_date': '20121218',\n                'view_count': int,\n            },\n            'skip': 'Requires vk account credentials',\n        },\n        {\n            'url': 'http://vk.com/hd_kino_mania?z=video-43215063_168067957%2F15c66b9b533119788d',\n            'md5': '4d7a5ef8cf114dfa09577e57b2993202',\n            'info_dict': {\n                'id': '168067957',\n                'ext': 'mp4',\n                'uploader': '\u041a\u0438\u043d\u043e\u043c\u0430\u043d\u0438\u044f - \u043b\u0443\u0447\u0448\u0435\u0435 \u0438\u0437 \u043c\u0438\u0440\u0430 \u043a\u0438\u043d\u043e',\n                'title': ' ',\n                'duration': 7291,\n                'upload_date': '20140328',\n            },\n            'skip': 'Requires vk account credentials',\n        },\n        {\n            'url': 'http://m.vk.com/video-43215063_169084319?list=125c627d1aa1cebb83&from=wall-43215063_2566540',\n            'md5': '0c45586baa71b7cb1d0784ee3f4e00a6',\n            'note': 'ivi.ru embed',\n            'info_dict': {\n                'id': '60690',\n                'ext': 'mp4',\n                'title': '\u041a\u043d\u0438\u0433\u0430 \u0418\u043b\u0430\u044f',\n                'duration': 6771,\n                'upload_date': '20140626',\n                'view_count': int,\n            },\n            'skip': 'Only works from Russia',\n        },\n        {\n            # video (removed?) only available with list id\n            'url': 'https://vk.com/video30481095_171201961?list=8764ae2d21f14088d4',\n            'md5': '091287af5402239a1051c37ec7b92913',\n            'info_dict': {\n                'id': '171201961',\n                'ext': 'mp4',\n                'title': '\u0422\u044e\u043c\u0435\u043d\u0446\u0435\u0432\u0412\u0412_09.07.2015',\n                'uploader': 'Anton Ivanov',\n                'duration': 109,\n                'upload_date': '20150709',\n                'view_count': int,\n            },\n            'skip': 'Removed',\n        },\n        {\n            # youtube embed\n            'url': 'https://vk.com/video276849682_170681728',\n            'info_dict': {\n                'id': 'V3K4mi0SYkc',\n                'ext': 'webm',\n                'title': \"DSWD Awards 'Children's Joy Foundation, Inc.' Certificate of Registration and License to Operate\",\n                'description': 'md5:d9903938abdc74c738af77f527ca0596',\n                'duration': 178,\n                'upload_date': '20130116',\n                'uploader': \"Children's Joy Foundation\",\n                'uploader_id': 'thecjf',\n                'view_count': int,\n            },\n        },\n        {\n            # dailymotion embed\n            'url': 'https://vk.com/video-37468416_456239855',\n            'info_dict': {\n                'id': 'k3lz2cmXyRuJQSjGHUv',\n                'ext': 'mp4',\n                'title': 'md5:d52606645c20b0ddbb21655adaa4f56f',\n                'description': 'md5:c651358f03c56f1150b555c26d90a0fd',\n                'uploader': 'AniLibria.Tv',\n                'upload_date': '20160914',\n                'uploader_id': 'x1p5vl5',\n                'timestamp': 1473877246,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            # video key is extra_data not url\\d+\n            'url': 'http://vk.com/video-110305615_171782105',\n            'md5': 'e13fcda136f99764872e739d13fac1d1',\n            'info_dict': {\n                'id': '171782105',\n                'ext': 'mp4',\n                'title': 'S-Dance, \u0440\u0435\u043f\u0435\u0442\u0438\u0446\u0438\u0438 \u043a The way show',\n                'uploader': 'THE WAY SHOW | 17 \u0430\u043f\u0440\u0435\u043b\u044f',\n                'timestamp': 1454870100,\n                'upload_date': '20160207',\n                'view_count': int,\n            },\n        },\n        {\n            # finished live stream, postlive_mp4\n            'url': 'https://vk.com/videos-387766?z=video-387766_456242764%2Fpl_-387766_-2',\n            'md5': '90d22d051fccbbe9becfccc615be6791',\n            'info_dict': {\n                'id': '456242764',\n                'ext': 'mp4',\n                'title': '\u0418\u0433\u0440\u043e\u041c\u0438\u0440 2016 \u2014 \u0434\u0435\u043d\u044c 1',\n                'uploader': '\u0418\u0433\u0440\u043e\u043c\u0430\u043d\u0438\u044f',\n                'duration': 5239,\n                'view_count': int,\n            },\n        },\n        {\n            # live stream, hls and rtmp links, most likely already finished live\n            # stream by the time you are reading this comment\n            'url': 'https://vk.com/video-140332_456239111',\n            'only_matching': True,\n        },\n        {\n            # removed video, just testing that we match the pattern\n            'url': 'http://vk.com/feed?z=video-43215063_166094326%2Fbb50cacd3177146d7a',\n            'only_matching': True,\n        },\n        {\n            # age restricted video, requires vk account credentials\n            'url': 'https://vk.com/video205387401_164765225',\n            'only_matching': True,\n        },\n        {\n            # pladform embed\n            'url': 'https://vk.com/video-76116461_171554880',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://new.vk.com/video205387401_165548505',\n            'only_matching': True,\n        },\n        {\n            # This video is no longer available, because its author has been blocked.\n            'url': 'https://vk.com/video-10639516_456240611',\n            'only_matching': True,\n        }\n    ]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('videoid')\n\n        if video_id:\n            info_url = 'https://vk.com/al_video.php?act=show&al=1&module=video&video=%s' % video_id\n            # Some videos (removed?) can only be downloaded with list id specified\n            list_id = mobj.group('list_id')\n            if list_id:\n                info_url += '&list=%s' % list_id\n        else:\n            info_url = 'http://vk.com/video_ext.php?' + mobj.group('embed_query')\n            video_id = '%s_%s' % (mobj.group('oid'), mobj.group('id'))\n\n        info_page = self._download_webpage(info_url, video_id)\n\n        error_message = self._html_search_regex(\n            [r'(?s)<!><div[^>]+class=\"video_layer_message\"[^>]*>(.+?)</div>',\n                r'(?s)<div[^>]+id=\"video_ext_msg\"[^>]*>(.+?)</div>'],\n            info_page, 'error message', default=None)\n        if error_message:\n            raise ExtractorError(error_message, expected=True)\n\n        if re.search(r'<!>/login\\.php\\?.*\\bact=security_check', info_page):\n            raise ExtractorError(\n                'You are trying to log in from an unusual location. You should confirm ownership at vk.com to log in with this IP.',\n                expected=True)\n\n        ERROR_COPYRIGHT = 'Video %s has been removed from public access due to rightholder complaint.'\n\n        ERRORS = {\n            r'>\u0412\u0438\u0434\u0435\u043e\u0437\u0430\u043f\u0438\u0441\u044c .*? \u0431\u044b\u043b\u0430 \u0438\u0437\u044a\u044f\u0442\u0430 \u0438\u0437 \u043f\u0443\u0431\u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 \u0441\u0432\u044f\u0437\u0438 \u0441 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0430\u0432\u043e\u043e\u0431\u043b\u0430\u0434\u0430\u0442\u0435\u043b\u044f.<':\n            ERROR_COPYRIGHT,\n\n            r'>The video .*? was removed from public access by request of the copyright holder.<':\n            ERROR_COPYRIGHT,\n\n            r'<!>Please log in or <':\n            'Video %s is only available for registered users, '\n            'use --username and --password options to provide account credentials.',\n\n            r'<!>Unknown error':\n            'Video %s does not exist.',\n\n            r'<!>\u0412\u0438\u0434\u0435\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e':\n            'Video %s is temporarily unavailable.',\n\n            r'<!>Access denied':\n            'Access denied to video %s.',\n\n            r'<!>\u0412\u0438\u0434\u0435\u043e\u0437\u0430\u043f\u0438\u0441\u044c \u043d\u0435\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u0435\u0451 \u0430\u0432\u0442\u043e\u0440 \u0431\u044b\u043b \u0437\u0430\u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u0430\u043d.':\n            'Video %s is no longer available, because its author has been blocked.',\n\n            r'<!>This video is no longer available, because its author has been blocked.':\n            'Video %s is no longer available, because its author has been blocked.',\n        }\n\n        for error_re, error_msg in ERRORS.items():\n            if re.search(error_re, info_page):\n                raise ExtractorError(error_msg % video_id, expected=True)\n\n        youtube_url = YoutubeIE._extract_url(info_page)\n        if youtube_url:\n            return self.url_result(youtube_url, ie=YoutubeIE.ie_key())\n\n        vimeo_url = VimeoIE._extract_url(url, info_page)\n        if vimeo_url is not None:\n            return self.url_result(vimeo_url)\n\n        pladform_url = PladformIE._extract_url(info_page)\n        if pladform_url:\n            return self.url_result(pladform_url)\n\n        m_rutube = re.search(\n            r'\\ssrc=\"((?:https?:)?//rutube\\.ru\\\\?/(?:video|play)\\\\?/embed(?:.*?))\\\\?\"', info_page)\n        if m_rutube is not None:\n            rutube_url = self._proto_relative_url(\n                m_rutube.group(1).replace('\\\\', ''))\n            return self.url_result(rutube_url)\n\n        dailymotion_urls = DailymotionIE._extract_urls(info_page)\n        if dailymotion_urls:\n            return self.url_result(dailymotion_urls[0], DailymotionIE.ie_key())\n\n        m_opts = re.search(r'(?s)var\\s+opts\\s*=\\s*({.+?});', info_page)\n        if m_opts:\n            m_opts_url = re.search(r\"url\\s*:\\s*'((?!/\\b)[^']+)\", m_opts.group(1))\n            if m_opts_url:\n                opts_url = m_opts_url.group(1)\n                if opts_url.startswith('//'):\n                    opts_url = 'http:' + opts_url\n                return self.url_result(opts_url)\n\n        # vars does not look to be served anymore since 24.10.2016\n        data = self._parse_json(\n            self._search_regex(\n                r'var\\s+vars\\s*=\\s*({.+?});', info_page, 'vars', default='{}'),\n            video_id, fatal=False)\n\n        # <!json> is served instead\n        if not data:\n            data = self._parse_json(\n                self._search_regex(\n                    r'<!json>\\s*({.+?})\\s*<!>', info_page, 'json', default='{}'),\n                video_id)\n            if data:\n                data = data['player']['params'][0]\n\n        if not data:\n            data = self._parse_json(\n                self._search_regex(\n                    r'var\\s+playerParams\\s*=\\s*({.+?})\\s*;\\s*\\n', info_page,\n                    'player params'),\n                video_id)['params'][0]\n\n        title = unescapeHTML(data['md_title'])\n\n        # 2 = live\n        # 3 = post live (finished live)\n        is_live = data.get('live') == 2\n        if is_live:\n            title = self._live_title(title)\n\n        timestamp = unified_timestamp(self._html_search_regex(\n            r'class=[\"\\']mv_info_date[^>]+>([^<]+)(?:<|from)', info_page,\n            'upload date', fatal=False))\n\n        view_count = str_to_int(self._search_regex(\n            r'class=[\"\\']mv_views_count[^>]+>\\s*([\\d,.]+)',\n            info_page, 'view count', default=None))\n\n        formats = []\n        for format_id, format_url in data.items():\n            if not isinstance(format_url, compat_str) or not format_url.startswith(('http', '//', 'rtmp')):\n                continue\n            if (format_id.startswith(('url', 'cache')) or\n                    format_id in ('extra_data', 'live_mp4', 'postlive_mp4')):\n                height = int_or_none(self._search_regex(\n                    r'^(?:url|cache)(\\d+)', format_id, 'height', default=None))\n                formats.append({\n                    'format_id': format_id,\n                    'url': format_url,\n                    'height': height,\n                })\n            elif format_id == 'hls':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', 'm3u8_native',\n                    m3u8_id=format_id, fatal=False, live=is_live))\n            elif format_id == 'rtmp':\n                formats.append({\n                    'format_id': format_id,\n                    'url': format_url,\n                    'ext': 'flv',\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': compat_str(data.get('vid') or video_id),\n            'formats': formats,\n            'title': title,\n            'thumbnail': data.get('jpg'),\n            'uploader': data.get('md_author'),\n            'duration': data.get('duration'),\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'is_live': is_live,\n        }\n\n\nclass VKUserVideosIE(VKBaseIE):\n    IE_NAME = 'vk:uservideos'\n    IE_DESC = \"VK - User's Videos\"\n    _VALID_URL = r'https?://(?:(?:m|new)\\.)?vk\\.com/videos(?P<id>-?[0-9]+)(?!\\?.*\\bz=video)(?:[/?#&]|$)'\n    _TEMPLATE_URL = 'https://vk.com/videos'\n    _TESTS = [{\n        'url': 'http://vk.com/videos205387401',\n        'info_dict': {\n            'id': '205387401',\n            'title': \"Tom Cruise's Videos\",\n        },\n        'playlist_mincount': 4,\n    }, {\n        'url': 'http://vk.com/videos-77521',\n        'only_matching': True,\n    }, {\n        'url': 'http://vk.com/videos-97664626?section=all',\n        'only_matching': True,\n    }, {\n        'url': 'http://m.vk.com/videos205387401',\n        'only_matching': True,\n    }, {\n        'url': 'http://new.vk.com/videos205387401',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, page_id)\n\n        entries = [\n            self.url_result(\n                'http://vk.com/video' + video_id, 'VK', video_id=video_id)\n            for video_id in orderedSet(re.findall(r'href=\"/video(-?[0-9_]+)\"', webpage))]\n\n        title = unescapeHTML(self._search_regex(\n            r'<title>\\s*([^<]+?)\\s+\\|\\s+\\d+\\s+videos',\n            webpage, 'title', default=page_id))\n\n        return self.playlist_result(entries, page_id, title)\n\n\nclass VKWallPostIE(VKBaseIE):\n    IE_NAME = 'vk:wallpost'\n    _VALID_URL = r'https?://(?:(?:(?:(?:m|new)\\.)?vk\\.com/(?:[^?]+\\?.*\\bw=)?wall(?P<id>-?\\d+_\\d+)))'\n    _TESTS = [{\n        # public page URL, audio playlist\n        'url': 'https://vk.com/bs.official?w=wall-23538238_35',\n        'info_dict': {\n            'id': '23538238_35',\n            'title': 'Black Shadow - Wall post 23538238_35',\n            'description': 'md5:3f84b9c4f9ef499731cf1ced9998cc0c',\n        },\n        'playlist': [{\n            'md5': '5ba93864ec5b85f7ce19a9af4af080f6',\n            'info_dict': {\n                'id': '135220665_111806521',\n                'ext': 'mp3',\n                'title': 'Black Shadow - \u0421\u043b\u0435\u043f\u043e\u0435 \u0412\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u0435',\n                'duration': 370,\n                'uploader': 'Black Shadow',\n                'artist': 'Black Shadow',\n                'track': '\u0421\u043b\u0435\u043f\u043e\u0435 \u0412\u0435\u0440\u043e\u0432\u0430\u043d\u0438\u0435',\n            },\n        }, {\n            'md5': '4cc7e804579122b17ea95af7834c9233',\n            'info_dict': {\n                'id': '135220665_111802303',\n                'ext': 'mp3',\n                'title': 'Black Shadow - \u0412\u043e\u0439\u043d\u0430 - \u041d\u0435\u0433\u0430\u0441\u0438\u043c\u043e\u0435 \u0411\u0435\u0437\u0434\u043d\u044b \u041f\u043b\u0430\u043c\u044f!',\n                'duration': 423,\n                'uploader': 'Black Shadow',\n                'artist': 'Black Shadow',\n                'track': '\u0412\u043e\u0439\u043d\u0430 - \u041d\u0435\u0433\u0430\u0441\u0438\u043c\u043e\u0435 \u0411\u0435\u0437\u0434\u043d\u044b \u041f\u043b\u0430\u043c\u044f!',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        }],\n        'params': {\n            'usenetrc': True,\n        },\n        'skip': 'Requires vk account credentials',\n    }, {\n        # single YouTube embed, no leading -\n        'url': 'https://vk.com/wall85155021_6319',\n        'info_dict': {\n            'id': '85155021_6319',\n            'title': 'Sergey Gorbunov - Wall post 85155021_6319',\n        },\n        'playlist_count': 1,\n        'params': {\n            'usenetrc': True,\n        },\n        'skip': 'Requires vk account credentials',\n    }, {\n        # wall page URL\n        'url': 'https://vk.com/wall-23538238_35',\n        'only_matching': True,\n    }, {\n        # mobile wall page URL\n        'url': 'https://m.vk.com/wall-23538238_35',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        post_id = self._match_id(url)\n\n        wall_url = 'https://vk.com/wall%s' % post_id\n\n        post_id = remove_start(post_id, '-')\n\n        webpage = self._download_webpage(wall_url, post_id)\n\n        error = self._html_search_regex(\n            r'>Error</div>\\s*<div[^>]+class=[\"\\']body[\"\\'][^>]*>([^<]+)',\n            webpage, 'error', default=None)\n        if error:\n            raise ExtractorError('VK said: %s' % error, expected=True)\n\n        description = clean_html(get_element_by_class('wall_post_text', webpage))\n        uploader = clean_html(get_element_by_class('author', webpage))\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        entries = []\n\n        audio_ids = re.findall(r'data-full-id=[\"\\'](\\d+_\\d+)', webpage)\n        if audio_ids:\n            al_audio = self._download_webpage(\n                'https://vk.com/al_audio.php', post_id,\n                note='Downloading audio info', fatal=False,\n                data=urlencode_postdata({\n                    'act': 'reload_audio',\n                    'al': '1',\n                    'ids': ','.join(audio_ids)\n                }))\n            if al_audio:\n                Audio = collections.namedtuple(\n                    'Audio', ['id', 'user_id', 'url', 'track', 'artist', 'duration'])\n                audios = self._parse_json(\n                    self._search_regex(\n                        r'<!json>(.+?)<!>', al_audio, 'audios', default='[]'),\n                    post_id, fatal=False, transform_source=unescapeHTML)\n                if isinstance(audios, list):\n                    for audio in audios:\n                        a = Audio._make(audio[:6])\n                        entries.append({\n                            'id': '%s_%s' % (a.user_id, a.id),\n                            'url': a.url,\n                            'title': '%s - %s' % (a.artist, a.track) if a.artist and a.track else a.id,\n                            'thumbnail': thumbnail,\n                            'duration': a.duration,\n                            'uploader': uploader,\n                            'artist': a.artist,\n                            'track': a.track,\n                        })\n\n        for video in re.finditer(\n                r'<a[^>]+href=([\"\\'])(?P<url>/video(?:-?[\\d_]+).*?)\\1', webpage):\n            entries.append(self.url_result(\n                compat_urlparse.urljoin(url, video.group('url')), VKIE.ie_key()))\n\n        title = 'Wall post %s' % post_id\n\n        return self.playlist_result(\n            orderedSet(entries), post_id,\n            '%s - %s' % (uploader, title) if uploader else title,\n            description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vk.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vk.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}