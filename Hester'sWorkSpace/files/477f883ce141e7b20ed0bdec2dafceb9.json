{"author": "ansible", "code": " (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom collections import Sequence\nimport traceback\nimport sys\n\nfrom ansible.errors.yaml_strings import (\n    YAML_COMMON_DICT_ERROR,\n    YAML_COMMON_LEADING_TAB_ERROR,\n    YAML_COMMON_PARTIALLY_QUOTED_LINE_ERROR,\n    YAML_COMMON_UNBALANCED_QUOTES_ERROR,\n    YAML_COMMON_UNQUOTED_COLON_ERROR,\n    YAML_COMMON_UNQUOTED_VARIABLE_ERROR,\n    YAML_POSITION_DETAILS,\n)\nfrom ansible.module_utils._text import to_native, to_text\n\n\nclass AnsibleError(Exception):\n    '''\n    This is the base class for all errors raised from Ansible code,\n    and can be instantiated with two optional parameters beyond the\n    error message to control whether detailed information is displayed\n    when the error occurred while parsing a data file of some kind.\n\n    Usage:\n\n        raise AnsibleError('some message here', obj=obj, show_content=True)\n\n    Where \"obj\" is some subclass of ansible.parsing.yaml.objects.AnsibleBaseYAMLObject,\n    which should be returned by the DataLoader() class.\n    '''\n\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None):\n        super(AnsibleError, self).__init__(message)\n\n         we import this here to prevent an import loop problem,\n         since the objects code also imports ansible.errors\n        from ansible.parsing.yaml.objects import AnsibleBaseYAMLObject\n\n        self._obj = obj\n        self._show_content = show_content\n        if obj and isinstance(obj, AnsibleBaseYAMLObject):\n            extended_error = self._get_extended_error()\n            if extended_error and not suppress_extended_error:\n                self.message = '%s\\n\\n%s' % (to_native(message), to_native(extended_error))\n            else:\n                self.message = '%s' % to_native(message)\n        else:\n            self.message = '%s' % to_native(message)\n        if orig_exc:\n            self.orig_exc = orig_exc\n\n        self.tb = ''.join(traceback.format_tb(sys.exc_info()[2]))\n\n    def __str__(self):\n        return self.message\n\n    def __repr__(self):\n        return self.message\n\n    def _get_error_lines_from_file(self, file_name, line_number):\n        '''\n        Returns the line in the file which corresponds to the reported error\n        location, as well as the line preceding it (if the error did not\n        occur on the first line), to provide context to the error.\n        '''\n\n        target_line = ''\n        prev_line = ''\n\n        with open(file_name, 'r') as f:\n            lines = f.readlines()\n\n            target_line = lines[line_number]\n            if line_number > 0:\n                prev_line = lines[line_number - 1]\n\n        return (target_line, prev_line)\n\n    def _get_extended_error(self):\n        '''\n        Given an object reporting the location of the exception in a file, return\n        detailed information regarding it including:\n\n          * the line which caused the error as well as the one preceding it\n          * causes and suggested remedies for common syntax errors\n\n        If this error was created with show_content=False, the reporting of content\n        is suppressed, as the file contents may be sensitive (ie. vault data).\n        '''\n\n        error_message = ''\n\n        try:\n            (src_file, line_number, col_number) = self._obj.ansible_pos\n            error_message += YAML_POSITION_DETAILS % (src_file, line_number, col_number)\n            if src_file not in ('<string>', '<unicode>') and self._show_content:\n                (target_line, prev_line) = self._get_error_lines_from_file(src_file, line_number - 1)\n                target_line = to_text(target_line)\n                prev_line = to_text(prev_line)\n                if target_line:\n                    stripped_line = target_line.replace(\" \", \"\")\n                    arrow_line = (\" \" * (col_number - 1)) + \"^ here\"\n                     header_line = (\"=\" * 73)\n                    error_message += \"\\nThe offending line appears to be:\\n\\n%s\\n%s\\n%s\\n\" % (prev_line.rstrip(), target_line.rstrip(), arrow_line)\n\n                     TODO: There may be cases where there is a valid tab in a line that has other errors.\n                    if '\\t' in target_line:\n                        error_message += YAML_COMMON_LEADING_TAB_ERROR\n                     common error/remediation checking here:\n                     check for unquoted vars starting lines\n                    if ('{{' in target_line and '}}' in target_line) and ('\"{{' not in target_line or \"'{{\" not in target_line):\n                        error_message += YAML_COMMON_UNQUOTED_VARIABLE_ERROR\n                     check for common dictionary mistakes\n                    elif \":{{\" in stripped_line and \"}}\" in stripped_line:\n                        error_message += YAML_COMMON_DICT_ERROR\n                     check for common unquoted colon mistakes\n                    elif (len(target_line) and\n                            len(target_line) > 1 and\n                            len(target_line) > col_number and\n                            target_line[col_number] == \":\" and\n                            target_line.count(':') > 1):\n                        error_message += YAML_COMMON_UNQUOTED_COLON_ERROR\n                     otherwise, check for some common quoting mistakes\n                    else:\n                        parts = target_line.split(\":\")\n                        if len(parts) > 1:\n                            middle = parts[1].strip()\n                            match = False\n                            unbalanced = False\n\n                            if middle.startswith(\"'\") and not middle.endswith(\"'\"):\n                                match = True\n                            elif middle.startswith('\"') and not middle.endswith('\"'):\n                                match = True\n\n                            if (len(middle) > 0 and\n                                    middle[0] in ['\"', \"'\"] and\n                                    middle[-1] in ['\"', \"'\"] and\n                                    target_line.count(\"'\") > 2 or\n                                    target_line.count('\"') > 2):\n                                unbalanced = True\n\n                            if match:\n                                error_message += YAML_COMMON_PARTIALLY_QUOTED_LINE_ERROR\n                            if unbalanced:\n                                error_message += YAML_COMMON_UNBALANCED_QUOTES_ERROR\n\n        except (IOError, TypeError):\n            error_message += '\\n(could not open file to display line)'\n        except IndexError:\n            error_message += '\\n(specified line no longer in file, maybe it changed?)'\n\n        return error_message\n\n\nclass AnsibleAssertionError(AnsibleError, AssertionError):\n    '''Invalid assertion'''\n    pass\n\n\nclass AnsibleOptionsError(AnsibleError):\n    ''' bad or incomplete options passed '''\n    pass\n\n\nclass AnsibleParserError(AnsibleError):\n    ''' something was detected early that is wrong about a playbook or data file '''\n    pass\n\n\nclass AnsibleInternalError(AnsibleError):\n    ''' internal safeguards tripped, something happened in the code that should never happen '''\n    pass\n\n\nclass AnsibleRuntimeError(AnsibleError):\n    ''' ansible had a problem while running a playbook '''\n    pass\n\n\nclass AnsibleModuleError(AnsibleRuntimeError):\n    ''' a module failed somehow '''\n    pass\n\n\nclass AnsibleConnectionFailure(AnsibleRuntimeError):\n    ''' the transport / connection_plugin had a fatal error '''\n    pass\n\n\nclass AnsibleFilterError(AnsibleRuntimeError):\n    ''' a templating failure '''\n    pass\n\n\nclass AnsibleLookupError(AnsibleRuntimeError):\n    ''' a lookup failure '''\n    pass\n\n\nclass AnsibleCallbackError(AnsibleRuntimeError):\n    ''' a callback failure '''\n    pass\n\n\nclass AnsibleUndefinedVariable(AnsibleRuntimeError):\n    ''' a templating failure '''\n    pass\n\n\nclass AnsibleFileNotFound(AnsibleRuntimeError):\n    ''' a file missing failure '''\n\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None, paths=None, file_name=None):\n\n        self.file_name = file_name\n        self.paths = paths\n\n        if self.file_name:\n            if message:\n                message += \"\\n\"\n            message += \"Could not find or access '%s'\" % to_text(self.file_name)\n\n        if self.paths and isinstance(self.paths, Sequence):\n            searched = to_text('\\n\\t'.join(self.paths))\n            if message:\n                message += \"\\n\"\n            message += \"Searched in:\\n\\t%s\" % searched\n\n        super(AnsibleFileNotFound, self).__init__(message=message, obj=obj, show_content=show_content,\n                                                  suppress_extended_error=suppress_extended_error, orig_exc=orig_exc)\n\n\n These Exceptions are temporary, using them as flow control until we can get a better solution.\n DO NOT USE as they will probably be removed soon.\n We will port the action modules in our tree to use a context manager instead.\nclass AnsibleAction(AnsibleRuntimeError):\n    ''' Base Exception for Action plugin flow control '''\n\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None, result=None):\n\n        super(AnsibleAction, self).__init__(message=message, obj=obj, show_content=show_content,\n                                            suppress_extended_error=suppress_extended_error, orig_exc=orig_exc)\n        if result is None:\n            self.result = {}\n        else:\n            self.result = result\n\n\nclass AnsibleActionSkip(AnsibleAction):\n    ''' an action runtime skip'''\n\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None, result=None):\n        super(AnsibleActionSkip, self).__init__(message=message, obj=obj, show_content=show_content,\n                                                suppress_extended_error=suppress_extended_error, orig_exc=orig_exc, result=result)\n        self.result.update({'skipped': True, 'msg': message})\n\n\nclass AnsibleActionFail(AnsibleAction):\n    ''' an action runtime failure'''\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None, result=None):\n        super(AnsibleActionFail, self).__init__(message=message, obj=obj, show_content=show_content,\n                                                suppress_extended_error=suppress_extended_error, orig_exc=orig_exc, result=result)\n        self.result.update({'failed': True, 'msg': message})\n\n\nclass _AnsibleActionDone(AnsibleAction):\n    ''' an action runtime early exit'''\n    pass\n", "comments": "        this base class errors raised ansible code      instantiated two optional parameters beyond     error message control whether detailed information displayed     error occurred parsing data file kind       usage           raise ansibleerror( message   obj obj  show content true)      where  obj  subclass ansible parsing yaml objects ansiblebaseyamlobject      returned dataloader() class               def   init  (self  message     obj none  show content true  suppress extended error false  orig exc none)          super(ansibleerror  self)   init  (message)            import prevent import loop problem            since objects code also imports ansible errors         ansible parsing yaml objects import ansiblebaseyamlobject          self  obj   obj         self  show content   show content         obj isinstance(obj  ansiblebaseyamlobject)              extended error   self  get extended error()             extended error suppress extended error                  self message     n n    (to native(message)  native(extended error))             else                  self message        native(message)         else              self message        native(message)         orig exc              self orig exc   orig exc          self tb      join(traceback format tb(sys exc info() 2 ))      def   str  (self)          return self message      def   repr  (self)          return self message      def  get error lines file(self  file name  line number)                      returns line file corresponds reported error         location  well line preceding (if error         occur first line)  provide context error                       target line              prev line               open(file name   r ) f              lines   f readlines()              target line   lines line number              line number   0                  prev line   lines line number   1           return (target line  prev line)      def  get extended error(self)                      given object reporting location exception file  return         detailed information regarding including               line caused error well one preceding             causes suggested remedies common syntax errors          if error created show content false  reporting content         suppressed  file contents may sensitive (ie  vault data)                       error message               try              (src file  line number  col number)   self  obj ansible pos             error message    yaml position details   (src file  line number  col number)             src file (  string      unicode  ) self  show content                  (target line  prev line)   self  get error lines file(src file  line number   1)                 target line   text(target line)                 prev line   text(prev line)                 target line                      stripped line   target line replace(       )                     arrow line   (      (col number   1))                             header line   (      73)                     error message      nthe offending line appears  n n n n n    (prev line rstrip()  target line rstrip()  arrow line)                        todo  there may cases valid tab line errors                         target line                          error message    yaml common leading tab error                       common error remediation checking                        check unquoted vars starting lines                     (     target line      target line) (      target line       target line)                          error message    yaml common unquoted variable error                       check common dictionary mistakes                     elif       stripped line      stripped line                          error message    yaml common dict error                       check common unquoted colon mistakes                     elif (len(target line)                             len(target line)   1                             len(target line)   col number                             target line col number                                     target line count(   )   1)                          error message    yaml common unquoted colon error                       otherwise  check common quoting mistakes                     else                          parts   target line split(   )                         len(parts)   1                              middle   parts 1  strip()                             match   false                             unbalanced   false                              middle startswith(   ) middle endswith(   )                                  match   true                             elif middle startswith(   ) middle endswith(   )                                  match   true                              (len(middle)   0                                     middle 0                                                 middle  1                                                 target line count(   )   2                                     target line count(   )   2)                                  unbalanced   true                              match                                  error message    yaml common partially quoted line error                             unbalanced                                  error message    yaml common unbalanced quotes error          except (ioerror  typeerror)              error message      n(could open file display line)          except indexerror              error message      n(specified line longer file  maybe changed )           return error message   class ansibleassertionerror(ansibleerror  assertionerror)         invalid assertion        pass   class ansibleoptionserror(ansibleerror)          bad incomplete options passed         pass   class ansibleparsererror(ansibleerror)          something detected early wrong playbook data file         pass   class ansibleinternalerror(ansibleerror)          internal safeguards tripped  something happened code never happen         pass   class ansibleruntimeerror(ansibleerror)          ansible problem running playbook         pass   class ansiblemoduleerror(ansibleruntimeerror)          module failed somehow         pass   class ansibleconnectionfailure(ansibleruntimeerror)          transport   connection plugin fatal error         pass   class ansiblefiltererror(ansibleruntimeerror)          templating failure         pass   class ansiblelookuperror(ansibleruntimeerror)          lookup failure         pass   class ansiblecallbackerror(ansibleruntimeerror)          callback failure         pass   class ansibleundefinedvariable(ansibleruntimeerror)          templating failure         pass   class ansiblefilenotfound(ansibleruntimeerror)          file missing failure          def   init  (self  message     obj none  show content true  suppress extended error false  orig exc none  paths none  file name none)           self file name   file name         self paths   paths          self file name              message                  message      n              message     could find access       text(self file name)          self paths isinstance(self paths  sequence)              searched   text(  n  join(self paths))             message                  message      n              message     searched  n    searched          super(ansiblefilenotfound  self)   init  (message message  obj obj  show content show content                                                    suppress extended error suppress extended error  orig exc orig exc)     these exceptions temporary  using flow control get better solution    do not use probably removed soon    we port action modules tree use context manager instead  class ansibleaction(ansibleruntimeerror)          base exception action plugin flow control          def   init  (self  message     obj none  show content true  suppress extended error false  orig exc none  result none)           super(ansibleaction  self)   init  (message message  obj obj  show content show content                                              suppress extended error suppress extended error  orig exc orig exc)         result none              self result              else              self result   result   class ansibleactionskip(ansibleaction)          action runtime skip         def   init  (self  message     obj none  show content true  suppress extended error false  orig exc none  result none)          super(ansibleactionskip  self)   init  (message message  obj obj  show content show content                                                  suppress extended error suppress extended error  orig exc orig exc  result result)         self result update(  skipped   true   msg   message )   class ansibleactionfail(ansibleaction)          action runtime failure        def   init  (self  message     obj none  show content true  suppress extended error false  orig exc none  result none)          super(ansibleactionfail  self)   init  (message message  obj obj  show content show content                                                  suppress extended error suppress extended error  orig exc orig exc  result result)         self result update(  failed   true   msg   message )   class  ansibleactiondone(ansibleaction)          action runtime early exit       (c) 2012 2014  michael dehaan  michael dehaan gmail com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    import prevent import loop problem     since objects code also imports ansible errors    header line   (      73)    todo  there may cases valid tab line errors     common error remediation checking     check unquoted vars starting lines    check common dictionary mistakes    check common unquoted colon mistakes    otherwise  check common quoting mistakes    these exceptions temporary  using flow control get better solution     do not use probably removed soon     we port action modules tree use context manager instead  ", "content": "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom collections import Sequence\nimport traceback\nimport sys\n\nfrom ansible.errors.yaml_strings import (\n    YAML_COMMON_DICT_ERROR,\n    YAML_COMMON_LEADING_TAB_ERROR,\n    YAML_COMMON_PARTIALLY_QUOTED_LINE_ERROR,\n    YAML_COMMON_UNBALANCED_QUOTES_ERROR,\n    YAML_COMMON_UNQUOTED_COLON_ERROR,\n    YAML_COMMON_UNQUOTED_VARIABLE_ERROR,\n    YAML_POSITION_DETAILS,\n)\nfrom ansible.module_utils._text import to_native, to_text\n\n\nclass AnsibleError(Exception):\n    '''\n    This is the base class for all errors raised from Ansible code,\n    and can be instantiated with two optional parameters beyond the\n    error message to control whether detailed information is displayed\n    when the error occurred while parsing a data file of some kind.\n\n    Usage:\n\n        raise AnsibleError('some message here', obj=obj, show_content=True)\n\n    Where \"obj\" is some subclass of ansible.parsing.yaml.objects.AnsibleBaseYAMLObject,\n    which should be returned by the DataLoader() class.\n    '''\n\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None):\n        super(AnsibleError, self).__init__(message)\n\n        # we import this here to prevent an import loop problem,\n        # since the objects code also imports ansible.errors\n        from ansible.parsing.yaml.objects import AnsibleBaseYAMLObject\n\n        self._obj = obj\n        self._show_content = show_content\n        if obj and isinstance(obj, AnsibleBaseYAMLObject):\n            extended_error = self._get_extended_error()\n            if extended_error and not suppress_extended_error:\n                self.message = '%s\\n\\n%s' % (to_native(message), to_native(extended_error))\n            else:\n                self.message = '%s' % to_native(message)\n        else:\n            self.message = '%s' % to_native(message)\n        if orig_exc:\n            self.orig_exc = orig_exc\n\n        self.tb = ''.join(traceback.format_tb(sys.exc_info()[2]))\n\n    def __str__(self):\n        return self.message\n\n    def __repr__(self):\n        return self.message\n\n    def _get_error_lines_from_file(self, file_name, line_number):\n        '''\n        Returns the line in the file which corresponds to the reported error\n        location, as well as the line preceding it (if the error did not\n        occur on the first line), to provide context to the error.\n        '''\n\n        target_line = ''\n        prev_line = ''\n\n        with open(file_name, 'r') as f:\n            lines = f.readlines()\n\n            target_line = lines[line_number]\n            if line_number > 0:\n                prev_line = lines[line_number - 1]\n\n        return (target_line, prev_line)\n\n    def _get_extended_error(self):\n        '''\n        Given an object reporting the location of the exception in a file, return\n        detailed information regarding it including:\n\n          * the line which caused the error as well as the one preceding it\n          * causes and suggested remedies for common syntax errors\n\n        If this error was created with show_content=False, the reporting of content\n        is suppressed, as the file contents may be sensitive (ie. vault data).\n        '''\n\n        error_message = ''\n\n        try:\n            (src_file, line_number, col_number) = self._obj.ansible_pos\n            error_message += YAML_POSITION_DETAILS % (src_file, line_number, col_number)\n            if src_file not in ('<string>', '<unicode>') and self._show_content:\n                (target_line, prev_line) = self._get_error_lines_from_file(src_file, line_number - 1)\n                target_line = to_text(target_line)\n                prev_line = to_text(prev_line)\n                if target_line:\n                    stripped_line = target_line.replace(\" \", \"\")\n                    arrow_line = (\" \" * (col_number - 1)) + \"^ here\"\n                    # header_line = (\"=\" * 73)\n                    error_message += \"\\nThe offending line appears to be:\\n\\n%s\\n%s\\n%s\\n\" % (prev_line.rstrip(), target_line.rstrip(), arrow_line)\n\n                    # TODO: There may be cases where there is a valid tab in a line that has other errors.\n                    if '\\t' in target_line:\n                        error_message += YAML_COMMON_LEADING_TAB_ERROR\n                    # common error/remediation checking here:\n                    # check for unquoted vars starting lines\n                    if ('{{' in target_line and '}}' in target_line) and ('\"{{' not in target_line or \"'{{\" not in target_line):\n                        error_message += YAML_COMMON_UNQUOTED_VARIABLE_ERROR\n                    # check for common dictionary mistakes\n                    elif \":{{\" in stripped_line and \"}}\" in stripped_line:\n                        error_message += YAML_COMMON_DICT_ERROR\n                    # check for common unquoted colon mistakes\n                    elif (len(target_line) and\n                            len(target_line) > 1 and\n                            len(target_line) > col_number and\n                            target_line[col_number] == \":\" and\n                            target_line.count(':') > 1):\n                        error_message += YAML_COMMON_UNQUOTED_COLON_ERROR\n                    # otherwise, check for some common quoting mistakes\n                    else:\n                        parts = target_line.split(\":\")\n                        if len(parts) > 1:\n                            middle = parts[1].strip()\n                            match = False\n                            unbalanced = False\n\n                            if middle.startswith(\"'\") and not middle.endswith(\"'\"):\n                                match = True\n                            elif middle.startswith('\"') and not middle.endswith('\"'):\n                                match = True\n\n                            if (len(middle) > 0 and\n                                    middle[0] in ['\"', \"'\"] and\n                                    middle[-1] in ['\"', \"'\"] and\n                                    target_line.count(\"'\") > 2 or\n                                    target_line.count('\"') > 2):\n                                unbalanced = True\n\n                            if match:\n                                error_message += YAML_COMMON_PARTIALLY_QUOTED_LINE_ERROR\n                            if unbalanced:\n                                error_message += YAML_COMMON_UNBALANCED_QUOTES_ERROR\n\n        except (IOError, TypeError):\n            error_message += '\\n(could not open file to display line)'\n        except IndexError:\n            error_message += '\\n(specified line no longer in file, maybe it changed?)'\n\n        return error_message\n\n\nclass AnsibleAssertionError(AnsibleError, AssertionError):\n    '''Invalid assertion'''\n    pass\n\n\nclass AnsibleOptionsError(AnsibleError):\n    ''' bad or incomplete options passed '''\n    pass\n\n\nclass AnsibleParserError(AnsibleError):\n    ''' something was detected early that is wrong about a playbook or data file '''\n    pass\n\n\nclass AnsibleInternalError(AnsibleError):\n    ''' internal safeguards tripped, something happened in the code that should never happen '''\n    pass\n\n\nclass AnsibleRuntimeError(AnsibleError):\n    ''' ansible had a problem while running a playbook '''\n    pass\n\n\nclass AnsibleModuleError(AnsibleRuntimeError):\n    ''' a module failed somehow '''\n    pass\n\n\nclass AnsibleConnectionFailure(AnsibleRuntimeError):\n    ''' the transport / connection_plugin had a fatal error '''\n    pass\n\n\nclass AnsibleFilterError(AnsibleRuntimeError):\n    ''' a templating failure '''\n    pass\n\n\nclass AnsibleLookupError(AnsibleRuntimeError):\n    ''' a lookup failure '''\n    pass\n\n\nclass AnsibleCallbackError(AnsibleRuntimeError):\n    ''' a callback failure '''\n    pass\n\n\nclass AnsibleUndefinedVariable(AnsibleRuntimeError):\n    ''' a templating failure '''\n    pass\n\n\nclass AnsibleFileNotFound(AnsibleRuntimeError):\n    ''' a file missing failure '''\n\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None, paths=None, file_name=None):\n\n        self.file_name = file_name\n        self.paths = paths\n\n        if self.file_name:\n            if message:\n                message += \"\\n\"\n            message += \"Could not find or access '%s'\" % to_text(self.file_name)\n\n        if self.paths and isinstance(self.paths, Sequence):\n            searched = to_text('\\n\\t'.join(self.paths))\n            if message:\n                message += \"\\n\"\n            message += \"Searched in:\\n\\t%s\" % searched\n\n        super(AnsibleFileNotFound, self).__init__(message=message, obj=obj, show_content=show_content,\n                                                  suppress_extended_error=suppress_extended_error, orig_exc=orig_exc)\n\n\n# These Exceptions are temporary, using them as flow control until we can get a better solution.\n# DO NOT USE as they will probably be removed soon.\n# We will port the action modules in our tree to use a context manager instead.\nclass AnsibleAction(AnsibleRuntimeError):\n    ''' Base Exception for Action plugin flow control '''\n\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None, result=None):\n\n        super(AnsibleAction, self).__init__(message=message, obj=obj, show_content=show_content,\n                                            suppress_extended_error=suppress_extended_error, orig_exc=orig_exc)\n        if result is None:\n            self.result = {}\n        else:\n            self.result = result\n\n\nclass AnsibleActionSkip(AnsibleAction):\n    ''' an action runtime skip'''\n\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None, result=None):\n        super(AnsibleActionSkip, self).__init__(message=message, obj=obj, show_content=show_content,\n                                                suppress_extended_error=suppress_extended_error, orig_exc=orig_exc, result=result)\n        self.result.update({'skipped': True, 'msg': message})\n\n\nclass AnsibleActionFail(AnsibleAction):\n    ''' an action runtime failure'''\n    def __init__(self, message=\"\", obj=None, show_content=True, suppress_extended_error=False, orig_exc=None, result=None):\n        super(AnsibleActionFail, self).__init__(message=message, obj=obj, show_content=show_content,\n                                                suppress_extended_error=suppress_extended_error, orig_exc=orig_exc, result=result)\n        self.result.update({'failed': True, 'msg': message})\n\n\nclass _AnsibleActionDone(AnsibleAction):\n    ''' an action runtime early exit'''\n    pass\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "__init__.py", "id": "477f883ce141e7b20ed0bdec2dafceb9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/errors/__init__.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}