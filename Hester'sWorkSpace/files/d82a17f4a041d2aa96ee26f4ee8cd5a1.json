{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport ast\n\nfrom odoo import models\nfrom odoo.http import request\n\n\nclass QWeb(models.AbstractModel):\n    \"\"\" QWeb object for rendering stuff in the website context \"\"\"\n\n    _inherit = 'ir.qweb'\n\n    URL_ATTRS = {\n        'form': 'action',\n        'a': 'href',\n    }\n\n    CDN_TRIGGERS = {\n        'link':    'href',\n        'script':  'src',\n        'img':     'src',\n    }\n\n    def _get_asset(self, xmlid, options, css=True, js=True, debug=False, async=False, values=None):\n        website = getattr(request, 'website', None) if request else None\n        if website and website.cdn_activated:\n            values = dict(values or {}, url_for=website.get_cdn_url)\n        return super(QWeb, self)._get_asset(xmlid, options, css, js, debug, async, values)\n\n    def _website_build_attribute(self, tagName, name, value, options, values):\n        \"\"\" Compute the value of an attribute while rendering the template. \"\"\"\n        if name == self.URL_ATTRS.get(tagName) and values.get('url_for'):\n            return values.get('url_for')(value or '')\n        elif request and getattr(request, 'website', None) and request.website.cdn_activated and (name == self.URL_ATTRS.get(tagName) or name == self.CDN_TRIGGERS.get(tagName)):\n            return request.website.get_cdn_url(value or '')\n        return value\n\n    def _wrap_build_attributes(self, el, items, options):\n        \"\"\" Map items corresponding to URL and CDN attributes to an ast expression. \"\"\"\n        if options.get('rendering_bundle'):\n            return items\n\n        url_att = self.URL_ATTRS.get(el.tag)\n        cdn_att = self.CDN_TRIGGERS.get(el.tag)\n\n        def process(item):\n            if isinstance(item, tuple) and (item[0] in (url_att, cdn_att)):\n                return (item[0], ast.Call(\n                    func=ast.Attribute(\n                        value=ast.Name(id='self', ctx=ast.Load()),\n                        attr='_website_build_attribute',\n                        ctx=ast.Load()\n                    ),\n                    args=[\n                        ast.Str(el.tag),\n                        ast.Str(item[0]),\n                        item[1],\n                        ast.Name(id='options', ctx=ast.Load()),\n                        ast.Name(id='values', ctx=ast.Load()),\n                    ], keywords=[],\n                    starargs=None, kwargs=None\n                ))\n            else:\n                return item\n\n        return [process(it) for it in items]\n\n    def _compile_static_attributes(self, el, options):\n        items = super(QWeb, self)._compile_static_attributes(el, options)\n        return self._wrap_build_attributes(el, items, options)\n\n    def _compile_dynamic_attributes(self, el, options):\n        items = super(QWeb, self)._compile_dynamic_attributes(el, options)\n        return self._wrap_build_attributes(el, items, options)\n\n    \n\n    def _get_dynamic_att(self, tagName, atts, options, values):\n        atts = super(QWeb, self)._get_dynamic_att(tagName, atts, options, values)\n        if options.get('rendering_bundle'):\n            return atts\n        for name, value in atts.items():\n            atts[name] = self._website_build_attribute(tagName, name, value, options, values)\n        return atts\n\n    def _is_static_node(self, el):\n        url_att = self.URL_ATTRS.get(el.tag)\n        cdn_att = self.CDN_TRIGGERS.get(el.tag)\n        return super(QWeb, self)._is_static_node(el) and \\\n                (not url_att or not el.get(url_att)) and \\\n                (not cdn_att or not el.get(cdn_att))\n", "comments": "    qweb object rendering stuff website context           inherit    ir qweb       url attrs              form    action               href              cdn triggers              link       href            script     src            img        src              def  get asset(self  xmlid  options  css true  js true  debug false  async false  values none)          website   getattr(request   website   none) request else none         website website cdn activated              values   dict(values     url website get cdn url)         return super(qweb  self)  get asset(xmlid  options  css  js  debug  async  values)      def  website build attribute(self  tagname  name  value  options  values)              compute value attribute rendering template              name    self url attrs get(tagname) values get( url )              return values get( url )(value   )         elif request getattr(request   website   none) request website cdn activated (name    self url attrs get(tagname) name    self cdn triggers get(tagname))              return request website get cdn url(value   )         return value      def  wrap build attributes(self  el  items  options)              map items corresponding url cdn attributes ast expression             coding  utf 8        part odoo  see license file full copyright licensing details     method called computing code ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport ast\n\nfrom odoo import models\nfrom odoo.http import request\n\n\nclass QWeb(models.AbstractModel):\n    \"\"\" QWeb object for rendering stuff in the website context \"\"\"\n\n    _inherit = 'ir.qweb'\n\n    URL_ATTRS = {\n        'form': 'action',\n        'a': 'href',\n    }\n\n    CDN_TRIGGERS = {\n        'link':    'href',\n        'script':  'src',\n        'img':     'src',\n    }\n\n    def _get_asset(self, xmlid, options, css=True, js=True, debug=False, async=False, values=None):\n        website = getattr(request, 'website', None) if request else None\n        if website and website.cdn_activated:\n            values = dict(values or {}, url_for=website.get_cdn_url)\n        return super(QWeb, self)._get_asset(xmlid, options, css, js, debug, async, values)\n\n    def _website_build_attribute(self, tagName, name, value, options, values):\n        \"\"\" Compute the value of an attribute while rendering the template. \"\"\"\n        if name == self.URL_ATTRS.get(tagName) and values.get('url_for'):\n            return values.get('url_for')(value or '')\n        elif request and getattr(request, 'website', None) and request.website.cdn_activated and (name == self.URL_ATTRS.get(tagName) or name == self.CDN_TRIGGERS.get(tagName)):\n            return request.website.get_cdn_url(value or '')\n        return value\n\n    def _wrap_build_attributes(self, el, items, options):\n        \"\"\" Map items corresponding to URL and CDN attributes to an ast expression. \"\"\"\n        if options.get('rendering_bundle'):\n            return items\n\n        url_att = self.URL_ATTRS.get(el.tag)\n        cdn_att = self.CDN_TRIGGERS.get(el.tag)\n\n        def process(item):\n            if isinstance(item, tuple) and (item[0] in (url_att, cdn_att)):\n                return (item[0], ast.Call(\n                    func=ast.Attribute(\n                        value=ast.Name(id='self', ctx=ast.Load()),\n                        attr='_website_build_attribute',\n                        ctx=ast.Load()\n                    ),\n                    args=[\n                        ast.Str(el.tag),\n                        ast.Str(item[0]),\n                        item[1],\n                        ast.Name(id='options', ctx=ast.Load()),\n                        ast.Name(id='values', ctx=ast.Load()),\n                    ], keywords=[],\n                    starargs=None, kwargs=None\n                ))\n            else:\n                return item\n\n        return [process(it) for it in items]\n\n    def _compile_static_attributes(self, el, options):\n        items = super(QWeb, self)._compile_static_attributes(el, options)\n        return self._wrap_build_attributes(el, items, options)\n\n    def _compile_dynamic_attributes(self, el, options):\n        items = super(QWeb, self)._compile_dynamic_attributes(el, options)\n        return self._wrap_build_attributes(el, items, options)\n\n    # method called by computing code\n\n    def _get_dynamic_att(self, tagName, atts, options, values):\n        atts = super(QWeb, self)._get_dynamic_att(tagName, atts, options, values)\n        if options.get('rendering_bundle'):\n            return atts\n        for name, value in atts.items():\n            atts[name] = self._website_build_attribute(tagName, name, value, options, values)\n        return atts\n\n    def _is_static_node(self, el):\n        url_att = self.URL_ATTRS.get(el.tag)\n        cdn_att = self.CDN_TRIGGERS.get(el.tag)\n        return super(QWeb, self)._is_static_node(el) and \\\n                (not url_att or not el.get(url_att)) and \\\n                (not cdn_att or not el.get(cdn_att))\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "ir_qweb.py", "id": "d82a17f4a041d2aa96ee26f4ee8cd5a1", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website/models/ir_qweb.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}