{"author": "spotify", "code": " -*- coding: utf-8 -*-\n\n Copyright 2015-2015 Spotify AB\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\"\"\"\nYou can run this example like this:\n\n    .. code:: console\n\n            $ luigi --module examples.execution_summary_example examples.EntryPoint --local-scheduler\n            ...\n            ... lots of spammy output\n            ...\n            INFO: There are 11 pending tasks unique to this worker\n            INFO: Worker Worker(salt=843361665, workers=1, host=arash-spotify-T440s, username=arash, pid=18534) was stopped. Shutting down Keep-Alive thread\n            INFO:\n            ===== Luigi Execution Summary =====\n\n            Scheduled 218 tasks of which:\n            * 195 present dependencies were encountered:\n                - 195 examples.Bar(num=5...199)\n            * 1 ran successfully:\n                - 1 examples.Boom(...)\n            * 22 were left pending, among these:\n                * 1 were missing external dependencies:\n                    - 1 MyExternal()\n                * 21 had missing external dependencies:\n                    - 1 examples.EntryPoint()\n                    - examples.Foo(num=100, num2=16) and 9 other examples.Foo\n                    - 10 examples.DateTask(date=1998-03-23...1998-04-01, num=5)\n\n            This progress looks :|\n\n\nfrom __future__ import print_function\nimport datetime\n\nimport luigi\n\n\nclass MyExternal(luigi.ExternalTask):\n\n    def complete(self):\n        return False\n\n\nclass Boom(luigi.Task):\n    task_namespace = 'examples'\n    this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n    def run(self):\n        print(\"Running Boom\")\n\n    def requires(self):\n        for i in range(5, 200):\n            yield Bar(i)\n\n\nclass Foo(luigi.Task):\n    task_namespace = 'examples'\n    num = luigi.IntParameter()\n    num2 = luigi.IntParameter()\n\n    def run(self):\n        print(\"Running Foo\")\n\n    def requires(self):\n        yield MyExternal()\n        yield Boom(0)\n\n\nclass Bar(luigi.Task):\n    task_namespace = 'examples'\n    num = luigi.IntParameter()\n\n    def run(self):\n        self.output().open('w').close()\n\n    def output(self):\n        return luigi.LocalTarget('/tmp/bar/%d' % self.num)\n\n\nclass DateTask(luigi.Task):\n    task_namespace = 'examples'\n    date = luigi.DateParameter()\n    num = luigi.IntParameter()\n\n    def run(self):\n        print(\"Running DateTask\")\n\n    def requires(self):\n        yield MyExternal()\n        yield Boom(0)\n\n\nclass EntryPoint(luigi.Task):\n    task_namespace = 'examples'\n\n    def run(self):\n        print(\"Running EntryPoint\")\n\n    def requires(self):\n        for i in range(10):\n            yield Foo(100, 2 * i)\n        for i in range(10):\n            yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n", "comments": "    you run example like          code   console                luigi   module examples execution summary example examples entrypoint   local scheduler                                 lots spammy output                             info  there 11 pending tasks unique worker             info  worker worker(salt 843361665  workers 1  host arash spotify t440s  username arash  pid 18534) stopped  shutting keep alive thread             info                    luigi execution summary                    scheduled 218 tasks                195 present dependencies encountered                    195 examples bar(num 5   199)               1 ran successfully                    1 examples boom(   )               22 left pending  among                    1 missing external dependencies                        1 myexternal()                   21 missing external dependencies                        1 examples entrypoint()                       examples foo(num 100  num2 16) 9 examples foo                       10 examples datetask(date 1998 03 23   1998 04 01  num 5)              this progress looks    missing external dependencies                    luigi execution summary                  coding  utf 8           copyright 2015 2015 spotify ab       licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license       http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license  ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2015-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"\nYou can run this example like this:\n\n    .. code:: console\n\n            $ luigi --module examples.execution_summary_example examples.EntryPoint --local-scheduler\n            ...\n            ... lots of spammy output\n            ...\n            INFO: There are 11 pending tasks unique to this worker\n            INFO: Worker Worker(salt=843361665, workers=1, host=arash-spotify-T440s, username=arash, pid=18534) was stopped. Shutting down Keep-Alive thread\n            INFO:\n            ===== Luigi Execution Summary =====\n\n            Scheduled 218 tasks of which:\n            * 195 present dependencies were encountered:\n                - 195 examples.Bar(num=5...199)\n            * 1 ran successfully:\n                - 1 examples.Boom(...)\n            * 22 were left pending, among these:\n                * 1 were missing external dependencies:\n                    - 1 MyExternal()\n                * 21 had missing external dependencies:\n                    - 1 examples.EntryPoint()\n                    - examples.Foo(num=100, num2=16) and 9 other examples.Foo\n                    - 10 examples.DateTask(date=1998-03-23...1998-04-01, num=5)\n\n            This progress looks :| because there were missing external dependencies\n\n            ===== Luigi Execution Summary =====\n\"\"\"\n\n\nfrom __future__ import print_function\nimport datetime\n\nimport luigi\n\n\nclass MyExternal(luigi.ExternalTask):\n\n    def complete(self):\n        return False\n\n\nclass Boom(luigi.Task):\n    task_namespace = 'examples'\n    this_is_a_really_long_I_mean_way_too_long_and_annoying_parameter = luigi.IntParameter()\n\n    def run(self):\n        print(\"Running Boom\")\n\n    def requires(self):\n        for i in range(5, 200):\n            yield Bar(i)\n\n\nclass Foo(luigi.Task):\n    task_namespace = 'examples'\n    num = luigi.IntParameter()\n    num2 = luigi.IntParameter()\n\n    def run(self):\n        print(\"Running Foo\")\n\n    def requires(self):\n        yield MyExternal()\n        yield Boom(0)\n\n\nclass Bar(luigi.Task):\n    task_namespace = 'examples'\n    num = luigi.IntParameter()\n\n    def run(self):\n        self.output().open('w').close()\n\n    def output(self):\n        return luigi.LocalTarget('/tmp/bar/%d' % self.num)\n\n\nclass DateTask(luigi.Task):\n    task_namespace = 'examples'\n    date = luigi.DateParameter()\n    num = luigi.IntParameter()\n\n    def run(self):\n        print(\"Running DateTask\")\n\n    def requires(self):\n        yield MyExternal()\n        yield Boom(0)\n\n\nclass EntryPoint(luigi.Task):\n    task_namespace = 'examples'\n\n    def run(self):\n        print(\"Running EntryPoint\")\n\n    def requires(self):\n        for i in range(10):\n            yield Foo(100, 2 * i)\n        for i in range(10):\n            yield DateTask(datetime.date(1998, 3, 23) + datetime.timedelta(days=i), 5)\n", "description": "Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in. ", "file_name": "execution_summary_example.py", "id": "89f9e810ba952df09e36c9514aee8f05", "language": "Python", "project_name": "luigi", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/spotify-luigi/spotify-luigi-3cf763d/examples/execution_summary_example.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:25Z", "url": "https://github.com/spotify/luigi", "wiki": false}