{"author": "reddit-archive", "code": "\n License Version 1.0. (the \"License\"); you may not use this file except in\n\n\n\n\n\n\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n the specific language governing rights and limitations under the License.\n\n The Original Code is reddit.\n\n The Original Developer is the Initial Developer.  The Initial Developer of\n the Original Code is reddit Inc.\n\n All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n Inc. All Rights Reserved.\n\n\nfrom pylons import request\nfrom pylons import tmpl_context as c\nfrom pylons import app_globals as g\n\n\nclass World(object):\n    \"\"\"A World is the proxy to the app/request state for Features.\n\n    Proxying through World allows for easy testing and caching if needed.\n    \"\"\"\n\n    @staticmethod\n    def stacked_proxy_safe_get(stacked_proxy, key, default=None):\n        \"\"\"Get a field from a StackedObjectProxy\n\n        Always succeeds, even if the proxy has not yet been initialized.\n        Normally, if the proxy hasn't been initialized, a `TypeError` is\n        raised to indicate a programming error. To avoid crashing on feature\n        checks that are done too early (e.g., during initial DB set-up of\n        the pylons environment), this function will instead return `default`\n        for an uninitialized proxy.\n\n        (Initialized proxies ALWAYS return a value, either a set value\n        or an empty string)\n\n        \"\"\"\n        try:\n            return getattr(stacked_proxy, key)\n        except TypeError:\n            return default\n\n    def current_user(self):\n        if c.user_is_loggedin:\n            return self.stacked_proxy_safe_get(c, 'user')\n\n    def current_subreddit(self):\n        site = self.stacked_proxy_safe_get(c, 'site')\n        if not site:\n             In non-request code (eg queued jobs), there isn't necessarily a\n             site name (or other request-type data).  In those cases, we don't\n             want to trigger any subreddit-specific code.\n            return ''\n        return site.name\n\n    def current_subdomain(self):\n        return self.stacked_proxy_safe_get(c, 'subdomain')\n\n    def current_oauth_client(self):\n        client = self.stacked_proxy_safe_get(c, 'oauth2_client', None)\n        return getattr(client, '_id', None)\n\n    def current_loid_obj(self):\n        return self.stacked_proxy_safe_get(c, 'loid')\n\n    def current_loid(self):\n        loid = self.current_loid_obj()\n        if not loid:\n            return None\n        return loid.loid\n\n    def is_admin(self, user):\n        if not user or not hasattr(user, 'name'):\n            return False\n\n        return user.name in self.stacked_proxy_safe_get(g, 'admins', [])\n\n    def is_employee(self, user):\n        if not user:\n            return False\n        return user.employee\n\n    def user_has_beta_enabled(self, user):\n        if not user:\n            return False\n        return user.pref_beta\n\n    def has_gold(self, user):\n        if not user:\n            return False\n\n        return user.gold\n\n    def is_user_loggedin(self, user):\n        if not (user or self.current_user()):\n            return False\n        return True\n\n    def url_features(self):\n        return set(request.GET.getall('feature'))\n\n    def live_config(self, name):\n        live = self.stacked_proxy_safe_get(g, 'live_config', {})\n        return live.get(name)\n\n    def live_config_iteritems(self):\n        live = self.stacked_proxy_safe_get(g, 'live_config', {})\n        return live.iteritems()\n\n    def simple_event(self, name):\n        stats = self.stacked_proxy_safe_get(g, 'stats', None)\n        if stats:\n            return stats.simple_event(name)\n", "comments": "   a world proxy app request state features       proxying world allows easy testing caching needed                staticmethod     def stacked proxy safe get(stacked proxy  key  default none)             get field stackedobjectproxy          always succeeds  even proxy yet initialized          normally  proxy initialized   typeerror          raised indicate programming error  to avoid crashing feature         checks done early (e g   initial db set         pylons environment)  function instead return  default          uninitialized proxy           (initialized proxies always return value  either set value         empty string)                 the contents file subject common public attribution    license version 1 0  (the  license )  may use file except    compliance license  you may obtain copy license    http   code reddit com license  the license based mozilla public    license version 1 1  sections 14 15 added cover use    software computer network provide limited attribution    original developer  in addition  exhibit a modified consistent    exhibit b        software distributed license distributed  as is  basis     without warranty of any kind  either express implied  see license    specific language governing rights limitations license        the original code reddit        the original developer initial developer   the initial developer    original code reddit inc        all portions code written reddit copyright (c) 2006 2015 reddit    inc  all rights reserved                                                                                      in non request code (eg queued jobs)  necessarily    site name (or request type data)   in cases     want trigger subreddit specific code  ", "content": "# The contents of this file are subject to the Common Public Attribution\n# License Version 1.0. (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public\n# License Version 1.1, but Sections 14 and 15 have been added to cover use of\n# software over a computer network and provide for limited attribution for the\n# Original Developer. In addition, Exhibit A has been modified to be consistent\n# with Exhibit B.\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n# the specific language governing rights and limitations under the License.\n#\n# The Original Code is reddit.\n#\n# The Original Developer is the Initial Developer.  The Initial Developer of\n# the Original Code is reddit Inc.\n#\n# All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n# Inc. All Rights Reserved.\n###############################################################################\n\nfrom pylons import request\nfrom pylons import tmpl_context as c\nfrom pylons import app_globals as g\n\n\nclass World(object):\n    \"\"\"A World is the proxy to the app/request state for Features.\n\n    Proxying through World allows for easy testing and caching if needed.\n    \"\"\"\n\n    @staticmethod\n    def stacked_proxy_safe_get(stacked_proxy, key, default=None):\n        \"\"\"Get a field from a StackedObjectProxy\n\n        Always succeeds, even if the proxy has not yet been initialized.\n        Normally, if the proxy hasn't been initialized, a `TypeError` is\n        raised to indicate a programming error. To avoid crashing on feature\n        checks that are done too early (e.g., during initial DB set-up of\n        the pylons environment), this function will instead return `default`\n        for an uninitialized proxy.\n\n        (Initialized proxies ALWAYS return a value, either a set value\n        or an empty string)\n\n        \"\"\"\n        try:\n            return getattr(stacked_proxy, key)\n        except TypeError:\n            return default\n\n    def current_user(self):\n        if c.user_is_loggedin:\n            return self.stacked_proxy_safe_get(c, 'user')\n\n    def current_subreddit(self):\n        site = self.stacked_proxy_safe_get(c, 'site')\n        if not site:\n            # In non-request code (eg queued jobs), there isn't necessarily a\n            # site name (or other request-type data).  In those cases, we don't\n            # want to trigger any subreddit-specific code.\n            return ''\n        return site.name\n\n    def current_subdomain(self):\n        return self.stacked_proxy_safe_get(c, 'subdomain')\n\n    def current_oauth_client(self):\n        client = self.stacked_proxy_safe_get(c, 'oauth2_client', None)\n        return getattr(client, '_id', None)\n\n    def current_loid_obj(self):\n        return self.stacked_proxy_safe_get(c, 'loid')\n\n    def current_loid(self):\n        loid = self.current_loid_obj()\n        if not loid:\n            return None\n        return loid.loid\n\n    def is_admin(self, user):\n        if not user or not hasattr(user, 'name'):\n            return False\n\n        return user.name in self.stacked_proxy_safe_get(g, 'admins', [])\n\n    def is_employee(self, user):\n        if not user:\n            return False\n        return user.employee\n\n    def user_has_beta_enabled(self, user):\n        if not user:\n            return False\n        return user.pref_beta\n\n    def has_gold(self, user):\n        if not user:\n            return False\n\n        return user.gold\n\n    def is_user_loggedin(self, user):\n        if not (user or self.current_user()):\n            return False\n        return True\n\n    def url_features(self):\n        return set(request.GET.getall('feature'))\n\n    def live_config(self, name):\n        live = self.stacked_proxy_safe_get(g, 'live_config', {})\n        return live.get(name)\n\n    def live_config_iteritems(self):\n        live = self.stacked_proxy_safe_get(g, 'live_config', {})\n        return live.iteritems()\n\n    def simple_event(self, name):\n        stats = self.stacked_proxy_safe_get(g, 'stats', None)\n        if stats:\n            return stats.simple_event(name)\n", "description": "historical code from reddit.com", "file_name": "world.py", "id": "5200e45d2ac8a21d8b06e057bb71b22b", "language": "Python", "project_name": "reddit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/reddit-archive-reddit/reddit-archive-reddit-753b174/r2/r2/config/feature/world.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:55:36Z", "url": "https://github.com/reddit-archive/reddit", "wiki": true}