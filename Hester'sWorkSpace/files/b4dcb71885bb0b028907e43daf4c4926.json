{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.tests import common\n\n\nclass EventSaleTest(common.TransactionCase):\n\n    def setUp(self):\n        super(EventSaleTest, self).setUp()\n\n        self.EventRegistration = self.env['event.registration']\n\n        \n        product = self.env['product.product'].create({\n            'name': 'test_formation',\n            'type': 'service',\n            'event_ok': True,\n        })\n\n        \n        event = self.env['event.event'].create({\n            'name': 'test_event',\n            'event_type_id': 1,\n            'date_end': '2012-01-01 19:05:15',\n            'date_begin': '2012-01-01 18:05:15'\n        })\n\n        \n        self.sale_order = self.env['sale.order'].create({\n            'partner_id': self.env.ref('base.res_partner_2').id,\n            'note': 'Invoice after delivery',\n            'payment_term_id': self.env.ref('account.account_payment_term').id\n        })\n\n        \n        self.env['sale.order.line'].create({\n            'product_id': product.id,\n            'price_unit': 190.50,\n            'product_uom': self.env.ref('product.product_uom_unit').id,\n            'product_uom_qty': 8.0,\n            'order_id': self.sale_order.id,\n            'name': 'sales order line',\n            'event_id': event.id\n        })\n\n        \n        self.register_person = self.env['registration.editor'].create({\n            'sale_order_id': self.sale_order.id,\n            'event_registration_ids': [(0, 0, {\n                'event_id': event.id,\n                'name': 'Administrator',\n                'email': 'abc@example.com'\n            })],\n        })\n\n    def test_00_create_event_product(self):\n        \n        self.register_person.action_make_registration()\n        \n        registrations = self.EventRegistration.search([('origin', '=', self.sale_order.name)])\n        self.assertTrue(registrations, \"The registration is not created.\")\n", "comments": "      coding  utf 8        first i create event product    i create event type product    i create sales order    in sales order i add sales order lines  choose event product    in event registration i add attendee detail lines  choose event product    i click apply create attendees    i check registration created ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.tests import common\n\n\nclass EventSaleTest(common.TransactionCase):\n\n    def setUp(self):\n        super(EventSaleTest, self).setUp()\n\n        self.EventRegistration = self.env['event.registration']\n\n        # First I create an event product\n        product = self.env['product.product'].create({\n            'name': 'test_formation',\n            'type': 'service',\n            'event_ok': True,\n        })\n\n        # I create an event from the same type than my product\n        event = self.env['event.event'].create({\n            'name': 'test_event',\n            'event_type_id': 1,\n            'date_end': '2012-01-01 19:05:15',\n            'date_begin': '2012-01-01 18:05:15'\n        })\n\n        # I create a sales order\n        self.sale_order = self.env['sale.order'].create({\n            'partner_id': self.env.ref('base.res_partner_2').id,\n            'note': 'Invoice after delivery',\n            'payment_term_id': self.env.ref('account.account_payment_term').id\n        })\n\n        # In the sales order I add some sales order lines. i choose event product\n        self.env['sale.order.line'].create({\n            'product_id': product.id,\n            'price_unit': 190.50,\n            'product_uom': self.env.ref('product.product_uom_unit').id,\n            'product_uom_qty': 8.0,\n            'order_id': self.sale_order.id,\n            'name': 'sales order line',\n            'event_id': event.id\n        })\n\n        # In the event registration I add some attendee detail lines. i choose event product\n        self.register_person = self.env['registration.editor'].create({\n            'sale_order_id': self.sale_order.id,\n            'event_registration_ids': [(0, 0, {\n                'event_id': event.id,\n                'name': 'Administrator',\n                'email': 'abc@example.com'\n            })],\n        })\n\n    def test_00_create_event_product(self):\n        # I click apply to create attendees\n        self.register_person.action_make_registration()\n        # I check if a registration is created\n        registrations = self.EventRegistration.search([('origin', '=', self.sale_order.name)])\n        self.assertTrue(registrations, \"The registration is not created.\")\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_event_sale.py", "id": "b4dcb71885bb0b028907e43daf4c4926", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/event_sale/tests/test_event_sale.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}