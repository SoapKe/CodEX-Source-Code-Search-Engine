{"author": "odoo", "code": "# -*- coding:utf-8 -*-\n\n\nimport babel.dates\n\nfrom odoo import api, fields, models\n\nfrom odoo.fields import Datetime\n\n\nclass FleetVehicle(models.Model):\n    _inherit = 'fleet.vehicle'\n\n    co2_fee = fields.Float(compute='_compute_co2_fee', string=\"CO2 Fee\")\n    total_depreciated_cost = fields.Float(compute='_compute_total_depreciated_cost',\n        string=\"Total Cost (Depreciated)\", help=\"This includes all the depreciated costs and the CO2 fee\")\n    total_cost = fields.Float(compute='_compute_total_cost', string=\"Total Cost\", help=\"This include all the costs and the CO2 fee\")\n    fuel_type = fields.Selection(required=True, default='diesel')\n    atn = fields.Float(compute='_compute_car_atn', string=\"ATN\")\n    acquisition_date = fields.Date(required=True)\n\n    @api.depends('co2_fee', 'log_contracts', 'log_contracts.state', 'log_contracts.recurring_cost_amount_depreciated')\n    def _compute_total_depreciated_cost(self):\n        for car in self:\n            car.total_depreciated_cost = car.co2_fee + \\\n                sum(car.log_contracts.filtered(\n                    lambda contract: contract.state == 'open'\n                ).mapped('recurring_cost_amount_depreciated'))\n\n    @api.depends('co2_fee', 'log_contracts', 'log_contracts.state', 'log_contracts.cost_generated')\n    def _compute_total_cost(self):\n        for car in self:\n            car.total_cost = car.co2_fee\n            contracts = car.log_contracts.filtered(\n                lambda contract: contract.state == 'open' and contract.cost_frequency != 'no'\n            )\n            for contract in contracts:\n                if contract.cost_frequency == \"daily\":\n                    car.total_cost += contract.cost_generated * 30.0\n                elif contract.cost_frequency == \"weekly\":\n                    car.total_cost += contract.cost_generated * 4.0\n                elif contract.cost_frequency == \"monthly\":\n                    car.total_cost += contract.cost_generated\n                elif contract.cost_frequency == \"yearly\":\n                    car.total_cost += contract.cost_generated / 12.0\n\n    def _get_co2_fee(self, co2):\n        return max((((co2 * 9.0) - 600.0) * 1.2488) / 12.0, 0.0)\n\n    @api.depends('co2')\n    def _compute_co2_fee(self):\n        for car in self:\n            car.co2_fee = self._get_co2_fee(car.co2)\n\n    @api.depends('fuel_type', 'car_value', 'acquisition_date')\n    def _compute_car_atn(self):\n        for car in self:\n            car.atn = car._get_car_atn(car.acquisition_date, car.car_value, car.fuel_type, car.co2)\n\n    @api.depends('model_id', 'license_plate', 'log_contracts', 'acquisition_date',\n                 'co2_fee', 'log_contracts', 'log_contracts.state', 'log_contracts.recurring_cost_amount_depreciated')\n    def _compute_vehicle_name(self):\n        super(FleetVehicle, self)._compute_vehicle_name()\n        for vehicle in self:\n            acquisition_date = vehicle._get_acquisition_date()\n            vehicle.name += u\" \\u2022 \" + str(round(vehicle.total_depreciated_cost, 2)) + u\" \\u2022 \" + acquisition_date\n\n    def _get_acquisition_date(self):\n        self.ensure_one()\n        return babel.dates.format_date(\n            date=Datetime.from_string(self.acquisition_date),\n            format='MMMM y',\n            locale=self._context.get('lang') or 'en_US'\n        )\n\n    def _get_car_atn(self, acquisition_date, car_value, fuel_type, co2):\n        \n        now = Datetime.from_string(Datetime.now())\n        start = Datetime.from_string(acquisition_date)\n        if start:\n            number_of_month = (now.year - start.year) * 12.0 + now.month - start.month + int(bool(now.day - start.day + 1))\n            if number_of_month <= 12:\n                age_coefficient = 1.00\n            elif number_of_month <= 24:\n                age_coefficient = 0.94\n            elif number_of_month <= 36:\n                age_coefficient = 0.88\n            elif number_of_month <= 48:\n                age_coefficient = 0.82\n            elif number_of_month <= 60:\n                age_coefficient = 0.76\n            else:\n                age_coefficient = 0.70\n            car_value = car_value * age_coefficient\n            \n            magic_coeff = 6.0 / 7.0  \n            if fuel_type == 'electric':\n                atn = 0.0\n            else:\n                if fuel_type in ['diesel', 'hybrid']:\n                    reference = 87.0\n                else:\n                    reference = 105.0\n\n                if co2 <= reference:\n                    atn = car_value * max(0.04, (0.055 - 0.001 * (reference - co2))) * magic_coeff\n                else:\n                    atn = car_value * min(0.18, (0.055 + 0.001 * (co2 - reference))) * magic_coeff\n            return max(1280, atn) / 12.0\n\n\nclass FleetVehicleLogContract(models.Model):\n    _inherit = 'fleet.vehicle.log.contract'\n\n    recurring_cost_amount_depreciated = fields.Float(\"Recurring Cost Amount (depreciated)\")\n\nclass FleetVehicleModel(models.Model):\n    _inherit = 'fleet.vehicle.model'\n\n    default_recurring_cost_amount_depreciated = fields.Float(string=\"Cost (Depreciated)\",\n        help=\"Default recurring cost amount that should be applied to a new car from this model\")\n    default_co2 = fields.Float(string=\"CO2 emissions\")\n    default_fuel_type = fields.Selection([('gasoline', 'Gasoline'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], 'Fuel Type', help='Fuel Used by the vehicle')\n    default_car_value = fields.Float(string=\"Catalog Value (VAT Incl.)\")\n    can_be_requested = fields.Boolean(string=\"Can be requested\", help=\"Can be requested on a contract as a new car\")\n    default_atn = fields.Float(compute='_compute_atn', string=\"ATN\")\n    default_total_depreciated_cost = fields.Float(compute='_compute_default_total_depreciated_cost', string=\"Total Cost (Depreciated)\")\n    co2_fee = fields.Float(compute='_compute_co2_fee', string=\"CO2 fee\")\n\n    @api.depends('default_car_value', 'default_co2', 'default_fuel_type')\n    def _compute_atn(self):\n        now = Datetime.now()\n        for model in self:\n            model.default_atn = self.env['fleet.vehicle']._get_car_atn(now, model.default_car_value, model.default_fuel_type, model.default_co2)\n\n    @api.depends('co2_fee', 'default_recurring_cost_amount_depreciated')\n    def _compute_default_total_depreciated_cost(self):\n        for model in self:\n            model.default_total_depreciated_cost = model.co2_fee + model.default_recurring_cost_amount_depreciated\n\n    @api.multi\n    @api.depends('name', 'brand_id', 'default_total_depreciated_cost')\n    def name_get(self):\n        res = super(FleetVehicleModel, self).name_get()\n        new_res = []\n        for res_item in res:\n            model = self.browse(res_item[0])\n            if model.default_total_depreciated_cost != 0.0:\n                new_res.append((res_item[0], res_item[1] + u\" \\u2022 \" + str(round(model.default_total_depreciated_cost, 2))))\n            else:\n                new_res.append(res_item)\n        return new_res\n\n    @api.depends('default_co2')\n    def _compute_co2_fee(self):\n        for model in self:\n            model.co2_fee = self.env['fleet.vehicle']._get_co2_fee(model.default_co2)\n", "comments": "      coding utf 8        part odoo  see license file full copyright licensing details     compute correction coefficient age car    compute atn value corrected car value    don ask ", "content": "# -*- coding:utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport babel.dates\n\nfrom odoo import api, fields, models\n\nfrom odoo.fields import Datetime\n\n\nclass FleetVehicle(models.Model):\n    _inherit = 'fleet.vehicle'\n\n    co2_fee = fields.Float(compute='_compute_co2_fee', string=\"CO2 Fee\")\n    total_depreciated_cost = fields.Float(compute='_compute_total_depreciated_cost',\n        string=\"Total Cost (Depreciated)\", help=\"This includes all the depreciated costs and the CO2 fee\")\n    total_cost = fields.Float(compute='_compute_total_cost', string=\"Total Cost\", help=\"This include all the costs and the CO2 fee\")\n    fuel_type = fields.Selection(required=True, default='diesel')\n    atn = fields.Float(compute='_compute_car_atn', string=\"ATN\")\n    acquisition_date = fields.Date(required=True)\n\n    @api.depends('co2_fee', 'log_contracts', 'log_contracts.state', 'log_contracts.recurring_cost_amount_depreciated')\n    def _compute_total_depreciated_cost(self):\n        for car in self:\n            car.total_depreciated_cost = car.co2_fee + \\\n                sum(car.log_contracts.filtered(\n                    lambda contract: contract.state == 'open'\n                ).mapped('recurring_cost_amount_depreciated'))\n\n    @api.depends('co2_fee', 'log_contracts', 'log_contracts.state', 'log_contracts.cost_generated')\n    def _compute_total_cost(self):\n        for car in self:\n            car.total_cost = car.co2_fee\n            contracts = car.log_contracts.filtered(\n                lambda contract: contract.state == 'open' and contract.cost_frequency != 'no'\n            )\n            for contract in contracts:\n                if contract.cost_frequency == \"daily\":\n                    car.total_cost += contract.cost_generated * 30.0\n                elif contract.cost_frequency == \"weekly\":\n                    car.total_cost += contract.cost_generated * 4.0\n                elif contract.cost_frequency == \"monthly\":\n                    car.total_cost += contract.cost_generated\n                elif contract.cost_frequency == \"yearly\":\n                    car.total_cost += contract.cost_generated / 12.0\n\n    def _get_co2_fee(self, co2):\n        return max((((co2 * 9.0) - 600.0) * 1.2488) / 12.0, 0.0)\n\n    @api.depends('co2')\n    def _compute_co2_fee(self):\n        for car in self:\n            car.co2_fee = self._get_co2_fee(car.co2)\n\n    @api.depends('fuel_type', 'car_value', 'acquisition_date')\n    def _compute_car_atn(self):\n        for car in self:\n            car.atn = car._get_car_atn(car.acquisition_date, car.car_value, car.fuel_type, car.co2)\n\n    @api.depends('model_id', 'license_plate', 'log_contracts', 'acquisition_date',\n                 'co2_fee', 'log_contracts', 'log_contracts.state', 'log_contracts.recurring_cost_amount_depreciated')\n    def _compute_vehicle_name(self):\n        super(FleetVehicle, self)._compute_vehicle_name()\n        for vehicle in self:\n            acquisition_date = vehicle._get_acquisition_date()\n            vehicle.name += u\" \\u2022 \" + str(round(vehicle.total_depreciated_cost, 2)) + u\" \\u2022 \" + acquisition_date\n\n    def _get_acquisition_date(self):\n        self.ensure_one()\n        return babel.dates.format_date(\n            date=Datetime.from_string(self.acquisition_date),\n            format='MMMM y',\n            locale=self._context.get('lang') or 'en_US'\n        )\n\n    def _get_car_atn(self, acquisition_date, car_value, fuel_type, co2):\n        # Compute the correction coefficient from the age of the car\n        now = Datetime.from_string(Datetime.now())\n        start = Datetime.from_string(acquisition_date)\n        if start:\n            number_of_month = (now.year - start.year) * 12.0 + now.month - start.month + int(bool(now.day - start.day + 1))\n            if number_of_month <= 12:\n                age_coefficient = 1.00\n            elif number_of_month <= 24:\n                age_coefficient = 0.94\n            elif number_of_month <= 36:\n                age_coefficient = 0.88\n            elif number_of_month <= 48:\n                age_coefficient = 0.82\n            elif number_of_month <= 60:\n                age_coefficient = 0.76\n            else:\n                age_coefficient = 0.70\n            car_value = car_value * age_coefficient\n            # Compute atn value from corrected car_value\n            magic_coeff = 6.0 / 7.0  # Don't ask me why\n            if fuel_type == 'electric':\n                atn = 0.0\n            else:\n                if fuel_type in ['diesel', 'hybrid']:\n                    reference = 87.0\n                else:\n                    reference = 105.0\n\n                if co2 <= reference:\n                    atn = car_value * max(0.04, (0.055 - 0.001 * (reference - co2))) * magic_coeff\n                else:\n                    atn = car_value * min(0.18, (0.055 + 0.001 * (co2 - reference))) * magic_coeff\n            return max(1280, atn) / 12.0\n\n\nclass FleetVehicleLogContract(models.Model):\n    _inherit = 'fleet.vehicle.log.contract'\n\n    recurring_cost_amount_depreciated = fields.Float(\"Recurring Cost Amount (depreciated)\")\n\nclass FleetVehicleModel(models.Model):\n    _inherit = 'fleet.vehicle.model'\n\n    default_recurring_cost_amount_depreciated = fields.Float(string=\"Cost (Depreciated)\",\n        help=\"Default recurring cost amount that should be applied to a new car from this model\")\n    default_co2 = fields.Float(string=\"CO2 emissions\")\n    default_fuel_type = fields.Selection([('gasoline', 'Gasoline'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], 'Fuel Type', help='Fuel Used by the vehicle')\n    default_car_value = fields.Float(string=\"Catalog Value (VAT Incl.)\")\n    can_be_requested = fields.Boolean(string=\"Can be requested\", help=\"Can be requested on a contract as a new car\")\n    default_atn = fields.Float(compute='_compute_atn', string=\"ATN\")\n    default_total_depreciated_cost = fields.Float(compute='_compute_default_total_depreciated_cost', string=\"Total Cost (Depreciated)\")\n    co2_fee = fields.Float(compute='_compute_co2_fee', string=\"CO2 fee\")\n\n    @api.depends('default_car_value', 'default_co2', 'default_fuel_type')\n    def _compute_atn(self):\n        now = Datetime.now()\n        for model in self:\n            model.default_atn = self.env['fleet.vehicle']._get_car_atn(now, model.default_car_value, model.default_fuel_type, model.default_co2)\n\n    @api.depends('co2_fee', 'default_recurring_cost_amount_depreciated')\n    def _compute_default_total_depreciated_cost(self):\n        for model in self:\n            model.default_total_depreciated_cost = model.co2_fee + model.default_recurring_cost_amount_depreciated\n\n    @api.multi\n    @api.depends('name', 'brand_id', 'default_total_depreciated_cost')\n    def name_get(self):\n        res = super(FleetVehicleModel, self).name_get()\n        new_res = []\n        for res_item in res:\n            model = self.browse(res_item[0])\n            if model.default_total_depreciated_cost != 0.0:\n                new_res.append((res_item[0], res_item[1] + u\" \\u2022 \" + str(round(model.default_total_depreciated_cost, 2))))\n            else:\n                new_res.append(res_item)\n        return new_res\n\n    @api.depends('default_co2')\n    def _compute_co2_fee(self):\n        for model in self:\n            model.co2_fee = self.env['fleet.vehicle']._get_co2_fee(model.default_co2)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "fleet.py", "id": "b5215318280c30a57e5af73830416dc8", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/l10n_be_hr_payroll_fleet/models/fleet.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}