{"author": "mitmproxy", "code": "import json\nfrom unittest import mock\n\nfrom mitmproxy.test import taddons\nfrom mitmproxy.test import tflow\n\nfrom mitmproxy import flowfilter\nfrom mitmproxy.tools.web.app import flow_to_json\n\nfrom mitmproxy.tools.web import static_viewer\nfrom mitmproxy.addons import save, readfile\n\n\ndef test_save_static(tmpdir):\n    tmpdir.mkdir('static')\n    static_viewer.save_static(tmpdir)\n    assert len(tmpdir.listdir()) == 2\n    assert tmpdir.join('index.html').check(file=1)\n    assert tmpdir.join('static/static.js').read() == 'MITMWEB_STATIC = true;'\n\n\ndef test_save_filter_help(tmpdir):\n    static_viewer.save_filter_help(tmpdir)\n    f = tmpdir.join('/filter-help.json')\n    assert f.check(file=1)\n    assert f.read() == json.dumps(dict(commands=flowfilter.help))\n\n\ndef test_save_settings(tmpdir):\n    static_viewer.save_settings(tmpdir)\n    f = tmpdir.join('/settings.json')\n    assert f.check(file=1)\n\n\ndef test_save_flows(tmpdir):\n    flows = [tflow.tflow(req=True, resp=None), tflow.tflow(req=True, resp=True)]\n    static_viewer.save_flows(tmpdir, flows)\n    assert tmpdir.join('flows.json').check(file=1)\n    assert tmpdir.join('flows.json').read() == json.dumps([flow_to_json(f) for f in flows])\n\n\n@mock.patch('mitmproxy.ctx.log')\ndef test_save_flows_content(ctx, tmpdir):\n    flows = [tflow.tflow(req=True, resp=None), tflow.tflow(req=True, resp=True)]\n    with mock.patch('time.time', mock.Mock(side_effect=[1, 2, 2] * 4)):\n        static_viewer.save_flows_content(tmpdir, flows)\n    flows_path = tmpdir.join('flows')\n    assert len(flows_path.listdir()) == len(flows)\n    for p in flows_path.listdir():\n        assert p.join('request').check(dir=1)\n        assert p.join('response').check(dir=1)\n        assert p.join('request/content.data').check(file=1)\n        assert p.join('request/content').check(dir=1)\n        assert p.join('response/content.data').check(file=1)\n        assert p.join('response/content').check(dir=1)\n        assert p.join('request/content/Auto.json').check(file=1)\n        assert p.join('response/content/Auto.json').check(file=1)\n\n\ndef test_static_viewer(tmpdir):\n    s = static_viewer.StaticViewer()\n    rf = readfile.ReadFile()\n    sa = save.Save()\n    with taddons.context(rf) as tctx:\n        sa.save([tflow.tflow(resp=True)], str(tmpdir.join('foo')))\n        tctx.master.addons.add(s)\n        tctx.configure(s, web_static_viewer=str(tmpdir), rfile=str(tmpdir.join('foo')))\n        assert tmpdir.join('index.html').check(file=1)\n        assert tmpdir.join('static').check(dir=1)\n        assert tmpdir.join('flows').check(dir=1)\n", "comments": "", "content": "import json\nfrom unittest import mock\n\nfrom mitmproxy.test import taddons\nfrom mitmproxy.test import tflow\n\nfrom mitmproxy import flowfilter\nfrom mitmproxy.tools.web.app import flow_to_json\n\nfrom mitmproxy.tools.web import static_viewer\nfrom mitmproxy.addons import save, readfile\n\n\ndef test_save_static(tmpdir):\n    tmpdir.mkdir('static')\n    static_viewer.save_static(tmpdir)\n    assert len(tmpdir.listdir()) == 2\n    assert tmpdir.join('index.html').check(file=1)\n    assert tmpdir.join('static/static.js').read() == 'MITMWEB_STATIC = true;'\n\n\ndef test_save_filter_help(tmpdir):\n    static_viewer.save_filter_help(tmpdir)\n    f = tmpdir.join('/filter-help.json')\n    assert f.check(file=1)\n    assert f.read() == json.dumps(dict(commands=flowfilter.help))\n\n\ndef test_save_settings(tmpdir):\n    static_viewer.save_settings(tmpdir)\n    f = tmpdir.join('/settings.json')\n    assert f.check(file=1)\n\n\ndef test_save_flows(tmpdir):\n    flows = [tflow.tflow(req=True, resp=None), tflow.tflow(req=True, resp=True)]\n    static_viewer.save_flows(tmpdir, flows)\n    assert tmpdir.join('flows.json').check(file=1)\n    assert tmpdir.join('flows.json').read() == json.dumps([flow_to_json(f) for f in flows])\n\n\n@mock.patch('mitmproxy.ctx.log')\ndef test_save_flows_content(ctx, tmpdir):\n    flows = [tflow.tflow(req=True, resp=None), tflow.tflow(req=True, resp=True)]\n    with mock.patch('time.time', mock.Mock(side_effect=[1, 2, 2] * 4)):\n        static_viewer.save_flows_content(tmpdir, flows)\n    flows_path = tmpdir.join('flows')\n    assert len(flows_path.listdir()) == len(flows)\n    for p in flows_path.listdir():\n        assert p.join('request').check(dir=1)\n        assert p.join('response').check(dir=1)\n        assert p.join('request/content.data').check(file=1)\n        assert p.join('request/content').check(dir=1)\n        assert p.join('response/content.data').check(file=1)\n        assert p.join('response/content').check(dir=1)\n        assert p.join('request/content/Auto.json').check(file=1)\n        assert p.join('response/content/Auto.json').check(file=1)\n\n\ndef test_static_viewer(tmpdir):\n    s = static_viewer.StaticViewer()\n    rf = readfile.ReadFile()\n    sa = save.Save()\n    with taddons.context(rf) as tctx:\n        sa.save([tflow.tflow(resp=True)], str(tmpdir.join('foo')))\n        tctx.master.addons.add(s)\n        tctx.configure(s, web_static_viewer=str(tmpdir), rfile=str(tmpdir.join('foo')))\n        assert tmpdir.join('index.html').check(file=1)\n        assert tmpdir.join('static').check(dir=1)\n        assert tmpdir.join('flows').check(dir=1)\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "test_static_viewer.py", "id": "9da7f61d4f4537f028afa3c6b33188c6", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mitmproxy-mitmproxy/mitmproxy-mitmproxy-3c7725a/test/mitmproxy/tools/web/test_static_viewer.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:30:56Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}