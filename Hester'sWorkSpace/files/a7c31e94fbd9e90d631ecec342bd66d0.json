{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    parse_duration,\n    unified_strdate,\n)\n\n\nclass HuffPostIE(InfoExtractor):\n    IE_DESC = 'Huffington Post'\n    _VALID_URL = r\n\n    _TEST = {\n        'url': 'http://live.huffingtonpost.com/r/segment/legalese-it/52dd3e4b02a7602131000677',\n        'md5': '55f5e8981c1c80a64706a44b74833de8',\n        'info_dict': {\n            'id': '52dd3e4b02a7602131000677',\n            'ext': 'mp4',\n            'title': 'Legalese It! with @MikeSacksHP',\n            'description': 'This week on Legalese It, Mike talks to David Bosco about his new book on the ICC, \"Rough Justice,\" he also discusses the Virginia AG\\'s historic stance on gay marriage, the execution of Edgar Tamayo, the ICC\\'s delay of Kenya\\'s President and more.  ',\n            'duration': 1549,\n            'upload_date': '20140124',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'expected_warnings': ['HTTP Error 404: Not Found'],\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        api_url = 'http://embed.live.huffingtonpost.com/api/segments/%s.json' % video_id\n        data = self._download_json(api_url, video_id)['data']\n\n        video_title = data['title']\n        duration = parse_duration(data.get('running_time'))\n        upload_date = unified_strdate(\n            data.get('schedule', {}).get('starts_at') or data.get('segment_start_date_time'))\n        description = data.get('description')\n\n        thumbnails = []\n        for url in filter(None, data['images'].values()):\n            m = re.match(r'.*-([0-9]+x[0-9]+)\\.', url)\n            if not m:\n                continue\n            thumbnails.append({\n                'url': url,\n                'resolution': m.group(1),\n            })\n\n        formats = []\n        sources = data.get('sources', {})\n        live_sources = list(sources.get('live', {}).items()) + list(sources.get('live_again', {}).items())\n        for key, url in live_sources:\n            ext = determine_ext(url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    url, video_id, ext='mp4', m3u8_id='hls', fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    url + '?hdcore=2.9.5', video_id, f4m_id='hds', fatal=False))\n            else:\n                formats.append({\n                    'format': key,\n                    'format_id': key.replace('/', '.'),\n                    'ext': 'mp4',\n                    'url': url,\n                    'vcodec': 'none' if key.startswith('audio/') else None,\n                })\n\n        if not formats and data.get('fivemin_id'):\n            return self.url_result('5min:%s' % data['fivemin_id'])\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'description': description,\n            'formats': formats,\n            'duration': duration,\n            'upload_date': upload_date,\n            'thumbnails': thumbnails,\n        }\n", "comments": "(?x)\n        https?://(embed\\.)?live\\.huffingtonpost\\.com/\n        (?:\n            r/segment/[^/]+/|\n            HPLEmbedPlayer/\\?segmentId=\n        )\n        (?P<id>[0-9a-f]+)\n)\n# m3u8 download\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    parse_duration,\n    unified_strdate,\n)\n\n\nclass HuffPostIE(InfoExtractor):\n    IE_DESC = 'Huffington Post'\n    _VALID_URL = r'''(?x)\n        https?://(embed\\.)?live\\.huffingtonpost\\.com/\n        (?:\n            r/segment/[^/]+/|\n            HPLEmbedPlayer/\\?segmentId=\n        )\n        (?P<id>[0-9a-f]+)'''\n\n    _TEST = {\n        'url': 'http://live.huffingtonpost.com/r/segment/legalese-it/52dd3e4b02a7602131000677',\n        'md5': '55f5e8981c1c80a64706a44b74833de8',\n        'info_dict': {\n            'id': '52dd3e4b02a7602131000677',\n            'ext': 'mp4',\n            'title': 'Legalese It! with @MikeSacksHP',\n            'description': 'This week on Legalese It, Mike talks to David Bosco about his new book on the ICC, \"Rough Justice,\" he also discusses the Virginia AG\\'s historic stance on gay marriage, the execution of Edgar Tamayo, the ICC\\'s delay of Kenya\\'s President and more.  ',\n            'duration': 1549,\n            'upload_date': '20140124',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'expected_warnings': ['HTTP Error 404: Not Found'],\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        api_url = 'http://embed.live.huffingtonpost.com/api/segments/%s.json' % video_id\n        data = self._download_json(api_url, video_id)['data']\n\n        video_title = data['title']\n        duration = parse_duration(data.get('running_time'))\n        upload_date = unified_strdate(\n            data.get('schedule', {}).get('starts_at') or data.get('segment_start_date_time'))\n        description = data.get('description')\n\n        thumbnails = []\n        for url in filter(None, data['images'].values()):\n            m = re.match(r'.*-([0-9]+x[0-9]+)\\.', url)\n            if not m:\n                continue\n            thumbnails.append({\n                'url': url,\n                'resolution': m.group(1),\n            })\n\n        formats = []\n        sources = data.get('sources', {})\n        live_sources = list(sources.get('live', {}).items()) + list(sources.get('live_again', {}).items())\n        for key, url in live_sources:\n            ext = determine_ext(url)\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    url, video_id, ext='mp4', m3u8_id='hls', fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    url + '?hdcore=2.9.5', video_id, f4m_id='hds', fatal=False))\n            else:\n                formats.append({\n                    'format': key,\n                    'format_id': key.replace('/', '.'),\n                    'ext': 'mp4',\n                    'url': url,\n                    'vcodec': 'none' if key.startswith('audio/') else None,\n                })\n\n        if not formats and data.get('fivemin_id'):\n            return self.url_result('5min:%s' % data['fivemin_id'])\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': video_title,\n            'description': description,\n            'formats': formats,\n            'duration': duration,\n            'upload_date': upload_date,\n            'thumbnails': thumbnails,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "huffpost.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/huffpost.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}