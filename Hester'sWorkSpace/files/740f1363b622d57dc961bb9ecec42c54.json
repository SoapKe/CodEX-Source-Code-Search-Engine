{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom .gigya import GigyaBaseIE\nfrom ..compat import compat_HTTPError\nfrom ..utils import (\n    ExtractorError,\n    strip_or_none,\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass CanvasIE(InfoExtractor):\n    _VALID_URL = r'https?://mediazone\\.vrt\\.be/api/v1/(?P<site_id>canvas|een|ketnet|vrtvideo)/assets/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://mediazone.vrt.be/api/v1/ketnet/assets/md-ast-4ac54990-ce66-4d00-a8ca-9eac86f4c475',\n        'md5': '90139b746a0a9bd7bb631283f6e2a64e',\n        'info_dict': {\n            'id': 'md-ast-4ac54990-ce66-4d00-a8ca-9eac86f4c475',\n            'display_id': 'md-ast-4ac54990-ce66-4d00-a8ca-9eac86f4c475',\n            'ext': 'flv',\n            'title': 'Nachtwacht: De Greystook',\n            'description': 'md5:1db3f5dc4c7109c821261e7512975be7',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1468.03,\n        },\n        'expected_warnings': ['is not a supported codec', 'Unknown MIME type'],\n    }, {\n        'url': 'https://mediazone.vrt.be/api/v1/canvas/assets/mz-ast-5e5f90b6-2d72-4c40-82c2-e134f884e93e',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        site_id, video_id = mobj.group('site_id'), mobj.group('id')\n\n        data = self._download_json(\n            'https://mediazone.vrt.be/api/v1/%s/assets/%s'\n            % (site_id, video_id), video_id)\n\n        title = data['title']\n        description = data.get('description')\n\n        formats = []\n        for target in data['targetUrls']:\n            format_url, format_type = target.get('url'), target.get('type')\n            if not format_url or not format_type:\n                continue\n            if format_type == 'HLS':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id=format_type, fatal=False))\n            elif format_type == 'HDS':\n                formats.extend(self._extract_f4m_formats(\n                    format_url, video_id, f4m_id=format_type, fatal=False))\n            elif format_type == 'MPEG_DASH':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, video_id, mpd_id=format_type, fatal=False))\n            elif format_type == 'HSS':\n                formats.extend(self._extract_ism_formats(\n                    format_url, video_id, ism_id='mss', fatal=False))\n            else:\n                formats.append({\n                    'format_id': format_type,\n                    'url': format_url,\n                })\n        self._sort_formats(formats)\n\n        subtitles = {}\n        subtitle_urls = data.get('subtitleUrls')\n        if isinstance(subtitle_urls, list):\n            for subtitle in subtitle_urls:\n                subtitle_url = subtitle.get('url')\n                if subtitle_url and subtitle.get('type') == 'CLOSED':\n                    subtitles.setdefault('nl', []).append({'url': subtitle_url})\n\n        return {\n            'id': video_id,\n            'display_id': video_id,\n            'title': title,\n            'description': description,\n            'formats': formats,\n            'duration': float_or_none(data.get('duration'), 1000),\n            'thumbnail': data.get('posterImageUrl'),\n            'subtitles': subtitles,\n        }\n\n\nclass CanvasEenIE(InfoExtractor):\n    IE_DESC = 'canvas.be and een.be'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site_id>canvas|een)\\.be/(?:[^/]+/)*(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.canvas.be/video/de-afspraak/najaar-2015/de-afspraak-veilt-voor-de-warmste-week',\n        'md5': 'ed66976748d12350b118455979cca293',\n        'info_dict': {\n            'id': 'mz-ast-5e5f90b6-2d72-4c40-82c2-e134f884e93e',\n            'display_id': 'de-afspraak-veilt-voor-de-warmste-week',\n            'ext': 'flv',\n            'title': 'De afspraak veilt voor de Warmste Week',\n            'description': 'md5:24cb860c320dc2be7358e0e5aa317ba6',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 49.02,\n        },\n        'expected_warnings': ['is not a supported codec'],\n    }, {\n        \n        'url': 'http://www.canvas.be/video/panorama/2016/pieter-0167',\n        'info_dict': {\n            'id': 'mz-ast-5240ff21-2d30-4101-bba6-92b5ec67c625',\n            'display_id': 'pieter-0167',\n            'ext': 'mp4',\n            'title': 'Pieter 0167',\n            'description': 'md5:943cd30f48a5d29ba02c3a104dc4ec4e',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 2553.08,\n            'subtitles': {\n                'nl': [{\n                    'ext': 'vtt',\n                }],\n            },\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Pagina niet gevonden',\n    }, {\n        'url': 'https://www.een.be/sorry-voor-alles/herbekijk-sorry-voor-alles',\n        'info_dict': {\n            'id': 'mz-ast-11a587f8-b921-4266-82e2-0bce3e80d07f',\n            'display_id': 'herbekijk-sorry-voor-alles',\n            'ext': 'mp4',\n            'title': 'Herbekijk Sorry voor alles',\n            'description': 'md5:8bb2805df8164e5eb95d6a7a29dc0dd3',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 3788.06,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Episode no longer available',\n    }, {\n        'url': 'https://www.canvas.be/check-point/najaar-2016/de-politie-uw-vriend',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        site_id, display_id = mobj.group('site_id'), mobj.group('id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = strip_or_none(self._search_regex(\n            r'<h1[^>]+class=\"video__body__header__title\"[^>]*>(.+?)</h1>',\n            webpage, 'title', default=None) or self._og_search_title(\n            webpage, default=None))\n\n        video_id = self._html_search_regex(\n            r'data-video=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1', webpage, 'video id',\n            group='id')\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'https://mediazone.vrt.be/api/v1/%s/assets/%s' % (site_id, video_id),\n            'ie_key': CanvasIE.ie_key(),\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n        }\n\n\nclass VrtNUIE(GigyaBaseIE):\n    IE_DESC = 'VrtNU.be'\n    _VALID_URL = r'https?://(?:www\\.)?vrt\\.be/(?P<site_id>vrtnu)/(?:[^/]+/)*(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://www.vrt.be/vrtnu/a-z/postbus-x/1/postbus-x-s1a1/',\n        'info_dict': {\n            'id': 'pbs-pub-2e2d8c27-df26-45c9-9dc6-90c78153044d$vid-90c932b1-e21d-4fb8-99b1-db7b49cf74de',\n            'ext': 'flv',\n            'title': 'De zwarte weduwe',\n            'description': 'md5:d90c21dced7db869a85db89a623998d4',\n            'duration': 1457.04,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'season': '1',\n            'season_number': 1,\n            'episode_number': 1,\n        },\n        'skip': 'This video is only available for registered users'\n    }]\n    _NETRC_MACHINE = 'vrtnu'\n    _APIKEY = '3_0Z2HujMtiWq_pkAjgnS2Md2E11a1AwZjYiBETtwNE-EoEHDINgtnvcAOpNgmrVGy'\n    _CONTEXT_ID = 'R3595707040'\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        username, password = self._get_login_info()\n        if username is None:\n            return\n\n        auth_data = {\n            'APIKey': self._APIKEY,\n            'targetEnv': 'jssdk',\n            'loginID': username,\n            'password': password,\n            'authMode': 'cookie',\n        }\n\n        auth_info = self._gigya_login(auth_data)\n\n        \n        login_attempt = 1\n        while login_attempt <= 3:\n            try:\n                \n                \n                self._request_webpage(\n                    'https://token.vrt.be',\n                    None, note='Requesting a token', errnote='Could not get a token',\n                    headers={\n                        'Content-Type': 'application/json',\n                        'Referer': 'https://www.vrt.be/vrtnu/',\n                    },\n                    data=json.dumps({\n                        'uid': auth_info['UID'],\n                        'uidsig': auth_info['UIDSignature'],\n                        'ts': auth_info['signatureTimestamp'],\n                        'email': auth_info['profile']['email'],\n                    }).encode('utf-8'))\n            except ExtractorError as e:\n                if isinstance(e.cause, compat_HTTPError) and e.cause.code == 401:\n                    login_attempt += 1\n                    self.report_warning('Authentication failed')\n                    self._sleep(1, None, msg_template='Waiting for %(timeout)s seconds before trying again')\n                else:\n                    raise e\n            else:\n                break\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage, urlh = self._download_webpage_handle(url, display_id)\n\n        title = self._html_search_regex(\n            r'(?ms)<h1 class=\"content__heading\">(.+?)</h1>',\n            webpage, 'title').strip()\n\n        description = self._html_search_regex(\n            r'(?ms)<div class=\"content__description\">(.+?)</div>',\n            webpage, 'description', default=None)\n\n        season = self._html_search_regex(\n            [r,\n            webpage, 'episode_number', default=None))\n\n        release_date = parse_iso8601(self._html_search_regex(\n            r'(?ms)<div class=\"content__broadcastdate\">\\s*<time\\ datetime=\"(.+?)\"',\n            webpage, 'release_date', default=None))\n\n        \n        clean_url = urlh.geturl().split('?')[0].split('\n        securevideo_url = clean_url + '.mssecurevideo.json'\n\n        try:\n            video = self._download_json(securevideo_url, display_id)\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 401:\n                self.raise_login_required()\n            raise\n\n        \n        redirect_url = video.get('url')\n        if redirect_url:\n            return self.url_result(self._proto_relative_url(redirect_url, 'https:'))\n\n        \n        \n        video_id = list(video.values())[0].get('videoid')\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'https://mediazone.vrt.be/api/v1/vrtvideo/assets/%s' % video_id,\n            'ie_key': CanvasIE.ie_key(),\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'season': season,\n            'season_number': season_number,\n            'episode_number': episode_number,\n            'release_date': release_date,\n        }\n", "comments": "(?xms)<div\\ class=\"tabs__tab\\ tabs__tab--active\">\\s*\n                    <span>seizoen\\ (.+?)</span>\\s*\n                </div>''',\n             r'<option value=\"seizoen (\\d{1,3})\" data-href=\"[^\"]+?\" selected>'],\n            webpage, 'season', default=None)\n\n        season_number = int_or_none(season)\n\n        episode_number = int_or_none(self._html_search_regex(\n            r'''(?xms)<div\\ class=\"content__episode\">\\s*\n                    <abbr\\ title=\"aflevering\">afl</abbr>\\s*<span>(\\d+)</span>\n                </div>\n>\n#&]+)'\n#&]+)'\n# with subtitles\n#&]+)'\n# Sometimes authentication fails for no good reason, retry\n# When requesting a token, no actual token is returned, but the\n# necessary cookies are set.\n# If there's a ? or a # in the URL, remove them and everything after\n#')[0].strip('/')\n# We are dealing with a '../<show>.relevant' URL\n# There is only one entry, but with an unknown key, so just get\n# the first one\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom .gigya import GigyaBaseIE\nfrom ..compat import compat_HTTPError\nfrom ..utils import (\n    ExtractorError,\n    strip_or_none,\n    float_or_none,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass CanvasIE(InfoExtractor):\n    _VALID_URL = r'https?://mediazone\\.vrt\\.be/api/v1/(?P<site_id>canvas|een|ketnet|vrtvideo)/assets/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'https://mediazone.vrt.be/api/v1/ketnet/assets/md-ast-4ac54990-ce66-4d00-a8ca-9eac86f4c475',\n        'md5': '90139b746a0a9bd7bb631283f6e2a64e',\n        'info_dict': {\n            'id': 'md-ast-4ac54990-ce66-4d00-a8ca-9eac86f4c475',\n            'display_id': 'md-ast-4ac54990-ce66-4d00-a8ca-9eac86f4c475',\n            'ext': 'flv',\n            'title': 'Nachtwacht: De Greystook',\n            'description': 'md5:1db3f5dc4c7109c821261e7512975be7',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 1468.03,\n        },\n        'expected_warnings': ['is not a supported codec', 'Unknown MIME type'],\n    }, {\n        'url': 'https://mediazone.vrt.be/api/v1/canvas/assets/mz-ast-5e5f90b6-2d72-4c40-82c2-e134f884e93e',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        site_id, video_id = mobj.group('site_id'), mobj.group('id')\n\n        data = self._download_json(\n            'https://mediazone.vrt.be/api/v1/%s/assets/%s'\n            % (site_id, video_id), video_id)\n\n        title = data['title']\n        description = data.get('description')\n\n        formats = []\n        for target in data['targetUrls']:\n            format_url, format_type = target.get('url'), target.get('type')\n            if not format_url or not format_type:\n                continue\n            if format_type == 'HLS':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id=format_type, fatal=False))\n            elif format_type == 'HDS':\n                formats.extend(self._extract_f4m_formats(\n                    format_url, video_id, f4m_id=format_type, fatal=False))\n            elif format_type == 'MPEG_DASH':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, video_id, mpd_id=format_type, fatal=False))\n            elif format_type == 'HSS':\n                formats.extend(self._extract_ism_formats(\n                    format_url, video_id, ism_id='mss', fatal=False))\n            else:\n                formats.append({\n                    'format_id': format_type,\n                    'url': format_url,\n                })\n        self._sort_formats(formats)\n\n        subtitles = {}\n        subtitle_urls = data.get('subtitleUrls')\n        if isinstance(subtitle_urls, list):\n            for subtitle in subtitle_urls:\n                subtitle_url = subtitle.get('url')\n                if subtitle_url and subtitle.get('type') == 'CLOSED':\n                    subtitles.setdefault('nl', []).append({'url': subtitle_url})\n\n        return {\n            'id': video_id,\n            'display_id': video_id,\n            'title': title,\n            'description': description,\n            'formats': formats,\n            'duration': float_or_none(data.get('duration'), 1000),\n            'thumbnail': data.get('posterImageUrl'),\n            'subtitles': subtitles,\n        }\n\n\nclass CanvasEenIE(InfoExtractor):\n    IE_DESC = 'canvas.be and een.be'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<site_id>canvas|een)\\.be/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.canvas.be/video/de-afspraak/najaar-2015/de-afspraak-veilt-voor-de-warmste-week',\n        'md5': 'ed66976748d12350b118455979cca293',\n        'info_dict': {\n            'id': 'mz-ast-5e5f90b6-2d72-4c40-82c2-e134f884e93e',\n            'display_id': 'de-afspraak-veilt-voor-de-warmste-week',\n            'ext': 'flv',\n            'title': 'De afspraak veilt voor de Warmste Week',\n            'description': 'md5:24cb860c320dc2be7358e0e5aa317ba6',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 49.02,\n        },\n        'expected_warnings': ['is not a supported codec'],\n    }, {\n        # with subtitles\n        'url': 'http://www.canvas.be/video/panorama/2016/pieter-0167',\n        'info_dict': {\n            'id': 'mz-ast-5240ff21-2d30-4101-bba6-92b5ec67c625',\n            'display_id': 'pieter-0167',\n            'ext': 'mp4',\n            'title': 'Pieter 0167',\n            'description': 'md5:943cd30f48a5d29ba02c3a104dc4ec4e',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 2553.08,\n            'subtitles': {\n                'nl': [{\n                    'ext': 'vtt',\n                }],\n            },\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Pagina niet gevonden',\n    }, {\n        'url': 'https://www.een.be/sorry-voor-alles/herbekijk-sorry-voor-alles',\n        'info_dict': {\n            'id': 'mz-ast-11a587f8-b921-4266-82e2-0bce3e80d07f',\n            'display_id': 'herbekijk-sorry-voor-alles',\n            'ext': 'mp4',\n            'title': 'Herbekijk Sorry voor alles',\n            'description': 'md5:8bb2805df8164e5eb95d6a7a29dc0dd3',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 3788.06,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Episode no longer available',\n    }, {\n        'url': 'https://www.canvas.be/check-point/najaar-2016/de-politie-uw-vriend',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        site_id, display_id = mobj.group('site_id'), mobj.group('id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = strip_or_none(self._search_regex(\n            r'<h1[^>]+class=\"video__body__header__title\"[^>]*>(.+?)</h1>',\n            webpage, 'title', default=None) or self._og_search_title(\n            webpage, default=None))\n\n        video_id = self._html_search_regex(\n            r'data-video=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1', webpage, 'video id',\n            group='id')\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'https://mediazone.vrt.be/api/v1/%s/assets/%s' % (site_id, video_id),\n            'ie_key': CanvasIE.ie_key(),\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n        }\n\n\nclass VrtNUIE(GigyaBaseIE):\n    IE_DESC = 'VrtNU.be'\n    _VALID_URL = r'https?://(?:www\\.)?vrt\\.be/(?P<site_id>vrtnu)/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'https://www.vrt.be/vrtnu/a-z/postbus-x/1/postbus-x-s1a1/',\n        'info_dict': {\n            'id': 'pbs-pub-2e2d8c27-df26-45c9-9dc6-90c78153044d$vid-90c932b1-e21d-4fb8-99b1-db7b49cf74de',\n            'ext': 'flv',\n            'title': 'De zwarte weduwe',\n            'description': 'md5:d90c21dced7db869a85db89a623998d4',\n            'duration': 1457.04,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'season': '1',\n            'season_number': 1,\n            'episode_number': 1,\n        },\n        'skip': 'This video is only available for registered users'\n    }]\n    _NETRC_MACHINE = 'vrtnu'\n    _APIKEY = '3_0Z2HujMtiWq_pkAjgnS2Md2E11a1AwZjYiBETtwNE-EoEHDINgtnvcAOpNgmrVGy'\n    _CONTEXT_ID = 'R3595707040'\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        username, password = self._get_login_info()\n        if username is None:\n            return\n\n        auth_data = {\n            'APIKey': self._APIKEY,\n            'targetEnv': 'jssdk',\n            'loginID': username,\n            'password': password,\n            'authMode': 'cookie',\n        }\n\n        auth_info = self._gigya_login(auth_data)\n\n        # Sometimes authentication fails for no good reason, retry\n        login_attempt = 1\n        while login_attempt <= 3:\n            try:\n                # When requesting a token, no actual token is returned, but the\n                # necessary cookies are set.\n                self._request_webpage(\n                    'https://token.vrt.be',\n                    None, note='Requesting a token', errnote='Could not get a token',\n                    headers={\n                        'Content-Type': 'application/json',\n                        'Referer': 'https://www.vrt.be/vrtnu/',\n                    },\n                    data=json.dumps({\n                        'uid': auth_info['UID'],\n                        'uidsig': auth_info['UIDSignature'],\n                        'ts': auth_info['signatureTimestamp'],\n                        'email': auth_info['profile']['email'],\n                    }).encode('utf-8'))\n            except ExtractorError as e:\n                if isinstance(e.cause, compat_HTTPError) and e.cause.code == 401:\n                    login_attempt += 1\n                    self.report_warning('Authentication failed')\n                    self._sleep(1, None, msg_template='Waiting for %(timeout)s seconds before trying again')\n                else:\n                    raise e\n            else:\n                break\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage, urlh = self._download_webpage_handle(url, display_id)\n\n        title = self._html_search_regex(\n            r'(?ms)<h1 class=\"content__heading\">(.+?)</h1>',\n            webpage, 'title').strip()\n\n        description = self._html_search_regex(\n            r'(?ms)<div class=\"content__description\">(.+?)</div>',\n            webpage, 'description', default=None)\n\n        season = self._html_search_regex(\n            [r'''(?xms)<div\\ class=\"tabs__tab\\ tabs__tab--active\">\\s*\n                    <span>seizoen\\ (.+?)</span>\\s*\n                </div>''',\n             r'<option value=\"seizoen (\\d{1,3})\" data-href=\"[^\"]+?\" selected>'],\n            webpage, 'season', default=None)\n\n        season_number = int_or_none(season)\n\n        episode_number = int_or_none(self._html_search_regex(\n            r'''(?xms)<div\\ class=\"content__episode\">\\s*\n                    <abbr\\ title=\"aflevering\">afl</abbr>\\s*<span>(\\d+)</span>\n                </div>''',\n            webpage, 'episode_number', default=None))\n\n        release_date = parse_iso8601(self._html_search_regex(\n            r'(?ms)<div class=\"content__broadcastdate\">\\s*<time\\ datetime=\"(.+?)\"',\n            webpage, 'release_date', default=None))\n\n        # If there's a ? or a # in the URL, remove them and everything after\n        clean_url = urlh.geturl().split('?')[0].split('#')[0].strip('/')\n        securevideo_url = clean_url + '.mssecurevideo.json'\n\n        try:\n            video = self._download_json(securevideo_url, display_id)\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 401:\n                self.raise_login_required()\n            raise\n\n        # We are dealing with a '../<show>.relevant' URL\n        redirect_url = video.get('url')\n        if redirect_url:\n            return self.url_result(self._proto_relative_url(redirect_url, 'https:'))\n\n        # There is only one entry, but with an unknown key, so just get\n        # the first one\n        video_id = list(video.values())[0].get('videoid')\n\n        return {\n            '_type': 'url_transparent',\n            'url': 'https://mediazone.vrt.be/api/v1/vrtvideo/assets/%s' % video_id,\n            'ie_key': CanvasIE.ie_key(),\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'season': season,\n            'season_number': season_number,\n            'episode_number': episode_number,\n            'release_date': release_date,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "canvas.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/canvas.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}