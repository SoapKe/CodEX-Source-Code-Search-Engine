{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport binascii\ntry:\n    from Crypto.Cipher import AES\n    can_decrypt_frag = True\nexcept ImportError:\n    can_decrypt_frag = False\n\nfrom .fragment import FragmentFD\nfrom .external import FFmpegFD\n\nfrom ..compat import (\n    compat_urllib_error,\n    compat_urlparse,\n    compat_struct_pack,\n)\nfrom ..utils import (\n    parse_m3u8_attributes,\n    update_url_query,\n)\n\n\nclass HlsFD(FragmentFD):\n    \n\n    FD_NAME = 'hlsnative'\n\n    @staticmethod\n    def can_download(manifest, info_dict):\n        UNSUPPORTED_FEATURES = (\n            r'\n            \n\n            \n            \n            \n\n            \n            \n            \n            \n            \n\n            \n            \n            \n            \n        )\n        check_results = [not re.search(feature, manifest) for feature in UNSUPPORTED_FEATURES]\n        is_aes128_enc = '\n        check_results.append(can_decrypt_frag or not is_aes128_enc)\n        check_results.append(not (is_aes128_enc and r'\n        check_results.append(not info_dict.get('is_live'))\n        return all(check_results)\n\n    def real_download(self, filename, info_dict):\n        man_url = info_dict['url']\n        self.to_screen('[%s] Downloading m3u8 manifest' % self.FD_NAME)\n\n        urlh = self.ydl.urlopen(self._prepare_url(info_dict, man_url))\n        man_url = urlh.geturl()\n        s = urlh.read().decode('utf-8', 'ignore')\n\n        if not self.can_download(s, info_dict):\n            if info_dict.get('extra_param_to_segment_url'):\n                self.report_error('pycrypto not found. Please install it.')\n                return False\n            self.report_warning(\n                'hlsnative has detected features it does not support, '\n                'extraction will be delegated to ffmpeg')\n            fd = FFmpegFD(self.ydl, self.params)\n            for ph in self._progress_hooks:\n                fd.add_progress_hook(ph)\n            return fd.real_download(filename, info_dict)\n\n        def is_ad_fragment(s):\n            return (s.startswith('\n                    s.startswith('\n\n        media_frags = 0\n        ad_frags = 0\n        ad_frag_next = False\n        for line in s.splitlines():\n            line = line.strip()\n            if not line:\n                continue\n            if line.startswith('\n                if is_ad_fragment(line):\n                    ad_frags += 1\n                    ad_frag_next = True\n                continue\n            if ad_frag_next:\n                ad_frag_next = False\n                continue\n            media_frags += 1\n\n        ctx = {\n            'filename': filename,\n            'total_frags': media_frags,\n            'ad_frags': ad_frags,\n        }\n\n        self._prepare_and_start_frag_download(ctx)\n\n        fragment_retries = self.params.get('fragment_retries', 0)\n        skip_unavailable_fragments = self.params.get('skip_unavailable_fragments', True)\n        test = self.params.get('test', False)\n\n        extra_query = None\n        extra_param_to_segment_url = info_dict.get('extra_param_to_segment_url')\n        if extra_param_to_segment_url:\n            extra_query = compat_urlparse.parse_qs(extra_param_to_segment_url)\n        i = 0\n        media_sequence = 0\n        decrypt_info = {'METHOD': 'NONE'}\n        byte_range = {}\n        frag_index = 0\n        ad_frag_next = False\n        for line in s.splitlines():\n            line = line.strip()\n            if line:\n                if not line.startswith('\n                    if ad_frag_next:\n                        ad_frag_next = False\n                        continue\n                    frag_index += 1\n                    if frag_index <= ctx['fragment_index']:\n                        continue\n                    frag_url = (\n                        line\n                        if re.match(r'^https?://', line)\n                        else compat_urlparse.urljoin(man_url, line))\n                    if extra_query:\n                        frag_url = update_url_query(frag_url, extra_query)\n                    count = 0\n                    headers = info_dict.get('http_headers', {})\n                    if byte_range:\n                        headers['Range'] = 'bytes=%d-%d' % (byte_range['start'], byte_range['end'])\n                    while count <= fragment_retries:\n                        try:\n                            success, frag_content = self._download_fragment(\n                                ctx, frag_url, info_dict, headers)\n                            if not success:\n                                return False\n                            break\n                        except compat_urllib_error.HTTPError as err:\n                            \n                            \n                            \n                            \n                            count += 1\n                            if count <= fragment_retries:\n                                self.report_retry_fragment(err, frag_index, count, fragment_retries)\n                    if count > fragment_retries:\n                        if skip_unavailable_fragments:\n                            i += 1\n                            media_sequence += 1\n                            self.report_skip_fragment(frag_index)\n                            continue\n                        self.report_error(\n                            'giving up after %s fragment retries' % fragment_retries)\n                        return False\n                    if decrypt_info['METHOD'] == 'AES-128':\n                        iv = decrypt_info.get('IV') or compat_struct_pack('>8xq', media_sequence)\n                        decrypt_info['KEY'] = decrypt_info.get('KEY') or self.ydl.urlopen(\n                            self._prepare_url(info_dict, decrypt_info['URI'])).read()\n                        frag_content = AES.new(\n                            decrypt_info['KEY'], AES.MODE_CBC, iv).decrypt(frag_content)\n                    self._append_fragment(ctx, frag_content)\n                    \n                    if test:\n                        break\n                    i += 1\n                    media_sequence += 1\n                elif line.startswith('\n                    decrypt_url = decrypt_info.get('URI')\n                    decrypt_info = parse_m3u8_attributes(line[11:])\n                    if decrypt_info['METHOD'] == 'AES-128':\n                        if 'IV' in decrypt_info:\n                            decrypt_info['IV'] = binascii.unhexlify(decrypt_info['IV'][2:].zfill(32))\n                        if not re.match(r'^https?://', decrypt_info['URI']):\n                            decrypt_info['URI'] = compat_urlparse.urljoin(\n                                man_url, decrypt_info['URI'])\n                        if extra_query:\n                            decrypt_info['URI'] = update_url_query(decrypt_info['URI'], extra_query)\n                        if decrypt_url != decrypt_info['URI']:\n                            decrypt_info['KEY'] = None\n                elif line.startswith('\n                    media_sequence = int(line[22:])\n                elif line.startswith('\n                    splitted_byte_range = line[17:].split('@')\n                    sub_range_start = int(splitted_byte_range[1]) if len(splitted_byte_range) == 2 else byte_range['end']\n                    byte_range = {\n                        'start': sub_range_start,\n                        'end': sub_range_start + int(splitted_byte_range[0]),\n                    }\n                elif is_ad_fragment(line):\n                    ad_frag_next = True\n\n        self._finish_frag_download(ctx)\n\n        return True\n", "comments": " A limited implementation that does not require ffmpeg \n \n#EXT-X-KEY:METHOD=(?!NONE|AES-128)',  # encrypted streams [1]\n# r'#EXT-X-BYTERANGE',  # playlists composed of byte ranges of media files [2]\n# Live streams heuristic does not always work (e.g. geo restricted to Germany\n# http://hls-geo.daserste.de/i/videoportal/Film/c_620000/622873/format,716451,716457,716450,716458,716459,.mp4.csmil/index_4_av.m3u8?null=0)\n# r'#EXT-X-MEDIA-SEQUENCE:(?!0$)',  # live streams [3]\n# This heuristic also is not correct since segments may not be appended as well.\n# Twitch vods of finished streams have EXT-X-PLAYLIST-TYPE:EVENT despite\n# no segments will definitely be appended to the end of the playlist.\n# r'#EXT-X-PLAYLIST-TYPE:EVENT',  # media segments may be appended to the end of\n#                                 # event media playlists [4]\n# 1. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.2.4\n# 2. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.2.2\n# 3. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.3.2\n# 4. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.3.5\n#EXT-X-KEY:METHOD=AES-128' in manifest\n#EXT-X-BYTERANGE' in manifest))\n#ANVATO-SEGMENT-INFO') and 'type=ad' in s or\n#UPLYNK-SEGMENT') and s.endswith(',ad'))\n#'):\n#'):\n# Unavailable (possibly temporary) fragments may be served.\n# First we try to retry then either skip or abort.\n# See https://github.com/rg3/youtube-dl/issues/10165,\n# https://github.com/rg3/youtube-dl/issues/10448).\n# We only download the first fragment during the test\n#EXT-X-KEY'):\n#EXT-X-MEDIA-SEQUENCE'):\n#EXT-X-BYTERANGE'):\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport binascii\ntry:\n    from Crypto.Cipher import AES\n    can_decrypt_frag = True\nexcept ImportError:\n    can_decrypt_frag = False\n\nfrom .fragment import FragmentFD\nfrom .external import FFmpegFD\n\nfrom ..compat import (\n    compat_urllib_error,\n    compat_urlparse,\n    compat_struct_pack,\n)\nfrom ..utils import (\n    parse_m3u8_attributes,\n    update_url_query,\n)\n\n\nclass HlsFD(FragmentFD):\n    \"\"\" A limited implementation that does not require ffmpeg \"\"\"\n\n    FD_NAME = 'hlsnative'\n\n    @staticmethod\n    def can_download(manifest, info_dict):\n        UNSUPPORTED_FEATURES = (\n            r'#EXT-X-KEY:METHOD=(?!NONE|AES-128)',  # encrypted streams [1]\n            # r'#EXT-X-BYTERANGE',  # playlists composed of byte ranges of media files [2]\n\n            # Live streams heuristic does not always work (e.g. geo restricted to Germany\n            # http://hls-geo.daserste.de/i/videoportal/Film/c_620000/622873/format,716451,716457,716450,716458,716459,.mp4.csmil/index_4_av.m3u8?null=0)\n            # r'#EXT-X-MEDIA-SEQUENCE:(?!0$)',  # live streams [3]\n\n            # This heuristic also is not correct since segments may not be appended as well.\n            # Twitch vods of finished streams have EXT-X-PLAYLIST-TYPE:EVENT despite\n            # no segments will definitely be appended to the end of the playlist.\n            # r'#EXT-X-PLAYLIST-TYPE:EVENT',  # media segments may be appended to the end of\n            #                                 # event media playlists [4]\n\n            # 1. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.2.4\n            # 2. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.2.2\n            # 3. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.3.2\n            # 4. https://tools.ietf.org/html/draft-pantos-http-live-streaming-17#section-4.3.3.5\n        )\n        check_results = [not re.search(feature, manifest) for feature in UNSUPPORTED_FEATURES]\n        is_aes128_enc = '#EXT-X-KEY:METHOD=AES-128' in manifest\n        check_results.append(can_decrypt_frag or not is_aes128_enc)\n        check_results.append(not (is_aes128_enc and r'#EXT-X-BYTERANGE' in manifest))\n        check_results.append(not info_dict.get('is_live'))\n        return all(check_results)\n\n    def real_download(self, filename, info_dict):\n        man_url = info_dict['url']\n        self.to_screen('[%s] Downloading m3u8 manifest' % self.FD_NAME)\n\n        urlh = self.ydl.urlopen(self._prepare_url(info_dict, man_url))\n        man_url = urlh.geturl()\n        s = urlh.read().decode('utf-8', 'ignore')\n\n        if not self.can_download(s, info_dict):\n            if info_dict.get('extra_param_to_segment_url'):\n                self.report_error('pycrypto not found. Please install it.')\n                return False\n            self.report_warning(\n                'hlsnative has detected features it does not support, '\n                'extraction will be delegated to ffmpeg')\n            fd = FFmpegFD(self.ydl, self.params)\n            for ph in self._progress_hooks:\n                fd.add_progress_hook(ph)\n            return fd.real_download(filename, info_dict)\n\n        def is_ad_fragment(s):\n            return (s.startswith('#ANVATO-SEGMENT-INFO') and 'type=ad' in s or\n                    s.startswith('#UPLYNK-SEGMENT') and s.endswith(',ad'))\n\n        media_frags = 0\n        ad_frags = 0\n        ad_frag_next = False\n        for line in s.splitlines():\n            line = line.strip()\n            if not line:\n                continue\n            if line.startswith('#'):\n                if is_ad_fragment(line):\n                    ad_frags += 1\n                    ad_frag_next = True\n                continue\n            if ad_frag_next:\n                ad_frag_next = False\n                continue\n            media_frags += 1\n\n        ctx = {\n            'filename': filename,\n            'total_frags': media_frags,\n            'ad_frags': ad_frags,\n        }\n\n        self._prepare_and_start_frag_download(ctx)\n\n        fragment_retries = self.params.get('fragment_retries', 0)\n        skip_unavailable_fragments = self.params.get('skip_unavailable_fragments', True)\n        test = self.params.get('test', False)\n\n        extra_query = None\n        extra_param_to_segment_url = info_dict.get('extra_param_to_segment_url')\n        if extra_param_to_segment_url:\n            extra_query = compat_urlparse.parse_qs(extra_param_to_segment_url)\n        i = 0\n        media_sequence = 0\n        decrypt_info = {'METHOD': 'NONE'}\n        byte_range = {}\n        frag_index = 0\n        ad_frag_next = False\n        for line in s.splitlines():\n            line = line.strip()\n            if line:\n                if not line.startswith('#'):\n                    if ad_frag_next:\n                        ad_frag_next = False\n                        continue\n                    frag_index += 1\n                    if frag_index <= ctx['fragment_index']:\n                        continue\n                    frag_url = (\n                        line\n                        if re.match(r'^https?://', line)\n                        else compat_urlparse.urljoin(man_url, line))\n                    if extra_query:\n                        frag_url = update_url_query(frag_url, extra_query)\n                    count = 0\n                    headers = info_dict.get('http_headers', {})\n                    if byte_range:\n                        headers['Range'] = 'bytes=%d-%d' % (byte_range['start'], byte_range['end'])\n                    while count <= fragment_retries:\n                        try:\n                            success, frag_content = self._download_fragment(\n                                ctx, frag_url, info_dict, headers)\n                            if not success:\n                                return False\n                            break\n                        except compat_urllib_error.HTTPError as err:\n                            # Unavailable (possibly temporary) fragments may be served.\n                            # First we try to retry then either skip or abort.\n                            # See https://github.com/rg3/youtube-dl/issues/10165,\n                            # https://github.com/rg3/youtube-dl/issues/10448).\n                            count += 1\n                            if count <= fragment_retries:\n                                self.report_retry_fragment(err, frag_index, count, fragment_retries)\n                    if count > fragment_retries:\n                        if skip_unavailable_fragments:\n                            i += 1\n                            media_sequence += 1\n                            self.report_skip_fragment(frag_index)\n                            continue\n                        self.report_error(\n                            'giving up after %s fragment retries' % fragment_retries)\n                        return False\n                    if decrypt_info['METHOD'] == 'AES-128':\n                        iv = decrypt_info.get('IV') or compat_struct_pack('>8xq', media_sequence)\n                        decrypt_info['KEY'] = decrypt_info.get('KEY') or self.ydl.urlopen(\n                            self._prepare_url(info_dict, decrypt_info['URI'])).read()\n                        frag_content = AES.new(\n                            decrypt_info['KEY'], AES.MODE_CBC, iv).decrypt(frag_content)\n                    self._append_fragment(ctx, frag_content)\n                    # We only download the first fragment during the test\n                    if test:\n                        break\n                    i += 1\n                    media_sequence += 1\n                elif line.startswith('#EXT-X-KEY'):\n                    decrypt_url = decrypt_info.get('URI')\n                    decrypt_info = parse_m3u8_attributes(line[11:])\n                    if decrypt_info['METHOD'] == 'AES-128':\n                        if 'IV' in decrypt_info:\n                            decrypt_info['IV'] = binascii.unhexlify(decrypt_info['IV'][2:].zfill(32))\n                        if not re.match(r'^https?://', decrypt_info['URI']):\n                            decrypt_info['URI'] = compat_urlparse.urljoin(\n                                man_url, decrypt_info['URI'])\n                        if extra_query:\n                            decrypt_info['URI'] = update_url_query(decrypt_info['URI'], extra_query)\n                        if decrypt_url != decrypt_info['URI']:\n                            decrypt_info['KEY'] = None\n                elif line.startswith('#EXT-X-MEDIA-SEQUENCE'):\n                    media_sequence = int(line[22:])\n                elif line.startswith('#EXT-X-BYTERANGE'):\n                    splitted_byte_range = line[17:].split('@')\n                    sub_range_start = int(splitted_byte_range[1]) if len(splitted_byte_range) == 2 else byte_range['end']\n                    byte_range = {\n                        'start': sub_range_start,\n                        'end': sub_range_start + int(splitted_byte_range[0]),\n                    }\n                elif is_ad_fragment(line):\n                    ad_frag_next = True\n\n        self._finish_frag_download(ctx)\n\n        return True\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hls.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/downloader/hls.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}