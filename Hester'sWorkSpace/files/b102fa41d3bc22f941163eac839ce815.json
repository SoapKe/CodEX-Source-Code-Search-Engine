{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport hashlib\nimport hmac\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    js_to_json,\n    int_or_none,\n    parse_iso8601,\n    try_get,\n    update_url_query,\n)\n\n\nclass ABCIE(InfoExtractor):\n    IE_NAME = 'abc.net.au'\n    _VALID_URL = r'https?://(?:www\\.)?abc\\.net\\.au/news/(?:[^/]+/){1,2}(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.abc.net.au/news/2014-11-05/australia-to-staff-ebola-treatment-centre-in-sierra-leone/5868334',\n        'md5': 'cb3dd03b18455a661071ee1e28344d9f',\n        'info_dict': {\n            'id': '5868334',\n            'ext': 'mp4',\n            'title': 'Australia to help staff Ebola treatment centre in Sierra Leone',\n            'description': 'md5:809ad29c67a05f54eb41f2a105693a67',\n        },\n        'skip': 'this video has expired',\n    }, {\n        'url': 'http://www.abc.net.au/news/2015-08-17/warren-entsch-introduces-same-sex-marriage-bill/6702326',\n        'md5': 'db2a5369238b51f9811ad815b69dc086',\n        'info_dict': {\n            'id': 'NvqvPeNZsHU',\n            'ext': 'mp4',\n            'upload_date': '20150816',\n            'uploader': 'ABC News (Australia)',\n            'description': 'Government backbencher Warren Entsch introduces a cross-party sponsored bill to legalise same-sex marriage, saying the bill is designed to promote \"an inclusive Australia, not a divided one.\". Read more here: http://ab.co/1Mwc6ef',\n            'uploader_id': 'NewsOnABC',\n            'title': 'Marriage Equality: Warren Entsch introduces same sex marriage bill',\n        },\n        'add_ie': ['Youtube'],\n        'skip': 'Not accessible from Travis CI server',\n    }, {\n        'url': 'http://www.abc.net.au/news/2015-10-23/nab-lifts-interest-rates-following-westpac-and-cba/6880080',\n        'md5': 'b96eee7c9edf4fc5a358a0252881cc1f',\n        'info_dict': {\n            'id': '6880080',\n            'ext': 'mp3',\n            'title': 'NAB lifts interest rates, following Westpac and CBA',\n            'description': 'md5:f13d8edc81e462fce4a0437c7dc04728',\n        },\n    }, {\n        'url': 'http://www.abc.net.au/news/2015-10-19/6866214',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        mobj = re.search(\n            r'inline(?P<type>Video|Audio|YouTube)Data\\.push\\((?P<json_data>[^)]+)\\);',\n            webpage)\n        if mobj is None:\n            expired = self._html_search_regex(r'(?s)class=\"expired-(?:video|audio)\".+?<span>(.+?)</span>', webpage, 'expired', None)\n            if expired:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, expired), expected=True)\n            raise ExtractorError('Unable to extract video urls')\n\n        urls_info = self._parse_json(\n            mobj.group('json_data'), video_id, transform_source=js_to_json)\n\n        if not isinstance(urls_info, list):\n            urls_info = [urls_info]\n\n        if mobj.group('type') == 'YouTube':\n            return self.playlist_result([\n                self.url_result(url_info['url']) for url_info in urls_info])\n\n        formats = [{\n            'url': url_info['url'],\n            'vcodec': url_info.get('codec') if mobj.group('type') == 'Video' else 'none',\n            'width': int_or_none(url_info.get('width')),\n            'height': int_or_none(url_info.get('height')),\n            'tbr': int_or_none(url_info.get('bitrate')),\n            'filesize': int_or_none(url_info.get('filesize')),\n        } for url_info in urls_info]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n\n\nclass ABCIViewIE(InfoExtractor):\n    IE_NAME = 'abc.net.au:iview'\n    _VALID_URL = r'https?://iview\\.abc\\.net\\.au/programs/[^/]+/(?P<id>[^/?\n    _GEO_COUNTRIES = ['AU']\n\n    \n    _TESTS = [{\n        'url': 'http://iview.abc.net.au/programs/call-the-midwife/ZW0898A003S00',\n        'md5': 'cde42d728b3b7c2b32b1b94b4a548afc',\n        'info_dict': {\n            'id': 'ZW0898A003S00',\n            'ext': 'mp4',\n            'title': 'Series 5 Ep 3',\n            'description': 'md5:e0ef7d4f92055b86c4f33611f180ed79',\n            'upload_date': '20171228',\n            'uploader_id': 'abc1',\n            'timestamp': 1514499187,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        video_params = self._parse_json(self._search_regex(\n            r'videoParams\\s*=\\s*({.+?});', webpage, 'video params'), video_id)\n        title = video_params.get('title') or video_params['seriesTitle']\n        stream = next(s for s in video_params['playlist'] if s.get('type') == 'program')\n\n        house_number = video_params.get('episodeHouseNumber')\n        path = '/auth/hls/sign?ts={0}&hn={1}&d=android-mobile'.format(\n            int(time.time()), house_number)\n        sig = hmac.new(\n            'android.content.res.Resources'.encode('utf-8'),\n            path.encode('utf-8'), hashlib.sha256).hexdigest()\n        token = self._download_webpage(\n            'http://iview.abc.net.au{0}&sig={1}'.format(path, sig), video_id)\n\n        def tokenize_url(url, token):\n            return update_url_query(url, {\n                'hdnea': token,\n            })\n\n        for sd in ('sd', 'sd-low'):\n            sd_url = try_get(\n                stream, lambda x: x['streams']['hls'][sd], compat_str)\n            if not sd_url:\n                continue\n            formats = self._extract_m3u8_formats(\n                tokenize_url(sd_url, token), video_id, 'mp4',\n                entry_protocol='m3u8_native', m3u8_id='hls', fatal=False)\n            if formats:\n                break\n        self._sort_formats(formats)\n\n        subtitles = {}\n        src_vtt = stream.get('captions', {}).get('src-vtt')\n        if src_vtt:\n            subtitles['en'] = [{\n                'url': src_vtt,\n                'ext': 'vtt',\n            }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': self._html_search_meta(['og:description', 'twitter:description'], webpage),\n            'thumbnail': self._html_search_meta(['og:image', 'twitter:image:src'], webpage),\n            'duration': int_or_none(video_params.get('eventDuration')),\n            'timestamp': parse_iso8601(video_params.get('pubDate'), ' '),\n            'series': video_params.get('seriesTitle'),\n            'series_id': video_params.get('seriesHouseNumber') or video_id[:7],\n            'episode_number': int_or_none(self._html_search_meta('episodeNumber', webpage, default=None)),\n            'episode': self._html_search_meta('episode_title', webpage, default=None),\n            'uploader_id': video_params.get('channel'),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "#]+)'\n# ABC iview programs are normally available for 14 days only.\n", "content": "from __future__ import unicode_literals\n\nimport hashlib\nimport hmac\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    js_to_json,\n    int_or_none,\n    parse_iso8601,\n    try_get,\n    update_url_query,\n)\n\n\nclass ABCIE(InfoExtractor):\n    IE_NAME = 'abc.net.au'\n    _VALID_URL = r'https?://(?:www\\.)?abc\\.net\\.au/news/(?:[^/]+/){1,2}(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.abc.net.au/news/2014-11-05/australia-to-staff-ebola-treatment-centre-in-sierra-leone/5868334',\n        'md5': 'cb3dd03b18455a661071ee1e28344d9f',\n        'info_dict': {\n            'id': '5868334',\n            'ext': 'mp4',\n            'title': 'Australia to help staff Ebola treatment centre in Sierra Leone',\n            'description': 'md5:809ad29c67a05f54eb41f2a105693a67',\n        },\n        'skip': 'this video has expired',\n    }, {\n        'url': 'http://www.abc.net.au/news/2015-08-17/warren-entsch-introduces-same-sex-marriage-bill/6702326',\n        'md5': 'db2a5369238b51f9811ad815b69dc086',\n        'info_dict': {\n            'id': 'NvqvPeNZsHU',\n            'ext': 'mp4',\n            'upload_date': '20150816',\n            'uploader': 'ABC News (Australia)',\n            'description': 'Government backbencher Warren Entsch introduces a cross-party sponsored bill to legalise same-sex marriage, saying the bill is designed to promote \"an inclusive Australia, not a divided one.\". Read more here: http://ab.co/1Mwc6ef',\n            'uploader_id': 'NewsOnABC',\n            'title': 'Marriage Equality: Warren Entsch introduces same sex marriage bill',\n        },\n        'add_ie': ['Youtube'],\n        'skip': 'Not accessible from Travis CI server',\n    }, {\n        'url': 'http://www.abc.net.au/news/2015-10-23/nab-lifts-interest-rates-following-westpac-and-cba/6880080',\n        'md5': 'b96eee7c9edf4fc5a358a0252881cc1f',\n        'info_dict': {\n            'id': '6880080',\n            'ext': 'mp3',\n            'title': 'NAB lifts interest rates, following Westpac and CBA',\n            'description': 'md5:f13d8edc81e462fce4a0437c7dc04728',\n        },\n    }, {\n        'url': 'http://www.abc.net.au/news/2015-10-19/6866214',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        mobj = re.search(\n            r'inline(?P<type>Video|Audio|YouTube)Data\\.push\\((?P<json_data>[^)]+)\\);',\n            webpage)\n        if mobj is None:\n            expired = self._html_search_regex(r'(?s)class=\"expired-(?:video|audio)\".+?<span>(.+?)</span>', webpage, 'expired', None)\n            if expired:\n                raise ExtractorError('%s said: %s' % (self.IE_NAME, expired), expected=True)\n            raise ExtractorError('Unable to extract video urls')\n\n        urls_info = self._parse_json(\n            mobj.group('json_data'), video_id, transform_source=js_to_json)\n\n        if not isinstance(urls_info, list):\n            urls_info = [urls_info]\n\n        if mobj.group('type') == 'YouTube':\n            return self.playlist_result([\n                self.url_result(url_info['url']) for url_info in urls_info])\n\n        formats = [{\n            'url': url_info['url'],\n            'vcodec': url_info.get('codec') if mobj.group('type') == 'Video' else 'none',\n            'width': int_or_none(url_info.get('width')),\n            'height': int_or_none(url_info.get('height')),\n            'tbr': int_or_none(url_info.get('bitrate')),\n            'filesize': int_or_none(url_info.get('filesize')),\n        } for url_info in urls_info]\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n            'description': self._og_search_description(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n        }\n\n\nclass ABCIViewIE(InfoExtractor):\n    IE_NAME = 'abc.net.au:iview'\n    _VALID_URL = r'https?://iview\\.abc\\.net\\.au/programs/[^/]+/(?P<id>[^/?#]+)'\n    _GEO_COUNTRIES = ['AU']\n\n    # ABC iview programs are normally available for 14 days only.\n    _TESTS = [{\n        'url': 'http://iview.abc.net.au/programs/call-the-midwife/ZW0898A003S00',\n        'md5': 'cde42d728b3b7c2b32b1b94b4a548afc',\n        'info_dict': {\n            'id': 'ZW0898A003S00',\n            'ext': 'mp4',\n            'title': 'Series 5 Ep 3',\n            'description': 'md5:e0ef7d4f92055b86c4f33611f180ed79',\n            'upload_date': '20171228',\n            'uploader_id': 'abc1',\n            'timestamp': 1514499187,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        video_params = self._parse_json(self._search_regex(\n            r'videoParams\\s*=\\s*({.+?});', webpage, 'video params'), video_id)\n        title = video_params.get('title') or video_params['seriesTitle']\n        stream = next(s for s in video_params['playlist'] if s.get('type') == 'program')\n\n        house_number = video_params.get('episodeHouseNumber')\n        path = '/auth/hls/sign?ts={0}&hn={1}&d=android-mobile'.format(\n            int(time.time()), house_number)\n        sig = hmac.new(\n            'android.content.res.Resources'.encode('utf-8'),\n            path.encode('utf-8'), hashlib.sha256).hexdigest()\n        token = self._download_webpage(\n            'http://iview.abc.net.au{0}&sig={1}'.format(path, sig), video_id)\n\n        def tokenize_url(url, token):\n            return update_url_query(url, {\n                'hdnea': token,\n            })\n\n        for sd in ('sd', 'sd-low'):\n            sd_url = try_get(\n                stream, lambda x: x['streams']['hls'][sd], compat_str)\n            if not sd_url:\n                continue\n            formats = self._extract_m3u8_formats(\n                tokenize_url(sd_url, token), video_id, 'mp4',\n                entry_protocol='m3u8_native', m3u8_id='hls', fatal=False)\n            if formats:\n                break\n        self._sort_formats(formats)\n\n        subtitles = {}\n        src_vtt = stream.get('captions', {}).get('src-vtt')\n        if src_vtt:\n            subtitles['en'] = [{\n                'url': src_vtt,\n                'ext': 'vtt',\n            }]\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': self._html_search_meta(['og:description', 'twitter:description'], webpage),\n            'thumbnail': self._html_search_meta(['og:image', 'twitter:image:src'], webpage),\n            'duration': int_or_none(video_params.get('eventDuration')),\n            'timestamp': parse_iso8601(video_params.get('pubDate'), ' '),\n            'series': video_params.get('seriesTitle'),\n            'series_id': video_params.get('seriesHouseNumber') or video_id[:7],\n            'episode_number': int_or_none(self._html_search_meta('episodeNumber', webpage, default=None)),\n            'episode': self._html_search_meta('episode_title', webpage, default=None),\n            'uploader_id': video_params.get('channel'),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "abc.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/abc.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}