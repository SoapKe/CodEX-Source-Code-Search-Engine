{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Bruno Calogero <brunocalogero@hotmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_static_binding_to_epg\nshort_description: Bind static paths to EPGs (fv:RsPathAtt)\ndescription:\n- Bind static paths to EPGs on Cisco ACI fabrics.\nnotes:\n- The C(tenant), C(ap), C(epg) used must exist before using this module in your playbook.\n  The M(aci_tenant), M(aci_ap), M(aci_epg) modules can be used for this.\n- More information about the internal APIC classes B(fv:RsPathAtt) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Bruno Calogero (@brunocalogero)\nversion_added: '2.5'\noptions:\n  tenant:\n    description:\n    - Name of an existing tenant.\n    aliases: [ tenant_name ]\n  ap:\n    description:\n    - Name of an existing application network profile, that will contain the EPGs.\n    aliases: [ app_profile, app_profile_name ]\n  epg:\n    description:\n    - The name of the end point group.\n    aliases: [ epg_name ]\n  encap_id:\n    description:\n    - The encapsulation ID associating the C(epg) with the interface path.\n    - This acts as the secondary C(encap_id) when using micro-segmentation.\n    aliases: [ vlan, vlan_id ]\n    choices: [ Valid encap IDs for specified encap, currently 1 to 4096 ]\n  primary_encap_id:\n    description:\n    - Determines the primary encapsulation ID associating the C(epg)\n      with the interface path when using micro-segmentation.\n    aliases: [ primary_vlan, primary_vlan_id ]\n    choices: [ Valid encap IDs for specified encap, currently 1 to 4096 ]\n  deploy_immediacy:\n    description:\n    - The Deployement Immediacy of Static EPG on PC, VPC or Interface.\n    - The APIC defaults the Deployement Immediacy to C(lazy).\n    choices: [ immediate, lazy ]\n    default: lazy\n  interface_mode:\n    description:\n    - Determines how layer 2 tags will be read from and added to frames.\n    - Values C(802.1p) and C(native) are identical.\n    - Values C(access) and C(untagged) are identical.\n    - Values C(regular), C(tagged) and C(trunk) are identical.\n    - The APIC defaults the mode to C(trunk).\n    choices: [ 802.1p, access, native, regular, tagged, trunk, untagged ]\n    default: trunk\n    aliases: [ interface_mode_name, mode ]\n  interface_type:\n    description:\n    - The type of interface for the static EPG deployement.\n    - The APIC defaults the C(interface_type) to C(switch_port).\n    choices: [ fex, port_channel, switch_port, vpc ]\n    default: switch_port\n  pod_id:\n    description:\n    - The pod number part of the tDn.\n    - C(pod_id) is usually an integer below 10.\n    aliases: [ pod, pod_number ]\n  leafs:\n    description:\n    - The switch ID(s) that the C(interface) belongs to.\n    - When C(interface_type) is C(switch_port), C(port_channel), or C(fex), then C(leafs) is a string of the leaf ID.\n    - When C(interface_type) is C(vpc), then C(leafs) is a list with both leaf IDs.\n    - The C(leafs) value is usually something like '101' or '101-102' depending on C(connection_type).\n    aliases: [ leaves, nodes, paths, switches ]\n  interface:\n    description:\n    - The C(interface) string value part of the tDn.\n    - Usually a policy group like \"test-IntPolGrp\" or an interface of the following format \"1/7\" depending on C(interface_type).\n  extpaths:\n    description:\n    - The C(extpaths) integer value part of the tDn.\n    - C(extpaths) is only used if C(interface_type) is C(fex).\n    - Usually something like '1011'.\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Deploy Static Path binding for given EPG\n  aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    encap_id: 222\n    deploy_immediacy: lazy\n    interface_mode: untagged\n    interface_type: switch_port\n    pod_id: 1\n    leafs: 101\n    interface: '1/7'\n    state: present\n\n- name: Remove Static Path binding for given EPG\n  aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    interface_type: switch_port\n    pod: 1\n    leafs: 101\n    interface: '1/7'\n    state: absent\n\n- name: Get specific Static Path binding for given EPG\n  aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    interface_type: switch_port\n    pod: 1\n    leafs: 101\n    interface: '1/7'\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n(as seen in aci_epg_to_domain)?\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        tenant=dict(type='str', aliases=['tenant_name']),  \n        ap=dict(type='str', aliases=['app_profile', 'app_profile_name']),  \n        epg=dict(type='str', aliases=['epg_name']),  \n        encap_id=dict(type='int', aliases=['vlan', 'vlan_id']),\n        primary_encap_id=dict(type='int', aliases=['primary_vlan', 'primary_vlan_id']),\n        deploy_immediacy=dict(type='str', choices=['immediate', 'lazy']),\n        interface_mode=dict(type='str', choices=['802.1p', 'access', 'native', 'regular', 'tagged', 'trunk', 'untagged'],\n                            aliases=['interface_mode_name', 'mode']),\n        interface_type=dict(type='str', default='switch_port', choices=['fex', 'port_channel', 'switch_port', 'vpc']),\n        pod_id=dict(type='int', aliases=['pod', 'pod_number']),  \n        leafs=dict(type='list', aliases=['leaves', 'nodes', 'paths', 'switches']),\n        interface=dict(type='str'),\n        extpaths=dict(type='int'),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['interface_type', 'fex', ['extpaths']],\n            ['state', 'absent', ['ap', 'epg', 'interface', 'leafs', 'pod_id', 'tenant']],\n            ['state', 'present', ['ap', 'encap_id', 'epg', 'interface', 'leafs', 'pod_id', 'tenant']],\n        ],\n    )\n\n    tenant = module.params['tenant']\n    ap = module.params['ap']\n    epg = module.params['epg']\n    encap_id = module.params['encap_id']\n    primary_encap_id = module.params['primary_encap_id']\n    deploy_immediacy = module.params['deploy_immediacy']\n    interface_mode = module.params['interface_mode']\n    interface_type = module.params['interface_type']\n    pod_id = module.params['pod_id']\n    \n    leafs = [str(leaf) for leaf in module.params['leafs']]\n    if leafs is not None:\n        if len(leafs) == 1:\n            if interface_type != 'vpc':\n                leafs = leafs[0]\n            else:\n                module.fail_json(msg='A interface_type of \"vpc\" requires 2 leafs')\n        elif len(leafs) == 2:\n            if interface_type == 'vpc':\n                leafs = \"-\".join(leafs)\n            else:\n                module.fail_json(msg='The interface_types \"switch_port\", \"port_channel\", and \"fex\" \\\n                    do not support using multiple leafs for a single binding')\n        else:\n            module.fail_json(msg='The \"leafs\" parameter must not have more than 2 entries')\n    interface = module.params['interface']\n    extpaths = module.params['extpaths']\n    state = module.params['state']\n    static_path = ''\n\n    if encap_id is not None:\n        if encap_id in range(1, 4097):\n            encap_id = 'vlan-{0}'.format(encap_id)\n        else:\n            module.fail_json(msg='Valid VLAN assigments are from 1 to 4096')\n\n    if primary_encap_id is not None:\n        if primary_encap_id in range(1, 4097):\n            primary_encap_id = 'vlan-{0}'.format(primary_encap_id)\n        else:\n            module.fail_json(msg='Valid VLAN assigments are from 1 to 4096')\n\n    INTERFACE_MODE_MAPPING = {\n        '802.1p': 'native',\n        'access': 'untagged',\n        'native': 'native',\n        'regular': 'regular',\n        'tagged': 'regular',\n        'trunk': 'regular',\n        'untagged': 'untagged',\n    }\n\n    INTERFACE_TYPE_MAPPING = dict(\n        fex='topology/pod-{0}/paths-{1}/extpaths-{2}/pathep-[eth{3}]'.format(pod_id, leafs, extpaths, interface),\n        port_channel='topology/pod-{0}/paths-{1}/pathep-[eth{2}]'.format(pod_id, leafs, interface),\n        switch_port='topology/pod-{0}/paths-{1}/pathep-[eth{2}]'.format(pod_id, leafs, interface),\n        vpc='topology/pod-{0}/protpaths-{1}/pathep-[{2}]'.format(pod_id, leafs, interface),\n    )\n\n    static_path = INTERFACE_TYPE_MAPPING[interface_type]\n    if interface_mode is not None:\n        interface_mode = INTERFACE_MODE_MAPPING[interface_mode]\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='fvAp',\n            aci_rn='ap-{0}'.format(ap),\n            filter_target='eq(fvAp.name, \"{0}\")'.format(ap),\n            module_object=ap,\n        ),\n        subclass_2=dict(\n            aci_class='fvAEPg',\n            aci_rn='epg-{0}'.format(epg),\n            filter_target='eq(fvAEPg.name, \"{0}\")'.format(epg),\n            module_object=epg,\n        ),\n        subclass_3=dict(\n            aci_class='fvRsPathAtt',\n            aci_rn='rspathAtt-[{0}]'.format(static_path),\n            filter_target='eq(fvRsPathAtt.tDn, \"{0}\"'.format(static_path),\n            module_object=static_path,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='fvRsPathAtt',\n            class_config=dict(\n                encap=encap_id,\n                primaryEncap=primary_encap_id,\n                instrImedcy=deploy_immediacy,\n                mode=interface_mode,\n                tDn=static_path,\n            ),\n        )\n\n        aci.get_diff(aci_class='fvRsPathAtt')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci static binding epg short description  bind static paths epgs (fv rspathatt) description    bind static paths epgs cisco aci fabrics  notes    the c(tenant)  c(ap)  c(epg) used must exist using module playbook    the m(aci tenant)  m(aci ap)  m(aci epg) modules used    more information internal apic classes b(fv rspathatt)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    bruno calogero ( brunocalogero) version added   2 5  options    tenant      description        name existing tenant      aliases    tenant name     ap      description        name existing application network profile  contain epgs      aliases    app profile  app profile name     epg      description        the name end point group      aliases    epg name     encap id      description        the encapsulation id associating c(epg) interface path        this acts secondary c(encap id) using micro segmentation      aliases    vlan  vlan id       choices    valid encap ids specified encap  currently 1 4096     primary encap id      description        determines primary encapsulation id associating c(epg)       interface path using micro segmentation      aliases    primary vlan  primary vlan id       choices    valid encap ids specified encap  currently 1 4096     deploy immediacy      description        the deployement immediacy static epg pc  vpc interface        the apic defaults deployement immediacy c(lazy)      choices    immediate  lazy       default  lazy   interface mode      description        determines layer 2 tags read added frames        values c(802 1p) c(native) identical        values c(access) c(untagged) identical        values c(regular)  c(tagged) c(trunk) identical        the apic defaults mode c(trunk)      choices    802 1p  access  native  regular  tagged  trunk  untagged       default  trunk     aliases    interface mode name  mode     interface type      description        the type interface static epg deployement        the apic defaults c(interface type) c(switch port)      choices    fex  port channel  switch port  vpc       default  switch port   pod id      description        the pod number part tdn        c(pod id) usually integer 10      aliases    pod  pod number     leafs      description        the switch id(s) c(interface) belongs        when c(interface type) c(switch port)  c(port channel)  c(fex)  c(leafs) string leaf id        when c(interface type) c(vpc)  c(leafs) list leaf ids        the c(leafs) value usually something like  101   101 102  depending c(connection type)      aliases    leaves  nodes  paths  switches     interface      description        the c(interface) string value part tdn        usually policy group like  test intpolgrp  interface following format  1 7  depending c(interface type)    extpaths      description        the c(extpaths) integer value part tdn        c(extpaths) used c(interface type) c(fex)        usually something like  1011     state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      name  deploy static path binding given epg   aci static binding epg      host  apic     username  admin     password  somesecretpassword     tenant  accessport code cert     ap  accessport code app     epg  accessport epg1     encap id  222     deploy immediacy  lazy     interface mode  untagged     interface type  switch port     pod id  1     leafs  101     interface   1 7      state  present    name  remove static path binding given epg   aci static binding epg      host  apic     username  admin     password  somesecretpassword     tenant  accessport code cert     ap  accessport code app     epg  accessport epg1     interface type  switch port     pod  1     leafs  101     interface   1 7      state  absent    name  get specific static path binding given epg   aci static binding epg      host  apic     username  admin     password  somesecretpassword     tenant  accessport code cert     ap  accessport code app     epg  accessport epg1     interface type  switch port     pod  1     leafs  101     interface   1 7      state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        copyright  (c) 2017  bruno calogero  brunocalogero hotmail com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    todo  change  deploy immediacy   resolution immediacy  (as seen aci epg domain)     not required querying objects    not required querying objects    not required querying objects    not required querying objects    users likely use integers leaf ids  would raise exception using join method ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Bruno Calogero <brunocalogero@hotmail.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_static_binding_to_epg\nshort_description: Bind static paths to EPGs (fv:RsPathAtt)\ndescription:\n- Bind static paths to EPGs on Cisco ACI fabrics.\nnotes:\n- The C(tenant), C(ap), C(epg) used must exist before using this module in your playbook.\n  The M(aci_tenant), M(aci_ap), M(aci_epg) modules can be used for this.\n- More information about the internal APIC classes B(fv:RsPathAtt) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Bruno Calogero (@brunocalogero)\nversion_added: '2.5'\noptions:\n  tenant:\n    description:\n    - Name of an existing tenant.\n    aliases: [ tenant_name ]\n  ap:\n    description:\n    - Name of an existing application network profile, that will contain the EPGs.\n    aliases: [ app_profile, app_profile_name ]\n  epg:\n    description:\n    - The name of the end point group.\n    aliases: [ epg_name ]\n  encap_id:\n    description:\n    - The encapsulation ID associating the C(epg) with the interface path.\n    - This acts as the secondary C(encap_id) when using micro-segmentation.\n    aliases: [ vlan, vlan_id ]\n    choices: [ Valid encap IDs for specified encap, currently 1 to 4096 ]\n  primary_encap_id:\n    description:\n    - Determines the primary encapsulation ID associating the C(epg)\n      with the interface path when using micro-segmentation.\n    aliases: [ primary_vlan, primary_vlan_id ]\n    choices: [ Valid encap IDs for specified encap, currently 1 to 4096 ]\n  deploy_immediacy:\n    description:\n    - The Deployement Immediacy of Static EPG on PC, VPC or Interface.\n    - The APIC defaults the Deployement Immediacy to C(lazy).\n    choices: [ immediate, lazy ]\n    default: lazy\n  interface_mode:\n    description:\n    - Determines how layer 2 tags will be read from and added to frames.\n    - Values C(802.1p) and C(native) are identical.\n    - Values C(access) and C(untagged) are identical.\n    - Values C(regular), C(tagged) and C(trunk) are identical.\n    - The APIC defaults the mode to C(trunk).\n    choices: [ 802.1p, access, native, regular, tagged, trunk, untagged ]\n    default: trunk\n    aliases: [ interface_mode_name, mode ]\n  interface_type:\n    description:\n    - The type of interface for the static EPG deployement.\n    - The APIC defaults the C(interface_type) to C(switch_port).\n    choices: [ fex, port_channel, switch_port, vpc ]\n    default: switch_port\n  pod_id:\n    description:\n    - The pod number part of the tDn.\n    - C(pod_id) is usually an integer below 10.\n    aliases: [ pod, pod_number ]\n  leafs:\n    description:\n    - The switch ID(s) that the C(interface) belongs to.\n    - When C(interface_type) is C(switch_port), C(port_channel), or C(fex), then C(leafs) is a string of the leaf ID.\n    - When C(interface_type) is C(vpc), then C(leafs) is a list with both leaf IDs.\n    - The C(leafs) value is usually something like '101' or '101-102' depending on C(connection_type).\n    aliases: [ leaves, nodes, paths, switches ]\n  interface:\n    description:\n    - The C(interface) string value part of the tDn.\n    - Usually a policy group like \"test-IntPolGrp\" or an interface of the following format \"1/7\" depending on C(interface_type).\n  extpaths:\n    description:\n    - The C(extpaths) integer value part of the tDn.\n    - C(extpaths) is only used if C(interface_type) is C(fex).\n    - Usually something like '1011'.\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Deploy Static Path binding for given EPG\n  aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    encap_id: 222\n    deploy_immediacy: lazy\n    interface_mode: untagged\n    interface_type: switch_port\n    pod_id: 1\n    leafs: 101\n    interface: '1/7'\n    state: present\n\n- name: Remove Static Path binding for given EPG\n  aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    interface_type: switch_port\n    pod: 1\n    leafs: 101\n    interface: '1/7'\n    state: absent\n\n- name: Get specific Static Path binding for given EPG\n  aci_static_binding_to_epg:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    tenant: accessport-code-cert\n    ap: accessport_code_app\n    epg: accessport_epg1\n    interface_type: switch_port\n    pod: 1\n    leafs: 101\n    interface: '1/7'\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n# TODO: change 'deploy_immediacy' to 'resolution_immediacy' (as seen in aci_epg_to_domain)?\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        tenant=dict(type='str', aliases=['tenant_name']),  # Not required for querying all objects\n        ap=dict(type='str', aliases=['app_profile', 'app_profile_name']),  # Not required for querying all objects\n        epg=dict(type='str', aliases=['epg_name']),  # Not required for querying all objects\n        encap_id=dict(type='int', aliases=['vlan', 'vlan_id']),\n        primary_encap_id=dict(type='int', aliases=['primary_vlan', 'primary_vlan_id']),\n        deploy_immediacy=dict(type='str', choices=['immediate', 'lazy']),\n        interface_mode=dict(type='str', choices=['802.1p', 'access', 'native', 'regular', 'tagged', 'trunk', 'untagged'],\n                            aliases=['interface_mode_name', 'mode']),\n        interface_type=dict(type='str', default='switch_port', choices=['fex', 'port_channel', 'switch_port', 'vpc']),\n        pod_id=dict(type='int', aliases=['pod', 'pod_number']),  # Not required for querying all objects\n        leafs=dict(type='list', aliases=['leaves', 'nodes', 'paths', 'switches']),\n        interface=dict(type='str'),\n        extpaths=dict(type='int'),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['interface_type', 'fex', ['extpaths']],\n            ['state', 'absent', ['ap', 'epg', 'interface', 'leafs', 'pod_id', 'tenant']],\n            ['state', 'present', ['ap', 'encap_id', 'epg', 'interface', 'leafs', 'pod_id', 'tenant']],\n        ],\n    )\n\n    tenant = module.params['tenant']\n    ap = module.params['ap']\n    epg = module.params['epg']\n    encap_id = module.params['encap_id']\n    primary_encap_id = module.params['primary_encap_id']\n    deploy_immediacy = module.params['deploy_immediacy']\n    interface_mode = module.params['interface_mode']\n    interface_type = module.params['interface_type']\n    pod_id = module.params['pod_id']\n    # Users are likely to use integers for leaf IDs, which would raise an exception when using the join method\n    leafs = [str(leaf) for leaf in module.params['leafs']]\n    if leafs is not None:\n        if len(leafs) == 1:\n            if interface_type != 'vpc':\n                leafs = leafs[0]\n            else:\n                module.fail_json(msg='A interface_type of \"vpc\" requires 2 leafs')\n        elif len(leafs) == 2:\n            if interface_type == 'vpc':\n                leafs = \"-\".join(leafs)\n            else:\n                module.fail_json(msg='The interface_types \"switch_port\", \"port_channel\", and \"fex\" \\\n                    do not support using multiple leafs for a single binding')\n        else:\n            module.fail_json(msg='The \"leafs\" parameter must not have more than 2 entries')\n    interface = module.params['interface']\n    extpaths = module.params['extpaths']\n    state = module.params['state']\n    static_path = ''\n\n    if encap_id is not None:\n        if encap_id in range(1, 4097):\n            encap_id = 'vlan-{0}'.format(encap_id)\n        else:\n            module.fail_json(msg='Valid VLAN assigments are from 1 to 4096')\n\n    if primary_encap_id is not None:\n        if primary_encap_id in range(1, 4097):\n            primary_encap_id = 'vlan-{0}'.format(primary_encap_id)\n        else:\n            module.fail_json(msg='Valid VLAN assigments are from 1 to 4096')\n\n    INTERFACE_MODE_MAPPING = {\n        '802.1p': 'native',\n        'access': 'untagged',\n        'native': 'native',\n        'regular': 'regular',\n        'tagged': 'regular',\n        'trunk': 'regular',\n        'untagged': 'untagged',\n    }\n\n    INTERFACE_TYPE_MAPPING = dict(\n        fex='topology/pod-{0}/paths-{1}/extpaths-{2}/pathep-[eth{3}]'.format(pod_id, leafs, extpaths, interface),\n        port_channel='topology/pod-{0}/paths-{1}/pathep-[eth{2}]'.format(pod_id, leafs, interface),\n        switch_port='topology/pod-{0}/paths-{1}/pathep-[eth{2}]'.format(pod_id, leafs, interface),\n        vpc='topology/pod-{0}/protpaths-{1}/pathep-[{2}]'.format(pod_id, leafs, interface),\n    )\n\n    static_path = INTERFACE_TYPE_MAPPING[interface_type]\n    if interface_mode is not None:\n        interface_mode = INTERFACE_MODE_MAPPING[interface_mode]\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fvTenant',\n            aci_rn='tn-{0}'.format(tenant),\n            filter_target='eq(fvTenant.name, \"{0}\")'.format(tenant),\n            module_object=tenant,\n        ),\n        subclass_1=dict(\n            aci_class='fvAp',\n            aci_rn='ap-{0}'.format(ap),\n            filter_target='eq(fvAp.name, \"{0}\")'.format(ap),\n            module_object=ap,\n        ),\n        subclass_2=dict(\n            aci_class='fvAEPg',\n            aci_rn='epg-{0}'.format(epg),\n            filter_target='eq(fvAEPg.name, \"{0}\")'.format(epg),\n            module_object=epg,\n        ),\n        subclass_3=dict(\n            aci_class='fvRsPathAtt',\n            aci_rn='rspathAtt-[{0}]'.format(static_path),\n            filter_target='eq(fvRsPathAtt.tDn, \"{0}\"'.format(static_path),\n            module_object=static_path,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='fvRsPathAtt',\n            class_config=dict(\n                encap=encap_id,\n                primaryEncap=primary_encap_id,\n                instrImedcy=deploy_immediacy,\n                mode=interface_mode,\n                tDn=static_path,\n            ),\n        )\n\n        aci.get_diff(aci_class='fvRsPathAtt')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_static_binding_to_epg.py", "id": "e0402b8e83e6a6642ed790b347d28025", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_static_binding_to_epg.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}