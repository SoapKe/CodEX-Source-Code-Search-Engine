{"author": "donnemartin", "code": "\n\n\nimport csv as csv\nimport numpy as np\n\ncsv_file_object = csv.reader(open('train.csv', 'rb'))       \nheader = csv_file_object.next()                             \ndata=[]                                                     \n\nfor row in csv_file_object:                 \n    data.append(row)                        \ndata = np.array(data)                       \n\n\n\n\n\n\nfare_ceiling = 40\n\ndata[ data[0::,9].astype(np.float) >= fare_ceiling, 9 ] = fare_ceiling - 1.0\n\nfare_bracket_size = 10\nnumber_of_price_brackets = fare_ceiling / fare_bracket_size\nnumber_of_classes = 3                             \nnumber_of_classes = len(np.unique(data[0::,2]))   \n                                                  \n\n\n\n\n\nsurvival_table = np.zeros([2,number_of_classes,number_of_price_brackets],float)\n\n\nfor i in xrange(number_of_classes):\n    for j in xrange(number_of_price_brackets):\n\n        women_only_stats = data[ (data[0::,4] == \"female\") \\\n                                 & (data[0::,2].astype(np.float) == i+1) \\\n                                 & (data[0:,9].astype(np.float) >= j*fare_bracket_size) \\\n                                 & (data[0:,9].astype(np.float) < (j+1)*fare_bracket_size), 1]\n\n        men_only_stats = data[ (data[0::,4] != \"female\") \\\n                                 & (data[0::,2].astype(np.float) == i+1) \\\n                                 & (data[0:,9].astype(np.float) >= j*fare_bracket_size) \\\n                                 & (data[0:,9].astype(np.float) < (j+1)*fare_bracket_size), 1]\n\n                                 \n\n        survival_table[0,i,j] = np.mean(women_only_stats.astype(np.float))  \n        survival_table[1,i,j] = np.mean(men_only_stats.astype(np.float))    \n\n\n# (such that the denominator is 0), then it returns nan, we can convert these to 0\n\nsurvival_table[ survival_table != survival_table ] = 0.\n\n\n\nsurvival_table[ survival_table < 0.5 ] = 0\nsurvival_table[ survival_table >= 0.5 ] = 1\n\n\n# if a women then survived(1) if a man then did not survived (0)\n\ntest_file = open('test.csv', 'rb')\ntest_file_object = csv.reader(test_file)\nheader = test_file_object.next()\n\n\npredictions_file = open(\"genderclassmodel.csv\", \"wb\")\npredictions_file_object = csv.writer(predictions_file)\npredictions_file_object.writerow([\"PassengerId\", \"Survived\"])\n\n\nfor row in test_file_object:\n    for j in xrange(number_of_price_brackets):\n        \n        try:\n            row[8] = float(row[8])    \n                                      \n        except:                       \n            bin_fare = 3 - float(row[1])\n            break                     \n        if row[8] > fare_ceiling:     \n                                      \n            bin_fare = number_of_price_brackets - 1\n            break                     \n\n        if row[8] >= j*fare_bracket_size\\\n            and row[8] < (j+1)*fare_bracket_size:     \n                                                      \n                                                      \n                                                      \n            bin_fare = j\n            break\n        \n        \n    if row[3] == 'female':\n        predictions_file_object.writerow([row[0], \"%d\" % int(survival_table[ 0, float(row[1]) - 1, bin_fare ])])\n    else:\n        predictions_file_object.writerow([row[0], \"%d\" % int(survival_table[ 1, float(row[1]) - 1, bin_fare])])\n\n\ntest_file.close()\npredictions_file.close()", "comments": "    now user read file creates model uses price  class gender author   astrodave date   18th september 2012 revised   28 march 2014         load csv file    skip fist line header    create variable hold data    skip row csv file    adding row data variable    then convert list array    in order analyse price column i need bin data    binning parameters  problem face fares large    so either lot bins nothing lose    information considering anythng 39 simply last bin     so add ceiling    modify data fare column   39  greater equal ceiling    i know 1st  2nd 3rd classes board     but better practice calculate pclass directly     take length array unique values column index 2    this reference matrix show proportion survivors sorted table    gender  class ticket fare     first initialize zeros    i find stats women men board      0 j    3     female stats    male stats    since python tries find mean array nothing    (such denominator 0)  returns nan  convert 0    saying array equal array  set 0     now i proportion survivors  simply round  0 5    i predict dont surivive     0 5    now i indicator i read test file write    women survived(1) man survived (0)    first read test    also open new file i write      first thing bin price file    if fare place price ticket according class    no fare recorded come string    try make float    if fails bin fare according class    break loop move next row    otherwise test see higher    fare ceiling set earlier    and break next row    if passed tests loop    bin find right one    append bin fare    move next loop    now i binned fare  passenger class  whether female male     cross ref details survival table    close files ", "content": "\"\"\" Now that the user can read in a file this creates a model which uses the price, class and gender\nAuthor : AstroDave\nDate : 18th September 2012\nRevised : 28 March 2014\n\n\"\"\"\n\n\nimport csv as csv\nimport numpy as np\n\ncsv_file_object = csv.reader(open('train.csv', 'rb'))       # Load in the csv file\nheader = csv_file_object.next()                             # Skip the fist line as it is a header\ndata=[]                                                     # Create a variable to hold the data\n\nfor row in csv_file_object:                 # Skip through each row in the csv file\n    data.append(row)                        # adding each row to the data variable\ndata = np.array(data)                       # Then convert from a list to an array\n\n# In order to analyse the price column I need to bin up that data\n# here are my binning parameters, the problem we face is some of the fares are very large\n# So we can either have a lot of bins with nothing in them or we can just lose some\n# information by just considering that anythng over 39 is simply in the last bin.\n# So we add a ceiling\nfare_ceiling = 40\n# then modify the data in the Fare column to = 39, if it is greater or equal to the ceiling\ndata[ data[0::,9].astype(np.float) >= fare_ceiling, 9 ] = fare_ceiling - 1.0\n\nfare_bracket_size = 10\nnumber_of_price_brackets = fare_ceiling / fare_bracket_size\nnumber_of_classes = 3                             # I know there were 1st, 2nd and 3rd classes on board.\nnumber_of_classes = len(np.unique(data[0::,2]))   # But it's better practice to calculate this from the Pclass directly:\n                                                  # just take the length of an array of UNIQUE values in column index 2\n\n\n# This reference matrix will show the proportion of survivors as a sorted table of\n# gender, class and ticket fare.\n# First initialize it with all zeros\nsurvival_table = np.zeros([2,number_of_classes,number_of_price_brackets],float)\n\n# I can now find the stats of all the women and men on board\nfor i in xrange(number_of_classes):\n    for j in xrange(number_of_price_brackets):\n\n        women_only_stats = data[ (data[0::,4] == \"female\") \\\n                                 & (data[0::,2].astype(np.float) == i+1) \\\n                                 & (data[0:,9].astype(np.float) >= j*fare_bracket_size) \\\n                                 & (data[0:,9].astype(np.float) < (j+1)*fare_bracket_size), 1]\n\n        men_only_stats = data[ (data[0::,4] != \"female\") \\\n                                 & (data[0::,2].astype(np.float) == i+1) \\\n                                 & (data[0:,9].astype(np.float) >= j*fare_bracket_size) \\\n                                 & (data[0:,9].astype(np.float) < (j+1)*fare_bracket_size), 1]\n\n                                 #if i == 0 and j == 3:\n\n        survival_table[0,i,j] = np.mean(women_only_stats.astype(np.float))  # Female stats\n        survival_table[1,i,j] = np.mean(men_only_stats.astype(np.float))    # Male stats\n\n# Since in python if it tries to find the mean of an array with nothing in it\n# (such that the denominator is 0), then it returns nan, we can convert these to 0\n# by just saying where does the array not equal the array, and set these to 0.\nsurvival_table[ survival_table != survival_table ] = 0.\n\n# Now I have my proportion of survivors, simply round them such that if <0.5\n# I predict they dont surivive, and if >= 0.5 they do\nsurvival_table[ survival_table < 0.5 ] = 0\nsurvival_table[ survival_table >= 0.5 ] = 1\n\n# Now I have my indicator I can read in the test file and write out\n# if a women then survived(1) if a man then did not survived (0)\n# First read in test\ntest_file = open('test.csv', 'rb')\ntest_file_object = csv.reader(test_file)\nheader = test_file_object.next()\n\n# Also open the a new file so I can write to it. \npredictions_file = open(\"genderclassmodel.csv\", \"wb\")\npredictions_file_object = csv.writer(predictions_file)\npredictions_file_object.writerow([\"PassengerId\", \"Survived\"])\n\n# First thing to do is bin up the price file\nfor row in test_file_object:\n    for j in xrange(number_of_price_brackets):\n        # If there is no fare then place the price of the ticket according to class\n        try:\n            row[8] = float(row[8])    # No fare recorded will come up as a string so\n                                      # try to make it a float\n        except:                       # If fails then just bin the fare according to the class\n            bin_fare = 3 - float(row[1])\n            break                     # Break from the loop and move to the next row\n        if row[8] > fare_ceiling:     # Otherwise now test to see if it is higher\n                                      # than the fare ceiling we set earlier\n            bin_fare = number_of_price_brackets - 1\n            break                     # And then break to the next row\n\n        if row[8] >= j*fare_bracket_size\\\n            and row[8] < (j+1)*fare_bracket_size:     # If passed these tests then loop through\n                                                      # each bin until you find the right one\n                                                      # append it to the bin_fare\n                                                      # and move to the next loop\n            bin_fare = j\n            break\n        # Now I have the binned fare, passenger class, and whether female or male, we can\n        # just cross ref their details with our survival table\n    if row[3] == 'female':\n        predictions_file_object.writerow([row[0], \"%d\" % int(survival_table[ 0, float(row[1]) - 1, bin_fare ])])\n    else:\n        predictions_file_object.writerow([row[0], \"%d\" % int(survival_table[ 1, float(row[1]) - 1, bin_fare])])\n\n# Close out the files\ntest_file.close()\npredictions_file.close()", "description": "Data science Python notebooks: Deep learning (TensorFlow, Theano, Caffe, Keras), scikit-learn, Kaggle, big data (Spark, Hadoop MapReduce, HDFS), matplotlib, pandas, NumPy, SciPy, Python essentials, AWS, and various command lines.", "file_name": "genderclassmodel.py", "id": "96171162607a97fefb81d9f0d2f781f1", "language": "Python", "project_name": "data-science-ipython-notebooks", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-data-science-ipython-notebooks/donnemartin-data-science-ipython-notebooks-a876e34/data/titanic/genderclassmodel.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:16:56Z", "url": "https://github.com/donnemartin/data-science-ipython-notebooks", "wiki": true}