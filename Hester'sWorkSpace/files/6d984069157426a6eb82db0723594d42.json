{"author": "ansible", "code": "\n\n (c) Quentin Stafford-Fraser 2015, with contributions gratefully acknowledged from:\n     * Andy Baker\n     * Federico Tarantini\n\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Create a Webfaction application using Ansible and the Webfaction API\n\n Valid application types can be found by looking here:\n http://docs.webfaction.com/xmlrpc-api/apps.htmlapplication-types\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: webfaction_app\nshort_description: Add or remove applications on a Webfaction host\ndescription:\n    - Add or remove applications on a Webfaction host. Further documentation at U(http://github.com/quentinsf/ansible-webfaction).\nauthor: Quentin Stafford-Fraser (@quentinsf)\nversion_added: \"2.0\"\nnotes:\n    - >\n      You can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API.\n      The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as\n      your host, you may want to add C(serial: 1) to the plays.\n    - See `the webfaction API <http://docs.webfaction.com/xmlrpc-api/>`_ for more info.\n\noptions:\n    name:\n        description:\n            - The name of the application\n        required: true\n\n    state:\n        description:\n            - Whether the application should exist\n        choices: ['present', 'absent']\n        default: \"present\"\n\n    type:\n        description:\n            - The type of application to create. See the Webfaction docs at U(http://docs.webfaction.com/xmlrpc-api/apps.html) for a list.\n        required: true\n\n    autostart:\n        description:\n            - Whether the app should restart with an C(autostart.cgi) script\n        type: bool\n        default: 'no'\n\n    extra_info:\n        description:\n            - Any extra parameters required by the app\n        default: ''\n\n    port_open:\n        description:\n            - IF the port should be opened\n        type: bool\n        default: 'no'\n\n    login_name:\n        description:\n            - The webfaction account to use\n        required: true\n\n    login_password:\n        description:\n            - The webfaction password to use\n        required: true\n\n    machine:\n        description:\n            - The machine name to use (optional for accounts with only one machine)\n        default: False\n\n'''\n\nEXAMPLES = '''\n  - name: Create a test app\n    webfaction_app:\n      name: \"my_wsgi_app1\"\n      state: present\n      type: mod_wsgi35-python27\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n      machine: \"{{webfaction_machine}}\"\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves import xmlrpc_client\n\n\nwebfaction = xmlrpc_client.ServerProxy('https://api.webfaction.com/')\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(required=False, choices=['present', 'absent'], default='present'),\n            type=dict(required=True),\n            autostart=dict(required=False, type='bool', default=False),\n            extra_info=dict(required=False, default=\"\"),\n            port_open=dict(required=False, type='bool', default=False),\n            login_name=dict(required=True),\n            login_password=dict(required=True, no_log=True),\n            machine=dict(required=False, default=False),\n        ),\n        supports_check_mode=True\n    )\n    app_name = module.params['name']\n    app_type = module.params['type']\n    app_state = module.params['state']\n\n    if module.params['machine']:\n        session_id, account = webfaction.login(\n            module.params['login_name'],\n            module.params['login_password'],\n            module.params['machine']\n        )\n    else:\n        session_id, account = webfaction.login(\n            module.params['login_name'],\n            module.params['login_password']\n        )\n\n    app_list = webfaction.list_apps(session_id)\n    app_map = dict([(i['name'], i) for i in app_list])\n    existing_app = app_map.get(app_name)\n\n    result = {}\n\n     Here's where the real stuff happens\n\n    if app_state == 'present':\n\n         Does an app with this name already exist?\n        if existing_app:\n            if existing_app['type'] != app_type:\n                module.fail_json(msg=\"App already exists with different type. Please fix by hand.\")\n\n             If it exists with the right type, we don't change it\n             Should check other parameters.\n            module.exit_json(\n                changed=False,\n            )\n\n        if not module.check_mode:\n             If this isn't a dry run, create the app\n            result.update(\n                webfaction.create_app(\n                    session_id, app_name, app_type,\n                    module.boolean(module.params['autostart']),\n                    module.params['extra_info'],\n                    module.boolean(module.params['port_open'])\n                )\n            )\n\n    elif app_state == 'absent':\n\n         If the app's already not there, nothing changed.\n        if not existing_app:\n            module.exit_json(\n                changed=False,\n            )\n\n        if not module.check_mode:\n             If this isn't a dry run, delete the app\n            result.update(\n                webfaction.delete_app(session_id, app_name)\n            )\n\n    else:\n        module.fail_json(msg=\"Unknown state specified: {}\".format(app_state))\n\n    module.exit_json(\n        changed=True,\n        result=result\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  webfaction app short description  add remove applications webfaction host description        add remove applications webfaction host  further documentation u(http   github com quentinsf ansible webfaction)  author  quentin stafford fraser ( quentinsf) version added   2 0  notes                you run playbooks use local machine  webfaction host  elsewhere  since scripts use remote webfaction api        the location important  however  running multiple hosts i(simultaneously) best avoided  if specify i(localhost)       host  may want add c(serial  1) plays        see  webfaction api  http   docs webfaction com xmlrpc api     info   options      name          description                the name application         required  true      state          description                whether application exist         choices    present    absent           default   present       type          description                the type application create  see webfaction docs u(http   docs webfaction com xmlrpc api apps html) list          required  true      autostart          description                whether app restart c(autostart cgi) script         type  bool         default         extra info          description                any extra parameters required app         default          port open          description                if port opened         type  bool         default         login name          description                the webfaction account use         required  true      login password          description                the webfaction password use         required  true      machine          description                the machine name use (optional accounts one machine)         default  false       examples           name  create test app     webfaction app        name   wsgi app1        state  present       type  mod wsgi35 python27       login name     webfaction user          login password     webfaction passwd          machine     webfaction machine            usr bin python       (c) quentin stafford fraser 2015  contributions gratefully acknowledged           andy baker          federico tarantini       gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)       create webfaction application using ansible webfaction api       valid application types found looking     http   docs webfaction com xmlrpc api apps html application types    here real stuff happens    does app name already exist     if exists right type  change    should check parameters     if dry run  create app    if app already  nothing changed     if dry run  delete app ", "content": "#!/usr/bin/python\n#\n# (c) Quentin Stafford-Fraser 2015, with contributions gratefully acknowledged from:\n#     * Andy Baker\n#     * Federico Tarantini\n#\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n#\n# Create a Webfaction application using Ansible and the Webfaction API\n#\n# Valid application types can be found by looking here:\n# http://docs.webfaction.com/xmlrpc-api/apps.html#application-types\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: webfaction_app\nshort_description: Add or remove applications on a Webfaction host\ndescription:\n    - Add or remove applications on a Webfaction host. Further documentation at U(http://github.com/quentinsf/ansible-webfaction).\nauthor: Quentin Stafford-Fraser (@quentinsf)\nversion_added: \"2.0\"\nnotes:\n    - >\n      You can run playbooks that use this on a local machine, or on a Webfaction host, or elsewhere, since the scripts use the remote webfaction API.\n      The location is not important. However, running them on multiple hosts I(simultaneously) is best avoided. If you don't specify I(localhost) as\n      your host, you may want to add C(serial: 1) to the plays.\n    - See `the webfaction API <http://docs.webfaction.com/xmlrpc-api/>`_ for more info.\n\noptions:\n    name:\n        description:\n            - The name of the application\n        required: true\n\n    state:\n        description:\n            - Whether the application should exist\n        choices: ['present', 'absent']\n        default: \"present\"\n\n    type:\n        description:\n            - The type of application to create. See the Webfaction docs at U(http://docs.webfaction.com/xmlrpc-api/apps.html) for a list.\n        required: true\n\n    autostart:\n        description:\n            - Whether the app should restart with an C(autostart.cgi) script\n        type: bool\n        default: 'no'\n\n    extra_info:\n        description:\n            - Any extra parameters required by the app\n        default: ''\n\n    port_open:\n        description:\n            - IF the port should be opened\n        type: bool\n        default: 'no'\n\n    login_name:\n        description:\n            - The webfaction account to use\n        required: true\n\n    login_password:\n        description:\n            - The webfaction password to use\n        required: true\n\n    machine:\n        description:\n            - The machine name to use (optional for accounts with only one machine)\n        default: False\n\n'''\n\nEXAMPLES = '''\n  - name: Create a test app\n    webfaction_app:\n      name: \"my_wsgi_app1\"\n      state: present\n      type: mod_wsgi35-python27\n      login_name: \"{{webfaction_user}}\"\n      login_password: \"{{webfaction_passwd}}\"\n      machine: \"{{webfaction_machine}}\"\n'''\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.six.moves import xmlrpc_client\n\n\nwebfaction = xmlrpc_client.ServerProxy('https://api.webfaction.com/')\n\n\ndef main():\n\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(required=True),\n            state=dict(required=False, choices=['present', 'absent'], default='present'),\n            type=dict(required=True),\n            autostart=dict(required=False, type='bool', default=False),\n            extra_info=dict(required=False, default=\"\"),\n            port_open=dict(required=False, type='bool', default=False),\n            login_name=dict(required=True),\n            login_password=dict(required=True, no_log=True),\n            machine=dict(required=False, default=False),\n        ),\n        supports_check_mode=True\n    )\n    app_name = module.params['name']\n    app_type = module.params['type']\n    app_state = module.params['state']\n\n    if module.params['machine']:\n        session_id, account = webfaction.login(\n            module.params['login_name'],\n            module.params['login_password'],\n            module.params['machine']\n        )\n    else:\n        session_id, account = webfaction.login(\n            module.params['login_name'],\n            module.params['login_password']\n        )\n\n    app_list = webfaction.list_apps(session_id)\n    app_map = dict([(i['name'], i) for i in app_list])\n    existing_app = app_map.get(app_name)\n\n    result = {}\n\n    # Here's where the real stuff happens\n\n    if app_state == 'present':\n\n        # Does an app with this name already exist?\n        if existing_app:\n            if existing_app['type'] != app_type:\n                module.fail_json(msg=\"App already exists with different type. Please fix by hand.\")\n\n            # If it exists with the right type, we don't change it\n            # Should check other parameters.\n            module.exit_json(\n                changed=False,\n            )\n\n        if not module.check_mode:\n            # If this isn't a dry run, create the app\n            result.update(\n                webfaction.create_app(\n                    session_id, app_name, app_type,\n                    module.boolean(module.params['autostart']),\n                    module.params['extra_info'],\n                    module.boolean(module.params['port_open'])\n                )\n            )\n\n    elif app_state == 'absent':\n\n        # If the app's already not there, nothing changed.\n        if not existing_app:\n            module.exit_json(\n                changed=False,\n            )\n\n        if not module.check_mode:\n            # If this isn't a dry run, delete the app\n            result.update(\n                webfaction.delete_app(session_id, app_name)\n            )\n\n    else:\n        module.fail_json(msg=\"Unknown state specified: {}\".format(app_state))\n\n    module.exit_json(\n        changed=True,\n        result=result\n    )\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "webfaction_app.py", "id": "6d984069157426a6eb82db0723594d42", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/webfaction/webfaction_app.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}