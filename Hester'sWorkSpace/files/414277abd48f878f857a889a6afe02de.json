{"author": "donnemartin", "code": "from enum import Enum  \n\n\nclass State(Enum):\n    unvisited = 0\n    visiting = 1\n    visited = 2\n\n\nclass Node:\n\n    def __init__(self, key):\n        self.key = key\n        self.visit_state = State.unvisited\n        self.incoming_edges = 0\n        self.adj_nodes = {}  \n        self.adj_weights = {}  \n\n    def __repr__(self):\n        return str(self.key)\n\n    def __lt__(self, other):\n        return self.key < other.key\n\n    def add_neighbor(self, neighbor, weight=0):\n        if neighbor is None or weight is None:\n            raise TypeError('neighbor or weight cannot be None')\n        neighbor.incoming_edges += 1\n        self.adj_weights[neighbor.key] = weight\n        self.adj_nodes[neighbor.key] = neighbor\n\n    def remove_neighbor(self, neighbor):\n        if neighbor is None:\n            raise TypeError('neighbor cannot be None')\n        if neighbor.key not in self.adj_nodes:\n            raise KeyError('neighbor not found')\n        neighbor.incoming_edges -= 1\n        del self.adj_weights[neighbor.key]\n        del self.adj_nodes[neighbor.key]\n\n\nclass Graph:\n\n    def __init__(self):\n        self.nodes = {}  \n\n    def add_node(self, key):\n        if key is None:\n            raise TypeError('key cannot be None')\n        if key not in self.nodes:\n            self.nodes[key] = Node(key)\n        return self.nodes[key]\n\n    def add_edge(self, source_key, dest_key, weight=0):\n        if source_key is None or dest_key is None:\n            raise KeyError('Invalid key')\n        if source_key not in self.nodes:\n            self.add_node(source_key)\n        if dest_key not in self.nodes:\n            self.add_node(dest_key)\n        self.nodes[source_key].add_neighbor(self.nodes[dest_key], weight)\n\n    def add_undirected_edge(self, src_key, dst_key, weight=0):\n        if src_key is None or dst_key is None:\n            raise TypeError('key cannot be None')\n        self.add_edge(src_key, dst_key, weight)\n        self.add_edge(dst_key, src_key, weight)", "comments": "  python 2 users  run pip install enum34    key   key  val   node    key   key  val   weight    key   key  val   node ", "content": "from enum import Enum  # Python 2 users: Run pip install enum34\n\n\nclass State(Enum):\n    unvisited = 0\n    visiting = 1\n    visited = 2\n\n\nclass Node:\n\n    def __init__(self, key):\n        self.key = key\n        self.visit_state = State.unvisited\n        self.incoming_edges = 0\n        self.adj_nodes = {}  # Key = key, val = Node\n        self.adj_weights = {}  # Key = key, val = weight\n\n    def __repr__(self):\n        return str(self.key)\n\n    def __lt__(self, other):\n        return self.key < other.key\n\n    def add_neighbor(self, neighbor, weight=0):\n        if neighbor is None or weight is None:\n            raise TypeError('neighbor or weight cannot be None')\n        neighbor.incoming_edges += 1\n        self.adj_weights[neighbor.key] = weight\n        self.adj_nodes[neighbor.key] = neighbor\n\n    def remove_neighbor(self, neighbor):\n        if neighbor is None:\n            raise TypeError('neighbor cannot be None')\n        if neighbor.key not in self.adj_nodes:\n            raise KeyError('neighbor not found')\n        neighbor.incoming_edges -= 1\n        del self.adj_weights[neighbor.key]\n        del self.adj_nodes[neighbor.key]\n\n\nclass Graph:\n\n    def __init__(self):\n        self.nodes = {}  # Key = key, val = Node\n\n    def add_node(self, key):\n        if key is None:\n            raise TypeError('key cannot be None')\n        if key not in self.nodes:\n            self.nodes[key] = Node(key)\n        return self.nodes[key]\n\n    def add_edge(self, source_key, dest_key, weight=0):\n        if source_key is None or dest_key is None:\n            raise KeyError('Invalid key')\n        if source_key not in self.nodes:\n            self.add_node(source_key)\n        if dest_key not in self.nodes:\n            self.add_node(dest_key)\n        self.nodes[source_key].add_neighbor(self.nodes[dest_key], weight)\n\n    def add_undirected_edge(self, src_key, dst_key, weight=0):\n        if src_key is None or dst_key is None:\n            raise TypeError('key cannot be None')\n        self.add_edge(src_key, dst_key, weight)\n        self.add_edge(dst_key, src_key, weight)", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "graph.py", "id": "414277abd48f878f857a889a6afe02de", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/graph/graph.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}