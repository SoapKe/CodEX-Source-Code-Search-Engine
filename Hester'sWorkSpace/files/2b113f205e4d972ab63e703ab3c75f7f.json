{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import models, fields, api\n\n\nclass RegistrationEditor(models.TransientModel):\n    _name = \"registration.editor\"\n\n    sale_order_id = fields.Many2one('sale.order', 'Sales Order', required=True)\n    event_registration_ids = fields.One2many('registration.editor.line', 'editor_id', string='Registrations to Edit')\n\n    @api.model\n    def default_get(self, fields):\n        res = super(RegistrationEditor, self).default_get(fields)\n        if not res.get('sale_order_id'):\n            sale_order_id = res.get('sale_order_id', self._context.get('active_id'))\n            res['sale_order_id'] = sale_order_id\n        sale_order = self.env['sale.order'].browse(res.get('sale_order_id'))\n        registrations = self.env['event.registration'].search([\n            ('sale_order_id', '=', sale_order.id),\n            ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids),\n            ('state', '!=', 'cancel')])\n\n        attendee_list = []\n        for so_line in [l for l in sale_order.order_line if l.event_ticket_id]:\n            existing_registrations = [r for r in registrations if r.event_ticket_id == so_line.event_ticket_id]\n            for reg in existing_registrations:\n                attendee_list.append({\n                    'event_id': reg.event_id.id,\n                    'event_ticket_id': reg.event_ticket_id.id,\n                    'registration_id': reg.id,\n                    'name': reg.name,\n                    'email': reg.email,\n                    'phone': reg.phone,\n                    'sale_order_line_id': so_line.id,\n                })\n            for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n                attendee_list.append([0, 0, {\n                    'event_id': so_line.event_id.id,\n                    'event_ticket_id': so_line.event_ticket_id.id,\n                    'sale_order_line_id': so_line.id,\n                }])\n        res['event_registration_ids'] = attendee_list\n        res = self._convert_to_write(res)\n        return res\n\n    @api.multi\n    def action_make_registration(self):\n        self.ensure_one()\n        for registration_line in self.event_registration_ids:\n            values = registration_line.get_registration_data()\n            if registration_line.registration_id:\n                registration_line.registration_id.write(values)\n            else:\n                self.env['event.registration'].create(values)\n        if self.env.context.get('active_model') == 'sale.order':\n            for order in self.env['sale.order'].browse(self.env.context.get('active_ids', [])):\n                order.order_line._update_registrations(confirm=False)\n        return {'type': 'ir.actions.act_window_close'}\n\n\nclass RegistrationEditorLine(models.TransientModel):\n    \n    _name = \"registration.editor.line\"\n\n    editor_id = fields.Many2one('registration.editor')\n    sale_order_line_id = fields.Many2one('sale.order.line', string='Sales Order Line')\n    event_id = fields.Many2one('event.event', string='Event', required=True)\n    registration_id = fields.Many2one('event.registration', 'Original Registration')\n    event_ticket_id = fields.Many2one('event.event.ticket', string='Event Ticket')\n    email = fields.Char(string='Email')\n    phone = fields.Char(string='Phone')\n    name = fields.Char(string='Name', index=True)\n\n    @api.multi\n    def get_registration_data(self):\n        self.ensure_one()\n        return {\n            'event_id': self.event_id.id,\n            'event_ticket_id': self.event_ticket_id.id,\n            'partner_id': self.editor_id.sale_order_id.partner_id.id,\n            'name': self.name or self.editor_id.sale_order_id.partner_id.name,\n            'phone': self.phone or self.editor_id.sale_order_id.partner_id.phone,\n            'email': self.email or self.editor_id.sale_order_id.partner_id.email,\n            'origin': self.editor_id.sale_order_id.name,\n            'sale_order_id': self.editor_id.sale_order_id.id,\n            'sale_order_line_id': self.sale_order_line_id.id,\n        }\n", "comments": "   event registration           coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import models, fields, api\n\n\nclass RegistrationEditor(models.TransientModel):\n    _name = \"registration.editor\"\n\n    sale_order_id = fields.Many2one('sale.order', 'Sales Order', required=True)\n    event_registration_ids = fields.One2many('registration.editor.line', 'editor_id', string='Registrations to Edit')\n\n    @api.model\n    def default_get(self, fields):\n        res = super(RegistrationEditor, self).default_get(fields)\n        if not res.get('sale_order_id'):\n            sale_order_id = res.get('sale_order_id', self._context.get('active_id'))\n            res['sale_order_id'] = sale_order_id\n        sale_order = self.env['sale.order'].browse(res.get('sale_order_id'))\n        registrations = self.env['event.registration'].search([\n            ('sale_order_id', '=', sale_order.id),\n            ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids),\n            ('state', '!=', 'cancel')])\n\n        attendee_list = []\n        for so_line in [l for l in sale_order.order_line if l.event_ticket_id]:\n            existing_registrations = [r for r in registrations if r.event_ticket_id == so_line.event_ticket_id]\n            for reg in existing_registrations:\n                attendee_list.append({\n                    'event_id': reg.event_id.id,\n                    'event_ticket_id': reg.event_ticket_id.id,\n                    'registration_id': reg.id,\n                    'name': reg.name,\n                    'email': reg.email,\n                    'phone': reg.phone,\n                    'sale_order_line_id': so_line.id,\n                })\n            for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n                attendee_list.append([0, 0, {\n                    'event_id': so_line.event_id.id,\n                    'event_ticket_id': so_line.event_ticket_id.id,\n                    'sale_order_line_id': so_line.id,\n                }])\n        res['event_registration_ids'] = attendee_list\n        res = self._convert_to_write(res)\n        return res\n\n    @api.multi\n    def action_make_registration(self):\n        self.ensure_one()\n        for registration_line in self.event_registration_ids:\n            values = registration_line.get_registration_data()\n            if registration_line.registration_id:\n                registration_line.registration_id.write(values)\n            else:\n                self.env['event.registration'].create(values)\n        if self.env.context.get('active_model') == 'sale.order':\n            for order in self.env['sale.order'].browse(self.env.context.get('active_ids', [])):\n                order.order_line._update_registrations(confirm=False)\n        return {'type': 'ir.actions.act_window_close'}\n\n\nclass RegistrationEditorLine(models.TransientModel):\n    \"\"\"Event Registration\"\"\"\n    _name = \"registration.editor.line\"\n\n    editor_id = fields.Many2one('registration.editor')\n    sale_order_line_id = fields.Many2one('sale.order.line', string='Sales Order Line')\n    event_id = fields.Many2one('event.event', string='Event', required=True)\n    registration_id = fields.Many2one('event.registration', 'Original Registration')\n    event_ticket_id = fields.Many2one('event.event.ticket', string='Event Ticket')\n    email = fields.Char(string='Email')\n    phone = fields.Char(string='Phone')\n    name = fields.Char(string='Name', index=True)\n\n    @api.multi\n    def get_registration_data(self):\n        self.ensure_one()\n        return {\n            'event_id': self.event_id.id,\n            'event_ticket_id': self.event_ticket_id.id,\n            'partner_id': self.editor_id.sale_order_id.partner_id.id,\n            'name': self.name or self.editor_id.sale_order_id.partner_id.name,\n            'phone': self.phone or self.editor_id.sale_order_id.partner_id.phone,\n            'email': self.email or self.editor_id.sale_order_id.partner_id.email,\n            'origin': self.editor_id.sale_order_id.name,\n            'sale_order_id': self.editor_id.sale_order_id.id,\n            'sale_order_line_id': self.sale_order_line_id.id,\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "event_edit_registration.py", "id": "2b113f205e4d972ab63e703ab3c75f7f", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/event_sale/wizard/event_edit_registration.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}