{"author": "donnemartin", "code": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestHanoi(object):\n\n    def test_hanoi(self):\n        hanoi = Hanoi()\n        num_disks = 3\n        src = Stack()\n        buff = Stack()\n        dest = Stack()\n\n        print('Test: None towers')\n        assert_raises(TypeError, hanoi.move_disks, num_disks, None, None, None)\n\n        print('Test: 0 disks')\n        hanoi.move_disks(num_disks, src, dest, buff)\n        assert_equal(dest.pop(), None)\n\n        print('Test: 1 disk')\n        src.push(5)\n        hanoi.move_disks(num_disks, src, dest, buff)\n        assert_equal(dest.pop(), 5)\n\n        print('Test: 2 or more disks')\n        for disk_index in range(num_disks, -1, -1):\n            src.push(disk_index)\n        hanoi.move_disks(num_disks, src, dest, buff)\n        for disk_index in range(0, num_disks):\n            assert_equal(dest.pop(), disk_index)\n\n        print('Success: test_hanoi')\n\n\ndef main():\n    test = TestHanoi()\n    test.test_hanoi()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal, assert_raises\n\n\nclass TestHanoi(object):\n\n    def test_hanoi(self):\n        hanoi = Hanoi()\n        num_disks = 3\n        src = Stack()\n        buff = Stack()\n        dest = Stack()\n\n        print('Test: None towers')\n        assert_raises(TypeError, hanoi.move_disks, num_disks, None, None, None)\n\n        print('Test: 0 disks')\n        hanoi.move_disks(num_disks, src, dest, buff)\n        assert_equal(dest.pop(), None)\n\n        print('Test: 1 disk')\n        src.push(5)\n        hanoi.move_disks(num_disks, src, dest, buff)\n        assert_equal(dest.pop(), 5)\n\n        print('Test: 2 or more disks')\n        for disk_index in range(num_disks, -1, -1):\n            src.push(disk_index)\n        hanoi.move_disks(num_disks, src, dest, buff)\n        for disk_index in range(0, num_disks):\n            assert_equal(dest.pop(), disk_index)\n\n        print('Success: test_hanoi')\n\n\ndef main():\n    test = TestHanoi()\n    test.test_hanoi()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_hanoi.py", "id": "2397e278acc399a3ed58fd1d16ee0feb", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/recursion_dynamic/hanoi/test_hanoi.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}