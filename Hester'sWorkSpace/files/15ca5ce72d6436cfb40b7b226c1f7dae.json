{"author": "donnemartin", "code": "from nose.tools import assert_equal\nfrom nose.tools import raises\n\n\nclass TestBstSuccessor(object):\n\n    @raises(Exception)\n    def test_bst_successor_empty(self):\n        bst_successor = BstSuccessor()\n        bst_successor.get_next(None)\n\n    def test_bst_successor(self):\n        nodes = {}\n        node = Node(5)\n        nodes[5] = node\n        bst = Bst(nodes[5])\n        nodes[3] = bst.insert(3)\n        nodes[8] = bst.insert(8)\n        nodes[2] = bst.insert(2)\n        nodes[4] = bst.insert(4)\n        nodes[6] = bst.insert(6)\n        nodes[12] = bst.insert(12)\n        nodes[1] = bst.insert(1)\n        nodes[7] = bst.insert(7)\n        nodes[10] = bst.insert(10)\n        nodes[15] = bst.insert(15)\n        nodes[9] = bst.insert(9)\n\n        bst_successor = BstSuccessor()\n        assert_equal(bst_successor.get_next(nodes[4]), 5)\n        assert_equal(bst_successor.get_next(nodes[5]), 6)\n        assert_equal(bst_successor.get_next(nodes[8]), 9)\n        assert_equal(bst_successor.get_next(nodes[15]), None)\n\n        print('Success: test_bst_successor')\n\n\ndef main():\n    test = TestBstSuccessor()\n    test.test_bst_successor()\n    test.test_bst_successor_empty()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\nfrom nose.tools import raises\n\n\nclass TestBstSuccessor(object):\n\n    @raises(Exception)\n    def test_bst_successor_empty(self):\n        bst_successor = BstSuccessor()\n        bst_successor.get_next(None)\n\n    def test_bst_successor(self):\n        nodes = {}\n        node = Node(5)\n        nodes[5] = node\n        bst = Bst(nodes[5])\n        nodes[3] = bst.insert(3)\n        nodes[8] = bst.insert(8)\n        nodes[2] = bst.insert(2)\n        nodes[4] = bst.insert(4)\n        nodes[6] = bst.insert(6)\n        nodes[12] = bst.insert(12)\n        nodes[1] = bst.insert(1)\n        nodes[7] = bst.insert(7)\n        nodes[10] = bst.insert(10)\n        nodes[15] = bst.insert(15)\n        nodes[9] = bst.insert(9)\n\n        bst_successor = BstSuccessor()\n        assert_equal(bst_successor.get_next(nodes[4]), 5)\n        assert_equal(bst_successor.get_next(nodes[5]), 6)\n        assert_equal(bst_successor.get_next(nodes[8]), 9)\n        assert_equal(bst_successor.get_next(nodes[15]), None)\n\n        print('Success: test_bst_successor')\n\n\ndef main():\n    test = TestBstSuccessor()\n    test.test_bst_successor()\n    test.test_bst_successor_empty()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_bst_successor.py", "id": "15ca5ce72d6436cfb40b7b226c1f7dae", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/bst_successor/test_bst_successor.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}