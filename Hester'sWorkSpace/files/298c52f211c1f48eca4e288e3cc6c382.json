{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport base64\nimport datetime\nimport random\nimport re\nimport string\n\nimport requests\nfrom lxml import html\nfrom werkzeug import urls, utils\n\n\nfrom odoo import models, fields, api, _\nfrom odoo.tools import ustr\n\nURL_REGEX = r'(\\bhref=[\\'\"](?!mailto:|tel:|sms:)([^\\'\"]+)[\\'\"])'\n\ndef VALIDATE_URL(url):\n    if urls.url_parse(url).scheme not in ('http', 'https', 'ftp', 'ftps'):\n        return 'http://' + url\n\n    return url\n\n\nclass link_tracker(models.Model):\n    \n\n    _name = \"link.tracker\"\n    _rec_name = \"short_url\"\n\n    _inherit = ['utm.mixin']\n\n    url = fields.Char(string='Target URL', required=True)\n    count = fields.Integer(string='Number of Clicks', compute='_compute_count', store=True)\n    short_url = fields.Char(string='Tracked URL', compute='_compute_short_url')\n    link_click_ids = fields.One2many('link.tracker.click', 'link_id', string='Clicks')\n    title = fields.Char(string='Page Title', store=True)\n    favicon = fields.Char(string='Favicon', compute='_compute_favicon', store=True)\n    link_code_ids = fields.One2many('link.tracker.code', 'link_id', string='Codes')\n    code = fields.Char(string='Short URL code', compute='_compute_code')\n    redirected_url = fields.Char(string='Redirected URL', compute='_compute_redirected_url')\n    short_url_host = fields.Char(string='Host of the short URL', compute='_compute_short_url_host')\n    icon_src = fields.Char(string='Favicon Source', compute='_compute_icon_src')\n\n    @api.model\n    def convert_links(self, html, vals, blacklist=None):\n        for match in re.findall(URL_REGEX, html):\n\n            short_schema = self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/r/'\n\n            href = match[0]\n            long_url = match[1]\n\n            vals['url'] = utils.unescape(long_url)\n\n            if not blacklist or not [s for s in blacklist if s in long_url] and not long_url.startswith(short_schema):\n                link = self.create(vals)\n                shorten_url = self.browse(link.id)[0].short_url\n\n                if shorten_url:\n                    new_href = href.replace(long_url, shorten_url)\n                    html = html.replace(href, new_href)\n\n        return html\n\n    @api.one\n    @api.depends('link_click_ids.link_id')\n    def _compute_count(self):\n        self.count = len(self.link_click_ids)\n\n    @api.one\n    @api.depends('code')\n    def _compute_short_url(self):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        self.short_url = urls.url_join(base_url, '/r/%(code)s' % {'code': self.code})\n\n    @api.one\n    def _compute_short_url_host(self):\n        self.short_url_host = self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/r/'\n\n    @api.one\n    def _compute_code(self):\n        record = self.env['link.tracker.code'].search([('link_id', '=', self.id)], limit=1, order='id DESC')\n        self.code = record.code\n\n    @api.one\n    @api.depends('favicon')\n    def _compute_icon_src(self):\n        self.icon_src = 'data:image/png;base64,' + self.favicon\n\n    @api.one\n    @api.depends('url')\n    def _compute_redirected_url(self):\n        parsed = urls.url_parse(self.url)\n\n        utms = {}\n        for key, field, cook in self.env['utm.mixin'].tracking_fields():\n            attr = getattr(self, field).name\n            if attr:\n                utms[key] = attr\n        utms.update(parsed.decode_query())\n\n        self.redirected_url = parsed.replace(query=urls.url_encode(utms)).to_url()\n\n    @api.model\n    @api.depends('url')\n    def _get_title_from_url(self, url):\n        try:\n            page = requests.get(url, timeout=5)\n            p = html.fromstring(page.text.encode('utf-8'), parser=html.HTMLParser(encoding='utf-8'))\n            title = p.find('.//title').text\n        except:\n            title = url\n\n        return title\n\n    @api.one\n    @api.depends('url')\n    def _compute_favicon(self):\n        try:\n            icon = requests.get('http://www.google.com/s2/favicons', params={'domain': self.url}, timeout=5).content\n            icon_base64 = base64.b64encode(icon).replace(b\"\\n\", b\"\").decode('ascii')\n        except:\n            icon_base64 = 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsSAAALEgHS3X78AAACiElEQVQ4EaVTzU8TURCf2tJuS7tQtlRb6UKBIkQwkRRSEzkQgyEc6lkOKgcOph78Y+CgjXjDs2i44FXY9AMTlQRUELZapVlouy3d7kKtb0Zr0MSLTvL2zb75eL838xtTvV6H/xELBptMJojeXLCXyobnyog4YhzXYvmCFi6qVSfaeRdXdrfaU1areV5KykmX06rcvzumjY/1ggkR3Jh+bNf1mr8v1D5bLuvR3qDgFbvbBJYIrE1mCIoCrKxsHuzK+Rzvsi29+6DEbTZz9unijEYI8ObBgXOzlcrx9OAlXyDYKUCzwwrDQx1wVDGg089Dt+gR3mxmhcUnaWeoxwMbm/vzDFzmDEKMMNhquRqduT1KwXiGt0vre6iSeAUHNDE0d26NBtAXY9BACQyjFusKuL2Ry+IPb/Y9ZglwuVscdHaknUChqLF/O4jn3V5dP4mhgRJgwSYm+gV0Oi3XrvYB30yvhGa7BS70eGFHPoTJyQHhMK+F0ZesRVVznvXw5Ixv7/C10moEo6OZXbWvlFAF9FVZDOqEABUMRIkMd8GnLwVWg9/RkJF9sA4oDfYQAuzzjqzwvnaRUFxn/X2ZlmGLXAE7AL52B4xHgqAUqrC1nSNuoJkQtLkdqReszz/9aRvq90NOKdOS1nch8TpL555WDp49f3uAMXhACRjD5j4ykuCtf5PP7Fm1b0DIsl/VHGezzP1KwOiZQobFF9YyjSRYQETRENSlVzI8iK9mWlzckpSSCQHVALmN9Az1euDho9Xo8vKGd2rqooA8yBcrwHgCqYR0kMkWci08t/R+W4ljDCanWTg9TJGwGNaNk3vYZ7VUdeKsYJGFNkfSzjXNrSX20s4/h6kB81/271ghG17l+rPTAAAAAElFTkSuQmCC'\n\n        self.favicon = icon_base64\n\n    @api.multi\n    def action_view_statistics(self):\n        action = self.env['ir.actions.act_window'].for_xml_id('link_tracker', 'action_view_click_statistics')\n        action['domain'] = [('link_id', '=', self.id)]\n        return action\n\n    @api.multi\n    def action_visit_page(self):\n        return {\n            'name': _(\"Visit Webpage\"),\n            'type': 'ir.actions.act_url',\n            'url': self.url,\n            'target': 'new',\n        }\n\n    @api.model\n    def recent_links(self, filter, limit):\n        if filter == 'newest':\n            return self.search_read([], order='create_date DESC', limit=limit)\n        elif filter == 'most-clicked':\n            return self.search_read([('count', '!=', 0)], order='count DESC', limit=limit)\n        elif filter == 'recently-used':\n            return self.search_read([('count', '!=', 0)], order='write_date DESC', limit=limit)\n        else:\n            return {'Error': \"This filter doesn't exist.\"}\n\n    @api.model\n    def create(self, vals):\n        create_vals = vals.copy()\n\n        if 'url' not in create_vals:\n            raise ValueError('URL field required')\n        else:\n            create_vals['url'] = VALIDATE_URL(vals['url'])\n\n        search_domain = []\n        for fname, value in create_vals.items():\n            search_domain.append((fname, '=', value))\n\n        result = self.search(search_domain, limit=1)\n\n        if result:\n            return result\n\n        if not create_vals.get('title'):\n            create_vals['title'] = self._get_title_from_url(create_vals['url'])\n\n        \n        for (key, fname, cook) in self.env['utm.mixin'].tracking_fields():\n            if fname not in create_vals:\n                create_vals[fname] = False\n\n        link = super(link_tracker, self).create(create_vals)\n\n        code = self.env['link.tracker.code'].get_random_code_string()\n        self.env['link.tracker.code'].create({'code': code, 'link_id': link.id})\n\n        return link\n\n    @api.model\n    def get_url_from_code(self, code, context=None):\n        code_rec = self.env['link.tracker.code'].sudo().search([('code', '=', code)])\n\n        if not code_rec:\n            return None\n\n        return code_rec.link_id.redirected_url\n\n    sql_constraints = [\n        ('url_utms_uniq', 'unique (url, campaign_id, medium_id, source_id)', 'The URL and the UTM combination must be unique')\n    ]\n\n\nclass link_tracker_code(models.Model):\n    _name = \"link.tracker.code\"\n\n    code = fields.Char(string='Short URL Code', store=True)\n    link_id = fields.Many2one('link.tracker', 'Link', required=True, ondelete='cascade')\n\n    @api.model\n    def get_random_code_string(self):\n        size = 3\n        while True:\n            code_proposition = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(size))\n\n            if self.search([('code', '=', code_proposition)]):\n                size += 1\n            else:\n                return code_proposition\n\n    _sql_constraints = [\n        ('code', 'unique( code )', 'Code must be unique.')\n    ]\n\n\nclass link_tracker_click(models.Model):\n    _name = \"link.tracker.click\"\n    _rec_name = \"link_id\"\n\n    click_date = fields.Date(string='Create Date')\n    link_id = fields.Many2one('link.tracker', 'Link', required=True, ondelete='cascade')\n    ip = fields.Char(string='Internet Protocol')\n    country_id = fields.Many2one('res.country', 'Country')\n\n    @api.model\n    def add_click(self, code, ip, country_code, stat_id=False):\n        self = self.sudo()\n        code_rec = self.env['link.tracker.code'].search([('code', '=', code)])\n\n        if not code_rec:\n            return None\n\n        again = self.search_count([('link_id', '=', code_rec.link_id.id), ('ip', '=', ip)])\n\n        if not again:\n            self.create(\n                self._get_click_values_from_route(dict(\n                    code=code,\n                    ip=ip,\n                    country_code=country_code,\n                    stat_id=stat_id,\n                )))\n\n    def _get_click_values_from_route(self, route_values):\n        code = self.env['link.tracker.code'].search([('code', '=', route_values['code'])], limit=1)\n        country = self.env['res.country'].search([('code', '=', route_values['country_code'])], limit=1)\n\n        return {\n            'link_id': code.link_id.id,\n            'create_date': datetime.date.today(),\n            'ip': route_values['ip'],\n            'country_id': country.id,\n        }\n", "comments": "   link tracker allow users wrap url short trackable url      link tracker counts clicks tracked link      this module also used mass mailing  link mail mail html body converted     trackable link get click rate mass mailing            coding  utf 8        part odoo  see license file full copyright licensing details     prevent utms set values utm cookies ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nimport base64\nimport datetime\nimport random\nimport re\nimport string\n\nimport requests\nfrom lxml import html\nfrom werkzeug import urls, utils\n\n\nfrom odoo import models, fields, api, _\nfrom odoo.tools import ustr\n\nURL_REGEX = r'(\\bhref=[\\'\"](?!mailto:|tel:|sms:)([^\\'\"]+)[\\'\"])'\n\ndef VALIDATE_URL(url):\n    if urls.url_parse(url).scheme not in ('http', 'https', 'ftp', 'ftps'):\n        return 'http://' + url\n\n    return url\n\n\nclass link_tracker(models.Model):\n    \"\"\"link_tracker allow users to wrap any URL into a short and trackable URL.\n    link_tracker counts clicks on each tracked link.\n    This module is also used by mass_mailing, where each link in mail_mail html_body are converted into\n    a trackable link to get the click-through rate of each mass_mailing.\"\"\"\n\n    _name = \"link.tracker\"\n    _rec_name = \"short_url\"\n\n    _inherit = ['utm.mixin']\n\n    url = fields.Char(string='Target URL', required=True)\n    count = fields.Integer(string='Number of Clicks', compute='_compute_count', store=True)\n    short_url = fields.Char(string='Tracked URL', compute='_compute_short_url')\n    link_click_ids = fields.One2many('link.tracker.click', 'link_id', string='Clicks')\n    title = fields.Char(string='Page Title', store=True)\n    favicon = fields.Char(string='Favicon', compute='_compute_favicon', store=True)\n    link_code_ids = fields.One2many('link.tracker.code', 'link_id', string='Codes')\n    code = fields.Char(string='Short URL code', compute='_compute_code')\n    redirected_url = fields.Char(string='Redirected URL', compute='_compute_redirected_url')\n    short_url_host = fields.Char(string='Host of the short URL', compute='_compute_short_url_host')\n    icon_src = fields.Char(string='Favicon Source', compute='_compute_icon_src')\n\n    @api.model\n    def convert_links(self, html, vals, blacklist=None):\n        for match in re.findall(URL_REGEX, html):\n\n            short_schema = self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/r/'\n\n            href = match[0]\n            long_url = match[1]\n\n            vals['url'] = utils.unescape(long_url)\n\n            if not blacklist or not [s for s in blacklist if s in long_url] and not long_url.startswith(short_schema):\n                link = self.create(vals)\n                shorten_url = self.browse(link.id)[0].short_url\n\n                if shorten_url:\n                    new_href = href.replace(long_url, shorten_url)\n                    html = html.replace(href, new_href)\n\n        return html\n\n    @api.one\n    @api.depends('link_click_ids.link_id')\n    def _compute_count(self):\n        self.count = len(self.link_click_ids)\n\n    @api.one\n    @api.depends('code')\n    def _compute_short_url(self):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        self.short_url = urls.url_join(base_url, '/r/%(code)s' % {'code': self.code})\n\n    @api.one\n    def _compute_short_url_host(self):\n        self.short_url_host = self.env['ir.config_parameter'].sudo().get_param('web.base.url') + '/r/'\n\n    @api.one\n    def _compute_code(self):\n        record = self.env['link.tracker.code'].search([('link_id', '=', self.id)], limit=1, order='id DESC')\n        self.code = record.code\n\n    @api.one\n    @api.depends('favicon')\n    def _compute_icon_src(self):\n        self.icon_src = 'data:image/png;base64,' + self.favicon\n\n    @api.one\n    @api.depends('url')\n    def _compute_redirected_url(self):\n        parsed = urls.url_parse(self.url)\n\n        utms = {}\n        for key, field, cook in self.env['utm.mixin'].tracking_fields():\n            attr = getattr(self, field).name\n            if attr:\n                utms[key] = attr\n        utms.update(parsed.decode_query())\n\n        self.redirected_url = parsed.replace(query=urls.url_encode(utms)).to_url()\n\n    @api.model\n    @api.depends('url')\n    def _get_title_from_url(self, url):\n        try:\n            page = requests.get(url, timeout=5)\n            p = html.fromstring(page.text.encode('utf-8'), parser=html.HTMLParser(encoding='utf-8'))\n            title = p.find('.//title').text\n        except:\n            title = url\n\n        return title\n\n    @api.one\n    @api.depends('url')\n    def _compute_favicon(self):\n        try:\n            icon = requests.get('http://www.google.com/s2/favicons', params={'domain': self.url}, timeout=5).content\n            icon_base64 = base64.b64encode(icon).replace(b\"\\n\", b\"\").decode('ascii')\n        except:\n            icon_base64 = 'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAsSAAALEgHS3X78AAACiElEQVQ4EaVTzU8TURCf2tJuS7tQtlRb6UKBIkQwkRRSEzkQgyEc6lkOKgcOph78Y+CgjXjDs2i44FXY9AMTlQRUELZapVlouy3d7kKtb0Zr0MSLTvL2zb75eL838xtTvV6H/xELBptMJojeXLCXyobnyog4YhzXYvmCFi6qVSfaeRdXdrfaU1areV5KykmX06rcvzumjY/1ggkR3Jh+bNf1mr8v1D5bLuvR3qDgFbvbBJYIrE1mCIoCrKxsHuzK+Rzvsi29+6DEbTZz9unijEYI8ObBgXOzlcrx9OAlXyDYKUCzwwrDQx1wVDGg089Dt+gR3mxmhcUnaWeoxwMbm/vzDFzmDEKMMNhquRqduT1KwXiGt0vre6iSeAUHNDE0d26NBtAXY9BACQyjFusKuL2Ry+IPb/Y9ZglwuVscdHaknUChqLF/O4jn3V5dP4mhgRJgwSYm+gV0Oi3XrvYB30yvhGa7BS70eGFHPoTJyQHhMK+F0ZesRVVznvXw5Ixv7/C10moEo6OZXbWvlFAF9FVZDOqEABUMRIkMd8GnLwVWg9/RkJF9sA4oDfYQAuzzjqzwvnaRUFxn/X2ZlmGLXAE7AL52B4xHgqAUqrC1nSNuoJkQtLkdqReszz/9aRvq90NOKdOS1nch8TpL555WDp49f3uAMXhACRjD5j4ykuCtf5PP7Fm1b0DIsl/VHGezzP1KwOiZQobFF9YyjSRYQETRENSlVzI8iK9mWlzckpSSCQHVALmN9Az1euDho9Xo8vKGd2rqooA8yBcrwHgCqYR0kMkWci08t/R+W4ljDCanWTg9TJGwGNaNk3vYZ7VUdeKsYJGFNkfSzjXNrSX20s4/h6kB81/271ghG17l+rPTAAAAAElFTkSuQmCC'\n\n        self.favicon = icon_base64\n\n    @api.multi\n    def action_view_statistics(self):\n        action = self.env['ir.actions.act_window'].for_xml_id('link_tracker', 'action_view_click_statistics')\n        action['domain'] = [('link_id', '=', self.id)]\n        return action\n\n    @api.multi\n    def action_visit_page(self):\n        return {\n            'name': _(\"Visit Webpage\"),\n            'type': 'ir.actions.act_url',\n            'url': self.url,\n            'target': 'new',\n        }\n\n    @api.model\n    def recent_links(self, filter, limit):\n        if filter == 'newest':\n            return self.search_read([], order='create_date DESC', limit=limit)\n        elif filter == 'most-clicked':\n            return self.search_read([('count', '!=', 0)], order='count DESC', limit=limit)\n        elif filter == 'recently-used':\n            return self.search_read([('count', '!=', 0)], order='write_date DESC', limit=limit)\n        else:\n            return {'Error': \"This filter doesn't exist.\"}\n\n    @api.model\n    def create(self, vals):\n        create_vals = vals.copy()\n\n        if 'url' not in create_vals:\n            raise ValueError('URL field required')\n        else:\n            create_vals['url'] = VALIDATE_URL(vals['url'])\n\n        search_domain = []\n        for fname, value in create_vals.items():\n            search_domain.append((fname, '=', value))\n\n        result = self.search(search_domain, limit=1)\n\n        if result:\n            return result\n\n        if not create_vals.get('title'):\n            create_vals['title'] = self._get_title_from_url(create_vals['url'])\n\n        # Prevent the UTMs to be set by the values of UTM cookies\n        for (key, fname, cook) in self.env['utm.mixin'].tracking_fields():\n            if fname not in create_vals:\n                create_vals[fname] = False\n\n        link = super(link_tracker, self).create(create_vals)\n\n        code = self.env['link.tracker.code'].get_random_code_string()\n        self.env['link.tracker.code'].create({'code': code, 'link_id': link.id})\n\n        return link\n\n    @api.model\n    def get_url_from_code(self, code, context=None):\n        code_rec = self.env['link.tracker.code'].sudo().search([('code', '=', code)])\n\n        if not code_rec:\n            return None\n\n        return code_rec.link_id.redirected_url\n\n    sql_constraints = [\n        ('url_utms_uniq', 'unique (url, campaign_id, medium_id, source_id)', 'The URL and the UTM combination must be unique')\n    ]\n\n\nclass link_tracker_code(models.Model):\n    _name = \"link.tracker.code\"\n\n    code = fields.Char(string='Short URL Code', store=True)\n    link_id = fields.Many2one('link.tracker', 'Link', required=True, ondelete='cascade')\n\n    @api.model\n    def get_random_code_string(self):\n        size = 3\n        while True:\n            code_proposition = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(size))\n\n            if self.search([('code', '=', code_proposition)]):\n                size += 1\n            else:\n                return code_proposition\n\n    _sql_constraints = [\n        ('code', 'unique( code )', 'Code must be unique.')\n    ]\n\n\nclass link_tracker_click(models.Model):\n    _name = \"link.tracker.click\"\n    _rec_name = \"link_id\"\n\n    click_date = fields.Date(string='Create Date')\n    link_id = fields.Many2one('link.tracker', 'Link', required=True, ondelete='cascade')\n    ip = fields.Char(string='Internet Protocol')\n    country_id = fields.Many2one('res.country', 'Country')\n\n    @api.model\n    def add_click(self, code, ip, country_code, stat_id=False):\n        self = self.sudo()\n        code_rec = self.env['link.tracker.code'].search([('code', '=', code)])\n\n        if not code_rec:\n            return None\n\n        again = self.search_count([('link_id', '=', code_rec.link_id.id), ('ip', '=', ip)])\n\n        if not again:\n            self.create(\n                self._get_click_values_from_route(dict(\n                    code=code,\n                    ip=ip,\n                    country_code=country_code,\n                    stat_id=stat_id,\n                )))\n\n    def _get_click_values_from_route(self, route_values):\n        code = self.env['link.tracker.code'].search([('code', '=', route_values['code'])], limit=1)\n        country = self.env['res.country'].search([('code', '=', route_values['country_code'])], limit=1)\n\n        return {\n            'link_id': code.link_id.id,\n            'create_date': datetime.date.today(),\n            'ip': route_values['ip'],\n            'country_id': country.id,\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "link_tracker.py", "id": "298c52f211c1f48eca4e288e3cc6c382", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/link_tracker/models/link_tracker.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}