{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"Tests for get_dataset_colormap.py.\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom deeplab.utils import get_dataset_colormap\n\n\nclass VisualizationUtilTest(tf.test.TestCase):\n\n  def testBitGet(self):\n    \"\"\"Test that if the returned bit value is correct.\"\"\"\n    self.assertEqual(1, get_dataset_colormap.bit_get(9, 0))\n    self.assertEqual(0, get_dataset_colormap.bit_get(9, 1))\n    self.assertEqual(0, get_dataset_colormap.bit_get(9, 2))\n    self.assertEqual(1, get_dataset_colormap.bit_get(9, 3))\n\n  def testPASCALLabelColorMapValue(self):\n    \"\"\"Test the getd color map value.\"\"\"\n    colormap = get_dataset_colormap.create_pascal_label_colormap()\n\n     Only test a few sampled entries in the color map.\n    self.assertTrue(np.array_equal([128., 0., 128.], colormap[5, :]))\n    self.assertTrue(np.array_equal([128., 192., 128.], colormap[23, :]))\n    self.assertTrue(np.array_equal([128., 0., 192.], colormap[37, :]))\n    self.assertTrue(np.array_equal([224., 192., 192.], colormap[127, :]))\n    self.assertTrue(np.array_equal([192., 160., 192.], colormap[175, :]))\n\n  def testLabelToPASCALColorImage(self):\n    \"\"\"Test the value of the converted label value.\"\"\"\n    label = np.array([[0, 16, 16], [52, 7, 52]])\n    expected_result = np.array([\n        [[0, 0, 0], [0, 64, 0], [0, 64, 0]],\n        [[0, 64, 192], [128, 128, 128], [0, 64, 192]]\n    ])\n    colored_label = get_dataset_colormap.label_to_color_image(\n        label, get_dataset_colormap.get_pascal_name())\n    self.assertTrue(np.array_equal(expected_result, colored_label))\n\n  def testUnExpectedLabelValueForLabelToPASCALColorImage(self):\n    \"\"\"Raise ValueError when input value exceeds range.\"\"\"\n    label = np.array([[120], [300]])\n    with self.assertRaises(ValueError):\n      get_dataset_colormap.label_to_color_image(\n          label, get_dataset_colormap.get_pascal_name())\n\n  def testUnExpectedLabelDimensionForLabelToPASCALColorImage(self):\n    \"\"\"Raise ValueError if input dimension is not correct.\"\"\"\n    label = np.array([120])\n    with self.assertRaises(ValueError):\n      get_dataset_colormap.label_to_color_image(\n          label, get_dataset_colormap.get_pascal_name())\n\n  def testGetColormapForUnsupportedDataset(self):\n    with self.assertRaises(ValueError):\n      get_dataset_colormap.create_label_colormap('unsupported_dataset')\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   tests get dataset colormap py      import numpy np import tensorflow tf  deeplab utils import get dataset colormap   class visualizationutiltest(tf test testcase)     def testbitget(self)         test returned bit value correct         self assertequal(1  get dataset colormap bit get(9  0))     self assertequal(0  get dataset colormap bit get(9  1))     self assertequal(0  get dataset colormap bit get(9  2))     self assertequal(1  get dataset colormap bit get(9  3))    def testpascallabelcolormapvalue(self)         test getd color map value         colormap   get dataset colormap create pascal label colormap()        only test sampled entries color map      self asserttrue(np array equal( 128   0   128    colormap 5    ))     self asserttrue(np array equal( 128   192   128    colormap 23    ))     self asserttrue(np array equal( 128   0   192    colormap 37    ))     self asserttrue(np array equal( 224   192   192    colormap 127    ))     self asserttrue(np array equal( 192   160   192    colormap 175    ))    def testlabeltopascalcolorimage(self)         test value converted label value         label   np array(  0  16  16    52  7  52  )     expected result   np array(            0  0  0    0  64  0    0  64  0              0  64  192    128  128  128    0  64  192        )     colored label   get dataset colormap label color image(         label  get dataset colormap get pascal name())     self asserttrue(np array equal(expected result  colored label))    def testunexpectedlabelvalueforlabeltopascalcolorimage(self)         raise valueerror input value exceeds range         label   np array(  120    300  )     self assertraises(valueerror)        get dataset colormap label color image(           label  get dataset colormap get pascal name())    def testunexpectedlabeldimensionforlabeltopascalcolorimage(self)         raise valueerror input dimension correct        copyright 2018 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       only test sampled entries color map  ", "content": "# Copyright 2018 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Tests for get_dataset_colormap.py.\"\"\"\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom deeplab.utils import get_dataset_colormap\n\n\nclass VisualizationUtilTest(tf.test.TestCase):\n\n  def testBitGet(self):\n    \"\"\"Test that if the returned bit value is correct.\"\"\"\n    self.assertEqual(1, get_dataset_colormap.bit_get(9, 0))\n    self.assertEqual(0, get_dataset_colormap.bit_get(9, 1))\n    self.assertEqual(0, get_dataset_colormap.bit_get(9, 2))\n    self.assertEqual(1, get_dataset_colormap.bit_get(9, 3))\n\n  def testPASCALLabelColorMapValue(self):\n    \"\"\"Test the getd color map value.\"\"\"\n    colormap = get_dataset_colormap.create_pascal_label_colormap()\n\n    # Only test a few sampled entries in the color map.\n    self.assertTrue(np.array_equal([128., 0., 128.], colormap[5, :]))\n    self.assertTrue(np.array_equal([128., 192., 128.], colormap[23, :]))\n    self.assertTrue(np.array_equal([128., 0., 192.], colormap[37, :]))\n    self.assertTrue(np.array_equal([224., 192., 192.], colormap[127, :]))\n    self.assertTrue(np.array_equal([192., 160., 192.], colormap[175, :]))\n\n  def testLabelToPASCALColorImage(self):\n    \"\"\"Test the value of the converted label value.\"\"\"\n    label = np.array([[0, 16, 16], [52, 7, 52]])\n    expected_result = np.array([\n        [[0, 0, 0], [0, 64, 0], [0, 64, 0]],\n        [[0, 64, 192], [128, 128, 128], [0, 64, 192]]\n    ])\n    colored_label = get_dataset_colormap.label_to_color_image(\n        label, get_dataset_colormap.get_pascal_name())\n    self.assertTrue(np.array_equal(expected_result, colored_label))\n\n  def testUnExpectedLabelValueForLabelToPASCALColorImage(self):\n    \"\"\"Raise ValueError when input value exceeds range.\"\"\"\n    label = np.array([[120], [300]])\n    with self.assertRaises(ValueError):\n      get_dataset_colormap.label_to_color_image(\n          label, get_dataset_colormap.get_pascal_name())\n\n  def testUnExpectedLabelDimensionForLabelToPASCALColorImage(self):\n    \"\"\"Raise ValueError if input dimension is not correct.\"\"\"\n    label = np.array([120])\n    with self.assertRaises(ValueError):\n      get_dataset_colormap.label_to_color_image(\n          label, get_dataset_colormap.get_pascal_name())\n\n  def testGetColormapForUnsupportedDataset(self):\n    with self.assertRaises(ValueError):\n      get_dataset_colormap.create_label_colormap('unsupported_dataset')\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "get_dataset_colormap_test.py", "id": "7c05b03f50d894294be159eae84b455d", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/deeplab/utils/get_dataset_colormap_test.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}