{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_interface_policy_fc\nshort_description: Manage Fibre Channel interface policies (fc:IfPol)\ndescription:\n- Manage ACI Fiber Channel interface policies on Cisco ACI fabrics.\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.4'\nnotes:\n- More information about the internal APIC class B(fc:IfPol) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\noptions:\n  fc_policy:\n    description:\n    - The name of the Fiber Channel interface policy.\n    required: yes\n    aliases: [ name ]\n  description:\n    description:\n    - The description of the Fiber Channel interface policy.\n    aliases: [ descr ]\n  port_mode:\n    description:\n    - Port Mode\n    choices: [ f, np ]\n    default: f\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- aci_interface_policy_fc:\n    host: '{{ hostname }}'\n    username: '{{ username }}'\n    password: '{{ password }}'\n    fc_policy: '{{ fc_policy }}'\n    port_mode: '{{ port_mode }}'\n    description: '{{ description }}'\n    state: present\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        fc_policy=dict(type='str', required=False, aliases=['name']),  \n        description=dict(type='str', aliases=['descr']),\n        port_mode=dict(type='str', choices=['f', 'np']),  \n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  \n        protocol=dict(type='str', removed_in_version='2.6'),  \n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['fc_policy']],\n            ['state', 'present', ['fc_policy']],\n        ],\n    )\n\n    fc_policy = module.params['fc_policy']\n    port_mode = module.params['port_mode']\n    description = module.params['description']\n    state = module.params['state']\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fcIfPol',\n            aci_rn='infra/fcIfPol-{0}'.format(fc_policy),\n            filter_target='eq(fcIfPol.name, \"{0}\")'.format(fc_policy),\n            module_object=fc_policy,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='fcIfPol',\n            class_config=dict(\n                name=fc_policy,\n                descr=description,\n                portMode=port_mode,\n            ),\n        )\n\n        aci.get_diff(aci_class='fcIfPol')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci interface policy fc short description  manage fibre channel interface policies (fc ifpol) description    manage aci fiber channel interface policies cisco aci fabrics  author    dag wieers ( dagwieers) version added   2 4  notes    more information internal apic class b(fc ifpol)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  options    fc policy      description        the name fiber channel interface policy      required  yes     aliases    name     description      description        the description fiber channel interface policy      aliases    descr     port mode      description        port mode     choices    f  np       default  f   state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present extends documentation fragment  aci      examples   r      aci interface policy fc      host      hostname         username      username         password      password         fc policy      fc policy         port mode      port mode         description      description         state  present      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    no default provided purpose    deprecated starting v2 6    deprecated v2 6 ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_interface_policy_fc\nshort_description: Manage Fibre Channel interface policies (fc:IfPol)\ndescription:\n- Manage ACI Fiber Channel interface policies on Cisco ACI fabrics.\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.4'\nnotes:\n- More information about the internal APIC class B(fc:IfPol) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\noptions:\n  fc_policy:\n    description:\n    - The name of the Fiber Channel interface policy.\n    required: yes\n    aliases: [ name ]\n  description:\n    description:\n    - The description of the Fiber Channel interface policy.\n    aliases: [ descr ]\n  port_mode:\n    description:\n    - Port Mode\n    choices: [ f, np ]\n    default: f\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- aci_interface_policy_fc:\n    host: '{{ hostname }}'\n    username: '{{ username }}'\n    password: '{{ password }}'\n    fc_policy: '{{ fc_policy }}'\n    port_mode: '{{ port_mode }}'\n    description: '{{ description }}'\n    state: present\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        fc_policy=dict(type='str', required=False, aliases=['name']),  # Not required for querying all objects\n        description=dict(type='str', aliases=['descr']),\n        port_mode=dict(type='str', choices=['f', 'np']),  # No default provided on purpose\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        method=dict(type='str', choices=['delete', 'get', 'post'], aliases=['action'], removed_in_version='2.6'),  # Deprecated starting from v2.6\n        protocol=dict(type='str', removed_in_version='2.6'),  # Deprecated in v2.6\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['state', 'absent', ['fc_policy']],\n            ['state', 'present', ['fc_policy']],\n        ],\n    )\n\n    fc_policy = module.params['fc_policy']\n    port_mode = module.params['port_mode']\n    description = module.params['description']\n    state = module.params['state']\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class='fcIfPol',\n            aci_rn='infra/fcIfPol-{0}'.format(fc_policy),\n            filter_target='eq(fcIfPol.name, \"{0}\")'.format(fc_policy),\n            module_object=fc_policy,\n        ),\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class='fcIfPol',\n            class_config=dict(\n                name=fc_policy,\n                descr=description,\n                portMode=port_mode,\n            ),\n        )\n\n        aci.get_diff(aci_class='fcIfPol')\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_interface_policy_fc.py", "id": "8bf8a168f3539a9587122055f2dd2cc0", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_interface_policy_fc.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}