{"author": "ansible", "code": "\n\"\"\" PN CLI vrouter-loopback-interface-add/remove \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vrouterlbif\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove vrouter-loopback-interface.\ndescription:\n  - Execute vrouter-loopback-interface-add, vrouter-loopback-interface-remove\n    commands.\n  - Each fabric, cluster, standalone switch, or virtual network (VNET) can\n    provide its tenants with a virtual router (vRouter) service that forwards\n    traffic between networks and implements Layer 3 protocols.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to add vrouter loopback\n        interface and 'absent' to remove vrouter loopback interface.\n    required: True\n    choices: ['present', 'absent']\n  pn_vrouter_name:\n    description:\n      - Specify the name of the vRouter.\n    required: True\n  pn_index:\n    description:\n      - Specify the interface index from 1 to 255.\n  pn_interface_ip:\n    description:\n      - Specify the IP address.\n    required: True\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: add vrouter-loopback-interface\n  pn_vrouterlbif:\n    state: 'present'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: '104.104.104.1'\n\n- name: remove vrouter-loopback-interface\n  pn_vrouterlbif:\n    state: 'absent'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: '104.104.104.1'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vrouterlb command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the vrouterlb command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nLB_INTERFACE_EXISTS = None\n Index range\nMIN_INDEX = 1\nMAX_INDEX = 255\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks if vRouter exists on the target node.\n    This method also checks for idempotency using the\n    vrouter-loopback-interface-show command.\n    If the given vRouter exists, return VROUTER_EXISTS as True else False.\n    If a loopback interface with the given ip exists on the given vRouter,\n    return LB_INTERFACE_EXISTS as True else False.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, LB_INTERFACE_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    interface_ip = module.params['pn_interface_ip']\n\n     Global flags\n    global VROUTER_EXISTS, LB_INTERFACE_EXISTS\n\n     Check for vRouter\n    check_vrouter = cli + ' vrouter-show format name no-show-headers '\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n    out = out.split()\n\n    if vrouter_name in out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n     Check for loopback interface\n    show = (cli + ' vrouter-loopback-interface-show vrouter-name %s format ip '\n            'no-show-headers' % vrouter_name)\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if interface_ip in out:\n        LB_INTERFACE_EXISTS = True\n    else:\n        LB_INTERFACE_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-loopback-interface-add'\n    if state == 'absent':\n        command = 'vrouter-loopback-interface-remove'\n    return command\n\n\ndef main():\n    \"\"\" This portion is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_interface_ip=dict(type='str'),\n            pn_index=dict(type='int')\n        ),\n        required_if=(\n            [\"state\", \"present\",\n             [\"pn_vrouter_name\", \"pn_interface_ip\"]],\n            [\"state\", \"absent\",\n             [\"pn_vrouter_name\", \"pn_interface_ip\"]]\n        )\n    )\n\n     Accessing the arguments\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    interface_ip = module.params['pn_interface_ip']\n    index = module.params['pn_index']\n\n    command = get_command_from_state(state)\n\n     Building the CLI command string\n    cli = pn_cli(module)\n\n    if index:\n        if not MIN_INDEX <= index <= MAX_INDEX:\n            module.exit_json(\n                msg=\"Index must be between 1 and 255\",\n                changed=False\n            )\n        index = str(index)\n\n    if command == 'vrouter-loopback-interface-remove':\n        check_cli(module, cli)\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if LB_INTERFACE_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg=('Loopback interface with IP %s does not exist on %s'\n                     % (interface_ip, vrouter_name))\n            )\n        if not index:\n             To remove loopback interface, we need the index.\n             If index is not specified, get the Loopback interface index\n             using the given interface ip.\n            get_index = cli\n            get_index += (' vrouter-loopback-interface-show vrouter-name %s ip '\n                          '%s ' % (vrouter_name, interface_ip))\n            get_index += 'format index no-show-headers'\n\n            get_index = shlex.split(get_index)\n            out = module.run_command(get_index)[1]\n            index = out.split()[1]\n\n        cli += ' %s vrouter-name %s index %s' % (command, vrouter_name, index)\n\n    if command == 'vrouter-loopback-interface-add':\n        check_cli(module, cli)\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg=('vRouter %s does not exist' % vrouter_name)\n            )\n        if LB_INTERFACE_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg=('Loopback interface with IP %s already exists on %s'\n                     % (interface_ip, vrouter_name))\n            )\n        cli += (' %s vrouter-name %s ip %s'\n                % (command, vrouter_name, interface_ip))\n        if index:\n            cli += ' index %s ' % index\n\n    run_cli(module, cli)\n\n Ansible boiler-plate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli vrouter loopback interface add remove          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn vrouterlbif author   pluribus networks ( amitsi)  version added   2 2  short description  cli command add remove vrouter loopback interface  description      execute vrouter loopback interface add  vrouter loopback interface remove     commands      each fabric  cluster  standalone switch  virtual network (vnet)     provide tenants virtual router (vrouter) service forwards     traffic networks implements layer 3 protocols  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch(es) run cli      required  false   state      description          state action perform  use  present  add vrouter loopback         interface  absent  remove vrouter loopback interface      required  true     choices    present    absent     pn vrouter name      description          specify name vrouter      required  true   pn index      description          specify interface index 1 255    pn interface ip      description          specify ip address      required  true      examples         name  add vrouter loopback interface   pn vrouterlbif      state   present      pn vrouter name   ansible vrouter      pn interface ip   104 104 104 1     name  remove vrouter loopback interface   pn vrouterlbif      state   absent      pn vrouter name   ansible vrouter      pn interface ip   104 104 104 1       return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses vrouterlb command    returned  always   type  list stderr    description  the set error responses vrouterlb command    returned  error   type  list changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex  vrouter exists   none lb interface exists   none   index range min index   1 max index   255   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch     local           cli      switch local       else          cli      switch     cliswitch     return cli   def check cli(module  cli)              this method checks vrouter exists target node      this method also checks idempotency using     vrouter loopback interface show command      if given vrouter exists  return vrouter exists true else false      if loopback interface given ip exists given vrouter      return lb interface exists true else false        param module  the ansible module fetch input parameters      param cli  the cli string      return global booleans  vrouter exists  lb interface exists             vrouter name   module params  pn vrouter name       interface ip   module params  pn interface ip          global flags     global vrouter exists  lb interface exists        check vrouter     check vrouter   cli     vrouter show format name show headers       check vrouter   shlex split(check vrouter)       module run command(check vrouter) 1        split()      vrouter name          vrouter exists   true     else          vrouter exists   false        check loopback interface     show   (cli     vrouter loopback interface show vrouter name  format ip                show headers    vrouter name)     show   shlex split(show)       module run command(show) 1        split()      interface ip          lb interface exists   true     else          lb interface exists   false   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       state   module params  state       command   get command state(state)      cmd   shlex split(cli)          contains output        err  contains error messages     result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format     result    0          module exit json(             command print cli              stderr err strip()              msg   operation failed    command              changed false         )               module exit json(             command print cli              stdout strip()              msg   operation completed    command              changed true         )      else          module exit json(             command print cli              msg   operation completed    command              changed true         )   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    vrouter loopback interface add      state     absent           command    vrouter loopback interface remove      return command   def main()          this portion arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          index range    global flags    check vrouter    check loopback interface      contains output     err  contains error messages    response json format    accessing arguments    building cli command string    to remove loopback interface  need index     if index specified  get loopback interface index    using given interface ip     ansible boiler plate ", "content": "#!/usr/bin/python\n\"\"\" PN CLI vrouter-loopback-interface-add/remove \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vrouterlbif\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to add/remove vrouter-loopback-interface.\ndescription:\n  - Execute vrouter-loopback-interface-add, vrouter-loopback-interface-remove\n    commands.\n  - Each fabric, cluster, standalone switch, or virtual network (VNET) can\n    provide its tenants with a virtual router (vRouter) service that forwards\n    traffic between networks and implements Layer 3 protocols.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the cli on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to add vrouter loopback\n        interface and 'absent' to remove vrouter loopback interface.\n    required: True\n    choices: ['present', 'absent']\n  pn_vrouter_name:\n    description:\n      - Specify the name of the vRouter.\n    required: True\n  pn_index:\n    description:\n      - Specify the interface index from 1 to 255.\n  pn_interface_ip:\n    description:\n      - Specify the IP address.\n    required: True\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: add vrouter-loopback-interface\n  pn_vrouterlbif:\n    state: 'present'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: '104.104.104.1'\n\n- name: remove vrouter-loopback-interface\n  pn_vrouterlbif:\n    state: 'absent'\n    pn_vrouter_name: 'ansible-vrouter'\n    pn_interface_ip: '104.104.104.1'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vrouterlb command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the vrouterlb command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nLB_INTERFACE_EXISTS = None\n# Index range\nMIN_INDEX = 1\nMAX_INDEX = 255\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks if vRouter exists on the target node.\n    This method also checks for idempotency using the\n    vrouter-loopback-interface-show command.\n    If the given vRouter exists, return VROUTER_EXISTS as True else False.\n    If a loopback interface with the given ip exists on the given vRouter,\n    return LB_INTERFACE_EXISTS as True else False.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, LB_INTERFACE_EXISTS\n    \"\"\"\n    vrouter_name = module.params['pn_vrouter_name']\n    interface_ip = module.params['pn_interface_ip']\n\n    # Global flags\n    global VROUTER_EXISTS, LB_INTERFACE_EXISTS\n\n    # Check for vRouter\n    check_vrouter = cli + ' vrouter-show format name no-show-headers '\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n    out = out.split()\n\n    if vrouter_name in out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n    # Check for loopback interface\n    show = (cli + ' vrouter-loopback-interface-show vrouter-name %s format ip '\n            'no-show-headers' % vrouter_name)\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if interface_ip in out:\n        LB_INTERFACE_EXISTS = True\n    else:\n        LB_INTERFACE_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-loopback-interface-add'\n    if state == 'absent':\n        command = 'vrouter-loopback-interface-remove'\n    return command\n\n\ndef main():\n    \"\"\" This portion is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent']),\n            pn_vrouter_name=dict(required=True, type='str'),\n            pn_interface_ip=dict(type='str'),\n            pn_index=dict(type='int')\n        ),\n        required_if=(\n            [\"state\", \"present\",\n             [\"pn_vrouter_name\", \"pn_interface_ip\"]],\n            [\"state\", \"absent\",\n             [\"pn_vrouter_name\", \"pn_interface_ip\"]]\n        )\n    )\n\n    # Accessing the arguments\n    state = module.params['state']\n    vrouter_name = module.params['pn_vrouter_name']\n    interface_ip = module.params['pn_interface_ip']\n    index = module.params['pn_index']\n\n    command = get_command_from_state(state)\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n\n    if index:\n        if not MIN_INDEX <= index <= MAX_INDEX:\n            module.exit_json(\n                msg=\"Index must be between 1 and 255\",\n                changed=False\n            )\n        index = str(index)\n\n    if command == 'vrouter-loopback-interface-remove':\n        check_cli(module, cli)\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter %s does not exist' % vrouter_name\n            )\n        if LB_INTERFACE_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg=('Loopback interface with IP %s does not exist on %s'\n                     % (interface_ip, vrouter_name))\n            )\n        if not index:\n            # To remove loopback interface, we need the index.\n            # If index is not specified, get the Loopback interface index\n            # using the given interface ip.\n            get_index = cli\n            get_index += (' vrouter-loopback-interface-show vrouter-name %s ip '\n                          '%s ' % (vrouter_name, interface_ip))\n            get_index += 'format index no-show-headers'\n\n            get_index = shlex.split(get_index)\n            out = module.run_command(get_index)[1]\n            index = out.split()[1]\n\n        cli += ' %s vrouter-name %s index %s' % (command, vrouter_name, index)\n\n    if command == 'vrouter-loopback-interface-add':\n        check_cli(module, cli)\n        if VROUTER_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg=('vRouter %s does not exist' % vrouter_name)\n            )\n        if LB_INTERFACE_EXISTS is True:\n            module.exit_json(\n                skipped=True,\n                msg=('Loopback interface with IP %s already exists on %s'\n                     % (interface_ip, vrouter_name))\n            )\n        cli += (' %s vrouter-name %s ip %s'\n                % (command, vrouter_name, interface_ip))\n        if index:\n            cli += ' index %s ' % index\n\n    run_cli(module, cli)\n\n# Ansible boiler-plate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_vrouterlbif.py", "id": "2c4602f8e15604d0d5cfcbde87397228", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_vrouterlbif.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}