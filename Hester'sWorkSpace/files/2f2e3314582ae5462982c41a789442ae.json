{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    sanitized_Request,\n    str_to_int,\n    unescapeHTML,\n    unified_strdate,\n)\nfrom ..aes import aes_decrypt_text\n\n\nclass YouPornIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?youporn\\.com/watch/(?P<id>\\d+)/(?P<display_id>[^/?\n    _TESTS = [{\n        'url': 'http://www.youporn.com/watch/505835/sex-ed-is-it-safe-to-masturbate-daily/',\n        'md5': '3744d24c50438cf5b6f6d59feb5055c2',\n        'info_dict': {\n            'id': '505835',\n            'display_id': 'sex-ed-is-it-safe-to-masturbate-daily',\n            'ext': 'mp4',\n            'title': 'Sex Ed: Is It Safe To Masturbate Daily?',\n            'description': 'Love & Sex Answers: http://bit.ly/DanAndJenn -- Is It Unhealthy To Masturbate Daily?',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Ask Dan And Jennifer',\n            'upload_date': '20101217',\n            'average_rating': int,\n            'view_count': int,\n            'comment_count': int,\n            'categories': list,\n            'tags': list,\n            'age_limit': 18,\n        },\n    }, {\n        \n        'url': 'http://www.youporn.com/watch/561726/big-tits-awesome-brunette-on-amazing-webcam-show/?from=related3&al=2&from_id=561726&pos=4',\n        'info_dict': {\n            'id': '561726',\n            'display_id': 'big-tits-awesome-brunette-on-amazing-webcam-show',\n            'ext': 'mp4',\n            'title': 'Big Tits Awesome Brunette On amazing webcam show',\n            'description': 'http://sweetlivegirls.com Big Tits Awesome Brunette On amazing webcam show.mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Unknown',\n            'upload_date': '20110418',\n            'average_rating': int,\n            'view_count': int,\n            'comment_count': int,\n            'categories': list,\n            'tags': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        request = sanitized_Request(url)\n        request.add_header('Cookie', 'age_verified=1')\n        webpage = self._download_webpage(request, display_id)\n\n        title = self._search_regex(\n            [r'(?:video_titles|videoTitle)\\s*[:=]\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',\n             r'<h1[^>]+class=[\"\\']heading\\d?[\"\\'][^>]*>(?P<title>[^<]+)<'],\n            webpage, 'title', group='title',\n            default=None) or self._og_search_title(\n            webpage, default=None) or self._html_search_meta(\n            'title', webpage, fatal=True)\n\n        links = []\n\n        \n        definitions = self._parse_json(\n            self._search_regex(\n                r'mediaDefinition\\s*=\\s*(\\[.+?\\]);', webpage,\n                'media definitions', default='[]'),\n            video_id, fatal=False)\n        if definitions:\n            for definition in definitions:\n                if not isinstance(definition, dict):\n                    continue\n                video_url = definition.get('videoUrl')\n                if isinstance(video_url, compat_str) and video_url:\n                    links.append(video_url)\n\n        \n        for _, link in re.findall(r'<a[^>]+href=([\"\\'])(http.+?)\\1[^>]+title=[\"\\']Download [Vv]ideo', webpage):\n            links.append(link)\n\n        \n        sources = self._search_regex(\n            r'(?s)sources\\s*:\\s*({.+?})', webpage, 'sources', default=None)\n        if sources:\n            for _, link in re.findall(r'[^:]+\\s*:\\s*([\"\\'])(http.+?)\\1', sources):\n                links.append(link)\n\n        \n        for _, link in re.findall(\n                r'(?:videoSrc|videoIpadUrl|html5PlayerSrc)\\s*[:=]\\s*([\"\\'])(http.+?)\\1', webpage):\n            links.append(link)\n\n        \n        for _, encrypted_link in re.findall(\n                r'encryptedQuality\\d{3,4}URL\\s*=\\s*([\"\\'])([\\da-zA-Z+/=]+)\\1', webpage):\n            links.append(aes_decrypt_text(encrypted_link, title, 32).decode('utf-8'))\n\n        formats = []\n        for video_url in set(unescapeHTML(link) for link in links):\n            f = {\n                'url': video_url,\n            }\n            \n            \n            \n            \n            mobj = re.search(r'(?P<height>\\d{3,4})[pP]_(?P<bitrate>\\d+)[kK]_\\d+/', video_url)\n            if mobj:\n                height = int(mobj.group('height'))\n                bitrate = int(mobj.group('bitrate'))\n                f.update({\n                    'format_id': '%dp-%dk' % (height, bitrate),\n                    'height': height,\n                    'tbr': bitrate,\n                })\n            formats.append(f)\n        self._sort_formats(formats)\n\n        description = self._og_search_description(webpage, default=None)\n        thumbnail = self._search_regex(\n            r'(?:imageurl\\s*=|poster\\s*:)\\s*([\"\\'])(?P<thumbnail>.+?)\\1',\n            webpage, 'thumbnail', fatal=False, group='thumbnail')\n\n        uploader = self._html_search_regex(\n            r'(?s)<div[^>]+class=[\"\\']submitByLink[\"\\'][^>]*>(.+?)</div>',\n            webpage, 'uploader', fatal=False)\n        upload_date = unified_strdate(self._html_search_regex(\n            [r'Date\\s+[Aa]dded:\\s*<span>([^<]+)',\n             r'(?s)<div[^>]+class=[\"\\']videoInfo(?:Date|Time)[\"\\'][^>]*>(.+?)</div>'],\n            webpage, 'upload date', fatal=False))\n\n        age_limit = self._rta_search(webpage)\n\n        average_rating = int_or_none(self._search_regex(\n            r'<div[^>]+class=[\"\\']videoRatingPercentage[\"\\'][^>]*>(\\d+)%</div>',\n            webpage, 'average rating', fatal=False))\n\n        view_count = str_to_int(self._search_regex(\n            r'(?s)<div[^>]+class=([\"\\']).*?\\bvideoInfoViews\\b.*?\\1[^>]*>.*?(?P<count>[\\d,.]+)<',\n            webpage, 'view count', fatal=False, group='count'))\n        comment_count = str_to_int(self._search_regex(\n            r'>All [Cc]omments? \\(([\\d,.]+)\\)',\n            webpage, 'comment count', fatal=False))\n\n        def extract_tag_box(regex, title):\n            tag_box = self._search_regex(regex, webpage, title, default=None)\n            if not tag_box:\n                return []\n            return re.findall(r'<a[^>]+href=[^>]+>([^<]+)', tag_box)\n\n        categories = extract_tag_box(\n            r'(?s)Categories:.*?</[^>]+>(.+?)</div>', 'categories')\n        tags = extract_tag_box(\n            r'(?s)Tags:.*?</div>\\s*<div[^>]+class=[\"\\']tagBoxContent[\"\\'][^>]*>(.+?)</div>',\n            'tags')\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'upload_date': upload_date,\n            'average_rating': average_rating,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'categories': categories,\n            'tags': tags,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "comments": "#&]+)'\n# Unknown uploader\n# Main source\n# Fallback #1, this also contains extra low quality 180p format\n# Fallback #2 (unavailable as at 22.06.2017)\n# Fallback #3 (unavailable as at 22.06.2017)\n# Fallback #4, encrypted links (unavailable as at 22.06.2017)\n# Video URL's path looks like this:\n#  /201012/17/505835/720p_1500k_505835/YouPorn%20-%20Sex%20Ed%20Is%20It%20Safe%20To%20Masturbate%20Daily.mp4\n#  /201012/17/505835/vl_240p_240k_505835/YouPorn%20-%20Sex%20Ed%20Is%20It%20Safe%20To%20Masturbate%20Daily.mp4\n# We will benefit from it by extracting some metadata\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    int_or_none,\n    sanitized_Request,\n    str_to_int,\n    unescapeHTML,\n    unified_strdate,\n)\nfrom ..aes import aes_decrypt_text\n\n\nclass YouPornIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?youporn\\.com/watch/(?P<id>\\d+)/(?P<display_id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.youporn.com/watch/505835/sex-ed-is-it-safe-to-masturbate-daily/',\n        'md5': '3744d24c50438cf5b6f6d59feb5055c2',\n        'info_dict': {\n            'id': '505835',\n            'display_id': 'sex-ed-is-it-safe-to-masturbate-daily',\n            'ext': 'mp4',\n            'title': 'Sex Ed: Is It Safe To Masturbate Daily?',\n            'description': 'Love & Sex Answers: http://bit.ly/DanAndJenn -- Is It Unhealthy To Masturbate Daily?',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Ask Dan And Jennifer',\n            'upload_date': '20101217',\n            'average_rating': int,\n            'view_count': int,\n            'comment_count': int,\n            'categories': list,\n            'tags': list,\n            'age_limit': 18,\n        },\n    }, {\n        # Unknown uploader\n        'url': 'http://www.youporn.com/watch/561726/big-tits-awesome-brunette-on-amazing-webcam-show/?from=related3&al=2&from_id=561726&pos=4',\n        'info_dict': {\n            'id': '561726',\n            'display_id': 'big-tits-awesome-brunette-on-amazing-webcam-show',\n            'ext': 'mp4',\n            'title': 'Big Tits Awesome Brunette On amazing webcam show',\n            'description': 'http://sweetlivegirls.com Big Tits Awesome Brunette On amazing webcam show.mp4',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'Unknown',\n            'upload_date': '20110418',\n            'average_rating': int,\n            'view_count': int,\n            'comment_count': int,\n            'categories': list,\n            'tags': list,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        request = sanitized_Request(url)\n        request.add_header('Cookie', 'age_verified=1')\n        webpage = self._download_webpage(request, display_id)\n\n        title = self._search_regex(\n            [r'(?:video_titles|videoTitle)\\s*[:=]\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',\n             r'<h1[^>]+class=[\"\\']heading\\d?[\"\\'][^>]*>(?P<title>[^<]+)<'],\n            webpage, 'title', group='title',\n            default=None) or self._og_search_title(\n            webpage, default=None) or self._html_search_meta(\n            'title', webpage, fatal=True)\n\n        links = []\n\n        # Main source\n        definitions = self._parse_json(\n            self._search_regex(\n                r'mediaDefinition\\s*=\\s*(\\[.+?\\]);', webpage,\n                'media definitions', default='[]'),\n            video_id, fatal=False)\n        if definitions:\n            for definition in definitions:\n                if not isinstance(definition, dict):\n                    continue\n                video_url = definition.get('videoUrl')\n                if isinstance(video_url, compat_str) and video_url:\n                    links.append(video_url)\n\n        # Fallback #1, this also contains extra low quality 180p format\n        for _, link in re.findall(r'<a[^>]+href=([\"\\'])(http.+?)\\1[^>]+title=[\"\\']Download [Vv]ideo', webpage):\n            links.append(link)\n\n        # Fallback #2 (unavailable as at 22.06.2017)\n        sources = self._search_regex(\n            r'(?s)sources\\s*:\\s*({.+?})', webpage, 'sources', default=None)\n        if sources:\n            for _, link in re.findall(r'[^:]+\\s*:\\s*([\"\\'])(http.+?)\\1', sources):\n                links.append(link)\n\n        # Fallback #3 (unavailable as at 22.06.2017)\n        for _, link in re.findall(\n                r'(?:videoSrc|videoIpadUrl|html5PlayerSrc)\\s*[:=]\\s*([\"\\'])(http.+?)\\1', webpage):\n            links.append(link)\n\n        # Fallback #4, encrypted links (unavailable as at 22.06.2017)\n        for _, encrypted_link in re.findall(\n                r'encryptedQuality\\d{3,4}URL\\s*=\\s*([\"\\'])([\\da-zA-Z+/=]+)\\1', webpage):\n            links.append(aes_decrypt_text(encrypted_link, title, 32).decode('utf-8'))\n\n        formats = []\n        for video_url in set(unescapeHTML(link) for link in links):\n            f = {\n                'url': video_url,\n            }\n            # Video URL's path looks like this:\n            #  /201012/17/505835/720p_1500k_505835/YouPorn%20-%20Sex%20Ed%20Is%20It%20Safe%20To%20Masturbate%20Daily.mp4\n            #  /201012/17/505835/vl_240p_240k_505835/YouPorn%20-%20Sex%20Ed%20Is%20It%20Safe%20To%20Masturbate%20Daily.mp4\n            # We will benefit from it by extracting some metadata\n            mobj = re.search(r'(?P<height>\\d{3,4})[pP]_(?P<bitrate>\\d+)[kK]_\\d+/', video_url)\n            if mobj:\n                height = int(mobj.group('height'))\n                bitrate = int(mobj.group('bitrate'))\n                f.update({\n                    'format_id': '%dp-%dk' % (height, bitrate),\n                    'height': height,\n                    'tbr': bitrate,\n                })\n            formats.append(f)\n        self._sort_formats(formats)\n\n        description = self._og_search_description(webpage, default=None)\n        thumbnail = self._search_regex(\n            r'(?:imageurl\\s*=|poster\\s*:)\\s*([\"\\'])(?P<thumbnail>.+?)\\1',\n            webpage, 'thumbnail', fatal=False, group='thumbnail')\n\n        uploader = self._html_search_regex(\n            r'(?s)<div[^>]+class=[\"\\']submitByLink[\"\\'][^>]*>(.+?)</div>',\n            webpage, 'uploader', fatal=False)\n        upload_date = unified_strdate(self._html_search_regex(\n            [r'Date\\s+[Aa]dded:\\s*<span>([^<]+)',\n             r'(?s)<div[^>]+class=[\"\\']videoInfo(?:Date|Time)[\"\\'][^>]*>(.+?)</div>'],\n            webpage, 'upload date', fatal=False))\n\n        age_limit = self._rta_search(webpage)\n\n        average_rating = int_or_none(self._search_regex(\n            r'<div[^>]+class=[\"\\']videoRatingPercentage[\"\\'][^>]*>(\\d+)%</div>',\n            webpage, 'average rating', fatal=False))\n\n        view_count = str_to_int(self._search_regex(\n            r'(?s)<div[^>]+class=([\"\\']).*?\\bvideoInfoViews\\b.*?\\1[^>]*>.*?(?P<count>[\\d,.]+)<',\n            webpage, 'view count', fatal=False, group='count'))\n        comment_count = str_to_int(self._search_regex(\n            r'>All [Cc]omments? \\(([\\d,.]+)\\)',\n            webpage, 'comment count', fatal=False))\n\n        def extract_tag_box(regex, title):\n            tag_box = self._search_regex(regex, webpage, title, default=None)\n            if not tag_box:\n                return []\n            return re.findall(r'<a[^>]+href=[^>]+>([^<]+)', tag_box)\n\n        categories = extract_tag_box(\n            r'(?s)Categories:.*?</[^>]+>(.+?)</div>', 'categories')\n        tags = extract_tag_box(\n            r'(?s)Tags:.*?</div>\\s*<div[^>]+class=[\"\\']tagBoxContent[\"\\'][^>]*>(.+?)</div>',\n            'tags')\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'upload_date': upload_date,\n            'average_rating': average_rating,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'categories': categories,\n            'tags': tags,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "youporn.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/youporn.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}