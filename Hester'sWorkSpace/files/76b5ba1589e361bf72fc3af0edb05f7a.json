{"author": "aws", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nimport datetime\nimport mock\n\nfrom dateutil.tz import tzutc\nfrom botocore.compat import urlparse, parse_qs\n\nfrom awscli.compat import six\nfrom awscli.testutils import BaseAWSCommandParamsTest\n\n\nclass TestGenerateDBAuthToken(BaseAWSCommandParamsTest):\n\n    prefix = 'rds generate-db-auth-token'\n\n    def _urlparse(self, url):\n        if isinstance(url, six.binary_type):\n             Not really necessary, but it helps to reduce noise on Python 2.x\n            url = url.decode('utf8')\n        return urlparse(url)\n\n    def assert_url_equal(self, url1, url2):\n        parts1 = self._urlparse(url1)\n        parts2 = self._urlparse(url2)\n\n         Because the query string ordering isn't relevant, we have to parse\n         every single part manually and then handle the query string.\n        self.assertEqual(parts1.scheme, parts2.scheme)\n        self.assertEqual(parts1.netloc, parts2.netloc)\n        self.assertEqual(parts1.path, parts2.path)\n        self.assertEqual(parts1.params, parts2.params)\n        self.assertEqual(parts1.fragment, parts2.fragment)\n        self.assertEqual(parts1.username, parts2.username)\n        self.assertEqual(parts1.password, parts2.password)\n        self.assertEqual(parts1.hostname, parts2.hostname)\n        self.assertEqual(parts1.port, parts2.port)\n        self.assertEqual(parse_qs(parts1.query), parse_qs(parts2.query))\n\n    def test_generate_simple_token(self):\n        command = self.prefix + ' --hostname host.us-east-1.amazonaws.com'\n        command += ' --port 3306 --username mySQLUser'\n        clock = datetime.datetime(2016, 11, 7, 17, 39, 33, tzinfo=tzutc())\n\n        with mock.patch('datetime.datetime') as dt:\n            dt.utcnow.return_value = clock\n            stdout, _, _ = self.run_cmd(command, expected_rc=0)\n\n        expected = (\n            'host.us-east-1.amazonaws.com:3306/?DBUser=mySQLUser&'\n            'Action=connect&X-Amz-Credential=access_key%2F20161107%2Fus-east-1'\n            '%2Frds-db%2Faws4_request&X-Amz-Expires=900&X-Amz-Date=20161107T173'\n            '933Z&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-SignedHeaders=host&'\n            'X-Amz-Signature=87ab58107ef49f1c311a412f98b7f976b0b5152ffb559f0d'\n            '36c6c9a0c5e0e362'\n        )\n\n        self.assert_url_equal(\n            'https://' + stdout.strip('\\n'), 'https://' + expected)\n", "comments": "  copyright 2016 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     not really necessary  helps reduce noise python 2 x    because query string ordering relevant  parse    every single part manually handle query string  ", "content": "# Copyright 2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nimport datetime\nimport mock\n\nfrom dateutil.tz import tzutc\nfrom botocore.compat import urlparse, parse_qs\n\nfrom awscli.compat import six\nfrom awscli.testutils import BaseAWSCommandParamsTest\n\n\nclass TestGenerateDBAuthToken(BaseAWSCommandParamsTest):\n\n    prefix = 'rds generate-db-auth-token'\n\n    def _urlparse(self, url):\n        if isinstance(url, six.binary_type):\n            # Not really necessary, but it helps to reduce noise on Python 2.x\n            url = url.decode('utf8')\n        return urlparse(url)\n\n    def assert_url_equal(self, url1, url2):\n        parts1 = self._urlparse(url1)\n        parts2 = self._urlparse(url2)\n\n        # Because the query string ordering isn't relevant, we have to parse\n        # every single part manually and then handle the query string.\n        self.assertEqual(parts1.scheme, parts2.scheme)\n        self.assertEqual(parts1.netloc, parts2.netloc)\n        self.assertEqual(parts1.path, parts2.path)\n        self.assertEqual(parts1.params, parts2.params)\n        self.assertEqual(parts1.fragment, parts2.fragment)\n        self.assertEqual(parts1.username, parts2.username)\n        self.assertEqual(parts1.password, parts2.password)\n        self.assertEqual(parts1.hostname, parts2.hostname)\n        self.assertEqual(parts1.port, parts2.port)\n        self.assertEqual(parse_qs(parts1.query), parse_qs(parts2.query))\n\n    def test_generate_simple_token(self):\n        command = self.prefix + ' --hostname host.us-east-1.amazonaws.com'\n        command += ' --port 3306 --username mySQLUser'\n        clock = datetime.datetime(2016, 11, 7, 17, 39, 33, tzinfo=tzutc())\n\n        with mock.patch('datetime.datetime') as dt:\n            dt.utcnow.return_value = clock\n            stdout, _, _ = self.run_cmd(command, expected_rc=0)\n\n        expected = (\n            'host.us-east-1.amazonaws.com:3306/?DBUser=mySQLUser&'\n            'Action=connect&X-Amz-Credential=access_key%2F20161107%2Fus-east-1'\n            '%2Frds-db%2Faws4_request&X-Amz-Expires=900&X-Amz-Date=20161107T173'\n            '933Z&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-SignedHeaders=host&'\n            'X-Amz-Signature=87ab58107ef49f1c311a412f98b7f976b0b5152ffb559f0d'\n            '36c6c9a0c5e0e362'\n        )\n\n        self.assert_url_equal(\n            'https://' + stdout.strip('\\n'), 'https://' + expected)\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_generate_db_auth_token.py", "id": "76b5ba1589e361bf72fc3af0edb05f7a", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/rds/test_generate_db_auth_token.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}