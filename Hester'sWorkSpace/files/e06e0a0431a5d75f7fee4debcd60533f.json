{"author": "ansible", "code": " (c) 2017 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\ntry:\n    from lxml.etree import tostring, fromstring\nexcept ImportError:\n    from xml.etree.ElementTree import tostring, fromstring\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.junos import junos_rpc\nfrom units.modules.utils import set_module_args\nfrom .junos_module import TestJunosModule, load_fixture\n\n\nRPC_CLI_MAP = {\n    'get-software-information': 'show version',\n    'get-interface-information': 'show interfaces details',\n    'get-system-memory-information': 'show system memory',\n    'get-chassis-inventory': 'show chassis hardware',\n    'get-system-storage': 'show system storage',\n    'load-configuration': 'load configuration'\n}\n\n\nclass TestJunosCommandModule(TestJunosModule):\n\n    module = junos_rpc\n\n    def setUp(self):\n        super(TestJunosCommandModule, self).setUp()\n        self.mock_conn = patch('ansible.module_utils.connection.Connection')\n        self.conn = self.mock_conn.start()\n\n        self.mock_netconf = patch('ansible.module_utils.network.junos.junos.NetconfConnection')\n        self.netconf_conn = self.mock_netconf.start()\n\n        self.mock_netconf_rpc = patch('ansible.module_utils.network.common.netconf.NetconfConnection')\n        self.netconf_rpc = self.mock_netconf_rpc.start()\n\n        self.mock_exec_rpc = patch('ansible.modules.network.junos.junos_rpc.exec_rpc')\n        self.exec_rpc = self.mock_exec_rpc.start()\n\n    def tearDown(self):\n        super(TestJunosCommandModule, self).tearDown()\n        self.mock_conn.stop()\n        self.mock_netconf.stop()\n        self.mock_netconf_rpc.stop()\n        self.mock_exec_rpc.stop()\n\n    def load_fixtures(self, commands=None, format='text', changed=False):\n        def load_from_file(*args, **kwargs):\n            element = fromstring(args[1])\n            if element.text:\n                path = str(element.text)\n            else:\n                tag = str(element.tag)\n                if tag.startswith('{'):\n                    tag = tag.split('}', 1)[1]\n                path = RPC_CLI_MAP[tag]\n\n            filename = path.replace(' ', '_')\n            filename = '%s_%s.txt' % (filename, format)\n\n            return load_fixture(filename)\n\n        self.exec_rpc.side_effect = load_from_file\n\n    def test_junos_rpc_xml(self):\n        set_module_args(dict(rpc='get-chassis-inventory'))\n        result = self.execute_module(format='xml')\n        self.assertTrue(result['xml'].find('<chassis-inventory>\\n'))\n\n    def test_junos_rpc_text(self):\n        set_module_args(dict(rpc='get-software-information', output='text'))\n        result = self.execute_module(format='text')\n        self.assertTrue(result['output_lines'][0].startswith('Hostname: vsrx01'))\n\n    def test_junos_rpc_json(self):\n        set_module_args(dict(rpc='get-software-information', output='json'))\n        result = self.execute_module(format='json')\n        self.assertTrue('software-information' in result['output'])\n\n    def test_junos_rpc_args(self):\n        set_module_args(dict(rpc='get-software-information', args={'interface': 'em0', 'media': True}))\n        result = self.execute_module(format='xml')\n        args, kwargs = self.exec_rpc.call_args\n        reply = args[1]\n        self.assertTrue(reply.find(b'<interface>em0</interface><media /></get-software-information>'))\n\n    def test_junos_rpc_attrs(self):\n        set_module_args(dict(rpc='load-configuration', output='xml', attrs={'url': '/var/tmp/config.conf'}))\n        result = self.execute_module(format='xml')\n        self.assertTrue(result['xml'].find('<load-success/>'))\n", "comments": "  (c) 2017 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish ", "content": "# (c) 2017 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\ntry:\n    from lxml.etree import tostring, fromstring\nexcept ImportError:\n    from xml.etree.ElementTree import tostring, fromstring\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.junos import junos_rpc\nfrom units.modules.utils import set_module_args\nfrom .junos_module import TestJunosModule, load_fixture\n\n\nRPC_CLI_MAP = {\n    'get-software-information': 'show version',\n    'get-interface-information': 'show interfaces details',\n    'get-system-memory-information': 'show system memory',\n    'get-chassis-inventory': 'show chassis hardware',\n    'get-system-storage': 'show system storage',\n    'load-configuration': 'load configuration'\n}\n\n\nclass TestJunosCommandModule(TestJunosModule):\n\n    module = junos_rpc\n\n    def setUp(self):\n        super(TestJunosCommandModule, self).setUp()\n        self.mock_conn = patch('ansible.module_utils.connection.Connection')\n        self.conn = self.mock_conn.start()\n\n        self.mock_netconf = patch('ansible.module_utils.network.junos.junos.NetconfConnection')\n        self.netconf_conn = self.mock_netconf.start()\n\n        self.mock_netconf_rpc = patch('ansible.module_utils.network.common.netconf.NetconfConnection')\n        self.netconf_rpc = self.mock_netconf_rpc.start()\n\n        self.mock_exec_rpc = patch('ansible.modules.network.junos.junos_rpc.exec_rpc')\n        self.exec_rpc = self.mock_exec_rpc.start()\n\n    def tearDown(self):\n        super(TestJunosCommandModule, self).tearDown()\n        self.mock_conn.stop()\n        self.mock_netconf.stop()\n        self.mock_netconf_rpc.stop()\n        self.mock_exec_rpc.stop()\n\n    def load_fixtures(self, commands=None, format='text', changed=False):\n        def load_from_file(*args, **kwargs):\n            element = fromstring(args[1])\n            if element.text:\n                path = str(element.text)\n            else:\n                tag = str(element.tag)\n                if tag.startswith('{'):\n                    tag = tag.split('}', 1)[1]\n                path = RPC_CLI_MAP[tag]\n\n            filename = path.replace(' ', '_')\n            filename = '%s_%s.txt' % (filename, format)\n\n            return load_fixture(filename)\n\n        self.exec_rpc.side_effect = load_from_file\n\n    def test_junos_rpc_xml(self):\n        set_module_args(dict(rpc='get-chassis-inventory'))\n        result = self.execute_module(format='xml')\n        self.assertTrue(result['xml'].find('<chassis-inventory>\\n'))\n\n    def test_junos_rpc_text(self):\n        set_module_args(dict(rpc='get-software-information', output='text'))\n        result = self.execute_module(format='text')\n        self.assertTrue(result['output_lines'][0].startswith('Hostname: vsrx01'))\n\n    def test_junos_rpc_json(self):\n        set_module_args(dict(rpc='get-software-information', output='json'))\n        result = self.execute_module(format='json')\n        self.assertTrue('software-information' in result['output'])\n\n    def test_junos_rpc_args(self):\n        set_module_args(dict(rpc='get-software-information', args={'interface': 'em0', 'media': True}))\n        result = self.execute_module(format='xml')\n        args, kwargs = self.exec_rpc.call_args\n        reply = args[1]\n        self.assertTrue(reply.find(b'<interface>em0</interface><media /></get-software-information>'))\n\n    def test_junos_rpc_attrs(self):\n        set_module_args(dict(rpc='load-configuration', output='xml', attrs={'url': '/var/tmp/config.conf'}))\n        result = self.execute_module(format='xml')\n        self.assertTrue(result['xml'].find('<load-success/>'))\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_junos_rpc.py", "id": "e06e0a0431a5d75f7fee4debcd60533f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/junos/test_junos_rpc.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}