{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import FakeYDL, md5\n\n\nfrom youtube_dl.extractor import (\n    YoutubeIE,\n    DailymotionIE,\n    TEDIE,\n    VimeoIE,\n    WallaIE,\n    CeskaTelevizeIE,\n    LyndaIE,\n    NPOIE,\n    ComedyCentralIE,\n    NRKTVIE,\n    RaiPlayIE,\n    VikiIE,\n    ThePlatformIE,\n    ThePlatformFeedIE,\n    RTVEALaCartaIE,\n    FunnyOrDieIE,\n    DemocracynowIE,\n)\n\n\nclass BaseTestSubtitles(unittest.TestCase):\n    url = None\n    IE = None\n\n    def setUp(self):\n        self.DL = FakeYDL()\n        self.ie = self.IE()\n        self.DL.add_info_extractor(self.ie)\n\n    def getInfoDict(self):\n        info_dict = self.DL.extract_info(self.url, download=False)\n        return info_dict\n\n    def getSubtitles(self):\n        info_dict = self.getInfoDict()\n        subtitles = info_dict['requested_subtitles']\n        if not subtitles:\n            return subtitles\n        for sub_info in subtitles.values():\n            if sub_info.get('data') is None:\n                uf = self.DL.urlopen(sub_info['url'])\n                sub_info['data'] = uf.read().decode('utf-8')\n        return dict((l, sub_info['data']) for l, sub_info in subtitles.items())\n\n\nclass TestYoutubeSubtitles(BaseTestSubtitles):\n    url = 'QRS8MkLhQmM'\n    IE = YoutubeIE\n\n    def test_youtube_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(len(subtitles.keys()), 13)\n        self.assertEqual(md5(subtitles['en']), '3cb210999d3e021bd6c7f0ea751eab06')\n        self.assertEqual(md5(subtitles['it']), '6d752b98c31f1cf8d597050c7a2cb4b5')\n        for lang in ['fr', 'de']:\n            self.assertTrue(subtitles.get(lang) is not None, 'Subtitles for \\'%s\\' not extracted' % lang)\n\n    def test_youtube_subtitles_ttml_format(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['subtitlesformat'] = 'ttml'\n        subtitles = self.getSubtitles()\n        self.assertEqual(md5(subtitles['en']), 'e306f8c42842f723447d9f63ad65df54')\n\n    def test_youtube_subtitles_vtt_format(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['subtitlesformat'] = 'vtt'\n        subtitles = self.getSubtitles()\n        self.assertEqual(md5(subtitles['en']), '3cb210999d3e021bd6c7f0ea751eab06')\n\n    def test_youtube_automatic_captions(self):\n        self.url = '8YoUxe5ncPo'\n        self.DL.params['writeautomaticsub'] = True\n        self.DL.params['subtitleslangs'] = ['it']\n        subtitles = self.getSubtitles()\n        self.assertTrue(subtitles['it'] is not None)\n\n    def test_youtube_translated_subtitles(self):\n        \n        self.url = 'Ky9eprVWzlI'\n        self.DL.params['writeautomaticsub'] = True\n        self.DL.params['subtitleslangs'] = ['it']\n        subtitles = self.getSubtitles()\n        self.assertTrue(subtitles['it'] is not None)\n\n    def test_youtube_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'n5BB19UTcdA'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestDailymotionSubtitles(BaseTestSubtitles):\n    url = 'http://www.dailymotion.com/video/xczg00'\n    IE = DailymotionIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertTrue(len(subtitles.keys()) >= 6)\n        self.assertEqual(md5(subtitles['en']), '976553874490cba125086bbfea3ff76f')\n        self.assertEqual(md5(subtitles['fr']), '594564ec7d588942e384e920e5341792')\n        for lang in ['es', 'fr', 'de']:\n            self.assertTrue(subtitles.get(lang) is not None, 'Subtitles for \\'%s\\' not extracted' % lang)\n\n    def test_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'http://www.dailymotion.com/video/x12u166_le-zapping-tele-star-du-08-aout-2013_tv'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestTedSubtitles(BaseTestSubtitles):\n    url = 'http://www.ted.com/talks/dan_dennett_on_our_consciousness.html'\n    IE = TEDIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertTrue(len(subtitles.keys()) >= 28)\n        self.assertEqual(md5(subtitles['en']), '4262c1665ff928a2dada178f62cb8d14')\n        self.assertEqual(md5(subtitles['fr']), '66a63f7f42c97a50f8c0e90bc7797bb5')\n        for lang in ['es', 'fr', 'de']:\n            self.assertTrue(subtitles.get(lang) is not None, 'Subtitles for \\'%s\\' not extracted' % lang)\n\n\nclass TestVimeoSubtitles(BaseTestSubtitles):\n    url = 'http://vimeo.com/76979871'\n    IE = VimeoIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['de', 'en', 'es', 'fr']))\n        self.assertEqual(md5(subtitles['en']), '8062383cf4dec168fc40a088aa6d5888')\n        self.assertEqual(md5(subtitles['fr']), 'b6191146a6c5d3a452244d853fde6dc8')\n\n    def test_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'http://vimeo.com/56015672'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestWallaSubtitles(BaseTestSubtitles):\n    url = 'http://vod.walla.co.il/movie/2705958/the-yes-men'\n    IE = WallaIE\n\n    def test_allsubtitles(self):\n        self.DL.expect_warning('Automatic Captions not supported by this server')\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['heb']))\n        self.assertEqual(md5(subtitles['heb']), 'e758c5d7cb982f6bef14f377ec7a3920')\n\n    def test_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'http://vod.walla.co.il/movie/2642630/one-direction-all-for-one'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestCeskaTelevizeSubtitles(BaseTestSubtitles):\n    url = 'http://www.ceskatelevize.cz/ivysilani/10600540290-u6-uzasny-svet-techniky'\n    IE = CeskaTelevizeIE\n\n    def test_allsubtitles(self):\n        self.DL.expect_warning('Automatic Captions not supported by this server')\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['cs']))\n        self.assertTrue(len(subtitles['cs']) > 20000)\n\n    def test_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'http://www.ceskatelevize.cz/ivysilani/ivysilani/10441294653-hyde-park-civilizace/214411058091220'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestLyndaSubtitles(BaseTestSubtitles):\n    url = 'http://www.lynda.com/Bootstrap-tutorials/Using-exercise-files/110885/114408-4.html'\n    IE = LyndaIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), '09bbe67222259bed60deaa26997d73a7')\n\n\nclass TestNPOSubtitles(BaseTestSubtitles):\n    url = 'http://www.npo.nl/nos-journaal/28-08-2014/POW_00722860'\n    IE = NPOIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['nl']))\n        self.assertEqual(md5(subtitles['nl']), 'fc6435027572b63fb4ab143abd5ad3f4')\n\n\nclass TestMTVSubtitles(BaseTestSubtitles):\n    url = 'http://www.cc.com/video-clips/kllhuv/stand-up-greg-fitzsimmons--uncensored---too-good-of-a-mother'\n    IE = ComedyCentralIE\n\n    def getInfoDict(self):\n        return super(TestMTVSubtitles, self).getInfoDict()['entries'][0]\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), 'b9f6ca22a6acf597ec76f61749765e65')\n\n\nclass TestNRKSubtitles(BaseTestSubtitles):\n    url = 'http://tv.nrk.no/serie/ikke-gjoer-dette-hjemme/DMPV73000411/sesong-2/episode-1'\n    IE = NRKTVIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['no']))\n        self.assertEqual(md5(subtitles['no']), '544fa917d3197fcbee64634559221cc2')\n\n\nclass TestRaiPlaySubtitles(BaseTestSubtitles):\n    url = 'http://www.raiplay.it/video/2014/04/Report-del-07042014-cb27157f-9dd0-4aee-b788-b1f67643a391.html'\n    IE = RaiPlayIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['it']))\n        self.assertEqual(md5(subtitles['it']), 'b1d90a98755126b61e667567a1f6680a')\n\n\nclass TestVikiSubtitles(BaseTestSubtitles):\n    url = 'http://www.viki.com/videos/1060846v-punch-episode-18'\n    IE = VikiIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), '53cb083a5914b2d84ef1ab67b880d18a')\n\n\nclass TestThePlatformSubtitles(BaseTestSubtitles):\n    \n    \n    url = 'theplatform:JFUjUE1_ehvq'\n    IE = ThePlatformIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), '97e7670cbae3c4d26ae8bcc7fdd78d4b')\n\n\nclass TestThePlatformFeedSubtitles(BaseTestSubtitles):\n    url = 'http://feed.theplatform.com/f/7wvmTC/msnbc_video-p-test?form=json&pretty=true&range=-40&byGuid=n_hardball_5biden_140207'\n    IE = ThePlatformFeedIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), '48649a22e82b2da21c9a67a395eedade')\n\n\nclass TestRtveSubtitles(BaseTestSubtitles):\n    url = 'http://www.rtve.es/alacarta/videos/los-misterios-de-laura/misterios-laura-capitulo-32-misterio-del-numero-17-2-parte/2428621/'\n    IE = RTVEALaCartaIE\n\n    def test_allsubtitles(self):\n        print('Skipping, only available from Spain')\n        return\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['es']))\n        self.assertEqual(md5(subtitles['es']), '69e70cae2d40574fb7316f31d6eb7fca')\n\n\nclass TestFunnyOrDieSubtitles(BaseTestSubtitles):\n    url = 'http://www.funnyordie.com/videos/224829ff6d/judd-apatow-will-direct-your-vine'\n    IE = FunnyOrDieIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), 'c5593c193eacd353596c11c2d4f9ecc4')\n\n\nclass TestDemocracynowSubtitles(BaseTestSubtitles):\n    url = 'http://www.democracynow.org/shows/2015/7/3'\n    IE = DemocracynowIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), 'acaca989e24a9e45a6719c9b3d60815c')\n\n    def test_subtitles_in_page(self):\n        self.url = 'http://www.democracynow.org/2015/7/3/this_flag_comes_down_today_bree'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), 'acaca989e24a9e45a6719c9b3d60815c')\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "#!/usr/bin/env python\n# Allow direct execution\n# This video has a subtitles track, which can be translated\n# from http://www.3playmedia.com/services-features/tools/integrations/theplatform/\n# (see http://theplatform.com/about/partners/type/subtitles-closed-captioning/)\n", "content": "#!/usr/bin/env python\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import FakeYDL, md5\n\n\nfrom youtube_dl.extractor import (\n    YoutubeIE,\n    DailymotionIE,\n    TEDIE,\n    VimeoIE,\n    WallaIE,\n    CeskaTelevizeIE,\n    LyndaIE,\n    NPOIE,\n    ComedyCentralIE,\n    NRKTVIE,\n    RaiPlayIE,\n    VikiIE,\n    ThePlatformIE,\n    ThePlatformFeedIE,\n    RTVEALaCartaIE,\n    FunnyOrDieIE,\n    DemocracynowIE,\n)\n\n\nclass BaseTestSubtitles(unittest.TestCase):\n    url = None\n    IE = None\n\n    def setUp(self):\n        self.DL = FakeYDL()\n        self.ie = self.IE()\n        self.DL.add_info_extractor(self.ie)\n\n    def getInfoDict(self):\n        info_dict = self.DL.extract_info(self.url, download=False)\n        return info_dict\n\n    def getSubtitles(self):\n        info_dict = self.getInfoDict()\n        subtitles = info_dict['requested_subtitles']\n        if not subtitles:\n            return subtitles\n        for sub_info in subtitles.values():\n            if sub_info.get('data') is None:\n                uf = self.DL.urlopen(sub_info['url'])\n                sub_info['data'] = uf.read().decode('utf-8')\n        return dict((l, sub_info['data']) for l, sub_info in subtitles.items())\n\n\nclass TestYoutubeSubtitles(BaseTestSubtitles):\n    url = 'QRS8MkLhQmM'\n    IE = YoutubeIE\n\n    def test_youtube_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(len(subtitles.keys()), 13)\n        self.assertEqual(md5(subtitles['en']), '3cb210999d3e021bd6c7f0ea751eab06')\n        self.assertEqual(md5(subtitles['it']), '6d752b98c31f1cf8d597050c7a2cb4b5')\n        for lang in ['fr', 'de']:\n            self.assertTrue(subtitles.get(lang) is not None, 'Subtitles for \\'%s\\' not extracted' % lang)\n\n    def test_youtube_subtitles_ttml_format(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['subtitlesformat'] = 'ttml'\n        subtitles = self.getSubtitles()\n        self.assertEqual(md5(subtitles['en']), 'e306f8c42842f723447d9f63ad65df54')\n\n    def test_youtube_subtitles_vtt_format(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['subtitlesformat'] = 'vtt'\n        subtitles = self.getSubtitles()\n        self.assertEqual(md5(subtitles['en']), '3cb210999d3e021bd6c7f0ea751eab06')\n\n    def test_youtube_automatic_captions(self):\n        self.url = '8YoUxe5ncPo'\n        self.DL.params['writeautomaticsub'] = True\n        self.DL.params['subtitleslangs'] = ['it']\n        subtitles = self.getSubtitles()\n        self.assertTrue(subtitles['it'] is not None)\n\n    def test_youtube_translated_subtitles(self):\n        # This video has a subtitles track, which can be translated\n        self.url = 'Ky9eprVWzlI'\n        self.DL.params['writeautomaticsub'] = True\n        self.DL.params['subtitleslangs'] = ['it']\n        subtitles = self.getSubtitles()\n        self.assertTrue(subtitles['it'] is not None)\n\n    def test_youtube_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'n5BB19UTcdA'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestDailymotionSubtitles(BaseTestSubtitles):\n    url = 'http://www.dailymotion.com/video/xczg00'\n    IE = DailymotionIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertTrue(len(subtitles.keys()) >= 6)\n        self.assertEqual(md5(subtitles['en']), '976553874490cba125086bbfea3ff76f')\n        self.assertEqual(md5(subtitles['fr']), '594564ec7d588942e384e920e5341792')\n        for lang in ['es', 'fr', 'de']:\n            self.assertTrue(subtitles.get(lang) is not None, 'Subtitles for \\'%s\\' not extracted' % lang)\n\n    def test_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'http://www.dailymotion.com/video/x12u166_le-zapping-tele-star-du-08-aout-2013_tv'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestTedSubtitles(BaseTestSubtitles):\n    url = 'http://www.ted.com/talks/dan_dennett_on_our_consciousness.html'\n    IE = TEDIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertTrue(len(subtitles.keys()) >= 28)\n        self.assertEqual(md5(subtitles['en']), '4262c1665ff928a2dada178f62cb8d14')\n        self.assertEqual(md5(subtitles['fr']), '66a63f7f42c97a50f8c0e90bc7797bb5')\n        for lang in ['es', 'fr', 'de']:\n            self.assertTrue(subtitles.get(lang) is not None, 'Subtitles for \\'%s\\' not extracted' % lang)\n\n\nclass TestVimeoSubtitles(BaseTestSubtitles):\n    url = 'http://vimeo.com/76979871'\n    IE = VimeoIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['de', 'en', 'es', 'fr']))\n        self.assertEqual(md5(subtitles['en']), '8062383cf4dec168fc40a088aa6d5888')\n        self.assertEqual(md5(subtitles['fr']), 'b6191146a6c5d3a452244d853fde6dc8')\n\n    def test_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'http://vimeo.com/56015672'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestWallaSubtitles(BaseTestSubtitles):\n    url = 'http://vod.walla.co.il/movie/2705958/the-yes-men'\n    IE = WallaIE\n\n    def test_allsubtitles(self):\n        self.DL.expect_warning('Automatic Captions not supported by this server')\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['heb']))\n        self.assertEqual(md5(subtitles['heb']), 'e758c5d7cb982f6bef14f377ec7a3920')\n\n    def test_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'http://vod.walla.co.il/movie/2642630/one-direction-all-for-one'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestCeskaTelevizeSubtitles(BaseTestSubtitles):\n    url = 'http://www.ceskatelevize.cz/ivysilani/10600540290-u6-uzasny-svet-techniky'\n    IE = CeskaTelevizeIE\n\n    def test_allsubtitles(self):\n        self.DL.expect_warning('Automatic Captions not supported by this server')\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['cs']))\n        self.assertTrue(len(subtitles['cs']) > 20000)\n\n    def test_nosubtitles(self):\n        self.DL.expect_warning('video doesn\\'t have subtitles')\n        self.url = 'http://www.ceskatelevize.cz/ivysilani/ivysilani/10441294653-hyde-park-civilizace/214411058091220'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertFalse(subtitles)\n\n\nclass TestLyndaSubtitles(BaseTestSubtitles):\n    url = 'http://www.lynda.com/Bootstrap-tutorials/Using-exercise-files/110885/114408-4.html'\n    IE = LyndaIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), '09bbe67222259bed60deaa26997d73a7')\n\n\nclass TestNPOSubtitles(BaseTestSubtitles):\n    url = 'http://www.npo.nl/nos-journaal/28-08-2014/POW_00722860'\n    IE = NPOIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['nl']))\n        self.assertEqual(md5(subtitles['nl']), 'fc6435027572b63fb4ab143abd5ad3f4')\n\n\nclass TestMTVSubtitles(BaseTestSubtitles):\n    url = 'http://www.cc.com/video-clips/kllhuv/stand-up-greg-fitzsimmons--uncensored---too-good-of-a-mother'\n    IE = ComedyCentralIE\n\n    def getInfoDict(self):\n        return super(TestMTVSubtitles, self).getInfoDict()['entries'][0]\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), 'b9f6ca22a6acf597ec76f61749765e65')\n\n\nclass TestNRKSubtitles(BaseTestSubtitles):\n    url = 'http://tv.nrk.no/serie/ikke-gjoer-dette-hjemme/DMPV73000411/sesong-2/episode-1'\n    IE = NRKTVIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['no']))\n        self.assertEqual(md5(subtitles['no']), '544fa917d3197fcbee64634559221cc2')\n\n\nclass TestRaiPlaySubtitles(BaseTestSubtitles):\n    url = 'http://www.raiplay.it/video/2014/04/Report-del-07042014-cb27157f-9dd0-4aee-b788-b1f67643a391.html'\n    IE = RaiPlayIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['it']))\n        self.assertEqual(md5(subtitles['it']), 'b1d90a98755126b61e667567a1f6680a')\n\n\nclass TestVikiSubtitles(BaseTestSubtitles):\n    url = 'http://www.viki.com/videos/1060846v-punch-episode-18'\n    IE = VikiIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), '53cb083a5914b2d84ef1ab67b880d18a')\n\n\nclass TestThePlatformSubtitles(BaseTestSubtitles):\n    # from http://www.3playmedia.com/services-features/tools/integrations/theplatform/\n    # (see http://theplatform.com/about/partners/type/subtitles-closed-captioning/)\n    url = 'theplatform:JFUjUE1_ehvq'\n    IE = ThePlatformIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), '97e7670cbae3c4d26ae8bcc7fdd78d4b')\n\n\nclass TestThePlatformFeedSubtitles(BaseTestSubtitles):\n    url = 'http://feed.theplatform.com/f/7wvmTC/msnbc_video-p-test?form=json&pretty=true&range=-40&byGuid=n_hardball_5biden_140207'\n    IE = ThePlatformFeedIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), '48649a22e82b2da21c9a67a395eedade')\n\n\nclass TestRtveSubtitles(BaseTestSubtitles):\n    url = 'http://www.rtve.es/alacarta/videos/los-misterios-de-laura/misterios-laura-capitulo-32-misterio-del-numero-17-2-parte/2428621/'\n    IE = RTVEALaCartaIE\n\n    def test_allsubtitles(self):\n        print('Skipping, only available from Spain')\n        return\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['es']))\n        self.assertEqual(md5(subtitles['es']), '69e70cae2d40574fb7316f31d6eb7fca')\n\n\nclass TestFunnyOrDieSubtitles(BaseTestSubtitles):\n    url = 'http://www.funnyordie.com/videos/224829ff6d/judd-apatow-will-direct-your-vine'\n    IE = FunnyOrDieIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), 'c5593c193eacd353596c11c2d4f9ecc4')\n\n\nclass TestDemocracynowSubtitles(BaseTestSubtitles):\n    url = 'http://www.democracynow.org/shows/2015/7/3'\n    IE = DemocracynowIE\n\n    def test_allsubtitles(self):\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), 'acaca989e24a9e45a6719c9b3d60815c')\n\n    def test_subtitles_in_page(self):\n        self.url = 'http://www.democracynow.org/2015/7/3/this_flag_comes_down_today_bree'\n        self.DL.params['writesubtitles'] = True\n        self.DL.params['allsubtitles'] = True\n        subtitles = self.getSubtitles()\n        self.assertEqual(set(subtitles.keys()), set(['en']))\n        self.assertEqual(md5(subtitles['en']), 'acaca989e24a9e45a6719c9b3d60815c')\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_subtitles.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_subtitles.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}