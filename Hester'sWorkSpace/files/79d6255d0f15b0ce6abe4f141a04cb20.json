{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    orderedSet,\n)\n\n\nclass DeezerPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?deezer\\.com/playlist/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.deezer.com/playlist/176747451',\n        'info_dict': {\n            'id': '176747451',\n            'title': 'Best!',\n            'uploader': 'Anonymous',\n            'thumbnail': r're:^https?://cdn-images\\.deezer\\.com/images/cover/.*\\.jpg$',\n        },\n        'playlist_count': 30,\n        'skip': 'Only available in .de',\n    }\n\n    def _real_extract(self, url):\n        if 'test' not in self._downloader.params:\n            self._downloader.report_warning('For now, this extractor only supports the 30 second previews. Patches welcome!')\n\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, playlist_id)\n        geoblocking_msg = self._html_search_regex(\n            r'<p class=\"soon-txt\">(.*?)</p>', webpage, 'geoblocking message',\n            default=None)\n        if geoblocking_msg is not None:\n            raise ExtractorError(\n                'Deezer said: %s' % geoblocking_msg, expected=True)\n\n        data_json = self._search_regex(\n            (r'__DZR_APP_STATE__\\s*=\\s*({.+?})\\s*</script>',\n             r'naboo\\.display\\(\\'[^\\']+\\',\\s*(.*?)\\);\\n'),\n            webpage, 'data JSON')\n        data = json.loads(data_json)\n\n        playlist_title = data.get('DATA', {}).get('TITLE')\n        playlist_uploader = data.get('DATA', {}).get('PARENT_USERNAME')\n        playlist_thumbnail = self._search_regex(\n            r'<img id=\"naboo_playlist_image\".*?src=\"([^\"]+)\"', webpage,\n            'playlist thumbnail')\n\n        preview_pattern = self._search_regex(\n            r\"var SOUND_PREVIEW_GATEWAY\\s*=\\s*'([^']+)';\", webpage,\n            'preview URL pattern', fatal=False)\n        entries = []\n        for s in data['SONGS']['data']:\n            puid = s['MD5_ORIGIN']\n            preview_video_url = preview_pattern.\\\n                replace('{0}', puid[0]).\\\n                replace('{1}', puid).\\\n                replace('{2}', s['MEDIA_VERSION'])\n            formats = [{\n                'format_id': 'preview',\n                'url': preview_video_url,\n                'preference': -100,  \n                'ext': 'mp3',\n            }]\n            self._sort_formats(formats)\n            artists = ', '.join(\n                orderedSet(a['ART_NAME'] for a in s['ARTISTS']))\n            entries.append({\n                'id': s['SNG_ID'],\n                'duration': int_or_none(s.get('DURATION')),\n                'title': '%s - %s' % (artists, s['SNG_TITLE']),\n                'uploader': s['ART_NAME'],\n                'uploader_id': s['ART_ID'],\n                'age_limit': 16 if s.get('EXPLICIT_LYRICS') == '1' else 0,\n                'formats': formats,\n            })\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': playlist_title,\n            'uploader': playlist_uploader,\n            'thumbnail': playlist_thumbnail,\n            'entries': entries,\n        }\n", "comments": "# Only the first 30 seconds\n", "content": "from __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    orderedSet,\n)\n\n\nclass DeezerPlaylistIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?deezer\\.com/playlist/(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://www.deezer.com/playlist/176747451',\n        'info_dict': {\n            'id': '176747451',\n            'title': 'Best!',\n            'uploader': 'Anonymous',\n            'thumbnail': r're:^https?://cdn-images\\.deezer\\.com/images/cover/.*\\.jpg$',\n        },\n        'playlist_count': 30,\n        'skip': 'Only available in .de',\n    }\n\n    def _real_extract(self, url):\n        if 'test' not in self._downloader.params:\n            self._downloader.report_warning('For now, this extractor only supports the 30 second previews. Patches welcome!')\n\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, playlist_id)\n        geoblocking_msg = self._html_search_regex(\n            r'<p class=\"soon-txt\">(.*?)</p>', webpage, 'geoblocking message',\n            default=None)\n        if geoblocking_msg is not None:\n            raise ExtractorError(\n                'Deezer said: %s' % geoblocking_msg, expected=True)\n\n        data_json = self._search_regex(\n            (r'__DZR_APP_STATE__\\s*=\\s*({.+?})\\s*</script>',\n             r'naboo\\.display\\(\\'[^\\']+\\',\\s*(.*?)\\);\\n'),\n            webpage, 'data JSON')\n        data = json.loads(data_json)\n\n        playlist_title = data.get('DATA', {}).get('TITLE')\n        playlist_uploader = data.get('DATA', {}).get('PARENT_USERNAME')\n        playlist_thumbnail = self._search_regex(\n            r'<img id=\"naboo_playlist_image\".*?src=\"([^\"]+)\"', webpage,\n            'playlist thumbnail')\n\n        preview_pattern = self._search_regex(\n            r\"var SOUND_PREVIEW_GATEWAY\\s*=\\s*'([^']+)';\", webpage,\n            'preview URL pattern', fatal=False)\n        entries = []\n        for s in data['SONGS']['data']:\n            puid = s['MD5_ORIGIN']\n            preview_video_url = preview_pattern.\\\n                replace('{0}', puid[0]).\\\n                replace('{1}', puid).\\\n                replace('{2}', s['MEDIA_VERSION'])\n            formats = [{\n                'format_id': 'preview',\n                'url': preview_video_url,\n                'preference': -100,  # Only the first 30 seconds\n                'ext': 'mp3',\n            }]\n            self._sort_formats(formats)\n            artists = ', '.join(\n                orderedSet(a['ART_NAME'] for a in s['ARTISTS']))\n            entries.append({\n                'id': s['SNG_ID'],\n                'duration': int_or_none(s.get('DURATION')),\n                'title': '%s - %s' % (artists, s['SNG_TITLE']),\n                'uploader': s['ART_NAME'],\n                'uploader_id': s['ART_ID'],\n                'age_limit': 16 if s.get('EXPLICIT_LYRICS') == '1' else 0,\n                'formats': formats,\n            })\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': playlist_title,\n            'uploader': playlist_uploader,\n            'thumbnail': playlist_thumbnail,\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "deezer.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/deezer.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}