{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    int_or_none,\n)\n\n\nclass XXXYMoviesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?xxxymovies\\.com/videos/(?P<id>\\d+)/(?P<display_id>[^/]+)'\n    _TEST = {\n        'url': 'http://xxxymovies.com/videos/138669/ecstatic-orgasm-sofcore/',\n        'md5': '810b1bdbbffff89dd13bdb369fe7be4b',\n        'info_dict': {\n            'id': '138669',\n            'display_id': 'ecstatic-orgasm-sofcore',\n            'ext': 'mp4',\n            'title': 'Ecstatic Orgasm Sofcore',\n            'duration': 931,\n            'categories': list,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_url = self._search_regex(\n            r\"video_url\\s*:\\s*'([^']+)'\", webpage, 'video URL')\n\n        title = self._html_search_regex(\n            [r'<div[^>]+\\bclass=\"block_header\"[^>]*>\\s*<h1>([^<]+)<',\n             r'<title>(.*?)\\s*-\\s*(?:XXXYMovies\\.com|XXX\\s+Movies)</title>'],\n            webpage, 'title')\n\n        thumbnail = self._search_regex(\n            r\"preview_url\\s*:\\s*'([^']+)'\",\n            webpage, 'thumbnail', fatal=False)\n\n        categories = self._html_search_meta(\n            'keywords', webpage, 'categories', default='').split(',')\n\n        duration = parse_duration(self._search_regex(\n            r'<span>Duration:</span>\\s*(\\d+:\\d+)',\n            webpage, 'duration', fatal=False))\n\n        view_count = int_or_none(self._html_search_regex(\n            r'<div class=\"video_views\">\\s*(\\d+)',\n            webpage, 'view count', fatal=False))\n        like_count = int_or_none(self._search_regex(\n            r'>\\s*Likes? <b>\\((\\d+)\\)',\n            webpage, 'like count', fatal=False))\n        dislike_count = int_or_none(self._search_regex(\n            r'>\\s*Dislike <b>\\((\\d+)\\)</b>',\n            webpage, 'dislike count', fatal=False))\n\n        age_limit = self._rta_search(webpage)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumbnail,\n            'categories': categories,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'age_limit': age_limit,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    parse_duration,\n    int_or_none,\n)\n\n\nclass XXXYMoviesIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?xxxymovies\\.com/videos/(?P<id>\\d+)/(?P<display_id>[^/]+)'\n    _TEST = {\n        'url': 'http://xxxymovies.com/videos/138669/ecstatic-orgasm-sofcore/',\n        'md5': '810b1bdbbffff89dd13bdb369fe7be4b',\n        'info_dict': {\n            'id': '138669',\n            'display_id': 'ecstatic-orgasm-sofcore',\n            'ext': 'mp4',\n            'title': 'Ecstatic Orgasm Sofcore',\n            'duration': 931,\n            'categories': list,\n            'view_count': int,\n            'like_count': int,\n            'dislike_count': int,\n            'age_limit': 18,\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_url = self._search_regex(\n            r\"video_url\\s*:\\s*'([^']+)'\", webpage, 'video URL')\n\n        title = self._html_search_regex(\n            [r'<div[^>]+\\bclass=\"block_header\"[^>]*>\\s*<h1>([^<]+)<',\n             r'<title>(.*?)\\s*-\\s*(?:XXXYMovies\\.com|XXX\\s+Movies)</title>'],\n            webpage, 'title')\n\n        thumbnail = self._search_regex(\n            r\"preview_url\\s*:\\s*'([^']+)'\",\n            webpage, 'thumbnail', fatal=False)\n\n        categories = self._html_search_meta(\n            'keywords', webpage, 'categories', default='').split(',')\n\n        duration = parse_duration(self._search_regex(\n            r'<span>Duration:</span>\\s*(\\d+:\\d+)',\n            webpage, 'duration', fatal=False))\n\n        view_count = int_or_none(self._html_search_regex(\n            r'<div class=\"video_views\">\\s*(\\d+)',\n            webpage, 'view count', fatal=False))\n        like_count = int_or_none(self._search_regex(\n            r'>\\s*Likes? <b>\\((\\d+)\\)',\n            webpage, 'like count', fatal=False))\n        dislike_count = int_or_none(self._search_regex(\n            r'>\\s*Dislike <b>\\((\\d+)\\)</b>',\n            webpage, 'dislike count', fatal=False))\n\n        age_limit = self._rta_search(webpage)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumbnail,\n            'categories': categories,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'dislike_count': dislike_count,\n            'age_limit': age_limit,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "xxxymovies.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/xxxymovies.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}