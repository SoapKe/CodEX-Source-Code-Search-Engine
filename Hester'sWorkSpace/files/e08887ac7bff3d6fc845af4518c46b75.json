{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Ansible by Red Hat, inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'network'}\n\nDOCUMENTATION = \"\"\"\n---\nmodule: net_user\nversion_added: \"2.4\"\nauthor: \"Trishna Guha (@trishnaguha)\"\nshort_description: Manage the aggregate of local users on network device\ndescription:\n  - This module provides declarative management of the local usernames\n    configured on network devices. It allows playbooks to manage\n    either individual usernames or the aggregate of usernames in the\n    current running config. It also supports purging usernames from the\n    configuration that are not explicitly defined.\noptions:\n  aggregate:\n    description:\n      - The set of username objects to be configured on the remote\n        network device. The list entries can either be the username\n        or a hash of username and properties. This argument is mutually\n        exclusive with the C(name) argument.\n  name:\n    description:\n      - The username to be configured on the remote network device.\n        This argument accepts a string value and is mutually exclusive\n        with the C(aggregate) argument.\n        Please note that this option is not same as C(provider username).\n  configured_password:\n    description:\n      - The password to be configured on the remote network device. The\n        password needs to be provided in clear and it will be encrypted\n        on the device.\n        Please note that this option is not same as C(provider password).\n  update_password:\n    description:\n      - Since passwords are encrypted in the device running config, this\n        argument will instruct the module when to change the password.  When\n        set to C(always), the password will always be updated in the device\n        and when set to C(on_create) the password will be updated only if\n        the username is created.\n    default: always\n    choices: ['on_create', 'always']\n  privilege:\n    description:\n      - The C(privilege) argument configures the privilege level of the\n        user when logged into the system. This argument accepts integer\n        values in the range of 1 to 15.\n  role:\n    description:\n      - Configures the role for the username in the\n        device running configuration. The argument accepts a string value\n        defining the role name. This argument does not check if the role\n        has been configured on the device.\n  sshkey:\n    description:\n      - Specifies the SSH public key to configure\n        for the given username. This argument accepts a valid SSH key value.\n  nopassword:\n    description:\n      - Defines the username without assigning\n        a password. This will allow the user to login to the system\n        without being authenticated by a password.\n    type: bool\n  purge:\n    description:\n      - Instructs the module to consider the\n        resource definition absolute. It will remove any previously\n        configured usernames on the device with the exception of the\n        `admin` user (the current defined set of users).\n    type: bool\n    default: false\n  state:\n    description:\n      - Configures the state of the username definition\n        as it relates to the device operational configuration. When set\n        to I(present), the username(s) should be configured in the device active\n        configuration and when set to I(absent) the username(s) should not be\n        in the device active configuration\n    default: present\n    choices: ['present', 'absent']\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create a new user\n  net_user:\n    name: ansible\n    sshkey: \"{{ lookup('file', '~/.ssh/id_rsa.pub') }}\"\n    state: present\n\n- name: remove all users except admin\n  net_user:\n    purge: yes\n\n- name: set multiple users to privilege level 15\n  net_user:\n    aggregate:\n      - { name: netop }\n      - { name: netend }\n    privilege: 15\n    state: present\n\n- name: Change Password for User netop\n  net_user:\n    name: netop\n    password: \"{{ new_password }}\"\n    update_password: always\n    state: present\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The list of configuration mode commands to send to the device\n  returned: always\n  type: list\n  sample:\n    - username ansible secret password\n    - username admin secret admin\n\"\"\"\n", "comments": "        module  net user version added   2 4  author   trishna guha ( trishnaguha)  short description  manage aggregate local users network device description      this module provides declarative management local usernames     configured network devices  it allows playbooks manage     either individual usernames aggregate usernames     current running config  it also supports purging usernames     configuration explicitly defined  options    aggregate      description          the set username objects configured remote         network device  the list entries either username         hash username properties  this argument mutually         exclusive c(name) argument    name      description          the username configured remote network device          this argument accepts string value mutually exclusive         c(aggregate) argument          please note option c(provider username)    configured password      description          the password configured remote network device  the         password needs provided clear encrypted         device          please note option c(provider password)    update password      description          since passwords encrypted device running config          argument instruct module change password   when         set c(always)  password always updated device         set c(on create) password updated         username created      default  always     choices    create    always     privilege      description          the c(privilege) argument configures privilege level         user logged system  this argument accepts integer         values range 1 15    role      description          configures role username         device running configuration  the argument accepts string value         defining role name  this argument check role         configured device    sshkey      description          specifies ssh public key configure         given username  this argument accepts valid ssh key value    nopassword      description          defines username without assigning         password  this allow user login system         without authenticated password      type  bool   purge      description          instructs module consider         resource definition absolute  it remove previously         configured usernames device exception          admin  user (the current defined set users)      type  bool     default  false   state      description          configures state username definition         relates device operational configuration  when set         i(present)  username(s) configured device active         configuration set i(absent) username(s)         device active configuration     default  present     choices    present    absent        examples         name  create new user   net user      name  ansible     sshkey      lookup( file       ssh id rsa pub )         state  present    name  remove users except admin   net user      purge  yes    name  set multiple users privilege level 15   net user      aggregate            name  netop             name  netend       privilege  15     state  present    name  change password user netop   net user      name  netop     password      new password         update password  always     state  present      return       commands    description  the list configuration mode commands send device   returned  always   type  list   sample        username ansible secret password       username admin secret admin         usr bin python        coding  utf 8        (c) 2017  ansible red hat  inc    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# (c) 2017, Ansible by Red Hat, inc\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'network'}\n\nDOCUMENTATION = \"\"\"\n---\nmodule: net_user\nversion_added: \"2.4\"\nauthor: \"Trishna Guha (@trishnaguha)\"\nshort_description: Manage the aggregate of local users on network device\ndescription:\n  - This module provides declarative management of the local usernames\n    configured on network devices. It allows playbooks to manage\n    either individual usernames or the aggregate of usernames in the\n    current running config. It also supports purging usernames from the\n    configuration that are not explicitly defined.\noptions:\n  aggregate:\n    description:\n      - The set of username objects to be configured on the remote\n        network device. The list entries can either be the username\n        or a hash of username and properties. This argument is mutually\n        exclusive with the C(name) argument.\n  name:\n    description:\n      - The username to be configured on the remote network device.\n        This argument accepts a string value and is mutually exclusive\n        with the C(aggregate) argument.\n        Please note that this option is not same as C(provider username).\n  configured_password:\n    description:\n      - The password to be configured on the remote network device. The\n        password needs to be provided in clear and it will be encrypted\n        on the device.\n        Please note that this option is not same as C(provider password).\n  update_password:\n    description:\n      - Since passwords are encrypted in the device running config, this\n        argument will instruct the module when to change the password.  When\n        set to C(always), the password will always be updated in the device\n        and when set to C(on_create) the password will be updated only if\n        the username is created.\n    default: always\n    choices: ['on_create', 'always']\n  privilege:\n    description:\n      - The C(privilege) argument configures the privilege level of the\n        user when logged into the system. This argument accepts integer\n        values in the range of 1 to 15.\n  role:\n    description:\n      - Configures the role for the username in the\n        device running configuration. The argument accepts a string value\n        defining the role name. This argument does not check if the role\n        has been configured on the device.\n  sshkey:\n    description:\n      - Specifies the SSH public key to configure\n        for the given username. This argument accepts a valid SSH key value.\n  nopassword:\n    description:\n      - Defines the username without assigning\n        a password. This will allow the user to login to the system\n        without being authenticated by a password.\n    type: bool\n  purge:\n    description:\n      - Instructs the module to consider the\n        resource definition absolute. It will remove any previously\n        configured usernames on the device with the exception of the\n        `admin` user (the current defined set of users).\n    type: bool\n    default: false\n  state:\n    description:\n      - Configures the state of the username definition\n        as it relates to the device operational configuration. When set\n        to I(present), the username(s) should be configured in the device active\n        configuration and when set to I(absent) the username(s) should not be\n        in the device active configuration\n    default: present\n    choices: ['present', 'absent']\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create a new user\n  net_user:\n    name: ansible\n    sshkey: \"{{ lookup('file', '~/.ssh/id_rsa.pub') }}\"\n    state: present\n\n- name: remove all users except admin\n  net_user:\n    purge: yes\n\n- name: set multiple users to privilege level 15\n  net_user:\n    aggregate:\n      - { name: netop }\n      - { name: netend }\n    privilege: 15\n    state: present\n\n- name: Change Password for User netop\n  net_user:\n    name: netop\n    password: \"{{ new_password }}\"\n    update_password: always\n    state: present\n\"\"\"\n\nRETURN = \"\"\"\ncommands:\n  description: The list of configuration mode commands to send to the device\n  returned: always\n  type: list\n  sample:\n    - username ansible secret password\n    - username admin secret admin\n\"\"\"\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "net_user.py", "id": "e08887ac7bff3d6fc845af4518c46b75", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/system/net_user.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}