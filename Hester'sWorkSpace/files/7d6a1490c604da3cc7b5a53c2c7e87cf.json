{"author": "tflearn", "code": "import tensorflow as tf\nimport tflearn\nimport unittest\nimport os\n\nclass TestModelsLoadingScope(unittest.TestCase):\n    \n\n    def test_dnn_loading_scope(self):\n\n        with tf.Graph().as_default():\n            X = [3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,7.042,10.791,5.313,7.997,5.654,9.27,3.1]\n            Y = [1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,2.827,3.465,1.65,2.904,2.42,2.94,1.3]\n            input = tflearn.input_data(shape=[None])\n            linear = tflearn.single_unit(input)\n            regression = tflearn.regression(linear, optimizer='sgd', loss='mean_square',\n                                            metric='R2', learning_rate=0.01)\n            m = tflearn.DNN(regression)\n            \n            m.fit(X, Y, n_epoch=1000, show_metric=True, snapshot_epoch=False)\n            res = m.predict([3.2])[0]\n            self.assertGreater(res, 1.3, \"DNN test (linear regression) failed! with score: \" + str(res) + \" expected > 1.3\")\n            self.assertLess(res, 1.8, \"DNN test (linear regression) failed! with score: \" + str(res) + \" expected < 1.8\")\n\n            \n            m.save(\"test_dnn.tflearn\")\n            self.assertTrue(os.path.exists(\"test_dnn.tflearn.index\"))\n\n        # Testing loading, with change of variable scope (saved with no scope, now loading into scopeA)\n        with tf.Graph().as_default():\t\n            with tf.variable_scope(\"scopeA\") as scope:\n                input = tflearn.input_data(shape=[None])\n                linear = tflearn.single_unit(input)\n                regression = tflearn.regression(linear, optimizer='sgd', loss='mean_square',\n                                                metric='R2', learning_rate=0.01)\n                m = tflearn.DNN(regression)\n                def try_load():\n                    m.load(\"test_dnn.tflearn\")\n                self.assertRaises(tf.errors.NotFoundError, try_load)\t\n\n                m.load(\"test_dnn.tflearn\", variable_name_map=(\"scopeA/\", \"\"))\t\n                res = m.predict([3.2])[0]\n                self.assertGreater(res, 1.3, \"DNN test (linear regression) failed after loading model! score: \" + str(res) + \" expected > 1.3\")\n                self.assertLess(res, 1.8, \"DNN test (linear regression) failed after loading model! score: \" + str(res) + \" expected < 1.8\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "comments": "        testing loading scope  using dnn            testing fit predict    testing save method    testing loading  change variable scope (saved scope  loading scopea)    start clear graph    fails  since names file  scopea     succeeds  variable names rewritten ", "content": "import tensorflow as tf\nimport tflearn\nimport unittest\nimport os\n\nclass TestModelsLoadingScope(unittest.TestCase):\n    \"\"\"\n    Testing loading scope, using DNN\n    \"\"\"\n\n    def test_dnn_loading_scope(self):\n\n        with tf.Graph().as_default():\n            X = [3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,7.042,10.791,5.313,7.997,5.654,9.27,3.1]\n            Y = [1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,2.827,3.465,1.65,2.904,2.42,2.94,1.3]\n            input = tflearn.input_data(shape=[None])\n            linear = tflearn.single_unit(input)\n            regression = tflearn.regression(linear, optimizer='sgd', loss='mean_square',\n                                            metric='R2', learning_rate=0.01)\n            m = tflearn.DNN(regression)\n            # Testing fit and predict\n            m.fit(X, Y, n_epoch=1000, show_metric=True, snapshot_epoch=False)\n            res = m.predict([3.2])[0]\n            self.assertGreater(res, 1.3, \"DNN test (linear regression) failed! with score: \" + str(res) + \" expected > 1.3\")\n            self.assertLess(res, 1.8, \"DNN test (linear regression) failed! with score: \" + str(res) + \" expected < 1.8\")\n\n            # Testing save method\n            m.save(\"test_dnn.tflearn\")\n            self.assertTrue(os.path.exists(\"test_dnn.tflearn.index\"))\n\n        # Testing loading, with change of variable scope (saved with no scope, now loading into scopeA)\n        with tf.Graph().as_default():\t# start with clear graph\n            with tf.variable_scope(\"scopeA\") as scope:\n                input = tflearn.input_data(shape=[None])\n                linear = tflearn.single_unit(input)\n                regression = tflearn.regression(linear, optimizer='sgd', loss='mean_square',\n                                                metric='R2', learning_rate=0.01)\n                m = tflearn.DNN(regression)\n                def try_load():\n                    m.load(\"test_dnn.tflearn\")\n                self.assertRaises(tf.errors.NotFoundError, try_load)\t# fails, since names in file don't have \"scopeA\"\n\n                m.load(\"test_dnn.tflearn\", variable_name_map=(\"scopeA/\", \"\"))\t# succeeds, because variable names are rewritten\n                res = m.predict([3.2])[0]\n                self.assertGreater(res, 1.3, \"DNN test (linear regression) failed after loading model! score: \" + str(res) + \" expected > 1.3\")\n                self.assertLess(res, 1.8, \"DNN test (linear regression) failed after loading model! score: \" + str(res) + \" expected < 1.8\")\n\nif __name__ == \"__main__\":\n    unittest.main()\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "test_models_loading_scope.py", "id": "7d6a1490c604da3cc7b5a53c2c7e87cf", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/tests/test_models_loading_scope.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}