{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, exceptions, fields, models, _\n\n\nclass StockWarehouse(models.Model):\n    _inherit = 'stock.warehouse'\n\n    manufacture_to_resupply = fields.Boolean(\n        'Manufacture in this Warehouse', default=True,\n        help=\"When products are manufactured, they can be manufactured in this warehouse.\")\n    manufacture_pull_id = fields.Many2one(\n        'procurement.rule', 'Manufacture Rule')\n    manu_type_id = fields.Many2one(\n        'stock.picking.type', 'Manufacturing Operation Type',\n        domain=[('code', '=', 'mrp_operation')])\n\n    def create_sequences_and_picking_types(self):\n        res = super(StockWarehouse, self).create_sequences_and_picking_types()\n        self._create_manufacturing_picking_type()\n        return res\n\n    @api.multi\n    def get_routes_dict(self):\n        result = super(StockWarehouse, self).get_routes_dict()\n        for warehouse in self:\n            result[warehouse.id]['manufacture'] = [self.Routing(warehouse.lot_stock_id, warehouse.lot_stock_id, warehouse.int_type_id)]\n        return result\n\n    def _get_manufacture_route_id(self):\n        manufacture_route_id = self.env.ref('mrp.route_warehouse0_manufacture').id\n        if not manufacture_route_id:\n            manufacture_route_id = self.env['stock.location.route'].search([('name', 'like', _('Manufacture'))], limit=1).id\n        if not manufacture_route_id:\n            raise exceptions.UserError(_('Can\\'t find any generic Manufacture route.'))\n        return manufacture_route_id\n\n    def _get_manufacture_pull_rules_values(self, route_values):\n        if not self.manu_type_id:\n            self._create_manufacturing_picking_type()\n        dummy, pull_rules_list = self._get_push_pull_rules_values(route_values, pull_values={\n            'name': self._format_routename(_(' Manufacture')),\n            'location_src_id': False,  \n            'action': 'manufacture',\n            'route_id': self._get_manufacture_route_id(),\n            'picking_type_id': self.manu_type_id.id,\n            'propagate': False,\n            'active': True})\n        return pull_rules_list\n\n    def _create_manufacturing_picking_type(self):\n        \n        picking_type_obj = self.env['stock.picking.type']\n        seq_obj = self.env['ir.sequence']\n        for warehouse in self:\n            #man_seq_id = seq_obj.sudo().create('name': warehouse.name + _(' Sequence Manufacturing'), 'prefix': warehouse.code + '/MANU/', 'padding')\n            wh_stock_loc = warehouse.lot_stock_id\n            seq = seq_obj.search([('code', '=', 'mrp.production')], limit=1)\n            other_pick_type = picking_type_obj.search([('warehouse_id', '=', warehouse.id)], order = 'sequence desc', limit=1)\n            color = other_pick_type.color if other_pick_type else 0\n            max_sequence = other_pick_type and other_pick_type.sequence or 0\n            manu_type = picking_type_obj.create({\n                'name': _('Manufacturing'),\n                'warehouse_id': warehouse.id,\n                'code': 'mrp_operation',\n                'use_create_lots': True,\n                'use_existing_lots': False,\n                'sequence_id': seq.id,\n                'default_location_src_id': wh_stock_loc.id,\n                'default_location_dest_id': wh_stock_loc.id,\n                'sequence': max_sequence,\n                'color': color})\n            warehouse.write({'manu_type_id': manu_type.id})\n\n    def _create_or_update_manufacture_pull(self, routes_data):\n        routes_data = routes_data or self.get_routes_dict()\n        for warehouse in self:\n            routings = routes_data[warehouse.id]['manufacture']\n            if warehouse.manufacture_pull_id:\n                manufacture_pull = warehouse.manufacture_pull_id\n                manufacture_pull.write(warehouse._get_manufacture_pull_rules_values(routings)[0])\n            else:\n                manufacture_pull = self.env['procurement.rule'].create(warehouse._get_manufacture_pull_rules_values(routings)[0])\n        return manufacture_pull\n\n    @api.multi\n    def create_routes(self):\n        res = super(StockWarehouse, self).create_routes()\n        self.ensure_one()\n        routes_data = self.get_routes_dict()\n        manufacture_pull = self._create_or_update_manufacture_pull(routes_data)\n        res['manufacture_pull_id'] = manufacture_pull.id\n        return res\n\n    @api.multi\n    def write(self, vals):\n        if 'manufacture_to_resupply' in vals:\n            if vals.get(\"manufacture_to_resupply\"):\n                for warehouse in self.filtered(lambda warehouse: not warehouse.manufacture_pull_id):\n                    manufacture_pull = warehouse._create_or_update_manufacture_pull(self.get_routes_dict())\n                    vals['manufacture_pull_id'] = manufacture_pull.id\n                for warehouse in self:\n                    if not warehouse.manu_type_id:\n                        warehouse._create_manufacturing_picking_type()\n                    warehouse.manu_type_id.active = True\n            else:\n                for warehouse in self:\n                    if warehouse.manu_type_id:\n                        warehouse.manu_type_id.active = False\n                self.mapped('manufacture_pull_id').unlink()\n        return super(StockWarehouse, self).write(vals)\n\n    @api.multi\n    def _get_all_routes(self):\n        routes = super(StockWarehouse, self).get_all_routes_for_wh()\n        routes |= self.filtered(lambda self: self.manufacture_to_resupply and self.manufacture_pull_id and self.manufacture_pull_id.route_id).mapped('manufacture_pull_id').mapped('route_id')\n        return routes\n\n    @api.multi\n    def _update_name_and_code(self, name=False, code=False):\n        res = super(StockWarehouse, self)._update_name_and_code(name, code)\n        \n        for warehouse in self:\n            if warehouse.manufacture_pull_id and name:\n                warehouse.manufacture_pull_id.write({'name': warehouse.manufacture_pull_id.name.replace(warehouse.name, name, 1)})\n        return res\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     tde fixme    tde cleanme   man seq id   seq obj sudo() create( name   warehouse name    (  sequence manufacturing )   prefix   warehouse code     manu     padding )    change manufacture procurement rule name ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, exceptions, fields, models, _\n\n\nclass StockWarehouse(models.Model):\n    _inherit = 'stock.warehouse'\n\n    manufacture_to_resupply = fields.Boolean(\n        'Manufacture in this Warehouse', default=True,\n        help=\"When products are manufactured, they can be manufactured in this warehouse.\")\n    manufacture_pull_id = fields.Many2one(\n        'procurement.rule', 'Manufacture Rule')\n    manu_type_id = fields.Many2one(\n        'stock.picking.type', 'Manufacturing Operation Type',\n        domain=[('code', '=', 'mrp_operation')])\n\n    def create_sequences_and_picking_types(self):\n        res = super(StockWarehouse, self).create_sequences_and_picking_types()\n        self._create_manufacturing_picking_type()\n        return res\n\n    @api.multi\n    def get_routes_dict(self):\n        result = super(StockWarehouse, self).get_routes_dict()\n        for warehouse in self:\n            result[warehouse.id]['manufacture'] = [self.Routing(warehouse.lot_stock_id, warehouse.lot_stock_id, warehouse.int_type_id)]\n        return result\n\n    def _get_manufacture_route_id(self):\n        manufacture_route_id = self.env.ref('mrp.route_warehouse0_manufacture').id\n        if not manufacture_route_id:\n            manufacture_route_id = self.env['stock.location.route'].search([('name', 'like', _('Manufacture'))], limit=1).id\n        if not manufacture_route_id:\n            raise exceptions.UserError(_('Can\\'t find any generic Manufacture route.'))\n        return manufacture_route_id\n\n    def _get_manufacture_pull_rules_values(self, route_values):\n        if not self.manu_type_id:\n            self._create_manufacturing_picking_type()\n        dummy, pull_rules_list = self._get_push_pull_rules_values(route_values, pull_values={\n            'name': self._format_routename(_(' Manufacture')),\n            'location_src_id': False,  # TDE FIXME\n            'action': 'manufacture',\n            'route_id': self._get_manufacture_route_id(),\n            'picking_type_id': self.manu_type_id.id,\n            'propagate': False,\n            'active': True})\n        return pull_rules_list\n\n    def _create_manufacturing_picking_type(self):\n        # TDE CLEANME\n        picking_type_obj = self.env['stock.picking.type']\n        seq_obj = self.env['ir.sequence']\n        for warehouse in self:\n            #man_seq_id = seq_obj.sudo().create('name': warehouse.name + _(' Sequence Manufacturing'), 'prefix': warehouse.code + '/MANU/', 'padding')\n            wh_stock_loc = warehouse.lot_stock_id\n            seq = seq_obj.search([('code', '=', 'mrp.production')], limit=1)\n            other_pick_type = picking_type_obj.search([('warehouse_id', '=', warehouse.id)], order = 'sequence desc', limit=1)\n            color = other_pick_type.color if other_pick_type else 0\n            max_sequence = other_pick_type and other_pick_type.sequence or 0\n            manu_type = picking_type_obj.create({\n                'name': _('Manufacturing'),\n                'warehouse_id': warehouse.id,\n                'code': 'mrp_operation',\n                'use_create_lots': True,\n                'use_existing_lots': False,\n                'sequence_id': seq.id,\n                'default_location_src_id': wh_stock_loc.id,\n                'default_location_dest_id': wh_stock_loc.id,\n                'sequence': max_sequence,\n                'color': color})\n            warehouse.write({'manu_type_id': manu_type.id})\n\n    def _create_or_update_manufacture_pull(self, routes_data):\n        routes_data = routes_data or self.get_routes_dict()\n        for warehouse in self:\n            routings = routes_data[warehouse.id]['manufacture']\n            if warehouse.manufacture_pull_id:\n                manufacture_pull = warehouse.manufacture_pull_id\n                manufacture_pull.write(warehouse._get_manufacture_pull_rules_values(routings)[0])\n            else:\n                manufacture_pull = self.env['procurement.rule'].create(warehouse._get_manufacture_pull_rules_values(routings)[0])\n        return manufacture_pull\n\n    @api.multi\n    def create_routes(self):\n        res = super(StockWarehouse, self).create_routes()\n        self.ensure_one()\n        routes_data = self.get_routes_dict()\n        manufacture_pull = self._create_or_update_manufacture_pull(routes_data)\n        res['manufacture_pull_id'] = manufacture_pull.id\n        return res\n\n    @api.multi\n    def write(self, vals):\n        if 'manufacture_to_resupply' in vals:\n            if vals.get(\"manufacture_to_resupply\"):\n                for warehouse in self.filtered(lambda warehouse: not warehouse.manufacture_pull_id):\n                    manufacture_pull = warehouse._create_or_update_manufacture_pull(self.get_routes_dict())\n                    vals['manufacture_pull_id'] = manufacture_pull.id\n                for warehouse in self:\n                    if not warehouse.manu_type_id:\n                        warehouse._create_manufacturing_picking_type()\n                    warehouse.manu_type_id.active = True\n            else:\n                for warehouse in self:\n                    if warehouse.manu_type_id:\n                        warehouse.manu_type_id.active = False\n                self.mapped('manufacture_pull_id').unlink()\n        return super(StockWarehouse, self).write(vals)\n\n    @api.multi\n    def _get_all_routes(self):\n        routes = super(StockWarehouse, self).get_all_routes_for_wh()\n        routes |= self.filtered(lambda self: self.manufacture_to_resupply and self.manufacture_pull_id and self.manufacture_pull_id.route_id).mapped('manufacture_pull_id').mapped('route_id')\n        return routes\n\n    @api.multi\n    def _update_name_and_code(self, name=False, code=False):\n        res = super(StockWarehouse, self)._update_name_and_code(name, code)\n        # change the manufacture procurement rule name\n        for warehouse in self:\n            if warehouse.manufacture_pull_id and name:\n                warehouse.manufacture_pull_id.write({'name': warehouse.manufacture_pull_id.name.replace(warehouse.name, name, 1)})\n        return res\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "stock_warehouse.py", "id": "703fc141886a881a1215713a5edd6ec5", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/mrp/models/stock_warehouse.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}