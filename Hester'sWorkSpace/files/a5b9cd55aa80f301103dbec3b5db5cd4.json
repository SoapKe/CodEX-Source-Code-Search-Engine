{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport os\nimport subprocess\n\nfrom .common import FileDownloader\nfrom ..utils import (\n    check_executable,\n    encodeFilename,\n)\n\n\nclass RtspFD(FileDownloader):\n    def real_download(self, filename, info_dict):\n        url = info_dict['url']\n        self.report_destination(filename)\n        tmpfilename = self.temp_name(filename)\n\n        if check_executable('mplayer', ['-h']):\n            args = [\n                'mplayer', '-really-quiet', '-vo', 'null', '-vc', 'dummy',\n                '-dumpstream', '-dumpfile', tmpfilename, url]\n        elif check_executable('mpv', ['-h']):\n            args = [\n                'mpv', '-really-quiet', '--vo=null', '--stream-dump=' + tmpfilename, url]\n        else:\n            self.report_error('MMS or RTSP download detected but neither \"mplayer\" nor \"mpv\" could be run. Please install any.')\n            return False\n\n        self._debug_cmd(args)\n\n        retval = subprocess.call(args)\n        if retval == 0:\n            fsize = os.path.getsize(encodeFilename(tmpfilename))\n            self.to_screen('\\r[%s] %s bytes' % (args[0], fsize))\n            self.try_rename(tmpfilename, filename)\n            self._hook_progress({\n                'downloaded_bytes': fsize,\n                'total_bytes': fsize,\n                'filename': filename,\n                'status': 'finished',\n            })\n            return True\n        else:\n            self.to_stderr('\\n')\n            self.report_error('%s exited with code %d' % (args[0], retval))\n            return False\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport os\nimport subprocess\n\nfrom .common import FileDownloader\nfrom ..utils import (\n    check_executable,\n    encodeFilename,\n)\n\n\nclass RtspFD(FileDownloader):\n    def real_download(self, filename, info_dict):\n        url = info_dict['url']\n        self.report_destination(filename)\n        tmpfilename = self.temp_name(filename)\n\n        if check_executable('mplayer', ['-h']):\n            args = [\n                'mplayer', '-really-quiet', '-vo', 'null', '-vc', 'dummy',\n                '-dumpstream', '-dumpfile', tmpfilename, url]\n        elif check_executable('mpv', ['-h']):\n            args = [\n                'mpv', '-really-quiet', '--vo=null', '--stream-dump=' + tmpfilename, url]\n        else:\n            self.report_error('MMS or RTSP download detected but neither \"mplayer\" nor \"mpv\" could be run. Please install any.')\n            return False\n\n        self._debug_cmd(args)\n\n        retval = subprocess.call(args)\n        if retval == 0:\n            fsize = os.path.getsize(encodeFilename(tmpfilename))\n            self.to_screen('\\r[%s] %s bytes' % (args[0], fsize))\n            self.try_rename(tmpfilename, filename)\n            self._hook_progress({\n                'downloaded_bytes': fsize,\n                'total_bytes': fsize,\n                'filename': filename,\n                'status': 'finished',\n            })\n            return True\n        else:\n            self.to_stderr('\\n')\n            self.report_error('%s exited with code %d' % (args[0], retval))\n            return False\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rtsp.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/downloader/rtsp.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}