{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import models, fields, api\nfrom odoo.tools.safe_eval import safe_eval\n\n\nclass AccountTaxPython(models.Model):\n    _inherit = \"account.tax\"\n\n    amount_type = fields.Selection(selection_add=[('code', 'Python Code')])\n\n    python_compute = fields.Text(string='Python Code', default=\"result = price_unit * 0.10\",\n        help=\"Compute the amount of the tax by setting the variable 'result'.\\n\\n\"\n            \":param base_amount: float, actual amount on which the tax is applied\\n\"\n            \":param price_unit: float\\n\"\n            \":param quantity: float\\n\"\n            \":param company: res.company recordset singleton\\n\"\n            \":param product: product.product recordset singleton or None\\n\"\n            \":param partner: res.partner recordset singleton or None\")\n    python_applicable = fields.Text(string='Applicable Code', default=\"result = True\",\n        help=\"Determine if the tax will be applied by setting the variable 'result' to True or False.\\n\\n\"\n            \":param price_unit: float\\n\"\n            \":param quantity: float\\n\"\n            \":param company: res.company recordset singleton\\n\"\n            \":param product: product.product recordset singleton or None\\n\"\n            \":param partner: res.partner recordset singleton or None\")\n\n    def _compute_amount(self, base_amount, price_unit, quantity=1.0, product=None, partner=None):\n        self.ensure_one()\n        if self.amount_type == 'code':\n            company = self.env.user.company_id\n            localdict = {'base_amount': base_amount, 'price_unit':price_unit, 'quantity': quantity, 'product':product, 'partner':partner, 'company': company}\n            safe_eval(self.python_compute, localdict, mode=\"exec\", nocopy=True)\n            return localdict['result']\n        return super(AccountTaxPython, self)._compute_amount(base_amount, price_unit, quantity, product, partner)\n\n    @api.multi\n    def compute_all(self, price_unit, currency=None, quantity=1.0, product=None, partner=None):\n        taxes = self.filtered(lambda r: r.amount_type != 'code')\n        company = self.env.user.company_id\n        for tax in self.filtered(lambda r: r.amount_type == 'code'):\n            localdict = {'price_unit': price_unit, 'quantity': quantity, 'product': product, 'partner': partner, 'company': company}\n            safe_eval(tax.python_applicable, localdict, mode=\"exec\", nocopy=True)\n            if localdict.get('result', False):\n                taxes += tax\n        return super(AccountTaxPython, taxes).compute_all(price_unit, currency, quantity, product, partner)\n\n\nclass AccountTaxTemplatePython(models.Model):\n    _inherit = 'account.tax.template'\n\n    amount_type = fields.Selection(selection_add=[('code', 'Python Code')])\n\n    python_compute = fields.Text(string='Python Code', default=\"result = price_unit * 0.10\",\n        help=\"Compute the amount of the tax by setting the variable 'result'.\\n\\n\"\n            \":param base_amount: float, actual amount on which the tax is applied\\n\"\n            \":param price_unit: float\\n\"\n            \":param quantity: float\\n\"\n            \":param product: product.product recordset singleton or None\\n\"\n            \":param partner: res.partner recordset singleton or None\")\n    python_applicable = fields.Text(string='Applicable Code', default=\"result = True\",\n        help=\"Determine if the tax will be applied by setting the variable 'result' to True or False.\\n\\n\"\n            \":param price_unit: float\\n\"\n            \":param quantity: float\\n\"\n            \":param product: product.product recordset singleton or None\\n\"\n            \":param partner: res.partner recordset singleton or None\")\n\n    def _get_tax_vals(self, company, tax_template_to_tax):\n        \n        self.ensure_one()\n        res = super(AccountTaxTemplatePython, self)._get_tax_vals(company, tax_template_to_tax)\n        res['python_compute'] = self.python_compute\n        res['python_applicable'] = self.python_applicable\n        return res\n", "comments": "    this method generates dictionnary values tax created                     coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import models, fields, api\nfrom odoo.tools.safe_eval import safe_eval\n\n\nclass AccountTaxPython(models.Model):\n    _inherit = \"account.tax\"\n\n    amount_type = fields.Selection(selection_add=[('code', 'Python Code')])\n\n    python_compute = fields.Text(string='Python Code', default=\"result = price_unit * 0.10\",\n        help=\"Compute the amount of the tax by setting the variable 'result'.\\n\\n\"\n            \":param base_amount: float, actual amount on which the tax is applied\\n\"\n            \":param price_unit: float\\n\"\n            \":param quantity: float\\n\"\n            \":param company: res.company recordset singleton\\n\"\n            \":param product: product.product recordset singleton or None\\n\"\n            \":param partner: res.partner recordset singleton or None\")\n    python_applicable = fields.Text(string='Applicable Code', default=\"result = True\",\n        help=\"Determine if the tax will be applied by setting the variable 'result' to True or False.\\n\\n\"\n            \":param price_unit: float\\n\"\n            \":param quantity: float\\n\"\n            \":param company: res.company recordset singleton\\n\"\n            \":param product: product.product recordset singleton or None\\n\"\n            \":param partner: res.partner recordset singleton or None\")\n\n    def _compute_amount(self, base_amount, price_unit, quantity=1.0, product=None, partner=None):\n        self.ensure_one()\n        if self.amount_type == 'code':\n            company = self.env.user.company_id\n            localdict = {'base_amount': base_amount, 'price_unit':price_unit, 'quantity': quantity, 'product':product, 'partner':partner, 'company': company}\n            safe_eval(self.python_compute, localdict, mode=\"exec\", nocopy=True)\n            return localdict['result']\n        return super(AccountTaxPython, self)._compute_amount(base_amount, price_unit, quantity, product, partner)\n\n    @api.multi\n    def compute_all(self, price_unit, currency=None, quantity=1.0, product=None, partner=None):\n        taxes = self.filtered(lambda r: r.amount_type != 'code')\n        company = self.env.user.company_id\n        for tax in self.filtered(lambda r: r.amount_type == 'code'):\n            localdict = {'price_unit': price_unit, 'quantity': quantity, 'product': product, 'partner': partner, 'company': company}\n            safe_eval(tax.python_applicable, localdict, mode=\"exec\", nocopy=True)\n            if localdict.get('result', False):\n                taxes += tax\n        return super(AccountTaxPython, taxes).compute_all(price_unit, currency, quantity, product, partner)\n\n\nclass AccountTaxTemplatePython(models.Model):\n    _inherit = 'account.tax.template'\n\n    amount_type = fields.Selection(selection_add=[('code', 'Python Code')])\n\n    python_compute = fields.Text(string='Python Code', default=\"result = price_unit * 0.10\",\n        help=\"Compute the amount of the tax by setting the variable 'result'.\\n\\n\"\n            \":param base_amount: float, actual amount on which the tax is applied\\n\"\n            \":param price_unit: float\\n\"\n            \":param quantity: float\\n\"\n            \":param product: product.product recordset singleton or None\\n\"\n            \":param partner: res.partner recordset singleton or None\")\n    python_applicable = fields.Text(string='Applicable Code', default=\"result = True\",\n        help=\"Determine if the tax will be applied by setting the variable 'result' to True or False.\\n\\n\"\n            \":param price_unit: float\\n\"\n            \":param quantity: float\\n\"\n            \":param product: product.product recordset singleton or None\\n\"\n            \":param partner: res.partner recordset singleton or None\")\n\n    def _get_tax_vals(self, company, tax_template_to_tax):\n        \"\"\" This method generates a dictionnary of all the values for the tax that will be created.\n        \"\"\"\n        self.ensure_one()\n        res = super(AccountTaxTemplatePython, self)._get_tax_vals(company, tax_template_to_tax)\n        res['python_compute'] = self.python_compute\n        res['python_applicable'] = self.python_applicable\n        return res\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "account_tax.py", "id": "9aff706116851f0090d88b26d9e8c497", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account_tax_python/models/account_tax.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}