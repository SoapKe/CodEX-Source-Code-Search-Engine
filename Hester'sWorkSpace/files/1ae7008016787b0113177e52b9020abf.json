{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models\n\n\nclass ProjectTaskMergeWizard(models.TransientModel):\n    _name = 'project.task.merge.wizard'\n\n    task_ids = fields.Many2many('project.task', string=\"Tasks to Merge\", required=True)\n    user_id = fields.Many2one('res.users', string=\"Assigned to\")\n    create_new_task = fields.Boolean('Create a new task')\n    target_task_name = fields.Char('New task name')\n    target_project_id = fields.Many2one('project.project', string=\"Target Project\")\n    target_task_id = fields.Many2one('project.task', string=\"Merge into an existing task\")\n\n    @api.multi\n    def merge_tasks(self):\n        values = {\n            'user_id': self.user_id.id,\n            'description': self.merge_description(),\n        }\n        if self.create_new_task:\n            values.update({\n                'name': self.target_task_name,\n                'project_id': self.target_project_id.id\n            })\n            self.target_task_id = self.env['project.task'].create(values)\n        else:\n            self.target_task_id.write(values)\n        self.merge_followers()\n        self.target_task_id.message_post_with_view(\n            self.env.ref('project.mail_template_task_merge'),\n            values={'target': True, 'tasks': self.task_ids - self.target_task_id},\n            subtype_id=self.env.ref('mail.mt_comment').id\n        )\n        (self.task_ids - self.target_task_id).message_post_with_view(\n            self.env.ref('project.mail_template_task_merge'),\n            values={'target': False, 'task': self.target_task_id},\n            subtype_id=self.env.ref('mail.mt_comment').id\n        )\n        (self.task_ids - self.target_task_id).write({'active': False})\n        return {\n            \"type\": \"ir.actions.act_window\",\n            \"res_model\": \"project.task\",\n            \"views\": [[False, \"form\"]],\n            \"res_id\": self.target_task_id.id,\n        }\n\n    @api.multi\n    def merge_description(self):\n        return '<br/>'.join(self.task_ids.mapped(lambda task: \"Description from task <b>%s</b>:<br/>%s\" % (task.name, task.description or 'No description')))\n\n    @api.multi\n    def merge_followers(self):\n        self.target_task_id.message_subscribe(\n            partner_ids=(self.task_ids - self.target_task_id).mapped('message_partner_ids').ids,\n            channel_ids=(self.task_ids - self.target_task_id).mapped('message_channel_ids').ids,\n        )\n\n    @api.model\n    def default_get(self, fields):\n        result = super(ProjectTaskMergeWizard, self).default_get(fields)\n        selected_tasks = self.env['project.task'].browse(self.env.context.get('active_ids', False))\n        assigned_tasks = selected_tasks.filtered(lambda task: task.user_id)\n        result.update({\n            'task_ids': selected_tasks.ids,\n            'user_id': assigned_tasks and assigned_tasks[0].user_id.id or False,\n            'target_project_id': selected_tasks[0].project_id.id,\n            'target_task_id': selected_tasks[0].id\n        })\n        return result\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, fields, models\n\n\nclass ProjectTaskMergeWizard(models.TransientModel):\n    _name = 'project.task.merge.wizard'\n\n    task_ids = fields.Many2many('project.task', string=\"Tasks to Merge\", required=True)\n    user_id = fields.Many2one('res.users', string=\"Assigned to\")\n    create_new_task = fields.Boolean('Create a new task')\n    target_task_name = fields.Char('New task name')\n    target_project_id = fields.Many2one('project.project', string=\"Target Project\")\n    target_task_id = fields.Many2one('project.task', string=\"Merge into an existing task\")\n\n    @api.multi\n    def merge_tasks(self):\n        values = {\n            'user_id': self.user_id.id,\n            'description': self.merge_description(),\n        }\n        if self.create_new_task:\n            values.update({\n                'name': self.target_task_name,\n                'project_id': self.target_project_id.id\n            })\n            self.target_task_id = self.env['project.task'].create(values)\n        else:\n            self.target_task_id.write(values)\n        self.merge_followers()\n        self.target_task_id.message_post_with_view(\n            self.env.ref('project.mail_template_task_merge'),\n            values={'target': True, 'tasks': self.task_ids - self.target_task_id},\n            subtype_id=self.env.ref('mail.mt_comment').id\n        )\n        (self.task_ids - self.target_task_id).message_post_with_view(\n            self.env.ref('project.mail_template_task_merge'),\n            values={'target': False, 'task': self.target_task_id},\n            subtype_id=self.env.ref('mail.mt_comment').id\n        )\n        (self.task_ids - self.target_task_id).write({'active': False})\n        return {\n            \"type\": \"ir.actions.act_window\",\n            \"res_model\": \"project.task\",\n            \"views\": [[False, \"form\"]],\n            \"res_id\": self.target_task_id.id,\n        }\n\n    @api.multi\n    def merge_description(self):\n        return '<br/>'.join(self.task_ids.mapped(lambda task: \"Description from task <b>%s</b>:<br/>%s\" % (task.name, task.description or 'No description')))\n\n    @api.multi\n    def merge_followers(self):\n        self.target_task_id.message_subscribe(\n            partner_ids=(self.task_ids - self.target_task_id).mapped('message_partner_ids').ids,\n            channel_ids=(self.task_ids - self.target_task_id).mapped('message_channel_ids').ids,\n        )\n\n    @api.model\n    def default_get(self, fields):\n        result = super(ProjectTaskMergeWizard, self).default_get(fields)\n        selected_tasks = self.env['project.task'].browse(self.env.context.get('active_ids', False))\n        assigned_tasks = selected_tasks.filtered(lambda task: task.user_id)\n        result.update({\n            'task_ids': selected_tasks.ids,\n            'user_id': assigned_tasks and assigned_tasks[0].user_id.id or False,\n            'target_project_id': selected_tasks[0].project_id.id,\n            'target_task_id': selected_tasks[0].id\n        })\n        return result\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "project_task_merge_wizard.py", "id": "1ae7008016787b0113177e52b9020abf", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/project/wizard/project_task_merge_wizard.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}