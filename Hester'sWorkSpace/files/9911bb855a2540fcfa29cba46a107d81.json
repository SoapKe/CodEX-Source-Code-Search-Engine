{"author": "HelloZeroNet", "code": "import logging, json, os, re, sys, time\nimport gevent\nfrom Plugin import PluginManager\nfrom Config import config\nfrom util import Http\nfrom Debug import Debug\n\nallow_reload = False \n\nlog = logging.getLogger(\"DnschainPlugin\")\n\n@PluginManager.registerTo(\"SiteManager\")\nclass SiteManagerPlugin(object):\n\tdns_cache_path = \"%s/dns_cache.json\" % config.data_dir\n\tdns_cache = None\n\n\t\n\tdef isAddress(self, address):\n\t\tif self.isDomain(address): \n\t\t\treturn True\n\t\telse:\n\t\t\treturn super(SiteManagerPlugin, self).isAddress(address)\n\n\n\t\n\tdef isDomain(self, address):\n\t\treturn re.match(\"(.*?)([A-Za-z0-9_-]+\\.[A-Za-z0-9]+)$\", address)\n\n\n\t\n\tdef loadDnsCache(self):\n\t\tif os.path.isfile(self.dns_cache_path):\n\t\t\tself.dns_cache = json.load(open(self.dns_cache_path))\n\t\telse:\n\t\t\tself.dns_cache = {}\n\t\tlog.debug(\"Loaded dns cache, entries: %s\" % len(self.dns_cache))\n\n\n\t\n\tdef saveDnsCache(self):\n\t\tjson.dump(self.dns_cache, open(self.dns_cache_path, \"wb\"), indent=2)\n\n\n\t\n\t\n\tdef resolveDomainDnschainNet(self, domain):\n\t\ttry:\n\t\t\tmatch = self.isDomain(domain)\n\t\t\tsub_domain = match.group(1).strip(\".\")\n\t\t\ttop_domain = match.group(2)\n\t\t\tif not sub_domain: sub_domain = \"@\"\n\t\t\taddress = None\n\t\t\twith gevent.Timeout(5, Exception(\"Timeout: 5s\")):\n\t\t\t\tres = Http.get(\"https://api.dnschain.net/v1/namecoin/key/%s\" % top_domain).read()\n\t\t\t\tdata = json.loads(res)[\"data\"][\"value\"]\n\t\t\t\tif \"zeronet\" in data:\n\t\t\t\t\tfor key, val in data[\"zeronet\"].iteritems():\n\t\t\t\t\t\tself.dns_cache[key+\".\"+top_domain] = [val, time.time()+60*60*5] \n\t\t\t\t\tself.saveDnsCache()\n\t\t\t\t\treturn data[\"zeronet\"].get(sub_domain)\n\t\t\t\n\t\t\treturn address\n\t\texcept Exception as err:\n\t\t\tlog.debug(\"Dnschain.net %s resolve error: %s\" % (domain, Debug.formatException(err)))\n\n\n\t\n\t\n\tdef resolveDomainDnschainInfo(self, domain):\n\t\ttry:\n\t\t\tmatch = self.isDomain(domain)\n\t\t\tsub_domain = match.group(1).strip(\".\")\n\t\t\ttop_domain = match.group(2)\n\t\t\tif not sub_domain: sub_domain = \"@\"\n\t\t\taddress = None\n\t\t\twith gevent.Timeout(5, Exception(\"Timeout: 5s\")):\n\t\t\t\tres = Http.get(\"https://dnschain.info/bit/d/%s\" % re.sub(\"\\.bit$\", \"\", top_domain)).read()\n\t\t\t\tdata = json.loads(res)[\"value\"]\n\t\t\t\tfor key, val in data[\"zeronet\"].iteritems():\n\t\t\t\t\tself.dns_cache[key+\".\"+top_domain] = [val, time.time()+60*60*5] \n\t\t\t\tself.saveDnsCache()\n\t\t\t\treturn data[\"zeronet\"].get(sub_domain)\n\t\t\t\n\t\t\treturn address\n\t\texcept Exception as err:\n\t\t\tlog.debug(\"Dnschain.info %s resolve error: %s\" % (domain, Debug.formatException(err)))\n\n\n\t\n\t\n\tdef resolveDomain(self, domain):\n\t\tdomain = domain.lower()\n\t\tif self.dns_cache == None:\n\t\t\tself.loadDnsCache()\n\t\tif domain.count(\".\") < 2: \n\t\t\tdomain = \"@.\"+domain\n\n\t\tdomain_details = self.dns_cache.get(domain)\n\t\tif domain_details and time.time() < domain_details[1]: \n\t\t\treturn domain_details[0]\n\t\telse:\n\t\t\t\n\t\t\tthread_dnschain_info = gevent.spawn(self.resolveDomainDnschainInfo, domain)\n\t\t\tthread_dnschain_net = gevent.spawn(self.resolveDomainDnschainNet, domain)\n\t\t\tgevent.joinall([thread_dnschain_net, thread_dnschain_info]) \n\n\t\t\tif thread_dnschain_info.value and thread_dnschain_net.value: \n\t\t\t\tif thread_dnschain_info.value == thread_dnschain_net.value: \n\t\t\t\t\treturn thread_dnschain_info.value \n\t\t\t\telse:\n\t\t\t\t\tlog.error(\"Dns %s missmatch: %s != %s\" % (domain, thread_dnschain_info.value, thread_dnschain_net.value))\n\n\t\t\t\n\t\t\tif domain_details: \n\t\t\t\tdomain_details[1] = time.time()+60*60 \n\t\t\t\treturn domain_details[0]\n\t\t\telse:  in cache\n\t\t\t\tself.dns_cache[domain] = [None, time.time()+60] \n\t\t\t\treturn None\n\n\n\t\n\t\n\tdef need(self, address, all_file=True):\n\t\tif self.isDomain(address): \n\t\t\taddress_resolved = self.resolveDomain(address)\n\t\t\tif address_resolved:\n\t\t\t\taddress = address_resolved\n\t\t\telse:\n\t\t\t\treturn None\n\t\t\n\t\treturn super(SiteManagerPlugin, self).need(address, all_file)\n\n\n\t\n\tdef get(self, address):\n\t\tif self.sites == None: \n\t\t\tself.load()\n\t\tif self.isDomain(address): \n\t\t\taddress_resolved = self.resolveDomain(address)\n\t\t\tif address_resolved: \n\t\t\t\tsite = self.sites.get(address_resolved)\n\t\t\t\tif site:\n\t\t\t\t\tsite_domain = site.settings.get(\"domain\")\n\t\t\t\t\tif site_domain != address:\n\t\t\t\t\t\tsite.settings[\"domain\"] = address\n\t\t\telse: \n\t\t\t\tsite = self.sites.get(address)\n\n\t\telse: \n\t\t\tsite = self.sites.get(address)\n\t\treturn site\n\n", "comments": "  no reload supported    checks valid address    return  true address domain    load dns entries data dns cache json    save dns entries data dns cache json    resolve domain using dnschain net    return  the address none    cache 5 hours    not found    resolve domain using dnschain info    return  the address none    cache 5 hours    not found    resolve domain    return  the address none    its topleved request  prepend       found cache expired    resovle dns using dnschain    wait finish    booth successfull    same returned value    problem resolve    resolve failed  cache    dont try 1 hour    not found cache    don check 1 min    return create site start download site files    return  site none dns resolve failed    its looks like domain    return  site object none found    not loaded yet    its looks like domain    domain found    domain found    access site address ", "content": "import logging, json, os, re, sys, time\nimport gevent\nfrom Plugin import PluginManager\nfrom Config import config\nfrom util import Http\nfrom Debug import Debug\n\nallow_reload = False # No reload supported\n\nlog = logging.getLogger(\"DnschainPlugin\")\n\n@PluginManager.registerTo(\"SiteManager\")\nclass SiteManagerPlugin(object):\n\tdns_cache_path = \"%s/dns_cache.json\" % config.data_dir\n\tdns_cache = None\n\n\t# Checks if its a valid address\n\tdef isAddress(self, address):\n\t\tif self.isDomain(address): \n\t\t\treturn True\n\t\telse:\n\t\t\treturn super(SiteManagerPlugin, self).isAddress(address)\n\n\n\t# Return: True if the address is domain\n\tdef isDomain(self, address):\n\t\treturn re.match(\"(.*?)([A-Za-z0-9_-]+\\.[A-Za-z0-9]+)$\", address)\n\n\n\t# Load dns entries from data/dns_cache.json\n\tdef loadDnsCache(self):\n\t\tif os.path.isfile(self.dns_cache_path):\n\t\t\tself.dns_cache = json.load(open(self.dns_cache_path))\n\t\telse:\n\t\t\tself.dns_cache = {}\n\t\tlog.debug(\"Loaded dns cache, entries: %s\" % len(self.dns_cache))\n\n\n\t# Save dns entries to data/dns_cache.json\n\tdef saveDnsCache(self):\n\t\tjson.dump(self.dns_cache, open(self.dns_cache_path, \"wb\"), indent=2)\n\n\n\t# Resolve domain using dnschain.net\n\t# Return: The address or None\n\tdef resolveDomainDnschainNet(self, domain):\n\t\ttry:\n\t\t\tmatch = self.isDomain(domain)\n\t\t\tsub_domain = match.group(1).strip(\".\")\n\t\t\ttop_domain = match.group(2)\n\t\t\tif not sub_domain: sub_domain = \"@\"\n\t\t\taddress = None\n\t\t\twith gevent.Timeout(5, Exception(\"Timeout: 5s\")):\n\t\t\t\tres = Http.get(\"https://api.dnschain.net/v1/namecoin/key/%s\" % top_domain).read()\n\t\t\t\tdata = json.loads(res)[\"data\"][\"value\"]\n\t\t\t\tif \"zeronet\" in data:\n\t\t\t\t\tfor key, val in data[\"zeronet\"].iteritems():\n\t\t\t\t\t\tself.dns_cache[key+\".\"+top_domain] = [val, time.time()+60*60*5] # Cache for 5 hours\n\t\t\t\t\tself.saveDnsCache()\n\t\t\t\t\treturn data[\"zeronet\"].get(sub_domain)\n\t\t\t# Not found\n\t\t\treturn address\n\t\texcept Exception as err:\n\t\t\tlog.debug(\"Dnschain.net %s resolve error: %s\" % (domain, Debug.formatException(err)))\n\n\n\t# Resolve domain using dnschain.info\n\t# Return: The address or None\n\tdef resolveDomainDnschainInfo(self, domain):\n\t\ttry:\n\t\t\tmatch = self.isDomain(domain)\n\t\t\tsub_domain = match.group(1).strip(\".\")\n\t\t\ttop_domain = match.group(2)\n\t\t\tif not sub_domain: sub_domain = \"@\"\n\t\t\taddress = None\n\t\t\twith gevent.Timeout(5, Exception(\"Timeout: 5s\")):\n\t\t\t\tres = Http.get(\"https://dnschain.info/bit/d/%s\" % re.sub(\"\\.bit$\", \"\", top_domain)).read()\n\t\t\t\tdata = json.loads(res)[\"value\"]\n\t\t\t\tfor key, val in data[\"zeronet\"].iteritems():\n\t\t\t\t\tself.dns_cache[key+\".\"+top_domain] = [val, time.time()+60*60*5] # Cache for 5 hours\n\t\t\t\tself.saveDnsCache()\n\t\t\t\treturn data[\"zeronet\"].get(sub_domain)\n\t\t\t# Not found\n\t\t\treturn address\n\t\texcept Exception as err:\n\t\t\tlog.debug(\"Dnschain.info %s resolve error: %s\" % (domain, Debug.formatException(err)))\n\n\n\t# Resolve domain\n\t# Return: The address or None\n\tdef resolveDomain(self, domain):\n\t\tdomain = domain.lower()\n\t\tif self.dns_cache == None:\n\t\t\tself.loadDnsCache()\n\t\tif domain.count(\".\") < 2: # Its a topleved request, prepend @. to it\n\t\t\tdomain = \"@.\"+domain\n\n\t\tdomain_details = self.dns_cache.get(domain)\n\t\tif domain_details and time.time() < domain_details[1]: # Found in cache and its not expired\n\t\t\treturn domain_details[0]\n\t\telse:\n\t\t\t# Resovle dns using dnschain\n\t\t\tthread_dnschain_info = gevent.spawn(self.resolveDomainDnschainInfo, domain)\n\t\t\tthread_dnschain_net = gevent.spawn(self.resolveDomainDnschainNet, domain)\n\t\t\tgevent.joinall([thread_dnschain_net, thread_dnschain_info]) # Wait for finish\n\n\t\t\tif thread_dnschain_info.value and thread_dnschain_net.value: # Booth successfull\n\t\t\t\tif thread_dnschain_info.value == thread_dnschain_net.value: # Same returned value\n\t\t\t\t\treturn thread_dnschain_info.value \n\t\t\t\telse:\n\t\t\t\t\tlog.error(\"Dns %s missmatch: %s != %s\" % (domain, thread_dnschain_info.value, thread_dnschain_net.value))\n\n\t\t\t# Problem during resolve\n\t\t\tif domain_details: # Resolve failed, but we have it in the cache\n\t\t\t\tdomain_details[1] = time.time()+60*60 # Dont try again for 1 hour\n\t\t\t\treturn domain_details[0]\n\t\t\telse: # Not found in cache\n\t\t\t\tself.dns_cache[domain] = [None, time.time()+60] # Don't check again for 1 min\n\t\t\t\treturn None\n\n\n\t# Return or create site and start download site files\n\t# Return: Site or None if dns resolve failed\n\tdef need(self, address, all_file=True):\n\t\tif self.isDomain(address): # Its looks like a domain\n\t\t\taddress_resolved = self.resolveDomain(address)\n\t\t\tif address_resolved:\n\t\t\t\taddress = address_resolved\n\t\t\telse:\n\t\t\t\treturn None\n\t\t\n\t\treturn super(SiteManagerPlugin, self).need(address, all_file)\n\n\n\t# Return: Site object or None if not found\n\tdef get(self, address):\n\t\tif self.sites == None: # Not loaded yet\n\t\t\tself.load()\n\t\tif self.isDomain(address): # Its looks like a domain\n\t\t\taddress_resolved = self.resolveDomain(address)\n\t\t\tif address_resolved: # Domain found\n\t\t\t\tsite = self.sites.get(address_resolved)\n\t\t\t\tif site:\n\t\t\t\t\tsite_domain = site.settings.get(\"domain\")\n\t\t\t\t\tif site_domain != address:\n\t\t\t\t\t\tsite.settings[\"domain\"] = address\n\t\t\telse: # Domain not found\n\t\t\t\tsite = self.sites.get(address)\n\n\t\telse: # Access by site address\n\t\t\tsite = self.sites.get(address)\n\t\treturn site\n\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "SiteManagerPlugin.py", "id": "9911bb855a2540fcfa29cba46a107d81", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/disabled-Dnschain/SiteManagerPlugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}