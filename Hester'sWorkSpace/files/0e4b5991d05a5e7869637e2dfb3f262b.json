{"author": "XX-net", "code": "\n\n\n\nimport os\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath(os.path.join(current_path, os.pardir, os.pardir))\ndata_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, 'data', \"smart_router\"))\n\nfrom xlog import getLogger\nxlog = getLogger(\"smart_router\")\n\n\nclass GfwList(object):\n    def __init__(self):\n        self.gfw_black_list = self.load(\"gfw_black_list.txt\")\n        self.gfw_white_list = self.load(\"gfw_white_list.txt\")\n        self.advertisement_list = self.load(\"advertisement_list.txt\")\n\n    def load(self, name):\n        user_file = os.path.join(data_path, name)\n        if os.path.isfile(user_file):\n            list_file = user_file\n        else:\n            list_file = os.path.join(current_path, name)\n\n        xlog.info(\"Load file:%s\", list_file)\n\n        fd = open(list_file, \"r\")\n        gfwdict = {}\n        for line in fd.readlines():\n            line = line.strip()\n            if not line:\n                continue\n\n            gfwdict[line] = 1\n\n        gfwlist = [h for h in gfwdict]\n        return tuple(gfwlist)\n\n    def check(self, host):\n        if host.endswith(self.gfw_white_list):\n            return False\n\n        if not host.endswith(self.gfw_black_list):\n            return False\n\n        \n        dpl = host.split(\".\")\n        for i in range(0, len(dpl)):\n            h = \".\".join(dpl[i:])\n            if h in self.gfw_black_list:\n                return True\n\n        return False\n\n    def get_pac_string(self):\n        black = '\",\\n\"'.join(self.gfw_black_list)\n        white = '\",\\n\"'.join(self.gfw_white_list)\n        return black, white\n\n    def is_white(self, host):\n        if host.endswith(self.gfw_white_list):\n            return True\n        else:\n            return False\n\n    def is_advertisement(self, host):\n        if host.endswith(self.advertisement_list):\n            return True\n        else:\n            return False\n", "comments": "   usr bin env python    coding utf 8    check avoid wrong match like xgoogle com ", "content": "#!/usr/bin/env python\n# coding:utf-8\n\n\nimport os\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath(os.path.join(current_path, os.pardir, os.pardir))\ndata_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, 'data', \"smart_router\"))\n\nfrom xlog import getLogger\nxlog = getLogger(\"smart_router\")\n\n\nclass GfwList(object):\n    def __init__(self):\n        self.gfw_black_list = self.load(\"gfw_black_list.txt\")\n        self.gfw_white_list = self.load(\"gfw_white_list.txt\")\n        self.advertisement_list = self.load(\"advertisement_list.txt\")\n\n    def load(self, name):\n        user_file = os.path.join(data_path, name)\n        if os.path.isfile(user_file):\n            list_file = user_file\n        else:\n            list_file = os.path.join(current_path, name)\n\n        xlog.info(\"Load file:%s\", list_file)\n\n        fd = open(list_file, \"r\")\n        gfwdict = {}\n        for line in fd.readlines():\n            line = line.strip()\n            if not line:\n                continue\n\n            gfwdict[line] = 1\n\n        gfwlist = [h for h in gfwdict]\n        return tuple(gfwlist)\n\n    def check(self, host):\n        if host.endswith(self.gfw_white_list):\n            return False\n\n        if not host.endswith(self.gfw_black_list):\n            return False\n\n        # check avoid wrong match like xgoogle.com\n        dpl = host.split(\".\")\n        for i in range(0, len(dpl)):\n            h = \".\".join(dpl[i:])\n            if h in self.gfw_black_list:\n                return True\n\n        return False\n\n    def get_pac_string(self):\n        black = '\",\\n\"'.join(self.gfw_black_list)\n        white = '\",\\n\"'.join(self.gfw_white_list)\n        return black, white\n\n    def is_white(self, host):\n        if host.endswith(self.gfw_white_list):\n            return True\n        else:\n            return False\n\n    def is_advertisement(self, host):\n        if host.endswith(self.advertisement_list):\n            return True\n        else:\n            return False\n", "description": "a web proxy tool", "file_name": "gfwlist.py", "id": "0e4b5991d05a5e7869637e2dfb3f262b", "language": "Python", "project_name": "XX-Net", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/XX-net-XX-Net/XX-net-XX-Net-673a005/code/default/smart_router/local/gfwlist.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:03Z", "url": "https://github.com/XX-net/XX-Net", "wiki": true}