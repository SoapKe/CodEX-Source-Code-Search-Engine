{"author": "nvbn", "code": "\n\nimport os\nimport pytest\nfrom thefuck.shells import Bash\n\n\n@pytest.mark.usefixtures('isfile', 'no_memoize', 'no_cache')\nclass TestBash(object):\n    @pytest.fixture\n    def shell(self):\n        return Bash()\n\n    @pytest.fixture(autouse=True)\n    def shell_aliases(self):\n        os.environ['TF_SHELL_ALIASES'] = (\n            'alias fuck=\\'eval $(thefuck $(fc -ln -1))\\'\\n'\n            'alias l=\\'ls -CF\\'\\n'\n            'alias la=\\'ls -A\\'\\n'\n            'alias ll=\\'ls -alF\\'')\n\n    @pytest.mark.parametrize('before, after', [\n        ('pwd', 'pwd'),\n        ('fuck', 'eval $(thefuck $(fc -ln -1))'),\n        ('awk', 'awk'),\n        ('ll', 'ls -alF')])\n    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after\n\n    def test_to_shell(self, shell):\n        assert shell.to_shell('pwd') == 'pwd'\n\n    def test_and_(self, shell):\n        assert shell.and_('ls', 'cd') == 'ls && cd'\n\n    def test_or_(self, shell):\n        assert shell.or_('ls', 'cd') == 'ls || cd'\n\n    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fuck': 'eval $(thefuck $(fc -ln -1))',\n                                       'l': 'ls -CF',\n                                       'la': 'ls -A',\n                                       'll': 'ls -alF'}\n\n    def test_app_alias(self, shell):\n        assert 'fuck () {' in shell.app_alias('fuck')\n        assert 'FUCK () {' in shell.app_alias('FUCK')\n        assert 'thefuck' in shell.app_alias('fuck')\n        assert 'PYTHONIOENCODING' in shell.app_alias('fuck')\n\n    def test_app_alias_variables_correctly_set(self, shell):\n        alias = shell.app_alias('fuck')\n        assert \"fuck () {\" in alias\n        assert 'TF_SHELL=bash' in alias\n        assert \"TF_ALIAS=fuck\" in alias\n        assert 'PYTHONIOENCODING=utf-8' in alias\n        assert 'TF_SHELL_ALIASES=$(alias)' in alias\n\n    def test_get_history(self, history_lines, shell):\n        history_lines(['ls', 'rm'])\n        assert list(shell.get_history()) == ['ls', 'rm']\n\n    def test_split_command(self, shell):\n        command = 'git log -p'\n        command_parts = ['git', 'log', '-p']\n        assert shell.split_command(command) == command_parts\n\n    def test_how_to_configure(self, shell, config_exists):\n        config_exists.return_value = True\n        assert shell.how_to_configure().can_configure_automatically\n\n    def test_how_to_configure_when_config_not_found(self, shell,\n                                                    config_exists):\n        config_exists.return_value = False\n        assert not shell.how_to_configure().can_configure_automatically\n", "comments": "# -*- coding: utf-8 -*-\n", "content": "# -*- coding: utf-8 -*-\n\nimport os\nimport pytest\nfrom thefuck.shells import Bash\n\n\n@pytest.mark.usefixtures('isfile', 'no_memoize', 'no_cache')\nclass TestBash(object):\n    @pytest.fixture\n    def shell(self):\n        return Bash()\n\n    @pytest.fixture(autouse=True)\n    def shell_aliases(self):\n        os.environ['TF_SHELL_ALIASES'] = (\n            'alias fuck=\\'eval $(thefuck $(fc -ln -1))\\'\\n'\n            'alias l=\\'ls -CF\\'\\n'\n            'alias la=\\'ls -A\\'\\n'\n            'alias ll=\\'ls -alF\\'')\n\n    @pytest.mark.parametrize('before, after', [\n        ('pwd', 'pwd'),\n        ('fuck', 'eval $(thefuck $(fc -ln -1))'),\n        ('awk', 'awk'),\n        ('ll', 'ls -alF')])\n    def test_from_shell(self, before, after, shell):\n        assert shell.from_shell(before) == after\n\n    def test_to_shell(self, shell):\n        assert shell.to_shell('pwd') == 'pwd'\n\n    def test_and_(self, shell):\n        assert shell.and_('ls', 'cd') == 'ls && cd'\n\n    def test_or_(self, shell):\n        assert shell.or_('ls', 'cd') == 'ls || cd'\n\n    def test_get_aliases(self, shell):\n        assert shell.get_aliases() == {'fuck': 'eval $(thefuck $(fc -ln -1))',\n                                       'l': 'ls -CF',\n                                       'la': 'ls -A',\n                                       'll': 'ls -alF'}\n\n    def test_app_alias(self, shell):\n        assert 'fuck () {' in shell.app_alias('fuck')\n        assert 'FUCK () {' in shell.app_alias('FUCK')\n        assert 'thefuck' in shell.app_alias('fuck')\n        assert 'PYTHONIOENCODING' in shell.app_alias('fuck')\n\n    def test_app_alias_variables_correctly_set(self, shell):\n        alias = shell.app_alias('fuck')\n        assert \"fuck () {\" in alias\n        assert 'TF_SHELL=bash' in alias\n        assert \"TF_ALIAS=fuck\" in alias\n        assert 'PYTHONIOENCODING=utf-8' in alias\n        assert 'TF_SHELL_ALIASES=$(alias)' in alias\n\n    def test_get_history(self, history_lines, shell):\n        history_lines(['ls', 'rm'])\n        assert list(shell.get_history()) == ['ls', 'rm']\n\n    def test_split_command(self, shell):\n        command = 'git log -p'\n        command_parts = ['git', 'log', '-p']\n        assert shell.split_command(command) == command_parts\n\n    def test_how_to_configure(self, shell, config_exists):\n        config_exists.return_value = True\n        assert shell.how_to_configure().can_configure_automatically\n\n    def test_how_to_configure_when_config_not_found(self, shell,\n                                                    config_exists):\n        config_exists.return_value = False\n        assert not shell.how_to_configure().can_configure_automatically\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_bash.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/shells/test_bash.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}