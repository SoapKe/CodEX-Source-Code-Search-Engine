{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    @api.multi\n    def _cart_find_product_line(self, product_id=None, line_id=None, **kwargs):\n        self.ensure_one()\n        lines = super(SaleOrder, self)._cart_find_product_line(product_id, line_id)\n        if line_id:\n            return lines\n        domain = [('id', 'in', lines.ids)]\n        if self.env.context.get(\"event_ticket_id\"):\n            domain.append(('event_ticket_id', '=', self.env.context.get(\"event_ticket_id\")))\n        return self.env['sale.order.line'].sudo().search(domain)\n\n    @api.multi\n    def _website_product_id_change(self, order_id, product_id, qty=0):\n        order = self.env['sale.order'].sudo().browse(order_id)\n        if self._context.get('pricelist') != order.pricelist_id.id:\n            self = self.with_context(pricelist=order.pricelist_id.id)\n\n        values = super(SaleOrder, self)._website_product_id_change(order_id, product_id, qty=qty)\n        event_ticket_id = None\n        if self.env.context.get(\"event_ticket_id\"):\n            event_ticket_id = self.env.context.get(\"event_ticket_id\")\n        else:\n            product = self.env['product.product'].browse(product_id)\n            if product.event_ticket_ids:\n                event_ticket_id = product.event_ticket_ids[0].id\n\n        if event_ticket_id:\n            ticket = self.env['event.event.ticket'].browse(event_ticket_id)\n            if product_id != ticket.product_id.id:\n                raise UserError(_(\"The ticket doesn't match with this product.\"))\n\n            values['product_id'] = ticket.product_id.id\n            values['event_id'] = ticket.event_id.id\n            values['event_ticket_id'] = ticket.id\n            values['price_unit'] = ticket.price_reduce or ticket.price\n            values['name'] = \"%s\\n%s\" % (ticket.event_id.display_name, ticket.name)\n\n        \n        values.pop('event_ok', None)\n\n        return values\n\n    @api.multi\n    def _cart_update(self, product_id=None, line_id=None, add_qty=0, set_qty=0, **kwargs):\n        OrderLine = self.env['sale.order.line']\n\n        if line_id:\n            line = OrderLine.browse(line_id)\n            ticket = line.event_ticket_id\n            old_qty = int(line.product_uom_qty)\n            if ticket.id:\n                self = self.with_context(event_ticket_id=ticket.id, fixed_price=1)\n        else:\n            line = None\n            ticket = self.env['event.event.ticket'].search([('product_id', '=', product_id)], limit=1)\n            old_qty = 0\n        new_qty = set_qty if set_qty else (add_qty or 0 + old_qty)\n\n        \n        values = {}\n        if ticket and ticket.seats_availability == 'limited' and ticket.seats_available <= 0:\n            values['warning'] = _('Sorry, The %(ticket)s tickets for the %(event)s event are sold out.') % {\n                'ticket': ticket.name,\n                'event': ticket.event_id.name}\n            new_qty, set_qty, add_qty = 0, 0, 0\n        \n        elif ticket and ticket.seats_availability == 'limited' and new_qty > ticket.seats_available:\n            values['warning'] = _('Sorry, only %(remaining_seats)d seats are still available for the %(ticket)s ticket for the %(event)s event.') % {\n                'remaining_seats': ticket.seats_available,\n                'ticket': ticket.name,\n                'event': ticket.event_id.name}\n            new_qty, set_qty, add_qty = ticket.seats_available, ticket.seats_available, 0\n        values.update(super(SaleOrder, self)._cart_update(product_id, line_id, add_qty, set_qty, **kwargs))\n\n        \n        if ticket and new_qty < old_qty:\n            attendees = self.env['event.registration'].search([\n                ('state', '!=', 'cancel'),\n                ('sale_order_id', 'in', self.ids),  \n                ('event_ticket_id', '=', ticket.id),\n            ], offset=new_qty, limit=(old_qty - new_qty), order='create_date asc')\n            attendees.button_reg_cancel()\n        \n        elif ticket and new_qty > old_qty:\n            line = OrderLine.browse(values['line_id'])\n            line._update_registrations(confirm=False, cancel_to_draft=True, registration_data=kwargs.get('registration_data', []))\n            # add in return values the registrations, to display them on website (or not)\n            values['attendee_ids'] = self.env['event.registration'].search([('sale_order_line_id', '=', line.id), ('state', '!=', 'cancel')]).ids\n        return values\n", "comments": "      coding  utf 8        avoid writing related values end locking product record    case  buying tickets sold ticket    case  buying tickets  much attendees    removing attendees    to avoid break multi record set    adding attendees    add return values registrations  display website (or not) ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo import api, models, _\nfrom odoo.exceptions import UserError\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    @api.multi\n    def _cart_find_product_line(self, product_id=None, line_id=None, **kwargs):\n        self.ensure_one()\n        lines = super(SaleOrder, self)._cart_find_product_line(product_id, line_id)\n        if line_id:\n            return lines\n        domain = [('id', 'in', lines.ids)]\n        if self.env.context.get(\"event_ticket_id\"):\n            domain.append(('event_ticket_id', '=', self.env.context.get(\"event_ticket_id\")))\n        return self.env['sale.order.line'].sudo().search(domain)\n\n    @api.multi\n    def _website_product_id_change(self, order_id, product_id, qty=0):\n        order = self.env['sale.order'].sudo().browse(order_id)\n        if self._context.get('pricelist') != order.pricelist_id.id:\n            self = self.with_context(pricelist=order.pricelist_id.id)\n\n        values = super(SaleOrder, self)._website_product_id_change(order_id, product_id, qty=qty)\n        event_ticket_id = None\n        if self.env.context.get(\"event_ticket_id\"):\n            event_ticket_id = self.env.context.get(\"event_ticket_id\")\n        else:\n            product = self.env['product.product'].browse(product_id)\n            if product.event_ticket_ids:\n                event_ticket_id = product.event_ticket_ids[0].id\n\n        if event_ticket_id:\n            ticket = self.env['event.event.ticket'].browse(event_ticket_id)\n            if product_id != ticket.product_id.id:\n                raise UserError(_(\"The ticket doesn't match with this product.\"))\n\n            values['product_id'] = ticket.product_id.id\n            values['event_id'] = ticket.event_id.id\n            values['event_ticket_id'] = ticket.id\n            values['price_unit'] = ticket.price_reduce or ticket.price\n            values['name'] = \"%s\\n%s\" % (ticket.event_id.display_name, ticket.name)\n\n        # avoid writing related values that end up locking the product record\n        values.pop('event_ok', None)\n\n        return values\n\n    @api.multi\n    def _cart_update(self, product_id=None, line_id=None, add_qty=0, set_qty=0, **kwargs):\n        OrderLine = self.env['sale.order.line']\n\n        if line_id:\n            line = OrderLine.browse(line_id)\n            ticket = line.event_ticket_id\n            old_qty = int(line.product_uom_qty)\n            if ticket.id:\n                self = self.with_context(event_ticket_id=ticket.id, fixed_price=1)\n        else:\n            line = None\n            ticket = self.env['event.event.ticket'].search([('product_id', '=', product_id)], limit=1)\n            old_qty = 0\n        new_qty = set_qty if set_qty else (add_qty or 0 + old_qty)\n\n        # case: buying tickets for a sold out ticket\n        values = {}\n        if ticket and ticket.seats_availability == 'limited' and ticket.seats_available <= 0:\n            values['warning'] = _('Sorry, The %(ticket)s tickets for the %(event)s event are sold out.') % {\n                'ticket': ticket.name,\n                'event': ticket.event_id.name}\n            new_qty, set_qty, add_qty = 0, 0, 0\n        # case: buying tickets, too much attendees\n        elif ticket and ticket.seats_availability == 'limited' and new_qty > ticket.seats_available:\n            values['warning'] = _('Sorry, only %(remaining_seats)d seats are still available for the %(ticket)s ticket for the %(event)s event.') % {\n                'remaining_seats': ticket.seats_available,\n                'ticket': ticket.name,\n                'event': ticket.event_id.name}\n            new_qty, set_qty, add_qty = ticket.seats_available, ticket.seats_available, 0\n        values.update(super(SaleOrder, self)._cart_update(product_id, line_id, add_qty, set_qty, **kwargs))\n\n        # removing attendees\n        if ticket and new_qty < old_qty:\n            attendees = self.env['event.registration'].search([\n                ('state', '!=', 'cancel'),\n                ('sale_order_id', 'in', self.ids),  # To avoid break on multi record set\n                ('event_ticket_id', '=', ticket.id),\n            ], offset=new_qty, limit=(old_qty - new_qty), order='create_date asc')\n            attendees.button_reg_cancel()\n        # adding attendees\n        elif ticket and new_qty > old_qty:\n            line = OrderLine.browse(values['line_id'])\n            line._update_registrations(confirm=False, cancel_to_draft=True, registration_data=kwargs.get('registration_data', []))\n            # add in return values the registrations, to display them on website (or not)\n            values['attendee_ids'] = self.env['event.registration'].search([('sale_order_line_id', '=', line.id), ('state', '!=', 'cancel')]).ids\n        return values\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_order.py", "id": "f73c1aa1413d3388bdefd27933aa9cf6", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_event_sale/models/sale_order.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}