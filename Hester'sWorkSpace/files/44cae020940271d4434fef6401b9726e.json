{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom sentry.ownership.grammar import (\n    Rule, Matcher, Owner,\n    parse_rules, dump_schema, load_schema,\n)\n\nfixture_data = \"\"\"\n\n*.js                    \n\n\n\n  url:http://google.com/* \npath:src/sentry/*       david@sentry.io\n\"\"\"\n\n\ndef test_parse_rules():\n    assert parse_rules(fixture_data) == [\n        Rule(Matcher('path', '*.js'), [Owner('team', 'frontend'), Owner('user', 'm@robenolt.com')]),\n        Rule(Matcher('url', 'http://google.com/*'), [Owner('team', 'backend')]),\n        Rule(Matcher('path', 'src/sentry/*'), [Owner('user', 'david@sentry.io')]),\n    ]\n\n\ndef test_dump_schema():\n    assert dump_schema([Rule(\n        Matcher('path', '*.js'),\n        [Owner('team', 'frontend')]\n    )]) == {\n        '$version': 1,\n        'rules': [{\n            'matcher': {\n                'type': 'path',\n                'pattern': '*.js',\n            },\n            'owners': [{\n                'type': 'team',\n                'identifier': 'frontend',\n            }]\n        }]\n    }\n\n\ndef test_load_schema():\n    assert load_schema({\n        '$version': 1,\n        'rules': [{\n            'matcher': {\n                'type': 'path',\n                'pattern': '*.js',\n            },\n            'owners': [{\n                'type': 'team',\n                'identifier': 'frontend',\n            }]\n        }]\n    }) == [Rule(\n        Matcher('path', '*.js'),\n        [Owner('team', 'frontend')]\n    )]\n\n\ndef test_matcher_test_url():\n    data = {\n        'sentry.interfaces.Http': {\n            'url': 'http://example.com/foo.js',\n        }\n    }\n\n    assert Matcher('url', '*.js').test(data)\n    assert Matcher('url', 'http://*.com/foo.js').test(data)\n    assert not Matcher('url', '*.py').test(data)\n    assert not Matcher('url', '*.jsx').test(data)\n    assert not Matcher('path', '*.js').test(data)\n    assert not Matcher('url', '*.js').test({})\n\n\ndef test_matcher_test_exception():\n    data = {\n        'sentry.interfaces.Exception': {\n            'values': [{\n                'stacktrace': {\n                    'frames': [\n                        {'filename': 'foo/file.py'},\n                        {'abs_path': '/usr/local/src/other/app.py'},\n                    ],\n                },\n            }],\n        }\n    }\n\n    assert Matcher('path', '*.py').test(data)\n    assert Matcher('path', 'foo/*.py').test(data)\n    assert Matcher('path', '/usr/local/src/*/app.py').test(data)\n    assert not Matcher('path', '*.js').test(data)\n    assert not Matcher('path', '*.jsx').test(data)\n    assert not Matcher('url', '*.py').test(data)\n    assert not Matcher('path', '*.py').test({})\n\n\ndef test_matcher_test_stacktrace():\n    data = {\n        'sentry.interfaces.Stacktrace': {\n            'frames': [\n                {'filename': 'foo/file.py'},\n                {'abs_path': '/usr/local/src/other/app.py'},\n            ],\n        }\n    }\n\n    assert Matcher('path', '*.py').test(data)\n    assert Matcher('path', 'foo/*.py').test(data)\n    assert Matcher('path', '/usr/local/src/*/app.py').test(data)\n    assert not Matcher('path', '*.js').test(data)\n    assert not Matcher('path', '*.jsx').test(data)\n    assert not Matcher('url', '*.py').test(data)\n    assert not Matcher('path', '*.py').test({})\n", "comments": "      cool stuff comment   js                     frontend robenolt com   good comment     url http   google com    backend path src sentry         david sentry io        cool stuff comment   frontend robenolt com    good comment   backend ", "content": "from __future__ import absolute_import\n\nfrom sentry.ownership.grammar import (\n    Rule, Matcher, Owner,\n    parse_rules, dump_schema, load_schema,\n)\n\nfixture_data = \"\"\"\n# cool stuff comment\n*.js                    #frontend m@robenolt.com\n# good comment\n\n\n  url:http://google.com/* #backend\npath:src/sentry/*       david@sentry.io\n\"\"\"\n\n\ndef test_parse_rules():\n    assert parse_rules(fixture_data) == [\n        Rule(Matcher('path', '*.js'), [Owner('team', 'frontend'), Owner('user', 'm@robenolt.com')]),\n        Rule(Matcher('url', 'http://google.com/*'), [Owner('team', 'backend')]),\n        Rule(Matcher('path', 'src/sentry/*'), [Owner('user', 'david@sentry.io')]),\n    ]\n\n\ndef test_dump_schema():\n    assert dump_schema([Rule(\n        Matcher('path', '*.js'),\n        [Owner('team', 'frontend')]\n    )]) == {\n        '$version': 1,\n        'rules': [{\n            'matcher': {\n                'type': 'path',\n                'pattern': '*.js',\n            },\n            'owners': [{\n                'type': 'team',\n                'identifier': 'frontend',\n            }]\n        }]\n    }\n\n\ndef test_load_schema():\n    assert load_schema({\n        '$version': 1,\n        'rules': [{\n            'matcher': {\n                'type': 'path',\n                'pattern': '*.js',\n            },\n            'owners': [{\n                'type': 'team',\n                'identifier': 'frontend',\n            }]\n        }]\n    }) == [Rule(\n        Matcher('path', '*.js'),\n        [Owner('team', 'frontend')]\n    )]\n\n\ndef test_matcher_test_url():\n    data = {\n        'sentry.interfaces.Http': {\n            'url': 'http://example.com/foo.js',\n        }\n    }\n\n    assert Matcher('url', '*.js').test(data)\n    assert Matcher('url', 'http://*.com/foo.js').test(data)\n    assert not Matcher('url', '*.py').test(data)\n    assert not Matcher('url', '*.jsx').test(data)\n    assert not Matcher('path', '*.js').test(data)\n    assert not Matcher('url', '*.js').test({})\n\n\ndef test_matcher_test_exception():\n    data = {\n        'sentry.interfaces.Exception': {\n            'values': [{\n                'stacktrace': {\n                    'frames': [\n                        {'filename': 'foo/file.py'},\n                        {'abs_path': '/usr/local/src/other/app.py'},\n                    ],\n                },\n            }],\n        }\n    }\n\n    assert Matcher('path', '*.py').test(data)\n    assert Matcher('path', 'foo/*.py').test(data)\n    assert Matcher('path', '/usr/local/src/*/app.py').test(data)\n    assert not Matcher('path', '*.js').test(data)\n    assert not Matcher('path', '*.jsx').test(data)\n    assert not Matcher('url', '*.py').test(data)\n    assert not Matcher('path', '*.py').test({})\n\n\ndef test_matcher_test_stacktrace():\n    data = {\n        'sentry.interfaces.Stacktrace': {\n            'frames': [\n                {'filename': 'foo/file.py'},\n                {'abs_path': '/usr/local/src/other/app.py'},\n            ],\n        }\n    }\n\n    assert Matcher('path', '*.py').test(data)\n    assert Matcher('path', 'foo/*.py').test(data)\n    assert Matcher('path', '/usr/local/src/*/app.py').test(data)\n    assert not Matcher('path', '*.js').test(data)\n    assert not Matcher('path', '*.jsx').test(data)\n    assert not Matcher('url', '*.py').test(data)\n    assert not Matcher('path', '*.py').test({})\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_grammar.py", "id": "44cae020940271d4434fef6401b9726e", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/ownership/test_grammar.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}