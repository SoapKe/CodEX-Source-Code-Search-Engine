{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport binascii\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_ord,\n)\nfrom ..utils import (\n    ExtractorError,\n    qualities,\n    determine_ext,\n)\n\n\nclass TeamcocoIE(InfoExtractor):\n    _VALID_URL = r'https?://teamcoco\\.com/video/(?P<video_id>[0-9]+)?/?(?P<display_id>.*)'\n    _TESTS = [\n        {\n            'url': 'http://teamcoco.com/video/80187/conan-becomes-a-mary-kay-beauty-consultant',\n            'md5': '3f7746aa0dc86de18df7539903d399ea',\n            'info_dict': {\n                'id': '80187',\n                'ext': 'mp4',\n                'title': 'Conan Becomes A Mary Kay Beauty Consultant',\n                'description': 'Mary Kay is perhaps the most trusted name in female beauty, so of course Conan is a natural choice to sell their products.',\n                'duration': 504,\n                'age_limit': 0,\n            }\n        }, {\n            'url': 'http://teamcoco.com/video/louis-ck-interview-george-w-bush',\n            'md5': 'cde9ba0fa3506f5f017ce11ead928f9a',\n            'info_dict': {\n                'id': '19705',\n                'ext': 'mp4',\n                'description': 'Louis C.K. got starstruck by George W. Bush, so what? Part one.',\n                'title': 'Louis C.K. Interview Pt. 1 11/3/11',\n                'duration': 288,\n                'age_limit': 0,\n            }\n        }, {\n            'url': 'http://teamcoco.com/video/timothy-olyphant-drinking-whiskey',\n            'info_dict': {\n                'id': '88748',\n                'ext': 'mp4',\n                'title': 'Timothy Olyphant Raises A Toast To \u201cJustified\u201d',\n                'description': 'md5:15501f23f020e793aeca761205e42c24',\n            },\n            'params': {\n                'skip_download': True,  \n            }\n        }, {\n            'url': 'http://teamcoco.com/video/full-episode-mon-6-1-joel-mchale-jake-tapper-and-musical-guest-courtney-barnett?playlist=x;eyJ0eXBlIjoidGFnIiwiaWQiOjl9',\n            'info_dict': {\n                'id': '89341',\n                'ext': 'mp4',\n                'title': 'Full Episode - Mon. 6/1 - Joel McHale, Jake Tapper, And Musical Guest Courtney Barnett',\n                'description': 'Guests: Joel McHale, Jake Tapper, And Musical Guest Courtney Barnett',\n            },\n            'params': {\n                'skip_download': True,  \n            }\n        }\n    ]\n    _VIDEO_ID_REGEXES = (\n        r'\"eVar42\"\\s*:\\s*(\\d+)',\n        r'Ginger\\.TeamCoco\\.openInApp\\(\"video\",\\s*\"([^\"]+)\"',\n        r'\"id_not\"\\s*:\\s*(\\d+)'\n    )\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        display_id = mobj.group('display_id')\n        webpage, urlh = self._download_webpage_handle(url, display_id)\n        if 'src=expired' in urlh.geturl():\n            raise ExtractorError('This video is expired.', expected=True)\n\n        video_id = mobj.group('video_id')\n        if not video_id:\n            video_id = self._html_search_regex(\n                self._VIDEO_ID_REGEXES, webpage, 'video id')\n\n        data = None\n\n        preload_codes = self._html_search_regex(\n            r'(function.+)setTimeout\\(function\\(\\)\\{playlist',\n            webpage, 'preload codes')\n        base64_fragments = re.findall(r'\"([a-zA-Z0-9+/=]+)\"', preload_codes)\n        base64_fragments.remove('init')\n\n        def _check_sequence(cur_fragments):\n            if not cur_fragments:\n                return\n            for i in range(len(cur_fragments)):\n                cur_sequence = (''.join(cur_fragments[i:] + cur_fragments[:i])).encode('ascii')\n                try:\n                    raw_data = compat_b64decode(cur_sequence)\n                    if compat_ord(raw_data[0]) == compat_ord('{'):\n                        return json.loads(raw_data.decode('utf-8'))\n                except (TypeError, binascii.Error, UnicodeDecodeError, ValueError):\n                    continue\n\n        def _check_data():\n            for i in range(len(base64_fragments) + 1):\n                for j in range(i, len(base64_fragments) + 1):\n                    data = _check_sequence(base64_fragments[:i] + base64_fragments[j:])\n                    if data:\n                        return data\n\n        self.to_screen('Try to compute possible data sequence. This may take some time.')\n        data = _check_data()\n\n        if not data:\n            raise ExtractorError(\n                'Preload information could not be extracted', expected=True)\n\n        formats = []\n        get_quality = qualities(['500k', '480p', '1000k', '720p', '1080p'])\n        for filed in data['files']:\n            if determine_ext(filed['url']) == 'm3u8':\n                \n                if filed['url'].startswith('/'):\n                    m3u8_url = 'http://ht.cdn.turner.com/tbs/big/teamcoco' + filed['url']\n                else:\n                    m3u8_url = filed['url']\n                m3u8_formats = self._extract_m3u8_formats(\n                    m3u8_url, video_id, ext='mp4')\n                for m3u8_format in m3u8_formats:\n                    if m3u8_format not in formats:\n                        formats.append(m3u8_format)\n            elif determine_ext(filed['url']) == 'f4m':\n                \n                continue\n            else:\n                if filed['url'].startswith('/mp4:protected/'):\n                    \n                    continue\n                m_format = re.search(r'(\\d+(k|p))\\.mp4', filed['url'])\n                if m_format is not None:\n                    format_id = m_format.group(1)\n                else:\n                    format_id = filed['bitrate']\n                tbr = (\n                    int(filed['bitrate'])\n                    if filed['bitrate'].isdigit()\n                    else None)\n\n                formats.append({\n                    'url': filed['url'],\n                    'ext': 'mp4',\n                    'tbr': tbr,\n                    'format_id': format_id,\n                    'quality': get_quality(format_id),\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'formats': formats,\n            'title': data['title'],\n            'thumbnail': data.get('thumb', {}).get('href'),\n            'description': data.get('teaser'),\n            'duration': data.get('duration'),\n            'age_limit': self._family_friendly_search(webpage),\n        }\n", "comments": "# coding: utf-8\n# m3u8 downloads\n# m3u8 downloads\n# compat_urllib_parse.urljoin does not work here\n# TODO Correct f4m extraction\n# TODO Correct extraction for these files\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport binascii\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_ord,\n)\nfrom ..utils import (\n    ExtractorError,\n    qualities,\n    determine_ext,\n)\n\n\nclass TeamcocoIE(InfoExtractor):\n    _VALID_URL = r'https?://teamcoco\\.com/video/(?P<video_id>[0-9]+)?/?(?P<display_id>.*)'\n    _TESTS = [\n        {\n            'url': 'http://teamcoco.com/video/80187/conan-becomes-a-mary-kay-beauty-consultant',\n            'md5': '3f7746aa0dc86de18df7539903d399ea',\n            'info_dict': {\n                'id': '80187',\n                'ext': 'mp4',\n                'title': 'Conan Becomes A Mary Kay Beauty Consultant',\n                'description': 'Mary Kay is perhaps the most trusted name in female beauty, so of course Conan is a natural choice to sell their products.',\n                'duration': 504,\n                'age_limit': 0,\n            }\n        }, {\n            'url': 'http://teamcoco.com/video/louis-ck-interview-george-w-bush',\n            'md5': 'cde9ba0fa3506f5f017ce11ead928f9a',\n            'info_dict': {\n                'id': '19705',\n                'ext': 'mp4',\n                'description': 'Louis C.K. got starstruck by George W. Bush, so what? Part one.',\n                'title': 'Louis C.K. Interview Pt. 1 11/3/11',\n                'duration': 288,\n                'age_limit': 0,\n            }\n        }, {\n            'url': 'http://teamcoco.com/video/timothy-olyphant-drinking-whiskey',\n            'info_dict': {\n                'id': '88748',\n                'ext': 'mp4',\n                'title': 'Timothy Olyphant Raises A Toast To \u201cJustified\u201d',\n                'description': 'md5:15501f23f020e793aeca761205e42c24',\n            },\n            'params': {\n                'skip_download': True,  # m3u8 downloads\n            }\n        }, {\n            'url': 'http://teamcoco.com/video/full-episode-mon-6-1-joel-mchale-jake-tapper-and-musical-guest-courtney-barnett?playlist=x;eyJ0eXBlIjoidGFnIiwiaWQiOjl9',\n            'info_dict': {\n                'id': '89341',\n                'ext': 'mp4',\n                'title': 'Full Episode - Mon. 6/1 - Joel McHale, Jake Tapper, And Musical Guest Courtney Barnett',\n                'description': 'Guests: Joel McHale, Jake Tapper, And Musical Guest Courtney Barnett',\n            },\n            'params': {\n                'skip_download': True,  # m3u8 downloads\n            }\n        }\n    ]\n    _VIDEO_ID_REGEXES = (\n        r'\"eVar42\"\\s*:\\s*(\\d+)',\n        r'Ginger\\.TeamCoco\\.openInApp\\(\"video\",\\s*\"([^\"]+)\"',\n        r'\"id_not\"\\s*:\\s*(\\d+)'\n    )\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        display_id = mobj.group('display_id')\n        webpage, urlh = self._download_webpage_handle(url, display_id)\n        if 'src=expired' in urlh.geturl():\n            raise ExtractorError('This video is expired.', expected=True)\n\n        video_id = mobj.group('video_id')\n        if not video_id:\n            video_id = self._html_search_regex(\n                self._VIDEO_ID_REGEXES, webpage, 'video id')\n\n        data = None\n\n        preload_codes = self._html_search_regex(\n            r'(function.+)setTimeout\\(function\\(\\)\\{playlist',\n            webpage, 'preload codes')\n        base64_fragments = re.findall(r'\"([a-zA-Z0-9+/=]+)\"', preload_codes)\n        base64_fragments.remove('init')\n\n        def _check_sequence(cur_fragments):\n            if not cur_fragments:\n                return\n            for i in range(len(cur_fragments)):\n                cur_sequence = (''.join(cur_fragments[i:] + cur_fragments[:i])).encode('ascii')\n                try:\n                    raw_data = compat_b64decode(cur_sequence)\n                    if compat_ord(raw_data[0]) == compat_ord('{'):\n                        return json.loads(raw_data.decode('utf-8'))\n                except (TypeError, binascii.Error, UnicodeDecodeError, ValueError):\n                    continue\n\n        def _check_data():\n            for i in range(len(base64_fragments) + 1):\n                for j in range(i, len(base64_fragments) + 1):\n                    data = _check_sequence(base64_fragments[:i] + base64_fragments[j:])\n                    if data:\n                        return data\n\n        self.to_screen('Try to compute possible data sequence. This may take some time.')\n        data = _check_data()\n\n        if not data:\n            raise ExtractorError(\n                'Preload information could not be extracted', expected=True)\n\n        formats = []\n        get_quality = qualities(['500k', '480p', '1000k', '720p', '1080p'])\n        for filed in data['files']:\n            if determine_ext(filed['url']) == 'm3u8':\n                # compat_urllib_parse.urljoin does not work here\n                if filed['url'].startswith('/'):\n                    m3u8_url = 'http://ht.cdn.turner.com/tbs/big/teamcoco' + filed['url']\n                else:\n                    m3u8_url = filed['url']\n                m3u8_formats = self._extract_m3u8_formats(\n                    m3u8_url, video_id, ext='mp4')\n                for m3u8_format in m3u8_formats:\n                    if m3u8_format not in formats:\n                        formats.append(m3u8_format)\n            elif determine_ext(filed['url']) == 'f4m':\n                # TODO Correct f4m extraction\n                continue\n            else:\n                if filed['url'].startswith('/mp4:protected/'):\n                    # TODO Correct extraction for these files\n                    continue\n                m_format = re.search(r'(\\d+(k|p))\\.mp4', filed['url'])\n                if m_format is not None:\n                    format_id = m_format.group(1)\n                else:\n                    format_id = filed['bitrate']\n                tbr = (\n                    int(filed['bitrate'])\n                    if filed['bitrate'].isdigit()\n                    else None)\n\n                formats.append({\n                    'url': filed['url'],\n                    'ext': 'mp4',\n                    'tbr': tbr,\n                    'format_id': format_id,\n                    'quality': get_quality(format_id),\n                })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'formats': formats,\n            'title': data['title'],\n            'thumbnail': data.get('thumb', {}).get('href'),\n            'description': data.get('teaser'),\n            'duration': data.get('duration'),\n            'age_limit': self._family_friendly_search(webpage),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "teamcoco.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/teamcoco.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}