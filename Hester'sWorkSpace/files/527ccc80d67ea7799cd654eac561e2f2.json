{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport hmac\n\nfrom werkzeug import urls\n\nfrom odoo import api, models\nfrom odoo.tools.safe_eval import safe_eval\nfrom odoo.addons.http_routing.models.ir_http import slug\n\n\nclass MailGroup(models.Model):\n    _inherit = 'mail.channel'\n\n    @api.multi\n    def message_get_email_values(self, notif_mail=None):\n        self.ensure_one()\n        res = super(MailGroup, self).message_get_email_values(notif_mail=notif_mail)\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        headers = {}\n        if res.get('headers'):\n            try:\n                headers = safe_eval(res['headers'])\n            except Exception:\n                pass\n        headers.update({\n            'List-Archive': '<%s/groups/%s>' % (base_url, slug(self)),\n            'List-Subscribe': '<%s/groups>' % (base_url),\n            'List-Unsubscribe': '<%s/groups?unsubscribe>' % (base_url,),\n        })\n        res['headers'] = repr(headers)\n        return res\n\n    @api.multi\n    def _send_confirmation_email(self, partner_ids, unsubscribe=False):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        route = \"/groups/%(action)s/%(channel)s/%(partner)s/%(token)s\"\n        if unsubscribe:\n            template = self.env.ref('website_mail_channel.mail_template_list_unsubscribe')\n            action = 'unsubscribe'\n        else:\n            template = self.env.ref('website_mail_channel.mail_template_list_subscribe')\n            action = 'subscribe'\n\n        for partner_id in partner_ids:\n            \n            token = self._generate_action_token(partner_id, action=action)\n\n            token_url = urls.url_join(base_url, route % {\n                'action': action,\n                'channel': self.id,\n                'partner': partner_id,\n                'token': token,\n            })\n            template.with_context(token_url=token_url).send_mail(self.id,\n                force_send=True,\n                email_values={'recipient_ids': [(4, partner_id)]}\n            )\n\n        return True\n\n    @api.multi\n    def _generate_action_token(self, partner_id, action='unsubscribe'):\n        self.ensure_one()\n        secret = self.env['ir.config_parameter'].sudo().get_param('database.secret')\n        data = '$'.join([\n                str(self.id),\n                str(partner_id),\n                action])\n        return hmac.new(secret.encode('utf-8'), data.encode('utf-8')).hexdigest()\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     generate new token per subscriber ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport hmac\n\nfrom werkzeug import urls\n\nfrom odoo import api, models\nfrom odoo.tools.safe_eval import safe_eval\nfrom odoo.addons.http_routing.models.ir_http import slug\n\n\nclass MailGroup(models.Model):\n    _inherit = 'mail.channel'\n\n    @api.multi\n    def message_get_email_values(self, notif_mail=None):\n        self.ensure_one()\n        res = super(MailGroup, self).message_get_email_values(notif_mail=notif_mail)\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        headers = {}\n        if res.get('headers'):\n            try:\n                headers = safe_eval(res['headers'])\n            except Exception:\n                pass\n        headers.update({\n            'List-Archive': '<%s/groups/%s>' % (base_url, slug(self)),\n            'List-Subscribe': '<%s/groups>' % (base_url),\n            'List-Unsubscribe': '<%s/groups?unsubscribe>' % (base_url,),\n        })\n        res['headers'] = repr(headers)\n        return res\n\n    @api.multi\n    def _send_confirmation_email(self, partner_ids, unsubscribe=False):\n        base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')\n        route = \"/groups/%(action)s/%(channel)s/%(partner)s/%(token)s\"\n        if unsubscribe:\n            template = self.env.ref('website_mail_channel.mail_template_list_unsubscribe')\n            action = 'unsubscribe'\n        else:\n            template = self.env.ref('website_mail_channel.mail_template_list_subscribe')\n            action = 'subscribe'\n\n        for partner_id in partner_ids:\n            # generate a new token per subscriber\n            token = self._generate_action_token(partner_id, action=action)\n\n            token_url = urls.url_join(base_url, route % {\n                'action': action,\n                'channel': self.id,\n                'partner': partner_id,\n                'token': token,\n            })\n            template.with_context(token_url=token_url).send_mail(self.id,\n                force_send=True,\n                email_values={'recipient_ids': [(4, partner_id)]}\n            )\n\n        return True\n\n    @api.multi\n    def _generate_action_token(self, partner_id, action='unsubscribe'):\n        self.ensure_one()\n        secret = self.env['ir.config_parameter'].sudo().get_param('database.secret')\n        data = '$'.join([\n                str(self.id),\n                str(partner_id),\n                action])\n        return hmac.new(secret.encode('utf-8'), data.encode('utf-8')).hexdigest()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "mail_channel.py", "id": "527ccc80d67ea7799cd654eac561e2f2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_mail_channel/models/mail_channel.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}