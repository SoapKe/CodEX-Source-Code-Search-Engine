{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.addons.website_sale.controllers.main import WebsiteSale\n\n\nclass WebsiteSaleDelivery(WebsiteSale):\n\n    @http.route(['/shop/payment'], type='http', auth=\"public\", website=True)\n    def payment(self, **post):\n        order = request.website.sale_get_order()\n        carrier_id = post.get('carrier_id')\n        if carrier_id:\n            carrier_id = int(carrier_id)\n        if order:\n            order._check_carrier_quotation(force_carrier_id=carrier_id)\n            if carrier_id:\n                return request.redirect(\"/shop/payment\")\n\n        return super(WebsiteSaleDelivery, self).payment(**post)\n\n    def order_lines_2_google_api(self, order_lines):\n        \"\"\" Transforms a list of order lines into a dict for google analytics \"\"\"\n        order_lines_not_delivery = order_lines.filtered(lambda line: not line.is_delivery)\n        return super(WebsiteSaleDelivery, self).order_lines_2_google_api(order_lines_not_delivery)\n\n    def order_2_return_dict(self, order):\n        \"\"\" Returns the tracking_cart dict of the order for Google analytics \"\"\"\n        ret = super(WebsiteSaleDelivery, self).order_2_return_dict(order)\n        for line in order.order_line:\n            if line.is_delivery:\n                ret['transaction']['shipping'] = line.price_unit\n        return ret\n\n    def _get_shop_payment_values(self, order, **kwargs):\n        values = super(WebsiteSaleDelivery, self)._get_shop_payment_values(order, **kwargs)\n        if not order._get_delivery_methods():\n            values['errors'].append(\n                (_('Sorry, we are unable to ship your order'),\n                 _('No shipping method is available for your current order and shipping address. '\n                   'Please contact us for more information.')))\n\n        has_stockable_products = any(line.product_id.type in ['consu', 'product'] for line in order.order_line)\n        if has_stockable_products:\n            if order.carrier_id and not order.delivery_rating_success:\n                values['errors'].append(\n                    (_(\"Ouch, you cannot choose this carrier!\"),\n                     _(\"%s does not ship to your address, please choose another one.\\n(Error: %s)\" % (order.carrier_id.name, order.delivery_message))))\n                order._remove_delivery_line()\n\n            delivery_carriers = order._get_delivery_methods()\n            values['deliveries'] = delivery_carriers.sudo()\n\n        values['delivery_action_id'] = request.env.ref('delivery.action_delivery_carrier_form').id\n        return values\n\n    @http.route(['/shop/update_carrier'], type='json', auth='public', methods=['POST'], website=True, csrf=False)\n    def update_eshop_carrier(self, **post):\n        order = request.website.sale_get_order()\n        carrier_id = int(post['carrier_id'])\n        if order:\n            order._check_carrier_quotation(force_carrier_id=carrier_id)\n            return {'status': order.delivery_rating_success,\n                    'error_message': order.delivery_message,\n                    'carrier_id': carrier_id,\n                    'new_amount_delivery': order.currency_id.round(order.delivery_price),\n                    'new_amount_untaxed': order.amount_untaxed,\n                    'new_amount_tax': order.amount_tax,\n                    'new_amount_total': order.amount_total,\n            }\n", "comments": "    transforms list order lines dict google analytics             order lines delivery   order lines filtered(lambda line  line delivery)         return super(websitesaledelivery  self) order lines 2 google api(order lines delivery)      def order 2 return dict(self  order)              returns tracking cart dict order google analytics            coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import http, _\nfrom odoo.http import request\nfrom odoo.addons.website_sale.controllers.main import WebsiteSale\n\n\nclass WebsiteSaleDelivery(WebsiteSale):\n\n    @http.route(['/shop/payment'], type='http', auth=\"public\", website=True)\n    def payment(self, **post):\n        order = request.website.sale_get_order()\n        carrier_id = post.get('carrier_id')\n        if carrier_id:\n            carrier_id = int(carrier_id)\n        if order:\n            order._check_carrier_quotation(force_carrier_id=carrier_id)\n            if carrier_id:\n                return request.redirect(\"/shop/payment\")\n\n        return super(WebsiteSaleDelivery, self).payment(**post)\n\n    def order_lines_2_google_api(self, order_lines):\n        \"\"\" Transforms a list of order lines into a dict for google analytics \"\"\"\n        order_lines_not_delivery = order_lines.filtered(lambda line: not line.is_delivery)\n        return super(WebsiteSaleDelivery, self).order_lines_2_google_api(order_lines_not_delivery)\n\n    def order_2_return_dict(self, order):\n        \"\"\" Returns the tracking_cart dict of the order for Google analytics \"\"\"\n        ret = super(WebsiteSaleDelivery, self).order_2_return_dict(order)\n        for line in order.order_line:\n            if line.is_delivery:\n                ret['transaction']['shipping'] = line.price_unit\n        return ret\n\n    def _get_shop_payment_values(self, order, **kwargs):\n        values = super(WebsiteSaleDelivery, self)._get_shop_payment_values(order, **kwargs)\n        if not order._get_delivery_methods():\n            values['errors'].append(\n                (_('Sorry, we are unable to ship your order'),\n                 _('No shipping method is available for your current order and shipping address. '\n                   'Please contact us for more information.')))\n\n        has_stockable_products = any(line.product_id.type in ['consu', 'product'] for line in order.order_line)\n        if has_stockable_products:\n            if order.carrier_id and not order.delivery_rating_success:\n                values['errors'].append(\n                    (_(\"Ouch, you cannot choose this carrier!\"),\n                     _(\"%s does not ship to your address, please choose another one.\\n(Error: %s)\" % (order.carrier_id.name, order.delivery_message))))\n                order._remove_delivery_line()\n\n            delivery_carriers = order._get_delivery_methods()\n            values['deliveries'] = delivery_carriers.sudo()\n\n        values['delivery_action_id'] = request.env.ref('delivery.action_delivery_carrier_form').id\n        return values\n\n    @http.route(['/shop/update_carrier'], type='json', auth='public', methods=['POST'], website=True, csrf=False)\n    def update_eshop_carrier(self, **post):\n        order = request.website.sale_get_order()\n        carrier_id = int(post['carrier_id'])\n        if order:\n            order._check_carrier_quotation(force_carrier_id=carrier_id)\n            return {'status': order.delivery_rating_success,\n                    'error_message': order.delivery_message,\n                    'carrier_id': carrier_id,\n                    'new_amount_delivery': order.currency_id.round(order.delivery_price),\n                    'new_amount_untaxed': order.amount_untaxed,\n                    'new_amount_tax': order.amount_tax,\n                    'new_amount_total': order.amount_total,\n            }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "ae3692f860c64db9a5f81875f7a11cf2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_sale_delivery/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}