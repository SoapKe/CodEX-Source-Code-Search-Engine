{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_request,\n)\nfrom ..utils import (\n    ExtractorError,\n)\n\n\nclass ScreencastIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?screencast\\.com/t/(?P<id>[a-zA-Z0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.screencast.com/t/3ZEjQXlT',\n        'md5': '917df1c13798a3e96211dd1561fded83',\n        'info_dict': {\n            'id': '3ZEjQXlT',\n            'ext': 'm4v',\n            'title': 'Color Measurement with Ocean Optics Spectrometers',\n            'description': 'md5:240369cde69d8bed61349a199c5fb153',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n        }\n    }, {\n        'url': 'http://www.screencast.com/t/V2uXehPJa1ZI',\n        'md5': 'e8e4b375a7660a9e7e35c33973410d34',\n        'info_dict': {\n            'id': 'V2uXehPJa1ZI',\n            'ext': 'mov',\n            'title': 'The Amadeus Spectrometer',\n            'description': 're:^In this video, our friends at.*To learn more about Amadeus, visit',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n        }\n    }, {\n        'url': 'http://www.screencast.com/t/aAB3iowa',\n        'md5': 'dedb2734ed00c9755761ccaee88527cd',\n        'info_dict': {\n            'id': 'aAB3iowa',\n            'ext': 'mp4',\n            'title': 'Google Earth Export',\n            'description': 'Provides a demo of a CommunityViz export to Google Earth, one of the 3D viewing options.',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n        }\n    }, {\n        'url': 'http://www.screencast.com/t/X3ddTrYh',\n        'md5': '669ee55ff9c51988b4ebc0877cc8b159',\n        'info_dict': {\n            'id': 'X3ddTrYh',\n            'ext': 'wmv',\n            'title': 'Toolkit 6 User Group Webinar (2014-03-04) - Default Judgment and First Impression',\n            'description': 'md5:7b9f393bc92af02326a5c5889639eab0',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n        }\n    }, {\n        'url': 'http://screencast.com/t/aAB3iowa',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._html_search_regex(\n            r'<embed name=\"Video\".*?src=\"([^\"]+)\"', webpage,\n            'QuickTime embed', default=None)\n\n        if video_url is None:\n            flash_vars_s = self._html_search_regex(\n                r'<param name=\"flashVars\" value=\"([^\"]+)\"', webpage, 'flash vars',\n                default=None)\n            if not flash_vars_s:\n                flash_vars_s = self._html_search_regex(\n                    r'<param name=\"initParams\" value=\"([^\"]+)\"', webpage, 'flash vars',\n                    default=None)\n                if flash_vars_s:\n                    flash_vars_s = flash_vars_s.replace(',', '&')\n            if flash_vars_s:\n                flash_vars = compat_parse_qs(flash_vars_s)\n                video_url_raw = compat_urllib_request.quote(\n                    flash_vars['content'][0])\n                video_url = video_url_raw.replace('http%3A', 'http:')\n\n        if video_url is None:\n            video_meta = self._html_search_meta(\n                'og:video', webpage, default=None)\n            if video_meta:\n                video_url = self._search_regex(\n                    r'src=(.*?)(?:$|&)', video_meta,\n                    'meta tag video URL', default=None)\n\n        if video_url is None:\n            raise ExtractorError('Cannot find video')\n\n        title = self._og_search_title(webpage, default=None)\n        if title is None:\n            title = self._html_search_regex(\n                [r'<b>Title:</b> ([^<]+)</div>',\n                 r'class=\"tabSeperator\">></span><span class=\"tabText\">(.+?)<',\n                 r'<title>([^<]+)</title>'],\n                webpage, 'title')\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._og_search_description(webpage, default=None)\n        if description is None:\n            description = self._html_search_meta('description', webpage)\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urllib_request,\n)\nfrom ..utils import (\n    ExtractorError,\n)\n\n\nclass ScreencastIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?screencast\\.com/t/(?P<id>[a-zA-Z0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.screencast.com/t/3ZEjQXlT',\n        'md5': '917df1c13798a3e96211dd1561fded83',\n        'info_dict': {\n            'id': '3ZEjQXlT',\n            'ext': 'm4v',\n            'title': 'Color Measurement with Ocean Optics Spectrometers',\n            'description': 'md5:240369cde69d8bed61349a199c5fb153',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n        }\n    }, {\n        'url': 'http://www.screencast.com/t/V2uXehPJa1ZI',\n        'md5': 'e8e4b375a7660a9e7e35c33973410d34',\n        'info_dict': {\n            'id': 'V2uXehPJa1ZI',\n            'ext': 'mov',\n            'title': 'The Amadeus Spectrometer',\n            'description': 're:^In this video, our friends at.*To learn more about Amadeus, visit',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n        }\n    }, {\n        'url': 'http://www.screencast.com/t/aAB3iowa',\n        'md5': 'dedb2734ed00c9755761ccaee88527cd',\n        'info_dict': {\n            'id': 'aAB3iowa',\n            'ext': 'mp4',\n            'title': 'Google Earth Export',\n            'description': 'Provides a demo of a CommunityViz export to Google Earth, one of the 3D viewing options.',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n        }\n    }, {\n        'url': 'http://www.screencast.com/t/X3ddTrYh',\n        'md5': '669ee55ff9c51988b4ebc0877cc8b159',\n        'info_dict': {\n            'id': 'X3ddTrYh',\n            'ext': 'wmv',\n            'title': 'Toolkit 6 User Group Webinar (2014-03-04) - Default Judgment and First Impression',\n            'description': 'md5:7b9f393bc92af02326a5c5889639eab0',\n            'thumbnail': r're:^https?://.*\\.(?:gif|jpg)$',\n        }\n    }, {\n        'url': 'http://screencast.com/t/aAB3iowa',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        video_url = self._html_search_regex(\n            r'<embed name=\"Video\".*?src=\"([^\"]+)\"', webpage,\n            'QuickTime embed', default=None)\n\n        if video_url is None:\n            flash_vars_s = self._html_search_regex(\n                r'<param name=\"flashVars\" value=\"([^\"]+)\"', webpage, 'flash vars',\n                default=None)\n            if not flash_vars_s:\n                flash_vars_s = self._html_search_regex(\n                    r'<param name=\"initParams\" value=\"([^\"]+)\"', webpage, 'flash vars',\n                    default=None)\n                if flash_vars_s:\n                    flash_vars_s = flash_vars_s.replace(',', '&')\n            if flash_vars_s:\n                flash_vars = compat_parse_qs(flash_vars_s)\n                video_url_raw = compat_urllib_request.quote(\n                    flash_vars['content'][0])\n                video_url = video_url_raw.replace('http%3A', 'http:')\n\n        if video_url is None:\n            video_meta = self._html_search_meta(\n                'og:video', webpage, default=None)\n            if video_meta:\n                video_url = self._search_regex(\n                    r'src=(.*?)(?:$|&)', video_meta,\n                    'meta tag video URL', default=None)\n\n        if video_url is None:\n            raise ExtractorError('Cannot find video')\n\n        title = self._og_search_title(webpage, default=None)\n        if title is None:\n            title = self._html_search_regex(\n                [r'<b>Title:</b> ([^<]+)</div>',\n                 r'class=\"tabSeperator\">></span><span class=\"tabText\">(.+?)<',\n                 r'<title>([^<]+)</title>'],\n                webpage, 'title')\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._og_search_description(webpage, default=None)\n        if description is None:\n            description = self._html_search_meta('description', webpage)\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "screencast.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/screencast.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}