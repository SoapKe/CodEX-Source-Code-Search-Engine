{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import fields, tools\nfrom odoo.addons.event.tests.common import TestEventCommon\nfrom odoo.tools import mute_logger\n\n\nclass TestMailSchedule(TestEventCommon):\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_00_event_mail_schedule(self):\n        \n        now = fields.datetime.now()\n        event_date_begin = now + relativedelta(days=1)\n        event_date_end = now + relativedelta(days=3)\n\n        test_event = self.Event.sudo(self.user_eventmanager).create({\n            'name': 'TestEventMail',\n            'auto_confirm': True,\n            'date_begin': event_date_begin,\n            'date_end': event_date_end,\n            'seats_max': 10,\n            'event_mail_ids': [\n                (0, 0, {  \n                    'interval_unit': 'now',\n                    'interval_type': 'after_sub',\n                    'template_id': self.env['ir.model.data'].xmlid_to_res_id('event.event_subscription')}),\n                (0, 0, {  \n                    'interval_nbr': 1,\n                    'interval_unit': 'days',\n                    'interval_type': 'before_event',\n                    'template_id': self.env['ir.model.data'].xmlid_to_res_id('event.event_reminder')}),\n            ]\n        })\n\n        \n        self.Registration.sudo(self.user_eventuser).create({\n            'event_id': test_event.id,\n            'name': 'Reg0',\n            'email': 'reg0@example.com',\n        })\n        self.Registration.sudo(self.user_eventuser).create({\n            'event_id': test_event.id,\n            'name': 'Reg1',\n            'email': 'reg1@example.com',\n        })\n\n        \n        schedulers = self.EventMail.search([('event_id', '=', test_event.id), ('interval_type', '=', 'after_sub')])\n        self.assertEqual(len(schedulers), 1, 'event: wrong scheduler creation')\n        self.assertEqual(schedulers[0].scheduled_date, test_event.create_date, 'event: incorrect scheduled date for checking controller')\n\n        \n        self.assertEqual(len(schedulers[0].mail_registration_ids), 2, 'event: incorrect number of mail scheduled date')\n\n        mails = self.env['mail.mail'].search([('subject', 'ilike', 'registration'), ('date', '>=', datetime.datetime.strftime(now, tools.DEFAULT_SERVER_DATETIME_FORMAT))], order='date DESC', limit=3)\n        self.assertEqual(len(mails), 2, 'event: wrong number of registration mail sent')\n\n        for registration in schedulers[0].mail_registration_ids:\n            self.assertTrue(registration.mail_sent, 'event: wrongly confirmed mailing on registration')\n\n        \n        schedulers = self.EventMail.search([('event_id', '=', test_event.id), ('interval_type', '=', 'before_event')])\n        self.assertEqual(len(schedulers), 1, 'event: wrong scheduler creation')\n        self.assertEqual(schedulers[0].scheduled_date, datetime.datetime.strftime(event_date_begin + relativedelta(days=-1), tools.DEFAULT_SERVER_DATETIME_FORMAT), 'event: incorrect scheduled date')\n\n        \n        schedulers[0].execute()\n\n        self.assertTrue(schedulers[0].mail_sent, 'event: reminder scheduler should have sent an email')\n        self.assertTrue(schedulers[0].done, 'event: reminder scheduler should be done')\n\n        mails = self.env['mail.mail'].search([('subject', 'ilike', 'TestEventMail'), ('date', '>=', datetime.datetime.strftime(now, tools.DEFAULT_SERVER_DATETIME_FORMAT))], order='date DESC', limit=3)\n        self.assertEqual(len(mails), 3, 'event: wrong number of reminders in outgoing mail queue')\n\n\n", "comments": "    test mail scheduling events            coding  utf 8        right subscription    1 days event    create registrations    check subscription scheduler    verify subscription scheduler auto executed registration    check event scheduler    execute event reminder scheduler explicitly ", "content": "# -*- coding: utf-8 -*-\n\nimport datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import fields, tools\nfrom odoo.addons.event.tests.common import TestEventCommon\nfrom odoo.tools import mute_logger\n\n\nclass TestMailSchedule(TestEventCommon):\n\n    @mute_logger('odoo.addons.base.ir.ir_model', 'odoo.models')\n    def test_00_event_mail_schedule(self):\n        \"\"\" Test mail scheduling for events \"\"\"\n        now = fields.datetime.now()\n        event_date_begin = now + relativedelta(days=1)\n        event_date_end = now + relativedelta(days=3)\n\n        test_event = self.Event.sudo(self.user_eventmanager).create({\n            'name': 'TestEventMail',\n            'auto_confirm': True,\n            'date_begin': event_date_begin,\n            'date_end': event_date_end,\n            'seats_max': 10,\n            'event_mail_ids': [\n                (0, 0, {  # right at subscription\n                    'interval_unit': 'now',\n                    'interval_type': 'after_sub',\n                    'template_id': self.env['ir.model.data'].xmlid_to_res_id('event.event_subscription')}),\n                (0, 0, {  # 1 days before event\n                    'interval_nbr': 1,\n                    'interval_unit': 'days',\n                    'interval_type': 'before_event',\n                    'template_id': self.env['ir.model.data'].xmlid_to_res_id('event.event_reminder')}),\n            ]\n        })\n\n        # create some registrations\n        self.Registration.sudo(self.user_eventuser).create({\n            'event_id': test_event.id,\n            'name': 'Reg0',\n            'email': 'reg0@example.com',\n        })\n        self.Registration.sudo(self.user_eventuser).create({\n            'event_id': test_event.id,\n            'name': 'Reg1',\n            'email': 'reg1@example.com',\n        })\n\n        # check subscription scheduler\n        schedulers = self.EventMail.search([('event_id', '=', test_event.id), ('interval_type', '=', 'after_sub')])\n        self.assertEqual(len(schedulers), 1, 'event: wrong scheduler creation')\n        self.assertEqual(schedulers[0].scheduled_date, test_event.create_date, 'event: incorrect scheduled date for checking controller')\n\n        # verify that subscription scheduler was auto-executed after each registration\n        self.assertEqual(len(schedulers[0].mail_registration_ids), 2, 'event: incorrect number of mail scheduled date')\n\n        mails = self.env['mail.mail'].search([('subject', 'ilike', 'registration'), ('date', '>=', datetime.datetime.strftime(now, tools.DEFAULT_SERVER_DATETIME_FORMAT))], order='date DESC', limit=3)\n        self.assertEqual(len(mails), 2, 'event: wrong number of registration mail sent')\n\n        for registration in schedulers[0].mail_registration_ids:\n            self.assertTrue(registration.mail_sent, 'event: wrongly confirmed mailing on registration')\n\n        # check before event scheduler\n        schedulers = self.EventMail.search([('event_id', '=', test_event.id), ('interval_type', '=', 'before_event')])\n        self.assertEqual(len(schedulers), 1, 'event: wrong scheduler creation')\n        self.assertEqual(schedulers[0].scheduled_date, datetime.datetime.strftime(event_date_begin + relativedelta(days=-1), tools.DEFAULT_SERVER_DATETIME_FORMAT), 'event: incorrect scheduled date')\n\n        # execute event reminder scheduler explicitly\n        schedulers[0].execute()\n\n        self.assertTrue(schedulers[0].mail_sent, 'event: reminder scheduler should have sent an email')\n        self.assertTrue(schedulers[0].done, 'event: reminder scheduler should be done')\n\n        mails = self.env['mail.mail'].search([('subject', 'ilike', 'TestEventMail'), ('date', '>=', datetime.datetime.strftime(now, tools.DEFAULT_SERVER_DATETIME_FORMAT))], order='date DESC', limit=3)\n        self.assertEqual(len(mails), 3, 'event: wrong number of reminders in outgoing mail queue')\n\n\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_mail_schedule.py", "id": "5ea81cbd0d070040be9bb8aadec2aef2", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/event/tests/test_mail_schedule.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}