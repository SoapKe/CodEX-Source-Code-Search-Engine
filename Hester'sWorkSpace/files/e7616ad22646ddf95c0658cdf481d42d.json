{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .kaltura import KalturaIE\nfrom ..utils import (\n    get_element_by_class,\n    get_element_by_id,\n    strip_or_none,\n    urljoin,\n)\n\n\nclass AZMedienBaseIE(InfoExtractor):\n    def _kaltura_video(self, partner_id, entry_id):\n        return self.url_result(\n            'kaltura:%s:%s' % (partner_id, entry_id), ie=KalturaIE.ie_key(),\n            video_id=entry_id)\n\n\nclass AZMedienIE(AZMedienBaseIE):\n    IE_DESC = 'AZ Medien videos'\n    _VALID_URL = r\n\n    _TEST = {\n        'url': 'http://www.telezueri.ch/all-episodes/astrotalk',\n        'info_dict': {\n            'id': 'astrotalk',\n            'title': 'TeleZ\u00fcri: AstroTalk - alle episoden',\n            'description': 'md5:4c0f7e7d741d906004266e295ceb4a26',\n        },\n        'playlist_mincount': 13,\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n        webpage = self._download_webpage(url, playlist_id)\n        episodes = get_element_by_class('search-mobile-box', webpage)\n        entries = [self.url_result(\n            urljoin(url, m.group('url'))) for m in re.finditer(\n                r'<a[^>]+href=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', episodes)]\n        title = self._og_search_title(webpage, fatal=False)\n        description = self._og_search_description(webpage)\n        return self.playlist_result(entries, playlist_id, title, description)\n", "comments": "(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            telezueri\\.ch|\n                            telebaern\\.tv|\n                            telem1\\.ch\n                        )/\n                        [0-9]+-show-[^/\\#]+\n                        (?:\n                            /[0-9]+-episode-[^/\\#]+\n                            (?:\n                                /[0-9]+-segment-(?:[^/\\#]+\\#)?|\n                                \\#\n                            )|\n                            \\#\n                        )\n                        (?P<id>[^\\#]+)\n                    '''\n\n    _TESTS = [{\n        # URL with 'segment'\n        'url': 'http://www.telezueri.ch/62-show-zuerinews/13772-episode-sonntag-18-dezember-2016/32419-segment-massenabweisungen-beim-hiltl-club-wegen-pelzboom',\n        'info_dict': {\n            'id': '1_2444peh4',\n            'ext': 'mp4',\n            'title': 'Massenabweisungen beim Hiltl Club wegen Pelzboom',\n            'description': 'md5:9ea9dd1b159ad65b36ddcf7f0d7c76a8',\n            'uploader_id': 'TeleZ?ri',\n            'upload_date': '20161218',\n            'timestamp': 1482084490,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # URL with 'segment' and fragment:\n        'url': 'http://www.telebaern.tv/118-show-news/14240-episode-dienstag-17-januar-2017/33666-segment-achtung-gefahr#zu-wenig-pflegerinnen-und-pfleger',\n        'only_matching': True\n    }, {\n        # URL with 'episode' and fragment:\n        'url': 'http://www.telem1.ch/47-show-sonntalk/13986-episode-soldaten-fuer-grenzschutz-energiestrategie-obama-bilanz#soldaten-fuer-grenzschutz-energiestrategie-obama-bilanz',\n        'only_matching': True\n    }, {\n        # URL with 'show' and fragment:\n        'url': 'http://www.telezueri.ch/66-show-sonntalk#burka-plakate-trump-putin-china-besuch',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        partner_id = self._search_regex(\n            r'<script[^>]+src=[\"\\'](?:https?:)?//(?:[^/]+\\.)?kaltura\\.com(?:/[^/]+)*/(?:p|partner_id)/([0-9]+)',\n            webpage, 'kaltura partner id')\n        entry_id = self._html_search_regex(\n            r'<a[^>]+data-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1[^>]+data-slug=[\"\\']%s'\n            % re.escape(video_id), webpage, 'kaltura entry id', group='id')\n\n        return self._kaltura_video(partner_id, entry_id)\n\n\nclass AZMedienPlaylistIE(AZMedienBaseIE):\n    IE_DESC = 'AZ Medien playlists'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            telezueri\\.ch|\n                            telebaern\\.tv|\n                            telem1\\.ch\n                        )/\n                        (?P<id>[0-9]+-\n                            (?:\n                                show|\n                                topic|\n                                themen\n                            )-[^/\\#]+\n                            (?:\n                                /[0-9]+-episode-[^/\\#]+\n                            )?\n                        )$\n                    '''\n\n    _TESTS = [{\n        # URL with 'episode'\n        'url': 'http://www.telebaern.tv/118-show-news/13735-episode-donnerstag-15-dezember-2016',\n        'info_dict': {\n            'id': '118-show-news/13735-episode-donnerstag-15-dezember-2016',\n            'title': 'News - Donnerstag, 15. Dezember 2016',\n        },\n        'playlist_count': 9,\n    }, {\n        # URL with 'themen'\n        'url': 'http://www.telem1.ch/258-themen-tele-m1-classics',\n        'info_dict': {\n            'id': '258-themen-tele-m1-classics',\n            'title': 'Tele M1 Classics',\n        },\n        'playlist_mincount': 15,\n    }, {\n        # URL with 'topic', contains nested playlists\n        'url': 'http://www.telezueri.ch/219-topic-aera-trump-hat-offiziell-begonnen',\n        'only_matching': True,\n    }, {\n        # URL with 'show' only\n        'url': 'http://www.telezueri.ch/86-show-talktaeglich',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        show_id = self._match_id(url)\n        webpage = self._download_webpage(url, show_id)\n\n        entries = []\n\n        partner_id = self._search_regex(\n            r'src=[\"\\'](?:https?:)?//(?:[^/]+\\.)kaltura\\.com/(?:[^/]+/)*(?:p|partner_id)/(\\d+)',\n            webpage, 'kaltura partner id', default=None)\n\n        if partner_id:\n            entries = [\n                self._kaltura_video(partner_id, m.group('id'))\n                for m in re.finditer(\n                    r'data-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1', webpage)]\n\n        if not entries:\n            entries = [\n                self.url_result(m.group('url'), ie=AZMedienIE.ie_key())\n                for m in re.finditer(\n                    r'<a[^>]+data-real=([\"\\'])(?P<url>http.+?)\\1', webpage)]\n\n        if not entries:\n            entries = [\n                # May contain nested playlists (e.g. [1]) thus no explicit\n                # ie_key\n                # 1. http://www.telezueri.ch/219-topic-aera-trump-hat-offiziell-begonnen)\n                self.url_result(urljoin(url, m.group('url')))\n                for m in re.finditer(\n                    r'<a[^>]+name=[^>]+href=([\"\\'])(?P<url>/.+?)\\1', webpage)]\n\n        title = self._search_regex(\n            r'episodeShareTitle\\s*=\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',\n            webpage, 'title',\n            default=strip_or_none(get_element_by_id(\n                'video-title', webpage)), group='title')\n\n        return self.playlist_result(entries, show_id, title)\n\n\nclass AZMedienShowPlaylistIE(AZMedienBaseIE):\n    IE_DESC = 'AZ Medien show playlists'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            telezueri\\.ch|\n                            telebaern\\.tv|\n                            telem1\\.ch\n                        )/\n                        (?:\n                            all-episodes|\n                            alle-episoden\n                        )/\n                        (?P<id>[^/?#&]+)\n                    \n \n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .kaltura import KalturaIE\nfrom ..utils import (\n    get_element_by_class,\n    get_element_by_id,\n    strip_or_none,\n    urljoin,\n)\n\n\nclass AZMedienBaseIE(InfoExtractor):\n    def _kaltura_video(self, partner_id, entry_id):\n        return self.url_result(\n            'kaltura:%s:%s' % (partner_id, entry_id), ie=KalturaIE.ie_key(),\n            video_id=entry_id)\n\n\nclass AZMedienIE(AZMedienBaseIE):\n    IE_DESC = 'AZ Medien videos'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            telezueri\\.ch|\n                            telebaern\\.tv|\n                            telem1\\.ch\n                        )/\n                        [0-9]+-show-[^/\\#]+\n                        (?:\n                            /[0-9]+-episode-[^/\\#]+\n                            (?:\n                                /[0-9]+-segment-(?:[^/\\#]+\\#)?|\n                                \\#\n                            )|\n                            \\#\n                        )\n                        (?P<id>[^\\#]+)\n                    '''\n\n    _TESTS = [{\n        # URL with 'segment'\n        'url': 'http://www.telezueri.ch/62-show-zuerinews/13772-episode-sonntag-18-dezember-2016/32419-segment-massenabweisungen-beim-hiltl-club-wegen-pelzboom',\n        'info_dict': {\n            'id': '1_2444peh4',\n            'ext': 'mp4',\n            'title': 'Massenabweisungen beim Hiltl Club wegen Pelzboom',\n            'description': 'md5:9ea9dd1b159ad65b36ddcf7f0d7c76a8',\n            'uploader_id': 'TeleZ?ri',\n            'upload_date': '20161218',\n            'timestamp': 1482084490,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # URL with 'segment' and fragment:\n        'url': 'http://www.telebaern.tv/118-show-news/14240-episode-dienstag-17-januar-2017/33666-segment-achtung-gefahr#zu-wenig-pflegerinnen-und-pfleger',\n        'only_matching': True\n    }, {\n        # URL with 'episode' and fragment:\n        'url': 'http://www.telem1.ch/47-show-sonntalk/13986-episode-soldaten-fuer-grenzschutz-energiestrategie-obama-bilanz#soldaten-fuer-grenzschutz-energiestrategie-obama-bilanz',\n        'only_matching': True\n    }, {\n        # URL with 'show' and fragment:\n        'url': 'http://www.telezueri.ch/66-show-sonntalk#burka-plakate-trump-putin-china-besuch',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        partner_id = self._search_regex(\n            r'<script[^>]+src=[\"\\'](?:https?:)?//(?:[^/]+\\.)?kaltura\\.com(?:/[^/]+)*/(?:p|partner_id)/([0-9]+)',\n            webpage, 'kaltura partner id')\n        entry_id = self._html_search_regex(\n            r'<a[^>]+data-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1[^>]+data-slug=[\"\\']%s'\n            % re.escape(video_id), webpage, 'kaltura entry id', group='id')\n\n        return self._kaltura_video(partner_id, entry_id)\n\n\nclass AZMedienPlaylistIE(AZMedienBaseIE):\n    IE_DESC = 'AZ Medien playlists'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            telezueri\\.ch|\n                            telebaern\\.tv|\n                            telem1\\.ch\n                        )/\n                        (?P<id>[0-9]+-\n                            (?:\n                                show|\n                                topic|\n                                themen\n                            )-[^/\\#]+\n                            (?:\n                                /[0-9]+-episode-[^/\\#]+\n                            )?\n                        )$\n                    '''\n\n    _TESTS = [{\n        # URL with 'episode'\n        'url': 'http://www.telebaern.tv/118-show-news/13735-episode-donnerstag-15-dezember-2016',\n        'info_dict': {\n            'id': '118-show-news/13735-episode-donnerstag-15-dezember-2016',\n            'title': 'News - Donnerstag, 15. Dezember 2016',\n        },\n        'playlist_count': 9,\n    }, {\n        # URL with 'themen'\n        'url': 'http://www.telem1.ch/258-themen-tele-m1-classics',\n        'info_dict': {\n            'id': '258-themen-tele-m1-classics',\n            'title': 'Tele M1 Classics',\n        },\n        'playlist_mincount': 15,\n    }, {\n        # URL with 'topic', contains nested playlists\n        'url': 'http://www.telezueri.ch/219-topic-aera-trump-hat-offiziell-begonnen',\n        'only_matching': True,\n    }, {\n        # URL with 'show' only\n        'url': 'http://www.telezueri.ch/86-show-talktaeglich',\n        'only_matching': True\n    }]\n\n    def _real_extract(self, url):\n        show_id = self._match_id(url)\n        webpage = self._download_webpage(url, show_id)\n\n        entries = []\n\n        partner_id = self._search_regex(\n            r'src=[\"\\'](?:https?:)?//(?:[^/]+\\.)kaltura\\.com/(?:[^/]+/)*(?:p|partner_id)/(\\d+)',\n            webpage, 'kaltura partner id', default=None)\n\n        if partner_id:\n            entries = [\n                self._kaltura_video(partner_id, m.group('id'))\n                for m in re.finditer(\n                    r'data-id=([\"\\'])(?P<id>(?:(?!\\1).)+)\\1', webpage)]\n\n        if not entries:\n            entries = [\n                self.url_result(m.group('url'), ie=AZMedienIE.ie_key())\n                for m in re.finditer(\n                    r'<a[^>]+data-real=([\"\\'])(?P<url>http.+?)\\1', webpage)]\n\n        if not entries:\n            entries = [\n                # May contain nested playlists (e.g. [1]) thus no explicit\n                # ie_key\n                # 1. http://www.telezueri.ch/219-topic-aera-trump-hat-offiziell-begonnen)\n                self.url_result(urljoin(url, m.group('url')))\n                for m in re.finditer(\n                    r'<a[^>]+name=[^>]+href=([\"\\'])(?P<url>/.+?)\\1', webpage)]\n\n        title = self._search_regex(\n            r'episodeShareTitle\\s*=\\s*([\"\\'])(?P<title>(?:(?!\\1).)+)\\1',\n            webpage, 'title',\n            default=strip_or_none(get_element_by_id(\n                'video-title', webpage)), group='title')\n\n        return self.playlist_result(entries, show_id, title)\n\n\nclass AZMedienShowPlaylistIE(AZMedienBaseIE):\n    IE_DESC = 'AZ Medien show playlists'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:www\\.)?\n                        (?:\n                            telezueri\\.ch|\n                            telebaern\\.tv|\n                            telem1\\.ch\n                        )/\n                        (?:\n                            all-episodes|\n                            alle-episoden\n                        )/\n                        (?P<id>[^/?#&]+)\n                    '''\n\n    _TEST = {\n        'url': 'http://www.telezueri.ch/all-episodes/astrotalk',\n        'info_dict': {\n            'id': 'astrotalk',\n            'title': 'TeleZ\u00fcri: AstroTalk - alle episoden',\n            'description': 'md5:4c0f7e7d741d906004266e295ceb4a26',\n        },\n        'playlist_mincount': 13,\n    }\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n        webpage = self._download_webpage(url, playlist_id)\n        episodes = get_element_by_class('search-mobile-box', webpage)\n        entries = [self.url_result(\n            urljoin(url, m.group('url'))) for m in re.finditer(\n                r'<a[^>]+href=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', episodes)]\n        title = self._og_search_title(webpage, fatal=False)\n        description = self._og_search_description(webpage)\n        return self.playlist_result(entries, playlist_id, title, description)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "azmedien.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/azmedien.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}