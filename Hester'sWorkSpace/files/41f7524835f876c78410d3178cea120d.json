{"author": "odoo", "code": "#-*- coding:utf-8 -*-\n\n\nfrom odoo import api, models\n\nclass PayslipDetailsReport(models.AbstractModel):\n    _name = 'report.hr_payroll.report_payslipdetails'\n\n    def get_details_by_rule_category(self, payslip_lines):\n        PayslipLine = self.env['hr.payslip.line']\n        RuleCateg = self.env['hr.salary.rule.category']\n\n        def get_recursive_parent(current_rule_category, rule_categories=None):\n            if rule_categories:\n                rule_categories = current_rule_category | rule_categories\n            else:\n                rule_categories = current_rule_category\n\n            if current_rule_category.parent_id:\n                return get_recursive_parent(current_rule_category.parent_id, rule_categories)\n            else:\n                return rule_categories\n\n        res = {}\n        result = {}\n\n        if payslip_lines:\n            self.env.cr.execute(\"\"\"\n                SELECT pl.id, pl.category_id, pl.slip_id FROM hr_payslip_line as pl\n                LEFT JOIN hr_salary_rule_category AS rc on (pl.category_id = rc.id)\n                WHERE pl.id in %s\n                GROUP BY rc.parent_id, pl.sequence, pl.id, pl.category_id\n                ORDER BY pl.sequence, rc.parent_id\"\"\",\n                (tuple(payslip_lines.ids),))\n            for x in self.env.cr.fetchall():\n                result.setdefault(x[2], {})\n                result[x[2]].setdefault(x[1], [])\n                result[x[2]][x[1]].append(x[0])\n            for payslip_id, lines_dict in result.items():\n                res.setdefault(payslip_id, [])\n                for rule_categ_id, line_ids in lines_dict.items():\n                    rule_categories = RuleCateg.browse(rule_categ_id)\n                    lines = PayslipLine.browse(line_ids)\n                    level = 0\n                    for parent in get_recursive_parent(rule_categories):\n                        res[payslip_id].append({\n                            'rule_category': parent.name,\n                            'name': parent.name,\n                            'code': parent.code,\n                            'level': level,\n                            'total': sum(lines.mapped('total')),\n                        })\n                        level += 1\n                    for line in lines:\n                        res[payslip_id].append({\n                            'rule_category': line.name,\n                            'name': line.name,\n                            'code': line.code,\n                            'total': line.total,\n                            'level': level\n                        })\n        return res\n\n    def get_lines_by_contribution_register(self, payslip_lines):\n        result = {}\n        res = {}\n        for line in payslip_lines.filtered('register_id'):\n            result.setdefault(line.slip_id.id, {})\n            result[line.slip_id.id].setdefault(line.register_id, line)\n            result[line.slip_id.id][line.register_id] |= line\n        for payslip_id, lines_dict in result.items():\n            res.setdefault(payslip_id, [])\n            for register, lines in lines_dict.items():\n                res[payslip_id].append({\n                    'register_name': register.name,\n                    'total': sum(lines.mapped('total')),\n                })\n                for line in lines:\n                    res[payslip_id].append({\n                        'name': line.name,\n                        'code': line.code,\n                        'quantity': line.quantity,\n                        'amount': line.amount,\n                        'total': line.total,\n                    })\n        return res\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        payslips = self.env['hr.payslip'].browse(docids)\n        return {\n            'doc_ids': docids,\n            'doc_model': 'hr.payslip',\n            'docs': payslips,\n            'data': data,\n            'get_details_by_rule_category': self.get_details_by_rule_category(payslips.mapped('details_by_salary_rule_category').filtered(lambda r: r.appears_on_payslip)),\n            'get_lines_by_contribution_register': self.get_lines_by_contribution_register(payslips.mapped('line_ids').filtered(lambda r: r.appears_on_payslip)),\n        }\n", "comments": "                    select pl id  pl category id  pl slip id from hr payslip line pl                 left join hr salary rule category as rc (pl category id   rc id)                 where pl id                  group by rc parent id  pl sequence  pl id  pl category id                 order by pl sequence  rc parent id          coding utf 8        part odoo  see license file full copyright licensing details  ", "content": "#-*- coding:utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, models\n\nclass PayslipDetailsReport(models.AbstractModel):\n    _name = 'report.hr_payroll.report_payslipdetails'\n\n    def get_details_by_rule_category(self, payslip_lines):\n        PayslipLine = self.env['hr.payslip.line']\n        RuleCateg = self.env['hr.salary.rule.category']\n\n        def get_recursive_parent(current_rule_category, rule_categories=None):\n            if rule_categories:\n                rule_categories = current_rule_category | rule_categories\n            else:\n                rule_categories = current_rule_category\n\n            if current_rule_category.parent_id:\n                return get_recursive_parent(current_rule_category.parent_id, rule_categories)\n            else:\n                return rule_categories\n\n        res = {}\n        result = {}\n\n        if payslip_lines:\n            self.env.cr.execute(\"\"\"\n                SELECT pl.id, pl.category_id, pl.slip_id FROM hr_payslip_line as pl\n                LEFT JOIN hr_salary_rule_category AS rc on (pl.category_id = rc.id)\n                WHERE pl.id in %s\n                GROUP BY rc.parent_id, pl.sequence, pl.id, pl.category_id\n                ORDER BY pl.sequence, rc.parent_id\"\"\",\n                (tuple(payslip_lines.ids),))\n            for x in self.env.cr.fetchall():\n                result.setdefault(x[2], {})\n                result[x[2]].setdefault(x[1], [])\n                result[x[2]][x[1]].append(x[0])\n            for payslip_id, lines_dict in result.items():\n                res.setdefault(payslip_id, [])\n                for rule_categ_id, line_ids in lines_dict.items():\n                    rule_categories = RuleCateg.browse(rule_categ_id)\n                    lines = PayslipLine.browse(line_ids)\n                    level = 0\n                    for parent in get_recursive_parent(rule_categories):\n                        res[payslip_id].append({\n                            'rule_category': parent.name,\n                            'name': parent.name,\n                            'code': parent.code,\n                            'level': level,\n                            'total': sum(lines.mapped('total')),\n                        })\n                        level += 1\n                    for line in lines:\n                        res[payslip_id].append({\n                            'rule_category': line.name,\n                            'name': line.name,\n                            'code': line.code,\n                            'total': line.total,\n                            'level': level\n                        })\n        return res\n\n    def get_lines_by_contribution_register(self, payslip_lines):\n        result = {}\n        res = {}\n        for line in payslip_lines.filtered('register_id'):\n            result.setdefault(line.slip_id.id, {})\n            result[line.slip_id.id].setdefault(line.register_id, line)\n            result[line.slip_id.id][line.register_id] |= line\n        for payslip_id, lines_dict in result.items():\n            res.setdefault(payslip_id, [])\n            for register, lines in lines_dict.items():\n                res[payslip_id].append({\n                    'register_name': register.name,\n                    'total': sum(lines.mapped('total')),\n                })\n                for line in lines:\n                    res[payslip_id].append({\n                        'name': line.name,\n                        'code': line.code,\n                        'quantity': line.quantity,\n                        'amount': line.amount,\n                        'total': line.total,\n                    })\n        return res\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        payslips = self.env['hr.payslip'].browse(docids)\n        return {\n            'doc_ids': docids,\n            'doc_model': 'hr.payslip',\n            'docs': payslips,\n            'data': data,\n            'get_details_by_rule_category': self.get_details_by_rule_category(payslips.mapped('details_by_salary_rule_category').filtered(lambda r: r.appears_on_payslip)),\n            'get_lines_by_contribution_register': self.get_lines_by_contribution_register(payslips.mapped('line_ids').filtered(lambda r: r.appears_on_payslip)),\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "report_payslip_details.py", "id": "41f7524835f876c78410d3178cea120d", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_payroll/report/report_payslip_details.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}