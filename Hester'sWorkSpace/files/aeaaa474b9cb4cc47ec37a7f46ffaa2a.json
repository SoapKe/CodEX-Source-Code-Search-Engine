{"author": "bitcoinbook", "code": "\n\n\nimport hashlib\nimport time\n\ntry:\n    long        \n    xrange\nexcept NameError:\n    long = int  \n    xrange = range\n\nmax_nonce = 2 ** 32  \n\n\ndef proof_of_work(header, difficulty_bits):\n    \n    target = 2 ** (256 - difficulty_bits)\n\n    for nonce in xrange(max_nonce):\n        hash_result = hashlib.sha256(str(header) + str(nonce)).hexdigest()\n\n        \n        if long(hash_result, 16) < target:\n            print(\"Success with nonce %d\" % nonce)\n            print(\"Hash is %s\" % hash_result)\n            return (hash_result, nonce)\n\n    print(\"Failed after %d (max_nonce) tries\" % nonce)\n    return nonce\n\n\nif __name__ == '__main__':\n    nonce = 0\n    hash_result = ''\n\n    \n    for difficulty_bits in xrange(32):\n        difficulty = 2 ** difficulty_bits\n        print(\"Difficulty: %ld (%d bits)\" % (difficulty, difficulty_bits))\n        print(\"Starting search...\")\n\n        \n        start_time = time.time()\n\n        \n        \n        new_block = 'test block with transactions' + hash_result\n\n        \n        (hash_result, nonce) = proof_of_work(new_block, difficulty_bits)\n\n        \n        end_time = time.time()\n\n        elapsed_time = end_time - start_time\n        print(\"Elapsed Time: %.4f seconds\" % elapsed_time)\n\n        if elapsed_time > 0:\n\n            \n            hash_power = float(long(nonce) / elapsed_time)\n            print(\"Hashing Power: %ld hashes per second\" % hash_power)\n", "comments": "   usr bin env python    example proof work algorithm    python 2    python 3    4 billion    calculate difficulty target    check valid result  target    difficulty 0 31 bits    checkpoint current time    make new block includes hash previous block    fake block transactions   string    find valid nonce new block    checkpoint long took find result    estimate hashes per second ", "content": "#!/usr/bin/env python\n# example of proof-of-work algorithm\n\nimport hashlib\nimport time\n\ntry:\n    long        # Python 2\n    xrange\nexcept NameError:\n    long = int  # Python 3\n    xrange = range\n\nmax_nonce = 2 ** 32  # 4 billion\n\n\ndef proof_of_work(header, difficulty_bits):\n    # calculate the difficulty target\n    target = 2 ** (256 - difficulty_bits)\n\n    for nonce in xrange(max_nonce):\n        hash_result = hashlib.sha256(str(header) + str(nonce)).hexdigest()\n\n        # check if this is a valid result, below the target\n        if long(hash_result, 16) < target:\n            print(\"Success with nonce %d\" % nonce)\n            print(\"Hash is %s\" % hash_result)\n            return (hash_result, nonce)\n\n    print(\"Failed after %d (max_nonce) tries\" % nonce)\n    return nonce\n\n\nif __name__ == '__main__':\n    nonce = 0\n    hash_result = ''\n\n    # difficulty from 0 to 31 bits\n    for difficulty_bits in xrange(32):\n        difficulty = 2 ** difficulty_bits\n        print(\"Difficulty: %ld (%d bits)\" % (difficulty, difficulty_bits))\n        print(\"Starting search...\")\n\n        # checkpoint the current time\n        start_time = time.time()\n\n        # make a new block which includes the hash from the previous block\n        # we fake a block of transactions - just a string\n        new_block = 'test block with transactions' + hash_result\n\n        # find a valid nonce for the new block\n        (hash_result, nonce) = proof_of_work(new_block, difficulty_bits)\n\n        # checkpoint how long it took to find a result\n        end_time = time.time()\n\n        elapsed_time = end_time - start_time\n        print(\"Elapsed Time: %.4f seconds\" % elapsed_time)\n\n        if elapsed_time > 0:\n\n            # estimate the hashes per second\n            hash_power = float(long(nonce) / elapsed_time)\n            print(\"Hashing Power: %ld hashes per second\" % hash_power)\n", "description": "Mastering Bitcoin 2nd Edition - Programming the Open Blockchain", "file_name": "proof-of-work-example.py", "id": "aeaaa474b9cb4cc47ec37a7f46ffaa2a", "language": "Python", "project_name": "bitcoinbook", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/bitcoinbook-bitcoinbook/bitcoinbook-bitcoinbook-f8b883d/code/proof-of-work-example.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:38:06Z", "url": "https://github.com/bitcoinbook/bitcoinbook", "wiki": false}