{"author": "ansible", "code": "\n (c) 2017 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.junos import junos_config\nfrom units.modules.utils import set_module_args\nfrom .junos_module import TestJunosModule, load_fixture\n\n\nclass TestJunosConfigModule(TestJunosModule):\n\n    module = junos_config\n\n    def setUp(self):\n        super(TestJunosConfigModule, self).setUp()\n\n        self.mock_get_config = patch('ansible.modules.network.junos.junos_config.get_configuration')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.junos.junos_config.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_load_configuration = patch('ansible.modules.network.junos.junos_config.load_configuration')\n        self.load_configuration = self.mock_load_configuration.start()\n\n        self.mock_lock_configuration = patch('ansible.module_utils.network.junos.junos.lock_configuration')\n        self.lock_configuration = self.mock_lock_configuration.start()\n\n        self.mock_unlock_configuration = patch('ansible.module_utils.network.junos.junos.unlock_configuration')\n        self.unlock_configuration = self.mock_unlock_configuration.start()\n\n        self.mock_commit_configuration = patch('ansible.modules.network.junos.junos_config.commit_configuration')\n        self.commit_configuration = self.mock_commit_configuration.start()\n\n        self.mock_get_diff = patch('ansible.modules.network.junos.junos_config.get_diff')\n        self.get_diff = self.mock_get_diff.start()\n\n        self.mock_conn = patch('ansible.module_utils.connection.Connection')\n        self.conn = self.mock_conn.start()\n\n        self.mock_netconf = patch('ansible.module_utils.network.junos.junos.NetconfConnection')\n        self.netconf_conn = self.mock_netconf.start()\n\n        self.mock_exec_rpc = patch('ansible.modules.network.junos.junos_config.exec_rpc')\n        self.exec_rpc = self.mock_exec_rpc.start()\n\n        self.mock_netconf_rpc = patch('ansible.module_utils.network.common.netconf.NetconfConnection')\n        self.netconf_rpc = self.mock_netconf_rpc.start()\n\n    def tearDown(self):\n        super(TestJunosConfigModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n        self.mock_lock_configuration.stop()\n        self.mock_unlock_configuration.stop()\n        self.mock_commit_configuration.stop()\n        self.mock_get_diff.stop()\n        self.load_configuration.stop()\n        self.mock_conn.stop()\n        self.mock_netconf.stop()\n        self.mock_exec_rpc.stop()\n        self.mock_netconf_rpc.stop()\n\n    def load_fixtures(self, commands=None, format='text', changed=False):\n        self.get_config.return_value = load_fixture('get_configuration_rpc_reply.txt')\n        if changed:\n            self.load_config.return_value = load_fixture('get_configuration_rpc_reply_diff.txt')\n        else:\n            self.load_config.return_value = None\n\n    def test_junos_config_unchanged(self):\n        src = load_fixture('junos_config.set', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module()\n\n    def test_junos_config_src_set(self):\n        src = load_fixture('junos_config.set', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'set')\n        self.assertEqual(kwargs['format'], 'text')\n\n    def test_junos_config_backup(self):\n        set_module_args(dict(backup=True))\n        result = self.execute_module()\n        self.assertIn('__backup__', result)\n\n    def test_junos_config_lines(self):\n        set_module_args(dict(lines=['delete interfaces ae11', 'set interfaces ae11 unit 0 description Test']))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(args[1][0], 'set interfaces ae11 unit 0 description Test')\n        self.assertEqual(kwargs['action'], 'set')\n        self.assertEqual(kwargs['format'], 'text')\n\n    def test_junos_config_confirm(self):\n        src = load_fixture('junos_config.set', content='str')\n        set_module_args(dict(src=src, confirm=40))\n        self.execute_module(changed=True)\n        args, kwargs = self.commit_configuration.call_args\n        self.assertEqual(kwargs['confirm_timeout'], 40)\n\n    def test_junos_config_rollback(self):\n        rollback = 10\n        set_module_args(dict(rollback=rollback))\n        self.execute_module(changed=True)\n        self.assertEqual(self.get_diff.call_count, 1)\n        self.assertEqual(self.load_configuration.call_count, 1)\n        self.assertEqual(self.commit_configuration.call_count, 1)\n        load_configuration_args = self.load_configuration.call_args\n        self.assertEqual(rollback, load_configuration_args[1].get('rollback'))\n\n    def test_junos_config_src_text(self):\n        src = load_fixture('junos_config.text', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'merge')\n        self.assertEqual(kwargs['format'], 'text')\n\n    def test_junos_config_src_xml(self):\n        src = load_fixture('junos_config.xml', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'merge')\n        self.assertEqual(kwargs['format'], 'xml')\n\n    def test_junos_config_src_json(self):\n        src = load_fixture('junos_config.json', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'merge')\n        self.assertEqual(kwargs['format'], 'json')\n\n    def test_junos_config_update_override(self):\n        src = load_fixture('junos_config.xml', content='str')\n        set_module_args(dict(src=src, update='override'))\n        self.execute_module()\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'override')\n        self.assertEqual(kwargs['format'], 'xml')\n\n    def test_junos_config_update_replace(self):\n        src = load_fixture('junos_config.json', content='str')\n        set_module_args(dict(src=src, update='replace'))\n        self.execute_module()\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'replace')\n        self.assertEqual(kwargs['format'], 'json')\n\n    def test_junos_config_zeroize(self):\n        src = load_fixture('junos_config.json', content='str')\n        set_module_args(dict(zeroize='yes'))\n        self.execute_module(changed=True)\n        self.assertEqual(self.exec_rpc.call_count, 1)\n\n    def test_junos_config_src_format_xml(self):\n        src = load_fixture('junos_config.json', content='str')\n        set_module_args(dict(src=src, src_format='xml'))\n        self.execute_module()\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['format'], 'xml')\n\n    def test_junos_config_confirm_commit(self):\n        set_module_args(dict(confirm_commit=True))\n        self.execute_module(changed=True)\n        self.assertEqual(self.commit_configuration.call_count, 1)\n", "comments": "     (c) 2017 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish ", "content": "#\n# (c) 2017 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.junos import junos_config\nfrom units.modules.utils import set_module_args\nfrom .junos_module import TestJunosModule, load_fixture\n\n\nclass TestJunosConfigModule(TestJunosModule):\n\n    module = junos_config\n\n    def setUp(self):\n        super(TestJunosConfigModule, self).setUp()\n\n        self.mock_get_config = patch('ansible.modules.network.junos.junos_config.get_configuration')\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch('ansible.modules.network.junos.junos_config.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_load_configuration = patch('ansible.modules.network.junos.junos_config.load_configuration')\n        self.load_configuration = self.mock_load_configuration.start()\n\n        self.mock_lock_configuration = patch('ansible.module_utils.network.junos.junos.lock_configuration')\n        self.lock_configuration = self.mock_lock_configuration.start()\n\n        self.mock_unlock_configuration = patch('ansible.module_utils.network.junos.junos.unlock_configuration')\n        self.unlock_configuration = self.mock_unlock_configuration.start()\n\n        self.mock_commit_configuration = patch('ansible.modules.network.junos.junos_config.commit_configuration')\n        self.commit_configuration = self.mock_commit_configuration.start()\n\n        self.mock_get_diff = patch('ansible.modules.network.junos.junos_config.get_diff')\n        self.get_diff = self.mock_get_diff.start()\n\n        self.mock_conn = patch('ansible.module_utils.connection.Connection')\n        self.conn = self.mock_conn.start()\n\n        self.mock_netconf = patch('ansible.module_utils.network.junos.junos.NetconfConnection')\n        self.netconf_conn = self.mock_netconf.start()\n\n        self.mock_exec_rpc = patch('ansible.modules.network.junos.junos_config.exec_rpc')\n        self.exec_rpc = self.mock_exec_rpc.start()\n\n        self.mock_netconf_rpc = patch('ansible.module_utils.network.common.netconf.NetconfConnection')\n        self.netconf_rpc = self.mock_netconf_rpc.start()\n\n    def tearDown(self):\n        super(TestJunosConfigModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n        self.mock_lock_configuration.stop()\n        self.mock_unlock_configuration.stop()\n        self.mock_commit_configuration.stop()\n        self.mock_get_diff.stop()\n        self.load_configuration.stop()\n        self.mock_conn.stop()\n        self.mock_netconf.stop()\n        self.mock_exec_rpc.stop()\n        self.mock_netconf_rpc.stop()\n\n    def load_fixtures(self, commands=None, format='text', changed=False):\n        self.get_config.return_value = load_fixture('get_configuration_rpc_reply.txt')\n        if changed:\n            self.load_config.return_value = load_fixture('get_configuration_rpc_reply_diff.txt')\n        else:\n            self.load_config.return_value = None\n\n    def test_junos_config_unchanged(self):\n        src = load_fixture('junos_config.set', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module()\n\n    def test_junos_config_src_set(self):\n        src = load_fixture('junos_config.set', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'set')\n        self.assertEqual(kwargs['format'], 'text')\n\n    def test_junos_config_backup(self):\n        set_module_args(dict(backup=True))\n        result = self.execute_module()\n        self.assertIn('__backup__', result)\n\n    def test_junos_config_lines(self):\n        set_module_args(dict(lines=['delete interfaces ae11', 'set interfaces ae11 unit 0 description Test']))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(args[1][0], 'set interfaces ae11 unit 0 description Test')\n        self.assertEqual(kwargs['action'], 'set')\n        self.assertEqual(kwargs['format'], 'text')\n\n    def test_junos_config_confirm(self):\n        src = load_fixture('junos_config.set', content='str')\n        set_module_args(dict(src=src, confirm=40))\n        self.execute_module(changed=True)\n        args, kwargs = self.commit_configuration.call_args\n        self.assertEqual(kwargs['confirm_timeout'], 40)\n\n    def test_junos_config_rollback(self):\n        rollback = 10\n        set_module_args(dict(rollback=rollback))\n        self.execute_module(changed=True)\n        self.assertEqual(self.get_diff.call_count, 1)\n        self.assertEqual(self.load_configuration.call_count, 1)\n        self.assertEqual(self.commit_configuration.call_count, 1)\n        load_configuration_args = self.load_configuration.call_args\n        self.assertEqual(rollback, load_configuration_args[1].get('rollback'))\n\n    def test_junos_config_src_text(self):\n        src = load_fixture('junos_config.text', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'merge')\n        self.assertEqual(kwargs['format'], 'text')\n\n    def test_junos_config_src_xml(self):\n        src = load_fixture('junos_config.xml', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'merge')\n        self.assertEqual(kwargs['format'], 'xml')\n\n    def test_junos_config_src_json(self):\n        src = load_fixture('junos_config.json', content='str')\n        set_module_args(dict(src=src))\n        self.execute_module(changed=True)\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'merge')\n        self.assertEqual(kwargs['format'], 'json')\n\n    def test_junos_config_update_override(self):\n        src = load_fixture('junos_config.xml', content='str')\n        set_module_args(dict(src=src, update='override'))\n        self.execute_module()\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'override')\n        self.assertEqual(kwargs['format'], 'xml')\n\n    def test_junos_config_update_replace(self):\n        src = load_fixture('junos_config.json', content='str')\n        set_module_args(dict(src=src, update='replace'))\n        self.execute_module()\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['action'], 'replace')\n        self.assertEqual(kwargs['format'], 'json')\n\n    def test_junos_config_zeroize(self):\n        src = load_fixture('junos_config.json', content='str')\n        set_module_args(dict(zeroize='yes'))\n        self.execute_module(changed=True)\n        self.assertEqual(self.exec_rpc.call_count, 1)\n\n    def test_junos_config_src_format_xml(self):\n        src = load_fixture('junos_config.json', content='str')\n        set_module_args(dict(src=src, src_format='xml'))\n        self.execute_module()\n        args, kwargs = self.load_config.call_args\n        self.assertEqual(kwargs['format'], 'xml')\n\n    def test_junos_config_confirm_commit(self):\n        set_module_args(dict(confirm_commit=True))\n        self.execute_module(changed=True)\n        self.assertEqual(self.commit_configuration.call_count, 1)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_junos_config.py", "id": "fbc78514c19d40d62b1968f4cdbe835d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/junos/test_junos_config.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}