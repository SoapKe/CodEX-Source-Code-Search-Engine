{"author": "ansible", "code": "\n\"\"\" PN CLI vrouter-create/vrouter-delete/vrouter-modify \"\"\"\n\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vrouter\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to create/delete/modify a vrouter.\ndescription:\n  - Execute vrouter-create, vrouter-delete, vrouter-modify command.\n  - Each fabric, cluster, standalone switch, or virtual network (VNET) can\n    provide its tenants with a virtual router (vRouter) service that forwards\n    traffic between networks and implements Layer 3 protocols.\n  - C(vrouter-create) creates a new vRouter service.\n  - C(vrouter-delete) deletes a vRouter service.\n  - C(vrouter-modify) modifies a vRouter service.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the CLI on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to create vrouter,\n        'absent' to delete vrouter and 'update' to modify vrouter.\n    required: True\n    choices: ['present', 'absent', 'update']\n  pn_name:\n    description:\n      - Specify the name of the vRouter.\n    required: true\n  pn_vnet:\n    description:\n      - Specify the name of the VNET.\n      - Required for vrouter-create.\n  pn_service_type:\n    description:\n      - Specify if the vRouter is a dedicated or shared VNET service.\n    choices: ['dedicated', 'shared']\n  pn_service_state:\n    description:\n      -  Specify to enable or disable vRouter service.\n    choices: ['enable', 'disable']\n  pn_router_type:\n    description:\n      - Specify if the vRouter uses software or hardware.\n      - Note that if you specify hardware as router type, you cannot assign IP\n        addresses using DHCP. You must specify a static IP address.\n    choices: ['hardware', 'software']\n  pn_hw_vrrp_id:\n    description:\n      - Specifies the VRRP ID for a hardware vrouter.\n  pn_router_id:\n    description:\n      - Specify the vRouter IP address.\n  pn_bgp_as:\n    description:\n      - Specify the Autonomous System Number(ASN) if the vRouter runs Border\n        Gateway Protocol(BGP).\n  pn_bgp_redistribute:\n    description:\n      - Specify how BGP routes are redistributed.\n    choices: ['static', 'connected', 'rip', 'ospf']\n  pn_bgp_max_paths:\n    description:\n      - Specify the maximum number of paths for BGP. This is a number between\n        1 and 255 or 0 to unset.\n  pn_bgp_options:\n    description:\n      - Specify other BGP options as a whitespaces separated string within\n        single quotes ''.\n  pn_rip_redistribute:\n    description:\n      - Specify how RIP routes are redistributed.\n    choices: ['static', 'connected', 'ospf', 'bgp']\n  pn_ospf_redistribute:\n    description:\n      - Specify how OSPF routes are redistributed.\n    choices: ['static', 'connected', 'bgp', 'rip']\n  pn_ospf_options:\n    description:\n      - Specify other OSPF options as a whitespaces separated string within\n        single quotes ''.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create vrouter\n  pn_vrouter:\n    state: 'present'\n    pn_name: 'ansible-vrouter'\n    pn_vnet: 'ansible-fab-global'\n    pn_router_id: 208.74.182.1\n\n- name: delete vrouter\n  pn_vrouter:\n    state: 'absent'\n    pn_name: 'ansible-vrouter'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vrouter command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the vrouter command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nVROUTER_NAME_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks for idempotency using the vlan-show command.\n    A switch can have only one vRouter configuration.\n    If a vRouter already exists on the given switch, return VROUTER_EXISTS as\n    True else False.\n    If a vRouter with the given name exists(on a different switch), return\n    VROUTER_NAME_EXISTS as True else False.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, VROUTER_NAME_EXISTS\n    \"\"\"\n    name = module.params['pn_name']\n     Global flags\n    global VROUTER_EXISTS, VROUTER_NAME_EXISTS\n\n     Get the name of the local switch\n    location = cli + ' switch-setup-show format switch-name'\n    location = shlex.split(location)\n    out = module.run_command(location)[1]\n    location = out.split()[1]\n\n     Check for any vRouters on the switch\n    check_vrouter = cli + ' vrouter-show location %s ' % location\n    check_vrouter += 'format name no-show-headers'\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n\n    if out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n     Check for any vRouters with the given name\n    show = cli + ' vrouter-show format name no-show-headers '\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if name in out:\n        VROUTER_NAME_EXISTS = True\n    else:\n        VROUTER_NAME_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n     'out' contains the output\n     'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n     Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-create'\n    if state == 'absent':\n        command = 'vrouter-delete'\n    if state == 'update':\n        command = 'vrouter-modify'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent', 'update']),\n            pn_name=dict(required=True, type='str'),\n            pn_vnet=dict(type='str'),\n            pn_service_type=dict(type='str', choices=['dedicated', 'shared']),\n            pn_service_state=dict(type='str', choices=['enable', 'disable']),\n            pn_router_type=dict(type='str', choices=['hardware', 'software']),\n            pn_hw_vrrp_id=dict(type='int'),\n            pn_router_id=dict(type='str'),\n            pn_bgp_as=dict(type='int'),\n            pn_bgp_redistribute=dict(type='str', choices=['static', 'connected',\n                                                          'rip', 'ospf']),\n            pn_bgp_max_paths=dict(type='int'),\n            pn_bgp_options=dict(type='str'),\n            pn_rip_redistribute=dict(type='str', choices=['static', 'connected',\n                                                          'bgp', 'ospf']),\n            pn_ospf_redistribute=dict(type='str', choices=['static', 'connected',\n                                                           'bgp', 'rip']),\n            pn_ospf_options=dict(type='str'),\n            pn_vrrp_track_port=dict(type='str')\n        ),\n        required_if=(\n            [\"state\", \"present\", [\"pn_name\", \"pn_vnet\"]],\n            [\"state\", \"absent\", [\"pn_name\"]],\n            [\"state\", \"update\", [\"pn_name\"]]\n        )\n    )\n\n     Accessing the arguments\n    state = module.params['state']\n    name = module.params['pn_name']\n    vnet = module.params['pn_vnet']\n    service_type = module.params['pn_service_type']\n    service_state = module.params['pn_service_state']\n    router_type = module.params['pn_router_type']\n    hw_vrrp_id = module.params['pn_hw_vrrp_id']\n    router_id = module.params['pn_router_id']\n    bgp_as = module.params['pn_bgp_as']\n    bgp_redistribute = module.params['pn_bgp_redistribute']\n    bgp_max_paths = module.params['pn_bgp_max_paths']\n    bgp_options = module.params['pn_bgp_options']\n    rip_redistribute = module.params['pn_rip_redistribute']\n    ospf_redistribute = module.params['pn_ospf_redistribute']\n    ospf_options = module.params['pn_ospf_options']\n    vrrp_track_port = module.params['pn_vrrp_track_port']\n\n    command = get_command_from_state(state)\n\n     Building the CLI command string\n    cli = pn_cli(module)\n\n    if command == 'vrouter-delete':\n        check_cli(module, cli)\n        if VROUTER_NAME_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter with name %s does not exist' % name\n            )\n        cli += ' %s name %s ' % (command, name)\n\n    else:\n\n        if command == 'vrouter-create':\n            check_cli(module, cli)\n            if VROUTER_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg='Maximum number of vRouters has been reached on this '\n                        'switch'\n                )\n            if VROUTER_NAME_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg='vRouter with name %s already exists' % name\n                )\n        cli += ' %s name %s ' % (command, name)\n\n        if vnet:\n            cli += ' vnet ' + vnet\n\n        if service_type:\n            cli += ' %s-vnet-service ' % service_type\n\n        if service_state:\n            cli += ' ' + service_state\n\n        if router_type:\n            cli += ' router-type ' + router_type\n\n        if hw_vrrp_id:\n            cli += ' hw-vrrp-id ' + str(hw_vrrp_id)\n\n        if router_id:\n            cli += ' router-id ' + router_id\n\n        if bgp_as:\n            cli += ' bgp-as ' + str(bgp_as)\n\n        if bgp_redistribute:\n            cli += ' bgp-redistribute ' + bgp_redistribute\n\n        if bgp_max_paths:\n            cli += ' bgp-max-paths ' + str(bgp_max_paths)\n\n        if bgp_options:\n            cli += ' %s ' % bgp_options\n\n        if rip_redistribute:\n            cli += ' rip-redistribute ' + rip_redistribute\n\n        if ospf_redistribute:\n            cli += ' ospf-redistribute ' + ospf_redistribute\n\n        if ospf_options:\n            cli += ' %s ' % ospf_options\n\n        if vrrp_track_port:\n            cli += ' vrrp-track-port ' + vrrp_track_port\n\n    run_cli(module, cli)\n\n AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "comments": "    pn cli vrouter create vrouter delete vrouter modify          this file part ansible     ansible free software  redistribute modify   terms gnu general public license published   free software foundation  either version 3 license    (at option) later version      ansible distributed hope useful    without any warranty  without even implied warranty   merchantability fitness for a particular purpose   see   gnu general public license details      you received copy gnu general public license   along ansible   if  see  http   www gnu org licenses       ansible metadata     metadata version    1 1                        status     preview                         supported    community     documentation           module  pn vrouter author   pluribus networks ( amitsi)  version added   2 2  short description  cli command create delete modify vrouter  description      execute vrouter create  vrouter delete  vrouter modify command      each fabric  cluster  standalone switch  virtual network (vnet)     provide tenants virtual router (vrouter) service forwards     traffic networks implements layer 3 protocols      c(vrouter create) creates new vrouter service      c(vrouter delete) deletes vrouter service      c(vrouter modify) modifies vrouter service  options    pn cliusername      description          provide login username user root      required  false   pn clipassword      description          provide login password user root      required  false   pn cliswitch      description          target switch(es) run cli      required  false   state      description          state action perform  use  present  create vrouter           absent  delete vrouter  update  modify vrouter      required  true     choices    present    absent    update     pn name      description          specify name vrouter      required  true   pn vnet      description          specify name vnet          required vrouter create    pn service type      description          specify vrouter dedicated shared vnet service      choices    dedicated    shared     pn service state      description           specify enable disable vrouter service      choices    enable    disable     pn router type      description          specify vrouter uses software hardware          note specify hardware router type  cannot assign ip         addresses using dhcp  you must specify static ip address      choices    hardware    software     pn hw vrrp id      description          specifies vrrp id hardware vrouter    pn router id      description          specify vrouter ip address    pn bgp      description          specify autonomous system number(asn) vrouter runs border         gateway protocol(bgp)    pn bgp redistribute      description          specify bgp routes redistributed      choices    static    connected    rip    ospf     pn bgp max paths      description          specify maximum number paths bgp  this number         1 255 0 unset    pn bgp options      description          specify bgp options whitespaces separated string within         single quotes       pn rip redistribute      description          specify rip routes redistributed      choices    static    connected    ospf    bgp     pn ospf redistribute      description          specify ospf routes redistributed      choices    static    connected    bgp    rip     pn ospf options      description          specify ospf options whitespaces separated string within         single quotes          examples         name  create vrouter   pn vrouter      state   present      pn name   ansible vrouter      pn vnet   ansible fab global      pn router id  208 74 182 1    name  delete vrouter   pn vrouter      state   absent      pn name   ansible vrouter       return       command    description  the cli command run target node(s)    returned  always   type  str stdout    description  the set responses vrouter command    returned  always   type  list stderr    description  the set error responses vrouter command    returned  error   type  list changed    description  indicates whether cli caused changes target    returned  always   type  bool      import shlex  vrouter exists   none vrouter name exists   none   def pn cli(module)              this method generate cli portion launch netvisor cli      it parses username  password  switch parameters module       param module  the ansible module fetch username  password switch      return  returns cli string processing             username   module params  pn cliusername       password   module params  pn clipassword       cliswitch   module params  pn cliswitch        username password          cli     usr bin cli   quiet   user       (username  password)     else          cli     usr bin cli   quiet        cliswitch     local           cli      switch local       else          cli      switch     cliswitch     return cli   def check cli(module  cli)              this method checks idempotency using vlan show command      a switch one vrouter configuration      if vrouter already exists given switch  return vrouter exists     true else false      if vrouter given name exists(on different switch)  return     vrouter name exists true else false        param module  the ansible module fetch input parameters      param cli  the cli string      return global booleans  vrouter exists  vrouter name exists             name   module params  pn name         global flags     global vrouter exists  vrouter name exists        get name local switch     location   cli     switch setup show format switch name      location   shlex split(location)       module run command(location) 1      location   split() 1         check vrouters switch     check vrouter   cli     vrouter show location      location     check vrouter     format name show headers      check vrouter   shlex split(check vrouter)       module run command(check vrouter) 1                vrouter exists   true     else          vrouter exists   false        check vrouters given name     show   cli     vrouter show format name show headers       show   shlex split(show)       module run command(show) 1        split()      name          vrouter name exists   true     else          vrouter name exists   false   def run cli(module  cli)              this method executes cli command target node(s) returns     output  the module exits based output       param cli  complete cli string executed target node(s)       param module  the ansible module fetch command             cliswitch   module params  pn cliswitch       state   module params  state       command   get command state(state)      cmd   shlex split(cli)          contains output        err  contains error messages     result   err   module run command(cmd)      print cli   cli split(cliswitch) 1         response json format     result    0          module exit json(             command print cli              stderr err strip()              msg   operation failed    command              changed false         )               module exit json(             command print cli              stdout strip()              msg   operation completed    command              changed true         )      else          module exit json(             command print cli              msg   operation completed    command              changed true         )   def get command state(state)              this method gets appropriate command name state specified  it     returns command name specified state       param state  the state respective command name required              command   none     state     present           command    vrouter create      state     absent           command    vrouter delete      state     update           command    vrouter modify      return command   def main()          this section arguments parsing         usr bin python       this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses          global flags    get name local switch    check vrouters switch    check vrouters given name      contains output     err  contains error messages    response json format    accessing arguments    building cli command string    ansiblemodule boilerplate ", "content": "#!/usr/bin/python\n\"\"\" PN CLI vrouter-create/vrouter-delete/vrouter-modify \"\"\"\n\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: pn_vrouter\nauthor: \"Pluribus Networks (@amitsi)\"\nversion_added: \"2.2\"\nshort_description: CLI command to create/delete/modify a vrouter.\ndescription:\n  - Execute vrouter-create, vrouter-delete, vrouter-modify command.\n  - Each fabric, cluster, standalone switch, or virtual network (VNET) can\n    provide its tenants with a virtual router (vRouter) service that forwards\n    traffic between networks and implements Layer 3 protocols.\n  - C(vrouter-create) creates a new vRouter service.\n  - C(vrouter-delete) deletes a vRouter service.\n  - C(vrouter-modify) modifies a vRouter service.\noptions:\n  pn_cliusername:\n    description:\n      - Provide login username if user is not root.\n    required: False\n  pn_clipassword:\n    description:\n      - Provide login password if user is not root.\n    required: False\n  pn_cliswitch:\n    description:\n      - Target switch(es) to run the CLI on.\n    required: False\n  state:\n    description:\n      - State the action to perform. Use 'present' to create vrouter,\n        'absent' to delete vrouter and 'update' to modify vrouter.\n    required: True\n    choices: ['present', 'absent', 'update']\n  pn_name:\n    description:\n      - Specify the name of the vRouter.\n    required: true\n  pn_vnet:\n    description:\n      - Specify the name of the VNET.\n      - Required for vrouter-create.\n  pn_service_type:\n    description:\n      - Specify if the vRouter is a dedicated or shared VNET service.\n    choices: ['dedicated', 'shared']\n  pn_service_state:\n    description:\n      -  Specify to enable or disable vRouter service.\n    choices: ['enable', 'disable']\n  pn_router_type:\n    description:\n      - Specify if the vRouter uses software or hardware.\n      - Note that if you specify hardware as router type, you cannot assign IP\n        addresses using DHCP. You must specify a static IP address.\n    choices: ['hardware', 'software']\n  pn_hw_vrrp_id:\n    description:\n      - Specifies the VRRP ID for a hardware vrouter.\n  pn_router_id:\n    description:\n      - Specify the vRouter IP address.\n  pn_bgp_as:\n    description:\n      - Specify the Autonomous System Number(ASN) if the vRouter runs Border\n        Gateway Protocol(BGP).\n  pn_bgp_redistribute:\n    description:\n      - Specify how BGP routes are redistributed.\n    choices: ['static', 'connected', 'rip', 'ospf']\n  pn_bgp_max_paths:\n    description:\n      - Specify the maximum number of paths for BGP. This is a number between\n        1 and 255 or 0 to unset.\n  pn_bgp_options:\n    description:\n      - Specify other BGP options as a whitespaces separated string within\n        single quotes ''.\n  pn_rip_redistribute:\n    description:\n      - Specify how RIP routes are redistributed.\n    choices: ['static', 'connected', 'ospf', 'bgp']\n  pn_ospf_redistribute:\n    description:\n      - Specify how OSPF routes are redistributed.\n    choices: ['static', 'connected', 'bgp', 'rip']\n  pn_ospf_options:\n    description:\n      - Specify other OSPF options as a whitespaces separated string within\n        single quotes ''.\n\"\"\"\n\nEXAMPLES = \"\"\"\n- name: create vrouter\n  pn_vrouter:\n    state: 'present'\n    pn_name: 'ansible-vrouter'\n    pn_vnet: 'ansible-fab-global'\n    pn_router_id: 208.74.182.1\n\n- name: delete vrouter\n  pn_vrouter:\n    state: 'absent'\n    pn_name: 'ansible-vrouter'\n\"\"\"\n\nRETURN = \"\"\"\ncommand:\n  description: The CLI command run on the target node(s).\n  returned: always\n  type: str\nstdout:\n  description: The set of responses from the vrouter command.\n  returned: always\n  type: list\nstderr:\n  description: The set of error responses from the vrouter command.\n  returned: on error\n  type: list\nchanged:\n  description: Indicates whether the CLI caused changes on the target.\n  returned: always\n  type: bool\n\"\"\"\n\nimport shlex\n\nVROUTER_EXISTS = None\nVROUTER_NAME_EXISTS = None\n\n\ndef pn_cli(module):\n    \"\"\"\n    This method is to generate the cli portion to launch the Netvisor cli.\n    It parses the username, password, switch parameters from module.\n    :param module: The Ansible module to fetch username, password and switch\n    :return: returns the cli string for further processing\n    \"\"\"\n    username = module.params['pn_cliusername']\n    password = module.params['pn_clipassword']\n    cliswitch = module.params['pn_cliswitch']\n\n    if username and password:\n        cli = '/usr/bin/cli --quiet --user %s:%s ' % (username, password)\n    else:\n        cli = '/usr/bin/cli --quiet '\n\n    if cliswitch == 'local':\n        cli += ' switch-local '\n    else:\n        cli += ' switch ' + cliswitch\n    return cli\n\n\ndef check_cli(module, cli):\n    \"\"\"\n    This method checks for idempotency using the vlan-show command.\n    A switch can have only one vRouter configuration.\n    If a vRouter already exists on the given switch, return VROUTER_EXISTS as\n    True else False.\n    If a vRouter with the given name exists(on a different switch), return\n    VROUTER_NAME_EXISTS as True else False.\n\n    :param module: The Ansible module to fetch input parameters\n    :param cli: The CLI string\n    :return Global Booleans: VROUTER_EXISTS, VROUTER_NAME_EXISTS\n    \"\"\"\n    name = module.params['pn_name']\n    # Global flags\n    global VROUTER_EXISTS, VROUTER_NAME_EXISTS\n\n    # Get the name of the local switch\n    location = cli + ' switch-setup-show format switch-name'\n    location = shlex.split(location)\n    out = module.run_command(location)[1]\n    location = out.split()[1]\n\n    # Check for any vRouters on the switch\n    check_vrouter = cli + ' vrouter-show location %s ' % location\n    check_vrouter += 'format name no-show-headers'\n    check_vrouter = shlex.split(check_vrouter)\n    out = module.run_command(check_vrouter)[1]\n\n    if out:\n        VROUTER_EXISTS = True\n    else:\n        VROUTER_EXISTS = False\n\n    # Check for any vRouters with the given name\n    show = cli + ' vrouter-show format name no-show-headers '\n    show = shlex.split(show)\n    out = module.run_command(show)[1]\n    out = out.split()\n\n    if name in out:\n        VROUTER_NAME_EXISTS = True\n    else:\n        VROUTER_NAME_EXISTS = False\n\n\ndef run_cli(module, cli):\n    \"\"\"\n    This method executes the cli command on the target node(s) and returns the\n    output. The module then exits based on the output.\n    :param cli: the complete cli string to be executed on the target node(s).\n    :param module: The Ansible module to fetch command\n    \"\"\"\n    cliswitch = module.params['pn_cliswitch']\n    state = module.params['state']\n    command = get_command_from_state(state)\n\n    cmd = shlex.split(cli)\n\n    # 'out' contains the output\n    # 'err' contains the error messages\n    result, out, err = module.run_command(cmd)\n\n    print_cli = cli.split(cliswitch)[1]\n\n    # Response in JSON format\n    if result != 0:\n        module.exit_json(\n            command=print_cli,\n            stderr=err.strip(),\n            msg=\"%s operation failed\" % command,\n            changed=False\n        )\n\n    if out:\n        module.exit_json(\n            command=print_cli,\n            stdout=out.strip(),\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n    else:\n        module.exit_json(\n            command=print_cli,\n            msg=\"%s operation completed\" % command,\n            changed=True\n        )\n\n\ndef get_command_from_state(state):\n    \"\"\"\n    This method gets appropriate command name for the state specified. It\n    returns the command name for the specified state.\n    :param state: The state for which the respective command name is required.\n    \"\"\"\n    command = None\n    if state == 'present':\n        command = 'vrouter-create'\n    if state == 'absent':\n        command = 'vrouter-delete'\n    if state == 'update':\n        command = 'vrouter-modify'\n    return command\n\n\ndef main():\n    \"\"\" This section is for arguments parsing \"\"\"\n    module = AnsibleModule(\n        argument_spec=dict(\n            pn_cliusername=dict(required=False, type='str'),\n            pn_clipassword=dict(required=False, type='str', no_log=True),\n            pn_cliswitch=dict(required=False, type='str', default='local'),\n            state=dict(required=True, type='str',\n                       choices=['present', 'absent', 'update']),\n            pn_name=dict(required=True, type='str'),\n            pn_vnet=dict(type='str'),\n            pn_service_type=dict(type='str', choices=['dedicated', 'shared']),\n            pn_service_state=dict(type='str', choices=['enable', 'disable']),\n            pn_router_type=dict(type='str', choices=['hardware', 'software']),\n            pn_hw_vrrp_id=dict(type='int'),\n            pn_router_id=dict(type='str'),\n            pn_bgp_as=dict(type='int'),\n            pn_bgp_redistribute=dict(type='str', choices=['static', 'connected',\n                                                          'rip', 'ospf']),\n            pn_bgp_max_paths=dict(type='int'),\n            pn_bgp_options=dict(type='str'),\n            pn_rip_redistribute=dict(type='str', choices=['static', 'connected',\n                                                          'bgp', 'ospf']),\n            pn_ospf_redistribute=dict(type='str', choices=['static', 'connected',\n                                                           'bgp', 'rip']),\n            pn_ospf_options=dict(type='str'),\n            pn_vrrp_track_port=dict(type='str')\n        ),\n        required_if=(\n            [\"state\", \"present\", [\"pn_name\", \"pn_vnet\"]],\n            [\"state\", \"absent\", [\"pn_name\"]],\n            [\"state\", \"update\", [\"pn_name\"]]\n        )\n    )\n\n    # Accessing the arguments\n    state = module.params['state']\n    name = module.params['pn_name']\n    vnet = module.params['pn_vnet']\n    service_type = module.params['pn_service_type']\n    service_state = module.params['pn_service_state']\n    router_type = module.params['pn_router_type']\n    hw_vrrp_id = module.params['pn_hw_vrrp_id']\n    router_id = module.params['pn_router_id']\n    bgp_as = module.params['pn_bgp_as']\n    bgp_redistribute = module.params['pn_bgp_redistribute']\n    bgp_max_paths = module.params['pn_bgp_max_paths']\n    bgp_options = module.params['pn_bgp_options']\n    rip_redistribute = module.params['pn_rip_redistribute']\n    ospf_redistribute = module.params['pn_ospf_redistribute']\n    ospf_options = module.params['pn_ospf_options']\n    vrrp_track_port = module.params['pn_vrrp_track_port']\n\n    command = get_command_from_state(state)\n\n    # Building the CLI command string\n    cli = pn_cli(module)\n\n    if command == 'vrouter-delete':\n        check_cli(module, cli)\n        if VROUTER_NAME_EXISTS is False:\n            module.exit_json(\n                skipped=True,\n                msg='vRouter with name %s does not exist' % name\n            )\n        cli += ' %s name %s ' % (command, name)\n\n    else:\n\n        if command == 'vrouter-create':\n            check_cli(module, cli)\n            if VROUTER_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg='Maximum number of vRouters has been reached on this '\n                        'switch'\n                )\n            if VROUTER_NAME_EXISTS is True:\n                module.exit_json(\n                    skipped=True,\n                    msg='vRouter with name %s already exists' % name\n                )\n        cli += ' %s name %s ' % (command, name)\n\n        if vnet:\n            cli += ' vnet ' + vnet\n\n        if service_type:\n            cli += ' %s-vnet-service ' % service_type\n\n        if service_state:\n            cli += ' ' + service_state\n\n        if router_type:\n            cli += ' router-type ' + router_type\n\n        if hw_vrrp_id:\n            cli += ' hw-vrrp-id ' + str(hw_vrrp_id)\n\n        if router_id:\n            cli += ' router-id ' + router_id\n\n        if bgp_as:\n            cli += ' bgp-as ' + str(bgp_as)\n\n        if bgp_redistribute:\n            cli += ' bgp-redistribute ' + bgp_redistribute\n\n        if bgp_max_paths:\n            cli += ' bgp-max-paths ' + str(bgp_max_paths)\n\n        if bgp_options:\n            cli += ' %s ' % bgp_options\n\n        if rip_redistribute:\n            cli += ' rip-redistribute ' + rip_redistribute\n\n        if ospf_redistribute:\n            cli += ' ospf-redistribute ' + ospf_redistribute\n\n        if ospf_options:\n            cli += ' %s ' % ospf_options\n\n        if vrrp_track_port:\n            cli += ' vrrp-track-port ' + vrrp_track_port\n\n    run_cli(module, cli)\n\n# AnsibleModule boilerplate\nfrom ansible.module_utils.basic import AnsibleModule\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "pn_vrouter.py", "id": "9131828e6850e77efee5557af66e8ae3", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/netvisor/pn_vrouter.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}