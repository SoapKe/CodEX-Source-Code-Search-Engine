{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    unescapeHTML,\n)\n\n\nclass ATVAtIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?atv\\.at/(?:[^/]+/){2}(?P<id>[dv]\\d+)'\n    _TESTS = [{\n        'url': 'http://atv.at/aktuell/di-210317-2005-uhr/v1698449/',\n        'md5': 'c3b6b975fb3150fc628572939df205f2',\n        'info_dict': {\n            'id': '1698447',\n            'ext': 'mp4',\n            'title': 'DI, 21.03.17 | 20:05 Uhr 1/1',\n        }\n    }, {\n        'url': 'http://atv.at/aktuell/meinrad-knapp/d8416/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_data = self._parse_json(unescapeHTML(self._search_regex(\n            r'class=\"[^\"]*jsb_video/FlashPlayer[^\"]*\"[^>]+data-jsb=\"([^\"]+)\"',\n            webpage, 'player data')), display_id)['config']['initial_video']\n\n        video_id = video_data['id']\n        video_title = video_data['title']\n\n        parts = []\n        for part in video_data.get('parts', []):\n            part_id = part['id']\n            part_title = part['title']\n\n            formats = []\n            for source in part.get('sources', []):\n                source_url = source.get('src')\n                if not source_url:\n                    continue\n                ext = determine_ext(source_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        source_url, part_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n                else:\n                    formats.append({\n                        'format_id': source.get('delivery'),\n                        'url': source_url,\n                    })\n            self._sort_formats(formats)\n\n            parts.append({\n                'id': part_id,\n                'title': part_title,\n                'thumbnail': part.get('preview_image_url'),\n                'duration': int_or_none(part.get('duration')),\n                'is_live': part.get('is_livestream'),\n                'formats': formats,\n            })\n\n        return {\n            '_type': 'multi_video',\n            'id': video_id,\n            'title': video_title,\n            'entries': parts,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    unescapeHTML,\n)\n\n\nclass ATVAtIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?atv\\.at/(?:[^/]+/){2}(?P<id>[dv]\\d+)'\n    _TESTS = [{\n        'url': 'http://atv.at/aktuell/di-210317-2005-uhr/v1698449/',\n        'md5': 'c3b6b975fb3150fc628572939df205f2',\n        'info_dict': {\n            'id': '1698447',\n            'ext': 'mp4',\n            'title': 'DI, 21.03.17 | 20:05 Uhr 1/1',\n        }\n    }, {\n        'url': 'http://atv.at/aktuell/meinrad-knapp/d8416/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_data = self._parse_json(unescapeHTML(self._search_regex(\n            r'class=\"[^\"]*jsb_video/FlashPlayer[^\"]*\"[^>]+data-jsb=\"([^\"]+)\"',\n            webpage, 'player data')), display_id)['config']['initial_video']\n\n        video_id = video_data['id']\n        video_title = video_data['title']\n\n        parts = []\n        for part in video_data.get('parts', []):\n            part_id = part['id']\n            part_title = part['title']\n\n            formats = []\n            for source in part.get('sources', []):\n                source_url = source.get('src')\n                if not source_url:\n                    continue\n                ext = determine_ext(source_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        source_url, part_id, 'mp4', 'm3u8_native',\n                        m3u8_id='hls', fatal=False))\n                else:\n                    formats.append({\n                        'format_id': source.get('delivery'),\n                        'url': source_url,\n                    })\n            self._sort_formats(formats)\n\n            parts.append({\n                'id': part_id,\n                'title': part_title,\n                'thumbnail': part.get('preview_image_url'),\n                'duration': int_or_none(part.get('duration')),\n                'is_live': part.get('is_livestream'),\n                'formats': formats,\n            })\n\n        return {\n            '_type': 'multi_video',\n            'id': video_id,\n            'title': video_title,\n            'entries': parts,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "atvat.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/atvat.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}