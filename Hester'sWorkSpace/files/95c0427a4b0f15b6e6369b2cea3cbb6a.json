{"author": "django", "code": "import os\nfrom argparse import ArgumentParser\nfrom contextlib import contextmanager\nfrom unittest import TestSuite, TextTestRunner, defaultTestLoader\n\nfrom django.test import TestCase\nfrom django.test.runner import DiscoverRunner\nfrom django.test.utils import captured_stdout\n\n\n@contextmanager\ndef change_cwd(directory):\n    current_dir = os.path.abspath(os.path.dirname(__file__))\n    new_dir = os.path.join(current_dir, directory)\n    old_cwd = os.getcwd()\n    os.chdir(new_dir)\n    try:\n        yield\n    finally:\n        os.chdir(old_cwd)\n\n\nclass DiscoverRunnerTest(TestCase):\n\n    def test_init_debug_mode(self):\n        runner = DiscoverRunner()\n        self.assertFalse(runner.debug_mode)\n\n    def test_add_arguments_debug_mode(self):\n        parser = ArgumentParser()\n        DiscoverRunner.add_arguments(parser)\n\n        ns = parser.parse_args([])\n        self.assertFalse(ns.debug_mode)\n        ns = parser.parse_args([\"--debug-mode\"])\n        self.assertTrue(ns.debug_mode)\n\n    def test_dotted_test_module(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample'],\n        ).countTestCases()\n\n        self.assertEqual(count, 4)\n\n    def test_dotted_test_class_vanilla_unittest(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample.TestVanillaUnittest'],\n        ).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_dotted_test_class_django_testcase(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample.TestDjangoTestCase'],\n        ).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_dotted_test_method_django_testcase(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample.TestDjangoTestCase.test_sample'],\n        ).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_pattern(self):\n        count = DiscoverRunner(\n            pattern=\"*_tests.py\",\n        ).build_suite(['test_runner_apps.sample']).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_file_path(self):\n        with change_cwd(\"..\"):\n            count = DiscoverRunner().build_suite(\n                ['test_runner_apps/sample/'],\n            ).countTestCases()\n\n        self.assertEqual(count, 5)\n\n    def test_empty_label(self):\n        \"\"\"\n        If the test label is empty, discovery should happen on the current\n        working directory.\n        \"\"\"\n        with change_cwd(\".\"):\n            suite = DiscoverRunner().build_suite([])\n            self.assertEqual(\n                suite._tests[0].id().split(\".\")[0],\n                os.path.basename(os.getcwd()),\n            )\n\n    def test_empty_test_case(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample.EmptyTestCase'],\n        ).countTestCases()\n\n        self.assertEqual(count, 0)\n\n    def test_discovery_on_package(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests'],\n        ).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_ignore_adjacent(self):\n        \"\"\"\n        When given a dotted path to a module, unittest discovery searches\n        not just the module, but also the directory containing the module.\n\n        This results in tests from adjacent modules being run when they\n        should not. The discover runner avoids this behavior.\n        \"\"\"\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.empty'],\n        ).countTestCases()\n\n        self.assertEqual(count, 0)\n\n    def test_testcase_ordering(self):\n        with change_cwd(\"..\"):\n            suite = DiscoverRunner().build_suite(['test_runner_apps/sample/'])\n            self.assertEqual(\n                suite._tests[0].__class__.__name__,\n                'TestDjangoTestCase',\n                msg=\"TestDjangoTestCase should be the first test case\")\n            self.assertEqual(\n                suite._tests[1].__class__.__name__,\n                'TestZimpleTestCase',\n                msg=\"TestZimpleTestCase should be the second test case\")\n            \n            self.assertIn('DocTestCase', [t.__class__.__name__ for t in suite._tests[2:]])\n\n    def test_duplicates_ignored(self):\n        \"\"\"\n        Tests shouldn't be discovered twice when discovering on overlapping paths.\n        \"\"\"\n        base_app = 'forms_tests'\n        sub_app = 'forms_tests.field_tests'\n        with self.modify_settings(INSTALLED_APPS={'append': sub_app}):\n            single = DiscoverRunner().build_suite([base_app]).countTestCases()\n            dups = DiscoverRunner().build_suite([base_app, sub_app]).countTestCases()\n        self.assertEqual(single, dups)\n\n    def test_reverse(self):\n        \"\"\"\n        Reverse should reorder tests while maintaining the grouping specified\n        by ``DiscoverRunner.reorder_by``.\n        \"\"\"\n        runner = DiscoverRunner(reverse=True)\n        suite = runner.build_suite(\n            test_labels=('test_runner_apps.sample', 'test_runner_apps.simple'))\n        self.assertIn('test_runner_apps.simple', next(iter(suite)).id(),\n                      msg=\"Test labels should be reversed.\")\n        suite = runner.build_suite(test_labels=('test_runner_apps.simple',))\n        suite = tuple(suite)\n        self.assertIn('DjangoCase', suite[0].id(),\n                      msg=\"Test groups should not be reversed.\")\n        self.assertIn('SimpleCase', suite[4].id(),\n                      msg=\"Test groups order should be preserved.\")\n        self.assertIn('DjangoCase2', suite[0].id(),\n                      msg=\"Django test cases should be reversed.\")\n        self.assertIn('SimpleCase2', suite[4].id(),\n                      msg=\"Simple test cases should be reversed.\")\n        self.assertIn('UnittestCase2', suite[8].id(),\n                      msg=\"Unittest test cases should be reversed.\")\n        self.assertIn('test_2', suite[0].id(),\n                      msg=\"Methods of Django cases should be reversed.\")\n        self.assertIn('test_2', suite[4].id(),\n                      msg=\"Methods of simple cases should be reversed.\")\n        self.assertIn('test_2', suite[8].id(),\n                      msg=\"Methods of unittest cases should be reversed.\")\n\n    def test_overridable_get_test_runner_kwargs(self):\n        self.assertIsInstance(DiscoverRunner().get_test_runner_kwargs(), dict)\n\n    def test_overridable_test_suite(self):\n        self.assertEqual(DiscoverRunner().test_suite, TestSuite)\n\n    def test_overridable_test_runner(self):\n        self.assertEqual(DiscoverRunner().test_runner, TextTestRunner)\n\n    def test_overridable_test_loader(self):\n        self.assertEqual(DiscoverRunner().test_loader, defaultTestLoader)\n\n    def test_tags(self):\n        runner = DiscoverRunner(tags=['core'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 1)\n        runner = DiscoverRunner(tags=['fast'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 2)\n        runner = DiscoverRunner(tags=['slow'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 2)\n\n    def test_exclude_tags(self):\n        runner = DiscoverRunner(tags=['fast'], exclude_tags=['core'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 1)\n        runner = DiscoverRunner(tags=['fast'], exclude_tags=['slow'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 0)\n        runner = DiscoverRunner(exclude_tags=['slow'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 0)\n\n    def test_tag_inheritance(self):\n        def count_tests(**kwargs):\n            suite = DiscoverRunner(**kwargs).build_suite(['test_runner_apps.tagged.tests_inheritance'])\n            return suite.countTestCases()\n\n        self.assertEqual(count_tests(tags=['foo']), 4)\n        self.assertEqual(count_tests(tags=['bar']), 2)\n        self.assertEqual(count_tests(tags=['baz']), 2)\n        self.assertEqual(count_tests(tags=['foo'], exclude_tags=['bar']), 2)\n        self.assertEqual(count_tests(tags=['foo'], exclude_tags=['bar', 'baz']), 1)\n        self.assertEqual(count_tests(exclude_tags=['foo']), 0)\n\n    def test_included_tags_displayed(self):\n        runner = DiscoverRunner(tags=['foo', 'bar'], verbosity=2)\n        with captured_stdout() as stdout:\n            runner.build_suite(['test_runner_apps.tagged.tests'])\n            self.assertIn('Including test tag(s): bar, foo.\\n', stdout.getvalue())\n\n    def test_excluded_tags_displayed(self):\n        runner = DiscoverRunner(exclude_tags=['foo', 'bar'], verbosity=3)\n        with captured_stdout() as stdout:\n            runner.build_suite(['test_runner_apps.tagged.tests'])\n            self.assertIn('Excluding test tag(s): bar, foo.\\n', stdout.getvalue())\n", "comments": "            if test label empty  discovery happen current         working directory                      change cwd(   )              suite   discoverrunner() build suite(  )             self assertequal(                 suite  tests 0  id() split(   ) 0                   os path basename(os getcwd())              )      def test empty test case(self)          count   discoverrunner() build suite(               test runner apps sample tests sample emptytestcase            ) counttestcases()          self assertequal(count  0)      def test discovery package(self)          count   discoverrunner() build suite(               test runner apps sample tests            ) counttestcases()          self assertequal(count  1)      def test ignore adjacent(self)                      when given dotted path module  unittest discovery searches         module  also directory containing module           this results tests adjacent modules run          the discover runner avoids behavior                      count   discoverrunner() build suite(               test runner apps sample empty            ) counttestcases()          self assertequal(count  0)      def test testcase ordering(self)          change cwd(    )              suite   discoverrunner() build suite(  test runner apps sample   )             self assertequal(                 suite  tests 0    class     name                     testdjangotestcase                   msg  testdjangotestcase first test case )             self assertequal(                 suite  tests 1    class     name                     testzimpletestcase                   msg  testzimpletestcase second test case )               all others follow unspecified order  including doctests             self assertin( doctestcase      class     name   suite  tests 2   )      def test duplicates ignored(self)                      tests discovered twice discovering overlapping paths                      base app    forms tests          sub app    forms tests field tests          self modify settings(installed apps   append   sub app )              single   discoverrunner() build suite( base app ) counttestcases()             dups   discoverrunner() build suite( base app  sub app ) counttestcases()         self assertequal(single  dups)      def test reverse(self)                      reverse reorder tests maintaining grouping specified           discoverrunner reorder                   all others follow unspecified order  including doctests ", "content": "import os\nfrom argparse import ArgumentParser\nfrom contextlib import contextmanager\nfrom unittest import TestSuite, TextTestRunner, defaultTestLoader\n\nfrom django.test import TestCase\nfrom django.test.runner import DiscoverRunner\nfrom django.test.utils import captured_stdout\n\n\n@contextmanager\ndef change_cwd(directory):\n    current_dir = os.path.abspath(os.path.dirname(__file__))\n    new_dir = os.path.join(current_dir, directory)\n    old_cwd = os.getcwd()\n    os.chdir(new_dir)\n    try:\n        yield\n    finally:\n        os.chdir(old_cwd)\n\n\nclass DiscoverRunnerTest(TestCase):\n\n    def test_init_debug_mode(self):\n        runner = DiscoverRunner()\n        self.assertFalse(runner.debug_mode)\n\n    def test_add_arguments_debug_mode(self):\n        parser = ArgumentParser()\n        DiscoverRunner.add_arguments(parser)\n\n        ns = parser.parse_args([])\n        self.assertFalse(ns.debug_mode)\n        ns = parser.parse_args([\"--debug-mode\"])\n        self.assertTrue(ns.debug_mode)\n\n    def test_dotted_test_module(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample'],\n        ).countTestCases()\n\n        self.assertEqual(count, 4)\n\n    def test_dotted_test_class_vanilla_unittest(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample.TestVanillaUnittest'],\n        ).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_dotted_test_class_django_testcase(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample.TestDjangoTestCase'],\n        ).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_dotted_test_method_django_testcase(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample.TestDjangoTestCase.test_sample'],\n        ).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_pattern(self):\n        count = DiscoverRunner(\n            pattern=\"*_tests.py\",\n        ).build_suite(['test_runner_apps.sample']).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_file_path(self):\n        with change_cwd(\"..\"):\n            count = DiscoverRunner().build_suite(\n                ['test_runner_apps/sample/'],\n            ).countTestCases()\n\n        self.assertEqual(count, 5)\n\n    def test_empty_label(self):\n        \"\"\"\n        If the test label is empty, discovery should happen on the current\n        working directory.\n        \"\"\"\n        with change_cwd(\".\"):\n            suite = DiscoverRunner().build_suite([])\n            self.assertEqual(\n                suite._tests[0].id().split(\".\")[0],\n                os.path.basename(os.getcwd()),\n            )\n\n    def test_empty_test_case(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests_sample.EmptyTestCase'],\n        ).countTestCases()\n\n        self.assertEqual(count, 0)\n\n    def test_discovery_on_package(self):\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.tests'],\n        ).countTestCases()\n\n        self.assertEqual(count, 1)\n\n    def test_ignore_adjacent(self):\n        \"\"\"\n        When given a dotted path to a module, unittest discovery searches\n        not just the module, but also the directory containing the module.\n\n        This results in tests from adjacent modules being run when they\n        should not. The discover runner avoids this behavior.\n        \"\"\"\n        count = DiscoverRunner().build_suite(\n            ['test_runner_apps.sample.empty'],\n        ).countTestCases()\n\n        self.assertEqual(count, 0)\n\n    def test_testcase_ordering(self):\n        with change_cwd(\"..\"):\n            suite = DiscoverRunner().build_suite(['test_runner_apps/sample/'])\n            self.assertEqual(\n                suite._tests[0].__class__.__name__,\n                'TestDjangoTestCase',\n                msg=\"TestDjangoTestCase should be the first test case\")\n            self.assertEqual(\n                suite._tests[1].__class__.__name__,\n                'TestZimpleTestCase',\n                msg=\"TestZimpleTestCase should be the second test case\")\n            # All others can follow in unspecified order, including doctests\n            self.assertIn('DocTestCase', [t.__class__.__name__ for t in suite._tests[2:]])\n\n    def test_duplicates_ignored(self):\n        \"\"\"\n        Tests shouldn't be discovered twice when discovering on overlapping paths.\n        \"\"\"\n        base_app = 'forms_tests'\n        sub_app = 'forms_tests.field_tests'\n        with self.modify_settings(INSTALLED_APPS={'append': sub_app}):\n            single = DiscoverRunner().build_suite([base_app]).countTestCases()\n            dups = DiscoverRunner().build_suite([base_app, sub_app]).countTestCases()\n        self.assertEqual(single, dups)\n\n    def test_reverse(self):\n        \"\"\"\n        Reverse should reorder tests while maintaining the grouping specified\n        by ``DiscoverRunner.reorder_by``.\n        \"\"\"\n        runner = DiscoverRunner(reverse=True)\n        suite = runner.build_suite(\n            test_labels=('test_runner_apps.sample', 'test_runner_apps.simple'))\n        self.assertIn('test_runner_apps.simple', next(iter(suite)).id(),\n                      msg=\"Test labels should be reversed.\")\n        suite = runner.build_suite(test_labels=('test_runner_apps.simple',))\n        suite = tuple(suite)\n        self.assertIn('DjangoCase', suite[0].id(),\n                      msg=\"Test groups should not be reversed.\")\n        self.assertIn('SimpleCase', suite[4].id(),\n                      msg=\"Test groups order should be preserved.\")\n        self.assertIn('DjangoCase2', suite[0].id(),\n                      msg=\"Django test cases should be reversed.\")\n        self.assertIn('SimpleCase2', suite[4].id(),\n                      msg=\"Simple test cases should be reversed.\")\n        self.assertIn('UnittestCase2', suite[8].id(),\n                      msg=\"Unittest test cases should be reversed.\")\n        self.assertIn('test_2', suite[0].id(),\n                      msg=\"Methods of Django cases should be reversed.\")\n        self.assertIn('test_2', suite[4].id(),\n                      msg=\"Methods of simple cases should be reversed.\")\n        self.assertIn('test_2', suite[8].id(),\n                      msg=\"Methods of unittest cases should be reversed.\")\n\n    def test_overridable_get_test_runner_kwargs(self):\n        self.assertIsInstance(DiscoverRunner().get_test_runner_kwargs(), dict)\n\n    def test_overridable_test_suite(self):\n        self.assertEqual(DiscoverRunner().test_suite, TestSuite)\n\n    def test_overridable_test_runner(self):\n        self.assertEqual(DiscoverRunner().test_runner, TextTestRunner)\n\n    def test_overridable_test_loader(self):\n        self.assertEqual(DiscoverRunner().test_loader, defaultTestLoader)\n\n    def test_tags(self):\n        runner = DiscoverRunner(tags=['core'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 1)\n        runner = DiscoverRunner(tags=['fast'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 2)\n        runner = DiscoverRunner(tags=['slow'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 2)\n\n    def test_exclude_tags(self):\n        runner = DiscoverRunner(tags=['fast'], exclude_tags=['core'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 1)\n        runner = DiscoverRunner(tags=['fast'], exclude_tags=['slow'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 0)\n        runner = DiscoverRunner(exclude_tags=['slow'])\n        self.assertEqual(runner.build_suite(['test_runner_apps.tagged.tests']).countTestCases(), 0)\n\n    def test_tag_inheritance(self):\n        def count_tests(**kwargs):\n            suite = DiscoverRunner(**kwargs).build_suite(['test_runner_apps.tagged.tests_inheritance'])\n            return suite.countTestCases()\n\n        self.assertEqual(count_tests(tags=['foo']), 4)\n        self.assertEqual(count_tests(tags=['bar']), 2)\n        self.assertEqual(count_tests(tags=['baz']), 2)\n        self.assertEqual(count_tests(tags=['foo'], exclude_tags=['bar']), 2)\n        self.assertEqual(count_tests(tags=['foo'], exclude_tags=['bar', 'baz']), 1)\n        self.assertEqual(count_tests(exclude_tags=['foo']), 0)\n\n    def test_included_tags_displayed(self):\n        runner = DiscoverRunner(tags=['foo', 'bar'], verbosity=2)\n        with captured_stdout() as stdout:\n            runner.build_suite(['test_runner_apps.tagged.tests'])\n            self.assertIn('Including test tag(s): bar, foo.\\n', stdout.getvalue())\n\n    def test_excluded_tags_displayed(self):\n        runner = DiscoverRunner(exclude_tags=['foo', 'bar'], verbosity=3)\n        with captured_stdout() as stdout:\n            runner.build_suite(['test_runner_apps.tagged.tests'])\n            self.assertIn('Excluding test tag(s): bar, foo.\\n', stdout.getvalue())\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_discover_runner.py", "id": "95c0427a4b0f15b6e6369b2cea3cbb6a", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/test_runner/test_discover_runner.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}