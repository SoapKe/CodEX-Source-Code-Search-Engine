{"author": "rg3", "code": "\n\nfrom __future__ import unicode_literals\n\nimport os\nimport re\nimport sys\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..compat import (\n    compat_etree_fromstring,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n    compat_xml_parse_error,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    HEADRequest,\n    is_html,\n    js_to_json,\n    KNOWN_EXTENSIONS,\n    mimetype2ext,\n    orderedSet,\n    sanitized_Request,\n    smuggle_url,\n    unescapeHTML,\n    unified_strdate,\n    unsmuggle_url,\n    UnsupportedError,\n    xpath_text,\n)\nfrom .commonprotocols import RtmpIE\nfrom .brightcove import (\n    BrightcoveLegacyIE,\n    BrightcoveNewIE,\n)\nfrom .nexx import (\n    NexxIE,\n    NexxEmbedIE,\n)\nfrom .nbc import NBCSportsVPlayerIE\nfrom .ooyala import OoyalaIE\nfrom .rutv import RUTVIE\nfrom .tvc import TVCIE\nfrom .sportbox import SportBoxEmbedIE\nfrom .smotri import SmotriIE\nfrom .myvi import MyviIE\nfrom .condenast import CondeNastIE\nfrom .udn import UDNEmbedIE\nfrom .senateisvp import SenateISVPIE\nfrom .svt import SVTIE\nfrom .pornhub import PornHubIE\nfrom .xhamster import XHamsterEmbedIE\nfrom .tnaflix import TNAFlixNetworkEmbedIE\nfrom .drtuber import DrTuberIE\nfrom .redtube import RedTubeIE\nfrom .vimeo import VimeoIE\nfrom .dailymotion import DailymotionIE\nfrom .dailymail import DailyMailIE\nfrom .onionstudios import OnionStudiosIE\nfrom .viewlift import ViewLiftEmbedIE\nfrom .mtv import MTVServicesEmbeddedIE\nfrom .pladform import PladformIE\nfrom .videomore import VideomoreIE\nfrom .webcaster import WebcasterFeedIE\nfrom .googledrive import GoogleDriveIE\nfrom .jwplatform import JWPlatformIE\nfrom .digiteka import DigitekaIE\nfrom .arkena import ArkenaIE\nfrom .instagram import InstagramIE\nfrom .liveleak import LiveLeakIE\nfrom .threeqsdn import ThreeQSDNIE\nfrom .theplatform import ThePlatformIE\nfrom .vessel import VesselIE\nfrom .kaltura import KalturaIE\nfrom .eagleplatform import EaglePlatformIE\nfrom .facebook import FacebookIE\nfrom .soundcloud import SoundcloudIE\nfrom .tunein import TuneInBaseIE\nfrom .vbox7 import Vbox7IE\nfrom .dbtv import DBTVIE\nfrom .piksel import PikselIE\nfrom .videa import VideaIE\nfrom .twentymin import TwentyMinutenIE\nfrom .ustream import UstreamIE\nfrom .openload import OpenloadIE\nfrom .videopress import VideoPressIE\nfrom .rutube import RutubeIE\nfrom .limelight import LimelightBaseIE\nfrom .anvato import AnvatoIE\nfrom .washingtonpost import WashingtonPostIE\nfrom .wistia import WistiaIE\nfrom .mediaset import MediasetIE\nfrom .joj import JojIE\nfrom .megaphone import MegaphoneIE\nfrom .vzaar import VzaarIE\nfrom .channel9 import Channel9IE\nfrom .vshare import VShareIE\nfrom .mediasite import MediasiteIE\nfrom .springboardplatform import SpringboardPlatformIE\nfrom .yapfiles import YapFilesIE\nfrom .vice import ViceIE\n\n\nclass GenericIE(InfoExtractor):\n    IE_DESC = 'Generic downloader that works on some sites'\n    _VALID_URL = r'.*'\n    IE_NAME = 'generic'\n    _TESTS = [\n        \n        {\n            'url': 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n            'md5': '67d406c2bcb6af27fa886f31aa934bbe',\n            'info_dict': {\n                'id': 'trailer',\n                'ext': 'mp4',\n                'title': 'trailer',\n                'upload_date': '20100513',\n            }\n        },\n        \n        {\n            'url': 'http://calimero.tk/muzik/FictionJunction-Parallel_Hearts.flac',\n            'md5': '128c42e68b13950268b648275386fc74',\n            'info_dict': {\n                'id': 'FictionJunction-Parallel_Hearts',\n                'ext': 'flac',\n                'title': 'FictionJunction-Parallel_Hearts',\n                'upload_date': '20140522',\n            },\n            'expected_warnings': [\n                'URL could be a direct video link, returning it as such.'\n            ],\n            'skip': 'URL invalid',\n        },\n        \n        {\n            'url': 'http://ai-radio.org:8000/radio.opus',\n            'info_dict': {\n                'id': 'radio',\n                'ext': 'opus',\n                'title': 'radio',\n            },\n            'params': {\n                'skip_download': True,  \n            },\n            'expected_warnings': [\n                r'501.*Not Implemented',\n                r'400.*Bad Request',\n            ],\n        },\n        \n        {\n            'url': 'http://ftp.nluug.nl/video/nluug/2014-11-20_nj14/zaal-2/5_Lennart_Poettering_-_Systemd.webm',\n            'md5': '4ccbebe5f36706d85221f204d7eb5913',\n            'info_dict': {\n                'url': 'http://ftp.nluug.nl/video/nluug/2014-11-20_nj14/zaal-2/5_Lennart_Poettering_-_Systemd.webm',\n                'id': '5_Lennart_Poettering_-_Systemd',\n                'ext': 'webm',\n                'title': '5_Lennart_Poettering_-_Systemd',\n                'upload_date': '20141120',\n            },\n            'expected_warnings': [\n                'URL could be a direct video link, returning it as such.'\n            ]\n        },\n        \n        {\n            'url': 'http://phihag.de/2014/youtube-dl/rss2.xml',\n            'info_dict': {\n                'id': 'http://phihag.de/2014/youtube-dl/rss2.xml',\n                'title': 'Zero Punctuation',\n                'description': 're:.*groundbreaking video review series.*'\n            },\n            'playlist_mincount': 11,\n        },\n        \n        {\n            'url': 'http://podcastfeeds.nbcnews.com/audio/podcast/MSNBC-MADDOW-NETCAST-M4V.xml',\n            'info_dict': {\n                'id': 'pdv_maddow_netcast_m4v-02-27-2015-201624',\n                'ext': 'm4v',\n                'upload_date': '20150228',\n                'title': 'pdv_maddow_netcast_m4v-02-27-2015-201624',\n            }\n        },\n        \n        {\n            'url': 'http://videolectures.net/promogram_igor_mekjavic_eng/video/1/smil.xml',\n            'info_dict': {\n                'id': 'smil',\n                'ext': 'mp4',\n                'title': 'Automatics, robotics and biocybernetics',\n                'description': 'md5:815fc1deb6b3a2bff99de2d5325be482',\n                'upload_date': '20130627',\n                'formats': 'mincount:16',\n                'subtitles': 'mincount:1',\n            },\n            'params': {\n                'force_generic_extractor': True,\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://metafilegenerator.de/WDR/WDR_FS/hds/hds.smil',\n            'info_dict': {\n                'id': 'hds',\n                'ext': 'flv',\n                'title': 'hds',\n                'formats': 'mincount:1',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'https://www.restudy.dk/awsmedia/SmilDirectory/video_1637.xml',\n            'info_dict': {\n                'id': 'video_1637',\n                'ext': 'flv',\n                'title': 'video_1637',\n                'formats': 'mincount:3',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://services.media.howstuffworks.com/videos/450221/smil-service.smil',\n            'info_dict': {\n                'id': 'smil-service',\n                'ext': 'flv',\n                'title': 'smil-service',\n                'formats': 'mincount:1',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://api.new.livestream.com/accounts/1570303/events/1585861/videos/4719370.smil',\n            'info_dict': {\n                'id': '4719370',\n                'ext': 'mp4',\n                'title': '571de1fd-47bc-48db-abf9-238872a58d1f',\n                'formats': 'mincount:3',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.telegraaf.nl/xml/playlist/2015/8/7/mZlp2ctYIUEB.xspf',\n            'info_dict': {\n                'id': 'mZlp2ctYIUEB',\n                'ext': 'mp4',\n                'title': 'Tikibad ontruimd wegens brand',\n                'description': 'md5:05ca046ff47b931f9b04855015e163a4',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 33,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-manifest.mpd',\n            'md5': '4b57baab2e30d6eb3a6a09f0ba57ef53',\n            'info_dict': {\n                'id': 'car-20120827-manifest',\n                'ext': 'mp4',\n                'title': 'car-20120827-manifest',\n                'formats': 'mincount:9',\n                'upload_date': '20130904',\n            },\n            'params': {\n                'format': 'bestvideo',\n            },\n        },\n        \n        {\n            'url': 'http://once.unicornmedia.com/now/master/playlist/bb0b18ba-64f5-4b1b-a29f-0ac252f06b68/77a785f3-5188-4806-b788-0893a61634ed/93677179-2d99-4ef4-9e17-fe70d49abfbf/content.m3u8',\n            'info_dict': {\n                'id': 'content',\n                'ext': 'mp4',\n                'title': 'content',\n                'formats': 'mincount:8',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'video gone',\n        },\n        \n        {\n            'url': 'http://www.nacentapps.com/m3u8/index.m3u8',\n            'info_dict': {\n                'id': 'index',\n                'ext': 'mp4',\n                'title': 'index',\n                'upload_date': '20140720',\n                'formats': 'mincount:11',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'skip': 'video gone',\n        },\n        \n        {\n            'url': 'http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CCUQtwIwAA&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DcmQHVoWB5FY&ei=F-sNU-LLCaXk4QT52ICQBQ&usg=AFQjCNEw4hL29zgOohLXvpJ-Bdh2bils1Q&bvm=bv.61965928,d.bGE',\n            'info_dict': {\n                'id': 'cmQHVoWB5FY',\n                'ext': 'mp4',\n                'upload_date': '20130224',\n                'uploader_id': 'TheVerge',\n                'description': r're:^Chris Ziegler takes a look at the\\.*',\n                'uploader': 'The Verge',\n                'title': 'First Firefox OS phones side-by-side',\n            },\n            'params': {\n                'skip_download': False,\n            }\n        },\n        {\n            \n            'url': 'https://www.facebook.com/l.php?u=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DpO8h3EaFRdo&h=TAQHsoToz&enc=AZN16h-b6o4Zq9pZkCCdOLNKMN96BbGMNtcFwHSaazus4JHT_MFYkAA-WARTX2kvsCIdlAIyHZjl6d33ILIJU7Jzwk_K3mcenAXoAzBNoZDI_Q7EXGDJnIhrGkLXo_LJ_pAa2Jzbx17UHMd3jAs--6j2zaeto5w9RTn8T_1kKg3fdC5WPX9Dbb18vzH7YFX0eSJmoa6SP114rvlkw6pkS1-T&s=1',\n            'info_dict': {\n                'id': 'pO8h3EaFRdo',\n                'ext': 'mp4',\n                'title': 'Tripeo Boiler Room x Dekmantel Festival DJ Set',\n                'description': 'md5:6294cc1af09c4049e0652b51a2df10d5',\n                'upload_date': '20150917',\n                'uploader_id': 'brtvofficial',\n                'uploader': 'Boiler Room',\n            },\n            'params': {\n                'skip_download': False,\n            },\n        },\n        {\n            'url': 'http://www.hodiho.fr/2013/02/regis-plante-sa-jeep.html',\n            'md5': '85b90ccc9d73b4acd9138d3af4c27f89',\n            'info_dict': {\n                'id': '13601338388002',\n                'ext': 'mp4',\n                'uploader': 'www.hodiho.fr',\n                'title': 'R\\u00e9gis plante sa Jeep',\n            }\n        },\n        \n        {\n            'add_ie': ['Bandcamp'],\n            'url': 'http://bronyrock.com/track/the-pony-mash',\n            'info_dict': {\n                'id': '3235767654',\n                'ext': 'mp3',\n                'title': 'The Pony Mash',\n                'uploader': 'M_Pallante',\n            },\n            'skip': 'There is a limit of 200 free downloads / month for the test song',\n        },\n        {\n            \n            \n            \n            'add_ie': ['BrightcoveLegacy'],\n            'url': 'http://www.bfmtv.com/video/bfmbusiness/cours-bourse/cours-bourse-l-analyse-technique-154522/',\n            'info_dict': {\n                'id': '2765128793001',\n                'ext': 'mp4',\n                'title': 'Le cours de bourse : l\u2019analyse technique',\n                'description': 'md5:7e9ad046e968cb2d1114004aba466fd9',\n                'uploader': 'BFM BUSINESS',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            \n            'add_id': ['BrightcoveLegacy'],\n            'url': 'http://bfmbusiness.bfmtv.com/mediaplayer/chroniques/olivier-delamarche/',\n            'info_dict': {\n                'id': '5255628253001',\n                'ext': 'mp4',\n                'title': 'md5:37c519b1128915607601e75a87995fc0',\n                'description': 'md5:37f7f888b434bb8f8cc8dbd4f7a4cf26',\n                'uploader': 'BFM BUSINESS',\n                'uploader_id': '876450612001',\n                'timestamp': 1482255315,\n                'upload_date': '20161220',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            \n            'url': 'http://bcove.me/i6nfkrc3',\n            'md5': '0ba9446db037002366bab3b3eb30c88c',\n            'info_dict': {\n                'id': '3101154703001',\n                'ext': 'mp4',\n                'title': 'Still no power',\n                'uploader': 'thestar.com',\n                'description': 'Mississauga resident David Farmer is still out of power as a result of the ice storm a month ago. To keep the house warm, Farmer cuts wood from his property for a wood burning stove downstairs.',\n            },\n            'add_ie': ['BrightcoveLegacy'],\n            'skip': 'video gone',\n        },\n        {\n            'url': 'http://www.championat.com/video/football/v/87/87499.html',\n            'md5': 'fb973ecf6e4a78a67453647444222983',\n            'info_dict': {\n                'id': '3414141473001',\n                'ext': 'mp4',\n                'title': '\u0412\u0438\u0434\u0435\u043e. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0414\u0437\u0430\u0433\u043e\u0435\u0432\u0430 (\u0426\u0421\u041a\u0410)',\n                'description': '\u041e\u043d\u043b\u0430\u0439\u043d-\u0442\u0440\u0430\u043d\u0441\u043b\u044f\u0446\u0438\u044f \u043c\u0430\u0442\u0447\u0430 \u0426\u0421\u041a\u0410 - \"\u0412\u043e\u043b\u0433\u0430\"',\n                'uploader': 'Championat',\n            },\n        },\n        {\n            \n            'add_ie': ['BrightcoveLegacy'],\n            'url': 'http://www.kijk.nl/sbs6/leermijvrouwenkennen/videos/jqMiXKAYan2S/aflevering-1',\n            'info_dict': {\n                'id': '3866516442001',\n                'ext': 'mp4',\n                'title': 'Leer mij vrouwen kennen: Aflevering 1',\n                'description': 'Leer mij vrouwen kennen: Aflevering 1',\n                'uploader': 'SBS Broadcasting',\n            },\n            'skip': 'Restricted to Netherlands',\n            'params': {\n                'skip_download': True,  \n            },\n        },\n        {\n            \n            'url': 'http://www.un.org/chinese/News/story.asp?NewsID=27724',\n            'md5': '36d74ef5e37c8b4a2ce92880d208b968',\n            'info_dict': {\n                'id': '5360463607001',\n                'ext': 'mp4',\n                'title': '\u53d9\u5229\u4e9a\u5931\u660e\u513f\u7ae5\u5728\u5e9f\u589f\u4e0a\u6f14\u5531\u300a\u5fc3\u8df3\u300b  \u547c\u5401\u83b7\u5f97\u6b63\u5e38\u7ae5\u5e74\u751f\u6d3b',\n                'description': '\u8054\u5408\u56fd\u513f\u7ae5\u57fa\u91d1\u4f1a\u4e2d\u4e1c\u548c\u5317\u975e\u533a\u57df\u5927\u4f7f\u3001\u4f5c\u66f2\u5bb6\u624e\u5fb7\u00b7\u8fea\u62c9\u5c3c\uff08Zade Dirani\uff09\u57283\u670815\u65e5\u53d9\u5229\u4e9a\u51b2\u7a81\u7206\u53d17\u5468\u5e74\u7eaa\u5ff5\u65e5\u4e4b\u9645\u53d1\u5e03\u4e86\u4e3a\u53d9\u5229\u4e9a\u8c31\u5199\u7684\u6b4c\u66f2\u300a\u5fc3\u8df3\u300b\uff08HEARTBEAT\uff09\uff0c\u4e3a\u53d7\u5230\u516d\u5e74\u51b2\u7a81\u5f71\u54cd\u7684\u53d9\u5229\u4e9a\u513f\u7ae5\u53d1\u51fa\u5f3a\u70c8\u5450\u558a\uff0c\u547c\u5401\u4e16\u754c\u505a\u51fa\u5171\u540c\u52aa\u529b\uff0c\u4f7f\u53d9\u5229\u4e9a\u513f\u7ae5\u91cd\u65b0\u83b7\u5f97\u4eab\u6709\u6b63\u5e38\u7ae5\u5e74\u751f\u6d3b\u7684\u6743\u5229\u3002',\n                'uploader': 'United Nations',\n                'uploader_id': '1362235914001',\n                'timestamp': 1489593889,\n                'upload_date': '20170315',\n            },\n            'add_ie': ['BrightcoveLegacy'],\n        },\n        {\n            \n            'url': 'http://www.nature.com/nmeth/journal/v9/n7/fig_tab/nmeth.2062_SV1.html',\n            'info_dict': {\n                'id': 'nmeth.2062_SV1',\n                'title': 'Simultaneous multiview imaging of the Drosophila syncytial blastoderm : Quantitative high-speed imaging of entire developing embryos with simultaneous multiview light-sheet microscopy : Nature Methods : Nature Research',\n            },\n            'playlist': [{\n                'info_dict': {\n                    'id': '2228375078001',\n                    'ext': 'mp4',\n                    'title': 'nmeth.2062-sv1',\n                    'description': 'nmeth.2062-sv1',\n                    'timestamp': 1363357591,\n                    'upload_date': '20130315',\n                    'uploader': 'Nature Publishing Group',\n                    'uploader_id': '1964492299001',\n                },\n            }],\n        },\n        {\n            \n            'url': 'http://www8.hp.com/cn/zh/home.html',\n            'info_dict': {\n                'id': '5255815316001',\n                'ext': 'mp4',\n                'title': 'Sprocket Video - China',\n                'description': 'Sprocket Video - China',\n                'uploader': 'HP-Video Gallery',\n                'timestamp': 1482263210,\n                'upload_date': '20161220',\n                'uploader_id': '1107601872001',\n            },\n            'params': {\n                'skip_download': True,  \n            },\n            'skip': 'video rotates...weekly?',\n        },\n        {\n            \n            'url': 'http://www.delawaresportszone.com/video-st-thomas-more-earns-first-trip-to-basketball-semis',\n            'md5': '2b35148fcf48da41c9fb4591650784f3',\n            'info_dict': {\n                'id': '5348741021001',\n                'ext': 'mp4',\n                'upload_date': '20170306',\n                'uploader_id': '4191638492001',\n                'timestamp': 1488769918,\n                'title': 'VIDEO:  St. Thomas More earns first trip to basketball semis',\n\n            },\n        },\n        {\n            \n            'url': 'http://www.programme-tv.net/videos/extraits/81095-guillaume-canet-evoque-les-rumeurs-d-infidelite-de-marion-cotillard-avec-brad-pitt-dans-vivement-dimanche/',\n            'info_dict': {\n                'id': '81095-guillaume-canet-evoque-les-rumeurs-d-infidelite-de-marion-cotillard-avec-brad-pitt-dans-vivement-dimanche',\n                'title': \"Guillaume Canet e\u0301voque les rumeurs d'infide\u0301lite\u0301 de Marion Cotillard avec Brad Pitt dans Vivement Dimanche, Extraits : toutes les vid\u00e9os avec T\u00e9l\u00e9-Loisirs\",\n            },\n            'playlist': [{\n                'md5': '732d22ba3d33f2f3fc253c39f8f36523',\n                'info_dict': {\n                    'id': '5311302538001',\n                    'ext': 'mp4',\n                    'title': \"Guillaume Canet e\u0301voque les rumeurs d'infide\u0301lite\u0301 de Marion Cotillard avec Brad Pitt dans Vivement Dimanche\",\n                    'description': \"Guillaume Canet e\u0301voque les rumeurs d'infide\u0301lite\u0301 de Marion Cotillard avec Brad Pitt dans Vivement Dimanche (France 2, 5 f\u00e9vrier 2017)\",\n                    'timestamp': 1486321708,\n                    'upload_date': '20170205',\n                    'uploader_id': '800000640001',\n                },\n                'only_matching': True,\n            }],\n        },\n        {\n            \n            'url': 'http://www8.hp.com/cn/zh/home.html',\n            'info_dict': {\n                'id': '5255815316001',\n                'ext': 'mp4',\n                'title': 'Sprocket Video - China',\n                'description': 'Sprocket Video - China',\n                'uploader': 'HP-Video Gallery',\n                'timestamp': 1482263210,\n                'upload_date': '20161220',\n                'uploader_id': '1107601872001',\n            },\n            'params': {\n                'skip_download': True,  \n            },\n        },\n        \n        {\n            'url': 'http://www.rollingstone.com/music/videos/norwegian-dj-cashmere-cat-goes-spartan-on-with-me-premiere-20131219',\n            'md5': '166dd577b433b4d4ebfee10b0824d8ff',\n            'info_dict': {\n                'id': 'BwY2RxaTrTkslxOfcan0UCf0YqyvWysJ',\n                'ext': 'mp4',\n                'title': '2cc213299525360.mov',  \n                'duration': 238.231,\n            },\n            'add_ie': ['Ooyala'],\n        },\n        {\n            \n            'url': 'http://www.macrumors.com/2015/07/24/steve-jobs-the-man-in-the-machine-first-trailer/',\n            'info_dict': {\n                'id': 'p0MGJndjoG5SOKqO_hZJuZFPB-Tr5VgB',\n                'ext': 'mp4',\n                'title': '\"Steve Jobs: Man in the Machine\" trailer',\n                'description': 'The first trailer for the Alex Gibney documentary \"Steve Jobs: Man in the Machine.\"',\n                'duration': 135.427,\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'skip': 'movie expired',\n        },\n        \n        {\n            'url': 'http://wnep.com/2017/07/22/steampunk-fest-comes-to-honesdale/',\n            'info_dict': {\n                'id': 'lwYWYxYzE6V5uJMjNGyKtwwiw9ZJD7t2',\n                'ext': 'mp4',\n                'title': 'Steampunk Fest Comes to Honesdale',\n                'duration': 43.276,\n            },\n            'params': {\n                'skip_download': True,\n            }\n        },\n        \n        {\n            'url': 'http://www.tested.com/science/weird/460206-tested-grinding-coffee-2000-frames-second/',\n            'info_dict': {\n                'id': '9ODmcdjQcHQ',\n                'ext': 'mp4',\n                'title': 'Tested: Grinding Coffee at 2000 Frames Per Second',\n                'upload_date': '20140225',\n                'description': 'md5:06a40fbf30b220468f1e0957c0f558ff',\n                'uploader': 'Tested',\n                'uploader_id': 'testedcom',\n            },\n            \n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.theguardian.com/world/2014/mar/11/obama-zach-galifianakis-between-two-ferns',\n            'info_dict': {\n                'id': '18e820ec3f',\n                'ext': 'mp4',\n                'title': 'Between Two Ferns with Zach Galifianakis: President Barack Obama',\n                'description': 'Episode 18: President Barack Obama sits down with Zach Galifianakis for his most memorable interview yet.',\n            },\n            \n            'expected_warnings': ['301'],\n        },\n        \n        {\n            'url': 'http://www.rg.ru/2014/03/15/reg-dfo/anklav-anons.html',\n            'info_dict': {\n                'id': '776940',\n                'ext': 'mp4',\n                'title': '\u041e\u0445\u043e\u0442\u0441\u043a\u043e\u0435 \u043c\u043e\u0440\u0435 \u0441\u0442\u0430\u043b\u043e \u0446\u0435\u043b\u0438\u043a\u043e\u043c \u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u043c',\n                'description': 'md5:5ed62483b14663e2a95ebbe115eb8f43',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://sch1298sz.mskobr.ru/dou_edu/karamel_ki/filial_galleries/video/iframe_src_http_tvc_ru_video_iframe_id_55304_isplay_false_acc_video_id_channel_brand_id_11_show_episodes_episode_id_32307_frameb/',\n            'info_dict': {\n                'id': '55304',\n                'ext': 'mp4',\n                'title': '\u0414\u043e\u0448\u043a\u043e\u043b\u044c\u043d\u043e\u0435 \u0432\u043e\u0441\u043f\u0438\u0442\u0430\u043d\u0438\u0435',\n            },\n        },\n        \n        {\n            'url': 'http://www.vestifinance.ru/articles/25753',\n            'info_dict': {\n                'id': '25753',\n                'title': '\u041f\u0440\u044f\u043c\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043b\u044f\u0446\u0438\u0438 \u0441 \u0424\u043e\u0440\u0443\u043c\u0430-\u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \"\u0413\u043e\u0441\u0437\u0430\u043a\u0430\u0437-2013\"',\n            },\n            'playlist': [{\n                'info_dict': {\n                    'id': '370908',\n                    'title': '\u0413\u043e\u0441\u0437\u0430\u043a\u0430\u0437. \u0414\u0435\u043d\u044c 3',\n                    'ext': 'mp4',\n                }\n            }, {\n                'info_dict': {\n                    'id': '370905',\n                    'title': '\u0413\u043e\u0441\u0437\u0430\u043a\u0430\u0437. \u0414\u0435\u043d\u044c 2',\n                    'ext': 'mp4',\n                }\n            }, {\n                'info_dict': {\n                    'id': '370902',\n                    'title': '\u0413\u043e\u0441\u0437\u0430\u043a\u0430\u0437. \u0414\u0435\u043d\u044c 1',\n                    'ext': 'mp4',\n                }\n            }],\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.kinomyvi.tv/news/detail/Pervij-dublirovannij-trejler--Uzhastikov-_nOw1',\n            'info_dict': {\n                'id': 'f4dafcad-ff21-423d-89b5-146cfd89fa1e',\n                'ext': 'mp4',\n                'title': '\u0423\u0436\u0430\u0441\u0442\u0438\u043a\u0438, \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0442\u0440\u0435\u0439\u043b\u0435\u0440 (2015)',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 153,\n            }\n        },\n        \n        {\n            'url': 'http://www.numisc.com/forum/showthread.php?11696-FM15-which-pumiscer-was-this-%28-vid-%29-%28-alfa-as-fuck-srx-%29&s=711f5db534502e22260dec8c5e2d66d8',\n            'info_dict': {\n                'id': 'showthread',\n                'title': '[NSFL] [FM15] which pumiscer was this ( vid ) ( alfa as fuck srx )',\n            },\n            'playlist_mincount': 7,\n            \n            \n            'skip': 'No videos on this page',\n        },\n        \n        {\n            'url': 'http://en.support.wordpress.com/videos/ted-talks/',\n            'md5': '65fdff94098e4a607385a60c5177c638',\n            'info_dict': {\n                'id': '1969',\n                'ext': 'mp4',\n                'title': 'Hidden miracles of the natural world',\n                'uploader': 'Louie Schwartzberg',\n                'description': 'md5:8145d19d320ff3e52f28401f4c4283b9',\n            }\n        },\n        \n        {\n            'url': 'http://www.waoanime.tv/the-super-dimension-fortress-macross-episode-1/',\n            'md5': '2baf4ddd70f697d94b1c18cf796d5107',\n            'info_dict': {\n                'id': '06e53103ca9aa',\n                'ext': 'flv',\n                'title': 'Macross Episode 001  Watch Macross Episode 001 onl',\n                'description': 'No description',\n            },\n        },\n        \n        {\n            'url': 'http://www.tv-replay.fr/redirection/20-03-14/x-enius-arte-10753389.html',\n            'md5': '7653032cbb25bf6c80d80f217055fa43',\n            'info_dict': {\n                'id': '048195-004_PLUS7-F',\n                'ext': 'flv',\n                'title': 'X:enius',\n                'description': 'md5:d5fdf32ef6613cdbfd516ae658abf168',\n                'upload_date': '20140320',\n            },\n            'params': {\n                'skip_download': 'Requires rtmpdump'\n            },\n            'skip': 'video gone',\n        },\n        \n        {\n            'url': 'http://www.tsprod.com/replay-du-concert-alcaline-de-calogero',\n            'info_dict': {\n                'id': 'EV_30231',\n                'ext': 'mp4',\n                'title': 'Alcaline, le concert avec Calogero',\n                'description': 'md5:61f08036dcc8f47e9cfc33aed08ffaff',\n                'upload_date': '20150226',\n                'timestamp': 1424989860,\n                'duration': 5400,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'expected_warnings': [\n                'Forbidden'\n            ]\n        },\n        \n        {\n            'url': 'http://www.wired.com/2014/04/honda-asimo/',\n            'md5': 'ba0dfe966fa007657bd1443ee672db0f',\n            'info_dict': {\n                'id': '53501be369702d3275860000',\n                'ext': 'mp4',\n                'title': 'Honda\u2019s  New Asimo Robot Is More Human Than Ever',\n            }\n        },\n        \n        {\n            'url': 'http://www.spi0n.com/zap-spi0n-com-n216/',\n            'md5': '441aeeb82eb72c422c7f14ec533999cd',\n            'info_dict': {\n                'id': 'k2mm4bCdJ6CQ2i7c8o2',\n                'ext': 'mp4',\n                'title': 'Le Zap de Spi0n n\u00b0216 - Zapping du Web',\n                'description': 'md5:faf028e48a461b8b7fad38f1e104b119',\n                'uploader': 'Spi0n',\n                'uploader_id': 'xgditw',\n                'upload_date': '20140425',\n                'timestamp': 1398441542,\n            },\n            'add_ie': ['Dailymotion'],\n        },\n        \n        {\n            'url': 'http://www.bumm.sk/krimi/2017/07/05/biztonsagi-kamera-buktatta-le-az-agg-ferfit-utlegelo-apolot',\n            'info_dict': {\n                'id': '1495629',\n                'ext': 'mp4',\n                'title': 'Care worker punches elderly dementia patient in head 11 times',\n                'description': 'md5:3a743dee84e57e48ec68bf67113199a5',\n            },\n            'add_ie': ['DailyMail'],\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.badzine.de/ansicht/datum/2014/06/09/so-funktioniert-die-neue-englische-badminton-liga.html',\n            'info_dict': {\n                'id': 'FXRb4ykk4S0',\n                'ext': 'mp4',\n                'title': 'The NBL Auction 2014',\n                'uploader': 'BADMINTON England',\n                'uploader_id': 'BADMINTONEvents',\n                'upload_date': '20140603',\n                'description': 'md5:9ef128a69f1e262a700ed83edb163a73',\n            },\n            'add_ie': ['Youtube'],\n            'params': {\n                'skip_download': True,\n            }\n        },\n        \n        {\n            'url': 'http://www.vulture.com/2016/06/new-key-peele-sketches-released.html',\n            'md5': 'ca1aef97695ef2c1d6973256a57e5252',\n            'info_dict': {\n                'id': '769f7ec0-0692-4d62-9b45-0d88074bffc1',\n                'ext': 'mp4',\n                'title': 'Key and Peele|October 10, 2012|2|203|Liam Neesons - Uncensored',\n                'description': 'Two valets share their love for movie star Liam Neesons.',\n                'timestamp': 1349922600,\n                'upload_date': '20121011',\n            },\n        },\n        \n        {\n            'url': 'https://play.google.com/store/apps/details?id=com.gameloft.android.ANMP.GloftA8HM',\n            'info_dict': {\n                'id': '4vAffPZIT44',\n                'ext': 'mp4',\n                'title': 'Asphalt 8: Airborne - Update - Welcome to Dubai!',\n                'uploader': 'Gameloft',\n                'uploader_id': 'gameloft',\n                'upload_date': '20140828',\n                'description': 'md5:c80da9ed3d83ae6d1876c834de03e1c4',\n            },\n            'params': {\n                'skip_download': True,\n            }\n        },\n        \n        {\n            'url': 'http://www.improbable.com/2017/04/03/untrained-modern-youths-and-ancient-masters-in-selfie-portraits/',\n            'md5': '516718101ec834f74318df76259fb3cc',\n            'info_dict': {\n                'id': 'msN87y-iEx0',\n                'ext': 'webm',\n                'title': 'Feynman: Mirrors FUN TO IMAGINE 6',\n                'upload_date': '20080526',\n                'description': 'md5:0ffc78ea3f01b2e2c247d5f8d1d3c18d',\n                'uploader': 'Christopher Sykes',\n                'uploader_id': 'ChristopherJSykes',\n            },\n            'add_ie': ['Youtube'],\n        },\n        \n        {\n            'url': 'http://www.ll.mit.edu/workshops/education/videocourses/antennas/lecture1/video/',\n            'playlist': [{\n                'md5': '0c5e352edabf715d762b0ad4e6d9ee67',\n                'info_dict': {\n                    'id': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final',\n                    'title': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final - video1',\n                    'ext': 'flv',\n                    'duration': 2235.90,\n                }\n            }, {\n                'md5': '10e4bb3aaca9fd630e273ff92d9f3c63',\n                'info_dict': {\n                    'id': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final_PIP',\n                    'title': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final - pip',\n                    'ext': 'flv',\n                    'duration': 2235.93,\n                }\n            }],\n            'info_dict': {\n                'title': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final',\n            }\n        },\n        \n        {\n            'url': 'http://www.handjobhub.com/video/busty-blonde-siri-tit-fuck-while-wank-6313.html',\n            'md5': '9d65602bf31c6e20014319c7d07fba27',\n            'info_dict': {\n                'id': '5123ea6d5e5a7',\n                'ext': 'mp4',\n                'age_limit': 18,\n                'uploader': 'www.handjobhub.com',\n                'title': 'Busty Blonde Siri Tit Fuck While Wank at HandjobHub.com',\n            }\n        },\n        \n        \n        {\n            'url': 'http://www.newyorker.com/online/blogs/newsdesk/2014/01/always-never-nuclear-command-and-control.html',\n            'info_dict': {\n                'id': 'always-never',\n                'title': 'Always / Never - The New Yorker',\n            },\n            'playlist_count': 3,\n            'params': {\n                'extract_flat': False,\n                'skip_download': True,\n            }\n        },\n        \n        {\n            'url': 'http://umpire-empire.com/index.php/topic/58125-laz-decides-no-thats-low/',\n            'md5': '96f09a37e44da40dd083e12d9a683327',\n            'info_dict': {\n                'id': '33322633',\n                'ext': 'mp4',\n                'title': 'Ump changes call to ball',\n                'description': 'md5:71c11215384298a172a6dcb4c2e20685',\n                'duration': 48,\n                'timestamp': 1401537900,\n                'upload_date': '20140531',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        \n        {\n            'url': 'http://study.com/academy/lesson/north-american-exploration-failed-colonies-of-spain-france-england.html\n            'md5': '1953f3a698ab51cfc948ed3992a0b7ff',\n            'info_dict': {\n                'id': '6e2wtrbdaf',\n                'ext': 'mov',\n                'title': 'paywall_north-american-exploration-failed-colonies-of-spain-france-england',\n                'description': 'a Paywall Videos video from Remilon',\n                'duration': 644.072,\n                'uploader': 'study.com',\n                'timestamp': 1459678540,\n                'upload_date': '20160403',\n                'filesize': 24687186,\n            },\n        },\n        {\n            'url': 'http://thoughtworks.wistia.com/medias/uxjb0lwrcz',\n            'md5': 'baf49c2baa8a7de5f3fc145a8506dcd4',\n            'info_dict': {\n                'id': 'uxjb0lwrcz',\n                'ext': 'mp4',\n                'title': 'Conversation about Hexagonal Rails Part 1',\n                'description': 'a Martin Fowler video from ThoughtWorks',\n                'duration': 1715.0,\n                'uploader': 'thoughtworks.wistia.com',\n                'timestamp': 1401832161,\n                'upload_date': '20140603',\n            },\n        },\n        \n        {\n            'url': 'https://www.getdrip.com/university/brennan-dunn-drip-workshop/',\n            'info_dict': {\n                'id': '807fafadvk',\n                'ext': 'mp4',\n                'title': 'Drip Brennan Dunn Workshop',\n                'description': 'a JV Webinars video from getdrip-1',\n                'duration': 4986.95,\n                'timestamp': 1463607249,\n                'upload_date': '20160518',\n            },\n            'params': {\n                'skip_download': True,\n            }\n        },\n        \n        {\n            'url': 'http://nakedsecurity.sophos.com/2014/10/29/sscc-171-are-you-sure-that-1234-is-a-bad-password-podcast/',\n            'info_dict': {\n                'id': '174391317',\n                'ext': 'mp3',\n                'description': 'md5:ff867d6b555488ad3c52572bb33d432c',\n                'uploader': 'Sophos Security',\n                'title': 'Chet Chat 171 - Oct 29, 2014',\n                'upload_date': '20141029',\n            }\n        },\n        \n        {\n            'url': 'http://www.guitarplayer.com/lessons/1014/legato-workout-one-hour-to-more-fluid-performance---tab/52809',\n            'info_dict': {\n                'id': '52809',\n                'title': 'Guitar Essentials: Legato Workout\u2014One-Hour to Fluid Performance  | TAB + AUDIO',\n            },\n            'playlist_mincount': 7,\n        },\n        \n        {\n            'url': 'http://radiocnrv.com/promouvoir-radio-cnrv/',\n            'info_dict': {\n                'id': '204146',\n                'ext': 'mp3',\n                'title': 'CNRV',\n                'location': 'Paris, France',\n                'is_live': True,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.esa.int/Our_Activities/Space_Science/Rosetta/Philae_comet_touch-down_webcast',\n            'info_dict': {\n                'id': '67864563',\n                'ext': 'flv',\n                'upload_date': '20141112',\n                'title': 'Rosetta \n            }\n        },\n        \n        {\n            'url': 'https://www.freespeech.org/',\n            'info_dict': {\n                'id': '123537347',\n                'ext': 'mp4',\n                'title': 're:^FSTV [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'https://skiplagged.com/',\n            'info_dict': {\n                'id': 'skiplagged',\n                'title': 'Skiplagged: The smart way to find cheap flights',\n            },\n            'playlist_mincount': 1,\n            'add_ie': ['Youtube'],\n        },\n        \n        {\n            'url': 'http://undergroundwellness.com/podcasts/306-5-steps-to-permanent-gut-healing/',\n            'info_dict': {\n                'id': '7141703',\n                'ext': 'mp3',\n                'upload_date': '20141126',\n                'title': 'Jack Tips: 5 Steps to Permanent Gut Healing',\n            }\n        },\n        \n        {\n            'url': 'http://www.abc.net.au/7.30/content/2015/s4164797.htm',\n            'info_dict': {\n                'id': '730m_DandD_1901_512k',\n                'ext': 'mp4',\n                'uploader': 'www.abc.net.au',\n                'title': 'Game of Thrones with dice - Dungeons and Dragons fantasy role-playing game gets new life - 19/01/2015',\n            }\n        },\n        \n        {\n            'url': 'http://deadspin.com/i-cant-stop-watching-john-wall-chop-the-nuggets-with-th-1681801597',\n            'info_dict': {\n                'id': '4d03aad9',\n                'ext': 'mp4',\n                'uploader': 'deadspin',\n                'title': 'WALL-TO-GORTAT',\n                'timestamp': 1422285291,\n                'upload_date': '20150126',\n            },\n            'add_ie': ['Viddler'],\n        },\n        \n        {\n            'url': 'http://thedailyshow.cc.com/podcast/episodetwelve',\n            'info_dict': {\n                'id': '3377616',\n                'ext': 'mp3',\n                'title': \"The Daily Show Podcast without Jon Stewart - Episode 12: Bassem Youssef: Egypt's Jon Stewart\",\n                'description': 'md5:601cb790edd05908957dae8aaa866465',\n                'upload_date': '20150220',\n            },\n            'skip': 'All The Daily Show URLs now redirect to http://www.cc.com/shows/',\n        },\n        \n        {\n            'url': 'http://media.nationalarchives.gov.uk/index.php/webinar-using-discovery-national-archives-online-catalogue/',\n            'info_dict': {\n                'id': 'Mrj4DVp2zeA',\n                'ext': 'mp4',\n                'upload_date': '20150212',\n                'uploader': 'The National Archives UK',\n                'description': 'md5:8078af856dca76edc42910b61273dbbf',\n                'uploader_id': 'NationalArchives08',\n                'title': 'Webinar: Using Discovery, The National Archives\u2019 online catalogue',\n            },\n        },\n        \n        {\n            'url': 'http://www.suffolk.edu/sjc/live.php',\n            'info_dict': {\n                'id': 'live',\n                'ext': 'flv',\n                'title': 'Massachusetts Supreme Judicial Court Oral Arguments',\n                'uploader': 'www.suffolk.edu',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'skip': 'Only has video a few mornings per month, see http://www.suffolk.edu/sjc/',\n        },\n        \n        {\n            'url': 'http://www.indiedb.com/games/king-machine/videos',\n            'info_dict': {\n                'id': 'videos',\n                'ext': 'mp4',\n                'title': 'king machine trailer 1',\n                'description': 'Browse King Machine videos & audio for sweet media. Your eyes will thank you.',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            \n            'url': 'http://www.txxx.com/videos/3326530/ariele/',\n            'info_dict': {\n                'id': '3326530_hq',\n                'ext': 'mp4',\n                'title': 'ARIELE | Tube Cup',\n                'uploader': 'www.txxx.com',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            }\n        },\n        {\n            \n            'url': 'https://www.mediaite.com/tv/dem-senator-claims-gary-cohn-faked-a-bad-connection-during-trump-call-to-get-him-off-the-phone/',\n            'md5': 'ca00a040364b5b439230e7ebfd02c4e9',\n            'info_dict': {\n                'id': 'O0c5JcKT',\n                'ext': 'mp4',\n                'upload_date': '20171122',\n                'timestamp': 1511366290,\n                'title': 'Dem Senator Claims Gary Cohn Faked a Bad Connection During Trump Call to Get Him Off the Phone',\n            },\n            'add_ie': [JWPlatformIE.ie_key()],\n        },\n        {\n            \n            'url': 'http://ortcam.com/solidworks-\u0443\u0440\u043e\u043a-6-\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430-\u0447\u0435\u0440\u0442\u0435\u0436\u0430_33f9b7351.html',\n            'info_dict': {\n                'id': 'yygqldloqIk',\n                'ext': 'mp4',\n                'title': 'SolidWorks. \u0423\u0440\u043e\u043a 6 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0447\u0435\u0440\u0442\u0435\u0436\u0430',\n                'description': 'md5:baf95267792646afdbf030e4d06b2ab3',\n                'upload_date': '20130314',\n                'uploader': 'PRO\u0441\u0442\u043e\u04353D',\n                'uploader_id': 'PROstoe3D',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            \n            'url': 'https://www.vooplayer.com/v3/watch/watch.php?v=NzgwNTg=',\n            'info_dict': {\n                'id': 'watch',\n                'ext': 'mp4',\n                'title': 'Step 1 -  Good Foundation',\n                'description': 'md5:d1e7ff33a29fc3eb1673d6c270d344f4',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.rtlnieuws.nl/nieuws/buitenland/aanslagen-kopenhagen',\n            'playlist_mincount': 5,\n            'info_dict': {\n                'id': 'aanslagen-kopenhagen',\n                'title': 'Aanslagen Kopenhagen',\n            }\n        },\n        \n        {\n            'url': 'http://www.skipass.com/news/116090-bon-appetit-s5ep3-baqueira-mi-cor.html',\n            'info_dict': {\n                'id': '118046',\n                'ext': 'mp4',\n                'title': 'EP3S5 - Bon App\u00e9tit - Baqueira Mi Corazon !',\n            }\n        },\n        \n        {\n            'url': 'http://www.premierchristianradio.com/Shows/Saturday/Unbelievable/Conference-Videos/Os-Guinness-Is-It-Fools-Talk-Unbelievable-Conference-2014',\n            'info_dict': {\n                'id': '1_a52wc67y',\n                'ext': 'flv',\n                'upload_date': '20150127',\n                'uploader_id': 'PremierMedia',\n                'timestamp': int,\n                'title': 'Os Guinness // Is It Fools Talk? // Unbelievable? Conference 2014',\n            },\n        },\n        \n        {\n            'url': 'http://fod.infobase.com/p_ViewPlaylist.aspx?AssignmentID=NUN8ZY',\n            'info_dict': {\n                'id': '0_izeg5utt',\n                'ext': 'mp4',\n                'title': '35871',\n                'timestamp': 1355743100,\n                'upload_date': '20121217',\n                'uploader_id': 'batchUser',\n            },\n            'add_ie': ['Kaltura'],\n        },\n        {\n            \n            'url': 'https://www.oreilly.com/ideas/my-cloud-makes-pretty-pictures',\n            'info_dict': {\n                'id': '0_utuok90b',\n                'ext': 'mp4',\n                'title': '06_matthew_brender_raj_dutt',\n                'timestamp': 1466638791,\n                'upload_date': '20160622',\n            },\n            'add_ie': ['Kaltura'],\n            'expected_warnings': [\n                'Could not send HEAD request'\n            ],\n            'params': {\n                'skip_download': True,\n            }\n        },\n        {\n            \n            'url': 'http://www.cornell.edu/video/nima-arkani-hamed-standard-models-of-particle-physics',\n            'info_dict': {\n                'id': '1_sgtvehim',\n                'ext': 'mp4',\n                'title': 'Our \"Standard Models\" of particle physics and cosmology',\n                'description': 'md5:67ea74807b8c4fea92a6f38d6d323861',\n                'timestamp': 1321158993,\n                'upload_date': '20111113',\n                'uploader_id': 'kps1',\n            },\n            'add_ie': ['Kaltura'],\n        },\n        {\n            \n            'url': 'http://www.gsd.harvard.edu/event/i-m-pei-a-centennial-celebration/',\n            'md5': 'ae5ace8eb09dc1a35d03b579a9c2cc44',\n            'info_dict': {\n                'id': '0_f2cfbpwy',\n                'ext': 'mp4',\n                'title': 'I. M. Pei: A Centennial Celebration',\n                'description': 'md5:1db8f40c69edc46ca180ba30c567f37c',\n                'upload_date': '20170403',\n                'uploader_id': 'batchUser',\n                'timestamp': 1491232186,\n            },\n            'add_ie': ['Kaltura'],\n        },\n        \n        {\n            'url': 'http://lenta.ru/news/2015/03/06/navalny/',\n            \n            'info_dict': {\n                'id': '227304',\n                'ext': 'mp4',\n                'title': '\u041d\u0430\u0432\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0448\u0435\u043b \u043d\u0430 \u0441\u0432\u043e\u0431\u043e\u0434\u0443',\n                'description': 'md5:d97861ac9ae77377f3f20eaf9d04b4f5',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 87,\n                'view_count': int,\n                'age_limit': 0,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'https://tvrain.ru/lite/teleshow/kak_vse_nachinalos/namin-418921/',\n            'info_dict': {\n                'id': '582306',\n                'ext': 'mp4',\n                'title': '\u0421\u0442\u0430\u0441 \u041d\u0430\u043c\u0438\u043d: \u00ab\u041c\u044b \u043d\u0430\u0440\u0443\u0448\u0438\u043b\u0438 \u0434\u0435\u0432\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u041a\u0440\u0435\u043c\u043b\u044f\u00bb',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 3382,\n                'view_count': int,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://muz-tv.ru/play/7129/',\n            \n            'info_dict': {\n                'id': '12820',\n                'ext': 'mp4',\n                'title': \"'O Sole Mio\",\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 216,\n                'view_count': int,\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable.',\n        },\n        \n        {\n            'url': 'http://muz-tv.ru/kinozal/view/7400/',\n            'info_dict': {\n                'id': '100183293',\n                'ext': 'mp4',\n                'title': '\u0422\u0430\u0439\u043d\u044b \u043f\u0435\u0440\u0435\u0432\u0430\u043b\u0430 \u0414\u044f\u0442\u043b\u043e\u0432\u0430 \u2022 1 \u0441\u0435\u0440\u0438\u044f 2 \u0447\u0430\u0441\u0442\u044c',\n                'description': '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0438\u0430\u043b-\u0440\u0430\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0436\u0443\u0442\u043a\u0438\u0445 \u0442\u0430\u0439\u043d \u0425\u0425 \u0432\u0435\u043a\u0430',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 694,\n                'age_limit': 0,\n            },\n            'skip': 'HTTP Error 404: Not Found',\n        },\n        \n        {\n            'url': 'http://www.cinemablend.com/new/First-Joe-Dirt-2-Trailer-Teaser-Stupid-Greatness-70874.html',\n            'info_dict': {\n                'id': '3519514',\n                'ext': 'mp4',\n                'title': 'Joe Dirt 2 Beautiful Loser Teaser Trailer',\n                'thumbnail': r're:^https?://.*\\.png$',\n                'duration': 45.115,\n            },\n        },\n        \n        {\n            'url': 'http://techcrunch.com/video/facebook-creates-on-this-day-crunch-report/518726732/',\n            'md5': '4c6f127a30736b59b3e2c19234ee2bf7',\n            'info_dict': {\n                'id': '518726732',\n                'ext': 'mp4',\n                'title': 'Facebook Creates \"On This Day\" | Crunch Report',\n                'description': 'Amazon updates Fire TV line, Tesla\\'s Model X spotted in the wild',\n                'timestamp': 1427237531,\n                'uploader': 'Crunch Report',\n                'upload_date': '20150324',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.svt.se/sport/ishockey/jagr-tacklar-giroux-under-intervjun',\n            'info_dict': {\n                'id': '2900353',\n                'ext': 'flv',\n                'title': 'H\u00e4r trycker Jagr till Giroux (under SVT-intervjun)',\n                'duration': 27,\n                'age_limit': 0,\n            },\n        },\n        \n        {\n            'url': 'http://crooksandliars.com/2015/04/fox-friends-says-protecting-atheists',\n            'info_dict': {\n                'id': '8RUoRhRi',\n                'ext': 'mp4',\n                'title': \"Fox & Friends Says Protecting Atheists From Discrimination Is Anti-Christian!\",\n                'description': 'md5:e1a46ad1650e3a5ec7196d432799127f',\n                'timestamp': 1428207000,\n                'upload_date': '20150405',\n                'uploader': 'Heather',\n            },\n        },\n        \n        {\n            'url': 'http://theothermccain.com/2010/02/02/video-proves-that-bill-kristol-has-been-watching-glenn-beck/comment-page-1/',\n            'info_dict': {\n                'id': 'MTE3MjUtMzQ2MzA',\n                'ext': 'mp4',\n                'title': 'md5:5e3662a81a4014d24c250d76d41a08d5',\n                'description': 'md5:9b8e9542d6c3c5de42d6451b7d780cec',\n                'timestamp': 1265032391,\n                'upload_date': '20100201',\n                'uploader': 'Heather',\n            },\n        },\n        \n        {\n            'url': 'http://www.riderfans.com/forum/showthread.php?121827-Freeman&s=e98fa1ea6dc08e886b1678d35212494a',\n            'info_dict': {\n                'id': 'ln7x1qSThw4k',\n                'ext': 'flv',\n                'title': \"PFT Live: New leader in the 'new-look' defense\",\n                'description': 'md5:65a19b4bbfb3b0c0c5768bed1dfad74e',\n                'uploader': 'NBCU-SPORTS',\n                'upload_date': '20140107',\n                'timestamp': 1389118457,\n            },\n            'skip': 'Invalid Page URL',\n        },\n        \n        {\n            'url': 'http://www.vulture.com/2016/06/letterman-couldnt-care-less-about-late-night.html',\n            'md5': '1aa589c675898ae6d37a17913cf68d66',\n            'info_dict': {\n                'id': 'x_dtl_oa_LettermanliftPR_160608',\n                'ext': 'mp4',\n                'title': 'David Letterman: A Preview',\n                'description': 'A preview of Tom Brokaw\\'s interview with David Letterman as part of the On Assignment series powered by Dateline. Airs Sunday June 12 at 7/6c.',\n                'upload_date': '20160609',\n                'timestamp': 1465431544,\n                'uploader': 'NBCU-NEWS',\n            },\n        },\n        \n        {\n            'url': 'https://video.udn.com/news/300346',\n            'md5': 'fd2060e988c326991037b9aff9df21a6',\n            'info_dict': {\n                'id': '300346',\n                'ext': 'mp4',\n                'title': '\u4e2d\u4e00\u4e2d\u7537\u5e2b\u8b8a\u6027 \u5168\u6821\u5e2b\u751f\u529b\u633a',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n            'expected_warnings': ['Failed to parse JSON Expecting value'],\n        },\n        \n        {\n            'url': 'http://www.businessinsider.com/excel-index-match-vlookup-video-how-to-2015-2?IR=T',\n            'info_dict': {\n                'id': '50YnY4czr4ms1vJ7yz3xzq0excz_pUMs',\n                'ext': 'mp4',\n                'description': 'Index/Match versus VLOOKUP.',\n                'title': 'This is what separates the Excel masters from the wannabes',\n                'duration': 191.933,\n            },\n            'params': {\n                \n                'skip_download': True,\n            }\n        },\n        \n        {\n            'url': 'http://www.sportsnet.ca/baseball/mlb/sn-presents-russell-martin-world-citizen/',\n            'md5': '4ae374f1f8b91c889c4b9203c8c752af',\n            'info_dict': {\n                'id': '4255764656001',\n                'ext': 'mp4',\n                'title': 'SN Presents: Russell Martin, World Citizen',\n                'description': 'To understand why he was the Toronto Blue Jays\u2019 top off-season priority is to appreciate his background and upbringing in Montreal, where he first developed his baseball skills. Written and narrated by Stephen Brunt.',\n                'uploader': 'Rogers Sportsnet',\n                'uploader_id': '1704050871',\n                'upload_date': '20150525',\n                'timestamp': 1432570283,\n            },\n        },\n        \n        {\n            'url': 'http://www.clickhole.com/video/dont-understand-bitcoin-man-will-mumble-explanatio-2537',\n            'info_dict': {\n                'id': '2855',\n                'ext': 'mp4',\n                'title': 'Don\u2019t Understand Bitcoin? This Man Will Mumble An Explanation At You',\n                'thumbnail': r're:^https?://.*\\.jpe?g$',\n                'uploader': 'ClickHole',\n                'uploader_id': 'clickhole',\n            }\n        },\n        \n        {\n            'url': 'http://whilewewatch.blogspot.ru/2012/06/whilewewatch-whilewewatch-gripping.html',\n            'info_dict': {\n                'id': '74849a00-85a9-11e1-9660-123139220831',\n                'ext': 'mp4',\n                'title': '\n            }\n        },\n        \n        {\n            'url': 'https://helpx.adobe.com/acrobat/how-to/new-experience-acrobat-dc.html?set=acrobat--get-started--essential-beginners',\n            'md5': '43662b577c018ad707a63766462b1e87',\n            'info_dict': {\n                'id': '2456',\n                'ext': 'mp4',\n                'title': 'New experience with Acrobat DC',\n                'description': 'New experience with Acrobat DC',\n                'duration': 248.667,\n            },\n        },\n        \n        {\n            'url': 'http://www.geekandsundry.com/tabletop-bonus-wils-final-thoughts-on-dread/',\n            'info_dict': {\n                'id': '4238694884001',\n                'ext': 'flv',\n                'title': 'Tabletop: Dread, Last Thoughts',\n                'description': 'Tabletop: Dread, Last Thoughts',\n                'duration': 51690,\n            },\n        },\n        \n        \n        {\n            'url': 'https://dl.dropboxusercontent.com/u/29092637/interview.html',\n            'info_dict': {\n                'id': '4785848093001',\n                'ext': 'mp4',\n                'title': 'The Cardinal Pell Interview',\n                'description': 'Sky News Contributor Andrew Bolt interviews George Pell in Rome, following the Cardinal\\'s evidence before the Royal Commission into Child Abuse. ',\n                'uploader': 'GlobeCast Australia - GlobeStream',\n                'uploader_id': '2733773828001',\n                'upload_date': '20160304',\n                'timestamp': 1457083087,\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        {\n            \n            'url': 'http://www.stack.com/video/3167554373001/learn-to-hit-open-three-pointers-with-damian-lillard-s-baseline-drift-drill',\n            'info_dict': {\n                'id': '3167554373001',\n                'ext': 'mp4',\n                'title': \"Learn to Hit Open Three-Pointers With Damian Lillard's Baseline Drift Drill\",\n                'description': 'md5:57bacb0e0f29349de4972bfda3191713',\n                'uploader_id': '1079349493',\n                'upload_date': '20140207',\n                'timestamp': 1391810548,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.tv-replay.fr/redirection/09-04-16/arte-reportage-arte-11508975.html',\n            'md5': '850bfe45417ddf221288c88a0cffe2e2',\n            'info_dict': {\n                'id': '030273-562_PLUS7-F',\n                'ext': 'mp4',\n                'title': 'ARTE Reportage - Nulle part, en France',\n                'description': 'md5:e3a0e8868ed7303ed509b9e3af2b870d',\n                'upload_date': '20160409',\n            },\n        },\n        \n        {\n            'url': 'http://www.wykop.pl/link/3088787/',\n            'md5': '7619da8c820e835bef21a1efa2a0fc71',\n            'info_dict': {\n                'id': '874_1459135191',\n                'ext': 'mp4',\n                'title': 'Man shows poor quality of new apartment building',\n                'description': 'The wall is like a sand pile.',\n                'uploader': 'Lake8737',\n            },\n            'add_ie': [LiveLeakIE.ie_key()],\n        },\n        \n        {\n            'url': 'https://milo.yiannopoulos.net/2017/06/concealed-carry-robbery/',\n            'info_dict': {\n                'id': '2eb_1496309988',\n                'ext': 'mp4',\n                'title': 'Thief robs place where everyone was armed',\n                'description': 'md5:694d73ee79e535953cf2488562288eee',\n                'uploader': 'brazilwtf',\n            },\n            'add_ie': [LiveLeakIE.ie_key()],\n        },\n        \n        {\n            'url': 'http://www.hudl.com/athlete/2538180/highlights/149298443',\n            'info_dict': {\n                'id': '149298443_480_16c25b74_2',\n                'ext': 'mp4',\n                'title': 'vs. Blue Orange Spring Game',\n                'uploader': 'www.hudl.com',\n            },\n        },\n        \n        {\n            'url': 'http://www.rtl.be/info/video/589263.aspx?CategoryID=288',\n            'info_dict': {\n                'id': 'master',\n                'ext': 'mp4',\n                'title': 'Une nouvelle esp\u00e8ce de dinosaure d\u00e9couverte en Argentine',\n                'uploader': 'www.rtl.be',\n            },\n            'params': {\n                \n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.theatlantic.com/video/index/484130/what-do-black-holes-sound-like/',\n            'md5': 'a3e0df96369831de324f0778e126653c',\n            'info_dict': {\n                'id': '4909620399001',\n                'ext': 'mp4',\n                'title': 'What Do Black Holes Sound Like?',\n                'description': 'what do black holes sound like',\n                'upload_date': '20160524',\n                'uploader_id': '29913724001',\n                'timestamp': 1464107587,\n                'uploader': 'TheAtlantic',\n            },\n            'add_ie': ['BrightcoveLegacy'],\n        },\n        \n        {\n            'url': 'https://www.hostblogger.de/blog/archives/6181-Auto-jagt-Betonmischer.html',\n            'md5': 'fbcde74f534176ecb015849146dd3aee',\n            'info_dict': {\n                'id': '599637780109885',\n                'ext': 'mp4',\n                'title': 'Facebook video \n            },\n        },\n        \n        {\n            'url': 'http://5pillarsuk.com/2017/06/07/tariq-ramadan-disagrees-with-pr-exercise-by-imams-refusing-funeral-prayers-for-london-attackers/',\n            'info_dict': {\n                'id': '1754168231264132',\n                'ext': 'mp4',\n                'title': 'About the Imams and Religious leaders refusing to perform funeral prayers for...',\n                'uploader': 'Tariq Ramadan (official)',\n                'timestamp': 1496758379,\n                'upload_date': '20170606',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        \n        {\n            'url': 'http://www.lothype.com/blue-stars-2016-preview-standstill-full-show/',\n            'md5': 'a47372ee61b39a7b90287094d447d94e',\n            'info_dict': {\n                'id': '10153467542406923',\n                'ext': 'mp4',\n                'title': 'Facebook video \n            },\n        },\n        \n        {\n            'url': 'http://www.lothype.com/blue-devils-drumline-stanford-lot-2016/',\n            'md5': 'd16797741b560b485194eddda8121b48',\n            'info_dict': {\n                'id': 'HNTXWDXV9Is',\n                'ext': 'mp4',\n                'title': 'Blue Devils Drumline Stanford lot 2016',\n                'upload_date': '20160627',\n                'uploader_id': 'GENOCIDE8GENERAL10',\n                'uploader': 'cylus cyrus',\n            },\n        },\n        {\n            \n            'url': 'http://www.expansion.com/multimedia/videos.html?media=EQcM30NHIPv',\n            'md5': '537617d06e64dfed891fa1593c4b30cc',\n            'info_dict': {\n                'id': '0_1iotm5bh',\n                'ext': 'mp4',\n                'title': 'Elecciones brit\u00e1nicas: 5 lecciones para Rajoy',\n                'description': 'md5:435a89d68b9760b92ce67ed227055f16',\n                'uploader_id': 'videos.expansion@el-mundo.net',\n                'upload_date': '20150429',\n                'timestamp': 1430303472,\n            },\n            'add_ie': ['Kaltura'],\n        },\n        {\n            \n            'url': 'https://openclassrooms.com/courses/understanding-the-web',\n            'md5': '64d86f1c7d369afd9a78b38cbb88d80a',\n            'info_dict': {\n                'id': '148867247',\n                'ext': 'mp4',\n                'title': 'Understanding the web - Teaser',\n                'description': 'This is \"Understanding the web - Teaser\" by openclassrooms on Vimeo, the home for high quality videos and the people who love them.',\n                'upload_date': '20151214',\n                'uploader': 'OpenClassrooms',\n                'uploader_id': 'openclassrooms',\n            },\n            'add_ie': ['Vimeo'],\n        },\n        {\n            \n            'url': 'http://racing4everyone.eu/2016/07/30/formula-1-2016-round12-germany/',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://support.arkena.com/display/PLAY/Ways+to+embed+your+video',\n            'md5': 'b96f2f71b359a8ecd05ce4e1daa72365',\n            'info_dict': {\n                'id': 'b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe',\n                'ext': 'mp4',\n                'title': 'Big Buck Bunny',\n                'description': 'Royalty free test video',\n                'timestamp': 1432816365,\n                'upload_date': '20150528',\n                'is_live': False,\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [ArkenaIE.ie_key()],\n        },\n        {\n            'url': 'http://nova.bg/news/view/2016/08/16/156543/%D0%BD%D0%B0-%D0%BA%D0%BE%D1%81%D1%8A%D0%BC-%D0%BE%D1%82-%D0%B2%D0%B7%D1%80%D0%B8%D0%B2-%D0%BE%D1%82%D1%86%D0%B5%D0%BF%D0%B8%D1%85%D0%B0-%D1%86%D1%8F%D0%BB-%D0%BA%D0%B2%D0%B0%D1%80%D1%82%D0%B0%D0%BB-%D0%B7%D0%B0%D1%80%D0%B0%D0%B4%D0%B8-%D0%B8%D0%B7%D1%82%D0%B8%D1%87%D0%B0%D0%BD%D0%B5-%D0%BD%D0%B0-%D0%B3%D0%B0%D0%B7-%D0%B2-%D0%BF%D0%BB%D0%BE%D0%B2%D0%B4%D0%B8%D0%B2/',\n            'info_dict': {\n                'id': '1c7141f46c',\n                'ext': 'mp4',\n                'title': '\u041d\u0410 \u041a\u041e\u0421\u042a\u041c \u041e\u0422 \u0412\u0417\u0420\u0418\u0412: \u0418\u0437\u0442\u0438\u0447\u0430\u043d\u0435 \u043d\u0430 \u0433\u0430\u0437 \u043d\u0430 \u0431\u0435\u043d\u0437\u0438\u043d\u043e\u0441\u0442\u0430\u043d\u0446\u0438\u044f \u0432 \u041f\u043b\u043e\u0432\u0434\u0438\u0432',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [Vbox7IE.ie_key()],\n        },\n        {\n            \n            'url': 'http://www.dagbladet.no/2016/02/23/nyheter/nordlys/ski/troms/ver/43254897/',\n            'info_dict': {\n                'id': '43254897',\n                'title': 'Etter ett \u00e5rs planlegging, klaffet endelig alt: - Jeg m\u00e5tte ta en liten dans',\n            },\n            'playlist_mincount': 3,\n        },\n        {\n            \n            'url': 'http://forum.dvdtalk.com/movie-talk/623756-deleted-magic-star-wars-ot-deleted-alt-scenes-docu-style.html',\n            'info_dict': {\n                'id': '623756-deleted-magic-star-wars-ot-deleted-alt-scenes-docu-style',\n                'title': 'Deleted Magic - Star Wars: OT Deleted / Alt. Scenes Docu. Style - DVD Talk Forum',\n            },\n            'playlist_mincount': 2,\n        },\n        {\n            \n            'url': 'http://www.20min.ch/schweiz/news/story/So-kommen-Sie-bei-Eis-und-Schnee-sicher-an-27032552',\n            'info_dict': {\n                'id': '523629',\n                'ext': 'mp4',\n                'title': 'So kommen Sie bei Eis und Schnee sicher an',\n                'description': 'md5:117c212f64b25e3d95747e5276863f7d',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [TwentyMinutenIE.ie_key()],\n        },\n        {\n            \n            'url': 'https://en.support.wordpress.com/videopress/',\n            'info_dict': {\n                'id': 'OcobLTqC',\n                'ext': 'm4v',\n                'title': 'IMG_5786',\n                'timestamp': 1435711927,\n                'upload_date': '20150701',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [VideoPressIE.ie_key()],\n        },\n        {\n            \n            'url': 'http://magazzino.friday.ru/videos/vipuski/kazan-2',\n            'info_dict': {\n                'id': '9b3d5bee0a8740bf70dfd29d3ea43541',\n                'ext': 'flv',\n                'title': '\u041c\u0430\u0433\u0430\u0437\u0437\u0438\u043d\u043e: \u041a\u0430\u0437\u0430\u043d\u044c 2',\n                'description': 'md5:99bccdfac2269f0e8fdbc4bbc9db184a',\n                'uploader': '\u041c\u0430\u0433\u0430\u0437\u0437\u0438\u043d\u043e',\n                'upload_date': '20170228',\n                'uploader_id': '996642',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [RutubeIE.ie_key()],\n        },\n        {\n            \n            'url': 'http://www.golfchannel.com/topics/shows/golftalkcentral.htm',\n            'only_matching': True,\n        },\n        {\n            \n            'url': 'https://www.hsgac.senate.gov/hearings/canadas-fast-track-refugee-plan-unanswered-questions-and-implications-for-us-national-security',\n            'md5': 'fb8c70b0b515e5037981a2492099aab8',\n            'info_dict': {\n                'id': 'govtaff020316',\n                'ext': 'mp4',\n                'title': 'Integrated Senate Video Player',\n            },\n            'add_ie': [SenateISVPIE.ie_key()],\n        },\n        {\n            \n            'url': 'http://www.sedona.com/FacilitatorTraining2017',\n            'info_dict': {\n                'id': 'FacilitatorTraining2017',\n                'title': 'Facilitator Training 2017',\n            },\n            'playlist_mincount': 5,\n        },\n        {\n            \n            'url': 'https://tv5.ca/videos?v=xuu8qowr291ri',\n            'info_dict': {\n                'id': '95d035dc5c8a401588e9c0e6bd1e9c92',\n                'ext': 'mp4',\n                'title': '07448641',\n                'timestamp': 1499890639,\n                'upload_date': '20170712',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': ['LimelightMedia'],\n        },\n        {\n            'url': 'http://kron4.com/2017/04/28/standoff-with-walnut-creek-murder-suspect-ends-with-arrest/',\n            'info_dict': {\n                'id': 'standoff-with-walnut-creek-murder-suspect-ends-with-arrest',\n                'title': 'Standoff with Walnut Creek murder suspect ends',\n                'description': 'md5:3ccc48a60fc9441eeccfc9c469ebf788',\n            },\n            'playlist_mincount': 4,\n        },\n        {\n            \n            'url': 'http://www.vanityfair.com/hollywood/2017/04/donald-trump-tv-pitches',\n            'info_dict': {\n                'id': '8caf6e88-d0ec-11e5-90d3-34c2c42653ac',\n                'ext': 'mp4',\n                'title': \"No one has seen the drama series based on Trump's life \\u2014 until now\",\n                'description': 'Donald Trump wanted a weekly TV drama based on his life. It never aired. But The Washington Post recently obtained a scene from the pilot script \u2014 and enlisted actors.',\n                'timestamp': 1455216756,\n                'uploader': 'The Washington Post',\n                'upload_date': '20160211',\n            },\n            'add_ie': [WashingtonPostIE.ie_key()],\n        },\n        {\n            \n            'url': 'http://www.tgcom24.mediaset.it/politica/serracchiani-voglio-vivere-in-una-societa-aperta-reazioni-sproporzionate-_3071354-201702a.shtml',\n            'info_dict': {\n                'id': '720642',\n                'ext': 'mp4',\n                'title': 'Serracchiani: \"Voglio vivere in una societ\u00e0 aperta, con tutela del patto di fiducia\"',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [MediasetIE.ie_key()],\n        },\n        {\n            \n            'url': 'https://www.noviny.sk/slovensko/238543-slovenskom-sa-prehnala-vlna-silnych-burok',\n            'info_dict': {\n                'id': '238543-slovenskom-sa-prehnala-vlna-silnych-burok',\n                'title': 'Slovenskom sa prehnala vlna siln\u00fdch b\u00farok',\n            },\n            'playlist_mincount': 5,\n            'add_ie': [JojIE.ie_key()],\n        },\n        {\n            \n            'url': 'https://tvrain.ru/amp/418921/',\n            'md5': 'cc00413936695987e8de148b67d14f1d',\n            'info_dict': {\n                'id': '418921',\n                'ext': 'mp4',\n                'title': '\u0421\u0442\u0430\u0441 \u041d\u0430\u043c\u0438\u043d: \u00ab\u041c\u044b \u043d\u0430\u0440\u0443\u0448\u0438\u043b\u0438 \u0434\u0435\u0432\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u041a\u0440\u0435\u043c\u043b\u044f\u00bb',\n            },\n        },\n        {\n            \n            'url': 'http://help.vzaar.com/article/165-embedding-video',\n            'md5': '7e3919d9d2620b89e3e00bec7fe8c9d4',\n            'info_dict': {\n                'id': '8707641',\n                'ext': 'mp4',\n                'title': 'Building A Business Online: Principal Chairs Q & A',\n            },\n        },\n        {\n            \n            'url': 'https://www.paragon-software.com/home/rk-free/keyscenarios.html',\n            'info_dict': {\n                'id': 'keyscenarios',\n                'title': 'Rescue Kit 14 Free Edition - Getting started',\n            },\n            'playlist_count': 4,\n        },\n        {\n            \n            'url': 'https://youtube-dl-demo.neocities.org/vshare.html',\n            'md5': '17b39f55b5497ae8b59f5fbce8e35886',\n            'info_dict': {\n                'id': '0f64ce6',\n                'title': 'vl14062007715967',\n                'ext': 'mp4',\n            }\n        },\n        {\n            'url': 'http://www.heidelberg-laureate-forum.org/blog/video/lecture-friday-september-23-2016-sir-c-antony-r-hoare/',\n            'md5': 'aecd089f55b1cb5a59032cb049d3a356',\n            'info_dict': {\n                'id': '90227f51a80c4d8f86c345a7fa62bd9a1d',\n                'ext': 'mp4',\n                'title': 'Lecture: Friday, September 23, 2016 - Sir Tony Hoare',\n                'description': 'md5:5a51db84a62def7b7054df2ade403c6c',\n                'timestamp': 1474354800,\n                'upload_date': '20160920',\n            }\n        },\n        {\n            'url': 'http://www.kidzworld.com/article/30935-trolls-the-beat-goes-on-interview-skylar-astin-and-amanda-leighton',\n            'info_dict': {\n                'id': '1731611',\n                'ext': 'mp4',\n                'title': 'Official Trailer | TROLLS: THE BEAT GOES ON!',\n                'description': 'md5:eb5f23826a027ba95277d105f248b825',\n                'timestamp': 1516100691,\n                'upload_date': '20180116',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [SpringboardPlatformIE.ie_key()],\n        },\n        {\n            'url': 'https://www.youtube.com/shared?ci=1nEzmT-M4fU',\n            'info_dict': {\n                'id': 'uPDB5I9wfp8',\n                'ext': 'webm',\n                'title': 'Pocoyo: 90 minutos de epis\u00f3dios completos Portugu\u00eas para crian\u00e7as - PARTE 3',\n                'description': 'md5:d9e4d9346a2dfff4c7dc4c8cec0f546d',\n                'upload_date': '20160219',\n                'uploader': 'Pocoyo - Portugu\u00eas (BR)',\n                'uploader_id': 'PocoyoBrazil',\n            },\n            'add_ie': [YoutubeIE.ie_key()],\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://www.yapfiles.ru/show/1872528/690b05d3054d2dbe1e69523aa21bb3b1.mp4.html',\n            'info_dict': {\n                'id': 'vMDE4NzI1Mjgt690b',\n                'ext': 'mp4',\n                'title': '\u041a\u043e\u0442\u044f\u0442\u0430',\n            },\n            'add_ie': [YapFilesIE.ie_key()],\n            'params': {\n                'skip_download': True,\n            },\n        }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    ]\n\n    def report_following_redirect(self, new_url):\n        \n\n        camtasia_cfg = self._search_regex(\n            r'fo\\.addVariable\\(\\s*\"csConfigFile\",\\s*\"([^\"]+)\"\\s*\\);',\n            webpage, 'camtasia configuration file', default=None)\n        if camtasia_cfg is None:\n            return None\n\n        title = self._html_search_meta('DC.title', webpage, fatal=True)\n\n        camtasia_url = compat_urlparse.urljoin(url, camtasia_cfg)\n        camtasia_cfg = self._download_xml(\n            camtasia_url, video_id,\n            note='Downloading camtasia configuration',\n            errnote='Failed to download camtasia configuration')\n        fileset_node = camtasia_cfg.find('./playlist/array/fileset')\n\n        entries = []\n        for n in fileset_node.getchildren():\n            url_n = n.find('./uri')\n            if url_n is None:\n                continue\n\n            entries.append({\n                'id': os.path.splitext(url_n.text.rpartition('/')[2])[0],\n                'title': '%s - %s' % (title, n.tag),\n                'url': compat_urlparse.urljoin(url, url_n.text),\n                'duration': float_or_none(n.find('./duration').text),\n            })\n\n        return {\n            '_type': 'playlist',\n            'entries': entries,\n            'title': title,\n        }\n\n    def _real_extract(self, url):\n        if url.startswith('//'):\n            return {\n                '_type': 'url',\n                'url': self.http_scheme() + url,\n            }\n\n        parsed_url = compat_urlparse.urlparse(url)\n        if not parsed_url.scheme:\n            default_search = self._downloader.params.get('default_search')\n            if default_search is None:\n                default_search = 'fixup_error'\n\n            if default_search in ('auto', 'auto_warning', 'fixup_error'):\n                if '/' in url:\n                    self._downloader.report_warning('The url doesn\\'t specify the protocol, trying with http')\n                    return self.url_result('http://' + url)\n                elif default_search != 'fixup_error':\n                    if default_search == 'auto_warning':\n                        if re.match(r'^(?:url|URL)$', url):\n                            raise ExtractorError(\n                                'Invalid URL:  %r . Call youtube-dl like this:  youtube-dl -v \"https://www.youtube.com/watch?v=BaW_jenozKc\"  ' % url,\n                                expected=True)\n                        else:\n                            self._downloader.report_warning(\n                                'Falling back to youtube search for  %s . Set --default-search \"auto\" to suppress this warning.' % url)\n                    return self.url_result('ytsearch:' + url)\n\n            if default_search in ('error', 'fixup_error'):\n                raise ExtractorError(\n                    '%r is not a valid URL. '\n                    'Set --default-search \"ytsearch\" (or run  youtube-dl \"ytsearch:%s\" ) to search YouTube'\n                    % (url, url), expected=True)\n            else:\n                if ':' not in default_search:\n                    default_search += ':'\n                return self.url_result(default_search + url)\n\n        url, smuggled_data = unsmuggle_url(url)\n        force_videoid = None\n        is_intentional = smuggled_data and smuggled_data.get('to_generic')\n        if smuggled_data and 'force_videoid' in smuggled_data:\n            force_videoid = smuggled_data['force_videoid']\n            video_id = force_videoid\n        else:\n            video_id = self._generic_id(url)\n\n        self.to_screen('%s: Requesting header' % video_id)\n\n        head_req = HEADRequest(url)\n        head_response = self._request_webpage(\n            head_req, video_id,\n            note=False, errnote='Could not send HEAD request to %s' % url,\n            fatal=False)\n\n        if head_response is not False:\n            \n            new_url = compat_str(head_response.geturl())\n            if url != new_url:\n                self.report_following_redirect(new_url)\n                if force_videoid:\n                    new_url = smuggle_url(\n                        new_url, {'force_videoid': force_videoid})\n                return self.url_result(new_url)\n\n        full_response = None\n        if head_response is False:\n            request = sanitized_Request(url)\n            request.add_header('Accept-Encoding', '*')\n            full_response = self._request_webpage(request, video_id)\n            head_response = full_response\n\n        info_dict = {\n            'id': video_id,\n            'title': self._generic_title(url),\n            'upload_date': unified_strdate(head_response.headers.get('Last-Modified'))\n        }\n\n        \n        content_type = head_response.headers.get('Content-Type', '').lower()\n        m = re.match(r'^(?P<type>audio|video|application(?=/(?:ogg$|(?:vnd\\.apple\\.|x-)?mpegurl)))/(?P<format_id>[^;\\s]+)', content_type)\n        if m:\n            format_id = compat_str(m.group('format_id'))\n            if format_id.endswith('mpegurl'):\n                formats = self._extract_m3u8_formats(url, video_id, 'mp4')\n            elif format_id == 'f4m':\n                formats = self._extract_f4m_formats(url, video_id)\n            else:\n                formats = [{\n                    'format_id': format_id,\n                    'url': url,\n                    'vcodec': 'none' if m.group('type') == 'audio' else None\n                }]\n                info_dict['direct'] = True\n            self._sort_formats(formats)\n            info_dict['formats'] = formats\n            return info_dict\n\n        if not self._downloader.params.get('test', False) and not is_intentional:\n            force = self._downloader.params.get('force_generic_extractor', False)\n            self._downloader.report_warning(\n                '%s on generic information extractor.' % ('Forcing' if force else 'Falling back'))\n\n        if not full_response:\n            request = sanitized_Request(url)\n            \n            \n            \n            \n            \n            \n            \n            \n            request.add_header('Accept-Encoding', '*')\n            full_response = self._request_webpage(request, video_id)\n\n        first_bytes = full_response.read(512)\n\n        \n        if first_bytes.startswith(b'\n            info_dict['formats'] = self._extract_m3u8_formats(url, video_id, 'mp4')\n            self._sort_formats(info_dict['formats'])\n            return info_dict\n\n        \n        \n        if not is_html(first_bytes):\n            self._downloader.report_warning(\n                'URL could be a direct video link, returning it as such.')\n            info_dict.update({\n                'direct': True,\n                'url': url,\n            })\n            return info_dict\n\n        webpage = self._webpage_read_content(\n            full_response, url, video_id, prefix=first_bytes)\n\n        self.report_extraction(video_id)\n\n        \n        try:\n            doc = compat_etree_fromstring(webpage.encode('utf-8'))\n            if doc.tag == 'rss':\n                return self._extract_rss(url, video_id, doc)\n            elif doc.tag == 'SmoothStreamingMedia':\n                info_dict['formats'] = self._parse_ism_formats(doc, url)\n                self._sort_formats(info_dict['formats'])\n                return info_dict\n            elif re.match(r'^(?:{[^}]+})?smil$', doc.tag):\n                smil = self._parse_smil(doc, url, video_id)\n                self._sort_formats(smil['formats'])\n                return smil\n            elif doc.tag == '{http://xspf.org/ns/0/}playlist':\n                return self.playlist_result(self._parse_xspf(doc, video_id), video_id)\n            elif re.match(r'(?i)^(?:{[^}]+})?MPD$', doc.tag):\n                info_dict['formats'] = self._parse_mpd_formats(\n                    doc,\n                    mpd_base_url=compat_str(full_response.geturl()).rpartition('/')[0],\n                    mpd_url=url)\n                self._sort_formats(info_dict['formats'])\n                return info_dict\n            elif re.match(r'^{http://ns\\.adobe\\.com/f4m/[12]\\.0}manifest$', doc.tag):\n                info_dict['formats'] = self._parse_f4m_formats(doc, url, video_id)\n                self._sort_formats(info_dict['formats'])\n                return info_dict\n        except compat_xml_parse_error:\n            pass\n\n        \n        camtasia_res = self._extract_camtasia(url, video_id, webpage)\n        if camtasia_res is not None:\n            return camtasia_res\n\n        \n        \n        \n        webpage = compat_urllib_parse_unquote(webpage)\n\n        \n        \n        \n        \n        \n        \n        video_title = self._og_search_title(\n            webpage, default=None) or self._html_search_regex(\n            r'(?s)<title>(.*?)</title>', webpage, 'video title',\n            default='video')\n\n        \n        age_limit = self._rta_search(webpage)\n        \n        \n        AGE_LIMIT_MARKERS = [\n            r'Proudly Labeled <a href=\"http://www\\.rtalabel\\.org/\" title=\"Restricted to Adults\">RTA</a>',\n        ]\n        if any(re.search(marker, webpage) for marker in AGE_LIMIT_MARKERS):\n            age_limit = 18\n\n        \n        video_uploader = self._search_regex(\n            r'^(?:https?://)?([^/]*)/.*', url, 'video uploader')\n\n        video_description = self._og_search_description(webpage, default=None)\n        video_thumbnail = self._og_search_thumbnail(webpage, default=None)\n\n        info_dict.update({\n            'title': video_title,\n            'description': video_description,\n            'thumbnail': video_thumbnail,\n            'age_limit': age_limit,\n        })\n\n        \n        bc_urls = BrightcoveLegacyIE._extract_brightcove_urls(webpage)\n        if bc_urls:\n            entries = [{\n                '_type': 'url',\n                'url': smuggle_url(bc_url, {'Referer': url}),\n                'ie_key': 'BrightcoveLegacy'\n            } for bc_url in bc_urls]\n\n            return {\n                '_type': 'playlist',\n                'title': video_title,\n                'id': video_id,\n                'entries': entries,\n            }\n\n        \n        bc_urls = BrightcoveNewIE._extract_urls(self, webpage)\n        if bc_urls:\n            return self.playlist_from_matches(\n                bc_urls, video_id, video_title,\n                getter=lambda x: smuggle_url(x, {'referrer': url}),\n                ie='BrightcoveNew')\n\n        \n        nexx_urls = NexxIE._extract_urls(webpage)\n        if nexx_urls:\n            return self.playlist_from_matches(nexx_urls, video_id, video_title, ie=NexxIE.ie_key())\n\n        \n        nexx_embed_urls = NexxEmbedIE._extract_urls(webpage)\n        if nexx_embed_urls:\n            return self.playlist_from_matches(nexx_embed_urls, video_id, video_title, ie=NexxEmbedIE.ie_key())\n\n        \n        tp_urls = ThePlatformIE._extract_urls(webpage)\n        if tp_urls:\n            return self.playlist_from_matches(tp_urls, video_id, video_title, ie='ThePlatform')\n\n        \n        vessel_urls = VesselIE._extract_urls(webpage)\n        if vessel_urls:\n            return self.playlist_from_matches(vessel_urls, video_id, video_title, ie=VesselIE.ie_key())\n\n        \n        matches = re.findall(\n            r'<iframe[^>]+?src=\"((?:https?:)?//(?:(?:www|static)\\.)?rtl\\.nl/(?:system/videoplayer/[^\"]+(?:video_)?)?embed[^\"]+)\"',\n            webpage)\n        if matches:\n            return self.playlist_from_matches(matches, video_id, video_title, ie='RtlNl')\n\n        vimeo_urls = VimeoIE._extract_urls(url, webpage)\n        if vimeo_urls:\n            return self.playlist_from_matches(vimeo_urls, video_id, video_title, ie=VimeoIE.ie_key())\n\n        vid_me_embed_url = self._search_regex(\n            r'src=[\\'\"](https?://vid\\.me/[^\\'\"]+)[\\'\"]',\n            webpage, 'vid.me embed', default=None)\n        if vid_me_embed_url is not None:\n            return self.url_result(vid_me_embed_url, 'Vidme')\n\n        \n        youtube_urls = YoutubeIE._extract_urls(webpage)\n        if youtube_urls:\n            return self.playlist_from_matches(\n                youtube_urls, video_id, video_title, ie=YoutubeIE.ie_key())\n\n        matches = DailymotionIE._extract_urls(webpage)\n        if matches:\n            return self.playlist_from_matches(matches, video_id, video_title)\n\n        \n        m = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?dailymotion\\.[a-z]{2,3}/widget/jukebox\\?.+?)\\1', webpage)\n        if m:\n            playlists = re.findall(\n                r'list\\[\\]=/playlist/([^/]+)/', unescapeHTML(m.group('url')))\n            if playlists:\n                return self.playlist_from_matches(\n                    playlists, video_id, video_title, lambda p: '//dailymotion.com/playlist/%s' % p)\n\n        \n        dailymail_urls = DailyMailIE._extract_urls(webpage)\n        if dailymail_urls:\n            return self.playlist_from_matches(\n                dailymail_urls, video_id, video_title, ie=DailyMailIE.ie_key())\n\n        \n        wistia_url = WistiaIE._extract_url(webpage)\n        if wistia_url:\n            return {\n                '_type': 'url_transparent',\n                'url': self._proto_relative_url(wistia_url),\n                'ie_key': WistiaIE.ie_key(),\n                'uploader': video_uploader,\n            }\n\n        \n        svt_url = SVTIE._extract_url(webpage)\n        if svt_url:\n            return self.url_result(svt_url, 'SVT')\n\n        \n        mobj = re.search(r'<meta property=\"og:url\"[^>]*?content=\"(.*?bandcamp\\.com.*?)\"', webpage)\n        if mobj is not None:\n            burl = unescapeHTML(mobj.group(1))\n            \n            return self.url_result(burl)\n\n        \n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:cache\\.)?vevo\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        \n        mobj = re.search(\n            r'<(?:iframe[^>]+?src|param[^>]+?value)=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?viddler\\.com/(?:embed|player)/.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        \n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//graphics8\\.nytimes\\.com/bcvideo/[^/]+/iframe/embed\\.html.+?)\\1>',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        \n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//html5-player\\.libsyn\\.com/embed/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        \n        mobj = (re.search(r'player\\.ooyala\\.com/[^\"?]+[?\n                re.search(r'OO\\.Player\\.create\\([\\'\"].*?[\\'\"],\\s*[\\'\"](?P<ec>.{32})[\\'\"]', webpage) or\n                re.search(r'OO\\.Player\\.create\\.apply\\(\\s*OO\\.Player\\s*,\\s*op\\(\\s*\\[\\s*[\\'\"][^\\'\"]*[\\'\"]\\s*,\\s*[\\'\"](?P<ec>.{32})[\\'\"]', webpage) or\n                re.search(r'SBN\\.VideoLinkset\\.ooyala\\([\\'\"](?P<ec>.{32})[\\'\"]\\)', webpage) or\n                re.search(r'data-ooyala-video-id\\s*=\\s*[\\'\"](?P<ec>.{32})[\\'\"]', webpage))\n        if mobj is not None:\n            embed_token = self._search_regex(\n                r'embedToken[\\'\"]?\\s*:\\s*[\\'\"]([^\\'\"]+)',\n                webpage, 'ooyala embed token', default=None)\n            return OoyalaIE._build_url_result(smuggle_url(\n                mobj.group('ec'), {\n                    'domain': url,\n                    'embed_token': embed_token,\n                }))\n\n        \n        mobj = re.search(r'SBN\\.VideoLinkset\\.entryGroup\\((\\[.*?\\])', webpage)\n        if mobj is not None:\n            embeds = self._parse_json(mobj.group(1), video_id, fatal=False)\n            if embeds:\n                return self.playlist_from_matches(\n                    embeds, video_id, video_title,\n                    getter=lambda v: OoyalaIE._url_for_embed_code(smuggle_url(v['provider_video_id'], {'domain': url})), ie='Ooyala')\n\n        \n        mobj = re.search(r'<iframe .*?src=\"(http://www\\.aparat\\.com/video/[^\"]+)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group(1), 'Aparat')\n\n        \n        mobj = re.search(r'<iframe .*?src=\"(http://mpora\\.(?:com|de)/videos/[^\"]+)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group(1), 'Mpora')\n\n        \n        mobj = re.search(\n            r, webpage))\n        if not found:\n            \n            found = re.findall(\n                r\"cinerama\\.embedPlayer\\(\\s*\\'[^']+\\',\\s*'([^']+)'\", webpage)\n        if not found:\n            \n            \n            \n            \n            found = filter_video(re.findall(\n                r'<meta (?:property|name)=\"twitter:player:stream\" (?:content|value)=\"(.+?)\"', webpage))\n        if not found:\n            \n            \n            m_video_type = re.findall(r'<meta.*?property=\"og:video:type\".*?content=\"video/(.*?)\"', webpage)\n            \n            if m_video_type is not None:\n                found = filter_video(re.findall(r'<meta.*?property=\"og:video\".*?content=\"(.*?)\"', webpage))\n        if not found:\n            REDIRECT_REGEX = r'[0-9]{,2};\\s*(?:URL|url)=\\'?([^\\'\"]+)'\n            found = re.search(\n                r'(?i)<meta\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\s+)*http-equiv=\"refresh\")'\n                r'(?:[a-z-]+=\"[^\"]+\"\\s+)*?content=\"%s' % REDIRECT_REGEX,\n                webpage)\n            if not found:\n                \n                refresh_header = head_response.headers.get('Refresh')\n                if refresh_header:\n                    \n                    if sys.version_info < (3, 0) and isinstance(refresh_header, str):\n                        refresh_header = refresh_header.decode('iso-8859-1')\n                    found = re.search(REDIRECT_REGEX, refresh_header)\n            if found:\n                new_url = compat_urlparse.urljoin(url, unescapeHTML(found.group(1)))\n                if new_url != url:\n                    self.report_following_redirect(new_url)\n                    return {\n                        '_type': 'url',\n                        'url': new_url,\n                    }\n                else:\n                    found = None\n\n        if not found:\n            \n            \n            \n            embed_url = self._html_search_meta('twitter:player', webpage, default=None)\n            if embed_url and embed_url != url:\n                return self.url_result(embed_url)\n\n        if not found:\n            raise UnsupportedError(url)\n\n        entries = []\n        for video_url in orderedSet(found):\n            video_url = unescapeHTML(video_url)\n            video_url = video_url.replace('\\\\/', '/')\n            video_url = compat_urlparse.urljoin(url, video_url)\n            video_id = compat_urllib_parse_unquote(os.path.basename(video_url))\n\n            \n            if YoutubeIE.suitable(video_url):\n                entries.append(self.url_result(video_url, 'Youtube'))\n                continue\n\n            \n            video_id = os.path.splitext(video_id)[0]\n\n            entry_info_dict = {\n                'id': video_id,\n                'uploader': video_uploader,\n                'title': video_title,\n                'age_limit': age_limit,\n            }\n\n            if RtmpIE.suitable(video_url):\n                entry_info_dict.update({\n                    '_type': 'url_transparent',\n                    'ie_key': RtmpIE.ie_key(),\n                    'url': video_url,\n                })\n                entries.append(entry_info_dict)\n                continue\n\n            ext = determine_ext(video_url)\n            if ext == 'smil':\n                entry_info_dict['formats'] = self._extract_smil_formats(video_url, video_id)\n            elif ext == 'xspf':\n                return self.playlist_result(self._extract_xspf_playlist(video_url, video_id), video_id)\n            elif ext == 'm3u8':\n                entry_info_dict['formats'] = self._extract_m3u8_formats(video_url, video_id, ext='mp4')\n            elif ext == 'mpd':\n                entry_info_dict['formats'] = self._extract_mpd_formats(video_url, video_id)\n            elif ext == 'f4m':\n                entry_info_dict['formats'] = self._extract_f4m_formats(video_url, video_id)\n            elif re.search(r'(?i)\\.(?:ism|smil)/manifest', video_url) and video_url != url:\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                entry_info_dict = self.url_result(\n                    smuggle_url(video_url, {'to_generic': True}),\n                    GenericIE.ie_key())\n            else:\n                entry_info_dict['url'] = video_url\n\n            if entry_info_dict.get('formats'):\n                self._sort_formats(entry_info_dict['formats'])\n\n            entries.append(entry_info_dict)\n\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            for num, e in enumerate(entries, start=1):\n                \n                if e.get('title') is not None:\n                    e['title'] = '%s (%d)' % (e['title'], num)\n            return {\n                '_type': 'playlist',\n                'entries': entries,\n            }\n", "comments": "Report information extraction.\"\"\"\n        self._downloader.to_screen('[redirect] Following redirect to %s' % new_url)\n\n    def _extract_rss(self, url, video_id, doc):\n        playlist_title = doc.find('./channel/title').text\n        playlist_desc_el = doc.find('./channel/description')\n        playlist_desc = None if playlist_desc_el is None else playlist_desc_el.text\n\n        entries = []\n        for it in doc.findall('./channel/item'):\n            next_url = xpath_text(it, 'link', fatal=False)\n            if not next_url:\n                enclosure_nodes = it.findall('./enclosure')\n                for e in enclosure_nodes:\n                    next_url = e.attrib.get('url')\n                    if next_url:\n                        break\n\n            if not next_url:\n                continue\n\n            entries.append({\n                '_type': 'url_transparent',\n                'url': next_url,\n                'title': it.find('title').text,\n            })\n\n        return {\n            '_type': 'playlist',\n            'id': url,\n            'title': playlist_title,\n            'description': playlist_desc,\n            'entries': entries,\n        }\n\n    def _extract_camtasia(self, url, video_id, webpage):\n        \"\"\" Returns None if no camtasia video can be found. \n \n(?x)<(?:pagespeed_)?iframe[^>]+?src=([\"\\'])\n                    (?P<url>http://(?:(?:embed|www)\\.)?\n                        (?:novamov\\.com|\n                           nowvideo\\.(?:ch|sx|eu|at|ag|co)|\n                           videoweed\\.(?:es|com)|\n                           movshare\\.(?:net|sx|ag)|\n                           divxstage\\.(?:eu|net|ch|co|at|ag))\n                        /embed\\.php.+?)\\1''', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for embedded Facebook player\n        facebook_urls = FacebookIE._extract_urls(webpage)\n        if facebook_urls:\n            return self.playlist_from_matches(facebook_urls, video_id, video_title)\n\n        # Look for embedded VK player\n        mobj = re.search(r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://vk\\.com/video_ext\\.php.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'VK')\n\n        # Look for embedded Odnoklassniki player\n        mobj = re.search(r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://(?:odnoklassniki|ok)\\.ru/videoembed/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Odnoklassniki')\n\n        # Look for embedded ivi player\n        mobj = re.search(r'<embed[^>]+?src=([\"\\'])(?P<url>https?://(?:www\\.)?ivi\\.ru/video/player.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Ivi')\n\n        # Look for embedded Huffington Post player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://embed\\.live\\.huffingtonpost\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'HuffPost')\n\n        # Look for embed.ly\n        mobj = re.search(r'class=[\"\\']embedly-card[\"\\'][^>]href=[\"\\'](?P<url>[^\"\\']+)', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n        mobj = re.search(r'class=[\"\\']embedly-embed[\"\\'][^>]src=[\"\\'][^\"\\']*url=(?P<url>[^&]+)', webpage)\n        if mobj is not None:\n            return self.url_result(compat_urllib_parse_unquote(mobj.group('url')))\n\n        # Look for funnyordie embed\n        matches = re.findall(r'<iframe[^>]+?src=\"(https?://(?:www\\.)?funnyordie\\.com/embed/[^\"]+)\"', webpage)\n        if matches:\n            return self.playlist_from_matches(\n                matches, video_id, video_title, getter=unescapeHTML, ie='FunnyOrDie')\n\n        # Look for BBC iPlayer embed\n        matches = re.findall(r'setPlaylist\\(\"(https?://www\\.bbc\\.co\\.uk/iplayer/[^/]+/[\\da-z]{8})\"\\)', webpage)\n        if matches:\n            return self.playlist_from_matches(matches, video_id, video_title, ie='BBCCoUk')\n\n        # Look for embedded RUTV player\n        rutv_url = RUTVIE._extract_url(webpage)\n        if rutv_url:\n            return self.url_result(rutv_url, 'RUTV')\n\n        # Look for embedded TVC player\n        tvc_url = TVCIE._extract_url(webpage)\n        if tvc_url:\n            return self.url_result(tvc_url, 'TVC')\n\n        # Look for embedded SportBox player\n        sportbox_urls = SportBoxEmbedIE._extract_urls(webpage)\n        if sportbox_urls:\n            return self.playlist_from_matches(sportbox_urls, video_id, video_title, ie='SportBoxEmbed')\n\n        # Look for embedded XHamster player\n        xhamster_urls = XHamsterEmbedIE._extract_urls(webpage)\n        if xhamster_urls:\n            return self.playlist_from_matches(xhamster_urls, video_id, video_title, ie='XHamsterEmbed')\n\n        # Look for embedded TNAFlixNetwork player\n        tnaflix_urls = TNAFlixNetworkEmbedIE._extract_urls(webpage)\n        if tnaflix_urls:\n            return self.playlist_from_matches(tnaflix_urls, video_id, video_title, ie=TNAFlixNetworkEmbedIE.ie_key())\n\n        # Look for embedded PornHub player\n        pornhub_urls = PornHubIE._extract_urls(webpage)\n        if pornhub_urls:\n            return self.playlist_from_matches(pornhub_urls, video_id, video_title, ie=PornHubIE.ie_key())\n\n        # Look for embedded DrTuber player\n        drtuber_urls = DrTuberIE._extract_urls(webpage)\n        if drtuber_urls:\n            return self.playlist_from_matches(drtuber_urls, video_id, video_title, ie=DrTuberIE.ie_key())\n\n        # Look for embedded RedTube player\n        redtube_urls = RedTubeIE._extract_urls(webpage)\n        if redtube_urls:\n            return self.playlist_from_matches(redtube_urls, video_id, video_title, ie=RedTubeIE.ie_key())\n\n        # Look for embedded Tvigle player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//cloud\\.tvigle\\.ru/video/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Tvigle')\n\n        # Look for embedded TED player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://embed(?:-ssl)?\\.ted\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'TED')\n\n        # Look for embedded Ustream videos\n        ustream_url = UstreamIE._extract_url(webpage)\n        if ustream_url:\n            return self.url_result(ustream_url, UstreamIE.ie_key())\n\n        # Look for embedded arte.tv player\n        mobj = re.search(\n            r'<(?:script|iframe) [^>]*?src=\"(?P<url>http://www\\.arte\\.tv/(?:playerv2/embed|arte_vp/index)[^\"]+)\"',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'ArteTVEmbed')\n\n        # Look for embedded francetv player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?://)?embed\\.francetv\\.fr/\\?ue=.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for embedded smotri.com player\n        smotri_url = SmotriIE._extract_url(webpage)\n        if smotri_url:\n            return self.url_result(smotri_url, 'Smotri')\n\n        # Look for embedded Myvi.ru player\n        myvi_url = MyviIE._extract_url(webpage)\n        if myvi_url:\n            return self.url_result(myvi_url)\n\n        # Look for embedded soundcloud player\n        soundcloud_urls = SoundcloudIE._extract_urls(webpage)\n        if soundcloud_urls:\n            return self.playlist_from_matches(soundcloud_urls, video_id, video_title, getter=unescapeHTML, ie=SoundcloudIE.ie_key())\n\n        # Look for tunein player\n        tunein_urls = TuneInBaseIE._extract_urls(webpage)\n        if tunein_urls:\n            return self.playlist_from_matches(tunein_urls, video_id, video_title)\n\n        # Look for embedded mtvservices player\n        mtvservices_url = MTVServicesEmbeddedIE._extract_url(webpage)\n        if mtvservices_url:\n            return self.url_result(mtvservices_url, ie='MTVServicesEmbedded')\n\n        # Look for embedded yahoo player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://(?:screen|movies)\\.yahoo\\.com/.+?\\.html\\?format=embed)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Yahoo')\n\n        # Look for embedded sbs.com.au player\n        mobj = re.search(\n            r'''(?x)\n            (?:\n                <meta\\s+property=\"og:video\"\\s+content=|\n                <iframe[^>]+?src=\n            )\n            ([\"\\'])(?P<url>https?://(?:www\\.)?sbs\\.com\\.au/ondemand/video/.+?)\\1''',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'SBS')\n\n        # Look for embedded Cinchcast player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://player\\.cinchcast\\.com/.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Cinchcast')\n\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://m(?:lb)?\\.mlb\\.com/shared/video/embed/embed\\.html\\?.+?)\\1',\n            webpage)\n        if not mobj:\n            mobj = re.search(\n                r'data-video-link=[\"\\'](?P<url>http://m.mlb.com/video/[^\"\\']+)',\n                webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'MLB')\n\n        mobj = re.search(\n            r'<(?:iframe|script)[^>]+?src=([\"\\'])(?P<url>%s)\\1' % CondeNastIE.EMBED_URL,\n            webpage)\n        if mobj is not None:\n            return self.url_result(self._proto_relative_url(mobj.group('url'), scheme='http:'), 'CondeNast')\n\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>https?://(?:new\\.)?livestream\\.com/[^\"]+/player[^\"]+)\"',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Livestream')\n\n        # Look for Zapiks embed\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>https?://(?:www\\.)?zapiks\\.fr/index\\.php\\?.+?)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Zapiks')\n\n        # Look for Kaltura embeds\n        kaltura_url = KalturaIE._extract_url(webpage)\n        if kaltura_url:\n            return self.url_result(smuggle_url(kaltura_url, {'source_url': url}), KalturaIE.ie_key())\n\n        # Look for EaglePlatform embeds\n        eagleplatform_url = EaglePlatformIE._extract_url(webpage)\n        if eagleplatform_url:\n            return self.url_result(smuggle_url(eagleplatform_url, {'referrer': url}), EaglePlatformIE.ie_key())\n\n        # Look for ClipYou (uses EaglePlatform) embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=\"https?://(?P<host>media\\.clipyou\\.ru)/index/player\\?.*\\brecord_id=(?P<id>\\d+).*\"', webpage)\n        if mobj is not None:\n            return self.url_result('eagleplatform:%(host)s:%(id)s' % mobj.groupdict(), 'EaglePlatform')\n\n        # Look for Pladform embeds\n        pladform_url = PladformIE._extract_url(webpage)\n        if pladform_url:\n            return self.url_result(pladform_url)\n\n        # Look for Videomore embeds\n        videomore_url = VideomoreIE._extract_url(webpage)\n        if videomore_url:\n            return self.url_result(videomore_url)\n\n        # Look for Webcaster embeds\n        webcaster_url = WebcasterFeedIE._extract_url(self, webpage)\n        if webcaster_url:\n            return self.url_result(webcaster_url, ie=WebcasterFeedIE.ie_key())\n\n        # Look for Playwire embeds\n        mobj = re.search(\n            r'<script[^>]+data-config=([\"\\'])(?P<url>(?:https?:)?//config\\.playwire\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for 5min embeds\n        mobj = re.search(\n            r'<meta[^>]+property=\"og:video\"[^>]+content=\"https?://embed\\.5min\\.com/(?P<id>[0-9]+)/?', webpage)\n        if mobj is not None:\n            return self.url_result('5min:%s' % mobj.group('id'), 'FiveMin')\n\n        # Look for Crooks and Liars embeds\n        mobj = re.search(\n            r'<(?:iframe[^>]+src|param[^>]+value)=([\"\\'])(?P<url>(?:https?:)?//embed\\.crooksandliars\\.com/(?:embed|v)/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for NBC Sports VPlayer embeds\n        nbc_sports_url = NBCSportsVPlayerIE._extract_url(webpage)\n        if nbc_sports_url:\n            return self.url_result(nbc_sports_url, 'NBCSportsVPlayer')\n\n        # Look for NBC News embeds\n        nbc_news_embed_url = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//www\\.nbcnews\\.com/widget/video-embed/[^\"\\']+)\\1', webpage)\n        if nbc_news_embed_url:\n            return self.url_result(nbc_news_embed_url.group('url'), 'NBCNews')\n\n        # Look for Google Drive embeds\n        google_drive_url = GoogleDriveIE._extract_url(webpage)\n        if google_drive_url:\n            return self.url_result(google_drive_url, 'GoogleDrive')\n\n        # Look for UDN embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?:https?:)?(?P<url>%s)\"' % UDNEmbedIE._PROTOCOL_RELATIVE_VALID_URL, webpage)\n        if mobj is not None:\n            return self.url_result(\n                compat_urlparse.urljoin(url, mobj.group('url')), 'UDNEmbed')\n\n        # Look for Senate ISVP iframe\n        senate_isvp_url = SenateISVPIE._search_iframe_url(webpage)\n        if senate_isvp_url:\n            return self.url_result(senate_isvp_url, 'SenateISVP')\n\n        # Look for OnionStudios embeds\n        onionstudios_url = OnionStudiosIE._extract_url(webpage)\n        if onionstudios_url:\n            return self.url_result(onionstudios_url)\n\n        # Look for ViewLift embeds\n        viewlift_url = ViewLiftEmbedIE._extract_url(webpage)\n        if viewlift_url:\n            return self.url_result(viewlift_url)\n\n        # Look for JWPlatform embeds\n        jwplatform_urls = JWPlatformIE._extract_urls(webpage)\n        if jwplatform_urls:\n            return self.playlist_from_matches(jwplatform_urls, video_id, video_title, ie=JWPlatformIE.ie_key())\n\n        # Look for Digiteka embeds\n        digiteka_url = DigitekaIE._extract_url(webpage)\n        if digiteka_url:\n            return self.url_result(self._proto_relative_url(digiteka_url), DigitekaIE.ie_key())\n\n        # Look for Arkena embeds\n        arkena_url = ArkenaIE._extract_url(webpage)\n        if arkena_url:\n            return self.url_result(arkena_url, ArkenaIE.ie_key())\n\n        # Look for Piksel embeds\n        piksel_url = PikselIE._extract_url(webpage)\n        if piksel_url:\n            return self.url_result(piksel_url, PikselIE.ie_key())\n\n        # Look for Limelight embeds\n        limelight_urls = LimelightBaseIE._extract_urls(webpage, url)\n        if limelight_urls:\n            return self.playlist_result(\n                limelight_urls, video_id, video_title, video_description)\n\n        # Look for Anvato embeds\n        anvato_urls = AnvatoIE._extract_urls(self, webpage, video_id)\n        if anvato_urls:\n            return self.playlist_result(\n                anvato_urls, video_id, video_title, video_description)\n\n        # Look for AdobeTVVideo embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=[\\'\"]((?:https?:)?//video\\.tv\\.adobe\\.com/v/\\d+[^\"]+)[\\'\"]',\n            webpage)\n        if mobj is not None:\n            return self.url_result(\n                self._proto_relative_url(unescapeHTML(mobj.group(1))),\n                'AdobeTVVideo')\n\n        # Look for Vine embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=[\\'\"]((?:https?:)?//(?:www\\.)?vine\\.co/v/[^/]+/embed/(?:simple|postcard))',\n            webpage)\n        if mobj is not None:\n            return self.url_result(\n                self._proto_relative_url(unescapeHTML(mobj.group(1))), 'Vine')\n\n        # Look for VODPlatform embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vod-platform\\.net/[eE]mbed/.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(\n                self._proto_relative_url(unescapeHTML(mobj.group('url'))), 'VODPlatform')\n\n        # Look for Mangomolo embeds\n        mobj = re.search(\n            r'''(?x)<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?admin\\.mangomolo\\.com/analytics/index\\.php/customers/embed/\n                (?:\n                    video\\?.*?\\bid=(?P<video_id>\\d+)|\n                    index\\?.*?\\bchannelid=(?P<channel_id>(?:[A-Za-z0-9+/=]|%2B|%2F|%3D)+)\n                ).+?)\\1''', webpage)\n        if mobj is not None:\n            info = {\n                '_type': 'url_transparent',\n                'url': self._proto_relative_url(unescapeHTML(mobj.group('url'))),\n                'title': video_title,\n                'description': video_description,\n                'thumbnail': video_thumbnail,\n                'uploader': video_uploader,\n            }\n            video_id = mobj.group('video_id')\n            if video_id:\n                info.update({\n                    'ie_key': 'MangomoloVideo',\n                    'id': video_id,\n                })\n            else:\n                info.update({\n                    'ie_key': 'MangomoloLive',\n                    'id': mobj.group('channel_id'),\n                })\n            return info\n\n        # Look for Instagram embeds\n        instagram_embed_url = InstagramIE._extract_embed_url(webpage)\n        if instagram_embed_url is not None:\n            return self.url_result(\n                self._proto_relative_url(instagram_embed_url), InstagramIE.ie_key())\n\n        # Look for LiveLeak embeds\n        liveleak_urls = LiveLeakIE._extract_urls(webpage)\n        if liveleak_urls:\n            return self.playlist_from_matches(liveleak_urls, video_id, video_title)\n\n        # Look for 3Q SDN embeds\n        threeqsdn_url = ThreeQSDNIE._extract_url(webpage)\n        if threeqsdn_url:\n            return {\n                '_type': 'url_transparent',\n                'ie_key': ThreeQSDNIE.ie_key(),\n                'url': self._proto_relative_url(threeqsdn_url),\n                'title': video_title,\n                'description': video_description,\n                'thumbnail': video_thumbnail,\n                'uploader': video_uploader,\n            }\n\n        # Look for VBOX7 embeds\n        vbox7_url = Vbox7IE._extract_url(webpage)\n        if vbox7_url:\n            return self.url_result(vbox7_url, Vbox7IE.ie_key())\n\n        # Look for DBTV embeds\n        dbtv_urls = DBTVIE._extract_urls(webpage)\n        if dbtv_urls:\n            return self.playlist_from_matches(dbtv_urls, video_id, video_title, ie=DBTVIE.ie_key())\n\n        # Look for Videa embeds\n        videa_urls = VideaIE._extract_urls(webpage)\n        if videa_urls:\n            return self.playlist_from_matches(videa_urls, video_id, video_title, ie=VideaIE.ie_key())\n\n        # Look for 20 minuten embeds\n        twentymin_urls = TwentyMinutenIE._extract_urls(webpage)\n        if twentymin_urls:\n            return self.playlist_from_matches(\n                twentymin_urls, video_id, video_title, ie=TwentyMinutenIE.ie_key())\n\n        # Look for Openload embeds\n        openload_urls = OpenloadIE._extract_urls(webpage)\n        if openload_urls:\n            return self.playlist_from_matches(\n                openload_urls, video_id, video_title, ie=OpenloadIE.ie_key())\n\n        # Look for VideoPress embeds\n        videopress_urls = VideoPressIE._extract_urls(webpage)\n        if videopress_urls:\n            return self.playlist_from_matches(\n                videopress_urls, video_id, video_title, ie=VideoPressIE.ie_key())\n\n        # Look for Rutube embeds\n        rutube_urls = RutubeIE._extract_urls(webpage)\n        if rutube_urls:\n            return self.playlist_from_matches(\n                rutube_urls, video_id, video_title, ie=RutubeIE.ie_key())\n\n        # Look for WashingtonPost embeds\n        wapo_urls = WashingtonPostIE._extract_urls(webpage)\n        if wapo_urls:\n            return self.playlist_from_matches(\n                wapo_urls, video_id, video_title, ie=WashingtonPostIE.ie_key())\n\n        # Look for Mediaset embeds\n        mediaset_urls = MediasetIE._extract_urls(webpage)\n        if mediaset_urls:\n            return self.playlist_from_matches(\n                mediaset_urls, video_id, video_title, ie=MediasetIE.ie_key())\n\n        # Look for JOJ.sk embeds\n        joj_urls = JojIE._extract_urls(webpage)\n        if joj_urls:\n            return self.playlist_from_matches(\n                joj_urls, video_id, video_title, ie=JojIE.ie_key())\n\n        # Look for megaphone.fm embeds\n        mpfn_urls = MegaphoneIE._extract_urls(webpage)\n        if mpfn_urls:\n            return self.playlist_from_matches(\n                mpfn_urls, video_id, video_title, ie=MegaphoneIE.ie_key())\n\n        # Look for vzaar embeds\n        vzaar_urls = VzaarIE._extract_urls(webpage)\n        if vzaar_urls:\n            return self.playlist_from_matches(\n                vzaar_urls, video_id, video_title, ie=VzaarIE.ie_key())\n\n        channel9_urls = Channel9IE._extract_urls(webpage)\n        if channel9_urls:\n            return self.playlist_from_matches(\n                channel9_urls, video_id, video_title, ie=Channel9IE.ie_key())\n\n        vshare_urls = VShareIE._extract_urls(webpage)\n        if vshare_urls:\n            return self.playlist_from_matches(\n                vshare_urls, video_id, video_title, ie=VShareIE.ie_key())\n\n        # Look for Mediasite embeds\n        mediasite_urls = MediasiteIE._extract_urls(webpage)\n        if mediasite_urls:\n            entries = [\n                self.url_result(smuggle_url(\n                    compat_urlparse.urljoin(url, mediasite_url),\n                    {'UrlReferrer': url}), ie=MediasiteIE.ie_key())\n                for mediasite_url in mediasite_urls]\n            return self.playlist_result(entries, video_id, video_title)\n\n        springboardplatform_urls = SpringboardPlatformIE._extract_urls(webpage)\n        if springboardplatform_urls:\n            return self.playlist_from_matches(\n                springboardplatform_urls, video_id, video_title,\n                ie=SpringboardPlatformIE.ie_key())\n\n        yapfiles_urls = YapFilesIE._extract_urls(webpage)\n        if yapfiles_urls:\n            return self.playlist_from_matches(\n                yapfiles_urls, video_id, video_title, ie=YapFilesIE.ie_key())\n\n        vice_urls = ViceIE._extract_urls(webpage)\n        if vice_urls:\n            return self.playlist_from_matches(\n                vice_urls, video_id, video_title, ie=ViceIE.ie_key())\n\n        def merge_dicts(dict1, dict2):\n            merged = {}\n            for k, v in dict1.items():\n                if v is not None:\n                    merged[k] = v\n            for k, v in dict2.items():\n                if v is None:\n                    continue\n                if (k not in merged or\n                        (isinstance(v, compat_str) and v and\n                            isinstance(merged[k], compat_str) and\n                            not merged[k])):\n                    merged[k] = v\n            return merged\n\n        # Look for HTML5 media\n        entries = self._parse_html5_media_entries(url, webpage, video_id, m3u8_id='hls')\n        if entries:\n            if len(entries) == 1:\n                entries[0].update({\n                    'id': video_id,\n                    'title': video_title,\n                })\n            else:\n                for num, entry in enumerate(entries, start=1):\n                    entry.update({\n                        'id': '%s-%s' % (video_id, num),\n                        'title': '%s (%d)' % (video_title, num),\n                    })\n            for entry in entries:\n                self._sort_formats(entry['formats'])\n            return self.playlist_result(entries, video_id, video_title)\n\n        jwplayer_data = self._find_jwplayer_data(\n            webpage, video_id, transform_source=js_to_json)\n        if jwplayer_data:\n            info = self._parse_jwplayer_data(\n                jwplayer_data, video_id, require_title=False, base_url=url)\n            return merge_dicts(info, info_dict)\n\n        # Video.js embed\n        mobj = re.search(\n            r'(?s)\\bvideojs\\s*\\(.+?\\.src\\s*\\(\\s*((?:\\[.+?\\]|{.+?}))\\s*\\)\\s*;',\n            webpage)\n        if mobj is not None:\n            sources = self._parse_json(\n                mobj.group(1), video_id, transform_source=js_to_json,\n                fatal=False) or []\n            if not isinstance(sources, list):\n                sources = [sources]\n            formats = []\n            for source in sources:\n                src = source.get('src')\n                if not src or not isinstance(src, compat_str):\n                    continue\n                src = compat_urlparse.urljoin(url, src)\n                src_type = source.get('type')\n                if isinstance(src_type, compat_str):\n                    src_type = src_type.lower()\n                ext = determine_ext(src).lower()\n                if src_type == 'video/youtube':\n                    return self.url_result(src, YoutubeIE.ie_key())\n                if src_type == 'application/dash+xml' or ext == 'mpd':\n                    formats.extend(self._extract_mpd_formats(\n                        src, video_id, mpd_id='dash', fatal=False))\n                elif src_type == 'application/x-mpegurl' or ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        src, video_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id='hls', fatal=False))\n                else:\n                    formats.append({\n                        'url': src,\n                        'ext': (mimetype2ext(src_type) or\n                                ext if ext in KNOWN_EXTENSIONS else 'mp4'),\n                    })\n            if formats:\n                self._sort_formats(formats)\n                info_dict['formats'] = formats\n                return info_dict\n\n        # Looking for http://schema.org/VideoObject\n        json_ld = self._search_json_ld(\n            webpage, video_id, default={}, expected_type='VideoObject')\n        if json_ld.get('url'):\n            return merge_dicts(json_ld, info_dict)\n\n        def check_video(vurl):\n            if YoutubeIE.suitable(vurl):\n                return True\n            if RtmpIE.suitable(vurl):\n                return True\n            vpath = compat_urlparse.urlparse(vurl).path\n            vext = determine_ext(vpath)\n            return '.' in vpath and vext not in ('swf', 'png', 'jpg', 'srt', 'sbv', 'sub', 'vtt', 'ttml', 'js', 'xml')\n\n        def filter_video(urls):\n            return list(filter(check_video, urls))\n\n        # Start with something easy: JW Player in SWFObject\n        found = filter_video(re.findall(r'flashvars: [\\'\"](?:.*&)?file=(http[^\\'\"&]*)', webpage))\n        if not found:\n            # Look for gorilla-vid style embedding\n            found = filter_video(re.findall(r'''(?sx)\n                (?:\n                    jw_plugins|\n                    JWPlayerOptions|\n                    jwplayer\\s*\\(\\s*[\"'][^'\"]+[\"']\\s*\\)\\s*\\.setup\n                )\n                .*?\n                ['\"]?file['\"]?\\s*:\\s*[\"\\'](.*?)[\"\\']''', webpage))\n        if not found:\n            # Broaden the search a little bit\n            found = filter_video(re.findall(r'[^A-Za-z0-9]?(?:file|source)=(http[^\\'\"&]*)', webpage))\n        if not found:\n            # Broaden the findall a little bit: JWPlayer JS loader\n            found = filter_video(re.findall(\n                r'[^A-Za-z0-9]?(?:file|video_url)[\"\\']?:\\s*[\"\\'](http(?![^\\'\"]+\\.[0-9]+[\\'\"])[^\\'\"]+)[\"\\']', webpage))\n        if not found:\n            # Flow player\n            found = filter_video(re.findall(r'''(?xs)\n                flowplayer\\(\"[^\"]+\",\\s*\n                    \\{[^}]+?\\}\\s*,\n                    \\s*\\{[^}]+? [\"']?clip[\"']?\\s*:\\s*\\{\\s*\n                        [\"']?url[\"']?\\s*:\\s*[\"']([^\"']+)[\"']\n            \n \n# coding: utf-8\n# Direct link to a video\n# Direct link to media delivered compressed (until Accept-Encoding is *)\n# Direct download with broken HEAD\n# infinite live stream\n# Direct link with incorrect MIME type\n# RSS feed\n# RSS feed with enclosure\n# SMIL from http://videolectures.net/promogram_igor_mekjavic_eng\n# SMIL from http://www1.wdr.de/mediathek/video/livestream/index.html\n# SMIL from https://www.restudy.dk/video/play/id/1637\n# SMIL from http://adventure.howstuffworks.com/5266-cool-jobs-iditarod-musher-video.htm\n# SMIL from http://new.livestream.com/CoheedandCambria/WebsterHall/videos/4719370\n# XSPF playlist from http://www.telegraaf.nl/tv/nieuws/binnenland/24353229/__Tikibad_ontruimd_wegens_brand__.html\n# MPD from http://dash-mse-test.appspot.com/media.html\n# m3u8 served with Content-Type: audio/x-mpegURL; charset=utf-8\n# m3u8 downloads\n# m3u8 served with Content-Type: text/plain\n# m3u8 downloads\n# google redirect\n# redirect in Refresh HTTP header\n# bandcamp page with custom domain\n# embedded brightcove video\n# it also tests brightcove videos that need to set the 'Referer'\n# in the http requests\n# embedded with itemprop embedURL and video id spelled as `idVideo`\n# https://github.com/rg3/youtube-dl/issues/2253\n# https://github.com/rg3/youtube-dl/issues/3541\n# m3u8 download\n# Brightcove video in <iframe>\n# Brightcove with alternative playerID key\n# Brightcove with UUID in videoPlayer\n# m3u8 download\n# Brightcove:new type [2].\n# Alternative brightcove <video> attributes\n# Brightcove with UUID in videoPlayer\n# m3u8 download\n# ooyala video\n# that's what we get\n# ooyala video embedded with http://player.ooyala.com/iframe.js\n# ooyala video embedded with http://player.ooyala.com/static/v4/production/latest/core.min.js\n# embed.ly video\n# No need to test YoutubeIE here\n# funnyordie embed\n# HEAD requests lead to endless 301, while GET is OK\n# RUTV embed\n# m3u8 download\n# TVC embed\n# SportBox embed\n# m3u8 download\n# Myvi.ru embed\n# XHamster embed\n# This forum does not allow <iframe> syntaxes anymore\n# Now HTML tags are displayed as-is\n# Embedded TED video\n# nowvideo embed hidden behind percent encoding\n# arte embed\n# francetv embed\n# m3u8 downloads\n# Cond\u00e9 Nast embed\n# Dailymotion embed\n# DailyMail embed\n# YouTube embed\n# MTVSercices embed\n# YouTube embed via <data-embed-url=\"\">\n# YouTube <object> embed\n# Camtasia studio\n# Flowplayer\n# Multiple brightcove videos\n# https://github.com/rg3/youtube-dl/issues/2283\n# MLB embed\n# Wistia embed\n#lesson',\n# Wistia standard embed (async)\n# Soundcloud embed\n# Soundcloud multiple embeds\n# TuneIn station embed\n# Live stream\n# Livestream embed\n#CometLanding webcast HL 10',\n# Another Livestream embed, without 'new.' in URL\n# Live stream\n# LazyYT\n# Cinchcast embed\n# Cinerama player\n# embedded viddler video\n# Libsyn embed\n# jwplayer YouTube\n# jwplayer rtmp\n# Complex jwplayer\n# JWPlayer config passed as variable\n# JWPlatform iframe\n# Video.js embed, multiple formats\n# Video.js embed, single format\n# rtl.nl embed\n# Zapiks embed\n# Kaltura embed (different embed code)\n# Kaltura embed with single quotes\n# Kaltura embedded via quoted entry_id\n# Kaltura embedded, some fileExt broken (#11480)\n# Kaltura iframe embed\n# EaglePlatform embed (generic URL)\n# Not checking MD5 as sometimes the direct HTTP link results in 404 and HLS is used\n# referrer protected EaglePlatform embed\n# ClipYou (EaglePlatform) embed (custom URL)\n# Not checking MD5 as sometimes the direct HTTP link results in 404 and HLS is used\n# Pladform embed\n# Playwire embed\n# 5min embed\n# m3u8 download\n# SVT embed\n# Crooks and Liars embed\n# Crooks and Liars external embed\n# NBC Sports vplayer embed\n# NBC News embed\n# UDN embed\n# m3u8 download\n# Ooyala embed\n# m3u8 downloads\n# Brightcove URL in single quotes\n# OnionStudios embed\n# SnagFilms embed\n#whilewewatch',\n# AdobeTVVideo embed\n# BrightcoveInPageEmbed embed\n# Brightcove embed, with no valid 'renditions' but valid 'IOSRenditions'\n# This video can't be played in browsers if Flash disabled and UA set to iPhone, which is actually a false alarm\n# m3u8 downloads\n# Brightcove embed with whitespace around attribute names\n# Another form of arte.tv embed\n# LiveLeak embed\n# Another LiveLeak embed pattern (#13336)\n# Duplicated embedded video URLs\n# twitter:player:stream embed\n# m3u8 downloads\n# twitter:player embed\n# Facebook <iframe> embed\n#599637780109885',\n# Facebook <iframe> embed, plugin video\n# Facebook API embed\n#10153467542406923',\n# Wordpress \"YouTube Video Importer\" plugin\n# video stored on custom kaltura server\n# Non-standard Vimeo embed\n# generic vimeo embed that requires original URL passed as Referer\n# DBTV embeds\n# Videa embeds\n# 20 minuten embed\n# VideoPress embed\n# Rutube embed\n# ThePlatform embedded with whitespaces in URLs\n# Senate ISVP iframe https\n# Limelight embeds (1 channel embed + 4 media embeds)\n# Limelight embed (LimelightPlayerUtil.embed)\n# WashingtonPost embed\n# Mediaset embed\n# JOJ.sk embeds\n# AMP embed (see https://www.ampproject.org/docs/reference/components/amp-video)\n# vzaar embed\n# multiple HTML5 videos on one page\n# vshare embed\n# {\n#     # TODO: find another test\n#     # http://schema.org/VideoObject\n#     'url': 'https://flipagram.com/f/nyvTSJMKId',\n#     'md5': '888dcf08b7ea671381f00fab74692755',\n#     'info_dict': {\n#         'id': 'nyvTSJMKId',\n#         'ext': 'mp4',\n#         'title': 'Flipagram by sjuria101 featuring Midnight Memories by One Direction',\n#         'description': '#love for cats.',\n#         'timestamp': 1461244995,\n#         'upload_date': '20160421',\n#     },\n#     'params': {\n#         'force_generic_extractor': True,\n#     },\n# }\n# Check for redirect\n# Check for direct link to a video\n# Some webservers may serve compressed content of rather big size (e.g. gzipped flac)\n# making it impossible to download only chunk of the file (yet we need only 512kB to\n# test whether it's HTML or not). According to youtube-dl default Accept-Encoding\n# that will always result in downloading the whole file that is not desirable.\n# Therefore for extraction pass we have to override Accept-Encoding to any in order\n# to accept raw bytes and being able to download only a chunk.\n# It may probably better to solve this by checking Content-Type for application/octet-stream\n# after HEAD request finishes, but not sure if we can rely on this.\n# Is it an M3U playlist?\n#EXTM3U'):\n# Maybe it's a direct link to a video?\n# Be careful not to download the whole thing!\n# Is it an RSS feed, a SMIL file, an XSPF playlist or a MPD manifest?\n# Is it a Camtasia project?\n# Sometimes embedded video player is hidden behind percent encoding\n# (e.g. https://github.com/rg3/youtube-dl/issues/2448)\n# Unescaping the whole page allows to handle those cases in a generic way\n# it's tempting to parse this further, but you would\n# have to take into account all the variations like\n#   Video Title - Site Name\n#   Site Name | Video Title\n#   Video Title - Tagline | Site Name\n# and so on and so forth; it's just not practical\n# Try to detect age limit automatically\n# And then there are the jokers who advertise that they use RTA,\n# but actually don't.\n# video uploader is domain name\n# Look for Brightcove Legacy Studio embeds\n# Look for Brightcove New Studio embeds\n# Look for Nexx embeds\n# Look for Nexx iFrame embeds\n# Look for ThePlatform embeds\n# Look for Vessel embeds\n# Look for embedded rtl.nl player\n# Look for YouTube embeds\n# Look for embedded Dailymotion playlist player (#3822)\n# Look for DailyMail embeds\n# Look for embedded Wistia player\n# Look for SVT player\n# Look for Bandcamp pages with custom domain\n# Don't set the extractor because it can be a track url or an album\n# Look for embedded Vevo player\n# Look for embedded Viddler player\n# Look for NYTimes player\n# Look for Libsyn player\n# Look for Ooyala videos\n#][^\"]*?(?:embedCode|ec)=(?P<ec>[^\"&]+)', webpage) or\n# Look for multiple Ooyala embeds on SBN network websites\n# Look for Aparat videos\n# Look for MPORA videos\n# Look for embedded NovaMov-based player\n# Cinerama player\n# Try to find twitter cards info\n# twitter:player:stream should be checked before twitter:player since\n# it is expected to contain a raw stream (see\n# https://dev.twitter.com/cards/types/player#On_twitter.com_via_desktop_browser)\n# We look for Open Graph info:\n# We have to match any number spaces between elements, some sites try to align them (eg.: statigr.am)\n# We only look in og:video if the MIME type is a video, don't try if it's a Flash player:\n# Look also in Refresh HTTP header\n# In python 2 response HTTP headers are bytestrings\n# twitter:player is a https URL to iframe player that may or may not\n# be supported by youtube-dl thus this is checked the very last (see\n# https://dev.twitter.com/cards/types/player#On_twitter.com_via_desktop_browser)\n# Sometimes, jwplayer extraction will result in a YouTube URL\n# here's a fun little line of code for you:\n# Just matching .ism/manifest is not enough to be reliably sure\n# whether it's actually an ISM manifest or some other streaming\n# manifest since there are various streaming URL formats\n# possible (see [1]) as well as some other shenanigans like\n# .smil/manifest URLs that actually serve an ISM (see [2]) and\n# so on.\n# Thus the most reasonable way to solve this is to delegate\n# to generic extractor in order to look into the contents of\n# the manifest itself.\n# 1. https://azure.microsoft.com/en-us/documentation/articles/media-services-deliver-content-overview/#streaming-url-formats\n# 2. https://svs.itworkscdn.net/lbcivod/smil:itwfcdn/lbci/170976.smil/Manifest\n# 'url' results don't have a title\n", "content": "# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nimport os\nimport re\nimport sys\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..compat import (\n    compat_etree_fromstring,\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse,\n    compat_xml_parse_error,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    HEADRequest,\n    is_html,\n    js_to_json,\n    KNOWN_EXTENSIONS,\n    mimetype2ext,\n    orderedSet,\n    sanitized_Request,\n    smuggle_url,\n    unescapeHTML,\n    unified_strdate,\n    unsmuggle_url,\n    UnsupportedError,\n    xpath_text,\n)\nfrom .commonprotocols import RtmpIE\nfrom .brightcove import (\n    BrightcoveLegacyIE,\n    BrightcoveNewIE,\n)\nfrom .nexx import (\n    NexxIE,\n    NexxEmbedIE,\n)\nfrom .nbc import NBCSportsVPlayerIE\nfrom .ooyala import OoyalaIE\nfrom .rutv import RUTVIE\nfrom .tvc import TVCIE\nfrom .sportbox import SportBoxEmbedIE\nfrom .smotri import SmotriIE\nfrom .myvi import MyviIE\nfrom .condenast import CondeNastIE\nfrom .udn import UDNEmbedIE\nfrom .senateisvp import SenateISVPIE\nfrom .svt import SVTIE\nfrom .pornhub import PornHubIE\nfrom .xhamster import XHamsterEmbedIE\nfrom .tnaflix import TNAFlixNetworkEmbedIE\nfrom .drtuber import DrTuberIE\nfrom .redtube import RedTubeIE\nfrom .vimeo import VimeoIE\nfrom .dailymotion import DailymotionIE\nfrom .dailymail import DailyMailIE\nfrom .onionstudios import OnionStudiosIE\nfrom .viewlift import ViewLiftEmbedIE\nfrom .mtv import MTVServicesEmbeddedIE\nfrom .pladform import PladformIE\nfrom .videomore import VideomoreIE\nfrom .webcaster import WebcasterFeedIE\nfrom .googledrive import GoogleDriveIE\nfrom .jwplatform import JWPlatformIE\nfrom .digiteka import DigitekaIE\nfrom .arkena import ArkenaIE\nfrom .instagram import InstagramIE\nfrom .liveleak import LiveLeakIE\nfrom .threeqsdn import ThreeQSDNIE\nfrom .theplatform import ThePlatformIE\nfrom .vessel import VesselIE\nfrom .kaltura import KalturaIE\nfrom .eagleplatform import EaglePlatformIE\nfrom .facebook import FacebookIE\nfrom .soundcloud import SoundcloudIE\nfrom .tunein import TuneInBaseIE\nfrom .vbox7 import Vbox7IE\nfrom .dbtv import DBTVIE\nfrom .piksel import PikselIE\nfrom .videa import VideaIE\nfrom .twentymin import TwentyMinutenIE\nfrom .ustream import UstreamIE\nfrom .openload import OpenloadIE\nfrom .videopress import VideoPressIE\nfrom .rutube import RutubeIE\nfrom .limelight import LimelightBaseIE\nfrom .anvato import AnvatoIE\nfrom .washingtonpost import WashingtonPostIE\nfrom .wistia import WistiaIE\nfrom .mediaset import MediasetIE\nfrom .joj import JojIE\nfrom .megaphone import MegaphoneIE\nfrom .vzaar import VzaarIE\nfrom .channel9 import Channel9IE\nfrom .vshare import VShareIE\nfrom .mediasite import MediasiteIE\nfrom .springboardplatform import SpringboardPlatformIE\nfrom .yapfiles import YapFilesIE\nfrom .vice import ViceIE\n\n\nclass GenericIE(InfoExtractor):\n    IE_DESC = 'Generic downloader that works on some sites'\n    _VALID_URL = r'.*'\n    IE_NAME = 'generic'\n    _TESTS = [\n        # Direct link to a video\n        {\n            'url': 'http://media.w3.org/2010/05/sintel/trailer.mp4',\n            'md5': '67d406c2bcb6af27fa886f31aa934bbe',\n            'info_dict': {\n                'id': 'trailer',\n                'ext': 'mp4',\n                'title': 'trailer',\n                'upload_date': '20100513',\n            }\n        },\n        # Direct link to media delivered compressed (until Accept-Encoding is *)\n        {\n            'url': 'http://calimero.tk/muzik/FictionJunction-Parallel_Hearts.flac',\n            'md5': '128c42e68b13950268b648275386fc74',\n            'info_dict': {\n                'id': 'FictionJunction-Parallel_Hearts',\n                'ext': 'flac',\n                'title': 'FictionJunction-Parallel_Hearts',\n                'upload_date': '20140522',\n            },\n            'expected_warnings': [\n                'URL could be a direct video link, returning it as such.'\n            ],\n            'skip': 'URL invalid',\n        },\n        # Direct download with broken HEAD\n        {\n            'url': 'http://ai-radio.org:8000/radio.opus',\n            'info_dict': {\n                'id': 'radio',\n                'ext': 'opus',\n                'title': 'radio',\n            },\n            'params': {\n                'skip_download': True,  # infinite live stream\n            },\n            'expected_warnings': [\n                r'501.*Not Implemented',\n                r'400.*Bad Request',\n            ],\n        },\n        # Direct link with incorrect MIME type\n        {\n            'url': 'http://ftp.nluug.nl/video/nluug/2014-11-20_nj14/zaal-2/5_Lennart_Poettering_-_Systemd.webm',\n            'md5': '4ccbebe5f36706d85221f204d7eb5913',\n            'info_dict': {\n                'url': 'http://ftp.nluug.nl/video/nluug/2014-11-20_nj14/zaal-2/5_Lennart_Poettering_-_Systemd.webm',\n                'id': '5_Lennart_Poettering_-_Systemd',\n                'ext': 'webm',\n                'title': '5_Lennart_Poettering_-_Systemd',\n                'upload_date': '20141120',\n            },\n            'expected_warnings': [\n                'URL could be a direct video link, returning it as such.'\n            ]\n        },\n        # RSS feed\n        {\n            'url': 'http://phihag.de/2014/youtube-dl/rss2.xml',\n            'info_dict': {\n                'id': 'http://phihag.de/2014/youtube-dl/rss2.xml',\n                'title': 'Zero Punctuation',\n                'description': 're:.*groundbreaking video review series.*'\n            },\n            'playlist_mincount': 11,\n        },\n        # RSS feed with enclosure\n        {\n            'url': 'http://podcastfeeds.nbcnews.com/audio/podcast/MSNBC-MADDOW-NETCAST-M4V.xml',\n            'info_dict': {\n                'id': 'pdv_maddow_netcast_m4v-02-27-2015-201624',\n                'ext': 'm4v',\n                'upload_date': '20150228',\n                'title': 'pdv_maddow_netcast_m4v-02-27-2015-201624',\n            }\n        },\n        # SMIL from http://videolectures.net/promogram_igor_mekjavic_eng\n        {\n            'url': 'http://videolectures.net/promogram_igor_mekjavic_eng/video/1/smil.xml',\n            'info_dict': {\n                'id': 'smil',\n                'ext': 'mp4',\n                'title': 'Automatics, robotics and biocybernetics',\n                'description': 'md5:815fc1deb6b3a2bff99de2d5325be482',\n                'upload_date': '20130627',\n                'formats': 'mincount:16',\n                'subtitles': 'mincount:1',\n            },\n            'params': {\n                'force_generic_extractor': True,\n                'skip_download': True,\n            },\n        },\n        # SMIL from http://www1.wdr.de/mediathek/video/livestream/index.html\n        {\n            'url': 'http://metafilegenerator.de/WDR/WDR_FS/hds/hds.smil',\n            'info_dict': {\n                'id': 'hds',\n                'ext': 'flv',\n                'title': 'hds',\n                'formats': 'mincount:1',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # SMIL from https://www.restudy.dk/video/play/id/1637\n        {\n            'url': 'https://www.restudy.dk/awsmedia/SmilDirectory/video_1637.xml',\n            'info_dict': {\n                'id': 'video_1637',\n                'ext': 'flv',\n                'title': 'video_1637',\n                'formats': 'mincount:3',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # SMIL from http://adventure.howstuffworks.com/5266-cool-jobs-iditarod-musher-video.htm\n        {\n            'url': 'http://services.media.howstuffworks.com/videos/450221/smil-service.smil',\n            'info_dict': {\n                'id': 'smil-service',\n                'ext': 'flv',\n                'title': 'smil-service',\n                'formats': 'mincount:1',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # SMIL from http://new.livestream.com/CoheedandCambria/WebsterHall/videos/4719370\n        {\n            'url': 'http://api.new.livestream.com/accounts/1570303/events/1585861/videos/4719370.smil',\n            'info_dict': {\n                'id': '4719370',\n                'ext': 'mp4',\n                'title': '571de1fd-47bc-48db-abf9-238872a58d1f',\n                'formats': 'mincount:3',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # XSPF playlist from http://www.telegraaf.nl/tv/nieuws/binnenland/24353229/__Tikibad_ontruimd_wegens_brand__.html\n        {\n            'url': 'http://www.telegraaf.nl/xml/playlist/2015/8/7/mZlp2ctYIUEB.xspf',\n            'info_dict': {\n                'id': 'mZlp2ctYIUEB',\n                'ext': 'mp4',\n                'title': 'Tikibad ontruimd wegens brand',\n                'description': 'md5:05ca046ff47b931f9b04855015e163a4',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 33,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # MPD from http://dash-mse-test.appspot.com/media.html\n        {\n            'url': 'http://yt-dash-mse-test.commondatastorage.googleapis.com/media/car-20120827-manifest.mpd',\n            'md5': '4b57baab2e30d6eb3a6a09f0ba57ef53',\n            'info_dict': {\n                'id': 'car-20120827-manifest',\n                'ext': 'mp4',\n                'title': 'car-20120827-manifest',\n                'formats': 'mincount:9',\n                'upload_date': '20130904',\n            },\n            'params': {\n                'format': 'bestvideo',\n            },\n        },\n        # m3u8 served with Content-Type: audio/x-mpegURL; charset=utf-8\n        {\n            'url': 'http://once.unicornmedia.com/now/master/playlist/bb0b18ba-64f5-4b1b-a29f-0ac252f06b68/77a785f3-5188-4806-b788-0893a61634ed/93677179-2d99-4ef4-9e17-fe70d49abfbf/content.m3u8',\n            'info_dict': {\n                'id': 'content',\n                'ext': 'mp4',\n                'title': 'content',\n                'formats': 'mincount:8',\n            },\n            'params': {\n                # m3u8 downloads\n                'skip_download': True,\n            },\n            'skip': 'video gone',\n        },\n        # m3u8 served with Content-Type: text/plain\n        {\n            'url': 'http://www.nacentapps.com/m3u8/index.m3u8',\n            'info_dict': {\n                'id': 'index',\n                'ext': 'mp4',\n                'title': 'index',\n                'upload_date': '20140720',\n                'formats': 'mincount:11',\n            },\n            'params': {\n                # m3u8 downloads\n                'skip_download': True,\n            },\n            'skip': 'video gone',\n        },\n        # google redirect\n        {\n            'url': 'http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&ved=0CCUQtwIwAA&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DcmQHVoWB5FY&ei=F-sNU-LLCaXk4QT52ICQBQ&usg=AFQjCNEw4hL29zgOohLXvpJ-Bdh2bils1Q&bvm=bv.61965928,d.bGE',\n            'info_dict': {\n                'id': 'cmQHVoWB5FY',\n                'ext': 'mp4',\n                'upload_date': '20130224',\n                'uploader_id': 'TheVerge',\n                'description': r're:^Chris Ziegler takes a look at the\\.*',\n                'uploader': 'The Verge',\n                'title': 'First Firefox OS phones side-by-side',\n            },\n            'params': {\n                'skip_download': False,\n            }\n        },\n        {\n            # redirect in Refresh HTTP header\n            'url': 'https://www.facebook.com/l.php?u=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DpO8h3EaFRdo&h=TAQHsoToz&enc=AZN16h-b6o4Zq9pZkCCdOLNKMN96BbGMNtcFwHSaazus4JHT_MFYkAA-WARTX2kvsCIdlAIyHZjl6d33ILIJU7Jzwk_K3mcenAXoAzBNoZDI_Q7EXGDJnIhrGkLXo_LJ_pAa2Jzbx17UHMd3jAs--6j2zaeto5w9RTn8T_1kKg3fdC5WPX9Dbb18vzH7YFX0eSJmoa6SP114rvlkw6pkS1-T&s=1',\n            'info_dict': {\n                'id': 'pO8h3EaFRdo',\n                'ext': 'mp4',\n                'title': 'Tripeo Boiler Room x Dekmantel Festival DJ Set',\n                'description': 'md5:6294cc1af09c4049e0652b51a2df10d5',\n                'upload_date': '20150917',\n                'uploader_id': 'brtvofficial',\n                'uploader': 'Boiler Room',\n            },\n            'params': {\n                'skip_download': False,\n            },\n        },\n        {\n            'url': 'http://www.hodiho.fr/2013/02/regis-plante-sa-jeep.html',\n            'md5': '85b90ccc9d73b4acd9138d3af4c27f89',\n            'info_dict': {\n                'id': '13601338388002',\n                'ext': 'mp4',\n                'uploader': 'www.hodiho.fr',\n                'title': 'R\\u00e9gis plante sa Jeep',\n            }\n        },\n        # bandcamp page with custom domain\n        {\n            'add_ie': ['Bandcamp'],\n            'url': 'http://bronyrock.com/track/the-pony-mash',\n            'info_dict': {\n                'id': '3235767654',\n                'ext': 'mp3',\n                'title': 'The Pony Mash',\n                'uploader': 'M_Pallante',\n            },\n            'skip': 'There is a limit of 200 free downloads / month for the test song',\n        },\n        {\n            # embedded brightcove video\n            # it also tests brightcove videos that need to set the 'Referer'\n            # in the http requests\n            'add_ie': ['BrightcoveLegacy'],\n            'url': 'http://www.bfmtv.com/video/bfmbusiness/cours-bourse/cours-bourse-l-analyse-technique-154522/',\n            'info_dict': {\n                'id': '2765128793001',\n                'ext': 'mp4',\n                'title': 'Le cours de bourse : l\u2019analyse technique',\n                'description': 'md5:7e9ad046e968cb2d1114004aba466fd9',\n                'uploader': 'BFM BUSINESS',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            # embedded with itemprop embedURL and video id spelled as `idVideo`\n            'add_id': ['BrightcoveLegacy'],\n            'url': 'http://bfmbusiness.bfmtv.com/mediaplayer/chroniques/olivier-delamarche/',\n            'info_dict': {\n                'id': '5255628253001',\n                'ext': 'mp4',\n                'title': 'md5:37c519b1128915607601e75a87995fc0',\n                'description': 'md5:37f7f888b434bb8f8cc8dbd4f7a4cf26',\n                'uploader': 'BFM BUSINESS',\n                'uploader_id': '876450612001',\n                'timestamp': 1482255315,\n                'upload_date': '20161220',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            # https://github.com/rg3/youtube-dl/issues/2253\n            'url': 'http://bcove.me/i6nfkrc3',\n            'md5': '0ba9446db037002366bab3b3eb30c88c',\n            'info_dict': {\n                'id': '3101154703001',\n                'ext': 'mp4',\n                'title': 'Still no power',\n                'uploader': 'thestar.com',\n                'description': 'Mississauga resident David Farmer is still out of power as a result of the ice storm a month ago. To keep the house warm, Farmer cuts wood from his property for a wood burning stove downstairs.',\n            },\n            'add_ie': ['BrightcoveLegacy'],\n            'skip': 'video gone',\n        },\n        {\n            'url': 'http://www.championat.com/video/football/v/87/87499.html',\n            'md5': 'fb973ecf6e4a78a67453647444222983',\n            'info_dict': {\n                'id': '3414141473001',\n                'ext': 'mp4',\n                'title': '\u0412\u0438\u0434\u0435\u043e. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0414\u0437\u0430\u0433\u043e\u0435\u0432\u0430 (\u0426\u0421\u041a\u0410)',\n                'description': '\u041e\u043d\u043b\u0430\u0439\u043d-\u0442\u0440\u0430\u043d\u0441\u043b\u044f\u0446\u0438\u044f \u043c\u0430\u0442\u0447\u0430 \u0426\u0421\u041a\u0410 - \"\u0412\u043e\u043b\u0433\u0430\"',\n                'uploader': 'Championat',\n            },\n        },\n        {\n            # https://github.com/rg3/youtube-dl/issues/3541\n            'add_ie': ['BrightcoveLegacy'],\n            'url': 'http://www.kijk.nl/sbs6/leermijvrouwenkennen/videos/jqMiXKAYan2S/aflevering-1',\n            'info_dict': {\n                'id': '3866516442001',\n                'ext': 'mp4',\n                'title': 'Leer mij vrouwen kennen: Aflevering 1',\n                'description': 'Leer mij vrouwen kennen: Aflevering 1',\n                'uploader': 'SBS Broadcasting',\n            },\n            'skip': 'Restricted to Netherlands',\n            'params': {\n                'skip_download': True,  # m3u8 download\n            },\n        },\n        {\n            # Brightcove video in <iframe>\n            'url': 'http://www.un.org/chinese/News/story.asp?NewsID=27724',\n            'md5': '36d74ef5e37c8b4a2ce92880d208b968',\n            'info_dict': {\n                'id': '5360463607001',\n                'ext': 'mp4',\n                'title': '\u53d9\u5229\u4e9a\u5931\u660e\u513f\u7ae5\u5728\u5e9f\u589f\u4e0a\u6f14\u5531\u300a\u5fc3\u8df3\u300b  \u547c\u5401\u83b7\u5f97\u6b63\u5e38\u7ae5\u5e74\u751f\u6d3b',\n                'description': '\u8054\u5408\u56fd\u513f\u7ae5\u57fa\u91d1\u4f1a\u4e2d\u4e1c\u548c\u5317\u975e\u533a\u57df\u5927\u4f7f\u3001\u4f5c\u66f2\u5bb6\u624e\u5fb7\u00b7\u8fea\u62c9\u5c3c\uff08Zade Dirani\uff09\u57283\u670815\u65e5\u53d9\u5229\u4e9a\u51b2\u7a81\u7206\u53d17\u5468\u5e74\u7eaa\u5ff5\u65e5\u4e4b\u9645\u53d1\u5e03\u4e86\u4e3a\u53d9\u5229\u4e9a\u8c31\u5199\u7684\u6b4c\u66f2\u300a\u5fc3\u8df3\u300b\uff08HEARTBEAT\uff09\uff0c\u4e3a\u53d7\u5230\u516d\u5e74\u51b2\u7a81\u5f71\u54cd\u7684\u53d9\u5229\u4e9a\u513f\u7ae5\u53d1\u51fa\u5f3a\u70c8\u5450\u558a\uff0c\u547c\u5401\u4e16\u754c\u505a\u51fa\u5171\u540c\u52aa\u529b\uff0c\u4f7f\u53d9\u5229\u4e9a\u513f\u7ae5\u91cd\u65b0\u83b7\u5f97\u4eab\u6709\u6b63\u5e38\u7ae5\u5e74\u751f\u6d3b\u7684\u6743\u5229\u3002',\n                'uploader': 'United Nations',\n                'uploader_id': '1362235914001',\n                'timestamp': 1489593889,\n                'upload_date': '20170315',\n            },\n            'add_ie': ['BrightcoveLegacy'],\n        },\n        {\n            # Brightcove with alternative playerID key\n            'url': 'http://www.nature.com/nmeth/journal/v9/n7/fig_tab/nmeth.2062_SV1.html',\n            'info_dict': {\n                'id': 'nmeth.2062_SV1',\n                'title': 'Simultaneous multiview imaging of the Drosophila syncytial blastoderm : Quantitative high-speed imaging of entire developing embryos with simultaneous multiview light-sheet microscopy : Nature Methods : Nature Research',\n            },\n            'playlist': [{\n                'info_dict': {\n                    'id': '2228375078001',\n                    'ext': 'mp4',\n                    'title': 'nmeth.2062-sv1',\n                    'description': 'nmeth.2062-sv1',\n                    'timestamp': 1363357591,\n                    'upload_date': '20130315',\n                    'uploader': 'Nature Publishing Group',\n                    'uploader_id': '1964492299001',\n                },\n            }],\n        },\n        {\n            # Brightcove with UUID in videoPlayer\n            'url': 'http://www8.hp.com/cn/zh/home.html',\n            'info_dict': {\n                'id': '5255815316001',\n                'ext': 'mp4',\n                'title': 'Sprocket Video - China',\n                'description': 'Sprocket Video - China',\n                'uploader': 'HP-Video Gallery',\n                'timestamp': 1482263210,\n                'upload_date': '20161220',\n                'uploader_id': '1107601872001',\n            },\n            'params': {\n                'skip_download': True,  # m3u8 download\n            },\n            'skip': 'video rotates...weekly?',\n        },\n        {\n            # Brightcove:new type [2].\n            'url': 'http://www.delawaresportszone.com/video-st-thomas-more-earns-first-trip-to-basketball-semis',\n            'md5': '2b35148fcf48da41c9fb4591650784f3',\n            'info_dict': {\n                'id': '5348741021001',\n                'ext': 'mp4',\n                'upload_date': '20170306',\n                'uploader_id': '4191638492001',\n                'timestamp': 1488769918,\n                'title': 'VIDEO:  St. Thomas More earns first trip to basketball semis',\n\n            },\n        },\n        {\n            # Alternative brightcove <video> attributes\n            'url': 'http://www.programme-tv.net/videos/extraits/81095-guillaume-canet-evoque-les-rumeurs-d-infidelite-de-marion-cotillard-avec-brad-pitt-dans-vivement-dimanche/',\n            'info_dict': {\n                'id': '81095-guillaume-canet-evoque-les-rumeurs-d-infidelite-de-marion-cotillard-avec-brad-pitt-dans-vivement-dimanche',\n                'title': \"Guillaume Canet e\u0301voque les rumeurs d'infide\u0301lite\u0301 de Marion Cotillard avec Brad Pitt dans Vivement Dimanche, Extraits : toutes les vid\u00e9os avec T\u00e9l\u00e9-Loisirs\",\n            },\n            'playlist': [{\n                'md5': '732d22ba3d33f2f3fc253c39f8f36523',\n                'info_dict': {\n                    'id': '5311302538001',\n                    'ext': 'mp4',\n                    'title': \"Guillaume Canet e\u0301voque les rumeurs d'infide\u0301lite\u0301 de Marion Cotillard avec Brad Pitt dans Vivement Dimanche\",\n                    'description': \"Guillaume Canet e\u0301voque les rumeurs d'infide\u0301lite\u0301 de Marion Cotillard avec Brad Pitt dans Vivement Dimanche (France 2, 5 f\u00e9vrier 2017)\",\n                    'timestamp': 1486321708,\n                    'upload_date': '20170205',\n                    'uploader_id': '800000640001',\n                },\n                'only_matching': True,\n            }],\n        },\n        {\n            # Brightcove with UUID in videoPlayer\n            'url': 'http://www8.hp.com/cn/zh/home.html',\n            'info_dict': {\n                'id': '5255815316001',\n                'ext': 'mp4',\n                'title': 'Sprocket Video - China',\n                'description': 'Sprocket Video - China',\n                'uploader': 'HP-Video Gallery',\n                'timestamp': 1482263210,\n                'upload_date': '20161220',\n                'uploader_id': '1107601872001',\n            },\n            'params': {\n                'skip_download': True,  # m3u8 download\n            },\n        },\n        # ooyala video\n        {\n            'url': 'http://www.rollingstone.com/music/videos/norwegian-dj-cashmere-cat-goes-spartan-on-with-me-premiere-20131219',\n            'md5': '166dd577b433b4d4ebfee10b0824d8ff',\n            'info_dict': {\n                'id': 'BwY2RxaTrTkslxOfcan0UCf0YqyvWysJ',\n                'ext': 'mp4',\n                'title': '2cc213299525360.mov',  # that's what we get\n                'duration': 238.231,\n            },\n            'add_ie': ['Ooyala'],\n        },\n        {\n            # ooyala video embedded with http://player.ooyala.com/iframe.js\n            'url': 'http://www.macrumors.com/2015/07/24/steve-jobs-the-man-in-the-machine-first-trailer/',\n            'info_dict': {\n                'id': 'p0MGJndjoG5SOKqO_hZJuZFPB-Tr5VgB',\n                'ext': 'mp4',\n                'title': '\"Steve Jobs: Man in the Machine\" trailer',\n                'description': 'The first trailer for the Alex Gibney documentary \"Steve Jobs: Man in the Machine.\"',\n                'duration': 135.427,\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'skip': 'movie expired',\n        },\n        # ooyala video embedded with http://player.ooyala.com/static/v4/production/latest/core.min.js\n        {\n            'url': 'http://wnep.com/2017/07/22/steampunk-fest-comes-to-honesdale/',\n            'info_dict': {\n                'id': 'lwYWYxYzE6V5uJMjNGyKtwwiw9ZJD7t2',\n                'ext': 'mp4',\n                'title': 'Steampunk Fest Comes to Honesdale',\n                'duration': 43.276,\n            },\n            'params': {\n                'skip_download': True,\n            }\n        },\n        # embed.ly video\n        {\n            'url': 'http://www.tested.com/science/weird/460206-tested-grinding-coffee-2000-frames-second/',\n            'info_dict': {\n                'id': '9ODmcdjQcHQ',\n                'ext': 'mp4',\n                'title': 'Tested: Grinding Coffee at 2000 Frames Per Second',\n                'upload_date': '20140225',\n                'description': 'md5:06a40fbf30b220468f1e0957c0f558ff',\n                'uploader': 'Tested',\n                'uploader_id': 'testedcom',\n            },\n            # No need to test YoutubeIE here\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # funnyordie embed\n        {\n            'url': 'http://www.theguardian.com/world/2014/mar/11/obama-zach-galifianakis-between-two-ferns',\n            'info_dict': {\n                'id': '18e820ec3f',\n                'ext': 'mp4',\n                'title': 'Between Two Ferns with Zach Galifianakis: President Barack Obama',\n                'description': 'Episode 18: President Barack Obama sits down with Zach Galifianakis for his most memorable interview yet.',\n            },\n            # HEAD requests lead to endless 301, while GET is OK\n            'expected_warnings': ['301'],\n        },\n        # RUTV embed\n        {\n            'url': 'http://www.rg.ru/2014/03/15/reg-dfo/anklav-anons.html',\n            'info_dict': {\n                'id': '776940',\n                'ext': 'mp4',\n                'title': '\u041e\u0445\u043e\u0442\u0441\u043a\u043e\u0435 \u043c\u043e\u0440\u0435 \u0441\u0442\u0430\u043b\u043e \u0446\u0435\u043b\u0438\u043a\u043e\u043c \u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u043c',\n                'description': 'md5:5ed62483b14663e2a95ebbe115eb8f43',\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        # TVC embed\n        {\n            'url': 'http://sch1298sz.mskobr.ru/dou_edu/karamel_ki/filial_galleries/video/iframe_src_http_tvc_ru_video_iframe_id_55304_isplay_false_acc_video_id_channel_brand_id_11_show_episodes_episode_id_32307_frameb/',\n            'info_dict': {\n                'id': '55304',\n                'ext': 'mp4',\n                'title': '\u0414\u043e\u0448\u043a\u043e\u043b\u044c\u043d\u043e\u0435 \u0432\u043e\u0441\u043f\u0438\u0442\u0430\u043d\u0438\u0435',\n            },\n        },\n        # SportBox embed\n        {\n            'url': 'http://www.vestifinance.ru/articles/25753',\n            'info_dict': {\n                'id': '25753',\n                'title': '\u041f\u0440\u044f\u043c\u044b\u0435 \u0442\u0440\u0430\u043d\u0441\u043b\u044f\u0446\u0438\u0438 \u0441 \u0424\u043e\u0440\u0443\u043c\u0430-\u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \"\u0413\u043e\u0441\u0437\u0430\u043a\u0430\u0437-2013\"',\n            },\n            'playlist': [{\n                'info_dict': {\n                    'id': '370908',\n                    'title': '\u0413\u043e\u0441\u0437\u0430\u043a\u0430\u0437. \u0414\u0435\u043d\u044c 3',\n                    'ext': 'mp4',\n                }\n            }, {\n                'info_dict': {\n                    'id': '370905',\n                    'title': '\u0413\u043e\u0441\u0437\u0430\u043a\u0430\u0437. \u0414\u0435\u043d\u044c 2',\n                    'ext': 'mp4',\n                }\n            }, {\n                'info_dict': {\n                    'id': '370902',\n                    'title': '\u0413\u043e\u0441\u0437\u0430\u043a\u0430\u0437. \u0414\u0435\u043d\u044c 1',\n                    'ext': 'mp4',\n                }\n            }],\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        # Myvi.ru embed\n        {\n            'url': 'http://www.kinomyvi.tv/news/detail/Pervij-dublirovannij-trejler--Uzhastikov-_nOw1',\n            'info_dict': {\n                'id': 'f4dafcad-ff21-423d-89b5-146cfd89fa1e',\n                'ext': 'mp4',\n                'title': '\u0423\u0436\u0430\u0441\u0442\u0438\u043a\u0438, \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u0442\u0440\u0435\u0439\u043b\u0435\u0440 (2015)',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 153,\n            }\n        },\n        # XHamster embed\n        {\n            'url': 'http://www.numisc.com/forum/showthread.php?11696-FM15-which-pumiscer-was-this-%28-vid-%29-%28-alfa-as-fuck-srx-%29&s=711f5db534502e22260dec8c5e2d66d8',\n            'info_dict': {\n                'id': 'showthread',\n                'title': '[NSFL] [FM15] which pumiscer was this ( vid ) ( alfa as fuck srx )',\n            },\n            'playlist_mincount': 7,\n            # This forum does not allow <iframe> syntaxes anymore\n            # Now HTML tags are displayed as-is\n            'skip': 'No videos on this page',\n        },\n        # Embedded TED video\n        {\n            'url': 'http://en.support.wordpress.com/videos/ted-talks/',\n            'md5': '65fdff94098e4a607385a60c5177c638',\n            'info_dict': {\n                'id': '1969',\n                'ext': 'mp4',\n                'title': 'Hidden miracles of the natural world',\n                'uploader': 'Louie Schwartzberg',\n                'description': 'md5:8145d19d320ff3e52f28401f4c4283b9',\n            }\n        },\n        # nowvideo embed hidden behind percent encoding\n        {\n            'url': 'http://www.waoanime.tv/the-super-dimension-fortress-macross-episode-1/',\n            'md5': '2baf4ddd70f697d94b1c18cf796d5107',\n            'info_dict': {\n                'id': '06e53103ca9aa',\n                'ext': 'flv',\n                'title': 'Macross Episode 001  Watch Macross Episode 001 onl',\n                'description': 'No description',\n            },\n        },\n        # arte embed\n        {\n            'url': 'http://www.tv-replay.fr/redirection/20-03-14/x-enius-arte-10753389.html',\n            'md5': '7653032cbb25bf6c80d80f217055fa43',\n            'info_dict': {\n                'id': '048195-004_PLUS7-F',\n                'ext': 'flv',\n                'title': 'X:enius',\n                'description': 'md5:d5fdf32ef6613cdbfd516ae658abf168',\n                'upload_date': '20140320',\n            },\n            'params': {\n                'skip_download': 'Requires rtmpdump'\n            },\n            'skip': 'video gone',\n        },\n        # francetv embed\n        {\n            'url': 'http://www.tsprod.com/replay-du-concert-alcaline-de-calogero',\n            'info_dict': {\n                'id': 'EV_30231',\n                'ext': 'mp4',\n                'title': 'Alcaline, le concert avec Calogero',\n                'description': 'md5:61f08036dcc8f47e9cfc33aed08ffaff',\n                'upload_date': '20150226',\n                'timestamp': 1424989860,\n                'duration': 5400,\n            },\n            'params': {\n                # m3u8 downloads\n                'skip_download': True,\n            },\n            'expected_warnings': [\n                'Forbidden'\n            ]\n        },\n        # Cond\u00e9 Nast embed\n        {\n            'url': 'http://www.wired.com/2014/04/honda-asimo/',\n            'md5': 'ba0dfe966fa007657bd1443ee672db0f',\n            'info_dict': {\n                'id': '53501be369702d3275860000',\n                'ext': 'mp4',\n                'title': 'Honda\u2019s  New Asimo Robot Is More Human Than Ever',\n            }\n        },\n        # Dailymotion embed\n        {\n            'url': 'http://www.spi0n.com/zap-spi0n-com-n216/',\n            'md5': '441aeeb82eb72c422c7f14ec533999cd',\n            'info_dict': {\n                'id': 'k2mm4bCdJ6CQ2i7c8o2',\n                'ext': 'mp4',\n                'title': 'Le Zap de Spi0n n\u00b0216 - Zapping du Web',\n                'description': 'md5:faf028e48a461b8b7fad38f1e104b119',\n                'uploader': 'Spi0n',\n                'uploader_id': 'xgditw',\n                'upload_date': '20140425',\n                'timestamp': 1398441542,\n            },\n            'add_ie': ['Dailymotion'],\n        },\n        # DailyMail embed\n        {\n            'url': 'http://www.bumm.sk/krimi/2017/07/05/biztonsagi-kamera-buktatta-le-az-agg-ferfit-utlegelo-apolot',\n            'info_dict': {\n                'id': '1495629',\n                'ext': 'mp4',\n                'title': 'Care worker punches elderly dementia patient in head 11 times',\n                'description': 'md5:3a743dee84e57e48ec68bf67113199a5',\n            },\n            'add_ie': ['DailyMail'],\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # YouTube embed\n        {\n            'url': 'http://www.badzine.de/ansicht/datum/2014/06/09/so-funktioniert-die-neue-englische-badminton-liga.html',\n            'info_dict': {\n                'id': 'FXRb4ykk4S0',\n                'ext': 'mp4',\n                'title': 'The NBL Auction 2014',\n                'uploader': 'BADMINTON England',\n                'uploader_id': 'BADMINTONEvents',\n                'upload_date': '20140603',\n                'description': 'md5:9ef128a69f1e262a700ed83edb163a73',\n            },\n            'add_ie': ['Youtube'],\n            'params': {\n                'skip_download': True,\n            }\n        },\n        # MTVSercices embed\n        {\n            'url': 'http://www.vulture.com/2016/06/new-key-peele-sketches-released.html',\n            'md5': 'ca1aef97695ef2c1d6973256a57e5252',\n            'info_dict': {\n                'id': '769f7ec0-0692-4d62-9b45-0d88074bffc1',\n                'ext': 'mp4',\n                'title': 'Key and Peele|October 10, 2012|2|203|Liam Neesons - Uncensored',\n                'description': 'Two valets share their love for movie star Liam Neesons.',\n                'timestamp': 1349922600,\n                'upload_date': '20121011',\n            },\n        },\n        # YouTube embed via <data-embed-url=\"\">\n        {\n            'url': 'https://play.google.com/store/apps/details?id=com.gameloft.android.ANMP.GloftA8HM',\n            'info_dict': {\n                'id': '4vAffPZIT44',\n                'ext': 'mp4',\n                'title': 'Asphalt 8: Airborne - Update - Welcome to Dubai!',\n                'uploader': 'Gameloft',\n                'uploader_id': 'gameloft',\n                'upload_date': '20140828',\n                'description': 'md5:c80da9ed3d83ae6d1876c834de03e1c4',\n            },\n            'params': {\n                'skip_download': True,\n            }\n        },\n        # YouTube <object> embed\n        {\n            'url': 'http://www.improbable.com/2017/04/03/untrained-modern-youths-and-ancient-masters-in-selfie-portraits/',\n            'md5': '516718101ec834f74318df76259fb3cc',\n            'info_dict': {\n                'id': 'msN87y-iEx0',\n                'ext': 'webm',\n                'title': 'Feynman: Mirrors FUN TO IMAGINE 6',\n                'upload_date': '20080526',\n                'description': 'md5:0ffc78ea3f01b2e2c247d5f8d1d3c18d',\n                'uploader': 'Christopher Sykes',\n                'uploader_id': 'ChristopherJSykes',\n            },\n            'add_ie': ['Youtube'],\n        },\n        # Camtasia studio\n        {\n            'url': 'http://www.ll.mit.edu/workshops/education/videocourses/antennas/lecture1/video/',\n            'playlist': [{\n                'md5': '0c5e352edabf715d762b0ad4e6d9ee67',\n                'info_dict': {\n                    'id': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final',\n                    'title': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final - video1',\n                    'ext': 'flv',\n                    'duration': 2235.90,\n                }\n            }, {\n                'md5': '10e4bb3aaca9fd630e273ff92d9f3c63',\n                'info_dict': {\n                    'id': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final_PIP',\n                    'title': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final - pip',\n                    'ext': 'flv',\n                    'duration': 2235.93,\n                }\n            }],\n            'info_dict': {\n                'title': 'Fenn-AA_PA_Radar_Course_Lecture_1c_Final',\n            }\n        },\n        # Flowplayer\n        {\n            'url': 'http://www.handjobhub.com/video/busty-blonde-siri-tit-fuck-while-wank-6313.html',\n            'md5': '9d65602bf31c6e20014319c7d07fba27',\n            'info_dict': {\n                'id': '5123ea6d5e5a7',\n                'ext': 'mp4',\n                'age_limit': 18,\n                'uploader': 'www.handjobhub.com',\n                'title': 'Busty Blonde Siri Tit Fuck While Wank at HandjobHub.com',\n            }\n        },\n        # Multiple brightcove videos\n        # https://github.com/rg3/youtube-dl/issues/2283\n        {\n            'url': 'http://www.newyorker.com/online/blogs/newsdesk/2014/01/always-never-nuclear-command-and-control.html',\n            'info_dict': {\n                'id': 'always-never',\n                'title': 'Always / Never - The New Yorker',\n            },\n            'playlist_count': 3,\n            'params': {\n                'extract_flat': False,\n                'skip_download': True,\n            }\n        },\n        # MLB embed\n        {\n            'url': 'http://umpire-empire.com/index.php/topic/58125-laz-decides-no-thats-low/',\n            'md5': '96f09a37e44da40dd083e12d9a683327',\n            'info_dict': {\n                'id': '33322633',\n                'ext': 'mp4',\n                'title': 'Ump changes call to ball',\n                'description': 'md5:71c11215384298a172a6dcb4c2e20685',\n                'duration': 48,\n                'timestamp': 1401537900,\n                'upload_date': '20140531',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        # Wistia embed\n        {\n            'url': 'http://study.com/academy/lesson/north-american-exploration-failed-colonies-of-spain-france-england.html#lesson',\n            'md5': '1953f3a698ab51cfc948ed3992a0b7ff',\n            'info_dict': {\n                'id': '6e2wtrbdaf',\n                'ext': 'mov',\n                'title': 'paywall_north-american-exploration-failed-colonies-of-spain-france-england',\n                'description': 'a Paywall Videos video from Remilon',\n                'duration': 644.072,\n                'uploader': 'study.com',\n                'timestamp': 1459678540,\n                'upload_date': '20160403',\n                'filesize': 24687186,\n            },\n        },\n        {\n            'url': 'http://thoughtworks.wistia.com/medias/uxjb0lwrcz',\n            'md5': 'baf49c2baa8a7de5f3fc145a8506dcd4',\n            'info_dict': {\n                'id': 'uxjb0lwrcz',\n                'ext': 'mp4',\n                'title': 'Conversation about Hexagonal Rails Part 1',\n                'description': 'a Martin Fowler video from ThoughtWorks',\n                'duration': 1715.0,\n                'uploader': 'thoughtworks.wistia.com',\n                'timestamp': 1401832161,\n                'upload_date': '20140603',\n            },\n        },\n        # Wistia standard embed (async)\n        {\n            'url': 'https://www.getdrip.com/university/brennan-dunn-drip-workshop/',\n            'info_dict': {\n                'id': '807fafadvk',\n                'ext': 'mp4',\n                'title': 'Drip Brennan Dunn Workshop',\n                'description': 'a JV Webinars video from getdrip-1',\n                'duration': 4986.95,\n                'timestamp': 1463607249,\n                'upload_date': '20160518',\n            },\n            'params': {\n                'skip_download': True,\n            }\n        },\n        # Soundcloud embed\n        {\n            'url': 'http://nakedsecurity.sophos.com/2014/10/29/sscc-171-are-you-sure-that-1234-is-a-bad-password-podcast/',\n            'info_dict': {\n                'id': '174391317',\n                'ext': 'mp3',\n                'description': 'md5:ff867d6b555488ad3c52572bb33d432c',\n                'uploader': 'Sophos Security',\n                'title': 'Chet Chat 171 - Oct 29, 2014',\n                'upload_date': '20141029',\n            }\n        },\n        # Soundcloud multiple embeds\n        {\n            'url': 'http://www.guitarplayer.com/lessons/1014/legato-workout-one-hour-to-more-fluid-performance---tab/52809',\n            'info_dict': {\n                'id': '52809',\n                'title': 'Guitar Essentials: Legato Workout\u2014One-Hour to Fluid Performance  | TAB + AUDIO',\n            },\n            'playlist_mincount': 7,\n        },\n        # TuneIn station embed\n        {\n            'url': 'http://radiocnrv.com/promouvoir-radio-cnrv/',\n            'info_dict': {\n                'id': '204146',\n                'ext': 'mp3',\n                'title': 'CNRV',\n                'location': 'Paris, France',\n                'is_live': True,\n            },\n            'params': {\n                # Live stream\n                'skip_download': True,\n            },\n        },\n        # Livestream embed\n        {\n            'url': 'http://www.esa.int/Our_Activities/Space_Science/Rosetta/Philae_comet_touch-down_webcast',\n            'info_dict': {\n                'id': '67864563',\n                'ext': 'flv',\n                'upload_date': '20141112',\n                'title': 'Rosetta #CometLanding webcast HL 10',\n            }\n        },\n        # Another Livestream embed, without 'new.' in URL\n        {\n            'url': 'https://www.freespeech.org/',\n            'info_dict': {\n                'id': '123537347',\n                'ext': 'mp4',\n                'title': 're:^FSTV [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            },\n            'params': {\n                # Live stream\n                'skip_download': True,\n            },\n        },\n        # LazyYT\n        {\n            'url': 'https://skiplagged.com/',\n            'info_dict': {\n                'id': 'skiplagged',\n                'title': 'Skiplagged: The smart way to find cheap flights',\n            },\n            'playlist_mincount': 1,\n            'add_ie': ['Youtube'],\n        },\n        # Cinchcast embed\n        {\n            'url': 'http://undergroundwellness.com/podcasts/306-5-steps-to-permanent-gut-healing/',\n            'info_dict': {\n                'id': '7141703',\n                'ext': 'mp3',\n                'upload_date': '20141126',\n                'title': 'Jack Tips: 5 Steps to Permanent Gut Healing',\n            }\n        },\n        # Cinerama player\n        {\n            'url': 'http://www.abc.net.au/7.30/content/2015/s4164797.htm',\n            'info_dict': {\n                'id': '730m_DandD_1901_512k',\n                'ext': 'mp4',\n                'uploader': 'www.abc.net.au',\n                'title': 'Game of Thrones with dice - Dungeons and Dragons fantasy role-playing game gets new life - 19/01/2015',\n            }\n        },\n        # embedded viddler video\n        {\n            'url': 'http://deadspin.com/i-cant-stop-watching-john-wall-chop-the-nuggets-with-th-1681801597',\n            'info_dict': {\n                'id': '4d03aad9',\n                'ext': 'mp4',\n                'uploader': 'deadspin',\n                'title': 'WALL-TO-GORTAT',\n                'timestamp': 1422285291,\n                'upload_date': '20150126',\n            },\n            'add_ie': ['Viddler'],\n        },\n        # Libsyn embed\n        {\n            'url': 'http://thedailyshow.cc.com/podcast/episodetwelve',\n            'info_dict': {\n                'id': '3377616',\n                'ext': 'mp3',\n                'title': \"The Daily Show Podcast without Jon Stewart - Episode 12: Bassem Youssef: Egypt's Jon Stewart\",\n                'description': 'md5:601cb790edd05908957dae8aaa866465',\n                'upload_date': '20150220',\n            },\n            'skip': 'All The Daily Show URLs now redirect to http://www.cc.com/shows/',\n        },\n        # jwplayer YouTube\n        {\n            'url': 'http://media.nationalarchives.gov.uk/index.php/webinar-using-discovery-national-archives-online-catalogue/',\n            'info_dict': {\n                'id': 'Mrj4DVp2zeA',\n                'ext': 'mp4',\n                'upload_date': '20150212',\n                'uploader': 'The National Archives UK',\n                'description': 'md5:8078af856dca76edc42910b61273dbbf',\n                'uploader_id': 'NationalArchives08',\n                'title': 'Webinar: Using Discovery, The National Archives\u2019 online catalogue',\n            },\n        },\n        # jwplayer rtmp\n        {\n            'url': 'http://www.suffolk.edu/sjc/live.php',\n            'info_dict': {\n                'id': 'live',\n                'ext': 'flv',\n                'title': 'Massachusetts Supreme Judicial Court Oral Arguments',\n                'uploader': 'www.suffolk.edu',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'skip': 'Only has video a few mornings per month, see http://www.suffolk.edu/sjc/',\n        },\n        # Complex jwplayer\n        {\n            'url': 'http://www.indiedb.com/games/king-machine/videos',\n            'info_dict': {\n                'id': 'videos',\n                'ext': 'mp4',\n                'title': 'king machine trailer 1',\n                'description': 'Browse King Machine videos & audio for sweet media. Your eyes will thank you.',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            # JWPlayer config passed as variable\n            'url': 'http://www.txxx.com/videos/3326530/ariele/',\n            'info_dict': {\n                'id': '3326530_hq',\n                'ext': 'mp4',\n                'title': 'ARIELE | Tube Cup',\n                'uploader': 'www.txxx.com',\n                'age_limit': 18,\n            },\n            'params': {\n                'skip_download': True,\n            }\n        },\n        {\n            # JWPlatform iframe\n            'url': 'https://www.mediaite.com/tv/dem-senator-claims-gary-cohn-faked-a-bad-connection-during-trump-call-to-get-him-off-the-phone/',\n            'md5': 'ca00a040364b5b439230e7ebfd02c4e9',\n            'info_dict': {\n                'id': 'O0c5JcKT',\n                'ext': 'mp4',\n                'upload_date': '20171122',\n                'timestamp': 1511366290,\n                'title': 'Dem Senator Claims Gary Cohn Faked a Bad Connection During Trump Call to Get Him Off the Phone',\n            },\n            'add_ie': [JWPlatformIE.ie_key()],\n        },\n        {\n            # Video.js embed, multiple formats\n            'url': 'http://ortcam.com/solidworks-\u0443\u0440\u043e\u043a-6-\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430-\u0447\u0435\u0440\u0442\u0435\u0436\u0430_33f9b7351.html',\n            'info_dict': {\n                'id': 'yygqldloqIk',\n                'ext': 'mp4',\n                'title': 'SolidWorks. \u0423\u0440\u043e\u043a 6 \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0447\u0435\u0440\u0442\u0435\u0436\u0430',\n                'description': 'md5:baf95267792646afdbf030e4d06b2ab3',\n                'upload_date': '20130314',\n                'uploader': 'PRO\u0441\u0442\u043e\u04353D',\n                'uploader_id': 'PROstoe3D',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            # Video.js embed, single format\n            'url': 'https://www.vooplayer.com/v3/watch/watch.php?v=NzgwNTg=',\n            'info_dict': {\n                'id': 'watch',\n                'ext': 'mp4',\n                'title': 'Step 1 -  Good Foundation',\n                'description': 'md5:d1e7ff33a29fc3eb1673d6c270d344f4',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # rtl.nl embed\n        {\n            'url': 'http://www.rtlnieuws.nl/nieuws/buitenland/aanslagen-kopenhagen',\n            'playlist_mincount': 5,\n            'info_dict': {\n                'id': 'aanslagen-kopenhagen',\n                'title': 'Aanslagen Kopenhagen',\n            }\n        },\n        # Zapiks embed\n        {\n            'url': 'http://www.skipass.com/news/116090-bon-appetit-s5ep3-baqueira-mi-cor.html',\n            'info_dict': {\n                'id': '118046',\n                'ext': 'mp4',\n                'title': 'EP3S5 - Bon App\u00e9tit - Baqueira Mi Corazon !',\n            }\n        },\n        # Kaltura embed (different embed code)\n        {\n            'url': 'http://www.premierchristianradio.com/Shows/Saturday/Unbelievable/Conference-Videos/Os-Guinness-Is-It-Fools-Talk-Unbelievable-Conference-2014',\n            'info_dict': {\n                'id': '1_a52wc67y',\n                'ext': 'flv',\n                'upload_date': '20150127',\n                'uploader_id': 'PremierMedia',\n                'timestamp': int,\n                'title': 'Os Guinness // Is It Fools Talk? // Unbelievable? Conference 2014',\n            },\n        },\n        # Kaltura embed with single quotes\n        {\n            'url': 'http://fod.infobase.com/p_ViewPlaylist.aspx?AssignmentID=NUN8ZY',\n            'info_dict': {\n                'id': '0_izeg5utt',\n                'ext': 'mp4',\n                'title': '35871',\n                'timestamp': 1355743100,\n                'upload_date': '20121217',\n                'uploader_id': 'batchUser',\n            },\n            'add_ie': ['Kaltura'],\n        },\n        {\n            # Kaltura embedded via quoted entry_id\n            'url': 'https://www.oreilly.com/ideas/my-cloud-makes-pretty-pictures',\n            'info_dict': {\n                'id': '0_utuok90b',\n                'ext': 'mp4',\n                'title': '06_matthew_brender_raj_dutt',\n                'timestamp': 1466638791,\n                'upload_date': '20160622',\n            },\n            'add_ie': ['Kaltura'],\n            'expected_warnings': [\n                'Could not send HEAD request'\n            ],\n            'params': {\n                'skip_download': True,\n            }\n        },\n        {\n            # Kaltura embedded, some fileExt broken (#11480)\n            'url': 'http://www.cornell.edu/video/nima-arkani-hamed-standard-models-of-particle-physics',\n            'info_dict': {\n                'id': '1_sgtvehim',\n                'ext': 'mp4',\n                'title': 'Our \"Standard Models\" of particle physics and cosmology',\n                'description': 'md5:67ea74807b8c4fea92a6f38d6d323861',\n                'timestamp': 1321158993,\n                'upload_date': '20111113',\n                'uploader_id': 'kps1',\n            },\n            'add_ie': ['Kaltura'],\n        },\n        {\n            # Kaltura iframe embed\n            'url': 'http://www.gsd.harvard.edu/event/i-m-pei-a-centennial-celebration/',\n            'md5': 'ae5ace8eb09dc1a35d03b579a9c2cc44',\n            'info_dict': {\n                'id': '0_f2cfbpwy',\n                'ext': 'mp4',\n                'title': 'I. M. Pei: A Centennial Celebration',\n                'description': 'md5:1db8f40c69edc46ca180ba30c567f37c',\n                'upload_date': '20170403',\n                'uploader_id': 'batchUser',\n                'timestamp': 1491232186,\n            },\n            'add_ie': ['Kaltura'],\n        },\n        # EaglePlatform embed (generic URL)\n        {\n            'url': 'http://lenta.ru/news/2015/03/06/navalny/',\n            # Not checking MD5 as sometimes the direct HTTP link results in 404 and HLS is used\n            'info_dict': {\n                'id': '227304',\n                'ext': 'mp4',\n                'title': '\u041d\u0430\u0432\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0448\u0435\u043b \u043d\u0430 \u0441\u0432\u043e\u0431\u043e\u0434\u0443',\n                'description': 'md5:d97861ac9ae77377f3f20eaf9d04b4f5',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 87,\n                'view_count': int,\n                'age_limit': 0,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # referrer protected EaglePlatform embed\n        {\n            'url': 'https://tvrain.ru/lite/teleshow/kak_vse_nachinalos/namin-418921/',\n            'info_dict': {\n                'id': '582306',\n                'ext': 'mp4',\n                'title': '\u0421\u0442\u0430\u0441 \u041d\u0430\u043c\u0438\u043d: \u00ab\u041c\u044b \u043d\u0430\u0440\u0443\u0448\u0438\u043b\u0438 \u0434\u0435\u0432\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u041a\u0440\u0435\u043c\u043b\u044f\u00bb',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 3382,\n                'view_count': int,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # ClipYou (EaglePlatform) embed (custom URL)\n        {\n            'url': 'http://muz-tv.ru/play/7129/',\n            # Not checking MD5 as sometimes the direct HTTP link results in 404 and HLS is used\n            'info_dict': {\n                'id': '12820',\n                'ext': 'mp4',\n                'title': \"'O Sole Mio\",\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 216,\n                'view_count': int,\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'skip': 'This video is unavailable.',\n        },\n        # Pladform embed\n        {\n            'url': 'http://muz-tv.ru/kinozal/view/7400/',\n            'info_dict': {\n                'id': '100183293',\n                'ext': 'mp4',\n                'title': '\u0422\u0430\u0439\u043d\u044b \u043f\u0435\u0440\u0435\u0432\u0430\u043b\u0430 \u0414\u044f\u0442\u043b\u043e\u0432\u0430 \u2022 1 \u0441\u0435\u0440\u0438\u044f 2 \u0447\u0430\u0441\u0442\u044c',\n                'description': '\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0435\u0440\u0438\u0430\u043b-\u0440\u0430\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u0436\u0443\u0442\u043a\u0438\u0445 \u0442\u0430\u0439\u043d \u0425\u0425 \u0432\u0435\u043a\u0430',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'duration': 694,\n                'age_limit': 0,\n            },\n            'skip': 'HTTP Error 404: Not Found',\n        },\n        # Playwire embed\n        {\n            'url': 'http://www.cinemablend.com/new/First-Joe-Dirt-2-Trailer-Teaser-Stupid-Greatness-70874.html',\n            'info_dict': {\n                'id': '3519514',\n                'ext': 'mp4',\n                'title': 'Joe Dirt 2 Beautiful Loser Teaser Trailer',\n                'thumbnail': r're:^https?://.*\\.png$',\n                'duration': 45.115,\n            },\n        },\n        # 5min embed\n        {\n            'url': 'http://techcrunch.com/video/facebook-creates-on-this-day-crunch-report/518726732/',\n            'md5': '4c6f127a30736b59b3e2c19234ee2bf7',\n            'info_dict': {\n                'id': '518726732',\n                'ext': 'mp4',\n                'title': 'Facebook Creates \"On This Day\" | Crunch Report',\n                'description': 'Amazon updates Fire TV line, Tesla\\'s Model X spotted in the wild',\n                'timestamp': 1427237531,\n                'uploader': 'Crunch Report',\n                'upload_date': '20150324',\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n        },\n        # SVT embed\n        {\n            'url': 'http://www.svt.se/sport/ishockey/jagr-tacklar-giroux-under-intervjun',\n            'info_dict': {\n                'id': '2900353',\n                'ext': 'flv',\n                'title': 'H\u00e4r trycker Jagr till Giroux (under SVT-intervjun)',\n                'duration': 27,\n                'age_limit': 0,\n            },\n        },\n        # Crooks and Liars embed\n        {\n            'url': 'http://crooksandliars.com/2015/04/fox-friends-says-protecting-atheists',\n            'info_dict': {\n                'id': '8RUoRhRi',\n                'ext': 'mp4',\n                'title': \"Fox & Friends Says Protecting Atheists From Discrimination Is Anti-Christian!\",\n                'description': 'md5:e1a46ad1650e3a5ec7196d432799127f',\n                'timestamp': 1428207000,\n                'upload_date': '20150405',\n                'uploader': 'Heather',\n            },\n        },\n        # Crooks and Liars external embed\n        {\n            'url': 'http://theothermccain.com/2010/02/02/video-proves-that-bill-kristol-has-been-watching-glenn-beck/comment-page-1/',\n            'info_dict': {\n                'id': 'MTE3MjUtMzQ2MzA',\n                'ext': 'mp4',\n                'title': 'md5:5e3662a81a4014d24c250d76d41a08d5',\n                'description': 'md5:9b8e9542d6c3c5de42d6451b7d780cec',\n                'timestamp': 1265032391,\n                'upload_date': '20100201',\n                'uploader': 'Heather',\n            },\n        },\n        # NBC Sports vplayer embed\n        {\n            'url': 'http://www.riderfans.com/forum/showthread.php?121827-Freeman&s=e98fa1ea6dc08e886b1678d35212494a',\n            'info_dict': {\n                'id': 'ln7x1qSThw4k',\n                'ext': 'flv',\n                'title': \"PFT Live: New leader in the 'new-look' defense\",\n                'description': 'md5:65a19b4bbfb3b0c0c5768bed1dfad74e',\n                'uploader': 'NBCU-SPORTS',\n                'upload_date': '20140107',\n                'timestamp': 1389118457,\n            },\n            'skip': 'Invalid Page URL',\n        },\n        # NBC News embed\n        {\n            'url': 'http://www.vulture.com/2016/06/letterman-couldnt-care-less-about-late-night.html',\n            'md5': '1aa589c675898ae6d37a17913cf68d66',\n            'info_dict': {\n                'id': 'x_dtl_oa_LettermanliftPR_160608',\n                'ext': 'mp4',\n                'title': 'David Letterman: A Preview',\n                'description': 'A preview of Tom Brokaw\\'s interview with David Letterman as part of the On Assignment series powered by Dateline. Airs Sunday June 12 at 7/6c.',\n                'upload_date': '20160609',\n                'timestamp': 1465431544,\n                'uploader': 'NBCU-NEWS',\n            },\n        },\n        # UDN embed\n        {\n            'url': 'https://video.udn.com/news/300346',\n            'md5': 'fd2060e988c326991037b9aff9df21a6',\n            'info_dict': {\n                'id': '300346',\n                'ext': 'mp4',\n                'title': '\u4e2d\u4e00\u4e2d\u7537\u5e2b\u8b8a\u6027 \u5168\u6821\u5e2b\u751f\u529b\u633a',\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                # m3u8 download\n                'skip_download': True,\n            },\n            'expected_warnings': ['Failed to parse JSON Expecting value'],\n        },\n        # Ooyala embed\n        {\n            'url': 'http://www.businessinsider.com/excel-index-match-vlookup-video-how-to-2015-2?IR=T',\n            'info_dict': {\n                'id': '50YnY4czr4ms1vJ7yz3xzq0excz_pUMs',\n                'ext': 'mp4',\n                'description': 'Index/Match versus VLOOKUP.',\n                'title': 'This is what separates the Excel masters from the wannabes',\n                'duration': 191.933,\n            },\n            'params': {\n                # m3u8 downloads\n                'skip_download': True,\n            }\n        },\n        # Brightcove URL in single quotes\n        {\n            'url': 'http://www.sportsnet.ca/baseball/mlb/sn-presents-russell-martin-world-citizen/',\n            'md5': '4ae374f1f8b91c889c4b9203c8c752af',\n            'info_dict': {\n                'id': '4255764656001',\n                'ext': 'mp4',\n                'title': 'SN Presents: Russell Martin, World Citizen',\n                'description': 'To understand why he was the Toronto Blue Jays\u2019 top off-season priority is to appreciate his background and upbringing in Montreal, where he first developed his baseball skills. Written and narrated by Stephen Brunt.',\n                'uploader': 'Rogers Sportsnet',\n                'uploader_id': '1704050871',\n                'upload_date': '20150525',\n                'timestamp': 1432570283,\n            },\n        },\n        # OnionStudios embed\n        {\n            'url': 'http://www.clickhole.com/video/dont-understand-bitcoin-man-will-mumble-explanatio-2537',\n            'info_dict': {\n                'id': '2855',\n                'ext': 'mp4',\n                'title': 'Don\u2019t Understand Bitcoin? This Man Will Mumble An Explanation At You',\n                'thumbnail': r're:^https?://.*\\.jpe?g$',\n                'uploader': 'ClickHole',\n                'uploader_id': 'clickhole',\n            }\n        },\n        # SnagFilms embed\n        {\n            'url': 'http://whilewewatch.blogspot.ru/2012/06/whilewewatch-whilewewatch-gripping.html',\n            'info_dict': {\n                'id': '74849a00-85a9-11e1-9660-123139220831',\n                'ext': 'mp4',\n                'title': '#whilewewatch',\n            }\n        },\n        # AdobeTVVideo embed\n        {\n            'url': 'https://helpx.adobe.com/acrobat/how-to/new-experience-acrobat-dc.html?set=acrobat--get-started--essential-beginners',\n            'md5': '43662b577c018ad707a63766462b1e87',\n            'info_dict': {\n                'id': '2456',\n                'ext': 'mp4',\n                'title': 'New experience with Acrobat DC',\n                'description': 'New experience with Acrobat DC',\n                'duration': 248.667,\n            },\n        },\n        # BrightcoveInPageEmbed embed\n        {\n            'url': 'http://www.geekandsundry.com/tabletop-bonus-wils-final-thoughts-on-dread/',\n            'info_dict': {\n                'id': '4238694884001',\n                'ext': 'flv',\n                'title': 'Tabletop: Dread, Last Thoughts',\n                'description': 'Tabletop: Dread, Last Thoughts',\n                'duration': 51690,\n            },\n        },\n        # Brightcove embed, with no valid 'renditions' but valid 'IOSRenditions'\n        # This video can't be played in browsers if Flash disabled and UA set to iPhone, which is actually a false alarm\n        {\n            'url': 'https://dl.dropboxusercontent.com/u/29092637/interview.html',\n            'info_dict': {\n                'id': '4785848093001',\n                'ext': 'mp4',\n                'title': 'The Cardinal Pell Interview',\n                'description': 'Sky News Contributor Andrew Bolt interviews George Pell in Rome, following the Cardinal\\'s evidence before the Royal Commission into Child Abuse. ',\n                'uploader': 'GlobeCast Australia - GlobeStream',\n                'uploader_id': '2733773828001',\n                'upload_date': '20160304',\n                'timestamp': 1457083087,\n            },\n            'params': {\n                # m3u8 downloads\n                'skip_download': True,\n            },\n        },\n        {\n            # Brightcove embed with whitespace around attribute names\n            'url': 'http://www.stack.com/video/3167554373001/learn-to-hit-open-three-pointers-with-damian-lillard-s-baseline-drift-drill',\n            'info_dict': {\n                'id': '3167554373001',\n                'ext': 'mp4',\n                'title': \"Learn to Hit Open Three-Pointers With Damian Lillard's Baseline Drift Drill\",\n                'description': 'md5:57bacb0e0f29349de4972bfda3191713',\n                'uploader_id': '1079349493',\n                'upload_date': '20140207',\n                'timestamp': 1391810548,\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # Another form of arte.tv embed\n        {\n            'url': 'http://www.tv-replay.fr/redirection/09-04-16/arte-reportage-arte-11508975.html',\n            'md5': '850bfe45417ddf221288c88a0cffe2e2',\n            'info_dict': {\n                'id': '030273-562_PLUS7-F',\n                'ext': 'mp4',\n                'title': 'ARTE Reportage - Nulle part, en France',\n                'description': 'md5:e3a0e8868ed7303ed509b9e3af2b870d',\n                'upload_date': '20160409',\n            },\n        },\n        # LiveLeak embed\n        {\n            'url': 'http://www.wykop.pl/link/3088787/',\n            'md5': '7619da8c820e835bef21a1efa2a0fc71',\n            'info_dict': {\n                'id': '874_1459135191',\n                'ext': 'mp4',\n                'title': 'Man shows poor quality of new apartment building',\n                'description': 'The wall is like a sand pile.',\n                'uploader': 'Lake8737',\n            },\n            'add_ie': [LiveLeakIE.ie_key()],\n        },\n        # Another LiveLeak embed pattern (#13336)\n        {\n            'url': 'https://milo.yiannopoulos.net/2017/06/concealed-carry-robbery/',\n            'info_dict': {\n                'id': '2eb_1496309988',\n                'ext': 'mp4',\n                'title': 'Thief robs place where everyone was armed',\n                'description': 'md5:694d73ee79e535953cf2488562288eee',\n                'uploader': 'brazilwtf',\n            },\n            'add_ie': [LiveLeakIE.ie_key()],\n        },\n        # Duplicated embedded video URLs\n        {\n            'url': 'http://www.hudl.com/athlete/2538180/highlights/149298443',\n            'info_dict': {\n                'id': '149298443_480_16c25b74_2',\n                'ext': 'mp4',\n                'title': 'vs. Blue Orange Spring Game',\n                'uploader': 'www.hudl.com',\n            },\n        },\n        # twitter:player:stream embed\n        {\n            'url': 'http://www.rtl.be/info/video/589263.aspx?CategoryID=288',\n            'info_dict': {\n                'id': 'master',\n                'ext': 'mp4',\n                'title': 'Une nouvelle esp\u00e8ce de dinosaure d\u00e9couverte en Argentine',\n                'uploader': 'www.rtl.be',\n            },\n            'params': {\n                # m3u8 downloads\n                'skip_download': True,\n            },\n        },\n        # twitter:player embed\n        {\n            'url': 'http://www.theatlantic.com/video/index/484130/what-do-black-holes-sound-like/',\n            'md5': 'a3e0df96369831de324f0778e126653c',\n            'info_dict': {\n                'id': '4909620399001',\n                'ext': 'mp4',\n                'title': 'What Do Black Holes Sound Like?',\n                'description': 'what do black holes sound like',\n                'upload_date': '20160524',\n                'uploader_id': '29913724001',\n                'timestamp': 1464107587,\n                'uploader': 'TheAtlantic',\n            },\n            'add_ie': ['BrightcoveLegacy'],\n        },\n        # Facebook <iframe> embed\n        {\n            'url': 'https://www.hostblogger.de/blog/archives/6181-Auto-jagt-Betonmischer.html',\n            'md5': 'fbcde74f534176ecb015849146dd3aee',\n            'info_dict': {\n                'id': '599637780109885',\n                'ext': 'mp4',\n                'title': 'Facebook video #599637780109885',\n            },\n        },\n        # Facebook <iframe> embed, plugin video\n        {\n            'url': 'http://5pillarsuk.com/2017/06/07/tariq-ramadan-disagrees-with-pr-exercise-by-imams-refusing-funeral-prayers-for-london-attackers/',\n            'info_dict': {\n                'id': '1754168231264132',\n                'ext': 'mp4',\n                'title': 'About the Imams and Religious leaders refusing to perform funeral prayers for...',\n                'uploader': 'Tariq Ramadan (official)',\n                'timestamp': 1496758379,\n                'upload_date': '20170606',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        # Facebook API embed\n        {\n            'url': 'http://www.lothype.com/blue-stars-2016-preview-standstill-full-show/',\n            'md5': 'a47372ee61b39a7b90287094d447d94e',\n            'info_dict': {\n                'id': '10153467542406923',\n                'ext': 'mp4',\n                'title': 'Facebook video #10153467542406923',\n            },\n        },\n        # Wordpress \"YouTube Video Importer\" plugin\n        {\n            'url': 'http://www.lothype.com/blue-devils-drumline-stanford-lot-2016/',\n            'md5': 'd16797741b560b485194eddda8121b48',\n            'info_dict': {\n                'id': 'HNTXWDXV9Is',\n                'ext': 'mp4',\n                'title': 'Blue Devils Drumline Stanford lot 2016',\n                'upload_date': '20160627',\n                'uploader_id': 'GENOCIDE8GENERAL10',\n                'uploader': 'cylus cyrus',\n            },\n        },\n        {\n            # video stored on custom kaltura server\n            'url': 'http://www.expansion.com/multimedia/videos.html?media=EQcM30NHIPv',\n            'md5': '537617d06e64dfed891fa1593c4b30cc',\n            'info_dict': {\n                'id': '0_1iotm5bh',\n                'ext': 'mp4',\n                'title': 'Elecciones brit\u00e1nicas: 5 lecciones para Rajoy',\n                'description': 'md5:435a89d68b9760b92ce67ed227055f16',\n                'uploader_id': 'videos.expansion@el-mundo.net',\n                'upload_date': '20150429',\n                'timestamp': 1430303472,\n            },\n            'add_ie': ['Kaltura'],\n        },\n        {\n            # Non-standard Vimeo embed\n            'url': 'https://openclassrooms.com/courses/understanding-the-web',\n            'md5': '64d86f1c7d369afd9a78b38cbb88d80a',\n            'info_dict': {\n                'id': '148867247',\n                'ext': 'mp4',\n                'title': 'Understanding the web - Teaser',\n                'description': 'This is \"Understanding the web - Teaser\" by openclassrooms on Vimeo, the home for high quality videos and the people who love them.',\n                'upload_date': '20151214',\n                'uploader': 'OpenClassrooms',\n                'uploader_id': 'openclassrooms',\n            },\n            'add_ie': ['Vimeo'],\n        },\n        {\n            # generic vimeo embed that requires original URL passed as Referer\n            'url': 'http://racing4everyone.eu/2016/07/30/formula-1-2016-round12-germany/',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://support.arkena.com/display/PLAY/Ways+to+embed+your+video',\n            'md5': 'b96f2f71b359a8ecd05ce4e1daa72365',\n            'info_dict': {\n                'id': 'b41dda37-d8e7-4d3f-b1b5-9a9db578bdfe',\n                'ext': 'mp4',\n                'title': 'Big Buck Bunny',\n                'description': 'Royalty free test video',\n                'timestamp': 1432816365,\n                'upload_date': '20150528',\n                'is_live': False,\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [ArkenaIE.ie_key()],\n        },\n        {\n            'url': 'http://nova.bg/news/view/2016/08/16/156543/%D0%BD%D0%B0-%D0%BA%D0%BE%D1%81%D1%8A%D0%BC-%D0%BE%D1%82-%D0%B2%D0%B7%D1%80%D0%B8%D0%B2-%D0%BE%D1%82%D1%86%D0%B5%D0%BF%D0%B8%D1%85%D0%B0-%D1%86%D1%8F%D0%BB-%D0%BA%D0%B2%D0%B0%D1%80%D1%82%D0%B0%D0%BB-%D0%B7%D0%B0%D1%80%D0%B0%D0%B4%D0%B8-%D0%B8%D0%B7%D1%82%D0%B8%D1%87%D0%B0%D0%BD%D0%B5-%D0%BD%D0%B0-%D0%B3%D0%B0%D0%B7-%D0%B2-%D0%BF%D0%BB%D0%BE%D0%B2%D0%B4%D0%B8%D0%B2/',\n            'info_dict': {\n                'id': '1c7141f46c',\n                'ext': 'mp4',\n                'title': '\u041d\u0410 \u041a\u041e\u0421\u042a\u041c \u041e\u0422 \u0412\u0417\u0420\u0418\u0412: \u0418\u0437\u0442\u0438\u0447\u0430\u043d\u0435 \u043d\u0430 \u0433\u0430\u0437 \u043d\u0430 \u0431\u0435\u043d\u0437\u0438\u043d\u043e\u0441\u0442\u0430\u043d\u0446\u0438\u044f \u0432 \u041f\u043b\u043e\u0432\u0434\u0438\u0432',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [Vbox7IE.ie_key()],\n        },\n        {\n            # DBTV embeds\n            'url': 'http://www.dagbladet.no/2016/02/23/nyheter/nordlys/ski/troms/ver/43254897/',\n            'info_dict': {\n                'id': '43254897',\n                'title': 'Etter ett \u00e5rs planlegging, klaffet endelig alt: - Jeg m\u00e5tte ta en liten dans',\n            },\n            'playlist_mincount': 3,\n        },\n        {\n            # Videa embeds\n            'url': 'http://forum.dvdtalk.com/movie-talk/623756-deleted-magic-star-wars-ot-deleted-alt-scenes-docu-style.html',\n            'info_dict': {\n                'id': '623756-deleted-magic-star-wars-ot-deleted-alt-scenes-docu-style',\n                'title': 'Deleted Magic - Star Wars: OT Deleted / Alt. Scenes Docu. Style - DVD Talk Forum',\n            },\n            'playlist_mincount': 2,\n        },\n        {\n            # 20 minuten embed\n            'url': 'http://www.20min.ch/schweiz/news/story/So-kommen-Sie-bei-Eis-und-Schnee-sicher-an-27032552',\n            'info_dict': {\n                'id': '523629',\n                'ext': 'mp4',\n                'title': 'So kommen Sie bei Eis und Schnee sicher an',\n                'description': 'md5:117c212f64b25e3d95747e5276863f7d',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [TwentyMinutenIE.ie_key()],\n        },\n        {\n            # VideoPress embed\n            'url': 'https://en.support.wordpress.com/videopress/',\n            'info_dict': {\n                'id': 'OcobLTqC',\n                'ext': 'm4v',\n                'title': 'IMG_5786',\n                'timestamp': 1435711927,\n                'upload_date': '20150701',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [VideoPressIE.ie_key()],\n        },\n        {\n            # Rutube embed\n            'url': 'http://magazzino.friday.ru/videos/vipuski/kazan-2',\n            'info_dict': {\n                'id': '9b3d5bee0a8740bf70dfd29d3ea43541',\n                'ext': 'flv',\n                'title': '\u041c\u0430\u0433\u0430\u0437\u0437\u0438\u043d\u043e: \u041a\u0430\u0437\u0430\u043d\u044c 2',\n                'description': 'md5:99bccdfac2269f0e8fdbc4bbc9db184a',\n                'uploader': '\u041c\u0430\u0433\u0430\u0437\u0437\u0438\u043d\u043e',\n                'upload_date': '20170228',\n                'uploader_id': '996642',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [RutubeIE.ie_key()],\n        },\n        {\n            # ThePlatform embedded with whitespaces in URLs\n            'url': 'http://www.golfchannel.com/topics/shows/golftalkcentral.htm',\n            'only_matching': True,\n        },\n        {\n            # Senate ISVP iframe https\n            'url': 'https://www.hsgac.senate.gov/hearings/canadas-fast-track-refugee-plan-unanswered-questions-and-implications-for-us-national-security',\n            'md5': 'fb8c70b0b515e5037981a2492099aab8',\n            'info_dict': {\n                'id': 'govtaff020316',\n                'ext': 'mp4',\n                'title': 'Integrated Senate Video Player',\n            },\n            'add_ie': [SenateISVPIE.ie_key()],\n        },\n        {\n            # Limelight embeds (1 channel embed + 4 media embeds)\n            'url': 'http://www.sedona.com/FacilitatorTraining2017',\n            'info_dict': {\n                'id': 'FacilitatorTraining2017',\n                'title': 'Facilitator Training 2017',\n            },\n            'playlist_mincount': 5,\n        },\n        {\n            # Limelight embed (LimelightPlayerUtil.embed)\n            'url': 'https://tv5.ca/videos?v=xuu8qowr291ri',\n            'info_dict': {\n                'id': '95d035dc5c8a401588e9c0e6bd1e9c92',\n                'ext': 'mp4',\n                'title': '07448641',\n                'timestamp': 1499890639,\n                'upload_date': '20170712',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': ['LimelightMedia'],\n        },\n        {\n            'url': 'http://kron4.com/2017/04/28/standoff-with-walnut-creek-murder-suspect-ends-with-arrest/',\n            'info_dict': {\n                'id': 'standoff-with-walnut-creek-murder-suspect-ends-with-arrest',\n                'title': 'Standoff with Walnut Creek murder suspect ends',\n                'description': 'md5:3ccc48a60fc9441eeccfc9c469ebf788',\n            },\n            'playlist_mincount': 4,\n        },\n        {\n            # WashingtonPost embed\n            'url': 'http://www.vanityfair.com/hollywood/2017/04/donald-trump-tv-pitches',\n            'info_dict': {\n                'id': '8caf6e88-d0ec-11e5-90d3-34c2c42653ac',\n                'ext': 'mp4',\n                'title': \"No one has seen the drama series based on Trump's life \\u2014 until now\",\n                'description': 'Donald Trump wanted a weekly TV drama based on his life. It never aired. But The Washington Post recently obtained a scene from the pilot script \u2014 and enlisted actors.',\n                'timestamp': 1455216756,\n                'uploader': 'The Washington Post',\n                'upload_date': '20160211',\n            },\n            'add_ie': [WashingtonPostIE.ie_key()],\n        },\n        {\n            # Mediaset embed\n            'url': 'http://www.tgcom24.mediaset.it/politica/serracchiani-voglio-vivere-in-una-societa-aperta-reazioni-sproporzionate-_3071354-201702a.shtml',\n            'info_dict': {\n                'id': '720642',\n                'ext': 'mp4',\n                'title': 'Serracchiani: \"Voglio vivere in una societ\u00e0 aperta, con tutela del patto di fiducia\"',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [MediasetIE.ie_key()],\n        },\n        {\n            # JOJ.sk embeds\n            'url': 'https://www.noviny.sk/slovensko/238543-slovenskom-sa-prehnala-vlna-silnych-burok',\n            'info_dict': {\n                'id': '238543-slovenskom-sa-prehnala-vlna-silnych-burok',\n                'title': 'Slovenskom sa prehnala vlna siln\u00fdch b\u00farok',\n            },\n            'playlist_mincount': 5,\n            'add_ie': [JojIE.ie_key()],\n        },\n        {\n            # AMP embed (see https://www.ampproject.org/docs/reference/components/amp-video)\n            'url': 'https://tvrain.ru/amp/418921/',\n            'md5': 'cc00413936695987e8de148b67d14f1d',\n            'info_dict': {\n                'id': '418921',\n                'ext': 'mp4',\n                'title': '\u0421\u0442\u0430\u0441 \u041d\u0430\u043c\u0438\u043d: \u00ab\u041c\u044b \u043d\u0430\u0440\u0443\u0448\u0438\u043b\u0438 \u0434\u0435\u0432\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u041a\u0440\u0435\u043c\u043b\u044f\u00bb',\n            },\n        },\n        {\n            # vzaar embed\n            'url': 'http://help.vzaar.com/article/165-embedding-video',\n            'md5': '7e3919d9d2620b89e3e00bec7fe8c9d4',\n            'info_dict': {\n                'id': '8707641',\n                'ext': 'mp4',\n                'title': 'Building A Business Online: Principal Chairs Q & A',\n            },\n        },\n        {\n            # multiple HTML5 videos on one page\n            'url': 'https://www.paragon-software.com/home/rk-free/keyscenarios.html',\n            'info_dict': {\n                'id': 'keyscenarios',\n                'title': 'Rescue Kit 14 Free Edition - Getting started',\n            },\n            'playlist_count': 4,\n        },\n        {\n            # vshare embed\n            'url': 'https://youtube-dl-demo.neocities.org/vshare.html',\n            'md5': '17b39f55b5497ae8b59f5fbce8e35886',\n            'info_dict': {\n                'id': '0f64ce6',\n                'title': 'vl14062007715967',\n                'ext': 'mp4',\n            }\n        },\n        {\n            'url': 'http://www.heidelberg-laureate-forum.org/blog/video/lecture-friday-september-23-2016-sir-c-antony-r-hoare/',\n            'md5': 'aecd089f55b1cb5a59032cb049d3a356',\n            'info_dict': {\n                'id': '90227f51a80c4d8f86c345a7fa62bd9a1d',\n                'ext': 'mp4',\n                'title': 'Lecture: Friday, September 23, 2016 - Sir Tony Hoare',\n                'description': 'md5:5a51db84a62def7b7054df2ade403c6c',\n                'timestamp': 1474354800,\n                'upload_date': '20160920',\n            }\n        },\n        {\n            'url': 'http://www.kidzworld.com/article/30935-trolls-the-beat-goes-on-interview-skylar-astin-and-amanda-leighton',\n            'info_dict': {\n                'id': '1731611',\n                'ext': 'mp4',\n                'title': 'Official Trailer | TROLLS: THE BEAT GOES ON!',\n                'description': 'md5:eb5f23826a027ba95277d105f248b825',\n                'timestamp': 1516100691,\n                'upload_date': '20180116',\n            },\n            'params': {\n                'skip_download': True,\n            },\n            'add_ie': [SpringboardPlatformIE.ie_key()],\n        },\n        {\n            'url': 'https://www.youtube.com/shared?ci=1nEzmT-M4fU',\n            'info_dict': {\n                'id': 'uPDB5I9wfp8',\n                'ext': 'webm',\n                'title': 'Pocoyo: 90 minutos de epis\u00f3dios completos Portugu\u00eas para crian\u00e7as - PARTE 3',\n                'description': 'md5:d9e4d9346a2dfff4c7dc4c8cec0f546d',\n                'upload_date': '20160219',\n                'uploader': 'Pocoyo - Portugu\u00eas (BR)',\n                'uploader_id': 'PocoyoBrazil',\n            },\n            'add_ie': [YoutubeIE.ie_key()],\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://www.yapfiles.ru/show/1872528/690b05d3054d2dbe1e69523aa21bb3b1.mp4.html',\n            'info_dict': {\n                'id': 'vMDE4NzI1Mjgt690b',\n                'ext': 'mp4',\n                'title': '\u041a\u043e\u0442\u044f\u0442\u0430',\n            },\n            'add_ie': [YapFilesIE.ie_key()],\n            'params': {\n                'skip_download': True,\n            },\n        }\n        # {\n        #     # TODO: find another test\n        #     # http://schema.org/VideoObject\n        #     'url': 'https://flipagram.com/f/nyvTSJMKId',\n        #     'md5': '888dcf08b7ea671381f00fab74692755',\n        #     'info_dict': {\n        #         'id': 'nyvTSJMKId',\n        #         'ext': 'mp4',\n        #         'title': 'Flipagram by sjuria101 featuring Midnight Memories by One Direction',\n        #         'description': '#love for cats.',\n        #         'timestamp': 1461244995,\n        #         'upload_date': '20160421',\n        #     },\n        #     'params': {\n        #         'force_generic_extractor': True,\n        #     },\n        # }\n    ]\n\n    def report_following_redirect(self, new_url):\n        \"\"\"Report information extraction.\"\"\"\n        self._downloader.to_screen('[redirect] Following redirect to %s' % new_url)\n\n    def _extract_rss(self, url, video_id, doc):\n        playlist_title = doc.find('./channel/title').text\n        playlist_desc_el = doc.find('./channel/description')\n        playlist_desc = None if playlist_desc_el is None else playlist_desc_el.text\n\n        entries = []\n        for it in doc.findall('./channel/item'):\n            next_url = xpath_text(it, 'link', fatal=False)\n            if not next_url:\n                enclosure_nodes = it.findall('./enclosure')\n                for e in enclosure_nodes:\n                    next_url = e.attrib.get('url')\n                    if next_url:\n                        break\n\n            if not next_url:\n                continue\n\n            entries.append({\n                '_type': 'url_transparent',\n                'url': next_url,\n                'title': it.find('title').text,\n            })\n\n        return {\n            '_type': 'playlist',\n            'id': url,\n            'title': playlist_title,\n            'description': playlist_desc,\n            'entries': entries,\n        }\n\n    def _extract_camtasia(self, url, video_id, webpage):\n        \"\"\" Returns None if no camtasia video can be found. \"\"\"\n\n        camtasia_cfg = self._search_regex(\n            r'fo\\.addVariable\\(\\s*\"csConfigFile\",\\s*\"([^\"]+)\"\\s*\\);',\n            webpage, 'camtasia configuration file', default=None)\n        if camtasia_cfg is None:\n            return None\n\n        title = self._html_search_meta('DC.title', webpage, fatal=True)\n\n        camtasia_url = compat_urlparse.urljoin(url, camtasia_cfg)\n        camtasia_cfg = self._download_xml(\n            camtasia_url, video_id,\n            note='Downloading camtasia configuration',\n            errnote='Failed to download camtasia configuration')\n        fileset_node = camtasia_cfg.find('./playlist/array/fileset')\n\n        entries = []\n        for n in fileset_node.getchildren():\n            url_n = n.find('./uri')\n            if url_n is None:\n                continue\n\n            entries.append({\n                'id': os.path.splitext(url_n.text.rpartition('/')[2])[0],\n                'title': '%s - %s' % (title, n.tag),\n                'url': compat_urlparse.urljoin(url, url_n.text),\n                'duration': float_or_none(n.find('./duration').text),\n            })\n\n        return {\n            '_type': 'playlist',\n            'entries': entries,\n            'title': title,\n        }\n\n    def _real_extract(self, url):\n        if url.startswith('//'):\n            return {\n                '_type': 'url',\n                'url': self.http_scheme() + url,\n            }\n\n        parsed_url = compat_urlparse.urlparse(url)\n        if not parsed_url.scheme:\n            default_search = self._downloader.params.get('default_search')\n            if default_search is None:\n                default_search = 'fixup_error'\n\n            if default_search in ('auto', 'auto_warning', 'fixup_error'):\n                if '/' in url:\n                    self._downloader.report_warning('The url doesn\\'t specify the protocol, trying with http')\n                    return self.url_result('http://' + url)\n                elif default_search != 'fixup_error':\n                    if default_search == 'auto_warning':\n                        if re.match(r'^(?:url|URL)$', url):\n                            raise ExtractorError(\n                                'Invalid URL:  %r . Call youtube-dl like this:  youtube-dl -v \"https://www.youtube.com/watch?v=BaW_jenozKc\"  ' % url,\n                                expected=True)\n                        else:\n                            self._downloader.report_warning(\n                                'Falling back to youtube search for  %s . Set --default-search \"auto\" to suppress this warning.' % url)\n                    return self.url_result('ytsearch:' + url)\n\n            if default_search in ('error', 'fixup_error'):\n                raise ExtractorError(\n                    '%r is not a valid URL. '\n                    'Set --default-search \"ytsearch\" (or run  youtube-dl \"ytsearch:%s\" ) to search YouTube'\n                    % (url, url), expected=True)\n            else:\n                if ':' not in default_search:\n                    default_search += ':'\n                return self.url_result(default_search + url)\n\n        url, smuggled_data = unsmuggle_url(url)\n        force_videoid = None\n        is_intentional = smuggled_data and smuggled_data.get('to_generic')\n        if smuggled_data and 'force_videoid' in smuggled_data:\n            force_videoid = smuggled_data['force_videoid']\n            video_id = force_videoid\n        else:\n            video_id = self._generic_id(url)\n\n        self.to_screen('%s: Requesting header' % video_id)\n\n        head_req = HEADRequest(url)\n        head_response = self._request_webpage(\n            head_req, video_id,\n            note=False, errnote='Could not send HEAD request to %s' % url,\n            fatal=False)\n\n        if head_response is not False:\n            # Check for redirect\n            new_url = compat_str(head_response.geturl())\n            if url != new_url:\n                self.report_following_redirect(new_url)\n                if force_videoid:\n                    new_url = smuggle_url(\n                        new_url, {'force_videoid': force_videoid})\n                return self.url_result(new_url)\n\n        full_response = None\n        if head_response is False:\n            request = sanitized_Request(url)\n            request.add_header('Accept-Encoding', '*')\n            full_response = self._request_webpage(request, video_id)\n            head_response = full_response\n\n        info_dict = {\n            'id': video_id,\n            'title': self._generic_title(url),\n            'upload_date': unified_strdate(head_response.headers.get('Last-Modified'))\n        }\n\n        # Check for direct link to a video\n        content_type = head_response.headers.get('Content-Type', '').lower()\n        m = re.match(r'^(?P<type>audio|video|application(?=/(?:ogg$|(?:vnd\\.apple\\.|x-)?mpegurl)))/(?P<format_id>[^;\\s]+)', content_type)\n        if m:\n            format_id = compat_str(m.group('format_id'))\n            if format_id.endswith('mpegurl'):\n                formats = self._extract_m3u8_formats(url, video_id, 'mp4')\n            elif format_id == 'f4m':\n                formats = self._extract_f4m_formats(url, video_id)\n            else:\n                formats = [{\n                    'format_id': format_id,\n                    'url': url,\n                    'vcodec': 'none' if m.group('type') == 'audio' else None\n                }]\n                info_dict['direct'] = True\n            self._sort_formats(formats)\n            info_dict['formats'] = formats\n            return info_dict\n\n        if not self._downloader.params.get('test', False) and not is_intentional:\n            force = self._downloader.params.get('force_generic_extractor', False)\n            self._downloader.report_warning(\n                '%s on generic information extractor.' % ('Forcing' if force else 'Falling back'))\n\n        if not full_response:\n            request = sanitized_Request(url)\n            # Some webservers may serve compressed content of rather big size (e.g. gzipped flac)\n            # making it impossible to download only chunk of the file (yet we need only 512kB to\n            # test whether it's HTML or not). According to youtube-dl default Accept-Encoding\n            # that will always result in downloading the whole file that is not desirable.\n            # Therefore for extraction pass we have to override Accept-Encoding to any in order\n            # to accept raw bytes and being able to download only a chunk.\n            # It may probably better to solve this by checking Content-Type for application/octet-stream\n            # after HEAD request finishes, but not sure if we can rely on this.\n            request.add_header('Accept-Encoding', '*')\n            full_response = self._request_webpage(request, video_id)\n\n        first_bytes = full_response.read(512)\n\n        # Is it an M3U playlist?\n        if first_bytes.startswith(b'#EXTM3U'):\n            info_dict['formats'] = self._extract_m3u8_formats(url, video_id, 'mp4')\n            self._sort_formats(info_dict['formats'])\n            return info_dict\n\n        # Maybe it's a direct link to a video?\n        # Be careful not to download the whole thing!\n        if not is_html(first_bytes):\n            self._downloader.report_warning(\n                'URL could be a direct video link, returning it as such.')\n            info_dict.update({\n                'direct': True,\n                'url': url,\n            })\n            return info_dict\n\n        webpage = self._webpage_read_content(\n            full_response, url, video_id, prefix=first_bytes)\n\n        self.report_extraction(video_id)\n\n        # Is it an RSS feed, a SMIL file, an XSPF playlist or a MPD manifest?\n        try:\n            doc = compat_etree_fromstring(webpage.encode('utf-8'))\n            if doc.tag == 'rss':\n                return self._extract_rss(url, video_id, doc)\n            elif doc.tag == 'SmoothStreamingMedia':\n                info_dict['formats'] = self._parse_ism_formats(doc, url)\n                self._sort_formats(info_dict['formats'])\n                return info_dict\n            elif re.match(r'^(?:{[^}]+})?smil$', doc.tag):\n                smil = self._parse_smil(doc, url, video_id)\n                self._sort_formats(smil['formats'])\n                return smil\n            elif doc.tag == '{http://xspf.org/ns/0/}playlist':\n                return self.playlist_result(self._parse_xspf(doc, video_id), video_id)\n            elif re.match(r'(?i)^(?:{[^}]+})?MPD$', doc.tag):\n                info_dict['formats'] = self._parse_mpd_formats(\n                    doc,\n                    mpd_base_url=compat_str(full_response.geturl()).rpartition('/')[0],\n                    mpd_url=url)\n                self._sort_formats(info_dict['formats'])\n                return info_dict\n            elif re.match(r'^{http://ns\\.adobe\\.com/f4m/[12]\\.0}manifest$', doc.tag):\n                info_dict['formats'] = self._parse_f4m_formats(doc, url, video_id)\n                self._sort_formats(info_dict['formats'])\n                return info_dict\n        except compat_xml_parse_error:\n            pass\n\n        # Is it a Camtasia project?\n        camtasia_res = self._extract_camtasia(url, video_id, webpage)\n        if camtasia_res is not None:\n            return camtasia_res\n\n        # Sometimes embedded video player is hidden behind percent encoding\n        # (e.g. https://github.com/rg3/youtube-dl/issues/2448)\n        # Unescaping the whole page allows to handle those cases in a generic way\n        webpage = compat_urllib_parse_unquote(webpage)\n\n        # it's tempting to parse this further, but you would\n        # have to take into account all the variations like\n        #   Video Title - Site Name\n        #   Site Name | Video Title\n        #   Video Title - Tagline | Site Name\n        # and so on and so forth; it's just not practical\n        video_title = self._og_search_title(\n            webpage, default=None) or self._html_search_regex(\n            r'(?s)<title>(.*?)</title>', webpage, 'video title',\n            default='video')\n\n        # Try to detect age limit automatically\n        age_limit = self._rta_search(webpage)\n        # And then there are the jokers who advertise that they use RTA,\n        # but actually don't.\n        AGE_LIMIT_MARKERS = [\n            r'Proudly Labeled <a href=\"http://www\\.rtalabel\\.org/\" title=\"Restricted to Adults\">RTA</a>',\n        ]\n        if any(re.search(marker, webpage) for marker in AGE_LIMIT_MARKERS):\n            age_limit = 18\n\n        # video uploader is domain name\n        video_uploader = self._search_regex(\n            r'^(?:https?://)?([^/]*)/.*', url, 'video uploader')\n\n        video_description = self._og_search_description(webpage, default=None)\n        video_thumbnail = self._og_search_thumbnail(webpage, default=None)\n\n        info_dict.update({\n            'title': video_title,\n            'description': video_description,\n            'thumbnail': video_thumbnail,\n            'age_limit': age_limit,\n        })\n\n        # Look for Brightcove Legacy Studio embeds\n        bc_urls = BrightcoveLegacyIE._extract_brightcove_urls(webpage)\n        if bc_urls:\n            entries = [{\n                '_type': 'url',\n                'url': smuggle_url(bc_url, {'Referer': url}),\n                'ie_key': 'BrightcoveLegacy'\n            } for bc_url in bc_urls]\n\n            return {\n                '_type': 'playlist',\n                'title': video_title,\n                'id': video_id,\n                'entries': entries,\n            }\n\n        # Look for Brightcove New Studio embeds\n        bc_urls = BrightcoveNewIE._extract_urls(self, webpage)\n        if bc_urls:\n            return self.playlist_from_matches(\n                bc_urls, video_id, video_title,\n                getter=lambda x: smuggle_url(x, {'referrer': url}),\n                ie='BrightcoveNew')\n\n        # Look for Nexx embeds\n        nexx_urls = NexxIE._extract_urls(webpage)\n        if nexx_urls:\n            return self.playlist_from_matches(nexx_urls, video_id, video_title, ie=NexxIE.ie_key())\n\n        # Look for Nexx iFrame embeds\n        nexx_embed_urls = NexxEmbedIE._extract_urls(webpage)\n        if nexx_embed_urls:\n            return self.playlist_from_matches(nexx_embed_urls, video_id, video_title, ie=NexxEmbedIE.ie_key())\n\n        # Look for ThePlatform embeds\n        tp_urls = ThePlatformIE._extract_urls(webpage)\n        if tp_urls:\n            return self.playlist_from_matches(tp_urls, video_id, video_title, ie='ThePlatform')\n\n        # Look for Vessel embeds\n        vessel_urls = VesselIE._extract_urls(webpage)\n        if vessel_urls:\n            return self.playlist_from_matches(vessel_urls, video_id, video_title, ie=VesselIE.ie_key())\n\n        # Look for embedded rtl.nl player\n        matches = re.findall(\n            r'<iframe[^>]+?src=\"((?:https?:)?//(?:(?:www|static)\\.)?rtl\\.nl/(?:system/videoplayer/[^\"]+(?:video_)?)?embed[^\"]+)\"',\n            webpage)\n        if matches:\n            return self.playlist_from_matches(matches, video_id, video_title, ie='RtlNl')\n\n        vimeo_urls = VimeoIE._extract_urls(url, webpage)\n        if vimeo_urls:\n            return self.playlist_from_matches(vimeo_urls, video_id, video_title, ie=VimeoIE.ie_key())\n\n        vid_me_embed_url = self._search_regex(\n            r'src=[\\'\"](https?://vid\\.me/[^\\'\"]+)[\\'\"]',\n            webpage, 'vid.me embed', default=None)\n        if vid_me_embed_url is not None:\n            return self.url_result(vid_me_embed_url, 'Vidme')\n\n        # Look for YouTube embeds\n        youtube_urls = YoutubeIE._extract_urls(webpage)\n        if youtube_urls:\n            return self.playlist_from_matches(\n                youtube_urls, video_id, video_title, ie=YoutubeIE.ie_key())\n\n        matches = DailymotionIE._extract_urls(webpage)\n        if matches:\n            return self.playlist_from_matches(matches, video_id, video_title)\n\n        # Look for embedded Dailymotion playlist player (#3822)\n        m = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?dailymotion\\.[a-z]{2,3}/widget/jukebox\\?.+?)\\1', webpage)\n        if m:\n            playlists = re.findall(\n                r'list\\[\\]=/playlist/([^/]+)/', unescapeHTML(m.group('url')))\n            if playlists:\n                return self.playlist_from_matches(\n                    playlists, video_id, video_title, lambda p: '//dailymotion.com/playlist/%s' % p)\n\n        # Look for DailyMail embeds\n        dailymail_urls = DailyMailIE._extract_urls(webpage)\n        if dailymail_urls:\n            return self.playlist_from_matches(\n                dailymail_urls, video_id, video_title, ie=DailyMailIE.ie_key())\n\n        # Look for embedded Wistia player\n        wistia_url = WistiaIE._extract_url(webpage)\n        if wistia_url:\n            return {\n                '_type': 'url_transparent',\n                'url': self._proto_relative_url(wistia_url),\n                'ie_key': WistiaIE.ie_key(),\n                'uploader': video_uploader,\n            }\n\n        # Look for SVT player\n        svt_url = SVTIE._extract_url(webpage)\n        if svt_url:\n            return self.url_result(svt_url, 'SVT')\n\n        # Look for Bandcamp pages with custom domain\n        mobj = re.search(r'<meta property=\"og:url\"[^>]*?content=\"(.*?bandcamp\\.com.*?)\"', webpage)\n        if mobj is not None:\n            burl = unescapeHTML(mobj.group(1))\n            # Don't set the extractor because it can be a track url or an album\n            return self.url_result(burl)\n\n        # Look for embedded Vevo player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//(?:cache\\.)?vevo\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for embedded Viddler player\n        mobj = re.search(\n            r'<(?:iframe[^>]+?src|param[^>]+?value)=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?viddler\\.com/(?:embed|player)/.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for NYTimes player\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//graphics8\\.nytimes\\.com/bcvideo/[^/]+/iframe/embed\\.html.+?)\\1>',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for Libsyn player\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//html5-player\\.libsyn\\.com/embed/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for Ooyala videos\n        mobj = (re.search(r'player\\.ooyala\\.com/[^\"?]+[?#][^\"]*?(?:embedCode|ec)=(?P<ec>[^\"&]+)', webpage) or\n                re.search(r'OO\\.Player\\.create\\([\\'\"].*?[\\'\"],\\s*[\\'\"](?P<ec>.{32})[\\'\"]', webpage) or\n                re.search(r'OO\\.Player\\.create\\.apply\\(\\s*OO\\.Player\\s*,\\s*op\\(\\s*\\[\\s*[\\'\"][^\\'\"]*[\\'\"]\\s*,\\s*[\\'\"](?P<ec>.{32})[\\'\"]', webpage) or\n                re.search(r'SBN\\.VideoLinkset\\.ooyala\\([\\'\"](?P<ec>.{32})[\\'\"]\\)', webpage) or\n                re.search(r'data-ooyala-video-id\\s*=\\s*[\\'\"](?P<ec>.{32})[\\'\"]', webpage))\n        if mobj is not None:\n            embed_token = self._search_regex(\n                r'embedToken[\\'\"]?\\s*:\\s*[\\'\"]([^\\'\"]+)',\n                webpage, 'ooyala embed token', default=None)\n            return OoyalaIE._build_url_result(smuggle_url(\n                mobj.group('ec'), {\n                    'domain': url,\n                    'embed_token': embed_token,\n                }))\n\n        # Look for multiple Ooyala embeds on SBN network websites\n        mobj = re.search(r'SBN\\.VideoLinkset\\.entryGroup\\((\\[.*?\\])', webpage)\n        if mobj is not None:\n            embeds = self._parse_json(mobj.group(1), video_id, fatal=False)\n            if embeds:\n                return self.playlist_from_matches(\n                    embeds, video_id, video_title,\n                    getter=lambda v: OoyalaIE._url_for_embed_code(smuggle_url(v['provider_video_id'], {'domain': url})), ie='Ooyala')\n\n        # Look for Aparat videos\n        mobj = re.search(r'<iframe .*?src=\"(http://www\\.aparat\\.com/video/[^\"]+)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group(1), 'Aparat')\n\n        # Look for MPORA videos\n        mobj = re.search(r'<iframe .*?src=\"(http://mpora\\.(?:com|de)/videos/[^\"]+)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group(1), 'Mpora')\n\n        # Look for embedded NovaMov-based player\n        mobj = re.search(\n            r'''(?x)<(?:pagespeed_)?iframe[^>]+?src=([\"\\'])\n                    (?P<url>http://(?:(?:embed|www)\\.)?\n                        (?:novamov\\.com|\n                           nowvideo\\.(?:ch|sx|eu|at|ag|co)|\n                           videoweed\\.(?:es|com)|\n                           movshare\\.(?:net|sx|ag)|\n                           divxstage\\.(?:eu|net|ch|co|at|ag))\n                        /embed\\.php.+?)\\1''', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for embedded Facebook player\n        facebook_urls = FacebookIE._extract_urls(webpage)\n        if facebook_urls:\n            return self.playlist_from_matches(facebook_urls, video_id, video_title)\n\n        # Look for embedded VK player\n        mobj = re.search(r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://vk\\.com/video_ext\\.php.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'VK')\n\n        # Look for embedded Odnoklassniki player\n        mobj = re.search(r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://(?:odnoklassniki|ok)\\.ru/videoembed/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Odnoklassniki')\n\n        # Look for embedded ivi player\n        mobj = re.search(r'<embed[^>]+?src=([\"\\'])(?P<url>https?://(?:www\\.)?ivi\\.ru/video/player.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Ivi')\n\n        # Look for embedded Huffington Post player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://embed\\.live\\.huffingtonpost\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'HuffPost')\n\n        # Look for embed.ly\n        mobj = re.search(r'class=[\"\\']embedly-card[\"\\'][^>]href=[\"\\'](?P<url>[^\"\\']+)', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n        mobj = re.search(r'class=[\"\\']embedly-embed[\"\\'][^>]src=[\"\\'][^\"\\']*url=(?P<url>[^&]+)', webpage)\n        if mobj is not None:\n            return self.url_result(compat_urllib_parse_unquote(mobj.group('url')))\n\n        # Look for funnyordie embed\n        matches = re.findall(r'<iframe[^>]+?src=\"(https?://(?:www\\.)?funnyordie\\.com/embed/[^\"]+)\"', webpage)\n        if matches:\n            return self.playlist_from_matches(\n                matches, video_id, video_title, getter=unescapeHTML, ie='FunnyOrDie')\n\n        # Look for BBC iPlayer embed\n        matches = re.findall(r'setPlaylist\\(\"(https?://www\\.bbc\\.co\\.uk/iplayer/[^/]+/[\\da-z]{8})\"\\)', webpage)\n        if matches:\n            return self.playlist_from_matches(matches, video_id, video_title, ie='BBCCoUk')\n\n        # Look for embedded RUTV player\n        rutv_url = RUTVIE._extract_url(webpage)\n        if rutv_url:\n            return self.url_result(rutv_url, 'RUTV')\n\n        # Look for embedded TVC player\n        tvc_url = TVCIE._extract_url(webpage)\n        if tvc_url:\n            return self.url_result(tvc_url, 'TVC')\n\n        # Look for embedded SportBox player\n        sportbox_urls = SportBoxEmbedIE._extract_urls(webpage)\n        if sportbox_urls:\n            return self.playlist_from_matches(sportbox_urls, video_id, video_title, ie='SportBoxEmbed')\n\n        # Look for embedded XHamster player\n        xhamster_urls = XHamsterEmbedIE._extract_urls(webpage)\n        if xhamster_urls:\n            return self.playlist_from_matches(xhamster_urls, video_id, video_title, ie='XHamsterEmbed')\n\n        # Look for embedded TNAFlixNetwork player\n        tnaflix_urls = TNAFlixNetworkEmbedIE._extract_urls(webpage)\n        if tnaflix_urls:\n            return self.playlist_from_matches(tnaflix_urls, video_id, video_title, ie=TNAFlixNetworkEmbedIE.ie_key())\n\n        # Look for embedded PornHub player\n        pornhub_urls = PornHubIE._extract_urls(webpage)\n        if pornhub_urls:\n            return self.playlist_from_matches(pornhub_urls, video_id, video_title, ie=PornHubIE.ie_key())\n\n        # Look for embedded DrTuber player\n        drtuber_urls = DrTuberIE._extract_urls(webpage)\n        if drtuber_urls:\n            return self.playlist_from_matches(drtuber_urls, video_id, video_title, ie=DrTuberIE.ie_key())\n\n        # Look for embedded RedTube player\n        redtube_urls = RedTubeIE._extract_urls(webpage)\n        if redtube_urls:\n            return self.playlist_from_matches(redtube_urls, video_id, video_title, ie=RedTubeIE.ie_key())\n\n        # Look for embedded Tvigle player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?:)?//cloud\\.tvigle\\.ru/video/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Tvigle')\n\n        # Look for embedded TED player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://embed(?:-ssl)?\\.ted\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'TED')\n\n        # Look for embedded Ustream videos\n        ustream_url = UstreamIE._extract_url(webpage)\n        if ustream_url:\n            return self.url_result(ustream_url, UstreamIE.ie_key())\n\n        # Look for embedded arte.tv player\n        mobj = re.search(\n            r'<(?:script|iframe) [^>]*?src=\"(?P<url>http://www\\.arte\\.tv/(?:playerv2/embed|arte_vp/index)[^\"]+)\"',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'ArteTVEmbed')\n\n        # Look for embedded francetv player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>(?:https?://)?embed\\.francetv\\.fr/\\?ue=.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for embedded smotri.com player\n        smotri_url = SmotriIE._extract_url(webpage)\n        if smotri_url:\n            return self.url_result(smotri_url, 'Smotri')\n\n        # Look for embedded Myvi.ru player\n        myvi_url = MyviIE._extract_url(webpage)\n        if myvi_url:\n            return self.url_result(myvi_url)\n\n        # Look for embedded soundcloud player\n        soundcloud_urls = SoundcloudIE._extract_urls(webpage)\n        if soundcloud_urls:\n            return self.playlist_from_matches(soundcloud_urls, video_id, video_title, getter=unescapeHTML, ie=SoundcloudIE.ie_key())\n\n        # Look for tunein player\n        tunein_urls = TuneInBaseIE._extract_urls(webpage)\n        if tunein_urls:\n            return self.playlist_from_matches(tunein_urls, video_id, video_title)\n\n        # Look for embedded mtvservices player\n        mtvservices_url = MTVServicesEmbeddedIE._extract_url(webpage)\n        if mtvservices_url:\n            return self.url_result(mtvservices_url, ie='MTVServicesEmbedded')\n\n        # Look for embedded yahoo player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://(?:screen|movies)\\.yahoo\\.com/.+?\\.html\\?format=embed)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Yahoo')\n\n        # Look for embedded sbs.com.au player\n        mobj = re.search(\n            r'''(?x)\n            (?:\n                <meta\\s+property=\"og:video\"\\s+content=|\n                <iframe[^>]+?src=\n            )\n            ([\"\\'])(?P<url>https?://(?:www\\.)?sbs\\.com\\.au/ondemand/video/.+?)\\1''',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'SBS')\n\n        # Look for embedded Cinchcast player\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://player\\.cinchcast\\.com/.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Cinchcast')\n\n        mobj = re.search(\n            r'<iframe[^>]+?src=([\"\\'])(?P<url>https?://m(?:lb)?\\.mlb\\.com/shared/video/embed/embed\\.html\\?.+?)\\1',\n            webpage)\n        if not mobj:\n            mobj = re.search(\n                r'data-video-link=[\"\\'](?P<url>http://m.mlb.com/video/[^\"\\']+)',\n                webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'MLB')\n\n        mobj = re.search(\n            r'<(?:iframe|script)[^>]+?src=([\"\\'])(?P<url>%s)\\1' % CondeNastIE.EMBED_URL,\n            webpage)\n        if mobj is not None:\n            return self.url_result(self._proto_relative_url(mobj.group('url'), scheme='http:'), 'CondeNast')\n\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>https?://(?:new\\.)?livestream\\.com/[^\"]+/player[^\"]+)\"',\n            webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Livestream')\n\n        # Look for Zapiks embed\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?P<url>https?://(?:www\\.)?zapiks\\.fr/index\\.php\\?.+?)\"', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'), 'Zapiks')\n\n        # Look for Kaltura embeds\n        kaltura_url = KalturaIE._extract_url(webpage)\n        if kaltura_url:\n            return self.url_result(smuggle_url(kaltura_url, {'source_url': url}), KalturaIE.ie_key())\n\n        # Look for EaglePlatform embeds\n        eagleplatform_url = EaglePlatformIE._extract_url(webpage)\n        if eagleplatform_url:\n            return self.url_result(smuggle_url(eagleplatform_url, {'referrer': url}), EaglePlatformIE.ie_key())\n\n        # Look for ClipYou (uses EaglePlatform) embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=\"https?://(?P<host>media\\.clipyou\\.ru)/index/player\\?.*\\brecord_id=(?P<id>\\d+).*\"', webpage)\n        if mobj is not None:\n            return self.url_result('eagleplatform:%(host)s:%(id)s' % mobj.groupdict(), 'EaglePlatform')\n\n        # Look for Pladform embeds\n        pladform_url = PladformIE._extract_url(webpage)\n        if pladform_url:\n            return self.url_result(pladform_url)\n\n        # Look for Videomore embeds\n        videomore_url = VideomoreIE._extract_url(webpage)\n        if videomore_url:\n            return self.url_result(videomore_url)\n\n        # Look for Webcaster embeds\n        webcaster_url = WebcasterFeedIE._extract_url(self, webpage)\n        if webcaster_url:\n            return self.url_result(webcaster_url, ie=WebcasterFeedIE.ie_key())\n\n        # Look for Playwire embeds\n        mobj = re.search(\n            r'<script[^>]+data-config=([\"\\'])(?P<url>(?:https?:)?//config\\.playwire\\.com/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for 5min embeds\n        mobj = re.search(\n            r'<meta[^>]+property=\"og:video\"[^>]+content=\"https?://embed\\.5min\\.com/(?P<id>[0-9]+)/?', webpage)\n        if mobj is not None:\n            return self.url_result('5min:%s' % mobj.group('id'), 'FiveMin')\n\n        # Look for Crooks and Liars embeds\n        mobj = re.search(\n            r'<(?:iframe[^>]+src|param[^>]+value)=([\"\\'])(?P<url>(?:https?:)?//embed\\.crooksandliars\\.com/(?:embed|v)/.+?)\\1', webpage)\n        if mobj is not None:\n            return self.url_result(mobj.group('url'))\n\n        # Look for NBC Sports VPlayer embeds\n        nbc_sports_url = NBCSportsVPlayerIE._extract_url(webpage)\n        if nbc_sports_url:\n            return self.url_result(nbc_sports_url, 'NBCSportsVPlayer')\n\n        # Look for NBC News embeds\n        nbc_news_embed_url = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//www\\.nbcnews\\.com/widget/video-embed/[^\"\\']+)\\1', webpage)\n        if nbc_news_embed_url:\n            return self.url_result(nbc_news_embed_url.group('url'), 'NBCNews')\n\n        # Look for Google Drive embeds\n        google_drive_url = GoogleDriveIE._extract_url(webpage)\n        if google_drive_url:\n            return self.url_result(google_drive_url, 'GoogleDrive')\n\n        # Look for UDN embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=\"(?:https?:)?(?P<url>%s)\"' % UDNEmbedIE._PROTOCOL_RELATIVE_VALID_URL, webpage)\n        if mobj is not None:\n            return self.url_result(\n                compat_urlparse.urljoin(url, mobj.group('url')), 'UDNEmbed')\n\n        # Look for Senate ISVP iframe\n        senate_isvp_url = SenateISVPIE._search_iframe_url(webpage)\n        if senate_isvp_url:\n            return self.url_result(senate_isvp_url, 'SenateISVP')\n\n        # Look for OnionStudios embeds\n        onionstudios_url = OnionStudiosIE._extract_url(webpage)\n        if onionstudios_url:\n            return self.url_result(onionstudios_url)\n\n        # Look for ViewLift embeds\n        viewlift_url = ViewLiftEmbedIE._extract_url(webpage)\n        if viewlift_url:\n            return self.url_result(viewlift_url)\n\n        # Look for JWPlatform embeds\n        jwplatform_urls = JWPlatformIE._extract_urls(webpage)\n        if jwplatform_urls:\n            return self.playlist_from_matches(jwplatform_urls, video_id, video_title, ie=JWPlatformIE.ie_key())\n\n        # Look for Digiteka embeds\n        digiteka_url = DigitekaIE._extract_url(webpage)\n        if digiteka_url:\n            return self.url_result(self._proto_relative_url(digiteka_url), DigitekaIE.ie_key())\n\n        # Look for Arkena embeds\n        arkena_url = ArkenaIE._extract_url(webpage)\n        if arkena_url:\n            return self.url_result(arkena_url, ArkenaIE.ie_key())\n\n        # Look for Piksel embeds\n        piksel_url = PikselIE._extract_url(webpage)\n        if piksel_url:\n            return self.url_result(piksel_url, PikselIE.ie_key())\n\n        # Look for Limelight embeds\n        limelight_urls = LimelightBaseIE._extract_urls(webpage, url)\n        if limelight_urls:\n            return self.playlist_result(\n                limelight_urls, video_id, video_title, video_description)\n\n        # Look for Anvato embeds\n        anvato_urls = AnvatoIE._extract_urls(self, webpage, video_id)\n        if anvato_urls:\n            return self.playlist_result(\n                anvato_urls, video_id, video_title, video_description)\n\n        # Look for AdobeTVVideo embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=[\\'\"]((?:https?:)?//video\\.tv\\.adobe\\.com/v/\\d+[^\"]+)[\\'\"]',\n            webpage)\n        if mobj is not None:\n            return self.url_result(\n                self._proto_relative_url(unescapeHTML(mobj.group(1))),\n                'AdobeTVVideo')\n\n        # Look for Vine embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=[\\'\"]((?:https?:)?//(?:www\\.)?vine\\.co/v/[^/]+/embed/(?:simple|postcard))',\n            webpage)\n        if mobj is not None:\n            return self.url_result(\n                self._proto_relative_url(unescapeHTML(mobj.group(1))), 'Vine')\n\n        # Look for VODPlatform embeds\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?vod-platform\\.net/[eE]mbed/.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return self.url_result(\n                self._proto_relative_url(unescapeHTML(mobj.group('url'))), 'VODPlatform')\n\n        # Look for Mangomolo embeds\n        mobj = re.search(\n            r'''(?x)<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//(?:www\\.)?admin\\.mangomolo\\.com/analytics/index\\.php/customers/embed/\n                (?:\n                    video\\?.*?\\bid=(?P<video_id>\\d+)|\n                    index\\?.*?\\bchannelid=(?P<channel_id>(?:[A-Za-z0-9+/=]|%2B|%2F|%3D)+)\n                ).+?)\\1''', webpage)\n        if mobj is not None:\n            info = {\n                '_type': 'url_transparent',\n                'url': self._proto_relative_url(unescapeHTML(mobj.group('url'))),\n                'title': video_title,\n                'description': video_description,\n                'thumbnail': video_thumbnail,\n                'uploader': video_uploader,\n            }\n            video_id = mobj.group('video_id')\n            if video_id:\n                info.update({\n                    'ie_key': 'MangomoloVideo',\n                    'id': video_id,\n                })\n            else:\n                info.update({\n                    'ie_key': 'MangomoloLive',\n                    'id': mobj.group('channel_id'),\n                })\n            return info\n\n        # Look for Instagram embeds\n        instagram_embed_url = InstagramIE._extract_embed_url(webpage)\n        if instagram_embed_url is not None:\n            return self.url_result(\n                self._proto_relative_url(instagram_embed_url), InstagramIE.ie_key())\n\n        # Look for LiveLeak embeds\n        liveleak_urls = LiveLeakIE._extract_urls(webpage)\n        if liveleak_urls:\n            return self.playlist_from_matches(liveleak_urls, video_id, video_title)\n\n        # Look for 3Q SDN embeds\n        threeqsdn_url = ThreeQSDNIE._extract_url(webpage)\n        if threeqsdn_url:\n            return {\n                '_type': 'url_transparent',\n                'ie_key': ThreeQSDNIE.ie_key(),\n                'url': self._proto_relative_url(threeqsdn_url),\n                'title': video_title,\n                'description': video_description,\n                'thumbnail': video_thumbnail,\n                'uploader': video_uploader,\n            }\n\n        # Look for VBOX7 embeds\n        vbox7_url = Vbox7IE._extract_url(webpage)\n        if vbox7_url:\n            return self.url_result(vbox7_url, Vbox7IE.ie_key())\n\n        # Look for DBTV embeds\n        dbtv_urls = DBTVIE._extract_urls(webpage)\n        if dbtv_urls:\n            return self.playlist_from_matches(dbtv_urls, video_id, video_title, ie=DBTVIE.ie_key())\n\n        # Look for Videa embeds\n        videa_urls = VideaIE._extract_urls(webpage)\n        if videa_urls:\n            return self.playlist_from_matches(videa_urls, video_id, video_title, ie=VideaIE.ie_key())\n\n        # Look for 20 minuten embeds\n        twentymin_urls = TwentyMinutenIE._extract_urls(webpage)\n        if twentymin_urls:\n            return self.playlist_from_matches(\n                twentymin_urls, video_id, video_title, ie=TwentyMinutenIE.ie_key())\n\n        # Look for Openload embeds\n        openload_urls = OpenloadIE._extract_urls(webpage)\n        if openload_urls:\n            return self.playlist_from_matches(\n                openload_urls, video_id, video_title, ie=OpenloadIE.ie_key())\n\n        # Look for VideoPress embeds\n        videopress_urls = VideoPressIE._extract_urls(webpage)\n        if videopress_urls:\n            return self.playlist_from_matches(\n                videopress_urls, video_id, video_title, ie=VideoPressIE.ie_key())\n\n        # Look for Rutube embeds\n        rutube_urls = RutubeIE._extract_urls(webpage)\n        if rutube_urls:\n            return self.playlist_from_matches(\n                rutube_urls, video_id, video_title, ie=RutubeIE.ie_key())\n\n        # Look for WashingtonPost embeds\n        wapo_urls = WashingtonPostIE._extract_urls(webpage)\n        if wapo_urls:\n            return self.playlist_from_matches(\n                wapo_urls, video_id, video_title, ie=WashingtonPostIE.ie_key())\n\n        # Look for Mediaset embeds\n        mediaset_urls = MediasetIE._extract_urls(webpage)\n        if mediaset_urls:\n            return self.playlist_from_matches(\n                mediaset_urls, video_id, video_title, ie=MediasetIE.ie_key())\n\n        # Look for JOJ.sk embeds\n        joj_urls = JojIE._extract_urls(webpage)\n        if joj_urls:\n            return self.playlist_from_matches(\n                joj_urls, video_id, video_title, ie=JojIE.ie_key())\n\n        # Look for megaphone.fm embeds\n        mpfn_urls = MegaphoneIE._extract_urls(webpage)\n        if mpfn_urls:\n            return self.playlist_from_matches(\n                mpfn_urls, video_id, video_title, ie=MegaphoneIE.ie_key())\n\n        # Look for vzaar embeds\n        vzaar_urls = VzaarIE._extract_urls(webpage)\n        if vzaar_urls:\n            return self.playlist_from_matches(\n                vzaar_urls, video_id, video_title, ie=VzaarIE.ie_key())\n\n        channel9_urls = Channel9IE._extract_urls(webpage)\n        if channel9_urls:\n            return self.playlist_from_matches(\n                channel9_urls, video_id, video_title, ie=Channel9IE.ie_key())\n\n        vshare_urls = VShareIE._extract_urls(webpage)\n        if vshare_urls:\n            return self.playlist_from_matches(\n                vshare_urls, video_id, video_title, ie=VShareIE.ie_key())\n\n        # Look for Mediasite embeds\n        mediasite_urls = MediasiteIE._extract_urls(webpage)\n        if mediasite_urls:\n            entries = [\n                self.url_result(smuggle_url(\n                    compat_urlparse.urljoin(url, mediasite_url),\n                    {'UrlReferrer': url}), ie=MediasiteIE.ie_key())\n                for mediasite_url in mediasite_urls]\n            return self.playlist_result(entries, video_id, video_title)\n\n        springboardplatform_urls = SpringboardPlatformIE._extract_urls(webpage)\n        if springboardplatform_urls:\n            return self.playlist_from_matches(\n                springboardplatform_urls, video_id, video_title,\n                ie=SpringboardPlatformIE.ie_key())\n\n        yapfiles_urls = YapFilesIE._extract_urls(webpage)\n        if yapfiles_urls:\n            return self.playlist_from_matches(\n                yapfiles_urls, video_id, video_title, ie=YapFilesIE.ie_key())\n\n        vice_urls = ViceIE._extract_urls(webpage)\n        if vice_urls:\n            return self.playlist_from_matches(\n                vice_urls, video_id, video_title, ie=ViceIE.ie_key())\n\n        def merge_dicts(dict1, dict2):\n            merged = {}\n            for k, v in dict1.items():\n                if v is not None:\n                    merged[k] = v\n            for k, v in dict2.items():\n                if v is None:\n                    continue\n                if (k not in merged or\n                        (isinstance(v, compat_str) and v and\n                            isinstance(merged[k], compat_str) and\n                            not merged[k])):\n                    merged[k] = v\n            return merged\n\n        # Look for HTML5 media\n        entries = self._parse_html5_media_entries(url, webpage, video_id, m3u8_id='hls')\n        if entries:\n            if len(entries) == 1:\n                entries[0].update({\n                    'id': video_id,\n                    'title': video_title,\n                })\n            else:\n                for num, entry in enumerate(entries, start=1):\n                    entry.update({\n                        'id': '%s-%s' % (video_id, num),\n                        'title': '%s (%d)' % (video_title, num),\n                    })\n            for entry in entries:\n                self._sort_formats(entry['formats'])\n            return self.playlist_result(entries, video_id, video_title)\n\n        jwplayer_data = self._find_jwplayer_data(\n            webpage, video_id, transform_source=js_to_json)\n        if jwplayer_data:\n            info = self._parse_jwplayer_data(\n                jwplayer_data, video_id, require_title=False, base_url=url)\n            return merge_dicts(info, info_dict)\n\n        # Video.js embed\n        mobj = re.search(\n            r'(?s)\\bvideojs\\s*\\(.+?\\.src\\s*\\(\\s*((?:\\[.+?\\]|{.+?}))\\s*\\)\\s*;',\n            webpage)\n        if mobj is not None:\n            sources = self._parse_json(\n                mobj.group(1), video_id, transform_source=js_to_json,\n                fatal=False) or []\n            if not isinstance(sources, list):\n                sources = [sources]\n            formats = []\n            for source in sources:\n                src = source.get('src')\n                if not src or not isinstance(src, compat_str):\n                    continue\n                src = compat_urlparse.urljoin(url, src)\n                src_type = source.get('type')\n                if isinstance(src_type, compat_str):\n                    src_type = src_type.lower()\n                ext = determine_ext(src).lower()\n                if src_type == 'video/youtube':\n                    return self.url_result(src, YoutubeIE.ie_key())\n                if src_type == 'application/dash+xml' or ext == 'mpd':\n                    formats.extend(self._extract_mpd_formats(\n                        src, video_id, mpd_id='dash', fatal=False))\n                elif src_type == 'application/x-mpegurl' or ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        src, video_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id='hls', fatal=False))\n                else:\n                    formats.append({\n                        'url': src,\n                        'ext': (mimetype2ext(src_type) or\n                                ext if ext in KNOWN_EXTENSIONS else 'mp4'),\n                    })\n            if formats:\n                self._sort_formats(formats)\n                info_dict['formats'] = formats\n                return info_dict\n\n        # Looking for http://schema.org/VideoObject\n        json_ld = self._search_json_ld(\n            webpage, video_id, default={}, expected_type='VideoObject')\n        if json_ld.get('url'):\n            return merge_dicts(json_ld, info_dict)\n\n        def check_video(vurl):\n            if YoutubeIE.suitable(vurl):\n                return True\n            if RtmpIE.suitable(vurl):\n                return True\n            vpath = compat_urlparse.urlparse(vurl).path\n            vext = determine_ext(vpath)\n            return '.' in vpath and vext not in ('swf', 'png', 'jpg', 'srt', 'sbv', 'sub', 'vtt', 'ttml', 'js', 'xml')\n\n        def filter_video(urls):\n            return list(filter(check_video, urls))\n\n        # Start with something easy: JW Player in SWFObject\n        found = filter_video(re.findall(r'flashvars: [\\'\"](?:.*&)?file=(http[^\\'\"&]*)', webpage))\n        if not found:\n            # Look for gorilla-vid style embedding\n            found = filter_video(re.findall(r'''(?sx)\n                (?:\n                    jw_plugins|\n                    JWPlayerOptions|\n                    jwplayer\\s*\\(\\s*[\"'][^'\"]+[\"']\\s*\\)\\s*\\.setup\n                )\n                .*?\n                ['\"]?file['\"]?\\s*:\\s*[\"\\'](.*?)[\"\\']''', webpage))\n        if not found:\n            # Broaden the search a little bit\n            found = filter_video(re.findall(r'[^A-Za-z0-9]?(?:file|source)=(http[^\\'\"&]*)', webpage))\n        if not found:\n            # Broaden the findall a little bit: JWPlayer JS loader\n            found = filter_video(re.findall(\n                r'[^A-Za-z0-9]?(?:file|video_url)[\"\\']?:\\s*[\"\\'](http(?![^\\'\"]+\\.[0-9]+[\\'\"])[^\\'\"]+)[\"\\']', webpage))\n        if not found:\n            # Flow player\n            found = filter_video(re.findall(r'''(?xs)\n                flowplayer\\(\"[^\"]+\",\\s*\n                    \\{[^}]+?\\}\\s*,\n                    \\s*\\{[^}]+? [\"']?clip[\"']?\\s*:\\s*\\{\\s*\n                        [\"']?url[\"']?\\s*:\\s*[\"']([^\"']+)[\"']\n            ''', webpage))\n        if not found:\n            # Cinerama player\n            found = re.findall(\n                r\"cinerama\\.embedPlayer\\(\\s*\\'[^']+\\',\\s*'([^']+)'\", webpage)\n        if not found:\n            # Try to find twitter cards info\n            # twitter:player:stream should be checked before twitter:player since\n            # it is expected to contain a raw stream (see\n            # https://dev.twitter.com/cards/types/player#On_twitter.com_via_desktop_browser)\n            found = filter_video(re.findall(\n                r'<meta (?:property|name)=\"twitter:player:stream\" (?:content|value)=\"(.+?)\"', webpage))\n        if not found:\n            # We look for Open Graph info:\n            # We have to match any number spaces between elements, some sites try to align them (eg.: statigr.am)\n            m_video_type = re.findall(r'<meta.*?property=\"og:video:type\".*?content=\"video/(.*?)\"', webpage)\n            # We only look in og:video if the MIME type is a video, don't try if it's a Flash player:\n            if m_video_type is not None:\n                found = filter_video(re.findall(r'<meta.*?property=\"og:video\".*?content=\"(.*?)\"', webpage))\n        if not found:\n            REDIRECT_REGEX = r'[0-9]{,2};\\s*(?:URL|url)=\\'?([^\\'\"]+)'\n            found = re.search(\n                r'(?i)<meta\\s+(?=(?:[a-z-]+=\"[^\"]+\"\\s+)*http-equiv=\"refresh\")'\n                r'(?:[a-z-]+=\"[^\"]+\"\\s+)*?content=\"%s' % REDIRECT_REGEX,\n                webpage)\n            if not found:\n                # Look also in Refresh HTTP header\n                refresh_header = head_response.headers.get('Refresh')\n                if refresh_header:\n                    # In python 2 response HTTP headers are bytestrings\n                    if sys.version_info < (3, 0) and isinstance(refresh_header, str):\n                        refresh_header = refresh_header.decode('iso-8859-1')\n                    found = re.search(REDIRECT_REGEX, refresh_header)\n            if found:\n                new_url = compat_urlparse.urljoin(url, unescapeHTML(found.group(1)))\n                if new_url != url:\n                    self.report_following_redirect(new_url)\n                    return {\n                        '_type': 'url',\n                        'url': new_url,\n                    }\n                else:\n                    found = None\n\n        if not found:\n            # twitter:player is a https URL to iframe player that may or may not\n            # be supported by youtube-dl thus this is checked the very last (see\n            # https://dev.twitter.com/cards/types/player#On_twitter.com_via_desktop_browser)\n            embed_url = self._html_search_meta('twitter:player', webpage, default=None)\n            if embed_url and embed_url != url:\n                return self.url_result(embed_url)\n\n        if not found:\n            raise UnsupportedError(url)\n\n        entries = []\n        for video_url in orderedSet(found):\n            video_url = unescapeHTML(video_url)\n            video_url = video_url.replace('\\\\/', '/')\n            video_url = compat_urlparse.urljoin(url, video_url)\n            video_id = compat_urllib_parse_unquote(os.path.basename(video_url))\n\n            # Sometimes, jwplayer extraction will result in a YouTube URL\n            if YoutubeIE.suitable(video_url):\n                entries.append(self.url_result(video_url, 'Youtube'))\n                continue\n\n            # here's a fun little line of code for you:\n            video_id = os.path.splitext(video_id)[0]\n\n            entry_info_dict = {\n                'id': video_id,\n                'uploader': video_uploader,\n                'title': video_title,\n                'age_limit': age_limit,\n            }\n\n            if RtmpIE.suitable(video_url):\n                entry_info_dict.update({\n                    '_type': 'url_transparent',\n                    'ie_key': RtmpIE.ie_key(),\n                    'url': video_url,\n                })\n                entries.append(entry_info_dict)\n                continue\n\n            ext = determine_ext(video_url)\n            if ext == 'smil':\n                entry_info_dict['formats'] = self._extract_smil_formats(video_url, video_id)\n            elif ext == 'xspf':\n                return self.playlist_result(self._extract_xspf_playlist(video_url, video_id), video_id)\n            elif ext == 'm3u8':\n                entry_info_dict['formats'] = self._extract_m3u8_formats(video_url, video_id, ext='mp4')\n            elif ext == 'mpd':\n                entry_info_dict['formats'] = self._extract_mpd_formats(video_url, video_id)\n            elif ext == 'f4m':\n                entry_info_dict['formats'] = self._extract_f4m_formats(video_url, video_id)\n            elif re.search(r'(?i)\\.(?:ism|smil)/manifest', video_url) and video_url != url:\n                # Just matching .ism/manifest is not enough to be reliably sure\n                # whether it's actually an ISM manifest or some other streaming\n                # manifest since there are various streaming URL formats\n                # possible (see [1]) as well as some other shenanigans like\n                # .smil/manifest URLs that actually serve an ISM (see [2]) and\n                # so on.\n                # Thus the most reasonable way to solve this is to delegate\n                # to generic extractor in order to look into the contents of\n                # the manifest itself.\n                # 1. https://azure.microsoft.com/en-us/documentation/articles/media-services-deliver-content-overview/#streaming-url-formats\n                # 2. https://svs.itworkscdn.net/lbcivod/smil:itwfcdn/lbci/170976.smil/Manifest\n                entry_info_dict = self.url_result(\n                    smuggle_url(video_url, {'to_generic': True}),\n                    GenericIE.ie_key())\n            else:\n                entry_info_dict['url'] = video_url\n\n            if entry_info_dict.get('formats'):\n                self._sort_formats(entry_info_dict['formats'])\n\n            entries.append(entry_info_dict)\n\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            for num, e in enumerate(entries, start=1):\n                # 'url' results don't have a title\n                if e.get('title') is not None:\n                    e['title'] = '%s (%d)' % (e['title'], num)\n            return {\n                '_type': 'playlist',\n                'entries': entries,\n            }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "generic.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/generic.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}