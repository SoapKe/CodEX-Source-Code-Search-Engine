{"author": "openai", "code": "import sys\n\n\n\nif sys.version_info[0] < 3:\n    from .reraise_impl_py2 import reraise_impl \nelse:\n    from .reraise_impl_py3 import reraise_impl\n\ndef reraise(prefix=None, suffix=None):\n    old_exc_type, old_exc_value, traceback = sys.exc_info()\n    if old_exc_value is None:\n        old_exc_value = old_exc_type()\n\n    e = ReraisedException(old_exc_value, prefix, suffix)\n\n    reraise_impl(e, traceback)\n\n\ndef full_class_name(o):\n    module = o.__class__.__module__\n    if module is None or module == str.__class__.__module__:\n        return o.__class__.__name__\n    return module + '.' + o.__class__.__name__\n\nclass ReraisedException(Exception):\n    def __init__(self, old_exc, prefix, suffix):\n        self.old_exc = old_exc\n        self.prefix = prefix\n        self.suffix = suffix\n\n    def __str__(self):\n        klass = self.old_exc.__class__\n\n        orig = \"%s: %s\" % (full_class_name(self.old_exc), klass.__str__(self.old_exc))\n        prefixpart = suffixpart = ''\n        if self.prefix is not None:\n            prefixpart = self.prefix + \"\\n\"\n        if self.suffix is not None:\n            suffixpart = \"\\n\\n\" + self.suffix\n        return \"%sThe original exception was:\\n\\n%s%s\" % (prefixpart, orig, suffixpart)\n", "comments": "  we keep actual reraising different modules  since    reraising code uses syntax mutually exclusive python 2 3    pylint  disable e0401    http   stackoverflow com 13653312 ", "content": "import sys\n\n# We keep the actual reraising in different modules, since the\n# reraising code uses syntax mutually exclusive to Python 2/3.\nif sys.version_info[0] < 3:\n    from .reraise_impl_py2 import reraise_impl #pylint: disable=E0401\nelse:\n    from .reraise_impl_py3 import reraise_impl\n\ndef reraise(prefix=None, suffix=None):\n    old_exc_type, old_exc_value, traceback = sys.exc_info()\n    if old_exc_value is None:\n        old_exc_value = old_exc_type()\n\n    e = ReraisedException(old_exc_value, prefix, suffix)\n\n    reraise_impl(e, traceback)\n\n# http://stackoverflow.com/a/13653312\ndef full_class_name(o):\n    module = o.__class__.__module__\n    if module is None or module == str.__class__.__module__:\n        return o.__class__.__name__\n    return module + '.' + o.__class__.__name__\n\nclass ReraisedException(Exception):\n    def __init__(self, old_exc, prefix, suffix):\n        self.old_exc = old_exc\n        self.prefix = prefix\n        self.suffix = suffix\n\n    def __str__(self):\n        klass = self.old_exc.__class__\n\n        orig = \"%s: %s\" % (full_class_name(self.old_exc), klass.__str__(self.old_exc))\n        prefixpart = suffixpart = ''\n        if self.prefix is not None:\n            prefixpart = self.prefix + \"\\n\"\n        if self.suffix is not None:\n            suffixpart = \"\\n\\n\" + self.suffix\n        return \"%sThe original exception was:\\n\\n%s%s\" % (prefixpart, orig, suffixpart)\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "reraise.py", "id": "d47c010159aab70cc2bf7d4ed44fe82b", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/utils/reraise.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}