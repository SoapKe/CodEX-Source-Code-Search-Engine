{"author": "keon", "code": "def max_heap_sort(arr):\n    \"\"\" Heap Sort that uses a max heap to sort an array in ascending order\n        Complexity: O(n log(n))\n    \"\"\"\n    for i in range(len(arr)-1,0,-1):\n        max_heapify(arr, i)\n        \n        temp = arr[0]\n        arr[0] = arr[i]\n        arr[i] = temp\n\n\t\ndef max_heapify(arr, end):\n    \"\"\" Max heapify helper for max_heap_sort\n    \"\"\"\n    last_parent = int((end-1)/2)\n\n    \n    for parent in range(last_parent,-1,-1):\n        current_parent = parent\n\n        \n        while current_parent <= last_parent:\n            \n            child = 2*current_parent + 1\n            if child + 1 <= end and arr[child] < arr[child+1]:\n                child = child + 1\n\n            \n            if arr[child] > arr[current_parent]:\n                temp = arr[current_parent]\n                arr[current_parent] = arr[child]\n                arr[child] = temp\n\n                current_parent = child\n            \n            else:\n                break\n\t\t\n\ndef min_heap_sort(arr):\n    \"\"\" Heap Sort that uses a min heap to sort an array in ascending order\n        Complexity: O(n log(n))\n    \"\"\"\n    for i in range(0, len(arr)-1):\n        min_heapify(arr, i)\n\t\n\ndef min_heapify(arr, start):\n    \"\"\" Min heapify helper for min_heap_sort\n    \"\"\"\n    # Offset last_parent by the start (last_parent calculated as if start index was 0)\n    \n    end = len(arr)-1\n    last_parent = int((end-start-1)/2)\n\n    \n    for parent in range(last_parent,-1,-1):\n        current_parent = parent\n\n        \n        while current_parent <= last_parent:\n            \n            child = 2*current_parent + 1\n            if child + 1 <= end-start and arr[child+start] > arr[child+1+start]:\n                child = child + 1\n\n            \n            if arr[child+start] < arr[current_parent+start]:\n                temp = arr[current_parent+start]\n                arr[current_parent+start] = arr[child+start]\n                arr[child+start] = temp\n\n                current_parent = child\n            \n            else:\n                break\n\nif __name__ == '__main__':\n\timport timeit\n\n\tarray = [1,5,65,23,57,1232,-1,-5,-2,242,100,4,423,2,564,9,0,10,43,64]\n\tprint(\"array:\")\n\tprint(array)\n\tprint(\"Max Heapify:\")\n\tmax_heap_sort(array)\n\tprint(array)\n\tarray = [1,5,65,23,57,1232,-1,-5,-2,242,100,4,423,2,564,9,0,10,43,64]\n\tprint(\"Min Heapify:\")\n\tmin_heap_sort(array)\n\tprint(array)\n\tprint(\"Max Heapify Time:\", timeit.timeit('max_heap_sort(array)', setup=\"from __main__ import max_heap_sort, array\",number=10000))\n\tprint(\"Min Heapify Time:\", timeit.timeit('min_heap_sort(array)', setup=\"from __main__ import min_heap_sort, array\",number=10000))\n", "comments": "    heap sort uses max heap sort array ascending order         complexity  o(n log(n))             range(len(arr) 1 0  1)          max heapify(arr  i)                  temp   arr 0          arr 0    arr          arr    temp    def max heapify(arr  end)          max heapify helper max heap sort             last parent   int((end 1) 2)        iterate last parent first     parent range(last parent  1  1)          current parent   parent            iterate current parent last parent         current parent    last parent                find greatest child current parent             child   2 current parent   1             child   1    end arr child    arr child 1                   child   child   1                swap child greater parent             arr child    arr current parent                   temp   arr current parent                  arr current parent    arr child                  arr child    temp                  current parent   child               if swap occured  need keep iterating             else                  break     def min heap sort(arr)          heap sort uses min heap sort array ascending order         complexity  o(n log(n))             range(0  len(arr) 1)          min heapify(arr  i)    def min heapify(arr  start)          min heapify helper min heap sort            iterate last parent first    iterate current parent last parent    find greatest child current parent    swap child greater parent    if swap occured  need keep iterating    offset last parent start (last parent calculated start index 0)    all array accesses need offet start    iterate last parent first    iterate current parent last parent    find lesser child current parent    swap child less parent    if swap occured  need keep iterating ", "content": "def max_heap_sort(arr):\n    \"\"\" Heap Sort that uses a max heap to sort an array in ascending order\n        Complexity: O(n log(n))\n    \"\"\"\n    for i in range(len(arr)-1,0,-1):\n        max_heapify(arr, i)\n        \n        temp = arr[0]\n        arr[0] = arr[i]\n        arr[i] = temp\n\n\t\ndef max_heapify(arr, end):\n    \"\"\" Max heapify helper for max_heap_sort\n    \"\"\"\n    last_parent = int((end-1)/2)\n\n    # Iterate from last parent to first\n    for parent in range(last_parent,-1,-1):\n        current_parent = parent\n\n        # Iterate from current_parent to last_parent\n        while current_parent <= last_parent:\n            # Find greatest child of current_parent\n            child = 2*current_parent + 1\n            if child + 1 <= end and arr[child] < arr[child+1]:\n                child = child + 1\n\n            # Swap if child is greater than parent\n            if arr[child] > arr[current_parent]:\n                temp = arr[current_parent]\n                arr[current_parent] = arr[child]\n                arr[child] = temp\n\n                current_parent = child\n            # If no swap occured, no need to keep iterating\n            else:\n                break\n\t\t\n\ndef min_heap_sort(arr):\n    \"\"\" Heap Sort that uses a min heap to sort an array in ascending order\n        Complexity: O(n log(n))\n    \"\"\"\n    for i in range(0, len(arr)-1):\n        min_heapify(arr, i)\n\t\n\ndef min_heapify(arr, start):\n    \"\"\" Min heapify helper for min_heap_sort\n    \"\"\"\n    # Offset last_parent by the start (last_parent calculated as if start index was 0)\n    # All array accesses need to be offet by start\n    end = len(arr)-1\n    last_parent = int((end-start-1)/2)\n\n    # Iterate from last parent to first\n    for parent in range(last_parent,-1,-1):\n        current_parent = parent\n\n        # Iterate from current_parent to last_parent\n        while current_parent <= last_parent:\n            # Find lesser child of current_parent\n            child = 2*current_parent + 1\n            if child + 1 <= end-start and arr[child+start] > arr[child+1+start]:\n                child = child + 1\n\n            # Swap if child is less than parent\n            if arr[child+start] < arr[current_parent+start]:\n                temp = arr[current_parent+start]\n                arr[current_parent+start] = arr[child+start]\n                arr[child+start] = temp\n\n                current_parent = child\n            # If no swap occured, no need to keep iterating\n            else:\n                break\n\nif __name__ == '__main__':\n\timport timeit\n\n\tarray = [1,5,65,23,57,1232,-1,-5,-2,242,100,4,423,2,564,9,0,10,43,64]\n\tprint(\"array:\")\n\tprint(array)\n\tprint(\"Max Heapify:\")\n\tmax_heap_sort(array)\n\tprint(array)\n\tarray = [1,5,65,23,57,1232,-1,-5,-2,242,100,4,423,2,564,9,0,10,43,64]\n\tprint(\"Min Heapify:\")\n\tmin_heap_sort(array)\n\tprint(array)\n\tprint(\"Max Heapify Time:\", timeit.timeit('max_heap_sort(array)', setup=\"from __main__ import max_heap_sort, array\",number=10000))\n\tprint(\"Min Heapify Time:\", timeit.timeit('min_heap_sort(array)', setup=\"from __main__ import min_heap_sort, array\",number=10000))\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "heap_sort.py", "id": "d2d0cd8e82f77662ec5afa2109a8ec7c", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/keon-algorithms/keon-algorithms-abe4cb1/sort/heap_sort.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:56:36Z", "url": "https://github.com/keon/algorithms", "wiki": true}