{"author": "rg3", "code": "\n\n\nfrom __future__ import unicode_literals\n\nimport shutil\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nfrom test.helper import FakeYDL\nfrom youtube_dl.cache import Cache\n\n\ndef _is_empty(d):\n    return not bool(os.listdir(d))\n\n\ndef _mkdir(d):\n    if not os.path.exists(d):\n        os.mkdir(d)\n\n\nclass TestCache(unittest.TestCase):\n    def setUp(self):\n        TEST_DIR = os.path.dirname(os.path.abspath(__file__))\n        TESTDATA_DIR = os.path.join(TEST_DIR, 'testdata')\n        _mkdir(TESTDATA_DIR)\n        self.test_dir = os.path.join(TESTDATA_DIR, 'cache_test')\n        self.tearDown()\n\n    def tearDown(self):\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n\n    def test_cache(self):\n        ydl = FakeYDL({\n            'cachedir': self.test_dir,\n        })\n        c = Cache(ydl)\n        obj = {'x': 1, 'y': ['\u00e4', '\\\\a', True]}\n        self.assertEqual(c.load('test_cache', 'k.'), None)\n        c.store('test_cache', 'k.', obj)\n        self.assertEqual(c.load('test_cache', 'k2'), None)\n        self.assertFalse(_is_empty(self.test_dir))\n        self.assertEqual(c.load('test_cache', 'k.'), obj)\n        self.assertEqual(c.load('test_cache', 'y'), None)\n        self.assertEqual(c.load('test_cache2', 'k.'), None)\n        c.remove()\n        self.assertFalse(os.path.exists(self.test_dir))\n        self.assertEqual(c.load('test_cache', 'k.'), None)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "#!/usr/bin/env python\n# coding: utf-8\n# Allow direct execution\n", "content": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nimport shutil\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nfrom test.helper import FakeYDL\nfrom youtube_dl.cache import Cache\n\n\ndef _is_empty(d):\n    return not bool(os.listdir(d))\n\n\ndef _mkdir(d):\n    if not os.path.exists(d):\n        os.mkdir(d)\n\n\nclass TestCache(unittest.TestCase):\n    def setUp(self):\n        TEST_DIR = os.path.dirname(os.path.abspath(__file__))\n        TESTDATA_DIR = os.path.join(TEST_DIR, 'testdata')\n        _mkdir(TESTDATA_DIR)\n        self.test_dir = os.path.join(TESTDATA_DIR, 'cache_test')\n        self.tearDown()\n\n    def tearDown(self):\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n\n    def test_cache(self):\n        ydl = FakeYDL({\n            'cachedir': self.test_dir,\n        })\n        c = Cache(ydl)\n        obj = {'x': 1, 'y': ['\u00e4', '\\\\a', True]}\n        self.assertEqual(c.load('test_cache', 'k.'), None)\n        c.store('test_cache', 'k.', obj)\n        self.assertEqual(c.load('test_cache', 'k2'), None)\n        self.assertFalse(_is_empty(self.test_dir))\n        self.assertEqual(c.load('test_cache', 'k.'), obj)\n        self.assertEqual(c.load('test_cache', 'y'), None)\n        self.assertEqual(c.load('test_cache2', 'k.'), None)\n        c.remove()\n        self.assertFalse(os.path.exists(self.test_dir))\n        self.assertEqual(c.load('test_cache', 'k.'), None)\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_cache.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_cache.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}