{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.addons.sale.tests.test_sale_common import TestSale\n\n\nclass TestSaleExpense(TestSale):\n    def test_sale_expense(self):\n        \n        \n        self.env.ref('product.list0').currency_id = self.env.ref('base.main_company').currency_id\n\n        \n        prod = self.env.ref('product.product_product_1')\n        so = self.env['sale.order'].create({\n            'partner_id': self.partner.id,\n            'partner_invoice_id': self.partner.id,\n            'partner_shipping_id': self.partner.id,\n            'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 2, 'product_uom': prod.uom_id.id, 'price_unit': prod.list_price})],\n            'pricelist_id': self.env.ref('product.list0').id,\n        })\n        so._compute_tax_id()\n        so.action_confirm()\n        so._create_analytic_account()  \n        init_price = so.amount_total\n\n        # create some expense and validate it (expense at cost)\n        prod_exp_1 = self.env.ref('hr_expense.air_ticket')\n        company = self.env.ref('base.main_company')\n        journal = self.env['account.journal'].create({'name': 'Purchase Journal - Test', 'code': 'HRTPJ', 'type': 'purchase', 'company_id': company.id})\n        account_payable = self.env['account.account'].create({'code': 'X1111', 'name': 'HR Expense - Test Payable Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True})\n        employee = self.env['hr.employee'].create({'name': 'Test employee', 'user_id': self.user.id, 'address_home_id': self.user.partner_id.id})\n        self.user.partner_id.property_account_payable_id = account_payable.id\n        \n        sheet = self.env['hr.expense.sheet'].create({\n            'name': 'Expense for John Smith',\n            'employee_id': employee.id,\n            'journal_id': journal.id,\n        })\n        exp = self.env['hr.expense'].create({\n            'name': 'Air Travel',\n            'product_id': prod_exp_1.id,\n            'analytic_account_id': so.analytic_account_id.id,\n            'unit_amount': 621.54,\n            'employee_id': employee.id,\n            'sheet_id': sheet.id\n        })\n        \n        sheet.approve_expense_sheets()\n        \n        sheet.action_sheet_move_create()\n        \n        self.assertIn(prod_exp_1, so.mapped('order_line.product_id'), 'Sale Expense: expense product should be in so')\n        sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_1.id)\n        self.assertEqual((sol.price_unit, sol.qty_delivered), (621.54, 1.0), 'Sale Expense: error when invoicing an expense at cost')\n        self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n\n        # create some expense and validate it (expense at sale price)\n        init_price = so.amount_total\n        prod_exp_2 = self.env.ref('hr_expense.car_travel')\n        \n        sheet = self.env['hr.expense.sheet'].create({\n            'name': 'Expense for John Smith',\n            'employee_id': employee.id,\n            'journal_id': journal.id,\n        })\n        exp = self.env['hr.expense'].create({\n            'name': 'Car Travel',\n            'product_id': prod_exp_2.id,\n            'analytic_account_id': so.analytic_account_id.id,\n            'product_uom_id': self.env.ref('product.product_uom_km').id,\n            'unit_amount': 0.15,\n            'quantity': 100,\n            'employee_id': employee.id,\n            'sheet_id': sheet.id\n        })\n        \n        sheet.approve_expense_sheets()\n        \n        sheet.action_sheet_move_create()\n        \n        self.assertIn(prod_exp_2, so.mapped('order_line.product_id'), 'Sale Expense: expense product should be in so')\n        sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_2.id)\n        self.assertEqual((sol.price_unit, sol.qty_delivered), (prod_exp_2.list_price, 100.0), 'Sale Expense: error when invoicing an expense at cost')\n        self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n        # self.assertTrue(so.invoice_status, 'no', 'Sale Expense: expenses should not impact the invoice_status of the so')\n\n        \n        inv_id = so.action_invoice_create()\n        inv = self.env['account.invoice'].browse(inv_id)\n        self.assertEqual(inv.amount_untaxed, 621.54 + (prod_exp_2.list_price * 100.0), 'Sale Expense: invoicing of expense is wrong')\n", "comments": "    test behaviour sales orders managing expenses            coding  utf 8        part odoo  see license file full copyright licensing details     force pricelist currency company    create product invoiced delivery    normally created confirmation use right products    create expense validate (expense cost)    submit manager    approve    create expense entries    expense sales order    create expense validate (expense sale price)    submit manager    approve    create expense entries    expense sales order    self asserttrue(so invoice status      sale expense  expenses impact invoice status )    expenses invoiced ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.addons.sale.tests.test_sale_common import TestSale\n\n\nclass TestSaleExpense(TestSale):\n    def test_sale_expense(self):\n        \"\"\" Test the behaviour of sales orders when managing expenses \"\"\"\n        # force the pricelist to have the same currency as the company\n        self.env.ref('product.list0').currency_id = self.env.ref('base.main_company').currency_id\n\n        # create a so with a product invoiced on delivery\n        prod = self.env.ref('product.product_product_1')\n        so = self.env['sale.order'].create({\n            'partner_id': self.partner.id,\n            'partner_invoice_id': self.partner.id,\n            'partner_shipping_id': self.partner.id,\n            'order_line': [(0, 0, {'name': prod.name, 'product_id': prod.id, 'product_uom_qty': 2, 'product_uom': prod.uom_id.id, 'price_unit': prod.list_price})],\n            'pricelist_id': self.env.ref('product.list0').id,\n        })\n        so._compute_tax_id()\n        so.action_confirm()\n        so._create_analytic_account()  # normally created at so confirmation when you use the right products\n        init_price = so.amount_total\n\n        # create some expense and validate it (expense at cost)\n        prod_exp_1 = self.env.ref('hr_expense.air_ticket')\n        company = self.env.ref('base.main_company')\n        journal = self.env['account.journal'].create({'name': 'Purchase Journal - Test', 'code': 'HRTPJ', 'type': 'purchase', 'company_id': company.id})\n        account_payable = self.env['account.account'].create({'code': 'X1111', 'name': 'HR Expense - Test Payable Account', 'user_type_id': self.env.ref('account.data_account_type_payable').id, 'reconcile': True})\n        employee = self.env['hr.employee'].create({'name': 'Test employee', 'user_id': self.user.id, 'address_home_id': self.user.partner_id.id})\n        self.user.partner_id.property_account_payable_id = account_payable.id\n        # Submit to Manager\n        sheet = self.env['hr.expense.sheet'].create({\n            'name': 'Expense for John Smith',\n            'employee_id': employee.id,\n            'journal_id': journal.id,\n        })\n        exp = self.env['hr.expense'].create({\n            'name': 'Air Travel',\n            'product_id': prod_exp_1.id,\n            'analytic_account_id': so.analytic_account_id.id,\n            'unit_amount': 621.54,\n            'employee_id': employee.id,\n            'sheet_id': sheet.id\n        })\n        # Approve\n        sheet.approve_expense_sheets()\n        # Create Expense Entries\n        sheet.action_sheet_move_create()\n        # expense should now be in sales order\n        self.assertIn(prod_exp_1, so.mapped('order_line.product_id'), 'Sale Expense: expense product should be in so')\n        sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_1.id)\n        self.assertEqual((sol.price_unit, sol.qty_delivered), (621.54, 1.0), 'Sale Expense: error when invoicing an expense at cost')\n        self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n\n        # create some expense and validate it (expense at sale price)\n        init_price = so.amount_total\n        prod_exp_2 = self.env.ref('hr_expense.car_travel')\n        # Submit to Manager\n        sheet = self.env['hr.expense.sheet'].create({\n            'name': 'Expense for John Smith',\n            'employee_id': employee.id,\n            'journal_id': journal.id,\n        })\n        exp = self.env['hr.expense'].create({\n            'name': 'Car Travel',\n            'product_id': prod_exp_2.id,\n            'analytic_account_id': so.analytic_account_id.id,\n            'product_uom_id': self.env.ref('product.product_uom_km').id,\n            'unit_amount': 0.15,\n            'quantity': 100,\n            'employee_id': employee.id,\n            'sheet_id': sheet.id\n        })\n        # Approve\n        sheet.approve_expense_sheets()\n        # Create Expense Entries\n        sheet.action_sheet_move_create()\n        # expense should now be in sales order\n        self.assertIn(prod_exp_2, so.mapped('order_line.product_id'), 'Sale Expense: expense product should be in so')\n        sol = so.order_line.filtered(lambda sol: sol.product_id.id == prod_exp_2.id)\n        self.assertEqual((sol.price_unit, sol.qty_delivered), (prod_exp_2.list_price, 100.0), 'Sale Expense: error when invoicing an expense at cost')\n        self.assertEqual(so.amount_total, init_price, 'Sale Expense: price of so not updated after adding expense')\n        # self.assertTrue(so.invoice_status, 'no', 'Sale Expense: expenses should not impact the invoice_status of the so')\n\n        # both expenses should be invoiced\n        inv_id = so.action_invoice_create()\n        inv = self.env['account.invoice'].browse(inv_id)\n        self.assertEqual(inv.amount_untaxed, 621.54 + (prod_exp_2.list_price * 100.0), 'Sale Expense: invoicing of expense is wrong')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_sale_expense.py", "id": "4d0c51b2fcf0e07f101704c49af07128", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale_expense/tests/test_sale_expense.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}