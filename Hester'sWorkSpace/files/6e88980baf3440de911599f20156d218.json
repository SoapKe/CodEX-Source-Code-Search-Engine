{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    extract_attributes,\n    get_element_by_class,\n    urlencode_postdata,\n)\n\n\nclass NJPWWorldIE(InfoExtractor):\n    _VALID_URL = r'https?://njpwworld\\.com/p/(?P<id>[a-z0-9_]+)'\n    IE_DESC = '\u65b0\u65e5\u672c\u30d7\u30ed\u30ec\u30b9\u30ef\u30fc\u30eb\u30c9'\n    _NETRC_MACHINE = 'njpwworld'\n\n    _TEST = {\n        'url': 'http://njpwworld.com/p/s_series_00155_1_9/',\n        'info_dict': {\n            'id': 's_series_00155_1_9',\n            'ext': 'mp4',\n            'title': '\u7b2c9\u8a66\u5408\u3000\u30e9\u30f3\u30c7\u30a3\u30fb\u30b5\u30d9\u30fc\u30b8\u3000vs\u3000\u30ea\u30c3\u30af\u30fb\u30b9\u30bf\u30a4\u30ca\u30fc',\n            'tags': list,\n        },\n        'params': {\n            'skip_download': True,  \n        },\n        'skip': 'Requires login',\n    }\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        username, password = self._get_login_info()\n        \n        if not username:\n            return True\n\n        webpage, urlh = self._download_webpage_handle(\n            'https://njpwworld.com/auth/login', None,\n            note='Logging in', errnote='Unable to login',\n            data=urlencode_postdata({'login_id': username, 'pw': password}))\n        \n        if urlh.geturl() == 'https://njpwworld.com/auth/login':\n            self.report_warning('unable to login')\n            return False\n\n        return True\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        formats = []\n        for mobj in re.finditer(r'<a[^>]+\\bhref=([\"\\'])/player.+?[^>]*>', webpage):\n            player = extract_attributes(mobj.group(0))\n            player_path = player.get('href')\n            if not player_path:\n                continue\n            kind = self._search_regex(\n                r'(low|high)$', player.get('class') or '', 'kind',\n                default='low')\n            player_url = compat_urlparse.urljoin(url, player_path)\n            player_page = self._download_webpage(\n                player_url, video_id, note='Downloading player page')\n            entries = self._parse_html5_media_entries(\n                player_url, player_page, video_id, m3u8_id='hls-%s' % kind,\n                m3u8_entry_protocol='m3u8_native')\n            kind_formats = entries[0]['formats']\n            for f in kind_formats:\n                f['quality'] = 2 if kind == 'high' else 1\n            formats.extend(kind_formats)\n\n        self._sort_formats(formats)\n\n        post_content = get_element_by_class('post-content', webpage)\n        tags = re.findall(\n            r'<li[^>]+class=\"tag-[^\"]+\"><a[^>]*>([^<]+)</a></li>', post_content\n        ) if post_content else None\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n            'tags': tags,\n        }\n", "comments": "# coding: utf-8\n# AES-encrypted m3u8\n# No authentication to be performed\n# /auth/login will return 302 for successful logins\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urlparse\nfrom ..utils import (\n    extract_attributes,\n    get_element_by_class,\n    urlencode_postdata,\n)\n\n\nclass NJPWWorldIE(InfoExtractor):\n    _VALID_URL = r'https?://njpwworld\\.com/p/(?P<id>[a-z0-9_]+)'\n    IE_DESC = '\u65b0\u65e5\u672c\u30d7\u30ed\u30ec\u30b9\u30ef\u30fc\u30eb\u30c9'\n    _NETRC_MACHINE = 'njpwworld'\n\n    _TEST = {\n        'url': 'http://njpwworld.com/p/s_series_00155_1_9/',\n        'info_dict': {\n            'id': 's_series_00155_1_9',\n            'ext': 'mp4',\n            'title': '\u7b2c9\u8a66\u5408\u3000\u30e9\u30f3\u30c7\u30a3\u30fb\u30b5\u30d9\u30fc\u30b8\u3000vs\u3000\u30ea\u30c3\u30af\u30fb\u30b9\u30bf\u30a4\u30ca\u30fc',\n            'tags': list,\n        },\n        'params': {\n            'skip_download': True,  # AES-encrypted m3u8\n        },\n        'skip': 'Requires login',\n    }\n\n    def _real_initialize(self):\n        self._login()\n\n    def _login(self):\n        username, password = self._get_login_info()\n        # No authentication to be performed\n        if not username:\n            return True\n\n        webpage, urlh = self._download_webpage_handle(\n            'https://njpwworld.com/auth/login', None,\n            note='Logging in', errnote='Unable to login',\n            data=urlencode_postdata({'login_id': username, 'pw': password}))\n        # /auth/login will return 302 for successful logins\n        if urlh.geturl() == 'https://njpwworld.com/auth/login':\n            self.report_warning('unable to login')\n            return False\n\n        return True\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        formats = []\n        for mobj in re.finditer(r'<a[^>]+\\bhref=([\"\\'])/player.+?[^>]*>', webpage):\n            player = extract_attributes(mobj.group(0))\n            player_path = player.get('href')\n            if not player_path:\n                continue\n            kind = self._search_regex(\n                r'(low|high)$', player.get('class') or '', 'kind',\n                default='low')\n            player_url = compat_urlparse.urljoin(url, player_path)\n            player_page = self._download_webpage(\n                player_url, video_id, note='Downloading player page')\n            entries = self._parse_html5_media_entries(\n                player_url, player_page, video_id, m3u8_id='hls-%s' % kind,\n                m3u8_entry_protocol='m3u8_native')\n            kind_formats = entries[0]['formats']\n            for f in kind_formats:\n                f['quality'] = 2 if kind == 'high' else 1\n            formats.extend(kind_formats)\n\n        self._sort_formats(formats)\n\n        post_content = get_element_by_class('post-content', webpage)\n        tags = re.findall(\n            r'<li[^>]+class=\"tag-[^\"]+\"><a[^>]*>([^<]+)</a></li>', post_content\n        ) if post_content else None\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'formats': formats,\n            'tags': tags,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "njpwworld.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/njpwworld.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}