{"author": "HelloZeroNet", "code": "import pytest\nfrom CryptMessage import CryptMessage\n\n@pytest.mark.usefixtures(\"resetSettings\")\nclass TestCrypt:\n    def testPublickey(self, ui_websocket):\n        pub = ui_websocket.testAction(\"UserPublickey\", 0)\n        assert len(pub) == 44  \n\n        \n        assert ui_websocket.testAction(\"UserPublickey\", 1) != ui_websocket.testAction(\"UserPublickey\", 0)\n\n        \n        assert ui_websocket.testAction(\"UserPublickey\", 2) == ui_websocket.testAction(\"UserPublickey\", 2)\n\n        \n        pub1 = ui_websocket.testAction(\"UserPublickey\", 0)\n        site_data = ui_websocket.user.getSiteData(ui_websocket.site.address)\n        site_data[\"cert\"] = \"zeroid.bit\"\n        pub2 = ui_websocket.testAction(\"UserPublickey\", 0)\n        assert pub1 != pub2\n\n\n\n    def testEcies(self, ui_websocket):\n        ui_websocket.actionUserPublickey(0, 0)\n        pub = ui_websocket.ws.result\n\n        ui_websocket.actionEciesEncrypt(0, \"hello\", pub)\n        encrypted = ui_websocket.ws.result\n        assert len(encrypted) == 180\n\n        \n        ui_websocket.actionEciesDecrypt(0, encrypted, 123)\n        decrypted = ui_websocket.ws.result\n        assert decrypted != \"hello\"\n\n        \n        ui_websocket.actionEciesDecrypt(0, encrypted)\n        decrypted = ui_websocket.ws.result\n        assert decrypted == \"hello\"\n\n        \n        ui_websocket.actionEciesDecrypt(0, [encrypted, \"baad\", encrypted])\n        decrypted = ui_websocket.ws.result\n        assert decrypted == [\"hello\", None, \"hello\"]\n\n\n    def testEciesUtf8(self, ui_websocket):\n        \n        utf8_text = u'\\xc1rv\\xedzt\\xfbr\\xf5t\\xfck\\xf6rf\\xfar\\xf3g\\xe9p'\n        ui_websocket.actionEciesEncrypt(0, utf8_text)\n        encrypted = ui_websocket.ws.result\n\n        ui_websocket.actionEciesDecrypt(0, encrypted)\n        assert ui_websocket.ws.result == utf8_text\n\n\n    def testEciesAes(self, ui_websocket):\n        ui_websocket.actionEciesEncrypt(0, \"hello\", return_aes_key=True)\n        ecies_encrypted, aes_key = ui_websocket.ws.result\n\n        \n        ui_websocket.actionEciesDecrypt(0, ecies_encrypted)\n        assert ui_websocket.ws.result == \"hello\"\n\n        \n        aes_iv, aes_encrypted = CryptMessage.split(ecies_encrypted.decode(\"base64\"))\n\n        ui_websocket.actionAesDecrypt(0, aes_iv.encode(\"base64\"), aes_encrypted.encode(\"base64\"), aes_key)\n        assert ui_websocket.ws.result == \"hello\"\n\n\n    def testAes(self, ui_websocket):\n        ui_websocket.actionAesEncrypt(0, \"hello\")\n        key, iv, encrypted = ui_websocket.ws.result\n\n        assert len(key) == 44\n        assert len(iv) == 24\n        assert len(encrypted) == 24\n\n        \n        ui_websocket.actionAesDecrypt(0, iv, encrypted, key)\n        assert ui_websocket.ws.result == \"hello\"\n\n        \n        ui_websocket.actionAesEncrypt(0, \"hello\")\n        key2, iv2, encrypted2 = ui_websocket.ws.result\n\n        assert [key, iv, encrypted] != [key2, iv2, encrypted2]\n\n        \n        ui_websocket.actionAesDecrypt(0, [[iv, encrypted], [iv, encrypted], [iv, \"baad\"], [iv2, encrypted2]], [key])\n        assert ui_websocket.ws.result == [\"hello\", \"hello\", None, None]\n\n        \n        ui_websocket.actionAesDecrypt(0, [[iv, encrypted], [iv, encrypted], [iv, \"baad\"], [iv2, encrypted2]], [key, key2])\n        assert ui_websocket.ws.result == [\"hello\", \"hello\", None, \"hello\"]\n\n    def testAesUtf8(self, ui_websocket):\n        utf8_text = u'\\xc1rv\\xedzt\\xfbr\\xf5t\\xfck\\xf6rf\\xfar\\xf3g\\xe9'\n        ui_websocket.actionAesEncrypt(0, utf8_text)\n        key, iv, encrypted = ui_websocket.ws.result\n\n        ui_websocket.actionAesDecrypt(0, iv, encrypted, key)\n        assert ui_websocket.ws.result == utf8_text\n", "comments": "  compressed  b64 encoded publickey    different pubkey specificed index    same publickey index    different publickey different cert    don allow decrypt using privatekey index    decrypt using correct privatekey    decrypt batch    utf8 test    decrypt using ecies    decrypt using aes    single decrypt    batch decrypt    2 correct key    3 key ", "content": "import pytest\nfrom CryptMessage import CryptMessage\n\n@pytest.mark.usefixtures(\"resetSettings\")\nclass TestCrypt:\n    def testPublickey(self, ui_websocket):\n        pub = ui_websocket.testAction(\"UserPublickey\", 0)\n        assert len(pub) == 44  # Compressed, b64 encoded publickey\n\n        # Different pubkey for specificed index\n        assert ui_websocket.testAction(\"UserPublickey\", 1) != ui_websocket.testAction(\"UserPublickey\", 0)\n\n        # Same publickey for same index\n        assert ui_websocket.testAction(\"UserPublickey\", 2) == ui_websocket.testAction(\"UserPublickey\", 2)\n\n        # Different publickey for different cert\n        pub1 = ui_websocket.testAction(\"UserPublickey\", 0)\n        site_data = ui_websocket.user.getSiteData(ui_websocket.site.address)\n        site_data[\"cert\"] = \"zeroid.bit\"\n        pub2 = ui_websocket.testAction(\"UserPublickey\", 0)\n        assert pub1 != pub2\n\n\n\n    def testEcies(self, ui_websocket):\n        ui_websocket.actionUserPublickey(0, 0)\n        pub = ui_websocket.ws.result\n\n        ui_websocket.actionEciesEncrypt(0, \"hello\", pub)\n        encrypted = ui_websocket.ws.result\n        assert len(encrypted) == 180\n\n        # Don't allow decrypt using other privatekey index\n        ui_websocket.actionEciesDecrypt(0, encrypted, 123)\n        decrypted = ui_websocket.ws.result\n        assert decrypted != \"hello\"\n\n        # Decrypt using correct privatekey\n        ui_websocket.actionEciesDecrypt(0, encrypted)\n        decrypted = ui_websocket.ws.result\n        assert decrypted == \"hello\"\n\n        # Decrypt batch\n        ui_websocket.actionEciesDecrypt(0, [encrypted, \"baad\", encrypted])\n        decrypted = ui_websocket.ws.result\n        assert decrypted == [\"hello\", None, \"hello\"]\n\n\n    def testEciesUtf8(self, ui_websocket):\n        # Utf8 test\n        utf8_text = u'\\xc1rv\\xedzt\\xfbr\\xf5t\\xfck\\xf6rf\\xfar\\xf3g\\xe9p'\n        ui_websocket.actionEciesEncrypt(0, utf8_text)\n        encrypted = ui_websocket.ws.result\n\n        ui_websocket.actionEciesDecrypt(0, encrypted)\n        assert ui_websocket.ws.result == utf8_text\n\n\n    def testEciesAes(self, ui_websocket):\n        ui_websocket.actionEciesEncrypt(0, \"hello\", return_aes_key=True)\n        ecies_encrypted, aes_key = ui_websocket.ws.result\n\n        # Decrypt using Ecies\n        ui_websocket.actionEciesDecrypt(0, ecies_encrypted)\n        assert ui_websocket.ws.result == \"hello\"\n\n        # Decrypt using AES\n        aes_iv, aes_encrypted = CryptMessage.split(ecies_encrypted.decode(\"base64\"))\n\n        ui_websocket.actionAesDecrypt(0, aes_iv.encode(\"base64\"), aes_encrypted.encode(\"base64\"), aes_key)\n        assert ui_websocket.ws.result == \"hello\"\n\n\n    def testAes(self, ui_websocket):\n        ui_websocket.actionAesEncrypt(0, \"hello\")\n        key, iv, encrypted = ui_websocket.ws.result\n\n        assert len(key) == 44\n        assert len(iv) == 24\n        assert len(encrypted) == 24\n\n        # Single decrypt\n        ui_websocket.actionAesDecrypt(0, iv, encrypted, key)\n        assert ui_websocket.ws.result == \"hello\"\n\n        # Batch decrypt\n        ui_websocket.actionAesEncrypt(0, \"hello\")\n        key2, iv2, encrypted2 = ui_websocket.ws.result\n\n        assert [key, iv, encrypted] != [key2, iv2, encrypted2]\n\n        # 2 correct key\n        ui_websocket.actionAesDecrypt(0, [[iv, encrypted], [iv, encrypted], [iv, \"baad\"], [iv2, encrypted2]], [key])\n        assert ui_websocket.ws.result == [\"hello\", \"hello\", None, None]\n\n        # 3 key\n        ui_websocket.actionAesDecrypt(0, [[iv, encrypted], [iv, encrypted], [iv, \"baad\"], [iv2, encrypted2]], [key, key2])\n        assert ui_websocket.ws.result == [\"hello\", \"hello\", None, \"hello\"]\n\n    def testAesUtf8(self, ui_websocket):\n        utf8_text = u'\\xc1rv\\xedzt\\xfbr\\xf5t\\xfck\\xf6rf\\xfar\\xf3g\\xe9'\n        ui_websocket.actionAesEncrypt(0, utf8_text)\n        key, iv, encrypted = ui_websocket.ws.result\n\n        ui_websocket.actionAesDecrypt(0, iv, encrypted, key)\n        assert ui_websocket.ws.result == utf8_text\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "TestCrypt.py", "id": "476d9ec8515fef2df722e98421e5067f", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/CryptMessage/Test/TestCrypt.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}