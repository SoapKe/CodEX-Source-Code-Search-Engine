{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import date\n\nfrom odoo import api, fields, models, _\n\n\nclass CrmTeam(models.Model):\n    _inherit = 'crm.team'\n\n    use_quotations = fields.Boolean(string='Quotations', help=\"Check this box if you send quotations to your customers rather than confirming orders straight away. \"\n                                                              \"This will add specific action buttons to your dashboard.\")\n    use_invoices = fields.Boolean('Set Invoicing Target', help=\"Check this box to set an invoicing target for this sales channel.\")\n    invoiced = fields.Integer(\n        compute='_compute_invoiced',\n        string='Invoiced This Month', readonly=True,\n        help=\"Invoice revenue for the current month. This is the amount the sales \"\n                \"channel has invoiced this month. It is used to compute the progression ratio \"\n                \"of the current and target revenue on the kanban view.\")\n    invoiced_target = fields.Integer(\n        string='Invoicing Target',\n        help=\"Target of invoice revenue for the current month. This is the amount the sales \"\n             \"channel estimates to be able to invoice this month.\")\n    quotations_count = fields.Integer(\n        compute='_compute_quotations_to_invoice',\n        string='Number of quotations to invoice', readonly=True)\n    quotations_amount = fields.Integer(\n        compute='_compute_quotations_to_invoice',\n        string='Amount of quotations to invoice', readonly=True)\n    sales_to_invoice_count = fields.Integer(\n        compute='_compute_sales_to_invoice',\n        string='Number of sales to invoice', readonly=True)\n    dashboard_graph_model = fields.Selection(selection_add=[\n        ('sale.report', 'Sales'),\n        ('account.invoice.report', 'Invoices'),\n    ])\n\n    def _compute_quotations_to_invoice(self):\n        non_website_teams = self.filtered(lambda team: team.team_type != 'website')\n        if non_website_teams:\n            quotation_data = self.env['sale.report'].read_group([\n                ('team_id', 'in', non_website_teams.ids),\n                ('state', 'in', ['draft', 'sent']),\n            ], ['price_total', 'team_id', 'name'], ['team_id', 'name'], lazy=False)\n            for datum in quotation_data:\n                self.browse(datum['team_id'][0]).quotations_amount += datum['price_total']\n                self.browse(datum['team_id'][0]).quotations_count += 1\n\n    @api.multi\n    def _compute_sales_to_invoice(self):\n        sale_order_data = self.env['sale.order'].read_group([\n            ('team_id', 'in', self.ids),\n            ('order_line.qty_to_invoice', '>', 0),\n        ], ['team_id'], ['team_id'])\n        for datum in sale_order_data:\n            self.browse(datum['team_id'][0]).invoiced = datum['team_id_count']\n\n    @api.multi\n    def _compute_invoiced(self):\n        invoice_data = self.env['account.invoice'].read_group([\n            ('state', 'in', ['open', 'paid']),\n            ('team_id', 'in', self.ids),\n            ('date', '<=', date.today()),\n            ('date', '>=', date.today().replace(day=1)),\n            ('type', 'in', ['out_invoice', 'out_refund']),\n        ], ['amount_untaxed_signed', 'team_id'], ['team_id'])\n        for datum in invoice_data:\n            self.browse(datum['team_id'][0]).invoiced = datum['amount_untaxed_signed']\n\n    def _graph_date_column(self):\n        if self.dashboard_graph_model == 'sale.report':\n            return 'confirmation_date'\n        elif self.dashboard_graph_model == 'account.invoice.report':\n            return 'date'\n        return super(CrmTeam, self)._graph_date_column()\n\n    def _graph_y_query(self):\n        if self.dashboard_graph_model == 'sale.report':\n            return 'SUM(price_subtotal)'\n        elif self.dashboard_graph_model == 'account.invoice.report':\n            return 'SUM(price_total)'\n        return super(CrmTeam, self)._graph_y_query()\n\n    def _extra_sql_conditions(self):\n        if self.dashboard_graph_model == 'sale.report':\n            return \"AND state in ('sale', 'done')\"\n        elif self.dashboard_graph_model == 'account.invoice.report':\n            return \"AND state in ('open', 'paid')\"\n        return super(CrmTeam, self)._extra_sql_conditions()\n\n    def _graph_title_and_key(self):\n        if self.dashboard_graph_model == 'sale.report':\n            return ['', _('Sales: Untaxed Total')] \n        elif self.dashboard_graph_model == 'account.invoice.report':\n            return ['', _('Invoices: Untaxed Total')]\n        return super(CrmTeam, self)._graph_title_and_key()\n\n    def _compute_dashboard_button_name(self):\n        quotation_teams = self.filtered('use_quotations')\n        quotation_teams.update({'dashboard_button_name': _(\"Quotations\")})\n        (self - quotation_teams).update({'dashboard_button_name': _(\"Sales Orders\")})\n\n    def action_primary_channel_button(self):\n        if hasattr(self, 'use_opportunities') and self.use_opportunities:\n            return super(CrmTeam, self).action_primary_channel_button()\n        elif self.use_quotations:\n            action = self.env.ref('sale.action_quotations_salesteams').read()[0]\n            action['context'] = {'search_default_team_id': self.id}\n            return action\n        else:\n            action = self.env.ref('sale.action_orders_salesteams').read()[0]\n            action['context'] = {'search_default_team_id': self.id}\n            return action\n\n    @api.onchange('team_type')\n    def _onchange_team_type(self):\n        if self.team_type == 'sales':\n            self.use_quotations = True\n            self.use_invoices = True\n            \n            if not self.dashboard_graph_model:\n                self.dashboard_graph_model = 'sale.report'\n        else:\n            self.use_quotations = False\n            self.use_invoices = False\n            self.dashboard_graph_model = 'sale.report'\n        return super(CrmTeam, self)._onchange_team_type()\n\n    @api.multi\n    def update_invoiced_target(self, value):\n        return self.write({'invoiced_target': round(float(value or 0))})\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     title    override dashboard graph model  crm opportunity report  crm installed ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import date\n\nfrom odoo import api, fields, models, _\n\n\nclass CrmTeam(models.Model):\n    _inherit = 'crm.team'\n\n    use_quotations = fields.Boolean(string='Quotations', help=\"Check this box if you send quotations to your customers rather than confirming orders straight away. \"\n                                                              \"This will add specific action buttons to your dashboard.\")\n    use_invoices = fields.Boolean('Set Invoicing Target', help=\"Check this box to set an invoicing target for this sales channel.\")\n    invoiced = fields.Integer(\n        compute='_compute_invoiced',\n        string='Invoiced This Month', readonly=True,\n        help=\"Invoice revenue for the current month. This is the amount the sales \"\n                \"channel has invoiced this month. It is used to compute the progression ratio \"\n                \"of the current and target revenue on the kanban view.\")\n    invoiced_target = fields.Integer(\n        string='Invoicing Target',\n        help=\"Target of invoice revenue for the current month. This is the amount the sales \"\n             \"channel estimates to be able to invoice this month.\")\n    quotations_count = fields.Integer(\n        compute='_compute_quotations_to_invoice',\n        string='Number of quotations to invoice', readonly=True)\n    quotations_amount = fields.Integer(\n        compute='_compute_quotations_to_invoice',\n        string='Amount of quotations to invoice', readonly=True)\n    sales_to_invoice_count = fields.Integer(\n        compute='_compute_sales_to_invoice',\n        string='Number of sales to invoice', readonly=True)\n    dashboard_graph_model = fields.Selection(selection_add=[\n        ('sale.report', 'Sales'),\n        ('account.invoice.report', 'Invoices'),\n    ])\n\n    def _compute_quotations_to_invoice(self):\n        non_website_teams = self.filtered(lambda team: team.team_type != 'website')\n        if non_website_teams:\n            quotation_data = self.env['sale.report'].read_group([\n                ('team_id', 'in', non_website_teams.ids),\n                ('state', 'in', ['draft', 'sent']),\n            ], ['price_total', 'team_id', 'name'], ['team_id', 'name'], lazy=False)\n            for datum in quotation_data:\n                self.browse(datum['team_id'][0]).quotations_amount += datum['price_total']\n                self.browse(datum['team_id'][0]).quotations_count += 1\n\n    @api.multi\n    def _compute_sales_to_invoice(self):\n        sale_order_data = self.env['sale.order'].read_group([\n            ('team_id', 'in', self.ids),\n            ('order_line.qty_to_invoice', '>', 0),\n        ], ['team_id'], ['team_id'])\n        for datum in sale_order_data:\n            self.browse(datum['team_id'][0]).invoiced = datum['team_id_count']\n\n    @api.multi\n    def _compute_invoiced(self):\n        invoice_data = self.env['account.invoice'].read_group([\n            ('state', 'in', ['open', 'paid']),\n            ('team_id', 'in', self.ids),\n            ('date', '<=', date.today()),\n            ('date', '>=', date.today().replace(day=1)),\n            ('type', 'in', ['out_invoice', 'out_refund']),\n        ], ['amount_untaxed_signed', 'team_id'], ['team_id'])\n        for datum in invoice_data:\n            self.browse(datum['team_id'][0]).invoiced = datum['amount_untaxed_signed']\n\n    def _graph_date_column(self):\n        if self.dashboard_graph_model == 'sale.report':\n            return 'confirmation_date'\n        elif self.dashboard_graph_model == 'account.invoice.report':\n            return 'date'\n        return super(CrmTeam, self)._graph_date_column()\n\n    def _graph_y_query(self):\n        if self.dashboard_graph_model == 'sale.report':\n            return 'SUM(price_subtotal)'\n        elif self.dashboard_graph_model == 'account.invoice.report':\n            return 'SUM(price_total)'\n        return super(CrmTeam, self)._graph_y_query()\n\n    def _extra_sql_conditions(self):\n        if self.dashboard_graph_model == 'sale.report':\n            return \"AND state in ('sale', 'done')\"\n        elif self.dashboard_graph_model == 'account.invoice.report':\n            return \"AND state in ('open', 'paid')\"\n        return super(CrmTeam, self)._extra_sql_conditions()\n\n    def _graph_title_and_key(self):\n        if self.dashboard_graph_model == 'sale.report':\n            return ['', _('Sales: Untaxed Total')] # no more title\n        elif self.dashboard_graph_model == 'account.invoice.report':\n            return ['', _('Invoices: Untaxed Total')]\n        return super(CrmTeam, self)._graph_title_and_key()\n\n    def _compute_dashboard_button_name(self):\n        quotation_teams = self.filtered('use_quotations')\n        quotation_teams.update({'dashboard_button_name': _(\"Quotations\")})\n        (self - quotation_teams).update({'dashboard_button_name': _(\"Sales Orders\")})\n\n    def action_primary_channel_button(self):\n        if hasattr(self, 'use_opportunities') and self.use_opportunities:\n            return super(CrmTeam, self).action_primary_channel_button()\n        elif self.use_quotations:\n            action = self.env.ref('sale.action_quotations_salesteams').read()[0]\n            action['context'] = {'search_default_team_id': self.id}\n            return action\n        else:\n            action = self.env.ref('sale.action_orders_salesteams').read()[0]\n            action['context'] = {'search_default_team_id': self.id}\n            return action\n\n    @api.onchange('team_type')\n    def _onchange_team_type(self):\n        if self.team_type == 'sales':\n            self.use_quotations = True\n            self.use_invoices = True\n            # do not override dashboard_graph_model 'crm.opportunity.report' if crm is installed\n            if not self.dashboard_graph_model:\n                self.dashboard_graph_model = 'sale.report'\n        else:\n            self.use_quotations = False\n            self.use_invoices = False\n            self.dashboard_graph_model = 'sale.report'\n        return super(CrmTeam, self)._onchange_team_type()\n\n    @api.multi\n    def update_invoiced_target(self, value):\n        return self.write({'invoiced_target': round(float(value or 0))})\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sales_team.py", "id": "f746a1fb34173e9e0de19c9d2b1eff42", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/sale/models/sales_team.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}