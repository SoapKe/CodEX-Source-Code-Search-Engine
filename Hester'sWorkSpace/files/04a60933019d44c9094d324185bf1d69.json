{"author": "facebook", "code": "\n\n Copyright (c) 2014, Facebook, Inc.\n\n\n This source code is licensed under the BSD-style license found in the\n LICENSE file in the root directory of this source tree. An additional grant\n of patent rights can be found in the PATENTS file in the same directory.\n\nimport lldb\n\nimport fblldbbase as fb\nimport fblldbobjcruntimehelpers as runtimeHelpers\n\ndef flushCoreAnimationTransaction():\n  fb.evaluateEffect('[CATransaction flush]')\n\ndef setViewHidden(object, hidden):\n  fb.evaluateEffect('[{} setHidden:{}]'.format(object, int(hidden)))\n  flushCoreAnimationTransaction()\n\ndef maskView(viewOrLayer, color, alpha):\n  unmaskView(viewOrLayer)\n  window = fb.evaluateExpression('(UIWindow *)[[UIApplication sharedApplication] keyWindow]')\n  origin = convertPoint(0, 0, viewOrLayer, window)\n  size = fb.evaluateExpressionValue('(CGSize)((CGRect)[(id)%s frame]).size' % viewOrLayer)\n\n  rectExpr = '(CGRect){{%s, %s}, {%s, %s}}' % (origin.GetChildMemberWithName('x').GetValue(),\n                                               origin.GetChildMemberWithName('y').GetValue(),\n                                               size.GetChildMemberWithName('width').GetValue(),\n                                               size.GetChildMemberWithName('height').GetValue())\n  mask = fb.evaluateExpression('(id)[[UIView alloc] initWithFrame:%s]' % rectExpr)\n\n  fb.evaluateEffect('[%s setTag:(NSInteger)%s]' % (mask, viewOrLayer))\n  fb.evaluateEffect('[%s setBackgroundColor:[UIColor %sColor]]' % (mask, color))\n  fb.evaluateEffect('[%s setAlpha:(CGFloat)%s]' % (mask, alpha))\n  fb.evaluateEffect('[%s addSubview:%s]' % (window, mask))\n  flushCoreAnimationTransaction()\n\ndef unmaskView(viewOrLayer):\n  window = fb.evaluateExpression('(UIWindow *)[[UIApplication sharedApplication] keyWindow]')\n  mask = fb.evaluateExpression('(UIView *)[%s viewWithTag:(NSInteger)%s]' % (window, viewOrLayer))\n  fb.evaluateEffect('[%s removeFromSuperview]' % mask)\n  flushCoreAnimationTransaction()\n\ndef convertPoint(x, y, fromViewOrLayer, toViewOrLayer):\n  fromLayer = convertToLayer(fromViewOrLayer)\n  toLayer = convertToLayer(toViewOrLayer)\n  return fb.evaluateExpressionValue('(CGPoint)[%s convertPoint:(CGPoint){ .x = %s, .y = %s } toLayer:(CALayer *)%s]' % (fromLayer, x, y, toLayer))\n\ndef convertToLayer(viewOrLayer):\n  if fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[CALayer class]]' % viewOrLayer):\n    return viewOrLayer\n  elif fb.evaluateBooleanExpression('[(id)%s respondsToSelector:(SEL)@selector(layer)]' % viewOrLayer):\n    return fb.evaluateExpression('(CALayer *)[%s layer]' % viewOrLayer)\n  else:\n    raise Exception('Argument must be a CALayer, UIView, or NSView.')\n\ndef isUIView(obj):\n    return not runtimeHelpers.isMacintoshArch() and fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[UIView class]]' % obj)\n\ndef isNSView(obj):\n    return runtimeHelpers.isMacintoshArch() and fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[NSView class]]' % obj)\n\ndef isView(obj):\n    return isUIView(obj) or isNSView(obj)\n\n Generates a BFS of the views tree starting at the given view as root.\n Yields a tuple of the current view in the tree and its level (view, level)\ndef subviewsOfView(view):\n  views = [(view, 0)]\n  yield views[0]\n  while views:\n    (view, level) = views.pop(0)\n    subviews = fb.evaluateExpression('(id)[%s subviews]' % view)\n    subviewsCount = int(fb.evaluateExpression('(int)[(id)%s count]' % subviews))\n    for i in xrange(subviewsCount):\n      subview = fb.evaluateExpression('(id)[%s objectAtIndex:%i]' % (subviews, i))\n      views.append((subview, level+1))\n      yield (subview, level+1)\n\ndef upwardsRecursiveDescription(view, maxDepth=0):\n  if not fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[UIView class]]' % view) and not fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[NSView class]]' % view):\n    return None\n\n  currentView = view\n  recursiveDescription = []\n  depth = 0\n\n  while currentView and (maxDepth <= 0 or depth <= maxDepth):\n    depth += 1\n\n    viewDescription = fb.evaluateExpressionValue('(id)[%s debugDescription]' % (currentView)).GetObjectDescription()\n    currentView = fb.evaluateExpression('(void*)[%s superview]' % (currentView))\n    try:\n      if int(currentView, 0) == 0:\n        currentView = None\n    except:\n      currentView = None\n\n    if viewDescription:\n      recursiveDescription.insert(0, viewDescription)\n\n  if not len(viewDescription):\n    return None\n\n  currentPrefix = \"\"\n  builder = \"\"\n  for viewDescription in recursiveDescription:\n    builder += currentPrefix + viewDescription + \"\\n\"\n    currentPrefix += \"   | \"\n\n  return builder\n\ndef slowAnimation(speed=1):\n  fb.evaluateEffect('[[[UIApplication sharedApplication] windows] setValue:@(%s) forKeyPath:@\"layer.speed\"]' % speed)\n", "comments": "   usr bin python    copyright (c) 2014  facebook  inc     all rights reserved        this source code licensed bsd style license found    license file root directory source tree  an additional grant    patent rights found patents file directory     generates bfs views tree starting given view root     yields tuple current view tree level (view  level) ", "content": "#!/usr/bin/python\n\n# Copyright (c) 2014, Facebook, Inc.\n# All rights reserved.\n#\n# This source code is licensed under the BSD-style license found in the\n# LICENSE file in the root directory of this source tree. An additional grant\n# of patent rights can be found in the PATENTS file in the same directory.\n\nimport lldb\n\nimport fblldbbase as fb\nimport fblldbobjcruntimehelpers as runtimeHelpers\n\ndef flushCoreAnimationTransaction():\n  fb.evaluateEffect('[CATransaction flush]')\n\ndef setViewHidden(object, hidden):\n  fb.evaluateEffect('[{} setHidden:{}]'.format(object, int(hidden)))\n  flushCoreAnimationTransaction()\n\ndef maskView(viewOrLayer, color, alpha):\n  unmaskView(viewOrLayer)\n  window = fb.evaluateExpression('(UIWindow *)[[UIApplication sharedApplication] keyWindow]')\n  origin = convertPoint(0, 0, viewOrLayer, window)\n  size = fb.evaluateExpressionValue('(CGSize)((CGRect)[(id)%s frame]).size' % viewOrLayer)\n\n  rectExpr = '(CGRect){{%s, %s}, {%s, %s}}' % (origin.GetChildMemberWithName('x').GetValue(),\n                                               origin.GetChildMemberWithName('y').GetValue(),\n                                               size.GetChildMemberWithName('width').GetValue(),\n                                               size.GetChildMemberWithName('height').GetValue())\n  mask = fb.evaluateExpression('(id)[[UIView alloc] initWithFrame:%s]' % rectExpr)\n\n  fb.evaluateEffect('[%s setTag:(NSInteger)%s]' % (mask, viewOrLayer))\n  fb.evaluateEffect('[%s setBackgroundColor:[UIColor %sColor]]' % (mask, color))\n  fb.evaluateEffect('[%s setAlpha:(CGFloat)%s]' % (mask, alpha))\n  fb.evaluateEffect('[%s addSubview:%s]' % (window, mask))\n  flushCoreAnimationTransaction()\n\ndef unmaskView(viewOrLayer):\n  window = fb.evaluateExpression('(UIWindow *)[[UIApplication sharedApplication] keyWindow]')\n  mask = fb.evaluateExpression('(UIView *)[%s viewWithTag:(NSInteger)%s]' % (window, viewOrLayer))\n  fb.evaluateEffect('[%s removeFromSuperview]' % mask)\n  flushCoreAnimationTransaction()\n\ndef convertPoint(x, y, fromViewOrLayer, toViewOrLayer):\n  fromLayer = convertToLayer(fromViewOrLayer)\n  toLayer = convertToLayer(toViewOrLayer)\n  return fb.evaluateExpressionValue('(CGPoint)[%s convertPoint:(CGPoint){ .x = %s, .y = %s } toLayer:(CALayer *)%s]' % (fromLayer, x, y, toLayer))\n\ndef convertToLayer(viewOrLayer):\n  if fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[CALayer class]]' % viewOrLayer):\n    return viewOrLayer\n  elif fb.evaluateBooleanExpression('[(id)%s respondsToSelector:(SEL)@selector(layer)]' % viewOrLayer):\n    return fb.evaluateExpression('(CALayer *)[%s layer]' % viewOrLayer)\n  else:\n    raise Exception('Argument must be a CALayer, UIView, or NSView.')\n\ndef isUIView(obj):\n    return not runtimeHelpers.isMacintoshArch() and fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[UIView class]]' % obj)\n\ndef isNSView(obj):\n    return runtimeHelpers.isMacintoshArch() and fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[NSView class]]' % obj)\n\ndef isView(obj):\n    return isUIView(obj) or isNSView(obj)\n\n# Generates a BFS of the views tree starting at the given view as root.\n# Yields a tuple of the current view in the tree and its level (view, level)\ndef subviewsOfView(view):\n  views = [(view, 0)]\n  yield views[0]\n  while views:\n    (view, level) = views.pop(0)\n    subviews = fb.evaluateExpression('(id)[%s subviews]' % view)\n    subviewsCount = int(fb.evaluateExpression('(int)[(id)%s count]' % subviews))\n    for i in xrange(subviewsCount):\n      subview = fb.evaluateExpression('(id)[%s objectAtIndex:%i]' % (subviews, i))\n      views.append((subview, level+1))\n      yield (subview, level+1)\n\ndef upwardsRecursiveDescription(view, maxDepth=0):\n  if not fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[UIView class]]' % view) and not fb.evaluateBooleanExpression('[(id)%s isKindOfClass:(Class)[NSView class]]' % view):\n    return None\n\n  currentView = view\n  recursiveDescription = []\n  depth = 0\n\n  while currentView and (maxDepth <= 0 or depth <= maxDepth):\n    depth += 1\n\n    viewDescription = fb.evaluateExpressionValue('(id)[%s debugDescription]' % (currentView)).GetObjectDescription()\n    currentView = fb.evaluateExpression('(void*)[%s superview]' % (currentView))\n    try:\n      if int(currentView, 0) == 0:\n        currentView = None\n    except:\n      currentView = None\n\n    if viewDescription:\n      recursiveDescription.insert(0, viewDescription)\n\n  if not len(viewDescription):\n    return None\n\n  currentPrefix = \"\"\n  builder = \"\"\n  for viewDescription in recursiveDescription:\n    builder += currentPrefix + viewDescription + \"\\n\"\n    currentPrefix += \"   | \"\n\n  return builder\n\ndef slowAnimation(speed=1):\n  fb.evaluateEffect('[[[UIApplication sharedApplication] windows] setValue:@(%s) forKeyPath:@\"layer.speed\"]' % speed)\n", "description": "Chisel is a collection of LLDB commands to assist debugging iOS apps.", "file_name": "fblldbviewhelpers.py", "id": "04a60933019d44c9094d324185bf1d69", "language": "Python", "project_name": "chisel", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/facebook-chisel/facebook-chisel-8312a63/fblldbviewhelpers.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:48Z", "url": "https://github.com/facebook/chisel", "wiki": true}