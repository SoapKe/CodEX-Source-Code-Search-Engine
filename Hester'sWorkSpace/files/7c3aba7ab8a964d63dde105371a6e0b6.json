{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport hashlib\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    parse_iso8601,\n    smuggle_url,\n    strip_jsonp,\n    unified_timestamp,\n    unsmuggle_url,\n    urlencode_postdata,\n)\n\n\nclass BiliBiliIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.|bangumi\\.|)bilibili\\.(?:tv|com)/(?:video/av|anime/(?P<anime_id>\\d+)/play\n\n    _TESTS = [{\n        'url': 'http://www.bilibili.tv/video/av1074402/',\n        'md5': '9fa226fe2b8a9a4d5a69b4c6a183417e',\n        'info_dict': {\n            'id': '1074402',\n            'ext': 'mp4',\n            'title': '\u3010\u91d1\u5777\u5783\u3011\u91d1\u6ce1\u6cab',\n            'description': 'md5:ce18c2a2d2193f0df2917d270f2e5923',\n            'duration': 308.315,\n            'timestamp': 1398012660,\n            'upload_date': '20140420',\n            'thumbnail': r're:^https?://.+\\.jpg',\n            'uploader': '\u83ca\u5b50\u6851',\n            'uploader_id': '156160',\n        },\n    }, {\n        \n        'url': 'http://bangumi.bilibili.com/anime/1869/play\n        'only_matching': True,\n    }, {\n        'url': 'http://bangumi.bilibili.com/anime/5802/play\n        'md5': '3f721ad1e75030cc06faf73587cfec57',\n        'info_dict': {\n            'id': '100643',\n            'ext': 'mp4',\n            'title': 'CHAOS;CHILD',\n            'description': '\u5982\u679c\u4f60\u662f\u795e\u660e\uff0c\u5e76\u4e14\u80fd\u591f\u8ba9\u5984\u60f3\u6210\u4e3a\u73b0\u5b9e\u3002\u90a3\u4f60\u4f1a\u8fdb\u884c\u600e\u4e48\u6837\u7684\u5984\u60f3\uff1f\u662f\u6deb\u9761\u7684\u4e16\u754c\uff1f\u72ec\u88c1\u793e\u4f1a\uff1f\u6bc1\u706d\u6027\u7684\u5236\u88c1\uff1f\u8fd8\u662f\u2026\u20262015\u5e74\uff0c\u6da9\u8c37\u3002\u4ece6\u5e74\u524d\u53d1\u751f\u7684\u5927\u707e\u5bb3\u201c\u6da9\u8c37\u5730\u9707\u201d\u4e4b\u540e\u590d\u5174\u4e86\u7684\u8fd9\u4e2a\u8857\u533a\u91cc\u65b0\u8bbe\u7acb\u7684\u79c1\u7acb\u9ad8\u4e2d...',\n        },\n        'skip': 'Geo-restricted to China',\n    }, {\n        \n        'url': 'http://www.bilibili.com/video/av8903802/',\n        'info_dict': {\n            'id': '8903802',\n            'ext': 'mp4',\n            'title': '\u963f\u6ef4\u82f1\u6587\uff5c\u82f1\u6587\u6b4c\u5206\u4eab\n            'description': '\u6ef4\u59b9\u4eca\u5929\u5531Closer\u7d66\u4f60\u807d! \u6709\u53f2\u4ee5\u6765\uff0c\u88ab\u63a8\u6700\u591a\u6b21\u4e5f\u662f\u6700\u4e45\u7684\u6b4c\u66f2\uff0c\u5176\u5b9e\u6b4c\u8bcd\u8ddf\u6211\u539f\u672c\u60f3\u50cf\u5dee\u86ee\u591a\u7684\uff0c\u4e0d\u8fc7\u8fd8\u662f\u597d\u542c\uff01 \u5fae\u535a@\u963f\u6ef4\u82f1\u6587',\n            'uploader': '\u963f\u6ef4\u82f1\u6587',\n            'uploader_id': '65880958',\n            'timestamp': 1488382620,\n            'upload_date': '20170301',\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }]\n\n    _APP_KEY = '84956560bc028eb7'\n    _BILIBILI_KEY = '94aba54af9065f71de72f5508f1cd42e'\n\n    def _report_error(self, result):\n        if 'message' in result:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, result['message']), expected=True)\n        elif 'code' in result:\n            raise ExtractorError('%s returns error %d' % (self.IE_NAME, result['code']), expected=True)\n        else:\n            raise ExtractorError('Can\\'t extract Bangumi episode ID')\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        anime_id = mobj.group('anime_id')\n        webpage = self._download_webpage(url, video_id)\n\n        if 'anime/' not in url:\n            cid = compat_parse_qs(self._search_regex(\n                [r'EmbedPlayer\\([^)]+,\\s*\"([^\"]+)\"\\)',\n                 r'<iframe[^>]+src=\"https://secure\\.bilibili\\.com/secure,([^\"]+)\"'],\n                webpage, 'player parameters'))['cid'][0]\n        else:\n            if 'no_bangumi_tip' not in smuggled_data:\n                self.to_screen('Downloading episode %s. To download all videos in anime %s, re-run youtube-dl with %s' % (\n                    video_id, anime_id, compat_urlparse.urljoin(url, '//bangumi.bilibili.com/anime/%s' % anime_id)))\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                'Referer': url\n            }\n            headers.update(self.geo_verification_headers())\n\n            js = self._download_json(\n                'http://bangumi.bilibili.com/web_api/get_source', video_id,\n                data=urlencode_postdata({'episode_id': video_id}),\n                headers=headers)\n            if 'result' not in js:\n                self._report_error(js)\n            cid = js['result']['cid']\n\n        payload = 'appkey=%s&cid=%s&otype=json&quality=2&type=mp4' % (self._APP_KEY, cid)\n        sign = hashlib.md5((payload + self._BILIBILI_KEY).encode('utf-8')).hexdigest()\n\n        headers = {\n            'Referer': url\n        }\n        headers.update(self.geo_verification_headers())\n\n        video_info = self._download_json(\n            'http://interface.bilibili.com/playurl?%s&sign=%s' % (payload, sign),\n            video_id, note='Downloading video info page',\n            headers=headers)\n\n        if 'durl' not in video_info:\n            self._report_error(video_info)\n\n        entries = []\n\n        for idx, durl in enumerate(video_info['durl']):\n            formats = [{\n                'url': durl['url'],\n                'filesize': int_or_none(durl['size']),\n            }]\n            for backup_url in durl.get('backup_url', []):\n                formats.append({\n                    'url': backup_url,\n                    \n                    'preference': -2 if 'hd.mp4' in backup_url else -3,\n                })\n\n            for a_format in formats:\n                a_format.setdefault('http_headers', {}).update({\n                    'Referer': url,\n                })\n\n            self._sort_formats(formats)\n\n            entries.append({\n                'id': '%s_part%s' % (video_id, idx),\n                'duration': float_or_none(durl.get('length'), 1000),\n                'formats': formats,\n            })\n\n        title = self._html_search_regex('<h1[^>]*>([^<]+)</h1>', webpage, 'title')\n        description = self._html_search_meta('description', webpage)\n        timestamp = unified_timestamp(self._html_search_regex(\n            r'<time[^>]+datetime=\"([^\"]+)\"', webpage, 'upload time', default=None))\n        thumbnail = self._html_search_meta(['og:image', 'thumbnailUrl'], webpage)\n\n        \n        info = {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'thumbnail': thumbnail,\n            'duration': float_or_none(video_info.get('timelength'), scale=1000),\n        }\n\n        uploader_mobj = re.search(\n            r'<a[^>]+href=\"(?:https?:)?//space\\.bilibili\\.com/(?P<id>\\d+)\"[^>]+title=\"(?P<name>[^\"]+)\"',\n            webpage)\n        if uploader_mobj:\n            info.update({\n                'uploader': uploader_mobj.group('name'),\n                'uploader_id': uploader_mobj.group('id'),\n            })\n\n        for entry in entries:\n            entry.update(info)\n\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            for idx, entry in enumerate(entries):\n                entry['id'] = '%s_part%d' % (video_id, (idx + 1))\n\n            return {\n                '_type': 'multi_video',\n                'id': video_id,\n                'title': title,\n                'description': description,\n                'entries': entries,\n            }\n\n\nclass BiliBiliBangumiIE(InfoExtractor):\n    _VALID_URL = r'https?://bangumi\\.bilibili\\.com/anime/(?P<id>\\d+)'\n\n    IE_NAME = 'bangumi.bilibili.com'\n    IE_DESC = 'BiliBili\u756a\u5267'\n\n    _TESTS = [{\n        'url': 'http://bangumi.bilibili.com/anime/1869',\n        'info_dict': {\n            'id': '1869',\n            'title': '\u6df7\u6c8c\u6b66\u58eb',\n            'description': 'md5:6a9622b911565794c11f25f81d6a97d2',\n        },\n        'playlist_count': 26,\n    }, {\n        'url': 'http://bangumi.bilibili.com/anime/1869',\n        'info_dict': {\n            'id': '1869',\n            'title': '\u6df7\u6c8c\u6b66\u58eb',\n            'description': 'md5:6a9622b911565794c11f25f81d6a97d2',\n        },\n        'playlist': [{\n            'md5': '91da8621454dd58316851c27c68b0c13',\n            'info_dict': {\n                'id': '40062',\n                'ext': 'mp4',\n                'title': '\u6df7\u6c8c\u6b66\u58eb',\n                'description': '\u6545\u4e8b\u53d1\u751f\u5728\u65e5\u672c\u7684\u6c5f\u6237\u65f6\u4ee3\u3002\u98ce\u662f\u4e00\u4e2a\u5c0f\u9152\u9986\u7684\u6253\u5de5\u5973\u3002\u4e00\u65e5\uff0c\u9152\u9986\u91cc\u6765\u4e86\u4e00\u7fa4\u6076\u9738\uff0c\u867d\u7136\u4ed6\u4eec\u7684\u4e3e\u52a8\u4ee4\u98ce\u5341\u5206\u4e0d\u6ee1\uff0c\u4f46\u662f\u6bd5\u7adf\u98ce\u53ea\u662f\u4e00\u5c4a\u5973\u6d41\uff0c\u65e0\u6cd5\u5bf9\u4ed6\u4eec\u91c7\u53d6\u4ec0\u4e48\u884c\u52a8\uff0c\u53ea\u80fd\u5728\u5fc3\u91cc\u561f\u54dd\u3002\u8fd9\u65f6\uff0c\u9152\u5bb6\u91cc\u53c8\u8fdb\u6765\u4e86\u4e2a\u201c\u4e0d\u826f\u4efd\u5b50...',\n                'timestamp': 1414538739,\n                'upload_date': '20141028',\n                'episode': '\u75be\u98ce\u6012\u6d9b Tempestuous Temperaments',\n                'episode_number': 1,\n            },\n        }],\n        'params': {\n            'playlist_items': '1',\n        },\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if BiliBiliIE.suitable(url) else super(BiliBiliBangumiIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        bangumi_id = self._match_id(url)\n\n        \n        season_info = self._download_json(\n            'http://bangumi.bilibili.com/jsonp/seasoninfo/%s.ver' % bangumi_id,\n            bangumi_id, transform_source=strip_jsonp)['result']\n\n        entries = [{\n            '_type': 'url_transparent',\n            'url': smuggle_url(episode['webplay_url'], {'no_bangumi_tip': 1}),\n            'ie_key': BiliBiliIE.ie_key(),\n            'timestamp': parse_iso8601(episode.get('update_time'), delimiter=' '),\n            'episode': episode.get('index_title'),\n            'episode_number': int_or_none(episode.get('index')),\n        } for episode in season_info['episodes']]\n\n        entries = sorted(entries, key=lambda entry: entry.get('episode_number'))\n\n        return self.playlist_result(\n            entries, bangumi_id,\n            season_info.get('bangumi_title'), season_info.get('evaluate'))\n", "comments": "# coding: utf-8\n#)(?P<id>\\d+)'\n# Tested in BiliBiliBangumiIE\n#40062',\n#100643',\n# Title with double quotes\n#6 \"Closer',\n# Test metadata only\n# backup URLs have lower priorities\n# TODO 'view_count' requires deobfuscating Javascript\n# Sometimes this API returns a JSONP response\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport hashlib\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_parse_qs,\n    compat_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    parse_iso8601,\n    smuggle_url,\n    strip_jsonp,\n    unified_timestamp,\n    unsmuggle_url,\n    urlencode_postdata,\n)\n\n\nclass BiliBiliIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.|bangumi\\.|)bilibili\\.(?:tv|com)/(?:video/av|anime/(?P<anime_id>\\d+)/play#)(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.bilibili.tv/video/av1074402/',\n        'md5': '9fa226fe2b8a9a4d5a69b4c6a183417e',\n        'info_dict': {\n            'id': '1074402',\n            'ext': 'mp4',\n            'title': '\u3010\u91d1\u5777\u5783\u3011\u91d1\u6ce1\u6cab',\n            'description': 'md5:ce18c2a2d2193f0df2917d270f2e5923',\n            'duration': 308.315,\n            'timestamp': 1398012660,\n            'upload_date': '20140420',\n            'thumbnail': r're:^https?://.+\\.jpg',\n            'uploader': '\u83ca\u5b50\u6851',\n            'uploader_id': '156160',\n        },\n    }, {\n        # Tested in BiliBiliBangumiIE\n        'url': 'http://bangumi.bilibili.com/anime/1869/play#40062',\n        'only_matching': True,\n    }, {\n        'url': 'http://bangumi.bilibili.com/anime/5802/play#100643',\n        'md5': '3f721ad1e75030cc06faf73587cfec57',\n        'info_dict': {\n            'id': '100643',\n            'ext': 'mp4',\n            'title': 'CHAOS;CHILD',\n            'description': '\u5982\u679c\u4f60\u662f\u795e\u660e\uff0c\u5e76\u4e14\u80fd\u591f\u8ba9\u5984\u60f3\u6210\u4e3a\u73b0\u5b9e\u3002\u90a3\u4f60\u4f1a\u8fdb\u884c\u600e\u4e48\u6837\u7684\u5984\u60f3\uff1f\u662f\u6deb\u9761\u7684\u4e16\u754c\uff1f\u72ec\u88c1\u793e\u4f1a\uff1f\u6bc1\u706d\u6027\u7684\u5236\u88c1\uff1f\u8fd8\u662f\u2026\u20262015\u5e74\uff0c\u6da9\u8c37\u3002\u4ece6\u5e74\u524d\u53d1\u751f\u7684\u5927\u707e\u5bb3\u201c\u6da9\u8c37\u5730\u9707\u201d\u4e4b\u540e\u590d\u5174\u4e86\u7684\u8fd9\u4e2a\u8857\u533a\u91cc\u65b0\u8bbe\u7acb\u7684\u79c1\u7acb\u9ad8\u4e2d...',\n        },\n        'skip': 'Geo-restricted to China',\n    }, {\n        # Title with double quotes\n        'url': 'http://www.bilibili.com/video/av8903802/',\n        'info_dict': {\n            'id': '8903802',\n            'ext': 'mp4',\n            'title': '\u963f\u6ef4\u82f1\u6587\uff5c\u82f1\u6587\u6b4c\u5206\u4eab#6 \"Closer',\n            'description': '\u6ef4\u59b9\u4eca\u5929\u5531Closer\u7d66\u4f60\u807d! \u6709\u53f2\u4ee5\u6765\uff0c\u88ab\u63a8\u6700\u591a\u6b21\u4e5f\u662f\u6700\u4e45\u7684\u6b4c\u66f2\uff0c\u5176\u5b9e\u6b4c\u8bcd\u8ddf\u6211\u539f\u672c\u60f3\u50cf\u5dee\u86ee\u591a\u7684\uff0c\u4e0d\u8fc7\u8fd8\u662f\u597d\u542c\uff01 \u5fae\u535a@\u963f\u6ef4\u82f1\u6587',\n            'uploader': '\u963f\u6ef4\u82f1\u6587',\n            'uploader_id': '65880958',\n            'timestamp': 1488382620,\n            'upload_date': '20170301',\n        },\n        'params': {\n            'skip_download': True,  # Test metadata only\n        },\n    }]\n\n    _APP_KEY = '84956560bc028eb7'\n    _BILIBILI_KEY = '94aba54af9065f71de72f5508f1cd42e'\n\n    def _report_error(self, result):\n        if 'message' in result:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, result['message']), expected=True)\n        elif 'code' in result:\n            raise ExtractorError('%s returns error %d' % (self.IE_NAME, result['code']), expected=True)\n        else:\n            raise ExtractorError('Can\\'t extract Bangumi episode ID')\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        anime_id = mobj.group('anime_id')\n        webpage = self._download_webpage(url, video_id)\n\n        if 'anime/' not in url:\n            cid = compat_parse_qs(self._search_regex(\n                [r'EmbedPlayer\\([^)]+,\\s*\"([^\"]+)\"\\)',\n                 r'<iframe[^>]+src=\"https://secure\\.bilibili\\.com/secure,([^\"]+)\"'],\n                webpage, 'player parameters'))['cid'][0]\n        else:\n            if 'no_bangumi_tip' not in smuggled_data:\n                self.to_screen('Downloading episode %s. To download all videos in anime %s, re-run youtube-dl with %s' % (\n                    video_id, anime_id, compat_urlparse.urljoin(url, '//bangumi.bilibili.com/anime/%s' % anime_id)))\n            headers = {\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n                'Referer': url\n            }\n            headers.update(self.geo_verification_headers())\n\n            js = self._download_json(\n                'http://bangumi.bilibili.com/web_api/get_source', video_id,\n                data=urlencode_postdata({'episode_id': video_id}),\n                headers=headers)\n            if 'result' not in js:\n                self._report_error(js)\n            cid = js['result']['cid']\n\n        payload = 'appkey=%s&cid=%s&otype=json&quality=2&type=mp4' % (self._APP_KEY, cid)\n        sign = hashlib.md5((payload + self._BILIBILI_KEY).encode('utf-8')).hexdigest()\n\n        headers = {\n            'Referer': url\n        }\n        headers.update(self.geo_verification_headers())\n\n        video_info = self._download_json(\n            'http://interface.bilibili.com/playurl?%s&sign=%s' % (payload, sign),\n            video_id, note='Downloading video info page',\n            headers=headers)\n\n        if 'durl' not in video_info:\n            self._report_error(video_info)\n\n        entries = []\n\n        for idx, durl in enumerate(video_info['durl']):\n            formats = [{\n                'url': durl['url'],\n                'filesize': int_or_none(durl['size']),\n            }]\n            for backup_url in durl.get('backup_url', []):\n                formats.append({\n                    'url': backup_url,\n                    # backup URLs have lower priorities\n                    'preference': -2 if 'hd.mp4' in backup_url else -3,\n                })\n\n            for a_format in formats:\n                a_format.setdefault('http_headers', {}).update({\n                    'Referer': url,\n                })\n\n            self._sort_formats(formats)\n\n            entries.append({\n                'id': '%s_part%s' % (video_id, idx),\n                'duration': float_or_none(durl.get('length'), 1000),\n                'formats': formats,\n            })\n\n        title = self._html_search_regex('<h1[^>]*>([^<]+)</h1>', webpage, 'title')\n        description = self._html_search_meta('description', webpage)\n        timestamp = unified_timestamp(self._html_search_regex(\n            r'<time[^>]+datetime=\"([^\"]+)\"', webpage, 'upload time', default=None))\n        thumbnail = self._html_search_meta(['og:image', 'thumbnailUrl'], webpage)\n\n        # TODO 'view_count' requires deobfuscating Javascript\n        info = {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'thumbnail': thumbnail,\n            'duration': float_or_none(video_info.get('timelength'), scale=1000),\n        }\n\n        uploader_mobj = re.search(\n            r'<a[^>]+href=\"(?:https?:)?//space\\.bilibili\\.com/(?P<id>\\d+)\"[^>]+title=\"(?P<name>[^\"]+)\"',\n            webpage)\n        if uploader_mobj:\n            info.update({\n                'uploader': uploader_mobj.group('name'),\n                'uploader_id': uploader_mobj.group('id'),\n            })\n\n        for entry in entries:\n            entry.update(info)\n\n        if len(entries) == 1:\n            return entries[0]\n        else:\n            for idx, entry in enumerate(entries):\n                entry['id'] = '%s_part%d' % (video_id, (idx + 1))\n\n            return {\n                '_type': 'multi_video',\n                'id': video_id,\n                'title': title,\n                'description': description,\n                'entries': entries,\n            }\n\n\nclass BiliBiliBangumiIE(InfoExtractor):\n    _VALID_URL = r'https?://bangumi\\.bilibili\\.com/anime/(?P<id>\\d+)'\n\n    IE_NAME = 'bangumi.bilibili.com'\n    IE_DESC = 'BiliBili\u756a\u5267'\n\n    _TESTS = [{\n        'url': 'http://bangumi.bilibili.com/anime/1869',\n        'info_dict': {\n            'id': '1869',\n            'title': '\u6df7\u6c8c\u6b66\u58eb',\n            'description': 'md5:6a9622b911565794c11f25f81d6a97d2',\n        },\n        'playlist_count': 26,\n    }, {\n        'url': 'http://bangumi.bilibili.com/anime/1869',\n        'info_dict': {\n            'id': '1869',\n            'title': '\u6df7\u6c8c\u6b66\u58eb',\n            'description': 'md5:6a9622b911565794c11f25f81d6a97d2',\n        },\n        'playlist': [{\n            'md5': '91da8621454dd58316851c27c68b0c13',\n            'info_dict': {\n                'id': '40062',\n                'ext': 'mp4',\n                'title': '\u6df7\u6c8c\u6b66\u58eb',\n                'description': '\u6545\u4e8b\u53d1\u751f\u5728\u65e5\u672c\u7684\u6c5f\u6237\u65f6\u4ee3\u3002\u98ce\u662f\u4e00\u4e2a\u5c0f\u9152\u9986\u7684\u6253\u5de5\u5973\u3002\u4e00\u65e5\uff0c\u9152\u9986\u91cc\u6765\u4e86\u4e00\u7fa4\u6076\u9738\uff0c\u867d\u7136\u4ed6\u4eec\u7684\u4e3e\u52a8\u4ee4\u98ce\u5341\u5206\u4e0d\u6ee1\uff0c\u4f46\u662f\u6bd5\u7adf\u98ce\u53ea\u662f\u4e00\u5c4a\u5973\u6d41\uff0c\u65e0\u6cd5\u5bf9\u4ed6\u4eec\u91c7\u53d6\u4ec0\u4e48\u884c\u52a8\uff0c\u53ea\u80fd\u5728\u5fc3\u91cc\u561f\u54dd\u3002\u8fd9\u65f6\uff0c\u9152\u5bb6\u91cc\u53c8\u8fdb\u6765\u4e86\u4e2a\u201c\u4e0d\u826f\u4efd\u5b50...',\n                'timestamp': 1414538739,\n                'upload_date': '20141028',\n                'episode': '\u75be\u98ce\u6012\u6d9b Tempestuous Temperaments',\n                'episode_number': 1,\n            },\n        }],\n        'params': {\n            'playlist_items': '1',\n        },\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if BiliBiliIE.suitable(url) else super(BiliBiliBangumiIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        bangumi_id = self._match_id(url)\n\n        # Sometimes this API returns a JSONP response\n        season_info = self._download_json(\n            'http://bangumi.bilibili.com/jsonp/seasoninfo/%s.ver' % bangumi_id,\n            bangumi_id, transform_source=strip_jsonp)['result']\n\n        entries = [{\n            '_type': 'url_transparent',\n            'url': smuggle_url(episode['webplay_url'], {'no_bangumi_tip': 1}),\n            'ie_key': BiliBiliIE.ie_key(),\n            'timestamp': parse_iso8601(episode.get('update_time'), delimiter=' '),\n            'episode': episode.get('index_title'),\n            'episode_number': int_or_none(episode.get('index')),\n        } for episode in season_info['episodes']]\n\n        entries = sorted(entries, key=lambda entry: entry.get('episode_number'))\n\n        return self.playlist_result(\n            entries, bangumi_id,\n            season_info.get('bangumi_title'), season_info.get('evaluate'))\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "bilibili.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/bilibili.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}