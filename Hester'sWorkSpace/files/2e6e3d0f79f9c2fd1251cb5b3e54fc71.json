{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    determine_ext,\n    int_or_none,\n    float_or_none,\n    js_to_json,\n    orderedSet,\n    strip_jsonp,\n    strip_or_none,\n    unified_strdate,\n    US_RATINGS,\n)\n\n\nclass PBSIE(InfoExtractor):\n    _STATIONS = (\n        (r'(?:video|www|player)\\.pbs\\.org', 'PBS: Public Broadcasting Service'),  \n        (r'video\\.aptv\\.org', 'APT - Alabama Public Television (WBIQ)'),  \n        (r'video\\.gpb\\.org', 'GPB/Georgia Public Broadcasting (WGTV)'),  \n        (r'video\\.mpbonline\\.org', 'Mississippi Public Broadcasting (WMPN)'),  \n        (r'video\\.wnpt\\.org', 'Nashville Public Television (WNPT)'),  \n        (r'video\\.wfsu\\.org', 'WFSU-TV (WFSU)'),  \n        (r'video\\.wsre\\.org', 'WSRE (WSRE)'),  \n        (r'video\\.wtcitv\\.org', 'WTCI (WTCI)'),  \n        (r'video\\.pba\\.org', 'WPBA/Channel 30 (WPBA)'),  \n        (r'video\\.alaskapublic\\.org', 'Alaska Public Media (KAKM)'),  \n        \n        \n        \n        (r'video\\.azpbs\\.org', 'Arizona PBS (KAET)'),  \n        (r'portal\\.knme\\.org', 'KNME-TV/Channel 5 (KNME)'),  \n        (r'video\\.vegaspbs\\.org', 'Vegas PBS (KLVX)'),  \n        (r'watch\\.aetn\\.org', 'AETN/ARKANSAS ETV NETWORK (KETS)'),  \n        (r'video\\.ket\\.org', 'KET (WKLE)'),  \n        (r'video\\.wkno\\.org', 'WKNO/Channel 10 (WKNO)'),  \n        (r'video\\.lpb\\.org', 'LPB/LOUISIANA PUBLIC BROADCASTING (WLPB)'),  \n        (r'videos\\.oeta\\.tv', 'OETA (KETA)'),  \n        (r'video\\.optv\\.org', 'Ozarks Public Television (KOZK)'),  \n        (r'watch\\.wsiu\\.org', 'WSIU Public Broadcasting (WSIU)'),  \n        (r'video\\.keet\\.org', 'KEET TV (KEET)'),  \n        (r'pbs\\.kixe\\.org', 'KIXE/Channel 9 (KIXE)'),  \n        (r'video\\.kpbs\\.org', 'KPBS San Diego (KPBS)'),  \n        (r'video\\.kqed\\.org', 'KQED (KQED)'),  \n        (r'vids\\.kvie\\.org', 'KVIE Public Television (KVIE)'),  \n        (r'video\\.pbssocal\\.org', 'PBS SoCal/KOCE (KOCE)'),  \n        (r'video\\.valleypbs\\.org', 'ValleyPBS (KVPT)'),  \n        (r'video\\.cptv\\.org', 'CONNECTICUT PUBLIC TELEVISION (WEDH)'),  \n        (r'watch\\.knpb\\.org', 'KNPB Channel 5 (KNPB)'),  \n        (r'video\\.soptv\\.org', 'SOPTV (KSYS)'),  \n        \n        \n        \n        (r'video\\.rmpbs\\.org', 'Rocky Mountain PBS (KRMA)'),  \n        (r'video\\.kenw\\.org', 'KENW-TV3 (KENW)'),  \n        (r'video\\.kued\\.org', 'KUED Channel 7 (KUED)'),  \n        (r'video\\.wyomingpbs\\.org', 'Wyoming PBS (KCWC)'),  \n        (r'video\\.cpt12\\.org', 'Colorado Public Television / KBDI 12 (KBDI)'),  \n        (r'video\\.kbyueleven\\.org', 'KBYU-TV (KBYU)'),  \n        (r'video\\.thirteen\\.org', 'Thirteen/WNET New York (WNET)'),  \n        (r'video\\.wgbh\\.org', 'WGBH/Channel 2 (WGBH)'),  \n        (r'video\\.wgby\\.org', 'WGBY (WGBY)'),  \n        (r'watch\\.njtvonline\\.org', 'NJTV Public Media NJ (WNJT)'),  \n        \n        (r'watch\\.wliw\\.org', 'WLIW21 (WLIW)'),  \n        (r'video\\.mpt\\.tv', 'mpt/Maryland Public Television (WMPB)'),  \n        (r'watch\\.weta\\.org', 'WETA Television and Radio (WETA)'),  \n        (r'video\\.whyy\\.org', 'WHYY (WHYY)'),  \n        (r'video\\.wlvt\\.org', 'PBS 39 (WLVT)'),  \n        (r'video\\.wvpt\\.net', 'WVPT - Your Source for PBS and More! (WVPT)'),  \n        (r'video\\.whut\\.org', 'Howard University Television (WHUT)'),  \n        (r'video\\.wedu\\.org', 'WEDU PBS (WEDU)'),  \n        (r'video\\.wgcu\\.org', 'WGCU Public Media (WGCU)'),  \n        \n        (r'video\\.wpbt2\\.org', 'WPBT2 (WPBT)'),  \n        (r'video\\.wucftv\\.org', 'WUCF TV (WUCF)'),  \n        (r'video\\.wuft\\.org', 'WUFT/Channel 5 (WUFT)'),  \n        (r'watch\\.wxel\\.org', 'WXEL/Channel 42 (WXEL)'),  \n        (r'video\\.wlrn\\.org', 'WLRN/Channel 17 (WLRN)'),  \n        (r'video\\.wusf\\.usf\\.edu', 'WUSF Public Broadcasting (WUSF)'),  \n        (r'video\\.scetv\\.org', 'ETV (WRLK)'),  \n        (r'video\\.unctv\\.org', 'UNC-TV (WUNC)'),  \n        \n        (r'video\\.pbshawaii\\.org', 'PBS Hawaii - Oceanic Cable Channel 10 (KHET)'),  \n        (r'video\\.idahoptv\\.org', 'Idaho Public Television (KAID)'),  \n        (r'video\\.ksps\\.org', 'KSPS (KSPS)'),  \n        (r'watch\\.opb\\.org', 'OPB (KOPB)'),  \n        (r'watch\\.nwptv\\.org', 'KWSU/Channel 10 & KTNW/Channel 31 (KWSU)'),  \n        (r'video\\.will\\.illinois\\.edu', 'WILL-TV (WILL)'),  \n        (r'video\\.networkknowledge\\.tv', 'Network Knowledge - WSEC/Springfield (WSEC)'),  \n        (r'video\\.wttw\\.com', 'WTTW11 (WTTW)'),  \n        \n        (r'video\\.iptv\\.org', 'Iowa Public Television/IPTV (KDIN)'),  \n        (r'video\\.ninenet\\.org', 'Nine Network (KETC)'),  \n        (r'video\\.wfwa\\.org', 'PBS39 Fort Wayne (WFWA)'),  \n        (r'video\\.wfyi\\.org', 'WFYI Indianapolis (WFYI)'),  \n        (r'video\\.mptv\\.org', 'Milwaukee Public Television (WMVS)'),  \n        (r'video\\.wnin\\.org', 'WNIN (WNIN)'),  \n        (r'video\\.wnit\\.org', 'WNIT Public Television (WNIT)'),  \n        (r'video\\.wpt\\.org', 'WPT (WPNE)'),  \n        (r'video\\.wvut\\.org', 'WVUT/Channel 22 (WVUT)'),  \n        (r'video\\.weiu\\.net', 'WEIU/Channel 51 (WEIU)'),  \n        (r'video\\.wqpt\\.org', 'WQPT-TV (WQPT)'),  \n        (r'video\\.wycc\\.org', 'WYCC PBS Chicago (WYCC)'),  \n        \n        (r'video\\.wipb\\.org', 'WIPB-TV (WIPB)'),  \n        (r'video\\.indianapublicmedia\\.org', 'WTIU (WTIU)'),  \n        (r'watch\\.cetconnect\\.org', 'CET  (WCET)'),  \n        (r'video\\.thinktv\\.org', 'ThinkTVNetwork (WPTD)'),  \n        (r'video\\.wbgu\\.org', 'WBGU-TV (WBGU)'),  \n        (r'video\\.wgvu\\.org', 'WGVU TV (WGVU)'),  \n        (r'video\\.netnebraska\\.org', 'NET1 (KUON)'),  \n        (r'video\\.pioneer\\.org', 'Pioneer Public Television (KWCM)'),  \n        (r'watch\\.sdpb\\.org', 'SDPB Television (KUSD)'),  \n        (r'video\\.tpt\\.org', 'TPT (KTCA)'),  \n        (r'watch\\.ksmq\\.org', 'KSMQ (KSMQ)'),  \n        (r'watch\\.kpts\\.org', 'KPTS/Channel 8 (KPTS)'),  \n        (r'watch\\.ktwu\\.org', 'KTWU/Channel 11 (KTWU)'),  \n        \n        \n        \n        (r'watch\\.easttennesseepbs\\.org', 'East Tennessee PBS (WSJK)'),  \n        (r'video\\.wcte\\.tv', 'WCTE-TV (WCTE)'),  \n        (r'video\\.wljt\\.org', 'WLJT, Channel 11 (WLJT)'),  \n        (r'video\\.wosu\\.org', 'WOSU TV (WOSU)'),  \n        (r'video\\.woub\\.org', 'WOUB/WOUC (WOUB)'),  \n        (r'video\\.wvpublic\\.org', 'WVPB (WVPB)'),  \n        (r'video\\.wkyupbs\\.org', 'WKYU-PBS (WKYU)'),  \n        \n        (r'video\\.kera\\.org', 'KERA 13 (KERA)'),  \n        (r'video\\.mpbn\\.net', 'MPBN (WCBB)'),  \n        (r'video\\.mountainlake\\.org', 'Mountain Lake PBS (WCFE)'),  \n        (r'video\\.nhptv\\.org', 'NHPTV (WENH)'),  \n        (r'video\\.vpt\\.org', 'Vermont PBS (WETK)'),  \n        (r'video\\.witf\\.org', 'witf (WITF)'),  \n        (r'watch\\.wqed\\.org', 'WQED Multimedia (WQED)'),  \n        (r'video\\.wmht\\.org', 'WMHT Educational Telecommunications (WMHT)'),  \n        (r'video\\.deltabroadcasting\\.org', 'Q-TV (WDCQ)'),  \n        (r'video\\.dptv\\.org', 'WTVS Detroit Public TV (WTVS)'),  \n        (r'video\\.wcmu\\.org', 'CMU Public Television (WCMU)'),  \n        (r'video\\.wkar\\.org', 'WKAR-TV (WKAR)'),  \n        (r'wnmuvideo\\.nmu\\.edu', 'WNMU-TV Public TV 13 (WNMU)'),  \n        (r'video\\.wdse\\.org', 'WDSE - WRPT (WDSE)'),  \n        (r'video\\.wgte\\.org', 'WGTE TV (WGTE)'),  \n        (r'video\\.lptv\\.org', 'Lakeland Public Television (KAWE)'),  \n        \n        (r'video\\.kmos\\.org', 'KMOS-TV - Channels 6.1, 6.2 and 6.3 (KMOS)'),  \n        (r'watch\\.montanapbs\\.org', 'MontanaPBS (KUSM)'),  \n        (r'video\\.krwg\\.org', 'KRWG/Channel 22 (KRWG)'),  \n        (r'video\\.kacvtv\\.org', 'KACV (KACV)'),  \n        (r'video\\.kcostv\\.org', 'KCOS/Channel 13 (KCOS)'),  \n        (r'video\\.wcny\\.org', 'WCNY/Channel 24 (WCNY)'),  \n        (r'video\\.wned\\.org', 'WNED (WNED)'),  \n        (r'watch\\.wpbstv\\.org', 'WPBS (WPBS)'),  \n        (r'video\\.wskg\\.org', 'WSKG Public TV (WSKG)'),  \n        (r'video\\.wxxi\\.org', 'WXXI (WXXI)'),  \n        (r'video\\.wpsu\\.org', 'WPSU (WPSU)'),  \n        \n        (r'on-demand\\.wvia\\.org', 'WVIA Public Media Studios (WVIA)'),  \n        (r'video\\.wtvi\\.org', 'WTVI (WTVI)'),  \n        \n        (r'video\\.westernreservepublicmedia\\.org', 'Western Reserve PBS (WNEO)'),  \n        (r'video\\.ideastream\\.org', 'WVIZ/PBS ideastream (WVIZ)'),  \n        (r'video\\.kcts9\\.org', 'KCTS 9 (KCTS)'),  \n        (r'video\\.basinpbs\\.org', 'Basin PBS (KPBT)'),  \n        (r'video\\.houstonpbs\\.org', 'KUHT / Channel 8 (KUHT)'),  \n        \n        \n        (r'video\\.klrn\\.org', 'KLRN (KLRN)'),  \n        (r'video\\.klru\\.tv', 'KLRU (KLRU)'),  \n        \n        \n        \n        (r'video\\.wtjx\\.org', 'WTJX Channel 12 (WTJX)'),  \n        (r'video\\.ideastations\\.org', 'WCVE PBS (WCVE)'),  \n        (r'video\\.kbtc\\.org', 'KBTC Public Television (KBTC)'),  \n    )\n\n    IE_NAME = 'pbs'\n    IE_DESC = 'Public Broadcasting Service (PBS) and member stations: %s' % ', '.join(list(zip(*_STATIONS))[1])\n\n    _VALID_URL = r % '|'.join(list(zip(*_STATIONS))[0])\n\n    _GEO_COUNTRIES = ['US']\n\n    _TESTS = [\n        {\n            'url': 'http://www.pbs.org/tpt/constitution-usa-peter-sagal/watch/a-more-perfect-union/',\n            'md5': '173dc391afd361fa72eab5d3d918968d',\n            'info_dict': {\n                'id': '2365006249',\n                'ext': 'mp4',\n                'title': 'Constitution USA with Peter Sagal - A More Perfect Union',\n                'description': 'md5:31b664af3c65fd07fa460d306b837d00',\n                'duration': 3190,\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/pages/frontline/losing-iraq/',\n            'md5': '6f722cb3c3982186d34b0f13374499c7',\n            'info_dict': {\n                'id': '2365297690',\n                'ext': 'mp4',\n                'title': 'FRONTLINE - Losing Iraq',\n                'description': 'md5:5979a4d069b157f622d02bff62fbe654',\n                'duration': 5050,\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/newshour/bb/education-jan-june12-cyberschools_02-23/',\n            'md5': 'b19856d7f5351b17a5ab1dc6a64be633',\n            'info_dict': {\n                'id': '2201174722',\n                'ext': 'mp4',\n                'title': 'PBS NewsHour - Cyber Schools Gain Popularity, but Quality Questions Persist',\n                'description': 'md5:86ab9a3d04458b876147b355788b8781',\n                'duration': 801,\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/wnet/gperf/dudamel-conducts-verdi-requiem-hollywood-bowl-full-episode/3374/',\n            'md5': 'c62859342be2a0358d6c9eb306595978',\n            'info_dict': {\n                'id': '2365297708',\n                'ext': 'mp4',\n                'title': 'Great Performances - Dudamel Conducts Verdi Requiem at the Hollywood Bowl - Full',\n                'description': 'md5:657897370e09e2bc6bf0f8d2cd313c6b',\n                'duration': 6559,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/nova/earth/killer-typhoon.html',\n            'md5': '908f3e5473a693b266b84e25e1cf9703',\n            'info_dict': {\n                'id': '2365160389',\n                'display_id': 'killer-typhoon',\n                'ext': 'mp4',\n                'description': 'md5:c741d14e979fc53228c575894094f157',\n                'title': 'NOVA - Killer Typhoon',\n                'duration': 3172,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'upload_date': '20140122',\n                'age_limit': 10,\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/pages/frontline/united-states-of-secrets/',\n            'info_dict': {\n                'id': 'united-states-of-secrets',\n            },\n            'playlist_count': 2,\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/americanexperience/films/great-war/',\n            'info_dict': {\n                'id': 'great-war',\n            },\n            'playlist_count': 3,\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/americanexperience/films/death/player/',\n            'info_dict': {\n                'id': '2276541483',\n                'display_id': 'player',\n                'ext': 'mp4',\n                'title': 'American Experience - Death and the Civil War, Chapter 1',\n                'description': 'md5:67fa89a9402e2ee7d08f53b920674c18',\n                'duration': 682,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                'skip_download': True,  \n            },\n        },\n        {\n            'url': 'http://www.pbs.org/video/2365245528/',\n            'md5': '115223d41bd55cda8ae5cd5ed4e11497',\n            'info_dict': {\n                'id': '2365245528',\n                'display_id': '2365245528',\n                'ext': 'mp4',\n                'title': 'FRONTLINE - United States of Secrets (Part One)',\n                'description': 'md5:55756bd5c551519cc4b7703e373e217e',\n                'duration': 6851,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            \n            \n            \n            'url': 'http://www.pbs.org/food/features/a-chefs-life-season-3-episode-5-prickly-business/',\n            'md5': '59b0ef5009f9ac8a319cc5efebcd865e',\n            'info_dict': {\n                'id': '2365546844',\n                'display_id': 'a-chefs-life-season-3-episode-5-prickly-business',\n                'ext': 'mp4',\n                'title': \"A Chef's Life - Season 3, Ep. 5: Prickly Business\",\n                'description': 'md5:c0ff7475a4b70261c7e58f493c2792a5',\n                'duration': 1480,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            \n            'url': 'http://www.pbs.org/wgbh/pages/frontline/the-atomic-artists',\n            'info_dict': {\n                'id': '2070868960',\n                'display_id': 'the-atomic-artists',\n                'ext': 'mp4',\n                'title': 'FRONTLINE - The Atomic Artists',\n                'description': 'md5:f677e4520cfacb4a5ce1471e31b57800',\n                'duration': 723,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                'skip_download': True,  \n            },\n        },\n        {\n            \n            'url': 'http://www.pbs.org/video/2365641075/',\n            'md5': 'fdf907851eab57211dd589cf12006666',\n            'info_dict': {\n                'id': '2365641075',\n                'ext': 'mp4',\n                'title': 'FRONTLINE - Netanyahu at War',\n                'duration': 6852,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'formats': 'mincount:8',\n            },\n        },\n        {\n            \n            'url': 'https://www.pbs.org/video/pbs-newshour-full-episode-july-31-2017-1501539057/',\n            'info_dict': {\n                'id': '3003333873',\n                'ext': 'mp4',\n                'title': 'PBS NewsHour - full episode July 31, 2017',\n                'description': 'md5:d41d8cd98f00b204e9800998ecf8427e',\n                'duration': 3265,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://player.pbs.org/widget/partnerplayer/2365297708/?start=0&end=0&chapterbar=false&endscreen=false&topbar=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://watch.knpb.org/video/2365616055/',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://player.pbs.org/portalplayer/3004638221/?uid=',\n            'only_matching': True,\n        }\n    ]\n    _ERRORS = {\n        101: 'We\\'re sorry, but this video is not yet available.',\n        403: 'We\\'re sorry, but this video is not available in your region due to right restrictions.',\n        404: 'We are experiencing technical difficulties that are preventing us from playing the video at this time. Please check back again soon.',\n        410: 'This video has expired and is no longer available for online streaming.',\n    }\n\n    def _real_initialize(self):\n        cookie = (self._download_json(\n            'http://localization.services.pbs.org/localize/auto/cookie/',\n            None, headers=self.geo_verification_headers(), fatal=False) or {}).get('cookie')\n        if cookie:\n            station = self._search_regex(r'\n            if station:\n                self._set_cookie('.pbs.org', 'pbsol.station', station)\n\n    def _extract_webpage(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        description = None\n\n        presumptive_id = mobj.group('presumptive_id')\n        display_id = presumptive_id\n        if presumptive_id:\n            webpage = self._download_webpage(url, display_id)\n\n            description = strip_or_none(self._og_search_description(\n                webpage, default=None) or self._html_search_meta(\n                'description', webpage, default=None))\n            upload_date = unified_strdate(self._search_regex(\n                r'<input type=\"hidden\" id=\"air_date_[0-9]+\" value=\"([^\"]+)\"',\n                webpage, 'upload date', default=None))\n\n            \n            MULTI_PART_REGEXES = (\n                r'<div[^>]+class=\"videotab[^\"]*\"[^>]+vid=\"(\\d+)\"',\n                r'<a[^>]+href=[\"\\']\n            )\n            for p in MULTI_PART_REGEXES:\n                tabbed_videos = orderedSet(re.findall(p, webpage))\n                if tabbed_videos:\n                    return tabbed_videos, presumptive_id, upload_date, description\n\n            MEDIA_ID_REGEXES = [\n                r\"div\\s*:\\s*'videoembed'\\s*,\\s*mediaid\\s*:\\s*'(\\d+)'\",  \n                r'class=\"coveplayerid\">([^<]+)<',                       \n                r'<section[^>]+data-coveid=\"(\\d+)\"',                    \n                r'<input type=\"hidden\" id=\"pbs_video_id_[0-9]+\" value=\"([0-9]+)\"/>',  \n                r\"(?s)window\\.PBS\\.playerConfig\\s*=\\s*{.*?id\\s*:\\s*'([0-9]+)',\",\n            ]\n\n            media_id = self._search_regex(\n                MEDIA_ID_REGEXES, webpage, 'media ID', fatal=False, default=None)\n            if media_id:\n                return media_id, presumptive_id, upload_date, description\n\n            \n            video_id = self._search_regex(\n                r'videoid\\s*:\\s*\"([\\d+a-z]{7,})\"', webpage, 'videoid', default=None)\n            if video_id:\n                \n                \n                prg_id = self._search_regex(\n                    r'videoid\\s*:\\s*\"([\\d+a-z]{7,})\"', webpage, 'videoid')[7:]\n                if 'q' in prg_id:\n                    prg_id = prg_id.split('q')[1]\n                prg_id = int(prg_id, 16)\n                getdir = self._download_json(\n                    'http://www.pbs.org/wgbh/pages/frontline/.json/getdir/getdir%d.json' % prg_id,\n                    presumptive_id, 'Downloading getdir JSON',\n                    transform_source=strip_jsonp)\n                return getdir['mid'], presumptive_id, upload_date, description\n\n            for iframe in re.findall(r'(?s)<iframe(.+?)></iframe>', webpage):\n                url = self._search_regex(\n                    r'src=([\"\\'])(?P<url>.+?partnerplayer.+?)\\1', iframe,\n                    'player URL', default=None, group='url')\n                if url:\n                    break\n\n            if not url:\n                url = self._og_search_url(webpage)\n\n            mobj = re.match(self._VALID_URL, url)\n\n        player_id = mobj.group('player_id')\n        if not display_id:\n            display_id = player_id\n        if player_id:\n            player_page = self._download_webpage(\n                url, display_id, note='Downloading player page',\n                errnote='Could not download player page')\n            video_id = self._search_regex(\n                r'<div\\s+id=\"video_([0-9]+)\"', player_page, 'video ID')\n        else:\n            video_id = mobj.group('id')\n            display_id = video_id\n\n        return video_id, display_id, None, description\n\n    def _real_extract(self, url):\n        video_id, display_id, upload_date, description = self._extract_webpage(url)\n\n        if isinstance(video_id, list):\n            entries = [self.url_result(\n                'http://video.pbs.org/video/%s' % vid_id, 'PBS', vid_id)\n                for vid_id in video_id]\n            return self.playlist_result(entries, display_id)\n\n        info = None\n        redirects = []\n        redirect_urls = set()\n\n        def extract_redirect_urls(info):\n            for encoding_name in ('recommended_encoding', 'alternate_encoding'):\n                redirect = info.get(encoding_name)\n                if not redirect:\n                    continue\n                redirect_url = redirect.get('url')\n                if redirect_url and redirect_url not in redirect_urls:\n                    redirects.append(redirect)\n                    redirect_urls.add(redirect_url)\n\n        chapters = []\n        \n        for page in ('widget/partnerplayer', 'portalplayer'):\n            player = self._download_webpage(\n                'http://player.pbs.org/%s/%s' % (page, video_id),\n                display_id, 'Downloading %s page' % page, fatal=False)\n            if player:\n                video_info = self._parse_json(\n                    self._search_regex(\n                        r'(?s)PBS\\.videoData\\s*=\\s*({.+?});\\n',\n                        player, '%s video data' % page, default='{}'),\n                    display_id, transform_source=js_to_json, fatal=False)\n                if video_info:\n                    extract_redirect_urls(video_info)\n                    if not info:\n                        info = video_info\n                if not chapters:\n                    for chapter_data in re.findall(r'(?s)chapters\\.push\\(({.*?})\\)', player):\n                        chapter = self._parse_json(chapter_data, video_id, js_to_json, fatal=False)\n                        if not chapter:\n                            continue\n                        start_time = float_or_none(chapter.get('start_time'), 1000)\n                        duration = float_or_none(chapter.get('duration'), 1000)\n                        if start_time is None or duration is None:\n                            continue\n                        chapters.append({\n                            'start_time': start_time,\n                            'end_time': start_time + duration,\n                            'title': chapter.get('title'),\n                        })\n\n        formats = []\n        http_url = None\n        for num, redirect in enumerate(redirects):\n            redirect_id = redirect.get('eeid')\n\n            redirect_info = self._download_json(\n                '%s?format=json' % redirect['url'], display_id,\n                'Downloading %s video url info' % (redirect_id or num),\n                headers=self.geo_verification_headers())\n\n            if redirect_info['status'] == 'error':\n                message = self._ERRORS.get(\n                    redirect_info['http_code'], redirect_info['message'])\n                if redirect_info['http_code'] == 403:\n                    self.raise_geo_restricted(\n                        msg=message, countries=self._GEO_COUNTRIES)\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, message), expected=True)\n\n            format_url = redirect_info.get('url')\n            if not format_url:\n                continue\n\n            if determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, display_id, 'mp4', m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'format_id': redirect_id,\n                })\n                if re.search(r'^https?://.*(?:\\d+k|baseline)', format_url):\n                    http_url = format_url\n        self._remove_duplicate_formats(formats)\n        m3u8_formats = list(filter(\n            lambda f: f.get('protocol') == 'm3u8' and f.get('vcodec') != 'none',\n            formats))\n        if http_url:\n            for m3u8_format in m3u8_formats:\n                bitrate = self._search_regex(r'(\\d+)k', m3u8_format['url'], 'bitrate', default=None)\n                \n                \n                \n                \n                \n                \n                if not bitrate or int(bitrate) < 400:\n                    continue\n                f_url = re.sub(r'\\d+k|baseline', bitrate + 'k', http_url)\n                \n                \n                if not self._is_valid_url(f_url, display_id, 'http-%sk video' % bitrate):\n                    continue\n                f = m3u8_format.copy()\n                f.update({\n                    'url': f_url,\n                    'format_id': m3u8_format['format_id'].replace('hls', 'http'),\n                    'protocol': 'http',\n                })\n                formats.append(f)\n        self._sort_formats(formats)\n\n        rating_str = info.get('rating')\n        if rating_str is not None:\n            rating_str = rating_str.rpartition('-')[2]\n        age_limit = US_RATINGS.get(rating_str)\n\n        subtitles = {}\n        closed_captions_url = info.get('closed_captions_url')\n        if closed_captions_url:\n            subtitles['en'] = [{\n                'ext': 'ttml',\n                'url': closed_captions_url,\n            }]\n            mobj = re.search(r'/(\\d+)_Encoded\\.dfxp', closed_captions_url)\n            if mobj:\n                ttml_caption_suffix, ttml_caption_id = mobj.group(0, 1)\n                ttml_caption_id = int(ttml_caption_id)\n                subtitles['en'].extend([{\n                    'url': closed_captions_url.replace(\n                        ttml_caption_suffix, '/%d_Encoded.srt' % (ttml_caption_id + 1)),\n                    'ext': 'srt',\n                }, {\n                    'url': closed_captions_url.replace(\n                        ttml_caption_suffix, '/%d_Encoded.vtt' % (ttml_caption_id + 2)),\n                    'ext': 'vtt',\n                }])\n\n        \n        \n        alt_title = info.get('program', {}).get('title')\n        if alt_title:\n            info['title'] = alt_title + ' - ' + re.sub(r'^' + alt_title + r'[\\s\\-:]+', '', info['title'])\n\n        description = info.get('description') or info.get(\n            'program', {}).get('description') or description\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': info['title'],\n            'description': description,\n            'thumbnail': info.get('image_url'),\n            'duration': int_or_none(info.get('duration')),\n            'age_limit': age_limit,\n            'upload_date': upload_date,\n            'formats': formats,\n            'subtitles': subtitles,\n            'chapters': chapters,\n        }\n", "comments": "(?x)https?://\n        (?:\n           # Direct video URL\n           (?:%s)/(?:(?:vir|port)alplayer|video)/(?P<id>[0-9]+)(?:[?/]|$) |\n           # Article with embedded player (or direct video)\n           (?:www\\.)?pbs\\.org/(?:[^/]+/){1,5}(?P<presumptive_id>[^/]+?)(?:\\.html)?/?(?:$|[?\\#]) |\n           # Player\n           (?:video|player)\\.pbs\\.org/(?:widget/)?partnerplayer/(?P<player_id>[^/]+)/\n        )\n    \n \n# coding: utf-8\n# http://www.pbs.org/\n# http://aptv.org/\n# http://www.gpb.org/\n# http://www.mpbonline.org\n# http://www.wnpt.org\n# http://wfsu.org/\n# http://www.wsre.org\n# http://www.wtcitv.org\n# http://pba.org/\n# http://alaskapublic.org/kakm\n# (r'kuac\\.org', 'KUAC (KUAC)'),  # http://kuac.org/kuac-tv/\n# (r'ktoo\\.org', '360 North (KTOO)'),  # http://www.ktoo.org/\n# (r'azpm\\.org', 'KUAT 6 (KUAT)'),  # http://www.azpm.org/\n# http://www.azpbs.org\n# http://www.newmexicopbs.org/\n# http://vegaspbs.org/\n# http://www.aetn.org/\n# http://www.ket.org/\n# http://www.wkno.org/\n# http://www.lpb.org/\n# http://www.oeta.tv\n# http://www.optv.org/\n# http://www.wsiu.org/\n# http://www.keet.org\n# http://kixe.org/\n# http://www.kpbs.org/\n# http://www.kqed.org\n# http://www.kvie.org\n# http://www.pbssocal.org/\n# http://www.valleypbs.org/\n# http://cptv.org\n# http://www.knpb.org/\n# http://www.soptv.org\n# (r'klcs\\.org', 'KLCS/Channel 58 (KLCS)'),  # http://www.klcs.org\n# (r'krcb\\.org', 'KRCB Television & Radio (KRCB)'),  # http://www.krcb.org\n# (r'kvcr\\.org', 'KVCR TV/DT/FM :: Vision for the Future (KVCR)'),  # http://kvcr.org\n# http://www.rmpbs.org\n# http://www.kenw.org\n# http://www.kued.org\n# http://www.wyomingpbs.org\n# http://www.cpt12.org/\n# http://www.kbyutv.org/\n# http://www.thirteen.org\n# http://wgbh.org\n# http://www.wgby.org\n# http://www.njtvonline.org/\n# (r'ripbs\\.org', 'Rhode Island PBS (WSBE)'),  # http://www.ripbs.org/home/\n# http://www.wliw.org/\n# http://www.mpt.org\n# http://www.weta.org\n# http://www.whyy.org\n# http://www.wlvt.org/\n# http://www.wvpt.net\n# http://www.whut.org\n# http://www.wedu.org\n# http://www.wgcu.org/\n# (r'wjct\\.org', 'WJCT Public Broadcasting (WJCT)'),  # http://www.wjct.org\n# http://www.wpbt2.org\n# http://wucftv.org\n# http://www.wuft.org\n# http://www.wxel.org/home/\n# http://www.wlrn.org/\n# http://wusf.org/\n# http://www.scetv.org\n# http://www.unctv.org/\n# (r'pbsguam\\.org', 'PBS Guam (KGTF)'),  # http://www.pbsguam.org/\n# http://www.pbshawaii.org/\n# http://idahoptv.org\n# http://www.ksps.org/home/\n# http://www.opb.org\n# http://www.kwsu.org\n# http://will.illinois.edu/\n# http://www.wsec.tv\n# http://www.wttw.com/\n# (r'wtvp\\.org', 'WTVP & WTVP.org, Public Media for Central Illinois (WTVP)'),  # http://www.wtvp.org/\n# http://www.iptv.org/\n# http://www.ninenet.org\n# http://wfwa.org/\n# http://www.wfyi.org\n# http://www.mptv.org\n# http://www.wnin.org/\n# http://www.wnit.org/\n# http://www.wpt.org/\n# http://wvut.org/\n# http://www.weiu.net\n# http://www.wqpt.org\n# http://www.wycc.org\n# (r'lakeshorepublicmedia\\.org', 'Lakeshore Public Television (WYIN)'),  # http://lakeshorepublicmedia.org/\n# http://wipb.org\n# http://indianapublicmedia.org/tv/\n# http://www.cetconnect.org\n# http://www.thinktv.org\n# http://wbgu.org\n# http://www.wgvu.org/\n# http://netnebraska.org\n# http://www.pioneer.org\n# http://www.sdpb.org\n# http://www.tpt.org\n# http://www.ksmq.org/\n# http://www.kpts.org/\n# http://ktwu.org\n# (r'shptv\\.org', 'Smoky Hills Public Television (KOOD)'),  # http://www.shptv.org\n# (r'kcpt\\.org', 'KCPT Kansas City Public Television (KCPT)'),  # http://kcpt.org/\n# (r'blueridgepbs\\.org', 'Blue Ridge PBS (WBRA)'),  # http://www.blueridgepbs.org/\n# http://easttennesseepbs.org\n# http://www.wcte.org\n# http://wljt.org/\n# http://wosu.org/\n# http://woub.org/tv/index.php?section=5\n# http://wvpublic.org/\n# http://www.wkyupbs.org\n# (r'wyes\\.org', 'WYES-TV/New Orleans (WYES)'),  # http://www.wyes.org\n# http://www.kera.org/\n# http://www.mpbn.net/\n# http://www.mountainlake.org/\n# http://nhptv.org/\n# http://www.vpt.org\n# http://www.witf.org\n# http://www.wqed.org/\n# http://www.wmht.org/home/\n# http://www.deltabroadcasting.org\n# http://www.dptv.org/\n# http://www.wcmu.org\n# http://wkar.org/\n# http://wnmutv.nmu.edu\n# http://www.wdse.org/\n# http://www.wgte.org\n# http://www.lakelandptv.org\n# (r'prairiepublic\\.org', 'PRAIRIE PUBLIC (KFME)'),  # http://www.prairiepublic.org/\n# http://www.kmos.org/\n# http://montanapbs.org\n# http://www.krwg.org\n# http://www.panhandlepbs.org/home/\n# www.kcostv.org\n# http://www.wcny.org\n# http://www.wned.org/\n# http://www.wpbstv.org\n# http://wskg.org\n# http://wxxi.org\n# http://www.wpsu.org\n# (r'wqln\\.org', 'WQLN/Channel 54 (WQLN)'),  # http://www.wqln.org\n# http://www.wvia.org/\n# http://www.wtvi.org/\n# (r'whro\\.org', 'WHRO (WHRO)'),  # http://whro.org\n# http://www.WesternReservePublicMedia.org/\n# http://www.wviz.org/\n# http://kcts9.org/\n# http://www.basinpbs.org\n# http://www.houstonpublicmedia.org/\n# (r'tamu\\.edu', 'KAMU - TV (KAMU)'),  # http://KAMU.tamu.edu\n# (r'kedt\\.org', 'KEDT/Channel 16 (KEDT)'),  # http://www.kedt.org\n# http://www.klrn.org\n# http://www.klru.org\n# (r'kmbh\\.org', 'KMBH-TV (KMBH)'),  # http://www.kmbh.org\n# (r'knct\\.org', 'KNCT (KNCT)'),  # http://www.knct.org\n# (r'ktxt\\.org', 'KTTZ-TV (KTXT)'),  # http://www.ktxt.org\n# http://www.wtjx.org/\n# http://ideastations.org/\n# http://kbtc.org\n# requires ffmpeg\n# Video embedded in iframe containing angle brackets as attribute's value (e.g.\n# \"<iframe style='position: absolute;<br />\\ntop: 0; left: 0;' ...\", see\n# https://github.com/rg3/youtube-dl/issues/7059)\n# Frontline video embedded via flp2012.js\n# requires ffmpeg\n# Serves hd only via wigget/partnerplayer page\n# https://github.com/rg3/youtube-dl/issues/13801\n#?s=\\[\"([^\"]+)\"', cookie, 'station')\n# tabbed frontline videos\n#(?:video-|part)\\d+[\"\\'][^>]+data-cove[Ii]d=[\"\\'](\\d+)',\n# frontline video embed\n# coveplayer\n# coveplayer from http://www.pbs.org/wgbh/frontline/film/real-csi/\n# jwplayer\n# Fronline video embedded via flp\n# pkg_id calculation is reverse engineered from\n# http://www.pbs.org/wgbh/pages/frontline/js/flp2012.js\n# Player pages may also serve different qualities\n# Lower qualities (150k and 192k) are not available as HTTP formats (see [1]),\n# we won't try extracting them.\n# Since summer 2016 higher quality formats (4500k and 6500k) are also available\n# albeit they are not documented in [2].\n# 1. https://github.com/rg3/youtube-dl/commit/cbc032c8b70a038a69259378c92b4ba97b42d491#commitcomment-17313656\n# 2. https://projects.pbs.org/confluence/display/coveapi/COVE+Video+Specifications\n# This may produce invalid links sometimes (e.g.\n# http://www.pbs.org/wgbh/frontline/film/suicide-plan)\n# info['title'] is often incomplete (e.g. 'Full Episode', 'Episode 5', etc)\n# Try turning it to 'program - title' naming scheme if possible\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    determine_ext,\n    int_or_none,\n    float_or_none,\n    js_to_json,\n    orderedSet,\n    strip_jsonp,\n    strip_or_none,\n    unified_strdate,\n    US_RATINGS,\n)\n\n\nclass PBSIE(InfoExtractor):\n    _STATIONS = (\n        (r'(?:video|www|player)\\.pbs\\.org', 'PBS: Public Broadcasting Service'),  # http://www.pbs.org/\n        (r'video\\.aptv\\.org', 'APT - Alabama Public Television (WBIQ)'),  # http://aptv.org/\n        (r'video\\.gpb\\.org', 'GPB/Georgia Public Broadcasting (WGTV)'),  # http://www.gpb.org/\n        (r'video\\.mpbonline\\.org', 'Mississippi Public Broadcasting (WMPN)'),  # http://www.mpbonline.org\n        (r'video\\.wnpt\\.org', 'Nashville Public Television (WNPT)'),  # http://www.wnpt.org\n        (r'video\\.wfsu\\.org', 'WFSU-TV (WFSU)'),  # http://wfsu.org/\n        (r'video\\.wsre\\.org', 'WSRE (WSRE)'),  # http://www.wsre.org\n        (r'video\\.wtcitv\\.org', 'WTCI (WTCI)'),  # http://www.wtcitv.org\n        (r'video\\.pba\\.org', 'WPBA/Channel 30 (WPBA)'),  # http://pba.org/\n        (r'video\\.alaskapublic\\.org', 'Alaska Public Media (KAKM)'),  # http://alaskapublic.org/kakm\n        # (r'kuac\\.org', 'KUAC (KUAC)'),  # http://kuac.org/kuac-tv/\n        # (r'ktoo\\.org', '360 North (KTOO)'),  # http://www.ktoo.org/\n        # (r'azpm\\.org', 'KUAT 6 (KUAT)'),  # http://www.azpm.org/\n        (r'video\\.azpbs\\.org', 'Arizona PBS (KAET)'),  # http://www.azpbs.org\n        (r'portal\\.knme\\.org', 'KNME-TV/Channel 5 (KNME)'),  # http://www.newmexicopbs.org/\n        (r'video\\.vegaspbs\\.org', 'Vegas PBS (KLVX)'),  # http://vegaspbs.org/\n        (r'watch\\.aetn\\.org', 'AETN/ARKANSAS ETV NETWORK (KETS)'),  # http://www.aetn.org/\n        (r'video\\.ket\\.org', 'KET (WKLE)'),  # http://www.ket.org/\n        (r'video\\.wkno\\.org', 'WKNO/Channel 10 (WKNO)'),  # http://www.wkno.org/\n        (r'video\\.lpb\\.org', 'LPB/LOUISIANA PUBLIC BROADCASTING (WLPB)'),  # http://www.lpb.org/\n        (r'videos\\.oeta\\.tv', 'OETA (KETA)'),  # http://www.oeta.tv\n        (r'video\\.optv\\.org', 'Ozarks Public Television (KOZK)'),  # http://www.optv.org/\n        (r'watch\\.wsiu\\.org', 'WSIU Public Broadcasting (WSIU)'),  # http://www.wsiu.org/\n        (r'video\\.keet\\.org', 'KEET TV (KEET)'),  # http://www.keet.org\n        (r'pbs\\.kixe\\.org', 'KIXE/Channel 9 (KIXE)'),  # http://kixe.org/\n        (r'video\\.kpbs\\.org', 'KPBS San Diego (KPBS)'),  # http://www.kpbs.org/\n        (r'video\\.kqed\\.org', 'KQED (KQED)'),  # http://www.kqed.org\n        (r'vids\\.kvie\\.org', 'KVIE Public Television (KVIE)'),  # http://www.kvie.org\n        (r'video\\.pbssocal\\.org', 'PBS SoCal/KOCE (KOCE)'),  # http://www.pbssocal.org/\n        (r'video\\.valleypbs\\.org', 'ValleyPBS (KVPT)'),  # http://www.valleypbs.org/\n        (r'video\\.cptv\\.org', 'CONNECTICUT PUBLIC TELEVISION (WEDH)'),  # http://cptv.org\n        (r'watch\\.knpb\\.org', 'KNPB Channel 5 (KNPB)'),  # http://www.knpb.org/\n        (r'video\\.soptv\\.org', 'SOPTV (KSYS)'),  # http://www.soptv.org\n        # (r'klcs\\.org', 'KLCS/Channel 58 (KLCS)'),  # http://www.klcs.org\n        # (r'krcb\\.org', 'KRCB Television & Radio (KRCB)'),  # http://www.krcb.org\n        # (r'kvcr\\.org', 'KVCR TV/DT/FM :: Vision for the Future (KVCR)'),  # http://kvcr.org\n        (r'video\\.rmpbs\\.org', 'Rocky Mountain PBS (KRMA)'),  # http://www.rmpbs.org\n        (r'video\\.kenw\\.org', 'KENW-TV3 (KENW)'),  # http://www.kenw.org\n        (r'video\\.kued\\.org', 'KUED Channel 7 (KUED)'),  # http://www.kued.org\n        (r'video\\.wyomingpbs\\.org', 'Wyoming PBS (KCWC)'),  # http://www.wyomingpbs.org\n        (r'video\\.cpt12\\.org', 'Colorado Public Television / KBDI 12 (KBDI)'),  # http://www.cpt12.org/\n        (r'video\\.kbyueleven\\.org', 'KBYU-TV (KBYU)'),  # http://www.kbyutv.org/\n        (r'video\\.thirteen\\.org', 'Thirteen/WNET New York (WNET)'),  # http://www.thirteen.org\n        (r'video\\.wgbh\\.org', 'WGBH/Channel 2 (WGBH)'),  # http://wgbh.org\n        (r'video\\.wgby\\.org', 'WGBY (WGBY)'),  # http://www.wgby.org\n        (r'watch\\.njtvonline\\.org', 'NJTV Public Media NJ (WNJT)'),  # http://www.njtvonline.org/\n        # (r'ripbs\\.org', 'Rhode Island PBS (WSBE)'),  # http://www.ripbs.org/home/\n        (r'watch\\.wliw\\.org', 'WLIW21 (WLIW)'),  # http://www.wliw.org/\n        (r'video\\.mpt\\.tv', 'mpt/Maryland Public Television (WMPB)'),  # http://www.mpt.org\n        (r'watch\\.weta\\.org', 'WETA Television and Radio (WETA)'),  # http://www.weta.org\n        (r'video\\.whyy\\.org', 'WHYY (WHYY)'),  # http://www.whyy.org\n        (r'video\\.wlvt\\.org', 'PBS 39 (WLVT)'),  # http://www.wlvt.org/\n        (r'video\\.wvpt\\.net', 'WVPT - Your Source for PBS and More! (WVPT)'),  # http://www.wvpt.net\n        (r'video\\.whut\\.org', 'Howard University Television (WHUT)'),  # http://www.whut.org\n        (r'video\\.wedu\\.org', 'WEDU PBS (WEDU)'),  # http://www.wedu.org\n        (r'video\\.wgcu\\.org', 'WGCU Public Media (WGCU)'),  # http://www.wgcu.org/\n        # (r'wjct\\.org', 'WJCT Public Broadcasting (WJCT)'),  # http://www.wjct.org\n        (r'video\\.wpbt2\\.org', 'WPBT2 (WPBT)'),  # http://www.wpbt2.org\n        (r'video\\.wucftv\\.org', 'WUCF TV (WUCF)'),  # http://wucftv.org\n        (r'video\\.wuft\\.org', 'WUFT/Channel 5 (WUFT)'),  # http://www.wuft.org\n        (r'watch\\.wxel\\.org', 'WXEL/Channel 42 (WXEL)'),  # http://www.wxel.org/home/\n        (r'video\\.wlrn\\.org', 'WLRN/Channel 17 (WLRN)'),  # http://www.wlrn.org/\n        (r'video\\.wusf\\.usf\\.edu', 'WUSF Public Broadcasting (WUSF)'),  # http://wusf.org/\n        (r'video\\.scetv\\.org', 'ETV (WRLK)'),  # http://www.scetv.org\n        (r'video\\.unctv\\.org', 'UNC-TV (WUNC)'),  # http://www.unctv.org/\n        # (r'pbsguam\\.org', 'PBS Guam (KGTF)'),  # http://www.pbsguam.org/\n        (r'video\\.pbshawaii\\.org', 'PBS Hawaii - Oceanic Cable Channel 10 (KHET)'),  # http://www.pbshawaii.org/\n        (r'video\\.idahoptv\\.org', 'Idaho Public Television (KAID)'),  # http://idahoptv.org\n        (r'video\\.ksps\\.org', 'KSPS (KSPS)'),  # http://www.ksps.org/home/\n        (r'watch\\.opb\\.org', 'OPB (KOPB)'),  # http://www.opb.org\n        (r'watch\\.nwptv\\.org', 'KWSU/Channel 10 & KTNW/Channel 31 (KWSU)'),  # http://www.kwsu.org\n        (r'video\\.will\\.illinois\\.edu', 'WILL-TV (WILL)'),  # http://will.illinois.edu/\n        (r'video\\.networkknowledge\\.tv', 'Network Knowledge - WSEC/Springfield (WSEC)'),  # http://www.wsec.tv\n        (r'video\\.wttw\\.com', 'WTTW11 (WTTW)'),  # http://www.wttw.com/\n        # (r'wtvp\\.org', 'WTVP & WTVP.org, Public Media for Central Illinois (WTVP)'),  # http://www.wtvp.org/\n        (r'video\\.iptv\\.org', 'Iowa Public Television/IPTV (KDIN)'),  # http://www.iptv.org/\n        (r'video\\.ninenet\\.org', 'Nine Network (KETC)'),  # http://www.ninenet.org\n        (r'video\\.wfwa\\.org', 'PBS39 Fort Wayne (WFWA)'),  # http://wfwa.org/\n        (r'video\\.wfyi\\.org', 'WFYI Indianapolis (WFYI)'),  # http://www.wfyi.org\n        (r'video\\.mptv\\.org', 'Milwaukee Public Television (WMVS)'),  # http://www.mptv.org\n        (r'video\\.wnin\\.org', 'WNIN (WNIN)'),  # http://www.wnin.org/\n        (r'video\\.wnit\\.org', 'WNIT Public Television (WNIT)'),  # http://www.wnit.org/\n        (r'video\\.wpt\\.org', 'WPT (WPNE)'),  # http://www.wpt.org/\n        (r'video\\.wvut\\.org', 'WVUT/Channel 22 (WVUT)'),  # http://wvut.org/\n        (r'video\\.weiu\\.net', 'WEIU/Channel 51 (WEIU)'),  # http://www.weiu.net\n        (r'video\\.wqpt\\.org', 'WQPT-TV (WQPT)'),  # http://www.wqpt.org\n        (r'video\\.wycc\\.org', 'WYCC PBS Chicago (WYCC)'),  # http://www.wycc.org\n        # (r'lakeshorepublicmedia\\.org', 'Lakeshore Public Television (WYIN)'),  # http://lakeshorepublicmedia.org/\n        (r'video\\.wipb\\.org', 'WIPB-TV (WIPB)'),  # http://wipb.org\n        (r'video\\.indianapublicmedia\\.org', 'WTIU (WTIU)'),  # http://indianapublicmedia.org/tv/\n        (r'watch\\.cetconnect\\.org', 'CET  (WCET)'),  # http://www.cetconnect.org\n        (r'video\\.thinktv\\.org', 'ThinkTVNetwork (WPTD)'),  # http://www.thinktv.org\n        (r'video\\.wbgu\\.org', 'WBGU-TV (WBGU)'),  # http://wbgu.org\n        (r'video\\.wgvu\\.org', 'WGVU TV (WGVU)'),  # http://www.wgvu.org/\n        (r'video\\.netnebraska\\.org', 'NET1 (KUON)'),  # http://netnebraska.org\n        (r'video\\.pioneer\\.org', 'Pioneer Public Television (KWCM)'),  # http://www.pioneer.org\n        (r'watch\\.sdpb\\.org', 'SDPB Television (KUSD)'),  # http://www.sdpb.org\n        (r'video\\.tpt\\.org', 'TPT (KTCA)'),  # http://www.tpt.org\n        (r'watch\\.ksmq\\.org', 'KSMQ (KSMQ)'),  # http://www.ksmq.org/\n        (r'watch\\.kpts\\.org', 'KPTS/Channel 8 (KPTS)'),  # http://www.kpts.org/\n        (r'watch\\.ktwu\\.org', 'KTWU/Channel 11 (KTWU)'),  # http://ktwu.org\n        # (r'shptv\\.org', 'Smoky Hills Public Television (KOOD)'),  # http://www.shptv.org\n        # (r'kcpt\\.org', 'KCPT Kansas City Public Television (KCPT)'),  # http://kcpt.org/\n        # (r'blueridgepbs\\.org', 'Blue Ridge PBS (WBRA)'),  # http://www.blueridgepbs.org/\n        (r'watch\\.easttennesseepbs\\.org', 'East Tennessee PBS (WSJK)'),  # http://easttennesseepbs.org\n        (r'video\\.wcte\\.tv', 'WCTE-TV (WCTE)'),  # http://www.wcte.org\n        (r'video\\.wljt\\.org', 'WLJT, Channel 11 (WLJT)'),  # http://wljt.org/\n        (r'video\\.wosu\\.org', 'WOSU TV (WOSU)'),  # http://wosu.org/\n        (r'video\\.woub\\.org', 'WOUB/WOUC (WOUB)'),  # http://woub.org/tv/index.php?section=5\n        (r'video\\.wvpublic\\.org', 'WVPB (WVPB)'),  # http://wvpublic.org/\n        (r'video\\.wkyupbs\\.org', 'WKYU-PBS (WKYU)'),  # http://www.wkyupbs.org\n        # (r'wyes\\.org', 'WYES-TV/New Orleans (WYES)'),  # http://www.wyes.org\n        (r'video\\.kera\\.org', 'KERA 13 (KERA)'),  # http://www.kera.org/\n        (r'video\\.mpbn\\.net', 'MPBN (WCBB)'),  # http://www.mpbn.net/\n        (r'video\\.mountainlake\\.org', 'Mountain Lake PBS (WCFE)'),  # http://www.mountainlake.org/\n        (r'video\\.nhptv\\.org', 'NHPTV (WENH)'),  # http://nhptv.org/\n        (r'video\\.vpt\\.org', 'Vermont PBS (WETK)'),  # http://www.vpt.org\n        (r'video\\.witf\\.org', 'witf (WITF)'),  # http://www.witf.org\n        (r'watch\\.wqed\\.org', 'WQED Multimedia (WQED)'),  # http://www.wqed.org/\n        (r'video\\.wmht\\.org', 'WMHT Educational Telecommunications (WMHT)'),  # http://www.wmht.org/home/\n        (r'video\\.deltabroadcasting\\.org', 'Q-TV (WDCQ)'),  # http://www.deltabroadcasting.org\n        (r'video\\.dptv\\.org', 'WTVS Detroit Public TV (WTVS)'),  # http://www.dptv.org/\n        (r'video\\.wcmu\\.org', 'CMU Public Television (WCMU)'),  # http://www.wcmu.org\n        (r'video\\.wkar\\.org', 'WKAR-TV (WKAR)'),  # http://wkar.org/\n        (r'wnmuvideo\\.nmu\\.edu', 'WNMU-TV Public TV 13 (WNMU)'),  # http://wnmutv.nmu.edu\n        (r'video\\.wdse\\.org', 'WDSE - WRPT (WDSE)'),  # http://www.wdse.org/\n        (r'video\\.wgte\\.org', 'WGTE TV (WGTE)'),  # http://www.wgte.org\n        (r'video\\.lptv\\.org', 'Lakeland Public Television (KAWE)'),  # http://www.lakelandptv.org\n        # (r'prairiepublic\\.org', 'PRAIRIE PUBLIC (KFME)'),  # http://www.prairiepublic.org/\n        (r'video\\.kmos\\.org', 'KMOS-TV - Channels 6.1, 6.2 and 6.3 (KMOS)'),  # http://www.kmos.org/\n        (r'watch\\.montanapbs\\.org', 'MontanaPBS (KUSM)'),  # http://montanapbs.org\n        (r'video\\.krwg\\.org', 'KRWG/Channel 22 (KRWG)'),  # http://www.krwg.org\n        (r'video\\.kacvtv\\.org', 'KACV (KACV)'),  # http://www.panhandlepbs.org/home/\n        (r'video\\.kcostv\\.org', 'KCOS/Channel 13 (KCOS)'),  # www.kcostv.org\n        (r'video\\.wcny\\.org', 'WCNY/Channel 24 (WCNY)'),  # http://www.wcny.org\n        (r'video\\.wned\\.org', 'WNED (WNED)'),  # http://www.wned.org/\n        (r'watch\\.wpbstv\\.org', 'WPBS (WPBS)'),  # http://www.wpbstv.org\n        (r'video\\.wskg\\.org', 'WSKG Public TV (WSKG)'),  # http://wskg.org\n        (r'video\\.wxxi\\.org', 'WXXI (WXXI)'),  # http://wxxi.org\n        (r'video\\.wpsu\\.org', 'WPSU (WPSU)'),  # http://www.wpsu.org\n        # (r'wqln\\.org', 'WQLN/Channel 54 (WQLN)'),  # http://www.wqln.org\n        (r'on-demand\\.wvia\\.org', 'WVIA Public Media Studios (WVIA)'),  # http://www.wvia.org/\n        (r'video\\.wtvi\\.org', 'WTVI (WTVI)'),  # http://www.wtvi.org/\n        # (r'whro\\.org', 'WHRO (WHRO)'),  # http://whro.org\n        (r'video\\.westernreservepublicmedia\\.org', 'Western Reserve PBS (WNEO)'),  # http://www.WesternReservePublicMedia.org/\n        (r'video\\.ideastream\\.org', 'WVIZ/PBS ideastream (WVIZ)'),  # http://www.wviz.org/\n        (r'video\\.kcts9\\.org', 'KCTS 9 (KCTS)'),  # http://kcts9.org/\n        (r'video\\.basinpbs\\.org', 'Basin PBS (KPBT)'),  # http://www.basinpbs.org\n        (r'video\\.houstonpbs\\.org', 'KUHT / Channel 8 (KUHT)'),  # http://www.houstonpublicmedia.org/\n        # (r'tamu\\.edu', 'KAMU - TV (KAMU)'),  # http://KAMU.tamu.edu\n        # (r'kedt\\.org', 'KEDT/Channel 16 (KEDT)'),  # http://www.kedt.org\n        (r'video\\.klrn\\.org', 'KLRN (KLRN)'),  # http://www.klrn.org\n        (r'video\\.klru\\.tv', 'KLRU (KLRU)'),  # http://www.klru.org\n        # (r'kmbh\\.org', 'KMBH-TV (KMBH)'),  # http://www.kmbh.org\n        # (r'knct\\.org', 'KNCT (KNCT)'),  # http://www.knct.org\n        # (r'ktxt\\.org', 'KTTZ-TV (KTXT)'),  # http://www.ktxt.org\n        (r'video\\.wtjx\\.org', 'WTJX Channel 12 (WTJX)'),  # http://www.wtjx.org/\n        (r'video\\.ideastations\\.org', 'WCVE PBS (WCVE)'),  # http://ideastations.org/\n        (r'video\\.kbtc\\.org', 'KBTC Public Television (KBTC)'),  # http://kbtc.org\n    )\n\n    IE_NAME = 'pbs'\n    IE_DESC = 'Public Broadcasting Service (PBS) and member stations: %s' % ', '.join(list(zip(*_STATIONS))[1])\n\n    _VALID_URL = r'''(?x)https?://\n        (?:\n           # Direct video URL\n           (?:%s)/(?:(?:vir|port)alplayer|video)/(?P<id>[0-9]+)(?:[?/]|$) |\n           # Article with embedded player (or direct video)\n           (?:www\\.)?pbs\\.org/(?:[^/]+/){1,5}(?P<presumptive_id>[^/]+?)(?:\\.html)?/?(?:$|[?\\#]) |\n           # Player\n           (?:video|player)\\.pbs\\.org/(?:widget/)?partnerplayer/(?P<player_id>[^/]+)/\n        )\n    ''' % '|'.join(list(zip(*_STATIONS))[0])\n\n    _GEO_COUNTRIES = ['US']\n\n    _TESTS = [\n        {\n            'url': 'http://www.pbs.org/tpt/constitution-usa-peter-sagal/watch/a-more-perfect-union/',\n            'md5': '173dc391afd361fa72eab5d3d918968d',\n            'info_dict': {\n                'id': '2365006249',\n                'ext': 'mp4',\n                'title': 'Constitution USA with Peter Sagal - A More Perfect Union',\n                'description': 'md5:31b664af3c65fd07fa460d306b837d00',\n                'duration': 3190,\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/pages/frontline/losing-iraq/',\n            'md5': '6f722cb3c3982186d34b0f13374499c7',\n            'info_dict': {\n                'id': '2365297690',\n                'ext': 'mp4',\n                'title': 'FRONTLINE - Losing Iraq',\n                'description': 'md5:5979a4d069b157f622d02bff62fbe654',\n                'duration': 5050,\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/newshour/bb/education-jan-june12-cyberschools_02-23/',\n            'md5': 'b19856d7f5351b17a5ab1dc6a64be633',\n            'info_dict': {\n                'id': '2201174722',\n                'ext': 'mp4',\n                'title': 'PBS NewsHour - Cyber Schools Gain Popularity, but Quality Questions Persist',\n                'description': 'md5:86ab9a3d04458b876147b355788b8781',\n                'duration': 801,\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/wnet/gperf/dudamel-conducts-verdi-requiem-hollywood-bowl-full-episode/3374/',\n            'md5': 'c62859342be2a0358d6c9eb306595978',\n            'info_dict': {\n                'id': '2365297708',\n                'ext': 'mp4',\n                'title': 'Great Performances - Dudamel Conducts Verdi Requiem at the Hollywood Bowl - Full',\n                'description': 'md5:657897370e09e2bc6bf0f8d2cd313c6b',\n                'duration': 6559,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/nova/earth/killer-typhoon.html',\n            'md5': '908f3e5473a693b266b84e25e1cf9703',\n            'info_dict': {\n                'id': '2365160389',\n                'display_id': 'killer-typhoon',\n                'ext': 'mp4',\n                'description': 'md5:c741d14e979fc53228c575894094f157',\n                'title': 'NOVA - Killer Typhoon',\n                'duration': 3172,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'upload_date': '20140122',\n                'age_limit': 10,\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/pages/frontline/united-states-of-secrets/',\n            'info_dict': {\n                'id': 'united-states-of-secrets',\n            },\n            'playlist_count': 2,\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/americanexperience/films/great-war/',\n            'info_dict': {\n                'id': 'great-war',\n            },\n            'playlist_count': 3,\n        },\n        {\n            'url': 'http://www.pbs.org/wgbh/americanexperience/films/death/player/',\n            'info_dict': {\n                'id': '2276541483',\n                'display_id': 'player',\n                'ext': 'mp4',\n                'title': 'American Experience - Death and the Civil War, Chapter 1',\n                'description': 'md5:67fa89a9402e2ee7d08f53b920674c18',\n                'duration': 682,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                'skip_download': True,  # requires ffmpeg\n            },\n        },\n        {\n            'url': 'http://www.pbs.org/video/2365245528/',\n            'md5': '115223d41bd55cda8ae5cd5ed4e11497',\n            'info_dict': {\n                'id': '2365245528',\n                'display_id': '2365245528',\n                'ext': 'mp4',\n                'title': 'FRONTLINE - United States of Secrets (Part One)',\n                'description': 'md5:55756bd5c551519cc4b7703e373e217e',\n                'duration': 6851,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            # Video embedded in iframe containing angle brackets as attribute's value (e.g.\n            # \"<iframe style='position: absolute;<br />\\ntop: 0; left: 0;' ...\", see\n            # https://github.com/rg3/youtube-dl/issues/7059)\n            'url': 'http://www.pbs.org/food/features/a-chefs-life-season-3-episode-5-prickly-business/',\n            'md5': '59b0ef5009f9ac8a319cc5efebcd865e',\n            'info_dict': {\n                'id': '2365546844',\n                'display_id': 'a-chefs-life-season-3-episode-5-prickly-business',\n                'ext': 'mp4',\n                'title': \"A Chef's Life - Season 3, Ep. 5: Prickly Business\",\n                'description': 'md5:c0ff7475a4b70261c7e58f493c2792a5',\n                'duration': 1480,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n        },\n        {\n            # Frontline video embedded via flp2012.js\n            'url': 'http://www.pbs.org/wgbh/pages/frontline/the-atomic-artists',\n            'info_dict': {\n                'id': '2070868960',\n                'display_id': 'the-atomic-artists',\n                'ext': 'mp4',\n                'title': 'FRONTLINE - The Atomic Artists',\n                'description': 'md5:f677e4520cfacb4a5ce1471e31b57800',\n                'duration': 723,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                'skip_download': True,  # requires ffmpeg\n            },\n        },\n        {\n            # Serves hd only via wigget/partnerplayer page\n            'url': 'http://www.pbs.org/video/2365641075/',\n            'md5': 'fdf907851eab57211dd589cf12006666',\n            'info_dict': {\n                'id': '2365641075',\n                'ext': 'mp4',\n                'title': 'FRONTLINE - Netanyahu at War',\n                'duration': 6852,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n                'formats': 'mincount:8',\n            },\n        },\n        {\n            # https://github.com/rg3/youtube-dl/issues/13801\n            'url': 'https://www.pbs.org/video/pbs-newshour-full-episode-july-31-2017-1501539057/',\n            'info_dict': {\n                'id': '3003333873',\n                'ext': 'mp4',\n                'title': 'PBS NewsHour - full episode July 31, 2017',\n                'description': 'md5:d41d8cd98f00b204e9800998ecf8427e',\n                'duration': 3265,\n                'thumbnail': r're:^https?://.*\\.jpg$',\n            },\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'http://player.pbs.org/widget/partnerplayer/2365297708/?start=0&end=0&chapterbar=false&endscreen=false&topbar=true',\n            'only_matching': True,\n        },\n        {\n            'url': 'http://watch.knpb.org/video/2365616055/',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://player.pbs.org/portalplayer/3004638221/?uid=',\n            'only_matching': True,\n        }\n    ]\n    _ERRORS = {\n        101: 'We\\'re sorry, but this video is not yet available.',\n        403: 'We\\'re sorry, but this video is not available in your region due to right restrictions.',\n        404: 'We are experiencing technical difficulties that are preventing us from playing the video at this time. Please check back again soon.',\n        410: 'This video has expired and is no longer available for online streaming.',\n    }\n\n    def _real_initialize(self):\n        cookie = (self._download_json(\n            'http://localization.services.pbs.org/localize/auto/cookie/',\n            None, headers=self.geo_verification_headers(), fatal=False) or {}).get('cookie')\n        if cookie:\n            station = self._search_regex(r'#?s=\\[\"([^\"]+)\"', cookie, 'station')\n            if station:\n                self._set_cookie('.pbs.org', 'pbsol.station', station)\n\n    def _extract_webpage(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        description = None\n\n        presumptive_id = mobj.group('presumptive_id')\n        display_id = presumptive_id\n        if presumptive_id:\n            webpage = self._download_webpage(url, display_id)\n\n            description = strip_or_none(self._og_search_description(\n                webpage, default=None) or self._html_search_meta(\n                'description', webpage, default=None))\n            upload_date = unified_strdate(self._search_regex(\n                r'<input type=\"hidden\" id=\"air_date_[0-9]+\" value=\"([^\"]+)\"',\n                webpage, 'upload date', default=None))\n\n            # tabbed frontline videos\n            MULTI_PART_REGEXES = (\n                r'<div[^>]+class=\"videotab[^\"]*\"[^>]+vid=\"(\\d+)\"',\n                r'<a[^>]+href=[\"\\']#(?:video-|part)\\d+[\"\\'][^>]+data-cove[Ii]d=[\"\\'](\\d+)',\n            )\n            for p in MULTI_PART_REGEXES:\n                tabbed_videos = orderedSet(re.findall(p, webpage))\n                if tabbed_videos:\n                    return tabbed_videos, presumptive_id, upload_date, description\n\n            MEDIA_ID_REGEXES = [\n                r\"div\\s*:\\s*'videoembed'\\s*,\\s*mediaid\\s*:\\s*'(\\d+)'\",  # frontline video embed\n                r'class=\"coveplayerid\">([^<]+)<',                       # coveplayer\n                r'<section[^>]+data-coveid=\"(\\d+)\"',                    # coveplayer from http://www.pbs.org/wgbh/frontline/film/real-csi/\n                r'<input type=\"hidden\" id=\"pbs_video_id_[0-9]+\" value=\"([0-9]+)\"/>',  # jwplayer\n                r\"(?s)window\\.PBS\\.playerConfig\\s*=\\s*{.*?id\\s*:\\s*'([0-9]+)',\",\n            ]\n\n            media_id = self._search_regex(\n                MEDIA_ID_REGEXES, webpage, 'media ID', fatal=False, default=None)\n            if media_id:\n                return media_id, presumptive_id, upload_date, description\n\n            # Fronline video embedded via flp\n            video_id = self._search_regex(\n                r'videoid\\s*:\\s*\"([\\d+a-z]{7,})\"', webpage, 'videoid', default=None)\n            if video_id:\n                # pkg_id calculation is reverse engineered from\n                # http://www.pbs.org/wgbh/pages/frontline/js/flp2012.js\n                prg_id = self._search_regex(\n                    r'videoid\\s*:\\s*\"([\\d+a-z]{7,})\"', webpage, 'videoid')[7:]\n                if 'q' in prg_id:\n                    prg_id = prg_id.split('q')[1]\n                prg_id = int(prg_id, 16)\n                getdir = self._download_json(\n                    'http://www.pbs.org/wgbh/pages/frontline/.json/getdir/getdir%d.json' % prg_id,\n                    presumptive_id, 'Downloading getdir JSON',\n                    transform_source=strip_jsonp)\n                return getdir['mid'], presumptive_id, upload_date, description\n\n            for iframe in re.findall(r'(?s)<iframe(.+?)></iframe>', webpage):\n                url = self._search_regex(\n                    r'src=([\"\\'])(?P<url>.+?partnerplayer.+?)\\1', iframe,\n                    'player URL', default=None, group='url')\n                if url:\n                    break\n\n            if not url:\n                url = self._og_search_url(webpage)\n\n            mobj = re.match(self._VALID_URL, url)\n\n        player_id = mobj.group('player_id')\n        if not display_id:\n            display_id = player_id\n        if player_id:\n            player_page = self._download_webpage(\n                url, display_id, note='Downloading player page',\n                errnote='Could not download player page')\n            video_id = self._search_regex(\n                r'<div\\s+id=\"video_([0-9]+)\"', player_page, 'video ID')\n        else:\n            video_id = mobj.group('id')\n            display_id = video_id\n\n        return video_id, display_id, None, description\n\n    def _real_extract(self, url):\n        video_id, display_id, upload_date, description = self._extract_webpage(url)\n\n        if isinstance(video_id, list):\n            entries = [self.url_result(\n                'http://video.pbs.org/video/%s' % vid_id, 'PBS', vid_id)\n                for vid_id in video_id]\n            return self.playlist_result(entries, display_id)\n\n        info = None\n        redirects = []\n        redirect_urls = set()\n\n        def extract_redirect_urls(info):\n            for encoding_name in ('recommended_encoding', 'alternate_encoding'):\n                redirect = info.get(encoding_name)\n                if not redirect:\n                    continue\n                redirect_url = redirect.get('url')\n                if redirect_url and redirect_url not in redirect_urls:\n                    redirects.append(redirect)\n                    redirect_urls.add(redirect_url)\n\n        chapters = []\n        # Player pages may also serve different qualities\n        for page in ('widget/partnerplayer', 'portalplayer'):\n            player = self._download_webpage(\n                'http://player.pbs.org/%s/%s' % (page, video_id),\n                display_id, 'Downloading %s page' % page, fatal=False)\n            if player:\n                video_info = self._parse_json(\n                    self._search_regex(\n                        r'(?s)PBS\\.videoData\\s*=\\s*({.+?});\\n',\n                        player, '%s video data' % page, default='{}'),\n                    display_id, transform_source=js_to_json, fatal=False)\n                if video_info:\n                    extract_redirect_urls(video_info)\n                    if not info:\n                        info = video_info\n                if not chapters:\n                    for chapter_data in re.findall(r'(?s)chapters\\.push\\(({.*?})\\)', player):\n                        chapter = self._parse_json(chapter_data, video_id, js_to_json, fatal=False)\n                        if not chapter:\n                            continue\n                        start_time = float_or_none(chapter.get('start_time'), 1000)\n                        duration = float_or_none(chapter.get('duration'), 1000)\n                        if start_time is None or duration is None:\n                            continue\n                        chapters.append({\n                            'start_time': start_time,\n                            'end_time': start_time + duration,\n                            'title': chapter.get('title'),\n                        })\n\n        formats = []\n        http_url = None\n        for num, redirect in enumerate(redirects):\n            redirect_id = redirect.get('eeid')\n\n            redirect_info = self._download_json(\n                '%s?format=json' % redirect['url'], display_id,\n                'Downloading %s video url info' % (redirect_id or num),\n                headers=self.geo_verification_headers())\n\n            if redirect_info['status'] == 'error':\n                message = self._ERRORS.get(\n                    redirect_info['http_code'], redirect_info['message'])\n                if redirect_info['http_code'] == 403:\n                    self.raise_geo_restricted(\n                        msg=message, countries=self._GEO_COUNTRIES)\n                raise ExtractorError(\n                    '%s said: %s' % (self.IE_NAME, message), expected=True)\n\n            format_url = redirect_info.get('url')\n            if not format_url:\n                continue\n\n            if determine_ext(format_url) == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, display_id, 'mp4', m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': format_url,\n                    'format_id': redirect_id,\n                })\n                if re.search(r'^https?://.*(?:\\d+k|baseline)', format_url):\n                    http_url = format_url\n        self._remove_duplicate_formats(formats)\n        m3u8_formats = list(filter(\n            lambda f: f.get('protocol') == 'm3u8' and f.get('vcodec') != 'none',\n            formats))\n        if http_url:\n            for m3u8_format in m3u8_formats:\n                bitrate = self._search_regex(r'(\\d+)k', m3u8_format['url'], 'bitrate', default=None)\n                # Lower qualities (150k and 192k) are not available as HTTP formats (see [1]),\n                # we won't try extracting them.\n                # Since summer 2016 higher quality formats (4500k and 6500k) are also available\n                # albeit they are not documented in [2].\n                # 1. https://github.com/rg3/youtube-dl/commit/cbc032c8b70a038a69259378c92b4ba97b42d491#commitcomment-17313656\n                # 2. https://projects.pbs.org/confluence/display/coveapi/COVE+Video+Specifications\n                if not bitrate or int(bitrate) < 400:\n                    continue\n                f_url = re.sub(r'\\d+k|baseline', bitrate + 'k', http_url)\n                # This may produce invalid links sometimes (e.g.\n                # http://www.pbs.org/wgbh/frontline/film/suicide-plan)\n                if not self._is_valid_url(f_url, display_id, 'http-%sk video' % bitrate):\n                    continue\n                f = m3u8_format.copy()\n                f.update({\n                    'url': f_url,\n                    'format_id': m3u8_format['format_id'].replace('hls', 'http'),\n                    'protocol': 'http',\n                })\n                formats.append(f)\n        self._sort_formats(formats)\n\n        rating_str = info.get('rating')\n        if rating_str is not None:\n            rating_str = rating_str.rpartition('-')[2]\n        age_limit = US_RATINGS.get(rating_str)\n\n        subtitles = {}\n        closed_captions_url = info.get('closed_captions_url')\n        if closed_captions_url:\n            subtitles['en'] = [{\n                'ext': 'ttml',\n                'url': closed_captions_url,\n            }]\n            mobj = re.search(r'/(\\d+)_Encoded\\.dfxp', closed_captions_url)\n            if mobj:\n                ttml_caption_suffix, ttml_caption_id = mobj.group(0, 1)\n                ttml_caption_id = int(ttml_caption_id)\n                subtitles['en'].extend([{\n                    'url': closed_captions_url.replace(\n                        ttml_caption_suffix, '/%d_Encoded.srt' % (ttml_caption_id + 1)),\n                    'ext': 'srt',\n                }, {\n                    'url': closed_captions_url.replace(\n                        ttml_caption_suffix, '/%d_Encoded.vtt' % (ttml_caption_id + 2)),\n                    'ext': 'vtt',\n                }])\n\n        # info['title'] is often incomplete (e.g. 'Full Episode', 'Episode 5', etc)\n        # Try turning it to 'program - title' naming scheme if possible\n        alt_title = info.get('program', {}).get('title')\n        if alt_title:\n            info['title'] = alt_title + ' - ' + re.sub(r'^' + alt_title + r'[\\s\\-:]+', '', info['title'])\n\n        description = info.get('description') or info.get(\n            'program', {}).get('description') or description\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': info['title'],\n            'description': description,\n            'thumbnail': info.get('image_url'),\n            'duration': int_or_none(info.get('duration')),\n            'age_limit': age_limit,\n            'upload_date': upload_date,\n            'formats': formats,\n            'subtitles': subtitles,\n            'chapters': chapters,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "pbs.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/pbs.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}