{"author": "openai", "code": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass HalfCheetahEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'half_cheetah.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def step(self, action):\n        xposbefore = self.sim.data.qpos[0]\n        self.do_simulation(action, self.frame_skip)\n        xposafter = self.sim.data.qpos[0]\n        ob = self._get_obs()\n        reward_ctrl = - 0.1 * np.square(action).sum()\n        reward_run = (xposafter - xposbefore)/self.dt\n        reward = reward_ctrl + reward_run\n        done = False\n        return ob, reward, done, dict(reward_run=reward_run, reward_ctrl=reward_ctrl)\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[1:],\n            self.sim.data.qvel.flat,\n        ])\n\n    def reset_model(self):\n        qpos = self.init_qpos + self.np_random.uniform(low=-.1, high=.1, size=self.model.nq)\n        qvel = self.init_qvel + self.np_random.randn(self.model.nv) * .1\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.distance = self.model.stat.extent * 0.5\n", "comments": "", "content": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass HalfCheetahEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'half_cheetah.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def step(self, action):\n        xposbefore = self.sim.data.qpos[0]\n        self.do_simulation(action, self.frame_skip)\n        xposafter = self.sim.data.qpos[0]\n        ob = self._get_obs()\n        reward_ctrl = - 0.1 * np.square(action).sum()\n        reward_run = (xposafter - xposbefore)/self.dt\n        reward = reward_ctrl + reward_run\n        done = False\n        return ob, reward, done, dict(reward_run=reward_run, reward_ctrl=reward_ctrl)\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[1:],\n            self.sim.data.qvel.flat,\n        ])\n\n    def reset_model(self):\n        qpos = self.init_qpos + self.np_random.uniform(low=-.1, high=.1, size=self.model.nq)\n        qvel = self.init_qvel + self.np_random.randn(self.model.nv) * .1\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.distance = self.model.stat.extent * 0.5\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "half_cheetah.py", "id": "dbe3f1a1b8ba35883e52e4296ac05cb1", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/half_cheetah.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}