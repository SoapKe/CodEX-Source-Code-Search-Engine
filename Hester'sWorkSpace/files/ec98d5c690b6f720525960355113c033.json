{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    mimetype2ext,\n    parse_iso8601,\n    remove_end,\n    update_url_query,\n)\n\n\nclass DRTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?dr\\.dk/(?:tv/se|nyheder|radio/ondemand)/(?:[^/]+/)*(?P<id>[\\da-z-]+)(?:[/\n    _GEO_BYPASS = False\n    _GEO_COUNTRIES = ['DK']\n    IE_NAME = 'drtv'\n    _TESTS = [{\n        'url': 'https://www.dr.dk/tv/se/boern/ultra/klassen-ultra/klassen-darlig-taber-10',\n        'md5': '7ae17b4e18eb5d29212f424a7511c184',\n        'info_dict': {\n            'id': 'klassen-darlig-taber-10',\n            'ext': 'mp4',\n            'title': 'Klassen - D\u00e5rlig taber (10)',\n            'description': 'md5:815fe1b7fa656ed80580f31e8b3c79aa',\n            'timestamp': 1471991907,\n            'upload_date': '20160823',\n            'duration': 606.84,\n        },\n    }, {\n        \n        'url': 'https://www.dr.dk/nyheder/indland/live-christianias-rydning-af-pusher-street-er-i-gang',\n        'info_dict': {\n            'id': 'christiania-pusher-street-ryddes-drdkrjpo',\n            'ext': 'mp4',\n            'title': 'LIVE Christianias rydning af Pusher Street er i gang',\n            'description': 'md5:2a71898b15057e9b97334f61d04e6eb5',\n            'timestamp': 1472800279,\n            'upload_date': '20160902',\n            'duration': 131.4,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'https://www.dr.dk/tv/se/historien-om-danmark/-/historien-om-danmark-stenalder',\n        'info_dict': {\n            'id': 'historien-om-danmark-stenalder',\n            'ext': 'mp4',\n            'title': 'Historien om Danmark: Stenalder (1)',\n            'description': 'md5:8c66dcbc1669bbc6f873879880f37f2a',\n            'timestamp': 1490401996,\n            'upload_date': '20170325',\n            'duration': 3502.04,\n            'formats': 'mincount:20',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        if '>Programmet er ikke l\u00e6ngere tilg\u00e6ngeligt' in webpage:\n            raise ExtractorError(\n                'Video %s is not available' % video_id, expected=True)\n\n        video_id = self._search_regex(\n            (r'data-(?:material-identifier|episode-slug)=\"([^\"]+)\"',\n                r'data-resource=\"[^>\"]+mu/programcard/expanded/([^\"]+)\"'),\n            webpage, 'video id')\n\n        programcard = self._download_json(\n            'http://www.dr.dk/mu/programcard/expanded/%s' % video_id,\n            video_id, 'Downloading video JSON')\n        data = programcard['Data'][0]\n\n        title = remove_end(self._og_search_title(\n            webpage, default=None), ' | TV | DR') or data['Title']\n        description = self._og_search_description(\n            webpage, default=None) or data.get('Description')\n\n        timestamp = parse_iso8601(data.get('CreatedTime'))\n\n        thumbnail = None\n        duration = None\n\n        restricted_to_denmark = False\n\n        formats = []\n        subtitles = {}\n\n        for asset in data['Assets']:\n            kind = asset.get('Kind')\n            if kind == 'Image':\n                thumbnail = asset.get('Uri')\n            elif kind in ('VideoResource', 'AudioResource'):\n                duration = float_or_none(asset.get('DurationInMilliseconds'), 1000)\n                restricted_to_denmark = asset.get('RestrictedToDenmark')\n                asset_target = asset.get('Target')\n                for link in asset.get('Links', []):\n                    uri = link.get('Uri')\n                    if not uri:\n                        continue\n                    target = link.get('Target')\n                    format_id = target or ''\n                    preference = None\n                    if asset_target in ('SpokenSubtitles', 'SignLanguage'):\n                        preference = -1\n                        format_id += '-%s' % asset_target\n                    if target == 'HDS':\n                        f4m_formats = self._extract_f4m_formats(\n                            uri + '?hdcore=3.3.0&plugin=aasp-3.3.0.99.43',\n                            video_id, preference, f4m_id=format_id, fatal=False)\n                        if kind == 'AudioResource':\n                            for f in f4m_formats:\n                                f['vcodec'] = 'none'\n                        formats.extend(f4m_formats)\n                    elif target == 'HLS':\n                        formats.extend(self._extract_m3u8_formats(\n                            uri, video_id, 'mp4', entry_protocol='m3u8_native',\n                            preference=preference, m3u8_id=format_id,\n                            fatal=False))\n                    else:\n                        bitrate = link.get('Bitrate')\n                        if bitrate:\n                            format_id += '-%s' % bitrate\n                        formats.append({\n                            'url': uri,\n                            'format_id': format_id,\n                            'tbr': int_or_none(bitrate),\n                            'ext': link.get('FileFormat'),\n                            'vcodec': 'none' if kind == 'AudioResource' else None,\n                            'preference': preference,\n                        })\n                subtitles_list = asset.get('SubtitlesList')\n                if isinstance(subtitles_list, list):\n                    LANGS = {\n                        'Danish': 'da',\n                    }\n                    for subs in subtitles_list:\n                        if not subs.get('Uri'):\n                            continue\n                        lang = subs.get('Language') or 'da'\n                        subtitles.setdefault(LANGS.get(lang, lang), []).append({\n                            'url': subs['Uri'],\n                            'ext': mimetype2ext(subs.get('MimeType')) or 'vtt'\n                        })\n\n        if not formats and restricted_to_denmark:\n            self.raise_geo_restricted(\n                'Unfortunately, DR is not allowed to show this program outside Denmark.',\n                countries=self._GEO_COUNTRIES)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass DRTVLiveIE(InfoExtractor):\n    IE_NAME = 'drtv:live'\n    _VALID_URL = r'https?://(?:www\\.)?dr\\.dk/(?:tv|TV)/live/(?P<id>[\\da-z-]+)'\n    _GEO_COUNTRIES = ['DK']\n    _TEST = {\n        'url': 'https://www.dr.dk/tv/live/dr1',\n        'info_dict': {\n            'id': 'dr1',\n            'ext': 'mp4',\n            'title': 're:^DR1 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        channel_id = self._match_id(url)\n        channel_data = self._download_json(\n            'https://www.dr.dk/mu-online/api/1.0/channel/' + channel_id,\n            channel_id)\n        title = self._live_title(channel_data['Title'])\n\n        formats = []\n        for streaming_server in channel_data.get('StreamingServers', []):\n            server = streaming_server.get('Server')\n            if not server:\n                continue\n            link_type = streaming_server.get('LinkType')\n            for quality in streaming_server.get('Qualities', []):\n                for stream in quality.get('Streams', []):\n                    stream_path = stream.get('Stream')\n                    if not stream_path:\n                        continue\n                    stream_url = update_url_query(\n                        '%s/%s' % (server, stream_path), {'b': ''})\n                    if link_type == 'HLS':\n                        formats.extend(self._extract_m3u8_formats(\n                            stream_url, channel_id, 'mp4',\n                            m3u8_id=link_type, fatal=False, live=True))\n                    elif link_type == 'HDS':\n                        formats.extend(self._extract_f4m_formats(update_url_query(\n                            '%s/%s' % (server, stream_path), {'hdcore': '3.7.0'}),\n                            channel_id, f4m_id=link_type, fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': channel_id,\n            'title': title,\n            'thumbnail': channel_data.get('PrimaryImageUri'),\n            'formats': formats,\n            'is_live': True,\n        }\n", "comments": "# coding: utf-8\n#?]|$)'\n# embed\n# with SignLanguage formats\n# m3u8 download\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    mimetype2ext,\n    parse_iso8601,\n    remove_end,\n    update_url_query,\n)\n\n\nclass DRTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?dr\\.dk/(?:tv/se|nyheder|radio/ondemand)/(?:[^/]+/)*(?P<id>[\\da-z-]+)(?:[/#?]|$)'\n    _GEO_BYPASS = False\n    _GEO_COUNTRIES = ['DK']\n    IE_NAME = 'drtv'\n    _TESTS = [{\n        'url': 'https://www.dr.dk/tv/se/boern/ultra/klassen-ultra/klassen-darlig-taber-10',\n        'md5': '7ae17b4e18eb5d29212f424a7511c184',\n        'info_dict': {\n            'id': 'klassen-darlig-taber-10',\n            'ext': 'mp4',\n            'title': 'Klassen - D\u00e5rlig taber (10)',\n            'description': 'md5:815fe1b7fa656ed80580f31e8b3c79aa',\n            'timestamp': 1471991907,\n            'upload_date': '20160823',\n            'duration': 606.84,\n        },\n    }, {\n        # embed\n        'url': 'https://www.dr.dk/nyheder/indland/live-christianias-rydning-af-pusher-street-er-i-gang',\n        'info_dict': {\n            'id': 'christiania-pusher-street-ryddes-drdkrjpo',\n            'ext': 'mp4',\n            'title': 'LIVE Christianias rydning af Pusher Street er i gang',\n            'description': 'md5:2a71898b15057e9b97334f61d04e6eb5',\n            'timestamp': 1472800279,\n            'upload_date': '20160902',\n            'duration': 131.4,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # with SignLanguage formats\n        'url': 'https://www.dr.dk/tv/se/historien-om-danmark/-/historien-om-danmark-stenalder',\n        'info_dict': {\n            'id': 'historien-om-danmark-stenalder',\n            'ext': 'mp4',\n            'title': 'Historien om Danmark: Stenalder (1)',\n            'description': 'md5:8c66dcbc1669bbc6f873879880f37f2a',\n            'timestamp': 1490401996,\n            'upload_date': '20170325',\n            'duration': 3502.04,\n            'formats': 'mincount:20',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        if '>Programmet er ikke l\u00e6ngere tilg\u00e6ngeligt' in webpage:\n            raise ExtractorError(\n                'Video %s is not available' % video_id, expected=True)\n\n        video_id = self._search_regex(\n            (r'data-(?:material-identifier|episode-slug)=\"([^\"]+)\"',\n                r'data-resource=\"[^>\"]+mu/programcard/expanded/([^\"]+)\"'),\n            webpage, 'video id')\n\n        programcard = self._download_json(\n            'http://www.dr.dk/mu/programcard/expanded/%s' % video_id,\n            video_id, 'Downloading video JSON')\n        data = programcard['Data'][0]\n\n        title = remove_end(self._og_search_title(\n            webpage, default=None), ' | TV | DR') or data['Title']\n        description = self._og_search_description(\n            webpage, default=None) or data.get('Description')\n\n        timestamp = parse_iso8601(data.get('CreatedTime'))\n\n        thumbnail = None\n        duration = None\n\n        restricted_to_denmark = False\n\n        formats = []\n        subtitles = {}\n\n        for asset in data['Assets']:\n            kind = asset.get('Kind')\n            if kind == 'Image':\n                thumbnail = asset.get('Uri')\n            elif kind in ('VideoResource', 'AudioResource'):\n                duration = float_or_none(asset.get('DurationInMilliseconds'), 1000)\n                restricted_to_denmark = asset.get('RestrictedToDenmark')\n                asset_target = asset.get('Target')\n                for link in asset.get('Links', []):\n                    uri = link.get('Uri')\n                    if not uri:\n                        continue\n                    target = link.get('Target')\n                    format_id = target or ''\n                    preference = None\n                    if asset_target in ('SpokenSubtitles', 'SignLanguage'):\n                        preference = -1\n                        format_id += '-%s' % asset_target\n                    if target == 'HDS':\n                        f4m_formats = self._extract_f4m_formats(\n                            uri + '?hdcore=3.3.0&plugin=aasp-3.3.0.99.43',\n                            video_id, preference, f4m_id=format_id, fatal=False)\n                        if kind == 'AudioResource':\n                            for f in f4m_formats:\n                                f['vcodec'] = 'none'\n                        formats.extend(f4m_formats)\n                    elif target == 'HLS':\n                        formats.extend(self._extract_m3u8_formats(\n                            uri, video_id, 'mp4', entry_protocol='m3u8_native',\n                            preference=preference, m3u8_id=format_id,\n                            fatal=False))\n                    else:\n                        bitrate = link.get('Bitrate')\n                        if bitrate:\n                            format_id += '-%s' % bitrate\n                        formats.append({\n                            'url': uri,\n                            'format_id': format_id,\n                            'tbr': int_or_none(bitrate),\n                            'ext': link.get('FileFormat'),\n                            'vcodec': 'none' if kind == 'AudioResource' else None,\n                            'preference': preference,\n                        })\n                subtitles_list = asset.get('SubtitlesList')\n                if isinstance(subtitles_list, list):\n                    LANGS = {\n                        'Danish': 'da',\n                    }\n                    for subs in subtitles_list:\n                        if not subs.get('Uri'):\n                            continue\n                        lang = subs.get('Language') or 'da'\n                        subtitles.setdefault(LANGS.get(lang, lang), []).append({\n                            'url': subs['Uri'],\n                            'ext': mimetype2ext(subs.get('MimeType')) or 'vtt'\n                        })\n\n        if not formats and restricted_to_denmark:\n            self.raise_geo_restricted(\n                'Unfortunately, DR is not allowed to show this program outside Denmark.',\n                countries=self._GEO_COUNTRIES)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n\n\nclass DRTVLiveIE(InfoExtractor):\n    IE_NAME = 'drtv:live'\n    _VALID_URL = r'https?://(?:www\\.)?dr\\.dk/(?:tv|TV)/live/(?P<id>[\\da-z-]+)'\n    _GEO_COUNTRIES = ['DK']\n    _TEST = {\n        'url': 'https://www.dr.dk/tv/live/dr1',\n        'info_dict': {\n            'id': 'dr1',\n            'ext': 'mp4',\n            'title': 're:^DR1 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        channel_id = self._match_id(url)\n        channel_data = self._download_json(\n            'https://www.dr.dk/mu-online/api/1.0/channel/' + channel_id,\n            channel_id)\n        title = self._live_title(channel_data['Title'])\n\n        formats = []\n        for streaming_server in channel_data.get('StreamingServers', []):\n            server = streaming_server.get('Server')\n            if not server:\n                continue\n            link_type = streaming_server.get('LinkType')\n            for quality in streaming_server.get('Qualities', []):\n                for stream in quality.get('Streams', []):\n                    stream_path = stream.get('Stream')\n                    if not stream_path:\n                        continue\n                    stream_url = update_url_query(\n                        '%s/%s' % (server, stream_path), {'b': ''})\n                    if link_type == 'HLS':\n                        formats.extend(self._extract_m3u8_formats(\n                            stream_url, channel_id, 'mp4',\n                            m3u8_id=link_type, fatal=False, live=True))\n                    elif link_type == 'HDS':\n                        formats.extend(self._extract_f4m_formats(update_url_query(\n                            '%s/%s' % (server, stream_path), {'hdcore': '3.7.0'}),\n                            channel_id, f4m_id=link_type, fatal=False))\n        self._sort_formats(formats)\n\n        return {\n            'id': channel_id,\n            'title': title,\n            'thumbnail': channel_data.get('PrimaryImageUri'),\n            'formats': formats,\n            'is_live': True,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "drtv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/drtv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}