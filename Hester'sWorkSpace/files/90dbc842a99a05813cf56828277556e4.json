{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport io\nimport logging\nimport PyPDF2\nimport xml.dom.minidom\nimport zipfile\n\nfrom odoo import api, models\n\n_logger = logging.getLogger(__name__)\nFTYPES = ['docx', 'pptx', 'xlsx', 'opendoc', 'pdf']\n\ndef textToString(element):\n    buff = u\"\"\n    for node in element.childNodes:\n        if node.nodeType == xml.dom.Node.TEXT_NODE:\n            buff += node.nodeValue\n        elif node.nodeType == xml.dom.Node.ELEMENT_NODE:\n            buff += textToString(node)\n    return buff\n\n\nclass IrAttachment(models.Model):\n    _inherit = 'ir.attachment'\n\n    def _index_docx(self, bin_data):\n        '''Index Microsoft .docx documents'''\n        buf = u\"\"\n        f = io.BytesIO(bin_data)\n        if zipfile.is_zipfile(f):\n            try:\n                zf = zipfile.ZipFile(f)\n                content = xml.dom.minidom.parseString(zf.read(\"word/document.xml\"))\n                for val in [\"w:p\", \"w:h\", \"text:list\"]:\n                    for element in content.getElementsByTagName(val):\n                        buf += textToString(element) + \"\\n\"\n            except Exception:\n                pass\n        return buf\n\n    def _index_pptx(self, bin_data):\n        '''Index Microsoft .pptx documents'''\n\n        buf = u\"\"\n        f = io.BytesIO(bin_data)\n        if zipfile.is_zipfile(f):\n            try:\n                zf = zipfile.ZipFile(f)\n                zf_filelist = [x for x in zf.namelist() if x.startswith('ppt/slides/slide')]\n                for i in range(1, len(zf_filelist) + 1):\n                    content = xml.dom.minidom.parseString(zf.read('ppt/slides/slide%s.xml' % i))\n                    for val in [\"a:t\"]:\n                        for element in content.getElementsByTagName(val):\n                            buf += textToString(element) + \"\\n\"\n            except Exception:\n                pass\n        return buf\n\n    def _index_xlsx(self, bin_data):\n        '''Index Microsoft .xlsx documents'''\n\n        buf = u\"\"\n        f = io.BytesIO(bin_data)\n        if zipfile.is_zipfile(f):\n            try:\n                zf = zipfile.ZipFile(f)\n                content = xml.dom.minidom.parseString(zf.read(\"xl/sharedStrings.xml\"))\n                for val in [\"t\"]:\n                    for element in content.getElementsByTagName(val):\n                        buf += textToString(element) + \"\\n\"\n            except Exception:\n                pass\n        return buf\n\n    def _index_opendoc(self, bin_data):\n        '''Index OpenDocument documents (.odt, .ods...)'''\n\n        buf = u\"\"\n        f = io.BytesIO(bin_data)\n        if zipfile.is_zipfile(f):\n            try:\n                zf = zipfile.ZipFile(f)\n                content = xml.dom.minidom.parseString(zf.read(\"content.xml\"))\n                for val in [\"text:p\", \"text:h\", \"text:list\"]:\n                    for element in content.getElementsByTagName(val):\n                        buf += textToString(element) + \"\\n\"\n            except Exception:\n                pass\n        return buf\n\n    def _index_pdf(self, bin_data):\n        '''Index PDF documents'''\n\n        buf = u\"\"\n        if bin_data.startswith(b'%PDF-'):\n            f = io.BytesIO(bin_data)\n            try:\n                pdf = PyPDF2.PdfFileReader(f, overwriteWarnings=False)\n                for page in pdf.pages:\n                    buf += page.extractText()\n            except Exception:\n                pass\n        return buf\n\n    @api.model\n    def _index(self, bin_data, datas_fname, mimetype):\n        for ftype in FTYPES:\n            buf = getattr(self, '_index_%s' % ftype)(bin_data)\n            if buf:\n                return buf\n\n        return super(IrAttachment, self)._index(bin_data, datas_fname, mimetype)\n", "comments": "   index microsoft  docx documents            buf   u           f   io bytesio(bin data)         zipfile zipfile(f)              try                  zf   zipfile zipfile(f)                 content   xml dom minidom parsestring(zf read( word document xml ))                 val   w p    w h    text list                        element content getelementsbytagname(val)                          buf    texttostring(element)     n              except exception                  pass         return buf      def  index pptx(self  bin data)             index microsoft  pptx documents             buf   u           f   io bytesio(bin data)         zipfile zipfile(f)              try                  zf   zipfile zipfile(f)                 zf filelist    x x zf namelist() x startswith( ppt slides slide )                  range(1  len(zf filelist)   1)                      content   xml dom minidom parsestring(zf read( ppt slides slide xml    i))                     val                              element content getelementsbytagname(val)                              buf    texttostring(element)     n              except exception                  pass         return buf      def  index xlsx(self  bin data)             index microsoft  xlsx documents             buf   u           f   io bytesio(bin data)         zipfile zipfile(f)              try                  zf   zipfile zipfile(f)                 content   xml dom minidom parsestring(zf read( xl sharedstrings xml ))                 val                          element content getelementsbytagname(val)                          buf    texttostring(element)     n              except exception                  pass         return buf      def  index opendoc(self  bin data)             index opendocument documents ( odt   ods   )             buf   u           f   io bytesio(bin data)         zipfile zipfile(f)              try                  zf   zipfile zipfile(f)                 content   xml dom minidom parsestring(zf read( content xml ))                 val   text p    text h    text list                        element content getelementsbytagname(val)                          buf    texttostring(element)     n              except exception                  pass         return buf      def  index pdf(self  bin data)             index pdf documents           coding  utf 8        part odoo  see license file full copyright licensing details  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nimport io\nimport logging\nimport PyPDF2\nimport xml.dom.minidom\nimport zipfile\n\nfrom odoo import api, models\n\n_logger = logging.getLogger(__name__)\nFTYPES = ['docx', 'pptx', 'xlsx', 'opendoc', 'pdf']\n\ndef textToString(element):\n    buff = u\"\"\n    for node in element.childNodes:\n        if node.nodeType == xml.dom.Node.TEXT_NODE:\n            buff += node.nodeValue\n        elif node.nodeType == xml.dom.Node.ELEMENT_NODE:\n            buff += textToString(node)\n    return buff\n\n\nclass IrAttachment(models.Model):\n    _inherit = 'ir.attachment'\n\n    def _index_docx(self, bin_data):\n        '''Index Microsoft .docx documents'''\n        buf = u\"\"\n        f = io.BytesIO(bin_data)\n        if zipfile.is_zipfile(f):\n            try:\n                zf = zipfile.ZipFile(f)\n                content = xml.dom.minidom.parseString(zf.read(\"word/document.xml\"))\n                for val in [\"w:p\", \"w:h\", \"text:list\"]:\n                    for element in content.getElementsByTagName(val):\n                        buf += textToString(element) + \"\\n\"\n            except Exception:\n                pass\n        return buf\n\n    def _index_pptx(self, bin_data):\n        '''Index Microsoft .pptx documents'''\n\n        buf = u\"\"\n        f = io.BytesIO(bin_data)\n        if zipfile.is_zipfile(f):\n            try:\n                zf = zipfile.ZipFile(f)\n                zf_filelist = [x for x in zf.namelist() if x.startswith('ppt/slides/slide')]\n                for i in range(1, len(zf_filelist) + 1):\n                    content = xml.dom.minidom.parseString(zf.read('ppt/slides/slide%s.xml' % i))\n                    for val in [\"a:t\"]:\n                        for element in content.getElementsByTagName(val):\n                            buf += textToString(element) + \"\\n\"\n            except Exception:\n                pass\n        return buf\n\n    def _index_xlsx(self, bin_data):\n        '''Index Microsoft .xlsx documents'''\n\n        buf = u\"\"\n        f = io.BytesIO(bin_data)\n        if zipfile.is_zipfile(f):\n            try:\n                zf = zipfile.ZipFile(f)\n                content = xml.dom.minidom.parseString(zf.read(\"xl/sharedStrings.xml\"))\n                for val in [\"t\"]:\n                    for element in content.getElementsByTagName(val):\n                        buf += textToString(element) + \"\\n\"\n            except Exception:\n                pass\n        return buf\n\n    def _index_opendoc(self, bin_data):\n        '''Index OpenDocument documents (.odt, .ods...)'''\n\n        buf = u\"\"\n        f = io.BytesIO(bin_data)\n        if zipfile.is_zipfile(f):\n            try:\n                zf = zipfile.ZipFile(f)\n                content = xml.dom.minidom.parseString(zf.read(\"content.xml\"))\n                for val in [\"text:p\", \"text:h\", \"text:list\"]:\n                    for element in content.getElementsByTagName(val):\n                        buf += textToString(element) + \"\\n\"\n            except Exception:\n                pass\n        return buf\n\n    def _index_pdf(self, bin_data):\n        '''Index PDF documents'''\n\n        buf = u\"\"\n        if bin_data.startswith(b'%PDF-'):\n            f = io.BytesIO(bin_data)\n            try:\n                pdf = PyPDF2.PdfFileReader(f, overwriteWarnings=False)\n                for page in pdf.pages:\n                    buf += page.extractText()\n            except Exception:\n                pass\n        return buf\n\n    @api.model\n    def _index(self, bin_data, datas_fname, mimetype):\n        for ftype in FTYPES:\n            buf = getattr(self, '_index_%s' % ftype)(bin_data)\n            if buf:\n                return buf\n\n        return super(IrAttachment, self)._index(bin_data, datas_fname, mimetype)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "ir_attachment.py", "id": "90dbc842a99a05813cf56828277556e4", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/document/models/ir_attachment.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}