{"author": "yandex", "code": "from __future__ import absolute_import\n\nimport gixy\nfrom gixy.directives import block\n\n\nclass BaseFormatter(object):\n    skip_parents = set([block.Root, block.HttpBlock])\n\n    def __init__(self):\n        self.reports = {}\n        self.stats = dict.fromkeys(gixy.severity.ALL, 0)\n\n    def format_reports(self, reports, stats):\n        raise NotImplementedError(\"Formatter must override format_reports function\")\n\n    def feed(self, path, manager):\n        for severity in gixy.severity.ALL:\n            self.stats[severity] += manager.stats[severity]\n\n        self.reports[path] = []\n        for result in manager.results:\n            report = self._prepare_result(manager.root,\n                                          summary=result.summary,\n                                          severity=result.severity,\n                                          description=result.description,\n                                          issues=result.issues,\n                                          plugin=result.name,\n                                          help_url=result.help_url)\n            self.reports[path].extend(report)\n\n    def flush(self):\n        return self.format_reports(self.reports, self.stats)\n\n    def _prepare_result(self, root, issues, severity, summary, description, plugin, help_url):\n        result = {}\n        for issue in issues:\n            report = dict(\n                plugin=plugin,\n                summary=issue.summary or summary,\n                severity=issue.severity or severity,\n                description=issue.description or description,\n                help_url=issue.help_url or help_url,\n                reason=issue.reason or '',\n            )\n            key = ''.join(report.values())\n            report['directives'] = issue.directives\n            if key in result:\n                result[key]['directives'].extend(report['directives'])\n            else:\n                result[key] = report\n\n        for report in result.values():\n            if report['directives']:\n                config = self._resolve_config(root, report['directives'])\n            else:\n                config = ''\n\n            del report['directives']\n            report['config'] = config\n            yield report\n\n    def _resolve_config(self, root, directives):\n        points = set()\n        for directive in directives:\n            points.add(directive)\n            points.update(p for p in directive.parents)\n\n        result = self._traverse_tree(root, points, 0)\n        return '\\n'.join(result)\n\n    def _traverse_tree(self, tree, points, level):\n        result = []\n        for leap in tree.children:\n            if leap not in points:\n                continue\n            printable = type(leap) not in self.skip_parents\n            \n            # TODO(buglloc): fix me\n            have_parentheses = type(leap) != block.IncludeBlock\n\n            if printable:\n                if leap.is_block:\n                    result.append('')\n                directive = str(leap).replace('\\n', '\\n' + '\\t' * (level + 1))\n                result.append('{indent:s}{dir:s}'.format(indent='\\t' * level, dir=directive))\n\n            if leap.is_block:\n                result.extend(self._traverse_tree(leap, points, level + 1 if printable else level))\n                if printable and have_parentheses:\n                    result.append('{indent:s}}}'.format(indent='\\t' * level))\n\n        return result\n", "comments": "  special hack includes    todo(buglloc)  fix ", "content": "from __future__ import absolute_import\n\nimport gixy\nfrom gixy.directives import block\n\n\nclass BaseFormatter(object):\n    skip_parents = set([block.Root, block.HttpBlock])\n\n    def __init__(self):\n        self.reports = {}\n        self.stats = dict.fromkeys(gixy.severity.ALL, 0)\n\n    def format_reports(self, reports, stats):\n        raise NotImplementedError(\"Formatter must override format_reports function\")\n\n    def feed(self, path, manager):\n        for severity in gixy.severity.ALL:\n            self.stats[severity] += manager.stats[severity]\n\n        self.reports[path] = []\n        for result in manager.results:\n            report = self._prepare_result(manager.root,\n                                          summary=result.summary,\n                                          severity=result.severity,\n                                          description=result.description,\n                                          issues=result.issues,\n                                          plugin=result.name,\n                                          help_url=result.help_url)\n            self.reports[path].extend(report)\n\n    def flush(self):\n        return self.format_reports(self.reports, self.stats)\n\n    def _prepare_result(self, root, issues, severity, summary, description, plugin, help_url):\n        result = {}\n        for issue in issues:\n            report = dict(\n                plugin=plugin,\n                summary=issue.summary or summary,\n                severity=issue.severity or severity,\n                description=issue.description or description,\n                help_url=issue.help_url or help_url,\n                reason=issue.reason or '',\n            )\n            key = ''.join(report.values())\n            report['directives'] = issue.directives\n            if key in result:\n                result[key]['directives'].extend(report['directives'])\n            else:\n                result[key] = report\n\n        for report in result.values():\n            if report['directives']:\n                config = self._resolve_config(root, report['directives'])\n            else:\n                config = ''\n\n            del report['directives']\n            report['config'] = config\n            yield report\n\n    def _resolve_config(self, root, directives):\n        points = set()\n        for directive in directives:\n            points.add(directive)\n            points.update(p for p in directive.parents)\n\n        result = self._traverse_tree(root, points, 0)\n        return '\\n'.join(result)\n\n    def _traverse_tree(self, tree, points, level):\n        result = []\n        for leap in tree.children:\n            if leap not in points:\n                continue\n            printable = type(leap) not in self.skip_parents\n            # Special hack for includes\n            # TODO(buglloc): fix me\n            have_parentheses = type(leap) != block.IncludeBlock\n\n            if printable:\n                if leap.is_block:\n                    result.append('')\n                directive = str(leap).replace('\\n', '\\n' + '\\t' * (level + 1))\n                result.append('{indent:s}{dir:s}'.format(indent='\\t' * level, dir=directive))\n\n            if leap.is_block:\n                result.extend(self._traverse_tree(leap, points, level + 1 if printable else level))\n                if printable and have_parentheses:\n                    result.append('{indent:s}}}'.format(indent='\\t' * level))\n\n        return result\n", "description": "Nginx configuration static analyzer", "file_name": "base.py", "id": "8bdc74b653d773146b1b2162fb29b95e", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/gixy/formatters/base.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}