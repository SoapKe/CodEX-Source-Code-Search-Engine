{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport json\nimport time\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlencode\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n)\n\n\nclass HypemIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hypem\\.com/track/(?P<id>[^/]+)/'\n    _TEST = {\n        'url': 'http://hypem.com/track/1v6ga/BODYWORK+-+TAME',\n        'md5': 'b9cc91b5af8995e9f0c1cee04c575828',\n        'info_dict': {\n            'id': '1v6ga',\n            'ext': 'mp3',\n            'title': 'Tame',\n            'uploader': 'BODYWORK',\n        }\n    }\n\n    def _real_extract(self, url):\n        track_id = self._match_id(url)\n\n        data = {'ax': 1, 'ts': time.time()}\n        request = sanitized_Request(url + '?' + compat_urllib_parse_urlencode(data))\n        response, urlh = self._download_webpage_handle(\n            request, track_id, 'Downloading webpage with the url')\n\n        html_tracks = self._html_search_regex(\n            r'(?ms)<script type=\"application/json\" id=\"displayList-data\">(.+?)</script>',\n            response, 'tracks')\n        try:\n            track_list = json.loads(html_tracks)\n            track = track_list['tracks'][0]\n        except ValueError:\n            raise ExtractorError('Hypemachine contained invalid JSON.')\n\n        key = track['key']\n        track_id = track['id']\n        title = track['song']\n\n        request = sanitized_Request(\n            'http://hypem.com/serve/source/%s/%s' % (track_id, key),\n            '', {'Content-Type': 'application/json'})\n        song_data = self._download_json(request, track_id, 'Downloading metadata')\n        final_url = song_data['url']\n        artist = track.get('artist')\n\n        return {\n            'id': track_id,\n            'url': final_url,\n            'ext': 'mp3',\n            'title': title,\n            'uploader': artist,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport json\nimport time\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_urlencode\nfrom ..utils import (\n    ExtractorError,\n    sanitized_Request,\n)\n\n\nclass HypemIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hypem\\.com/track/(?P<id>[^/]+)/'\n    _TEST = {\n        'url': 'http://hypem.com/track/1v6ga/BODYWORK+-+TAME',\n        'md5': 'b9cc91b5af8995e9f0c1cee04c575828',\n        'info_dict': {\n            'id': '1v6ga',\n            'ext': 'mp3',\n            'title': 'Tame',\n            'uploader': 'BODYWORK',\n        }\n    }\n\n    def _real_extract(self, url):\n        track_id = self._match_id(url)\n\n        data = {'ax': 1, 'ts': time.time()}\n        request = sanitized_Request(url + '?' + compat_urllib_parse_urlencode(data))\n        response, urlh = self._download_webpage_handle(\n            request, track_id, 'Downloading webpage with the url')\n\n        html_tracks = self._html_search_regex(\n            r'(?ms)<script type=\"application/json\" id=\"displayList-data\">(.+?)</script>',\n            response, 'tracks')\n        try:\n            track_list = json.loads(html_tracks)\n            track = track_list['tracks'][0]\n        except ValueError:\n            raise ExtractorError('Hypemachine contained invalid JSON.')\n\n        key = track['key']\n        track_id = track['id']\n        title = track['song']\n\n        request = sanitized_Request(\n            'http://hypem.com/serve/source/%s/%s' % (track_id, key),\n            '', {'Content-Type': 'application/json'})\n        song_data = self._download_json(request, track_id, 'Downloading metadata')\n        final_url = song_data['url']\n        artist = track.get('artist')\n\n        return {\n            'id': track_id,\n            'url': final_url,\n            'ext': 'mp3',\n            'title': title,\n            'uploader': artist,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hypem.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hypem.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}