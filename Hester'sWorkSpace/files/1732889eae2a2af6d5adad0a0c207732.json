{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Dag Wieers <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_domain_to_vlan_pool\nshort_description: Bind Domain to VLAN Pools (infra:RsVlanNs)\ndescription:\n- Bind Domain to VLAN Pools on Cisco ACI fabrics.\nnotes:\n- The C(domain) and C(vlan_pool) parameters should exist before using this module.\n  The M(aci_domain) and M(aci_vlan_pool) can be used for these.\n- More information about the internal APIC class B(infra:RsVlanNs) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.5'\noptions:\n  domain:\n    description:\n    - Name of the domain being associated with the VLAN Pool.\n    aliases: [ domain_name, domain_profile ]\n  domain_type:\n    description:\n    - Determines if the Domain is physical (phys) or virtual (vmm).\n    choices: [ fc, l2dom, l3dom, phys, vmm ]\n  pool:\n    description:\n    - The name of the pool.\n    aliases: [ pool_name, vlan_pool ]\n  pool_allocation_mode:\n    description:\n    - The method used for allocating VLANs to resources.\n    choices: [ dynamic, static]\n    required: yes\n    aliases: [ allocation_mode, mode ]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\n  vm_provider:\n    description:\n    - The VM platform for VMM Domains.\n    - Support for Kubernetes was added in ACI v3.0.\n    - Support for CloudFoundry, OpenShift and Red Hat was added in ACI v3.1.\n    choices: [ cloudfoundry, kubernetes, microsoft, openshift, openstack, redhat, vmware ]\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Bind a VMM domain to VLAN pool\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: vmw_dom\n    domain_type: vmm\n    pool: vmw_pool\n    pool_allocation_mode: dynamic\n    vm_provider: vmware\n    state: present\n\n- name: Remove a VMM domain to VLAN pool binding\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: vmw_dom\n    domain_type: vmm\n    pool: vmw_pool\n    pool_allocation_mode: dynamic\n    vm_provider: vmware\n    state: absent\n\n- name: Bind a physical domain to VLAN pool\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    pool: phys_pool\n    pool_allocation_mode: static\n    state: present\n\n- name: Bind a physical domain to VLAN pool\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    pool: phys_pool\n    pool_allocation_mode: static\n    state: absent\n\n- name: Query an domain to VLAN pool binding\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    pool: phys_pool\n    pool_allocation_mode: static\n    state: query\n\n- name: Query all domain to VLAN pool bindings\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain_type: phys\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nVM_PROVIDER_MAPPING = dict(\n    cloudfoundry='CloudFoundry',\n    kubernetes='Kubernetes',\n    microsoft='Microsoft',\n    openshift='OpenShift',\n    openstack='OpenStack',\n    redhat='Redhat',\n    vmware='VMware',\n)\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        domain=dict(type='str', aliases=['domain_name', 'domain_profile']),  \n        domain_type=dict(type='str', required=True, choices=['fc', 'l2dom', 'l3dom', 'phys', 'vmm']),  \n        pool=dict(type='str', aliases=['pool_name', 'vlan_pool']),  \n        pool_allocation_mode=dict(type='str', required=True, aliases=['allocation_mode', 'mode'], choices=['dynamic', 'static']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        vm_provider=dict(type='str', choices=['cloudfoundry', 'kubernetes', 'microsoft', 'openshift', 'openstack', 'redhat', 'vmware']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['domain_type', 'vmm', ['vm_provider']],\n            ['state', 'absent', ['domain', 'domain_type', 'pool']],\n            ['state', 'present', ['domain', 'domain_type', 'pool']],\n        ],\n    )\n\n    domain = module.params['domain']\n    domain_type = module.params['domain_type']\n    pool = module.params['pool']\n    pool_allocation_mode = module.params['pool_allocation_mode']\n    vm_provider = module.params['vm_provider']\n    state = module.params['state']\n\n    \n    if domain_type != 'vmm' and vm_provider is not None:\n        module.fail_json(msg=\"Domain type '{0}' cannot have a 'vm_provider'\".format(domain_type))\n\n    # ACI Pool URL requires the allocation mode for vlan and vsan pools (ex: uni/infra/vlanns-[poolname]-static)\n    pool_name = pool\n    if pool is not None:\n        pool_name = '[{0}]-{1}'.format(pool, pool_allocation_mode)\n\n    \n    if domain_type == 'fc':\n        domain_class = 'fcDomP'\n        domain_mo = 'uni/fc-{0}'.format(domain)\n        domain_rn = 'fc-{0}'.format(domain)\n    elif domain_type == 'l2dom':\n        domain_class = 'l2extDomP'\n        domain_mo = 'uni/l2dom-{0}'.format(domain)\n        domain_rn = 'l2dom-{0}'.format(domain)\n    elif domain_type == 'l3dom':\n        domain_class = 'l3extDomP'\n        domain_mo = 'uni/l3dom-{0}'.format(domain)\n        domain_rn = 'l3dom-{0}'.format(domain)\n    elif domain_type == 'phys':\n        domain_class = 'physDomP'\n        domain_mo = 'uni/phys-{0}'.format(domain)\n        domain_rn = 'phys-{0}'.format(domain)\n    elif domain_type == 'vmm':\n        domain_class = 'vmmDomP'\n        domain_mo = 'uni/vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)\n        domain_rn = 'dom-{0}'.format(domain)\n\n    \n    if domain is None:\n        domain_mo = None\n\n    aci_mo = 'uni/infra/vlanns-{0}'.format(pool_name)\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class=domain_class,\n            aci_rn=domain_rn,\n            filter_target='eq({0}.name, \"{1}\")'.format(domain_class, domain),\n            module_object=domain_mo,\n        ),\n        child_classes=['infraRsVlanNs'],\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class=domain_class,\n            class_config=dict(name=domain),\n            child_configs=[\n                {'infraRsVlanNs': {'attributes': {'tDn': aci_mo}}},\n            ]\n        )\n\n        aci.get_diff(aci_class=domain_class)\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "        module  aci domain vlan pool short description  bind domain vlan pools (infra rsvlanns) description    bind domain vlan pools cisco aci fabrics  notes    the c(domain) c(vlan pool) parameters exist using module    the m(aci domain) m(aci vlan pool) used    more information internal apic class b(infra rsvlanns)   l(the apic management information model reference https   developer cisco com docs apic mim ref )  author    dag wieers ( dagwieers) version added   2 5  options    domain      description        name domain associated vlan pool      aliases    domain name  domain profile     domain type      description        determines domain physical (phys) virtual (vmm)      choices    fc  l2dom  l3dom  phys  vmm     pool      description        the name pool      aliases    pool name  vlan pool     pool allocation mode      description        the method used allocating vlans resources      choices    dynamic  static      required  yes     aliases    allocation mode  mode     state      description        use c(present) c(absent) adding removing        use c(query) listing object multiple objects      choices    absent  present  query       default  present   vm provider      description        the vm platform vmm domains        support kubernetes added aci v3 0        support cloudfoundry  openshift red hat added aci v3 1      choices    cloudfoundry  kubernetes  microsoft  openshift  openstack  redhat  vmware   extends documentation fragment  aci      examples   r      name  bind vmm domain vlan pool   aci domain vlan pool      host  apic     username  admin     password  somesecretpassword     domain  vmw dom     domain type  vmm     pool  vmw pool     pool allocation mode  dynamic     vm provider  vmware     state  present    name  remove vmm domain vlan pool binding   aci domain vlan pool      host  apic     username  admin     password  somesecretpassword     domain  vmw dom     domain type  vmm     pool  vmw pool     pool allocation mode  dynamic     vm provider  vmware     state  absent    name  bind physical domain vlan pool   aci domain vlan pool      host  apic     username  admin     password  somesecretpassword     domain  phys dom     domain type  phys     pool  phys pool     pool allocation mode  static     state  present    name  bind physical domain vlan pool   aci domain vlan pool      host  apic     username  admin     password  somesecretpassword     domain  phys dom     domain type  phys     pool  phys pool     pool allocation mode  static     state  absent    name  query domain vlan pool binding   aci domain vlan pool      host  apic     username  admin     password  somesecretpassword     domain  phys dom     domain type  phys     pool  phys pool     pool allocation mode  static     state  query    name  query domain vlan pool bindings   aci domain vlan pool      host  apic     username  admin     password  somesecretpassword     domain type  phys     state  query      return   r    current    description  the existing configuration apic module finished   returned  success   type  list   sample                               fvtenant                      attributes                          descr    production environment                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      error    description  the error information returned apic   returned  failure   type  dict   sample                 code    122            text    unknown managed object class foo        raw    description  the raw output returned apic rest api (xml json)   returned  parse error   type  string   sample     xml version  1 0  encoding  utf 8    imdata totalcount  1   error code  122  text  unknown managed object class foo     imdata   sent    description  the actual minimal configuration pushed apic   returned  info   type  list   sample                 fvtenant                  attributes                      descr    production environment                                previous    description  the original configuration apic module started   returned  info   type  list   sample                               fvtenant                      attributes                          descr    production                        dn    uni tn production                        name    production                        namealias                            ownerkey                            ownertag                                                      proposed    description  the assembled configuration user provided parameters   returned  info   type  dict   sample                 fvtenant                  attributes                      descr    production environment                    name    production                                filter string    description  the filter string used request   returned  failure debug   type  string   sample   rsp prop include config method    description  the http method used request apic   returned  failure debug   type  string   sample  post response    description  the http response apic   returned  failure debug   type  string   sample  ok (30 bytes) status    description  the http status apic   returned  failure debug   type  int   sample  200 url    description  the http url used request apic   returned  failure debug   type  string   sample  https   10 11 12 13 api mo uni tn production json         usr bin python        coding  utf 8        copyright  (c) 2017  dag wieers  dag wieers com     gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    not required querying objects    not required querying objects    not required querying objects    report vm provider set type virtual    aci pool url requires allocation mode vlan vsan pools (ex  uni infra vlanns  poolname  static)    compile full domain url building    ensure querying objects works domain type provided ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2017, Dag Wieers <dag@wieers.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\nDOCUMENTATION = r'''\n---\nmodule: aci_domain_to_vlan_pool\nshort_description: Bind Domain to VLAN Pools (infra:RsVlanNs)\ndescription:\n- Bind Domain to VLAN Pools on Cisco ACI fabrics.\nnotes:\n- The C(domain) and C(vlan_pool) parameters should exist before using this module.\n  The M(aci_domain) and M(aci_vlan_pool) can be used for these.\n- More information about the internal APIC class B(infra:RsVlanNs) from\n  L(the APIC Management Information Model reference,https://developer.cisco.com/docs/apic-mim-ref/).\nauthor:\n- Dag Wieers (@dagwieers)\nversion_added: '2.5'\noptions:\n  domain:\n    description:\n    - Name of the domain being associated with the VLAN Pool.\n    aliases: [ domain_name, domain_profile ]\n  domain_type:\n    description:\n    - Determines if the Domain is physical (phys) or virtual (vmm).\n    choices: [ fc, l2dom, l3dom, phys, vmm ]\n  pool:\n    description:\n    - The name of the pool.\n    aliases: [ pool_name, vlan_pool ]\n  pool_allocation_mode:\n    description:\n    - The method used for allocating VLANs to resources.\n    choices: [ dynamic, static]\n    required: yes\n    aliases: [ allocation_mode, mode ]\n  state:\n    description:\n    - Use C(present) or C(absent) for adding or removing.\n    - Use C(query) for listing an object or multiple objects.\n    choices: [ absent, present, query ]\n    default: present\n  vm_provider:\n    description:\n    - The VM platform for VMM Domains.\n    - Support for Kubernetes was added in ACI v3.0.\n    - Support for CloudFoundry, OpenShift and Red Hat was added in ACI v3.1.\n    choices: [ cloudfoundry, kubernetes, microsoft, openshift, openstack, redhat, vmware ]\nextends_documentation_fragment: aci\n'''\n\nEXAMPLES = r'''\n- name: Bind a VMM domain to VLAN pool\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: vmw_dom\n    domain_type: vmm\n    pool: vmw_pool\n    pool_allocation_mode: dynamic\n    vm_provider: vmware\n    state: present\n\n- name: Remove a VMM domain to VLAN pool binding\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: vmw_dom\n    domain_type: vmm\n    pool: vmw_pool\n    pool_allocation_mode: dynamic\n    vm_provider: vmware\n    state: absent\n\n- name: Bind a physical domain to VLAN pool\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    pool: phys_pool\n    pool_allocation_mode: static\n    state: present\n\n- name: Bind a physical domain to VLAN pool\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    pool: phys_pool\n    pool_allocation_mode: static\n    state: absent\n\n- name: Query an domain to VLAN pool binding\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain: phys_dom\n    domain_type: phys\n    pool: phys_pool\n    pool_allocation_mode: static\n    state: query\n\n- name: Query all domain to VLAN pool bindings\n  aci_domain_to_vlan_pool:\n    host: apic\n    username: admin\n    password: SomeSecretPassword\n    domain_type: phys\n    state: query\n'''\n\nRETURN = r'''\ncurrent:\n  description: The existing configuration from the APIC after the module has finished\n  returned: success\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production environment\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nerror:\n  description: The error information as returned from the APIC\n  returned: failure\n  type: dict\n  sample:\n    {\n        \"code\": \"122\",\n        \"text\": \"unknown managed object class foo\"\n    }\nraw:\n  description: The raw output returned by the APIC REST API (xml or json)\n  returned: parse error\n  type: string\n  sample: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><imdata totalCount=\"1\"><error code=\"122\" text=\"unknown managed object class foo\"/></imdata>'\nsent:\n  description: The actual/minimal configuration pushed to the APIC\n  returned: info\n  type: list\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\"\n            }\n        }\n    }\nprevious:\n  description: The original configuration from the APIC before the module has started\n  returned: info\n  type: list\n  sample:\n    [\n        {\n            \"fvTenant\": {\n                \"attributes\": {\n                    \"descr\": \"Production\",\n                    \"dn\": \"uni/tn-production\",\n                    \"name\": \"production\",\n                    \"nameAlias\": \"\",\n                    \"ownerKey\": \"\",\n                    \"ownerTag\": \"\"\n                }\n            }\n        }\n    ]\nproposed:\n  description: The assembled configuration from the user-provided parameters\n  returned: info\n  type: dict\n  sample:\n    {\n        \"fvTenant\": {\n            \"attributes\": {\n                \"descr\": \"Production environment\",\n                \"name\": \"production\"\n            }\n        }\n    }\nfilter_string:\n  description: The filter string used for the request\n  returned: failure or debug\n  type: string\n  sample: ?rsp-prop-include=config-only\nmethod:\n  description: The HTTP method used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: POST\nresponse:\n  description: The HTTP response from the APIC\n  returned: failure or debug\n  type: string\n  sample: OK (30 bytes)\nstatus:\n  description: The HTTP status from the APIC\n  returned: failure or debug\n  type: int\n  sample: 200\nurl:\n  description: The HTTP url used for the request to the APIC\n  returned: failure or debug\n  type: string\n  sample: https://10.11.12.13/api/mo/uni/tn-production.json\n'''\n\nfrom ansible.module_utils.network.aci.aci import ACIModule, aci_argument_spec\nfrom ansible.module_utils.basic import AnsibleModule\n\nVM_PROVIDER_MAPPING = dict(\n    cloudfoundry='CloudFoundry',\n    kubernetes='Kubernetes',\n    microsoft='Microsoft',\n    openshift='OpenShift',\n    openstack='OpenStack',\n    redhat='Redhat',\n    vmware='VMware',\n)\n\n\ndef main():\n    argument_spec = aci_argument_spec()\n    argument_spec.update(\n        domain=dict(type='str', aliases=['domain_name', 'domain_profile']),  # Not required for querying all objects\n        domain_type=dict(type='str', required=True, choices=['fc', 'l2dom', 'l3dom', 'phys', 'vmm']),  # Not required for querying all objects\n        pool=dict(type='str', aliases=['pool_name', 'vlan_pool']),  # Not required for querying all objects\n        pool_allocation_mode=dict(type='str', required=True, aliases=['allocation_mode', 'mode'], choices=['dynamic', 'static']),\n        state=dict(type='str', default='present', choices=['absent', 'present', 'query']),\n        vm_provider=dict(type='str', choices=['cloudfoundry', 'kubernetes', 'microsoft', 'openshift', 'openstack', 'redhat', 'vmware']),\n    )\n\n    module = AnsibleModule(\n        argument_spec=argument_spec,\n        supports_check_mode=True,\n        required_if=[\n            ['domain_type', 'vmm', ['vm_provider']],\n            ['state', 'absent', ['domain', 'domain_type', 'pool']],\n            ['state', 'present', ['domain', 'domain_type', 'pool']],\n        ],\n    )\n\n    domain = module.params['domain']\n    domain_type = module.params['domain_type']\n    pool = module.params['pool']\n    pool_allocation_mode = module.params['pool_allocation_mode']\n    vm_provider = module.params['vm_provider']\n    state = module.params['state']\n\n    # Report when vm_provider is set when type is not virtual\n    if domain_type != 'vmm' and vm_provider is not None:\n        module.fail_json(msg=\"Domain type '{0}' cannot have a 'vm_provider'\".format(domain_type))\n\n    # ACI Pool URL requires the allocation mode for vlan and vsan pools (ex: uni/infra/vlanns-[poolname]-static)\n    pool_name = pool\n    if pool is not None:\n        pool_name = '[{0}]-{1}'.format(pool, pool_allocation_mode)\n\n    # Compile the full domain for URL building\n    if domain_type == 'fc':\n        domain_class = 'fcDomP'\n        domain_mo = 'uni/fc-{0}'.format(domain)\n        domain_rn = 'fc-{0}'.format(domain)\n    elif domain_type == 'l2dom':\n        domain_class = 'l2extDomP'\n        domain_mo = 'uni/l2dom-{0}'.format(domain)\n        domain_rn = 'l2dom-{0}'.format(domain)\n    elif domain_type == 'l3dom':\n        domain_class = 'l3extDomP'\n        domain_mo = 'uni/l3dom-{0}'.format(domain)\n        domain_rn = 'l3dom-{0}'.format(domain)\n    elif domain_type == 'phys':\n        domain_class = 'physDomP'\n        domain_mo = 'uni/phys-{0}'.format(domain)\n        domain_rn = 'phys-{0}'.format(domain)\n    elif domain_type == 'vmm':\n        domain_class = 'vmmDomP'\n        domain_mo = 'uni/vmmp-{0}/dom-{1}'.format(VM_PROVIDER_MAPPING[vm_provider], domain)\n        domain_rn = 'dom-{0}'.format(domain)\n\n    # Ensure that querying all objects works when only domain_type is provided\n    if domain is None:\n        domain_mo = None\n\n    aci_mo = 'uni/infra/vlanns-{0}'.format(pool_name)\n\n    aci = ACIModule(module)\n    aci.construct_url(\n        root_class=dict(\n            aci_class=domain_class,\n            aci_rn=domain_rn,\n            filter_target='eq({0}.name, \"{1}\")'.format(domain_class, domain),\n            module_object=domain_mo,\n        ),\n        child_classes=['infraRsVlanNs'],\n    )\n\n    aci.get_existing()\n\n    if state == 'present':\n        aci.payload(\n            aci_class=domain_class,\n            class_config=dict(name=domain),\n            child_configs=[\n                {'infraRsVlanNs': {'attributes': {'tDn': aci_mo}}},\n            ]\n        )\n\n        aci.get_diff(aci_class=domain_class)\n\n        aci.post_config()\n\n    elif state == 'absent':\n        aci.delete_config()\n\n    aci.exit_json()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "aci_domain_to_vlan_pool.py", "id": "1732889eae2a2af6d5adad0a0c207732", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/aci/aci_domain_to_vlan_pool.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}