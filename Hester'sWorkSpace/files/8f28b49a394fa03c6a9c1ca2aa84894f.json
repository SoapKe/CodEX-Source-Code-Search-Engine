{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    parse_duration,\n)\n\n\nclass MojvideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?mojvideo\\.com/video-(?P<display_id>[^/]+)/(?P<id>[a-f0-9]+)'\n    _TEST = {\n        'url': 'http://www.mojvideo.com/video-v-avtu-pred-mano-rdecelaska-alfi-nipic/3d1ed4497707730b2906',\n        'md5': 'f7fd662cc8ce2be107b0d4f2c0483ae7',\n        'info_dict': {\n            'id': '3d1ed4497707730b2906',\n            'display_id': 'v-avtu-pred-mano-rdecelaska-alfi-nipic',\n            'ext': 'mp4',\n            'title': 'V avtu pred mano rde\u010delaska - Alfi Nipi\u010d',\n            'thumbnail': r're:^http://.*\\.jpg$',\n            'duration': 242,\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        \n        playerapi = self._download_webpage(\n            'http://www.mojvideo.com/playerapi.php?v=%s&t=1' % video_id, display_id)\n\n        if '<error>true</error>' in playerapi:\n            error_desc = self._html_search_regex(\n                r'<errordesc>([^<]*)</errordesc>', playerapi, 'error description', fatal=False)\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_desc), expected=True)\n\n        title = self._html_search_regex(\n            r'<title>([^<]+)</title>', playerapi, 'title')\n        video_url = self._html_search_regex(\n            r'<file>([^<]+)</file>', playerapi, 'video URL')\n        thumbnail = self._html_search_regex(\n            r'<preview>([^<]+)</preview>', playerapi, 'thumbnail', fatal=False)\n        duration = parse_duration(self._html_search_regex(\n            r'<duration>([^<]+)</duration>', playerapi, 'duration', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n        }\n", "comments": "# coding: utf-8\n# XML is malformed\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    parse_duration,\n)\n\n\nclass MojvideoIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?mojvideo\\.com/video-(?P<display_id>[^/]+)/(?P<id>[a-f0-9]+)'\n    _TEST = {\n        'url': 'http://www.mojvideo.com/video-v-avtu-pred-mano-rdecelaska-alfi-nipic/3d1ed4497707730b2906',\n        'md5': 'f7fd662cc8ce2be107b0d4f2c0483ae7',\n        'info_dict': {\n            'id': '3d1ed4497707730b2906',\n            'display_id': 'v-avtu-pred-mano-rdecelaska-alfi-nipic',\n            'ext': 'mp4',\n            'title': 'V avtu pred mano rde\u010delaska - Alfi Nipi\u010d',\n            'thumbnail': r're:^http://.*\\.jpg$',\n            'duration': 242,\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        # XML is malformed\n        playerapi = self._download_webpage(\n            'http://www.mojvideo.com/playerapi.php?v=%s&t=1' % video_id, display_id)\n\n        if '<error>true</error>' in playerapi:\n            error_desc = self._html_search_regex(\n                r'<errordesc>([^<]*)</errordesc>', playerapi, 'error description', fatal=False)\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_desc), expected=True)\n\n        title = self._html_search_regex(\n            r'<title>([^<]+)</title>', playerapi, 'title')\n        video_url = self._html_search_regex(\n            r'<file>([^<]+)</file>', playerapi, 'video URL')\n        thumbnail = self._html_search_regex(\n            r'<preview>([^<]+)</preview>', playerapi, 'thumbnail', fatal=False)\n        duration = parse_duration(self._html_search_regex(\n            r'<duration>([^<]+)</duration>', playerapi, 'duration', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'url': video_url,\n            'title': title,\n            'thumbnail': thumbnail,\n            'duration': duration,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "mojvideo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/mojvideo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}