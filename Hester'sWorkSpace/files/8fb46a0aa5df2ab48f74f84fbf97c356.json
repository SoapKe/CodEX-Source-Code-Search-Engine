{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nimport errno\nimport io\nimport json\nimport re\nimport subprocess\n\nfrom youtube_dl.swfinterp import SWFInterpreter\n\n\nTEST_DIR = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'swftests')\n\n\nclass TestSWFInterpreter(unittest.TestCase):\n    pass\n\n\ndef _make_testfunc(testfile):\n    m = re.match(r'^(.*)\\.(as)$', testfile)\n    if not m:\n        return\n    test_id = m.group(1)\n\n    def test_func(self):\n        as_file = os.path.join(TEST_DIR, testfile)\n        swf_file = os.path.join(TEST_DIR, test_id + '.swf')\n        if ((not os.path.exists(swf_file)) or\n                os.path.getmtime(swf_file) < os.path.getmtime(as_file)):\n            \n            try:\n                subprocess.check_call([\n                    'mxmlc', '-output', swf_file,\n                    '-static-link-runtime-shared-libraries', as_file])\n            except OSError as ose:\n                if ose.errno == errno.ENOENT:\n                    print('mxmlc not found! Skipping test.')\n                    return\n                raise\n\n        with open(swf_file, 'rb') as swf_f:\n            swf_content = swf_f.read()\n        swfi = SWFInterpreter(swf_content)\n\n        with io.open(as_file, 'r', encoding='utf-8') as as_f:\n            as_content = as_f.read()\n\n        def _find_spec(key):\n            m = re.search(\n                r'(?m)^//\\s*%s:\\s*(.*?)\\n' % re.escape(key), as_content)\n            if not m:\n                raise ValueError('Cannot find %s in %s' % (key, testfile))\n            return json.loads(m.group(1))\n\n        input_args = _find_spec('input')\n        output = _find_spec('output')\n\n        swf_class = swfi.extract_class(test_id)\n        func = swfi.extract_function(swf_class, 'main')\n        res = func(input_args)\n        self.assertEqual(res, output)\n\n    test_func.__name__ = str('test_swf_' + test_id)\n    setattr(TestSWFInterpreter, test_func.__name__, test_func)\n\n\nfor testfile in os.listdir(TEST_DIR):\n    _make_testfunc(testfile)\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "   usr bin env python    allow direct execution    recompile ", "content": "#!/usr/bin/env python\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nimport errno\nimport io\nimport json\nimport re\nimport subprocess\n\nfrom youtube_dl.swfinterp import SWFInterpreter\n\n\nTEST_DIR = os.path.join(\n    os.path.dirname(os.path.abspath(__file__)), 'swftests')\n\n\nclass TestSWFInterpreter(unittest.TestCase):\n    pass\n\n\ndef _make_testfunc(testfile):\n    m = re.match(r'^(.*)\\.(as)$', testfile)\n    if not m:\n        return\n    test_id = m.group(1)\n\n    def test_func(self):\n        as_file = os.path.join(TEST_DIR, testfile)\n        swf_file = os.path.join(TEST_DIR, test_id + '.swf')\n        if ((not os.path.exists(swf_file)) or\n                os.path.getmtime(swf_file) < os.path.getmtime(as_file)):\n            # Recompile\n            try:\n                subprocess.check_call([\n                    'mxmlc', '-output', swf_file,\n                    '-static-link-runtime-shared-libraries', as_file])\n            except OSError as ose:\n                if ose.errno == errno.ENOENT:\n                    print('mxmlc not found! Skipping test.')\n                    return\n                raise\n\n        with open(swf_file, 'rb') as swf_f:\n            swf_content = swf_f.read()\n        swfi = SWFInterpreter(swf_content)\n\n        with io.open(as_file, 'r', encoding='utf-8') as as_f:\n            as_content = as_f.read()\n\n        def _find_spec(key):\n            m = re.search(\n                r'(?m)^//\\s*%s:\\s*(.*?)\\n' % re.escape(key), as_content)\n            if not m:\n                raise ValueError('Cannot find %s in %s' % (key, testfile))\n            return json.loads(m.group(1))\n\n        input_args = _find_spec('input')\n        output = _find_spec('output')\n\n        swf_class = swfi.extract_class(test_id)\n        func = swfi.extract_function(swf_class, 'main')\n        res = func(input_args)\n        self.assertEqual(res, output)\n\n    test_func.__name__ = str('test_swf_' + test_id)\n    setattr(TestSWFInterpreter, test_func.__name__, test_func)\n\n\nfor testfile in os.listdir(TEST_DIR):\n    _make_testfunc(testfile)\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_swfinterp.py", "id": "8fb46a0aa5df2ab48f74f84fbf97c356", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/rg3-youtube-dl/rg3-youtube-dl-08250b6/test/test_swfinterp.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:54:28Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}