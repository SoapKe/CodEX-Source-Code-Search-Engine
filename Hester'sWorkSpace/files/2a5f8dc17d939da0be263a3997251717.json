{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom ast import literal_eval\n\nfrom odoo import api, fields, models\nfrom odoo.exceptions import AccessDenied\n\n\nclass ResConfigSettings(models.TransientModel):\n    _inherit = 'res.config.settings'\n\n    def _default_website(self):\n        return self.env['website'].search([], limit=1)\n\n    \n    website_id = fields.Many2one('website', string=\"website\", default=_default_website, required=True)\n    website_name = fields.Char('Website Name', related='website_id.name')\n    language_ids = fields.Many2many(related='website_id.language_ids', relation='res.lang')\n    language_count = fields.Integer(string='Number of languages', compute='_compute_language_count', readonly=True)\n    default_lang_id = fields.Many2one(string='Default language', related='website_id.default_lang_id', relation='res.lang', required=True)\n    default_lang_code = fields.Char('Default language code', related='website_id.default_lang_code')\n    google_analytics_key = fields.Char('Google Analytics Key', related='website_id.google_analytics_key')\n    google_management_client_id = fields.Char('Google Client ID', related='website_id.google_management_client_id')\n    google_management_client_secret = fields.Char('Google Client Secret', related='website_id.google_management_client_secret')\n\n    cdn_activated = fields.Boolean('Use a Content Delivery Network (CDN)', related='website_id.cdn_activated')\n    cdn_url = fields.Char(related='website_id.cdn_url')\n    cdn_filters = fields.Text(related='website_id.cdn_filters')\n    module_website_version = fields.Boolean(\"A/B Testing\")\n\n    favicon = fields.Binary('Favicon', related='website_id.favicon')\n    \n    \n    google_maps_api_key = fields.Char(string='Google Maps API Key')\n    has_google_analytics = fields.Boolean(\"Google Analytics\")\n    has_google_analytics_dashboard = fields.Boolean(\"Google Analytics in Dashboard\")\n    has_google_maps = fields.Boolean(\"Google Maps\")\n    auth_signup_uninvited = fields.Selection([\n        ('b2b', 'On invitation (B2B)'),\n        ('b2c', 'Free sign up (B2C)'),\n    ], string='Customer Account')\n\n    @api.onchange('has_google_analytics')\n    def onchange_has_google_analytics(self):\n        if not self.has_google_analytics:\n            self.has_google_analytics_dashboard = False\n        if not self.has_google_analytics:\n            self.google_analytics_key = False\n\n    @api.onchange('has_google_analytics_dashboard')\n    def onchange_has_google_analytics_dashboard(self):\n        if not self.has_google_analytics_dashboard:\n            self.google_management_client_id = False\n            self.google_management_client_secret = False\n\n    @api.onchange('language_ids')\n    def _onchange_language_ids(self):\n        \n        \n        if self.language_ids and self.default_lang_id not in self.language_ids:\n            self.default_lang_id = self.language_ids[0]\n\n    @api.depends('language_ids')\n    def _compute_language_count(self):\n        for config in self:\n            config.language_count = len(self.language_ids)\n\n    @api.model\n    def get_values(self):\n        res = super(ResConfigSettings, self).get_values()\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        res.update(\n            auth_signup_uninvited='b2c' if get_param('auth_signup.allow_uninvited', 'False').lower() == 'true' else 'b2b',\n            has_google_analytics=get_param('website.has_google_analytics'),\n            has_google_analytics_dashboard=get_param('website.has_google_analytics_dashboard'),\n            has_google_maps=get_param('website.has_google_maps'),\n            google_maps_api_key=get_param('google_maps_api_key', default=''),\n        )\n        return res\n\n    def set_values(self):\n        if not self.user_has_groups('website.group_website_designer'):\n            raise AccessDenied()\n        super(ResConfigSettings, self).set_values()\n        set_param = self.env['ir.config_parameter'].sudo().set_param\n        set_param('auth_signup.allow_uninvited', repr(self.auth_signup_uninvited == 'b2c'))\n        set_param('website.has_google_analytics', self.has_google_analytics)\n        set_param('website.has_google_analytics_dashboard', self.has_google_analytics_dashboard)\n        set_param('website.has_google_maps', self.has_google_maps)\n        set_param('google_maps_api_key', (self.google_maps_api_key or '').strip())\n\n    @api.multi\n    def open_template_user(self):\n        action = self.env.ref('base.action_res_users').read()[0]\n        action['res_id'] = literal_eval(self.env['ir.config_parameter'].sudo().get_param('auth_signup.template_user_id', 'False'))\n        action['views'] = [[self.env.ref('base.view_users_form').id, 'form']]\n        return action\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     fixme  set website id ondelete  cascade  master    set global config parameter since methods using website aware  to changed    multi website implemented    if current default language removed language ids    update default lang id ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom ast import literal_eval\n\nfrom odoo import api, fields, models\nfrom odoo.exceptions import AccessDenied\n\n\nclass ResConfigSettings(models.TransientModel):\n    _inherit = 'res.config.settings'\n\n    def _default_website(self):\n        return self.env['website'].search([], limit=1)\n\n    # FIXME: Set website_id to ondelete='cascade' in master\n    website_id = fields.Many2one('website', string=\"website\", default=_default_website, required=True)\n    website_name = fields.Char('Website Name', related='website_id.name')\n    language_ids = fields.Many2many(related='website_id.language_ids', relation='res.lang')\n    language_count = fields.Integer(string='Number of languages', compute='_compute_language_count', readonly=True)\n    default_lang_id = fields.Many2one(string='Default language', related='website_id.default_lang_id', relation='res.lang', required=True)\n    default_lang_code = fields.Char('Default language code', related='website_id.default_lang_code')\n    google_analytics_key = fields.Char('Google Analytics Key', related='website_id.google_analytics_key')\n    google_management_client_id = fields.Char('Google Client ID', related='website_id.google_management_client_id')\n    google_management_client_secret = fields.Char('Google Client Secret', related='website_id.google_management_client_secret')\n\n    cdn_activated = fields.Boolean('Use a Content Delivery Network (CDN)', related='website_id.cdn_activated')\n    cdn_url = fields.Char(related='website_id.cdn_url')\n    cdn_filters = fields.Text(related='website_id.cdn_filters')\n    module_website_version = fields.Boolean(\"A/B Testing\")\n\n    favicon = fields.Binary('Favicon', related='website_id.favicon')\n    # Set as global config parameter since methods using it are not website-aware. To be changed\n    # when multi-website is implemented\n    google_maps_api_key = fields.Char(string='Google Maps API Key')\n    has_google_analytics = fields.Boolean(\"Google Analytics\")\n    has_google_analytics_dashboard = fields.Boolean(\"Google Analytics in Dashboard\")\n    has_google_maps = fields.Boolean(\"Google Maps\")\n    auth_signup_uninvited = fields.Selection([\n        ('b2b', 'On invitation (B2B)'),\n        ('b2c', 'Free sign up (B2C)'),\n    ], string='Customer Account')\n\n    @api.onchange('has_google_analytics')\n    def onchange_has_google_analytics(self):\n        if not self.has_google_analytics:\n            self.has_google_analytics_dashboard = False\n        if not self.has_google_analytics:\n            self.google_analytics_key = False\n\n    @api.onchange('has_google_analytics_dashboard')\n    def onchange_has_google_analytics_dashboard(self):\n        if not self.has_google_analytics_dashboard:\n            self.google_management_client_id = False\n            self.google_management_client_secret = False\n\n    @api.onchange('language_ids')\n    def _onchange_language_ids(self):\n        # If current default language is removed from language_ids\n        # update the default_lang_id\n        if self.language_ids and self.default_lang_id not in self.language_ids:\n            self.default_lang_id = self.language_ids[0]\n\n    @api.depends('language_ids')\n    def _compute_language_count(self):\n        for config in self:\n            config.language_count = len(self.language_ids)\n\n    @api.model\n    def get_values(self):\n        res = super(ResConfigSettings, self).get_values()\n        get_param = self.env['ir.config_parameter'].sudo().get_param\n        res.update(\n            auth_signup_uninvited='b2c' if get_param('auth_signup.allow_uninvited', 'False').lower() == 'true' else 'b2b',\n            has_google_analytics=get_param('website.has_google_analytics'),\n            has_google_analytics_dashboard=get_param('website.has_google_analytics_dashboard'),\n            has_google_maps=get_param('website.has_google_maps'),\n            google_maps_api_key=get_param('google_maps_api_key', default=''),\n        )\n        return res\n\n    def set_values(self):\n        if not self.user_has_groups('website.group_website_designer'):\n            raise AccessDenied()\n        super(ResConfigSettings, self).set_values()\n        set_param = self.env['ir.config_parameter'].sudo().set_param\n        set_param('auth_signup.allow_uninvited', repr(self.auth_signup_uninvited == 'b2c'))\n        set_param('website.has_google_analytics', self.has_google_analytics)\n        set_param('website.has_google_analytics_dashboard', self.has_google_analytics_dashboard)\n        set_param('website.has_google_maps', self.has_google_maps)\n        set_param('google_maps_api_key', (self.google_maps_api_key or '').strip())\n\n    @api.multi\n    def open_template_user(self):\n        action = self.env.ref('base.action_res_users').read()[0]\n        action['res_id'] = literal_eval(self.env['ir.config_parameter'].sudo().get_param('auth_signup.template_user_id', 'False'))\n        action['views'] = [[self.env.ref('base.view_users_form').id, 'form']]\n        return action\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "res_config_settings.py", "id": "2a5f8dc17d939da0be263a3997251717", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website/models/res_config_settings.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}