{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = \"sale.order.line\"\n\n    linked_line_id = fields.Many2one('sale.order.line', string='Linked Order Line', domain=\"[('order_id', '!=', order_id)]\", ondelete='cascade')\n    option_line_ids = fields.One2many('sale.order.line', 'linked_line_id', string='Options Linked')\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    @api.multi\n    def _cart_find_product_line(self, product_id=None, line_id=None, **kwargs):\n        self.ensure_one()\n        lines = super(SaleOrder, self)._cart_find_product_line(product_id, line_id)\n        if line_id:\n            return lines\n        linked_line_id = kwargs.get('linked_line_id', False)\n        optional_product_ids = set(kwargs.get('optional_product_ids', []))\n\n        lines = lines.filtered(lambda line: line.linked_line_id.id == linked_line_id)\n        if optional_product_ids:\n            \n            lines = lines.filtered(lambda line: optional_product_ids == set(line.mapped('option_line_ids.product_id.id')))\n        else:\n            lines = lines.filtered(lambda line: not line.option_line_ids)\n        return lines\n\n    @api.multi\n    def _cart_update(self, product_id=None, line_id=None, add_qty=0, set_qty=0, **kwargs):\n        self.ensure_one()\n        \n        value = super(SaleOrder, self)._cart_update(product_id, line_id, add_qty, set_qty, **kwargs)\n        SaleOrderLineSudo = self.env['sale.order.line'].sudo()\n        line = SaleOrderLineSudo.browse(value.get('line_id'))\n        \n        if kwargs.get('linked_line_id'):\n            linked_line = SaleOrderLineSudo.browse(kwargs['linked_line_id'])\n            line.write({\n                'linked_line_id': linked_line.id,\n                'name': line.name + \"\\n\" + _(\"Option for:\") + ' ' + linked_line.product_id.display_name,\n            })\n            linked_line.write({\"name\": linked_line.name + \"\\n\" + _(\"Option:\") + ' ' + line.product_id.display_name})\n\n        option_lines = self.order_line.filtered(lambda l: l.linked_line_id.id == line.id)\n        for option_line_id in option_lines:\n            super(SaleOrder, self)._cart_update(option_line_id.product_id.id, option_line_id.id, add_qty, set_qty, **kwargs)\n\n        value['option_ids'] = list(set(option_lines.ids))\n        return value\n", "comments": "    add set product quantity  add qty negative            coding  utf 8        part odoo  see license file full copyright licensing details     match lines chosen optional products existing lines    link product sales order ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\n\n\nclass SaleOrderLine(models.Model):\n    _inherit = \"sale.order.line\"\n\n    linked_line_id = fields.Many2one('sale.order.line', string='Linked Order Line', domain=\"[('order_id', '!=', order_id)]\", ondelete='cascade')\n    option_line_ids = fields.One2many('sale.order.line', 'linked_line_id', string='Options Linked')\n\n\nclass SaleOrder(models.Model):\n    _inherit = \"sale.order\"\n\n    @api.multi\n    def _cart_find_product_line(self, product_id=None, line_id=None, **kwargs):\n        self.ensure_one()\n        lines = super(SaleOrder, self)._cart_find_product_line(product_id, line_id)\n        if line_id:\n            return lines\n        linked_line_id = kwargs.get('linked_line_id', False)\n        optional_product_ids = set(kwargs.get('optional_product_ids', []))\n\n        lines = lines.filtered(lambda line: line.linked_line_id.id == linked_line_id)\n        if optional_product_ids:\n            # only match the lines with the same chosen optional products on the existing lines\n            lines = lines.filtered(lambda line: optional_product_ids == set(line.mapped('option_line_ids.product_id.id')))\n        else:\n            lines = lines.filtered(lambda line: not line.option_line_ids)\n        return lines\n\n    @api.multi\n    def _cart_update(self, product_id=None, line_id=None, add_qty=0, set_qty=0, **kwargs):\n        self.ensure_one()\n        \"\"\" Add or set product quantity, add_qty can be negative \"\"\"\n        value = super(SaleOrder, self)._cart_update(product_id, line_id, add_qty, set_qty, **kwargs)\n        SaleOrderLineSudo = self.env['sale.order.line'].sudo()\n        line = SaleOrderLineSudo.browse(value.get('line_id'))\n        # link a product to the sales order\n        if kwargs.get('linked_line_id'):\n            linked_line = SaleOrderLineSudo.browse(kwargs['linked_line_id'])\n            line.write({\n                'linked_line_id': linked_line.id,\n                'name': line.name + \"\\n\" + _(\"Option for:\") + ' ' + linked_line.product_id.display_name,\n            })\n            linked_line.write({\"name\": linked_line.name + \"\\n\" + _(\"Option:\") + ' ' + line.product_id.display_name})\n\n        option_lines = self.order_line.filtered(lambda l: l.linked_line_id.id == line.id)\n        for option_line_id in option_lines:\n            super(SaleOrder, self)._cart_update(option_line_id.product_id.id, option_line_id.id, add_qty, set_qty, **kwargs)\n\n        value['option_ids'] = list(set(option_lines.ids))\n        return value\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "sale_order.py", "id": "df7592ee30bc3cfde5e42cd3cc37ac27", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_sale_options/models/sale_order.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}