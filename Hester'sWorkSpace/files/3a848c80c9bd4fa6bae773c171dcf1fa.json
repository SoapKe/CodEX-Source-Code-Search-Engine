{"author": "wangshub", "code": "# -*- coding: utf-8 -*-\nfrom __future__ import print_function, division\nimport os\nimport time\nimport datetime\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport cv2\n\nVERSION = \"1.1.4\"\nscale = 0.25\n\ntemplate = cv2.imread('./resource/image/character.png')\ntemplate = cv2.resize(template, (0, 0), fx=scale, fy=scale)\ntemplate_size = template.shape[:2]\n\n\ndef search(img):\n    result = cv2.matchTemplate(img, template, cv2.TM_SQDIFF)\n    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\n\n    cv2.rectangle(\n        img,\n        (min_loc[0], min_loc[1]),\n        (min_loc[0] + template_size[1], min_loc[1] + template_size[0]),\n        (255, 0, 0),\n        4)\n    return img, min_loc[0] + template_size[1] / 2, min_loc[1] +  template_size[0]\n\n\ndef pull_screenshot():\n    filename = datetime.datetime.now().strftime(\"%H%M%S\") + '.png'\n    os.system('mv autojump.png {}'.format(filename))\n    os.system('adb shell screencap -p /sdcard/autojump.png')\n    os.system('adb pull /sdcard/autojump.png ./autojump.png')\n\n\ndef jump(distance):\n    press_time = distance * 1.35\n    press_time = int(press_time)\n    cmd = 'adb shell input swipe 320 410 320 410 ' + str(press_time)\n    print(cmd)\n    os.system(cmd)\n\n\ndef update_data():\n    global src_x, src_y\n\n    img = cv2.imread('./autojump.png')\n    img = cv2.resize(img, (0, 0), fx=scale, fy=scale)\n    img, src_x, src_y = search(img)\n    return img\n\n\nfig = plt.figure()\npull_screenshot()\nimg = update_data()\nim = plt.imshow(img, animated=True)\n\nupdate = True\n\n\ndef updatefig(*args):\n    global update\n\n    if update:\n        time.sleep(1)\n        pull_screenshot()\n        im.set_array(update_data())\n        update = False\n    return im,\n\n\ndef on_click(event):\n    global update    \n    global src_x, src_y\n    \n    dst_x, dst_y = event.xdata, event.ydata\n\n    distance = (dst_x - src_x)**2 + (dst_y - src_y)**2 \n    distance = (distance ** 0.5) / scale\n    print('distance = ', distance)\n    jump(distance)\n    update = True\n\n\nfig.canvas.mpl_connect('button_press_event', on_click)\nani = animation.FuncAnimation(fig, updatefig, interval=5, blit=True)\nplt.show()\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\nfrom __future__ import print_function, division\nimport os\nimport time\nimport datetime\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nimport cv2\n\nVERSION = \"1.1.4\"\nscale = 0.25\n\ntemplate = cv2.imread('./resource/image/character.png')\ntemplate = cv2.resize(template, (0, 0), fx=scale, fy=scale)\ntemplate_size = template.shape[:2]\n\n\ndef search(img):\n    result = cv2.matchTemplate(img, template, cv2.TM_SQDIFF)\n    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)\n\n    cv2.rectangle(\n        img,\n        (min_loc[0], min_loc[1]),\n        (min_loc[0] + template_size[1], min_loc[1] + template_size[0]),\n        (255, 0, 0),\n        4)\n    return img, min_loc[0] + template_size[1] / 2, min_loc[1] +  template_size[0]\n\n\ndef pull_screenshot():\n    filename = datetime.datetime.now().strftime(\"%H%M%S\") + '.png'\n    os.system('mv autojump.png {}'.format(filename))\n    os.system('adb shell screencap -p /sdcard/autojump.png')\n    os.system('adb pull /sdcard/autojump.png ./autojump.png')\n\n\ndef jump(distance):\n    press_time = distance * 1.35\n    press_time = int(press_time)\n    cmd = 'adb shell input swipe 320 410 320 410 ' + str(press_time)\n    print(cmd)\n    os.system(cmd)\n\n\ndef update_data():\n    global src_x, src_y\n\n    img = cv2.imread('./autojump.png')\n    img = cv2.resize(img, (0, 0), fx=scale, fy=scale)\n    img, src_x, src_y = search(img)\n    return img\n\n\nfig = plt.figure()\npull_screenshot()\nimg = update_data()\nim = plt.imshow(img, animated=True)\n\nupdate = True\n\n\ndef updatefig(*args):\n    global update\n\n    if update:\n        time.sleep(1)\n        pull_screenshot()\n        im.set_array(update_data())\n        update = False\n    return im,\n\n\ndef on_click(event):\n    global update    \n    global src_x, src_y\n    \n    dst_x, dst_y = event.xdata, event.ydata\n\n    distance = (dst_x - src_x)**2 + (dst_y - src_y)**2 \n    distance = (distance ** 0.5) / scale\n    print('distance = ', distance)\n    jump(distance)\n    update = True\n\n\nfig.canvas.mpl_connect('button_press_event', on_click)\nani = animation.FuncAnimation(fig, updatefig, interval=5, blit=True)\nplt.show()\n", "description": "python \u5fae\u4fe1\u300a\u8df3\u4e00\u8df3\u300b\u8f85\u52a9", "file_name": "wechat_jump.py", "id": "3a848c80c9bd4fa6bae773c171dcf1fa", "language": "Python", "project_name": "wechat_jump_game", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/wangshub-wechat_jump_game/wangshub-wechat_jump_game-748e4b9/wechat_jump.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:35:59Z", "url": "https://github.com/wangshub/wechat_jump_game", "wiki": true}