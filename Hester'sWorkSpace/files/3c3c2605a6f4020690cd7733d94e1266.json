{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport math\n\nfrom mock import Mock\n\nfrom sentry.utils.cursors import build_cursor, Cursor\n\n\ndef build_mock(**attrs):\n    obj = Mock()\n    for key, value in attrs.items():\n        setattr(obj, key, value)\n    obj.__repr__ = lambda x: repr(attrs)\n    return obj\n\n\ndef test_build_cursor():\n    event1 = build_mock(id=1.1, message='one')\n    event2 = build_mock(id=1.1, message='two')\n    event3 = build_mock(id=2.1, message='three')\n\n    results = [event1, event2, event3]\n\n    def item_key(key, for_prev=False):\n        return math.floor(key.id)\n\n    cursor_kwargs = {\n        'key': item_key,\n        'limit': 1,\n    }\n\n    cursor = build_cursor(results, **cursor_kwargs)\n    assert isinstance(cursor.next, Cursor)\n    assert cursor.next\n    assert isinstance(cursor.prev, Cursor)\n    assert not cursor.prev\n    assert list(cursor) == [event1]\n\n    cursor = build_cursor(results[1:], cursor=cursor.next, **cursor_kwargs)\n    assert isinstance(cursor.next, Cursor)\n    assert cursor.next\n    assert isinstance(cursor.prev, Cursor)\n    assert cursor.prev\n    assert list(cursor) == [event2]\n\n    cursor = build_cursor(results[2:], cursor=cursor.next, **cursor_kwargs)\n    assert isinstance(cursor.next, Cursor)\n    assert not cursor.next\n    assert isinstance(cursor.prev, Cursor)\n    assert cursor.prev\n    assert list(cursor) == [event3]\n", "comments": "", "content": "from __future__ import absolute_import\n\nimport math\n\nfrom mock import Mock\n\nfrom sentry.utils.cursors import build_cursor, Cursor\n\n\ndef build_mock(**attrs):\n    obj = Mock()\n    for key, value in attrs.items():\n        setattr(obj, key, value)\n    obj.__repr__ = lambda x: repr(attrs)\n    return obj\n\n\ndef test_build_cursor():\n    event1 = build_mock(id=1.1, message='one')\n    event2 = build_mock(id=1.1, message='two')\n    event3 = build_mock(id=2.1, message='three')\n\n    results = [event1, event2, event3]\n\n    def item_key(key, for_prev=False):\n        return math.floor(key.id)\n\n    cursor_kwargs = {\n        'key': item_key,\n        'limit': 1,\n    }\n\n    cursor = build_cursor(results, **cursor_kwargs)\n    assert isinstance(cursor.next, Cursor)\n    assert cursor.next\n    assert isinstance(cursor.prev, Cursor)\n    assert not cursor.prev\n    assert list(cursor) == [event1]\n\n    cursor = build_cursor(results[1:], cursor=cursor.next, **cursor_kwargs)\n    assert isinstance(cursor.next, Cursor)\n    assert cursor.next\n    assert isinstance(cursor.prev, Cursor)\n    assert cursor.prev\n    assert list(cursor) == [event2]\n\n    cursor = build_cursor(results[2:], cursor=cursor.next, **cursor_kwargs)\n    assert isinstance(cursor.next, Cursor)\n    assert not cursor.next\n    assert isinstance(cursor.prev, Cursor)\n    assert cursor.prev\n    assert list(cursor) == [event3]\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_cursors.py", "id": "3c3c2605a6f4020690cd7733d94e1266", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_cursors.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}