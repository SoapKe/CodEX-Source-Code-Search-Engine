{"author": "tqdm", "code": "from __future__ import print_function\nfrom time import sleep\nfrom tqdm import tqdm\nfrom multiprocessing import Pool, freeze_support, RLock\n\n\nL = list(range(9))\n\n\ndef progresser(n):\n    interval = 0.001 / (n + 2)\n    total = 5000\n    text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n    for _ in tqdm(range(total), desc=text, position=n):\n        sleep(interval)\n\n\nif __name__ == '__main__':\n    freeze_support()  \n    p = Pool(len(L),\n             initializer=tqdm.set_lock,\n             initargs=(RLock(),))\n    p.map(progresser, L)\n    print(\"\\n\" * (len(L) - 2))\n\n    \n    p = Pool(len(L))\n    p.map(progresser, L)\n    print(\"\\n\" * (len(L) - 2))\n", "comments": "  windows support    alternatively  unix  use default internal lock ", "content": "from __future__ import print_function\nfrom time import sleep\nfrom tqdm import tqdm\nfrom multiprocessing import Pool, freeze_support, RLock\n\n\nL = list(range(9))\n\n\ndef progresser(n):\n    interval = 0.001 / (n + 2)\n    total = 5000\n    text = \"#{}, est. {:<04.2}s\".format(n, interval * total)\n    for _ in tqdm(range(total), desc=text, position=n):\n        sleep(interval)\n\n\nif __name__ == '__main__':\n    freeze_support()  # for Windows support\n    p = Pool(len(L),\n             initializer=tqdm.set_lock,\n             initargs=(RLock(),))\n    p.map(progresser, L)\n    print(\"\\n\" * (len(L) - 2))\n\n    # alternatively, on UNIX, just use the default internal lock\n    p = Pool(len(L))\n    p.map(progresser, L)\n    print(\"\\n\" * (len(L) - 2))\n", "description": "A fast, extensible progress bar for Python and CLI", "file_name": "parallel_bars.py", "id": "1bf743f4a1fe28b02067a99e35d7716d", "language": "Python", "project_name": "tqdm", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tqdm-tqdm/tqdm-tqdm-d861caa/examples/parallel_bars.py", "save_time": "", "source": "", "update_at": "2018-03-18T17:06:37Z", "url": "https://github.com/tqdm/tqdm", "wiki": true}