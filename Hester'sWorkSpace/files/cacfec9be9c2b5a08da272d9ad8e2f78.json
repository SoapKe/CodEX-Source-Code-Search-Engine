{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .brightcove import BrightcoveNewIE\nfrom ..utils import (\n    int_or_none,\n    parse_age_limit,\n    smuggle_url,\n    unescapeHTML,\n)\n\n\nclass VrakIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vrak\\.tv/videos\\?.*?\\btarget=(?P<id>[\\d.]+)'\n    _TEST = {\n        'url': 'http://www.vrak.tv/videos?target=1.2306782&filtre=emission&id=1.1806721',\n        'info_dict': {\n            'id': '5345661243001',\n            'ext': 'mp4',\n            'title': 'Ob\u00e9sit\u00e9, film de hockey et Roseline Filion',\n            'timestamp': 1488492126,\n            'upload_date': '20170302',\n            'uploader_id': '2890187628001',\n            'creator': 'VRAK.TV',\n            'age_limit': 8,\n            'series': 'ALT (Actualit\u00e9 L\u00e9g\u00e8rement Tordue)',\n            'episode': 'Ob\u00e9sit\u00e9, film de hockey et Roseline Filion',\n            'tags': list,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }\n    BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/2890187628001/default_default/index.html?videoId=%s'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            r'<h\\d\\b[^>]+\\bclass=[\"\\']videoTitle[\"\\'][^>]*>([^<]+)',\n            webpage, 'title', default=None) or self._og_search_title(webpage)\n\n        content = self._parse_json(\n            self._search_regex(\n                r'data-player-options-content=([\"\\'])(?P<content>{.+?})\\1',\n                webpage, 'content', default='{}', group='content'),\n            video_id, transform_source=unescapeHTML)\n\n        ref_id = content.get('refId') or self._search_regex(\n            r'refId&quot;:&quot;([^&]+)&quot;', webpage, 'ref id')\n\n        brightcove_id = self._search_regex(\n            r % re.escape(ref_id), webpage, 'brightcove id')\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': BrightcoveNewIE.ie_key(),\n            'url': smuggle_url(\n                self.BRIGHTCOVE_URL_TEMPLATE % brightcove_id,\n                {'geo_countries': ['CA']}),\n            'id': brightcove_id,\n            'description': content.get('description'),\n            'creator': content.get('brand'),\n            'age_limit': parse_age_limit(content.get('rating')),\n            'series': content.get('showName') or content.get(\n                'episodeName'),  \n            'season_number': int_or_none(content.get('seasonNumber')),\n            'episode': title,\n            'episode_number': int_or_none(content.get('episodeNumber')),\n            'tags': content.get('tags', []),\n        }\n", "comments": "(?x)\n                java\\.lang\\.String\\s+value\\s*=\\s*[\"']brightcove\\.article\\.\\d+\\.%s\n                [^>]*\n                java\\.lang\\.String\\s+value\\s*=\\s*[\"'](\\d+)\n            \n \n# coding: utf-8\n# this is intentional\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .brightcove import BrightcoveNewIE\nfrom ..utils import (\n    int_or_none,\n    parse_age_limit,\n    smuggle_url,\n    unescapeHTML,\n)\n\n\nclass VrakIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vrak\\.tv/videos\\?.*?\\btarget=(?P<id>[\\d.]+)'\n    _TEST = {\n        'url': 'http://www.vrak.tv/videos?target=1.2306782&filtre=emission&id=1.1806721',\n        'info_dict': {\n            'id': '5345661243001',\n            'ext': 'mp4',\n            'title': 'Ob\u00e9sit\u00e9, film de hockey et Roseline Filion',\n            'timestamp': 1488492126,\n            'upload_date': '20170302',\n            'uploader_id': '2890187628001',\n            'creator': 'VRAK.TV',\n            'age_limit': 8,\n            'series': 'ALT (Actualit\u00e9 L\u00e9g\u00e8rement Tordue)',\n            'episode': 'Ob\u00e9sit\u00e9, film de hockey et Roseline Filion',\n            'tags': list,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }\n    BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/2890187628001/default_default/index.html?videoId=%s'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(\n            r'<h\\d\\b[^>]+\\bclass=[\"\\']videoTitle[\"\\'][^>]*>([^<]+)',\n            webpage, 'title', default=None) or self._og_search_title(webpage)\n\n        content = self._parse_json(\n            self._search_regex(\n                r'data-player-options-content=([\"\\'])(?P<content>{.+?})\\1',\n                webpage, 'content', default='{}', group='content'),\n            video_id, transform_source=unescapeHTML)\n\n        ref_id = content.get('refId') or self._search_regex(\n            r'refId&quot;:&quot;([^&]+)&quot;', webpage, 'ref id')\n\n        brightcove_id = self._search_regex(\n            r'''(?x)\n                java\\.lang\\.String\\s+value\\s*=\\s*[\"']brightcove\\.article\\.\\d+\\.%s\n                [^>]*\n                java\\.lang\\.String\\s+value\\s*=\\s*[\"'](\\d+)\n            ''' % re.escape(ref_id), webpage, 'brightcove id')\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': BrightcoveNewIE.ie_key(),\n            'url': smuggle_url(\n                self.BRIGHTCOVE_URL_TEMPLATE % brightcove_id,\n                {'geo_countries': ['CA']}),\n            'id': brightcove_id,\n            'description': content.get('description'),\n            'creator': content.get('brand'),\n            'age_limit': parse_age_limit(content.get('rating')),\n            'series': content.get('showName') or content.get(\n                'episodeName'),  # this is intentional\n            'season_number': int_or_none(content.get('seasonNumber')),\n            'episode': title,\n            'episode_number': int_or_none(content.get('episodeNumber')),\n            'tags': content.get('tags', []),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vrak.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vrak.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}