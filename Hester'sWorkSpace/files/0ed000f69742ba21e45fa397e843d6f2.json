{"author": "tensorflow", "code": "from __future__ import print_function\n\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, name='input')\ny_ = tf.placeholder(tf.float32, name='target')\n\nW = tf.Variable(5., name='W')\nb = tf.Variable(3., name='b')\n\ny = x * W + b\ny = tf.identity(y, name='output')\n\nloss = tf.reduce_mean(tf.square(y - y_))\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)\ntrain_op = optimizer.minimize(loss, name='train')\n\ninit = tf.global_variables_initializer()\n\n\n\nsaver_def = tf.train.Saver().as_saver_def()\n\nprint('Operation to initialize variables:       ', init.name)\nprint('Tensor to feed as input data:            ', x.name)\nprint('Tensor to feed as training targets:      ', y_.name)\nprint('Tensor to fetch as prediction:           ', y.name)\nprint('Operation to train one step:             ', train_op.name)\nprint('Tensor to be fed for checkpoint filename:', saver_def.filename_tensor_name)\nprint('Operation to save a checkpoint:          ', saver_def.save_tensor_name)\nprint('Operation to restore a checkpoint:       ', saver_def.restore_op_name)\nprint('Tensor to read value of W                ', W.value().name)\nprint('Tensor to read value of b                ', b.value().name)\n\nwith open('graph.pb', 'w') as f:\n  f.write(tf.get_default_graph().as_graph_def().SerializeToString())\n", "comments": "  creating tf train saver adds operations graph save    restore variables checkpoints  ", "content": "from __future__ import print_function\n\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, name='input')\ny_ = tf.placeholder(tf.float32, name='target')\n\nW = tf.Variable(5., name='W')\nb = tf.Variable(3., name='b')\n\ny = x * W + b\ny = tf.identity(y, name='output')\n\nloss = tf.reduce_mean(tf.square(y - y_))\noptimizer = tf.train.GradientDescentOptimizer(learning_rate=0.01)\ntrain_op = optimizer.minimize(loss, name='train')\n\ninit = tf.global_variables_initializer()\n\n# Creating a tf.train.Saver adds operations to the graph to save and\n# restore variables from checkpoints.\nsaver_def = tf.train.Saver().as_saver_def()\n\nprint('Operation to initialize variables:       ', init.name)\nprint('Tensor to feed as input data:            ', x.name)\nprint('Tensor to feed as training targets:      ', y_.name)\nprint('Tensor to fetch as prediction:           ', y.name)\nprint('Operation to train one step:             ', train_op.name)\nprint('Tensor to be fed for checkpoint filename:', saver_def.filename_tensor_name)\nprint('Operation to save a checkpoint:          ', saver_def.save_tensor_name)\nprint('Operation to restore a checkpoint:       ', saver_def.restore_op_name)\nprint('Tensor to read value of W                ', W.value().name)\nprint('Tensor to read value of b                ', b.value().name)\n\nwith open('graph.pb', 'w') as f:\n  f.write(tf.get_default_graph().as_graph_def().SerializeToString())\n", "description": "Models and examples built with TensorFlow", "file_name": "create_graph.py", "id": "0ed000f69742ba21e45fa397e843d6f2", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/samples/languages/java/training/model/create_graph.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}