{"author": "spotify", "code": " -*- coding: utf-8 -*-\n\n Copyright 2012-2015 Spotify AB\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\nimport random as rnd\nimport time\n\nimport luigi\n\n\nclass Configuration(luigi.Task):\n    seed = luigi.IntParameter()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget('/tmp/Config_%d.txt' % self.seed)\n\n    def run(self):\n        time.sleep(5)\n        rnd.seed(self.seed)\n\n        result = ','.join(\n            [str(x) for x in rnd.sample(list(range(300)), rnd.randint(7, 25))])\n        with self.output().open('w') as f:\n            f.write(result)\n\n\nclass Data(luigi.Task):\n    magic_number = luigi.IntParameter()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget('/tmp/Data_%d.txt' % self.magic_number)\n\n    def run(self):\n        time.sleep(1)\n        with self.output().open('w') as f:\n            f.write('%s' % self.magic_number)\n\n\nclass Dynamic(luigi.Task):\n    seed = luigi.IntParameter(default=1)\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget('/tmp/Dynamic_%d.txt' % self.seed)\n\n    def run(self):\n         This could be done using regular requires method\n        config = self.clone(Configuration)\n        yield config\n\n        with config.output().open() as f:\n            data = [int(x) for x in f.read().split(',')]\n\n         ... but not this\n        data_dependent_deps = [Data(magic_number=x) for x in data]\n        yield data_dependent_deps\n\n        with self.output().open('w') as f:\n            f.write('Tada!')\n\n\nif __name__ == '__main__':\n    luigi.run()\n", "comments": "            returns target output task          in case  successful execution task create file local filesystem            return  target output task           rtype  object ( py class  luigi target target )                     return luigi localtarget(  tmp config  txt    self seed)      def run(self)          time sleep(5)         rnd seed(self seed)          result       join(              str(x) x rnd sample(list(range(300))  rnd randint(7  25)) )         self output() open( w ) f              f write(result)   class data(luigi task)      magic number   luigi intparameter()      def output(self)                      returns target output task          in case  successful execution task create file local filesystem            return  target output task           rtype  object ( py class  luigi target target )                     return luigi localtarget(  tmp data  txt    self magic number)      def run(self)          time sleep(1)         self output() open( w ) f              f write(     self magic number)   class dynamic(luigi task)      seed   luigi intparameter(default 1)      def output(self)                      returns target output task          in case  successful execution task create file local filesystem            return  target output task           rtype  object ( py class  luigi target target )                    coding  utf 8           copyright 2012 2015 spotify ab       licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license       http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license        this could done using regular requires method        ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright 2012-2015 Spotify AB\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n\nimport random as rnd\nimport time\n\nimport luigi\n\n\nclass Configuration(luigi.Task):\n    seed = luigi.IntParameter()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget('/tmp/Config_%d.txt' % self.seed)\n\n    def run(self):\n        time.sleep(5)\n        rnd.seed(self.seed)\n\n        result = ','.join(\n            [str(x) for x in rnd.sample(list(range(300)), rnd.randint(7, 25))])\n        with self.output().open('w') as f:\n            f.write(result)\n\n\nclass Data(luigi.Task):\n    magic_number = luigi.IntParameter()\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget('/tmp/Data_%d.txt' % self.magic_number)\n\n    def run(self):\n        time.sleep(1)\n        with self.output().open('w') as f:\n            f.write('%s' % self.magic_number)\n\n\nclass Dynamic(luigi.Task):\n    seed = luigi.IntParameter(default=1)\n\n    def output(self):\n        \"\"\"\n        Returns the target output for this task.\n        In this case, a successful execution of this task will create a file on the local filesystem.\n\n        :return: the target output for this task.\n        :rtype: object (:py:class:`luigi.target.Target`)\n        \"\"\"\n        return luigi.LocalTarget('/tmp/Dynamic_%d.txt' % self.seed)\n\n    def run(self):\n        # This could be done using regular requires method\n        config = self.clone(Configuration)\n        yield config\n\n        with config.output().open() as f:\n            data = [int(x) for x in f.read().split(',')]\n\n        # ... but not this\n        data_dependent_deps = [Data(magic_number=x) for x in data]\n        yield data_dependent_deps\n\n        with self.output().open('w') as f:\n            f.write('Tada!')\n\n\nif __name__ == '__main__':\n    luigi.run()\n", "description": "Luigi is a Python module that helps you build complex pipelines of batch jobs. It handles dependency resolution, workflow management, visualization etc. It also comes with Hadoop support built in. ", "file_name": "dynamic_requirements.py", "id": "bab96edf7d6e06a7d7d5e9fe877e434b", "language": "Python", "project_name": "luigi", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/spotify-luigi/spotify-luigi-3cf763d/examples/dynamic_requirements.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:09:25Z", "url": "https://github.com/spotify/luigi", "wiki": false}