{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry.constants import FILTER_MASK\nfrom sentry.testutils import TestCase\nfrom sentry.utils.data_scrubber import SensitiveDataFilter\n\nVARS = {\n    'foo': 'bar',\n    'password': 'hello',\n    'the_secret': 'hello',\n    'a_password_here': 'hello',\n    'api_key': 'secret_key',\n    'apiKey': 'secret_key',\n}\n\nPUBLIC_KEY = \"\"\"-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA6A6TQjlPyMurLh/igZY4\nizA9sJgeZ7s5+nGydO4AI9k33gcy2DObZuadWRMnDwc3uH/qoAPw/mo3KOcgEtxU\nxdwiQeATa3HVPcQDCQiKm8xIG2Ny0oUbR0IFNvClvx7RWnPEMk05CuvsL0AA3eH5\nxn02Yg0JTLgZEtUT3whwFm8CAwEAAQ==\n-----END PUBLIC KEY-----\"\"\"\n\nPRIVATE_KEY = \"\"\"-----BEGIN PRIVATE KEY-----\nMIIJRAIBADANBgkqhkiG9w0BAQEFAASCCS4wggkqAgEAAoICAQCoNFY4P+EeIXl0\nmLpO+i8uFqAaEFQ8ZX2VVpA13kNEHuiWXC3HPlQ+7G+O3XmAsO+Wf/xY6pCSeQ8h\nmLpO+i8uFqAaEFQ8ZX2VVpA13kNEHuiWXC3HPlQ+7G+O3XmAsO+Wf/xY6pCSeQ8h\n-----END PRIVATE KEY-----\"\"\"\n\nENCRYPTED_PRIVATE_KEY = \"\"\"-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIJjjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIWVhErdQOFVoCAggA\nIrlYQUV1ig4U3viYh1Y8viVvRlANKICvgj4faYNH36UterkfDjzMonb/cXNeJEOS\nYgorM2Pfuec5vtPRPKd88+Ds/ktIlZhjJwnJjHQMX+lSw5t0/juna2sLH2dpuAbi\nPSk=\n-----END ENCRYPTED PRIVATE KEY-----\"\"\"\n\nRSA_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+wn9Iu+zgamKDUu22xc45F2gdwM04rTITlZgjAs6U1zcvOzGxk8mWJD5MqFWwAtF\nzN87YGV0VMTG6ehxnkI4Fg6i0JPU3QIDAQABAoICAQCoCPjlYrODRU+vd2YeU/gM\nTHd+9FBxiHLGXNKhG/FRSyREXEt+NyYIf/0cyByc9tNksat794ddUqnLOg0vwSkv\n-----END RSA PRIVATE KEY-----\"\"\"\n\n\nclass SensitiveDataFilterTest(TestCase):\n    def _check_vars_sanitized(self, vars, proc):\n        \"\"\"\n        Helper to check that keys have been sanitized.\n        \"\"\"\n        assert 'foo' in vars\n        assert vars['foo'] == 'bar'\n        assert 'password' in vars\n        assert vars['password'] == FILTER_MASK\n        assert 'the_secret' in vars\n        assert vars['the_secret'] == FILTER_MASK\n        assert 'a_password_here' in vars\n        assert vars['a_password_here'] == FILTER_MASK\n        assert 'api_key' in vars\n        assert vars['api_key'] == FILTER_MASK\n        assert 'apiKey' in vars\n        assert vars['apiKey'] == FILTER_MASK\n\n    def test_stacktrace(self):\n        data = {\n            'sentry.interfaces.Stacktrace': {\n                'frames': [{\n                    'vars': VARS\n                }],\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Stacktrace' in data\n        stack = data['sentry.interfaces.Stacktrace']\n        assert 'frames' in stack\n        assert len(stack['frames']) == 1\n        frame = stack['frames'][0]\n        assert 'vars' in frame\n        self._check_vars_sanitized(frame['vars'], proc)\n\n    def test_http(self):\n        data = {\n            'sentry.interfaces.Http': {\n                'data': VARS,\n                'env': VARS,\n                'headers': list(VARS.items()),\n                'cookies': VARS,\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Http' in data\n        http = data['sentry.interfaces.Http']\n        for n in ('data', 'env', 'cookies'):\n            assert n in http\n            self._check_vars_sanitized(http[n], proc)\n\n        assert 'headers' in http\n        self._check_vars_sanitized(dict(http['headers']), proc)\n\n    def test_user(self):\n        data = {\n            'sentry.interfaces.User': {\n                'username': 'secret',\n                'data': VARS,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.User' in data\n        assert data['sentry.interfaces.User']['username'] == 'secret'\n        self._check_vars_sanitized(data['sentry.interfaces.User']['data'], proc)\n\n    def test_extra(self):\n        data = {'extra': VARS}\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'extra' in data\n        self._check_vars_sanitized(data['extra'], proc)\n\n    def test_contexts(self):\n        data = {\n            'contexts': {\n                'secret': VARS,\n                'biz': VARS,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'contexts' in data\n        assert 'secret' in data['contexts']\n        assert 'biz' in data['contexts']\n        self._check_vars_sanitized(data['contexts']['secret'], proc)\n        self._check_vars_sanitized(data['contexts']['biz'], proc)\n\n    def test_querystring_as_string(self):\n        data = {\n            'sentry.interfaces.Http': {\n                'query_string':\n                'foo=bar&password=hello&the_secret=hello'\n                '&a_password_here=hello&api_key=secret_key',\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Http' in data\n        http = data['sentry.interfaces.Http']\n        assert http['query_string'] == (\n            'foo=bar&password=%(m)s&the_secret=%(m)s'\n            '&a_password_here=%(m)s&api_key=%(m)s' % {\n                'm': FILTER_MASK\n            }\n        )\n\n    def test_querystring_as_string_with_partials(self):\n        data = {\n            'sentry.interfaces.Http': {\n                'query_string': 'foo=bar&password&baz=bar',\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Http' in data\n        http = data['sentry.interfaces.Http']\n        assert http['query_string'] == 'foo=bar&password&baz=bar'\n\n    def test_sanitize_additional_sensitive_fields(self):\n        additional_sensitive_dict = {'fieldy_field': 'value', 'moar_other_field': 'another value'}\n        data = {'extra': dict(list(VARS.items()) + list(additional_sensitive_dict.items()))}\n\n        proc = SensitiveDataFilter(additional_sensitive_dict.keys())\n        proc.apply(data)\n\n        for field in additional_sensitive_dict.keys():\n            assert data['extra'][field] == FILTER_MASK\n\n        self._check_vars_sanitized(data['extra'], proc)\n\n    def test_sanitize_credit_card(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '4571234567890111')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_amex(self):\n        \n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '378282246310005')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_discover(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '6011111111111117')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_visa(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '4111111111111111')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_mastercard(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '5555555555554444')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_within_value(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', \"'4571234567890111'\")\n        assert result == FILTER_MASK\n\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', \"foo 4571234567890111\")\n        assert result == FILTER_MASK\n\n    def test_does_not_sanitize_timestamp_looks_like_card(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '1453843029218310')\n        assert result == '1453843029218310'\n\n    def test_sanitize_url(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', 'pg://matt:pass@localhost/1')\n        assert result == 'pg://matt:%s@localhost/1' % FILTER_MASK\n        result = proc.sanitize('foo', \"foo 'redis://redis:foo@localhost:6379/0' bar\")\n        assert result == \"foo 'redis://redis:%s@localhost:6379/0' bar\" % FILTER_MASK\n        result = proc.sanitize('foo', \"'redis://redis:foo@localhost:6379/0'\")\n        assert result == \"'redis://redis:%s@localhost:6379/0'\" % FILTER_MASK\n        result = proc.sanitize('foo', \"foo redis://redis:foo@localhost:6379/0 bar\")\n        assert result == \"foo redis://redis:%s@localhost:6379/0 bar\" % FILTER_MASK\n        result = proc.sanitize(\n            'foo', \"foo redis://redis:foo@localhost:6379/0 bar pg://matt:foo@localhost/1\"\n        )\n        assert result == \"foo redis://redis:%s@localhost:6379/0 bar pg://matt:%s@localhost/1\" % (\n            FILTER_MASK, FILTER_MASK\n        )\n        \n        # This url specifically if passed through urlunsplit(urlsplit()),\n        \n        result = proc.sanitize('foo', 'postgres:///path')\n        assert result == 'postgres:///path'\n        \n        result = proc.sanitize(\n            'foo',\n            '{\"a\":\"https://localhost\",\"b\":\"foo@localhost\",\"c\":\"pg://matt:pass@localhost/1\",\"d\":\"lol\"}'\n        )\n        assert result == '{\"a\":\"https://localhost\",\"b\":\"foo@localhost\",\"c\":\"pg://matt:%s@localhost/1\",\"d\":\"lol\"}' % FILTER_MASK\n\n    def test_sanitize_http_body(self):\n        data = {\n            'sentry.interfaces.Http': {\n                'data': '{\"email\":\"zzzz@gmail.com\",\"password\":\"zzzzz\"}',\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert 'sentry.interfaces.Http' in data\n        http = data['sentry.interfaces.Http']\n        assert http['data'] == FILTER_MASK\n\n    def test_does_not_fail_on_non_string(self):\n        data = {\n            'extra': {\n                'foo': 1,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'foo': 1}\n\n    def test_does_sanitize_public_key(self):\n        data = {\n            'extra': {\n                's': PUBLIC_KEY,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_does_sanitize_private_key(self):\n        data = {\n            'extra': {\n                's': PRIVATE_KEY,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_does_sanitize_encrypted_private_key(self):\n        data = {\n            'extra': {\n                's': ENCRYPTED_PRIVATE_KEY,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_does_sanitize_rsa_private_key(self):\n        data = {\n            'extra': {\n                's': RSA_PRIVATE_KEY,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_does_sanitize_social_security_number(self):\n        data = {\n            'extra': {\n                's': '123-45-6789',\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_exclude_fields_on_field_name(self):\n        data = {\n            'extra': {\n                'password': '123-45-6789',\n            },\n        }\n\n        proc = SensitiveDataFilter(exclude_fields=['password'])\n        proc.apply(data)\n        assert data['extra'] == {'password': '123-45-6789'}\n\n    def test_explicit_fields(self):\n        data = {\n            'extra': {\n                'mystuff': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=['mystuff'])\n        proc.apply(data)\n        assert data['extra']['mystuff'] == FILTER_MASK\n\n    def test_explicit_fields_case_insensitive(self):\n        data = {\n            'extra': {\n                'myStuff': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=['myStuff'])\n        proc.apply(data)\n        assert data['extra']['myStuff'] == FILTER_MASK\n\n        data = {\n            'extra': {\n                'MYSTUFF': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=['myStuff'])\n        proc.apply(data)\n        assert data['extra']['MYSTUFF'] == FILTER_MASK\n\n        data = {\n            'extra': {\n                'mystuff': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=['myStuff'])\n        proc.apply(data)\n        assert data['extra']['mystuff'] == FILTER_MASK\n\n    def test_exclude_fields_on_field_value(self):\n        data = {\n            'extra': {\n                'foobar': '123-45-6789',\n            },\n        }\n\n        proc = SensitiveDataFilter(exclude_fields=['foobar'])\n        proc.apply(data)\n        assert data['extra'] == {'foobar': '123-45-6789'}\n\n    def test_empty_field(self):\n        data = {\n            'extra': {\n                'foobar': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=[''])\n        proc.apply(data)\n        assert data['extra'] == {'foobar': 'xxx'}\n\n    def test_should_have_mysql_pwd_as_a_default(self):\n        proc = SensitiveDataFilter(include_defaults=True)\n        assert proc.sanitize('MYSQL_PWD', 'the one') == FILTER_MASK\n        assert proc.sanitize('mysql_pwd', 'the two') == FILTER_MASK\n\n    def test_authorization_scrubbing(self):\n        proc = SensitiveDataFilter(include_defaults=True)\n        assert proc.sanitize('authorization', 'foobar') == FILTER_MASK\n        assert proc.sanitize('auth', 'foobar') == FILTER_MASK\n        assert proc.sanitize('auXth', 'foobar') == 'foobar'\n\n    def test_doesnt_scrub_not_scrubbed(self):\n        proc = SensitiveDataFilter(include_defaults=True)\n        assert proc.sanitize('is_authenticated', 'foobar') == FILTER_MASK\n        assert proc.sanitize('is_authenticated', 'null') == 'null'\n        assert proc.sanitize('is_authenticated', True) is True\n\n    def test_csp_blocked_uri(self):\n        data = {\n            'sentry.interfaces.Csp': {\n                'blocked_uri': 'https://example.com/?foo=4571234567890111&bar=baz',\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Csp' in data\n        csp = data['sentry.interfaces.Csp']\n        assert csp['blocked_uri'] == 'https://example.com/?foo=[Filtered]&bar=baz'\n", "comments": "        begin public key      miicijanbgkqhkig9w0baqefaaocag8amiiccgkcagea6a6tqjlpymurlh igzy4 iza9sjgez7s5 ngydo4ai9k33gcy2dobzuadwrmndwc3uh qoapw mo3kocgetxu xdwiqeata3hvpcqdcqikm8xig2ny0oubr0ifnvclvx7rwnpemk05cuvsl0aa3eh5 xn02yg0jtlgzetut3whwfm8caweaaq        end public key          private key           begin private key      miijraibadanbgkqhkig9w0baqefaasccs4wggkqageaaoicaqconfy4p eeixl0 mlpo i8ufqaaefq8zx2vvpa13knehuiwxc3hplq 7g o3xmaso wf xy6pcseq8h mlpo i8ufqaaefq8zx2vvpa13knehuiwxc3hplq 7g o3xmaso wf xy6pcseq8h      end private key          encrypted private key           begin encrypted private key      miijjjbabgkqhkig9w0bbq0wmzabbgkqhkig9w0bbqwwdgqiwvherdqofvocagga irlyquv1ig4u3viyh1y8vivvrlankicvgj4faynh36uterkfdjzmonb cxnejeos ygorm2pfuec5vtprpkd88 ds ktilzhjjwnjjhqmx lsw5t0 juna2slh2dpuabi psk       end encrypted private key          rsa private key           begin rsa private key       wn9iu zgamkduu22xc45f2gdwm04rtitlzgjas6u1zcvozgxk8mwjd5mqfwwatf zn87ygv0vmtg6ehxnki4fg6i0jpu3qidaqabaoicaqcocpjlyrodru vd2yeu gm thd 9fbxihlgxnkhg frsyrexet nyyif 0cybyc9tnksat794dduqnlog0vwskv      end rsa private key           class sensitivedatafiltertest(testcase)      def  check vars sanitized(self  vars  proc)                      helper check keys sanitized                     coding  utf 8        amex numbers 15 digits  16    make sure mess url     this url specifically passed urlunsplit(urlsplit())     change value     don overly eager within json strings catch right field  ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom sentry.constants import FILTER_MASK\nfrom sentry.testutils import TestCase\nfrom sentry.utils.data_scrubber import SensitiveDataFilter\n\nVARS = {\n    'foo': 'bar',\n    'password': 'hello',\n    'the_secret': 'hello',\n    'a_password_here': 'hello',\n    'api_key': 'secret_key',\n    'apiKey': 'secret_key',\n}\n\nPUBLIC_KEY = \"\"\"-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA6A6TQjlPyMurLh/igZY4\nizA9sJgeZ7s5+nGydO4AI9k33gcy2DObZuadWRMnDwc3uH/qoAPw/mo3KOcgEtxU\nxdwiQeATa3HVPcQDCQiKm8xIG2Ny0oUbR0IFNvClvx7RWnPEMk05CuvsL0AA3eH5\nxn02Yg0JTLgZEtUT3whwFm8CAwEAAQ==\n-----END PUBLIC KEY-----\"\"\"\n\nPRIVATE_KEY = \"\"\"-----BEGIN PRIVATE KEY-----\nMIIJRAIBADANBgkqhkiG9w0BAQEFAASCCS4wggkqAgEAAoICAQCoNFY4P+EeIXl0\nmLpO+i8uFqAaEFQ8ZX2VVpA13kNEHuiWXC3HPlQ+7G+O3XmAsO+Wf/xY6pCSeQ8h\nmLpO+i8uFqAaEFQ8ZX2VVpA13kNEHuiWXC3HPlQ+7G+O3XmAsO+Wf/xY6pCSeQ8h\n-----END PRIVATE KEY-----\"\"\"\n\nENCRYPTED_PRIVATE_KEY = \"\"\"-----BEGIN ENCRYPTED PRIVATE KEY-----\nMIIJjjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIWVhErdQOFVoCAggA\nIrlYQUV1ig4U3viYh1Y8viVvRlANKICvgj4faYNH36UterkfDjzMonb/cXNeJEOS\nYgorM2Pfuec5vtPRPKd88+Ds/ktIlZhjJwnJjHQMX+lSw5t0/juna2sLH2dpuAbi\nPSk=\n-----END ENCRYPTED PRIVATE KEY-----\"\"\"\n\nRSA_PRIVATE_KEY = \"\"\"-----BEGIN RSA PRIVATE KEY-----\n+wn9Iu+zgamKDUu22xc45F2gdwM04rTITlZgjAs6U1zcvOzGxk8mWJD5MqFWwAtF\nzN87YGV0VMTG6ehxnkI4Fg6i0JPU3QIDAQABAoICAQCoCPjlYrODRU+vd2YeU/gM\nTHd+9FBxiHLGXNKhG/FRSyREXEt+NyYIf/0cyByc9tNksat794ddUqnLOg0vwSkv\n-----END RSA PRIVATE KEY-----\"\"\"\n\n\nclass SensitiveDataFilterTest(TestCase):\n    def _check_vars_sanitized(self, vars, proc):\n        \"\"\"\n        Helper to check that keys have been sanitized.\n        \"\"\"\n        assert 'foo' in vars\n        assert vars['foo'] == 'bar'\n        assert 'password' in vars\n        assert vars['password'] == FILTER_MASK\n        assert 'the_secret' in vars\n        assert vars['the_secret'] == FILTER_MASK\n        assert 'a_password_here' in vars\n        assert vars['a_password_here'] == FILTER_MASK\n        assert 'api_key' in vars\n        assert vars['api_key'] == FILTER_MASK\n        assert 'apiKey' in vars\n        assert vars['apiKey'] == FILTER_MASK\n\n    def test_stacktrace(self):\n        data = {\n            'sentry.interfaces.Stacktrace': {\n                'frames': [{\n                    'vars': VARS\n                }],\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Stacktrace' in data\n        stack = data['sentry.interfaces.Stacktrace']\n        assert 'frames' in stack\n        assert len(stack['frames']) == 1\n        frame = stack['frames'][0]\n        assert 'vars' in frame\n        self._check_vars_sanitized(frame['vars'], proc)\n\n    def test_http(self):\n        data = {\n            'sentry.interfaces.Http': {\n                'data': VARS,\n                'env': VARS,\n                'headers': list(VARS.items()),\n                'cookies': VARS,\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Http' in data\n        http = data['sentry.interfaces.Http']\n        for n in ('data', 'env', 'cookies'):\n            assert n in http\n            self._check_vars_sanitized(http[n], proc)\n\n        assert 'headers' in http\n        self._check_vars_sanitized(dict(http['headers']), proc)\n\n    def test_user(self):\n        data = {\n            'sentry.interfaces.User': {\n                'username': 'secret',\n                'data': VARS,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.User' in data\n        assert data['sentry.interfaces.User']['username'] == 'secret'\n        self._check_vars_sanitized(data['sentry.interfaces.User']['data'], proc)\n\n    def test_extra(self):\n        data = {'extra': VARS}\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'extra' in data\n        self._check_vars_sanitized(data['extra'], proc)\n\n    def test_contexts(self):\n        data = {\n            'contexts': {\n                'secret': VARS,\n                'biz': VARS,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'contexts' in data\n        assert 'secret' in data['contexts']\n        assert 'biz' in data['contexts']\n        self._check_vars_sanitized(data['contexts']['secret'], proc)\n        self._check_vars_sanitized(data['contexts']['biz'], proc)\n\n    def test_querystring_as_string(self):\n        data = {\n            'sentry.interfaces.Http': {\n                'query_string':\n                'foo=bar&password=hello&the_secret=hello'\n                '&a_password_here=hello&api_key=secret_key',\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Http' in data\n        http = data['sentry.interfaces.Http']\n        assert http['query_string'] == (\n            'foo=bar&password=%(m)s&the_secret=%(m)s'\n            '&a_password_here=%(m)s&api_key=%(m)s' % {\n                'm': FILTER_MASK\n            }\n        )\n\n    def test_querystring_as_string_with_partials(self):\n        data = {\n            'sentry.interfaces.Http': {\n                'query_string': 'foo=bar&password&baz=bar',\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Http' in data\n        http = data['sentry.interfaces.Http']\n        assert http['query_string'] == 'foo=bar&password&baz=bar'\n\n    def test_sanitize_additional_sensitive_fields(self):\n        additional_sensitive_dict = {'fieldy_field': 'value', 'moar_other_field': 'another value'}\n        data = {'extra': dict(list(VARS.items()) + list(additional_sensitive_dict.items()))}\n\n        proc = SensitiveDataFilter(additional_sensitive_dict.keys())\n        proc.apply(data)\n\n        for field in additional_sensitive_dict.keys():\n            assert data['extra'][field] == FILTER_MASK\n\n        self._check_vars_sanitized(data['extra'], proc)\n\n    def test_sanitize_credit_card(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '4571234567890111')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_amex(self):\n        # AMEX numbers are 15 digits, not 16\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '378282246310005')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_discover(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '6011111111111117')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_visa(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '4111111111111111')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_mastercard(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '5555555555554444')\n        assert result == FILTER_MASK\n\n    def test_sanitize_credit_card_within_value(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', \"'4571234567890111'\")\n        assert result == FILTER_MASK\n\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', \"foo 4571234567890111\")\n        assert result == FILTER_MASK\n\n    def test_does_not_sanitize_timestamp_looks_like_card(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', '1453843029218310')\n        assert result == '1453843029218310'\n\n    def test_sanitize_url(self):\n        proc = SensitiveDataFilter()\n        result = proc.sanitize('foo', 'pg://matt:pass@localhost/1')\n        assert result == 'pg://matt:%s@localhost/1' % FILTER_MASK\n        result = proc.sanitize('foo', \"foo 'redis://redis:foo@localhost:6379/0' bar\")\n        assert result == \"foo 'redis://redis:%s@localhost:6379/0' bar\" % FILTER_MASK\n        result = proc.sanitize('foo', \"'redis://redis:foo@localhost:6379/0'\")\n        assert result == \"'redis://redis:%s@localhost:6379/0'\" % FILTER_MASK\n        result = proc.sanitize('foo', \"foo redis://redis:foo@localhost:6379/0 bar\")\n        assert result == \"foo redis://redis:%s@localhost:6379/0 bar\" % FILTER_MASK\n        result = proc.sanitize(\n            'foo', \"foo redis://redis:foo@localhost:6379/0 bar pg://matt:foo@localhost/1\"\n        )\n        assert result == \"foo redis://redis:%s@localhost:6379/0 bar pg://matt:%s@localhost/1\" % (\n            FILTER_MASK, FILTER_MASK\n        )\n        # Make sure we don't mess up any other url.\n        # This url specifically if passed through urlunsplit(urlsplit()),\n        # it'll change the value.\n        result = proc.sanitize('foo', 'postgres:///path')\n        assert result == 'postgres:///path'\n        # Don't be too overly eager within JSON strings an catch the right field.\n        result = proc.sanitize(\n            'foo',\n            '{\"a\":\"https://localhost\",\"b\":\"foo@localhost\",\"c\":\"pg://matt:pass@localhost/1\",\"d\":\"lol\"}'\n        )\n        assert result == '{\"a\":\"https://localhost\",\"b\":\"foo@localhost\",\"c\":\"pg://matt:%s@localhost/1\",\"d\":\"lol\"}' % FILTER_MASK\n\n    def test_sanitize_http_body(self):\n        data = {\n            'sentry.interfaces.Http': {\n                'data': '{\"email\":\"zzzz@gmail.com\",\"password\":\"zzzzz\"}',\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert 'sentry.interfaces.Http' in data\n        http = data['sentry.interfaces.Http']\n        assert http['data'] == FILTER_MASK\n\n    def test_does_not_fail_on_non_string(self):\n        data = {\n            'extra': {\n                'foo': 1,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'foo': 1}\n\n    def test_does_sanitize_public_key(self):\n        data = {\n            'extra': {\n                's': PUBLIC_KEY,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_does_sanitize_private_key(self):\n        data = {\n            'extra': {\n                's': PRIVATE_KEY,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_does_sanitize_encrypted_private_key(self):\n        data = {\n            'extra': {\n                's': ENCRYPTED_PRIVATE_KEY,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_does_sanitize_rsa_private_key(self):\n        data = {\n            'extra': {\n                's': RSA_PRIVATE_KEY,\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_does_sanitize_social_security_number(self):\n        data = {\n            'extra': {\n                's': '123-45-6789',\n            },\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n        assert data['extra'] == {'s': FILTER_MASK}\n\n    def test_exclude_fields_on_field_name(self):\n        data = {\n            'extra': {\n                'password': '123-45-6789',\n            },\n        }\n\n        proc = SensitiveDataFilter(exclude_fields=['password'])\n        proc.apply(data)\n        assert data['extra'] == {'password': '123-45-6789'}\n\n    def test_explicit_fields(self):\n        data = {\n            'extra': {\n                'mystuff': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=['mystuff'])\n        proc.apply(data)\n        assert data['extra']['mystuff'] == FILTER_MASK\n\n    def test_explicit_fields_case_insensitive(self):\n        data = {\n            'extra': {\n                'myStuff': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=['myStuff'])\n        proc.apply(data)\n        assert data['extra']['myStuff'] == FILTER_MASK\n\n        data = {\n            'extra': {\n                'MYSTUFF': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=['myStuff'])\n        proc.apply(data)\n        assert data['extra']['MYSTUFF'] == FILTER_MASK\n\n        data = {\n            'extra': {\n                'mystuff': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=['myStuff'])\n        proc.apply(data)\n        assert data['extra']['mystuff'] == FILTER_MASK\n\n    def test_exclude_fields_on_field_value(self):\n        data = {\n            'extra': {\n                'foobar': '123-45-6789',\n            },\n        }\n\n        proc = SensitiveDataFilter(exclude_fields=['foobar'])\n        proc.apply(data)\n        assert data['extra'] == {'foobar': '123-45-6789'}\n\n    def test_empty_field(self):\n        data = {\n            'extra': {\n                'foobar': 'xxx',\n            },\n        }\n\n        proc = SensitiveDataFilter(fields=[''])\n        proc.apply(data)\n        assert data['extra'] == {'foobar': 'xxx'}\n\n    def test_should_have_mysql_pwd_as_a_default(self):\n        proc = SensitiveDataFilter(include_defaults=True)\n        assert proc.sanitize('MYSQL_PWD', 'the one') == FILTER_MASK\n        assert proc.sanitize('mysql_pwd', 'the two') == FILTER_MASK\n\n    def test_authorization_scrubbing(self):\n        proc = SensitiveDataFilter(include_defaults=True)\n        assert proc.sanitize('authorization', 'foobar') == FILTER_MASK\n        assert proc.sanitize('auth', 'foobar') == FILTER_MASK\n        assert proc.sanitize('auXth', 'foobar') == 'foobar'\n\n    def test_doesnt_scrub_not_scrubbed(self):\n        proc = SensitiveDataFilter(include_defaults=True)\n        assert proc.sanitize('is_authenticated', 'foobar') == FILTER_MASK\n        assert proc.sanitize('is_authenticated', 'null') == 'null'\n        assert proc.sanitize('is_authenticated', True) is True\n\n    def test_csp_blocked_uri(self):\n        data = {\n            'sentry.interfaces.Csp': {\n                'blocked_uri': 'https://example.com/?foo=4571234567890111&bar=baz',\n            }\n        }\n\n        proc = SensitiveDataFilter()\n        proc.apply(data)\n\n        assert 'sentry.interfaces.Csp' in data\n        csp = data['sentry.interfaces.Csp']\n        assert csp['blocked_uri'] == 'https://example.com/?foo=[Filtered]&bar=baz'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_data_scrubber.py", "id": "bfcb8a909d517a079e1a16dc39883cfb", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/test_data_scrubber.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}