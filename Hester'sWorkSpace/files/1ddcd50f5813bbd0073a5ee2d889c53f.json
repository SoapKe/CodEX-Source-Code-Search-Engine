{"author": "Valloric", "code": "\n\nimport os\nimport subprocess\nimport os.path as p\nimport sys\n\nDIR_OF_THIS_SCRIPT = p.dirname( p.abspath( __file__ ) )\nDIR_OF_THIRD_PARTY = p.join( DIR_OF_THIS_SCRIPT, 'third_party' )\nDIR_OF_YCMD_THIRD_PARTY = p.join( DIR_OF_THIRD_PARTY, 'ycmd', 'third_party' )\n\npython_path = []\nfor folder in os.listdir( DIR_OF_THIRD_PARTY ):\n  python_path.append( p.abspath( p.join( DIR_OF_THIRD_PARTY, folder ) ) )\nfor folder in os.listdir( DIR_OF_YCMD_THIRD_PARTY ):\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  if folder == 'python-future':\n    continue\n  python_path.append( p.abspath( p.join( DIR_OF_YCMD_THIRD_PARTY, folder ) ) )\nif os.environ.get( 'PYTHONPATH' ):\n  python_path.append( os.environ[ 'PYTHONPATH' ] )\nos.environ[ 'PYTHONPATH' ] = os.pathsep.join( python_path )\n\nsys.path.insert( 1, p.abspath( p.join( DIR_OF_YCMD_THIRD_PARTY,\n                                       'argparse' ) ) )\n\nimport argparse\n\n\ndef RunFlake8():\n  print( 'Running flake8' )\n  subprocess.check_call( [\n    sys.executable, '-m', 'flake8', p.join( DIR_OF_THIS_SCRIPT, 'python' )\n  ] )\n\n\ndef ParseArguments():\n  parser = argparse.ArgumentParser()\n  parser.add_argument( '--skip-build', action = 'store_true',\n                       help = 'Do not build ycmd before testing' )\n  parser.add_argument( '--coverage', action = 'store_true',\n                       help = 'Enable coverage report' )\n  parser.add_argument( '--no-flake8', action = 'store_true',\n                       help = 'Do not run flake8' )\n\n  parsed_args, nosetests_args = parser.parse_known_args()\n\n  if 'COVERAGE' in os.environ:\n    parsed_args.coverage = ( os.environ[ 'COVERAGE' ] == 'true' )\n\n  return parsed_args, nosetests_args\n\n\ndef BuildYcmdLibs( args ):\n  if not args.skip_build:\n    subprocess.check_call( [\n      sys.executable,\n      p.join( DIR_OF_THIS_SCRIPT, 'third_party', 'ycmd', 'build.py' )\n    ] )\n\n\ndef NoseTests( parsed_args, extra_nosetests_args ):\n  \n  \n  nosetests_args = [ '-v', '--with-id' ]\n\n  if parsed_args.coverage:\n    nosetests_args += [ '--with-coverage',\n                        '--cover-erase',\n                        '--cover-package=ycm',\n                        '--cover-html' ]\n\n  if extra_nosetests_args:\n    nosetests_args.extend( extra_nosetests_args )\n  else:\n    nosetests_args.append( p.join( DIR_OF_THIS_SCRIPT, 'python' ) )\n\n  subprocess.check_call( [ sys.executable, '-m', 'nose' ] + nosetests_args )\n\n\ndef Main():\n  ( parsed_args, nosetests_args ) = ParseArguments()\n  if not parsed_args.no_flake8:\n    RunFlake8()\n  BuildYcmdLibs( parsed_args )\n  NoseTests( parsed_args, nosetests_args )\n\nif __name__ == \"__main__\":\n  Main()\n", "comments": "!/usr/bin/env python we skip python-future needs inserted sys.path after standard library imports can't pythonpath std lib paths always appended pythonpath we correctly prod ycmd/utils.py access right sys.path so dev rely python-future installed correctly pip install -r test_requirements.txt pip knows install correctly matter sys.path path always passing --with-id nosetests enables non-surprising usage --failed flag", "content": "#!/usr/bin/env python\n\nimport os\nimport subprocess\nimport os.path as p\nimport sys\n\nDIR_OF_THIS_SCRIPT = p.dirname( p.abspath( __file__ ) )\nDIR_OF_THIRD_PARTY = p.join( DIR_OF_THIS_SCRIPT, 'third_party' )\nDIR_OF_YCMD_THIRD_PARTY = p.join( DIR_OF_THIRD_PARTY, 'ycmd', 'third_party' )\n\npython_path = []\nfor folder in os.listdir( DIR_OF_THIRD_PARTY ):\n  python_path.append( p.abspath( p.join( DIR_OF_THIRD_PARTY, folder ) ) )\nfor folder in os.listdir( DIR_OF_YCMD_THIRD_PARTY ):\n  # We skip python-future because it needs to be inserted in sys.path AFTER\n  # the standard library imports but we can't do that with PYTHONPATH because\n  # the std lib paths are always appended to PYTHONPATH. We do it correctly in\n  # prod in ycmd/utils.py because we have access to the right sys.path.\n  # So for dev, we rely on python-future being installed correctly with\n  #   pip install -r test_requirements.txt\n  #\n  # Pip knows how to install this correctly so that it doesn't matter where in\n  # sys.path the path is.\n  if folder == 'python-future':\n    continue\n  python_path.append( p.abspath( p.join( DIR_OF_YCMD_THIRD_PARTY, folder ) ) )\nif os.environ.get( 'PYTHONPATH' ):\n  python_path.append( os.environ[ 'PYTHONPATH' ] )\nos.environ[ 'PYTHONPATH' ] = os.pathsep.join( python_path )\n\nsys.path.insert( 1, p.abspath( p.join( DIR_OF_YCMD_THIRD_PARTY,\n                                       'argparse' ) ) )\n\nimport argparse\n\n\ndef RunFlake8():\n  print( 'Running flake8' )\n  subprocess.check_call( [\n    sys.executable, '-m', 'flake8', p.join( DIR_OF_THIS_SCRIPT, 'python' )\n  ] )\n\n\ndef ParseArguments():\n  parser = argparse.ArgumentParser()\n  parser.add_argument( '--skip-build', action = 'store_true',\n                       help = 'Do not build ycmd before testing' )\n  parser.add_argument( '--coverage', action = 'store_true',\n                       help = 'Enable coverage report' )\n  parser.add_argument( '--no-flake8', action = 'store_true',\n                       help = 'Do not run flake8' )\n\n  parsed_args, nosetests_args = parser.parse_known_args()\n\n  if 'COVERAGE' in os.environ:\n    parsed_args.coverage = ( os.environ[ 'COVERAGE' ] == 'true' )\n\n  return parsed_args, nosetests_args\n\n\ndef BuildYcmdLibs( args ):\n  if not args.skip_build:\n    subprocess.check_call( [\n      sys.executable,\n      p.join( DIR_OF_THIS_SCRIPT, 'third_party', 'ycmd', 'build.py' )\n    ] )\n\n\ndef NoseTests( parsed_args, extra_nosetests_args ):\n  # Always passing --with-id to nosetests enables non-surprising usage of\n  # its --failed flag.\n  nosetests_args = [ '-v', '--with-id' ]\n\n  if parsed_args.coverage:\n    nosetests_args += [ '--with-coverage',\n                        '--cover-erase',\n                        '--cover-package=ycm',\n                        '--cover-html' ]\n\n  if extra_nosetests_args:\n    nosetests_args.extend( extra_nosetests_args )\n  else:\n    nosetests_args.append( p.join( DIR_OF_THIS_SCRIPT, 'python' ) )\n\n  subprocess.check_call( [ sys.executable, '-m', 'nose' ] + nosetests_args )\n\n\ndef Main():\n  ( parsed_args, nosetests_args ) = ParseArguments()\n  if not parsed_args.no_flake8:\n    RunFlake8()\n  BuildYcmdLibs( parsed_args )\n  NoseTests( parsed_args, nosetests_args )\n\nif __name__ == \"__main__\":\n  Main()\n", "description": "A code-completion engine for Vim", "file_name": "run_tests.py", "id": "1ddcd50f5813bbd0073a5ee2d889c53f", "language": "Python", "project_name": "YouCompleteMe", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/Valloric-YouCompleteMe/Valloric-YouCompleteMe-d338141/run_tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:58:33Z", "url": "https://github.com/Valloric/YouCompleteMe", "wiki": true}