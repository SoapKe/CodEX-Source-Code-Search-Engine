{"author": "jwilder", "code": "import logging\nimport os\nfrom os.path import join, isfile\nfrom shutil import copy\nfrom time import sleep\n\nimport pytest\nfrom requests import ConnectionError\n\nscript_dir = os.path.dirname(__file__)\n\npytestmark = pytest.mark.xfail()  \n\n\n@pytest.yield_fixture(scope=\"module\", autouse=True)\ndef certs():\n    \n    file_names = (\"web.nginx-proxy.crt\", \"web.nginx-proxy.key\")\n    logging.info(\"copying server cert and key files into tmp_certs\")\n    for f_name in file_names:\n        copy(join(script_dir, \"certs\", f_name), join(script_dir, \"tmp_certs\"))\n    yield\n    logging.info(\"cleaning up the tmp_cert directory\")\n    for f_name in file_names:\n        if isfile(join(script_dir, \"tmp_certs\", f_name)):\n            os.remove(join(script_dir, \"tmp_certs\", f_name))\n\n\n\n\ndef test_unknown_virtual_host_is_503(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://foo.nginx-proxy/\")\n    assert r.status_code == 503\n\n\ndef test_http_web_is_301(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://web.nginx-proxy/port\", allow_redirects=False)\n    assert r.status_code == 301\n\n\ndef test_https_web_is_200(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"https://web.nginx-proxy/port\")\n    assert r.status_code == 200\n    assert 'answer from port 81\\n' in r.text\n\n\n@pytest.mark.incremental\ndef test_delete_cert_and_restart_reverseproxy(docker_compose):\n    os.remove(join(script_dir, \"tmp_certs\", \"web.nginx-proxy.crt\"))\n    docker_compose.containers.get(\"reverseproxy\").restart()\n    sleep(3)  \n    assert \"running\" == docker_compose.containers.get(\"reverseproxy\").status\n\n\n@pytest.mark.incremental\ndef test_unknown_virtual_host_is_still_503(nginxproxy):\n    r = nginxproxy.get(\"http://foo.nginx-proxy/\")\n    assert r.status_code == 503\n\n\n@pytest.mark.incremental\ndef test_http_web_is_now_200(nginxproxy):\n    r = nginxproxy.get(\"http://web.nginx-proxy/port\", allow_redirects=False)\n    assert r.status_code == 200\n    assert \"answer from port 81\\n\" == r.text\n\n\n@pytest.mark.incremental\ndef test_https_web_is_now_broken_since_there_is_no_cert(nginxproxy):\n    with pytest.raises(ConnectionError):\n        nginxproxy.get(\"https://web.nginx-proxy/port\")\n", "comments": "        pytest fixture provides cert key files tmp certs directory            todo delete marker issues fixed                                                                                     give time container initialize ", "content": "import logging\nimport os\nfrom os.path import join, isfile\nfrom shutil import copy\nfrom time import sleep\n\nimport pytest\nfrom requests import ConnectionError\n\nscript_dir = os.path.dirname(__file__)\n\npytestmark = pytest.mark.xfail()  # TODO delete this marker once those issues are fixed\n\n\n@pytest.yield_fixture(scope=\"module\", autouse=True)\ndef certs():\n    \"\"\"\n    pytest fixture that provides cert and key files into the tmp_certs directory\n    \"\"\"\n    file_names = (\"web.nginx-proxy.crt\", \"web.nginx-proxy.key\")\n    logging.info(\"copying server cert and key files into tmp_certs\")\n    for f_name in file_names:\n        copy(join(script_dir, \"certs\", f_name), join(script_dir, \"tmp_certs\"))\n    yield\n    logging.info(\"cleaning up the tmp_cert directory\")\n    for f_name in file_names:\n        if isfile(join(script_dir, \"tmp_certs\", f_name)):\n            os.remove(join(script_dir, \"tmp_certs\", f_name))\n\n###############################################################################\n\n\ndef test_unknown_virtual_host_is_503(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://foo.nginx-proxy/\")\n    assert r.status_code == 503\n\n\ndef test_http_web_is_301(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://web.nginx-proxy/port\", allow_redirects=False)\n    assert r.status_code == 301\n\n\ndef test_https_web_is_200(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"https://web.nginx-proxy/port\")\n    assert r.status_code == 200\n    assert 'answer from port 81\\n' in r.text\n\n\n@pytest.mark.incremental\ndef test_delete_cert_and_restart_reverseproxy(docker_compose):\n    os.remove(join(script_dir, \"tmp_certs\", \"web.nginx-proxy.crt\"))\n    docker_compose.containers.get(\"reverseproxy\").restart()\n    sleep(3)  # give time for the container to initialize\n    assert \"running\" == docker_compose.containers.get(\"reverseproxy\").status\n\n\n@pytest.mark.incremental\ndef test_unknown_virtual_host_is_still_503(nginxproxy):\n    r = nginxproxy.get(\"http://foo.nginx-proxy/\")\n    assert r.status_code == 503\n\n\n@pytest.mark.incremental\ndef test_http_web_is_now_200(nginxproxy):\n    r = nginxproxy.get(\"http://web.nginx-proxy/port\", allow_redirects=False)\n    assert r.status_code == 200\n    assert \"answer from port 81\\n\" == r.text\n\n\n@pytest.mark.incremental\ndef test_https_web_is_now_broken_since_there_is_no_cert(nginxproxy):\n    with pytest.raises(ConnectionError):\n        nginxproxy.get(\"https://web.nginx-proxy/port\")\n", "description": "Automated nginx proxy for Docker containers using docker-gen", "file_name": "test_restart_while_missing_cert.py", "id": "1f9c746e20ea2d4147e9f6cda490dca6", "language": "Python", "project_name": "nginx-proxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jwilder-nginx-proxy/jwilder-nginx-proxy-000a447/test/stress_tests/test_deleted_cert/test_restart_while_missing_cert.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:25:07Z", "url": "https://github.com/jwilder/nginx-proxy", "wiki": true}