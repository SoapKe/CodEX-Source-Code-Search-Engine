{"author": "getsentry", "code": "from __future__ import absolute_import\n\nfrom datetime import timedelta\nfrom django.utils import timezone\nfrom time import time\n\nfrom sentry.models import Group, GroupStatus\nfrom sentry.tasks.auto_resolve_issues import schedule_auto_resolution\nfrom sentry.testutils import TestCase\n\n\nclass ScheduleAutoResolutionTest(TestCase):\n    def test_task_persistent_name(self):\n        assert schedule_auto_resolution.name == 'sentry.tasks.schedule_auto_resolution'\n\n    def test_simple(self):\n        project = self.create_project()\n        project2 = self.create_project()\n        project3 = self.create_project()\n        project4 = self.create_project()\n\n        current_ts = int(time()) - 1\n\n        project.update_option('sentry:resolve_age', 1)\n        project3.update_option('sentry:resolve_age', 1)\n        project3.update_option('sentry:_last_auto_resolve', current_ts)\n        project4.update_option('sentry:_last_auto_resolve', current_ts)\n\n        group1 = self.create_group(\n            project=project,\n            status=GroupStatus.UNRESOLVED,\n            last_seen=timezone.now() - timedelta(days=1),\n        )\n\n        group2 = self.create_group(\n            project=project,\n            status=GroupStatus.UNRESOLVED,\n            last_seen=timezone.now(),\n        )\n\n        group3 = self.create_group(\n            project=project3,\n            status=GroupStatus.UNRESOLVED,\n            last_seen=timezone.now() - timedelta(days=1),\n        )\n\n        with self.tasks():\n            schedule_auto_resolution()\n\n        assert Group.objects.get(\n            id=group1.id,\n        ).status == GroupStatus.RESOLVED\n\n        assert Group.objects.get(\n            id=group2.id,\n        ).status == GroupStatus.UNRESOLVED\n\n        assert Group.objects.get(\n            id=group3.id,\n        ).status == GroupStatus.UNRESOLVED\n\n        assert project.get_option('sentry:_last_auto_resolve') > current_ts\n        assert not project2.get_option('sentry:_last_auto_resolve')\n        assert project3.get_option('sentry:_last_auto_resolve') == current_ts\n        \n        assert not project4.get_option('sentry:_last_auto_resolve')\n", "comments": "  get cleaned since resolve age set ", "content": "from __future__ import absolute_import\n\nfrom datetime import timedelta\nfrom django.utils import timezone\nfrom time import time\n\nfrom sentry.models import Group, GroupStatus\nfrom sentry.tasks.auto_resolve_issues import schedule_auto_resolution\nfrom sentry.testutils import TestCase\n\n\nclass ScheduleAutoResolutionTest(TestCase):\n    def test_task_persistent_name(self):\n        assert schedule_auto_resolution.name == 'sentry.tasks.schedule_auto_resolution'\n\n    def test_simple(self):\n        project = self.create_project()\n        project2 = self.create_project()\n        project3 = self.create_project()\n        project4 = self.create_project()\n\n        current_ts = int(time()) - 1\n\n        project.update_option('sentry:resolve_age', 1)\n        project3.update_option('sentry:resolve_age', 1)\n        project3.update_option('sentry:_last_auto_resolve', current_ts)\n        project4.update_option('sentry:_last_auto_resolve', current_ts)\n\n        group1 = self.create_group(\n            project=project,\n            status=GroupStatus.UNRESOLVED,\n            last_seen=timezone.now() - timedelta(days=1),\n        )\n\n        group2 = self.create_group(\n            project=project,\n            status=GroupStatus.UNRESOLVED,\n            last_seen=timezone.now(),\n        )\n\n        group3 = self.create_group(\n            project=project3,\n            status=GroupStatus.UNRESOLVED,\n            last_seen=timezone.now() - timedelta(days=1),\n        )\n\n        with self.tasks():\n            schedule_auto_resolution()\n\n        assert Group.objects.get(\n            id=group1.id,\n        ).status == GroupStatus.RESOLVED\n\n        assert Group.objects.get(\n            id=group2.id,\n        ).status == GroupStatus.UNRESOLVED\n\n        assert Group.objects.get(\n            id=group3.id,\n        ).status == GroupStatus.UNRESOLVED\n\n        assert project.get_option('sentry:_last_auto_resolve') > current_ts\n        assert not project2.get_option('sentry:_last_auto_resolve')\n        assert project3.get_option('sentry:_last_auto_resolve') == current_ts\n        # this should get cleaned up since it had no resolve age set\n        assert not project4.get_option('sentry:_last_auto_resolve')\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_auto_resolve_issues.py", "id": "14ebe81d90fc9f037b041b95f37fb4e4", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/tasks/test_auto_resolve_issues.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}