{"author": "tgalal", "code": "import urllib,sys, os, logging\nimport hashlib\nfrom .waresponseparser import ResponseParser\nfrom yowsup.env import YowsupEnv\n\nif sys.version_info < (3, 0):\n    import httplib\n    from urllib import urlencode\n\n    if sys.version_info >= (2, 7, 9):\n        \n        import ssl\n        ssl._create_default_https_context = ssl._create_unverified_context\n\nelse:\n    from http import client as httplib\n    from urllib.parse import urlencode\n\nlogger = logging.getLogger(__name__)\n\n\nclass WARequest(object):\n\n    OK = 200\n\n    def __init__(self):\n\n        self.pvars = []\n        self.port = 443\n        self.type = \"GET\"\n        self.parser = None\n        self.params = []\n        self.headers = {}\n\n        self.sent = False\n        self.response = None\n\n    def setParsableVariables(self, pvars):\n        self.pvars = pvars\n\n    def onResponse(self, name, value):\n        if name == \"status\":\n            self.status = value\n        elif name == \"result\":\n            self.result = value\n\n    def addParam(self,name,value):\n        self.params.append((name,value))\n\n    def removeParam(self, name):\n        for i in range(0, len(self.params)):\n            if self.params[i][0] == name:\n                del self.params[i]\n\n\n    def addHeaderField(self, name, value):\n        self.headers[name] = value\n\n    def clearParams(self):\n        self.params = []\n\n    def getUserAgent(self):\n        return YowsupEnv.getCurrent().getUserAgent()\n\n    def send(self, parser = None):\n\n        if self.type == \"POST\":\n            return self.sendPostRequest(parser)\n\n        return self.sendGetRequest(parser)\n\n    def setParser(self, parser):\n        if isinstance(parser, ResponseParser):\n            self.parser = parser\n        else:\n            logger.error(\"Invalid parser\")\n\n    def getConnectionParameters(self):\n\n        if not self.url:\n            return \"\", \"\", self.port\n\n        try:\n            url = self.url.split(\"://\", 1)\n            url = url[0] if len(url) == 1 else url[1]\n\n            host, path = url.split('/', 1)\n        except ValueError:\n            host = url\n            path = \"\"\n\n        path = \"/\" + path\n\n        return host, self.port, path\n\n    def sendGetRequest(self, parser = None):\n        self.response = None\n        params =  self.params#[param.items()[0] for param in self.params];\n\n        parser = parser or self.parser or ResponseParser()\n\n        headers = dict(list({\"User-Agent\":self.getUserAgent(),\n                \"Accept\": parser.getMeta()\n            }.items()) + list(self.headers.items()));\n\n        host,port,path = self.getConnectionParameters()\n\n        self.response = WARequest.sendRequest(host, port, path, headers, params, \"GET\")\n\n        if not self.response.status == WARequest.OK:\n            logger.error(\"Request not success, status was %s\"%self.response.status)\n            return {}\n\n        data = self.response.read()\n        logger.info(data)\n\n        self.sent = True\n        return parser.parse(data.decode(), self.pvars)\n\n    def sendPostRequest(self, parser = None):\n        self.response = None\n        params =  self.params #[param.items()[0] for param in self.params];\n\n        parser = parser or self.parser or ResponseParser()\n\n        headers = dict(list({\"User-Agent\":self.getUserAgent(),\n                \"Accept\": parser.getMeta(),\n                \"Content-Type\":\"application/x-www-form-urlencoded\"\n            }.items()) + list(self.headers.items()))\n\n        host,port,path = self.getConnectionParameters()\n        self.response = WARequest.sendRequest(host, port, path, headers, params, \"POST\")\n\n\n        if not self.response.status == WARequest.OK:\n            logger.error(\"Request not success, status was %s\" % self.response.status)\n            return {}\n\n        data = self.response.read()\n\n        logger.info(data)\n\n        self.sent = True\n        return parser.parse(data.decode(), self.pvars)\n\n\n    @staticmethod\n    def sendRequest(host, port, path, headers, params, reqType=\"GET\"):\n\n        params = urlencode(params)\n\n\n        path = path + \"?\"+ params if reqType == \"GET\" and params else path\n\n        if len(headers):\n            logger.debug(headers)\n        if len(params):\n            logger.debug(params)\n\n        logger.debug(\"Opening connection to %s\" % host);\n        conn = httplib.HTTPSConnection(host ,port) if port == 443 else httplib.HTTPConnection(host ,port)\n\n        logger.debug(\"Sending %s request to %s\" % (reqType, path))\n        conn.request(reqType, path, params, headers);\n\n        response = conn.getresponse()\n        return response\n", "comments": " see https   github com tgalal yowsup issues 677    param items() 0  param self params      param items() 0  param self params   ", "content": "import urllib,sys, os, logging\nimport hashlib\nfrom .waresponseparser import ResponseParser\nfrom yowsup.env import YowsupEnv\n\nif sys.version_info < (3, 0):\n    import httplib\n    from urllib import urlencode\n\n    if sys.version_info >= (2, 7, 9):\n        #see https://github.com/tgalal/yowsup/issues/677\n        import ssl\n        ssl._create_default_https_context = ssl._create_unverified_context\n\nelse:\n    from http import client as httplib\n    from urllib.parse import urlencode\n\nlogger = logging.getLogger(__name__)\n\n\nclass WARequest(object):\n\n    OK = 200\n\n    def __init__(self):\n\n        self.pvars = []\n        self.port = 443\n        self.type = \"GET\"\n        self.parser = None\n        self.params = []\n        self.headers = {}\n\n        self.sent = False\n        self.response = None\n\n    def setParsableVariables(self, pvars):\n        self.pvars = pvars\n\n    def onResponse(self, name, value):\n        if name == \"status\":\n            self.status = value\n        elif name == \"result\":\n            self.result = value\n\n    def addParam(self,name,value):\n        self.params.append((name,value))\n\n    def removeParam(self, name):\n        for i in range(0, len(self.params)):\n            if self.params[i][0] == name:\n                del self.params[i]\n\n\n    def addHeaderField(self, name, value):\n        self.headers[name] = value\n\n    def clearParams(self):\n        self.params = []\n\n    def getUserAgent(self):\n        return YowsupEnv.getCurrent().getUserAgent()\n\n    def send(self, parser = None):\n\n        if self.type == \"POST\":\n            return self.sendPostRequest(parser)\n\n        return self.sendGetRequest(parser)\n\n    def setParser(self, parser):\n        if isinstance(parser, ResponseParser):\n            self.parser = parser\n        else:\n            logger.error(\"Invalid parser\")\n\n    def getConnectionParameters(self):\n\n        if not self.url:\n            return \"\", \"\", self.port\n\n        try:\n            url = self.url.split(\"://\", 1)\n            url = url[0] if len(url) == 1 else url[1]\n\n            host, path = url.split('/', 1)\n        except ValueError:\n            host = url\n            path = \"\"\n\n        path = \"/\" + path\n\n        return host, self.port, path\n\n    def sendGetRequest(self, parser = None):\n        self.response = None\n        params =  self.params#[param.items()[0] for param in self.params];\n\n        parser = parser or self.parser or ResponseParser()\n\n        headers = dict(list({\"User-Agent\":self.getUserAgent(),\n                \"Accept\": parser.getMeta()\n            }.items()) + list(self.headers.items()));\n\n        host,port,path = self.getConnectionParameters()\n\n        self.response = WARequest.sendRequest(host, port, path, headers, params, \"GET\")\n\n        if not self.response.status == WARequest.OK:\n            logger.error(\"Request not success, status was %s\"%self.response.status)\n            return {}\n\n        data = self.response.read()\n        logger.info(data)\n\n        self.sent = True\n        return parser.parse(data.decode(), self.pvars)\n\n    def sendPostRequest(self, parser = None):\n        self.response = None\n        params =  self.params #[param.items()[0] for param in self.params];\n\n        parser = parser or self.parser or ResponseParser()\n\n        headers = dict(list({\"User-Agent\":self.getUserAgent(),\n                \"Accept\": parser.getMeta(),\n                \"Content-Type\":\"application/x-www-form-urlencoded\"\n            }.items()) + list(self.headers.items()))\n\n        host,port,path = self.getConnectionParameters()\n        self.response = WARequest.sendRequest(host, port, path, headers, params, \"POST\")\n\n\n        if not self.response.status == WARequest.OK:\n            logger.error(\"Request not success, status was %s\" % self.response.status)\n            return {}\n\n        data = self.response.read()\n\n        logger.info(data)\n\n        self.sent = True\n        return parser.parse(data.decode(), self.pvars)\n\n\n    @staticmethod\n    def sendRequest(host, port, path, headers, params, reqType=\"GET\"):\n\n        params = urlencode(params)\n\n\n        path = path + \"?\"+ params if reqType == \"GET\" and params else path\n\n        if len(headers):\n            logger.debug(headers)\n        if len(params):\n            logger.debug(params)\n\n        logger.debug(\"Opening connection to %s\" % host);\n        conn = httplib.HTTPSConnection(host ,port) if port == 443 else httplib.HTTPConnection(host ,port)\n\n        logger.debug(\"Sending %s request to %s\" % (reqType, path))\n        conn.request(reqType, path, params, headers);\n\n        response = conn.getresponse()\n        return response\n", "description": "The python WhatsApp library", "file_name": "warequest.py", "id": "609e868f18e2d00789e2fc63f0ebe2e9", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/common/http/warequest.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}