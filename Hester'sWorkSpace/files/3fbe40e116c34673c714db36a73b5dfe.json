{"author": "ansible", "code": "\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['deprecated'],\n                    'supported_by': 'certified'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ec2_vpc\nshort_description: configure AWS virtual private clouds\ndescription:\n    - Create or terminates AWS virtual private clouds.  This module has a dependency on python-boto.\nversion_added: \"1.4\"\ndeprecated:\n  removed_in: \"2.5\"\n  why: Replaced by dedicated modules.\n  alternative: Use M(ec2_vpc_net) along with supporting modules including M(ec2_vpc_igw), M(ec2_vpc_route_table), M(ec2_vpc_subnet),\n               M(ec2_vpc_dhcp_options), M(ec2_vpc_nat_gateway), M(ec2_vpc_nacl).\noptions:\n  cidr_block:\n    description:\n      - \"The cidr block representing the VPC, e.g. C(10.0.0.0/16), required when I(state=present).\"\n  instance_tenancy:\n    description:\n      - \"The supported tenancy options for instances launched into the VPC.\"\n    default: \"default\"\n    choices: [ \"default\", \"dedicated\" ]\n  dns_support:\n    description:\n      - Toggles the \"Enable DNS resolution\" flag.\n    type: bool\n    default: 'yes'\n  dns_hostnames:\n    description:\n      - Toggles the \"Enable DNS hostname support for instances\" flag.\n    type: bool\n    default: 'yes'\n  subnets:\n    description:\n      - 'A dictionary array of subnets to add of the form C({ cidr: ..., az: ... , resource_tags: ... }).'\n      - Where C(az) is the desired availability zone of the subnet, optional.\n      - 'Tags C(resource_tags) use dictionary form C({ \"Environment\":\"Dev\", \"Tier\":\"Web\", ...}), optional.'\n      - C(resource_tags) see resource_tags for VPC below. The main difference is subnet tags not specified here will be deleted.\n      - All VPC subnets not in this list will be removed as well.\n      - As of 1.8, if the subnets parameter is not specified, no existing subnets will be modified.'\n  vpc_id:\n    description:\n      - A VPC id to terminate when I(state=absent).\n  resource_tags:\n    description:\n      - 'A dictionary array of resource tags of the form C({ tag1: value1, tag2: value2 }).\n      - Tags in this list are used in conjunction with CIDR block to uniquely identify a VPC in lieu of vpc_id. Therefore,\n        if CIDR/Tag combination does not exist, a new VPC will be created.  VPC tags not on this list will be ignored. Prior to 1.7,\n        specifying a resource tag was optional.'\n    required: true\n    version_added: \"1.6\"\n  internet_gateway:\n    description:\n      - Toggle whether there should be an Internet gateway attached to the VPC.\n    type: bool\n    default: 'no'\n  route_tables:\n    description:\n      - >\n        A dictionary array of route tables to add of the form:\n        C({ subnets: [172.22.2.0/24, 172.22.3.0/24,], routes: [{ dest: 0.0.0.0/0, gw: igw},], resource_tags: ... }). Where the subnets list is\n        those subnets the route table should be associated with, and the routes list is a list of routes to be in the table.  The special keyword\n        for the gw of igw specifies that you should the route should go through the internet gateway attached to the VPC. gw also accepts instance-ids,\n        interface-ids, and vpc-peering-connection-ids in addition igw. resource_tags is optional and uses dictionary form: C({ \"Name\": \"public\", ... }).\n        This module is currently unable to affect the \"main\" route table due to some limitations in boto, so you must explicitly define the associated\n        subnets or they will be attached to the main table implicitly. As of 1.8, if the route_tables parameter is not specified, no existing routes\n        will be modified.\n  wait:\n    description:\n      - Wait for the VPC to be in state 'available' before returning.\n    type: bool\n    default: 'no'\n  wait_timeout:\n    description:\n      - How long before wait gives up, in seconds.\n    default: 300\n  state:\n    description:\n      - Create or terminate the VPC.\n    required: true\n    choices: [ \"present\", \"absent\" ]\nauthor: \"Carson Gee (@carsongee)\"\nextends_documentation_fragment:\n    - aws\n    - ec2\n'''\n\nEXAMPLES = '''\n\n\n\n\n    - ec2_vpc:\n        state: present\n        cidr_block: 172.23.0.0/16\n        resource_tags: { \"Environment\":\"Development\" }\n        region: us-west-2\n\n\n    - ec2_vpc:\n        state: present\n        cidr_block: 172.22.0.0/16\n        resource_tags: { \"Environment\":\"Development\" }\n        subnets:\n          - cidr: 172.22.1.0/24\n            az: us-west-2c\n            resource_tags: { \"Environment\":\"Dev\", \"Tier\" : \"Web\" }\n          - cidr: 172.22.2.0/24\n            az: us-west-2b\n            resource_tags: { \"Environment\":\"Dev\", \"Tier\" : \"App\" }\n          - cidr: 172.22.3.0/24\n            az: us-west-2a\n            resource_tags: { \"Environment\":\"Dev\", \"Tier\" : \"DB\" }\n        internet_gateway: True\n        route_tables:\n          - subnets:\n              - 172.22.2.0/24\n              - 172.22.3.0/24\n            routes:\n              - dest: 0.0.0.0/0\n                gw: igw\n          - subnets:\n              - 172.22.1.0/24\n            routes:\n              - dest: 0.0.0.0/0\n                gw: igw\n        region: us-west-2\n      register: vpc\n\n\n    - ec2_vpc:\n        state: absent\n        vpc_id: vpc-aaaaaaa\n        region: us-west-2\n\n\n'''\n\nfrom ansible.module_utils.common.removed import removed_module\n\nif __name__ == '__main__':\n    removed_module()\n", "comments": "        module  ec2 vpc short description  configure aws virtual private clouds description        create terminates aws virtual private clouds   this module dependency python boto  version added   1 4  deprecated    removed   2 5     replaced dedicated modules    alternative  use m(ec2 vpc net) along supporting modules including m(ec2 vpc igw)  m(ec2 vpc route table)  m(ec2 vpc subnet)                 m(ec2 vpc dhcp options)  m(ec2 vpc nat gateway)  m(ec2 vpc nacl)  options    cidr block      description           the cidr block representing vpc  e g  c(10 0 0 0 16)  required i(state present)     instance tenancy      description           the supported tenancy options instances launched vpc       default   default      choices     default    dedicated      dns support      description          toggles  enable dns resolution  flag      type  bool     default   yes    dns hostnames      description          toggles  enable dns hostname support instances  flag      type  bool     default   yes    subnets      description           a dictionary array subnets add form c(  cidr       az        resource tags       )           where c(az) desired availability zone subnet  optional           tags c(resource tags) use dictionary form c(   environment   dev    tier   web       )  optional           c(resource tags) see resource tags vpc  the main difference subnet tags specified deleted          all vpc subnets list removed well          as 1 8  subnets parameter specified  existing subnets modified     vpc id      description          a vpc id terminate i(state absent)    resource tags      description           a dictionary array resource tags form c(  tag1  value1  tag2  value2  )          tags list used conjunction cidr block uniquely identify vpc lieu vpc id  therefore          cidr tag combination exist  new vpc created   vpc tags list ignored  prior 1 7          specifying resource tag optional       required  true     version added   1 6    internet gateway      description          toggle whether internet gateway attached vpc      type  bool     default      route tables      description                    a dictionary array route tables add form          c(  subnets   172 22 2 0 24  172 22 3 0 24    routes     dest  0 0 0 0 0  gw  igw     resource tags       )  where subnets list         subnets route table associated  routes list list routes table   the special keyword         gw igw specifies route go internet gateway attached vpc  gw also accepts instance ids          interface ids  vpc peering connection ids addition igw  resource tags optional uses dictionary form  c(   name    public        )          this module currently unable affect  main  route table due limitations boto  must explicitly define associated         subnets attached main table implicitly  as 1 8  route tables parameter specified  existing routes         modified    wait      description          wait vpc state  available  returning      type  bool     default      wait timeout      description          how long wait gives  seconds      default  300   state      description          create terminate vpc      required  true     choices     present    absent    author   carson gee ( carsongee)  extends documentation fragment        aws       ec2      examples         note  none examples set aws access key  aws secret key  region    it assumed matching environment variables set     basic creation example        ec2 vpc          state  present         cidr block  172 23 0 0 16         resource tags     environment   development            region  us west 2   full creation example subnets optional availability zones    the absence presence subnets deletes creates respectively        ec2 vpc          state  present         cidr block  172 22 0 0 16         resource tags     environment   development            subnets              cidr  172 22 1 0 24             az  us west 2c             resource tags     environment   dev    tier     web                cidr  172 22 2 0 24             az  us west 2b             resource tags     environment   dev    tier     app                cidr  172 22 3 0 24             az  us west 2a             resource tags     environment   dev    tier     db            internet gateway  true         route tables              subnets                  172 22 2 0 24                 172 22 3 0 24             routes                  dest  0 0 0 0 0                 gw  igw             subnets                  172 22 1 0 24             routes                  dest  0 0 0 0 0                 gw  igw         region  us west 2       register  vpc    removal vpc id       ec2 vpc          state  absent         vpc id  vpc aaaaaaa         region  us west 2   if added elements managed module  e g  instances  nats  etc   delete fail dependencies removed          usr bin python    copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    note  none examples set aws access key  aws secret key  region     it assumed matching environment variables set     basic creation example     full creation example subnets optional availability zones     the absence presence subnets deletes creates respectively     removal vpc id    if added elements managed module  e g  instances  nats  etc    delete fail dependencies removed  ", "content": "#!/usr/bin/python\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['deprecated'],\n                    'supported_by': 'certified'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ec2_vpc\nshort_description: configure AWS virtual private clouds\ndescription:\n    - Create or terminates AWS virtual private clouds.  This module has a dependency on python-boto.\nversion_added: \"1.4\"\ndeprecated:\n  removed_in: \"2.5\"\n  why: Replaced by dedicated modules.\n  alternative: Use M(ec2_vpc_net) along with supporting modules including M(ec2_vpc_igw), M(ec2_vpc_route_table), M(ec2_vpc_subnet),\n               M(ec2_vpc_dhcp_options), M(ec2_vpc_nat_gateway), M(ec2_vpc_nacl).\noptions:\n  cidr_block:\n    description:\n      - \"The cidr block representing the VPC, e.g. C(10.0.0.0/16), required when I(state=present).\"\n  instance_tenancy:\n    description:\n      - \"The supported tenancy options for instances launched into the VPC.\"\n    default: \"default\"\n    choices: [ \"default\", \"dedicated\" ]\n  dns_support:\n    description:\n      - Toggles the \"Enable DNS resolution\" flag.\n    type: bool\n    default: 'yes'\n  dns_hostnames:\n    description:\n      - Toggles the \"Enable DNS hostname support for instances\" flag.\n    type: bool\n    default: 'yes'\n  subnets:\n    description:\n      - 'A dictionary array of subnets to add of the form C({ cidr: ..., az: ... , resource_tags: ... }).'\n      - Where C(az) is the desired availability zone of the subnet, optional.\n      - 'Tags C(resource_tags) use dictionary form C({ \"Environment\":\"Dev\", \"Tier\":\"Web\", ...}), optional.'\n      - C(resource_tags) see resource_tags for VPC below. The main difference is subnet tags not specified here will be deleted.\n      - All VPC subnets not in this list will be removed as well.\n      - As of 1.8, if the subnets parameter is not specified, no existing subnets will be modified.'\n  vpc_id:\n    description:\n      - A VPC id to terminate when I(state=absent).\n  resource_tags:\n    description:\n      - 'A dictionary array of resource tags of the form C({ tag1: value1, tag2: value2 }).\n      - Tags in this list are used in conjunction with CIDR block to uniquely identify a VPC in lieu of vpc_id. Therefore,\n        if CIDR/Tag combination does not exist, a new VPC will be created.  VPC tags not on this list will be ignored. Prior to 1.7,\n        specifying a resource tag was optional.'\n    required: true\n    version_added: \"1.6\"\n  internet_gateway:\n    description:\n      - Toggle whether there should be an Internet gateway attached to the VPC.\n    type: bool\n    default: 'no'\n  route_tables:\n    description:\n      - >\n        A dictionary array of route tables to add of the form:\n        C({ subnets: [172.22.2.0/24, 172.22.3.0/24,], routes: [{ dest: 0.0.0.0/0, gw: igw},], resource_tags: ... }). Where the subnets list is\n        those subnets the route table should be associated with, and the routes list is a list of routes to be in the table.  The special keyword\n        for the gw of igw specifies that you should the route should go through the internet gateway attached to the VPC. gw also accepts instance-ids,\n        interface-ids, and vpc-peering-connection-ids in addition igw. resource_tags is optional and uses dictionary form: C({ \"Name\": \"public\", ... }).\n        This module is currently unable to affect the \"main\" route table due to some limitations in boto, so you must explicitly define the associated\n        subnets or they will be attached to the main table implicitly. As of 1.8, if the route_tables parameter is not specified, no existing routes\n        will be modified.\n  wait:\n    description:\n      - Wait for the VPC to be in state 'available' before returning.\n    type: bool\n    default: 'no'\n  wait_timeout:\n    description:\n      - How long before wait gives up, in seconds.\n    default: 300\n  state:\n    description:\n      - Create or terminate the VPC.\n    required: true\n    choices: [ \"present\", \"absent\" ]\nauthor: \"Carson Gee (@carsongee)\"\nextends_documentation_fragment:\n    - aws\n    - ec2\n'''\n\nEXAMPLES = '''\n# Note: None of these examples set aws_access_key, aws_secret_key, or region.\n# It is assumed that their matching environment variables are set.\n\n# Basic creation example:\n    - ec2_vpc:\n        state: present\n        cidr_block: 172.23.0.0/16\n        resource_tags: { \"Environment\":\"Development\" }\n        region: us-west-2\n# Full creation example with subnets and optional availability zones.\n# The absence or presence of subnets deletes or creates them respectively.\n    - ec2_vpc:\n        state: present\n        cidr_block: 172.22.0.0/16\n        resource_tags: { \"Environment\":\"Development\" }\n        subnets:\n          - cidr: 172.22.1.0/24\n            az: us-west-2c\n            resource_tags: { \"Environment\":\"Dev\", \"Tier\" : \"Web\" }\n          - cidr: 172.22.2.0/24\n            az: us-west-2b\n            resource_tags: { \"Environment\":\"Dev\", \"Tier\" : \"App\" }\n          - cidr: 172.22.3.0/24\n            az: us-west-2a\n            resource_tags: { \"Environment\":\"Dev\", \"Tier\" : \"DB\" }\n        internet_gateway: True\n        route_tables:\n          - subnets:\n              - 172.22.2.0/24\n              - 172.22.3.0/24\n            routes:\n              - dest: 0.0.0.0/0\n                gw: igw\n          - subnets:\n              - 172.22.1.0/24\n            routes:\n              - dest: 0.0.0.0/0\n                gw: igw\n        region: us-west-2\n      register: vpc\n\n# Removal of a VPC by id\n    - ec2_vpc:\n        state: absent\n        vpc_id: vpc-aaaaaaa\n        region: us-west-2\n# If you have added elements not managed by this module, e.g. instances, NATs, etc then\n# the delete will fail until those dependencies are removed.\n'''\n\nfrom ansible.module_utils.common.removed import removed_module\n\nif __name__ == '__main__':\n    removed_module()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "_ec2_vpc.py", "id": "3fbe40e116c34673c714db36a73b5dfe", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/cloud/amazon/_ec2_vpc.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}