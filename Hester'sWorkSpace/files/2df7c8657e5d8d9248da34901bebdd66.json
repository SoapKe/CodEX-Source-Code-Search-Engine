{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestPriorityQueue(object):\n\n    def test_priority_queue(self):\n        priority_queue = PriorityQueue()\n        assert_equal(priority_queue.extract_min(), None)\n        priority_queue.insert(PriorityQueueNode('a', 20))\n        priority_queue.insert(PriorityQueueNode('b', 5))\n        priority_queue.insert(PriorityQueueNode('c', 15))\n        priority_queue.insert(PriorityQueueNode('d', 22))\n        priority_queue.insert(PriorityQueueNode('e', 40))\n        priority_queue.insert(PriorityQueueNode('f', 3))\n        priority_queue.decrease_key('f', 2)\n        priority_queue.decrease_key('a', 19)\n        mins = []\n        while priority_queue.array:\n            mins.append(priority_queue.extract_min().key)\n        assert_equal(mins, [2, 5, 15, 19, 22, 40])\n        print('Success: test_min_heap')\n\n\ndef main():\n    test = TestPriorityQueue()\n    test.test_priority_queue()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\n\n\nclass TestPriorityQueue(object):\n\n    def test_priority_queue(self):\n        priority_queue = PriorityQueue()\n        assert_equal(priority_queue.extract_min(), None)\n        priority_queue.insert(PriorityQueueNode('a', 20))\n        priority_queue.insert(PriorityQueueNode('b', 5))\n        priority_queue.insert(PriorityQueueNode('c', 15))\n        priority_queue.insert(PriorityQueueNode('d', 22))\n        priority_queue.insert(PriorityQueueNode('e', 40))\n        priority_queue.insert(PriorityQueueNode('f', 3))\n        priority_queue.decrease_key('f', 2)\n        priority_queue.decrease_key('a', 19)\n        mins = []\n        while priority_queue.array:\n            mins.append(priority_queue.extract_min().key)\n        assert_equal(mins, [2, 5, 15, 19, 22, 40])\n        print('Success: test_min_heap')\n\n\ndef main():\n    test = TestPriorityQueue()\n    test.test_priority_queue()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_priority_queue.py", "id": "2df7c8657e5d8d9248da34901bebdd66", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/arrays_strings/priority_queue/test_priority_queue.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:58:04Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}