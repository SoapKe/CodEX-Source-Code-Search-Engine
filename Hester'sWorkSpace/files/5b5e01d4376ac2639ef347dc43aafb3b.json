{"author": "django", "code": "from datetime import date, datetime, time\n\nfrom django.forms import SplitDateTimeWidget\n\nfrom .base import WidgetTest\n\n\nclass SplitDateTimeWidgetTest(WidgetTest):\n    widget = SplitDateTimeWidget()\n\n    def test_render_empty(self):\n        self.check_html(self.widget, 'date', '', html=(\n            '<input type=\"text\" name=\"date_0\"><input type=\"text\" name=\"date_1\">'\n        ))\n\n    def test_render_none(self):\n        self.check_html(self.widget, 'date', None, html=(\n            '<input type=\"text\" name=\"date_0\"><input type=\"text\" name=\"date_1\">'\n        ))\n\n    def test_render_datetime(self):\n        self.check_html(self.widget, 'date', datetime(2006, 1, 10, 7, 30), html=(\n            '<input type=\"text\" name=\"date_0\" value=\"2006-01-10\">'\n            '<input type=\"text\" name=\"date_1\" value=\"07:30:00\">'\n        ))\n\n    def test_render_date_and_time(self):\n        self.check_html(self.widget, 'date', [date(2006, 1, 10), time(7, 30)], html=(\n            '<input type=\"text\" name=\"date_0\" value=\"2006-01-10\">'\n            '<input type=\"text\" name=\"date_1\" value=\"07:30:00\">'\n        ))\n\n    def test_constructor_attrs(self):\n        widget = SplitDateTimeWidget(attrs={'class': 'pretty'})\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=(\n            '<input type=\"text\" class=\"pretty\" value=\"2006-01-10\" name=\"date_0\">'\n            '<input type=\"text\" class=\"pretty\" value=\"07:30:00\" name=\"date_1\">'\n        ))\n\n    def test_constructor_different_attrs(self):\n        html = (\n            '<input type=\"text\" class=\"foo\" value=\"2006-01-10\" name=\"date_0\">'\n            '<input type=\"text\" class=\"bar\" value=\"07:30:00\" name=\"date_1\">'\n        )\n        widget = SplitDateTimeWidget(date_attrs={'class': 'foo'}, time_attrs={'class': 'bar'})\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=html)\n        widget = SplitDateTimeWidget(date_attrs={'class': 'foo'}, attrs={'class': 'bar'})\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=html)\n        widget = SplitDateTimeWidget(time_attrs={'class': 'bar'}, attrs={'class': 'foo'})\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=html)\n\n    def test_formatting(self):\n        \n        widget = SplitDateTimeWidget(\n            date_format='%d/%m/%Y', time_format='%H:%M',\n        )\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=(\n            '<input type=\"text\" name=\"date_0\" value=\"10/01/2006\">'\n            '<input type=\"text\" name=\"date_1\" value=\"07:30\">'\n        ))\n", "comments": "            use  date format   time format  change way value         displayed              ", "content": "from datetime import date, datetime, time\n\nfrom django.forms import SplitDateTimeWidget\n\nfrom .base import WidgetTest\n\n\nclass SplitDateTimeWidgetTest(WidgetTest):\n    widget = SplitDateTimeWidget()\n\n    def test_render_empty(self):\n        self.check_html(self.widget, 'date', '', html=(\n            '<input type=\"text\" name=\"date_0\"><input type=\"text\" name=\"date_1\">'\n        ))\n\n    def test_render_none(self):\n        self.check_html(self.widget, 'date', None, html=(\n            '<input type=\"text\" name=\"date_0\"><input type=\"text\" name=\"date_1\">'\n        ))\n\n    def test_render_datetime(self):\n        self.check_html(self.widget, 'date', datetime(2006, 1, 10, 7, 30), html=(\n            '<input type=\"text\" name=\"date_0\" value=\"2006-01-10\">'\n            '<input type=\"text\" name=\"date_1\" value=\"07:30:00\">'\n        ))\n\n    def test_render_date_and_time(self):\n        self.check_html(self.widget, 'date', [date(2006, 1, 10), time(7, 30)], html=(\n            '<input type=\"text\" name=\"date_0\" value=\"2006-01-10\">'\n            '<input type=\"text\" name=\"date_1\" value=\"07:30:00\">'\n        ))\n\n    def test_constructor_attrs(self):\n        widget = SplitDateTimeWidget(attrs={'class': 'pretty'})\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=(\n            '<input type=\"text\" class=\"pretty\" value=\"2006-01-10\" name=\"date_0\">'\n            '<input type=\"text\" class=\"pretty\" value=\"07:30:00\" name=\"date_1\">'\n        ))\n\n    def test_constructor_different_attrs(self):\n        html = (\n            '<input type=\"text\" class=\"foo\" value=\"2006-01-10\" name=\"date_0\">'\n            '<input type=\"text\" class=\"bar\" value=\"07:30:00\" name=\"date_1\">'\n        )\n        widget = SplitDateTimeWidget(date_attrs={'class': 'foo'}, time_attrs={'class': 'bar'})\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=html)\n        widget = SplitDateTimeWidget(date_attrs={'class': 'foo'}, attrs={'class': 'bar'})\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=html)\n        widget = SplitDateTimeWidget(time_attrs={'class': 'bar'}, attrs={'class': 'foo'})\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=html)\n\n    def test_formatting(self):\n        \"\"\"\n        Use 'date_format' and 'time_format' to change the way a value is\n        displayed.\n        \"\"\"\n        widget = SplitDateTimeWidget(\n            date_format='%d/%m/%Y', time_format='%H:%M',\n        )\n        self.check_html(widget, 'date', datetime(2006, 1, 10, 7, 30), html=(\n            '<input type=\"text\" name=\"date_0\" value=\"10/01/2006\">'\n            '<input type=\"text\" name=\"date_1\" value=\"07:30\">'\n        ))\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_splitdatetimewidget.py", "id": "5b5e01d4376ac2639ef347dc43aafb3b", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/forms_tests/widget_tests/test_splitdatetimewidget.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}