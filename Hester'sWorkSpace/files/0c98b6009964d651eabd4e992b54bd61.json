{"author": "nvbn", "code": "import os\nimport pytest\nfrom thefuck import shells\nfrom thefuck import conf, const\nfrom thefuck.system import Path\n\nshells.shell = shells.Generic()\n\n\ndef pytest_addoption(parser):\n    \n    group = parser.getgroup(\"thefuck\")\n    group.addoption('--enable-functional', action=\"store_true\", default=False,\n                    help=\"Enable functional tests\")\n\n\n@pytest.fixture\ndef no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)\n\n\n@pytest.fixture(autouse=True)\ndef settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings\n\n\n@pytest.fixture\ndef no_colors(settings):\n    settings.no_colors = True\n\n\n@pytest.fixture(autouse=True)\ndef no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)\n\n\n@pytest.fixture(autouse=True)\ndef functional(request):\n    if request.node.get_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')\n\n\n@pytest.fixture\ndef source_root():\n    return Path(__file__).parent.parent.resolve()\n\n\n@pytest.fixture\ndef set_shell(monkeypatch):\n    def _set(cls):\n        shell = cls()\n        monkeypatch.setattr('thefuck.shells.shell', shell)\n        return shell\n\n    return _set\n\n\n@pytest.fixture(autouse=True)\ndef os_environ(monkeypatch):\n    env = {'PATH': os.environ['PATH']}\n    monkeypatch.setattr('os.environ', env)\n    return env\n", "comments": "Adds `--enable-functional` argument.\n.\n", "content": "import os\nimport pytest\nfrom thefuck import shells\nfrom thefuck import conf, const\nfrom thefuck.system import Path\n\nshells.shell = shells.Generic()\n\n\ndef pytest_addoption(parser):\n    \"\"\"Adds `--enable-functional` argument.\"\"\"\n    group = parser.getgroup(\"thefuck\")\n    group.addoption('--enable-functional', action=\"store_true\", default=False,\n                    help=\"Enable functional tests\")\n\n\n@pytest.fixture\ndef no_memoize(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.memoize.disabled', True)\n\n\n@pytest.fixture(autouse=True)\ndef settings(request):\n    def _reset_settings():\n        conf.settings.clear()\n        conf.settings.update(const.DEFAULT_SETTINGS)\n\n    request.addfinalizer(_reset_settings)\n    conf.settings.user_dir = Path('~/.thefuck')\n    return conf.settings\n\n\n@pytest.fixture\ndef no_colors(settings):\n    settings.no_colors = True\n\n\n@pytest.fixture(autouse=True)\ndef no_cache(monkeypatch):\n    monkeypatch.setattr('thefuck.utils.cache.disabled', True)\n\n\n@pytest.fixture(autouse=True)\ndef functional(request):\n    if request.node.get_marker('functional') \\\n            and not request.config.getoption('enable_functional'):\n        pytest.skip('functional tests are disabled')\n\n\n@pytest.fixture\ndef source_root():\n    return Path(__file__).parent.parent.resolve()\n\n\n@pytest.fixture\ndef set_shell(monkeypatch):\n    def _set(cls):\n        shell = cls()\n        monkeypatch.setattr('thefuck.shells.shell', shell)\n        return shell\n\n    return _set\n\n\n@pytest.fixture(autouse=True)\ndef os_environ(monkeypatch):\n    env = {'PATH': os.environ['PATH']}\n    monkeypatch.setattr('os.environ', env)\n    return env\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "conftest.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/conftest.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}