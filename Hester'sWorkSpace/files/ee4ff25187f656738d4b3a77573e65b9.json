{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    js_to_json,\n)\n\n\nclass MuenchenTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?muenchen\\.tv/livestream'\n    IE_DESC = 'm\u00fcnchen.tv'\n    _TEST = {\n        'url': 'http://www.muenchen.tv/livestream/',\n        'info_dict': {\n            'id': '5334',\n            'display_id': 'live',\n            'ext': 'mp4',\n            'title': 're:^m\u00fcnchen.tv-Livestream [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'is_live': True,\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = 'live'\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._live_title(self._og_search_title(webpage))\n\n        data_js = self._search_regex(\n            r'(?s)\\nplaylist:\\s*(\\[.*?}\\]),',\n            webpage, 'playlist configuration')\n        data_json = js_to_json(data_js)\n        data = json.loads(data_json)[0]\n\n        video_id = data['mediaid']\n        thumbnail = data.get('image')\n\n        formats = []\n        for format_num, s in enumerate(data['sources']):\n            ext = determine_ext(s['file'], None)\n            label_str = s.get('label')\n            if label_str is None:\n                label_str = '_%d' % format_num\n\n            if ext is None:\n                format_id = label_str\n            else:\n                format_id = '%s-%s' % (ext, label_str)\n\n            formats.append({\n                'url': s['file'],\n                'tbr': int_or_none(s.get('label')),\n                'ext': 'mp4',\n                'format_id': format_id,\n                'preference': -100 if '.smil' in s['file'] else 0,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'formats': formats,\n            'is_live': True,\n            'thumbnail': thumbnail,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    js_to_json,\n)\n\n\nclass MuenchenTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?muenchen\\.tv/livestream'\n    IE_DESC = 'm\u00fcnchen.tv'\n    _TEST = {\n        'url': 'http://www.muenchen.tv/livestream/',\n        'info_dict': {\n            'id': '5334',\n            'display_id': 'live',\n            'ext': 'mp4',\n            'title': 're:^m\u00fcnchen.tv-Livestream [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'is_live': True,\n            'thumbnail': r're:^https?://.*\\.jpg$'\n        },\n        'params': {\n            'skip_download': True,\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = 'live'\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._live_title(self._og_search_title(webpage))\n\n        data_js = self._search_regex(\n            r'(?s)\\nplaylist:\\s*(\\[.*?}\\]),',\n            webpage, 'playlist configuration')\n        data_json = js_to_json(data_js)\n        data = json.loads(data_json)[0]\n\n        video_id = data['mediaid']\n        thumbnail = data.get('image')\n\n        formats = []\n        for format_num, s in enumerate(data['sources']):\n            ext = determine_ext(s['file'], None)\n            label_str = s.get('label')\n            if label_str is None:\n                label_str = '_%d' % format_num\n\n            if ext is None:\n                format_id = label_str\n            else:\n                format_id = '%s-%s' % (ext, label_str)\n\n            formats.append({\n                'url': s['file'],\n                'tbr': int_or_none(s.get('label')),\n                'ext': 'mp4',\n                'format_id': format_id,\n                'preference': -100 if '.smil' in s['file'] else 0,\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'formats': formats,\n            'is_live': True,\n            'thumbnail': thumbnail,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "muenchentv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/muenchentv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}