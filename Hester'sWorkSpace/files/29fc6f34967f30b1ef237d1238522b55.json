{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    qualities,\n)\n\n\nclass TeacherTubeIE(InfoExtractor):\n    IE_NAME = 'teachertube'\n    IE_DESC = 'teachertube.com videos'\n\n    _VALID_URL = r'https?://(?:www\\.)?teachertube\\.com/(viewVideo\\.php\\?video_id=|music\\.php\\?music_id=|video/(?:[\\da-z-]+-)?|audio/)(?P<id>\\d+)'\n\n    _TESTS = [{\n        \n        'url': 'http://www.teachertube.com/viewVideo.php?video_id=339997',\n        'md5': 'f9434ef992fd65936d72999951ee254c',\n        'info_dict': {\n            'id': '339997',\n            'ext': 'mp4',\n            'title': 'Measures of dispersion from a frequency table',\n            'description': 'Measures of dispersion from a frequency table',\n            'thumbnail': r're:https?://.*\\.(?:jpg|png)',\n        },\n    }, {\n        \n        'url': 'http://www.teachertube.com/music.php?music_id=8805',\n        'md5': '01e8352006c65757caf7b961f6050e21',\n        'info_dict': {\n            'id': '8805',\n            'ext': 'mp3',\n            'title': 'PER ASPERA AD ASTRA',\n            'description': 'RADIJSKA EMISIJA ZRAKOPLOVNE TEHNI?KE ?KOLE P',\n        },\n    }, {\n        \n        'url': 'http://www.teachertube.com/video/intro-video-schleicher-297790',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        error = self._search_regex(\n            r'<div\\b[^>]+\\bclass=[\"\\']msgBox error[^>]+>([^<]+)', webpage,\n            'error', default=None)\n        if error:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n        title = self._html_search_meta('title', webpage, 'title', fatal=True)\n        TITLE_SUFFIX = ' - TeacherTube'\n        if title.endswith(TITLE_SUFFIX):\n            title = title[:-len(TITLE_SUFFIX)].strip()\n\n        description = self._html_search_meta('description', webpage, 'description')\n        if description:\n            description = description.strip()\n\n        quality = qualities(['mp3', 'flv', 'mp4'])\n\n        media_urls = re.findall(r'data-contenturl=\"([^\"]+)\"', webpage)\n        media_urls.extend(re.findall(r'var\\s+filePath\\s*=\\s*\"([^\"]+)\"', webpage))\n        media_urls.extend(re.findall(r'\\'file\\'\\s*:\\s*[\"\\']([^\"\\']+)[\"\\'],', webpage))\n\n        formats = [\n            {\n                'url': media_url,\n                'quality': quality(determine_ext(media_url))\n            } for media_url in set(media_urls)\n        ]\n\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(\n            webpage, default=None) or self._html_search_meta(\n            'thumbnail', webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass TeacherTubeUserIE(InfoExtractor):\n    IE_NAME = 'teachertube:user:collection'\n    IE_DESC = 'teachertube.com user and collection videos'\n\n    _VALID_URL = r'https?://(?:www\\.)?teachertube\\.com/(user/profile|collection)/(?P<user>[0-9a-zA-Z]+)/?'\n\n    _MEDIA_RE = r\n    _TEST = {\n        'url': 'http://www.teachertube.com/user/profile/rbhagwati2',\n        'info_dict': {\n            'id': 'rbhagwati2'\n        },\n        'playlist_mincount': 179,\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user_id = mobj.group('user')\n\n        urls = []\n        webpage = self._download_webpage(url, user_id)\n        urls.extend(re.findall(self._MEDIA_RE, webpage))\n\n        pages = re.findall(r'/ajax-user/user-videos/%s\\?page=([0-9]+)' % user_id, webpage)[:-1]\n        for p in pages:\n            more = 'http://www.teachertube.com/ajax-user/user-videos/%s?page=%s' % (user_id, p)\n            webpage = self._download_webpage(more, user_id, 'Downloading page %s/%s' % (p, len(pages)))\n            video_urls = re.findall(self._MEDIA_RE, webpage)\n            urls.extend(video_urls)\n\n        entries = [self.url_result(vurl, 'TeacherTube') for vurl in urls]\n        return self.playlist_result(entries, user_id)\n", "comments": "(?sx)\n        class=\"?sidebar_thumb_time\"?>[0-9:]+</div>\n        \\s*\n        <a\\s+href=\"(https?://(?:www\\.)?teachertube\\.com/(?:video|audio)/[^\"]+)\"\n    \n \n# coding: utf-8\n# flowplayer\n# jwplayer\n# unavailable video\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    qualities,\n)\n\n\nclass TeacherTubeIE(InfoExtractor):\n    IE_NAME = 'teachertube'\n    IE_DESC = 'teachertube.com videos'\n\n    _VALID_URL = r'https?://(?:www\\.)?teachertube\\.com/(viewVideo\\.php\\?video_id=|music\\.php\\?music_id=|video/(?:[\\da-z-]+-)?|audio/)(?P<id>\\d+)'\n\n    _TESTS = [{\n        # flowplayer\n        'url': 'http://www.teachertube.com/viewVideo.php?video_id=339997',\n        'md5': 'f9434ef992fd65936d72999951ee254c',\n        'info_dict': {\n            'id': '339997',\n            'ext': 'mp4',\n            'title': 'Measures of dispersion from a frequency table',\n            'description': 'Measures of dispersion from a frequency table',\n            'thumbnail': r're:https?://.*\\.(?:jpg|png)',\n        },\n    }, {\n        # jwplayer\n        'url': 'http://www.teachertube.com/music.php?music_id=8805',\n        'md5': '01e8352006c65757caf7b961f6050e21',\n        'info_dict': {\n            'id': '8805',\n            'ext': 'mp3',\n            'title': 'PER ASPERA AD ASTRA',\n            'description': 'RADIJSKA EMISIJA ZRAKOPLOVNE TEHNI?KE ?KOLE P',\n        },\n    }, {\n        # unavailable video\n        'url': 'http://www.teachertube.com/video/intro-video-schleicher-297790',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        error = self._search_regex(\n            r'<div\\b[^>]+\\bclass=[\"\\']msgBox error[^>]+>([^<]+)', webpage,\n            'error', default=None)\n        if error:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error), expected=True)\n\n        title = self._html_search_meta('title', webpage, 'title', fatal=True)\n        TITLE_SUFFIX = ' - TeacherTube'\n        if title.endswith(TITLE_SUFFIX):\n            title = title[:-len(TITLE_SUFFIX)].strip()\n\n        description = self._html_search_meta('description', webpage, 'description')\n        if description:\n            description = description.strip()\n\n        quality = qualities(['mp3', 'flv', 'mp4'])\n\n        media_urls = re.findall(r'data-contenturl=\"([^\"]+)\"', webpage)\n        media_urls.extend(re.findall(r'var\\s+filePath\\s*=\\s*\"([^\"]+)\"', webpage))\n        media_urls.extend(re.findall(r'\\'file\\'\\s*:\\s*[\"\\']([^\"\\']+)[\"\\'],', webpage))\n\n        formats = [\n            {\n                'url': media_url,\n                'quality': quality(determine_ext(media_url))\n            } for media_url in set(media_urls)\n        ]\n\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(\n            webpage, default=None) or self._html_search_meta(\n            'thumbnail', webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'formats': formats,\n        }\n\n\nclass TeacherTubeUserIE(InfoExtractor):\n    IE_NAME = 'teachertube:user:collection'\n    IE_DESC = 'teachertube.com user and collection videos'\n\n    _VALID_URL = r'https?://(?:www\\.)?teachertube\\.com/(user/profile|collection)/(?P<user>[0-9a-zA-Z]+)/?'\n\n    _MEDIA_RE = r'''(?sx)\n        class=\"?sidebar_thumb_time\"?>[0-9:]+</div>\n        \\s*\n        <a\\s+href=\"(https?://(?:www\\.)?teachertube\\.com/(?:video|audio)/[^\"]+)\"\n    '''\n    _TEST = {\n        'url': 'http://www.teachertube.com/user/profile/rbhagwati2',\n        'info_dict': {\n            'id': 'rbhagwati2'\n        },\n        'playlist_mincount': 179,\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        user_id = mobj.group('user')\n\n        urls = []\n        webpage = self._download_webpage(url, user_id)\n        urls.extend(re.findall(self._MEDIA_RE, webpage))\n\n        pages = re.findall(r'/ajax-user/user-videos/%s\\?page=([0-9]+)' % user_id, webpage)[:-1]\n        for p in pages:\n            more = 'http://www.teachertube.com/ajax-user/user-videos/%s?page=%s' % (user_id, p)\n            webpage = self._download_webpage(more, user_id, 'Downloading page %s/%s' % (p, len(pages)))\n            video_urls = re.findall(self._MEDIA_RE, webpage)\n            urls.extend(video_urls)\n\n        entries = [self.url_result(vurl, 'TeacherTube') for vurl in urls]\n        return self.playlist_result(entries, user_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "teachertube.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/teachertube.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}