{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_gtm_server import ApiParameters\n    from library.bigip_gtm_server import ModuleParameters\n    from library.bigip_gtm_server import ModuleManager\n    from library.bigip_gtm_server import V1Manager\n    from library.bigip_gtm_server import V2Manager\n    from library.bigip_gtm_server import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_gtm_server import ApiParameters\n        from ansible.modules.network.f5.bigip_gtm_server import ModuleParameters\n        from ansible.modules.network.f5.bigip_gtm_server import ModuleManager\n        from ansible.modules.network.f5.bigip_gtm_server import V1Manager\n        from ansible.modules.network.f5.bigip_gtm_server import V2Manager\n        from ansible.modules.network.f5.bigip_gtm_server import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='GTM_Server',\n            datacenter='New York',\n            partition='Common',\n            server_type='bigip',\n            link_discovery='disabled',\n            virtual_server_discovery='disabled',\n            devices=[\n                dict(\n                    name='server_1',\n                    address='1.1.1.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.1',\n                    translation='192.168.2.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.2'\n                ),\n                dict(\n                    name='server_3',\n                    addresses=[\n                        dict(\n                            address='3.3.3.1'\n                        ),\n                        dict(\n                            address='3.3.3.2'\n                        )\n                    ]\n                ),\n                dict(\n                    name='server_4',\n                    addresses=[\n                        dict(\n                            address='4.4.4.1',\n                            translation='192.168.14.1'\n                        ),\n                        dict(\n                            address='4.4.4.2'\n                        )\n                    ]\n                )\n            ]\n        )\n\n        p = ModuleParameters(params=args)\n        assert p.name == 'GTM_Server'\n        assert p.datacenter == '/Common/New York'\n        assert p.server_type == 'bigip'\n        assert p.link_discovery == 'disabled'\n        assert p.virtual_server_discovery == 'disabled'\n\n    def test_api_parameters(self):\n        args = load_fixture('load_gtm_server_1.json')\n\n        p = ApiParameters(params=args)\n        assert p.name == 'baz'\n        assert p.datacenter == '/Common/foo'\n        assert p.server_type == 'bigip'\n        assert p.link_discovery == 'disabled'\n        assert p.virtual_server_discovery == 'disabled'\n\n\nclass TestV1Manager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create(self, *args):\n        set_module_args(dict(\n            server='lb.mydomain.com',\n            user='admin',\n            password='secret',\n            name='GTM_Server',\n            datacenter='/Common/New York',\n            server_type='bigip',\n            link_discovery='disabled',\n            virtual_server_discovery='disabled',\n            devices=[\n                dict(\n                    name='server_1',\n                    address='1.1.1.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.1',\n                    translation='192.168.2.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.2'\n                ),\n                dict(\n                    name='server_3',\n                    addresses=[\n                        dict(\n                            address='3.3.3.1'\n                        ),\n                        dict(\n                            address='3.3.3.2'\n                        )\n                    ]\n                ),\n                dict(\n                    name='server_4',\n                    addresses=[\n                        dict(\n                            address='4.4.4.1',\n                            translation='192.168.14.1'\n                        ),\n                        dict(\n                            address='4.4.4.2'\n                        )\n                    ]\n                )\n            ]\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        m1 = V1Manager(module=module, params=module.params)\n        m1.exists = Mock(side_effect=[False, True])\n        m1.create_on_device = Mock(return_value=True)\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=m1)\n        mm.version_is_less_than = Mock(return_value=True)\n        mm.gtm_provisioned = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['server_type'] == 'bigip'\n\n\nclass TestV2Manager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create(self, *args):\n        set_module_args(dict(\n            server='lb.mydomain.com',\n            user='admin',\n            password='secret',\n            name='GTM_Server',\n            datacenter='/Common/New York',\n            server_type='bigip',\n            link_discovery='disabled',\n            virtual_server_discovery='disabled',\n            devices=[\n                dict(\n                    name='server_1',\n                    address='1.1.1.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.1',\n                    translation='192.168.2.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.2'\n                ),\n                dict(\n                    name='server_3',\n                    addresses=[\n                        dict(\n                            address='3.3.3.1'\n                        ),\n                        dict(\n                            address='3.3.3.2'\n                        )\n                    ]\n                ),\n                dict(\n                    name='server_4',\n                    addresses=[\n                        dict(\n                            address='4.4.4.1',\n                            translation='192.168.14.1'\n                        ),\n                        dict(\n                            address='4.4.4.2'\n                        )\n                    ]\n                )\n            ]\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        m1 = V2Manager(module=module)\n        m1.exists = Mock(side_effect=[False, True])\n        m1.create_on_device = Mock(return_value=True)\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=m1)\n        mm.version_is_less_than = Mock(return_value=False)\n        mm.gtm_provisioned = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['server_type'] == 'bigip'\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods specific type manager    override methods specific type manager ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_gtm_server import ApiParameters\n    from library.bigip_gtm_server import ModuleParameters\n    from library.bigip_gtm_server import ModuleManager\n    from library.bigip_gtm_server import V1Manager\n    from library.bigip_gtm_server import V2Manager\n    from library.bigip_gtm_server import ArgumentSpec\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_gtm_server import ApiParameters\n        from ansible.modules.network.f5.bigip_gtm_server import ModuleParameters\n        from ansible.modules.network.f5.bigip_gtm_server import ModuleManager\n        from ansible.modules.network.f5.bigip_gtm_server import V1Manager\n        from ansible.modules.network.f5.bigip_gtm_server import V2Manager\n        from ansible.modules.network.f5.bigip_gtm_server import ArgumentSpec\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        args = dict(\n            name='GTM_Server',\n            datacenter='New York',\n            partition='Common',\n            server_type='bigip',\n            link_discovery='disabled',\n            virtual_server_discovery='disabled',\n            devices=[\n                dict(\n                    name='server_1',\n                    address='1.1.1.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.1',\n                    translation='192.168.2.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.2'\n                ),\n                dict(\n                    name='server_3',\n                    addresses=[\n                        dict(\n                            address='3.3.3.1'\n                        ),\n                        dict(\n                            address='3.3.3.2'\n                        )\n                    ]\n                ),\n                dict(\n                    name='server_4',\n                    addresses=[\n                        dict(\n                            address='4.4.4.1',\n                            translation='192.168.14.1'\n                        ),\n                        dict(\n                            address='4.4.4.2'\n                        )\n                    ]\n                )\n            ]\n        )\n\n        p = ModuleParameters(params=args)\n        assert p.name == 'GTM_Server'\n        assert p.datacenter == '/Common/New York'\n        assert p.server_type == 'bigip'\n        assert p.link_discovery == 'disabled'\n        assert p.virtual_server_discovery == 'disabled'\n\n    def test_api_parameters(self):\n        args = load_fixture('load_gtm_server_1.json')\n\n        p = ApiParameters(params=args)\n        assert p.name == 'baz'\n        assert p.datacenter == '/Common/foo'\n        assert p.server_type == 'bigip'\n        assert p.link_discovery == 'disabled'\n        assert p.virtual_server_discovery == 'disabled'\n\n\nclass TestV1Manager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create(self, *args):\n        set_module_args(dict(\n            server='lb.mydomain.com',\n            user='admin',\n            password='secret',\n            name='GTM_Server',\n            datacenter='/Common/New York',\n            server_type='bigip',\n            link_discovery='disabled',\n            virtual_server_discovery='disabled',\n            devices=[\n                dict(\n                    name='server_1',\n                    address='1.1.1.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.1',\n                    translation='192.168.2.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.2'\n                ),\n                dict(\n                    name='server_3',\n                    addresses=[\n                        dict(\n                            address='3.3.3.1'\n                        ),\n                        dict(\n                            address='3.3.3.2'\n                        )\n                    ]\n                ),\n                dict(\n                    name='server_4',\n                    addresses=[\n                        dict(\n                            address='4.4.4.1',\n                            translation='192.168.14.1'\n                        ),\n                        dict(\n                            address='4.4.4.2'\n                        )\n                    ]\n                )\n            ]\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        m1 = V1Manager(module=module, params=module.params)\n        m1.exists = Mock(side_effect=[False, True])\n        m1.create_on_device = Mock(return_value=True)\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=m1)\n        mm.version_is_less_than = Mock(return_value=True)\n        mm.gtm_provisioned = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['server_type'] == 'bigip'\n\n\nclass TestV2Manager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create(self, *args):\n        set_module_args(dict(\n            server='lb.mydomain.com',\n            user='admin',\n            password='secret',\n            name='GTM_Server',\n            datacenter='/Common/New York',\n            server_type='bigip',\n            link_discovery='disabled',\n            virtual_server_discovery='disabled',\n            devices=[\n                dict(\n                    name='server_1',\n                    address='1.1.1.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.1',\n                    translation='192.168.2.1'\n                ),\n                dict(\n                    name='server_2',\n                    address='2.2.2.2'\n                ),\n                dict(\n                    name='server_3',\n                    addresses=[\n                        dict(\n                            address='3.3.3.1'\n                        ),\n                        dict(\n                            address='3.3.3.2'\n                        )\n                    ]\n                ),\n                dict(\n                    name='server_4',\n                    addresses=[\n                        dict(\n                            address='4.4.4.1',\n                            translation='192.168.14.1'\n                        ),\n                        dict(\n                            address='4.4.4.2'\n                        )\n                    ]\n                )\n            ]\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        m1 = V2Manager(module=module)\n        m1.exists = Mock(side_effect=[False, True])\n        m1.create_on_device = Mock(return_value=True)\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.get_manager = Mock(return_value=m1)\n        mm.version_is_less_than = Mock(return_value=False)\n        mm.gtm_provisioned = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['server_type'] == 'bigip'\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_gtm_server.py", "id": "a58563e11b6b086af420b9b075290f3f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_gtm_server.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}