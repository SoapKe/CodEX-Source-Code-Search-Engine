{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_HTTPError\nfrom ..utils import (\n    float_or_none,\n    ExtractorError,\n)\n\n\nclass RedBullTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?redbull\\.tv/video/(?P<id>AP-\\w+)'\n    _TESTS = [{\n        \n        'url': 'https://www.redbull.tv/video/AP-1Q6XCDTAN1W11',\n        'md5': 'fb0445b98aa4394e504b413d98031d1f',\n        'info_dict': {\n            'id': 'AP-1Q6XCDTAN1W11',\n            'ext': 'mp4',\n            'title': 'ABC of... WRC - ABC of... S1E6',\n            'description': 'md5:5c7ed8f4015c8492ecf64b6ab31e7d31',\n            'duration': 1582.04,\n        },\n    }, {\n        \n        'url': 'https://www.redbull.tv/video/AP-1PMHKJFCW1W11',\n        'info_dict': {\n            'id': 'AP-1PMHKJFCW1W11',\n            'ext': 'mp4',\n            'title': 'Grime - Hashtags S2E4',\n            'description': 'md5:b5f522b89b72e1e23216e5018810bb25',\n            'duration': 904.6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        session = self._download_json(\n            'https://api.redbull.tv/v3/session', video_id,\n            note='Downloading access token', query={\n                'category': 'personal_computer',\n                'os_family': 'http',\n            })\n        if session.get('code') == 'error':\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, session['message']))\n        token = session['token']\n\n        try:\n            video = self._download_json(\n                'https://api.redbull.tv/v3/products/' + video_id,\n                video_id, note='Downloading video information',\n                headers={'Authorization': token}\n            )\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 404:\n                error_message = self._parse_json(\n                    e.cause.read().decode(), video_id)['error']\n                raise ExtractorError('%s said: %s' % (\n                    self.IE_NAME, error_message), expected=True)\n            raise\n\n        title = video['title'].strip()\n\n        formats = self._extract_m3u8_formats(\n            'https://dms.redbull.tv/v3/%s/%s/playlist.m3u8' % (video_id, token),\n            video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for resource in video.get('resources', []):\n            if resource.startswith('closed_caption_'):\n                splitted_resource = resource.split('_')\n                if splitted_resource[2]:\n                    subtitles.setdefault('en', []).append({\n                        'url': 'https://resources.redbull.tv/%s/%s' % (video_id, resource),\n                        'ext': splitted_resource[2],\n                    })\n\n        subheading = video.get('subheading')\n        if subheading:\n            title += ' - %s' % subheading\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('long_description') or video.get(\n                'short_description'),\n            'duration': float_or_none(video.get('duration'), scale=1000),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "# coding: utf-8\n# film\n# episode\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_HTTPError\nfrom ..utils import (\n    float_or_none,\n    ExtractorError,\n)\n\n\nclass RedBullTVIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?redbull\\.tv/video/(?P<id>AP-\\w+)'\n    _TESTS = [{\n        # film\n        'url': 'https://www.redbull.tv/video/AP-1Q6XCDTAN1W11',\n        'md5': 'fb0445b98aa4394e504b413d98031d1f',\n        'info_dict': {\n            'id': 'AP-1Q6XCDTAN1W11',\n            'ext': 'mp4',\n            'title': 'ABC of... WRC - ABC of... S1E6',\n            'description': 'md5:5c7ed8f4015c8492ecf64b6ab31e7d31',\n            'duration': 1582.04,\n        },\n    }, {\n        # episode\n        'url': 'https://www.redbull.tv/video/AP-1PMHKJFCW1W11',\n        'info_dict': {\n            'id': 'AP-1PMHKJFCW1W11',\n            'ext': 'mp4',\n            'title': 'Grime - Hashtags S2E4',\n            'description': 'md5:b5f522b89b72e1e23216e5018810bb25',\n            'duration': 904.6,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        session = self._download_json(\n            'https://api.redbull.tv/v3/session', video_id,\n            note='Downloading access token', query={\n                'category': 'personal_computer',\n                'os_family': 'http',\n            })\n        if session.get('code') == 'error':\n            raise ExtractorError('%s said: %s' % (\n                self.IE_NAME, session['message']))\n        token = session['token']\n\n        try:\n            video = self._download_json(\n                'https://api.redbull.tv/v3/products/' + video_id,\n                video_id, note='Downloading video information',\n                headers={'Authorization': token}\n            )\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 404:\n                error_message = self._parse_json(\n                    e.cause.read().decode(), video_id)['error']\n                raise ExtractorError('%s said: %s' % (\n                    self.IE_NAME, error_message), expected=True)\n            raise\n\n        title = video['title'].strip()\n\n        formats = self._extract_m3u8_formats(\n            'https://dms.redbull.tv/v3/%s/%s/playlist.m3u8' % (video_id, token),\n            video_id, 'mp4', entry_protocol='m3u8_native', m3u8_id='hls')\n        self._sort_formats(formats)\n\n        subtitles = {}\n        for resource in video.get('resources', []):\n            if resource.startswith('closed_caption_'):\n                splitted_resource = resource.split('_')\n                if splitted_resource[2]:\n                    subtitles.setdefault('en', []).append({\n                        'url': 'https://resources.redbull.tv/%s/%s' % (video_id, resource),\n                        'ext': splitted_resource[2],\n                    })\n\n        subheading = video.get('subheading')\n        if subheading:\n            title += ' - %s' % subheading\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video.get('long_description') or video.get(\n                'short_description'),\n            'duration': float_or_none(video.get('duration'), scale=1000),\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "redbulltv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/redbulltv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}