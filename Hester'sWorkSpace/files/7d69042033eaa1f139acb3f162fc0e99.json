{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\nimport json\nimport random\nimport re\n\nfrom ..compat import (\n    compat_parse_qs,\n    compat_str,\n)\nfrom ..utils import (\n    js_to_json,\n    strip_jsonp,\n    urlencode_postdata,\n)\n\n\nclass WeiboIE(InfoExtractor):\n    _VALID_URL = r'https?://weibo\\.com/[0-9]+/(?P<id>[a-zA-Z0-9]+)'\n    _TEST = {\n        'url': 'https://weibo.com/6275294458/Fp6RGfbff?type=comment',\n        'info_dict': {\n            'id': 'Fp6RGfbff',\n            'ext': 'mp4',\n            'title': 'You should have servants to massage you,... \u6765\u81eaHosico_\u732b - \u5fae\u535a',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        \n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        visitor_url = urlh.geturl()\n\n        if 'passport.weibo.com' in visitor_url:\n            \n            visitor_data = self._download_json(\n                'https://passport.weibo.com/visitor/genvisitor', video_id,\n                note='Generating first-visit data',\n                transform_source=strip_jsonp,\n                headers={'Referer': visitor_url},\n                data=urlencode_postdata({\n                    'cb': 'gen_callback',\n                    'fp': json.dumps({\n                        'os': '2',\n                        'browser': 'Gecko57,0,0,0',\n                        'fonts': 'undefined',\n                        'screenInfo': '1440*900*24',\n                        'plugins': '',\n                    }),\n                }))\n\n            tid = visitor_data['data']['tid']\n            cnfd = '%03d' % visitor_data['data']['confidence']\n\n            self._download_webpage(\n                'https://passport.weibo.com/visitor/visitor', video_id,\n                note='Running first-visit callback',\n                query={\n                    'a': 'incarnate',\n                    't': tid,\n                    'w': 2,\n                    'c': cnfd,\n                    'cb': 'cross_domain',\n                    'from': 'weibo',\n                    '_rand': random.random(),\n                })\n\n            webpage = self._download_webpage(\n                url, video_id, note='Revisiting webpage')\n\n        title = self._html_search_regex(\n            r'<title>(.+?)</title>', webpage, 'title')\n\n        video_formats = compat_parse_qs(self._search_regex(\n            r'video-sources=\\\\\\\"(.+?)\\\"', webpage, 'video_sources'))\n\n        formats = []\n        supported_resolutions = (480, 720)\n        for res in supported_resolutions:\n            vid_urls = video_formats.get(compat_str(res))\n            if not vid_urls or not isinstance(vid_urls, list):\n                continue\n\n            vid_url = vid_urls[0]\n            formats.append({\n                'url': vid_url,\n                'height': res,\n            })\n\n        self._sort_formats(formats)\n\n        uploader = self._og_search_property(\n            'nick-name', webpage, 'uploader', default=None)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'uploader': uploader,\n            'formats': formats\n        }\n\n\nclass WeiboMobileIE(InfoExtractor):\n    _VALID_URL = r'https?://m\\.weibo\\.cn/status/(?P<id>[0-9]+)(\\?.+)?'\n    _TEST = {\n        'url': 'https://m.weibo.cn/status/4189191225395228?wm=3333_2001&sourcetype=weixin&featurecode=newtitle&from=singlemessage&isappinstalled=0',\n        'info_dict': {\n            'id': '4189191225395228',\n            'ext': 'mp4',\n            'title': '\u5348\u7761\u5f53\u7136\u662f\u8981\u751c\u751c\u871c\u871c\u7684\u5566',\n            'uploader': '\u67f4\u72ac\u67f4\u72ac'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        \n        webpage = self._download_webpage(url, video_id, note='visit the page')\n\n        weibo_info = self._parse_json(self._search_regex(\n            r'var\\s+\\$render_data\\s*=\\s*\\[({.*})\\]\\[0\\]\\s*\\|\\|\\s*{};',\n            webpage, 'js_code', flags=re.DOTALL),\n            video_id, transform_source=js_to_json)\n\n        status_data = weibo_info.get('status', {})\n        page_info = status_data.get('page_info')\n        title = status_data['status_title']\n        uploader = status_data.get('user', {}).get('screen_name')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'uploader': uploader,\n            'url': page_info['media_info']['stream_url']\n        }\n", "comments": "# coding: utf-8\n# to get Referer url for genvisitor\n# first visit\n# to get Referer url for genvisitor\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\n\nimport json\nimport random\nimport re\n\nfrom ..compat import (\n    compat_parse_qs,\n    compat_str,\n)\nfrom ..utils import (\n    js_to_json,\n    strip_jsonp,\n    urlencode_postdata,\n)\n\n\nclass WeiboIE(InfoExtractor):\n    _VALID_URL = r'https?://weibo\\.com/[0-9]+/(?P<id>[a-zA-Z0-9]+)'\n    _TEST = {\n        'url': 'https://weibo.com/6275294458/Fp6RGfbff?type=comment',\n        'info_dict': {\n            'id': 'Fp6RGfbff',\n            'ext': 'mp4',\n            'title': 'You should have servants to massage you,... \u6765\u81eaHosico_\u732b - \u5fae\u535a',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        # to get Referer url for genvisitor\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        visitor_url = urlh.geturl()\n\n        if 'passport.weibo.com' in visitor_url:\n            # first visit\n            visitor_data = self._download_json(\n                'https://passport.weibo.com/visitor/genvisitor', video_id,\n                note='Generating first-visit data',\n                transform_source=strip_jsonp,\n                headers={'Referer': visitor_url},\n                data=urlencode_postdata({\n                    'cb': 'gen_callback',\n                    'fp': json.dumps({\n                        'os': '2',\n                        'browser': 'Gecko57,0,0,0',\n                        'fonts': 'undefined',\n                        'screenInfo': '1440*900*24',\n                        'plugins': '',\n                    }),\n                }))\n\n            tid = visitor_data['data']['tid']\n            cnfd = '%03d' % visitor_data['data']['confidence']\n\n            self._download_webpage(\n                'https://passport.weibo.com/visitor/visitor', video_id,\n                note='Running first-visit callback',\n                query={\n                    'a': 'incarnate',\n                    't': tid,\n                    'w': 2,\n                    'c': cnfd,\n                    'cb': 'cross_domain',\n                    'from': 'weibo',\n                    '_rand': random.random(),\n                })\n\n            webpage = self._download_webpage(\n                url, video_id, note='Revisiting webpage')\n\n        title = self._html_search_regex(\n            r'<title>(.+?)</title>', webpage, 'title')\n\n        video_formats = compat_parse_qs(self._search_regex(\n            r'video-sources=\\\\\\\"(.+?)\\\"', webpage, 'video_sources'))\n\n        formats = []\n        supported_resolutions = (480, 720)\n        for res in supported_resolutions:\n            vid_urls = video_formats.get(compat_str(res))\n            if not vid_urls or not isinstance(vid_urls, list):\n                continue\n\n            vid_url = vid_urls[0]\n            formats.append({\n                'url': vid_url,\n                'height': res,\n            })\n\n        self._sort_formats(formats)\n\n        uploader = self._og_search_property(\n            'nick-name', webpage, 'uploader', default=None)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'uploader': uploader,\n            'formats': formats\n        }\n\n\nclass WeiboMobileIE(InfoExtractor):\n    _VALID_URL = r'https?://m\\.weibo\\.cn/status/(?P<id>[0-9]+)(\\?.+)?'\n    _TEST = {\n        'url': 'https://m.weibo.cn/status/4189191225395228?wm=3333_2001&sourcetype=weixin&featurecode=newtitle&from=singlemessage&isappinstalled=0',\n        'info_dict': {\n            'id': '4189191225395228',\n            'ext': 'mp4',\n            'title': '\u5348\u7761\u5f53\u7136\u662f\u8981\u751c\u751c\u871c\u871c\u7684\u5566',\n            'uploader': '\u67f4\u72ac\u67f4\u72ac'\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        # to get Referer url for genvisitor\n        webpage = self._download_webpage(url, video_id, note='visit the page')\n\n        weibo_info = self._parse_json(self._search_regex(\n            r'var\\s+\\$render_data\\s*=\\s*\\[({.*})\\]\\[0\\]\\s*\\|\\|\\s*{};',\n            webpage, 'js_code', flags=re.DOTALL),\n            video_id, transform_source=js_to_json)\n\n        status_data = weibo_info.get('status', {})\n        page_info = status_data.get('page_info')\n        title = status_data['status_title']\n        uploader = status_data.get('user', {}).get('screen_name')\n\n        return {\n            'id': video_id,\n            'title': title,\n            'uploader': uploader,\n            'url': page_info['media_info']['stream_url']\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "weibo.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/weibo.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}