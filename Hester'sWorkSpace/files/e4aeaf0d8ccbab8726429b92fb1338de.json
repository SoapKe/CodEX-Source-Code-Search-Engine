{"author": "rg3", "code": "\n\n\nfrom __future__ import unicode_literals\n\n\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nfrom youtube_dl.compat import (\n    compat_getenv,\n    compat_setenv,\n    compat_etree_fromstring,\n    compat_expanduser,\n    compat_shlex_split,\n    compat_str,\n    compat_struct_unpack,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_unquote_plus,\n    compat_urllib_parse_urlencode,\n)\n\n\nclass TestCompat(unittest.TestCase):\n    def test_compat_getenv(self):\n        test_str = '\u0442\u0435\u0441\u0442'\n        compat_setenv('YOUTUBE_DL_COMPAT_GETENV', test_str)\n        self.assertEqual(compat_getenv('YOUTUBE_DL_COMPAT_GETENV'), test_str)\n\n    def test_compat_setenv(self):\n        test_var = 'YOUTUBE_DL_COMPAT_SETENV'\n        test_str = '\u0442\u0435\u0441\u0442'\n        compat_setenv(test_var, test_str)\n        compat_getenv(test_var)\n        self.assertEqual(compat_getenv(test_var), test_str)\n\n    def test_compat_expanduser(self):\n        old_home = os.environ.get('HOME')\n        test_str = 'C:\\Documents and Settings\\\u0442\u0435\u0441\u0442\\Application Data'\n        compat_setenv('HOME', test_str)\n        self.assertEqual(compat_expanduser('~'), test_str)\n        compat_setenv('HOME', old_home or '')\n\n    def test_all_present(self):\n        import youtube_dl.compat\n        all_names = youtube_dl.compat.__all__\n        present_names = set(filter(\n            lambda c: '_' in c and not c.startswith('_'),\n            dir(youtube_dl.compat))) - set(['unicode_literals'])\n        self.assertEqual(all_names, sorted(present_names))\n\n    def test_compat_urllib_parse_unquote(self):\n        self.assertEqual(compat_urllib_parse_unquote('abc%20def'), 'abc def')\n        self.assertEqual(compat_urllib_parse_unquote('%7e/abc+def'), '~/abc+def')\n        self.assertEqual(compat_urllib_parse_unquote(''), '')\n        self.assertEqual(compat_urllib_parse_unquote('%'), '%')\n        self.assertEqual(compat_urllib_parse_unquote('%%'), '%%')\n        self.assertEqual(compat_urllib_parse_unquote('%%%'), '%%%')\n        self.assertEqual(compat_urllib_parse_unquote('%2F'), '/')\n        self.assertEqual(compat_urllib_parse_unquote('%2f'), '/')\n        self.assertEqual(compat_urllib_parse_unquote('%E6%B4%A5%E6%B3%A2'), '\u6d25\u6ce2')\n        self.assertEqual(\n            compat_urllib_parse_unquote(\n        compat_etree_fromstring(xml)\n\n    def test_struct_unpack(self):\n        self.assertEqual(compat_struct_unpack('!B', b'\\x00'), (0,))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "<meta property=\"og:description\" content=\"%E2%96%81%E2%96%82%E2%96%83%E2%96%84%25%E2%96%85%E2%96%86%E2%96%87%E2%96%88\" />\n%<a href=\"https://ar.wikipedia.org/wiki/%D8%AA%D8%B3%D9%88%D9%86%D8%A7%D9%85%D9%8A\">%a'''),\n            '''<meta property=\"og:description\" content=\"\u2581\u2582\u2583\u2584%\u2585\u2586\u2587\u2588\" />\n%<a href=\"https://ar.wikipedia.org/wiki/\u062a\u0633\u0648\u0646\u0627\u0645\u064a\">%a''')\n        self.assertEqual(\n            compat_urllib_parse_unquote('''%28%5E%E2%97%A3_%E2%97%A2%5E%29%E3%81%A3%EF%B8%BB%E3%83%87%E2%95%90%E4%B8%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%86%B6%I%Break%25Things%'''),\n            '''(^\u25e3_\u25e2^)\u3063\ufe3b\u30c7\u2550\u4e00    \u21c0    \u21c0    \u21c0    \u21c0    \u21c0    \u21b6%I%Break%Things%''')\n\n    def test_compat_urllib_parse_unquote_plus(self):\n        self.assertEqual(compat_urllib_parse_unquote_plus('abc%20def'), 'abc def')\n        self.assertEqual(compat_urllib_parse_unquote_plus('%7e/abc+def'), '~/abc def')\n\n    def test_compat_urllib_parse_urlencode(self):\n        self.assertEqual(compat_urllib_parse_urlencode({'abc': 'def'}), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode({'abc': b'def'}), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode({b'abc': 'def'}), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode({b'abc': b'def'}), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode([('abc', 'def')]), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode([('abc', b'def')]), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode([(b'abc', 'def')]), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode([(b'abc', b'def')]), 'abc=def')\n\n    def test_compat_shlex_split(self):\n        self.assertEqual(compat_shlex_split('-option \"one two\"'), ['-option', 'one two'])\n        self.assertEqual(compat_shlex_split('-option \"one\\ntwo\" \\n -flag'), ['-option', 'one\\ntwo', '-flag'])\n        self.assertEqual(compat_shlex_split('-val \u4e2d\u6587'), ['-val', '\u4e2d\u6587'])\n\n    def test_compat_etree_fromstring(self):\n        xml = '''\n            <root foo=\"bar\" spam=\"\u4e2d\u6587\">\n                <normal>foo</normal>\n                <chinese>\u4e2d\u6587</chinese>\n                <foo><bar>spam</bar></foo>\n            </root>\n        '''\n        doc = compat_etree_fromstring(xml.encode('utf-8'))\n        self.assertTrue(isinstance(doc.attrib['foo'], compat_str))\n        self.assertTrue(isinstance(doc.attrib['spam'], compat_str))\n        self.assertTrue(isinstance(doc.find('normal').text, compat_str))\n        self.assertTrue(isinstance(doc.find('chinese').text, compat_str))\n        self.assertTrue(isinstance(doc.find('foo/bar').text, compat_str))\n\n    def test_compat_etree_fromstring_doctype(self):\n        xml = '''<?xml version=\"1.0\"?>\n<!DOCTYPE smil PUBLIC \"-//W3C//DTD SMIL 2.0//EN\" \"http://www.w3.org/2001/SMIL20/SMIL20.dtd\">\n<smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\"></smil>\n>\n#!/usr/bin/env python\n# coding: utf-8\n# Allow direct execution\n", "content": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nfrom youtube_dl.compat import (\n    compat_getenv,\n    compat_setenv,\n    compat_etree_fromstring,\n    compat_expanduser,\n    compat_shlex_split,\n    compat_str,\n    compat_struct_unpack,\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_unquote_plus,\n    compat_urllib_parse_urlencode,\n)\n\n\nclass TestCompat(unittest.TestCase):\n    def test_compat_getenv(self):\n        test_str = '\u0442\u0435\u0441\u0442'\n        compat_setenv('YOUTUBE_DL_COMPAT_GETENV', test_str)\n        self.assertEqual(compat_getenv('YOUTUBE_DL_COMPAT_GETENV'), test_str)\n\n    def test_compat_setenv(self):\n        test_var = 'YOUTUBE_DL_COMPAT_SETENV'\n        test_str = '\u0442\u0435\u0441\u0442'\n        compat_setenv(test_var, test_str)\n        compat_getenv(test_var)\n        self.assertEqual(compat_getenv(test_var), test_str)\n\n    def test_compat_expanduser(self):\n        old_home = os.environ.get('HOME')\n        test_str = 'C:\\Documents and Settings\\\u0442\u0435\u0441\u0442\\Application Data'\n        compat_setenv('HOME', test_str)\n        self.assertEqual(compat_expanduser('~'), test_str)\n        compat_setenv('HOME', old_home or '')\n\n    def test_all_present(self):\n        import youtube_dl.compat\n        all_names = youtube_dl.compat.__all__\n        present_names = set(filter(\n            lambda c: '_' in c and not c.startswith('_'),\n            dir(youtube_dl.compat))) - set(['unicode_literals'])\n        self.assertEqual(all_names, sorted(present_names))\n\n    def test_compat_urllib_parse_unquote(self):\n        self.assertEqual(compat_urllib_parse_unquote('abc%20def'), 'abc def')\n        self.assertEqual(compat_urllib_parse_unquote('%7e/abc+def'), '~/abc+def')\n        self.assertEqual(compat_urllib_parse_unquote(''), '')\n        self.assertEqual(compat_urllib_parse_unquote('%'), '%')\n        self.assertEqual(compat_urllib_parse_unquote('%%'), '%%')\n        self.assertEqual(compat_urllib_parse_unquote('%%%'), '%%%')\n        self.assertEqual(compat_urllib_parse_unquote('%2F'), '/')\n        self.assertEqual(compat_urllib_parse_unquote('%2f'), '/')\n        self.assertEqual(compat_urllib_parse_unquote('%E6%B4%A5%E6%B3%A2'), '\u6d25\u6ce2')\n        self.assertEqual(\n            compat_urllib_parse_unquote('''<meta property=\"og:description\" content=\"%E2%96%81%E2%96%82%E2%96%83%E2%96%84%25%E2%96%85%E2%96%86%E2%96%87%E2%96%88\" />\n%<a href=\"https://ar.wikipedia.org/wiki/%D8%AA%D8%B3%D9%88%D9%86%D8%A7%D9%85%D9%8A\">%a'''),\n            '''<meta property=\"og:description\" content=\"\u2581\u2582\u2583\u2584%\u2585\u2586\u2587\u2588\" />\n%<a href=\"https://ar.wikipedia.org/wiki/\u062a\u0633\u0648\u0646\u0627\u0645\u064a\">%a''')\n        self.assertEqual(\n            compat_urllib_parse_unquote('''%28%5E%E2%97%A3_%E2%97%A2%5E%29%E3%81%A3%EF%B8%BB%E3%83%87%E2%95%90%E4%B8%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%87%80    %E2%86%B6%I%Break%25Things%'''),\n            '''(^\u25e3_\u25e2^)\u3063\ufe3b\u30c7\u2550\u4e00    \u21c0    \u21c0    \u21c0    \u21c0    \u21c0    \u21b6%I%Break%Things%''')\n\n    def test_compat_urllib_parse_unquote_plus(self):\n        self.assertEqual(compat_urllib_parse_unquote_plus('abc%20def'), 'abc def')\n        self.assertEqual(compat_urllib_parse_unquote_plus('%7e/abc+def'), '~/abc def')\n\n    def test_compat_urllib_parse_urlencode(self):\n        self.assertEqual(compat_urllib_parse_urlencode({'abc': 'def'}), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode({'abc': b'def'}), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode({b'abc': 'def'}), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode({b'abc': b'def'}), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode([('abc', 'def')]), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode([('abc', b'def')]), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode([(b'abc', 'def')]), 'abc=def')\n        self.assertEqual(compat_urllib_parse_urlencode([(b'abc', b'def')]), 'abc=def')\n\n    def test_compat_shlex_split(self):\n        self.assertEqual(compat_shlex_split('-option \"one two\"'), ['-option', 'one two'])\n        self.assertEqual(compat_shlex_split('-option \"one\\ntwo\" \\n -flag'), ['-option', 'one\\ntwo', '-flag'])\n        self.assertEqual(compat_shlex_split('-val \u4e2d\u6587'), ['-val', '\u4e2d\u6587'])\n\n    def test_compat_etree_fromstring(self):\n        xml = '''\n            <root foo=\"bar\" spam=\"\u4e2d\u6587\">\n                <normal>foo</normal>\n                <chinese>\u4e2d\u6587</chinese>\n                <foo><bar>spam</bar></foo>\n            </root>\n        '''\n        doc = compat_etree_fromstring(xml.encode('utf-8'))\n        self.assertTrue(isinstance(doc.attrib['foo'], compat_str))\n        self.assertTrue(isinstance(doc.attrib['spam'], compat_str))\n        self.assertTrue(isinstance(doc.find('normal').text, compat_str))\n        self.assertTrue(isinstance(doc.find('chinese').text, compat_str))\n        self.assertTrue(isinstance(doc.find('foo/bar').text, compat_str))\n\n    def test_compat_etree_fromstring_doctype(self):\n        xml = '''<?xml version=\"1.0\"?>\n<!DOCTYPE smil PUBLIC \"-//W3C//DTD SMIL 2.0//EN\" \"http://www.w3.org/2001/SMIL20/SMIL20.dtd\">\n<smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\"></smil>'''\n        compat_etree_fromstring(xml)\n\n    def test_struct_unpack(self):\n        self.assertEqual(compat_struct_unpack('!B', b'\\x00'), (0,))\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "test_compat.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/test/test_compat.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}