{"author": "sympy", "code": "from __future__ import print_function, division\n\nimport sys\nsys._running_pytest = True\nfrom distutils.version import LooseVersion as V\n\nimport pytest\nfrom sympy.core.cache import clear_cache\nimport re\n\nsp = re.compile(r'([0-9]+)/([1-9][0-9]*)')\n\ndef process_split(session, config, items):\n    split = config.getoption(\"--split\")\n    if not split:\n        return\n    m = sp.match(split)\n    if not m:\n        raise ValueError(\"split must be a string of the form a/b \"\n                         \"where a and b are ints.\")\n    i, t = map(int, m.groups())\n    start, end = (i-1)*len(items)//t, i*len(items)//t\n\n    if i < t:\n        \n        del items[end:]\n    del items[:start]\n\n\ndef pytest_report_header(config):\n    from sympy.utilities.misc import ARCH\n    s = \"architecture: %s\\n\" % ARCH\n    from sympy.core.cache import USE_CACHE\n    s += \"cache:        %s\\n\" % USE_CACHE\n    from sympy.core.compatibility import GROUND_TYPES, HAS_GMPY\n    version = ''\n    if GROUND_TYPES =='gmpy':\n        if HAS_GMPY == 1:\n            import gmpy\n        elif HAS_GMPY == 2:\n            import gmpy2 as gmpy\n        version = gmpy.version()\n    s += \"ground types: %s %s\\n\" % (GROUND_TYPES, version)\n    return s\n\n\ndef pytest_terminal_summary(terminalreporter):\n    if (terminalreporter.stats.get('error', None) or\n            terminalreporter.stats.get('failed', None)):\n        terminalreporter.write_sep(\n            ' ', 'DO *NOT* COMMIT!', red=True, bold=True)\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\"--split\", action=\"store\", default=\"\",\n        help=\"split tests\")\n\n\ndef pytest_collection_modifyitems(session, config, items):\n    \n    \n    process_split(session, config, items)\n\n\n@pytest.fixture(autouse=True, scope='module')\ndef file_clear_cache():\n    clear_cache()\n\n@pytest.fixture(autouse=True, scope='module')\ndef check_disabled(request):\n    if getattr(request.module, 'disabled', False):\n        pytest.skip(\"test requirements not met.\")\n    elif getattr(request.module, 'ipython', False):\n        \n        if (V(pytest.__version__) < '2.6.3' and\n            pytest.config.getvalue('-s') != 'no'):\n            pytest.skip(\"run py.test with -s or upgrade to newer version.\")\n", "comments": "    pytest hook         remove elements end list first    handle splits    need check version options ipython tests ", "content": "from __future__ import print_function, division\n\nimport sys\nsys._running_pytest = True\nfrom distutils.version import LooseVersion as V\n\nimport pytest\nfrom sympy.core.cache import clear_cache\nimport re\n\nsp = re.compile(r'([0-9]+)/([1-9][0-9]*)')\n\ndef process_split(session, config, items):\n    split = config.getoption(\"--split\")\n    if not split:\n        return\n    m = sp.match(split)\n    if not m:\n        raise ValueError(\"split must be a string of the form a/b \"\n                         \"where a and b are ints.\")\n    i, t = map(int, m.groups())\n    start, end = (i-1)*len(items)//t, i*len(items)//t\n\n    if i < t:\n        # remove elements from end of list first\n        del items[end:]\n    del items[:start]\n\n\ndef pytest_report_header(config):\n    from sympy.utilities.misc import ARCH\n    s = \"architecture: %s\\n\" % ARCH\n    from sympy.core.cache import USE_CACHE\n    s += \"cache:        %s\\n\" % USE_CACHE\n    from sympy.core.compatibility import GROUND_TYPES, HAS_GMPY\n    version = ''\n    if GROUND_TYPES =='gmpy':\n        if HAS_GMPY == 1:\n            import gmpy\n        elif HAS_GMPY == 2:\n            import gmpy2 as gmpy\n        version = gmpy.version()\n    s += \"ground types: %s %s\\n\" % (GROUND_TYPES, version)\n    return s\n\n\ndef pytest_terminal_summary(terminalreporter):\n    if (terminalreporter.stats.get('error', None) or\n            terminalreporter.stats.get('failed', None)):\n        terminalreporter.write_sep(\n            ' ', 'DO *NOT* COMMIT!', red=True, bold=True)\n\n\ndef pytest_addoption(parser):\n    parser.addoption(\"--split\", action=\"store\", default=\"\",\n        help=\"split tests\")\n\n\ndef pytest_collection_modifyitems(session, config, items):\n    \"\"\" pytest hook. \"\"\"\n    # handle splits\n    process_split(session, config, items)\n\n\n@pytest.fixture(autouse=True, scope='module')\ndef file_clear_cache():\n    clear_cache()\n\n@pytest.fixture(autouse=True, scope='module')\ndef check_disabled(request):\n    if getattr(request.module, 'disabled', False):\n        pytest.skip(\"test requirements not met.\")\n    elif getattr(request.module, 'ipython', False):\n        # need to check version and options for ipython tests\n        if (V(pytest.__version__) < '2.6.3' and\n            pytest.config.getvalue('-s') != 'no'):\n            pytest.skip(\"run py.test with -s or upgrade to newer version.\")\n", "description": "A computer algebra system written in pure Python", "file_name": "conftest.py", "id": "e420c6d346c19acc46ba1ade70ace11d", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/conftest.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}