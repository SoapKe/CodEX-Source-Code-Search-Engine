{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport datetime\nimport uuid\n\nfrom enum import Enum\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils import json\n\n\nclass JSONTest(TestCase):\n    def test_uuid(self):\n        res = uuid.uuid4()\n        self.assertEquals(json.dumps(res), '\"%s\"' % res.hex)\n\n    def test_datetime(self):\n        res = datetime.datetime(day=1, month=1, year=2011, hour=1, minute=1, second=1)\n        self.assertEquals(json.dumps(res), '\"2011-01-01T01:01:01.000000Z\"')\n\n    def test_set(self):\n        res = set(['foo'])\n        self.assertEquals(json.dumps(res), '[\"foo\"]')\n\n    def test_frozenset(self):\n        res = frozenset(['foo'])\n        self.assertEquals(json.dumps(res), '[\"foo\"]')\n\n    def test_escape(self):\n        res = \"<script>alert('&');</script>\"\n        assert json.dumps(res) == '\"<script>alert(\\'&\\');</script>\"'\n        assert json.dumps(\n            res, escape=True\n        ) == '\"\\\\u003cscript\\\\u003ealert(\\\\u0027\\u0026\\\\u0027);\\\\u003c/script\\\\u003e\"'\n        assert json.dumps_htmlsafe(\n            res\n        ) == '\"\\\\u003cscript\\\\u003ealert(\\\\u0027\\u0026\\\\u0027);\\\\u003c/script\\\\u003e\"'\n\n    def test_inf(self):\n        res = float('inf')\n        self.assertEquals(json.dumps(res), 'null')\n\n    def test_enum(self):\n        enum = Enum('foo', 'a b c')\n        res = enum.a\n        self.assertEquals(json.dumps(res), '1')\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport datetime\nimport uuid\n\nfrom enum import Enum\n\nfrom sentry.testutils import TestCase\nfrom sentry.utils import json\n\n\nclass JSONTest(TestCase):\n    def test_uuid(self):\n        res = uuid.uuid4()\n        self.assertEquals(json.dumps(res), '\"%s\"' % res.hex)\n\n    def test_datetime(self):\n        res = datetime.datetime(day=1, month=1, year=2011, hour=1, minute=1, second=1)\n        self.assertEquals(json.dumps(res), '\"2011-01-01T01:01:01.000000Z\"')\n\n    def test_set(self):\n        res = set(['foo'])\n        self.assertEquals(json.dumps(res), '[\"foo\"]')\n\n    def test_frozenset(self):\n        res = frozenset(['foo'])\n        self.assertEquals(json.dumps(res), '[\"foo\"]')\n\n    def test_escape(self):\n        res = \"<script>alert('&');</script>\"\n        assert json.dumps(res) == '\"<script>alert(\\'&\\');</script>\"'\n        assert json.dumps(\n            res, escape=True\n        ) == '\"\\\\u003cscript\\\\u003ealert(\\\\u0027\\u0026\\\\u0027);\\\\u003c/script\\\\u003e\"'\n        assert json.dumps_htmlsafe(\n            res\n        ) == '\"\\\\u003cscript\\\\u003ealert(\\\\u0027\\u0026\\\\u0027);\\\\u003c/script\\\\u003e\"'\n\n    def test_inf(self):\n        res = float('inf')\n        self.assertEquals(json.dumps(res), 'null')\n\n    def test_enum(self):\n        enum = Enum('foo', 'a b c')\n        res = enum.a\n        self.assertEquals(json.dumps(res), '1')\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "fde5f7166b6f78242304b46226e4c9e1", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/json/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}