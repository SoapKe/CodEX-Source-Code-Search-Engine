{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    parse_duration,\n    parse_resolution,\n    str_to_int,\n)\n\n\nclass SpankBangIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|m|[a-z]{2})\\.)?spankbang\\.com/(?P<id>[\\da-z]+)/video'\n    _TESTS = [{\n        'url': 'http://spankbang.com/3vvn/video/fantasy+solo',\n        'md5': '1cc433e1d6aa14bc376535b8679302f7',\n        'info_dict': {\n            'id': '3vvn',\n            'ext': 'mp4',\n            'title': 'fantasy solo',\n            'description': 'dillion harper masturbates on a bed',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'silly2587',\n            'age_limit': 18,\n        }\n    }, {\n        \n        'url': 'http://spankbang.com/1vt0/video/solvane+gangbang',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://spankbang.com/lklg/video/sex+with+anyone+wedding+edition+2',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://m.spankbang.com/1o2de/video/can+t+remember+her+name',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://spankbang.com/1vwqx/video/jade+kush+solo+4k',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id, headers={\n            'Cookie': 'country=US'\n        })\n\n        if re.search(r'<[^>]+\\bid=[\"\\']video_removed', webpage):\n            raise ExtractorError(\n                'Video %s is not available' % video_id, expected=True)\n\n        formats = []\n        for mobj in re.finditer(\n                r'stream_url_(?P<id>[^\\s=]+)\\s*=\\s*([\"\\'])(?P<url>(?:(?!\\2).)+)\\2',\n                webpage):\n            format_id, format_url = mobj.group('id', 'url')\n            f = parse_resolution(format_id)\n            f.update({\n                'url': format_url,\n                'format_id': format_id,\n            })\n            formats.append(f)\n        self._sort_formats(formats)\n\n        title = self._html_search_regex(\n            r'(?s)<h1[^>]*>(.+?)</h1>', webpage, 'title')\n        description = self._search_regex(\n            r'<div[^>]+\\bclass=[\"\\']bottom[^>]+>\\s*<p>[^<]*</p>\\s*<p>([^<]+)',\n            webpage, 'description', fatal=False)\n        thumbnail = self._og_search_thumbnail(webpage)\n        uploader = self._search_regex(\n            r'class=\"user\"[^>]*><img[^>]+>([^<]+)',\n            webpage, 'uploader', default=None)\n        duration = parse_duration(self._search_regex(\n            r'<div[^>]+\\bclass=[\"\\']right_side[^>]+>\\s*<span>([^<]+)',\n            webpage, 'duration', fatal=False))\n        view_count = str_to_int(self._search_regex(\n            r'([\\d,.]+)\\s+plays', webpage, 'view count', fatal=False))\n\n        age_limit = self._rta_search(webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n            'age_limit': age_limit,\n        }\n", "comments": "# 480p only\n# no uploader\n# mobile page\n# 4k\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    parse_duration,\n    parse_resolution,\n    str_to_int,\n)\n\n\nclass SpankBangIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:(?:www|m|[a-z]{2})\\.)?spankbang\\.com/(?P<id>[\\da-z]+)/video'\n    _TESTS = [{\n        'url': 'http://spankbang.com/3vvn/video/fantasy+solo',\n        'md5': '1cc433e1d6aa14bc376535b8679302f7',\n        'info_dict': {\n            'id': '3vvn',\n            'ext': 'mp4',\n            'title': 'fantasy solo',\n            'description': 'dillion harper masturbates on a bed',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': 'silly2587',\n            'age_limit': 18,\n        }\n    }, {\n        # 480p only\n        'url': 'http://spankbang.com/1vt0/video/solvane+gangbang',\n        'only_matching': True,\n    }, {\n        # no uploader\n        'url': 'http://spankbang.com/lklg/video/sex+with+anyone+wedding+edition+2',\n        'only_matching': True,\n    }, {\n        # mobile page\n        'url': 'http://m.spankbang.com/1o2de/video/can+t+remember+her+name',\n        'only_matching': True,\n    }, {\n        # 4k\n        'url': 'https://spankbang.com/1vwqx/video/jade+kush+solo+4k',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id, headers={\n            'Cookie': 'country=US'\n        })\n\n        if re.search(r'<[^>]+\\bid=[\"\\']video_removed', webpage):\n            raise ExtractorError(\n                'Video %s is not available' % video_id, expected=True)\n\n        formats = []\n        for mobj in re.finditer(\n                r'stream_url_(?P<id>[^\\s=]+)\\s*=\\s*([\"\\'])(?P<url>(?:(?!\\2).)+)\\2',\n                webpage):\n            format_id, format_url = mobj.group('id', 'url')\n            f = parse_resolution(format_id)\n            f.update({\n                'url': format_url,\n                'format_id': format_id,\n            })\n            formats.append(f)\n        self._sort_formats(formats)\n\n        title = self._html_search_regex(\n            r'(?s)<h1[^>]*>(.+?)</h1>', webpage, 'title')\n        description = self._search_regex(\n            r'<div[^>]+\\bclass=[\"\\']bottom[^>]+>\\s*<p>[^<]*</p>\\s*<p>([^<]+)',\n            webpage, 'description', fatal=False)\n        thumbnail = self._og_search_thumbnail(webpage)\n        uploader = self._search_regex(\n            r'class=\"user\"[^>]*><img[^>]+>([^<]+)',\n            webpage, 'uploader', default=None)\n        duration = parse_duration(self._search_regex(\n            r'<div[^>]+\\bclass=[\"\\']right_side[^>]+>\\s*<span>([^<]+)',\n            webpage, 'duration', fatal=False))\n        view_count = str_to_int(self._search_regex(\n            r'([\\d,.]+)\\s+plays', webpage, 'view count', fatal=False))\n\n        age_limit = self._rta_search(webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'duration': duration,\n            'view_count': view_count,\n            'formats': formats,\n            'age_limit': age_limit,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "spankbang.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/spankbang.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}