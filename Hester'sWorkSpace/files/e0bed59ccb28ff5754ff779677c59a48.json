{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (2016-2017) Hewlett Packard Enterprise Development LP\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom ansible.compat.tests import unittest\nfrom oneview_module_loader import FcoeNetworkModule\nfrom hpe_test_utils import OneViewBaseTestCase\n\nFAKE_MSG_ERROR = 'Fake message error'\n\nDEFAULT_FCOE_NETWORK_TEMPLATE = dict(\n    name='New FCoE Network 2',\n    vlanId=\"201\",\n    connectionTemplateUri=None\n)\n\nPARAMS_FOR_PRESENT = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_FCOE_NETWORK_TEMPLATE['name'])\n)\n\nPARAMS_WITH_CHANGES = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_FCOE_NETWORK_TEMPLATE['name'],\n              fabricType='DirectAttach',\n              newName='New Name')\n)\n\nPARAMS_FOR_ABSENT = dict(\n    config='config.json',\n    state='absent',\n    data=dict(name=DEFAULT_FCOE_NETWORK_TEMPLATE['name'])\n)\n\n\nclass FcoeNetworkSpec(unittest.TestCase,\n                      OneViewBaseTestCase):\n    \n\n    def setUp(self):\n        self.configure_mocks(self, FcoeNetworkModule)\n        self.resource = self.mock_ov_client.fcoe_networks\n\n    def test_should_create_new_fcoe_network(self):\n        self.resource.get_by.return_value = []\n        self.resource.create.return_value = DEFAULT_FCOE_NETWORK_TEMPLATE\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=FcoeNetworkModule.MSG_CREATED,\n            ansible_facts=dict(fcoe_network=DEFAULT_FCOE_NETWORK_TEMPLATE)\n        )\n\n    def test_should_not_update_when_data_is_equals(self):\n        self.resource.get_by.return_value = [DEFAULT_FCOE_NETWORK_TEMPLATE]\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT.copy()\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=FcoeNetworkModule.MSG_ALREADY_PRESENT,\n            ansible_facts=dict(fcoe_network=DEFAULT_FCOE_NETWORK_TEMPLATE)\n        )\n\n    def test_update_when_data_has_modified_attributes(self):\n        data_merged = DEFAULT_FCOE_NETWORK_TEMPLATE.copy()\n        data_merged['fabricType'] = 'DirectAttach'\n\n        self.resource.get_by.return_value = [DEFAULT_FCOE_NETWORK_TEMPLATE]\n        self.resource.update.return_value = data_merged\n\n        self.mock_ansible_module.params = PARAMS_WITH_CHANGES\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=FcoeNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(fcoe_network=data_merged)\n        )\n\n    def test_should_remove_fcoe_network(self):\n        self.resource.get_by.return_value = [DEFAULT_FCOE_NETWORK_TEMPLATE]\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=FcoeNetworkModule.MSG_DELETED\n        )\n\n    def test_should_do_nothing_when_fcoe_network_not_exist(self):\n        self.resource.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=FcoeNetworkModule.MSG_ALREADY_ABSENT\n        )\n\n    def test_update_scopes_when_different(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = DEFAULT_FCOE_NETWORK_TEMPLATE.copy()\n        resource_data['scopeUris'] = ['fake']\n        resource_data['uri'] = 'rest/fcoe/fake'\n        self.resource.get_by.return_value = [resource_data]\n\n        patch_return = resource_data.copy()\n        patch_return['scopeUris'] = ['test']\n        self.resource.patch.return_value = patch_return\n\n        FcoeNetworkModule().run()\n\n        self.resource.patch.assert_called_once_with('rest/fcoe/fake',\n                                                    operation='replace',\n                                                    path='/scopeUris',\n                                                    value=['test'])\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            ansible_facts=dict(fcoe_network=patch_return),\n            msg=FcoeNetworkModule.MSG_UPDATED\n        )\n\n    def test_should_do_nothing_when_scopes_are_the_same(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = DEFAULT_FCOE_NETWORK_TEMPLATE.copy()\n        resource_data['scopeUris'] = ['test']\n        self.resource.get_by.return_value = [resource_data]\n\n        FcoeNetworkModule().run()\n\n        self.resource.patch.not_been_called()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(fcoe_network=resource_data),\n            msg=FcoeNetworkModule.MSG_ALREADY_PRESENT\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "comments": "        oneviewbasetestcase provides mocks used test case                coding  utf 8           copyright (2016 2017) hewlett packard enterprise development lp       this program free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        this program distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose  see    gnu general public license details        you received copy gnu general public license    along program  if  see  http   www gnu org licenses    ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (2016-2017) Hewlett Packard Enterprise Development LP\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\nfrom ansible.compat.tests import unittest\nfrom oneview_module_loader import FcoeNetworkModule\nfrom hpe_test_utils import OneViewBaseTestCase\n\nFAKE_MSG_ERROR = 'Fake message error'\n\nDEFAULT_FCOE_NETWORK_TEMPLATE = dict(\n    name='New FCoE Network 2',\n    vlanId=\"201\",\n    connectionTemplateUri=None\n)\n\nPARAMS_FOR_PRESENT = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_FCOE_NETWORK_TEMPLATE['name'])\n)\n\nPARAMS_WITH_CHANGES = dict(\n    config='config.json',\n    state='present',\n    data=dict(name=DEFAULT_FCOE_NETWORK_TEMPLATE['name'],\n              fabricType='DirectAttach',\n              newName='New Name')\n)\n\nPARAMS_FOR_ABSENT = dict(\n    config='config.json',\n    state='absent',\n    data=dict(name=DEFAULT_FCOE_NETWORK_TEMPLATE['name'])\n)\n\n\nclass FcoeNetworkSpec(unittest.TestCase,\n                      OneViewBaseTestCase):\n    \"\"\"\n    OneViewBaseTestCase provides the mocks used in this test case\n    \"\"\"\n\n    def setUp(self):\n        self.configure_mocks(self, FcoeNetworkModule)\n        self.resource = self.mock_ov_client.fcoe_networks\n\n    def test_should_create_new_fcoe_network(self):\n        self.resource.get_by.return_value = []\n        self.resource.create.return_value = DEFAULT_FCOE_NETWORK_TEMPLATE\n\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=FcoeNetworkModule.MSG_CREATED,\n            ansible_facts=dict(fcoe_network=DEFAULT_FCOE_NETWORK_TEMPLATE)\n        )\n\n    def test_should_not_update_when_data_is_equals(self):\n        self.resource.get_by.return_value = [DEFAULT_FCOE_NETWORK_TEMPLATE]\n        self.mock_ansible_module.params = PARAMS_FOR_PRESENT.copy()\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=FcoeNetworkModule.MSG_ALREADY_PRESENT,\n            ansible_facts=dict(fcoe_network=DEFAULT_FCOE_NETWORK_TEMPLATE)\n        )\n\n    def test_update_when_data_has_modified_attributes(self):\n        data_merged = DEFAULT_FCOE_NETWORK_TEMPLATE.copy()\n        data_merged['fabricType'] = 'DirectAttach'\n\n        self.resource.get_by.return_value = [DEFAULT_FCOE_NETWORK_TEMPLATE]\n        self.resource.update.return_value = data_merged\n\n        self.mock_ansible_module.params = PARAMS_WITH_CHANGES\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=FcoeNetworkModule.MSG_UPDATED,\n            ansible_facts=dict(fcoe_network=data_merged)\n        )\n\n    def test_should_remove_fcoe_network(self):\n        self.resource.get_by.return_value = [DEFAULT_FCOE_NETWORK_TEMPLATE]\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            msg=FcoeNetworkModule.MSG_DELETED\n        )\n\n    def test_should_do_nothing_when_fcoe_network_not_exist(self):\n        self.resource.get_by.return_value = []\n\n        self.mock_ansible_module.params = PARAMS_FOR_ABSENT\n\n        FcoeNetworkModule().run()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            msg=FcoeNetworkModule.MSG_ALREADY_ABSENT\n        )\n\n    def test_update_scopes_when_different(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = DEFAULT_FCOE_NETWORK_TEMPLATE.copy()\n        resource_data['scopeUris'] = ['fake']\n        resource_data['uri'] = 'rest/fcoe/fake'\n        self.resource.get_by.return_value = [resource_data]\n\n        patch_return = resource_data.copy()\n        patch_return['scopeUris'] = ['test']\n        self.resource.patch.return_value = patch_return\n\n        FcoeNetworkModule().run()\n\n        self.resource.patch.assert_called_once_with('rest/fcoe/fake',\n                                                    operation='replace',\n                                                    path='/scopeUris',\n                                                    value=['test'])\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=True,\n            ansible_facts=dict(fcoe_network=patch_return),\n            msg=FcoeNetworkModule.MSG_UPDATED\n        )\n\n    def test_should_do_nothing_when_scopes_are_the_same(self):\n        params_to_scope = PARAMS_FOR_PRESENT.copy()\n        params_to_scope['data']['scopeUris'] = ['test']\n        self.mock_ansible_module.params = params_to_scope\n\n        resource_data = DEFAULT_FCOE_NETWORK_TEMPLATE.copy()\n        resource_data['scopeUris'] = ['test']\n        self.resource.get_by.return_value = [resource_data]\n\n        FcoeNetworkModule().run()\n\n        self.resource.patch.not_been_called()\n\n        self.mock_ansible_module.exit_json.assert_called_once_with(\n            changed=False,\n            ansible_facts=dict(fcoe_network=resource_data),\n            msg=FcoeNetworkModule.MSG_ALREADY_PRESENT\n        )\n\n\nif __name__ == '__main__':\n    unittest.main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_oneview_fcoe_network.py", "id": "e0bed59ccb28ff5754ff779677c59a48", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/remote_management/oneview/test_oneview_fcoe_network.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}