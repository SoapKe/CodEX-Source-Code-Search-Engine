{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .once import OnceIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass ESPNIE(OnceIE):\n    _VALID_URL = r\n\n    _TESTS = [{\n        'url': 'http://espn.go.com/video/clip?id=10365079',\n        'info_dict': {\n            'id': '10365079',\n            'ext': 'mp4',\n            'title': '30 for 30 Shorts: Judging Jewell',\n            'description': 'md5:39370c2e016cb4ecf498ffe75bef7f0f',\n            'timestamp': 1390936111,\n            'upload_date': '20140128',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://broadband.espn.go.com/video/clip?id=18910086',\n        'info_dict': {\n            'id': '18910086',\n            'ext': 'mp4',\n            'title': 'Kyrie spins around defender for two',\n            'description': 'md5:2b0f5bae9616d26fba8808350f0d2b9b',\n            'timestamp': 1489539155,\n            'upload_date': '20170315',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://nonredline.sports.espn.go.com/video/clip?id=19744672',\n        'only_matching': True,\n    }, {\n        'url': 'https://cdn.espn.go.com/video/clip/_/id/19771774',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/watch/player?id=19141491',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/watch/player?bucketId=257&id=19505875',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/watch/player/_/id/19141491',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/video/clip?id=10365079',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/video/clip/_/id/17989860',\n        'only_matching': True,\n    }, {\n        'url': 'https://espn.go.com/video/iframe/twitter/?cms=espn&id=10365079',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espnfc.us/video/espn-fc-tv/86/video/3319154/nashville-unveiled-as-the-newest-club-in-mls',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espnfc.com/english-premier-league/23/video/3324163/premier-league-in-90-seconds-golden-tweets',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        clip = self._download_json(\n            'http://api-app.espn.com/v1/video/clips/%s' % video_id,\n            video_id)['videos'][0]\n\n        title = clip['headline']\n\n        format_urls = set()\n        formats = []\n\n        def traverse_source(source, base_source_id=None):\n            for source_id, source in source.items():\n                if source_id == 'alert':\n                    continue\n                elif isinstance(source, compat_str):\n                    extract_source(source, base_source_id)\n                elif isinstance(source, dict):\n                    traverse_source(\n                        source,\n                        '%s-%s' % (base_source_id, source_id)\n                        if base_source_id else source_id)\n\n        def extract_source(source_url, source_id=None):\n            if source_url in format_urls:\n                return\n            format_urls.add(source_url)\n            ext = determine_ext(source_url)\n            if OnceIE.suitable(source_url):\n                formats.extend(self._extract_once_formats(source_url))\n            elif ext == 'smil':\n                formats.extend(self._extract_smil_formats(\n                    source_url, video_id, fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    source_url, video_id, f4m_id=source_id, fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    source_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id=source_id, fatal=False))\n            else:\n                f = {\n                    'url': source_url,\n                    'format_id': source_id,\n                }\n                mobj = re.search(r'(\\d+)p(\\d+)_(\\d+)k\\.', source_url)\n                if mobj:\n                    f.update({\n                        'height': int(mobj.group(1)),\n                        'fps': int(mobj.group(2)),\n                        'tbr': int(mobj.group(3)),\n                    })\n                if source_id == 'mezzanine':\n                    f['preference'] = 1\n                formats.append(f)\n\n        links = clip.get('links', {})\n        traverse_source(links.get('source', {}))\n        traverse_source(links.get('mobile', {}))\n        self._sort_formats(formats)\n\n        description = clip.get('caption') or clip.get('description')\n        thumbnail = clip.get('thumbnail')\n        duration = int_or_none(clip.get('duration'))\n        timestamp = unified_timestamp(clip.get('originalPublishDate'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass ESPNArticleIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:espn\\.go|(?:www\\.)?espn)\\.com/(?:[^/]+/)*(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'http://espn.go.com/nba/recap?gameId=400793786',\n        'only_matching': True,\n    }, {\n        'url': 'http://espn.go.com/blog/golden-state-warriors/post/_/id/593/how-warriors-rapidly-regained-a-winning-edge',\n        'only_matching': True,\n    }, {\n        'url': 'http://espn.go.com/sports/endurance/story/_/id/12893522/dzhokhar-tsarnaev-sentenced-role-boston-marathon-bombings',\n        'only_matching': True,\n    }, {\n        'url': 'http://espn.go.com/nba/playoffs/2015/story/_/id/12887571/john-wall-washington-wizards-no-swelling-left-hand-wrist-game-5-return',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if ESPNIE.suitable(url) else super(ESPNArticleIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_id = self._search_regex(\n            r'class=([\"\\']).*?video-play-button.*?\\1[^>]+data-id=[\"\\'](?P<id>\\d+)',\n            webpage, 'video id', group='id')\n\n        return self.url_result(\n            'http://espn.go.com/video/clip?id=%s' % video_id, ESPNIE.ie_key())\n\n\nclass FiveThirtyEightIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?fivethirtyeight\\.com/features/(?P<id>[^/?\n    _TEST = {\n        'url': 'http://fivethirtyeight.com/features/how-the-6-8-raiders-can-still-make-the-playoffs/',\n        'info_dict': {\n            'id': '21846851',\n            'ext': 'mp4',\n            'title': 'FiveThirtyEight: The Raiders can still make the playoffs',\n            'description': 'Neil Paine breaks down the simplest scenario that will put the Raiders into the playoffs at 8-8.',\n            'timestamp': 1513960621,\n            'upload_date': '20171222',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_id = self._search_regex(\n            r'data-video-id=[\"\\'](?P<id>\\d+)',\n            webpage, 'video id', group='id')\n\n        return self.url_result(\n            'http://espn.go.com/video/clip?id=%s' % video_id, ESPNIE.ie_key())\n", "comments": "(?x)\n                    https?://\n                        (?:\n                            (?:\n                                (?:\n                                    (?:(?:\\w+\\.)+)?espn\\.go|\n                                    (?:www\\.)?espn\n                                )\\.com/\n                                (?:\n                                    (?:\n                                        video/(?:clip|iframe/twitter)|\n                                        watch/player\n                                    )\n                                    (?:\n                                        .*?\\?.*?\\bid=|\n                                        /_/id/\n                                    )\n                                )\n                            )|\n                            (?:www\\.)espnfc\\.(?:com|us)/(?:video/)?[^/]+/\\d+/video/\n                        )\n                        (?P<id>\\d+)\n                    \n \n#]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .once import OnceIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass ESPNIE(OnceIE):\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:\n                            (?:\n                                (?:\n                                    (?:(?:\\w+\\.)+)?espn\\.go|\n                                    (?:www\\.)?espn\n                                )\\.com/\n                                (?:\n                                    (?:\n                                        video/(?:clip|iframe/twitter)|\n                                        watch/player\n                                    )\n                                    (?:\n                                        .*?\\?.*?\\bid=|\n                                        /_/id/\n                                    )\n                                )\n                            )|\n                            (?:www\\.)espnfc\\.(?:com|us)/(?:video/)?[^/]+/\\d+/video/\n                        )\n                        (?P<id>\\d+)\n                    '''\n\n    _TESTS = [{\n        'url': 'http://espn.go.com/video/clip?id=10365079',\n        'info_dict': {\n            'id': '10365079',\n            'ext': 'mp4',\n            'title': '30 for 30 Shorts: Judging Jewell',\n            'description': 'md5:39370c2e016cb4ecf498ffe75bef7f0f',\n            'timestamp': 1390936111,\n            'upload_date': '20140128',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'https://broadband.espn.go.com/video/clip?id=18910086',\n        'info_dict': {\n            'id': '18910086',\n            'ext': 'mp4',\n            'title': 'Kyrie spins around defender for two',\n            'description': 'md5:2b0f5bae9616d26fba8808350f0d2b9b',\n            'timestamp': 1489539155,\n            'upload_date': '20170315',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }, {\n        'url': 'http://nonredline.sports.espn.go.com/video/clip?id=19744672',\n        'only_matching': True,\n    }, {\n        'url': 'https://cdn.espn.go.com/video/clip/_/id/19771774',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/watch/player?id=19141491',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/watch/player?bucketId=257&id=19505875',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/watch/player/_/id/19141491',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/video/clip?id=10365079',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espn.com/video/clip/_/id/17989860',\n        'only_matching': True,\n    }, {\n        'url': 'https://espn.go.com/video/iframe/twitter/?cms=espn&id=10365079',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espnfc.us/video/espn-fc-tv/86/video/3319154/nashville-unveiled-as-the-newest-club-in-mls',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.espnfc.com/english-premier-league/23/video/3324163/premier-league-in-90-seconds-golden-tweets',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        clip = self._download_json(\n            'http://api-app.espn.com/v1/video/clips/%s' % video_id,\n            video_id)['videos'][0]\n\n        title = clip['headline']\n\n        format_urls = set()\n        formats = []\n\n        def traverse_source(source, base_source_id=None):\n            for source_id, source in source.items():\n                if source_id == 'alert':\n                    continue\n                elif isinstance(source, compat_str):\n                    extract_source(source, base_source_id)\n                elif isinstance(source, dict):\n                    traverse_source(\n                        source,\n                        '%s-%s' % (base_source_id, source_id)\n                        if base_source_id else source_id)\n\n        def extract_source(source_url, source_id=None):\n            if source_url in format_urls:\n                return\n            format_urls.add(source_url)\n            ext = determine_ext(source_url)\n            if OnceIE.suitable(source_url):\n                formats.extend(self._extract_once_formats(source_url))\n            elif ext == 'smil':\n                formats.extend(self._extract_smil_formats(\n                    source_url, video_id, fatal=False))\n            elif ext == 'f4m':\n                formats.extend(self._extract_f4m_formats(\n                    source_url, video_id, f4m_id=source_id, fatal=False))\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    source_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id=source_id, fatal=False))\n            else:\n                f = {\n                    'url': source_url,\n                    'format_id': source_id,\n                }\n                mobj = re.search(r'(\\d+)p(\\d+)_(\\d+)k\\.', source_url)\n                if mobj:\n                    f.update({\n                        'height': int(mobj.group(1)),\n                        'fps': int(mobj.group(2)),\n                        'tbr': int(mobj.group(3)),\n                    })\n                if source_id == 'mezzanine':\n                    f['preference'] = 1\n                formats.append(f)\n\n        links = clip.get('links', {})\n        traverse_source(links.get('source', {}))\n        traverse_source(links.get('mobile', {}))\n        self._sort_formats(formats)\n\n        description = clip.get('caption') or clip.get('description')\n        thumbnail = clip.get('thumbnail')\n        duration = int_or_none(clip.get('duration'))\n        timestamp = unified_timestamp(clip.get('originalPublishDate'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n        }\n\n\nclass ESPNArticleIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:espn\\.go|(?:www\\.)?espn)\\.com/(?:[^/]+/)*(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'http://espn.go.com/nba/recap?gameId=400793786',\n        'only_matching': True,\n    }, {\n        'url': 'http://espn.go.com/blog/golden-state-warriors/post/_/id/593/how-warriors-rapidly-regained-a-winning-edge',\n        'only_matching': True,\n    }, {\n        'url': 'http://espn.go.com/sports/endurance/story/_/id/12893522/dzhokhar-tsarnaev-sentenced-role-boston-marathon-bombings',\n        'only_matching': True,\n    }, {\n        'url': 'http://espn.go.com/nba/playoffs/2015/story/_/id/12887571/john-wall-washington-wizards-no-swelling-left-hand-wrist-game-5-return',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if ESPNIE.suitable(url) else super(ESPNArticleIE, cls).suitable(url)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_id = self._search_regex(\n            r'class=([\"\\']).*?video-play-button.*?\\1[^>]+data-id=[\"\\'](?P<id>\\d+)',\n            webpage, 'video id', group='id')\n\n        return self.url_result(\n            'http://espn.go.com/video/clip?id=%s' % video_id, ESPNIE.ie_key())\n\n\nclass FiveThirtyEightIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?fivethirtyeight\\.com/features/(?P<id>[^/?#]+)'\n    _TEST = {\n        'url': 'http://fivethirtyeight.com/features/how-the-6-8-raiders-can-still-make-the-playoffs/',\n        'info_dict': {\n            'id': '21846851',\n            'ext': 'mp4',\n            'title': 'FiveThirtyEight: The Raiders can still make the playoffs',\n            'description': 'Neil Paine breaks down the simplest scenario that will put the Raiders into the playoffs at 8-8.',\n            'timestamp': 1513960621,\n            'upload_date': '20171222',\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'expected_warnings': ['Unable to download f4m manifest'],\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        video_id = self._search_regex(\n            r'data-video-id=[\"\\'](?P<id>\\d+)',\n            webpage, 'video id', group='id')\n\n        return self.url_result(\n            'http://espn.go.com/video/clip?id=%s' % video_id, ESPNIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "espn.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/espn.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}