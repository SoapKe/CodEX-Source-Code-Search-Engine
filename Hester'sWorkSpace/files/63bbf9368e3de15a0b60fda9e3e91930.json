{"author": "aws", "code": "\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\nfrom awscli.compat import six\nfrom tests.functional.s3 import BaseS3TransferCommandTest\n\n\nclass TestMvCommand(BaseS3TransferCommandTest):\n\n    prefix = 's3 mv '\n\n    def test_cant_mv_object_onto_itself(self):\n        cmdline = '%s s3://bucket/key s3://bucket/key' % self.prefix\n        stderr = self.run_cmd(cmdline, expected_rc=255)[1]\n        self.assertIn('Cannot mv a file onto itself', stderr)\n\n    def test_cant_mv_object_with_implied_name(self):\n         The \"key\" key name is implied in the dst argument.\n        cmdline = '%s s3://bucket/key s3://bucket/' % self.prefix\n        stderr = self.run_cmd(cmdline, expected_rc=255)[1]\n        self.assertIn('Cannot mv a file onto itself', stderr)\n\n    def test_website_redirect_ignore_paramfile(self):\n        full_path = self.files.create_file('foo.txt', 'mycontent')\n        cmdline = '%s %s s3://bucket/key.txt --website-redirect %s' % \\\n            (self.prefix, full_path, 'http://someserver')\n        self.parsed_responses = [{'ETag': '\"c8afdb36c52cf4727836669019e69222\"'}]\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assertEqual(self.operations_called[0][0].name, 'PutObject')\n         Make sure that the specified web address is used as opposed to the\n         contents of the web address.\n        self.assertEqual(\n            self.operations_called[0][1]['WebsiteRedirectLocation'],\n            'http://someserver'\n        )\n\n    def test_metadata_directive_copy(self):\n        self.parsed_responses = [\n            {\"ContentLength\": \"100\", \"LastModified\": \"00:00:00Z\"},\n            {'ETag': '\"foo-1\"'},\n            {'ETag': '\"foo-2\"'}\n        ]\n        cmdline = ('%s s3://bucket/key.txt s3://bucket/key2.txt'\n                   ' --metadata-directive REPLACE' % self.prefix)\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assertEqual(len(self.operations_called), 3,\n                         self.operations_called)\n        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')\n        self.assertEqual(self.operations_called[1][0].name, 'CopyObject')\n        self.assertEqual(self.operations_called[2][0].name, 'DeleteObject')\n        self.assertEqual(self.operations_called[1][1]['MetadataDirective'],\n                         'REPLACE')\n\n    def test_no_metadata_directive_for_non_copy(self):\n        full_path = self.files.create_file('foo.txt', 'mycontent')\n        cmdline = '%s %s s3://bucket --metadata-directive REPLACE' % \\\n            (self.prefix, full_path)\n        self.parsed_responses = \\\n            [{'ETag': '\"c8afdb36c52cf4727836669019e69222\"'}]\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assertEqual(len(self.operations_called), 1,\n                         self.operations_called)\n        self.assertEqual(self.operations_called[0][0].name, 'PutObject')\n        self.assertNotIn('MetadataDirective', self.operations_called[0][1])\n\n    def test_download_move_with_request_payer(self):\n        cmdline = '%s s3://mybucket/mykey %s --request-payer' % (\n            self.prefix, self.files.rootdir)\n\n        self.parsed_responses = [\n             Response for HeadObject\n            {\"ContentLength\": 100, \"LastModified\": \"00:00:00Z\"},\n             Response for GetObject\n            {'ETag': '\"foo-1\"', 'Body': six.BytesIO(b'foo')},\n             Response for DeleteObject\n            {}\n        ]\n\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assert_operations_called(\n            [\n                ('HeadObject', {\n                    'Bucket': 'mybucket',\n                    'Key': 'mykey',\n                    'RequestPayer': 'requester',\n                }),\n                ('GetObject', {\n                    'Bucket': 'mybucket',\n                    'Key': 'mykey',\n                    'RequestPayer': 'requester',\n                }),\n                ('DeleteObject', {\n                    'Bucket': 'mybucket',\n                    'Key': 'mykey',\n                    'RequestPayer': 'requester',\n                })\n            ]\n        )\n\n    def test_copy_move_with_request_payer(self):\n        cmdline = self.prefix\n        cmdline += 's3://sourcebucket/sourcekey s3://mybucket/mykey'\n        cmdline += ' --request-payer'\n\n        self.parsed_responses = [\n             Response for HeadObject\n            {\"ContentLength\": 100, \"LastModified\": \"00:00:00Z\"},\n             Response for CopyObject\n            {},\n             Response for DeleteObject\n            {}\n        ]\n\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assert_operations_called(\n            [\n                ('HeadObject', {\n                    'Bucket': 'sourcebucket',\n                    'Key': 'sourcekey',\n                    'RequestPayer': 'requester',\n                }),\n                ('CopyObject', {\n                    'Bucket': 'mybucket',\n                    'Key': 'mykey',\n                    'CopySource': 'sourcebucket/sourcekey',\n                    'RequestPayer': 'requester',\n                }),\n                ('DeleteObject', {\n                    'Bucket': 'sourcebucket',\n                    'Key': 'sourcekey',\n                    'RequestPayer': 'requester',\n                })\n            ]\n        )\n", "comments": "   usr bin env python    copyright 2014 amazon com  inc  affiliates  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   aws amazon com apache2 0         license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     the  key  key name implied dst argument     make sure specified web address used opposed    contents web address     response headobject    response getobject    response deleteobject    response headobject    response copyobject    response deleteobject ", "content": "#!/usr/bin/env python\n# Copyright 2014 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://aws.amazon.com/apache2.0/\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\nfrom awscli.compat import six\nfrom tests.functional.s3 import BaseS3TransferCommandTest\n\n\nclass TestMvCommand(BaseS3TransferCommandTest):\n\n    prefix = 's3 mv '\n\n    def test_cant_mv_object_onto_itself(self):\n        cmdline = '%s s3://bucket/key s3://bucket/key' % self.prefix\n        stderr = self.run_cmd(cmdline, expected_rc=255)[1]\n        self.assertIn('Cannot mv a file onto itself', stderr)\n\n    def test_cant_mv_object_with_implied_name(self):\n        # The \"key\" key name is implied in the dst argument.\n        cmdline = '%s s3://bucket/key s3://bucket/' % self.prefix\n        stderr = self.run_cmd(cmdline, expected_rc=255)[1]\n        self.assertIn('Cannot mv a file onto itself', stderr)\n\n    def test_website_redirect_ignore_paramfile(self):\n        full_path = self.files.create_file('foo.txt', 'mycontent')\n        cmdline = '%s %s s3://bucket/key.txt --website-redirect %s' % \\\n            (self.prefix, full_path, 'http://someserver')\n        self.parsed_responses = [{'ETag': '\"c8afdb36c52cf4727836669019e69222\"'}]\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assertEqual(self.operations_called[0][0].name, 'PutObject')\n        # Make sure that the specified web address is used as opposed to the\n        # contents of the web address.\n        self.assertEqual(\n            self.operations_called[0][1]['WebsiteRedirectLocation'],\n            'http://someserver'\n        )\n\n    def test_metadata_directive_copy(self):\n        self.parsed_responses = [\n            {\"ContentLength\": \"100\", \"LastModified\": \"00:00:00Z\"},\n            {'ETag': '\"foo-1\"'},\n            {'ETag': '\"foo-2\"'}\n        ]\n        cmdline = ('%s s3://bucket/key.txt s3://bucket/key2.txt'\n                   ' --metadata-directive REPLACE' % self.prefix)\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assertEqual(len(self.operations_called), 3,\n                         self.operations_called)\n        self.assertEqual(self.operations_called[0][0].name, 'HeadObject')\n        self.assertEqual(self.operations_called[1][0].name, 'CopyObject')\n        self.assertEqual(self.operations_called[2][0].name, 'DeleteObject')\n        self.assertEqual(self.operations_called[1][1]['MetadataDirective'],\n                         'REPLACE')\n\n    def test_no_metadata_directive_for_non_copy(self):\n        full_path = self.files.create_file('foo.txt', 'mycontent')\n        cmdline = '%s %s s3://bucket --metadata-directive REPLACE' % \\\n            (self.prefix, full_path)\n        self.parsed_responses = \\\n            [{'ETag': '\"c8afdb36c52cf4727836669019e69222\"'}]\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assertEqual(len(self.operations_called), 1,\n                         self.operations_called)\n        self.assertEqual(self.operations_called[0][0].name, 'PutObject')\n        self.assertNotIn('MetadataDirective', self.operations_called[0][1])\n\n    def test_download_move_with_request_payer(self):\n        cmdline = '%s s3://mybucket/mykey %s --request-payer' % (\n            self.prefix, self.files.rootdir)\n\n        self.parsed_responses = [\n            # Response for HeadObject\n            {\"ContentLength\": 100, \"LastModified\": \"00:00:00Z\"},\n            # Response for GetObject\n            {'ETag': '\"foo-1\"', 'Body': six.BytesIO(b'foo')},\n            # Response for DeleteObject\n            {}\n        ]\n\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assert_operations_called(\n            [\n                ('HeadObject', {\n                    'Bucket': 'mybucket',\n                    'Key': 'mykey',\n                    'RequestPayer': 'requester',\n                }),\n                ('GetObject', {\n                    'Bucket': 'mybucket',\n                    'Key': 'mykey',\n                    'RequestPayer': 'requester',\n                }),\n                ('DeleteObject', {\n                    'Bucket': 'mybucket',\n                    'Key': 'mykey',\n                    'RequestPayer': 'requester',\n                })\n            ]\n        )\n\n    def test_copy_move_with_request_payer(self):\n        cmdline = self.prefix\n        cmdline += 's3://sourcebucket/sourcekey s3://mybucket/mykey'\n        cmdline += ' --request-payer'\n\n        self.parsed_responses = [\n            # Response for HeadObject\n            {\"ContentLength\": 100, \"LastModified\": \"00:00:00Z\"},\n            # Response for CopyObject\n            {},\n            # Response for DeleteObject\n            {}\n        ]\n\n        self.run_cmd(cmdline, expected_rc=0)\n        self.assert_operations_called(\n            [\n                ('HeadObject', {\n                    'Bucket': 'sourcebucket',\n                    'Key': 'sourcekey',\n                    'RequestPayer': 'requester',\n                }),\n                ('CopyObject', {\n                    'Bucket': 'mybucket',\n                    'Key': 'mykey',\n                    'CopySource': 'sourcebucket/sourcekey',\n                    'RequestPayer': 'requester',\n                }),\n                ('DeleteObject', {\n                    'Bucket': 'sourcebucket',\n                    'Key': 'sourcekey',\n                    'RequestPayer': 'requester',\n                })\n            ]\n        )\n", "description": "Universal Command Line Interface for Amazon Web Services", "file_name": "test_mv_command.py", "id": "63bbf9368e3de15a0b60fda9e3e91930", "language": "Python", "project_name": "aws-cli", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/aws-aws-cli/aws-aws-cli-d705c60/tests/functional/s3/test_mv_command.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:33:26Z", "url": "https://github.com/aws/aws-cli", "wiki": false}