{"author": "odoo", "code": "# -*- coding: utf-8 -*-\nimport logging\nimport pprint\nimport werkzeug\n\nfrom odoo import http\nfrom odoo.http import request\n\n_logger = logging.getLogger(__name__)\n\n\nclass StripeController(http.Controller):\n\n    @http.route(['/payment/stripe/s2s/create_json'], type='json', auth='public')\n    def stripe_s2s_create_json(self, **kwargs):\n        acquirer_id = int(kwargs.get('acquirer_id'))\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n        if not kwargs.get('partner_id'):\n            kwargs = dict(kwargs, partner_id=request.env.user.partner_id.id)\n        return acquirer.s2s_process(kwargs).id\n\n    @http.route(['/payment/stripe/s2s/create'], type='http', auth='public')\n    def stripe_s2s_create(self, **post):\n        acquirer_id = int(post.get('acquirer_id'))\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n        error = None\n        try:\n            acquirer.s2s_process(post)\n        except Exception as e:\n            error = e.message\n\n        return_url = post.get('return_url', '/')\n        if error:\n            separator = '?' if werkzeug.urls.url_parse(return_url).query == '' else '&'\n            return_url += '{}{}'.format(separator, werkzeug.urls.url_encode({'error': error}))\n\n        return werkzeug.utils.redirect(return_url)\n\n    @http.route(['/payment/stripe/s2s/create_json_3ds'], type='json', auth='public', csrf=False)\n    def stripe_s2s_create_json_3ds(self, verify_validity=False, **kwargs):\n        if not kwargs.get('partner_id'):\n            kwargs = dict(kwargs, partner_id=request.env.user.partner_id.id)\n        token = request.env['payment.acquirer'].browse(int(kwargs.get('acquirer_id'))).s2s_process(kwargs)\n\n        if not token:\n            res = {\n                'result': False,\n            }\n            return res\n\n        res = {\n            'result': True,\n            'id': token.id,\n            'short_name': token.short_name,\n            '3d_secure': False,\n            'verified': False,\n        }\n\n        if verify_validity != False:\n            token.validate()\n            res['verified'] = token.verified\n\n        return res\n\n    @http.route(['/payment/stripe/create_charge'], type='json', auth='public')\n    def stripe_create_charge(self, **post):\n        \n        TX = request.env['payment.transaction']\n        tx = None\n        if post.get('tx_ref'):\n            tx = TX.sudo().search([('reference', '=', post['tx_ref'])])\n        if not tx:\n            tx_id = (post.get('tx_id') or request.session.get('sale_transaction_id') or\n                     request.session.get('website_payment_tx_id'))\n            tx = TX.sudo().browse(int(tx_id))\n        if not tx:\n            raise werkzeug.exceptions.NotFound()\n\n        stripe_token = post['token']\n        response = None\n        if tx.type == 'form_save' and tx.partner_id:\n            payment_token_id = request.env['payment.token'].sudo().create({\n                'acquirer_id': tx.acquirer_id.id,\n                'partner_id': tx.partner_id.id,\n                'stripe_token': stripe_token\n            })\n            tx.payment_token_id = payment_token_id\n            response = tx._create_stripe_charge(acquirer_ref=payment_token_id.acquirer_ref, email=stripe_token['email'])\n        else:\n            response = tx._create_stripe_charge(tokenid=stripe_token['id'], email=stripe_token['email'])\n        _logger.info('Stripe: entering form_feedback with post data %s', pprint.pformat(response))\n        if response:\n            request.env['payment.transaction'].sudo().with_context(lang=None).form_feedback(response, 'stripe')\n        return post.pop('return_url', '/')\n", "comments": "    create payment transaction          expects result user input checkout js popup           coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\nimport logging\nimport pprint\nimport werkzeug\n\nfrom odoo import http\nfrom odoo.http import request\n\n_logger = logging.getLogger(__name__)\n\n\nclass StripeController(http.Controller):\n\n    @http.route(['/payment/stripe/s2s/create_json'], type='json', auth='public')\n    def stripe_s2s_create_json(self, **kwargs):\n        acquirer_id = int(kwargs.get('acquirer_id'))\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n        if not kwargs.get('partner_id'):\n            kwargs = dict(kwargs, partner_id=request.env.user.partner_id.id)\n        return acquirer.s2s_process(kwargs).id\n\n    @http.route(['/payment/stripe/s2s/create'], type='http', auth='public')\n    def stripe_s2s_create(self, **post):\n        acquirer_id = int(post.get('acquirer_id'))\n        acquirer = request.env['payment.acquirer'].browse(acquirer_id)\n        error = None\n        try:\n            acquirer.s2s_process(post)\n        except Exception as e:\n            error = e.message\n\n        return_url = post.get('return_url', '/')\n        if error:\n            separator = '?' if werkzeug.urls.url_parse(return_url).query == '' else '&'\n            return_url += '{}{}'.format(separator, werkzeug.urls.url_encode({'error': error}))\n\n        return werkzeug.utils.redirect(return_url)\n\n    @http.route(['/payment/stripe/s2s/create_json_3ds'], type='json', auth='public', csrf=False)\n    def stripe_s2s_create_json_3ds(self, verify_validity=False, **kwargs):\n        if not kwargs.get('partner_id'):\n            kwargs = dict(kwargs, partner_id=request.env.user.partner_id.id)\n        token = request.env['payment.acquirer'].browse(int(kwargs.get('acquirer_id'))).s2s_process(kwargs)\n\n        if not token:\n            res = {\n                'result': False,\n            }\n            return res\n\n        res = {\n            'result': True,\n            'id': token.id,\n            'short_name': token.short_name,\n            '3d_secure': False,\n            'verified': False,\n        }\n\n        if verify_validity != False:\n            token.validate()\n            res['verified'] = token.verified\n\n        return res\n\n    @http.route(['/payment/stripe/create_charge'], type='json', auth='public')\n    def stripe_create_charge(self, **post):\n        \"\"\" Create a payment transaction\n\n        Expects the result from the user input from checkout.js popup\"\"\"\n        TX = request.env['payment.transaction']\n        tx = None\n        if post.get('tx_ref'):\n            tx = TX.sudo().search([('reference', '=', post['tx_ref'])])\n        if not tx:\n            tx_id = (post.get('tx_id') or request.session.get('sale_transaction_id') or\n                     request.session.get('website_payment_tx_id'))\n            tx = TX.sudo().browse(int(tx_id))\n        if not tx:\n            raise werkzeug.exceptions.NotFound()\n\n        stripe_token = post['token']\n        response = None\n        if tx.type == 'form_save' and tx.partner_id:\n            payment_token_id = request.env['payment.token'].sudo().create({\n                'acquirer_id': tx.acquirer_id.id,\n                'partner_id': tx.partner_id.id,\n                'stripe_token': stripe_token\n            })\n            tx.payment_token_id = payment_token_id\n            response = tx._create_stripe_charge(acquirer_ref=payment_token_id.acquirer_ref, email=stripe_token['email'])\n        else:\n            response = tx._create_stripe_charge(tokenid=stripe_token['id'], email=stripe_token['email'])\n        _logger.info('Stripe: entering form_feedback with post data %s', pprint.pformat(response))\n        if response:\n            request.env['payment.transaction'].sudo().with_context(lang=None).form_feedback(response, 'stripe')\n        return post.pop('return_url', '/')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "94dc71501987753c9233192cb87450cc", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_stripe/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}