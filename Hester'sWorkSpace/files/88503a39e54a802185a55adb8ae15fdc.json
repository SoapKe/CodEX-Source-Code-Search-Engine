{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import fields, models, _\n\n\nclass CrmTeam(models.Model):\n    _inherit = \"crm.team\"\n\n    website_ids = fields.One2many('website', 'salesteam_id', string='Websites', help=\"Websites using this sales channel\")\n    abandoned_carts_count = fields.Integer(\n        compute='_compute_abandoned_carts',\n        string='Number of Abandoned Carts', readonly=True)\n    abandoned_carts_amount = fields.Integer(\n        compute='_compute_abandoned_carts',\n        string='Amount of Abandoned Carts', readonly=True)\n\n    def _compute_abandoned_carts(self):\n        \n        \n        \n        website_teams = self.filtered(lambda team: team.team_type == 'website')\n        if website_teams:\n            abandoned_carts_data = self.env['sale.order'].read_group([\n                ('is_abandoned_cart', '=', True),\n                ('cart_recovery_email_sent', '=', False)\n            ], ['amount_total', 'team_id'], ['team_id'])\n            counts = {data['team_id'][0]: data['team_id_count'] for data in abandoned_carts_data}\n            amounts = {data['team_id'][0]: data['amount_total'] for data in abandoned_carts_data}\n            for team in website_teams:\n                team.abandoned_carts_count = counts.get(team.id, 0)\n                team.abandoned_carts_amount = amounts.get(team.id, 0)\n\n    def _compute_dashboard_button_name(self):\n        website_teams = self.filtered(lambda team: team.team_type == 'website' and not team.use_quotations)\n        website_teams.update({'dashboard_button_name': _(\"Online Sales\")})\n        super(CrmTeam, self - website_teams)._compute_dashboard_button_name()\n\n    def get_abandoned_carts(self):\n        self.ensure_one()\n        return {\n            'name': _('Abandoned Carts'),\n            'type': 'ir.actions.act_window',\n            'view_type': 'form',\n            'view_mode': 'tree,form',\n            'domain': [('is_abandoned_cart', '=', True)],\n            'search_view_id': self.env.ref('sale.sale_order_view_search_inherit_sale').id,\n            'context': {\n                'search_default_team_id': self.id,\n                'default_team_id': self.id,\n                'search_default_recovery_email': 1,\n                'create': False\n            },\n            'res_model': 'sale.order',\n            'help': _(),\n        }\n", "comments": "    p class  oe view nocontent create                           you find abandoned carts  e  carts generated website visitors hour ago confirmed yet   p                           p you send email customers encourage   p                                 coding  utf 8        part odoo  see license file full copyright licensing details     abandoned carts recover draft sales orders order lines     partner public user  created hour ago    recovery mail yet sent ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import fields, models, _\n\n\nclass CrmTeam(models.Model):\n    _inherit = \"crm.team\"\n\n    website_ids = fields.One2many('website', 'salesteam_id', string='Websites', help=\"Websites using this sales channel\")\n    abandoned_carts_count = fields.Integer(\n        compute='_compute_abandoned_carts',\n        string='Number of Abandoned Carts', readonly=True)\n    abandoned_carts_amount = fields.Integer(\n        compute='_compute_abandoned_carts',\n        string='Amount of Abandoned Carts', readonly=True)\n\n    def _compute_abandoned_carts(self):\n        # abandoned carts to recover are draft sales orders that have no order lines,\n        # a partner other than the public user, and created over an hour ago\n        # and the recovery mail was not yet sent\n        website_teams = self.filtered(lambda team: team.team_type == 'website')\n        if website_teams:\n            abandoned_carts_data = self.env['sale.order'].read_group([\n                ('is_abandoned_cart', '=', True),\n                ('cart_recovery_email_sent', '=', False)\n            ], ['amount_total', 'team_id'], ['team_id'])\n            counts = {data['team_id'][0]: data['team_id_count'] for data in abandoned_carts_data}\n            amounts = {data['team_id'][0]: data['amount_total'] for data in abandoned_carts_data}\n            for team in website_teams:\n                team.abandoned_carts_count = counts.get(team.id, 0)\n                team.abandoned_carts_amount = amounts.get(team.id, 0)\n\n    def _compute_dashboard_button_name(self):\n        website_teams = self.filtered(lambda team: team.team_type == 'website' and not team.use_quotations)\n        website_teams.update({'dashboard_button_name': _(\"Online Sales\")})\n        super(CrmTeam, self - website_teams)._compute_dashboard_button_name()\n\n    def get_abandoned_carts(self):\n        self.ensure_one()\n        return {\n            'name': _('Abandoned Carts'),\n            'type': 'ir.actions.act_window',\n            'view_type': 'form',\n            'view_mode': 'tree,form',\n            'domain': [('is_abandoned_cart', '=', True)],\n            'search_view_id': self.env.ref('sale.sale_order_view_search_inherit_sale').id,\n            'context': {\n                'search_default_team_id': self.id,\n                'default_team_id': self.id,\n                'search_default_recovery_email': 1,\n                'create': False\n            },\n            'res_model': 'sale.order',\n            'help': _('''<p class=\"oe_view_nocontent_create\">\n                        You can find all abandoned carts here, i.e. the carts generated by your website's visitors from over an hour ago that haven't been confirmed yet.</p>\n                        <p>You should send an email to the customers to encourage them!</p>\n                    '''),\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "crm_team.py", "id": "88503a39e54a802185a55adb8ae15fdc", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_sale/models/crm_team.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}