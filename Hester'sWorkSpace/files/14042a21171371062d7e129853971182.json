{"author": "tornadoweb", "code": "\n\n Copyright 2009 Facebook\n\n Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n not use this file except in compliance with the License. You may obtain\n a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n License for the specific language governing permissions and limitations\n under the License.\n\nimport bcrypt\nimport concurrent.futures\nimport MySQLdb\nimport markdown\nimport os.path\nimport re\nimport subprocess\nimport torndb\nimport tornado.escape\nfrom tornado import gen\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\nimport unicodedata\n\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"mysql_host\", default=\"127.0.0.1:3306\", help=\"blog database host\")\ndefine(\"mysql_database\", default=\"blog\", help=\"blog database name\")\ndefine(\"mysql_user\", default=\"blog\", help=\"blog database user\")\ndefine(\"mysql_password\", default=\"blog\", help=\"blog database password\")\n\n\n A thread pool to be used for password hashing with bcrypt.\nexecutor = concurrent.futures.ThreadPoolExecutor(2)\n\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/\", HomeHandler),\n            (r\"/archive\", ArchiveHandler),\n            (r\"/feed\", FeedHandler),\n            (r\"/entry/([^/]+)\", EntryHandler),\n            (r\"/compose\", ComposeHandler),\n            (r\"/auth/create\", AuthCreateHandler),\n            (r\"/auth/login\", AuthLoginHandler),\n            (r\"/auth/logout\", AuthLogoutHandler),\n        ]\n        settings = dict(\n            blog_title=u\"Tornado Blog\",\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\"),\n            static_path=os.path.join(os.path.dirname(__file__), \"static\"),\n            ui_modules={\"Entry\": EntryModule},\n            xsrf_cookies=True,\n            cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",\n            login_url=\"/auth/login\",\n            debug=True,\n        )\n        super(Application, self).__init__(handlers, **settings)\n         Have one global connection to the blog DB across all handlers\n        self.db = torndb.Connection(\n            host=options.mysql_host, database=options.mysql_database,\n            user=options.mysql_user, password=options.mysql_password)\n\n        self.maybe_create_tables()\n\n    def maybe_create_tables(self):\n        try:\n            self.db.get(\"SELECT COUNT(*) from entries;\")\n        except MySQLdb.ProgrammingError:\n            subprocess.check_call(['mysql',\n                                   '--host=' + options.mysql_host,\n                                   '--database=' + options.mysql_database,\n                                   '--user=' + options.mysql_user,\n                                   '--password=' + options.mysql_password],\n                                  stdin=open('schema.sql'))\n\n\nclass BaseHandler(tornado.web.RequestHandler):\n    @property\n    def db(self):\n        return self.application.db\n\n    def get_current_user(self):\n        user_id = self.get_secure_cookie(\"blogdemo_user\")\n        if not user_id:\n            return None\n        return self.db.get(\"SELECT * FROM authors WHERE id = %s\", int(user_id))\n\n    def any_author_exists(self):\n        return bool(self.db.get(\"SELECT * FROM authors LIMIT 1\"))\n\n\nclass HomeHandler(BaseHandler):\n    def get(self):\n        entries = self.db.query(\"SELECT * FROM entries ORDER BY published \"\n                                \"DESC LIMIT 5\")\n        if not entries:\n            self.redirect(\"/compose\")\n            return\n        self.render(\"home.html\", entries=entries)\n\n\nclass EntryHandler(BaseHandler):\n    def get(self, slug):\n        entry = self.db.get(\"SELECT * FROM entries WHERE slug = %s\", slug)\n        if not entry:\n            raise tornado.web.HTTPError(404)\n        self.render(\"entry.html\", entry=entry)\n\n\nclass ArchiveHandler(BaseHandler):\n    def get(self):\n        entries = self.db.query(\"SELECT * FROM entries ORDER BY published \"\n                                \"DESC\")\n        self.render(\"archive.html\", entries=entries)\n\n\nclass FeedHandler(BaseHandler):\n    def get(self):\n        entries = self.db.query(\"SELECT * FROM entries ORDER BY published \"\n                                \"DESC LIMIT 10\")\n        self.set_header(\"Content-Type\", \"application/atom+xml\")\n        self.render(\"feed.xml\", entries=entries)\n\n\nclass ComposeHandler(BaseHandler):\n    @tornado.web.authenticated\n    def get(self):\n        id = self.get_argument(\"id\", None)\n        entry = None\n        if id:\n            entry = self.db.get(\"SELECT * FROM entries WHERE id = %s\", int(id))\n        self.render(\"compose.html\", entry=entry)\n\n    @tornado.web.authenticated\n    def post(self):\n        id = self.get_argument(\"id\", None)\n        title = self.get_argument(\"title\")\n        text = self.get_argument(\"markdown\")\n        html = markdown.markdown(text)\n        if id:\n            entry = self.db.get(\"SELECT * FROM entries WHERE id = %s\", int(id))\n            if not entry:\n                raise tornado.web.HTTPError(404)\n            slug = entry.slug\n            self.db.execute(\n                \"UPDATE entries SET title = %s, markdown = %s, html = %s \"\n                \"WHERE id = %s\", title, text, html, int(id))\n        else:\n            slug = unicodedata.normalize(\"NFKD\", title).encode(\n                \"ascii\", \"ignore\")\n            slug = re.sub(r\"[^\\w]+\", \" \", slug)\n            slug = \"-\".join(slug.lower().strip().split())\n            if not slug:\n                slug = \"entry\"\n            while True:\n                e = self.db.get(\"SELECT * FROM entries WHERE slug = %s\", slug)\n                if not e:\n                    break\n                slug += \"-2\"\n            self.db.execute(\n                \"INSERT INTO entries (author_id,title,slug,markdown,html,\"\n                \"published) VALUES (%s,%s,%s,%s,%s,UTC_TIMESTAMP())\",\n                self.current_user.id, title, slug, text, html)\n        self.redirect(\"/entry/\" + slug)\n\n\nclass AuthCreateHandler(BaseHandler):\n    def get(self):\n        self.render(\"create_author.html\")\n\n    @gen.coroutine\n    def post(self):\n        if self.any_author_exists():\n            raise tornado.web.HTTPError(400, \"author already created\")\n        hashed_password = yield executor.submit(\n            bcrypt.hashpw, tornado.escape.utf8(self.get_argument(\"password\")),\n            bcrypt.gensalt())\n        author_id = self.db.execute(\n            \"INSERT INTO authors (email, name, hashed_password) \"\n            \"VALUES (%s, %s, %s)\",\n            self.get_argument(\"email\"), self.get_argument(\"name\"),\n            hashed_password)\n        self.set_secure_cookie(\"blogdemo_user\", str(author_id))\n        self.redirect(self.get_argument(\"next\", \"/\"))\n\n\nclass AuthLoginHandler(BaseHandler):\n    def get(self):\n         If there are no authors, redirect to the account creation page.\n        if not self.any_author_exists():\n            self.redirect(\"/auth/create\")\n        else:\n            self.render(\"login.html\", error=None)\n\n    @gen.coroutine\n    def post(self):\n        author = self.db.get(\"SELECT * FROM authors WHERE email = %s\",\n                             self.get_argument(\"email\"))\n        if not author:\n            self.render(\"login.html\", error=\"email not found\")\n            return\n        hashed_password = yield executor.submit(\n            bcrypt.hashpw, tornado.escape.utf8(self.get_argument(\"password\")),\n            tornado.escape.utf8(author.hashed_password))\n        if hashed_password == author.hashed_password:\n            self.set_secure_cookie(\"blogdemo_user\", str(author.id))\n            self.redirect(self.get_argument(\"next\", \"/\"))\n        else:\n            self.render(\"login.html\", error=\"incorrect password\")\n\n\nclass AuthLogoutHandler(BaseHandler):\n    def get(self):\n        self.clear_cookie(\"blogdemo_user\")\n        self.redirect(self.get_argument(\"next\", \"/\"))\n\n\nclass EntryModule(tornado.web.UIModule):\n    def render(self, entry):\n        return self.render_string(\"modules/entry.html\", entry=entry)\n\n\ndef main():\n    tornado.options.parse_command_line()\n    http_server = tornado.httpserver.HTTPServer(Application())\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.current().start()\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "   usr bin env python       copyright 2009 facebook       licensed apache license  version 2 0 (the  license )  may    use file except compliance license  you may obtain    copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis  without    warranties or conditions of any kind  either express implied  see    license specific language governing permissions limitations    license     a thread pool used password hashing bcrypt     have one global connection blog db across handlers    if authors  redirect account creation page  ", "content": "#!/usr/bin/env python\n#\n# Copyright 2009 Facebook\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations\n# under the License.\n\nimport bcrypt\nimport concurrent.futures\nimport MySQLdb\nimport markdown\nimport os.path\nimport re\nimport subprocess\nimport torndb\nimport tornado.escape\nfrom tornado import gen\nimport tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\nimport unicodedata\n\nfrom tornado.options import define, options\n\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\ndefine(\"mysql_host\", default=\"127.0.0.1:3306\", help=\"blog database host\")\ndefine(\"mysql_database\", default=\"blog\", help=\"blog database name\")\ndefine(\"mysql_user\", default=\"blog\", help=\"blog database user\")\ndefine(\"mysql_password\", default=\"blog\", help=\"blog database password\")\n\n\n# A thread pool to be used for password hashing with bcrypt.\nexecutor = concurrent.futures.ThreadPoolExecutor(2)\n\n\nclass Application(tornado.web.Application):\n    def __init__(self):\n        handlers = [\n            (r\"/\", HomeHandler),\n            (r\"/archive\", ArchiveHandler),\n            (r\"/feed\", FeedHandler),\n            (r\"/entry/([^/]+)\", EntryHandler),\n            (r\"/compose\", ComposeHandler),\n            (r\"/auth/create\", AuthCreateHandler),\n            (r\"/auth/login\", AuthLoginHandler),\n            (r\"/auth/logout\", AuthLogoutHandler),\n        ]\n        settings = dict(\n            blog_title=u\"Tornado Blog\",\n            template_path=os.path.join(os.path.dirname(__file__), \"templates\"),\n            static_path=os.path.join(os.path.dirname(__file__), \"static\"),\n            ui_modules={\"Entry\": EntryModule},\n            xsrf_cookies=True,\n            cookie_secret=\"__TODO:_GENERATE_YOUR_OWN_RANDOM_VALUE_HERE__\",\n            login_url=\"/auth/login\",\n            debug=True,\n        )\n        super(Application, self).__init__(handlers, **settings)\n        # Have one global connection to the blog DB across all handlers\n        self.db = torndb.Connection(\n            host=options.mysql_host, database=options.mysql_database,\n            user=options.mysql_user, password=options.mysql_password)\n\n        self.maybe_create_tables()\n\n    def maybe_create_tables(self):\n        try:\n            self.db.get(\"SELECT COUNT(*) from entries;\")\n        except MySQLdb.ProgrammingError:\n            subprocess.check_call(['mysql',\n                                   '--host=' + options.mysql_host,\n                                   '--database=' + options.mysql_database,\n                                   '--user=' + options.mysql_user,\n                                   '--password=' + options.mysql_password],\n                                  stdin=open('schema.sql'))\n\n\nclass BaseHandler(tornado.web.RequestHandler):\n    @property\n    def db(self):\n        return self.application.db\n\n    def get_current_user(self):\n        user_id = self.get_secure_cookie(\"blogdemo_user\")\n        if not user_id:\n            return None\n        return self.db.get(\"SELECT * FROM authors WHERE id = %s\", int(user_id))\n\n    def any_author_exists(self):\n        return bool(self.db.get(\"SELECT * FROM authors LIMIT 1\"))\n\n\nclass HomeHandler(BaseHandler):\n    def get(self):\n        entries = self.db.query(\"SELECT * FROM entries ORDER BY published \"\n                                \"DESC LIMIT 5\")\n        if not entries:\n            self.redirect(\"/compose\")\n            return\n        self.render(\"home.html\", entries=entries)\n\n\nclass EntryHandler(BaseHandler):\n    def get(self, slug):\n        entry = self.db.get(\"SELECT * FROM entries WHERE slug = %s\", slug)\n        if not entry:\n            raise tornado.web.HTTPError(404)\n        self.render(\"entry.html\", entry=entry)\n\n\nclass ArchiveHandler(BaseHandler):\n    def get(self):\n        entries = self.db.query(\"SELECT * FROM entries ORDER BY published \"\n                                \"DESC\")\n        self.render(\"archive.html\", entries=entries)\n\n\nclass FeedHandler(BaseHandler):\n    def get(self):\n        entries = self.db.query(\"SELECT * FROM entries ORDER BY published \"\n                                \"DESC LIMIT 10\")\n        self.set_header(\"Content-Type\", \"application/atom+xml\")\n        self.render(\"feed.xml\", entries=entries)\n\n\nclass ComposeHandler(BaseHandler):\n    @tornado.web.authenticated\n    def get(self):\n        id = self.get_argument(\"id\", None)\n        entry = None\n        if id:\n            entry = self.db.get(\"SELECT * FROM entries WHERE id = %s\", int(id))\n        self.render(\"compose.html\", entry=entry)\n\n    @tornado.web.authenticated\n    def post(self):\n        id = self.get_argument(\"id\", None)\n        title = self.get_argument(\"title\")\n        text = self.get_argument(\"markdown\")\n        html = markdown.markdown(text)\n        if id:\n            entry = self.db.get(\"SELECT * FROM entries WHERE id = %s\", int(id))\n            if not entry:\n                raise tornado.web.HTTPError(404)\n            slug = entry.slug\n            self.db.execute(\n                \"UPDATE entries SET title = %s, markdown = %s, html = %s \"\n                \"WHERE id = %s\", title, text, html, int(id))\n        else:\n            slug = unicodedata.normalize(\"NFKD\", title).encode(\n                \"ascii\", \"ignore\")\n            slug = re.sub(r\"[^\\w]+\", \" \", slug)\n            slug = \"-\".join(slug.lower().strip().split())\n            if not slug:\n                slug = \"entry\"\n            while True:\n                e = self.db.get(\"SELECT * FROM entries WHERE slug = %s\", slug)\n                if not e:\n                    break\n                slug += \"-2\"\n            self.db.execute(\n                \"INSERT INTO entries (author_id,title,slug,markdown,html,\"\n                \"published) VALUES (%s,%s,%s,%s,%s,UTC_TIMESTAMP())\",\n                self.current_user.id, title, slug, text, html)\n        self.redirect(\"/entry/\" + slug)\n\n\nclass AuthCreateHandler(BaseHandler):\n    def get(self):\n        self.render(\"create_author.html\")\n\n    @gen.coroutine\n    def post(self):\n        if self.any_author_exists():\n            raise tornado.web.HTTPError(400, \"author already created\")\n        hashed_password = yield executor.submit(\n            bcrypt.hashpw, tornado.escape.utf8(self.get_argument(\"password\")),\n            bcrypt.gensalt())\n        author_id = self.db.execute(\n            \"INSERT INTO authors (email, name, hashed_password) \"\n            \"VALUES (%s, %s, %s)\",\n            self.get_argument(\"email\"), self.get_argument(\"name\"),\n            hashed_password)\n        self.set_secure_cookie(\"blogdemo_user\", str(author_id))\n        self.redirect(self.get_argument(\"next\", \"/\"))\n\n\nclass AuthLoginHandler(BaseHandler):\n    def get(self):\n        # If there are no authors, redirect to the account creation page.\n        if not self.any_author_exists():\n            self.redirect(\"/auth/create\")\n        else:\n            self.render(\"login.html\", error=None)\n\n    @gen.coroutine\n    def post(self):\n        author = self.db.get(\"SELECT * FROM authors WHERE email = %s\",\n                             self.get_argument(\"email\"))\n        if not author:\n            self.render(\"login.html\", error=\"email not found\")\n            return\n        hashed_password = yield executor.submit(\n            bcrypt.hashpw, tornado.escape.utf8(self.get_argument(\"password\")),\n            tornado.escape.utf8(author.hashed_password))\n        if hashed_password == author.hashed_password:\n            self.set_secure_cookie(\"blogdemo_user\", str(author.id))\n            self.redirect(self.get_argument(\"next\", \"/\"))\n        else:\n            self.render(\"login.html\", error=\"incorrect password\")\n\n\nclass AuthLogoutHandler(BaseHandler):\n    def get(self):\n        self.clear_cookie(\"blogdemo_user\")\n        self.redirect(self.get_argument(\"next\", \"/\"))\n\n\nclass EntryModule(tornado.web.UIModule):\n    def render(self, entry):\n        return self.render_string(\"modules/entry.html\", entry=entry)\n\n\ndef main():\n    tornado.options.parse_command_line()\n    http_server = tornado.httpserver.HTTPServer(Application())\n    http_server.listen(options.port)\n    tornado.ioloop.IOLoop.current().start()\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed.", "file_name": "blog.py", "id": "14042a21171371062d7e129853971182", "language": "Python", "project_name": "tornado", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tornadoweb-tornado/tornadoweb-tornado-62e43f6/demos/blog/blog.py", "save_time": "", "source": "", "update_at": "2018-03-13T23:11:42Z", "url": "https://github.com/tornadoweb/tornado", "wiki": true}