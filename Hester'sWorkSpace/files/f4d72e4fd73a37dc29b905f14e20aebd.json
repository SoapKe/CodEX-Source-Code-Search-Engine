{"author": "trailofbits", "code": "\n# -*- coding: utf-8 -*-\n\n\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: digital_ocean_tag\nshort_description: Create and remove tag(s) to DigitalOcean resource.\ndescription:\n    - Create and remove tag(s) to DigitalOcean resource.\nauthor: \"Victor Volle (@kontrafiktion)\"\nversion_added: \"2.2\"\noptions:\n  name:\n    description:\n     - The name of the tag. The supported characters for names include\n       alphanumeric characters, dashes, and underscores.\n    required: true\n  resource_id:\n    description:\n    - The ID of the resource to operate on.\n    - The data type of resource_id is changed from integer to string, from version 2.5.\n    aliases: ['droplet_id']\n  resource_type:\n    description:\n    - The type of resource to operate on. Currently, only tagging of\n      droplets is supported.\n    default: droplet\n    choices: ['droplet']\n  state:\n    description:\n     - Whether the tag should be present or absent on the resource.\n    default: present\n    choices: ['present', 'absent']\n  api_token:\n    description:\n     - DigitalOcean api token.\n\nnotes:\n  - Two environment variables can be used, DO_API_KEY and DO_API_TOKEN.\n    They both refer to the v2 token.\n  - As of Ansible 2.0, Version 2 of the DigitalOcean API is used.\n\nrequirements:\n  - \"python >= 2.6\"\n'''\n\n\nEXAMPLES = '''\n- name: create a tag\n  digital_ocean_tag:\n    name: production\n    state: present\n\n- name: tag a resource; creating the tag if it does not exists\n  digital_ocean_tag:\n    name: \"{{ item }}\"\n    resource_id: \"73333005\"\n    state: present\n  with_items:\n    - staging\n    - dbserver\n\n- name: untag a resource\n  digital_ocean_tag:\n    name: staging\n    resource_id: \"73333005\"\n    state: absent\n\n\n\n- name: remove a tag\n  digital_ocean_tag:\n    name: dbserver\n    state: absent\n'''\n\n\nRETURN = '''\ndata:\n    description: a DigitalOcean Tag resource\n    returned: success and no resource constraint\n    type: dict\n    sample: {\n        \"tag\": {\n        \"name\": \"awesome\",\n        \"resources\": {\n          \"droplets\": {\n            \"count\": 0,\n            \"last_tagged\": null\n          }\n        }\n      }\n    }\n'''\n\nfrom traceback import format_exc\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.digital_ocean import DigitalOceanHelper\nfrom ansible.module_utils._text import to_native\n\n\ndef core(module):\n    state = module.params['state']\n    name = module.params['name']\n    resource_id = module.params['resource_id']\n    resource_type = module.params['resource_type']\n\n    rest = DigitalOceanHelper(module)\n\n    \n    response = rest.get('account')\n    if response.status_code == 401:\n        module.fail_json(msg='Failed to login using api_token, please verify '\n                             'validity of api_token')\n    if state == 'present':\n        response = rest.get('tags/{0}'.format(name))\n        status_code = response.status_code\n        resp_json = response.json\n        changed = False\n        if status_code == 200 and resp_json['tag']['name'] == name:\n            changed = False\n        else:\n            \n            response = rest.post(\"tags\", data={'name': name})\n            status_code = response.status_code\n            resp_json = response.json\n            if status_code == 201:\n                changed = True\n            elif status_code == 422:\n                changed = False\n            else:\n                module.exit_json(changed=False, data=resp_json)\n\n        if resource_id is None:\n            \n            module.exit_json(changed=changed, data=resp_json)\n        else:\n            \n            found = False\n            url = \"{0}?tag_name={1}\".format(resource_type, name)\n            if resource_type == 'droplet':\n                url = \"droplets?tag_name={0}\".format(name)\n            response = rest.get(url)\n            status_code = response.status_code\n            resp_json = response.json\n            if status_code == 200:\n                for resource in resp_json['droplets']:\n                    if not found and resource['id'] == int(resource_id):\n                        found = True\n                        break\n                if not found:\n                    \n                    url = \"tags/{0}/resources\".format(name)\n                    payload = {\n                        'resources': [{\n                            'resource_id': resource_id,\n                            'resource_type': resource_type}]}\n                    response = rest.post(url, data=payload)\n                    if response.status_code == 204:\n                        module.exit_json(changed=True)\n                    else:\n                        module.fail_json(msg=\"error tagging resource '{0}': {1}\".format(resource_id, response.json[\"message\"]))\n                else:\n                    \n                    module.exit_json(changed=False)\n            else:\n                \n                module.fail_json(msg=resp_json['message'])\n\n    elif state == 'absent':\n        if resource_id:\n            url = \"tags/{0}/resources\".format(name)\n            payload = {\n                'resources': [{\n                    'resource_id': resource_id,\n                    'resource_type': resource_type}]}\n            response = rest.delete(url, data=payload)\n        else:\n            url = \"tags/{0}\".format(name)\n            response = rest.delete(url)\n        if response.status_code == 204:\n            module.exit_json(changed=True)\n        else:\n            module.exit_json(changed=False, data=response.json)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(type='str', required=True),\n            resource_id=dict(aliases=['droplet_id'], type='str'),\n            resource_type=dict(choices=['droplet'], default='droplet'),\n            state=dict(choices=['present', 'absent'], default='present'),\n            api_token=dict(aliases=['API_TOKEN'], no_log=True),\n        )\n    )\n\n    try:\n        core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  digital ocean tag short description  create remove tag(s) digitalocean resource  description        create remove tag(s) digitalocean resource  author   victor volle ( kontrafiktion)  version added   2 2  options    name      description         the name tag  the supported characters names include        alphanumeric characters  dashes  underscores      required  true   resource id      description        the id resource operate        the data type resource id changed integer string  version 2 5      aliases    droplet id     resource type      description        the type resource operate  currently  tagging       droplets supported      default  droplet     choices    droplet     state      description         whether tag present absent resource      default  present     choices    present    absent     api token      description         digitalocean api token   notes      two environment variables used  do api key do api token      they refer v2 token      as ansible 2 0  version 2 digitalocean api used   requirements       python    2 6        examples         name  create tag   digital ocean tag      name  production     state  present    name  tag resource  creating tag exists   digital ocean tag      name      item         resource id   73333005      state  present   items        staging       dbserver    name  untag resource   digital ocean tag      name  staging     resource id   73333005      state  absent    deleting tag also untags resources previously   tagged   name  remove tag   digital ocean tag      name  dbserver     state  absent       return       data      description  digitalocean tag resource     returned  success resource constraint     type  dict     sample             tag              name    awesome            resources                droplets                  count   0               last tagged   null                                             usr bin python        coding  utf 8        copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    deleting tag also untags resources previously    tagged    check api token valid    ensure tag exists    no resource defined  done     check resource already tagged    if resource tagged  tag resource    already tagged resource    unable find resource specified user ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: digital_ocean_tag\nshort_description: Create and remove tag(s) to DigitalOcean resource.\ndescription:\n    - Create and remove tag(s) to DigitalOcean resource.\nauthor: \"Victor Volle (@kontrafiktion)\"\nversion_added: \"2.2\"\noptions:\n  name:\n    description:\n     - The name of the tag. The supported characters for names include\n       alphanumeric characters, dashes, and underscores.\n    required: true\n  resource_id:\n    description:\n    - The ID of the resource to operate on.\n    - The data type of resource_id is changed from integer to string, from version 2.5.\n    aliases: ['droplet_id']\n  resource_type:\n    description:\n    - The type of resource to operate on. Currently, only tagging of\n      droplets is supported.\n    default: droplet\n    choices: ['droplet']\n  state:\n    description:\n     - Whether the tag should be present or absent on the resource.\n    default: present\n    choices: ['present', 'absent']\n  api_token:\n    description:\n     - DigitalOcean api token.\n\nnotes:\n  - Two environment variables can be used, DO_API_KEY and DO_API_TOKEN.\n    They both refer to the v2 token.\n  - As of Ansible 2.0, Version 2 of the DigitalOcean API is used.\n\nrequirements:\n  - \"python >= 2.6\"\n'''\n\n\nEXAMPLES = '''\n- name: create a tag\n  digital_ocean_tag:\n    name: production\n    state: present\n\n- name: tag a resource; creating the tag if it does not exists\n  digital_ocean_tag:\n    name: \"{{ item }}\"\n    resource_id: \"73333005\"\n    state: present\n  with_items:\n    - staging\n    - dbserver\n\n- name: untag a resource\n  digital_ocean_tag:\n    name: staging\n    resource_id: \"73333005\"\n    state: absent\n\n# Deleting a tag also untags all the resources that have previously been\n# tagged with it\n- name: remove a tag\n  digital_ocean_tag:\n    name: dbserver\n    state: absent\n'''\n\n\nRETURN = '''\ndata:\n    description: a DigitalOcean Tag resource\n    returned: success and no resource constraint\n    type: dict\n    sample: {\n        \"tag\": {\n        \"name\": \"awesome\",\n        \"resources\": {\n          \"droplets\": {\n            \"count\": 0,\n            \"last_tagged\": null\n          }\n        }\n      }\n    }\n'''\n\nfrom traceback import format_exc\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.digital_ocean import DigitalOceanHelper\nfrom ansible.module_utils._text import to_native\n\n\ndef core(module):\n    state = module.params['state']\n    name = module.params['name']\n    resource_id = module.params['resource_id']\n    resource_type = module.params['resource_type']\n\n    rest = DigitalOceanHelper(module)\n\n    # Check if api_token is valid or not\n    response = rest.get('account')\n    if response.status_code == 401:\n        module.fail_json(msg='Failed to login using api_token, please verify '\n                             'validity of api_token')\n    if state == 'present':\n        response = rest.get('tags/{0}'.format(name))\n        status_code = response.status_code\n        resp_json = response.json\n        changed = False\n        if status_code == 200 and resp_json['tag']['name'] == name:\n            changed = False\n        else:\n            # Ensure Tag exists\n            response = rest.post(\"tags\", data={'name': name})\n            status_code = response.status_code\n            resp_json = response.json\n            if status_code == 201:\n                changed = True\n            elif status_code == 422:\n                changed = False\n            else:\n                module.exit_json(changed=False, data=resp_json)\n\n        if resource_id is None:\n            # No resource defined, we're done.\n            module.exit_json(changed=changed, data=resp_json)\n        else:\n            # Check if resource is already tagged or not\n            found = False\n            url = \"{0}?tag_name={1}\".format(resource_type, name)\n            if resource_type == 'droplet':\n                url = \"droplets?tag_name={0}\".format(name)\n            response = rest.get(url)\n            status_code = response.status_code\n            resp_json = response.json\n            if status_code == 200:\n                for resource in resp_json['droplets']:\n                    if not found and resource['id'] == int(resource_id):\n                        found = True\n                        break\n                if not found:\n                    # If resource is not tagged, tag a resource\n                    url = \"tags/{0}/resources\".format(name)\n                    payload = {\n                        'resources': [{\n                            'resource_id': resource_id,\n                            'resource_type': resource_type}]}\n                    response = rest.post(url, data=payload)\n                    if response.status_code == 204:\n                        module.exit_json(changed=True)\n                    else:\n                        module.fail_json(msg=\"error tagging resource '{0}': {1}\".format(resource_id, response.json[\"message\"]))\n                else:\n                    # Already tagged resource\n                    module.exit_json(changed=False)\n            else:\n                # Unable to find resource specified by user\n                module.fail_json(msg=resp_json['message'])\n\n    elif state == 'absent':\n        if resource_id:\n            url = \"tags/{0}/resources\".format(name)\n            payload = {\n                'resources': [{\n                    'resource_id': resource_id,\n                    'resource_type': resource_type}]}\n            response = rest.delete(url, data=payload)\n        else:\n            url = \"tags/{0}\".format(name)\n            response = rest.delete(url)\n        if response.status_code == 204:\n            module.exit_json(changed=True)\n        else:\n            module.exit_json(changed=False, data=response.json)\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            name=dict(type='str', required=True),\n            resource_id=dict(aliases=['droplet_id'], type='str'),\n            resource_type=dict(choices=['droplet'], default='droplet'),\n            state=dict(choices=['present', 'absent'], default='present'),\n            api_token=dict(aliases=['API_TOKEN'], no_log=True),\n        )\n    )\n\n    try:\n        core(module)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=format_exc())\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Set up a personal IPSEC VPN in the cloud", "file_name": "digital_ocean_tag.py", "id": "f4d72e4fd73a37dc29b905f14e20aebd", "language": "Python", "project_name": "algo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/trailofbits-algo/trailofbits-algo-4e4440a/library/digital_ocean_tag.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:58:32Z", "url": "https://github.com/trailofbits/algo", "wiki": false}