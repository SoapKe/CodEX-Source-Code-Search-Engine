{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport werkzeug.urls\n\nfrom odoo import http\nfrom odoo.addons.http_routing.models.ir_http import unslug, slug\nfrom odoo.addons.website.models.ir_http import sitemap_qs2dom\nfrom odoo.tools.translate import _\nfrom odoo.http import request\n\n\nclass WebsiteCustomer(http.Controller):\n    _references_per_page = 20\n\n    def sitemap_industry(env, rule, qs):\n        if not qs or qs.lower() in '/customers':\n            yield {'loc': '/customers'}\n\n        Industry = env['res.partner.industry']\n        dom = sitemap_qs2dom(qs, '/customers/industry', Industry._rec_name)\n        for industry in Industry.search(dom):\n            loc = '/customers/industry/%s' % slug(industry)\n            if not qs or qs.lower() in loc:\n                yield {'loc': loc}\n\n        dom = [('website_published', '=', True), ('assigned_partner_id', '!=', False), ('country_id', '!=', False)]\n        dom += sitemap_qs2dom(qs, '/customers/country')\n        countries = env['res.partner'].sudo().read_group(dom, ['id', 'country_id'], groupby='country_id')\n        for country in countries:\n            loc = '/customers/country/%s' % slug(country['country_id'])\n            if not qs or qs.lower() in loc:\n                yield {'loc': loc}\n\n    @http.route([\n        '/customers',\n        '/customers/page/<int:page>',\n        '/customers/country/<model(\"res.country\"):country>',\n        '/customers/country/<model(\"res.country\"):country>/page/<int:page>',\n        '/customers/industry/<model(\"res.partner.industry\"):industry>',\n        '/customers/industry/<model(\"res.partner.industry\"):industry>/page/<int:page>',\n        '/customers/industry/<model(\"res.partner.industry\"):industry>/country/<model(\"res.country\"):country>',\n        '/customers/industry/<model(\"res.partner.industry\"):industry>/country/<model(\"res.country\"):country>/page/<int:page>',\n    ], type='http', auth=\"public\", website=True, sitemap=sitemap_industry)\n    def customers(self, country=None, industry=None, page=0, **post):\n        Tag = request.env['res.partner.tag']\n        Partner = request.env['res.partner']\n        search_value = post.get('search')\n\n        domain = [('website_published', '=', True), ('assigned_partner_id', '!=', False)]\n        if search_value:\n            domain += [\n                '|', '|',\n                ('name', 'ilike', search_value),\n                ('website_description', 'ilike', search_value),\n                ('industry_id.name', 'ilike', search_value),\n            ]\n\n        tag_id = post.get('tag_id')\n        if tag_id:\n            tag_id = unslug(tag_id)[1] or 0\n            domain += [('website_tag_ids', 'in', tag_id)]\n\n        # group by industry, based on customers found with the search(domain)\n        industries = Partner.sudo().read_group(domain, [\"id\", \"industry_id\"], groupby=\"industry_id\", orderby=\"industry_id\")\n        partners_count = Partner.sudo().search_count(domain)\n\n        if industry:\n            domain.append(('industry_id', '=', industry.id))\n            if industry.id not in (x['industry_id'][0] for x in industries if x['industry_id']):\n                if industry.exists():\n                    industries.append({\n                        'industry_id_count': 0,\n                        'industry_id': (industry.id, industry.name)\n                    })\n\n        industries.sort(key=lambda d: (d.get('industry_id') or (0, ''))[1])\n\n        industries.insert(0, {\n            'industry_id_count': partners_count,\n            'industry_id': (0, _(\"All Sectors of Activity\"))\n        })\n\n        # group by country, based on customers found with the search(domain)\n        countries = Partner.sudo().read_group(domain, [\"id\", \"country_id\"], groupby=\"country_id\", orderby=\"country_id\")\n        country_count = Partner.sudo().search_count(domain)\n\n        if country:\n            domain += [('country_id', '=', country.id)]\n            if country.id not in (x['country_id'][0] for x in countries if x['country_id']):\n                if country.exists():\n                    countries.append({\n                        'country_id_count': 0,\n                        'country_id': (country.id, country.name)\n                    })\n                    countries.sort(key=lambda d: (d['country_id'] or (0, \"\"))[1])\n\n        countries.insert(0, {\n            'country_id_count': country_count,\n            'country_id': (0, _(\"All Countries\"))\n        })\n\n        \n        partner_count = Partner.sudo().search_count(domain)\n\n        \n        url = '/customers'\n        if industry:\n            url += '/industry/%s' % industry.id\n        if country:\n            url += '/country/%s' % country.id\n        pager = request.website.pager(\n            url=url, total=partner_count, page=page, step=self._references_per_page,\n            scope=7, url_args=post\n        )\n\n        partners = Partner.sudo().search(domain, offset=pager['offset'], limit=self._references_per_page)\n        google_map_partner_ids = ','.join(str(it) for it in partners.ids)\n        google_maps_api_key = request.env['ir.config_parameter'].sudo().get_param('google_maps_api_key')\n\n        tags = Tag.search([('website_published', '=', True), ('partner_ids', 'in', partners.ids)], order='classname, name ASC')\n        tag = tag_id and Tag.browse(tag_id) or False\n\n        values = {\n            'countries': countries,\n            'current_country_id': country.id if country else 0,\n            'current_country': country or False,\n            'industries': industries,\n            'current_industry_id': industry.id if industry else 0,\n            'current_industry': industry or False,\n            'partners': partners,\n            'google_map_partner_ids': google_map_partner_ids,\n            'pager': pager,\n            'post': post,\n            'search_path': \"?%s\" % werkzeug.url_encode(post),\n            'tag': tag,\n            'tags': tags,\n            'google_maps_api_key': google_maps_api_key,\n        }\n        return request.render(\"website_customer.index\", values)\n\n    \n    @http.route(['/customers/<partner_id>'], type='http', auth=\"public\", website=True)\n    def partners_detail(self, partner_id, **post):\n        _, partner_id = unslug(partner_id)\n        if partner_id:\n            partner = request.env['res.partner'].sudo().browse(partner_id)\n            if partner.exists() and partner.website_published:\n                values = {}\n                values['main_object'] = values['partner'] = partner\n                return request.render(\"website_customer.details\", values)\n        return self.customers(**post)\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     group industry  based customers found search(domain)    group country  based customers found search(domain)    search customers display    pager    do use semantic controller due superuser id ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport werkzeug.urls\n\nfrom odoo import http\nfrom odoo.addons.http_routing.models.ir_http import unslug, slug\nfrom odoo.addons.website.models.ir_http import sitemap_qs2dom\nfrom odoo.tools.translate import _\nfrom odoo.http import request\n\n\nclass WebsiteCustomer(http.Controller):\n    _references_per_page = 20\n\n    def sitemap_industry(env, rule, qs):\n        if not qs or qs.lower() in '/customers':\n            yield {'loc': '/customers'}\n\n        Industry = env['res.partner.industry']\n        dom = sitemap_qs2dom(qs, '/customers/industry', Industry._rec_name)\n        for industry in Industry.search(dom):\n            loc = '/customers/industry/%s' % slug(industry)\n            if not qs or qs.lower() in loc:\n                yield {'loc': loc}\n\n        dom = [('website_published', '=', True), ('assigned_partner_id', '!=', False), ('country_id', '!=', False)]\n        dom += sitemap_qs2dom(qs, '/customers/country')\n        countries = env['res.partner'].sudo().read_group(dom, ['id', 'country_id'], groupby='country_id')\n        for country in countries:\n            loc = '/customers/country/%s' % slug(country['country_id'])\n            if not qs or qs.lower() in loc:\n                yield {'loc': loc}\n\n    @http.route([\n        '/customers',\n        '/customers/page/<int:page>',\n        '/customers/country/<model(\"res.country\"):country>',\n        '/customers/country/<model(\"res.country\"):country>/page/<int:page>',\n        '/customers/industry/<model(\"res.partner.industry\"):industry>',\n        '/customers/industry/<model(\"res.partner.industry\"):industry>/page/<int:page>',\n        '/customers/industry/<model(\"res.partner.industry\"):industry>/country/<model(\"res.country\"):country>',\n        '/customers/industry/<model(\"res.partner.industry\"):industry>/country/<model(\"res.country\"):country>/page/<int:page>',\n    ], type='http', auth=\"public\", website=True, sitemap=sitemap_industry)\n    def customers(self, country=None, industry=None, page=0, **post):\n        Tag = request.env['res.partner.tag']\n        Partner = request.env['res.partner']\n        search_value = post.get('search')\n\n        domain = [('website_published', '=', True), ('assigned_partner_id', '!=', False)]\n        if search_value:\n            domain += [\n                '|', '|',\n                ('name', 'ilike', search_value),\n                ('website_description', 'ilike', search_value),\n                ('industry_id.name', 'ilike', search_value),\n            ]\n\n        tag_id = post.get('tag_id')\n        if tag_id:\n            tag_id = unslug(tag_id)[1] or 0\n            domain += [('website_tag_ids', 'in', tag_id)]\n\n        # group by industry, based on customers found with the search(domain)\n        industries = Partner.sudo().read_group(domain, [\"id\", \"industry_id\"], groupby=\"industry_id\", orderby=\"industry_id\")\n        partners_count = Partner.sudo().search_count(domain)\n\n        if industry:\n            domain.append(('industry_id', '=', industry.id))\n            if industry.id not in (x['industry_id'][0] for x in industries if x['industry_id']):\n                if industry.exists():\n                    industries.append({\n                        'industry_id_count': 0,\n                        'industry_id': (industry.id, industry.name)\n                    })\n\n        industries.sort(key=lambda d: (d.get('industry_id') or (0, ''))[1])\n\n        industries.insert(0, {\n            'industry_id_count': partners_count,\n            'industry_id': (0, _(\"All Sectors of Activity\"))\n        })\n\n        # group by country, based on customers found with the search(domain)\n        countries = Partner.sudo().read_group(domain, [\"id\", \"country_id\"], groupby=\"country_id\", orderby=\"country_id\")\n        country_count = Partner.sudo().search_count(domain)\n\n        if country:\n            domain += [('country_id', '=', country.id)]\n            if country.id not in (x['country_id'][0] for x in countries if x['country_id']):\n                if country.exists():\n                    countries.append({\n                        'country_id_count': 0,\n                        'country_id': (country.id, country.name)\n                    })\n                    countries.sort(key=lambda d: (d['country_id'] or (0, \"\"))[1])\n\n        countries.insert(0, {\n            'country_id_count': country_count,\n            'country_id': (0, _(\"All Countries\"))\n        })\n\n        # search customers to display\n        partner_count = Partner.sudo().search_count(domain)\n\n        # pager\n        url = '/customers'\n        if industry:\n            url += '/industry/%s' % industry.id\n        if country:\n            url += '/country/%s' % country.id\n        pager = request.website.pager(\n            url=url, total=partner_count, page=page, step=self._references_per_page,\n            scope=7, url_args=post\n        )\n\n        partners = Partner.sudo().search(domain, offset=pager['offset'], limit=self._references_per_page)\n        google_map_partner_ids = ','.join(str(it) for it in partners.ids)\n        google_maps_api_key = request.env['ir.config_parameter'].sudo().get_param('google_maps_api_key')\n\n        tags = Tag.search([('website_published', '=', True), ('partner_ids', 'in', partners.ids)], order='classname, name ASC')\n        tag = tag_id and Tag.browse(tag_id) or False\n\n        values = {\n            'countries': countries,\n            'current_country_id': country.id if country else 0,\n            'current_country': country or False,\n            'industries': industries,\n            'current_industry_id': industry.id if industry else 0,\n            'current_industry': industry or False,\n            'partners': partners,\n            'google_map_partner_ids': google_map_partner_ids,\n            'pager': pager,\n            'post': post,\n            'search_path': \"?%s\" % werkzeug.url_encode(post),\n            'tag': tag,\n            'tags': tags,\n            'google_maps_api_key': google_maps_api_key,\n        }\n        return request.render(\"website_customer.index\", values)\n\n    # Do not use semantic controller due to SUPERUSER_ID\n    @http.route(['/customers/<partner_id>'], type='http', auth=\"public\", website=True)\n    def partners_detail(self, partner_id, **post):\n        _, partner_id = unslug(partner_id)\n        if partner_id:\n            partner = request.env['res.partner'].sudo().browse(partner_id)\n            if partner.exists() and partner.website_published:\n                values = {}\n                values['main_object'] = values['partner'] = partner\n                return request.render(\"website_customer.details\", values)\n        return self.customers(**post)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "59d3044f761e8f60264d5db68f378a26", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/website_customer/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}