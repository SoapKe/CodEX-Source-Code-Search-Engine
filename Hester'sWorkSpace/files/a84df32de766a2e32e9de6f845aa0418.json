{"author": "odoo", "code": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\nimport time\nimport unittest\n\n\nclass TestReconciliation(AccountingTestCase):\n\n    \"\"\"Tests for reconciliation (account.tax)\n\n    Test used to check that when doing a sale or purchase invoice in a different currency,\n    the result will be balanced.\n    \"\"\"\n\n    def setUp(self):\n        super(TestReconciliation, self).setUp()\n        self.account_invoice_model = self.env['account.invoice']\n        self.account_invoice_line_model = self.env['account.invoice.line']\n        self.acc_bank_stmt_model = self.env['account.bank.statement']\n        self.acc_bank_stmt_line_model = self.env['account.bank.statement.line']\n        self.res_currency_model = self.registry('res.currency')\n        self.res_currency_rate_model = self.registry('res.currency.rate')\n\n        partner_agrolait = self.env.ref(\"base.res_partner_2\")\n        self.partner_agrolait_id = partner_agrolait.id\n        self.currency_swiss_id = self.env.ref(\"base.CHF\").id\n        self.currency_usd_id = self.env.ref(\"base.USD\").id\n        self.currency_euro_id = self.env.ref(\"base.EUR\").id\n        company = self.env.ref('base.main_company')\n        self.cr.execute(\"UPDATE res_company SET currency_id = %s WHERE id = %s\", [self.currency_euro_id, company.id])\n        self.account_rcv = partner_agrolait.property_account_receivable_id or self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1)\n        self.account_rsa = partner_agrolait.property_account_payable_id or self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_payable').id)], limit=1)\n        self.product = self.env.ref(\"product.product_product_4\")\n\n        self.bank_journal_euro = self.env['account.journal'].create({'name': 'Bank', 'type': 'bank', 'code': 'BNK67'})\n        self.account_euro = self.bank_journal_euro.default_debit_account_id\n\n        self.bank_journal_usd = self.env['account.journal'].create({'name': 'Bank US', 'type': 'bank', 'code': 'BNK68', 'currency_id': self.currency_usd_id})\n        self.account_usd = self.bank_journal_usd.default_debit_account_id\n        \n        self.diff_income_account = self.env['res.users'].browse(self.env.uid).company_id.income_currency_exchange_account_id\n        self.diff_expense_account = self.env['res.users'].browse(self.env.uid).company_id.expense_currency_exchange_account_id\n\n    def create_invoice(self, type='out_invoice', invoice_amount=50, currency_id=None):\n        \n        invoice = self.account_invoice_model.create({'partner_id': self.partner_agrolait_id,\n            'reference_type': 'none',\n            'currency_id': currency_id,\n            'name': type == 'out_invoice' and 'invoice to client' or 'invoice to vendor',\n            'account_id': self.account_rcv.id,\n            'type': type,\n            'date_invoice': time.strftime('%Y') + '-07-01',\n            })\n        self.account_invoice_line_model.create({'product_id': self.product.id,\n            'quantity': 1,\n            'price_unit': invoice_amount,\n            'invoice_id': invoice.id,\n            'name': 'product that cost ' + str(invoice_amount),\n            'account_id': self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1).id,\n        })\n\n        \n        invoice.action_invoice_open()\n        return invoice\n\n    def make_payment(self, invoice_record, bank_journal, amount=0.0, amount_currency=0.0, currency_id=None):\n        bank_stmt = self.acc_bank_stmt_model.create({\n            'journal_id': bank_journal.id,\n            'date': time.strftime('%Y') + '-07-15',\n            'name': 'payment' + invoice_record.number\n        })\n\n        bank_stmt_line = self.acc_bank_stmt_line_model.create({'name': 'payment',\n            'statement_id': bank_stmt.id,\n            'partner_id': self.partner_agrolait_id,\n            'amount': amount,\n            'amount_currency': amount_currency,\n            'currency_id': currency_id,\n            'date': time.strftime('%Y') + '-07-15',})\n\n        \n        for l in invoice_record.move_id.line_ids:\n            if l.account_id.id == self.account_rcv.id:\n                line_id = l\n                break\n        amount_in_widget = currency_id and amount_currency or amount\n        bank_stmt_line.process_reconciliation(counterpart_aml_dicts=[{\n            'move_line': line_id,\n            'debit': amount_in_widget < 0 and -amount_in_widget or 0.0,\n            'credit': amount_in_widget > 0 and amount_in_widget or 0.0,\n            'name': line_id.name,\n            }])\n        return bank_stmt\n\n    def check_results(self, move_line_recs, aml_dict):\n        we check that the line is balanced (bank statement line)\n        self.assertEquals(len(move_line_recs), len(aml_dict))\n        for move_line in move_line_recs:\n            self.assertEquals(round(move_line.debit, 2), aml_dict[move_line.account_id.id]['debit'])\n            self.assertEquals(round(move_line.credit, 2), aml_dict[move_line.account_id.id]['credit'])\n            self.assertEquals(round(move_line.amount_currency, 2), aml_dict[move_line.account_id.id]['amount_currency'])\n            self.assertEquals(move_line.currency_id.id, aml_dict[move_line.account_id.id]['currency_id'])\n            if 'currency_diff' in aml_dict[move_line.account_id.id]:\n                currency_diff_move = move_line.full_reconcile_id.exchange_move_id\n                for currency_diff_line in currency_diff_move.line_ids:\n                    if aml_dict[move_line.account_id.id].get('currency_diff') == 0:\n                        if currency_diff_line.account_id.id == move_line.account_id.id:\n                            self.assertAlmostEquals(currency_diff_line.amount_currency, aml_dict[move_line.account_id.id].get('amount_currency_diff'))\n                    if aml_dict[move_line.account_id.id].get('currency_diff') == 0:\n                        if currency_diff_line.account_id.id == move_line.account_id.id:\n                            self.assertAlmostEquals(currency_diff_line.amount_currency, aml_dict[move_line.account_id.id].get('amount_currency_diff'))\n                    if aml_dict[move_line.account_id.id].get('currency_diff') > 0:\n                        if currency_diff_line.account_id.id == move_line.account_id.id:\n                            self.assertAlmostEquals(currency_diff_line.debit, aml_dict[move_line.account_id.id].get('currency_diff'))\n                        else:\n                            self.assertAlmostEquals(currency_diff_line.credit, aml_dict[move_line.account_id.id].get('currency_diff'))\n                            self.assertIn(currency_diff_line.account_id.id, [self.diff_expense_account.id, self.diff_income_account.id], 'The difference accounts should be used correctly. ')\n                    else:\n                        if currency_diff_line.account_id.id == move_line.account_id.id:\n                            self.assertAlmostEquals(currency_diff_line.credit, abs(aml_dict[move_line.account_id.id].get('currency_diff')))\n                        else:\n                            self.assertAlmostEquals(currency_diff_line.debit, abs(aml_dict[move_line.account_id.id].get('currency_diff')))\n                            self.assertIn(currency_diff_line.account_id.id, [self.diff_expense_account.id, self.diff_income_account.id], 'The difference accounts should be used correctly. ')\n\n    def make_customer_and_supplier_flows(self, invoice_currency_id, invoice_amount, bank_journal, amount, amount_currency, transaction_currency_id):\n        \n        invoice_record = self.create_invoice(type='out_invoice', invoice_amount=invoice_amount, currency_id=invoice_currency_id)\n        \n        bank_stmt = self.make_payment(invoice_record, bank_journal, amount=amount, amount_currency=amount_currency, currency_id=transaction_currency_id)\n        customer_move_lines = bank_stmt.move_line_ids\n\n        \n        invoice_record = self.create_invoice(type='in_invoice', invoice_amount=invoice_amount, currency_id=invoice_currency_id)\n        \n        bank_stmt = self.make_payment(invoice_record, bank_journal, amount=-amount, amount_currency=-amount_currency, currency_id=transaction_currency_id)\n        supplier_move_lines = bank_stmt.move_line_ids\n        return customer_move_lines, supplier_move_lines\n\n    def test_statement_usd_invoice_eur_transaction_eur(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_euro_id, 30, self.bank_journal_usd, 42, 30, self.currency_euro_id)\n        self.check_results(customer_move_lines, {\n            self.account_usd.id: {'debit': 30.0, 'credit': 0.0, 'amount_currency': 42, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 30.0, 'amount_currency': -42, 'currency_id': self.currency_usd_id},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_usd.id: {'debit': 0.0, 'credit': 30.0, 'amount_currency': -42, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 30.0, 'credit': 0.0, 'amount_currency': 42, 'currency_id': self.currency_usd_id},\n        })\n\n    def test_statement_usd_invoice_usd_transaction_usd(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_usd, 50, 0, False)\n        self.check_results(customer_move_lines, {\n            self.account_usd.id: {'debit': 32.70, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 32.70, 'amount_currency': -50, 'currency_id': self.currency_usd_id},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_usd.id: {'debit': 0.0, 'credit': 32.70, 'amount_currency': -50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 32.70, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id},\n        })\n\n    def test_statement_usd_invoice_usd_transaction_eur(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_usd, 50, 40, self.currency_euro_id)\n        self.check_results(customer_move_lines, {\n            self.account_usd.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -50, 'currency_id': self.currency_usd_id, 'currency_diff': 7.30},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_usd.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id, 'currency_diff': -7.30},\n        })\n\n    def test_statement_usd_invoice_chf_transaction_chf(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_swiss_id, 50, self.bank_journal_usd, 42, 50, self.currency_swiss_id)\n        self.check_results(customer_move_lines, {\n            self.account_usd.id: {'debit': 27.47, 'credit': 0.0, 'amount_currency': 42, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 27.47, 'amount_currency': -50, 'currency_id': self.currency_swiss_id, 'currency_diff': -10.74},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_usd.id: {'debit': 0.0, 'credit': 27.47, 'amount_currency': -42, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 27.47, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_swiss_id, 'currency_diff': 10.74},\n        })\n\n    def test_statement_eur_invoice_usd_transaction_usd(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_euro, 40, 50, self.currency_usd_id)\n        self.check_results(customer_move_lines, {\n            self.account_euro.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -50, 'currency_id': self.currency_usd_id, 'currency_diff': 7.30},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_euro.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id, 'currency_diff': -7.30},\n        })\n\n    def test_statement_eur_invoice_usd_transaction_eur(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_euro, 40, 0.0, False)\n        self.check_results(customer_move_lines, {\n            self.account_euro.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 0.0, 'currency_id': False},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -61.16, 'currency_id': self.currency_usd_id},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_euro.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': 0.0, 'currency_id': False},\n            self.account_rcv.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 61.16, 'currency_id': self.currency_usd_id},\n        })\n\n    def test_statement_euro_invoice_usd_transaction_chf(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_euro, 42, 50, self.currency_swiss_id)\n        self.check_results(customer_move_lines, {\n            self.account_euro.id: {'debit': 42.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_swiss_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 42.0, 'amount_currency': -50, 'currency_id': self.currency_swiss_id},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_euro.id: {'debit': 0.0, 'credit': 42.0, 'amount_currency': -50, 'currency_id': self.currency_swiss_id},\n            self.account_rcv.id: {'debit': 42.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_swiss_id},\n        })\n\n    def test_statement_euro_invoice_usd_transaction_euro_full(self):\n        \n        invoice_record = self.create_invoice(type='out_invoice', invoice_amount=50, currency_id=self.currency_usd_id)\n        \n        bank_stmt = self.acc_bank_stmt_model.create({\n            'journal_id': self.bank_journal_euro.id,\n            'date': time.strftime('%Y') + '-01-01',\n        })\n\n        bank_stmt_line = self.acc_bank_stmt_line_model.create({'name': 'payment',\n            'statement_id': bank_stmt.id,\n            'partner_id': self.partner_agrolait_id,\n            'amount': 40,\n            'date': time.strftime('%Y') + '-01-01',})\n\n        \n        for l in invoice_record.move_id.line_ids:\n            if l.account_id.id == self.account_rcv.id:\n                line_id = l\n                break\n        bank_stmt_line.process_reconciliation(counterpart_aml_dicts=[{\n              'move_line': line_id,\n              'debit': 0.0,\n              'credit': 32.7,\n              'name': line_id.name,\n            }], new_aml_dicts=[{\n              'debit': 0.0,\n              'credit': 7.3,\n              'name': 'exchange difference',\n              'account_id': self.diff_income_account.id\n            }])\n        self.check_results(bank_stmt.move_line_ids, {\n            self.account_euro.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 0, 'currency_id': False},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 32.7, 'amount_currency': -41.97, 'currency_id': self.currency_usd_id, 'currency_diff': 0, 'amount_currency_diff': -8.03},\n            self.diff_income_account.id: {'debit': 0.0, 'credit': 7.3, 'amount_currency': -9.37, 'currency_id': self.currency_usd_id},\n        })\n\n        \n        self.assertEquals(invoice_record.state, 'paid', 'The invoice should be paid by now')\n        invoice_rec_line = invoice_record.move_id.line_ids.filtered(lambda x: x.account_id.reconcile)\n        self.assertTrue(invoice_rec_line.reconciled, 'The invoice should be totally reconciled')\n        self.assertEquals(invoice_rec_line.amount_residual, 0, 'The invoice should be totally reconciled')\n        self.assertEquals(invoice_rec_line.amount_residual_currency, 0, 'The invoice should be totally reconciled')\n\n    @unittest.skip('adapt to new accounting')\n    def test_balanced_exchanges_gain_loss(self):\n        \n        \n         the reconciliation of an invoice of 2.00 USD (60.61 EUR) and a bank statement of two lines of 1.00 USD (30.30 EUR)\n        \n        env = api.Environment(self.cr, self.uid, {})\n        \n        rateUSDbis = env.ref(\"base.rateUSDbis\")\n        rateUSDbis.write({\n            'name': time.strftime('%Y-%m-%d') + ' 00:00:00',\n            'rate': 0.033,\n        })\n        \n        invoice = self.account_invoice_model.create({\n            'partner_id': self.partner_agrolait_id,\n            'currency_id': self.currency_usd_id,\n            'name': 'Foreign invoice with exchange gain',\n            'account_id': self.account_rcv_id,\n            'type': 'out_invoice',\n            'date_invoice': time.strftime('%Y-%m-%d'),\n            'journal_id': self.bank_journal_usd_id,\n            'invoice_line': [\n                (0, 0, {\n                    'name': 'line that will lead to an exchange gain',\n                    'quantity': 1,\n                    'price_unit': 2,\n                })\n            ]\n        })\n        invoice.action_invoice_open()\n        \n        statement = self.acc_bank_stmt_model.create({\n            'journal_id': self.bank_journal_usd_id,\n            'date': time.strftime('%Y-%m-%d'),\n            'line_ids': [\n                (0, 0, {\n                    'name': 'half payment',\n                    'partner_id': self.partner_agrolait_id,\n                    'amount': 1.0,\n                    'date': time.strftime('%Y-%m-%d')\n                }),\n                (0, 0, {\n                    'name': 'second half payment',\n                    'partner_id': self.partner_agrolait_id,\n                    'amount': 1.0,\n                    'date': time.strftime('%Y-%m-%d')\n                })\n            ]\n        })\n\n        \n        line_id = None\n        for l in invoice.move_id.line_id:\n            if l.account_id.id == self.account_rcv_id:\n                line_id = l\n                break\n        for statement_line in statement.line_ids:\n            statement_line.process_reconciliation([\n                {'counterpart_move_line_id': line_id.id, 'credit': 1.0, 'debit': 0.0, 'name': line_id.name}\n            ])\n\n        \n        self.assertEquals(invoice.state, 'paid', 'The invoice should be paid by now')\n        reconcile = None\n        for payment in invoice.payment_ids:\n            reconcile = payment.reconcile_id\n            break\n         The invoice should be reconciled (entirely, not a partial reconciliation)\n        self.assertTrue(reconcile, 'The invoice should be totally reconciled')\n        result = {}\n        exchange_loss_line = None\n        for line in reconcile.line_id:\n            res_account = result.setdefault(line.account_id, {'debit': 0.0, 'credit': 0.0, 'count': 0})\n            res_account['debit'] = res_account['debit'] + line.debit\n            res_account['credit'] = res_account['credit'] + line.credit\n            res_account['count'] += 1\n            if line.credit == 0.01:\n                exchange_loss_line = line\n        \n        self.assertTrue(exchange_loss_line, 'There should be one move line of 0.01 EUR in credit')\n        \n         Besides, the total debit and total credit should be 60.61 EUR (2.00 USD)\n        self.assertEquals(sum(res['debit'] for res in result.values()), 60.61)\n        self.assertEquals(sum(res['credit'] for res in result.items()), 60.61)\n        counterpart_exchange_loss_line = None\n        for line in exchange_loss_line.move_id.line_id:\n            if line.account_id.id == self.account_fx_expense_id:\n                counterpart_exchange_loss_line = line\n        \n        self.assertTrue(counterpart_exchange_loss_line, 'There should be one move line of 0.01 EUR on account \"Foreign Exchange Loss\"')\n\n    def test_manual_reconcile_wizard_opw678153(self):\n\n        def create_move(name, amount, amount_currency, currency_id):\n            debit_line_vals = {\n                'name': name,\n                'debit': amount > 0 and amount or 0.0,\n                'credit': amount < 0 and -amount or 0.0,\n                'account_id': self.account_rcv.id,\n                'amount_currency': amount_currency,\n                'currency_id': currency_id,\n            }\n            credit_line_vals = debit_line_vals.copy()\n            credit_line_vals['debit'] = debit_line_vals['credit']\n            credit_line_vals['credit'] = debit_line_vals['debit']\n            credit_line_vals['account_id'] = self.account_rsa.id\n            credit_line_vals['amount_currency'] = -debit_line_vals['amount_currency']\n            vals = {\n                'journal_id': self.bank_journal_euro.id,\n                'line_ids': [(0,0, debit_line_vals), (0, 0, credit_line_vals)]\n            }\n            return self.env['account.move'].create(vals).id\n        move_list_vals = [\n            ('1', -1.83, 0, self.currency_swiss_id),\n            ('2', 728.35, 795.05, self.currency_swiss_id),\n            ('3', -4.46, 0, self.currency_swiss_id),\n            ('4', 0.32, 0, self.currency_swiss_id),\n            ('5', 14.72, 16.20, self.currency_swiss_id),\n            ('6', -737.10, -811.25, self.currency_swiss_id),\n        ]\n        move_ids = []\n        for name, amount, amount_currency, currency_id in move_list_vals:\n            move_ids.append(create_move(name, amount, amount_currency, currency_id))\n        aml_recs = self.env['account.move.line'].search([('move_id', 'in', move_ids), ('account_id', '=', self.account_rcv.id)])\n        wizard = self.env['account.move.line.reconcile'].with_context(active_ids=[x.id for x in aml_recs]).create({})\n        wizard.trans_rec_reconcile_full()\n        for aml in aml_recs:\n            self.assertTrue(aml.reconciled, 'The journal item should be totally reconciled')\n            self.assertEquals(aml.amount_residual, 0, 'The journal item should be totally reconciled')\n            self.assertEquals(aml.amount_residual_currency, 0, 'The journal item should be totally reconciled')\n\n        move_list_vals = [\n            ('2', 728.35, 795.05, self.currency_swiss_id),\n            ('3', -4.46, 0, False),\n            ('4', 0.32, 0, False),\n            ('5', 14.72, 16.20, self.currency_swiss_id),\n            ('6', -737.10, -811.25, self.currency_swiss_id),\n        ]\n        move_ids = []\n        for name, amount, amount_currency, currency_id in move_list_vals:\n            move_ids.append(create_move(name, amount, amount_currency, currency_id))\n        aml_recs = self.env['account.move.line'].search([('move_id', 'in', move_ids), ('account_id', '=', self.account_rcv.id)])\n        wizard = self.env['account.move.line.reconcile.writeoff'].with_context(active_ids=[x.id for x in aml_recs]).create({'journal_id': self.bank_journal_usd.id, 'writeoff_acc_id': self.account_rsa.id})\n        wizard.trans_rec_reconcile()\n        for aml in aml_recs:\n            self.assertTrue(aml.reconciled, 'The journal item should be totally reconciled')\n            self.assertEquals(aml.amount_residual, 0, 'The journal item should be totally reconciled')\n            self.assertEquals(aml.amount_residual_currency, 0, 'The journal item should be totally reconciled')\n\n    def test_reconcile_bank_statement_with_payment_and_writeoff(self):\n        \n        \n        \n        \n\n        invoice = self.create_invoice(type='out_invoice', invoice_amount=80, currency_id=self.currency_usd_id)\n        \n        payment = self.env['account.payment'].create({'payment_type': 'inbound',\n            'payment_method_id': self.env.ref('account.account_payment_method_manual_in').id,\n            'partner_type': 'customer',\n            'partner_id': self.partner_agrolait_id,\n            'amount': 80,\n            'currency_id': self.currency_usd_id,\n            'payment_date': time.strftime('%Y') + '-07-15',\n            'journal_id': self.bank_journal_usd.id,\n            })\n        payment.post()\n        payment_move_line = False\n        bank_move_line = False\n        for l in payment.move_line_ids:\n            if l.account_id.id == self.account_rcv.id:\n                payment_move_line = l\n            else:\n                bank_move_line = l\n        invoice.register_payment(payment_move_line)\n\n        \n        bank_stmt = self.acc_bank_stmt_model.create({\n            'journal_id': self.bank_journal_usd.id,\n            'date': time.strftime('%Y') + '-07-15',\n        })\n\n        bank_stmt_line = self.acc_bank_stmt_line_model.create({'name': 'payment',\n            'statement_id': bank_stmt.id,\n            'partner_id': self.partner_agrolait_id,\n            'amount': 85,\n            'date': time.strftime('%Y') + '-07-15',})\n\n        \n        bank_stmt_line.process_reconciliation(payment_aml_rec= bank_move_line, new_aml_dicts=[{\n            'account_id': self.diff_income_account.id,\n            'debit': 0,\n            'credit': 5,\n            'name': 'bank fees',\n            }])\n\n        \n        bank_stmt_aml = self.env['account.move.line'].search([('statement_id', '=', bank_stmt.id)])\n        bank_stmt_aml |= bank_stmt_aml.mapped('move_id').mapped('line_ids')\n        self.assertEquals(len(bank_stmt_aml), 4, \"The bank statement should have 4 moves lines\")\n        lines = {\n            self.account_usd.id: [\n                {'debit': 3.27, 'credit': 0.0, 'amount_currency': 5, 'currency_id': self.currency_usd_id},\n                {'debit': 52.33, 'credit': 0, 'amount_currency': 80, 'currency_id': self.currency_usd_id}\n                ],\n            self.diff_income_account.id: {'debit': 0.0, 'credit': 3.27, 'amount_currency': -5, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 52.33, 'amount_currency': -80, 'currency_id': self.currency_usd_id},\n        }\n        for aml in bank_stmt_aml:\n            line = lines[aml.account_id.id]\n            if type(line) == list:\n                \n                if line[0]['debit'] == round(aml.debit, 2):\n                    line = line[0]\n                else:\n                    line = line[1]\n            self.assertEquals(round(aml.debit, 2), line['debit'])\n            self.assertEquals(round(aml.credit, 2), line['credit'])\n            self.assertEquals(round(aml.amount_currency, 2), line['amount_currency'])\n            self.assertEquals(aml.currency_id.id, line['currency_id'])\n\n    def test_partial_reconcile_currencies(self):\n                        client Account (payable, rsa)\n        \n        \n        |\n        |\n        |\n        \n         Debit_currency = 100      |\n         Debit = 147.91            |\n         Balance Debit = 18.75\n         Counterpart Credit goes in Exchange diff\n\n        dest_journal_id = self.env['account.journal'].search([('type', '=', 'purchase'), ('company_id', '=', self.env.ref('base.main_company').id)], limit=1)\n        account_expenses = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_expenses').id)], limit=1)\n\n        self.bank_journal_euro.write({'default_debit_account_id': self.account_rsa.id,\n                                      'default_credit_account_id': self.account_rsa.id})\n        dest_journal_id.write({'default_debit_account_id': self.account_rsa.id,\n                               'default_credit_account_id': self.account_rsa.id})\n         Setting up rates for USD (main_company is in EUR)\n        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '07' + '-01',\n            'rate': 0.5,\n            'currency_id': self.currency_usd_id,\n            'company_id': self.env.ref('base.main_company').id})\n\n        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '08' + '-01', \n            'rate': 0.75,\n            'currency_id': self.currency_usd_id,\n            'company_id': self.env.ref('base.main_company').id})\n\n        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '09' + '-01', \n            'rate': 0.80,\n            'currency_id': self.currency_usd_id,\n            'company_id': self.env.ref('base.main_company').id})\n\n         Preparing Invoices (from vendor)\n        invoice_a = self.account_invoice_model.create({'partner_id': self.partner_agrolait_id,\n            'reference_type': 'none',\n            'currency_id': self.currency_usd_id,\n            'name': 'invoice to vendor',\n            'account_id': self.account_rsa.id,\n            'type': 'in_invoice',\n            'date_invoice': time.strftime('%Y') + '-' + '07' + '-01',\n            })\n        self.account_invoice_line_model.create({'product_id': self.product.id,\n            'quantity': 1,\n            'price_unit': 50,\n            'invoice_id': invoice_a.id,\n            'name': 'product that cost ' + str(50),\n            'account_id': account_expenses.id,\n        })\n\n        invoice_b = self.account_invoice_model.create({'partner_id': self.partner_agrolait_id,\n            'reference_type': 'none',\n            'currency_id': self.currency_usd_id,\n            'name': 'invoice to vendor',\n            'account_id': self.account_rsa.id,\n            'type': 'in_invoice',\n            'date_invoice': time.strftime('%Y') + '-' + '08' + '-01',\n            })\n        self.account_invoice_line_model.create({'product_id': self.product.id,\n            'quantity': 1,\n            'price_unit': 50,\n            'invoice_id': invoice_b.id,\n            'name': 'product that cost ' + str(50),\n            'account_id': account_expenses.id,\n        })\n\n        invoice_a.action_invoice_open()\n        invoice_b.action_invoice_open()\n\n         Preparing Payments\n         One partial for invoice_a (fully assigned to it)\n        payment_a = self.env['account.payment'].create({'payment_type': 'outbound',\n            'amount': 25,\n            'currency_id': self.currency_usd_id,\n            'journal_id': self.bank_journal_euro.id,\n            'company_id': self.env.ref('base.main_company').id,\n            'payment_date': time.strftime('%Y') + '-' + '07' + '-01',\n            'partner_id': self.partner_agrolait_id,\n            'payment_method_id': self.env.ref('account.account_payment_method_manual_out').id,\n            'destination_journal_id': dest_journal_id.id,\n            'partner_type': 'supplier'})\n\n         One that will complete the payment of a, the rest goes to b\n        payment_b = self.env['account.payment'].create({'payment_type': 'outbound',\n            'amount': 50,\n            'currency_id': self.currency_usd_id,\n            'journal_id': self.bank_journal_euro.id,\n            'company_id': self.env.ref('base.main_company').id,\n            'payment_date': time.strftime('%Y') + '-' + '08' + '-01',\n            'partner_id': self.partner_agrolait_id,\n            'payment_method_id': self.env.ref('account.account_payment_method_manual_out').id,\n            'destination_journal_id': dest_journal_id.id,\n            'partner_type': 'supplier'})\n\n         The last one will complete the payment of b\n        payment_c = self.env['account.payment'].create({'payment_type': 'outbound',\n            'amount': 25,\n            'currency_id': self.currency_usd_id,\n            'journal_id': self.bank_journal_euro.id,\n            'company_id': self.env.ref('base.main_company').id,\n            'payment_date': time.strftime('%Y') + '-' + '09' + '-01',\n            'partner_id': self.partner_agrolait_id,\n            'payment_method_id': self.env.ref('account.account_payment_method_manual_out').id,\n            'destination_journal_id': dest_journal_id.id,\n            'partner_type': 'supplier'})\n\n        payment_a.post()\n        payment_b.post()\n        payment_c.post()\n\n         Assigning payments to invoices\n        debit_line_a = payment_a.move_line_ids.filtered(lambda l: l.debit and l.account_id == dest_journal_id.default_debit_account_id)\n        debit_line_b = payment_b.move_line_ids.filtered(lambda l: l.debit and l.account_id == dest_journal_id.default_debit_account_id)\n        debit_line_c = payment_c.move_line_ids.filtered(lambda l: l.debit and l.account_id == dest_journal_id.default_debit_account_id)\n\n        invoice_a.assign_outstanding_credit(debit_line_a.id)\n        invoice_a.assign_outstanding_credit(debit_line_b.id)\n        invoice_b.assign_outstanding_credit(debit_line_b.id)\n        invoice_b.assign_outstanding_credit(debit_line_c.id)\n\n         Asserting correctness (only in the payable account)\n        full_reconcile = False\n        for inv in (invoice_a + invoice_b):\n            self.assertTrue(inv.reconciled)\n            for aml in (inv.payment_move_line_ids + inv.move_id.line_ids).filtered(lambda l: l.account_id == self.account_rsa):\n                self.assertEqual(aml.amount_residual, 0.0)\n                self.assertEqual(aml.amount_residual_currency, 0.0)\n                self.assertTrue(aml.reconciled)\n                if not full_reconcile:\n                    full_reconcile = aml.full_reconcile_id\n                else:\n                    self.assertTrue(aml.full_reconcile_id == full_reconcile)\n\n        full_rec_move = full_reconcile.exchange_move_id\n         Globally check whether the amount is correct\n        self.assertEqual(full_rec_move.amount, 18.75)\n\n         Checking if the direction of the move is correct\n        full_rec_payable = full_rec_move.line_ids.filtered(lambda l: l.account_id == self.account_rsa)\n        self.assertEqual(full_rec_payable.balance, 18.75)\n", "comments": "   tests reconciliation (account tax)      test used check sale purchase invoice different currency      result balanced            create invoice given currency   validate invoice   reconcile payment invoice   check line balanced (bank statement line)   create invoice given invoice currency   encode payment  given bank journal amount  amount currency transaction currency given   create supplier bill given invoice currency   encode payment  given bank journal amount  amount currency transaction currency given   create invoice given invoice currency   encode payment  given bank journal amount  amount currency transaction currency given   reconcile payment invoice    the invoice paid  payments totally cover total    the point test show handle correctly gain loss exchanges reconciliations foreign currencies     for instance  company set eur  usd rate set 0 033     reconciliation invoice 2 00 usd (60 61 eur) bank statement two lines 1 00 usd (30 30 eur)    lead exchange loss  handled correctly within journal items     we update currency rate currency usd order force gain loss exchanges next steps    we create customer invoice 2 00 usd    we create bank statement two lines 1 00 usd     we process reconciliation invoice line two bank statement lines    the invoice paid  payments totally cover total    the invoice reconciled (entirely  partial reconciliation)    we able find move line 0 01 eur debtors account  cent lost currency exchange    the journal items reconciliation debit credit total equal    besides  total debit total credit 60 61 eur (2 00 usd)     we able find move line 0 01 eur foreign exchange loss account    use case     company eur  create bill 80 usd register payment 80 usd     create bank statement usd bank journal bank statement line 85 usd    reconcile bank statement payment put remaining 5 usd bank fees another account     register payment invoice    create bank statement   reconcile statement invoice put remaining another account    check move lines associated bank statement correct    find correct line inside list                   client account (payable  rsa)           debit                      credit                                                                pay   25 0 5   50           inv   50 0 5   100    pay b  50 0 75   66 66        inv b   50 0 75   66 66    pay c  25 0 8   31 25             debit currency   100        credit currency   100    debit   147 91              credit   166 66    balance debit   18 75    counterpart credit goes exchange diff    setting rates usd (main company eur)    preparing invoices (from vendor)    preparing payments    one partial invoice (fully assigned it)    one complete payment  rest goes b    the last one complete payment b    assigning payments invoices    asserting correctness (only payable account)    globally check whether amount correct    checking direction move correct ", "content": "from odoo.addons.account.tests.account_test_classes import AccountingTestCase\nimport time\nimport unittest\n\n\nclass TestReconciliation(AccountingTestCase):\n\n    \"\"\"Tests for reconciliation (account.tax)\n\n    Test used to check that when doing a sale or purchase invoice in a different currency,\n    the result will be balanced.\n    \"\"\"\n\n    def setUp(self):\n        super(TestReconciliation, self).setUp()\n        self.account_invoice_model = self.env['account.invoice']\n        self.account_invoice_line_model = self.env['account.invoice.line']\n        self.acc_bank_stmt_model = self.env['account.bank.statement']\n        self.acc_bank_stmt_line_model = self.env['account.bank.statement.line']\n        self.res_currency_model = self.registry('res.currency')\n        self.res_currency_rate_model = self.registry('res.currency.rate')\n\n        partner_agrolait = self.env.ref(\"base.res_partner_2\")\n        self.partner_agrolait_id = partner_agrolait.id\n        self.currency_swiss_id = self.env.ref(\"base.CHF\").id\n        self.currency_usd_id = self.env.ref(\"base.USD\").id\n        self.currency_euro_id = self.env.ref(\"base.EUR\").id\n        company = self.env.ref('base.main_company')\n        self.cr.execute(\"UPDATE res_company SET currency_id = %s WHERE id = %s\", [self.currency_euro_id, company.id])\n        self.account_rcv = partner_agrolait.property_account_receivable_id or self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_receivable').id)], limit=1)\n        self.account_rsa = partner_agrolait.property_account_payable_id or self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_payable').id)], limit=1)\n        self.product = self.env.ref(\"product.product_product_4\")\n\n        self.bank_journal_euro = self.env['account.journal'].create({'name': 'Bank', 'type': 'bank', 'code': 'BNK67'})\n        self.account_euro = self.bank_journal_euro.default_debit_account_id\n\n        self.bank_journal_usd = self.env['account.journal'].create({'name': 'Bank US', 'type': 'bank', 'code': 'BNK68', 'currency_id': self.currency_usd_id})\n        self.account_usd = self.bank_journal_usd.default_debit_account_id\n        \n        self.diff_income_account = self.env['res.users'].browse(self.env.uid).company_id.income_currency_exchange_account_id\n        self.diff_expense_account = self.env['res.users'].browse(self.env.uid).company_id.expense_currency_exchange_account_id\n\n    def create_invoice(self, type='out_invoice', invoice_amount=50, currency_id=None):\n        #we create an invoice in given currency\n        invoice = self.account_invoice_model.create({'partner_id': self.partner_agrolait_id,\n            'reference_type': 'none',\n            'currency_id': currency_id,\n            'name': type == 'out_invoice' and 'invoice to client' or 'invoice to vendor',\n            'account_id': self.account_rcv.id,\n            'type': type,\n            'date_invoice': time.strftime('%Y') + '-07-01',\n            })\n        self.account_invoice_line_model.create({'product_id': self.product.id,\n            'quantity': 1,\n            'price_unit': invoice_amount,\n            'invoice_id': invoice.id,\n            'name': 'product that cost ' + str(invoice_amount),\n            'account_id': self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_revenue').id)], limit=1).id,\n        })\n\n        #validate invoice\n        invoice.action_invoice_open()\n        return invoice\n\n    def make_payment(self, invoice_record, bank_journal, amount=0.0, amount_currency=0.0, currency_id=None):\n        bank_stmt = self.acc_bank_stmt_model.create({\n            'journal_id': bank_journal.id,\n            'date': time.strftime('%Y') + '-07-15',\n            'name': 'payment' + invoice_record.number\n        })\n\n        bank_stmt_line = self.acc_bank_stmt_line_model.create({'name': 'payment',\n            'statement_id': bank_stmt.id,\n            'partner_id': self.partner_agrolait_id,\n            'amount': amount,\n            'amount_currency': amount_currency,\n            'currency_id': currency_id,\n            'date': time.strftime('%Y') + '-07-15',})\n\n        #reconcile the payment with the invoice\n        for l in invoice_record.move_id.line_ids:\n            if l.account_id.id == self.account_rcv.id:\n                line_id = l\n                break\n        amount_in_widget = currency_id and amount_currency or amount\n        bank_stmt_line.process_reconciliation(counterpart_aml_dicts=[{\n            'move_line': line_id,\n            'debit': amount_in_widget < 0 and -amount_in_widget or 0.0,\n            'credit': amount_in_widget > 0 and amount_in_widget or 0.0,\n            'name': line_id.name,\n            }])\n        return bank_stmt\n\n    def check_results(self, move_line_recs, aml_dict):\n        #we check that the line is balanced (bank statement line)\n        self.assertEquals(len(move_line_recs), len(aml_dict))\n        for move_line in move_line_recs:\n            self.assertEquals(round(move_line.debit, 2), aml_dict[move_line.account_id.id]['debit'])\n            self.assertEquals(round(move_line.credit, 2), aml_dict[move_line.account_id.id]['credit'])\n            self.assertEquals(round(move_line.amount_currency, 2), aml_dict[move_line.account_id.id]['amount_currency'])\n            self.assertEquals(move_line.currency_id.id, aml_dict[move_line.account_id.id]['currency_id'])\n            if 'currency_diff' in aml_dict[move_line.account_id.id]:\n                currency_diff_move = move_line.full_reconcile_id.exchange_move_id\n                for currency_diff_line in currency_diff_move.line_ids:\n                    if aml_dict[move_line.account_id.id].get('currency_diff') == 0:\n                        if currency_diff_line.account_id.id == move_line.account_id.id:\n                            self.assertAlmostEquals(currency_diff_line.amount_currency, aml_dict[move_line.account_id.id].get('amount_currency_diff'))\n                    if aml_dict[move_line.account_id.id].get('currency_diff') == 0:\n                        if currency_diff_line.account_id.id == move_line.account_id.id:\n                            self.assertAlmostEquals(currency_diff_line.amount_currency, aml_dict[move_line.account_id.id].get('amount_currency_diff'))\n                    if aml_dict[move_line.account_id.id].get('currency_diff') > 0:\n                        if currency_diff_line.account_id.id == move_line.account_id.id:\n                            self.assertAlmostEquals(currency_diff_line.debit, aml_dict[move_line.account_id.id].get('currency_diff'))\n                        else:\n                            self.assertAlmostEquals(currency_diff_line.credit, aml_dict[move_line.account_id.id].get('currency_diff'))\n                            self.assertIn(currency_diff_line.account_id.id, [self.diff_expense_account.id, self.diff_income_account.id], 'The difference accounts should be used correctly. ')\n                    else:\n                        if currency_diff_line.account_id.id == move_line.account_id.id:\n                            self.assertAlmostEquals(currency_diff_line.credit, abs(aml_dict[move_line.account_id.id].get('currency_diff')))\n                        else:\n                            self.assertAlmostEquals(currency_diff_line.debit, abs(aml_dict[move_line.account_id.id].get('currency_diff')))\n                            self.assertIn(currency_diff_line.account_id.id, [self.diff_expense_account.id, self.diff_income_account.id], 'The difference accounts should be used correctly. ')\n\n    def make_customer_and_supplier_flows(self, invoice_currency_id, invoice_amount, bank_journal, amount, amount_currency, transaction_currency_id):\n        #we create an invoice in given invoice_currency\n        invoice_record = self.create_invoice(type='out_invoice', invoice_amount=invoice_amount, currency_id=invoice_currency_id)\n        #we encode a payment on it, on the given bank_journal with amount, amount_currency and transaction_currency given\n        bank_stmt = self.make_payment(invoice_record, bank_journal, amount=amount, amount_currency=amount_currency, currency_id=transaction_currency_id)\n        customer_move_lines = bank_stmt.move_line_ids\n\n        #we create a supplier bill in given invoice_currency\n        invoice_record = self.create_invoice(type='in_invoice', invoice_amount=invoice_amount, currency_id=invoice_currency_id)\n        #we encode a payment on it, on the given bank_journal with amount, amount_currency and transaction_currency given\n        bank_stmt = self.make_payment(invoice_record, bank_journal, amount=-amount, amount_currency=-amount_currency, currency_id=transaction_currency_id)\n        supplier_move_lines = bank_stmt.move_line_ids\n        return customer_move_lines, supplier_move_lines\n\n    def test_statement_usd_invoice_eur_transaction_eur(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_euro_id, 30, self.bank_journal_usd, 42, 30, self.currency_euro_id)\n        self.check_results(customer_move_lines, {\n            self.account_usd.id: {'debit': 30.0, 'credit': 0.0, 'amount_currency': 42, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 30.0, 'amount_currency': -42, 'currency_id': self.currency_usd_id},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_usd.id: {'debit': 0.0, 'credit': 30.0, 'amount_currency': -42, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 30.0, 'credit': 0.0, 'amount_currency': 42, 'currency_id': self.currency_usd_id},\n        })\n\n    def test_statement_usd_invoice_usd_transaction_usd(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_usd, 50, 0, False)\n        self.check_results(customer_move_lines, {\n            self.account_usd.id: {'debit': 32.70, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 32.70, 'amount_currency': -50, 'currency_id': self.currency_usd_id},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_usd.id: {'debit': 0.0, 'credit': 32.70, 'amount_currency': -50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 32.70, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id},\n        })\n\n    def test_statement_usd_invoice_usd_transaction_eur(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_usd, 50, 40, self.currency_euro_id)\n        self.check_results(customer_move_lines, {\n            self.account_usd.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -50, 'currency_id': self.currency_usd_id, 'currency_diff': 7.30},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_usd.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id, 'currency_diff': -7.30},\n        })\n\n    def test_statement_usd_invoice_chf_transaction_chf(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_swiss_id, 50, self.bank_journal_usd, 42, 50, self.currency_swiss_id)\n        self.check_results(customer_move_lines, {\n            self.account_usd.id: {'debit': 27.47, 'credit': 0.0, 'amount_currency': 42, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 27.47, 'amount_currency': -50, 'currency_id': self.currency_swiss_id, 'currency_diff': -10.74},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_usd.id: {'debit': 0.0, 'credit': 27.47, 'amount_currency': -42, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 27.47, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_swiss_id, 'currency_diff': 10.74},\n        })\n\n    def test_statement_eur_invoice_usd_transaction_usd(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_euro, 40, 50, self.currency_usd_id)\n        self.check_results(customer_move_lines, {\n            self.account_euro.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -50, 'currency_id': self.currency_usd_id, 'currency_diff': 7.30},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_euro.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -50, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_usd_id, 'currency_diff': -7.30},\n        })\n\n    def test_statement_eur_invoice_usd_transaction_eur(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_euro, 40, 0.0, False)\n        self.check_results(customer_move_lines, {\n            self.account_euro.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 0.0, 'currency_id': False},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': -61.16, 'currency_id': self.currency_usd_id},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_euro.id: {'debit': 0.0, 'credit': 40.0, 'amount_currency': 0.0, 'currency_id': False},\n            self.account_rcv.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 61.16, 'currency_id': self.currency_usd_id},\n        })\n\n    def test_statement_euro_invoice_usd_transaction_chf(self):\n        customer_move_lines, supplier_move_lines = self.make_customer_and_supplier_flows(self.currency_usd_id, 50, self.bank_journal_euro, 42, 50, self.currency_swiss_id)\n        self.check_results(customer_move_lines, {\n            self.account_euro.id: {'debit': 42.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_swiss_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 42.0, 'amount_currency': -50, 'currency_id': self.currency_swiss_id},\n        })\n        self.check_results(supplier_move_lines, {\n            self.account_euro.id: {'debit': 0.0, 'credit': 42.0, 'amount_currency': -50, 'currency_id': self.currency_swiss_id},\n            self.account_rcv.id: {'debit': 42.0, 'credit': 0.0, 'amount_currency': 50, 'currency_id': self.currency_swiss_id},\n        })\n\n    def test_statement_euro_invoice_usd_transaction_euro_full(self):\n        #we create an invoice in given invoice_currency\n        invoice_record = self.create_invoice(type='out_invoice', invoice_amount=50, currency_id=self.currency_usd_id)\n        #we encode a payment on it, on the given bank_journal with amount, amount_currency and transaction_currency given\n        bank_stmt = self.acc_bank_stmt_model.create({\n            'journal_id': self.bank_journal_euro.id,\n            'date': time.strftime('%Y') + '-01-01',\n        })\n\n        bank_stmt_line = self.acc_bank_stmt_line_model.create({'name': 'payment',\n            'statement_id': bank_stmt.id,\n            'partner_id': self.partner_agrolait_id,\n            'amount': 40,\n            'date': time.strftime('%Y') + '-01-01',})\n\n        #reconcile the payment with the invoice\n        for l in invoice_record.move_id.line_ids:\n            if l.account_id.id == self.account_rcv.id:\n                line_id = l\n                break\n        bank_stmt_line.process_reconciliation(counterpart_aml_dicts=[{\n              'move_line': line_id,\n              'debit': 0.0,\n              'credit': 32.7,\n              'name': line_id.name,\n            }], new_aml_dicts=[{\n              'debit': 0.0,\n              'credit': 7.3,\n              'name': 'exchange difference',\n              'account_id': self.diff_income_account.id\n            }])\n        self.check_results(bank_stmt.move_line_ids, {\n            self.account_euro.id: {'debit': 40.0, 'credit': 0.0, 'amount_currency': 0, 'currency_id': False},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 32.7, 'amount_currency': -41.97, 'currency_id': self.currency_usd_id, 'currency_diff': 0, 'amount_currency_diff': -8.03},\n            self.diff_income_account.id: {'debit': 0.0, 'credit': 7.3, 'amount_currency': -9.37, 'currency_id': self.currency_usd_id},\n        })\n\n        # The invoice should be paid, as the payments totally cover its total\n        self.assertEquals(invoice_record.state, 'paid', 'The invoice should be paid by now')\n        invoice_rec_line = invoice_record.move_id.line_ids.filtered(lambda x: x.account_id.reconcile)\n        self.assertTrue(invoice_rec_line.reconciled, 'The invoice should be totally reconciled')\n        self.assertEquals(invoice_rec_line.amount_residual, 0, 'The invoice should be totally reconciled')\n        self.assertEquals(invoice_rec_line.amount_residual_currency, 0, 'The invoice should be totally reconciled')\n\n    @unittest.skip('adapt to new accounting')\n    def test_balanced_exchanges_gain_loss(self):\n        # The point of this test is to show that we handle correctly the gain/loss exchanges during reconciliations in foreign currencies.\n        # For instance, with a company set in EUR, and a USD rate set to 0.033,\n        # the reconciliation of an invoice of 2.00 USD (60.61 EUR) and a bank statement of two lines of 1.00 USD (30.30 EUR)\n        # will lead to an exchange loss, that should be handled correctly within the journal items.\n        env = api.Environment(self.cr, self.uid, {})\n        # We update the currency rate of the currency USD in order to force the gain/loss exchanges in next steps\n        rateUSDbis = env.ref(\"base.rateUSDbis\")\n        rateUSDbis.write({\n            'name': time.strftime('%Y-%m-%d') + ' 00:00:00',\n            'rate': 0.033,\n        })\n        # We create a customer invoice of 2.00 USD\n        invoice = self.account_invoice_model.create({\n            'partner_id': self.partner_agrolait_id,\n            'currency_id': self.currency_usd_id,\n            'name': 'Foreign invoice with exchange gain',\n            'account_id': self.account_rcv_id,\n            'type': 'out_invoice',\n            'date_invoice': time.strftime('%Y-%m-%d'),\n            'journal_id': self.bank_journal_usd_id,\n            'invoice_line': [\n                (0, 0, {\n                    'name': 'line that will lead to an exchange gain',\n                    'quantity': 1,\n                    'price_unit': 2,\n                })\n            ]\n        })\n        invoice.action_invoice_open()\n        # We create a bank statement with two lines of 1.00 USD each.\n        statement = self.acc_bank_stmt_model.create({\n            'journal_id': self.bank_journal_usd_id,\n            'date': time.strftime('%Y-%m-%d'),\n            'line_ids': [\n                (0, 0, {\n                    'name': 'half payment',\n                    'partner_id': self.partner_agrolait_id,\n                    'amount': 1.0,\n                    'date': time.strftime('%Y-%m-%d')\n                }),\n                (0, 0, {\n                    'name': 'second half payment',\n                    'partner_id': self.partner_agrolait_id,\n                    'amount': 1.0,\n                    'date': time.strftime('%Y-%m-%d')\n                })\n            ]\n        })\n\n        # We process the reconciliation of the invoice line with the two bank statement lines\n        line_id = None\n        for l in invoice.move_id.line_id:\n            if l.account_id.id == self.account_rcv_id:\n                line_id = l\n                break\n        for statement_line in statement.line_ids:\n            statement_line.process_reconciliation([\n                {'counterpart_move_line_id': line_id.id, 'credit': 1.0, 'debit': 0.0, 'name': line_id.name}\n            ])\n\n        # The invoice should be paid, as the payments totally cover its total\n        self.assertEquals(invoice.state, 'paid', 'The invoice should be paid by now')\n        reconcile = None\n        for payment in invoice.payment_ids:\n            reconcile = payment.reconcile_id\n            break\n        # The invoice should be reconciled (entirely, not a partial reconciliation)\n        self.assertTrue(reconcile, 'The invoice should be totally reconciled')\n        result = {}\n        exchange_loss_line = None\n        for line in reconcile.line_id:\n            res_account = result.setdefault(line.account_id, {'debit': 0.0, 'credit': 0.0, 'count': 0})\n            res_account['debit'] = res_account['debit'] + line.debit\n            res_account['credit'] = res_account['credit'] + line.credit\n            res_account['count'] += 1\n            if line.credit == 0.01:\n                exchange_loss_line = line\n        # We should be able to find a move line of 0.01 EUR on the Debtors account, being the cent we lost during the currency exchange\n        self.assertTrue(exchange_loss_line, 'There should be one move line of 0.01 EUR in credit')\n        # The journal items of the reconciliation should have their debit and credit total equal\n        # Besides, the total debit and total credit should be 60.61 EUR (2.00 USD)\n        self.assertEquals(sum(res['debit'] for res in result.values()), 60.61)\n        self.assertEquals(sum(res['credit'] for res in result.items()), 60.61)\n        counterpart_exchange_loss_line = None\n        for line in exchange_loss_line.move_id.line_id:\n            if line.account_id.id == self.account_fx_expense_id:\n                counterpart_exchange_loss_line = line\n        #  We should be able to find a move line of 0.01 EUR on the Foreign Exchange Loss account\n        self.assertTrue(counterpart_exchange_loss_line, 'There should be one move line of 0.01 EUR on account \"Foreign Exchange Loss\"')\n\n    def test_manual_reconcile_wizard_opw678153(self):\n\n        def create_move(name, amount, amount_currency, currency_id):\n            debit_line_vals = {\n                'name': name,\n                'debit': amount > 0 and amount or 0.0,\n                'credit': amount < 0 and -amount or 0.0,\n                'account_id': self.account_rcv.id,\n                'amount_currency': amount_currency,\n                'currency_id': currency_id,\n            }\n            credit_line_vals = debit_line_vals.copy()\n            credit_line_vals['debit'] = debit_line_vals['credit']\n            credit_line_vals['credit'] = debit_line_vals['debit']\n            credit_line_vals['account_id'] = self.account_rsa.id\n            credit_line_vals['amount_currency'] = -debit_line_vals['amount_currency']\n            vals = {\n                'journal_id': self.bank_journal_euro.id,\n                'line_ids': [(0,0, debit_line_vals), (0, 0, credit_line_vals)]\n            }\n            return self.env['account.move'].create(vals).id\n        move_list_vals = [\n            ('1', -1.83, 0, self.currency_swiss_id),\n            ('2', 728.35, 795.05, self.currency_swiss_id),\n            ('3', -4.46, 0, self.currency_swiss_id),\n            ('4', 0.32, 0, self.currency_swiss_id),\n            ('5', 14.72, 16.20, self.currency_swiss_id),\n            ('6', -737.10, -811.25, self.currency_swiss_id),\n        ]\n        move_ids = []\n        for name, amount, amount_currency, currency_id in move_list_vals:\n            move_ids.append(create_move(name, amount, amount_currency, currency_id))\n        aml_recs = self.env['account.move.line'].search([('move_id', 'in', move_ids), ('account_id', '=', self.account_rcv.id)])\n        wizard = self.env['account.move.line.reconcile'].with_context(active_ids=[x.id for x in aml_recs]).create({})\n        wizard.trans_rec_reconcile_full()\n        for aml in aml_recs:\n            self.assertTrue(aml.reconciled, 'The journal item should be totally reconciled')\n            self.assertEquals(aml.amount_residual, 0, 'The journal item should be totally reconciled')\n            self.assertEquals(aml.amount_residual_currency, 0, 'The journal item should be totally reconciled')\n\n        move_list_vals = [\n            ('2', 728.35, 795.05, self.currency_swiss_id),\n            ('3', -4.46, 0, False),\n            ('4', 0.32, 0, False),\n            ('5', 14.72, 16.20, self.currency_swiss_id),\n            ('6', -737.10, -811.25, self.currency_swiss_id),\n        ]\n        move_ids = []\n        for name, amount, amount_currency, currency_id in move_list_vals:\n            move_ids.append(create_move(name, amount, amount_currency, currency_id))\n        aml_recs = self.env['account.move.line'].search([('move_id', 'in', move_ids), ('account_id', '=', self.account_rcv.id)])\n        wizard = self.env['account.move.line.reconcile.writeoff'].with_context(active_ids=[x.id for x in aml_recs]).create({'journal_id': self.bank_journal_usd.id, 'writeoff_acc_id': self.account_rsa.id})\n        wizard.trans_rec_reconcile()\n        for aml in aml_recs:\n            self.assertTrue(aml.reconciled, 'The journal item should be totally reconciled')\n            self.assertEquals(aml.amount_residual, 0, 'The journal item should be totally reconciled')\n            self.assertEquals(aml.amount_residual_currency, 0, 'The journal item should be totally reconciled')\n\n    def test_reconcile_bank_statement_with_payment_and_writeoff(self):\n        # Use case:\n        # Company is in EUR, create a bill for 80 USD and register payment of 80 USD.\n        # create a bank statement in USD bank journal with a bank statement line of 85 USD\n        # Reconcile bank statement with payment and put the remaining 5 USD in bank fees or another account.\n\n        invoice = self.create_invoice(type='out_invoice', invoice_amount=80, currency_id=self.currency_usd_id)\n        # register payment on invoice\n        payment = self.env['account.payment'].create({'payment_type': 'inbound',\n            'payment_method_id': self.env.ref('account.account_payment_method_manual_in').id,\n            'partner_type': 'customer',\n            'partner_id': self.partner_agrolait_id,\n            'amount': 80,\n            'currency_id': self.currency_usd_id,\n            'payment_date': time.strftime('%Y') + '-07-15',\n            'journal_id': self.bank_journal_usd.id,\n            })\n        payment.post()\n        payment_move_line = False\n        bank_move_line = False\n        for l in payment.move_line_ids:\n            if l.account_id.id == self.account_rcv.id:\n                payment_move_line = l\n            else:\n                bank_move_line = l\n        invoice.register_payment(payment_move_line)\n\n        # create bank statement\n        bank_stmt = self.acc_bank_stmt_model.create({\n            'journal_id': self.bank_journal_usd.id,\n            'date': time.strftime('%Y') + '-07-15',\n        })\n\n        bank_stmt_line = self.acc_bank_stmt_line_model.create({'name': 'payment',\n            'statement_id': bank_stmt.id,\n            'partner_id': self.partner_agrolait_id,\n            'amount': 85,\n            'date': time.strftime('%Y') + '-07-15',})\n\n        #reconcile the statement with invoice and put remaining in another account\n        bank_stmt_line.process_reconciliation(payment_aml_rec= bank_move_line, new_aml_dicts=[{\n            'account_id': self.diff_income_account.id,\n            'debit': 0,\n            'credit': 5,\n            'name': 'bank fees',\n            }])\n\n        # Check that move lines associated to bank_statement are correct\n        bank_stmt_aml = self.env['account.move.line'].search([('statement_id', '=', bank_stmt.id)])\n        bank_stmt_aml |= bank_stmt_aml.mapped('move_id').mapped('line_ids')\n        self.assertEquals(len(bank_stmt_aml), 4, \"The bank statement should have 4 moves lines\")\n        lines = {\n            self.account_usd.id: [\n                {'debit': 3.27, 'credit': 0.0, 'amount_currency': 5, 'currency_id': self.currency_usd_id},\n                {'debit': 52.33, 'credit': 0, 'amount_currency': 80, 'currency_id': self.currency_usd_id}\n                ],\n            self.diff_income_account.id: {'debit': 0.0, 'credit': 3.27, 'amount_currency': -5, 'currency_id': self.currency_usd_id},\n            self.account_rcv.id: {'debit': 0.0, 'credit': 52.33, 'amount_currency': -80, 'currency_id': self.currency_usd_id},\n        }\n        for aml in bank_stmt_aml:\n            line = lines[aml.account_id.id]\n            if type(line) == list:\n                # find correct line inside the list\n                if line[0]['debit'] == round(aml.debit, 2):\n                    line = line[0]\n                else:\n                    line = line[1]\n            self.assertEquals(round(aml.debit, 2), line['debit'])\n            self.assertEquals(round(aml.credit, 2), line['credit'])\n            self.assertEquals(round(aml.amount_currency, 2), line['amount_currency'])\n            self.assertEquals(aml.currency_id.id, line['currency_id'])\n\n    def test_partial_reconcile_currencies(self):\n        #                client Account (payable, rsa)\n        #        Debit                      Credit\n        # --------------------------------------------------------\n        # Pay a : 25/0.5 = 50       |   Inv a : 50/0.5 = 100\n        # Pay b: 50/0.75 = 66.66    |   Inv b : 50/0.75 = 66.66\n        # Pay c: 25/0.8 = 31.25     |\n        #\n        # Debit_currency = 100      | Credit currency = 100\n        # Debit = 147.91            | Credit = 166.66\n        # Balance Debit = 18.75\n        # Counterpart Credit goes in Exchange diff\n\n        dest_journal_id = self.env['account.journal'].search([('type', '=', 'purchase'), ('company_id', '=', self.env.ref('base.main_company').id)], limit=1)\n        account_expenses = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_account_type_expenses').id)], limit=1)\n\n        self.bank_journal_euro.write({'default_debit_account_id': self.account_rsa.id,\n                                      'default_credit_account_id': self.account_rsa.id})\n        dest_journal_id.write({'default_debit_account_id': self.account_rsa.id,\n                               'default_credit_account_id': self.account_rsa.id})\n        # Setting up rates for USD (main_company is in EUR)\n        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '07' + '-01',\n            'rate': 0.5,\n            'currency_id': self.currency_usd_id,\n            'company_id': self.env.ref('base.main_company').id})\n\n        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '08' + '-01', \n            'rate': 0.75,\n            'currency_id': self.currency_usd_id,\n            'company_id': self.env.ref('base.main_company').id})\n\n        self.env['res.currency.rate'].create({'name': time.strftime('%Y') + '-' + '09' + '-01', \n            'rate': 0.80,\n            'currency_id': self.currency_usd_id,\n            'company_id': self.env.ref('base.main_company').id})\n\n        # Preparing Invoices (from vendor)\n        invoice_a = self.account_invoice_model.create({'partner_id': self.partner_agrolait_id,\n            'reference_type': 'none',\n            'currency_id': self.currency_usd_id,\n            'name': 'invoice to vendor',\n            'account_id': self.account_rsa.id,\n            'type': 'in_invoice',\n            'date_invoice': time.strftime('%Y') + '-' + '07' + '-01',\n            })\n        self.account_invoice_line_model.create({'product_id': self.product.id,\n            'quantity': 1,\n            'price_unit': 50,\n            'invoice_id': invoice_a.id,\n            'name': 'product that cost ' + str(50),\n            'account_id': account_expenses.id,\n        })\n\n        invoice_b = self.account_invoice_model.create({'partner_id': self.partner_agrolait_id,\n            'reference_type': 'none',\n            'currency_id': self.currency_usd_id,\n            'name': 'invoice to vendor',\n            'account_id': self.account_rsa.id,\n            'type': 'in_invoice',\n            'date_invoice': time.strftime('%Y') + '-' + '08' + '-01',\n            })\n        self.account_invoice_line_model.create({'product_id': self.product.id,\n            'quantity': 1,\n            'price_unit': 50,\n            'invoice_id': invoice_b.id,\n            'name': 'product that cost ' + str(50),\n            'account_id': account_expenses.id,\n        })\n\n        invoice_a.action_invoice_open()\n        invoice_b.action_invoice_open()\n\n        # Preparing Payments\n        # One partial for invoice_a (fully assigned to it)\n        payment_a = self.env['account.payment'].create({'payment_type': 'outbound',\n            'amount': 25,\n            'currency_id': self.currency_usd_id,\n            'journal_id': self.bank_journal_euro.id,\n            'company_id': self.env.ref('base.main_company').id,\n            'payment_date': time.strftime('%Y') + '-' + '07' + '-01',\n            'partner_id': self.partner_agrolait_id,\n            'payment_method_id': self.env.ref('account.account_payment_method_manual_out').id,\n            'destination_journal_id': dest_journal_id.id,\n            'partner_type': 'supplier'})\n\n        # One that will complete the payment of a, the rest goes to b\n        payment_b = self.env['account.payment'].create({'payment_type': 'outbound',\n            'amount': 50,\n            'currency_id': self.currency_usd_id,\n            'journal_id': self.bank_journal_euro.id,\n            'company_id': self.env.ref('base.main_company').id,\n            'payment_date': time.strftime('%Y') + '-' + '08' + '-01',\n            'partner_id': self.partner_agrolait_id,\n            'payment_method_id': self.env.ref('account.account_payment_method_manual_out').id,\n            'destination_journal_id': dest_journal_id.id,\n            'partner_type': 'supplier'})\n\n        # The last one will complete the payment of b\n        payment_c = self.env['account.payment'].create({'payment_type': 'outbound',\n            'amount': 25,\n            'currency_id': self.currency_usd_id,\n            'journal_id': self.bank_journal_euro.id,\n            'company_id': self.env.ref('base.main_company').id,\n            'payment_date': time.strftime('%Y') + '-' + '09' + '-01',\n            'partner_id': self.partner_agrolait_id,\n            'payment_method_id': self.env.ref('account.account_payment_method_manual_out').id,\n            'destination_journal_id': dest_journal_id.id,\n            'partner_type': 'supplier'})\n\n        payment_a.post()\n        payment_b.post()\n        payment_c.post()\n\n        # Assigning payments to invoices\n        debit_line_a = payment_a.move_line_ids.filtered(lambda l: l.debit and l.account_id == dest_journal_id.default_debit_account_id)\n        debit_line_b = payment_b.move_line_ids.filtered(lambda l: l.debit and l.account_id == dest_journal_id.default_debit_account_id)\n        debit_line_c = payment_c.move_line_ids.filtered(lambda l: l.debit and l.account_id == dest_journal_id.default_debit_account_id)\n\n        invoice_a.assign_outstanding_credit(debit_line_a.id)\n        invoice_a.assign_outstanding_credit(debit_line_b.id)\n        invoice_b.assign_outstanding_credit(debit_line_b.id)\n        invoice_b.assign_outstanding_credit(debit_line_c.id)\n\n        # Asserting correctness (only in the payable account)\n        full_reconcile = False\n        for inv in (invoice_a + invoice_b):\n            self.assertTrue(inv.reconciled)\n            for aml in (inv.payment_move_line_ids + inv.move_id.line_ids).filtered(lambda l: l.account_id == self.account_rsa):\n                self.assertEqual(aml.amount_residual, 0.0)\n                self.assertEqual(aml.amount_residual_currency, 0.0)\n                self.assertTrue(aml.reconciled)\n                if not full_reconcile:\n                    full_reconcile = aml.full_reconcile_id\n                else:\n                    self.assertTrue(aml.full_reconcile_id == full_reconcile)\n\n        full_rec_move = full_reconcile.exchange_move_id\n        # Globally check whether the amount is correct\n        self.assertEqual(full_rec_move.amount, 18.75)\n\n        # Checking if the direction of the move is correct\n        full_rec_payable = full_rec_move.line_ids.filtered(lambda l: l.account_id == self.account_rsa)\n        self.assertEqual(full_rec_payable.balance, 18.75)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_reconciliation.py", "id": "a84df32de766a2e32e9de6f845aa0418", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account/tests/test_reconciliation.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}