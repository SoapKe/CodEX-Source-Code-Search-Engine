{"author": "python-telegram-bot", "code": "\n\n A library that provides a Python interface to the Telegram Bot API\n Copyright (C) 2015-2018\n Leandro Toledo de Souza <devs@python-telegram-bot.org>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser Public License for more details.\n\n You should have received a copy of the GNU Lesser Public License\n along with this program.  If not, see [http://www.gnu.org/licenses/].\nimport os\n\nimport pytest\nfrom flaky import flaky\n\nfrom telegram import Document, PhotoSize, TelegramError, Voice\n\n\n@pytest.fixture(scope='function')\ndef document_file():\n    f = open('tests/data/telegram.png', 'rb')\n    yield f\n    f.close()\n\n\n@pytest.fixture(scope='class')\ndef document(bot, chat_id):\n    with open('tests/data/telegram.png', 'rb') as f:\n        return bot.send_document(chat_id, document=f, timeout=50).document\n\n\nclass TestDocument(object):\n    caption = 'DocumentTest - *Caption*'\n    document_file_url = 'https://python-telegram-bot.org/static/testfiles/telegram.gif'\n    file_size = 12948\n    mime_type = 'image/png'\n    file_name = 'telegram.png'\n    thumb_file_size = 2364\n    thumb_width = 90\n    thumb_heigth = 90\n\n    def test_creation(self, document):\n        assert isinstance(document, Document)\n        assert isinstance(document.file_id, str)\n        assert document.file_id is not ''\n\n    def test_expected_values(self, document):\n        assert document.file_size == self.file_size\n        assert document.mime_type == self.mime_type\n        assert document.file_name == self.file_name\n        assert document.thumb.file_size == self.thumb_file_size\n        assert document.thumb.width == self.thumb_width\n        assert document.thumb.height == self.thumb_heigth\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_send_all_args(self, bot, chat_id, document_file, document):\n        message = bot.send_document(chat_id, document=document_file, caption=self.caption,\n                                    disable_notification=False, filename='telegram_custom.png',\n                                    parse_mode='Markdown')\n\n        assert isinstance(message.document, Document)\n        assert isinstance(message.document.file_id, str)\n        assert message.document.file_id != ''\n        assert isinstance(message.document.thumb, PhotoSize)\n        assert message.document.file_name == 'telegram_custom.png'\n        assert message.document.mime_type == document.mime_type\n        assert message.document.file_size == document.file_size\n        assert message.document.thumb == document.thumb\n        assert message.caption == self.caption.replace('*', '')\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_get_and_download(self, bot, document):\n        new_file = bot.get_file(document.file_id)\n\n        assert new_file.file_size == document.file_size\n        assert new_file.file_id == document.file_id\n        assert new_file.file_path.startswith('https://')\n\n        new_file.download('telegram.png')\n\n        assert os.path.isfile('telegram.png')\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_send_url_gif_file(self, bot, chat_id):\n        message = bot.send_document(chat_id, self.document_file_url)\n\n        document = message.document\n\n        assert isinstance(document, Document)\n        assert isinstance(document.file_id, str)\n        assert document.file_id != ''\n        assert isinstance(document.thumb, PhotoSize)\n        assert document.file_name == 'telegram.gif'\n        assert document.mime_type == 'image/gif'\n        assert document.file_size == 3878\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_send_resend(self, bot, chat_id, document):\n        message = bot.send_document(chat_id=chat_id, document=document.file_id)\n\n        assert message.document == document\n\n    def test_send_with_document(self, monkeypatch, bot, chat_id, document):\n        def test(_, url, data, **kwargs):\n            return data['document'] == document.file_id\n\n        monkeypatch.setattr('telegram.utils.request.Request.post', test)\n\n        message = bot.send_document(document=document, chat_id=chat_id)\n\n        assert message\n\n    def test_de_json(self, bot, document):\n        json_dict = {'file_id': 'not a file id',\n                     'thumb': document.thumb.to_dict(),\n                     'file_name': self.file_name,\n                     'mime_type': self.mime_type,\n                     'file_size': self.file_size\n                     }\n        test_document = Document.de_json(json_dict, bot)\n\n        assert test_document.file_id == 'not a file id'\n        assert test_document.thumb == document.thumb\n        assert test_document.file_name == self.file_name\n        assert test_document.mime_type == self.mime_type\n        assert test_document.file_size == self.file_size\n\n    def test_to_dict(self, document):\n        document_dict = document.to_dict()\n\n        assert isinstance(document_dict, dict)\n        assert document_dict['file_id'] == document.file_id\n        assert document_dict['file_name'] == document.file_name\n        assert document_dict['mime_type'] == document.mime_type\n        assert document_dict['file_size'] == document.file_size\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_error_send_empty_file(self, bot, chat_id):\n        with open(os.devnull, 'rb') as f:\n            with pytest.raises(TelegramError):\n                bot.send_document(chat_id=chat_id, document=f)\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_error_send_empty_file_id(self, bot, chat_id):\n        with pytest.raises(TelegramError):\n            bot.send_document(chat_id=chat_id, document='')\n\n    def test_error_send_without_required_args(self, bot, chat_id):\n        with pytest.raises(TypeError):\n            bot.send_document(chat_id=chat_id)\n\n    def test_get_file_instance_method(self, monkeypatch, document):\n        def test(*args, **kwargs):\n            return args[1] == document.file_id\n\n        monkeypatch.setattr('telegram.Bot.get_file', test)\n        assert document.get_file()\n\n    def test_equality(self, document):\n        a = Document(document.file_id)\n        b = Document(document.file_id)\n        d = Document('')\n        e = Voice(document.file_id, 0)\n\n        assert a == b\n        assert hash(a) == hash(b)\n        assert a is not b\n\n        assert a != d\n        assert hash(a) != hash(d)\n\n        assert a != e\n        assert hash(a) != hash(e)\n", "comments": "   usr bin env python       a library provides python interface telegram bot api    copyright (c) 2015 2018    leandro toledo de souza  devs python telegram bot org        this program free software  redistribute modify    terms gnu lesser public license published    free software foundation  either version 3 license     (at option) later version        this program distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu lesser public license details        you received copy gnu lesser public license    along program   if  see  http   www gnu org licenses    ", "content": "#!/usr/bin/env python\n#\n# A library that provides a Python interface to the Telegram Bot API\n# Copyright (C) 2015-2018\n# Leandro Toledo de Souza <devs@python-telegram-bot.org>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Lesser Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser Public License for more details.\n#\n# You should have received a copy of the GNU Lesser Public License\n# along with this program.  If not, see [http://www.gnu.org/licenses/].\nimport os\n\nimport pytest\nfrom flaky import flaky\n\nfrom telegram import Document, PhotoSize, TelegramError, Voice\n\n\n@pytest.fixture(scope='function')\ndef document_file():\n    f = open('tests/data/telegram.png', 'rb')\n    yield f\n    f.close()\n\n\n@pytest.fixture(scope='class')\ndef document(bot, chat_id):\n    with open('tests/data/telegram.png', 'rb') as f:\n        return bot.send_document(chat_id, document=f, timeout=50).document\n\n\nclass TestDocument(object):\n    caption = 'DocumentTest - *Caption*'\n    document_file_url = 'https://python-telegram-bot.org/static/testfiles/telegram.gif'\n    file_size = 12948\n    mime_type = 'image/png'\n    file_name = 'telegram.png'\n    thumb_file_size = 2364\n    thumb_width = 90\n    thumb_heigth = 90\n\n    def test_creation(self, document):\n        assert isinstance(document, Document)\n        assert isinstance(document.file_id, str)\n        assert document.file_id is not ''\n\n    def test_expected_values(self, document):\n        assert document.file_size == self.file_size\n        assert document.mime_type == self.mime_type\n        assert document.file_name == self.file_name\n        assert document.thumb.file_size == self.thumb_file_size\n        assert document.thumb.width == self.thumb_width\n        assert document.thumb.height == self.thumb_heigth\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_send_all_args(self, bot, chat_id, document_file, document):\n        message = bot.send_document(chat_id, document=document_file, caption=self.caption,\n                                    disable_notification=False, filename='telegram_custom.png',\n                                    parse_mode='Markdown')\n\n        assert isinstance(message.document, Document)\n        assert isinstance(message.document.file_id, str)\n        assert message.document.file_id != ''\n        assert isinstance(message.document.thumb, PhotoSize)\n        assert message.document.file_name == 'telegram_custom.png'\n        assert message.document.mime_type == document.mime_type\n        assert message.document.file_size == document.file_size\n        assert message.document.thumb == document.thumb\n        assert message.caption == self.caption.replace('*', '')\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_get_and_download(self, bot, document):\n        new_file = bot.get_file(document.file_id)\n\n        assert new_file.file_size == document.file_size\n        assert new_file.file_id == document.file_id\n        assert new_file.file_path.startswith('https://')\n\n        new_file.download('telegram.png')\n\n        assert os.path.isfile('telegram.png')\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_send_url_gif_file(self, bot, chat_id):\n        message = bot.send_document(chat_id, self.document_file_url)\n\n        document = message.document\n\n        assert isinstance(document, Document)\n        assert isinstance(document.file_id, str)\n        assert document.file_id != ''\n        assert isinstance(document.thumb, PhotoSize)\n        assert document.file_name == 'telegram.gif'\n        assert document.mime_type == 'image/gif'\n        assert document.file_size == 3878\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_send_resend(self, bot, chat_id, document):\n        message = bot.send_document(chat_id=chat_id, document=document.file_id)\n\n        assert message.document == document\n\n    def test_send_with_document(self, monkeypatch, bot, chat_id, document):\n        def test(_, url, data, **kwargs):\n            return data['document'] == document.file_id\n\n        monkeypatch.setattr('telegram.utils.request.Request.post', test)\n\n        message = bot.send_document(document=document, chat_id=chat_id)\n\n        assert message\n\n    def test_de_json(self, bot, document):\n        json_dict = {'file_id': 'not a file id',\n                     'thumb': document.thumb.to_dict(),\n                     'file_name': self.file_name,\n                     'mime_type': self.mime_type,\n                     'file_size': self.file_size\n                     }\n        test_document = Document.de_json(json_dict, bot)\n\n        assert test_document.file_id == 'not a file id'\n        assert test_document.thumb == document.thumb\n        assert test_document.file_name == self.file_name\n        assert test_document.mime_type == self.mime_type\n        assert test_document.file_size == self.file_size\n\n    def test_to_dict(self, document):\n        document_dict = document.to_dict()\n\n        assert isinstance(document_dict, dict)\n        assert document_dict['file_id'] == document.file_id\n        assert document_dict['file_name'] == document.file_name\n        assert document_dict['mime_type'] == document.mime_type\n        assert document_dict['file_size'] == document.file_size\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_error_send_empty_file(self, bot, chat_id):\n        with open(os.devnull, 'rb') as f:\n            with pytest.raises(TelegramError):\n                bot.send_document(chat_id=chat_id, document=f)\n\n    @flaky(3, 1)\n    @pytest.mark.timeout(10)\n    def test_error_send_empty_file_id(self, bot, chat_id):\n        with pytest.raises(TelegramError):\n            bot.send_document(chat_id=chat_id, document='')\n\n    def test_error_send_without_required_args(self, bot, chat_id):\n        with pytest.raises(TypeError):\n            bot.send_document(chat_id=chat_id)\n\n    def test_get_file_instance_method(self, monkeypatch, document):\n        def test(*args, **kwargs):\n            return args[1] == document.file_id\n\n        monkeypatch.setattr('telegram.Bot.get_file', test)\n        assert document.get_file()\n\n    def test_equality(self, document):\n        a = Document(document.file_id)\n        b = Document(document.file_id)\n        d = Document('')\n        e = Voice(document.file_id, 0)\n\n        assert a == b\n        assert hash(a) == hash(b)\n        assert a is not b\n\n        assert a != d\n        assert hash(a) != hash(d)\n\n        assert a != e\n        assert hash(a) != hash(e)\n", "description": "We have made you a wrapper you can't refuse", "file_name": "test_document.py", "id": "741fb58fbcf75ab73f5f0690edb6250e", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/tests/test_document.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}