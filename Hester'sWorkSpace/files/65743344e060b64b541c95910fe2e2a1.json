{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    qualities,\n    compat_str,\n    parse_duration,\n    parse_iso8601,\n    str_to_int,\n)\n\n\nclass GigaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?giga\\.de/(?:[^/]+/)*(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'http://www.giga.de/filme/anime-awesome/trailer/anime-awesome-chihiros-reise-ins-zauberland-das-beste-kommt-zum-schluss/',\n        'md5': '6bc5535e945e724640664632055a584f',\n        'info_dict': {\n            'id': '2622086',\n            'display_id': 'anime-awesome-chihiros-reise-ins-zauberland-das-beste-kommt-zum-schluss',\n            'ext': 'mp4',\n            'title': 'Anime Awesome: Chihiros Reise ins Zauberland \u2013 Das Beste kommt zum Schluss',\n            'description': 'md5:afdf5862241aded4718a30dff6a57baf',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 578,\n            'timestamp': 1414749706,\n            'upload_date': '20141031',\n            'uploader': 'Robin Schweiger',\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://www.giga.de/games/channel/giga-top-montag/giga-topmontag-die-besten-serien-2014/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.giga.de/extra/netzkultur/videos/giga-games-tom-mats-robin-werden-eigene-wege-gehen-eine-ankuendigung/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.giga.de/tv/jonas-liest-spieletitel-eingedeutscht-episode-2/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_id = self._search_regex(\n            [r'data-video-id=\"(\\d+)\"', r'/api/video/jwplayer/\n            webpage, 'video id')\n\n        playlist = self._download_json(\n            'http://www.giga.de/api/syndication/video/video_id/%s/playlist.json?content=syndication/key/368b5f151da4ae05ced7fa296bdff65a/'\n            % video_id, video_id)[0]\n\n        quality = qualities(['normal', 'hd720'])\n\n        formats = []\n        for format_id in itertools.count(0):\n            fmt = playlist.get(compat_str(format_id))\n            if not fmt:\n                break\n            formats.append({\n                'url': fmt['src'],\n                'format_id': '%s-%s' % (fmt['quality'], fmt['type'].split('/')[-1]),\n                'quality': quality(fmt['quality']),\n            })\n        self._sort_formats(formats)\n\n        title = self._html_search_meta(\n            'title', webpage, 'title', fatal=True)\n        description = self._html_search_meta(\n            'description', webpage, 'description')\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        duration = parse_duration(self._search_regex(\n            r'(?s)(?:data-video-id=\"{0}\"|data-video=\"[^\"]*/api/video/jwplayer/\n            webpage, 'duration', fatal=False))\n\n        timestamp = parse_iso8601(self._search_regex(\n            r'datetime=\"([^\"]+)\"', webpage, 'upload date', fatal=False))\n        uploader = self._search_regex(\n            r'class=\"author\">([^<]+)</a>', webpage, 'uploader', fatal=False)\n\n        view_count = str_to_int(self._search_regex(\n            r'<span class=\"views\"><strong>([\\d.,]+)</strong>',\n            webpage, 'view count', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n#v=(\\d+)'],\n#v={0}[^\"]*\")[^>]*>.+?<span class=\"duration\">([^<]+)</span>'.format(video_id),\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    qualities,\n    compat_str,\n    parse_duration,\n    parse_iso8601,\n    str_to_int,\n)\n\n\nclass GigaIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?giga\\.de/(?:[^/]+/)*(?P<id>[^/]+)'\n    _TESTS = [{\n        'url': 'http://www.giga.de/filme/anime-awesome/trailer/anime-awesome-chihiros-reise-ins-zauberland-das-beste-kommt-zum-schluss/',\n        'md5': '6bc5535e945e724640664632055a584f',\n        'info_dict': {\n            'id': '2622086',\n            'display_id': 'anime-awesome-chihiros-reise-ins-zauberland-das-beste-kommt-zum-schluss',\n            'ext': 'mp4',\n            'title': 'Anime Awesome: Chihiros Reise ins Zauberland \u2013 Das Beste kommt zum Schluss',\n            'description': 'md5:afdf5862241aded4718a30dff6a57baf',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 578,\n            'timestamp': 1414749706,\n            'upload_date': '20141031',\n            'uploader': 'Robin Schweiger',\n            'view_count': int,\n        },\n    }, {\n        'url': 'http://www.giga.de/games/channel/giga-top-montag/giga-topmontag-die-besten-serien-2014/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.giga.de/extra/netzkultur/videos/giga-games-tom-mats-robin-werden-eigene-wege-gehen-eine-ankuendigung/',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.giga.de/tv/jonas-liest-spieletitel-eingedeutscht-episode-2/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        video_id = self._search_regex(\n            [r'data-video-id=\"(\\d+)\"', r'/api/video/jwplayer/#v=(\\d+)'],\n            webpage, 'video id')\n\n        playlist = self._download_json(\n            'http://www.giga.de/api/syndication/video/video_id/%s/playlist.json?content=syndication/key/368b5f151da4ae05ced7fa296bdff65a/'\n            % video_id, video_id)[0]\n\n        quality = qualities(['normal', 'hd720'])\n\n        formats = []\n        for format_id in itertools.count(0):\n            fmt = playlist.get(compat_str(format_id))\n            if not fmt:\n                break\n            formats.append({\n                'url': fmt['src'],\n                'format_id': '%s-%s' % (fmt['quality'], fmt['type'].split('/')[-1]),\n                'quality': quality(fmt['quality']),\n            })\n        self._sort_formats(formats)\n\n        title = self._html_search_meta(\n            'title', webpage, 'title', fatal=True)\n        description = self._html_search_meta(\n            'description', webpage, 'description')\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        duration = parse_duration(self._search_regex(\n            r'(?s)(?:data-video-id=\"{0}\"|data-video=\"[^\"]*/api/video/jwplayer/#v={0}[^\"]*\")[^>]*>.+?<span class=\"duration\">([^<]+)</span>'.format(video_id),\n            webpage, 'duration', fatal=False))\n\n        timestamp = parse_iso8601(self._search_regex(\n            r'datetime=\"([^\"]+)\"', webpage, 'upload date', fatal=False))\n        uploader = self._search_regex(\n            r'class=\"author\">([^<]+)</a>', webpage, 'uploader', fatal=False)\n\n        view_count = str_to_int(self._search_regex(\n            r'<span class=\"views\"><strong>([\\d.,]+)</strong>',\n            webpage, 'view count', fatal=False))\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'view_count': view_count,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "giga.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/giga.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}