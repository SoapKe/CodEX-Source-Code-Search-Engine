{"author": "scikit-learn", "code": "\n\n\"\"\"\nThis script converts a subset of SVG into an HTML imagemap\n\nNote *subset*.  It only handles <path> elements, for which it only pays\nattention to the M and L commands.  Further, it only notices the \"translate\"\ntransform.\n\nIt was written to generate the examples in the documentation for maphilight,\nand thus is very squarely aimed at handling several SVG maps from wikipedia.\nIt *assumes* that all the <path>s it will need are inside a <g>.  Any <path>\noutside of a <g> will be ignored.\n\nIt takes several possible arguments, in the form:\n$ svn2imagemap.py FILENAME [x y [group1 group2 ... groupN]]\n\nFILENAME must be the name of an SVG file.  All other arguments are optional.\n\nx and y, if present, are the dimensions of the image you'll be creating from\nthe SVG.  If not present, it assumes the values of the width and height\nattributes in the SVG file.\n\ngroup1 through groupN are group ids.  If only want particular groups used,\nenter their ids here and all others will be ignored.\n\"\"\"\n\nfrom __future__ import print_function\n\nimport os\nimport re\nimport sys\nimport xml.dom.minidom\n\nimport parse_path\n\nif len(sys.argv) == 1:\n    sys.exit(\"svn2imagemap.py FILENAME [x y [group1 group2 ... groupN]]\")\nif not os.path.exists(sys.argv[1]):\n    sys.exit(\"Input file does not exist\")\nx, y, groups = None, None, None\nif len(sys.argv) >= 3:\n    x = float(sys.argv[2])\n    y = float(sys.argv[3])\n    if len(sys.argv) > 3:\n        groups = sys.argv[4:]\n\nsvg_file = xml.dom.minidom.parse(sys.argv[1])\nsvg = svg_file.getElementsByTagName('svg')[0]\n\nraw_width = float(svg.getAttribute('width'))\nraw_height = float(svg.getAttribute('height'))\nwidth_ratio = x and (x / raw_width) or 1\nheight_ratio = y and (y / raw_height) or 1\n\nif groups:\n    elements = [g for g in svg.getElementsByTagName('g') if (g.hasAttribute('id') and g.getAttribute('id') in groups)]\n    elements.extend([p for p in svg.getElementsByTagName('path') if (p.hasAttribute('id') and p.getAttribute('id') in groups)])\nelse:\n    elements = svg.getElementsByTagName('g')\n\nparsed_groups = {}\nfor e in elements:\n    paths = []\n    if e.nodeName == 'g':\n        for path in e.getElementsByTagName('path'):\n            points = parse_path.get_points(path.getAttribute('d'))\n            for pointset in points:\n                paths.append([path.getAttribute('id'), pointset])\n    else:\n        points = parse_path.get_points(e.getAttribute('d'))\n        for pointset in points:\n            paths.append([e.getAttribute('id'), pointset])\n    if e.hasAttribute('transform'):\n        print(e.getAttribute('id'), e.getAttribute('transform'))\n        for transform in re.findall(r'(\\w+)\\((-?\\d+.?\\d*),(-?\\d+.?\\d*)\\)', e.getAttribute('transform')):\n            if transform[0] == 'translate':\n                x_shift = float(transform[1])\n                y_shift = float(transform[2])\n                for path in paths:\n                    path[1] = [(p[0] + x_shift, p[1] + y_shift) for p in path[1]]\n\n    parsed_groups[e.getAttribute('id')] = paths\n\nout = []\nfor g in parsed_groups:\n    for path in parsed_groups[g]:\n        out.append('<area href=\"#\" title=\"%s\" shape=\"poly\" coords=\"%s\"></area>' %\n            (path[0], ', '.join([(\"%d,%d\" % (p[0]*width_ratio, p[1]*height_ratio)) for p in path[1]])))\n\noutfile = open(sys.argv[1].replace('.svg', '.html'), 'w')\noutfile.write('\\n'.join(out))\n", "comments": "    this script converts subset svg html imagemap  note  subset    it handles  path  elements  pays attention m l commands   further  notices  translate  transform   it written generate examples documentation maphilight  thus squarely aimed handling several svg maps wikipedia  it  assumes   path need inside  g    any  path  outside  g  ignored   it takes several possible arguments  form    svn2imagemap py filename  x  group1 group2     groupn    filename must name svg file   all arguments optional   x  present  dimensions image creating svg   if present  assumes values width height attributes svg file   group1 groupn group ids   if want particular groups used  enter ids others ignored          usr local bin python ", "content": "#!/usr/local/bin/python\n\n\"\"\"\nThis script converts a subset of SVG into an HTML imagemap\n\nNote *subset*.  It only handles <path> elements, for which it only pays\nattention to the M and L commands.  Further, it only notices the \"translate\"\ntransform.\n\nIt was written to generate the examples in the documentation for maphilight,\nand thus is very squarely aimed at handling several SVG maps from wikipedia.\nIt *assumes* that all the <path>s it will need are inside a <g>.  Any <path>\noutside of a <g> will be ignored.\n\nIt takes several possible arguments, in the form:\n$ svn2imagemap.py FILENAME [x y [group1 group2 ... groupN]]\n\nFILENAME must be the name of an SVG file.  All other arguments are optional.\n\nx and y, if present, are the dimensions of the image you'll be creating from\nthe SVG.  If not present, it assumes the values of the width and height\nattributes in the SVG file.\n\ngroup1 through groupN are group ids.  If only want particular groups used,\nenter their ids here and all others will be ignored.\n\"\"\"\n\nfrom __future__ import print_function\n\nimport os\nimport re\nimport sys\nimport xml.dom.minidom\n\nimport parse_path\n\nif len(sys.argv) == 1:\n    sys.exit(\"svn2imagemap.py FILENAME [x y [group1 group2 ... groupN]]\")\nif not os.path.exists(sys.argv[1]):\n    sys.exit(\"Input file does not exist\")\nx, y, groups = None, None, None\nif len(sys.argv) >= 3:\n    x = float(sys.argv[2])\n    y = float(sys.argv[3])\n    if len(sys.argv) > 3:\n        groups = sys.argv[4:]\n\nsvg_file = xml.dom.minidom.parse(sys.argv[1])\nsvg = svg_file.getElementsByTagName('svg')[0]\n\nraw_width = float(svg.getAttribute('width'))\nraw_height = float(svg.getAttribute('height'))\nwidth_ratio = x and (x / raw_width) or 1\nheight_ratio = y and (y / raw_height) or 1\n\nif groups:\n    elements = [g for g in svg.getElementsByTagName('g') if (g.hasAttribute('id') and g.getAttribute('id') in groups)]\n    elements.extend([p for p in svg.getElementsByTagName('path') if (p.hasAttribute('id') and p.getAttribute('id') in groups)])\nelse:\n    elements = svg.getElementsByTagName('g')\n\nparsed_groups = {}\nfor e in elements:\n    paths = []\n    if e.nodeName == 'g':\n        for path in e.getElementsByTagName('path'):\n            points = parse_path.get_points(path.getAttribute('d'))\n            for pointset in points:\n                paths.append([path.getAttribute('id'), pointset])\n    else:\n        points = parse_path.get_points(e.getAttribute('d'))\n        for pointset in points:\n            paths.append([e.getAttribute('id'), pointset])\n    if e.hasAttribute('transform'):\n        print(e.getAttribute('id'), e.getAttribute('transform'))\n        for transform in re.findall(r'(\\w+)\\((-?\\d+.?\\d*),(-?\\d+.?\\d*)\\)', e.getAttribute('transform')):\n            if transform[0] == 'translate':\n                x_shift = float(transform[1])\n                y_shift = float(transform[2])\n                for path in paths:\n                    path[1] = [(p[0] + x_shift, p[1] + y_shift) for p in path[1]]\n\n    parsed_groups[e.getAttribute('id')] = paths\n\nout = []\nfor g in parsed_groups:\n    for path in parsed_groups[g]:\n        out.append('<area href=\"#\" title=\"%s\" shape=\"poly\" coords=\"%s\"></area>' %\n            (path[0], ', '.join([(\"%d,%d\" % (p[0]*width_ratio, p[1]*height_ratio)) for p in path[1]])))\n\noutfile = open(sys.argv[1].replace('.svg', '.html'), 'w')\noutfile.write('\\n'.join(out))\n", "description": "scikit-learn: machine learning in Python", "file_name": "svg2imagemap.py", "id": "27bc564fcf7d43e0054bc08e3db394eb", "language": "Python", "project_name": "scikit-learn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/scikit-learn-scikit-learn/scikit-learn-scikit-learn-94ed5a8/doc/tutorial/machine_learning_map/svg2imagemap.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:58:59Z", "url": "https://github.com/scikit-learn/scikit-learn", "wiki": true}