{"author": "sympy", "code": "\n\nfrom collections import defaultdict\nimport os\nimport json\nimport time\n\nci_folder = os.path.dirname(__file__)\n\n\ndef read_log():\n    start_token = '= slowest test durations ='\n    start_token_seen = False\n    for line in open(os.path.join(ci_folder, 'durations.log')):\n        if start_token_seen:\n            try:\n                dur, kind, test_id = line.split()\n            except:\n                return\n            else:\n                if dur[0] not in '0123456789':\n                    return\n            if kind != 'call':\n                continue\n            if dur[-1] != 's':\n                raise NotImplementedError(\"expected seconds\")\n            yield test_id, float(dur[:-1])\n        elif start_token in line:\n            start_token_seen = True\n\n\ndef main(ref_timing, limits=(10, .1)):\n    \"\"\"\n    parses durations.log (made by generate_durations_log.sh)\n    \"\"\"\n    groupings = [defaultdict(list) for _ in range(len(limits))]\n    accumul_n = [0 for _ in range(len(limits))]\n    accumul_t = [0.0 for _ in range(len(limits))]\n    for test_id, dur in read_log():\n        if test_id.startswith('sympy/utilities/tests/test_code_quality.py'):\n            continue # white-listed (worth running since it catches many errors)\n        for idx, lim in enumerate(limits):\n            if dur/ref_timing >= lim:\n                fname, tname = test_id.split('::')\n                groupings[idx][fname].append(tname)\n                accumul_t[idx] += dur\n                accumul_n[idx] += 1\n                break\n    json_data = json.dumps([{k: sorted(v) for k, v in gr.items()}\n                            for gr in groupings], indent=4, sort_keys=True)\n    open(os.path.join(ci_folder, 'durations.json'), 'wt').write(json_data)\n    print('number in group, accumulated_time: %s' %\n          str(list(zip(accumul_n, accumul_t))))\n\n\ndef slow_function():\n    t = time.time()\n    a = 0\n    for i in range(5):\n        a += sum([x**.3 - x**i for x in range(1000000) if x % 3 == 0])\n    return time.time() - t\n\n\nif __name__ == '__main__':\n    ref_time = slow_function()\n    main(ref_time)\n", "comments": "        parses durations log (made generate durations log sh)             usr bin env python3    white listed (worth running since catches many errors) ", "content": "#!/usr/bin/env python3\n\nfrom collections import defaultdict\nimport os\nimport json\nimport time\n\nci_folder = os.path.dirname(__file__)\n\n\ndef read_log():\n    start_token = '= slowest test durations ='\n    start_token_seen = False\n    for line in open(os.path.join(ci_folder, 'durations.log')):\n        if start_token_seen:\n            try:\n                dur, kind, test_id = line.split()\n            except:\n                return\n            else:\n                if dur[0] not in '0123456789':\n                    return\n            if kind != 'call':\n                continue\n            if dur[-1] != 's':\n                raise NotImplementedError(\"expected seconds\")\n            yield test_id, float(dur[:-1])\n        elif start_token in line:\n            start_token_seen = True\n\n\ndef main(ref_timing, limits=(10, .1)):\n    \"\"\"\n    parses durations.log (made by generate_durations_log.sh)\n    \"\"\"\n    groupings = [defaultdict(list) for _ in range(len(limits))]\n    accumul_n = [0 for _ in range(len(limits))]\n    accumul_t = [0.0 for _ in range(len(limits))]\n    for test_id, dur in read_log():\n        if test_id.startswith('sympy/utilities/tests/test_code_quality.py'):\n            continue # white-listed (worth running since it catches many errors)\n        for idx, lim in enumerate(limits):\n            if dur/ref_timing >= lim:\n                fname, tname = test_id.split('::')\n                groupings[idx][fname].append(tname)\n                accumul_t[idx] += dur\n                accumul_n[idx] += 1\n                break\n    json_data = json.dumps([{k: sorted(v) for k, v in gr.items()}\n                            for gr in groupings], indent=4, sort_keys=True)\n    open(os.path.join(ci_folder, 'durations.json'), 'wt').write(json_data)\n    print('number in group, accumulated_time: %s' %\n          str(list(zip(accumul_n, accumul_t))))\n\n\ndef slow_function():\n    t = time.time()\n    a = 0\n    for i in range(5):\n        a += sum([x**.3 - x**i for x in range(1000000) if x % 3 == 0])\n    return time.time() - t\n\n\nif __name__ == '__main__':\n    ref_time = slow_function()\n    main(ref_time)\n", "description": "A computer algebra system written in pure Python", "file_name": "parse_durations_log.py", "id": "688fa0be61141fb2e66bc932a8b7924f", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/.ci/parse_durations_log.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}