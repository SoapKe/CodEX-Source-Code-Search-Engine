{"author": "odoo", "code": " -*- coding: utf-8 -*-\n\nimport unittest\nfrom odoo.addons.stock_landed_costs.tests.common import TestStockLandedCostsCommon\n\nclass TestLandedCosts(TestStockLandedCostsCommon):\n\n    def setUp(self):\n        super(TestLandedCosts, self).setUp()\n        \n        self.picking_in = self.Picking.create({\n            'partner_id': self.supplier_id,\n            'picking_type_id': self.picking_type_in_id,\n            'location_id': self.supplier_location_id,\n            'location_dest_id': self.stock_location_id})\n        self.Move.create({\n            'name': self.product_refrigerator.name,\n            'product_id': self.product_refrigerator.id,\n            'product_uom_qty': 5,\n            'product_uom': self.product_refrigerator.uom_id.id,\n            'picking_id': self.picking_in.id,\n            'location_id': self.supplier_location_id,\n            'location_dest_id': self.stock_location_id})\n        self.Move.create({\n            'name': self.product_oven.name,\n            'product_id': self.product_oven.id,\n            'product_uom_qty': 10,\n            'product_uom': self.product_oven.uom_id.id,\n            'picking_id': self.picking_in.id,\n            'location_id': self.supplier_location_id,\n            'location_dest_id': self.stock_location_id})\n        \n        self.picking_out = self.Picking.create({\n            'partner_id': self.customer_id,\n            'picking_type_id': self.picking_type_out_id,\n            'location_id': self.stock_location_id,\n            'location_dest_id': self.customer_location_id})\n        self.Move.create({\n            'name': self.product_refrigerator.name,\n            'product_id': self.product_refrigerator.id,\n            'product_uom_qty': 2,\n            'product_uom': self.product_refrigerator.uom_id.id,\n            'picking_id': self.picking_out.id,\n            'location_id': self.stock_location_id,\n            'location_dest_id': self.customer_location_id})\n\n    def test_00_landed_costs_on_incoming_shipment(self):\n        chart_of_accounts = self.env.user.company_id.chart_template_id\n        generic_coa = self.env.ref('l10n_generic_coa.configurable_chart_template')\n        if chart_of_accounts != generic_coa:\n            raise unittest.SkipTest('Skip this test as it works only with %s (%s loaded)' % (generic_coa.name, chart_of_accounts.name))\n        \"\"\" Test landed cost on incoming shipment \"\"\"\n        \n         (A) Purchase product\n\n                 Services           Quantity       Weight      Volume\n                 -----------------------------------------------------\n                 1. Refrigerator         5            10          1\n                 2. Oven                 10           20          1.5\n\n         (B) Add some costs on purchase\n\n                 Services           Amount     Split Method\n                 -------------------------------------------\n                 1.labour            10        By Equal\n                 2.brokerage         150       By Quantity\n                 3.transportation    250       By Weight\n                 4.packaging         20        By Volume\n\n         Process incoming shipment\n        income_ship = self._process_incoming_shipment()\n         Create landed costs\n        stock_landed_cost = self._create_landed_costs({\n            'equal_price_unit': 10,\n            'quantity_price_unit': 150,\n            'weight_price_unit': 250,\n            'volume_price_unit': 20}, income_ship)\n         Compute landed costs\n        stock_landed_cost.compute_landed_cost()\n\n        valid_vals = {\n            'equal': 5.0,\n            'by_quantity_refrigerator': 50.0,\n            'by_quantity_oven': 100.0,\n            'by_weight_refrigerator': 50.0,\n            'by_weight_oven': 200,\n            'by_volume_refrigerator': 5.0,\n            'by_volume_oven': 15.0}\n\n         Check valuation adjustment line recognized or not\n        self._validate_additional_landed_cost_lines(stock_landed_cost, valid_vals)\n         Validate the landed cost.\n        stock_landed_cost.button_validate()\n        self.assertTrue(stock_landed_cost.account_move_id, 'Landed costs should be available account move lines')\n        account_entry = self.env['account.move.line'].read_group(\n            [('move_id', '=', stock_landed_cost.account_move_id.id)], ['debit', 'credit', 'move_id'], ['move_id'])[0]\n        self.assertEqual(account_entry['debit'], account_entry['credit'], 'Debit and credit are not equal')\n        self.assertEqual(account_entry['debit'], 430.0, 'Wrong Account Entry')\n\n    def test_01_negative_landed_costs_on_incoming_shipment(self):\n        chart_of_accounts = self.env.user.company_id.chart_template_id\n        generic_coa = self.env.ref('l10n_generic_coa.configurable_chart_template')\n        if chart_of_accounts != generic_coa:\n            raise unittest.SkipTest('Skip this test as it works only with %s (%s loaded)' % (generic_coa.name, chart_of_accounts.name))\n\n        \"\"\" Test negative landed cost on incoming shipment \"\"\"\n        \n         (A) Purchase Product\n\n                 Services           Quantity       Weight      Volume\n                 -----------------------------------------------------\n                 1. Refrigerator         5            10          1\n                 2. Oven                 10           20          1.5\n\n         (B) Sale refrigerator's part of the quantity\n\n         (C) Add some costs on purchase\n\n                 Services           Amount     Split Method\n                 -------------------------------------------\n                 1.labour            10        By Equal\n                 2.brokerage         150       By Quantity\n                 3.transportation    250       By Weight\n                 4.packaging         20        By Volume\n\n         (D) Decrease cost that already added on purchase\n                 (apply negative entry)\n\n                 Services           Amount     Split Method\n                 -------------------------------------------\n                 1.labour            -5        By Equal\n                 2.brokerage         -50       By Quantity\n                 3.transportation    -50       By Weight\n                 4.packaging         -5        By Volume\n\n         Process incoming shipment\n        income_ship = self._process_incoming_shipment()\n         Refrigerator outgoing shipment.\n        self._process_outgoing_shipment()\n         Apply landed cost for incoming shipment.\n        stock_landed_cost = self._create_landed_costs({\n            'equal_price_unit': 10,\n            'quantity_price_unit': 150,\n            'weight_price_unit': 250,\n            'volume_price_unit': 20}, income_ship)\n         Compute landed costs\n        stock_landed_cost.compute_landed_cost()\n        valid_vals = {\n            'equal': 5.0,\n            'by_quantity_refrigerator': 50.0,\n            'by_quantity_oven': 100.0,\n            'by_weight_refrigerator': 50.0,\n            'by_weight_oven': 200.0,\n            'by_volume_refrigerator': 5.0,\n            'by_volume_oven': 15.0}\n         Check valuation adjustment line recognized or not\n        self._validate_additional_landed_cost_lines(stock_landed_cost, valid_vals)\n         Validate the landed cost.\n        stock_landed_cost.button_validate()\n        self.assertTrue(stock_landed_cost.account_move_id, 'Landed costs should be available account move lines')\n         Create negative landed cost for previously incoming shipment.\n        stock_negative_landed_cost = self._create_landed_costs({\n            'equal_price_unit': -5,\n            'quantity_price_unit': -50,\n            'weight_price_unit': -50,\n            'volume_price_unit': -5}, income_ship)\n         Compute negative landed costs\n        stock_negative_landed_cost.compute_landed_cost()\n        valid_vals = {\n            'equal': -2.5,\n            'by_quantity_refrigerator': -16.67,\n            'by_quantity_oven': -33.33,\n            'by_weight_refrigerator': -10.00,\n            'by_weight_oven': -40.00,\n            'by_volume_refrigerator': -1.25,\n            'by_volume_oven': -3.75}\n         Check valuation adjustment line recognized or not\n        self._validate_additional_landed_cost_lines(stock_negative_landed_cost, valid_vals)\n         Validate the landed cost.\n        stock_negative_landed_cost.button_validate()\n        self.assertEqual(stock_negative_landed_cost.state, 'done', 'Negative landed costs should be in done state')\n        self.assertTrue(stock_negative_landed_cost.account_move_id, 'Landed costs should be available account move lines')\n        account_entry = self.env['account.move.line'].read_group(\n            [('move_id', '=', stock_negative_landed_cost.account_move_id.id)], ['debit', 'credit', 'move_id'], ['move_id'])[0]\n        self.assertEqual(account_entry['debit'], account_entry['credit'], 'Debit and credit are not equal')\n        move_lines = [\n            ('split by volume - Microwave Oven', 3.75, 0.0),\n            ('split by volume - Microwave Oven', 0.0, 3.75),\n            ('split by weight - Microwave Oven', 40.0, 0.0),\n            ('split by weight - Microwave Oven', 0.0, 40.0),\n            ('split by quantity - Microwave Oven', 33.33, 0.0),\n            ('split by quantity - Microwave Oven', 0.0, 33.33),\n            ('equal split - Microwave Oven', 2.5, 0.0),\n            ('equal split - Microwave Oven', 0.0, 2.5),\n            ('split by volume - Refrigerator: 2.0 already out', 0.5, 0.0),\n            ('split by volume - Refrigerator: 2.0 already out', 0.0, 0.5),\n            ('split by volume - Refrigerator', 1.25, 0.0),\n            ('split by volume - Refrigerator', 0.0, 1.25),\n            ('split by weight - Refrigerator: 2.0 already out', 4.0, 0.0),\n            ('split by weight - Refrigerator: 2.0 already out', 0.0, 4.0),\n            ('split by weight - Refrigerator', 10.0, 0.0),\n            ('split by weight - Refrigerator', 0.0, 10.0),\n            ('split by quantity - Refrigerator: 2.0 already out', 6.67, 0.0),\n            ('split by quantity - Refrigerator: 2.0 already out', 0.0, 6.67),\n            ('split by quantity - Refrigerator', 16.67, 0.0),\n            ('split by quantity - Refrigerator', 0.0, 16.67),\n            ('equal split - Refrigerator: 2.0 already out', 1.0, 0.0),\n            ('equal split - Refrigerator: 2.0 already out', 0.0, 1.0),\n            ('equal split - Refrigerator', 2.5, 0.0),\n            ('equal split - Refrigerator', 0.0, 2.5)\n        ]\n        if stock_negative_landed_cost.account_move_id.company_id.anglo_saxon_accounting:\n            move_lines += [\n                ('split by volume - Refrigerator: 2.0 already out', 0.5, 0.0),\n                ('split by volume - Refrigerator: 2.0 already out', 0.0, 0.5),\n                ('split by weight - Refrigerator: 2.0 already out', 4.0, 0.0),\n                ('split by weight - Refrigerator: 2.0 already out', 0.0, 4.0),\n                ('split by quantity - Refrigerator: 2.0 already out', 6.67, 0.0),\n                ('split by quantity - Refrigerator: 2.0 already out', 0.0, 6.67),\n                ('equal split - Refrigerator: 2.0 already out', 1.0, 0.0),\n                ('equal split - Refrigerator: 2.0 already out', 0.0, 1.0),\n            ]\n        self.check_complete_move(stock_negative_landed_cost.account_move_id, move_lines)\n\n    def _process_incoming_shipment(self):\n        \"\"\" Two product incoming shipment. \"\"\"\n         Confirm incoming shipment.\n        self.picking_in.action_confirm()\n         Transfer incoming shipment\n        res_dict = self.picking_in.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n        return self.picking_in\n\n    def _process_outgoing_shipment(self):\n        \"\"\" One product Outgoing shipment. \"\"\"\n         Confirm outgoing shipment.\n        self.picking_out.action_confirm()\n         Product assign to outgoing shipments\n        self.picking_out.action_assign()\n         Transfer picking.\n\n        res_dict = self.picking_out.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n    def _create_landed_costs(self, value, picking_in):\n        return self.LandedCost.create(dict(\n            picking_ids=[(6, 0, [picking_in.id])],\n            account_journal_id=self.expenses_journal.id,\n            cost_lines=[\n                (0, 0, {\n                    'name': 'equal split',\n                    'split_method': 'equal',\n                    'price_unit': value['equal_price_unit'],\n                    'product_id': self.landed_cost.id}),\n                (0, 0, {\n                    'name': 'split by quantity',\n                    'split_method': 'by_quantity',\n                    'price_unit': value['quantity_price_unit'],\n                    'product_id': self.brokerage_quantity.id}),\n                (0, 0, {\n                    'name': 'split by weight',\n                    'split_method': 'by_weight',\n                    'price_unit': value['weight_price_unit'],\n                    'product_id': self.transportation_weight.id}),\n                (0, 0, {\n                    'name': 'split by volume',\n                    'split_method': 'by_volume',\n                    'price_unit': value['volume_price_unit'],\n                    'product_id': self.packaging_volume.id})\n            ],\n        ))\n\n    def _validate_additional_landed_cost_lines(self, stock_landed_cost, valid_vals):\n        for valuation in stock_landed_cost.valuation_adjustment_lines:\n            add_cost = valuation.additional_landed_cost\n            split_method = valuation.cost_line_id.split_method\n            product = valuation.move_id.product_id\n            if split_method == 'equal':\n                self.assertEqual(add_cost, valid_vals['equal'], self._error_message(valid_vals['equal'], add_cost))\n            elif split_method == 'by_quantity' and product == self.product_refrigerator:\n                self.assertEqual(add_cost, valid_vals['by_quantity_refrigerator'], self._error_message(valid_vals['by_quantity_refrigerator'], add_cost))\n            elif split_method == 'by_quantity' and product == self.product_oven:\n                self.assertEqual(add_cost, valid_vals['by_quantity_oven'], self._error_message(valid_vals['by_quantity_oven'], add_cost))\n            elif split_method == 'by_weight' and product == self.product_refrigerator:\n                self.assertEqual(add_cost, valid_vals['by_weight_refrigerator'], self._error_message(valid_vals['by_weight_refrigerator'], add_cost))\n            elif split_method == 'by_weight' and product == self.product_oven:\n                self.assertEqual(add_cost, valid_vals['by_weight_oven'], self._error_message(valid_vals['by_weight_oven'], add_cost))\n            elif split_method == 'by_volume' and product == self.product_refrigerator:\n                self.assertEqual(add_cost, valid_vals['by_volume_refrigerator'], self._error_message(valid_vals['by_volume_refrigerator'], add_cost))\n            elif split_method == 'by_volume' and product == self.product_oven:\n                self.assertEqual(add_cost, valid_vals['by_volume_oven'], self._error_message(valid_vals['by_volume_oven'], add_cost))\n\n    def _error_message(self, actucal_cost, computed_cost):\n        return 'Additional Landed Cost should be %s instead of %s' % (actucal_cost, computed_cost)\n", "comments": "    test landed cost incoming shipment                         (a) purchase product                    services           quantity       weight      volume                                                                                           1  refrigerator         5            10          1                   2  oven                 10           20          1 5            (b) add costs purchase                    services           amount     split method                                                                                 1 labour            10        by equal                   2 brokerage         150       by quantity                   3 transportation    250       by weight                   4 packaging         20        by volume            process incoming shipment         income ship   self  process incoming shipment()           create landed costs         stock landed cost   self  create landed costs(               equal price unit   10               quantity price unit   150               weight price unit   250               volume price unit   20   income ship)           compute landed costs         stock landed cost compute landed cost()          valid vals                  equal   5 0               quantity refrigerator   50 0               quantity oven   100 0               weight refrigerator   50 0               weight oven   200               volume refrigerator   5 0               volume oven   15 0             check valuation adjustment line recognized         self  validate additional landed cost lines(stock landed cost  valid vals)           validate landed cost          stock landed cost button validate()         self asserttrue(stock landed cost account move id   landed costs available account move lines )         account entry   self env  account move line   read group(              ( move id        stock landed cost account move id id)     debit    credit    move id      move id  ) 0          self assertequal(account entry  debit    account entry  credit     debit credit equal )         self assertequal(account entry  debit    430 0   wrong account entry )      def test 01 negative landed costs incoming shipment(self)          chart accounts   self env user company id chart template id         generic coa   self env ref( l10n generic coa configurable chart template )         chart accounts    generic coa              raise unittest skiptest( skip test works  ( loaded)    (generic coa name  chart accounts name))              test negative landed cost incoming shipment                         (a) purchase product                    services           quantity       weight      volume                                                                                           1  refrigerator         5            10          1                   2  oven                 10           20          1 5            (b) sale refrigerator part quantity            (c) add costs purchase                    services           amount     split method                                                                                 1 labour            10        by equal                   2 brokerage         150       by quantity                   3 transportation    250       by weight                   4 packaging         20        by volume            (d) decrease cost already added purchase                   (apply negative entry)                    services           amount     split method                                                                                 1 labour             5        by equal                   2 brokerage          50       by quantity                   3 transportation     50       by weight                   4 packaging          5        by volume            process incoming shipment         income ship   self  process incoming shipment()           refrigerator outgoing shipment          self  process outgoing shipment()           apply landed cost incoming shipment          stock landed cost   self  create landed costs(               equal price unit   10               quantity price unit   150               weight price unit   250               volume price unit   20   income ship)           compute landed costs         stock landed cost compute landed cost()         valid vals                  equal   5 0               quantity refrigerator   50 0               quantity oven   100 0               weight refrigerator   50 0               weight oven   200 0               volume refrigerator   5 0               volume oven   15 0            check valuation adjustment line recognized         self  validate additional landed cost lines(stock landed cost  valid vals)           validate landed cost          stock landed cost button validate()         self asserttrue(stock landed cost account move id   landed costs available account move lines )           create negative landed cost previously incoming shipment          stock negative landed cost   self  create landed costs(               equal price unit    5               quantity price unit    50               weight price unit    50               volume price unit    5   income ship)           compute negative landed costs         stock negative landed cost compute landed cost()         valid vals                  equal    2 5               quantity refrigerator    16 67               quantity oven    33 33               weight refrigerator    10 00               weight oven    40 00               volume refrigerator    1 25               volume oven    3 75            check valuation adjustment line recognized         self  validate additional landed cost lines(stock negative landed cost  valid vals)           validate landed cost          stock negative landed cost button validate()         self assertequal(stock negative landed cost state   done    negative landed costs done state )         self asserttrue(stock negative landed cost account move id   landed costs available account move lines )         account entry   self env  account move line   read group(              ( move id        stock negative landed cost account move id id)     debit    credit    move id      move id  ) 0          self assertequal(account entry  debit    account entry  credit     debit credit equal )         move lines                 ( split volume   microwave oven   3 75  0 0)              ( split volume   microwave oven   0 0  3 75)              ( split weight   microwave oven   40 0  0 0)              ( split weight   microwave oven   0 0  40 0)              ( split quantity   microwave oven   33 33  0 0)              ( split quantity   microwave oven   0 0  33 33)              ( equal split   microwave oven   2 5  0 0)              ( equal split   microwave oven   0 0  2 5)              ( split volume   refrigerator  2 0 already   0 5  0 0)              ( split volume   refrigerator  2 0 already   0 0  0 5)              ( split volume   refrigerator   1 25  0 0)              ( split volume   refrigerator   0 0  1 25)              ( split weight   refrigerator  2 0 already   4 0  0 0)              ( split weight   refrigerator  2 0 already   0 0  4 0)              ( split weight   refrigerator   10 0  0 0)              ( split weight   refrigerator   0 0  10 0)              ( split quantity   refrigerator  2 0 already   6 67  0 0)              ( split quantity   refrigerator  2 0 already   0 0  6 67)              ( split quantity   refrigerator   16 67  0 0)              ( split quantity   refrigerator   0 0  16 67)              ( equal split   refrigerator  2 0 already   1 0  0 0)              ( equal split   refrigerator  2 0 already   0 0  1 0)              ( equal split   refrigerator   2 5  0 0)              ( equal split   refrigerator   0 0  2 5)                   stock negative landed cost account move id company id anglo saxon accounting              move lines                      ( split volume   refrigerator  2 0 already   0 5  0 0)                  ( split volume   refrigerator  2 0 already   0 0  0 5)                  ( split weight   refrigerator  2 0 already   4 0  0 0)                  ( split weight   refrigerator  2 0 already   0 0  4 0)                  ( split quantity   refrigerator  2 0 already   6 67  0 0)                  ( split quantity   refrigerator  2 0 already   0 0  6 67)                  ( equal split   refrigerator  2 0 already   1 0  0 0)                  ( equal split   refrigerator  2 0 already   0 0  1 0)                        self check complete move(stock negative landed cost account move id  move lines)      def  process incoming shipment(self)              two product incoming shipment                confirm incoming shipment          self picking action confirm()           transfer incoming shipment         res dict   self picking button validate()         wizard   self env (res dict get( res model ))  browse(res dict get( res id ))         wizard process()         return self picking      def  process outgoing shipment(self)              one product outgoing shipment             coding  utf 8        part odoo  see license file full copyright licensing details     create picking incoming shipment    create picking outgoing shipment       (a) purchase product            services           quantity       weight      volume                                                                             1  refrigerator         5            10          1            2  oven                 10           20          1 5    (b) add costs purchase            services           amount     split method                                                                   1 labour            10        by equal            2 brokerage         150       by quantity            3 transportation    250       by weight            4 packaging         20        by volume    process incoming shipment    create landed costs    compute landed costs    check valuation adjustment line recognized    validate landed cost        (a) purchase product            services           quantity       weight      volume                                                                             1  refrigerator         5            10          1            2  oven                 10           20          1 5    (b) sale refrigerator part quantity    (c) add costs purchase            services           amount     split method                                                                   1 labour            10        by equal            2 brokerage         150       by quantity            3 transportation    250       by weight            4 packaging         20        by volume    (d) decrease cost already added purchase            (apply negative entry)            services           amount     split method                                                                   1 labour             5        by equal            2 brokerage          50       by quantity            3 transportation     50       by weight            4 packaging          5        by volume    process incoming shipment    refrigerator outgoing shipment     apply landed cost incoming shipment     compute landed costs    check valuation adjustment line recognized    validate landed cost     create negative landed cost previously incoming shipment     compute negative landed costs    check valuation adjustment line recognized    validate landed cost     confirm incoming shipment     transfer incoming shipment    confirm outgoing shipment     product assign outgoing shipments    transfer picking  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nimport unittest\nfrom odoo.addons.stock_landed_costs.tests.common import TestStockLandedCostsCommon\n\nclass TestLandedCosts(TestStockLandedCostsCommon):\n\n    def setUp(self):\n        super(TestLandedCosts, self).setUp()\n        # Create picking incoming shipment\n        self.picking_in = self.Picking.create({\n            'partner_id': self.supplier_id,\n            'picking_type_id': self.picking_type_in_id,\n            'location_id': self.supplier_location_id,\n            'location_dest_id': self.stock_location_id})\n        self.Move.create({\n            'name': self.product_refrigerator.name,\n            'product_id': self.product_refrigerator.id,\n            'product_uom_qty': 5,\n            'product_uom': self.product_refrigerator.uom_id.id,\n            'picking_id': self.picking_in.id,\n            'location_id': self.supplier_location_id,\n            'location_dest_id': self.stock_location_id})\n        self.Move.create({\n            'name': self.product_oven.name,\n            'product_id': self.product_oven.id,\n            'product_uom_qty': 10,\n            'product_uom': self.product_oven.uom_id.id,\n            'picking_id': self.picking_in.id,\n            'location_id': self.supplier_location_id,\n            'location_dest_id': self.stock_location_id})\n        # Create picking outgoing shipment\n        self.picking_out = self.Picking.create({\n            'partner_id': self.customer_id,\n            'picking_type_id': self.picking_type_out_id,\n            'location_id': self.stock_location_id,\n            'location_dest_id': self.customer_location_id})\n        self.Move.create({\n            'name': self.product_refrigerator.name,\n            'product_id': self.product_refrigerator.id,\n            'product_uom_qty': 2,\n            'product_uom': self.product_refrigerator.uom_id.id,\n            'picking_id': self.picking_out.id,\n            'location_id': self.stock_location_id,\n            'location_dest_id': self.customer_location_id})\n\n    def test_00_landed_costs_on_incoming_shipment(self):\n        chart_of_accounts = self.env.user.company_id.chart_template_id\n        generic_coa = self.env.ref('l10n_generic_coa.configurable_chart_template')\n        if chart_of_accounts != generic_coa:\n            raise unittest.SkipTest('Skip this test as it works only with %s (%s loaded)' % (generic_coa.name, chart_of_accounts.name))\n        \"\"\" Test landed cost on incoming shipment \"\"\"\n        #\n        # (A) Purchase product\n\n        #         Services           Quantity       Weight      Volume\n        #         -----------------------------------------------------\n        #         1. Refrigerator         5            10          1\n        #         2. Oven                 10           20          1.5\n\n        # (B) Add some costs on purchase\n\n        #         Services           Amount     Split Method\n        #         -------------------------------------------\n        #         1.labour            10        By Equal\n        #         2.brokerage         150       By Quantity\n        #         3.transportation    250       By Weight\n        #         4.packaging         20        By Volume\n\n        # Process incoming shipment\n        income_ship = self._process_incoming_shipment()\n        # Create landed costs\n        stock_landed_cost = self._create_landed_costs({\n            'equal_price_unit': 10,\n            'quantity_price_unit': 150,\n            'weight_price_unit': 250,\n            'volume_price_unit': 20}, income_ship)\n        # Compute landed costs\n        stock_landed_cost.compute_landed_cost()\n\n        valid_vals = {\n            'equal': 5.0,\n            'by_quantity_refrigerator': 50.0,\n            'by_quantity_oven': 100.0,\n            'by_weight_refrigerator': 50.0,\n            'by_weight_oven': 200,\n            'by_volume_refrigerator': 5.0,\n            'by_volume_oven': 15.0}\n\n        # Check valuation adjustment line recognized or not\n        self._validate_additional_landed_cost_lines(stock_landed_cost, valid_vals)\n        # Validate the landed cost.\n        stock_landed_cost.button_validate()\n        self.assertTrue(stock_landed_cost.account_move_id, 'Landed costs should be available account move lines')\n        account_entry = self.env['account.move.line'].read_group(\n            [('move_id', '=', stock_landed_cost.account_move_id.id)], ['debit', 'credit', 'move_id'], ['move_id'])[0]\n        self.assertEqual(account_entry['debit'], account_entry['credit'], 'Debit and credit are not equal')\n        self.assertEqual(account_entry['debit'], 430.0, 'Wrong Account Entry')\n\n    def test_01_negative_landed_costs_on_incoming_shipment(self):\n        chart_of_accounts = self.env.user.company_id.chart_template_id\n        generic_coa = self.env.ref('l10n_generic_coa.configurable_chart_template')\n        if chart_of_accounts != generic_coa:\n            raise unittest.SkipTest('Skip this test as it works only with %s (%s loaded)' % (generic_coa.name, chart_of_accounts.name))\n\n        \"\"\" Test negative landed cost on incoming shipment \"\"\"\n        #\n        # (A) Purchase Product\n\n        #         Services           Quantity       Weight      Volume\n        #         -----------------------------------------------------\n        #         1. Refrigerator         5            10          1\n        #         2. Oven                 10           20          1.5\n\n        # (B) Sale refrigerator's part of the quantity\n\n        # (C) Add some costs on purchase\n\n        #         Services           Amount     Split Method\n        #         -------------------------------------------\n        #         1.labour            10        By Equal\n        #         2.brokerage         150       By Quantity\n        #         3.transportation    250       By Weight\n        #         4.packaging         20        By Volume\n\n        # (D) Decrease cost that already added on purchase\n        #         (apply negative entry)\n\n        #         Services           Amount     Split Method\n        #         -------------------------------------------\n        #         1.labour            -5        By Equal\n        #         2.brokerage         -50       By Quantity\n        #         3.transportation    -50       By Weight\n        #         4.packaging         -5        By Volume\n\n        # Process incoming shipment\n        income_ship = self._process_incoming_shipment()\n        # Refrigerator outgoing shipment.\n        self._process_outgoing_shipment()\n        # Apply landed cost for incoming shipment.\n        stock_landed_cost = self._create_landed_costs({\n            'equal_price_unit': 10,\n            'quantity_price_unit': 150,\n            'weight_price_unit': 250,\n            'volume_price_unit': 20}, income_ship)\n        # Compute landed costs\n        stock_landed_cost.compute_landed_cost()\n        valid_vals = {\n            'equal': 5.0,\n            'by_quantity_refrigerator': 50.0,\n            'by_quantity_oven': 100.0,\n            'by_weight_refrigerator': 50.0,\n            'by_weight_oven': 200.0,\n            'by_volume_refrigerator': 5.0,\n            'by_volume_oven': 15.0}\n        # Check valuation adjustment line recognized or not\n        self._validate_additional_landed_cost_lines(stock_landed_cost, valid_vals)\n        # Validate the landed cost.\n        stock_landed_cost.button_validate()\n        self.assertTrue(stock_landed_cost.account_move_id, 'Landed costs should be available account move lines')\n        # Create negative landed cost for previously incoming shipment.\n        stock_negative_landed_cost = self._create_landed_costs({\n            'equal_price_unit': -5,\n            'quantity_price_unit': -50,\n            'weight_price_unit': -50,\n            'volume_price_unit': -5}, income_ship)\n        # Compute negative landed costs\n        stock_negative_landed_cost.compute_landed_cost()\n        valid_vals = {\n            'equal': -2.5,\n            'by_quantity_refrigerator': -16.67,\n            'by_quantity_oven': -33.33,\n            'by_weight_refrigerator': -10.00,\n            'by_weight_oven': -40.00,\n            'by_volume_refrigerator': -1.25,\n            'by_volume_oven': -3.75}\n        # Check valuation adjustment line recognized or not\n        self._validate_additional_landed_cost_lines(stock_negative_landed_cost, valid_vals)\n        # Validate the landed cost.\n        stock_negative_landed_cost.button_validate()\n        self.assertEqual(stock_negative_landed_cost.state, 'done', 'Negative landed costs should be in done state')\n        self.assertTrue(stock_negative_landed_cost.account_move_id, 'Landed costs should be available account move lines')\n        account_entry = self.env['account.move.line'].read_group(\n            [('move_id', '=', stock_negative_landed_cost.account_move_id.id)], ['debit', 'credit', 'move_id'], ['move_id'])[0]\n        self.assertEqual(account_entry['debit'], account_entry['credit'], 'Debit and credit are not equal')\n        move_lines = [\n            ('split by volume - Microwave Oven', 3.75, 0.0),\n            ('split by volume - Microwave Oven', 0.0, 3.75),\n            ('split by weight - Microwave Oven', 40.0, 0.0),\n            ('split by weight - Microwave Oven', 0.0, 40.0),\n            ('split by quantity - Microwave Oven', 33.33, 0.0),\n            ('split by quantity - Microwave Oven', 0.0, 33.33),\n            ('equal split - Microwave Oven', 2.5, 0.0),\n            ('equal split - Microwave Oven', 0.0, 2.5),\n            ('split by volume - Refrigerator: 2.0 already out', 0.5, 0.0),\n            ('split by volume - Refrigerator: 2.0 already out', 0.0, 0.5),\n            ('split by volume - Refrigerator', 1.25, 0.0),\n            ('split by volume - Refrigerator', 0.0, 1.25),\n            ('split by weight - Refrigerator: 2.0 already out', 4.0, 0.0),\n            ('split by weight - Refrigerator: 2.0 already out', 0.0, 4.0),\n            ('split by weight - Refrigerator', 10.0, 0.0),\n            ('split by weight - Refrigerator', 0.0, 10.0),\n            ('split by quantity - Refrigerator: 2.0 already out', 6.67, 0.0),\n            ('split by quantity - Refrigerator: 2.0 already out', 0.0, 6.67),\n            ('split by quantity - Refrigerator', 16.67, 0.0),\n            ('split by quantity - Refrigerator', 0.0, 16.67),\n            ('equal split - Refrigerator: 2.0 already out', 1.0, 0.0),\n            ('equal split - Refrigerator: 2.0 already out', 0.0, 1.0),\n            ('equal split - Refrigerator', 2.5, 0.0),\n            ('equal split - Refrigerator', 0.0, 2.5)\n        ]\n        if stock_negative_landed_cost.account_move_id.company_id.anglo_saxon_accounting:\n            move_lines += [\n                ('split by volume - Refrigerator: 2.0 already out', 0.5, 0.0),\n                ('split by volume - Refrigerator: 2.0 already out', 0.0, 0.5),\n                ('split by weight - Refrigerator: 2.0 already out', 4.0, 0.0),\n                ('split by weight - Refrigerator: 2.0 already out', 0.0, 4.0),\n                ('split by quantity - Refrigerator: 2.0 already out', 6.67, 0.0),\n                ('split by quantity - Refrigerator: 2.0 already out', 0.0, 6.67),\n                ('equal split - Refrigerator: 2.0 already out', 1.0, 0.0),\n                ('equal split - Refrigerator: 2.0 already out', 0.0, 1.0),\n            ]\n        self.check_complete_move(stock_negative_landed_cost.account_move_id, move_lines)\n\n    def _process_incoming_shipment(self):\n        \"\"\" Two product incoming shipment. \"\"\"\n        # Confirm incoming shipment.\n        self.picking_in.action_confirm()\n        # Transfer incoming shipment\n        res_dict = self.picking_in.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n        return self.picking_in\n\n    def _process_outgoing_shipment(self):\n        \"\"\" One product Outgoing shipment. \"\"\"\n        # Confirm outgoing shipment.\n        self.picking_out.action_confirm()\n        # Product assign to outgoing shipments\n        self.picking_out.action_assign()\n        # Transfer picking.\n\n        res_dict = self.picking_out.button_validate()\n        wizard = self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))\n        wizard.process()\n\n    def _create_landed_costs(self, value, picking_in):\n        return self.LandedCost.create(dict(\n            picking_ids=[(6, 0, [picking_in.id])],\n            account_journal_id=self.expenses_journal.id,\n            cost_lines=[\n                (0, 0, {\n                    'name': 'equal split',\n                    'split_method': 'equal',\n                    'price_unit': value['equal_price_unit'],\n                    'product_id': self.landed_cost.id}),\n                (0, 0, {\n                    'name': 'split by quantity',\n                    'split_method': 'by_quantity',\n                    'price_unit': value['quantity_price_unit'],\n                    'product_id': self.brokerage_quantity.id}),\n                (0, 0, {\n                    'name': 'split by weight',\n                    'split_method': 'by_weight',\n                    'price_unit': value['weight_price_unit'],\n                    'product_id': self.transportation_weight.id}),\n                (0, 0, {\n                    'name': 'split by volume',\n                    'split_method': 'by_volume',\n                    'price_unit': value['volume_price_unit'],\n                    'product_id': self.packaging_volume.id})\n            ],\n        ))\n\n    def _validate_additional_landed_cost_lines(self, stock_landed_cost, valid_vals):\n        for valuation in stock_landed_cost.valuation_adjustment_lines:\n            add_cost = valuation.additional_landed_cost\n            split_method = valuation.cost_line_id.split_method\n            product = valuation.move_id.product_id\n            if split_method == 'equal':\n                self.assertEqual(add_cost, valid_vals['equal'], self._error_message(valid_vals['equal'], add_cost))\n            elif split_method == 'by_quantity' and product == self.product_refrigerator:\n                self.assertEqual(add_cost, valid_vals['by_quantity_refrigerator'], self._error_message(valid_vals['by_quantity_refrigerator'], add_cost))\n            elif split_method == 'by_quantity' and product == self.product_oven:\n                self.assertEqual(add_cost, valid_vals['by_quantity_oven'], self._error_message(valid_vals['by_quantity_oven'], add_cost))\n            elif split_method == 'by_weight' and product == self.product_refrigerator:\n                self.assertEqual(add_cost, valid_vals['by_weight_refrigerator'], self._error_message(valid_vals['by_weight_refrigerator'], add_cost))\n            elif split_method == 'by_weight' and product == self.product_oven:\n                self.assertEqual(add_cost, valid_vals['by_weight_oven'], self._error_message(valid_vals['by_weight_oven'], add_cost))\n            elif split_method == 'by_volume' and product == self.product_refrigerator:\n                self.assertEqual(add_cost, valid_vals['by_volume_refrigerator'], self._error_message(valid_vals['by_volume_refrigerator'], add_cost))\n            elif split_method == 'by_volume' and product == self.product_oven:\n                self.assertEqual(add_cost, valid_vals['by_volume_oven'], self._error_message(valid_vals['by_volume_oven'], add_cost))\n\n    def _error_message(self, actucal_cost, computed_cost):\n        return 'Additional Landed Cost should be %s instead of %s' % (actucal_cost, computed_cost)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_stock_landed_costs_purchase.py", "id": "db4b828a95b4a2e2f5c847d9322ea3cf", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/stock_landed_costs/tests/test_stock_landed_costs_purchase.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}