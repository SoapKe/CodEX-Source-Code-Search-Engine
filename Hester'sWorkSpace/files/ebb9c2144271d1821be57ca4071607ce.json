{"author": "django", "code": "from django.db import models\nfrom django.test import SimpleTestCase\nfrom django.test.utils import isolate_apps\n\n\n@isolate_apps('absolute_url_overrides')\nclass AbsoluteUrlOverrideTests(SimpleTestCase):\n\n    def test_get_absolute_url(self):\n        \"\"\"\n        get_absolute_url() functions as a normal method.\n        \"\"\"\n        def get_absolute_url(o):\n            return '/test-a/%s/' % o.pk\n        TestA = self._create_model_class('TestA', get_absolute_url)\n\n        self.assertTrue(hasattr(TestA, 'get_absolute_url'))\n        obj = TestA(pk=1, name='Foo')\n        self.assertEqual('/test-a/%s/' % obj.pk, obj.get_absolute_url())\n\n    def test_override_get_absolute_url(self):\n        \"\"\"\n        ABSOLUTE_URL_OVERRIDES should override get_absolute_url().\n        \"\"\"\n        def get_absolute_url(o):\n            return '/test-b/%s/' % o.pk\n        with self.settings(\n            ABSOLUTE_URL_OVERRIDES={\n                'absolute_url_overrides.testb': lambda o: '/overridden-test-b/%s/' % o.pk,\n            },\n        ):\n            TestB = self._create_model_class('TestB', get_absolute_url)\n            obj = TestB(pk=1, name='Foo')\n            self.assertEqual('/overridden-test-b/%s/' % obj.pk, obj.get_absolute_url())\n\n    def test_insert_get_absolute_url(self):\n        \"\"\"\n        ABSOLUTE_URL_OVERRIDES should work even if the model doesn't have a\n        get_absolute_url() method.\n        \"\"\"\n        with self.settings(\n            ABSOLUTE_URL_OVERRIDES={\n                'absolute_url_overrides.testc': lambda o: '/test-c/%s/' % o.pk,\n            },\n        ):\n            TestC = self._create_model_class('TestC')\n            obj = TestC(pk=1, name='Foo')\n            self.assertEqual('/test-c/%s/' % obj.pk, obj.get_absolute_url())\n\n    def _create_model_class(self, class_name, get_absolute_url_method=None):\n        attrs = {\n            'name': models.CharField(max_length=50),\n            '__module__': 'absolute_url_overrides',\n        }\n        if get_absolute_url_method:\n            attrs['get_absolute_url'] = get_absolute_url_method\n\n        return type(class_name, (models.Model,), attrs)\n", "comments": "            get absolute url() functions normal method                      def get absolute url(o)              return   test      pk         testa   self  create model class( testa   get absolute url)          self asserttrue(hasattr(testa   get absolute url ))         obj   testa(pk 1  name  foo )         self assertequal(  test      obj pk  obj get absolute url())      def test override get absolute url(self)                      absolute url overrides override get absolute url()                      def get absolute url(o)              return   test b      pk         self settings(             absolute url overrides                    absolute url overrides testb   lambda    overridden test b      pk                         )              testb   self  create model class( testb   get absolute url)             obj   testb(pk 1  name  foo )             self assertequal(  overridden test b      obj pk  obj get absolute url())      def test insert get absolute url(self)                      absolute url overrides work even model         get absolute url() method              ", "content": "from django.db import models\nfrom django.test import SimpleTestCase\nfrom django.test.utils import isolate_apps\n\n\n@isolate_apps('absolute_url_overrides')\nclass AbsoluteUrlOverrideTests(SimpleTestCase):\n\n    def test_get_absolute_url(self):\n        \"\"\"\n        get_absolute_url() functions as a normal method.\n        \"\"\"\n        def get_absolute_url(o):\n            return '/test-a/%s/' % o.pk\n        TestA = self._create_model_class('TestA', get_absolute_url)\n\n        self.assertTrue(hasattr(TestA, 'get_absolute_url'))\n        obj = TestA(pk=1, name='Foo')\n        self.assertEqual('/test-a/%s/' % obj.pk, obj.get_absolute_url())\n\n    def test_override_get_absolute_url(self):\n        \"\"\"\n        ABSOLUTE_URL_OVERRIDES should override get_absolute_url().\n        \"\"\"\n        def get_absolute_url(o):\n            return '/test-b/%s/' % o.pk\n        with self.settings(\n            ABSOLUTE_URL_OVERRIDES={\n                'absolute_url_overrides.testb': lambda o: '/overridden-test-b/%s/' % o.pk,\n            },\n        ):\n            TestB = self._create_model_class('TestB', get_absolute_url)\n            obj = TestB(pk=1, name='Foo')\n            self.assertEqual('/overridden-test-b/%s/' % obj.pk, obj.get_absolute_url())\n\n    def test_insert_get_absolute_url(self):\n        \"\"\"\n        ABSOLUTE_URL_OVERRIDES should work even if the model doesn't have a\n        get_absolute_url() method.\n        \"\"\"\n        with self.settings(\n            ABSOLUTE_URL_OVERRIDES={\n                'absolute_url_overrides.testc': lambda o: '/test-c/%s/' % o.pk,\n            },\n        ):\n            TestC = self._create_model_class('TestC')\n            obj = TestC(pk=1, name='Foo')\n            self.assertEqual('/test-c/%s/' % obj.pk, obj.get_absolute_url())\n\n    def _create_model_class(self, class_name, get_absolute_url_method=None):\n        attrs = {\n            'name': models.CharField(max_length=50),\n            '__module__': 'absolute_url_overrides',\n        }\n        if get_absolute_url_method:\n            attrs['get_absolute_url'] = get_absolute_url_method\n\n        return type(class_name, (models.Model,), attrs)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "tests.py", "id": "ebb9c2144271d1821be57ca4071607ce", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/absolute_url_overrides/tests.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}