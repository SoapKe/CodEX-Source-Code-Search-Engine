{"author": "audreyr", "code": "# -*- coding: utf-8 -*-\n\n\"\"\"Main `cookiecutter` CLI.\"\"\"\n\nimport os\nimport sys\nimport json\n\nimport click\n\nfrom cookiecutter import __version__\nfrom cookiecutter.log import configure_logger\nfrom cookiecutter.main import cookiecutter\nfrom cookiecutter.exceptions import (\n    OutputDirExistsException,\n    InvalidModeException,\n    FailedHookException,\n    UndefinedVariableInTemplate,\n    UnknownExtension,\n    InvalidZipRepository,\n    RepositoryNotFound,\n    RepositoryCloneFailed\n)\n\n\ndef version_msg():\n    \"\"\"Return the Cookiecutter version, location and Python powering it.\"\"\"\n    python_version = sys.version[:3]\n    location = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    message = u'Cookiecutter %(version)s from {} (Python {})'\n    return message.format(location, python_version)\n\n\ndef validate_extra_context(ctx, param, value):\n    \"\"\"Validate extra context.\"\"\"\n    for s in value:\n        if '=' not in s:\n            raise click.BadParameter(\n                'EXTRA_CONTEXT should contain items of the form key=value; '\n                \"'{}' doesn't match that form\".format(s)\n            )\n\n    # Convert tuple -- e.g.: (u'program_name=foobar', u'startsecs=66')\n    \n    return dict(s.split('=', 1) for s in value) or None\n\n\n@click.command(context_settings=dict(help_option_names=[u'-h', u'--help']))\n@click.version_option(__version__, u'-V', u'--version', message=version_msg())\n@click.argument(u'template')\n@click.argument(u'extra_context', nargs=-1, callback=validate_extra_context)\n@click.option(\n    u'--no-input', is_flag=True,\n    help=u'Do not prompt for parameters and only use cookiecutter.json '\n         u'file content',\n)\n@click.option(\n    u'-c', u'--checkout',\n    help=u'branch, tag or commit to checkout after git clone',\n)\n@click.option(\n    '-v', '--verbose',\n    is_flag=True, help='Print debug information', default=False\n)\n@click.option(\n    u'--replay', is_flag=True,\n    help=u'Do not prompt for parameters and only use information entered '\n         u'previously',\n)\n@click.option(\n    u'-f', u'--overwrite-if-exists', is_flag=True,\n    help=u'Overwrite the contents of the output directory if it already exists'\n)\n@click.option(\n    u'-o', u'--output-dir', default='.', type=click.Path(),\n    help=u'Where to output the generated project dir into'\n)\n@click.option(\n    u'--config-file', type=click.Path(), default=None,\n    help=u'User configuration file'\n)\n@click.option(\n    u'--default-config', is_flag=True,\n    help=u'Do not load a config file. Use the defaults instead'\n)\n@click.option(\n    u'--debug-file', type=click.Path(), default=None,\n    help=u'File to be used as a stream for DEBUG logging',\n)\ndef main(\n        template, extra_context, no_input, checkout, verbose,\n        replay, overwrite_if_exists, output_dir, config_file,\n        default_config, debug_file):\n    \"\"\"Create a project from a Cookiecutter project template (TEMPLATE).\n\n    Cookiecutter is free and open source software, developed and managed by\n    volunteers. If you would like to help out or fund the project, please get\n    in touch at https://github.com/audreyr/cookiecutter.\n    \"\"\"\n    \n    \n    if template == u'help':\n        click.echo(click.get_current_context().get_help())\n        sys.exit(0)\n\n    configure_logger(\n        stream_level='DEBUG' if verbose else 'INFO',\n        debug_file=debug_file,\n    )\n\n    try:\n        cookiecutter(\n            template, checkout, no_input,\n            extra_context=extra_context,\n            replay=replay,\n            overwrite_if_exists=overwrite_if_exists,\n            output_dir=output_dir,\n            config_file=config_file,\n            default_config=default_config,\n            password=os.environ.get('COOKIECUTTER_REPO_PASSWORD')\n        )\n    except (OutputDirExistsException,\n            InvalidModeException,\n            FailedHookException,\n            UnknownExtension,\n            InvalidZipRepository,\n            RepositoryNotFound,\n            RepositoryCloneFailed) as e:\n        click.echo(e)\n        sys.exit(1)\n    except UndefinedVariableInTemplate as undefined_err:\n        click.echo('{}'.format(undefined_err.message))\n        click.echo('Error message: {}'.format(undefined_err.error.message))\n\n        context_str = json.dumps(\n            undefined_err.context,\n            indent=4,\n            sort_keys=True\n        )\n        click.echo('Context: {}'.format(context_str))\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "   main  cookiecutter  cli      import os import sys import json  import click  cookiecutter import   version   cookiecutter log import configure logger cookiecutter main import cookiecutter cookiecutter exceptions import (     outputdirexistsexception      invalidmodeexception      failedhookexception      undefinedvariableintemplate      unknownextension      invalidziprepository      repositorynotfound      repositoryclonefailed )   def version msg()         return cookiecutter version  location python powering         python version   sys version  3      location   os path dirname(os path dirname(os path abspath(  file  )))     message   u cookiecutter  (version)s    (python   )      return message format(location  python version)   def validate extra context(ctx  param  value)         validate extra context         value                           raise click badparameter(                  extra context contain items form key value                          match form  format(s)             )        convert tuple    e g   (u program name foobar   u startsecs 66 )       dict    e g     program name    foobar    startsecs    66       return dict(s split(     1) value) none    click command(context settings dict(help option names  u  h   u   help  ))  click version option(  version    u  v   u   version   message version msg())  click argument(u template )  click argument(u extra context   nargs  1  callback validate extra context)  click option(     u   input   flag true      help u do prompt parameters use cookiecutter json            u file content   )  click option(     u  c   u   checkout       help u branch  tag commit checkout git clone   )  click option(       v      verbose       flag true  help  print debug information   default false )  click option(     u   replay   flag true      help u do prompt parameters use information entered            u previously   )  click option(     u  f   u   overwrite exists   flag true      help u overwrite contents output directory already exists  )  click option(     u    u   output dir   default      type click path()      help u where output generated project dir  )  click option(     u   config file   type click path()  default none      help u user configuration file  )  click option(     u   default config   flag true      help u do load config file  use defaults instead  )  click option(     u   debug file   type click path()  default none      help u file used stream debug logging   ) def main(         template  extra context  input  checkout  verbose          replay  overwrite exists  output dir  config file          default config  debug file)         create project cookiecutter project template (template)       cookiecutter free open source software  developed managed     volunteers  if would like help fund project  please get     touch https   github com audreyr cookiecutter                 coding  utf 8        convert tuple    e g   (u program name foobar   u startsecs 66 )    dict    e g     program name    foobar    startsecs    66      if  need  support local template directory    called  help   use qualified path directory  ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\"Main `cookiecutter` CLI.\"\"\"\n\nimport os\nimport sys\nimport json\n\nimport click\n\nfrom cookiecutter import __version__\nfrom cookiecutter.log import configure_logger\nfrom cookiecutter.main import cookiecutter\nfrom cookiecutter.exceptions import (\n    OutputDirExistsException,\n    InvalidModeException,\n    FailedHookException,\n    UndefinedVariableInTemplate,\n    UnknownExtension,\n    InvalidZipRepository,\n    RepositoryNotFound,\n    RepositoryCloneFailed\n)\n\n\ndef version_msg():\n    \"\"\"Return the Cookiecutter version, location and Python powering it.\"\"\"\n    python_version = sys.version[:3]\n    location = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n    message = u'Cookiecutter %(version)s from {} (Python {})'\n    return message.format(location, python_version)\n\n\ndef validate_extra_context(ctx, param, value):\n    \"\"\"Validate extra context.\"\"\"\n    for s in value:\n        if '=' not in s:\n            raise click.BadParameter(\n                'EXTRA_CONTEXT should contain items of the form key=value; '\n                \"'{}' doesn't match that form\".format(s)\n            )\n\n    # Convert tuple -- e.g.: (u'program_name=foobar', u'startsecs=66')\n    # to dict -- e.g.: {'program_name': 'foobar', 'startsecs': '66'}\n    return dict(s.split('=', 1) for s in value) or None\n\n\n@click.command(context_settings=dict(help_option_names=[u'-h', u'--help']))\n@click.version_option(__version__, u'-V', u'--version', message=version_msg())\n@click.argument(u'template')\n@click.argument(u'extra_context', nargs=-1, callback=validate_extra_context)\n@click.option(\n    u'--no-input', is_flag=True,\n    help=u'Do not prompt for parameters and only use cookiecutter.json '\n         u'file content',\n)\n@click.option(\n    u'-c', u'--checkout',\n    help=u'branch, tag or commit to checkout after git clone',\n)\n@click.option(\n    '-v', '--verbose',\n    is_flag=True, help='Print debug information', default=False\n)\n@click.option(\n    u'--replay', is_flag=True,\n    help=u'Do not prompt for parameters and only use information entered '\n         u'previously',\n)\n@click.option(\n    u'-f', u'--overwrite-if-exists', is_flag=True,\n    help=u'Overwrite the contents of the output directory if it already exists'\n)\n@click.option(\n    u'-o', u'--output-dir', default='.', type=click.Path(),\n    help=u'Where to output the generated project dir into'\n)\n@click.option(\n    u'--config-file', type=click.Path(), default=None,\n    help=u'User configuration file'\n)\n@click.option(\n    u'--default-config', is_flag=True,\n    help=u'Do not load a config file. Use the defaults instead'\n)\n@click.option(\n    u'--debug-file', type=click.Path(), default=None,\n    help=u'File to be used as a stream for DEBUG logging',\n)\ndef main(\n        template, extra_context, no_input, checkout, verbose,\n        replay, overwrite_if_exists, output_dir, config_file,\n        default_config, debug_file):\n    \"\"\"Create a project from a Cookiecutter project template (TEMPLATE).\n\n    Cookiecutter is free and open source software, developed and managed by\n    volunteers. If you would like to help out or fund the project, please get\n    in touch at https://github.com/audreyr/cookiecutter.\n    \"\"\"\n    # If you _need_ to support a local template in a directory\n    # called 'help', use a qualified path to the directory.\n    if template == u'help':\n        click.echo(click.get_current_context().get_help())\n        sys.exit(0)\n\n    configure_logger(\n        stream_level='DEBUG' if verbose else 'INFO',\n        debug_file=debug_file,\n    )\n\n    try:\n        cookiecutter(\n            template, checkout, no_input,\n            extra_context=extra_context,\n            replay=replay,\n            overwrite_if_exists=overwrite_if_exists,\n            output_dir=output_dir,\n            config_file=config_file,\n            default_config=default_config,\n            password=os.environ.get('COOKIECUTTER_REPO_PASSWORD')\n        )\n    except (OutputDirExistsException,\n            InvalidModeException,\n            FailedHookException,\n            UnknownExtension,\n            InvalidZipRepository,\n            RepositoryNotFound,\n            RepositoryCloneFailed) as e:\n        click.echo(e)\n        sys.exit(1)\n    except UndefinedVariableInTemplate as undefined_err:\n        click.echo('{}'.format(undefined_err.message))\n        click.echo('Error message: {}'.format(undefined_err.error.message))\n\n        context_str = json.dumps(\n            undefined_err.context,\n            indent=4,\n            sort_keys=True\n        )\n        click.echo('Context: {}'.format(context_str))\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n", "description": "A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.", "file_name": "cli.py", "id": "c5d691ffcc1ddb4842edf065d29d4f5e", "language": "Python", "project_name": "cookiecutter", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/audreyr-cookiecutter/audreyr-cookiecutter-7154cf2/cookiecutter/cli.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:52:22Z", "url": "https://github.com/audreyr/cookiecutter", "wiki": true}