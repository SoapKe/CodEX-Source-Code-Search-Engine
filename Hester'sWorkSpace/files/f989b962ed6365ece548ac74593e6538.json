{"author": "deepfakes", "code": "# Based on the original https://www.reddit.com/r/deepfakes/ code sample + contribs\n\nimport cv2\nimport numpy as np\n\nfrom lib.aligner import get_align_mat\nfrom lib.align_eyes import FACIAL_LANDMARKS_IDXS\n\nclass Extract(object):\n    def extract(self, image, face, size, align_eyes):\n        alignment = get_align_mat(face, size, align_eyes)\n        extracted = self.transform(image, alignment, size, 48)\n        return extracted, alignment\n\n    def transform(self, image, mat, size, padding=0):\n        matrix = mat * (size - 2 * padding)\n        matrix[:,2] += padding\n        return cv2.warpAffine(image, matrix, (size, size))\n\n    def transform_points(self, points, mat, size, padding=0):\n        matrix = mat * (size - 2 * padding)\n        matrix[:,2] += padding\n        points = np.expand_dims(points, axis=1)\n        points = cv2.transform(points, matrix, points.shape)\n        points = np.squeeze(points)\n        return points\n\n    def get_feature_mask(self, aligned_landmarks_68, size, padding=0, dilation=30):\n        scale = size - 2*padding\n        translation = padding\n        pad_mat = np.matrix([[scale, 0.0, translation], [0.0, scale, translation]])\n        aligned_landmarks_68 = np.expand_dims(aligned_landmarks_68, axis=1)\n        aligned_landmarks_68 = cv2.transform(aligned_landmarks_68, pad_mat, aligned_landmarks_68.shape)\n        aligned_landmarks_68 = np.squeeze(aligned_landmarks_68)\n\n        (lStart, lEnd) = FACIAL_LANDMARKS_IDXS[\"left_eye\"]\n        (rStart, rEnd) = FACIAL_LANDMARKS_IDXS[\"right_eye\"]\n        (mStart, mEnd) = FACIAL_LANDMARKS_IDXS[\"mouth\"]\n        (nStart, nEnd) = FACIAL_LANDMARKS_IDXS[\"nose\"]\n        (lbStart, lbEnd) = FACIAL_LANDMARKS_IDXS[\"left_eyebrow\"]\n        (rbStart, rbEnd) = FACIAL_LANDMARKS_IDXS[\"right_eyebrow\"]\n        (cStart, cEnd) = FACIAL_LANDMARKS_IDXS[\"chin\"]\n\n        l_eye_points = aligned_landmarks_68[lStart:lEnd].tolist()\n        l_brow_points = aligned_landmarks_68[lbStart:lbEnd].tolist()\n        r_eye_points = aligned_landmarks_68[rStart:rEnd].tolist()\n        r_brow_points = aligned_landmarks_68[rbStart:rbEnd].tolist()\n        nose_points = aligned_landmarks_68[nStart:nEnd].tolist()\n        chin_points = aligned_landmarks_68[cStart:cEnd].tolist()\n        mouth_points = aligned_landmarks_68[mStart:mEnd].tolist()\n        l_eye_points = l_eye_points + l_brow_points\n        r_eye_points = r_eye_points + r_brow_points\n        mouth_points = mouth_points + nose_points + chin_points\n\n        l_eye_hull = cv2.convexHull(np.array(l_eye_points).reshape((-1, 2)).astype(int)).flatten().reshape((-1, 2))\n        r_eye_hull = cv2.convexHull(np.array(r_eye_points).reshape((-1, 2)).astype(int)).flatten().reshape((-1, 2))\n        mouth_hull = cv2.convexHull(np.array(mouth_points).reshape((-1, 2)).astype(int)).flatten().reshape((-1, 2))\n\n        mask = np.zeros((size, size, 3), dtype=float)\n        cv2.fillConvexPoly(mask, l_eye_hull, (1,1,1))\n        cv2.fillConvexPoly(mask, r_eye_hull, (1,1,1))\n        cv2.fillConvexPoly(mask, mouth_hull, (1,1,1))\n\n        if dilation > 0:\n            kernel = np.ones((dilation, dilation), np.uint8)\n            mask = cv2.dilate(mask, kernel, iterations=1)\n\n        return mask\n", "comments": "  based original https   www reddit com r deepfakes  code sample   contribs ", "content": "# Based on the original https://www.reddit.com/r/deepfakes/ code sample + contribs\n\nimport cv2\nimport numpy as np\n\nfrom lib.aligner import get_align_mat\nfrom lib.align_eyes import FACIAL_LANDMARKS_IDXS\n\nclass Extract(object):\n    def extract(self, image, face, size, align_eyes):\n        alignment = get_align_mat(face, size, align_eyes)\n        extracted = self.transform(image, alignment, size, 48)\n        return extracted, alignment\n\n    def transform(self, image, mat, size, padding=0):\n        matrix = mat * (size - 2 * padding)\n        matrix[:,2] += padding\n        return cv2.warpAffine(image, matrix, (size, size))\n\n    def transform_points(self, points, mat, size, padding=0):\n        matrix = mat * (size - 2 * padding)\n        matrix[:,2] += padding\n        points = np.expand_dims(points, axis=1)\n        points = cv2.transform(points, matrix, points.shape)\n        points = np.squeeze(points)\n        return points\n\n    def get_feature_mask(self, aligned_landmarks_68, size, padding=0, dilation=30):\n        scale = size - 2*padding\n        translation = padding\n        pad_mat = np.matrix([[scale, 0.0, translation], [0.0, scale, translation]])\n        aligned_landmarks_68 = np.expand_dims(aligned_landmarks_68, axis=1)\n        aligned_landmarks_68 = cv2.transform(aligned_landmarks_68, pad_mat, aligned_landmarks_68.shape)\n        aligned_landmarks_68 = np.squeeze(aligned_landmarks_68)\n\n        (lStart, lEnd) = FACIAL_LANDMARKS_IDXS[\"left_eye\"]\n        (rStart, rEnd) = FACIAL_LANDMARKS_IDXS[\"right_eye\"]\n        (mStart, mEnd) = FACIAL_LANDMARKS_IDXS[\"mouth\"]\n        (nStart, nEnd) = FACIAL_LANDMARKS_IDXS[\"nose\"]\n        (lbStart, lbEnd) = FACIAL_LANDMARKS_IDXS[\"left_eyebrow\"]\n        (rbStart, rbEnd) = FACIAL_LANDMARKS_IDXS[\"right_eyebrow\"]\n        (cStart, cEnd) = FACIAL_LANDMARKS_IDXS[\"chin\"]\n\n        l_eye_points = aligned_landmarks_68[lStart:lEnd].tolist()\n        l_brow_points = aligned_landmarks_68[lbStart:lbEnd].tolist()\n        r_eye_points = aligned_landmarks_68[rStart:rEnd].tolist()\n        r_brow_points = aligned_landmarks_68[rbStart:rbEnd].tolist()\n        nose_points = aligned_landmarks_68[nStart:nEnd].tolist()\n        chin_points = aligned_landmarks_68[cStart:cEnd].tolist()\n        mouth_points = aligned_landmarks_68[mStart:mEnd].tolist()\n        l_eye_points = l_eye_points + l_brow_points\n        r_eye_points = r_eye_points + r_brow_points\n        mouth_points = mouth_points + nose_points + chin_points\n\n        l_eye_hull = cv2.convexHull(np.array(l_eye_points).reshape((-1, 2)).astype(int)).flatten().reshape((-1, 2))\n        r_eye_hull = cv2.convexHull(np.array(r_eye_points).reshape((-1, 2)).astype(int)).flatten().reshape((-1, 2))\n        mouth_hull = cv2.convexHull(np.array(mouth_points).reshape((-1, 2)).astype(int)).flatten().reshape((-1, 2))\n\n        mask = np.zeros((size, size, 3), dtype=float)\n        cv2.fillConvexPoly(mask, l_eye_hull, (1,1,1))\n        cv2.fillConvexPoly(mask, r_eye_hull, (1,1,1))\n        cv2.fillConvexPoly(mask, mouth_hull, (1,1,1))\n\n        if dilation > 0:\n            kernel = np.ones((dilation, dilation), np.uint8)\n            mask = cv2.dilate(mask, kernel, iterations=1)\n\n        return mask\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "Extract_Align.py", "id": "f989b962ed6365ece548ac74593e6538", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/plugins/Extract_Align.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}