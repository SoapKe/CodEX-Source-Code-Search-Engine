{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .mtv import MTVServicesInfoExtractor\nfrom ..utils import update_url_query\n\n\nclass NickIE(MTVServicesInfoExtractor):\n    \n    IE_NAME = 'nick.com'\n    _VALID_URL = r'https?://(?P<domain>(?:(?:www|beta)\\.)?nick(?:jr)?\\.com)/(?:[^/]+/)?(?:videos/clip|[^/]+/videos)/(?P<id>[^/?\n    _FEED_URL = 'http://udat.mtvnservices.com/service1/dispatch.htm'\n    _GEO_COUNTRIES = ['US']\n    _TESTS = [{\n        'url': 'http://www.nick.com/videos/clip/alvinnn-and-the-chipmunks-112-full-episode.html',\n        'playlist': [\n            {\n                'md5': '6e5adc1e28253bbb1b28ab05403dd4d4',\n                'info_dict': {\n                    'id': 'be6a17b0-412d-11e5-8ff7-0026b9414f30',\n                    'ext': 'mp4',\n                    'title': 'ALVINNN!!! and The Chipmunks: \"Mojo Missing/Who\\'s The Animal\" S1',\n                    'description': 'Alvin is convinced his mojo was in a cap he gave to a fan, and must find a way to get his hat back before the Chipmunks\u2019 big concert.\\nDuring a costume visit to the zoo, Alvin finds himself mistaken for the real Tasmanian devil.',\n\n                }\n            },\n            {\n                'md5': 'd7be441fc53a1d4882fa9508a1e5b3ce',\n                'info_dict': {\n                    'id': 'be6b8f96-412d-11e5-8ff7-0026b9414f30',\n                    'ext': 'mp4',\n                    'title': 'ALVINNN!!! and The Chipmunks: \"Mojo Missing/Who\\'s The Animal\" S2',\n                    'description': 'Alvin is convinced his mojo was in a cap he gave to a fan, and must find a way to get his hat back before the Chipmunks\u2019 big concert.\\nDuring a costume visit to the zoo, Alvin finds himself mistaken for the real Tasmanian devil.',\n\n                }\n            },\n            {\n                'md5': 'efffe1728a234b2b0d2f2b343dd1946f',\n                'info_dict': {\n                    'id': 'be6cf7e6-412d-11e5-8ff7-0026b9414f30',\n                    'ext': 'mp4',\n                    'title': 'ALVINNN!!! and The Chipmunks: \"Mojo Missing/Who\\'s The Animal\" S3',\n                    'description': 'Alvin is convinced his mojo was in a cap he gave to a fan, and must find a way to get his hat back before the Chipmunks\u2019 big concert.\\nDuring a costume visit to the zoo, Alvin finds himself mistaken for the real Tasmanian devil.',\n                }\n            },\n            {\n                'md5': '1ec6690733ab9f41709e274a1d5c7556',\n                'info_dict': {\n                    'id': 'be6e3354-412d-11e5-8ff7-0026b9414f30',\n                    'ext': 'mp4',\n                    'title': 'ALVINNN!!! and The Chipmunks: \"Mojo Missing/Who\\'s The Animal\" S4',\n                    'description': 'Alvin is convinced his mojo was in a cap he gave to a fan, and must find a way to get his hat back before the Chipmunks\u2019 big concert.\\nDuring a costume visit to the zoo, Alvin finds himself mistaken for the real Tasmanian devil.',\n                }\n            },\n        ],\n    }, {\n        'url': 'http://www.nickjr.com/paw-patrol/videos/pups-save-a-goldrush-s3-ep302-full-episode/',\n        'only_matching': True,\n    }, {\n        'url': 'http://beta.nick.com/nicky-ricky-dicky-and-dawn/videos/nicky-ricky-dicky-dawn-301-full-episode/',\n        'only_matching': True,\n    }]\n\n    def _get_feed_query(self, uri):\n        return {\n            'feed': 'nick_arc_player_prime',\n            'mgid': uri,\n        }\n\n    def _real_extract(self, url):\n        domain, display_id = re.match(self._VALID_URL, url).groups()\n        video_data = self._download_json(\n            'http://%s/data/video.endLevel.json' % domain,\n            display_id, query={\n                'urlKey': display_id,\n            })\n        return self._get_videos_info(video_data['player'] + video_data['id'])\n\n\nclass NickBrIE(MTVServicesInfoExtractor):\n    IE_NAME = 'nickelodeon:br'\n    _VALID_URL = r'https?://(?P<domain>(?:www\\.)?nickjr|mundonick\\.uol)\\.com\\.br/(?:programas/)?[^/]+/videos/(?:episodios/)?(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.nickjr.com.br/patrulha-canina/videos/210-labirinto-de-pipoca/',\n        'only_matching': True,\n    }, {\n        'url': 'http://mundonick.uol.com.br/programas/the-loud-house/videos/muitas-irmas/7ljo9j',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        domain, display_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, display_id)\n        uri = self._search_regex(\n            r'data-(?:contenturi|mgid)=\"([^\"]+)', webpage, 'mgid')\n        video_id = self._id_from_uri(uri)\n        config = self._download_json(\n            'http://media.mtvnservices.com/pmt/e1/access/index.html',\n            video_id, query={\n                'uri': uri,\n                'configtype': 'edge',\n            }, headers={\n                'Referer': url,\n            })\n        info_url = self._remove_template_parameter(config['feedWithQueryParams'])\n        if info_url == 'None':\n            if domain.startswith('www.'):\n                domain = domain[4:]\n            content_domain = {\n                'mundonick.uol': 'mundonick.com.br',\n                'nickjr': 'br.nickelodeonjunior.tv',\n            }[domain]\n            query = {\n                'mgid': uri,\n                'imageEp': content_domain,\n                'arcEp': content_domain,\n            }\n            if domain == 'nickjr.com.br':\n                query['ep'] = 'c4b16088'\n            info_url = update_url_query(\n                'http://feeds.mtvnservices.com/od/feed/intl-mrss-player-feed', query)\n        return self._get_videos_info_from_url(info_url, video_id)\n\n\nclass NickDeIE(MTVServicesInfoExtractor):\n    IE_NAME = 'nick.de'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<host>nick\\.(?:de|com\\.pl|ch)|nickelodeon\\.(?:nl|be|at|dk|no|se))/[^/]+/(?:[^/]+/)*(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.nick.de/playlist/3773-top-videos/videos/episode/17306-zu-wasser-und-zu-land-rauchende-erdnusse',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nick.de/shows/342-icarly',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.nl/shows/474-spongebob/videos/17403-een-kijkje-in-de-keuken-met-sandy-van-binnenuit',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.at/playlist/3773-top-videos/videos/episode/77993-das-letzte-gefecht',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nick.com.pl/seriale/474-spongebob-kanciastoporty/wideo/17412-teatr-to-jest-to-rodeo-oszolom',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.no/program/2626-bulderhuset/videoer/90947-femteklasse-veronica-vs-vanzilla',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.dk/serier/2626-hojs-hus/videoer/761-tissepause',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.se/serier/2626-lugn-i-stormen/videos/998-',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nick.ch/shows/2304-adventure-time-abenteuerzeit-mit-finn-und-jake',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.be/afspeellijst/4530-top-videos/videos/episode/73917-inval-broodschapper-lariekoek-arie',\n        'only_matching': True,\n    }]\n\n    def _extract_mrss_url(self, webpage, host):\n        return update_url_query(self._search_regex(\n            r'data-mrss=([\"\\'])(?P<url>http.+?)\\1', webpage, 'mrss url', group='url'),\n            {'siteKey': host})\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        host = mobj.group('host')\n\n        webpage = self._download_webpage(url, video_id)\n\n        mrss_url = self._extract_mrss_url(webpage, host)\n\n        return self._get_videos_info_from_url(mrss_url, video_id)\n\n\nclass NickNightIE(NickDeIE):\n    IE_NAME = 'nicknight'\n    _VALID_URL = r'https?://(?:www\\.)(?P<host>nicknight\\.(?:de|at|tv))/(?:playlist|shows)/(?:[^/]+/)*(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.nicknight.at/shows/977-awkward/videos/85987-nimmer-beste-freunde',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nicknight.at/shows/977-awkward',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nicknight.at/shows/1900-faking-it',\n        'only_matching': True,\n    }]\n\n    def _extract_mrss_url(self, webpage, *args):\n        return self._search_regex(\n            r'mrss\\s*:\\s*([\"\\'])(?P<url>http.+?)\\1', webpage,\n            'mrss url', group='url')\n\n\nclass NickRuIE(MTVServicesInfoExtractor):\n    IE_NAME = 'nickelodeonru'\n    _VALID_URL = r'https?://(?:www\\.)nickelodeon\\.(?:ru|fr|es|pt|ro|hu|com\\.tr)/[^/]+/(?:[^/]+/)*(?P<id>[^/?\n    _TESTS = [{\n        'url': 'http://www.nickelodeon.ru/shows/henrydanger/videos/episodes/3-sezon-15-seriya-licenziya-na-polyot/pmomfb\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.ru/videos/smotri-na-nickelodeon-v-iyule/g9hvh7',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.fr/programmes/bob-l-eponge/videos/le-marathon-de-booh-kini-bottom-mardi-31-octobre/nfn7z0',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.es/videos/nickelodeon-consejos-tortitas/f7w7xy',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.pt/series/spongebob-squarepants/videos/a-bolha-de-tinta-gigante/xutq1b',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.ro/emisiuni/shimmer-si-shine/video/nahal-din-bomboane/uw5u2k',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.hu/musorok/spongyabob-kockanadrag/videok/episodes/buborekfujas-az-elszakadt-nadrag/q57iob\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.com.tr/programlar/sunger-bob/videolar/kayip-yatak/mgqbjy',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        mgid = self._extract_mgid(webpage)\n        return self.url_result('http://media.mtvnservices.com/embed/%s' % mgid)\n", "comments": "# coding: utf-8\n# None of videos on the website are still alive?\n#.]+)'\n#.]+)'\n#&]+)'\n#&]+)'\n#&]+)'\n#playlist/7airc6',\n#playlist/k6te4y',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .mtv import MTVServicesInfoExtractor\nfrom ..utils import update_url_query\n\n\nclass NickIE(MTVServicesInfoExtractor):\n    # None of videos on the website are still alive?\n    IE_NAME = 'nick.com'\n    _VALID_URL = r'https?://(?P<domain>(?:(?:www|beta)\\.)?nick(?:jr)?\\.com)/(?:[^/]+/)?(?:videos/clip|[^/]+/videos)/(?P<id>[^/?#.]+)'\n    _FEED_URL = 'http://udat.mtvnservices.com/service1/dispatch.htm'\n    _GEO_COUNTRIES = ['US']\n    _TESTS = [{\n        'url': 'http://www.nick.com/videos/clip/alvinnn-and-the-chipmunks-112-full-episode.html',\n        'playlist': [\n            {\n                'md5': '6e5adc1e28253bbb1b28ab05403dd4d4',\n                'info_dict': {\n                    'id': 'be6a17b0-412d-11e5-8ff7-0026b9414f30',\n                    'ext': 'mp4',\n                    'title': 'ALVINNN!!! and The Chipmunks: \"Mojo Missing/Who\\'s The Animal\" S1',\n                    'description': 'Alvin is convinced his mojo was in a cap he gave to a fan, and must find a way to get his hat back before the Chipmunks\u2019 big concert.\\nDuring a costume visit to the zoo, Alvin finds himself mistaken for the real Tasmanian devil.',\n\n                }\n            },\n            {\n                'md5': 'd7be441fc53a1d4882fa9508a1e5b3ce',\n                'info_dict': {\n                    'id': 'be6b8f96-412d-11e5-8ff7-0026b9414f30',\n                    'ext': 'mp4',\n                    'title': 'ALVINNN!!! and The Chipmunks: \"Mojo Missing/Who\\'s The Animal\" S2',\n                    'description': 'Alvin is convinced his mojo was in a cap he gave to a fan, and must find a way to get his hat back before the Chipmunks\u2019 big concert.\\nDuring a costume visit to the zoo, Alvin finds himself mistaken for the real Tasmanian devil.',\n\n                }\n            },\n            {\n                'md5': 'efffe1728a234b2b0d2f2b343dd1946f',\n                'info_dict': {\n                    'id': 'be6cf7e6-412d-11e5-8ff7-0026b9414f30',\n                    'ext': 'mp4',\n                    'title': 'ALVINNN!!! and The Chipmunks: \"Mojo Missing/Who\\'s The Animal\" S3',\n                    'description': 'Alvin is convinced his mojo was in a cap he gave to a fan, and must find a way to get his hat back before the Chipmunks\u2019 big concert.\\nDuring a costume visit to the zoo, Alvin finds himself mistaken for the real Tasmanian devil.',\n                }\n            },\n            {\n                'md5': '1ec6690733ab9f41709e274a1d5c7556',\n                'info_dict': {\n                    'id': 'be6e3354-412d-11e5-8ff7-0026b9414f30',\n                    'ext': 'mp4',\n                    'title': 'ALVINNN!!! and The Chipmunks: \"Mojo Missing/Who\\'s The Animal\" S4',\n                    'description': 'Alvin is convinced his mojo was in a cap he gave to a fan, and must find a way to get his hat back before the Chipmunks\u2019 big concert.\\nDuring a costume visit to the zoo, Alvin finds himself mistaken for the real Tasmanian devil.',\n                }\n            },\n        ],\n    }, {\n        'url': 'http://www.nickjr.com/paw-patrol/videos/pups-save-a-goldrush-s3-ep302-full-episode/',\n        'only_matching': True,\n    }, {\n        'url': 'http://beta.nick.com/nicky-ricky-dicky-and-dawn/videos/nicky-ricky-dicky-dawn-301-full-episode/',\n        'only_matching': True,\n    }]\n\n    def _get_feed_query(self, uri):\n        return {\n            'feed': 'nick_arc_player_prime',\n            'mgid': uri,\n        }\n\n    def _real_extract(self, url):\n        domain, display_id = re.match(self._VALID_URL, url).groups()\n        video_data = self._download_json(\n            'http://%s/data/video.endLevel.json' % domain,\n            display_id, query={\n                'urlKey': display_id,\n            })\n        return self._get_videos_info(video_data['player'] + video_data['id'])\n\n\nclass NickBrIE(MTVServicesInfoExtractor):\n    IE_NAME = 'nickelodeon:br'\n    _VALID_URL = r'https?://(?P<domain>(?:www\\.)?nickjr|mundonick\\.uol)\\.com\\.br/(?:programas/)?[^/]+/videos/(?:episodios/)?(?P<id>[^/?#.]+)'\n    _TESTS = [{\n        'url': 'http://www.nickjr.com.br/patrulha-canina/videos/210-labirinto-de-pipoca/',\n        'only_matching': True,\n    }, {\n        'url': 'http://mundonick.uol.com.br/programas/the-loud-house/videos/muitas-irmas/7ljo9j',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        domain, display_id = re.match(self._VALID_URL, url).groups()\n        webpage = self._download_webpage(url, display_id)\n        uri = self._search_regex(\n            r'data-(?:contenturi|mgid)=\"([^\"]+)', webpage, 'mgid')\n        video_id = self._id_from_uri(uri)\n        config = self._download_json(\n            'http://media.mtvnservices.com/pmt/e1/access/index.html',\n            video_id, query={\n                'uri': uri,\n                'configtype': 'edge',\n            }, headers={\n                'Referer': url,\n            })\n        info_url = self._remove_template_parameter(config['feedWithQueryParams'])\n        if info_url == 'None':\n            if domain.startswith('www.'):\n                domain = domain[4:]\n            content_domain = {\n                'mundonick.uol': 'mundonick.com.br',\n                'nickjr': 'br.nickelodeonjunior.tv',\n            }[domain]\n            query = {\n                'mgid': uri,\n                'imageEp': content_domain,\n                'arcEp': content_domain,\n            }\n            if domain == 'nickjr.com.br':\n                query['ep'] = 'c4b16088'\n            info_url = update_url_query(\n                'http://feeds.mtvnservices.com/od/feed/intl-mrss-player-feed', query)\n        return self._get_videos_info_from_url(info_url, video_id)\n\n\nclass NickDeIE(MTVServicesInfoExtractor):\n    IE_NAME = 'nick.de'\n    _VALID_URL = r'https?://(?:www\\.)?(?P<host>nick\\.(?:de|com\\.pl|ch)|nickelodeon\\.(?:nl|be|at|dk|no|se))/[^/]+/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.nick.de/playlist/3773-top-videos/videos/episode/17306-zu-wasser-und-zu-land-rauchende-erdnusse',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nick.de/shows/342-icarly',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.nl/shows/474-spongebob/videos/17403-een-kijkje-in-de-keuken-met-sandy-van-binnenuit',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.at/playlist/3773-top-videos/videos/episode/77993-das-letzte-gefecht',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nick.com.pl/seriale/474-spongebob-kanciastoporty/wideo/17412-teatr-to-jest-to-rodeo-oszolom',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.no/program/2626-bulderhuset/videoer/90947-femteklasse-veronica-vs-vanzilla',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.dk/serier/2626-hojs-hus/videoer/761-tissepause',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.se/serier/2626-lugn-i-stormen/videos/998-',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nick.ch/shows/2304-adventure-time-abenteuerzeit-mit-finn-und-jake',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.be/afspeellijst/4530-top-videos/videos/episode/73917-inval-broodschapper-lariekoek-arie',\n        'only_matching': True,\n    }]\n\n    def _extract_mrss_url(self, webpage, host):\n        return update_url_query(self._search_regex(\n            r'data-mrss=([\"\\'])(?P<url>http.+?)\\1', webpage, 'mrss url', group='url'),\n            {'siteKey': host})\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        host = mobj.group('host')\n\n        webpage = self._download_webpage(url, video_id)\n\n        mrss_url = self._extract_mrss_url(webpage, host)\n\n        return self._get_videos_info_from_url(mrss_url, video_id)\n\n\nclass NickNightIE(NickDeIE):\n    IE_NAME = 'nicknight'\n    _VALID_URL = r'https?://(?:www\\.)(?P<host>nicknight\\.(?:de|at|tv))/(?:playlist|shows)/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.nicknight.at/shows/977-awkward/videos/85987-nimmer-beste-freunde',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nicknight.at/shows/977-awkward',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nicknight.at/shows/1900-faking-it',\n        'only_matching': True,\n    }]\n\n    def _extract_mrss_url(self, webpage, *args):\n        return self._search_regex(\n            r'mrss\\s*:\\s*([\"\\'])(?P<url>http.+?)\\1', webpage,\n            'mrss url', group='url')\n\n\nclass NickRuIE(MTVServicesInfoExtractor):\n    IE_NAME = 'nickelodeonru'\n    _VALID_URL = r'https?://(?:www\\.)nickelodeon\\.(?:ru|fr|es|pt|ro|hu|com\\.tr)/[^/]+/(?:[^/]+/)*(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'http://www.nickelodeon.ru/shows/henrydanger/videos/episodes/3-sezon-15-seriya-licenziya-na-polyot/pmomfb#playlist/7airc6',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.ru/videos/smotri-na-nickelodeon-v-iyule/g9hvh7',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.fr/programmes/bob-l-eponge/videos/le-marathon-de-booh-kini-bottom-mardi-31-octobre/nfn7z0',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.es/videos/nickelodeon-consejos-tortitas/f7w7xy',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.pt/series/spongebob-squarepants/videos/a-bolha-de-tinta-gigante/xutq1b',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.ro/emisiuni/shimmer-si-shine/video/nahal-din-bomboane/uw5u2k',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.hu/musorok/spongyabob-kockanadrag/videok/episodes/buborekfujas-az-elszakadt-nadrag/q57iob#playlist/k6te4y',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.nickelodeon.com.tr/programlar/sunger-bob/videolar/kayip-yatak/mgqbjy',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n        mgid = self._extract_mgid(webpage)\n        return self.url_result('http://media.mtvnservices.com/embed/%s' % mgid)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nick.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nick.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}