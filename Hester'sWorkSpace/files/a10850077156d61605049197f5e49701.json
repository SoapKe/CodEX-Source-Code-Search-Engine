{"author": "mopidy", "code": "from __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nfrom mopidy import exceptions\n\n\nclass ExceptionsTest(unittest.TestCase):\n\n    def test_exception_can_include_message_string(self):\n        exc = exceptions.MopidyException('foo')\n\n        self.assertEqual(exc.message, 'foo')\n        self.assertEqual(str(exc), 'foo')\n\n    def test_backend_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.BackendError, exceptions.MopidyException))\n\n    def test_extension_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.ExtensionError, exceptions.MopidyException))\n\n    def test_find_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.FindError, exceptions.MopidyException))\n\n    def test_find_error_can_store_an_errno(self):\n        exc = exceptions.FindError('msg', errno=1234)\n\n        self.assertEqual(exc.message, 'msg')\n        self.assertEqual(exc.errno, 1234)\n\n    def test_frontend_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.FrontendError, exceptions.MopidyException))\n\n    def test_mixer_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.MixerError, exceptions.MopidyException))\n\n    def test_scanner_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.ScannerError, exceptions.MopidyException))\n\n    def test_audio_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.AudioException, exceptions.MopidyException))\n", "comments": "", "content": "from __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nfrom mopidy import exceptions\n\n\nclass ExceptionsTest(unittest.TestCase):\n\n    def test_exception_can_include_message_string(self):\n        exc = exceptions.MopidyException('foo')\n\n        self.assertEqual(exc.message, 'foo')\n        self.assertEqual(str(exc), 'foo')\n\n    def test_backend_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.BackendError, exceptions.MopidyException))\n\n    def test_extension_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.ExtensionError, exceptions.MopidyException))\n\n    def test_find_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.FindError, exceptions.MopidyException))\n\n    def test_find_error_can_store_an_errno(self):\n        exc = exceptions.FindError('msg', errno=1234)\n\n        self.assertEqual(exc.message, 'msg')\n        self.assertEqual(exc.errno, 1234)\n\n    def test_frontend_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.FrontendError, exceptions.MopidyException))\n\n    def test_mixer_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.MixerError, exceptions.MopidyException))\n\n    def test_scanner_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.ScannerError, exceptions.MopidyException))\n\n    def test_audio_error_is_a_mopidy_exception(self):\n        self.assert_(issubclass(\n            exceptions.AudioException, exceptions.MopidyException))\n", "description": "Mopidy is an extensible music server that plays music from local disk, Spotify, SoundCloud, Google Play Music, and more. You edit the playlist from any phone, tablet, or computer using a range of MPD and web clients.", "file_name": "test_exceptions.py", "id": "a10850077156d61605049197f5e49701", "language": "Python", "project_name": "mopidy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mopidy-mopidy/mopidy-mopidy-79d42c3/tests/test_exceptions.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:12:51Z", "url": "https://github.com/mopidy/mopidy", "wiki": false}