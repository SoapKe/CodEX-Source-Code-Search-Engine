{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.product.tests import common\n\n\nclass TestStockCommon(common.TestProductCommon):\n\n    def _create_pack_operation(self, product, product_qty, picking_id, **values):\n        PackOperation = self.env['stock.move.line'].sudo(self.user_stock_manager)\n        vals = {\n            'picking_id': picking_id.id,\n            'product_id': product.id,\n            'product_qty': product_qty,\n            'qty_done': product_qty}\n        vals.update(**values)\n        pack_operation = PackOperation.new(vals)\n        pack_operation.onchange_product_id()\n        return PackOperation.create(pack_operation._convert_to_write(pack_operation._cache))\n\n    def _create_picking_in(self, warehouse):\n        Picking = self.env['stock.picking']\n        picking_values = {\n            'picking_type_id': warehouse.in_type_id.id,\n            'location_id': self.env.ref('stock.stock_location_suppliers').id,\n            'location_dest_id': warehouse.lot_stock_id.id,\n        }\n        return Picking.create(picking_values)\n\n    def _create_move(self, product, src_location, dst_location, **values):\n        \n        Move = self.env['stock.move'].sudo(self.user_stock_manager)\n        # simulate create + onchange\n        move = Move.new({'product_id': product.id, 'location_id': src_location.id, 'location_dest_id': dst_location.id})\n        move.onchange_product_id()\n        move_values = move._convert_to_write(move._cache)\n        move_values.update(**values)\n        return Move.create(move_values)\n\n    def _create_move_in(self, product, warehouse, picking=None, create_picking=False, **values):\n        if not picking and create_picking:\n            picking = self._create_picking_in(warehouse)\n        if picking:\n            values['picking_id'] = picking.id\n         ??\n        return self._create_move(product, self.env.ref('stock.stock_location_suppliers'), warehouse.lot_stock_id, **values)\n\n    @classmethod\n    def setUpClass(cls):\n        super(TestStockCommon, cls).setUpClass()\n\n        \n        user_group_employee = cls.env.ref('base.group_user')\n        user_group_stock_user = cls.env.ref('stock.group_stock_user')\n        user_group_stock_manager = cls.env.ref('stock.group_stock_manager')\n\n        \n        Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n        cls.user_stock_user = Users.create({\n            'name': 'Pauline Poivraisselle',\n            'login': 'pauline',\n            'email': 'p.p@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [user_group_stock_user.id])]})\n        cls.user_stock_manager = Users.create({\n            'name': 'Julie Tablier',\n            'login': 'julie',\n            'email': 'j.j@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [user_group_stock_manager.id])]})\n\n        \n        cls.warehouse_1 = cls.env['stock.warehouse'].create({\n            'name': 'Base Warehouse',\n            'reception_steps': 'one_step',\n            'delivery_steps': 'ship_only',\n            'code': 'BWH'})\n\n        \n        cls.location_1 = cls.env['stock.location'].create({\n            'name': 'TestLocation1',\n            'posx': 3,\n            'location_id': cls.warehouse_1.lot_stock_id.id,\n        })\n\n        \n        cls.existing_inventories = cls.env['stock.inventory'].search([])\n        cls.existing_quants = cls.env['stock.quant'].search([])\n", "comments": "      coding  utf 8        tde fixme  user parameter    simulate create   onchange    tde fixme  location come picking       fetch stock related user groups    user data  stock user stock manager    warehouses    locations    existing data ", "content": "# -*- coding: utf-8 -*-\n\nfrom odoo.addons.product.tests import common\n\n\nclass TestStockCommon(common.TestProductCommon):\n\n    def _create_pack_operation(self, product, product_qty, picking_id, **values):\n        PackOperation = self.env['stock.move.line'].sudo(self.user_stock_manager)\n        vals = {\n            'picking_id': picking_id.id,\n            'product_id': product.id,\n            'product_qty': product_qty,\n            'qty_done': product_qty}\n        vals.update(**values)\n        pack_operation = PackOperation.new(vals)\n        pack_operation.onchange_product_id()\n        return PackOperation.create(pack_operation._convert_to_write(pack_operation._cache))\n\n    def _create_picking_in(self, warehouse):\n        Picking = self.env['stock.picking']\n        picking_values = {\n            'picking_type_id': warehouse.in_type_id.id,\n            'location_id': self.env.ref('stock.stock_location_suppliers').id,\n            'location_dest_id': warehouse.lot_stock_id.id,\n        }\n        return Picking.create(picking_values)\n\n    def _create_move(self, product, src_location, dst_location, **values):\n        # TDE FIXME: user as parameter\n        Move = self.env['stock.move'].sudo(self.user_stock_manager)\n        # simulate create + onchange\n        move = Move.new({'product_id': product.id, 'location_id': src_location.id, 'location_dest_id': dst_location.id})\n        move.onchange_product_id()\n        move_values = move._convert_to_write(move._cache)\n        move_values.update(**values)\n        return Move.create(move_values)\n\n    def _create_move_in(self, product, warehouse, picking=None, create_picking=False, **values):\n        if not picking and create_picking:\n            picking = self._create_picking_in(warehouse)\n        if picking:\n            values['picking_id'] = picking.id\n        # TDE FIXME: shouldn't location come from picking ??\n        return self._create_move(product, self.env.ref('stock.stock_location_suppliers'), warehouse.lot_stock_id, **values)\n\n    @classmethod\n    def setUpClass(cls):\n        super(TestStockCommon, cls).setUpClass()\n\n        # Fetch stock-related user groups\n        user_group_employee = cls.env.ref('base.group_user')\n        user_group_stock_user = cls.env.ref('stock.group_stock_user')\n        user_group_stock_manager = cls.env.ref('stock.group_stock_manager')\n\n        # User Data: stock user and stock manager\n        Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n        cls.user_stock_user = Users.create({\n            'name': 'Pauline Poivraisselle',\n            'login': 'pauline',\n            'email': 'p.p@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [user_group_stock_user.id])]})\n        cls.user_stock_manager = Users.create({\n            'name': 'Julie Tablier',\n            'login': 'julie',\n            'email': 'j.j@example.com',\n            'notification_type': 'inbox',\n            'groups_id': [(6, 0, [user_group_stock_manager.id])]})\n\n        # Warehouses\n        cls.warehouse_1 = cls.env['stock.warehouse'].create({\n            'name': 'Base Warehouse',\n            'reception_steps': 'one_step',\n            'delivery_steps': 'ship_only',\n            'code': 'BWH'})\n\n        # Locations\n        cls.location_1 = cls.env['stock.location'].create({\n            'name': 'TestLocation1',\n            'posx': 3,\n            'location_id': cls.warehouse_1.lot_stock_id.id,\n        })\n\n        # Existing data\n        cls.existing_inventories = cls.env['stock.inventory'].search([])\n        cls.existing_quants = cls.env['stock.quant'].search([])\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "common2.py", "id": "c63d05958ee50c9dadccae173921e1ab", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/stock/tests/common2.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}