{"author": "nicolargo", "code": "\n\n# Copyright (c) 2009 Giampaolo Rodola'. All rights reserved.\n\n\n\n\"\"\"\nScript which downloads exe and wheel files hosted on AppVeyor:\nhttps://ci.appveyor.com/project/giampaolo/psutil\nCopied and readapted from the original recipe of Ibarra Corretge'\n<saghul@gmail.com>:\nhttp://code.saghul.net/index.php/2015/09/09/\n\"\"\"\n\nfrom __future__ import print_function\nimport argparse\nimport errno\nimport multiprocessing\nimport os\nimport requests\nimport shutil\nimport sys\n\nfrom concurrent.futures import ThreadPoolExecutor\n\n\nBASE_URL = 'https://ci.appveyor.com/api'\nPY_VERSIONS = ['2.7', '3.3', '3.4', '3.5']\n\n\ndef term_supports_colors(file=sys.stdout):\n    try:\n        import curses\n        assert file.isatty()\n        curses.setupterm()\n        assert curses.tigetnum(\"colors\") > 0\n    except Exception:\n        return False\n    else:\n        return True\n\n\nif term_supports_colors():\n    def hilite(s, ok=True, bold=False):\n        \"\"\"Return an highlighted version of 'string'.\"\"\"\n        attr = []\n        if ok is None:  \n            pass\n        elif ok:   \n            attr.append('32')\n        else:   \n            attr.append('31')\n        if bold:\n            attr.append('1')\n        return '\\x1b[%sm%s\\x1b[0m' % (';'.join(attr), s)\nelse:\n    def hilite(s, *a, **k):\n        return s\n\n\ndef safe_makedirs(path):\n    try:\n        os.makedirs(path)\n    except OSError as err:\n        if err.errno == errno.EEXIST:\n            if not os.path.isdir(path):\n                raise\n        else:\n            raise\n\n\ndef safe_rmtree(path):\n    def onerror(fun, path, excinfo):\n        exc = excinfo[1]\n        if exc.errno != errno.ENOENT:\n            raise\n\n    shutil.rmtree(path, onerror=onerror)\n\n\ndef download_file(url):\n    local_fname = url.split('/')[-1]\n    local_fname = os.path.join('dist', local_fname)\n    print(local_fname)\n    safe_makedirs('dist')\n    r = requests.get(url, stream=True)\n    with open(local_fname, 'wb') as f:\n        for chunk in r.iter_content(chunk_size=1024):\n            if chunk:    \n                f.write(chunk)\n    return local_fname\n\n\ndef get_file_urls(options):\n    session = requests.Session()\n    data = session.get(\n        BASE_URL + '/projects/' + options.user + '/' + options.project)\n    data = data.json()\n\n    urls = []\n    for job in (job['jobId'] for job in data['build']['jobs']):\n        job_url = BASE_URL + '/buildjobs/' + job + '/artifacts'\n        data = session.get(job_url)\n        data = data.json()\n        for item in data:\n            file_url = job_url + '/' + item['fileName']\n            urls.append(file_url)\n    if not urls:\n        sys.exit(\"no artifacts found\")\n    for url in sorted(urls, key=lambda x: os.path.basename(x)):\n        yield url\n\n\ndef rename_27_wheels():\n    \n    src = 'dist/psutil-4.3.0-cp27-cp27m-win32.whl'\n    dst = 'dist/psutil-4.3.0-cp27-none-win32.whl'\n    print(\"rename: %s\\n        %s\" % (src, dst))\n    os.rename(src, dst)\n    src = 'dist/psutil-4.3.0-cp27-cp27m-win_amd64.whl'\n    dst = 'dist/psutil-4.3.0-cp27-none-win_amd64.whl'\n    print(\"rename: %s\\n        %s\" % (src, dst))\n    os.rename(src, dst)\n\n\ndef main(options):\n    files = []\n    safe_rmtree('dist')\n    with ThreadPoolExecutor(max_workers=multiprocessing.cpu_count()) as e:\n        for url in get_file_urls(options):\n            fut = e.submit(download_file, url)\n            files.append(fut.result())\n    # 2 exes (32 and 64 bit) and 2 wheels (32 and 64 bit) for each ver.\n    expected = len(PY_VERSIONS) * 4\n    got = len(files)\n    if expected != got:\n        print(hilite(\"expected %s files, got %s\" % (expected, got), ok=False),\n              file=sys.stderr)\n    rename_27_wheels()\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        description='AppVeyor artifact downloader')\n    parser.add_argument('--user', required=True)\n    parser.add_argument('--project', required=True)\n    args = parser.parse_args()\n    main(args)\n", "comments": "    script downloads exe wheel files hosted appveyor  https   ci appveyor com project giampaolo psutil copied readapted original recipe ibarra corretge   saghul gmail com   http   code saghul net index php 2015 09 09         future   import print function import argparse import errno import multiprocessing import os import requests import shutil import sys  concurrent futures import threadpoolexecutor   base url    https   ci appveyor com api  py versions     2 7    3 3    3 4    3 5     def term supports colors(file sys stdout)      try          import curses         assert file isatty()         curses setupterm()         assert curses tigetnum( colors )   0     except exception          return false     else          return true   term supports colors()      def hilite(s  ok true  bold false)             return highlighted version  string          usr bin env python    copyright (c) 2009 giampaolo rodola   all rights reserved     use source code governed bsd style license    found license file     color    green    red    filter keep alive new chunks    see  https   github com giampaolo psutil issues 810    2 exes (32 64 bit) 2 wheels (32 64 bit) ver  ", "content": "#!/usr/bin/env python\n\n# Copyright (c) 2009 Giampaolo Rodola'. All rights reserved.\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n\n\"\"\"\nScript which downloads exe and wheel files hosted on AppVeyor:\nhttps://ci.appveyor.com/project/giampaolo/psutil\nCopied and readapted from the original recipe of Ibarra Corretge'\n<saghul@gmail.com>:\nhttp://code.saghul.net/index.php/2015/09/09/\n\"\"\"\n\nfrom __future__ import print_function\nimport argparse\nimport errno\nimport multiprocessing\nimport os\nimport requests\nimport shutil\nimport sys\n\nfrom concurrent.futures import ThreadPoolExecutor\n\n\nBASE_URL = 'https://ci.appveyor.com/api'\nPY_VERSIONS = ['2.7', '3.3', '3.4', '3.5']\n\n\ndef term_supports_colors(file=sys.stdout):\n    try:\n        import curses\n        assert file.isatty()\n        curses.setupterm()\n        assert curses.tigetnum(\"colors\") > 0\n    except Exception:\n        return False\n    else:\n        return True\n\n\nif term_supports_colors():\n    def hilite(s, ok=True, bold=False):\n        \"\"\"Return an highlighted version of 'string'.\"\"\"\n        attr = []\n        if ok is None:  # no color\n            pass\n        elif ok:   # green\n            attr.append('32')\n        else:   # red\n            attr.append('31')\n        if bold:\n            attr.append('1')\n        return '\\x1b[%sm%s\\x1b[0m' % (';'.join(attr), s)\nelse:\n    def hilite(s, *a, **k):\n        return s\n\n\ndef safe_makedirs(path):\n    try:\n        os.makedirs(path)\n    except OSError as err:\n        if err.errno == errno.EEXIST:\n            if not os.path.isdir(path):\n                raise\n        else:\n            raise\n\n\ndef safe_rmtree(path):\n    def onerror(fun, path, excinfo):\n        exc = excinfo[1]\n        if exc.errno != errno.ENOENT:\n            raise\n\n    shutil.rmtree(path, onerror=onerror)\n\n\ndef download_file(url):\n    local_fname = url.split('/')[-1]\n    local_fname = os.path.join('dist', local_fname)\n    print(local_fname)\n    safe_makedirs('dist')\n    r = requests.get(url, stream=True)\n    with open(local_fname, 'wb') as f:\n        for chunk in r.iter_content(chunk_size=1024):\n            if chunk:    # filter out keep-alive new chunks\n                f.write(chunk)\n    return local_fname\n\n\ndef get_file_urls(options):\n    session = requests.Session()\n    data = session.get(\n        BASE_URL + '/projects/' + options.user + '/' + options.project)\n    data = data.json()\n\n    urls = []\n    for job in (job['jobId'] for job in data['build']['jobs']):\n        job_url = BASE_URL + '/buildjobs/' + job + '/artifacts'\n        data = session.get(job_url)\n        data = data.json()\n        for item in data:\n            file_url = job_url + '/' + item['fileName']\n            urls.append(file_url)\n    if not urls:\n        sys.exit(\"no artifacts found\")\n    for url in sorted(urls, key=lambda x: os.path.basename(x)):\n        yield url\n\n\ndef rename_27_wheels():\n    # See: https://github.com/giampaolo/psutil/issues/810\n    src = 'dist/psutil-4.3.0-cp27-cp27m-win32.whl'\n    dst = 'dist/psutil-4.3.0-cp27-none-win32.whl'\n    print(\"rename: %s\\n        %s\" % (src, dst))\n    os.rename(src, dst)\n    src = 'dist/psutil-4.3.0-cp27-cp27m-win_amd64.whl'\n    dst = 'dist/psutil-4.3.0-cp27-none-win_amd64.whl'\n    print(\"rename: %s\\n        %s\" % (src, dst))\n    os.rename(src, dst)\n\n\ndef main(options):\n    files = []\n    safe_rmtree('dist')\n    with ThreadPoolExecutor(max_workers=multiprocessing.cpu_count()) as e:\n        for url in get_file_urls(options):\n            fut = e.submit(download_file, url)\n            files.append(fut.result())\n    # 2 exes (32 and 64 bit) and 2 wheels (32 and 64 bit) for each ver.\n    expected = len(PY_VERSIONS) * 4\n    got = len(files)\n    if expected != got:\n        print(hilite(\"expected %s files, got %s\" % (expected, got), ok=False),\n              file=sys.stderr)\n    rename_27_wheels()\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        description='AppVeyor artifact downloader')\n    parser.add_argument('--user', required=True)\n    parser.add_argument('--project', required=True)\n    args = parser.parse_args()\n    main(args)\n", "description": "Glances an Eye on your system. A top/htop alternative.", "file_name": "download_exes.py", "id": "7ef612f0bf03522e24dd3977842ff14b", "language": "Python", "project_name": "glances", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nicolargo-glances/nicolargo-glances-c286362/.ci/appveyor/download_exes.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:40:41Z", "url": "https://github.com/nicolargo/glances", "wiki": true}