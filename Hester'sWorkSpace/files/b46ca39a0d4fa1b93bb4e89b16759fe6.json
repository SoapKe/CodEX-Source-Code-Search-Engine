{"author": "reddit-archive", "code": "\n License Version 1.0. (the \"License\"); you may not use this file except in\n\n\n\n\n\n\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n the specific language governing rights and limitations under the License.\n\n The Original Code is reddit.\n\n The Original Developer is the Initial Developer.  The Initial Developer of\n the Original Code is reddit Inc.\n\n All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n Inc. All Rights Reserved.\n\nimport contextlib\n\nfrom r2.tests import RedditControllerTestCase\nfrom mock import patch, MagicMock\nfrom r2.lib.validator import VByName, VUser, VModhash\n\nfrom r2.models import Link, Message, Account\n\nfrom pylons import app_globals as g\n\n\nclass DelMsgTest(RedditControllerTestCase):\n    CONTROLLER = \"api\"\n\n    def setUp(self):\n        super(DelMsgTest, self).setUp()\n\n        self.id = 1\n\n    def test_del_msg_success(self):\n        \"\"\"Del_msg succeeds: Returns 200 and sets del_on_recipient.\"\"\"\n        message = MagicMock(spec=Message)\n        message.name = \"msg_1\"\n        message.to_id = self.id\n        message.del_on_recipient = False\n\n        with self.mock_del_msg(message):\n            res = self.do_del_msg(message.name)\n\n            self.assertEqual(res.status, 200)\n            self.assertTrue(message.del_on_recipient)\n\n    def test_del_msg_failure_with_link(self):\n        \"\"\"Del_msg fails: Returns 200 and does not set del_on_recipient.\"\"\"\n        link = MagicMock(spec=Link)\n        link.del_on_recipient = False\n        link.name = \"msg_2\"\n\n        with self.mock_del_msg(link):\n            res = self.do_del_msg(link.name)\n\n            self.assertEqual(res.status, 200)\n            self.assertFalse(link.del_on_recipient)\n\n    def test_del_msg_failure_with_null_msg(self):\n        \"\"\"Del_msg fails: Returns 200 and does not set del_on_recipient.\"\"\"\n        message = MagicMock(spec=Message)\n        message.name = \"msg_3\"\n        message.to_id = self.id\n        message.del_on_recipient = False\n\n        with self.mock_del_msg(message, False):\n            res = self.do_del_msg(message.name)\n\n            self.assertEqual(res.status, 200)\n            self.assertFalse(message.del_on_recipient)\n\n    def test_del_msg_failure_with_sender(self):\n        \"\"\"Del_msg fails: Returns 200 and does not set del_on_recipient.\"\"\"\n        message = MagicMock(spec=Message)\n        message.name = \"msg_3\"\n        message.to_id = self.id + 1\n        message.del_on_recipient = False\n\n        with self.mock_del_msg(message):\n            res = self.do_del_msg(message.name)\n\n            self.assertEqual(res.status, 200)\n            self.assertFalse(message.del_on_recipient)\n\n    def mock_del_msg(self, thing, ret=True):\n        \"\"\"Context manager for mocking del_msg.\"\"\"\n\n        return contextlib.nested(\n            patch.object(VByName, \"run\", return_value=thing if ret else None),\n            patch.object(VModhash, \"run\", side_effect=None),\n            patch.object(VUser, \"run\", side_effect=None),\n            patch.object(thing, \"_commit\", side_effect=None),\n            patch.object(Account, \"_id\", self.id, create=True),\n            patch.object(g.events, \"message_event\", side_effect=None),\n        )\n\n    def do_del_msg(self, name, **kw):\n        return self.do_post(\"del_msg\", {\"id\": name}, **kw)\n", "comments": "   del msg succeeds  returns 200 sets del recipient             message   magicmock(spec message)         message name    msg 1          message id   self id         message del recipient   false          self mock del msg(message)              res   self del msg(message name)              self assertequal(res status  200)             self asserttrue(message del recipient)      def test del msg failure link(self)             del msg fails  returns 200 set del recipient             link   magicmock(spec link)         link del recipient   false         link name    msg 2           self mock del msg(link)              res   self del msg(link name)              self assertequal(res status  200)             self assertfalse(link del recipient)      def test del msg failure null msg(self)             del msg fails  returns 200 set del recipient             message   magicmock(spec message)         message name    msg 3          message id   self id         message del recipient   false          self mock del msg(message  false)              res   self del msg(message name)              self assertequal(res status  200)             self assertfalse(message del recipient)      def test del msg failure sender(self)             del msg fails  returns 200 set del recipient             message   magicmock(spec message)         message name    msg 3          message id   self id   1         message del recipient   false          self mock del msg(message)              res   self del msg(message name)              self assertequal(res status  200)             self assertfalse(message del recipient)      def mock del msg(self  thing  ret true)             context manager mocking del msg        the contents file subject common public attribution    license version 1 0  (the  license )  may use file except    compliance license  you may obtain copy license    http   code reddit com license  the license based mozilla public    license version 1 1  sections 14 15 added cover use    software computer network provide limited attribution    original developer  in addition  exhibit a modified consistent    exhibit b        software distributed license distributed  as is  basis     without warranty of any kind  either express implied  see license    specific language governing rights limitations license        the original code reddit        the original developer initial developer   the initial developer    original code reddit inc        all portions code written reddit copyright (c) 2006 2015 reddit    inc  all rights reserved                                                                                   ", "content": "# The contents of this file are subject to the Common Public Attribution\n# License Version 1.0. (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public\n# License Version 1.1, but Sections 14 and 15 have been added to cover use of\n# software over a computer network and provide for limited attribution for the\n# Original Developer. In addition, Exhibit A has been modified to be consistent\n# with Exhibit B.\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n# the specific language governing rights and limitations under the License.\n#\n# The Original Code is reddit.\n#\n# The Original Developer is the Initial Developer.  The Initial Developer of\n# the Original Code is reddit Inc.\n#\n# All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n# Inc. All Rights Reserved.\n###############################################################################\nimport contextlib\n\nfrom r2.tests import RedditControllerTestCase\nfrom mock import patch, MagicMock\nfrom r2.lib.validator import VByName, VUser, VModhash\n\nfrom r2.models import Link, Message, Account\n\nfrom pylons import app_globals as g\n\n\nclass DelMsgTest(RedditControllerTestCase):\n    CONTROLLER = \"api\"\n\n    def setUp(self):\n        super(DelMsgTest, self).setUp()\n\n        self.id = 1\n\n    def test_del_msg_success(self):\n        \"\"\"Del_msg succeeds: Returns 200 and sets del_on_recipient.\"\"\"\n        message = MagicMock(spec=Message)\n        message.name = \"msg_1\"\n        message.to_id = self.id\n        message.del_on_recipient = False\n\n        with self.mock_del_msg(message):\n            res = self.do_del_msg(message.name)\n\n            self.assertEqual(res.status, 200)\n            self.assertTrue(message.del_on_recipient)\n\n    def test_del_msg_failure_with_link(self):\n        \"\"\"Del_msg fails: Returns 200 and does not set del_on_recipient.\"\"\"\n        link = MagicMock(spec=Link)\n        link.del_on_recipient = False\n        link.name = \"msg_2\"\n\n        with self.mock_del_msg(link):\n            res = self.do_del_msg(link.name)\n\n            self.assertEqual(res.status, 200)\n            self.assertFalse(link.del_on_recipient)\n\n    def test_del_msg_failure_with_null_msg(self):\n        \"\"\"Del_msg fails: Returns 200 and does not set del_on_recipient.\"\"\"\n        message = MagicMock(spec=Message)\n        message.name = \"msg_3\"\n        message.to_id = self.id\n        message.del_on_recipient = False\n\n        with self.mock_del_msg(message, False):\n            res = self.do_del_msg(message.name)\n\n            self.assertEqual(res.status, 200)\n            self.assertFalse(message.del_on_recipient)\n\n    def test_del_msg_failure_with_sender(self):\n        \"\"\"Del_msg fails: Returns 200 and does not set del_on_recipient.\"\"\"\n        message = MagicMock(spec=Message)\n        message.name = \"msg_3\"\n        message.to_id = self.id + 1\n        message.del_on_recipient = False\n\n        with self.mock_del_msg(message):\n            res = self.do_del_msg(message.name)\n\n            self.assertEqual(res.status, 200)\n            self.assertFalse(message.del_on_recipient)\n\n    def mock_del_msg(self, thing, ret=True):\n        \"\"\"Context manager for mocking del_msg.\"\"\"\n\n        return contextlib.nested(\n            patch.object(VByName, \"run\", return_value=thing if ret else None),\n            patch.object(VModhash, \"run\", side_effect=None),\n            patch.object(VUser, \"run\", side_effect=None),\n            patch.object(thing, \"_commit\", side_effect=None),\n            patch.object(Account, \"_id\", self.id, create=True),\n            patch.object(g.events, \"message_event\", side_effect=None),\n        )\n\n    def do_del_msg(self, name, **kw):\n        return self.do_post(\"del_msg\", {\"id\": name}, **kw)\n", "description": "historical code from reddit.com", "file_name": "del_msg_test.py", "id": "b46ca39a0d4fa1b93bb4e89b16759fe6", "language": "Python", "project_name": "reddit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/reddit-archive-reddit/reddit-archive-reddit-753b174/r2/r2/tests/functional/controller/del_msg_test.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:55:36Z", "url": "https://github.com/reddit-archive/reddit", "wiki": true}