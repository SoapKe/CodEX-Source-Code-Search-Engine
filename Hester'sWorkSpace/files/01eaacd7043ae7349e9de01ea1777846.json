{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_ssl_certificate import ArgumentSpec\n    from library.bigip_ssl_certificate import ApiParameters\n    from library.bigip_ssl_certificate import ModuleParameters\n    from library.bigip_ssl_certificate import ModuleManager\n    from library.bigip_ssl_certificate import HAS_F5SDK\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_ssl_certificate import ArgumentSpec\n        from ansible.modules.network.f5.bigip_ssl_certificate import ApiParameters\n        from ansible.modules.network.f5.bigip_ssl_certificate import ModuleParameters\n        from ansible.modules.network.f5.bigip_ssl_certificate import ModuleManager\n        from ansible.modules.network.f5.bigip_ssl_certificate import HAS_F5SDK\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters_cert(self):\n        cert_content = load_fixture('create_insecure_cert1.crt')\n        args = dict(\n            content=cert_content,\n            name=\"cert1\",\n            partition=\"Common\",\n            state=\"present\",\n            password='password',\n            server='localhost',\n            user='admin'\n        )\n        p = ModuleParameters(params=args)\n        assert p.name == 'cert1'\n        assert p.filename == 'cert1.crt'\n        assert 'Signature Algorithm' in p.content\n        assert '-----BEGIN CERTIFICATE-----' in p.content\n        assert '-----END CERTIFICATE-----' in p.content\n        assert p.checksum == '1e55aa57ee166a380e756b5aa4a835c5849490fe'\n        assert p.state == 'present'\n        assert p.user == 'admin'\n        assert p.server == 'localhost'\n        assert p.password == 'password'\n        assert p.partition == 'Common'\n\n    def test_module_issuer_cert_key(self):\n        args = dict(\n            issuer_cert='foo',\n            partition=\"Common\",\n        )\n        p = ModuleParameters(params=args)\n        assert p.issuer_cert == '/Common/foo.crt'\n\n    def test_api_issuer_cert_key(self):\n        args = load_fixture('load_sys_file_ssl_cert_with_issuer_cert.json')\n        p = ApiParameters(params=args)\n        assert p.issuer_cert == '/Common/intermediate.crt'\n\n\nclass TestCertificateManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_import_certificate_and_key_no_key_passphrase(self, *args):\n        set_module_args(dict(\n            name='foo',\n            content=load_fixture('cert1.crt'),\n            state='present',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_import_certificate_chain(self, *args):\n        set_module_args(dict(\n            name='foo',\n            content=load_fixture('chain1.crt'),\n            state='present',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods specific type manager    override methods specific type manager ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_ssl_certificate import ArgumentSpec\n    from library.bigip_ssl_certificate import ApiParameters\n    from library.bigip_ssl_certificate import ModuleParameters\n    from library.bigip_ssl_certificate import ModuleManager\n    from library.bigip_ssl_certificate import HAS_F5SDK\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_ssl_certificate import ArgumentSpec\n        from ansible.modules.network.f5.bigip_ssl_certificate import ApiParameters\n        from ansible.modules.network.f5.bigip_ssl_certificate import ModuleParameters\n        from ansible.modules.network.f5.bigip_ssl_certificate import ModuleManager\n        from ansible.modules.network.f5.bigip_ssl_certificate import HAS_F5SDK\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters_cert(self):\n        cert_content = load_fixture('create_insecure_cert1.crt')\n        args = dict(\n            content=cert_content,\n            name=\"cert1\",\n            partition=\"Common\",\n            state=\"present\",\n            password='password',\n            server='localhost',\n            user='admin'\n        )\n        p = ModuleParameters(params=args)\n        assert p.name == 'cert1'\n        assert p.filename == 'cert1.crt'\n        assert 'Signature Algorithm' in p.content\n        assert '-----BEGIN CERTIFICATE-----' in p.content\n        assert '-----END CERTIFICATE-----' in p.content\n        assert p.checksum == '1e55aa57ee166a380e756b5aa4a835c5849490fe'\n        assert p.state == 'present'\n        assert p.user == 'admin'\n        assert p.server == 'localhost'\n        assert p.password == 'password'\n        assert p.partition == 'Common'\n\n    def test_module_issuer_cert_key(self):\n        args = dict(\n            issuer_cert='foo',\n            partition=\"Common\",\n        )\n        p = ModuleParameters(params=args)\n        assert p.issuer_cert == '/Common/foo.crt'\n\n    def test_api_issuer_cert_key(self):\n        args = load_fixture('load_sys_file_ssl_cert_with_issuer_cert.json')\n        p = ApiParameters(params=args)\n        assert p.issuer_cert == '/Common/intermediate.crt'\n\n\nclass TestCertificateManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_import_certificate_and_key_no_key_passphrase(self, *args):\n        set_module_args(dict(\n            name='foo',\n            content=load_fixture('cert1.crt'),\n            state='present',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_import_certificate_chain(self, *args):\n        set_module_args(dict(\n            name='foo',\n            content=load_fixture('chain1.crt'),\n            state='present',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods in the specific type of manager\n        mm = ModuleManager(module=module)\n        mm.exists = Mock(side_effect=[False, True])\n        mm.create_on_device = Mock(return_value=True)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_ssl_certificate.py", "id": "01eaacd7043ae7349e9de01ea1777846", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_ssl_certificate.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}