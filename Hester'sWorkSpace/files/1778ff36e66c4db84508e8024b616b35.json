{"author": "getsentry", "code": "from __future__ import absolute_import\n\nimport functools\n\nimport pytest\nfrom django.core import mail\nfrom mock import patch\n\nfrom sentry import options\nfrom sentry.models import GroupEmailThread, User, UserOption\nfrom sentry.testutils import TestCase\nfrom sentry.utils.email import (\n    ListResolver,\n    MessageBuilder,\n    default_list_type_handlers,\n    get_from_email_domain,\n    get_mail_backend,\n    create_fake_email,\n)\n\n\nclass ListResolverTestCase(TestCase):\n    resolver = ListResolver(\n        'namespace',\n        default_list_type_handlers,\n    )\n\n    def test_rejects_invalid_namespace(self):\n        with pytest.raises(AssertionError):\n            ListResolver('\\x00', {})\n\n    def test_rejects_invalid_types(self):\n        with pytest.raises(ListResolver.UnregisteredTypeError):\n            self.resolver(object())\n\n    def test_generates_list_ids(self):\n        expected = \"{0.project.slug}.{0.organization.slug}.namespace\".format(self.event)\n        assert self.resolver(self.event) == expected\n        assert self.resolver(self.event.group) == expected\n        assert self.resolver(self.event.project) == expected\n\n    def test_rejects_invalid_objects(self):\n        resolver = ListResolver('namespace', {\n            object: lambda value: ('\\x00', ),\n        })\n\n        with pytest.raises(AssertionError):\n            resolver(object())\n\n\nclass MessageBuilderTest(TestCase):\n    def test_raw_content(self):\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            headers={'X-Test': 'foo'},\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Test'\n        assert out.extra_headers['X-Test'] == 'foo'\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n    def test_explicit_reply_to(self):\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            headers={'X-Sentry-Reply-To': 'bar@example.com'},\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Test'\n        assert out.extra_headers['Reply-To'] == 'bar@example.com'\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n    def test_with_users(self):\n        project = self.project\n\n        user_a = User.objects.create(email='foo@example.com')\n        user_b = User.objects.create(email='bar@example.com')\n        user_c = User.objects.create(email='baz@example.com')\n\n        UserOption.objects.create(\n            user=user_b,\n            key='alert_email',\n            value='fizzle@example.com',\n        )\n        UserOption.objects.create(\n            user=user_c,\n            project=project,\n            key='mail:email',\n            value='bazzer@example.com',\n        )\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<!DOCTYPE html>\\n<b>hello world</b>',\n        )\n        msg.add_users([user_a.id, user_b.id, user_c.id], project=project)\n        msg.send()\n\n        assert len(mail.outbox) == 3\n\n        assert sorted([out.to[0] for out in mail.outbox]) == [\n            'bazzer@example.com',\n            'fizzle@example.com',\n            'foo@example.com',\n        ]\n\n    def test_fake_dont_send(self):\n        project = self.project\n\n        user_a = User.objects.create(email=create_fake_email('foo', 'fake'))\n        user_b = User.objects.create(email=create_fake_email('bar', 'fake'))\n        user_c = User.objects.create(email=create_fake_email('baz', 'fake'))\n\n        UserOption.objects.create(\n            user=user_b,\n            key='alert_email',\n            value=create_fake_email('fizzle', 'fake'),\n        )\n        UserOption.objects.create(\n            user=user_c,\n            project=project,\n            key='mail:email',\n            value=create_fake_email('bazzer', 'fake'),\n        )\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<!DOCTYPE html>\\n<b>hello world</b>',\n        )\n        msg.add_users([user_a.id, user_b.id, user_c.id], project=project)\n        msg.send()\n\n        assert len(mail.outbox) == 0\n\n    @patch('sentry.utils.email.make_msgid')\n    def test_message_id(self, make_msgid):\n        make_msgid.return_value = 'abc123'\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=self.activity,\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Test'\n        assert out.extra_headers['Message-Id'] == 'abc123'\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n    @patch('sentry.utils.email.make_msgid')\n    def test_add_groupemailthread(self, make_msgid):\n        make_msgid.return_value = 'abc123'\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=self.group,\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Test', 'First message should not have Re: prefix'\n        assert out.extra_headers['Message-Id'] == 'abc123'\n        assert 'In-Reply-To' not in out.extra_headers\n        assert 'References' not in out.extra_headers\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n        \n        assert GroupEmailThread.objects.count() == 1\n        thread = GroupEmailThread.objects.all()[0]\n        assert thread.msgid == 'abc123'\n        assert thread.email == 'foo@example.com'\n        assert thread.group == self.group\n\n    @patch('sentry.utils.email.make_msgid')\n    def test_reply_reference(self, make_msgid):\n        make_msgid.return_value = 'abc123'\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=self.activity,\n            reply_reference=self.group,\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Re: Test'\n        assert out.extra_headers['Message-Id'] == 'abc123'\n        assert 'In-Reply-To' not in out.extra_headers\n        assert 'References' not in out.extra_headers\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n        \n        assert GroupEmailThread.objects.count() == 1\n        thread = GroupEmailThread.objects.all()[0]\n        assert thread.msgid == 'abc123'\n        assert thread.email == 'foo@example.com'\n        assert thread.group == self.group\n\n        \n        make_msgid.return_value = '321cba'\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 2\n\n        out = mail.outbox[1]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Re: Test'\n        assert out.extra_headers['Message-Id'] == '321cba'\n        assert out.extra_headers['In-Reply-To'] == 'abc123'\n        assert out.extra_headers['References'] == 'abc123'\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n        \n        assert GroupEmailThread.objects.count() == 1, 'Should not have added a new row'\n        assert GroupEmailThread.objects.all()[0].msgid == 'abc123', 'msgid should not have changed'\n\n    def test_get_built_messages(self):\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=self.activity,\n            reply_reference=self.group,\n        )\n        results = msg.get_built_messages(['foo@example.com'])\n        assert len(results) == 1\n\n    def test_bcc_on_send(self):\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n        )\n        msg.send(['foo@example.com'], bcc=['bar@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.bcc == ['bar@example.com']\n\n    def test_generates_list_ids_for_registered_types(self):\n        build_message = functools.partial(\n            MessageBuilder,\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n        )\n\n        expected = \"{event.project.slug}.{event.organization.slug}.{namespace}\".format(\n            event=self.event,\n            namespace=options.get('mail.list-namespace'),\n        )\n\n        references = (self.event, self.event.group, self.event.project, self.activity, )\n\n        for reference in references:\n            (message, ) = build_message(reference=reference).get_built_messages(['foo@example.com'])\n            assert message.message()['List-Id'] == expected\n\n    def test_does_not_generates_list_ids_for_unregistered_types(self):\n        message = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=object(),\n        ).get_built_messages(['foo@example.com'])[0].message()\n\n        assert 'List-Id' not in message\n\n    def test_stripped_newline(self):\n        msg = MessageBuilder(\n            subject='Foo\\r\\nBar',\n            body='hello world',\n            html_body='<b>hello world</b',\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n        assert mail.outbox[0].subject == 'Foo'\n\n\nclass MiscTestCase(TestCase):\n    def test_get_from_email_domain(self):\n        with self.options({'mail.from': 'matt@example.com'}):\n            assert get_from_email_domain() == 'example.com'\n\n        with self.options({'mail.from': 'root@localhost'}):\n            assert get_from_email_domain() == 'localhost'\n\n        with self.options({'mail.from': 'garbage'}):\n            assert get_from_email_domain() == 'garbage'\n\n    def test_get_mail_backend(self):\n        with self.options({'mail.backend': 'smtp'}):\n            assert get_mail_backend() == 'django.core.mail.backends.smtp.EmailBackend'\n\n        with self.options({'mail.backend': 'dummy'}):\n            assert get_mail_backend() == 'django.core.mail.backends.dummy.EmailBackend'\n\n        with self.options({'mail.backend': 'console'}):\n            assert get_mail_backend() == 'django.core.mail.backends.console.EmailBackend'\n\n        with self.options({'mail.backend': 'something.else'}):\n            assert get_mail_backend() == 'something.else'\n", "comments": "  our new emailthread row added    our new emailthread row added    new msgid next message    our new groupemailthread row added ", "content": "from __future__ import absolute_import\n\nimport functools\n\nimport pytest\nfrom django.core import mail\nfrom mock import patch\n\nfrom sentry import options\nfrom sentry.models import GroupEmailThread, User, UserOption\nfrom sentry.testutils import TestCase\nfrom sentry.utils.email import (\n    ListResolver,\n    MessageBuilder,\n    default_list_type_handlers,\n    get_from_email_domain,\n    get_mail_backend,\n    create_fake_email,\n)\n\n\nclass ListResolverTestCase(TestCase):\n    resolver = ListResolver(\n        'namespace',\n        default_list_type_handlers,\n    )\n\n    def test_rejects_invalid_namespace(self):\n        with pytest.raises(AssertionError):\n            ListResolver('\\x00', {})\n\n    def test_rejects_invalid_types(self):\n        with pytest.raises(ListResolver.UnregisteredTypeError):\n            self.resolver(object())\n\n    def test_generates_list_ids(self):\n        expected = \"{0.project.slug}.{0.organization.slug}.namespace\".format(self.event)\n        assert self.resolver(self.event) == expected\n        assert self.resolver(self.event.group) == expected\n        assert self.resolver(self.event.project) == expected\n\n    def test_rejects_invalid_objects(self):\n        resolver = ListResolver('namespace', {\n            object: lambda value: ('\\x00', ),\n        })\n\n        with pytest.raises(AssertionError):\n            resolver(object())\n\n\nclass MessageBuilderTest(TestCase):\n    def test_raw_content(self):\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            headers={'X-Test': 'foo'},\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Test'\n        assert out.extra_headers['X-Test'] == 'foo'\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n    def test_explicit_reply_to(self):\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            headers={'X-Sentry-Reply-To': 'bar@example.com'},\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Test'\n        assert out.extra_headers['Reply-To'] == 'bar@example.com'\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n    def test_with_users(self):\n        project = self.project\n\n        user_a = User.objects.create(email='foo@example.com')\n        user_b = User.objects.create(email='bar@example.com')\n        user_c = User.objects.create(email='baz@example.com')\n\n        UserOption.objects.create(\n            user=user_b,\n            key='alert_email',\n            value='fizzle@example.com',\n        )\n        UserOption.objects.create(\n            user=user_c,\n            project=project,\n            key='mail:email',\n            value='bazzer@example.com',\n        )\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<!DOCTYPE html>\\n<b>hello world</b>',\n        )\n        msg.add_users([user_a.id, user_b.id, user_c.id], project=project)\n        msg.send()\n\n        assert len(mail.outbox) == 3\n\n        assert sorted([out.to[0] for out in mail.outbox]) == [\n            'bazzer@example.com',\n            'fizzle@example.com',\n            'foo@example.com',\n        ]\n\n    def test_fake_dont_send(self):\n        project = self.project\n\n        user_a = User.objects.create(email=create_fake_email('foo', 'fake'))\n        user_b = User.objects.create(email=create_fake_email('bar', 'fake'))\n        user_c = User.objects.create(email=create_fake_email('baz', 'fake'))\n\n        UserOption.objects.create(\n            user=user_b,\n            key='alert_email',\n            value=create_fake_email('fizzle', 'fake'),\n        )\n        UserOption.objects.create(\n            user=user_c,\n            project=project,\n            key='mail:email',\n            value=create_fake_email('bazzer', 'fake'),\n        )\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<!DOCTYPE html>\\n<b>hello world</b>',\n        )\n        msg.add_users([user_a.id, user_b.id, user_c.id], project=project)\n        msg.send()\n\n        assert len(mail.outbox) == 0\n\n    @patch('sentry.utils.email.make_msgid')\n    def test_message_id(self, make_msgid):\n        make_msgid.return_value = 'abc123'\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=self.activity,\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Test'\n        assert out.extra_headers['Message-Id'] == 'abc123'\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n    @patch('sentry.utils.email.make_msgid')\n    def test_add_groupemailthread(self, make_msgid):\n        make_msgid.return_value = 'abc123'\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=self.group,\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Test', 'First message should not have Re: prefix'\n        assert out.extra_headers['Message-Id'] == 'abc123'\n        assert 'In-Reply-To' not in out.extra_headers\n        assert 'References' not in out.extra_headers\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n        # Our new EmailThread row was added\n        assert GroupEmailThread.objects.count() == 1\n        thread = GroupEmailThread.objects.all()[0]\n        assert thread.msgid == 'abc123'\n        assert thread.email == 'foo@example.com'\n        assert thread.group == self.group\n\n    @patch('sentry.utils.email.make_msgid')\n    def test_reply_reference(self, make_msgid):\n        make_msgid.return_value = 'abc123'\n\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=self.activity,\n            reply_reference=self.group,\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Re: Test'\n        assert out.extra_headers['Message-Id'] == 'abc123'\n        assert 'In-Reply-To' not in out.extra_headers\n        assert 'References' not in out.extra_headers\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n        # Our new EmailThread row was added\n        assert GroupEmailThread.objects.count() == 1\n        thread = GroupEmailThread.objects.all()[0]\n        assert thread.msgid == 'abc123'\n        assert thread.email == 'foo@example.com'\n        assert thread.group == self.group\n\n        # new msgid for the next message\n        make_msgid.return_value = '321cba'\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 2\n\n        out = mail.outbox[1]\n        assert out.to == ['foo@example.com']\n        assert out.subject == 'Re: Test'\n        assert out.extra_headers['Message-Id'] == '321cba'\n        assert out.extra_headers['In-Reply-To'] == 'abc123'\n        assert out.extra_headers['References'] == 'abc123'\n        assert out.body == 'hello world'\n        assert len(out.alternatives) == 1\n        assert out.alternatives[0] == (\n            '<!DOCTYPE html>\\n<html><body><b>hello world</b></body></html>', 'text/html',\n        )\n\n        # Our new GroupEmailThread row was added\n        assert GroupEmailThread.objects.count() == 1, 'Should not have added a new row'\n        assert GroupEmailThread.objects.all()[0].msgid == 'abc123', 'msgid should not have changed'\n\n    def test_get_built_messages(self):\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=self.activity,\n            reply_reference=self.group,\n        )\n        results = msg.get_built_messages(['foo@example.com'])\n        assert len(results) == 1\n\n    def test_bcc_on_send(self):\n        msg = MessageBuilder(\n            subject='Test',\n            body='hello world',\n        )\n        msg.send(['foo@example.com'], bcc=['bar@example.com'])\n\n        assert len(mail.outbox) == 1\n\n        out = mail.outbox[0]\n        assert out.to == ['foo@example.com']\n        assert out.bcc == ['bar@example.com']\n\n    def test_generates_list_ids_for_registered_types(self):\n        build_message = functools.partial(\n            MessageBuilder,\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n        )\n\n        expected = \"{event.project.slug}.{event.organization.slug}.{namespace}\".format(\n            event=self.event,\n            namespace=options.get('mail.list-namespace'),\n        )\n\n        references = (self.event, self.event.group, self.event.project, self.activity, )\n\n        for reference in references:\n            (message, ) = build_message(reference=reference).get_built_messages(['foo@example.com'])\n            assert message.message()['List-Id'] == expected\n\n    def test_does_not_generates_list_ids_for_unregistered_types(self):\n        message = MessageBuilder(\n            subject='Test',\n            body='hello world',\n            html_body='<b>hello world</b>',\n            reference=object(),\n        ).get_built_messages(['foo@example.com'])[0].message()\n\n        assert 'List-Id' not in message\n\n    def test_stripped_newline(self):\n        msg = MessageBuilder(\n            subject='Foo\\r\\nBar',\n            body='hello world',\n            html_body='<b>hello world</b',\n        )\n        msg.send(['foo@example.com'])\n\n        assert len(mail.outbox) == 1\n        assert mail.outbox[0].subject == 'Foo'\n\n\nclass MiscTestCase(TestCase):\n    def test_get_from_email_domain(self):\n        with self.options({'mail.from': 'matt@example.com'}):\n            assert get_from_email_domain() == 'example.com'\n\n        with self.options({'mail.from': 'root@localhost'}):\n            assert get_from_email_domain() == 'localhost'\n\n        with self.options({'mail.from': 'garbage'}):\n            assert get_from_email_domain() == 'garbage'\n\n    def test_get_mail_backend(self):\n        with self.options({'mail.backend': 'smtp'}):\n            assert get_mail_backend() == 'django.core.mail.backends.smtp.EmailBackend'\n\n        with self.options({'mail.backend': 'dummy'}):\n            assert get_mail_backend() == 'django.core.mail.backends.dummy.EmailBackend'\n\n        with self.options({'mail.backend': 'console'}):\n            assert get_mail_backend() == 'django.core.mail.backends.console.EmailBackend'\n\n        with self.options({'mail.backend': 'something.else'}):\n            assert get_mail_backend() == 'something.else'\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "tests.py", "id": "1778ff36e66c4db84508e8024b616b35", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/utils/email/tests.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}