{"author": "scikit-learn", "code": "\nfrom __future__ import print_function\n\nfrom collections import defaultdict\nimport gc\nimport sys\nfrom time import time\n\nimport numpy as np\n\nfrom sklearn.linear_model import lars_path\nfrom sklearn.linear_model import lasso_path\nfrom sklearn.datasets.samples_generator import make_regression\n\n\ndef compute_bench(samples_range, features_range):\n\n    it = 0\n\n    results = defaultdict(lambda: [])\n\n    max_it = len(samples_range) * len(features_range)\n    for n_samples in samples_range:\n        for n_features in features_range:\n            it += 1\n            print('====================')\n            print('Iteration %03d of %03d' % (it, max_it))\n            print('====================')\n            dataset_kwargs = {\n                'n_samples': n_samples,\n                'n_features': n_features,\n                'n_informative': n_features / 10,\n                'effective_rank': min(n_samples, n_features) / 10,\n                \n                'bias': 0.0,\n            }\n            print(\"n_samples: %d\" % n_samples)\n            print(\"n_features: %d\" % n_features)\n            X, y = make_regression(**dataset_kwargs)\n\n            gc.collect()\n            print(\"benchmarking lars_path (with Gram):\", end='')\n            sys.stdout.flush()\n            tstart = time()\n            G = np.dot(X.T, X)  \n            Xy = np.dot(X.T, y)\n            lars_path(X, y, Xy=Xy, Gram=G, method='lasso')\n            delta = time() - tstart\n            print(\"%0.3fs\" % delta)\n            results['lars_path (with Gram)'].append(delta)\n\n            gc.collect()\n            print(\"benchmarking lars_path (without Gram):\", end='')\n            sys.stdout.flush()\n            tstart = time()\n            lars_path(X, y, method='lasso')\n            delta = time() - tstart\n            print(\"%0.3fs\" % delta)\n            results['lars_path (without Gram)'].append(delta)\n\n            gc.collect()\n            print(\"benchmarking lasso_path (with Gram):\", end='')\n            sys.stdout.flush()\n            tstart = time()\n            lasso_path(X, y, precompute=True)\n            delta = time() - tstart\n            print(\"%0.3fs\" % delta)\n            results['lasso_path (with Gram)'].append(delta)\n\n            gc.collect()\n            print(\"benchmarking lasso_path (without Gram):\", end='')\n            sys.stdout.flush()\n            tstart = time()\n            lasso_path(X, y, precompute=False)\n            delta = time() - tstart\n            print(\"%0.3fs\" % delta)\n            results['lasso_path (without Gram)'].append(delta)\n\n    return results\n\n\nif __name__ == '__main__':\n    from mpl_toolkits.mplot3d import axes3d  \n    import matplotlib.pyplot as plt\n\n    samples_range = np.linspace(10, 2000, 5).astype(np.int)\n    features_range = np.linspace(10, 2000, 5).astype(np.int)\n    results = compute_bench(samples_range, features_range)\n\n    max_time = max(max(t) for t in results.values())\n\n    fig = plt.figure('scikit-learn Lasso path benchmark results')\n    i = 1\n    for c, (label, timings) in zip('bcry', sorted(results.items())):\n        ax = fig.add_subplot(2, 2, i, projection='3d')\n        X, Y = np.meshgrid(samples_range, features_range)\n        Z = np.asarray(timings).reshape(samples_range.shape[0],\n                                        features_range.shape[0])\n\n        \n        ax.plot_surface(X, Y, Z.T, cstride=1, rstride=1, color=c, alpha=0.8)\n\n        \n        # support legends (yet?)\n        # ax.plot([1], [1], [1], color=c, label=label)\n\n        ax.set_xlabel('n_samples')\n        ax.set_ylabel('n_features')\n        ax.set_zlabel('Time (s)')\n        ax.set_zlim3d(0.0, max_time * 1.1)\n        ax.set_title(label)\n        ()\n        i += 1\n    plt.show()\n", "comments": "   benchmarks lasso regularization path computation using lars cd  the input data mostly low rank fat infinite tail         effective rank   none     precomputed gram matrix    register 3d projection    plot actual surface    dummy point plot stick legend since surface plot    support legends (yet )    ax plot( 1    1    1   color c  label label)    ax legend() ", "content": "\"\"\"Benchmarks of Lasso regularization path computation using Lars and CD\n\nThe input data is mostly low rank but is a fat infinite tail.\n\"\"\"\nfrom __future__ import print_function\n\nfrom collections import defaultdict\nimport gc\nimport sys\nfrom time import time\n\nimport numpy as np\n\nfrom sklearn.linear_model import lars_path\nfrom sklearn.linear_model import lasso_path\nfrom sklearn.datasets.samples_generator import make_regression\n\n\ndef compute_bench(samples_range, features_range):\n\n    it = 0\n\n    results = defaultdict(lambda: [])\n\n    max_it = len(samples_range) * len(features_range)\n    for n_samples in samples_range:\n        for n_features in features_range:\n            it += 1\n            print('====================')\n            print('Iteration %03d of %03d' % (it, max_it))\n            print('====================')\n            dataset_kwargs = {\n                'n_samples': n_samples,\n                'n_features': n_features,\n                'n_informative': n_features / 10,\n                'effective_rank': min(n_samples, n_features) / 10,\n                #'effective_rank': None,\n                'bias': 0.0,\n            }\n            print(\"n_samples: %d\" % n_samples)\n            print(\"n_features: %d\" % n_features)\n            X, y = make_regression(**dataset_kwargs)\n\n            gc.collect()\n            print(\"benchmarking lars_path (with Gram):\", end='')\n            sys.stdout.flush()\n            tstart = time()\n            G = np.dot(X.T, X)  # precomputed Gram matrix\n            Xy = np.dot(X.T, y)\n            lars_path(X, y, Xy=Xy, Gram=G, method='lasso')\n            delta = time() - tstart\n            print(\"%0.3fs\" % delta)\n            results['lars_path (with Gram)'].append(delta)\n\n            gc.collect()\n            print(\"benchmarking lars_path (without Gram):\", end='')\n            sys.stdout.flush()\n            tstart = time()\n            lars_path(X, y, method='lasso')\n            delta = time() - tstart\n            print(\"%0.3fs\" % delta)\n            results['lars_path (without Gram)'].append(delta)\n\n            gc.collect()\n            print(\"benchmarking lasso_path (with Gram):\", end='')\n            sys.stdout.flush()\n            tstart = time()\n            lasso_path(X, y, precompute=True)\n            delta = time() - tstart\n            print(\"%0.3fs\" % delta)\n            results['lasso_path (with Gram)'].append(delta)\n\n            gc.collect()\n            print(\"benchmarking lasso_path (without Gram):\", end='')\n            sys.stdout.flush()\n            tstart = time()\n            lasso_path(X, y, precompute=False)\n            delta = time() - tstart\n            print(\"%0.3fs\" % delta)\n            results['lasso_path (without Gram)'].append(delta)\n\n    return results\n\n\nif __name__ == '__main__':\n    from mpl_toolkits.mplot3d import axes3d  # register the 3d projection\n    import matplotlib.pyplot as plt\n\n    samples_range = np.linspace(10, 2000, 5).astype(np.int)\n    features_range = np.linspace(10, 2000, 5).astype(np.int)\n    results = compute_bench(samples_range, features_range)\n\n    max_time = max(max(t) for t in results.values())\n\n    fig = plt.figure('scikit-learn Lasso path benchmark results')\n    i = 1\n    for c, (label, timings) in zip('bcry', sorted(results.items())):\n        ax = fig.add_subplot(2, 2, i, projection='3d')\n        X, Y = np.meshgrid(samples_range, features_range)\n        Z = np.asarray(timings).reshape(samples_range.shape[0],\n                                        features_range.shape[0])\n\n        # plot the actual surface\n        ax.plot_surface(X, Y, Z.T, cstride=1, rstride=1, color=c, alpha=0.8)\n\n        # dummy point plot to stick the legend to since surface plot do not\n        # support legends (yet?)\n        # ax.plot([1], [1], [1], color=c, label=label)\n\n        ax.set_xlabel('n_samples')\n        ax.set_ylabel('n_features')\n        ax.set_zlabel('Time (s)')\n        ax.set_zlim3d(0.0, max_time * 1.1)\n        ax.set_title(label)\n        # ax.legend()\n        i += 1\n    plt.show()\n", "description": "scikit-learn: machine learning in Python", "file_name": "bench_plot_lasso_path.py", "id": "585e1d2a2d11b2d7a817adc37711074a", "language": "Python", "project_name": "scikit-learn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/scikit-learn-scikit-learn/scikit-learn-scikit-learn-94ed5a8/benchmarks/bench_plot_lasso_path.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:58:59Z", "url": "https://github.com/scikit-learn/scikit-learn", "wiki": true}