{"author": "odoo", "code": "#-*- coding:utf-8 -*-\n\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\nfrom odoo.tools import float_compare, float_is_zero\n\n\nclass HrPayslipLine(models.Model):\n    _inherit = 'hr.payslip.line'\n\n    def _get_partner_id(self, credit_account):\n        \n        \n        register_partner_id = self.salary_rule_id.register_id.partner_id\n        partner_id = register_partner_id.id or self.slip_id.employee_id.address_home_id.id\n        if credit_account:\n            if register_partner_id or self.salary_rule_id.account_credit.internal_type in ('receivable', 'payable'):\n                return partner_id\n        else:\n            if register_partner_id or self.salary_rule_id.account_debit.internal_type in ('receivable', 'payable'):\n                return partner_id\n        return False\n\nclass HrPayslip(models.Model):\n    _inherit = 'hr.payslip'\n\n    date = fields.Date('Date Account', states={'draft': [('readonly', False)]}, readonly=True,\n        help=\"Keep empty to use the period of the validation(Payslip) date.\")\n    journal_id = fields.Many2one('account.journal', 'Salary Journal', readonly=True, required=True,\n        states={'draft': [('readonly', False)]}, default=lambda self: self.env['account.journal'].search([('type', '=', 'general')], limit=1))\n    move_id = fields.Many2one('account.move', 'Accounting Entry', readonly=True, copy=False)\n\n    @api.model\n    def create(self, vals):\n        if 'journal_id' in self.env.context:\n            vals['journal_id'] = self.env.context.get('journal_id')\n        return super(HrPayslip, self).create(vals)\n\n    @api.onchange('contract_id')\n    def onchange_contract(self):\n        super(HrPayslip, self).onchange_contract()\n        self.journal_id = self.contract_id.journal_id.id or (not self.contract_id and self.default_get(['journal_id'])['journal_id'])\n\n    @api.multi\n    def action_payslip_cancel(self):\n        moves = self.mapped('move_id')\n        moves.filtered(lambda x: x.state == 'posted').button_cancel()\n        moves.unlink()\n        return super(HrPayslip, self).action_payslip_cancel()\n\n    @api.multi\n    def action_payslip_done(self):\n        precision = self.env['decimal.precision'].precision_get('Payroll')\n\n        for slip in self:\n            line_ids = []\n            debit_sum = 0.0\n            credit_sum = 0.0\n            date = slip.date or slip.date_to\n\n            name = _('Payslip of %s') % (slip.employee_id.name)\n            move_dict = {\n                'narration': name,\n                'ref': slip.number,\n                'journal_id': slip.journal_id.id,\n                'date': date,\n            }\n            for line in slip.details_by_salary_rule_category:\n                amount = slip.credit_note and -line.total or line.total\n                if float_is_zero(amount, precision_digits=precision):\n                    continue\n                debit_account_id = line.salary_rule_id.account_debit.id\n                credit_account_id = line.salary_rule_id.account_credit.id\n\n                if debit_account_id:\n                    debit_line = (0, 0, {\n                        'name': line.name,\n                        'partner_id': line._get_partner_id(credit_account=False),\n                        'account_id': debit_account_id,\n                        'journal_id': slip.journal_id.id,\n                        'date': date,\n                        'debit': amount > 0.0 and amount or 0.0,\n                        'credit': amount < 0.0 and -amount or 0.0,\n                        'analytic_account_id': line.salary_rule_id.analytic_account_id.id,\n                        'tax_line_id': line.salary_rule_id.account_tax_id.id,\n                    })\n                    line_ids.append(debit_line)\n                    debit_sum += debit_line[2]['debit'] - debit_line[2]['credit']\n\n                if credit_account_id:\n                    credit_line = (0, 0, {\n                        'name': line.name,\n                        'partner_id': line._get_partner_id(credit_account=True),\n                        'account_id': credit_account_id,\n                        'journal_id': slip.journal_id.id,\n                        'date': date,\n                        'debit': amount < 0.0 and -amount or 0.0,\n                        'credit': amount > 0.0 and amount or 0.0,\n                        'analytic_account_id': line.salary_rule_id.analytic_account_id.id,\n                        'tax_line_id': line.salary_rule_id.account_tax_id.id,\n                    })\n                    line_ids.append(credit_line)\n                    credit_sum += credit_line[2]['credit'] - credit_line[2]['debit']\n\n            if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n                acc_id = slip.journal_id.default_credit_account_id.id\n                if not acc_id:\n                    raise UserError(_('The Expense Journal \"%s\" has not properly configured the Credit Account!') % (slip.journal_id.name))\n                adjust_credit = (0, 0, {\n                    'name': _('Adjustment Entry'),\n                    'partner_id': False,\n                    'account_id': acc_id,\n                    'journal_id': slip.journal_id.id,\n                    'date': date,\n                    'debit': 0.0,\n                    'credit': debit_sum - credit_sum,\n                })\n                line_ids.append(adjust_credit)\n\n            elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n                acc_id = slip.journal_id.default_debit_account_id.id\n                if not acc_id:\n                    raise UserError(_('The Expense Journal \"%s\" has not properly configured the Debit Account!') % (slip.journal_id.name))\n                adjust_debit = (0, 0, {\n                    'name': _('Adjustment Entry'),\n                    'partner_id': False,\n                    'account_id': acc_id,\n                    'journal_id': slip.journal_id.id,\n                    'date': date,\n                    'debit': credit_sum - debit_sum,\n                    'credit': 0.0,\n                })\n                line_ids.append(adjust_debit)\n            move_dict['line_ids'] = line_ids\n            move = self.env['account.move'].create(move_dict)\n            slip.write({'move_id': move.id, 'date': date})\n            move.post()\n        return super(HrPayslip, self).action_payslip_done()\n\n\nclass HrSalaryRule(models.Model):\n    _inherit = 'hr.salary.rule'\n\n    analytic_account_id = fields.Many2one('account.analytic.account', 'Analytic Account')\n    account_tax_id = fields.Many2one('account.tax', 'Tax')\n    account_debit = fields.Many2one('account.account', 'Debit Account', domain=[('deprecated', '=', False)])\n    account_credit = fields.Many2one('account.account', 'Credit Account', domain=[('deprecated', '=', False)])\n\nclass HrContract(models.Model):\n    _inherit = 'hr.contract'\n    _description = 'Employee Contract'\n\n    analytic_account_id = fields.Many2one('account.analytic.account', 'Analytic Account')\n    journal_id = fields.Many2one('account.journal', 'Salary Journal')\n\nclass HrPayslipRun(models.Model):\n    _inherit = 'hr.payslip.run'\n\n    journal_id = fields.Many2one('account.journal', 'Salary Journal', states={'draft': [('readonly', False)]}, readonly=True,\n        required=True, default=lambda self: self.env['account.journal'].search([('type', '=', 'general')], limit=1))\n", "comments": "            get partner id slip line use account move line                   coding utf 8        part odoo  see license file full copyright licensing details     use partner salary rule fallback employee address ", "content": "#-*- coding:utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\nfrom odoo.tools import float_compare, float_is_zero\n\n\nclass HrPayslipLine(models.Model):\n    _inherit = 'hr.payslip.line'\n\n    def _get_partner_id(self, credit_account):\n        \"\"\"\n        Get partner_id of slip line to use in account_move_line\n        \"\"\"\n        # use partner of salary rule or fallback on employee's address\n        register_partner_id = self.salary_rule_id.register_id.partner_id\n        partner_id = register_partner_id.id or self.slip_id.employee_id.address_home_id.id\n        if credit_account:\n            if register_partner_id or self.salary_rule_id.account_credit.internal_type in ('receivable', 'payable'):\n                return partner_id\n        else:\n            if register_partner_id or self.salary_rule_id.account_debit.internal_type in ('receivable', 'payable'):\n                return partner_id\n        return False\n\nclass HrPayslip(models.Model):\n    _inherit = 'hr.payslip'\n\n    date = fields.Date('Date Account', states={'draft': [('readonly', False)]}, readonly=True,\n        help=\"Keep empty to use the period of the validation(Payslip) date.\")\n    journal_id = fields.Many2one('account.journal', 'Salary Journal', readonly=True, required=True,\n        states={'draft': [('readonly', False)]}, default=lambda self: self.env['account.journal'].search([('type', '=', 'general')], limit=1))\n    move_id = fields.Many2one('account.move', 'Accounting Entry', readonly=True, copy=False)\n\n    @api.model\n    def create(self, vals):\n        if 'journal_id' in self.env.context:\n            vals['journal_id'] = self.env.context.get('journal_id')\n        return super(HrPayslip, self).create(vals)\n\n    @api.onchange('contract_id')\n    def onchange_contract(self):\n        super(HrPayslip, self).onchange_contract()\n        self.journal_id = self.contract_id.journal_id.id or (not self.contract_id and self.default_get(['journal_id'])['journal_id'])\n\n    @api.multi\n    def action_payslip_cancel(self):\n        moves = self.mapped('move_id')\n        moves.filtered(lambda x: x.state == 'posted').button_cancel()\n        moves.unlink()\n        return super(HrPayslip, self).action_payslip_cancel()\n\n    @api.multi\n    def action_payslip_done(self):\n        precision = self.env['decimal.precision'].precision_get('Payroll')\n\n        for slip in self:\n            line_ids = []\n            debit_sum = 0.0\n            credit_sum = 0.0\n            date = slip.date or slip.date_to\n\n            name = _('Payslip of %s') % (slip.employee_id.name)\n            move_dict = {\n                'narration': name,\n                'ref': slip.number,\n                'journal_id': slip.journal_id.id,\n                'date': date,\n            }\n            for line in slip.details_by_salary_rule_category:\n                amount = slip.credit_note and -line.total or line.total\n                if float_is_zero(amount, precision_digits=precision):\n                    continue\n                debit_account_id = line.salary_rule_id.account_debit.id\n                credit_account_id = line.salary_rule_id.account_credit.id\n\n                if debit_account_id:\n                    debit_line = (0, 0, {\n                        'name': line.name,\n                        'partner_id': line._get_partner_id(credit_account=False),\n                        'account_id': debit_account_id,\n                        'journal_id': slip.journal_id.id,\n                        'date': date,\n                        'debit': amount > 0.0 and amount or 0.0,\n                        'credit': amount < 0.0 and -amount or 0.0,\n                        'analytic_account_id': line.salary_rule_id.analytic_account_id.id,\n                        'tax_line_id': line.salary_rule_id.account_tax_id.id,\n                    })\n                    line_ids.append(debit_line)\n                    debit_sum += debit_line[2]['debit'] - debit_line[2]['credit']\n\n                if credit_account_id:\n                    credit_line = (0, 0, {\n                        'name': line.name,\n                        'partner_id': line._get_partner_id(credit_account=True),\n                        'account_id': credit_account_id,\n                        'journal_id': slip.journal_id.id,\n                        'date': date,\n                        'debit': amount < 0.0 and -amount or 0.0,\n                        'credit': amount > 0.0 and amount or 0.0,\n                        'analytic_account_id': line.salary_rule_id.analytic_account_id.id,\n                        'tax_line_id': line.salary_rule_id.account_tax_id.id,\n                    })\n                    line_ids.append(credit_line)\n                    credit_sum += credit_line[2]['credit'] - credit_line[2]['debit']\n\n            if float_compare(credit_sum, debit_sum, precision_digits=precision) == -1:\n                acc_id = slip.journal_id.default_credit_account_id.id\n                if not acc_id:\n                    raise UserError(_('The Expense Journal \"%s\" has not properly configured the Credit Account!') % (slip.journal_id.name))\n                adjust_credit = (0, 0, {\n                    'name': _('Adjustment Entry'),\n                    'partner_id': False,\n                    'account_id': acc_id,\n                    'journal_id': slip.journal_id.id,\n                    'date': date,\n                    'debit': 0.0,\n                    'credit': debit_sum - credit_sum,\n                })\n                line_ids.append(adjust_credit)\n\n            elif float_compare(debit_sum, credit_sum, precision_digits=precision) == -1:\n                acc_id = slip.journal_id.default_debit_account_id.id\n                if not acc_id:\n                    raise UserError(_('The Expense Journal \"%s\" has not properly configured the Debit Account!') % (slip.journal_id.name))\n                adjust_debit = (0, 0, {\n                    'name': _('Adjustment Entry'),\n                    'partner_id': False,\n                    'account_id': acc_id,\n                    'journal_id': slip.journal_id.id,\n                    'date': date,\n                    'debit': credit_sum - debit_sum,\n                    'credit': 0.0,\n                })\n                line_ids.append(adjust_debit)\n            move_dict['line_ids'] = line_ids\n            move = self.env['account.move'].create(move_dict)\n            slip.write({'move_id': move.id, 'date': date})\n            move.post()\n        return super(HrPayslip, self).action_payslip_done()\n\n\nclass HrSalaryRule(models.Model):\n    _inherit = 'hr.salary.rule'\n\n    analytic_account_id = fields.Many2one('account.analytic.account', 'Analytic Account')\n    account_tax_id = fields.Many2one('account.tax', 'Tax')\n    account_debit = fields.Many2one('account.account', 'Debit Account', domain=[('deprecated', '=', False)])\n    account_credit = fields.Many2one('account.account', 'Credit Account', domain=[('deprecated', '=', False)])\n\nclass HrContract(models.Model):\n    _inherit = 'hr.contract'\n    _description = 'Employee Contract'\n\n    analytic_account_id = fields.Many2one('account.analytic.account', 'Analytic Account')\n    journal_id = fields.Many2one('account.journal', 'Salary Journal')\n\nclass HrPayslipRun(models.Model):\n    _inherit = 'hr.payslip.run'\n\n    journal_id = fields.Many2one('account.journal', 'Salary Journal', states={'draft': [('readonly', False)]}, readonly=True,\n        required=True, default=lambda self: self.env['account.journal'].search([('type', '=', 'general')], limit=1))\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "hr_payroll_account.py", "id": "2da0ab355fc08b8447c98f360f9d8833", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_payroll_account/models/hr_payroll_account.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}