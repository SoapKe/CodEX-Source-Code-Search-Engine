{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\"\"\"Small library that points to a data set.\n\nMethods of Data class:\n  data_files: Returns a python list of all (sharded) data set files.\n  num_examples_per_epoch: Returns the number of examples in the data set.\n  num_classes: Returns the number of classes in the data set.\n  reader: Return a reader for a single entry from the data set.\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom abc import ABCMeta\nfrom abc import abstractmethod\nimport os\n\n\nimport tensorflow as tf\n\nFLAGS = tf.app.flags.FLAGS\n\n Basic model parameters.\ntf.app.flags.DEFINE_string('data_dir', '/tmp/mydata',\n                           \"\"\"Path to the processed data, i.e. \"\"\"\n                           \"\"\"TFRecord of Example protos.\"\"\")\n\n\nclass Dataset(object):\n  \"\"\"A simple class for handling data sets.\"\"\"\n  __metaclass__ = ABCMeta\n\n  def __init__(self, name, subset):\n    \"\"\"Initialize dataset using a subset and the path to the data.\"\"\"\n    assert subset in self.available_subsets(), self.available_subsets()\n    self.name = name\n    self.subset = subset\n\n  @abstractmethod\n  def num_classes(self):\n    \"\"\"Returns the number of classes in the data set.\"\"\"\n    pass\n     return 10\n\n  @abstractmethod\n  def num_examples_per_epoch(self):\n    \"\"\"Returns the number of examples in the data subset.\"\"\"\n    pass\n     if self.subset == 'train':\n       return 10000\n     if self.subset == 'validation':\n       return 1000\n\n  @abstractmethod\n  def download_message(self):\n    \"\"\"Prints a download message for the Dataset.\"\"\"\n    pass\n\n  def available_subsets(self):\n    \"\"\"Returns the list of available subsets.\"\"\"\n    return ['train', 'validation']\n\n  def data_files(self):\n    \"\"\"Returns a python list of all (sharded) data subset files.\n\n    Returns:\n      python list of all (sharded) data set files.\n    Raises:\n      ValueError: if there are not data_files matching the subset.\n    \"\"\"\n    tf_record_pattern = os.path.join(FLAGS.data_dir, '%s-*' % self.subset)\n    data_files = tf.gfile.Glob(tf_record_pattern)\n    if not data_files:\n      print('No files found for dataset %s/%s at %s' % (self.name,\n                                                        self.subset,\n                                                        FLAGS.data_dir))\n\n      self.download_message()\n      exit(-1)\n    return data_files\n\n  def reader(self):\n    \"\"\"Return a reader for a single entry from the data set.\n\n    See io_ops.py for details of Reader class.\n\n    Returns:\n      Reader object that reads the data set.\n    \"\"\"\n    return tf.TFRecordReader()\n", "comments": "   small library points data set   methods data class    data files  returns python list (sharded) data set files    num examples per epoch  returns number examples data set    num classes  returns number classes data set    reader  return reader single entry data set        future   import absolute import   future   import division   future   import print function  abc import abcmeta abc import abstractmethod import os   import tensorflow tf  flags   tf app flags flags    basic model parameters  tf app flags define string( data dir     tmp mydata                                 path processed data  e                                    tfrecord example protos    )   class dataset(object)       a simple class handling data sets         metaclass     abcmeta    def   init  (self  name  subset)         initialize dataset using subset path data         assert subset self available subsets()  self available subsets()     self name   name     self subset   subset     abstractmethod   def num classes(self)         returns number classes data set         pass       return 10     abstractmethod   def num examples per epoch(self)         returns number examples data subset         pass       self subset     train           return 10000       self subset     validation           return 1000     abstractmethod   def download message(self)         prints download message dataset         pass    def available subsets(self)         returns list available subsets         return   train    validation      def data files(self)         returns python list (sharded) data subset files       returns        python list (sharded) data set files      raises        valueerror  data files matching subset              tf record pattern   os path join(flags data dir         self subset)     data files   tf gfile glob(tf record pattern)     data files        print( no files found dataset       (self name                                                          self subset                                                          flags data dir))        self download message()       exit( 1)     return data files    def reader(self)         return reader single entry data set       see io ops py details reader class       returns        reader object reads data set             copyright 2016 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       basic model parameters     return 10    self subset     train        return 10000    self subset     validation        return 1000 ", "content": "# Copyright 2016 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Small library that points to a data set.\n\nMethods of Data class:\n  data_files: Returns a python list of all (sharded) data set files.\n  num_examples_per_epoch: Returns the number of examples in the data set.\n  num_classes: Returns the number of classes in the data set.\n  reader: Return a reader for a single entry from the data set.\n\"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nfrom abc import ABCMeta\nfrom abc import abstractmethod\nimport os\n\n\nimport tensorflow as tf\n\nFLAGS = tf.app.flags.FLAGS\n\n# Basic model parameters.\ntf.app.flags.DEFINE_string('data_dir', '/tmp/mydata',\n                           \"\"\"Path to the processed data, i.e. \"\"\"\n                           \"\"\"TFRecord of Example protos.\"\"\")\n\n\nclass Dataset(object):\n  \"\"\"A simple class for handling data sets.\"\"\"\n  __metaclass__ = ABCMeta\n\n  def __init__(self, name, subset):\n    \"\"\"Initialize dataset using a subset and the path to the data.\"\"\"\n    assert subset in self.available_subsets(), self.available_subsets()\n    self.name = name\n    self.subset = subset\n\n  @abstractmethod\n  def num_classes(self):\n    \"\"\"Returns the number of classes in the data set.\"\"\"\n    pass\n    # return 10\n\n  @abstractmethod\n  def num_examples_per_epoch(self):\n    \"\"\"Returns the number of examples in the data subset.\"\"\"\n    pass\n    # if self.subset == 'train':\n    #   return 10000\n    # if self.subset == 'validation':\n    #   return 1000\n\n  @abstractmethod\n  def download_message(self):\n    \"\"\"Prints a download message for the Dataset.\"\"\"\n    pass\n\n  def available_subsets(self):\n    \"\"\"Returns the list of available subsets.\"\"\"\n    return ['train', 'validation']\n\n  def data_files(self):\n    \"\"\"Returns a python list of all (sharded) data subset files.\n\n    Returns:\n      python list of all (sharded) data set files.\n    Raises:\n      ValueError: if there are not data_files matching the subset.\n    \"\"\"\n    tf_record_pattern = os.path.join(FLAGS.data_dir, '%s-*' % self.subset)\n    data_files = tf.gfile.Glob(tf_record_pattern)\n    if not data_files:\n      print('No files found for dataset %s/%s at %s' % (self.name,\n                                                        self.subset,\n                                                        FLAGS.data_dir))\n\n      self.download_message()\n      exit(-1)\n    return data_files\n\n  def reader(self):\n    \"\"\"Return a reader for a single entry from the data set.\n\n    See io_ops.py for details of Reader class.\n\n    Returns:\n      Reader object that reads the data set.\n    \"\"\"\n    return tf.TFRecordReader()\n", "description": "Models and examples built with TensorFlow", "file_name": "dataset.py", "id": "c5df415cf6c954fd1336ac3bfb17f5d6", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/inception/inception/dataset.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}