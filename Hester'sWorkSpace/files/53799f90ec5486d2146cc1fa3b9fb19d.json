{"author": "ansible", "code": "|-y is provided, the prompt for confirmation prior to deleting resources.\nPlease use caution, you can easily delete you're *ENTIRE* EC2 infrastructure.\n'''\n\nimport boto\nimport boto.ec2.elb\nimport optparse\nimport os\nimport os.path\nimport re\nimport sys\nimport time\nimport yaml\n\nfrom ansible.module_utils.six.moves import input\n\n\ndef delete_aws_resources(get_func, attr, opts):\n    for item in get_func():\n        val = getattr(item, attr)\n        if re.search(opts.match_re, val):\n            prompt_and_delete(item, \"Delete matching %s? [y/n]: \" % (item,), opts.assumeyes)\n\n\ndef delete_autoscaling_group(get_func, attr, opts):\n    assumeyes = opts.assumeyes\n    group_name = None\n    for item in get_func():\n        group_name = getattr(item, attr)\n        if re.search(opts.match_re, group_name):\n            if not opts.assumeyes:\n                assumeyes = input(\"Delete matching %s? [y/n]: \" % (item).lower()) == 'y'\n            break\n    if assumeyes and group_name:\n        groups = asg.get_all_groups(names=[group_name])\n        if groups:\n            group = groups[0]\n            group.max_size = 0\n            group.min_size = 0\n            group.desired_capacity = 0\n            group.update()\n            instances = True\n            while instances:\n                tmp_groups = asg.get_all_groups(names=[group_name])\n                if tmp_groups:\n                    tmp_group = tmp_groups[0]\n                    if not tmp_group.instances:\n                        instances = False\n                time.sleep(10)\n\n            group.delete()\n            while len(asg.get_all_groups(names=[group_name])):\n                time.sleep(5)\n            print(\"Terminated ASG: %s\" % group_name)\n\n\ndef delete_aws_eips(get_func, attr, opts):\n\n    \n    try:\n        eip_log = open(opts.eip_log, 'r').read().splitlines()\n    except IOError:\n        print('%s not found.' % opts.eip_log)\n        return\n\n    for item in get_func():\n        val = getattr(item, attr)\n        if val in eip_log:\n            prompt_and_delete(item, \"Delete matching %s? [y/n]: \" % (item,), opts.assumeyes)\n\n\ndef delete_aws_instances(reservation, opts):\n    for list in reservation:\n        for item in list.instances:\n            prompt_and_delete(item, \"Delete matching %s? [y/n]: \" % (item,), opts.assumeyes)\n\n\ndef prompt_and_delete(item, prompt, assumeyes):\n    if not assumeyes:\n        assumeyes = input(prompt).lower() == 'y'\n    assert hasattr(item, 'delete') or hasattr(item, 'terminate'), \"Class <%s> has no delete or terminate attribute\" % item.__class__\n    if assumeyes:\n        if hasattr(item, 'delete'):\n            item.delete()\n            print(\"Deleted %s\" % item)\n        if hasattr(item, 'terminate'):\n            item.terminate()\n            print(\"Terminated %s\" % item)\n\n\ndef parse_args():\n    \n    default_aws_access_key = os.environ.get('AWS_ACCESS_KEY', None)\n    default_aws_secret_key = os.environ.get('AWS_SECRET_KEY', None)\n    if os.path.isfile('credentials.yml'):\n        credentials = yaml.load(open('credentials.yml', 'r'))\n\n        if default_aws_access_key is None:\n            default_aws_access_key = credentials['ec2_access_key']\n        if default_aws_secret_key is None:\n            default_aws_secret_key = credentials['ec2_secret_key']\n\n    parser = optparse.OptionParser(\n        usage=\"%s [options]\" % (sys.argv[0], ),\n        description=__doc__\n    )\n    parser.add_option(\n        \"--access\",\n        action=\"store\", dest=\"ec2_access_key\",\n        default=default_aws_access_key,\n        help=\"Amazon ec2 access id.  Can use EC2_ACCESS_KEY environment variable, or a values from credentials.yml.\"\n    )\n    parser.add_option(\n        \"--secret\",\n        action=\"store\", dest=\"ec2_secret_key\",\n        default=default_aws_secret_key,\n        help=\"Amazon ec2 secret key.  Can use EC2_SECRET_KEY environment variable, or a values from credentials.yml.\"\n    )\n    parser.add_option(\n        \"--eip-log\",\n        action=\"store\", dest=\"eip_log\",\n        default=None,\n        help=\"Path to log of EIPs created during test.\"\n    )\n    parser.add_option(\n        \"--integration-config\",\n        action=\"store\", dest=\"int_config\",\n        default=\"integration_config.yml\",\n        help=\"path to integration config\"\n    )\n    parser.add_option(\n        \"--credentials\", \"-c\",\n        action=\"store\", dest=\"credential_file\",\n        default=\"credentials.yml\",\n        help=\"YAML file to read cloud credentials (default: %default)\"\n    )\n    parser.add_option(\n        \"--yes\", \"-y\",\n        action=\"store_true\", dest=\"assumeyes\",\n        default=False,\n        help=\"Don't prompt for confirmation\"\n    )\n    parser.add_option(\n        \"--match\",\n        action=\"store\", dest=\"match_re\",\n        default=\"^ansible-testing-\",\n        help=\"Regular expression used to find AWS resources (default: %default)\"\n    )\n\n    (opts, args) = parser.parse_args()\n    for required in ['ec2_access_key', 'ec2_secret_key']:\n        if getattr(opts, required) is None:\n            parser.error(\"Missing required parameter: --%s\" % required)\n\n    return (opts, args)\n\n\nif __name__ == '__main__':\n\n    (opts, args) = parse_args()\n\n    int_config = yaml.load(open(opts.int_config).read())\n    if not opts.eip_log:\n        output_dir = os.path.expanduser(int_config[\"output_dir\"])\n        opts.eip_log = output_dir + '/' + opts.match_re.replace('^', '') + '-eip_integration_tests.log'\n\n    \n    aws = boto.connect_ec2(aws_access_key_id=opts.ec2_access_key,\n                           aws_secret_access_key=opts.ec2_secret_key)\n\n    elb = boto.connect_elb(aws_access_key_id=opts.ec2_access_key,\n                           aws_secret_access_key=opts.ec2_secret_key)\n\n    asg = boto.connect_autoscale(aws_access_key_id=opts.ec2_access_key,\n                                 aws_secret_access_key=opts.ec2_secret_key)\n\n    try:\n        \n        delete_aws_resources(aws.get_all_key_pairs, 'name', opts)\n\n        \n        delete_aws_resources(aws.get_all_security_groups, 'name', opts)\n\n        \n        delete_autoscaling_group(asg.get_all_groups, 'name', opts)\n\n        \n        delete_aws_resources(asg.get_all_launch_configurations, 'name', opts)\n\n        \n        delete_aws_resources(elb.get_all_load_balancers, 'name', opts)\n\n        \n        delete_aws_eips(aws.get_all_addresses, 'public_ip', opts)\n\n        \n        filters = {\"tag:Name\": opts.match_re.replace('^', ''), \"instance-state-name\": ['running', 'pending', 'stopped']}\n        delete_aws_instances(aws.get_all_instances(filters=filters), opts)\n\n    except KeyboardInterrupt as e:\n        print(\"\\nExiting on user command.\")\n", "comments": "    find delete aws resources matching provided   match string   unless   yes  provided  prompt confirmation prior deleting resources  please use caution  easily delete  entire  ec2 infrastructure         file might integration test run    load details credentials yml    connect aws    delete matching keys    delete matching security groups    delete matching asgs    delete matching launch configs    delete elbs    delete recorded eips    delete temporary instances ", "content": "'''\nFind and delete AWS resources matching the provided --match string.  Unless\n--yes|-y is provided, the prompt for confirmation prior to deleting resources.\nPlease use caution, you can easily delete you're *ENTIRE* EC2 infrastructure.\n'''\n\nimport boto\nimport boto.ec2.elb\nimport optparse\nimport os\nimport os.path\nimport re\nimport sys\nimport time\nimport yaml\n\nfrom ansible.module_utils.six.moves import input\n\n\ndef delete_aws_resources(get_func, attr, opts):\n    for item in get_func():\n        val = getattr(item, attr)\n        if re.search(opts.match_re, val):\n            prompt_and_delete(item, \"Delete matching %s? [y/n]: \" % (item,), opts.assumeyes)\n\n\ndef delete_autoscaling_group(get_func, attr, opts):\n    assumeyes = opts.assumeyes\n    group_name = None\n    for item in get_func():\n        group_name = getattr(item, attr)\n        if re.search(opts.match_re, group_name):\n            if not opts.assumeyes:\n                assumeyes = input(\"Delete matching %s? [y/n]: \" % (item).lower()) == 'y'\n            break\n    if assumeyes and group_name:\n        groups = asg.get_all_groups(names=[group_name])\n        if groups:\n            group = groups[0]\n            group.max_size = 0\n            group.min_size = 0\n            group.desired_capacity = 0\n            group.update()\n            instances = True\n            while instances:\n                tmp_groups = asg.get_all_groups(names=[group_name])\n                if tmp_groups:\n                    tmp_group = tmp_groups[0]\n                    if not tmp_group.instances:\n                        instances = False\n                time.sleep(10)\n\n            group.delete()\n            while len(asg.get_all_groups(names=[group_name])):\n                time.sleep(5)\n            print(\"Terminated ASG: %s\" % group_name)\n\n\ndef delete_aws_eips(get_func, attr, opts):\n\n    # the file might not be there if the integration test wasn't run\n    try:\n        eip_log = open(opts.eip_log, 'r').read().splitlines()\n    except IOError:\n        print('%s not found.' % opts.eip_log)\n        return\n\n    for item in get_func():\n        val = getattr(item, attr)\n        if val in eip_log:\n            prompt_and_delete(item, \"Delete matching %s? [y/n]: \" % (item,), opts.assumeyes)\n\n\ndef delete_aws_instances(reservation, opts):\n    for list in reservation:\n        for item in list.instances:\n            prompt_and_delete(item, \"Delete matching %s? [y/n]: \" % (item,), opts.assumeyes)\n\n\ndef prompt_and_delete(item, prompt, assumeyes):\n    if not assumeyes:\n        assumeyes = input(prompt).lower() == 'y'\n    assert hasattr(item, 'delete') or hasattr(item, 'terminate'), \"Class <%s> has no delete or terminate attribute\" % item.__class__\n    if assumeyes:\n        if hasattr(item, 'delete'):\n            item.delete()\n            print(\"Deleted %s\" % item)\n        if hasattr(item, 'terminate'):\n            item.terminate()\n            print(\"Terminated %s\" % item)\n\n\ndef parse_args():\n    # Load details from credentials.yml\n    default_aws_access_key = os.environ.get('AWS_ACCESS_KEY', None)\n    default_aws_secret_key = os.environ.get('AWS_SECRET_KEY', None)\n    if os.path.isfile('credentials.yml'):\n        credentials = yaml.load(open('credentials.yml', 'r'))\n\n        if default_aws_access_key is None:\n            default_aws_access_key = credentials['ec2_access_key']\n        if default_aws_secret_key is None:\n            default_aws_secret_key = credentials['ec2_secret_key']\n\n    parser = optparse.OptionParser(\n        usage=\"%s [options]\" % (sys.argv[0], ),\n        description=__doc__\n    )\n    parser.add_option(\n        \"--access\",\n        action=\"store\", dest=\"ec2_access_key\",\n        default=default_aws_access_key,\n        help=\"Amazon ec2 access id.  Can use EC2_ACCESS_KEY environment variable, or a values from credentials.yml.\"\n    )\n    parser.add_option(\n        \"--secret\",\n        action=\"store\", dest=\"ec2_secret_key\",\n        default=default_aws_secret_key,\n        help=\"Amazon ec2 secret key.  Can use EC2_SECRET_KEY environment variable, or a values from credentials.yml.\"\n    )\n    parser.add_option(\n        \"--eip-log\",\n        action=\"store\", dest=\"eip_log\",\n        default=None,\n        help=\"Path to log of EIPs created during test.\"\n    )\n    parser.add_option(\n        \"--integration-config\",\n        action=\"store\", dest=\"int_config\",\n        default=\"integration_config.yml\",\n        help=\"path to integration config\"\n    )\n    parser.add_option(\n        \"--credentials\", \"-c\",\n        action=\"store\", dest=\"credential_file\",\n        default=\"credentials.yml\",\n        help=\"YAML file to read cloud credentials (default: %default)\"\n    )\n    parser.add_option(\n        \"--yes\", \"-y\",\n        action=\"store_true\", dest=\"assumeyes\",\n        default=False,\n        help=\"Don't prompt for confirmation\"\n    )\n    parser.add_option(\n        \"--match\",\n        action=\"store\", dest=\"match_re\",\n        default=\"^ansible-testing-\",\n        help=\"Regular expression used to find AWS resources (default: %default)\"\n    )\n\n    (opts, args) = parser.parse_args()\n    for required in ['ec2_access_key', 'ec2_secret_key']:\n        if getattr(opts, required) is None:\n            parser.error(\"Missing required parameter: --%s\" % required)\n\n    return (opts, args)\n\n\nif __name__ == '__main__':\n\n    (opts, args) = parse_args()\n\n    int_config = yaml.load(open(opts.int_config).read())\n    if not opts.eip_log:\n        output_dir = os.path.expanduser(int_config[\"output_dir\"])\n        opts.eip_log = output_dir + '/' + opts.match_re.replace('^', '') + '-eip_integration_tests.log'\n\n    # Connect to AWS\n    aws = boto.connect_ec2(aws_access_key_id=opts.ec2_access_key,\n                           aws_secret_access_key=opts.ec2_secret_key)\n\n    elb = boto.connect_elb(aws_access_key_id=opts.ec2_access_key,\n                           aws_secret_access_key=opts.ec2_secret_key)\n\n    asg = boto.connect_autoscale(aws_access_key_id=opts.ec2_access_key,\n                                 aws_secret_access_key=opts.ec2_secret_key)\n\n    try:\n        # Delete matching keys\n        delete_aws_resources(aws.get_all_key_pairs, 'name', opts)\n\n        # Delete matching security groups\n        delete_aws_resources(aws.get_all_security_groups, 'name', opts)\n\n        # Delete matching ASGs\n        delete_autoscaling_group(asg.get_all_groups, 'name', opts)\n\n        # Delete matching launch configs\n        delete_aws_resources(asg.get_all_launch_configurations, 'name', opts)\n\n        # Delete ELBs\n        delete_aws_resources(elb.get_all_load_balancers, 'name', opts)\n\n        # Delete recorded EIPs\n        delete_aws_eips(aws.get_all_addresses, 'public_ip', opts)\n\n        # Delete temporary instances\n        filters = {\"tag:Name\": opts.match_re.replace('^', ''), \"instance-state-name\": ['running', 'pending', 'stopped']}\n        delete_aws_instances(aws.get_all_instances(filters=filters), opts)\n\n    except KeyboardInterrupt as e:\n        print(\"\\nExiting on user command.\")\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "cleanup_ec2.py", "id": "53799f90ec5486d2146cc1fa3b9fb19d", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/legacy/cleanup_ec2.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}