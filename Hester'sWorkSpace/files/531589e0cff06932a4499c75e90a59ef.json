{"author": "nvbn", "code": "import subprocess\nfrom thefuck.specific.apt import apt_available\nfrom thefuck.specific.sudo import sudo_support\nfrom thefuck.utils import for_app, eager, replace_command\n\nenabled_by_default = apt_available\n\n\n@for_app('apt', 'apt-get', 'apt-cache')\n@sudo_support\ndef match(command):\n    return 'E: Invalid operation' in command.output\n\n\n@eager\ndef _parse_apt_operations(help_text_lines):\n    is_commands_list = False\n    for line in help_text_lines:\n        line = line.decode().strip()\n        if is_commands_list and line:\n            yield line.split()[0]\n        elif line.startswith('Basic commands:') \\\n                or line.startswith('Most used commands:'):\n            is_commands_list = True\n\n\n@eager\ndef _parse_apt_get_and_cache_operations(help_text_lines):\n    is_commands_list = False\n    for line in help_text_lines:\n        line = line.decode().strip()\n        if is_commands_list:\n            if not line:\n                return\n\n            yield line.split()[0]\n        elif line.startswith('Commands:'):\n            is_commands_list = True\n\n\ndef _get_operations(app):\n    proc = subprocess.Popen([app, '--help'],\n                            stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE)\n    lines = proc.stdout.readlines()\n\n    if app == 'apt':\n        return _parse_apt_operations(lines)\n    else:\n        return _parse_apt_get_and_cache_operations(lines)\n\n\n@sudo_support\ndef get_new_command(command):\n    invalid_operation = command.output.split()[-1]\n    operations = _get_operations(command.script_parts[0])\n    return replace_command(command, invalid_operation, operations)\n", "comments": "", "content": "import subprocess\nfrom thefuck.specific.apt import apt_available\nfrom thefuck.specific.sudo import sudo_support\nfrom thefuck.utils import for_app, eager, replace_command\n\nenabled_by_default = apt_available\n\n\n@for_app('apt', 'apt-get', 'apt-cache')\n@sudo_support\ndef match(command):\n    return 'E: Invalid operation' in command.output\n\n\n@eager\ndef _parse_apt_operations(help_text_lines):\n    is_commands_list = False\n    for line in help_text_lines:\n        line = line.decode().strip()\n        if is_commands_list and line:\n            yield line.split()[0]\n        elif line.startswith('Basic commands:') \\\n                or line.startswith('Most used commands:'):\n            is_commands_list = True\n\n\n@eager\ndef _parse_apt_get_and_cache_operations(help_text_lines):\n    is_commands_list = False\n    for line in help_text_lines:\n        line = line.decode().strip()\n        if is_commands_list:\n            if not line:\n                return\n\n            yield line.split()[0]\n        elif line.startswith('Commands:'):\n            is_commands_list = True\n\n\ndef _get_operations(app):\n    proc = subprocess.Popen([app, '--help'],\n                            stdout=subprocess.PIPE,\n                            stderr=subprocess.PIPE)\n    lines = proc.stdout.readlines()\n\n    if app == 'apt':\n        return _parse_apt_operations(lines)\n    else:\n        return _parse_apt_get_and_cache_operations(lines)\n\n\n@sudo_support\ndef get_new_command(command):\n    invalid_operation = command.output.split()[-1]\n    operations = _get_operations(command.script_parts[0])\n    return replace_command(command, invalid_operation, operations)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "apt_invalid_operation.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/thefuck/rules/apt_invalid_operation.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}