{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.interfaces.threads import Threads\nfrom sentry.testutils import TestCase\n\n\nclass ThreadsTest(TestCase):\n    @fixture\n    def interface(self):\n        return Threads.to_python(\n            dict(\n                values=[\n                    {\n                        'id': 42,\n                        'crashed': False,\n                        'current': True,\n                        'name': 'Main Thread',\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.c',\n                                    'function': 'main',\n                                    'lineno': 1,\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                        'raw_stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': None,\n                                    'lineno': 1,\n                                    'function': '<redacted>',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }\n                ]\n            )\n        )\n\n    def test_basics(self):\n        self.create_event(data={\n            'sentry.interfaces.Exception': self.interface.to_json(),\n        })\n        context = self.interface.get_api_context()\n        assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'\n        assert context['values'][0]['rawStacktrace']['frames'][0]['function'] == '<redacted>'\n        assert context['values'][0]['id'] == 42\n        assert context['values'][0]['name'] == 'Main Thread'\n        assert context['values'][0]['crashed'] is False\n        assert context['values'][0]['current'] is True\n\n    def test_get_hash(self):\n        result = self.interface.get_hash()\n        self.assertEquals(result, [['foo/baz.c', 'main']])\n\n    def test_no_hash(self):\n        interface = Threads.to_python(\n            dict(\n                values=[\n                    {\n                        'id': 42,\n                        'crashed': False,\n                        'current': True,\n                        'name': 'Main Thread',\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.c',\n                                    'function': 'main',\n                                    'lineno': 1,\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                        'raw_stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': None,\n                                    'lineno': 1,\n                                    'function': '<redacted>',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }, {\n                        'id': 43,\n                        'crashed': False,\n                        'current': True,\n                        'name': 'Main Thread',\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.c',\n                                    'function': 'main',\n                                    'lineno': 1,\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                        'raw_stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': None,\n                                    'lineno': 1,\n                                    'function': '<redacted>',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }\n                ]\n            )\n        )\n        result = interface.get_hash()\n        assert not result\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nfrom exam import fixture\n\nfrom sentry.interfaces.threads import Threads\nfrom sentry.testutils import TestCase\n\n\nclass ThreadsTest(TestCase):\n    @fixture\n    def interface(self):\n        return Threads.to_python(\n            dict(\n                values=[\n                    {\n                        'id': 42,\n                        'crashed': False,\n                        'current': True,\n                        'name': 'Main Thread',\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.c',\n                                    'function': 'main',\n                                    'lineno': 1,\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                        'raw_stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': None,\n                                    'lineno': 1,\n                                    'function': '<redacted>',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }\n                ]\n            )\n        )\n\n    def test_basics(self):\n        self.create_event(data={\n            'sentry.interfaces.Exception': self.interface.to_json(),\n        })\n        context = self.interface.get_api_context()\n        assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'\n        assert context['values'][0]['rawStacktrace']['frames'][0]['function'] == '<redacted>'\n        assert context['values'][0]['id'] == 42\n        assert context['values'][0]['name'] == 'Main Thread'\n        assert context['values'][0]['crashed'] is False\n        assert context['values'][0]['current'] is True\n\n    def test_get_hash(self):\n        result = self.interface.get_hash()\n        self.assertEquals(result, [['foo/baz.c', 'main']])\n\n    def test_no_hash(self):\n        interface = Threads.to_python(\n            dict(\n                values=[\n                    {\n                        'id': 42,\n                        'crashed': False,\n                        'current': True,\n                        'name': 'Main Thread',\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.c',\n                                    'function': 'main',\n                                    'lineno': 1,\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                        'raw_stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': None,\n                                    'lineno': 1,\n                                    'function': '<redacted>',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }, {\n                        'id': 43,\n                        'crashed': False,\n                        'current': True,\n                        'name': 'Main Thread',\n                        'stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': 'foo/baz.c',\n                                    'function': 'main',\n                                    'lineno': 1,\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                        'raw_stacktrace': {\n                            'frames': [\n                                {\n                                    'filename': None,\n                                    'lineno': 1,\n                                    'function': '<redacted>',\n                                    'in_app': True,\n                                }\n                            ]\n                        },\n                    }\n                ]\n            )\n        )\n        result = interface.get_hash()\n        assert not result\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_threads.py", "id": "1198d597bd41643add25ad62a23dcb92", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/interfaces/test_threads.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}