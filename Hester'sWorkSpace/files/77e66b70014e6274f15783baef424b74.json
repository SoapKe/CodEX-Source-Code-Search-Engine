{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom hashlib import md5\nfrom base64 import b64encode\nfrom datetime import datetime\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_str,\n    compat_itertools_count,\n)\nfrom ..utils import (\n    sanitized_Request,\n    float_or_none,\n)\n\n\nclass NetEaseMusicBaseIE(InfoExtractor):\n    _FORMATS = ['bMusic', 'mMusic', 'hMusic']\n    _NETEASE_SALT = '3go8&$8*3*3h0k(2)2'\n    _API_BASE = 'http://music.163.com/api/'\n\n    @classmethod\n    def _encrypt(cls, dfsid):\n        salt_bytes = bytearray(cls._NETEASE_SALT.encode('utf-8'))\n        string_bytes = bytearray(compat_str(dfsid).encode('ascii'))\n        salt_len = len(salt_bytes)\n        for i in range(len(string_bytes)):\n            string_bytes[i] = string_bytes[i] ^ salt_bytes[i % salt_len]\n        m = md5()\n        m.update(bytes(string_bytes))\n        result = b64encode(m.digest()).decode('ascii')\n        return result.replace('/', '_').replace('+', '-')\n\n    def extract_formats(self, info):\n        formats = []\n        for song_format in self._FORMATS:\n            details = info.get(song_format)\n            if not details:\n                continue\n            song_file_path = '/%s/%s.%s' % (\n                self._encrypt(details['dfsId']), details['dfsId'], details['extension'])\n\n            \n            \n            \n            \n            for host in ('http://m5.music.126.net', 'http://115.231.74.139/m1.music.126.net',\n                         'http://124.40.233.182/m1.music.126.net', 'http://203.130.59.9/m1.music.126.net'):\n                song_url = host + song_file_path\n                if self._is_valid_url(song_url, info['id'], 'song'):\n                    formats.append({\n                        'url': song_url,\n                        'ext': details.get('extension'),\n                        'abr': float_or_none(details.get('bitrate'), scale=1000),\n                        'format_id': song_format,\n                        'filesize': details.get('size'),\n                        'asr': details.get('sr')\n                    })\n                    break\n        return formats\n\n    @classmethod\n    def convert_milliseconds(cls, ms):\n        return int(round(ms / 1000.0))\n\n    def query_api(self, endpoint, video_id, note):\n        req = sanitized_Request('%s%s' % (self._API_BASE, endpoint))\n        req.add_header('Referer', self._API_BASE)\n        return self._download_json(req, video_id, note)\n\n\nclass NetEaseMusicIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:song'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50'\n    _VALID_URL = r'https?://music\\.163\\.com/(\n    _TESTS = [{\n        'url': 'http://music.163.com/\n        'md5': 'f2e97280e6345c74ba9d5677dd5dcb45',\n        'info_dict': {\n            'id': '32102397',\n            'ext': 'mp3',\n            'title': 'Bad Blood (feat. Kendrick Lamar)',\n            'creator': 'Taylor Swift / Kendrick Lamar',\n            'upload_date': '20150517',\n            'timestamp': 1431878400,\n            'description': 'md5:a10a54589c2860300d02e1de821eb2ef',\n        },\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'No lyrics translation.',\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '29822014',\n            'ext': 'mp3',\n            'title': '\u542c\u89c1\u4e0b\u96e8\u7684\u58f0\u97f3',\n            'creator': '\u5468\u6770\u4f26',\n            'upload_date': '20141225',\n            'timestamp': 1419523200,\n            'description': 'md5:a4d8d89f44656af206b7b2555c0bce6c',\n        },\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'No lyrics.',\n        'url': 'http://music.163.com/song?id=17241424',\n        'info_dict': {\n            'id': '17241424',\n            'ext': 'mp3',\n            'title': 'Opus 28',\n            'creator': 'Dustin O\\'Halloran',\n            'upload_date': '20080211',\n            'timestamp': 1202745600,\n        },\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'Has translated name.',\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '22735043',\n            'ext': 'mp3',\n            'title': '\uc18c\uc6d0\uc744 \ub9d0\ud574\ubd10 (Genie)',\n            'creator': '\u5c11\u5973\u65f6\u4ee3',\n            'description': 'md5:79d99cc560e4ca97e0c4d86800ee4184',\n            'upload_date': '20100127',\n            'timestamp': 1264608000,\n            'alt_title': '\u8bf4\u51fa\u613f\u671b\u5427(Genie)',\n        },\n        'skip': 'Blocked outside Mainland China',\n    }]\n\n    def _process_lyrics(self, lyrics_info):\n        original = lyrics_info.get('lrc', {}).get('lyric')\n        translated = lyrics_info.get('tlyric', {}).get('lyric')\n\n        if not translated:\n            return original\n\n        lyrics_expr = r'(\\[[0-9]{2}:[0-9]{2}\\.[0-9]{2,}\\])([^\\n]+)'\n        original_ts_texts = re.findall(lyrics_expr, original)\n        translation_ts_dict = dict(\n            (time_stamp, text) for time_stamp, text in re.findall(lyrics_expr, translated)\n        )\n        lyrics = '\\n'.join([\n            '%s%s / %s' % (time_stamp, text, translation_ts_dict.get(time_stamp, ''))\n            for time_stamp, text in original_ts_texts\n        ])\n        return lyrics\n\n    def _real_extract(self, url):\n        song_id = self._match_id(url)\n\n        params = {\n            'id': song_id,\n            'ids': '[%s]' % song_id\n        }\n        info = self.query_api(\n            'song/detail?' + compat_urllib_parse_urlencode(params),\n            song_id, 'Downloading song info')['songs'][0]\n\n        formats = self.extract_formats(info)\n        self._sort_formats(formats)\n\n        lyrics_info = self.query_api(\n            'song/lyric?id=%s&lv=-1&tv=-1' % song_id,\n            song_id, 'Downloading lyrics data')\n        lyrics = self._process_lyrics(lyrics_info)\n\n        alt_title = None\n        if info.get('transNames'):\n            alt_title = '/'.join(info.get('transNames'))\n\n        return {\n            'id': song_id,\n            'title': info['name'],\n            'alt_title': alt_title,\n            'creator': ' / '.join([artist['name'] for artist in info.get('artists', [])]),\n            'timestamp': self.convert_milliseconds(info.get('album', {}).get('publishTime')),\n            'thumbnail': info.get('album', {}).get('picUrl'),\n            'duration': self.convert_milliseconds(info.get('duration', 0)),\n            'description': lyrics,\n            'formats': formats,\n        }\n\n\nclass NetEaseMusicAlbumIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:album'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u4e13\u8f91'\n    _VALID_URL = r'https?://music\\.163\\.com/(\n    _TEST = {\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '220780',\n            'title': 'B\\'day',\n        },\n        'playlist_count': 23,\n        'skip': 'Blocked outside Mainland China',\n    }\n\n    def _real_extract(self, url):\n        album_id = self._match_id(url)\n\n        info = self.query_api(\n            'album/%s?id=%s' % (album_id, album_id),\n            album_id, 'Downloading album data')['album']\n\n        name = info['name']\n        desc = info.get('description')\n        entries = [\n            self.url_result('http://music.163.com/\n                            'NetEaseMusic', song['id'])\n            for song in info['songs']\n        ]\n        return self.playlist_result(entries, album_id, name, desc)\n\n\nclass NetEaseMusicSingerIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:singer'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u6b4c\u624b'\n    _VALID_URL = r'https?://music\\.163\\.com/(\n    _TESTS = [{\n        'note': 'Singer has aliases.',\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '10559',\n            'title': '\u5f20\u60e0\u59b9 - aMEI;\u963f\u5bc6\u7279',\n        },\n        'playlist_count': 50,\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'Singer has translated name.',\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '124098',\n            'title': '\u674e\u6607\u57fa - \uc774\uc2b9\uae30',\n        },\n        'playlist_count': 50,\n        'skip': 'Blocked outside Mainland China',\n    }]\n\n    def _real_extract(self, url):\n        singer_id = self._match_id(url)\n\n        info = self.query_api(\n            'artist/%s?id=%s' % (singer_id, singer_id),\n            singer_id, 'Downloading singer data')\n\n        name = info['artist']['name']\n        if info['artist']['trans']:\n            name = '%s - %s' % (name, info['artist']['trans'])\n        if info['artist']['alias']:\n            name = '%s - %s' % (name, ';'.join(info['artist']['alias']))\n\n        entries = [\n            self.url_result('http://music.163.com/\n                            'NetEaseMusic', song['id'])\n            for song in info['hotSongs']\n        ]\n        return self.playlist_result(entries, singer_id, name)\n\n\nclass NetEaseMusicListIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:playlist'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u6b4c\u5355'\n    _VALID_URL = r'https?://music\\.163\\.com/(\n    _TESTS = [{\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '79177352',\n            'title': 'Billboard 2007 Top 100',\n            'description': 'md5:12fd0819cab2965b9583ace0f8b7b022'\n        },\n        'playlist_count': 99,\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'Toplist/Charts sample',\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '3733003',\n            'title': 're:\u97e9\u56fdMelon\u6392\u884c\u699c\u5468\u699c [0-9]{4}-[0-9]{2}-[0-9]{2}',\n            'description': 'md5:73ec782a612711cadc7872d9c1e134fc',\n        },\n        'playlist_count': 50,\n        'skip': 'Blocked outside Mainland China',\n    }]\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        info = self.query_api(\n            'playlist/detail?id=%s&lv=-1&tv=-1' % list_id,\n            list_id, 'Downloading playlist data')['result']\n\n        name = info['name']\n        desc = info.get('description')\n\n        if info.get('specialType') == 10:  \n            datestamp = datetime.fromtimestamp(\n                self.convert_milliseconds(info['updateTime'])).strftime('%Y-%m-%d')\n            name = '%s %s' % (name, datestamp)\n\n        entries = [\n            self.url_result('http://music.163.com/\n                            'NetEaseMusic', song['id'])\n            for song in info['tracks']\n        ]\n        return self.playlist_result(entries, list_id, name, desc)\n\n\nclass NetEaseMusicMvIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:mv'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - MV'\n    _VALID_URL = r'https?://music\\.163\\.com/(\n    _TEST = {\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '415350',\n            'ext': 'mp4',\n            'title': '\uc774\ub7f4\uac70\uba74 \uadf8\ub7ec\uc9c0\ub9d0\uc9c0',\n            'description': '\u767d\u96c5\u8a00\u81ea\u4f5c\u66f2\u5531\u751c\u871c\u7231\u60c5',\n            'creator': '\u767d\u96c5\u8a00',\n            'upload_date': '20150520',\n        },\n        'skip': 'Blocked outside Mainland China',\n    }\n\n    def _real_extract(self, url):\n        mv_id = self._match_id(url)\n\n        info = self.query_api(\n            'mv/detail?id=%s&type=mp4' % mv_id,\n            mv_id, 'Downloading mv info')['data']\n\n        formats = [\n            {'url': mv_url, 'ext': 'mp4', 'format_id': '%sp' % brs, 'height': int(brs)}\n            for brs, mv_url in info['brs'].items()\n        ]\n        self._sort_formats(formats)\n\n        return {\n            'id': mv_id,\n            'title': info['name'],\n            'description': info.get('desc') or info.get('briefDesc'),\n            'creator': info['artistName'],\n            'upload_date': info['publishTime'].replace('-', ''),\n            'formats': formats,\n            'thumbnail': info.get('cover'),\n            'duration': self.convert_milliseconds(info.get('duration', 0)),\n        }\n\n\nclass NetEaseMusicProgramIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:program'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u7535\u53f0\u8282\u76ee'\n    _VALID_URL = r'https?://music\\.163\\.com/(\n    _TESTS = [{\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '10109055',\n            'ext': 'mp3',\n            'title': '\u4e0d\u4e39\u8db3\u7403\u80cc\u540e\u7684\u6545\u4e8b',\n            'description': '\u559c\u9a6c\u62c9\u96c5\u4eba\u7684\u8db3\u7403\u68a6 ...',\n            'creator': '\u5927\u8bdd\u897f\u85cf',\n            'timestamp': 1434179342,\n            'upload_date': '20150613',\n            'duration': 900,\n        },\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'This program has accompanying songs.',\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '10141022',\n            'title': '25\u5c81\uff0c\u4f60\u662f\u81ea\u5728\u5982\u98ce\u7684\u5c11\u5e74<27\u00b0C>',\n            'description': 'md5:8d594db46cc3e6509107ede70a4aaa3b',\n        },\n        'playlist_count': 4,\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'This program has accompanying songs.',\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '10141022',\n            'ext': 'mp3',\n            'title': '25\u5c81\uff0c\u4f60\u662f\u81ea\u5728\u5982\u98ce\u7684\u5c11\u5e74<27\u00b0C>',\n            'description': 'md5:8d594db46cc3e6509107ede70a4aaa3b',\n            'timestamp': 1434450841,\n            'upload_date': '20150616',\n        },\n        'params': {\n            'noplaylist': True\n        },\n        'skip': 'Blocked outside Mainland China',\n    }]\n\n    def _real_extract(self, url):\n        program_id = self._match_id(url)\n\n        info = self.query_api(\n            'dj/program/detail?id=%s' % program_id,\n            program_id, 'Downloading program info')['program']\n\n        name = info['name']\n        description = info['description']\n\n        if not info['songs'] or self._downloader.params.get('noplaylist'):\n            if info['songs']:\n                self.to_screen(\n                    'Downloading just the main audio %s because of --no-playlist'\n                    % info['mainSong']['id'])\n\n            formats = self.extract_formats(info['mainSong'])\n            self._sort_formats(formats)\n\n            return {\n                'id': program_id,\n                'title': name,\n                'description': description,\n                'creator': info['dj']['brand'],\n                'timestamp': self.convert_milliseconds(info['createTime']),\n                'thumbnail': info['coverUrl'],\n                'duration': self.convert_milliseconds(info.get('duration', 0)),\n                'formats': formats,\n            }\n\n        self.to_screen(\n            'Downloading playlist %s - add --no-playlist to just download the main audio %s'\n            % (program_id, info['mainSong']['id']))\n\n        song_ids = [info['mainSong']['id']]\n        song_ids.extend([song['id'] for song in info['songs']])\n        entries = [\n            self.url_result('http://music.163.com/\n                            'NetEaseMusic', song_id)\n            for song_id in song_ids\n        ]\n        return self.playlist_result(entries, program_id, name, description)\n\n\nclass NetEaseMusicDjRadioIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:djradio'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u7535\u53f0'\n    _VALID_URL = r'https?://music\\.163\\.com/(\n    _TEST = {\n        'url': 'http://music.163.com/\n        'info_dict': {\n            'id': '42',\n            'title': '\u58f0\u97f3\u8513\u5ef6',\n            'description': 'md5:766220985cbd16fdd552f64c578a6b15'\n        },\n        'playlist_mincount': 40,\n        'skip': 'Blocked outside Mainland China',\n    }\n    _PAGE_SIZE = 1000\n\n    def _real_extract(self, url):\n        dj_id = self._match_id(url)\n\n        name = None\n        desc = None\n        entries = []\n        for offset in compat_itertools_count(start=0, step=self._PAGE_SIZE):\n            info = self.query_api(\n                'dj/program/byradio?asc=false&limit=%d&radioId=%s&offset=%d'\n                % (self._PAGE_SIZE, dj_id, offset),\n                dj_id, 'Downloading dj programs - %d' % offset)\n\n            entries.extend([\n                self.url_result(\n                    'http://music.163.com/\n                    'NetEaseMusicProgram', program['id'])\n                for program in info['programs']\n            ])\n\n            if name is None:\n                radio = info['programs'][0]['radio']\n                name = radio['name']\n                desc = radio['desc']\n\n            if not info['more']:\n                break\n\n        return self.playlist_result(entries, dj_id, name, desc)\n", "comments": "# coding: utf-8\n# 203.130.59.9, 124.40.233.182, 115.231.74.139, etc is a reverse proxy-like feature\n# from NetEase's CDN provider that can be used if m5.music.126.net does not\n# work, especially for users outside of Mainland China\n# via: https://github.com/JixunMoe/unblock-163/issues/3#issuecomment-163115880\n#/)?song\\?id=(?P<id>[0-9]+)'\n#/song?id=32102397',\n#/song?id=29822014',\n#/song?id=22735043',\n#/)?album\\?id=(?P<id>[0-9]+)'\n#/album?id=220780',\n#/song?id=%s' % song['id'],\n#/)?artist\\?id=(?P<id>[0-9]+)'\n#/artist?id=10559',\n#/artist?id=124098',\n#/song?id=%s' % song['id'],\n#/)?(playlist|discover/toplist)\\?id=(?P<id>[0-9]+)'\n#/playlist?id=79177352',\n#/discover/toplist?id=3733003',\n# is a chart/toplist\n#/song?id=%s' % song['id'],\n#/)?mv\\?id=(?P<id>[0-9]+)'\n#/mv?id=415350',\n#/?)program\\?id=(?P<id>[0-9]+)'\n#/program?id=10109055',\n#/program?id=10141022',\n#/program?id=10141022',\n#/song?id=%s' % song_id,\n#/)?djradio\\?id=(?P<id>[0-9]+)'\n#/djradio?id=42',\n#/program?id=%s' % program['id'],\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom hashlib import md5\nfrom base64 import b64encode\nfrom datetime import datetime\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlencode,\n    compat_str,\n    compat_itertools_count,\n)\nfrom ..utils import (\n    sanitized_Request,\n    float_or_none,\n)\n\n\nclass NetEaseMusicBaseIE(InfoExtractor):\n    _FORMATS = ['bMusic', 'mMusic', 'hMusic']\n    _NETEASE_SALT = '3go8&$8*3*3h0k(2)2'\n    _API_BASE = 'http://music.163.com/api/'\n\n    @classmethod\n    def _encrypt(cls, dfsid):\n        salt_bytes = bytearray(cls._NETEASE_SALT.encode('utf-8'))\n        string_bytes = bytearray(compat_str(dfsid).encode('ascii'))\n        salt_len = len(salt_bytes)\n        for i in range(len(string_bytes)):\n            string_bytes[i] = string_bytes[i] ^ salt_bytes[i % salt_len]\n        m = md5()\n        m.update(bytes(string_bytes))\n        result = b64encode(m.digest()).decode('ascii')\n        return result.replace('/', '_').replace('+', '-')\n\n    def extract_formats(self, info):\n        formats = []\n        for song_format in self._FORMATS:\n            details = info.get(song_format)\n            if not details:\n                continue\n            song_file_path = '/%s/%s.%s' % (\n                self._encrypt(details['dfsId']), details['dfsId'], details['extension'])\n\n            # 203.130.59.9, 124.40.233.182, 115.231.74.139, etc is a reverse proxy-like feature\n            # from NetEase's CDN provider that can be used if m5.music.126.net does not\n            # work, especially for users outside of Mainland China\n            # via: https://github.com/JixunMoe/unblock-163/issues/3#issuecomment-163115880\n            for host in ('http://m5.music.126.net', 'http://115.231.74.139/m1.music.126.net',\n                         'http://124.40.233.182/m1.music.126.net', 'http://203.130.59.9/m1.music.126.net'):\n                song_url = host + song_file_path\n                if self._is_valid_url(song_url, info['id'], 'song'):\n                    formats.append({\n                        'url': song_url,\n                        'ext': details.get('extension'),\n                        'abr': float_or_none(details.get('bitrate'), scale=1000),\n                        'format_id': song_format,\n                        'filesize': details.get('size'),\n                        'asr': details.get('sr')\n                    })\n                    break\n        return formats\n\n    @classmethod\n    def convert_milliseconds(cls, ms):\n        return int(round(ms / 1000.0))\n\n    def query_api(self, endpoint, video_id, note):\n        req = sanitized_Request('%s%s' % (self._API_BASE, endpoint))\n        req.add_header('Referer', self._API_BASE)\n        return self._download_json(req, video_id, note)\n\n\nclass NetEaseMusicIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:song'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50'\n    _VALID_URL = r'https?://music\\.163\\.com/(#/)?song\\?id=(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://music.163.com/#/song?id=32102397',\n        'md5': 'f2e97280e6345c74ba9d5677dd5dcb45',\n        'info_dict': {\n            'id': '32102397',\n            'ext': 'mp3',\n            'title': 'Bad Blood (feat. Kendrick Lamar)',\n            'creator': 'Taylor Swift / Kendrick Lamar',\n            'upload_date': '20150517',\n            'timestamp': 1431878400,\n            'description': 'md5:a10a54589c2860300d02e1de821eb2ef',\n        },\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'No lyrics translation.',\n        'url': 'http://music.163.com/#/song?id=29822014',\n        'info_dict': {\n            'id': '29822014',\n            'ext': 'mp3',\n            'title': '\u542c\u89c1\u4e0b\u96e8\u7684\u58f0\u97f3',\n            'creator': '\u5468\u6770\u4f26',\n            'upload_date': '20141225',\n            'timestamp': 1419523200,\n            'description': 'md5:a4d8d89f44656af206b7b2555c0bce6c',\n        },\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'No lyrics.',\n        'url': 'http://music.163.com/song?id=17241424',\n        'info_dict': {\n            'id': '17241424',\n            'ext': 'mp3',\n            'title': 'Opus 28',\n            'creator': 'Dustin O\\'Halloran',\n            'upload_date': '20080211',\n            'timestamp': 1202745600,\n        },\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'Has translated name.',\n        'url': 'http://music.163.com/#/song?id=22735043',\n        'info_dict': {\n            'id': '22735043',\n            'ext': 'mp3',\n            'title': '\uc18c\uc6d0\uc744 \ub9d0\ud574\ubd10 (Genie)',\n            'creator': '\u5c11\u5973\u65f6\u4ee3',\n            'description': 'md5:79d99cc560e4ca97e0c4d86800ee4184',\n            'upload_date': '20100127',\n            'timestamp': 1264608000,\n            'alt_title': '\u8bf4\u51fa\u613f\u671b\u5427(Genie)',\n        },\n        'skip': 'Blocked outside Mainland China',\n    }]\n\n    def _process_lyrics(self, lyrics_info):\n        original = lyrics_info.get('lrc', {}).get('lyric')\n        translated = lyrics_info.get('tlyric', {}).get('lyric')\n\n        if not translated:\n            return original\n\n        lyrics_expr = r'(\\[[0-9]{2}:[0-9]{2}\\.[0-9]{2,}\\])([^\\n]+)'\n        original_ts_texts = re.findall(lyrics_expr, original)\n        translation_ts_dict = dict(\n            (time_stamp, text) for time_stamp, text in re.findall(lyrics_expr, translated)\n        )\n        lyrics = '\\n'.join([\n            '%s%s / %s' % (time_stamp, text, translation_ts_dict.get(time_stamp, ''))\n            for time_stamp, text in original_ts_texts\n        ])\n        return lyrics\n\n    def _real_extract(self, url):\n        song_id = self._match_id(url)\n\n        params = {\n            'id': song_id,\n            'ids': '[%s]' % song_id\n        }\n        info = self.query_api(\n            'song/detail?' + compat_urllib_parse_urlencode(params),\n            song_id, 'Downloading song info')['songs'][0]\n\n        formats = self.extract_formats(info)\n        self._sort_formats(formats)\n\n        lyrics_info = self.query_api(\n            'song/lyric?id=%s&lv=-1&tv=-1' % song_id,\n            song_id, 'Downloading lyrics data')\n        lyrics = self._process_lyrics(lyrics_info)\n\n        alt_title = None\n        if info.get('transNames'):\n            alt_title = '/'.join(info.get('transNames'))\n\n        return {\n            'id': song_id,\n            'title': info['name'],\n            'alt_title': alt_title,\n            'creator': ' / '.join([artist['name'] for artist in info.get('artists', [])]),\n            'timestamp': self.convert_milliseconds(info.get('album', {}).get('publishTime')),\n            'thumbnail': info.get('album', {}).get('picUrl'),\n            'duration': self.convert_milliseconds(info.get('duration', 0)),\n            'description': lyrics,\n            'formats': formats,\n        }\n\n\nclass NetEaseMusicAlbumIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:album'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u4e13\u8f91'\n    _VALID_URL = r'https?://music\\.163\\.com/(#/)?album\\?id=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://music.163.com/#/album?id=220780',\n        'info_dict': {\n            'id': '220780',\n            'title': 'B\\'day',\n        },\n        'playlist_count': 23,\n        'skip': 'Blocked outside Mainland China',\n    }\n\n    def _real_extract(self, url):\n        album_id = self._match_id(url)\n\n        info = self.query_api(\n            'album/%s?id=%s' % (album_id, album_id),\n            album_id, 'Downloading album data')['album']\n\n        name = info['name']\n        desc = info.get('description')\n        entries = [\n            self.url_result('http://music.163.com/#/song?id=%s' % song['id'],\n                            'NetEaseMusic', song['id'])\n            for song in info['songs']\n        ]\n        return self.playlist_result(entries, album_id, name, desc)\n\n\nclass NetEaseMusicSingerIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:singer'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u6b4c\u624b'\n    _VALID_URL = r'https?://music\\.163\\.com/(#/)?artist\\?id=(?P<id>[0-9]+)'\n    _TESTS = [{\n        'note': 'Singer has aliases.',\n        'url': 'http://music.163.com/#/artist?id=10559',\n        'info_dict': {\n            'id': '10559',\n            'title': '\u5f20\u60e0\u59b9 - aMEI;\u963f\u5bc6\u7279',\n        },\n        'playlist_count': 50,\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'Singer has translated name.',\n        'url': 'http://music.163.com/#/artist?id=124098',\n        'info_dict': {\n            'id': '124098',\n            'title': '\u674e\u6607\u57fa - \uc774\uc2b9\uae30',\n        },\n        'playlist_count': 50,\n        'skip': 'Blocked outside Mainland China',\n    }]\n\n    def _real_extract(self, url):\n        singer_id = self._match_id(url)\n\n        info = self.query_api(\n            'artist/%s?id=%s' % (singer_id, singer_id),\n            singer_id, 'Downloading singer data')\n\n        name = info['artist']['name']\n        if info['artist']['trans']:\n            name = '%s - %s' % (name, info['artist']['trans'])\n        if info['artist']['alias']:\n            name = '%s - %s' % (name, ';'.join(info['artist']['alias']))\n\n        entries = [\n            self.url_result('http://music.163.com/#/song?id=%s' % song['id'],\n                            'NetEaseMusic', song['id'])\n            for song in info['hotSongs']\n        ]\n        return self.playlist_result(entries, singer_id, name)\n\n\nclass NetEaseMusicListIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:playlist'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u6b4c\u5355'\n    _VALID_URL = r'https?://music\\.163\\.com/(#/)?(playlist|discover/toplist)\\?id=(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://music.163.com/#/playlist?id=79177352',\n        'info_dict': {\n            'id': '79177352',\n            'title': 'Billboard 2007 Top 100',\n            'description': 'md5:12fd0819cab2965b9583ace0f8b7b022'\n        },\n        'playlist_count': 99,\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'Toplist/Charts sample',\n        'url': 'http://music.163.com/#/discover/toplist?id=3733003',\n        'info_dict': {\n            'id': '3733003',\n            'title': 're:\u97e9\u56fdMelon\u6392\u884c\u699c\u5468\u699c [0-9]{4}-[0-9]{2}-[0-9]{2}',\n            'description': 'md5:73ec782a612711cadc7872d9c1e134fc',\n        },\n        'playlist_count': 50,\n        'skip': 'Blocked outside Mainland China',\n    }]\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n\n        info = self.query_api(\n            'playlist/detail?id=%s&lv=-1&tv=-1' % list_id,\n            list_id, 'Downloading playlist data')['result']\n\n        name = info['name']\n        desc = info.get('description')\n\n        if info.get('specialType') == 10:  # is a chart/toplist\n            datestamp = datetime.fromtimestamp(\n                self.convert_milliseconds(info['updateTime'])).strftime('%Y-%m-%d')\n            name = '%s %s' % (name, datestamp)\n\n        entries = [\n            self.url_result('http://music.163.com/#/song?id=%s' % song['id'],\n                            'NetEaseMusic', song['id'])\n            for song in info['tracks']\n        ]\n        return self.playlist_result(entries, list_id, name, desc)\n\n\nclass NetEaseMusicMvIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:mv'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - MV'\n    _VALID_URL = r'https?://music\\.163\\.com/(#/)?mv\\?id=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://music.163.com/#/mv?id=415350',\n        'info_dict': {\n            'id': '415350',\n            'ext': 'mp4',\n            'title': '\uc774\ub7f4\uac70\uba74 \uadf8\ub7ec\uc9c0\ub9d0\uc9c0',\n            'description': '\u767d\u96c5\u8a00\u81ea\u4f5c\u66f2\u5531\u751c\u871c\u7231\u60c5',\n            'creator': '\u767d\u96c5\u8a00',\n            'upload_date': '20150520',\n        },\n        'skip': 'Blocked outside Mainland China',\n    }\n\n    def _real_extract(self, url):\n        mv_id = self._match_id(url)\n\n        info = self.query_api(\n            'mv/detail?id=%s&type=mp4' % mv_id,\n            mv_id, 'Downloading mv info')['data']\n\n        formats = [\n            {'url': mv_url, 'ext': 'mp4', 'format_id': '%sp' % brs, 'height': int(brs)}\n            for brs, mv_url in info['brs'].items()\n        ]\n        self._sort_formats(formats)\n\n        return {\n            'id': mv_id,\n            'title': info['name'],\n            'description': info.get('desc') or info.get('briefDesc'),\n            'creator': info['artistName'],\n            'upload_date': info['publishTime'].replace('-', ''),\n            'formats': formats,\n            'thumbnail': info.get('cover'),\n            'duration': self.convert_milliseconds(info.get('duration', 0)),\n        }\n\n\nclass NetEaseMusicProgramIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:program'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u7535\u53f0\u8282\u76ee'\n    _VALID_URL = r'https?://music\\.163\\.com/(#/?)program\\?id=(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://music.163.com/#/program?id=10109055',\n        'info_dict': {\n            'id': '10109055',\n            'ext': 'mp3',\n            'title': '\u4e0d\u4e39\u8db3\u7403\u80cc\u540e\u7684\u6545\u4e8b',\n            'description': '\u559c\u9a6c\u62c9\u96c5\u4eba\u7684\u8db3\u7403\u68a6 ...',\n            'creator': '\u5927\u8bdd\u897f\u85cf',\n            'timestamp': 1434179342,\n            'upload_date': '20150613',\n            'duration': 900,\n        },\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'This program has accompanying songs.',\n        'url': 'http://music.163.com/#/program?id=10141022',\n        'info_dict': {\n            'id': '10141022',\n            'title': '25\u5c81\uff0c\u4f60\u662f\u81ea\u5728\u5982\u98ce\u7684\u5c11\u5e74<27\u00b0C>',\n            'description': 'md5:8d594db46cc3e6509107ede70a4aaa3b',\n        },\n        'playlist_count': 4,\n        'skip': 'Blocked outside Mainland China',\n    }, {\n        'note': 'This program has accompanying songs.',\n        'url': 'http://music.163.com/#/program?id=10141022',\n        'info_dict': {\n            'id': '10141022',\n            'ext': 'mp3',\n            'title': '25\u5c81\uff0c\u4f60\u662f\u81ea\u5728\u5982\u98ce\u7684\u5c11\u5e74<27\u00b0C>',\n            'description': 'md5:8d594db46cc3e6509107ede70a4aaa3b',\n            'timestamp': 1434450841,\n            'upload_date': '20150616',\n        },\n        'params': {\n            'noplaylist': True\n        },\n        'skip': 'Blocked outside Mainland China',\n    }]\n\n    def _real_extract(self, url):\n        program_id = self._match_id(url)\n\n        info = self.query_api(\n            'dj/program/detail?id=%s' % program_id,\n            program_id, 'Downloading program info')['program']\n\n        name = info['name']\n        description = info['description']\n\n        if not info['songs'] or self._downloader.params.get('noplaylist'):\n            if info['songs']:\n                self.to_screen(\n                    'Downloading just the main audio %s because of --no-playlist'\n                    % info['mainSong']['id'])\n\n            formats = self.extract_formats(info['mainSong'])\n            self._sort_formats(formats)\n\n            return {\n                'id': program_id,\n                'title': name,\n                'description': description,\n                'creator': info['dj']['brand'],\n                'timestamp': self.convert_milliseconds(info['createTime']),\n                'thumbnail': info['coverUrl'],\n                'duration': self.convert_milliseconds(info.get('duration', 0)),\n                'formats': formats,\n            }\n\n        self.to_screen(\n            'Downloading playlist %s - add --no-playlist to just download the main audio %s'\n            % (program_id, info['mainSong']['id']))\n\n        song_ids = [info['mainSong']['id']]\n        song_ids.extend([song['id'] for song in info['songs']])\n        entries = [\n            self.url_result('http://music.163.com/#/song?id=%s' % song_id,\n                            'NetEaseMusic', song_id)\n            for song_id in song_ids\n        ]\n        return self.playlist_result(entries, program_id, name, description)\n\n\nclass NetEaseMusicDjRadioIE(NetEaseMusicBaseIE):\n    IE_NAME = 'netease:djradio'\n    IE_DESC = '\u7f51\u6613\u4e91\u97f3\u4e50 - \u7535\u53f0'\n    _VALID_URL = r'https?://music\\.163\\.com/(#/)?djradio\\?id=(?P<id>[0-9]+)'\n    _TEST = {\n        'url': 'http://music.163.com/#/djradio?id=42',\n        'info_dict': {\n            'id': '42',\n            'title': '\u58f0\u97f3\u8513\u5ef6',\n            'description': 'md5:766220985cbd16fdd552f64c578a6b15'\n        },\n        'playlist_mincount': 40,\n        'skip': 'Blocked outside Mainland China',\n    }\n    _PAGE_SIZE = 1000\n\n    def _real_extract(self, url):\n        dj_id = self._match_id(url)\n\n        name = None\n        desc = None\n        entries = []\n        for offset in compat_itertools_count(start=0, step=self._PAGE_SIZE):\n            info = self.query_api(\n                'dj/program/byradio?asc=false&limit=%d&radioId=%s&offset=%d'\n                % (self._PAGE_SIZE, dj_id, offset),\n                dj_id, 'Downloading dj programs - %d' % offset)\n\n            entries.extend([\n                self.url_result(\n                    'http://music.163.com/#/program?id=%s' % program['id'],\n                    'NetEaseMusicProgram', program['id'])\n                for program in info['programs']\n            ])\n\n            if name is None:\n                radio = info['programs'][0]['radio']\n                name = radio['name']\n                desc = radio['desc']\n\n            if not info['more']:\n                break\n\n        return self.playlist_result(entries, dj_id, name, desc)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "neteasemusic.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/neteasemusic.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}