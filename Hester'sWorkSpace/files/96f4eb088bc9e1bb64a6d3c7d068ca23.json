{"author": "webpy", "code": "\nfrom __future__ import print_function\nimport pytest\nimport os\nimport unittest\nimport web\nimport importlib\nimport warnings\n\nfrom web.py3helpers import PY2\n\ndef try_import(name):\n    try:\n        return importlib.import_module(name)\n    except ImportError:\n        return None\n\ndef requires_module(name):\n    module = try_import(name)\n\n    \n    #return pytest.mark.skipif(module is None, reason=\"requires {} module\".format(name))\n\n    def decorator(cls):\n        if module:\n            return cls\n        else:\n            class Foo:\n                pass\n            print(\"skipping all tests from {} as {} module is not found\".format(cls.__name__, name))\n            return Foo\n\n    return decorator\n\ndef setup_database(dbname, driver=None, pooling=False):\n    if dbname == 'sqlite':\n        db = web.database(dbn=dbname, db='webpy.db', pooling=pooling, driver=driver)\n    elif dbname == 'postgres':\n        user = os.getenv('USER')\n        db = web.database(dbn=dbname, db='webpy', user=user, pw='', pooling=pooling, driver=driver)\n    else:\n        db = web.database(dbn=dbname, db='webpy', user='scott', pw='tiger', pooling=pooling, driver=driver)\n\n    db.printing = True\n    return db\n\n\nclass DBTest(unittest.TestCase):\n    dbname = 'postgres'\n    driver = None\n\n    def setUp(self):\n        self.db = setup_database(self.dbname, driver=self.driver)\n        self.db.query(\"CREATE TABLE person (name text, email text, active boolean)\")\n\n    def tearDown(self):\n        \n        self.db = setup_database(self.dbname, driver=self.driver)\n        self.db.query('DROP TABLE person')\n\n    def _testable(self):\n        try:\n            setup_database(self.dbname, driver=self.driver)\n            print(\"Running tests for %s\" % self.__class__.__name__, file=web.debug)\n            return True\n        except ImportError as e:\n            print(str(e), \"(ignoring %s)\" % self.__class__.__name__, file=web.debug)\n            return False\n\n    def testUnicode(self):\n        \n        self.db.select('person', where='name=$name', vars={'name': u'\\xf4'})\n\n    def assertRows(self, n):\n        result = self.db.select('person')\n        self.assertEquals(len(list(result)), n)\n\n    def testCommit(self):\n        t = self.db.transaction()\n        self.db.insert('person', False, name='user1')\n        t.commit()\n\n        t = self.db.transaction()\n        self.db.insert('person', False, name='user2')\n        self.db.insert('person', False, name='user3')\n        t.commit()\n\n        self.assertRows(3)\n\n    def testRollback(self):\n        t = self.db.transaction()\n        self.db.insert('person', False, name='user1')\n        self.db.insert('person', False, name='user2')\n        self.db.insert('person', False, name='user3')\n        t.rollback()\n        self.assertRows(0)\n\n    def testWrongQuery(self):\n        \n        try:\n            self.db.select('notthere')\n        except:\n            pass\n        self.db.select('person')\n\n    def testNestedTransactions(self):\n        t1 = self.db.transaction()\n        self.db.insert('person', False, name='user1')\n        self.assertRows(1)\n\n        t2 = self.db.transaction()\n        self.db.insert('person', False, name='user2')\n        self.assertRows(2)\n        t2.rollback()\n        self.assertRows(1)\n        t3 = self.db.transaction()\n        self.db.insert('person', False, name='user3')\n        self.assertRows(2)\n        t3.commit()\n        t1.commit()\n        self.assertRows(2)\n\n    def testPooling(self):\n        \n        try:\n            import DBUtils\n        except ImportError:\n            return\n        db = setup_database(self.dbname, pooling=True)\n        self.assertEquals(db.ctx.db.__class__.__module__, 'DBUtils.PooledDB')\n        db.select('person', limit=1)\n\n    def test_multiple_insert(self):\n        db = setup_database(self.dbname)\n        db.multiple_insert('person', [dict(name='a'), dict(name='b')], seqname=False)\n\n        assert db.select(\"person\", where=\"name='a'\").list()\n        assert db.select(\"person\", where=\"name='b'\").list()\n\n    def test_result_is_unicode(self):\n        \n        db = setup_database(self.dbname)\n        self.db.insert('person', False, name='user')\n        name = db.select('person')[0].name\n        self.assertEquals(type(name), unicode if PY2 else str)\n\n    def test_result_is_true(self):\n        db = setup_database(self.dbname)\n        self.db.insert('person', False, name='user')\n        self.assertEquals(bool(db.select('person')), True)\n\n    def testBoolean(self):\n        def t(active):\n            name ='name-%s' % active\n            self.db.insert('person', False, name=name, active=active)\n            a = self.db.select('person', where='name=$name', vars=locals())[0].active\n            self.assertEquals(a, active)\n        t(False)\n        t(True)\n\n    def test_insert_default_values(self):\n        db = setup_database(self.dbname)\n        db.insert(\"person\")\n\n    def test_where(self):\n        db = setup_database(self.dbname)\n        db.insert(\"person\", False, name=\"Foo\")\n        d = db.where(\"person\", name=\"Foo\").list()\n        assert len(d) == 1\n        d = db.where(\"person\").list()\n        assert len(d) == 1\n\n@requires_module(\"psycopg2\")\nclass PostgresTest2(DBTest):\n    dbname = \"postgres\"\n    driver = \"psycopg2\"\n\n    def test_limit_with_unsafe_value(self):\n        db = setup_database(self.dbname)\n        db.insert(\"person\", False, name=\"Foo\")\n        assert len(db.select(\"person\").list()) == 1\n\n        try:\n            db.select(\"person\", limit=\"1; DELETE FROM person;\")\n        except db.db_module.Error:\n            \n            pass\n\n        assert len(db.select(\"person\").list()) == 1\n\n    def test_offset_with_unsafe_value(self):\n        db = setup_database(self.dbname)\n        db.insert(\"person\", False, name=\"Foo\")\n        assert len(db.select(\"person\").list()) == 1\n\n        try:\n            db.select(\"person\", offset=\"1; DELETE FROM person;\")\n        except db.db_module.Error:\n            \n            pass\n\n        assert len(db.select(\"person\").list()) == 1\n\n@requires_module(\"psycopg\")\nclass PostgresTest_psycopg(PostgresTest2):\n    driver = \"psycopg\"\n\n@requires_module(\"pgdb\")\nclass PostgresTest_pgdb(PostgresTest2):\n    driver = \"pgdb\"\n\n@requires_module(\"sqlite3\")\nclass SqliteTest(DBTest):\n    dbname = \"sqlite\"\n    driver = \"sqlite3\"\n\n    def testNestedTransactions(self):\n        \n        pass\n\n    def testPooling(self):\n        \n        pass\n\n@requires_module(\"pysqlite2.dbapi2\")\nclass SqliteTest_pysqlite2(SqliteTest):\n    driver = \"pysqlite2.dbapi2\"\n\n@requires_module(\"MySQLdb\")\nclass MySQLTest_MySQLdb(DBTest):\n    dbname = \"mysql\"\n    driver = \"MySQLdb\"\n\n    def setUp(self):\n        self.db = setup_database(self.dbname)\n        \n        self.db.query(\"CREATE TABLE person (name text, email text) ENGINE=INNODB\")\n\n    def testBoolean(self):\n        # boolean datatype is not suppoted in MySQL (at least until v5.0)\n        pass\n\n@requires_module(\"pymysql\")\nclass MySQLTest_PyMySQL(MySQLTest_MySQLdb):\n    driver=\"pymysql\"\n\n@requires_module(\"mysql.connector\")\nclass MySQLTest_MySQLConnector(MySQLTest_MySQLdb):\n    driver=\"mysql.connector\"\n\ndel DBTest\n\n", "comments": "   db test        seem working  the simple decorator seems working    return pytest mark skipif(module none  reason  requires    module  format(name))    might error current connection  delete new connection    bug 177265  unicode queries throw errors    it possible run correct query getting error wrong query     test pooling dbutils installed   todo   sure test still meaning py3    it alright db engine rejects query    it alright db engine rejects query   nested transactions work sqlite    pooling support sqlite    in mysql  transactions supported innodb engine     boolean datatype suppoted mysql (at least v5 0) ", "content": "\"\"\"DB test\"\"\"\nfrom __future__ import print_function\nimport pytest\nimport os\nimport unittest\nimport web\nimport importlib\nimport warnings\n\nfrom web.py3helpers import PY2\n\ndef try_import(name):\n    try:\n        return importlib.import_module(name)\n    except ImportError:\n        return None\n\ndef requires_module(name):\n    module = try_import(name)\n\n    ## this doesn't seem to be working. The simple decorator below seems to be working.\n    #return pytest.mark.skipif(module is None, reason=\"requires {} module\".format(name))\n\n    def decorator(cls):\n        if module:\n            return cls\n        else:\n            class Foo:\n                pass\n            print(\"skipping all tests from {} as {} module is not found\".format(cls.__name__, name))\n            return Foo\n\n    return decorator\n\ndef setup_database(dbname, driver=None, pooling=False):\n    if dbname == 'sqlite':\n        db = web.database(dbn=dbname, db='webpy.db', pooling=pooling, driver=driver)\n    elif dbname == 'postgres':\n        user = os.getenv('USER')\n        db = web.database(dbn=dbname, db='webpy', user=user, pw='', pooling=pooling, driver=driver)\n    else:\n        db = web.database(dbn=dbname, db='webpy', user='scott', pw='tiger', pooling=pooling, driver=driver)\n\n    db.printing = True\n    return db\n\n\nclass DBTest(unittest.TestCase):\n    dbname = 'postgres'\n    driver = None\n\n    def setUp(self):\n        self.db = setup_database(self.dbname, driver=self.driver)\n        self.db.query(\"CREATE TABLE person (name text, email text, active boolean)\")\n\n    def tearDown(self):\n        # there might be some error with the current connection, delete from a new connection\n        self.db = setup_database(self.dbname, driver=self.driver)\n        self.db.query('DROP TABLE person')\n\n    def _testable(self):\n        try:\n            setup_database(self.dbname, driver=self.driver)\n            print(\"Running tests for %s\" % self.__class__.__name__, file=web.debug)\n            return True\n        except ImportError as e:\n            print(str(e), \"(ignoring %s)\" % self.__class__.__name__, file=web.debug)\n            return False\n\n    def testUnicode(self):\n        # Bug#177265: unicode queries throw errors\n        self.db.select('person', where='name=$name', vars={'name': u'\\xf4'})\n\n    def assertRows(self, n):\n        result = self.db.select('person')\n        self.assertEquals(len(list(result)), n)\n\n    def testCommit(self):\n        t = self.db.transaction()\n        self.db.insert('person', False, name='user1')\n        t.commit()\n\n        t = self.db.transaction()\n        self.db.insert('person', False, name='user2')\n        self.db.insert('person', False, name='user3')\n        t.commit()\n\n        self.assertRows(3)\n\n    def testRollback(self):\n        t = self.db.transaction()\n        self.db.insert('person', False, name='user1')\n        self.db.insert('person', False, name='user2')\n        self.db.insert('person', False, name='user3')\n        t.rollback()\n        self.assertRows(0)\n\n    def testWrongQuery(self):\n        # It should be possible to run a correct query after getting an error from a wrong query.\n        try:\n            self.db.select('notthere')\n        except:\n            pass\n        self.db.select('person')\n\n    def testNestedTransactions(self):\n        t1 = self.db.transaction()\n        self.db.insert('person', False, name='user1')\n        self.assertRows(1)\n\n        t2 = self.db.transaction()\n        self.db.insert('person', False, name='user2')\n        self.assertRows(2)\n        t2.rollback()\n        self.assertRows(1)\n        t3 = self.db.transaction()\n        self.db.insert('person', False, name='user3')\n        self.assertRows(2)\n        t3.commit()\n        t1.commit()\n        self.assertRows(2)\n\n    def testPooling(self):\n        # can't test pooling if DBUtils is not installed\n        try:\n            import DBUtils\n        except ImportError:\n            return\n        db = setup_database(self.dbname, pooling=True)\n        self.assertEquals(db.ctx.db.__class__.__module__, 'DBUtils.PooledDB')\n        db.select('person', limit=1)\n\n    def test_multiple_insert(self):\n        db = setup_database(self.dbname)\n        db.multiple_insert('person', [dict(name='a'), dict(name='b')], seqname=False)\n\n        assert db.select(\"person\", where=\"name='a'\").list()\n        assert db.select(\"person\", where=\"name='b'\").list()\n\n    def test_result_is_unicode(self):\n        #TODO : not sure this test has still meaning with Py3\n        db = setup_database(self.dbname)\n        self.db.insert('person', False, name='user')\n        name = db.select('person')[0].name\n        self.assertEquals(type(name), unicode if PY2 else str)\n\n    def test_result_is_true(self):\n        db = setup_database(self.dbname)\n        self.db.insert('person', False, name='user')\n        self.assertEquals(bool(db.select('person')), True)\n\n    def testBoolean(self):\n        def t(active):\n            name ='name-%s' % active\n            self.db.insert('person', False, name=name, active=active)\n            a = self.db.select('person', where='name=$name', vars=locals())[0].active\n            self.assertEquals(a, active)\n        t(False)\n        t(True)\n\n    def test_insert_default_values(self):\n        db = setup_database(self.dbname)\n        db.insert(\"person\")\n\n    def test_where(self):\n        db = setup_database(self.dbname)\n        db.insert(\"person\", False, name=\"Foo\")\n        d = db.where(\"person\", name=\"Foo\").list()\n        assert len(d) == 1\n        d = db.where(\"person\").list()\n        assert len(d) == 1\n\n@requires_module(\"psycopg2\")\nclass PostgresTest2(DBTest):\n    dbname = \"postgres\"\n    driver = \"psycopg2\"\n\n    def test_limit_with_unsafe_value(self):\n        db = setup_database(self.dbname)\n        db.insert(\"person\", False, name=\"Foo\")\n        assert len(db.select(\"person\").list()) == 1\n\n        try:\n            db.select(\"person\", limit=\"1; DELETE FROM person;\")\n        except db.db_module.Error:\n            # It is alright if the db engine rejects this query\n            pass\n\n        assert len(db.select(\"person\").list()) == 1\n\n    def test_offset_with_unsafe_value(self):\n        db = setup_database(self.dbname)\n        db.insert(\"person\", False, name=\"Foo\")\n        assert len(db.select(\"person\").list()) == 1\n\n        try:\n            db.select(\"person\", offset=\"1; DELETE FROM person;\")\n        except db.db_module.Error:\n            # It is alright if the db engine rejects this query\n            pass\n\n        assert len(db.select(\"person\").list()) == 1\n\n@requires_module(\"psycopg\")\nclass PostgresTest_psycopg(PostgresTest2):\n    driver = \"psycopg\"\n\n@requires_module(\"pgdb\")\nclass PostgresTest_pgdb(PostgresTest2):\n    driver = \"pgdb\"\n\n@requires_module(\"sqlite3\")\nclass SqliteTest(DBTest):\n    dbname = \"sqlite\"\n    driver = \"sqlite3\"\n\n    def testNestedTransactions(self):\n        #nested transactions does not work with sqlite\n        pass\n\n    def testPooling(self):\n        # pooling is not support for sqlite\n        pass\n\n@requires_module(\"pysqlite2.dbapi2\")\nclass SqliteTest_pysqlite2(SqliteTest):\n    driver = \"pysqlite2.dbapi2\"\n\n@requires_module(\"MySQLdb\")\nclass MySQLTest_MySQLdb(DBTest):\n    dbname = \"mysql\"\n    driver = \"MySQLdb\"\n\n    def setUp(self):\n        self.db = setup_database(self.dbname)\n        # In mysql, transactions are supported only with INNODB engine.\n        self.db.query(\"CREATE TABLE person (name text, email text) ENGINE=INNODB\")\n\n    def testBoolean(self):\n        # boolean datatype is not suppoted in MySQL (at least until v5.0)\n        pass\n\n@requires_module(\"pymysql\")\nclass MySQLTest_PyMySQL(MySQLTest_MySQLdb):\n    driver=\"pymysql\"\n\n@requires_module(\"mysql.connector\")\nclass MySQLTest_MySQLConnector(MySQLTest_MySQLdb):\n    driver=\"mysql.connector\"\n\ndel DBTest\n\n", "description": "web.py is a web framework for python that is as simple as it is powerful. ", "file_name": "test_db.py", "id": "96f4eb088bc9e1bb64a6d3c7d068ca23", "language": "Python", "project_name": "webpy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/webpy-webpy/webpy-webpy-817c979/tests/test_db.py", "save_time": "", "source": "", "update_at": "2018-03-16T08:06:22Z", "url": "https://github.com/webpy/webpy", "wiki": false}