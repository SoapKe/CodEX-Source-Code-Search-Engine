{"author": "donnemartin", "code": "from nose.tools import assert_equal\n\n\nclass TestPartition(object):\n\n    def test_partition(self):\n        print('Test: Empty list')\n        linked_list = MyLinkedList(None)\n        linked_list.partition(10)\n        assert_equal(linked_list.get_all_data(), [])\n\n        print('Test: One element list, left list empty')\n        linked_list = MyLinkedList(Node(5))\n        linked_list.partition(0)\n        assert_equal(linked_list.get_all_data(), [5])\n\n        print('Test: Right list is empty')\n        linked_list = MyLinkedList(Node(5))\n        linked_list.partition(10)\n        assert_equal(linked_list.get_all_data(), [5])\n\n        print('Test: General case')\n        \n        \n        \n        linked_list = MyLinkedList(Node(12))\n        linked_list.insert_to_front(10)\n        linked_list.insert_to_front(14)\n        linked_list.insert_to_front(1)\n        linked_list.insert_to_front(10)\n        linked_list.insert_to_front(8)\n        linked_list.insert_to_front(13)\n        linked_list.insert_to_front(3)\n        linked_list.insert_to_front(4)\n        partitioned_list = linked_list.partition(10)\n        assert_equal(partitioned_list.get_all_data(),\n                     [4, 3, 8, 1, 10, 10, 13, 14, 12])\n\n        print('Success: test_partition')\n\n\ndef main():\n    test = TestPartition()\n    test.test_partition()\n\n\nif __name__ == '__main__':\n    main()", "comments": "  partition   10    input  4  3  13  8  10  1  14  10  12    output  4  3  8  1  10  10  13  14  12 ", "content": "from nose.tools import assert_equal\n\n\nclass TestPartition(object):\n\n    def test_partition(self):\n        print('Test: Empty list')\n        linked_list = MyLinkedList(None)\n        linked_list.partition(10)\n        assert_equal(linked_list.get_all_data(), [])\n\n        print('Test: One element list, left list empty')\n        linked_list = MyLinkedList(Node(5))\n        linked_list.partition(0)\n        assert_equal(linked_list.get_all_data(), [5])\n\n        print('Test: Right list is empty')\n        linked_list = MyLinkedList(Node(5))\n        linked_list.partition(10)\n        assert_equal(linked_list.get_all_data(), [5])\n\n        print('Test: General case')\n        # Partition = 10\n        # Input: 4, 3, 13, 8, 10, 1, 14, 10, 12\n        # Output: 4, 3, 8, 1, 10, 10, 13, 14, 12\n        linked_list = MyLinkedList(Node(12))\n        linked_list.insert_to_front(10)\n        linked_list.insert_to_front(14)\n        linked_list.insert_to_front(1)\n        linked_list.insert_to_front(10)\n        linked_list.insert_to_front(8)\n        linked_list.insert_to_front(13)\n        linked_list.insert_to_front(3)\n        linked_list.insert_to_front(4)\n        partitioned_list = linked_list.partition(10)\n        assert_equal(partitioned_list.get_all_data(),\n                     [4, 3, 8, 1, 10, 10, 13, 14, 12])\n\n        print('Success: test_partition')\n\n\ndef main():\n    test = TestPartition()\n    test.test_partition()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_partition.py", "id": "75acc89a18f4f1b9a4e2400299be5717", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/linked_lists/partition/test_partition.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}