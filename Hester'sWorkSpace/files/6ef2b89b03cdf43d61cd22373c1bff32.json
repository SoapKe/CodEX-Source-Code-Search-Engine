{"author": "django", "code": "from django.contrib.postgres.search import TrigramDistance, TrigramSimilarity\nfrom django.test import modify_settings\n\nfrom . import PostgreSQLTestCase\nfrom .models import CharFieldModel, TextFieldModel\n\n\n@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\nclass TrigramTest(PostgreSQLTestCase):\n    Model = CharFieldModel\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.Model.objects.bulk_create([\n            cls.Model(field='Matthew'),\n            cls.Model(field='Cat sat on mat.'),\n            cls.Model(field='Dog sat on rug.'),\n        ])\n\n    def test_trigram_search(self):\n        self.assertQuerysetEqual(\n            self.Model.objects.filter(field__trigram_similar='Mathew'),\n            ['Matthew'],\n            transform=lambda instance: instance.field,\n        )\n\n    def test_trigram_similarity(self):\n        search = 'Bat sat on cat.'\n        self.assertQuerysetEqual(\n            self.Model.objects.filter(\n                field__trigram_similar=search,\n            ).annotate(similarity=TrigramSimilarity('field', search)).order_by('-similarity'),\n            [('Cat sat on mat.', 0.625), ('Dog sat on rug.', 0.333333)],\n            transform=lambda instance: (instance.field, instance.similarity),\n            ordered=True,\n        )\n\n    def test_trigram_similarity_alternate(self):\n        self.assertQuerysetEqual(\n            self.Model.objects.annotate(\n                distance=TrigramDistance('field', 'Bat sat on cat.'),\n            ).filter(distance__lte=0.7).order_by('distance'),\n            [('Cat sat on mat.', 0.375), ('Dog sat on rug.', 0.666667)],\n            transform=lambda instance: (instance.field, instance.distance),\n            ordered=True,\n        )\n\n\nclass TrigramTextFieldTest(TrigramTest):\n    \n    Model = TextFieldModel\n", "comments": "        textfield behavior charfield regarding trigram lookups          ", "content": "from django.contrib.postgres.search import TrigramDistance, TrigramSimilarity\nfrom django.test import modify_settings\n\nfrom . import PostgreSQLTestCase\nfrom .models import CharFieldModel, TextFieldModel\n\n\n@modify_settings(INSTALLED_APPS={'append': 'django.contrib.postgres'})\nclass TrigramTest(PostgreSQLTestCase):\n    Model = CharFieldModel\n\n    @classmethod\n    def setUpTestData(cls):\n        cls.Model.objects.bulk_create([\n            cls.Model(field='Matthew'),\n            cls.Model(field='Cat sat on mat.'),\n            cls.Model(field='Dog sat on rug.'),\n        ])\n\n    def test_trigram_search(self):\n        self.assertQuerysetEqual(\n            self.Model.objects.filter(field__trigram_similar='Mathew'),\n            ['Matthew'],\n            transform=lambda instance: instance.field,\n        )\n\n    def test_trigram_similarity(self):\n        search = 'Bat sat on cat.'\n        self.assertQuerysetEqual(\n            self.Model.objects.filter(\n                field__trigram_similar=search,\n            ).annotate(similarity=TrigramSimilarity('field', search)).order_by('-similarity'),\n            [('Cat sat on mat.', 0.625), ('Dog sat on rug.', 0.333333)],\n            transform=lambda instance: (instance.field, instance.similarity),\n            ordered=True,\n        )\n\n    def test_trigram_similarity_alternate(self):\n        self.assertQuerysetEqual(\n            self.Model.objects.annotate(\n                distance=TrigramDistance('field', 'Bat sat on cat.'),\n            ).filter(distance__lte=0.7).order_by('distance'),\n            [('Cat sat on mat.', 0.375), ('Dog sat on rug.', 0.666667)],\n            transform=lambda instance: (instance.field, instance.distance),\n            ordered=True,\n        )\n\n\nclass TrigramTextFieldTest(TrigramTest):\n    \"\"\"\n    TextField has the same behavior as CharField regarding trigram lookups.\n    \"\"\"\n    Model = TextFieldModel\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_trigram.py", "id": "6ef2b89b03cdf43d61cd22373c1bff32", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/django-django/django-django-274e3e2/tests/postgres_tests/test_trigram.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:39:10Z", "url": "https://github.com/django/django", "wiki": false}