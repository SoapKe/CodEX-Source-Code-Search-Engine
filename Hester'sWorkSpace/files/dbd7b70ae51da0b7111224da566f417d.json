{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n)\n\n\nclass AirMozillaIE(InfoExtractor):\n    _VALID_URL = r'https?://air\\.mozilla\\.org/(?P<id>[0-9a-z-]+)/?'\n    _TEST = {\n        'url': 'https://air.mozilla.org/privacy-lab-a-meetup-for-privacy-minded-people-in-san-francisco/',\n        'md5': '8d02f53ee39cf006009180e21df1f3ba',\n        'info_dict': {\n            'id': '6x4q2w',\n            'ext': 'mp4',\n            'title': 'Privacy Lab - a meetup for privacy minded people in San Francisco',\n            'thumbnail': r're:https?://.*/poster\\.jpg',\n            'description': 'Brings together privacy professionals and others interested in privacy at for-profits, non-profits, and NGOs in an effort to contribute to the state of the ecosystem...',\n            'timestamp': 1422487800,\n            'upload_date': '20150128',\n            'location': 'SFO Commons',\n            'duration': 3780,\n            'view_count': int,\n            'categories': ['Main', 'Privacy'],\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._html_search_regex(r'//vid\\.ly/(.*?)/embed', webpage, 'id')\n\n        embed_script = self._download_webpage('https://vid.ly/{0}/embed'.format(video_id), video_id)\n        jwconfig = self._parse_json(self._search_regex(\n            r'initCallback\\((.*)\\);', embed_script, 'metadata'), video_id)['config']\n\n        info_dict = self._parse_jwplayer_data(jwconfig, video_id)\n        view_count = int_or_none(self._html_search_regex(\n            r'Views since archived: ([0-9]+)',\n            webpage, 'view count', fatal=False))\n        timestamp = parse_iso8601(self._html_search_regex(\n            r'<time datetime=\"(.*?)\"', webpage, 'timestamp', fatal=False))\n        duration = parse_duration(self._search_regex(\n            r'Duration:\\s*(\\d+\\s*hours?\\s*\\d+\\s*minutes?)',\n            webpage, 'duration', fatal=False))\n\n        info_dict.update({\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'url': self._og_search_url(webpage),\n            'display_id': display_id,\n            'description': self._og_search_description(webpage),\n            'timestamp': timestamp,\n            'location': self._html_search_regex(r'Location: (.*)', webpage, 'location', default=None),\n            'duration': duration,\n            'view_count': view_count,\n            'categories': re.findall(r'<a href=\".*?\" class=\"channel\">(.*?)</a>', webpage),\n        })\n\n        return info_dict\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    parse_duration,\n    parse_iso8601,\n)\n\n\nclass AirMozillaIE(InfoExtractor):\n    _VALID_URL = r'https?://air\\.mozilla\\.org/(?P<id>[0-9a-z-]+)/?'\n    _TEST = {\n        'url': 'https://air.mozilla.org/privacy-lab-a-meetup-for-privacy-minded-people-in-san-francisco/',\n        'md5': '8d02f53ee39cf006009180e21df1f3ba',\n        'info_dict': {\n            'id': '6x4q2w',\n            'ext': 'mp4',\n            'title': 'Privacy Lab - a meetup for privacy minded people in San Francisco',\n            'thumbnail': r're:https?://.*/poster\\.jpg',\n            'description': 'Brings together privacy professionals and others interested in privacy at for-profits, non-profits, and NGOs in an effort to contribute to the state of the ecosystem...',\n            'timestamp': 1422487800,\n            'upload_date': '20150128',\n            'location': 'SFO Commons',\n            'duration': 3780,\n            'view_count': int,\n            'categories': ['Main', 'Privacy'],\n        }\n    }\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n        webpage = self._download_webpage(url, display_id)\n        video_id = self._html_search_regex(r'//vid\\.ly/(.*?)/embed', webpage, 'id')\n\n        embed_script = self._download_webpage('https://vid.ly/{0}/embed'.format(video_id), video_id)\n        jwconfig = self._parse_json(self._search_regex(\n            r'initCallback\\((.*)\\);', embed_script, 'metadata'), video_id)['config']\n\n        info_dict = self._parse_jwplayer_data(jwconfig, video_id)\n        view_count = int_or_none(self._html_search_regex(\n            r'Views since archived: ([0-9]+)',\n            webpage, 'view count', fatal=False))\n        timestamp = parse_iso8601(self._html_search_regex(\n            r'<time datetime=\"(.*?)\"', webpage, 'timestamp', fatal=False))\n        duration = parse_duration(self._search_regex(\n            r'Duration:\\s*(\\d+\\s*hours?\\s*\\d+\\s*minutes?)',\n            webpage, 'duration', fatal=False))\n\n        info_dict.update({\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'url': self._og_search_url(webpage),\n            'display_id': display_id,\n            'description': self._og_search_description(webpage),\n            'timestamp': timestamp,\n            'location': self._html_search_regex(r'Location: (.*)', webpage, 'location', default=None),\n            'duration': duration,\n            'view_count': view_count,\n            'categories': re.findall(r'<a href=\".*?\" class=\"channel\">(.*?)</a>', webpage),\n        })\n\n        return info_dict\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "airmozilla.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/airmozilla.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}