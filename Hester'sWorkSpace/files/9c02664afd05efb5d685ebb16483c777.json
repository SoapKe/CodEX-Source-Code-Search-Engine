{"author": "mitmproxy", "code": "import os\nimport re\nimport glob\nimport sys\n\n\ndef check_src_files_have_test():\n    missing_test_files = []\n\n    excluded = ['mitmproxy/contrib/', 'mitmproxy/test/', 'mitmproxy/tools/', 'mitmproxy/platform/']\n    src_files = glob.glob('mitmproxy/**/*.py', recursive=True) + glob.glob('pathod/**/*.py', recursive=True)\n    src_files = [f for f in src_files if os.path.basename(f) != '__init__.py']\n    src_files = [f for f in src_files if not any(os.path.normpath(p) in f for p in excluded)]\n    for f in src_files:\n        p = os.path.join(\"test\", os.path.dirname(f), \"test_\" + os.path.basename(f))\n        if not os.path.isfile(p):\n            missing_test_files.append((f, p))\n\n    return missing_test_files\n\n\ndef check_test_files_have_src():\n    unknown_test_files = []\n\n    excluded = ['test/mitmproxy/data/', 'test/mitmproxy/net/data/', '/tservers.py', '/conftest.py']\n    test_files = glob.glob('test/mitmproxy/**/*.py', recursive=True) + glob.glob('test/pathod/**/*.py', recursive=True)\n    test_files = [f for f in test_files if os.path.basename(f) != '__init__.py']\n    test_files = [f for f in test_files if not any(os.path.normpath(p) in f for p in excluded)]\n    for f in test_files:\n        p = os.path.join(re.sub('^test/', '', os.path.dirname(f)), re.sub('^test_', '', os.path.basename(f)))\n        if not os.path.isfile(p):\n            unknown_test_files.append((f, p))\n\n    return unknown_test_files\n\n\ndef main():\n    exitcode = 0\n\n    missing_test_files = check_src_files_have_test()\n    if missing_test_files:\n        exitcode += 1\n        for f, p in sorted(missing_test_files):\n            print(\"{} MUST have a matching test file: {}\".format(f, p))\n\n    unknown_test_files = check_test_files_have_src()\n    if unknown_test_files:\n        \n        # exitcode += 1\n        for f, p in sorted(unknown_test_files):\n            print(\"{} DOES NOT MATCH a source file! Expected to find: {}\".format(f, p))\n\n    sys.exit(exitcode)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "  todo  enable future    exitcode    1 ", "content": "import os\nimport re\nimport glob\nimport sys\n\n\ndef check_src_files_have_test():\n    missing_test_files = []\n\n    excluded = ['mitmproxy/contrib/', 'mitmproxy/test/', 'mitmproxy/tools/', 'mitmproxy/platform/']\n    src_files = glob.glob('mitmproxy/**/*.py', recursive=True) + glob.glob('pathod/**/*.py', recursive=True)\n    src_files = [f for f in src_files if os.path.basename(f) != '__init__.py']\n    src_files = [f for f in src_files if not any(os.path.normpath(p) in f for p in excluded)]\n    for f in src_files:\n        p = os.path.join(\"test\", os.path.dirname(f), \"test_\" + os.path.basename(f))\n        if not os.path.isfile(p):\n            missing_test_files.append((f, p))\n\n    return missing_test_files\n\n\ndef check_test_files_have_src():\n    unknown_test_files = []\n\n    excluded = ['test/mitmproxy/data/', 'test/mitmproxy/net/data/', '/tservers.py', '/conftest.py']\n    test_files = glob.glob('test/mitmproxy/**/*.py', recursive=True) + glob.glob('test/pathod/**/*.py', recursive=True)\n    test_files = [f for f in test_files if os.path.basename(f) != '__init__.py']\n    test_files = [f for f in test_files if not any(os.path.normpath(p) in f for p in excluded)]\n    for f in test_files:\n        p = os.path.join(re.sub('^test/', '', os.path.dirname(f)), re.sub('^test_', '', os.path.basename(f)))\n        if not os.path.isfile(p):\n            unknown_test_files.append((f, p))\n\n    return unknown_test_files\n\n\ndef main():\n    exitcode = 0\n\n    missing_test_files = check_src_files_have_test()\n    if missing_test_files:\n        exitcode += 1\n        for f, p in sorted(missing_test_files):\n            print(\"{} MUST have a matching test file: {}\".format(f, p))\n\n    unknown_test_files = check_test_files_have_src()\n    if unknown_test_files:\n        # TODO: enable this in the future\n        # exitcode += 1\n        for f, p in sorted(unknown_test_files):\n            print(\"{} DOES NOT MATCH a source file! Expected to find: {}\".format(f, p))\n\n    sys.exit(exitcode)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "filename_matching.py", "id": "9c02664afd05efb5d685ebb16483c777", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/mitmproxy-mitmproxy/mitmproxy-mitmproxy-0bc3f1f/test/filename_matching.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:46Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}