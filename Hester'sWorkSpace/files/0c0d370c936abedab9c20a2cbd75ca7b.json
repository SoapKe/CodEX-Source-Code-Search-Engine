{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom .facebook import FacebookIE\n\n\nclass BuzzFeedIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?buzzfeed\\.com/[^?\n    _TESTS = [{\n        'url': 'http://www.buzzfeed.com/abagg/this-angry-ram-destroys-a-punching-bag-like-a-boss?utm_term=4ldqpia',\n        'info_dict': {\n            'id': 'this-angry-ram-destroys-a-punching-bag-like-a-boss',\n            'title': 'This Angry Ram Destroys A Punching Bag Like A Boss',\n            'description': 'Rambro!',\n        },\n        'playlist': [{\n            'info_dict': {\n                'id': 'aVCR29aE_OQ',\n                'ext': 'mp4',\n                'title': 'Angry Ram destroys a punching bag..',\n                'description': 'md5:c59533190ef23fd4458a5e8c8c872345',\n                'upload_date': '20141024',\n                'uploader_id': 'Buddhanz1',\n                'uploader': 'Angry Ram',\n            }\n        }]\n    }, {\n        'url': 'http://www.buzzfeed.com/sheridanwatson/look-at-this-cute-dog-omg?utm_term=4ldqpia',\n        'params': {\n            'skip_download': True,  \n        },\n        'info_dict': {\n            'id': 'look-at-this-cute-dog-omg',\n            'description': 're:Munchkin the Teddy Bear is back ?!',\n            'title': 'You Need To Stop What You\\'re Doing And Watching This Dog Walk On A Treadmill',\n        },\n        'playlist': [{\n            'info_dict': {\n                'id': 'mVmBL8B-In0',\n                'ext': 'mp4',\n                'title': 're:Munchkin the Teddy Bear gets her exercise',\n                'description': 'md5:28faab95cda6e361bcff06ec12fc21d8',\n                'upload_date': '20141124',\n                'uploader_id': 'CindysMunchkin',\n                'uploader': 're:^Munchkin the',\n            },\n        }]\n    }, {\n        'url': 'http://www.buzzfeed.com/craigsilverman/the-most-adorable-crash-landing-ever\n        'info_dict': {\n            'id': 'the-most-adorable-crash-landing-ever',\n            'title': 'Watch This Baby Goose Make The Most Adorable Crash Landing',\n            'description': 'This gosling knows how to stick a landing.',\n        },\n        'playlist': [{\n            'md5': '763ca415512f91ca62e4621086900a23',\n            'info_dict': {\n                'id': '971793786185728',\n                'ext': 'mp4',\n                'title': 'We set up crash pads so that the goslings on our roof would have a safe landi...',\n                'uploader': 'Calgary Outdoor Centre-University of Calgary',\n            },\n        }],\n        'add_ie': ['Facebook'],\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n        webpage = self._download_webpage(url, playlist_id)\n\n        all_buckets = re.findall(\n            r'(?s)<div class=\"video-embed[^\"]*\"..*?rel:bf_bucket_data=\\'([^\\']+)\\'',\n            webpage)\n\n        entries = []\n        for bd_json in all_buckets:\n            bd = json.loads(bd_json)\n            video = bd.get('video') or bd.get('progload_video')\n            if not video:\n                continue\n            entries.append(self.url_result(video['url']))\n\n        facebook_urls = FacebookIE._extract_urls(webpage)\n        entries.extend([\n            self.url_result(facebook_url)\n            for facebook_url in facebook_urls])\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': self._og_search_title(webpage),\n            'description': self._og_search_description(webpage),\n            'entries': entries,\n        }\n", "comments": "# coding: utf-8\n#]*?/(?P<id>[^?#]+)'\n# Got enough YouTube download tests\n#.eq7pX0BAmK',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport re\n\nfrom .common import InfoExtractor\nfrom .facebook import FacebookIE\n\n\nclass BuzzFeedIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?buzzfeed\\.com/[^?#]*?/(?P<id>[^?#]+)'\n    _TESTS = [{\n        'url': 'http://www.buzzfeed.com/abagg/this-angry-ram-destroys-a-punching-bag-like-a-boss?utm_term=4ldqpia',\n        'info_dict': {\n            'id': 'this-angry-ram-destroys-a-punching-bag-like-a-boss',\n            'title': 'This Angry Ram Destroys A Punching Bag Like A Boss',\n            'description': 'Rambro!',\n        },\n        'playlist': [{\n            'info_dict': {\n                'id': 'aVCR29aE_OQ',\n                'ext': 'mp4',\n                'title': 'Angry Ram destroys a punching bag..',\n                'description': 'md5:c59533190ef23fd4458a5e8c8c872345',\n                'upload_date': '20141024',\n                'uploader_id': 'Buddhanz1',\n                'uploader': 'Angry Ram',\n            }\n        }]\n    }, {\n        'url': 'http://www.buzzfeed.com/sheridanwatson/look-at-this-cute-dog-omg?utm_term=4ldqpia',\n        'params': {\n            'skip_download': True,  # Got enough YouTube download tests\n        },\n        'info_dict': {\n            'id': 'look-at-this-cute-dog-omg',\n            'description': 're:Munchkin the Teddy Bear is back ?!',\n            'title': 'You Need To Stop What You\\'re Doing And Watching This Dog Walk On A Treadmill',\n        },\n        'playlist': [{\n            'info_dict': {\n                'id': 'mVmBL8B-In0',\n                'ext': 'mp4',\n                'title': 're:Munchkin the Teddy Bear gets her exercise',\n                'description': 'md5:28faab95cda6e361bcff06ec12fc21d8',\n                'upload_date': '20141124',\n                'uploader_id': 'CindysMunchkin',\n                'uploader': 're:^Munchkin the',\n            },\n        }]\n    }, {\n        'url': 'http://www.buzzfeed.com/craigsilverman/the-most-adorable-crash-landing-ever#.eq7pX0BAmK',\n        'info_dict': {\n            'id': 'the-most-adorable-crash-landing-ever',\n            'title': 'Watch This Baby Goose Make The Most Adorable Crash Landing',\n            'description': 'This gosling knows how to stick a landing.',\n        },\n        'playlist': [{\n            'md5': '763ca415512f91ca62e4621086900a23',\n            'info_dict': {\n                'id': '971793786185728',\n                'ext': 'mp4',\n                'title': 'We set up crash pads so that the goslings on our roof would have a safe landi...',\n                'uploader': 'Calgary Outdoor Centre-University of Calgary',\n            },\n        }],\n        'add_ie': ['Facebook'],\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n        webpage = self._download_webpage(url, playlist_id)\n\n        all_buckets = re.findall(\n            r'(?s)<div class=\"video-embed[^\"]*\"..*?rel:bf_bucket_data=\\'([^\\']+)\\'',\n            webpage)\n\n        entries = []\n        for bd_json in all_buckets:\n            bd = json.loads(bd_json)\n            video = bd.get('video') or bd.get('progload_video')\n            if not video:\n                continue\n            entries.append(self.url_result(video['url']))\n\n        facebook_urls = FacebookIE._extract_urls(webpage)\n        entries.extend([\n            self.url_result(facebook_url)\n            for facebook_url in facebook_urls])\n\n        return {\n            '_type': 'playlist',\n            'id': playlist_id,\n            'title': self._og_search_title(webpage),\n            'description': self._og_search_description(webpage),\n            'entries': entries,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "buzzfeed.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/buzzfeed.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}