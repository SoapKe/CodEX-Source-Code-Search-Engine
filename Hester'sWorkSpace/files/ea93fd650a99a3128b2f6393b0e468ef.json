{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    extract_attributes,\n    find_xpath_attr,\n    get_element_by_class,\n    int_or_none,\n    smuggle_url,\n    unescapeHTML,\n)\nfrom .senateisvp import SenateISVPIE\nfrom .ustream import UstreamIE\n\n\nclass CSpanIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?c-span\\.org/video/\\?(?P<id>[0-9a-f]+)'\n    IE_DESC = 'C-SPAN'\n    _TESTS = [{\n        'url': 'http://www.c-span.org/video/?313572-1/HolderonV',\n        'md5': '94b29a4f131ff03d23471dd6f60b6a1d',\n        'info_dict': {\n            'id': '315139',\n            'title': 'Attorney General Eric Holder on Voting Rights Act Decision',\n        },\n        'playlist_mincount': 2,\n        'skip': 'Regularly fails on travis, for unknown reasons',\n    }, {\n        'url': 'http://www.c-span.org/video/?c4486943/cspan-international-health-care-models',\n        \n        'info_dict': {\n            'id': 'c4486943',\n            'ext': 'mp4',\n            'title': 'CSPAN - International Health Care Models',\n            'description': 'md5:7a985a2d595dba00af3d9c9f0783c967',\n        }\n    }, {\n        'url': 'http://www.c-span.org/video/?318608-1/gm-ignition-switch-recall',\n        'info_dict': {\n            'id': '342759',\n            'title': 'General Motors Ignition Switch Recall',\n        },\n        'playlist_mincount': 6,\n    }, {\n        \n        'url': 'http://www.c-span.org/video/?104517-1/immigration-reforms-needed-protect-skilled-american-workers',\n        'info_dict': {\n            'id': 'judiciary031715',\n            'ext': 'mp4',\n            'title': 'Immigration Reforms Needed to Protect Skilled American Workers',\n        },\n        'params': {\n            'skip_download': True,  \n        }\n    }, {\n        \n        'url': 'https://www.c-span.org/video/?114917-1/armed-services',\n        'info_dict': {\n            'id': '58428542',\n            'ext': 'flv',\n            'title': 'USHR07 Armed Services Committee',\n            'description': 'hsas00-2118-20150204-1000et-07\\n\\n\\nUSHR07 Armed Services Committee',\n            'timestamp': 1423060374,\n            'upload_date': '20150204',\n            'uploader': 'HouseCommittee',\n            'uploader_id': '12987475',\n        },\n    }, {\n        \n        'url': 'https://www.c-span.org/video/?437336-1/judiciary-antitrust-competition-policy-consumer-rights',\n        'only_matching': True,\n    }]\n    BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/%s/%s_%s/index.html?videoId=%s'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_type = None\n        webpage = self._download_webpage(url, video_id)\n\n        ustream_url = UstreamIE._extract_url(webpage)\n        if ustream_url:\n            return self.url_result(ustream_url, UstreamIE.ie_key())\n\n        if '&vod' not in url:\n            bc = self._search_regex(\n                r\"(<[^>]+id='brightcove-player-embed'[^>]+>)\",\n                webpage, 'brightcove embed', default=None)\n            if bc:\n                bc_attr = extract_attributes(bc)\n                bc_url = self.BRIGHTCOVE_URL_TEMPLATE % (\n                    bc_attr.get('data-bcaccountid', '3162030207001'),\n                    bc_attr.get('data-noprebcplayerid', 'SyGGpuJy3g'),\n                    bc_attr.get('data-newbcplayerid', 'default'),\n                    bc_attr['data-bcid'])\n                return self.url_result(smuggle_url(bc_url, {'source_url': url}))\n\n        \n        patterns = [r'id=\\'clip(%s)\\'\\s*value=\\'([0-9]+)\\'' % t for t in ('id', 'prog')]\n        results = list(filter(None, (re.search(p, webpage) for p in patterns)))\n        if results:\n            matches = results[0]\n            video_type, video_id = matches.groups()\n            video_type = 'clip' if video_type == 'id' else 'program'\n        else:\n            m = re.search(r'data-(?P<type>clip|prog)id=[\"\\'](?P<id>\\d+)', webpage)\n            if m:\n                video_id = m.group('id')\n                video_type = 'program' if m.group('type') == 'prog' else 'clip'\n            else:\n                senate_isvp_url = SenateISVPIE._search_iframe_url(webpage)\n                if senate_isvp_url:\n                    title = self._og_search_title(webpage)\n                    surl = smuggle_url(senate_isvp_url, {'force_title': title})\n                    return self.url_result(surl, 'SenateISVP', video_id, title)\n                video_id = self._search_regex(\n                    r'jwsetup\\.clipprog\\s*=\\s*(\\d+);',\n                    webpage, 'jwsetup program id', default=None)\n                if video_id:\n                    video_type = 'program'\n        if video_type is None or video_id is None:\n            error_message = get_element_by_class('VLplayer-error-message', webpage)\n            if error_message:\n                raise ExtractorError(error_message)\n            raise ExtractorError('unable to find video id and type')\n\n        def get_text_attr(d, attr):\n            return d.get(attr, {}).get('\n\n        data = self._download_json(\n            'http://www.c-span.org/assets/player/ajax-player.php?os=android&html5=%s&id=%s' % (video_type, video_id),\n            video_id)['video']\n        if data['@status'] != 'Success':\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, get_text_attr(data, 'error')), expected=True)\n\n        doc = self._download_xml(\n            'http://www.c-span.org/common/services/flashXml.php?%sid=%s' % (video_type, video_id),\n            video_id)\n\n        description = self._html_search_meta('description', webpage)\n\n        title = find_xpath_attr(doc, './/string', 'name', 'title').text\n        thumbnail = find_xpath_attr(doc, './/string', 'name', 'poster').text\n\n        files = data['files']\n        capfile = get_text_attr(data, 'capfile')\n\n        entries = []\n        for partnum, f in enumerate(files):\n            formats = []\n            for quality in f.get('qualities', []):\n                formats.append({\n                    'format_id': '%s-%sp' % (get_text_attr(quality, 'bitrate'), get_text_attr(quality, 'height')),\n                    'url': unescapeHTML(get_text_attr(quality, 'file')),\n                    'height': int_or_none(get_text_attr(quality, 'height')),\n                    'tbr': int_or_none(get_text_attr(quality, 'bitrate')),\n                })\n            if not formats:\n                path = unescapeHTML(get_text_attr(f, 'path'))\n                if not path:\n                    continue\n                formats = self._extract_m3u8_formats(\n                    path, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls') if determine_ext(path) == 'm3u8' else [{'url': path, }]\n            self._sort_formats(formats)\n            entries.append({\n                'id': '%s_%d' % (video_id, partnum + 1),\n                'title': (\n                    title if len(files) == 1 else\n                    '%s part %d' % (title, partnum + 1)),\n                'formats': formats,\n                'description': description,\n                'thumbnail': thumbnail,\n                'duration': int_or_none(get_text_attr(f, 'length')),\n                'subtitles': {\n                    'en': [{\n                        'url': capfile,\n                        'ext': determine_ext(capfile, 'dfxp')\n                    }],\n                } if capfile else None,\n            })\n\n        if len(entries) == 1:\n            entry = dict(entries[0])\n            entry['id'] = 'c' + video_id if video_type == 'clip' else video_id\n            return entry\n        else:\n            return {\n                '_type': 'playlist',\n                'entries': entries,\n                'title': title,\n                'id': 'c' + video_id if video_type == 'clip' else video_id,\n            }\n", "comments": "# md5 is unstable\n# Video from senate.gov\n# m3u8 downloads\n# Ustream embedded video\n# Audio Only\n# We first look for clipid, because clipprog always appears before\n#text')\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    extract_attributes,\n    find_xpath_attr,\n    get_element_by_class,\n    int_or_none,\n    smuggle_url,\n    unescapeHTML,\n)\nfrom .senateisvp import SenateISVPIE\nfrom .ustream import UstreamIE\n\n\nclass CSpanIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?c-span\\.org/video/\\?(?P<id>[0-9a-f]+)'\n    IE_DESC = 'C-SPAN'\n    _TESTS = [{\n        'url': 'http://www.c-span.org/video/?313572-1/HolderonV',\n        'md5': '94b29a4f131ff03d23471dd6f60b6a1d',\n        'info_dict': {\n            'id': '315139',\n            'title': 'Attorney General Eric Holder on Voting Rights Act Decision',\n        },\n        'playlist_mincount': 2,\n        'skip': 'Regularly fails on travis, for unknown reasons',\n    }, {\n        'url': 'http://www.c-span.org/video/?c4486943/cspan-international-health-care-models',\n        # md5 is unstable\n        'info_dict': {\n            'id': 'c4486943',\n            'ext': 'mp4',\n            'title': 'CSPAN - International Health Care Models',\n            'description': 'md5:7a985a2d595dba00af3d9c9f0783c967',\n        }\n    }, {\n        'url': 'http://www.c-span.org/video/?318608-1/gm-ignition-switch-recall',\n        'info_dict': {\n            'id': '342759',\n            'title': 'General Motors Ignition Switch Recall',\n        },\n        'playlist_mincount': 6,\n    }, {\n        # Video from senate.gov\n        'url': 'http://www.c-span.org/video/?104517-1/immigration-reforms-needed-protect-skilled-american-workers',\n        'info_dict': {\n            'id': 'judiciary031715',\n            'ext': 'mp4',\n            'title': 'Immigration Reforms Needed to Protect Skilled American Workers',\n        },\n        'params': {\n            'skip_download': True,  # m3u8 downloads\n        }\n    }, {\n        # Ustream embedded video\n        'url': 'https://www.c-span.org/video/?114917-1/armed-services',\n        'info_dict': {\n            'id': '58428542',\n            'ext': 'flv',\n            'title': 'USHR07 Armed Services Committee',\n            'description': 'hsas00-2118-20150204-1000et-07\\n\\n\\nUSHR07 Armed Services Committee',\n            'timestamp': 1423060374,\n            'upload_date': '20150204',\n            'uploader': 'HouseCommittee',\n            'uploader_id': '12987475',\n        },\n    }, {\n        # Audio Only\n        'url': 'https://www.c-span.org/video/?437336-1/judiciary-antitrust-competition-policy-consumer-rights',\n        'only_matching': True,\n    }]\n    BRIGHTCOVE_URL_TEMPLATE = 'http://players.brightcove.net/%s/%s_%s/index.html?videoId=%s'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_type = None\n        webpage = self._download_webpage(url, video_id)\n\n        ustream_url = UstreamIE._extract_url(webpage)\n        if ustream_url:\n            return self.url_result(ustream_url, UstreamIE.ie_key())\n\n        if '&vod' not in url:\n            bc = self._search_regex(\n                r\"(<[^>]+id='brightcove-player-embed'[^>]+>)\",\n                webpage, 'brightcove embed', default=None)\n            if bc:\n                bc_attr = extract_attributes(bc)\n                bc_url = self.BRIGHTCOVE_URL_TEMPLATE % (\n                    bc_attr.get('data-bcaccountid', '3162030207001'),\n                    bc_attr.get('data-noprebcplayerid', 'SyGGpuJy3g'),\n                    bc_attr.get('data-newbcplayerid', 'default'),\n                    bc_attr['data-bcid'])\n                return self.url_result(smuggle_url(bc_url, {'source_url': url}))\n\n        # We first look for clipid, because clipprog always appears before\n        patterns = [r'id=\\'clip(%s)\\'\\s*value=\\'([0-9]+)\\'' % t for t in ('id', 'prog')]\n        results = list(filter(None, (re.search(p, webpage) for p in patterns)))\n        if results:\n            matches = results[0]\n            video_type, video_id = matches.groups()\n            video_type = 'clip' if video_type == 'id' else 'program'\n        else:\n            m = re.search(r'data-(?P<type>clip|prog)id=[\"\\'](?P<id>\\d+)', webpage)\n            if m:\n                video_id = m.group('id')\n                video_type = 'program' if m.group('type') == 'prog' else 'clip'\n            else:\n                senate_isvp_url = SenateISVPIE._search_iframe_url(webpage)\n                if senate_isvp_url:\n                    title = self._og_search_title(webpage)\n                    surl = smuggle_url(senate_isvp_url, {'force_title': title})\n                    return self.url_result(surl, 'SenateISVP', video_id, title)\n                video_id = self._search_regex(\n                    r'jwsetup\\.clipprog\\s*=\\s*(\\d+);',\n                    webpage, 'jwsetup program id', default=None)\n                if video_id:\n                    video_type = 'program'\n        if video_type is None or video_id is None:\n            error_message = get_element_by_class('VLplayer-error-message', webpage)\n            if error_message:\n                raise ExtractorError(error_message)\n            raise ExtractorError('unable to find video id and type')\n\n        def get_text_attr(d, attr):\n            return d.get(attr, {}).get('#text')\n\n        data = self._download_json(\n            'http://www.c-span.org/assets/player/ajax-player.php?os=android&html5=%s&id=%s' % (video_type, video_id),\n            video_id)['video']\n        if data['@status'] != 'Success':\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, get_text_attr(data, 'error')), expected=True)\n\n        doc = self._download_xml(\n            'http://www.c-span.org/common/services/flashXml.php?%sid=%s' % (video_type, video_id),\n            video_id)\n\n        description = self._html_search_meta('description', webpage)\n\n        title = find_xpath_attr(doc, './/string', 'name', 'title').text\n        thumbnail = find_xpath_attr(doc, './/string', 'name', 'poster').text\n\n        files = data['files']\n        capfile = get_text_attr(data, 'capfile')\n\n        entries = []\n        for partnum, f in enumerate(files):\n            formats = []\n            for quality in f.get('qualities', []):\n                formats.append({\n                    'format_id': '%s-%sp' % (get_text_attr(quality, 'bitrate'), get_text_attr(quality, 'height')),\n                    'url': unescapeHTML(get_text_attr(quality, 'file')),\n                    'height': int_or_none(get_text_attr(quality, 'height')),\n                    'tbr': int_or_none(get_text_attr(quality, 'bitrate')),\n                })\n            if not formats:\n                path = unescapeHTML(get_text_attr(f, 'path'))\n                if not path:\n                    continue\n                formats = self._extract_m3u8_formats(\n                    path, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls') if determine_ext(path) == 'm3u8' else [{'url': path, }]\n            self._sort_formats(formats)\n            entries.append({\n                'id': '%s_%d' % (video_id, partnum + 1),\n                'title': (\n                    title if len(files) == 1 else\n                    '%s part %d' % (title, partnum + 1)),\n                'formats': formats,\n                'description': description,\n                'thumbnail': thumbnail,\n                'duration': int_or_none(get_text_attr(f, 'length')),\n                'subtitles': {\n                    'en': [{\n                        'url': capfile,\n                        'ext': determine_ext(capfile, 'dfxp')\n                    }],\n                } if capfile else None,\n            })\n\n        if len(entries) == 1:\n            entry = dict(entries[0])\n            entry['id'] = 'c' + video_id if video_type == 'clip' else video_id\n            return entry\n        else:\n            return {\n                '_type': 'playlist',\n                'entries': entries,\n                'title': title,\n                'id': 'c' + video_id if video_type == 'clip' else video_id,\n            }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cspan.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cspan.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}