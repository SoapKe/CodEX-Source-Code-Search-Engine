{"author": "geekcomputers", "code": "\n\n\n\n\n\n\n\n\n\nfrom __future__ import print_function\nimport sys\t\t\nimport os\t\t\n\n\n\n\ndef usage():\n    print('[-] Usage: python check_file.py [filename1] [filename2] ... [filenameN]')\n\n\n\ndef readfile(filename):\n    with open(filename, 'r') as f:      \n        file = f.read()                 \n    print(file)\n    print()\n    print('#'*80)\n    print()\n\ndef main():\n    \n    if len(sys.argv) >= 2:\n        filenames = sys.argv[1:]\n        filteredfilenames_1 = list(filenames)   \n        filteredfilenames_2 = list(filenames)\n        \n        for filename in filteredfilenames_1:\n            if not os.path.isfile(filename):\t\t\n                print('[-] ' + filename + ' does not exist.')\n                filteredfilenames_2.remove(filename)\t\t\t\n                continue\n\n            \n            if not os.access(filename, os.R_OK):\n                print('[-] ' + filename + ' access denied')\n                \n                filteredfilenames_2.remove(filename)\n                continue\n\n        \n        for filename in filteredfilenames_2:\n            \n            print('[+] Reading from : ' + filename)\n            readfile(filename)\n\n    else:\n        usage() \n\n\nif __name__ == '__main__':\n    main()\n", "comments": "  script name    check file py    author    craig richards    created    20 may 2013    last modified       version    1 0    modifications   statement added ensure correct file closure    description   check file exists read file    import modules    import modules    prints usage appropriate length arguments provided    readfile functions open file passed script    ensure file correctly closed    circumstances    check arguments passed script   to counter changing list iterating    iterate filename passed command line argument    check file exists   remove non existing files filenames list    check read file    remove non readable filenames    read content file exists readable    display message read file contents    print usage parameters passed checked ", "content": "# Script Name\t\t: check_file.py\n\n# Author\t\t: Craig Richards\n# Created\t\t: 20 May 2013\n# Last Modified\t\t:\n# Version\t\t: 1.0\n\n# Modifications\t: with statement added to ensure correct file closure\n\n# Description\t: Check a file exists and that we can read the file\nfrom __future__ import print_function\nimport sys\t\t# Import the Modules\nimport os\t\t# Import the Modules\n\n# Prints usage if not appropriate length of arguments are provided\n\n\ndef usage():\n    print('[-] Usage: python check_file.py [filename1] [filename2] ... [filenameN]')\n\n\n# Readfile Functions which open the file that is passed to the script\ndef readfile(filename):\n    with open(filename, 'r') as f:      # Ensure file is correctly closed under\n        file = f.read()                 # all circumstances\n    print(file)\n    print()\n    print('#'*80)\n    print()\n\ndef main():\n    # Check the arguments passed to the script\n    if len(sys.argv) >= 2:\n        filenames = sys.argv[1:]\n        filteredfilenames_1 = list(filenames)   #To counter changing in the same list which you are iterating\n        filteredfilenames_2 = list(filenames)\n        # Iterate for each filename passed in command line argument\n        for filename in filteredfilenames_1:\n            if not os.path.isfile(filename):\t\t# Check the File exists\n                print('[-] ' + filename + ' does not exist.')\n                filteredfilenames_2.remove(filename)\t\t\t#remove non existing files from fileNames list\n                continue\n\n            # Check you can read the file\n            if not os.access(filename, os.R_OK):\n                print('[-] ' + filename + ' access denied')\n                # remove non readable fileNames\n                filteredfilenames_2.remove(filename)\n                continue\n\n        # Read the content of each file that both exists and is readable\n        for filename in filteredfilenames_2:\n            # Display Message and read the file contents\n            print('[+] Reading from : ' + filename)\n            readfile(filename)\n\n    else:\n        usage() # Print usage if not all parameters passed/Checked\n\n\nif __name__ == '__main__':\n    main()\n", "description": "My Python Examples", "file_name": "check_file.py", "id": "903879ca0ae8c18220c3641888862d97", "language": "Python", "project_name": "Python", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/geekcomputers-Python/geekcomputers-Python-ef88c96/check_file.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:41:16Z", "url": "https://github.com/geekcomputers/Python", "wiki": true}