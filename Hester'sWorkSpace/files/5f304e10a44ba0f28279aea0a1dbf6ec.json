{"author": "python-telegram-bot", "code": "\n -*- coding: utf-8 -*-\n\n Simple Bot to reply to Telegram messages\n This program is dedicated to the public domain under the CC0 license.\n\"\"\"\nThis Bot uses the Updater class to handle the bot.\n\nFirst, a few callback functions are defined. Then, those functions are passed to\nthe Dispatcher and registered at their respective places.\nThen, the bot is started and runs until we press Ctrl-C on the command line.\n\nUsage:\nExample of a bot-user conversation using ConversationHandler.\nSend /start to initiate the conversation.\nPress Ctrl-C on the command line or send a signal to the process to stop the\nbot.\n\"\"\"\n\nfrom telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove)\nfrom telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,\n                          ConversationHandler)\n\nimport logging\n\n Enable logging\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\nGENDER, PHOTO, LOCATION, BIO = range(4)\n\n\ndef start(bot, update):\n    reply_keyboard = [['Boy', 'Girl', 'Other']]\n\n    update.message.reply_text(\n        'Hi! My name is Professor Bot. I will hold a conversation with you. '\n        'Send /cancel to stop talking to me.\\n\\n'\n        'Are you a boy or a girl?',\n        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))\n\n    return GENDER\n\n\ndef gender(bot, update):\n    user = update.message.from_user\n    logger.info(\"Gender of %s: %s\", user.first_name, update.message.text)\n    update.message.reply_text('I see! Please send me a photo of yourself, '\n                              'so I know what you look like, or send /skip if you don\\'t want to.',\n                              reply_markup=ReplyKeyboardRemove())\n\n    return PHOTO\n\n\ndef photo(bot, update):\n    user = update.message.from_user\n    photo_file = bot.get_file(update.message.photo[-1].file_id)\n    photo_file.download('user_photo.jpg')\n    logger.info(\"Photo of %s: %s\", user.first_name, 'user_photo.jpg')\n    update.message.reply_text('Gorgeous! Now, send me your location please, '\n                              'or send /skip if you don\\'t want to.')\n\n    return LOCATION\n\n\ndef skip_photo(bot, update):\n    user = update.message.from_user\n    logger.info(\"User %s did not send a photo.\", user.first_name)\n    update.message.reply_text('I bet you look great! Now, send me your location please, '\n                              'or send /skip.')\n\n    return LOCATION\n\n\ndef location(bot, update):\n    user = update.message.from_user\n    user_location = update.message.location\n    logger.info(\"Location of %s: %f / %f\", user.first_name, user_location.latitude,\n                user_location.longitude)\n    update.message.reply_text('Maybe I can visit you sometime! '\n                              'At last, tell me something about yourself.')\n\n    return BIO\n\n\ndef skip_location(bot, update):\n    user = update.message.from_user\n    logger.info(\"User %s did not send a location.\", user.first_name)\n    update.message.reply_text('You seem a bit paranoid! '\n                              'At last, tell me something about yourself.')\n\n    return BIO\n\n\ndef bio(bot, update):\n    user = update.message.from_user\n    logger.info(\"Bio of %s: %s\", user.first_name, update.message.text)\n    update.message.reply_text('Thank you! I hope we can talk again some day.')\n\n    return ConversationHandler.END\n\n\ndef cancel(bot, update):\n    user = update.message.from_user\n    logger.info(\"User %s canceled the conversation.\", user.first_name)\n    update.message.reply_text('Bye! I hope we can talk again some day.',\n                              reply_markup=ReplyKeyboardRemove())\n\n    return ConversationHandler.END\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n     Create the EventHandler and pass it your bot's token.\n    updater = Updater(\"TOKEN\")\n\n     Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n     Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO\n    conv_handler = ConversationHandler(\n        entry_points=[CommandHandler('start', start)],\n\n        states={\n            GENDER: [RegexHandler('^(Boy|Girl|Other)$', gender)],\n\n            PHOTO: [MessageHandler(Filters.photo, photo),\n                    CommandHandler('skip', skip_photo)],\n\n            LOCATION: [MessageHandler(Filters.location, location),\n                       CommandHandler('skip', skip_location)],\n\n            BIO: [MessageHandler(Filters.text, bio)]\n        },\n\n        fallbacks=[CommandHandler('cancel', cancel)]\n    )\n\n    dp.add_handler(conv_handler)\n\n     log all errors\n    dp.add_error_handler(error)\n\n     Start the Bot\n    updater.start_polling()\n\n     Run the bot until you press Ctrl-C or the process receives SIGINT,\n     SIGTERM or SIGABRT. This should be used most of the time, since\n     start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "    this bot uses updater class handle bot   first  callback functions defined  then  functions passed dispatcher registered respective places  then  bot started runs press ctrl c command line   usage  example bot user conversation using conversationhandler  send  start initiate conversation  press ctrl c command line send signal process stop bot       telegram import (replykeyboardmarkup  replykeyboardremove) telegram ext import (updater  commandhandler  messagehandler  filters  regexhandler                            conversationhandler)  import logging    enable logging logging basicconfig(format   (asctime)s    (name)s    (levelname)s    (message)s                       level logging info)  logger   logging getlogger(  name  )  gender  photo  location  bio   range(4)   def start(bot  update)      reply keyboard      boy    girl    other         update message reply text(          hi  my name professor bot  i hold conversation             send  cancel stop talking  n n           are boy girl            reply markup replykeyboardmarkup(reply keyboard  one time keyboard true))      return gender   def gender(bot  update)      user   update message user     logger info( gender      user first name  update message text)     update message reply text( i see  please send photo                                   i know look like  send  skip  want                                  reply markup replykeyboardremove())      return photo   def photo(bot  update)      user   update message user     photo file   bot get file(update message photo  1  file id)     photo file download( user photo jpg )     logger info( photo      user first name   user photo jpg )     update message reply text( gorgeous  now  send location please                                   send  skip  want  )      return location   def skip photo(bot  update)      user   update message user     logger info( user  send photo    user first name)     update message reply text( i bet look great  now  send location please                                   send  skip  )      return location   def location(bot  update)      user   update message user     user location   update message location     logger info( location    f    f   user first name  user location latitude                  user location longitude)     update message reply text( maybe i visit sometime                                   at last  tell something  )      return bio   def skip location(bot  update)      user   update message user     logger info( user  send location    user first name)     update message reply text( you seem bit paranoid                                   at last  tell something  )      return bio   def bio(bot  update)      user   update message user     logger info( bio      user first name  update message text)     update message reply text( thank  i hope talk day  )      return conversationhandler end   def cancel(bot  update)      user   update message user     logger info( user  canceled conversation    user first name)     update message reply text( bye  i hope talk day                                  reply markup replykeyboardremove())      return conversationhandler end   def error(bot  update  error)         log errors caused updates         usr bin env python        coding  utf 8           simple bot reply telegram messages    this program dedicated public domain cc0 license     enable logging    create eventhandler pass bot token     get dispatcher register handlers    add conversation handler states gender  photo  location bio    log errors    start bot    run bot press ctrl c process receives sigint     sigterm sigabrt  this used time  since    start polling() non blocking stop bot gracefully  ", "content": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n#\n# Simple Bot to reply to Telegram messages\n# This program is dedicated to the public domain under the CC0 license.\n\"\"\"\nThis Bot uses the Updater class to handle the bot.\n\nFirst, a few callback functions are defined. Then, those functions are passed to\nthe Dispatcher and registered at their respective places.\nThen, the bot is started and runs until we press Ctrl-C on the command line.\n\nUsage:\nExample of a bot-user conversation using ConversationHandler.\nSend /start to initiate the conversation.\nPress Ctrl-C on the command line or send a signal to the process to stop the\nbot.\n\"\"\"\n\nfrom telegram import (ReplyKeyboardMarkup, ReplyKeyboardRemove)\nfrom telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, RegexHandler,\n                          ConversationHandler)\n\nimport logging\n\n# Enable logging\nlogging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n                    level=logging.INFO)\n\nlogger = logging.getLogger(__name__)\n\nGENDER, PHOTO, LOCATION, BIO = range(4)\n\n\ndef start(bot, update):\n    reply_keyboard = [['Boy', 'Girl', 'Other']]\n\n    update.message.reply_text(\n        'Hi! My name is Professor Bot. I will hold a conversation with you. '\n        'Send /cancel to stop talking to me.\\n\\n'\n        'Are you a boy or a girl?',\n        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))\n\n    return GENDER\n\n\ndef gender(bot, update):\n    user = update.message.from_user\n    logger.info(\"Gender of %s: %s\", user.first_name, update.message.text)\n    update.message.reply_text('I see! Please send me a photo of yourself, '\n                              'so I know what you look like, or send /skip if you don\\'t want to.',\n                              reply_markup=ReplyKeyboardRemove())\n\n    return PHOTO\n\n\ndef photo(bot, update):\n    user = update.message.from_user\n    photo_file = bot.get_file(update.message.photo[-1].file_id)\n    photo_file.download('user_photo.jpg')\n    logger.info(\"Photo of %s: %s\", user.first_name, 'user_photo.jpg')\n    update.message.reply_text('Gorgeous! Now, send me your location please, '\n                              'or send /skip if you don\\'t want to.')\n\n    return LOCATION\n\n\ndef skip_photo(bot, update):\n    user = update.message.from_user\n    logger.info(\"User %s did not send a photo.\", user.first_name)\n    update.message.reply_text('I bet you look great! Now, send me your location please, '\n                              'or send /skip.')\n\n    return LOCATION\n\n\ndef location(bot, update):\n    user = update.message.from_user\n    user_location = update.message.location\n    logger.info(\"Location of %s: %f / %f\", user.first_name, user_location.latitude,\n                user_location.longitude)\n    update.message.reply_text('Maybe I can visit you sometime! '\n                              'At last, tell me something about yourself.')\n\n    return BIO\n\n\ndef skip_location(bot, update):\n    user = update.message.from_user\n    logger.info(\"User %s did not send a location.\", user.first_name)\n    update.message.reply_text('You seem a bit paranoid! '\n                              'At last, tell me something about yourself.')\n\n    return BIO\n\n\ndef bio(bot, update):\n    user = update.message.from_user\n    logger.info(\"Bio of %s: %s\", user.first_name, update.message.text)\n    update.message.reply_text('Thank you! I hope we can talk again some day.')\n\n    return ConversationHandler.END\n\n\ndef cancel(bot, update):\n    user = update.message.from_user\n    logger.info(\"User %s canceled the conversation.\", user.first_name)\n    update.message.reply_text('Bye! I hope we can talk again some day.',\n                              reply_markup=ReplyKeyboardRemove())\n\n    return ConversationHandler.END\n\n\ndef error(bot, update, error):\n    \"\"\"Log Errors caused by Updates.\"\"\"\n    logger.warning('Update \"%s\" caused error \"%s\"', update, error)\n\n\ndef main():\n    # Create the EventHandler and pass it your bot's token.\n    updater = Updater(\"TOKEN\")\n\n    # Get the dispatcher to register handlers\n    dp = updater.dispatcher\n\n    # Add conversation handler with the states GENDER, PHOTO, LOCATION and BIO\n    conv_handler = ConversationHandler(\n        entry_points=[CommandHandler('start', start)],\n\n        states={\n            GENDER: [RegexHandler('^(Boy|Girl|Other)$', gender)],\n\n            PHOTO: [MessageHandler(Filters.photo, photo),\n                    CommandHandler('skip', skip_photo)],\n\n            LOCATION: [MessageHandler(Filters.location, location),\n                       CommandHandler('skip', skip_location)],\n\n            BIO: [MessageHandler(Filters.text, bio)]\n        },\n\n        fallbacks=[CommandHandler('cancel', cancel)]\n    )\n\n    dp.add_handler(conv_handler)\n\n    # log all errors\n    dp.add_error_handler(error)\n\n    # Start the Bot\n    updater.start_polling()\n\n    # Run the bot until you press Ctrl-C or the process receives SIGINT,\n    # SIGTERM or SIGABRT. This should be used most of the time, since\n    # start_polling() is non-blocking and will stop the bot gracefully.\n    updater.idle()\n\n\nif __name__ == '__main__':\n    main()\n", "description": "We have made you a wrapper you can't refuse", "file_name": "conversationbot.py", "id": "5f304e10a44ba0f28279aea0a1dbf6ec", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/examples/conversationbot.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}