{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    qualities,\n    unescapeHTML,\n)\n\n\nclass GiantBombIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?giantbomb\\.com/videos/(?P<display_id>[^/]+)/(?P<id>\\d+-\\d+)'\n    _TEST = {\n        'url': 'http://www.giantbomb.com/videos/quick-look-destiny-the-dark-below/2300-9782/',\n        'md5': 'c8ea694254a59246a42831155dec57ac',\n        'info_dict': {\n            'id': '2300-9782',\n            'display_id': 'quick-look-destiny-the-dark-below',\n            'ext': 'mp4',\n            'title': 'Quick Look: Destiny: The Dark Below',\n            'description': 'md5:0aa3aaf2772a41b91d44c63f30dfad24',\n            'duration': 2399,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        video = json.loads(unescapeHTML(self._search_regex(\n            r'data-video=\"([^\"]+)\"', webpage, 'data-video')))\n\n        duration = int_or_none(video.get('lengthSeconds'))\n\n        quality = qualities([\n            'f4m_low', 'progressive_low', 'f4m_high',\n            'progressive_high', 'f4m_hd', 'progressive_hd'])\n\n        formats = []\n        for format_id, video_url in video['videoStreams'].items():\n            if format_id == 'f4m_stream':\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                f4m_formats = self._extract_f4m_formats(video_url + '?hdcore=3.3.1', display_id)\n                if f4m_formats:\n                    f4m_formats[0]['quality'] = quality(format_id)\n                    formats.extend(f4m_formats)\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, display_id, ext='mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': video_url,\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                })\n\n        if not formats:\n            youtube_id = video.get('youtubeID')\n            if youtube_id:\n                return self.url_result(youtube_id, 'Youtube')\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }\n", "comments": "", "content": "from __future__ import unicode_literals\n\nimport re\nimport json\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    qualities,\n    unescapeHTML,\n)\n\n\nclass GiantBombIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?giantbomb\\.com/videos/(?P<display_id>[^/]+)/(?P<id>\\d+-\\d+)'\n    _TEST = {\n        'url': 'http://www.giantbomb.com/videos/quick-look-destiny-the-dark-below/2300-9782/',\n        'md5': 'c8ea694254a59246a42831155dec57ac',\n        'info_dict': {\n            'id': '2300-9782',\n            'display_id': 'quick-look-destiny-the-dark-below',\n            'ext': 'mp4',\n            'title': 'Quick Look: Destiny: The Dark Below',\n            'description': 'md5:0aa3aaf2772a41b91d44c63f30dfad24',\n            'duration': 2399,\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage)\n        thumbnail = self._og_search_thumbnail(webpage)\n\n        video = json.loads(unescapeHTML(self._search_regex(\n            r'data-video=\"([^\"]+)\"', webpage, 'data-video')))\n\n        duration = int_or_none(video.get('lengthSeconds'))\n\n        quality = qualities([\n            'f4m_low', 'progressive_low', 'f4m_high',\n            'progressive_high', 'f4m_hd', 'progressive_hd'])\n\n        formats = []\n        for format_id, video_url in video['videoStreams'].items():\n            if format_id == 'f4m_stream':\n                continue\n            ext = determine_ext(video_url)\n            if ext == 'f4m':\n                f4m_formats = self._extract_f4m_formats(video_url + '?hdcore=3.3.1', display_id)\n                if f4m_formats:\n                    f4m_formats[0]['quality'] = quality(format_id)\n                    formats.extend(f4m_formats)\n            elif ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    video_url, display_id, ext='mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'url': video_url,\n                    'format_id': format_id,\n                    'quality': quality(format_id),\n                })\n\n        if not formats:\n            youtube_id = video.get('youtubeID')\n            if youtube_id:\n                return self.url_result(youtube_id, 'Youtube')\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "giantbomb.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/giantbomb.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}