{"author": "requests", "code": "\nfrom pygments.style import Style\nfrom pygments.token import Keyword, Name, Comment, String, Error, \\\n     Number, Operator, Generic, Whitespace, Punctuation, Other, Literal\n\n\nclass FlaskyStyle(Style):\n    background_color = \"\n    default_style = \"\"\n\n    styles = {\n        \n        \n        Whitespace:                \"underline \n        Error:                     \"\n        Other:                     \"\n\n        Comment:                   \"italic \n        Comment.Preproc:           \"noitalic\",       \n\n        Keyword:                   \"bold \n        Keyword.Constant:          \"bold \n        Keyword.Declaration:       \"bold \n        Keyword.Namespace:         \"bold \n        Keyword.Pseudo:            \"bold \n        Keyword.Reserved:          \"bold \n        Keyword.Type:              \"bold \n\n        Operator:                  \"\n        Operator.Word:             \"bold \n\n        Punctuation:               \"bold \n\n        \n        \n        \n        Name:                      \"\n        Name.Attribute:            \"\n        Name.Builtin:              \"\n        Name.Builtin.Pseudo:       \"\n        Name.Class:                \"\n        Name.Constant:             \"\n        Name.Decorator:            \"\n        Name.Entity:               \"\n        Name.Exception:            \"bold \n        Name.Function:             \"\n        Name.Property:             \"\n        Name.Label:                \"\n        Name.Namespace:            \"\n        Name.Other:                \"\n        Name.Tag:                  \"bold \n        Name.Variable:             \"\n        Name.Variable.Class:       \"\n        Name.Variable.Global:      \"\n        Name.Variable.Instance:    \"\n\n        Number:                    \"\n\n        Literal:                   \"\n        Literal.Date:              \"\n\n        String:                    \"\n        String.Backtick:           \"\n        String.Char:               \"\n        String.Doc:                \"italic \n        String.Double:             \"\n        String.Escape:             \"\n        String.Heredoc:            \"\n        String.Interpol:           \"\n        String.Other:              \"\n        String.Regex:              \"\n        String.Single:             \"\n        String.Symbol:             \"\n\n        Generic:                   \"\n        Generic.Deleted:           \"\n        Generic.Emph:              \"italic \n        Generic.Error:             \"\n        Generic.Heading:           \"bold \n        Generic.Inserted:          \"\n        Generic.Output:            \"\n        Generic.Prompt:            \"\n        Generic.Strong:            \"bold \n        Generic.Subheading:        \"bold \n        Generic.Traceback:         \"bold \n    }\n", "comments": "# flasky extensions.  flasky pygments style based on tango style\n#f8f8f8\"\n# No corresponding class for the following:\n#Text:                     \"\", # class:  ''\n#f8f8f8\",      # class: 'w'\n#a40000 border:#ef2929\", # class: 'err'\n#000000\",                # class 'x'\n#8f5902\", # class: 'c'\n# class: 'cp'\n#004461\",   # class: 'k'\n#004461\",   # class: 'kc'\n#004461\",   # class: 'kd'\n#004461\",   # class: 'kn'\n#004461\",   # class: 'kp'\n#004461\",   # class: 'kr'\n#004461\",   # class: 'kt'\n#582800\",   # class: 'o'\n#004461\",   # class: 'ow' - like keywords\n#000000\",   # class: 'p'\n# because special names such as Name.Class, Name.Function, etc.\n# are not recognized as such later in the parsing, we choose them\n# to look the same as ordinary variables.\n#000000\",        # class: 'n'\n#c4a000\",        # class: 'na' - to be revised\n#004461\",        # class: 'nb'\n#3465a4\",        # class: 'bp'\n#000000\",        # class: 'nc' - to be revised\n#000000\",        # class: 'no' - to be revised\n#888\",           # class: 'nd' - to be revised\n#ce5c00\",        # class: 'ni'\n#cc0000\",   # class: 'ne'\n#000000\",        # class: 'nf'\n#000000\",        # class: 'py'\n#f57900\",        # class: 'nl'\n#000000\",        # class: 'nn' - to be revised\n#000000\",        # class: 'nx'\n#004461\",   # class: 'nt' - like a keyword\n#000000\",        # class: 'nv' - to be revised\n#000000\",        # class: 'vc' - to be revised\n#000000\",        # class: 'vg' - to be revised\n#000000\",        # class: 'vi' - to be revised\n#990000\",        # class: 'm'\n#000000\",        # class: 'l'\n#000000\",        # class: 'ld'\n#4e9a06\",        # class: 's'\n#4e9a06\",        # class: 'sb'\n#4e9a06\",        # class: 'sc'\n#8f5902\", # class: 'sd' - like a comment\n#4e9a06\",        # class: 's2'\n#4e9a06\",        # class: 'se'\n#4e9a06\",        # class: 'sh'\n#4e9a06\",        # class: 'si'\n#4e9a06\",        # class: 'sx'\n#4e9a06\",        # class: 'sr'\n#4e9a06\",        # class: 's1'\n#4e9a06\",        # class: 'ss'\n#000000\",        # class: 'g'\n#a40000\",        # class: 'gd'\n#000000\", # class: 'ge'\n#ef2929\",        # class: 'gr'\n#000080\",   # class: 'gh'\n#00A000\",        # class: 'gi'\n#888\",           # class: 'go'\n#745334\",        # class: 'gp'\n#000000\",   # class: 'gs'\n#800080\",   # class: 'gu'\n#a40000\",   # class: 'gt'\n", "content": "# flasky extensions.  flasky pygments style based on tango style\nfrom pygments.style import Style\nfrom pygments.token import Keyword, Name, Comment, String, Error, \\\n     Number, Operator, Generic, Whitespace, Punctuation, Other, Literal\n\n\nclass FlaskyStyle(Style):\n    background_color = \"#f8f8f8\"\n    default_style = \"\"\n\n    styles = {\n        # No corresponding class for the following:\n        #Text:                     \"\", # class:  ''\n        Whitespace:                \"underline #f8f8f8\",      # class: 'w'\n        Error:                     \"#a40000 border:#ef2929\", # class: 'err'\n        Other:                     \"#000000\",                # class 'x'\n\n        Comment:                   \"italic #8f5902\", # class: 'c'\n        Comment.Preproc:           \"noitalic\",       # class: 'cp'\n\n        Keyword:                   \"bold #004461\",   # class: 'k'\n        Keyword.Constant:          \"bold #004461\",   # class: 'kc'\n        Keyword.Declaration:       \"bold #004461\",   # class: 'kd'\n        Keyword.Namespace:         \"bold #004461\",   # class: 'kn'\n        Keyword.Pseudo:            \"bold #004461\",   # class: 'kp'\n        Keyword.Reserved:          \"bold #004461\",   # class: 'kr'\n        Keyword.Type:              \"bold #004461\",   # class: 'kt'\n\n        Operator:                  \"#582800\",   # class: 'o'\n        Operator.Word:             \"bold #004461\",   # class: 'ow' - like keywords\n\n        Punctuation:               \"bold #000000\",   # class: 'p'\n\n        # because special names such as Name.Class, Name.Function, etc.\n        # are not recognized as such later in the parsing, we choose them\n        # to look the same as ordinary variables.\n        Name:                      \"#000000\",        # class: 'n'\n        Name.Attribute:            \"#c4a000\",        # class: 'na' - to be revised\n        Name.Builtin:              \"#004461\",        # class: 'nb'\n        Name.Builtin.Pseudo:       \"#3465a4\",        # class: 'bp'\n        Name.Class:                \"#000000\",        # class: 'nc' - to be revised\n        Name.Constant:             \"#000000\",        # class: 'no' - to be revised\n        Name.Decorator:            \"#888\",           # class: 'nd' - to be revised\n        Name.Entity:               \"#ce5c00\",        # class: 'ni'\n        Name.Exception:            \"bold #cc0000\",   # class: 'ne'\n        Name.Function:             \"#000000\",        # class: 'nf'\n        Name.Property:             \"#000000\",        # class: 'py'\n        Name.Label:                \"#f57900\",        # class: 'nl'\n        Name.Namespace:            \"#000000\",        # class: 'nn' - to be revised\n        Name.Other:                \"#000000\",        # class: 'nx'\n        Name.Tag:                  \"bold #004461\",   # class: 'nt' - like a keyword\n        Name.Variable:             \"#000000\",        # class: 'nv' - to be revised\n        Name.Variable.Class:       \"#000000\",        # class: 'vc' - to be revised\n        Name.Variable.Global:      \"#000000\",        # class: 'vg' - to be revised\n        Name.Variable.Instance:    \"#000000\",        # class: 'vi' - to be revised\n\n        Number:                    \"#990000\",        # class: 'm'\n\n        Literal:                   \"#000000\",        # class: 'l'\n        Literal.Date:              \"#000000\",        # class: 'ld'\n\n        String:                    \"#4e9a06\",        # class: 's'\n        String.Backtick:           \"#4e9a06\",        # class: 'sb'\n        String.Char:               \"#4e9a06\",        # class: 'sc'\n        String.Doc:                \"italic #8f5902\", # class: 'sd' - like a comment\n        String.Double:             \"#4e9a06\",        # class: 's2'\n        String.Escape:             \"#4e9a06\",        # class: 'se'\n        String.Heredoc:            \"#4e9a06\",        # class: 'sh'\n        String.Interpol:           \"#4e9a06\",        # class: 'si'\n        String.Other:              \"#4e9a06\",        # class: 'sx'\n        String.Regex:              \"#4e9a06\",        # class: 'sr'\n        String.Single:             \"#4e9a06\",        # class: 's1'\n        String.Symbol:             \"#4e9a06\",        # class: 'ss'\n\n        Generic:                   \"#000000\",        # class: 'g'\n        Generic.Deleted:           \"#a40000\",        # class: 'gd'\n        Generic.Emph:              \"italic #000000\", # class: 'ge'\n        Generic.Error:             \"#ef2929\",        # class: 'gr'\n        Generic.Heading:           \"bold #000080\",   # class: 'gh'\n        Generic.Inserted:          \"#00A000\",        # class: 'gi'\n        Generic.Output:            \"#888\",           # class: 'go'\n        Generic.Prompt:            \"#745334\",        # class: 'gp'\n        Generic.Strong:            \"bold #000000\",   # class: 'gs'\n        Generic.Subheading:        \"bold #800080\",   # class: 'gu'\n        Generic.Traceback:         \"bold #a40000\",   # class: 'gt'\n    }\n", "description": "Python HTTP Requests for Humans\u2122 \u2728\ud83c\udf70\u2728", "file_name": "flask_theme_support.py", "language": "Python", "project_name": "requests", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/requests_requests/requests-requests-4ea09e4/docs/_themes/flask_theme_support.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:48:12Z", "url": "https://github.com/requests/requests", "wiki": true}