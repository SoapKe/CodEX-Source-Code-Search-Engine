{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport time\nimport hashlib\nimport json\nimport random\n\nfrom .adobepass import AdobePassIE\nfrom .youtube import YoutubeIE\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_age_limit,\n    str_or_none,\n    try_get,\n)\n\n\nclass ViceIE(AdobePassIE):\n    IE_NAME = 'vice'\n    _VALID_URL = r'https?://(?:(?:video|vms)\\.vice|(?:www\\.)?viceland)\\.com/(?P<locale>[^/]+)/(?:video/[^/]+|embed)/(?P<id>[\\da-f]+)'\n    _TESTS = [{\n        'url': 'https://video.vice.com/en_us/video/pet-cremator/58c69e38a55424f1227dc3f7',\n        'info_dict': {\n            'id': '5e647f0125e145c9aef2069412c0cbde',\n            'ext': 'mp4',\n            'title': '10 Questions You Always Wanted To Ask: Pet Cremator',\n            'description': 'md5:fe856caacf61fe0e74fab15ce2b07ca5',\n            'uploader': 'vice',\n            'uploader_id': '57a204088cb727dec794c67b',\n            'timestamp': 1489664942,\n            'upload_date': '20170316',\n            'age_limit': 14,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'add_ie': ['UplynkPreplay'],\n    }, {\n        \n        'url': 'https://video.vice.com/en_us/video/the-signal-from-tolva/5816510690b70e6c5fd39a56',\n        'info_dict': {\n            'id': '930c0ad1f47141cc955087eecaddb0e2',\n            'ext': 'mp4',\n            'uploader': 'waypoint',\n            'title': 'The Signal From T\u00f6lva',\n            'description': 'md5:3927e3c79f9e8094606a2b3c5b5e55d5',\n            'uploader_id': '57f7d621e05ca860fa9ccaf9',\n            'timestamp': 1477941983,\n            'upload_date': '20161031',\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'add_ie': ['UplynkPreplay'],\n    }, {\n        'url': 'https://video.vice.com/alps/video/ulfs-wien-beruchtigste-grafitti-crew-part-1/581b12b60a0e1f4c0fb6ea2f',\n        'info_dict': {\n            'id': '581b12b60a0e1f4c0fb6ea2f',\n            'ext': 'mp4',\n            'title': 'ULFs - Wien ber\u00fcchtigste Grafitti Crew - Part 1',\n            'description': '<p>Zwischen Hinterzimmer-Tattoos und U-Bahnsch\u00e4chten erz\u00e4hlen uns die Ulfs, wie es ist, \"s\u00fcchtig nach Sachbesch\u00e4digung\" zu sein.</p>',\n            'uploader': 'VICE',\n            'uploader_id': '57a204088cb727dec794c67b',\n            'timestamp': 1485368119,\n            'upload_date': '20170125',\n            'age_limit': 14,\n        },\n        'params': {\n            \n            'skip_download': True,\n            'proxy': '127.0.0.1:8118',\n        },\n        'add_ie': ['UplynkPreplay'],\n    }, {\n        'url': 'https://video.vice.com/en_us/video/pizza-show-trailer/56d8c9a54d286ed92f7f30e4',\n        'only_matching': True,\n    }, {\n        'url': 'https://video.vice.com/en_us/embed/57f41d3556a0a80f54726060',\n        'only_matching': True,\n    }, {\n        'url': 'https://vms.vice.com/en_us/video/preplay/58c69e38a55424f1227dc3f7',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.viceland.com/en_us/video/thursday-march-1-2018/5a8f2d7ff1cdb332dd446ec1',\n        'only_matching': True,\n    }]\n    _PREPLAY_HOST = 'vms.vice'\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe\\b[^>]+\\bsrc=[\"\\']((?:https?:)?//video\\.vice\\.com/[^/]+/embed/[\\da-f]+)',\n            webpage)\n\n    @staticmethod\n    def _extract_url(webpage):\n        urls = ViceIE._extract_urls(webpage)\n        return urls[0] if urls else None\n\n    def _real_extract(self, url):\n        locale, video_id = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(\n            'https://video.vice.com/%s/embed/%s' % (locale, video_id),\n            video_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'PREFETCH_DATA\\s*=\\s*({.+?})\\s*;\\s*\\n', webpage,\n                'app state'), video_id)['video']\n        video_id = video.get('vms_id') or video.get('id') or video_id\n        title = video['title']\n        is_locked = video.get('locked')\n        rating = video.get('rating')\n        thumbnail = video.get('thumbnail_url')\n        duration = int_or_none(video.get('duration'))\n        series = try_get(\n            video, lambda x: x['episode']['season']['show']['title'],\n            compat_str)\n        episode_number = try_get(\n            video, lambda x: x['episode']['episode_number'])\n        season_number = try_get(\n            video, lambda x: x['episode']['season']['season_number'])\n        uploader = None\n\n        query = {}\n        if is_locked:\n            resource = self._get_mvpd_resource(\n                'VICELAND', title, video_id, rating)\n            query['tvetoken'] = self._extract_mvpd_auth(\n                url, video_id, 'VICELAND', resource)\n\n        \n        \n        \n        \n        exp = int(time.time()) + 1440\n\n        query.update({\n            'exp': exp,\n            'sign': hashlib.sha512(('%s:GET:%d' % (video_id, exp)).encode()).hexdigest(),\n            '_ad_blocked': None,\n            '_ad_unit': '',\n            '_debug': '',\n            'platform': 'desktop',\n            'rn': random.randint(10000, 100000),\n            'fbprebidtoken': '',\n        })\n\n        try:\n            host = 'www.viceland' if is_locked else self._PREPLAY_HOST\n            preplay = self._download_json(\n                'https://%s.com/%s/video/preplay/%s' % (host, locale, video_id),\n                video_id, query=query)\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code in (400, 401):\n                error = json.loads(e.cause.read().decode())\n                error_message = error.get('error_description') or error['details']\n                raise ExtractorError('%s said: %s' % (\n                    self.IE_NAME, error_message), expected=True)\n            raise\n\n        video_data = preplay['video']\n        base = video_data['base']\n        uplynk_preplay_url = preplay['preplayURL']\n        episode = video_data.get('episode', {})\n        channel = video_data.get('channel', {})\n\n        subtitles = {}\n        cc_url = preplay.get('ccURL')\n        if cc_url:\n            subtitles['en'] = [{\n                'url': cc_url,\n            }]\n\n        return {\n            '_type': 'url_transparent',\n            'url': uplynk_preplay_url,\n            'id': video_id,\n            'title': title,\n            'description': base.get('body') or base.get('display_body'),\n            'thumbnail': thumbnail,\n            'duration': int_or_none(video_data.get('video_duration')) or duration,\n            'timestamp': int_or_none(video_data.get('created_at'), 1000),\n            'age_limit': parse_age_limit(video_data.get('video_rating')),\n            'series': video_data.get('show_title') or series,\n            'episode_number': int_or_none(episode.get('episode_number') or episode_number),\n            'episode_id': str_or_none(episode.get('id') or video_data.get('episode_id')),\n            'season_number': int_or_none(season_number),\n            'season_id': str_or_none(episode.get('season_id')),\n            'uploader': channel.get('base', {}).get('title') or channel.get('name') or uploader,\n            'uploader_id': str_or_none(channel.get('id')),\n            'subtitles': subtitles,\n            'ie_key': 'UplynkPreplay',\n        }\n\n\nclass ViceShowIE(InfoExtractor):\n    IE_NAME = 'vice:show'\n    _VALID_URL = r'https?://(?:.+?\\.)?vice\\.com/(?:[^/]+/)?show/(?P<id>[^/?\n\n    _TEST = {\n        'url': 'https://munchies.vice.com/en/show/fuck-thats-delicious-2',\n        'info_dict': {\n            'id': 'fuck-thats-delicious-2',\n            'title': \"Fuck, That's Delicious\",\n            'description': 'Follow the culinary adventures of rapper Action Bronson during his ongoing world tour.',\n        },\n        'playlist_count': 17,\n    }\n\n    def _real_extract(self, url):\n        show_id = self._match_id(url)\n        webpage = self._download_webpage(url, show_id)\n\n        entries = [\n            self.url_result(video_url, ViceIE.ie_key())\n            for video_url, _ in re.findall(\n                r'<h2[^>]+class=\"article-title\"[^>]+data-id=\"\\d+\"[^>]*>\\s*<a[^>]+href=\"(%s.*?)\"'\n                % ViceIE._VALID_URL, webpage)]\n\n        title = self._search_regex(\n            r'<title>(.+?)</title>', webpage, 'title', default=None)\n        if title:\n            title = re.sub(r'(.+)\\s*\\|\\s*.+$', r'\\1', title).strip()\n        description = self._html_search_meta(\n            'description', webpage, 'description')\n\n        return self.playlist_result(entries, show_id, title, description)\n\n\nclass ViceArticleIE(InfoExtractor):\n    IE_NAME = 'vice:article'\n    _VALID_URL = r'https://www\\.vice\\.com/[^/]+/article/(?P<id>[^?\n\n    _TESTS = [{\n        'url': 'https://www.vice.com/en_us/article/on-set-with-the-woman-making-mormon-porn-in-utah',\n        'info_dict': {\n            'id': '41eae2a47b174a1398357cec55f1f6fc',\n            'ext': 'mp4',\n            'title': 'Mormon War on Porn ',\n            'description': 'md5:6394a8398506581d0346b9ab89093fef',\n            'uploader': 'vice',\n            'uploader_id': '57a204088cb727dec794c67b',\n            'timestamp': 1491883129,\n            'upload_date': '20170411',\n            'age_limit': 17,\n        },\n        'params': {\n            \n            'skip_download': True,\n        },\n        'add_ie': ['UplynkPreplay'],\n    }, {\n        'url': 'https://www.vice.com/en_us/article/how-to-hack-a-car',\n        'md5': '7fe8ebc4fa3323efafc127b82bd821d9',\n        'info_dict': {\n            'id': '3jstaBeXgAs',\n            'ext': 'mp4',\n            'title': 'How to Hack a Car: Phreaked Out (Episode 2)',\n            'description': 'md5:ee95453f7ff495db8efe14ae8bf56f30',\n            'uploader': 'Motherboard',\n            'uploader_id': 'MotherboardTV',\n            'upload_date': '20140529',\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'https://www.vice.com/en_us/article/znm9dx/karley-sciortino-slutever-reloaded',\n        'md5': 'a7ecf64ee4fa19b916c16f4b56184ae2',\n        'info_dict': {\n            'id': 'e2ed435eb67e43efb66e6ef9a6930a88',\n            'ext': 'mp4',\n            'title': \"Making The World's First Male Sex Doll\",\n            'description': 'md5:916078ef0e032d76343116208b6cc2c4',\n            'uploader': 'vice',\n            'uploader_id': '57a204088cb727dec794c67b',\n            'timestamp': 1476919911,\n            'upload_date': '20161019',\n            'age_limit': 17,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [ViceIE.ie_key()],\n    }, {\n        'url': 'https://www.vice.com/en_us/article/cowboy-capitalists-part-1',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vice.com/ru/article/big-night-out-ibiza-clive-martin-229',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        prefetch_data = self._parse_json(self._search_regex(\n            r'__APP_STATE\\s*=\\s*({.+?})(?:\\s*\\|\\|\\s*{}\\s*)?;\\s*\\n',\n            webpage, 'app state'), display_id)['pageData']\n        body = prefetch_data['body']\n\n        def _url_res(video_url, ie_key):\n            return {\n                '_type': 'url_transparent',\n                'url': video_url,\n                'display_id': display_id,\n                'ie_key': ie_key,\n            }\n\n        vice_url = ViceIE._extract_url(webpage)\n        if vice_url:\n            return _url_res(vice_url, ViceIE.ie_key())\n\n        embed_code = self._search_regex(\n            r'embedCode=([^&\\'\"]+)', body,\n            'ooyala embed code', default=None)\n        if embed_code:\n            return _url_res('ooyala:%s' % embed_code, 'Ooyala')\n\n        youtube_url = YoutubeIE._extract_url(body)\n        if youtube_url:\n            return _url_res(youtube_url, YoutubeIE.ie_key())\n\n        video_url = self._html_search_regex(\n            r'data-video-url=\"([^\"]+)\"',\n            prefetch_data['embed_code'], 'video URL')\n\n        return _url_res(video_url, ViceIE.ie_key())\n", "comments": "# coding: utf-8\n# m3u8 download\n# geo restricted to US\n# m3u8 download\n# AES-encrypted m3u8\n# signature generation algorithm is reverse engineered from signatureGenerator in\n# webpack:///../shared/~/vice-player/dist/js/vice-player.js in\n# https://www.viceland.com/assets/common/js/web.vendor.bundle.js\n# new JS is located here https://vice-web-statics-cdn.vice.com/vice-player/player-embed.js\n#&]+)'\n#]+)'\n# AES-encrypted m3u8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport time\nimport hashlib\nimport json\nimport random\n\nfrom .adobepass import AdobePassIE\nfrom .youtube import YoutubeIE\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_age_limit,\n    str_or_none,\n    try_get,\n)\n\n\nclass ViceIE(AdobePassIE):\n    IE_NAME = 'vice'\n    _VALID_URL = r'https?://(?:(?:video|vms)\\.vice|(?:www\\.)?viceland)\\.com/(?P<locale>[^/]+)/(?:video/[^/]+|embed)/(?P<id>[\\da-f]+)'\n    _TESTS = [{\n        'url': 'https://video.vice.com/en_us/video/pet-cremator/58c69e38a55424f1227dc3f7',\n        'info_dict': {\n            'id': '5e647f0125e145c9aef2069412c0cbde',\n            'ext': 'mp4',\n            'title': '10 Questions You Always Wanted To Ask: Pet Cremator',\n            'description': 'md5:fe856caacf61fe0e74fab15ce2b07ca5',\n            'uploader': 'vice',\n            'uploader_id': '57a204088cb727dec794c67b',\n            'timestamp': 1489664942,\n            'upload_date': '20170316',\n            'age_limit': 14,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'add_ie': ['UplynkPreplay'],\n    }, {\n        # geo restricted to US\n        'url': 'https://video.vice.com/en_us/video/the-signal-from-tolva/5816510690b70e6c5fd39a56',\n        'info_dict': {\n            'id': '930c0ad1f47141cc955087eecaddb0e2',\n            'ext': 'mp4',\n            'uploader': 'waypoint',\n            'title': 'The Signal From T\u00f6lva',\n            'description': 'md5:3927e3c79f9e8094606a2b3c5b5e55d5',\n            'uploader_id': '57f7d621e05ca860fa9ccaf9',\n            'timestamp': 1477941983,\n            'upload_date': '20161031',\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        },\n        'add_ie': ['UplynkPreplay'],\n    }, {\n        'url': 'https://video.vice.com/alps/video/ulfs-wien-beruchtigste-grafitti-crew-part-1/581b12b60a0e1f4c0fb6ea2f',\n        'info_dict': {\n            'id': '581b12b60a0e1f4c0fb6ea2f',\n            'ext': 'mp4',\n            'title': 'ULFs - Wien ber\u00fcchtigste Grafitti Crew - Part 1',\n            'description': '<p>Zwischen Hinterzimmer-Tattoos und U-Bahnsch\u00e4chten erz\u00e4hlen uns die Ulfs, wie es ist, \"s\u00fcchtig nach Sachbesch\u00e4digung\" zu sein.</p>',\n            'uploader': 'VICE',\n            'uploader_id': '57a204088cb727dec794c67b',\n            'timestamp': 1485368119,\n            'upload_date': '20170125',\n            'age_limit': 14,\n        },\n        'params': {\n            # AES-encrypted m3u8\n            'skip_download': True,\n            'proxy': '127.0.0.1:8118',\n        },\n        'add_ie': ['UplynkPreplay'],\n    }, {\n        'url': 'https://video.vice.com/en_us/video/pizza-show-trailer/56d8c9a54d286ed92f7f30e4',\n        'only_matching': True,\n    }, {\n        'url': 'https://video.vice.com/en_us/embed/57f41d3556a0a80f54726060',\n        'only_matching': True,\n    }, {\n        'url': 'https://vms.vice.com/en_us/video/preplay/58c69e38a55424f1227dc3f7',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.viceland.com/en_us/video/thursday-march-1-2018/5a8f2d7ff1cdb332dd446ec1',\n        'only_matching': True,\n    }]\n    _PREPLAY_HOST = 'vms.vice'\n\n    @staticmethod\n    def _extract_urls(webpage):\n        return re.findall(\n            r'<iframe\\b[^>]+\\bsrc=[\"\\']((?:https?:)?//video\\.vice\\.com/[^/]+/embed/[\\da-f]+)',\n            webpage)\n\n    @staticmethod\n    def _extract_url(webpage):\n        urls = ViceIE._extract_urls(webpage)\n        return urls[0] if urls else None\n\n    def _real_extract(self, url):\n        locale, video_id = re.match(self._VALID_URL, url).groups()\n\n        webpage = self._download_webpage(\n            'https://video.vice.com/%s/embed/%s' % (locale, video_id),\n            video_id)\n\n        video = self._parse_json(\n            self._search_regex(\n                r'PREFETCH_DATA\\s*=\\s*({.+?})\\s*;\\s*\\n', webpage,\n                'app state'), video_id)['video']\n        video_id = video.get('vms_id') or video.get('id') or video_id\n        title = video['title']\n        is_locked = video.get('locked')\n        rating = video.get('rating')\n        thumbnail = video.get('thumbnail_url')\n        duration = int_or_none(video.get('duration'))\n        series = try_get(\n            video, lambda x: x['episode']['season']['show']['title'],\n            compat_str)\n        episode_number = try_get(\n            video, lambda x: x['episode']['episode_number'])\n        season_number = try_get(\n            video, lambda x: x['episode']['season']['season_number'])\n        uploader = None\n\n        query = {}\n        if is_locked:\n            resource = self._get_mvpd_resource(\n                'VICELAND', title, video_id, rating)\n            query['tvetoken'] = self._extract_mvpd_auth(\n                url, video_id, 'VICELAND', resource)\n\n        # signature generation algorithm is reverse engineered from signatureGenerator in\n        # webpack:///../shared/~/vice-player/dist/js/vice-player.js in\n        # https://www.viceland.com/assets/common/js/web.vendor.bundle.js\n        # new JS is located here https://vice-web-statics-cdn.vice.com/vice-player/player-embed.js\n        exp = int(time.time()) + 1440\n\n        query.update({\n            'exp': exp,\n            'sign': hashlib.sha512(('%s:GET:%d' % (video_id, exp)).encode()).hexdigest(),\n            '_ad_blocked': None,\n            '_ad_unit': '',\n            '_debug': '',\n            'platform': 'desktop',\n            'rn': random.randint(10000, 100000),\n            'fbprebidtoken': '',\n        })\n\n        try:\n            host = 'www.viceland' if is_locked else self._PREPLAY_HOST\n            preplay = self._download_json(\n                'https://%s.com/%s/video/preplay/%s' % (host, locale, video_id),\n                video_id, query=query)\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code in (400, 401):\n                error = json.loads(e.cause.read().decode())\n                error_message = error.get('error_description') or error['details']\n                raise ExtractorError('%s said: %s' % (\n                    self.IE_NAME, error_message), expected=True)\n            raise\n\n        video_data = preplay['video']\n        base = video_data['base']\n        uplynk_preplay_url = preplay['preplayURL']\n        episode = video_data.get('episode', {})\n        channel = video_data.get('channel', {})\n\n        subtitles = {}\n        cc_url = preplay.get('ccURL')\n        if cc_url:\n            subtitles['en'] = [{\n                'url': cc_url,\n            }]\n\n        return {\n            '_type': 'url_transparent',\n            'url': uplynk_preplay_url,\n            'id': video_id,\n            'title': title,\n            'description': base.get('body') or base.get('display_body'),\n            'thumbnail': thumbnail,\n            'duration': int_or_none(video_data.get('video_duration')) or duration,\n            'timestamp': int_or_none(video_data.get('created_at'), 1000),\n            'age_limit': parse_age_limit(video_data.get('video_rating')),\n            'series': video_data.get('show_title') or series,\n            'episode_number': int_or_none(episode.get('episode_number') or episode_number),\n            'episode_id': str_or_none(episode.get('id') or video_data.get('episode_id')),\n            'season_number': int_or_none(season_number),\n            'season_id': str_or_none(episode.get('season_id')),\n            'uploader': channel.get('base', {}).get('title') or channel.get('name') or uploader,\n            'uploader_id': str_or_none(channel.get('id')),\n            'subtitles': subtitles,\n            'ie_key': 'UplynkPreplay',\n        }\n\n\nclass ViceShowIE(InfoExtractor):\n    IE_NAME = 'vice:show'\n    _VALID_URL = r'https?://(?:.+?\\.)?vice\\.com/(?:[^/]+/)?show/(?P<id>[^/?#&]+)'\n\n    _TEST = {\n        'url': 'https://munchies.vice.com/en/show/fuck-thats-delicious-2',\n        'info_dict': {\n            'id': 'fuck-thats-delicious-2',\n            'title': \"Fuck, That's Delicious\",\n            'description': 'Follow the culinary adventures of rapper Action Bronson during his ongoing world tour.',\n        },\n        'playlist_count': 17,\n    }\n\n    def _real_extract(self, url):\n        show_id = self._match_id(url)\n        webpage = self._download_webpage(url, show_id)\n\n        entries = [\n            self.url_result(video_url, ViceIE.ie_key())\n            for video_url, _ in re.findall(\n                r'<h2[^>]+class=\"article-title\"[^>]+data-id=\"\\d+\"[^>]*>\\s*<a[^>]+href=\"(%s.*?)\"'\n                % ViceIE._VALID_URL, webpage)]\n\n        title = self._search_regex(\n            r'<title>(.+?)</title>', webpage, 'title', default=None)\n        if title:\n            title = re.sub(r'(.+)\\s*\\|\\s*.+$', r'\\1', title).strip()\n        description = self._html_search_meta(\n            'description', webpage, 'description')\n\n        return self.playlist_result(entries, show_id, title, description)\n\n\nclass ViceArticleIE(InfoExtractor):\n    IE_NAME = 'vice:article'\n    _VALID_URL = r'https://www\\.vice\\.com/[^/]+/article/(?P<id>[^?#]+)'\n\n    _TESTS = [{\n        'url': 'https://www.vice.com/en_us/article/on-set-with-the-woman-making-mormon-porn-in-utah',\n        'info_dict': {\n            'id': '41eae2a47b174a1398357cec55f1f6fc',\n            'ext': 'mp4',\n            'title': 'Mormon War on Porn ',\n            'description': 'md5:6394a8398506581d0346b9ab89093fef',\n            'uploader': 'vice',\n            'uploader_id': '57a204088cb727dec794c67b',\n            'timestamp': 1491883129,\n            'upload_date': '20170411',\n            'age_limit': 17,\n        },\n        'params': {\n            # AES-encrypted m3u8\n            'skip_download': True,\n        },\n        'add_ie': ['UplynkPreplay'],\n    }, {\n        'url': 'https://www.vice.com/en_us/article/how-to-hack-a-car',\n        'md5': '7fe8ebc4fa3323efafc127b82bd821d9',\n        'info_dict': {\n            'id': '3jstaBeXgAs',\n            'ext': 'mp4',\n            'title': 'How to Hack a Car: Phreaked Out (Episode 2)',\n            'description': 'md5:ee95453f7ff495db8efe14ae8bf56f30',\n            'uploader': 'Motherboard',\n            'uploader_id': 'MotherboardTV',\n            'upload_date': '20140529',\n        },\n        'add_ie': ['Youtube'],\n    }, {\n        'url': 'https://www.vice.com/en_us/article/znm9dx/karley-sciortino-slutever-reloaded',\n        'md5': 'a7ecf64ee4fa19b916c16f4b56184ae2',\n        'info_dict': {\n            'id': 'e2ed435eb67e43efb66e6ef9a6930a88',\n            'ext': 'mp4',\n            'title': \"Making The World's First Male Sex Doll\",\n            'description': 'md5:916078ef0e032d76343116208b6cc2c4',\n            'uploader': 'vice',\n            'uploader_id': '57a204088cb727dec794c67b',\n            'timestamp': 1476919911,\n            'upload_date': '20161019',\n            'age_limit': 17,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [ViceIE.ie_key()],\n    }, {\n        'url': 'https://www.vice.com/en_us/article/cowboy-capitalists-part-1',\n        'only_matching': True,\n    }, {\n        'url': 'https://www.vice.com/ru/article/big-night-out-ibiza-clive-martin-229',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        display_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, display_id)\n\n        prefetch_data = self._parse_json(self._search_regex(\n            r'__APP_STATE\\s*=\\s*({.+?})(?:\\s*\\|\\|\\s*{}\\s*)?;\\s*\\n',\n            webpage, 'app state'), display_id)['pageData']\n        body = prefetch_data['body']\n\n        def _url_res(video_url, ie_key):\n            return {\n                '_type': 'url_transparent',\n                'url': video_url,\n                'display_id': display_id,\n                'ie_key': ie_key,\n            }\n\n        vice_url = ViceIE._extract_url(webpage)\n        if vice_url:\n            return _url_res(vice_url, ViceIE.ie_key())\n\n        embed_code = self._search_regex(\n            r'embedCode=([^&\\'\"]+)', body,\n            'ooyala embed code', default=None)\n        if embed_code:\n            return _url_res('ooyala:%s' % embed_code, 'Ooyala')\n\n        youtube_url = YoutubeIE._extract_url(body)\n        if youtube_url:\n            return _url_res(youtube_url, YoutubeIE.ie_key())\n\n        video_url = self._html_search_regex(\n            r'data-video-url=\"([^\"]+)\"',\n            prefetch_data['embed_code'], 'video URL')\n\n        return _url_res(video_url, ViceIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vice.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vice.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}