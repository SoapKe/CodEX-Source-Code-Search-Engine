{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    mimetype2ext,\n)\n\n\nclass AparatIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?aparat\\.com/(?:v/|video/video/embed/videohash/)(?P<id>[a-zA-Z0-9]+)'\n\n    _TEST = {\n        'url': 'http://www.aparat.com/v/wP8On',\n        'md5': '131aca2e14fe7c4dcb3c4877ba300c89',\n        'info_dict': {\n            'id': 'wP8On',\n            'ext': 'mp4',\n            'title': '\u062a\u06cc\u0645 \u06af\u0644\u06a9\u0633\u06cc 11 - \u0632\u0648\u0645\u06cc\u062a',\n            'age_limit': 0,\n        },\n        \n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        \n        \n        \n        webpage = self._download_webpage(\n            'http://www.aparat.com/video/video/embed/vt/frame/showvideo/yes/videohash/' + video_id,\n            video_id)\n\n        title = self._search_regex(r'\\s+title:\\s*\"([^\"]+)\"', webpage, 'title')\n\n        file_list = self._parse_json(\n            self._search_regex(\n                r'fileList\\s*=\\s*JSON\\.parse\\(\\'([^\\']+)\\'\\)', webpage,\n                'file list'),\n            video_id)\n\n        formats = []\n        for item in file_list[0]:\n            file_url = item.get('file')\n            if not file_url:\n                continue\n            ext = mimetype2ext(item.get('type'))\n            label = item.get('label')\n            formats.append({\n                'url': file_url,\n                'ext': ext,\n                'format_id': label or ext,\n                'height': int_or_none(self._search_regex(\n                    r'(\\d+)[pP]', label or '', 'height', default=None)),\n            })\n        self._sort_formats(formats)\n\n        thumbnail = self._search_regex(\n            r'image:\\s*\"([^\"]+)\"', webpage, 'thumbnail', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'age_limit': self._family_friendly_search(webpage),\n            'formats': formats,\n        }\n", "comments": "# coding: utf-8\n# 'skip': 'Extremely unreliable',\n# Note: There is an easier-to-parse configuration at\n# http://www.aparat.com/video/video/config/videohash/%video_id\n# but the URL in there does not work\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    mimetype2ext,\n)\n\n\nclass AparatIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?aparat\\.com/(?:v/|video/video/embed/videohash/)(?P<id>[a-zA-Z0-9]+)'\n\n    _TEST = {\n        'url': 'http://www.aparat.com/v/wP8On',\n        'md5': '131aca2e14fe7c4dcb3c4877ba300c89',\n        'info_dict': {\n            'id': 'wP8On',\n            'ext': 'mp4',\n            'title': '\u062a\u06cc\u0645 \u06af\u0644\u06a9\u0633\u06cc 11 - \u0632\u0648\u0645\u06cc\u062a',\n            'age_limit': 0,\n        },\n        # 'skip': 'Extremely unreliable',\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        # Note: There is an easier-to-parse configuration at\n        # http://www.aparat.com/video/video/config/videohash/%video_id\n        # but the URL in there does not work\n        webpage = self._download_webpage(\n            'http://www.aparat.com/video/video/embed/vt/frame/showvideo/yes/videohash/' + video_id,\n            video_id)\n\n        title = self._search_regex(r'\\s+title:\\s*\"([^\"]+)\"', webpage, 'title')\n\n        file_list = self._parse_json(\n            self._search_regex(\n                r'fileList\\s*=\\s*JSON\\.parse\\(\\'([^\\']+)\\'\\)', webpage,\n                'file list'),\n            video_id)\n\n        formats = []\n        for item in file_list[0]:\n            file_url = item.get('file')\n            if not file_url:\n                continue\n            ext = mimetype2ext(item.get('type'))\n            label = item.get('label')\n            formats.append({\n                'url': file_url,\n                'ext': ext,\n                'format_id': label or ext,\n                'height': int_or_none(self._search_regex(\n                    r'(\\d+)[pP]', label or '', 'height', default=None)),\n            })\n        self._sort_formats(formats)\n\n        thumbnail = self._search_regex(\n            r'image:\\s*\"([^\"]+)\"', webpage, 'thumbnail', fatal=False)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'thumbnail': thumbnail,\n            'age_limit': self._family_friendly_search(webpage),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "aparat.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/aparat.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}