{"author": "HelloZeroNet", "code": "import re\nimport cgi\nimport copy\n\nfrom Plugin import PluginManager\nfrom Translate import Translate\nif \"_\" not in locals():\n    _ = Translate(\"plugins/Cors/languages/\")\n\n\ndef getCorsPath(site, inner_path):\n    match = re.match(\"^cors-([A-Za-z0-9]{26,35})/(.*)\", inner_path)\n    if not match:\n        raise Exception(\"Invalid cors path: %s\" % inner_path)\n    cors_address = match.group(1)\n    cors_inner_path = match.group(2)\n\n    if not \"Cors:%s\" % cors_address in site.settings[\"permissions\"]:\n        raise Exception(\"This site has no permission to access site %s\" % cors_address)\n\n    return cors_address, cors_inner_path\n\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    def hasSitePermission(self, address, cmd=None):\n        if super(UiWebsocketPlugin, self).hasSitePermission(address, cmd=cmd):\n            return True\n\n        if not \"Cors:%s\" % address in self.site.settings[\"permissions\"] or cmd not in [\"dbQuery\", \"userGetSettings\", \"siteInfo\"]:\n            return False\n        else:\n            return True\n\n    \n    def corsFuncWrapper(self, func_name, to, inner_path, *args, **kwargs):\n        if inner_path.startswith(\"cors-\"):\n            cors_address, cors_inner_path = getCorsPath(self.site, inner_path)\n\n            req_self = copy.copy(self)\n            req_self.site = self.server.sites.get(cors_address)  \n            if not req_self.site:\n                return {\"error\": \"No site found\"}\n\n            func = getattr(super(UiWebsocketPlugin, req_self), func_name)\n            back = func(to, cors_inner_path, *args, **kwargs)\n            return back\n        else:\n            func = getattr(super(UiWebsocketPlugin, self), func_name)\n            return func(to, inner_path, *args, **kwargs)\n\n    def actionFileGet(self, to, inner_path, *args, **kwargs):\n        return self.corsFuncWrapper(\"actionFileGet\", to, inner_path, *args, **kwargs)\n\n    def actionFileRules(self, to, inner_path, *args, **kwargs):\n        return self.corsFuncWrapper(\"actionFileRules\", to, inner_path, *args, **kwargs)\n\n    def actionOptionalFileInfo(self, to, inner_path, *args, **kwargs):\n        return self.corsFuncWrapper(\"actionOptionalFileInfo\", to, inner_path, *args, **kwargs)\n\n    def actionCorsPermission(self, to, address):\n        site = self.server.sites.get(address)\n        if site:\n            site_name = site.content_manager.contents.get(\"content.json\", {}).get(\"title\")\n            button_title = _[\"Grant\"]\n        else:\n            site_name = address\n            button_title = _[\"Grant & Add\"]\n\n        if site and \"Cors:\" + address in self.permissions:\n            return \"ignored\"\n\n        self.cmd(\n            \"confirm\",\n            [_[\"This site requests <b>read</b> permission to: <b>%s</b>\"] % cgi.escape(site_name), button_title],\n            lambda (res): self.cbCorsPermission(to, address)\n        )\n\n    def cbCorsPermission(self, to, address):\n        self.actionPermissionAdd(to, \"Cors:\" + address)\n        site = self.server.sites.get(address)\n        if not site:\n            self.server.site_manager.need(address)\n\n\n@PluginManager.registerTo(\"UiRequest\")\nclass UiRequestPlugin(object):\n    \n    def parsePath(self, path):\n        path_parts = super(UiRequestPlugin, self).parsePath(path)\n        if \"cors-\" not in path:  \n            return path_parts\n        site = self.server.sites[path_parts[\"address\"]]\n        try:\n            path_parts[\"address\"], path_parts[\"inner_path\"] = getCorsPath(site, path_parts[\"inner_path\"])\n        except:\n            return None\n        return path_parts\n", "comments": "  add cors support file commands    change site merged one    allow load cross origin files using  cors address file jpg    optimization ", "content": "import re\nimport cgi\nimport copy\n\nfrom Plugin import PluginManager\nfrom Translate import Translate\nif \"_\" not in locals():\n    _ = Translate(\"plugins/Cors/languages/\")\n\n\ndef getCorsPath(site, inner_path):\n    match = re.match(\"^cors-([A-Za-z0-9]{26,35})/(.*)\", inner_path)\n    if not match:\n        raise Exception(\"Invalid cors path: %s\" % inner_path)\n    cors_address = match.group(1)\n    cors_inner_path = match.group(2)\n\n    if not \"Cors:%s\" % cors_address in site.settings[\"permissions\"]:\n        raise Exception(\"This site has no permission to access site %s\" % cors_address)\n\n    return cors_address, cors_inner_path\n\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    def hasSitePermission(self, address, cmd=None):\n        if super(UiWebsocketPlugin, self).hasSitePermission(address, cmd=cmd):\n            return True\n\n        if not \"Cors:%s\" % address in self.site.settings[\"permissions\"] or cmd not in [\"dbQuery\", \"userGetSettings\", \"siteInfo\"]:\n            return False\n        else:\n            return True\n\n    # Add cors support for file commands\n    def corsFuncWrapper(self, func_name, to, inner_path, *args, **kwargs):\n        if inner_path.startswith(\"cors-\"):\n            cors_address, cors_inner_path = getCorsPath(self.site, inner_path)\n\n            req_self = copy.copy(self)\n            req_self.site = self.server.sites.get(cors_address)  # Change the site to the merged one\n            if not req_self.site:\n                return {\"error\": \"No site found\"}\n\n            func = getattr(super(UiWebsocketPlugin, req_self), func_name)\n            back = func(to, cors_inner_path, *args, **kwargs)\n            return back\n        else:\n            func = getattr(super(UiWebsocketPlugin, self), func_name)\n            return func(to, inner_path, *args, **kwargs)\n\n    def actionFileGet(self, to, inner_path, *args, **kwargs):\n        return self.corsFuncWrapper(\"actionFileGet\", to, inner_path, *args, **kwargs)\n\n    def actionFileRules(self, to, inner_path, *args, **kwargs):\n        return self.corsFuncWrapper(\"actionFileRules\", to, inner_path, *args, **kwargs)\n\n    def actionOptionalFileInfo(self, to, inner_path, *args, **kwargs):\n        return self.corsFuncWrapper(\"actionOptionalFileInfo\", to, inner_path, *args, **kwargs)\n\n    def actionCorsPermission(self, to, address):\n        site = self.server.sites.get(address)\n        if site:\n            site_name = site.content_manager.contents.get(\"content.json\", {}).get(\"title\")\n            button_title = _[\"Grant\"]\n        else:\n            site_name = address\n            button_title = _[\"Grant & Add\"]\n\n        if site and \"Cors:\" + address in self.permissions:\n            return \"ignored\"\n\n        self.cmd(\n            \"confirm\",\n            [_[\"This site requests <b>read</b> permission to: <b>%s</b>\"] % cgi.escape(site_name), button_title],\n            lambda (res): self.cbCorsPermission(to, address)\n        )\n\n    def cbCorsPermission(self, to, address):\n        self.actionPermissionAdd(to, \"Cors:\" + address)\n        site = self.server.sites.get(address)\n        if not site:\n            self.server.site_manager.need(address)\n\n\n@PluginManager.registerTo(\"UiRequest\")\nclass UiRequestPlugin(object):\n    # Allow to load cross origin files using /cors-address/file.jpg\n    def parsePath(self, path):\n        path_parts = super(UiRequestPlugin, self).parsePath(path)\n        if \"cors-\" not in path:  # Optimization\n            return path_parts\n        site = self.server.sites[path_parts[\"address\"]]\n        try:\n            path_parts[\"address\"], path_parts[\"inner_path\"] = getCorsPath(site, path_parts[\"inner_path\"])\n        except:\n            return None\n        return path_parts\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "CorsPlugin.py", "id": "9898cda8857d70526c519081094b2291", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/Cors/CorsPlugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}