{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom __future__ import print_function\nimport logging\nimport subprocess\nimport time\nimport subprocess\nfrom threading import Lock\n\n\nfrom odoo import http\nfrom odoo.http import request\n\n_logger = logging.getLogger(__name__)\n\n\n\n\nBANNED_DEVICES = {\n    \"0424:9514\",    \n    \"1d6b:0002\",    \n    \"0424:ec00\",    \n}\n\n\n# drivers modules must add to drivers an object with a get_status() method\n\ndrivers = {}\n\n\n\nrs232_devices = {}  \nrs232_lock = Lock() \n\nclass Proxy(http.Controller):\n\n    def get_status(self):\n        statuses = {}\n        for driver in drivers:\n            statuses[driver] = drivers[driver].get_status()\n        return statuses\n\n    @http.route('/hw_proxy/hello', type='http', auth='none', cors='*')\n    def hello(self):\n        return \"ping\"\n\n    @http.route('/hw_proxy/handshake', type='json', auth='none', cors='*')\n    def handshake(self):\n        return True\n\n    @http.route('/hw_proxy/status', type='http', auth='none', cors='*')\n    def status_http(self, debug=None, **kwargs):\n        resp = \"\"\"\n<!DOCTYPE HTML>\n<html>\n    <head>\n        <title>Odoo's PosBox</title>\n        <style>\n        body {\n            width: 480px;\n            margin: 60px auto;\n            font-family: sans-serif;\n            text-align: justify;\n            color: \n        }\n        .device {\n            border-bottom: solid 1px rgb(216,216,216);\n            padding: 9px;\n        }\n        .device:nth-child(2n) {\n            background:rgb(240,240,240);\n        }\n        </style>\n    </head>\n    <body>\n        <h1>Hardware Status</h1>\n        <p>The list of enabled drivers and their status</p>\n\"\"\"\n        statuses = self.get_status()\n        for driver in statuses:\n\n            status = statuses[driver]\n\n            if status['status'] == 'connecting':\n                color = 'black'\n            elif status['status'] == 'connected':\n                color = 'green'\n            else:\n                color = 'red'\n\n            resp += \"<h3 style='color:\"+color+\";'>\"+driver+' : '+status['status']+\"</h3>\\n\"\n            resp += \"<ul>\\n\"\n            for msg in status['messages']:\n                resp += '<li>'+msg+'</li>\\n'\n            resp += \"</ul>\\n\"\n        resp += \"\"\"\n            <h2>Connected Devices</h2>\n            <p>The list of connected USB devices as seen by the posbox</p>\n        \"\"\"\n        if debug is None:\n            resp += \"\"\"(<a href=\"/hw_proxy/status?debug\">debug version</a>)\"\"\"\n        devices = subprocess.check_output(\"lsusb\").split('\\n')\n        count   = 0\n        resp += \"<div class='devices'>\\n\"\n        for device in devices:\n            device_name = device[device.find('ID')+2:]\n            device_id   = device_name.split()[0]\n            if not (device_id in BANNED_DEVICES):\n                resp += \"<div class='device' data-device='\"+device+\"'>\"+device_name+\"</div>\\n\"\n                count += 1\n\n        if count == 0:\n            resp += \"<div class='device'>No USB Device Found</div>\"\n\n        resp += \"</div>\\n</body>\\n</html>\\n\\n\"\n\n        if debug is not None:\n            resp += \"\"\"\n\n                <h3>Debug version</h3>\n                <p><tt>lsusb -v</tt> output:</p>\n                <pre>\n                %s\n                </pre>\n\n            \"\"\" % subprocess.check_output('lsusb -v', shell=True)\n\n        return request.make_response(resp,{\n            'Cache-Control': 'no-cache',\n            'Content-Type': 'text/html; charset=utf-8',\n            'Access-Control-Allow-Origin':  '*',\n            'Access-Control-Allow-Methods': 'GET',\n            })\n\n    @http.route('/hw_proxy/status_json', type='json', auth='none', cors='*')\n    def status_json(self):\n        return self.get_status()\n\n    @http.route('/hw_proxy/scan_item_success', type='json', auth='none', cors='*')\n    def scan_item_success(self, ean):\n        \"\"\"\n        A product has been scanned with success\n        \"\"\"\n        print('scan_item_success: %s', ean)\n\n    @http.route('/hw_proxy/scan_item_error_unrecognized', type='json', auth='none', cors='*')\n    def scan_item_error_unrecognized(self, ean):\n        \"\"\"\n        A product has been scanned without success\n        \"\"\"\n        print('scan_item_error_unrecognized: %s', ean)\n\n    @http.route('/hw_proxy/help_needed', type='json', auth='none', cors='*')\n    def help_needed(self):\n        \"\"\"\n        The user wants an help (ex: light is on)\n        \"\"\"\n        print(\"help_needed\")\n\n    @http.route('/hw_proxy/help_canceled', type='json', auth='none', cors='*')\n    def help_canceled(self):\n        \"\"\"\n        The user stops the help request\n        \"\"\"\n        print(\"help_canceled\")\n\n    @http.route('/hw_proxy/payment_request', type='json', auth='none', cors='*')\n    def payment_request(self, price):\n        \"\"\"\n        The PoS will activate the method payment\n        \"\"\"\n        print(\"payment_request: price:%s\" % price)\n        return 'ok'\n\n    @http.route('/hw_proxy/payment_status', type='json', auth='none', cors='*')\n    def payment_status(self):\n        print(\"payment_status\")\n        return { 'status':'waiting' }\n\n    @http.route('/hw_proxy/payment_cancel', type='json', auth='none', cors='*')\n    def payment_cancel(self):\n        print(\"payment_cancel\")\n\n    @http.route('/hw_proxy/transaction_start', type='json', auth='none', cors='*')\n    def transaction_start(self):\n        print('transaction_start')\n\n    @http.route('/hw_proxy/transaction_end', type='json', auth='none', cors='*')\n    def transaction_end(self):\n        print('transaction_end')\n\n    @http.route('/hw_proxy/cashier_mode_activated', type='json', auth='none', cors='*')\n    def cashier_mode_activated(self):\n        print('cashier_mode_activated')\n\n    @http.route('/hw_proxy/cashier_mode_deactivated', type='json', auth='none', cors='*')\n    def cashier_mode_deactivated(self):\n        print('cashier_mode_deactivated')\n\n    @http.route('/hw_proxy/open_cashbox', type='json', auth='none', cors='*')\n    def open_cashbox(self):\n        print('open_cashbox')\n\n    @http.route('/hw_proxy/print_receipt', type='json', auth='none', cors='*')\n    def print_receipt(self, receipt):\n        print('print_receipt %s', receipt)\n\n    @http.route('/hw_proxy/is_scanner_connected', type='json', auth='none', cors='*')\n    def is_scanner_connected(self, receipt):\n        print('is_scanner_connected?')\n        return False\n\n    @http.route('/hw_proxy/scanner', type='json', auth='none', cors='*')\n    def scanner(self, receipt):\n        print('scanner')\n        time.sleep(10)\n        return ''\n\n    @http.route('/hw_proxy/log', type='json', auth='none', cors='*')\n    def log(self, arguments):\n        _logger.info(' '.join(str(v) for v in arguments))\n\n    @http.route('/hw_proxy/print_pdf_invoice', type='json', auth='none', cors='*')\n    def print_pdf_invoice(self, pdfinvoice):\n        print('print_pdf_invoice %s' % pdfinvoice)\n", "comments": "      doctype html   html       head           title odoo posbox  title           style          body               width  480px              margin  60px auto              font family  sans serif              text align  justify              color   6b6b6b                     device               border bottom  solid 1px rgb(216 216 216)              padding  9px                     device nth child(2n)               background rgb(240 240 240)                      style        head       body           h1 hardware status  h1           p the list enabled drivers status  p              statuses   self get status()         driver statuses               status   statuses driver               status  status       connecting                   color    black              elif status  status       connected                   color    green              else                  color    red               resp      h3 style  color   color       driver       status  status      h3  n              resp      ul  n              msg status  messages                    resp      li   msg    li  n              resp       ul  n          resp                     h2 connected devices  h2               p the list connected usb devices seen posbox  p                      debug none              resp       ( href   hw proxy status debug  debug version  )            devices   subprocess check output( lsusb ) split(  n )         count     0         resp      div class  devices   n          device devices              device name   device device find( id ) 2               device id     device name split() 0              (device id banned devices)                  resp      div class  device  data device    device      device name    div  n                  count    1          count    0              resp      div class  device  no usb device found  div            resp       div  n  body  n  html  n n           debug none              resp                          h3 debug version  h3                   p  tt lsusb  v  tt  output   p                   pre                                     pre                     subprocess check output( lsusb  v   shell true)          return request make response(resp                cache control    cache                content type    text html  charset utf 8                access control allow origin                      access control allow methods    get                )       http route(  hw proxy status json   type  json   auth  none   cors    )     def status json(self)          return self get status()       http route(  hw proxy scan item success   type  json   auth  none   cors    )     def scan item success(self  ean)                      a product scanned success                     print( scan item success     ean)       http route(  hw proxy scan item error unrecognized   type  json   auth  none   cors    )     def scan item error unrecognized(self  ean)                      a product scanned without success                     print( scan item error unrecognized     ean)       http route(  hw proxy help needed   type  json   auth  none   cors    )     def help needed(self)                      the user wants help (ex  light on)                     print( help needed )       http route(  hw proxy help canceled   type  json   auth  none   cors    )     def help canceled(self)                      the user stops help request                     print( help canceled )       http route(  hw proxy payment request   type  json   auth  none   cors    )     def payment request(self  price)                      the pos activate method payment                    coding  utf 8        part odoo  see license file full copyright licensing details     those builtin raspberry pi usb modules     appear list connected devices     standard microsystem corp  builtin ethernet module    linux foundation 2 0 root hub    standard microsystem corp  other builtin ethernet module    drivers modules must add drivers object get status() method     status  return status active drivers    keep list rs 232 devices recognized driver     drivers skip probes       path device    driver      must held update  rs232 devices    6b6b6b  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom __future__ import print_function\nimport logging\nimport subprocess\nimport time\nimport subprocess\nfrom threading import Lock\n\n\nfrom odoo import http\nfrom odoo.http import request\n\n_logger = logging.getLogger(__name__)\n\n\n# Those are the builtin raspberry pi USB modules, they should\n# not appear in the list of connected devices.\nBANNED_DEVICES = {\n    \"0424:9514\",    # Standard Microsystem Corp. Builtin Ethernet module\n    \"1d6b:0002\",    # Linux Foundation 2.0 root hub\n    \"0424:ec00\",    # Standard Microsystem Corp. Other Builtin Ethernet module\n}\n\n\n# drivers modules must add to drivers an object with a get_status() method\n# so that 'status' can return the status of all active drivers\ndrivers = {}\n\n# keep a list of RS-232 devices that have been recognized by a driver,\n# so other drivers can skip them during probes\nrs232_devices = {}  # {'/path/to/device': 'driver'}\nrs232_lock = Lock() # must be held to update `rs232_devices`\n\nclass Proxy(http.Controller):\n\n    def get_status(self):\n        statuses = {}\n        for driver in drivers:\n            statuses[driver] = drivers[driver].get_status()\n        return statuses\n\n    @http.route('/hw_proxy/hello', type='http', auth='none', cors='*')\n    def hello(self):\n        return \"ping\"\n\n    @http.route('/hw_proxy/handshake', type='json', auth='none', cors='*')\n    def handshake(self):\n        return True\n\n    @http.route('/hw_proxy/status', type='http', auth='none', cors='*')\n    def status_http(self, debug=None, **kwargs):\n        resp = \"\"\"\n<!DOCTYPE HTML>\n<html>\n    <head>\n        <title>Odoo's PosBox</title>\n        <style>\n        body {\n            width: 480px;\n            margin: 60px auto;\n            font-family: sans-serif;\n            text-align: justify;\n            color: #6B6B6B;\n        }\n        .device {\n            border-bottom: solid 1px rgb(216,216,216);\n            padding: 9px;\n        }\n        .device:nth-child(2n) {\n            background:rgb(240,240,240);\n        }\n        </style>\n    </head>\n    <body>\n        <h1>Hardware Status</h1>\n        <p>The list of enabled drivers and their status</p>\n\"\"\"\n        statuses = self.get_status()\n        for driver in statuses:\n\n            status = statuses[driver]\n\n            if status['status'] == 'connecting':\n                color = 'black'\n            elif status['status'] == 'connected':\n                color = 'green'\n            else:\n                color = 'red'\n\n            resp += \"<h3 style='color:\"+color+\";'>\"+driver+' : '+status['status']+\"</h3>\\n\"\n            resp += \"<ul>\\n\"\n            for msg in status['messages']:\n                resp += '<li>'+msg+'</li>\\n'\n            resp += \"</ul>\\n\"\n        resp += \"\"\"\n            <h2>Connected Devices</h2>\n            <p>The list of connected USB devices as seen by the posbox</p>\n        \"\"\"\n        if debug is None:\n            resp += \"\"\"(<a href=\"/hw_proxy/status?debug\">debug version</a>)\"\"\"\n        devices = subprocess.check_output(\"lsusb\").split('\\n')\n        count   = 0\n        resp += \"<div class='devices'>\\n\"\n        for device in devices:\n            device_name = device[device.find('ID')+2:]\n            device_id   = device_name.split()[0]\n            if not (device_id in BANNED_DEVICES):\n                resp += \"<div class='device' data-device='\"+device+\"'>\"+device_name+\"</div>\\n\"\n                count += 1\n\n        if count == 0:\n            resp += \"<div class='device'>No USB Device Found</div>\"\n\n        resp += \"</div>\\n</body>\\n</html>\\n\\n\"\n\n        if debug is not None:\n            resp += \"\"\"\n\n                <h3>Debug version</h3>\n                <p><tt>lsusb -v</tt> output:</p>\n                <pre>\n                %s\n                </pre>\n\n            \"\"\" % subprocess.check_output('lsusb -v', shell=True)\n\n        return request.make_response(resp,{\n            'Cache-Control': 'no-cache',\n            'Content-Type': 'text/html; charset=utf-8',\n            'Access-Control-Allow-Origin':  '*',\n            'Access-Control-Allow-Methods': 'GET',\n            })\n\n    @http.route('/hw_proxy/status_json', type='json', auth='none', cors='*')\n    def status_json(self):\n        return self.get_status()\n\n    @http.route('/hw_proxy/scan_item_success', type='json', auth='none', cors='*')\n    def scan_item_success(self, ean):\n        \"\"\"\n        A product has been scanned with success\n        \"\"\"\n        print('scan_item_success: %s', ean)\n\n    @http.route('/hw_proxy/scan_item_error_unrecognized', type='json', auth='none', cors='*')\n    def scan_item_error_unrecognized(self, ean):\n        \"\"\"\n        A product has been scanned without success\n        \"\"\"\n        print('scan_item_error_unrecognized: %s', ean)\n\n    @http.route('/hw_proxy/help_needed', type='json', auth='none', cors='*')\n    def help_needed(self):\n        \"\"\"\n        The user wants an help (ex: light is on)\n        \"\"\"\n        print(\"help_needed\")\n\n    @http.route('/hw_proxy/help_canceled', type='json', auth='none', cors='*')\n    def help_canceled(self):\n        \"\"\"\n        The user stops the help request\n        \"\"\"\n        print(\"help_canceled\")\n\n    @http.route('/hw_proxy/payment_request', type='json', auth='none', cors='*')\n    def payment_request(self, price):\n        \"\"\"\n        The PoS will activate the method payment\n        \"\"\"\n        print(\"payment_request: price:%s\" % price)\n        return 'ok'\n\n    @http.route('/hw_proxy/payment_status', type='json', auth='none', cors='*')\n    def payment_status(self):\n        print(\"payment_status\")\n        return { 'status':'waiting' }\n\n    @http.route('/hw_proxy/payment_cancel', type='json', auth='none', cors='*')\n    def payment_cancel(self):\n        print(\"payment_cancel\")\n\n    @http.route('/hw_proxy/transaction_start', type='json', auth='none', cors='*')\n    def transaction_start(self):\n        print('transaction_start')\n\n    @http.route('/hw_proxy/transaction_end', type='json', auth='none', cors='*')\n    def transaction_end(self):\n        print('transaction_end')\n\n    @http.route('/hw_proxy/cashier_mode_activated', type='json', auth='none', cors='*')\n    def cashier_mode_activated(self):\n        print('cashier_mode_activated')\n\n    @http.route('/hw_proxy/cashier_mode_deactivated', type='json', auth='none', cors='*')\n    def cashier_mode_deactivated(self):\n        print('cashier_mode_deactivated')\n\n    @http.route('/hw_proxy/open_cashbox', type='json', auth='none', cors='*')\n    def open_cashbox(self):\n        print('open_cashbox')\n\n    @http.route('/hw_proxy/print_receipt', type='json', auth='none', cors='*')\n    def print_receipt(self, receipt):\n        print('print_receipt %s', receipt)\n\n    @http.route('/hw_proxy/is_scanner_connected', type='json', auth='none', cors='*')\n    def is_scanner_connected(self, receipt):\n        print('is_scanner_connected?')\n        return False\n\n    @http.route('/hw_proxy/scanner', type='json', auth='none', cors='*')\n    def scanner(self, receipt):\n        print('scanner')\n        time.sleep(10)\n        return ''\n\n    @http.route('/hw_proxy/log', type='json', auth='none', cors='*')\n    def log(self, arguments):\n        _logger.info(' '.join(str(v) for v in arguments))\n\n    @http.route('/hw_proxy/print_pdf_invoice', type='json', auth='none', cors='*')\n    def print_pdf_invoice(self, pdfinvoice):\n        print('print_pdf_invoice %s' % pdfinvoice)\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "main.py", "id": "9cb83b59c5dba2bcbeeee1011a61e260", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hw_proxy/controllers/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}