{"author": "mitmproxy", "code": "\nfrom mitmproxy import flowfilter\nfrom mitmproxy import ctx, http\n\n\nclass Filter:\n    def __init__(self):\n        self.filter = None  \n\n    def configure(self, updated):\n        self.filter = flowfilter.parse(ctx.options.flowfilter)\n\n    def load(self, l):\n        l.add_option(\n            \"flowfilter\", str, \"\", \"Check that flow matches filter.\"\n        )\n\n    def response(self, flow: http.HTTPFlow) -> None:\n        if flowfilter.match(self.filter, flow):\n            print(\"Flow matches filter:\")\n            print(flow)\n\n\naddons = [Filter()]\n", "comments": "    this scripts demonstrates use mitmproxy filter pattern scripts         type  flowfilter tfilter ", "content": "\"\"\"\nThis scripts demonstrates how to use mitmproxy's filter pattern in scripts.\n\"\"\"\nfrom mitmproxy import flowfilter\nfrom mitmproxy import ctx, http\n\n\nclass Filter:\n    def __init__(self):\n        self.filter = None  # type: flowfilter.TFilter\n\n    def configure(self, updated):\n        self.filter = flowfilter.parse(ctx.options.flowfilter)\n\n    def load(self, l):\n        l.add_option(\n            \"flowfilter\", str, \"\", \"Check that flow matches filter.\"\n        )\n\n    def response(self, flow: http.HTTPFlow) -> None:\n        if flowfilter.match(self.filter, flow):\n            print(\"Flow matches filter:\")\n            print(flow)\n\n\naddons = [Filter()]\n", "description": "An interactive TLS-capable intercepting HTTP proxy for penetration testers and software developers.", "file_name": "filter_flows.py", "id": "8c56c3a7ed05b1a7147fbe1d2d54cc84", "language": "Python", "project_name": "mitmproxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/mitmproxy-mitmproxy/mitmproxy-mitmproxy-0bc3f1f/examples/simple/filter_flows.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:46Z", "url": "https://github.com/mitmproxy/mitmproxy", "wiki": false}