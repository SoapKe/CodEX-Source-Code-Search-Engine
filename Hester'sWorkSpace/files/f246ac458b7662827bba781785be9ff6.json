{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nimport time\n\n\nclass TestAccountBudgetCommon(AccountingTestCase):\n\n    def setUp(self):\n        super(TestAccountBudgetCommon, self).setUp()\n        \n        \n        account_ids = self.env['account.account'].search([\n            ('user_type_id', '=', self.ref('account.data_account_type_revenue')),\n            ('tag_ids.name', 'in', ['Operating Activities'])\n        ]).ids\n        if not account_ids:\n            account_ids = self.env['account.account'].create({\n                'name': 'Product Sales - (test)',\n                'code': 'X2020',\n                'user_type_id': self.ref('account.data_account_type_revenue'),\n                'tag_ids': [(6, 0, [self.ref('account.account_tag_operating')])],\n            }).ids\n        self.account_budget_post_sales0 = self.env['account.budget.post'].create({\n            'name': 'Sales',\n            'account_ids': [(6, None, account_ids)],\n        })\n\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-01-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-01-31',\n            'planned_amount': 500.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-02-07',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-02-28',\n            'planned_amount': 900.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-03-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-03-15',\n            'planned_amount': 300.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_our_super_product'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-03-16',\n            'paid_date': str(time.localtime(time.time())[0] + 1) + '-12-03',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-03-31',\n            'planned_amount': 375.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_our_super_product'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-05-01',\n            'paid_date': str(time.localtime(time.time())[0] + 1) + '-12-03',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-05-31',\n            'planned_amount': 375.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-07-16',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-07-31',\n            'planned_amount': 20000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-02-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-02-28',\n            'planned_amount': 20000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-09-16',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-09-30',\n            'planned_amount': 10000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-10-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-12-31',\n            'planned_amount': 10000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n\n        account_ids = self.env['account.account'].search([\n            ('user_type_id.name', '=', 'Expenses'),\n            ('tag_ids.name', 'in', ['Operating Activities'])\n        ]).ids\n\n        if not account_ids:\n            account_ids = self.env['account.account'].create({\n                'name': 'Expense - (test)',\n                'code': 'X2120',\n                'user_type_id': self.ref('account.data_account_type_expenses'),\n                'tag_ids': [(6, 0, [self.ref('account.account_tag_operating')])],\n            }).ids\n        self.account_budget_post_purchase0 = self.env['account.budget.post'].create({\n            'name': 'Purchases',\n            'account_ids': [(6, None, account_ids)],\n        })\n\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-01-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-01-31',\n            'planned_amount': -500.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-02-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-02-28',\n            'planned_amount': -250.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_our_super_product'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-04-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-04-30',\n            'planned_amount': -150.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-06-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-06-15',\n            'planned_amount': -7500.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-06-16',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-06-30',\n            'planned_amount': -5000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-07-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-07-15',\n            'planned_amount': -2000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-08-16',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-08-31',\n            'planned_amount': -3000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-09-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-09-15',\n            'planned_amount': -1000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     in order check account budget module odoo i created budget budget positions    checking budgetary positions accounts ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo.addons.account.tests.account_test_classes import AccountingTestCase\n\nimport time\n\n\nclass TestAccountBudgetCommon(AccountingTestCase):\n\n    def setUp(self):\n        super(TestAccountBudgetCommon, self).setUp()\n        # In order to check account budget module in Odoo I created a budget with few budget positions\n        # Checking if the budgetary positions have accounts or not\n        account_ids = self.env['account.account'].search([\n            ('user_type_id', '=', self.ref('account.data_account_type_revenue')),\n            ('tag_ids.name', 'in', ['Operating Activities'])\n        ]).ids\n        if not account_ids:\n            account_ids = self.env['account.account'].create({\n                'name': 'Product Sales - (test)',\n                'code': 'X2020',\n                'user_type_id': self.ref('account.data_account_type_revenue'),\n                'tag_ids': [(6, 0, [self.ref('account.account_tag_operating')])],\n            }).ids\n        self.account_budget_post_sales0 = self.env['account.budget.post'].create({\n            'name': 'Sales',\n            'account_ids': [(6, None, account_ids)],\n        })\n\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-01-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-01-31',\n            'planned_amount': 500.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-02-07',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-02-28',\n            'planned_amount': 900.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-03-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-03-15',\n            'planned_amount': 300.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_our_super_product'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-03-16',\n            'paid_date': str(time.localtime(time.time())[0] + 1) + '-12-03',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-03-31',\n            'planned_amount': 375.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_our_super_product'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-05-01',\n            'paid_date': str(time.localtime(time.time())[0] + 1) + '-12-03',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-05-31',\n            'planned_amount': 375.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-07-16',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-07-31',\n            'planned_amount': 20000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-02-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-02-28',\n            'planned_amount': 20000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-09-16',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-09-30',\n            'planned_amount': 10000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_sales0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-10-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-12-31',\n            'planned_amount': 10000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n\n        account_ids = self.env['account.account'].search([\n            ('user_type_id.name', '=', 'Expenses'),\n            ('tag_ids.name', 'in', ['Operating Activities'])\n        ]).ids\n\n        if not account_ids:\n            account_ids = self.env['account.account'].create({\n                'name': 'Expense - (test)',\n                'code': 'X2120',\n                'user_type_id': self.ref('account.data_account_type_expenses'),\n                'tag_ids': [(6, 0, [self.ref('account.account_tag_operating')])],\n            }).ids\n        self.account_budget_post_purchase0 = self.env['account.budget.post'].create({\n            'name': 'Purchases',\n            'account_ids': [(6, None, account_ids)],\n        })\n\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-01-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-01-31',\n            'planned_amount': -500.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_partners_camp_to_camp'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-02-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-02-28',\n            'planned_amount': -250.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_our_super_product'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-04-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-04-30',\n            'planned_amount': -150.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-06-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-06-15',\n            'planned_amount': -7500.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-06-16',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-06-30',\n            'planned_amount': -5000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-07-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-07-15',\n            'planned_amount': -2000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-08-16',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-08-31',\n            'planned_amount': -3000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetpessimistic0'),\n        })\n        self.env['crossovered.budget.lines'].create({\n            'analytic_account_id': self.ref('analytic.analytic_seagate_p2'),\n            'general_budget_id': self.account_budget_post_purchase0.id,\n            'date_from': str(time.localtime(time.time())[0] + 1) + '-09-01',\n            'date_to': str(time.localtime(time.time())[0] + 1) + '-09-15',\n            'planned_amount': -1000.0,\n            'crossovered_budget_id': self.ref('account_budget.crossovered_budget_budgetoptimistic0'),\n        })\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "common.py", "id": "f246ac458b7662827bba781785be9ff6", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/account_budget/tests/common.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}