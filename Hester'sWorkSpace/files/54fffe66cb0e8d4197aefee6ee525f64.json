{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n internal imports\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom magenta.common import state_util\nfrom tensorflow.python.util import nest as tf_nest\n\n\nclass StateUtilTest(tf.test.TestCase):\n\n  def setUp(self):\n    self._unbatched_states = [\n        (\n            np.array([[1, 2, 3], [4, 5, 6]]),\n            (np.array([7, 8]), np.array([9])),\n            np.array([[10], [11]])\n        ),\n        (\n            np.array([[12, 13, 14], [15, 16, 17]]),\n            (np.array([18, 19]), np.array([20])),\n            np.array([[21], [22]])\n        )]\n\n    self._batched_states = (\n        np.array([[[1, 2, 3], [4, 5, 6]],\n                  [[12, 13, 14], [15, 16, 17]],\n                  [[0, 0, 0], [0, 0, 0]]]),\n        (np.array([[7, 8], [18, 19], [0, 0]]), np.array([[9], [20], [0]])),\n        np.array([[[10], [11]], [[21], [22]], [[0], [0]]]))\n\n  def _assert_sructures_equal(self, struct1, struct2):\n    tf_nest.assert_same_structure(struct1, struct2)\n    for a, b in zip(tf_nest.flatten(struct1), tf_nest.flatten(struct2)):\n      np.testing.assert_array_equal(a, b)\n\n  def testBatch(self):\n     Combine these two states, which each have a batch size of 2, together.\n     Request a batch_size of 5, which means that a new batch of all zeros will\n     be created.\n    batched_states = state_util.batch(self._unbatched_states, batch_size=3)\n\n    self._assert_sructures_equal(self._batched_states, batched_states)\n\n  def testBatch_Single(self):\n    batched_state = state_util.batch(self._unbatched_states[0:1], batch_size=1)\n    expected_batched_state = (\n        np.array([[[1, 2, 3], [4, 5, 6]]]),\n        (np.array([[7, 8]]), np.array([[9]])),\n        np.array([[[10], [11]]])\n    )\n\n    self._assert_sructures_equal(expected_batched_state, batched_state)\n\n  def test_Unbatch(self):\n    unbatched_states = state_util.unbatch(self._batched_states, batch_size=2)\n\n    self._assert_sructures_equal(self._unbatched_states, unbatched_states)\n\n  def test_ExtractState(self):\n    extracted_state = state_util.extract_state(self._batched_states, 1)\n\n    self._assert_sructures_equal(self._unbatched_states[1], extracted_state)\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   tests state util        copyright 2017 google inc  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license          http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license     internal imports    combine two states  batch size 2  together     request batch size 5  means new batch zeros    created  ", "content": "# Copyright 2017 Google Inc. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for state_util.\"\"\"\n\n# internal imports\n\nimport numpy as np\nimport tensorflow as tf\n\nfrom magenta.common import state_util\nfrom tensorflow.python.util import nest as tf_nest\n\n\nclass StateUtilTest(tf.test.TestCase):\n\n  def setUp(self):\n    self._unbatched_states = [\n        (\n            np.array([[1, 2, 3], [4, 5, 6]]),\n            (np.array([7, 8]), np.array([9])),\n            np.array([[10], [11]])\n        ),\n        (\n            np.array([[12, 13, 14], [15, 16, 17]]),\n            (np.array([18, 19]), np.array([20])),\n            np.array([[21], [22]])\n        )]\n\n    self._batched_states = (\n        np.array([[[1, 2, 3], [4, 5, 6]],\n                  [[12, 13, 14], [15, 16, 17]],\n                  [[0, 0, 0], [0, 0, 0]]]),\n        (np.array([[7, 8], [18, 19], [0, 0]]), np.array([[9], [20], [0]])),\n        np.array([[[10], [11]], [[21], [22]], [[0], [0]]]))\n\n  def _assert_sructures_equal(self, struct1, struct2):\n    tf_nest.assert_same_structure(struct1, struct2)\n    for a, b in zip(tf_nest.flatten(struct1), tf_nest.flatten(struct2)):\n      np.testing.assert_array_equal(a, b)\n\n  def testBatch(self):\n    # Combine these two states, which each have a batch size of 2, together.\n    # Request a batch_size of 5, which means that a new batch of all zeros will\n    # be created.\n    batched_states = state_util.batch(self._unbatched_states, batch_size=3)\n\n    self._assert_sructures_equal(self._batched_states, batched_states)\n\n  def testBatch_Single(self):\n    batched_state = state_util.batch(self._unbatched_states[0:1], batch_size=1)\n    expected_batched_state = (\n        np.array([[[1, 2, 3], [4, 5, 6]]]),\n        (np.array([[7, 8]]), np.array([[9]])),\n        np.array([[[10], [11]]])\n    )\n\n    self._assert_sructures_equal(expected_batched_state, batched_state)\n\n  def test_Unbatch(self):\n    unbatched_states = state_util.unbatch(self._batched_states, batch_size=2)\n\n    self._assert_sructures_equal(self._unbatched_states, unbatched_states)\n\n  def test_ExtractState(self):\n    extracted_state = state_util.extract_state(self._batched_states, 1)\n\n    self._assert_sructures_equal(self._unbatched_states[1], extracted_state)\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Magenta: Music and Art Generation with Machine Intelligence", "file_name": "state_util_test.py", "id": "54fffe66cb0e8d4197aefee6ee525f64", "language": "Python", "project_name": "magenta", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-magenta/tensorflow-magenta-c3eda3d/magenta/common/state_util_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:52:33Z", "url": "https://github.com/tensorflow/magenta", "wiki": false}