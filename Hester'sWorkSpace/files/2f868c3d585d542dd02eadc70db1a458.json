{"author": "tensorflow", "code": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\"\"\"Tests for common.schedules.\"\"\"\n\nfrom math import exp\nfrom math import sqrt\nimport numpy as np\nfrom six.moves import xrange\nimport tensorflow as tf\n\nfrom common import config_lib  \nfrom common import schedules  \n\n\nclass SchedulesTest(tf.test.TestCase):\n\n  def ScheduleTestHelper(self, config, schedule_subtype, io_values):\n    \"\"\"Run common checks for schedules.\n\n    Args:\n      config: Config object which is passed into schedules.make_schedule.\n      schedule_subtype: The expected schedule type to be instantiated.\n      io_values: List of (input, output) pairs. Must be in ascending input\n          order. No duplicate inputs.\n    \"\"\"\n\n    \n    f = schedules.make_schedule(config)\n    self.assertTrue(isinstance(f, schedule_subtype))\n\n    \n    fns = [schedules.make_schedule(config) for _ in xrange(3)]\n\n    \n    for i, o in io_values:\n      for f in fns:\n        f_out = f(i)\n        self.assertTrue(\n            np.isclose(o, f_out),\n            'Wrong value at input %d. Expected %s, got %s' % (i, o, f_out))\n\n    \n    f = schedules.make_schedule(config)\n    subseq = [io_values[i**2] for i in xrange(int(sqrt(len(io_values))))]\n    if subseq[-1] != io_values[-1]:\n      subseq.append(io_values[-1])\n    for i, o in subseq:\n      f_out = f(i)\n      self.assertTrue(\n          np.isclose(o, f_out),\n          'Wrong value at input %d. Expected %s, got %s' % (i, o, f_out))\n\n    \n    f = schedules.make_schedule(config)\n    for i, o in io_values:\n      for _ in xrange(3):\n        f_out = f(i)\n        self.assertTrue(\n            np.isclose(o, f_out),\n            'Duplicate calls at input %d are not equal. Expected %s, got %s'\n            % (i, o, f_out))\n\n  def testConstSchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='const', const=5),\n        schedules.ConstSchedule,\n        [(0, 5), (1, 5), (10, 5), (20, 5), (100, 5), (1000000, 5)])\n\n  def testLinearDecaySchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='linear_decay', initial=2, final=0, start_time=10,\n                          end_time=20),\n        schedules.LinearDecaySchedule,\n        [(0, 2), (1, 2), (10, 2), (11, 1.8), (15, 1), (19, 0.2), (20, 0),\n         (100000, 0)])\n\n    \n    self.ScheduleTestHelper(\n        config_lib.Config(fn='linear_decay', initial=2, final=0, start_time=10,\n                          end_time=10),\n        schedules.LinearDecaySchedule,\n        [(0, 2), (1, 2), (10, 2), (11, 0), (15, 0)])\n\n  def testExponentialDecaySchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='exp_decay', initial=exp(-1), final=exp(-6),\n                          start_time=10, end_time=20),\n        schedules.ExponentialDecaySchedule,\n        [(0, exp(-1)), (1, exp(-1)), (10, exp(-1)), (11, exp(-1/2. - 1)),\n         (15, exp(-5/2. - 1)), (19, exp(-9/2. - 1)), (20, exp(-6)),\n         (100000, exp(-6))])\n\n    \n    self.ScheduleTestHelper(\n        config_lib.Config(fn='exp_decay', initial=exp(-1), final=exp(-6),\n                          start_time=10, end_time=10),\n        schedules.ExponentialDecaySchedule,\n        [(0, exp(-1)), (1, exp(-1)), (10, exp(-1)), (11, exp(-6)),\n         (15, exp(-6))])\n\n  def testSmootherstepDecaySchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='smooth_decay', initial=2, final=0, start_time=10,\n                          end_time=20),\n        schedules.SmootherstepDecaySchedule,\n        [(0, 2), (1, 2), (10, 2), (11, 1.98288), (15, 1), (19, 0.01712),\n         (20, 0), (100000, 0)])\n\n    \n    self.ScheduleTestHelper(\n        config_lib.Config(fn='smooth_decay', initial=2, final=0, start_time=10,\n                          end_time=10),\n        schedules.SmootherstepDecaySchedule,\n        [(0, 2), (1, 2), (10, 2), (11, 0), (15, 0)])\n\n  def testHardOscillatorSchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='hard_osc', high=2, low=0, start_time=100,\n                          period=10, transition_fraction=0.5),\n        schedules.HardOscillatorSchedule,\n        [(0, 2), (1, 2), (10, 2), (100, 2), (101, 1.2), (102, 0.4), (103, 0),\n         (104, 0), (105, 0), (106, 0.8), (107, 1.6), (108, 2), (109, 2),\n         (110, 2), (111, 1.2), (112, 0.4), (115, 0), (116, 0.8), (119, 2),\n         (120, 2), (100001, 1.2), (100002, 0.4), (100005, 0), (100006, 0.8),\n         (100010, 2)])\n\n    \n    self.ScheduleTestHelper(\n        config_lib.Config(fn='hard_osc', high=2, low=0, start_time=100,\n                          period=10, transition_fraction=0),\n        schedules.HardOscillatorSchedule,\n        [(0, 2), (1, 2), (10, 2), (99, 2), (100, 0), (104, 0), (105, 2),\n         (106, 2), (109, 2), (110, 0)])\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "comments": "   tests common schedules      math import exp math import sqrt import numpy np six moves import xrange import tensorflow tf  common import config lib    brain coder common import schedules    brain coder   class schedulestest(tf test testcase)     def scheduletesthelper(self  config  schedule subtype  io values)         run common checks schedules       args        config  config object passed schedules make schedule        schedule subtype  the expected schedule type instantiated        io values  list (input  output) pairs  must ascending input           order  no duplicate inputs             brain coder    brain coder    check make schedule makes correct type     check multiple instances returned make schedule behave     check inputs map right outputs     check subset io values still correct     check duplicate calls     test step function     test step function     test step function     test instantaneous step  ", "content": "from __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\"\"\"Tests for common.schedules.\"\"\"\n\nfrom math import exp\nfrom math import sqrt\nimport numpy as np\nfrom six.moves import xrange\nimport tensorflow as tf\n\nfrom common import config_lib  # brain coder\nfrom common import schedules  # brain coder\n\n\nclass SchedulesTest(tf.test.TestCase):\n\n  def ScheduleTestHelper(self, config, schedule_subtype, io_values):\n    \"\"\"Run common checks for schedules.\n\n    Args:\n      config: Config object which is passed into schedules.make_schedule.\n      schedule_subtype: The expected schedule type to be instantiated.\n      io_values: List of (input, output) pairs. Must be in ascending input\n          order. No duplicate inputs.\n    \"\"\"\n\n    # Check that make_schedule makes the correct type.\n    f = schedules.make_schedule(config)\n    self.assertTrue(isinstance(f, schedule_subtype))\n\n    # Check that multiple instances returned from make_schedule behave the same.\n    fns = [schedules.make_schedule(config) for _ in xrange(3)]\n\n    # Check that all the inputs map to the right outputs.\n    for i, o in io_values:\n      for f in fns:\n        f_out = f(i)\n        self.assertTrue(\n            np.isclose(o, f_out),\n            'Wrong value at input %d. Expected %s, got %s' % (i, o, f_out))\n\n    # Check that a subset of the io_values are still correct.\n    f = schedules.make_schedule(config)\n    subseq = [io_values[i**2] for i in xrange(int(sqrt(len(io_values))))]\n    if subseq[-1] != io_values[-1]:\n      subseq.append(io_values[-1])\n    for i, o in subseq:\n      f_out = f(i)\n      self.assertTrue(\n          np.isclose(o, f_out),\n          'Wrong value at input %d. Expected %s, got %s' % (i, o, f_out))\n\n    # Check duplicate calls.\n    f = schedules.make_schedule(config)\n    for i, o in io_values:\n      for _ in xrange(3):\n        f_out = f(i)\n        self.assertTrue(\n            np.isclose(o, f_out),\n            'Duplicate calls at input %d are not equal. Expected %s, got %s'\n            % (i, o, f_out))\n\n  def testConstSchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='const', const=5),\n        schedules.ConstSchedule,\n        [(0, 5), (1, 5), (10, 5), (20, 5), (100, 5), (1000000, 5)])\n\n  def testLinearDecaySchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='linear_decay', initial=2, final=0, start_time=10,\n                          end_time=20),\n        schedules.LinearDecaySchedule,\n        [(0, 2), (1, 2), (10, 2), (11, 1.8), (15, 1), (19, 0.2), (20, 0),\n         (100000, 0)])\n\n    # Test step function.\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='linear_decay', initial=2, final=0, start_time=10,\n                          end_time=10),\n        schedules.LinearDecaySchedule,\n        [(0, 2), (1, 2), (10, 2), (11, 0), (15, 0)])\n\n  def testExponentialDecaySchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='exp_decay', initial=exp(-1), final=exp(-6),\n                          start_time=10, end_time=20),\n        schedules.ExponentialDecaySchedule,\n        [(0, exp(-1)), (1, exp(-1)), (10, exp(-1)), (11, exp(-1/2. - 1)),\n         (15, exp(-5/2. - 1)), (19, exp(-9/2. - 1)), (20, exp(-6)),\n         (100000, exp(-6))])\n\n    # Test step function.\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='exp_decay', initial=exp(-1), final=exp(-6),\n                          start_time=10, end_time=10),\n        schedules.ExponentialDecaySchedule,\n        [(0, exp(-1)), (1, exp(-1)), (10, exp(-1)), (11, exp(-6)),\n         (15, exp(-6))])\n\n  def testSmootherstepDecaySchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='smooth_decay', initial=2, final=0, start_time=10,\n                          end_time=20),\n        schedules.SmootherstepDecaySchedule,\n        [(0, 2), (1, 2), (10, 2), (11, 1.98288), (15, 1), (19, 0.01712),\n         (20, 0), (100000, 0)])\n\n    # Test step function.\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='smooth_decay', initial=2, final=0, start_time=10,\n                          end_time=10),\n        schedules.SmootherstepDecaySchedule,\n        [(0, 2), (1, 2), (10, 2), (11, 0), (15, 0)])\n\n  def testHardOscillatorSchedule(self):\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='hard_osc', high=2, low=0, start_time=100,\n                          period=10, transition_fraction=0.5),\n        schedules.HardOscillatorSchedule,\n        [(0, 2), (1, 2), (10, 2), (100, 2), (101, 1.2), (102, 0.4), (103, 0),\n         (104, 0), (105, 0), (106, 0.8), (107, 1.6), (108, 2), (109, 2),\n         (110, 2), (111, 1.2), (112, 0.4), (115, 0), (116, 0.8), (119, 2),\n         (120, 2), (100001, 1.2), (100002, 0.4), (100005, 0), (100006, 0.8),\n         (100010, 2)])\n\n    # Test instantaneous step.\n    self.ScheduleTestHelper(\n        config_lib.Config(fn='hard_osc', high=2, low=0, start_time=100,\n                          period=10, transition_fraction=0),\n        schedules.HardOscillatorSchedule,\n        [(0, 2), (1, 2), (10, 2), (99, 2), (100, 0), (104, 0), (105, 2),\n         (106, 2), (109, 2), (110, 0)])\n\n\nif __name__ == '__main__':\n  tf.test.main()\n", "description": "Models and examples built with TensorFlow", "file_name": "schedules_test.py", "id": "2f868c3d585d542dd02eadc70db1a458", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/brain_coder/common/schedules_test.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}