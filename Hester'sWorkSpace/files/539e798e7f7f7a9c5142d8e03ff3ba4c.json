{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass NhkVodIE(InfoExtractor):\n    _VALID_URL = r'https?://www3\\.nhk\\.or\\.jp/nhkworld/en/vod/(?P<id>[^/]+/[^/?\n    _TEST = {\n        \n        \n        'url': 'http://www3.nhk.or.jp/nhkworld/en/vod/tokyofashion/20160815',\n        'info_dict': {\n            'id': 'A1bnNiNTE6nY3jLllS-BIISfcC_PpvF5',\n            'ext': 'flv',\n            'title': 'TOKYO FASHION EXPRESS - The Kimono as Global Fashion',\n            'description': 'md5:db338ee6ce8204f415b754782f819824',\n            'series': 'TOKYO FASHION EXPRESS',\n            'episode': 'The Kimono as Global Fashion',\n        },\n        'skip': 'Videos available only for a limited period of time',\n    }\n    _API_URL = 'http://api.nhk.or.jp/nhkworld/vodesdlist/v1/all/all/all.json?apikey=EJfK8jdS57GqlupFgAfAAwr573q01y6k'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = self._download_json(self._API_URL, video_id)\n\n        try:\n            episode = next(\n                e for e in data['data']['episodes']\n                if e.get('url') and video_id in e['url'])\n        except StopIteration:\n            raise ExtractorError('Unable to find episode')\n\n        embed_code = episode['vod_id']\n\n        title = episode.get('sub_title_clean') or episode['sub_title']\n        description = episode.get('description_clean') or episode.get('description')\n        series = episode.get('title_clean') or episode.get('title')\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'Ooyala',\n            'url': 'ooyala:%s' % embed_code,\n            'title': '%s - %s' % (series, title) if series and title else title,\n            'description': description,\n            'series': series,\n            'episode': title,\n        }\n", "comments": "#&]+)'\n# Videos available only for a limited period of time. Visit\n# http://www3.nhk.or.jp/nhkworld/en/vod/ for working samples.\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass NhkVodIE(InfoExtractor):\n    _VALID_URL = r'https?://www3\\.nhk\\.or\\.jp/nhkworld/en/vod/(?P<id>[^/]+/[^/?#&]+)'\n    _TEST = {\n        # Videos available only for a limited period of time. Visit\n        # http://www3.nhk.or.jp/nhkworld/en/vod/ for working samples.\n        'url': 'http://www3.nhk.or.jp/nhkworld/en/vod/tokyofashion/20160815',\n        'info_dict': {\n            'id': 'A1bnNiNTE6nY3jLllS-BIISfcC_PpvF5',\n            'ext': 'flv',\n            'title': 'TOKYO FASHION EXPRESS - The Kimono as Global Fashion',\n            'description': 'md5:db338ee6ce8204f415b754782f819824',\n            'series': 'TOKYO FASHION EXPRESS',\n            'episode': 'The Kimono as Global Fashion',\n        },\n        'skip': 'Videos available only for a limited period of time',\n    }\n    _API_URL = 'http://api.nhk.or.jp/nhkworld/vodesdlist/v1/all/all/all.json?apikey=EJfK8jdS57GqlupFgAfAAwr573q01y6k'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        data = self._download_json(self._API_URL, video_id)\n\n        try:\n            episode = next(\n                e for e in data['data']['episodes']\n                if e.get('url') and video_id in e['url'])\n        except StopIteration:\n            raise ExtractorError('Unable to find episode')\n\n        embed_code = episode['vod_id']\n\n        title = episode.get('sub_title_clean') or episode['sub_title']\n        description = episode.get('description_clean') or episode.get('description')\n        series = episode.get('title_clean') or episode.get('title')\n\n        return {\n            '_type': 'url_transparent',\n            'ie_key': 'Ooyala',\n            'url': 'ooyala:%s' % embed_code,\n            'title': '%s - %s' % (series, title) if series and title else title,\n            'description': description,\n            'series': series,\n            'episode': title,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "nhk.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/nhk.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}