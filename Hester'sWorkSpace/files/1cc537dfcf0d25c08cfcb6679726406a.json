{"author": "sympy", "code": "from sympy.multipledispatch import dispatch\nfrom sympy.utilities.pytest import raises, XFAIL\nfrom functools import partial\n\ntest_namespace = dict()\n\norig_dispatch = dispatch\ndispatch = partial(dispatch, namespace=test_namespace)\n\n\n@XFAIL\ndef test_singledispatch():\n    @dispatch(int)\n    def f(x):\n        return x + 1\n\n    @dispatch(int)\n    def g(x):\n        return x + 2\n\n    @dispatch(float)\n    def f(x):\n        return x - 1\n\n    assert f(1) == 2\n    assert g(1) == 3\n    assert f(1.0) == 0\n\n    assert raises(NotImplementedError, lambda: f('hello'))\n\n\ndef test_multipledispatch():\n    @dispatch(int, int)\n    def f(x, y):\n        return x + y\n\n    @dispatch(float, float)\n    def f(x, y):\n        return x - y\n\n    assert f(1, 2) == 3\n    assert f(1.0, 2.0) == -1.0\n\n\nclass A(object): pass\nclass B(object): pass\nclass C(A): pass\nclass D(C): pass\nclass E(C): pass\n\n\ndef test_inheritance():\n    @dispatch(A)\n    def f(x):\n        return 'a'\n\n    @dispatch(B)\n    def f(x):\n        return 'b'\n\n    assert f(A()) == 'a'\n    assert f(B()) == 'b'\n    assert f(C()) == 'a'\n\n\n@XFAIL\ndef test_inheritance_and_multiple_dispatch():\n    @dispatch(A, A)\n    def f(x, y):\n        return type(x), type(y)\n\n    @dispatch(A, B)\n    def f(x, y):\n        return 0\n\n    assert f(A(), A()) == (A, A)\n    assert f(A(), C()) == (A, C)\n    assert f(A(), B()) == 0\n    assert f(C(), B()) == 0\n    assert raises(NotImplementedError, lambda: f(B(), B()))\n\n\ndef test_competing_solutions():\n    @dispatch(A)\n    def h(x):\n        return 1\n\n    @dispatch(C)\n    def h(x):\n        return 2\n\n    assert h(D()) == 2\n\n\ndef test_competing_multiple():\n    @dispatch(A, B)\n    def h(x, y):\n        return 1\n\n    @dispatch(C, B)\n    def h(x, y):\n        return 2\n\n    assert h(D(), B()) == 2\n\n\ndef test_competing_ambiguous():\n    @dispatch(A, C)\n    def f(x, y):\n        return 2\n\n    @dispatch(C, A)\n    def f(x, y):\n        return 2\n\n    assert f(A(), C()) == f(C(), A()) == 2\n    # assert raises(Warning, lambda : f(C(), C()))\n\n\ndef test_caching_correct_behavior():\n    @dispatch(A)\n    def f(x):\n        return 1\n\n    assert f(C()) == 1\n\n    @dispatch(C)\n    def f(x):\n        return 2\n\n    assert f(C()) == 2\n\n\ndef test_union_types():\n    @dispatch((A, C))\n    def f(x):\n        return 1\n\n    assert f(A()) == 1\n    assert f(C()) == 1\n\n\ndef test_namespaces():\n    ns1 = dict()\n    ns2 = dict()\n\n    def foo(x):\n        return 1\n    foo1 = orig_dispatch(int, namespace=ns1)(foo)\n\n    def foo(x):\n        return 2\n    foo2 = orig_dispatch(int, namespace=ns2)(foo)\n\n    assert foo1(0) == 1\n    assert foo2(0) == 2\n\n\n\"\"\"\nFails\ndef test_dispatch_on_dispatch():\n    @dispatch(A)\n    @dispatch(C)\n    def q(x):\n        return 1\n\n    assert q(A()) == 1\n    assert q(C()) == 1\n\"\"\"\n\n\ndef test_methods():\n    class Foo(object):\n        @dispatch(float)\n        def f(self, x):\n            return x - 1\n\n        @dispatch(int)\n        def f(self, x):\n            return x + 1\n\n        @dispatch(int)\n        def g(self, x):\n            return x + 3\n\n\n    foo = Foo()\n    assert foo.f(1) == 2\n    assert foo.f(1.0) == 0.0\n    assert foo.g(1) == 4\n\n\ndef test_methods_multiple_dispatch():\n    class Foo(object):\n        @dispatch(A, A)\n        def f(x, y):\n            return 1\n\n        @dispatch(A, C)\n        def f(x, y):\n            return 2\n\n\n    foo = Foo()\n    assert foo.f(A(), A()) == 1\n    assert foo.f(A(), C()) == 2\n    assert foo.f(C(), C()) == 2\n", "comments": "    fails def test dispatch dispatch()       dispatch(a)      dispatch(c)     def q(x)          return 1      assert q(a())    1     assert q(c())    1        assert raises(warning  lambda   f(c()  c())) ", "content": "from sympy.multipledispatch import dispatch\nfrom sympy.utilities.pytest import raises, XFAIL\nfrom functools import partial\n\ntest_namespace = dict()\n\norig_dispatch = dispatch\ndispatch = partial(dispatch, namespace=test_namespace)\n\n\n@XFAIL\ndef test_singledispatch():\n    @dispatch(int)\n    def f(x):\n        return x + 1\n\n    @dispatch(int)\n    def g(x):\n        return x + 2\n\n    @dispatch(float)\n    def f(x):\n        return x - 1\n\n    assert f(1) == 2\n    assert g(1) == 3\n    assert f(1.0) == 0\n\n    assert raises(NotImplementedError, lambda: f('hello'))\n\n\ndef test_multipledispatch():\n    @dispatch(int, int)\n    def f(x, y):\n        return x + y\n\n    @dispatch(float, float)\n    def f(x, y):\n        return x - y\n\n    assert f(1, 2) == 3\n    assert f(1.0, 2.0) == -1.0\n\n\nclass A(object): pass\nclass B(object): pass\nclass C(A): pass\nclass D(C): pass\nclass E(C): pass\n\n\ndef test_inheritance():\n    @dispatch(A)\n    def f(x):\n        return 'a'\n\n    @dispatch(B)\n    def f(x):\n        return 'b'\n\n    assert f(A()) == 'a'\n    assert f(B()) == 'b'\n    assert f(C()) == 'a'\n\n\n@XFAIL\ndef test_inheritance_and_multiple_dispatch():\n    @dispatch(A, A)\n    def f(x, y):\n        return type(x), type(y)\n\n    @dispatch(A, B)\n    def f(x, y):\n        return 0\n\n    assert f(A(), A()) == (A, A)\n    assert f(A(), C()) == (A, C)\n    assert f(A(), B()) == 0\n    assert f(C(), B()) == 0\n    assert raises(NotImplementedError, lambda: f(B(), B()))\n\n\ndef test_competing_solutions():\n    @dispatch(A)\n    def h(x):\n        return 1\n\n    @dispatch(C)\n    def h(x):\n        return 2\n\n    assert h(D()) == 2\n\n\ndef test_competing_multiple():\n    @dispatch(A, B)\n    def h(x, y):\n        return 1\n\n    @dispatch(C, B)\n    def h(x, y):\n        return 2\n\n    assert h(D(), B()) == 2\n\n\ndef test_competing_ambiguous():\n    @dispatch(A, C)\n    def f(x, y):\n        return 2\n\n    @dispatch(C, A)\n    def f(x, y):\n        return 2\n\n    assert f(A(), C()) == f(C(), A()) == 2\n    # assert raises(Warning, lambda : f(C(), C()))\n\n\ndef test_caching_correct_behavior():\n    @dispatch(A)\n    def f(x):\n        return 1\n\n    assert f(C()) == 1\n\n    @dispatch(C)\n    def f(x):\n        return 2\n\n    assert f(C()) == 2\n\n\ndef test_union_types():\n    @dispatch((A, C))\n    def f(x):\n        return 1\n\n    assert f(A()) == 1\n    assert f(C()) == 1\n\n\ndef test_namespaces():\n    ns1 = dict()\n    ns2 = dict()\n\n    def foo(x):\n        return 1\n    foo1 = orig_dispatch(int, namespace=ns1)(foo)\n\n    def foo(x):\n        return 2\n    foo2 = orig_dispatch(int, namespace=ns2)(foo)\n\n    assert foo1(0) == 1\n    assert foo2(0) == 2\n\n\n\"\"\"\nFails\ndef test_dispatch_on_dispatch():\n    @dispatch(A)\n    @dispatch(C)\n    def q(x):\n        return 1\n\n    assert q(A()) == 1\n    assert q(C()) == 1\n\"\"\"\n\n\ndef test_methods():\n    class Foo(object):\n        @dispatch(float)\n        def f(self, x):\n            return x - 1\n\n        @dispatch(int)\n        def f(self, x):\n            return x + 1\n\n        @dispatch(int)\n        def g(self, x):\n            return x + 3\n\n\n    foo = Foo()\n    assert foo.f(1) == 2\n    assert foo.f(1.0) == 0.0\n    assert foo.g(1) == 4\n\n\ndef test_methods_multiple_dispatch():\n    class Foo(object):\n        @dispatch(A, A)\n        def f(x, y):\n            return 1\n\n        @dispatch(A, C)\n        def f(x, y):\n            return 2\n\n\n    foo = Foo()\n    assert foo.f(A(), A()) == 1\n    assert foo.f(A(), C()) == 2\n    assert foo.f(C(), C()) == 2\n", "description": "A computer algebra system written in pure Python", "file_name": "test_core.py", "id": "1cc537dfcf0d25c08cfcb6679726406a", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/multipledispatch/tests/test_core.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}