{"author": "sympy", "code": "from sympy import symbols, exp, Function\nfrom sympy.stats.symbolic_probability import (RandomSymbol, Variance,\n        Covariance)\nfrom sympy.stats.error_prop import variance_prop\n\n\ndef test_variance_prop():\n    x, y, z = symbols('x y z')\n    phi, t = consts = symbols('phi t')\n    a = RandomSymbol(x)\n    var_x = Variance(a)\n    var_y = Variance(RandomSymbol(y))\n    var_z = Variance(RandomSymbol(z))\n    f = Function('f')(x)\n    cases = {\n        x + y: var_x + var_y,\n        a + y: var_x + var_y,\n        x + y + z: var_x + var_y + var_z,\n        2*x: 4*var_x,\n        x*y: var_x*y**2 + var_y*x**2,\n        1/x: var_x/x**4,\n        x/y: (var_x*y**2 + var_y*x**2)/y**4,\n        exp(x): var_x*exp(2*x),\n        exp(2*x): 4*var_x*exp(4*x),\n        exp(-x*t): t**2*var_x*exp(-2*t*x),\n        f: Variance(f),\n        }\n    for inp, out in cases.items():\n        obs = variance_prop(inp, consts=consts)\n        assert out == obs\n\ndef test_variance_prop_with_covar():\n    x, y, z = symbols('x y z')\n    phi, t = consts = symbols('phi t')\n    a = RandomSymbol(x)\n    var_x = Variance(a)\n    b = RandomSymbol(y)\n    var_y = Variance(b)\n    c = RandomSymbol(z)\n    var_z = Variance(c)\n    covar_x_y = Covariance(a, b)\n    covar_x_z = Covariance(a, c)\n    covar_y_z = Covariance(b, c)\n    cases = {\n        x + y: var_x + var_y + 2*covar_x_y,\n        a + y: var_x + var_y + 2*covar_x_y,\n        x + y + z: var_x + var_y + var_z + \\\n                   2*covar_x_y + 2*covar_x_z + 2*covar_y_z,\n        2*x: 4*var_x,\n        x*y: var_x*y**2 + var_y*x**2 + 2*covar_x_y/(x*y),\n        1/x: var_x/x**4,\n        exp(x): var_x*exp(2*x),\n        exp(2*x): 4*var_x*exp(4*x),\n        exp(-x*t): t**2*var_x*exp(-2*t*x),\n        }\n    for inp, out in cases.items():\n        obs = variance_prop(inp, consts=consts, include_covar=True)\n        assert out == obs\n", "comments": "", "content": "from sympy import symbols, exp, Function\nfrom sympy.stats.symbolic_probability import (RandomSymbol, Variance,\n        Covariance)\nfrom sympy.stats.error_prop import variance_prop\n\n\ndef test_variance_prop():\n    x, y, z = symbols('x y z')\n    phi, t = consts = symbols('phi t')\n    a = RandomSymbol(x)\n    var_x = Variance(a)\n    var_y = Variance(RandomSymbol(y))\n    var_z = Variance(RandomSymbol(z))\n    f = Function('f')(x)\n    cases = {\n        x + y: var_x + var_y,\n        a + y: var_x + var_y,\n        x + y + z: var_x + var_y + var_z,\n        2*x: 4*var_x,\n        x*y: var_x*y**2 + var_y*x**2,\n        1/x: var_x/x**4,\n        x/y: (var_x*y**2 + var_y*x**2)/y**4,\n        exp(x): var_x*exp(2*x),\n        exp(2*x): 4*var_x*exp(4*x),\n        exp(-x*t): t**2*var_x*exp(-2*t*x),\n        f: Variance(f),\n        }\n    for inp, out in cases.items():\n        obs = variance_prop(inp, consts=consts)\n        assert out == obs\n\ndef test_variance_prop_with_covar():\n    x, y, z = symbols('x y z')\n    phi, t = consts = symbols('phi t')\n    a = RandomSymbol(x)\n    var_x = Variance(a)\n    b = RandomSymbol(y)\n    var_y = Variance(b)\n    c = RandomSymbol(z)\n    var_z = Variance(c)\n    covar_x_y = Covariance(a, b)\n    covar_x_z = Covariance(a, c)\n    covar_y_z = Covariance(b, c)\n    cases = {\n        x + y: var_x + var_y + 2*covar_x_y,\n        a + y: var_x + var_y + 2*covar_x_y,\n        x + y + z: var_x + var_y + var_z + \\\n                   2*covar_x_y + 2*covar_x_z + 2*covar_y_z,\n        2*x: 4*var_x,\n        x*y: var_x*y**2 + var_y*x**2 + 2*covar_x_y/(x*y),\n        1/x: var_x/x**4,\n        exp(x): var_x*exp(2*x),\n        exp(2*x): 4*var_x*exp(4*x),\n        exp(-x*t): t**2*var_x*exp(-2*t*x),\n        }\n    for inp, out in cases.items():\n        obs = variance_prop(inp, consts=consts, include_covar=True)\n        assert out == obs\n", "description": "A computer algebra system written in pure Python", "file_name": "test_error_prop.py", "id": "ccf8ab9b7a43b881e1a90feeb271f943", "language": "Python", "project_name": "sympy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/sympy-sympy/sympy-sympy-205da79/sympy/stats/tests/test_error_prop.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:35:56Z", "url": "https://github.com/sympy/sympy", "wiki": true}