{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    get_element_by_id,\n    int_or_none,\n    strip_or_none,\n    unified_strdate,\n    urljoin,\n)\n\n\nclass VidLiiIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vidlii\\.com/(?:watch|embed)\\?.*?\\bv=(?P<id>[0-9A-Za-z_-]{11})'\n    _TESTS = [{\n        'url': 'https://www.vidlii.com/watch?v=tJluaH4BJ3v',\n        'md5': '9bf7d1e005dfa909b6efb0a1ff5175e2',\n        'info_dict': {\n            'id': 'tJluaH4BJ3v',\n            'ext': 'mp4',\n            'title': 'Vidlii is against me',\n            'description': 'md5:fa3f119287a2bfb922623b52b1856145',\n            'thumbnail': 're:https://.*.jpg',\n            'uploader': 'APPle5auc31995',\n            'uploader_url': 'https://www.vidlii.com/user/APPle5auc31995',\n            'upload_date': '20171107',\n            'duration': 212,\n            'view_count': int,\n            'comment_count': int,\n            'average_rating': float,\n            'categories': ['News & Politics'],\n            'tags': ['Vidlii', 'Jan', 'Videogames'],\n        }\n    }, {\n        'url': 'https://www.vidlii.com/embed?v=tJluaH4BJ3v&a=0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'https://www.vidlii.com/watch?v=%s' % video_id, video_id)\n\n        video_url = self._search_regex(\n            r'src\\s*:\\s*([\"\\'])(?P<url>(?:https?://)?(?:(?!\\1).)+)\\1', webpage,\n            'video url', group='url')\n\n        title = self._search_regex(\n            (r'<h1>([^<]+)</h1>', r'<title>([^<]+) - VidLii<'), webpage,\n            'title')\n\n        description = self._html_search_meta(\n            ('description', 'twitter:description'), webpage,\n            default=None) or strip_or_none(\n            get_element_by_id('des_text', webpage))\n\n        thumbnail = self._html_search_meta(\n            'twitter:image', webpage, default=None)\n        if not thumbnail:\n            thumbnail_path = self._search_regex(\n                r'img\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n                'thumbnail', fatal=False, group='url')\n            if thumbnail_path:\n                thumbnail = urljoin(url, thumbnail_path)\n\n        uploader = self._search_regex(\n            r'<div[^>]+class=[\"\\']wt_person[^>]+>\\s*<a[^>]+\\bhref=[\"\\']/user/[^>]+>([^<]+)',\n            webpage, 'uploader', fatal=False)\n        uploader_url = 'https://www.vidlii.com/user/%s' % uploader if uploader else None\n\n        upload_date = unified_strdate(self._html_search_meta(\n            'datePublished', webpage, default=None) or self._search_regex(\n            r'<date>([^<]+)', webpage, 'upload date', fatal=False))\n\n        duration = int_or_none(self._html_search_meta(\n            'video:duration', webpage, 'duration',\n            default=None) or self._search_regex(\n            r'duration\\s*:\\s*(\\d+)', webpage, 'duration', fatal=False))\n\n        view_count = int_or_none(self._search_regex(\n            (r'<strong>(\\d+)</strong> views',\n             r'Views\\s*:\\s*<strong>(\\d+)</strong>'),\n            webpage, 'view count', fatal=False))\n\n        comment_count = int_or_none(self._search_regex(\n            (r'<span[^>]+id=[\"\\']cmt_num[^>]+>(\\d+)',\n             r'Comments\\s*:\\s*<strong>(\\d+)'),\n            webpage, 'comment count', fatal=False))\n\n        average_rating = float_or_none(self._search_regex(\n            r'rating\\s*:\\s*([\\d.]+)', webpage, 'average rating', fatal=False))\n\n        category = self._html_search_regex(\n            r'<div>Category\\s*:\\s*</div>\\s*<div>\\s*<a[^>]+>([^<]+)', webpage,\n            'category', fatal=False)\n        categories = [category] if category else None\n\n        tags = [\n            strip_or_none(tag)\n            for tag in re.findall(\n                r'<a[^>]+\\bhref=[\"\\']/results\\?.*?q=[^>]*>([^<]+)',\n                webpage) if strip_or_none(tag)\n        ] or None\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_url': uploader_url,\n            'upload_date': upload_date,\n            'duration': duration,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'average_rating': average_rating,\n            'categories': categories,\n            'tags': tags,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    float_or_none,\n    get_element_by_id,\n    int_or_none,\n    strip_or_none,\n    unified_strdate,\n    urljoin,\n)\n\n\nclass VidLiiIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?vidlii\\.com/(?:watch|embed)\\?.*?\\bv=(?P<id>[0-9A-Za-z_-]{11})'\n    _TESTS = [{\n        'url': 'https://www.vidlii.com/watch?v=tJluaH4BJ3v',\n        'md5': '9bf7d1e005dfa909b6efb0a1ff5175e2',\n        'info_dict': {\n            'id': 'tJluaH4BJ3v',\n            'ext': 'mp4',\n            'title': 'Vidlii is against me',\n            'description': 'md5:fa3f119287a2bfb922623b52b1856145',\n            'thumbnail': 're:https://.*.jpg',\n            'uploader': 'APPle5auc31995',\n            'uploader_url': 'https://www.vidlii.com/user/APPle5auc31995',\n            'upload_date': '20171107',\n            'duration': 212,\n            'view_count': int,\n            'comment_count': int,\n            'average_rating': float,\n            'categories': ['News & Politics'],\n            'tags': ['Vidlii', 'Jan', 'Videogames'],\n        }\n    }, {\n        'url': 'https://www.vidlii.com/embed?v=tJluaH4BJ3v&a=0',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(\n            'https://www.vidlii.com/watch?v=%s' % video_id, video_id)\n\n        video_url = self._search_regex(\n            r'src\\s*:\\s*([\"\\'])(?P<url>(?:https?://)?(?:(?!\\1).)+)\\1', webpage,\n            'video url', group='url')\n\n        title = self._search_regex(\n            (r'<h1>([^<]+)</h1>', r'<title>([^<]+) - VidLii<'), webpage,\n            'title')\n\n        description = self._html_search_meta(\n            ('description', 'twitter:description'), webpage,\n            default=None) or strip_or_none(\n            get_element_by_id('des_text', webpage))\n\n        thumbnail = self._html_search_meta(\n            'twitter:image', webpage, default=None)\n        if not thumbnail:\n            thumbnail_path = self._search_regex(\n                r'img\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage,\n                'thumbnail', fatal=False, group='url')\n            if thumbnail_path:\n                thumbnail = urljoin(url, thumbnail_path)\n\n        uploader = self._search_regex(\n            r'<div[^>]+class=[\"\\']wt_person[^>]+>\\s*<a[^>]+\\bhref=[\"\\']/user/[^>]+>([^<]+)',\n            webpage, 'uploader', fatal=False)\n        uploader_url = 'https://www.vidlii.com/user/%s' % uploader if uploader else None\n\n        upload_date = unified_strdate(self._html_search_meta(\n            'datePublished', webpage, default=None) or self._search_regex(\n            r'<date>([^<]+)', webpage, 'upload date', fatal=False))\n\n        duration = int_or_none(self._html_search_meta(\n            'video:duration', webpage, 'duration',\n            default=None) or self._search_regex(\n            r'duration\\s*:\\s*(\\d+)', webpage, 'duration', fatal=False))\n\n        view_count = int_or_none(self._search_regex(\n            (r'<strong>(\\d+)</strong> views',\n             r'Views\\s*:\\s*<strong>(\\d+)</strong>'),\n            webpage, 'view count', fatal=False))\n\n        comment_count = int_or_none(self._search_regex(\n            (r'<span[^>]+id=[\"\\']cmt_num[^>]+>(\\d+)',\n             r'Comments\\s*:\\s*<strong>(\\d+)'),\n            webpage, 'comment count', fatal=False))\n\n        average_rating = float_or_none(self._search_regex(\n            r'rating\\s*:\\s*([\\d.]+)', webpage, 'average rating', fatal=False))\n\n        category = self._html_search_regex(\n            r'<div>Category\\s*:\\s*</div>\\s*<div>\\s*<a[^>]+>([^<]+)', webpage,\n            'category', fatal=False)\n        categories = [category] if category else None\n\n        tags = [\n            strip_or_none(tag)\n            for tag in re.findall(\n                r'<a[^>]+\\bhref=[\"\\']/results\\?.*?q=[^>]*>([^<]+)',\n                webpage) if strip_or_none(tag)\n        ] or None\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_url': uploader_url,\n            'upload_date': upload_date,\n            'duration': duration,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'average_rating': average_rating,\n            'categories': categories,\n            'tags': tags,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vidlii.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vidlii.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}