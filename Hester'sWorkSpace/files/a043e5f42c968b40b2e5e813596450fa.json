{"author": "django", "code": "\"\"\"\nSpecifying ordering\n\nSpecify default ordering for a model using the ``ordering`` attribute, which\nshould be a list or tuple of field names. This tells Django how to order\n``QuerySet`` results.\n\nIf a field name in ``ordering`` starts with a hyphen, that field will be\nordered in descending order. Otherwise, it'll be ordered in ascending order.\nThe special-case field name ``\"?\"`` specifies random order.\n\nThe ordering attribute is not required. If you leave it off, ordering will be\nundefined -- not random, just undefined.\n\"\"\"\n\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=63, null=True, blank=True)\n\n    class Meta:\n        ordering = ('-pk',)\n\n\nclass Article(models.Model):\n    author = models.ForeignKey(Author, models.SET_NULL, null=True)\n    second_author = models.ForeignKey(Author, models.SET_NULL, null=True, related_name='+')\n    headline = models.CharField(max_length=100)\n    pub_date = models.DateTimeField()\n\n    class Meta:\n        ordering = ('-pub_date', 'headline')\n\n    def __str__(self):\n        return self.headline\n\n\nclass OrderedByAuthorArticle(Article):\n    class Meta:\n        proxy = True\n        ordering = ('author', 'second_author')\n\n\nclass OrderedByFArticle(Article):\n    class Meta:\n        proxy = True\n        ordering = (models.F('author').asc(nulls_first=True), 'id')\n\n\nclass Reference(models.Model):\n    article = models.ForeignKey(OrderedByAuthorArticle, models.CASCADE)\n\n    class Meta:\n        ordering = ('article',)\n", "comments": "    specifying ordering  specify default ordering model using   ordering   attribute  list tuple field names  this tells django order   queryset   results   if field name   ordering   starts hyphen  field ordered descending order  otherwise  ordered ascending order  the special case field name         specifies random order   the ordering attribute required  if leave  ordering undefined    random  undefined      ", "content": "\"\"\"\nSpecifying ordering\n\nSpecify default ordering for a model using the ``ordering`` attribute, which\nshould be a list or tuple of field names. This tells Django how to order\n``QuerySet`` results.\n\nIf a field name in ``ordering`` starts with a hyphen, that field will be\nordered in descending order. Otherwise, it'll be ordered in ascending order.\nThe special-case field name ``\"?\"`` specifies random order.\n\nThe ordering attribute is not required. If you leave it off, ordering will be\nundefined -- not random, just undefined.\n\"\"\"\n\nfrom django.db import models\n\n\nclass Author(models.Model):\n    name = models.CharField(max_length=63, null=True, blank=True)\n\n    class Meta:\n        ordering = ('-pk',)\n\n\nclass Article(models.Model):\n    author = models.ForeignKey(Author, models.SET_NULL, null=True)\n    second_author = models.ForeignKey(Author, models.SET_NULL, null=True, related_name='+')\n    headline = models.CharField(max_length=100)\n    pub_date = models.DateTimeField()\n\n    class Meta:\n        ordering = ('-pub_date', 'headline')\n\n    def __str__(self):\n        return self.headline\n\n\nclass OrderedByAuthorArticle(Article):\n    class Meta:\n        proxy = True\n        ordering = ('author', 'second_author')\n\n\nclass OrderedByFArticle(Article):\n    class Meta:\n        proxy = True\n        ordering = (models.F('author').asc(nulls_first=True), 'id')\n\n\nclass Reference(models.Model):\n    article = models.ForeignKey(OrderedByAuthorArticle, models.CASCADE)\n\n    class Meta:\n        ordering = ('article',)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "models.py", "id": "a043e5f42c968b40b2e5e813596450fa", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/ordering/models.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}