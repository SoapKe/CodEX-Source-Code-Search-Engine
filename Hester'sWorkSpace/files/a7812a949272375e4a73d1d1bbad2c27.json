{"author": "tgalal", "code": "import time,datetime,re, hashlib\nimport calendar\nfrom dateutil import tz\nimport os\nfrom .constants import YowConstants\nimport codecs, sys\nimport logging\nimport tempfile\nimport base64\nimport hashlib\nimport os.path, mimetypes\nfrom .optionalmodules import PILOptionalModule, FFVideoOptionalModule\n\nlogger = logging.getLogger(__name__)\n\nclass Jid:\n    @staticmethod\n    def normalize(number):\n        if '@' in number:\n            return number\n        elif \"-\" in number:\n            return \"%s@%s\" % (number, YowConstants.WHATSAPP_GROUP_SERVER)\n        return \"%s@%s\" % (number, YowConstants.WHATSAPP_SERVER)\n\nclass HexTools:\n    decode_hex = codecs.getdecoder(\"hex_codec\")\n    @staticmethod\n    def decodeHex(hexString):\n        result = HexTools.decode_hex(hexString)[0]\n        if sys.version_info >= (3,0):\n            result = result.decode('latin-1')\n        return result\n\nclass WATools:\n    @staticmethod\n    def generateIdentity():\n        return os.urandom(20)\n\n    @staticmethod\n    def getFileHashForUpload(filePath):\n        sha1 = hashlib.sha256()\n        f = open(filePath, 'rb')\n        try:\n            sha1.update(f.read())\n        finally:\n            f.close()\n        b64Hash = base64.b64encode(sha1.digest())\n        return b64Hash if type(b64Hash) is str else b64Hash.decode()\n\nclass StorageTools:\n    @staticmethod\n    def constructPath(*path):\n        path = os.path.join(*path)\n        fullPath = os.path.expanduser(os.path.join(YowConstants.PATH_STORAGE, path))\n        if not os.path.exists(os.path.dirname(fullPath)):\n            os.makedirs(os.path.dirname(fullPath))\n        return fullPath\n\n    @staticmethod\n    def getStorageForPhone(phone):\n        return StorageTools.constructPath(phone + '/')\n\n    @staticmethod\n    def writeIdentity(phone, identity):\n        path = StorageTools.getStorageForPhone(phone)\n        with open(os.path.join(path, \"id\"), 'wb') as idFile:\n            idFile.write(identity)\n\n    @staticmethod\n    def getIdentity(phone):\n        path = StorageTools.getStorageForPhone(phone)\n        out = None\n        idPath = os.path.join(path, \"id\")\n        if os.path.isfile(idPath):\n            with open(idPath, 'rb') as idFile:\n                out = idFile.read()\n        return out\n\n    @staticmethod\n    def writeNonce(phone, nonce):\n        path = StorageTools.getStorageForPhone(phone)\n        with open(os.path.join(path, \"nonce\"), 'wb') as idFile:\n            idFile.write(nonce.encode(\"latin-1\") if sys.version_info >= (3,0) else nonce)\n\n    @staticmethod\n    def getNonce(phone):\n        path = StorageTools.getStorageForPhone(phone)\n        out = None\n        noncePath = os.path.join(path, \"nonce\")\n        if os.path.isfile(noncePath):\n            with open(noncePath, 'rb') as idFile:\n                out = idFile.read()\n        return out\n\nclass TimeTools:\n    @staticmethod\n    def parseIso(iso):\n        d=datetime.datetime(*map(int, re.split('[^\\d]', iso)[:-1]))\n        return d\n\n    @staticmethod\n    def utcToLocal(dt):\n        utc = tz.gettz('UTC')\n        local = tz.tzlocal()\n        dtUtc =  dt.replace(tzinfo=utc)\n\n        return dtUtc.astimezone(local)\n\n    @staticmethod\n    def utcTimestamp():\n        utcNow = datetime.datetime.utcnow()\n        return calendar.timegm(utcNow.timetuple())\n\n    @staticmethod\n    def datetimeToTimestamp(dt):\n        return time.mktime(dt.timetuple())\n\nclass ImageTools:\n    @staticmethod\n    def scaleImage(infile, outfile, imageFormat, width, height):\n        with PILOptionalModule() as imp:\n            Image = imp(\"Image\")\n            im = Image.open(infile)\n            \n            if im.mode != \"RGB\":\n                im = im.convert(\"RGB\")\n            im.thumbnail((width, height))\n            im.save(outfile, imageFormat)\n            return True\n        return False\n\n    @staticmethod\n    def getImageDimensions(imageFile):\n        with PILOptionalModule() as imp:\n            Image = imp(\"Image\")\n            im = Image.open(imageFile)\n            return im.size\n\n    @staticmethod\n    def generatePreviewFromImage(image):\n        fd, path = tempfile.mkstemp()\n\n        preview = None\n        if ImageTools.scaleImage(image, path, \"JPEG\", YowConstants.PREVIEW_WIDTH, YowConstants.PREVIEW_HEIGHT):\n            fileObj = os.fdopen(fd, \"rb+\")\n            fileObj.seek(0)\n            preview = fileObj.read()\n            fileObj.close()\n        os.remove(path)\n        return preview\n\nclass MimeTools:\n    MIME_FILE = os.path.join(os.path.dirname(__file__), 'mime.types')\n    mimetypes.init() \n    try:\n        mimetypes.init([MIME_FILE]) \n    except exception as e:\n        logger.warning(\"Mime types supported can't be read. System mimes will be used. Cause: \" + e.message)\n\n    @staticmethod\n    def getMIME(filepath):\n        mimeType = mimetypes.guess_type(filepath)[0]\n        if mimeType is None:\n            raise Exception(\"Unsupported/unrecognized file type for: \"+filepath);\n        return mimeType\n\nclass VideoTools:\n    @staticmethod\n    def getVideoProperties(videoFile):\n        with FFVideoOptionalModule() as imp:\n            VideoStream = imp(\"VideoStream\")\n            s = VideoStream(videoFile)\n            return s.width, s.height, s.bitrate, s.duration \n\n    @staticmethod\n    def generatePreviewFromVideo(videoFile):\n        with FFVideoOptionalModule() as imp:\n            VideoStream = imp(\"VideoStream\")\n            fd, path = tempfile.mkstemp('.jpg')\n            stream = VideoStream(videoFile)\n            stream.get_frame_at_sec(0).image().save(path)\n            preview = ImageTools.generatePreviewFromImage(path)\n            os.remove(path)\n            return preview\n", "comments": " convert p mode images    load default mime types    append whatsapp mime types     codec name ", "content": "import time,datetime,re, hashlib\nimport calendar\nfrom dateutil import tz\nimport os\nfrom .constants import YowConstants\nimport codecs, sys\nimport logging\nimport tempfile\nimport base64\nimport hashlib\nimport os.path, mimetypes\nfrom .optionalmodules import PILOptionalModule, FFVideoOptionalModule\n\nlogger = logging.getLogger(__name__)\n\nclass Jid:\n    @staticmethod\n    def normalize(number):\n        if '@' in number:\n            return number\n        elif \"-\" in number:\n            return \"%s@%s\" % (number, YowConstants.WHATSAPP_GROUP_SERVER)\n        return \"%s@%s\" % (number, YowConstants.WHATSAPP_SERVER)\n\nclass HexTools:\n    decode_hex = codecs.getdecoder(\"hex_codec\")\n    @staticmethod\n    def decodeHex(hexString):\n        result = HexTools.decode_hex(hexString)[0]\n        if sys.version_info >= (3,0):\n            result = result.decode('latin-1')\n        return result\n\nclass WATools:\n    @staticmethod\n    def generateIdentity():\n        return os.urandom(20)\n\n    @staticmethod\n    def getFileHashForUpload(filePath):\n        sha1 = hashlib.sha256()\n        f = open(filePath, 'rb')\n        try:\n            sha1.update(f.read())\n        finally:\n            f.close()\n        b64Hash = base64.b64encode(sha1.digest())\n        return b64Hash if type(b64Hash) is str else b64Hash.decode()\n\nclass StorageTools:\n    @staticmethod\n    def constructPath(*path):\n        path = os.path.join(*path)\n        fullPath = os.path.expanduser(os.path.join(YowConstants.PATH_STORAGE, path))\n        if not os.path.exists(os.path.dirname(fullPath)):\n            os.makedirs(os.path.dirname(fullPath))\n        return fullPath\n\n    @staticmethod\n    def getStorageForPhone(phone):\n        return StorageTools.constructPath(phone + '/')\n\n    @staticmethod\n    def writeIdentity(phone, identity):\n        path = StorageTools.getStorageForPhone(phone)\n        with open(os.path.join(path, \"id\"), 'wb') as idFile:\n            idFile.write(identity)\n\n    @staticmethod\n    def getIdentity(phone):\n        path = StorageTools.getStorageForPhone(phone)\n        out = None\n        idPath = os.path.join(path, \"id\")\n        if os.path.isfile(idPath):\n            with open(idPath, 'rb') as idFile:\n                out = idFile.read()\n        return out\n\n    @staticmethod\n    def writeNonce(phone, nonce):\n        path = StorageTools.getStorageForPhone(phone)\n        with open(os.path.join(path, \"nonce\"), 'wb') as idFile:\n            idFile.write(nonce.encode(\"latin-1\") if sys.version_info >= (3,0) else nonce)\n\n    @staticmethod\n    def getNonce(phone):\n        path = StorageTools.getStorageForPhone(phone)\n        out = None\n        noncePath = os.path.join(path, \"nonce\")\n        if os.path.isfile(noncePath):\n            with open(noncePath, 'rb') as idFile:\n                out = idFile.read()\n        return out\n\nclass TimeTools:\n    @staticmethod\n    def parseIso(iso):\n        d=datetime.datetime(*map(int, re.split('[^\\d]', iso)[:-1]))\n        return d\n\n    @staticmethod\n    def utcToLocal(dt):\n        utc = tz.gettz('UTC')\n        local = tz.tzlocal()\n        dtUtc =  dt.replace(tzinfo=utc)\n\n        return dtUtc.astimezone(local)\n\n    @staticmethod\n    def utcTimestamp():\n        utcNow = datetime.datetime.utcnow()\n        return calendar.timegm(utcNow.timetuple())\n\n    @staticmethod\n    def datetimeToTimestamp(dt):\n        return time.mktime(dt.timetuple())\n\nclass ImageTools:\n    @staticmethod\n    def scaleImage(infile, outfile, imageFormat, width, height):\n        with PILOptionalModule() as imp:\n            Image = imp(\"Image\")\n            im = Image.open(infile)\n            #Convert P mode images\n            if im.mode != \"RGB\":\n                im = im.convert(\"RGB\")\n            im.thumbnail((width, height))\n            im.save(outfile, imageFormat)\n            return True\n        return False\n\n    @staticmethod\n    def getImageDimensions(imageFile):\n        with PILOptionalModule() as imp:\n            Image = imp(\"Image\")\n            im = Image.open(imageFile)\n            return im.size\n\n    @staticmethod\n    def generatePreviewFromImage(image):\n        fd, path = tempfile.mkstemp()\n\n        preview = None\n        if ImageTools.scaleImage(image, path, \"JPEG\", YowConstants.PREVIEW_WIDTH, YowConstants.PREVIEW_HEIGHT):\n            fileObj = os.fdopen(fd, \"rb+\")\n            fileObj.seek(0)\n            preview = fileObj.read()\n            fileObj.close()\n        os.remove(path)\n        return preview\n\nclass MimeTools:\n    MIME_FILE = os.path.join(os.path.dirname(__file__), 'mime.types')\n    mimetypes.init() # Load default mime.types\n    try:\n        mimetypes.init([MIME_FILE]) # Append whatsapp mime.types\n    except exception as e:\n        logger.warning(\"Mime types supported can't be read. System mimes will be used. Cause: \" + e.message)\n\n    @staticmethod\n    def getMIME(filepath):\n        mimeType = mimetypes.guess_type(filepath)[0]\n        if mimeType is None:\n            raise Exception(\"Unsupported/unrecognized file type for: \"+filepath);\n        return mimeType\n\nclass VideoTools:\n    @staticmethod\n    def getVideoProperties(videoFile):\n        with FFVideoOptionalModule() as imp:\n            VideoStream = imp(\"VideoStream\")\n            s = VideoStream(videoFile)\n            return s.width, s.height, s.bitrate, s.duration #, s.codec_name\n\n    @staticmethod\n    def generatePreviewFromVideo(videoFile):\n        with FFVideoOptionalModule() as imp:\n            VideoStream = imp(\"VideoStream\")\n            fd, path = tempfile.mkstemp('.jpg')\n            stream = VideoStream(videoFile)\n            stream.get_frame_at_sec(0).image().save(path)\n            preview = ImageTools.generatePreviewFromImage(path)\n            os.remove(path)\n            return preview\n", "description": "The python WhatsApp library", "file_name": "tools.py", "id": "a7812a949272375e4a73d1d1bbad2c27", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/common/tools.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}