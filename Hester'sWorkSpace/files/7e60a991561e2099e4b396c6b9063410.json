{"author": "ansible", "code": "\n Copyright: Ansible Project\n GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_pfc_interface\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxPfcInterfaceModule(TestOnyxModule):\n\n    module = onyx_pfc_interface\n\n    def setUp(self):\n        super(TestOnyxPfcInterfaceModule, self).setUp()\n        self._pfc_enabled = True\n        self.mock_get_config = patch.object(\n            onyx_pfc_interface.OnyxPfcInterfaceModule,\n            \"_get_pfc_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxPfcInterfaceModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        if self._pfc_enabled:\n            suffix = 'enabled'\n        else:\n            suffix = 'disabled'\n        config_file = 'onyx_pfc_interface_%s.cfg' % suffix\n\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def _test_pfc_if(self, if_name, enabled, changed, commands):\n        state = 'enabled' if enabled else 'disabled'\n        set_module_args(dict(name=if_name, state=state))\n        self.execute_module(changed=changed, commands=commands)\n\n    def _test_pfc_no_change(self, enabled):\n        interfaces = ('Eth1/1', 'Eth1/1/2', 'Po1', 'Mpo2')\n        changed = False\n        commands = None\n        for ifc in interfaces:\n            self._test_pfc_if(ifc, enabled, changed, commands)\n\n    def test_pfc_enabled_no_change(self):\n        self._pfc_enabled = True\n        enabled = True\n        self._test_pfc_no_change(enabled)\n\n    def test_pfc_disabled_no_change(self):\n        self._pfc_enabled = False\n        enabled = False\n        self._test_pfc_no_change(enabled)\n\n    def _test_pfc_change(self, enabled):\n        cmd_list = [\n            ('Eth1/1', 'interface ethernet 1/1'),\n            ('Eth1/1/2', 'interface ethernet 1/1/2'),\n            ('Po1', 'interface port-channel 1'),\n            ('Mpo2', 'interface mlag-port-channel 2'),\n        ]\n        changed = True\n        suffix = ' dcb priority-flow-control mode on force'\n        if not enabled:\n            suffix = ' no dcb priority-flow-control mode force'\n        for (if_name, cmd) in cmd_list:\n            commands = [cmd + suffix]\n            self._test_pfc_if(if_name, enabled, changed, commands)\n\n    def test_pfc_disabled_change(self):\n        self._pfc_enabled = False\n        enabled = True\n        self._test_pfc_change(enabled)\n\n    def test_pfc_enabled_change(self):\n        self._pfc_enabled = True\n        enabled = False\n        self._test_pfc_change(enabled)\n\n    def test_pfc_aggregate(self):\n        self._pfc_enabled = False\n        aggregate = [dict(name='Eth1/1'), dict(name='Eth1/1/2')]\n        set_module_args(dict(aggregate=aggregate, state='enabled'))\n        commands = [\n            'interface ethernet 1/1 dcb priority-flow-control mode on force',\n            'interface ethernet 1/1/2 dcb priority-flow-control mode on force']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_pfc_aggregate_purge(self):\n        self._pfc_enabled = True\n        aggregate = [dict(name='Po1'), dict(name='Mpo2')]\n        set_module_args(dict(aggregate=aggregate, state='enabled', purge=True))\n        commands = [\n            'interface ethernet 1/1 no dcb priority-flow-control mode force',\n            'interface ethernet 1/1/2 no dcb priority-flow-control mode force']\n        self.execute_module(changed=True, commands=commands)\n", "comments": "     copyright  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    make coding python3 ish ", "content": "#\n# Copyright: Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.onyx import onyx_pfc_interface\nfrom units.modules.utils import set_module_args\nfrom .onyx_module import TestOnyxModule, load_fixture\n\n\nclass TestOnyxPfcInterfaceModule(TestOnyxModule):\n\n    module = onyx_pfc_interface\n\n    def setUp(self):\n        super(TestOnyxPfcInterfaceModule, self).setUp()\n        self._pfc_enabled = True\n        self.mock_get_config = patch.object(\n            onyx_pfc_interface.OnyxPfcInterfaceModule,\n            \"_get_pfc_config\")\n        self.get_config = self.mock_get_config.start()\n\n        self.mock_load_config = patch(\n            'ansible.module_utils.network.onyx.onyx.load_config')\n        self.load_config = self.mock_load_config.start()\n\n    def tearDown(self):\n        super(TestOnyxPfcInterfaceModule, self).tearDown()\n        self.mock_get_config.stop()\n        self.mock_load_config.stop()\n\n    def load_fixtures(self, commands=None, transport='cli'):\n        if self._pfc_enabled:\n            suffix = 'enabled'\n        else:\n            suffix = 'disabled'\n        config_file = 'onyx_pfc_interface_%s.cfg' % suffix\n\n        self.get_config.return_value = load_fixture(config_file)\n        self.load_config.return_value = None\n\n    def _test_pfc_if(self, if_name, enabled, changed, commands):\n        state = 'enabled' if enabled else 'disabled'\n        set_module_args(dict(name=if_name, state=state))\n        self.execute_module(changed=changed, commands=commands)\n\n    def _test_pfc_no_change(self, enabled):\n        interfaces = ('Eth1/1', 'Eth1/1/2', 'Po1', 'Mpo2')\n        changed = False\n        commands = None\n        for ifc in interfaces:\n            self._test_pfc_if(ifc, enabled, changed, commands)\n\n    def test_pfc_enabled_no_change(self):\n        self._pfc_enabled = True\n        enabled = True\n        self._test_pfc_no_change(enabled)\n\n    def test_pfc_disabled_no_change(self):\n        self._pfc_enabled = False\n        enabled = False\n        self._test_pfc_no_change(enabled)\n\n    def _test_pfc_change(self, enabled):\n        cmd_list = [\n            ('Eth1/1', 'interface ethernet 1/1'),\n            ('Eth1/1/2', 'interface ethernet 1/1/2'),\n            ('Po1', 'interface port-channel 1'),\n            ('Mpo2', 'interface mlag-port-channel 2'),\n        ]\n        changed = True\n        suffix = ' dcb priority-flow-control mode on force'\n        if not enabled:\n            suffix = ' no dcb priority-flow-control mode force'\n        for (if_name, cmd) in cmd_list:\n            commands = [cmd + suffix]\n            self._test_pfc_if(if_name, enabled, changed, commands)\n\n    def test_pfc_disabled_change(self):\n        self._pfc_enabled = False\n        enabled = True\n        self._test_pfc_change(enabled)\n\n    def test_pfc_enabled_change(self):\n        self._pfc_enabled = True\n        enabled = False\n        self._test_pfc_change(enabled)\n\n    def test_pfc_aggregate(self):\n        self._pfc_enabled = False\n        aggregate = [dict(name='Eth1/1'), dict(name='Eth1/1/2')]\n        set_module_args(dict(aggregate=aggregate, state='enabled'))\n        commands = [\n            'interface ethernet 1/1 dcb priority-flow-control mode on force',\n            'interface ethernet 1/1/2 dcb priority-flow-control mode on force']\n        self.execute_module(changed=True, commands=commands)\n\n    def test_pfc_aggregate_purge(self):\n        self._pfc_enabled = True\n        aggregate = [dict(name='Po1'), dict(name='Mpo2')]\n        set_module_args(dict(aggregate=aggregate, state='enabled', purge=True))\n        commands = [\n            'interface ethernet 1/1 no dcb priority-flow-control mode force',\n            'interface ethernet 1/1/2 no dcb priority-flow-control mode force']\n        self.execute_module(changed=True, commands=commands)\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_onyx_pfc_interface.py", "id": "7e60a991561e2099e4b396c6b9063410", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/onyx/test_onyx_pfc_interface.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}