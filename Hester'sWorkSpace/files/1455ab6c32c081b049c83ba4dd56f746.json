{"author": "python", "code": "\n\n\nimport sys, re\n\ndef generate_typeslots(out=sys.stdout):\n    out.write(\"/* Generated by typeslots.py */\\n\")\n    res = {}\n    for line in sys.stdin:\n        m = re.match(\"#define Py_([a-z_]+) ([0-9]+)\", line)\n        if not m:\n            continue\n        member = m.group(1)\n        if member.startswith(\"tp_\"):\n            member = \"ht_type.\"+member\n        elif member.startswith(\"am_\"):\n            member = \"as_async.\"+member\n        elif member.startswith(\"nb_\"):\n            member = \"as_number.\"+member\n        elif member.startswith(\"mp_\"):\n            member = \"as_mapping.\"+member\n        elif member.startswith(\"sq_\"):\n            member = \"as_sequence.\"+member\n        elif member.startswith(\"bf_\"):\n            member = \"as_buffer.\"+member\n        res[int(m.group(2))] = member\n\n    M = max(res.keys())+1\n    for i in range(1,M):\n        if i in res:\n            out.write(\"offsetof(PyHeapTypeObject, %s),\\n\" % res[i])\n        else:\n            out.write(\"0,\\n\")\n\ndef main():\n    if len(sys.argv) == 2:\n        with open(sys.argv[1], \"w\") as f:\n            generate_typeslots(f)\n    else:\n        generate_typeslots()\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "   usr bin python    usage  typeslots py   include typeslots h typeslots inc ", "content": "#!/usr/bin/python\n# Usage: typeslots.py < Include/typeslots.h typeslots.inc\n\nimport sys, re\n\ndef generate_typeslots(out=sys.stdout):\n    out.write(\"/* Generated by typeslots.py */\\n\")\n    res = {}\n    for line in sys.stdin:\n        m = re.match(\"#define Py_([a-z_]+) ([0-9]+)\", line)\n        if not m:\n            continue\n        member = m.group(1)\n        if member.startswith(\"tp_\"):\n            member = \"ht_type.\"+member\n        elif member.startswith(\"am_\"):\n            member = \"as_async.\"+member\n        elif member.startswith(\"nb_\"):\n            member = \"as_number.\"+member\n        elif member.startswith(\"mp_\"):\n            member = \"as_mapping.\"+member\n        elif member.startswith(\"sq_\"):\n            member = \"as_sequence.\"+member\n        elif member.startswith(\"bf_\"):\n            member = \"as_buffer.\"+member\n        res[int(m.group(2))] = member\n\n    M = max(res.keys())+1\n    for i in range(1,M):\n        if i in res:\n            out.write(\"offsetof(PyHeapTypeObject, %s),\\n\" % res[i])\n        else:\n            out.write(\"0,\\n\")\n\ndef main():\n    if len(sys.argv) == 2:\n        with open(sys.argv[1], \"w\") as f:\n            generate_typeslots(f)\n    else:\n        generate_typeslots()\n\nif __name__ == \"__main__\":\n    main()\n", "description": "The Python programming language", "file_name": "typeslots.py", "id": "1455ab6c32c081b049c83ba4dd56f746", "language": "Python", "project_name": "cpython", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-cpython/python-cpython-fe2bbb1/Objects/typeslots.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:51:39Z", "url": "https://github.com/python/cpython", "wiki": false}