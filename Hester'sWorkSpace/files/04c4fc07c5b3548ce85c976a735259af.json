{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..utils import (\n    parse_iso8601,\n    str_to_int,\n)\n\n\nclass CrackedIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?cracked\\.com/video_(?P<id>\\d+)_[\\da-z-]+\\.html'\n    _TESTS = [{\n        'url': 'http://www.cracked.com/video_19070_if-animal-actors-got-e21-true-hollywood-stories.html',\n        'md5': '89b90b9824e3806ca95072c4d78f13f7',\n        'info_dict': {\n            'id': '19070',\n            'ext': 'mp4',\n            'title': 'If Animal Actors Got E! True Hollywood Stories',\n            'timestamp': 1404954000,\n            'upload_date': '20140710',\n        }\n    }, {\n        \n        'url': 'http://www.cracked.com/video_19006_4-plot-holes-you-didnt-notice-in-your-favorite-movies.html',\n        'md5': 'ccd52866b50bde63a6ef3b35016ba8c7',\n        'info_dict': {\n            'id': 'EjI00A3rZD0',\n            'ext': 'mp4',\n            'title': \"4 Plot Holes You Didn't Notice in Your Favorite Movies - The Spit Take\",\n            'description': 'md5:c603708c718b796fe6079e2b3351ffc7',\n            'upload_date': '20140725',\n            'uploader_id': 'Cracked',\n            'uploader': 'Cracked',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        youtube_url = YoutubeIE._extract_url(webpage)\n        if youtube_url:\n            return self.url_result(youtube_url, ie=YoutubeIE.ie_key())\n\n        video_url = self._html_search_regex(\n            [r'var\\s+CK_vidSrc\\s*=\\s*\"([^\"]+)\"', r'<video\\s+src=\"([^\"]+)\"'],\n            webpage, 'video URL')\n\n        title = self._search_regex(\n            [r'property=\"?og:title\"?\\s+content=\"([^\"]+)\"', r'class=\"?title\"?>([^<]+)'],\n            webpage, 'title')\n\n        description = self._search_regex(\n            r'name=\"?(?:og:)?description\"?\\s+content=\"([^\"]+)\"',\n            webpage, 'description', default=None)\n\n        timestamp = self._html_search_regex(\n            r'\"date\"\\s*:\\s*\"([^\"]+)\"', webpage, 'upload date', fatal=False)\n        if timestamp:\n            timestamp = parse_iso8601(timestamp[:-6])\n\n        view_count = str_to_int(self._html_search_regex(\n            r'<span\\s+class=\"?views\"? id=\"?viewCounts\"?>([\\d,\\.]+) Views</span>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._html_search_regex(\n            r'<span\\s+id=\"?commentCounts\"?>([\\d,\\.]+)</span>',\n            webpage, 'comment count', fatal=False))\n\n        m = re.search(r'_(?P<width>\\d+)X(?P<height>\\d+)\\.mp4$', video_url)\n        if m:\n            width = int(m.group('width'))\n            height = int(m.group('height'))\n        else:\n            width = height = None\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'height': height,\n            'width': width,\n        }\n", "comments": "# youtube embed\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom .youtube import YoutubeIE\nfrom ..utils import (\n    parse_iso8601,\n    str_to_int,\n)\n\n\nclass CrackedIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?cracked\\.com/video_(?P<id>\\d+)_[\\da-z-]+\\.html'\n    _TESTS = [{\n        'url': 'http://www.cracked.com/video_19070_if-animal-actors-got-e21-true-hollywood-stories.html',\n        'md5': '89b90b9824e3806ca95072c4d78f13f7',\n        'info_dict': {\n            'id': '19070',\n            'ext': 'mp4',\n            'title': 'If Animal Actors Got E! True Hollywood Stories',\n            'timestamp': 1404954000,\n            'upload_date': '20140710',\n        }\n    }, {\n        # youtube embed\n        'url': 'http://www.cracked.com/video_19006_4-plot-holes-you-didnt-notice-in-your-favorite-movies.html',\n        'md5': 'ccd52866b50bde63a6ef3b35016ba8c7',\n        'info_dict': {\n            'id': 'EjI00A3rZD0',\n            'ext': 'mp4',\n            'title': \"4 Plot Holes You Didn't Notice in Your Favorite Movies - The Spit Take\",\n            'description': 'md5:c603708c718b796fe6079e2b3351ffc7',\n            'upload_date': '20140725',\n            'uploader_id': 'Cracked',\n            'uploader': 'Cracked',\n        }\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        youtube_url = YoutubeIE._extract_url(webpage)\n        if youtube_url:\n            return self.url_result(youtube_url, ie=YoutubeIE.ie_key())\n\n        video_url = self._html_search_regex(\n            [r'var\\s+CK_vidSrc\\s*=\\s*\"([^\"]+)\"', r'<video\\s+src=\"([^\"]+)\"'],\n            webpage, 'video URL')\n\n        title = self._search_regex(\n            [r'property=\"?og:title\"?\\s+content=\"([^\"]+)\"', r'class=\"?title\"?>([^<]+)'],\n            webpage, 'title')\n\n        description = self._search_regex(\n            r'name=\"?(?:og:)?description\"?\\s+content=\"([^\"]+)\"',\n            webpage, 'description', default=None)\n\n        timestamp = self._html_search_regex(\n            r'\"date\"\\s*:\\s*\"([^\"]+)\"', webpage, 'upload date', fatal=False)\n        if timestamp:\n            timestamp = parse_iso8601(timestamp[:-6])\n\n        view_count = str_to_int(self._html_search_regex(\n            r'<span\\s+class=\"?views\"? id=\"?viewCounts\"?>([\\d,\\.]+) Views</span>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._html_search_regex(\n            r'<span\\s+id=\"?commentCounts\"?>([\\d,\\.]+)</span>',\n            webpage, 'comment count', fatal=False))\n\n        m = re.search(r'_(?P<width>\\d+)X(?P<height>\\d+)\\.mp4$', video_url)\n        if m:\n            width = int(m.group('width'))\n            height = int(m.group('height'))\n        else:\n            width = height = None\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'description': description,\n            'timestamp': timestamp,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'height': height,\n            'width': width,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cracked.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cracked.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}