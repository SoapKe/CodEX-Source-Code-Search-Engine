{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    urlencode_postdata,\n)\n\n\nclass HiDiveIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hidive\\.com/stream/(?P<title>[^/]+)/(?P<key>[^/?\n    \n    \n    _GEO_BYPASS = False\n\n    _TESTS = [{\n        'url': 'https://www.hidive.com/stream/the-comic-artist-and-his-assistants/s01e001',\n        'info_dict': {\n            'id': 'the-comic-artist-and-his-assistants/s01e001',\n            'ext': 'mp4',\n            'title': 'the-comic-artist-and-his-assistants/s01e001',\n            'series': 'the-comic-artist-and-his-assistants',\n            'season_number': 1,\n            'episode_number': 1,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        title, key = mobj.group('title', 'key')\n        video_id = '%s/%s' % (title, key)\n\n        settings = self._download_json(\n            'https://www.hidive.com/play/settings', video_id,\n            data=urlencode_postdata({\n                'Title': title,\n                'Key': key,\n            }))\n\n        restriction = settings.get('restrictionReason')\n        if restriction == 'RegionRestricted':\n            self.raise_geo_restricted()\n\n        if restriction and restriction != 'None':\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, restriction), expected=True)\n\n        formats = []\n        subtitles = {}\n        for rendition_id, rendition in settings['renditions'].items():\n            bitrates = rendition.get('bitrates')\n            if not isinstance(bitrates, dict):\n                continue\n            m3u8_url = bitrates.get('hls')\n            if not isinstance(m3u8_url, compat_str):\n                continue\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='%s-hls' % rendition_id, fatal=False))\n            cc_files = rendition.get('ccFiles')\n            if not isinstance(cc_files, list):\n                continue\n            for cc_file in cc_files:\n                if not isinstance(cc_file, list) or len(cc_file) < 3:\n                    continue\n                cc_lang = cc_file[0]\n                cc_url = cc_file[2]\n                if not isinstance(cc_lang, compat_str) or not isinstance(\n                        cc_url, compat_str):\n                    continue\n                subtitles.setdefault(cc_lang, []).append({\n                    'url': cc_url,\n                })\n\n        season_number = int_or_none(self._search_regex(\n            r's(\\d+)', key, 'season number', default=None))\n        episode_number = int_or_none(self._search_regex(\n            r'e(\\d+)', key, 'episode number', default=None))\n\n        return {\n            'id': video_id,\n            'title': video_id,\n            'subtitles': subtitles,\n            'formats': formats,\n            'series': title,\n            'season_number': season_number,\n            'episode_number': episode_number,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n# Using X-Forwarded-For results in 403 HTTP error for HLS fragments,\n# so disabling geo bypass completely\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    urlencode_postdata,\n)\n\n\nclass HiDiveIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?hidive\\.com/stream/(?P<title>[^/]+)/(?P<key>[^/?#&]+)'\n    # Using X-Forwarded-For results in 403 HTTP error for HLS fragments,\n    # so disabling geo bypass completely\n    _GEO_BYPASS = False\n\n    _TESTS = [{\n        'url': 'https://www.hidive.com/stream/the-comic-artist-and-his-assistants/s01e001',\n        'info_dict': {\n            'id': 'the-comic-artist-and-his-assistants/s01e001',\n            'ext': 'mp4',\n            'title': 'the-comic-artist-and-his-assistants/s01e001',\n            'series': 'the-comic-artist-and-his-assistants',\n            'season_number': 1,\n            'episode_number': 1,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        title, key = mobj.group('title', 'key')\n        video_id = '%s/%s' % (title, key)\n\n        settings = self._download_json(\n            'https://www.hidive.com/play/settings', video_id,\n            data=urlencode_postdata({\n                'Title': title,\n                'Key': key,\n            }))\n\n        restriction = settings.get('restrictionReason')\n        if restriction == 'RegionRestricted':\n            self.raise_geo_restricted()\n\n        if restriction and restriction != 'None':\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, restriction), expected=True)\n\n        formats = []\n        subtitles = {}\n        for rendition_id, rendition in settings['renditions'].items():\n            bitrates = rendition.get('bitrates')\n            if not isinstance(bitrates, dict):\n                continue\n            m3u8_url = bitrates.get('hls')\n            if not isinstance(m3u8_url, compat_str):\n                continue\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='%s-hls' % rendition_id, fatal=False))\n            cc_files = rendition.get('ccFiles')\n            if not isinstance(cc_files, list):\n                continue\n            for cc_file in cc_files:\n                if not isinstance(cc_file, list) or len(cc_file) < 3:\n                    continue\n                cc_lang = cc_file[0]\n                cc_url = cc_file[2]\n                if not isinstance(cc_lang, compat_str) or not isinstance(\n                        cc_url, compat_str):\n                    continue\n                subtitles.setdefault(cc_lang, []).append({\n                    'url': cc_url,\n                })\n\n        season_number = int_or_none(self._search_regex(\n            r's(\\d+)', key, 'season number', default=None))\n        episode_number = int_or_none(self._search_regex(\n            r'e(\\d+)', key, 'episode number', default=None))\n\n        return {\n            'id': video_id,\n            'title': video_id,\n            'subtitles': subtitles,\n            'formats': formats,\n            'series': title,\n            'season_number': season_number,\n            'episode_number': episode_number,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hidive.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hidive.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}