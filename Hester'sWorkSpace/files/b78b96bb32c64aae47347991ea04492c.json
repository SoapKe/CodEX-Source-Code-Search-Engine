{"author": "python-telegram-bot", "code": "\n\n A library that provides a Python interface to the Telegram Bot API\n Copyright (C) 2015-2018\n Leandro Toledo de Souza <devs@python-telegram-bot.org>\n\n This program is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser Public License for more details.\n\n You should have received a copy of the GNU Lesser Public License\n along with this program.  If not, see [http://www.gnu.org/licenses/].\nfrom datetime import datetime\n\nimport pytest\n\nfrom telegram import ParseMode\nfrom telegram import (Update, Message, User, MessageEntity, Chat, Audio, Document,\n                      Game, PhotoSize, Sticker, Video, Voice, VideoNote, Contact, Location, Venue,\n                      Invoice, SuccessfulPayment)\n\n\n@pytest.fixture(scope='class')\ndef message(bot):\n    return Message(TestMessage.id, TestMessage.from_user, TestMessage.date, TestMessage.chat,\n                   bot=bot)\n\n\n@pytest.fixture(scope='function',\n                params=[\n                    {'forward_from': User(99, 'forward_user', False),\n                     'forward_date': datetime.now()},\n                    {'forward_from_chat': Chat(-23, 'channel'),\n                     'forward_from_message_id': 101,\n                     'forward_date': datetime.now()},\n                    {'reply_to_message': Message(50, None, None, None)},\n                    {'edit_date': datetime.now()},\n                    {'text': 'a text message',\n                     'enitites': [MessageEntity('bold', 10, 4),\n                                  MessageEntity('italic', 16, 7)]},\n                    {'caption': 'A message caption',\n                     'caption_entities': [MessageEntity('bold', 1, 1),\n                                          MessageEntity('text_link', 4, 3)]},\n                    {'audio': Audio('audio_id', 12),\n                     'caption': 'audio_file'},\n                    {'document': Document('document_id'),\n                     'caption': 'document_file'},\n                    {'game': Game('my_game', 'just my game',\n                                  [PhotoSize('game_photo_id', 30, 30), ])},\n                    {'photo': [PhotoSize('photo_id', 50, 50)],\n                     'caption': 'photo_file'},\n                    {'sticker': Sticker('sticker_id', 50, 50)},\n                    {'video': Video('video_id', 12, 12, 12),\n                     'caption': 'video_file'},\n                    {'voice': Voice('voice_id', 5)},\n                    {'video_note': VideoNote('video_note_id', 20, 12)},\n                    {'new_chat_members': [User(55, 'new_user', False)]},\n                    {'contact': Contact('phone_numner', 'contact_name')},\n                    {'location': Location(-23.691288, 46.788279)},\n                    {'venue': Venue(Location(-23.691288, 46.788279),\n                                    'some place', 'right here')},\n                    {'left_chat_member': User(33, 'kicked', False)},\n                    {'new_chat_title': 'new title'},\n                    {'new_chat_photo': [PhotoSize('photo_id', 50, 50)]},\n                    {'delete_chat_photo': True},\n                    {'group_chat_created': True},\n                    {'supergroup_chat_created': True},\n                    {'channel_chat_created': True},\n                    {'migrate_to_chat_id': -12345},\n                    {'migrate_from_chat_id': -54321},\n                    {'pinned_message': Message(7, None, None, None)},\n                    {'invoice': Invoice('my invoice', 'invoice', 'start', 'EUR', 243)},\n                    {'successful_payment': SuccessfulPayment('EUR', 243, 'payload',\n                                                             'charge_id', 'provider_id',\n                                                             order_info={})},\n                    {'connected_website': 'http://example.com/'},\n                    {'forward_signature': 'some_forward_sign'},\n                    {'author_signature': 'some_author_sign'},\n                    {'photo': [PhotoSize('photo_id', 50, 50)],\n                     'caption': 'photo_file',\n                     'media_group_id': 1234443322222}\n                ],\n                ids=['forwarded_user', 'forwarded_channel', 'reply', 'edited', 'text',\n                     'caption_entities', 'audio', 'document', 'game', 'photo', 'sticker', 'video',\n                     'voice', 'video_note', 'new_members', 'contact', 'location', 'venue',\n                     'left_member', 'new_title', 'new_photo', 'delete_photo', 'group_created',\n                     'supergroup_created', 'channel_created', 'migrated_to', 'migrated_from',\n                     'pinned', 'invoice', 'successful_payment', 'connected_website',\n                     'forward_signature', 'author_signature', 'photo_from_media_group'])\ndef message_params(bot, request):\n    return Message(message_id=TestMessage.id,\n                   from_user=TestMessage.from_user,\n                   date=TestMessage.date,\n                   chat=TestMessage.chat, bot=bot, **request.param)\n\n\nclass TestMessage(object):\n    id = 1\n    from_user = User(2, 'testuser', False)\n    date = datetime.now()\n    chat = Chat(3, 'private')\n    test_entities = [{'length': 4, 'offset': 10, 'type': 'bold'},\n                     {'length': 7, 'offset': 16, 'type': 'italic'},\n                     {'length': 4, 'offset': 25, 'type': 'code'},\n                     {'length': 5, 'offset': 31, 'type': 'text_link', 'url': 'http://github.com/'},\n                     {'length': 3, 'offset': 41, 'type': 'pre'},\n                     {'length': 17, 'offset': 46, 'type': 'url'}]\n    test_text = 'Test for <bold, ita_lic, code, links and pre. http://google.com'\n    test_message = Message(message_id=1,\n                           from_user=None,\n                           date=None,\n                           chat=None,\n                           text=test_text,\n                           entities=[MessageEntity(**e) for e in test_entities],\n                           caption=test_text,\n                           caption_entities=[MessageEntity(**e) for e in test_entities])\n\n    def test_all_posibilities_de_json_and_to_dict(self, bot, message_params):\n        new = Message.de_json(message_params.to_dict(), bot)\n\n        assert new.to_dict() == message_params.to_dict()\n\n    def test_dict_approach(self, message):\n        assert message['date'] == message.date\n        assert message['chat_id'] == message.chat_id\n        assert message['no_key'] is None\n\n    def test_parse_entity(self):\n        text = (b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d\\\\U0001f467'\n                b'\\\\u200d\\\\U0001f467\\\\U0001f431http://google.com').decode('unicode-escape')\n        entity = MessageEntity(type=MessageEntity.URL, offset=13, length=17)\n        message = Message(1, self.from_user, self.date, self.chat, text=text, entities=[entity])\n        assert message.parse_entity(entity) == 'http://google.com'\n\n    def test_parse_caption_entity(self):\n        caption = (b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d\\\\U0001f467'\n                   b'\\\\u200d\\\\U0001f467\\\\U0001f431http://google.com').decode('unicode-escape')\n        entity = MessageEntity(type=MessageEntity.URL, offset=13, length=17)\n        message = Message(1, self.from_user, self.date, self.chat, caption=caption,\n                          caption_entities=[entity])\n        assert message.parse_caption_entity(entity) == 'http://google.com'\n\n    def test_parse_entities(self):\n        text = (b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d\\\\U0001f467'\n                b'\\\\u200d\\\\U0001f467\\\\U0001f431http://google.com').decode('unicode-escape')\n        entity = MessageEntity(type=MessageEntity.URL, offset=13, length=17)\n        entity_2 = MessageEntity(type=MessageEntity.BOLD, offset=13, length=1)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          text=text, entities=[entity_2, entity])\n        assert message.parse_entities(MessageEntity.URL) == {entity: 'http://google.com'}\n        assert message.parse_entities() == {entity: 'http://google.com', entity_2: 'h'}\n\n    def test_parse_caption_entities(self):\n        text = (b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d\\\\U0001f467'\n                b'\\\\u200d\\\\U0001f467\\\\U0001f431http://google.com').decode('unicode-escape')\n        entity = MessageEntity(type=MessageEntity.URL, offset=13, length=17)\n        entity_2 = MessageEntity(type=MessageEntity.BOLD, offset=13, length=1)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          caption=text, caption_entities=[entity_2, entity])\n        assert message.parse_caption_entities(MessageEntity.URL) == {entity: 'http://google.com'}\n        assert message.parse_caption_entities() == {entity: 'http://google.com', entity_2: 'h'}\n\n    def test_text_html_simple(self):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            'http://google.com')\n        text_html = self.test_message.text_html\n        assert text_html == test_html_string\n\n    def test_text_html_empty(self, message):\n        message.text = None\n        message.caption = \"test\"\n        assert message.text_html is None\n\n    def test_text_html_urled(self):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            '<a href=\"http://google.com\">http://google.com</a>')\n        text_html = self.test_message.text_html_urled\n        assert text_html == test_html_string\n\n    def test_text_markdown_simple(self):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. http://google.com')\n        text_markdown = self.test_message.text_markdown\n        assert text_markdown == test_md_string\n\n    def test_text_markdown_empty(self, message):\n        message.text = None\n        message.caption = \"test\"\n        assert message.text_markdown is None\n\n    def test_text_markdown_urled(self):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. [http://google.com](http://google.com)')\n        text_markdown = self.test_message.text_markdown_urled\n        assert text_markdown == test_md_string\n\n    def test_text_html_emoji(self):\n        text = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d ABC'.decode('unicode-escape')\n        expected = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d <b>ABC</b>'.decode('unicode-escape')\n        bold_entity = MessageEntity(type=MessageEntity.BOLD, offset=7, length=3)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          text=text, entities=[bold_entity])\n        assert expected == message.text_html\n\n    def test_text_markdown_emoji(self):\n        text = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d ABC'.decode('unicode-escape')\n        expected = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d *ABC*'.decode('unicode-escape')\n        bold_entity = MessageEntity(type=MessageEntity.BOLD, offset=7, length=3)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          text=text, entities=[bold_entity])\n        assert expected == message.text_markdown\n\n    def test_caption_html_simple(self):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            'http://google.com')\n        caption_html = self.test_message.caption_html\n        assert caption_html == test_html_string\n\n    def test_caption_html_empty(self, message):\n        message.text = \"test\"\n        message.caption = None\n        assert message.caption_html is None\n\n    def test_caption_html_urled(self):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            '<a href=\"http://google.com\">http://google.com</a>')\n        caption_html = self.test_message.caption_html_urled\n        assert caption_html == test_html_string\n\n    def test_caption_markdown_simple(self):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. http://google.com')\n        caption_markdown = self.test_message.caption_markdown\n        assert caption_markdown == test_md_string\n\n    def test_caption_markdown_empty(self, message):\n        message.text = \"test\"\n        message.caption = None\n        assert message.caption_markdown is None\n\n    def test_caption_markdown_urled(self):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. [http://google.com](http://google.com)')\n        caption_markdown = self.test_message.caption_markdown_urled\n        assert caption_markdown == test_md_string\n\n    def test_caption_html_emoji(self):\n        caption = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d ABC'.decode('unicode-escape')\n        expected = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d <b>ABC</b>'.decode('unicode-escape')\n        bold_entity = MessageEntity(type=MessageEntity.BOLD, offset=7, length=3)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          caption=caption, caption_entities=[bold_entity])\n        assert expected == message.caption_html\n\n    def test_caption_markdown_emoji(self):\n        caption = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d ABC'.decode('unicode-escape')\n        expected = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d *ABC*'.decode('unicode-escape')\n        bold_entity = MessageEntity(type=MessageEntity.BOLD, offset=7, length=3)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          caption=caption, caption_entities=[bold_entity])\n        assert expected == message.caption_markdown\n\n    def test_parse_entities_url_emoji(self):\n        url = b'http://github.com/?unicode=\\\\u2713\\\\U0001f469'.decode('unicode-escape')\n        text = 'some url'\n        link_entity = MessageEntity(type=MessageEntity.URL, offset=0, length=8, url=url)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          text=text, entities=[link_entity])\n        assert message.parse_entities() == {link_entity: text}\n        assert next(iter(message.parse_entities())).url == url\n\n    def test_chat_id(self, message):\n        assert message.chat_id == message.chat.id\n\n    def test_effective_attachment(self, message_params):\n        for i in ('audio', 'game', 'document', 'photo', 'sticker', 'video', 'voice', 'video_note',\n                  'contact', 'location', 'venue', 'invoice', 'invoice', 'successful_payment'):\n            item = getattr(message_params, i, None)\n            if item:\n                break\n        else:\n            item = None\n        assert message_params.effective_attachment == item\n\n    def test_reply_text(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            text = args[2] == 'test'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and text and reply\n\n        monkeypatch.setattr('telegram.Bot.send_message', test)\n        assert message.reply_text('test')\n        assert message.reply_text('test', quote=True)\n        assert message.reply_text('test', reply_to_message_id=message.message_id, quote=True)\n\n    def test_reply_markdown(self, monkeypatch, message):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. http://google.com')\n\n        def test(*args, **kwargs):\n            cid = args[1] == message.chat_id\n            markdown_text = args[2] == test_md_string\n            markdown_enabled = kwargs['parse_mode'] == ParseMode.MARKDOWN\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return all([cid, markdown_text, reply, markdown_enabled])\n\n        text_markdown = self.test_message.text_markdown\n        assert text_markdown == test_md_string\n\n        monkeypatch.setattr('telegram.Bot.send_message', test)\n        assert message.reply_markdown(self.test_message.text_markdown)\n        assert message.reply_markdown(self.test_message.text_markdown, quote=True)\n        assert message.reply_markdown(self.test_message.text_markdown,\n                                      reply_to_message_id=message.message_id,\n                                      quote=True)\n\n    def test_reply_html(self, monkeypatch, message):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            'http://google.com')\n\n        def test(*args, **kwargs):\n            cid = args[1] == message.chat_id\n            html_text = args[2] == test_html_string\n            html_enabled = kwargs['parse_mode'] == ParseMode.HTML\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return all([cid, html_text, reply, html_enabled])\n\n        text_html = self.test_message.text_html\n        assert text_html == test_html_string\n\n        monkeypatch.setattr('telegram.Bot.send_message', test)\n        assert message.reply_html(self.test_message.text_html)\n        assert message.reply_html(self.test_message.text_html, quote=True)\n        assert message.reply_html(self.test_message.text_html,\n                                  reply_to_message_id=message.message_id,\n                                  quote=True)\n\n    def test_reply_media_group(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            media = kwargs['media'] == 'reply_media_group'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and media and reply\n\n        monkeypatch.setattr('telegram.Bot.send_media_group', test)\n        assert message.reply_media_group(media='reply_media_group')\n        assert message.reply_media_group(media='reply_media_group', quote=True)\n\n    def test_reply_photo(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            photo = kwargs['photo'] == 'test_photo'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and photo and reply\n\n        monkeypatch.setattr('telegram.Bot.send_photo', test)\n        assert message.reply_photo(photo='test_photo')\n        assert message.reply_photo(photo='test_photo', quote=True)\n\n    def test_reply_audio(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            audio = kwargs['audio'] == 'test_audio'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and audio and reply\n\n        monkeypatch.setattr('telegram.Bot.send_audio', test)\n        assert message.reply_audio(audio='test_audio')\n        assert message.reply_audio(audio='test_audio', quote=True)\n\n    def test_reply_document(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            document = kwargs['document'] == 'test_document'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and document and reply\n\n        monkeypatch.setattr('telegram.Bot.send_document', test)\n        assert message.reply_document(document='test_document')\n        assert message.reply_document(document='test_document', quote=True)\n\n    def test_reply_sticker(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            sticker = kwargs['sticker'] == 'test_sticker'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and sticker and reply\n\n        monkeypatch.setattr('telegram.Bot.send_sticker', test)\n        assert message.reply_sticker(sticker='test_sticker')\n        assert message.reply_sticker(sticker='test_sticker', quote=True)\n\n    def test_reply_video(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            video = kwargs['video'] == 'test_video'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and video and reply\n\n        monkeypatch.setattr('telegram.Bot.send_video', test)\n        assert message.reply_video(video='test_video')\n        assert message.reply_video(video='test_video', quote=True)\n\n    def test_reply_video_note(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            video_note = kwargs['video_note'] == 'test_video_note'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and video_note and reply\n\n        monkeypatch.setattr('telegram.Bot.send_video_note', test)\n        assert message.reply_video_note(video_note='test_video_note')\n        assert message.reply_video_note(video_note='test_video_note', quote=True)\n\n    def test_reply_voice(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            voice = kwargs['voice'] == 'test_voice'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and voice and reply\n\n        monkeypatch.setattr('telegram.Bot.send_voice', test)\n        assert message.reply_voice(voice='test_voice')\n        assert message.reply_voice(voice='test_voice', quote=True)\n\n    def test_reply_location(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            location = kwargs['location'] == 'test_location'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and location and reply\n\n        monkeypatch.setattr('telegram.Bot.send_location', test)\n        assert message.reply_location(location='test_location')\n        assert message.reply_location(location='test_location', quote=True)\n\n    def test_reply_venue(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            venue = kwargs['venue'] == 'test_venue'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and venue and reply\n\n        monkeypatch.setattr('telegram.Bot.send_venue', test)\n        assert message.reply_venue(venue='test_venue')\n        assert message.reply_venue(venue='test_venue', quote=True)\n\n    def test_reply_contact(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            contact = kwargs['contact'] == 'test_contact'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and contact and reply\n\n        monkeypatch.setattr('telegram.Bot.send_contact', test)\n        assert message.reply_contact(contact='test_contact')\n        assert message.reply_contact(contact='test_contact', quote=True)\n\n    def test_forward(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == 123456\n            from_chat = kwargs['from_chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            if kwargs.get('disable_notification'):\n                notification = kwargs['disable_notification'] is True\n            else:\n                notification = True\n            return chat_id and from_chat and message_id and notification\n\n        monkeypatch.setattr('telegram.Bot.forward_message', test)\n        assert message.forward(123456)\n        assert message.forward(123456, disable_notification=True)\n        assert not message.forward(635241)\n\n    def test_edit_text(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            text = kwargs['text'] == 'test'\n            return chat_id and message_id and text\n\n        monkeypatch.setattr('telegram.Bot.edit_message_text', test)\n        assert message.edit_text(text='test')\n\n    def test_edit_caption(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            caption = kwargs['caption'] == 'new caption'\n            return chat_id and message_id and caption\n\n        monkeypatch.setattr('telegram.Bot.edit_message_caption', test)\n        assert message.edit_caption(caption='new caption')\n\n    def test_edit_reply_markup(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            reply_markup = kwargs['reply_markup'] == [['1', '2']]\n            return chat_id and message_id and reply_markup\n\n        monkeypatch.setattr('telegram.Bot.edit_message_reply_markup', test)\n        assert message.edit_reply_markup(reply_markup=[['1', '2']])\n\n    def test_delete(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            return chat_id and message_id\n\n        monkeypatch.setattr('telegram.Bot.delete_message', test)\n        assert message.delete()\n\n    def test_equality(self):\n        id = 1\n        a = Message(id, self.from_user, self.date, self.chat)\n        b = Message(id, self.from_user, self.date, self.chat)\n        c = Message(id, User(0, '', False), self.date, self.chat)\n        d = Message(0, self.from_user, self.date, self.chat)\n        e = Update(id)\n\n        assert a == b\n        assert hash(a) == hash(b)\n        assert a is not b\n\n        assert a == c\n        assert hash(a) == hash(c)\n\n        assert a != d\n        assert hash(a) != hash(d)\n\n        assert a != e\n        assert hash(a) != hash(e)\n", "comments": "   usr bin env python       a library provides python interface telegram bot api    copyright (c) 2015 2018    leandro toledo de souza  devs python telegram bot org        this program free software  redistribute modify    terms gnu lesser public license published    free software foundation  either version 3 license     (at option) later version        this program distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu lesser public license details        you received copy gnu lesser public license    along program   if  see  http   www gnu org licenses    ", "content": "#!/usr/bin/env python\n#\n# A library that provides a Python interface to the Telegram Bot API\n# Copyright (C) 2015-2018\n# Leandro Toledo de Souza <devs@python-telegram-bot.org>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Lesser Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU Lesser Public License for more details.\n#\n# You should have received a copy of the GNU Lesser Public License\n# along with this program.  If not, see [http://www.gnu.org/licenses/].\nfrom datetime import datetime\n\nimport pytest\n\nfrom telegram import ParseMode\nfrom telegram import (Update, Message, User, MessageEntity, Chat, Audio, Document,\n                      Game, PhotoSize, Sticker, Video, Voice, VideoNote, Contact, Location, Venue,\n                      Invoice, SuccessfulPayment)\n\n\n@pytest.fixture(scope='class')\ndef message(bot):\n    return Message(TestMessage.id, TestMessage.from_user, TestMessage.date, TestMessage.chat,\n                   bot=bot)\n\n\n@pytest.fixture(scope='function',\n                params=[\n                    {'forward_from': User(99, 'forward_user', False),\n                     'forward_date': datetime.now()},\n                    {'forward_from_chat': Chat(-23, 'channel'),\n                     'forward_from_message_id': 101,\n                     'forward_date': datetime.now()},\n                    {'reply_to_message': Message(50, None, None, None)},\n                    {'edit_date': datetime.now()},\n                    {'text': 'a text message',\n                     'enitites': [MessageEntity('bold', 10, 4),\n                                  MessageEntity('italic', 16, 7)]},\n                    {'caption': 'A message caption',\n                     'caption_entities': [MessageEntity('bold', 1, 1),\n                                          MessageEntity('text_link', 4, 3)]},\n                    {'audio': Audio('audio_id', 12),\n                     'caption': 'audio_file'},\n                    {'document': Document('document_id'),\n                     'caption': 'document_file'},\n                    {'game': Game('my_game', 'just my game',\n                                  [PhotoSize('game_photo_id', 30, 30), ])},\n                    {'photo': [PhotoSize('photo_id', 50, 50)],\n                     'caption': 'photo_file'},\n                    {'sticker': Sticker('sticker_id', 50, 50)},\n                    {'video': Video('video_id', 12, 12, 12),\n                     'caption': 'video_file'},\n                    {'voice': Voice('voice_id', 5)},\n                    {'video_note': VideoNote('video_note_id', 20, 12)},\n                    {'new_chat_members': [User(55, 'new_user', False)]},\n                    {'contact': Contact('phone_numner', 'contact_name')},\n                    {'location': Location(-23.691288, 46.788279)},\n                    {'venue': Venue(Location(-23.691288, 46.788279),\n                                    'some place', 'right here')},\n                    {'left_chat_member': User(33, 'kicked', False)},\n                    {'new_chat_title': 'new title'},\n                    {'new_chat_photo': [PhotoSize('photo_id', 50, 50)]},\n                    {'delete_chat_photo': True},\n                    {'group_chat_created': True},\n                    {'supergroup_chat_created': True},\n                    {'channel_chat_created': True},\n                    {'migrate_to_chat_id': -12345},\n                    {'migrate_from_chat_id': -54321},\n                    {'pinned_message': Message(7, None, None, None)},\n                    {'invoice': Invoice('my invoice', 'invoice', 'start', 'EUR', 243)},\n                    {'successful_payment': SuccessfulPayment('EUR', 243, 'payload',\n                                                             'charge_id', 'provider_id',\n                                                             order_info={})},\n                    {'connected_website': 'http://example.com/'},\n                    {'forward_signature': 'some_forward_sign'},\n                    {'author_signature': 'some_author_sign'},\n                    {'photo': [PhotoSize('photo_id', 50, 50)],\n                     'caption': 'photo_file',\n                     'media_group_id': 1234443322222}\n                ],\n                ids=['forwarded_user', 'forwarded_channel', 'reply', 'edited', 'text',\n                     'caption_entities', 'audio', 'document', 'game', 'photo', 'sticker', 'video',\n                     'voice', 'video_note', 'new_members', 'contact', 'location', 'venue',\n                     'left_member', 'new_title', 'new_photo', 'delete_photo', 'group_created',\n                     'supergroup_created', 'channel_created', 'migrated_to', 'migrated_from',\n                     'pinned', 'invoice', 'successful_payment', 'connected_website',\n                     'forward_signature', 'author_signature', 'photo_from_media_group'])\ndef message_params(bot, request):\n    return Message(message_id=TestMessage.id,\n                   from_user=TestMessage.from_user,\n                   date=TestMessage.date,\n                   chat=TestMessage.chat, bot=bot, **request.param)\n\n\nclass TestMessage(object):\n    id = 1\n    from_user = User(2, 'testuser', False)\n    date = datetime.now()\n    chat = Chat(3, 'private')\n    test_entities = [{'length': 4, 'offset': 10, 'type': 'bold'},\n                     {'length': 7, 'offset': 16, 'type': 'italic'},\n                     {'length': 4, 'offset': 25, 'type': 'code'},\n                     {'length': 5, 'offset': 31, 'type': 'text_link', 'url': 'http://github.com/'},\n                     {'length': 3, 'offset': 41, 'type': 'pre'},\n                     {'length': 17, 'offset': 46, 'type': 'url'}]\n    test_text = 'Test for <bold, ita_lic, code, links and pre. http://google.com'\n    test_message = Message(message_id=1,\n                           from_user=None,\n                           date=None,\n                           chat=None,\n                           text=test_text,\n                           entities=[MessageEntity(**e) for e in test_entities],\n                           caption=test_text,\n                           caption_entities=[MessageEntity(**e) for e in test_entities])\n\n    def test_all_posibilities_de_json_and_to_dict(self, bot, message_params):\n        new = Message.de_json(message_params.to_dict(), bot)\n\n        assert new.to_dict() == message_params.to_dict()\n\n    def test_dict_approach(self, message):\n        assert message['date'] == message.date\n        assert message['chat_id'] == message.chat_id\n        assert message['no_key'] is None\n\n    def test_parse_entity(self):\n        text = (b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d\\\\U0001f467'\n                b'\\\\u200d\\\\U0001f467\\\\U0001f431http://google.com').decode('unicode-escape')\n        entity = MessageEntity(type=MessageEntity.URL, offset=13, length=17)\n        message = Message(1, self.from_user, self.date, self.chat, text=text, entities=[entity])\n        assert message.parse_entity(entity) == 'http://google.com'\n\n    def test_parse_caption_entity(self):\n        caption = (b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d\\\\U0001f467'\n                   b'\\\\u200d\\\\U0001f467\\\\U0001f431http://google.com').decode('unicode-escape')\n        entity = MessageEntity(type=MessageEntity.URL, offset=13, length=17)\n        message = Message(1, self.from_user, self.date, self.chat, caption=caption,\n                          caption_entities=[entity])\n        assert message.parse_caption_entity(entity) == 'http://google.com'\n\n    def test_parse_entities(self):\n        text = (b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d\\\\U0001f467'\n                b'\\\\u200d\\\\U0001f467\\\\U0001f431http://google.com').decode('unicode-escape')\n        entity = MessageEntity(type=MessageEntity.URL, offset=13, length=17)\n        entity_2 = MessageEntity(type=MessageEntity.BOLD, offset=13, length=1)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          text=text, entities=[entity_2, entity])\n        assert message.parse_entities(MessageEntity.URL) == {entity: 'http://google.com'}\n        assert message.parse_entities() == {entity: 'http://google.com', entity_2: 'h'}\n\n    def test_parse_caption_entities(self):\n        text = (b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d\\\\U0001f467'\n                b'\\\\u200d\\\\U0001f467\\\\U0001f431http://google.com').decode('unicode-escape')\n        entity = MessageEntity(type=MessageEntity.URL, offset=13, length=17)\n        entity_2 = MessageEntity(type=MessageEntity.BOLD, offset=13, length=1)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          caption=text, caption_entities=[entity_2, entity])\n        assert message.parse_caption_entities(MessageEntity.URL) == {entity: 'http://google.com'}\n        assert message.parse_caption_entities() == {entity: 'http://google.com', entity_2: 'h'}\n\n    def test_text_html_simple(self):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            'http://google.com')\n        text_html = self.test_message.text_html\n        assert text_html == test_html_string\n\n    def test_text_html_empty(self, message):\n        message.text = None\n        message.caption = \"test\"\n        assert message.text_html is None\n\n    def test_text_html_urled(self):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            '<a href=\"http://google.com\">http://google.com</a>')\n        text_html = self.test_message.text_html_urled\n        assert text_html == test_html_string\n\n    def test_text_markdown_simple(self):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. http://google.com')\n        text_markdown = self.test_message.text_markdown\n        assert text_markdown == test_md_string\n\n    def test_text_markdown_empty(self, message):\n        message.text = None\n        message.caption = \"test\"\n        assert message.text_markdown is None\n\n    def test_text_markdown_urled(self):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. [http://google.com](http://google.com)')\n        text_markdown = self.test_message.text_markdown_urled\n        assert text_markdown == test_md_string\n\n    def test_text_html_emoji(self):\n        text = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d ABC'.decode('unicode-escape')\n        expected = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d <b>ABC</b>'.decode('unicode-escape')\n        bold_entity = MessageEntity(type=MessageEntity.BOLD, offset=7, length=3)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          text=text, entities=[bold_entity])\n        assert expected == message.text_html\n\n    def test_text_markdown_emoji(self):\n        text = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d ABC'.decode('unicode-escape')\n        expected = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d *ABC*'.decode('unicode-escape')\n        bold_entity = MessageEntity(type=MessageEntity.BOLD, offset=7, length=3)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          text=text, entities=[bold_entity])\n        assert expected == message.text_markdown\n\n    def test_caption_html_simple(self):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            'http://google.com')\n        caption_html = self.test_message.caption_html\n        assert caption_html == test_html_string\n\n    def test_caption_html_empty(self, message):\n        message.text = \"test\"\n        message.caption = None\n        assert message.caption_html is None\n\n    def test_caption_html_urled(self):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            '<a href=\"http://google.com\">http://google.com</a>')\n        caption_html = self.test_message.caption_html_urled\n        assert caption_html == test_html_string\n\n    def test_caption_markdown_simple(self):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. http://google.com')\n        caption_markdown = self.test_message.caption_markdown\n        assert caption_markdown == test_md_string\n\n    def test_caption_markdown_empty(self, message):\n        message.text = \"test\"\n        message.caption = None\n        assert message.caption_markdown is None\n\n    def test_caption_markdown_urled(self):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. [http://google.com](http://google.com)')\n        caption_markdown = self.test_message.caption_markdown_urled\n        assert caption_markdown == test_md_string\n\n    def test_caption_html_emoji(self):\n        caption = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d ABC'.decode('unicode-escape')\n        expected = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d <b>ABC</b>'.decode('unicode-escape')\n        bold_entity = MessageEntity(type=MessageEntity.BOLD, offset=7, length=3)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          caption=caption, caption_entities=[bold_entity])\n        assert expected == message.caption_html\n\n    def test_caption_markdown_emoji(self):\n        caption = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d ABC'.decode('unicode-escape')\n        expected = b'\\\\U0001f469\\\\u200d\\\\U0001f469\\\\u200d *ABC*'.decode('unicode-escape')\n        bold_entity = MessageEntity(type=MessageEntity.BOLD, offset=7, length=3)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          caption=caption, caption_entities=[bold_entity])\n        assert expected == message.caption_markdown\n\n    def test_parse_entities_url_emoji(self):\n        url = b'http://github.com/?unicode=\\\\u2713\\\\U0001f469'.decode('unicode-escape')\n        text = 'some url'\n        link_entity = MessageEntity(type=MessageEntity.URL, offset=0, length=8, url=url)\n        message = Message(1, self.from_user, self.date, self.chat,\n                          text=text, entities=[link_entity])\n        assert message.parse_entities() == {link_entity: text}\n        assert next(iter(message.parse_entities())).url == url\n\n    def test_chat_id(self, message):\n        assert message.chat_id == message.chat.id\n\n    def test_effective_attachment(self, message_params):\n        for i in ('audio', 'game', 'document', 'photo', 'sticker', 'video', 'voice', 'video_note',\n                  'contact', 'location', 'venue', 'invoice', 'invoice', 'successful_payment'):\n            item = getattr(message_params, i, None)\n            if item:\n                break\n        else:\n            item = None\n        assert message_params.effective_attachment == item\n\n    def test_reply_text(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            text = args[2] == 'test'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and text and reply\n\n        monkeypatch.setattr('telegram.Bot.send_message', test)\n        assert message.reply_text('test')\n        assert message.reply_text('test', quote=True)\n        assert message.reply_text('test', reply_to_message_id=message.message_id, quote=True)\n\n    def test_reply_markdown(self, monkeypatch, message):\n        test_md_string = ('Test for <*bold*, _ita\\_lic_, `code`, [links](http://github.com/) and '\n                          '```pre```. http://google.com')\n\n        def test(*args, **kwargs):\n            cid = args[1] == message.chat_id\n            markdown_text = args[2] == test_md_string\n            markdown_enabled = kwargs['parse_mode'] == ParseMode.MARKDOWN\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return all([cid, markdown_text, reply, markdown_enabled])\n\n        text_markdown = self.test_message.text_markdown\n        assert text_markdown == test_md_string\n\n        monkeypatch.setattr('telegram.Bot.send_message', test)\n        assert message.reply_markdown(self.test_message.text_markdown)\n        assert message.reply_markdown(self.test_message.text_markdown, quote=True)\n        assert message.reply_markdown(self.test_message.text_markdown,\n                                      reply_to_message_id=message.message_id,\n                                      quote=True)\n\n    def test_reply_html(self, monkeypatch, message):\n        test_html_string = ('Test for &lt;<b>bold</b>, <i>ita_lic</i>, <code>code</code>, '\n                            '<a href=\"http://github.com/\">links</a> and <pre>pre</pre>. '\n                            'http://google.com')\n\n        def test(*args, **kwargs):\n            cid = args[1] == message.chat_id\n            html_text = args[2] == test_html_string\n            html_enabled = kwargs['parse_mode'] == ParseMode.HTML\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return all([cid, html_text, reply, html_enabled])\n\n        text_html = self.test_message.text_html\n        assert text_html == test_html_string\n\n        monkeypatch.setattr('telegram.Bot.send_message', test)\n        assert message.reply_html(self.test_message.text_html)\n        assert message.reply_html(self.test_message.text_html, quote=True)\n        assert message.reply_html(self.test_message.text_html,\n                                  reply_to_message_id=message.message_id,\n                                  quote=True)\n\n    def test_reply_media_group(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            media = kwargs['media'] == 'reply_media_group'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and media and reply\n\n        monkeypatch.setattr('telegram.Bot.send_media_group', test)\n        assert message.reply_media_group(media='reply_media_group')\n        assert message.reply_media_group(media='reply_media_group', quote=True)\n\n    def test_reply_photo(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            photo = kwargs['photo'] == 'test_photo'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and photo and reply\n\n        monkeypatch.setattr('telegram.Bot.send_photo', test)\n        assert message.reply_photo(photo='test_photo')\n        assert message.reply_photo(photo='test_photo', quote=True)\n\n    def test_reply_audio(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            audio = kwargs['audio'] == 'test_audio'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and audio and reply\n\n        monkeypatch.setattr('telegram.Bot.send_audio', test)\n        assert message.reply_audio(audio='test_audio')\n        assert message.reply_audio(audio='test_audio', quote=True)\n\n    def test_reply_document(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            document = kwargs['document'] == 'test_document'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and document and reply\n\n        monkeypatch.setattr('telegram.Bot.send_document', test)\n        assert message.reply_document(document='test_document')\n        assert message.reply_document(document='test_document', quote=True)\n\n    def test_reply_sticker(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            sticker = kwargs['sticker'] == 'test_sticker'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and sticker and reply\n\n        monkeypatch.setattr('telegram.Bot.send_sticker', test)\n        assert message.reply_sticker(sticker='test_sticker')\n        assert message.reply_sticker(sticker='test_sticker', quote=True)\n\n    def test_reply_video(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            video = kwargs['video'] == 'test_video'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and video and reply\n\n        monkeypatch.setattr('telegram.Bot.send_video', test)\n        assert message.reply_video(video='test_video')\n        assert message.reply_video(video='test_video', quote=True)\n\n    def test_reply_video_note(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            video_note = kwargs['video_note'] == 'test_video_note'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and video_note and reply\n\n        monkeypatch.setattr('telegram.Bot.send_video_note', test)\n        assert message.reply_video_note(video_note='test_video_note')\n        assert message.reply_video_note(video_note='test_video_note', quote=True)\n\n    def test_reply_voice(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            voice = kwargs['voice'] == 'test_voice'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and voice and reply\n\n        monkeypatch.setattr('telegram.Bot.send_voice', test)\n        assert message.reply_voice(voice='test_voice')\n        assert message.reply_voice(voice='test_voice', quote=True)\n\n    def test_reply_location(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            location = kwargs['location'] == 'test_location'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and location and reply\n\n        monkeypatch.setattr('telegram.Bot.send_location', test)\n        assert message.reply_location(location='test_location')\n        assert message.reply_location(location='test_location', quote=True)\n\n    def test_reply_venue(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            venue = kwargs['venue'] == 'test_venue'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and venue and reply\n\n        monkeypatch.setattr('telegram.Bot.send_venue', test)\n        assert message.reply_venue(venue='test_venue')\n        assert message.reply_venue(venue='test_venue', quote=True)\n\n    def test_reply_contact(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            id = args[1] == message.chat_id\n            contact = kwargs['contact'] == 'test_contact'\n            if kwargs.get('reply_to_message_id'):\n                reply = kwargs['reply_to_message_id'] == message.message_id\n            else:\n                reply = True\n            return id and contact and reply\n\n        monkeypatch.setattr('telegram.Bot.send_contact', test)\n        assert message.reply_contact(contact='test_contact')\n        assert message.reply_contact(contact='test_contact', quote=True)\n\n    def test_forward(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == 123456\n            from_chat = kwargs['from_chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            if kwargs.get('disable_notification'):\n                notification = kwargs['disable_notification'] is True\n            else:\n                notification = True\n            return chat_id and from_chat and message_id and notification\n\n        monkeypatch.setattr('telegram.Bot.forward_message', test)\n        assert message.forward(123456)\n        assert message.forward(123456, disable_notification=True)\n        assert not message.forward(635241)\n\n    def test_edit_text(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            text = kwargs['text'] == 'test'\n            return chat_id and message_id and text\n\n        monkeypatch.setattr('telegram.Bot.edit_message_text', test)\n        assert message.edit_text(text='test')\n\n    def test_edit_caption(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            caption = kwargs['caption'] == 'new caption'\n            return chat_id and message_id and caption\n\n        monkeypatch.setattr('telegram.Bot.edit_message_caption', test)\n        assert message.edit_caption(caption='new caption')\n\n    def test_edit_reply_markup(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            reply_markup = kwargs['reply_markup'] == [['1', '2']]\n            return chat_id and message_id and reply_markup\n\n        monkeypatch.setattr('telegram.Bot.edit_message_reply_markup', test)\n        assert message.edit_reply_markup(reply_markup=[['1', '2']])\n\n    def test_delete(self, monkeypatch, message):\n        def test(*args, **kwargs):\n            chat_id = kwargs['chat_id'] == message.chat_id\n            message_id = kwargs['message_id'] == message.message_id\n            return chat_id and message_id\n\n        monkeypatch.setattr('telegram.Bot.delete_message', test)\n        assert message.delete()\n\n    def test_equality(self):\n        id = 1\n        a = Message(id, self.from_user, self.date, self.chat)\n        b = Message(id, self.from_user, self.date, self.chat)\n        c = Message(id, User(0, '', False), self.date, self.chat)\n        d = Message(0, self.from_user, self.date, self.chat)\n        e = Update(id)\n\n        assert a == b\n        assert hash(a) == hash(b)\n        assert a is not b\n\n        assert a == c\n        assert hash(a) == hash(c)\n\n        assert a != d\n        assert hash(a) != hash(d)\n\n        assert a != e\n        assert hash(a) != hash(e)\n", "description": "We have made you a wrapper you can't refuse", "file_name": "test_message.py", "id": "b78b96bb32c64aae47347991ea04492c", "language": "Python", "project_name": "python-telegram-bot", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/python-telegram-bot-python-telegram-bot/python-telegram-bot-python-telegram-bot-3ccf40e/tests/test_message.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:32:55Z", "url": "https://github.com/python-telegram-bot/python-telegram-bot", "wiki": true}