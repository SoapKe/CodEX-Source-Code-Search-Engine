{"author": "keon", "code": "\n\n\n\n\ndef walls_and_gates(rooms):\n    for i in range(len(rooms)):\n        for j in range(len(rooms[0])):\n            if rooms[i][j] == 0:\n                DFS(rooms, i, j, 0)\n\n\ndef DFS(rooms, i, j, depth):\n    if (i < 0 or i >= len(rooms)) or (j < 0 or j >= len(rooms[0])):\n        return  \n    if rooms[i][j] < depth:\n        return  \n    rooms[i][j] = depth\n    DFS(rooms, i+1, j, depth+1)\n    DFS(rooms, i-1, j, depth+1)\n    DFS(rooms, i, j+1, depth+1)\n    DFS(rooms, i, j-1, depth+1)\n", "comments": "  fill empty room distance nearest gate    bounds    crossed ", "content": "\n\n# fill the empty room with distance to its nearest gate\n\n\ndef walls_and_gates(rooms):\n    for i in range(len(rooms)):\n        for j in range(len(rooms[0])):\n            if rooms[i][j] == 0:\n                DFS(rooms, i, j, 0)\n\n\ndef DFS(rooms, i, j, depth):\n    if (i < 0 or i >= len(rooms)) or (j < 0 or j >= len(rooms[0])):\n        return  # out of bounds\n    if rooms[i][j] < depth:\n        return  # crossed\n    rooms[i][j] = depth\n    DFS(rooms, i+1, j, depth+1)\n    DFS(rooms, i-1, j, depth+1)\n    DFS(rooms, i, j+1, depth+1)\n    DFS(rooms, i, j-1, depth+1)\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "walls_and_gates.py", "id": "ce5568654f84a6e8d42a1afc65cf8a47", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/dfs/walls_and_gates.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}