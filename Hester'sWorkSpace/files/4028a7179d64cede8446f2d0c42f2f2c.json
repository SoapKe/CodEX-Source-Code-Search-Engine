{"author": "HelloZeroNet", "code": "import time\nimport json\nimport os\nimport sys\nimport re\nimport socket\n\nfrom subprocess import call\nfrom bitcoinrpc.authproxy import AuthServiceProxy\n\n\ndef publish():\n    print \"* Signing and Publishing...\"\n    call(\" \".join(command_sign_publish), shell=True)\n\n\ndef processNameOp(domain, value, test=False):\n    if not value.strip().startswith(\"{\"):\n        return False\n    try:\n        data = json.loads(value)\n    except Exception, err:\n        print \"Json load error: %s\" % err\n        return False\n    if \"zeronet\" not in data:\n        print \"No zeronet in \", data.keys()\n        return False\n    if not isinstance(data[\"zeronet\"], dict):\n        print \"Not dict: \", data[\"zeronet\"]\n        return False\n    if not re.match(\"^[a-z0-9]([a-z0-9-]{0,62}[a-z0-9])?$\", domain):\n        print \"Invalid domain: \", domain\n        return False\n\n    if test:\n        return True\n\n    if \"slave\" in sys.argv:\n        print \"Waiting for master update arrive\"\n        time.sleep(30)  \n\n    \n    names_raw = open(names_path, \"rb\").read()\n    names = json.loads(names_raw)\n    for subdomain, address in data[\"zeronet\"].items():\n        subdomain = subdomain.lower()\n        address = re.sub(\"[^A-Za-z0-9]\", \"\", address)\n        print subdomain, domain, \"->\", address\n        if subdomain:\n            if re.match(\"^[a-z0-9]([a-z0-9-]{0,62}[a-z0-9])?$\", subdomain):\n                names[\"%s.%s.bit\" % (subdomain, domain)] = address\n            else:\n                print \"Invalid subdomain:\", domain, subdomain\n        else:\n            names[\"%s.bit\" % domain] = address\n\n    new_names_raw = json.dumps(names, indent=2, sort_keys=True)\n    if new_names_raw != names_raw:\n        open(names_path, \"wb\").write(new_names_raw)\n        print \"-\", domain, \"Changed\"\n        return True\n    else:\n        print \"-\", domain, \"Not changed\"\n        return False\n\n\ndef processBlock(block_id, test=False):\n    print \"Processing block \n    s = time.time()\n    block_hash = rpc.getblockhash(block_id)\n    block = rpc.getblock(block_hash)\n\n    print \"Checking %s tx\" % len(block[\"tx\"])\n    updated = 0\n    for tx in block[\"tx\"]:\n        try:\n            transaction = rpc.getrawtransaction(tx, 1)\n            for vout in transaction.get(\"vout\", []):\n                if \"scriptPubKey\" in vout and \"nameOp\" in vout[\"scriptPubKey\"] and \"name\" in vout[\"scriptPubKey\"][\"nameOp\"]:\n                    name_op = vout[\"scriptPubKey\"][\"nameOp\"]\n                    updated += processNameOp(name_op[\"name\"].replace(\"d/\", \"\"), name_op[\"value\"], test)\n        except Exception, err:\n            print \"Error processing tx #%s %s\" % (tx, err)\n    print \"Done in %.3fs (updated %s).\" % (time.time() - s, updated)\n    return updated\n\n\ndef initRpc(config):\n    \n    rpc_data = {\n        'connect': '127.0.0.1',\n        'port': '8336',\n        'user': 'PLACEHOLDER',\n        'password': 'PLACEHOLDER',\n        'clienttimeout': '900'\n    }\n    try:\n        fptr = open(config, 'r')\n        lines = fptr.readlines()\n        fptr.close()\n    except:\n        return None  \n\n    for line in lines:\n        if not line.startswith('rpc'):\n            continue\n        key_val = line.split(None, 1)[0]\n        (key, val) = key_val.split('=', 1)\n        if not key or not val:\n            continue\n        rpc_data[key[3:]] = val\n\n    url = 'http://%(user)s:%(password)s@%(connect)s:%(port)s' % rpc_data\n\n    return url, int(rpc_data['clienttimeout'])\n\n\n\n\n\n\nif sys.platform == \"win32\":\n    namecoin_location = os.getenv('APPDATA') + \"/Namecoin/\"\nelse:\n    namecoin_location = os.path.expanduser(\"~/.namecoin/\")\n\nconfig_path = namecoin_location + 'zeroname_config.json'\nif not os.path.isfile(config_path):  \n    open(config_path, \"w\").write(\n        json.dumps({'site': 'site', 'zeronet_path': '/home/zeronet', 'privatekey': '', 'lastprocessed': 223910}, indent=2)\n    )\n    print \"* Example config written to %s\" % config_path\n    sys.exit(0)\n\nconfig = json.load(open(config_path))\nnames_path = \"%s/data/%s/data/names.json\" % (config[\"zeronet_path\"], config[\"site\"])\nos.chdir(config[\"zeronet_path\"])  \n\n\ncommand_sign_publish = [sys.executable, \"zeronet.py\", \"siteSign\", config[\"site\"], config[\"privatekey\"], \"--publish\"]\nif sys.platform == 'win32':\n    command_sign_publish = ['\"%s\"' % param for param in command_sign_publish]\n\n\nrpc_auth, rpc_timeout = initRpc(namecoin_location + \"namecoin.conf\")\nrpc = AuthServiceProxy(rpc_auth, timeout=rpc_timeout)\n\nwhile 1:\n    try:\n        time.sleep(1)\n        last_block = int(rpc.getinfo()[\"blocks\"])\n        break \n    except socket.timeout:  \n        print \".\",\n        sys.stdout.flush()\n    except Exception, err:\n        print \"Exception\", err.__class__, err\n        time.sleep(5)\n        rpc = AuthServiceProxy(rpc_auth, timeout=rpc_timeout)\n\nif not config[\"lastprocessed\"]:  \n    config[\"lastprocessed\"] = last_block\n\n\nprint \"- Testing domain parsing...\"\nassert processBlock(223911, test=True) \nassert processBlock(227052, test=True) \nassert not processBlock(236824, test=True) # Utf8 domain name (invalid should skip)\nassert not processBlock(236752, test=True) # Uppercase domain (invalid should skip)\nassert processBlock(236870, test=True) # Encoded domain (should pass)\n# sys.exit(0)\n\nprint \"- Parsing skipped blocks...\"\nshould_publish = False\nfor block_id in range(config[\"lastprocessed\"], last_block + 1):\n    if processBlock(block_id):\n        should_publish = True\nconfig[\"lastprocessed\"] = last_block\n\nif should_publish:\n    publish()\n\nwhile 1:\n    print \"- Waiting for new block\"\n    sys.stdout.flush()\n    while 1:\n        try:\n            time.sleep(1)\n            rpc.waitforblock()\n            print \"Found\"\n            break  \n        except socket.timeout:  \n            print \".\",\n            sys.stdout.flush()\n        except Exception, err:\n            print \"Exception\", err.__class__, err\n            time.sleep(5)\n            rpc = AuthServiceProxy(rpc_auth, timeout=rpc_timeout)\n\n    last_block = int(rpc.getinfo()[\"blocks\"])\n    should_publish = False\n    for block_id in range(config[\"lastprocessed\"] + 1, last_block + 1):\n        if processBlock(block_id):\n            should_publish = True\n\n    config[\"lastprocessed\"] = last_block\n    open(config_path, \"w\").write(json.dumps(config, indent=2))\n\n    if should_publish:\n        publish()\n", "comments": "   initialize namecoin rpc       wait 30 sec allow master updater    note  requires file data names json exist contain      work          block id        (tx  err)    connecting rpc    or take appropriate action    loading config       check whether platform windows linux    on linux namecoin installed    namecoin  windows  appdata  namecoin    create sample config    change working dir   tells script zeronet install     parameters sign publish    initialize rpc connection    connection succeeded    timeout    first startup  start processing last block    testing zeronetwork bit    testing brainwallets bit    utf8 domain name (invalid skip)    uppercase domain (invalid skip)    encoded domain (should pass)    sys exit(0)    block found    timeout ", "content": "import time\nimport json\nimport os\nimport sys\nimport re\nimport socket\n\nfrom subprocess import call\nfrom bitcoinrpc.authproxy import AuthServiceProxy\n\n\ndef publish():\n    print \"* Signing and Publishing...\"\n    call(\" \".join(command_sign_publish), shell=True)\n\n\ndef processNameOp(domain, value, test=False):\n    if not value.strip().startswith(\"{\"):\n        return False\n    try:\n        data = json.loads(value)\n    except Exception, err:\n        print \"Json load error: %s\" % err\n        return False\n    if \"zeronet\" not in data:\n        print \"No zeronet in \", data.keys()\n        return False\n    if not isinstance(data[\"zeronet\"], dict):\n        print \"Not dict: \", data[\"zeronet\"]\n        return False\n    if not re.match(\"^[a-z0-9]([a-z0-9-]{0,62}[a-z0-9])?$\", domain):\n        print \"Invalid domain: \", domain\n        return False\n\n    if test:\n        return True\n\n    if \"slave\" in sys.argv:\n        print \"Waiting for master update arrive\"\n        time.sleep(30)  # Wait 30 sec to allow master updater\n\n    # Note: Requires the file data/names.json to exist and contain \"{}\" to work\n    names_raw = open(names_path, \"rb\").read()\n    names = json.loads(names_raw)\n    for subdomain, address in data[\"zeronet\"].items():\n        subdomain = subdomain.lower()\n        address = re.sub(\"[^A-Za-z0-9]\", \"\", address)\n        print subdomain, domain, \"->\", address\n        if subdomain:\n            if re.match(\"^[a-z0-9]([a-z0-9-]{0,62}[a-z0-9])?$\", subdomain):\n                names[\"%s.%s.bit\" % (subdomain, domain)] = address\n            else:\n                print \"Invalid subdomain:\", domain, subdomain\n        else:\n            names[\"%s.bit\" % domain] = address\n\n    new_names_raw = json.dumps(names, indent=2, sort_keys=True)\n    if new_names_raw != names_raw:\n        open(names_path, \"wb\").write(new_names_raw)\n        print \"-\", domain, \"Changed\"\n        return True\n    else:\n        print \"-\", domain, \"Not changed\"\n        return False\n\n\ndef processBlock(block_id, test=False):\n    print \"Processing block #%s...\" % block_id\n    s = time.time()\n    block_hash = rpc.getblockhash(block_id)\n    block = rpc.getblock(block_hash)\n\n    print \"Checking %s tx\" % len(block[\"tx\"])\n    updated = 0\n    for tx in block[\"tx\"]:\n        try:\n            transaction = rpc.getrawtransaction(tx, 1)\n            for vout in transaction.get(\"vout\", []):\n                if \"scriptPubKey\" in vout and \"nameOp\" in vout[\"scriptPubKey\"] and \"name\" in vout[\"scriptPubKey\"][\"nameOp\"]:\n                    name_op = vout[\"scriptPubKey\"][\"nameOp\"]\n                    updated += processNameOp(name_op[\"name\"].replace(\"d/\", \"\"), name_op[\"value\"], test)\n        except Exception, err:\n            print \"Error processing tx #%s %s\" % (tx, err)\n    print \"Done in %.3fs (updated %s).\" % (time.time() - s, updated)\n    return updated\n\n# Connecting to RPC\ndef initRpc(config):\n    \"\"\"Initialize Namecoin RPC\"\"\"\n    rpc_data = {\n        'connect': '127.0.0.1',\n        'port': '8336',\n        'user': 'PLACEHOLDER',\n        'password': 'PLACEHOLDER',\n        'clienttimeout': '900'\n    }\n    try:\n        fptr = open(config, 'r')\n        lines = fptr.readlines()\n        fptr.close()\n    except:\n        return None  # Or take some other appropriate action\n\n    for line in lines:\n        if not line.startswith('rpc'):\n            continue\n        key_val = line.split(None, 1)[0]\n        (key, val) = key_val.split('=', 1)\n        if not key or not val:\n            continue\n        rpc_data[key[3:]] = val\n\n    url = 'http://%(user)s:%(password)s@%(connect)s:%(port)s' % rpc_data\n\n    return url, int(rpc_data['clienttimeout'])\n\n# Loading config...\n\n# Check whether platform is on windows or linux\n# On linux namecoin is installed under ~/.namecoin, while on on windows it is in %appdata%/Namecoin\n\nif sys.platform == \"win32\":\n    namecoin_location = os.getenv('APPDATA') + \"/Namecoin/\"\nelse:\n    namecoin_location = os.path.expanduser(\"~/.namecoin/\")\n\nconfig_path = namecoin_location + 'zeroname_config.json'\nif not os.path.isfile(config_path):  # Create sample config\n    open(config_path, \"w\").write(\n        json.dumps({'site': 'site', 'zeronet_path': '/home/zeronet', 'privatekey': '', 'lastprocessed': 223910}, indent=2)\n    )\n    print \"* Example config written to %s\" % config_path\n    sys.exit(0)\n\nconfig = json.load(open(config_path))\nnames_path = \"%s/data/%s/data/names.json\" % (config[\"zeronet_path\"], config[\"site\"])\nos.chdir(config[\"zeronet_path\"])  # Change working dir - tells script where Zeronet install is.\n\n# Parameters to sign and publish\ncommand_sign_publish = [sys.executable, \"zeronet.py\", \"siteSign\", config[\"site\"], config[\"privatekey\"], \"--publish\"]\nif sys.platform == 'win32':\n    command_sign_publish = ['\"%s\"' % param for param in command_sign_publish]\n\n# Initialize rpc connection\nrpc_auth, rpc_timeout = initRpc(namecoin_location + \"namecoin.conf\")\nrpc = AuthServiceProxy(rpc_auth, timeout=rpc_timeout)\n\nwhile 1:\n    try:\n        time.sleep(1)\n        last_block = int(rpc.getinfo()[\"blocks\"])\n        break # Connection succeeded\n    except socket.timeout:  # Timeout\n        print \".\",\n        sys.stdout.flush()\n    except Exception, err:\n        print \"Exception\", err.__class__, err\n        time.sleep(5)\n        rpc = AuthServiceProxy(rpc_auth, timeout=rpc_timeout)\n\nif not config[\"lastprocessed\"]:  # First startup: Start processing from last block\n    config[\"lastprocessed\"] = last_block\n\n\nprint \"- Testing domain parsing...\"\nassert processBlock(223911, test=True) # Testing zeronetwork.bit\nassert processBlock(227052, test=True) # Testing brainwallets.bit\nassert not processBlock(236824, test=True) # Utf8 domain name (invalid should skip)\nassert not processBlock(236752, test=True) # Uppercase domain (invalid should skip)\nassert processBlock(236870, test=True) # Encoded domain (should pass)\n# sys.exit(0)\n\nprint \"- Parsing skipped blocks...\"\nshould_publish = False\nfor block_id in range(config[\"lastprocessed\"], last_block + 1):\n    if processBlock(block_id):\n        should_publish = True\nconfig[\"lastprocessed\"] = last_block\n\nif should_publish:\n    publish()\n\nwhile 1:\n    print \"- Waiting for new block\"\n    sys.stdout.flush()\n    while 1:\n        try:\n            time.sleep(1)\n            rpc.waitforblock()\n            print \"Found\"\n            break  # Block found\n        except socket.timeout:  # Timeout\n            print \".\",\n            sys.stdout.flush()\n        except Exception, err:\n            print \"Exception\", err.__class__, err\n            time.sleep(5)\n            rpc = AuthServiceProxy(rpc_auth, timeout=rpc_timeout)\n\n    last_block = int(rpc.getinfo()[\"blocks\"])\n    should_publish = False\n    for block_id in range(config[\"lastprocessed\"] + 1, last_block + 1):\n        if processBlock(block_id):\n            should_publish = True\n\n    config[\"lastprocessed\"] = last_block\n    open(config_path, \"w\").write(json.dumps(config, indent=2))\n\n    if should_publish:\n        publish()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "zeroname_updater.py", "id": "4028a7179d64cede8446f2d0c42f2f2c", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/Zeroname/updater/zeroname_updater.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}