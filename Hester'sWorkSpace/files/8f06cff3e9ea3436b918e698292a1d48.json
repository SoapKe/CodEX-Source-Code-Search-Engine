{"author": "tgalal", "code": "from yowsup.structs import ProtocolTreeNode\nfrom yowsup.layers.protocol_iq.protocolentities import ResultIqProtocolEntity\nclass InfoGroupsResultIqProtocolEntity(ResultIqProtocolEntity):\n    \n    TYPE_PARTICIPANT_ADMIN = \"admin\"\n    def __init__(self, _id, _from,\n                 groupId, creationTimestamp, creatorJid,\n                 subject, subjectTime, subjectOwnerJid,\n                 participants):\n        super(InfoGroupsResultIqProtocolEntity, self).__init__(_id = _id, _from = _from)\n        self.setGroupProps(groupId, creationTimestamp, creatorJid,\n                           subject, subjectTime, subjectOwnerJid, participants)\n\n    def setGroupProps(self, groupId, creationTimestamp, creatorJid,\n                      subject, subjectTime, subjectOwnerJid,\n                      participants):\n\n        assert type(participants) is dict, \"Participants must be a dict {jid => type?}\"\n\n        self.groupId = groupId\n        self.creationTimestamp = int(creationTimestamp)\n        self.creatorJid = creatorJid\n        self.subject = subject\n        self.subjectTime = int(subjectTime)\n        self.subjectOwnerJid = subjectOwnerJid\n        self.participants = participants\n\n    def getParticipants(self):\n        return self.participants\n\n    def getSubject(self):\n        return self.subject\n\n    def getGroupId(self):\n        return self.groupId\n\n    def getCreationTimestamp(self):\n        return self.creationTimestamp\n\n    def getCreatorJid(self, full = True):\n        return self.creatorJid if full else self.creatorJid.split('@')[0]\n\n    def getSubjectTimestamp(self):\n        return self.subjectTime\n\n    def getSubjectOwnerJid(self, full = True):\n        return self.subjectOwnerJid if full else self.subjectOwnerJid.split('@')[0]\n\n    def getGroupAdmins(self, full = True):\n        admins = []\n        for jid, _type in self.participants.items():\n            if _type == self.__class__.TYPE_PARTICIPANT_ADMIN:\n                admins.append(jid if full else jid.split('@')[0])\n        return admins\n\n    def __str__(self):\n        out = super(InfoGroupsResultIqProtocolEntity, self).__str__()\n        out += \"Group ID: %s\\n\" % self.groupId\n        out += \"Created: %s\\n\" % self.creationTimestamp\n        out += \"Creator JID: %s\\n\" % self.creatorJid\n        out += \"Subject: %s\\n\" % self.subject\n        out += \"Subject Timestamp: %s\\n\" % self.subjectTime\n        out += \"Subject owner JID: %s\\n\" % self.subjectOwnerJid\n        out += \"Participants: %s\\n\" % self.participants\n        return out\n\n    def toProtocolTreeNode(self):\n        node = super(InfoGroupsResultIqProtocolEntity, self).toProtocolTreeNode()\n        groupNode = ProtocolTreeNode(\"group\", {\n            \"subject\": self.getSubject(),\n            \"creation\": str(self.getCreationTimestamp()),\n            \"creator\": self.getCreatorJid(),\n            \"s_t\": self.getSubjectTimestamp(),\n            \"s_o\": self.getSubjectOwnerJid(),\n            \"id\": self.getGroupId()\n        })\n\n        participants = []\n        for jid, _type in self.getParticipants().items():\n            pnode = ProtocolTreeNode(\"participant\", {\"jid\": jid})\n            if _type:\n                pnode[\"type\"] = _type\n            participants.append(pnode)\n\n        groupNode.addChildren(participants)\n        node.addChild(groupNode)\n\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        groupNode = node.getChild(\"group\")\n        participants = {}\n        for p in groupNode.getAllChildren(\"participant\"):\n            participants[p[\"jid\"]] = p[\"type\"]\n\n        return InfoGroupsResultIqProtocolEntity(\n            node[\"id\"], node[\"from\"],\n            groupNode[\"id\"], groupNode[\"creation\"], groupNode[\"creator\"], groupNode[\"subject\"],\n            groupNode[\"s_t\"], groupNode[\"s_o\"], participants\n        )\n", "comments": "     iq type  result     group id    id    iq id        group subject    groupsubj    creation    group creation tyime          creator    creator jid       subject set timestamp    id    group id             subject owner jid          participant jid    participant jid    type  admin    participant       participant jid    participant jid      participant       participant jid    participant jid      participant      group    iq          ", "content": "from yowsup.structs import ProtocolTreeNode\nfrom yowsup.layers.protocol_iq.protocolentities import ResultIqProtocolEntity\nclass InfoGroupsResultIqProtocolEntity(ResultIqProtocolEntity):\n    '''\n<iq type=\"result\" from=\"{{GROUP_ID}}\" id=\"{{IQ_ID}}\">\n  <group subject=\"{{GROUPSUBJ}}\" creation=\"{{GROUP_CREATION_TYIME}}\"\n      creator=\"{{CREATOR_JID}}\" s_t=\"{{SUBJECT_SET_TIMESTAMP}}\" id=\"{{GROUP_ID}}\"\n      s_o=\"{{SUBJECT_OWNER_JID}}\">\n    <participant jid=\"{{PARTICIPANT_JID}}\" type=\"admin\"></participant>\n    <participant jid=\"{{PARTICIPANT_JID}}\"></participant>\n    <participant jid=\"{{PARTICIPANT_JID}}\"></participant>\n  </group>\n</iq>\n    '''\n    TYPE_PARTICIPANT_ADMIN = \"admin\"\n    def __init__(self, _id, _from,\n                 groupId, creationTimestamp, creatorJid,\n                 subject, subjectTime, subjectOwnerJid,\n                 participants):\n        super(InfoGroupsResultIqProtocolEntity, self).__init__(_id = _id, _from = _from)\n        self.setGroupProps(groupId, creationTimestamp, creatorJid,\n                           subject, subjectTime, subjectOwnerJid, participants)\n\n    def setGroupProps(self, groupId, creationTimestamp, creatorJid,\n                      subject, subjectTime, subjectOwnerJid,\n                      participants):\n\n        assert type(participants) is dict, \"Participants must be a dict {jid => type?}\"\n\n        self.groupId = groupId\n        self.creationTimestamp = int(creationTimestamp)\n        self.creatorJid = creatorJid\n        self.subject = subject\n        self.subjectTime = int(subjectTime)\n        self.subjectOwnerJid = subjectOwnerJid\n        self.participants = participants\n\n    def getParticipants(self):\n        return self.participants\n\n    def getSubject(self):\n        return self.subject\n\n    def getGroupId(self):\n        return self.groupId\n\n    def getCreationTimestamp(self):\n        return self.creationTimestamp\n\n    def getCreatorJid(self, full = True):\n        return self.creatorJid if full else self.creatorJid.split('@')[0]\n\n    def getSubjectTimestamp(self):\n        return self.subjectTime\n\n    def getSubjectOwnerJid(self, full = True):\n        return self.subjectOwnerJid if full else self.subjectOwnerJid.split('@')[0]\n\n    def getGroupAdmins(self, full = True):\n        admins = []\n        for jid, _type in self.participants.items():\n            if _type == self.__class__.TYPE_PARTICIPANT_ADMIN:\n                admins.append(jid if full else jid.split('@')[0])\n        return admins\n\n    def __str__(self):\n        out = super(InfoGroupsResultIqProtocolEntity, self).__str__()\n        out += \"Group ID: %s\\n\" % self.groupId\n        out += \"Created: %s\\n\" % self.creationTimestamp\n        out += \"Creator JID: %s\\n\" % self.creatorJid\n        out += \"Subject: %s\\n\" % self.subject\n        out += \"Subject Timestamp: %s\\n\" % self.subjectTime\n        out += \"Subject owner JID: %s\\n\" % self.subjectOwnerJid\n        out += \"Participants: %s\\n\" % self.participants\n        return out\n\n    def toProtocolTreeNode(self):\n        node = super(InfoGroupsResultIqProtocolEntity, self).toProtocolTreeNode()\n        groupNode = ProtocolTreeNode(\"group\", {\n            \"subject\": self.getSubject(),\n            \"creation\": str(self.getCreationTimestamp()),\n            \"creator\": self.getCreatorJid(),\n            \"s_t\": self.getSubjectTimestamp(),\n            \"s_o\": self.getSubjectOwnerJid(),\n            \"id\": self.getGroupId()\n        })\n\n        participants = []\n        for jid, _type in self.getParticipants().items():\n            pnode = ProtocolTreeNode(\"participant\", {\"jid\": jid})\n            if _type:\n                pnode[\"type\"] = _type\n            participants.append(pnode)\n\n        groupNode.addChildren(participants)\n        node.addChild(groupNode)\n\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        groupNode = node.getChild(\"group\")\n        participants = {}\n        for p in groupNode.getAllChildren(\"participant\"):\n            participants[p[\"jid\"]] = p[\"type\"]\n\n        return InfoGroupsResultIqProtocolEntity(\n            node[\"id\"], node[\"from\"],\n            groupNode[\"id\"], groupNode[\"creation\"], groupNode[\"creator\"], groupNode[\"subject\"],\n            groupNode[\"s_t\"], groupNode[\"s_o\"], participants\n        )\n", "description": "The python WhatsApp library", "file_name": "iq_result_groups_info.py", "id": "8f06cff3e9ea3436b918e698292a1d48", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_groups/protocolentities/iq_result_groups_info.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}