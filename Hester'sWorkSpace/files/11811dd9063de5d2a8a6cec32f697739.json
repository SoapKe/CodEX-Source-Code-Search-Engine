{"author": "jakubroztocil", "code": "import os\nimport json\nimport errno\n\nfrom httpie import __version__\nfrom httpie.compat import is_windows\n\n\nDEFAULT_CONFIG_DIR = str(os.environ.get(\n    'HTTPIE_CONFIG_DIR',\n    os.path.expanduser('~/.httpie') if not is_windows else\n    os.path.expandvars(r'%APPDATA%\\\\httpie')\n))\n\n\nclass BaseConfigDict(dict):\n\n    name = None\n    helpurl = None\n    about = None\n\n    def __getattr__(self, item):\n        return self[item]\n\n    def _get_path(self):\n        \n        try:\n            implicit_content_type = self.pop('implicit_content_type')\n        except KeyError:\n            self.save()\n        else:\n            if implicit_content_type == 'form':\n                self['default_options'].insert(0, '--form')\n            self.save()\n            self.load()\n", "comments": "Return the config file path without side-effects.\"\"\"\n        raise NotImplementedError()\n\n    @property\n    def path(self):\n        \"\"\"Return the config file path creating basedir, if needed.\"\"\"\n        path = self._get_path()\n        try:\n            os.makedirs(os.path.dirname(path), mode=0o700)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise\n        return path\n\n    def is_new(self):\n        return not os.path.exists(self._get_path())\n\n    def load(self):\n        try:\n            with open(self.path, 'rt') as f:\n                try:\n                    data = json.load(f)\n                except ValueError as e:\n                    raise ValueError(\n                        'Invalid %s JSON: %s [%s]' %\n                        (type(self).__name__, str(e), self.path)\n                    )\n                self.update(data)\n        except IOError as e:\n            if e.errno != errno.ENOENT:\n                raise\n\n    def save(self):\n        self['__meta__'] = {\n            'httpie': __version__\n        }\n        if self.helpurl:\n            self['__meta__']['help'] = self.helpurl\n\n        if self.about:\n            self['__meta__']['about'] = self.about\n\n        with open(self.path, 'w') as f:\n            json.dump(self, f, indent=4, sort_keys=True, ensure_ascii=True)\n            f.write('\\n')\n\n    def delete(self):\n        try:\n            os.unlink(self.path)\n        except OSError as e:\n            if e.errno != errno.ENOENT:\n                raise\n\n\nclass Config(BaseConfigDict):\n\n    name = 'config'\n    helpurl = 'https://httpie.org/docs#config'\n    about = 'HTTPie configuration file'\n\n    DEFAULTS = {\n        'default_options': []\n    }\n\n    def __init__(self, directory=DEFAULT_CONFIG_DIR):\n        super(Config, self).__init__()\n        self.update(self.DEFAULTS)\n        self.directory = directory\n\n    def load(self):\n        super(Config, self).load()\n        self._migrate_implicit_content_type()\n\n    def _get_path(self):\n        return os.path.join(self.directory, self.name + '.json')\n\n    def _migrate_implicit_content_type(self):\n        \"\"\"Migrate the removed implicit_content_type config option\nn\n", "content": "import os\nimport json\nimport errno\n\nfrom httpie import __version__\nfrom httpie.compat import is_windows\n\n\nDEFAULT_CONFIG_DIR = str(os.environ.get(\n    'HTTPIE_CONFIG_DIR',\n    os.path.expanduser('~/.httpie') if not is_windows else\n    os.path.expandvars(r'%APPDATA%\\\\httpie')\n))\n\n\nclass BaseConfigDict(dict):\n\n    name = None\n    helpurl = None\n    about = None\n\n    def __getattr__(self, item):\n        return self[item]\n\n    def _get_path(self):\n        \"\"\"Return the config file path without side-effects.\"\"\"\n        raise NotImplementedError()\n\n    @property\n    def path(self):\n        \"\"\"Return the config file path creating basedir, if needed.\"\"\"\n        path = self._get_path()\n        try:\n            os.makedirs(os.path.dirname(path), mode=0o700)\n        except OSError as e:\n            if e.errno != errno.EEXIST:\n                raise\n        return path\n\n    def is_new(self):\n        return not os.path.exists(self._get_path())\n\n    def load(self):\n        try:\n            with open(self.path, 'rt') as f:\n                try:\n                    data = json.load(f)\n                except ValueError as e:\n                    raise ValueError(\n                        'Invalid %s JSON: %s [%s]' %\n                        (type(self).__name__, str(e), self.path)\n                    )\n                self.update(data)\n        except IOError as e:\n            if e.errno != errno.ENOENT:\n                raise\n\n    def save(self):\n        self['__meta__'] = {\n            'httpie': __version__\n        }\n        if self.helpurl:\n            self['__meta__']['help'] = self.helpurl\n\n        if self.about:\n            self['__meta__']['about'] = self.about\n\n        with open(self.path, 'w') as f:\n            json.dump(self, f, indent=4, sort_keys=True, ensure_ascii=True)\n            f.write('\\n')\n\n    def delete(self):\n        try:\n            os.unlink(self.path)\n        except OSError as e:\n            if e.errno != errno.ENOENT:\n                raise\n\n\nclass Config(BaseConfigDict):\n\n    name = 'config'\n    helpurl = 'https://httpie.org/docs#config'\n    about = 'HTTPie configuration file'\n\n    DEFAULTS = {\n        'default_options': []\n    }\n\n    def __init__(self, directory=DEFAULT_CONFIG_DIR):\n        super(Config, self).__init__()\n        self.update(self.DEFAULTS)\n        self.directory = directory\n\n    def load(self):\n        super(Config, self).load()\n        self._migrate_implicit_content_type()\n\n    def _get_path(self):\n        return os.path.join(self.directory, self.name + '.json')\n\n    def _migrate_implicit_content_type(self):\n        \"\"\"Migrate the removed implicit_content_type config option\"\"\"\n        try:\n            implicit_content_type = self.pop('implicit_content_type')\n        except KeyError:\n            self.save()\n        else:\n            if implicit_content_type == 'form':\n                self['default_options'].insert(0, '--form')\n            self.save()\n            self.load()\n", "description": "Modern command line HTTP client \u2013 user-friendly curl alternative with intuitive UI, JSON support, syntax highlighting, wget-like downloads, extensions, etc.  https://httpie.org", "file_name": "config.py", "language": "Python", "project_name": "httpie", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jakubroztocil_httpie/jakubroztocil-httpie-0f4dce9/httpie/config.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:20:06Z", "url": "https://github.com/jakubroztocil/httpie", "wiki": false}