{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\nimport tensorflow as tf\n\n\ndef fc_layer(name,\n             bottom,\n             output_dim,\n             bias_term=True,\n             weights_initializer=None,\n             biases_initializer=None,\n             reuse=None):\n   flatten bottom input\n  shape = bottom.get_shape().as_list()\n  input_dim = 1\n  for d in shape[1:]:\n    input_dim *= d\n  flat_bottom = tf.reshape(bottom, [-1, input_dim])\n\n   weights and biases variables\n  with tf.variable_scope(name, reuse=reuse):\n     initialize the variables\n    if weights_initializer is None:\n      weights_initializer = tf.contrib.layers.xavier_initializer()\n    if bias_term and biases_initializer is None:\n      biases_initializer = tf.constant_initializer(0.)\n\n     weights has shape [input_dim, output_dim]\n    weights = tf.get_variable(\n        'weights', [input_dim, output_dim], initializer=weights_initializer)\n    if bias_term:\n      biases = tf.get_variable(\n          'biases', output_dim, initializer=biases_initializer)\n    if not reuse:\n      tf.add_to_collection(tf.GraphKeys.REGULARIZATION_LOSSES,\n                           tf.nn.l2_loss(weights))\n\n  if bias_term:\n    fc = tf.nn.xw_plus_b(flat_bottom, weights, biases)\n  else:\n    fc = tf.matmul(flat_bottom, weights)\n  return fc\n", "comments": "  copyright 2017 the tensorflow authors all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       flatten bottom input    weights biases variables    initialize variables    weights shape  input dim  output dim  ", "content": "# Copyright 2017 The TensorFlow Authors All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\nimport tensorflow as tf\n\n\ndef fc_layer(name,\n             bottom,\n             output_dim,\n             bias_term=True,\n             weights_initializer=None,\n             biases_initializer=None,\n             reuse=None):\n  # flatten bottom input\n  shape = bottom.get_shape().as_list()\n  input_dim = 1\n  for d in shape[1:]:\n    input_dim *= d\n  flat_bottom = tf.reshape(bottom, [-1, input_dim])\n\n  # weights and biases variables\n  with tf.variable_scope(name, reuse=reuse):\n    # initialize the variables\n    if weights_initializer is None:\n      weights_initializer = tf.contrib.layers.xavier_initializer()\n    if bias_term and biases_initializer is None:\n      biases_initializer = tf.constant_initializer(0.)\n\n    # weights has shape [input_dim, output_dim]\n    weights = tf.get_variable(\n        'weights', [input_dim, output_dim], initializer=weights_initializer)\n    if bias_term:\n      biases = tf.get_variable(\n          'biases', output_dim, initializer=biases_initializer)\n    if not reuse:\n      tf.add_to_collection(tf.GraphKeys.REGULARIZATION_LOSSES,\n                           tf.nn.l2_loss(weights))\n\n  if bias_term:\n    fc = tf.nn.xw_plus_b(flat_bottom, weights, biases)\n  else:\n    fc = tf.matmul(flat_bottom, weights)\n  return fc\n", "description": "Models and examples built with TensorFlow", "file_name": "nn.py", "id": "9bd01d59e8aef3930de71f2535b6533f", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/tensorflow-models/tensorflow-models-086d914/research/qa_kg/util/nn.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:59:19Z", "url": "https://github.com/tensorflow/models", "wiki": true}