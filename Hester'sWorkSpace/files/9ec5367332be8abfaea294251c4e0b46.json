{"author": "getredash", "code": "from __future__ import print_function\nimport os\nimport peewee\nfrom redash.models import db, NotificationDestination, AlertSubscription, Alert, Organization, User\nfrom redash.destinations import get_configuration_schema_for_destination_type\nfrom redash.utils.configuration import ConfigurationContainer\nfrom playhouse.migrate import PostgresqlMigrator, migrate\n\nHIPCHAT_API_TOKEN = os.environ.get('REDASH_HIPCHAT_API_TOKEN', None)\nHIPCHAT_API_URL = os.environ.get('REDASH_HIPCHAT_API_URL', None)\nHIPCHAT_ROOM_ID = os.environ.get('REDASH_HIPCHAT_ROOM_ID', None)\n\nWEBHOOK_ENDPOINT = os.environ.get('REDASH_WEBHOOK_ENDPOINT', None)\nWEBHOOK_USERNAME = os.environ.get('REDASH_WEBHOOK_USERNAME', None)\nWEBHOOK_PASSWORD = os.environ.get('REDASH_WEBHOOK_PASSWORD', None)\n\nif __name__ == '__main__':\n    migrator = PostgresqlMigrator(db.database)\n    with db.database.transaction():\n\n        if not NotificationDestination.table_exists():\n            NotificationDestination.create_table()\n            \n            \n            migrate(\n                migrator.add_column('alert_subscriptions', 'destination_id', AlertSubscription.destination)\n            )\n\n            try:\n                org = Organization.get_by_slug('default')\n                user = User.select().where(User.org==org, peewee.SQL(\"%s = ANY(groups)\", org.admin_group.id)).get()\n            except Exception:\n                print(\"!!! Warning: failed finding default organization or admin user, won't migrate Webhook/HipChat alert subscriptions.\")\n                exit()\n\n            if WEBHOOK_ENDPOINT:\n                \n                schema = get_configuration_schema_for_destination_type('webhook')\n                conf = {'url': WEBHOOK_ENDPOINT}\n                if WEBHOOK_USERNAME:\n                    conf['username'] = WEBHOOK_USERNAME\n                    conf['password'] = WEBHOOK_PASSWORD\n                options = ConfigurationContainer(conf, schema)\n\n                webhook = NotificationDestination.create(\n                    org=org,\n                    user=user,\n                    name=\"Webhook\",\n                    type=\"webhook\",\n                    options=options\n                )\n\n                for alert in Alert.select():\n                    AlertSubscription.create(\n                        user=user,\n                        destination=webhook,\n                        alert=alert\n                    )\n\n            if HIPCHAT_API_TOKEN:\n                \n                schema = get_configuration_schema_for_destination_type('hipchat')\n\n                conf = {}\n\n                if HIPCHAT_API_URL:\n                    conf['url'] = '{url}/room/{room_id}/notification?auth_token={token}'.format(\n                        url=HIPCHAT_API_URL, room_id=HIPCHAT_ROOM_ID, token=HIPCHAT_API_TOKEN)\n                else:\n                    conf['url'] = 'https://hipchat.com/v2/room/{room_id}/notification?auth_token={token}'.format(\n                        room_id=HIPCHAT_ROOM_ID, token=HIPCHAT_API_TOKEN)\n\n                options = ConfigurationContainer(conf, schema)\n\n                hipchat = NotificationDestination.create(\n                    org=org,\n                    user=user,\n                    name=\"HipChat\",\n                    type=\"hipchat\",\n                    options=options\n                )\n\n                for alert in Alert.select():\n                    AlertSubscription.create(\n                        user=user,\n                        destination=hipchat,\n                        alert=alert\n                    )\n\n    db.close_db(None)\n", "comments": "  update alert subscription fields    have existing alerts send webhook already configured    have existing alerts send hipchat already configured ", "content": "from __future__ import print_function\nimport os\nimport peewee\nfrom redash.models import db, NotificationDestination, AlertSubscription, Alert, Organization, User\nfrom redash.destinations import get_configuration_schema_for_destination_type\nfrom redash.utils.configuration import ConfigurationContainer\nfrom playhouse.migrate import PostgresqlMigrator, migrate\n\nHIPCHAT_API_TOKEN = os.environ.get('REDASH_HIPCHAT_API_TOKEN', None)\nHIPCHAT_API_URL = os.environ.get('REDASH_HIPCHAT_API_URL', None)\nHIPCHAT_ROOM_ID = os.environ.get('REDASH_HIPCHAT_ROOM_ID', None)\n\nWEBHOOK_ENDPOINT = os.environ.get('REDASH_WEBHOOK_ENDPOINT', None)\nWEBHOOK_USERNAME = os.environ.get('REDASH_WEBHOOK_USERNAME', None)\nWEBHOOK_PASSWORD = os.environ.get('REDASH_WEBHOOK_PASSWORD', None)\n\nif __name__ == '__main__':\n    migrator = PostgresqlMigrator(db.database)\n    with db.database.transaction():\n\n        if not NotificationDestination.table_exists():\n            NotificationDestination.create_table()\n            \n            # Update alert subscription fields\n            migrate(\n                migrator.add_column('alert_subscriptions', 'destination_id', AlertSubscription.destination)\n            )\n\n            try:\n                org = Organization.get_by_slug('default')\n                user = User.select().where(User.org==org, peewee.SQL(\"%s = ANY(groups)\", org.admin_group.id)).get()\n            except Exception:\n                print(\"!!! Warning: failed finding default organization or admin user, won't migrate Webhook/HipChat alert subscriptions.\")\n                exit()\n\n            if WEBHOOK_ENDPOINT:\n                # Have all existing alerts send to webhook if already configured\n                schema = get_configuration_schema_for_destination_type('webhook')\n                conf = {'url': WEBHOOK_ENDPOINT}\n                if WEBHOOK_USERNAME:\n                    conf['username'] = WEBHOOK_USERNAME\n                    conf['password'] = WEBHOOK_PASSWORD\n                options = ConfigurationContainer(conf, schema)\n\n                webhook = NotificationDestination.create(\n                    org=org,\n                    user=user,\n                    name=\"Webhook\",\n                    type=\"webhook\",\n                    options=options\n                )\n\n                for alert in Alert.select():\n                    AlertSubscription.create(\n                        user=user,\n                        destination=webhook,\n                        alert=alert\n                    )\n\n            if HIPCHAT_API_TOKEN:\n                # Have all existing alerts send to HipChat if already configured\n                schema = get_configuration_schema_for_destination_type('hipchat')\n\n                conf = {}\n\n                if HIPCHAT_API_URL:\n                    conf['url'] = '{url}/room/{room_id}/notification?auth_token={token}'.format(\n                        url=HIPCHAT_API_URL, room_id=HIPCHAT_ROOM_ID, token=HIPCHAT_API_TOKEN)\n                else:\n                    conf['url'] = 'https://hipchat.com/v2/room/{room_id}/notification?auth_token={token}'.format(\n                        room_id=HIPCHAT_ROOM_ID, token=HIPCHAT_API_TOKEN)\n\n                options = ConfigurationContainer(conf, schema)\n\n                hipchat = NotificationDestination.create(\n                    org=org,\n                    user=user,\n                    name=\"HipChat\",\n                    type=\"hipchat\",\n                    options=options\n                )\n\n                for alert in Alert.select():\n                    AlertSubscription.create(\n                        user=user,\n                        destination=hipchat,\n                        alert=alert\n                    )\n\n    db.close_db(None)\n", "description": "Make Your Company Data Driven. Connect to any data source, easily visualize and share your data.", "file_name": "0023_add_notification_destination.py", "id": "9ec5367332be8abfaea294251c4e0b46", "language": "Python", "project_name": "redash", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/getredash-redash/getredash-redash-0410d83/old_migrations/0023_add_notification_destination.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:54:55Z", "url": "https://github.com/getredash/redash", "wiki": false}