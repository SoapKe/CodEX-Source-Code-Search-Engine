{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport base64\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_struct_unpack,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    remove_end,\n    remove_start,\n    sanitized_Request,\n    std_headers,\n)\n\n\ndef _decrypt_url(png):\n    encrypted_data = compat_b64decode(png)\n    text_index = encrypted_data.find(b'tEXt')\n    text_chunk = encrypted_data[text_index - 4:]\n    length = compat_struct_unpack('!I', text_chunk[:4])[0]\n    \n    data = bytearray(text_chunk[8:8 + length])\n    data = [chr(b) for b in data if b != 0]\n    hash_index = data.index('\n    alphabet_data = data[:hash_index]\n    url_data = data[hash_index + 1:]\n    if url_data[0] == 'H' and url_data[3] == '%':\n        \n        url_data = url_data[4:]\n\n    alphabet = []\n    e = 0\n    d = 0\n    for l in alphabet_data:\n        if d == 0:\n            alphabet.append(l)\n            d = e = (e + 1) % 4\n        else:\n            d -= 1\n    url = ''\n    f = 0\n    e = 3\n    b = 1\n    for letter in url_data:\n        if f == 0:\n            l = int(letter) * 10\n            f = 1\n        else:\n            if e == 0:\n                l += int(letter)\n                url += alphabet[l]\n                e = (b + 3) % 4\n                f = 0\n                b += 1\n            else:\n                e -= 1\n\n    return url\n\n\nclass RTVEALaCartaIE(InfoExtractor):\n    IE_NAME = 'rtve.es:alacarta'\n    IE_DESC = 'RTVE a la carta'\n    _VALID_URL = r'https?://(?:www\\.)?rtve\\.es/(m/)?(alacarta/videos|filmoteca)/[^/]+/[^/]+/(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.rtve.es/alacarta/videos/balonmano/o-swiss-cup-masculina-final-espana-suecia/2491869/',\n        'md5': '1d49b7e1ca7a7502c56a4bf1b60f1b43',\n        'info_dict': {\n            'id': '2491869',\n            'ext': 'mp4',\n            'title': 'Balonmano - Swiss Cup masculina. Final: Espa\u00f1a-Suecia',\n            'duration': 5024.566,\n        },\n    }, {\n        'note': 'Live stream',\n        'url': 'http://www.rtve.es/alacarta/videos/television/24h-live/1694255/',\n        'info_dict': {\n            'id': '1694255',\n            'ext': 'flv',\n            'title': 'TODO',\n        },\n        'skip': 'The f4m manifest can\\'t be used yet',\n    }, {\n        'url': 'http://www.rtve.es/alacarta/videos/servir-y-proteger/servir-proteger-capitulo-104/4236788/',\n        'md5': 'e55e162379ad587e9640eda4f7353c0f',\n        'info_dict': {\n            'id': '4236788',\n            'ext': 'mp4',\n            'title': 'Servir y proteger - Cap\u00edtulo 104 ',\n            'duration': 3222.0,\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }, {\n        'url': 'http://www.rtve.es/m/alacarta/videos/cuentame-como-paso/cuentame-como-paso-t16-ultimo-minuto-nuestra-vida-capitulo-276/2969138/?media=tve',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.rtve.es/filmoteca/no-do/not-1-introduccion-primer-noticiario-espanol/1465256/',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        user_agent_b64 = base64.b64encode(std_headers['User-Agent'].encode('utf-8')).decode('utf-8')\n        manager_info = self._download_json(\n            'http://www.rtve.es/odin/loki/' + user_agent_b64,\n            None, 'Fetching manager info')\n        self._manager = manager_info['manager']\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        info = self._download_json(\n            'http://www.rtve.es/api/videos/%s/config/alacarta_videos.json' % video_id,\n            video_id)['page']['items'][0]\n        if info['state'] == 'DESPU':\n            raise ExtractorError('The video is no longer available', expected=True)\n        title = info['title']\n        png_url = 'http://www.rtve.es/ztnr/movil/thumbnail/%s/videos/%s.png' % (self._manager, video_id)\n        png_request = sanitized_Request(png_url)\n        png_request.add_header('Referer', url)\n        png = self._download_webpage(png_request, video_id, 'Downloading url information')\n        video_url = _decrypt_url(png)\n        ext = determine_ext(video_url)\n\n        formats = []\n        if not video_url.endswith('.f4m') and ext != 'm3u8':\n            if '?' not in video_url:\n                video_url = video_url.replace('resources/', 'auth/resources/')\n            video_url = video_url.replace('.net.rtve', '.multimedia.cdn.rtve')\n\n        if ext == 'm3u8':\n            formats.extend(self._extract_m3u8_formats(\n                video_url, video_id, ext='mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls', fatal=False))\n        elif ext == 'f4m':\n            formats.extend(self._extract_f4m_formats(\n                video_url, video_id, f4m_id='hds', fatal=False))\n        else:\n            formats.append({\n                'url': video_url,\n            })\n        self._sort_formats(formats)\n\n        subtitles = None\n        if info.get('sbtFile') is not None:\n            subtitles = self.extract_subtitles(video_id, info['sbtFile'])\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': info.get('image'),\n            'page_url': url,\n            'subtitles': subtitles,\n            'duration': float_or_none(info.get('duration'), scale=1000),\n        }\n\n    def _get_subtitles(self, video_id, sub_file):\n        subs = self._download_json(\n            sub_file + '.json', video_id,\n            'Downloading subtitles info')['page']['items']\n        return dict(\n            (s['lang'], [{'ext': 'vtt', 'url': s['src']}])\n            for s in subs)\n\n\nclass RTVEInfantilIE(InfoExtractor):\n    IE_NAME = 'rtve.es:infantil'\n    IE_DESC = 'RTVE infantil'\n    _VALID_URL = r'https?://(?:www\\.)?rtve\\.es/infantil/serie/(?P<show>[^/]*)/video/(?P<short_title>[^/]*)/(?P<id>[0-9]+)/'\n\n    _TESTS = [{\n        'url': 'http://www.rtve.es/infantil/serie/cleo/video/maneras-vivir/3040283/',\n        'md5': '915319587b33720b8e0357caaa6617e6',\n        'info_dict': {\n            'id': '3040283',\n            'ext': 'mp4',\n            'title': 'Maneras de vivir',\n            'thumbnail': 'http://www.rtve.es/resources/jpg/6/5/1426182947956.JPG',\n            'duration': 357.958,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        info = self._download_json(\n            'http://www.rtve.es/api/videos/%s/config/alacarta_videos.json' % video_id,\n            video_id)['page']['items'][0]\n\n        webpage = self._download_webpage(url, video_id)\n        vidplayer_id = self._search_regex(\n            r' id=\"vidplayer([0-9]+)\"', webpage, 'internal video ID')\n\n        png_url = 'http://www.rtve.es/ztnr/movil/thumbnail/default/videos/%s.png' % vidplayer_id\n        png = self._download_webpage(png_url, video_id, 'Downloading url information')\n        video_url = _decrypt_url(png)\n\n        return {\n            'id': video_id,\n            'ext': 'mp4',\n            'title': info['title'],\n            'url': video_url,\n            'thumbnail': info.get('image'),\n            'duration': float_or_none(info.get('duration'), scale=1000),\n        }\n\n\nclass RTVELiveIE(InfoExtractor):\n    IE_NAME = 'rtve.es:live'\n    IE_DESC = 'RTVE.es live streams'\n    _VALID_URL = r'https?://(?:www\\.)?rtve\\.es/directo/(?P<id>[a-zA-Z0-9-]+)'\n\n    _TESTS = [{\n        'url': 'http://www.rtve.es/directo/la-1/',\n        'info_dict': {\n            'id': 'la-1',\n            'ext': 'mp4',\n            'title': 're:^La 1 [0-9]{4}-[0-9]{2}-[0-9]{2}Z[0-9]{6}$',\n        },\n        'params': {\n            'skip_download': 'live stream',\n        }\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        start_time = time.gmtime()\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        title = remove_end(self._og_search_title(webpage), ' en directo en RTVE.es')\n        title = remove_start(title, 'Estoy viendo ')\n        title += ' ' + time.strftime('%Y-%m-%dZ%H%M%S', start_time)\n\n        vidplayer_id = self._search_regex(\n            (r'playerId=player([0-9]+)',\n             r'class=[\"\\'].*?\\blive_mod\\b.*?[\"\\'][^>]+data-assetid=[\"\\'](\\d+)',\n             r'data-id=[\"\\'](\\d+)'),\n            webpage, 'internal video ID')\n        png_url = 'http://www.rtve.es/ztnr/movil/thumbnail/amonet/videos/%s.png' % vidplayer_id\n        png = self._download_webpage(png_url, video_id, 'Downloading url information')\n        m3u8_url = _decrypt_url(png)\n        formats = self._extract_m3u8_formats(m3u8_url, video_id, ext='mp4')\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'is_live': True,\n        }\n\n\nclass RTVETelevisionIE(InfoExtractor):\n    IE_NAME = 'rtve.es:television'\n    _VALID_URL = r'https?://(?:www\\.)?rtve\\.es/television/[^/]+/[^/]+/(?P<id>\\d+).shtml'\n\n    _TEST = {\n        'url': 'http://www.rtve.es/television/20160628/revolucion-del-movil/1364141.shtml',\n        'info_dict': {\n            'id': '3069778',\n            'ext': 'mp4',\n            'title': 'Documentos TV - La revoluci\u00f3n del m\u00f3vil',\n            'duration': 3496.948,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n        webpage = self._download_webpage(url, page_id)\n\n        alacarta_url = self._search_regex(\n            r'data-location=\"alacarta_videos\"[^<]+url&quot;:&quot;(http://www\\.rtve\\.es/alacarta.+?)&',\n            webpage, 'alacarta url', default=None)\n        if alacarta_url is None:\n            raise ExtractorError(\n                'The webpage doesn\\'t contain any video', expected=True)\n\n        return self.url_result(alacarta_url, ie=RTVEALaCartaIE.ie_key())\n", "comments": "# coding: utf-8\n# Use bytearray to get integers when iterating in both python 2.x and 3.x\n#')\n# remove useless HQ%% at the start\n# requires ffmpeg\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport base64\nimport re\nimport time\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_struct_unpack,\n)\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    float_or_none,\n    remove_end,\n    remove_start,\n    sanitized_Request,\n    std_headers,\n)\n\n\ndef _decrypt_url(png):\n    encrypted_data = compat_b64decode(png)\n    text_index = encrypted_data.find(b'tEXt')\n    text_chunk = encrypted_data[text_index - 4:]\n    length = compat_struct_unpack('!I', text_chunk[:4])[0]\n    # Use bytearray to get integers when iterating in both python 2.x and 3.x\n    data = bytearray(text_chunk[8:8 + length])\n    data = [chr(b) for b in data if b != 0]\n    hash_index = data.index('#')\n    alphabet_data = data[:hash_index]\n    url_data = data[hash_index + 1:]\n    if url_data[0] == 'H' and url_data[3] == '%':\n        # remove useless HQ%% at the start\n        url_data = url_data[4:]\n\n    alphabet = []\n    e = 0\n    d = 0\n    for l in alphabet_data:\n        if d == 0:\n            alphabet.append(l)\n            d = e = (e + 1) % 4\n        else:\n            d -= 1\n    url = ''\n    f = 0\n    e = 3\n    b = 1\n    for letter in url_data:\n        if f == 0:\n            l = int(letter) * 10\n            f = 1\n        else:\n            if e == 0:\n                l += int(letter)\n                url += alphabet[l]\n                e = (b + 3) % 4\n                f = 0\n                b += 1\n            else:\n                e -= 1\n\n    return url\n\n\nclass RTVEALaCartaIE(InfoExtractor):\n    IE_NAME = 'rtve.es:alacarta'\n    IE_DESC = 'RTVE a la carta'\n    _VALID_URL = r'https?://(?:www\\.)?rtve\\.es/(m/)?(alacarta/videos|filmoteca)/[^/]+/[^/]+/(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.rtve.es/alacarta/videos/balonmano/o-swiss-cup-masculina-final-espana-suecia/2491869/',\n        'md5': '1d49b7e1ca7a7502c56a4bf1b60f1b43',\n        'info_dict': {\n            'id': '2491869',\n            'ext': 'mp4',\n            'title': 'Balonmano - Swiss Cup masculina. Final: Espa\u00f1a-Suecia',\n            'duration': 5024.566,\n        },\n    }, {\n        'note': 'Live stream',\n        'url': 'http://www.rtve.es/alacarta/videos/television/24h-live/1694255/',\n        'info_dict': {\n            'id': '1694255',\n            'ext': 'flv',\n            'title': 'TODO',\n        },\n        'skip': 'The f4m manifest can\\'t be used yet',\n    }, {\n        'url': 'http://www.rtve.es/alacarta/videos/servir-y-proteger/servir-proteger-capitulo-104/4236788/',\n        'md5': 'e55e162379ad587e9640eda4f7353c0f',\n        'info_dict': {\n            'id': '4236788',\n            'ext': 'mp4',\n            'title': 'Servir y proteger - Cap\u00edtulo 104 ',\n            'duration': 3222.0,\n        },\n        'params': {\n            'skip_download': True,  # requires ffmpeg\n        },\n    }, {\n        'url': 'http://www.rtve.es/m/alacarta/videos/cuentame-como-paso/cuentame-como-paso-t16-ultimo-minuto-nuestra-vida-capitulo-276/2969138/?media=tve',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.rtve.es/filmoteca/no-do/not-1-introduccion-primer-noticiario-espanol/1465256/',\n        'only_matching': True,\n    }]\n\n    def _real_initialize(self):\n        user_agent_b64 = base64.b64encode(std_headers['User-Agent'].encode('utf-8')).decode('utf-8')\n        manager_info = self._download_json(\n            'http://www.rtve.es/odin/loki/' + user_agent_b64,\n            None, 'Fetching manager info')\n        self._manager = manager_info['manager']\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        info = self._download_json(\n            'http://www.rtve.es/api/videos/%s/config/alacarta_videos.json' % video_id,\n            video_id)['page']['items'][0]\n        if info['state'] == 'DESPU':\n            raise ExtractorError('The video is no longer available', expected=True)\n        title = info['title']\n        png_url = 'http://www.rtve.es/ztnr/movil/thumbnail/%s/videos/%s.png' % (self._manager, video_id)\n        png_request = sanitized_Request(png_url)\n        png_request.add_header('Referer', url)\n        png = self._download_webpage(png_request, video_id, 'Downloading url information')\n        video_url = _decrypt_url(png)\n        ext = determine_ext(video_url)\n\n        formats = []\n        if not video_url.endswith('.f4m') and ext != 'm3u8':\n            if '?' not in video_url:\n                video_url = video_url.replace('resources/', 'auth/resources/')\n            video_url = video_url.replace('.net.rtve', '.multimedia.cdn.rtve')\n\n        if ext == 'm3u8':\n            formats.extend(self._extract_m3u8_formats(\n                video_url, video_id, ext='mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls', fatal=False))\n        elif ext == 'f4m':\n            formats.extend(self._extract_f4m_formats(\n                video_url, video_id, f4m_id='hds', fatal=False))\n        else:\n            formats.append({\n                'url': video_url,\n            })\n        self._sort_formats(formats)\n\n        subtitles = None\n        if info.get('sbtFile') is not None:\n            subtitles = self.extract_subtitles(video_id, info['sbtFile'])\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': info.get('image'),\n            'page_url': url,\n            'subtitles': subtitles,\n            'duration': float_or_none(info.get('duration'), scale=1000),\n        }\n\n    def _get_subtitles(self, video_id, sub_file):\n        subs = self._download_json(\n            sub_file + '.json', video_id,\n            'Downloading subtitles info')['page']['items']\n        return dict(\n            (s['lang'], [{'ext': 'vtt', 'url': s['src']}])\n            for s in subs)\n\n\nclass RTVEInfantilIE(InfoExtractor):\n    IE_NAME = 'rtve.es:infantil'\n    IE_DESC = 'RTVE infantil'\n    _VALID_URL = r'https?://(?:www\\.)?rtve\\.es/infantil/serie/(?P<show>[^/]*)/video/(?P<short_title>[^/]*)/(?P<id>[0-9]+)/'\n\n    _TESTS = [{\n        'url': 'http://www.rtve.es/infantil/serie/cleo/video/maneras-vivir/3040283/',\n        'md5': '915319587b33720b8e0357caaa6617e6',\n        'info_dict': {\n            'id': '3040283',\n            'ext': 'mp4',\n            'title': 'Maneras de vivir',\n            'thumbnail': 'http://www.rtve.es/resources/jpg/6/5/1426182947956.JPG',\n            'duration': 357.958,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        info = self._download_json(\n            'http://www.rtve.es/api/videos/%s/config/alacarta_videos.json' % video_id,\n            video_id)['page']['items'][0]\n\n        webpage = self._download_webpage(url, video_id)\n        vidplayer_id = self._search_regex(\n            r' id=\"vidplayer([0-9]+)\"', webpage, 'internal video ID')\n\n        png_url = 'http://www.rtve.es/ztnr/movil/thumbnail/default/videos/%s.png' % vidplayer_id\n        png = self._download_webpage(png_url, video_id, 'Downloading url information')\n        video_url = _decrypt_url(png)\n\n        return {\n            'id': video_id,\n            'ext': 'mp4',\n            'title': info['title'],\n            'url': video_url,\n            'thumbnail': info.get('image'),\n            'duration': float_or_none(info.get('duration'), scale=1000),\n        }\n\n\nclass RTVELiveIE(InfoExtractor):\n    IE_NAME = 'rtve.es:live'\n    IE_DESC = 'RTVE.es live streams'\n    _VALID_URL = r'https?://(?:www\\.)?rtve\\.es/directo/(?P<id>[a-zA-Z0-9-]+)'\n\n    _TESTS = [{\n        'url': 'http://www.rtve.es/directo/la-1/',\n        'info_dict': {\n            'id': 'la-1',\n            'ext': 'mp4',\n            'title': 're:^La 1 [0-9]{4}-[0-9]{2}-[0-9]{2}Z[0-9]{6}$',\n        },\n        'params': {\n            'skip_download': 'live stream',\n        }\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        start_time = time.gmtime()\n        video_id = mobj.group('id')\n\n        webpage = self._download_webpage(url, video_id)\n        title = remove_end(self._og_search_title(webpage), ' en directo en RTVE.es')\n        title = remove_start(title, 'Estoy viendo ')\n        title += ' ' + time.strftime('%Y-%m-%dZ%H%M%S', start_time)\n\n        vidplayer_id = self._search_regex(\n            (r'playerId=player([0-9]+)',\n             r'class=[\"\\'].*?\\blive_mod\\b.*?[\"\\'][^>]+data-assetid=[\"\\'](\\d+)',\n             r'data-id=[\"\\'](\\d+)'),\n            webpage, 'internal video ID')\n        png_url = 'http://www.rtve.es/ztnr/movil/thumbnail/amonet/videos/%s.png' % vidplayer_id\n        png = self._download_webpage(png_url, video_id, 'Downloading url information')\n        m3u8_url = _decrypt_url(png)\n        formats = self._extract_m3u8_formats(m3u8_url, video_id, ext='mp4')\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'is_live': True,\n        }\n\n\nclass RTVETelevisionIE(InfoExtractor):\n    IE_NAME = 'rtve.es:television'\n    _VALID_URL = r'https?://(?:www\\.)?rtve\\.es/television/[^/]+/[^/]+/(?P<id>\\d+).shtml'\n\n    _TEST = {\n        'url': 'http://www.rtve.es/television/20160628/revolucion-del-movil/1364141.shtml',\n        'info_dict': {\n            'id': '3069778',\n            'ext': 'mp4',\n            'title': 'Documentos TV - La revoluci\u00f3n del m\u00f3vil',\n            'duration': 3496.948,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }\n\n    def _real_extract(self, url):\n        page_id = self._match_id(url)\n        webpage = self._download_webpage(url, page_id)\n\n        alacarta_url = self._search_regex(\n            r'data-location=\"alacarta_videos\"[^<]+url&quot;:&quot;(http://www\\.rtve\\.es/alacarta.+?)&',\n            webpage, 'alacarta url', default=None)\n        if alacarta_url is None:\n            raise ExtractorError(\n                'The webpage doesn\\'t contain any video', expected=True)\n\n        return self.url_result(alacarta_url, ie=RTVEALaCartaIE.ie_key())\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "rtve.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/rtve.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}