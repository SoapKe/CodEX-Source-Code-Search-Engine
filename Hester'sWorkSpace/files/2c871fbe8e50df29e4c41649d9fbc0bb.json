{"author": "HelloZeroNet", "code": "\nimport os\nimport sys\nimport stat\nimport time\nimport logging\n\n\nimport gevent\n\nfrom gevent import monkey\nif \"patch_subprocess\" in dir(monkey):  \n    monkey.patch_all(thread=False, subprocess=False)\nelse:  \n    import ssl\n    \n    if \"PROTOCOL_SSLv3\" not in dir(ssl):\n        ssl.PROTOCOL_SSLv3 = ssl.PROTOCOL_SSLv23\n    monkey.patch_all(thread=False)\n+\n\nupdate_after_shutdown = False  \n\n\nfrom Config import config\nconfig.parse(silent=True)  \nif not config.arguments:  \n    config.parse()\n\n\nif not os.path.isdir(config.log_dir):\n    os.mkdir(config.log_dir)\n    try:\n        os.chmod(config.log_dir, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)\n    except Exception as err:\n        print \"Can't change permission of %s: %s\" % (config.log_dir, err)\n\nif not os.path.isdir(config.data_dir):\n    os.mkdir(config.data_dir)\n    try:\n        os.chmod(config.data_dir, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)\n    except Exception as err:\n        print \"Can't change permission of %s: %s\" % (config.data_dir, err)\n\nif not os.path.isfile(\"%s/sites.json\" % config.data_dir):\n    open(\"%s/sites.json\" % config.data_dir, \"w\").write(\"{}\")\nif not os.path.isfile(\"%s/users.json\" % config.data_dir):\n    open(\"%s/users.json\" % config.data_dir, \"w\").write(\"{}\")\n\n\nlogging.WARNING = 15  \nlogging.addLevelName(15, \"WARNING\")\nif config.action == \"main\":\n    from util import helper\n    log_file_path = \"%s/debug.log\" % config.log_dir\n    try:\n        lock = helper.openLocked(\"%s/lock.pid\" % config.data_dir, \"w\")\n        lock.write(\"%s\" % os.getpid())\n    except IOError as err:\n        print \"Can't open lock file, your ZeroNet client is probably already running, exiting... (%s)\" % err\n        if config.open_browser:\n            print \"Opening browser: %s...\", config.open_browser\n            import webbrowser\n            if config.open_browser == \"default_browser\":\n                browser = webbrowser.get()\n            else:\n                browser = webbrowser.get(config.open_browser)\n            browser.open(\"http://%s:%s/%s\" % (config.ui_ip if config.ui_ip != \"*\" else \"127.0.0.1\", config.ui_port, config.homepage), new=2)\n        sys.exit()\n\n    if os.path.isfile(\"%s/debug.log\" % config.log_dir):  \n        if os.path.isfile(\"%s/debug-last.log\" % config.log_dir):\n            os.unlink(\"%s/debug-last.log\" % config.log_dir)\n        os.rename(\"%s/debug.log\" % config.log_dir, \"%s/debug-last.log\" % config.log_dir)\n    logging.basicConfig(\n        format='[%(asctime)s] %(levelname)-8s %(name)s %(message)s',\n        level=logging.getLevelName(config.log_level), stream=open(log_file_path, \"a\")\n    )\nelse:\n    log_file_path = \"%s/cmd.log\" % config.log_dir\n    if config.silent:\n        level = logging.ERROR\n    else:\n        level = logging.DEBUG\n    logging.basicConfig(\n        format='[%(asctime)s] %(levelname)-8s %(name)s %(message)s',\n        level=level, stream=open(log_file_path, \"w\")\n    )\n\n\nconsole_log = logging.StreamHandler()\nif config.action == \"main\":  \n    console_log.setFormatter(logging.Formatter('[%(asctime)s] %(name)s %(message)s', \"%H:%M:%S\"))\nelse:\n    console_log.setFormatter(logging.Formatter('%(name)s %(message)s', \"%H:%M:%S\"))\n\nlogging.getLogger('').addHandler(console_log)  \nlogging.getLogger('').name = \"-\"  \n\n\nfrom Debug import DebugHook\nif config.debug:\n    console_log.setLevel(logging.DEBUG)  \nelse:\n    console_log.setLevel(logging.INFO)  \n\n\nfrom Plugin import PluginManager\nPluginManager.plugin_manager.loadPlugins()\nconfig.loadPlugins()\nconfig.parse()  \n\n\nlogging.debug(\"Config: %s\" % config)\n\n\nif config.stack_size:\n    import threading\n    threading.stack_size(config.stack_size)\n\n\nif config.msgpack_purepython:\n    os.environ[\"MSGPACK_PUREPYTHON\"] = \"True\"\n\n\nif config.proxy:\n    from util import SocksProxy\n    import urllib2\n    logging.info(\"Patching sockets to socks proxy: %s\" % config.proxy)\n    if config.fileserver_ip == \"*\":\n        config.fileserver_ip = '127.0.0.1'  \n    SocksProxy.monkeyPatch(*config.proxy.split(\":\"))\nelif config.tor == \"always\":\n    from util import SocksProxy\n    import urllib2\n    logging.info(\"Patching sockets to tor socks proxy: %s\" % config.tor_proxy)\n    if config.fileserver_ip == \"*\":\n        config.fileserver_ip = '127.0.0.1'  \n    SocksProxy.monkeyPatch(*config.tor_proxy.split(\":\"))\n    config.disable_udp = True\nelif config.bind:\n    bind = config.bind\n    if \":\" not in config.bind:\n        bind += \":0\"\n    from util import helper\n    helper.socketBindMonkeyPatch(*bind.split(\":\"))\n\n\n\n\n@PluginManager.acceptPlugins\nclass Actions(object):\n    def call(self, function_name, kwargs):\n        logging.info(\"Version: %s r%s, Python %s, Gevent: %s\" % (config.version, config.rev, sys.version, gevent.__version__))\n\n        func = getattr(self, function_name, None)\n        func(**kwargs)\n\n    \n    def main(self):\n        global ui_server, file_server\n        from File import FileServer\n        from Ui import UiServer\n        logging.info(\"Creating FileServer....\")\n        file_server = FileServer()\n        logging.info(\"Creating UiServer....\")\n        ui_server = UiServer()\n        file_server.ui_server = ui_server\n\n        logging.info(\"Removing old SSL certs...\")\n        from Crypt import CryptConnection\n        CryptConnection.manager.removeCerts()\n\n        logging.info(\"Starting servers....\")\n        gevent.joinall([gevent.spawn(ui_server.start), gevent.spawn(file_server.start)])\n\n    \n\n    def siteCreate(self):\n        logging.info(\"Generating new privatekey...\")\n        from Crypt import CryptBitcoin\n        privatekey = CryptBitcoin.newPrivatekey()\n        logging.info(\"----------------------------------------------------------------------\")\n        logging.info(\"Site private key: %s\" % privatekey)\n        logging.info(\"                  !!! ^ Save it now, required to modify the site ^ !!!\")\n        address = CryptBitcoin.privatekeyToAddress(privatekey)\n        logging.info(\"Site address:     %s\" % address)\n        logging.info(\"----------------------------------------------------------------------\")\n\n        while True and not config.batch:\n            if raw_input(\"? Have you secured your private key? (yes, no) > \").lower() == \"yes\":\n                break\n            else:\n                logging.info(\"Please, secure it now, you going to need it to modify your site!\")\n\n        logging.info(\"Creating directory structure...\")\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        os.mkdir(\"%s/%s\" % (config.data_dir, address))\n        open(\"%s/%s/index.html\" % (config.data_dir, address), \"w\").write(\"Hello %s!\" % address)\n\n        logging.info(\"Creating content.json...\")\n        site = Site(address)\n        site.content_manager.sign(privatekey=privatekey, extend={\"postmessage_nonce_security\": True})\n        site.settings[\"own\"] = True\n        site.saveSettings()\n\n        logging.info(\"Site created!\")\n\n    def siteSign(self, address, privatekey=None, inner_path=\"content.json\", publish=False, remove_missing_optional=False):\n        from Site import Site\n        from Site import SiteManager\n        from Debug import Debug\n        SiteManager.site_manager.load()\n        logging.info(\"Signing site: %s...\" % address)\n        site = Site(address, allow_create=False)\n\n        if not privatekey:  \n            from User import UserManager\n            user = UserManager.user_manager.get()\n            if user:\n                site_data = user.getSiteData(address)\n                privatekey = site_data.get(\"privatekey\")\n            else:\n                privatekey = None\n            if not privatekey:\n                \n                import getpass\n                privatekey = getpass.getpass(\"Private key (input hidden):\")\n        diffs = site.content_manager.getDiffs(inner_path)\n        try:\n            succ = site.content_manager.sign(inner_path=inner_path, privatekey=privatekey, update_changed_files=True, remove_missing_optional=remove_missing_optional)\n        except Exception, err:\n            logging.error(\"Sign error: %s\" % Debug.formatException(err))\n            succ = False\n        if succ and publish:\n            self.sitePublish(address, inner_path=inner_path, diffs=diffs)\n\n    def siteVerify(self, address):\n        import time\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        s = time.time()\n        logging.info(\"Verifing site: %s...\" % address)\n        site = Site(address)\n        bad_files = []\n\n        for content_inner_path in site.content_manager.contents:\n            s = time.time()\n            logging.info(\"Verifing %s signature...\" % content_inner_path)\n            try:\n                file_correct = site.content_manager.verifyFile(\n                    content_inner_path, site.storage.open(content_inner_path, \"rb\"), ignore_same=False\n                )\n            except Exception, err:\n                file_correct = False\n\n            if file_correct is True:\n                logging.info(\"[OK] %s (Done in %.3fs)\" % (content_inner_path, time.time() - s))\n            else:\n                logging.error(\"[ERROR] %s: invalid file: %s!\" % (content_inner_path, err))\n                raw_input(\"Continue?\")\n                bad_files += content_inner_path\n\n        logging.info(\"Verifying site files...\")\n        bad_files += site.storage.verifyFiles()\n        if not bad_files:\n            logging.info(\"[OK] All file sha512sum matches! (%.3fs)\" % (time.time() - s))\n        else:\n            logging.error(\"[ERROR] Error during verifying site files!\")\n\n    def dbRebuild(self, address):\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        logging.info(\"Rebuilding site sql cache: %s...\" % address)\n        site = SiteManager.site_manager.get(address)\n        s = time.time()\n        site.storage.rebuildDb()\n        logging.info(\"Done in %.3fs\" % (time.time() - s))\n\n    def dbQuery(self, address, query):\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        import json\n        site = Site(address)\n        result = []\n        for row in site.storage.query(query):\n            result.append(dict(row))\n        print json.dumps(result, indent=4)\n\n    def siteAnnounce(self, address):\n        from Site.Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from File import FileServer\n        file_server = FileServer(\"127.0.0.1\", 1234)\n\n        logging.info(\"Announcing site %s to tracker...\" % address)\n        site = Site(address)\n\n        s = time.time()\n        site.announce()\n        print \"Response time: %.3fs\" % (time.time() - s)\n        print site.peers\n\n    def siteDownload(self, address):\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from File import FileServer\n        file_server = FileServer(\"127.0.0.1\", 1234)\n\n        site = Site(address)\n\n        on_completed = gevent.event.AsyncResult()\n\n        def onComplete(evt):\n            evt.set(True)\n\n        site.onComplete.once(lambda: onComplete(on_completed))\n        print \"Announcing...\"\n        site.announce()\n\n        s = time.time()\n        print \"Downloading...\"\n        site.downloadContent(\"content.json\", check_modifications=True)\n\n        print on_completed.get()\n        print \"Downloaded in %.3fs\" % (time.time()-s)\n\n\n    def siteNeedFile(self, address, inner_path):\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        def checker():\n            while 1:\n                s = time.time()\n                time.sleep(1)\n                print \"Switch time:\", time.time() - s\n        gevent.spawn(checker)\n\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from File import FileServer\n        file_server = FileServer(\"127.0.0.1\", 1234)\n\n        site = Site(address)\n        site.announce()\n        print site.needFile(inner_path, update=True)\n\n    def sitePublish(self, address, peer_ip=None, peer_port=15441, inner_path=\"content.json\", diffs={}):\n        global file_server\n        from Site import Site\n        from Site import SiteManager\n        from File import FileServer  \n        from Peer import Peer\n        SiteManager.site_manager.load()\n\n        logging.info(\"Loading site...\")\n        site = Site(address, allow_create=False)\n        site.settings[\"serving\"] = True  \n\n        logging.info(\"Creating FileServer....\")\n        file_server = FileServer()\n        site.connection_server = file_server\n        file_server_thread = gevent.spawn(file_server.start, check_sites=False)  \n        time.sleep(0.001)\n\n        if not file_server_thread.ready():\n            \n            file_server.openport()\n            if peer_ip:  \n                site.addPeer(peer_ip, peer_port)\n            else:  \n                logging.info(\"Gathering peers from tracker\")\n                site.announce()  \n            published = site.publish(5, inner_path, diffs=diffs)  \n            if published > 0:\n                time.sleep(3)\n                logging.info(\"Serving files (max 60s)...\")\n                gevent.joinall([file_server_thread], timeout=60)\n                logging.info(\"Done.\")\n            else:\n                logging.info(\"No peers found, sitePublish command only works if you already have visitors serving your site\")\n        else:\n            \n            logging.info(\"Sending siteReload\")\n            if config.fileserver_ip == \"*\":\n                my_peer = Peer(\"127.0.0.1\", config.fileserver_port)\n            else:\n                my_peer = Peer(config.fileserver_ip, config.fileserver_port)\n\n            logging.info(my_peer.request(\"siteReload\", {\"site\": site.address, \"inner_path\": inner_path}))\n            logging.info(\"Sending sitePublish\")\n            logging.info(my_peer.request(\"sitePublish\", {\"site\": site.address, \"inner_path\": inner_path, \"diffs\": diffs}))\n            logging.info(\"Done.\")\n\n    \n    def cryptPrivatekeyToAddress(self, privatekey=None):\n        from Crypt import CryptBitcoin\n        if not privatekey:  \n            import getpass\n            privatekey = getpass.getpass(\"Private key (input hidden):\")\n\n        print CryptBitcoin.privatekeyToAddress(privatekey)\n\n    def cryptSign(self, message, privatekey):\n        from Crypt import CryptBitcoin\n        print CryptBitcoin.sign(message, privatekey)\n\n    def cryptVerify(self, message, sign, address):\n        from Crypt import CryptBitcoin\n        print CryptBitcoin.verify(message, address, sign)\n\n    \n    def peerPing(self, peer_ip, peer_port=None):\n        if not peer_port:\n            peer_port = config.fileserver_port\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from Connection import ConnectionServer\n        file_server = ConnectionServer(\"127.0.0.1\", 1234)\n        from Crypt import CryptConnection\n        CryptConnection.manager.loadCerts()\n\n        from Peer import Peer\n        logging.info(\"Pinging 5 times peer: %s:%s...\" % (peer_ip, int(peer_port)))\n        peer = Peer(peer_ip, peer_port)\n        for i in range(5):\n            print \"Response time: %.3fs (crypt: %s)\" % (peer.ping(), peer.connection.crypt)\n            time.sleep(1)\n        peer.remove()\n        print \"Reconnect test...\"\n        peer = Peer(peer_ip, peer_port)\n        for i in range(5):\n            print \"Response time: %.3fs (crypt: %s)\" % (peer.ping(), peer.connection.crypt)\n            time.sleep(1)\n\n    def peerGetFile(self, peer_ip, peer_port, site, filename, benchmark=False):\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from Connection import ConnectionServer\n        file_server = ConnectionServer(\"127.0.0.1\", 1234)\n        from Crypt import CryptConnection\n        CryptConnection.manager.loadCerts()\n\n        from Peer import Peer\n        logging.info(\"Getting %s/%s from peer: %s:%s...\" % (site, filename, peer_ip, peer_port))\n        peer = Peer(peer_ip, peer_port)\n        s = time.time()\n        if benchmark:\n            for i in range(10):\n                peer.getFile(site, filename),\n            print \"Response time: %.3fs\" % (time.time() - s)\n            raw_input(\"Check memory\")\n        else:\n            print peer.getFile(site, filename).read()\n\n    def peerCmd(self, peer_ip, peer_port, cmd, parameters):\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from Connection import ConnectionServer\n        file_server = ConnectionServer()\n        from Crypt import CryptConnection\n        CryptConnection.manager.loadCerts()\n\n        from Peer import Peer\n        peer = Peer(peer_ip, peer_port)\n\n        import json\n        if parameters:\n            parameters = json.loads(parameters.replace(\"'\", '\"'))\n        else:\n            parameters = {}\n        try:\n            res = peer.request(cmd, parameters)\n            print json.dumps(res, indent=2, ensure_ascii=False)\n        except Exception, err:\n            print \"Unknown response (%s): %s\" % (err, res)\n\n    def getConfig(self):\n        import json\n        print json.dumps(config.getServerInfo(), indent=2, ensure_ascii=False)\n\n\nactions = Actions()\n\n\n\ndef start():\n    \n    action_kwargs = config.getActionArguments()\n    actions.call(config.action, action_kwargs)\n", "comments": "  included modules    third party modules    new gevent    old gevent    fix protocol sslv3 defined    not thread  pyfilesystem systray icon  not subprocess  gevent 1 1     if set true update restart zeronet main loop ended    load config    plugins need access configuration    config parse failed  show help screen exit    create necessary files dirs    setup logging    don display warnings debug mode    simple logrotate    console logger    add time main action    add console logger    remove root prefix    debug dependent configuration    display everything console    display important info console    load plugins    parse add plugin configuration options    log current config    modify stack size special hardwares    use pure python implementation msgpack save cpu    socket monkey patch    do accept connections anywhere localhost    do accept connections anywhere localhost       actions       default action  start serving uiserver fileserver    site commands    if privatekey defined    not found users json  ask console    we need fileserver handle incoming file requests    serving site even disabled    dont check every site integrity    started fileserver    announce ip specificed    just ask tracker    gather peers    push peers    already running  notify local client new content    crypto commands    if privatekey args ask    peer    starts running zeronet py    call function ", "content": "# Included modules\nimport os\nimport sys\nimport stat\nimport time\nimport logging\n\n# Third party modules\nimport gevent\n\nfrom gevent import monkey\nif \"patch_subprocess\" in dir(monkey):  # New gevent\n    monkey.patch_all(thread=False, subprocess=False)\nelse:  # Old gevent\n    import ssl\n    # Fix PROTOCOL_SSLv3 not defined\n    if \"PROTOCOL_SSLv3\" not in dir(ssl):\n        ssl.PROTOCOL_SSLv3 = ssl.PROTOCOL_SSLv23\n    monkey.patch_all(thread=False)\n# Not thread: pyfilesystem and systray icon, Not subprocess: Gevent 1.1+\n\nupdate_after_shutdown = False  # If set True then update and restart zeronet after main loop ended\n\n# Load config\nfrom Config import config\nconfig.parse(silent=True)  # Plugins need to access the configuration\nif not config.arguments:  # Config parse failed, show the help screen and exit\n    config.parse()\n\n# Create necessary files and dirs\nif not os.path.isdir(config.log_dir):\n    os.mkdir(config.log_dir)\n    try:\n        os.chmod(config.log_dir, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)\n    except Exception as err:\n        print \"Can't change permission of %s: %s\" % (config.log_dir, err)\n\nif not os.path.isdir(config.data_dir):\n    os.mkdir(config.data_dir)\n    try:\n        os.chmod(config.data_dir, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)\n    except Exception as err:\n        print \"Can't change permission of %s: %s\" % (config.data_dir, err)\n\nif not os.path.isfile(\"%s/sites.json\" % config.data_dir):\n    open(\"%s/sites.json\" % config.data_dir, \"w\").write(\"{}\")\nif not os.path.isfile(\"%s/users.json\" % config.data_dir):\n    open(\"%s/users.json\" % config.data_dir, \"w\").write(\"{}\")\n\n# Setup logging\nlogging.WARNING = 15  # Don't display warnings if not in debug mode\nlogging.addLevelName(15, \"WARNING\")\nif config.action == \"main\":\n    from util import helper\n    log_file_path = \"%s/debug.log\" % config.log_dir\n    try:\n        lock = helper.openLocked(\"%s/lock.pid\" % config.data_dir, \"w\")\n        lock.write(\"%s\" % os.getpid())\n    except IOError as err:\n        print \"Can't open lock file, your ZeroNet client is probably already running, exiting... (%s)\" % err\n        if config.open_browser:\n            print \"Opening browser: %s...\", config.open_browser\n            import webbrowser\n            if config.open_browser == \"default_browser\":\n                browser = webbrowser.get()\n            else:\n                browser = webbrowser.get(config.open_browser)\n            browser.open(\"http://%s:%s/%s\" % (config.ui_ip if config.ui_ip != \"*\" else \"127.0.0.1\", config.ui_port, config.homepage), new=2)\n        sys.exit()\n\n    if os.path.isfile(\"%s/debug.log\" % config.log_dir):  # Simple logrotate\n        if os.path.isfile(\"%s/debug-last.log\" % config.log_dir):\n            os.unlink(\"%s/debug-last.log\" % config.log_dir)\n        os.rename(\"%s/debug.log\" % config.log_dir, \"%s/debug-last.log\" % config.log_dir)\n    logging.basicConfig(\n        format='[%(asctime)s] %(levelname)-8s %(name)s %(message)s',\n        level=logging.getLevelName(config.log_level), stream=open(log_file_path, \"a\")\n    )\nelse:\n    log_file_path = \"%s/cmd.log\" % config.log_dir\n    if config.silent:\n        level = logging.ERROR\n    else:\n        level = logging.DEBUG\n    logging.basicConfig(\n        format='[%(asctime)s] %(levelname)-8s %(name)s %(message)s',\n        level=level, stream=open(log_file_path, \"w\")\n    )\n\n# Console logger\nconsole_log = logging.StreamHandler()\nif config.action == \"main\":  # Add time if main action\n    console_log.setFormatter(logging.Formatter('[%(asctime)s] %(name)s %(message)s', \"%H:%M:%S\"))\nelse:\n    console_log.setFormatter(logging.Formatter('%(name)s %(message)s', \"%H:%M:%S\"))\n\nlogging.getLogger('').addHandler(console_log)  # Add console logger\nlogging.getLogger('').name = \"-\"  # Remove root prefix\n\n# Debug dependent configuration\nfrom Debug import DebugHook\nif config.debug:\n    console_log.setLevel(logging.DEBUG)  # Display everything to console\nelse:\n    console_log.setLevel(logging.INFO)  # Display only important info to console\n\n# Load plugins\nfrom Plugin import PluginManager\nPluginManager.plugin_manager.loadPlugins()\nconfig.loadPlugins()\nconfig.parse()  # Parse again to add plugin configuration options\n\n# Log current config\nlogging.debug(\"Config: %s\" % config)\n\n# Modify stack size on special hardwares\nif config.stack_size:\n    import threading\n    threading.stack_size(config.stack_size)\n\n# Use pure-python implementation of msgpack to save CPU\nif config.msgpack_purepython:\n    os.environ[\"MSGPACK_PUREPYTHON\"] = \"True\"\n\n# Socket monkey patch\nif config.proxy:\n    from util import SocksProxy\n    import urllib2\n    logging.info(\"Patching sockets to socks proxy: %s\" % config.proxy)\n    if config.fileserver_ip == \"*\":\n        config.fileserver_ip = '127.0.0.1'  # Do not accept connections anywhere but localhost\n    SocksProxy.monkeyPatch(*config.proxy.split(\":\"))\nelif config.tor == \"always\":\n    from util import SocksProxy\n    import urllib2\n    logging.info(\"Patching sockets to tor socks proxy: %s\" % config.tor_proxy)\n    if config.fileserver_ip == \"*\":\n        config.fileserver_ip = '127.0.0.1'  # Do not accept connections anywhere but localhost\n    SocksProxy.monkeyPatch(*config.tor_proxy.split(\":\"))\n    config.disable_udp = True\nelif config.bind:\n    bind = config.bind\n    if \":\" not in config.bind:\n        bind += \":0\"\n    from util import helper\n    helper.socketBindMonkeyPatch(*bind.split(\":\"))\n\n# -- Actions --\n\n\n@PluginManager.acceptPlugins\nclass Actions(object):\n    def call(self, function_name, kwargs):\n        logging.info(\"Version: %s r%s, Python %s, Gevent: %s\" % (config.version, config.rev, sys.version, gevent.__version__))\n\n        func = getattr(self, function_name, None)\n        func(**kwargs)\n\n    # Default action: Start serving UiServer and FileServer\n    def main(self):\n        global ui_server, file_server\n        from File import FileServer\n        from Ui import UiServer\n        logging.info(\"Creating FileServer....\")\n        file_server = FileServer()\n        logging.info(\"Creating UiServer....\")\n        ui_server = UiServer()\n        file_server.ui_server = ui_server\n\n        logging.info(\"Removing old SSL certs...\")\n        from Crypt import CryptConnection\n        CryptConnection.manager.removeCerts()\n\n        logging.info(\"Starting servers....\")\n        gevent.joinall([gevent.spawn(ui_server.start), gevent.spawn(file_server.start)])\n\n    # Site commands\n\n    def siteCreate(self):\n        logging.info(\"Generating new privatekey...\")\n        from Crypt import CryptBitcoin\n        privatekey = CryptBitcoin.newPrivatekey()\n        logging.info(\"----------------------------------------------------------------------\")\n        logging.info(\"Site private key: %s\" % privatekey)\n        logging.info(\"                  !!! ^ Save it now, required to modify the site ^ !!!\")\n        address = CryptBitcoin.privatekeyToAddress(privatekey)\n        logging.info(\"Site address:     %s\" % address)\n        logging.info(\"----------------------------------------------------------------------\")\n\n        while True and not config.batch:\n            if raw_input(\"? Have you secured your private key? (yes, no) > \").lower() == \"yes\":\n                break\n            else:\n                logging.info(\"Please, secure it now, you going to need it to modify your site!\")\n\n        logging.info(\"Creating directory structure...\")\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        os.mkdir(\"%s/%s\" % (config.data_dir, address))\n        open(\"%s/%s/index.html\" % (config.data_dir, address), \"w\").write(\"Hello %s!\" % address)\n\n        logging.info(\"Creating content.json...\")\n        site = Site(address)\n        site.content_manager.sign(privatekey=privatekey, extend={\"postmessage_nonce_security\": True})\n        site.settings[\"own\"] = True\n        site.saveSettings()\n\n        logging.info(\"Site created!\")\n\n    def siteSign(self, address, privatekey=None, inner_path=\"content.json\", publish=False, remove_missing_optional=False):\n        from Site import Site\n        from Site import SiteManager\n        from Debug import Debug\n        SiteManager.site_manager.load()\n        logging.info(\"Signing site: %s...\" % address)\n        site = Site(address, allow_create=False)\n\n        if not privatekey:  # If no privatekey defined\n            from User import UserManager\n            user = UserManager.user_manager.get()\n            if user:\n                site_data = user.getSiteData(address)\n                privatekey = site_data.get(\"privatekey\")\n            else:\n                privatekey = None\n            if not privatekey:\n                # Not found in users.json, ask from console\n                import getpass\n                privatekey = getpass.getpass(\"Private key (input hidden):\")\n        diffs = site.content_manager.getDiffs(inner_path)\n        try:\n            succ = site.content_manager.sign(inner_path=inner_path, privatekey=privatekey, update_changed_files=True, remove_missing_optional=remove_missing_optional)\n        except Exception, err:\n            logging.error(\"Sign error: %s\" % Debug.formatException(err))\n            succ = False\n        if succ and publish:\n            self.sitePublish(address, inner_path=inner_path, diffs=diffs)\n\n    def siteVerify(self, address):\n        import time\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        s = time.time()\n        logging.info(\"Verifing site: %s...\" % address)\n        site = Site(address)\n        bad_files = []\n\n        for content_inner_path in site.content_manager.contents:\n            s = time.time()\n            logging.info(\"Verifing %s signature...\" % content_inner_path)\n            try:\n                file_correct = site.content_manager.verifyFile(\n                    content_inner_path, site.storage.open(content_inner_path, \"rb\"), ignore_same=False\n                )\n            except Exception, err:\n                file_correct = False\n\n            if file_correct is True:\n                logging.info(\"[OK] %s (Done in %.3fs)\" % (content_inner_path, time.time() - s))\n            else:\n                logging.error(\"[ERROR] %s: invalid file: %s!\" % (content_inner_path, err))\n                raw_input(\"Continue?\")\n                bad_files += content_inner_path\n\n        logging.info(\"Verifying site files...\")\n        bad_files += site.storage.verifyFiles()\n        if not bad_files:\n            logging.info(\"[OK] All file sha512sum matches! (%.3fs)\" % (time.time() - s))\n        else:\n            logging.error(\"[ERROR] Error during verifying site files!\")\n\n    def dbRebuild(self, address):\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        logging.info(\"Rebuilding site sql cache: %s...\" % address)\n        site = SiteManager.site_manager.get(address)\n        s = time.time()\n        site.storage.rebuildDb()\n        logging.info(\"Done in %.3fs\" % (time.time() - s))\n\n    def dbQuery(self, address, query):\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        import json\n        site = Site(address)\n        result = []\n        for row in site.storage.query(query):\n            result.append(dict(row))\n        print json.dumps(result, indent=4)\n\n    def siteAnnounce(self, address):\n        from Site.Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from File import FileServer\n        file_server = FileServer(\"127.0.0.1\", 1234)\n\n        logging.info(\"Announcing site %s to tracker...\" % address)\n        site = Site(address)\n\n        s = time.time()\n        site.announce()\n        print \"Response time: %.3fs\" % (time.time() - s)\n        print site.peers\n\n    def siteDownload(self, address):\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from File import FileServer\n        file_server = FileServer(\"127.0.0.1\", 1234)\n\n        site = Site(address)\n\n        on_completed = gevent.event.AsyncResult()\n\n        def onComplete(evt):\n            evt.set(True)\n\n        site.onComplete.once(lambda: onComplete(on_completed))\n        print \"Announcing...\"\n        site.announce()\n\n        s = time.time()\n        print \"Downloading...\"\n        site.downloadContent(\"content.json\", check_modifications=True)\n\n        print on_completed.get()\n        print \"Downloaded in %.3fs\" % (time.time()-s)\n\n\n    def siteNeedFile(self, address, inner_path):\n        from Site import Site\n        from Site import SiteManager\n        SiteManager.site_manager.load()\n\n        def checker():\n            while 1:\n                s = time.time()\n                time.sleep(1)\n                print \"Switch time:\", time.time() - s\n        gevent.spawn(checker)\n\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from File import FileServer\n        file_server = FileServer(\"127.0.0.1\", 1234)\n\n        site = Site(address)\n        site.announce()\n        print site.needFile(inner_path, update=True)\n\n    def sitePublish(self, address, peer_ip=None, peer_port=15441, inner_path=\"content.json\", diffs={}):\n        global file_server\n        from Site import Site\n        from Site import SiteManager\n        from File import FileServer  # We need fileserver to handle incoming file requests\n        from Peer import Peer\n        SiteManager.site_manager.load()\n\n        logging.info(\"Loading site...\")\n        site = Site(address, allow_create=False)\n        site.settings[\"serving\"] = True  # Serving the site even if its disabled\n\n        logging.info(\"Creating FileServer....\")\n        file_server = FileServer()\n        site.connection_server = file_server\n        file_server_thread = gevent.spawn(file_server.start, check_sites=False)  # Dont check every site integrity\n        time.sleep(0.001)\n\n        if not file_server_thread.ready():\n            # Started fileserver\n            file_server.openport()\n            if peer_ip:  # Announce ip specificed\n                site.addPeer(peer_ip, peer_port)\n            else:  # Just ask the tracker\n                logging.info(\"Gathering peers from tracker\")\n                site.announce()  # Gather peers\n            published = site.publish(5, inner_path, diffs=diffs)  # Push to peers\n            if published > 0:\n                time.sleep(3)\n                logging.info(\"Serving files (max 60s)...\")\n                gevent.joinall([file_server_thread], timeout=60)\n                logging.info(\"Done.\")\n            else:\n                logging.info(\"No peers found, sitePublish command only works if you already have visitors serving your site\")\n        else:\n            # Already running, notify local client on new content\n            logging.info(\"Sending siteReload\")\n            if config.fileserver_ip == \"*\":\n                my_peer = Peer(\"127.0.0.1\", config.fileserver_port)\n            else:\n                my_peer = Peer(config.fileserver_ip, config.fileserver_port)\n\n            logging.info(my_peer.request(\"siteReload\", {\"site\": site.address, \"inner_path\": inner_path}))\n            logging.info(\"Sending sitePublish\")\n            logging.info(my_peer.request(\"sitePublish\", {\"site\": site.address, \"inner_path\": inner_path, \"diffs\": diffs}))\n            logging.info(\"Done.\")\n\n    # Crypto commands\n    def cryptPrivatekeyToAddress(self, privatekey=None):\n        from Crypt import CryptBitcoin\n        if not privatekey:  # If no privatekey in args then ask it now\n            import getpass\n            privatekey = getpass.getpass(\"Private key (input hidden):\")\n\n        print CryptBitcoin.privatekeyToAddress(privatekey)\n\n    def cryptSign(self, message, privatekey):\n        from Crypt import CryptBitcoin\n        print CryptBitcoin.sign(message, privatekey)\n\n    def cryptVerify(self, message, sign, address):\n        from Crypt import CryptBitcoin\n        print CryptBitcoin.verify(message, address, sign)\n\n    # Peer\n    def peerPing(self, peer_ip, peer_port=None):\n        if not peer_port:\n            peer_port = config.fileserver_port\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from Connection import ConnectionServer\n        file_server = ConnectionServer(\"127.0.0.1\", 1234)\n        from Crypt import CryptConnection\n        CryptConnection.manager.loadCerts()\n\n        from Peer import Peer\n        logging.info(\"Pinging 5 times peer: %s:%s...\" % (peer_ip, int(peer_port)))\n        peer = Peer(peer_ip, peer_port)\n        for i in range(5):\n            print \"Response time: %.3fs (crypt: %s)\" % (peer.ping(), peer.connection.crypt)\n            time.sleep(1)\n        peer.remove()\n        print \"Reconnect test...\"\n        peer = Peer(peer_ip, peer_port)\n        for i in range(5):\n            print \"Response time: %.3fs (crypt: %s)\" % (peer.ping(), peer.connection.crypt)\n            time.sleep(1)\n\n    def peerGetFile(self, peer_ip, peer_port, site, filename, benchmark=False):\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from Connection import ConnectionServer\n        file_server = ConnectionServer(\"127.0.0.1\", 1234)\n        from Crypt import CryptConnection\n        CryptConnection.manager.loadCerts()\n\n        from Peer import Peer\n        logging.info(\"Getting %s/%s from peer: %s:%s...\" % (site, filename, peer_ip, peer_port))\n        peer = Peer(peer_ip, peer_port)\n        s = time.time()\n        if benchmark:\n            for i in range(10):\n                peer.getFile(site, filename),\n            print \"Response time: %.3fs\" % (time.time() - s)\n            raw_input(\"Check memory\")\n        else:\n            print peer.getFile(site, filename).read()\n\n    def peerCmd(self, peer_ip, peer_port, cmd, parameters):\n        logging.info(\"Opening a simple connection server\")\n        global file_server\n        from Connection import ConnectionServer\n        file_server = ConnectionServer()\n        from Crypt import CryptConnection\n        CryptConnection.manager.loadCerts()\n\n        from Peer import Peer\n        peer = Peer(peer_ip, peer_port)\n\n        import json\n        if parameters:\n            parameters = json.loads(parameters.replace(\"'\", '\"'))\n        else:\n            parameters = {}\n        try:\n            res = peer.request(cmd, parameters)\n            print json.dumps(res, indent=2, ensure_ascii=False)\n        except Exception, err:\n            print \"Unknown response (%s): %s\" % (err, res)\n\n    def getConfig(self):\n        import json\n        print json.dumps(config.getServerInfo(), indent=2, ensure_ascii=False)\n\n\nactions = Actions()\n# Starts here when running zeronet.py\n\n\ndef start():\n    # Call function\n    action_kwargs = config.getActionArguments()\n    actions.call(config.action, action_kwargs)\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "main.py", "id": "2c871fbe8e50df29e4c41649d9fbc0bb", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/src/main.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}