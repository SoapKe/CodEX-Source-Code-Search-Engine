{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport itertools\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse\n)\nfrom ..utils import (\n    extract_attributes,\n    int_or_none,\n    strip_or_none,\n    unified_timestamp,\n)\n\n\nclass PolskieRadioIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?polskieradio\\.pl/\\d+/\\d+/Artykul/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.polskieradio.pl/7/5102/Artykul/1587943,Prof-Andrzej-Nowak-o-historii-nie-da-sie-myslec-beznamietnie',\n        'info_dict': {\n            'id': '1587943',\n            'title': 'Prof. Andrzej Nowak: o historii nie da si\u0119 my\u015ble\u0107 beznami\u0119tnie',\n            'description': 'md5:12f954edbf3120c5e7075e17bf9fc5c5',\n        },\n        'playlist': [{\n            'md5': '2984ee6ce9046d91fc233bc1a864a09a',\n            'info_dict': {\n                'id': '1540576',\n                'ext': 'mp3',\n                'title': 'md5:d4623290d4ac983bf924061c75c23a0d',\n                'timestamp': 1456594200,\n                'upload_date': '20160227',\n                'duration': 2364,\n                'thumbnail': r're:^https?://static\\.prsa\\.pl/images/.*\\.jpg$'\n            },\n        }],\n    }, {\n        'url': 'http://www.polskieradio.pl/265/5217/Artykul/1635803,Euro-2016-nie-ma-miejsca-na-blad-Polacy-graja-ze-Szwajcaria-o-cwiercfinal',\n        'info_dict': {\n            'id': '1635803',\n            'title': 'Euro 2016: nie ma miejsca na b\u0142\u0105d. Polacy graj\u0105 ze Szwajcari\u0105 o \u0107wier\u0107fina\u0142',\n            'description': 'md5:01cb7d0cad58664095d72b51a1ebada2',\n        },\n        'playlist_mincount': 12,\n    }, {\n        'url': 'http://polskieradio.pl/9/305/Artykul/1632955,Bardzo-popularne-slowo-remis',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.polskieradio.pl/7/5102/Artykul/1587943',\n        'only_matching': True,\n    }, {\n        \n        'url': 'http://www.polskieradio.pl/9/299/Artykul/1634903,Brexit-Leszek-Miller-swiat-sie-nie-zawali-Europa-bedzie-trwac-dalej',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        content = self._search_regex(\n            r'(?s)<div[^>]+class=\"\\s*this-article\\s*\"[^>]*>(.+?)<div[^>]+class=\"tags\"[^>]*>',\n            webpage, 'content')\n\n        timestamp = unified_timestamp(self._html_search_regex(\n            r'(?s)<span[^>]+id=\"datetime2\"[^>]*>(.+?)</span>',\n            webpage, 'timestamp', fatal=False))\n\n        thumbnail_url = self._og_search_thumbnail(webpage)\n\n        entries = []\n\n        media_urls = set()\n\n        for data_media in re.findall(r'<[^>]+data-media=({[^>]+})', content):\n            media = self._parse_json(data_media, playlist_id, fatal=False)\n            if not media.get('file') or not media.get('desc'):\n                continue\n            media_url = self._proto_relative_url(media['file'], 'http:')\n            if media_url in media_urls:\n                continue\n            media_urls.add(media_url)\n            entries.append({\n                'id': compat_str(media['id']),\n                'url': media_url,\n                'title': compat_urllib_parse_unquote(media['desc']),\n                'duration': int_or_none(media.get('length')),\n                'vcodec': 'none' if media.get('provider') == 'audio' else None,\n                'timestamp': timestamp,\n                'thumbnail': thumbnail_url\n            })\n\n        title = self._og_search_title(webpage).strip()\n        description = strip_or_none(self._og_search_description(webpage))\n\n        return self.playlist_result(entries, playlist_id, title, description)\n\n\nclass PolskieRadioCategoryIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?polskieradio\\.pl/\\d+(?:,[^/]+)?/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.polskieradio.pl/7/5102,HISTORIA-ZYWA',\n        'info_dict': {\n            'id': '5102',\n            'title': 'HISTORIA \u017bYWA',\n        },\n        'playlist_mincount': 38,\n    }, {\n        'url': 'http://www.polskieradio.pl/7/4807',\n        'info_dict': {\n            'id': '4807',\n            'title': 'Vademecum 1050. rocznicy Chrztu Polski'\n        },\n        'playlist_mincount': 5\n    }, {\n        'url': 'http://www.polskieradio.pl/7/129,Sygnaly-dnia?ref=source',\n        'only_matching': True\n    }, {\n        'url': 'http://www.polskieradio.pl/37,RedakcjaKatolicka/4143,Kierunek-Krakow',\n        'info_dict': {\n            'id': '4143',\n            'title': 'Kierunek Krak\u00f3w',\n        },\n        'playlist_mincount': 61\n    }, {\n        'url': 'http://www.polskieradio.pl/10,czworka/214,muzyka',\n        'info_dict': {\n            'id': '214',\n            'title': 'Muzyka',\n        },\n        'playlist_mincount': 61\n    }, {\n        'url': 'http://www.polskieradio.pl/7,Jedynka/5102,HISTORIA-ZYWA',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.polskieradio.pl/8,Dwojka/196,Publicystyka',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if PolskieRadioIE.suitable(url) else super(PolskieRadioCategoryIE, cls).suitable(url)\n\n    def _entries(self, url, page, category_id):\n        content = page\n        for page_num in itertools.count(2):\n            for a_entry, entry_id in re.findall(\n                    r'(?s)<article[^>]+>.*?(<a[^>]+href=[\"\\']/\\d+/\\d+/Artykul/(\\d+)[^>]+>).*?</article>',\n                    content):\n                entry = extract_attributes(a_entry)\n                href = entry.get('href')\n                if not href:\n                    continue\n                yield self.url_result(\n                    compat_urlparse.urljoin(url, href), PolskieRadioIE.ie_key(),\n                    entry_id, entry.get('title'))\n            mobj = re.search(\n                r'<div[^>]+class=[\"\\']next[\"\\'][^>]*>\\s*<a[^>]+href=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n                content)\n            if not mobj:\n                break\n            next_url = compat_urlparse.urljoin(url, mobj.group('url'))\n            content = self._download_webpage(\n                next_url, category_id, 'Downloading page %s' % page_num)\n\n    def _real_extract(self, url):\n        category_id = self._match_id(url)\n        webpage = self._download_webpage(url, category_id)\n        title = self._html_search_regex(\n            r'<title>([^<]+) - [^<]+ - [^<]+</title>',\n            webpage, 'title', fatal=False)\n        return self.playlist_result(\n            self._entries(url, webpage, category_id),\n            category_id, title)\n", "comments": "# coding: utf-8\n# with mp4 video\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_str,\n    compat_urllib_parse_unquote,\n    compat_urlparse\n)\nfrom ..utils import (\n    extract_attributes,\n    int_or_none,\n    strip_or_none,\n    unified_timestamp,\n)\n\n\nclass PolskieRadioIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?polskieradio\\.pl/\\d+/\\d+/Artykul/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'http://www.polskieradio.pl/7/5102/Artykul/1587943,Prof-Andrzej-Nowak-o-historii-nie-da-sie-myslec-beznamietnie',\n        'info_dict': {\n            'id': '1587943',\n            'title': 'Prof. Andrzej Nowak: o historii nie da si\u0119 my\u015ble\u0107 beznami\u0119tnie',\n            'description': 'md5:12f954edbf3120c5e7075e17bf9fc5c5',\n        },\n        'playlist': [{\n            'md5': '2984ee6ce9046d91fc233bc1a864a09a',\n            'info_dict': {\n                'id': '1540576',\n                'ext': 'mp3',\n                'title': 'md5:d4623290d4ac983bf924061c75c23a0d',\n                'timestamp': 1456594200,\n                'upload_date': '20160227',\n                'duration': 2364,\n                'thumbnail': r're:^https?://static\\.prsa\\.pl/images/.*\\.jpg$'\n            },\n        }],\n    }, {\n        'url': 'http://www.polskieradio.pl/265/5217/Artykul/1635803,Euro-2016-nie-ma-miejsca-na-blad-Polacy-graja-ze-Szwajcaria-o-cwiercfinal',\n        'info_dict': {\n            'id': '1635803',\n            'title': 'Euro 2016: nie ma miejsca na b\u0142\u0105d. Polacy graj\u0105 ze Szwajcari\u0105 o \u0107wier\u0107fina\u0142',\n            'description': 'md5:01cb7d0cad58664095d72b51a1ebada2',\n        },\n        'playlist_mincount': 12,\n    }, {\n        'url': 'http://polskieradio.pl/9/305/Artykul/1632955,Bardzo-popularne-slowo-remis',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.polskieradio.pl/7/5102/Artykul/1587943',\n        'only_matching': True,\n    }, {\n        # with mp4 video\n        'url': 'http://www.polskieradio.pl/9/299/Artykul/1634903,Brexit-Leszek-Miller-swiat-sie-nie-zawali-Europa-bedzie-trwac-dalej',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        playlist_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        content = self._search_regex(\n            r'(?s)<div[^>]+class=\"\\s*this-article\\s*\"[^>]*>(.+?)<div[^>]+class=\"tags\"[^>]*>',\n            webpage, 'content')\n\n        timestamp = unified_timestamp(self._html_search_regex(\n            r'(?s)<span[^>]+id=\"datetime2\"[^>]*>(.+?)</span>',\n            webpage, 'timestamp', fatal=False))\n\n        thumbnail_url = self._og_search_thumbnail(webpage)\n\n        entries = []\n\n        media_urls = set()\n\n        for data_media in re.findall(r'<[^>]+data-media=({[^>]+})', content):\n            media = self._parse_json(data_media, playlist_id, fatal=False)\n            if not media.get('file') or not media.get('desc'):\n                continue\n            media_url = self._proto_relative_url(media['file'], 'http:')\n            if media_url in media_urls:\n                continue\n            media_urls.add(media_url)\n            entries.append({\n                'id': compat_str(media['id']),\n                'url': media_url,\n                'title': compat_urllib_parse_unquote(media['desc']),\n                'duration': int_or_none(media.get('length')),\n                'vcodec': 'none' if media.get('provider') == 'audio' else None,\n                'timestamp': timestamp,\n                'thumbnail': thumbnail_url\n            })\n\n        title = self._og_search_title(webpage).strip()\n        description = strip_or_none(self._og_search_description(webpage))\n\n        return self.playlist_result(entries, playlist_id, title, description)\n\n\nclass PolskieRadioCategoryIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?polskieradio\\.pl/\\d+(?:,[^/]+)?/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.polskieradio.pl/7/5102,HISTORIA-ZYWA',\n        'info_dict': {\n            'id': '5102',\n            'title': 'HISTORIA \u017bYWA',\n        },\n        'playlist_mincount': 38,\n    }, {\n        'url': 'http://www.polskieradio.pl/7/4807',\n        'info_dict': {\n            'id': '4807',\n            'title': 'Vademecum 1050. rocznicy Chrztu Polski'\n        },\n        'playlist_mincount': 5\n    }, {\n        'url': 'http://www.polskieradio.pl/7/129,Sygnaly-dnia?ref=source',\n        'only_matching': True\n    }, {\n        'url': 'http://www.polskieradio.pl/37,RedakcjaKatolicka/4143,Kierunek-Krakow',\n        'info_dict': {\n            'id': '4143',\n            'title': 'Kierunek Krak\u00f3w',\n        },\n        'playlist_mincount': 61\n    }, {\n        'url': 'http://www.polskieradio.pl/10,czworka/214,muzyka',\n        'info_dict': {\n            'id': '214',\n            'title': 'Muzyka',\n        },\n        'playlist_mincount': 61\n    }, {\n        'url': 'http://www.polskieradio.pl/7,Jedynka/5102,HISTORIA-ZYWA',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.polskieradio.pl/8,Dwojka/196,Publicystyka',\n        'only_matching': True,\n    }]\n\n    @classmethod\n    def suitable(cls, url):\n        return False if PolskieRadioIE.suitable(url) else super(PolskieRadioCategoryIE, cls).suitable(url)\n\n    def _entries(self, url, page, category_id):\n        content = page\n        for page_num in itertools.count(2):\n            for a_entry, entry_id in re.findall(\n                    r'(?s)<article[^>]+>.*?(<a[^>]+href=[\"\\']/\\d+/\\d+/Artykul/(\\d+)[^>]+>).*?</article>',\n                    content):\n                entry = extract_attributes(a_entry)\n                href = entry.get('href')\n                if not href:\n                    continue\n                yield self.url_result(\n                    compat_urlparse.urljoin(url, href), PolskieRadioIE.ie_key(),\n                    entry_id, entry.get('title'))\n            mobj = re.search(\n                r'<div[^>]+class=[\"\\']next[\"\\'][^>]*>\\s*<a[^>]+href=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n                content)\n            if not mobj:\n                break\n            next_url = compat_urlparse.urljoin(url, mobj.group('url'))\n            content = self._download_webpage(\n                next_url, category_id, 'Downloading page %s' % page_num)\n\n    def _real_extract(self, url):\n        category_id = self._match_id(url)\n        webpage = self._download_webpage(url, category_id)\n        title = self._html_search_regex(\n            r'<title>([^<]+) - [^<]+ - [^<]+</title>',\n            webpage, 'title', fatal=False)\n        return self.playlist_result(\n            self._entries(url, webpage, category_id),\n            category_id, title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "polskieradio.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/polskieradio.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}