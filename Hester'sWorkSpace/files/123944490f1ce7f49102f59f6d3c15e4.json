{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nfrom lxml import objectify\nfrom werkzeug import urls\n\nimport odoo\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.addons.payment_buckaroo.controllers.main import BuckarooController\nfrom odoo.tools import mute_logger\n\n\n@odoo.tests.common.at_install(False)\n@odoo.tests.common.post_install(False)\nclass BuckarooCommon(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(BuckarooCommon, self).setUp()\n        \n        self.buckaroo = self.env.ref('payment.payment_acquirer_buckaroo')\n\n\n@odoo.tests.common.at_install(False)\n@odoo.tests.common.post_install(False)\nclass BuckarooForm(BuckarooCommon):\n\n    def test_10_Buckaroo_form_render(self):\n        base_url = self.env['ir.config_parameter'].get_param('web.base.url')\n        \n        self.assertEqual(self.buckaroo.environment, 'test', 'test without test environment')\n\n        \n        \n        \n\n        form_values = {\n            'add_returndata': None,\n            'Brq_websitekey': self.buckaroo.brq_websitekey,\n            'Brq_amount': '2240.0',\n            'Brq_currency': 'EUR',\n            'Brq_invoicenumber': 'SO004',\n            'Brq_signature': '1b8c10074c622d965272a91a9e88b5b3777d2474',  \n            'brq_test': 'True',\n            'Brq_return': urls.url_join(base_url, BuckarooController._return_url),\n            'Brq_returncancel': urls.url_join(base_url, BuckarooController._cancel_url),\n            'Brq_returnerror': urls.url_join(base_url, BuckarooController._exception_url),\n            'Brq_returnreject': urls.url_join(base_url, BuckarooController._reject_url),\n            'Brq_culture': 'en-US',\n        }\n\n        \n        res = self.buckaroo.render(\n            'SO004', 2240.0, self.currency_euro.id,\n            partner_id=None,\n            partner_values=self.buyer_values)\n\n        \n        tree = objectify.fromstring(res)\n        self.assertEqual(tree.get('action'), 'https://testcheckout.buckaroo.nl/html/', 'Buckaroo: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'Buckaroo: wrong value for input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n        \n        # Test2: button using tx + validation\n        \n\n        \n        tx = self.env['payment.transaction'].create({\n            'amount': 2240.0,\n            'acquirer_id': self.buckaroo.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'SO004',\n            'partner_id': self.buyer_id,\n        })\n\n        \n        res = self.buckaroo_id.render(\n            'should_be_erased', 2240.0, self.currency_euro,\n            tx_id=tx.id,\n            partner_id=None,\n            partner_values=self.buyer_values)\n\n        \n        tree = objectify.fromstring(res)\n        self.assertEqual(tree.get('action'), 'https://testcheckout.buckaroo.nl/html/', 'Buckaroo: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'Buckaroo: wrong value for form input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n    @mute_logger('odoo.addons.payment_buckaroo.models.payment', 'ValidationError')\n    def test_20_buckaroo_form_management(self):\n        \n        self.assertEqual(self.buckaroo.environment, 'test', 'test without test environment')\n\n        \n        buckaroo_post_data = {\n            'BRQ_RETURNDATA': u'',\n            'BRQ_AMOUNT': u'2240.00',\n            'BRQ_CURRENCY': u'EUR',\n            'BRQ_CUSTOMER_NAME': u'Jan de Tester',\n            'BRQ_INVOICENUMBER': u'SO004',\n            'brq_payment': u'573311D081B04069BD6336001611DBD4',\n            'BRQ_PAYMENT_METHOD': u'paypal',\n            'BRQ_SERVICE_PAYPAL_PAYERCOUNTRY': u'NL',\n            'BRQ_SERVICE_PAYPAL_PAYEREMAIL': u'fhe@odoo.com',\n            'BRQ_SERVICE_PAYPAL_PAYERFIRSTNAME': u'Jan',\n            'BRQ_SERVICE_PAYPAL_PAYERLASTNAME': u'Tester',\n            'BRQ_SERVICE_PAYPAL_PAYERMIDDLENAME': u'de',\n            'BRQ_SERVICE_PAYPAL_PAYERSTATUS': u'verified',\n            'Brq_signature': u'175d82dd53a02bad393fee32cb1eafa3b6fbbd91',\n            'BRQ_STATUSCODE': u'190',\n            'BRQ_STATUSCODE_DETAIL': u'S001',\n            'BRQ_STATUSMESSAGE': u'Transaction successfully processed',\n            'BRQ_TEST': u'true',\n            'BRQ_TIMESTAMP': u'2014-05-08 12:41:21',\n            'BRQ_TRANSACTIONS': u'D6106678E1D54EEB8093F5B3AC42EA7B',\n            'BRQ_WEBSITEKEY': u'5xTGyGyPyl',\n        }\n\n        \n        with self.assertRaises(ValidationError):\n            self.env['payment.transaction'].form_feedback(buckaroo_post_data, 'buckaroo')\n\n        tx = self.env['payment.transaction'].create({\n            'amount': 2240.0,\n            'acquirer_id': self.buckaroo.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'SO004',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n\n        \n        tx.form_feedback(buckaroo_post_data, 'buckaroo')\n        \n        self.assertEqual(tx.state, 'done', 'Buckaroo: validation did not put tx into done state')\n        self.assertEqual(tx.acquirer_reference, buckaroo_post_data.get('BRQ_TRANSACTIONS'), 'Buckaroo: validation did not update tx payid')\n\n        \n        tx.write({'state': 'draft', 'date_validate': False, 'acquirer_reference': False})\n\n        \n        buckaroo_post_data['BRQ_SIGNATURE'] = '54d928810e343acf5fb0c3ee75fd747ff159ef7a'\n        with self.assertRaises(ValidationError):\n            tx.form_feedback(buckaroo_post_data, 'buckaroo')\n\n        \n        buckaroo_post_data['BRQ_STATUSCODE'] = 2\n        buckaroo_post_data['BRQ_SIGNATURE'] = '4164b52adb1e6a2221d3d8a39d8c3e18a9ecb90b'\n        tx.form_feedback(buckaroo_post_data, 'buckaroo')\n\n        \n        self.assertEqual(tx.state, 'error', 'Buckaroo: erroneous validation did not put tx into error state')\n", "comments": "      coding  utf 8        get buckaroo account    sure stupid things                                                test  button direct rendering                                                update    render button    check form result                                                test2  button using tx   validation                                                create new draft tx    render button    check form result    sure stupid thing    typical data posted buckaroo client successfully paid    raise error unknown tx    validate    check state    reset tx    buckaroo post ok  try modify shasign    simulate error    check state ", "content": "# -*- coding: utf-8 -*-\n\nfrom lxml import objectify\nfrom werkzeug import urls\n\nimport odoo\nfrom odoo.addons.payment.models.payment_acquirer import ValidationError\nfrom odoo.addons.payment.tests.common import PaymentAcquirerCommon\nfrom odoo.addons.payment_buckaroo.controllers.main import BuckarooController\nfrom odoo.tools import mute_logger\n\n\n@odoo.tests.common.at_install(False)\n@odoo.tests.common.post_install(False)\nclass BuckarooCommon(PaymentAcquirerCommon):\n\n    def setUp(self):\n        super(BuckarooCommon, self).setUp()\n        # get the buckaroo account\n        self.buckaroo = self.env.ref('payment.payment_acquirer_buckaroo')\n\n\n@odoo.tests.common.at_install(False)\n@odoo.tests.common.post_install(False)\nclass BuckarooForm(BuckarooCommon):\n\n    def test_10_Buckaroo_form_render(self):\n        base_url = self.env['ir.config_parameter'].get_param('web.base.url')\n        # be sure not to do stupid things\n        self.assertEqual(self.buckaroo.environment, 'test', 'test without test environment')\n\n        # ----------------------------------------\n        # Test: button direct rendering\n        # ----------------------------------------\n\n        form_values = {\n            'add_returndata': None,\n            'Brq_websitekey': self.buckaroo.brq_websitekey,\n            'Brq_amount': '2240.0',\n            'Brq_currency': 'EUR',\n            'Brq_invoicenumber': 'SO004',\n            'Brq_signature': '1b8c10074c622d965272a91a9e88b5b3777d2474',  # update me\n            'brq_test': 'True',\n            'Brq_return': urls.url_join(base_url, BuckarooController._return_url),\n            'Brq_returncancel': urls.url_join(base_url, BuckarooController._cancel_url),\n            'Brq_returnerror': urls.url_join(base_url, BuckarooController._exception_url),\n            'Brq_returnreject': urls.url_join(base_url, BuckarooController._reject_url),\n            'Brq_culture': 'en-US',\n        }\n\n        # render the button\n        res = self.buckaroo.render(\n            'SO004', 2240.0, self.currency_euro.id,\n            partner_id=None,\n            partner_values=self.buyer_values)\n\n        # check form result\n        tree = objectify.fromstring(res)\n        self.assertEqual(tree.get('action'), 'https://testcheckout.buckaroo.nl/html/', 'Buckaroo: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'Buckaroo: wrong value for input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n        # ----------------------------------------\n        # Test2: button using tx + validation\n        # ----------------------------------------\n\n        # create a new draft tx\n        tx = self.env['payment.transaction'].create({\n            'amount': 2240.0,\n            'acquirer_id': self.buckaroo.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'SO004',\n            'partner_id': self.buyer_id,\n        })\n\n        # render the button\n        res = self.buckaroo_id.render(\n            'should_be_erased', 2240.0, self.currency_euro,\n            tx_id=tx.id,\n            partner_id=None,\n            partner_values=self.buyer_values)\n\n        # check form result\n        tree = objectify.fromstring(res)\n        self.assertEqual(tree.get('action'), 'https://testcheckout.buckaroo.nl/html/', 'Buckaroo: wrong form POST url')\n        for form_input in tree.input:\n            if form_input.get('name') in ['submit']:\n                continue\n            self.assertEqual(\n                form_input.get('value'),\n                form_values[form_input.get('name')],\n                'Buckaroo: wrong value for form input %s: received %s instead of %s' % (form_input.get('name'), form_input.get('value'), form_values[form_input.get('name')])\n            )\n\n    @mute_logger('odoo.addons.payment_buckaroo.models.payment', 'ValidationError')\n    def test_20_buckaroo_form_management(self):\n        # be sure not to do stupid thing\n        self.assertEqual(self.buckaroo.environment, 'test', 'test without test environment')\n\n        # typical data posted by buckaroo after client has successfully paid\n        buckaroo_post_data = {\n            'BRQ_RETURNDATA': u'',\n            'BRQ_AMOUNT': u'2240.00',\n            'BRQ_CURRENCY': u'EUR',\n            'BRQ_CUSTOMER_NAME': u'Jan de Tester',\n            'BRQ_INVOICENUMBER': u'SO004',\n            'brq_payment': u'573311D081B04069BD6336001611DBD4',\n            'BRQ_PAYMENT_METHOD': u'paypal',\n            'BRQ_SERVICE_PAYPAL_PAYERCOUNTRY': u'NL',\n            'BRQ_SERVICE_PAYPAL_PAYEREMAIL': u'fhe@odoo.com',\n            'BRQ_SERVICE_PAYPAL_PAYERFIRSTNAME': u'Jan',\n            'BRQ_SERVICE_PAYPAL_PAYERLASTNAME': u'Tester',\n            'BRQ_SERVICE_PAYPAL_PAYERMIDDLENAME': u'de',\n            'BRQ_SERVICE_PAYPAL_PAYERSTATUS': u'verified',\n            'Brq_signature': u'175d82dd53a02bad393fee32cb1eafa3b6fbbd91',\n            'BRQ_STATUSCODE': u'190',\n            'BRQ_STATUSCODE_DETAIL': u'S001',\n            'BRQ_STATUSMESSAGE': u'Transaction successfully processed',\n            'BRQ_TEST': u'true',\n            'BRQ_TIMESTAMP': u'2014-05-08 12:41:21',\n            'BRQ_TRANSACTIONS': u'D6106678E1D54EEB8093F5B3AC42EA7B',\n            'BRQ_WEBSITEKEY': u'5xTGyGyPyl',\n        }\n\n        # should raise error about unknown tx\n        with self.assertRaises(ValidationError):\n            self.env['payment.transaction'].form_feedback(buckaroo_post_data, 'buckaroo')\n\n        tx = self.env['payment.transaction'].create({\n            'amount': 2240.0,\n            'acquirer_id': self.buckaroo.id,\n            'currency_id': self.currency_euro.id,\n            'reference': 'SO004',\n            'partner_name': 'Norbert Buyer',\n            'partner_country_id': self.country_france.id})\n\n        # validate it\n        tx.form_feedback(buckaroo_post_data, 'buckaroo')\n        # check state\n        self.assertEqual(tx.state, 'done', 'Buckaroo: validation did not put tx into done state')\n        self.assertEqual(tx.acquirer_reference, buckaroo_post_data.get('BRQ_TRANSACTIONS'), 'Buckaroo: validation did not update tx payid')\n\n        # reset tx\n        tx.write({'state': 'draft', 'date_validate': False, 'acquirer_reference': False})\n\n        # now buckaroo post is ok: try to modify the SHASIGN\n        buckaroo_post_data['BRQ_SIGNATURE'] = '54d928810e343acf5fb0c3ee75fd747ff159ef7a'\n        with self.assertRaises(ValidationError):\n            tx.form_feedback(buckaroo_post_data, 'buckaroo')\n\n        # simulate an error\n        buckaroo_post_data['BRQ_STATUSCODE'] = 2\n        buckaroo_post_data['BRQ_SIGNATURE'] = '4164b52adb1e6a2221d3d8a39d8c3e18a9ecb90b'\n        tx.form_feedback(buckaroo_post_data, 'buckaroo')\n\n        # check state\n        self.assertEqual(tx.state, 'error', 'Buckaroo: erroneous validation did not put tx into error state')\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "test_buckaroo.py", "id": "123944490f1ce7f49102f59f6d3c15e4", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/payment_buckaroo/tests/test_buckaroo.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}