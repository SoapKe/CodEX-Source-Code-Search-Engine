{"author": "nvbn", "code": "import pytest\nfrom tests.functional.plots import with_confirmation, without_confirmation, \\\n    refuse_with_confirmation, history_changed, history_not_changed, \\\n    select_command_with_arrows, how_to_configure\n\n\npython_3 = (u'thefuck/python3-bash',\n            u'FROM python:3',\n            u'sh')\n\npython_2 = (u'thefuck/python2-bash',\n            u'FROM python:2',\n            u'sh')\n\n\ninit_bashrc = u\n\n\n@pytest.fixture(params=[(python_3, False),\n                        (python_3, True),\n                        (python_2, False)])\ndef proc(request, spawnu, TIMEOUT):\n    container, instant_mode = request.param\n    proc = spawnu(*container)\n    proc.sendline(u\"pip install /src\")\n    assert proc.expect([TIMEOUT, u'Successfully installed'])\n    proc.sendline(init_bashrc.format(\n        u'--enable-experimental-instant-mode' if instant_mode else ''))\n    proc.sendline(u\"bash\")\n    if instant_mode:\n        assert proc.expect([TIMEOUT, u'instant mode ready: True'])\n    return proc\n\n\n@pytest.mark.functional\ndef test_with_confirmation(proc, TIMEOUT):\n    with_confirmation(proc, TIMEOUT)\n    history_changed(proc, TIMEOUT, u'echo test')\n\n\n@pytest.mark.functional\ndef test_select_command_with_arrows(proc, TIMEOUT):\n    select_command_with_arrows(proc, TIMEOUT)\n    history_changed(proc, TIMEOUT, u'git help')\n\n\n@pytest.mark.functional\ndef test_refuse_with_confirmation(proc, TIMEOUT):\n    refuse_with_confirmation(proc, TIMEOUT)\n    history_not_changed(proc, TIMEOUT)\n\n\n@pytest.mark.functional\ndef test_without_confirmation(proc, TIMEOUT):\n    without_confirmation(proc, TIMEOUT)\n    history_changed(proc, TIMEOUT, u'echo test')\n\n\n@pytest.mark.functional\ndef test_how_to_configure_alias(proc, TIMEOUT):\n    proc.sendline('unset -f fuck')\n    how_to_configure(proc, TIMEOUT)\n", "comments": "echo '\nexport SHELL=/bin/bash\nexport PS1=\"$ \"\necho > $HISTFILE\neval $(thefuck --alias {})\necho \"instant mode ready: $THEFUCK_INSTANT_MODE\"\n' > ~/.bashrc\nc\n", "content": "import pytest\nfrom tests.functional.plots import with_confirmation, without_confirmation, \\\n    refuse_with_confirmation, history_changed, history_not_changed, \\\n    select_command_with_arrows, how_to_configure\n\n\npython_3 = (u'thefuck/python3-bash',\n            u'FROM python:3',\n            u'sh')\n\npython_2 = (u'thefuck/python2-bash',\n            u'FROM python:2',\n            u'sh')\n\n\ninit_bashrc = u'''echo '\nexport SHELL=/bin/bash\nexport PS1=\"$ \"\necho > $HISTFILE\neval $(thefuck --alias {})\necho \"instant mode ready: $THEFUCK_INSTANT_MODE\"\n' > ~/.bashrc'''\n\n\n@pytest.fixture(params=[(python_3, False),\n                        (python_3, True),\n                        (python_2, False)])\ndef proc(request, spawnu, TIMEOUT):\n    container, instant_mode = request.param\n    proc = spawnu(*container)\n    proc.sendline(u\"pip install /src\")\n    assert proc.expect([TIMEOUT, u'Successfully installed'])\n    proc.sendline(init_bashrc.format(\n        u'--enable-experimental-instant-mode' if instant_mode else ''))\n    proc.sendline(u\"bash\")\n    if instant_mode:\n        assert proc.expect([TIMEOUT, u'instant mode ready: True'])\n    return proc\n\n\n@pytest.mark.functional\ndef test_with_confirmation(proc, TIMEOUT):\n    with_confirmation(proc, TIMEOUT)\n    history_changed(proc, TIMEOUT, u'echo test')\n\n\n@pytest.mark.functional\ndef test_select_command_with_arrows(proc, TIMEOUT):\n    select_command_with_arrows(proc, TIMEOUT)\n    history_changed(proc, TIMEOUT, u'git help')\n\n\n@pytest.mark.functional\ndef test_refuse_with_confirmation(proc, TIMEOUT):\n    refuse_with_confirmation(proc, TIMEOUT)\n    history_not_changed(proc, TIMEOUT)\n\n\n@pytest.mark.functional\ndef test_without_confirmation(proc, TIMEOUT):\n    without_confirmation(proc, TIMEOUT)\n    history_changed(proc, TIMEOUT, u'echo test')\n\n\n@pytest.mark.functional\ndef test_how_to_configure_alias(proc, TIMEOUT):\n    proc.sendline('unset -f fuck')\n    how_to_configure(proc, TIMEOUT)\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "test_bash.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/functional/test_bash.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}