{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nimport calendar\n\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\n\n\nclass HrHolidaySummaryReport(models.AbstractModel):\n    _name = 'report.hr_holidays.report_holidayssummary'\n\n    def _get_header_info(self, start_date, holiday_type):\n        st_date = fields.Date.from_string(start_date)\n        return {\n            'start_date': fields.Date.to_string(st_date),\n            'end_date': fields.Date.to_string(st_date + relativedelta(days=59)),\n            'holiday_type': 'Confirmed and Approved' if holiday_type == 'both' else holiday_type\n        }\n    \n    def _date_is_day_off(self, date):\n        return date.weekday() in (calendar.SATURDAY, calendar.SUNDAY,)\n\n    def _get_day(self, start_date):\n        res = []\n        start_date = fields.Date.from_string(start_date)\n        for x in range(0, 60):\n            color = '#ababab' if self._date_is_day_off(start_date) else ''\n            res.append({'day_str': start_date.strftime('%a'), 'day': start_date.day , 'color': color})\n            start_date = start_date + relativedelta(days=1)\n        return res\n\n    def _get_months(self, start_date):\n        \n        res = []\n        start_date = fields.Date.from_string(start_date)\n        end_date = start_date + relativedelta(days=59)\n        while start_date <= end_date:\n            last_date = start_date + relativedelta(day=1, months=+1, days=-1)\n            if last_date > end_date:\n                last_date = end_date\n            month_days = (last_date - start_date).days + 1\n            res.append({'month_name': start_date.strftime('%B'), 'days': month_days})\n            start_date += relativedelta(day=1, months=+1)\n        return res\n\n    def _get_leaves_summary(self, start_date, empid, holiday_type):\n        res = []\n        count = 0\n        start_date = fields.Date.from_string(start_date)\n        end_date = start_date + relativedelta(days=59)\n        for index in range(0, 60):\n            current = start_date + timedelta(index)\n            res.append({'day': current.day, 'color': ''})\n            if self._date_is_day_off(current) :\n                res[index]['color'] = '#ababab'\n        \n        holiday_type = ['confirm','validate'] if holiday_type == 'both' else ['confirm'] if holiday_type == 'Confirmed' else ['validate']\n        holidays = self.env['hr.holidays'].search([\n            ('employee_id', '=', empid), ('state', 'in', holiday_type),\n            ('type', '=', 'remove'), ('date_from', '<=', str(end_date)),\n            ('date_to', '>=', str(start_date))\n        ])\n        for holiday in holidays:\n            \n            \n            date_from = fields.Datetime.from_string(holiday.date_from)\n            date_from = fields.Datetime.context_timestamp(holiday, date_from).date()\n            date_to = fields.Datetime.from_string(holiday.date_to)\n            date_to = fields.Datetime.context_timestamp(holiday, date_to).date()\n            for index in range(0, ((date_to - date_from).days + 1)):\n                if date_from >= start_date and date_from <= end_date:\n                    res[(date_from-start_date).days]['color'] = holiday.holiday_status_id.color_name\n                date_from += timedelta(1)\n            count += abs(holiday.number_of_days)\n        self.sum = count\n        return res\n\n    def _get_data_from_report(self, data):\n        res = []\n        Employee = self.env['hr.employee']\n        if 'depts' in data:\n            for department in self.env['hr.department'].browse(data['depts']):\n                res.append({'dept' : department.name, 'data': [], 'color': self._get_day(data['date_from'])})\n                for emp in Employee.search([('department_id', '=', department.id)]):\n                    res[len(res)-1]['data'].append({\n                        'emp': emp.name,\n                        'display': self._get_leaves_summary(data['date_from'], emp.id, data['holiday_type']),\n                        'sum': self.sum\n                    })\n        elif 'emp' in data:\n            res.append({'data':[]})\n            for emp in Employee.browse(data['emp']):\n                res[0]['data'].append({\n                    'emp': emp.name,\n                    'display': self._get_leaves_summary(data['date_from'], emp.id, data['holiday_type']),\n                    'sum': self.sum\n                })\n        return res\n\n    def _get_holidays_status(self):\n        res = []\n        for holiday in self.env['hr.holidays.status'].search([]):\n            res.append({'color': holiday.color_name, 'name': holiday.name})\n        return res\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        if not data.get('form'):\n            raise UserError(_(\"Form content is missing, this report cannot be printed.\"))\n\n        holidays_report = self.env['ir.actions.report']._get_report_from_name('hr_holidays.report_holidayssummary')\n        holidays = self.env['hr.holidays'].browse(self.ids)\n        return {\n            'doc_ids': self.ids,\n            'doc_model': holidays_report.model,\n            'docs': holidays,\n            'get_header_info': self._get_header_info(data['form']['date_from'], data['form']['holiday_type']),\n            'get_day': self._get_day(data['form']['date_from']),\n            'get_months': self._get_months(data['form']['date_from']),\n            'get_data_from_report': self._get_data_from_report(data['form']),\n            'get_holidays_status': self._get_holidays_status(),\n        }\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     works geting month name two dates     count get leave summary details     convert date user timezone  otherwise report consistent    value displayed interface  ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nimport calendar\n\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\nfrom odoo import api, fields, models, _\nfrom odoo.exceptions import UserError\n\n\nclass HrHolidaySummaryReport(models.AbstractModel):\n    _name = 'report.hr_holidays.report_holidayssummary'\n\n    def _get_header_info(self, start_date, holiday_type):\n        st_date = fields.Date.from_string(start_date)\n        return {\n            'start_date': fields.Date.to_string(st_date),\n            'end_date': fields.Date.to_string(st_date + relativedelta(days=59)),\n            'holiday_type': 'Confirmed and Approved' if holiday_type == 'both' else holiday_type\n        }\n    \n    def _date_is_day_off(self, date):\n        return date.weekday() in (calendar.SATURDAY, calendar.SUNDAY,)\n\n    def _get_day(self, start_date):\n        res = []\n        start_date = fields.Date.from_string(start_date)\n        for x in range(0, 60):\n            color = '#ababab' if self._date_is_day_off(start_date) else ''\n            res.append({'day_str': start_date.strftime('%a'), 'day': start_date.day , 'color': color})\n            start_date = start_date + relativedelta(days=1)\n        return res\n\n    def _get_months(self, start_date):\n        # it works for geting month name between two dates.\n        res = []\n        start_date = fields.Date.from_string(start_date)\n        end_date = start_date + relativedelta(days=59)\n        while start_date <= end_date:\n            last_date = start_date + relativedelta(day=1, months=+1, days=-1)\n            if last_date > end_date:\n                last_date = end_date\n            month_days = (last_date - start_date).days + 1\n            res.append({'month_name': start_date.strftime('%B'), 'days': month_days})\n            start_date += relativedelta(day=1, months=+1)\n        return res\n\n    def _get_leaves_summary(self, start_date, empid, holiday_type):\n        res = []\n        count = 0\n        start_date = fields.Date.from_string(start_date)\n        end_date = start_date + relativedelta(days=59)\n        for index in range(0, 60):\n            current = start_date + timedelta(index)\n            res.append({'day': current.day, 'color': ''})\n            if self._date_is_day_off(current) :\n                res[index]['color'] = '#ababab'\n        # count and get leave summary details.\n        holiday_type = ['confirm','validate'] if holiday_type == 'both' else ['confirm'] if holiday_type == 'Confirmed' else ['validate']\n        holidays = self.env['hr.holidays'].search([\n            ('employee_id', '=', empid), ('state', 'in', holiday_type),\n            ('type', '=', 'remove'), ('date_from', '<=', str(end_date)),\n            ('date_to', '>=', str(start_date))\n        ])\n        for holiday in holidays:\n            # Convert date to user timezone, otherwise the report will not be consistent with the\n            # value displayed in the interface.\n            date_from = fields.Datetime.from_string(holiday.date_from)\n            date_from = fields.Datetime.context_timestamp(holiday, date_from).date()\n            date_to = fields.Datetime.from_string(holiday.date_to)\n            date_to = fields.Datetime.context_timestamp(holiday, date_to).date()\n            for index in range(0, ((date_to - date_from).days + 1)):\n                if date_from >= start_date and date_from <= end_date:\n                    res[(date_from-start_date).days]['color'] = holiday.holiday_status_id.color_name\n                date_from += timedelta(1)\n            count += abs(holiday.number_of_days)\n        self.sum = count\n        return res\n\n    def _get_data_from_report(self, data):\n        res = []\n        Employee = self.env['hr.employee']\n        if 'depts' in data:\n            for department in self.env['hr.department'].browse(data['depts']):\n                res.append({'dept' : department.name, 'data': [], 'color': self._get_day(data['date_from'])})\n                for emp in Employee.search([('department_id', '=', department.id)]):\n                    res[len(res)-1]['data'].append({\n                        'emp': emp.name,\n                        'display': self._get_leaves_summary(data['date_from'], emp.id, data['holiday_type']),\n                        'sum': self.sum\n                    })\n        elif 'emp' in data:\n            res.append({'data':[]})\n            for emp in Employee.browse(data['emp']):\n                res[0]['data'].append({\n                    'emp': emp.name,\n                    'display': self._get_leaves_summary(data['date_from'], emp.id, data['holiday_type']),\n                    'sum': self.sum\n                })\n        return res\n\n    def _get_holidays_status(self):\n        res = []\n        for holiday in self.env['hr.holidays.status'].search([]):\n            res.append({'color': holiday.color_name, 'name': holiday.name})\n        return res\n\n    @api.model\n    def get_report_values(self, docids, data=None):\n        if not data.get('form'):\n            raise UserError(_(\"Form content is missing, this report cannot be printed.\"))\n\n        holidays_report = self.env['ir.actions.report']._get_report_from_name('hr_holidays.report_holidayssummary')\n        holidays = self.env['hr.holidays'].browse(self.ids)\n        return {\n            'doc_ids': self.ids,\n            'doc_model': holidays_report.model,\n            'docs': holidays,\n            'get_header_info': self._get_header_info(data['form']['date_from'], data['form']['holiday_type']),\n            'get_day': self._get_day(data['form']['date_from']),\n            'get_months': self._get_months(data['form']['date_from']),\n            'get_data_from_report': self._get_data_from_report(data['form']),\n            'get_holidays_status': self._get_holidays_status(),\n        }\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "holidays_summary_report.py", "id": "6e4184e5d40cbead89a699cc6a7747f6", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_holidays/report/holidays_summary_report.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}