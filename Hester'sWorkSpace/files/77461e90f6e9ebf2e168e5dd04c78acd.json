{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    get_element_by_id,\n    int_or_none,\n    parse_iso8601,\n    str_to_int,\n)\n\n\nclass IzleseneIE(InfoExtractor):\n    _VALID_URL = r\n    _TESTS = [\n        {\n            'url': 'http://www.izlesene.com/video/sevincten-cildirtan-dogum-gunu-hediyesi/7599694',\n            'md5': '4384f9f0ea65086734b881085ee05ac2',\n            'info_dict': {\n                'id': '7599694',\n                'ext': 'mp4',\n                'title': 'Sevin\u00e7ten \u00c7\u0131ld\u0131rtan Do\u011fum G\u00fcn\u00fc Hediyesi',\n                'description': 'md5:253753e2655dde93f59f74b572454f6d',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'uploader_id': 'pelikzzle',\n                'timestamp': int,\n                'upload_date': '20140702',\n                'duration': 95.395,\n                'age_limit': 0,\n            }\n        },\n        {\n            'url': 'http://www.izlesene.com/video/tarkan-dortmund-2006-konseri/17997',\n            'md5': '97f09b6872bffa284cb7fa4f6910cb72',\n            'info_dict': {\n                'id': '17997',\n                'ext': 'mp4',\n                'title': 'Tarkan Dortmund 2006 Konseri',\n                'thumbnail': r're:^https://.*\\.jpg',\n                'uploader_id': 'parlayankiz',\n                'timestamp': int,\n                'upload_date': '20061112',\n                'duration': 253.666,\n                'age_limit': 0,\n            }\n        },\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        url = 'http://www.izlesene.com/video/%s' % video_id\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage, default=None)\n        thumbnail = self._proto_relative_url(\n            self._og_search_thumbnail(webpage), scheme='http:')\n\n        uploader = self._html_search_regex(\n            r\"adduserUsername\\s*=\\s*'([^']+)';\",\n            webpage, 'uploader', fatal=False)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage, 'upload date'))\n\n        duration = float_or_none(self._html_search_regex(\n            r'\"videoduration\"\\s*:\\s*\"([^\"]+)\"',\n            webpage, 'duration', fatal=False), scale=1000)\n\n        view_count = str_to_int(get_element_by_id('videoViewCount', webpage))\n        comment_count = self._html_search_regex(\n            r'comment_count\\s*=\\s*\\'([^\\']+)\\';',\n            webpage, 'comment_count', fatal=False)\n\n        content_url = self._html_search_meta(\n            'contentURL', webpage, 'content URL', fatal=False)\n        ext = determine_ext(content_url, 'mp4')\n\n        \n        streams = self._html_search_regex(\n            r'\"qualitylevel\"\\s*:\\s*\"([^\"]+)\"', webpage, 'streams', default='')\n\n        formats = []\n        if streams:\n            for stream in streams.split('|'):\n                quality, url = re.search(r'\\[(\\w+)\\](.+)', stream).groups()\n                formats.append({\n                    'format_id': '%sp' % quality if quality else 'sd',\n                    'url': compat_urllib_parse_unquote(url),\n                    'ext': ext,\n                })\n        else:\n            stream_url = self._search_regex(\n                r'\"streamurl\"\\s*:\\s*\"([^\"]+)\"', webpage, 'stream URL')\n            formats.append({\n                'format_id': 'sd',\n                'url': compat_urllib_parse_unquote(stream_url),\n                'ext': ext,\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader_id': uploader,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': int_or_none(view_count),\n            'comment_count': int_or_none(comment_count),\n            'age_limit': self._family_friendly_search(webpage),\n            'formats': formats,\n        }\n", "comments": "(?x)\n        https?://(?:(?:www|m)\\.)?izlesene\\.com/\n        (?:video|embedplayer)/(?:[^/]+/)?(?P<id>[0-9]+)\n        \n \n# coding: utf-8\n# Might be empty for some videos.\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_urllib_parse_unquote\nfrom ..utils import (\n    determine_ext,\n    float_or_none,\n    get_element_by_id,\n    int_or_none,\n    parse_iso8601,\n    str_to_int,\n)\n\n\nclass IzleseneIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n        https?://(?:(?:www|m)\\.)?izlesene\\.com/\n        (?:video|embedplayer)/(?:[^/]+/)?(?P<id>[0-9]+)\n        '''\n    _TESTS = [\n        {\n            'url': 'http://www.izlesene.com/video/sevincten-cildirtan-dogum-gunu-hediyesi/7599694',\n            'md5': '4384f9f0ea65086734b881085ee05ac2',\n            'info_dict': {\n                'id': '7599694',\n                'ext': 'mp4',\n                'title': 'Sevin\u00e7ten \u00c7\u0131ld\u0131rtan Do\u011fum G\u00fcn\u00fc Hediyesi',\n                'description': 'md5:253753e2655dde93f59f74b572454f6d',\n                'thumbnail': r're:^https?://.*\\.jpg',\n                'uploader_id': 'pelikzzle',\n                'timestamp': int,\n                'upload_date': '20140702',\n                'duration': 95.395,\n                'age_limit': 0,\n            }\n        },\n        {\n            'url': 'http://www.izlesene.com/video/tarkan-dortmund-2006-konseri/17997',\n            'md5': '97f09b6872bffa284cb7fa4f6910cb72',\n            'info_dict': {\n                'id': '17997',\n                'ext': 'mp4',\n                'title': 'Tarkan Dortmund 2006 Konseri',\n                'thumbnail': r're:^https://.*\\.jpg',\n                'uploader_id': 'parlayankiz',\n                'timestamp': int,\n                'upload_date': '20061112',\n                'duration': 253.666,\n                'age_limit': 0,\n            }\n        },\n    ]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        url = 'http://www.izlesene.com/video/%s' % video_id\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._og_search_title(webpage)\n        description = self._og_search_description(webpage, default=None)\n        thumbnail = self._proto_relative_url(\n            self._og_search_thumbnail(webpage), scheme='http:')\n\n        uploader = self._html_search_regex(\n            r\"adduserUsername\\s*=\\s*'([^']+)';\",\n            webpage, 'uploader', fatal=False)\n        timestamp = parse_iso8601(self._html_search_meta(\n            'uploadDate', webpage, 'upload date'))\n\n        duration = float_or_none(self._html_search_regex(\n            r'\"videoduration\"\\s*:\\s*\"([^\"]+)\"',\n            webpage, 'duration', fatal=False), scale=1000)\n\n        view_count = str_to_int(get_element_by_id('videoViewCount', webpage))\n        comment_count = self._html_search_regex(\n            r'comment_count\\s*=\\s*\\'([^\\']+)\\';',\n            webpage, 'comment_count', fatal=False)\n\n        content_url = self._html_search_meta(\n            'contentURL', webpage, 'content URL', fatal=False)\n        ext = determine_ext(content_url, 'mp4')\n\n        # Might be empty for some videos.\n        streams = self._html_search_regex(\n            r'\"qualitylevel\"\\s*:\\s*\"([^\"]+)\"', webpage, 'streams', default='')\n\n        formats = []\n        if streams:\n            for stream in streams.split('|'):\n                quality, url = re.search(r'\\[(\\w+)\\](.+)', stream).groups()\n                formats.append({\n                    'format_id': '%sp' % quality if quality else 'sd',\n                    'url': compat_urllib_parse_unquote(url),\n                    'ext': ext,\n                })\n        else:\n            stream_url = self._search_regex(\n                r'\"streamurl\"\\s*:\\s*\"([^\"]+)\"', webpage, 'stream URL')\n            formats.append({\n                'format_id': 'sd',\n                'url': compat_urllib_parse_unquote(stream_url),\n                'ext': ext,\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader_id': uploader,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': int_or_none(view_count),\n            'comment_count': int_or_none(comment_count),\n            'age_limit': self._family_friendly_search(webpage),\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "izlesene.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/izlesene.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}