{"author": "getsentry", "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport pytest\n\nfrom django.conf import settings\n\nfrom sentry.models import Event, Group\nfrom sentry.tagstore.models import GroupTagKey, GroupTagValue, TagValue\nfrom sentry.runner.commands.cleanup import cleanup\nfrom sentry.testutils import CliTestCase\n\nALL_MODELS = (Event, Group, GroupTagKey, GroupTagValue, TagValue)\n\n\nclass SentryCleanupTest(CliTestCase):\n    fixtures = ['tests/fixtures/cleanup.json']\n\n    if settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.legacy.LegacyTagStorage'):\n        fixtures += ['tests/fixtures/cleanup-tagstore-legacy.json']\n    elif settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.v2'):\n        fixtures += ['tests/fixtures/cleanup-tagstore-v2.json']\n    elif settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.multi'):\n        fixtures += ['tests/fixtures/cleanup-tagstore-legacy.json',\n                     'tests/fixtures/cleanup-tagstore-v2.json']\n    else:\n        raise NotImplementedError\n\n    command = cleanup\n\n    @pytest.mark.skipif(\n        settings.SENTRY_TAGSTORE == 'sentry.tagstore.v2.V2TagStorage',\n        reason='Cleanup is temporarily disabled for tagstore v2'\n    )\n    def test_simple(self):\n        rv = self.invoke('--days=1')\n        assert rv.exit_code == 0, rv.output\n\n        for model in ALL_MODELS:\n            assert model.objects.count() == 0\n\n    @pytest.mark.skipif(\n        settings.SENTRY_TAGSTORE == 'sentry.tagstore.v2.V2TagStorage',\n        reason='Cleanup is temporarily disabled for tagstore v2'\n    )\n    def test_project(self):\n        orig_counts = {}\n        for model in ALL_MODELS:\n            count = model.objects.count()\n            assert count > 0\n            orig_counts[model] = count\n\n        rv = self.invoke('--days=1', '--project=2')\n        assert rv.exit_code == 0, rv.output\n\n        for model in ALL_MODELS:\n            assert model.objects.count() == orig_counts[model]\n\n        rv = self.invoke('--days=1', '--project=1')\n        assert rv.exit_code == 0, rv.output\n\n        for model in ALL_MODELS:\n            assert model.objects.count() == 0\n", "comments": "      coding  utf 8     ", "content": "# -*- coding: utf-8 -*-\n\nfrom __future__ import absolute_import\n\nimport pytest\n\nfrom django.conf import settings\n\nfrom sentry.models import Event, Group\nfrom sentry.tagstore.models import GroupTagKey, GroupTagValue, TagValue\nfrom sentry.runner.commands.cleanup import cleanup\nfrom sentry.testutils import CliTestCase\n\nALL_MODELS = (Event, Group, GroupTagKey, GroupTagValue, TagValue)\n\n\nclass SentryCleanupTest(CliTestCase):\n    fixtures = ['tests/fixtures/cleanup.json']\n\n    if settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.legacy.LegacyTagStorage'):\n        fixtures += ['tests/fixtures/cleanup-tagstore-legacy.json']\n    elif settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.v2'):\n        fixtures += ['tests/fixtures/cleanup-tagstore-v2.json']\n    elif settings.SENTRY_TAGSTORE.startswith('sentry.tagstore.multi'):\n        fixtures += ['tests/fixtures/cleanup-tagstore-legacy.json',\n                     'tests/fixtures/cleanup-tagstore-v2.json']\n    else:\n        raise NotImplementedError\n\n    command = cleanup\n\n    @pytest.mark.skipif(\n        settings.SENTRY_TAGSTORE == 'sentry.tagstore.v2.V2TagStorage',\n        reason='Cleanup is temporarily disabled for tagstore v2'\n    )\n    def test_simple(self):\n        rv = self.invoke('--days=1')\n        assert rv.exit_code == 0, rv.output\n\n        for model in ALL_MODELS:\n            assert model.objects.count() == 0\n\n    @pytest.mark.skipif(\n        settings.SENTRY_TAGSTORE == 'sentry.tagstore.v2.V2TagStorage',\n        reason='Cleanup is temporarily disabled for tagstore v2'\n    )\n    def test_project(self):\n        orig_counts = {}\n        for model in ALL_MODELS:\n            count = model.objects.count()\n            assert count > 0\n            orig_counts[model] = count\n\n        rv = self.invoke('--days=1', '--project=2')\n        assert rv.exit_code == 0, rv.output\n\n        for model in ALL_MODELS:\n            assert model.objects.count() == orig_counts[model]\n\n        rv = self.invoke('--days=1', '--project=1')\n        assert rv.exit_code == 0, rv.output\n\n        for model in ALL_MODELS:\n            assert model.objects.count() == 0\n", "description": "Sentry is a cross-platform crash reporting and aggregation platform.", "file_name": "test_cleanup.py", "id": "2ff7c646a03a89ffdc6105ed3fa31011", "language": "Python", "project_name": "sentry", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/getsentry-sentry/getsentry-sentry-6a9c7e2/tests/sentry/runner/commands/test_cleanup.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:24Z", "url": "https://github.com/getsentry/sentry", "wiki": false}