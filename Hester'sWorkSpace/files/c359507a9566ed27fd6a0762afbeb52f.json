{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\nimport json\n\nimport requests\n\nfrom odoo import api, fields, models, tools, _\nfrom odoo.exceptions import UserError\n\n\ndef geo_find(addr):\n    if not addr:\n        return None\n    url = 'https://maps.googleapis.com/maps/api/geocode/json'\n    try:\n        result = requests.get(url, params={'sensor': 'false', 'address': addr}).json()\n    except Exception as e:\n        raise UserError(_('Cannot contact geolocation servers. Please make sure that your Internet connection is up and running (%s).') % e)\n\n    if result['status'] != 'OK':\n        return None\n\n    try:\n        geo = result['results'][0]['geometry']['location']\n        return float(geo['lat']), float(geo['lng'])\n    except (KeyError, ValueError):\n        return None\n\n\ndef geo_query_address(street=None, zip=None, city=None, state=None, country=None):\n    if country and ',' in country and (country.endswith(' of') or country.endswith(' of the')):\n        \n        \n        country = '{1} {0}'.format(*country.split(',', 1))\n    return tools.ustr(', '.join(\n        field for field in [street, (\"%s %s\" % (zip or '', city or '')).strip(), state, country]\n        if field\n    ))\n\n\nclass ResPartner(models.Model):\n    _inherit = \"res.partner\"\n\n    partner_latitude = fields.Float(string='Geo Latitude', digits=(16, 5))\n    partner_longitude = fields.Float(string='Geo Longitude', digits=(16, 5))\n    date_localization = fields.Date(string='Geolocation Date')\n\n    @api.multi\n    def geo_localize(self):\n        \n        for partner in self.with_context(lang='en_US'):\n            result = geo_find(geo_query_address(street=partner.street,\n                                                zip=partner.zip,\n                                                city=partner.city,\n                                                state=partner.state_id.name,\n                                                country=partner.country_id.name))\n            if result is None:\n                result = geo_find(geo_query_address(\n                    city=partner.city,\n                    state=partner.state_id.name,\n                    country=partner.country_id.name\n                ))\n\n            if result:\n                partner.write({\n                    'partner_latitude': result[0],\n                    'partner_longitude': result[1],\n                    'date_localization': fields.Date.context_today(partner)\n                })\n        return True\n", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     put country qualifier front  otherwise gmap gives wrong results     e g   congo  democratic republic      democratic republic congo     we need country names english ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\nimport json\n\nimport requests\n\nfrom odoo import api, fields, models, tools, _\nfrom odoo.exceptions import UserError\n\n\ndef geo_find(addr):\n    if not addr:\n        return None\n    url = 'https://maps.googleapis.com/maps/api/geocode/json'\n    try:\n        result = requests.get(url, params={'sensor': 'false', 'address': addr}).json()\n    except Exception as e:\n        raise UserError(_('Cannot contact geolocation servers. Please make sure that your Internet connection is up and running (%s).') % e)\n\n    if result['status'] != 'OK':\n        return None\n\n    try:\n        geo = result['results'][0]['geometry']['location']\n        return float(geo['lat']), float(geo['lng'])\n    except (KeyError, ValueError):\n        return None\n\n\ndef geo_query_address(street=None, zip=None, city=None, state=None, country=None):\n    if country and ',' in country and (country.endswith(' of') or country.endswith(' of the')):\n        # put country qualifier in front, otherwise GMap gives wrong results,\n        # e.g. 'Congo, Democratic Republic of the' => 'Democratic Republic of the Congo'\n        country = '{1} {0}'.format(*country.split(',', 1))\n    return tools.ustr(', '.join(\n        field for field in [street, (\"%s %s\" % (zip or '', city or '')).strip(), state, country]\n        if field\n    ))\n\n\nclass ResPartner(models.Model):\n    _inherit = \"res.partner\"\n\n    partner_latitude = fields.Float(string='Geo Latitude', digits=(16, 5))\n    partner_longitude = fields.Float(string='Geo Longitude', digits=(16, 5))\n    date_localization = fields.Date(string='Geolocation Date')\n\n    @api.multi\n    def geo_localize(self):\n        # We need country names in English below\n        for partner in self.with_context(lang='en_US'):\n            result = geo_find(geo_query_address(street=partner.street,\n                                                zip=partner.zip,\n                                                city=partner.city,\n                                                state=partner.state_id.name,\n                                                country=partner.country_id.name))\n            if result is None:\n                result = geo_find(geo_query_address(\n                    city=partner.city,\n                    state=partner.state_id.name,\n                    country=partner.country_id.name\n                ))\n\n            if result:\n                partner.write({\n                    'partner_latitude': result[0],\n                    'partner_longitude': result[1],\n                    'date_localization': fields.Date.context_today(partner)\n                })\n        return True\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "res_partner.py", "id": "c359507a9566ed27fd6a0762afbeb52f", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/base_geolocalize/models/res_partner.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}