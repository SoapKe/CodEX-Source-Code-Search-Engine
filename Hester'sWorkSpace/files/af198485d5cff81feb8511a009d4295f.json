{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import models, fields, api, _\nfrom odoo.exceptions import UserError\n\n\nclass Project(models.Model):\n    _inherit = \"project.project\"\n\n    allow_timesheets = fields.Boolean(\"Allow timesheets\", default=True)\n\n\nclass Task(models.Model):\n    _inherit = \"project.task\"\n\n    @api.depends('stage_id', 'timesheet_ids.unit_amount', 'planned_hours', 'child_ids.stage_id',\n                 'child_ids.planned_hours', 'child_ids.effective_hours', 'child_ids.children_hours', 'child_ids.timesheet_ids.unit_amount')\n    def _hours_get(self):\n        for task in self.sorted(key='id', reverse=True):\n            children_hours = 0\n            for child_task in task.child_ids:\n                if child_task.stage_id and child_task.stage_id.fold:\n                    children_hours += child_task.effective_hours + child_task.children_hours\n                else:\n                    children_hours += max(child_task.planned_hours, child_task.effective_hours + child_task.children_hours)\n\n            task.children_hours = children_hours\n            task.effective_hours = sum(task.sudo().timesheet_ids.mapped('unit_amount'))  # use 'sudo' here to allow project user (without timesheet user right) to create task\n            task.remaining_hours = task.planned_hours - task.effective_hours - task.children_hours\n            task.total_hours = max(task.planned_hours, task.effective_hours)\n            task.total_hours_spent = task.effective_hours + task.children_hours\n            task.delay_hours = max(-task.remaining_hours, 0.0)\n\n            if task.stage_id and task.stage_id.fold:\n                task.progress = 100.0\n            elif (task.planned_hours > 0.0):\n                task.progress = round(100.0 * (task.effective_hours + task.children_hours) / task.planned_hours, 2)\n            else:\n                task.progress = 0.0\n\n    remaining_hours = fields.Float(compute='_hours_get', store=True, string='Remaining Hours', help=\"Total remaining time, can be re-estimated periodically by the assignee of the task.\")\n    effective_hours = fields.Float(compute='_hours_get', store=True, string='Hours Spent', help=\"Computed using the sum of the task work done.\")\n    total_hours = fields.Float(compute='_hours_get', store=True, string='Total', help=\"Computed as: Time Spent + Remaining Time.\")\n    total_hours_spent = fields.Float(compute='_hours_get', store=True, string='Total Hours', help=\"Computed as: Time Spent + Sub-tasks Hours.\")\n    progress = fields.Float(compute='_hours_get', store=True, string='Progress', group_operator=\"avg\")\n    delay_hours = fields.Float(compute='_hours_get', store=True, string='Delay Hours', help=\"Computed as difference between planned hours by the project manager and the total hours of the task.\")\n    children_hours = fields.Float(compute='_hours_get', store=True, string='Sub-tasks Hours', help=\"Sum of the planned hours of all sub-tasks (when a sub-task is closed or its spent hours exceed its planned hours, spent hours are counted instead)\")\n    timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets')\n\n    _constraints = [(models.BaseModel._check_recursion, 'Circular references are not permitted between tasks and sub-tasks', ['parent_id'])]\n\n\n    @api.model\n    def create(self, vals):\n        context = dict(self.env.context)\n        \n        if context.get('default_parent_id', False):\n            vals['parent_id'] = context.pop('default_parent_id', None)\n        task = super(Task, self.with_context(context)).create(vals)\n        return task\n\n    @api.multi\n    def write(self, values):\n        result = super(Task, self).write(values)\n        \n        if 'project_id' in values:\n            project_id = values.get('project_id')\n            # a timesheet must have an analytic account (and a project)\n            if self and not project_id:\n                raise UserError(_('This task must have a project since they are linked to timesheets.'))\n            self.sudo().mapped('timesheet_ids').write({\n                'project_id': project_id,\n                'account_id': self.env['project.project'].browse(project_id).sudo().analytic_account_id.id\n            })\n        return result", "comments": "      coding  utf 8        part odoo  see license file full copyright licensing details     use  sudo  allow project user (without timesheet user right) create task    remove default parent id avoid confusion get record data    reassign project id related timesheet lines    timesheet must analytic account (and project) ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import models, fields, api, _\nfrom odoo.exceptions import UserError\n\n\nclass Project(models.Model):\n    _inherit = \"project.project\"\n\n    allow_timesheets = fields.Boolean(\"Allow timesheets\", default=True)\n\n\nclass Task(models.Model):\n    _inherit = \"project.task\"\n\n    @api.depends('stage_id', 'timesheet_ids.unit_amount', 'planned_hours', 'child_ids.stage_id',\n                 'child_ids.planned_hours', 'child_ids.effective_hours', 'child_ids.children_hours', 'child_ids.timesheet_ids.unit_amount')\n    def _hours_get(self):\n        for task in self.sorted(key='id', reverse=True):\n            children_hours = 0\n            for child_task in task.child_ids:\n                if child_task.stage_id and child_task.stage_id.fold:\n                    children_hours += child_task.effective_hours + child_task.children_hours\n                else:\n                    children_hours += max(child_task.planned_hours, child_task.effective_hours + child_task.children_hours)\n\n            task.children_hours = children_hours\n            task.effective_hours = sum(task.sudo().timesheet_ids.mapped('unit_amount'))  # use 'sudo' here to allow project user (without timesheet user right) to create task\n            task.remaining_hours = task.planned_hours - task.effective_hours - task.children_hours\n            task.total_hours = max(task.planned_hours, task.effective_hours)\n            task.total_hours_spent = task.effective_hours + task.children_hours\n            task.delay_hours = max(-task.remaining_hours, 0.0)\n\n            if task.stage_id and task.stage_id.fold:\n                task.progress = 100.0\n            elif (task.planned_hours > 0.0):\n                task.progress = round(100.0 * (task.effective_hours + task.children_hours) / task.planned_hours, 2)\n            else:\n                task.progress = 0.0\n\n    remaining_hours = fields.Float(compute='_hours_get', store=True, string='Remaining Hours', help=\"Total remaining time, can be re-estimated periodically by the assignee of the task.\")\n    effective_hours = fields.Float(compute='_hours_get', store=True, string='Hours Spent', help=\"Computed using the sum of the task work done.\")\n    total_hours = fields.Float(compute='_hours_get', store=True, string='Total', help=\"Computed as: Time Spent + Remaining Time.\")\n    total_hours_spent = fields.Float(compute='_hours_get', store=True, string='Total Hours', help=\"Computed as: Time Spent + Sub-tasks Hours.\")\n    progress = fields.Float(compute='_hours_get', store=True, string='Progress', group_operator=\"avg\")\n    delay_hours = fields.Float(compute='_hours_get', store=True, string='Delay Hours', help=\"Computed as difference between planned hours by the project manager and the total hours of the task.\")\n    children_hours = fields.Float(compute='_hours_get', store=True, string='Sub-tasks Hours', help=\"Sum of the planned hours of all sub-tasks (when a sub-task is closed or its spent hours exceed its planned hours, spent hours are counted instead)\")\n    timesheet_ids = fields.One2many('account.analytic.line', 'task_id', 'Timesheets')\n\n    _constraints = [(models.BaseModel._check_recursion, 'Circular references are not permitted between tasks and sub-tasks', ['parent_id'])]\n\n\n    @api.model\n    def create(self, vals):\n        context = dict(self.env.context)\n        # Remove default_parent_id to avoid a confusion in get_record_data\n        if context.get('default_parent_id', False):\n            vals['parent_id'] = context.pop('default_parent_id', None)\n        task = super(Task, self.with_context(context)).create(vals)\n        return task\n\n    @api.multi\n    def write(self, values):\n        result = super(Task, self).write(values)\n        # reassign project_id on related timesheet lines\n        if 'project_id' in values:\n            project_id = values.get('project_id')\n            # a timesheet must have an analytic account (and a project)\n            if self and not project_id:\n                raise UserError(_('This task must have a project since they are linked to timesheets.'))\n            self.sudo().mapped('timesheet_ids').write({\n                'project_id': project_id,\n                'account_id': self.env['project.project'].browse(project_id).sudo().analytic_account_id.id\n            })\n        return result", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "project.py", "id": "af198485d5cff81feb8511a009d4295f", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_timesheet/models/project.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}