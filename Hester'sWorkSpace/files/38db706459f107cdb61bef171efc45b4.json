{"author": "openai", "code": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass AntEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'ant.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def step(self, a):\n        xposbefore = self.get_body_com(\"torso\")[0]\n        self.do_simulation(a, self.frame_skip)\n        xposafter = self.get_body_com(\"torso\")[0]\n        forward_reward = (xposafter - xposbefore)/self.dt\n        ctrl_cost = .5 * np.square(a).sum()\n        contact_cost = 0.5 * 1e-3 * np.sum(\n            np.square(np.clip(self.sim.data.cfrc_ext, -1, 1)))\n        survive_reward = 1.0\n        reward = forward_reward - ctrl_cost - contact_cost + survive_reward\n        state = self.state_vector()\n        notdone = np.isfinite(state).all() \\\n            and state[2] >= 0.2 and state[2] <= 1.0\n        done = not notdone\n        ob = self._get_obs()\n        return ob, reward, done, dict(\n            reward_forward=forward_reward,\n            reward_ctrl=-ctrl_cost,\n            reward_contact=-contact_cost,\n            reward_survive=survive_reward)\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[2:],\n            self.sim.data.qvel.flat,\n            np.clip(self.sim.data.cfrc_ext, -1, 1).flat,\n        ])\n\n    def reset_model(self):\n        qpos = self.init_qpos + self.np_random.uniform(size=self.model.nq, low=-.1, high=.1)\n        qvel = self.init_qvel + self.np_random.randn(self.model.nv) * .1\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.distance = self.model.stat.extent * 0.5\n", "comments": "", "content": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass AntEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        mujoco_env.MujocoEnv.__init__(self, 'ant.xml', 5)\n        utils.EzPickle.__init__(self)\n\n    def step(self, a):\n        xposbefore = self.get_body_com(\"torso\")[0]\n        self.do_simulation(a, self.frame_skip)\n        xposafter = self.get_body_com(\"torso\")[0]\n        forward_reward = (xposafter - xposbefore)/self.dt\n        ctrl_cost = .5 * np.square(a).sum()\n        contact_cost = 0.5 * 1e-3 * np.sum(\n            np.square(np.clip(self.sim.data.cfrc_ext, -1, 1)))\n        survive_reward = 1.0\n        reward = forward_reward - ctrl_cost - contact_cost + survive_reward\n        state = self.state_vector()\n        notdone = np.isfinite(state).all() \\\n            and state[2] >= 0.2 and state[2] <= 1.0\n        done = not notdone\n        ob = self._get_obs()\n        return ob, reward, done, dict(\n            reward_forward=forward_reward,\n            reward_ctrl=-ctrl_cost,\n            reward_contact=-contact_cost,\n            reward_survive=survive_reward)\n\n    def _get_obs(self):\n        return np.concatenate([\n            self.sim.data.qpos.flat[2:],\n            self.sim.data.qvel.flat,\n            np.clip(self.sim.data.cfrc_ext, -1, 1).flat,\n        ])\n\n    def reset_model(self):\n        qpos = self.init_qpos + self.np_random.uniform(size=self.model.nq, low=-.1, high=.1)\n        qvel = self.init_qvel + self.np_random.randn(self.model.nv) * .1\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def viewer_setup(self):\n        self.viewer.cam.distance = self.model.stat.extent * 0.5\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "ant.py", "id": "38db706459f107cdb61bef171efc45b4", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/openai-gym/openai-gym-6160181/gym/envs/mujoco/ant.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:23:49Z", "url": "https://github.com/openai/gym", "wiki": true}