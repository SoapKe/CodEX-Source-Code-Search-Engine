{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_strdate,\n    unescapeHTML,\n)\n\n\nclass UstudioIE(InfoExtractor):\n    IE_NAME = 'ustudio'\n    _VALID_URL = r'https?://(?:(?:www|v1)\\.)?ustudio\\.com/video/(?P<id>[^/]+)/(?P<display_id>[^/?\n    _TEST = {\n        'url': 'http://ustudio.com/video/Uxu2my9bgSph/san_francisco_golden_gate_bridge',\n        'md5': '58bbfca62125378742df01fc2abbdef6',\n        'info_dict': {\n            'id': 'Uxu2my9bgSph',\n            'display_id': 'san_francisco_golden_gate_bridge',\n            'ext': 'mp4',\n            'title': 'San Francisco: Golden Gate Bridge',\n            'description': 'md5:23925500697f2c6d4830e387ba51a9be',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20111107',\n            'uploader': 'Tony Farley',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id, display_id = re.match(self._VALID_URL, url).groups()\n\n        config = self._download_xml(\n            'http://v1.ustudio.com/embed/%s/ustudio/config.xml' % video_id,\n            display_id)\n\n        def extract(kind):\n            return [{\n                'url': unescapeHTML(item.attrib['url']),\n                'width': int_or_none(item.get('width')),\n                'height': int_or_none(item.get('height')),\n            } for item in config.findall('./qualities/quality/%s' % kind) if item.get('url')]\n\n        formats = extract('video')\n        self._sort_formats(formats)\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._og_search_title(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'(?s)Uploaded by\\s*.+?\\s*on\\s*<span>([^<]+)</span>',\n            webpage, 'upload date', fatal=False))\n        uploader = self._search_regex(\n            r'Uploaded by\\s*<a[^>]*>([^<]+)<',\n            webpage, 'uploader', fatal=False)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'thumbnails': extract('image'),\n            'upload_date': upload_date,\n            'uploader': uploader,\n            'formats': formats,\n        }\n\n\nclass UstudioEmbedIE(InfoExtractor):\n    IE_NAME = 'ustudio:embed'\n    _VALID_URL = r'https?://(?:(?:app|embed)\\.)?ustudio\\.com/embed/(?P<uid>[^/]+)/(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://app.ustudio.com/embed/DeN7VdYRDKhP/Uw7G1kMCe65T',\n        'md5': '47c0be52a09b23a7f40de9469cec58f4',\n        'info_dict': {\n            'id': 'Uw7G1kMCe65T',\n            'ext': 'mp4',\n            'title': '5 Things IT Should Know About Video',\n            'description': 'md5:93d32650884b500115e158c5677d25ad',\n            'uploader_id': 'DeN7VdYRDKhP',\n        }\n    }\n\n    def _real_extract(self, url):\n        uploader_id, video_id = re.match(self._VALID_URL, url).groups()\n        video_data = self._download_json(\n            'http://app.ustudio.com/embed/%s/%s/config.json' % (uploader_id, video_id),\n            video_id)['videos'][0]\n        title = video_data['name']\n\n        formats = []\n        for ext, qualities in video_data.get('transcodes', {}).items():\n            for quality in qualities:\n                quality_url = quality.get('url')\n                if not quality_url:\n                    continue\n                height = int_or_none(quality.get('height'))\n                formats.append({\n                    'format_id': '%s-%dp' % (ext, height) if height else ext,\n                    'url': quality_url,\n                    'width': int_or_none(quality.get('width')),\n                    'height': height,\n                })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for image in video_data.get('images', []):\n            image_url = image.get('url')\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': image_url,\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'duration': int_or_none(video_data.get('duration')),\n            'uploader_id': uploader_id,\n            'tags': video_data.get('keywords'),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "comments": "#&]+)'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    int_or_none,\n    unified_strdate,\n    unescapeHTML,\n)\n\n\nclass UstudioIE(InfoExtractor):\n    IE_NAME = 'ustudio'\n    _VALID_URL = r'https?://(?:(?:www|v1)\\.)?ustudio\\.com/video/(?P<id>[^/]+)/(?P<display_id>[^/?#&]+)'\n    _TEST = {\n        'url': 'http://ustudio.com/video/Uxu2my9bgSph/san_francisco_golden_gate_bridge',\n        'md5': '58bbfca62125378742df01fc2abbdef6',\n        'info_dict': {\n            'id': 'Uxu2my9bgSph',\n            'display_id': 'san_francisco_golden_gate_bridge',\n            'ext': 'mp4',\n            'title': 'San Francisco: Golden Gate Bridge',\n            'description': 'md5:23925500697f2c6d4830e387ba51a9be',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'upload_date': '20111107',\n            'uploader': 'Tony Farley',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id, display_id = re.match(self._VALID_URL, url).groups()\n\n        config = self._download_xml(\n            'http://v1.ustudio.com/embed/%s/ustudio/config.xml' % video_id,\n            display_id)\n\n        def extract(kind):\n            return [{\n                'url': unescapeHTML(item.attrib['url']),\n                'width': int_or_none(item.get('width')),\n                'height': int_or_none(item.get('height')),\n            } for item in config.findall('./qualities/quality/%s' % kind) if item.get('url')]\n\n        formats = extract('video')\n        self._sort_formats(formats)\n\n        webpage = self._download_webpage(url, display_id)\n\n        title = self._og_search_title(webpage)\n        upload_date = unified_strdate(self._search_regex(\n            r'(?s)Uploaded by\\s*.+?\\s*on\\s*<span>([^<]+)</span>',\n            webpage, 'upload date', fatal=False))\n        uploader = self._search_regex(\n            r'Uploaded by\\s*<a[^>]*>([^<]+)<',\n            webpage, 'uploader', fatal=False)\n\n        return {\n            'id': video_id,\n            'display_id': display_id,\n            'title': title,\n            'description': self._og_search_description(webpage),\n            'thumbnails': extract('image'),\n            'upload_date': upload_date,\n            'uploader': uploader,\n            'formats': formats,\n        }\n\n\nclass UstudioEmbedIE(InfoExtractor):\n    IE_NAME = 'ustudio:embed'\n    _VALID_URL = r'https?://(?:(?:app|embed)\\.)?ustudio\\.com/embed/(?P<uid>[^/]+)/(?P<id>[^/]+)'\n    _TEST = {\n        'url': 'http://app.ustudio.com/embed/DeN7VdYRDKhP/Uw7G1kMCe65T',\n        'md5': '47c0be52a09b23a7f40de9469cec58f4',\n        'info_dict': {\n            'id': 'Uw7G1kMCe65T',\n            'ext': 'mp4',\n            'title': '5 Things IT Should Know About Video',\n            'description': 'md5:93d32650884b500115e158c5677d25ad',\n            'uploader_id': 'DeN7VdYRDKhP',\n        }\n    }\n\n    def _real_extract(self, url):\n        uploader_id, video_id = re.match(self._VALID_URL, url).groups()\n        video_data = self._download_json(\n            'http://app.ustudio.com/embed/%s/%s/config.json' % (uploader_id, video_id),\n            video_id)['videos'][0]\n        title = video_data['name']\n\n        formats = []\n        for ext, qualities in video_data.get('transcodes', {}).items():\n            for quality in qualities:\n                quality_url = quality.get('url')\n                if not quality_url:\n                    continue\n                height = int_or_none(quality.get('height'))\n                formats.append({\n                    'format_id': '%s-%dp' % (ext, height) if height else ext,\n                    'url': quality_url,\n                    'width': int_or_none(quality.get('width')),\n                    'height': height,\n                })\n        self._sort_formats(formats)\n\n        thumbnails = []\n        for image in video_data.get('images', []):\n            image_url = image.get('url')\n            if not image_url:\n                continue\n            thumbnails.append({\n                'url': image_url,\n            })\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'duration': int_or_none(video_data.get('duration')),\n            'uploader_id': uploader_id,\n            'tags': video_data.get('keywords'),\n            'thumbnails': thumbnails,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "ustudio.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/ustudio.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}