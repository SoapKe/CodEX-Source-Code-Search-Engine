{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    unescapeHTML,\n)\n\n\nclass CJSWIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?cjsw\\.com/program/(?P<program>[^/]+)/episode/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://cjsw.com/program/freshly-squeezed/episode/20170620',\n        'md5': 'cee14d40f1e9433632c56e3d14977120',\n        'info_dict': {\n            'id': '91d9f016-a2e7-46c5-8dcb-7cbcd7437c41',\n            'ext': 'mp3',\n            'title': 'Freshly Squeezed \u2013 Episode June 20, 2017',\n            'description': 'md5:c967d63366c3898a80d0c7b0ff337202',\n            'series': 'Freshly Squeezed',\n            'episode_id': '20170620',\n        },\n    }, {\n        \n        'url': 'http://cjsw.com/program/road-pops/episode/20170707/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        program, episode_id = mobj.group('program', 'id')\n        audio_id = '%s/%s' % (program, episode_id)\n\n        webpage = self._download_webpage(url, episode_id)\n\n        title = unescapeHTML(self._search_regex(\n            (r'<h1[^>]+class=[\"\\']episode-header__title[\"\\'][^>]*>(?P<title>[^<]+)',\n             r'data-audio-title=([\"\\'])(?P<title>(?:(?!\\1).)+)\\1'),\n            webpage, 'title', group='title'))\n\n        audio_url = self._search_regex(\n            r'<button[^>]+data-audio-src=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            webpage, 'audio url', group='url')\n\n        audio_id = self._search_regex(\n            r'/([\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})\\.mp3',\n            audio_url, 'audio id', default=audio_id)\n\n        formats = [{\n            'url': audio_url,\n            'ext': determine_ext(audio_url, 'mp3'),\n            'vcodec': 'none',\n        }]\n\n        description = self._html_search_regex(\n            r'<p>(?P<description>.+?)</p>', webpage, 'description',\n            default=None)\n        series = self._search_regex(\n            r'data-showname=([\"\\'])(?P<name>(?:(?!\\1).)+)\\1', webpage,\n            'series', default=program, group='name')\n\n        return {\n            'id': audio_id,\n            'title': title,\n            'description': description,\n            'formats': formats,\n            'series': series,\n            'episode_id': episode_id,\n        }\n", "comments": "# coding: utf-8\n# no description\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    unescapeHTML,\n)\n\n\nclass CJSWIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?cjsw\\.com/program/(?P<program>[^/]+)/episode/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://cjsw.com/program/freshly-squeezed/episode/20170620',\n        'md5': 'cee14d40f1e9433632c56e3d14977120',\n        'info_dict': {\n            'id': '91d9f016-a2e7-46c5-8dcb-7cbcd7437c41',\n            'ext': 'mp3',\n            'title': 'Freshly Squeezed \u2013 Episode June 20, 2017',\n            'description': 'md5:c967d63366c3898a80d0c7b0ff337202',\n            'series': 'Freshly Squeezed',\n            'episode_id': '20170620',\n        },\n    }, {\n        # no description\n        'url': 'http://cjsw.com/program/road-pops/episode/20170707/',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        program, episode_id = mobj.group('program', 'id')\n        audio_id = '%s/%s' % (program, episode_id)\n\n        webpage = self._download_webpage(url, episode_id)\n\n        title = unescapeHTML(self._search_regex(\n            (r'<h1[^>]+class=[\"\\']episode-header__title[\"\\'][^>]*>(?P<title>[^<]+)',\n             r'data-audio-title=([\"\\'])(?P<title>(?:(?!\\1).)+)\\1'),\n            webpage, 'title', group='title'))\n\n        audio_url = self._search_regex(\n            r'<button[^>]+data-audio-src=([\"\\'])(?P<url>(?:(?!\\1).)+)\\1',\n            webpage, 'audio url', group='url')\n\n        audio_id = self._search_regex(\n            r'/([\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})\\.mp3',\n            audio_url, 'audio id', default=audio_id)\n\n        formats = [{\n            'url': audio_url,\n            'ext': determine_ext(audio_url, 'mp3'),\n            'vcodec': 'none',\n        }]\n\n        description = self._html_search_regex(\n            r'<p>(?P<description>.+?)</p>', webpage, 'description',\n            default=None)\n        series = self._search_regex(\n            r'data-showname=([\"\\'])(?P<name>(?:(?!\\1).)+)\\1', webpage,\n            'series', default=program, group='name')\n\n        return {\n            'id': audio_id,\n            'title': title,\n            'description': description,\n            'formats': formats,\n            'series': series,\n            'episode_id': episode_id,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "cjsw.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/cjsw.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}