{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass PlayFMIE(InfoExtractor):\n    IE_NAME = 'play.fm'\n    _VALID_URL = r'https?://(?:www\\.)?play\\.fm/(?P<slug>(?:[^/]+/)+(?P<id>[^/]+))/?(?:$|[?\n\n    _TEST = {\n        'url': 'https://www.play.fm/dan-drastic/sven-tasnadi-leipzig-electronic-music-batofar-paris-fr-2014-07-12',\n        'md5': 'c505f8307825a245d0c7ad1850001f22',\n        'info_dict': {\n            'id': '71276',\n            'ext': 'mp3',\n            'title': 'Sven Tasnadi - LEIPZIG ELECTRONIC MUSIC @ Batofar (Paris,FR) - 2014-07-12',\n            'description': '',\n            'duration': 5627,\n            'timestamp': 1406033781,\n            'upload_date': '20140722',\n            'uploader': 'Dan Drastic',\n            'uploader_id': '71170',\n            'view_count': int,\n            'comment_count': int,\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        slug = mobj.group('slug')\n\n        recordings = self._download_json(\n            'http://v2api.play.fm/recordings/slug/%s' % slug, video_id)\n\n        error = recordings.get('error')\n        if isinstance(error, dict):\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error.get('message')),\n                expected=True)\n\n        audio_url = recordings['audio']\n        video_id = compat_str(recordings.get('id') or video_id)\n        title = recordings['title']\n        description = recordings.get('description')\n        duration = int_or_none(recordings.get('recordingDuration'))\n        timestamp = parse_iso8601(recordings.get('created_at'))\n        uploader = recordings.get('page', {}).get('title')\n        uploader_id = compat_str(recordings.get('page', {}).get('id'))\n        view_count = int_or_none(recordings.get('playCount'))\n        comment_count = int_or_none(recordings.get('commentCount'))\n        categories = [tag['name'] for tag in recordings.get('tags', []) if tag.get('name')]\n\n        return {\n            'id': video_id,\n            'url': audio_url,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'categories': categories,\n        }\n", "comments": "# coding: utf-8\n#])'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass PlayFMIE(InfoExtractor):\n    IE_NAME = 'play.fm'\n    _VALID_URL = r'https?://(?:www\\.)?play\\.fm/(?P<slug>(?:[^/]+/)+(?P<id>[^/]+))/?(?:$|[?#])'\n\n    _TEST = {\n        'url': 'https://www.play.fm/dan-drastic/sven-tasnadi-leipzig-electronic-music-batofar-paris-fr-2014-07-12',\n        'md5': 'c505f8307825a245d0c7ad1850001f22',\n        'info_dict': {\n            'id': '71276',\n            'ext': 'mp3',\n            'title': 'Sven Tasnadi - LEIPZIG ELECTRONIC MUSIC @ Batofar (Paris,FR) - 2014-07-12',\n            'description': '',\n            'duration': 5627,\n            'timestamp': 1406033781,\n            'upload_date': '20140722',\n            'uploader': 'Dan Drastic',\n            'uploader_id': '71170',\n            'view_count': int,\n            'comment_count': int,\n        },\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        slug = mobj.group('slug')\n\n        recordings = self._download_json(\n            'http://v2api.play.fm/recordings/slug/%s' % slug, video_id)\n\n        error = recordings.get('error')\n        if isinstance(error, dict):\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error.get('message')),\n                expected=True)\n\n        audio_url = recordings['audio']\n        video_id = compat_str(recordings.get('id') or video_id)\n        title = recordings['title']\n        description = recordings.get('description')\n        duration = int_or_none(recordings.get('recordingDuration'))\n        timestamp = parse_iso8601(recordings.get('created_at'))\n        uploader = recordings.get('page', {}).get('title')\n        uploader_id = compat_str(recordings.get('page', {}).get('id'))\n        view_count = int_or_none(recordings.get('playCount'))\n        comment_count = int_or_none(recordings.get('commentCount'))\n        categories = [tag['name'] for tag in recordings.get('tags', []) if tag.get('name')]\n\n        return {\n            'id': video_id,\n            'url': audio_url,\n            'title': title,\n            'description': description,\n            'duration': duration,\n            'timestamp': timestamp,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'categories': categories,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "playfm.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/playfm.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}