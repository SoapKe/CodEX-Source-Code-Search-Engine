{"author": "facebookresearch", "code": "\n\n Copyright (c) 2017-present, Facebook, Inc.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n\n\"\"\"Perform inference on a single image or all images with a certain extension\n(e.g., .jpg) in a folder. Allows for using a combination of multiple models.\nFor example, one model may be used for RPN, another model for Fast R-CNN style\nbox detection, yet another model to predict masks, and yet another model to\npredict keypoints.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport cv2   NOQA (Must import before importing caffe2 due to bug in cv2)\nimport os\nimport sys\nimport yaml\n\nfrom caffe2.python import workspace\n\nfrom core.config import assert_and_infer_cfg\nfrom core.config import cfg\nfrom core.config import merge_cfg_from_cfg\nfrom core.config import merge_cfg_from_file\nimport core.rpn_generator as rpn_engine\nimport core.test_engine as model_engine\nimport datasets.dummy_datasets as dummy_datasets\nimport utils.c2 as c2_utils\nimport utils.logging\nimport utils.vis as vis_utils\n\nc2_utils.import_detectron_ops()\n OpenCL may be enabled by default in OpenCV3; disable it because it's not\n thread safe and causes unwanted GPU memory allocations.\ncv2.ocl.setUseOpenCL(False)\n\n infer.py\n   --im [path/to/image.jpg]\n   --rpn-model [path/to/rpn/model.pkl]\n   --rpn-config [path/to/rpn/config.yaml]\n   [model1] [config1] [model2] [config2] ...\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Inference on an image')\n    parser.add_argument(\n        '--im', dest='im_file', help='input image', default=None, type=str\n    )\n    parser.add_argument(\n        '--rpn-pkl',\n        dest='rpn_pkl',\n        help='rpn model file (pkl)',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--rpn-cfg',\n        dest='rpn_cfg',\n        help='cfg model file (yaml)',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--output-dir',\n        dest='output_dir',\n        help='directory for visualization pdfs (default: /tmp/infer)',\n        default='/tmp/infer',\n        type=str\n    )\n    parser.add_argument(\n        'models_to_run',\n        help='list of pkl, yaml pairs',\n        default=None,\n        nargs=argparse.REMAINDER\n    )\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()\n\n\ndef get_rpn_box_proposals(im, args):\n    merge_cfg_from_file(args.rpn_cfg)\n    cfg.TEST.WEIGHTS = args.rpn_pkl\n    cfg.NUM_GPUS = 1\n    cfg.MODEL.RPN_ONLY = True\n    cfg.TEST.RPN_PRE_NMS_TOP_N = 10000\n    cfg.TEST.RPN_POST_NMS_TOP_N = 2000\n    assert_and_infer_cfg()\n\n    model = model_engine.initialize_model_from_cfg()\n    with c2_utils.NamedCudaScope(0):\n        boxes, scores = rpn_engine.im_proposals(model, im)\n    return boxes, scores\n\n\ndef main(args):\n    dummy_coco_dataset = dummy_datasets.get_coco_dataset()\n    cfg_orig = yaml.load(yaml.dump(cfg))\n    im = cv2.imread(args.im_file)\n\n    if args.rpn_pkl is not None:\n        proposal_boxes, _proposal_scores = get_rpn_box_proposals(im, args)\n        workspace.ResetWorkspace()\n    else:\n        proposal_boxes = None\n\n    cls_boxes, cls_segms, cls_keyps = None, None, None\n    for i in range(0, len(args.models_to_run), 2):\n        pkl = args.models_to_run[i]\n        yml = args.models_to_run[i + 1]\n        merge_cfg_from_cfg(cfg_orig)\n        merge_cfg_from_file(yml)\n        if len(pkl) > 0:\n            cfg.TEST.WEIGHTS = pkl\n        cfg.NUM_GPUS = 1\n        assert_and_infer_cfg()\n        model = model_engine.initialize_model_from_cfg()\n        with c2_utils.NamedCudaScope(0):\n            cls_boxes_, cls_segms_, cls_keyps_ = \\\n                model_engine.im_detect_all(model, im, proposal_boxes)\n        cls_boxes = cls_boxes_ if cls_boxes_ is not None else cls_boxes\n        cls_segms = cls_segms_ if cls_segms_ is not None else cls_segms\n        cls_keyps = cls_keyps_ if cls_keyps_ is not None else cls_keyps\n        workspace.ResetWorkspace()\n\n    vis_utils.vis_one_image(\n        im[:, :, ::-1],\n        args.im_file,\n        args.output_dir,\n        cls_boxes,\n        cls_segms,\n        cls_keyps,\n        dataset=dummy_coco_dataset,\n        box_alpha=0.3,\n        show_class=True,\n        thresh=0.7,\n        kp_thresh=2\n    )\n\n\ndef check_args(args):\n    assert (\n        (args.rpn_pkl is not None and args.rpn_cfg is not None) or\n        (args.rpn_pkl is None and args.rpn_cfg is None)\n    )\n    if args.rpn_pkl is not None:\n        assert os.path.exists(args.rpn_pkl)\n        assert os.path.exists(args.rpn_cfg)\n    if args.models_to_run is not None:\n        assert len(args.models_to_run) % 2 == 0\n        for model_file in args.models_to_run:\n            if len(model_file) > 0:\n                assert os.path.exists(model_file)\n\n\nif __name__ == '__main__':\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\n    utils.logging.setup_logging(__name__)\n    args = parse_args()\n    check_args(args)\n    main(args)\n", "comments": "   perform inference single image images certain extension (e g    jpg) folder  allows using combination multiple models  for example  one model may used rpn  another model fast r cnn style box detection  yet another model predict masks  yet another model predict keypoints          usr bin env python2    copyright (c) 2017 present  facebook  inc        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                     noqa (must import importing caffe2 due bug cv2)    opencl may enabled default opencv3  disable    thread safe causes unwanted gpu memory allocations     infer py        im  path image jpg         rpn model  path rpn model pkl         rpn config  path rpn config yaml        model1   config1   model2   config2      ", "content": "#!/usr/bin/env python2\n\n# Copyright (c) 2017-present, Facebook, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n##############################################################################\n\n\"\"\"Perform inference on a single image or all images with a certain extension\n(e.g., .jpg) in a folder. Allows for using a combination of multiple models.\nFor example, one model may be used for RPN, another model for Fast R-CNN style\nbox detection, yet another model to predict masks, and yet another model to\npredict keypoints.\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\n\nimport argparse\nimport cv2  # NOQA (Must import before importing caffe2 due to bug in cv2)\nimport os\nimport sys\nimport yaml\n\nfrom caffe2.python import workspace\n\nfrom core.config import assert_and_infer_cfg\nfrom core.config import cfg\nfrom core.config import merge_cfg_from_cfg\nfrom core.config import merge_cfg_from_file\nimport core.rpn_generator as rpn_engine\nimport core.test_engine as model_engine\nimport datasets.dummy_datasets as dummy_datasets\nimport utils.c2 as c2_utils\nimport utils.logging\nimport utils.vis as vis_utils\n\nc2_utils.import_detectron_ops()\n# OpenCL may be enabled by default in OpenCV3; disable it because it's not\n# thread safe and causes unwanted GPU memory allocations.\ncv2.ocl.setUseOpenCL(False)\n\n# infer.py\n#   --im [path/to/image.jpg]\n#   --rpn-model [path/to/rpn/model.pkl]\n#   --rpn-config [path/to/rpn/config.yaml]\n#   [model1] [config1] [model2] [config2] ...\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Inference on an image')\n    parser.add_argument(\n        '--im', dest='im_file', help='input image', default=None, type=str\n    )\n    parser.add_argument(\n        '--rpn-pkl',\n        dest='rpn_pkl',\n        help='rpn model file (pkl)',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--rpn-cfg',\n        dest='rpn_cfg',\n        help='cfg model file (yaml)',\n        default=None,\n        type=str\n    )\n    parser.add_argument(\n        '--output-dir',\n        dest='output_dir',\n        help='directory for visualization pdfs (default: /tmp/infer)',\n        default='/tmp/infer',\n        type=str\n    )\n    parser.add_argument(\n        'models_to_run',\n        help='list of pkl, yaml pairs',\n        default=None,\n        nargs=argparse.REMAINDER\n    )\n    if len(sys.argv) == 1:\n        parser.print_help()\n        sys.exit(1)\n    return parser.parse_args()\n\n\ndef get_rpn_box_proposals(im, args):\n    merge_cfg_from_file(args.rpn_cfg)\n    cfg.TEST.WEIGHTS = args.rpn_pkl\n    cfg.NUM_GPUS = 1\n    cfg.MODEL.RPN_ONLY = True\n    cfg.TEST.RPN_PRE_NMS_TOP_N = 10000\n    cfg.TEST.RPN_POST_NMS_TOP_N = 2000\n    assert_and_infer_cfg()\n\n    model = model_engine.initialize_model_from_cfg()\n    with c2_utils.NamedCudaScope(0):\n        boxes, scores = rpn_engine.im_proposals(model, im)\n    return boxes, scores\n\n\ndef main(args):\n    dummy_coco_dataset = dummy_datasets.get_coco_dataset()\n    cfg_orig = yaml.load(yaml.dump(cfg))\n    im = cv2.imread(args.im_file)\n\n    if args.rpn_pkl is not None:\n        proposal_boxes, _proposal_scores = get_rpn_box_proposals(im, args)\n        workspace.ResetWorkspace()\n    else:\n        proposal_boxes = None\n\n    cls_boxes, cls_segms, cls_keyps = None, None, None\n    for i in range(0, len(args.models_to_run), 2):\n        pkl = args.models_to_run[i]\n        yml = args.models_to_run[i + 1]\n        merge_cfg_from_cfg(cfg_orig)\n        merge_cfg_from_file(yml)\n        if len(pkl) > 0:\n            cfg.TEST.WEIGHTS = pkl\n        cfg.NUM_GPUS = 1\n        assert_and_infer_cfg()\n        model = model_engine.initialize_model_from_cfg()\n        with c2_utils.NamedCudaScope(0):\n            cls_boxes_, cls_segms_, cls_keyps_ = \\\n                model_engine.im_detect_all(model, im, proposal_boxes)\n        cls_boxes = cls_boxes_ if cls_boxes_ is not None else cls_boxes\n        cls_segms = cls_segms_ if cls_segms_ is not None else cls_segms\n        cls_keyps = cls_keyps_ if cls_keyps_ is not None else cls_keyps\n        workspace.ResetWorkspace()\n\n    vis_utils.vis_one_image(\n        im[:, :, ::-1],\n        args.im_file,\n        args.output_dir,\n        cls_boxes,\n        cls_segms,\n        cls_keyps,\n        dataset=dummy_coco_dataset,\n        box_alpha=0.3,\n        show_class=True,\n        thresh=0.7,\n        kp_thresh=2\n    )\n\n\ndef check_args(args):\n    assert (\n        (args.rpn_pkl is not None and args.rpn_cfg is not None) or\n        (args.rpn_pkl is None and args.rpn_cfg is None)\n    )\n    if args.rpn_pkl is not None:\n        assert os.path.exists(args.rpn_pkl)\n        assert os.path.exists(args.rpn_cfg)\n    if args.models_to_run is not None:\n        assert len(args.models_to_run) % 2 == 0\n        for model_file in args.models_to_run:\n            if len(model_file) > 0:\n                assert os.path.exists(model_file)\n\n\nif __name__ == '__main__':\n    workspace.GlobalInit(['caffe2', '--caffe2_log_level=0'])\n    utils.logging.setup_logging(__name__)\n    args = parse_args()\n    check_args(args)\n    main(args)\n", "description": "FAIR's research platform for object detection research, implementing popular algorithms like Mask R-CNN and RetinaNet.", "file_name": "infer.py", "id": "0cb9170e47ee430eec582e746816e0ae", "language": "Python", "project_name": "Detectron", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/facebookresearch-Detectron/facebookresearch-Detectron-a026d77/tools/infer.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:00:46Z", "url": "https://github.com/facebookresearch/Detectron", "wiki": false}