{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n)\n\n\nclass HotStarBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['IN']\n\n    def _download_json(self, *args, **kwargs):\n        response = super(HotStarBaseIE, self)._download_json(*args, **kwargs)\n        if response['resultCode'] != 'OK':\n            if kwargs.get('fatal'):\n                raise ExtractorError(\n                    response['errorDescription'], expected=True)\n            return None\n        return response['resultObj']\n\n    def _download_content_info(self, content_id):\n        return self._download_json(\n            'https://account.hotstar.com/AVS/besc', content_id, query={\n                'action': 'GetAggregatedContentDetails',\n                'appVersion': '5.0.40',\n                'channel': 'PCTV',\n                'contentId': content_id,\n            })['contentInfo'][0]\n\n\nclass HotStarIE(HotStarBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?hotstar\\.com/(?:.+?[/-])?(?P<id>\\d{10})'\n    _TESTS = [{\n        'url': 'http://www.hotstar.com/on-air-with-aib--english-1000076273',\n        'info_dict': {\n            'id': '1000076273',\n            'ext': 'mp4',\n            'title': 'On Air With AIB',\n            'description': 'md5:c957d8868e9bc793ccb813691cc4c434',\n            'timestamp': 1447227000,\n            'upload_date': '20151111',\n            'duration': 381,\n        },\n        'params': {\n            \n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.hotstar.com/sports/cricket/rajitha-sizzles-on-debut-with-329/2001477583',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.hotstar.com/1000000515',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_data = self._download_content_info(video_id)\n\n        title = video_data['episodeTitle']\n\n        if video_data.get('encrypted') == 'Y':\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n        formats = []\n        for f in ('JIO',):\n            format_data = self._download_json(\n                'http://getcdn.hotstar.com/AVS/besc',\n                video_id, 'Downloading %s JSON metadata' % f,\n                fatal=False, query={\n                    'action': 'GetCDN',\n                    'asJson': 'Y',\n                    'channel': f,\n                    'id': video_id,\n                    'type': 'VOD',\n                })\n            if format_data:\n                format_url = format_data.get('src')\n                if not format_url:\n                    continue\n                ext = determine_ext(format_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        format_url, video_id, 'mp4',\n                        m3u8_id='hls', fatal=False))\n                elif ext == 'f4m':\n                    \n                    continue\n                else:\n                    formats.append({\n                        'url': format_url,\n                        'width': int_or_none(format_data.get('width')),\n                        'height': int_or_none(format_data.get('height')),\n                    })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': int_or_none(video_data.get('broadcastDate')),\n            'formats': formats,\n            'episode': title,\n            'episode_number': int_or_none(video_data.get('episodeNumber')),\n            'series': video_data.get('contentTitle'),\n        }\n\n\nclass HotStarPlaylistIE(HotStarBaseIE):\n    IE_NAME = 'hotstar:playlist'\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?hotstar\\.com/tv/[^/]+/(?P<content_id>\\d+))/(?P<type>[^/]+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.hotstar.com/tv/pratidaan/14982/episodes/14812/9993',\n        'info_dict': {\n            'id': '14812',\n        },\n        'playlist_mincount': 75,\n    }, {\n        'url': 'http://www.hotstar.com/tv/pratidaan/14982/popular-clips/9998/9998',\n        'only_matching': True,\n    }]\n    _ITEM_TYPES = {\n        'episodes': 'EPISODE',\n        'popular-clips': 'CLIPS',\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        base_url = mobj.group('url')\n        content_id = mobj.group('content_id')\n        playlist_type = mobj.group('type')\n\n        content_info = self._download_content_info(content_id)\n        playlist_id = compat_str(content_info['categoryId'])\n\n        collection = self._download_json(\n            'https://search.hotstar.com/AVS/besc', playlist_id, query={\n                'action': 'SearchContents',\n                'appVersion': '5.0.40',\n                'channel': 'PCTV',\n                'moreFilters': 'series:%s;' % playlist_id,\n                'query': '*',\n                'searchOrder': 'last_broadcast_date desc,year desc,title asc',\n                'type': self._ITEM_TYPES.get(playlist_type, 'EPISODE'),\n            })\n\n        entries = [\n            self.url_result(\n                '%s/_/%s' % (base_url, video['contentId']),\n                ie=HotStarIE.ie_key(), video_id=video['contentId'])\n            for video in collection['response']['docs']\n            if video.get('contentId')]\n\n        return self.playlist_result(entries, playlist_id)\n", "comments": "# coding: utf-8\n# m3u8 download\n# produce broken files\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n)\n\n\nclass HotStarBaseIE(InfoExtractor):\n    _GEO_COUNTRIES = ['IN']\n\n    def _download_json(self, *args, **kwargs):\n        response = super(HotStarBaseIE, self)._download_json(*args, **kwargs)\n        if response['resultCode'] != 'OK':\n            if kwargs.get('fatal'):\n                raise ExtractorError(\n                    response['errorDescription'], expected=True)\n            return None\n        return response['resultObj']\n\n    def _download_content_info(self, content_id):\n        return self._download_json(\n            'https://account.hotstar.com/AVS/besc', content_id, query={\n                'action': 'GetAggregatedContentDetails',\n                'appVersion': '5.0.40',\n                'channel': 'PCTV',\n                'contentId': content_id,\n            })['contentInfo'][0]\n\n\nclass HotStarIE(HotStarBaseIE):\n    _VALID_URL = r'https?://(?:www\\.)?hotstar\\.com/(?:.+?[/-])?(?P<id>\\d{10})'\n    _TESTS = [{\n        'url': 'http://www.hotstar.com/on-air-with-aib--english-1000076273',\n        'info_dict': {\n            'id': '1000076273',\n            'ext': 'mp4',\n            'title': 'On Air With AIB',\n            'description': 'md5:c957d8868e9bc793ccb813691cc4c434',\n            'timestamp': 1447227000,\n            'upload_date': '20151111',\n            'duration': 381,\n        },\n        'params': {\n            # m3u8 download\n            'skip_download': True,\n        }\n    }, {\n        'url': 'http://www.hotstar.com/sports/cricket/rajitha-sizzles-on-debut-with-329/2001477583',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.hotstar.com/1000000515',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        video_data = self._download_content_info(video_id)\n\n        title = video_data['episodeTitle']\n\n        if video_data.get('encrypted') == 'Y':\n            raise ExtractorError('This video is DRM protected.', expected=True)\n\n        formats = []\n        for f in ('JIO',):\n            format_data = self._download_json(\n                'http://getcdn.hotstar.com/AVS/besc',\n                video_id, 'Downloading %s JSON metadata' % f,\n                fatal=False, query={\n                    'action': 'GetCDN',\n                    'asJson': 'Y',\n                    'channel': f,\n                    'id': video_id,\n                    'type': 'VOD',\n                })\n            if format_data:\n                format_url = format_data.get('src')\n                if not format_url:\n                    continue\n                ext = determine_ext(format_url)\n                if ext == 'm3u8':\n                    formats.extend(self._extract_m3u8_formats(\n                        format_url, video_id, 'mp4',\n                        m3u8_id='hls', fatal=False))\n                elif ext == 'f4m':\n                    # produce broken files\n                    continue\n                else:\n                    formats.append({\n                        'url': format_url,\n                        'width': int_or_none(format_data.get('width')),\n                        'height': int_or_none(format_data.get('height')),\n                    })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': video_data.get('description'),\n            'duration': int_or_none(video_data.get('duration')),\n            'timestamp': int_or_none(video_data.get('broadcastDate')),\n            'formats': formats,\n            'episode': title,\n            'episode_number': int_or_none(video_data.get('episodeNumber')),\n            'series': video_data.get('contentTitle'),\n        }\n\n\nclass HotStarPlaylistIE(HotStarBaseIE):\n    IE_NAME = 'hotstar:playlist'\n    _VALID_URL = r'(?P<url>https?://(?:www\\.)?hotstar\\.com/tv/[^/]+/(?P<content_id>\\d+))/(?P<type>[^/]+)/(?P<id>\\d+)'\n    _TESTS = [{\n        'url': 'http://www.hotstar.com/tv/pratidaan/14982/episodes/14812/9993',\n        'info_dict': {\n            'id': '14812',\n        },\n        'playlist_mincount': 75,\n    }, {\n        'url': 'http://www.hotstar.com/tv/pratidaan/14982/popular-clips/9998/9998',\n        'only_matching': True,\n    }]\n    _ITEM_TYPES = {\n        'episodes': 'EPISODE',\n        'popular-clips': 'CLIPS',\n    }\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        base_url = mobj.group('url')\n        content_id = mobj.group('content_id')\n        playlist_type = mobj.group('type')\n\n        content_info = self._download_content_info(content_id)\n        playlist_id = compat_str(content_info['categoryId'])\n\n        collection = self._download_json(\n            'https://search.hotstar.com/AVS/besc', playlist_id, query={\n                'action': 'SearchContents',\n                'appVersion': '5.0.40',\n                'channel': 'PCTV',\n                'moreFilters': 'series:%s;' % playlist_id,\n                'query': '*',\n                'searchOrder': 'last_broadcast_date desc,year desc,title asc',\n                'type': self._ITEM_TYPES.get(playlist_type, 'EPISODE'),\n            })\n\n        entries = [\n            self.url_result(\n                '%s/_/%s' % (base_url, video['contentId']),\n                ie=HotStarIE.ie_key(), video_id=video['contentId'])\n            for video in collection['response']['docs']\n            if video.get('contentId')]\n\n        return self.playlist_result(entries, playlist_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "hotstar.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/hotstar.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}