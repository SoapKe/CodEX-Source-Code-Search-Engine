{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    sanitized_Request,\n    str_to_int,\n    unified_strdate,\n)\nfrom ..aes import aes_decrypt_text\n\n\nclass SpankwireIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?P<url>spankwire\\.com/[^/]*/video(?P<id>[0-9]+)/?)'\n    _TESTS = [{\n        \n        'url': 'http://www.spankwire.com/Buckcherry-s-X-Rated-Music-Video-Crazy-Bitch/video103545/',\n        'md5': '8bbfde12b101204b39e4b9fe7eb67095',\n        'info_dict': {\n            'id': '103545',\n            'ext': 'mp4',\n            'title': 'Buckcherry`s X Rated Music Video Crazy Bitch',\n            'description': 'Crazy Bitch X rated music video.',\n            'uploader': 'oreusz',\n            'uploader_id': '124697',\n            'upload_date': '20070507',\n            'age_limit': 18,\n        }\n    }, {\n        \n        'url': 'http://www.spankwire.com/Titcums-Compiloation-I/video1921551/',\n        'md5': '09b3c20833308b736ae8902db2f8d7e6',\n        'info_dict': {\n            'id': '1921551',\n            'ext': 'mp4',\n            'title': 'Titcums Compiloation I',\n            'description': 'cum on tits',\n            'uploader': 'dannyh78999',\n            'uploader_id': '3056053',\n            'upload_date': '20150822',\n            'age_limit': 18,\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        req = sanitized_Request('http://www.' + mobj.group('url'))\n        req.add_header('Cookie', 'age_verified=1')\n        webpage = self._download_webpage(req, video_id)\n\n        title = self._html_search_regex(\n            r'<h1>([^<]+)', webpage, 'title')\n        description = self._html_search_regex(\n            r'(?s)<div\\s+id=\"descriptionContent\">(.+?)</div>',\n            webpage, 'description', fatal=False)\n        thumbnail = self._html_search_regex(\n            r'playerData\\.screenShot\\s*=\\s*[\"\\']([^\"\\']+)[\"\\']',\n            webpage, 'thumbnail', fatal=False)\n\n        uploader = self._html_search_regex(\n            r'by:\\s*<a [^>]*>(.+?)</a>',\n            webpage, 'uploader', fatal=False)\n        uploader_id = self._html_search_regex(\n            r'by:\\s*<a href=\"/(?:user/viewProfile|Profile\\.aspx)\\?.*?UserId=(\\d+).*?\"',\n            webpage, 'uploader id', fatal=False)\n        upload_date = unified_strdate(self._html_search_regex(\n            r'</a> on (.+?) at \\d+:\\d+',\n            webpage, 'upload date', fatal=False))\n\n        view_count = str_to_int(self._html_search_regex(\n            r'<div id=\"viewsCounter\"><span>([\\d,\\.]+)</span> views</div>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._html_search_regex(\n            r'<span\\s+id=\"spCommentCount\"[^>]*>([\\d,\\.]+)</span>',\n            webpage, 'comment count', fatal=False))\n\n        videos = re.findall(\n            r'playerData\\.cdnPath([0-9]{3,})\\s*=\\s*(?:encodeURIComponent\\()?[\"\\']([^\"\\']+)[\"\\']', webpage)\n        heights = [int(video[0]) for video in videos]\n        video_urls = list(map(compat_urllib_parse_unquote, [video[1] for video in videos]))\n        if webpage.find(r'flashvars\\.encrypted = \"true\"') != -1:\n            password = self._search_regex(\n                r'flashvars\\.video_title = \"([^\"]+)',\n                webpage, 'password').replace('+', ' ')\n            video_urls = list(map(\n                lambda s: aes_decrypt_text(s, password, 32).decode('utf-8'),\n                video_urls))\n\n        formats = []\n        for height, video_url in zip(heights, video_urls):\n            path = compat_urllib_parse_urlparse(video_url).path\n            m = re.search(r'/(?P<height>\\d+)[pP]_(?P<tbr>\\d+)[kK]', path)\n            if m:\n                tbr = int(m.group('tbr'))\n                height = int(m.group('height'))\n            else:\n                tbr = None\n            formats.append({\n                'url': video_url,\n                'format_id': '%dp' % height,\n                'height': height,\n                'tbr': tbr,\n            })\n        self._sort_formats(formats)\n\n        age_limit = self._rta_search(webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'upload_date': upload_date,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'formats': formats,\n            'age_limit': age_limit,\n        }\n", "comments": "# download URL pattern: */<height>P_<tbr>K_<video_id>.mp4\n# download URL pattern: */mp4_<format_id>_<video_id>.mp4\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_unquote,\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    sanitized_Request,\n    str_to_int,\n    unified_strdate,\n)\nfrom ..aes import aes_decrypt_text\n\n\nclass SpankwireIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?(?P<url>spankwire\\.com/[^/]*/video(?P<id>[0-9]+)/?)'\n    _TESTS = [{\n        # download URL pattern: */<height>P_<tbr>K_<video_id>.mp4\n        'url': 'http://www.spankwire.com/Buckcherry-s-X-Rated-Music-Video-Crazy-Bitch/video103545/',\n        'md5': '8bbfde12b101204b39e4b9fe7eb67095',\n        'info_dict': {\n            'id': '103545',\n            'ext': 'mp4',\n            'title': 'Buckcherry`s X Rated Music Video Crazy Bitch',\n            'description': 'Crazy Bitch X rated music video.',\n            'uploader': 'oreusz',\n            'uploader_id': '124697',\n            'upload_date': '20070507',\n            'age_limit': 18,\n        }\n    }, {\n        # download URL pattern: */mp4_<format_id>_<video_id>.mp4\n        'url': 'http://www.spankwire.com/Titcums-Compiloation-I/video1921551/',\n        'md5': '09b3c20833308b736ae8902db2f8d7e6',\n        'info_dict': {\n            'id': '1921551',\n            'ext': 'mp4',\n            'title': 'Titcums Compiloation I',\n            'description': 'cum on tits',\n            'uploader': 'dannyh78999',\n            'uploader_id': '3056053',\n            'upload_date': '20150822',\n            'age_limit': 18,\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n\n        req = sanitized_Request('http://www.' + mobj.group('url'))\n        req.add_header('Cookie', 'age_verified=1')\n        webpage = self._download_webpage(req, video_id)\n\n        title = self._html_search_regex(\n            r'<h1>([^<]+)', webpage, 'title')\n        description = self._html_search_regex(\n            r'(?s)<div\\s+id=\"descriptionContent\">(.+?)</div>',\n            webpage, 'description', fatal=False)\n        thumbnail = self._html_search_regex(\n            r'playerData\\.screenShot\\s*=\\s*[\"\\']([^\"\\']+)[\"\\']',\n            webpage, 'thumbnail', fatal=False)\n\n        uploader = self._html_search_regex(\n            r'by:\\s*<a [^>]*>(.+?)</a>',\n            webpage, 'uploader', fatal=False)\n        uploader_id = self._html_search_regex(\n            r'by:\\s*<a href=\"/(?:user/viewProfile|Profile\\.aspx)\\?.*?UserId=(\\d+).*?\"',\n            webpage, 'uploader id', fatal=False)\n        upload_date = unified_strdate(self._html_search_regex(\n            r'</a> on (.+?) at \\d+:\\d+',\n            webpage, 'upload date', fatal=False))\n\n        view_count = str_to_int(self._html_search_regex(\n            r'<div id=\"viewsCounter\"><span>([\\d,\\.]+)</span> views</div>',\n            webpage, 'view count', fatal=False))\n        comment_count = str_to_int(self._html_search_regex(\n            r'<span\\s+id=\"spCommentCount\"[^>]*>([\\d,\\.]+)</span>',\n            webpage, 'comment count', fatal=False))\n\n        videos = re.findall(\n            r'playerData\\.cdnPath([0-9]{3,})\\s*=\\s*(?:encodeURIComponent\\()?[\"\\']([^\"\\']+)[\"\\']', webpage)\n        heights = [int(video[0]) for video in videos]\n        video_urls = list(map(compat_urllib_parse_unquote, [video[1] for video in videos]))\n        if webpage.find(r'flashvars\\.encrypted = \"true\"') != -1:\n            password = self._search_regex(\n                r'flashvars\\.video_title = \"([^\"]+)',\n                webpage, 'password').replace('+', ' ')\n            video_urls = list(map(\n                lambda s: aes_decrypt_text(s, password, 32).decode('utf-8'),\n                video_urls))\n\n        formats = []\n        for height, video_url in zip(heights, video_urls):\n            path = compat_urllib_parse_urlparse(video_url).path\n            m = re.search(r'/(?P<height>\\d+)[pP]_(?P<tbr>\\d+)[kK]', path)\n            if m:\n                tbr = int(m.group('tbr'))\n                height = int(m.group('height'))\n            else:\n                tbr = None\n            formats.append({\n                'url': video_url,\n                'format_id': '%dp' % height,\n                'height': height,\n                'tbr': tbr,\n            })\n        self._sort_formats(formats)\n\n        age_limit = self._rta_search(webpage)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'upload_date': upload_date,\n            'view_count': view_count,\n            'comment_count': comment_count,\n            'formats': formats,\n            'age_limit': age_limit,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "spankwire.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/spankwire.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}