{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    mimetype2ext,\n    qualities,\n    remove_end,\n)\n\n\nclass ImdbIE(InfoExtractor):\n    IE_NAME = 'imdb'\n    IE_DESC = 'Internet Movie Database trailers'\n    _VALID_URL = r'https?://(?:www|m)\\.imdb\\.com/(?:video|title).+?[/-]vi(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.imdb.com/video/imdb/vi2524815897',\n        'info_dict': {\n            'id': '2524815897',\n            'ext': 'mp4',\n            'title': 'Ice Age: Continental Drift Trailer (No. 2)',\n            'description': 'md5:9061c2219254e5d14e03c25c98e96a81',\n        }\n    }, {\n        'url': 'http://www.imdb.com/video/_/vi2524815897',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.imdb.com/title/tt1667889/?ref_=ext_shr_eml_vi\n        'only_matching': True,\n    }, {\n        'url': 'http://www.imdb.com/title/tt1667889/\n        'only_matching': True,\n    }, {\n        'url': 'http://www.imdb.com/videoplayer/vi1562949145',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.imdb.com/title/tt4218696/videoplayer/vi2608641561',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage('http://www.imdb.com/video/imdb/vi%s' % video_id, video_id)\n        descr = self._html_search_regex(\n            r'(?s)<span itemprop=\"description\">(.*?)</span>',\n            webpage, 'description', fatal=False)\n        player_url = 'http://www.imdb.com/video/imdb/vi%s/imdb/single' % video_id\n        player_page = self._download_webpage(\n            player_url, video_id, 'Downloading player page')\n        \n        \n        extra_formats = re.findall(r'href=\"(?P<url>%s.*?)\".*?>(?P<name>.*?)<' % re.escape(player_url), player_page)\n        format_pages = [\n            self._download_webpage(\n                f_url, video_id, 'Downloading info for %s format' % f_name)\n            for f_url, f_name in extra_formats]\n        format_pages.append(player_page)\n\n        quality = qualities(('SD', '480p', '720p', '1080p'))\n        formats = []\n        for format_page in format_pages:\n            json_data = self._search_regex(\n                r'<script[^>]+class=\"imdb-player-data\"[^>]*?>(.*?)</script>',\n                format_page, 'json data', flags=re.DOTALL)\n            info = self._parse_json(json_data, video_id, fatal=False)\n            if not info:\n                continue\n            format_info = info.get('videoPlayerObject', {}).get('video', {})\n            if not format_info:\n                continue\n            video_info_list = format_info.get('videoInfoList')\n            if not video_info_list or not isinstance(video_info_list, list):\n                continue\n            video_info = video_info_list[0]\n            if not video_info or not isinstance(video_info, dict):\n                continue\n            video_url = video_info.get('videoUrl')\n            if not video_url:\n                continue\n            format_id = format_info.get('ffname')\n            formats.append({\n                'format_id': format_id,\n                'url': video_url,\n                'ext': mimetype2ext(video_info.get('videoMimeType')),\n                'quality': quality(format_id),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': remove_end(self._og_search_title(webpage), ' - IMDb'),\n            'formats': formats,\n            'description': descr,\n            'thumbnail': format_info.get('slate'),\n        }\n\n\nclass ImdbListIE(InfoExtractor):\n    IE_NAME = 'imdb:list'\n    IE_DESC = 'Internet Movie Database lists'\n    _VALID_URL = r'https?://(?:www\\.)?imdb\\.com/list/(?P<id>[\\da-zA-Z_-]{11})'\n    _TEST = {\n        'url': 'http://www.imdb.com/list/JFs9NWw6XI0',\n        'info_dict': {\n            'id': 'JFs9NWw6XI0',\n            'title': 'March 23, 2012 Releases',\n        },\n        'playlist_count': 7,\n    }\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n        webpage = self._download_webpage(url, list_id)\n        entries = [\n            self.url_result('http://www.imdb.com' + m, 'Imdb')\n            for m in re.findall(r'href=\"(/video/imdb/vi[^\"]+)\"\\s+data-type=\"playlist\"', webpage)]\n\n        list_title = self._html_search_regex(\n            r'<h1 class=\"header\">(.*?)</h1>', webpage, 'list title')\n\n        return self.playlist_result(entries, list_id, list_title)\n", "comments": "#lb-vi2524815897',\n#lb-vi2524815897',\n# the player page contains the info for the default format, we have to\n# fetch other pages for the rest of the formats\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    mimetype2ext,\n    qualities,\n    remove_end,\n)\n\n\nclass ImdbIE(InfoExtractor):\n    IE_NAME = 'imdb'\n    IE_DESC = 'Internet Movie Database trailers'\n    _VALID_URL = r'https?://(?:www|m)\\.imdb\\.com/(?:video|title).+?[/-]vi(?P<id>\\d+)'\n\n    _TESTS = [{\n        'url': 'http://www.imdb.com/video/imdb/vi2524815897',\n        'info_dict': {\n            'id': '2524815897',\n            'ext': 'mp4',\n            'title': 'Ice Age: Continental Drift Trailer (No. 2)',\n            'description': 'md5:9061c2219254e5d14e03c25c98e96a81',\n        }\n    }, {\n        'url': 'http://www.imdb.com/video/_/vi2524815897',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.imdb.com/title/tt1667889/?ref_=ext_shr_eml_vi#lb-vi2524815897',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.imdb.com/title/tt1667889/#lb-vi2524815897',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.imdb.com/videoplayer/vi1562949145',\n        'only_matching': True,\n    }, {\n        'url': 'http://www.imdb.com/title/tt4218696/videoplayer/vi2608641561',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage('http://www.imdb.com/video/imdb/vi%s' % video_id, video_id)\n        descr = self._html_search_regex(\n            r'(?s)<span itemprop=\"description\">(.*?)</span>',\n            webpage, 'description', fatal=False)\n        player_url = 'http://www.imdb.com/video/imdb/vi%s/imdb/single' % video_id\n        player_page = self._download_webpage(\n            player_url, video_id, 'Downloading player page')\n        # the player page contains the info for the default format, we have to\n        # fetch other pages for the rest of the formats\n        extra_formats = re.findall(r'href=\"(?P<url>%s.*?)\".*?>(?P<name>.*?)<' % re.escape(player_url), player_page)\n        format_pages = [\n            self._download_webpage(\n                f_url, video_id, 'Downloading info for %s format' % f_name)\n            for f_url, f_name in extra_formats]\n        format_pages.append(player_page)\n\n        quality = qualities(('SD', '480p', '720p', '1080p'))\n        formats = []\n        for format_page in format_pages:\n            json_data = self._search_regex(\n                r'<script[^>]+class=\"imdb-player-data\"[^>]*?>(.*?)</script>',\n                format_page, 'json data', flags=re.DOTALL)\n            info = self._parse_json(json_data, video_id, fatal=False)\n            if not info:\n                continue\n            format_info = info.get('videoPlayerObject', {}).get('video', {})\n            if not format_info:\n                continue\n            video_info_list = format_info.get('videoInfoList')\n            if not video_info_list or not isinstance(video_info_list, list):\n                continue\n            video_info = video_info_list[0]\n            if not video_info or not isinstance(video_info, dict):\n                continue\n            video_url = video_info.get('videoUrl')\n            if not video_url:\n                continue\n            format_id = format_info.get('ffname')\n            formats.append({\n                'format_id': format_id,\n                'url': video_url,\n                'ext': mimetype2ext(video_info.get('videoMimeType')),\n                'quality': quality(format_id),\n            })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': remove_end(self._og_search_title(webpage), ' - IMDb'),\n            'formats': formats,\n            'description': descr,\n            'thumbnail': format_info.get('slate'),\n        }\n\n\nclass ImdbListIE(InfoExtractor):\n    IE_NAME = 'imdb:list'\n    IE_DESC = 'Internet Movie Database lists'\n    _VALID_URL = r'https?://(?:www\\.)?imdb\\.com/list/(?P<id>[\\da-zA-Z_-]{11})'\n    _TEST = {\n        'url': 'http://www.imdb.com/list/JFs9NWw6XI0',\n        'info_dict': {\n            'id': 'JFs9NWw6XI0',\n            'title': 'March 23, 2012 Releases',\n        },\n        'playlist_count': 7,\n    }\n\n    def _real_extract(self, url):\n        list_id = self._match_id(url)\n        webpage = self._download_webpage(url, list_id)\n        entries = [\n            self.url_result('http://www.imdb.com' + m, 'Imdb')\n            for m in re.findall(r'href=\"(/video/imdb/vi[^\"]+)\"\\s+data-type=\"playlist\"', webpage)]\n\n        list_title = self._html_search_regex(\n            r'<h1 class=\"header\">(.*?)</h1>', webpage, 'list title')\n\n        return self.playlist_result(entries, list_id, list_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "imdb.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/imdb.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}