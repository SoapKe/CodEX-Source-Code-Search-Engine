{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport base64\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n    compat_parse_qs,\n)\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    int_or_none,\n    unsmuggle_url,\n    smuggle_url,\n)\n\n\nclass KalturaIE(InfoExtractor):\n    _VALID_URL = r, webpage)\n        )\n        if mobj:\n            embed_info = mobj.groupdict()\n            url = 'kaltura:%(partner_id)s:%(id)s' % embed_info\n            escaped_pid = re.escape(embed_info['partner_id'])\n            service_url = re.search(\n                r'<script[^>]+src=[\"\\']((?:https?:)?//.+?)/p/%s/sp/%s00/embedIframeJs' % (escaped_pid, escaped_pid),\n                webpage)\n            if service_url:\n                url = smuggle_url(url, {'service_url': service_url.group(1)})\n            return url\n\n    def _kaltura_api_call(self, video_id, actions, service_url=None, *args, **kwargs):\n        params = actions[0]\n        if len(actions) > 1:\n            for i, a in enumerate(actions[1:], start=1):\n                for k, v in a.items():\n                    params['%d:%s' % (i, k)] = v\n\n        data = self._download_json(\n            (service_url or self._SERVICE_URL) + self._SERVICE_BASE,\n            video_id, query=params, *args, **kwargs)\n\n        status = data if len(actions) == 1 else data[0]\n        if status.get('objectType') == 'KalturaAPIException':\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, status['message']))\n\n        return data\n\n    def _get_video_info(self, video_id, partner_id, service_url=None):\n        actions = [\n            {\n                'action': 'null',\n                'apiVersion': '3.1.5',\n                'clientTag': 'kdp:v3.8.5',\n                'format': 1,  \n                'service': 'multirequest',\n            },\n            {\n                'expiry': 86400,\n                'service': 'session',\n                'action': 'startWidgetSession',\n                'widgetId': '_%s' % partner_id,\n            },\n            {\n                'action': 'get',\n                'entryId': video_id,\n                'service': 'baseentry',\n                'ks': '{1:result:ks}',\n            },\n            {\n                'action': 'getbyentryid',\n                'entryId': video_id,\n                'service': 'flavorAsset',\n                'ks': '{1:result:ks}',\n            },\n            {\n                'action': 'list',\n                'filter:entryIdEqual': video_id,\n                'service': 'caption_captionasset',\n                'ks': '{1:result:ks}',\n            },\n        ]\n        return self._kaltura_api_call(\n            video_id, actions, service_url, note='Downloading video info JSON')\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        partner_id, entry_id = mobj.group('partner_id', 'id')\n        ks = None\n        captions = None\n        if partner_id and entry_id:\n            _, info, flavor_assets, captions = self._get_video_info(entry_id, partner_id, smuggled_data.get('service_url'))\n        else:\n            path, query = mobj.group('path', 'query')\n            if not path and not query:\n                raise ExtractorError('Invalid URL', expected=True)\n            params = {}\n            if query:\n                params = compat_parse_qs(query)\n            if path:\n                splitted_path = path.split('/')\n                params.update(dict((zip(splitted_path[::2], [[v] for v in splitted_path[1::2]]))))\n            if 'wid' in params:\n                partner_id = params['wid'][0][1:]\n            elif 'p' in params:\n                partner_id = params['p'][0]\n            elif 'partner_id' in params:\n                partner_id = params['partner_id'][0]\n            else:\n                raise ExtractorError('Invalid URL', expected=True)\n            if 'entry_id' in params:\n                entry_id = params['entry_id'][0]\n                _, info, flavor_assets, captions = self._get_video_info(entry_id, partner_id)\n            elif 'uiconf_id' in params and 'flashvars[referenceId]' in params:\n                reference_id = params['flashvars[referenceId]'][0]\n                webpage = self._download_webpage(url, reference_id)\n                entry_data = self._parse_json(self._search_regex(\n                    r'window\\.kalturaIframePackageData\\s*=\\s*({.*});',\n                    webpage, 'kalturaIframePackageData'),\n                    reference_id)['entryResult']\n                info, flavor_assets = entry_data['meta'], entry_data['contextData']['flavorAssets']\n                entry_id = info['id']\n                \n                \n                \n                try:\n                    _, info, flavor_assets, captions = self._get_video_info(\n                        entry_id, partner_id)\n                except ExtractorError:\n                    \n                    \n                    \n                    pass\n            else:\n                raise ExtractorError('Invalid URL', expected=True)\n            ks = params.get('flashvars[ks]', [None])[0]\n\n        source_url = smuggled_data.get('source_url')\n        if source_url:\n            referrer = base64.b64encode(\n                '://'.join(compat_urlparse.urlparse(source_url)[:2])\n                .encode('utf-8')).decode('utf-8')\n        else:\n            referrer = None\n\n        def sign_url(unsigned_url):\n            if ks:\n                unsigned_url += '/ks/%s' % ks\n            if referrer:\n                unsigned_url += '?referrer=%s' % referrer\n            return unsigned_url\n\n        data_url = info['dataUrl']\n        if '/flvclipper/' in data_url:\n            data_url = re.sub(r'/flvclipper/.*', '/serveFlavor', data_url)\n\n        formats = []\n        for f in flavor_assets:\n            \n            if f.get('status') != 2:\n                continue\n            \n            \n            if f.get('fileExt') == 'chun':\n                continue\n            \n            if f.get('fileExt') == 'wvm':\n                continue\n            if not f.get('fileExt'):\n                \n                if f.get('containerFormat') == 'qt':\n                    f['fileExt'] = 'mov'\n                else:\n                    f['fileExt'] = 'mp4'\n            video_url = sign_url(\n                '%s/flavorId/%s' % (data_url, f['id']))\n            \n            \n            vcodec = 'none' if 'videoCodecId' not in f and f.get(\n                'frameRate') == 0 else f.get('videoCodecId')\n            formats.append({\n                'format_id': '%(fileExt)s-%(bitrate)s' % f,\n                'ext': f.get('fileExt'),\n                'tbr': int_or_none(f['bitrate']),\n                'fps': int_or_none(f.get('frameRate')),\n                'filesize_approx': int_or_none(f.get('size'), invscale=1024),\n                'container': f.get('containerFormat'),\n                'vcodec': vcodec,\n                'height': int_or_none(f.get('height')),\n                'width': int_or_none(f.get('width')),\n                'url': video_url,\n            })\n        if '/playManifest/' in data_url:\n            m3u8_url = sign_url(data_url.replace(\n                'format/url', 'format/applehttp'))\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, entry_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        self._sort_formats(formats)\n\n        subtitles = {}\n        if captions:\n            for caption in captions.get('objects', []):\n                \n                if caption.get('status') != 2:\n                    continue\n                if not caption.get('id'):\n                    continue\n                caption_format = int_or_none(caption.get('format'))\n                subtitles.setdefault(caption.get('languageCode') or caption.get('language'), []).append({\n                    'url': '%s/api_v3/service/caption_captionasset/action/serve/captionAssetId/%s' % (self._SERVICE_URL, caption['id']),\n                    'ext': caption.get('fileExt') or self._CAPTION_TYPES.get(caption_format) or 'ttml',\n                })\n\n        return {\n            'id': entry_id,\n            'title': info['name'],\n            'formats': formats,\n            'subtitles': subtitles,\n            'description': clean_html(info.get('description')),\n            'thumbnail': info.get('thumbnailUrl'),\n            'duration': info.get('duration'),\n            'timestamp': info.get('createdAt'),\n            'uploader_id': info.get('userId') if info.get('userId') != 'None' else None,\n            'view_count': info.get('plays'),\n        }\n", "comments": "(?xs)\n                    kWidget\\.(?:thumb)?[Ee]mbed\\(\n                    \\{.*?\n                        (?P<q1>['\"])wid(?P=q1)\\s*:\\s*\n                        (?P<q2>['\"])_?(?P<partner_id>(?:(?!(?P=q2)).)+)(?P=q2),.*?\n                        (?P<q3>['\"])entry_?[Ii]d(?P=q3)\\s*:\\s*\n                        (?P<q4>['\"])(?P<id>(?:(?!(?P=q4)).)+)(?P=q4)(?:,|\\s*\\})\n                \n \n(?x)\n                (?:\n                    kaltura:(?P<partner_id>\\d+):(?P<id>[0-9a-z_]+)|\n                    https?://\n                        (:?(?:www|cdnapi(?:sec)?)\\.)?kaltura\\.com(?::\\d+)?/\n                        (?:\n                            (?:\n                                # flash player\n                                index\\.php/(?:kwidget|extwidget/preview)|\n                                # html5 player\n                                html5/html5lib/[^/]+/mwEmbedFrame\\.php\n                            )\n                        )(?:/(?P<path>[^?]+))?(?:\\?(?P<query>.*))?\n                )\n                '''\n    _SERVICE_URL = 'http://cdnapi.kaltura.com'\n    _SERVICE_BASE = '/api_v3/index.php'\n    # See https://github.com/kaltura/server/blob/master/plugins/content/caption/base/lib/model/enums/CaptionType.php\n    _CAPTION_TYPES = {\n        1: 'srt',\n        2: 'ttml',\n        3: 'vtt',\n    }\n    _TESTS = [\n        {\n            'url': 'kaltura:269692:1_1jc2y3e4',\n            'md5': '3adcbdb3dcc02d647539e53f284ba171',\n            'info_dict': {\n                'id': '1_1jc2y3e4',\n                'ext': 'mp4',\n                'title': 'Straight from the Heart',\n                'upload_date': '20131219',\n                'uploader_id': 'mlundberg@wolfgangsvault.com',\n                'description': 'The Allman Brothers Band, 12/16/1981',\n                'thumbnail': 're:^https?://.*/thumbnail/.*',\n                'timestamp': int,\n            },\n        },\n        {\n            'url': 'http://www.kaltura.com/index.php/kwidget/cache_st/1300318621/wid/_269692/uiconf_id/3873291/entry_id/1_1jc2y3e4',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://cdnapisec.kaltura.com/index.php/kwidget/wid/_557781/uiconf_id/22845202/entry_id/1_plr1syf3',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://cdnapisec.kaltura.com/html5/html5lib/v2.30.2/mwEmbedFrame.php/p/1337/uiconf_id/20540612/entry_id/1_sf5ovm7u?wid=_243342',\n            'only_matching': True,\n        },\n        {\n            # video with subtitles\n            'url': 'kaltura:111032:1_cw786r8q',\n            'only_matching': True,\n        },\n        {\n            # video with ttml subtitles (no fileExt)\n            'url': 'kaltura:1926081:0_l5ye1133',\n            'info_dict': {\n                'id': '0_l5ye1133',\n                'ext': 'mp4',\n                'title': 'What Can You Do With Python?',\n                'upload_date': '20160221',\n                'uploader_id': 'stork',\n                'thumbnail': 're:^https?://.*/thumbnail/.*',\n                'timestamp': int,\n                'subtitles': {\n                    'en': [{\n                        'ext': 'ttml',\n                    }],\n                },\n            },\n            'skip': 'Gone. Maybe https://www.safaribooksonline.com/library/tutorials/introduction-to-python-anon/3469/',\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://www.kaltura.com/index.php/extwidget/preview/partner_id/1770401/uiconf_id/37307382/entry_id/0_58u8kme7/embed/iframe?&flashvars[streamerType]=auto',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://www.kaltura.com:443/index.php/extwidget/preview/partner_id/1770401/uiconf_id/37307382/entry_id/0_58u8kme7/embed/iframe?&flashvars[streamerType]=auto',\n            'only_matching': True,\n        }\n    ]\n\n    @staticmethod\n    def _extract_url(webpage):\n        # Embed codes: https://knowledge.kaltura.com/embedding-kaltura-media-players-your-site\n        mobj = (\n            re.search(\n                r, webpage) or\n            re.search(\n                r'''(?xs)\n                    (?P<q1>[\"'])\n                        (?:https?:)?//cdnapi(?:sec)?\\.kaltura\\.com(?::\\d+)?/(?:(?!(?P=q1)).)*\\b(?:p|partner_id)/(?P<partner_id>\\d+)(?:(?!(?P=q1)).)*\n                    (?P=q1).*?\n                    (?:\n                        (?:\n                            entry_?[Ii]d|\n                            (?P<q2>[\"'])entry_?[Ii]d(?P=q2)\n                        )\\s*:\\s*|\n                        \\[\\s*(?P<q2_1>[\"'])entry_?[Ii]d(?P=q2_1)\\s*\\]\\s*=\\s*\n                    )\n                    (?P<q3>[\"'])(?P<id>(?:(?!(?P=q3)).)+)(?P=q3)\n                ''', webpage) or\n            re.search(\n                r'''(?xs)\n                    <iframe[^>]+src=(?P<q1>[\"'])\n                      (?:https?:)?//(?:www\\.)?kaltura\\.com/(?:(?!(?P=q1)).)*\\b(?:p|partner_id)/(?P<partner_id>\\d+)\n                      (?:(?!(?P=q1)).)*\n                      [?&]entry_id=(?P<id>(?:(?!(?P=q1))[^&])+)\n                    (?P=q1)\n                \n \n# coding: utf-8\n# JSON, 2 = XML, 3 = PHP\n# Unfortunately, data returned in kalturaIframePackageData lacks\n# captions so we will try requesting the complete data using\n# regular approach since we now know the entry_id\n# Regular scenario failed but we already have everything\n# extracted apart from captions and can process at least\n# with this\n# Continue if asset is not ready\n# Original format that's not available (e.g. kaltura:1926081:0_c03e1b5g)\n# skip for now.\n# DRM-protected video, cannot be decrypted\n# QT indicates QuickTime; some videos have broken fileExt\n# audio-only has no videoCodecId (e.g. kaltura:1926081:0_c03e1b5g\n# -f mp4-56)\n# Continue if caption is not ready\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport base64\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n    compat_parse_qs,\n)\nfrom ..utils import (\n    clean_html,\n    ExtractorError,\n    int_or_none,\n    unsmuggle_url,\n    smuggle_url,\n)\n\n\nclass KalturaIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                (?:\n                    kaltura:(?P<partner_id>\\d+):(?P<id>[0-9a-z_]+)|\n                    https?://\n                        (:?(?:www|cdnapi(?:sec)?)\\.)?kaltura\\.com(?::\\d+)?/\n                        (?:\n                            (?:\n                                # flash player\n                                index\\.php/(?:kwidget|extwidget/preview)|\n                                # html5 player\n                                html5/html5lib/[^/]+/mwEmbedFrame\\.php\n                            )\n                        )(?:/(?P<path>[^?]+))?(?:\\?(?P<query>.*))?\n                )\n                '''\n    _SERVICE_URL = 'http://cdnapi.kaltura.com'\n    _SERVICE_BASE = '/api_v3/index.php'\n    # See https://github.com/kaltura/server/blob/master/plugins/content/caption/base/lib/model/enums/CaptionType.php\n    _CAPTION_TYPES = {\n        1: 'srt',\n        2: 'ttml',\n        3: 'vtt',\n    }\n    _TESTS = [\n        {\n            'url': 'kaltura:269692:1_1jc2y3e4',\n            'md5': '3adcbdb3dcc02d647539e53f284ba171',\n            'info_dict': {\n                'id': '1_1jc2y3e4',\n                'ext': 'mp4',\n                'title': 'Straight from the Heart',\n                'upload_date': '20131219',\n                'uploader_id': 'mlundberg@wolfgangsvault.com',\n                'description': 'The Allman Brothers Band, 12/16/1981',\n                'thumbnail': 're:^https?://.*/thumbnail/.*',\n                'timestamp': int,\n            },\n        },\n        {\n            'url': 'http://www.kaltura.com/index.php/kwidget/cache_st/1300318621/wid/_269692/uiconf_id/3873291/entry_id/1_1jc2y3e4',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://cdnapisec.kaltura.com/index.php/kwidget/wid/_557781/uiconf_id/22845202/entry_id/1_plr1syf3',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://cdnapisec.kaltura.com/html5/html5lib/v2.30.2/mwEmbedFrame.php/p/1337/uiconf_id/20540612/entry_id/1_sf5ovm7u?wid=_243342',\n            'only_matching': True,\n        },\n        {\n            # video with subtitles\n            'url': 'kaltura:111032:1_cw786r8q',\n            'only_matching': True,\n        },\n        {\n            # video with ttml subtitles (no fileExt)\n            'url': 'kaltura:1926081:0_l5ye1133',\n            'info_dict': {\n                'id': '0_l5ye1133',\n                'ext': 'mp4',\n                'title': 'What Can You Do With Python?',\n                'upload_date': '20160221',\n                'uploader_id': 'stork',\n                'thumbnail': 're:^https?://.*/thumbnail/.*',\n                'timestamp': int,\n                'subtitles': {\n                    'en': [{\n                        'ext': 'ttml',\n                    }],\n                },\n            },\n            'skip': 'Gone. Maybe https://www.safaribooksonline.com/library/tutorials/introduction-to-python-anon/3469/',\n            'params': {\n                'skip_download': True,\n            },\n        },\n        {\n            'url': 'https://www.kaltura.com/index.php/extwidget/preview/partner_id/1770401/uiconf_id/37307382/entry_id/0_58u8kme7/embed/iframe?&flashvars[streamerType]=auto',\n            'only_matching': True,\n        },\n        {\n            'url': 'https://www.kaltura.com:443/index.php/extwidget/preview/partner_id/1770401/uiconf_id/37307382/entry_id/0_58u8kme7/embed/iframe?&flashvars[streamerType]=auto',\n            'only_matching': True,\n        }\n    ]\n\n    @staticmethod\n    def _extract_url(webpage):\n        # Embed codes: https://knowledge.kaltura.com/embedding-kaltura-media-players-your-site\n        mobj = (\n            re.search(\n                r\"\"\"(?xs)\n                    kWidget\\.(?:thumb)?[Ee]mbed\\(\n                    \\{.*?\n                        (?P<q1>['\"])wid(?P=q1)\\s*:\\s*\n                        (?P<q2>['\"])_?(?P<partner_id>(?:(?!(?P=q2)).)+)(?P=q2),.*?\n                        (?P<q3>['\"])entry_?[Ii]d(?P=q3)\\s*:\\s*\n                        (?P<q4>['\"])(?P<id>(?:(?!(?P=q4)).)+)(?P=q4)(?:,|\\s*\\})\n                \"\"\", webpage) or\n            re.search(\n                r'''(?xs)\n                    (?P<q1>[\"'])\n                        (?:https?:)?//cdnapi(?:sec)?\\.kaltura\\.com(?::\\d+)?/(?:(?!(?P=q1)).)*\\b(?:p|partner_id)/(?P<partner_id>\\d+)(?:(?!(?P=q1)).)*\n                    (?P=q1).*?\n                    (?:\n                        (?:\n                            entry_?[Ii]d|\n                            (?P<q2>[\"'])entry_?[Ii]d(?P=q2)\n                        )\\s*:\\s*|\n                        \\[\\s*(?P<q2_1>[\"'])entry_?[Ii]d(?P=q2_1)\\s*\\]\\s*=\\s*\n                    )\n                    (?P<q3>[\"'])(?P<id>(?:(?!(?P=q3)).)+)(?P=q3)\n                ''', webpage) or\n            re.search(\n                r'''(?xs)\n                    <iframe[^>]+src=(?P<q1>[\"'])\n                      (?:https?:)?//(?:www\\.)?kaltura\\.com/(?:(?!(?P=q1)).)*\\b(?:p|partner_id)/(?P<partner_id>\\d+)\n                      (?:(?!(?P=q1)).)*\n                      [?&]entry_id=(?P<id>(?:(?!(?P=q1))[^&])+)\n                    (?P=q1)\n                ''', webpage)\n        )\n        if mobj:\n            embed_info = mobj.groupdict()\n            url = 'kaltura:%(partner_id)s:%(id)s' % embed_info\n            escaped_pid = re.escape(embed_info['partner_id'])\n            service_url = re.search(\n                r'<script[^>]+src=[\"\\']((?:https?:)?//.+?)/p/%s/sp/%s00/embedIframeJs' % (escaped_pid, escaped_pid),\n                webpage)\n            if service_url:\n                url = smuggle_url(url, {'service_url': service_url.group(1)})\n            return url\n\n    def _kaltura_api_call(self, video_id, actions, service_url=None, *args, **kwargs):\n        params = actions[0]\n        if len(actions) > 1:\n            for i, a in enumerate(actions[1:], start=1):\n                for k, v in a.items():\n                    params['%d:%s' % (i, k)] = v\n\n        data = self._download_json(\n            (service_url or self._SERVICE_URL) + self._SERVICE_BASE,\n            video_id, query=params, *args, **kwargs)\n\n        status = data if len(actions) == 1 else data[0]\n        if status.get('objectType') == 'KalturaAPIException':\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, status['message']))\n\n        return data\n\n    def _get_video_info(self, video_id, partner_id, service_url=None):\n        actions = [\n            {\n                'action': 'null',\n                'apiVersion': '3.1.5',\n                'clientTag': 'kdp:v3.8.5',\n                'format': 1,  # JSON, 2 = XML, 3 = PHP\n                'service': 'multirequest',\n            },\n            {\n                'expiry': 86400,\n                'service': 'session',\n                'action': 'startWidgetSession',\n                'widgetId': '_%s' % partner_id,\n            },\n            {\n                'action': 'get',\n                'entryId': video_id,\n                'service': 'baseentry',\n                'ks': '{1:result:ks}',\n            },\n            {\n                'action': 'getbyentryid',\n                'entryId': video_id,\n                'service': 'flavorAsset',\n                'ks': '{1:result:ks}',\n            },\n            {\n                'action': 'list',\n                'filter:entryIdEqual': video_id,\n                'service': 'caption_captionasset',\n                'ks': '{1:result:ks}',\n            },\n        ]\n        return self._kaltura_api_call(\n            video_id, actions, service_url, note='Downloading video info JSON')\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        partner_id, entry_id = mobj.group('partner_id', 'id')\n        ks = None\n        captions = None\n        if partner_id and entry_id:\n            _, info, flavor_assets, captions = self._get_video_info(entry_id, partner_id, smuggled_data.get('service_url'))\n        else:\n            path, query = mobj.group('path', 'query')\n            if not path and not query:\n                raise ExtractorError('Invalid URL', expected=True)\n            params = {}\n            if query:\n                params = compat_parse_qs(query)\n            if path:\n                splitted_path = path.split('/')\n                params.update(dict((zip(splitted_path[::2], [[v] for v in splitted_path[1::2]]))))\n            if 'wid' in params:\n                partner_id = params['wid'][0][1:]\n            elif 'p' in params:\n                partner_id = params['p'][0]\n            elif 'partner_id' in params:\n                partner_id = params['partner_id'][0]\n            else:\n                raise ExtractorError('Invalid URL', expected=True)\n            if 'entry_id' in params:\n                entry_id = params['entry_id'][0]\n                _, info, flavor_assets, captions = self._get_video_info(entry_id, partner_id)\n            elif 'uiconf_id' in params and 'flashvars[referenceId]' in params:\n                reference_id = params['flashvars[referenceId]'][0]\n                webpage = self._download_webpage(url, reference_id)\n                entry_data = self._parse_json(self._search_regex(\n                    r'window\\.kalturaIframePackageData\\s*=\\s*({.*});',\n                    webpage, 'kalturaIframePackageData'),\n                    reference_id)['entryResult']\n                info, flavor_assets = entry_data['meta'], entry_data['contextData']['flavorAssets']\n                entry_id = info['id']\n                # Unfortunately, data returned in kalturaIframePackageData lacks\n                # captions so we will try requesting the complete data using\n                # regular approach since we now know the entry_id\n                try:\n                    _, info, flavor_assets, captions = self._get_video_info(\n                        entry_id, partner_id)\n                except ExtractorError:\n                    # Regular scenario failed but we already have everything\n                    # extracted apart from captions and can process at least\n                    # with this\n                    pass\n            else:\n                raise ExtractorError('Invalid URL', expected=True)\n            ks = params.get('flashvars[ks]', [None])[0]\n\n        source_url = smuggled_data.get('source_url')\n        if source_url:\n            referrer = base64.b64encode(\n                '://'.join(compat_urlparse.urlparse(source_url)[:2])\n                .encode('utf-8')).decode('utf-8')\n        else:\n            referrer = None\n\n        def sign_url(unsigned_url):\n            if ks:\n                unsigned_url += '/ks/%s' % ks\n            if referrer:\n                unsigned_url += '?referrer=%s' % referrer\n            return unsigned_url\n\n        data_url = info['dataUrl']\n        if '/flvclipper/' in data_url:\n            data_url = re.sub(r'/flvclipper/.*', '/serveFlavor', data_url)\n\n        formats = []\n        for f in flavor_assets:\n            # Continue if asset is not ready\n            if f.get('status') != 2:\n                continue\n            # Original format that's not available (e.g. kaltura:1926081:0_c03e1b5g)\n            # skip for now.\n            if f.get('fileExt') == 'chun':\n                continue\n            # DRM-protected video, cannot be decrypted\n            if f.get('fileExt') == 'wvm':\n                continue\n            if not f.get('fileExt'):\n                # QT indicates QuickTime; some videos have broken fileExt\n                if f.get('containerFormat') == 'qt':\n                    f['fileExt'] = 'mov'\n                else:\n                    f['fileExt'] = 'mp4'\n            video_url = sign_url(\n                '%s/flavorId/%s' % (data_url, f['id']))\n            # audio-only has no videoCodecId (e.g. kaltura:1926081:0_c03e1b5g\n            # -f mp4-56)\n            vcodec = 'none' if 'videoCodecId' not in f and f.get(\n                'frameRate') == 0 else f.get('videoCodecId')\n            formats.append({\n                'format_id': '%(fileExt)s-%(bitrate)s' % f,\n                'ext': f.get('fileExt'),\n                'tbr': int_or_none(f['bitrate']),\n                'fps': int_or_none(f.get('frameRate')),\n                'filesize_approx': int_or_none(f.get('size'), invscale=1024),\n                'container': f.get('containerFormat'),\n                'vcodec': vcodec,\n                'height': int_or_none(f.get('height')),\n                'width': int_or_none(f.get('width')),\n                'url': video_url,\n            })\n        if '/playManifest/' in data_url:\n            m3u8_url = sign_url(data_url.replace(\n                'format/url', 'format/applehttp'))\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, entry_id, 'mp4', 'm3u8_native',\n                m3u8_id='hls', fatal=False))\n\n        self._sort_formats(formats)\n\n        subtitles = {}\n        if captions:\n            for caption in captions.get('objects', []):\n                # Continue if caption is not ready\n                if caption.get('status') != 2:\n                    continue\n                if not caption.get('id'):\n                    continue\n                caption_format = int_or_none(caption.get('format'))\n                subtitles.setdefault(caption.get('languageCode') or caption.get('language'), []).append({\n                    'url': '%s/api_v3/service/caption_captionasset/action/serve/captionAssetId/%s' % (self._SERVICE_URL, caption['id']),\n                    'ext': caption.get('fileExt') or self._CAPTION_TYPES.get(caption_format) or 'ttml',\n                })\n\n        return {\n            'id': entry_id,\n            'title': info['name'],\n            'formats': formats,\n            'subtitles': subtitles,\n            'description': clean_html(info.get('description')),\n            'thumbnail': info.get('thumbnailUrl'),\n            'duration': info.get('duration'),\n            'timestamp': info.get('createdAt'),\n            'uploader_id': info.get('userId') if info.get('userId') != 'None' else None,\n            'view_count': info.get('plays'),\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "kaltura.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/kaltura.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}