{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2012-2013, Timothy Appnel <tim@appnel.com>\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'core'}\n\nDOCUMENTATION = '''\n---\nmodule: synchronize\nversion_added: \"1.4\"\nshort_description: A wrapper around rsync to make common tasks in your playbooks quick and easy.\ndescription:\n    - C(synchronize) is a wrapper around rsync to make common tasks in your playbooks quick and easy. It is run and originates on the local host where\n      Ansible is being run. Of course, you could just use the C(command) action to call rsync yourself, but you also have to add a fair number of\n      boilerplate options and host facts. C(synchronize) is not intended to provide access to the full power of rsync, but does make the most common\n      invocations easier to implement. You `still` may need to call rsync directly via C(command) or C(shell) depending on your use case.\noptions:\n  src:\n    description:\n      - Path on the source host that will be synchronized to the destination; The path can be absolute or relative.\n    required: true\n  dest:\n    description:\n      - Path on the destination host that will be synchronized from the source; The path can be absolute or relative.\n    required: true\n  dest_port:\n    description:\n      - Port number for ssh on the destination host. Prior to ansible 2.0, the ansible_ssh_port inventory var took precedence over this value.\n    default: Value of ansible_ssh_port for this host, remote_port config setting, or the value from ssh client configuration if none of those are set\n    version_added: \"1.5\"\n  mode:\n    description:\n      - Specify the direction of the synchronization. In push mode the localhost or delegate is the source; In pull mode the remote host in context\n        is the source.\n    choices: [ pull, push ]\n    default: push\n  archive:\n    description:\n      - Mirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.\n    type: bool\n    default: 'yes'\n  checksum:\n    description:\n      - Skip based on checksum, rather than mod-time & size; Note that that \"archive\" option is still enabled by default - the \"checksum\" option will\n        not disable it.\n    type: bool\n    default: 'no'\n    version_added: \"1.6\"\n  compress:\n    description:\n      - Compress file data during the transfer. In most cases, leave this enabled unless it causes problems.\n    type: bool\n    default: 'yes'\n    version_added: \"1.7\"\n  existing_only:\n    description:\n      - Skip creating new files on receiver.\n    type: bool\n    default: 'no'\n    version_added: \"1.5\"\n  delete:\n    description:\n      - Delete files in C(dest) that don't exist (after transfer, not before) in the C(src) path. This option requires C(recursive=yes).\n    type: bool\n    default: 'no'\n  dirs:\n    description:\n      - Transfer directories without recursing\n    type: bool\n    default: 'no'\n  recursive:\n    description:\n      - Recurse into directories.\n    type: bool\n    default: the value of the archive option\n  links:\n    description:\n      - Copy symlinks as symlinks.\n    type: bool\n    default: the value of the archive option\n  copy_links:\n    description:\n      - Copy symlinks as the item that they point to (the referent) is copied, rather than the symlink.\n    type: bool\n    default: 'no'\n  perms:\n    description:\n      - Preserve permissions.\n    type: bool\n    default: the value of the archive option\n  times:\n    description:\n      - Preserve modification times\n    type: bool\n    default: the value of the archive option\n  owner:\n    description:\n      - Preserve owner (super user only)\n    type: bool\n    default: the value of the archive option\n  group:\n    description:\n      - Preserve group\n    type: bool\n    default: the value of the archive option\n  rsync_path:\n    description:\n      - Specify the rsync command to run on the remote host. See C(--rsync-path) on the rsync man page.\n  rsync_timeout:\n    description:\n      - Specify a --timeout for the rsync command in seconds.\n    default: 0\n  set_remote_user:\n    description:\n      - put user@ for the remote paths. If you have a custom ssh config to define the remote user for a host\n        that does not match the inventory user, you should set this parameter to \"no\".\n    default: yes\n  use_ssh_args:\n    description:\n      - Use the ssh_args specified in ansible.cfg\n    type: bool\n    default: 'no'\n    version_added: \"2.0\"\n  rsync_opts:\n    description:\n      - Specify additional rsync options by passing in an array.\n    default:\n    version_added: \"1.6\"\n  partial:\n    description:\n      - Tells rsync to keep the partial file which should make a subsequent transfer of the rest of the file much faster.\n    type: bool\n    default: 'no'\n    version_added: \"2.0\"\n  verify_host:\n    description:\n      - Verify destination host key.\n    type: bool\n    default: 'no'\n    version_added: \"2.0\"\n  private_key:\n    description:\n      - Specify the private key to use for SSH-based rsync connections (e.g. C(~/.ssh/id_rsa))\n    version_added: \"1.6\"\n  link_dest:\n    description:\n      - add a destination to hard link against during the rsync.\n    default:\n    version_added: \"2.5\"\n\nnotes:\n   - rsync must be installed on both the local and remote host.\n   - For the C(synchronize) module, the \"local host\" is the host `the synchronize task originates on`, and the \"destination host\" is the host\n     `synchronize is connecting to`.\n   - The \"local host\" can be changed to a different host by using `delegate_to`.  This enables copying between two remote hosts or entirely on one\n     remote machine.\n   - >\n     The user and permissions for the synchronize `src` are those of the user running the Ansible task on the local host (or the remote_user for a\n     delegate_to host when delegate_to is used).\n   - The user and permissions for the synchronize `dest` are those of the `remote_user` on the destination host or the `become_user` if `become=yes` is active.\n   - In 2.0.0.0 a bug in the synchronize module made become occur on the \"local host\".  This was fixed in 2.0.1.\n   - Currently, synchronize is limited to elevating permissions via passwordless sudo.  This is because rsync itself is connecting to the remote machine\n     and rsync doesn't give us a way to pass sudo credentials in.\n   - Currently there are only a few connection types which support synchronize (ssh, paramiko, local, and docker) because a sync strategy has been\n     determined for those connection types.  Note that the connection for these must not need a password as rsync itself is making the connection and\n     rsync does not provide us a way to pass a password to the connection.\n   - Expect that dest=~/x will be ~<remote_user>/x even if using sudo.\n   - Inspect the verbose output to validate the destination user/host/path\n     are what was expected.\n   - To exclude files and directories from being synchronized, you may add\n     C(.rsync-filter) files to the source directory.\n   - rsync daemon must be up and running with correct permission when using\n     rsync protocol in source or destination path.\n   - The C(synchronize) module forces `--delay-updates` to avoid leaving a destination in a broken in-between state if the underlying rsync process\n     encounters an error. Those synchronizing large numbers of files that are willing to trade safety for performance should call rsync directly.\n   - link_destination is subject to the same limitations as the underlaying rsync daemon. Hard links are only preserved if the relative subtrees\n     of the source and destination are the same. Attempts to hardlink into a directory that is a subdirectory of the source will be prevented.\n\nauthor:\n- Timothy Appnel (@tima)\n'''\n\nEXAMPLES = '''\n- name: Synchronization of src on the control machine to dest on the remote hosts\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n\n- name: Synchronization using rsync protocol (push)\n  synchronize:\n    src: some/relative/path/\n    dest: rsync://somehost.com/path/\n\n- name: Synchronization using rsync protocol (pull)\n  synchronize:\n    mode: pull\n    src: rsync://somehost.com/path/\n    dest: /some/absolute/path/\n\n- name:  Synchronization using rsync protocol on delegate host (push)\n  synchronize:\n    src: /some/absolute/path/\n    dest: rsync://somehost.com/path/\n  delegate_to: delegate.host\n\n- name: Synchronization using rsync protocol on delegate host (pull)\n  synchronize:\n    mode: pull\n    src: rsync://somehost.com/path/\n    dest: /some/absolute/path/\n  delegate_to: delegate.host\n\n- name: Synchronization without any --archive options enabled\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    archive: no\n\n- name: Synchronization with --archive options enabled except for --recursive\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    recursive: no\n\n- name: Synchronization with --archive options enabled except for --times, with --checksum option enabled\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    checksum: yes\n    times: no\n\n- name: Synchronization without --archive options enabled except use --links\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    archive: no\n    links: yes\n\n- name: Synchronization of two paths both on the control machine\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n  delegate_to: localhost\n\n- name: Synchronization of src on the inventory host to the dest on the localhost in pull mode\n  synchronize:\n    mode: pull\n    src: some/relative/path\n    dest: /some/absolute/path\n\n- name: Synchronization of src on delegate host to dest on the current inventory host.\n  synchronize:\n    src: /first/absolute/path\n    dest: /second/absolute/path\n  delegate_to: delegate.host\n\n- name: Synchronize two directories on one remote host.\n  synchronize:\n    src: /first/absolute/path\n    dest: /second/absolute/path\n  delegate_to: \"{{ inventory_hostname }}\"\n\n- name: Synchronize and delete files in dest on the remote host that are not found in src of localhost.\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    delete: yes\n    recursive: yes\n\n\n- name: Synchronize using an alternate rsync command\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    rsync_path: \"su -c rsync\"\n\n\n\n\n# + /var/conf # include /var/conf even though it was previously excluded\n\n- name: Synchronize passing in extra rsync options\n  synchronize:\n    src: /tmp/helloworld\n    dest: /var/www/helloworld\n    rsync_opts:\n      - \"--no-motd\"\n      - \"--exclude=.git\"\n\n\n- name: Use hardlinks when synchronizing filesystems\n  synchronize:\n    src: /tmp/path_a/foo.txt\n    dest: /tmp/path_b/foo.txt\n    link_dest: /tmp/path_a/\n'''\n\n\nimport os\n\n\n\ntry:\n    from shlex import quote as shlex_quote\nexcept ImportError:\n    from pipes import quote as shlex_quote\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclient_addr = None\n\n\ndef substitute_controller(path):\n    global client_addr\n    if not client_addr:\n        ssh_env_string = os.environ.get('SSH_CLIENT', None)\n        try:\n            client_addr, _ = ssh_env_string.split(None, 1)\n        except AttributeError:\n            ssh_env_string = os.environ.get('SSH_CONNECTION', None)\n            try:\n                client_addr, _ = ssh_env_string.split(None, 1)\n            except AttributeError:\n                pass\n        if not client_addr:\n            raise ValueError\n\n    if path.startswith('localhost:'):\n        path = path.replace('localhost', client_addr, 1)\n    return path\n\n\ndef is_rsh_needed(source, dest):\n    if source.startswith('rsync://') or dest.startswith('rsync://'):\n        return False\n    if ':' in source or ':' in dest:\n        return True\n    return False\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            src=dict(type='str', required=True),\n            dest=dict(type='str', required=True),\n            dest_port=dict(type='int'),\n            delete=dict(type='bool', default=False),\n            private_key=dict(type='path'),\n            rsync_path=dict(type='str'),\n            _local_rsync_path=dict(type='path', default='rsync'),\n            _substitute_controller=dict(type='bool', default=False),\n            archive=dict(type='bool', default=True),\n            checksum=dict(type='bool', default=False),\n            compress=dict(type='bool', default=True),\n            existing_only=dict(type='bool', default=False),\n            dirs=dict(type='bool', default=False),\n            recursive=dict(type='bool'),\n            links=dict(type='bool'),\n            copy_links=dict(type='bool', default=False),\n            perms=dict(type='bool'),\n            times=dict(type='bool'),\n            owner=dict(type='bool'),\n            group=dict(type='bool'),\n            set_remote_user=dict(type='bool', default=True),\n            rsync_timeout=dict(type='int', default=0),\n            rsync_opts=dict(type='list'),\n            ssh_args=dict(type='str'),\n            partial=dict(type='bool', default=False),\n            verify_host=dict(type='bool', default=False),\n            mode=dict(type='str', default='push', choices=['pull', 'push']),\n            link_dest=dict(type='list')\n        ),\n        supports_check_mode=True,\n    )\n\n    if module.params['_substitute_controller']:\n        try:\n            source = substitute_controller(module.params['src'])\n            dest = substitute_controller(module.params['dest'])\n        except ValueError:\n            module.fail_json(msg='Could not determine controller hostname for rsync to send to')\n    else:\n        source = module.params['src']\n        dest = module.params['dest']\n    dest_port = module.params['dest_port']\n    delete = module.params['delete']\n    private_key = module.params['private_key']\n    rsync_path = module.params['rsync_path']\n    rsync = module.params.get('_local_rsync_path', 'rsync')\n    rsync_timeout = module.params.get('rsync_timeout', 'rsync_timeout')\n    archive = module.params['archive']\n    checksum = module.params['checksum']\n    compress = module.params['compress']\n    existing_only = module.params['existing_only']\n    dirs = module.params['dirs']\n    partial = module.params['partial']\n    \n    recursive = module.params['recursive']\n    links = module.params['links']\n    copy_links = module.params['copy_links']\n    perms = module.params['perms']\n    times = module.params['times']\n    owner = module.params['owner']\n    group = module.params['group']\n    rsync_opts = module.params['rsync_opts']\n    ssh_args = module.params['ssh_args']\n    verify_host = module.params['verify_host']\n    link_dest = module.params['link_dest']\n\n    if '/' not in rsync:\n        rsync = module.get_bin_path(rsync, required=True)\n\n    cmd = [rsync, '--delay-updates', '-F']\n    if compress:\n        cmd.append('--compress')\n    if rsync_timeout:\n        cmd.append('--timeout=%s' % rsync_timeout)\n    if module.check_mode:\n        cmd.append('--dry-run')\n    if delete:\n        cmd.append('--delete-after')\n    if existing_only:\n        cmd.append('--existing')\n    if checksum:\n        cmd.append('--checksum')\n    if copy_links:\n        cmd.append('--copy-links')\n    if archive:\n        cmd.append('--archive')\n        if recursive is False:\n            cmd.append('--no-recursive')\n        if links is False:\n            cmd.append('--no-links')\n        if perms is False:\n            cmd.append('--no-perms')\n        if times is False:\n            cmd.append('--no-times')\n        if owner is False:\n            cmd.append('--no-owner')\n        if group is False:\n            cmd.append('--no-group')\n    else:\n        if recursive is True:\n            cmd.append('--recursive')\n        if links is True:\n            cmd.append('--links')\n        if perms is True:\n            cmd.append('--perms')\n        if times is True:\n            cmd.append('--times')\n        if owner is True:\n            cmd.append('--owner')\n        if group is True:\n            cmd.append('--group')\n    if dirs:\n        cmd.append('--dirs')\n\n    if source.startswith('rsync://') and dest.startswith('rsync://'):\n        module.fail_json(msg='either src or dest must be a localhost', rc=1)\n\n    if is_rsh_needed(source, dest):\n        ssh_cmd = [module.get_bin_path('ssh', required=True), '-S', 'none']\n        if private_key is not None:\n            ssh_cmd.extend(['-i', private_key])\n        \n        \n        \n        if dest_port is not None:\n            ssh_cmd.extend(['-o', 'Port=%s' % dest_port])\n        if not verify_host:\n            ssh_cmd.extend(['-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=/dev/null'])\n        ssh_cmd_str = ' '.join(shlex_quote(arg) for arg in ssh_cmd)\n        if ssh_args:\n            ssh_cmd_str += ' %s' % ssh_args\n        cmd.append('--rsh=%s' % ssh_cmd_str)\n\n    if rsync_path:\n        cmd.append('--rsync-path=%s' % rsync_path)\n\n    if rsync_opts:\n        cmd.extend(rsync_opts)\n\n    if partial:\n        cmd.append('--partial')\n\n    if link_dest:\n        cmd.append('-H')\n        \n        \n        cmd.append('-vv')\n        for x in link_dest:\n            link_path = os.path.abspath(os.path.expanduser(x))\n            destination_path = os.path.abspath(os.path.dirname(dest))\n            if destination_path.find(link_path) == 0:\n                module.fail_json(msg='Hardlinking into a subdirectory of the source would cause recursion. %s and %s' % (destination_path, dest))\n            cmd.append('--link-dest=%s' % link_path)\n\n    changed_marker = '<<CHANGED>>'\n    cmd.append('--out-format=' + changed_marker + '%i %n%L')\n\n    \n    if '@' not in source:\n        source = os.path.expanduser(source)\n    if '@' not in dest:\n        dest = os.path.expanduser(dest)\n\n    cmd.append(source)\n    cmd.append(dest)\n    cmdstr = ' '.join(cmd)\n    (rc, out, err) = module.run_command(cmd)\n    if rc:\n        return module.fail_json(msg=err, rc=rc, cmd=cmdstr)\n\n    if link_dest:\n        \n        changed = (changed_marker + '.') not in out\n    else:\n        changed = changed_marker in out\n\n    out_clean = out.replace(changed_marker, '')\n    out_lines = out_clean.split('\\n')\n    while '' in out_lines:\n        out_lines.remove('')\n    if module._diff:\n        diff = {'prepared': out_clean}\n        return module.exit_json(changed=changed, msg=out_clean,\n                                rc=rc, cmd=cmdstr, stdout_lines=out_lines,\n                                diff=diff)\n\n    return module.exit_json(changed=changed, msg=out_clean,\n                            rc=rc, cmd=cmdstr, stdout_lines=out_lines)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  synchronize version added   1 4  short description  a wrapper around rsync make common tasks playbooks quick easy  description        c(synchronize) wrapper around rsync make common tasks playbooks quick easy  it run originates local host       ansible run  of course  could use c(command) action call rsync  also add fair number       boilerplate options host facts  c(synchronize) intended provide access full power rsync  make common       invocations easier implement  you  still  may need call rsync directly via c(command) c(shell) depending use case  options    src      description          path source host synchronized destination  the path absolute relative      required  true   dest      description          path destination host synchronized source  the path absolute relative      required  true   dest port      description          port number ssh destination host  prior ansible 2 0  ansible ssh port inventory var took precedence value      default  value ansible ssh port host  remote port config setting  value ssh client configuration none set     version added   1 5    mode      description          specify direction synchronization  in push mode localhost delegate source  in pull mode remote host context         source      choices    pull  push       default  push   archive      description          mirrors rsync archive flag  enables recursive  links  perms  times  owner  group flags  d      type  bool     default   yes    checksum      description          skip based checksum  rather mod time   size  note  archive  option still enabled default    checksum  option         disable      type  bool     default        version added   1 6    compress      description          compress file data transfer  in cases  leave enabled unless causes problems      type  bool     default   yes      version added   1 7    existing      description          skip creating new files receiver      type  bool     default        version added   1 5    delete      description          delete files c(dest) exist (after transfer  before) c(src) path  this option requires c(recursive yes)      type  bool     default      dirs      description          transfer directories without recursing     type  bool     default      recursive      description          recurse directories      type  bool     default  value archive option   links      description          copy symlinks symlinks      type  bool     default  value archive option   copy links      description          copy symlinks item point (the referent) copied  rather symlink      type  bool     default      perms      description          preserve permissions      type  bool     default  value archive option   times      description          preserve modification times     type  bool     default  value archive option   owner      description          preserve owner (super user only)     type  bool     default  value archive option   group      description          preserve group     type  bool     default  value archive option   rsync path      description          specify rsync command run remote host  see c(  rsync path) rsync man page    rsync timeout      description          specify   timeout rsync command seconds      default  0   set remote user      description          put user  remote paths  if custom ssh config define remote user host         match inventory user  set parameter        default  yes   use ssh args      description          use ssh args specified ansible cfg     type  bool     default        version added   2 0    rsync opts      description          specify additional rsync options passing array      default      version added   1 6    partial      description          tells rsync keep partial file make subsequent transfer rest file much faster      type  bool     default        version added   2 0    verify host      description          verify destination host key      type  bool     default        version added   2 0    private key      description          specify private key use ssh based rsync connections (e g  c(   ssh id rsa))     version added   1 6    link dest      description          add destination hard link rsync      default      version added   2 5   notes       rsync must installed local remote host       for c(synchronize) module   local host  host  synchronize task originates    destination host  host       synchronize connecting        the  local host  changed different host using  delegate    this enables copying two remote hosts entirely one      remote machine              the user permissions synchronize  src  user running ansible task local host (or remote user      delegate host delegate used)       the user permissions synchronize  dest   remote user  destination host  become user   become yes  active       in 2 0 0 0 bug synchronize module made become occur  local host    this fixed 2 0 1       currently  synchronize limited elevating permissions via passwordless sudo   this rsync connecting remote machine      rsync give us way pass sudo credentials       currently connection types support synchronize (ssh  paramiko  local  docker) sync strategy      determined connection types   note connection must need password rsync making connection      rsync provide us way pass password connection       expect dest   x   remote user  x even using sudo       inspect verbose output validate destination user host path      expected       to exclude files directories synchronized  may add      c( rsync filter) files source directory       rsync daemon must running correct permission using      rsync protocol source destination path       the c(synchronize) module forces    delay updates  avoid leaving destination broken state underlying rsync process      encounters error  those synchronizing large numbers files willing trade safety performance call rsync directly       link destination subject limitations underlaying rsync daemon  hard links preserved relative subtrees      source destination  attempts hardlink directory subdirectory source prevented   author    timothy appnel ( tima)      examples         name  synchronization src control machine dest remote hosts   synchronize      src  relative path     dest   absolute path    name  synchronization using rsync protocol (push)   synchronize      src  relative path      dest  rsync   somehost com path     name  synchronization using rsync protocol (pull)   synchronize      mode  pull     src  rsync   somehost com path      dest   absolute path     name   synchronization using rsync protocol delegate host (push)   synchronize      src   absolute path      dest  rsync   somehost com path    delegate  delegate host    name  synchronization using rsync protocol delegate host (pull)   synchronize      mode  pull     src  rsync   somehost com path      dest   absolute path    delegate  delegate host    name  synchronization without   archive options enabled   synchronize      src  relative path     dest   absolute path     archive     name  synchronization   archive options enabled except   recursive   synchronize      src  relative path     dest   absolute path     recursive     name  synchronization   archive options enabled except   times    checksum option enabled   synchronize      src  relative path     dest   absolute path     checksum  yes     times     name  synchronization without   archive options enabled except use   links   synchronize      src  relative path     dest   absolute path     archive      links  yes    name  synchronization two paths control machine   synchronize      src  relative path     dest   absolute path   delegate  localhost    name  synchronization src inventory host dest localhost pull mode   synchronize      mode  pull     src  relative path     dest   absolute path    name  synchronization src delegate host dest current inventory host    synchronize      src   first absolute path     dest   second absolute path   delegate  delegate host    name  synchronize two directories one remote host    synchronize      src   first absolute path     dest   second absolute path   delegate      inventory hostname        name  synchronize delete files dest remote host found src localhost    synchronize      src  relative path     dest   absolute path     delete  yes     recursive  yes    this specific command granted su privileges destination   name  synchronize using alternate rsync command   synchronize      src  relative path     dest   absolute path     rsync path   su  c rsync     example  rsync filter file source directory     var         exclude path whose last part  var       var        exclude path starting  var  starting source directory      var conf   include  var conf even though previously excluded    name  synchronize passing extra rsync options   synchronize      src   tmp helloworld     dest   var www helloworld     rsync opts             motd             exclude  git     hardlink files change   name  use hardlinks synchronizing filesystems   synchronize      src   tmp path foo txt     dest   tmp path b foo txt     link dest   tmp path          usr bin python        coding  utf 8        copyright  (c) 2012 2013  timothy appnel  tim appnel com     copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt)    this specific command granted su privileges destination    example  rsync filter file source directory      var         exclude path whose last part  var        var        exclude path starting  var  starting source directory       var conf   include  var conf even though previously excluded    hardlink files change    python3 compat  six moves shlex quote available free    upgrade beyond six 1 4 module side     default params depends value archive    if user specified port value    note   the action plugin takes care setting port    inventory user specify explicit dest port    verbose required rsync believe adding    hardlink actually change    expand paths    leading period indicates change ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2012-2013, Timothy Appnel <tim@appnel.com>\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'core'}\n\nDOCUMENTATION = '''\n---\nmodule: synchronize\nversion_added: \"1.4\"\nshort_description: A wrapper around rsync to make common tasks in your playbooks quick and easy.\ndescription:\n    - C(synchronize) is a wrapper around rsync to make common tasks in your playbooks quick and easy. It is run and originates on the local host where\n      Ansible is being run. Of course, you could just use the C(command) action to call rsync yourself, but you also have to add a fair number of\n      boilerplate options and host facts. C(synchronize) is not intended to provide access to the full power of rsync, but does make the most common\n      invocations easier to implement. You `still` may need to call rsync directly via C(command) or C(shell) depending on your use case.\noptions:\n  src:\n    description:\n      - Path on the source host that will be synchronized to the destination; The path can be absolute or relative.\n    required: true\n  dest:\n    description:\n      - Path on the destination host that will be synchronized from the source; The path can be absolute or relative.\n    required: true\n  dest_port:\n    description:\n      - Port number for ssh on the destination host. Prior to ansible 2.0, the ansible_ssh_port inventory var took precedence over this value.\n    default: Value of ansible_ssh_port for this host, remote_port config setting, or the value from ssh client configuration if none of those are set\n    version_added: \"1.5\"\n  mode:\n    description:\n      - Specify the direction of the synchronization. In push mode the localhost or delegate is the source; In pull mode the remote host in context\n        is the source.\n    choices: [ pull, push ]\n    default: push\n  archive:\n    description:\n      - Mirrors the rsync archive flag, enables recursive, links, perms, times, owner, group flags and -D.\n    type: bool\n    default: 'yes'\n  checksum:\n    description:\n      - Skip based on checksum, rather than mod-time & size; Note that that \"archive\" option is still enabled by default - the \"checksum\" option will\n        not disable it.\n    type: bool\n    default: 'no'\n    version_added: \"1.6\"\n  compress:\n    description:\n      - Compress file data during the transfer. In most cases, leave this enabled unless it causes problems.\n    type: bool\n    default: 'yes'\n    version_added: \"1.7\"\n  existing_only:\n    description:\n      - Skip creating new files on receiver.\n    type: bool\n    default: 'no'\n    version_added: \"1.5\"\n  delete:\n    description:\n      - Delete files in C(dest) that don't exist (after transfer, not before) in the C(src) path. This option requires C(recursive=yes).\n    type: bool\n    default: 'no'\n  dirs:\n    description:\n      - Transfer directories without recursing\n    type: bool\n    default: 'no'\n  recursive:\n    description:\n      - Recurse into directories.\n    type: bool\n    default: the value of the archive option\n  links:\n    description:\n      - Copy symlinks as symlinks.\n    type: bool\n    default: the value of the archive option\n  copy_links:\n    description:\n      - Copy symlinks as the item that they point to (the referent) is copied, rather than the symlink.\n    type: bool\n    default: 'no'\n  perms:\n    description:\n      - Preserve permissions.\n    type: bool\n    default: the value of the archive option\n  times:\n    description:\n      - Preserve modification times\n    type: bool\n    default: the value of the archive option\n  owner:\n    description:\n      - Preserve owner (super user only)\n    type: bool\n    default: the value of the archive option\n  group:\n    description:\n      - Preserve group\n    type: bool\n    default: the value of the archive option\n  rsync_path:\n    description:\n      - Specify the rsync command to run on the remote host. See C(--rsync-path) on the rsync man page.\n  rsync_timeout:\n    description:\n      - Specify a --timeout for the rsync command in seconds.\n    default: 0\n  set_remote_user:\n    description:\n      - put user@ for the remote paths. If you have a custom ssh config to define the remote user for a host\n        that does not match the inventory user, you should set this parameter to \"no\".\n    default: yes\n  use_ssh_args:\n    description:\n      - Use the ssh_args specified in ansible.cfg\n    type: bool\n    default: 'no'\n    version_added: \"2.0\"\n  rsync_opts:\n    description:\n      - Specify additional rsync options by passing in an array.\n    default:\n    version_added: \"1.6\"\n  partial:\n    description:\n      - Tells rsync to keep the partial file which should make a subsequent transfer of the rest of the file much faster.\n    type: bool\n    default: 'no'\n    version_added: \"2.0\"\n  verify_host:\n    description:\n      - Verify destination host key.\n    type: bool\n    default: 'no'\n    version_added: \"2.0\"\n  private_key:\n    description:\n      - Specify the private key to use for SSH-based rsync connections (e.g. C(~/.ssh/id_rsa))\n    version_added: \"1.6\"\n  link_dest:\n    description:\n      - add a destination to hard link against during the rsync.\n    default:\n    version_added: \"2.5\"\n\nnotes:\n   - rsync must be installed on both the local and remote host.\n   - For the C(synchronize) module, the \"local host\" is the host `the synchronize task originates on`, and the \"destination host\" is the host\n     `synchronize is connecting to`.\n   - The \"local host\" can be changed to a different host by using `delegate_to`.  This enables copying between two remote hosts or entirely on one\n     remote machine.\n   - >\n     The user and permissions for the synchronize `src` are those of the user running the Ansible task on the local host (or the remote_user for a\n     delegate_to host when delegate_to is used).\n   - The user and permissions for the synchronize `dest` are those of the `remote_user` on the destination host or the `become_user` if `become=yes` is active.\n   - In 2.0.0.0 a bug in the synchronize module made become occur on the \"local host\".  This was fixed in 2.0.1.\n   - Currently, synchronize is limited to elevating permissions via passwordless sudo.  This is because rsync itself is connecting to the remote machine\n     and rsync doesn't give us a way to pass sudo credentials in.\n   - Currently there are only a few connection types which support synchronize (ssh, paramiko, local, and docker) because a sync strategy has been\n     determined for those connection types.  Note that the connection for these must not need a password as rsync itself is making the connection and\n     rsync does not provide us a way to pass a password to the connection.\n   - Expect that dest=~/x will be ~<remote_user>/x even if using sudo.\n   - Inspect the verbose output to validate the destination user/host/path\n     are what was expected.\n   - To exclude files and directories from being synchronized, you may add\n     C(.rsync-filter) files to the source directory.\n   - rsync daemon must be up and running with correct permission when using\n     rsync protocol in source or destination path.\n   - The C(synchronize) module forces `--delay-updates` to avoid leaving a destination in a broken in-between state if the underlying rsync process\n     encounters an error. Those synchronizing large numbers of files that are willing to trade safety for performance should call rsync directly.\n   - link_destination is subject to the same limitations as the underlaying rsync daemon. Hard links are only preserved if the relative subtrees\n     of the source and destination are the same. Attempts to hardlink into a directory that is a subdirectory of the source will be prevented.\n\nauthor:\n- Timothy Appnel (@tima)\n'''\n\nEXAMPLES = '''\n- name: Synchronization of src on the control machine to dest on the remote hosts\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n\n- name: Synchronization using rsync protocol (push)\n  synchronize:\n    src: some/relative/path/\n    dest: rsync://somehost.com/path/\n\n- name: Synchronization using rsync protocol (pull)\n  synchronize:\n    mode: pull\n    src: rsync://somehost.com/path/\n    dest: /some/absolute/path/\n\n- name:  Synchronization using rsync protocol on delegate host (push)\n  synchronize:\n    src: /some/absolute/path/\n    dest: rsync://somehost.com/path/\n  delegate_to: delegate.host\n\n- name: Synchronization using rsync protocol on delegate host (pull)\n  synchronize:\n    mode: pull\n    src: rsync://somehost.com/path/\n    dest: /some/absolute/path/\n  delegate_to: delegate.host\n\n- name: Synchronization without any --archive options enabled\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    archive: no\n\n- name: Synchronization with --archive options enabled except for --recursive\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    recursive: no\n\n- name: Synchronization with --archive options enabled except for --times, with --checksum option enabled\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    checksum: yes\n    times: no\n\n- name: Synchronization without --archive options enabled except use --links\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    archive: no\n    links: yes\n\n- name: Synchronization of two paths both on the control machine\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n  delegate_to: localhost\n\n- name: Synchronization of src on the inventory host to the dest on the localhost in pull mode\n  synchronize:\n    mode: pull\n    src: some/relative/path\n    dest: /some/absolute/path\n\n- name: Synchronization of src on delegate host to dest on the current inventory host.\n  synchronize:\n    src: /first/absolute/path\n    dest: /second/absolute/path\n  delegate_to: delegate.host\n\n- name: Synchronize two directories on one remote host.\n  synchronize:\n    src: /first/absolute/path\n    dest: /second/absolute/path\n  delegate_to: \"{{ inventory_hostname }}\"\n\n- name: Synchronize and delete files in dest on the remote host that are not found in src of localhost.\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    delete: yes\n    recursive: yes\n\n# This specific command is granted su privileges on the destination\n- name: Synchronize using an alternate rsync command\n  synchronize:\n    src: some/relative/path\n    dest: /some/absolute/path\n    rsync_path: \"su -c rsync\"\n\n# Example .rsync-filter file in the source directory\n# - var       # exclude any path whose last part is 'var'\n# - /var      # exclude any path starting with 'var' starting at the source directory\n# + /var/conf # include /var/conf even though it was previously excluded\n\n- name: Synchronize passing in extra rsync options\n  synchronize:\n    src: /tmp/helloworld\n    dest: /var/www/helloworld\n    rsync_opts:\n      - \"--no-motd\"\n      - \"--exclude=.git\"\n\n# Hardlink files if they didn't change\n- name: Use hardlinks when synchronizing filesystems\n  synchronize:\n    src: /tmp/path_a/foo.txt\n    dest: /tmp/path_b/foo.txt\n    link_dest: /tmp/path_a/\n'''\n\n\nimport os\n\n# Python3 compat. six.moves.shlex_quote will be available once we're free to\n# upgrade beyond six-1.4 module-side.\ntry:\n    from shlex import quote as shlex_quote\nexcept ImportError:\n    from pipes import quote as shlex_quote\n\nfrom ansible.module_utils.basic import AnsibleModule\n\n\nclient_addr = None\n\n\ndef substitute_controller(path):\n    global client_addr\n    if not client_addr:\n        ssh_env_string = os.environ.get('SSH_CLIENT', None)\n        try:\n            client_addr, _ = ssh_env_string.split(None, 1)\n        except AttributeError:\n            ssh_env_string = os.environ.get('SSH_CONNECTION', None)\n            try:\n                client_addr, _ = ssh_env_string.split(None, 1)\n            except AttributeError:\n                pass\n        if not client_addr:\n            raise ValueError\n\n    if path.startswith('localhost:'):\n        path = path.replace('localhost', client_addr, 1)\n    return path\n\n\ndef is_rsh_needed(source, dest):\n    if source.startswith('rsync://') or dest.startswith('rsync://'):\n        return False\n    if ':' in source or ':' in dest:\n        return True\n    return False\n\n\ndef main():\n    module = AnsibleModule(\n        argument_spec=dict(\n            src=dict(type='str', required=True),\n            dest=dict(type='str', required=True),\n            dest_port=dict(type='int'),\n            delete=dict(type='bool', default=False),\n            private_key=dict(type='path'),\n            rsync_path=dict(type='str'),\n            _local_rsync_path=dict(type='path', default='rsync'),\n            _substitute_controller=dict(type='bool', default=False),\n            archive=dict(type='bool', default=True),\n            checksum=dict(type='bool', default=False),\n            compress=dict(type='bool', default=True),\n            existing_only=dict(type='bool', default=False),\n            dirs=dict(type='bool', default=False),\n            recursive=dict(type='bool'),\n            links=dict(type='bool'),\n            copy_links=dict(type='bool', default=False),\n            perms=dict(type='bool'),\n            times=dict(type='bool'),\n            owner=dict(type='bool'),\n            group=dict(type='bool'),\n            set_remote_user=dict(type='bool', default=True),\n            rsync_timeout=dict(type='int', default=0),\n            rsync_opts=dict(type='list'),\n            ssh_args=dict(type='str'),\n            partial=dict(type='bool', default=False),\n            verify_host=dict(type='bool', default=False),\n            mode=dict(type='str', default='push', choices=['pull', 'push']),\n            link_dest=dict(type='list')\n        ),\n        supports_check_mode=True,\n    )\n\n    if module.params['_substitute_controller']:\n        try:\n            source = substitute_controller(module.params['src'])\n            dest = substitute_controller(module.params['dest'])\n        except ValueError:\n            module.fail_json(msg='Could not determine controller hostname for rsync to send to')\n    else:\n        source = module.params['src']\n        dest = module.params['dest']\n    dest_port = module.params['dest_port']\n    delete = module.params['delete']\n    private_key = module.params['private_key']\n    rsync_path = module.params['rsync_path']\n    rsync = module.params.get('_local_rsync_path', 'rsync')\n    rsync_timeout = module.params.get('rsync_timeout', 'rsync_timeout')\n    archive = module.params['archive']\n    checksum = module.params['checksum']\n    compress = module.params['compress']\n    existing_only = module.params['existing_only']\n    dirs = module.params['dirs']\n    partial = module.params['partial']\n    # the default of these params depends on the value of archive\n    recursive = module.params['recursive']\n    links = module.params['links']\n    copy_links = module.params['copy_links']\n    perms = module.params['perms']\n    times = module.params['times']\n    owner = module.params['owner']\n    group = module.params['group']\n    rsync_opts = module.params['rsync_opts']\n    ssh_args = module.params['ssh_args']\n    verify_host = module.params['verify_host']\n    link_dest = module.params['link_dest']\n\n    if '/' not in rsync:\n        rsync = module.get_bin_path(rsync, required=True)\n\n    cmd = [rsync, '--delay-updates', '-F']\n    if compress:\n        cmd.append('--compress')\n    if rsync_timeout:\n        cmd.append('--timeout=%s' % rsync_timeout)\n    if module.check_mode:\n        cmd.append('--dry-run')\n    if delete:\n        cmd.append('--delete-after')\n    if existing_only:\n        cmd.append('--existing')\n    if checksum:\n        cmd.append('--checksum')\n    if copy_links:\n        cmd.append('--copy-links')\n    if archive:\n        cmd.append('--archive')\n        if recursive is False:\n            cmd.append('--no-recursive')\n        if links is False:\n            cmd.append('--no-links')\n        if perms is False:\n            cmd.append('--no-perms')\n        if times is False:\n            cmd.append('--no-times')\n        if owner is False:\n            cmd.append('--no-owner')\n        if group is False:\n            cmd.append('--no-group')\n    else:\n        if recursive is True:\n            cmd.append('--recursive')\n        if links is True:\n            cmd.append('--links')\n        if perms is True:\n            cmd.append('--perms')\n        if times is True:\n            cmd.append('--times')\n        if owner is True:\n            cmd.append('--owner')\n        if group is True:\n            cmd.append('--group')\n    if dirs:\n        cmd.append('--dirs')\n\n    if source.startswith('rsync://') and dest.startswith('rsync://'):\n        module.fail_json(msg='either src or dest must be a localhost', rc=1)\n\n    if is_rsh_needed(source, dest):\n        ssh_cmd = [module.get_bin_path('ssh', required=True), '-S', 'none']\n        if private_key is not None:\n            ssh_cmd.extend(['-i', private_key])\n        # If the user specified a port value\n        # Note:  The action plugin takes care of setting this to a port from\n        # inventory if the user didn't specify an explicit dest_port\n        if dest_port is not None:\n            ssh_cmd.extend(['-o', 'Port=%s' % dest_port])\n        if not verify_host:\n            ssh_cmd.extend(['-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=/dev/null'])\n        ssh_cmd_str = ' '.join(shlex_quote(arg) for arg in ssh_cmd)\n        if ssh_args:\n            ssh_cmd_str += ' %s' % ssh_args\n        cmd.append('--rsh=%s' % ssh_cmd_str)\n\n    if rsync_path:\n        cmd.append('--rsync-path=%s' % rsync_path)\n\n    if rsync_opts:\n        cmd.extend(rsync_opts)\n\n    if partial:\n        cmd.append('--partial')\n\n    if link_dest:\n        cmd.append('-H')\n        # verbose required because rsync does not believe that adding a\n        # hardlink is actually a change\n        cmd.append('-vv')\n        for x in link_dest:\n            link_path = os.path.abspath(os.path.expanduser(x))\n            destination_path = os.path.abspath(os.path.dirname(dest))\n            if destination_path.find(link_path) == 0:\n                module.fail_json(msg='Hardlinking into a subdirectory of the source would cause recursion. %s and %s' % (destination_path, dest))\n            cmd.append('--link-dest=%s' % link_path)\n\n    changed_marker = '<<CHANGED>>'\n    cmd.append('--out-format=' + changed_marker + '%i %n%L')\n\n    # expand the paths\n    if '@' not in source:\n        source = os.path.expanduser(source)\n    if '@' not in dest:\n        dest = os.path.expanduser(dest)\n\n    cmd.append(source)\n    cmd.append(dest)\n    cmdstr = ' '.join(cmd)\n    (rc, out, err) = module.run_command(cmd)\n    if rc:\n        return module.fail_json(msg=err, rc=rc, cmd=cmdstr)\n\n    if link_dest:\n        # a leading period indicates no change\n        changed = (changed_marker + '.') not in out\n    else:\n        changed = changed_marker in out\n\n    out_clean = out.replace(changed_marker, '')\n    out_lines = out_clean.split('\\n')\n    while '' in out_lines:\n        out_lines.remove('')\n    if module._diff:\n        diff = {'prepared': out_clean}\n        return module.exit_json(changed=changed, msg=out_clean,\n                                rc=rc, cmd=cmdstr, stdout_lines=out_lines,\n                                diff=diff)\n\n    return module.exit_json(changed=changed, msg=out_clean,\n                            rc=rc, cmd=cmdstr, stdout_lines=out_lines)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "synchronize.py", "id": "af37191a5e1c0e8e4dd22d87c360a432", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/files/synchronize.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}