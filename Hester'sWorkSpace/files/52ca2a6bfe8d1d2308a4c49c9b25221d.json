{"author": "scikit-learn", "code": "\n\nimport time\n\nimport numpy as np\nfrom scipy.cluster import hierarchy\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import AgglomerativeClustering\n\nward = AgglomerativeClustering(n_clusters=3, linkage='ward')\n\nn_samples = np.logspace(.5, 3, 9)\nn_features = np.logspace(1, 3.5, 7)\nN_samples, N_features = np.meshgrid(n_samples,\n                                    n_features)\nscikits_time = np.zeros(N_samples.shape)\nscipy_time = np.zeros(N_samples.shape)\n\nfor i, n in enumerate(n_samples):\n    for j, p in enumerate(n_features):\n        X = np.random.normal(size=(n, p))\n        t0 = time.time()\n        ward.fit(X)\n        scikits_time[j, i] = time.time() - t0\n        t0 = time.time()\n        hierarchy.ward(X)\n        scipy_time[j, i] = time.time() - t0\n\nratio = scikits_time / scipy_time\n\nplt.figure(\"scikit-learn Ward's method benchmark results\")\nplt.imshow(np.log(ratio), aspect='auto', origin=\"lower\")\nplt.colorbar()\nplt.contour(ratio, levels=[1, ], colors='k')\nplt.yticks(range(len(n_features)), n_features.astype(np.int))\nplt.ylabel('N features')\nplt.xticks(range(len(n_samples)), n_samples.astype(np.int))\nplt.xlabel('N samples')\nplt.title(\"Scikit's time, in units of scipy time (log)\")\nplt.show()\n", "comments": "    benchmark scikit learn ward implement compared scipy     ", "content": "\"\"\"\nBenchmark scikit-learn's Ward implement compared to SciPy's\n\"\"\"\n\nimport time\n\nimport numpy as np\nfrom scipy.cluster import hierarchy\nimport matplotlib.pyplot as plt\n\nfrom sklearn.cluster import AgglomerativeClustering\n\nward = AgglomerativeClustering(n_clusters=3, linkage='ward')\n\nn_samples = np.logspace(.5, 3, 9)\nn_features = np.logspace(1, 3.5, 7)\nN_samples, N_features = np.meshgrid(n_samples,\n                                    n_features)\nscikits_time = np.zeros(N_samples.shape)\nscipy_time = np.zeros(N_samples.shape)\n\nfor i, n in enumerate(n_samples):\n    for j, p in enumerate(n_features):\n        X = np.random.normal(size=(n, p))\n        t0 = time.time()\n        ward.fit(X)\n        scikits_time[j, i] = time.time() - t0\n        t0 = time.time()\n        hierarchy.ward(X)\n        scipy_time[j, i] = time.time() - t0\n\nratio = scikits_time / scipy_time\n\nplt.figure(\"scikit-learn Ward's method benchmark results\")\nplt.imshow(np.log(ratio), aspect='auto', origin=\"lower\")\nplt.colorbar()\nplt.contour(ratio, levels=[1, ], colors='k')\nplt.yticks(range(len(n_features)), n_features.astype(np.int))\nplt.ylabel('N features')\nplt.xticks(range(len(n_samples)), n_samples.astype(np.int))\nplt.xlabel('N samples')\nplt.title(\"Scikit's time, in units of scipy time (log)\")\nplt.show()\n", "description": "scikit-learn: machine learning in Python", "file_name": "bench_plot_ward.py", "id": "52ca2a6bfe8d1d2308a4c49c9b25221d", "language": "Python", "project_name": "scikit-learn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/scikit-learn-scikit-learn/scikit-learn-scikit-learn-94ed5a8/benchmarks/bench_plot_ward.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:58:59Z", "url": "https://github.com/scikit-learn/scikit-learn", "wiki": true}