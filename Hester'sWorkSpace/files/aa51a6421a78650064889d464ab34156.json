{"author": "tflearn", "code": "# -*- coding: utf-8 -*-\n\n\"\"\" Deep Residual Network.\n\nApplying a Deep Residual Network to MNIST Dataset classification task.\n\nReferences:\n    - K. He, X. Zhang, S. Ren, and J. Sun. Deep Residual Learning for Image\n      Recognition, 2015.\n    - Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner. \"Gradient-based\n      learning applied to document recognition.\" Proceedings of the IEEE,\n      86(11):2278-2324, November 1998.\n\nLinks:\n    - [Deep Residual Network](http://arxiv.org/pdf/1512.03385.pdf)\n    - [MNIST Dataset](http://yann.lecun.com/exdb/mnist/)\n\n\"\"\"\n\nfrom __future__ import division, print_function, absolute_import\n\nimport tflearn\nimport tflearn.data_utils as du\n\n\nimport tflearn.datasets.mnist as mnist\nX, Y, testX, testY = mnist.load_data(one_hot=True)\nX = X.reshape([-1, 28, 28, 1])\ntestX = testX.reshape([-1, 28, 28, 1])\nX, mean = du.featurewise_zero_center(X)\ntestX = du.featurewise_zero_center(testX, mean)\n\n\nnet = tflearn.input_data(shape=[None, 28, 28, 1])\nnet = tflearn.conv_2d(net, 64, 3, activation='relu', bias=False)\n\nnet = tflearn.residual_bottleneck(net, 3, 16, 64)\nnet = tflearn.residual_bottleneck(net, 1, 32, 128, downsample=True)\nnet = tflearn.residual_bottleneck(net, 2, 32, 128)\nnet = tflearn.residual_bottleneck(net, 1, 64, 256, downsample=True)\nnet = tflearn.residual_bottleneck(net, 2, 64, 256)\nnet = tflearn.batch_normalization(net)\nnet = tflearn.activation(net, 'relu')\nnet = tflearn.global_avg_pool(net)\n\nnet = tflearn.fully_connected(net, 10, activation='softmax')\nnet = tflearn.regression(net, optimizer='momentum',\n                         loss='categorical_crossentropy',\n                         learning_rate=0.1)\n\nmodel = tflearn.DNN(net, checkpoint_path='model_resnet_mnist',\n                    max_checkpoints=10, tensorboard_verbose=0)\nmodel.fit(X, Y, n_epoch=100, validation_set=(testX, testY),\n          show_metric=True, batch_size=256, run_id='resnet_mnist')\n", "comments": "    deep residual network   applying deep residual network mnist dataset classification task   references        k  he  x  zhang  s  ren  j  sun  deep residual learning image       recognition  2015        y  lecun  l  bottou  y  bengio  p  haffner   gradient based       learning applied document recognition   proceedings ieee        86(11) 2278 2324  november 1998   links         deep residual network (http   arxiv org pdf 1512 03385 pdf)        mnist dataset (http   yann lecun com exdb mnist )             coding  utf 8        data loading preprocessing    building residual network    residual blocks    regression    training ", "content": "# -*- coding: utf-8 -*-\n\n\"\"\" Deep Residual Network.\n\nApplying a Deep Residual Network to MNIST Dataset classification task.\n\nReferences:\n    - K. He, X. Zhang, S. Ren, and J. Sun. Deep Residual Learning for Image\n      Recognition, 2015.\n    - Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner. \"Gradient-based\n      learning applied to document recognition.\" Proceedings of the IEEE,\n      86(11):2278-2324, November 1998.\n\nLinks:\n    - [Deep Residual Network](http://arxiv.org/pdf/1512.03385.pdf)\n    - [MNIST Dataset](http://yann.lecun.com/exdb/mnist/)\n\n\"\"\"\n\nfrom __future__ import division, print_function, absolute_import\n\nimport tflearn\nimport tflearn.data_utils as du\n\n# Data loading and preprocessing\nimport tflearn.datasets.mnist as mnist\nX, Y, testX, testY = mnist.load_data(one_hot=True)\nX = X.reshape([-1, 28, 28, 1])\ntestX = testX.reshape([-1, 28, 28, 1])\nX, mean = du.featurewise_zero_center(X)\ntestX = du.featurewise_zero_center(testX, mean)\n\n# Building Residual Network\nnet = tflearn.input_data(shape=[None, 28, 28, 1])\nnet = tflearn.conv_2d(net, 64, 3, activation='relu', bias=False)\n# Residual blocks\nnet = tflearn.residual_bottleneck(net, 3, 16, 64)\nnet = tflearn.residual_bottleneck(net, 1, 32, 128, downsample=True)\nnet = tflearn.residual_bottleneck(net, 2, 32, 128)\nnet = tflearn.residual_bottleneck(net, 1, 64, 256, downsample=True)\nnet = tflearn.residual_bottleneck(net, 2, 64, 256)\nnet = tflearn.batch_normalization(net)\nnet = tflearn.activation(net, 'relu')\nnet = tflearn.global_avg_pool(net)\n# Regression\nnet = tflearn.fully_connected(net, 10, activation='softmax')\nnet = tflearn.regression(net, optimizer='momentum',\n                         loss='categorical_crossentropy',\n                         learning_rate=0.1)\n# Training\nmodel = tflearn.DNN(net, checkpoint_path='model_resnet_mnist',\n                    max_checkpoints=10, tensorboard_verbose=0)\nmodel.fit(X, Y, n_epoch=100, validation_set=(testX, testY),\n          show_metric=True, batch_size=256, run_id='resnet_mnist')\n", "description": "Deep learning library featuring a higher-level API for TensorFlow.", "file_name": "residual_network_mnist.py", "id": "aa51a6421a78650064889d464ab34156", "language": "Python", "project_name": "tflearn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tflearn-tflearn/tflearn-tflearn-70fb38a/examples/images/residual_network_mnist.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:15:41Z", "url": "https://github.com/tflearn/tflearn", "wiki": true}