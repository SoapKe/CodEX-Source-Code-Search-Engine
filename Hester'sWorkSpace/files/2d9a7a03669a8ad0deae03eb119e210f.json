{"author": "mopidy", "code": "\n\nfrom __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nfrom mopidy.mpd import exceptions, protocol\n\n\nclass TestConverts(unittest.TestCase):\n\n    def test_integer(self):\n        self.assertEqual(123, protocol.INT('123'))\n        self.assertEqual(-123, protocol.INT('-123'))\n        self.assertEqual(123, protocol.INT('+123'))\n        self.assertRaises(ValueError, protocol.INT, '3.14')\n        self.assertRaises(ValueError, protocol.INT, '')\n        self.assertRaises(ValueError, protocol.INT, 'abc')\n        self.assertRaises(ValueError, protocol.INT, '12 34')\n\n    def test_unsigned_integer(self):\n        self.assertEqual(123, protocol.UINT('123'))\n        self.assertRaises(ValueError, protocol.UINT, '-123')\n        self.assertRaises(ValueError, protocol.UINT, '+123')\n        self.assertRaises(ValueError, protocol.UINT, '3.14')\n        self.assertRaises(ValueError, protocol.UINT, '')\n        self.assertRaises(ValueError, protocol.UINT, 'abc')\n        self.assertRaises(ValueError, protocol.UINT, '12 34')\n\n    def test_boolean(self):\n        self.assertEqual(True, protocol.BOOL('1'))\n        self.assertEqual(False, protocol.BOOL('0'))\n        self.assertRaises(ValueError, protocol.BOOL, '3.14')\n        self.assertRaises(ValueError, protocol.BOOL, '')\n        self.assertRaises(ValueError, protocol.BOOL, 'true')\n        self.assertRaises(ValueError, protocol.BOOL, 'false')\n        self.assertRaises(ValueError, protocol.BOOL, 'abc')\n        self.assertRaises(ValueError, protocol.BOOL, '12 34')\n\n    def test_range(self):\n        self.assertEqual(slice(1, 2), protocol.RANGE('1'))\n        self.assertEqual(slice(0, 1), protocol.RANGE('0'))\n        self.assertEqual(slice(0, None), protocol.RANGE('0:'))\n        self.assertEqual(slice(1, 3), protocol.RANGE('1:3'))\n        self.assertRaises(ValueError, protocol.RANGE, '3.14')\n        self.assertRaises(ValueError, protocol.RANGE, '1:abc')\n        self.assertRaises(ValueError, protocol.RANGE, 'abc:1')\n        self.assertRaises(ValueError, protocol.RANGE, '2:1')\n        self.assertRaises(ValueError, protocol.RANGE, '-1:2')\n        self.assertRaises(ValueError, protocol.RANGE, '1 : 2')\n        self.assertRaises(ValueError, protocol.RANGE, '')\n        self.assertRaises(ValueError, protocol.RANGE, 'true')\n        self.assertRaises(ValueError, protocol.RANGE, 'false')\n        self.assertRaises(ValueError, protocol.RANGE, 'abc')\n        self.assertRaises(ValueError, protocol.RANGE, '12 34')\n\n\nclass TestCommands(unittest.TestCase):\n\n    def setUp(self):  \n        self.commands = protocol.Commands()\n\n    def test_add_as_a_decorator(self):\n        @self.commands.add('test')\n        def test(context):\n            pass\n\n    def test_register_second_command_to_same_name_fails(self):\n        def func(context):\n            pass\n\n        self.commands.add('foo')(func)\n        with self.assertRaises(Exception):\n            self.commands.add('foo')(func)\n\n    def test_function_only_takes_context_succeeds(self):\n        sentinel = object()\n        self.commands.add('bar')(lambda context: sentinel)\n        self.assertEqual(sentinel, self.commands.call(['bar']))\n\n    def test_function_has_required_arg_succeeds(self):\n        sentinel = object()\n        self.commands.add('bar')(lambda context, required: sentinel)\n        self.assertEqual(sentinel, self.commands.call(['bar', 'arg']))\n\n    def test_function_has_optional_args_succeeds(self):\n        sentinel = object()\n        self.commands.add('bar')(lambda context, optional=None: sentinel)\n        self.assertEqual(sentinel, self.commands.call(['bar']))\n        self.assertEqual(sentinel, self.commands.call(['bar', 'arg']))\n\n    def test_function_has_required_and_optional_args_succeeds(self):\n        sentinel = object()\n\n        def func(context, required, optional=None):\n            return sentinel\n\n        self.commands.add('bar')(func)\n        self.assertEqual(sentinel, self.commands.call(['bar', 'arg']))\n        self.assertEqual(sentinel, self.commands.call(['bar', 'arg', 'arg']))\n\n    def test_function_has_varargs_succeeds(self):\n        sentinel, args = object(), []\n        self.commands.add('bar')(lambda context, *args: sentinel)\n        for i in range(10):\n            self.assertEqual(sentinel, self.commands.call(['bar'] + args))\n            args.append('test')\n\n    def test_function_has_only_varags_succeeds(self):\n        sentinel = object()\n        self.commands.add('baz')(lambda *args: sentinel)\n        self.assertEqual(sentinel, self.commands.call(['baz']))\n\n    def test_function_has_no_arguments_fails(self):\n        with self.assertRaises(TypeError):\n            self.commands.add('test')(lambda: True)\n\n    def test_function_has_required_and_varargs_fails(self):\n        with self.assertRaises(TypeError):\n            def func(context, required, *args):\n                pass\n\n            self.commands.add('test')(func)\n\n    def test_function_has_optional_and_varargs_fails(self):\n        with self.assertRaises(TypeError):\n            def func(context, optional=None, *args):\n                pass\n\n            self.commands.add('test')(func)\n\n    def test_function_hash_keywordargs_fails(self):\n        with self.assertRaises(TypeError):\n            self.commands.add('test')(lambda context, **kwargs: True)\n\n    def test_call_chooses_correct_handler(self):\n        sentinel1, sentinel2, sentinel3 = object(), object(), object()\n        self.commands.add('foo')(lambda context: sentinel1)\n        self.commands.add('bar')(lambda context: sentinel2)\n        self.commands.add('baz')(lambda context: sentinel3)\n\n        self.assertEqual(sentinel1, self.commands.call(['foo']))\n        self.assertEqual(sentinel2, self.commands.call(['bar']))\n        self.assertEqual(sentinel3, self.commands.call(['baz']))\n\n    def test_call_with_nonexistent_handler(self):\n        with self.assertRaises(exceptions.MpdUnknownCommand):\n            self.commands.call(['bar'])\n\n    def test_call_passes_context(self):\n        sentinel = object()\n        self.commands.add('foo')(lambda context: context)\n        self.assertEqual(\n            sentinel, self.commands.call(['foo'], context=sentinel))\n\n    def test_call_without_args_fails(self):\n        with self.assertRaises(exceptions.MpdNoCommand):\n            self.commands.call([])\n\n    def test_call_passes_required_argument(self):\n        self.commands.add('foo')(lambda context, required: required)\n        self.assertEqual('test123', self.commands.call(['foo', 'test123']))\n\n    def test_call_passes_optional_argument(self):\n        sentinel = object()\n        self.commands.add('foo')(lambda context, optional=sentinel: optional)\n        self.assertEqual(sentinel, self.commands.call(['foo']))\n        self.assertEqual('test', self.commands.call(['foo', 'test']))\n\n    def test_call_passes_required_and_optional_argument(self):\n        def func(context, required, optional=None):\n            return (required, optional)\n\n        self.commands.add('foo')(func)\n        self.assertEqual(('arg', None), self.commands.call(['foo', 'arg']))\n        self.assertEqual(\n            ('arg', 'kwarg'), self.commands.call(['foo', 'arg', 'kwarg']))\n\n    def test_call_passes_varargs(self):\n        self.commands.add('foo')(lambda context, *args: args)\n\n    def test_call_incorrect_args(self):\n        self.commands.add('foo')(lambda context: context)\n        with self.assertRaises(exceptions.MpdArgError):\n            self.commands.call(['foo', 'bar'])\n\n        self.commands.add('bar')(lambda context, required: context)\n        with self.assertRaises(exceptions.MpdArgError):\n            self.commands.call(['bar', 'bar', 'baz'])\n\n        self.commands.add('baz')(lambda context, optional=None: context)\n        with self.assertRaises(exceptions.MpdArgError):\n            self.commands.call(['baz', 'bar', 'baz'])\n\n    def test_validator_gets_applied_to_required_arg(self):\n        sentinel = object()\n\n        def func(context, required):\n            return required\n\n        self.commands.add('test', required=lambda v: sentinel)(func)\n        self.assertEqual(sentinel, self.commands.call(['test', 'foo']))\n\n    def test_validator_gets_applied_to_optional_arg(self):\n        sentinel = object()\n\n        def func(context, optional=None):\n            return optional\n\n        self.commands.add('foo', optional=lambda v: sentinel)(func)\n\n        self.assertEqual(sentinel, self.commands.call(['foo', '123']))\n\n    def test_validator_skips_optional_default(self):\n        sentinel = object()\n\n        def func(context, optional=sentinel):\n            return optional\n\n        self.commands.add('foo', optional=lambda v: None)(func)\n\n        self.assertEqual(sentinel, self.commands.call(['foo']))\n\n    def test_validator_applied_to_non_existent_arg_fails(self):\n        self.commands.add('foo')(lambda context, arg: arg)\n        with self.assertRaises(TypeError):\n            def func(context, wrong_arg):\n                return wrong_arg\n\n            self.commands.add('bar', arg=lambda v: v)(func)\n\n    def test_validator_called_context_fails(self):\n        return  \n        with self.assertRaises(TypeError):\n            def func(context):\n                pass\n\n            self.commands.add('bar', context=lambda v: v)(func)\n\n    def test_validator_value_error_is_converted(self):\n        def validdate(value):\n            raise ValueError\n\n        def func(context, arg):\n            pass\n\n        self.commands.add('bar', arg=validdate)(func)\n\n        with self.assertRaises(exceptions.MpdArgError):\n            self.commands.call(['bar', 'test'])\n\n    def test_auth_required_gets_stored(self):\n        def func1(context):\n            pass\n\n        def func2(context):\n            pass\n\n        self.commands.add('foo')(func1)\n        self.commands.add('bar', auth_required=False)(func2)\n\n        self.assertTrue(self.commands.handlers['foo'].auth_required)\n        self.assertFalse(self.commands.handlers['bar'].auth_required)\n\n    def test_list_command_gets_stored(self):\n        def func1(context):\n            pass\n\n        def func2(context):\n            pass\n\n        self.commands.add('foo')(func1)\n        self.commands.add('bar', list_command=False)(func2)\n\n        self.assertTrue(self.commands.handlers['foo'].list_command)\n        self.assertFalse(self.commands.handlers['bar'].list_command)\n", "comments": "  encoding  utf 8    noqa  n802    todo  handle ", "content": "# encoding: utf-8\n\nfrom __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nfrom mopidy.mpd import exceptions, protocol\n\n\nclass TestConverts(unittest.TestCase):\n\n    def test_integer(self):\n        self.assertEqual(123, protocol.INT('123'))\n        self.assertEqual(-123, protocol.INT('-123'))\n        self.assertEqual(123, protocol.INT('+123'))\n        self.assertRaises(ValueError, protocol.INT, '3.14')\n        self.assertRaises(ValueError, protocol.INT, '')\n        self.assertRaises(ValueError, protocol.INT, 'abc')\n        self.assertRaises(ValueError, protocol.INT, '12 34')\n\n    def test_unsigned_integer(self):\n        self.assertEqual(123, protocol.UINT('123'))\n        self.assertRaises(ValueError, protocol.UINT, '-123')\n        self.assertRaises(ValueError, protocol.UINT, '+123')\n        self.assertRaises(ValueError, protocol.UINT, '3.14')\n        self.assertRaises(ValueError, protocol.UINT, '')\n        self.assertRaises(ValueError, protocol.UINT, 'abc')\n        self.assertRaises(ValueError, protocol.UINT, '12 34')\n\n    def test_boolean(self):\n        self.assertEqual(True, protocol.BOOL('1'))\n        self.assertEqual(False, protocol.BOOL('0'))\n        self.assertRaises(ValueError, protocol.BOOL, '3.14')\n        self.assertRaises(ValueError, protocol.BOOL, '')\n        self.assertRaises(ValueError, protocol.BOOL, 'true')\n        self.assertRaises(ValueError, protocol.BOOL, 'false')\n        self.assertRaises(ValueError, protocol.BOOL, 'abc')\n        self.assertRaises(ValueError, protocol.BOOL, '12 34')\n\n    def test_range(self):\n        self.assertEqual(slice(1, 2), protocol.RANGE('1'))\n        self.assertEqual(slice(0, 1), protocol.RANGE('0'))\n        self.assertEqual(slice(0, None), protocol.RANGE('0:'))\n        self.assertEqual(slice(1, 3), protocol.RANGE('1:3'))\n        self.assertRaises(ValueError, protocol.RANGE, '3.14')\n        self.assertRaises(ValueError, protocol.RANGE, '1:abc')\n        self.assertRaises(ValueError, protocol.RANGE, 'abc:1')\n        self.assertRaises(ValueError, protocol.RANGE, '2:1')\n        self.assertRaises(ValueError, protocol.RANGE, '-1:2')\n        self.assertRaises(ValueError, protocol.RANGE, '1 : 2')\n        self.assertRaises(ValueError, protocol.RANGE, '')\n        self.assertRaises(ValueError, protocol.RANGE, 'true')\n        self.assertRaises(ValueError, protocol.RANGE, 'false')\n        self.assertRaises(ValueError, protocol.RANGE, 'abc')\n        self.assertRaises(ValueError, protocol.RANGE, '12 34')\n\n\nclass TestCommands(unittest.TestCase):\n\n    def setUp(self):  # noqa: N802\n        self.commands = protocol.Commands()\n\n    def test_add_as_a_decorator(self):\n        @self.commands.add('test')\n        def test(context):\n            pass\n\n    def test_register_second_command_to_same_name_fails(self):\n        def func(context):\n            pass\n\n        self.commands.add('foo')(func)\n        with self.assertRaises(Exception):\n            self.commands.add('foo')(func)\n\n    def test_function_only_takes_context_succeeds(self):\n        sentinel = object()\n        self.commands.add('bar')(lambda context: sentinel)\n        self.assertEqual(sentinel, self.commands.call(['bar']))\n\n    def test_function_has_required_arg_succeeds(self):\n        sentinel = object()\n        self.commands.add('bar')(lambda context, required: sentinel)\n        self.assertEqual(sentinel, self.commands.call(['bar', 'arg']))\n\n    def test_function_has_optional_args_succeeds(self):\n        sentinel = object()\n        self.commands.add('bar')(lambda context, optional=None: sentinel)\n        self.assertEqual(sentinel, self.commands.call(['bar']))\n        self.assertEqual(sentinel, self.commands.call(['bar', 'arg']))\n\n    def test_function_has_required_and_optional_args_succeeds(self):\n        sentinel = object()\n\n        def func(context, required, optional=None):\n            return sentinel\n\n        self.commands.add('bar')(func)\n        self.assertEqual(sentinel, self.commands.call(['bar', 'arg']))\n        self.assertEqual(sentinel, self.commands.call(['bar', 'arg', 'arg']))\n\n    def test_function_has_varargs_succeeds(self):\n        sentinel, args = object(), []\n        self.commands.add('bar')(lambda context, *args: sentinel)\n        for i in range(10):\n            self.assertEqual(sentinel, self.commands.call(['bar'] + args))\n            args.append('test')\n\n    def test_function_has_only_varags_succeeds(self):\n        sentinel = object()\n        self.commands.add('baz')(lambda *args: sentinel)\n        self.assertEqual(sentinel, self.commands.call(['baz']))\n\n    def test_function_has_no_arguments_fails(self):\n        with self.assertRaises(TypeError):\n            self.commands.add('test')(lambda: True)\n\n    def test_function_has_required_and_varargs_fails(self):\n        with self.assertRaises(TypeError):\n            def func(context, required, *args):\n                pass\n\n            self.commands.add('test')(func)\n\n    def test_function_has_optional_and_varargs_fails(self):\n        with self.assertRaises(TypeError):\n            def func(context, optional=None, *args):\n                pass\n\n            self.commands.add('test')(func)\n\n    def test_function_hash_keywordargs_fails(self):\n        with self.assertRaises(TypeError):\n            self.commands.add('test')(lambda context, **kwargs: True)\n\n    def test_call_chooses_correct_handler(self):\n        sentinel1, sentinel2, sentinel3 = object(), object(), object()\n        self.commands.add('foo')(lambda context: sentinel1)\n        self.commands.add('bar')(lambda context: sentinel2)\n        self.commands.add('baz')(lambda context: sentinel3)\n\n        self.assertEqual(sentinel1, self.commands.call(['foo']))\n        self.assertEqual(sentinel2, self.commands.call(['bar']))\n        self.assertEqual(sentinel3, self.commands.call(['baz']))\n\n    def test_call_with_nonexistent_handler(self):\n        with self.assertRaises(exceptions.MpdUnknownCommand):\n            self.commands.call(['bar'])\n\n    def test_call_passes_context(self):\n        sentinel = object()\n        self.commands.add('foo')(lambda context: context)\n        self.assertEqual(\n            sentinel, self.commands.call(['foo'], context=sentinel))\n\n    def test_call_without_args_fails(self):\n        with self.assertRaises(exceptions.MpdNoCommand):\n            self.commands.call([])\n\n    def test_call_passes_required_argument(self):\n        self.commands.add('foo')(lambda context, required: required)\n        self.assertEqual('test123', self.commands.call(['foo', 'test123']))\n\n    def test_call_passes_optional_argument(self):\n        sentinel = object()\n        self.commands.add('foo')(lambda context, optional=sentinel: optional)\n        self.assertEqual(sentinel, self.commands.call(['foo']))\n        self.assertEqual('test', self.commands.call(['foo', 'test']))\n\n    def test_call_passes_required_and_optional_argument(self):\n        def func(context, required, optional=None):\n            return (required, optional)\n\n        self.commands.add('foo')(func)\n        self.assertEqual(('arg', None), self.commands.call(['foo', 'arg']))\n        self.assertEqual(\n            ('arg', 'kwarg'), self.commands.call(['foo', 'arg', 'kwarg']))\n\n    def test_call_passes_varargs(self):\n        self.commands.add('foo')(lambda context, *args: args)\n\n    def test_call_incorrect_args(self):\n        self.commands.add('foo')(lambda context: context)\n        with self.assertRaises(exceptions.MpdArgError):\n            self.commands.call(['foo', 'bar'])\n\n        self.commands.add('bar')(lambda context, required: context)\n        with self.assertRaises(exceptions.MpdArgError):\n            self.commands.call(['bar', 'bar', 'baz'])\n\n        self.commands.add('baz')(lambda context, optional=None: context)\n        with self.assertRaises(exceptions.MpdArgError):\n            self.commands.call(['baz', 'bar', 'baz'])\n\n    def test_validator_gets_applied_to_required_arg(self):\n        sentinel = object()\n\n        def func(context, required):\n            return required\n\n        self.commands.add('test', required=lambda v: sentinel)(func)\n        self.assertEqual(sentinel, self.commands.call(['test', 'foo']))\n\n    def test_validator_gets_applied_to_optional_arg(self):\n        sentinel = object()\n\n        def func(context, optional=None):\n            return optional\n\n        self.commands.add('foo', optional=lambda v: sentinel)(func)\n\n        self.assertEqual(sentinel, self.commands.call(['foo', '123']))\n\n    def test_validator_skips_optional_default(self):\n        sentinel = object()\n\n        def func(context, optional=sentinel):\n            return optional\n\n        self.commands.add('foo', optional=lambda v: None)(func)\n\n        self.assertEqual(sentinel, self.commands.call(['foo']))\n\n    def test_validator_applied_to_non_existent_arg_fails(self):\n        self.commands.add('foo')(lambda context, arg: arg)\n        with self.assertRaises(TypeError):\n            def func(context, wrong_arg):\n                return wrong_arg\n\n            self.commands.add('bar', arg=lambda v: v)(func)\n\n    def test_validator_called_context_fails(self):\n        return  # TODO: how to handle this\n        with self.assertRaises(TypeError):\n            def func(context):\n                pass\n\n            self.commands.add('bar', context=lambda v: v)(func)\n\n    def test_validator_value_error_is_converted(self):\n        def validdate(value):\n            raise ValueError\n\n        def func(context, arg):\n            pass\n\n        self.commands.add('bar', arg=validdate)(func)\n\n        with self.assertRaises(exceptions.MpdArgError):\n            self.commands.call(['bar', 'test'])\n\n    def test_auth_required_gets_stored(self):\n        def func1(context):\n            pass\n\n        def func2(context):\n            pass\n\n        self.commands.add('foo')(func1)\n        self.commands.add('bar', auth_required=False)(func2)\n\n        self.assertTrue(self.commands.handlers['foo'].auth_required)\n        self.assertFalse(self.commands.handlers['bar'].auth_required)\n\n    def test_list_command_gets_stored(self):\n        def func1(context):\n            pass\n\n        def func2(context):\n            pass\n\n        self.commands.add('foo')(func1)\n        self.commands.add('bar', list_command=False)(func2)\n\n        self.assertTrue(self.commands.handlers['foo'].list_command)\n        self.assertFalse(self.commands.handlers['bar'].list_command)\n", "description": "Mopidy is an extensible music server that plays music from local disk, Spotify, SoundCloud, Google Play Music, and more. You edit the playlist from any phone, tablet, or computer using a range of MPD and web clients.", "file_name": "test_commands.py", "id": "2d9a7a03669a8ad0deae03eb119e210f", "language": "Python", "project_name": "mopidy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mopidy-mopidy/mopidy-mopidy-79d42c3/tests/mpd/test_commands.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:12:51Z", "url": "https://github.com/mopidy/mopidy", "wiki": false}