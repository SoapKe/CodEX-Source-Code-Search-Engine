{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    urljoin,\n)\n\n\nclass ShowRoomLiveIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?showroom-live\\.com/(?!onlive|timetable|event|campaign|news|ranking|room)(?P<id>[^/?\n    _TEST = {\n        'url': 'https://www.showroom-live.com/48_Nana_Okada',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        broadcaster_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, broadcaster_id)\n\n        room_id = self._search_regex(\n            (r'SrGlobal\\.roomId\\s*=\\s*(\\d+)',\n             r'(?:profile|room)\\?room_id\\=(\\d+)'), webpage, 'room_id')\n\n        room = self._download_json(\n            urljoin(url, '/api/room/profile?room_id=%s' % room_id),\n            broadcaster_id)\n\n        is_live = room.get('is_onlive')\n        if is_live is not True:\n            raise ExtractorError('%s is offline' % broadcaster_id, expected=True)\n\n        uploader = room.get('performer_name') or broadcaster_id\n        title = room.get('room_name') or room.get('main_name') or uploader\n\n        streaming_url_list = self._download_json(\n            urljoin(url, '/api/live/streaming_url?room_id=%s' % room_id),\n            broadcaster_id)['streaming_url_list']\n\n        formats = []\n        for stream in streaming_url_list:\n            stream_url = stream.get('url')\n            if not stream_url:\n                continue\n            stream_type = stream.get('type')\n            if stream_type == 'hls':\n                m3u8_formats = self._extract_m3u8_formats(\n                    stream_url, broadcaster_id, ext='mp4', m3u8_id='hls',\n                    live=True)\n                for f in m3u8_formats:\n                    f['quality'] = int_or_none(stream.get('quality', 100))\n                formats.extend(m3u8_formats)\n            elif stream_type == 'rtmp':\n                stream_name = stream.get('stream_name')\n                if not stream_name:\n                    continue\n                formats.append({\n                    'url': stream_url,\n                    'play_path': stream_name,\n                    'page_url': url,\n                    'player_url': 'https://www.showroom-live.com/assets/swf/v3/ShowRoomLive.swf',\n                    'rtmp_live': True,\n                    'ext': 'flv',\n                    'format_id': 'rtmp',\n                    'format_note': stream.get('label'),\n                    'quality': int_or_none(stream.get('quality', 100)),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': compat_str(room.get('live_id') or broadcaster_id),\n            'title': self._live_title(title),\n            'description': room.get('description'),\n            'timestamp': int_or_none(room.get('current_live_started_at')),\n            'uploader': uploader,\n            'uploader_id': broadcaster_id,\n            'view_count': int_or_none(room.get('view_num')),\n            'formats': formats,\n            'is_live': True,\n        }\n", "comments": "# coding: utf-8\n#&]+)'\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    urljoin,\n)\n\n\nclass ShowRoomLiveIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?showroom-live\\.com/(?!onlive|timetable|event|campaign|news|ranking|room)(?P<id>[^/?#&]+)'\n    _TEST = {\n        'url': 'https://www.showroom-live.com/48_Nana_Okada',\n        'only_matching': True,\n    }\n\n    def _real_extract(self, url):\n        broadcaster_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, broadcaster_id)\n\n        room_id = self._search_regex(\n            (r'SrGlobal\\.roomId\\s*=\\s*(\\d+)',\n             r'(?:profile|room)\\?room_id\\=(\\d+)'), webpage, 'room_id')\n\n        room = self._download_json(\n            urljoin(url, '/api/room/profile?room_id=%s' % room_id),\n            broadcaster_id)\n\n        is_live = room.get('is_onlive')\n        if is_live is not True:\n            raise ExtractorError('%s is offline' % broadcaster_id, expected=True)\n\n        uploader = room.get('performer_name') or broadcaster_id\n        title = room.get('room_name') or room.get('main_name') or uploader\n\n        streaming_url_list = self._download_json(\n            urljoin(url, '/api/live/streaming_url?room_id=%s' % room_id),\n            broadcaster_id)['streaming_url_list']\n\n        formats = []\n        for stream in streaming_url_list:\n            stream_url = stream.get('url')\n            if not stream_url:\n                continue\n            stream_type = stream.get('type')\n            if stream_type == 'hls':\n                m3u8_formats = self._extract_m3u8_formats(\n                    stream_url, broadcaster_id, ext='mp4', m3u8_id='hls',\n                    live=True)\n                for f in m3u8_formats:\n                    f['quality'] = int_or_none(stream.get('quality', 100))\n                formats.extend(m3u8_formats)\n            elif stream_type == 'rtmp':\n                stream_name = stream.get('stream_name')\n                if not stream_name:\n                    continue\n                formats.append({\n                    'url': stream_url,\n                    'play_path': stream_name,\n                    'page_url': url,\n                    'player_url': 'https://www.showroom-live.com/assets/swf/v3/ShowRoomLive.swf',\n                    'rtmp_live': True,\n                    'ext': 'flv',\n                    'format_id': 'rtmp',\n                    'format_note': stream.get('label'),\n                    'quality': int_or_none(stream.get('quality', 100)),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': compat_str(room.get('live_id') or broadcaster_id),\n            'title': self._live_title(title),\n            'description': room.get('description'),\n            'timestamp': int_or_none(room.get('current_live_started_at')),\n            'uploader': uploader,\n            'uploader_id': broadcaster_id,\n            'view_count': int_or_none(room.get('view_num')),\n            'formats': formats,\n            'is_live': True,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "showroomlive.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/showroomlive.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}