{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_duration,\n    remove_end,\n)\n\n\nclass LRTIE(InfoExtractor):\n    IE_NAME = 'lrt.lt'\n    _VALID_URL = r'https?://(?:www\\.)?lrt\\.lt/mediateka/irasas/(?P<id>[0-9]+)'\n    _TESTS = [{\n        \n        'url': 'http://www.lrt.lt/mediateka/irasas/54391/',\n        'md5': 'fe44cf7e4ab3198055f2c598fc175cb0',\n        'info_dict': {\n            'id': '54391',\n            'ext': 'mp4',\n            'title': 'Septynios Kauno dienos',\n            'description': 'md5:24d84534c7dc76581e59f5689462411a',\n            'duration': 1783,\n            'view_count': int,\n            'like_count': int,\n        },\n    }, {\n        \n        'url': 'http://www.lrt.lt/mediateka/irasas/1013074524/',\n        'md5': '389da8ca3cad0f51d12bed0c844f6a0a',\n        'info_dict': {\n            'id': '1013074524',\n            'ext': 'mp3',\n            'title': 'Kita tema 2016-09-05 15:05',\n            'description': 'md5:1b295a8fc7219ed0d543fc228c931fb5',\n            'duration': 3008,\n            'view_count': int,\n            'like_count': int,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = remove_end(self._og_search_title(webpage), ' - LRT')\n\n        formats = []\n        for _, file_url in re.findall(\n                r'file\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage):\n            ext = determine_ext(file_url)\n            if ext not in ('m3u8', 'mp3'):\n                continue\n            \n            if ext == 'm3u8' and '.mp3' in file_url:\n                continue\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    file_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    fatal=False))\n            elif ext == 'mp3':\n                formats.append({\n                    'url': file_url,\n                    'vcodec': 'none',\n                })\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._og_search_description(webpage)\n        duration = parse_duration(self._search_regex(\n            r'var\\s+record_len\\s*=\\s*([\"\\'])(?P<duration>[0-9]+:[0-9]+:[0-9]+)\\1',\n            webpage, 'duration', default=None, group='duration'))\n\n        view_count = int_or_none(self._html_search_regex(\n            r'<div[^>]+class=([\"\\']).*?record-desc-seen.*?\\1[^>]*>(?P<count>.+?)</div>',\n            webpage, 'view count', fatal=False, group='count'))\n        like_count = int_or_none(self._search_regex(\n            r'<span[^>]+id=([\"\\'])flikesCount.*?\\1>(?P<count>\\d+)<',\n            webpage, 'like count', fatal=False, group='count'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n        }\n", "comments": "# coding: utf-8\n# m3u8 download\n# direct mp3 download\n# mp3 served as m3u8 produces stuttered media file\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_duration,\n    remove_end,\n)\n\n\nclass LRTIE(InfoExtractor):\n    IE_NAME = 'lrt.lt'\n    _VALID_URL = r'https?://(?:www\\.)?lrt\\.lt/mediateka/irasas/(?P<id>[0-9]+)'\n    _TESTS = [{\n        # m3u8 download\n        'url': 'http://www.lrt.lt/mediateka/irasas/54391/',\n        'md5': 'fe44cf7e4ab3198055f2c598fc175cb0',\n        'info_dict': {\n            'id': '54391',\n            'ext': 'mp4',\n            'title': 'Septynios Kauno dienos',\n            'description': 'md5:24d84534c7dc76581e59f5689462411a',\n            'duration': 1783,\n            'view_count': int,\n            'like_count': int,\n        },\n    }, {\n        # direct mp3 download\n        'url': 'http://www.lrt.lt/mediateka/irasas/1013074524/',\n        'md5': '389da8ca3cad0f51d12bed0c844f6a0a',\n        'info_dict': {\n            'id': '1013074524',\n            'ext': 'mp3',\n            'title': 'Kita tema 2016-09-05 15:05',\n            'description': 'md5:1b295a8fc7219ed0d543fc228c931fb5',\n            'duration': 3008,\n            'view_count': int,\n            'like_count': int,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage = self._download_webpage(url, video_id)\n\n        title = remove_end(self._og_search_title(webpage), ' - LRT')\n\n        formats = []\n        for _, file_url in re.findall(\n                r'file\\s*:\\s*([\"\\'])(?P<url>(?:(?!\\1).)+)\\1', webpage):\n            ext = determine_ext(file_url)\n            if ext not in ('m3u8', 'mp3'):\n                continue\n            # mp3 served as m3u8 produces stuttered media file\n            if ext == 'm3u8' and '.mp3' in file_url:\n                continue\n            if ext == 'm3u8':\n                formats.extend(self._extract_m3u8_formats(\n                    file_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    fatal=False))\n            elif ext == 'mp3':\n                formats.append({\n                    'url': file_url,\n                    'vcodec': 'none',\n                })\n        self._sort_formats(formats)\n\n        thumbnail = self._og_search_thumbnail(webpage)\n        description = self._og_search_description(webpage)\n        duration = parse_duration(self._search_regex(\n            r'var\\s+record_len\\s*=\\s*([\"\\'])(?P<duration>[0-9]+:[0-9]+:[0-9]+)\\1',\n            webpage, 'duration', default=None, group='duration'))\n\n        view_count = int_or_none(self._html_search_regex(\n            r'<div[^>]+class=([\"\\']).*?record-desc-seen.*?\\1[^>]*>(?P<count>.+?)</div>',\n            webpage, 'view count', fatal=False, group='count'))\n        like_count = int_or_none(self._search_regex(\n            r'<span[^>]+id=([\"\\'])flikesCount.*?\\1>(?P<count>\\d+)<',\n            webpage, 'like count', fatal=False, group='count'))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "lrt.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/lrt.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}