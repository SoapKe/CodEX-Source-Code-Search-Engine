{"author": "donnemartin", "code": "class Node(object):\n\n    def __init__(self, data, next=None):\n        self.next = next\n        self.data = data\n\n    def __str__(self):\n        return self.data\n\n\nclass LinkedList(object):\n\n    def __init__(self, head=None):\n        self.head = head\n\n    def __len__(self):\n        curr = self.head\n        counter = 0\n        while curr is not None:\n            counter += 1\n            curr = curr.next\n        return counter\n\n    def insert_to_front(self, data):\n        if data is None:\n            return None\n        node = Node(data, self.head)\n        self.head = node\n        return node\n\n    def append(self, data):\n        if data is None:\n            return None\n        node = Node(data)\n        if self.head is None:\n            self.head = node\n            return node\n        curr_node = self.head\n        while curr_node.next is not None:\n            curr_node = curr_node.next\n        curr_node.next = node\n        return node\n\n    def find(self, data):\n        if data is None:\n            return None\n        curr_node = self.head\n        while curr_node is not None:\n            if curr_node.data == data:\n                return curr_node\n            curr_node = curr_node.next\n        return None\n\n    def delete(self, data):\n        if data is None:\n            return\n        if self.head is None:\n            return\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n        prev_node = self.head\n        curr_node = self.head.next\n        while curr_node is not None:\n            if curr_node.data == data:\n                prev_node.next = curr_node.next\n                return\n            prev_node = curr_node\n            curr_node = curr_node.next\n\n    def delete_alt(self, data):\n        if data is None:\n            return\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            curr_node = curr_node.next\n            return\n        while curr_node.next is not None:\n            if curr_node.next.data == data:\n                curr_node.next = curr_node.next.next\n                return\n            curr_node = curr_node.next\n\n    def print_list(self):\n        curr_node = self.head\n        while curr_node is not None:\n            print(curr_node.data)\n            curr_node = curr_node.next\n\n    def get_all_data(self):\n        data = []\n        curr_node = self.head\n        while curr_node is not None:\n            data.append(curr_node.data)\n            curr_node = curr_node.next\n        return data", "comments": "", "content": "class Node(object):\n\n    def __init__(self, data, next=None):\n        self.next = next\n        self.data = data\n\n    def __str__(self):\n        return self.data\n\n\nclass LinkedList(object):\n\n    def __init__(self, head=None):\n        self.head = head\n\n    def __len__(self):\n        curr = self.head\n        counter = 0\n        while curr is not None:\n            counter += 1\n            curr = curr.next\n        return counter\n\n    def insert_to_front(self, data):\n        if data is None:\n            return None\n        node = Node(data, self.head)\n        self.head = node\n        return node\n\n    def append(self, data):\n        if data is None:\n            return None\n        node = Node(data)\n        if self.head is None:\n            self.head = node\n            return node\n        curr_node = self.head\n        while curr_node.next is not None:\n            curr_node = curr_node.next\n        curr_node.next = node\n        return node\n\n    def find(self, data):\n        if data is None:\n            return None\n        curr_node = self.head\n        while curr_node is not None:\n            if curr_node.data == data:\n                return curr_node\n            curr_node = curr_node.next\n        return None\n\n    def delete(self, data):\n        if data is None:\n            return\n        if self.head is None:\n            return\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n        prev_node = self.head\n        curr_node = self.head.next\n        while curr_node is not None:\n            if curr_node.data == data:\n                prev_node.next = curr_node.next\n                return\n            prev_node = curr_node\n            curr_node = curr_node.next\n\n    def delete_alt(self, data):\n        if data is None:\n            return\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            curr_node = curr_node.next\n            return\n        while curr_node.next is not None:\n            if curr_node.next.data == data:\n                curr_node.next = curr_node.next.next\n                return\n            curr_node = curr_node.next\n\n    def print_list(self):\n        curr_node = self.head\n        while curr_node is not None:\n            print(curr_node.data)\n            curr_node = curr_node.next\n\n    def get_all_data(self):\n        data = []\n        curr_node = self.head\n        while curr_node is not None:\n            data.append(curr_node.data)\n            curr_node = curr_node.next\n        return data", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "linked_list.py", "id": "f3fd15cd4af6ca54043f133b25b3c9af", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/linked_lists/linked_list/linked_list.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}