{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass FunnyOrDieIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?funnyordie\\.com/(?P<type>embed|articles|videos)/(?P<id>[0-9a-f]+)(?:$|[?\n    _TESTS = [{\n        'url': 'http://www.funnyordie.com/videos/0732f586d7/heart-shaped-box-literal-video-version',\n        'md5': 'bcd81e0c4f26189ee09be362ad6e6ba9',\n        'info_dict': {\n            'id': '0732f586d7',\n            'ext': 'mp4',\n            'title': 'Heart-Shaped Box: Literal Video Version',\n            'description': 'md5:ea09a01bc9a1c46d9ab696c01747c338',\n            'thumbnail': r're:^http:.*\\.jpg$',\n            'uploader': 'DASjr',\n            'timestamp': 1317904928,\n            'upload_date': '20111006',\n            'duration': 318.3,\n        },\n    }, {\n        'url': 'http://www.funnyordie.com/embed/e402820827',\n        'info_dict': {\n            'id': 'e402820827',\n            'ext': 'mp4',\n            'title': 'Please Use This Song (Jon Lajoie)',\n            'description': 'Please use this to sell something.  www.jonlajoie.com',\n            'thumbnail': r're:^http:.*\\.jpg$',\n            'timestamp': 1398988800,\n            'upload_date': '20140502',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.funnyordie.com/articles/ebf5e34fc8/10-hours-of-walking-in-nyc-as-a-man',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('id')\n        webpage = self._download_webpage(url, video_id)\n\n        links = re.findall(r'<source src=\"([^\"]+/v)[^\"]+\\.([^\"]+)\" type=\\'video', webpage)\n        if not links:\n            raise ExtractorError('No media links available for %s' % video_id)\n\n        links.sort(key=lambda link: 1 if link[1] == 'mp4' else 0)\n\n        m3u8_url = self._search_regex(\n            r'<source[^>]+src=([\"\\'])(?P<url>.+?/master\\.m3u8[^\"\\']*)\\1',\n            webpage, 'm3u8 url', group='url')\n\n        formats = []\n\n        m3u8_formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native',\n            m3u8_id='hls', fatal=False)\n        source_formats = list(filter(\n            lambda f: f.get('vcodec') != 'none', m3u8_formats))\n\n        bitrates = [int(bitrate) for bitrate in re.findall(r'[,/]v(\\d+)(?=[,/])', m3u8_url)]\n        bitrates.sort()\n\n        if source_formats:\n            self._sort_formats(source_formats)\n\n        for bitrate, f in zip(bitrates, source_formats or [{}] * len(bitrates)):\n            for path, ext in links:\n                ff = f.copy()\n                if ff:\n                    if ext != 'mp4':\n                        ff = dict(\n                            [(k, v) for k, v in ff.items()\n                             if k in ('height', 'width', 'format_id')])\n                    ff.update({\n                        'format_id': ff['format_id'].replace('hls', ext),\n                        'ext': ext,\n                        'protocol': 'http',\n                    })\n                else:\n                    ff.update({\n                        'format_id': '%s-%d' % (ext, bitrate),\n                        'vbr': bitrate,\n                    })\n                ff['url'] = self._proto_relative_url(\n                    '%s%d.%s' % (path, bitrate, ext))\n                formats.append(ff)\n        self._check_formats(formats, video_id)\n\n        formats.extend(m3u8_formats)\n        self._sort_formats(\n            formats, field_preference=('height', 'width', 'tbr', 'format_id'))\n\n        subtitles = {}\n        for src, src_lang in re.findall(r'<track kind=\"captions\" src=\"([^\"]+)\" srclang=\"([^\"]+)\"', webpage):\n            subtitles[src_lang] = [{\n                'ext': src.split('/')[-1],\n                'url': 'http://www.funnyordie.com%s' % src,\n            }]\n\n        timestamp = unified_timestamp(self._html_search_meta(\n            'uploadDate', webpage, 'timestamp', default=None))\n\n        uploader = self._html_search_regex(\n            r'<h\\d[^>]+\\bclass=[\"\\']channel-preview-name[^>]+>(.+?)</h',\n            webpage, 'uploader', default=None)\n\n        title, description, thumbnail, duration = [None] * 4\n\n        medium = self._parse_json(\n            self._search_regex(\n                r'jsonMedium\\s*=\\s*({.+?});', webpage, 'JSON medium',\n                default='{}'),\n            video_id, fatal=False)\n        if medium:\n            title = medium.get('title')\n            duration = float_or_none(medium.get('duration'))\n            if not timestamp:\n                timestamp = unified_timestamp(medium.get('publishDate'))\n\n        post = self._parse_json(\n            self._search_regex(\n                r'fb_post\\s*=\\s*(\\{.*?\\});', webpage, 'post details',\n                default='{}'),\n            video_id, fatal=False)\n        if post:\n            if not title:\n                title = post.get('name')\n            description = post.get('description')\n            thumbnail = post.get('picture')\n\n        if not title:\n            title = self._og_search_title(webpage)\n        if not description:\n            description = self._og_search_description(webpage)\n        if not duration:\n            duration = int_or_none(self._html_search_meta(\n                ('video:duration', 'duration'), webpage, 'duration', default=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "comments": "#/])'\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    float_or_none,\n    int_or_none,\n    unified_timestamp,\n)\n\n\nclass FunnyOrDieIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?funnyordie\\.com/(?P<type>embed|articles|videos)/(?P<id>[0-9a-f]+)(?:$|[?#/])'\n    _TESTS = [{\n        'url': 'http://www.funnyordie.com/videos/0732f586d7/heart-shaped-box-literal-video-version',\n        'md5': 'bcd81e0c4f26189ee09be362ad6e6ba9',\n        'info_dict': {\n            'id': '0732f586d7',\n            'ext': 'mp4',\n            'title': 'Heart-Shaped Box: Literal Video Version',\n            'description': 'md5:ea09a01bc9a1c46d9ab696c01747c338',\n            'thumbnail': r're:^http:.*\\.jpg$',\n            'uploader': 'DASjr',\n            'timestamp': 1317904928,\n            'upload_date': '20111006',\n            'duration': 318.3,\n        },\n    }, {\n        'url': 'http://www.funnyordie.com/embed/e402820827',\n        'info_dict': {\n            'id': 'e402820827',\n            'ext': 'mp4',\n            'title': 'Please Use This Song (Jon Lajoie)',\n            'description': 'Please use this to sell something.  www.jonlajoie.com',\n            'thumbnail': r're:^http:.*\\.jpg$',\n            'timestamp': 1398988800,\n            'upload_date': '20140502',\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.funnyordie.com/articles/ebf5e34fc8/10-hours-of-walking-in-nyc-as-a-man',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n\n        video_id = mobj.group('id')\n        webpage = self._download_webpage(url, video_id)\n\n        links = re.findall(r'<source src=\"([^\"]+/v)[^\"]+\\.([^\"]+)\" type=\\'video', webpage)\n        if not links:\n            raise ExtractorError('No media links available for %s' % video_id)\n\n        links.sort(key=lambda link: 1 if link[1] == 'mp4' else 0)\n\n        m3u8_url = self._search_regex(\n            r'<source[^>]+src=([\"\\'])(?P<url>.+?/master\\.m3u8[^\"\\']*)\\1',\n            webpage, 'm3u8 url', group='url')\n\n        formats = []\n\n        m3u8_formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', 'm3u8_native',\n            m3u8_id='hls', fatal=False)\n        source_formats = list(filter(\n            lambda f: f.get('vcodec') != 'none', m3u8_formats))\n\n        bitrates = [int(bitrate) for bitrate in re.findall(r'[,/]v(\\d+)(?=[,/])', m3u8_url)]\n        bitrates.sort()\n\n        if source_formats:\n            self._sort_formats(source_formats)\n\n        for bitrate, f in zip(bitrates, source_formats or [{}] * len(bitrates)):\n            for path, ext in links:\n                ff = f.copy()\n                if ff:\n                    if ext != 'mp4':\n                        ff = dict(\n                            [(k, v) for k, v in ff.items()\n                             if k in ('height', 'width', 'format_id')])\n                    ff.update({\n                        'format_id': ff['format_id'].replace('hls', ext),\n                        'ext': ext,\n                        'protocol': 'http',\n                    })\n                else:\n                    ff.update({\n                        'format_id': '%s-%d' % (ext, bitrate),\n                        'vbr': bitrate,\n                    })\n                ff['url'] = self._proto_relative_url(\n                    '%s%d.%s' % (path, bitrate, ext))\n                formats.append(ff)\n        self._check_formats(formats, video_id)\n\n        formats.extend(m3u8_formats)\n        self._sort_formats(\n            formats, field_preference=('height', 'width', 'tbr', 'format_id'))\n\n        subtitles = {}\n        for src, src_lang in re.findall(r'<track kind=\"captions\" src=\"([^\"]+)\" srclang=\"([^\"]+)\"', webpage):\n            subtitles[src_lang] = [{\n                'ext': src.split('/')[-1],\n                'url': 'http://www.funnyordie.com%s' % src,\n            }]\n\n        timestamp = unified_timestamp(self._html_search_meta(\n            'uploadDate', webpage, 'timestamp', default=None))\n\n        uploader = self._html_search_regex(\n            r'<h\\d[^>]+\\bclass=[\"\\']channel-preview-name[^>]+>(.+?)</h',\n            webpage, 'uploader', default=None)\n\n        title, description, thumbnail, duration = [None] * 4\n\n        medium = self._parse_json(\n            self._search_regex(\n                r'jsonMedium\\s*=\\s*({.+?});', webpage, 'JSON medium',\n                default='{}'),\n            video_id, fatal=False)\n        if medium:\n            title = medium.get('title')\n            duration = float_or_none(medium.get('duration'))\n            if not timestamp:\n                timestamp = unified_timestamp(medium.get('publishDate'))\n\n        post = self._parse_json(\n            self._search_regex(\n                r'fb_post\\s*=\\s*(\\{.*?\\});', webpage, 'post details',\n                default='{}'),\n            video_id, fatal=False)\n        if post:\n            if not title:\n                title = post.get('name')\n            description = post.get('description')\n            thumbnail = post.get('picture')\n\n        if not title:\n            title = self._og_search_title(webpage)\n        if not description:\n            description = self._og_search_description(webpage)\n        if not duration:\n            duration = int_or_none(self._html_search_meta(\n                ('video:duration', 'duration'), webpage, 'duration', default=False))\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'timestamp': timestamp,\n            'duration': duration,\n            'formats': formats,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "funnyordie.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/funnyordie.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}