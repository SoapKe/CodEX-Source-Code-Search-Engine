{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\nimport hashlib\nimport re\n\nfrom .aws import AWSIE\nfrom .anvato import AnvatoIE\nfrom ..utils import (\n    smuggle_url,\n    urlencode_postdata,\n    xpath_text,\n)\n\n\nclass ScrippsNetworksWatchIE(AWSIE):\n    IE_NAME = 'scrippsnetworks:watch'\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://watch.hgtv.com/show/HGTVE/Best-Ever-Treehouses/2241515/Best-Ever-Treehouses/',\n        'md5': '26545fd676d939954c6808274bdb905a',\n        'info_dict': {\n            'id': '4173834',\n            'ext': 'mp4',\n            'title': 'Best Ever Treehouses',\n            'description': \"We're searching for the most over the top treehouses.\",\n            'uploader': 'ANV',\n            'upload_date': '20170922',\n            'timestamp': 1506056400,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [AnvatoIE.ie_key()],\n    }, {\n        'url': 'http://watch.diynetwork.com/show/DSAL/Salvage-Dawgs/2656646/Covington-Church/',\n        'only_matching': True,\n    }, {\n        'url': 'http://watch.diynetwork.com/player.HNT.html\n        'only_matching': True,\n    }, {\n        'url': 'http://watch.geniuskitchen.com/player/3787617/Ample-Hills-Ice-Cream-Bike/',\n        'only_matching': True,\n    }]\n\n    _SNI_TABLE = {\n        'hgtv': 'hgtv',\n        'diynetwork': 'diy',\n        'foodnetwork': 'food',\n        'cookingchanneltv': 'cook',\n        'travelchannel': 'trav',\n        'geniuskitchen': 'genius',\n    }\n\n    _AWS_API_KEY = 'E7wSQmq0qK6xPrF13WmzKiHo4BQ7tip4pQcSXVl1'\n    _AWS_PROXY_HOST = 'web.api.video.snidigital.com'\n\n    _AWS_USER_AGENT = 'aws-sdk-js/2.80.0 callback'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        site_id, video_id = mobj.group('site', 'id')\n\n        aws_identity_id_json = json.dumps({\n            'IdentityId': '%s:7655847c-0ae7-4d9b-80d6-56c062927eb3' % self._AWS_REGION\n        }).encode('utf-8')\n        token = self._download_json(\n            'https://cognito-identity.%s.amazonaws.com/' % self._AWS_REGION, video_id,\n            data=aws_identity_id_json,\n            headers={\n                'Accept': '*/*',\n                'Content-Type': 'application/x-amz-json-1.1',\n                'Referer': url,\n                'X-Amz-Content-Sha256': hashlib.sha256(aws_identity_id_json).hexdigest(),\n                'X-Amz-Target': 'AWSCognitoIdentityService.GetOpenIdToken',\n                'X-Amz-User-Agent': self._AWS_USER_AGENT,\n            })['Token']\n\n        sts = self._download_xml(\n            'https://sts.amazonaws.com/', video_id, data=urlencode_postdata({\n                'Action': 'AssumeRoleWithWebIdentity',\n                'RoleArn': 'arn:aws:iam::710330595350:role/Cognito_WebAPIUnauth_Role',\n                'RoleSessionName': 'web-identity',\n                'Version': '2011-06-15',\n                'WebIdentityToken': token,\n            }), headers={\n                'Referer': url,\n                'X-Amz-User-Agent': self._AWS_USER_AGENT,\n                'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',\n            })\n\n        def get(key):\n            return xpath_text(\n                sts, './/{https://sts.amazonaws.com/doc/2011-06-15/}%s' % key,\n                fatal=True)\n\n        mcp_id = self._aws_execute_api({\n            'uri': '/1/web/brands/%s/episodes/scrid/%s' % (self._SNI_TABLE[site_id], video_id),\n            'access_key': get('AccessKeyId'),\n            'secret_key': get('SecretAccessKey'),\n            'session_token': get('SessionToken'),\n        }, video_id)['results'][0]['mcpId']\n\n        return self.url_result(\n            smuggle_url(\n                'anvato:anvato_scripps_app_web_prod_0837996dbe373629133857ae9eb72e740424d80a:%s' % mcp_id,\n                {'geo_countries': ['US']}),\n            AnvatoIE.ie_key(), video_id=mcp_id)\n", "comments": "(?x)\n                    https?://\n                        watch\\.\n                        (?P<site>hgtv|foodnetwork|travelchannel|diynetwork|cookingchanneltv|geniuskitchen)\\.com/\n                        (?:\n                            player\\.[A-Z0-9]+\\.html\\#|\n                            show/(?:[^/]+/){2}|\n                            player/\n                        )\n                        (?P<id>\\d+)\n                    \n \n# coding: utf-8\n#2656646',\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\nimport hashlib\nimport re\n\nfrom .aws import AWSIE\nfrom .anvato import AnvatoIE\nfrom ..utils import (\n    smuggle_url,\n    urlencode_postdata,\n    xpath_text,\n)\n\n\nclass ScrippsNetworksWatchIE(AWSIE):\n    IE_NAME = 'scrippsnetworks:watch'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        watch\\.\n                        (?P<site>hgtv|foodnetwork|travelchannel|diynetwork|cookingchanneltv|geniuskitchen)\\.com/\n                        (?:\n                            player\\.[A-Z0-9]+\\.html\\#|\n                            show/(?:[^/]+/){2}|\n                            player/\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [{\n        'url': 'http://watch.hgtv.com/show/HGTVE/Best-Ever-Treehouses/2241515/Best-Ever-Treehouses/',\n        'md5': '26545fd676d939954c6808274bdb905a',\n        'info_dict': {\n            'id': '4173834',\n            'ext': 'mp4',\n            'title': 'Best Ever Treehouses',\n            'description': \"We're searching for the most over the top treehouses.\",\n            'uploader': 'ANV',\n            'upload_date': '20170922',\n            'timestamp': 1506056400,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'add_ie': [AnvatoIE.ie_key()],\n    }, {\n        'url': 'http://watch.diynetwork.com/show/DSAL/Salvage-Dawgs/2656646/Covington-Church/',\n        'only_matching': True,\n    }, {\n        'url': 'http://watch.diynetwork.com/player.HNT.html#2656646',\n        'only_matching': True,\n    }, {\n        'url': 'http://watch.geniuskitchen.com/player/3787617/Ample-Hills-Ice-Cream-Bike/',\n        'only_matching': True,\n    }]\n\n    _SNI_TABLE = {\n        'hgtv': 'hgtv',\n        'diynetwork': 'diy',\n        'foodnetwork': 'food',\n        'cookingchanneltv': 'cook',\n        'travelchannel': 'trav',\n        'geniuskitchen': 'genius',\n    }\n\n    _AWS_API_KEY = 'E7wSQmq0qK6xPrF13WmzKiHo4BQ7tip4pQcSXVl1'\n    _AWS_PROXY_HOST = 'web.api.video.snidigital.com'\n\n    _AWS_USER_AGENT = 'aws-sdk-js/2.80.0 callback'\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        site_id, video_id = mobj.group('site', 'id')\n\n        aws_identity_id_json = json.dumps({\n            'IdentityId': '%s:7655847c-0ae7-4d9b-80d6-56c062927eb3' % self._AWS_REGION\n        }).encode('utf-8')\n        token = self._download_json(\n            'https://cognito-identity.%s.amazonaws.com/' % self._AWS_REGION, video_id,\n            data=aws_identity_id_json,\n            headers={\n                'Accept': '*/*',\n                'Content-Type': 'application/x-amz-json-1.1',\n                'Referer': url,\n                'X-Amz-Content-Sha256': hashlib.sha256(aws_identity_id_json).hexdigest(),\n                'X-Amz-Target': 'AWSCognitoIdentityService.GetOpenIdToken',\n                'X-Amz-User-Agent': self._AWS_USER_AGENT,\n            })['Token']\n\n        sts = self._download_xml(\n            'https://sts.amazonaws.com/', video_id, data=urlencode_postdata({\n                'Action': 'AssumeRoleWithWebIdentity',\n                'RoleArn': 'arn:aws:iam::710330595350:role/Cognito_WebAPIUnauth_Role',\n                'RoleSessionName': 'web-identity',\n                'Version': '2011-06-15',\n                'WebIdentityToken': token,\n            }), headers={\n                'Referer': url,\n                'X-Amz-User-Agent': self._AWS_USER_AGENT,\n                'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',\n            })\n\n        def get(key):\n            return xpath_text(\n                sts, './/{https://sts.amazonaws.com/doc/2011-06-15/}%s' % key,\n                fatal=True)\n\n        mcp_id = self._aws_execute_api({\n            'uri': '/1/web/brands/%s/episodes/scrid/%s' % (self._SNI_TABLE[site_id], video_id),\n            'access_key': get('AccessKeyId'),\n            'secret_key': get('SecretAccessKey'),\n            'session_token': get('SessionToken'),\n        }, video_id)['results'][0]['mcpId']\n\n        return self.url_result(\n            smuggle_url(\n                'anvato:anvato_scripps_app_web_prod_0837996dbe373629133857ae9eb72e740424d80a:%s' % mcp_id,\n                {'geo_countries': ['US']}),\n            AnvatoIE.ie_key(), video_id=mcp_id)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "scrippsnetworks.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/scrippsnetworks.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}