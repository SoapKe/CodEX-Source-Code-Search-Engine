{"author": "jwilder", "code": "from time import sleep\n\nimport pytest\nimport requests\n\npytestmark = pytest.mark.xfail()  \n\n\ndef test_default_nginx_welcome_page_should_not_be_served(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://whatever.nginx-proxy/\", allow_redirects=False)\n    assert \"<title>Welcome to nginx!</title>\" not in r.text\n\n\ndef test_unknown_virtual_host_is_503(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://unknown.nginx-proxy/\", allow_redirects=False)\n    assert r.status_code == 503\n\n\ndef test_http_web_a_is_forwarded(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://webA.nginx-proxy/port\", allow_redirects=False)\n    assert r.status_code == 200\n    assert \"answer from port 81\\n\" == r.text\n\n\ndef test_http_web_b_gets_an_error(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://webB.nginx-proxy/\", allow_redirects=False)\n    assert \"<title>Welcome to nginx!</title>\" not in r.text\n    with pytest.raises(requests.exceptions.HTTPError):\n        r.raise_for_status()\n\n\ndef test_reverseproxy_survive_restart(docker_compose):\n    docker_compose.containers.get(\"reverseproxy\").restart()\n    sleep(2)  \n    assert docker_compose.containers.get(\"reverseproxy\").status == \"running\"\n", "comments": "  todo delete marker  585 merged    give time container initialize ", "content": "from time import sleep\n\nimport pytest\nimport requests\n\npytestmark = pytest.mark.xfail()  # TODO delete this marker once #585 is merged\n\n\ndef test_default_nginx_welcome_page_should_not_be_served(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://whatever.nginx-proxy/\", allow_redirects=False)\n    assert \"<title>Welcome to nginx!</title>\" not in r.text\n\n\ndef test_unknown_virtual_host_is_503(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://unknown.nginx-proxy/\", allow_redirects=False)\n    assert r.status_code == 503\n\n\ndef test_http_web_a_is_forwarded(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://webA.nginx-proxy/port\", allow_redirects=False)\n    assert r.status_code == 200\n    assert \"answer from port 81\\n\" == r.text\n\n\ndef test_http_web_b_gets_an_error(docker_compose, nginxproxy):\n    r = nginxproxy.get(\"http://webB.nginx-proxy/\", allow_redirects=False)\n    assert \"<title>Welcome to nginx!</title>\" not in r.text\n    with pytest.raises(requests.exceptions.HTTPError):\n        r.raise_for_status()\n\n\ndef test_reverseproxy_survive_restart(docker_compose):\n    docker_compose.containers.get(\"reverseproxy\").restart()\n    sleep(2)  # give time for the container to initialize\n    assert docker_compose.containers.get(\"reverseproxy\").status == \"running\"\n", "description": "Automated nginx proxy for Docker containers using docker-gen", "file_name": "test_unreachable_net.py", "id": "cdadd17810b7e4882c8b3510a346b06c", "language": "Python", "project_name": "nginx-proxy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/jwilder-nginx-proxy/jwilder-nginx-proxy-000a447/test/stress_tests/test_unreachable_network/test_unreachable_net.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:25:07Z", "url": "https://github.com/jwilder/nginx-proxy", "wiki": true}