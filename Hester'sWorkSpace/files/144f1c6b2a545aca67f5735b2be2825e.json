{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    extract_attributes,\n    ExtractorError,\n    get_elements_by_class,\n    urlencode_postdata,\n)\n\n\nclass EinthusanIE(InfoExtractor):\n    _VALID_URL = r'https?://einthusan\\.tv/movie/watch/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://einthusan.tv/movie/watch/9097/',\n        'md5': 'ff0f7f2065031b8a2cf13a933731c035',\n        'info_dict': {\n            'id': '9097',\n            'ext': 'mp4',\n            'title': 'Ae Dil Hai Mushkil',\n            'description': 'md5:33ef934c82a671a94652a9b4e54d931b',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'url': 'https://einthusan.tv/movie/watch/51MZ/?lang=hindi',\n        'only_matching': True,\n    }]\n\n    \n    def _decrypt(self, encrypted_data, video_id):\n        return self._parse_json(compat_b64decode((\n            encrypted_data[:10] + encrypted_data[-1] + encrypted_data[12:-1]\n        )).decode('utf-8'), video_id)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(r'<h3>([^<]+)</h3>', webpage, 'title')\n\n        player_params = extract_attributes(self._search_regex(\n            r'(<section[^>]+id=\"UIVideoPlayer\"[^>]+>)', webpage, 'player parameters'))\n\n        page_id = self._html_search_regex(\n            '<html[^>]+data-pageid=\"([^\"]+)\"', webpage, 'page ID')\n        video_data = self._download_json(\n            'https://einthusan.tv/ajax/movie/watch/%s/' % video_id, video_id,\n            data=urlencode_postdata({\n                'xEvent': 'UIVideoPlayer.PingOutcome',\n                'xJson': json.dumps({\n                    'EJOutcomes': player_params['data-ejpingables'],\n                    'NativeHLS': False\n                }),\n                'arcVersion': 3,\n                'appVersion': 59,\n                'gorilla.csrf.Token': page_id,\n            }))['Data']\n\n        if isinstance(video_data, compat_str) and video_data.startswith('/ratelimited/'):\n            raise ExtractorError(\n                'Download rate reached. Please try again later.', expected=True)\n\n        ej_links = self._decrypt(video_data['EJLinks'], video_id)\n\n        formats = []\n\n        m3u8_url = ej_links.get('HLSLink')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, ext='mp4', entry_protocol='m3u8_native'))\n\n        mp4_url = ej_links.get('MP4Link')\n        if mp4_url:\n            formats.append({\n                'url': mp4_url,\n            })\n\n        self._sort_formats(formats)\n\n        description = get_elements_by_class('synopsis', webpage)[0]\n        thumbnail = self._html_search_regex(\n            r,\n            webpage, 'thumbnail url', fatal=False, group='url')\n        if thumbnail is not None:\n            thumbnail = compat_urlparse.urljoin(url, thumbnail)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n        }\n", "comments": "<img[^>]+src=([\"'])(?P<url>(?!\\1).+?/moviecovers/(?!\\1).+?)\\1\n1\n# coding: utf-8\n#&]+)'\n# reversed from jsoncrypto.prototype.decrypt() in einthusan-PGMovieWatcher.js\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport json\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_b64decode,\n    compat_str,\n    compat_urlparse,\n)\nfrom ..utils import (\n    extract_attributes,\n    ExtractorError,\n    get_elements_by_class,\n    urlencode_postdata,\n)\n\n\nclass EinthusanIE(InfoExtractor):\n    _VALID_URL = r'https?://einthusan\\.tv/movie/watch/(?P<id>[^/?#&]+)'\n    _TESTS = [{\n        'url': 'https://einthusan.tv/movie/watch/9097/',\n        'md5': 'ff0f7f2065031b8a2cf13a933731c035',\n        'info_dict': {\n            'id': '9097',\n            'ext': 'mp4',\n            'title': 'Ae Dil Hai Mushkil',\n            'description': 'md5:33ef934c82a671a94652a9b4e54d931b',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n        }\n    }, {\n        'url': 'https://einthusan.tv/movie/watch/51MZ/?lang=hindi',\n        'only_matching': True,\n    }]\n\n    # reversed from jsoncrypto.prototype.decrypt() in einthusan-PGMovieWatcher.js\n    def _decrypt(self, encrypted_data, video_id):\n        return self._parse_json(compat_b64decode((\n            encrypted_data[:10] + encrypted_data[-1] + encrypted_data[12:-1]\n        )).decode('utf-8'), video_id)\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        title = self._html_search_regex(r'<h3>([^<]+)</h3>', webpage, 'title')\n\n        player_params = extract_attributes(self._search_regex(\n            r'(<section[^>]+id=\"UIVideoPlayer\"[^>]+>)', webpage, 'player parameters'))\n\n        page_id = self._html_search_regex(\n            '<html[^>]+data-pageid=\"([^\"]+)\"', webpage, 'page ID')\n        video_data = self._download_json(\n            'https://einthusan.tv/ajax/movie/watch/%s/' % video_id, video_id,\n            data=urlencode_postdata({\n                'xEvent': 'UIVideoPlayer.PingOutcome',\n                'xJson': json.dumps({\n                    'EJOutcomes': player_params['data-ejpingables'],\n                    'NativeHLS': False\n                }),\n                'arcVersion': 3,\n                'appVersion': 59,\n                'gorilla.csrf.Token': page_id,\n            }))['Data']\n\n        if isinstance(video_data, compat_str) and video_data.startswith('/ratelimited/'):\n            raise ExtractorError(\n                'Download rate reached. Please try again later.', expected=True)\n\n        ej_links = self._decrypt(video_data['EJLinks'], video_id)\n\n        formats = []\n\n        m3u8_url = ej_links.get('HLSLink')\n        if m3u8_url:\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, ext='mp4', entry_protocol='m3u8_native'))\n\n        mp4_url = ej_links.get('MP4Link')\n        if mp4_url:\n            formats.append({\n                'url': mp4_url,\n            })\n\n        self._sort_formats(formats)\n\n        description = get_elements_by_class('synopsis', webpage)[0]\n        thumbnail = self._html_search_regex(\n            r'''<img[^>]+src=([\"'])(?P<url>(?!\\1).+?/moviecovers/(?!\\1).+?)\\1''',\n            webpage, 'thumbnail url', fatal=False, group='url')\n        if thumbnail is not None:\n            thumbnail = compat_urlparse.urljoin(url, thumbnail)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnail': thumbnail,\n            'description': description,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "einthusan.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/einthusan.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}