{"author": "idank", "code": "import unittest\n\nimport bashlex.errors, bashlex.ast\n\nfrom explainshell import matcher, errors, helpconstants\nfrom tests import helpers\n\ns = helpers.mockstore()\n\nclass test_matcher(unittest.TestCase):\n    def assertMatchSingle(self, what, expectedmanpage, expectedresults):\n        m = matcher.matcher(what, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[1].manpage, expectedmanpage)\n        self.assertEquals(groups[1].results, expectedresults)\n\n    def test_unknown_prog(self):\n        self.assertRaises(errors.ProgramDoesNotExist, matcher.matcher('foo', s).match)\n\n    def test_unicode(self):\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 13, '-b <arg> desc', '-b uni???')]\n\n        self.assertMatchSingle(u'bar -b uni\\u05e7\\u05d5\\u05d3', s.findmanpage('bar')[0], matchedresult)\n\n    def test_no_options(self):\n        matchedresult = [(0, 3, 'bar synopsis', 'bar')]\n        self.assertMatchSingle('bar', s.findmanpage('bar')[0], matchedresult)\n\n    def test_known_arg(self):\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 10, '-a desc', '-a --a'),\n            (11, 13, '-? help text', '-?')]\n\n        self.assertMatchSingle('bar -a --a -?', s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_in_fuzzy_with_expected_value(self):\n        cmd = 'baz -ab arg'\n        matchedresult = [\n            (0, 3, 'baz synopsis', 'baz'),\n            (4, 6, '-a desc', '-a'),\n            (6, 11, '-b <arg> desc', 'b arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('baz')[0], matchedresult)\n\n        cmd = 'baz -ab12'\n        matchedresult = [\n            (0, 3, 'baz synopsis', 'baz'),\n            (4, 6, '-a desc', '-a'),\n            (6, 9, '-b <arg> desc', 'b12')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('baz')[0], matchedresult)\n\n    def test_partialmatch_with_arguments(self):\n        cmd = 'withargs arg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            (9, 12, 'FILE argument', 'arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n    def test_reset_current_option_if_argument_taken(self):\n        cmd = 'withargs -ab12 arg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            (9, 11, '-a desc', '-a'),\n            (11, 14, '-b <arg> desc', 'b12'),\n            (15, 18, 'FILE argument', 'arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n        cmd = 'withargs -b12 arg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            (9, 13, '-b <arg> desc', '-b12'),\n            (14, 17, 'FILE argument', 'arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n        \n        cmd = 'withargs -b 12 arg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            (9, 14, '-b <arg> desc', '-b 12'),\n            (15, 18, 'FILE argument', 'arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n    def test_arg_with_expected_value(self):\n        cmd = 'bar -b arg --b arg'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 18, '-b <arg> desc', '-b arg --b arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_with_expected_value_from_list(self):\n        cmd = 'bar -c one'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 10, '-c=one,two\\ndesc', '-c one')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n        cmd = 'bar -c notinlist'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 6, '-c=one,two\\ndesc', '-c'),\n            (7, 16, None, 'notinlist')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_with_expected_value_clash(self):\n        '''the first option expects an arg but the arg is actually an option'''\n        cmd = 'bar -b -a'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 6, '-b <arg> desc', '-b'),\n            (7, 9, '-a desc', '-a')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_with_expected_value_no_clash(self):\n        '''the first option expects an arg but the arg is not an option even though\n        it looks like one'''\n        cmd = 'bar -b -xa'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 6, '-b <arg> desc', '-b'),\n            (7, 9, None, '-x'),\n            (9, 10, '-a desc', 'a')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_unknown_arg(self):\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 6, None, '-x')]\n        self.assertMatchSingle('bar -x', s.findmanpage('bar')[0], matchedresult)\n\n        \n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 10, None, '-x --x')]\n        self.assertMatchSingle('bar -x --x', s.findmanpage('bar')[0], matchedresult)\n\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 8, None, '-xyz')]\n        self.assertMatchSingle('bar -xyz', s.findmanpage('bar')[0], matchedresult)\n\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'),\n                                 (4, 6, None, '-x'),\n                                 (6, 7, '-a desc', 'a'), (7, 8, None, 'z')]\n\n        self.assertMatchSingle('bar -xaz', s.findmanpage('bar')[0], matchedresult)\n\n    def test_merge_same_match(self):\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 8, '-a desc', '-aaa')]\n        self.assertMatchSingle('bar -aaa', s.findmanpage('bar')[0], matchedresult)\n\n    def test_known_and_unknown_arg(self):\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 6, '-a desc', '-a'), (7, 9, None, '-x')]\n        self.assertMatchSingle('bar -a -x', s.findmanpage('bar')[0], matchedresult)\n\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 6, '-a desc', '-a'), (6, 7, None, 'x')]\n        self.assertMatchSingle('bar -ax', s.findmanpage('bar')[0], matchedresult)\n\n    def test_long(self):\n        cmd = 'bar --b=b foo'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 9, '-b <arg> desc', '--b=b'),\n            (10, 13, None, 'foo')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_no_dash(self):\n        cmd = 'baz ab -x'\n        matchedresult = [\n            (0, 3, 'baz synopsis', 'baz'),\n            (4, 5, '-a desc', 'a'),\n            (5, 6, '-b <arg> desc', 'b'),\n            (7, 9, None, '-x')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('baz')[0], matchedresult)\n\n    def test_multicommand(self):\n        cmd = 'bar baz --b foo'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 7, None, 'baz'),\n            (8, 15, '-b <arg> desc', '--b foo')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n        cmd = 'bar foo --b foo'\n        matchedresult = [\n            (0, 7, 'bar foo synopsis', 'bar foo'),\n            (8, 15, '-b <arg> desc', '--b foo')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar foo')[0], matchedresult)\n\n    def test_multiple_matches(self):\n        cmd = 'dup -ab'\n        matchedresult = [\n            (0, 3, 'dup1 synopsis', 'dup'),\n            (4, 6, '-a desc', '-a'),\n            (6, 7, '-b <arg> desc', 'b')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(groups[1].results, matchedresult)\n        self.assertEquals(groups[1].suggestions[0].source, 'dup.2.gz')\n\n    def test_arguments(self):\n        cmd = 'withargs -x -b freearg freearg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            \n            (9, 11, None, '-x'),\n            (12, 22, '-b <arg> desc', '-b freearg'),\n            (23, 30, 'FILE argument', 'freearg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n    def test_arg_is_dash(self):\n        cmd = 'bar -b - -a -'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 8, '-b <arg> desc', '-b -'),\n            (9, 11, '-a desc', '-a'),\n            (12, 13, None, '-')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_nested_command(self):\n        cmd = 'withargs -b arg bar -a unknown'\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg')],\n                         [(16, 19, 'bar synopsis', 'bar'),\n                          (20, 22, '-a desc', '-a'),\n                          (23, 30, None, 'unknown')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n    def test_nested_option(self):\n        cmd = 'withargs -b arg -exec bar -a EOF -b arg'\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg'),\n                          (16, 21, '-exec nest', '-exec'),\n                          (29, 32, '-exec nest', 'EOF'),\n                          (33, 39, '-b <arg> desc', '-b arg')],\n                         [(22, 25, 'bar synopsis', 'bar'),\n                          (26, 28, '-a desc', '-a')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n        cmd = \"withargs -b arg -exec bar -a ';' -a\"\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg'),\n                          (16, 21, '-exec nest', '-exec'),\n                          (29, 32, '-exec nest', \"';'\"),\n                          (33, 35, '-a desc', '-a')],\n                         [(22, 25, 'bar synopsis', 'bar'),\n                          (26, 28, '-a desc', '-a')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n        cmd = \"withargs -b arg -exec bar -a \\\\; -a\"\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg'),\n                          (16, 21, '-exec nest', '-exec'),\n                          (29, 31, '-exec nest', \"\\\\;\"),\n                          (32, 34, '-a desc', '-a')],\n                         [(22, 25, 'bar synopsis', 'bar'),\n                          (26, 28, '-a desc', '-a')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n        cmd = 'withargs -exec bar -a -u'\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 14, '-exec nest', '-exec')],\n                         [(15, 18, 'bar synopsis', 'bar'),\n                          (19, 21, '-a desc', '-a'),\n                          (22, 24, None, '-u')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n    def test_multiple_nests(self):\n        cmd = 'withargs withargs -b arg bar'\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs')],\n                         [(9, 17, 'withargs synopsis', 'withargs'),\n                          (18, 24, '-b <arg> desc', '-b arg')],\n                         [(25, 28, 'bar synopsis', 'bar')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 4)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n        self.assertEquals(groups[3].results, matchedresult[2])\n\n    def test_nested_command_is_unknown(self):\n        cmd = 'withargs -b arg unknown'\n\n        matchedresult = [(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg'),\n                          (16, 23, 'FILE argument', 'unknown')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult)\n\n    def test_unparsed(self):\n        cmd = '(bar; bar) c'\n        self.assertRaises(bashlex.errors.ParsingError,\n                          matcher.matcher(cmd, s).match)\n\n\n    def test_known_and_unknown_program(self):\n        cmd = 'bar; foo arg >f; baz'\n        matchedresult = [[(3, 4, helpconstants.OPERATORS[';'], ';'),\n                          (13, 15, helpconstants.REDIRECTION + '\\n\\n' +\n                                   helpconstants.REDIRECTION_KIND['>'], '>f'),\n                          (15, 16, helpconstants.OPERATORS[';'], ';')],\n                         [(0, 3, 'bar synopsis', 'bar')],\n                         [(5, 12, None, 'foo arg')],\n                         [(17, 20, 'baz synopsis', 'baz')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(groups[0].results, matchedresult[0])\n        self.assertEquals(groups[1].results, matchedresult[1])\n        self.assertEquals(groups[2].results, matchedresult[2])\n\n    def test_pipe(self):\n        cmd = 'bar | baz'\n        matchedresult = [[(4, 5, helpconstants.PIPELINES, '|')],\n                         [(0, 3, 'bar synopsis', 'bar')],\n                         [(6, 9, 'baz synopsis', 'baz')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(groups[0].results, matchedresult[0])\n        self.assertEquals(groups[1].results, matchedresult[1])\n\n    def test_subshells(self):\n        cmd = '((bar); bar)'\n        matchedresult = [[(0, 2, helpconstants._subshell, '(('),\n                          (5, 6, helpconstants._subshell, ')'),\n                          (6, 7, helpconstants.OPERATORS[';'], ';'),\n                          (11, 12, helpconstants._subshell, ')')],\n                         [(2, 5, 'bar synopsis', 'bar')],\n                         [(8, 11, 'bar synopsis', 'bar')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(groups[0].results, matchedresult[0])\n        self.assertEquals(groups[1].results, matchedresult[1])\n        self.assertEquals(groups[2].results, matchedresult[2])\n\n    def test_redirect_first_word_of_command(self):\n        cmd = '2>&1'\n        matchedresult = [(0, 4, helpconstants.REDIRECTION + '\\n\\n' +\n                                helpconstants.REDIRECTION_KIND['>'], '2>&1')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 1)\n        self.assertEquals(groups[0].results, matchedresult)\n\n        cmd = '2>&1 bar'\n        matchedresult = [[(0, 4, helpconstants.REDIRECTION + '\\n\\n' +\n                                 helpconstants.REDIRECTION_KIND['>'], '2>&1')],\n                         [(5, 8, 'bar synopsis', 'bar')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, matchedresult[0])\n        self.assertEquals(groups[1].results, matchedresult[1])\n\n    def test_comsub(self):\n        cmd = 'bar $(a) -b \"b $(c) `c`\" \\'$(d)\\' >$(e) `f`'\n\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'),\n                         (4, 8, None, '$(a)'),\n                         (9, 24, '-b <arg> desc', '-b \"b $(c) `c`\"'),\n                         (25, 31, None, \"'$(d)'\"),\n                         (38, 41, None, '`f`')]\n        shellresult = [(32, 37, helpconstants.REDIRECTION + '\\n\\n' +\n                                helpconstants.REDIRECTION_KIND['>'], '>$(e)')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(groups[0].results, shellresult)\n        self.assertEquals(groups[1].results, matchedresult)\n\n        \n        self.assertEquals(m.expansions, [(6, 7, 'substitution'),\n                                         (17, 18, 'substitution'),\n                                         (21, 22, 'substitution'),\n                                         (35, 36, 'substitution'),\n                                         (39, 40, 'substitution')])\n\n    def test_comsub_as_arg(self):\n        cmd = 'withargs $(a) $0'\n\n        matchedresult = [(0, 8, 'withargs synopsis', 'withargs'),\n                         (9, 16, 'FILE argument', '$(a) $0')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult)\n\n        \n        self.assertEquals(m.expansions, [(11, 12, 'substitution'),\n                                         (14, 16, 'parameter-digits')])\n\n    def test_comsub_as_first_word(self):\n        cmd = '$(a) b'\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, [(0, 6, None, '$(a) b')])\n\n        \n        self.assertEquals(m.expansions, [(2, 3, 'substitution')])\n\n    def test_procsub(self):\n        cmd = 'withargs -b <(a) >(b)'\n\n        matchedresult = [(0, 8, 'withargs synopsis', 'withargs'),\n                         (9, 16, '-b <arg> desc', '-b <(a)'),\n                         (17, 21, 'FILE argument', '>(b)')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult)\n\n        \n        self.assertEquals(m.expansions, [(14, 15, 'substitution'),\n                                         (19, 20, 'substitution')])\n\n    def test_if(self):\n        cmd = 'if bar -a; then b; fi'\n        shellresults = [(0, 2, helpconstants._if, 'if'),\n                        (9, 15, helpconstants._if, '; then'),\n                        (17, 21, helpconstants._if, '; fi')]\n\n        matchresults = [[(3, 6, 'bar synopsis', 'bar'), (7, 9, '-a desc', '-a')],\n                        [(16, 17, None, 'b')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults[0])\n        self.assertEquals(groups[2].results, matchresults[1])\n\n    def test_nested_controlflows(self):\n        cmd = 'for a; do while bar; do baz; done; done'\n        shellresults = [(0, 9, helpconstants._for, 'for a; do'),\n                        (10, 15, helpconstants._whileuntil, 'while'),\n                        (19, 23, helpconstants._whileuntil, '; do'),\n                        (27, 33, helpconstants._whileuntil, '; done'),\n                        (33, 39, helpconstants._for, '; done')]\n\n        matchresults = [[(16, 19, 'bar synopsis', 'bar')],\n                        [(24, 27, 'baz synopsis', 'baz')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults[0])\n        self.assertEquals(groups[2].results, matchresults[1])\n\n    def test_for_expansion(self):\n        cmd = 'for a in $(bar); do baz; done'\n        shellresults = [(0, 19, helpconstants._for, 'for a in $(bar); do'),\n                        (23, 29, helpconstants._for, '; done')]\n\n        matchresults = [(20, 23, 'baz synopsis', 'baz')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n        self.assertEquals(m.expansions, [(11, 14, 'substitution')])\n\n\n    def test_assignment_with_expansion(self):\n        cmd = 'a=\"$1\" bar'\n\n        shellresults = [(0, 6, helpconstants.ASSIGNMENT, 'a=\"$1\"')]\n        matchresults = [[(7, 10, 'bar synopsis', 'bar')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults[0])\n\n    def test_assignment_as_first_word(self):\n        cmd = 'a=b bar'\n\n        shellresults = [(0, 3, helpconstants.ASSIGNMENT, 'a=b')]\n        matchresults = [(4, 7, 'bar synopsis', 'bar')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n    def test_expansion_limit(self):\n        cmd = 'a $(b $(c))'\n        m = matcher.matcher(cmd, s)\n        m.match()\n\n        class depthchecker(bashlex.ast.nodevisitor):\n            def __init__(self):\n                self.depth = 0\n                self.maxdepth = 0\n            def visitnode(self, node):\n                if 'substitution' in node.kind:\n                    self.depth += 1\n                    self.maxdepth = max(self.maxdepth, self.depth)\n            def visitendnode(self, node):\n                if 'substitution' in node.kind:\n                    self.depth -= 1\n\n        v = depthchecker()\n        v.visit(m.ast)\n        self.assertEquals(v.maxdepth, 1)\n\n    def test_functions(self):\n        cmd = 'function a() { bar; }'\n        shellresults = [(0, 14, helpconstants._function, 'function a() {'),\n                        (18, 19, helpconstants.OPSEMICOLON, ';'),\n                        (20, 21, helpconstants._function, '}'),]\n\n        matchresults = [(15, 18, 'bar synopsis', 'bar')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n        cmd = 'function a() { bar \"$(a)\"; }'\n        shellresults = [(0, 14, helpconstants._function, 'function a() {'),\n                        (25, 26, helpconstants.OPSEMICOLON, ';'),\n                        (27, 28, helpconstants._function, '}'),]\n\n        matchresults = [(15, 18, 'bar synopsis', 'bar'),\n                        (19, 25, None, '\"$(a)\"')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n        self.assertEquals(m.expansions, [(22, 23, 'substitution')])\n\n    def test_function_reference(self):\n        cmd = 'function a() { bar; a b; }; a'\n        shellresults = [(0, 14, helpconstants._function, 'function a() {'),\n                        (18, 19, helpconstants.OPSEMICOLON, ';'),\n                        (20, 21, helpconstants._functioncall % 'a', 'a'),\n                        (22, 23, helpconstants._functionarg % 'a', 'b'),\n                        (23, 24, helpconstants.OPSEMICOLON, ';'),\n                        (25, 26, helpconstants._function, '}'),\n                        (26, 27, helpconstants.OPSEMICOLON, ';'),\n                        (28, 29, helpconstants._functioncall % 'a', 'a'),]\n\n        matchresults = [(15, 18, 'bar synopsis', 'bar')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n        self.assertEquals(m.functions, set(['a']))\n\n    def test_comment(self):\n        cmd = 'bar \n\n        shellresults = [(4, 15, helpconstants.COMMENT, ')]\n        matchresults = [(0, 3, 'bar synopsis', 'bar')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n        cmd = '# just a comment'\n\n        shellresults = [(0, 16, helpconstants.COMMENT, '# just a comment')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 1)\n        self.assertEquals(groups[0].results, shellresults)\n\n    def test_heredoc_at_eof(self):\n        cmd = 'bar <<EOF'\n\n        shellresults = [(4, 9, helpconstants.REDIRECTION + '\\n\\n' +\n                               helpconstants.REDIRECTION_KIND['<<'], '<<EOF')]\n\n        matchresults = [(0, 3, 'bar synopsis', 'bar')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n    def test_no_synopsis(self):\n        cmd = 'nosynopsis a'\n\n        matchresults = [(0, 10, helpconstants.NOSYNOPSIS, 'nosynopsis'),\n                        (11, 12, None, 'a')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchresults)\n", "comments": "   first option expects arg arg actually option            cmd    bar  b           matchedresult                 (0  3   bar synopsis    bar )              (4  6    b  arg  desc     b )              (7  9    desc     )           self assertmatchsingle(cmd  findmanpage( bar ) 0   matchedresult)      def test arg expected value clash(self)             first option expects arg arg option even though         looks like one       reset implicitly looking  12     merges    tokens look like options still unknown    check expansions    check expansions    check expansions    check expansions    comment  ", "content": "import unittest\n\nimport bashlex.errors, bashlex.ast\n\nfrom explainshell import matcher, errors, helpconstants\nfrom tests import helpers\n\ns = helpers.mockstore()\n\nclass test_matcher(unittest.TestCase):\n    def assertMatchSingle(self, what, expectedmanpage, expectedresults):\n        m = matcher.matcher(what, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[1].manpage, expectedmanpage)\n        self.assertEquals(groups[1].results, expectedresults)\n\n    def test_unknown_prog(self):\n        self.assertRaises(errors.ProgramDoesNotExist, matcher.matcher('foo', s).match)\n\n    def test_unicode(self):\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 13, '-b <arg> desc', '-b uni???')]\n\n        self.assertMatchSingle(u'bar -b uni\\u05e7\\u05d5\\u05d3', s.findmanpage('bar')[0], matchedresult)\n\n    def test_no_options(self):\n        matchedresult = [(0, 3, 'bar synopsis', 'bar')]\n        self.assertMatchSingle('bar', s.findmanpage('bar')[0], matchedresult)\n\n    def test_known_arg(self):\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 10, '-a desc', '-a --a'),\n            (11, 13, '-? help text', '-?')]\n\n        self.assertMatchSingle('bar -a --a -?', s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_in_fuzzy_with_expected_value(self):\n        cmd = 'baz -ab arg'\n        matchedresult = [\n            (0, 3, 'baz synopsis', 'baz'),\n            (4, 6, '-a desc', '-a'),\n            (6, 11, '-b <arg> desc', 'b arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('baz')[0], matchedresult)\n\n        cmd = 'baz -ab12'\n        matchedresult = [\n            (0, 3, 'baz synopsis', 'baz'),\n            (4, 6, '-a desc', '-a'),\n            (6, 9, '-b <arg> desc', 'b12')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('baz')[0], matchedresult)\n\n    def test_partialmatch_with_arguments(self):\n        cmd = 'withargs arg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            (9, 12, 'FILE argument', 'arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n    def test_reset_current_option_if_argument_taken(self):\n        cmd = 'withargs -ab12 arg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            (9, 11, '-a desc', '-a'),\n            (11, 14, '-b <arg> desc', 'b12'),\n            (15, 18, 'FILE argument', 'arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n        cmd = 'withargs -b12 arg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            (9, 13, '-b <arg> desc', '-b12'),\n            (14, 17, 'FILE argument', 'arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n        # here we reset it implicitly by looking up '12'\n        cmd = 'withargs -b 12 arg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            (9, 14, '-b <arg> desc', '-b 12'),\n            (15, 18, 'FILE argument', 'arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n    def test_arg_with_expected_value(self):\n        cmd = 'bar -b arg --b arg'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 18, '-b <arg> desc', '-b arg --b arg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_with_expected_value_from_list(self):\n        cmd = 'bar -c one'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 10, '-c=one,two\\ndesc', '-c one')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n        cmd = 'bar -c notinlist'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 6, '-c=one,two\\ndesc', '-c'),\n            (7, 16, None, 'notinlist')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_with_expected_value_clash(self):\n        '''the first option expects an arg but the arg is actually an option'''\n        cmd = 'bar -b -a'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 6, '-b <arg> desc', '-b'),\n            (7, 9, '-a desc', '-a')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_with_expected_value_no_clash(self):\n        '''the first option expects an arg but the arg is not an option even though\n        it looks like one'''\n        cmd = 'bar -b -xa'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 6, '-b <arg> desc', '-b'),\n            (7, 9, None, '-x'),\n            (9, 10, '-a desc', 'a')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_unknown_arg(self):\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 6, None, '-x')]\n        self.assertMatchSingle('bar -x', s.findmanpage('bar')[0], matchedresult)\n\n        # merges\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 10, None, '-x --x')]\n        self.assertMatchSingle('bar -x --x', s.findmanpage('bar')[0], matchedresult)\n\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 8, None, '-xyz')]\n        self.assertMatchSingle('bar -xyz', s.findmanpage('bar')[0], matchedresult)\n\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'),\n                                 (4, 6, None, '-x'),\n                                 (6, 7, '-a desc', 'a'), (7, 8, None, 'z')]\n\n        self.assertMatchSingle('bar -xaz', s.findmanpage('bar')[0], matchedresult)\n\n    def test_merge_same_match(self):\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 8, '-a desc', '-aaa')]\n        self.assertMatchSingle('bar -aaa', s.findmanpage('bar')[0], matchedresult)\n\n    def test_known_and_unknown_arg(self):\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 6, '-a desc', '-a'), (7, 9, None, '-x')]\n        self.assertMatchSingle('bar -a -x', s.findmanpage('bar')[0], matchedresult)\n\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'), (4, 6, '-a desc', '-a'), (6, 7, None, 'x')]\n        self.assertMatchSingle('bar -ax', s.findmanpage('bar')[0], matchedresult)\n\n    def test_long(self):\n        cmd = 'bar --b=b foo'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 9, '-b <arg> desc', '--b=b'),\n            (10, 13, None, 'foo')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_arg_no_dash(self):\n        cmd = 'baz ab -x'\n        matchedresult = [\n            (0, 3, 'baz synopsis', 'baz'),\n            (4, 5, '-a desc', 'a'),\n            (5, 6, '-b <arg> desc', 'b'),\n            (7, 9, None, '-x')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('baz')[0], matchedresult)\n\n    def test_multicommand(self):\n        cmd = 'bar baz --b foo'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 7, None, 'baz'),\n            (8, 15, '-b <arg> desc', '--b foo')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n        cmd = 'bar foo --b foo'\n        matchedresult = [\n            (0, 7, 'bar foo synopsis', 'bar foo'),\n            (8, 15, '-b <arg> desc', '--b foo')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar foo')[0], matchedresult)\n\n    def test_multiple_matches(self):\n        cmd = 'dup -ab'\n        matchedresult = [\n            (0, 3, 'dup1 synopsis', 'dup'),\n            (4, 6, '-a desc', '-a'),\n            (6, 7, '-b <arg> desc', 'b')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(groups[1].results, matchedresult)\n        self.assertEquals(groups[1].suggestions[0].source, 'dup.2.gz')\n\n    def test_arguments(self):\n        cmd = 'withargs -x -b freearg freearg'\n        matchedresult = [\n            (0, 8, 'withargs synopsis', 'withargs'),\n            # tokens that look like options are still unknown\n            (9, 11, None, '-x'),\n            (12, 22, '-b <arg> desc', '-b freearg'),\n            (23, 30, 'FILE argument', 'freearg')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('withargs')[0], matchedresult)\n\n    def test_arg_is_dash(self):\n        cmd = 'bar -b - -a -'\n        matchedresult = [\n            (0, 3, 'bar synopsis', 'bar'),\n            (4, 8, '-b <arg> desc', '-b -'),\n            (9, 11, '-a desc', '-a'),\n            (12, 13, None, '-')]\n\n        self.assertMatchSingle(cmd, s.findmanpage('bar')[0], matchedresult)\n\n    def test_nested_command(self):\n        cmd = 'withargs -b arg bar -a unknown'\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg')],\n                         [(16, 19, 'bar synopsis', 'bar'),\n                          (20, 22, '-a desc', '-a'),\n                          (23, 30, None, 'unknown')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n    def test_nested_option(self):\n        cmd = 'withargs -b arg -exec bar -a EOF -b arg'\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg'),\n                          (16, 21, '-exec nest', '-exec'),\n                          (29, 32, '-exec nest', 'EOF'),\n                          (33, 39, '-b <arg> desc', '-b arg')],\n                         [(22, 25, 'bar synopsis', 'bar'),\n                          (26, 28, '-a desc', '-a')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n        cmd = \"withargs -b arg -exec bar -a ';' -a\"\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg'),\n                          (16, 21, '-exec nest', '-exec'),\n                          (29, 32, '-exec nest', \"';'\"),\n                          (33, 35, '-a desc', '-a')],\n                         [(22, 25, 'bar synopsis', 'bar'),\n                          (26, 28, '-a desc', '-a')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n        cmd = \"withargs -b arg -exec bar -a \\\\; -a\"\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg'),\n                          (16, 21, '-exec nest', '-exec'),\n                          (29, 31, '-exec nest', \"\\\\;\"),\n                          (32, 34, '-a desc', '-a')],\n                         [(22, 25, 'bar synopsis', 'bar'),\n                          (26, 28, '-a desc', '-a')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n        cmd = 'withargs -exec bar -a -u'\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 14, '-exec nest', '-exec')],\n                         [(15, 18, 'bar synopsis', 'bar'),\n                          (19, 21, '-a desc', '-a'),\n                          (22, 24, None, '-u')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n\n    def test_multiple_nests(self):\n        cmd = 'withargs withargs -b arg bar'\n\n        matchedresult = [[(0, 8, 'withargs synopsis', 'withargs')],\n                         [(9, 17, 'withargs synopsis', 'withargs'),\n                          (18, 24, '-b <arg> desc', '-b arg')],\n                         [(25, 28, 'bar synopsis', 'bar')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 4)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult[0])\n        self.assertEquals(groups[2].results, matchedresult[1])\n        self.assertEquals(groups[3].results, matchedresult[2])\n\n    def test_nested_command_is_unknown(self):\n        cmd = 'withargs -b arg unknown'\n\n        matchedresult = [(0, 8, 'withargs synopsis', 'withargs'),\n                          (9, 15, '-b <arg> desc', '-b arg'),\n                          (16, 23, 'FILE argument', 'unknown')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult)\n\n    def test_unparsed(self):\n        cmd = '(bar; bar) c'\n        self.assertRaises(bashlex.errors.ParsingError,\n                          matcher.matcher(cmd, s).match)\n\n\n    def test_known_and_unknown_program(self):\n        cmd = 'bar; foo arg >f; baz'\n        matchedresult = [[(3, 4, helpconstants.OPERATORS[';'], ';'),\n                          (13, 15, helpconstants.REDIRECTION + '\\n\\n' +\n                                   helpconstants.REDIRECTION_KIND['>'], '>f'),\n                          (15, 16, helpconstants.OPERATORS[';'], ';')],\n                         [(0, 3, 'bar synopsis', 'bar')],\n                         [(5, 12, None, 'foo arg')],\n                         [(17, 20, 'baz synopsis', 'baz')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(groups[0].results, matchedresult[0])\n        self.assertEquals(groups[1].results, matchedresult[1])\n        self.assertEquals(groups[2].results, matchedresult[2])\n\n    def test_pipe(self):\n        cmd = 'bar | baz'\n        matchedresult = [[(4, 5, helpconstants.PIPELINES, '|')],\n                         [(0, 3, 'bar synopsis', 'bar')],\n                         [(6, 9, 'baz synopsis', 'baz')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(groups[0].results, matchedresult[0])\n        self.assertEquals(groups[1].results, matchedresult[1])\n\n    def test_subshells(self):\n        cmd = '((bar); bar)'\n        matchedresult = [[(0, 2, helpconstants._subshell, '(('),\n                          (5, 6, helpconstants._subshell, ')'),\n                          (6, 7, helpconstants.OPERATORS[';'], ';'),\n                          (11, 12, helpconstants._subshell, ')')],\n                         [(2, 5, 'bar synopsis', 'bar')],\n                         [(8, 11, 'bar synopsis', 'bar')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(groups[0].results, matchedresult[0])\n        self.assertEquals(groups[1].results, matchedresult[1])\n        self.assertEquals(groups[2].results, matchedresult[2])\n\n    def test_redirect_first_word_of_command(self):\n        cmd = '2>&1'\n        matchedresult = [(0, 4, helpconstants.REDIRECTION + '\\n\\n' +\n                                helpconstants.REDIRECTION_KIND['>'], '2>&1')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 1)\n        self.assertEquals(groups[0].results, matchedresult)\n\n        cmd = '2>&1 bar'\n        matchedresult = [[(0, 4, helpconstants.REDIRECTION + '\\n\\n' +\n                                 helpconstants.REDIRECTION_KIND['>'], '2>&1')],\n                         [(5, 8, 'bar synopsis', 'bar')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, matchedresult[0])\n        self.assertEquals(groups[1].results, matchedresult[1])\n\n    def test_comsub(self):\n        cmd = 'bar $(a) -b \"b $(c) `c`\" \\'$(d)\\' >$(e) `f`'\n\n        matchedresult = [(0, 3, 'bar synopsis', 'bar'),\n                         (4, 8, None, '$(a)'),\n                         (9, 24, '-b <arg> desc', '-b \"b $(c) `c`\"'),\n                         (25, 31, None, \"'$(d)'\"),\n                         (38, 41, None, '`f`')]\n        shellresult = [(32, 37, helpconstants.REDIRECTION + '\\n\\n' +\n                                helpconstants.REDIRECTION_KIND['>'], '>$(e)')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(groups[0].results, shellresult)\n        self.assertEquals(groups[1].results, matchedresult)\n\n        # check expansions\n        self.assertEquals(m.expansions, [(6, 7, 'substitution'),\n                                         (17, 18, 'substitution'),\n                                         (21, 22, 'substitution'),\n                                         (35, 36, 'substitution'),\n                                         (39, 40, 'substitution')])\n\n    def test_comsub_as_arg(self):\n        cmd = 'withargs $(a) $0'\n\n        matchedresult = [(0, 8, 'withargs synopsis', 'withargs'),\n                         (9, 16, 'FILE argument', '$(a) $0')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult)\n\n        # check expansions\n        self.assertEquals(m.expansions, [(11, 12, 'substitution'),\n                                         (14, 16, 'parameter-digits')])\n\n    def test_comsub_as_first_word(self):\n        cmd = '$(a) b'\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, [(0, 6, None, '$(a) b')])\n\n        # check expansions\n        self.assertEquals(m.expansions, [(2, 3, 'substitution')])\n\n    def test_procsub(self):\n        cmd = 'withargs -b <(a) >(b)'\n\n        matchedresult = [(0, 8, 'withargs synopsis', 'withargs'),\n                         (9, 16, '-b <arg> desc', '-b <(a)'),\n                         (17, 21, 'FILE argument', '>(b)')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchedresult)\n\n        # check expansions\n        self.assertEquals(m.expansions, [(14, 15, 'substitution'),\n                                         (19, 20, 'substitution')])\n\n    def test_if(self):\n        cmd = 'if bar -a; then b; fi'\n        shellresults = [(0, 2, helpconstants._if, 'if'),\n                        (9, 15, helpconstants._if, '; then'),\n                        (17, 21, helpconstants._if, '; fi')]\n\n        matchresults = [[(3, 6, 'bar synopsis', 'bar'), (7, 9, '-a desc', '-a')],\n                        [(16, 17, None, 'b')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults[0])\n        self.assertEquals(groups[2].results, matchresults[1])\n\n    def test_nested_controlflows(self):\n        cmd = 'for a; do while bar; do baz; done; done'\n        shellresults = [(0, 9, helpconstants._for, 'for a; do'),\n                        (10, 15, helpconstants._whileuntil, 'while'),\n                        (19, 23, helpconstants._whileuntil, '; do'),\n                        (27, 33, helpconstants._whileuntil, '; done'),\n                        (33, 39, helpconstants._for, '; done')]\n\n        matchresults = [[(16, 19, 'bar synopsis', 'bar')],\n                        [(24, 27, 'baz synopsis', 'baz')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 3)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults[0])\n        self.assertEquals(groups[2].results, matchresults[1])\n\n    def test_for_expansion(self):\n        cmd = 'for a in $(bar); do baz; done'\n        shellresults = [(0, 19, helpconstants._for, 'for a in $(bar); do'),\n                        (23, 29, helpconstants._for, '; done')]\n\n        matchresults = [(20, 23, 'baz synopsis', 'baz')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n        self.assertEquals(m.expansions, [(11, 14, 'substitution')])\n\n\n    def test_assignment_with_expansion(self):\n        cmd = 'a=\"$1\" bar'\n\n        shellresults = [(0, 6, helpconstants.ASSIGNMENT, 'a=\"$1\"')]\n        matchresults = [[(7, 10, 'bar synopsis', 'bar')]]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults[0])\n\n    def test_assignment_as_first_word(self):\n        cmd = 'a=b bar'\n\n        shellresults = [(0, 3, helpconstants.ASSIGNMENT, 'a=b')]\n        matchresults = [(4, 7, 'bar synopsis', 'bar')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n    def test_expansion_limit(self):\n        cmd = 'a $(b $(c))'\n        m = matcher.matcher(cmd, s)\n        m.match()\n\n        class depthchecker(bashlex.ast.nodevisitor):\n            def __init__(self):\n                self.depth = 0\n                self.maxdepth = 0\n            def visitnode(self, node):\n                if 'substitution' in node.kind:\n                    self.depth += 1\n                    self.maxdepth = max(self.maxdepth, self.depth)\n            def visitendnode(self, node):\n                if 'substitution' in node.kind:\n                    self.depth -= 1\n\n        v = depthchecker()\n        v.visit(m.ast)\n        self.assertEquals(v.maxdepth, 1)\n\n    def test_functions(self):\n        cmd = 'function a() { bar; }'\n        shellresults = [(0, 14, helpconstants._function, 'function a() {'),\n                        (18, 19, helpconstants.OPSEMICOLON, ';'),\n                        (20, 21, helpconstants._function, '}'),]\n\n        matchresults = [(15, 18, 'bar synopsis', 'bar')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n        cmd = 'function a() { bar \"$(a)\"; }'\n        shellresults = [(0, 14, helpconstants._function, 'function a() {'),\n                        (25, 26, helpconstants.OPSEMICOLON, ';'),\n                        (27, 28, helpconstants._function, '}'),]\n\n        matchresults = [(15, 18, 'bar synopsis', 'bar'),\n                        (19, 25, None, '\"$(a)\"')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n        self.assertEquals(m.expansions, [(22, 23, 'substitution')])\n\n    def test_function_reference(self):\n        cmd = 'function a() { bar; a b; }; a'\n        shellresults = [(0, 14, helpconstants._function, 'function a() {'),\n                        (18, 19, helpconstants.OPSEMICOLON, ';'),\n                        (20, 21, helpconstants._functioncall % 'a', 'a'),\n                        (22, 23, helpconstants._functionarg % 'a', 'b'),\n                        (23, 24, helpconstants.OPSEMICOLON, ';'),\n                        (25, 26, helpconstants._function, '}'),\n                        (26, 27, helpconstants.OPSEMICOLON, ';'),\n                        (28, 29, helpconstants._functioncall % 'a', 'a'),]\n\n        matchresults = [(15, 18, 'bar synopsis', 'bar')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n        self.assertEquals(m.functions, set(['a']))\n\n    def test_comment(self):\n        cmd = 'bar # a comment'\n\n        shellresults = [(4, 15, helpconstants.COMMENT, '# a comment')]\n        matchresults = [(0, 3, 'bar synopsis', 'bar')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n        cmd = '# just a comment'\n\n        shellresults = [(0, 16, helpconstants.COMMENT, '# just a comment')]\n\n        m = matcher.matcher(cmd, s)\n        groups = m.match()\n        self.assertEquals(len(groups), 1)\n        self.assertEquals(groups[0].results, shellresults)\n\n    def test_heredoc_at_eof(self):\n        cmd = 'bar <<EOF'\n\n        shellresults = [(4, 9, helpconstants.REDIRECTION + '\\n\\n' +\n                               helpconstants.REDIRECTION_KIND['<<'], '<<EOF')]\n\n        matchresults = [(0, 3, 'bar synopsis', 'bar')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, shellresults)\n        self.assertEquals(groups[1].results, matchresults)\n\n    def test_no_synopsis(self):\n        cmd = 'nosynopsis a'\n\n        matchresults = [(0, 10, helpconstants.NOSYNOPSIS, 'nosynopsis'),\n                        (11, 12, None, 'a')]\n\n        groups = matcher.matcher(cmd, s).match()\n        self.assertEquals(len(groups), 2)\n        self.assertEquals(groups[0].results, [])\n        self.assertEquals(groups[1].results, matchresults)\n", "description": "match command-line arguments to their help text", "file_name": "test-matcher.py", "id": "7d6a4c57f18fab818748d7314a74fbf6", "language": "Python", "project_name": "explainshell", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/idank-explainshell/idank-explainshell-697e1d1/tests/test-matcher.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:42:42Z", "url": "https://github.com/idank/explainshell", "wiki": true}