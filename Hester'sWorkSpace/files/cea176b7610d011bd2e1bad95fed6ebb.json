{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass ChaturbateIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[^/]+\\.)?chaturbate\\.com/(?P<id>[^/?\n    _TESTS = [{\n        'url': 'https://www.chaturbate.com/siswet19/',\n        'info_dict': {\n            'id': 'siswet19',\n            'ext': 'mp4',\n            'title': 're:^siswet19 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'age_limit': 18,\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Room is offline',\n    }, {\n        'url': 'https://en.chaturbate.com/siswet19/',\n        'only_matching': True,\n    }]\n\n    _ROOM_OFFLINE = 'Room is currently offline'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        m3u8_urls = []\n\n        for m in re.finditer(\n                r'([\"\\'])(?P<url>http.+?\\.m3u8.*?)\\1', webpage):\n            m3u8_fast_url, m3u8_no_fast_url = m.group('url'), m.group(\n                'url').replace('_fast', '')\n            for m3u8_url in (m3u8_fast_url, m3u8_no_fast_url):\n                if m3u8_url not in m3u8_urls:\n                    m3u8_urls.append(m3u8_url)\n\n        if not m3u8_urls:\n            error = self._search_regex(\n                [r'<span[^>]+class=([\"\\'])desc_span\\1[^>]*>(?P<error>[^<]+)</span>',\n                 r'<div[^>]+id=([\"\\'])defchat\\1[^>]*>\\s*<p><strong>(?P<error>[^<]+)<'],\n                webpage, 'error', group='error', default=None)\n            if not error:\n                if any(p in webpage for p in (\n                        self._ROOM_OFFLINE, 'offline_tipping', 'tip_offline')):\n                    error = self._ROOM_OFFLINE\n            if error:\n                raise ExtractorError(error, expected=True)\n            raise ExtractorError('Unable to find stream URL')\n\n        formats = []\n        for m3u8_url in m3u8_urls:\n            m3u8_id = 'fast' if '_fast' in m3u8_url else 'slow'\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, ext='mp4',\n                \n                preference=-10 if m3u8_id == 'fast' else None,\n                m3u8_id=m3u8_id, fatal=False, live=True))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._live_title(video_id),\n            'thumbnail': 'https://roomimg.stream.highwebmedia.com/ri/%s.jpg' % video_id,\n            'age_limit': self._rta_search(webpage),\n            'is_live': True,\n            'formats': formats,\n        }\n", "comments": "#]+)'\n# ffmpeg skips segments for fast m3u8\n", "content": "from __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import ExtractorError\n\n\nclass ChaturbateIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:[^/]+\\.)?chaturbate\\.com/(?P<id>[^/?#]+)'\n    _TESTS = [{\n        'url': 'https://www.chaturbate.com/siswet19/',\n        'info_dict': {\n            'id': 'siswet19',\n            'ext': 'mp4',\n            'title': 're:^siswet19 [0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}$',\n            'age_limit': 18,\n            'is_live': True,\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Room is offline',\n    }, {\n        'url': 'https://en.chaturbate.com/siswet19/',\n        'only_matching': True,\n    }]\n\n    _ROOM_OFFLINE = 'Room is currently offline'\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        m3u8_urls = []\n\n        for m in re.finditer(\n                r'([\"\\'])(?P<url>http.+?\\.m3u8.*?)\\1', webpage):\n            m3u8_fast_url, m3u8_no_fast_url = m.group('url'), m.group(\n                'url').replace('_fast', '')\n            for m3u8_url in (m3u8_fast_url, m3u8_no_fast_url):\n                if m3u8_url not in m3u8_urls:\n                    m3u8_urls.append(m3u8_url)\n\n        if not m3u8_urls:\n            error = self._search_regex(\n                [r'<span[^>]+class=([\"\\'])desc_span\\1[^>]*>(?P<error>[^<]+)</span>',\n                 r'<div[^>]+id=([\"\\'])defchat\\1[^>]*>\\s*<p><strong>(?P<error>[^<]+)<'],\n                webpage, 'error', group='error', default=None)\n            if not error:\n                if any(p in webpage for p in (\n                        self._ROOM_OFFLINE, 'offline_tipping', 'tip_offline')):\n                    error = self._ROOM_OFFLINE\n            if error:\n                raise ExtractorError(error, expected=True)\n            raise ExtractorError('Unable to find stream URL')\n\n        formats = []\n        for m3u8_url in m3u8_urls:\n            m3u8_id = 'fast' if '_fast' in m3u8_url else 'slow'\n            formats.extend(self._extract_m3u8_formats(\n                m3u8_url, video_id, ext='mp4',\n                # ffmpeg skips segments for fast m3u8\n                preference=-10 if m3u8_id == 'fast' else None,\n                m3u8_id=m3u8_id, fatal=False, live=True))\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._live_title(video_id),\n            'thumbnail': 'https://roomimg.stream.highwebmedia.com/ri/%s.jpg' % video_id,\n            'age_limit': self._rta_search(webpage),\n            'is_live': True,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "chaturbate.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/chaturbate.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}