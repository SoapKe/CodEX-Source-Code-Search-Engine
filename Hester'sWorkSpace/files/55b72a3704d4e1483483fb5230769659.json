{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\nimport codecs\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_strdate\n\n\nclass GooglePlusIE(InfoExtractor):\n    IE_DESC = 'Google Plus'\n    _VALID_URL = r'https?://plus\\.google\\.com/(?:[^/]+/)*?posts/(?P<id>\\w+)'\n    IE_NAME = 'plus.google'\n    _TEST = {\n        'url': 'https://plus.google.com/u/0/108897254135232129896/posts/ZButuJc6CtH',\n        'info_dict': {\n            'id': 'ZButuJc6CtH',\n            'ext': 'flv',\n            'title': '\u5606\u304d\u306e\u5929\u4f7f \u964d\u81e8',\n            'upload_date': '20120613',\n            'uploader': '\u4e95\u4e0a\u30e8\u30b7\u30de\u30b5',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        \n        webpage = self._download_webpage(url, video_id, 'Downloading entry webpage')\n\n        title = self._og_search_description(webpage).splitlines()[0]\n        upload_date = unified_strdate(self._html_search_regex(\n            r,\n            webpage, 'upload date', fatal=False, flags=re.VERBOSE))\n        uploader = self._html_search_regex(\n            r'rel=\"author\".*?>(.*?)</a>', webpage, 'uploader', fatal=False)\n\n        \n        DOMAIN = 'https://plus.google.com/'\n        video_page = self._search_regex(\n            r'<a href=\"((?:%s)?photos/.*?)\"' % re.escape(DOMAIN),\n            webpage, 'video page URL')\n        if not video_page.startswith(DOMAIN):\n            video_page = DOMAIN + video_page\n\n        webpage = self._download_webpage(video_page, video_id, 'Downloading video page')\n\n        def unicode_escape(s):\n            decoder = codecs.getdecoder('unicode_escape')\n            return re.sub(\n                r'\\\\u[0-9a-fA-F]{4,}',\n                lambda m: decoder(m.group(0))[0],\n                s)\n\n        \n        formats = [{\n            'url': unicode_escape(video_url),\n            'ext': 'flv',\n            'width': int(width),\n            'height': int(height),\n        } for width, height, video_url in re.findall(\n            r'\\d+,(\\d+),(\\d+),\"(https?://[^.]+\\.googleusercontent\\.com.*?)\"', webpage)]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'uploader': uploader,\n            'upload_date': upload_date,\n            'formats': formats,\n        }\n", "comments": "(?x)<a.+?class=\"o-U-s\\s[^\"]+\"\\s+style=\"display:\\s*none\"\\s*>\n                    ([0-9]{4}-[0-9]{2}-[0-9]{2})</a>\n>\n# coding: utf-8\n# Step 1, Retrieve post webpage to extract further information\n# Step 2, Simulate clicking the image box to launch video\n# Extract video links all sizes\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\nimport codecs\n\nfrom .common import InfoExtractor\nfrom ..utils import unified_strdate\n\n\nclass GooglePlusIE(InfoExtractor):\n    IE_DESC = 'Google Plus'\n    _VALID_URL = r'https?://plus\\.google\\.com/(?:[^/]+/)*?posts/(?P<id>\\w+)'\n    IE_NAME = 'plus.google'\n    _TEST = {\n        'url': 'https://plus.google.com/u/0/108897254135232129896/posts/ZButuJc6CtH',\n        'info_dict': {\n            'id': 'ZButuJc6CtH',\n            'ext': 'flv',\n            'title': '\u5606\u304d\u306e\u5929\u4f7f \u964d\u81e8',\n            'upload_date': '20120613',\n            'uploader': '\u4e95\u4e0a\u30e8\u30b7\u30de\u30b5',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        # Step 1, Retrieve post webpage to extract further information\n        webpage = self._download_webpage(url, video_id, 'Downloading entry webpage')\n\n        title = self._og_search_description(webpage).splitlines()[0]\n        upload_date = unified_strdate(self._html_search_regex(\n            r'''(?x)<a.+?class=\"o-U-s\\s[^\"]+\"\\s+style=\"display:\\s*none\"\\s*>\n                    ([0-9]{4}-[0-9]{2}-[0-9]{2})</a>''',\n            webpage, 'upload date', fatal=False, flags=re.VERBOSE))\n        uploader = self._html_search_regex(\n            r'rel=\"author\".*?>(.*?)</a>', webpage, 'uploader', fatal=False)\n\n        # Step 2, Simulate clicking the image box to launch video\n        DOMAIN = 'https://plus.google.com/'\n        video_page = self._search_regex(\n            r'<a href=\"((?:%s)?photos/.*?)\"' % re.escape(DOMAIN),\n            webpage, 'video page URL')\n        if not video_page.startswith(DOMAIN):\n            video_page = DOMAIN + video_page\n\n        webpage = self._download_webpage(video_page, video_id, 'Downloading video page')\n\n        def unicode_escape(s):\n            decoder = codecs.getdecoder('unicode_escape')\n            return re.sub(\n                r'\\\\u[0-9a-fA-F]{4,}',\n                lambda m: decoder(m.group(0))[0],\n                s)\n\n        # Extract video links all sizes\n        formats = [{\n            'url': unicode_escape(video_url),\n            'ext': 'flv',\n            'width': int(width),\n            'height': int(height),\n        } for width, height, video_url in re.findall(\n            r'\\d+,(\\d+),(\\d+),\"(https?://[^.]+\\.googleusercontent\\.com.*?)\"', webpage)]\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'uploader': uploader,\n            'upload_date': upload_date,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "googleplus.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/googleplus.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}