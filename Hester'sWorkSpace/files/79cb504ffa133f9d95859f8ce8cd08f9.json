{"author": "ansible", "code": "\n -*- coding: utf-8 -*-\n\n (C) 2017 Red Hat Inc.\n Copyright (C) 2017 Lenovo.\n\n GNU General Public License v3.0+\n\n This program is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n Module to execute ENOS Commands on Lenovo Switches.\n Lenovo Networking\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: enos_command\nversion_added: \"2.5\"\nauthor: \"Anil Kumar Muraleedharan (@amuraleedhar)\"\nshort_description: Run arbitrary commands on Lenovo ENOS devices\ndescription:\n  - Sends arbitrary commands to an ENOS node and returns the results\n    read from the device. The C(enos_command) module includes an\n    argument that will cause the module to wait for a specific condition\n    before returning or timing out if the condition is not met.\nextends_documentation_fragment: enos\noptions:\n  commands:\n    description:\n      - List of commands to send to the remote device over the\n        configured provider. The resulting output from the command\n        is returned. If the I(wait_for) argument is provided, the\n        module is not returned until the condition is satisfied or\n        the number of retires as expired.\n    required: true\n  wait_for:\n    description:\n      - List of conditions to evaluate against the output of the\n        command. The task will wait for each condition to be true\n        before moving forward. If the conditional is not true\n        within the configured number of retries, the task fails.\n        See examples.\n  match:\n    description:\n      - The I(match) argument is used in conjunction with the\n        I(wait_for) argument to specify the match policy.  Valid\n        values are C(all) or C(any).  If the value is set to C(all)\n        then all conditionals in the wait_for must be satisfied.  If\n        the value is set to C(any) then only one of the values must be\n        satisfied.\n    default: all\n    choices: ['any', 'all']\n  retries:\n    description:\n      - Specifies the number of retries a command should by tried\n        before it is considered failed. The command is run on the\n        target device every retry and evaluated against the\n        I(wait_for) conditions.\n    default: 10\n  interval:\n    description:\n      - Configures the interval in seconds to wait between retries\n        of the command. If the command does not pass the specified\n        conditions, the interval indicates how long to wait before\n        trying the command again.\n    default: 1\n\"\"\"\n\nEXAMPLES = \"\"\"\n Note: examples below use the following provider dict to handle\n       transport and authentication to the node.\n---\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    port: 22\n    username: admin\n    password: admin\n    timeout: 30\n\n---\n- name: test contains operator\n  enos_command:\n    commands:\n      - show version\n      - show system memory\n    wait_for:\n      - \"result[0] contains 'Lenovo'\"\n      - \"result[1] contains 'MemFree'\"\n    provider: \"{{ cli }}\"\n  register: result\n\n- assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n\n- name: get output for single command\n  enos_command:\n    commands: ['show version']\n    provider: \"{{ cli }}\"\n  register: result\n\n- assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n\n- name: get output for multiple commands\n  enos_command:\n    commands:\n      - show version\n      - show interface information\n    provider: \"{{ cli }}\"\n  register: result\n\n- assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n      - \"result.stdout | length == 2\"\n\"\"\"\n\nRETURN = \"\"\"\nstdout:\n  description: the set of responses from the commands\n  returned: always\n  type: list\n  sample: ['...', '...']\nstdout_lines:\n  description: The value of stdout split into a list\n  returned: always\n  type: list\n  sample: [['...', '...'], ['...'], ['...']]\nfailed_conditions:\n  description: the conditionals that failed\n  returned: failed\n  type: list\n  sample: ['...', '...']\n\"\"\"\n\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.enos.enos import run_commands, check_args\nfrom ansible.module_utils.network.enos.enos import enos_argument_spec\nfrom ansible.module_utils.network.common.parsing import Conditional\nfrom ansible.module_utils.six import string_types\n\n\ndef to_lines(stdout):\n    for item in stdout:\n        if isinstance(item, string_types):\n            item = str(item).split('\\n')\n        yield item\n\n\ndef main():\n    spec = dict(\n         { command: <str>, prompt: <str>, response: <str> }\n        commands=dict(type='list', required=True),\n\n        wait_for=dict(type='list'),\n        match=dict(default='all', choices=['all', 'any']),\n\n        retries=dict(default=10, type='int'),\n        interval=dict(default=1, type='int')\n    )\n\n    spec.update(enos_argument_spec)\n\n    module = AnsibleModule(argument_spec=spec, supports_check_mode=True)\n    result = {'changed': False}\n\n    wait_for = module.params['wait_for'] or list()\n    conditionals = [Conditional(c) for c in wait_for]\n\n    commands = module.params['commands']\n    retries = module.params['retries']\n    interval = module.params['interval']\n    match = module.params['match']\n\n    while retries > 0:\n        responses = run_commands(module, commands)\n\n        for item in list(conditionals):\n            if item(responses):\n                if match == 'any':\n                    conditionals = list()\n                    break\n                conditionals.remove(item)\n\n        if not conditionals:\n            break\n\n        time.sleep(interval)\n        retries -= 1\n\n    if conditionals:\n        failed_conditions = [item.raw for item in conditionals]\n        msg = 'One or more conditional statements have not been satisfied'\n        module.fail_json(msg=msg, failed_conditions=failed_conditions)\n\n    result.update({\n        'changed': False,\n        'stdout': responses,\n        'stdout_lines': list(to_lines(responses))\n    })\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  enos command version added   2 5  author   anil kumar muraleedharan ( amuraleedhar)  short description  run arbitrary commands lenovo enos devices description      sends arbitrary commands enos node returns results     read device  the c(enos command) module includes     argument cause module wait specific condition     returning timing condition met  extends documentation fragment  enos options    commands      description          list commands send remote device         configured provider  the resulting output command         returned  if i(wait for) argument provided          module returned condition satisfied         number retires expired      required  true   wait      description          list conditions evaluate output         command  the task wait condition true         moving forward  if conditional true         within configured number retries  task fails          see examples    match      description          the i(match) argument used conjunction         i(wait for) argument specify match policy   valid         values c(all) c(any)   if value set c(all)         conditionals wait must satisfied   if         value set c(any) one values must         satisfied      default      choices           retries      description          specifies number retries command tried         considered failed  the command run         target device every retry evaluated         i(wait for) conditions      default  10   interval      description          configures interval seconds wait retries         command  if command pass specified         conditions  interval indicates long wait         trying command      default  1      examples         note  examples use following provider dict handle         transport authentication node      vars    cli      host      inventory hostname         port  22     username  admin     password  admin     timeout  30        name  test contains operator   enos command      commands          show version         show system memory     wait           result 0  contains  lenovo            result 1  contains  memfree       provider      cli       register  result    assert                result changed    false           result stdout defined     name  get output single command   enos command      commands    show version       provider      cli       register  result    assert                result changed    false           result stdout defined     name  get output multiple commands   enos command      commands          show version         show interface information     provider      cli       register  result    assert                result changed    false           result stdout defined           result stdout   length    2       return       stdout    description  set responses commands   returned  always   type  list   sample                 stdout lines    description  the value stdout split list   returned  always   type  list   sample                                     failed conditions    description  conditionals failed   returned  failed   type  list   sample                         usr bin python        coding  utf 8           (c) 2017 red hat inc     copyright (c) 2017 lenovo        gnu general public license v3 0        this program distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        (see copying https   www gnu org licenses gpl 3 0 txt)       module execute enos commands lenovo switches     lenovo networking       note  examples use following provider dict handle          transport authentication node       command   str   prompt   str   response   str    ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n#\n# (C) 2017 Red Hat Inc.\n# Copyright (C) 2017 Lenovo.\n#\n# GNU General Public License v3.0+\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n#\n# Module to execute ENOS Commands on Lenovo Switches.\n# Lenovo Networking\n#\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = \"\"\"\n---\nmodule: enos_command\nversion_added: \"2.5\"\nauthor: \"Anil Kumar Muraleedharan (@amuraleedhar)\"\nshort_description: Run arbitrary commands on Lenovo ENOS devices\ndescription:\n  - Sends arbitrary commands to an ENOS node and returns the results\n    read from the device. The C(enos_command) module includes an\n    argument that will cause the module to wait for a specific condition\n    before returning or timing out if the condition is not met.\nextends_documentation_fragment: enos\noptions:\n  commands:\n    description:\n      - List of commands to send to the remote device over the\n        configured provider. The resulting output from the command\n        is returned. If the I(wait_for) argument is provided, the\n        module is not returned until the condition is satisfied or\n        the number of retires as expired.\n    required: true\n  wait_for:\n    description:\n      - List of conditions to evaluate against the output of the\n        command. The task will wait for each condition to be true\n        before moving forward. If the conditional is not true\n        within the configured number of retries, the task fails.\n        See examples.\n  match:\n    description:\n      - The I(match) argument is used in conjunction with the\n        I(wait_for) argument to specify the match policy.  Valid\n        values are C(all) or C(any).  If the value is set to C(all)\n        then all conditionals in the wait_for must be satisfied.  If\n        the value is set to C(any) then only one of the values must be\n        satisfied.\n    default: all\n    choices: ['any', 'all']\n  retries:\n    description:\n      - Specifies the number of retries a command should by tried\n        before it is considered failed. The command is run on the\n        target device every retry and evaluated against the\n        I(wait_for) conditions.\n    default: 10\n  interval:\n    description:\n      - Configures the interval in seconds to wait between retries\n        of the command. If the command does not pass the specified\n        conditions, the interval indicates how long to wait before\n        trying the command again.\n    default: 1\n\"\"\"\n\nEXAMPLES = \"\"\"\n# Note: examples below use the following provider dict to handle\n#       transport and authentication to the node.\n---\nvars:\n  cli:\n    host: \"{{ inventory_hostname }}\"\n    port: 22\n    username: admin\n    password: admin\n    timeout: 30\n\n---\n- name: test contains operator\n  enos_command:\n    commands:\n      - show version\n      - show system memory\n    wait_for:\n      - \"result[0] contains 'Lenovo'\"\n      - \"result[1] contains 'MemFree'\"\n    provider: \"{{ cli }}\"\n  register: result\n\n- assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n\n- name: get output for single command\n  enos_command:\n    commands: ['show version']\n    provider: \"{{ cli }}\"\n  register: result\n\n- assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n\n- name: get output for multiple commands\n  enos_command:\n    commands:\n      - show version\n      - show interface information\n    provider: \"{{ cli }}\"\n  register: result\n\n- assert:\n    that:\n      - \"result.changed == false\"\n      - \"result.stdout is defined\"\n      - \"result.stdout | length == 2\"\n\"\"\"\n\nRETURN = \"\"\"\nstdout:\n  description: the set of responses from the commands\n  returned: always\n  type: list\n  sample: ['...', '...']\nstdout_lines:\n  description: The value of stdout split into a list\n  returned: always\n  type: list\n  sample: [['...', '...'], ['...'], ['...']]\nfailed_conditions:\n  description: the conditionals that failed\n  returned: failed\n  type: list\n  sample: ['...', '...']\n\"\"\"\n\nimport time\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.network.enos.enos import run_commands, check_args\nfrom ansible.module_utils.network.enos.enos import enos_argument_spec\nfrom ansible.module_utils.network.common.parsing import Conditional\nfrom ansible.module_utils.six import string_types\n\n\ndef to_lines(stdout):\n    for item in stdout:\n        if isinstance(item, string_types):\n            item = str(item).split('\\n')\n        yield item\n\n\ndef main():\n    spec = dict(\n        # { command: <str>, prompt: <str>, response: <str> }\n        commands=dict(type='list', required=True),\n\n        wait_for=dict(type='list'),\n        match=dict(default='all', choices=['all', 'any']),\n\n        retries=dict(default=10, type='int'),\n        interval=dict(default=1, type='int')\n    )\n\n    spec.update(enos_argument_spec)\n\n    module = AnsibleModule(argument_spec=spec, supports_check_mode=True)\n    result = {'changed': False}\n\n    wait_for = module.params['wait_for'] or list()\n    conditionals = [Conditional(c) for c in wait_for]\n\n    commands = module.params['commands']\n    retries = module.params['retries']\n    interval = module.params['interval']\n    match = module.params['match']\n\n    while retries > 0:\n        responses = run_commands(module, commands)\n\n        for item in list(conditionals):\n            if item(responses):\n                if match == 'any':\n                    conditionals = list()\n                    break\n                conditionals.remove(item)\n\n        if not conditionals:\n            break\n\n        time.sleep(interval)\n        retries -= 1\n\n    if conditionals:\n        failed_conditions = [item.raw for item in conditionals]\n        msg = 'One or more conditional statements have not been satisfied'\n        module.fail_json(msg=msg, failed_conditions=failed_conditions)\n\n    result.update({\n        'changed': False,\n        'stdout': responses,\n        'stdout_lines': list(to_lines(responses))\n    })\n\n    module.exit_json(**result)\n\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "enos_command.py", "id": "79cb504ffa133f9d95859f8ce8cd08f9", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/network/enos/enos_command.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}