{"author": "openai", "code": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass InvertedPendulumEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        utils.EzPickle.__init__(self)\n        mujoco_env.MujocoEnv.__init__(self, 'inverted_pendulum.xml', 2)\n\n    def step(self, a):\n        reward = 1.0\n        self.do_simulation(a, self.frame_skip)\n        ob = self._get_obs()\n        notdone = np.isfinite(ob).all() and (np.abs(ob[1]) <= .2)\n        done = not notdone\n        return ob, reward, done, {}\n\n    def reset_model(self):\n        qpos = self.init_qpos + self.np_random.uniform(size=self.model.nq, low=-0.01, high=0.01)\n        qvel = self.init_qvel + self.np_random.uniform(size=self.model.nv, low=-0.01, high=0.01)\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def _get_obs(self):\n        return np.concatenate([self.sim.data.qpos, self.sim.data.qvel]).ravel()\n\n    def viewer_setup(self):\n        v = self.viewer\n        v.cam.trackbodyid = 0\n        v.cam.distance = self.model.stat.extent\n", "comments": "", "content": "import numpy as np\nfrom gym import utils\nfrom gym.envs.mujoco import mujoco_env\n\nclass InvertedPendulumEnv(mujoco_env.MujocoEnv, utils.EzPickle):\n    def __init__(self):\n        utils.EzPickle.__init__(self)\n        mujoco_env.MujocoEnv.__init__(self, 'inverted_pendulum.xml', 2)\n\n    def step(self, a):\n        reward = 1.0\n        self.do_simulation(a, self.frame_skip)\n        ob = self._get_obs()\n        notdone = np.isfinite(ob).all() and (np.abs(ob[1]) <= .2)\n        done = not notdone\n        return ob, reward, done, {}\n\n    def reset_model(self):\n        qpos = self.init_qpos + self.np_random.uniform(size=self.model.nq, low=-0.01, high=0.01)\n        qvel = self.init_qvel + self.np_random.uniform(size=self.model.nv, low=-0.01, high=0.01)\n        self.set_state(qpos, qvel)\n        return self._get_obs()\n\n    def _get_obs(self):\n        return np.concatenate([self.sim.data.qpos, self.sim.data.qvel]).ravel()\n\n    def viewer_setup(self):\n        v = self.viewer\n        v.cam.trackbodyid = 0\n        v.cam.distance = self.model.stat.extent\n", "description": "A toolkit for developing and comparing reinforcement learning algorithms.", "file_name": "inverted_pendulum.py", "id": "cef506d207698d38591ddca88355a833", "language": "Python", "project_name": "gym", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/openai-gym/openai-gym-6160181/gym/envs/mujoco/inverted_pendulum.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:30:35Z", "url": "https://github.com/openai/gym", "wiki": true}