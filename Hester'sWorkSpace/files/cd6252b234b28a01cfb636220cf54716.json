{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_xpath\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    xpath_text,\n)\n\n\nclass AfreecaTVIE(InfoExtractor):\n    IE_NAME = 'afreecatv'\n    IE_DESC = 'afreecatv.com'\n    _VALID_URL = r\n    _TESTS = [{\n        'url': 'http://live.afreecatv.com:8079/app/index.cgi?szType=read_ucc_bbs&szBjId=dailyapril&nStationNo=16711924&nBbsNo=18605867&nTitleNo=36164052&szSkin=',\n        'md5': 'f72c89fe7ecc14c1b5ce506c4996046e',\n        'info_dict': {\n            'id': '36164052',\n            'ext': 'mp4',\n            'title': '\ub370\uc77c\ub9ac \uc5d0\uc774\ud504\ub9b4 \uc694\uc815\ub4e4\uc758 \uc2dc\uc0c1\uc2dd!',\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': 'dailyapril',\n            'uploader_id': 'dailyapril',\n            'upload_date': '20160503',\n        },\n        'skip': 'Video is gone',\n    }, {\n        'url': 'http://afbbs.afreecatv.com:8080/app/read_ucc_bbs.cgi?nStationNo=16711924&nTitleNo=36153164&szBjId=dailyapril&nBbsNo=18605867',\n        'info_dict': {\n            'id': '36153164',\n            'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!'\",\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': 'dailyapril',\n            'uploader_id': 'dailyapril',\n        },\n        'playlist_count': 2,\n        'playlist': [{\n            'md5': 'd8b7c174568da61d774ef0203159bf97',\n            'info_dict': {\n                'id': '36153164_1',\n                'ext': 'mp4',\n                'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!'\",\n                'upload_date': '20160502',\n            },\n        }, {\n            'md5': '58f2ce7f6044e34439ab2d50612ab02b',\n            'info_dict': {\n                'id': '36153164_2',\n                'ext': 'mp4',\n                'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!'\",\n                'upload_date': '20160502',\n            },\n        }],\n        'skip': 'Video is gone',\n    }, {\n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/18650793',\n        'info_dict': {\n            'id': '18650793',\n            'ext': 'mp4',\n            'title': '\uc624\ub298\uc740 \ub2e4\ub974\ub2e4! \uc3d8\ub2d8\uc758 \uc6b0\uc6d4\ud55c \uc704\uc544\ub798~ \ub304\uc2a4\ub9ac\uc561\uc158!',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': '\uc708\uc544\ub514',\n            'uploader_id': 'badkids',\n            'duration': 107,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/10481652',\n        'info_dict': {\n            'id': '10481652',\n            'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!'\",\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': 'dailyapril',\n            'uploader_id': 'dailyapril',\n            'duration': 6492,\n        },\n        'playlist_count': 2,\n        'playlist': [{\n            'md5': 'd8b7c174568da61d774ef0203159bf97',\n            'info_dict': {\n                'id': '20160502_c4c62b9d_174361386_1',\n                'ext': 'mp4',\n                'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!' (part 1)\",\n                'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n                'uploader': 'dailyapril',\n                'uploader_id': 'dailyapril',\n                'upload_date': '20160502',\n                'duration': 3601,\n            },\n        }, {\n            'md5': '58f2ce7f6044e34439ab2d50612ab02b',\n            'info_dict': {\n                'id': '20160502_39e739bb_174361386_2',\n                'ext': 'mp4',\n                'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!' (part 2)\",\n                'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n                'uploader': 'dailyapril',\n                'uploader_id': 'dailyapril',\n                'upload_date': '20160502',\n                'duration': 2891,\n            },\n        }],\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/20515605',\n        'info_dict': {\n            'id': '20170411_BE689A0E_190960999_1_2_h',\n            'ext': 'mp4',\n            'title': '\ud63c\uc790\uc0ac\ub294\uc5ec\uc790\uc9d1',\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': '\u2665\uc774\uc2ac\uc774',\n            'uploader_id': 'dasl8121',\n            'upload_date': '20170411',\n            'duration': 213,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/26542731',\n        'info_dict': {\n            'id': '20171001_F1AE1711_196617479_1',\n            'ext': 'mp4',\n            'title': '[\uc0dd]\uc11c\uc544 \ucd08\uc2ec \ucc3e\uae30 \ubc29\uc1a1 (part 1)',\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': 'BJ\uc11c\uc544',\n            'uploader_id': 'bjdyrksu',\n            'upload_date': '20171001',\n            'duration': 3600,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.afreecatv.com/player/Player.swf?szType=szBjId=djleegoon&nStationNo=11273158&nBbsNo=13161095&nTitleNo=36327652',\n        'only_matching': True,\n    }, {\n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/15055030',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def parse_video_key(key):\n        video_key = {}\n        m = re.match(r'^(?P<upload_date>\\d{8})_\\w+_(?P<part>\\d+)$', key)\n        if m:\n            video_key['upload_date'] = m.group('upload_date')\n            video_key['part'] = int(m.group('part'))\n        return video_key\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        if re.search(r'alert\\([\"\\']This video has been deleted', webpage):\n            raise ExtractorError(\n                'Video %s has been deleted' % video_id, expected=True)\n\n        station_id = self._search_regex(\n            r'nStationNo\\s*=\\s*(\\d+)', webpage, 'station')\n        bbs_id = self._search_regex(\n            r'nBbsNo\\s*=\\s*(\\d+)', webpage, 'bbs')\n        video_id = self._search_regex(\n            r'nTitleNo\\s*=\\s*(\\d+)', webpage, 'title', default=video_id)\n\n        video_xml = self._download_xml(\n            'http://afbbs.afreecatv.com:8080/api/video/get_video_info.php',\n            video_id, headers={\n                'Referer': 'http://vod.afreecatv.com/embed.php',\n            }, query={\n                'nTitleNo': video_id,\n                'nStationNo': station_id,\n                'nBbsNo': bbs_id,\n                'partialView': 'SKIP_ADULT',\n            })\n\n        flag = xpath_text(video_xml, './track/flag', 'flag', default=None)\n        if flag and flag != 'SUCCEED':\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, flag), expected=True)\n\n        video_element = video_xml.findall(compat_xpath('./track/video'))[-1]\n        if video_element is None or video_element.text is None:\n            raise ExtractorError(\n                'Video %s video does not exist' % video_id, expected=True)\n\n        video_url = video_element.text.strip()\n\n        title = xpath_text(video_xml, './track/title', 'title', fatal=True)\n\n        uploader = xpath_text(video_xml, './track/nickname', 'uploader')\n        uploader_id = xpath_text(video_xml, './track/bj_id', 'uploader id')\n        duration = int_or_none(xpath_text(\n            video_xml, './track/duration', 'duration'))\n        thumbnail = xpath_text(video_xml, './track/titleImage', 'thumbnail')\n\n        common_entry = {\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'thumbnail': thumbnail,\n        }\n\n        info = common_entry.copy()\n        info.update({\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n        })\n\n        if not video_url:\n            entries = []\n            file_elements = video_element.findall(compat_xpath('./file'))\n            one = len(file_elements) == 1\n            for file_num, file_element in enumerate(file_elements, start=1):\n                file_url = file_element.text\n                if not file_url:\n                    continue\n                key = file_element.get('key', '')\n                upload_date = self._search_regex(\n                    r'^(\\d{8})_', key, 'upload date', default=None)\n                file_duration = int_or_none(file_element.get('duration'))\n                format_id = key if key else '%s_%s' % (video_id, file_num)\n                if determine_ext(file_url) == 'm3u8':\n                    formats = self._extract_m3u8_formats(\n                        file_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id='hls',\n                        note='Downloading part %d m3u8 information' % file_num)\n                else:\n                    formats = [{\n                        'url': file_url,\n                        'format_id': 'http',\n                    }]\n                if not formats:\n                    continue\n                self._sort_formats(formats)\n                file_info = common_entry.copy()\n                file_info.update({\n                    'id': format_id,\n                    'title': title if one else '%s (part %d)' % (title, file_num),\n                    'upload_date': upload_date,\n                    'duration': file_duration,\n                    'formats': formats,\n                })\n                entries.append(file_info)\n            entries_info = info.copy()\n            entries_info.update({\n                '_type': 'multi_video',\n                'entries': entries,\n            })\n            return entries_info\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'thumbnail': thumbnail,\n        }\n\n        if determine_ext(video_url) == 'm3u8':\n            info['formats'] = self._extract_m3u8_formats(\n                video_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls')\n        else:\n            app, playpath = video_url.split('mp4:')\n            info.update({\n                'url': app,\n                'ext': 'flv',\n                'play_path': 'mp4:' + playpath,\n                'rtmp_live': True,  \n            })\n\n        return info\n", "comments": "(?x)\n                    https?://\n                        (?:\n                            (?:(?:live|afbbs|www)\\.)?afreeca(?:tv)?\\.com(?::\\d+)?\n                            (?:\n                                /app/(?:index|read_ucc_bbs)\\.cgi|\n                                /player/[Pp]layer\\.(?:swf|html)\n                            )\\?.*?\\bnTitleNo=|\n                            vod\\.afreecatv\\.com/PLAYER/STATION/\n                        )\n                        (?P<id>\\d+)\n                    \n \n# coding: utf-8\n# non standard key\n# adult video\n# downloading won't end without this\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_xpath\nfrom ..utils import (\n    determine_ext,\n    ExtractorError,\n    int_or_none,\n    xpath_text,\n)\n\n\nclass AfreecaTVIE(InfoExtractor):\n    IE_NAME = 'afreecatv'\n    IE_DESC = 'afreecatv.com'\n    _VALID_URL = r'''(?x)\n                    https?://\n                        (?:\n                            (?:(?:live|afbbs|www)\\.)?afreeca(?:tv)?\\.com(?::\\d+)?\n                            (?:\n                                /app/(?:index|read_ucc_bbs)\\.cgi|\n                                /player/[Pp]layer\\.(?:swf|html)\n                            )\\?.*?\\bnTitleNo=|\n                            vod\\.afreecatv\\.com/PLAYER/STATION/\n                        )\n                        (?P<id>\\d+)\n                    '''\n    _TESTS = [{\n        'url': 'http://live.afreecatv.com:8079/app/index.cgi?szType=read_ucc_bbs&szBjId=dailyapril&nStationNo=16711924&nBbsNo=18605867&nTitleNo=36164052&szSkin=',\n        'md5': 'f72c89fe7ecc14c1b5ce506c4996046e',\n        'info_dict': {\n            'id': '36164052',\n            'ext': 'mp4',\n            'title': '\ub370\uc77c\ub9ac \uc5d0\uc774\ud504\ub9b4 \uc694\uc815\ub4e4\uc758 \uc2dc\uc0c1\uc2dd!',\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': 'dailyapril',\n            'uploader_id': 'dailyapril',\n            'upload_date': '20160503',\n        },\n        'skip': 'Video is gone',\n    }, {\n        'url': 'http://afbbs.afreecatv.com:8080/app/read_ucc_bbs.cgi?nStationNo=16711924&nTitleNo=36153164&szBjId=dailyapril&nBbsNo=18605867',\n        'info_dict': {\n            'id': '36153164',\n            'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!'\",\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': 'dailyapril',\n            'uploader_id': 'dailyapril',\n        },\n        'playlist_count': 2,\n        'playlist': [{\n            'md5': 'd8b7c174568da61d774ef0203159bf97',\n            'info_dict': {\n                'id': '36153164_1',\n                'ext': 'mp4',\n                'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!'\",\n                'upload_date': '20160502',\n            },\n        }, {\n            'md5': '58f2ce7f6044e34439ab2d50612ab02b',\n            'info_dict': {\n                'id': '36153164_2',\n                'ext': 'mp4',\n                'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!'\",\n                'upload_date': '20160502',\n            },\n        }],\n        'skip': 'Video is gone',\n    }, {\n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/18650793',\n        'info_dict': {\n            'id': '18650793',\n            'ext': 'mp4',\n            'title': '\uc624\ub298\uc740 \ub2e4\ub974\ub2e4! \uc3d8\ub2d8\uc758 \uc6b0\uc6d4\ud55c \uc704\uc544\ub798~ \ub304\uc2a4\ub9ac\uc561\uc158!',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'uploader': '\uc708\uc544\ub514',\n            'uploader_id': 'badkids',\n            'duration': 107,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/10481652',\n        'info_dict': {\n            'id': '10481652',\n            'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!'\",\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': 'dailyapril',\n            'uploader_id': 'dailyapril',\n            'duration': 6492,\n        },\n        'playlist_count': 2,\n        'playlist': [{\n            'md5': 'd8b7c174568da61d774ef0203159bf97',\n            'info_dict': {\n                'id': '20160502_c4c62b9d_174361386_1',\n                'ext': 'mp4',\n                'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!' (part 1)\",\n                'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n                'uploader': 'dailyapril',\n                'uploader_id': 'dailyapril',\n                'upload_date': '20160502',\n                'duration': 3601,\n            },\n        }, {\n            'md5': '58f2ce7f6044e34439ab2d50612ab02b',\n            'info_dict': {\n                'id': '20160502_39e739bb_174361386_2',\n                'ext': 'mp4',\n                'title': \"BJ\uc720\ud2b8\ub8e8\uc640 \ud568\uaed8\ud558\ub294 '\ud305\ucee4\ubca8 \uba54\uc774\ud06c\uc5c5!' (part 2)\",\n                'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n                'uploader': 'dailyapril',\n                'uploader_id': 'dailyapril',\n                'upload_date': '20160502',\n                'duration': 2891,\n            },\n        }],\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # non standard key\n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/20515605',\n        'info_dict': {\n            'id': '20170411_BE689A0E_190960999_1_2_h',\n            'ext': 'mp4',\n            'title': '\ud63c\uc790\uc0ac\ub294\uc5ec\uc790\uc9d1',\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': '\u2665\uc774\uc2ac\uc774',\n            'uploader_id': 'dasl8121',\n            'upload_date': '20170411',\n            'duration': 213,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # adult video\n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/26542731',\n        'info_dict': {\n            'id': '20171001_F1AE1711_196617479_1',\n            'ext': 'mp4',\n            'title': '[\uc0dd]\uc11c\uc544 \ucd08\uc2ec \ucc3e\uae30 \ubc29\uc1a1 (part 1)',\n            'thumbnail': 're:^https?://(?:video|st)img.afreecatv.com/.*$',\n            'uploader': 'BJ\uc11c\uc544',\n            'uploader_id': 'bjdyrksu',\n            'upload_date': '20171001',\n            'duration': 3600,\n            'age_limit': 18,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        'url': 'http://www.afreecatv.com/player/Player.swf?szType=szBjId=djleegoon&nStationNo=11273158&nBbsNo=13161095&nTitleNo=36327652',\n        'only_matching': True,\n    }, {\n        'url': 'http://vod.afreecatv.com/PLAYER/STATION/15055030',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def parse_video_key(key):\n        video_key = {}\n        m = re.match(r'^(?P<upload_date>\\d{8})_\\w+_(?P<part>\\d+)$', key)\n        if m:\n            video_key['upload_date'] = m.group('upload_date')\n            video_key['part'] = int(m.group('part'))\n        return video_key\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        webpage = self._download_webpage(url, video_id)\n\n        if re.search(r'alert\\([\"\\']This video has been deleted', webpage):\n            raise ExtractorError(\n                'Video %s has been deleted' % video_id, expected=True)\n\n        station_id = self._search_regex(\n            r'nStationNo\\s*=\\s*(\\d+)', webpage, 'station')\n        bbs_id = self._search_regex(\n            r'nBbsNo\\s*=\\s*(\\d+)', webpage, 'bbs')\n        video_id = self._search_regex(\n            r'nTitleNo\\s*=\\s*(\\d+)', webpage, 'title', default=video_id)\n\n        video_xml = self._download_xml(\n            'http://afbbs.afreecatv.com:8080/api/video/get_video_info.php',\n            video_id, headers={\n                'Referer': 'http://vod.afreecatv.com/embed.php',\n            }, query={\n                'nTitleNo': video_id,\n                'nStationNo': station_id,\n                'nBbsNo': bbs_id,\n                'partialView': 'SKIP_ADULT',\n            })\n\n        flag = xpath_text(video_xml, './track/flag', 'flag', default=None)\n        if flag and flag != 'SUCCEED':\n            raise ExtractorError(\n                '%s said: %s' % (self.IE_NAME, flag), expected=True)\n\n        video_element = video_xml.findall(compat_xpath('./track/video'))[-1]\n        if video_element is None or video_element.text is None:\n            raise ExtractorError(\n                'Video %s video does not exist' % video_id, expected=True)\n\n        video_url = video_element.text.strip()\n\n        title = xpath_text(video_xml, './track/title', 'title', fatal=True)\n\n        uploader = xpath_text(video_xml, './track/nickname', 'uploader')\n        uploader_id = xpath_text(video_xml, './track/bj_id', 'uploader id')\n        duration = int_or_none(xpath_text(\n            video_xml, './track/duration', 'duration'))\n        thumbnail = xpath_text(video_xml, './track/titleImage', 'thumbnail')\n\n        common_entry = {\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'thumbnail': thumbnail,\n        }\n\n        info = common_entry.copy()\n        info.update({\n            'id': video_id,\n            'title': title,\n            'duration': duration,\n        })\n\n        if not video_url:\n            entries = []\n            file_elements = video_element.findall(compat_xpath('./file'))\n            one = len(file_elements) == 1\n            for file_num, file_element in enumerate(file_elements, start=1):\n                file_url = file_element.text\n                if not file_url:\n                    continue\n                key = file_element.get('key', '')\n                upload_date = self._search_regex(\n                    r'^(\\d{8})_', key, 'upload date', default=None)\n                file_duration = int_or_none(file_element.get('duration'))\n                format_id = key if key else '%s_%s' % (video_id, file_num)\n                if determine_ext(file_url) == 'm3u8':\n                    formats = self._extract_m3u8_formats(\n                        file_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                        m3u8_id='hls',\n                        note='Downloading part %d m3u8 information' % file_num)\n                else:\n                    formats = [{\n                        'url': file_url,\n                        'format_id': 'http',\n                    }]\n                if not formats:\n                    continue\n                self._sort_formats(formats)\n                file_info = common_entry.copy()\n                file_info.update({\n                    'id': format_id,\n                    'title': title if one else '%s (part %d)' % (title, file_num),\n                    'upload_date': upload_date,\n                    'duration': file_duration,\n                    'formats': formats,\n                })\n                entries.append(file_info)\n            entries_info = info.copy()\n            entries_info.update({\n                '_type': 'multi_video',\n                'entries': entries,\n            })\n            return entries_info\n\n        info = {\n            'id': video_id,\n            'title': title,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'duration': duration,\n            'thumbnail': thumbnail,\n        }\n\n        if determine_ext(video_url) == 'm3u8':\n            info['formats'] = self._extract_m3u8_formats(\n                video_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                m3u8_id='hls')\n        else:\n            app, playpath = video_url.split('mp4:')\n            info.update({\n                'url': app,\n                'ext': 'flv',\n                'play_path': 'mp4:' + playpath,\n                'rtmp_live': True,  # downloading won't end without this\n            })\n\n        return info\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "afreecatv.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/afreecatv.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}