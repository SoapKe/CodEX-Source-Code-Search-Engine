{"author": "nvbn", "code": "def _set_confirmation(proc, require):\n    proc.sendline(u'mkdir -p ~/.thefuck')\n    proc.sendline(\n        u'echo \"require_confirmation = {}\" > ~/.thefuck/settings.py'.format(\n            require))\n\n\ndef with_confirmation(proc, TIMEOUT):\n    \n    _set_confirmation(proc, False)\n\n    proc.sendline(u'ehco test')\n\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u'echo test'])\n    assert proc.expect([TIMEOUT, u'test'])\n\n\ndef how_to_configure(proc, TIMEOUT):\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u\"alias isn't configured\"])\n", "comments": "Ensures that command can be fixed when confirmation enabled.\"\"\"\n    _set_confirmation(proc, True)\n\n    proc.sendline(u'ehco test')\n\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u'echo test'])\n    assert proc.expect([TIMEOUT, u'enter'])\n    assert proc.expect_exact([TIMEOUT, u'ctrl+c'])\n    proc.send('\\n')\n\n    assert proc.expect([TIMEOUT, u'test'])\n\n\ndef history_changed(proc, TIMEOUT, to):\n    \"\"\"Ensures that history changed.\"\"\"\n    proc.send('\\033[A')\n    assert proc.expect([TIMEOUT, to])\n\n\ndef history_not_changed(proc, TIMEOUT):\n    \"\"\"Ensures that history not changed.\"\"\"\n    proc.send('\\033[A')\n    assert proc.expect([TIMEOUT, u'fuck'])\n\n\ndef select_command_with_arrows(proc, TIMEOUT):\n    \"\"\"Ensures that command can be selected with arrow keys.\"\"\"\n    _set_confirmation(proc, True)\n\n    proc.sendline(u'git h')\n    assert proc.expect([TIMEOUT, u\"git: 'h' is not a git command.\"])\n\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u'git show'])\n    proc.send('\\033[B')\n    assert proc.expect([TIMEOUT, u'git push'])\n    proc.send('\\033[B')\n    assert proc.expect([TIMEOUT, u'git help'])\n    proc.send('\\033[A')\n    assert proc.expect([TIMEOUT, u'git push'])\n    proc.send('\\033[B')\n    assert proc.expect([TIMEOUT, u'git help'])\n    proc.send('\\n')\n\n    assert proc.expect([TIMEOUT, u'usage'])\n\n\ndef refuse_with_confirmation(proc, TIMEOUT):\n    \"\"\"Ensures that fix can be refused when confirmation enabled.\"\"\"\n    _set_confirmation(proc, True)\n\n    proc.sendline(u'ehco test')\n\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u'echo test'])\n    assert proc.expect([TIMEOUT, u'enter'])\n    assert proc.expect_exact([TIMEOUT, u'ctrl+c'])\n    proc.send('\\003')\n\n    assert proc.expect([TIMEOUT, u'Aborted'])\n\n\ndef without_confirmation(proc, TIMEOUT):\n    \"\"\"Ensures that command can be fixed when confirmation disabled.\n.\n", "content": "def _set_confirmation(proc, require):\n    proc.sendline(u'mkdir -p ~/.thefuck')\n    proc.sendline(\n        u'echo \"require_confirmation = {}\" > ~/.thefuck/settings.py'.format(\n            require))\n\n\ndef with_confirmation(proc, TIMEOUT):\n    \"\"\"Ensures that command can be fixed when confirmation enabled.\"\"\"\n    _set_confirmation(proc, True)\n\n    proc.sendline(u'ehco test')\n\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u'echo test'])\n    assert proc.expect([TIMEOUT, u'enter'])\n    assert proc.expect_exact([TIMEOUT, u'ctrl+c'])\n    proc.send('\\n')\n\n    assert proc.expect([TIMEOUT, u'test'])\n\n\ndef history_changed(proc, TIMEOUT, to):\n    \"\"\"Ensures that history changed.\"\"\"\n    proc.send('\\033[A')\n    assert proc.expect([TIMEOUT, to])\n\n\ndef history_not_changed(proc, TIMEOUT):\n    \"\"\"Ensures that history not changed.\"\"\"\n    proc.send('\\033[A')\n    assert proc.expect([TIMEOUT, u'fuck'])\n\n\ndef select_command_with_arrows(proc, TIMEOUT):\n    \"\"\"Ensures that command can be selected with arrow keys.\"\"\"\n    _set_confirmation(proc, True)\n\n    proc.sendline(u'git h')\n    assert proc.expect([TIMEOUT, u\"git: 'h' is not a git command.\"])\n\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u'git show'])\n    proc.send('\\033[B')\n    assert proc.expect([TIMEOUT, u'git push'])\n    proc.send('\\033[B')\n    assert proc.expect([TIMEOUT, u'git help'])\n    proc.send('\\033[A')\n    assert proc.expect([TIMEOUT, u'git push'])\n    proc.send('\\033[B')\n    assert proc.expect([TIMEOUT, u'git help'])\n    proc.send('\\n')\n\n    assert proc.expect([TIMEOUT, u'usage'])\n\n\ndef refuse_with_confirmation(proc, TIMEOUT):\n    \"\"\"Ensures that fix can be refused when confirmation enabled.\"\"\"\n    _set_confirmation(proc, True)\n\n    proc.sendline(u'ehco test')\n\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u'echo test'])\n    assert proc.expect([TIMEOUT, u'enter'])\n    assert proc.expect_exact([TIMEOUT, u'ctrl+c'])\n    proc.send('\\003')\n\n    assert proc.expect([TIMEOUT, u'Aborted'])\n\n\ndef without_confirmation(proc, TIMEOUT):\n    \"\"\"Ensures that command can be fixed when confirmation disabled.\"\"\"\n    _set_confirmation(proc, False)\n\n    proc.sendline(u'ehco test')\n\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u'echo test'])\n    assert proc.expect([TIMEOUT, u'test'])\n\n\ndef how_to_configure(proc, TIMEOUT):\n    proc.sendline(u'fuck')\n    assert proc.expect([TIMEOUT, u\"alias isn't configured\"])\n", "description": "Magnificent app which corrects your previous console command.", "file_name": "plots.py", "language": "Python", "project_name": "thefuck", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/nvbn_thefuck/nvbn-thefuck-284d49d/tests/functional/plots.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:34:29Z", "url": "https://github.com/nvbn/thefuck", "wiki": true}