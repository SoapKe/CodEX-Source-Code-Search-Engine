{"author": "donnemartin", "code": "from nose.tools import assert_equal\nfrom nose.tools import assert_true\n\n\nclass TestBuildOrder(object):\n\n    def __init__(self):\n        self.dependencies = [\n            Dependency('d', 'g'),\n            Dependency('f', 'c'),\n            Dependency('f', 'b'),\n            Dependency('f', 'a'),\n            Dependency('c', 'a'),\n            Dependency('b', 'a'),\n            Dependency('a', 'e'),\n            Dependency('b', 'e'),\n        ]\n\n    def test_build_order(self):\n        build_order = BuildOrder(self.dependencies)\n        processed_nodes = build_order.find_build_order()\n\n        expected_result0 = ('d', 'f')\n        expected_result1 = ('c', 'b', 'g')\n        assert_true(processed_nodes[0].key in expected_result0)\n        assert_true(processed_nodes[1].key in expected_result0)\n        assert_true(processed_nodes[2].key in expected_result1)\n        assert_true(processed_nodes[3].key in expected_result1)\n        assert_true(processed_nodes[4].key in expected_result1)\n        assert_true(processed_nodes[5].key is 'a')\n        assert_true(processed_nodes[6].key is 'e')\n\n        print('Success: test_build_order')\n\n    def test_build_order_circular(self):\n        self.dependencies.append(Dependency('e', 'f'))\n        build_order = BuildOrder(self.dependencies)\n        processed_nodes = build_order.find_build_order()\n        assert_true(processed_nodes is None)\n\n        print('Success: test_build_order_circular')\n\n\ndef main():\n    test = TestBuildOrder()\n    test.test_build_order()\n    test.test_build_order_circular()\n\n\nif __name__ == '__main__':\n    main()", "comments": "", "content": "from nose.tools import assert_equal\nfrom nose.tools import assert_true\n\n\nclass TestBuildOrder(object):\n\n    def __init__(self):\n        self.dependencies = [\n            Dependency('d', 'g'),\n            Dependency('f', 'c'),\n            Dependency('f', 'b'),\n            Dependency('f', 'a'),\n            Dependency('c', 'a'),\n            Dependency('b', 'a'),\n            Dependency('a', 'e'),\n            Dependency('b', 'e'),\n        ]\n\n    def test_build_order(self):\n        build_order = BuildOrder(self.dependencies)\n        processed_nodes = build_order.find_build_order()\n\n        expected_result0 = ('d', 'f')\n        expected_result1 = ('c', 'b', 'g')\n        assert_true(processed_nodes[0].key in expected_result0)\n        assert_true(processed_nodes[1].key in expected_result0)\n        assert_true(processed_nodes[2].key in expected_result1)\n        assert_true(processed_nodes[3].key in expected_result1)\n        assert_true(processed_nodes[4].key in expected_result1)\n        assert_true(processed_nodes[5].key is 'a')\n        assert_true(processed_nodes[6].key is 'e')\n\n        print('Success: test_build_order')\n\n    def test_build_order_circular(self):\n        self.dependencies.append(Dependency('e', 'f'))\n        build_order = BuildOrder(self.dependencies)\n        processed_nodes = build_order.find_build_order()\n        assert_true(processed_nodes is None)\n\n        print('Success: test_build_order_circular')\n\n\ndef main():\n    test = TestBuildOrder()\n    test.test_build_order()\n    test.test_build_order_circular()\n\n\nif __name__ == '__main__':\n    main()", "description": "Interactive Python coding interview challenges (algorithms and data structures).  Includes Anki flashcards.", "file_name": "test_build_order.py", "id": "5d196b7037058aea13d14859df035e01", "language": "Python", "project_name": "interactive-coding-challenges", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/donnemartin-interactive-coding-challenges/donnemartin-interactive-coding-challenges-6eb3114/graphs_trees/graph_build_order/test_build_order.py", "save_time": "", "source": "", "update_at": "2018-03-13T21:01:52Z", "url": "https://github.com/donnemartin/interactive-coding-challenges", "wiki": true}