{"author": "HelloZeroNet", "code": "import time\nimport json\nimport os\nimport re\n\nfrom Plugin import PluginManager\nfrom Translate import Translate\nfrom Config import config\nfrom util import helper\n\n\nif os.path.isfile(\"%s/mutes.json\" % config.data_dir):\n    try:\n        data = json.load(open(\"%s/mutes.json\" % config.data_dir))\n        mutes = data.get(\"mutes\", {})\n        site_blacklist = data.get(\"site_blacklist\", {})\n    except Exception as err:\n        mutes = {}\n        site_blacklist = {}\nelse:\n    open(\"%s/mutes.json\" % config.data_dir, \"w\").write('{\"mutes\": {}, \"site_blacklist\": {}}')\n    mutes = {}\n    site_blacklist = {}\n\nif \"_\" not in locals():\n    _ = Translate(\"plugins/Mute/languages/\")\n\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    \n    def changeDb(self, auth_address, action):\n        self.log.debug(\"Mute action %s on user %s\" % (action, auth_address))\n        res = self.site.content_manager.contents.db.execute(\n            \"SELECT * FROM content LEFT JOIN site USING (site_id) WHERE inner_path LIKE :inner_path\",\n            {\"inner_path\": \"%%/%s/%%\" % auth_address}\n        )\n        for row in res:\n            site = self.server.sites.get(row[\"address\"])\n            if not site:\n                continue\n            dir_inner_path = helper.getDirname(row[\"inner_path\"])\n            for file_name in site.storage.walk(dir_inner_path):\n                if action == \"remove\":\n                    site.storage.onUpdated(dir_inner_path + file_name, False)\n                else:\n                    site.storage.onUpdated(dir_inner_path + file_name)\n                site.onFileDone(dir_inner_path + file_name)\n\n    def cbMuteAdd(self, to, auth_address, cert_user_id, reason):\n        mutes[auth_address] = {\"cert_user_id\": cert_user_id, \"reason\": reason, \"source\": self.site.address, \"date_added\": time.time()}\n        self.saveMutes()\n        self.changeDb(auth_address, \"remove\")\n        self.response(to, \"ok\")\n\n    def actionMuteAdd(self, to, auth_address, cert_user_id, reason):\n        if \"ADMIN\" in self.getPermissions(to):\n            self.cbMuteAdd(to, auth_address, cert_user_id, reason)\n        else:\n            self.cmd(\n                \"confirm\",\n                [_[\"Hide all content from <b>%s</b>?\"] % cert_user_id, _[\"Mute\"]],\n                lambda (res): self.cbMuteAdd(to, auth_address, cert_user_id, reason)\n            )\n\n    def cbMuteRemove(self, to, auth_address):\n        del mutes[auth_address]\n        self.saveMutes()\n        self.changeDb(auth_address, \"load\")\n        self.response(to, \"ok\")\n\n    def actionMuteRemove(self, to, auth_address):\n        if \"ADMIN\" in self.getPermissions(to):\n            self.cbMuteRemove(to, auth_address)\n        else:\n            self.cmd(\n                \"confirm\",\n                [_[\"Unmute <b>%s</b>?\"] % mutes[auth_address][\"cert_user_id\"], _[\"Unmute\"]],\n                lambda (res): self.cbMuteRemove(to, auth_address)\n            )\n\n    def actionMuteList(self, to):\n        if \"ADMIN\" in self.getPermissions(to):\n            self.response(to, mutes)\n        else:\n            return self.response(to, {\"error\": \"Only ADMIN sites can list mutes\"})\n\n    \n    def actionBlacklistAdd(self, to, site_address, reason=None):\n        if \"ADMIN\" not in self.getPermissions(to):\n            return self.response(to, {\"error\": \"Forbidden, only admin sites can add to blacklist\"})\n        site_blacklist[site_address] = {\"date_added\": time.time(), \"reason\": reason}\n        self.saveMutes()\n        self.response(to, \"ok\")\n\n    def actionBlacklistRemove(self, to, site_address):\n        if \"ADMIN\" not in self.getPermissions(to):\n            return self.response(to, {\"error\": \"Forbidden, only admin sites can remove from blacklist\"})\n        del site_blacklist[site_address]\n        self.saveMutes()\n        self.response(to, \"ok\")\n\n    def actionBlacklistList(self, to):\n        if \"ADMIN\" in self.getPermissions(to):\n            self.response(to, site_blacklist)\n        else:\n            return self.response(to, {\"error\": \"Only ADMIN sites can list blacklists\"})\n\n    \n    def saveMutes(self):\n        helper.atomicWrite(\"%s/mutes.json\" % config.data_dir, json.dumps({\"mutes\": mutes, \"site_blacklist\": site_blacklist}, indent=2, sort_keys=True))\n\n\n@PluginManager.registerTo(\"SiteStorage\")\nclass SiteStoragePlugin(object):\n    def updateDbFile(self, inner_path, file=None, cur=None):\n        if file is not False:  \n            \n            matches = re.findall(\"/(1[A-Za-z0-9]{26,35})/\", inner_path)\n            \n            for auth_address in matches:\n                if auth_address in mutes:\n                    self.log.debug(\"Mute match: %s, ignoring %s\" % (auth_address, inner_path))\n                    return False\n\n        return super(SiteStoragePlugin, self).updateDbFile(inner_path, file=file, cur=cur)\n\n\n@PluginManager.registerTo(\"UiRequest\")\nclass UiRequestPlugin(object):\n    def actionWrapper(self, path, extra_headers=None):\n        match = re.match(\"/(?P<address>[A-Za-z0-9\\._-]+)(?P<inner_path>/.*|$)\", path)\n        if not match:\n            return False\n        address = match.group(\"address\")\n\n        if self.server.site_manager.get(address):  \n            return super(UiRequestPlugin, self).actionWrapper(path, extra_headers)\n\n        if self.server.site_manager.isDomain(address):\n            address = self.server.site_manager.resolveDomain(address)\n\n        if address in site_blacklist:\n            site = self.server.site_manager.get(config.homepage)\n            if not extra_headers:\n                extra_headers = {}\n            self.sendHeader(extra_headers=extra_headers)\n            return iter([super(UiRequestPlugin, self).renderWrapper(\n                site, path, \"uimedia/plugins/mute/blacklisted.html?address=\" + address,\n                \"Blacklisted site\", extra_headers, show_loadingscreen=False\n            )])\n        else:\n            return super(UiRequestPlugin, self).actionWrapper(path, extra_headers)\n\n    def actionUiMedia(self, path, *args, **kwargs):\n        if path.startswith(\"/uimedia/plugins/mute/\"):\n            file_path = path.replace(\"/uimedia/plugins/mute/\", \"plugins/Mute/media/\")\n            return self.actionFile(file_path)\n        else:\n            return super(UiRequestPlugin, self).actionUiMedia(path)\n", "comments": "search remove readd files user blacklist write mutes blacklist json file file deletion always allowed find bitcoin addresses file path check adresses mute list site already exists", "content": "import time\nimport json\nimport os\nimport re\n\nfrom Plugin import PluginManager\nfrom Translate import Translate\nfrom Config import config\nfrom util import helper\n\n\nif os.path.isfile(\"%s/mutes.json\" % config.data_dir):\n    try:\n        data = json.load(open(\"%s/mutes.json\" % config.data_dir))\n        mutes = data.get(\"mutes\", {})\n        site_blacklist = data.get(\"site_blacklist\", {})\n    except Exception as err:\n        mutes = {}\n        site_blacklist = {}\nelse:\n    open(\"%s/mutes.json\" % config.data_dir, \"w\").write('{\"mutes\": {}, \"site_blacklist\": {}}')\n    mutes = {}\n    site_blacklist = {}\n\nif \"_\" not in locals():\n    _ = Translate(\"plugins/Mute/languages/\")\n\n\n@PluginManager.registerTo(\"UiWebsocket\")\nclass UiWebsocketPlugin(object):\n    # Search and remove or readd files of an user\n    def changeDb(self, auth_address, action):\n        self.log.debug(\"Mute action %s on user %s\" % (action, auth_address))\n        res = self.site.content_manager.contents.db.execute(\n            \"SELECT * FROM content LEFT JOIN site USING (site_id) WHERE inner_path LIKE :inner_path\",\n            {\"inner_path\": \"%%/%s/%%\" % auth_address}\n        )\n        for row in res:\n            site = self.server.sites.get(row[\"address\"])\n            if not site:\n                continue\n            dir_inner_path = helper.getDirname(row[\"inner_path\"])\n            for file_name in site.storage.walk(dir_inner_path):\n                if action == \"remove\":\n                    site.storage.onUpdated(dir_inner_path + file_name, False)\n                else:\n                    site.storage.onUpdated(dir_inner_path + file_name)\n                site.onFileDone(dir_inner_path + file_name)\n\n    def cbMuteAdd(self, to, auth_address, cert_user_id, reason):\n        mutes[auth_address] = {\"cert_user_id\": cert_user_id, \"reason\": reason, \"source\": self.site.address, \"date_added\": time.time()}\n        self.saveMutes()\n        self.changeDb(auth_address, \"remove\")\n        self.response(to, \"ok\")\n\n    def actionMuteAdd(self, to, auth_address, cert_user_id, reason):\n        if \"ADMIN\" in self.getPermissions(to):\n            self.cbMuteAdd(to, auth_address, cert_user_id, reason)\n        else:\n            self.cmd(\n                \"confirm\",\n                [_[\"Hide all content from <b>%s</b>?\"] % cert_user_id, _[\"Mute\"]],\n                lambda (res): self.cbMuteAdd(to, auth_address, cert_user_id, reason)\n            )\n\n    def cbMuteRemove(self, to, auth_address):\n        del mutes[auth_address]\n        self.saveMutes()\n        self.changeDb(auth_address, \"load\")\n        self.response(to, \"ok\")\n\n    def actionMuteRemove(self, to, auth_address):\n        if \"ADMIN\" in self.getPermissions(to):\n            self.cbMuteRemove(to, auth_address)\n        else:\n            self.cmd(\n                \"confirm\",\n                [_[\"Unmute <b>%s</b>?\"] % mutes[auth_address][\"cert_user_id\"], _[\"Unmute\"]],\n                lambda (res): self.cbMuteRemove(to, auth_address)\n            )\n\n    def actionMuteList(self, to):\n        if \"ADMIN\" in self.getPermissions(to):\n            self.response(to, mutes)\n        else:\n            return self.response(to, {\"error\": \"Only ADMIN sites can list mutes\"})\n\n    # Blacklist\n    def actionBlacklistAdd(self, to, site_address, reason=None):\n        if \"ADMIN\" not in self.getPermissions(to):\n            return self.response(to, {\"error\": \"Forbidden, only admin sites can add to blacklist\"})\n        site_blacklist[site_address] = {\"date_added\": time.time(), \"reason\": reason}\n        self.saveMutes()\n        self.response(to, \"ok\")\n\n    def actionBlacklistRemove(self, to, site_address):\n        if \"ADMIN\" not in self.getPermissions(to):\n            return self.response(to, {\"error\": \"Forbidden, only admin sites can remove from blacklist\"})\n        del site_blacklist[site_address]\n        self.saveMutes()\n        self.response(to, \"ok\")\n\n    def actionBlacklistList(self, to):\n        if \"ADMIN\" in self.getPermissions(to):\n            self.response(to, site_blacklist)\n        else:\n            return self.response(to, {\"error\": \"Only ADMIN sites can list blacklists\"})\n\n    # Write mutes and blacklist to json file\n    def saveMutes(self):\n        helper.atomicWrite(\"%s/mutes.json\" % config.data_dir, json.dumps({\"mutes\": mutes, \"site_blacklist\": site_blacklist}, indent=2, sort_keys=True))\n\n\n@PluginManager.registerTo(\"SiteStorage\")\nclass SiteStoragePlugin(object):\n    def updateDbFile(self, inner_path, file=None, cur=None):\n        if file is not False:  # File deletion always allowed\n            # Find for bitcoin addresses in file path\n            matches = re.findall(\"/(1[A-Za-z0-9]{26,35})/\", inner_path)\n            # Check if any of the adresses are in the mute list\n            for auth_address in matches:\n                if auth_address in mutes:\n                    self.log.debug(\"Mute match: %s, ignoring %s\" % (auth_address, inner_path))\n                    return False\n\n        return super(SiteStoragePlugin, self).updateDbFile(inner_path, file=file, cur=cur)\n\n\n@PluginManager.registerTo(\"UiRequest\")\nclass UiRequestPlugin(object):\n    def actionWrapper(self, path, extra_headers=None):\n        match = re.match(\"/(?P<address>[A-Za-z0-9\\._-]+)(?P<inner_path>/.*|$)\", path)\n        if not match:\n            return False\n        address = match.group(\"address\")\n\n        if self.server.site_manager.get(address):  # Site already exists\n            return super(UiRequestPlugin, self).actionWrapper(path, extra_headers)\n\n        if self.server.site_manager.isDomain(address):\n            address = self.server.site_manager.resolveDomain(address)\n\n        if address in site_blacklist:\n            site = self.server.site_manager.get(config.homepage)\n            if not extra_headers:\n                extra_headers = {}\n            self.sendHeader(extra_headers=extra_headers)\n            return iter([super(UiRequestPlugin, self).renderWrapper(\n                site, path, \"uimedia/plugins/mute/blacklisted.html?address=\" + address,\n                \"Blacklisted site\", extra_headers, show_loadingscreen=False\n            )])\n        else:\n            return super(UiRequestPlugin, self).actionWrapper(path, extra_headers)\n\n    def actionUiMedia(self, path, *args, **kwargs):\n        if path.startswith(\"/uimedia/plugins/mute/\"):\n            file_path = path.replace(\"/uimedia/plugins/mute/\", \"plugins/Mute/media/\")\n            return self.actionFile(file_path)\n        else:\n            return super(UiRequestPlugin, self).actionUiMedia(path)\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "MutePlugin.py", "id": "1b7e134d82c6e1c86a8c614c7eb48683", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-3bdb6a2/plugins/Mute/MutePlugin.py", "save_time": "", "source": "", "update_at": "2018-03-14T01:21:08Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}