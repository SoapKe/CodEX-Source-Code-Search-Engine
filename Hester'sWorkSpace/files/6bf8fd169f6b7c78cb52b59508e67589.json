{"author": "tgalal", "code": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom .message_media_downloadable import DownloadableMediaMessageProtocolEntity\nfrom yowsup.common.tools import VideoTools\n\nclass VideoDownloadableMediaMessageProtocolEntity(DownloadableMediaMessageProtocolEntity):\n    '''\n    <message t=\"{{TIME_STAMP}}\" from=\"{{CONTACT_JID}}\"\n        offline=\"{{OFFLINE}}\" type=\"media\" id=\"{{MESSAGE_ID}}\" notify=\"{{NOTIFY_NAME}}\">\n        <media type=\"{{DOWNLOADABLE_MEDIA_TYPE: (image | audio | video)}}\"\n            mimetype=\"{{MIME_TYPE}}\"\n            filehash=\"{{FILE_HASH}}\"\n            url=\"{{DOWNLOAD_URL}}\"\n            ip=\"{{IP}}\"\n            size=\"{{MEDIA SIZE}}\"\n            file=\"{{FILENAME}}\"\n\n\n            encoding=\"{{ENCODING}}\"\n            height=\"{{IMAGE_HEIGHT}}\"\n            width=\"{{IMAGE_WIDTH}}\"\n\n            origin=\"forward\"\n            > {{THUMBNAIL_RAWDATA (JPEG?)}}\n        </media>\n    </message>\n    '''\n    def __init__(self,\n            mimeType, fileHash, url, ip, size, fileName,\n            abitrate, acodec, asampfmt, asampfreq, duration, encoding, fps,\n            width, height, seconds, vbitrate, vcodec, caption = None,\n            _id = None, _from = None, to = None, notify = None, timestamp = None,\n            participant = None, preview = None, offline = None, retry = None):\n\n        super(VideoDownloadableMediaMessageProtocolEntity, self).__init__(\"video\",\n            mimeType, fileHash, url, ip, size, fileName, None,\n            _id, _from, to, notify, timestamp, participant, preview, offline, retry)\n        self.setVideoProps(encoding, width, height, vbitrate, abitrate, acodec, asampfmt, asampfreq, duration, fps, seconds, vcodec, caption)\n\n    def __str__(self):\n        out  = super(VideoDownloadableMediaMessageProtocolEntity, self).__str__()\n        out += \"Audio bitrate: %s\\n\" % self.abitrate\n        out += \"Audio codec: %s\\n\" % self.acodec\n        out += \"Audio sampling fmt.: %s\\n\" % self.asampfmt\n        out += \"Audio sampling freq.: %s\\n\" % self.asampfreq\n        out += \"Duration: %s\\n\" % self.duration\n        out += \"Encoding: %s\\n\" % self.encoding\n        out += \"Fps: %s\\n\" % self.fps\n        out += \"Width: %s\\n\" % self.width\n        out += \"Height: %s\\n\" % self.height\n        out += \"Video bitrate: %s\\n\" % self.vbitrate\n        out += \"Video codec: %s\\n\" % self.vcodec\n        if self.caption is not None:\n            out += \"Caption: %s\\n\" % self.caption\n        return out\n\n    def setVideoProps(self, encoding, width, height, vbitrate = None, abitrate = None, acodec = None, asampfmt = None, asampfreq = None, duration = None, fps = None, seconds = None, vcodec = None, caption = None,):\n        self.abitrate  = abitrate\n        self.acodec    = acodec\n        self.asampfmt  = asampfmt\n        self.asampfreq = asampfreq\n        self.duration  = duration\n        self.encoding  = encoding\n        self.fps       = fps\n        self.height    = height\n        self.seconds   = seconds\n        self.vbitrate  = vbitrate\n        self.vcodec    = vcodec\n        self.width     = width\n        self.caption   = caption\n\n    def getCaption(self):\n        return self.caption\n\n    def toProtocolTreeNode(self):\n        node = super(VideoDownloadableMediaMessageProtocolEntity, self).toProtocolTreeNode()\n        mediaNode = node.getChild(\"media\")\n\n        mediaNode.setAttribute(\"abitrate\",  self.abitrate)\n        mediaNode.setAttribute(\"acodec\",    self.acodec)\n        mediaNode.setAttribute(\"asampfmt\",  self.asampfmt)\n        mediaNode.setAttribute(\"asampfreq\", self.asampfreq)\n        mediaNode.setAttribute(\"duration\",  self.duration)\n        mediaNode.setAttribute(\"encoding\",  self.encoding)\n        mediaNode.setAttribute(\"height\",    str(self.height))\n        mediaNode.setAttribute(\"width\",     str(self.width))\n        if self.abitrate is not None:\n        \tmediaNode.setAttribute(\"abitrate\",  str(self.abitrate))\n        if self.acodec is not None:\n        \tmediaNode.setAttribute(\"acodec\",    self.acodec)\n        if self.asampfmt is not None:\n        \tmediaNode.setAttribute(\"asampfmt\",  self.asampfmt)\n        if self.asampfreq is not None:\n        \tmediaNode.setAttribute(\"asampfreq\", str(self.asampfreq))\n        if self.duration is not None:\n        \tmediaNode.setAttribute(\"duration\",  str(self.duration))\n        if self.fps is not None:\n        \tmediaNode.setAttribute(\"fps\",       str(self.fps))\n        if self.seconds is not None:\n        \tmediaNode.setAttribute(\"seconds\",   str(self.seconds))\n        if self.vbitrate is not None:\n        \tmediaNode.setAttribute(\"vbitrate\",  str(self.vbitrate))\n        if self.vcodec is not None:\n        \tmediaNode.setAttribute(\"vcodec\",    self.vcodec)\n        if self.caption is not None:\n        \tmediaNode.setAttribute(\"caption\",   self.caption)\n\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = DownloadableMediaMessageProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = VideoDownloadableMediaMessageProtocolEntity\n        mediaNode = node.getChild(\"media\")\n        entity.setVideoProps(\n        \tmediaNode.getAttributeValue(\"encoding\"),\n        \tmediaNode.getAttributeValue(\"width\"),\n        \tmediaNode.getAttributeValue(\"height\"),\n        \tmediaNode.getAttributeValue(\"vbitrate\"),\n        \tmediaNode.getAttributeValue(\"abitrate\"),\n        \tmediaNode.getAttributeValue(\"acodec\"),\n        \tmediaNode.getAttributeValue(\"asampfmt\"),\n        \tmediaNode.getAttributeValue(\"asampfreq\"),\n        \tmediaNode.getAttributeValue(\"duration\"),\n        \tmediaNode.getAttributeValue(\"fps\"),\n        \tmediaNode.getAttributeValue(\"seconds\"),\n        \tmediaNode.getAttributeValue(\"vcodec\"),\n        \tmediaNode.getAttributeValue(\"caption\")\n        )\n        return entity\n\n    @staticmethod\n    def fromFilePath(path, url, ip, to, mimeType = None, caption = None):\n        preview = VideoTools.generatePreviewFromVideo(path)\n        entity = DownloadableMediaMessageProtocolEntity.fromFilePath(path, url, DownloadableMediaMessageProtocolEntity.MEDIA_TYPE_VIDEO, ip, to, mimeType, preview)\n        entity.__class__ = VideoDownloadableMediaMessageProtocolEntity\n\n        width, height, bitrate, duration = VideoTools.getVideoProperties(path)\n        assert width, \"Could not determine video properties\"\n\n        duration = int(duration)\n        entity.setVideoProps('raw', width, height, duration=duration, seconds=duration, caption=caption)\n        return entity\n", "comments": "         message    time stamp       contact jid            offline    offline    type  media  id    message id    notify    notify name              media type    downloadable media type  (image   audio   video)                mimetype    mime type                filehash    file hash                url    download url                ip    ip                size    media size                file    filename                  encoding    encoding                height    image height                width    image width                 origin  forward                  thumbnail rawdata (jpeg )             media        message          ", "content": "from yowsup.structs import ProtocolEntity, ProtocolTreeNode\nfrom .message_media_downloadable import DownloadableMediaMessageProtocolEntity\nfrom yowsup.common.tools import VideoTools\n\nclass VideoDownloadableMediaMessageProtocolEntity(DownloadableMediaMessageProtocolEntity):\n    '''\n    <message t=\"{{TIME_STAMP}}\" from=\"{{CONTACT_JID}}\"\n        offline=\"{{OFFLINE}}\" type=\"media\" id=\"{{MESSAGE_ID}}\" notify=\"{{NOTIFY_NAME}}\">\n        <media type=\"{{DOWNLOADABLE_MEDIA_TYPE: (image | audio | video)}}\"\n            mimetype=\"{{MIME_TYPE}}\"\n            filehash=\"{{FILE_HASH}}\"\n            url=\"{{DOWNLOAD_URL}}\"\n            ip=\"{{IP}}\"\n            size=\"{{MEDIA SIZE}}\"\n            file=\"{{FILENAME}}\"\n\n\n            encoding=\"{{ENCODING}}\"\n            height=\"{{IMAGE_HEIGHT}}\"\n            width=\"{{IMAGE_WIDTH}}\"\n\n            origin=\"forward\"\n            > {{THUMBNAIL_RAWDATA (JPEG?)}}\n        </media>\n    </message>\n    '''\n    def __init__(self,\n            mimeType, fileHash, url, ip, size, fileName,\n            abitrate, acodec, asampfmt, asampfreq, duration, encoding, fps,\n            width, height, seconds, vbitrate, vcodec, caption = None,\n            _id = None, _from = None, to = None, notify = None, timestamp = None,\n            participant = None, preview = None, offline = None, retry = None):\n\n        super(VideoDownloadableMediaMessageProtocolEntity, self).__init__(\"video\",\n            mimeType, fileHash, url, ip, size, fileName, None,\n            _id, _from, to, notify, timestamp, participant, preview, offline, retry)\n        self.setVideoProps(encoding, width, height, vbitrate, abitrate, acodec, asampfmt, asampfreq, duration, fps, seconds, vcodec, caption)\n\n    def __str__(self):\n        out  = super(VideoDownloadableMediaMessageProtocolEntity, self).__str__()\n        out += \"Audio bitrate: %s\\n\" % self.abitrate\n        out += \"Audio codec: %s\\n\" % self.acodec\n        out += \"Audio sampling fmt.: %s\\n\" % self.asampfmt\n        out += \"Audio sampling freq.: %s\\n\" % self.asampfreq\n        out += \"Duration: %s\\n\" % self.duration\n        out += \"Encoding: %s\\n\" % self.encoding\n        out += \"Fps: %s\\n\" % self.fps\n        out += \"Width: %s\\n\" % self.width\n        out += \"Height: %s\\n\" % self.height\n        out += \"Video bitrate: %s\\n\" % self.vbitrate\n        out += \"Video codec: %s\\n\" % self.vcodec\n        if self.caption is not None:\n            out += \"Caption: %s\\n\" % self.caption\n        return out\n\n    def setVideoProps(self, encoding, width, height, vbitrate = None, abitrate = None, acodec = None, asampfmt = None, asampfreq = None, duration = None, fps = None, seconds = None, vcodec = None, caption = None,):\n        self.abitrate  = abitrate\n        self.acodec    = acodec\n        self.asampfmt  = asampfmt\n        self.asampfreq = asampfreq\n        self.duration  = duration\n        self.encoding  = encoding\n        self.fps       = fps\n        self.height    = height\n        self.seconds   = seconds\n        self.vbitrate  = vbitrate\n        self.vcodec    = vcodec\n        self.width     = width\n        self.caption   = caption\n\n    def getCaption(self):\n        return self.caption\n\n    def toProtocolTreeNode(self):\n        node = super(VideoDownloadableMediaMessageProtocolEntity, self).toProtocolTreeNode()\n        mediaNode = node.getChild(\"media\")\n\n        mediaNode.setAttribute(\"abitrate\",  self.abitrate)\n        mediaNode.setAttribute(\"acodec\",    self.acodec)\n        mediaNode.setAttribute(\"asampfmt\",  self.asampfmt)\n        mediaNode.setAttribute(\"asampfreq\", self.asampfreq)\n        mediaNode.setAttribute(\"duration\",  self.duration)\n        mediaNode.setAttribute(\"encoding\",  self.encoding)\n        mediaNode.setAttribute(\"height\",    str(self.height))\n        mediaNode.setAttribute(\"width\",     str(self.width))\n        if self.abitrate is not None:\n        \tmediaNode.setAttribute(\"abitrate\",  str(self.abitrate))\n        if self.acodec is not None:\n        \tmediaNode.setAttribute(\"acodec\",    self.acodec)\n        if self.asampfmt is not None:\n        \tmediaNode.setAttribute(\"asampfmt\",  self.asampfmt)\n        if self.asampfreq is not None:\n        \tmediaNode.setAttribute(\"asampfreq\", str(self.asampfreq))\n        if self.duration is not None:\n        \tmediaNode.setAttribute(\"duration\",  str(self.duration))\n        if self.fps is not None:\n        \tmediaNode.setAttribute(\"fps\",       str(self.fps))\n        if self.seconds is not None:\n        \tmediaNode.setAttribute(\"seconds\",   str(self.seconds))\n        if self.vbitrate is not None:\n        \tmediaNode.setAttribute(\"vbitrate\",  str(self.vbitrate))\n        if self.vcodec is not None:\n        \tmediaNode.setAttribute(\"vcodec\",    self.vcodec)\n        if self.caption is not None:\n        \tmediaNode.setAttribute(\"caption\",   self.caption)\n\n        return node\n\n    @staticmethod\n    def fromProtocolTreeNode(node):\n        entity = DownloadableMediaMessageProtocolEntity.fromProtocolTreeNode(node)\n        entity.__class__ = VideoDownloadableMediaMessageProtocolEntity\n        mediaNode = node.getChild(\"media\")\n        entity.setVideoProps(\n        \tmediaNode.getAttributeValue(\"encoding\"),\n        \tmediaNode.getAttributeValue(\"width\"),\n        \tmediaNode.getAttributeValue(\"height\"),\n        \tmediaNode.getAttributeValue(\"vbitrate\"),\n        \tmediaNode.getAttributeValue(\"abitrate\"),\n        \tmediaNode.getAttributeValue(\"acodec\"),\n        \tmediaNode.getAttributeValue(\"asampfmt\"),\n        \tmediaNode.getAttributeValue(\"asampfreq\"),\n        \tmediaNode.getAttributeValue(\"duration\"),\n        \tmediaNode.getAttributeValue(\"fps\"),\n        \tmediaNode.getAttributeValue(\"seconds\"),\n        \tmediaNode.getAttributeValue(\"vcodec\"),\n        \tmediaNode.getAttributeValue(\"caption\")\n        )\n        return entity\n\n    @staticmethod\n    def fromFilePath(path, url, ip, to, mimeType = None, caption = None):\n        preview = VideoTools.generatePreviewFromVideo(path)\n        entity = DownloadableMediaMessageProtocolEntity.fromFilePath(path, url, DownloadableMediaMessageProtocolEntity.MEDIA_TYPE_VIDEO, ip, to, mimeType, preview)\n        entity.__class__ = VideoDownloadableMediaMessageProtocolEntity\n\n        width, height, bitrate, duration = VideoTools.getVideoProperties(path)\n        assert width, \"Could not determine video properties\"\n\n        duration = int(duration)\n        entity.setVideoProps('raw', width, height, duration=duration, seconds=duration, caption=caption)\n        return entity\n", "description": "The python WhatsApp library", "file_name": "message_media_downloadable_video.py", "id": "6bf8fd169f6b7c78cb52b59508e67589", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/layers/protocol_media/protocolentities/message_media_downloadable_video.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}