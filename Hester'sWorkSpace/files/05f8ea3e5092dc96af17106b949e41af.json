{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\n\"\"\"Collection of parsers which are shared among the official models.\n\nThe parsers in this module are intended to be used as parents to all arg\nparsers in official models. For instance, one might define a new class:\n\nclass ExampleParser(argparse.ArgumentParser):\n  def __init__(self):\n    super(ExampleParser, self).__init__(parents=[\n      arg_parsers.LocationParser(data_dir=True, model_dir=True),\n      arg_parsers.DummyParser(use_synthetic_data=True),\n    ])\n\n    self.add_argument(\n      \"--application_specific_arg\", \"-asa\", type=int, default=123,\n      help=\"[default: %(default)s] This arg is application specific.\",\n      metavar=\"<ASA>\"\n    )\n\nNotes about add_argument():\n    Argparse will automatically template in default values in help messages if\n  the \"%(default)s\" string appears in the message. Using the example above:\n\n    parser = ExampleParser()\n    parser.set_defaults(application_specific_arg=3141592)\n    parser.parse_args([\"-h\"])\n\n    When the help text is generated, it will display 3141592 to the user. (Even\n  though the default was 123 when the flag was created.)\n\n\n    The metavar variable determines how the flag will appear in help text. If\n  not specified, the convention is to use name.upper(). Thus rather than:\n\n    --application_specific_arg APPLICATION_SPECIFIC_ARG, -asa APPLICATION_SPECIFIC_ARG\n\n  if metavar=\"<ASA>\" is set, the user sees:\n\n    --application_specific_arg <ASA>, -asa <ASA>\n\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport argparse\n\n\nclass BaseParser(argparse.ArgumentParser):\n  \"\"\"Parser to contain flags which will be nearly universal across models.\n\n  Args:\n    add_help: Create the \"--help\" flag. False if class instance is a parent.\n    data_dir: Create a flag for specifying the input data directory.\n    model_dir: Create a flag for specifying the model file directory.\n    train_epochs: Create a flag to specify the number of training epochs.\n    epochs_per_eval: Create a flag to specify the frequency of testing.\n    batch_size: Create a flag to specify the batch size.\n    multi_gpu: Create a flag to allow the use of all available GPUs.\n    hooks: Create a flag to specify hooks for logging.\n  \"\"\"\n\n  def __init__(self, add_help=False, data_dir=True, model_dir=True,\n               train_epochs=True, epochs_per_eval=True, batch_size=True,\n               multi_gpu=True, hooks=True):\n    super(BaseParser, self).__init__(add_help=add_help)\n\n    if data_dir:\n      self.add_argument(\n          \"--data_dir\", \"-dd\", default=\"/tmp\",\n          help=\"[default: %(default)s] The location of the input data.\",\n          metavar=\"<DD>\",\n      )\n\n    if model_dir:\n      self.add_argument(\n          \"--model_dir\", \"-md\", default=\"/tmp\",\n          help=\"[default: %(default)s] The location of the model files.\",\n          metavar=\"<MD>\",\n      )\n\n    if train_epochs:\n      self.add_argument(\n          \"--train_epochs\", \"-te\", type=int, default=1,\n          help=\"[default: %(default)s] The number of epochs used to train.\",\n          metavar=\"<TE>\"\n      )\n\n    if epochs_per_eval:\n      self.add_argument(\n          \"--epochs_per_eval\", \"-epe\", type=int, default=1,\n          help=\"[default: %(default)s] The number of training epochs to run \"\n               \"between evaluations.\",\n          metavar=\"<EPE>\"\n      )\n\n    if batch_size:\n      self.add_argument(\n          \"--batch_size\", \"-bs\", type=int, default=32,\n          help=\"[default: %(default)s] Batch size for training and evaluation.\",\n          metavar=\"<BS>\"\n      )\n\n    if multi_gpu:\n      self.add_argument(\n          \"--multi_gpu\", action=\"store_true\",\n          help=\"If set, run across all available GPUs.\"\n      )\n\n    if hooks:\n      self.add_argument(\n          \"--hooks\", \"-hk\", nargs=\"+\", default=[\"LoggingTensorHook\"],\n          help=\"[default: %(default)s] A list of strings to specify the names \"\n               \"of train hooks. \"\n               \"Example: --hooks LoggingTensorHook ExamplesPerSecondHook. \"\n               \"Allowed hook names (case-insensitive): LoggingTensorHook, \"\n               \"ProfilerHook, ExamplesPerSecondHook. \"\n               \"See official.utils.logging.hooks_helper for details.\",\n          metavar=\"<HK>\"\n      )\n\n\nclass PerformanceParser(argparse.ArgumentParser):\n  \"\"\"Default parser for specifying performance tuning arguments.\n\n  Args:\n    add_help: Create the \"--help\" flag. False if class instance is a parent.\n    num_parallel_calls: Create a flag to specify parallelism of data loading.\n    inter_op: Create a flag to allow specification of inter op threads.\n    intra_op: Create a flag to allow specification of intra op threads.\n  \"\"\"\n\n  def __init__(self, add_help=False, num_parallel_calls=True, inter_op=True,\n               intra_op=True, use_synthetic_data=True, max_train_steps=True):\n    super(PerformanceParser, self).__init__(add_help=add_help)\n\n    if num_parallel_calls:\n      self.add_argument(\n          \"--num_parallel_calls\", \"-npc\",\n          type=int, default=5,\n          help=\"[default: %(default)s] The number of records that are \"\n               \"processed in parallel  during input processing. This can be \"\n               \"optimized per data set but for generally homogeneous data \"\n               \"sets, should be approximately the number of available CPU \"\n               \"cores.\",\n          metavar=\"<NPC>\"\n      )\n\n    if inter_op:\n      self.add_argument(\n          \"--inter_op_parallelism_threads\", \"-inter\",\n          type=int, default=0,\n          help=\"[default: %(default)s Number of inter_op_parallelism_threads \"\n               \"to use for CPU. See TensorFlow config.proto for details.\",\n          metavar=\"<INTER>\"\n      )\n\n    if intra_op:\n      self.add_argument(\n          \"--intra_op_parallelism_threads\", \"-intra\",\n          type=int, default=0,\n          help=\"[default: %(default)s Number of intra_op_parallelism_threads \"\n               \"to use for CPU. See TensorFlow config.proto for details.\",\n          metavar=\"<INTRA>\"\n      )\n\n    if use_synthetic_data:\n      self.add_argument(\n          \"--use_synthetic_data\", \"-synth\",\n          action=\"store_true\",\n          help=\"If set, use fake data (zeroes) instead of a real dataset. \"\n               \"This mode is useful for performance debugging, as it removes \"\n               \"input processing steps, but will not learn anything.\"\n      )\n\n    if max_train_steps:\n      self.add_argument(\n          \"--max_train_steps\", \"-mts\", type=int, default=None,\n          help=\"[default: %(default)s] The model will stop training if the \"\n               \"global_step reaches this value. If not set, training will run\"\n               \"until the specified number of epochs have run as usual. It is\"\n               \"generally recommended to set --train_epochs=1 when using this\"\n               \"flag.\",\n          metavar=\"<MTS>\"\n      )\n\n\nclass ImageModelParser(argparse.ArgumentParser):\n  \"\"\"Default parser for specification image specific behavior.\n\n  Args:\n    add_help: Create the \"--help\" flag. False if class instance is a parent.\n    data_format: Create a flag to specify image axis convention.\n  \"\"\"\n\n  def __init__(self, add_help=False, data_format=True):\n    super(ImageModelParser, self).__init__(add_help=add_help)\n    if data_format:\n      self.add_argument(\n          \"--data_format\", \"-df\",\n          help=\"A flag to override the data format used in the model. \"\n               \"channels_first provides a performance boost on GPU but is not \"\n               \"always compatible with CPU. If left unspecified, the data \"\n               \"format will be chosen automatically based on whether TensorFlow\"\n               \"was built for CPU or GPU.\",\n          metavar=\"<CF>\"\n      )\n", "comments": "   collection parsers shared among official models   the parsers module intended used parents arg parsers official models  for instance  one might define new class   class exampleparser(argparse argumentparser)    def   init  (self)      super(exampleparser  self)   init  (parents         arg parsers locationparser(data dir true  model dir true)        arg parsers dummyparser(use synthetic data true)       )      self add argument(          application specific arg     asa   type int  default 123        help   default   (default)s  this arg application specific          metavar   asa       )  notes add argument()      argparse automatically template default values help messages     (default)s  string appears message  using example       parser   exampleparser()     parser set defaults(application specific arg 3141592)     parser parse args(   h  )      when help text generated  display 3141592 user  (even   though default 123 flag created )       the metavar variable determines flag appear help text  if   specified  convention use name upper()  thus rather         application specific arg application specific arg   asa application specific arg    metavar   asa   set  user sees         application specific arg  asa    asa  asa          future   import absolute import   future   import division   future   import print function   import argparse   class baseparser(argparse argumentparser)       parser contain flags nearly universal across models     args      add help  create    help  flag  false class instance parent      data dir  create flag specifying input data directory      model dir  create flag specifying model file directory      train epochs  create flag specify number training epochs      epochs per eval  create flag specify frequency testing      batch size  create flag specify batch size      multi gpu  create flag allow use available gpus      hooks  create flag specify hooks logging           def   init  (self  add help false  data dir true  model dir true                 train epochs true  epochs per eval true  batch size true                 multi gpu true  hooks true)      super(baseparser  self)   init  (add help add help)      data dir        self add argument(              data dir     dd   default   tmp             help   default   (default)s  the location input data              metavar   dd          )      model dir        self add argument(              model dir     md   default   tmp             help   default   (default)s  the location model files              metavar   md          )      train epochs        self add argument(              train epochs     te   type int  default 1            help   default   (default)s  the number epochs used train              metavar   te         )      epochs per eval        self add argument(              epochs per eval     epe   type int  default 1            help   default   (default)s  the number training epochs run                   evaluations              metavar   epe         )      batch size        self add argument(              batch size     bs   type int  default 32            help   default   (default)s  batch size training evaluation              metavar   bs         )      multi gpu        self add argument(              multi gpu   action  store true             help  if set  run across available gpus         )      hooks        self add argument(              hooks     hk   nargs      default   loggingtensorhook              help   default   (default)s  a list strings specify names                   train hooks                    example    hooks loggingtensorhook examplespersecondhook                    allowed hook names (case insensitive)  loggingtensorhook                    profilerhook  examplespersecondhook                    see official utils logging hooks helper details              metavar   hk         )   class performanceparser(argparse argumentparser)       default parser specifying performance tuning arguments     args      add help  create    help  flag  false class instance parent      num parallel calls  create flag specify parallelism data loading      inter op  create flag allow specification inter op threads      intra op  create flag allow specification intra op threads           def   init  (self  add help false  num parallel calls true  inter op true                 intra op true  use synthetic data true  max train steps true)      super(performanceparser  self)   init  (add help add help)      num parallel calls        self add argument(              num parallel calls     npc             type int  default 5            help   default   (default)s  the number records                   processed parallel  input processing  this                   optimized per data set generally homogeneous data                   sets  approximately number available cpu                   cores              metavar   npc         )      inter op        self add argument(              inter op parallelism threads     inter             type int  default 0            help   default   (default)s number inter op parallelism threads                   use cpu  see tensorflow config proto details              metavar   inter         )      intra op        self add argument(              intra op parallelism threads     intra             type int  default 0            help   default   (default)s number intra op parallelism threads                   use cpu  see tensorflow config proto details              metavar   intra         )      use synthetic data        self add argument(              use synthetic data     synth             action  store true             help  if set  use fake data (zeroes) instead real dataset                    this mode useful performance debugging  removes                   input processing steps  learn anything         )      max train steps        self add argument(              max train steps     mts   type int  default none            help   default   (default)s  the model stop training                   global step reaches value  if set  training run                  specified number epochs run usual  it                  generally recommended set   train epochs 1 using                  flag              metavar   mts         )   class imagemodelparser(argparse argumentparser)       default parser specification image specific behavior     args      add help  create    help  flag  false class instance parent      data format  create flag specify image axis convention           copyright 2017 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                    ", "content": "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\n\"\"\"Collection of parsers which are shared among the official models.\n\nThe parsers in this module are intended to be used as parents to all arg\nparsers in official models. For instance, one might define a new class:\n\nclass ExampleParser(argparse.ArgumentParser):\n  def __init__(self):\n    super(ExampleParser, self).__init__(parents=[\n      arg_parsers.LocationParser(data_dir=True, model_dir=True),\n      arg_parsers.DummyParser(use_synthetic_data=True),\n    ])\n\n    self.add_argument(\n      \"--application_specific_arg\", \"-asa\", type=int, default=123,\n      help=\"[default: %(default)s] This arg is application specific.\",\n      metavar=\"<ASA>\"\n    )\n\nNotes about add_argument():\n    Argparse will automatically template in default values in help messages if\n  the \"%(default)s\" string appears in the message. Using the example above:\n\n    parser = ExampleParser()\n    parser.set_defaults(application_specific_arg=3141592)\n    parser.parse_args([\"-h\"])\n\n    When the help text is generated, it will display 3141592 to the user. (Even\n  though the default was 123 when the flag was created.)\n\n\n    The metavar variable determines how the flag will appear in help text. If\n  not specified, the convention is to use name.upper(). Thus rather than:\n\n    --application_specific_arg APPLICATION_SPECIFIC_ARG, -asa APPLICATION_SPECIFIC_ARG\n\n  if metavar=\"<ASA>\" is set, the user sees:\n\n    --application_specific_arg <ASA>, -asa <ASA>\n\n\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\n\nimport argparse\n\n\nclass BaseParser(argparse.ArgumentParser):\n  \"\"\"Parser to contain flags which will be nearly universal across models.\n\n  Args:\n    add_help: Create the \"--help\" flag. False if class instance is a parent.\n    data_dir: Create a flag for specifying the input data directory.\n    model_dir: Create a flag for specifying the model file directory.\n    train_epochs: Create a flag to specify the number of training epochs.\n    epochs_per_eval: Create a flag to specify the frequency of testing.\n    batch_size: Create a flag to specify the batch size.\n    multi_gpu: Create a flag to allow the use of all available GPUs.\n    hooks: Create a flag to specify hooks for logging.\n  \"\"\"\n\n  def __init__(self, add_help=False, data_dir=True, model_dir=True,\n               train_epochs=True, epochs_per_eval=True, batch_size=True,\n               multi_gpu=True, hooks=True):\n    super(BaseParser, self).__init__(add_help=add_help)\n\n    if data_dir:\n      self.add_argument(\n          \"--data_dir\", \"-dd\", default=\"/tmp\",\n          help=\"[default: %(default)s] The location of the input data.\",\n          metavar=\"<DD>\",\n      )\n\n    if model_dir:\n      self.add_argument(\n          \"--model_dir\", \"-md\", default=\"/tmp\",\n          help=\"[default: %(default)s] The location of the model files.\",\n          metavar=\"<MD>\",\n      )\n\n    if train_epochs:\n      self.add_argument(\n          \"--train_epochs\", \"-te\", type=int, default=1,\n          help=\"[default: %(default)s] The number of epochs used to train.\",\n          metavar=\"<TE>\"\n      )\n\n    if epochs_per_eval:\n      self.add_argument(\n          \"--epochs_per_eval\", \"-epe\", type=int, default=1,\n          help=\"[default: %(default)s] The number of training epochs to run \"\n               \"between evaluations.\",\n          metavar=\"<EPE>\"\n      )\n\n    if batch_size:\n      self.add_argument(\n          \"--batch_size\", \"-bs\", type=int, default=32,\n          help=\"[default: %(default)s] Batch size for training and evaluation.\",\n          metavar=\"<BS>\"\n      )\n\n    if multi_gpu:\n      self.add_argument(\n          \"--multi_gpu\", action=\"store_true\",\n          help=\"If set, run across all available GPUs.\"\n      )\n\n    if hooks:\n      self.add_argument(\n          \"--hooks\", \"-hk\", nargs=\"+\", default=[\"LoggingTensorHook\"],\n          help=\"[default: %(default)s] A list of strings to specify the names \"\n               \"of train hooks. \"\n               \"Example: --hooks LoggingTensorHook ExamplesPerSecondHook. \"\n               \"Allowed hook names (case-insensitive): LoggingTensorHook, \"\n               \"ProfilerHook, ExamplesPerSecondHook. \"\n               \"See official.utils.logging.hooks_helper for details.\",\n          metavar=\"<HK>\"\n      )\n\n\nclass PerformanceParser(argparse.ArgumentParser):\n  \"\"\"Default parser for specifying performance tuning arguments.\n\n  Args:\n    add_help: Create the \"--help\" flag. False if class instance is a parent.\n    num_parallel_calls: Create a flag to specify parallelism of data loading.\n    inter_op: Create a flag to allow specification of inter op threads.\n    intra_op: Create a flag to allow specification of intra op threads.\n  \"\"\"\n\n  def __init__(self, add_help=False, num_parallel_calls=True, inter_op=True,\n               intra_op=True, use_synthetic_data=True, max_train_steps=True):\n    super(PerformanceParser, self).__init__(add_help=add_help)\n\n    if num_parallel_calls:\n      self.add_argument(\n          \"--num_parallel_calls\", \"-npc\",\n          type=int, default=5,\n          help=\"[default: %(default)s] The number of records that are \"\n               \"processed in parallel  during input processing. This can be \"\n               \"optimized per data set but for generally homogeneous data \"\n               \"sets, should be approximately the number of available CPU \"\n               \"cores.\",\n          metavar=\"<NPC>\"\n      )\n\n    if inter_op:\n      self.add_argument(\n          \"--inter_op_parallelism_threads\", \"-inter\",\n          type=int, default=0,\n          help=\"[default: %(default)s Number of inter_op_parallelism_threads \"\n               \"to use for CPU. See TensorFlow config.proto for details.\",\n          metavar=\"<INTER>\"\n      )\n\n    if intra_op:\n      self.add_argument(\n          \"--intra_op_parallelism_threads\", \"-intra\",\n          type=int, default=0,\n          help=\"[default: %(default)s Number of intra_op_parallelism_threads \"\n               \"to use for CPU. See TensorFlow config.proto for details.\",\n          metavar=\"<INTRA>\"\n      )\n\n    if use_synthetic_data:\n      self.add_argument(\n          \"--use_synthetic_data\", \"-synth\",\n          action=\"store_true\",\n          help=\"If set, use fake data (zeroes) instead of a real dataset. \"\n               \"This mode is useful for performance debugging, as it removes \"\n               \"input processing steps, but will not learn anything.\"\n      )\n\n    if max_train_steps:\n      self.add_argument(\n          \"--max_train_steps\", \"-mts\", type=int, default=None,\n          help=\"[default: %(default)s] The model will stop training if the \"\n               \"global_step reaches this value. If not set, training will run\"\n               \"until the specified number of epochs have run as usual. It is\"\n               \"generally recommended to set --train_epochs=1 when using this\"\n               \"flag.\",\n          metavar=\"<MTS>\"\n      )\n\n\nclass ImageModelParser(argparse.ArgumentParser):\n  \"\"\"Default parser for specification image specific behavior.\n\n  Args:\n    add_help: Create the \"--help\" flag. False if class instance is a parent.\n    data_format: Create a flag to specify image axis convention.\n  \"\"\"\n\n  def __init__(self, add_help=False, data_format=True):\n    super(ImageModelParser, self).__init__(add_help=add_help)\n    if data_format:\n      self.add_argument(\n          \"--data_format\", \"-df\",\n          help=\"A flag to override the data format used in the model. \"\n               \"channels_first provides a performance boost on GPU but is not \"\n               \"always compatible with CPU. If left unspecified, the data \"\n               \"format will be chosen automatically based on whether TensorFlow\"\n               \"was built for CPU or GPU.\",\n          metavar=\"<CF>\"\n      )\n", "description": "Models and examples built with TensorFlow", "file_name": "parsers.py", "id": "05f8ea3e5092dc96af17106b949e41af", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/official/utils/arg_parsers/parsers.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}