{"author": "deepfakes", "code": "import cv2\nimport sys\nfrom os.path import basename, exists\n\nfrom pathlib import Path\nfrom scandir import scandir\n\nimage_extensions = [\".jpg\", \".jpeg\", \".png\", \".tif\", \".tiff\"]\n\ndef get_folder(path):\n    output_dir = Path(path)\n    output_dir.mkdir(parents=True, exist_ok=True)\n    return output_dir\n\ndef get_image_paths(directory, exclude=[], debug=False):\n    exclude_names = [basename(Path(x).stem[:-1] + Path(x).suffix) for x in exclude]\n    dir_contents = []\n\n    if not exists(directory):\n        directory = get_folder(directory).path\n\n    dir_scanned = list(scandir(directory))\n    for x in dir_scanned:\n        if any([x.name.lower().endswith(ext) for ext in image_extensions]):\n            if x.name in exclude_names:\n                if debug:\n                    print(\"Already processed %s\" % x.name)\n                continue\n            else:\n                dir_contents.append(x.path)\n\n    return dir_contents\n\ndef rotate_image(image, angle):\n    \n    if angle < 0: angle = sum((360, angle))\n    if angle == 90:\n        image = cv2.flip(cv2.transpose(image),flipCode=1)\n    elif angle == 180:\n        image = cv2.flip(image,flipCode=-1)\n    elif angle == 270:\n        image = cv2.flip(cv2.transpose(image),flipCode=0)\n    else:\n        print('Unsupported image rotation angle: {}. Image unmodified'.format(angle))\n    return image\n\n\nimport threading\nimport queue as Queue\nclass BackgroundGenerator(threading.Thread):\n    def __init__(self, generator, prefetch=1): \n        threading.Thread.__init__(self)\n        self.queue = Queue.Queue(prefetch)\n        self.generator = generator\n        self.daemon = True\n        self.start()\n\n    def run(self):\n        \n        \n        for item in self.generator:\n            self.queue.put(item)\n        self.queue.put(None)\n\n    def iterator(self):\n        while True:\n            next_item = self.queue.get()\n            if next_item is None:\n                break\n            yield next_item\n", "comments": "    rotates image 90  180 270 degrees  positive clockwise  negative          counterclockwise        from  https   stackoverflow com questions 7323664 python generator pre fetch   see prefetch count flawed    put queue size reached  note  put blocks put called queue already reached max size       makes 2 prefetched items  one queue  one waiting insertion  ", "content": "import cv2\nimport sys\nfrom os.path import basename, exists\n\nfrom pathlib import Path\nfrom scandir import scandir\n\nimage_extensions = [\".jpg\", \".jpeg\", \".png\", \".tif\", \".tiff\"]\n\ndef get_folder(path):\n    output_dir = Path(path)\n    output_dir.mkdir(parents=True, exist_ok=True)\n    return output_dir\n\ndef get_image_paths(directory, exclude=[], debug=False):\n    exclude_names = [basename(Path(x).stem[:-1] + Path(x).suffix) for x in exclude]\n    dir_contents = []\n\n    if not exists(directory):\n        directory = get_folder(directory).path\n\n    dir_scanned = list(scandir(directory))\n    for x in dir_scanned:\n        if any([x.name.lower().endswith(ext) for ext in image_extensions]):\n            if x.name in exclude_names:\n                if debug:\n                    print(\"Already processed %s\" % x.name)\n                continue\n            else:\n                dir_contents.append(x.path)\n\n    return dir_contents\n\ndef rotate_image(image, angle):\n    ''' Rotates an image by 90, 180 or 270 degrees. Positive for clockwise, negative for \n        counterclockwise '''\n    if angle < 0: angle = sum((360, angle))\n    if angle == 90:\n        image = cv2.flip(cv2.transpose(image),flipCode=1)\n    elif angle == 180:\n        image = cv2.flip(image,flipCode=-1)\n    elif angle == 270:\n        image = cv2.flip(cv2.transpose(image),flipCode=0)\n    else:\n        print('Unsupported image rotation angle: {}. Image unmodified'.format(angle))\n    return image\n\n# From: https://stackoverflow.com/questions/7323664/python-generator-pre-fetch\nimport threading\nimport queue as Queue\nclass BackgroundGenerator(threading.Thread):\n    def __init__(self, generator, prefetch=1): #See below why prefetch count is flawed\n        threading.Thread.__init__(self)\n        self.queue = Queue.Queue(prefetch)\n        self.generator = generator\n        self.daemon = True\n        self.start()\n\n    def run(self):\n        # Put until queue size is reached. Note: put blocks only if put is called while queue has already reached max size\n        # => this makes 2 prefetched items! One in the queue, one waiting for insertion!\n        for item in self.generator:\n            self.queue.put(item)\n        self.queue.put(None)\n\n    def iterator(self):\n        while True:\n            next_item = self.queue.get()\n            if next_item is None:\n                break\n            yield next_item\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "utils.py", "id": "d4edecb372137716a9c5434a2b222712", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/lib/utils.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}