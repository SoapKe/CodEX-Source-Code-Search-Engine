{"author": "rq", "code": "# -*- coding: utf-8 -*-\nfrom __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport os\nimport time\n\nfrom rq import Connection, Queue\n\nfrom fib import slow_fib\n\n\ndef main():\n    \n    fib_range = range(20, 34)\n\n    \n    async_results = {}\n    q = Queue()\n    for x in fib_range:\n        async_results[x] = q.enqueue(slow_fib, x)\n\n    start_time = time.time()\n    done = False\n    while not done:\n        os.system('clear')\n        print('Asynchronously: (now = %.2f)' % (time.time() - start_time,))\n        done = True\n        for x in fib_range:\n            result = async_results[x].return_value\n            if result is None:\n                done = False\n                result = '(calculating)'\n            print('fib(%d) = %s' % (x, result))\n        print('')\n        print('To start the actual in the background, run a worker:')\n        print('    python examples/run_worker.py')\n        time.sleep(0.2)\n\n    print('Done')\n\n\nif __name__ == '__main__':\n    \n    with Connection():\n        main()\n", "comments": "      coding  utf 8        range fibonacci numbers compute    kick tasks asynchronously    tell rq redis connection use ", "content": "# -*- coding: utf-8 -*-\nfrom __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport os\nimport time\n\nfrom rq import Connection, Queue\n\nfrom fib import slow_fib\n\n\ndef main():\n    # Range of Fibonacci numbers to compute\n    fib_range = range(20, 34)\n\n    # Kick off the tasks asynchronously\n    async_results = {}\n    q = Queue()\n    for x in fib_range:\n        async_results[x] = q.enqueue(slow_fib, x)\n\n    start_time = time.time()\n    done = False\n    while not done:\n        os.system('clear')\n        print('Asynchronously: (now = %.2f)' % (time.time() - start_time,))\n        done = True\n        for x in fib_range:\n            result = async_results[x].return_value\n            if result is None:\n                done = False\n                result = '(calculating)'\n            print('fib(%d) = %s' % (x, result))\n        print('')\n        print('To start the actual in the background, run a worker:')\n        print('    python examples/run_worker.py')\n        time.sleep(0.2)\n\n    print('Done')\n\n\nif __name__ == '__main__':\n    # Tell RQ what Redis connection to use\n    with Connection():\n        main()\n", "description": "Simple job queues for Python", "file_name": "run_example.py", "id": "40559e85941b5afc31aec70735287d11", "language": "Python", "project_name": "rq", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rq-rq/rq-rq-936f2f1/examples/run_example.py", "save_time": "", "source": "", "update_at": "2018-03-18T06:13:26Z", "url": "https://github.com/rq/rq", "wiki": false}