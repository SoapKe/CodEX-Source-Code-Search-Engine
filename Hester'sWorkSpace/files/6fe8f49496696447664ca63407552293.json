{"author": "ansible", "code": "\n\n (C) 2015, Chris Houseknecht <chouse@ansible.com>\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport getpass\nimport json\n\nfrom ansible.errors import AnsibleError, AnsibleOptionsError\nfrom ansible.module_utils.six.moves import input\nfrom ansible.module_utils.six.moves.urllib.parse import quote as urlquote, urlparse\nfrom ansible.module_utils.six.moves.urllib.error import HTTPError\nfrom ansible.module_utils.urls import open_url\nfrom ansible.utils.color import stringc\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n\nclass GalaxyLogin(object):\n    ''' Class to handle authenticating user with Galaxy API prior to performing CUD operations '''\n\n    GITHUB_AUTH = 'https://api.github.com/authorizations'\n\n    def __init__(self, galaxy, github_token=None):\n        self.galaxy = galaxy\n        self.github_username = None\n        self.github_password = None\n\n        if github_token is None:\n            self.get_credentials()\n\n    def get_credentials(self):\n        display.display(u'\\n\\n' + \"We need your \" + stringc(\"Github login\", 'bright cyan') +\n                        \" to identify you.\", screen_only=True)\n        display.display(\"This information will \" + stringc(\"not be sent to Galaxy\", 'bright cyan') +\n                        \", only to \" + stringc(\"api.github.com.\", \"yellow\"), screen_only=True)\n        display.display(\"The password will not be displayed.\" + u'\\n\\n', screen_only=True)\n        display.display(\"Use \" + stringc(\"--github-token\", 'yellow') +\n                        \" if you do not want to enter your password.\" + u'\\n\\n', screen_only=True)\n\n        try:\n            self.github_username = input(\"Github Username: \")\n        except:\n            pass\n\n        try:\n            self.github_password = getpass.getpass(\"Password for %s: \" % self.github_username)\n        except:\n            pass\n\n        if not self.github_username or not self.github_password:\n            raise AnsibleError(\"Invalid Github credentials. Username and password are required.\")\n\n    def remove_github_token(self):\n        '''\n        If for some reason an ansible-galaxy token was left from a prior login, remove it. We cannot\n        retrieve the token after creation, so we are forced to create a new one.\n        '''\n        try:\n            tokens = json.load(open_url(self.GITHUB_AUTH, url_username=self.github_username,\n                               url_password=self.github_password, force_basic_auth=True,))\n        except HTTPError as e:\n            res = json.load(e)\n            raise AnsibleError(res['message'])\n\n        for token in tokens:\n            if token['note'] == 'ansible-galaxy login':\n                display.vvvvv('removing token: %s' % token['token_last_eight'])\n                try:\n                    open_url('https://api.github.com/authorizations/%d' % token['id'], url_username=self.github_username,\n                             url_password=self.github_password, method='DELETE', force_basic_auth=True)\n                except HTTPError as e:\n                    res = json.load(e)\n                    raise AnsibleError(res['message'])\n\n    def create_github_token(self):\n        '''\n        Create a personal authorization token with a note of 'ansible-galaxy login'\n        '''\n        self.remove_github_token()\n        args = json.dumps({\"scopes\": [\"public_repo\"], \"note\": \"ansible-galaxy login\"})\n        try:\n            data = json.load(open_url(self.GITHUB_AUTH, url_username=self.github_username,\n                             url_password=self.github_password, force_basic_auth=True, data=args))\n        except HTTPError as e:\n            res = json.load(e)\n            raise AnsibleError(res['message'])\n        return data['token']\n", "comments": "    class handle authenticating user galaxy api prior performing cud operations          github auth    https   api github com authorizations       def   init  (self  galaxy  github token none)          self galaxy   galaxy         self github username   none         self github password   none          github token none              self get credentials()      def get credentials(self)          display display(u  n n     we need     stringc( github login    bright cyan )                             identify    screen true)         display display( this information     stringc( sent galaxy    bright cyan )                                  stringc( api github com     yellow )  screen true)         display display( the password displayed     u  n n   screen true)         display display( use     stringc(   github token    yellow )                             want enter password     u  n n   screen true)          try              self github username   input( github username   )         except              pass          try              self github password   getpass getpass( password       self github username)         except              pass          self github username self github password              raise ansibleerror( invalid github credentials  username password required  )      def remove github token(self)                      if reason ansible galaxy token left prior login  remove  we cannot         retrieve token creation  forced create new one                      try              tokens   json load(open url(self github auth  url username self github username                                 url password self github password  force basic auth true ))         except httperror e              res   json load(e)             raise ansibleerror(res  message  )          token tokens              token  note       ansible galaxy login                   display vvvvv( removing token      token  token last eight  )                 try                      open url( https   api github com authorizations     token  id    url username self github username                               url password self github password  method  delete   force basic auth true)                 except httperror e                      res   json load(e)                     raise ansibleerror(res  message  )      def create github token(self)                      create personal authorization token note  ansible galaxy login                                                                                              (c) 2015  chris houseknecht  chouse ansible com        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses                                                                                 ", "content": "########################################################################\n#\n# (C) 2015, Chris Houseknecht <chouse@ansible.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n#\n########################################################################\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport getpass\nimport json\n\nfrom ansible.errors import AnsibleError, AnsibleOptionsError\nfrom ansible.module_utils.six.moves import input\nfrom ansible.module_utils.six.moves.urllib.parse import quote as urlquote, urlparse\nfrom ansible.module_utils.six.moves.urllib.error import HTTPError\nfrom ansible.module_utils.urls import open_url\nfrom ansible.utils.color import stringc\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n\nclass GalaxyLogin(object):\n    ''' Class to handle authenticating user with Galaxy API prior to performing CUD operations '''\n\n    GITHUB_AUTH = 'https://api.github.com/authorizations'\n\n    def __init__(self, galaxy, github_token=None):\n        self.galaxy = galaxy\n        self.github_username = None\n        self.github_password = None\n\n        if github_token is None:\n            self.get_credentials()\n\n    def get_credentials(self):\n        display.display(u'\\n\\n' + \"We need your \" + stringc(\"Github login\", 'bright cyan') +\n                        \" to identify you.\", screen_only=True)\n        display.display(\"This information will \" + stringc(\"not be sent to Galaxy\", 'bright cyan') +\n                        \", only to \" + stringc(\"api.github.com.\", \"yellow\"), screen_only=True)\n        display.display(\"The password will not be displayed.\" + u'\\n\\n', screen_only=True)\n        display.display(\"Use \" + stringc(\"--github-token\", 'yellow') +\n                        \" if you do not want to enter your password.\" + u'\\n\\n', screen_only=True)\n\n        try:\n            self.github_username = input(\"Github Username: \")\n        except:\n            pass\n\n        try:\n            self.github_password = getpass.getpass(\"Password for %s: \" % self.github_username)\n        except:\n            pass\n\n        if not self.github_username or not self.github_password:\n            raise AnsibleError(\"Invalid Github credentials. Username and password are required.\")\n\n    def remove_github_token(self):\n        '''\n        If for some reason an ansible-galaxy token was left from a prior login, remove it. We cannot\n        retrieve the token after creation, so we are forced to create a new one.\n        '''\n        try:\n            tokens = json.load(open_url(self.GITHUB_AUTH, url_username=self.github_username,\n                               url_password=self.github_password, force_basic_auth=True,))\n        except HTTPError as e:\n            res = json.load(e)\n            raise AnsibleError(res['message'])\n\n        for token in tokens:\n            if token['note'] == 'ansible-galaxy login':\n                display.vvvvv('removing token: %s' % token['token_last_eight'])\n                try:\n                    open_url('https://api.github.com/authorizations/%d' % token['id'], url_username=self.github_username,\n                             url_password=self.github_password, method='DELETE', force_basic_auth=True)\n                except HTTPError as e:\n                    res = json.load(e)\n                    raise AnsibleError(res['message'])\n\n    def create_github_token(self):\n        '''\n        Create a personal authorization token with a note of 'ansible-galaxy login'\n        '''\n        self.remove_github_token()\n        args = json.dumps({\"scopes\": [\"public_repo\"], \"note\": \"ansible-galaxy login\"})\n        try:\n            data = json.load(open_url(self.GITHUB_AUTH, url_username=self.github_username,\n                             url_password=self.github_password, force_basic_auth=True, data=args))\n        except HTTPError as e:\n            res = json.load(e)\n            raise AnsibleError(res['message'])\n        return data['token']\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "login.py", "id": "6fe8f49496696447664ca63407552293", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/galaxy/login.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}