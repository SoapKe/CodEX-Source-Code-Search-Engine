{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass Go90IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?go90\\.com/videos/(?P<id>[0-9a-zA-Z]+)'\n    _TEST = {\n        'url': 'https://www.go90.com/videos/84BUqjLpf9D',\n        'md5': 'efa7670dbbbf21a7b07b360652b24a32',\n        'info_dict': {\n            'id': '84BUqjLpf9D',\n            'ext': 'mp4',\n            'title': 'Daily VICE - Inside The Utah Coalition Against Pornography Convention',\n            'description': 'VICE\\'s Karley Sciortino meets with activists who discuss the state\\'s strong anti-porn stance. Then, VICE Sports explains NFL contracts.',\n            'timestamp': 1491868800,\n            'upload_date': '20170411',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'https://www.go90.com/api/view/items/' + video_id,\n            video_id, headers={\n                'Content-Type': 'application/json; charset=utf-8',\n            }, data=b'{\"client\":\"web\",\"device_type\":\"pc\"}')\n        main_video_asset = video_data['main_video_asset']\n\n        episode_number = int_or_none(video_data.get('episode_number'))\n        series = None\n        season = None\n        season_id = None\n        season_number = None\n        for metadata in video_data.get('__children', {}).get('Item', {}).values():\n            if metadata.get('type') == 'show':\n                series = metadata.get('title')\n            elif metadata.get('type') == 'season':\n                season = metadata.get('title')\n                season_id = metadata.get('id')\n                season_number = int_or_none(metadata.get('season_number'))\n\n        title = episode = video_data.get('title') or series\n        if series and series != title:\n            title = '%s - %s' % (series, title)\n\n        thumbnails = []\n        formats = []\n        subtitles = {}\n        for asset in video_data.get('assets'):\n            if asset.get('id') == main_video_asset:\n                for source in asset.get('sources', []):\n                    source_location = source.get('location')\n                    if not source_location:\n                        continue\n                    source_type = source.get('type')\n                    if source_type == 'hls':\n                        m3u8_formats = self._extract_m3u8_formats(\n                            source_location, video_id, 'mp4',\n                            'm3u8_native', m3u8_id='hls', fatal=False)\n                        for f in m3u8_formats:\n                            mobj = re.search(r'/hls-(\\d+)-(\\d+)K', f['url'])\n                            if mobj:\n                                height, tbr = mobj.groups()\n                                height = int_or_none(height)\n                                f.update({\n                                    'height': f.get('height') or height,\n                                    'width': f.get('width') or int_or_none(height / 9.0 * 16.0 if height else None),\n                                    'tbr': f.get('tbr') or int_or_none(tbr),\n                                })\n                        formats.extend(m3u8_formats)\n                    elif source_type == 'dash':\n                        formats.extend(self._extract_mpd_formats(\n                            source_location, video_id, mpd_id='dash', fatal=False))\n                    else:\n                        formats.append({\n                            'format_id': source.get('name'),\n                            'url': source_location,\n                            'width': int_or_none(source.get('width')),\n                            'height': int_or_none(source.get('height')),\n                            'tbr': int_or_none(source.get('bitrate')),\n                        })\n\n                for caption in asset.get('caption_metadata', []):\n                    caption_url = caption.get('source_url')\n                    if not caption_url:\n                        continue\n                    subtitles.setdefault(caption.get('language', 'en'), []).append({\n                        'url': caption_url,\n                        'ext': determine_ext(caption_url, 'vtt'),\n                    })\n            elif asset.get('type') == 'image':\n                asset_location = asset.get('location')\n                if not asset_location:\n                    continue\n                thumbnails.append({\n                    'url': asset_location,\n                    'width': int_or_none(asset.get('width')),\n                    'height': int_or_none(asset.get('height')),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnails': thumbnails,\n            'description': video_data.get('short_description'),\n            'like_count': int_or_none(video_data.get('like_count')),\n            'timestamp': parse_iso8601(video_data.get('released_at')),\n            'series': series,\n            'episode': episode,\n            'season': season,\n            'season_id': season_id,\n            'season_number': season_number,\n            'episode_number': episode_number,\n            'subtitles': subtitles,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    determine_ext,\n    int_or_none,\n    parse_iso8601,\n)\n\n\nclass Go90IE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?go90\\.com/videos/(?P<id>[0-9a-zA-Z]+)'\n    _TEST = {\n        'url': 'https://www.go90.com/videos/84BUqjLpf9D',\n        'md5': 'efa7670dbbbf21a7b07b360652b24a32',\n        'info_dict': {\n            'id': '84BUqjLpf9D',\n            'ext': 'mp4',\n            'title': 'Daily VICE - Inside The Utah Coalition Against Pornography Convention',\n            'description': 'VICE\\'s Karley Sciortino meets with activists who discuss the state\\'s strong anti-porn stance. Then, VICE Sports explains NFL contracts.',\n            'timestamp': 1491868800,\n            'upload_date': '20170411',\n        }\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        video_data = self._download_json(\n            'https://www.go90.com/api/view/items/' + video_id,\n            video_id, headers={\n                'Content-Type': 'application/json; charset=utf-8',\n            }, data=b'{\"client\":\"web\",\"device_type\":\"pc\"}')\n        main_video_asset = video_data['main_video_asset']\n\n        episode_number = int_or_none(video_data.get('episode_number'))\n        series = None\n        season = None\n        season_id = None\n        season_number = None\n        for metadata in video_data.get('__children', {}).get('Item', {}).values():\n            if metadata.get('type') == 'show':\n                series = metadata.get('title')\n            elif metadata.get('type') == 'season':\n                season = metadata.get('title')\n                season_id = metadata.get('id')\n                season_number = int_or_none(metadata.get('season_number'))\n\n        title = episode = video_data.get('title') or series\n        if series and series != title:\n            title = '%s - %s' % (series, title)\n\n        thumbnails = []\n        formats = []\n        subtitles = {}\n        for asset in video_data.get('assets'):\n            if asset.get('id') == main_video_asset:\n                for source in asset.get('sources', []):\n                    source_location = source.get('location')\n                    if not source_location:\n                        continue\n                    source_type = source.get('type')\n                    if source_type == 'hls':\n                        m3u8_formats = self._extract_m3u8_formats(\n                            source_location, video_id, 'mp4',\n                            'm3u8_native', m3u8_id='hls', fatal=False)\n                        for f in m3u8_formats:\n                            mobj = re.search(r'/hls-(\\d+)-(\\d+)K', f['url'])\n                            if mobj:\n                                height, tbr = mobj.groups()\n                                height = int_or_none(height)\n                                f.update({\n                                    'height': f.get('height') or height,\n                                    'width': f.get('width') or int_or_none(height / 9.0 * 16.0 if height else None),\n                                    'tbr': f.get('tbr') or int_or_none(tbr),\n                                })\n                        formats.extend(m3u8_formats)\n                    elif source_type == 'dash':\n                        formats.extend(self._extract_mpd_formats(\n                            source_location, video_id, mpd_id='dash', fatal=False))\n                    else:\n                        formats.append({\n                            'format_id': source.get('name'),\n                            'url': source_location,\n                            'width': int_or_none(source.get('width')),\n                            'height': int_or_none(source.get('height')),\n                            'tbr': int_or_none(source.get('bitrate')),\n                        })\n\n                for caption in asset.get('caption_metadata', []):\n                    caption_url = caption.get('source_url')\n                    if not caption_url:\n                        continue\n                    subtitles.setdefault(caption.get('language', 'en'), []).append({\n                        'url': caption_url,\n                        'ext': determine_ext(caption_url, 'vtt'),\n                    })\n            elif asset.get('type') == 'image':\n                asset_location = asset.get('location')\n                if not asset_location:\n                    continue\n                thumbnails.append({\n                    'url': asset_location,\n                    'width': int_or_none(asset.get('width')),\n                    'height': int_or_none(asset.get('height')),\n                })\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': formats,\n            'thumbnails': thumbnails,\n            'description': video_data.get('short_description'),\n            'like_count': int_or_none(video_data.get('like_count')),\n            'timestamp': parse_iso8601(video_data.get('released_at')),\n            'series': series,\n            'episode': episode,\n            'season': season,\n            'season_id': season_id,\n            'season_number': season_number,\n            'episode_number': episode_number,\n            'subtitles': subtitles,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "go90.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/go90.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}