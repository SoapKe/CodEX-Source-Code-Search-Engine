{"author": "reddit-archive", "code": "\n License Version 1.0. (the \"License\"); you may not use this file except in\n\n\n\n\n\n\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n the specific language governing rights and limitations under the License.\n\n The Original Code is reddit.\n\n The Original Developer is the Initial Developer.  The Initial Developer of\n the Original Code is reddit Inc.\n\n All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n Inc. All Rights Reserved.\n\nfrom pylons import response\nfrom pylons import tmpl_context as c\n\nfrom r2.controllers.api_docs import api_doc, api_section\nfrom r2.controllers.oauth2 import require_oauth2_scope\nfrom r2.controllers.reddit_base import OAuth2OnlyController\nfrom r2.lib.jsontemplates import (\n    FriendTableItemJsonTemplate,\n    get_usertrophies,\n    IdentityJsonTemplate,\n    KarmaListJsonTemplate,\n    PrefsJsonTemplate,\n)\nfrom r2.lib.pages import FriendTableItem\nfrom r2.lib.validator import (\n    validate,\n    VAccountByName,\n    VFriendOfMine,\n    VLength,\n    VList,\n    VUser,\n    VValidatedJSON,\n)\nfrom r2.models import Account, Trophy\nimport r2.lib.errors as errors\nimport r2.lib.validator.preferences as vprefs\n\n\nPREFS_JSON_SPEC = VValidatedJSON.PartialObject({\n    k[len(\"pref_\"):]: v for k, v in\n    vprefs.PREFS_VALIDATORS.iteritems()\n})\n\n\nclass APIv1UserController(OAuth2OnlyController):\n    @require_oauth2_scope(\"identity\")\n    @validate(\n        VUser(),\n    )\n    @api_doc(api_section.account)\n    def GET_me(self):\n        \"Returns the identity of the user currently authenticated via OAuth.\"\n        resp = IdentityJsonTemplate().data(c.oauth_user)\n        return self.api_wrapper(resp)\n\n    @require_oauth2_scope(\"identity\")\n    @validate(\n        VUser(),\n        fields=VList(\n            \"fields\",\n            choices=PREFS_JSON_SPEC.spec.keys(),\n            error=errors.errors.NON_PREFERENCE,\n        ),\n    )\n    @api_doc(api_section.account, uri='/api/v1/me/prefs')\n    def GET_prefs(self, fields):\n        \"\"\"Return the preference settings of the logged in user\"\"\"\n        resp = PrefsJsonTemplate(fields).data(c.oauth_user)\n        return self.api_wrapper(resp)\n\n    @require_oauth2_scope(\"read\")\n    @validate(\n        user=VAccountByName('username'),\n    )\n    @api_doc(\n        section=api_section.users,\n        uri='/api/v1/user/{username}/trophies',\n    )\n    def GET_usertrophies(self, user):\n        \"\"\"Return a list of trophies for the a given user.\"\"\"\n        return self.api_wrapper(get_usertrophies(user))\n\n    @require_oauth2_scope(\"identity\")\n    @validate(\n        VUser(),\n    )\n    @api_doc(\n        section=api_section.account,\n        uri='/api/v1/me/trophies',\n    )\n    def GET_trophies(self):\n        \"\"\"Return a list of trophies for the current user.\"\"\"\n        return self.api_wrapper(get_usertrophies(c.oauth_user))\n\n    @require_oauth2_scope(\"mysubreddits\")\n    @validate(\n        VUser(),\n    )\n    @api_doc(\n        section=api_section.account,\n        uri='/api/v1/me/karma',\n    )\n    def GET_karma(self):\n        \"\"\"Return a breakdown of subreddit karma.\"\"\"\n        karmas = c.oauth_user.all_karmas(include_old=False)\n        resp = KarmaListJsonTemplate().render(karmas)\n        return self.api_wrapper(resp.finalize())\n\n    PREFS_JSON_VALIDATOR = VValidatedJSON(\"json\", PREFS_JSON_SPEC,\n                                          body=True)\n\n    @require_oauth2_scope(\"account\")\n    @validate(\n        VUser(),\n        validated_prefs=PREFS_JSON_VALIDATOR,\n    )\n    @api_doc(api_section.account, json_model=PREFS_JSON_VALIDATOR,\n             uri='/api/v1/me/prefs')\n    def PATCH_prefs(self, validated_prefs):\n        user_prefs = c.user.preferences()\n        for short_name, new_value in validated_prefs.iteritems():\n            pref_name = \"pref_\" + short_name\n            user_prefs[pref_name] = new_value\n        vprefs.filter_prefs(user_prefs, c.user)\n        vprefs.set_prefs(c.user, user_prefs)\n        c.user._commit()\n        return self.api_wrapper(PrefsJsonTemplate().data(c.user))\n\n    FRIEND_JSON_SPEC = VValidatedJSON.PartialObject({\n        \"name\": VAccountByName(\"name\"),\n        \"note\": VLength(\"note\", 300),\n    })\n    FRIEND_JSON_VALIDATOR = VValidatedJSON(\"json\", spec=FRIEND_JSON_SPEC,\n                                           body=True)\n    @require_oauth2_scope('subscribe')\n    @validate(\n        VUser(),\n        friend=VAccountByName('username'),\n        notes_json=FRIEND_JSON_VALIDATOR,\n    )\n    @api_doc(api_section.users, json_model=FRIEND_JSON_VALIDATOR,\n             uri='/api/v1/me/friends/{username}')\n    def PUT_friends(self, friend, notes_json):\n        \"\"\"Create or update a \"friend\" relationship.\n\n        This operation is idempotent. It can be used to add a new\n        friend, or update an existing friend (e.g., add/change the\n        note on that friend)\n\n        \"\"\"\n        err = None\n        if 'name' in notes_json and notes_json['name'] != friend:\n             The 'name' in the JSON is optional, but if present, must\n             match the username from the URL\n            err = errors.RedditError('BAD_USERNAME', fields='name')\n        if 'note' in notes_json and not c.user.gold:\n            err = errors.RedditError('GOLD_REQUIRED', fields='note')\n        if err:\n            self.on_validation_error(err)\n\n         See if the target is already an existing friend.\n         If not, create the friend relationship.\n        friend_rel = Account.get_friend(c.user, friend)\n        rel_exists = bool(friend_rel)\n        if not friend_rel:\n            friend_rel = c.user.add_friend(friend)\n            response.status = 201\n\n        if 'note' in notes_json:\n            note = notes_json['note'] or ''\n            if not rel_exists:\n                 If this is a newly created friend relationship,\n                 the cache needs to be updated before a note can\n                 be applied\n                c.user.friend_rels_cache(_update=True)\n            c.user.add_friend_note(friend, note)\n        rel_view = FriendTableItem(friend_rel)\n        return self.api_wrapper(FriendTableItemJsonTemplate().data(rel_view))\n\n    @require_oauth2_scope('mysubreddits')\n    @validate(\n        VUser(),\n        friend_rel=VFriendOfMine('username'),\n    )\n    @api_doc(api_section.users, uri='/api/v1/me/friends/{username}')\n    def GET_friends(self, friend_rel):\n        \"\"\"Get information about a specific 'friend', such as notes.\"\"\"\n        rel_view = FriendTableItem(friend_rel)\n        return self.api_wrapper(FriendTableItemJsonTemplate().data(rel_view))\n\n    @require_oauth2_scope('subscribe')\n    @validate(\n        VUser(),\n        friend_rel=VFriendOfMine('username'),\n    )\n    @api_doc(api_section.users, uri='/api/v1/me/friends/{username}')\n    def DELETE_friends(self, friend_rel):\n        \"\"\"Stop being friends with a user.\"\"\"\n        c.user.remove_friend(friend_rel._thing2)\n        if c.user.gold:\n            c.user.friend_rels_cache(_update=True)\n        response.status = 204\n", "comments": "   return preference settings logged user            resp   prefsjsontemplate(fields) data(c oauth user)         return self api wrapper(resp)       require oauth2 scope( read )      validate(         user vaccountbyname( username )      )      api doc(         section api section users          uri   api v1 user  username  trophies       )     def get usertrophies(self  user)             return list trophies given user             return self api wrapper(get usertrophies(user))       require oauth2 scope( identity )      validate(         vuser()      )      api doc(         section api section account          uri   api v1 trophies       )     def get trophies(self)             return list trophies current user             return self api wrapper(get usertrophies(c oauth user))       require oauth2 scope( mysubreddits )      validate(         vuser()      )      api doc(         section api section account          uri   api v1 karma       )     def get karma(self)             return breakdown subreddit karma             karmas   c oauth user karmas(include old false)         resp   karmalistjsontemplate() render(karmas)         return self api wrapper(resp finalize())      prefs json validator   vvalidatedjson( json   prefs json spec                                            body true)       require oauth2 scope( account )      validate(         vuser()          validated prefs prefs json validator      )      api doc(api section account  json model prefs json validator               uri   api v1 prefs )     def patch prefs(self  validated prefs)          user prefs   c user preferences()         short name  new value validated prefs iteritems()              pref name    pref     short name             user prefs pref name    new value         vprefs filter prefs(user prefs  c user)         vprefs set prefs(c user  user prefs)         c user  commit()         return self api wrapper(prefsjsontemplate() data(c user))      friend json spec   vvalidatedjson partialobject(           name   vaccountbyname( name )           note   vlength( note   300)       )     friend json validator   vvalidatedjson( json   spec friend json spec                                             body true)      require oauth2 scope( subscribe )      validate(         vuser()          friend vaccountbyname( username )          notes json friend json validator      )      api doc(api section users  json model friend json validator               uri   api v1 friends  username  )     def put friends(self  friend  notes json)             create update  friend  relationship           this operation idempotent  it used add new         friend  update existing friend (e g   add change         note friend)                      err   none          name  notes json notes json  name      friend                the  name  json optional  present  must               match username url             err   errors redditerror( bad username   fields  name )          note  notes json c user gold              err   errors redditerror( gold required   fields  note )         err              self validation error(err)            see target already existing friend            if  create friend relationship          friend rel   account get friend(c user  friend)         rel exists   bool(friend rel)         friend rel              friend rel   c user add friend(friend)             response status   201           note  notes json              note   notes json  note                  rel exists                    if newly created friend relationship                    cache needs updated note                   applied                 c user friend rels cache( update true)             c user add friend note(friend  note)         rel view   friendtableitem(friend rel)         return self api wrapper(friendtableitemjsontemplate() data(rel view))       require oauth2 scope( mysubreddits )      validate(         vuser()          friend rel vfriendofmine( username )      )      api doc(api section users  uri   api v1 friends  username  )     def get friends(self  friend rel)             get information specific  friend   notes             rel view   friendtableitem(friend rel)         return self api wrapper(friendtableitemjsontemplate() data(rel view))       require oauth2 scope( subscribe )      validate(         vuser()          friend rel vfriendofmine( username )      )      api doc(api section users  uri   api v1 friends  username  )     def delete friends(self  friend rel)             stop friends user        the contents file subject common public attribution    license version 1 0  (the  license )  may use file except    compliance license  you may obtain copy license    http   code reddit com license  the license based mozilla public    license version 1 1  sections 14 15 added cover use    software computer network provide limited attribution    original developer  in addition  exhibit a modified consistent    exhibit b        software distributed license distributed  as is  basis     without warranty of any kind  either express implied  see license    specific language governing rights limitations license        the original code reddit        the original developer initial developer   the initial developer    original code reddit inc        all portions code written reddit copyright (c) 2006 2015 reddit    inc  all rights reserved                                                                                      the  name  json optional  present  must    match username url    see target already existing friend     if  create friend relationship     if newly created friend relationship     cache needs updated note    applied ", "content": "# The contents of this file are subject to the Common Public Attribution\n# License Version 1.0. (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public\n# License Version 1.1, but Sections 14 and 15 have been added to cover use of\n# software over a computer network and provide for limited attribution for the\n# Original Developer. In addition, Exhibit A has been modified to be consistent\n# with Exhibit B.\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n# the specific language governing rights and limitations under the License.\n#\n# The Original Code is reddit.\n#\n# The Original Developer is the Initial Developer.  The Initial Developer of\n# the Original Code is reddit Inc.\n#\n# All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n# Inc. All Rights Reserved.\n###############################################################################\nfrom pylons import response\nfrom pylons import tmpl_context as c\n\nfrom r2.controllers.api_docs import api_doc, api_section\nfrom r2.controllers.oauth2 import require_oauth2_scope\nfrom r2.controllers.reddit_base import OAuth2OnlyController\nfrom r2.lib.jsontemplates import (\n    FriendTableItemJsonTemplate,\n    get_usertrophies,\n    IdentityJsonTemplate,\n    KarmaListJsonTemplate,\n    PrefsJsonTemplate,\n)\nfrom r2.lib.pages import FriendTableItem\nfrom r2.lib.validator import (\n    validate,\n    VAccountByName,\n    VFriendOfMine,\n    VLength,\n    VList,\n    VUser,\n    VValidatedJSON,\n)\nfrom r2.models import Account, Trophy\nimport r2.lib.errors as errors\nimport r2.lib.validator.preferences as vprefs\n\n\nPREFS_JSON_SPEC = VValidatedJSON.PartialObject({\n    k[len(\"pref_\"):]: v for k, v in\n    vprefs.PREFS_VALIDATORS.iteritems()\n})\n\n\nclass APIv1UserController(OAuth2OnlyController):\n    @require_oauth2_scope(\"identity\")\n    @validate(\n        VUser(),\n    )\n    @api_doc(api_section.account)\n    def GET_me(self):\n        \"Returns the identity of the user currently authenticated via OAuth.\"\n        resp = IdentityJsonTemplate().data(c.oauth_user)\n        return self.api_wrapper(resp)\n\n    @require_oauth2_scope(\"identity\")\n    @validate(\n        VUser(),\n        fields=VList(\n            \"fields\",\n            choices=PREFS_JSON_SPEC.spec.keys(),\n            error=errors.errors.NON_PREFERENCE,\n        ),\n    )\n    @api_doc(api_section.account, uri='/api/v1/me/prefs')\n    def GET_prefs(self, fields):\n        \"\"\"Return the preference settings of the logged in user\"\"\"\n        resp = PrefsJsonTemplate(fields).data(c.oauth_user)\n        return self.api_wrapper(resp)\n\n    @require_oauth2_scope(\"read\")\n    @validate(\n        user=VAccountByName('username'),\n    )\n    @api_doc(\n        section=api_section.users,\n        uri='/api/v1/user/{username}/trophies',\n    )\n    def GET_usertrophies(self, user):\n        \"\"\"Return a list of trophies for the a given user.\"\"\"\n        return self.api_wrapper(get_usertrophies(user))\n\n    @require_oauth2_scope(\"identity\")\n    @validate(\n        VUser(),\n    )\n    @api_doc(\n        section=api_section.account,\n        uri='/api/v1/me/trophies',\n    )\n    def GET_trophies(self):\n        \"\"\"Return a list of trophies for the current user.\"\"\"\n        return self.api_wrapper(get_usertrophies(c.oauth_user))\n\n    @require_oauth2_scope(\"mysubreddits\")\n    @validate(\n        VUser(),\n    )\n    @api_doc(\n        section=api_section.account,\n        uri='/api/v1/me/karma',\n    )\n    def GET_karma(self):\n        \"\"\"Return a breakdown of subreddit karma.\"\"\"\n        karmas = c.oauth_user.all_karmas(include_old=False)\n        resp = KarmaListJsonTemplate().render(karmas)\n        return self.api_wrapper(resp.finalize())\n\n    PREFS_JSON_VALIDATOR = VValidatedJSON(\"json\", PREFS_JSON_SPEC,\n                                          body=True)\n\n    @require_oauth2_scope(\"account\")\n    @validate(\n        VUser(),\n        validated_prefs=PREFS_JSON_VALIDATOR,\n    )\n    @api_doc(api_section.account, json_model=PREFS_JSON_VALIDATOR,\n             uri='/api/v1/me/prefs')\n    def PATCH_prefs(self, validated_prefs):\n        user_prefs = c.user.preferences()\n        for short_name, new_value in validated_prefs.iteritems():\n            pref_name = \"pref_\" + short_name\n            user_prefs[pref_name] = new_value\n        vprefs.filter_prefs(user_prefs, c.user)\n        vprefs.set_prefs(c.user, user_prefs)\n        c.user._commit()\n        return self.api_wrapper(PrefsJsonTemplate().data(c.user))\n\n    FRIEND_JSON_SPEC = VValidatedJSON.PartialObject({\n        \"name\": VAccountByName(\"name\"),\n        \"note\": VLength(\"note\", 300),\n    })\n    FRIEND_JSON_VALIDATOR = VValidatedJSON(\"json\", spec=FRIEND_JSON_SPEC,\n                                           body=True)\n    @require_oauth2_scope('subscribe')\n    @validate(\n        VUser(),\n        friend=VAccountByName('username'),\n        notes_json=FRIEND_JSON_VALIDATOR,\n    )\n    @api_doc(api_section.users, json_model=FRIEND_JSON_VALIDATOR,\n             uri='/api/v1/me/friends/{username}')\n    def PUT_friends(self, friend, notes_json):\n        \"\"\"Create or update a \"friend\" relationship.\n\n        This operation is idempotent. It can be used to add a new\n        friend, or update an existing friend (e.g., add/change the\n        note on that friend)\n\n        \"\"\"\n        err = None\n        if 'name' in notes_json and notes_json['name'] != friend:\n            # The 'name' in the JSON is optional, but if present, must\n            # match the username from the URL\n            err = errors.RedditError('BAD_USERNAME', fields='name')\n        if 'note' in notes_json and not c.user.gold:\n            err = errors.RedditError('GOLD_REQUIRED', fields='note')\n        if err:\n            self.on_validation_error(err)\n\n        # See if the target is already an existing friend.\n        # If not, create the friend relationship.\n        friend_rel = Account.get_friend(c.user, friend)\n        rel_exists = bool(friend_rel)\n        if not friend_rel:\n            friend_rel = c.user.add_friend(friend)\n            response.status = 201\n\n        if 'note' in notes_json:\n            note = notes_json['note'] or ''\n            if not rel_exists:\n                # If this is a newly created friend relationship,\n                # the cache needs to be updated before a note can\n                # be applied\n                c.user.friend_rels_cache(_update=True)\n            c.user.add_friend_note(friend, note)\n        rel_view = FriendTableItem(friend_rel)\n        return self.api_wrapper(FriendTableItemJsonTemplate().data(rel_view))\n\n    @require_oauth2_scope('mysubreddits')\n    @validate(\n        VUser(),\n        friend_rel=VFriendOfMine('username'),\n    )\n    @api_doc(api_section.users, uri='/api/v1/me/friends/{username}')\n    def GET_friends(self, friend_rel):\n        \"\"\"Get information about a specific 'friend', such as notes.\"\"\"\n        rel_view = FriendTableItem(friend_rel)\n        return self.api_wrapper(FriendTableItemJsonTemplate().data(rel_view))\n\n    @require_oauth2_scope('subscribe')\n    @validate(\n        VUser(),\n        friend_rel=VFriendOfMine('username'),\n    )\n    @api_doc(api_section.users, uri='/api/v1/me/friends/{username}')\n    def DELETE_friends(self, friend_rel):\n        \"\"\"Stop being friends with a user.\"\"\"\n        c.user.remove_friend(friend_rel._thing2)\n        if c.user.gold:\n            c.user.friend_rels_cache(_update=True)\n        response.status = 204\n", "description": "historical code from reddit.com", "file_name": "user.py", "id": "32ecb8dc7692f0811138ab96cf24bbe3", "language": "Python", "project_name": "reddit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/reddit-archive-reddit/reddit-archive-reddit-753b174/r2/r2/controllers/apiv1/user.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:55:36Z", "url": "https://github.com/reddit-archive/reddit", "wiki": true}