{"author": "donnemartin", "code": " -*- coding: utf-8 -*-\n\n\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You\n may not use this file except in compliance with the License. A copy of\n the License is located at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n or in the \"license\" file accompanying this file. This file is\n distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n ANY KIND, either express or implied. See the License for the specific\n language governing permissions and limitations under the License.\n\nfrom getpass import getpass\nimport os\ntry:\n     Python 3\n    import configparser\nexcept ImportError:\n     Python 2\n    import ConfigParser as configparser\n\nimport click\nfrom githubcli.lib.github3 import authorize, login\nfrom githubcli.lib.github3.exceptions import UnprocessableEntity\n\n\nclass GitHub(object):\n    \"\"\"Provides integration with the GitHub API.\n\n    Attributes:\n        * api: An instance of github3 to interact with the GitHub API.\n        * CONFIG: A string representing the config file name.\n        * CONFIG_SECTION: A string representing the main config file section.\n        * CONFIG_USER_LOGIN: A string representing the user login config.\n        * CONFIG_USER_PASS: A string representing the user pass config.\n        * CONFIG_USER_TOKEN: A string representing the user token config.\n        * CONFIG_URL: A string representing the jump to url config file name.\n        * CONFIG_URL_SECTION: A string representing the jump to url config\n            file section.\n        * GITHUB_ISSUES: A string representing the GitHub issues url portion.\n        * GITHUB_URL: A string representing the GitHub main url.\n        * user_login: A string that represents the user's login in\n            ~/.githubconfig\n        * user_pass: A string that represents the user's pass in\n            ~/.githubconfig\n        * user_token: A string that represents the user's token in\n            ~/.githubconfig\n    \"\"\"\n\n    CONFIG = '.githubconfig'\n    CONFIG_SECTION = 'github'\n    CONFIG_USER_LOGIN = 'user_login'\n    CONFIG_USER_PASS = 'user_pass'\n    CONFIG_USER_TOKEN = 'user_token'\n    CONFIG_URL = '.githubconfigurl'\n    CONFIG_URL_SECTION = 'url'\n    CONFIG_AVATAR = '.githubconfigavatar.png'\n    GITHUB_ISSUES = 'issues/'\n    GITHUB_URL = 'https://github.com/'\n\n    def __init__(self):\n        \"\"\"Inits GitHub.\n\n        Args:\n            * None.\n\n        Returns:\n            None.\n        \"\"\"\n        self.api = None\n        self.user_login = None\n        self.user_pass = None\n        self.user_token = None\n        self._login()\n\n    def _github_config(self, config_file_name):\n        \"\"\"Attempts to find the github config file.\n\n        Adapted from https://github.com/sigmavirus24/github-cli.\n\n        Args:\n            * config_file_name: A String that represents the config file name.\n\n        Returns:\n            A string that represents the github config file path.\n        \"\"\"\n        home = os.path.abspath(os.environ.get('HOME', ''))\n        config_file_path = os.path.join(home, config_file_name)\n        return config_file_path\n\n    def _login(self):\n        \"\"\"Logs into GitHub.\n\n        Adapted from https://github.com/sigmavirus24/github-cli.\n\n        TODO: Two factor authentication does not seem to be triggering the\n            SMS code: https://github.com/sigmavirus24/github3.py/issues/387\n\n        Args:\n            * None.\n\n        Returns:\n            None.\n        \"\"\"\n         Get the full path to the configuration file\n        config = self._github_config(self.CONFIG)\n        parser = configparser.RawConfigParser()\n         Check to make sure the file exists and we are allowed to read it\n        if os.path.isfile(config) and os.access(config, os.R_OK | os.W_OK):\n            parser.readfp(open(config))\n            self.user_login = parser.get(self.CONFIG_SECTION,\n                                         self.CONFIG_USER_LOGIN)\n            self.api = login(token=parser.get(self.CONFIG_SECTION,\n                                              self.CONFIG_USER_TOKEN),\n                             two_factor_callback=self._two_factor_code)\n        else:\n             Either the file didn't exist or we didn't have the correct\n             permissions\n            user_login = ''\n            while not user_login:\n                user_login = input('User Login: ')\n            user_pass = ''\n            while not user_pass:\n                user_pass = getpass('Password: ')\n            auth = None\n            try:\n                 Get an authorization for this\n                auth = authorize(\n                    user_login,\n                    user_pass,\n                    scopes=['user', 'repo', 'gist'],\n                    note='githubcli',\n                    note_url='https://github.com/donnemartin/github-cli'\n                )\n            except UnprocessableEntity:\n                click.secho('Error creating token.\\nVisit the following '\n                            'page and verify you do not have an existing '\n                            'token named \"githubcli\":\\n'\n                            'See https://github.com/settings/tokens\\n'\n                            'If a token already exists update your ' +\n                            self.githubconfig + ' file with your user_token.',\n                            fg='red')\n            parser.add_section(self.CONFIG_SECTION)\n            parser.set(self.CONFIG_SECTION, self.CONFIG_USER_LOGIN, user_login)\n            parser.set(self.CONFIG_SECTION, self.CONFIG_USER_PASS, user_pass)\n            parser.set(self.CONFIG_SECTION, self.CONFIG_USER_TOKEN, auth.token)\n            self.api = login(token=auth.token,\n                             two_factor_callback=self._two_factor_code)\n             Create the file if it doesn't exist. Otherwise completely blank\n             out what was there before. Kind of dangerous and destructive but\n             somewhat necessary\n            parser.write(open(config, 'w+'))\n\n    def _two_factor_code(self):\n        \"\"\"Callback if two factor authentication is requested.\n\n        Args:\n            * None.\n\n        Returns:\n            A string that represents the user input two factor\n                authentication code.\n        \"\"\"\n        code = ''\n        while not code:\n            code = input('Enter 2FA code: ')\n        return code\n", "comments": "   provides integration github api       attributes            api  an instance github3 interact github api            config  a string representing config file name            config section  a string representing main config file section            config user login  a string representing user login config            config user pass  a string representing user pass config            config user token  a string representing user token config            config url  a string representing jump url config file name            config url section  a string representing jump url config             file section            github issues  a string representing github issues url portion            github url  a string representing github main url            user login  a string represents user login                githubconfig           user pass  a string represents user pass                githubconfig           user token  a string represents user token                githubconfig              config     githubconfig      config section    github      config user login    user login      config user pass    user pass      config user token    user token      config url     githubconfigurl      config url section    url      config avatar     githubconfigavatar png      github issues    issues       github url    https   github com        def   init  (self)             inits github           args                none           returns              none                      self api   none         self user login   none         self user pass   none         self user token   none         self  login()      def  github config(self  config file name)             attempts find github config file           adapted https   github com sigmavirus24 github cli           args                config file name  a string represents config file name           returns              a string represents github config file path                      home   os path abspath(os environ get( home     ))         config file path   os path join(home  config file name)         return config file path      def  login(self)             logs github           adapted https   github com sigmavirus24 github cli           todo  two factor authentication seem triggering             sms code  https   github com sigmavirus24 github3 py issues 387          args                none           returns              none                        get full path configuration file         config   self  github config(self config)         parser   configparser rawconfigparser()           check make sure file exists allowed read         os path isfile(config) os access(config  os r ok   os w ok)              parser readfp(open(config))             self user login   parser get(self config section                                           self config user login)             self api   login(token parser get(self config section                                                self config user token)                               two factor callback self  two factor code)         else                either file exist correct               permissions             user login                  user login                  user login   input( user login   )             user pass                  user pass                  user pass   getpass( password   )             auth   none             try                    get authorization                 auth   authorize(                     user login                      user pass                      scopes   user    repo    gist                        note  githubcli                       note url  https   github com donnemartin github cli                  )             except unprocessableentity                  click secho( error creating token  nvisit following                                page verify existing                                token named  githubcli   n                               see https   github com settings tokens n                               if token already exists update                                 self githubconfig     file user token                                fg  red )             parser add section(self config section)             parser set(self config section  self config user login  user login)             parser set(self config section  self config user pass  user pass)             parser set(self config section  self config user token  auth token)             self api   login(token auth token                               two factor callback self  two factor code)               create file exist  otherwise completely blank                kind dangerous destructive               somewhat necessary             parser write(open(config   w  ))      def  two factor code(self)             callback two factor authentication requested           args                none           returns              a string represents user input two factor                 authentication code                     coding  utf 8        copyright 2015 donne martin  all rights reserved        licensed apache license  version 2 0 (the  license )  you    may use file except compliance license  a copy    license located           http   www apache org licenses license 2 0        license  file accompanying file  this file    distributed  as is  basis  without warranties or conditions of    any kind  either express implied  see license specific    language governing permissions limitations license     python 3    python 2    get full path configuration file    check make sure file exists allowed read    either file exist correct    permissions    get authorization    create file exist  otherwise completely blank     kind dangerous destructive    somewhat necessary ", "content": "# -*- coding: utf-8 -*-\n\n# Copyright 2015 Donne Martin. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"). You\n# may not use this file except in compliance with the License. A copy of\n# the License is located at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# or in the \"license\" file accompanying this file. This file is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF\n# ANY KIND, either express or implied. See the License for the specific\n# language governing permissions and limitations under the License.\n\nfrom getpass import getpass\nimport os\ntry:\n    # Python 3\n    import configparser\nexcept ImportError:\n    # Python 2\n    import ConfigParser as configparser\n\nimport click\nfrom githubcli.lib.github3 import authorize, login\nfrom githubcli.lib.github3.exceptions import UnprocessableEntity\n\n\nclass GitHub(object):\n    \"\"\"Provides integration with the GitHub API.\n\n    Attributes:\n        * api: An instance of github3 to interact with the GitHub API.\n        * CONFIG: A string representing the config file name.\n        * CONFIG_SECTION: A string representing the main config file section.\n        * CONFIG_USER_LOGIN: A string representing the user login config.\n        * CONFIG_USER_PASS: A string representing the user pass config.\n        * CONFIG_USER_TOKEN: A string representing the user token config.\n        * CONFIG_URL: A string representing the jump to url config file name.\n        * CONFIG_URL_SECTION: A string representing the jump to url config\n            file section.\n        * GITHUB_ISSUES: A string representing the GitHub issues url portion.\n        * GITHUB_URL: A string representing the GitHub main url.\n        * user_login: A string that represents the user's login in\n            ~/.githubconfig\n        * user_pass: A string that represents the user's pass in\n            ~/.githubconfig\n        * user_token: A string that represents the user's token in\n            ~/.githubconfig\n    \"\"\"\n\n    CONFIG = '.githubconfig'\n    CONFIG_SECTION = 'github'\n    CONFIG_USER_LOGIN = 'user_login'\n    CONFIG_USER_PASS = 'user_pass'\n    CONFIG_USER_TOKEN = 'user_token'\n    CONFIG_URL = '.githubconfigurl'\n    CONFIG_URL_SECTION = 'url'\n    CONFIG_AVATAR = '.githubconfigavatar.png'\n    GITHUB_ISSUES = 'issues/'\n    GITHUB_URL = 'https://github.com/'\n\n    def __init__(self):\n        \"\"\"Inits GitHub.\n\n        Args:\n            * None.\n\n        Returns:\n            None.\n        \"\"\"\n        self.api = None\n        self.user_login = None\n        self.user_pass = None\n        self.user_token = None\n        self._login()\n\n    def _github_config(self, config_file_name):\n        \"\"\"Attempts to find the github config file.\n\n        Adapted from https://github.com/sigmavirus24/github-cli.\n\n        Args:\n            * config_file_name: A String that represents the config file name.\n\n        Returns:\n            A string that represents the github config file path.\n        \"\"\"\n        home = os.path.abspath(os.environ.get('HOME', ''))\n        config_file_path = os.path.join(home, config_file_name)\n        return config_file_path\n\n    def _login(self):\n        \"\"\"Logs into GitHub.\n\n        Adapted from https://github.com/sigmavirus24/github-cli.\n\n        TODO: Two factor authentication does not seem to be triggering the\n            SMS code: https://github.com/sigmavirus24/github3.py/issues/387\n\n        Args:\n            * None.\n\n        Returns:\n            None.\n        \"\"\"\n        # Get the full path to the configuration file\n        config = self._github_config(self.CONFIG)\n        parser = configparser.RawConfigParser()\n        # Check to make sure the file exists and we are allowed to read it\n        if os.path.isfile(config) and os.access(config, os.R_OK | os.W_OK):\n            parser.readfp(open(config))\n            self.user_login = parser.get(self.CONFIG_SECTION,\n                                         self.CONFIG_USER_LOGIN)\n            self.api = login(token=parser.get(self.CONFIG_SECTION,\n                                              self.CONFIG_USER_TOKEN),\n                             two_factor_callback=self._two_factor_code)\n        else:\n            # Either the file didn't exist or we didn't have the correct\n            # permissions\n            user_login = ''\n            while not user_login:\n                user_login = input('User Login: ')\n            user_pass = ''\n            while not user_pass:\n                user_pass = getpass('Password: ')\n            auth = None\n            try:\n                # Get an authorization for this\n                auth = authorize(\n                    user_login,\n                    user_pass,\n                    scopes=['user', 'repo', 'gist'],\n                    note='githubcli',\n                    note_url='https://github.com/donnemartin/github-cli'\n                )\n            except UnprocessableEntity:\n                click.secho('Error creating token.\\nVisit the following '\n                            'page and verify you do not have an existing '\n                            'token named \"githubcli\":\\n'\n                            'See https://github.com/settings/tokens\\n'\n                            'If a token already exists update your ' +\n                            self.githubconfig + ' file with your user_token.',\n                            fg='red')\n            parser.add_section(self.CONFIG_SECTION)\n            parser.set(self.CONFIG_SECTION, self.CONFIG_USER_LOGIN, user_login)\n            parser.set(self.CONFIG_SECTION, self.CONFIG_USER_PASS, user_pass)\n            parser.set(self.CONFIG_SECTION, self.CONFIG_USER_TOKEN, auth.token)\n            self.api = login(token=auth.token,\n                             two_factor_callback=self._two_factor_code)\n            # Create the file if it doesn't exist. Otherwise completely blank\n            # out what was there before. Kind of dangerous and destructive but\n            # somewhat necessary\n            parser.write(open(config, 'w+'))\n\n    def _two_factor_code(self):\n        \"\"\"Callback if two factor authentication is requested.\n\n        Args:\n            * None.\n\n        Returns:\n            A string that represents the user input two factor\n                authentication code.\n        \"\"\"\n        code = ''\n        while not code:\n            code = input('Enter 2FA code: ')\n        return code\n", "description": "A curated list of awesome Amazon Web Services (AWS) libraries, open source repos, guides, blogs, and other resources.  Featuring the Fiery Meter of AWSome.", "file_name": "github.py", "id": "ef8fa6caeae23744ab7429dfc9b7283e", "language": "Python", "project_name": "awesome-aws", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/donnemartin-awesome-aws/donnemartin-awesome-aws-91d6a78/awesome/lib/github.py", "save_time": "", "source": "", "update_at": "2018-03-18T15:00:27Z", "url": "https://github.com/donnemartin/awesome-aws", "wiki": true}