{"author": "benoitc", "code": " -*- coding: utf-8 -\n\n\n This file is part of gunicorn released under the MIT license.\n See the NOTICE for more information.\n\nimport os\nimport tempfile\n\ndirname = os.path.dirname(__file__)\n\nfrom gunicorn.http.parser import RequestParser\nfrom gunicorn.six import BytesIO\n\n\ndef data_source(fname):\n    buf = BytesIO()\n    with open(fname) as handle:\n        for line in handle:\n            line = line.rstrip(\"\\n\").replace(\"\\\\r\\\\n\", \"\\r\\n\")\n            buf.write(line.encode('latin1'))\n        return buf\n\n\nclass request(object):\n    def __init__(self, name):\n        self.fname = os.path.join(dirname, \"requests\", name)\n\n    def __call__(self, func):\n        def run():\n            src = data_source(self.fname)\n            func(src, RequestParser(src, None))\n        run.func_name = func.func_name\n        return run\n\n\nclass FakeSocket(object):\n\n    def __init__(self, data):\n        self.tmp = tempfile.TemporaryFile()\n        if data:\n            self.tmp.write(data.getvalue())\n            self.tmp.flush()\n            self.tmp.seek(0)\n\n    def fileno(self):\n        return self.tmp.fileno()\n\n    def len(self):\n        return self.tmp.len\n\n    def recv(self, length=None):\n        return self.tmp.read(length)\n\n    def recv_into(self, buf, length):\n        tmp_buffer = self.tmp.read(length)\n        v = len(tmp_buffer)\n        for i, c in enumerate(tmp_buffer):\n            buf[i] = c\n        return v\n\n    def send(self, data):\n        self.tmp.write(data)\n        self.tmp.flush()\n\n    def seek(self, offset, whence=0):\n        self.tmp.seek(offset, whence)\n", "comments": "      coding  utf 8      copyright 2009 paul j  davis  paul joseph davis gmail com        this file part gunicorn released mit license     see notice information  ", "content": "# -*- coding: utf-8 -\n# Copyright 2009 Paul J. Davis <paul.joseph.davis@gmail.com>\n#\n# This file is part of gunicorn released under the MIT license.\n# See the NOTICE for more information.\n\nimport os\nimport tempfile\n\ndirname = os.path.dirname(__file__)\n\nfrom gunicorn.http.parser import RequestParser\nfrom gunicorn.six import BytesIO\n\n\ndef data_source(fname):\n    buf = BytesIO()\n    with open(fname) as handle:\n        for line in handle:\n            line = line.rstrip(\"\\n\").replace(\"\\\\r\\\\n\", \"\\r\\n\")\n            buf.write(line.encode('latin1'))\n        return buf\n\n\nclass request(object):\n    def __init__(self, name):\n        self.fname = os.path.join(dirname, \"requests\", name)\n\n    def __call__(self, func):\n        def run():\n            src = data_source(self.fname)\n            func(src, RequestParser(src, None))\n        run.func_name = func.func_name\n        return run\n\n\nclass FakeSocket(object):\n\n    def __init__(self, data):\n        self.tmp = tempfile.TemporaryFile()\n        if data:\n            self.tmp.write(data.getvalue())\n            self.tmp.flush()\n            self.tmp.seek(0)\n\n    def fileno(self):\n        return self.tmp.fileno()\n\n    def len(self):\n        return self.tmp.len\n\n    def recv(self, length=None):\n        return self.tmp.read(length)\n\n    def recv_into(self, buf, length):\n        tmp_buffer = self.tmp.read(length)\n        v = len(tmp_buffer)\n        for i, c in enumerate(tmp_buffer):\n            buf[i] = c\n        return v\n\n    def send(self, data):\n        self.tmp.write(data)\n        self.tmp.flush()\n\n    def seek(self, offset, whence=0):\n        self.tmp.seek(offset, whence)\n", "description": "gunicorn 'Green Unicorn' is a WSGI HTTP Server for UNIX, fast clients and sleepy applications.", "file_name": "t.py", "id": "5f13188bccfc92c9fdc748bcf26a2477", "language": "Python", "project_name": "gunicorn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/benoitc-gunicorn/benoitc-gunicorn-d1f5268/tests/t.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:27:00Z", "url": "https://github.com/benoitc/gunicorn", "wiki": true}