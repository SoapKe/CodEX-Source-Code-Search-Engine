{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport re\nimport random\n\nfrom .common import InfoExtractor\n\n\nclass VideoPremiumIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?videopremium\\.(?:tv|me)/(?P<id>\\w+)(?:/.*)?'\n    _TEST = {\n        'url': 'http://videopremium.tv/4w7oadjsf156',\n        'info_dict': {\n            'id': '4w7oadjsf156',\n            'ext': 'f4v',\n            'title': 'youtube-dl_test_video____a_________-BaW_jenozKc.mp4.mp4'\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Test file has been deleted.',\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage_url = 'http://videopremium.tv/' + video_id\n        webpage = self._download_webpage(webpage_url, video_id)\n\n        if re.match(r'^<html><head><script[^>]*>window\\.location\\s*=', webpage):\n            \n            webpage = self._download_webpage(\n                webpage_url, video_id,\n                note='Downloading webpage again (with cookie)')\n\n        video_title = self._html_search_regex(\n            r'<h2(?:.*?)>\\s*(.+?)\\s*<', webpage, 'video title')\n\n        return {\n            'id': video_id,\n            'url': 'rtmp://e%d.md.iplay.md/play' % random.randint(1, 16),\n            'play_path': 'mp4:%s.f4v' % video_id,\n            'page_url': 'http://videopremium.tv/' + video_id,\n            'player_url': 'http://videopremium.tv/uplayer/uppod.swf',\n            'ext': 'f4v',\n            'title': video_title,\n        }\n", "comments": "# Download again, we need a cookie\n", "content": "from __future__ import unicode_literals\n\nimport re\nimport random\n\nfrom .common import InfoExtractor\n\n\nclass VideoPremiumIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?videopremium\\.(?:tv|me)/(?P<id>\\w+)(?:/.*)?'\n    _TEST = {\n        'url': 'http://videopremium.tv/4w7oadjsf156',\n        'info_dict': {\n            'id': '4w7oadjsf156',\n            'ext': 'f4v',\n            'title': 'youtube-dl_test_video____a_________-BaW_jenozKc.mp4.mp4'\n        },\n        'params': {\n            'skip_download': True,\n        },\n        'skip': 'Test file has been deleted.',\n    }\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n        webpage_url = 'http://videopremium.tv/' + video_id\n        webpage = self._download_webpage(webpage_url, video_id)\n\n        if re.match(r'^<html><head><script[^>]*>window\\.location\\s*=', webpage):\n            # Download again, we need a cookie\n            webpage = self._download_webpage(\n                webpage_url, video_id,\n                note='Downloading webpage again (with cookie)')\n\n        video_title = self._html_search_regex(\n            r'<h2(?:.*?)>\\s*(.+?)\\s*<', webpage, 'video title')\n\n        return {\n            'id': video_id,\n            'url': 'rtmp://e%d.md.iplay.md/play' % random.randint(1, 16),\n            'play_path': 'mp4:%s.f4v' % video_id,\n            'page_url': 'http://videopremium.tv/' + video_id,\n            'player_url': 'http://videopremium.tv/uplayer/uppod.swf',\n            'ext': 'f4v',\n            'title': video_title,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "videopremium.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/videopremium.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}