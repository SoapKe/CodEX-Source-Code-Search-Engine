{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.tools.safe_eval import safe_eval\nfrom odoo.exceptions import ValidationError\n\n\nclass Team(models.Model):\n    _name = 'crm.team'\n    _inherit = ['mail.alias.mixin', 'crm.team']\n\n    use_leads = fields.Boolean('Leads', help=\"Check this box to filter and qualify incoming requests as leads before converting them into opportunities and assigning them to a salesperson.\")\n    use_opportunities = fields.Boolean('Pipeline', help=\"Check this box to manage a presales process with opportunities.\")\n    alias_id = fields.Many2one('mail.alias', string='Alias', ondelete=\"restrict\", required=True, help=\"The email address associated with this channel. New emails received will automatically create new leads assigned to the channel.\")\n    unassigned_leads_count = fields.Integer(\n        compute='_compute_unassigned_leads_count',\n        string='Unassigned Leads', readonly=True)\n    opportunities_count = fields.Integer(\n        compute='_compute_opportunities',\n        string='Number of open opportunities', readonly=True)\n    opportunities_amount = fields.Integer(\n        compute='_compute_opportunities',\n        string='Amount of quotations to invoice', readonly=True)\n    dashboard_graph_model = fields.Selection(selection_add=[('crm.opportunity.report', 'Pipeline')])\n    dashboard_graph_period_pipeline = fields.Selection([\n        ('week', 'Within a Week'),\n        ('month', 'Within a Month'),\n        ('year', 'Within a Year'),\n    ], string='Expected to Close', help=\"The time period this channel's dashboard graph will consider.\",\n        compute=\"_compute_dashboard_graph_period_pipeline\", inverse=\"_inverse_dashboard_graph_period_pipeline\")\n    dashboard_graph_group_pipeline = fields.Selection([\n        ('day', 'Expected Closing Day'),\n        ('week', 'Expected Closing Week'),\n        ('month', 'Expected Closing Month'),\n        ('user', 'Salesperson'),\n        ('stage', 'Stage'),\n    ], string='Group by', default='day', help=\"How this channel's dashboard graph will group the results.\")\n\n    def _compute_unassigned_leads_count(self):\n        leads_data = self.env['crm.lead'].read_group([\n            ('team_id', 'in', self.ids),\n            ('type', '=', 'lead'),\n            ('user_id', '=', False),\n        ], ['team_id'], ['team_id'])\n        counts = {datum['team_id'][0]: datum['team_id_count'] for datum in leads_data}\n        for team in self:\n            team.unassigned_leads_count = counts.get(team.id, 0)\n\n    def _compute_opportunities(self):\n        opportunity_data = self.env['crm.lead'].read_group([\n            ('team_id', 'in', self.ids),\n            ('probability', '<', 100),\n            ('type', '=', 'opportunity'),\n        ], ['planned_revenue', 'probability', 'team_id'], ['team_id'])\n        counts = {datum['team_id'][0]: datum['team_id_count'] for datum in opportunity_data}\n        amounts = {datum['team_id'][0]: (datum['planned_revenue'] * datum['probability'] / 100) for datum in opportunity_data}\n        for team in self:\n            team.opportunities_count = counts.get(team.id, 0)\n            team.opportunities_amount = amounts.get(team.id, 0)\n\n    def _compute_dashboard_graph_period_pipeline(self):\n        for channel in self:\n            channel.dashboard_graph_period_pipeline = channel.dashboard_graph_period\n\n    def _inverse_dashboard_graph_period_pipeline(self):\n        for channel in self.filtered(lambda ch: ch.dashboard_graph_model == 'crm.opportunity.report'):\n                channel.dashboard_graph_period = channel.dashboard_graph_period_pipeline\n\n    def get_alias_model_name(self, vals):\n        return 'crm.lead'\n\n    def get_alias_values(self):\n        has_group_use_lead = self.env.user.has_group('crm.group_use_lead')\n        values = super(Team, self).get_alias_values()\n        values['alias_defaults'] = defaults = safe_eval(self.alias_defaults or \"{}\")\n        defaults['type'] = 'lead' if has_group_use_lead and self.use_leads else 'opportunity'\n        defaults['team_id'] = self.id\n        return values\n\n    @api.onchange('use_leads', 'use_opportunities')\n    def _onchange_use_leads_opportunities(self):\n        if not self.use_leads and not self.use_opportunities:\n            self.alias_name = False\n        if not self.use_opportunities and self.use_leads:\n            self.use_leads = False\n\n    @api.onchange('team_type')\n    def _onchange_team_type(self):\n        if self.team_type == 'sales':\n            self.use_opportunities = True\n            self.use_leads = lambda self: self.user_has_groups('crm.group_use_lead')\n            self.dashboard_graph_model = 'crm.opportunity.report'\n        else:\n            self.use_opportunities = False\n            self.use_leads = False\n        return super(Team, self)._onchange_team_type()\n\n    @api.onchange('dashboard_graph_model')\n    def _onchange_dashboard_graph_model(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            self.dashboard_graph_period_pipeline = self.dashboard_graph_period\n            self.dashboard_graph_group_pipeline = self.dashboard_graph_group\n        else:\n            self.dashboard_graph_period = self.dashboard_graph_period_pipeline\n            if not self.dashboard_graph_group:\n                self.dashboard_graph_group = self._fields['dashboard_graph_group'].default(self)\n\n    @api.onchange('dashboard_graph_group_pipeline')\n    def _onchange_dashboard_graph_group_pipeline(self):\n        if self.dashboard_graph_group_pipeline == 'stage':\n            self.dashboard_graph_group = False\n        else:\n            self.dashboard_graph_group = self.dashboard_graph_group_pipeline\n\n    @api.constrains('dashboard_graph_model', 'use_opportunities')\n    def _check_graph_model(self):\n        if not self.use_opportunities and self.dashboard_graph_model == 'crm.opportunity.report':\n            raise ValidationError(_(\"Dashboard graph content cannot be Pipeline if the sales channel doesn't use it. (Pipeline is unchecked.)\"))\n\n    @api.multi\n    def write(self, vals):\n        result = super(Team, self).write(vals)\n        if 'use_leads' in vals or 'alias_defaults' in vals:\n            for team in self:\n                team.alias_id.write(team.get_alias_values())\n        return result\n\n    \n    @api.model\n    def action_your_pipeline(self):\n        action = self.env.ref('crm.crm_lead_opportunities_tree_view').read()[0]\n        user_team_id = self.env.user.sale_team_id.id\n        if not user_team_id:\n            user_team_id = self.search([], limit=1).id\n            action['help'] = \"\"\"<p class='oe_view_nocontent_create'>Click here to add new opportunities</p><p>\n    Looks like you are not a member of a sales channel. You should add yourself\n    as a member of one of the sales channel.\n</p>\"\"\"\n            if user_team_id:\n                action['help'] += \"<p>As you don't belong to any sales channel, Odoo opens the first one by default.</p>\"\n\n        action_context = safe_eval(action['context'], {'uid': self.env.uid})\n        if user_team_id:\n            action_context['default_team_id'] = user_team_id\n\n        tree_view_id = self.env.ref('crm.crm_case_tree_view_oppor').id\n        form_view_id = self.env.ref('crm.crm_case_form_view_oppor').id\n        kanb_view_id = self.env.ref('crm.crm_case_kanban_view_leads').id\n        action['views'] = [\n                [kanb_view_id, 'kanban'],\n                [tree_view_id, 'tree'],\n                [form_view_id, 'form'],\n                [False, 'graph'],\n                [False, 'calendar'],\n                [False, 'pivot']\n            ]\n        action['context'] = action_context\n        return action\n\n    def _compute_dashboard_button_name(self):\n        opportunity_teams = self.filtered('use_opportunities')\n        opportunity_teams.update({'dashboard_button_name': _(\"Pipeline\")})\n        super(Team, self - opportunity_teams)._compute_dashboard_button_name()\n\n    def action_primary_channel_button(self):\n        if self.use_opportunities:\n            action = self.env.ref('crm.crm_case_form_view_salesteams_opportunity').read()[0]\n            return action\n        return super(Team, self).action_primary_channel_button()\n\n    def _graph_get_dates(self, today):\n        \"\"\" return a coherent start and end date for the dashboard graph according to the graph settings.\n        \"\"\"\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            if self.dashboard_graph_group == 'month':\n                start_date = today.replace(day=1)\n            elif self.dashboard_graph_group == 'week':\n                start_date = today - relativedelta(days=today.isocalendar()[2] - 1)\n            else:\n                start_date = today\n\n            if self.dashboard_graph_period == 'week':\n                end_date = today + relativedelta(weeks=1)\n            elif self.dashboard_graph_period == 'year':\n                end_date = today + relativedelta(years=1)\n            else:\n                end_date = today + relativedelta(months=1)\n\n            \n            # (to avoid having twice the same month/week/day from different years/month/week)\n            if self.dashboard_graph_group == 'month':\n                end_date = end_date.replace(day=1) - relativedelta(days=1)\n            elif self.dashboard_graph_group == 'week':\n                end_date -= relativedelta(days=end_date.isocalendar()[2])\n            else:\n                end_date -= relativedelta(days=1)\n\n            return [start_date, end_date]\n        return super(Team, self)._graph_get_dates(today)\n\n    def _get_graph(self):\n        graph_datas = super(Team, self)._get_graph()\n        if self.dashboard_graph_model == 'crm.opportunity.report' and self.dashboard_graph_group_pipeline == 'stage':\n            stage_ids = [d['label'] for d in graph_datas[0]['values'] if d['label'] is not None]\n            stage_data = self.env['crm.stage'].browse(stage_ids).read(['sequence', 'name'])\n            stage_data = {d['id']: {'name': d['name'], 'sequence': d['sequence']} for d in stage_data}\n            \n            stage_data[None] = {'name': _('Undefined'), 'sequence': -1}\n            graph_datas[0]['values'] = sorted(graph_datas[0]['values'], key=lambda el: stage_data[el['label']]['sequence'])\n            for gdata in graph_datas[0]['values']:\n                gdata['label'] = stage_data[gdata['label']]['name']\n        return graph_datas\n\n    def _graph_date_column(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            return 'date_deadline'\n        return super(Team, self)._graph_date_column()\n\n    def _graph_x_query(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report' and self.dashboard_graph_group_pipeline == 'stage':\n            return 'stage_id'\n        return super(Team, self)._graph_x_query()\n\n    def _graph_y_query(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            return 'SUM(expected_revenue)'\n        return super(Team, self)._graph_y_query()\n\n    def _graph_title_and_key(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            return ['', _('Pipeline: Expected Revenue')] \n        return super(Team, self)._graph_title_and_key()\n", "comments": "    p class  oe view nocontent create  click add new opportunities  p  p      looks like member sales channel  you add     member one sales channel    p                 user team id                  action  help        p as belong sales channel  odoo opens first one default   p            action context   safe eval(action  context      uid   self env uid )         user team id              action context  default team id     user team id          tree view id   self env ref( crm crm case tree view oppor ) id         form view id   self env ref( crm crm case form view oppor ) id         kanb view id   self env ref( crm crm case kanban view leads ) id         action  views                        kanb view id   kanban                     tree view id   tree                     form view id   form                     false   graph                     false   calendar                     false   pivot                         action  context     action context         return action      def  compute dashboard button name(self)          opportunity teams   self filtered( use opportunities )         opportunity teams update(  dashboard button name    ( pipeline ) )         super(team  self   opportunity teams)  compute dashboard button name()      def action primary channel button(self)          self use opportunities              action   self env ref( crm crm case form view salesteams opportunity ) read() 0              return action         return super(team  self) action primary channel button()      def  graph get dates(self  today)              return coherent start end date dashboard graph according graph settings                     coding  utf 8        part odoo  see license file full copyright licensing details    todo jem   refactor stuff xml action  proper customization     take end preceding month week day group month week day    (to avoid twice month week day different years month week)    use  undefined  stage unset stage records    title ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom dateutil.relativedelta import relativedelta\n\nfrom odoo import api, fields, models, _\nfrom odoo.tools.safe_eval import safe_eval\nfrom odoo.exceptions import ValidationError\n\n\nclass Team(models.Model):\n    _name = 'crm.team'\n    _inherit = ['mail.alias.mixin', 'crm.team']\n\n    use_leads = fields.Boolean('Leads', help=\"Check this box to filter and qualify incoming requests as leads before converting them into opportunities and assigning them to a salesperson.\")\n    use_opportunities = fields.Boolean('Pipeline', help=\"Check this box to manage a presales process with opportunities.\")\n    alias_id = fields.Many2one('mail.alias', string='Alias', ondelete=\"restrict\", required=True, help=\"The email address associated with this channel. New emails received will automatically create new leads assigned to the channel.\")\n    unassigned_leads_count = fields.Integer(\n        compute='_compute_unassigned_leads_count',\n        string='Unassigned Leads', readonly=True)\n    opportunities_count = fields.Integer(\n        compute='_compute_opportunities',\n        string='Number of open opportunities', readonly=True)\n    opportunities_amount = fields.Integer(\n        compute='_compute_opportunities',\n        string='Amount of quotations to invoice', readonly=True)\n    dashboard_graph_model = fields.Selection(selection_add=[('crm.opportunity.report', 'Pipeline')])\n    dashboard_graph_period_pipeline = fields.Selection([\n        ('week', 'Within a Week'),\n        ('month', 'Within a Month'),\n        ('year', 'Within a Year'),\n    ], string='Expected to Close', help=\"The time period this channel's dashboard graph will consider.\",\n        compute=\"_compute_dashboard_graph_period_pipeline\", inverse=\"_inverse_dashboard_graph_period_pipeline\")\n    dashboard_graph_group_pipeline = fields.Selection([\n        ('day', 'Expected Closing Day'),\n        ('week', 'Expected Closing Week'),\n        ('month', 'Expected Closing Month'),\n        ('user', 'Salesperson'),\n        ('stage', 'Stage'),\n    ], string='Group by', default='day', help=\"How this channel's dashboard graph will group the results.\")\n\n    def _compute_unassigned_leads_count(self):\n        leads_data = self.env['crm.lead'].read_group([\n            ('team_id', 'in', self.ids),\n            ('type', '=', 'lead'),\n            ('user_id', '=', False),\n        ], ['team_id'], ['team_id'])\n        counts = {datum['team_id'][0]: datum['team_id_count'] for datum in leads_data}\n        for team in self:\n            team.unassigned_leads_count = counts.get(team.id, 0)\n\n    def _compute_opportunities(self):\n        opportunity_data = self.env['crm.lead'].read_group([\n            ('team_id', 'in', self.ids),\n            ('probability', '<', 100),\n            ('type', '=', 'opportunity'),\n        ], ['planned_revenue', 'probability', 'team_id'], ['team_id'])\n        counts = {datum['team_id'][0]: datum['team_id_count'] for datum in opportunity_data}\n        amounts = {datum['team_id'][0]: (datum['planned_revenue'] * datum['probability'] / 100) for datum in opportunity_data}\n        for team in self:\n            team.opportunities_count = counts.get(team.id, 0)\n            team.opportunities_amount = amounts.get(team.id, 0)\n\n    def _compute_dashboard_graph_period_pipeline(self):\n        for channel in self:\n            channel.dashboard_graph_period_pipeline = channel.dashboard_graph_period\n\n    def _inverse_dashboard_graph_period_pipeline(self):\n        for channel in self.filtered(lambda ch: ch.dashboard_graph_model == 'crm.opportunity.report'):\n                channel.dashboard_graph_period = channel.dashboard_graph_period_pipeline\n\n    def get_alias_model_name(self, vals):\n        return 'crm.lead'\n\n    def get_alias_values(self):\n        has_group_use_lead = self.env.user.has_group('crm.group_use_lead')\n        values = super(Team, self).get_alias_values()\n        values['alias_defaults'] = defaults = safe_eval(self.alias_defaults or \"{}\")\n        defaults['type'] = 'lead' if has_group_use_lead and self.use_leads else 'opportunity'\n        defaults['team_id'] = self.id\n        return values\n\n    @api.onchange('use_leads', 'use_opportunities')\n    def _onchange_use_leads_opportunities(self):\n        if not self.use_leads and not self.use_opportunities:\n            self.alias_name = False\n        if not self.use_opportunities and self.use_leads:\n            self.use_leads = False\n\n    @api.onchange('team_type')\n    def _onchange_team_type(self):\n        if self.team_type == 'sales':\n            self.use_opportunities = True\n            self.use_leads = lambda self: self.user_has_groups('crm.group_use_lead')\n            self.dashboard_graph_model = 'crm.opportunity.report'\n        else:\n            self.use_opportunities = False\n            self.use_leads = False\n        return super(Team, self)._onchange_team_type()\n\n    @api.onchange('dashboard_graph_model')\n    def _onchange_dashboard_graph_model(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            self.dashboard_graph_period_pipeline = self.dashboard_graph_period\n            self.dashboard_graph_group_pipeline = self.dashboard_graph_group\n        else:\n            self.dashboard_graph_period = self.dashboard_graph_period_pipeline\n            if not self.dashboard_graph_group:\n                self.dashboard_graph_group = self._fields['dashboard_graph_group'].default(self)\n\n    @api.onchange('dashboard_graph_group_pipeline')\n    def _onchange_dashboard_graph_group_pipeline(self):\n        if self.dashboard_graph_group_pipeline == 'stage':\n            self.dashboard_graph_group = False\n        else:\n            self.dashboard_graph_group = self.dashboard_graph_group_pipeline\n\n    @api.constrains('dashboard_graph_model', 'use_opportunities')\n    def _check_graph_model(self):\n        if not self.use_opportunities and self.dashboard_graph_model == 'crm.opportunity.report':\n            raise ValidationError(_(\"Dashboard graph content cannot be Pipeline if the sales channel doesn't use it. (Pipeline is unchecked.)\"))\n\n    @api.multi\n    def write(self, vals):\n        result = super(Team, self).write(vals)\n        if 'use_leads' in vals or 'alias_defaults' in vals:\n            for team in self:\n                team.alias_id.write(team.get_alias_values())\n        return result\n\n    #TODO JEM : refactor this stuff with xml action, proper customization,\n    @api.model\n    def action_your_pipeline(self):\n        action = self.env.ref('crm.crm_lead_opportunities_tree_view').read()[0]\n        user_team_id = self.env.user.sale_team_id.id\n        if not user_team_id:\n            user_team_id = self.search([], limit=1).id\n            action['help'] = \"\"\"<p class='oe_view_nocontent_create'>Click here to add new opportunities</p><p>\n    Looks like you are not a member of a sales channel. You should add yourself\n    as a member of one of the sales channel.\n</p>\"\"\"\n            if user_team_id:\n                action['help'] += \"<p>As you don't belong to any sales channel, Odoo opens the first one by default.</p>\"\n\n        action_context = safe_eval(action['context'], {'uid': self.env.uid})\n        if user_team_id:\n            action_context['default_team_id'] = user_team_id\n\n        tree_view_id = self.env.ref('crm.crm_case_tree_view_oppor').id\n        form_view_id = self.env.ref('crm.crm_case_form_view_oppor').id\n        kanb_view_id = self.env.ref('crm.crm_case_kanban_view_leads').id\n        action['views'] = [\n                [kanb_view_id, 'kanban'],\n                [tree_view_id, 'tree'],\n                [form_view_id, 'form'],\n                [False, 'graph'],\n                [False, 'calendar'],\n                [False, 'pivot']\n            ]\n        action['context'] = action_context\n        return action\n\n    def _compute_dashboard_button_name(self):\n        opportunity_teams = self.filtered('use_opportunities')\n        opportunity_teams.update({'dashboard_button_name': _(\"Pipeline\")})\n        super(Team, self - opportunity_teams)._compute_dashboard_button_name()\n\n    def action_primary_channel_button(self):\n        if self.use_opportunities:\n            action = self.env.ref('crm.crm_case_form_view_salesteams_opportunity').read()[0]\n            return action\n        return super(Team, self).action_primary_channel_button()\n\n    def _graph_get_dates(self, today):\n        \"\"\" return a coherent start and end date for the dashboard graph according to the graph settings.\n        \"\"\"\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            if self.dashboard_graph_group == 'month':\n                start_date = today.replace(day=1)\n            elif self.dashboard_graph_group == 'week':\n                start_date = today - relativedelta(days=today.isocalendar()[2] - 1)\n            else:\n                start_date = today\n\n            if self.dashboard_graph_period == 'week':\n                end_date = today + relativedelta(weeks=1)\n            elif self.dashboard_graph_period == 'year':\n                end_date = today + relativedelta(years=1)\n            else:\n                end_date = today + relativedelta(months=1)\n\n            # we take the end of the preceding month/week/day if we group by month/week/day\n            # (to avoid having twice the same month/week/day from different years/month/week)\n            if self.dashboard_graph_group == 'month':\n                end_date = end_date.replace(day=1) - relativedelta(days=1)\n            elif self.dashboard_graph_group == 'week':\n                end_date -= relativedelta(days=end_date.isocalendar()[2])\n            else:\n                end_date -= relativedelta(days=1)\n\n            return [start_date, end_date]\n        return super(Team, self)._graph_get_dates(today)\n\n    def _get_graph(self):\n        graph_datas = super(Team, self)._get_graph()\n        if self.dashboard_graph_model == 'crm.opportunity.report' and self.dashboard_graph_group_pipeline == 'stage':\n            stage_ids = [d['label'] for d in graph_datas[0]['values'] if d['label'] is not None]\n            stage_data = self.env['crm.stage'].browse(stage_ids).read(['sequence', 'name'])\n            stage_data = {d['id']: {'name': d['name'], 'sequence': d['sequence']} for d in stage_data}\n            # use \"Undefined\" stage for unset stage records\n            stage_data[None] = {'name': _('Undefined'), 'sequence': -1}\n            graph_datas[0]['values'] = sorted(graph_datas[0]['values'], key=lambda el: stage_data[el['label']]['sequence'])\n            for gdata in graph_datas[0]['values']:\n                gdata['label'] = stage_data[gdata['label']]['name']\n        return graph_datas\n\n    def _graph_date_column(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            return 'date_deadline'\n        return super(Team, self)._graph_date_column()\n\n    def _graph_x_query(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report' and self.dashboard_graph_group_pipeline == 'stage':\n            return 'stage_id'\n        return super(Team, self)._graph_x_query()\n\n    def _graph_y_query(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            return 'SUM(expected_revenue)'\n        return super(Team, self)._graph_y_query()\n\n    def _graph_title_and_key(self):\n        if self.dashboard_graph_model == 'crm.opportunity.report':\n            return ['', _('Pipeline: Expected Revenue')] # no more title\n        return super(Team, self)._graph_title_and_key()\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "crm_team.py", "id": "ebf841a72b46b1dbb5037cdcd2350d1b", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/crm/models/crm_team.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}