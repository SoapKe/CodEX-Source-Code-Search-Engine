{"author": "tgalal", "code": "from yowsup.common.http.warequest import WARequest\nfrom yowsup.common.http.waresponseparser import JSONResponseParser\nfrom yowsup.common.tools import StorageTools, WATools\nfrom yowsup.registration.existsrequest import WAExistsRequest\nfrom yowsup.env import YowsupEnv\nimport random, hashlib, os\n\nclass WACodeRequest(WARequest):\n\n    def __init__(self,cc, p_in, mcc= \"000\", mnc = \"000\", sim_mcc = \"000\", sim_mnc = \"000\", method=\"sms\"):\n        super(WACodeRequest,self).__init__()\n        idx = StorageTools.getIdentity(cc + p_in)\n\n        self.p_in = p_in\n        self.__id = idx\n        self.cc = cc\n\n        self.addParam(\"cc\", cc)\n        self.addParam(\"in\", p_in)\n        self.addParam(\"lc\", \"GB\")\n        self.addParam(\"lg\", \"en\")\n        self.addParam(\"sim_mcc\", sim_mcc.zfill(3))\n        self.addParam(\"sim_mnc\", sim_mnc.zfill(3))\n        self.addParam(\"mcc\", sim_mcc.zfill(3))\n        self.addParam(\"mnc\", sim_mnc.zfill(3))\n        self.addParam(\"method\", method)\n\n        self.addParam(\"mistyped\", \"6\")\n        self.addParam(\"network_radio_type\", \"1\")\n        self.addParam(\"simnum\", \"1\")\n        self.addParam(\"s\", \"\")\n        self.addParam(\"copiedrc\", \"1\")\n        self.addParam(\"hasinrc\", \"1\")\n        self.addParam(\"rcmatch\", \"1\")\n        self.addParam(\"pid\", int(random.uniform(100,9999)))\n        self.addParam(\"rchash\", hashlib.sha256(os.urandom(20)).hexdigest())\n        self.addParam(\"anhash\", os.urandom(20))\n        self.addParam(\"extexist\", \"1\")\n        self.addParam(\"extstate\", \"1\")\n\n        self.addParam(\"token\", YowsupEnv.getCurrent().getToken(p_in))\n\n        self.url = \"v.whatsapp.net/v2/code\"\n\n        self.pvars = [\"status\",\"reason\",\"length\", \"method\", \"retry_after\", \"code\", \"param\"] +\\\n                    [\"login\", \"pw\", \"type\", \"expiration\", \"kind\", \"price\", \"cost\", \"currency\", \"price_expiration\"]\n\n        self.setParser(JSONResponseParser())\n\n    def send(self, parser = None):\n        if self.__id is not None:\n            request = WAExistsRequest(self.cc, self.p_in, self.__id)\n            result = request.send()\n            if result[\"status\"] == \"ok\":\n                return result\n            elif result[\"status\"] == \"fail\" and \"reason\" in result and result[\"reason\"] == \"blocked\":\n                return result\n\n        self.__id = WATools.generateIdentity()\n        self.addParam(\"id\", self.__id)\n\n        res = super(WACodeRequest, self).send(parser)\n        if res[\"status\"] == \"sent\":\n            StorageTools.writeIdentity(self.cc + self.p_in, self.__id)\n        return res\n", "comments": "", "content": "from yowsup.common.http.warequest import WARequest\nfrom yowsup.common.http.waresponseparser import JSONResponseParser\nfrom yowsup.common.tools import StorageTools, WATools\nfrom yowsup.registration.existsrequest import WAExistsRequest\nfrom yowsup.env import YowsupEnv\nimport random, hashlib, os\n\nclass WACodeRequest(WARequest):\n\n    def __init__(self,cc, p_in, mcc= \"000\", mnc = \"000\", sim_mcc = \"000\", sim_mnc = \"000\", method=\"sms\"):\n        super(WACodeRequest,self).__init__()\n        idx = StorageTools.getIdentity(cc + p_in)\n\n        self.p_in = p_in\n        self.__id = idx\n        self.cc = cc\n\n        self.addParam(\"cc\", cc)\n        self.addParam(\"in\", p_in)\n        self.addParam(\"lc\", \"GB\")\n        self.addParam(\"lg\", \"en\")\n        self.addParam(\"sim_mcc\", sim_mcc.zfill(3))\n        self.addParam(\"sim_mnc\", sim_mnc.zfill(3))\n        self.addParam(\"mcc\", sim_mcc.zfill(3))\n        self.addParam(\"mnc\", sim_mnc.zfill(3))\n        self.addParam(\"method\", method)\n\n        self.addParam(\"mistyped\", \"6\")\n        self.addParam(\"network_radio_type\", \"1\")\n        self.addParam(\"simnum\", \"1\")\n        self.addParam(\"s\", \"\")\n        self.addParam(\"copiedrc\", \"1\")\n        self.addParam(\"hasinrc\", \"1\")\n        self.addParam(\"rcmatch\", \"1\")\n        self.addParam(\"pid\", int(random.uniform(100,9999)))\n        self.addParam(\"rchash\", hashlib.sha256(os.urandom(20)).hexdigest())\n        self.addParam(\"anhash\", os.urandom(20))\n        self.addParam(\"extexist\", \"1\")\n        self.addParam(\"extstate\", \"1\")\n\n        self.addParam(\"token\", YowsupEnv.getCurrent().getToken(p_in))\n\n        self.url = \"v.whatsapp.net/v2/code\"\n\n        self.pvars = [\"status\",\"reason\",\"length\", \"method\", \"retry_after\", \"code\", \"param\"] +\\\n                    [\"login\", \"pw\", \"type\", \"expiration\", \"kind\", \"price\", \"cost\", \"currency\", \"price_expiration\"]\n\n        self.setParser(JSONResponseParser())\n\n    def send(self, parser = None):\n        if self.__id is not None:\n            request = WAExistsRequest(self.cc, self.p_in, self.__id)\n            result = request.send()\n            if result[\"status\"] == \"ok\":\n                return result\n            elif result[\"status\"] == \"fail\" and \"reason\" in result and result[\"reason\"] == \"blocked\":\n                return result\n\n        self.__id = WATools.generateIdentity()\n        self.addParam(\"id\", self.__id)\n\n        res = super(WACodeRequest, self).send(parser)\n        if res[\"status\"] == \"sent\":\n            StorageTools.writeIdentity(self.cc + self.p_in, self.__id)\n        return res\n", "description": "The python WhatsApp library", "file_name": "coderequest.py", "id": "be90d21b443f826e76a6b455bed65ad1", "language": "Python", "project_name": "yowsup", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tgalal-yowsup/tgalal-yowsup-03795cc/yowsup/registration/coderequest.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:01:40Z", "url": "https://github.com/tgalal/yowsup", "wiki": true}