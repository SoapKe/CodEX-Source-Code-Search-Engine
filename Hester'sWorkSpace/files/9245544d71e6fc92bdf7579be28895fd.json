{"author": "rg3", "code": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n)\n\n\nclass RtmpIE(InfoExtractor):\n    IE_DESC = False  \n    _VALID_URL = r'(?i)rtmp[est]?://.+'\n\n    _TESTS = [{\n        'url': 'rtmp://cp44293.edgefcs.net/ondemand?auth=daEcTdydfdqcsb8cZcDbAaCbhamacbbawaS-bw7dBb-bWG-GqpGFqCpNCnGoyL&aifp=v001&slist=public/unsecure/audio/2c97899446428e4301471a8cb72b4b97--audio--pmg-20110908-0900a_flv_aac_med_int.mp4',\n        'only_matching': True,\n    }, {\n        'url': 'rtmp://edge.live.hitbox.tv/live/dimak',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._generic_id(url)\n        title = self._generic_title(url)\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': [{\n                'url': url,\n                'ext': 'flv',\n                'format_id': compat_urlparse.urlparse(url).scheme,\n            }],\n        }\n\n\nclass MmsIE(InfoExtractor):\n    IE_DESC = False  \n    _VALID_URL = r'(?i)mms://.+'\n\n    _TEST = {\n        \n        'url': 'mms://kentro.kaist.ac.kr/200907/MilesReid(0709).wmv',\n        'info_dict': {\n            'id': 'MilesReid(0709)',\n            'ext': 'wmv',\n            'title': 'MilesReid(0709)',\n        },\n        'params': {\n            'skip_download': True,  \n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._generic_id(url)\n        title = self._generic_title(url)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': url,\n        }\n", "comments": "# Do not list\n# Do not list\n# Direct MMS link\n# rtsp downloads, requiring mplayer or mpv\n", "content": "from __future__ import unicode_literals\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urlparse,\n)\n\n\nclass RtmpIE(InfoExtractor):\n    IE_DESC = False  # Do not list\n    _VALID_URL = r'(?i)rtmp[est]?://.+'\n\n    _TESTS = [{\n        'url': 'rtmp://cp44293.edgefcs.net/ondemand?auth=daEcTdydfdqcsb8cZcDbAaCbhamacbbawaS-bw7dBb-bWG-GqpGFqCpNCnGoyL&aifp=v001&slist=public/unsecure/audio/2c97899446428e4301471a8cb72b4b97--audio--pmg-20110908-0900a_flv_aac_med_int.mp4',\n        'only_matching': True,\n    }, {\n        'url': 'rtmp://edge.live.hitbox.tv/live/dimak',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._generic_id(url)\n        title = self._generic_title(url)\n        return {\n            'id': video_id,\n            'title': title,\n            'formats': [{\n                'url': url,\n                'ext': 'flv',\n                'format_id': compat_urlparse.urlparse(url).scheme,\n            }],\n        }\n\n\nclass MmsIE(InfoExtractor):\n    IE_DESC = False  # Do not list\n    _VALID_URL = r'(?i)mms://.+'\n\n    _TEST = {\n        # Direct MMS link\n        'url': 'mms://kentro.kaist.ac.kr/200907/MilesReid(0709).wmv',\n        'info_dict': {\n            'id': 'MilesReid(0709)',\n            'ext': 'wmv',\n            'title': 'MilesReid(0709)',\n        },\n        'params': {\n            'skip_download': True,  # rtsp downloads, requiring mplayer or mpv\n        },\n    }\n\n    def _real_extract(self, url):\n        video_id = self._generic_id(url)\n        title = self._generic_title(url)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'url': url,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "commonprotocols.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/commonprotocols.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}