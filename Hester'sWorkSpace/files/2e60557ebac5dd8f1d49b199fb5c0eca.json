{"author": "reddit-archive", "code": "\n License Version 1.0. (the \"License\"); you may not use this file except in\n\n\n\n\n\n\n\n Software distributed under the License is distributed on an \"AS IS\" basis,\n WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n the specific language governing rights and limitations under the License.\n\n The Original Code is reddit.\n\n The Original Developer is the Initial Developer.  The Initial Developer of\n the Original Code is reddit Inc.\n\n All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n Inc. All Rights Reserved.\n\n\nimport hashlib\nimport hmac\nimport re\nimport time\n\nfrom pylons import app_globals as g\nfrom pylons import request\n\nfrom r2.config import feature\nfrom r2.controllers.reddit_base import RedditController\nfrom r2.lib.base import abort\nfrom r2.lib.csrf import csrf_exempt\nfrom r2.lib.db import queries\nfrom r2.lib.filters import markdown_souptest\nfrom r2.lib.message_to_email import (\n    parse_and_validate_reply_to_address,\n    queue_blocked_muted_email,\n)\nfrom r2.lib.souptest import SoupError\nfrom r2.lib.utils import constant_time_compare\nfrom r2.models import (\n    Account,\n    Message,\n    Subreddit,\n)\n\n\nMAX_TIMESTAMP_DEVIATION = 600\nZENDESK_PREFIX = \"- Please type your reply above this line -\"\n\n\ndef validate_mailgun_webhook(timestamp, token, signature):\n    \"\"\"Check whether this is a valid webhook sent by Mailgun.\n\n    See https://documentation.mailgun.com/user_manual.htmlsecuring-webhooks\n\n    NOTE:\n    A single Mailgun account is used for both outbound email (Mailgun HTTP API)\n    and inbound email (Mailgun Routes + MailgunWebhookController). As a result\n    the `mailgun_api_key` is used by both.\n\n    \"\"\"\n\n    message = ''.join((timestamp, token))\n    expected_mac = hmac.new(\n        g.secrets['mailgun_api_key'], message, hashlib.sha256).hexdigest()\n    if not constant_time_compare(expected_mac, signature):\n        g.stats.simple_event(\"mailgun.incoming.bad_signature\")\n        return False\n\n    if abs(int(timestamp) - time.time()) > MAX_TIMESTAMP_DEVIATION:\n        g.stats.simple_event(\"mailgun.incoming.bad_timestamp\")\n        return False\n\n    return True\n\n\nclass MailgunWebhookController(RedditController):\n    \"\"\"Handle POST requests from Mailgun generated by inbound emails.\"\"\"\n\n    @csrf_exempt\n    def POST_zendeskreply(self):\n        request_body = request.POST\n        recipient = request_body[\"recipient\"]\n        sender_email = request_body[\"sender\"]\n        from_ = request_body[\"from\"]\n        subject = request_body[\"subject\"]\n        body_plain = request_body[\"body-plain\"]\n        stripped_text = request_body[\"stripped-text\"]\n        timestamp = request_body[\"timestamp\"]\n        token = request_body[\"token\"]\n        signature = request_body[\"signature\"]\n        email_id = request_body[\"Message-Id\"]\n\n        if not validate_mailgun_webhook(timestamp, token, signature):\n             per Mailgun docs send a 406 so the message won't be retried\n            abort(406, \"invalid signature\")\n\n        message_id36 = parse_and_validate_reply_to_address(recipient)\n\n        if not message_id36:\n             per Mailgun docs send a 406 so the message won't be retried\n            abort(406, \"invalid message\")\n\n        parent = Message._byID36(message_id36, data=True)\n        to = Account._byID(parent.author_id, data=True)\n        sr = Subreddit._byID(parent.sr_id, data=True)\n\n        if stripped_text.startswith(ZENDESK_PREFIX):\n            stripped_text = stripped_text[len(ZENDESK_PREFIX):].lstrip()\n\n        if len(stripped_text) > 10000:\n            body = stripped_text[:10000] + \"\\n\\n--snipped--\"\n        else:\n            body = stripped_text\n\n        try:\n            markdown_souptest(body)\n        except SoupError:\n            g.log.warning(\"bad markdown in modmail email: %s\", body)\n            abort(406, \"invalid body\")\n\n        if parent.get_muted_user_in_conversation():\n            queue_blocked_muted_email(sr, parent, sender_email, email_id)\n            return\n\n         keep the subject consistent\n        message_subject = parent.subject\n        if not message_subject.startswith(\"re: \"):\n            message_subject = \"re: \" + message_subject\n\n         from_ is like '\"NAME (GROUP)\" <something@domain.zendesk.com>'\n        match = re.search(\"\\\"(?P<name>\\w+) [\\w ()]*\\\"\", from_)\n        from_sr = True\n        author = Account.system_user()\n\n        if match and match.group(\"name\") in g.live_config['modmail_account_map']:\n            zendesk_name = match.group(\"name\")\n            moderator_name = g.live_config['modmail_account_map'][zendesk_name]\n            moderator = Account._by_name(moderator_name)\n            if sr.is_moderator_with_perms(moderator, \"mail\"):\n                author = moderator\n                from_sr = False\n\n        message, inbox_rel = Message._new(\n            author=author,\n            to=to,\n            subject=message_subject,\n            body=body,\n            ip='0.0.0.0',\n            parent=parent,\n            sr=sr,\n            from_sr=from_sr,\n            can_send_email=False,\n            sent_via_email=True,\n            email_id=email_id,\n        )\n        message._commit()\n        queries.new_message(message, inbox_rel)\n        g.stats.simple_event(\"mailgun.incoming.success\")\n        g.stats.simple_event(\"modmail_email.incoming_email\")\n", "comments": "   check whether valid webhook sent mailgun       see https   documentation mailgun com user manual html securing webhooks      note      a single mailgun account used outbound email (mailgun http api)     inbound email (mailgun routes   mailgunwebhookcontroller)  as result      mailgun api key  used                message      join((timestamp  token))     expected mac   hmac new(         g secrets  mailgun api key    message  hashlib sha256) hexdigest()     constant time compare(expected mac  signature)          g stats simple event( mailgun incoming bad signature )         return false      abs(int(timestamp)   time time())   max timestamp deviation          g stats simple event( mailgun incoming bad timestamp )         return false      return true   class mailgunwebhookcontroller(redditcontroller)         handle post requests mailgun generated inbound emails        the contents file subject common public attribution    license version 1 0  (the  license )  may use file except    compliance license  you may obtain copy license    http   code reddit com license  the license based mozilla public    license version 1 1  sections 14 15 added cover use    software computer network provide limited attribution    original developer  in addition  exhibit a modified consistent    exhibit b        software distributed license distributed  as is  basis     without warranty of any kind  either express implied  see license    specific language governing rights limitations license        the original code reddit        the original developer initial developer   the initial developer    original code reddit inc        all portions code written reddit copyright (c) 2006 2015 reddit    inc  all rights reserved                                                                                       please type reply line        securing webhooks    per mailgun docs send 406 message retried    per mailgun docs send 406 message retried    keep subject consistent     like   name (group)   something domain zendesk com   ", "content": "# The contents of this file are subject to the Common Public Attribution\n# License Version 1.0. (the \"License\"); you may not use this file except in\n# compliance with the License. You may obtain a copy of the License at\n# http://code.reddit.com/LICENSE. The License is based on the Mozilla Public\n# License Version 1.1, but Sections 14 and 15 have been added to cover use of\n# software over a computer network and provide for limited attribution for the\n# Original Developer. In addition, Exhibit A has been modified to be consistent\n# with Exhibit B.\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for\n# the specific language governing rights and limitations under the License.\n#\n# The Original Code is reddit.\n#\n# The Original Developer is the Initial Developer.  The Initial Developer of\n# the Original Code is reddit Inc.\n#\n# All portions of the code written by reddit are Copyright (c) 2006-2015 reddit\n# Inc. All Rights Reserved.\n###############################################################################\n\nimport hashlib\nimport hmac\nimport re\nimport time\n\nfrom pylons import app_globals as g\nfrom pylons import request\n\nfrom r2.config import feature\nfrom r2.controllers.reddit_base import RedditController\nfrom r2.lib.base import abort\nfrom r2.lib.csrf import csrf_exempt\nfrom r2.lib.db import queries\nfrom r2.lib.filters import markdown_souptest\nfrom r2.lib.message_to_email import (\n    parse_and_validate_reply_to_address,\n    queue_blocked_muted_email,\n)\nfrom r2.lib.souptest import SoupError\nfrom r2.lib.utils import constant_time_compare\nfrom r2.models import (\n    Account,\n    Message,\n    Subreddit,\n)\n\n\nMAX_TIMESTAMP_DEVIATION = 600\nZENDESK_PREFIX = \"##- Please type your reply above this line -##\"\n\n\ndef validate_mailgun_webhook(timestamp, token, signature):\n    \"\"\"Check whether this is a valid webhook sent by Mailgun.\n\n    See https://documentation.mailgun.com/user_manual.html#securing-webhooks\n\n    NOTE:\n    A single Mailgun account is used for both outbound email (Mailgun HTTP API)\n    and inbound email (Mailgun Routes + MailgunWebhookController). As a result\n    the `mailgun_api_key` is used by both.\n\n    \"\"\"\n\n    message = ''.join((timestamp, token))\n    expected_mac = hmac.new(\n        g.secrets['mailgun_api_key'], message, hashlib.sha256).hexdigest()\n    if not constant_time_compare(expected_mac, signature):\n        g.stats.simple_event(\"mailgun.incoming.bad_signature\")\n        return False\n\n    if abs(int(timestamp) - time.time()) > MAX_TIMESTAMP_DEVIATION:\n        g.stats.simple_event(\"mailgun.incoming.bad_timestamp\")\n        return False\n\n    return True\n\n\nclass MailgunWebhookController(RedditController):\n    \"\"\"Handle POST requests from Mailgun generated by inbound emails.\"\"\"\n\n    @csrf_exempt\n    def POST_zendeskreply(self):\n        request_body = request.POST\n        recipient = request_body[\"recipient\"]\n        sender_email = request_body[\"sender\"]\n        from_ = request_body[\"from\"]\n        subject = request_body[\"subject\"]\n        body_plain = request_body[\"body-plain\"]\n        stripped_text = request_body[\"stripped-text\"]\n        timestamp = request_body[\"timestamp\"]\n        token = request_body[\"token\"]\n        signature = request_body[\"signature\"]\n        email_id = request_body[\"Message-Id\"]\n\n        if not validate_mailgun_webhook(timestamp, token, signature):\n            # per Mailgun docs send a 406 so the message won't be retried\n            abort(406, \"invalid signature\")\n\n        message_id36 = parse_and_validate_reply_to_address(recipient)\n\n        if not message_id36:\n            # per Mailgun docs send a 406 so the message won't be retried\n            abort(406, \"invalid message\")\n\n        parent = Message._byID36(message_id36, data=True)\n        to = Account._byID(parent.author_id, data=True)\n        sr = Subreddit._byID(parent.sr_id, data=True)\n\n        if stripped_text.startswith(ZENDESK_PREFIX):\n            stripped_text = stripped_text[len(ZENDESK_PREFIX):].lstrip()\n\n        if len(stripped_text) > 10000:\n            body = stripped_text[:10000] + \"\\n\\n--snipped--\"\n        else:\n            body = stripped_text\n\n        try:\n            markdown_souptest(body)\n        except SoupError:\n            g.log.warning(\"bad markdown in modmail email: %s\", body)\n            abort(406, \"invalid body\")\n\n        if parent.get_muted_user_in_conversation():\n            queue_blocked_muted_email(sr, parent, sender_email, email_id)\n            return\n\n        # keep the subject consistent\n        message_subject = parent.subject\n        if not message_subject.startswith(\"re: \"):\n            message_subject = \"re: \" + message_subject\n\n        # from_ is like '\"NAME (GROUP)\" <something@domain.zendesk.com>'\n        match = re.search(\"\\\"(?P<name>\\w+) [\\w ()]*\\\"\", from_)\n        from_sr = True\n        author = Account.system_user()\n\n        if match and match.group(\"name\") in g.live_config['modmail_account_map']:\n            zendesk_name = match.group(\"name\")\n            moderator_name = g.live_config['modmail_account_map'][zendesk_name]\n            moderator = Account._by_name(moderator_name)\n            if sr.is_moderator_with_perms(moderator, \"mail\"):\n                author = moderator\n                from_sr = False\n\n        message, inbox_rel = Message._new(\n            author=author,\n            to=to,\n            subject=message_subject,\n            body=body,\n            ip='0.0.0.0',\n            parent=parent,\n            sr=sr,\n            from_sr=from_sr,\n            can_send_email=False,\n            sent_via_email=True,\n            email_id=email_id,\n        )\n        message._commit()\n        queries.new_message(message, inbox_rel)\n        g.stats.simple_event(\"mailgun.incoming.success\")\n        g.stats.simple_event(\"modmail_email.incoming_email\")\n", "description": "historical code from reddit.com", "file_name": "mailgun.py", "id": "2e60557ebac5dd8f1d49b199fb5c0eca", "language": "Python", "project_name": "reddit", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/reddit-archive-reddit/reddit-archive-reddit-753b174/r2/r2/controllers/mailgun.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:55:36Z", "url": "https://github.com/reddit-archive/reddit", "wiki": true}