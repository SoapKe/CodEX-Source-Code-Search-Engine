{"author": "tensorflow", "code": "\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ==============================================================================\n\"\"\"Trains a GANEstimator on MNIST data.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n\nimport numpy as np\nimport scipy.misc\nfrom six.moves import xrange   pylint: disable=redefined-builtin\nimport tensorflow as tf\n\nfrom mnist import data_provider\nfrom mnist import networks\n\ntfgan = tf.contrib.gan\nflags = tf.flags\n\nflags.DEFINE_integer('batch_size', 32,\n                     'The number of images in each train batch.')\n\nflags.DEFINE_integer('max_number_of_steps', 20000,\n                     'The maximum number of gradient steps.')\n\nflags.DEFINE_integer(\n    'noise_dims', 64, 'Dimensions of the generator noise vector')\n\nflags.DEFINE_string('dataset_dir', None, 'Location of data.')\n\nflags.DEFINE_string('eval_dir', '/tmp/mnist-estimator/',\n                    'Directory where the results are saved to.')\n\nFLAGS = flags.FLAGS\n\n\ndef _get_train_input_fn(batch_size, noise_dims, dataset_dir=None,\n                        num_threads=4):\n  def train_input_fn():\n    with tf.device('/cpu:0'):\n      images, _, _ = data_provider.provide_data(\n          'train', batch_size, dataset_dir, num_threads=num_threads)\n    noise = tf.random_normal([batch_size, noise_dims])\n    return noise, images\n  return train_input_fn\n\n\ndef _get_predict_input_fn(batch_size, noise_dims):\n  def predict_input_fn():\n    noise = tf.random_normal([batch_size, noise_dims])\n    return noise\n  return predict_input_fn\n\n\ndef _unconditional_generator(noise, mode):\n  \"\"\"MNIST generator with extra argument for tf.Estimator's `mode`.\"\"\"\n  is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n  return networks.unconditional_generator(noise, is_training=is_training)\n\n\ndef main(_):\n   Initialize GANEstimator with options and hyperparameters.\n  gan_estimator = tfgan.estimator.GANEstimator(\n      generator_fn=_unconditional_generator,\n      discriminator_fn=networks.unconditional_discriminator,\n      generator_loss_fn=tfgan.losses.wasserstein_generator_loss,\n      discriminator_loss_fn=tfgan.losses.wasserstein_discriminator_loss,\n      generator_optimizer=tf.train.AdamOptimizer(0.001, 0.5),\n      discriminator_optimizer=tf.train.AdamOptimizer(0.0001, 0.5),\n      add_summaries=tfgan.estimator.SummaryType.IMAGES)\n\n   Train estimator.\n  train_input_fn = _get_train_input_fn(\n      FLAGS.batch_size, FLAGS.noise_dims, FLAGS.dataset_dir)\n  gan_estimator.train(train_input_fn, max_steps=FLAGS.max_number_of_steps)\n\n   Run inference.\n  predict_input_fn = _get_predict_input_fn(36, FLAGS.noise_dims)\n  prediction_iterable = gan_estimator.predict(predict_input_fn)\n  predictions = [prediction_iterable.next() for _ in xrange(36)]\n\n   Nicely tile.\n  image_rows = [np.concatenate(predictions[i:i+6], axis=0) for i in\n                range(0, 36, 6)]\n  tiled_image = np.concatenate(image_rows, axis=1)\n\n   Write to disk.\n  if not tf.gfile.Exists(FLAGS.eval_dir):\n    tf.gfile.MakeDirs(FLAGS.eval_dir)\n  scipy.misc.imsave(os.path.join(FLAGS.eval_dir, 'unconditional_gan.png'),\n                    np.squeeze(tiled_image, axis=2))\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "comments": "   trains ganestimator mnist data        future   import absolute import   future   import division   future   import print function  import os  import numpy np import scipy misc six moves import xrange    pylint  disable redefined builtin import tensorflow tf  mnist import data provider mnist import networks  tfgan   tf contrib gan flags   tf flags  flags define integer( batch size   32                        the number images train batch  )  flags define integer( max number steps   20000                        the maximum number gradient steps  )  flags define integer(      noise dims   64   dimensions generator noise vector )  flags define string( dataset dir   none   location data  )  flags define string( eval dir     tmp mnist estimator                         directory results saved  )  flags   flags flags   def  get train input fn(batch size  noise dims  dataset dir none                          num threads 4)    def train input fn()      tf device(  cpu 0 )        images         data provider provide data(            train   batch size  dataset dir  num threads num threads)     noise   tf random normal( batch size  noise dims )     return noise  images   return train input fn   def  get predict input fn(batch size  noise dims)    def predict input fn()      noise   tf random normal( batch size  noise dims )     return noise   return predict input fn   def  unconditional generator(noise  mode)       mnist generator extra argument tf estimator  mode         copyright 2017 the tensorflow authors  all rights reserved        licensed apache license  version 2 0 (the  license )     may use file except compliance license     you may obtain copy license           http   www apache org licenses license 2 0       unless required applicable law agreed writing  software    distributed license distributed  as is  basis     without warranties or conditions of any kind  either express implied     see license specific language governing permissions    limitations license                                                                                       pylint  disable redefined builtin    initialize ganestimator options hyperparameters     train estimator     run inference     nicely tile     write disk  ", "content": "# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Trains a GANEstimator on MNIST data.\"\"\"\n\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport os\n\nimport numpy as np\nimport scipy.misc\nfrom six.moves import xrange  # pylint: disable=redefined-builtin\nimport tensorflow as tf\n\nfrom mnist import data_provider\nfrom mnist import networks\n\ntfgan = tf.contrib.gan\nflags = tf.flags\n\nflags.DEFINE_integer('batch_size', 32,\n                     'The number of images in each train batch.')\n\nflags.DEFINE_integer('max_number_of_steps', 20000,\n                     'The maximum number of gradient steps.')\n\nflags.DEFINE_integer(\n    'noise_dims', 64, 'Dimensions of the generator noise vector')\n\nflags.DEFINE_string('dataset_dir', None, 'Location of data.')\n\nflags.DEFINE_string('eval_dir', '/tmp/mnist-estimator/',\n                    'Directory where the results are saved to.')\n\nFLAGS = flags.FLAGS\n\n\ndef _get_train_input_fn(batch_size, noise_dims, dataset_dir=None,\n                        num_threads=4):\n  def train_input_fn():\n    with tf.device('/cpu:0'):\n      images, _, _ = data_provider.provide_data(\n          'train', batch_size, dataset_dir, num_threads=num_threads)\n    noise = tf.random_normal([batch_size, noise_dims])\n    return noise, images\n  return train_input_fn\n\n\ndef _get_predict_input_fn(batch_size, noise_dims):\n  def predict_input_fn():\n    noise = tf.random_normal([batch_size, noise_dims])\n    return noise\n  return predict_input_fn\n\n\ndef _unconditional_generator(noise, mode):\n  \"\"\"MNIST generator with extra argument for tf.Estimator's `mode`.\"\"\"\n  is_training = (mode == tf.estimator.ModeKeys.TRAIN)\n  return networks.unconditional_generator(noise, is_training=is_training)\n\n\ndef main(_):\n  # Initialize GANEstimator with options and hyperparameters.\n  gan_estimator = tfgan.estimator.GANEstimator(\n      generator_fn=_unconditional_generator,\n      discriminator_fn=networks.unconditional_discriminator,\n      generator_loss_fn=tfgan.losses.wasserstein_generator_loss,\n      discriminator_loss_fn=tfgan.losses.wasserstein_discriminator_loss,\n      generator_optimizer=tf.train.AdamOptimizer(0.001, 0.5),\n      discriminator_optimizer=tf.train.AdamOptimizer(0.0001, 0.5),\n      add_summaries=tfgan.estimator.SummaryType.IMAGES)\n\n  # Train estimator.\n  train_input_fn = _get_train_input_fn(\n      FLAGS.batch_size, FLAGS.noise_dims, FLAGS.dataset_dir)\n  gan_estimator.train(train_input_fn, max_steps=FLAGS.max_number_of_steps)\n\n  # Run inference.\n  predict_input_fn = _get_predict_input_fn(36, FLAGS.noise_dims)\n  prediction_iterable = gan_estimator.predict(predict_input_fn)\n  predictions = [prediction_iterable.next() for _ in xrange(36)]\n\n  # Nicely tile.\n  image_rows = [np.concatenate(predictions[i:i+6], axis=0) for i in\n                range(0, 36, 6)]\n  tiled_image = np.concatenate(image_rows, axis=1)\n\n  # Write to disk.\n  if not tf.gfile.Exists(FLAGS.eval_dir):\n    tf.gfile.MakeDirs(FLAGS.eval_dir)\n  scipy.misc.imsave(os.path.join(FLAGS.eval_dir, 'unconditional_gan.png'),\n                    np.squeeze(tiled_image, axis=2))\n\n\nif __name__ == '__main__':\n  tf.app.run()\n", "description": "Models and examples built with TensorFlow", "file_name": "train.py", "id": "8d7684198e7e945dc4920d8f2524290d", "language": "Python", "project_name": "models", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/tensorflow-models/tensorflow-models-7e4c66b/research/gan/mnist_estimator/train.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:59:36Z", "url": "https://github.com/tensorflow/models", "wiki": true}