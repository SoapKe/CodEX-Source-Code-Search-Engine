{"author": "HelloZeroNet", "code": "import os\nimport re\n\nimport gevent\n\nfrom Plugin import PluginManager\nfrom Config import config\n\n\n\narchive_cache = {}\n\n\ndef closeArchive(archive_path):\n    if archive_path in archive_cache:\n        del archive_cache[archive_path]\n\n\ndef openArchive(archive_path):\n    if archive_path not in archive_cache:\n        if archive_path.endswith(\"tar.gz\"):\n            import tarfile\n            archive_cache[archive_path] = tarfile.open(archive_path, \"r:gz\")\n        elif archive_path.endswith(\"tar.bz2\"):\n            import tarfile\n            archive_cache[archive_path] = tarfile.open(archive_path, \"r:bz2\")\n        else:\n            import zipfile\n            archive_cache[archive_path] = zipfile.ZipFile(archive_path)\n        gevent.spawn_later(5, lambda: closeArchive(archive_path))  \n\n    archive = archive_cache[archive_path]\n    return archive\n\ndef openArchiveFile(archive_path, path_within):\n    archive = openArchive(archive_path)\n    if archive_path.endswith(\".zip\"):\n        return archive.open(path_within)\n    else:\n        return archive.extractfile(path_within.encode(\"utf8\"))\n\n\n@PluginManager.registerTo(\"UiRequest\")\nclass UiRequestPlugin(object):\n    def actionSiteMedia(self, path, **kwargs):\n        if \".zip/\" in path or \".tar.gz/\" in path:\n            path_parts = self.parsePath(path)\n            file_path = u\"%s/%s/%s\" % (config.data_dir, path_parts[\"address\"], path_parts[\"inner_path\"].decode(\"utf8\"))\n            match = re.match(\"^(.*\\.(?:tar.gz|tar.bz2|zip))/(.*)\", file_path)\n            archive_path, path_within = match.groups()\n            if not os.path.isfile(archive_path):\n                site = self.server.site_manager.get(path_parts[\"address\"])\n                if not site:\n                    return self.actionSiteAddPrompt(path)\n                \n                result = site.needFile(site.storage.getInnerPath(archive_path), priority=10)\n                \n                site.updateWebsocket(file_done=site.storage.getInnerPath(file_path))\n                if not result:\n                    return self.error404(path)\n\n            header_allow_ajax = False\n            if self.get.get(\"ajax_key\"):\n                requester_site = self.server.site_manager.get(path_parts[\"request_address\"])\n                if self.get[\"ajax_key\"] == requester_site.settings[\"ajax_key\"]:\n                    header_allow_ajax = True\n                else:\n                    return self.error403(\"Invalid ajax_key\")\n\n            try:\n                file = openArchiveFile(archive_path, path_within)\n                content_type = self.getContentType(file_path)\n                self.sendHeader(200, content_type=content_type, noscript=kwargs.get(\"header_noscript\", False), allow_ajax=header_allow_ajax)\n                return self.streamFile(file)\n            except Exception as err:\n                self.log.debug(\"Error opening archive file: %s\" % err)\n                return self.error404(path)\n\n        return super(UiRequestPlugin, self).actionSiteMedia(path, **kwargs)\n\n    def streamFile(self, file):\n        for i in range(100):  \n            try:\n                block = file.read(60 * 1024)\n                if block:\n                    yield block\n                else:\n                    raise StopIteration\n            except StopIteration:\n                file.close()\n                break\n\n\n@PluginManager.registerTo(\"SiteStorage\")\nclass SiteStoragePlugin(object):\n    def isFile(self, inner_path):\n        if \".zip/\" in inner_path or \".tar.gz/\" in inner_path:\n            match = re.match(\"^(.*\\.(?:tar.gz|tar.bz2|zip))/(.*)\", inner_path)\n            archive_inner_path, path_within = match.groups()\n            return super(SiteStoragePlugin, self).isFile(archive_inner_path)\n        else:\n            return super(SiteStoragePlugin, self).isFile(inner_path)\n\n    def walk(self, inner_path, *args, **kwags):\n        if \".zip\" in inner_path or \".tar.gz\" in inner_path:\n            match = re.match(\"^(.*\\.(?:tar.gz|tar.bz2|zip))(.*)\", inner_path)\n            archive_inner_path, path_within = match.groups()\n            archive = openArchive(self.getPath(archive_inner_path))\n            if archive_inner_path.endswith(\".zip\"):\n                namelist = [name for name in archive.namelist() if not name.endswith(\"/\")]\n            else:\n                namelist = [item.name for item in archive.getmembers() if not item.isdir()]\n            return namelist\n\n        else:\n            return super(SiteStoragePlugin, self).walk(inner_path, *args, **kwags)\n\n", "comments": "  keep archive open faster reponse times large sites    close 5 sec    wait file downloads    send virutal file path download finished event remove loading screen    read max 6mb ", "content": "import os\nimport re\n\nimport gevent\n\nfrom Plugin import PluginManager\nfrom Config import config\n\n\n# Keep archive open for faster reponse times for large sites\narchive_cache = {}\n\n\ndef closeArchive(archive_path):\n    if archive_path in archive_cache:\n        del archive_cache[archive_path]\n\n\ndef openArchive(archive_path):\n    if archive_path not in archive_cache:\n        if archive_path.endswith(\"tar.gz\"):\n            import tarfile\n            archive_cache[archive_path] = tarfile.open(archive_path, \"r:gz\")\n        elif archive_path.endswith(\"tar.bz2\"):\n            import tarfile\n            archive_cache[archive_path] = tarfile.open(archive_path, \"r:bz2\")\n        else:\n            import zipfile\n            archive_cache[archive_path] = zipfile.ZipFile(archive_path)\n        gevent.spawn_later(5, lambda: closeArchive(archive_path))  # Close after 5 sec\n\n    archive = archive_cache[archive_path]\n    return archive\n\ndef openArchiveFile(archive_path, path_within):\n    archive = openArchive(archive_path)\n    if archive_path.endswith(\".zip\"):\n        return archive.open(path_within)\n    else:\n        return archive.extractfile(path_within.encode(\"utf8\"))\n\n\n@PluginManager.registerTo(\"UiRequest\")\nclass UiRequestPlugin(object):\n    def actionSiteMedia(self, path, **kwargs):\n        if \".zip/\" in path or \".tar.gz/\" in path:\n            path_parts = self.parsePath(path)\n            file_path = u\"%s/%s/%s\" % (config.data_dir, path_parts[\"address\"], path_parts[\"inner_path\"].decode(\"utf8\"))\n            match = re.match(\"^(.*\\.(?:tar.gz|tar.bz2|zip))/(.*)\", file_path)\n            archive_path, path_within = match.groups()\n            if not os.path.isfile(archive_path):\n                site = self.server.site_manager.get(path_parts[\"address\"])\n                if not site:\n                    return self.actionSiteAddPrompt(path)\n                # Wait until file downloads\n                result = site.needFile(site.storage.getInnerPath(archive_path), priority=10)\n                # Send virutal file path download finished event to remove loading screen\n                site.updateWebsocket(file_done=site.storage.getInnerPath(file_path))\n                if not result:\n                    return self.error404(path)\n\n            header_allow_ajax = False\n            if self.get.get(\"ajax_key\"):\n                requester_site = self.server.site_manager.get(path_parts[\"request_address\"])\n                if self.get[\"ajax_key\"] == requester_site.settings[\"ajax_key\"]:\n                    header_allow_ajax = True\n                else:\n                    return self.error403(\"Invalid ajax_key\")\n\n            try:\n                file = openArchiveFile(archive_path, path_within)\n                content_type = self.getContentType(file_path)\n                self.sendHeader(200, content_type=content_type, noscript=kwargs.get(\"header_noscript\", False), allow_ajax=header_allow_ajax)\n                return self.streamFile(file)\n            except Exception as err:\n                self.log.debug(\"Error opening archive file: %s\" % err)\n                return self.error404(path)\n\n        return super(UiRequestPlugin, self).actionSiteMedia(path, **kwargs)\n\n    def streamFile(self, file):\n        for i in range(100):  # Read max 6MB\n            try:\n                block = file.read(60 * 1024)\n                if block:\n                    yield block\n                else:\n                    raise StopIteration\n            except StopIteration:\n                file.close()\n                break\n\n\n@PluginManager.registerTo(\"SiteStorage\")\nclass SiteStoragePlugin(object):\n    def isFile(self, inner_path):\n        if \".zip/\" in inner_path or \".tar.gz/\" in inner_path:\n            match = re.match(\"^(.*\\.(?:tar.gz|tar.bz2|zip))/(.*)\", inner_path)\n            archive_inner_path, path_within = match.groups()\n            return super(SiteStoragePlugin, self).isFile(archive_inner_path)\n        else:\n            return super(SiteStoragePlugin, self).isFile(inner_path)\n\n    def walk(self, inner_path, *args, **kwags):\n        if \".zip\" in inner_path or \".tar.gz\" in inner_path:\n            match = re.match(\"^(.*\\.(?:tar.gz|tar.bz2|zip))(.*)\", inner_path)\n            archive_inner_path, path_within = match.groups()\n            archive = openArchive(self.getPath(archive_inner_path))\n            if archive_inner_path.endswith(\".zip\"):\n                namelist = [name for name in archive.namelist() if not name.endswith(\"/\")]\n            else:\n                namelist = [item.name for item in archive.getmembers() if not item.isdir()]\n            return namelist\n\n        else:\n            return super(SiteStoragePlugin, self).walk(inner_path, *args, **kwags)\n\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "FilePackPlugin.py", "id": "ea7eab62f9579ca49071d6b0f8c1e221", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/FilePack/FilePackPlugin.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}