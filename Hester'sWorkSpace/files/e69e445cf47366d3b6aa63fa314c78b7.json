{"author": "deepfakes", "code": "import json, pickle\nclass Serializer(object):\n    ext = \"wtf\"\n    woptions = \"????\"\n    roptions = \"????\"\n\n    @classmethod\n    def marshal(cls, input_data):\n        raise NotImplementedError()\n\n    @classmethod\n    def unmarshal(cls, input_string):\n        raise NotImplementedError()\n\n\nclass YAMLSerializer(Serializer):\n    ext = \"yml\"\n    woptions = \"w\"\n    roptions = \"r\"\n\n    @classmethod\n    def marshal(cls, input_data):\n        try:\n            import yaml\n        except ImportError:\n            print(\"You must have PyYAML installed to use YAMLSerializer\")\n        return yaml.dump(input_data, default_flow_style=False)\n\n    @classmethod\n    def unmarshal(cls, input_string):\n        try:\n            import yaml\n        except ImportError:\n            print(\"You must have PyYAML installed to use YAMLSerializer\")\n        return yaml.load(input_string)\n\n\n\nclass JSONSerializer(Serializer):\n    ext = \"json\"\n    woptions = \"w\"\n    roptions = \"r\"\n\n    @classmethod\n    def marshal(cls, input_data):\n        return json.dumps(input_data, indent=2)\n\n    @classmethod\n    def unmarshal(cls, input_string):\n        return json.loads(input_string)\n\n\nclass PickleSerializer(Serializer):\n    ext = \"p\"\n    woptions = \"wb\"\n    roptions = \"rb\"\n\n    @classmethod\n    def marshal(cls, input_data):\n        return pickle.dumps(input_data)\n\n    @classmethod\n    def unmarshal(cls, input_bytes):\n        return pickle.loads(input_bytes)\n\ndef get_serializer(serializer):\n    if serializer == \"yaml\":\n        return YAMLSerializer\n    if serializer == \"json\":\n        return JSONSerializer\n    if serializer == \"pickle\":\n        return PickleSerializer\n    raise NotImplementedError()\n\n\ndef get_serializer_fromext(ext):\n    if ext in (\".yaml\", \".yml\"):\n        return YAMLSerializer\n    if ext == \".json\":\n        return JSONSerializer\n    if ext == \".p\":\n        return PickleSerializer\n    raise NotImplementedError(\"No serializer matching that file type.\")\n", "comments": "", "content": "import json, pickle\nclass Serializer(object):\n    ext = \"wtf\"\n    woptions = \"????\"\n    roptions = \"????\"\n\n    @classmethod\n    def marshal(cls, input_data):\n        raise NotImplementedError()\n\n    @classmethod\n    def unmarshal(cls, input_string):\n        raise NotImplementedError()\n\n\nclass YAMLSerializer(Serializer):\n    ext = \"yml\"\n    woptions = \"w\"\n    roptions = \"r\"\n\n    @classmethod\n    def marshal(cls, input_data):\n        try:\n            import yaml\n        except ImportError:\n            print(\"You must have PyYAML installed to use YAMLSerializer\")\n        return yaml.dump(input_data, default_flow_style=False)\n\n    @classmethod\n    def unmarshal(cls, input_string):\n        try:\n            import yaml\n        except ImportError:\n            print(\"You must have PyYAML installed to use YAMLSerializer\")\n        return yaml.load(input_string)\n\n\n\nclass JSONSerializer(Serializer):\n    ext = \"json\"\n    woptions = \"w\"\n    roptions = \"r\"\n\n    @classmethod\n    def marshal(cls, input_data):\n        return json.dumps(input_data, indent=2)\n\n    @classmethod\n    def unmarshal(cls, input_string):\n        return json.loads(input_string)\n\n\nclass PickleSerializer(Serializer):\n    ext = \"p\"\n    woptions = \"wb\"\n    roptions = \"rb\"\n\n    @classmethod\n    def marshal(cls, input_data):\n        return pickle.dumps(input_data)\n\n    @classmethod\n    def unmarshal(cls, input_bytes):\n        return pickle.loads(input_bytes)\n\ndef get_serializer(serializer):\n    if serializer == \"yaml\":\n        return YAMLSerializer\n    if serializer == \"json\":\n        return JSONSerializer\n    if serializer == \"pickle\":\n        return PickleSerializer\n    raise NotImplementedError()\n\n\ndef get_serializer_fromext(ext):\n    if ext in (\".yaml\", \".yml\"):\n        return YAMLSerializer\n    if ext == \".json\":\n        return JSONSerializer\n    if ext == \".p\":\n        return PickleSerializer\n    raise NotImplementedError(\"No serializer matching that file type.\")\n", "description": "Non official project based on original /r/Deepfakes thread. Many thanks to him!", "file_name": "Serializer.py", "id": "e69e445cf47366d3b6aa63fa314c78b7", "language": "Python", "project_name": "faceswap", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/deepfakes-faceswap/deepfakes-faceswap-6ff64ef/lib/Serializer.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:27:43Z", "url": "https://github.com/deepfakes/faceswap", "wiki": true}