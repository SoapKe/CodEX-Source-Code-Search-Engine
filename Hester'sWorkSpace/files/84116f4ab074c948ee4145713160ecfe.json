{"author": "odoo", "code": "# -*- coding: utf-8 -*-\n\n\nfrom odoo import api, fields, models\n\n\nclass AccountAnalyticLine(models.Model):\n    _inherit = 'account.analytic.line'\n\n    @api.model\n    def default_get(self, field_list):\n        result = super(AccountAnalyticLine, self).default_get(field_list)\n        if 'employee_id' in field_list and result.get('user_id'):\n            result['employee_id'] = self.env['hr.employee'].search([('user_id', '=', result['user_id'])], limit=1).id\n        return result\n\n    task_id = fields.Many2one('project.task', 'Task', index=True)\n    project_id = fields.Many2one('project.project', 'Project', domain=[('allow_timesheets', '=', True)])\n\n    employee_id = fields.Many2one('hr.employee', \"Employee\")\n    department_id = fields.Many2one('hr.department', \"Department\", related='employee_id.department_id', store=True, readonly=True)\n\n    @api.onchange('project_id')\n    def onchange_project_id(self):\n        self.task_id = False\n\n    @api.onchange('employee_id')\n    def _onchange_employee_id(self):\n        self.user_id = self.employee_id.user_id\n\n    @api.model\n    def create(self, vals):\n        vals = self._timesheet_preprocess(vals)\n        return super(AccountAnalyticLine, self).create(vals)\n\n    @api.multi\n    def write(self, vals):\n        vals = self._timesheet_preprocess(vals)\n        return super(AccountAnalyticLine, self).write(vals)\n\n    def _timesheet_preprocess(self, vals):\n        \n        \n        if vals.get('project_id') and not vals.get('account_id'):\n            project = self.env['project.project'].browse(vals.get('project_id'))\n            vals['account_id'] = project.analytic_account_id.id\n        \n        if vals.get('employee_id') and not vals.get('user_id'):\n            employee = self.env['hr.employee'].browse(vals['employee_id'])\n            vals['user_id'] = employee.user_id.id\n        \n        if not vals.get('employee_id') and vals.get('project_id'):\n            if vals.get('user_id'):\n                ts_user_id = vals['user_id']\n            else:\n                ts_user_id = self._default_user()\n            vals['employee_id'] = self.env['hr.employee'].search([('user_id', '=', ts_user_id)], limit=1).id\n        return vals\n", "comments": "    deduce field values one given              overrride compute fly field computed fields               param values  dict values  create  write                      coding  utf 8        part odoo  see license file full copyright licensing details     project implies analytic account    employee implies user    compute employee timesheet lines  makes sense lines ", "content": "# -*- coding: utf-8 -*-\n# Part of Odoo. See LICENSE file for full copyright and licensing details.\n\nfrom odoo import api, fields, models\n\n\nclass AccountAnalyticLine(models.Model):\n    _inherit = 'account.analytic.line'\n\n    @api.model\n    def default_get(self, field_list):\n        result = super(AccountAnalyticLine, self).default_get(field_list)\n        if 'employee_id' in field_list and result.get('user_id'):\n            result['employee_id'] = self.env['hr.employee'].search([('user_id', '=', result['user_id'])], limit=1).id\n        return result\n\n    task_id = fields.Many2one('project.task', 'Task', index=True)\n    project_id = fields.Many2one('project.project', 'Project', domain=[('allow_timesheets', '=', True)])\n\n    employee_id = fields.Many2one('hr.employee', \"Employee\")\n    department_id = fields.Many2one('hr.department', \"Department\", related='employee_id.department_id', store=True, readonly=True)\n\n    @api.onchange('project_id')\n    def onchange_project_id(self):\n        self.task_id = False\n\n    @api.onchange('employee_id')\n    def _onchange_employee_id(self):\n        self.user_id = self.employee_id.user_id\n\n    @api.model\n    def create(self, vals):\n        vals = self._timesheet_preprocess(vals)\n        return super(AccountAnalyticLine, self).create(vals)\n\n    @api.multi\n    def write(self, vals):\n        vals = self._timesheet_preprocess(vals)\n        return super(AccountAnalyticLine, self).write(vals)\n\n    def _timesheet_preprocess(self, vals):\n        \"\"\" Deduce other field values from the one given.\n            Overrride this to compute on the fly some field that can not be computed fields.\n            :param values: dict values for `create`or `write`.\n        \"\"\"\n        # project implies analytic account\n        if vals.get('project_id') and not vals.get('account_id'):\n            project = self.env['project.project'].browse(vals.get('project_id'))\n            vals['account_id'] = project.analytic_account_id.id\n        # employee implies user\n        if vals.get('employee_id') and not vals.get('user_id'):\n            employee = self.env['hr.employee'].browse(vals['employee_id'])\n            vals['user_id'] = employee.user_id.id\n        # compute employee only for timesheet lines, makes no sense for other lines\n        if not vals.get('employee_id') and vals.get('project_id'):\n            if vals.get('user_id'):\n                ts_user_id = vals['user_id']\n            else:\n                ts_user_id = self._default_user()\n            vals['employee_id'] = self.env['hr.employee'].search([('user_id', '=', ts_user_id)], limit=1).id\n        return vals\n", "description": "Odoo. Open Source Apps To Grow Your Business.", "file_name": "hr_timesheet.py", "id": "84116f4ab074c948ee4145713160ecfe", "language": "Python", "project_name": "odoo", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/odoo-odoo/odoo-odoo-b25250f/addons/hr_timesheet/models/hr_timesheet.py", "save_time": "", "source": "", "update_at": "2018-03-18T08:30:22Z", "url": "https://github.com/odoo/odoo", "wiki": true}