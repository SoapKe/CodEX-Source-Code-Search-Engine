{"author": "XX-net", "code": "\n\n\nimport sys\nimport os\nimport threading\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath( os.path.join(current_path, os.pardir, os.pardir, os.pardir))\ndata_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, 'data'))\nmodule_data_path = os.path.join(data_path, 'x_tunnel')\npython_path = os.path.abspath( os.path.join(root_path, 'python27', '1.0'))\n\nsys.path.append(root_path)\n\nnoarch_lib = os.path.abspath( os.path.join(python_path, 'lib', 'noarch'))\nsys.path.append(noarch_lib)\n\nif sys.platform == \"win32\":\n    win32_lib = os.path.abspath( os.path.join(python_path, 'lib', 'win32'))\n    sys.path.append(win32_lib)\nelif sys.platform.startswith(\"linux\"):\n    linux_lib = os.path.abspath( os.path.join(python_path, 'lib', 'linux'))\n    sys.path.append(linux_lib)\nelif sys.platform == \"darwin\":\n    darwin_lib = os.path.abspath( os.path.join(python_path, 'lib', 'darwin'))\n    sys.path.append(darwin_lib)\n    extra_lib = \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python\"\n    sys.path.append(extra_lib)\n\n\nimport utils\nimport xlog\nlogger = xlog.getLogger(\"cloudfront_front\")\nlogger.set_buffer(500)\n\nfrom front_base.openssl_wrap import SSLContext\nfrom front_base.connect_creator import ConnectCreator\nfrom front_base.check_ip import CheckIp\nfrom front_base.host_manager import HostManagerBase\n\nfrom config import Config\n\n\nclass CheckAllIp(object):\n    def __init__(self, check_ip, host):\n        self.check_ip = check_ip\n        self.host = host\n        self.lock = threading.Lock()\n\n        self.in_fd = open(\"good_ip.txt\", \"r\")\n        self.out_fd = open(\n            os.path.join(module_data_path, \"cloudfront_checked_ip.txt\"),\n            \"w\"\n        )\n\n    def get_ip(self):\n        with self.lock:\n            while True:\n                line = self.in_fd.readline()\n                if not line:\n                    raise Exception()\n\n                try:\n                    ip = line.split()[0]\n                    return ip\n                except:\n                    continue\n\n    def write_ip(self, ip, host, handshake):\n        with self.lock:\n            self.out_fd.write(\"%s %s gws %d 0 0\\n\" % (ip, host, handshake))\n            self.out_fd.flush()\n\n    def checker(self):\n        while True:\n            try:\n                ip = self.get_ip()\n            except Exception as e:\n                xlog.info(\"no ip left\")\n                return\n\n            try:\n                res = self.check_ip.check_ip(ip, host=host)\n            except Exception as e:\n                xlog.warn(\"check fail:%s except:%r\", e)\n                continue\n\n            if not res or not res.ok:\n                xlog.debug(\"check fail:%s fail\", ip)\n                continue\n\n            self.write_ip(ip, res.domain, res.handshake_time)\n\n    def run(self):\n        for i in range(0, 10):\n            threading.Thread(target=self.checker).start()\n\n\ndef check_all_ip(check_ip):\n    check = CheckAllIp(check_ip, \"scan1.xx-net.net\")\n    check.run()\n\n\nif __name__ == \"__main__\":\n    \n    # case 2: ip + domain\n    \n\n    default_ip = \"54.192.37.196\"\n\n    sni = \"afdsfafa.cloudfront.net\"\n    host = \"scan1.xx-net.net\"\n    if len(sys.argv) > 1:\n        ip = sys.argv[1]\n        if not utils.check_ip_valid(ip):\n            ip = default_ip\n            host = sys.argv[1]\n    else:\n        ip = default_ip\n        print(\"Usage: check_ip.py [ip] [top_domain] [wait_time=0]\")\n    xlog.info(\"test ip:%s\", ip)\n\n    if len(sys.argv) > 2:\n        host = sys.argv[2]\n    xlog.info(\"host:%s\", host)\n\n    if len(sys.argv) > 3:\n        wait_time = int(sys.argv[3])\n    else:\n        wait_time = 0\n\n    config_path = os.path.join(module_data_path, \"cloudfront_front.json\")\n    config = Config(config_path)\n\n    openssl_context = SSLContext(logger, support_http2=True)\n    host_manager = HostManagerBase()\n    connect_creator = ConnectCreator(logger, config, openssl_context, host_manager, debug=True)\n    check_ip = CheckIp(logger, config, connect_creator)\n\n    #check_all_ip(check_ip)\n    #exit(0)\n\n    res = check_ip.check_ip(ip, sni=sni, host=host, wait_time=wait_time)\n    if not res:\n        xlog.warn(\"connect fail\")\n    elif res.ok:\n        xlog.info(\"success, domain:%s handshake:%d\", res.host, res.handshake_time)\n    else:\n        xlog.warn(\"not support\")", "comments": "   usr bin env python2    coding utf 8    case 1  ip    case 2  ip   domain       connect use domain   check ip(check ip)   exit(0) ", "content": "#!/usr/bin/env python2\n# coding:utf-8\n\nimport sys\nimport os\nimport threading\n\ncurrent_path = os.path.dirname(os.path.abspath(__file__))\nroot_path = os.path.abspath( os.path.join(current_path, os.pardir, os.pardir, os.pardir))\ndata_path = os.path.abspath(os.path.join(root_path, os.pardir, os.pardir, 'data'))\nmodule_data_path = os.path.join(data_path, 'x_tunnel')\npython_path = os.path.abspath( os.path.join(root_path, 'python27', '1.0'))\n\nsys.path.append(root_path)\n\nnoarch_lib = os.path.abspath( os.path.join(python_path, 'lib', 'noarch'))\nsys.path.append(noarch_lib)\n\nif sys.platform == \"win32\":\n    win32_lib = os.path.abspath( os.path.join(python_path, 'lib', 'win32'))\n    sys.path.append(win32_lib)\nelif sys.platform.startswith(\"linux\"):\n    linux_lib = os.path.abspath( os.path.join(python_path, 'lib', 'linux'))\n    sys.path.append(linux_lib)\nelif sys.platform == \"darwin\":\n    darwin_lib = os.path.abspath( os.path.join(python_path, 'lib', 'darwin'))\n    sys.path.append(darwin_lib)\n    extra_lib = \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python\"\n    sys.path.append(extra_lib)\n\n\nimport utils\nimport xlog\nlogger = xlog.getLogger(\"cloudfront_front\")\nlogger.set_buffer(500)\n\nfrom front_base.openssl_wrap import SSLContext\nfrom front_base.connect_creator import ConnectCreator\nfrom front_base.check_ip import CheckIp\nfrom front_base.host_manager import HostManagerBase\n\nfrom config import Config\n\n\nclass CheckAllIp(object):\n    def __init__(self, check_ip, host):\n        self.check_ip = check_ip\n        self.host = host\n        self.lock = threading.Lock()\n\n        self.in_fd = open(\"good_ip.txt\", \"r\")\n        self.out_fd = open(\n            os.path.join(module_data_path, \"cloudfront_checked_ip.txt\"),\n            \"w\"\n        )\n\n    def get_ip(self):\n        with self.lock:\n            while True:\n                line = self.in_fd.readline()\n                if not line:\n                    raise Exception()\n\n                try:\n                    ip = line.split()[0]\n                    return ip\n                except:\n                    continue\n\n    def write_ip(self, ip, host, handshake):\n        with self.lock:\n            self.out_fd.write(\"%s %s gws %d 0 0\\n\" % (ip, host, handshake))\n            self.out_fd.flush()\n\n    def checker(self):\n        while True:\n            try:\n                ip = self.get_ip()\n            except Exception as e:\n                xlog.info(\"no ip left\")\n                return\n\n            try:\n                res = self.check_ip.check_ip(ip, host=host)\n            except Exception as e:\n                xlog.warn(\"check fail:%s except:%r\", e)\n                continue\n\n            if not res or not res.ok:\n                xlog.debug(\"check fail:%s fail\", ip)\n                continue\n\n            self.write_ip(ip, res.domain, res.handshake_time)\n\n    def run(self):\n        for i in range(0, 10):\n            threading.Thread(target=self.checker).start()\n\n\ndef check_all_ip(check_ip):\n    check = CheckAllIp(check_ip, \"scan1.xx-net.net\")\n    check.run()\n\n\nif __name__ == \"__main__\":\n    # case 1: only ip\n    # case 2: ip + domain\n    #    connect use domain\n\n    default_ip = \"54.192.37.196\"\n\n    sni = \"afdsfafa.cloudfront.net\"\n    host = \"scan1.xx-net.net\"\n    if len(sys.argv) > 1:\n        ip = sys.argv[1]\n        if not utils.check_ip_valid(ip):\n            ip = default_ip\n            host = sys.argv[1]\n    else:\n        ip = default_ip\n        print(\"Usage: check_ip.py [ip] [top_domain] [wait_time=0]\")\n    xlog.info(\"test ip:%s\", ip)\n\n    if len(sys.argv) > 2:\n        host = sys.argv[2]\n    xlog.info(\"host:%s\", host)\n\n    if len(sys.argv) > 3:\n        wait_time = int(sys.argv[3])\n    else:\n        wait_time = 0\n\n    config_path = os.path.join(module_data_path, \"cloudfront_front.json\")\n    config = Config(config_path)\n\n    openssl_context = SSLContext(logger, support_http2=True)\n    host_manager = HostManagerBase()\n    connect_creator = ConnectCreator(logger, config, openssl_context, host_manager, debug=True)\n    check_ip = CheckIp(logger, config, connect_creator)\n\n    #check_all_ip(check_ip)\n    #exit(0)\n\n    res = check_ip.check_ip(ip, sni=sni, host=host, wait_time=wait_time)\n    if not res:\n        xlog.warn(\"connect fail\")\n    elif res.ok:\n        xlog.info(\"success, domain:%s handshake:%d\", res.host, res.handshake_time)\n    else:\n        xlog.warn(\"not support\")", "description": "a web proxy tool", "file_name": "check_ip.py", "id": "f82ce06f31296db68c8332bb3cac46e6", "language": "Python", "project_name": "XX-Net", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/XX-net-XX-Net/XX-net-XX-Net-673a005/code/default/x_tunnel/local/cloudfront_front/check_ip.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:03Z", "url": "https://github.com/XX-net/XX-Net", "wiki": true}