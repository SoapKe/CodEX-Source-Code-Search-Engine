{"author": "rg3", "code": "from __future__ import unicode_literals\n\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    parse_iso8601,\n)\n\n\nclass VidmeIE(InfoExtractor):\n    IE_NAME = 'vidme'\n    _VALID_URL = r'https?://vid\\.me/(?:e/)?(?P<id>[\\da-zA-Z]{,5})(?:[^\\da-zA-Z]|$)'\n    _TESTS = [{\n        'url': 'https://vid.me/QNB',\n        'md5': 'f42d05e7149aeaec5c037b17e5d3dc82',\n        'info_dict': {\n            'id': 'QNB',\n            'ext': 'mp4',\n            'title': 'Fishing for piranha - the easy way',\n            'description': 'source: https://www.facebook.com/photo.php?v=312276045600871',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1406313244,\n            'upload_date': '20140725',\n            'age_limit': 0,\n            'duration': 119.92,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n    }, {\n        'url': 'https://vid.me/Gc6M',\n        'md5': 'f42d05e7149aeaec5c037b17e5d3dc82',\n        'info_dict': {\n            'id': 'Gc6M',\n            'ext': 'mp4',\n            'title': 'O Mere Dil ke chain - Arnav and Khushi VM',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1441211642,\n            'upload_date': '20150902',\n            'uploader': 'SunshineM',\n            'uploader_id': '3552827',\n            'age_limit': 0,\n            'duration': 223.72,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'https://vid.me/4Iib',\n        'info_dict': {\n            'id': '4Iib',\n            'ext': 'mp4',\n            'title': 'The Carver',\n            'description': 'md5:e9c24870018ae8113be936645b93ba3c',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1433203629,\n            'upload_date': '20150602',\n            'uploader': 'Thomas',\n            'uploader_id': '109747',\n            'age_limit': 0,\n            'duration': 97.859999999999999,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'https://vid.me/e/Wmur',\n        'info_dict': {\n            'id': 'Wmur',\n            'ext': 'mp4',\n            'title': 'naked smoking & stretching',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1430931613,\n            'upload_date': '20150506',\n            'uploader': 'naked-yogi',\n            'uploader_id': '1638622',\n            'age_limit': 18,\n            'duration': 653.26999999999998,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        \n        'url': 'https://vid.me/dzGJ',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://vid.me/Ox3G',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://vid.me/KTPm',\n        'only_matching': True,\n    }, {\n        \n        'url': 'https://vid.me/e5g',\n        'info_dict': {\n            'id': 'e5g',\n            'ext': 'mp4',\n            'title': 'Video upload (e5g)',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1401480195,\n            'upload_date': '20140530',\n            'uploader': None,\n            'uploader_id': None,\n            'age_limit': 0,\n            'duration': 483,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        try:\n            response = self._download_json(\n                'https://api.vid.me/videoByUrl/%s' % video_id, video_id)\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 400:\n                response = self._parse_json(e.cause.read(), video_id)\n            else:\n                raise\n\n        error = response.get('error')\n        if error:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error), expected=True)\n\n        video = response['video']\n\n        if video.get('state') == 'deleted':\n            raise ExtractorError(\n                'Vidme said: Sorry, this video has been deleted.',\n                expected=True)\n\n        if video.get('state') in ('user-disabled', 'suspended'):\n            raise ExtractorError(\n                'Vidme said: This video has been suspended either due to a copyright claim, '\n                'or for violating the terms of use.',\n                expected=True)\n\n        formats = []\n        for f in video.get('formats', []):\n            format_url = f.get('uri')\n            if not format_url or not isinstance(format_url, compat_str):\n                continue\n            format_type = f.get('type')\n            if format_type == 'dash':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, video_id, mpd_id='dash', fatal=False))\n            elif format_type == 'hls':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'format_id': f.get('type'),\n                    'url': format_url,\n                    'width': int_or_none(f.get('width')),\n                    'height': int_or_none(f.get('height')),\n                    'preference': 0 if f.get('type', '').endswith(\n                        'clip') else 1,\n                })\n\n        if not formats and video.get('complete_url'):\n            formats.append({\n                'url': video.get('complete_url'),\n                'width': int_or_none(video.get('width')),\n                'height': int_or_none(video.get('height')),\n            })\n\n        self._sort_formats(formats)\n\n        title = video['title']\n        description = video.get('description')\n        thumbnail = video.get('thumbnail_url')\n        timestamp = parse_iso8601(video.get('date_created'), ' ')\n        uploader = video.get('user', {}).get('username')\n        uploader_id = video.get('user', {}).get('user_id')\n        age_limit = 18 if video.get('nsfw') is True else 0\n        duration = float_or_none(video.get('duration'))\n        view_count = int_or_none(video.get('view_count'))\n        like_count = int_or_none(video.get('likes_count'))\n        comment_count = int_or_none(video.get('comment_count'))\n\n        return {\n            'id': video_id,\n            'title': title or 'Video upload (%s)' % video_id,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'age_limit': age_limit,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'comment_count': comment_count,\n            'formats': formats,\n        }\n\n\nclass VidmeListBaseIE(InfoExtractor):\n    \n    _LIMIT = 100\n\n    def _entries(self, user_id, user_name):\n        for page_num in itertools.count(1):\n            page = self._download_json(\n                'https://api.vid.me/videos/%s?user=%s&limit=%d&offset=%d'\n                % (self._API_ITEM, user_id, self._LIMIT, (page_num - 1) * self._LIMIT),\n                user_name, 'Downloading user %s page %d' % (self._API_ITEM, page_num))\n\n            videos = page.get('videos', [])\n            if not videos:\n                break\n\n            for video in videos:\n                video_url = video.get('full_url') or video.get('embed_url')\n                if video_url:\n                    yield self.url_result(video_url, VidmeIE.ie_key())\n\n            total = int_or_none(page.get('page', {}).get('total'))\n            if total and self._LIMIT * page_num >= total:\n                break\n\n    def _real_extract(self, url):\n        user_name = self._match_id(url)\n\n        user_id = self._download_json(\n            'https://api.vid.me/userByUsername?username=%s' % user_name,\n            user_name)['user']['user_id']\n\n        return self.playlist_result(\n            self._entries(user_id, user_name), user_id,\n            '%s - %s' % (user_name, self._TITLE))\n\n\nclass VidmeUserIE(VidmeListBaseIE):\n    IE_NAME = 'vidme:user'\n    _VALID_URL = r'https?://vid\\.me/(?:e/)?(?P<id>[\\da-zA-Z_-]{6,})(?!/likes)(?:[^\\da-zA-Z_-]|$)'\n    _API_ITEM = 'list'\n    _TITLE = 'Videos'\n    _TESTS = [{\n        'url': 'https://vid.me/MasakoX',\n        'info_dict': {\n            'id': '16112341',\n            'title': 'MasakoX - %s' % _TITLE,\n        },\n        'playlist_mincount': 191,\n    }, {\n        'url': 'https://vid.me/unsQuare_netWork',\n        'only_matching': True,\n    }]\n\n\nclass VidmeUserLikesIE(VidmeListBaseIE):\n    IE_NAME = 'vidme:user:likes'\n    _VALID_URL = r'https?://vid\\.me/(?:e/)?(?P<id>[\\da-zA-Z_-]{6,})/likes'\n    _API_ITEM = 'likes'\n    _TITLE = 'Likes'\n    _TESTS = [{\n        'url': 'https://vid.me/ErinAlexis/likes',\n        'info_dict': {\n            'id': '6483530',\n            'title': 'ErinAlexis - %s' % _TITLE,\n        },\n        'playlist_mincount': 415,\n    }, {\n        'url': 'https://vid.me/Kaleidoscope-Ish/likes',\n        'only_matching': True,\n    }]\n", "comments": "# tests uploader field\n# nsfw test from http://naked-yogi.tumblr.com/post/118312946248/naked-smoking-stretching\n# nsfw, user-disabled\n# suspended\n# deleted\n# no formats in the API response\n# Max possible limit according to https://docs.vid.me/#api-Videos-List\n", "content": "from __future__ import unicode_literals\n\nimport itertools\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    float_or_none,\n    parse_iso8601,\n)\n\n\nclass VidmeIE(InfoExtractor):\n    IE_NAME = 'vidme'\n    _VALID_URL = r'https?://vid\\.me/(?:e/)?(?P<id>[\\da-zA-Z]{,5})(?:[^\\da-zA-Z]|$)'\n    _TESTS = [{\n        'url': 'https://vid.me/QNB',\n        'md5': 'f42d05e7149aeaec5c037b17e5d3dc82',\n        'info_dict': {\n            'id': 'QNB',\n            'ext': 'mp4',\n            'title': 'Fishing for piranha - the easy way',\n            'description': 'source: https://www.facebook.com/photo.php?v=312276045600871',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1406313244,\n            'upload_date': '20140725',\n            'age_limit': 0,\n            'duration': 119.92,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n    }, {\n        'url': 'https://vid.me/Gc6M',\n        'md5': 'f42d05e7149aeaec5c037b17e5d3dc82',\n        'info_dict': {\n            'id': 'Gc6M',\n            'ext': 'mp4',\n            'title': 'O Mere Dil ke chain - Arnav and Khushi VM',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1441211642,\n            'upload_date': '20150902',\n            'uploader': 'SunshineM',\n            'uploader_id': '3552827',\n            'age_limit': 0,\n            'duration': 223.72,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # tests uploader field\n        'url': 'https://vid.me/4Iib',\n        'info_dict': {\n            'id': '4Iib',\n            'ext': 'mp4',\n            'title': 'The Carver',\n            'description': 'md5:e9c24870018ae8113be936645b93ba3c',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1433203629,\n            'upload_date': '20150602',\n            'uploader': 'Thomas',\n            'uploader_id': '109747',\n            'age_limit': 0,\n            'duration': 97.859999999999999,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # nsfw test from http://naked-yogi.tumblr.com/post/118312946248/naked-smoking-stretching\n        'url': 'https://vid.me/e/Wmur',\n        'info_dict': {\n            'id': 'Wmur',\n            'ext': 'mp4',\n            'title': 'naked smoking & stretching',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1430931613,\n            'upload_date': '20150506',\n            'uploader': 'naked-yogi',\n            'uploader_id': '1638622',\n            'age_limit': 18,\n            'duration': 653.26999999999998,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }, {\n        # nsfw, user-disabled\n        'url': 'https://vid.me/dzGJ',\n        'only_matching': True,\n    }, {\n        # suspended\n        'url': 'https://vid.me/Ox3G',\n        'only_matching': True,\n    }, {\n        # deleted\n        'url': 'https://vid.me/KTPm',\n        'only_matching': True,\n    }, {\n        # no formats in the API response\n        'url': 'https://vid.me/e5g',\n        'info_dict': {\n            'id': 'e5g',\n            'ext': 'mp4',\n            'title': 'Video upload (e5g)',\n            'thumbnail': r're:^https?://.*\\.jpg',\n            'timestamp': 1401480195,\n            'upload_date': '20140530',\n            'uploader': None,\n            'uploader_id': None,\n            'age_limit': 0,\n            'duration': 483,\n            'view_count': int,\n            'like_count': int,\n            'comment_count': int,\n        },\n        'params': {\n            'skip_download': True,\n        },\n    }]\n\n    def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        try:\n            response = self._download_json(\n                'https://api.vid.me/videoByUrl/%s' % video_id, video_id)\n        except ExtractorError as e:\n            if isinstance(e.cause, compat_HTTPError) and e.cause.code == 400:\n                response = self._parse_json(e.cause.read(), video_id)\n            else:\n                raise\n\n        error = response.get('error')\n        if error:\n            raise ExtractorError(\n                '%s returned error: %s' % (self.IE_NAME, error), expected=True)\n\n        video = response['video']\n\n        if video.get('state') == 'deleted':\n            raise ExtractorError(\n                'Vidme said: Sorry, this video has been deleted.',\n                expected=True)\n\n        if video.get('state') in ('user-disabled', 'suspended'):\n            raise ExtractorError(\n                'Vidme said: This video has been suspended either due to a copyright claim, '\n                'or for violating the terms of use.',\n                expected=True)\n\n        formats = []\n        for f in video.get('formats', []):\n            format_url = f.get('uri')\n            if not format_url or not isinstance(format_url, compat_str):\n                continue\n            format_type = f.get('type')\n            if format_type == 'dash':\n                formats.extend(self._extract_mpd_formats(\n                    format_url, video_id, mpd_id='dash', fatal=False))\n            elif format_type == 'hls':\n                formats.extend(self._extract_m3u8_formats(\n                    format_url, video_id, 'mp4', entry_protocol='m3u8_native',\n                    m3u8_id='hls', fatal=False))\n            else:\n                formats.append({\n                    'format_id': f.get('type'),\n                    'url': format_url,\n                    'width': int_or_none(f.get('width')),\n                    'height': int_or_none(f.get('height')),\n                    'preference': 0 if f.get('type', '').endswith(\n                        'clip') else 1,\n                })\n\n        if not formats and video.get('complete_url'):\n            formats.append({\n                'url': video.get('complete_url'),\n                'width': int_or_none(video.get('width')),\n                'height': int_or_none(video.get('height')),\n            })\n\n        self._sort_formats(formats)\n\n        title = video['title']\n        description = video.get('description')\n        thumbnail = video.get('thumbnail_url')\n        timestamp = parse_iso8601(video.get('date_created'), ' ')\n        uploader = video.get('user', {}).get('username')\n        uploader_id = video.get('user', {}).get('user_id')\n        age_limit = 18 if video.get('nsfw') is True else 0\n        duration = float_or_none(video.get('duration'))\n        view_count = int_or_none(video.get('view_count'))\n        like_count = int_or_none(video.get('likes_count'))\n        comment_count = int_or_none(video.get('comment_count'))\n\n        return {\n            'id': video_id,\n            'title': title or 'Video upload (%s)' % video_id,\n            'description': description,\n            'thumbnail': thumbnail,\n            'uploader': uploader,\n            'uploader_id': uploader_id,\n            'age_limit': age_limit,\n            'timestamp': timestamp,\n            'duration': duration,\n            'view_count': view_count,\n            'like_count': like_count,\n            'comment_count': comment_count,\n            'formats': formats,\n        }\n\n\nclass VidmeListBaseIE(InfoExtractor):\n    # Max possible limit according to https://docs.vid.me/#api-Videos-List\n    _LIMIT = 100\n\n    def _entries(self, user_id, user_name):\n        for page_num in itertools.count(1):\n            page = self._download_json(\n                'https://api.vid.me/videos/%s?user=%s&limit=%d&offset=%d'\n                % (self._API_ITEM, user_id, self._LIMIT, (page_num - 1) * self._LIMIT),\n                user_name, 'Downloading user %s page %d' % (self._API_ITEM, page_num))\n\n            videos = page.get('videos', [])\n            if not videos:\n                break\n\n            for video in videos:\n                video_url = video.get('full_url') or video.get('embed_url')\n                if video_url:\n                    yield self.url_result(video_url, VidmeIE.ie_key())\n\n            total = int_or_none(page.get('page', {}).get('total'))\n            if total and self._LIMIT * page_num >= total:\n                break\n\n    def _real_extract(self, url):\n        user_name = self._match_id(url)\n\n        user_id = self._download_json(\n            'https://api.vid.me/userByUsername?username=%s' % user_name,\n            user_name)['user']['user_id']\n\n        return self.playlist_result(\n            self._entries(user_id, user_name), user_id,\n            '%s - %s' % (user_name, self._TITLE))\n\n\nclass VidmeUserIE(VidmeListBaseIE):\n    IE_NAME = 'vidme:user'\n    _VALID_URL = r'https?://vid\\.me/(?:e/)?(?P<id>[\\da-zA-Z_-]{6,})(?!/likes)(?:[^\\da-zA-Z_-]|$)'\n    _API_ITEM = 'list'\n    _TITLE = 'Videos'\n    _TESTS = [{\n        'url': 'https://vid.me/MasakoX',\n        'info_dict': {\n            'id': '16112341',\n            'title': 'MasakoX - %s' % _TITLE,\n        },\n        'playlist_mincount': 191,\n    }, {\n        'url': 'https://vid.me/unsQuare_netWork',\n        'only_matching': True,\n    }]\n\n\nclass VidmeUserLikesIE(VidmeListBaseIE):\n    IE_NAME = 'vidme:user:likes'\n    _VALID_URL = r'https?://vid\\.me/(?:e/)?(?P<id>[\\da-zA-Z_-]{6,})/likes'\n    _API_ITEM = 'likes'\n    _TITLE = 'Likes'\n    _TESTS = [{\n        'url': 'https://vid.me/ErinAlexis/likes',\n        'info_dict': {\n            'id': '6483530',\n            'title': 'ErinAlexis - %s' % _TITLE,\n        },\n        'playlist_mincount': 415,\n    }, {\n        'url': 'https://vid.me/Kaleidoscope-Ish/likes',\n        'only_matching': True,\n    }]\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "vidme.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/vidme.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}