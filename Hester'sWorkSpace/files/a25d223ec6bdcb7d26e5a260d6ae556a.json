{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    qualities,\n    remove_start,\n)\n\n\nclass WrzutaIE(InfoExtractor):\n    IE_NAME = 'wrzuta.pl'\n\n    _VALID_URL = r'https?://(?P<uploader>[0-9a-zA-Z]+)\\.wrzuta\\.pl/(?P<typ>film|audio)/(?P<id>[0-9a-zA-Z]+)'\n\n    _TESTS = [{\n        'url': 'http://laboratoriumdextera.wrzuta.pl/film/aq4hIZWrkBu/nike_football_the_last_game',\n        'md5': '9e67e05bed7c03b82488d87233a9efe7',\n        'info_dict': {\n            'id': 'aq4hIZWrkBu',\n            'ext': 'mp4',\n            'title': 'Nike Football: The Last Game',\n            'duration': 307,\n            'uploader_id': 'laboratoriumdextera',\n            'description': 'md5:7fb5ef3c21c5893375fda51d9b15d9cd',\n        },\n        'skip': 'Redirected to wrzuta.pl',\n    }, {\n        'url': 'http://vexling.wrzuta.pl/audio/01xBFabGXu6/james_horner_-_into_the_na_39_vi_world_bonus',\n        'md5': 'f80564fb5a2ec6ec59705ae2bf2ba56d',\n        'info_dict': {\n            'id': '01xBFabGXu6',\n            'ext': 'mp3',\n            'title': 'James Horner - Into The Na\\'vi World [Bonus]',\n            'description': 'md5:30a70718b2cd9df3120fce4445b0263b',\n            'duration': 95,\n            'uploader_id': 'vexling',\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        typ = mobj.group('typ')\n        uploader = mobj.group('uploader')\n\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        if urlh.geturl() == 'http://www.wrzuta.pl/':\n            raise ExtractorError('Video removed', expected=True)\n\n        quality = qualities(['SD', 'MQ', 'HQ', 'HD'])\n\n        audio_table = {'flv': 'mp3', 'webm': 'ogg', '???': 'mp3'}\n\n        embedpage = self._download_json('http://www.wrzuta.pl/npp/embed/%s/%s' % (uploader, video_id), video_id)\n\n        formats = []\n        for media in embedpage['url']:\n            fmt = media['type'].split('@')[0]\n            if typ == 'audio':\n                ext = audio_table.get(fmt, fmt)\n            else:\n                ext = fmt\n\n            formats.append({\n                'format_id': '%s_%s' % (ext, media['quality'].lower()),\n                'url': media['url'],\n                'ext': ext,\n                'quality': quality(media['quality']),\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n            'duration': int_or_none(embedpage['duration']),\n            'uploader_id': uploader,\n            'description': self._og_search_description(webpage),\n            'age_limit': embedpage.get('minimalAge', 0),\n        }\n\n\nclass WrzutaPlaylistIE(InfoExtractor):\n    \n\n    IE_NAME = 'wrzuta.pl:playlist'\n    _VALID_URL = r'https?://(?P<uploader>[0-9a-zA-Z]+)\\.wrzuta\\.pl/playlista/(?P<id>[0-9a-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://miromak71.wrzuta.pl/playlista/7XfO4vE84iR/moja_muza',\n        'playlist_mincount': 14,\n        'info_dict': {\n            'id': '7XfO4vE84iR',\n            'title': 'Moja muza',\n        },\n    }, {\n        'url': 'http://heroesf70.wrzuta.pl/playlista/6Nj3wQHx756/lipiec_-_lato_2015_muzyka_swiata',\n        'playlist_mincount': 144,\n        'info_dict': {\n            'id': '6Nj3wQHx756',\n            'title': 'Lipiec - Lato 2015 Muzyka \u015awiata',\n        },\n    }, {\n        'url': 'http://miromak71.wrzuta.pl/playlista/7XfO4vE84iR',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n        uploader = mobj.group('uploader')\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        playlist_size = int_or_none(self._html_search_regex(\n            (r'<div[^>]+class=[\"\\']playlist-counter[\"\\'][^>]*>\\d+/(\\d+)',\n             r'<div[^>]+class=[\"\\']all-counter[\"\\'][^>]*>(.+?)</div>'),\n            webpage, 'playlist size', default=None))\n\n        playlist_title = remove_start(\n            self._og_search_title(webpage), 'Playlista: ')\n\n        entries = []\n        if playlist_size:\n            entries = [\n                self.url_result(entry_url)\n                for _, entry_url in re.findall(\n                    r'<a[^>]+href=([\"\\'])(http.+?)\\1[^>]+class=[\"\\']playlist-file-page',\n                    webpage)]\n            if playlist_size > len(entries):\n                playlist_content = self._download_json(\n                    'http://%s.wrzuta.pl/xhr/get_playlist_offset/%s' % (uploader, playlist_id),\n                    playlist_id,\n                    'Downloading playlist JSON',\n                    'Unable to download playlist JSON')\n                entries.extend([\n                    self.url_result(entry['filelink'])\n                    for entry in playlist_content.get('files', []) if entry.get('filelink')])\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "comments": "\n        this class covers extraction of wrzuta playlist entries\n        the extraction process bases on following steps:\n        * collect information of playlist size\n        * download all entries provided on\n          the playlist webpage (the playlist is split\n          on two pages: first directly reached from webpage\n          second: downloaded on demand by ajax call and rendered\n          using the ajax call response)\n        * in case size of extracted entries not reached total number of entries\n          use the ajax call to collect the remaining entries\n    \n \n# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    qualities,\n    remove_start,\n)\n\n\nclass WrzutaIE(InfoExtractor):\n    IE_NAME = 'wrzuta.pl'\n\n    _VALID_URL = r'https?://(?P<uploader>[0-9a-zA-Z]+)\\.wrzuta\\.pl/(?P<typ>film|audio)/(?P<id>[0-9a-zA-Z]+)'\n\n    _TESTS = [{\n        'url': 'http://laboratoriumdextera.wrzuta.pl/film/aq4hIZWrkBu/nike_football_the_last_game',\n        'md5': '9e67e05bed7c03b82488d87233a9efe7',\n        'info_dict': {\n            'id': 'aq4hIZWrkBu',\n            'ext': 'mp4',\n            'title': 'Nike Football: The Last Game',\n            'duration': 307,\n            'uploader_id': 'laboratoriumdextera',\n            'description': 'md5:7fb5ef3c21c5893375fda51d9b15d9cd',\n        },\n        'skip': 'Redirected to wrzuta.pl',\n    }, {\n        'url': 'http://vexling.wrzuta.pl/audio/01xBFabGXu6/james_horner_-_into_the_na_39_vi_world_bonus',\n        'md5': 'f80564fb5a2ec6ec59705ae2bf2ba56d',\n        'info_dict': {\n            'id': '01xBFabGXu6',\n            'ext': 'mp3',\n            'title': 'James Horner - Into The Na\\'vi World [Bonus]',\n            'description': 'md5:30a70718b2cd9df3120fce4445b0263b',\n            'duration': 95,\n            'uploader_id': 'vexling',\n        },\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        video_id = mobj.group('id')\n        typ = mobj.group('typ')\n        uploader = mobj.group('uploader')\n\n        webpage, urlh = self._download_webpage_handle(url, video_id)\n\n        if urlh.geturl() == 'http://www.wrzuta.pl/':\n            raise ExtractorError('Video removed', expected=True)\n\n        quality = qualities(['SD', 'MQ', 'HQ', 'HD'])\n\n        audio_table = {'flv': 'mp3', 'webm': 'ogg', '???': 'mp3'}\n\n        embedpage = self._download_json('http://www.wrzuta.pl/npp/embed/%s/%s' % (uploader, video_id), video_id)\n\n        formats = []\n        for media in embedpage['url']:\n            fmt = media['type'].split('@')[0]\n            if typ == 'audio':\n                ext = audio_table.get(fmt, fmt)\n            else:\n                ext = fmt\n\n            formats.append({\n                'format_id': '%s_%s' % (ext, media['quality'].lower()),\n                'url': media['url'],\n                'ext': ext,\n                'quality': quality(media['quality']),\n            })\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': self._og_search_title(webpage),\n            'thumbnail': self._og_search_thumbnail(webpage),\n            'formats': formats,\n            'duration': int_or_none(embedpage['duration']),\n            'uploader_id': uploader,\n            'description': self._og_search_description(webpage),\n            'age_limit': embedpage.get('minimalAge', 0),\n        }\n\n\nclass WrzutaPlaylistIE(InfoExtractor):\n    \"\"\"\n        this class covers extraction of wrzuta playlist entries\n        the extraction process bases on following steps:\n        * collect information of playlist size\n        * download all entries provided on\n          the playlist webpage (the playlist is split\n          on two pages: first directly reached from webpage\n          second: downloaded on demand by ajax call and rendered\n          using the ajax call response)\n        * in case size of extracted entries not reached total number of entries\n          use the ajax call to collect the remaining entries\n    \"\"\"\n\n    IE_NAME = 'wrzuta.pl:playlist'\n    _VALID_URL = r'https?://(?P<uploader>[0-9a-zA-Z]+)\\.wrzuta\\.pl/playlista/(?P<id>[0-9a-zA-Z]+)'\n    _TESTS = [{\n        'url': 'http://miromak71.wrzuta.pl/playlista/7XfO4vE84iR/moja_muza',\n        'playlist_mincount': 14,\n        'info_dict': {\n            'id': '7XfO4vE84iR',\n            'title': 'Moja muza',\n        },\n    }, {\n        'url': 'http://heroesf70.wrzuta.pl/playlista/6Nj3wQHx756/lipiec_-_lato_2015_muzyka_swiata',\n        'playlist_mincount': 144,\n        'info_dict': {\n            'id': '6Nj3wQHx756',\n            'title': 'Lipiec - Lato 2015 Muzyka \u015awiata',\n        },\n    }, {\n        'url': 'http://miromak71.wrzuta.pl/playlista/7XfO4vE84iR',\n        'only_matching': True,\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        playlist_id = mobj.group('id')\n        uploader = mobj.group('uploader')\n\n        webpage = self._download_webpage(url, playlist_id)\n\n        playlist_size = int_or_none(self._html_search_regex(\n            (r'<div[^>]+class=[\"\\']playlist-counter[\"\\'][^>]*>\\d+/(\\d+)',\n             r'<div[^>]+class=[\"\\']all-counter[\"\\'][^>]*>(.+?)</div>'),\n            webpage, 'playlist size', default=None))\n\n        playlist_title = remove_start(\n            self._og_search_title(webpage), 'Playlista: ')\n\n        entries = []\n        if playlist_size:\n            entries = [\n                self.url_result(entry_url)\n                for _, entry_url in re.findall(\n                    r'<a[^>]+href=([\"\\'])(http.+?)\\1[^>]+class=[\"\\']playlist-file-page',\n                    webpage)]\n            if playlist_size > len(entries):\n                playlist_content = self._download_json(\n                    'http://%s.wrzuta.pl/xhr/get_playlist_offset/%s' % (uploader, playlist_id),\n                    playlist_id,\n                    'Downloading playlist JSON',\n                    'Unable to download playlist JSON')\n                entries.extend([\n                    self.url_result(entry['filelink'])\n                    for entry in playlist_content.get('files', []) if entry.get('filelink')])\n\n        return self.playlist_result(entries, playlist_id, playlist_title)\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "wrzuta.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/wrzuta.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}