{"author": "ansible", "code": " (c) 2016 Red Hat Inc.\n\n This file is part of Ansible\n\n Ansible is free software: you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n Ansible is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU General Public License for more details.\n\n You should have received a copy of the GNU General Public License\n along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.eos import eos_eapi\nfrom units.modules.utils import set_module_args\nfrom .eos_module import TestEosModule, load_fixture\n\n\nclass TestEosEapiModule(TestEosModule):\n\n    module = eos_eapi\n\n    def setUp(self):\n        super(TestEosEapiModule, self).setUp()\n\n        self.mock_run_commands = patch('ansible.modules.network.eos.eos_eapi.run_commands')\n        self.run_commands = self.mock_run_commands.start()\n\n        self.mock_load_config = patch('ansible.modules.network.eos.eos_eapi.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_verify_state = patch('ansible.modules.network.eos.eos_eapi.verify_state')\n        self.verify_state = self.mock_verify_state.start()\n\n        self.command_fixtures = {}\n\n    def tearDown(self):\n        super(TestEosEapiModule, self).tearDown()\n\n        self.mock_run_commands.stop()\n        self.mock_load_config.stop()\n\n         hack for older version of mock\n         should be using patch.stopall() but CI is still failing\n        try:\n            self.mock_verify_state.stop()\n        except RuntimeError:\n            pass\n\n    def load_fixtures(self, commands=None, transport='eapi'):\n        def run_commands(module, commands, **kwargs):\n            output = list()\n            for cmd in commands:\n                output.append(load_fixture(self.command_fixtures[cmd]))\n            return output\n\n        self.run_commands.side_effect = run_commands\n        self.load_config.return_value = dict(diff=None, session='session')\n\n    def start_configured(self, *args, **kwargs):\n        self.command_fixtures = {\n            'show vrf': 'eos_eapi_show_vrf.text',\n            'show management api http-commands | json': 'eos_eapi_show_mgmt.json'\n        }\n        return self.execute_module(*args, **kwargs)\n\n    def start_unconfigured(self, *args, **kwargs):\n        self.command_fixtures = {\n            'show vrf': 'eos_eapi_show_vrf.text',\n            'show management api http-commands | json': 'eos_eapi_show_mgmt_unconfigured.json'\n        }\n        return self.execute_module(*args, **kwargs)\n\n    def test_eos_eapi_http_enable(self):\n        set_module_args(dict(http=True))\n        commands = ['management api http-commands', 'protocol http port 80',\n                    'no shutdown']\n        self.start_unconfigured(changed=True, commands=commands)\n\n    def test_eos_eapi_http_disable(self):\n        set_module_args(dict(http=False))\n        commands = ['management api http-commands', 'no protocol http']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_http_port(self):\n        set_module_args(dict(http_port=81))\n        commands = ['management api http-commands', 'protocol http port 81']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_http_invalid(self):\n        set_module_args(dict(http_port=80000))\n        self.start_unconfigured(failed=True)\n\n    def test_eos_eapi_https_enable(self):\n        set_module_args(dict(https=True))\n        commands = ['management api http-commands', 'protocol https port 443',\n                    'no shutdown']\n        self.start_unconfigured(changed=True, commands=commands)\n\n    def test_eos_eapi_https_disable(self):\n        set_module_args(dict(https=False))\n        commands = ['management api http-commands', 'no protocol https']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_https_port(self):\n        set_module_args(dict(https_port=8443))\n        commands = ['management api http-commands', 'protocol https port 8443']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_local_http_enable(self):\n        set_module_args(dict(local_http=True))\n        commands = ['management api http-commands', 'protocol http localhost port 8080',\n                    'no shutdown']\n        self.start_unconfigured(changed=True, commands=commands)\n\n    def test_eos_eapi_local_http_disable(self):\n        set_module_args(dict(local_http=False))\n        commands = ['management api http-commands', 'no protocol http localhost']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_local_http_port(self):\n        set_module_args(dict(local_http_port=81))\n        commands = ['management api http-commands', 'protocol http localhost port 81']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_vrf(self):\n        set_module_args(dict(vrf='test'))\n        commands = ['management api http-commands', 'vrf test', 'no shutdown']\n        self.start_unconfigured(changed=True, commands=commands)\n\n    def test_eos_eapi_change_from_default_vrf(self):\n        set_module_args(dict(vrf='test'))\n        commands = ['management api http-commands', 'vrf test', 'no shutdown']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_vrf_missing(self):\n        set_module_args(dict(vrf='missing'))\n        self.start_unconfigured(failed=True)\n\n    def test_eos_eapi_state_absent(self):\n        set_module_args(dict(state='stopped'))\n        commands = ['management api http-commands', 'shutdown']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_state_failed(self):\n        self.mock_verify_state.stop()\n        set_module_args(dict(state='stopped', timeout=1))\n        result = self.start_configured(failed=True)\n        'timeout expired before eapi running state changed' in result['msg']\n\n    def test_eos_eapi_state_failed(self):\n        self.mock_verify_state.stop()\n        set_module_args(dict(state='stopped', timeout=1))\n        result = self.start_configured(failed=True)\n        'timeout expired before eapi running state changed' in result['msg']\n", "comments": "  (c) 2016 red hat inc        this file part ansible       ansible free software  redistribute modify    terms gnu general public license published    free software foundation  either version 3 license     (at option) later version        ansible distributed hope useful     without any warranty  without even implied warranty    merchantability fitness for a particular purpose   see    gnu general public license details        you received copy gnu general public license    along ansible   if  see  http   www gnu org licenses       make coding python3 ish    hack older version mock    using patch stopall() ci still failing ", "content": "# (c) 2016 Red Hat Inc.\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.compat.tests.mock import patch\nfrom ansible.modules.network.eos import eos_eapi\nfrom units.modules.utils import set_module_args\nfrom .eos_module import TestEosModule, load_fixture\n\n\nclass TestEosEapiModule(TestEosModule):\n\n    module = eos_eapi\n\n    def setUp(self):\n        super(TestEosEapiModule, self).setUp()\n\n        self.mock_run_commands = patch('ansible.modules.network.eos.eos_eapi.run_commands')\n        self.run_commands = self.mock_run_commands.start()\n\n        self.mock_load_config = patch('ansible.modules.network.eos.eos_eapi.load_config')\n        self.load_config = self.mock_load_config.start()\n\n        self.mock_verify_state = patch('ansible.modules.network.eos.eos_eapi.verify_state')\n        self.verify_state = self.mock_verify_state.start()\n\n        self.command_fixtures = {}\n\n    def tearDown(self):\n        super(TestEosEapiModule, self).tearDown()\n\n        self.mock_run_commands.stop()\n        self.mock_load_config.stop()\n\n        # hack for older version of mock\n        # should be using patch.stopall() but CI is still failing\n        try:\n            self.mock_verify_state.stop()\n        except RuntimeError:\n            pass\n\n    def load_fixtures(self, commands=None, transport='eapi'):\n        def run_commands(module, commands, **kwargs):\n            output = list()\n            for cmd in commands:\n                output.append(load_fixture(self.command_fixtures[cmd]))\n            return output\n\n        self.run_commands.side_effect = run_commands\n        self.load_config.return_value = dict(diff=None, session='session')\n\n    def start_configured(self, *args, **kwargs):\n        self.command_fixtures = {\n            'show vrf': 'eos_eapi_show_vrf.text',\n            'show management api http-commands | json': 'eos_eapi_show_mgmt.json'\n        }\n        return self.execute_module(*args, **kwargs)\n\n    def start_unconfigured(self, *args, **kwargs):\n        self.command_fixtures = {\n            'show vrf': 'eos_eapi_show_vrf.text',\n            'show management api http-commands | json': 'eos_eapi_show_mgmt_unconfigured.json'\n        }\n        return self.execute_module(*args, **kwargs)\n\n    def test_eos_eapi_http_enable(self):\n        set_module_args(dict(http=True))\n        commands = ['management api http-commands', 'protocol http port 80',\n                    'no shutdown']\n        self.start_unconfigured(changed=True, commands=commands)\n\n    def test_eos_eapi_http_disable(self):\n        set_module_args(dict(http=False))\n        commands = ['management api http-commands', 'no protocol http']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_http_port(self):\n        set_module_args(dict(http_port=81))\n        commands = ['management api http-commands', 'protocol http port 81']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_http_invalid(self):\n        set_module_args(dict(http_port=80000))\n        self.start_unconfigured(failed=True)\n\n    def test_eos_eapi_https_enable(self):\n        set_module_args(dict(https=True))\n        commands = ['management api http-commands', 'protocol https port 443',\n                    'no shutdown']\n        self.start_unconfigured(changed=True, commands=commands)\n\n    def test_eos_eapi_https_disable(self):\n        set_module_args(dict(https=False))\n        commands = ['management api http-commands', 'no protocol https']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_https_port(self):\n        set_module_args(dict(https_port=8443))\n        commands = ['management api http-commands', 'protocol https port 8443']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_local_http_enable(self):\n        set_module_args(dict(local_http=True))\n        commands = ['management api http-commands', 'protocol http localhost port 8080',\n                    'no shutdown']\n        self.start_unconfigured(changed=True, commands=commands)\n\n    def test_eos_eapi_local_http_disable(self):\n        set_module_args(dict(local_http=False))\n        commands = ['management api http-commands', 'no protocol http localhost']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_local_http_port(self):\n        set_module_args(dict(local_http_port=81))\n        commands = ['management api http-commands', 'protocol http localhost port 81']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_vrf(self):\n        set_module_args(dict(vrf='test'))\n        commands = ['management api http-commands', 'vrf test', 'no shutdown']\n        self.start_unconfigured(changed=True, commands=commands)\n\n    def test_eos_eapi_change_from_default_vrf(self):\n        set_module_args(dict(vrf='test'))\n        commands = ['management api http-commands', 'vrf test', 'no shutdown']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_vrf_missing(self):\n        set_module_args(dict(vrf='missing'))\n        self.start_unconfigured(failed=True)\n\n    def test_eos_eapi_state_absent(self):\n        set_module_args(dict(state='stopped'))\n        commands = ['management api http-commands', 'shutdown']\n        self.start_configured(changed=True, commands=commands)\n\n    def test_eos_eapi_state_failed(self):\n        self.mock_verify_state.stop()\n        set_module_args(dict(state='stopped', timeout=1))\n        result = self.start_configured(failed=True)\n        'timeout expired before eapi running state changed' in result['msg']\n\n    def test_eos_eapi_state_failed(self):\n        self.mock_verify_state.stop()\n        set_module_args(dict(state='stopped', timeout=1))\n        result = self.start_configured(failed=True)\n        'timeout expired before eapi running state changed' in result['msg']\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_eos_eapi.py", "id": "0575b8b13602b8aa5cadc838ba889e1b", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/eos/test_eos_eapi.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}