{"author": "rg3", "code": "from __future__ import unicode_literals\nimport os.path\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n)\n\n\nclass MySpassIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?myspass\\.de/.*'\n    _TEST = {\n        'url': 'http://www.myspass.de/myspass/shows/tvshows/absolute-mehrheit/Absolute-Mehrheit-vom-17022013-Die-Highlights-Teil-2--/11741/',\n        'md5': '0b49f4844a068f8b33f4b7c88405862b',\n        'info_dict': {\n            'id': '11741',\n            'ext': 'mp4',\n            'description': 'Wer kann in die Fu\\u00dfstapfen von Wolfgang Kubicki treten und die Mehrheit der Zuschauer hinter sich versammeln? Wird vielleicht sogar die Absolute Mehrheit geknackt und der Jackpot von 200.000 Euro mit nach Hause genommen?',\n            'title': 'Absolute Mehrheit vom 17.02.2013 - Die Highlights, Teil 2',\n        },\n    }\n\n    def _real_extract(self, url):\n        META_DATA_URL_TEMPLATE = 'http://www.myspass.de/myspass/includes/apps/video/getvideometadataxml.php?id=%s'\n\n        \n        \n        url_path = compat_urllib_parse_urlparse(url).path\n        url_parent_path, video_id = os.path.split(url_path)\n        if not video_id:\n            _, video_id = os.path.split(url_parent_path)\n\n        \n        metadata_url = META_DATA_URL_TEMPLATE % video_id\n        metadata = self._download_xml(\n            metadata_url, video_id, transform_source=lambda s: s.strip())\n\n        \n        url_flv_el = metadata.find('url_flv')\n        if url_flv_el is None:\n            raise ExtractorError('Unable to extract download url')\n        video_url = url_flv_el.text\n        title_el = metadata.find('title')\n        if title_el is None:\n            raise ExtractorError('Unable to extract title')\n        title = title_el.text\n        format_id_el = metadata.find('format_id')\n        if format_id_el is None:\n            format = 'mp4'\n        else:\n            format = format_id_el.text\n        description_el = metadata.find('description')\n        if description_el is not None:\n            description = description_el.text\n        else:\n            description = None\n        imagePreview_el = metadata.find('imagePreview')\n        if imagePreview_el is not None:\n            thumbnail = imagePreview_el.text\n        else:\n            thumbnail = None\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'format': format,\n            'thumbnail': thumbnail,\n            'description': description,\n        }\n", "comments": "# video id is the last path element of the URL\n# usually there is a trailing slash, so also try the second but last\n# get metadata\n# extract values from metadata\n", "content": "from __future__ import unicode_literals\nimport os.path\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_urllib_parse_urlparse,\n)\nfrom ..utils import (\n    ExtractorError,\n)\n\n\nclass MySpassIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?myspass\\.de/.*'\n    _TEST = {\n        'url': 'http://www.myspass.de/myspass/shows/tvshows/absolute-mehrheit/Absolute-Mehrheit-vom-17022013-Die-Highlights-Teil-2--/11741/',\n        'md5': '0b49f4844a068f8b33f4b7c88405862b',\n        'info_dict': {\n            'id': '11741',\n            'ext': 'mp4',\n            'description': 'Wer kann in die Fu\\u00dfstapfen von Wolfgang Kubicki treten und die Mehrheit der Zuschauer hinter sich versammeln? Wird vielleicht sogar die Absolute Mehrheit geknackt und der Jackpot von 200.000 Euro mit nach Hause genommen?',\n            'title': 'Absolute Mehrheit vom 17.02.2013 - Die Highlights, Teil 2',\n        },\n    }\n\n    def _real_extract(self, url):\n        META_DATA_URL_TEMPLATE = 'http://www.myspass.de/myspass/includes/apps/video/getvideometadataxml.php?id=%s'\n\n        # video id is the last path element of the URL\n        # usually there is a trailing slash, so also try the second but last\n        url_path = compat_urllib_parse_urlparse(url).path\n        url_parent_path, video_id = os.path.split(url_path)\n        if not video_id:\n            _, video_id = os.path.split(url_parent_path)\n\n        # get metadata\n        metadata_url = META_DATA_URL_TEMPLATE % video_id\n        metadata = self._download_xml(\n            metadata_url, video_id, transform_source=lambda s: s.strip())\n\n        # extract values from metadata\n        url_flv_el = metadata.find('url_flv')\n        if url_flv_el is None:\n            raise ExtractorError('Unable to extract download url')\n        video_url = url_flv_el.text\n        title_el = metadata.find('title')\n        if title_el is None:\n            raise ExtractorError('Unable to extract title')\n        title = title_el.text\n        format_id_el = metadata.find('format_id')\n        if format_id_el is None:\n            format = 'mp4'\n        else:\n            format = format_id_el.text\n        description_el = metadata.find('description')\n        if description_el is not None:\n            description = description_el.text\n        else:\n            description = None\n        imagePreview_el = metadata.find('imagePreview')\n        if imagePreview_el is not None:\n            thumbnail = imagePreview_el.text\n        else:\n            thumbnail = None\n\n        return {\n            'id': video_id,\n            'url': video_url,\n            'title': title,\n            'format': format,\n            'thumbnail': thumbnail,\n            'description': description,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "myspass.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/myspass.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}