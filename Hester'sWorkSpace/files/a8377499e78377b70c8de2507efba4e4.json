{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport itertools\nimport time\n\nfrom .common import InfoExtractor\nfrom .soundcloud import SoundcloudIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    url_basename,\n)\n\n\nclass AudiomackIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?audiomack\\.com/song/(?P<id>[\\w/-]+)'\n    IE_NAME = 'audiomack'\n    _TESTS = [\n        \n        {\n            'url': 'http://www.audiomack.com/song/roosh-williams/extraordinary',\n            'info_dict':\n            {\n                'id': '310086',\n                'ext': 'mp3',\n                'uploader': 'Roosh Williams',\n                'title': 'Extraordinary'\n            }\n        },\n        \n        {\n            'add_ie': ['Soundcloud'],\n            'url': 'http://www.audiomack.com/song/hip-hop-daily/black-mamba-freestyle',\n            'info_dict': {\n                'id': '258901379',\n                'ext': 'mp3',\n                'description': 'mamba day freestyle for the legend Kobe Bryant ',\n                'title': 'Black Mamba Freestyle [Prod. By Danny Wolf]',\n                'uploader': 'ILOVEMAKONNEN',\n                'upload_date': '20160414',\n            }\n        },\n    ]\n\n    def _real_extract(self, url):\n        \n        \n        \n        album_url_tag = self._match_id(url)\n\n        \n        api_response = self._download_json(\n            'http://www.audiomack.com/api/music/url/song/%s?extended=1&_=%d' % (\n                album_url_tag, time.time()),\n            album_url_tag)\n\n        \n        if 'url' not in api_response or not api_response['url'] or 'error' in api_response:\n            raise ExtractorError('Invalid url %s' % url)\n\n        \n        \n        if SoundcloudIE.suitable(api_response['url']):\n            return {'_type': 'url', 'url': api_response['url'], 'ie_key': 'Soundcloud'}\n\n        return {\n            'id': api_response.get('id', album_url_tag),\n            'uploader': api_response.get('artist'),\n            'title': api_response.get('title'),\n            'url': api_response['url'],\n        }\n\n\nclass AudiomackAlbumIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?audiomack\\.com/album/(?P<id>[\\w/-]+)'\n    IE_NAME = 'audiomack:album'\n    _TESTS = [\n        \n        {\n            'url': 'http://www.audiomack.com/album/flytunezcom/tha-tour-part-2-mixtape',\n            'playlist_count': 15,\n            'info_dict':\n            {\n                'id': '812251',\n                'title': 'Tha Tour: Part 2 (Official Mixtape)'\n            }\n        },\n        \n        {\n            'url': 'http://www.audiomack.com/album/fakeshoredrive/ppp-pistol-p-project',\n            'info_dict': {\n                'title': 'PPP (Pistol P Project)',\n                'id': '837572',\n            },\n            'playlist': [{\n                'info_dict': {\n                    'title': 'PPP (Pistol P Project) - 9. Heaven or Hell (CHIMACA) ft Zuse (prod by DJ FU)',\n                    'id': '837577',\n                    'ext': 'mp3',\n                    'uploader': 'Lil Herb a.k.a. G Herbo',\n                }\n            }],\n            'params': {\n                'playliststart': 9,\n                'playlistend': 9,\n            }\n        }\n    ]\n\n    def _real_extract(self, url):\n        \n        \n        \n        album_url_tag = self._match_id(url)\n        result = {'_type': 'playlist', 'entries': []}\n        \n        \n        for track_no in itertools.count():\n            \n            api_response = self._download_json(\n                'http://www.audiomack.com/api/music/url/album/%s/%d?extended=1&_=%d'\n                % (album_url_tag, track_no, time.time()), album_url_tag,\n                note='Querying song information (%d)' % (track_no + 1))\n\n            \n            \n            if 'url' not in api_response or 'error' in api_response:\n                raise ExtractorError('Invalid url for track %d of album url %s' % (track_no, url))\n            \n            elif not api_response['url']:\n                break\n            else:\n                \n                for resultkey, apikey in [('id', 'album_id'), ('title', 'album_title')]:\n                    if apikey in api_response and resultkey not in result:\n                        result[resultkey] = api_response[apikey]\n                song_id = url_basename(api_response['url']).rpartition('.')[0]\n                result['entries'].append({\n                    'id': compat_str(api_response.get('id', song_id)),\n                    'uploader': api_response.get('artist'),\n                    'title': api_response.get('title', song_id),\n                    'url': api_response['url'],\n                })\n        return result\n", "comments": "# coding: utf-8\n# hosted on audiomack\n# audiomack wrapper around soundcloud song\n# URLs end with [uploader name]/[uploader title]\n# this title is whatever the user types in, and is rarely\n# the proper song title.  Real metadata is in the api response\n# Request the extended version of the api for extra fields like artist and title\n# API is inconsistent with errors\n# Audiomack wraps a lot of soundcloud tracks in their branded wrapper\n# if so, pass the work off to the soundcloud extractor\n# Standard album playlist\n# Album playlist ripped from fakeshoredrive with no metadata\n# URLs end with [uploader name]/[uploader title]\n# this title is whatever the user types in, and is rarely\n# the proper song title.  Real metadata is in the api response\n# There is no one endpoint for album metadata - instead it is included/repeated in each song's metadata\n# Therefore we don't know how many songs the album has and must infi-loop until failure\n# Get song's metadata\n# Total failure, only occurs when url is totally wrong\n# Won't happen in middle of valid playlist (next case)\n# URL is good but song id doesn't exist - usually means end of playlist\n# Pull out the album metadata and add to result (if it exists)\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport itertools\nimport time\n\nfrom .common import InfoExtractor\nfrom .soundcloud import SoundcloudIE\nfrom ..compat import compat_str\nfrom ..utils import (\n    ExtractorError,\n    url_basename,\n)\n\n\nclass AudiomackIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?audiomack\\.com/song/(?P<id>[\\w/-]+)'\n    IE_NAME = 'audiomack'\n    _TESTS = [\n        # hosted on audiomack\n        {\n            'url': 'http://www.audiomack.com/song/roosh-williams/extraordinary',\n            'info_dict':\n            {\n                'id': '310086',\n                'ext': 'mp3',\n                'uploader': 'Roosh Williams',\n                'title': 'Extraordinary'\n            }\n        },\n        # audiomack wrapper around soundcloud song\n        {\n            'add_ie': ['Soundcloud'],\n            'url': 'http://www.audiomack.com/song/hip-hop-daily/black-mamba-freestyle',\n            'info_dict': {\n                'id': '258901379',\n                'ext': 'mp3',\n                'description': 'mamba day freestyle for the legend Kobe Bryant ',\n                'title': 'Black Mamba Freestyle [Prod. By Danny Wolf]',\n                'uploader': 'ILOVEMAKONNEN',\n                'upload_date': '20160414',\n            }\n        },\n    ]\n\n    def _real_extract(self, url):\n        # URLs end with [uploader name]/[uploader title]\n        # this title is whatever the user types in, and is rarely\n        # the proper song title.  Real metadata is in the api response\n        album_url_tag = self._match_id(url)\n\n        # Request the extended version of the api for extra fields like artist and title\n        api_response = self._download_json(\n            'http://www.audiomack.com/api/music/url/song/%s?extended=1&_=%d' % (\n                album_url_tag, time.time()),\n            album_url_tag)\n\n        # API is inconsistent with errors\n        if 'url' not in api_response or not api_response['url'] or 'error' in api_response:\n            raise ExtractorError('Invalid url %s' % url)\n\n        # Audiomack wraps a lot of soundcloud tracks in their branded wrapper\n        # if so, pass the work off to the soundcloud extractor\n        if SoundcloudIE.suitable(api_response['url']):\n            return {'_type': 'url', 'url': api_response['url'], 'ie_key': 'Soundcloud'}\n\n        return {\n            'id': api_response.get('id', album_url_tag),\n            'uploader': api_response.get('artist'),\n            'title': api_response.get('title'),\n            'url': api_response['url'],\n        }\n\n\nclass AudiomackAlbumIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.)?audiomack\\.com/album/(?P<id>[\\w/-]+)'\n    IE_NAME = 'audiomack:album'\n    _TESTS = [\n        # Standard album playlist\n        {\n            'url': 'http://www.audiomack.com/album/flytunezcom/tha-tour-part-2-mixtape',\n            'playlist_count': 15,\n            'info_dict':\n            {\n                'id': '812251',\n                'title': 'Tha Tour: Part 2 (Official Mixtape)'\n            }\n        },\n        # Album playlist ripped from fakeshoredrive with no metadata\n        {\n            'url': 'http://www.audiomack.com/album/fakeshoredrive/ppp-pistol-p-project',\n            'info_dict': {\n                'title': 'PPP (Pistol P Project)',\n                'id': '837572',\n            },\n            'playlist': [{\n                'info_dict': {\n                    'title': 'PPP (Pistol P Project) - 9. Heaven or Hell (CHIMACA) ft Zuse (prod by DJ FU)',\n                    'id': '837577',\n                    'ext': 'mp3',\n                    'uploader': 'Lil Herb a.k.a. G Herbo',\n                }\n            }],\n            'params': {\n                'playliststart': 9,\n                'playlistend': 9,\n            }\n        }\n    ]\n\n    def _real_extract(self, url):\n        # URLs end with [uploader name]/[uploader title]\n        # this title is whatever the user types in, and is rarely\n        # the proper song title.  Real metadata is in the api response\n        album_url_tag = self._match_id(url)\n        result = {'_type': 'playlist', 'entries': []}\n        # There is no one endpoint for album metadata - instead it is included/repeated in each song's metadata\n        # Therefore we don't know how many songs the album has and must infi-loop until failure\n        for track_no in itertools.count():\n            # Get song's metadata\n            api_response = self._download_json(\n                'http://www.audiomack.com/api/music/url/album/%s/%d?extended=1&_=%d'\n                % (album_url_tag, track_no, time.time()), album_url_tag,\n                note='Querying song information (%d)' % (track_no + 1))\n\n            # Total failure, only occurs when url is totally wrong\n            # Won't happen in middle of valid playlist (next case)\n            if 'url' not in api_response or 'error' in api_response:\n                raise ExtractorError('Invalid url for track %d of album url %s' % (track_no, url))\n            # URL is good but song id doesn't exist - usually means end of playlist\n            elif not api_response['url']:\n                break\n            else:\n                # Pull out the album metadata and add to result (if it exists)\n                for resultkey, apikey in [('id', 'album_id'), ('title', 'album_title')]:\n                    if apikey in api_response and resultkey not in result:\n                        result[resultkey] = api_response[apikey]\n                song_id = url_basename(api_response['url']).rpartition('.')[0]\n                result['entries'].append({\n                    'id': compat_str(api_response.get('id', song_id)),\n                    'uploader': api_response.get('artist'),\n                    'title': api_response.get('title', song_id),\n                    'url': api_response['url'],\n                })\n        return result\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "audiomack.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/audiomack.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}