{"author": "django", "code": "from django.db.backends.mysql.client import DatabaseClient\nfrom django.test import SimpleTestCase\n\n\nclass MySqlDbshellCommandTestCase(SimpleTestCase):\n\n    def test_fails_with_keyerror_on_incomplete_config(self):\n        with self.assertRaises(KeyError):\n            self.get_command_line_arguments({})\n\n    def test_basic_params_specified_in_settings(self):\n        self.assertEqual(\n            ['mysql', '--user=someuser', '--password=somepassword',\n             '--host=somehost', '--port=444', 'somedbname'],\n            self.get_command_line_arguments({\n                'NAME': 'somedbname',\n                'USER': 'someuser',\n                'PASSWORD': 'somepassword',\n                'HOST': 'somehost',\n                'PORT': 444,\n                'OPTIONS': {},\n            }))\n\n    def test_options_override_settings_proper_values(self):\n        settings_port = 444\n        options_port = 555\n        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n        self.assertEqual(\n            ['mysql', '--user=optionuser', '--password=optionpassword',\n             '--host=optionhost', '--port={}'.format(options_port), 'optiondbname'],\n            self.get_command_line_arguments({\n                'NAME': 'settingdbname',\n                'USER': 'settinguser',\n                'PASSWORD': 'settingpassword',\n                'HOST': 'settinghost',\n                'PORT': settings_port,\n                'OPTIONS': {\n                    'db': 'optiondbname',\n                    'user': 'optionuser',\n                    'passwd': 'optionpassword',\n                    'host': 'optionhost',\n                    'port': options_port,\n                },\n            }))\n\n    def test_can_connect_using_sockets(self):\n        self.assertEqual(\n            ['mysql', '--user=someuser', '--password=somepassword',\n             '--socket=/path/to/mysql.socket.file', 'somedbname'],\n            self.get_command_line_arguments({\n                'NAME': 'somedbname',\n                'USER': 'someuser',\n                'PASSWORD': 'somepassword',\n                'HOST': '/path/to/mysql.socket.file',\n                'PORT': None,\n                'OPTIONS': {},\n            }))\n\n    def test_ssl_certificate_is_added(self):\n        self.assertEqual(\n            ['mysql', '--user=someuser', '--password=somepassword',\n             '--host=somehost', '--port=444', '--ssl-ca=sslca',\n             '--ssl-cert=sslcert', '--ssl-key=sslkey', 'somedbname'],\n            self.get_command_line_arguments({\n                'NAME': 'somedbname',\n                'USER': 'someuser',\n                'PASSWORD': 'somepassword',\n                'HOST': 'somehost',\n                'PORT': 444,\n                'OPTIONS': {\n                    'ssl': {\n                        'ca': 'sslca',\n                        'cert': 'sslcert',\n                        'key': 'sslkey',\n                    },\n                },\n            }))\n\n    def get_command_line_arguments(self, connection_settings):\n        return DatabaseClient.settings_to_cmd_args(connection_settings)\n", "comments": "", "content": "from django.db.backends.mysql.client import DatabaseClient\nfrom django.test import SimpleTestCase\n\n\nclass MySqlDbshellCommandTestCase(SimpleTestCase):\n\n    def test_fails_with_keyerror_on_incomplete_config(self):\n        with self.assertRaises(KeyError):\n            self.get_command_line_arguments({})\n\n    def test_basic_params_specified_in_settings(self):\n        self.assertEqual(\n            ['mysql', '--user=someuser', '--password=somepassword',\n             '--host=somehost', '--port=444', 'somedbname'],\n            self.get_command_line_arguments({\n                'NAME': 'somedbname',\n                'USER': 'someuser',\n                'PASSWORD': 'somepassword',\n                'HOST': 'somehost',\n                'PORT': 444,\n                'OPTIONS': {},\n            }))\n\n    def test_options_override_settings_proper_values(self):\n        settings_port = 444\n        options_port = 555\n        self.assertNotEqual(settings_port, options_port, 'test pre-req')\n        self.assertEqual(\n            ['mysql', '--user=optionuser', '--password=optionpassword',\n             '--host=optionhost', '--port={}'.format(options_port), 'optiondbname'],\n            self.get_command_line_arguments({\n                'NAME': 'settingdbname',\n                'USER': 'settinguser',\n                'PASSWORD': 'settingpassword',\n                'HOST': 'settinghost',\n                'PORT': settings_port,\n                'OPTIONS': {\n                    'db': 'optiondbname',\n                    'user': 'optionuser',\n                    'passwd': 'optionpassword',\n                    'host': 'optionhost',\n                    'port': options_port,\n                },\n            }))\n\n    def test_can_connect_using_sockets(self):\n        self.assertEqual(\n            ['mysql', '--user=someuser', '--password=somepassword',\n             '--socket=/path/to/mysql.socket.file', 'somedbname'],\n            self.get_command_line_arguments({\n                'NAME': 'somedbname',\n                'USER': 'someuser',\n                'PASSWORD': 'somepassword',\n                'HOST': '/path/to/mysql.socket.file',\n                'PORT': None,\n                'OPTIONS': {},\n            }))\n\n    def test_ssl_certificate_is_added(self):\n        self.assertEqual(\n            ['mysql', '--user=someuser', '--password=somepassword',\n             '--host=somehost', '--port=444', '--ssl-ca=sslca',\n             '--ssl-cert=sslcert', '--ssl-key=sslkey', 'somedbname'],\n            self.get_command_line_arguments({\n                'NAME': 'somedbname',\n                'USER': 'someuser',\n                'PASSWORD': 'somepassword',\n                'HOST': 'somehost',\n                'PORT': 444,\n                'OPTIONS': {\n                    'ssl': {\n                        'ca': 'sslca',\n                        'cert': 'sslcert',\n                        'key': 'sslkey',\n                    },\n                },\n            }))\n\n    def get_command_line_arguments(self, connection_settings):\n        return DatabaseClient.settings_to_cmd_args(connection_settings)\n", "description": "The Web framework for perfectionists with deadlines.", "file_name": "test_mysql.py", "id": "839af449de2a8cdb355e23427866bfa6", "language": "Python", "project_name": "django", "quality": "", "save_path": "/home/ubuntu/test_files/clean/network_test/django-django/django-django-acfc650/tests/dbshell/test_mysql.py", "save_time": "", "source": "", "update_at": "2018-03-14T02:00:36Z", "url": "https://github.com/django/django", "wiki": false}