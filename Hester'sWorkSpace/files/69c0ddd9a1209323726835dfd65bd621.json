{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import int_or_none\n\n\nclass BeatportIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.|pro\\.)?beatport\\.com/track/(?P<display_id>[^/]+)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'https://beatport.com/track/synesthesia-original-mix/5379371',\n        'md5': 'b3c34d8639a2f6a7f734382358478887',\n        'info_dict': {\n            'id': '5379371',\n            'display_id': 'synesthesia-original-mix',\n            'ext': 'mp4',\n            'title': 'Froxic - Synesthesia (Original Mix)',\n        },\n    }, {\n        'url': 'https://beatport.com/track/love-and-war-original-mix/3756896',\n        'md5': 'e44c3025dfa38c6577fbaeb43da43514',\n        'info_dict': {\n            'id': '3756896',\n            'display_id': 'love-and-war-original-mix',\n            'ext': 'mp3',\n            'title': 'Wolfgang Gartner - Love & War (Original Mix)',\n        },\n    }, {\n        'url': 'https://beatport.com/track/birds-original-mix/4991738',\n        'md5': 'a1fd8e8046de3950fd039304c186c05f',\n        'info_dict': {\n            'id': '4991738',\n            'display_id': 'birds-original-mix',\n            'ext': 'mp4',\n            'title': \"Tos, Middle Milk, Mumblin' Johnsson - Birds (Original Mix)\",\n        }\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        track_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        playables = self._parse_json(\n            self._search_regex(\n                r'window\\.Playables\\s*=\\s*({.+?});', webpage,\n                'playables info', flags=re.DOTALL),\n            track_id)\n\n        track = next(t for t in playables['tracks'] if t['id'] == int(track_id))\n\n        title = ', '.join((a['name'] for a in track['artists'])) + ' - ' + track['name']\n        if track['mix']:\n            title += ' (' + track['mix'] + ')'\n\n        formats = []\n        for ext, info in track['preview'].items():\n            if not info['url']:\n                continue\n            fmt = {\n                'url': info['url'],\n                'ext': ext,\n                'format_id': ext,\n                'vcodec': 'none',\n            }\n            if ext == 'mp3':\n                fmt['preference'] = 0\n                fmt['acodec'] = 'mp3'\n                fmt['abr'] = 96\n                fmt['asr'] = 44100\n            elif ext == 'mp4':\n                fmt['preference'] = 1\n                fmt['acodec'] = 'aac'\n                fmt['abr'] = 96\n                fmt['asr'] = 44100\n            formats.append(fmt)\n        self._sort_formats(formats)\n\n        images = []\n        for name, info in track['images'].items():\n            image_url = info.get('url')\n            if name == 'dynamic' or not image_url:\n                continue\n            image = {\n                'id': name,\n                'url': image_url,\n                'height': int_or_none(info.get('height')),\n                'width': int_or_none(info.get('width')),\n            }\n            images.append(image)\n\n        return {\n            'id': compat_str(track.get('id')) or track_id,\n            'display_id': track.get('slug') or display_id,\n            'title': title,\n            'formats': formats,\n            'thumbnails': images,\n        }\n", "comments": "# coding: utf-8\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import compat_str\nfrom ..utils import int_or_none\n\n\nclass BeatportIE(InfoExtractor):\n    _VALID_URL = r'https?://(?:www\\.|pro\\.)?beatport\\.com/track/(?P<display_id>[^/]+)/(?P<id>[0-9]+)'\n    _TESTS = [{\n        'url': 'https://beatport.com/track/synesthesia-original-mix/5379371',\n        'md5': 'b3c34d8639a2f6a7f734382358478887',\n        'info_dict': {\n            'id': '5379371',\n            'display_id': 'synesthesia-original-mix',\n            'ext': 'mp4',\n            'title': 'Froxic - Synesthesia (Original Mix)',\n        },\n    }, {\n        'url': 'https://beatport.com/track/love-and-war-original-mix/3756896',\n        'md5': 'e44c3025dfa38c6577fbaeb43da43514',\n        'info_dict': {\n            'id': '3756896',\n            'display_id': 'love-and-war-original-mix',\n            'ext': 'mp3',\n            'title': 'Wolfgang Gartner - Love & War (Original Mix)',\n        },\n    }, {\n        'url': 'https://beatport.com/track/birds-original-mix/4991738',\n        'md5': 'a1fd8e8046de3950fd039304c186c05f',\n        'info_dict': {\n            'id': '4991738',\n            'display_id': 'birds-original-mix',\n            'ext': 'mp4',\n            'title': \"Tos, Middle Milk, Mumblin' Johnsson - Birds (Original Mix)\",\n        }\n    }]\n\n    def _real_extract(self, url):\n        mobj = re.match(self._VALID_URL, url)\n        track_id = mobj.group('id')\n        display_id = mobj.group('display_id')\n\n        webpage = self._download_webpage(url, display_id)\n\n        playables = self._parse_json(\n            self._search_regex(\n                r'window\\.Playables\\s*=\\s*({.+?});', webpage,\n                'playables info', flags=re.DOTALL),\n            track_id)\n\n        track = next(t for t in playables['tracks'] if t['id'] == int(track_id))\n\n        title = ', '.join((a['name'] for a in track['artists'])) + ' - ' + track['name']\n        if track['mix']:\n            title += ' (' + track['mix'] + ')'\n\n        formats = []\n        for ext, info in track['preview'].items():\n            if not info['url']:\n                continue\n            fmt = {\n                'url': info['url'],\n                'ext': ext,\n                'format_id': ext,\n                'vcodec': 'none',\n            }\n            if ext == 'mp3':\n                fmt['preference'] = 0\n                fmt['acodec'] = 'mp3'\n                fmt['abr'] = 96\n                fmt['asr'] = 44100\n            elif ext == 'mp4':\n                fmt['preference'] = 1\n                fmt['acodec'] = 'aac'\n                fmt['abr'] = 96\n                fmt['asr'] = 44100\n            formats.append(fmt)\n        self._sort_formats(formats)\n\n        images = []\n        for name, info in track['images'].items():\n            image_url = info.get('url')\n            if name == 'dynamic' or not image_url:\n                continue\n            image = {\n                'id': name,\n                'url': image_url,\n                'height': int_or_none(info.get('height')),\n                'width': int_or_none(info.get('width')),\n            }\n            images.append(image)\n\n        return {\n            'id': compat_str(track.get('id')) or track_id,\n            'display_id': track.get('slug') or display_id,\n            'title': title,\n            'formats': formats,\n            'thumbnails': images,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "beatport.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/beatport.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}