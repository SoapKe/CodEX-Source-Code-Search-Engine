{"author": "yandex", "code": "from nose.tools import assert_equal\nfrom tests.asserts import assert_is_instance\nfrom gixy.parser.nginx_parser import NginxParser\nfrom gixy.directives.directive import *\nfrom gixy.directives.block import *\n\n\ndef _parse(config):\n    return NginxParser(cwd='', allow_includes=False).parse(config)\n\n\ndef test_directive():\n    configs = [\n        'access_log syslog:server=127.0.0.1,tag=nginx_sentry toolsformat;',\n        'user http;',\n        'internal;',\n        'set $foo \"bar\";',\n        \"set $foo 'bar';\",\n        'proxy_pass http://unix:/run/sock.socket;',\n        'rewrite ^/([a-zA-Z0-9]+)$ /$1/${arg_v}.pb break;'\n    ]\n\n    expected = [\n        [Directive],\n        [Directive],\n        [Directive],\n        [Directive, SetDirective],\n        [Directive],\n        [Directive, RewriteDirective]\n    ]\n\n    for i, config in enumerate(configs):\n        return assert_config, config, expected[i]\n\n\ndef test_blocks():\n    configs = [\n        'if (-f /some) {}',\n        'location / {}'\n    ]\n\n    expected = [\n        [Directive, Block, IfBlock],\n        [Directive, Block, LocationBlock],\n    ]\n\n    for i, config in enumerate(configs):\n        yield assert_config, config, expected[i]\n\n\ndef test_dump_simple():\n    config = '''\n\nhttp {\n    include sites/*.conf;\n}\n\n\nlisten 80;\n\n\nserver {\n    include conf.d/listen;\n}\n    '''\n\n    tree = _parse(config)\n    assert_is_instance(tree, Directive)\n    assert_is_instance(tree, Block)\n    assert_is_instance(tree, Root)\n\n    assert_equal(len(tree.children), 1)\n    http = tree.children[0]\n    assert_is_instance(http, Directive)\n    assert_is_instance(http, Block)\n    assert_is_instance(http, HttpBlock)\n\n    assert_equal(len(http.children), 1)\n    include_server = http.children[0]\n    assert_is_instance(include_server, Directive)\n    assert_is_instance(include_server, IncludeBlock)\n    assert_equal(include_server.file_path, '/etc/nginx/sites/default.conf')\n\n    assert_equal(len(include_server.children), 1)\n    server = include_server.children[0]\n    assert_is_instance(server, Directive)\n    assert_is_instance(server, Block)\n    assert_is_instance(server, ServerBlock)\n\n    assert_equal(len(server.children), 1)\n    include_listen = server.children[0]\n    assert_is_instance(include_listen, Directive)\n    assert_is_instance(include_listen, IncludeBlock)\n    assert_equal(include_listen.file_path, '/etc/nginx/conf.d/listen')\n\n    assert_equal(len(include_listen.children), 1)\n    listen = include_listen.children[0]\n    assert_is_instance(listen, Directive)\n    assert_equal(listen.args, ['80'])\n\n\ndef assert_config(config, expected):\n    tree = _parse(config)\n    assert_is_instance(tree, Directive)\n    assert_is_instance(tree, Block)\n    assert_is_instance(tree, Root)\n\n    child = tree.children[0]\n    for ex in expected:\n        assert_is_instance(child, ex)\n", "comments": "      configuration file  etc nginx nginx conf  http       include sites   conf       configuration file  etc nginx conf listen  listen 80     configuration file  etc nginx sites default conf  server       include conf listen               configuration file  etc nginx nginx conf     configuration file  etc nginx conf listen     configuration file  etc nginx sites default conf  ", "content": "from nose.tools import assert_equal\nfrom tests.asserts import assert_is_instance\nfrom gixy.parser.nginx_parser import NginxParser\nfrom gixy.directives.directive import *\nfrom gixy.directives.block import *\n\n\ndef _parse(config):\n    return NginxParser(cwd='', allow_includes=False).parse(config)\n\n\ndef test_directive():\n    configs = [\n        'access_log syslog:server=127.0.0.1,tag=nginx_sentry toolsformat;',\n        'user http;',\n        'internal;',\n        'set $foo \"bar\";',\n        \"set $foo 'bar';\",\n        'proxy_pass http://unix:/run/sock.socket;',\n        'rewrite ^/([a-zA-Z0-9]+)$ /$1/${arg_v}.pb break;'\n    ]\n\n    expected = [\n        [Directive],\n        [Directive],\n        [Directive],\n        [Directive, SetDirective],\n        [Directive],\n        [Directive, RewriteDirective]\n    ]\n\n    for i, config in enumerate(configs):\n        return assert_config, config, expected[i]\n\n\ndef test_blocks():\n    configs = [\n        'if (-f /some) {}',\n        'location / {}'\n    ]\n\n    expected = [\n        [Directive, Block, IfBlock],\n        [Directive, Block, LocationBlock],\n    ]\n\n    for i, config in enumerate(configs):\n        yield assert_config, config, expected[i]\n\n\ndef test_dump_simple():\n    config = '''\n# configuration file /etc/nginx/nginx.conf:\nhttp {\n    include sites/*.conf;\n}\n\n# configuration file /etc/nginx/conf.d/listen:\nlisten 80;\n\n# configuration file /etc/nginx/sites/default.conf:\nserver {\n    include conf.d/listen;\n}\n    '''\n\n    tree = _parse(config)\n    assert_is_instance(tree, Directive)\n    assert_is_instance(tree, Block)\n    assert_is_instance(tree, Root)\n\n    assert_equal(len(tree.children), 1)\n    http = tree.children[0]\n    assert_is_instance(http, Directive)\n    assert_is_instance(http, Block)\n    assert_is_instance(http, HttpBlock)\n\n    assert_equal(len(http.children), 1)\n    include_server = http.children[0]\n    assert_is_instance(include_server, Directive)\n    assert_is_instance(include_server, IncludeBlock)\n    assert_equal(include_server.file_path, '/etc/nginx/sites/default.conf')\n\n    assert_equal(len(include_server.children), 1)\n    server = include_server.children[0]\n    assert_is_instance(server, Directive)\n    assert_is_instance(server, Block)\n    assert_is_instance(server, ServerBlock)\n\n    assert_equal(len(server.children), 1)\n    include_listen = server.children[0]\n    assert_is_instance(include_listen, Directive)\n    assert_is_instance(include_listen, IncludeBlock)\n    assert_equal(include_listen.file_path, '/etc/nginx/conf.d/listen')\n\n    assert_equal(len(include_listen.children), 1)\n    listen = include_listen.children[0]\n    assert_is_instance(listen, Directive)\n    assert_equal(listen.args, ['80'])\n\n\ndef assert_config(config, expected):\n    tree = _parse(config)\n    assert_is_instance(tree, Directive)\n    assert_is_instance(tree, Block)\n    assert_is_instance(tree, Root)\n\n    child = tree.children[0]\n    for ex in expected:\n        assert_is_instance(child, ex)\n", "description": "Nginx configuration static analyzer", "file_name": "test_nginx_parser.py", "id": "dbc3e9118fe4dd46ef0e75f8035bd5ed", "language": "Python", "project_name": "gixy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/yandex-gixy/yandex-gixy-86b5e60/tests/parser/test_nginx_parser.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:01:42Z", "url": "https://github.com/yandex/gixy", "wiki": true}