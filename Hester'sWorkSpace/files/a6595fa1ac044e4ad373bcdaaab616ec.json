{"author": "bitcoinbook", "code": "import ecdsa\nimport os\n\n\n_p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\n_r = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n_b = 0x0000000000000000000000000000000000000000000000000000000000000007\n_a = 0x0000000000000000000000000000000000000000000000000000000000000000\n_Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\n_Gy = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\ncurve_secp256k1 = ecdsa.ellipticcurve.CurveFp(_p, _a, _b)\ngenerator_secp256k1 = ecdsa.ellipticcurve.Point(curve_secp256k1, _Gx, _Gy, _r)\noid_secp256k1 = (1, 3, 132, 0, 10)\nSECP256k1 = ecdsa.curves.Curve(\"SECP256k1\", curve_secp256k1,\n                               generator_secp256k1, oid_secp256k1)\nec_order = _r\n\ncurve = curve_secp256k1\ngenerator = generator_secp256k1\n\n\ndef random_secret():\n    convert_to_int = lambda array: int(\"\".join(array).encode(\"hex\"), 16)\n\n    \n    \n    byte_array = os.urandom(32)\n\n    return convert_to_int(byte_array)\n\n\ndef get_point_pubkey(point):\n    if (point.y() % 2) == 1:\n        key = '03' + '%064x' % point.x()\n    else:\n        key = '02' + '%064x' % point.x()\n    return key.decode('hex')\n\n\ndef get_point_pubkey_uncompressed(point):\n    key = ('04' +\n           '%064x' % point.x() +\n           '%064x' % point.y())\n    return key.decode('hex')\n\n\n\nsecret = random_secret()\nprint(\"Secret: \", secret)\n\n\npoint = secret * generator\nprint(\"EC point:\", point)\n\nprint(\"BTC public key:\", get_point_pubkey(point).encode(\"hex\"))\n\n# Given the point (x, y) we can create the object using:\npoint1 = ecdsa.ellipticcurve.Point(curve, point.x(), point.y(), ec_order)\nassert(point1 == point)\n", "comments": "  secp256k1  http   www oid info com get 1 3 132 0 10    collect 256 bits random data os cryptographically secure    random number generator    generate new private key     get public key point     given point (x  y) create object using  ", "content": "import ecdsa\nimport os\n\n# secp256k1, http://www.oid-info.com/get/1.3.132.0.10\n_p = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\n_r = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n_b = 0x0000000000000000000000000000000000000000000000000000000000000007\n_a = 0x0000000000000000000000000000000000000000000000000000000000000000\n_Gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\n_Gy = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\ncurve_secp256k1 = ecdsa.ellipticcurve.CurveFp(_p, _a, _b)\ngenerator_secp256k1 = ecdsa.ellipticcurve.Point(curve_secp256k1, _Gx, _Gy, _r)\noid_secp256k1 = (1, 3, 132, 0, 10)\nSECP256k1 = ecdsa.curves.Curve(\"SECP256k1\", curve_secp256k1,\n                               generator_secp256k1, oid_secp256k1)\nec_order = _r\n\ncurve = curve_secp256k1\ngenerator = generator_secp256k1\n\n\ndef random_secret():\n    convert_to_int = lambda array: int(\"\".join(array).encode(\"hex\"), 16)\n\n    # Collect 256 bits of random data from the OS's cryptographically secure\n    # random number generator\n    byte_array = os.urandom(32)\n\n    return convert_to_int(byte_array)\n\n\ndef get_point_pubkey(point):\n    if (point.y() % 2) == 1:\n        key = '03' + '%064x' % point.x()\n    else:\n        key = '02' + '%064x' % point.x()\n    return key.decode('hex')\n\n\ndef get_point_pubkey_uncompressed(point):\n    key = ('04' +\n           '%064x' % point.x() +\n           '%064x' % point.y())\n    return key.decode('hex')\n\n\n# Generate a new private key.\nsecret = random_secret()\nprint(\"Secret: \", secret)\n\n# Get the public key point.\npoint = secret * generator\nprint(\"EC point:\", point)\n\nprint(\"BTC public key:\", get_point_pubkey(point).encode(\"hex\"))\n\n# Given the point (x, y) we can create the object using:\npoint1 = ecdsa.ellipticcurve.Point(curve, point.x(), point.y(), ec_order)\nassert(point1 == point)\n", "description": "Mastering Bitcoin 2nd Edition - Programming the Open Blockchain", "file_name": "ec-math.py", "id": "a6595fa1ac044e4ad373bcdaaab616ec", "language": "Python", "project_name": "bitcoinbook", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/bitcoinbook-bitcoinbook/bitcoinbook-bitcoinbook-f8b883d/code/ec-math.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:38:06Z", "url": "https://github.com/bitcoinbook/bitcoinbook", "wiki": false}