{"author": "rg3", "code": "\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    unsmuggle_url,\n)\n\n\nclass EaglePlatformIE(InfoExtractor):\n    _VALID_URL = r % PLAYER_JS_RE, webpage)\n        if mobj is not None:\n            return 'eagleplatform:%(host)s:%(id)s' % mobj.groupdict()\n\n    @staticmethod\n    def _handle_error(response):\n        status = int_or_none(response.get('status', 200))\n        if status != 200:\n            raise ExtractorError(' '.join(response['errors']), expected=True)\n\n    def _download_json(self, url_or_request, video_id, *args, **kwargs):\n        try:\n            response = super(EaglePlatformIE, self)._download_json(\n                url_or_request, video_id, *args, **kwargs)\n        except ExtractorError as ee:\n            if isinstance(ee.cause, compat_HTTPError):\n                response = self._parse_json(ee.cause.read().decode('utf-8'), video_id)\n                self._handle_error(response)\n            raise\n        return response\n\n    def _get_video_url(self, url_or_request, video_id, note='Downloading JSON metadata'):\n        return self._download_json(url_or_request, video_id, note)['data'][0]\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        host, video_id = mobj.group('custom_host') or mobj.group('host'), mobj.group('id')\n\n        headers = {}\n        query = {\n            'id': video_id,\n        }\n\n        referrer = smuggled_data.get('referrer')\n        if referrer:\n            headers['Referer'] = referrer\n            query['referrer'] = referrer\n\n        player_data = self._download_json(\n            'http://%s/api/player_data' % host, video_id,\n            headers=headers, query=query)\n\n        media = player_data['data']['playlist']['viewports'][0]['medialist'][0]\n\n        title = media['title']\n        description = media.get('description')\n        thumbnail = self._proto_relative_url(media.get('snapshot'), 'http:')\n        duration = int_or_none(media.get('duration'))\n        view_count = int_or_none(media.get('views'))\n\n        age_restriction = media.get('age_restriction')\n        age_limit = None\n        if age_restriction:\n            age_limit = 0 if age_restriction == 'allow_all' else 18\n\n        secure_m3u8 = self._proto_relative_url(media['sources']['secure_m3u8']['auto'], 'http:')\n\n        formats = []\n\n        m3u8_url = self._get_video_url(secure_m3u8, video_id, 'Downloading m3u8 JSON')\n        m3u8_formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', entry_protocol='m3u8_native',\n            m3u8_id='hls', fatal=False)\n        formats.extend(m3u8_formats)\n\n        m3u8_formats_dict = {}\n        for f in m3u8_formats:\n            if f.get('height') is not None:\n                m3u8_formats_dict[f['height']] = f\n\n        mp4_data = self._download_json(\n            \n            \n            re.sub(r'm3u8|hlsvod|hls|f4m', 'mp4s', secure_m3u8),\n            video_id, 'Downloading mp4 JSON', fatal=False)\n        if mp4_data:\n            for format_id, format_url in mp4_data.get('data', {}).items():\n                if not isinstance(format_url, compat_str):\n                    continue\n                height = int_or_none(format_id)\n                if height is not None and m3u8_formats_dict.get(height):\n                    f = m3u8_formats_dict[height].copy()\n                    f.update({\n                        'format_id': f['format_id'].replace('hls', 'http'),\n                        'protocol': 'http',\n                    })\n                else:\n                    f = {\n                        'format_id': 'http-%s' % format_id,\n                        'height': int_or_none(format_id),\n                    }\n                f['url'] = format_url\n                formats.append(f)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "comments": "(?x)\n                    (?:\n                        eagleplatform:(?P<custom_host>[^/]+):|\n                        https?://(?P<host>.+?\\.media\\.eagleplatform\\.com)/index/player\\?.*\\brecord_id=\n                    )\n                    (?P<id>\\d+)\n                '''\n    _TESTS = [{\n        # http://lenta.ru/news/2015/03/06/navalny/\n        'url': 'http://lentaru.media.eagleplatform.com/index/player?player=new&record_id=227304&player_template_id=5201',\n        # Not checking MD5 as sometimes the direct HTTP link results in 404 and HLS is used\n        'info_dict': {\n            'id': '227304',\n            'ext': 'mp4',\n            'title': '\u041d\u0430\u0432\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0448\u0435\u043b \u043d\u0430 \u0441\u0432\u043e\u0431\u043e\u0434\u0443',\n            'description': 'md5:d97861ac9ae77377f3f20eaf9d04b4f5',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 87,\n            'view_count': int,\n            'age_limit': 0,\n        },\n    }, {\n        # http://muz-tv.ru/play/7129/\n        # http://media.clipyou.ru/index/player?record_id=12820&width=730&height=415&autoplay=true\n        'url': 'eagleplatform:media.clipyou.ru:12820',\n        'md5': '358597369cf8ba56675c1df15e7af624',\n        'info_dict': {\n            'id': '12820',\n            'ext': 'mp4',\n            'title': \"'O Sole Mio\",\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 216,\n            'view_count': int,\n        },\n        'skip': 'Georestricted',\n    }, {\n        # referrer protected video (https://tvrain.ru/lite/teleshow/kak_vse_nachinalos/namin-418921/)\n        'url': 'eagleplatform:tvrainru.media.eagleplatform.com:582306',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        # Regular iframe embedding\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//.+?\\.media\\.eagleplatform\\.com/index/player\\?.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return mobj.group('url')\n        PLAYER_JS_RE = r'''\n                        <script[^>]+\n                            src=(?P<qjs>[\"\\'])(?:https?:)?//(?P<host>(?:(?!(?P=qjs)).)+\\.media\\.eagleplatform\\.com)/player/player\\.js(?P=qjs)\n                        .+?\n                    '''\n        # \"Basic usage\" embedding (see http://dultonmedia.github.io/eplayer/)\n        mobj = re.search(\n            r'''(?xs)\n                    %s\n                    <div[^>]+\n                        class=(?P<qclass>[\"\\'])eagleplayer(?P=qclass)[^>]+\n                        data-id=[\"\\'](?P<id>\\d+)\n            ''' % PLAYER_JS_RE, webpage)\n        if mobj is not None:\n            return 'eagleplatform:%(host)s:%(id)s' % mobj.groupdict()\n        # Generalization of \"Javascript code usage\", \"Combined usage\" and\n        # \"Usage without attaching to DOM\" embeddings (see\n        # http://dultonmedia.github.io/eplayer/)\n        mobj = re.search(\n            r'''(?xs)\n                    %s\n                    <script>\n                    .+?\n                    new\\s+EaglePlayer\\(\n                        (?:[^,]+\\s*,\\s*)?\n                        {\n                            .+?\n                            \\bid\\s*:\\s*[\"\\']?(?P<id>\\d+)\n                            .+?\n                        }\n                    \\s*\\)\n                    .+?\n                    </script>\n            \n \n# coding: utf-8\n# Secure mp4 URL is constructed according to Player.prototype.mp4 from\n# http://lentaru.media.eagleplatform.com/player/player.js\n", "content": "# coding: utf-8\nfrom __future__ import unicode_literals\n\nimport re\n\nfrom .common import InfoExtractor\nfrom ..compat import (\n    compat_HTTPError,\n    compat_str,\n)\nfrom ..utils import (\n    ExtractorError,\n    int_or_none,\n    unsmuggle_url,\n)\n\n\nclass EaglePlatformIE(InfoExtractor):\n    _VALID_URL = r'''(?x)\n                    (?:\n                        eagleplatform:(?P<custom_host>[^/]+):|\n                        https?://(?P<host>.+?\\.media\\.eagleplatform\\.com)/index/player\\?.*\\brecord_id=\n                    )\n                    (?P<id>\\d+)\n                '''\n    _TESTS = [{\n        # http://lenta.ru/news/2015/03/06/navalny/\n        'url': 'http://lentaru.media.eagleplatform.com/index/player?player=new&record_id=227304&player_template_id=5201',\n        # Not checking MD5 as sometimes the direct HTTP link results in 404 and HLS is used\n        'info_dict': {\n            'id': '227304',\n            'ext': 'mp4',\n            'title': '\u041d\u0430\u0432\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u044b\u0448\u0435\u043b \u043d\u0430 \u0441\u0432\u043e\u0431\u043e\u0434\u0443',\n            'description': 'md5:d97861ac9ae77377f3f20eaf9d04b4f5',\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 87,\n            'view_count': int,\n            'age_limit': 0,\n        },\n    }, {\n        # http://muz-tv.ru/play/7129/\n        # http://media.clipyou.ru/index/player?record_id=12820&width=730&height=415&autoplay=true\n        'url': 'eagleplatform:media.clipyou.ru:12820',\n        'md5': '358597369cf8ba56675c1df15e7af624',\n        'info_dict': {\n            'id': '12820',\n            'ext': 'mp4',\n            'title': \"'O Sole Mio\",\n            'thumbnail': r're:^https?://.*\\.jpg$',\n            'duration': 216,\n            'view_count': int,\n        },\n        'skip': 'Georestricted',\n    }, {\n        # referrer protected video (https://tvrain.ru/lite/teleshow/kak_vse_nachinalos/namin-418921/)\n        'url': 'eagleplatform:tvrainru.media.eagleplatform.com:582306',\n        'only_matching': True,\n    }]\n\n    @staticmethod\n    def _extract_url(webpage):\n        # Regular iframe embedding\n        mobj = re.search(\n            r'<iframe[^>]+src=([\"\\'])(?P<url>(?:https?:)?//.+?\\.media\\.eagleplatform\\.com/index/player\\?.+?)\\1',\n            webpage)\n        if mobj is not None:\n            return mobj.group('url')\n        PLAYER_JS_RE = r'''\n                        <script[^>]+\n                            src=(?P<qjs>[\"\\'])(?:https?:)?//(?P<host>(?:(?!(?P=qjs)).)+\\.media\\.eagleplatform\\.com)/player/player\\.js(?P=qjs)\n                        .+?\n                    '''\n        # \"Basic usage\" embedding (see http://dultonmedia.github.io/eplayer/)\n        mobj = re.search(\n            r'''(?xs)\n                    %s\n                    <div[^>]+\n                        class=(?P<qclass>[\"\\'])eagleplayer(?P=qclass)[^>]+\n                        data-id=[\"\\'](?P<id>\\d+)\n            ''' % PLAYER_JS_RE, webpage)\n        if mobj is not None:\n            return 'eagleplatform:%(host)s:%(id)s' % mobj.groupdict()\n        # Generalization of \"Javascript code usage\", \"Combined usage\" and\n        # \"Usage without attaching to DOM\" embeddings (see\n        # http://dultonmedia.github.io/eplayer/)\n        mobj = re.search(\n            r'''(?xs)\n                    %s\n                    <script>\n                    .+?\n                    new\\s+EaglePlayer\\(\n                        (?:[^,]+\\s*,\\s*)?\n                        {\n                            .+?\n                            \\bid\\s*:\\s*[\"\\']?(?P<id>\\d+)\n                            .+?\n                        }\n                    \\s*\\)\n                    .+?\n                    </script>\n            ''' % PLAYER_JS_RE, webpage)\n        if mobj is not None:\n            return 'eagleplatform:%(host)s:%(id)s' % mobj.groupdict()\n\n    @staticmethod\n    def _handle_error(response):\n        status = int_or_none(response.get('status', 200))\n        if status != 200:\n            raise ExtractorError(' '.join(response['errors']), expected=True)\n\n    def _download_json(self, url_or_request, video_id, *args, **kwargs):\n        try:\n            response = super(EaglePlatformIE, self)._download_json(\n                url_or_request, video_id, *args, **kwargs)\n        except ExtractorError as ee:\n            if isinstance(ee.cause, compat_HTTPError):\n                response = self._parse_json(ee.cause.read().decode('utf-8'), video_id)\n                self._handle_error(response)\n            raise\n        return response\n\n    def _get_video_url(self, url_or_request, video_id, note='Downloading JSON metadata'):\n        return self._download_json(url_or_request, video_id, note)['data'][0]\n\n    def _real_extract(self, url):\n        url, smuggled_data = unsmuggle_url(url, {})\n\n        mobj = re.match(self._VALID_URL, url)\n        host, video_id = mobj.group('custom_host') or mobj.group('host'), mobj.group('id')\n\n        headers = {}\n        query = {\n            'id': video_id,\n        }\n\n        referrer = smuggled_data.get('referrer')\n        if referrer:\n            headers['Referer'] = referrer\n            query['referrer'] = referrer\n\n        player_data = self._download_json(\n            'http://%s/api/player_data' % host, video_id,\n            headers=headers, query=query)\n\n        media = player_data['data']['playlist']['viewports'][0]['medialist'][0]\n\n        title = media['title']\n        description = media.get('description')\n        thumbnail = self._proto_relative_url(media.get('snapshot'), 'http:')\n        duration = int_or_none(media.get('duration'))\n        view_count = int_or_none(media.get('views'))\n\n        age_restriction = media.get('age_restriction')\n        age_limit = None\n        if age_restriction:\n            age_limit = 0 if age_restriction == 'allow_all' else 18\n\n        secure_m3u8 = self._proto_relative_url(media['sources']['secure_m3u8']['auto'], 'http:')\n\n        formats = []\n\n        m3u8_url = self._get_video_url(secure_m3u8, video_id, 'Downloading m3u8 JSON')\n        m3u8_formats = self._extract_m3u8_formats(\n            m3u8_url, video_id, 'mp4', entry_protocol='m3u8_native',\n            m3u8_id='hls', fatal=False)\n        formats.extend(m3u8_formats)\n\n        m3u8_formats_dict = {}\n        for f in m3u8_formats:\n            if f.get('height') is not None:\n                m3u8_formats_dict[f['height']] = f\n\n        mp4_data = self._download_json(\n            # Secure mp4 URL is constructed according to Player.prototype.mp4 from\n            # http://lentaru.media.eagleplatform.com/player/player.js\n            re.sub(r'm3u8|hlsvod|hls|f4m', 'mp4s', secure_m3u8),\n            video_id, 'Downloading mp4 JSON', fatal=False)\n        if mp4_data:\n            for format_id, format_url in mp4_data.get('data', {}).items():\n                if not isinstance(format_url, compat_str):\n                    continue\n                height = int_or_none(format_id)\n                if height is not None and m3u8_formats_dict.get(height):\n                    f = m3u8_formats_dict[height].copy()\n                    f.update({\n                        'format_id': f['format_id'].replace('hls', 'http'),\n                        'protocol': 'http',\n                    })\n                else:\n                    f = {\n                        'format_id': 'http-%s' % format_id,\n                        'height': int_or_none(format_id),\n                    }\n                f['url'] = format_url\n                formats.append(f)\n\n        self._sort_formats(formats)\n\n        return {\n            'id': video_id,\n            'title': title,\n            'description': description,\n            'thumbnail': thumbnail,\n            'duration': duration,\n            'view_count': view_count,\n            'age_limit': age_limit,\n            'formats': formats,\n        }\n", "description": "Command-line program to download videos from YouTube.com and other video sites", "file_name": "eagleplatform.py", "language": "Python", "project_name": "youtube-dl", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/rg3_youtube-dl/rg3-youtube-dl-6202f08/youtube_dl/extractor/eagleplatform.py", "save_time": "", "source": "", "update_at": "2018-03-07T09:18:39Z", "url": "https://github.com/rg3/youtube-dl", "wiki": false}