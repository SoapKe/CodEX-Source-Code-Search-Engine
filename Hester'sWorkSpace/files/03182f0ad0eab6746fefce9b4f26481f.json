{"author": "ansible", "code": "\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_sudocmdgroup\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA sudo command group\ndescription:\n- Add, modify or delete sudo command group within IPA server using IPA API.\noptions:\n  cn:\n    description:\n    - Sudo Command Group.\n    aliases: ['name']\n    required: true\n  description:\n    description:\n    - Group description.\n  state:\n    description: State to ensure\n    default: present\n    choices: ['present', 'absent']\n  sudocmd:\n    description:\n    - List of sudo commands to assign to the group.\n    - If an empty list is passed all assigned commands will be removed from the group.\n    - If option is omitted sudo commands will not be checked or changed.\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n- name: Ensure sudo command group exists\n  ipa_sudocmdgroup:\n    name: group01\n    description: Group of important commands\n    sudocmd:\n    - su\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure sudo command group does not exist\n  ipa_sudocmdgroup:\n    name: group01\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nsudocmdgroup:\n  description: Sudo command group as returned by IPA API\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass SudoCmdGroupIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(SudoCmdGroupIPAClient, self).__init__(module, host, port, protocol)\n\n    def sudocmdgroup_find(self, name):\n        return self._post_json(method='sudocmdgroup_find', name=None, item={'all': True, 'cn': name})\n\n    def sudocmdgroup_add(self, name, item):\n        return self._post_json(method='sudocmdgroup_add', name=name, item=item)\n\n    def sudocmdgroup_mod(self, name, item):\n        return self._post_json(method='sudocmdgroup_mod', name=name, item=item)\n\n    def sudocmdgroup_del(self, name):\n        return self._post_json(method='sudocmdgroup_del', name=name)\n\n    def sudocmdgroup_add_member(self, name, item):\n        return self._post_json(method='sudocmdgroup_add_member', name=name, item=item)\n\n    def sudocmdgroup_add_member_sudocmd(self, name, item):\n        return self.sudocmdgroup_add_member(name=name, item={'sudocmd': item})\n\n    def sudocmdgroup_remove_member(self, name, item):\n        return self._post_json(method='sudocmdgroup_remove_member', name=name, item=item)\n\n    def sudocmdgroup_remove_member_sudocmd(self, name, item):\n        return self.sudocmdgroup_remove_member(name=name, item={'sudocmd': item})\n\n\ndef get_sudocmdgroup_dict(description=None):\n    data = {}\n    if description is not None:\n        data['description'] = description\n    return data\n\n\ndef get_sudocmdgroup_diff(client, ipa_sudocmdgroup, module_sudocmdgroup):\n    return client.get_diff(ipa_data=ipa_sudocmdgroup, module_data=module_sudocmdgroup)\n\n\ndef ensure(module, client):\n    name = module.params['cn']\n    state = module.params['state']\n    sudocmd = module.params['sudocmd']\n\n    module_sudocmdgroup = get_sudocmdgroup_dict(description=module.params['description'])\n    ipa_sudocmdgroup = client.sudocmdgroup_find(name=name)\n\n    changed = False\n    if state == 'present':\n        if not ipa_sudocmdgroup:\n            changed = True\n            if not module.check_mode:\n                ipa_sudocmdgroup = client.sudocmdgroup_add(name=name, item=module_sudocmdgroup)\n        else:\n            diff = get_sudocmdgroup_diff(client, ipa_sudocmdgroup, module_sudocmdgroup)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_sudocmdgroup.get(key)\n                    client.sudocmdgroup_mod(name=name, item=data)\n\n        if sudocmd is not None:\n            changed = client.modify_if_diff(name, ipa_sudocmdgroup.get('member_sudocmd', []), sudocmd,\n                                            client.sudocmdgroup_add_member_sudocmd,\n                                            client.sudocmdgroup_remove_member_sudocmd)\n    else:\n        if ipa_sudocmdgroup:\n            changed = True\n            if not module.check_mode:\n                client.sudocmdgroup_del(name=name)\n\n    return changed, client.sudocmdgroup_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         state=dict(type='str', default='present', choices=['present', 'absent', 'enabled', 'disabled']),\n                         sudocmd=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    client = SudoCmdGroupIPAClient(module=module,\n                                   host=module.params['ipa_host'],\n                                   port=module.params['ipa_port'],\n                                   protocol=module.params['ipa_prot'])\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, sudocmdgroup = ensure(module, client)\n        module.exit_json(changed=changed, sudorule=sudocmdgroup)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\nif __name__ == '__main__':\n    main()\n", "comments": "        module  ipa sudocmdgroup author  thomas krahn ( nosmoht) short description  manage freeipa sudo command group description    add  modify delete sudo command group within ipa server using ipa api  options    cn      description        sudo command group      aliases    name       required  true   description      description        group description    state      description  state ensure     default  present     choices    present    absent     sudocmd      description        list sudo commands assign group        if empty list passed assigned commands removed group        if option omitted sudo commands checked changed  extends documentation fragment  ipa documentation version added   2 3       examples         name  ensure sudo command group exists   ipa sudocmdgroup      name  group01     description  group important commands     sudocmd        su     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret    name  ensure sudo command group exist   ipa sudocmdgroup      name  group01     state  absent     ipa host  ipa example com     ipa user  admin     ipa pass  topsecret      return       sudocmdgroup    description  sudo command group returned ipa api   returned  always   type  dict         usr bin python        coding  utf 8        copyright  (c) 2017  ansible project    gnu general public license v3 0  (see copying https   www gnu org licenses gpl 3 0 txt) ", "content": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n# Copyright: (c) 2017, Ansible Project\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import absolute_import, division, print_function\n__metaclass__ = type\n\nANSIBLE_METADATA = {'metadata_version': '1.1',\n                    'status': ['preview'],\n                    'supported_by': 'community'}\n\n\nDOCUMENTATION = '''\n---\nmodule: ipa_sudocmdgroup\nauthor: Thomas Krahn (@Nosmoht)\nshort_description: Manage FreeIPA sudo command group\ndescription:\n- Add, modify or delete sudo command group within IPA server using IPA API.\noptions:\n  cn:\n    description:\n    - Sudo Command Group.\n    aliases: ['name']\n    required: true\n  description:\n    description:\n    - Group description.\n  state:\n    description: State to ensure\n    default: present\n    choices: ['present', 'absent']\n  sudocmd:\n    description:\n    - List of sudo commands to assign to the group.\n    - If an empty list is passed all assigned commands will be removed from the group.\n    - If option is omitted sudo commands will not be checked or changed.\nextends_documentation_fragment: ipa.documentation\nversion_added: \"2.3\"\n'''\n\nEXAMPLES = '''\n- name: Ensure sudo command group exists\n  ipa_sudocmdgroup:\n    name: group01\n    description: Group of important commands\n    sudocmd:\n    - su\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n\n- name: Ensure sudo command group does not exist\n  ipa_sudocmdgroup:\n    name: group01\n    state: absent\n    ipa_host: ipa.example.com\n    ipa_user: admin\n    ipa_pass: topsecret\n'''\n\nRETURN = '''\nsudocmdgroup:\n  description: Sudo command group as returned by IPA API\n  returned: always\n  type: dict\n'''\n\nimport traceback\n\nfrom ansible.module_utils.basic import AnsibleModule\nfrom ansible.module_utils.ipa import IPAClient, ipa_argument_spec\nfrom ansible.module_utils._text import to_native\n\n\nclass SudoCmdGroupIPAClient(IPAClient):\n    def __init__(self, module, host, port, protocol):\n        super(SudoCmdGroupIPAClient, self).__init__(module, host, port, protocol)\n\n    def sudocmdgroup_find(self, name):\n        return self._post_json(method='sudocmdgroup_find', name=None, item={'all': True, 'cn': name})\n\n    def sudocmdgroup_add(self, name, item):\n        return self._post_json(method='sudocmdgroup_add', name=name, item=item)\n\n    def sudocmdgroup_mod(self, name, item):\n        return self._post_json(method='sudocmdgroup_mod', name=name, item=item)\n\n    def sudocmdgroup_del(self, name):\n        return self._post_json(method='sudocmdgroup_del', name=name)\n\n    def sudocmdgroup_add_member(self, name, item):\n        return self._post_json(method='sudocmdgroup_add_member', name=name, item=item)\n\n    def sudocmdgroup_add_member_sudocmd(self, name, item):\n        return self.sudocmdgroup_add_member(name=name, item={'sudocmd': item})\n\n    def sudocmdgroup_remove_member(self, name, item):\n        return self._post_json(method='sudocmdgroup_remove_member', name=name, item=item)\n\n    def sudocmdgroup_remove_member_sudocmd(self, name, item):\n        return self.sudocmdgroup_remove_member(name=name, item={'sudocmd': item})\n\n\ndef get_sudocmdgroup_dict(description=None):\n    data = {}\n    if description is not None:\n        data['description'] = description\n    return data\n\n\ndef get_sudocmdgroup_diff(client, ipa_sudocmdgroup, module_sudocmdgroup):\n    return client.get_diff(ipa_data=ipa_sudocmdgroup, module_data=module_sudocmdgroup)\n\n\ndef ensure(module, client):\n    name = module.params['cn']\n    state = module.params['state']\n    sudocmd = module.params['sudocmd']\n\n    module_sudocmdgroup = get_sudocmdgroup_dict(description=module.params['description'])\n    ipa_sudocmdgroup = client.sudocmdgroup_find(name=name)\n\n    changed = False\n    if state == 'present':\n        if not ipa_sudocmdgroup:\n            changed = True\n            if not module.check_mode:\n                ipa_sudocmdgroup = client.sudocmdgroup_add(name=name, item=module_sudocmdgroup)\n        else:\n            diff = get_sudocmdgroup_diff(client, ipa_sudocmdgroup, module_sudocmdgroup)\n            if len(diff) > 0:\n                changed = True\n                if not module.check_mode:\n                    data = {}\n                    for key in diff:\n                        data[key] = module_sudocmdgroup.get(key)\n                    client.sudocmdgroup_mod(name=name, item=data)\n\n        if sudocmd is not None:\n            changed = client.modify_if_diff(name, ipa_sudocmdgroup.get('member_sudocmd', []), sudocmd,\n                                            client.sudocmdgroup_add_member_sudocmd,\n                                            client.sudocmdgroup_remove_member_sudocmd)\n    else:\n        if ipa_sudocmdgroup:\n            changed = True\n            if not module.check_mode:\n                client.sudocmdgroup_del(name=name)\n\n    return changed, client.sudocmdgroup_find(name=name)\n\n\ndef main():\n    argument_spec = ipa_argument_spec()\n    argument_spec.update(cn=dict(type='str', required=True, aliases=['name']),\n                         description=dict(type='str'),\n                         state=dict(type='str', default='present', choices=['present', 'absent', 'enabled', 'disabled']),\n                         sudocmd=dict(type='list'))\n\n    module = AnsibleModule(argument_spec=argument_spec,\n                           supports_check_mode=True)\n\n    client = SudoCmdGroupIPAClient(module=module,\n                                   host=module.params['ipa_host'],\n                                   port=module.params['ipa_port'],\n                                   protocol=module.params['ipa_prot'])\n    try:\n        client.login(username=module.params['ipa_user'],\n                     password=module.params['ipa_pass'])\n        changed, sudocmdgroup = ensure(module, client)\n        module.exit_json(changed=changed, sudorule=sudocmdgroup)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n\nif __name__ == '__main__':\n    main()\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "ipa_sudocmdgroup.py", "id": "03182f0ad0eab6746fefce9b4f26481f", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/lib/ansible/modules/identity/ipa/ipa_sudocmdgroup.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}