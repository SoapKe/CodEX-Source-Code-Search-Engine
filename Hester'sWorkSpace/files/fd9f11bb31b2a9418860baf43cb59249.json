{"author": "USArmyResearchLab", "code": "\n Author: MM - https://github.com/1modm\n\n The Session Initiation Protocol (SIP) is the IETF protocol for VOIP and other text and multimedia sessions\n and is a communications protocol for signaling and controlling. \n SIP is independent from the underlying transport protocol. It runs on the Transmission Control Protocol (TCP), \n the User Datagram Protocol (UDP) or the Stream Control Transmission Protocol (SCTP)\n\n Rate and codec calculation thanks to https://git.ucd.ie/volte-and-of/voip-pcapy\n\n RFC: https://www.ietf.org/rfc/rfc3261.txt\n\n SIP is a text-based protocol with syntax similar to that of HTTP. \n There are two different types of SIP messages: requests and responses.\n - Requests initiate a SIP transaction between two SIP entities for establishing, controlling, and terminating sessions. \n - Responses are send by the user agent server indicating the result of a received request.\n\n - SIP session setup example:\n\n       Alice's  . . . . . . . . . . . . . . . . . . . .  Bob's\n      softphone        SIP Phone\n         ||||\n         ||||\n         ||||\n         ||||\n         ||||\n         ||||\n         ||||\n         ||||\n         ||||\n         ||||\n         ||||\n         |       ACK F12    |\n         |----------------------------------|\n         |   Media Session  |\n         ||\n         |       BYE F13    |\n         |----------------------------------|\n         |     200 OK F14   |\n         |----------------------------------|\n         |  |\n\n\nimport dshell\nimport dpkt\nimport datetime\nimport colorout\n\nclass DshellDecoder(dshell.UDPDecoder):\n\n    def __init__(self):\n        dshell.UDPDecoder.__init__(self,\nname='sip',\ndescription='Session Initiation Protocol (SIP) capture decoder',\nlongdescription=\"\"\"\nThe Session Initiation Protocol (SIP) decoder will extract the Call ID, User agent, Codec, Method, \nSIP call, Host, and Client MAC address from every SIP request or response packet found in the given pcap.  \n\nGeneral usage:\n    decode -d sip <pcap> \n\nDetailed usage:\n    decode -d sip --sip_showpkt <pcap> \n\nLayer2 sll usage:\n    decode -d sip --no-vlan --layer2=sll.SLL <pcap> \n\nSIP over TCP:\n    decode -d sip --bpf 'tcp' <pcap> \n\nSIP is a text-based protocol with syntax similar to that of HTTP, so you can use followstream decoder:\n    decode -d followstream --ebpf 'port 5060' --bpf 'udp' <pcap>\n\nExamples:\n\n    https://wiki.wireshark.org/SampleCapturesSIP_and_RTP\n    http://vignette3.wikia.nocookie.net/networker/images/f/fb/Sample_SIP_call_with_RTP_in_G711.pcap/revision/latest?cb=20140723121754\n\n    decode -d sip metasploit-sip-invite-spoof.pcap\n    decode -d sip Sample_SIP_call_with_RTP_in_G711.pcap\n\nOutput:\n\n    <-- SIP Request --> \n    Timestamp: 2016-09-21 22:44:28.220185 UTC - Protocol: UDP - Size: 435 bytes\n    Sequence and Method: 1 ACK\n    From: 10.5.1.8:5060 (00:20:80:a1:13:db) to 10.5.1.7:5060 (15:2a:01:b4:0f:47)\n    Via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK940bdac4-8a13-1410-9e58-08002772a6e9;rport\n    SIP call: \"M\" <sip:M@10.5.1.8>;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9  -->  \"miguel\" <sip:demo-alice@10.5.1.7>;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce\n    Call ID: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC\n\n    --> SIP Response <-- \n    Timestamp: 2016-09-21 22:44:27.849761 UTC - Protocol: UDP - Size: 919 bytes\n    Sequence and Method: 1 INVITE\n    From: 10.5.1.7:5060 (02:0a:40:12:30:23) to 10.5.1.8:5060 (d5:02:03:94:31:1b)\n    Via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8\n    SIP call: \"M\" <sip:M@10.5.1.8>;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9  -->  \"miguel\" <sip:demo-alice@10.5.1.7>;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce\n    Call ID: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC\n    Codec selected: PCMU \n    Rate selected: 8000 \n\nDetailed Output:\n\n    --> SIP Response <-- \n    Timestamp: 2016-09-21 22:44:25.360974 UTC - Protocol: UDP - Size: 349 bytes\n    From: 10.5.1.7:5060 (15:2a:01:b4:0f:47) to 10.5.1.8:5060 (00:20:80:a1:13:db) \n    SIP/2.0 100 Trying\n    content-length: 0\n    via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8\n    from: \"M\" <sip:M@10.5.1.8>;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9\n    to: <sip:demo-alice@10.5.1.7>\n    cseq: 1 INVITE\n    call-id: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC\n\n    --> SIP Response <-- \n    Timestamp: 2016-09-21 22:44:25.387780 UTC - Protocol: UDP - Size: 585 bytes\n    From: 10.5.1.7:5060 (15:2a:01:b4:0f:47) to 10.5.1.8:5060 (00:20:80:a1:13:db)\n    SIP/2.0 180 Ringing\n    content-length: 0\n    via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8\n    from: \"M\" <sip:M@10.5.1.8>;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9\n    require: 100rel\n    rseq: 694867676\n    user-agent: Ekiga/4.0.1\n    to: \"miguel\" <sip:demo-alice@10.5.1.7>;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce\n    contact: \"miguel\" <sip:miguel@10.5.1.7>\n    cseq: 1 INVITE\n    allow: INVITE,ACK,OPTIONS,BYE,CANCEL,SUBSCRIBE,NOTIFY,REFER,MESSAGE,INFO,PING,PRACK\n    call-id: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC\n\"\"\",\nfilter='udp',\nauthor='mm',\noptiondict={\n    'showpkt': {'action': 'store_true', 'default': False, 'help': 'Display the full SIP response or request body.'}\n}\n        )\n        \n        self.out = colorout.ColorOutput()\n        self.rate = None\n        self.codec = None\n        self.direction = None\n        self.output = None\n\n    def preModule(self):\n        if 'setColorMode' in dir(self.out):\n            self.out.setColorMode()\n\n    def packetHandler(self, udp, data):\n         Initialize\n        self.output = False\n        self.rate = str()\n        self.codec = str()\n        self.direction = str()\n\n         Check if exists SIP Request\n        try:\n            if dpkt.sip.Request(data):\nsiptxt = \"<-- SIP Request -->\"\nsippkt = dpkt.sip.Request(data)\nself.direction = \"sc\"\nself.output = True\n        except dpkt.UnpackError, e:\n            pass\n\n         Check if exists SIP Response\n        try:\n            if dpkt.sip.Response(data):\nsiptxt = \"--> SIP Response <--\"\nsippkt = dpkt.sip.Response(data)\nself.direction = \"cs\"\nself.output = True\n        except dpkt.UnpackError, e:\n            pass\n\n         If a SIP request or SIP response exists, print the results\n        if self.output:\n             Common output\n            self.out.write(\"\\n{0} \\nTimestamp: {1} UTC - Protocol: {2} - Size: {3} bytes\\n\".format(siptxt, datetime.datetime.utcfromtimestamp(\n            udp.ts), udp.proto, udp.info()['bytes']), formatTag=\"H2\", direction=self.direction)\n            self.out.write(\"From: {0}:{1} ({2}) to {3}:{4} ({5}) \\n\".format(udp.sip, udp.sport, udp.smac,\n            udp.dip, udp.dport, udp.dmac), formatTag=\"H2\", direction=self.direction)\n\n             Show full SIP packet detail\n            if self.showpkt:\nself.out.write(\"{0}\\n\".format(sippkt), formatTag=\"H2\", direction=self.direction)\n\n             Show essential SIP Requests or Responses headers\n            else:\nuser_agent = sippkt.headers.get('user-agent')\nallow = sippkt.headers.get('allow')\nsip_from = sippkt.headers.get('from')\nsip_to = sippkt.headers.get('to')\nsip_callid  = sippkt.headers.get('call-id')\nvia = sippkt.headers.get('via')\ncseq = sippkt.headers.get('cseq')\n\nif cseq:\n    self.out.write(\"Sequence and Method: {0}\\n\".format(cseq), formatTag=\"H2\", direction=self.direction)\n\nif via:\n    self.out.write(\"Via: {0}\\nSIP call: {1}  -->  {2}\\nCall ID: {3}\\n\".format(via, \n    sip_from, sip_to, sip_callid), formatTag=\"H2\", direction=self.direction)\n\n codec and rate negotiated\nfor x in range(sippkt.body.find(' ',sippkt.body.find('a='))+1,sippkt.body.find('/',sippkt.body.find('a='))):\n    self.codec += sippkt.body[x]\nfor x in range(sippkt.body.find(' ',sippkt.body.find('a='))+6,sippkt.body.find('/',sippkt.body.find('a='))+5):\n    self.rate +=sippkt.body[x]\n\nif (self.codec and self.rate):\n    self.out.write(\"Codec selected: {0} \\nRate selected: {1} \\n\".format(self.codec, self.rate), formatTag=\"H2\", direction=self.direction)\n\nif __name__ == '__main__':\n    dObj = DshellDecoder()\n    print dObj\nelse:\n    dObj = DshellDecoder()", "comments": "    the session initiation protocol (sip) decoder extract call id  user agent  codec  method   sip call  host  client mac address every sip request response packet found given pcap     general usage      decode  sip  pcap    detailed usage      decode  sip   sip showpkt  pcap    layer2 sll usage      decode  sip   vlan   layer2 sll sll  pcap    sip tcp      decode  sip   bpf  tcp   pcap    sip text based protocol syntax similar http  use followstream decoder      decode  followstream   ebpf  port 5060    bpf  udp   pcap   examples       https   wiki wireshark org samplecaptures sip rtp     http   vignette3 wikia nocookie net networker images f fb sample sip call rtp g711 pcap revision latest cb 20140723121754      decode  sip metasploit sip invite spoof pcap     decode  sip sample sip call rtp g711 pcap  output           sip request          timestamp  2016 09 21 22 44 28 220185 utc   protocol  udp   size  435 bytes     sequence method  1 ack     from  10 5 1 8 5060 (00 20 80 a1 13 db) 10 5 1 7 5060 (15 2a 01 b4 0f 47)     via  sip 2 0 udp 10 5 1 8 5060 branch z9hg4bk940bdac4 8a13 1410 9e58 08002772a6e9 rport     sip call   m   sip m 10 5 1 8  tag 0ba2d5c4 8a13 1910 9d56 08002772a6e9        miguel   sip demo alice 10 5 1 7  tag 84538c9d ba7e e611 937f 68a3c4f0d6ce     call id  0ba2d5c4 8a13 1910 9d57 08002772a6e9 m pc          sip response          timestamp  2016 09 21 22 44 27 849761 utc   protocol  udp   size  919 bytes     sequence method  1 invite     from  10 5 1 7 5060 (02 0a 40 12 30 23) 10 5 1 8 5060 (d5 02 03 94 31 1b)     via  sip 2 0 udp 10 5 1 8 5060 branch z9hg4bk26a8d5c4 8a13 1910 9d58 08002772a6e9 rport 5060 received 10 5 1 8     sip call   m   sip m 10 5 1 8  tag 0ba2d5c4 8a13 1910 9d56 08002772a6e9        miguel   sip demo alice 10 5 1 7  tag 84538c9d ba7e e611 937f 68a3c4f0d6ce     call id  0ba2d5c4 8a13 1910 9d57 08002772a6e9 m pc     codec selected  pcmu      rate selected  8000   detailed output           sip response          timestamp  2016 09 21 22 44 25 360974 utc   protocol  udp   size  349 bytes     from  10 5 1 7 5060 (15 2a 01 b4 0f 47) 10 5 1 8 5060 (00 20 80 a1 13 db)      sip 2 0 100 trying     content length  0     via  sip 2 0 udp 10 5 1 8 5060 branch z9hg4bk26a8d5c4 8a13 1910 9d58 08002772a6e9 rport 5060 received 10 5 1 8       m   sip m 10 5 1 8  tag 0ba2d5c4 8a13 1910 9d56 08002772a6e9       sip demo alice 10 5 1 7      cseq  1 invite     call id  0ba2d5c4 8a13 1910 9d57 08002772a6e9 m pc          sip response          timestamp  2016 09 21 22 44 25 387780 utc   protocol  udp   size  585 bytes     from  10 5 1 7 5060 (15 2a 01 b4 0f 47) 10 5 1 8 5060 (00 20 80 a1 13 db)     sip 2 0 180 ringing     content length  0     via  sip 2 0 udp 10 5 1 8 5060 branch z9hg4bk26a8d5c4 8a13 1910 9d58 08002772a6e9 rport 5060 received 10 5 1 8       m   sip m 10 5 1 8  tag 0ba2d5c4 8a13 1910 9d56 08002772a6e9     require  100rel     rseq  694867676     user agent  ekiga 4 0 1       miguel   sip demo alice 10 5 1 7  tag 84538c9d ba7e e611 937f 68a3c4f0d6ce     contact   miguel   sip miguel 10 5 1 7      cseq  1 invite     allow  invite ack options bye cancel subscribe notify refer message info ping prack     call id  0ba2d5c4 8a13 1910 9d57 08002772a6e9 m pc           author  mm   https   github com 1modm       the session initiation protocol (sip) ietf protocol voip text multimedia sessions    communications protocol signaling controlling      sip independent underlying transport protocol  it runs transmission control protocol (tcp)      user datagram protocol (udp) stream control transmission protocol (sctp)       rate codec calculation thanks https   git ucd ie volte voip pcapy       rfc  https   www ietf org rfc rfc3261 txt       sip text based protocol syntax similar http      there two different types sip messages  requests responses       requests initiate sip transaction two sip entities establishing  controlling  terminating sessions        responses send user agent server indicating result received request          sip session setup example              alice                                           bob         softphone                                        sip phone                                                                                 invite f1                                                                        invite f2                                    100 trying f3                       invite f4                                    100 trying f5                                                                   180 ringing f6                                 180 ringing f7                                 180 ringing f8                        200 ok f9                                     200 ok f10                                     200 ok f11                                                                                                                                         ack f12                                                                                                                     media session                                                                                                                       bye f13                                                                                                                       200 ok f14                                                                                                                                                          sip rtp    initialize    check exists sip request    check exists sip response    if sip request sip response exists  print results    common output    show full sip packet detail    show essential sip requests responses headers    codec rate negotiated ", "content": "#\n# Author: MM - https://github.com/1modm\n#\n# The Session Initiation Protocol (SIP) is the IETF protocol for VOIP and other text and multimedia sessions\n# and is a communications protocol for signaling and controlling. \n# SIP is independent from the underlying transport protocol. It runs on the Transmission Control Protocol (TCP), \n# the User Datagram Protocol (UDP) or the Stream Control Transmission Protocol (SCTP)\n#\n# Rate and codec calculation thanks to https://git.ucd.ie/volte-and-of/voip-pcapy\n#\n# RFC: https://www.ietf.org/rfc/rfc3261.txt\n#\n# SIP is a text-based protocol with syntax similar to that of HTTP. \n# There are two different types of SIP messages: requests and responses.\n# - Requests initiate a SIP transaction between two SIP entities for establishing, controlling, and terminating sessions. \n# - Responses are send by the user agent server indicating the result of a received request.\n#\n# - SIP session setup example:\n#\n#       Alice's  . . . . . . . . . . . . . . . . . . . .  Bob's\n#      softphone                                        SIP Phone\n#         |                |                |                |\n#         |    INVITE F1   |                |                |\n#         |--------------->|    INVITE F2   |                |\n#         |  100 Trying F3 |--------------->|    INVITE F4   |\n#         |<---------------|  100 Trying F5 |--------------->|\n#         |                |<-------------- | 180 Ringing F6 |\n#         |                | 180 Ringing F7 |<---------------|\n#         | 180 Ringing F8 |<---------------|     200 OK F9  |\n#         |<---------------|    200 OK F10  |<---------------|\n#         |    200 OK F11  |<---------------|                |\n#         |<---------------|                |                |\n#         |                       ACK F12                    |\n#         |------------------------------------------------->|\n#         |                   Media Session                  |\n#         |<================================================>|\n#         |                       BYE F13                    |\n#         |<-------------------------------------------------|\n#         |                     200 OK F14                   |\n#         |------------------------------------------------->|\n#         |                                                  |\n#\n\nimport dshell\nimport dpkt\nimport datetime\nimport colorout\n\nclass DshellDecoder(dshell.UDPDecoder):\n\n    def __init__(self):\n        dshell.UDPDecoder.__init__(self,\n                                name='sip',\n                                description='Session Initiation Protocol (SIP) capture decoder',\n                                longdescription=\"\"\"\nThe Session Initiation Protocol (SIP) decoder will extract the Call ID, User agent, Codec, Method, \nSIP call, Host, and Client MAC address from every SIP request or response packet found in the given pcap.  \n\nGeneral usage:\n    decode -d sip <pcap> \n\nDetailed usage:\n    decode -d sip --sip_showpkt <pcap> \n\nLayer2 sll usage:\n    decode -d sip --no-vlan --layer2=sll.SLL <pcap> \n\nSIP over TCP:\n    decode -d sip --bpf 'tcp' <pcap> \n\nSIP is a text-based protocol with syntax similar to that of HTTP, so you can use followstream decoder:\n    decode -d followstream --ebpf 'port 5060' --bpf 'udp' <pcap>\n\nExamples:\n\n    https://wiki.wireshark.org/SampleCaptures#SIP_and_RTP\n    http://vignette3.wikia.nocookie.net/networker/images/f/fb/Sample_SIP_call_with_RTP_in_G711.pcap/revision/latest?cb=20140723121754\n\n    decode -d sip metasploit-sip-invite-spoof.pcap\n    decode -d sip Sample_SIP_call_with_RTP_in_G711.pcap\n\nOutput:\n\n    <-- SIP Request --> \n    Timestamp: 2016-09-21 22:44:28.220185 UTC - Protocol: UDP - Size: 435 bytes\n    Sequence and Method: 1 ACK\n    From: 10.5.1.8:5060 (00:20:80:a1:13:db) to 10.5.1.7:5060 (15:2a:01:b4:0f:47)\n    Via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK940bdac4-8a13-1410-9e58-08002772a6e9;rport\n    SIP call: \"M\" <sip:M@10.5.1.8>;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9  -->  \"miguel\" <sip:demo-alice@10.5.1.7>;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce\n    Call ID: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC\n\n    --> SIP Response <-- \n    Timestamp: 2016-09-21 22:44:27.849761 UTC - Protocol: UDP - Size: 919 bytes\n    Sequence and Method: 1 INVITE\n    From: 10.5.1.7:5060 (02:0a:40:12:30:23) to 10.5.1.8:5060 (d5:02:03:94:31:1b)\n    Via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8\n    SIP call: \"M\" <sip:M@10.5.1.8>;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9  -->  \"miguel\" <sip:demo-alice@10.5.1.7>;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce\n    Call ID: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC\n    Codec selected: PCMU \n    Rate selected: 8000 \n\nDetailed Output:\n\n    --> SIP Response <-- \n    Timestamp: 2016-09-21 22:44:25.360974 UTC - Protocol: UDP - Size: 349 bytes\n    From: 10.5.1.7:5060 (15:2a:01:b4:0f:47) to 10.5.1.8:5060 (00:20:80:a1:13:db) \n    SIP/2.0 100 Trying\n    content-length: 0\n    via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8\n    from: \"M\" <sip:M@10.5.1.8>;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9\n    to: <sip:demo-alice@10.5.1.7>\n    cseq: 1 INVITE\n    call-id: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC\n\n    --> SIP Response <-- \n    Timestamp: 2016-09-21 22:44:25.387780 UTC - Protocol: UDP - Size: 585 bytes\n    From: 10.5.1.7:5060 (15:2a:01:b4:0f:47) to 10.5.1.8:5060 (00:20:80:a1:13:db)\n    SIP/2.0 180 Ringing\n    content-length: 0\n    via: SIP/2.0/UDP 10.5.1.8:5060;branch=z9hG4bK26a8d5c4-8a13-1910-9d58-08002772a6e9;rport=5060;received=10.5.1.8\n    from: \"M\" <sip:M@10.5.1.8>;tag=0ba2d5c4-8a13-1910-9d56-08002772a6e9\n    require: 100rel\n    rseq: 694867676\n    user-agent: Ekiga/4.0.1\n    to: \"miguel\" <sip:demo-alice@10.5.1.7>;tag=84538c9d-ba7e-e611-937f-68a3c4f0d6ce\n    contact: \"miguel\" <sip:miguel@10.5.1.7>\n    cseq: 1 INVITE\n    allow: INVITE,ACK,OPTIONS,BYE,CANCEL,SUBSCRIBE,NOTIFY,REFER,MESSAGE,INFO,PING,PRACK\n    call-id: 0ba2d5c4-8a13-1910-9d57-08002772a6e9@M-PC\n\"\"\",\n                                filter='udp',\n                                author='mm',\n                                optiondict={\n                                    'showpkt': {'action': 'store_true', 'default': False, 'help': 'Display the full SIP response or request body.'}\n                                }\n        )\n        \n        self.out = colorout.ColorOutput()\n        self.rate = None\n        self.codec = None\n        self.direction = None\n        self.output = None\n\n    def preModule(self):\n        if 'setColorMode' in dir(self.out):\n            self.out.setColorMode()\n\n    def packetHandler(self, udp, data):\n        # Initialize\n        self.output = False\n        self.rate = str()\n        self.codec = str()\n        self.direction = str()\n\n        # Check if exists SIP Request\n        try:\n            if dpkt.sip.Request(data):\n                siptxt = \"<-- SIP Request -->\"\n                sippkt = dpkt.sip.Request(data)\n                self.direction = \"sc\"\n                self.output = True\n        except dpkt.UnpackError, e:\n            pass\n\n        # Check if exists SIP Response\n        try:\n            if dpkt.sip.Response(data):\n                siptxt = \"--> SIP Response <--\"\n                sippkt = dpkt.sip.Response(data)\n                self.direction = \"cs\"\n                self.output = True\n        except dpkt.UnpackError, e:\n            pass\n\n        # If a SIP request or SIP response exists, print the results\n        if self.output:\n            # Common output\n            self.out.write(\"\\n{0} \\nTimestamp: {1} UTC - Protocol: {2} - Size: {3} bytes\\n\".format(siptxt, datetime.datetime.utcfromtimestamp(\n                            udp.ts), udp.proto, udp.info()['bytes']), formatTag=\"H2\", direction=self.direction)\n            self.out.write(\"From: {0}:{1} ({2}) to {3}:{4} ({5}) \\n\".format(udp.sip, udp.sport, udp.smac,\n                            udp.dip, udp.dport, udp.dmac), formatTag=\"H2\", direction=self.direction)\n\n            # Show full SIP packet detail\n            if self.showpkt:                \n                self.out.write(\"{0}\\n\".format(sippkt), formatTag=\"H2\", direction=self.direction)\n\n            # Show essential SIP Requests or Responses headers\n            else:\n                user_agent = sippkt.headers.get('user-agent')\n                allow = sippkt.headers.get('allow')\n                sip_from = sippkt.headers.get('from')\n                sip_to = sippkt.headers.get('to')\n                sip_callid  = sippkt.headers.get('call-id')\n                via = sippkt.headers.get('via')\n                cseq = sippkt.headers.get('cseq')\n\n                if cseq:\n                    self.out.write(\"Sequence and Method: {0}\\n\".format(cseq), formatTag=\"H2\", direction=self.direction)\n\n                if via:\n                    self.out.write(\"Via: {0}\\nSIP call: {1}  -->  {2}\\nCall ID: {3}\\n\".format(via, \n                                    sip_from, sip_to, sip_callid), formatTag=\"H2\", direction=self.direction)\n                \n                # codec and rate negotiated\n                for x in range(sippkt.body.find(' ',sippkt.body.find('a='))+1,sippkt.body.find('/',sippkt.body.find('a='))):\n                    self.codec += sippkt.body[x]\n                for x in range(sippkt.body.find(' ',sippkt.body.find('a='))+6,sippkt.body.find('/',sippkt.body.find('a='))+5):\n                    self.rate +=sippkt.body[x]\n\n                if (self.codec and self.rate):\n                    self.out.write(\"Codec selected: {0} \\nRate selected: {1} \\n\".format(self.codec, self.rate), formatTag=\"H2\", direction=self.direction)\n\nif __name__ == '__main__':\n    dObj = DshellDecoder()\n    print dObj\nelse:\n    dObj = DshellDecoder()", "description": "Dshell is a network forensic analysis framework.", "file_name": "sip.py", "id": "fd9f11bb31b2a9418860baf43cb59249", "language": "Python", "project_name": "Dshell", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/USArmyResearchLab-Dshell/USArmyResearchLab-Dshell-5850adf/decoders/voip/sip.py", "save_time": "", "source": "", "update_at": "2018-03-18T10:01:29Z", "url": "https://github.com/USArmyResearchLab/Dshell", "wiki": true}