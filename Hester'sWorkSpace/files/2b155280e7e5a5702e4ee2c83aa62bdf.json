{"author": "keon", "code": "\n Find first occurance of a number in a sorted array (increasing order)\n Approach- Binary Search\n T(n)- O(log n)\n\n\n\ndef firstOccurance(array, query):\n    lo, hi = 0, len(array) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo) // 2\n        print(\"lo: \", lo, \" hi: \", hi, \" mid: \", mid)\n        if (mid == 0 and array[mid] == query) or \\\n           (array[mid] == query and array[mid-1] < query):\n            return mid\n        elif array[mid] <= query:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n\ndef main():\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6]\n    print(array)\n    print(\"-----SEARCH-----\")\n    query = 3\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 5\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 7\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 1\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = -1\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 9\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n\nif __name__ == \"__main__\":\n    main()\n", "comments": "     find first occurance number sorted array (increasing order)    approach  binary search    t(n)  o(log n)    ", "content": "#\n# Find first occurance of a number in a sorted array (increasing order)\n# Approach- Binary Search\n# T(n)- O(log n)\n#\n\n\ndef firstOccurance(array, query):\n    lo, hi = 0, len(array) - 1\n    while lo <= hi:\n        mid = lo + (hi-lo) // 2\n        print(\"lo: \", lo, \" hi: \", hi, \" mid: \", mid)\n        if (mid == 0 and array[mid] == query) or \\\n           (array[mid] == query and array[mid-1] < query):\n            return mid\n        elif array[mid] <= query:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n\ndef main():\n    array = [1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 6]\n    print(array)\n    print(\"-----SEARCH-----\")\n    query = 3\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 5\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 7\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 1\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = -1\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n    print(\"-----SEARCH-----\")\n    query = 9\n    print(\"found first: \", query, \" in index:\", firstOccurance(array, query))\n\nif __name__ == \"__main__\":\n    main()\n", "description": "Minimal examples of data structures and algorithms in Python", "file_name": "first_occurance.py", "id": "2b155280e7e5a5702e4ee2c83aa62bdf", "language": "Python", "project_name": "algorithms", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/keon-algorithms/keon-algorithms-ea43887/search/first_occurance.py", "save_time": "", "source": "", "update_at": "2018-03-18T13:53:29Z", "url": "https://github.com/keon/algorithms", "wiki": true}