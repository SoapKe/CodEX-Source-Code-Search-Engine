{"author": "benoitc", "code": "import os\nimport inspect\n\nfrom docutils import nodes, utils\n\nimport gunicorn.config as guncfg\n\nHEAD = \"\"\"\\\n.. Please update gunicorn/config.py instead.\n\n.. _settings:\n\nSettings\n========\n\nThis is an exhaustive list of settings for Gunicorn. Some settings are only\nable to be set from a configuration file. The setting name is what should be\nused in the configuration file. The command line arguments are listed as well\nfor reference on setting at the command line.\n\n.. note::\n\n    Settings can be specified by using environment variable\n    ``GUNICORN_CMD_ARGS``. All available command line arguments can be used.\n    For example, to specify the bind address and number of workers::\n\n        $ GUNICORN_CMD_ARGS=\"--bind=127.0.0.1 --workers=3\" gunicorn app:app\n\n    .. versionadded:: 19.7\n\n\"\"\"\nISSUE_URI = 'https://github.com/benoitc/gunicorn/issues/%s'\nPULL_REQUEST_URI = 'https://github.com/benoitc/gunicorn/pull/%s'\n\n\ndef format_settings(app):\n    settings_file = os.path.join(app.srcdir, \"settings.rst\")\n    ret = []\n    for i, s in enumerate(guncfg.KNOWN_SETTINGS):\n        if i == 0 or s.section != guncfg.KNOWN_SETTINGS[i - 1].section:\n            ret.append(\"%s\\n%s\\n\\n\" % (s.section, \"-\" * len(s.section)))\n        ret.append(fmt_setting(s))\n\n    with open(settings_file, 'w') as settings:\n        settings.write(HEAD)\n        settings.write(''.join(ret))\n\n\ndef fmt_setting(s):\n    if callable(s.default):\n        val = inspect.getsource(s.default)\n        val = \"\\n\".join(\"    %s\" % l for l in val.splitlines())\n        val = \" ::\\n\\n\" + val\n    elif s.default == '':\n        val = \"``(empty string)``\"\n    else:\n        val = \"``%s``\" % s.default\n\n    if s.cli and s.meta:\n        args = [\"%s %s\" % (arg, s.meta) for arg in s.cli]\n        cli = ', '.join(args)\n    elif s.cli:\n        cli = \", \".join(s.cli)\n\n    out = []\n    out.append(\".. _%s:\\n\" % s.name.replace(\"_\", \"-\"))\n    out.append(\"%s\" % s.name)\n    out.append(\"~\" * len(s.name))\n    out.append(\"\")\n    if s.cli:\n        out.append(\"* ``%s``\" % cli)\n    out.append(\"* %s\" % val)\n    out.append(\"\")\n    out.append(s.desc)\n    out.append(\"\")\n    out.append(\"\")\n    return \"\\n\".join(out)\n\n\ndef issue_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):\n    issue = utils.unescape(text)\n    text = 'issue ' + issue\n    refnode = nodes.reference(text, text, refuri=ISSUE_URI % issue)\n    return [refnode], []\n\n\ndef pull_request_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):\n    issue = utils.unescape(text)\n    text = 'pull request ' + issue\n    refnode = nodes.reference(text, text, refuri=PULL_REQUEST_URI % issue)\n    return [refnode], []\n\n\ndef setup(app):\n    app.connect('builder-inited', format_settings)\n    app.add_role('issue', issue_role)\n    app.add_role('pr', pull_request_role)\n", "comments": "        please update gunicorn config py instead       settings   settings           this exhaustive list settings gunicorn  some settings able set configuration file  the setting name used configuration file  the command line arguments listed well reference setting command line      note        settings specified using environment variable       gunicorn cmd args    all available command line arguments used      for example  specify bind address number workers              gunicorn cmd args    bind 127 0 0 1   workers 3  gunicorn app app         versionadded   19 7      ", "content": "import os\nimport inspect\n\nfrom docutils import nodes, utils\n\nimport gunicorn.config as guncfg\n\nHEAD = \"\"\"\\\n.. Please update gunicorn/config.py instead.\n\n.. _settings:\n\nSettings\n========\n\nThis is an exhaustive list of settings for Gunicorn. Some settings are only\nable to be set from a configuration file. The setting name is what should be\nused in the configuration file. The command line arguments are listed as well\nfor reference on setting at the command line.\n\n.. note::\n\n    Settings can be specified by using environment variable\n    ``GUNICORN_CMD_ARGS``. All available command line arguments can be used.\n    For example, to specify the bind address and number of workers::\n\n        $ GUNICORN_CMD_ARGS=\"--bind=127.0.0.1 --workers=3\" gunicorn app:app\n\n    .. versionadded:: 19.7\n\n\"\"\"\nISSUE_URI = 'https://github.com/benoitc/gunicorn/issues/%s'\nPULL_REQUEST_URI = 'https://github.com/benoitc/gunicorn/pull/%s'\n\n\ndef format_settings(app):\n    settings_file = os.path.join(app.srcdir, \"settings.rst\")\n    ret = []\n    for i, s in enumerate(guncfg.KNOWN_SETTINGS):\n        if i == 0 or s.section != guncfg.KNOWN_SETTINGS[i - 1].section:\n            ret.append(\"%s\\n%s\\n\\n\" % (s.section, \"-\" * len(s.section)))\n        ret.append(fmt_setting(s))\n\n    with open(settings_file, 'w') as settings:\n        settings.write(HEAD)\n        settings.write(''.join(ret))\n\n\ndef fmt_setting(s):\n    if callable(s.default):\n        val = inspect.getsource(s.default)\n        val = \"\\n\".join(\"    %s\" % l for l in val.splitlines())\n        val = \" ::\\n\\n\" + val\n    elif s.default == '':\n        val = \"``(empty string)``\"\n    else:\n        val = \"``%s``\" % s.default\n\n    if s.cli and s.meta:\n        args = [\"%s %s\" % (arg, s.meta) for arg in s.cli]\n        cli = ', '.join(args)\n    elif s.cli:\n        cli = \", \".join(s.cli)\n\n    out = []\n    out.append(\".. _%s:\\n\" % s.name.replace(\"_\", \"-\"))\n    out.append(\"%s\" % s.name)\n    out.append(\"~\" * len(s.name))\n    out.append(\"\")\n    if s.cli:\n        out.append(\"* ``%s``\" % cli)\n    out.append(\"* %s\" % val)\n    out.append(\"\")\n    out.append(s.desc)\n    out.append(\"\")\n    out.append(\"\")\n    return \"\\n\".join(out)\n\n\ndef issue_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):\n    issue = utils.unescape(text)\n    text = 'issue ' + issue\n    refnode = nodes.reference(text, text, refuri=ISSUE_URI % issue)\n    return [refnode], []\n\n\ndef pull_request_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):\n    issue = utils.unescape(text)\n    text = 'pull request ' + issue\n    refnode = nodes.reference(text, text, refuri=PULL_REQUEST_URI % issue)\n    return [refnode], []\n\n\ndef setup(app):\n    app.connect('builder-inited', format_settings)\n    app.add_role('issue', issue_role)\n    app.add_role('pr', pull_request_role)\n", "description": "gunicorn 'Green Unicorn' is a WSGI HTTP Server for UNIX, fast clients and sleepy applications.", "file_name": "gunicorn_ext.py", "id": "950c397b2dedaf88aeea07ef1d656059", "language": "Python", "project_name": "gunicorn", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/benoitc-gunicorn/benoitc-gunicorn-d1f5268/docs/gunicorn_ext.py", "save_time": "", "source": "", "update_at": "2018-03-18T11:27:00Z", "url": "https://github.com/benoitc/gunicorn", "wiki": true}