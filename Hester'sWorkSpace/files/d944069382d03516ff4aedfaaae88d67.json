{"author": "ansible", "code": " -*- coding: utf-8 -*-\n\n Copyright (c) 2017 F5 Networks Inc.\n GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_user import Parameters\n    from library.bigip_user import ModuleManager\n    from library.bigip_user import ArgumentSpec\n    from library.bigip_user import UnparitionedManager\n    from library.bigip_user import PartitionedManager\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_user import Parameters\n        from ansible.modules.network.f5.bigip_user import ModuleManager\n        from ansible.modules.network.f5.bigip_user import ArgumentSpec\n        from ansible.modules.network.f5.bigip_user import UnparitionedManager\n        from ansible.modules.network.f5.bigip_user import PartitionedManager\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        args = dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            full_name='Fake Person',\n            partition_access=access,\n            update_password='always'\n        )\n\n        p = Parameters(params=args)\n        assert p.username_credential == 'someuser'\n        assert p.password_credential == 'testpass'\n        assert p.full_name == 'Fake Person'\n        assert p.partition_access == access\n        assert p.update_password == 'always'\n\n    def test_api_parameters(self):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        args = dict(\n            name='someuser',\n            description='Fake Person',\n            password='testpass',\n            partitionAccess=access,\n            shell='none'\n        )\n\n        p = Parameters(params=args)\n        assert p.name == 'someuser'\n        assert p.password == 'testpass'\n        assert p.full_name == 'Fake Person'\n        assert p.partition_access == access\n        assert p.shell == 'none'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_user(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            server='localhost',\n            password='password',\n            user='admin',\n            update_password='on_create'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_no_password(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            partition_access=access,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_raises(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        msg = \"The 'update_password' option \" \\\n              \"needs to be set to 'on_create' when creating \" \\\n              \"a resource with a password.\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_create_user_partition_access_raises(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        msg = \"The 'partition_access' option \" \\\n              \"is required when creating a resource.\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_create_user_shell_bash(self, *args):\n        access = [{'name': 'all', 'role': 'admin'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            password='password',\n            server='localhost',\n            update_password='on_create',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_shell_not_permitted_raises(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            update_password='on_create',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        msg = \"Shell access is only available to 'admin' or \" \\\n              \"'resource-admin' roles\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_update_user_password_no_pass(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = Parameters(params=load_fixture('load_auth_user_no_pass.json'))\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.exists = Mock(return_value=True)\n        pm.update_on_device = Mock(return_value=True)\n        pm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_update_user_password_with_pass(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = Parameters(params=load_fixture('load_auth_user_with_pass.json'))\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.exists = Mock(return_value=True)\n        pm.update_on_device = Mock(return_value=True)\n        pm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_update_user_shell_to_none(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='none'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh'\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.exists = Mock(return_value=True)\n        pm.update_on_device = Mock(return_value=True)\n        pm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['shell'] == 'none'\n\n    def test_update_user_shell_to_none_shell_attribute_missing(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='none'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        access = [{'name': 'Common', 'role': 'guest'}]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                partition_access=access\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.exists = Mock(return_value=True)\n        pm.update_on_device = Mock(return_value=True)\n        pm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n        assert not hasattr(results, 'shell')\n\n    def test_update_user_shell_to_bash(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        access = [{'name': 'all', 'role': 'admin'}]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['shell'] == 'bash'\n\n    def test_update_user_shell_to_bash_mutliple_roles(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        access = [\n            {'name': 'Common', 'role': 'operator'},\n            {'name': 'all', 'role': 'guest'}\n        ]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"Shell access is only available to 'admin' or \" \\\n              \"'resource-admin' roles\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n\nclass TestLegacyManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_user(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            server='localhost',\n            password='password',\n            user='admin',\n            update_password='on_create'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_no_password(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            partition_access=access,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_raises(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"The 'update_password' option \" \\\n              \"needs to be set to 'on_create' when creating \" \\\n              \"a resource with a password.\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_create_user_partition_access_raises(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"The 'partition_access' option \" \\\n              \"is required when creating a resource.\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_create_user_shell_bash(self, *args):\n        access = [{'name': 'all', 'role': 'admin'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            password='password',\n            server='localhost',\n            update_password='on_create',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_shell_not_permitted_raises(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            update_password='on_create',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"Shell access is only available to 'admin' or \" \\\n              \"'resource-admin' roles\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_update_user_password(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        access = [{'name': 'Common', 'role': 'guest'}]\n        current = Parameters(\n            params=dict(\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_update_user_shell_to_none(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='none'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh'\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['shell'] == 'none'\n\n    def test_update_user_shell_to_none_shell_attribute_missing(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='none'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        access = [{'name': 'Common', 'role': 'guest'}]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                partition_access=access\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n        assert not hasattr(results, 'shell')\n\n    def test_update_user_shell_to_bash(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        access = [{'name': 'all', 'role': 'admin'}]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['shell'] == 'bash'\n\n    def test_update_user_shell_to_bash_mutliple_roles(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n         Configure the parameters that would be returned by querying the\n         remote device\n        access = [\n            {'name': 'Common', 'role': 'operator'},\n            {'name': 'all', 'role': 'guest'}\n        ]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n         Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"Shell access is only available to 'admin' or \" \\\n              \"'resource-admin' roles\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n", "comments": "      coding  utf 8           copyright (c) 2017 f5 networks inc     gnu general public license v3 0 (see copying https   www gnu org licenses gpl 3 0 txt)    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen    configure parameters would returned querying    remote device    override methods force specific logic module happen ", "content": "# -*- coding: utf-8 -*-\n#\n# Copyright (c) 2017 F5 Networks Inc.\n# GNU General Public License v3.0 (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport json\nimport pytest\nimport sys\n\nfrom nose.plugins.skip import SkipTest\nif sys.version_info < (2, 7):\n    raise SkipTest(\"F5 Ansible modules require Python >= 2.7\")\n\nfrom ansible.compat.tests import unittest\nfrom ansible.compat.tests.mock import Mock\nfrom ansible.compat.tests.mock import patch\nfrom ansible.module_utils.basic import AnsibleModule\n\ntry:\n    from library.bigip_user import Parameters\n    from library.bigip_user import ModuleManager\n    from library.bigip_user import ArgumentSpec\n    from library.bigip_user import UnparitionedManager\n    from library.bigip_user import PartitionedManager\n    from library.module_utils.network.f5.common import F5ModuleError\n    from library.module_utils.network.f5.common import iControlUnexpectedHTTPError\n    from test.unit.modules.utils import set_module_args\nexcept ImportError:\n    try:\n        from ansible.modules.network.f5.bigip_user import Parameters\n        from ansible.modules.network.f5.bigip_user import ModuleManager\n        from ansible.modules.network.f5.bigip_user import ArgumentSpec\n        from ansible.modules.network.f5.bigip_user import UnparitionedManager\n        from ansible.modules.network.f5.bigip_user import PartitionedManager\n        from ansible.module_utils.network.f5.common import F5ModuleError\n        from ansible.module_utils.network.f5.common import iControlUnexpectedHTTPError\n        from units.modules.utils import set_module_args\n    except ImportError:\n        raise SkipTest(\"F5 Ansible modules require the f5-sdk Python library\")\n\nfixture_path = os.path.join(os.path.dirname(__file__), 'fixtures')\nfixture_data = {}\n\n\ndef load_fixture(name):\n    path = os.path.join(fixture_path, name)\n\n    if path in fixture_data:\n        return fixture_data[path]\n\n    with open(path) as f:\n        data = f.read()\n\n    try:\n        data = json.loads(data)\n    except Exception:\n        pass\n\n    fixture_data[path] = data\n    return data\n\n\nclass TestParameters(unittest.TestCase):\n    def test_module_parameters(self):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        args = dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            full_name='Fake Person',\n            partition_access=access,\n            update_password='always'\n        )\n\n        p = Parameters(params=args)\n        assert p.username_credential == 'someuser'\n        assert p.password_credential == 'testpass'\n        assert p.full_name == 'Fake Person'\n        assert p.partition_access == access\n        assert p.update_password == 'always'\n\n    def test_api_parameters(self):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        args = dict(\n            name='someuser',\n            description='Fake Person',\n            password='testpass',\n            partitionAccess=access,\n            shell='none'\n        )\n\n        p = Parameters(params=args)\n        assert p.name == 'someuser'\n        assert p.password == 'testpass'\n        assert p.full_name == 'Fake Person'\n        assert p.partition_access == access\n        assert p.shell == 'none'\n\n\nclass TestManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_user(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            server='localhost',\n            password='password',\n            user='admin',\n            update_password='on_create'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_no_password(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            partition_access=access,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_raises(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        msg = \"The 'update_password' option \" \\\n              \"needs to be set to 'on_create' when creating \" \\\n              \"a resource with a password.\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_create_user_partition_access_raises(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        msg = \"The 'partition_access' option \" \\\n              \"is required when creating a resource.\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_create_user_shell_bash(self, *args):\n        access = [{'name': 'all', 'role': 'admin'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            password='password',\n            server='localhost',\n            update_password='on_create',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_shell_not_permitted_raises(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            update_password='on_create',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.create_on_device = Mock(return_value=True)\n        pm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        msg = \"Shell access is only available to 'admin' or \" \\\n              \"'resource-admin' roles\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_update_user_password_no_pass(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = Parameters(params=load_fixture('load_auth_user_no_pass.json'))\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.exists = Mock(return_value=True)\n        pm.update_on_device = Mock(return_value=True)\n        pm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_update_user_password_with_pass(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = Parameters(params=load_fixture('load_auth_user_with_pass.json'))\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.exists = Mock(return_value=True)\n        pm.update_on_device = Mock(return_value=True)\n        pm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_update_user_shell_to_none(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='none'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh'\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.exists = Mock(return_value=True)\n        pm.update_on_device = Mock(return_value=True)\n        pm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['shell'] == 'none'\n\n    def test_update_user_shell_to_none_shell_attribute_missing(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='none'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        access = [{'name': 'Common', 'role': 'guest'}]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                partition_access=access\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        pm = PartitionedManager(module=module, params=module.params)\n        pm.exists = Mock(return_value=True)\n        pm.update_on_device = Mock(return_value=True)\n        pm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=False)\n        mm.get_manager = Mock(return_value=pm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n        assert not hasattr(results, 'shell')\n\n    def test_update_user_shell_to_bash(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        access = [{'name': 'all', 'role': 'admin'}]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['shell'] == 'bash'\n\n    def test_update_user_shell_to_bash_mutliple_roles(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        access = [\n            {'name': 'Common', 'role': 'operator'},\n            {'name': 'all', 'role': 'guest'}\n        ]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"Shell access is only available to 'admin' or \" \\\n              \"'resource-admin' roles\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n\nclass TestLegacyManager(unittest.TestCase):\n\n    def setUp(self):\n        self.spec = ArgumentSpec()\n\n    def test_create_user(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            server='localhost',\n            password='password',\n            user='admin',\n            update_password='on_create'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_no_password(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            partition_access=access,\n            server='localhost',\n            password='password',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_raises(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"The 'update_password' option \" \\\n              \"needs to be set to 'on_create' when creating \" \\\n              \"a resource with a password.\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_create_user_partition_access_raises(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"The 'partition_access' option \" \\\n              \"is required when creating a resource.\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_create_user_shell_bash(self, *args):\n        access = [{'name': 'all', 'role': 'admin'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            password='password',\n            server='localhost',\n            update_password='on_create',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['partition_access'] == access\n\n    def test_create_user_shell_not_permitted_raises(self, *args):\n        access = [{'name': 'Common', 'role': 'guest'}]\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            partition_access=access,\n            update_password='on_create',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.create_on_device = Mock(return_value=True)\n        upm.exists = Mock(return_value=False)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"Shell access is only available to 'admin' or \" \\\n              \"'resource-admin' roles\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n\n    def test_update_user_password(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password_credential='testpass',\n            password='password',\n            server='localhost',\n            user='admin'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        access = [{'name': 'Common', 'role': 'guest'}]\n        current = Parameters(\n            params=dict(\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n\n    def test_update_user_shell_to_none(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='none'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh'\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['shell'] == 'none'\n\n    def test_update_user_shell_to_none_shell_attribute_missing(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='none'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        access = [{'name': 'Common', 'role': 'guest'}]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                partition_access=access\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is False\n        assert not hasattr(results, 'shell')\n\n    def test_update_user_shell_to_bash(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        access = [{'name': 'all', 'role': 'admin'}]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        results = mm.exec_module()\n\n        assert results['changed'] is True\n        assert results['shell'] == 'bash'\n\n    def test_update_user_shell_to_bash_mutliple_roles(self, *args):\n        set_module_args(dict(\n            username_credential='someuser',\n            password='password',\n            server='localhost',\n            user='admin',\n            shell='bash'\n        ))\n\n        module = AnsibleModule(\n            argument_spec=self.spec.argument_spec,\n            supports_check_mode=self.spec.supports_check_mode\n        )\n\n        # Configure the parameters that would be returned by querying the\n        # remote device\n        access = [\n            {'name': 'Common', 'role': 'operator'},\n            {'name': 'all', 'role': 'guest'}\n        ]\n        current = Parameters(\n            params=dict(\n                user='admin',\n                shell='tmsh',\n                partition_access=access\n            )\n        )\n\n        # Override methods to force specific logic in the module to happen\n        upm = UnparitionedManager(module=module, params=module.params)\n        upm.exists = Mock(return_value=True)\n        upm.update_on_device = Mock(return_value=True)\n        upm.read_current_from_device = Mock(return_value=current)\n\n        mm = ModuleManager(module=module)\n        mm.is_version_less_than_13 = Mock(return_value=True)\n        mm.get_manager = Mock(return_value=upm)\n\n        msg = \"Shell access is only available to 'admin' or \" \\\n              \"'resource-admin' roles\"\n\n        with pytest.raises(F5ModuleError) as ex:\n            mm.exec_module()\n        assert str(ex.value) == msg\n", "description": "Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy. Avoid writing scripts or custom code to deploy and update your applications\u2014 automate in a language that approaches plain English, using SSH, with no agents to install on remote systems.", "file_name": "test_bigip_user.py", "id": "d944069382d03516ff4aedfaaae88d67", "language": "Python", "project_name": "ansible", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/ansible-ansible/ansible-ansible-d30554b/test/units/modules/network/f5/test_bigip_user.py", "save_time": "", "source": "", "update_at": "2018-03-18T14:08:28Z", "url": "https://github.com/ansible/ansible", "wiki": false}