{"author": "HelloZeroNet", "code": "\n\n\n\nimport ctypes\nimport ctypes.wintypes\nimport os\nimport uuid\nimport time\nimport gevent\nimport threading\ntry:\n    from queue import Empty as queue_Empty  \nexcept ImportError:\n    from Queue import Empty as queue_Empty  \n\n__all__ = ['NotificationIcon']\n\n\n\nCreatePopupMenu = ctypes.windll.user32.CreatePopupMenu\nCreatePopupMenu.restype = ctypes.wintypes.HMENU\nCreatePopupMenu.argtypes = []\n\nMF_BYCOMMAND    = 0x0\nMF_BYPOSITION   = 0x400\n\nMF_BITMAP       = 0x4\nMF_CHECKED      = 0x8\nMF_DISABLED     = 0x2\nMF_ENABLED      = 0x0\nMF_GRAYED       = 0x1\nMF_MENUBARBREAK = 0x20\nMF_MENUBREAK    = 0x40\nMF_OWNERDRAW    = 0x100\nMF_POPUP        = 0x10\nMF_SEPARATOR    = 0x800\nMF_STRING       = 0x0\nMF_UNCHECKED    = 0x0\n\nInsertMenu = ctypes.windll.user32.InsertMenuW\nInsertMenu.restype = ctypes.wintypes.BOOL\nInsertMenu.argtypes = [ctypes.wintypes.HMENU, ctypes.wintypes.UINT, ctypes.wintypes.UINT, ctypes.wintypes.UINT, ctypes.wintypes.LPCWSTR]\n\nAppendMenu = ctypes.windll.user32.AppendMenuW\nAppendMenu.restype = ctypes.wintypes.BOOL\nAppendMenu.argtypes = [ctypes.wintypes.HMENU, ctypes.wintypes.UINT, ctypes.wintypes.UINT, ctypes.wintypes.LPCWSTR]\n\nSetMenuDefaultItem = ctypes.windll.user32.SetMenuDefaultItem\nSetMenuDefaultItem.restype = ctypes.wintypes.BOOL\nSetMenuDefaultItem.argtypes = [ctypes.wintypes.HMENU, ctypes.wintypes.UINT, ctypes.wintypes.UINT]\n\nclass POINT(ctypes.Structure):\n    _fields_ = [ ('x', ctypes.wintypes.LONG),\n                 ('y', ctypes.wintypes.LONG)]\n\nGetCursorPos = ctypes.windll.user32.GetCursorPos\nGetCursorPos.argtypes = [ctypes.POINTER(POINT)]\n\nSetForegroundWindow = ctypes.windll.user32.SetForegroundWindow\nSetForegroundWindow.argtypes = [ctypes.wintypes.HWND]\n\nTPM_LEFTALIGN       = 0x0\nTPM_CENTERALIGN     = 0x4\nTPM_RIGHTALIGN      = 0x8\n\nTPM_TOPALIGN        = 0x0\nTPM_VCENTERALIGN    = 0x10\nTPM_BOTTOMALIGN     = 0x20\n\nTPM_NONOTIFY        = 0x80\nTPM_RETURNCMD       = 0x100\n\nTPM_LEFTBUTTON      = 0x0\nTPM_RIGHTBUTTON     = 0x2\n\nTPM_HORNEGANIMATION = 0x800\nTPM_HORPOSANIMATION = 0x400\nTPM_NOANIMATION     = 0x4000\nTPM_VERNEGANIMATION = 0x2000\nTPM_VERPOSANIMATION = 0x1000\n\nTrackPopupMenu = ctypes.windll.user32.TrackPopupMenu\nTrackPopupMenu.restype = ctypes.wintypes.BOOL\nTrackPopupMenu.argtypes = [ctypes.wintypes.HMENU, ctypes.wintypes.UINT, ctypes.c_int, ctypes.c_int, ctypes.c_int, ctypes.wintypes.HWND, ctypes.c_void_p]\n\nPostMessage = ctypes.windll.user32.PostMessageW\nPostMessage.restype = ctypes.wintypes.BOOL\nPostMessage.argtypes = [ctypes.wintypes.HWND, ctypes.wintypes.UINT, ctypes.wintypes.WPARAM, ctypes.wintypes.LPARAM]\n\nDestroyMenu = ctypes.windll.user32.DestroyMenu\nDestroyMenu.restype = ctypes.wintypes.BOOL\nDestroyMenu.argtypes = [ctypes.wintypes.HMENU]\n\n\n\nGUID = ctypes.c_ubyte * 16\n\nclass TimeoutVersionUnion(ctypes.Union):\n    _fields_ = [('uTimeout', ctypes.wintypes.UINT),\n                ('uVersion', ctypes.wintypes.UINT),]\n\nNIS_HIDDEN     = 0x1\nNIS_SHAREDICON = 0x2\n\nclass NOTIFYICONDATA(ctypes.Structure):\n    def __init__(self, *args, **kwargs):\n        super(NOTIFYICONDATA, self).__init__(*args, **kwargs)\n        self.cbSize = ctypes.sizeof(self)\n    _fields_ = [\n        ('cbSize', ctypes.wintypes.DWORD),\n        ('hWnd', ctypes.wintypes.HWND),\n        ('uID', ctypes.wintypes.UINT),\n        ('uFlags', ctypes.wintypes.UINT),\n        ('uCallbackMessage', ctypes.wintypes.UINT),\n        ('hIcon', ctypes.wintypes.HICON),\n        ('szTip', ctypes.wintypes.WCHAR * 64),\n        ('dwState', ctypes.wintypes.DWORD),\n        ('dwStateMask', ctypes.wintypes.DWORD),\n        ('szInfo', ctypes.wintypes.WCHAR * 256),\n        ('union', TimeoutVersionUnion),\n        ('szInfoTitle', ctypes.wintypes.WCHAR * 64),\n        ('dwInfoFlags', ctypes.wintypes.DWORD),\n        ('guidItem', GUID),\n        ('hBalloonIcon', ctypes.wintypes.HICON),\n    ]\n\nNIM_ADD = 0\nNIM_MODIFY = 1\nNIM_DELETE = 2\nNIM_SETFOCUS = 3\nNIM_SETVERSION = 4\n\nNIF_MESSAGE = 1\nNIF_ICON = 2\nNIF_TIP = 4\nNIF_STATE = 8\nNIF_INFO = 16\nNIF_GUID = 32\nNIF_REALTIME = 64\nNIF_SHOWTIP = 128\n\nNIIF_NONE = 0\nNIIF_INFO = 1\nNIIF_WARNING = 2\nNIIF_ERROR = 3\nNIIF_USER = 4\n\nNOTIFYICON_VERSION = 3\nNOTIFYICON_VERSION_4 = 4\n\nShell_NotifyIcon = ctypes.windll.shell32.Shell_NotifyIconW\nShell_NotifyIcon.restype = ctypes.wintypes.BOOL\nShell_NotifyIcon.argtypes = [ctypes.wintypes.DWORD, ctypes.POINTER(NOTIFYICONDATA)]\n\n\n\nIMAGE_BITMAP = 0\nIMAGE_ICON = 1\nIMAGE_CURSOR = 2\n\nLR_CREATEDIBSECTION = 0x00002000\nLR_DEFAULTCOLOR     = 0x00000000\nLR_DEFAULTSIZE      = 0x00000040\nLR_LOADFROMFILE     = 0x00000010\nLR_LOADMAP3DCOLORS  = 0x00001000\nLR_LOADTRANSPARENT  = 0x00000020\nLR_MONOCHROME       = 0x00000001\nLR_SHARED           = 0x00008000\nLR_VGACOLOR         = 0x00000080\n\nOIC_SAMPLE      = 32512\nOIC_HAND        = 32513\nOIC_QUES        = 32514\nOIC_BANG        = 32515\nOIC_NOTE        = 32516\nOIC_WINLOGO     = 32517\nOIC_WARNING     = OIC_BANG\nOIC_ERROR       = OIC_HAND\nOIC_INFORMATION = OIC_NOTE\n\nLoadImage = ctypes.windll.user32.LoadImageW\nLoadImage.restype = ctypes.wintypes.HANDLE\nLoadImage.argtypes = [ctypes.wintypes.HINSTANCE, ctypes.wintypes.LPCWSTR, ctypes.wintypes.UINT, ctypes.c_int, ctypes.c_int, ctypes.wintypes.UINT]\n\n\n\nWNDPROC = ctypes.WINFUNCTYPE(ctypes.c_int, ctypes.wintypes.HWND, ctypes.c_uint, ctypes.wintypes.WPARAM, ctypes.wintypes.LPARAM)\nDefWindowProc = ctypes.windll.user32.DefWindowProcW\nDefWindowProc.restype = ctypes.c_int\nDefWindowProc.argtypes = [ctypes.wintypes.HWND, ctypes.c_uint, ctypes.wintypes.WPARAM, ctypes.wintypes.LPARAM]\n\nWS_OVERLAPPED       = 0x00000000L\nWS_POPUP            = 0x80000000L\nWS_CHILD            = 0x40000000L\nWS_MINIMIZE         = 0x20000000L\nWS_VISIBLE          = 0x10000000L\nWS_DISABLED         = 0x08000000L\nWS_CLIPSIBLINGS     = 0x04000000L\nWS_CLIPCHILDREN     = 0x02000000L\nWS_MAXIMIZE         = 0x01000000L\nWS_CAPTION          = 0x00C00000L\nWS_BORDER           = 0x00800000L\nWS_DLGFRAME         = 0x00400000L\nWS_VSCROLL          = 0x00200000L\nWS_HSCROLL          = 0x00100000L\nWS_SYSMENU          = 0x00080000L\nWS_THICKFRAME       = 0x00040000L\nWS_GROUP            = 0x00020000L\nWS_TABSTOP          = 0x00010000L\n\nWS_MINIMIZEBOX      = 0x00020000L\nWS_MAXIMIZEBOX      = 0x00010000L\n\nWS_OVERLAPPEDWINDOW = (WS_OVERLAPPED     |\n                       WS_CAPTION        |\n                       WS_SYSMENU        |\n                       WS_THICKFRAME     |\n                       WS_MINIMIZEBOX    |\n                       WS_MAXIMIZEBOX)\n\nSM_XVIRTUALSCREEN      = 76\nSM_YVIRTUALSCREEN      = 77\nSM_CXVIRTUALSCREEN     = 78\nSM_CYVIRTUALSCREEN     = 79\nSM_CMONITORS           = 80\nSM_SAMEDISPLAYFORMAT   = 81\n\nWM_NULL                   = 0x0000\nWM_CREATE                 = 0x0001\nWM_DESTROY                = 0x0002\nWM_MOVE                   = 0x0003\nWM_SIZE                   = 0x0005\nWM_ACTIVATE               = 0x0006\nWM_SETFOCUS               = 0x0007\nWM_KILLFOCUS              = 0x0008\nWM_ENABLE                 = 0x000A\nWM_SETREDRAW              = 0x000B\nWM_SETTEXT                = 0x000C\nWM_GETTEXT                = 0x000D\nWM_GETTEXTLENGTH          = 0x000E\nWM_PAINT                  = 0x000F\nWM_CLOSE                  = 0x0010\nWM_QUERYENDSESSION        = 0x0011\nWM_QUIT                   = 0x0012\nWM_QUERYOPEN              = 0x0013\nWM_ERASEBKGND             = 0x0014\nWM_SYSCOLORCHANGE         = 0x0015\nWM_ENDSESSION             = 0x0016\nWM_SHOWWINDOW             = 0x0018\nWM_CTLCOLOR               = 0x0019\nWM_WININICHANGE           = 0x001A\nWM_SETTINGCHANGE          = 0x001A\nWM_DEVMODECHANGE          = 0x001B\nWM_ACTIVATEAPP            = 0x001C\nWM_FONTCHANGE             = 0x001D\nWM_TIMECHANGE             = 0x001E\nWM_CANCELMODE             = 0x001F\nWM_SETCURSOR              = 0x0020\nWM_MOUSEACTIVATE          = 0x0021\nWM_CHILDACTIVATE          = 0x0022\nWM_QUEUESYNC              = 0x0023\nWM_GETMINMAXINFO          = 0x0024\nWM_PAINTICON              = 0x0026\nWM_ICONERASEBKGND         = 0x0027\nWM_NEXTDLGCTL             = 0x0028\nWM_SPOOLERSTATUS          = 0x002A\nWM_DRAWITEM               = 0x002B\nWM_MEASUREITEM            = 0x002C\nWM_DELETEITEM             = 0x002D\nWM_VKEYTOITEM             = 0x002E\nWM_CHARTOITEM             = 0x002F\nWM_SETFONT                = 0x0030\nWM_GETFONT                = 0x0031\nWM_SETHOTKEY              = 0x0032\nWM_GETHOTKEY              = 0x0033\nWM_QUERYDRAGICON          = 0x0037\nWM_COMPAREITEM            = 0x0039\nWM_GETOBJECT              = 0x003D\nWM_COMPACTING             = 0x0041\nWM_COMMNOTIFY             = 0x0044\nWM_WINDOWPOSCHANGING      = 0x0046\nWM_WINDOWPOSCHANGED       = 0x0047\nWM_POWER                  = 0x0048\nWM_COPYDATA               = 0x004A\nWM_CANCELJOURNAL          = 0x004B\nWM_NOTIFY                 = 0x004E\nWM_INPUTLANGCHANGEREQUEST = 0x0050\nWM_INPUTLANGCHANGE        = 0x0051\nWM_TCARD                  = 0x0052\nWM_HELP                   = 0x0053\nWM_USERCHANGED            = 0x0054\nWM_NOTIFYFORMAT           = 0x0055\nWM_CONTEXTMENU            = 0x007B\nWM_STYLECHANGING          = 0x007C\nWM_STYLECHANGED           = 0x007D\nWM_DISPLAYCHANGE          = 0x007E\nWM_GETICON                = 0x007F\nWM_SETICON                = 0x0080\nWM_NCCREATE               = 0x0081\nWM_NCDESTROY              = 0x0082\nWM_NCCALCSIZE             = 0x0083\nWM_NCHITTEST              = 0x0084\nWM_NCPAINT                = 0x0085\nWM_NCACTIVATE             = 0x0086\nWM_GETDLGCODE             = 0x0087\nWM_SYNCPAINT              = 0x0088\nWM_NCMOUSEMOVE            = 0x00A0\nWM_NCLBUTTONDOWN          = 0x00A1\nWM_NCLBUTTONUP            = 0x00A2\nWM_NCLBUTTONDBLCLK        = 0x00A3\nWM_NCRBUTTONDOWN          = 0x00A4\nWM_NCRBUTTONUP            = 0x00A5\nWM_NCRBUTTONDBLCLK        = 0x00A6\nWM_NCMBUTTONDOWN          = 0x00A7\nWM_NCMBUTTONUP            = 0x00A8\nWM_NCMBUTTONDBLCLK        = 0x00A9\nWM_KEYDOWN                = 0x0100\nWM_KEYUP                  = 0x0101\nWM_CHAR                   = 0x0102\nWM_DEADCHAR               = 0x0103\nWM_SYSKEYDOWN             = 0x0104\nWM_SYSKEYUP               = 0x0105\nWM_SYSCHAR                = 0x0106\nWM_SYSDEADCHAR            = 0x0107\nWM_KEYLAST                = 0x0108\nWM_IME_STARTCOMPOSITION   = 0x010D\nWM_IME_ENDCOMPOSITION     = 0x010E\nWM_IME_COMPOSITION        = 0x010F\nWM_IME_KEYLAST            = 0x010F\nWM_INITDIALOG             = 0x0110\nWM_COMMAND                = 0x0111\nWM_SYSCOMMAND             = 0x0112\nWM_TIMER                  = 0x0113\nWM_HSCROLL                = 0x0114\nWM_VSCROLL                = 0x0115\nWM_INITMENU               = 0x0116\nWM_INITMENUPOPUP          = 0x0117\nWM_MENUSELECT             = 0x011F\nWM_MENUCHAR               = 0x0120\nWM_ENTERIDLE              = 0x0121\nWM_MENURBUTTONUP          = 0x0122\nWM_MENUDRAG               = 0x0123\nWM_MENUGETOBJECT          = 0x0124\nWM_UNINITMENUPOPUP        = 0x0125\nWM_MENUCOMMAND            = 0x0126\nWM_CTLCOLORMSGBOX         = 0x0132\nWM_CTLCOLOREDIT           = 0x0133\nWM_CTLCOLORLISTBOX        = 0x0134\nWM_CTLCOLORBTN            = 0x0135\nWM_CTLCOLORDLG            = 0x0136\nWM_CTLCOLORSCROLLBAR      = 0x0137\nWM_CTLCOLORSTATIC         = 0x0138\nWM_MOUSEMOVE              = 0x0200\nWM_LBUTTONDOWN            = 0x0201\nWM_LBUTTONUP              = 0x0202\nWM_LBUTTONDBLCLK          = 0x0203\nWM_RBUTTONDOWN            = 0x0204\nWM_RBUTTONUP              = 0x0205\nWM_RBUTTONDBLCLK          = 0x0206\nWM_MBUTTONDOWN            = 0x0207\nWM_MBUTTONUP              = 0x0208\nWM_MBUTTONDBLCLK          = 0x0209\nWM_MOUSEWHEEL             = 0x020A\nWM_PARENTNOTIFY           = 0x0210\nWM_ENTERMENULOOP          = 0x0211\nWM_EXITMENULOOP           = 0x0212\nWM_NEXTMENU               = 0x0213\nWM_SIZING                 = 0x0214\nWM_CAPTURECHANGED         = 0x0215\nWM_MOVING                 = 0x0216\nWM_DEVICECHANGE           = 0x0219\nWM_MDICREATE              = 0x0220\nWM_MDIDESTROY             = 0x0221\nWM_MDIACTIVATE            = 0x0222\nWM_MDIRESTORE             = 0x0223\nWM_MDINEXT                = 0x0224\nWM_MDIMAXIMIZE            = 0x0225\nWM_MDITILE                = 0x0226\nWM_MDICASCADE             = 0x0227\nWM_MDIICONARRANGE         = 0x0228\nWM_MDIGETACTIVE           = 0x0229\nWM_MDISETMENU             = 0x0230\nWM_ENTERSIZEMOVE          = 0x0231\nWM_EXITSIZEMOVE           = 0x0232\nWM_DROPFILES              = 0x0233\nWM_MDIREFRESHMENU         = 0x0234\nWM_IME_SETCONTEXT         = 0x0281\nWM_IME_NOTIFY             = 0x0282\nWM_IME_CONTROL            = 0x0283\nWM_IME_COMPOSITIONFULL    = 0x0284\nWM_IME_SELECT             = 0x0285\nWM_IME_CHAR               = 0x0286\nWM_IME_REQUEST            = 0x0288\nWM_IME_KEYDOWN            = 0x0290\nWM_IME_KEYUP              = 0x0291\nWM_MOUSEHOVER             = 0x02A1\nWM_MOUSELEAVE             = 0x02A3\nWM_CUT                    = 0x0300\nWM_COPY                   = 0x0301\nWM_PASTE                  = 0x0302\nWM_CLEAR                  = 0x0303\nWM_UNDO                   = 0x0304\nWM_RENDERFORMAT           = 0x0305\nWM_RENDERALLFORMATS       = 0x0306\nWM_DESTROYCLIPBOARD       = 0x0307\nWM_DRAWCLIPBOARD          = 0x0308\nWM_PAINTCLIPBOARD         = 0x0309\nWM_VSCROLLCLIPBOARD       = 0x030A\nWM_SIZECLIPBOARD          = 0x030B\nWM_ASKCBFORMATNAME        = 0x030C\nWM_CHANGECBCHAIN          = 0x030D\nWM_HSCROLLCLIPBOARD       = 0x030E\nWM_QUERYNEWPALETTE        = 0x030F\nWM_PALETTEISCHANGING      = 0x0310\nWM_PALETTECHANGED         = 0x0311\nWM_HOTKEY                 = 0x0312\nWM_PRINT                  = 0x0317\nWM_PRINTCLIENT            = 0x0318\nWM_HANDHELDFIRST          = 0x0358\nWM_HANDHELDLAST           = 0x035F\nWM_AFXFIRST               = 0x0360\nWM_AFXLAST                = 0x037F\nWM_PENWINFIRST            = 0x0380\nWM_PENWINLAST             = 0x038F\nWM_APP                    = 0x8000\nWM_USER                   = 0x0400\nWM_REFLECT                = WM_USER + 0x1c00\n\nclass WNDCLASSEX(ctypes.Structure):\n    def __init__(self, *args, **kwargs):\n        super(WNDCLASSEX, self).__init__(*args, **kwargs)\n        self.cbSize = ctypes.sizeof(self)\n    _fields_ = [(\"cbSize\", ctypes.c_uint),\n                (\"style\", ctypes.c_uint),\n                (\"lpfnWndProc\", WNDPROC),\n                (\"cbClsExtra\", ctypes.c_int),\n                (\"cbWndExtra\", ctypes.c_int),\n                (\"hInstance\", ctypes.wintypes.HANDLE),\n                (\"hIcon\", ctypes.wintypes.HANDLE),\n                (\"hCursor\", ctypes.wintypes.HANDLE),\n                (\"hBrush\", ctypes.wintypes.HANDLE),\n                (\"lpszMenuName\", ctypes.wintypes.LPCWSTR),\n                (\"lpszClassName\", ctypes.wintypes.LPCWSTR),\n                (\"hIconSm\", ctypes.wintypes.HANDLE)]\n\nShowWindow = ctypes.windll.user32.ShowWindow\nShowWindow.argtypes = [ctypes.wintypes.HWND, ctypes.c_int]\n\ndef GenerateDummyWindow(callback, uid):\n    newclass = WNDCLASSEX()\n    newclass.lpfnWndProc = callback\n    newclass.lpszClassName = uid.replace(\"-\", \"\")\n    ATOM = ctypes.windll.user32.RegisterClassExW(ctypes.byref(newclass))\n    hwnd = ctypes.windll.user32.CreateWindowExW(0, newclass.lpszClassName, None, WS_POPUP, 0, 0, 0, 0, 0, 0, 0, 0)\n    return hwnd\n\n\n\nTIMERCALLBACK = ctypes.WINFUNCTYPE(None,\n                                   ctypes.wintypes.HWND,\n                                   ctypes.wintypes.UINT,\n                                   ctypes.POINTER(ctypes.wintypes.UINT),\n                                   ctypes.wintypes.DWORD)\n\nSetTimer = ctypes.windll.user32.SetTimer\nSetTimer.restype = ctypes.POINTER(ctypes.wintypes.UINT)\nSetTimer.argtypes = [ctypes.wintypes.HWND,\n                     ctypes.POINTER(ctypes.wintypes.UINT),\n                     ctypes.wintypes.UINT,\n                     TIMERCALLBACK]\n\nKillTimer = ctypes.windll.user32.KillTimer\nKillTimer.restype = ctypes.wintypes.BOOL\nKillTimer.argtypes = [ctypes.wintypes.HWND,\n                      ctypes.POINTER(ctypes.wintypes.UINT)]\n\nclass MSG(ctypes.Structure):\n    _fields_ = [ ('HWND', ctypes.wintypes.HWND),\n                 ('message', ctypes.wintypes.UINT),\n                 ('wParam', ctypes.wintypes.WPARAM),\n                 ('lParam', ctypes.wintypes.LPARAM),\n                 ('time', ctypes.wintypes.DWORD),\n                 ('pt', POINT)]\n\nGetMessage = ctypes.windll.user32.GetMessageW\nGetMessage.restype = ctypes.wintypes.BOOL\nGetMessage.argtypes = [ctypes.POINTER(MSG), ctypes.wintypes.HWND, ctypes.wintypes.UINT, ctypes.wintypes.UINT]\n\nTranslateMessage = ctypes.windll.user32.TranslateMessage\nTranslateMessage.restype = ctypes.wintypes.ULONG\nTranslateMessage.argtypes = [ctypes.POINTER(MSG)]\n\nDispatchMessage = ctypes.windll.user32.DispatchMessageW\nDispatchMessage.restype = ctypes.wintypes.ULONG\nDispatchMessage.argtypes = [ctypes.POINTER(MSG)]\n\ndef LoadIcon(iconfilename, small=False):\n        return LoadImage(0,\n                         unicode(iconfilename),\n                         IMAGE_ICON,\n                         16 if small else 0,\n                         16 if small else 0,\n                         LR_LOADFROMFILE)\n\n\nclass NotificationIcon(object):\n    def __init__(self, iconfilename, tooltip=None):\n        assert os.path.isfile(unicode(iconfilename)), \"{} doesn't exist\".format(iconfilename)\n        self._iconfile = unicode(iconfilename)\n        self._hicon = LoadIcon(self._iconfile, True)\n        assert self._hicon, \"Failed to load {}\".format(iconfilename)\n        ()\n        self._die = False\n        self._timerid = None\n        self._uid = uuid.uuid4()\n        self._tooltip = unicode(tooltip) if tooltip else u''\n        #self._thread = threading.Thread(target=self._run)\n        ()\n        self._info_bubble = None\n        self.items = []\n\n\n    def _bubble(self, iconinfo):\n        if self._info_bubble:\n            info_bubble = self._info_bubble\n            self._info_bubble = None\n            message = unicode(self._info_bubble)\n            iconinfo.uFlags |= NIF_INFO\n            iconinfo.szInfo = message\n            iconinfo.szInfoTitle = message\n            iconinfo.dwInfoFlags = NIIF_INFO\n            iconinfo.union.uTimeout = 10000\n            Shell_NotifyIcon(NIM_MODIFY, ctypes.pointer(iconinfo))\n\n\n    def _run(self):\n        self.WM_TASKBARCREATED = ctypes.windll.user32.RegisterWindowMessageW(u'TaskbarCreated')\n\n        self._windowproc = WNDPROC(self._callback)\n        self._hwnd = GenerateDummyWindow(self._windowproc, str(self._uid))\n\n        iconinfo = NOTIFYICONDATA()\n        iconinfo.hWnd = self._hwnd\n        iconinfo.uID = 100\n        iconinfo.uFlags = NIF_ICON | NIF_SHOWTIP | NIF_MESSAGE | (NIF_TIP if self._tooltip else 0)\n        iconinfo.uCallbackMessage = WM_MENUCOMMAND\n        iconinfo.hIcon = self._hicon\n        iconinfo.szTip = self._tooltip\n\n        Shell_NotifyIcon(NIM_ADD, ctypes.pointer(iconinfo))\n\n        self.iconinfo = iconinfo\n\n        PostMessage(self._hwnd, WM_NULL, 0, 0)\n\n        message = MSG()\n        last_time = -1\n        ret = None\n        while not self._die:\n            try:\n                ret = GetMessage(ctypes.pointer(message), 0, 0, 0)\n                TranslateMessage(ctypes.pointer(message))\n                DispatchMessage(ctypes.pointer(message))\n            except Exception, err:\n                \n                message = MSG()\n            time.sleep(0.125)\n        print \"Icon thread stopped, removing icon...\"\n\n        Shell_NotifyIcon(NIM_DELETE, ctypes.cast(ctypes.pointer(iconinfo), ctypes.POINTER(NOTIFYICONDATA)))\n        ctypes.windll.user32.DestroyWindow(self._hwnd)\n        ctypes.windll.user32.DestroyIcon(self._hicon)\n\n\n    def _menu(self):\n        if not hasattr(self, 'items'):\n            return\n\n        menu = CreatePopupMenu()\n        func = None\n\n        try:\n            iidx = 1000\n            defaultitem = -1\n            item_map = {}\n            for fs in self.items:\n                iidx += 1\n                if isinstance(fs, basestring):\n                    if fs and not fs.strip('-_='):\n                        AppendMenu(menu, MF_SEPARATOR, iidx, fs)\n                    else:\n                        AppendMenu(menu, MF_STRING | MF_GRAYED, iidx, fs)\n                elif isinstance(fs, tuple):\n                    if callable(fs[0]):\n                        itemstring = fs[0]()\n                    else:\n                        itemstring = unicode(fs[0])\n                    flags = MF_STRING\n                    if itemstring.startswith(\"!\"):\n                        itemstring = itemstring[1:]\n                        defaultitem = iidx\n                    if itemstring.startswith(\"+\"):\n                        itemstring = itemstring[1:]\n                        flags = flags | MF_CHECKED\n                    itemcallable = fs[1]\n                    item_map[iidx] = itemcallable\n                    if itemcallable is False:\n                        flags = flags | MF_DISABLED\n                    elif not callable(itemcallable):\n                        flags = flags | MF_GRAYED\n                    AppendMenu(menu, flags, iidx, itemstring)\n\n            if defaultitem != -1:\n                SetMenuDefaultItem(menu, defaultitem, 0)\n\n            pos = POINT()\n            GetCursorPos(ctypes.pointer(pos))\n\n            PostMessage(self._hwnd, WM_NULL, 0, 0)\n\n            SetForegroundWindow(self._hwnd)\n\n            ti = TrackPopupMenu(menu, TPM_RIGHTBUTTON | TPM_RETURNCMD | TPM_NONOTIFY, pos.x, pos.y, 0, self._hwnd, None)\n\n            if ti in item_map:\n                func = item_map[ti]\n\n            PostMessage(self._hwnd, WM_NULL, 0, 0)\n        finally:\n            DestroyMenu(menu)\n        if func: func()\n\n\n    def clicked(self):\n        self._menu()\n\n\n\n    def _callback(self, hWnd, msg, wParam, lParam):\n        \n        if msg == WM_TIMER:\n            if not any(thread.getName() == 'MainThread' and thread.isAlive()\n                       for thread in threading.enumerate()):\n                self._die = True\n        elif msg == WM_MENUCOMMAND and lParam == WM_LBUTTONUP:\n            self.clicked()\n        elif msg == WM_MENUCOMMAND and lParam == WM_RBUTTONUP:\n            self._menu()\n        elif msg == self.WM_TASKBARCREATED: \n            Shell_NotifyIcon(NIM_ADD, ctypes.pointer(self.iconinfo))\n        else:\n            return DefWindowProc(hWnd, msg, wParam, lParam)\n        return 1\n\n\n    def die(self):\n        self._die = True\n        PostMessage(self._hwnd, WM_NULL, 0, 0)\n        time.sleep(0.2)\n        try:\n            Shell_NotifyIcon(NIM_DELETE, self.iconinfo)\n        except Exception, err:\n            print \"Icon remove error\", err\n        ctypes.windll.user32.DestroyWindow(self._hwnd)\n        ctypes.windll.user32.DestroyIcon(self._hicon)\n\n\n    def pump(self):\n        try:\n            while not self._pumpqueue.empty():\n                callable = self._pumpqueue.get(False)\n                callable()\n        except queue_Empty:\n            pass\n\n\n    def announce(self, text):\n        self._info_bubble = text\n\n\ndef hideConsole():\n    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)\n\ndef showConsole():\n    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 1)\n\ndef hasConsole():\n    return ctypes.windll.kernel32.GetConsoleWindow() != 0\n\nif __name__ == \"__main__\":\n    import time\n\n    def greet():\n        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)\n        print \"Hello\"\n\n    def quit():\n        ni._die = True\n\n    def announce():\n        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 1)\n        ni.announce(\"Hello there\")\n\n    def clicked():\n        ni.announce(\"Hello\")\n\n    def dynamicTitle():\n        return \"!The time is: %s\" % time.time()\n\n    ni = NotificationIcon(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../trayicon.ico'), \"ZeroNet 0.2.9\")\n    ni.items = [\n        (dynamicTitle, False),\n        ('Hello', greet),\n        ('Title', False),\n        ('!Default', greet),\n        ('+Popup bubble', announce),\n        'Nothing',\n        '--',\n        ('Quit', quit)\n    ]\n    ni.clicked = clicked\n    import atexit\n\n    @atexit.register\n    def goodbye():\n        print \"You are now leaving the Python sector.\"\n\n    ni._run()\n", "comments": "  pure ctypes windows taskbar notification icon    via https   gist github com jasonbot 5759510    modified zeronet    python 3    python 2    create popup menu    create notification icon    load icon image    createwindow call    message loop calls   self  pumpqueue   queue queue()   self  thread   threading thread(target self  run)   self  thread start()    print  notificationicon error   err  message    check main thread still alive    explorer restarted  add icon  ", "content": "# Pure ctypes windows taskbar notification icon\n# via https://gist.github.com/jasonbot/5759510\n# Modified for ZeroNet\n\nimport ctypes\nimport ctypes.wintypes\nimport os\nimport uuid\nimport time\nimport gevent\nimport threading\ntry:\n    from queue import Empty as queue_Empty  # Python 3\nexcept ImportError:\n    from Queue import Empty as queue_Empty  # Python 2\n\n__all__ = ['NotificationIcon']\n\n# Create popup menu\n\nCreatePopupMenu = ctypes.windll.user32.CreatePopupMenu\nCreatePopupMenu.restype = ctypes.wintypes.HMENU\nCreatePopupMenu.argtypes = []\n\nMF_BYCOMMAND    = 0x0\nMF_BYPOSITION   = 0x400\n\nMF_BITMAP       = 0x4\nMF_CHECKED      = 0x8\nMF_DISABLED     = 0x2\nMF_ENABLED      = 0x0\nMF_GRAYED       = 0x1\nMF_MENUBARBREAK = 0x20\nMF_MENUBREAK    = 0x40\nMF_OWNERDRAW    = 0x100\nMF_POPUP        = 0x10\nMF_SEPARATOR    = 0x800\nMF_STRING       = 0x0\nMF_UNCHECKED    = 0x0\n\nInsertMenu = ctypes.windll.user32.InsertMenuW\nInsertMenu.restype = ctypes.wintypes.BOOL\nInsertMenu.argtypes = [ctypes.wintypes.HMENU, ctypes.wintypes.UINT, ctypes.wintypes.UINT, ctypes.wintypes.UINT, ctypes.wintypes.LPCWSTR]\n\nAppendMenu = ctypes.windll.user32.AppendMenuW\nAppendMenu.restype = ctypes.wintypes.BOOL\nAppendMenu.argtypes = [ctypes.wintypes.HMENU, ctypes.wintypes.UINT, ctypes.wintypes.UINT, ctypes.wintypes.LPCWSTR]\n\nSetMenuDefaultItem = ctypes.windll.user32.SetMenuDefaultItem\nSetMenuDefaultItem.restype = ctypes.wintypes.BOOL\nSetMenuDefaultItem.argtypes = [ctypes.wintypes.HMENU, ctypes.wintypes.UINT, ctypes.wintypes.UINT]\n\nclass POINT(ctypes.Structure):\n    _fields_ = [ ('x', ctypes.wintypes.LONG),\n                 ('y', ctypes.wintypes.LONG)]\n\nGetCursorPos = ctypes.windll.user32.GetCursorPos\nGetCursorPos.argtypes = [ctypes.POINTER(POINT)]\n\nSetForegroundWindow = ctypes.windll.user32.SetForegroundWindow\nSetForegroundWindow.argtypes = [ctypes.wintypes.HWND]\n\nTPM_LEFTALIGN       = 0x0\nTPM_CENTERALIGN     = 0x4\nTPM_RIGHTALIGN      = 0x8\n\nTPM_TOPALIGN        = 0x0\nTPM_VCENTERALIGN    = 0x10\nTPM_BOTTOMALIGN     = 0x20\n\nTPM_NONOTIFY        = 0x80\nTPM_RETURNCMD       = 0x100\n\nTPM_LEFTBUTTON      = 0x0\nTPM_RIGHTBUTTON     = 0x2\n\nTPM_HORNEGANIMATION = 0x800\nTPM_HORPOSANIMATION = 0x400\nTPM_NOANIMATION     = 0x4000\nTPM_VERNEGANIMATION = 0x2000\nTPM_VERPOSANIMATION = 0x1000\n\nTrackPopupMenu = ctypes.windll.user32.TrackPopupMenu\nTrackPopupMenu.restype = ctypes.wintypes.BOOL\nTrackPopupMenu.argtypes = [ctypes.wintypes.HMENU, ctypes.wintypes.UINT, ctypes.c_int, ctypes.c_int, ctypes.c_int, ctypes.wintypes.HWND, ctypes.c_void_p]\n\nPostMessage = ctypes.windll.user32.PostMessageW\nPostMessage.restype = ctypes.wintypes.BOOL\nPostMessage.argtypes = [ctypes.wintypes.HWND, ctypes.wintypes.UINT, ctypes.wintypes.WPARAM, ctypes.wintypes.LPARAM]\n\nDestroyMenu = ctypes.windll.user32.DestroyMenu\nDestroyMenu.restype = ctypes.wintypes.BOOL\nDestroyMenu.argtypes = [ctypes.wintypes.HMENU]\n\n# Create notification icon\n\nGUID = ctypes.c_ubyte * 16\n\nclass TimeoutVersionUnion(ctypes.Union):\n    _fields_ = [('uTimeout', ctypes.wintypes.UINT),\n                ('uVersion', ctypes.wintypes.UINT),]\n\nNIS_HIDDEN     = 0x1\nNIS_SHAREDICON = 0x2\n\nclass NOTIFYICONDATA(ctypes.Structure):\n    def __init__(self, *args, **kwargs):\n        super(NOTIFYICONDATA, self).__init__(*args, **kwargs)\n        self.cbSize = ctypes.sizeof(self)\n    _fields_ = [\n        ('cbSize', ctypes.wintypes.DWORD),\n        ('hWnd', ctypes.wintypes.HWND),\n        ('uID', ctypes.wintypes.UINT),\n        ('uFlags', ctypes.wintypes.UINT),\n        ('uCallbackMessage', ctypes.wintypes.UINT),\n        ('hIcon', ctypes.wintypes.HICON),\n        ('szTip', ctypes.wintypes.WCHAR * 64),\n        ('dwState', ctypes.wintypes.DWORD),\n        ('dwStateMask', ctypes.wintypes.DWORD),\n        ('szInfo', ctypes.wintypes.WCHAR * 256),\n        ('union', TimeoutVersionUnion),\n        ('szInfoTitle', ctypes.wintypes.WCHAR * 64),\n        ('dwInfoFlags', ctypes.wintypes.DWORD),\n        ('guidItem', GUID),\n        ('hBalloonIcon', ctypes.wintypes.HICON),\n    ]\n\nNIM_ADD = 0\nNIM_MODIFY = 1\nNIM_DELETE = 2\nNIM_SETFOCUS = 3\nNIM_SETVERSION = 4\n\nNIF_MESSAGE = 1\nNIF_ICON = 2\nNIF_TIP = 4\nNIF_STATE = 8\nNIF_INFO = 16\nNIF_GUID = 32\nNIF_REALTIME = 64\nNIF_SHOWTIP = 128\n\nNIIF_NONE = 0\nNIIF_INFO = 1\nNIIF_WARNING = 2\nNIIF_ERROR = 3\nNIIF_USER = 4\n\nNOTIFYICON_VERSION = 3\nNOTIFYICON_VERSION_4 = 4\n\nShell_NotifyIcon = ctypes.windll.shell32.Shell_NotifyIconW\nShell_NotifyIcon.restype = ctypes.wintypes.BOOL\nShell_NotifyIcon.argtypes = [ctypes.wintypes.DWORD, ctypes.POINTER(NOTIFYICONDATA)]\n\n# Load icon/image\n\nIMAGE_BITMAP = 0\nIMAGE_ICON = 1\nIMAGE_CURSOR = 2\n\nLR_CREATEDIBSECTION = 0x00002000\nLR_DEFAULTCOLOR     = 0x00000000\nLR_DEFAULTSIZE      = 0x00000040\nLR_LOADFROMFILE     = 0x00000010\nLR_LOADMAP3DCOLORS  = 0x00001000\nLR_LOADTRANSPARENT  = 0x00000020\nLR_MONOCHROME       = 0x00000001\nLR_SHARED           = 0x00008000\nLR_VGACOLOR         = 0x00000080\n\nOIC_SAMPLE      = 32512\nOIC_HAND        = 32513\nOIC_QUES        = 32514\nOIC_BANG        = 32515\nOIC_NOTE        = 32516\nOIC_WINLOGO     = 32517\nOIC_WARNING     = OIC_BANG\nOIC_ERROR       = OIC_HAND\nOIC_INFORMATION = OIC_NOTE\n\nLoadImage = ctypes.windll.user32.LoadImageW\nLoadImage.restype = ctypes.wintypes.HANDLE\nLoadImage.argtypes = [ctypes.wintypes.HINSTANCE, ctypes.wintypes.LPCWSTR, ctypes.wintypes.UINT, ctypes.c_int, ctypes.c_int, ctypes.wintypes.UINT]\n\n# CreateWindow call\n\nWNDPROC = ctypes.WINFUNCTYPE(ctypes.c_int, ctypes.wintypes.HWND, ctypes.c_uint, ctypes.wintypes.WPARAM, ctypes.wintypes.LPARAM)\nDefWindowProc = ctypes.windll.user32.DefWindowProcW\nDefWindowProc.restype = ctypes.c_int\nDefWindowProc.argtypes = [ctypes.wintypes.HWND, ctypes.c_uint, ctypes.wintypes.WPARAM, ctypes.wintypes.LPARAM]\n\nWS_OVERLAPPED       = 0x00000000L\nWS_POPUP            = 0x80000000L\nWS_CHILD            = 0x40000000L\nWS_MINIMIZE         = 0x20000000L\nWS_VISIBLE          = 0x10000000L\nWS_DISABLED         = 0x08000000L\nWS_CLIPSIBLINGS     = 0x04000000L\nWS_CLIPCHILDREN     = 0x02000000L\nWS_MAXIMIZE         = 0x01000000L\nWS_CAPTION          = 0x00C00000L\nWS_BORDER           = 0x00800000L\nWS_DLGFRAME         = 0x00400000L\nWS_VSCROLL          = 0x00200000L\nWS_HSCROLL          = 0x00100000L\nWS_SYSMENU          = 0x00080000L\nWS_THICKFRAME       = 0x00040000L\nWS_GROUP            = 0x00020000L\nWS_TABSTOP          = 0x00010000L\n\nWS_MINIMIZEBOX      = 0x00020000L\nWS_MAXIMIZEBOX      = 0x00010000L\n\nWS_OVERLAPPEDWINDOW = (WS_OVERLAPPED     |\n                       WS_CAPTION        |\n                       WS_SYSMENU        |\n                       WS_THICKFRAME     |\n                       WS_MINIMIZEBOX    |\n                       WS_MAXIMIZEBOX)\n\nSM_XVIRTUALSCREEN      = 76\nSM_YVIRTUALSCREEN      = 77\nSM_CXVIRTUALSCREEN     = 78\nSM_CYVIRTUALSCREEN     = 79\nSM_CMONITORS           = 80\nSM_SAMEDISPLAYFORMAT   = 81\n\nWM_NULL                   = 0x0000\nWM_CREATE                 = 0x0001\nWM_DESTROY                = 0x0002\nWM_MOVE                   = 0x0003\nWM_SIZE                   = 0x0005\nWM_ACTIVATE               = 0x0006\nWM_SETFOCUS               = 0x0007\nWM_KILLFOCUS              = 0x0008\nWM_ENABLE                 = 0x000A\nWM_SETREDRAW              = 0x000B\nWM_SETTEXT                = 0x000C\nWM_GETTEXT                = 0x000D\nWM_GETTEXTLENGTH          = 0x000E\nWM_PAINT                  = 0x000F\nWM_CLOSE                  = 0x0010\nWM_QUERYENDSESSION        = 0x0011\nWM_QUIT                   = 0x0012\nWM_QUERYOPEN              = 0x0013\nWM_ERASEBKGND             = 0x0014\nWM_SYSCOLORCHANGE         = 0x0015\nWM_ENDSESSION             = 0x0016\nWM_SHOWWINDOW             = 0x0018\nWM_CTLCOLOR               = 0x0019\nWM_WININICHANGE           = 0x001A\nWM_SETTINGCHANGE          = 0x001A\nWM_DEVMODECHANGE          = 0x001B\nWM_ACTIVATEAPP            = 0x001C\nWM_FONTCHANGE             = 0x001D\nWM_TIMECHANGE             = 0x001E\nWM_CANCELMODE             = 0x001F\nWM_SETCURSOR              = 0x0020\nWM_MOUSEACTIVATE          = 0x0021\nWM_CHILDACTIVATE          = 0x0022\nWM_QUEUESYNC              = 0x0023\nWM_GETMINMAXINFO          = 0x0024\nWM_PAINTICON              = 0x0026\nWM_ICONERASEBKGND         = 0x0027\nWM_NEXTDLGCTL             = 0x0028\nWM_SPOOLERSTATUS          = 0x002A\nWM_DRAWITEM               = 0x002B\nWM_MEASUREITEM            = 0x002C\nWM_DELETEITEM             = 0x002D\nWM_VKEYTOITEM             = 0x002E\nWM_CHARTOITEM             = 0x002F\nWM_SETFONT                = 0x0030\nWM_GETFONT                = 0x0031\nWM_SETHOTKEY              = 0x0032\nWM_GETHOTKEY              = 0x0033\nWM_QUERYDRAGICON          = 0x0037\nWM_COMPAREITEM            = 0x0039\nWM_GETOBJECT              = 0x003D\nWM_COMPACTING             = 0x0041\nWM_COMMNOTIFY             = 0x0044\nWM_WINDOWPOSCHANGING      = 0x0046\nWM_WINDOWPOSCHANGED       = 0x0047\nWM_POWER                  = 0x0048\nWM_COPYDATA               = 0x004A\nWM_CANCELJOURNAL          = 0x004B\nWM_NOTIFY                 = 0x004E\nWM_INPUTLANGCHANGEREQUEST = 0x0050\nWM_INPUTLANGCHANGE        = 0x0051\nWM_TCARD                  = 0x0052\nWM_HELP                   = 0x0053\nWM_USERCHANGED            = 0x0054\nWM_NOTIFYFORMAT           = 0x0055\nWM_CONTEXTMENU            = 0x007B\nWM_STYLECHANGING          = 0x007C\nWM_STYLECHANGED           = 0x007D\nWM_DISPLAYCHANGE          = 0x007E\nWM_GETICON                = 0x007F\nWM_SETICON                = 0x0080\nWM_NCCREATE               = 0x0081\nWM_NCDESTROY              = 0x0082\nWM_NCCALCSIZE             = 0x0083\nWM_NCHITTEST              = 0x0084\nWM_NCPAINT                = 0x0085\nWM_NCACTIVATE             = 0x0086\nWM_GETDLGCODE             = 0x0087\nWM_SYNCPAINT              = 0x0088\nWM_NCMOUSEMOVE            = 0x00A0\nWM_NCLBUTTONDOWN          = 0x00A1\nWM_NCLBUTTONUP            = 0x00A2\nWM_NCLBUTTONDBLCLK        = 0x00A3\nWM_NCRBUTTONDOWN          = 0x00A4\nWM_NCRBUTTONUP            = 0x00A5\nWM_NCRBUTTONDBLCLK        = 0x00A6\nWM_NCMBUTTONDOWN          = 0x00A7\nWM_NCMBUTTONUP            = 0x00A8\nWM_NCMBUTTONDBLCLK        = 0x00A9\nWM_KEYDOWN                = 0x0100\nWM_KEYUP                  = 0x0101\nWM_CHAR                   = 0x0102\nWM_DEADCHAR               = 0x0103\nWM_SYSKEYDOWN             = 0x0104\nWM_SYSKEYUP               = 0x0105\nWM_SYSCHAR                = 0x0106\nWM_SYSDEADCHAR            = 0x0107\nWM_KEYLAST                = 0x0108\nWM_IME_STARTCOMPOSITION   = 0x010D\nWM_IME_ENDCOMPOSITION     = 0x010E\nWM_IME_COMPOSITION        = 0x010F\nWM_IME_KEYLAST            = 0x010F\nWM_INITDIALOG             = 0x0110\nWM_COMMAND                = 0x0111\nWM_SYSCOMMAND             = 0x0112\nWM_TIMER                  = 0x0113\nWM_HSCROLL                = 0x0114\nWM_VSCROLL                = 0x0115\nWM_INITMENU               = 0x0116\nWM_INITMENUPOPUP          = 0x0117\nWM_MENUSELECT             = 0x011F\nWM_MENUCHAR               = 0x0120\nWM_ENTERIDLE              = 0x0121\nWM_MENURBUTTONUP          = 0x0122\nWM_MENUDRAG               = 0x0123\nWM_MENUGETOBJECT          = 0x0124\nWM_UNINITMENUPOPUP        = 0x0125\nWM_MENUCOMMAND            = 0x0126\nWM_CTLCOLORMSGBOX         = 0x0132\nWM_CTLCOLOREDIT           = 0x0133\nWM_CTLCOLORLISTBOX        = 0x0134\nWM_CTLCOLORBTN            = 0x0135\nWM_CTLCOLORDLG            = 0x0136\nWM_CTLCOLORSCROLLBAR      = 0x0137\nWM_CTLCOLORSTATIC         = 0x0138\nWM_MOUSEMOVE              = 0x0200\nWM_LBUTTONDOWN            = 0x0201\nWM_LBUTTONUP              = 0x0202\nWM_LBUTTONDBLCLK          = 0x0203\nWM_RBUTTONDOWN            = 0x0204\nWM_RBUTTONUP              = 0x0205\nWM_RBUTTONDBLCLK          = 0x0206\nWM_MBUTTONDOWN            = 0x0207\nWM_MBUTTONUP              = 0x0208\nWM_MBUTTONDBLCLK          = 0x0209\nWM_MOUSEWHEEL             = 0x020A\nWM_PARENTNOTIFY           = 0x0210\nWM_ENTERMENULOOP          = 0x0211\nWM_EXITMENULOOP           = 0x0212\nWM_NEXTMENU               = 0x0213\nWM_SIZING                 = 0x0214\nWM_CAPTURECHANGED         = 0x0215\nWM_MOVING                 = 0x0216\nWM_DEVICECHANGE           = 0x0219\nWM_MDICREATE              = 0x0220\nWM_MDIDESTROY             = 0x0221\nWM_MDIACTIVATE            = 0x0222\nWM_MDIRESTORE             = 0x0223\nWM_MDINEXT                = 0x0224\nWM_MDIMAXIMIZE            = 0x0225\nWM_MDITILE                = 0x0226\nWM_MDICASCADE             = 0x0227\nWM_MDIICONARRANGE         = 0x0228\nWM_MDIGETACTIVE           = 0x0229\nWM_MDISETMENU             = 0x0230\nWM_ENTERSIZEMOVE          = 0x0231\nWM_EXITSIZEMOVE           = 0x0232\nWM_DROPFILES              = 0x0233\nWM_MDIREFRESHMENU         = 0x0234\nWM_IME_SETCONTEXT         = 0x0281\nWM_IME_NOTIFY             = 0x0282\nWM_IME_CONTROL            = 0x0283\nWM_IME_COMPOSITIONFULL    = 0x0284\nWM_IME_SELECT             = 0x0285\nWM_IME_CHAR               = 0x0286\nWM_IME_REQUEST            = 0x0288\nWM_IME_KEYDOWN            = 0x0290\nWM_IME_KEYUP              = 0x0291\nWM_MOUSEHOVER             = 0x02A1\nWM_MOUSELEAVE             = 0x02A3\nWM_CUT                    = 0x0300\nWM_COPY                   = 0x0301\nWM_PASTE                  = 0x0302\nWM_CLEAR                  = 0x0303\nWM_UNDO                   = 0x0304\nWM_RENDERFORMAT           = 0x0305\nWM_RENDERALLFORMATS       = 0x0306\nWM_DESTROYCLIPBOARD       = 0x0307\nWM_DRAWCLIPBOARD          = 0x0308\nWM_PAINTCLIPBOARD         = 0x0309\nWM_VSCROLLCLIPBOARD       = 0x030A\nWM_SIZECLIPBOARD          = 0x030B\nWM_ASKCBFORMATNAME        = 0x030C\nWM_CHANGECBCHAIN          = 0x030D\nWM_HSCROLLCLIPBOARD       = 0x030E\nWM_QUERYNEWPALETTE        = 0x030F\nWM_PALETTEISCHANGING      = 0x0310\nWM_PALETTECHANGED         = 0x0311\nWM_HOTKEY                 = 0x0312\nWM_PRINT                  = 0x0317\nWM_PRINTCLIENT            = 0x0318\nWM_HANDHELDFIRST          = 0x0358\nWM_HANDHELDLAST           = 0x035F\nWM_AFXFIRST               = 0x0360\nWM_AFXLAST                = 0x037F\nWM_PENWINFIRST            = 0x0380\nWM_PENWINLAST             = 0x038F\nWM_APP                    = 0x8000\nWM_USER                   = 0x0400\nWM_REFLECT                = WM_USER + 0x1c00\n\nclass WNDCLASSEX(ctypes.Structure):\n    def __init__(self, *args, **kwargs):\n        super(WNDCLASSEX, self).__init__(*args, **kwargs)\n        self.cbSize = ctypes.sizeof(self)\n    _fields_ = [(\"cbSize\", ctypes.c_uint),\n                (\"style\", ctypes.c_uint),\n                (\"lpfnWndProc\", WNDPROC),\n                (\"cbClsExtra\", ctypes.c_int),\n                (\"cbWndExtra\", ctypes.c_int),\n                (\"hInstance\", ctypes.wintypes.HANDLE),\n                (\"hIcon\", ctypes.wintypes.HANDLE),\n                (\"hCursor\", ctypes.wintypes.HANDLE),\n                (\"hBrush\", ctypes.wintypes.HANDLE),\n                (\"lpszMenuName\", ctypes.wintypes.LPCWSTR),\n                (\"lpszClassName\", ctypes.wintypes.LPCWSTR),\n                (\"hIconSm\", ctypes.wintypes.HANDLE)]\n\nShowWindow = ctypes.windll.user32.ShowWindow\nShowWindow.argtypes = [ctypes.wintypes.HWND, ctypes.c_int]\n\ndef GenerateDummyWindow(callback, uid):\n    newclass = WNDCLASSEX()\n    newclass.lpfnWndProc = callback\n    newclass.lpszClassName = uid.replace(\"-\", \"\")\n    ATOM = ctypes.windll.user32.RegisterClassExW(ctypes.byref(newclass))\n    hwnd = ctypes.windll.user32.CreateWindowExW(0, newclass.lpszClassName, None, WS_POPUP, 0, 0, 0, 0, 0, 0, 0, 0)\n    return hwnd\n\n# Message loop calls\n\nTIMERCALLBACK = ctypes.WINFUNCTYPE(None,\n                                   ctypes.wintypes.HWND,\n                                   ctypes.wintypes.UINT,\n                                   ctypes.POINTER(ctypes.wintypes.UINT),\n                                   ctypes.wintypes.DWORD)\n\nSetTimer = ctypes.windll.user32.SetTimer\nSetTimer.restype = ctypes.POINTER(ctypes.wintypes.UINT)\nSetTimer.argtypes = [ctypes.wintypes.HWND,\n                     ctypes.POINTER(ctypes.wintypes.UINT),\n                     ctypes.wintypes.UINT,\n                     TIMERCALLBACK]\n\nKillTimer = ctypes.windll.user32.KillTimer\nKillTimer.restype = ctypes.wintypes.BOOL\nKillTimer.argtypes = [ctypes.wintypes.HWND,\n                      ctypes.POINTER(ctypes.wintypes.UINT)]\n\nclass MSG(ctypes.Structure):\n    _fields_ = [ ('HWND', ctypes.wintypes.HWND),\n                 ('message', ctypes.wintypes.UINT),\n                 ('wParam', ctypes.wintypes.WPARAM),\n                 ('lParam', ctypes.wintypes.LPARAM),\n                 ('time', ctypes.wintypes.DWORD),\n                 ('pt', POINT)]\n\nGetMessage = ctypes.windll.user32.GetMessageW\nGetMessage.restype = ctypes.wintypes.BOOL\nGetMessage.argtypes = [ctypes.POINTER(MSG), ctypes.wintypes.HWND, ctypes.wintypes.UINT, ctypes.wintypes.UINT]\n\nTranslateMessage = ctypes.windll.user32.TranslateMessage\nTranslateMessage.restype = ctypes.wintypes.ULONG\nTranslateMessage.argtypes = [ctypes.POINTER(MSG)]\n\nDispatchMessage = ctypes.windll.user32.DispatchMessageW\nDispatchMessage.restype = ctypes.wintypes.ULONG\nDispatchMessage.argtypes = [ctypes.POINTER(MSG)]\n\ndef LoadIcon(iconfilename, small=False):\n        return LoadImage(0,\n                         unicode(iconfilename),\n                         IMAGE_ICON,\n                         16 if small else 0,\n                         16 if small else 0,\n                         LR_LOADFROMFILE)\n\n\nclass NotificationIcon(object):\n    def __init__(self, iconfilename, tooltip=None):\n        assert os.path.isfile(unicode(iconfilename)), \"{} doesn't exist\".format(iconfilename)\n        self._iconfile = unicode(iconfilename)\n        self._hicon = LoadIcon(self._iconfile, True)\n        assert self._hicon, \"Failed to load {}\".format(iconfilename)\n        #self._pumpqueue = Queue.Queue()\n        self._die = False\n        self._timerid = None\n        self._uid = uuid.uuid4()\n        self._tooltip = unicode(tooltip) if tooltip else u''\n        #self._thread = threading.Thread(target=self._run)\n        #self._thread.start()\n        self._info_bubble = None\n        self.items = []\n\n\n    def _bubble(self, iconinfo):\n        if self._info_bubble:\n            info_bubble = self._info_bubble\n            self._info_bubble = None\n            message = unicode(self._info_bubble)\n            iconinfo.uFlags |= NIF_INFO\n            iconinfo.szInfo = message\n            iconinfo.szInfoTitle = message\n            iconinfo.dwInfoFlags = NIIF_INFO\n            iconinfo.union.uTimeout = 10000\n            Shell_NotifyIcon(NIM_MODIFY, ctypes.pointer(iconinfo))\n\n\n    def _run(self):\n        self.WM_TASKBARCREATED = ctypes.windll.user32.RegisterWindowMessageW(u'TaskbarCreated')\n\n        self._windowproc = WNDPROC(self._callback)\n        self._hwnd = GenerateDummyWindow(self._windowproc, str(self._uid))\n\n        iconinfo = NOTIFYICONDATA()\n        iconinfo.hWnd = self._hwnd\n        iconinfo.uID = 100\n        iconinfo.uFlags = NIF_ICON | NIF_SHOWTIP | NIF_MESSAGE | (NIF_TIP if self._tooltip else 0)\n        iconinfo.uCallbackMessage = WM_MENUCOMMAND\n        iconinfo.hIcon = self._hicon\n        iconinfo.szTip = self._tooltip\n\n        Shell_NotifyIcon(NIM_ADD, ctypes.pointer(iconinfo))\n\n        self.iconinfo = iconinfo\n\n        PostMessage(self._hwnd, WM_NULL, 0, 0)\n\n        message = MSG()\n        last_time = -1\n        ret = None\n        while not self._die:\n            try:\n                ret = GetMessage(ctypes.pointer(message), 0, 0, 0)\n                TranslateMessage(ctypes.pointer(message))\n                DispatchMessage(ctypes.pointer(message))\n            except Exception, err:\n                # print \"NotificationIcon error\", err, message\n                message = MSG()\n            time.sleep(0.125)\n        print \"Icon thread stopped, removing icon...\"\n\n        Shell_NotifyIcon(NIM_DELETE, ctypes.cast(ctypes.pointer(iconinfo), ctypes.POINTER(NOTIFYICONDATA)))\n        ctypes.windll.user32.DestroyWindow(self._hwnd)\n        ctypes.windll.user32.DestroyIcon(self._hicon)\n\n\n    def _menu(self):\n        if not hasattr(self, 'items'):\n            return\n\n        menu = CreatePopupMenu()\n        func = None\n\n        try:\n            iidx = 1000\n            defaultitem = -1\n            item_map = {}\n            for fs in self.items:\n                iidx += 1\n                if isinstance(fs, basestring):\n                    if fs and not fs.strip('-_='):\n                        AppendMenu(menu, MF_SEPARATOR, iidx, fs)\n                    else:\n                        AppendMenu(menu, MF_STRING | MF_GRAYED, iidx, fs)\n                elif isinstance(fs, tuple):\n                    if callable(fs[0]):\n                        itemstring = fs[0]()\n                    else:\n                        itemstring = unicode(fs[0])\n                    flags = MF_STRING\n                    if itemstring.startswith(\"!\"):\n                        itemstring = itemstring[1:]\n                        defaultitem = iidx\n                    if itemstring.startswith(\"+\"):\n                        itemstring = itemstring[1:]\n                        flags = flags | MF_CHECKED\n                    itemcallable = fs[1]\n                    item_map[iidx] = itemcallable\n                    if itemcallable is False:\n                        flags = flags | MF_DISABLED\n                    elif not callable(itemcallable):\n                        flags = flags | MF_GRAYED\n                    AppendMenu(menu, flags, iidx, itemstring)\n\n            if defaultitem != -1:\n                SetMenuDefaultItem(menu, defaultitem, 0)\n\n            pos = POINT()\n            GetCursorPos(ctypes.pointer(pos))\n\n            PostMessage(self._hwnd, WM_NULL, 0, 0)\n\n            SetForegroundWindow(self._hwnd)\n\n            ti = TrackPopupMenu(menu, TPM_RIGHTBUTTON | TPM_RETURNCMD | TPM_NONOTIFY, pos.x, pos.y, 0, self._hwnd, None)\n\n            if ti in item_map:\n                func = item_map[ti]\n\n            PostMessage(self._hwnd, WM_NULL, 0, 0)\n        finally:\n            DestroyMenu(menu)\n        if func: func()\n\n\n    def clicked(self):\n        self._menu()\n\n\n\n    def _callback(self, hWnd, msg, wParam, lParam):\n        # Check if the main thread is still alive\n        if msg == WM_TIMER:\n            if not any(thread.getName() == 'MainThread' and thread.isAlive()\n                       for thread in threading.enumerate()):\n                self._die = True\n        elif msg == WM_MENUCOMMAND and lParam == WM_LBUTTONUP:\n            self.clicked()\n        elif msg == WM_MENUCOMMAND and lParam == WM_RBUTTONUP:\n            self._menu()\n        elif msg == self.WM_TASKBARCREATED: # Explorer restarted, add the icon again.\n            Shell_NotifyIcon(NIM_ADD, ctypes.pointer(self.iconinfo))\n        else:\n            return DefWindowProc(hWnd, msg, wParam, lParam)\n        return 1\n\n\n    def die(self):\n        self._die = True\n        PostMessage(self._hwnd, WM_NULL, 0, 0)\n        time.sleep(0.2)\n        try:\n            Shell_NotifyIcon(NIM_DELETE, self.iconinfo)\n        except Exception, err:\n            print \"Icon remove error\", err\n        ctypes.windll.user32.DestroyWindow(self._hwnd)\n        ctypes.windll.user32.DestroyIcon(self._hicon)\n\n\n    def pump(self):\n        try:\n            while not self._pumpqueue.empty():\n                callable = self._pumpqueue.get(False)\n                callable()\n        except queue_Empty:\n            pass\n\n\n    def announce(self, text):\n        self._info_bubble = text\n\n\ndef hideConsole():\n    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)\n\ndef showConsole():\n    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 1)\n\ndef hasConsole():\n    return ctypes.windll.kernel32.GetConsoleWindow() != 0\n\nif __name__ == \"__main__\":\n    import time\n\n    def greet():\n        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)\n        print \"Hello\"\n\n    def quit():\n        ni._die = True\n\n    def announce():\n        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 1)\n        ni.announce(\"Hello there\")\n\n    def clicked():\n        ni.announce(\"Hello\")\n\n    def dynamicTitle():\n        return \"!The time is: %s\" % time.time()\n\n    ni = NotificationIcon(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../trayicon.ico'), \"ZeroNet 0.2.9\")\n    ni.items = [\n        (dynamicTitle, False),\n        ('Hello', greet),\n        ('Title', False),\n        ('!Default', greet),\n        ('+Popup bubble', announce),\n        'Nothing',\n        '--',\n        ('Quit', quit)\n    ]\n    ni.clicked = clicked\n    import atexit\n\n    @atexit.register\n    def goodbye():\n        print \"You are now leaving the Python sector.\"\n\n    ni._run()\n", "description": "ZeroNet - Decentralized websites using Bitcoin crypto and BitTorrent network", "file_name": "notificationicon.py", "id": "c71538f2c560a337eec566a26592c9c7", "language": "Python", "project_name": "ZeroNet", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/HelloZeroNet-ZeroNet/HelloZeroNet-ZeroNet-8828629/plugins/Trayicon/lib/notificationicon.py", "save_time": "", "source": "", "update_at": "2018-03-18T12:17:52Z", "url": "https://github.com/HelloZeroNet/ZeroNet", "wiki": true}