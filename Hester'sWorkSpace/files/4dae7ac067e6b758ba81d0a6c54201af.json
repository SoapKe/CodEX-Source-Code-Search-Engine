{"author": "mopidy", "code": "from __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nimport pykka\n\nfrom mopidy import core\nfrom mopidy.internal import deprecation\nfrom mopidy.mpd.dispatcher import MpdDispatcher\nfrom mopidy.mpd.exceptions import MpdAckError\n\nfrom tests import dummy_backend\n\n\nclass MpdDispatcherTest(unittest.TestCase):\n\n    def setUp(self):  \n        config = {\n            'mpd': {\n                'password': None,\n                'command_blacklist': ['disabled'],\n            }\n        }\n        self.backend = dummy_backend.create_proxy()\n        self.dispatcher = MpdDispatcher(config=config)\n\n        with deprecation.ignore():\n            self.core = core.Core.start(backends=[self.backend]).proxy()\n\n    def tearDown(self):  \n        pykka.ActorRegistry.stop_all()\n\n    def test_call_handler_for_unknown_command_raises_exception(self):\n        with self.assertRaises(MpdAckError) as cm:\n            self.dispatcher._call_handler('an_unknown_command with args')\n\n        self.assertEqual(\n            cm.exception.get_mpd_ack(),\n            'ACK [5@0] {} unknown command \"an_unknown_command\"')\n\n    def test_handling_unknown_request_yields_error(self):\n        result = self.dispatcher.handle_request('an unhandled request')\n        self.assertEqual(result[0], 'ACK [5@0] {} unknown command \"an\"')\n\n    def test_handling_blacklisted_command(self):\n        result = self.dispatcher.handle_request('disabled')\n        self.assertEqual(result[0], 'ACK [0@0] {disabled} \"disabled\" has been '\n                         'disabled in the server')\n", "comments": "  noqa  n802    noqa  n802 ", "content": "from __future__ import absolute_import, unicode_literals\n\nimport unittest\n\nimport pykka\n\nfrom mopidy import core\nfrom mopidy.internal import deprecation\nfrom mopidy.mpd.dispatcher import MpdDispatcher\nfrom mopidy.mpd.exceptions import MpdAckError\n\nfrom tests import dummy_backend\n\n\nclass MpdDispatcherTest(unittest.TestCase):\n\n    def setUp(self):  # noqa: N802\n        config = {\n            'mpd': {\n                'password': None,\n                'command_blacklist': ['disabled'],\n            }\n        }\n        self.backend = dummy_backend.create_proxy()\n        self.dispatcher = MpdDispatcher(config=config)\n\n        with deprecation.ignore():\n            self.core = core.Core.start(backends=[self.backend]).proxy()\n\n    def tearDown(self):  # noqa: N802\n        pykka.ActorRegistry.stop_all()\n\n    def test_call_handler_for_unknown_command_raises_exception(self):\n        with self.assertRaises(MpdAckError) as cm:\n            self.dispatcher._call_handler('an_unknown_command with args')\n\n        self.assertEqual(\n            cm.exception.get_mpd_ack(),\n            'ACK [5@0] {} unknown command \"an_unknown_command\"')\n\n    def test_handling_unknown_request_yields_error(self):\n        result = self.dispatcher.handle_request('an unhandled request')\n        self.assertEqual(result[0], 'ACK [5@0] {} unknown command \"an\"')\n\n    def test_handling_blacklisted_command(self):\n        result = self.dispatcher.handle_request('disabled')\n        self.assertEqual(result[0], 'ACK [0@0] {disabled} \"disabled\" has been '\n                         'disabled in the server')\n", "description": "Mopidy is an extensible music server that plays music from local disk, Spotify, SoundCloud, Google Play Music, and more. You edit the playlist from any phone, tablet, or computer using a range of MPD and web clients.", "file_name": "test_dispatcher.py", "id": "4dae7ac067e6b758ba81d0a6c54201af", "language": "Python", "project_name": "mopidy", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mopidy-mopidy/mopidy-mopidy-79d42c3/tests/mpd/test_dispatcher.py", "save_time": "", "source": "", "update_at": "2018-03-18T16:12:51Z", "url": "https://github.com/mopidy/mopidy", "wiki": false}