{"author": "mailpile", "code": "\n\nimport time\n\nfrom gettext import gettext\nfrom mailpile.plugins import PluginManager\n\n_ = lambda t: t\n\n\n##[ Pluggable commands and data views ]#######################################\n\nimport random\nfrom mailpile.config.defaults import APPVER\nfrom mailpile.commands import Command\nfrom mailpile.util import md5_hex, safe_assert\n\n\nTIMESTAMPS = None\n\n\ndef BrokenSpambayes(cfg, ctx):\n    if 'autotag_sb' not in cfg.sys.plugins:\n        return True\n    try:\n        import spambayes\n        return False\n    except:\n        return True\n\n\nclass hintsCommand(Command):\n    \n    SYNOPSIS_ARGS = '[now|reset]'\n    SPLIT_ARG = True\n    HTTP_CALLABLE = ('GET', 'POST')\n    HTTP_QUERY_VARS = {\n       'now': 'Request a single due hint',\n       'context': 'Current UI context'\n    }\n\n    ALL_HINTS = [\n        # ID, Min age (in days), Interval, Short hint, Details, [Precondition]\n        (APPVER, 0, 99999,\n            _('This is Mailpile version %s') % APPVER,\n            \n            \n            \"javascript:Mailpile.plugins.hints.release_notes();\"),\n\n        ('deletion', 3, 90,\n            _('Your Mailpile is configured to never delete e-mail'),\n            '/page/hints/deletion.html',\n            lambda cfg, ctx: not cfg.prefs.allow_deletion),\n\n        ('spam-dependencies', 0, 1,\n            _('Your spam filter is broken: please install spambayes'),\n            '/page/hints/spambayes.html',\n            BrokenSpambayes),\n\n        ('keyboard', 4, 180,\n            _('Mailpile has keyboard shortcuts!'),\n            \"/page/hints/keyboard-shortcuts.html\",\n            lambda cfg, cgx: not cfg.web.keybindings),\n\n        \n        \n        ('spam', 5, 90,\n            _('Learn how to get the most out of Mailpile\\'s spam filter'),\n            '/page/hints/spam.html'),\n\n        \n        \n        ('gravatar', 10, 365,\n            _('Mailpile uses Gravatar thumbnails!'),\n            '/page/hints/gravatar.html'),\n\n        \n        \n        \n        ('backups', 14, 180,\n            _('You really should make backups of your Mailpile'),\n            '/page/hints/backups.html'),\n\n        \n        \n        ('autotagging', 21, 365,\n            _('Mailpile can automatically tag or untag any kind of e-mail!'),\n            '/page/hints/autotagging.html')]\n\n    def _today(self):\n        return int(time.time() // (24*3600))\n\n    def timestamps(self):\n        global TIMESTAMPS\n        if TIMESTAMPS is None:\n            try:\n                TIMESTAMPS = self.session.config.load_pickle('hints.dat')\n            except:\n                TIMESTAMPS = {'initial': self._today()}\n                self.save_timestamps()\n        return TIMESTAMPS\n\n    def save_timestamps(self):\n        global TIMESTAMPS\n        if TIMESTAMPS:\n            self.session.config.save_pickle(TIMESTAMPS, 'hints.dat')\n\n    def _days(self):\n        return int(self._today() - self.timestamps()['initial'])\n\n    def _hint_days(self, hint):\n        \n        \n        return int(self.timestamps().get('days:%s' % hint[0], hint[1]))\n\n    def _postpone_hint(self, hint, days=None):\n        ts = self.timestamps()\n        ts['days:%s' % hint[0]] = int(self._days() + (days or hint[2]))\n        ts['last_displayed'] = self._today()\n        self.save_timestamps()\n\n    def _hint_applies(self, hint, ctx):\n        if len(hint) > 5:\n            return hint[5](self.session.config, ctx)\n        else:\n            return True\n\n    def _hint_event(self, ctx, hint):\n        applies = self._hint_applies(hint, ctx)\n\n        in_days = max(0, self._hint_days(hint) - self._days())\n        if in_days > 9999:\n            in_days = _('never')\n\n        action_url, action_cls = hint[4], ''\n        if action_url.startswith('/page/'):\n            action_cls = 'auto-modal'\n\n        return {\n            'action_cls': action_cls,\n            'action_url': action_url,\n            'action_text': _('learn more') if hint[3] else '',\n            'applies': applies,\n            'message': _('Did you know') + ' ...',\n            'message2': _(hint[3]),\n            'in_days': in_days,\n            'interval': hint[2],\n            'data': {},\n            'name': hint[0]}\n\n    def _choose_hint(self, ctx):\n        if self._today() == self.timestamps().get('last_displayed'):\n            return None\n\n        days = self._days()\n        hints = [(self._hint_days(h) - days, h)\n                 for h in self.ALL_HINTS if self._hint_applies(h, ctx)]\n\n        if hints:\n            oldest = min(hints)\n            if oldest[0] <= 0:\n                return oldest[1]\n\n        return None\n\n    def command(self):\n        ctx = self.data.get('context')\n\n        if 'reset' in self.args:\n            safe_assert(self.data.get('_method', 'POST') == 'POST')\n            ts = self.timestamps()\n            for k in ts.keys():\n                del ts[k]\n            ts['initial'] = self._today()\n\n        elif 'next' in self.args:\n            safe_assert(self.data.get('_method', 'POST') == 'POST')\n            self.timestamps()['last_displayed'] = 0\n            self.timestamps()['initial'] -= 30\n\n        if 'now' in self.args or 'now' in self.data:\n            hint = self._choose_hint(ctx)\n            if hint:\n                if 'POST' == self.data.get('_method', 'POST'):\n                    self._postpone_hint(hint)\n                return self._success(hint[3], result={\n                    'hints': [self._hint_event(ctx, hint)]})\n            else:\n                return self._success(_('Nothing Happened'), result={\n                    'hints': []})\n        else:\n            return self._success(_('Did you know') + ' ...', result={\n                'today': self._today(),\n                'days': self._days(),\n                'ts': self.timestamps(),\n                'hints': [self._hint_event(ctx, h) for h in self.ALL_HINTS]})\n\n\n_ = gettext\n\n", "comments": "   provide periodic hints user       this clippy replacement         pluggable commands data views                                             id  min age (in days)  interval  short hint  details   precondition     note  the style quotes matters  js sucks          bit  single quotes please     remind user manage spam every 3 months     fixme  allow user somehow say  i know  shutup      introduce gravatar integration 10 days  yearly repetition     remind privacy implications    don bother user backups unless using    app least 2 weeks  after  bug every 6 months     fixme  allow user somehow say  i backups  shutup      introduce autotagging 3 weeks  remind user per year     this something justifies much nagging     this allow user postpone hint  check timestamp    data file falling back hardcoded default     eof   ", "content": "# This is our very own Clippy replacement...\n\nimport time\n\nfrom gettext import gettext\nfrom mailpile.plugins import PluginManager\n\n_ = lambda t: t\n\n\n##[ Pluggable commands and data views ]#######################################\n\nimport random\nfrom mailpile.config.defaults import APPVER\nfrom mailpile.commands import Command\nfrom mailpile.util import md5_hex, safe_assert\n\n\nTIMESTAMPS = None\n\n\ndef BrokenSpambayes(cfg, ctx):\n    if 'autotag_sb' not in cfg.sys.plugins:\n        return True\n    try:\n        import spambayes\n        return False\n    except:\n        return True\n\n\nclass hintsCommand(Command):\n    \"\"\"Provide periodic hints to the user\"\"\"\n    SYNOPSIS_ARGS = '[now|reset]'\n    SPLIT_ARG = True\n    HTTP_CALLABLE = ('GET', 'POST')\n    HTTP_QUERY_VARS = {\n       'now': 'Request a single due hint',\n       'context': 'Current UI context'\n    }\n\n    ALL_HINTS = [\n        # ID, Min age (in days), Interval, Short hint, Details, [Precondition]\n        (APPVER, 0, 99999,\n            _('This is Mailpile version %s') % APPVER,\n            # Note: The style of quotes matters here, because the JS sucks\n            #       a bit. Single quotes only please!\n            \"javascript:Mailpile.plugins.hints.release_notes();\"),\n\n        ('deletion', 3, 90,\n            _('Your Mailpile is configured to never delete e-mail'),\n            '/page/hints/deletion.html',\n            lambda cfg, ctx: not cfg.prefs.allow_deletion),\n\n        ('spam-dependencies', 0, 1,\n            _('Your spam filter is broken: please install spambayes'),\n            '/page/hints/spambayes.html',\n            BrokenSpambayes),\n\n        ('keyboard', 4, 180,\n            _('Mailpile has keyboard shortcuts!'),\n            \"/page/hints/keyboard-shortcuts.html\",\n            lambda cfg, cgx: not cfg.web.keybindings),\n\n        # Remind the user to manage their spam every 3 months.\n        # FIXME: Allow user to somehow say \"I know, shutup\".\n        ('spam', 5, 90,\n            _('Learn how to get the most out of Mailpile\\'s spam filter'),\n            '/page/hints/spam.html'),\n\n        # Introduce Gravatar integration after 10 days, and yearly repetition.\n        # Remind of the privacy implications\n        ('gravatar', 10, 365,\n            _('Mailpile uses Gravatar thumbnails!'),\n            '/page/hints/gravatar.html'),\n\n        # Don't bother the user about backups unless they've been using the\n        # app for at least 2 weeks. After that, only bug them every 6 months.\n        # FIXME: Allow user to somehow say \"I have backups, shutup\".\n        ('backups', 14, 180,\n            _('You really should make backups of your Mailpile'),\n            '/page/hints/backups.html'),\n\n        # Introduce autotagging after 3 weeks, remind the user once per year.\n        # This isn't something that justifies much nagging.\n        ('autotagging', 21, 365,\n            _('Mailpile can automatically tag or untag any kind of e-mail!'),\n            '/page/hints/autotagging.html')]\n\n    def _today(self):\n        return int(time.time() // (24*3600))\n\n    def timestamps(self):\n        global TIMESTAMPS\n        if TIMESTAMPS is None:\n            try:\n                TIMESTAMPS = self.session.config.load_pickle('hints.dat')\n            except:\n                TIMESTAMPS = {'initial': self._today()}\n                self.save_timestamps()\n        return TIMESTAMPS\n\n    def save_timestamps(self):\n        global TIMESTAMPS\n        if TIMESTAMPS:\n            self.session.config.save_pickle(TIMESTAMPS, 'hints.dat')\n\n    def _days(self):\n        return int(self._today() - self.timestamps()['initial'])\n\n    def _hint_days(self, hint):\n        # This will allow the user to postpone a hint; we check the timestamp\n        # data file before falling back to the hardcoded default.\n        return int(self.timestamps().get('days:%s' % hint[0], hint[1]))\n\n    def _postpone_hint(self, hint, days=None):\n        ts = self.timestamps()\n        ts['days:%s' % hint[0]] = int(self._days() + (days or hint[2]))\n        ts['last_displayed'] = self._today()\n        self.save_timestamps()\n\n    def _hint_applies(self, hint, ctx):\n        if len(hint) > 5:\n            return hint[5](self.session.config, ctx)\n        else:\n            return True\n\n    def _hint_event(self, ctx, hint):\n        applies = self._hint_applies(hint, ctx)\n\n        in_days = max(0, self._hint_days(hint) - self._days())\n        if in_days > 9999:\n            in_days = _('never')\n\n        action_url, action_cls = hint[4], ''\n        if action_url.startswith('/page/'):\n            action_cls = 'auto-modal'\n\n        return {\n            'action_cls': action_cls,\n            'action_url': action_url,\n            'action_text': _('learn more') if hint[3] else '',\n            'applies': applies,\n            'message': _('Did you know') + ' ...',\n            'message2': _(hint[3]),\n            'in_days': in_days,\n            'interval': hint[2],\n            'data': {},\n            'name': hint[0]}\n\n    def _choose_hint(self, ctx):\n        if self._today() == self.timestamps().get('last_displayed'):\n            return None\n\n        days = self._days()\n        hints = [(self._hint_days(h) - days, h)\n                 for h in self.ALL_HINTS if self._hint_applies(h, ctx)]\n\n        if hints:\n            oldest = min(hints)\n            if oldest[0] <= 0:\n                return oldest[1]\n\n        return None\n\n    def command(self):\n        ctx = self.data.get('context')\n\n        if 'reset' in self.args:\n            safe_assert(self.data.get('_method', 'POST') == 'POST')\n            ts = self.timestamps()\n            for k in ts.keys():\n                del ts[k]\n            ts['initial'] = self._today()\n\n        elif 'next' in self.args:\n            safe_assert(self.data.get('_method', 'POST') == 'POST')\n            self.timestamps()['last_displayed'] = 0\n            self.timestamps()['initial'] -= 30\n\n        if 'now' in self.args or 'now' in self.data:\n            hint = self._choose_hint(ctx)\n            if hint:\n                if 'POST' == self.data.get('_method', 'POST'):\n                    self._postpone_hint(hint)\n                return self._success(hint[3], result={\n                    'hints': [self._hint_event(ctx, hint)]})\n            else:\n                return self._success(_('Nothing Happened'), result={\n                    'hints': []})\n        else:\n            return self._success(_('Did you know') + ' ...', result={\n                'today': self._today(),\n                'days': self._days(),\n                'ts': self.timestamps(),\n                'hints': [self._hint_event(ctx, h) for h in self.ALL_HINTS]})\n\n\n_ = gettext\n# EOF #\n", "description": "A free & open modern, fast email client with user-friendly encryption and privacy features", "file_name": "hints.py", "id": "307874a9745faa3fd070c9e6bd96c8e2", "language": "Python", "project_name": "Mailpile", "quality": "", "save_path": "/home/ubuntu/test_files/clean/python/mailpile-Mailpile/mailpile-Mailpile-8ebc5fe/shared-data/contrib/hints/hints.py", "save_time": "", "source": "", "update_at": "2018-03-17T23:54:52Z", "url": "https://github.com/mailpile/Mailpile", "wiki": true}